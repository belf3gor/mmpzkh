#Область ПрограммныйИнтерфейс

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ПериодРегистрации
//		Пособия - таблица значений с колонками
//			ФизическоеЛицо: должно быть непустым
//          ВидПособияСоциальногоСтрахования
//          СуммаВсего.
//          Сотрудник - необязательная, может отсутствовать.
//          ВидЗанятости - необязательная, может отсутствовать.
//          ОплаченныеДни - необязательная, может отсутствовать.
//          СтраховыеСлучаи - необязательная, может отсутствовать.
//          ДатаСтраховогоСлучая - необязательная, может отсутствовать.
//          ФинансированиеФедеральнымБюджетом - необязательная, может отсутствовать.
//          СуммаСверхНорм - необязательная, может отсутствовать.
//		ПособияПоУходу - таблица значений с колонками
//			ФизическоеЛицо: должно быть непустым
//          СуммаВсего.
//          Сотрудник - необязательная, может отсутствовать.
//          ВидЗанятости - необязательная, может отсутствовать.
//          СтраховыеСлучаи - необязательная, может отсутствовать.
//          ДатаСтраховогоСлучая - необязательная, может отсутствовать.
//          ФинансированиеФедеральнымБюджетом - необязательная, может отсутствовать.
//          СуммаСверхНорм - необязательная, может отсутствовать.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьПособия(Движения, Отказ, Организация, ПериодРегистрации, Пособия, ПособияПоУходу, Записывать = Ложь) Экспорт
	
	ПособияВыплачиваетФСС = ПериодРегистрации >= ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий(Организация);
	
	ЕстьНовыеСтрокиПособий = Ложь;
	ЕстьНовыеСтрокиПособийПоУходу = Ложь;
	Если Пособия <> Неопределено Тогда
		Для Каждого СтрокаДанных Из Пособия Цикл
			ЕстьНовыеСтрокиПособий = Истина;
			НоваяСтрока = Движения.ПособияПоСоциальномуСтрахованию.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Период = ПериодРегистрации;
			Если СтрокаДанных.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев
				Или СтрокаДанных.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай
				Или СтрокаДанных.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание Тогда
				СтрокаЗачетаРасходов(Движения, Организация, ПериодРегистрации, Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи, СтрокаДанных.СуммаВсего);
			ИначеЕсли ПособияВыплачиваетФСС И (СтрокаДанных.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами
				Или СтрокаДанных.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами
				Или СтрокаДанных.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.ВСвязиСоСмертью) Тогда
			Иначе
				СтрокаЗачетаРасходов(Движения, Организация, ПериодРегистрации, Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФСС, СтрокаДанных.СуммаВсего);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ПособияПоУходу <> Неопределено Тогда
		Для Каждого СтрокаДанных Из ПособияПоУходу Цикл
			ЕстьНовыеСтрокиПособийПоУходу = Истина;
			НоваяСтрока = Движения.ПособияПоУходуЗаРебенком.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Период = ПериодРегистрации;
			СтрокаЗачетаРасходов(Движения, Организация, ПериодРегистрации, Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФСС, СтрокаДанных.СуммаВсегоПоУходуЗаПервымРебенком + СтрокаДанных.СуммаВсегоПоУходуЗаВторымРебенком);
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьНовыеСтрокиПособий Или ЕстьНовыеСтрокиПособийПоУходу Тогда
		Если Записывать Тогда
			Движения.РасчетыСФондамиПоСтраховымВзносам.Записать();
			Движения.РасчетыСФондамиПоСтраховымВзносам.Записывать = Ложь;
		Иначе
			Движения.РасчетыСФондамиПоСтраховымВзносам.Записывать = Истина;
		КонецЕсли;
		Если Пособия <> Неопределено Тогда
			Если ЕстьНовыеСтрокиПособий Тогда
				Движения.ПособияПоСоциальномуСтрахованию.Записать();
				Движения.ПособияПоСоциальномуСтрахованию.Записывать = Ложь;
			Иначе
				Движения.ПособияПоСоциальномуСтрахованию.Записывать = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ПособияПоУходу <> Неопределено Тогда
			Если ЕстьНовыеСтрокиПособийПоУходу Тогда
				Движения.ПособияПоУходуЗаРебенком.Записать();
				Движения.ПособияПоУходуЗаРебенком.Записывать = Ложь;
			Иначе
				Движения.ПособияПоУходуЗаРебенком.Записывать = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Составляет соответствие размеров предельной величины базы страховых взносов,
//	действующих на указанные годы.
//
// Параметры:
//	Годы - массив элементов типа число.
//
// Возвращаемое значение - соответствие, где ключом является год, а значением - размер предельной величины.
//
Функция ПредельнаяВеличинаБазыСтраховыхВзносов(Годы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТПредельнаяВеличинаБазы(Запрос.МенеджерВременныхТаблиц, Годы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредельнаяВеличинаБазыСтраховыхВзносов.Год КАК Год,
	|	ПредельнаяВеличинаБазыСтраховыхВзносов.Размер КАК Размер
	|ИЗ
	|	ВТПредельнаяВеличинаБазы КАК ПредельнаяВеличинаБазыСтраховыхВзносов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПредельнаяВеличина = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПредельнаяВеличина.Вставить(Выборка.Год, Выборка.Размер);
	КонецЦикла;
	
	Возврат ПредельнаяВеличина;
	
КонецФункции

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//      	Должна содержать готовую таблицу рег-ра СтраховыеВзносыПоФизическимЛицам с полями:
//				ФизическоеЛицо,
//				Сотрудник,
//				Начисление,
//				ДатаНачала,
//				ПФРПоСуммарномуТарифу и пр. ресурсы рег-ра СтраховыеВзносыПоФизическимЛицам
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ПериодРегистрации - дата -
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура ЗарегистрироватьСтраховыеВзносыКакПособие(Движения, Отказ, Организация, ПериодРегистрации, Записывать = Ложь) Экспорт
	
	Если Отказ Или ПериодРегистрации < '20150101' Тогда // До 2015 года взносы оплачивал работодатель.
		Возврат
	КонецЕсли;
	
	НачисленияДляОтбораВзносов = НачисленияОблагаемыхВзносамиПособий();

	Если Не ЗначениеЗаполнено(НачисленияДляОтбораВзносов) Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Начисления", НачисленияДляОтбораВзносов);
	Запрос.УстановитьПараметр("Движения", Движения.СтраховыеВзносыПоФизическимЛицам);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОДоходахИВзносах.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахИВзносах.Сотрудник КАК Сотрудник,
	|	СведенияОДоходахИВзносах.ДатаНачала КАК ДатаСтраховогоСлучая,
	|	0 КАК СуммаВсего
	|ПОМЕСТИТЬ ВТДвижения
	|ИЗ
	|	&Движения КАК СведенияОДоходахИВзносах
	|ГДЕ
	|	СведенияОДоходахИВзносах.Начисление В(&Начисления)
	|	И СведенияОДоходахИВзносах.ДатаНачала >= ДАТАВРЕМЯ(2015, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходахИВзносах.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахИВзносах.Сотрудник КАК Сотрудник,
	|	СведенияОДоходахИВзносах.ДатаСтраховогоСлучая,
	|	ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами) КАК ВидПособияСоциальногоСтрахования,
	|	СУММА(СведенияОДоходахИВзносах.СуммаВсего) КАК СуммаВсего
	|ИЗ
	|	ВТДвижения КАК СведенияОДоходахИВзносах
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходахИВзносах.ФизическоеЛицо,
	|	СведенияОДоходахИВзносах.Сотрудник,
	|	СведенияОДоходахИВзносах.ДатаСтраховогоСлучая
	|
	|ИМЕЮЩИЕ
	|	СУММА(СведенияОДоходахИВзносах.СуммаВсего) <> 0";
	
	ОписаниеПолейВзносов = СтрЗаменить(УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина,"СведенияОДоходахИВзносах"), ","," + ") + " КАК СуммаВсего";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "0 КАК СуммаВсего", ОписаниеПолейВзносов);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	СформироватьПособия(Движения, Отказ, Организация, ПериодРегистрации, Результат.Выгрузить(), Неопределено, Записывать);
	
КонецПроцедуры

// Возвращает разность стажей в годах и месяцах.
//
// Параметры:
//  БольшийСтажЛет, БольшийСтажМесяцев, МеньшийСтажЛет, МеньшийСтажМесяцев.
//
// Возвращаемое значение:
//   Структура - РазностьЛет, РазностьМесяцев.
//
Функция ПодсчитатьРазностьСтажейВГодахИМесяцах(БольшийСтажЛет, БольшийСтажМесяцев, МеньшийСтажЛет, МеньшийСтажМесяцев) Экспорт
	РазностьЛет = 0;
	РазностьМесяцев = 0;
	
	РазностьМесяцев = БольшийСтажЛет * 12 + БольшийСтажМесяцев - МеньшийСтажЛет * 12 - МеньшийСтажМесяцев;
	Если РазностьМесяцев > 0 Тогда
		РазностьЛет = Цел(РазностьМесяцев / 12);
		РазностьМесяцев = РазностьМесяцев - РазностьЛет * 12;
	Иначе
		РазностьЛет = 0;
		РазностьМесяцев = 0;
	КонецЕсли;
	
	Возврат Новый Структура("РазностьЛет,РазностьМесяцев", РазностьЛет, РазностьМесяцев);
	
КонецФункции

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Заполняет табличные части документа "ИсходящаяСправкаОЗаработкеДляРасчетаПособий".
//
// Параметры:
//  Объект -  ДокументОбъект.ИсходящаяСправкаОЗаработкеДляРасчетаПособий
//  ПараметрыЗаполнения - см. ПараметрыЗаполненияСправкиОЗаработкеИДняхОтсутствия.
//
// Возвращаемое значение:
//	Истина, если данные в объекте были обновлены.
//
Функция ЗаполнитьСправкуДаннымиОЗаработкеИДняхОтсутствия(Объект, ПараметрыЗаполнения) Экспорт
	
	Возврат УчетПособийСоциальногоСтрахованияВнутренний.ЗаполнитьСправкуДаннымиОЗаработкеИДняхОтсутствия(Объект, ПараметрыЗаполнения);

КонецФункции

// Дополняет описание фиксации данных документа "ИсходящаяСправкаОЗаработкеДляРасчетаПособий".
//
// Параметры:
//  ПараметрыФиксацииВторичныхДанных - см. ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксацииВторичныхДанных.
//
Процедура ДополнитьПараметрыФиксацииИсходящаяСправкаОЗаработкеДляРасчетаПособий(ПараметрыФиксацииВторичныхДанных) Экспорт
	
	УчетПособийСоциальногоСтрахованияВнутренний.ДополнитьПараметрыФиксацииИсходящаяСправкаОЗаработкеДляРасчетаПособий(ПараметрыФиксацииВторичныхДанных);

КонецПроцедуры

// Формирует параметры для создания временных таблиц используемых для заполнения справки о заработке для расчета
// пособий.
//
// Параметры:
//  Объект - ДокументОбъект.СправкаОЗаработкеДляРасчетаПособий.
//
// Возвращаемое значение:
//    Структура:
//		ГодНачало
//		ГодОкончание
//		Сотрудник
//		Организация
//      ПоВсемОП - данные по Организации или по ГоловнойОрганизации.
//      Обновление - учитывать ли зафиксированные в документе реквизиты.
//      РасчетныеГоды - отбор заполняемых лет, входящих в период между ГодНачало и ГодОкончание.
//      ОграничиватьРазмерЗаработка - применять ли ограничение базой страховых взносов.
//
Функция ПараметрыЗаполненияСправкиОЗаработкеИДняхОтсутствия(Объект) Экспорт
	
	Возврат УчетПособийСоциальногоСтрахованияВнутренний.ПараметрыЗаполненияСправкиОЗаработкеИДняхОтсутствия(Объект)

КонецФункции

// Процедура обеспечивает сбор сведений о хранении данных,
// относящихся к персональным.
//
// Параметры:
//		ТаблицаСведений - таблица значений с полями:
//			Объект 			- строка, содержащая полное имя объекта метаданных,
//			ПоляРегистрации - строка, в которой перечислены имена полей регистрации,
//								отдельные поля регистрации отделяются запятой,
//								альтернативные - символом "|",
//			ПоляДоступа		- строка, в которой перечислены через запятую имена полей доступа.
//			ОбластьДанных	- строка с идентификатором области данных, необязательно для заполнения.
//
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	// Заполнение таблицы сведений.
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо,Фамилия,Имя,Отчество";
	НовыеСведения.ПоляДоступа		= "АдресМестаЖительства,ВидДокумента,СерияДокумента,НомерДокумента,ДатаВыдачиДокумента,КемВыданДокумент,ДанныеОЗаработке.РасчетныйГод,ДанныеОЗаработке.Заработок";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";

	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрНакопления.ПособияПоСоциальномуСтрахованию";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо,Сотрудник";
	НовыеСведения.ПоляДоступа		= "СуммаВсего,СуммаСверхНорм,СуммаФинансируемаяРаботодателем";
	НовыеСведения.ОбластьДанных		= "Доходы";

	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрНакопления.ПособияПоУходуЗаРебенком";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо,Сотрудник";
	НовыеСведения.ПоляДоступа		= "СуммаВсегоПоУходуЗаПервымРебенком,СуммаСверхНормПоУходуЗаПервымРебенком,СуммаВсегоПоУходуЗаВторымРебенком,СуммаСверхНормПоУходуЗаВторымРебенком";
	НовыеСведения.ОбластьДанных		= "Доходы";

КонецПроцедуры

Функция ПособиеЗаНеполныйРасчетныйПериод(ФизическоеЛицо, ДатаНачалаСобытия) Экспорт
		
	Если ДатаНачалаСобытия < '20150101'Или ДатаНачалаСобытия >= '20170101'Тогда // До 2015 и с 2017 года средний исчисляется одинаково для всех.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ПостоянноПроживалВКрыму18Марта2014Года") = Истина
	
КонецФункции

Функция НеВключатьПериодВДанныеДляРасчета(Период, НеполныйРасчетныйПериод) Экспорт

	Возврат	НеполныйРасчетныйПериод И Период < УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаНачалаНеполногоПериодаРасчетаСреднегоЗаработка();

КонецФункции

#Область РегламентированнаяОтчетность

// РСВ

Процедура ОписаниеПоказателей_РСВ_2017Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001101", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001102", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001103", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130001104", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002101", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002102", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130002103", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003101", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003102", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003103", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130003104", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130004002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130004003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130005002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130005003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006101", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006102", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006103", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006104", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006201", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006202", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006203", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130006204", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130007002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130007003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130007004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130008003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130008004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130009001", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130009002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000130009003", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140002002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140002003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140002004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140003002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140003003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140003004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140004002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140005002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140005003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140005004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140006002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140006003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140006004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140008002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140008003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140008004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140009002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140009003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140009004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140010002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140011002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140011003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140011004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140012002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140012003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140012004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140014002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140014003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140014004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140016002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140016003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140016004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140017002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140017003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140017004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140018002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140019002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140019003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140019004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140020002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140020003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140020004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140022002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140022003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140022004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140023002", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140023003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140023004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140030003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140030004", Истина, Истина);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000140031004", Истина, Истина);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ_2017Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	Организация = ПараметрыОтчета.Организация;
	
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	ДатаАктуальности = Макс(ОкончаниеПериода, КонецДня(ПараметрыОтчета.ДатаПодписи));
	
	ОписаниеТаблиц = Новый Структура("ПособияПоНетрудоспособности2017,ПособияПоУходу2017,ПолучателейПособияПоУходу2017,ПособияПоНетрудоспособностиСверхНорм2017,ПолучателейПособийСверхНорм2017,ПособияПоУходуСверхНорм2017,ПолучателейПособияПоУходуЗаПервымРебенкомСверхНорм2017,ПолучателейПособияПоУходуЗаВторымРебенкомСверхНорм2017,ПолучателейПособияПоУходуСверхНорм2017");
	РасчетПоказателей_РСВ_2017(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, Ложь, ДатаАктуальности);
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_РСВ_2017Кв1(ПоказателиОтчета);
	Значение = Неопределено;
	Раздел1Прил3 = Контейнер.Раздел1Прил3.Строки[0].Данные;
	Для каждого КлючИЗначение Из Раздел1Прил3 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Раздел1Прил3[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Раздел1Прил4 = Контейнер.Раздел1Прил4.Строки[0].Данные;
	Для каждого КлючИЗначение Из Раздел1Прил4 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Раздел1Прил4[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	// Приложение 2 Раздела 1
	
	Контейнер.Раздел1Прил2.Строки[0].Данные.П000120000101 = ?(ДатаКонцаПериодаОтчета > ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий(Организация),"1","2");
	
	// Приложение 3 Раздела 1
	
	Результат = ОписаниеТаблиц.ПособияПоНетрудоспособности2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил3, СтрокаДанных);
	КонецЕсли;
	
	Результат = ОписаниеТаблиц.ПособияПоУходу2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил3, СтрокаДанных);
	КонецЕсли;
	
	Результат = ОписаниеТаблиц.ПолучателейПособияПоУходу2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил3, СтрокаДанных);
	КонецЕсли;
	
	// Приложение 4 Раздела 1
	
	Результат = ОписаниеТаблиц.ПособияПоНетрудоспособностиСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;

	Результат = ОписаниеТаблиц.ПолучателейПособийСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;

	Результат = ОписаниеТаблиц.ПособияПоУходуСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;

	Результат = ОписаниеТаблиц.ПолучателейПособияПоУходуСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;
	
	Результат = ОписаниеТаблиц.ПолучателейПособияПоУходуЗаПервымРебенкомСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;

	Результат = ОписаниеТаблиц.ПолучателейПособияПоУходуЗаВторымРебенкомСверхНорм2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Раздел1Прил4, СтрокаДанных);
	КонецЕсли;

КонецПроцедуры


Процедура РасчетПоказателейРСВ(ИмяРасчета, НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные = Ложь, ДатаАктуальности = Неопределено) Экспорт

	УточненнаяДатаАктуальности = ?(ЗначениеЗаполнено(ДатаАктуальности), ДатаАктуальности, ОкончаниеПериода);
	
	Если ИмяРасчета = "РасчетПоказателей_РСВ_2017Кв1" Тогда
		РасчетПоказателей_РСВ_2017(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные, УточненнаяДатаАктуальности);
	Иначе
		
	КонецЕсли;

КонецПроцедуры

Процедура РасчетПоказателей_РСВ_2017(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные, ДатаАктуальности)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтложенноеПроведениеДокументов") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеДокументовВУчетеСтраховыхВзносов");
		Модуль.ОтразитьДокументыВУчетеСтраховыхВзносов(Организация);
	КонецЕсли;
	
	НачалоТекущегоКвартала = НачалоКвартала(ОкончаниеПериода);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",		НачалоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",		ОкончаниеПериода);
	Запрос.УстановитьПараметр("НачалоТекущегоКвартала",		НачалоТекущегоКвартала);
	Запрос.УстановитьПараметр("ДатаПередачиФССВыплатыПособий", ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий(Организация));
	Запрос.УстановитьПараметр("Месяц1",						Месяц(НачалоТекущегоКвартала));
	Запрос.УстановитьПараметр("Месяц2",						Месяц(НачалоТекущегоКвартала) + 1);
	Запрос.УстановитьПараметр("Месяц3",						Месяц(НачалоТекущегоКвартала) + 2);
	
	// Приложение 3 Раздела 1
	
	Если ОписаниеТаблиц.Свойство("ПособияПоНетрудоспособности2017") Или ОписаниеТаблиц.Свойство("ПособияПоНетрудоспособностиСверхНорм2017") Или ОписаниеТаблиц.Свойство("ПолучателейПособийСверхНорм2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пособия.ФизическоеЛицо,
		|	Пособия.ВидЗанятости,
		|	Пособия.ВидЗанятости КАК ПроверяемыйВидЗанятости,
		|	Пособия.ВидПособияСоциальногоСтрахования,
		|	Пособия.ФинансированиеФедеральнымБюджетом,
		|	Пособия.Период,
		|	Пособия.СтраховыеСлучаиОборот,
		|	Пособия.ОплаченныеДниОборот,
		|	Пособия.СуммаВсегоОборот,
		|	Пособия.СуммаСверхНормОборот,
		|	Пособия.ФизическоеЛицо КАК ФизЛицоДляСвязей
		|ПОМЕСТИТЬ ВТДанныеУчета
		|ИЗ
		|	РегистрНакопления.ПособияПоСоциальномуСтрахованию.Обороты(&НачалоОтчетногоПериода, &КонецОтчетногоПериода, Месяц, Организация = &Организация) КАК Пособия";
		Запрос.Выполнить();
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("ПособияПоНетрудоспособности2017") Тогда
		
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДанныеУчета.ФизическоеЛицо,
		|	ДанныеУчета.Период
		|ПОМЕСТИТЬ ВТПериодыФизЛицОрганизаций
		|ИЗ
		|	ВТДанныеУчета КАК ДанныеУчета";
		Запрос.Выполнить();
		
		УчетСтраховыхВзносов.СформироватьВТДанныеОПравахНаСтрахование(Запрос.МенеджерВременныхТаблиц);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.СуммаСверхНормОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001101,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001102,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|					ТОГДА Пособия.СуммаСверхНормОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130001104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФССкакИностранец
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130002001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФССкакИностранец
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130002002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФССкакИностранец
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130002003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФССкакИностранец
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130002101,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФССкакИностранец
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130002102,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|						И ДанныеОПравахНаСтрахование.ЗастрахованФССкакИностранец
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130002103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаСверхНормОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003101,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003102,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.СуммаСверхНормОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130003104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности)
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130004002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130004003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ПриРожденииРебенка)
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130005002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ПриРожденииРебенка)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130005003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130007002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130007003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130007004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130008003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130008004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ВСвязиСоСмертью)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130009001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ВСвязиСоСмертью)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СтраховыеСлучаиОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130009002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ВСвязиСоСмертью)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130009003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ПриРожденииРебенка)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ВСвязиСоСмертью)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ВсегоРасходов,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.СуммаСверхНормОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаСверхНормОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ВсегоСверхНорм,
		|	Пособия.ФизическоеЛицо,
		|	Пособия.ВидЗанятости
		|ИЗ
		|	ВТДанныеУчета КАК Пособия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПравахНаСтрахование КАК ДанныеОПравахНаСтрахование
		|		ПО Пособия.ФизЛицоДляСвязей = ДанныеОПравахНаСтрахование.ФизическоеЛицо
		|			И Пособия.Период = ДанныеОПравахНаСтрахование.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	Пособия.ФизическоеЛицо,
		|	Пособия.ВидЗанятости";

		МассивПолей = Новый Массив;
		Если Не ПодробныеДанные Тогда
			МассивПолей.Добавить("ФизическоеЛицо");
			МассивПолей.Добавить("ВидЗанятости");
		КонецЕсли;
		Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей);
		ОписаниеТаблиц.ПособияПоНетрудоспособности2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;

	Если ОписаниеТаблиц.Свойство("ПособияПоУходу2017") Или ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходу2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПособияСоциальномуСтрахованиюОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот,
		|	ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоПоУходуЗаПервымРебенкомОборот,
		|	ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормПоУходуЗаПервымРебенкомОборот,
		|	ПособияСоциальномуСтрахованиюОбороты.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот,
		|	ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоПоУходуЗаВторымРебенкомОборот,
		|	ПособияСоциальномуСтрахованиюОбороты.СуммаСверхНормПоУходуЗаВторымРебенкомОборот,
		|	ПособияСоциальномуСтрахованиюОбороты.Период
		|ПОМЕСТИТЬ ВТПособияПоУходу
		|ИЗ
		|	РегистрНакопления.ПособияПоУходуЗаРебенком.Обороты(&НачалоОтчетногоПериода, &КонецОтчетногоПериода, Квартал, Организация = &Организация) КАК ПособияСоциальномуСтрахованиюОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо";
		Запрос.Выполнить();
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("ПособияПоУходу2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПособияПоУходу.ФизическоеЛицо,
		|	СУММА(ПособияПоУходу.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот) КАК СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот,
		|	СУММА(ПособияПоУходу.СуммаВсегоПоУходуЗаПервымРебенкомОборот) КАК СуммаВсегоПоУходуЗаПервымРебенкомОборот,
		|	СУММА(ПособияПоУходу.СуммаСверхНормПоУходуЗаПервымРебенкомОборот) КАК СуммаСверхНормПоУходуЗаПервымРебенкомОборот,
		|	СУММА(ПособияПоУходу.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот) КАК СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот,
		|	СУММА(ПособияПоУходу.СуммаВсегоПоУходуЗаВторымРебенкомОборот) КАК СуммаВсегоПоУходуЗаВторымРебенкомОборот,
		|	СУММА(ПособияПоУходу.СуммаСверхНормПоУходуЗаВторымРебенкомОборот) КАК СуммаСверхНормПоУходуЗаВторымРебенкомОборот
		|ПОМЕСТИТЬ ВТПособияПоУходуВцелом
		|ИЗ
		|	ВТПособияПоУходу КАК ПособияПоУходу
		|
		|СГРУППИРОВАТЬ ПО
		|	ПособияПоУходу.ФизическоеЛицо";
		Запрос.Выполнить();
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.СуммаВсегоПоУходуЗаПервымРебенкомОборот <> 0
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130006101,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.СуммаВсегоПоУходуЗаПервымРебенкомОборот <> 0
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130006102,
		|	ЕСТЬNULL(СУММА(Пособия.СуммаВсегоПоУходуЗаПервымРебенкомОборот), 0) КАК П000130006103,
		|	ЕСТЬNULL(СУММА(Пособия.СуммаСверхНормПоУходуЗаПервымРебенкомОборот), 0) КАК П000130006104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.СуммаВсегоПоУходуЗаВторымРебенкомОборот <> 0
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130006201,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.СуммаВсегоПоУходуЗаВторымРебенкомОборот <> 0
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000130006202,
		|	ЕСТЬNULL(СУММА(Пособия.СуммаВсегоПоУходуЗаВторымРебенкомОборот), 0) КАК П000130006203,
		|	ЕСТЬNULL(СУММА(Пособия.СуммаСверхНормПоУходуЗаВторымРебенкомОборот), 0) КАК П000130006204,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.СуммаВсегоПоУходуЗаПервымРебенкомОборот <> 0
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ + ВЫБОР
		|				КОГДА Пособия.СуммаВсегоПоУходуЗаВторымРебенкомОборот <> 0
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ДнейПоУходу,
		|	ЕСТЬNULL(СУММА(Пособия.СуммаВсегоПоУходуЗаПервымРебенкомОборот + Пособия.СуммаВсегоПоУходуЗаВторымРебенкомОборот), 0) КАК ВсегоПоУходу,
		|	ЕСТЬNULL(СУММА(Пособия.СуммаСверхНормПоУходуЗаПервымРебенкомОборот + Пособия.СуммаСверхНормПоУходуЗаВторымРебенкомОборот), 0) КАК СверхНормПоУходу,
		|	Пособия.ФизическоеЛицо
		|ИЗ
		|	ВТПособияПоУходуВцелом КАК Пособия
		|
		|СГРУППИРОВАТЬ ПО
		|	Пособия.ФизическоеЛицо";
		
		МассивПолей = Новый Массив;
		Если Не ПодробныеДанные Тогда
			МассивПолей.Добавить("ФизическоеЛицо");
		КонецЕсли;
		Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей);
		ОписаниеТаблиц.ПособияПоУходу2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходу2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеУчетаПособий.ФизическоеЛицо), 0) КАК П000130006001
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПособияСоциальномуСтрахованиюОбороты.ФизическоеЛицо КАК ФизическоеЛицо
		|	ИЗ
		|		ВТПособияПоУходу КАК ПособияСоциальномуСтрахованиюОбороты
		|
		|	СГРУППИРОВАТЬ ПО
		|		ПособияСоциальномуСтрахованиюОбороты.ФизическоеЛицо
		|
		|	ИМЕЮЩИЕ
		|		СУММА(ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоПоУходуЗаПервымРебенкомОборот + ПособияСоциальномуСтрахованиюОбороты.СуммаВсегоПоУходуЗаВторымРебенкомОборот) <> 0) КАК ДанныеУчетаПособий";
		ОписаниеТаблиц.ПолучателейПособияПоУходу2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	// Приложение 4 Раздела 1
	
	Если ОписаниеТаблиц.Свойство("ПособияПоНетрудоспособностиСверхНорм2017") Или ОписаниеТаблиц.Свойство("ПолучателейПособийСверхНорм2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПособияСоциальномуСтрахованию.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ПособияСоциальномуСтрахованию.СтраховыеСлучаиОборот) КАК СтраховыеСлучаи,
		|	СУММА(ПособияСоциальномуСтрахованию.СуммаСверхНормОборот) КАК СуммаСверхНорм,
		|	СУММА(ПособияСоциальномуСтрахованию.ОплаченныеДниОборот) КАК ОплаченныеДни,
		|	ПособияСоциальномуСтрахованию.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
		|	ПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования КАК ВидПособияСоциальногоСтрахования,
		|	ПособияСоциальномуСтрахованию.Период
		|ПОМЕСТИТЬ ВТПособияСверхНорм
		|ИЗ
		|	ВТДанныеУчета КАК ПособияСоциальномуСтрахованию
		|ГДЕ
		|	ПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования В (ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность), ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды), ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ВСвязиСоСмертью))
		|	И ПособияСоциальномуСтрахованию.ФинансированиеФедеральнымБюджетом <> ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПустаяСсылка)
		|	И ПособияСоциальномуСтрахованию.СуммаСверхНормОборот <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ПособияСоциальномуСтрахованию.ФизическоеЛицо,
		|	ПособияСоциальномуСтрахованию.ФинансированиеФедеральнымБюджетом,
		|	ПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования,
		|	ПособияСоциальномуСтрахованию.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПособияСоциальномуСтрахованию.ФизическоеЛицо,
		|	0,
		|	СУММА(ПособияСоциальномуСтрахованию.СуммаВсегоОборот),
		|	СУММА(ПособияСоциальномуСтрахованию.ОплаченныеДниОборот),
		|	ПособияСоциальномуСтрахованию.ФинансированиеФедеральнымБюджетом,
		|	ПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования,
		|	ПособияСоциальномуСтрахованию.Период
		|ИЗ
		|	ВТДанныеУчета КАК ПособияСоциальномуСтрахованию
		|ГДЕ
		|	ПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования В (ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами), ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами))
		|	И ПособияСоциальномуСтрахованию.СуммаВсегоОборот <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ПособияСоциальномуСтрахованию.ФизическоеЛицо,
		|	ПособияСоциальномуСтрахованию.ФинансированиеФедеральнымБюджетом,
		|	ПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования,
		|	ПособияСоциальномуСтрахованию.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФинансированиеФедеральнымБюджетом,
		|	ВидПособияСоциальногоСтрахования";
		Запрос.Выполнить();
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("ПособияПоНетрудоспособностиСверхНорм2017") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140002003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140002004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140003003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140003004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140008003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140008004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140009003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140009004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Семипалатинск)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140014003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Семипалатинск)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140014004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140016003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140016004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140017003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140017004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140022003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140022004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140023003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов)
		|						И Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140023004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.ОплаченныеДни
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140030003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140030004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.СтраховыеВзносыПоДопВыходнымПоУходуЗаДетьмиИнвалидами)
		|						И Пособия.Период < &ДатаПередачиФССВыплатыПособий
		|					ТОГДА Пособия.СуммаСверхНорм
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140031004,
		|	Пособия.ФизическоеЛицо
		|ИЗ
		|	ВТПособияСверхНорм КАК Пособия
		|
		|СГРУППИРОВАТЬ ПО
		|	Пособия.ФизическоеЛицо";
		МассивПолей = Новый Массив;
		Если Не ПодробныеДанные Тогда
			МассивПолей.Добавить("ФизическоеЛицо");
		КонецЕсли;
		Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей);
		ОписаниеТаблиц.ПособияПоНетрудоспособностиСверхНорм2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;

	Если ОписаниеТаблиц.Свойство("ПолучателейПособийСверхНорм2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140002002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140003002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140008002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140009002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Семипалатинск)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140014002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140016002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140017002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140022002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов)
		|						И ВсеПолучатели.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.БеременностьРоды)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140023002
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Пособия.ФизическоеЛицо) КАК КоличествоФизлиц,
		|		Пособия.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
		|		Пособия.ВидПособияСоциальногоСтрахования КАК ВидПособияСоциальногоСтрахования
		|	ИЗ
		|		ВТПособияСверхНорм КАК Пособия
		|
		|	СГРУППИРОВАТЬ ПО
		|		Пособия.ФинансированиеФедеральнымБюджетом,
		|		Пособия.ВидПособияСоциальногоСтрахования) КАК ВсеПолучатели";
		
		ОписаниеТаблиц.ПолучателейПособийСверхНорм2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;

	Если ОписаниеТаблиц.Свойство("ПособияПоУходуСверхНорм2017") Или ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходуЗаПервымРебенкомСверхНорм2017")
		Или ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходуЗаВторымРебенкомСверхНорм2017") Или ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходуСверхНорм2017") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПособияСоциальномуСтрахованию.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПособияСоциальномуСтрахованию.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
		|	ПособияСоциальномуСтрахованию.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот,
		|	ПособияСоциальномуСтрахованию.СуммаСверхНормПоУходуЗаПервымРебенкомОборот,
		|	ПособияСоциальномуСтрахованию.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот,
		|	ПособияСоциальномуСтрахованию.СуммаСверхНормПоУходуЗаВторымРебенкомОборот
		|ПОМЕСТИТЬ ВТПособияПоУходуСверхНорм
		|ИЗ
		|	РегистрНакопления.ПособияПоУходуЗаРебенком.Обороты(
		|			&НачалоОтчетногоПериода,
		|			&КонецОтчетногоПериода,
		|			,
		|			Организация = &Организация
		|				И ФинансированиеФедеральнымБюджетом <> ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПустаяСсылка)) КАК ПособияСоциальномуСтрахованию";

		Запрос.Выполнить();
		
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("ПособияПоУходуСверхНорм2017") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140005003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|					ТОГДА Пособия.СуммаСверхНормПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140005004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140006003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|					ТОГДА Пособия.СуммаСверхНормПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140006004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140011003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|					ТОГДА Пособия.СуммаСверхНормПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140011004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140012003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|					ТОГДА Пособия.СуммаСверхНормПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140012004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140019003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|					ТОГДА Пособия.СуммаСверхНормПоУходуЗаПервымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140019004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|					ТОГДА Пособия.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140020003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|					ТОГДА Пособия.СуммаСверхНормПоУходуЗаВторымРебенкомОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140020004,
		|	Пособия.ФизическоеЛицо
		|ИЗ
		|	ВТПособияПоУходуСверхНорм КАК Пособия
		|
		|СГРУППИРОВАТЬ ПО
		|	Пособия.ФизическоеЛицо";
		МассивПолей = Новый Массив;
		Если Не ПодробныеДанные Тогда
			МассивПолей.Добавить("ФизическоеЛицо");
		КонецЕсли;
		Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей);
		ОписаниеТаблиц.ПособияПоУходуСверхНорм2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;

	Если ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходуЗаПервымРебенкомСверхНорм2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140005002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140011002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140019002
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Пособия.ФизическоеЛицо) КАК КоличествоФизлиц,
		|		Пособия.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом
		|	ИЗ
		|		ВТПособияПоУходуСверхНорм КАК Пособия
		|	ГДЕ
		|		Пособия.СтраховыеСлучаиПоУходуЗаПервымРебенкомОборот <> 0
		|
		|	СГРУППИРОВАТЬ ПО
		|		Пособия.ФинансированиеФедеральнымБюджетом) КАК ВсеПолучатели";
		ОписаниеТаблиц.ПолучателейПособияПоУходуЗаПервымРебенкомСверхНорм2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходуЗаВторымРебенкомСверхНорм2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140006002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140012002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140020002
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Пособия.ФизическоеЛицо) КАК КоличествоФизлиц,
		|		Пособия.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом
		|	ИЗ
		|		ВТПособияПоУходуСверхНорм КАК Пособия
		|	ГДЕ
		|		Пособия.СтраховыеСлучаиПоУходуЗаВторымРебенкомОборот <> 0
		|
		|	СГРУППИРОВАТЬ ПО
		|		Пособия.ФинансированиеФедеральнымБюджетом) КАК ВсеПолучатели";
		ОписаниеТаблиц.ПолучателейПособияПоУходуЗаВторымРебенкомСверхНорм2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;

	Если ОписаниеТаблиц.Свойство("ПолучателейПособияПоУходуСверхНорм2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140004002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140010002,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВсеПолучатели.ФинансированиеФедеральнымБюджетом = ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска)
		|					ТОГДА ВсеПолучатели.КоличествоФизлиц
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000140018002
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПособияПоУходу.ФизическоеЛицо) КАК КоличествоФизлиц,
		|		ПособияПоУходу.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом
		|	ИЗ
		|		ВТПособияПоУходуСверхНорм КАК ПособияПоУходу
		|
		|	СГРУППИРОВАТЬ ПО
		|		ПособияПоУходу.ФинансированиеФедеральнымБюджетом) КАК ВсеПолучатели";
		ОписаниеТаблиц.ПолучателейПособияПоУходуСверхНорм2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;

КонецПроцедуры


// 4-ФСС

Процедура ОписаниеПоказателей_4ФСС_2017Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030001003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030001004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030002003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030002004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030004003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030004004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030005003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030005004", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030007003", Истина, Истина);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000030007004", Истина, Истина);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_4ФСС_2017Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Организация = ПараметрыОтчета.Организация;
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;

	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	
	ОписаниеТаблиц = Новый Структура("ПособияПоНетрудоспособности2017");
	РасчетПоказателей_4ФСС_2017Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц);
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_4ФСС_2017Кв1(ПоказателиОтчета);
	Значение = Неопределено;
	Для каждого КлючИЗначение Из Контейнер.Таблица3_4 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Таблица3_4[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	// РАСХОДЫ НА ЦЕЛИ ОБЯЗАТЕЛЬНОГО СОЦИАЛЬНОГО СТРАХОВАНИЯ С НАЧАЛА ГОДА
	
	Результат = ОписаниеТаблиц.ПособияПоНетрудоспособности2017;
	Если Результат.Количество() > 0 Тогда
		СтрокаДанных = Результат[0];
		ЗаполнитьЗначенияСвойств(Контейнер.Таблица3_4, СтрокаДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОписаниеПоказателей_4ФСС_2016Кв1(ПоказателиОтчета) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ОписаниеПоказателей_4ФСС_2016Кв1(ПоказателиОтчета)
КонецПроцедуры

Процедура ЗначенияПоказателей_4ФСС_2016Кв1(ПараметрыОтчета, Контейнер) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ЗначенияПоказателей_4ФСС_2016Кв1(ПараметрыОтчета, Контейнер) 
КонецПроцедуры

Процедура ОписаниеПоказателей_4ФСС_2015Кв1(ПоказателиОтчета) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ОписаниеПоказателей_4ФСС_2015Кв1(ПоказателиОтчета)
КонецПроцедуры

Процедура ЗначенияПоказателей_4ФСС_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ЗначенияПоказателей_4ФСС_2015Кв1(ПараметрыОтчета, Контейнер) 
КонецПроцедуры

Процедура ОписаниеПоказателей_4ФСС_2013Кв2(ПоказателиОтчета) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ОписаниеПоказателей_4ФСС_2013Кв2(ПоказателиОтчета)
КонецПроцедуры

Процедура ОписаниеПоказателей_4ФСС_2012Кв1(ПоказателиОтчета) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ОписаниеПоказателей_4ФСС_2012Кв1(ПоказателиОтчета)
КонецПроцедуры

Процедура ЗначенияПоказателей_4ФСС_2012Кв1(ПараметрыОтчета, Контейнер) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ЗначенияПоказателей_4ФСС_2012Кв1(ПараметрыОтчета, Контейнер) 
КонецПроцедуры

Процедура ОписаниеПоказателей_4ФСС_2011Кв1(ПоказателиОтчета) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ОписаниеПоказателей_4ФСС_2011Кв1(ПоказателиОтчета)
КонецПроцедуры

Процедура ЗначенияПоказателей_4ФСС_2011Кв1(ПараметрыОтчета, Контейнер) Экспорт
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.ЗначенияПоказателей_4ФСС_2011Кв1(ПараметрыОтчета, Контейнер) 
КонецПроцедуры


Процедура РасчетПоказателей4ФСС(ИмяРасчета, НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные = Ложь) Экспорт

	Если ИмяРасчета = "РасчетПоказателей_4ФСС_2012Кв1" Тогда
		РасчетПоказателей_4ФСС_2012Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные);
	ИначеЕсли ИмяРасчета = "РасчетПоказателей_4ФСС_2015Кв1" Тогда
		РасчетПоказателей_4ФСС_2015Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные);
	ИначеЕсли ИмяРасчета = "РасчетПоказателей_4ФСС_2016Кв1" Тогда
		РасчетПоказателей_4ФСС_2016Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные);
	ИначеЕсли ИмяРасчета = "РасчетПоказателей_4ФСС_2017Кв1" Тогда
		РасчетПоказателей_4ФСС_2017Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные);
	Иначе
		
	КонецЕсли;

КонецПроцедуры

Процедура РасчетПоказателей_4ФСС_2017Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные = Ложь)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтложенноеПроведениеДокументов") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеДокументовВУчетеСтраховыхВзносов");
		Модуль.ОтразитьДокументыВУчетеСтраховыхВзносов(Организация);
	КонецЕсли;
	
	НачалоТекущегоКвартала = НачалоКвартала(ОкончаниеПериода);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",		НачалоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",		ОкончаниеПериода);
	Запрос.УстановитьПараметр("НачалоТекущегоКвартала",		НачалоТекущегоКвартала);
	Запрос.УстановитьПараметр("ДатаПередачиФССВыплатыПособий", ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий(Организация));
	Запрос.УстановитьПараметр("Месяц1",						Месяц(НачалоТекущегоКвартала));
	Запрос.УстановитьПараметр("Месяц2",						Месяц(НачалоТекущегоКвартала) + 1);
	Запрос.УстановитьПараметр("Месяц3",						Месяц(НачалоТекущегоКвартала) + 2);
	
	Если ОписаниеТаблиц.Свойство("ПособияПоНетрудоспособности2017") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пособия.ФизическоеЛицо,
		|	Пособия.ВидЗанятости,
		|	Пособия.ВидЗанятости КАК ПроверяемыйВидЗанятости,
		|	Пособия.ВидПособияСоциальногоСтрахования,
		|	Пособия.ФинансированиеФедеральнымБюджетом,
		|	Пособия.Период,
		|	Пособия.СтраховыеСлучаиОборот,
		|	Пособия.ОплаченныеДниОборот,
		|	Пособия.СуммаВсегоОборот,
		|	Пособия.СуммаСверхНормОборот,
		|	Пособия.ФизическоеЛицо КАК ФизЛицоДляСвязей
		|ПОМЕСТИТЬ ВТДанныеУчета
		|ИЗ
		|	РегистрНакопления.ПособияПоСоциальномуСтрахованию.Обороты(&НачалоОтчетногоПериода, &КонецОтчетногоПериода, Месяц, Организация = &Организация) КАК Пособия";
		Запрос.Выполнить();
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай)
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030001003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030001004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030002003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030002004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание)
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030004003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030004004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030005003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание)
		|						И Пособия.ПроверяемыйВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030005004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев)
		|					ТОГДА Пособия.ОплаченныеДниОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030007003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Пособия.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев)
		|					ТОГДА Пособия.СуммаВсегоОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000030007004,
		|	Пособия.ФизическоеЛицо,
		|	Пособия.ВидЗанятости
		|ИЗ
		|	ВТДанныеУчета КАК Пособия
		|
		|СГРУППИРОВАТЬ ПО
		|	Пособия.ФизическоеЛицо,
		|	Пособия.ВидЗанятости";

		МассивПолей = Новый Массив;
		Если Не ПодробныеДанные Тогда
			МассивПолей.Добавить("ФизическоеЛицо");
			МассивПолей.Добавить("ВидЗанятости");
		КонецЕсли;
		Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей);
		ОписаниеТаблиц.ПособияПоНетрудоспособности2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;

КонецПроцедуры

Процедура РасчетПоказателей_4ФСС_2016Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные = Ложь)
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.РасчетПоказателей_4ФСС_2016Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные)
КонецПроцедуры

Процедура РасчетПоказателей_4ФСС_2015Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные = Ложь)
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.РасчетПоказателей_4ФСС_2015Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные)
КонецПроцедуры

Процедура РасчетПоказателей_4ФСС_2012Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные = Ложь)
	УчетПособийСоциальногоСтрахованияАрхивныеАлгоритмы.РасчетПоказателей_4ФСС_2012Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные)
КонецПроцедуры

Функция УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей)
	
	Для каждого ПолеРасшифровки Из МассивПолей Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Пособия." + ПолеРасшифровки,"Неопределено");
	КонецЦикла;
	
	Возврат ТекстЗапроса
	
КонецФункции


// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПереопределитьСтатусИСостояниеСдачиОтчетности.
Процедура ПереопределитьСтатусИСостояниеСдачиОтчетности(Ссылка, СтатусОтправки, СостояниеСдачиОтчетности) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеестрДанныхЭЛНЗаполняемыхРаботодателем") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Проведен, ПометкаУдаления, СостояниеРеестра, ДатаПолученияОтветаФСС");
		
		Если ЗначенияРеквизитов.ПометкаУдаления Тогда
			СтатусОтправки = НСтр("ru = 'Удален'");
			СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
			
		ИначеЕсли Не ЗначенияРеквизитов.Проведен Тогда
			СтатусОтправки = НСтр("ru = 'В работе'");
			СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
			
		ИначеЕсли ЗначенияРеквизитов.СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.ПринятФСС Тогда
			СтатусОтправки = НСтр("ru = 'Принят'");
			СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
			
		ИначеЕсли ЗначенияРеквизитов.СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.НеПринятФСС Тогда
			СтатусОтправки = НСтр("ru = 'Не принят'");
			СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
			
		ИначеЕсли ЗначенияРеквизитов.СостояниеРеестра = Перечисления.СостоянияРеестровЭЛН.ЧастичноПринятФСС Тогда
			СтатусОтправки = НСтр("ru = 'Принят частично'");
			СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
			
		Иначе
			СтатусОтправки = НСтр("ru = 'В работе'");
			СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаПолученияОтветаФСС) Тогда
			СтатусОтправки = СтатусОтправки + " " + Формат(ЗначенияРеквизитов.ДатаПолученияОтветаФСС, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет физлицо, уполномоченного отправлять (предоставлять) в ФСС информацию, необходимую для выплат пособий.
// Выполняется однократно при обновлении ИБ для заполнения физлиц в документах,
// подключенных к механизму заполнения ответственных лиц организаций.
//
// Параметры:
//   ДокументОбъект - ДокументОбъект - документ, в котором необходимо заполнить уполномоченного представителя.
//
Процедура ЗаполнитьУполномоченногоПоПрямымВыплатамФСС(ДокументОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОбъект.УдалитьФИОУполномоченного)
		И Не ЗначениеЗаполнено(ДокументОбъект.УполномоченныйПоПрямымВыплатамФСС) Тогда
		
		ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДокументОбъект.УдалитьФИОУполномоченного);
		Запрос = ЗапросДляПоискаФизическихЛиц(ЧастиИмени.Фамилия, ЧастиИмени.Имя, ЧастиИмени.Отчество);
		Найденные = Запрос.Выполнить().Выгрузить();
		Если Найденные.Количество() > 0 Тогда
			Уровень = УровеньЖурналаРегистрации.Примечание;
			Текст = СтрШаблон(
				НСтр("ru = 'Для уполномоченного представителя ""%1"" нашли физлицо ""%2"" (всего нашли физлиц %3).'"),
				ДокументОбъект.УдалитьФИОУполномоченного,
				Найденные[0].Ссылка,
				Найденные.Количество());
			ДокументОбъект.УполномоченныйПоПрямымВыплатамФСС = Найденные[0].Ссылка;
			ДокументОбъект.УдалитьФИОУполномоченного = "";
		Иначе
			Уровень = УровеньЖурналаРегистрации.Предупреждение;
			Текст = СтрШаблон(НСтр("ru = 'Для уполномоченного представителя ""%1"" НЕ нашли физлицо.'"), ДокументОбъект.УдалитьФИОУполномоченного);
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации() + "." + НаименованиеПодсистемы(),
			Уровень,
			ДокументОбъект.Метаданные(),
			ДокументОбъект.Ссылка,
			Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПриДобавленииИсключенийПоискаСсылок

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	РегистрыСведений.СведенияОбЭЛН.ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок);
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Процедура рассчитывает строки со способом расчета "ПоСреднемуЗаработкуФСС".
//
// Параметры:
//	- СтрокиРасчета - Массив, фрагмент таблицы Начисления.
//	- ДополнительныеПараметры - дополнительные свойства менеджера расчета.
//	- ПрименяетсяСторнирование - Булево, Истина если строки начислений содержат флаги сторнирования.
//
Процедура РассчитатьПособиеПоНетрудоспособности(СтрокиРасчета, ДополнительныеПараметры, ПрименяетсяСторнирование = Истина) Экспорт
	
	ПараметрыОплаты = ДополнительныеПараметрыРасчетаПособияПоНетрудоспособности();
	ЗаполнитьЗначенияСвойств(ПараметрыОплаты, ДополнительныеПараметры.ПараметрыРасчетаПособияПоНетрудоспособности);
	
	Если Не ЗначениеЗаполнено(ПараметрыОплаты.РайонныйКоэффициентРФНаНачалоСобытия)
		Или ПараметрыОплаты.РайонныйКоэффициентРФНаНачалоСобытия < 1 Тогда
		ПараметрыОплаты.РайонныйКоэффициентРФНаНачалоСобытия = 1;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОплаты.РасчетПоПравилам2010Года) <> Тип("Булево") Тогда
		ПараметрыОплаты.РасчетПоПравилам2010Года = Ложь;
	КонецЕсли;
		
	НазначитьПособие = ПараметрыОплаты.НазначитьПособие;
	Если НазначитьПособие = Истина Тогда
		ПрименятьОграничениеДляПособийПоНС_ПЗ = (ПараметрыОплаты.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве
											Или ПараметрыОплаты.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Профзаболевание)
											И ПараметрыОплаты.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты;
											
		ОграниченияДляПособийПоНС_ПЗ = Новый Соответствие;
		Если ПрименятьОграничениеДляПособийПоНС_ПЗ Тогда
			
			ИзмеренияДаты = Новый ТаблицаЗначений;
			ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
			Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл
				ИзмеренияДаты.Добавить().Период = СтрокаТаблицы.ДатаНачала;
				ОграниченияДляПособийПоНС_ПЗ.Вставить(СтрокаТаблицы.ДатаНачала,0);
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
			ПараметрыПостроения.ВсеЗаписи = Истина;
			
			ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
				"МаксимальныйРазмерЕжемесячнойСтраховойВыплаты",
				Запрос.МенеджерВременныхТаблиц,
				Ложь,
				ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
				ПараметрыПостроения);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МаксимальныйРазмер.Период КАК Период,
			|	МаксимальныйРазмер.Размер КАК Размер
			|ИЗ
			|	ВТМаксимальныйРазмерЕжемесячнойСтраховойВыплатыСрезПоследних КАК МаксимальныйРазмер";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ОграниченияДляПособийПоНС_ПЗ.Вставить(Выборка.Период, Выборка.Размер * 4);
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл
				ОграниченияДляПособийПоНС_ПЗ.Вставить(СтрокаТаблицы.ДатаНачала, 0);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаОтменыРасчета2010Года = УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаНачалаРеформыСоцСтрахования();
	Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл
		
		Сторно = Ложь;
		Если ПрименяетсяСторнирование Тогда
			Сторно = СтрокаТаблицы.Сторно;
		КонецЕсли;
		
		СтрокаТаблицы.Результат = 0;
		СтрокаТаблицы.Дополнительно.Вставить("РезультатВТомЧислеЗаСчетФБ", 0);
		
		Если НазначитьПособие <> Истина Тогда
			// Нет данных для расчета.
			Продолжить;
		КонецЕсли;
		
		ОплачиваемоеВремя = РасчетЗарплаты.ЗначениеПоказателяПоИдентификатору(СтрокаТаблицы.Показатели, "КалендарныеДни");
		Если ОплачиваемоеВремя = Неопределено Тогда
			ОплачиваемоеВремя = 0;
		КонецЕсли;
		Если ПараметрыОплаты.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком
			И ЗначениеЗаполнено(ПараметрыОплаты.ДатаНачалаПоловиннойОплаты)
			И СтрокаТаблицы.ДатаНачала >= ПараметрыОплаты.ДатаНачалаПоловиннойОплаты Тогда
			ПроцентОплаты = 50;
		Иначе
			ПроцентОплаты = ПараметрыОплаты.ПроцентОплаты;
		КонецЕсли;
		
		ПрименятьОграничениеМРОТом = ПараметрыОплаты.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ
			Или (СтрокаТаблицы.ДатаНачала >= ПараметрыОплаты.ДатаНарушенияРежима И ЗначениеЗаполнено(ПараметрыОплаты.ДатаНарушенияРежима));
		ПрименятьОграничениеМРОТомБезЛьгот = ПараметрыОплаты.ОграничениеПособияБезЛьгот = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ
			Или (СтрокаТаблицы.ДатаНачала >= ПараметрыОплаты.ДатаНарушенияРежима И ЗначениеЗаполнено(ПараметрыОплаты.ДатаНарушенияРежима));
		
		РасчетПоПравилам2010Года = ПараметрыОплаты.РасчетПоПравилам2010Года
			Или ПараметрыОплаты.ПериодРегистрации < ДатаОтменыРасчета2010Года
			Или ПараметрыОплаты.ДатаНачалаСобытия < ДатаОтменыРасчета2010Года;
		
		ТекущийРайонныйКоэффициент = 1;
		РайонныйКоэффициентРФ = РасчетЗарплаты.ЗначениеПоказателяПоИдентификатору(СтрокаТаблицы.Показатели, "РайонныйКоэффициентРФ");
		Если РайонныйКоэффициентРФ <> Неопределено Тогда
			ТекущийРайонныйКоэффициент = Макс(РайонныйКоэффициентРФ, 1);
		КонецЕсли;
		
		МРОТ = РасчетЗарплаты.ЗначениеПоказателяПоИдентификатору(СтрокаТаблицы.Показатели, "МРОТ");
		ТекущийМРОТ = МРОТ * ТекущийРайонныйКоэффициент;
		
		НормированноеОграничениеДляПособийПоНС_ПЗ = ОграниченияДляПособийПоНС_ПЗ[СтрокаТаблицы.ДатаНачала];
		
		НормаВремени = День(КонецМесяца(СтрокаТаблицы.ДатаНачала));
		Если ОплачиваемоеВремя < НормаВремени Тогда
			ОграничениеПособияМРОТом = Окр(Окр(ТекущийМРОТ / НормаВремени, 2) * ОплачиваемоеВремя, 2);
			НормированноеОграничениеДляПособийПоНС_ПЗ = Окр(Окр(НормированноеОграничениеДляПособийПоНС_ПЗ / НормаВремени, 2) * ОплачиваемоеВремя, 2);
		Иначе
			ОграничениеПособияМРОТом = Окр(ТекущийМРОТ,2);
		КонецЕсли;
		
		Если РасчетПоПравилам2010Года Тогда
			РазмерОграниченияДля2010года = Окр(РазмерОграниченияДля2010года() / 365, 2);
			Если ПараметрыОплаты.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.БезОграничений Тогда
				Результат = ОплачиваемоеВремя * Окр(ПараметрыОплаты.СреднийДневнойЗаработок * ПроцентОплаты / 100, 2);
			Иначе
				Результат = ОплачиваемоеВремя * Окр(Мин(ПараметрыОплаты.СреднийДневнойЗаработок, РазмерОграниченияДля2010года) * ПроцентОплаты / 100, 2);
			КонецЕсли;
			
			// Ограничение пособия сверху
			Если ПрименятьОграничениеМРОТом Тогда
				Результат = Мин(Результат, ОграничениеПособияМРОТом);
			КонецЕсли;
			
			СтрокаТаблицы.Результат = Результат * ?(Сторно, -1, 1);
			
			Если ЗначениеЗаполнено(ПараметрыОплаты.ПроцентОплатыБезЛьгот) И ЗначениеЗаполнено(ПараметрыОплаты.ФинансированиеФедеральнымБюджетом) Тогда
				Если ПараметрыОплаты.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком
						И ЗначениеЗаполнено(ПараметрыОплаты.ДатаНачалаПоловиннойОплаты)
						И СтрокаТаблицы.ДатаНачала >= ПараметрыОплаты.ДатаНачалаПоловиннойОплаты Тогда
					ПроцентОплаты = 50;
				Иначе
					ПроцентОплаты = ПараметрыОплаты.ПроцентОплатыБезЛьгот;
				КонецЕсли;

				Если ПараметрыОплаты.ОграничениеПособияБезЛьгот = Перечисления.ВидыОграниченияПособия.БезОграничений Тогда
					РезультатБезЛьгот = ОплачиваемоеВремя * Окр(ПараметрыОплаты.СреднийДневнойЗаработок * ПроцентОплаты / 100, 2);
				Иначе
					РезультатБезЛьгот = ОплачиваемоеВремя * Окр(Мин(ПараметрыОплаты.СреднийДневнойЗаработок, РазмерОграниченияДля2010года) * ПроцентОплаты / 100, 2);
				КонецЕсли;
				
				// Ограничение пособия сверху
				Если ПрименятьОграничениеМРОТомБезЛьгот Тогда
					РезультатБезЛьгот = Мин(РезультатБезЛьгот, ОграничениеПособияМРОТом);
				КонецЕсли;
				
				Если РезультатБезЛьгот < Результат Тогда
					СтрокаТаблицы.Дополнительно.РезультатВТомЧислеЗаСчетФБ = (Результат - РезультатБезЛьгот) * ?(Сторно, -1, 1);
					СтрокаТаблицы.ЗаписьРасчета.РезультатВТомЧислеЗаСчетФБ = СтрокаТаблицы.Дополнительно.РезультатВТомЧислеЗаСчетФБ;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ПараметрыОплаты.СреднийДневнойЗаработок >= ПараметрыОплаты.МинимальныйСреднедневнойЗаработок Тогда
				ДневноеПособие = Окр(ПараметрыОплаты.СреднийДневнойЗаработок * ПроцентОплаты / 100, 2);
				Результат = Окр(ОплачиваемоеВремя * ДневноеПособие, 2);
			Иначе
				ДневноеПособие = Окр(ПараметрыОплаты.МинимальныйСреднедневнойЗаработок * ПроцентОплаты / 100, 2);
				Результат = Окр(ОплачиваемоеВремя * ДневноеПособие * ПараметрыОплаты.РайонныйКоэффициентРФНаНачалоСобытия, 2);
			КонецЕсли;
			
			// Ограничение пособия сверху
			Если ПрименятьОграничениеМРОТом Тогда
				Результат = Мин(Результат, ОграничениеПособияМРОТом);
			ИначеЕсли ПрименятьОграничениеДляПособийПоНС_ПЗ Тогда
				Результат = Мин(Результат, НормированноеОграничениеДляПособийПоНС_ПЗ);
			КонецЕсли;
			
			СтрокаТаблицы.Результат = Результат * ?(Сторно, -1, 1);
			
			// Часть пособия, финансируемая федеральным бюджетом.
			Если ЗначениеЗаполнено(ПараметрыОплаты.ПроцентОплатыБезЛьгот) И ЗначениеЗаполнено(ПараметрыОплаты.ФинансированиеФедеральнымБюджетом) Тогда
				Если ПараметрыОплаты.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком
						И ЗначениеЗаполнено(ПараметрыОплаты.ДатаНачалаПоловиннойОплаты)
						И СтрокаТаблицы.ДатаНачала >= ПараметрыОплаты.ДатаНачалаПоловиннойОплаты Тогда
					ПроцентОплаты = 50;
				Иначе
					ПроцентОплаты = ПараметрыОплаты.ПроцентОплатыБезЛьгот;
				КонецЕсли;
				
				Если ПараметрыОплаты.СреднийДневнойЗаработок >= ПараметрыОплаты.МинимальныйСреднедневнойЗаработок Тогда
					ДневноеПособие = Окр(ПараметрыОплаты.СреднийДневнойЗаработок * ПроцентОплаты / 100, 2);
					РезультатБезЛьгот = Окр(ОплачиваемоеВремя * ДневноеПособие, 2);
				Иначе
					ДневноеПособие = Окр(ПараметрыОплаты.МинимальныйСреднедневнойЗаработок * ПроцентОплаты / 100, 2);
					РезультатБезЛьгот = Окр(ОплачиваемоеВремя * ДневноеПособие * ПараметрыОплаты.РайонныйКоэффициентРФНаНачалоСобытия, 2);
				КонецЕсли;
				
				Если ПрименятьОграничениеМРОТомБезЛьгот Тогда
					РезультатБезЛьгот = Мин(РезультатБезЛьгот, ОграничениеПособияМРОТом);
				КонецЕсли;
				
				Если РезультатБезЛьгот < Результат Тогда
					СтрокаТаблицы.Дополнительно.РезультатВТомЧислеЗаСчетФБ = (Результат - РезультатБезЛьгот) * ?(Сторно, -1, 1);
					СтрокаТаблицы.ЗаписьРасчета.РезультатВТомЧислеЗаСчетФБ = СтрокаТаблицы.Дополнительно.РезультатВТомЧислеЗаСчетФБ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДополнительныеПараметрыРасчетаПособияПоНетрудоспособности() Экспорт
	
	ПараметрыОплаты = Новый Структура(
		"Организация,
		|ПериодРегистрации,
		|ДатаНачалаСобытия,
		|ПричинаНетрудоспособности,
		|СреднийДневнойЗаработок,
		|ПроцентОплаты,
		|ОграничениеПособия,
		|ПроцентОплатыБезЛьгот,
		|ОграничениеПособияБезЛьгот,
		|ФинансированиеФедеральнымБюджетом,
		|ДатаНарушенияРежима,
		|РасчетПоПравилам2010Года,
		|ДатаНачалаПоловиннойОплаты,
		|МинимальныйСреднедневнойЗаработок,
		|РайонныйКоэффициентРФНаНачалоСобытия,
		|НазначитьПособие");
		
	Возврат ПараметрыОплаты;
		
КонецФункции

// Составляет временную таблицу ВТПредельнаяВеличинаБазы, содержащую размеры предельной
// величины базы страховых взносов, действующих на указанные годы.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц в котором формируется временная таблица.
//		Годы - массив элементов типа число.
//
Процедура СоздатьВТПредельнаяВеличинаБазы(МенеджерВременныхТаблиц, Годы) Экспорт

	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Год Из Годы Цикл
		ИзмеренияДаты.Добавить().Период = Дата(Год, 1, 1);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзмеренияДаты.Период
	|ПОМЕСТИТЬ ВТИзмеренияДаты
	|ИЗ
	|	&ИзмеренияДаты КАК ИзмеренияДаты";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПредельнаяВеличинаБазыСтраховыхВзносов",
		МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИзмеренияДаты"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГОД(ПредельнаяВеличинаБазыСтраховыхВзносов.Период) КАК Год,
	|	ЕСТЬNULL(ПредельнаяВеличинаБазыСтраховыхВзносов.РазмерФСС, 0) КАК Размер
	|ПОМЕСТИТЬ ВТПредельнаяВеличинаБазы
	|ИЗ
	|	ВТПредельнаяВеличинаБазыСтраховыхВзносовСрезПоследних КАК ПредельнаяВеличинаБазыСтраховыхВзносов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГОД(ИзмеренияДаты.Период),
	|	&ПредельнаяВеличинаДо2010
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|ГДЕ
	|	ИзмеренияДаты.Период < ДАТАВРЕМЯ(2010, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПредельнаяВеличинаБазыСтраховыхВзносовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИзмеренияДаты";
	
	Запрос.УстановитьПараметр("ПредельнаяВеличинаДо2010", РазмерОграниченияДля2010года());
	Запрос.Выполнить();

КонецПроцедуры

// Возвращает массив ссылок из ПВР Начисления, соответствующих облагаемым взносами компенсациям, возмещаемым из бюджета ФСС
// (в частности, оплата 4-х дополнительных выходных дней для ухода за детьми инвалидами).
//
// Параметры:
//	нет
//
// Возвращаемое значение:
//	Массив
//
Функция НачисленияОблагаемыхВзносамиПособий() Экспорт

	Возврат УчетПособийСоциальногоСтрахованияВнутренний.НачисленияОблагаемыхВзносамиПособий();
	
КонецФункции

// Параметры:
//		Движения - коллекция движений регистратора.
//		Организация
//		ПериодРегистрации
//		ВидСтрахования
//		Сумма
//
Функция СтрокаЗачетаРасходов(Движения, Организация, ПериодРегистрации, ВидСтрахования, Сумма)

	Если Не ЗначениеЗаполнено(Сумма) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	НоваяСтрока = Движения.РасчетыСФондамиПоСтраховымВзносам.Добавить();
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
	НоваяСтрока.Период = ПериодРегистрации;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.ЭтоСтраховыеВзносы = Истина;
	НоваяСтрока.ГодЗадолженностиПоЕСН = 0;
	НоваяСтрока.ВидОбязательногоСтрахованияСотрудников = ВидСтрахования;
	НоваяСтрока.РасчетыПоПособиям = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
	НоваяСтрока.Сумма = Сумма;
	
    Возврат НоваяСтрока
	
КонецФункции

// Возвращает размер ограничений, используемых при расчетах "по правилам 2010 года".
//
// Возвращаемое значение:
//	число
//
Функция РазмерОграниченияДля2010года() Экспорт
	
	Возврат 415000
	
КонецФункции

Функция ДанныеОЗаработкеДляЗаполнения(ПараметрыЗаполнения) Экспорт
	
	Возврат УчетПособийСоциальногоСтрахованияВнутренний.ДанныеОЗаработкеДляЗаполнения(ПараметрыЗаполнения);
	
КонецФункции

#Область СреднийЗаработокФСС

// Функция дополняет исходные данные и вызывает метод расчета показателя
// среднедневной заработок по правилам расчета ФСС.
//
Функция СреднийДневнойЗаработокФСС(ПараметрыРасчета) Экспорт

	Если ПараметрыРасчета.ПрименятьПредельнуюВеличину Тогда
		
		ГодыПредельныхВеличин = УчетПособийСоциальногоСтрахованияКлиентСервер.ГодыПредельныхВеличин(ПараметрыРасчета);
		ПараметрыРасчета.ПредельныеВеличиныПоГодам = УчетПособийСоциальногоСтрахования.ПредельнаяВеличинаБазыСтраховыхВзносов(ГодыПредельныхВеличин);
		
	КонецЕсли;
	
	Возврат УчетПособийСоциальногоСтрахованияКлиентСервер.СреднийЗаработокФСС(ПараметрыРасчета);
	
КонецФункции

// Функция дополняет исходные данные и вызывает метод расчета показателя
// минимальный среднедневной заработок по правилам расчета ФСС.
//
Функция МинимальныйСреднедневнойЗаработокФСС(ПараметрыРасчета) Экспорт

	ПараметрыРасчета.МинимальныйРазмерОплатыТрудаРФ = ЗарплатаКадры.МинимальныйРазмерОплатыТрудаРФ(ПараметрыРасчета.ДатаНачалаСобытия);
	
	Возврат УчетПособийСоциальногоСтрахованияКлиентСервер.МинимальныйСреднедневнойЗаработокФСС(ПараметрыРасчета);
	
КонецФункции

#Область ПолучениеДанныхДляРасчетаСреднегоЗаработкаПоДокументу

// Создает временную таблицу с реквизитами документов необходимыми для формирования
// структуры параметров расчета среднего заработка ФСС.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - менеджер временных таблиц, куда будет помещена временная таблица ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС
//  МассивСсылок			 - массив ссылок, по которым необходимо получить данные, допустимые типы элементов - "ДокументСсылка.БольничныйЛист", "ДокументСсылка.ОтпускПоУходуЗаРебенком".
//
Процедура СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(МенеджерВременныхТаблиц, МассивСсылок) Экспорт
	
	УчетПособийСоциальногоСтрахованияВнутренний.СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(МенеджерВременныхТаблиц, МассивСсылок);
	
КонецПроцедуры

// Функция - Таблицы данных среднего заработка ФСС
//
// Параметры:
//  ИмяДокумента - Строка, имя документа для которого надо получить данные для расчета среднего заработка
//  МассивСсылок - массив, "ДокументСсылка.БольничныйЛист", "ДокументСсылка.ОтпускПоУходуЗаРебенком".
//
// Возвращаемое значение:
//  ДанныеДляРасчета - структура, содержит поля с таблицами данных для расчета среднего заработка по МассивСсылок
//					ДанныеОНачислениях, Таблица значений
//					ДанныеОВремени, Таблица значений
//					ДанныеСтрахователей, Таблица значений.
//
Функция ТаблицыДанныхСреднегоЗаработкаФСС(ИмяДокумента, МассивСсылок) Экспорт
	
	Возврат УчетПособийСоциальногоСтрахованияВнутренний.ТаблицыДанныхСреднегоЗаработкаФСС(ИмяДокумента, МассивСсылок);
	
КонецФункции

// Функция - Реквизиты документа для подготовки параметров расчета среднего заработка ФСС.
//
// Возвращаемое значение:
//  РеквизитыДокумента - описание документа в котором рассчитывается средний заработок.
//				Структура, содержащая поля:
//					Ссылка, "ДокументСсылка.БольничныйЛист"
//					Сотрудник, СправочникСсылка.Сотрудник
//					ФизическоеЛицо, СправочникСсылка.ФизическиеЛица
//					ДатаНачалаСобытия, Дата
//					ПрименятьПредельнуюВеличину, Булево
//					ИспользоватьДниБолезниУходаЗаДетьми, Булево
//					ПериодРасчетаСреднегоЗаработкаНачало, Дата
//					ПериодРасчетаСреднегоЗаработкаОкончание, Дата
//					ПериодРасчетаСреднегоЗаработкаПервыйГод, Дата
//					ПериодРасчетаСреднегоЗаработкаВторойГод, Дата
//					УчитыватьЗаработокПредыдущихСтрахователей, Булево
//					РасчетПоПравилам2010Года, Булево
//					ДоляНеполногоВремени, Число
//					РайонныйКоэффициентРФ, Число
//					МинимальныйРазмерОплатыТрудаРФ, Число.
//
Функция РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС() Экспорт
	
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Ссылка");
	РеквизитыДокумента.Вставить("ФизическоеЛицо");
	РеквизитыДокумента.Вставить("Сотрудник");
	РеквизитыДокумента.Вставить("ДатаНачалаСобытия");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаПервыйГод");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаВторойГод");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаНачало");
	РеквизитыДокумента.Вставить("ПериодРасчетаСреднегоЗаработкаОкончание");
	РеквизитыДокумента.Вставить("УчитыватьЗаработокПредыдущихСтрахователей", Ложь);
	РеквизитыДокумента.Вставить("РасчетПоПравилам2010Года", Ложь);
	РеквизитыДокумента.Вставить("ИспользоватьДниБолезниУходаЗаДетьми");
	РеквизитыДокумента.Вставить("МинимальныйРазмерОплатыТрудаРФ");
	РеквизитыДокумента.Вставить("РайонныйКоэффициентРФ", 1);
	РеквизитыДокумента.Вставить("ДоляНеполногоВремени", 1);
	РеквизитыДокумента.Вставить("ПрименятьПредельнуюВеличину");
	
	Возврат РеквизитыДокумента;
	
КонецФункции

// Функция - Данные документа для расчета среднего заработка ФСС
//
// Параметры:
//  РеквизитыДокумента - см. УчетПособийСоциальногоСтрахованияРасширенный.РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС
//  ТаблицыДанныхОСреднем - см. УчетПособийСоциальногоСтрахованияРасширенный.ТаблицыДанныхСреднегоЗаработкаФСС.
//
// Возвращаемое значение:
//  ДанныеДокумента - структура, содержит поля:
//					ПараметрыРасчета, см. УчетПособийСоциальногоСтрахованияРасширенный.ПараметрыРасчетаСреднегоДневногоЗаработкаФССПоДокументу
//					ДанныеРасчетаСреднего, см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ДанныеРасчетаСреднегоЗаработкаФСС.
//
Функция ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС(РеквизитыДокумента, ТаблицыДанныхОСреднем) Экспорт
	
	ДанныеДокумента = Новый Структура("ПараметрыРасчета,ДанныеРасчетаСреднего");
	
	ДанныеОНачислениях 	= ТаблицаДанныеОНачисленияхИзДанныхСреднегоЗаработкаФСС(РеквизитыДокумента.Ссылка, ТаблицыДанныхОСреднем);
	ДанныеОВремени 		= ТаблицаДанныеОВремениИзДанныхСреднегоЗаработкаФСС(РеквизитыДокумента.Ссылка, ТаблицыДанныхОСреднем);
	ДанныеСтрахователей = ТаблицаДанныеСтрахователейИзДанныхСреднегоЗаработкаФСС(РеквизитыДокумента.Ссылка, ТаблицыДанныхОСреднем);
	
	ДанныеДокумента.ПараметрыРасчета = ПараметрыРасчетаСреднегоДневногоЗаработкаФССПоДокументу(РеквизитыДокумента, ДанныеОНачислениях, ДанныеОВремени, ДанныеСтрахователей);
	ДанныеДокумента.ДанныеРасчетаСреднего = УчетПособийСоциальногоСтрахованияКлиентСервер.ДанныеРасчетаСреднегоЗаработкаФСС(ДанныеДокумента.ПараметрыРасчета);
	
	Возврат ДанныеДокумента;
	
КонецФункции

// Функция - Параметры расчета среднего дневного заработка ФСС по документу
//
// Параметры:
//  РеквизитыДокумента	 - 	см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.РеквизитыДокументаДляРасчетаСреднегоДневногоЗаработкаФСС
//  ДанныеОНачислениях	 - 	см. УчетПособийСоциальногоСтрахованияРасширенный.ТаблицыДанныхСреднегоЗаработкаФСС
//  ДанныеОВремени		 - 	см. УчетПособийСоциальногоСтрахованияРасширенный.ТаблицыДанныхСреднегоЗаработкаФСС
//  ДанныеСтрахователей	 - 	см. УчетПособийСоциальногоСтрахованияРасширенный.ТаблицыДанныхСреднегоЗаработкаФСС.
//
// Возвращаемое значение:
//  ПараметрыРасчета - структура, см.УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС.
//
Функция ПараметрыРасчетаСреднегоДневногоЗаработкаФССПоДокументу(РеквизитыДокумента, ДанныеОНачислениях, ДанныеОВремени, ДанныеСтрахователей) Экспорт
	
	РасчетныеГоды = ГодыПериодаРасчетаСреднего(РеквизитыДокумента);
	
	ПараметрыРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
	ПараметрыРасчета.ДатаНачалаСобытия 							= РеквизитыДокумента.ДатаНачалаСобытия;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало 		= РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание 	= РеквизитыДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	ПараметрыРасчета.РасчетныеГоды 								= РасчетныеГоды;
	ПараметрыРасчета.НеполныйРасчетныйПериод 					= ПособиеЗаНеполныйРасчетныйПериод(РеквизитыДокумента.ФизическоеЛицо, РеквизитыДокумента.ДатаНачалаСобытия);
	ПараметрыРасчета.ДанныеНачислений 							= ДанныеОНачислениях;
	ПараметрыРасчета.ДанныеВремени 								= ДанныеОВремени;
	ПараметрыРасчета.ДанныеСтрахователей 						= ДанныеСтрахователей;
	ПараметрыРасчета.УчитыватьЗаработокПредыдущихСтрахователей 	= РеквизитыДокумента.УчитыватьЗаработокПредыдущихСтрахователей;
	ПараметрыРасчета.ИспользоватьДниБолезниУходаЗаДетьми 		= РеквизитыДокумента.ИспользоватьДниБолезниУходаЗаДетьми;
	ПараметрыРасчета.МинимальныйРазмерОплатыТрудаРФ 			= РеквизитыДокумента.МинимальныйРазмерОплатыТрудаРФ;
	ПараметрыРасчета.ПорядокРасчета 							= УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(РеквизитыДокумента.ДатаНачалаСобытия);
	ПараметрыРасчета.РайонныйКоэффициентРФ 						= РеквизитыДокумента.РайонныйКоэффициентРФ;
	ПараметрыРасчета.ДоляНеполногоВремени 						= РеквизитыДокумента.ДоляНеполногоВремени;
	ПараметрыРасчета.Сотрудник 									= РеквизитыДокумента.Сотрудник;
	ПараметрыРасчета.ПрименятьПредельнуюВеличину 				= РеквизитыДокумента.ПрименятьПредельнуюВеличину;
	
	Если ПараметрыРасчета.ПрименятьПредельнуюВеличину Тогда
		
		ГодыПредельныхВеличин = УчетПособийСоциальногоСтрахованияКлиентСервер.ГодыПредельныхВеличин(ПараметрыРасчета);
		ПараметрыРасчета.ПредельныеВеличиныПоГодам = УчетПособийСоциальногоСтрахования.ПредельнаяВеличинаБазыСтраховыхВзносов(ГодыПредельныхВеличин);
		
	КонецЕсли;

	Возврат ПараметрыРасчета;
	
КонецФункции

Функция ТаблицаДанныеОНачисленияхИзДанныхСреднегоЗаработкаФСС(Ссылка, ТаблицыДанныхСреднегоЗаработкаФСС)
	Возврат ТаблицаОтобраннаяПоПолю(ТаблицыДанныхСреднегоЗаработкаФСС["ДанныеОНачислениях"], "Ссылка", Ссылка);
КонецФункции

Функция ТаблицаДанныеОВремениИзДанныхСреднегоЗаработкаФСС(Ссылка, ТаблицыДанныхСреднегоЗаработкаФСС)
	Возврат ТаблицаОтобраннаяПоПолю(ТаблицыДанныхСреднегоЗаработкаФСС["ДанныеОВремени"], "Ссылка", Ссылка);
КонецФункции

Функция ТаблицаДанныеСтрахователейИзДанныхСреднегоЗаработкаФСС(Ссылка, ТаблицыДанныхСреднегоЗаработкаФСС)
	Возврат ТаблицаОтобраннаяПоПолю(ТаблицыДанныхСреднегоЗаработкаФСС["ДанныеСтрахователей"], "Ссылка", Ссылка);
КонецФункции

Функция ГодыПериодаРасчетаСреднего(Объект) Экспорт
	
	Годы = Новый Массив;
	
	Годы.Добавить(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод);
	Годы.Добавить(Объект.ПериодРасчетаСреднегоЗаработкаВторойГод);
	
	Возврат Годы;
	
КонецФункции

Функция ТаблицаОтобраннаяПоПолю(ИсходнаяТаблица, Поле, ЗначениеОтбора)
	
	ОтобраннаяТаблица = ИсходнаяТаблица.СкопироватьКолонки();
	
	Для каждого Строка Из ИсходнаяТаблица Цикл
		Если Строка[Поле] = ЗначениеОтбора Тогда
			ЗаполнитьЗначенияСвойств(ОтобраннаяТаблица.Добавить(), Строка);
		КонецЕсли;
	КонецЦикла;

	Возврат ОтобраннаяТаблица;

КонецФункции

#КонецОбласти

#Область КонструкторыТаблицДанныхСреднегоЗаработка

// Создает таблицу значений со структурой аналогичной структуре табличной части СреднийЗаработокФСС
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаНачисленийСреднийЗаработокФСС() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС"));
	ТаблицаДанных.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ТаблицаДанных.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	ТаблицаДанных.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	ТаблицаДанных.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("Корректировка", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Создает таблицу значений со структурой аналогичной структуре табличной части ОтработанноеВремяДляСреднегоФСС
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаОтработанноеВремяСреднийЗаработокФСС() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ОтработаноДнейКалендарных", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 0));
	ТаблицаДанных.Колонки.Добавить("ДнейБолезниУходаЗаДетьми", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 0));
	ТаблицаДанных.Колонки.Добавить("Корректировка", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Создает таблицу значений со структурой аналогичной структуре табличной части СреднийЗаработокДанныеСтрахователей
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаДанныеСтрахователейСреднийЗаработокФСС() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(4, 0));
	ТаблицаДанных.Колонки.Добавить("Страхователь", ОписаниеТипаСтраховательСреднийЗаработокФСС());
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("ДнейБолезниУходаЗаДетьми", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 0));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ОписаниеТипаСтраховательСреднийЗаработокФСС()
	Возврат УчетПособийСоциальногоСтрахованияВнутренний.ОписаниеТипаСтраховательСреднийЗаработокФСС();
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Регистрирует обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	ПриРегистрацииОбработчиковОбновления(Обработчики);
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.РегистрыСведений.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты) Тогда
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.8.238";
		Обработчик.Процедура = "РегистрыСведений.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.РежимВыполнения = "Оперативно";
		
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.7.6";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("7ad2d419-37ef-11e8-b449-5404a6a6895d");
	Обработчик.Процедура       = "Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ОбновитьДокументы";
	Обработчик.Комментарий     = НСтр("ru = 'Переключение способа выплаты документах ""Заявление сотрудника на выплату пособия"" на вариант ""На карту МИР"", появившийся в версии формата 1.7.5.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.8.29";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("fc04daaa-52ab-11e8-b5b2-5404a6a6895d");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ЗаполнитьХэшЭЛН";
	Обработчик.Комментарий     = НСтр("ru = 'Перенос Хэшей ЭЛН в регистр сведений.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.8.30";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("9ccc5c60-8686-11e8-8a21-5404a6a6895d");
	Обработчик.Процедура       = "Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ОбновитьДокументы";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение уполномоченного представителя в документах ""Заявление сотрудника на выплату пособия"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.8.30";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("9ccc5c61-8686-11e8-8a21-5404a6a6895d");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ЗаполнитьУполномоченногоВОписях";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение уполномоченного представителя в документах ""Опись заявлений сотрудников на выплату пособий"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.9.37";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("ea89c346-fd2b-11e8-80c4-4cedfb43b11a");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ЗаполнитьПризнакПостановкиНаУчетВРанниеСрокиБеременностиВБольничных";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение признака ""Поставлена на учет в ранние сроки беременности"" в больничных.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.9.37";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("d6ffed73-fd2e-11e8-80c4-4cedfb43b11a");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ЗаполнитьПризнакПостановкиНаУчетВРанниеСрокиБеременностиВРеестрах";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение признака ""Поставлена на учет в ранние сроки беременности"" в реестрах прямых выплат.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.9.41";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("4d05dfd4-01f9-11e9-80c4-4cedfb43b11a");
	Обработчик.Процедура       = "Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ОбновитьДокументы";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение адресных кодов (ФИАС, КЛАДР) в документах ""Заявление сотрудника на выплату пособия"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.10.27";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("08c0e466-5166-11e9-80ca-4cedfb43b11a");
	Обработчик.Процедура       = "Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ОбновитьДокументы";
	Обработчик.Комментарий     = НСтр("ru = 'Перенос номеров карт МИР из документов ""Заявление сотрудника на выплату пособия"" в справочник ""Банковские карты контрагентов"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.10.72";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("b0f041b8-5062-11e9-80ca-4cedfb43b11a");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ПеренестиСостоянияЭЛН";
	Обработчик.Комментарий     = НСтр("ru = 'Перенос состояний ЭЛН в регистр сведений.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.10.72";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("64245f1f-5ae3-11e9-80cb-4cedfb43b11a");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ПеренестиИзвещенияИзФСС";
	Обработчик.Комментарий     = НСтр("ru = 'Перенос сведений об извещениях из ФСС в реестр ПВСО.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.10.74";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("0cfd1dc7-92a8-11e9-80cd-4cedfb43b11a");
	Обработчик.Процедура       = "УчетПособийСоциальногоСтрахования.ДобавитьРолиЭЛНВПользовательскиеПрофили";
	Обработчик.Комментарий     = НСтр("ru = 'Добавление ролей ЭЛН в непоставляемые (пользовательские) профили групп доступа.'");
	
КонецПроцедуры

// Регистрирует обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриРегистрацииОбработчиковОбновления(Обработчики)
	
	УчетПособийСоциальногоСтрахованияВнутренний.ПриРегистрацииОбработчиковОбновления(Обработчики);
	
КонецПроцедуры

// Процедура переносит данные о периодах работы в связи с изменениями в структуре справки.
//
Процедура ПеренестиПериодыРаботыСотрудниковВИсходящейСправкеОЗаработке() Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходящаяСправкаОЗаработкеДляРасчетаПособий.Ссылка,
	|	ИсходящаяСправкаОЗаработкеДляРасчетаПособий.УдалитьПериодРаботыС,
	|	ИсходящаяСправкаОЗаработкеДляРасчетаПособий.УдалитьПериодРаботыПо
	|ИЗ
	|	Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий КАК ИсходящаяСправкаОЗаработкеДляРасчетаПособий
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий.ПериодыРаботы КАК ИсходящаяСправкаОЗаработкеДляРасчетаПособийПериодыРаботы
	|		ПО ИсходящаяСправкаОЗаработкеДляРасчетаПособийПериодыРаботы.Ссылка = ИсходящаяСправкаОЗаработкеДляРасчетаПособий.Ссылка
	|ГДЕ
	|	ИсходящаяСправкаОЗаработкеДляРасчетаПособийПериодыРаботы.ПериодРаботыС ЕСТЬ NULL ";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.УдалитьПериодРаботыС)
				Или ЗначениеЗаполнено(Выборка.УдалитьПериодРаботыПо) Тогда
				Документ = Выборка.Ссылка.ПолучитьОбъект();
				ПериодРаботы = Документ.ПериодыРаботы.Добавить();
				ПериодРаботы.ПериодРаботыС = Выборка.УдалитьПериодРаботыС;
				ПериодРаботы.ПериодРаботыПо = Выборка.УдалитьПериодРаботыПо;
				Документ.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура переносит данные о периодах работы в связи с изменениями в структуре справки.
//
Процедура ПеренестиОтветственныхЛицВИсходящейСправкеОЗаработке() Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходящаяСправкаОЗаработкеДляРасчетаПособий.Ссылка,
	|	ИсходящаяСправкаОЗаработкеДляРасчетаПособий.УдалитьРуководитель КАК ФИОРуководитель,
	|	ИсходящаяСправкаОЗаработкеДляРасчетаПособий.УдалитьДолжностьРуководителя КАК НаименованиеДолжности,
	|	ИсходящаяСправкаОЗаработкеДляРасчетаПособий.УдалитьГлавныйБухгалтер КАК ФИОГлавныйБухгалтер,
	|	ЕСТЬNULL(Должности.Ссылка, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ДолжностьРуководителя
	|ИЗ
	|	Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий КАК ИсходящаяСправкаОЗаработкеДляРасчетаПособий
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|		ПО ИсходящаяСправкаОЗаработкеДляРасчетаПособий.УдалитьДолжностьРуководителя = Должности.Наименование
	|ГДЕ
	|	ИсходящаяСправкаОЗаработкеДляРасчетаПособий.Руководитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И ИсходящаяСправкаОЗаработкеДляРасчетаПособий.ГлавныйБухгалтер = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		КС = Новый КвалификаторыСтроки(50);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТипаСтрока = Новый ОписаниеТипов(Массив, , КС);
		
		ТЗФИООтветственных = Новый ТаблицаЗначений;
		
		ТЗФИООтветственных.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ИсходящаяСправкаОЗаработкеДляРасчетаПособий"));
		ТЗФИООтветственных.Колонки.Добавить("ДолжностьРуководителя", 	Новый ОписаниеТипов("СправочникСсылка.Должности"));
		ТЗФИООтветственных.Колонки.Добавить("ФамилияРуководителя", 	ОписаниеТипаСтрока);
		ТЗФИООтветственных.Колонки.Добавить("ИмяРуководителя", 		ОписаниеТипаСтрока);
		ТЗФИООтветственных.Колонки.Добавить("ОтчествоРуководителя", ОписаниеТипаСтрока);
		ТЗФИООтветственных.Колонки.Добавить("ФамилияБухгалтера", 	ОписаниеТипаСтрока);
		ТЗФИООтветственных.Колонки.Добавить("ИмяБухгалтера", 		ОписаниеТипаСтрока);
		ТЗФИООтветственных.Колонки.Добавить("ОтчествоБухгалтера", 	ОписаниеТипаСтрока);
		
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.ФИОРуководитель) И Не ЗначениеЗаполнено(Выборка.ФИОГлавныйБухгалтер) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаФИО = ТЗФИООтветственных.Добавить();
			СтрокаФИО.Ссылка = Выборка.Ссылка;
			СтрокаФИО.ДолжностьРуководителя = Выборка.ДолжностьРуководителя;
			
			Если ЗначениеЗаполнено(Выборка.ФИОРуководитель) Тогда
				СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(Выборка.ФИОРуководитель);
				Если СтруктураФИО.Фамилия <> Неопределено Тогда
					СтрокаФИО.ФамилияРуководителя  = СтруктураФИО.Фамилия;
					Если СтруктураФИО.Имя <> Неопределено Тогда
						СтрокаФИО.ИмяРуководителя = СтруктураФИО.Имя;
					КонецЕсли;
					Если СтруктураФИО.Отчество <> Неопределено Тогда
						СтрокаФИО.ОтчествоРуководителя = СтруктураФИО.Отчество;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ФИОРуководитель) Тогда
				СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(Выборка.ФИОГлавныйБухгалтер);
				Если СтруктураФИО.Фамилия <> Неопределено Тогда
					СтрокаФИО.ФамилияБухгалтера  = СтруктураФИО.Фамилия;
					Если СтруктураФИО.Имя <> Неопределено Тогда
						СтрокаФИО.ИмяБухгалтера = СтруктураФИО.Имя;
					КонецЕсли;
					Если СтруктураФИО.Отчество <> Неопределено Тогда
						СтрокаФИО.ОтчествоБухгалтера = СтруктураФИО.Отчество;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЗФИООтветственных.Ссылка,
		|	ТЗФИООтветственных.ДолжностьРуководителя,
		|	ТЗФИООтветственных.ФамилияРуководителя,
		|	ТЗФИООтветственных.ИмяРуководителя,
		|	ТЗФИООтветственных.ОтчествоРуководителя,
		|	ТЗФИООтветственных.ФамилияБухгалтера,
		|	ТЗФИООтветственных.ИмяБухгалтера,
		|	ТЗФИООтветственных.ОтчествоБухгалтера
		|ПОМЕСТИТЬ ВТФИООтветственных
		|ИЗ
		|	&ТЗФИООтветственных КАК ТЗФИООтветственных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТФИООтветственных.Ссылка,
		|	ВТФИООтветственных.ДолжностьРуководителя,
		|	МАКСИМУМ(ЕСТЬNULL(ФИОРуководителей.ФизическоеЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))) КАК Руководитель,
		|	МАКСИМУМ(ЕСТЬNULL(ФИОБухгалтеров.ФизическоеЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))) КАК ГлавныйБухгалтер
		|ИЗ
		|	ВТФИООтветственных КАК ВТФИООтветственных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОРуководителей
		|		ПО ВТФИООтветственных.ФамилияРуководителя = ФИОРуководителей.Фамилия
		|			И ВТФИООтветственных.ИмяРуководителя = ФИОРуководителей.Имя
		|			И ВТФИООтветственных.ОтчествоРуководителя = ФИОРуководителей.Отчество
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОБухгалтеров
		|		ПО ВТФИООтветственных.ФамилияБухгалтера = ФИОБухгалтеров.Фамилия
		|			И ВТФИООтветственных.ИмяБухгалтера = ФИОБухгалтеров.Имя
		|			И ВТФИООтветственных.ОтчествоБухгалтера = ФИОБухгалтеров.Отчество
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТФИООтветственных.ДолжностьРуководителя,
		|	ВТФИООтветственных.Ссылка";
		
		Запрос.УстановитьПараметр("ТЗФИООтветственных", ТЗФИООтветственных);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Документ = Выборка.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(Документ, Выборка, "Руководитель,ГлавныйБухгалтер,ДолжностьРуководителя");
				Документ.Записать(РежимЗаписиДокумента.Запись);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьВБольничныхЛистахДолюНеполногоРабочегоВремени(Параметры) Экспорт
	
	УчетПособийСоциальногоСтрахованияВнутренний.ЗаполнитьВБольничныхЛистахДолюНеполногоРабочегоВремени(Параметры);
	
КонецПроцедуры

Процедура ЗафиксироватьСпособВыплатыПособияВДокументеЗаявлениеСотрудникаНаВыплатуПособия(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявлениеСотрудникаНаВыплатуПособия.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК ЗаявлениеСотрудникаНаВыплатуПособия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитОбъекта(ДокументОбъект, "СпособВыплатыПособия");
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьХэшЭЛН(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеестрыЭЛН.УдалитьХеш КАК УдалитьХеш,
	|	РеестрыЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	РеестрыЭЛН.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТВсеРеестры
	|ИЗ
	|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ДанныеЭЛН КАК РеестрыЭЛН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|		ПО РеестрыЭЛН.НомерЛисткаНетрудоспособности = СведенияОбЭЛН.НомерЛисткаНетрудоспособности
	|ГДЕ
	|	РеестрыЭЛН.УдалитьХеш <> """"
	|	И РеестрыЭЛН.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И СведенияОбЭЛН.Хэш ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрыЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	МАКСИМУМ(РеестрыЭЛН.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТМаксимальныеРеестры
	|ИЗ
	|	ВТВсеРеестры КАК РеестрыЭЛН
	|
	|СГРУППИРОВАТЬ ПО
	|	РеестрыЭЛН.НомерЛисткаНетрудоспособности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Больничные.Ссылка КАК Ссылка,
	|	Больничные.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	Больничные.УдалитьХеш КАК УдалитьХеш
	|ПОМЕСТИТЬ ВТВсеБольничные
	|ИЗ
	|	Документ.БольничныйЛист КАК Больничные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|		ПО Больничные.НомерЛисткаНетрудоспособности = СведенияОбЭЛН.НомерЛисткаНетрудоспособности
	|ГДЕ
	|	Больничные.УдалитьХеш <> """"
	|	И Больничные.ПометкаУдаления = ЛОЖЬ
	|	И СведенияОбЭЛН.Хэш ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТВсеБольничные.Ссылка) КАК Ссылка,
	|	ВТВсеБольничные.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
	|ПОМЕСТИТЬ ВТМаксимальныеБольничные
	|ИЗ
	|	ВТВсеБольничные КАК ВТВсеБольничные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВсеБольничные.НомерЛисткаНетрудоспособности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеРеестров.НомерЛисткаНетрудоспособности, ДанныеБольничных.НомерЛисткаНетрудоспособности) КАК НомерЛисткаНетрудоспособности,
	|	ЕСТЬNULL(ДанныеРеестров.УдалитьХеш, ДанныеБольничных.УдалитьХеш) КАК УдалитьХеш
	|ИЗ
	|	ВТМаксимальныеРеестры КАК МаксимальныеРеестры
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТМаксимальныеБольничные КАК МаксимальныеБольничные
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеБольничные КАК ДанныеБольничных
	|			ПО МаксимальныеБольничные.Ссылка = ДанныеБольничных.Ссылка
	|		ПО МаксимальныеРеестры.НомерЛисткаНетрудоспособности = МаксимальныеБольничные.НомерЛисткаНетрудоспособности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеРеестры КАК ДанныеРеестров
	|		ПО МаксимальныеРеестры.Ссылка = ДанныеРеестров.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.СведенияОбЭЛН.ЗаписатьХэш(Выборка.НомерЛисткаНетрудоспособности, Выборка.УдалитьХеш);
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьУполномоченногоВОписях(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Опись.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий КАК Опись
	|ГДЕ
	|	Опись.УдалитьФИОУполномоченного <> """"
	|	И Опись.УполномоченныйПоПрямымВыплатамФСС = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Опись.Дата УБЫВ";
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработкаЗавершена = Выборка.Количество() < 1000;
	Пространство = "Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий";
	Поле = "Ссылка";
	Пока Выборка.Следующий() Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, Пространство, Поле, Выборка.Ссылка) Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ЗаполнитьУполномоченногоПоПрямымВыплатамФСС(ДокументОбъект);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
КонецПроцедуры

Процедура ЗаполнитьПризнакПостановкиНаУчетВРанниеСрокиБеременностиВБольничных(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Больничный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.БольничныйЛист КАК Больничный
	|ГДЕ
	|	(Больничный.УдалитьПоставленаНаУчетВРанниеСрокиБеременности = ИСТИНА
	|			ИЛИ Больничный.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам))
	|	И Больничный.ПоставленаНаУчетВРанниеСрокиБеременности = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВРанниеСрокиБеременности.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Больничный.Дата УБЫВ";
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработкаЗавершена = Выборка.Количество() < 1000;
	Пространство = "Документ.БольничныйЛист";
	Поле = "Ссылка";
	Пока Выборка.Следующий() Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, Пространство, Поле, Выборка.Ссылка) Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ДокументОбъект.УдалитьПоставленаНаУчетВРанниеСрокиБеременности Тогда
			ДокументОбъект.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.Поставлена;
		Иначе
			ДокументОбъект.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.НеПоставлена;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
КонецПроцедуры

Процедура ЗаполнитьПризнакПостановкиНаУчетВРанниеСрокиБеременностиВРеестрах(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Сведения.Ссылка КАК Ссылка,
	|	Сведения.Заявление КАК Заявление,
	|	Сведения.Заявление.ВидПособия КАК ЗаявлениеВидПособия
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК Сведения
	|ГДЕ
	|	(Сведения.УдалитьПоставленаНаУчетВРанниеСрокиБеременности = ИСТИНА
	|			ИЛИ Сведения.Заявление.ВидПособия = ЗНАЧЕНИЕ(Перечисление.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам)
	|			ИЛИ Сведения.Заявление.ВидПособия = ЗНАЧЕНИЕ(Перечисление.ПособияНазначаемыеФСС.ПособиеВставшимНаУчетВРанниеСроки)
	|			ИЛИ Сведения.Заявление.ВидПособия = ЗНАЧЕНИЕ(Перечисление.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодамВставшимНаУчетВРанниеСроки))
	|	И Сведения.ПоставленаНаУчетВРанниеСрокиБеременности = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВРанниеСрокиБеременности.ПустаяСсылка)";
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработкаЗавершена = Выборка.Количество() < 1000;
	Пространство = "Документ.БольничныйЛист";
	Поле = "Ссылка";
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, Пространство, Поле, Выборка.Ссылка) Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			Найденные = ДокументОбъект.СведенияНеобходимыеДляНазначенияПособий.НайтиСтроки(Новый Структура("Заявление", Выборка.Заявление));
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				Если Выборка.ЗаявлениеВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам Тогда
					СтрокаТаблицы.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.НеПоставлена;
				Иначе
					СтрокаТаблицы.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.Поставлена;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
КонецПроцедуры

Процедура ПеренестиСостоянияЭЛН(ПараметрыОбновления = Неопределено) Экспорт
	ОбработкаЗавершена = Истина;
	
	// 1. Перенос состояний реестров.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеестрЭЛН.Ссылка КАК Ссылка,
	|	РеестрЭЛН.СостояниеРеестра КАК СостояниеРеестра,
	|	РеестрЭЛН.УдалитьСтатусДокумента КАК УдалитьСтатусДокумента
	|ИЗ
	|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем КАК РеестрЭЛН
	|ГДЕ
	|	РеестрЭЛН.СостояниеРеестра = ЗНАЧЕНИЕ(Перечисление.СостоянияРеестровЭЛН.ПустаяСсылка)";
	
	ПараметрыФиксации = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПараметрыФиксацииВторичныхДанных();
	ПараметрыФиксации.ФиксироватьОтличия = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		// Заполнение поля "СостояниеРеестра".
		ДокументОбъект.ЗаполнитьСостояниеРеестраИзСтатусаДокумента();
		
		// Проведение документа если он не помечен на удаление и его состояние заполнено.
		ДокументРежимЗаписи = Неопределено;
		Если Не ДокументОбъект.ПометкаУдаления
			И Не ДокументОбъект.Проведен
			И ДокументОбъект.СостояниеРеестра <> Перечисления.СостоянияРеестровЭЛН.ВРаботе
			И ДокументОбъект.СостояниеРеестра <> Перечисления.СостоянияРеестровЭЛН.ПустаяСсылка() Тогда
			ДокументРежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
		
		// Заполнение поля "Состояние" в таблице "ДанныеЭЛН".
		СостояниеЭЛН = СостояниеЭЛНИзСостоянияРеестраЭЛН(ДокументОбъект.СостояниеРеестра);
		Если СостояниеЭЛН <> Неопределено Тогда
			Для Каждого СтрокаТаблицы Из ДокументОбъект.ДанныеЭЛН Цикл
				СтрокаТаблицы.Состояние = СостояниеЭЛН;
			КонецЦикла;
		КонецЕсли;
		
		// Фиксация отличий от больничного.
		Модифицирован = ДокументОбъект.ОбновитьВторичныеДанные(ПараметрыФиксации);
		
		Если Модифицирован Или ДокументОбъект.Модифицированность() Или ДокументРежимЗаписи <> Неопределено Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, , , ДокументРежимЗаписи);
		КонецЕсли;
	КонецЦикла;
	
	// 2. Заполнение регистра сведений об ЭЛН.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	СведенияОбЭЛН.Хэш КАК Хэш,
	|	СведенияОбЭЛН.Состояние КАК Состояние,
	|	СведенияОбЭЛН.ОтправленныйРеестр КАК ОтправленныйРеестр,
	|	СведенияОбЭЛН.ЛистокНетрудоспособности КАК ЛистокНетрудоспособности,
	|	СведенияОбЭЛН.КомментарийКСостоянию КАК КомментарийКСостоянию
	|ПОМЕСТИТЬ ВТ_ЭЛН
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.ОтправленныйРеестр = ЗНАЧЕНИЕ(Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка)
	|	И СведенияОбЭЛН.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛН.ПустаяСсылка)
	|	И СведенияОбЭЛН.ЛистокНетрудоспособности = ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка)
	|	И СведенияОбЭЛН.Хэш <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныйЛист.Ссылка КАК Ссылка,
	|	БольничныйЛист.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	БольничныйЛист.Проведен КАК Проведен,
	|	БольничныйЛист.Дата КАК Дата,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачала,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания,
	|	БольничныйЛист.Организация КАК Организация,
	|	БольничныйЛист.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БольничныйЛист.Сотрудник КАК Сотрудник,
	|	БольничныйЛист.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	БольничныйЛист.ПериодРегистрации КАК ПериодРегистрации
	|ПОМЕСТИТЬ ВТ_Больничные
	|ИЗ
	|	ВТ_ЭЛН КАК ВТ_ЭЛН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|		ПО ВТ_ЭЛН.НомерЛисткаНетрудоспособности = БольничныйЛист.НомерЛисткаНетрудоспособности
	|ГДЕ
	|	БольничныйЛист.Проведен
	|	И НЕ БольничныйЛист.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧастьИзРеестраЭЛН.Ссылка КАК Ссылка,
	|	ТабличнаяЧастьИзРеестраЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	ТабличнаяЧастьИзРеестраЭЛН.Состояние КАК Состояние,
	|	ТабличнаяЧастьИзРеестраЭЛН.КомментарийКСостоянию КАК КомментарийКСостоянию,
	|	ТабличнаяЧастьИзРеестраЭЛН.Ссылка.Дата КАК Дата,
	|	ТабличнаяЧастьИзРеестраЭЛН.Ссылка.ДатаПолученияОтветаФСС КАК ДатаПолученияОтветаФСС,
	|	ТабличнаяЧастьИзРеестраЭЛН.Ссылка.Проведен КАК Проведен,
	|	ТабличнаяЧастьИзРеестраЭЛН.Ссылка.СостояниеРеестра КАК СостояниеРеестра,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧастьИзРеестраЭЛН.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛН.НеПринятФСС)
	|			ТОГДА 1
	|		КОГДА ТабличнаяЧастьИзРеестраЭЛН.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛН.ПринятФСС)
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СостояниеЭЛНЧислом
	|ПОМЕСТИТЬ ВТ_Реестры
	|ИЗ
	|	ВТ_ЭЛН КАК ВТ_ЭЛН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ДанныеЭЛН КАК ТабличнаяЧастьИзРеестраЭЛН
	|		ПО ВТ_ЭЛН.НомерЛисткаНетрудоспособности = ТабличнаяЧастьИзРеестраЭЛН.НомерЛисткаНетрудоспособности
	|ГДЕ
	|	ТабличнаяЧастьИзРеестраЭЛН.Ссылка.Проведен
	|	И НЕ ТабличнаяЧастьИзРеестраЭЛН.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	МАКСИМУМ(ВТСведенияИзРеестра.Ссылка) КАК ПоследнийОтправленныйРеестр
	|ПОМЕСТИТЬ ВТ_ПоследниеОтправленныеРеестры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|		МАКСИМУМ(ВТСведенияИзРеестра.Дата) КАК ДатаПоследнегоРеестра
	|	ИЗ
	|		ВТ_Реестры КАК ВТСведенияИзРеестра
	|	ГДЕ
	|		ВТСведенияИзРеестра.СостояниеЭЛНЧислом > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности) КАК ПоследниеРеестры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Реестры КАК ВТСведенияИзРеестра
	|		ПО ПоследниеРеестры.НомерЛисткаНетрудоспособности = ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности
	|			И ПоследниеРеестры.ДатаПоследнегоРеестра = ВТСведенияИзРеестра.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	МАКСИМУМ(ВТСведенияИзРеестра.Ссылка) КАК ПоследнийПринятыйРеестр
	|ПОМЕСТИТЬ ВТ_ПоследниеПринятыеРеестры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|		МАКСИМУМ(ВТСведенияИзРеестра.Дата) КАК ДатаПоследнегоРеестра
	|	ИЗ
	|		ВТ_Реестры КАК ВТСведенияИзРеестра
	|	ГДЕ
	|		ВТСведенияИзРеестра.СостояниеЭЛНЧислом = 2
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности) КАК ПоследниеРеестры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Реестры КАК ВТСведенияИзРеестра
	|		ПО ПоследниеРеестры.НомерЛисткаНетрудоспособности = ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности
	|			И ПоследниеРеестры.ДатаПоследнегоРеестра = ВТСведенияИзРеестра.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	МАКСИМУМ(ВТСведенияИзРеестра.Ссылка) КАК ПоследнийПодготовленныйКОтправкеРеестр
	|ПОМЕСТИТЬ ВТ_ПоследниеПодготовленныеКОтправкеРеестры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|		МАКСИМУМ(ВТСведенияИзРеестра.Дата) КАК ДатаПоследнегоРеестра
	|	ИЗ
	|		ВТ_Реестры КАК ВТСведенияИзРеестра
	|	ГДЕ
	|		ВТСведенияИзРеестра.СостояниеЭЛНЧислом = 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности) КАК ПоследниеРеестры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Реестры КАК ВТСведенияИзРеестра
	|		ПО ПоследниеРеестры.НомерЛисткаНетрудоспособности = ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности
	|			И ПоследниеРеестры.ДатаПоследнегоРеестра = ВТСведенияИзРеестра.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСведенияИзРеестра.НомерЛисткаНетрудоспособности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Больничные.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	МАКСИМУМ(ВТ_Больничные.Ссылка) КАК ПоследнийЛистокНетрудоспособности
	|ПОМЕСТИТЬ ВТ_ПоследниеПроведенныеБольничные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Больничные.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|		МАКСИМУМ(ВТ_Больничные.Дата) КАК ДатаПоследнегоБольничного
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВТ_Больничные.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|			МАКСИМУМ(ВТ_Больничные.ПериодРегистрации) КАК МаксимальныйПериодРегистрацииБольничного
	|		ИЗ
	|			ВТ_Больничные КАК ВТ_Больничные
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТ_Больничные.НомерЛисткаНетрудоспособности) КАК МаксимальныеПериодыРегистрацииБольничных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Больничные КАК ВТ_Больничные
	|			ПО МаксимальныеПериодыРегистрацииБольничных.НомерЛисткаНетрудоспособности = ВТ_Больничные.НомерЛисткаНетрудоспособности
	|				И МаксимальныеПериодыРегистрацииБольничных.МаксимальныйПериодРегистрацииБольничного = ВТ_Больничные.ПериодРегистрации
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_Больничные.НомерЛисткаНетрудоспособности) КАК МаксимальныеДатыБольничных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Больничные КАК ВТ_Больничные
	|		ПО МаксимальныеДатыБольничных.НомерЛисткаНетрудоспособности = ВТ_Больничные.НомерЛисткаНетрудоспособности
	|			И МаксимальныеДатыБольничных.ДатаПоследнегоБольничного = ВТ_Больничные.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Больничные.НомерЛисткаНетрудоспособности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	ЕСТЬNULL(ВТ_ПоследниеПроведенныеБольничные.ПоследнийЛистокНетрудоспособности, НЕОПРЕДЕЛЕНО) КАК ПоследнийЛистокНетрудоспособности,
	|	ЕСТЬNULL(ВТ_ПоследниеПодготовленныеКОтправкеРеестры.ПоследнийПодготовленныйКОтправкеРеестр, НЕОПРЕДЕЛЕНО) КАК ПоследнийПодготовленныйКОтправкеРеестр,
	|	ЕСТЬNULL(ВТ_ПоследниеОтправленныеРеестры.ПоследнийОтправленныйРеестр, НЕОПРЕДЕЛЕНО) КАК ПоследнийОтправленныйРеестр,
	|	ЕСТЬNULL(ВТ_ПоследниеПринятыеРеестры.ПоследнийПринятыйРеестр, НЕОПРЕДЕЛЕНО) КАК ПоследнийПринятыйРеестр
	|ИЗ
	|	ВТ_ЭЛН КАК ВТ_ЭЛН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеПроведенныеБольничные КАК ВТ_ПоследниеПроведенныеБольничные
	|		ПО ВТ_ЭЛН.НомерЛисткаНетрудоспособности = ВТ_ПоследниеПроведенныеБольничные.НомерЛисткаНетрудоспособности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеПодготовленныеКОтправкеРеестры КАК ВТ_ПоследниеПодготовленныеКОтправкеРеестры
	|		ПО ВТ_ЭЛН.НомерЛисткаНетрудоспособности = ВТ_ПоследниеПодготовленныеКОтправкеРеестры.НомерЛисткаНетрудоспособности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеОтправленныеРеестры КАК ВТ_ПоследниеОтправленныеРеестры
	|		ПО ВТ_ЭЛН.НомерЛисткаНетрудоспособности = ВТ_ПоследниеОтправленныеРеестры.НомерЛисткаНетрудоспособности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеПринятыеРеестры КАК ВТ_ПоследниеПринятыеРеестры
	|		ПО ВТ_ЭЛН.НомерЛисткаНетрудоспособности = ВТ_ПоследниеПринятыеРеестры.НомерЛисткаНетрудоспособности";
	
	НаборЗаписей = РегистрыСведений.СведенияОбЭЛН.СоздатьНаборЗаписей();
	ИзмерениеОтбора = "НомерЛисткаНетрудоспособности";
	ПространствоБлокировки = "РегистрСведений.СведенияОбЭЛН";
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаБольничных = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_Больничные").ПолучитьДанные().Выгрузить();
	ТаблицаРеестров = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_Реестры").ПолучитьДанные().Выгрузить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, ПространствоБлокировки, ИзмерениеОтбора, Выборка[ИзмерениеОтбора]) Тогда
			ОбработкаЗавершена = Ложь; // Запись заблокирована, требуется повторная обработка.
			Продолжить;
		КонецЕсли;
		НаборЗаписей.Отбор.НомерЛисткаНетрудоспособности.Установить(Выборка.НомерЛисткаНетрудоспособности);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() <> 1 Тогда
			ОбработкаЗавершена = Ложь; // Нештатная ситуация.
			Продолжить;
		КонецЕсли;
		Запись = НаборЗаписей[0];
		ЗаписьМодифицирована = Ложь;
		
		Если Не ЗначениеЗаполнено(Запись.ЛистокНетрудоспособности)
			И ЗначениеЗаполнено(Выборка.ПоследнийЛистокНетрудоспособности) Тогда
			ЗаписьМодифицирована = Истина;
			ПоследнийЛистокНетрудоспособности = ТаблицаБольничных.Найти(Выборка.ПоследнийЛистокНетрудоспособности, "Ссылка");
			РегистрыСведений.СведенияОбЭЛН.ОбновитьСведенияОЛисткеНетрудоспособности(Запись, ПоследнийЛистокНетрудоспособности, Неопределено);
		КонецЕсли;
		
		ПоследнийПринятыйРеестр = НайтиСтрокуЭЛНВТаблицеРеестров(ТаблицаРеестров, Выборка.ПоследнийПринятыйРеестр, Выборка.НомерЛисткаНетрудоспособности);
		Если ПоследнийПринятыйРеестр <> Неопределено Тогда
			ЗаписьМодифицирована = Истина;
			РегистрыСведений.СведенияОбЭЛН.ОбновитьСведенияОРеестре(Запись, ПоследнийПринятыйРеестр, ПоследнийПринятыйРеестр);
		КонецЕсли;
		
		ПоследнийОтправленныйРеестр = НайтиСтрокуЭЛНВТаблицеРеестров(ТаблицаРеестров, Выборка.ПоследнийОтправленныйРеестр, Выборка.НомерЛисткаНетрудоспособности);
		Если ПоследнийОтправленныйРеестр <> Неопределено
			И ПоследнийОтправленныйРеестр <> ПоследнийПринятыйРеестр
			И (ПоследнийПринятыйРеестр = Неопределено
				Или ПоследнийПринятыйРеестр.Дата < ПоследнийОтправленныйРеестр.Дата) Тогда
			ЗаписьМодифицирована = Истина;
			РегистрыСведений.СведенияОбЭЛН.ОбновитьСведенияОРеестре(Запись, ПоследнийОтправленныйРеестр, ПоследнийОтправленныйРеестр);
		КонецЕсли;
		
		ПоследнийПодготовленныйКОтправкеРеестр = НайтиСтрокуЭЛНВТаблицеРеестров(ТаблицаРеестров, Выборка.ПоследнийПодготовленныйКОтправкеРеестр, Выборка.НомерЛисткаНетрудоспособности);
		Если ПоследнийПодготовленныйКОтправкеРеестр <> Неопределено
			И ПоследнийПодготовленныйКОтправкеРеестр <> ПоследнийОтправленныйРеестр
			И (ПоследнийОтправленныйРеестр = Неопределено
				Или ПоследнийОтправленныйРеестр.Дата < ПоследнийПодготовленныйКОтправкеРеестр.Дата) Тогда
			ЗаписьМодифицирована = Истина;
			РегистрыСведений.СведенияОбЭЛН.ОбновитьСведенияОРеестре(Запись, ПоследнийПодготовленныйКОтправкеРеестр, ПоследнийПодготовленныйКОтправкеРеестр);
		КонецЕсли;
		
		Если ЗаписьМодифицирована Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Истина, Ложь);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

Процедура ПеренестиИзвещенияИзФСС(ПараметрыОбновления = Неопределено) Экспорт
	ОбработкаЗавершена = Истина;
	
	// 1. Перенос состояний реестров.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокаРеестраПВСО.Ссылка КАК Ссылка,
	|	СтрокаРеестраПВСО.НомерСтроки КАК НомерСтроки,
	|	ЗаявлениеСотрудникаНаВыплатуПособия.УдалитьИзвещениеИзФССНомер КАК УдалитьИзвещениеИзФССНомер,
	|	ЗаявлениеСотрудникаНаВыплатуПособия.УдалитьИзвещениеИзФССДата КАК УдалитьИзвещениеИзФССДата
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК СтрокаРеестраПВСО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК ЗаявлениеСотрудникаНаВыплатуПособия
	|		ПО СтрокаРеестраПВСО.Заявление = ЗаявлениеСотрудникаНаВыплатуПособия.Ссылка
	|			И (ЗаявлениеСотрудникаНаВыплатуПособия.УдалитьИзвещениеИзФССНомер <> """")
	|			И (НЕ СтрокаРеестраПВСО.ИзвещениеИзФССИспользование)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			// Перенос сведений из заявления в реестр.
			СтрокаТаблицы = ДокументОбъект.СведенияНеобходимыеДляНазначенияПособий[Выборка.НомерСтроки - 1];
			СтрокаТаблицы.ИзвещениеИзФССИспользование = Истина;
			СтрокаТаблицы.ИзвещениеИзФССНомер = Выборка.УдалитьИзвещениеИзФССНомер;
			СтрокаТаблицы.ИзвещениеИзФССДата = Выборка.УдалитьИзвещениеИзФССДата;
			
			// Фиксация изменений.
			ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитОбъекта(
				ДокументОбъект,
				"ИзвещениеИзФССИспользование",
				"СведенияНеобходимыеДляНазначенияПособий",
				СтрокаТаблицы.ИдентификаторСтрокиФикс);
			ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитОбъекта(
				ДокументОбъект,
				"ИзвещениеИзФССНомер",
				"СведенияНеобходимыеДляНазначенияПособий",
				СтрокаТаблицы.ИдентификаторСтрокиФикс);
			ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитОбъекта(
				ДокументОбъект,
				"ИзвещениеИзФССДата",
				"СведенияНеобходимыеДляНазначенияПособий",
				СтрокаТаблицы.ИдентификаторСтрокиФикс);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

Функция НайтиСтрокуЭЛНВТаблицеРеестров(ТаблицаРеестров, Ссылка, НомерЛисткаНетрудоспособности)
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Найденные = ТаблицаРеестров.НайтиСтроки(Новый Структура("НомерЛисткаНетрудоспособности, Ссылка", НомерЛисткаНетрудоспособности, Ссылка));
	Если Найденные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Найденные[0];
КонецФункции

Процедура ДобавитьРолиЭЛНВПользовательскиеПрофили(ПараметрыОбновления = Неопределено) Экспорт
	Контекст = КонтекстДобавляемыхРолей("УчетПособийСоциальногоСтрахования.ДобавитьРолиЭЛНВПользовательскиеПрофили");
	
	// ЗарплатаКадрыПодсистемы.РасчетЗарплаты
	ЗарегистрироватьДобавляемуюРоль(Контекст, "ЧтениеНачисленнойЗарплаты", "ЧтениеЭЛН");
	ЗарегистрироватьДобавляемуюРоль(Контекст, "ЧтениеНачисленнойЗарплаты", "ЧтениеРеестровЭЛН");
	ЗарегистрироватьДобавляемуюРоль(Контекст, "ДобавлениеИзменениеНачисленнойЗарплаты", "ДобавлениеИзменениеЭЛН");
	ЗарегистрироватьДобавляемуюРоль(Контекст, "ДобавлениеИзменениеНачисленнойЗарплаты", "ДобавлениеИзменениеРеестровЭЛН");
	// Конец ЗарплатаКадрыПодсистемы.РасчетЗарплаты
	
	// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	ЗарегистрироватьДобавляемуюРоль(Контекст, "ЧтениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования", "ЧтениеЭЛН");
	ЗарегистрироватьДобавляемуюРоль(Контекст, "ДобавлениеИзменениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования", "ДобавлениеИзменениеЭЛН");
	// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций") Тогда
		ЗарегистрироватьДобавляемуюРоль(Контекст, "ЧтениеДокументовЗарплатаКадры", "ЧтениеЭЛН");
		ЗарегистрироватьДобавляемуюРоль(Контекст, "ДобавлениеИзменениеДокументовЗарплатаКадры", "ДобавлениеИзменениеЭЛН");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования") Тогда
		ЗарегистрироватьДобавляемуюРоль(Контекст, "ЧтениеБольничныхЛистов", "ЧтениеЭЛН");
		ЗарегистрироватьДобавляемуюРоль(Контекст, "ДобавлениеИзменениеБольничныхЛистов", "ДобавлениеИзменениеЭЛН");
	КонецЕсли;
	
	ДобавитьРолиВНепоставляемыеПрофили(Контекст);
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

Функция ОписаниеАдреса(Адрес, ВидАдреса, ТекстОшибки = Неопределено) Экспорт
	СтруктураАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(Адрес, ВидАдреса);
	Если Не СтруктураАдреса.Свойство("Индекс") Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'В адресе ""%1"" отсутствует поле Индекс, возможно указан адрес за пределами РФ.'"),
			Адрес);
	Иначе
		Попытка
			КодыАдреса = АдресныйКлассификатор.КодыАдреса(Адрес);
			СтруктураАдреса.Вставить("КодКЛАДР", Формат(КодыАдреса.КодКЛАДР, "ЧГ=0"));
			Если ЗначениеЗаполнено(КодыАдреса.ИдентификаторДома) Тогда
				СтруктураАдреса.Вставить("ИдентификаторОбъектаФИАС", Строка(КодыАдреса.ИдентификаторДома));
			Иначе
				СтруктураАдреса.Вставить("ИдентификаторОбъектаФИАС", Строка(КодыАдреса.Идентификатор));
			КонецЕсли;
			Возврат СтруктураАдреса;
		Исключение
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'При вызове функции ""%1"" с параметром ""%2"" возникла ошибка ""%3"".
					|Подробности:
					|%4.'"),
				"АдресныйКлассификатор.КодыАдреса",
				Адрес,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Наследник функции СотрудникиФормы.ПохожиеФизическиеЛица.
Функция ЗапросДляПоискаФизическихЛиц(Знач Фамилия, Знач Имя, Знач Отчество, Знач СНИЛС = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	ФизическиеЛица.Наименование КАК Наименование,
	|	ФизическиеЛица.СтраховойНомерПФР КАК СНИЛС,
	|	ФизическиеЛица.УточнениеНаименования КАК УточнениеНаименования,
	|	ВЫБОР
	|		КОГДА ФизическиеЛица.ПометкаУдаления
	|			ТОГДА 99
	|		КОГДА ФизическиеЛица.СтраховойНомерПФР = &СНИЛС
	|			ТОГДА 1
	|		КОГДА ФизическиеЛица.СтраховойНомерПФР = &ПустойСНИЛС
	|				И ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмяОтчество СПЕЦСИМВОЛ ""~""
	|			ТОГДА 2
	|		КОГДА ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмяОтчество СПЕЦСИМВОЛ ""~""
	|			ТОГДА 3
	|		КОГДА ФизическиеЛица.СтраховойНомерПФР = &ПустойСНИЛС
	|				И ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмя СПЕЦСИМВОЛ ""~""
	|			ТОГДА 4
	|		КОГДА ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмя СПЕЦСИМВОЛ ""~""
	|			ТОГДА 5
	|		КОГДА ФизическиеЛица.СтраховойНомерПФР = &ПустойСНИЛС
	|				И ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &Фамилия СПЕЦСИМВОЛ ""~""
	|			ТОГДА 6
	|		КОГДА ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &Фамилия СПЕЦСИМВОЛ ""~""
	|			ТОГДА 7
	|	КОНЕЦ КАК ПриоритетТочности
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	(ФизическиеЛица.СтраховойНомерПФР = &СНИЛС
	|			ИЛИ ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмяОтчество СПЕЦСИМВОЛ ""~""
	|			ИЛИ ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмя СПЕЦСИМВОЛ ""~""
	|			ИЛИ ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &Фамилия СПЕЦСИМВОЛ ""~"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетТочности,
	|	ФизическиеЛица.ПометкаУдаления УБЫВ";
	
	Если СНИЛС = Неопределено Тогда // Отключение критериев поиска по СНИЛС.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛица.СтраховойНомерПФР = &СНИЛС",       "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛица.СтраховойНомерПФР = &ПустойСНИЛС", "ЛОЖЬ");
	Иначе
		Запрос.УстановитьПараметр("СНИЛС",       СНИЛС);
		Запрос.УстановитьПараметр("ПустойСНИЛС", "");
	КонецЕсли;
	
	Если ТипЗнч(Фамилия) <> Тип("Строка") Или ПустаяСтрока(Фамилия) Тогда // Отключение критериев поиска по ФИО.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &Фамилия СПЕЦСИМВОЛ ""~""", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмя СПЕЦСИМВОЛ ""~""", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмяОтчество СПЕЦСИМВОЛ ""~""", "ЛОЖЬ");
	Иначе
		Фамилия  = ФизическиеЛицаЗарплатаКадры.ФамилияДляПоиска(Фамилия);
		Имя      = ФизическиеЛицаЗарплатаКадры.ИмяДляПоиска(Имя);
		Отчество = ФизическиеЛицаЗарплатаКадры.ОтчествоДляПоиска(Отчество);
		
		ФамилияИмя         = Фамилия    + ?(ПустаяСтрока(Имя), "", " " + Имя);
		ФамилияИмяОтчество = ФамилияИмя + ?(ПустаяСтрока(Отчество), "%", " " + Отчество);
		
		Запрос.УстановитьПараметр("Фамилия",            Фамилия);
		Запрос.УстановитьПараметр("ФамилияИмя",         ФамилияИмя);
		Запрос.УстановитьПараметр("ФамилияИмяОтчество", ФамилияИмяОтчество);
	КонецЕсли;
	
	Возврат Запрос;
КонецФункции

// Представление подсистемы. Используется при записи в журнал регистрации.
Функция НаименованиеПодсистемы(КодЯзыка = Неопределено)
	Возврат НСтр("ru = 'Пособия социального страхования'", ?(КодЯзыка = Неопределено, ОбщегоНазначения.КодОсновногоЯзыка(), КодЯзыка));
КонецФункции

#Область РеестрЭЛН

// Возвращает состояние ЭЛН.
Функция СостояниеЭЛНИзСостоянияРеестраЭЛН(СостояниеРеестраЭЛН) Экспорт
	
	Если СостояниеРеестраЭЛН = Перечисления.СостоянияРеестровЭЛН.ПринятФСС Тогда
		Возврат Перечисления.СостоянияЭЛН.ПринятФСС;
		
	ИначеЕсли СостояниеРеестраЭЛН = Перечисления.СостоянияРеестровЭЛН.НеПринятФСС Тогда
		Возврат Перечисления.СостоянияЭЛН.НеПринятФСС;
		
	ИначеЕсли СостояниеРеестраЭЛН = Перечисления.СостоянияРеестровЭЛН.Подготовлен Тогда
		Возврат Перечисления.СостоянияЭЛН.ПустаяСсылка();
		
	ИначеЕсли СостояниеРеестраЭЛН = Перечисления.СостоянияРеестровЭЛН.ВРаботе Тогда
		Возврат Перечисления.СостоянияЭЛН.ПустаяСсылка();
		
	ИначеЕсли СостояниеРеестраЭЛН = Перечисления.СостоянияРеестровЭЛН.ЧастичноПринятФСС Тогда
		Возврат Неопределено;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу с данными, необходимыми для выгрузки реестра ЭЛН.
Функция ЗапросРеестраЭЛНПоПервичнымДокументам(ТаблицаОснований, СсылкаРеестра, ИмяВТ = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОснований", ТаблицаОснований);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОснований.ЛистокНетрудоспособности КАК СсылкаБольничного,
	|	ТаблицаОснований.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
	|ПОМЕСТИТЬ ТаблицаОснований
	|ИЗ
	|	&ТаблицаОснований КАК ТаблицаОснований
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОснований.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	БольничныйЛист.Ссылка КАК Ссылка,
	|	БольничныйЛист.Сотрудник КАК Сотрудник,
	|	БольничныйЛист.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТБольничные
	|ИЗ
	|	ТаблицаОснований КАК ТаблицаОснований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|		ПО ТаблицаОснований.СсылкаБольничного = БольничныйЛист.Ссылка";
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТБольничные");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ИНН,СтраховойНомерПФР,ВидЗанятости");
	
	Больничные = ТаблицаОснований.ВыгрузитьКолонку("ЛистокНетрудоспособности");
	Запрос.УстановитьПараметр("БазыДляРасчетаСреднегоЗаработка", БазыДляРасчетаСреднегоЗаработка(Больничные));
	
	Запрос.УстановитьПараметр("СсылкаРеестра", СсылкаРеестра);
	Запрос.УстановитьПараметр("КатегорииПособийЗаСчетФСС", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КатегорииПособийЗаСчетФСС());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БазыДляРасчетаСреднегоЗаработка.Ссылка КАК ЛистокНетрудоспособности,
	|	БазыДляРасчетаСреднегоЗаработка.УчитываемыхДнейВКалендарныхГодах КАК УчитываемыхДнейВКалендарныхГодах,
	|	БазыДляРасчетаСреднегоЗаработка.Сумма КАК БазаДляРасчетаСреднегоЗаработка
	|ПОМЕСТИТЬ ВТБазыДляРасчетаСреднегоЗаработка
	|ИЗ
	|	&БазыДляРасчетаСреднегоЗаработка КАК БазыДляРасчетаСреднегоЗаработка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Больничные.Ссылка КАК ЛистокНетрудоспособности,
	|	МИНИМУМ(БольничныйЛистНачисления.ДатаНачала) КАК ДатаНачалаОплатыФСС,
	|	МАКСИМУМ(БольничныйЛистНачисления.ДатаОкончания) КАК ДатаОкончанияОплатыФСС,
	|	СУММА(БольничныйЛистНачисления.Результат) КАК СуммаОплатыЗаСчетФСС
	|ПОМЕСТИТЬ ВТПериодыОплатыЗаСчетФСС
	|ИЗ
	|	ВТБольничные КАК Больничные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.Начисления КАК БольничныйЛистНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|			ПО БольничныйЛистНачисления.Начисление = Начисления.Ссылка
	|		ПО Больничные.Ссылка = БольничныйЛистНачисления.Ссылка
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииПособийЗаСчетФСС)
	|
	|СГРУППИРОВАТЬ ПО
	|	Больничные.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Больничные.Ссылка КАК ЛистокНетрудоспособности,
	|	СУММА(БольничныйЛистНачисления.Результат) КАК СуммаОплатыЗаСчетРаботодателя
	|ПОМЕСТИТЬ ВТОплатаЗаСчетРаботодателя
	|ИЗ
	|	ВТБольничные КАК Больничные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист.Начисления КАК БольничныйЛистНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|			ПО БольничныйЛистНачисления.Начисление = Начисления.Ссылка
	|		ПО Больничные.Ссылка = БольничныйЛистНачисления.Ссылка
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	Больничные.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныйЛист.Ссылка КАК ЛистокНетрудоспособности,
	|	БольничныйЛист.Сотрудник КАК Сотрудник,
	|	БольничныйЛист.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	БольничныйЛист.ОсновноеМестоРаботы КАК ОсновноеМестоРаботы,
	|	БольничныйЛист.ПриступитьКРаботеС КАК ПриступитьКРаботеС,
	|	БольничныйЛист.УсловияИсчисленияКод1 КАК УсловияИсчисленияКод1,
	|	БольничныйЛист.УсловияИсчисленияКод2 КАК УсловияИсчисленияКод2,
	|	БольничныйЛист.УсловияИсчисленияКод3 КАК УсловияИсчисленияКод3,
	|	БольничныйЛист.ДатаАктаН1 КАК ДатаАктаН1,
	|	БольничныйЛист.ДатаНачалаРаботы КАК ДатаНачалаРаботы,
	|	БольничныйЛист.СтажЛет КАК СтажЛет,
	|	БольничныйЛист.СтажМесяцев КАК СтажМесяцев,
	|	БольничныйЛист.СтажРасширенныйЛет КАК СтажРасширенныйЛет,
	|	БольничныйЛист.СтажРасширенныйМесяцев КАК СтажРасширенныйМесяцев,
	|	БольничныйЛист.ДатаНачалаОплаты КАК ДатаНачалаОплаты,
	|	БольничныйЛист.ДатаОкончанияОплаты КАК ДатаОкончанияОплаты,
	|	БольничныйЛист.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
	|	ВЫБОР
	|		КОГДА БольничныйЛист.СреднийДневнойЗаработок > БольничныйЛист.МинимальныйСреднедневнойЗаработок
	|			ТОГДА БольничныйЛист.СреднийДневнойЗаработок
	|		ИНАЧЕ БольничныйЛист.МинимальныйСреднедневнойЗаработок
	|	КОНЕЦ КАК СреднийДневнойЗаработок,
	|	ВЫБОР
	|		КОГДА БольничныйЛист.СреднийДневнойЗаработок <= БольничныйЛист.МинимальныйСреднедневнойЗаработок
	|				И НЕ ВТБазыДляРасчетаСреднегоЗаработка.УчитываемыхДнейВКалендарныхГодах ЕСТЬ NULL
	|			ТОГДА БольничныйЛист.МинимальныйСреднедневнойЗаработок * ВТБазыДляРасчетаСреднегоЗаработка.УчитываемыхДнейВКалендарныхГодах
	|		ИНАЧЕ ЕСТЬNULL(ВТБазыДляРасчетаСреднегоЗаработка.БазаДляРасчетаСреднегоЗаработка, 0)
	|	КОНЕЦ КАК БазаДляРасчетаСреднегоЗаработка,
	|	ВТПериодыОплатыЗаСчетФСС.ДатаНачалаОплатыФСС КАК ДатаНачалаОплатыФСС,
	|	ВТПериодыОплатыЗаСчетФСС.ДатаОкончанияОплатыФСС КАК ДатаОкончанияОплатыФСС,
	|	ВТПериодыОплатыЗаСчетФСС.СуммаОплатыЗаСчетФСС КАК СуммаОплатыЗаСчетФСС,
	|	ВТОплатаЗаСчетРаботодателя.СуммаОплатыЗаСчетРаботодателя КАК СуммаОплатыЗаСчетРаботодателя,
	|	КадровыеДанныеСотрудников.ИНН КАК ИНН,
	|	КадровыеДанныеСотрудников.СтраховойНомерПФР КАК СНИЛС,
	|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	ВЫБОР
	|		КОГДА СведенияОбЭЛН.ПринятыйРеестр В (ЗНАЧЕНИЕ(Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка), &СсылкаРеестра)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Исправление,
	|	СведенияОбЭЛН.Хэш КАК Хэш
	|ИЗ
	|	ВТБольничные КАК ВТБольничные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|		ПО ВТБольничные.Ссылка = БольничныйЛист.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|		ПО (БольничныйЛист.НомерЛисткаНетрудоспособности = СведенияОбЭЛН.НомерЛисткаНетрудоспособности)
	|			И (СведенияОбЭЛН.Хэш <> """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ВТБольничные.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И ВТБольничные.Период = КадровыеДанныеСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОплатаЗаСчетРаботодателя КАК ВТОплатаЗаСчетРаботодателя
	|		ПО ВТБольничные.Ссылка = ВТОплатаЗаСчетРаботодателя.ЛистокНетрудоспособности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазыДляРасчетаСреднегоЗаработка КАК ВТБазыДляРасчетаСреднегоЗаработка
	|		ПО ВТБольничные.Ссылка = ВТБазыДляРасчетаСреднегоЗаработка.ЛистокНетрудоспособности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыОплатыЗаСчетФСС КАК ВТПериодыОплатыЗаСчетФСС
	|		ПО ВТБольничные.Ссылка = ВТПериодыОплатыЗаСчетФСС.ЛистокНетрудоспособности";
	
	Если ИмяВТ <> Неопределено Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ПоследнийЗапрос = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
		ПоследнийЗапрос.ТаблицаДляПомещения = ИмяВТ;
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Возврат Запрос;
КонецФункции

Функция БазыДляРасчетаСреднегоЗаработка(Больничные) Экспорт
	
	ДанныеДляРасчетаСреднегоЗаработкаПоВсемБольничным = Документы.БольничныйЛист.ДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(Больничные);
	
	ВсеРасчетныеГоды = Новый Массив;
	
	СреднийЗаработокЗа2Года = Новый ТаблицаЗначений;
	СреднийЗаработокЗа2Года.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.БольничныйЛист"));
	СреднийЗаработокЗа2Года.Колонки.Добавить("ПервыйРасчетныйГод", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
	СреднийЗаработокЗа2Года.Колонки.Добавить("ВторойРасчетныйГод", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
	СреднийЗаработокЗа2Года.Колонки.Добавить("ЗаработокПервыйГод", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СреднийЗаработокЗа2Года.Колонки.Добавить("ЗаработокВторойГод", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Для Каждого КлючИЗначение Из ДанныеДляРасчетаСреднегоЗаработкаПоВсемБольничным Цикл
		ДанныеДляРасчетаСреднегоЗаработка = КлючИЗначение.Значение;
		ПараметрыРасчета = ДанныеДляРасчетаСреднегоЗаработка.ПараметрыРасчета;
		ДанныеРасчетаСреднего = ДанныеДляРасчетаСреднегоЗаработка.ДанныеРасчетаСреднего;
		
		СтрокаЗаработок = СреднийЗаработокЗа2Года.Добавить();
		СтрокаЗаработок.Ссылка             = КлючИЗначение.Ключ;
		СтрокаЗаработок.ПервыйРасчетныйГод = ПараметрыРасчета.РасчетныеГоды[0];
		СтрокаЗаработок.ВторойРасчетныйГод = ПараметрыРасчета.РасчетныеГоды[1];
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеРасчетныеГоды, ПараметрыРасчета.РасчетныеГоды, Истина);
		
		Фильтр = Новый Структура("РасчетныйГод", СтрокаЗаработок.ПервыйРасчетныйГод);
		СтрокаПоГоду = УчетПособийСоциальногоСтрахованияКлиентСервер.ЭлементКоллекцииПоОтбору(ДанныеРасчетаСреднего, Фильтр);
		Если СтрокаПоГоду <> Неопределено Тогда
			СтрокаЗаработок.ЗаработокПервыйГод = УчетПособийСоциальногоСтрахованияКлиентСервер.УчитываемыйЗаработокФССПоГоду(ПараметрыРасчета, СтрокаПоГоду);
		КонецЕсли;
		
		Фильтр = Новый Структура("РасчетныйГод", СтрокаЗаработок.ВторойРасчетныйГод);
		СтрокаПоГоду = УчетПособийСоциальногоСтрахованияКлиентСервер.ЭлементКоллекцииПоОтбору(ДанныеРасчетаСреднего, Фильтр);
		Если СтрокаПоГоду <> Неопределено Тогда
			СтрокаЗаработок.ЗаработокВторойГод = УчетПособийСоциальногоСтрахованияКлиентСервер.УчитываемыйЗаработокФССПоГоду(ПараметрыРасчета, СтрокаПоГоду);
		КонецЕсли;
	КонецЦикла;
	
	ПредельныеВеличиныБаз = УчетПособийСоциальногоСтрахования.ПредельнаяВеличинаБазыСтраховыхВзносов(ВсеРасчетныеГоды);
	
	БазыДляРасчетаСреднегоЗаработка = Новый ТаблицаЗначений;
	БазыДляРасчетаСреднегоЗаработка.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.БольничныйЛист"));
	БазыДляРасчетаСреднегоЗаработка.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	БазыДляРасчетаСреднегоЗаработка.Колонки.Добавить("УчитываемыхДнейВКалендарныхГодах", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0)));
	
	Для Каждого СтрокаЗаработок Из СреднийЗаработокЗа2Года Цикл
		// Применение предельных величин.
		ПредельнаяВеличинаБазыПоГоду = ПредельныеВеличиныБаз[СтрокаЗаработок.ПервыйРасчетныйГод];
		Если ПредельнаяВеличинаБазыПоГоду <> Неопределено И ПредельнаяВеличинаБазыПоГоду < СтрокаЗаработок.ЗаработокПервыйГод Тогда
			СтрокаЗаработок.ЗаработокПервыйГод = ПредельнаяВеличинаБазыПоГоду;
		КонецЕсли;
		ПредельнаяВеличинаБазыПоГоду = ПредельныеВеличиныБаз[СтрокаЗаработок.ВторойРасчетныйГод];
		Если ПредельнаяВеличинаБазыПоГоду <> Неопределено И ПредельнаяВеличинаБазыПоГоду < СтрокаЗаработок.ЗаработокВторойГод Тогда
			СтрокаЗаработок.ЗаработокВторойГод = ПредельнаяВеличинаБазыПоГоду;
		КонецЕсли;
		// Суммирование.
		СтрокаБаза = БазыДляРасчетаСреднегоЗаработка.Добавить();
		СтрокаБаза.Ссылка = СтрокаЗаработок.Ссылка;
		СтрокаБаза.Сумма  = СтрокаЗаработок.ЗаработокПервыйГод + СтрокаЗаработок.ЗаработокВторойГод;
		// Вычисление количества учитываемых дней.
		ДанныеДляРасчетаСреднегоЗаработка = ДанныеДляРасчетаСреднегоЗаработкаПоВсемБольничным[СтрокаБаза.Ссылка];
		СтрокаБаза.УчитываемыхДнейВКалендарныхГодах = УчетПособийСоциальногоСтрахованияКлиентСервер.УчитываемыхДнейВКалендарныхГодахФСС(
			ДанныеДляРасчетаСреднегоЗаработка.ПараметрыРасчета,
			ДанныеДляРасчетаСреднегоЗаработка.ДанныеРасчетаСреднего);
	КонецЦикла;
	
	Возврат БазыДляРасчетаСреднегоЗаработка;
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

// Конструктор 1го параметра для процедур ЗарегистрироватьДобавляемуюРоль и ДобавитьРолиВНепоставляемыеПрофили.
//
// Параметры:
//   ИмяОбработчикаОбновления - Строка - Имя обработчика обновления, в котором добавляются роли.
//
// Возвращаемое значение:
//   Структура - Содержит таблицу для использования в параметрах процедуры ДобавитьРолиВНепоставляемыеПрофили.
//
Функция КонтекстДобавляемыхРолей(ИмяОбработчикаОбновления) Экспорт
	Возврат Новый Структура("ЗаменяемыеРоли, ИмяОбработчикаОбновления", Новый Соответствие, ИмяОбработчикаОбновления);
КонецФункции

// Добавляет запись о добавляемой роли в структуру, используемую в первом параметре процедуры ДобавитьРолиВНепоставляемыеПрофили.
//
// Параметры:
//   КонтекстДобавляемыхРолей - Структура - Контекст добавляемых ролей. Создается при помощи функции КонтекстДобавляемыхРолей.
//   ИмяРолиДляПоискаПрофиля - Строка - Имя роли для поиска профилей групп доступа, в которые требуется добавить указанную роль.
//   ИмяРолиДобавляемойВПрофиль - Строка - Имя роли, которую требуется добавить в найденный профиль.
//
Процедура ЗарегистрироватьДобавляемуюРоль(КонтекстДобавляемыхРолей, ИмяРолиДляПоискаПрофиля, ИмяРолиДобавляемойВПрофиль) Экспорт
	// Проверка наличия ролей в метаданных,
	// т.к. расширение пользовательских профилей не является обязательным условием перехода на новую версию
	// (обязательное условие - расширение поставляемых профилей).
	Если Метаданные.Роли.Найти(ИмяРолиДляПоискаПрофиля) = Неопределено Тогда
		СобытиеЖурнала = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации() + "." + КонтекстДобавляемыхРолей.ИмяОбработчикаОбновления;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В обработчике обновления ""%1"" возникла ошибка: Роль ""%2"" не найдена в метаданных.'"),
			КонтекстДобавляемыхРолей.ИмяОбработчикаОбновления,
			ИмяРолиДляПоискаПрофиля);
		ЗаписьЖурналаРегистрации(СобытиеЖурнала, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат;
	КонецЕсли;
	Если Метаданные.Роли.Найти(ИмяРолиДобавляемойВПрофиль) = Неопределено Тогда
		СобытиеЖурнала = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации() + "." + КонтекстДобавляемыхРолей.ИмяОбработчикаОбновления;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В обработчике обновления ""%1"" возникла ошибка: Роль ""%2"" не найдена в метаданных.'"),
			КонтекстДобавляемыхРолей.ИмяОбработчикаОбновления,
			ИмяРолиДобавляемойВПрофиль);
		ЗаписьЖурналаРегистрации(СобытиеЖурнала, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат;
	КонецЕсли;
	// Добавление ролей ДляПоискаПрофиля и ДобавляемойВПрофиль в массив ролей, на которые заменяется роль ДляПоискаПрофиля.
	МассивРолей = КонтекстДобавляемыхРолей.ЗаменяемыеРоли[ИмяРолиДляПоискаПрофиля];
	Если МассивРолей = Неопределено Тогда
		МассивРолей = Новый Массив;
		КонтекстДобавляемыхРолей.ЗаменяемыеРоли[ИмяРолиДляПоискаПрофиля] = МассивРолей;
	КонецЕсли;
	Если МассивРолей.Найти(ИмяРолиДляПоискаПрофиля) = Неопределено Тогда
		МассивРолей.Добавить(ИмяРолиДляПоискаПрофиля);
	КонецЕсли;
	Если МассивРолей.Найти(ИмяРолиДобавляемойВПрофиль) = Неопределено Тогда
		МассивРолей.Добавить(ИмяРолиДобавляемойВПрофиль);
	КонецЕсли;
КонецПроцедуры

// Находит пользовательские профили, в которых используется роль из колонки РольДляПоискаПрофиля
// и добавляет в них роль из колонки РольДобавляемаяВПрофиль. Предназначена для вызова из обработчика обновления.
//
// Параметры:
//   КонтекстДобавляемыхРолей - Структура - Контекст добавляемых ролей.
//       Создается при помощи функции КонтекстДобавляемыхРолей,
//       Наполняется при помощи процедуры ЗарегистрироватьДобавляемуюРоль.
//
Процедура ДобавитьРолиВНепоставляемыеПрофили(КонтекстДобавляемыхРолей) Экспорт
	УправлениеДоступом.ЗаменитьРолиВПрофилях(КонтекстДобавляемыхРолей.ЗаменяемыеРоли);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
