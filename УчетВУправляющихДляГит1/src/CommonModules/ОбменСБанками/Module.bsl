////////////////////////////////////////////////////////////////////////////////
// ОбменСБанками: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет, используется ли сервис 1C:ДиректБанк
// 
// Возвращаемое значение:
//  Булево - значение функциональной опции.
//
Функция ИспользуетсяСервисДиректБанк() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками");

КонецФункции

// Определяет, возможен ли прямой обмен с банком
//
// Параметры:
//  БИК - Строка - БИК банка
//  Проект - Число, Неопределено - Признак проекта, которые поддерживает банк.
//     * 1 - Платежные документы.
//     * 2 - Зарплатные документы.
//     * Неопределено - любой из проектов.
//  Рекомендуется - Булево - (возвращаемый параметр) - признак, что в банке поддержано автоматическое получение настроек обмена.
//
// Возвращаемое значение:
//  Булево - Если Истина, то возможен прямой обмен с банком, иначе Ложь.
//
Функция ВозможенПрямойОбменСБанком(БИК, Проект = Неопределено, Рекомендуется = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Ложь;
	
	Макет = ОбменСБанкамиСлужебныйПовтИсп.СписокБанков();
	
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	
	Для Индекс = 1 По КоличествоЗаписей Цикл
		БИКБанка = Макет.Область(Индекс, 2).Текст;
		Если БИК <> БИКБанка Тогда
			Продолжить;
		КонецЕсли;
		Рекомендуется = Макет.Область(Индекс, 6).Текст = "1";
		
		Если Проект = Неопределено Тогда
			ВозвращаемоеЗначение = Истина;
			Прервать;
		КонецЕсли;
		
		ПроектыВФайлеСтрокой = Макет.Область(Индекс, 8).Текст;
		Если ЗначениеЗаполнено(ПроектыВФайлеСтрокой) Тогда
			МассивПроектовВФайле = СтрРазделить(ПроектыВФайлеСтрокой, ",", Ложь);
			ВозвращаемоеЗначение = МассивПроектовВФайле.Найти(Строка(Проект)) <> Неопределено;
		Иначе
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		Прервать;
	КонецЦикла;

	Возврат ВозвращаемоеЗначение;

КонецФункции

// Получает выписку банка в виде дерева значений.
//
// Параметры:
//  ЭлектронныеДокументы - ДокументСсылка.СообщениеОбменСБанками, Массив - содержит выписку банка;
//  ДеревоДанных - ДеревоЗначений - содержит дерево данных выписки.
//
Процедура ПолучитьДанныеВыпискиБанкаДеревоЗначений(ЭлектронныеДокументы, ДеревоДанных) Экспорт
	
	МассивСообщенийОбмена = Новый Массив;
	
	Если ТипЗнч(ЭлектронныеДокументы) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		
		МассивСообщенийОбмена.Добавить(ЭлектронныеДокументы);
		
	Иначе // массив
		
		МассивСообщенийОбмена = ЭлектронныеДокументы;
		
	КонецЕсли;
	
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента("ОбменСБанками.ВыпискаБанка");
	
	ТаблицаВыписок = Новый ТаблицаЗначений;
	ТаблицаВыписок.Колонки.Добавить("ДатаФормирования");
	ТаблицаВыписок.Колонки.Добавить("НачалоПериода");
	ТаблицаВыписок.Колонки.Добавить("КонецПериода");
	ТаблицаВыписок.Колонки.Добавить("НомерСчета");
	ТаблицаВыписок.Колонки.Добавить("Организация");
	ТаблицаВыписок.Колонки.Добавить("Банк");
	ТаблицаВыписок.Колонки.Добавить("НачальныйОстаток");
	ТаблицаВыписок.Колонки.Добавить("ОборотВходящихПлатежей");
	ТаблицаВыписок.Колонки.Добавить("ОборотИсходящихПлатежей");
	ТаблицаВыписок.Колонки.Добавить("КонечныйОстаток");
	ТаблицаВыписок.Колонки.Добавить("Операции");
	ТаблицаВыписок.Колонки.Добавить("Штамп");

	Для Каждого СообщениеОбмена Из МассивСообщенийОбмена Цикл
		
		Попытка

			ДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
			
			Если Не ЗначениеЗаполнено(ДанныеЭД) Тогда
				Возврат;
			КонецЕсли;
				
			ОбъектXML = Новый ЧтениеXML;
			Ошибка = Ложь;
			НеизвестныйЭД = Ложь;
		
			ЧтениеДанных = Новый ЧтениеДанных(ДанныеЭД);

			ПотокВПамяти = ЧтениеДанных.ИсходныйПоток();
			ОбъектXML.ОткрытьПоток(ПотокВПамяти);
			
		
			Если ОбъектXML.Прочитать() Тогда
				ИмяКорневогоЭлемента = ВРег(ОбъектXML.Имя);
			КонецЕсли;
		
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
			Если ВРег(ЭД.Тип().Имя) = ВРег("anyType") Тогда // не указан тип элемента в явном виде
				ПотокВПамяти.Перейти(0, ПозицияВПотоке.Начало);
				ОбъектXML.ОткрытьПоток(ПотокВПамяти);
				Если ЭД.Свойства().Получить("СекцияРасчСчет") <> Неопределено Тогда
					ClientBankExchange = ОбменСБанкамиСлужебный.ТипЗначенияCML(
						ФабрикаXDTO, "urn:1C.ru:ClientBankExchange", "ClientBankExchange");
					ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ClientBankExchange);
					ПрочитатьВыпискуClientBankExchange(ЭД, ТаблицаВыписок);
				ИначеЕсли ЭД.Свойства().Получить("stmtDateTime") <> Неопределено Тогда
					ПрочитатьВыпискуСбербанк(ЭД, ТаблицаВыписок);
				ИначеЕсли ЭД.Свойства().Получить("BkToCstmrStmt") <> Неопределено Тогда
					ПрочитатьВыпискуISO(ЭД, ТаблицаВыписок);
				Иначе // читаем файл по типу, имя которого совпадает с типом объекта XDTO
					Если ЭД.Свойства().Получить("formatVersion") = Неопределено Тогда
						НеизвестныйЭД = Истина;
					Иначе
						ПространствоИменАсинхрОбмена = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ЭД.formatVersion);
						Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ЭД.formatVersion);
						Если Фабрика = Неопределено Тогда
							НеизвестныйЭД = Истина;
						ИначеЕсли ИмяКорневогоЭлемента = ВРег("Statement") Тогда // выписка
							// "Мягкое" чтение выписки банка.
							ПрочитатьВыписку1CBankExch(ЭД, ТаблицаВыписок);
						Иначе
							НеизвестныйЭД = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе // тип указан в явном виде
				Если ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, "urn:1C.ru:ClientBankExchange", "ClientBankExchange") Тогда
					ПрочитатьВыпискуClientBankExchange(ЭД, ТаблицаВыписок);
				Иначе
					НеизвестныйЭД = Истина;
				КонецЕсли;
			КонецЕсли;
		Исключение
			Операция = НСтр("ru = 'Чтение данных электронного документа'");
			ВремФайл = ПолучитьИмяВременногоФайла("xml");
			ШаблонОшибки = НСтр("ru = '%1
								|Файл документа: %2'");
			ДанныеЭД.Записать(ВремФайл);
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ВремФайл);
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ТекстОшибки, ТекстСообщения, "ОбменСБанками", СообщениеОбмена);
			ТаблицаВыписок.Очистить();
		КонецПопытки;
		
		Если НеизвестныйЭД Тогда
			ВидОперации = Нстр("ru = 'Чтение данных выписки банка.'");
			ТекстСообщения = НСтр("ru = 'При чтении данных электронного документа произошла ошибка.'");
			ТекстОшибки = НСтр("ru = 'Электронный документ содержит неизвестный тип данных.
								|Сообщение обмена: %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СообщениеОбмена);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками", СообщениеОбмена);
		КонецЕсли;

	КонецЦикла;
	
	Если ТаблицаВыписок.Количество() Тогда
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаВыписок, "Выписки");
	КонецЕсли;
	
КонецПроцедуры

// Получает выписку банка в текстовом формате, а также массив ссылок на банковские счета организаций в выписке.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками, Массив - содержит ссылку или массив ссылок на выписки банка;
//  СсылкаНаХранилище - Строка - содержит ссылку на хранилище тестовых данных;
//  МассивСчетов - Массив - содержит ссылки на банковские счета организации.
//
Процедура ПолучитьДанныеВыпискиБанкаТекстовыйФормат(Знач СообщениеОбмена, СсылкаНаХранилище, МассивСчетов = Неопределено) Экспорт

	Если ТипЗнч(СообщениеОбмена) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		МассивСообщений = Новый Массив;
		МассивСообщений.Добавить(СообщениеОбмена);
	Иначе
		МассивСообщений = СообщениеОбмена;
	КонецЕсли;
	
	МассивСчетов = Новый Массив;
	МассивДанных = Новый Массив;
	
	Для Каждого ВыпискаБанка Из МассивСообщений Цикл
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыпискаБанка, "Организация");

		ДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(ВыпискаБанка);
		
		Если ДанныеЭД = Неопределено Тогда
			Продолжить; // нет присоединенного файла
		КонецЕсли;

		СтруктураДанных = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(
			Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка, ДанныеЭД);
		
		Если СтруктураДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		ДеревоРазбора = СтруктураДанных.ДеревоРазбора;
		СтрокаОбъекта = СтруктураДанных.СтрокаОбъекта;
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ДеревоРазбора", ДеревоРазбора);
		СтруктураДанных.Вставить("СтрокаОбъекта", СтрокаОбъекта);
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Если НЕ МассивДанных.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Поток = Новый ПотокВПамяти;
	Текст = Новый ЗаписьДанных(Поток, "windows-1251");

	Текст.ЗаписатьСтроку("1CClientBankExchange");
	Текст.ЗаписатьСтроку("ВерсияФормата=1.02");
	Текст.ЗаписатьСтроку("Кодировка=Windows");
	ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаОбъекта, Текст, "Отправитель");
	ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаОбъекта, Текст, "Получатель");
		
	ДатаСоздания = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаСоздания");
	Если ЗначениеЗаполнено(ДатаСоздания) Тогда
		Текст.ЗаписатьСтроку("ДатаСоздания=" + Формат(ДатаСоздания, ОбменСБанкамиСлужебный.ФорматДатыРоссия()));
	КонецЕсли;
	ВремяСоздания = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВремяСоздания");
	Если ЗначениеЗаполнено(ВремяСоздания) Тогда
		Текст.ЗаписатьСтроку("ВремяСоздания=" + Формат(ВремяСоздания, ФорматВремениРоссия()));
	КонецЕсли;
	
	ДатаНачала = ЗначениеРеквизитаСтрокиДереваРазбора(
		МассивДанных[0].ДеревоРазбора, МассивДанных[0].СтрокаОбъекта, "ДатаНачала");
	ДатаКонца = ЗначениеРеквизитаСтрокиДереваРазбора(
		МассивДанных[МассивДанных.Количество()-1].ДеревоРазбора,
		МассивДанных[МассивДанных.Количество()-1].СтрокаОбъекта, "ДатаКонца");
	Текст.ЗаписатьСтроку("ДатаНачала=" + Формат(ДатаНачала, ОбменСБанкамиСлужебный.ФорматДатыРоссия()));
	Текст.ЗаписатьСтроку("ДатаКонца=" + Формат(ДатаКонца,  ОбменСБанкамиСлужебный.ФорматДатыРоссия()));

	СтруктураОтбора = Новый Структура("Реквизит", "БанковскиеСчетаОрганизаций");
	БанковскиеСчетаОрганизаций = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
		НомерСчета = ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.РасчСчет");
		Текст.ЗаписатьСтроку("РасчСчет=" + НомерСчета);
	КонецЦикла;
	
	Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
		
		Текст.ЗаписатьСтроку("СекцияРасчСчет");
		Текст.ЗаписатьСтроку("ДатаНачала=" + Формат(ДатаНачала, ОбменСБанкамиСлужебный.ФорматДатыРоссия()));
		Текст.ЗаписатьСтроку("ДатаКонца="  + Формат(ДатаКонца, ОбменСБанкамиСлужебный.ФорматДатыРоссия()));
		НомерСчета = ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.РасчСчет");
		ДополнительныеРеквизиты = Новый Структура("Владелец", Организация);
		СчетОрганизации = ЭлектронноеВзаимодействие.НайтиСсылку(
			"БанковскиеСчетаОрганизаций", НомерСчета, ДополнительныеРеквизиты);
		МассивСчетов.Добавить(СчетОрганизации);
		
		Текст.ЗаписатьСтроку("РасчСчет=" + НомерСчета);
				
		НачальныйОстаток = ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.НачальныйОстаток");
		Если ЗначениеЗаполнено(НачальныйОстаток) Тогда
			Текст.ЗаписатьСтроку("НачальныйОстаток=" + Формат(НачальныйОстаток, "ЧРД=.; ЧГ="));
		КонецЕсли;
		
		ВсегоПоступило = 0;
		ВсегоСписано = 0;
		
		Для Каждого СтруктураДанных Из МассивДанных Цикл
			СтруктураОтбора = Новый Структура("Реквизит", "БанковскиеСчетаОрганизаций");
			БанковскиеСчетаОрганизаций = СтруктураДанных.СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
			СтрокаБанковскийСчет = БанковскиеСчетаОрганизаций[0];
			ТекВсегоПоступило = ЗначениеРеквизитаСтрокиДереваРазбора(
				СтруктураДанных.ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.ВсегоПоступило");
			Если ЗначениеЗаполнено(ТекВсегоПоступило) Тогда
				ВсегоПоступило = ВсегоПоступило + ТекВсегоПоступило;
			КонецЕсли;
			ТекВсегоСписано = ЗначениеРеквизитаСтрокиДереваРазбора(
				СтруктураДанных.ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.ВсегоСписано");
			Если ЗначениеЗаполнено(ТекВсегоСписано) Тогда
				ВсегоСписано = ВсегоСписано + ТекВсегоСписано;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВсегоПоступило) Тогда
			Текст.ЗаписатьСтроку("ВсегоПоступило=" + Формат(ВсегоПоступило, "ЧРД=.; ЧГ="));
		КонецЕсли;
		Если ЗначениеЗаполнено(ВсегоСписано) Тогда
			Текст.ЗаписатьСтроку("ВсегоСписано=" + Формат(ВсегоСписано, "ЧРД=.; ЧГ="));
		КонецЕсли;
		
		КонечныйОстаток = ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.КонечныйОстаток");
		Если ЗначениеЗаполнено(КонечныйОстаток) Тогда
			Текст.ЗаписатьСтроку("КонечныйОстаток=" + Формат(КонечныйОстаток, "ЧРД=.; ЧГ="));
		КонецЕсли;

		Текст.ЗаписатьСтроку("КонецРасчСчет");
		
	КонецЦикла;
			
	Для Каждого СтруктураДанных Из МассивДанных Цикл

		СтрокаОбъекта = СтруктураДанных.СтрокаОбъекта;
		ДеревоРазбора = СтруктураДанных.ДеревоРазбора;
		
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			СекцияДокумент = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СекцияДокумент");
			Текст.ЗаписатьСтроку("СекцияДокумент=" + СекцияДокумент);
			Номер = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Номер");
			Текст.ЗаписатьСтроку("Номер=" + Номер);
			Дата = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Дата");
			Текст.ЗаписатьСтроку("Дата=" + Формат(Дата, ОбменСБанкамиСлужебный.ФорматДатыРоссия()));
			Сумма = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Сумма");
			Текст.ЗаписатьСтроку("Сумма=" + Формат(Сумма, "ЧРД=.; ЧГ="));
			КвитанцияДата = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "КвитанцияДата");
			Если ЗначениеЗаполнено(КвитанцияДата) Тогда
				Текст.ЗаписатьСтроку("КвитанцияДата=" + Формат(КвитанцияДата, ОбменСБанкамиСлужебный.ФорматДатыРоссия()));
			КонецЕсли;
			КвитанцияВремя = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "КвитанцияВремя");
			Если ЗначениеЗаполнено(КвитанцияВремя) Тогда
				Текст.ЗаписатьСтроку("КвитанцияВремя=" + Формат(КвитанцияВремя, ФорматВремениРоссия()));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "КвитанцияСодержание");
			
			ПлательщикСчет = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикСчет");
			Текст.ЗаписатьСтроку("ПлательщикСчет=" + ПлательщикСчет);
			ДатаСписано = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаСписано");
			Если ЗначениеЗаполнено(ДатаСписано) Тогда
				Текст.ЗаписатьСтроку("ДатаСписано=" + Формат(ДатаСписано, ОбменСБанкамиСлужебный.ФорматДатыРоссия()));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик", "ПлательщикНаименование");
			ПлательщикИНН = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикИНН");
			Текст.ЗаписатьСтроку("ПлательщикИНН=" + ПлательщикИНН);
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикКПП");
			
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикРасчСчет", "ПлательщикСчет");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБанк1", "ПлательщикНаименованиеБанка");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБанк2", "ПлательщикГородБанка");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБИК", "ПлательщикБИКБанка");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикКорсчет", "ПлательщикКоррСчетБанка");
			ПолучательСчет = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательСчет");
			Текст.ЗаписатьСтроку("ПолучательСчет=" + ПолучательСчет);
			ДатаПоступило = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаПоступило");
			Если ЗначениеЗаполнено(ДатаПоступило) Тогда
				Текст.ЗаписатьСтроку("ДатаПоступило=" + Формат(ДатаПоступило, ОбменСБанкамиСлужебный.ФорматДатыРоссия()));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель", "ПолучательНаименование");
			ПолучательИНН = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательИНН");
			Текст.ЗаписатьСтроку("ПолучательИНН=" + ПолучательИНН);
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательКПП");
			
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательРасчСчет", "ПолучательСчет");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБанк1", "ПолучательНаименованиеБанка");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБанк2", "ПолучательГородБанка");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБИК", "ПолучательБИКБанка");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательКорсчет", "ПолучательКоррСчетБанка");
			
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидПлатежа");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидОплаты");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Код");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа3");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа4");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа5");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа6");
				
			ЭтоПлатежВБюджет = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ЭтоПлатежВБюджет");
			Если ЭтоПлатежВБюджет = Истина Тогда
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "СтатусСоставителя");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательКБК");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ОКАТО", "ОКТМО");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательОснования");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательПериода");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательНомера");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательДаты");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательТипа", "КодВыплат");
			КонецЕсли;
				
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Очередность");
			СрокАкцепта = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СрокАкцепта");
			Если ЗначениеЗаполнено(СрокАкцепта) Тогда
				Текст.ЗаписатьСтроку("СрокАкцепта=" + Формат(СрокАкцепта,"ЧДЦ=0; ЧГ="));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидАккредитива");
			СрокПлатежа = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СрокПлатежа");
			Если ЗначениеЗаполнено(СрокПлатежа) Тогда
				Текст.ЗаписатьСтроку("СрокПлатежа=" + Формат(СрокПлатежа, ОбменСБанкамиСлужебный.ФорматДатыРоссия()));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "УсловиеОплаты1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "УсловиеОплаты2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "УсловиеОплаты3");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлатежПоПредст");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ДополнУсловия");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НомерСчетаПоставщика");
			ДатаОтсылкиДок = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаОтсылкиДок");
			Если ЗначениеЗаполнено(ДатаОтсылкиДок) Тогда
				ДатаОтсылкиДок = Формат(ДатаОтсылкиДок, ОбменСБанкамиСлужебный.ФорматДатыРоссия());
				Текст.ЗаписатьСтроку("ДатаОтсылкиДок=" + ДатаОтсылкиДок);
			КонецЕсли;
			Текст.ЗаписатьСтроку("КонецДокумента");
		КонецЦикла;
	КонецЦикла;
	
	Текст.ЗаписатьСтроку("КонецФайла");
	Текст.Закрыть();
	
	ДанныеФайла = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор());
	
КонецПроцедуры

// Устанавливает условное оформление для динамического списка платежных документов
//
// Параметры:
//  Список - ДинамическийСписок - список платежных документов
//  НазваниеКолонки - Строка - название колонки, в котором отображается состояние электронного документа.
//
Процедура УстановитьУсловноеОформление(Список, НазваниеКолонки) Экспорт
	
	// Отображение расширенного статуса ЭД
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НазваниеКолонки);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредставлениеСостояния");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ПредставлениеСостояния"));

	// Раскрашивание гиперссылки
	// Синий
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НазваниеКолонки);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НазваниеКолонки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокОтбора = Новый Массив;
	СписокОтбора.Добавить(Перечисления.СостоянияОбменСБанками.НеСформирован);
	СписокОтбора.Добавить(Перечисления.СостоянияОбменСБанками.НаПодписи);
	СписокОтбора.Добавить(Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка);
	СписокОтбора.Добавить(Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение);
	ОтборЭлемента.ПравоеЗначение = СписокОтбора;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Метаданные.ЭлементыСтиля.ЦветГиперссылкиБЭД.Значение);

	// Красный
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НазваниеКолонки);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НазваниеКолонки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокОтбора = Новый Массив;
	СписокОтбора.Добавить(Перечисления.СостоянияОбменСБанками.Аннулирован);
	СписокОтбора.Добавить(Перечисления.СостоянияОбменСБанками.Отклонен);
	СписокОтбора.Добавить(Перечисления.СостоянияОбменСБанками.ОшибкаПередачи);
	ОтборЭлемента.ПравоеЗначение = СписокОтбора;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Метаданные.ЭлементыСтиля.ПоясняющийОшибкуТекст.Значение);
	
	// Зеленый
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НазваниеКолонки);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НазваниеКолонки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияОбменСБанками.ПлатежИсполнен;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Метаданные.ЭлементыСтиля.РезультатУспехЦвет.Значение);
	
КонецПроцедуры

// См. процедуру ЭлектроннаяПодписьПереопределяемый.ПриСозданииФормыПроверкаСертификата.
//
Процедура ПриСозданииФормыПроверкаСертификата(Сертификат, ДополнительныеПроверки, ПараметрыДополнительныхПроверок, СтандартныеПроверки, ВводитьПароль = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОСертификатахОбменСБанками.ПрограммаБанка
	|ИЗ
	|	РегистрСведений.СведенияОСертификатахОбменСБанками КАК СведенияОСертификатахОбменСБанками
	|ГДЕ
	|	СведенияОСертификатахОбменСБанками.СертификатЭП = &СертификатЭП";
	Запрос.УстановитьПараметр("СертификатЭП", Сертификат);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если НЕ Результат.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		СтандартныеПроверки = Ложь;
		ВводитьПароль = Ложь;
		НовСтрока = ДополнительныеПроверки.Добавить();
		НовСтрока.Имя = "УстановкаПодписиСбербанк";
		НовСтрока.Представление = НСтр("ru = 'Подписание данных'");
		НовСтрока.Подсказка = НСтр("ru = 'Показывает возможность подписания данных закрытым
										|ключом сертификата с помощью банковского ключа.
										|Требуется PIN.'");
		НовСтрока = ДополнительныеПроверки.Добавить();
		НовСтрока.Имя = "ПроверкаПодписиСбербанк";
		НовСтрока.Представление = НСтр("ru = 'Проверка созданной подписи'");
		НовСтрока.Подсказка = НСтр("ru = 'Показывает возможность проверки имеющейся подписи открытым ключом сертификата
										|с помощью банковского ключа.'");
	ИначеЕсли Результат.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
		СтандартныеПроверки = Ложь;
		НовСтрока = ДополнительныеПроверки.Добавить();
		НовСтрока.Имя = "УстановкаПодписиЧерезВК";
		НовСтрока.Представление = НСтр("ru = 'Подписание данных'");
		НовСтрока.Подсказка = НСтр("ru = 'Показывает возможность подписания данных закрытым
										|ключом сертификата с помощью аппаратного ключа.'");
		НовСтрока = ДополнительныеПроверки.Добавить();
		НовСтрока.Имя = "ПроверкаПодписиЧерезВК";
		НовСтрока.Представление = НСтр("ru = 'Проверка созданной подписи'");
		НовСтрока.Подсказка = НСтр("ru = 'Показывает возможность проверки имеющейся подписи открытым ключом сертификата
										|с помощью аппаратного ключа.'");
	
	КонецЕсли;
	
КонецПроцедуры

// Формирует табличный документ на основании данных электронного документа
//
// Параметры:
//    СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена с банком.
//
// Возвращаемое значение:
//    ТабличныйДокумент, Неопределено - сформированная форма просмотра электронного документа или Неопределено.
//
Функция ФормаПросмотраЭД(СообщениеОбмена) Экспорт
	
	Возврат Документы.СообщениеОбменСБанками.ФайлДанныхЭД(СообщениеОбмена);
	
КонецФункции

// Определяет готовые к отправке платежные документы
//
// Параметры:
//  МассивДокументов - Массив - исходный массив документов, которые предполагается отправить в банк.
//      * ДокументСсылка - ссылка на платежный документ в информационной базе.
// 
// Возвращаемое значение:
//   Массив - массив документов, которые можно отправить в банк.
//      * ДокументСсылка - ссылка на платежный документ в информационной базе.
//
Функция ГотовыеКОтправкеДокументы(МассивДокументов) Экспорт

	ОписаниеТипов = Метаданные.РегистрыСведений.СостоянияОбменСБанками.Измерения.СсылкаНаОбъект.Тип;

	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("СсылкаНаДокумент", ОписаниеТипов);
	Для Каждого ЭлементМассива Из МассивДокументов Цикл
		ТаблицаДокументов.Добавить().СсылкаНаДокумент = ЭлементМассива;
	КонецЦикла;
	
	СостоянияГотовыхКОтправкеДокументов = Новый Массив;
	СостоянияГотовыхКОтправкеДокументов.Добавить(Перечисления.СостоянияОбменСБанками.НеСформирован);
	СостоянияГотовыхКОтправкеДокументов.Добавить(Перечисления.СостоянияОбменСБанками.НаПодписи);
	СостоянияГотовыхКОтправкеДокументов.Добавить(Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка);
	СостоянияГотовыхКОтправкеДокументов.Добавить(Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.УстановитьПараметр("СостоянияГотовыхКОтправкеДокументов", СостоянияГотовыхКОтправкеДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.СсылкаНаДокумент КАК СсылкаНаДокумент
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументы.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	СостоянияОбменСБанками.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТСостоянияОбменов
	|ИЗ
	|	ВТДокументы КАК ВТДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	|		ПО ВТДокументы.СсылкаНаДокумент = СостоянияОбменСБанками.СсылкаНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСостоянияОбменов.СсылкаНаДокумент КАК СсылкаНаДокумент
	|ИЗ
	|	ВТСостоянияОбменов КАК ВТСостоянияОбменов
	|ГДЕ
	|	ВТСостоянияОбменов.Состояние В (&СостоянияГотовыхКОтправкеДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТСостоянияОбменов.СсылкаНаДокумент
	|ИЗ
	|	ВТСостоянияОбменов КАК ВТСостоянияОбменов
	|ГДЕ
	|	ВТСостоянияОбменов.Состояние ЕСТЬ NULL";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНаДокумент");
	
КонецФункции

// Производит поиск настройки обмена с банком. Возвращает первую найденную настройку обмена.
//
// Параметры:
//   Организация - ОпределяемыйТип.Организация - организация, указанная в настройке;
//   Банк - ОпределяемыйТип.БанкОбменСБанками - банк, указанный в настройке;
//   ТолькоДействительная - Булево - Истина - поиск только действующей настройки, Ложь - поиск любой настройки.
//
// Возвращаемое значение:
//   СправочникСсылка.НастройкиОбменСБанками или Неопределено - найденная настройка обмена с банком.
//
Функция НастройкаОбмена(Организация, Банк = Неопределено, ТолькоДействительная = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	НастройкиОбменСБанками.Ссылка
	               |ИЗ
	               |	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	               |ГДЕ
	               |	НастройкиОбменСБанками.Организация = &Организация
	               |	И &УсловиеПоБанку
	               |	И НЕ НастройкиОбменСБанками.Недействительна
	               |	И НЕ НастройкиОбменСБанками.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	НастройкиОбменСБанками.Ссылка
	               |ИЗ
	               |	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	               |ГДЕ
	               |	НастройкиОбменСБанками.Организация = &Организация
	               |	И &УсловиеПоБанку";
	
	Если ЗначениеЗаполнено(Банк) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоБанку", "НастройкиОбменСБанками.Банк = &Банк");
		Запрос.УстановитьПараметр("Банк", Банк);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоБанку", "Истина");
	КонецЕсли;

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат = МассивРезультатов[0].Выбрать();

	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
	Если НЕ ТолькоДействительная Тогда
		Результат = МассивРезультатов[1].Выбрать();
		Если Результат.Следующий() Тогда
			Возврат Результат.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает текущие статусы документов.
//
// Параметры:
//  МассивОбъектов - Массив - документы, для которых требуется получить статусы
//    * ДокументСсылка - ссылка на документ информационной базы
//  МассивСтатусов - Массив - статусы документов из первого параметра
//    * ПеречислениеСсылка.СтатусыОбменСБанками - текущий статус электронного документа,
//    * Неопределено - нет актуального электронного документа для документа информационной базы.
//
Процедура ПолучитьСтатусыДокументов(МассивОбъектов, МассивСтатусов) Экспорт
	
	ОписаниеТипов = Метаданные.РегистрыСведений.СостоянияОбменСБанками.Измерения.СсылкаНаОбъект.Тип;

	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ", ОписаниеТипов);
	Для Каждого ЭлементМассива Из МассивОбъектов Цикл
		ТаблицаДокументов.Добавить().Документ = ЭлементМассива;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СсылкиНаДокументы.Документ
	               |ПОМЕСТИТЬ Документы
	               |ИЗ
	               |	&СсылкиНаДокументы КАК СсылкиНаДокументы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Документы.Документ,
	               |	СостоянияОбменСБанками.СообщениеОбмена.Статус КАК Статус
	               |ИЗ
	               |	Документы КАК Документы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	               |		ПО Документы.Документ = СостоянияОбменСБанками.СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкиНаДокументы", ТаблицаДокументов);
	МассивСтатусов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Статус");
	
КонецПроцедуры

// Формирование текстового представления рекламы 1С:ДиректБанк.
//
// Параметры:
//  ДополнительнаяИнформация - Структура - с полями:
//   * Картинка - Картинка - картинка из библиотеки картинок;
//   * Текст - Строка - форматированный текст надписи с навигационными ссылками.
//  МассивСсылок - Массив - список ссылок на объекты.
Процедура ПриВыводеНавигационнойСсылкиВФормеОбъектаИБ(ДополнительнаяИнформация, МассивСсылок) Экспорт
	
	ДанныеБанковскогоСчета = ОбменСБанкамиСлужебныйВызовСервера.ПолучитьДанныеБанковскогоСчетаИзДокумента(МассивСсылок[0]);
	
	Если ДанныеБанковскогоСчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Организация, Банк");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ДанныеБанковскогоСчета);
	
	БанкиДляОбмена = ОбменСБанкамиСлужебный.БанкиДляНастройкиОбменаЧерезДиректБанк(ПараметрыОтбора);
	
	Если НЕ ЗначениеЗаполнено(БанкиДляОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНавигационнойСсылки = НСтр("ru = 'В банк %1 можно отправлять платежные документы в электронном виде'");
	ТекстНавигационнойСсылки = СтрШаблон(ТекстНавигационнойСсылки, Строка(БанкиДляОбмена[0].Банк)); 
	
	ШаблонНавигационнойСсылки = НСтр("ru = '<a href = ""Реклама1СДиректБанк"">%1</a>'");
	ДополнительнаяИнформация.Текст    = СтрШаблон(ШаблонНавигационнойСсылки, ТекстНавигационнойСсылки);
	ДополнительнаяИнформация.Картинка = БиблиотекаКартинок.DirectBank16;
	
КонецПроцедуры

// Проверяет возможность выполнения обмена с банком для текущего пользователя
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права на выполнение обмена с банком.
//
Функция ПравоВыполненияОбмена(ВыводитьСообщение = Ложь) Экспорт
	
	Возврат ОбменСБанкамиСлужебныйВызовСервера.ПравоВыполненияОбмена(ВыводитьСообщение);
	
КонецФункции

// Проверяет возможность чтения данных обмена с банком для текущего пользователя
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права на чтение данных обмена с банком.
//
Функция ПравоЧтенияДанных(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Чтение", Метаданные.Документы.ПакетОбменСБанками);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

// Проверяет возможность настройки обмена с банком для текущего пользователя
//
// Возвращаемое значение:
//  Булево - наличие права на настройку обмена с банком.
//
Функция ПравоНастройки() Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиОбменСБанками);
	
КонецФункции

// Проверяет возможность чтения настроек обмена с банками для текущего пользователя
//
// Возвращаемое значение:
//  Булево - наличие права на чтение настроек обмена с банком.
//
Функция ПравоЧтенияНастроек() Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ПравоДоступа("Чтение", Метаданные.Справочники.НастройкиОбменСБанками);
	
КонецФункции

#Область ПоставляемыеДанные

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению,
// и если да - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор - ОбъектXDTO - Descriptor.
//   Загружать  - Булево - возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	// Загрузка списка банков.
	Если Дескриптор.DataType = "DirectBankList" Тогда
		
		ДанныеВнешнихФайлов = Константы.ОбщиеФайлыОбменСБанками.Получить().Получить();
	
		Если ДанныеВнешнихФайлов = Неопределено ИЛИ НЕ ДанныеВнешнихФайлов.Свойство("СписокБанков") Тогда
			Загружать = Истина;
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанныеВБазе = ДанныеВнешнихФайлов.СписокБанков;
		РасчетХеш = Новый ХешированиеДанных(ХешФункция.CRC32);
		РасчетХеш.Добавить(ДвоичныеДанныеВБазе);
		Если Формат(РасчетХеш.ХешСумма, "ЧГ=") <> Дескриптор.Properties.Property.Получить(0).Value Тогда
			Загружать = Истина;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор - ОбъектXDTO - Дескриптор.
//   ПутьКФайлу - Строка - Полное имя извлеченного файла. Файл будет автоматически удален
//                  после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType = "DirectBankList" Тогда
		
		Данные = Новый ДвоичныеДанные(ПутьКФайлу);
		
		ДанныеВнешнихФайлов = Константы.ОбщиеФайлыОбменСБанками.Получить().Получить();
	
		Если ДанныеВнешнихФайлов = Неопределено Тогда
			ДанныеВнешнихФайлов = Новый Структура;
		КонецЕсли;

		ДанныеВнешнихФайлов.Вставить("СписокБанков", Данные);
	
		ХранилищеДанных = Новый ХранилищеЗначения(ДанныеВнешнихФайлов);
	
		Константы.ОбщиеФайлыОбменСБанками.Установить(ХранилищеДанных);
	
		ОбновитьПовторноИспользуемыеЗначения();
	
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя.
//
// Параметры:
//   Дескриптор - ОбъектXDTO - Descriptor.
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ДляБП3

// Получает сводное состояние банковского документа в виде строки.
//
// Параметры:
//  СостояниеЭД - ПеречислениеСсылка.СостоянияОбменСБанками - текущее состояние электронного документооборота.
// 
// Возвращаемое значение:
//  Строка - сводное упрощенное состояние.
//
Функция СостояниеБанковскогоДокументаСтрокой(СостояниеЭД) Экспорт
	
	Если СостояниеЭД = Перечисления.СостоянияОбменСБанками.НеСформирован
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка Тогда
		
		Возврат "Подготовлено";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.НаПодписи Тогда
		
		Возврат "НаПодписи";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.Отклонен
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.Аннулирован
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОшибкаПередачи Тогда
		
		Возврат "Отклонено";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяВыписка
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяИсполнение Тогда
		
		Возврат "Отправлено";
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение Тогда
		
		Возврат "ТребуетсяПодтверждение";
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Подсистема ОбменСБанками стала самодостаточной
//
// Параметры:
//  Параметры - Структура - см. описание создания процедур обработчиков обновления.
//
Процедура ПеренестиДанныеОбменаСБанками(Параметры) Экспорт
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
	Если Не ЕстьОбменСКонтрагентами Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьСоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
	|ГДЕ
	|	УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.УдалитьЧерезВебРесурсБанка)
	|	И НЕ УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьСоглашенияОбИспользованииЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
	|ГДЕ
	|	УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.УдалитьЧерезВебРесурсБанка)
	|	И УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьСоглашенияОбИспользованииЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
	|ГДЕ
	|	УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.УдалитьЧерезВебРесурсБанка)";
	
	ПакетСоглашения = Запрос.ВыполнитьПакет();
	
	ВыборкаСоглашенийЭДКОбработке = ПакетСоглашения[0].Выбрать();
	ВыборкаОбработанныхСоглашенийЭД = ПакетСоглашения[1].Выбрать();
	ВсегоСоглашенийЭД = ПакетСоглашения[2].Выбрать();
	
	Параметры.ПрогрессВыполнения.ВсегоОбъектов = ВсегоСоглашенийЭД.Количество();
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = ВыборкаОбработанныхСоглашенийЭД.Количество();
	
	СоответствиеВидовЭД = СоответствиеВидовЭД();
	СоответствиеСостояний = СоответствиеСостояний();
	СоответствиеСтатусов = СоответствиеСтатусов();
	
	Если НЕ ВыборкаСоглашенийЭДКОбработке.Следующий() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
		
	Параметры.ОбработкаЗавершена = Ложь;
	
	ЗапросПоСоглашениям = Новый Запрос;
	ЗапросПоСоглашениям.Текст =
	"ВЫБРАТЬ
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьАдресСервера КАК АдресСервера,
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьАутентификацияПоСертификату КАК АутентификацияПоСертификату,
	|	УдалитьСоглашенияОбИспользованииЭД.Контрагент КАК Банк,
	|	УдалитьСоглашенияОбИспользованииЭД.Организация,
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьВнешняяКомпонента КАК ВнешняяКомпонента,
	|	НЕ УдалитьСоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует) КАК Недействительна,
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьДополнительнаяОбработка КАК ДополнительнаяОбработка,
	|	УдалитьСоглашенияОбИспользованииЭД.ИдентификаторОрганизации,
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьПользователь КАК ИмяПользователя,
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьИспользуетсяКриптография КАК ИспользуетсяКриптография,
	|	УдалитьСоглашенияОбИспользованииЭД.Комментарий,
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьПрограммаБанка КАК ПрограммаБанка,
	|	УдалитьСоглашенияОбИспользованииЭД.РесурсВходящихДокументов,
	|	УдалитьСоглашенияОбИспользованииЭД.РесурсИсходящихДокументов,
	|	УдалитьСоглашенияОбИспользованииЭД.СертификатКонтрагентаДляШифрования,
	|	УдалитьСоглашенияОбИспользованииЭД.УдалитьСжиматьДанныеПакетаЭД КАК СжиматьДанныеПакетаЭД,
	|	УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления,
	|	УдалитьСоглашенияОбИспользованииЭД.Наименование
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
	|ГДЕ
	|	УдалитьСоглашенияОбИспользованииЭД.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат КАК СертификатЭП
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &Ссылка";
	
	ЗапросПоСоглашениям.УстановитьПараметр("Ссылка", ВыборкаСоглашенийЭДКОбработке.Ссылка);
	
	ВыборкаПакетов = ЗапросПоСоглашениям.ВыполнитьПакет();
	ВыборкаПараметровСоглашенияЭД = ВыборкаПакетов[0].Выбрать();
	ВыборкаПараметровСоглашенияЭД.Следующий();
	
	НачатьТранзакцию();
	Попытка
			
		#Область СозданиеНастройкиОбмена
		
		НастройкаОбменаОбъект = Справочники.НастройкиОбменСБанками.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НастройкаОбменаОбъект, ВыборкаПараметровСоглашенияЭД);
		ДанныеВнешнейКомпоненты = ВыборкаПараметровСоглашенияЭД.ВнешняяКомпонента.Получить();
		НастройкаОбменаОбъект.УдалитьВнешняяКомпонента = Новый ХранилищеЗначения(ДанныеВнешнейКомпоненты);
		ДанныеСертификатаБанка = ВыборкаПараметровСоглашенияЭД.СертификатКонтрагентаДляШифрования.Получить();
		НастройкаОбменаОбъект.СертификатБанка = Новый ХранилищеЗначения(ДанныеСертификатаБанка);
		
		ВыборкаИсходящихДокументов = ВыборкаПакетов[1].Выбрать();
		Пока ВыборкаИсходящихДокументов.Следующий() Цикл
			
			НовСтрока = НастройкаОбменаОбъект.ИсходящиеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаИсходящихДокументов, "ИспользоватьЭП, Формировать");
			НовСтрока.ИсходящийДокумент = СоответствиеВидовЭД.Получить(ВыборкаИсходящихДокументов.ИсходящийДокумент);
			Если НовСтрока.ИспользоватьЭП Тогда
				НовСтрока.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
			КонецЕсли;
			
		КонецЦикла;
		
		ВыборкаСертификатов = ВыборкаПакетов[2].Выбрать();
		Пока ВыборкаСертификатов.Следующий() Цикл
			
			НовСтрока = НастройкаОбменаОбъект.СертификатыПодписейОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаСертификатов);
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаОбменаОбъект);
		
		НастройкаОбмена = НастройкаОбменаОбъект.Ссылка;
		
		СоглашениеЭДОбъект = ВыборкаСоглашенийЭДКОбработке.Ссылка.ПолучитьОбъект();
		СоглашениеЭДОбъект.ПометкаУдаления = Истина;
		СоглашениеЭДОбъект.Комментарий = НСтр("ru = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'");
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СоглашениеЭДОбъект);
		
		#КонецОбласти
		
		#Область ПереносПрисоединенныхФайлов
		
		ЗапросЭДПрисоединенныеФайлы = Новый Запрос;
		ЗапросЭДПрисоединенныеФайлы.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка,
		|	ЭДПрисоединенныеФайлы.Наименование,
		|	ЭДПрисоединенныеФайлы.УдалитьВидЭД КАК ВидЭД,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла,
		|	ЭДПрисоединенныеФайлы.Автор,
		|	ЭДПрисоединенныеФайлы.ДатаМодификацииУниверсальная,
		|	ЭДПрисоединенныеФайлы.ДатаСоздания,
		|	ЭДПрисоединенныеФайлы.Изменил,
		|	ЭДПрисоединенныеФайлы.ИндексКартинки,
		|	ЭДПрисоединенныеФайлы.Описание,
		|	ЭДПрисоединенныеФайлы.ПодписанЭП,
		|	ЭДПрисоединенныеФайлы.ПутьКФайлу,
		|	ЭДПрисоединенныеФайлы.Размер,
		|	ЭДПрисоединенныеФайлы.Расширение,
		|	ЭДПрисоединенныеФайлы.Редактирует,
		|	ЭДПрисоединенныеФайлы.СтатусИзвлеченияТекста,
		|	ЭДПрисоединенныеФайлы.ТекстХранилище,
		|	ЭДПрисоединенныеФайлы.ТипХраненияФайла,
		|	ЭДПрисоединенныеФайлы.Том,
		|	ЭДПрисоединенныеФайлы.ФайлХранилище,
		|	ЭДПрисоединенныеФайлы.СтатусЭД,
		|	СостоянияЭД.СсылкаНаОбъект,
		|	СостоянияЭД.СостояниеВерсииЭД,
		|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний КАК ВнешнийИдентификатор,
		|	ЭДПрисоединенныеФайлы.УдалитьДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
		|	ЭДПрисоединенныеФайлы.УдалитьДатаИзмененияВнешнегоСтатусаЭД КАК ДатаИзмененияВнешнегоСтатуса,
		|	ЭДПрисоединенныеФайлы.ДатаИзмененияСтатусаЭД КАК ДатаИзмененияСтатуса,
		|	ЭДПрисоединенныеФайлы.УдалитьДатаВыпискиБанка КАК ДатаСообщения,
		|	ЭДПрисоединенныеФайлы.ДополнительнаяИнформация,
		|	ЭДПрисоединенныеФайлы.ДополнительныеРеквизиты,
		|	ЭДПрисоединенныеФайлы.НомерЭД КАК Идентификатор,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК Направление,
		|	ЭДПрисоединенныеФайлы.УдалитьНомерДокументаОтправителя КАК НомерДокументаОтправителя,
		|	ЭДПрисоединенныеФайлы.УдалитьОрганизация КАК Организация,
		|	ЭДПрисоединенныеФайлы.УдалитьПричинаОтклонения КАК ПричинаОтклонения,
		|	ЭДПрисоединенныеФайлы.УдалитьСуммаДокумента КАК СуммаДокумента,
		|	ЭДПрисоединенныеФайлы.ПометкаУдаления
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО (СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка)
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД = &СоглашениеЭД
		|	И НЕ ЭДПрисоединенныеФайлы.УдалитьВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПустаяСсылка)";
		
		ЗапросЭДПрисоединенныеФайлы.УстановитьПараметр("СоглашениеЭД", ВыборкаСоглашенийЭДКОбработке.Ссылка);
		
		ВыборкаРеквизитыЭД = ЗапросЭДПрисоединенныеФайлы.Выполнить().Выбрать();
		
		СоответствиеЭДИСообщенийОбмена = Новый Соответствие;
		
		Пока ВыборкаРеквизитыЭД.Следующий() Цикл
			НовСообщение = Документы.СообщениеОбменСБанками.СоздатьДокумент();
			НовСообщение.Банк = НастройкаОбменаОбъект.Банк;
			НовСообщение.ВидЭД = СоответствиеВидовЭД.Получить(ВыборкаРеквизитыЭД.ВидЭД);
			ЗаполнитьЗначенияСвойств(НовСообщение, ВыборкаРеквизитыЭД, "ВнешнийИдентификатор, ДатаДокументаОтправителя,
				|ДатаИзмененияВнешнегоСтатуса, ДатаИзмененияСтатуса, ДатаСообщения, ДополнительнаяИнформация, Идентификатор,
				|Направление, НомерДокументаОтправителя, Организация, ПричинаОтклонения, ПометкаУдаления");
			НовСообщение.Дата = ВыборкаРеквизитыЭД.ДатаСоздания;
			НовСообщение.ДополнительныеДанные = Новый ХранилищеЗначения(ВыборкаРеквизитыЭД.ДополнительныеРеквизиты.Получить());
			НовСообщение.НастройкаОбмена = НастройкаОбмена;
			Если ВыборкаРеквизитыЭД.ВидЭД = Перечисления["ВидыЭД"].УдалитьВыпискаБанка Тогда
				НовСообщение.НомерСчета = ВыборкаРеквизитыЭД.ДополнительнаяИнформация;
			КонецЕсли;
			
			НовСообщение.Состояние = СоответствиеСостояний.Получить(ВыборкаРеквизитыЭД.СостояниеВерсииЭД);
			НовСообщение.Статус = СоответствиеСтатусов.Получить(ВыборкаРеквизитыЭД.СтатусЭД);
			НовСообщение.УстановитьНовыйНомер();
			НовСообщение.ПредставлениеДокумента = ПредставлениеЭД(
				ВыборкаРеквизитыЭД.Наименование, НовСообщение.ВидЭД, ВыборкаРеквизитыЭД.ВладелецФайла);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовСообщение);

			ЗапросПоЭП = Новый Запрос;
			ЗапросПоЭП.Текст =
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.НомерСтроки КАК НомерСтроки,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.ПодписьВерна,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.ДатаПроверкиПодписи,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.ДатаПодписи,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.ИмяФайлаПодписи,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Комментарий,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.КомуВыданСертификат,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Отпечаток,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Подпись,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Сертификат,
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.УстановившийПодпись
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы.УдалитьЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеПодписи
			|ГДЕ
			|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			ЗапросПоЭП.УстановитьПараметр("Ссылка", ВыборкаРеквизитыЭД.Ссылка);
			ВыборкаПоЭП = ЗапросПоЭП.Выполнить().Выбрать();
			
			СообщениеОбмена = НовСообщение.Ссылка;
			СоответствиеЭДИСообщенийОбмена.Вставить(ВыборкаРеквизитыЭД.Ссылка, СообщениеОбмена);
			
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ВыборкаРеквизитыЭД.Ссылка);
			
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", СообщениеОбмена);
			ПараметрыФайла.Вставить("ИмяБезРасширения", ДанныеФайла.ИмяФайла);
			ПараметрыФайла.Вставить("РасширениеБезТочки", ДанныеФайла.Расширение);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			ПараметрыФайла.Вставить("Служебный", Истина);
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
				ПараметрыФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			
			ОбъектПрисоединенныйФайл = ПрисоединенныйФайл.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ОбъектПрисоединенныйФайл, ВыборкаРеквизитыЭД,
				"Автор, ДатаМодификацииУниверсальная, ДатаСоздания, Изменил, Описание, ПутьКФайлу, Наименование, ПодписанЭП");
			
			Пока ВыборкаПоЭП.Следующий() Цикл
				НовСтрока = ОбъектПрисоединенныйФайл.УдалитьЭлектронныеПодписи.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаПоЭП, , "НомерСтроки, Подпись, Сертификат");
				НовСтрока.Подпись = Новый ХранилищеЗначения(ВыборкаПоЭП.Подпись.Получить());
				НовСтрока.Сертификат = Новый ХранилищеЗначения(ВыборкаПоЭП.Сертификат.Получить());
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектПрисоединенныйФайл);
			
			ЭД = ВыборкаРеквизитыЭД.Ссылка.ПолучитьОбъект();
			ЭД.ПометкаУдаления = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭД);
		
		КонецЦикла;
		
		// Заполнение родителей
		ЗапросПоВладельцам = Новый Запрос;
		ЗапросПоВладельцам.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка,
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	НЕ ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
		|	И ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД = &СоглашениеЭД";
		ЗапросПоВладельцам.УстановитьПараметр("СоглашениеЭД", ВыборкаСоглашенийЭДКОбработке.Ссылка);
		ВыборкаЭДПоВладельцам = ЗапросПоВладельцам.Выполнить().Выбрать();
		Пока ВыборкаЭДПоВладельцам.Следующий() Цикл
			
			СообщениеОбмена = СоответствиеЭДИСообщенийОбмена.Получить(ВыборкаЭДПоВладельцам.Ссылка);
			СообщениеОбменаРодитель = СоответствиеЭДИСообщенийОбмена.Получить(
				ВыборкаЭДПоВладельцам.ЭлектронныйДокументВладелец);
				
			Если ЗначениеЗаполнено(СообщениеОбменаРодитель) И ЗначениеЗаполнено(СообщениеОбмена) Тогда
				СообщениеОбменаОбъект = СообщениеОбмена.ПолучитьОбъект();
				СообщениеОбменаОбъект.СообщениеРодитель = СообщениеОбменаРодитель;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СообщениеОбменаОбъект);
			КонецЕсли;
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область ПереносСостоянийЭД
		
		ЗапросПоСостояниям = Новый Запрос();
		ЗапросПоСостояниям.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект,
		|	СостоянияЭД.СостояниеВерсииЭД,
		|	СостоянияЭД.ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент.УдалитьСоглашениеЭД = &СоглашениеЭД";
		ЗапросПоСостояниям.УстановитьПараметр("СоглашениеЭД", ВыборкаСоглашенийЭДКОбработке.Ссылка);
		ВыборкаПоСостояниям = ЗапросПоСостояниям.Выполнить().Выбрать();
		Пока ВыборкаПоСостояниям.Следующий() Цикл
			
			СообщениеОбмена = СоответствиеЭДИСообщенийОбмена.Получить(ВыборкаПоСостояниям.ЭлектронныйДокумент);
			Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
				МенеджерРегистраСостоянияОбменСБанками = РегистрыСведений.СостоянияОбменСБанками.СоздатьМенеджерЗаписи();
				МенеджерРегистраСостоянияОбменСБанками.СсылкаНаОбъект = ВыборкаПоСостояниям.СсылкаНаОбъект;
				МенеджерРегистраСостоянияОбменСБанками.СообщениеОбмена = СообщениеОбмена;
				МенеджерРегистраСостоянияОбменСБанками.Состояние = СоответствиеСостояний.Получить(
					ВыборкаПоСостояниям.СостояниеВерсииЭД);
				МенеджерРегистраСостоянияОбменСБанками.Записать();
			КонецЕсли;
			
			МенеджерРегистраСостоянияЭД = РегистрыСведений["СостоянияЭД"].СоздатьМенеджерЗаписи();
			МенеджерРегистраСостоянияЭД.СсылкаНаОбъект = ВыборкаПоСостояниям.СсылкаНаОбъект;
			МенеджерРегистраСостоянияЭД.Удалить();
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область УдалениеПакетовЭД
		
		ЗапросПоПакетам = Новый Запрос;
		ЗапросПоПакетам.Текст =
		"ВЫБРАТЬ
		|	ПакетЭД.Ссылка
		|ИЗ
		|	Документ.ПакетЭД КАК ПакетЭД
		|ГДЕ
		|	ПакетЭД.УдалитьНастройкаЭДО = &НастройкаЭДО
		|	И НЕ ПакетЭД.ПометкаУдаления";
		
		ЗапросПоПакетам.УстановитьПараметр("НастройкаЭДО", ВыборкаСоглашенийЭДКОбработке.Ссылка);
		ВыборкаПакетов = ЗапросПоПакетам.Выполнить().Выбрать();
		Пока ВыборкаПакетов.Следующий() Цикл
			ПакетОбъект = ВыборкаПакетов.Ссылка.ПолучитьОбъект();
			ПакетОбъект.ПометкаУдаления = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПакетОбъект);
		КонецЦикла;
		
		#КонецОбласти

		#Область ОбработкаРегистраПараметрыОбменСБанками
		
		МенеджерРегистраПараметрыОбменСБанками = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
		МенеджерРегистраПараметрыОбменСБанками.НастройкаОбмена = ВыборкаСоглашенийЭДКОбработке.Ссылка;
		МенеджерРегистраПараметрыОбменСБанками.Прочитать();
		Если МенеджерРегистраПараметрыОбменСБанками.Выбран() Тогда
			НаборЗаписейРегистраПараметрыОбменСБанками = РегистрыСведений.ПараметрыОбменСБанками.СоздатьНаборЗаписей();
			НаборЗаписейРегистраПараметрыОбменСБанками.Отбор.НастройкаОбмена.Установить(НастройкаОбмена);
			НовЗапись = НаборЗаписейРегистраПараметрыОбменСБанками.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, МенеджерРегистраПараметрыОбменСБанками, "ПоследняяДатаПолученияЭД, НомерЗапроса");
			НовЗапись.НастройкаОбмена = НастройкаОбмена;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейРегистраПараметрыОбменСБанками);
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ТикетыОбменСБанками
		
		СтарыйНаборЗаписейРегистраТикетыОбменСБанками = РегистрыСведений.ТикетыОбменСБанками.СоздатьНаборЗаписей();
		СтарыйНаборЗаписейРегистраТикетыОбменСБанками.Отбор.НастройкаОбмена.Установить(ВыборкаСоглашенийЭДКОбработке.Ссылка);
		СтарыйНаборЗаписейРегистраТикетыОбменСБанками.Прочитать();
		
		НовыйНаборЗаписейРегистраТикетыОбменСБанками = РегистрыСведений.ТикетыОбменСБанками.СоздатьНаборЗаписей();
		НовыйНаборЗаписейРегистраТикетыОбменСБанками.Отбор.НастройкаОбмена.Установить(НастройкаОбмена);
		
		Для Каждого СтараяЗапись Из СтарыйНаборЗаписейРегистраТикетыОбменСБанками Цикл
			НоваяЗапись = НовыйНаборЗаписейРегистраТикетыОбменСБанками.Добавить();
			НоваяЗапись.Идентификатор = СтараяЗапись.Идентификатор;
			НоваяЗапись.НастройкаОбмена = НастройкаОбмена;
		КонецЦикла;
		
		Если НовыйНаборЗаписейРегистраТикетыОбменСБанками.Количество() Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйНаборЗаписейРегистраТикетыОбменСБанками);
		КонецЕсли;
	
		#КонецОбласти
		
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы прямого обмена с банками'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы прямого обмена с банками произошла ошибка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками", ВыборкаСоглашенийЭДКОбработке.Ссылка);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Добавление новых подписываемых видов ЭД и удаление старых
//
// Параметры:
//  Параметры - Структура - см. описание создания процедур обработчиков обновления.
//
Процедура ОбработатьРегистрПодписываемыеВидыЭД(Параметры) Экспорт
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
	Если Не ЕстьОбменСКонтрагентами Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	НачатьТранзакцию();
	Попытка
	
		НаборЗаписейРегистра = РегистрыСведений.ПодписываемыеВидыЭД.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Прочитать();
	
		СоответствиеВидовЭД = СоответствиеВидовЭД();
	
		Для Каждого Запись Из НаборЗаписейРегистра Цикл
			
			НовыйВидЭД = СоответствиеВидовЭД.Получить(Запись.ВидЭД);
			Если НовыйВидЭД <> Неопределено Тогда
				Запись.ВидЭД = НовыйВидЭД;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаСвертки = НаборЗаписейРегистра.Выгрузить();
		ТаблицаСвертки.Свернуть("СертификатЭП, ВидЭД, Использовать");
		НаборЗаписейРегистра.Загрузить(ТаблицаСвертки);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейРегистра);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы прямого обмена с банками'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы прямого обмена с банками произошла ошибка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками");
		ВызватьИсключение;
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

// Переносит статусы электронных подписей в справочник присоединенных файлов
//
// Параметры:
//  Параметры - Структура - см. описание создания процедур обработчиков обновления.
//
Процедура ПеренестиСтатусыЭлектронныхПодписей(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеОбменСБанками.Ссылка КАК СообщениеОбмена,
		|	СообщениеОбменСБанками.УдалитьСтатусыЭлектронныхПодписей.(
		|		НомерСтроки,
		|		ДатаПроверкиПодписи,
		|		ПодписьВерна
		|	),
		|	СообщениеОбменСБанкамиПрисоединенныеФайлы.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы КАК СообщениеОбменСБанкамиПрисоединенныеФайлы
		|		ПО (СообщениеОбменСБанкамиПрисоединенныеФайлы.ВладелецФайла = СообщениеОбменСБанками.Ссылка)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ЭлектронныйДокумент) Цикл
			ЗаписатьОбъект = Ложь;
			ВыборкаСтатусовЭП = Выборка.УдалитьСтатусыЭлектронныхПодписей.Выбрать();
			Если ВыборкаСтатусовЭП.Количество() Тогда
				ПрисоединенныйФайлОбъект = Выборка.ЭлектронныйДокумент.ПолучитьОбъект();
				Пока ВыборкаСтатусовЭП.Следующий() Цикл
					ИскомаяСтрока = ПрисоединенныйФайлОбъект.УдалитьЭлектронныеПодписи.Найти(ВыборкаСтатусовЭП.НомерСтроки, "НомерСтроки");
					Если ИскомаяСтрока = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ЗаписатьОбъект = Истина;
					ЗаполнитьЗначенияСвойств(ИскомаяСтрока, ВыборкаСтатусовЭП);
				КонецЦикла;
			КонецЕсли;
			Если ЗаписатьОбъект Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрисоединенныйФайлОбъект);
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы прямого обмена с банками'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы прямого обмена с банками произошла ошибка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками");
		ВызватьИсключение;
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

// Включает рег.задание по обновлению списка банков
//
// Параметры:
//  Параметры - Структура - см. описание создания процедур обработчиков обновления.
//
Процедура ВключитьАвтоматическоеОбновлениеСпискаБанков(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;

	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Истина);
		
		ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(
			Метаданные.РегламентныеЗадания.ЗагрузкаСпискаБанковОбменСБанками);
		РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторЗадания, ПараметрыЗадания);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти

#Область Профили

// Процедура - Добавить базовые права ЭД
//
// Параметры:
//  ОписаниеПрофиля - Структура - см. описание в УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа().
//
Процедура ДобавитьБазовыеПраваЭД(ОписаниеПрофиля) Экспорт

	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваЭД");

КонецПроцедуры

// Процедура - Добавить права на выполнение обмена
//
// Параметры:
//  ОписаниеПрофиля - Структура - см. описание в УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа().
//
Процедура ДобавитьВыполнениеОбменаЭД(ОписаниеПрофиля) Экспорт

	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекЭлектронногоВзаимодействия");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеМаршрутовПодписания");

	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОбменСБанками");
	ОписаниеПрофиля.Роли.Добавить("ВыполнениеОбменаОбменСБанками");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекОбменСБанками");
	
КонецПроцедуры

// Процедура - Добавить права на изменение настроек обмена
//
// Параметры:
//  ОписаниеПрофиля - Структура - см. описание в УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа().
//
Процедура ДобавитьНастройкуПараметровЭД(ОписаниеПрофиля) Экспорт

	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеМаршрутовПодписания");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНастроекЭлектронногоВзаимодействия");

	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОбменСБанками");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНастроекОбменСБанками");
	
КонецПроцедуры

// Процедура - Добавить права на чтение настроек обмена
//
// Параметры:
//  ОписаниеПрофиля - Структура - см. описание в УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа().
//
Процедура ДобавитьЧтениеЭД(ОписаниеПрофиля) Экспорт

	ОписаниеПрофиля.Роли.Добавить("ЧтениеМаршрутовПодписания");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекЭлектронногоВзаимодействия");

	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекОбменСБанками");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбменСБанками");
	
КонецПроцедуры

#КонецОбласти

// Получает параметры обмена с банком
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - ссылка на организацию.
//  Банк - ОпределяемыйТип.БанкОбменСБанками - ссылка на банк.
// 
// Возвращаемое значение:
//  Неопределено - отсутствует настройка обмена с банком через сервис 1С:ДиректБанк.
//  Структура - текущие параметры обмена с банком. Содержит поля:
//     * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена с банком.
//     * Недействительна - Булево - признак отключенной настройки или помеченной на удаление.
//     * ДоступноАвтоматическоеПолучениеВыписки - Булево - по текущей настройке обмена возможно получение выписки в автоматическом режиме.
//     * ПринимаемыеВидыЭД - Массив - виды электронных документов, принимаемых банком. В элементах массива ПеречислениеСсылка.ВидыЭДОбменСБанками.
//     * ДатаПоследнегоПолученияВыписки - Дата - дата последнего получения выписки банка.
//     * ТекстОшибки - Строка - текст ошибки, которая произошла при последнем получении выписки.
//     * ВключеноАвтоматическоеПолучениеВыписки - Булево - по текущей настройке обмена запущено автоматическое получение выписки банка.
//     * ДатаПоследнейСинхронизации - Дата - дата последнего запуска синхронизации с банком.
//
Функция ПараметрыОбмена(Организация, Банк) Экспорт
	
	СтруктураВозврата = Новый Структура;
	НастройкаОбмена = НастройкаОбмена(Организация, Банк, Ложь);
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтруктураВозврата.Вставить("НастройкаОбмена", НастройкаОбмена);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменСБанками.ПометкаУдаления КАК ПометкаУдаления,
	|	НастройкиОбменСБанками.Недействительна КАК Недействительна,
	|	НастройкиОбменСБанками.ДоступноАвтоматическоеПолучениеВыписки КАК ДоступноАвтоматическоеПолучениеВыписки
	|ИЗ
	|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|ГДЕ
	|	НастройкиОбменСБанками.Ссылка = &НастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент КАК ИсходящийДокумент
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	|ГДЕ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка = &НастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыОбменСБанками.ДатаПолученияВыписки КАК ДатаПолученияВыписки,
	|	ПараметрыОбменСБанками.ТекстОшибки КАК ТекстОшибки,
	|	ПараметрыОбменСБанками.АвтоматическоеПолучениеВыписки КАК АвтоматическоеПолучениеВыписки,
	|	ПараметрыОбменСБанками.ДатаСинхронизации КАК ДатаСинхронизации
	|ИЗ
	|	РегистрСведений.ПараметрыОбменСБанками КАК ПараметрыОбменСБанками
	|ГДЕ
	|	ПараметрыОбменСБанками.НастройкаОбмена = &НастройкаОбмена";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаОсновная = Результат[0].Выбрать();
	ВыборкаОсновная.Следующий();
	
	СтруктураВозврата.Вставить("Недействительна", ВыборкаОсновная.ПометкаУдаления ИЛИ  ВыборкаОсновная.Недействительна);
	СтруктураВозврата.Вставить(
		"ДоступноАвтоматическоеПолучениеВыписки", ВыборкаОсновная.ДоступноАвтоматическоеПолучениеВыписки);
	
	ВыборкаВидыЭД = Результат[1].Выбрать();

	МассивЭД = Новый Массив;
	Пока ВыборкаВидыЭД.Следующий() Цикл
		МассивЭД.Добавить(ВыборкаВидыЭД.ИсходящийДокумент);
	КонецЦикла;
	
	СтруктураВозврата.Вставить("ПринимаемыеВидыЭД", МассивЭД);
	
	ВыборкаОперативныеПараметры = Результат[2].Выбрать();
	ВыборкаОперативныеПараметры.Следующий();
	
	СтруктураВозврата.Вставить("ДатаПоследнегоПолученияВыписки", ВыборкаОперативныеПараметры.ДатаПолученияВыписки);
	СтруктураВозврата.Вставить("ТекстОшибки", ВыборкаОперативныеПараметры.ТекстОшибки);
	СтруктураВозврата.Вставить(
		"ВключеноАвтоматическоеПолучениеВыписки", ВыборкаОперативныеПараметры.АвтоматическоеПолучениеВыписки);
	СтруктураВозврата.Вставить("ДатаПоследнейСинхронизации", ВыборкаОперативныеПараметры.ДатаСинхронизации);
	
	Возврат СтруктураВозврата;
		
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийБСП

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("СессииОбменСБанками", "ОбменСБанками.УстановкаПараметровСеанса");
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "СессииОбменСБанками" Тогда
		ПараметрыСеанса.СессииОбменСБанками = Новый ФиксированноеСоответствие(Новый Соответствие);
		УстановленныеПараметры.Добавить("СессииОбменСБанками");
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.НастройкиОбменСБанками, Истина);
	Списки.Вставить(Метаданные.Документы.ПакетОбменСБанками, Истина);
	Списки.Вставить(Метаданные.Документы.СообщениеОбменСБанками, Истина);
	Списки.Вставить(Метаданные.Документы.ПисьмоОбменСБанками, Истина);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Отложенно

#Область Версия_1_3_1

#Область ОбменСБанками_ОбработатьРегистрПодписываемыеВидыЭД

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.1.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбменСБанками.ОбработатьРегистрПодписываемыеВидыЭД";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("72fa8a62-3f99-4606-a4eb-92bcf23b6d8d");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
	Обработчик.ОчередьОтложеннойОбработки = 0;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: Обновляет данные регистра Подписываемые виды ЭД'");

#КонецОбласти

#Область ОбменСБанками_ПеренестиДанныеОбменаСБанками

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.1.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбменСБанками.ПеренестиДанныеОбменаСБанками";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e2bf49f3-cca8-4a44-9dad-21b0f1d153f7");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
	Обработчик.ОчередьОтложеннойОбработки = 0;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: Обновляет данные подсистемы Обмен с банками'");

#КонецОбласти

#КонецОбласти

#Область Версия_1_3_2

#Область ОбменСБанками_ПеренестиСтатусыЭлектронныхПодписей

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.2.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбменСБанками.ПеренестиСтатусыЭлектронныхПодписей";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("704454cb-bfa5-44ba-a9f0-8638aafa7efe");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
	Обработчик.ОчередьОтложеннойОбработки = 0;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: Переносит статусы проверки подписей в присоединенные файлы'");

#КонецОбласти

#КонецОбласти

#Область Версия_1_3_4

#Область Справочники_НастройкиОбменСБанками_ЗаполнитьВерсиюФормата

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.4.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.НастройкиОбменСБанками.ЗаполнитьВерсиюФормата";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("788f991b-8283-4a84-a661-c021310a9cf9");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
	Обработчик.ОчередьОтложеннойОбработки = 0;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: Заполняет версию формата.'");

#КонецОбласти

#Область ОбменСБанками_ВключитьАвтоматическоеОбновлениеСпискаБанков

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.4.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбменСБанками.ВключитьАвтоматическоеОбновлениеСпискаБанков";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d788ef99-4874-4b3b-81ac-671856a5b183");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
	Обработчик.ОчередьОтложеннойОбработки = 0;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: Включает автоматическое обновление списка банков.'");

#КонецОбласти

#КонецОбласти

#Область Версия_1_3_9

#Область Документы_СообщениеОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.9.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.СообщениеОбменСБанками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1363a2fc-89ab-43e0-85b2-79355bdf89af");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.СообщениеОбменСБанками.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.НастройкиОбменСБанками,"
		+ "Документ.СообщениеОбменСБанками,"
		+ "РегистрСведений.СостояниеПодписанияЭД,"
		+ "РегистрСведений.ЭлектронныеПодписи";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СостоянияОбменСБанками,"
		+ "Документ.СообщениеОбменСБанками,"
		+ "РегистрСведений.СостояниеПодписанияЭД";
	Обработчик.БлокируемыеОбъекты = "Документ.СообщениеОбменСБанками";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: обработка сообщений обмена с банком.
	|Обмен с банками временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РаботаСФайламиСлужебный.ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.НастройкиОбменСБанками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СостоянияОбменСБанками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ЭДПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область РегистрыСведений_СостоянияОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.9.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.СостоянияОбменСБанками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e5444128-7069-469a-8c54-ed39deebebfe");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияОбменСБанками.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СостоянияОбменСБанками";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СостоянияОбменСБанками";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.СостоянияОбменСБанками";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: Удаляет состояние На утверждении. Прямой обмен с банками временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СообщениеОбменСБанками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#КонецОбласти

#Область Версия_1_4_1

#Область Справочники_НастройкиОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.1.5";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.НастройкиОбменСБанками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a9a378c4-1fcc-4082-93b4-234a4837103f");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.НастройкиОбменСБанками.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "Справочники.НастройкиОбменСБанками.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.НастройкиОбменСБанками,"
		+ "Справочник.ДополнительныеОтчетыИОбработки";
	Обработчик.ИзменяемыеОбъекты = "Справочник.НастройкиОбменСБанками,"
		+ "Справочник.ДополнительныеОтчетыИОбработки,"
		+ "Справочник.МаршрутыПодписания";
	Обработчик.БлокируемыеОбъекты = "Документ.СообщениеОбменСБанками,"
		+ "Справочник.НастройкиОбменСБанками";
	Обработчик.Комментарий = НСтр("ru = '1С:ДиректБанк: обновление настроек обмена с банками.
	|Обмен с банками временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УдалитьПрофилиНастроекЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюВнешнийВызов";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УдалитьПрофилиНастроекЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ЭДПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СообщениеОбменСБанками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#КонецОбласти

#КонецОбласти
	
КонецПроцедуры

// См. процедуру РаботаСФайламиПереопределяемый.ПриПопыткеЗанятьФайл.
Процедура ПриПопыткеЗанятьФайл(ДанныеФайла, ОписаниеОшибки) Экспорт
	
	Если ТипЗнч(ДанныеФайла.Владелец) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеФайла.Владелец, "Направление, ВидЭД");
		Если РеквизитыВладельца.ВидЭД = Перечисления.ВидыЭДОбменСБанками.Письмо
			И РеквизитыВладельца.Направление = Перечисления.НаправленияЭД.Входящий Тогда
			ОписаниеОшибки = НСтр("ru = 'Полученное письмо из банка редактировать нельзя.'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. процедуру УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ПисьмоОбменСБанками);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Справочник.НастройкиОбменСБанками.Чтение.Организации
	|Документ.ПакетОбменСБанками.Чтение.Организации
	|Документ.СообщениеОбменСБанками.Чтение.Организации
	|Документ.ПисьмоОбменСБанками.Чтение.Организации
	|";
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ПолучениеВыпискиОбменСБанками.Имя);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПолучениеВыпискиОбменСБанками.ИмяМетода);
	
КонецПроцедуры

// См. процедуру ЭлектронноеВзаимодействие.ПриОпределенииНастроекРегламентныхЗаданий.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ЗагрузкаСпискаБанковОбменСБанками"];
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции["ИспользоватьОбменСБанками"];
	КонецЕсли;
	НоваяСтрока.ДоступноВМоделиСервиса = Ложь;
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ПолучениеВыпискиОбменСБанками"];
	НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции["ИспользоватьОбменСБанками"];
	
КонецПроцедуры

// СтандартныеПодсистемы.ПрофилиБезопасности
// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	// Файл списка банков
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS", "directbank.1c.ru", 443, НСтр("ru = 'Список банков сервиса 1С:ДиректБанк.'"));
	НовыеРазрешения.Добавить(Разрешение);

	// Ресурсы банков
	Макет = Справочники.НастройкиОбменСБанками.ПолучитьМакет("СписокБанков");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ДобавитьРесурсыИзМакета(Макет, НовыеРазрешения);
	
	// Ресурсы Сбербанка
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS", "upgsbi.sberbank.ru", 9443, НСтр("ru = 'Обмен с банком Сбербанк по технологии DirectBank.'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	// Ресурсы банков из настроек обмена с банками
	Если (НЕ ОбщегоНазначения.РазделениеВключено() ИЛИ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных())
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	НастройкиОбменСБанками.АдресСервера КАК АдресСервера,
		               |	НастройкиОбменСБанками.Банк КАК Банк
		               |ИЗ
		               |	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками";
		Выборка = Запрос.Выполнить().Выбрать();
		ШаблонОписания = НСтр("ru = 'Обмен с банком %1 по технологии DirectBank.'");
		Пока Выборка.Следующий() Цикл
			СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Выборка.АдресСервера);
			ТекстОписания = СтрШаблон(ШаблонОписания, Строка(Выборка.Банк));
			Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
				"HTTPS", СтруктураURI.Хост, СтруктураURI.Порт, ТекстОписания);
			НовыеРазрешения.Добавить(Разрешение);
		КонецЦикла;
	КонецЕсли;

	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя = "ДиректБанк";
	Вид.ИмяПодменю = "КомандыЭДОВажное";
	Вид.Заголовок = НСтр("ru = '1C:ДиректБанк'");
	Вид.Картинка = Новый Картинка;
	Вид.Отображение = ОтображениеКнопки.Текст;
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.СообщениеОбменСБанками) Тогда
		Возврат;
	КонецЕсли;
	
	ТипыОбъектов = Новый Массив;
	ВсеТипыОснований = Метаданные.ОпределяемыеТипы.ВладелецОбменСБанками.Тип.Типы();
	Для каждого ЭлементКоллекции Из ВсеТипыОснований Цикл
		Если ЭлементКоллекции <> Тип("СправочникСсылка.НастройкиОбменСБанками")
			И ЭлементКоллекции <> Тип("ДокументСсылка.ПисьмоОбменСБанками") Тогда
			ТипыОбъектов.Добавить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	ТипПараметра = Новый ОписаниеТипов(ТипыОбъектов);
	
	Команда = Команды.Добавить();
	Команда.Вид = "ДиректБанк";
	Команда.Идентификатор = "ДиректБанкОтправка";
	Команда.Представление = НСтр("ru = 'Отправить электронный документ'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 1;
	Команда.ОтображениеКнопки = ОтображениеКнопки.КартинкаИТекст;
	Команда.Картинка = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
	Команда.ТипПараметра = ТипПараметра;
	Команда.ФункциональныеОпции = "ИспользоватьОбменСБанками";
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.РежимЗаписи = "Записывать";
	Команда.Обработчик = "ОбменСБанкамиСлужебныйКлиент.СформироватьПодписатьОтправитьЭД";
	
	Команда = Команды.Добавить();
	Команда.Вид = "ДиректБанк";
	Команда.Идентификатор = "ДиректБанкПросмотр";
	Команда.Представление = НСтр("ru = 'Просмотреть электронный документ'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 2;
	Команда.ОтображениеКнопки = ОтображениеКнопки.КартинкаИТекст;
	Команда.Картинка = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
	Команда.ТипПараметра = ТипПараметра;
	Команда.ФункциональныеОпции = "ИспользоватьОбменСБанками";
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.РежимЗаписи = "Записывать";
	Команда.Обработчик = "ОбменСБанкамиСлужебныйКлиент.ОткрытьАктуальныйЭД";
	
	Команда = Команды.Добавить();
	Команда.Вид = "ДиректБанк";
	Команда.Идентификатор = "ДиректБанкСоздать";
	Команда.Представление = НСтр("ru = 'Создать электронный документ'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 3;
	Команда.ОтображениеКнопки = ОтображениеКнопки.КартинкаИТекст;
	Команда.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	Команда.ТипПараметра = ТипПараметра;
	Команда.ФункциональныеОпции = "ИспользоватьОбменСБанками";
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.РежимЗаписи = "Записывать";
	Команда.Обработчик = "ОбменСБанкамиСлужебныйКлиент.СформироватьЭД";
	
	Команда = Команды.Добавить();
	Команда.Вид = "ДиректБанк";
	Команда.Идентификатор = "ДиректБанкСписок";
	Команда.Представление = НСтр("ru = 'Открыть электронные документы'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 4;
	Команда.ОтображениеКнопки = ОтображениеКнопки.КартинкаИТекст;
	Команда.Картинка = БиблиотекаКартинок.Подсистема;
	Команда.ТипПараметра = ТипПараметра;
	Команда.ФункциональныеОпции = "ИспользоватьОбменСБанками";
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.РежимЗаписи = "Записывать";
	Команда.Обработчик = "ОбменСБанкамиСлужебныйКлиент.СписокЭД";
	Команда.МножественныйВыбор = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийБИП

// См. процедуру ПолучениеВнешнихКомпонентВМоделиСервисаПереопределяемый.ПриОпределенииИспользуемыхВерсийВнешнихКомпонент
//
Процедура ПриОпределенииИспользуемыхВерсийВнешнихКомпонент(Идентификаторы) Экспорт
	
	Идентификаторы.Добавить(ОбменСБанкамиКлиентСервер.ИдентификаторВнешнейКомпонентыСбербанк());
	Идентификаторы.Добавить("iBank2DxV2");

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаДанных

Процедура ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаОбъекта, Текст, ИмяПараметра, ИмяРеквизитаДерева = "")
	
	Если ИмяРеквизитаДерева = "" Тогда
		ИмяРеквизитаДерева = ИмяПараметра;
	КонецЕсли;
	
	ЗначениеПараметра = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаДерева);
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, Символы.ПС, "");
		ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, Символы.ВК, "");
		Текст.ЗаписатьСтроку(ИмяПараметра + "=" + ЗначениеПараметра);
	КонецЕсли;

КонецПроцедуры

Функция ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту)
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту);
	
КонецФункции

Функция ЗначениеСвойстваXDTO(ОбъектXDTO, Путь)
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ОбъектXDTO, Путь);
	
КонецФункции

#КонецОбласти

Процедура ПрочитатьВыписку1CBankExch(Stmt, ТаблицаВыписок)
	
	СтрокаВыписки = ТаблицаВыписок.Добавить();
	СтрокаВыписки.ДатаФормирования = XMLЗначение(Тип("Дата"), Stmt.creationDate);
	StmtData = Stmt.Data;
	ДатаНачалаСтрокой = ЗначениеСвойстваXDTO(StmtData, "DateFrom");
	Если ДатаНачалаСтрокой <> Неопределено Тогда
		ДатаНачала = XMLЗначение(Тип("Дата"), Сред(ДатаНачалаСтрокой, 1, 19));
	КонецЕсли;
	СтрокаВыписки.НачалоПериода = ДатаНачала;
	СтрокаВыписки.КонецПериода = XMLЗначение(Тип("Дата"), Сред(StmtData.DateTo, 1, 19));
	СтрокаВыписки.НомерСчета = StmtData.Account;

	Организация = Новый Структура;
	Организация.Вставить("ИНН", ЗначениеСвойстваXDTO(Stmt.Recipient, "inn"));
	Организация.Вставить("Наименование", ЗначениеСвойстваXDTO(Stmt.Recipient, "Name"));
	СтрокаВыписки.Организация = Организация;
	
	Банк = Новый Структура;
	Банк.Вставить("БИК", Stmt.Sender.bic);
	Банк.Вставить("Наименование", ЗначениеСвойстваXDTO(Stmt.Sender, "name"));
	СтрокаВыписки.Банк = Банк;
	
	НачальныйОстаток = ЗначениеСвойстваXDTO(StmtData, "OpeningBalance");
	НачальныйОстаток = ?(НачальныйОстаток = Неопределено, НачальныйОстаток, Число(НачальныйОстаток));
	СтрокаВыписки.НачальныйОстаток = НачальныйОстаток;
	ВсегоПоступило = ЗначениеСвойстваXDTO(StmtData, "TotalCredits");
	ВсегоПоступило = ?(ВсегоПоступило = Неопределено, ВсегоПоступило, Число(ВсегоПоступило));
	СтрокаВыписки.ОборотВходящихПлатежей = ВсегоПоступило;
	ВсегоСписано = ЗначениеСвойстваXDTO(StmtData, "TotalDebits");
	ВсегоСписано = ?(ВсегоСписано = Неопределено, ВсегоСписано, Число(ВсегоСписано));
	СтрокаВыписки.ОборотИсходящихПлатежей = ВсегоСписано;
	СтрокаВыписки.КонечныйОстаток = Число(StmtData.ClosingBalance);
	
	ТаблицаОпераций = ТаблицаОперацийВыписки();
	
	Если НЕ ЗначениеСвойстваXDTO(StmtData, "OperationInfo") = Неопределено Тогда
		Операции = ЗначениеСвойстваXDTO(StmtData, "OperationInfo");
		Если ТипЗнч(Операции) = Тип("ОбъектXDTO") Тогда
			ПрочитатьОперациюВыписки(Stmt, Операции, ТаблицаОпераций);
		Иначе
			Для Каждого Операция Из Операции Цикл
				ПрочитатьОперациюВыписки(Stmt, Операция, ТаблицаОпераций);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаВыписки.Операции = ТаблицаОпераций;

	Stamp = ЗначениеСвойстваXDTO(StmtData, "Stamp");
	Если Stamp <> Неопределено Тогда
		ПараметрыШтампа = Новый Структура;
		ПараметрыШтампа.Вставить("БИК", Stamp.BIC);
		ПараметрыШтампа.Вставить("НаименованиеБанка", ЗначениеСвойстваXDTO(StmtData.Stamp, "Name"));
		ПараметрыШтампа.Вставить("ГородБанка", ЗначениеСвойстваXDTO(StmtData.Stamp, "City"));
		ПараметрыШтампа.Вставить("ОтделениеБанка", ЗначениеСвойстваXDTO(StmtData.Stamp, "Branch"));
		СтрокаВыписки.Штамп = ПараметрыШтампа;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьОперациюВыписки(ЭД, Operation, ТаблицаОпераций)
	
	НовСтрока = ТаблицаОпераций.Добавить();
	НовСтрока.Статус = ?(ЭД.Data.StatementType = "0", "1", "0");
	НаправлениеПлатежа = ЗначениеСвойстваXDTO(Operation, "DC");
	Сообщение = НСтр("ru = 'Файл выписки банка содержит некорректные данные.
							|Недопустимое значение обязательного параметра DC или его отсутствие.'");
	ОбщегоНазначенияКлиентСервер.Проверить(НаправлениеПлатежа = "1" ИЛИ НаправлениеПлатежа = "2", Сообщение);
	НовСтрока.НаправлениеПлатежа = НаправлениеПлатежа;
	НовСтрока.ДатаОперации = XMLЗначение(Тип("Дата"), Сред(Operation.Date, 1, 10));

	ЭтоМемориальныйОрдер = Ложь;
	ЭтоПлатежноеТребование = Ложь;
	ЭтоПлатежныйОрдер = Ложь;
	
	Если ЗначениеСвойстваXDTO(Operation.PayDoc, "PayDocRu") <> Неопределено Тогда
		PayData = Operation.PayDoc.PayDocRu;
		НовСтрока.ВидДокумента = "Платежное поручение";
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "PayRequest") <> Неопределено Тогда
		PayData = Operation.PayDoc.PayRequest;
		НовСтрока.ВидДокумента = "Платежное требование";
		ЭтоПлатежноеТребование = Истина;
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "CollectionOrder") <> Неопределено Тогда
		PayData = Operation.PayDoc.CollectionOrder;
		НовСтрока.ВидДокумента = "Инкассовое поручение";
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "PaymentOrder") <> Неопределено Тогда
		PayData = Operation.PayDoc.PaymentOrder;
		НовСтрока.ВидДокумента = "Платежный ордер";
		ЭтоПлатежныйОрдер = Истина;
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "BankOrder") <> Неопределено Тогда
		PayData = Operation.PayDoc.BankOrder;
		НовСтрока.ВидДокумента = "Банковский ордер";
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "MemOrder") <> Неопределено Тогда
		PayData = Operation.PayDoc.MemOrder;
		НовСтрока.ВидДокумента = "Мемориальный ордер";
		ЭтоМемориальныйОрдер = Истина;
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "InnerDoc") <> Неопределено Тогда
		PayData = Operation.PayDoc.InnerDoc;
		НовСтрока.ВидДокумента = PayData.InnerDocKind;
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "CashContribution") <> Неопределено Тогда
		PayData = Operation.PayDoc.CashContribution;
		НовСтрока.ВидДокумента = "Объявление на взнос наличными";
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "Check") <> Неопределено Тогда
		PayData = Operation.PayDoc.Check;
		НовСтрока.ВидДокумента = "Чек";
	КонецЕсли;

	Дата =  ЗначениеСвойстваXDTO(PayData, "DocDate");
	Если Дата <> Неопределено Тогда
		Дата = XMLЗначение(Тип("Дата"), Сред(Дата, 1, 10));
	КонецЕсли;
	НовСтрока.ДатаДокумента = Дата;
	НовСтрока.НомерДокумента = ЗначениеСвойстваXDTO(PayData, "DocNo");
	НовСтрока.СуммаДокумента = Число(PayData.Sum);
	
	
	Payer = ЗначениеСвойстваXDTO(PayData, "Payer");
	
	Если Payer <> Неопределено Тогда
		Плательщик = Новый Структура;
		Плательщик.Вставить("Наименование", ЗначениеСвойстваXDTO(Payer, "Name"));
		Плательщик.Вставить("ИНН", ЗначениеСвойстваXDTO(Payer, "INN"));
		Плательщик.Вставить("КПП", ЗначениеСвойстваXDTO(Payer, "KPP"));
		Плательщик.Вставить("РасчСчет", ЗначениеСвойстваXDTO(Payer, "Account"));

		PayerBank = ЗначениеСвойстваXDTO(Payer, "Bank");
		Если PayerBank <> Неопределено Тогда
			БанкПлательщика = Новый Структура;
			БанкПлательщика.Вставить("Наименование", ЗначениеСвойстваXDTO(PayerBank, "Name"));
			БанкПлательщика.Вставить("БИК", PayerBank.BIC);
			БанкПлательщика.Вставить("Город", ЗначениеСвойстваXDTO(PayerBank, "City"));
			БанкПлательщика.Вставить("КоррСчет", ЗначениеСвойстваXDTO(PayerBank, "CorrespAcc"));
			Плательщик.Вставить("Банк", БанкПлательщика);
		КонецЕсли;
		НовСтрока.Плательщик = Плательщик;
	КонецЕсли;

	Payee = ЗначениеСвойстваXDTO(PayData, "Payee");
	Если Payee <> Неопределено Тогда
		Получатель = Новый Структура;
		Получатель.Вставить("Наименование", ЗначениеСвойстваXDTO(Payee, "Name"));
		Получатель.Вставить("ИНН", ЗначениеСвойстваXDTO(Payee, "INN"));
		Получатель.Вставить("КПП", ЗначениеСвойстваXDTO(Payee, "KPP"));
		Получатель.Вставить("РасчСчет", ЗначениеСвойстваXDTO(Payee, "Account"));

		PayeeBank = ЗначениеСвойстваXDTO(Payee, "Bank");
		Если PayeeBank <> Неопределено Тогда
			БанкПолучателя = Новый Структура;
			БанкПолучателя.Вставить("Наименование", ЗначениеСвойстваXDTO(PayeeBank, "Name"));
			БанкПолучателя.Вставить("БИК", PayeeBank.BIC);
			БанкПолучателя.Вставить("Город", ЗначениеСвойстваXDTO(PayeeBank, "City"));
			БанкПолучателя.Вставить("КоррСчет", ЗначениеСвойстваXDTO(PayeeBank, "CorrespAcc"));
			Получатель.Вставить("Банк", БанкПолучателя);
		КонецЕсли;
		НовСтрока.Получатель = Получатель;
	КонецЕсли;

	НовСтрока.ВидПлатежа = ЗначениеСвойстваXDTO(PayData, "PaymentKind");
	НовСтрока.Очередность = ЗначениеСвойстваXDTO(PayData, "Priority");
	НовСтрока.ВидОперации = ЗначениеСвойстваXDTO(PayData, "TransitionKind");
	НовСтрока.УникальныйИдентификаторПлатежа = ЗначениеСвойстваXDTO(PayData, "Code");
	НовСтрока.НазначениеПлатежа = ЗначениеСвойстваXDTO(PayData, "Purpose");
	
	BudgetPaymentInfo = ЗначениеСвойстваXDTO(PayData, "BudgetPaymentInfo");
	
	Если BudgetPaymentInfo <> Неопределено Тогда
		PayDataBudget = PayData.BudgetPaymentInfo;
		ПлатежВБюджет = Новый Структура;
		ПлатежВБюджет.Вставить("СтатусСоставителя", ЗначениеСвойстваXDTO(PayDataBudget, "DrawerStatus"));
		ПлатежВБюджет.Вставить("ПоказательКБК", ЗначениеСвойстваXDTO(PayDataBudget, "CBC"));
		ПлатежВБюджет.Вставить("ОКТМО", ЗначениеСвойстваXDTO(PayDataBudget, "OKTMO"));
		ПлатежВБюджет.Вставить("ПоказательОснования", ЗначениеСвойстваXDTO(PayDataBudget, "Reason"));
		ПлатежВБюджет.Вставить("ПоказательПериода", ЗначениеСвойстваXDTO(PayDataBudget, "TaxPeriod"));
		ПлатежВБюджет.Вставить("ПоказательНомера", ЗначениеСвойстваXDTO(PayDataBudget, "DocNo"));
		ПлатежВБюджет.Вставить("ПоказательДаты", ЗначениеСвойстваXDTO(PayDataBudget, "DocDate"));
		ПлатежВБюджет.Вставить("КодВыплат", ЗначениеСвойстваXDTO(PayDataBudget, "PayType"));
		НовСтрока.ПлатежВБюджет = ПлатежВБюджет;
	КонецЕсли;
	
	Если ЭтоПлатежноеТребование Тогда
		ПлатежноеТребование = Новый Структура;
		ПлатежноеТребование.Вставить("УсловиеОплаты", ЗначениеСвойстваXDTO(PayData, "PaymentCondition"));
		СрокАкцепта = ЗначениеСвойстваXDTO(PayData, "AcceptTerm");
		Если СрокАкцепта <> Неопределено Тогда
			ПлатежноеТребование.Вставить("СрокАкцепта", Число(СрокАкцепта));
		КонецЕсли;
		ПлатежноеТребование.Вставить("ДатаОтсылки", ЗначениеСвойстваXDTO(PayData, "DocDispatchDate"));
		НовСтрока.ПлатежноеТребование = ПлатежноеТребование;
	КонецЕсли;
	
	Если ЭтоПлатежныйОрдер Тогда
		ПлатежныйОрдер = Новый Структура;
		ПлатежныйОрдер.Вставить("СодержаниеОперации", ЗначениеСвойстваXDTO(PayData, "TransitionContent"));
		ПлатежныйОрдер.Вставить("НомерЧастичногоПлатежа", ЗначениеСвойстваXDTO(PayData, "PartialPaymentNo"));
		ПлатежныйОрдер.Вставить("ШифрПлатежногоДокумента", ЗначениеСвойстваXDTO(PayData, "PartialTransitionKind"));
		СуммаОстаткаПлатежа = ЗначениеСвойстваXDTO(PayData, "SumResidualPayment");
		Если СуммаОстаткаПлатежа <> Неопределено Тогда
			ПлатежныйОрдер.Вставить("СуммаОстаткаПлатежа", Число(СуммаОстаткаПлатежа));
		КонецЕсли;
		ПлатежныйОрдер.Вставить("НомерПлатежногоДокумента", ЗначениеСвойстваXDTO(PayData, "PartialDocNo"));
		ПлатежныйОрдер.Вставить("ДатаПлатежногоДокумента", ЗначениеСвойстваXDTO(PayData, "PartialDocDate"));
		НовСтрока.ПлатежныйОрдер = ПлатежныйОрдер;
	КонецЕсли;
	
	Если ЭтоМемориальныйОрдер Тогда
		
		Payee = ЗначениеСвойстваXDTO(PayData, "Author");
		Если Payee <> Неопределено Тогда
			Получатель = Новый Структура;
			Получатель.Вставить("Наименование", ЗначениеСвойстваXDTO(Payee, "Name"));
			Получатель.Вставить("РасчСчет", ЗначениеСвойстваXDTO(Payee, "CorrespAcc"));
			БанкПолучателя = Новый Структура;
			БанкПолучателя.Вставить("БИК", ЗначениеСвойстваXDTO(Payee, "BIC"));
			БанкПолучателя.Вставить("Наименование", ЗначениеСвойстваXDTO(Payee, "Name"));
			БанкПолучателя.Вставить("Город", ЗначениеСвойстваXDTO(Payee, "City"));
			БанкПолучателя.Вставить("КоррСчет", ЗначениеСвойстваXDTO(Payee, "CorrespAcc"));
			Получатель.Вставить("Банк", БанкПолучателя);
		КонецЕсли;
		
		МемориальныйОрдер = Новый Структура;
		МемориальныйОрдер.Вставить("ШифрДокумента", ЗначениеСвойстваXDTO(PayData, "PartialTransitionKind"));
		МемориальныйОрдер.Вставить("СодержаниеОперации", ЗначениеСвойстваXDTO(PayData, "TransitionContent"));
		
		Плательщик = Новый Структура;
		Плательщик.Вставить("Наименование", ЗначениеСвойстваXDTO(ЭД.Recipient, "name"));
		Плательщик.Вставить("ИНН", ЗначениеСвойстваXDTO(ЭД.Recipient, "inn"));
		Плательщик.Вставить("КПП", ЗначениеСвойстваXDTO(ЭД.Recipient, "kpp"));
		Плательщик.Вставить("РасчСчет", ЭД.Data.Account);
		БанкПлательщика = Новый Структура;
		БанкПлательщика.Вставить("БИК", ЭД.Data.Bank.Bic);
		БанкПлательщика.Вставить("Наименование", ЗначениеСвойстваXDTO(ЭД.Data.Bank, "Name"));
		БанкПлательщика.Вставить("Город", ЗначениеСвойстваXDTO(ЭД.Data.Bank, "City"));
		БанкПлательщика.Вставить("КоррСчет", ЗначениеСвойстваXDTO(ЭД.Data.Bank, "CorrespAcc"));
		Плательщик.Вставить("Банк", БанкПлательщика);
		
		Если Operation.DC = "1" Тогда // списание с лиц.счета
			НовСтрока.Получатель = Получатель;
			НовСтрока.Плательщик = Плательщик;
		ИначеЕсли Operation.DC = "2" Тогда // поступление на лиц.счет
			НовСтрока.Получатель = Плательщик;
			НовСтрока.Плательщик = Получатель;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьВыпискуClientBankExchange(ЭД, ТаблицаВыписок)
	
	СтрокаВыписки = ТаблицаВыписок.Добавить();
	
	ДатаСоставления = ЭД.ДатаСоздания;
	ВремяСоставления = ЭД.ВремяСоздания;
	
	Организация = Новый Структура;
	Организация.Вставить("Наименование",  ЭД.Получатель);
	СтрокаВыписки.Организация = Организация;
	
	Банк = Новый Структура;
	Банк.Вставить("Наименование", ЭД.Отправитель);
	СтрокаВыписки.Банк = Банк;
	
	Если ЗначениеЗаполнено(ДатаСоставления) Тогда
		СтрокаВыписки.ДатаФормирования = Формат(ДатаСоставления, "ДЛФ=D") + " " + Формат(ВремяСоставления, "ДЛФ=T");
	КонецЕсли;
	
	Если ЭД.УсловияОтбора <> Неопределено Тогда
		СтрокаВыписки.НачалоПериода = ЭД.УсловияОтбора.ДатаНачала;
		СтрокаВыписки.КонецПериода = ЭД.УсловияОтбора.ДатаКонца;
	КонецЕсли;
		
	Если ЭД.СекцияРасчСчет <> Неопределено И ЭД.СекцияРасчСчет.РасчСчета.Количество() Тогда
		ИнформацияПоСчету = ЭД.СекцияРасчСчет.РасчСчета.Получить(0);
		СтрокаВыписки.НомерСчета = ИнформацияПоСчету.РасчСчет;
		СтрокаВыписки.НачальныйОстаток = ИнформацияПоСчету.НачальныйОстаток;
		СтрокаВыписки.ОборотВходящихПлатежей = ИнформацияПоСчету.ВсегоПоступило;
		СтрокаВыписки.ОборотИсходящихПлатежей = ИнформацияПоСчету.ВсегоСписано;
		СтрокаВыписки.КонечныйОстаток = ИнформацияПоСчету.КонечныйОстаток;
		Если Не ЗначениеЗаполнено(СтрокаВыписки.НачалоПериода) И ЗначениеЗаполнено(ЭД.СекцияРасчСчет.ДатаНачала) Тогда
			СтрокаВыписки.НачалоПериода = ЭД.СекцияРасчСчет.ДатаНачала;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаВыписки.КонецПериода) И ЗначениеЗаполнено(ЭД.СекцияРасчСчет.ДатаКонца) Тогда
			СтрокаВыписки.КонецПериода = ЭД.СекцияРасчСчет.ДатаКонца;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаОпераций = ТаблицаОперацийВыписки();
	
	Для Каждого Операция Из ЭД.СекцияПлатежногоДокумента Цикл
		НовСтрока = ТаблицаОпераций.Добавить();
		НовСтрока.ВидДокумента = Операция.СекцияДокумент;
		НовСтрока.ДатаДокумента = Операция.Дата;
		НовСтрока.СуммаДокумента = Операция.Сумма;
		НовСтрока.Статус = "1";
		НовСтрока.НомерДокумента = Операция.Номер;
		
		Плательщик = Новый Структура;
		Плательщик.Вставить("Наименование", Операция.РеквизитыПлательщика.Плательщик);
		Плательщик.Вставить("ИНН", Операция.РеквизитыПлательщика.ПлательщикИНН);
		Плательщик.Вставить("КПП", Операция.РеквизитыПлательщика.ПлательщикКПП);
		Плательщик.Вставить("РасчСчет", Операция.РеквизитыПлательщика.ПлательщикСчет);
		Банк = Новый Структура;
		Банк.Вставить("БИК", Операция.РеквизитыПлательщика.ПлательщикБИК);
		Банк.Вставить("Наименование", Операция.РеквизитыПлательщика.Плательщик3);
		Банк.Вставить("КоррСчет", Операция.РеквизитыПлательщика.ПлательщикРасчСчет);
		Плательщик.Вставить("Банк", Банк);
		НовСтрока.Плательщик = Плательщик;
		
		Получатель = Новый Структура;
		Получатель.Вставить("Наименование", Операция.РеквизитыПолучателя.Получатель);
		Получатель.Вставить("ИНН", Операция.РеквизитыПолучателя.ПолучательИНН);
		Получатель.Вставить("КПП", Операция.РеквизитыПолучателя.ПолучательКПП);
		Получатель.Вставить("РасчСчет", Операция.РеквизитыПолучателя.ПолучательСчет);
		Банк = Новый Структура;
		Банк.Вставить("БИК", Операция.РеквизитыПолучателя.ПолучательБИК);
		Банк.Вставить("Наименование", Операция.РеквизитыПолучателя.Получатель3);
		Банк.Вставить("КоррСчет", Операция.РеквизитыПолучателя.ПолучательРасчСчет);
		Получатель.Вставить("Банк", Банк);
		НовСтрока.Получатель = Получатель;
		Если Операция.РеквизитыПлатежа <> Неопределено Тогда
			НовСтрока.НазначениеПлатежа = Операция.РеквизитыПлатежа.НазначениеПлатежа;
			НовСтрока.ВидПлатежа = Операция.РеквизитыПлатежа.ВидПлатежа;
			НовСтрока.ВидОперации = Операция.РеквизитыПлатежа.ВидОплаты;
			НовСтрока.Очередность = Операция.РеквизитыПлатежа.Очередность;
			НовСтрока.УникальныйИдентификаторПлатежа = Операция.РеквизитыПлатежа.Код;
		КонецЕсли;
		СтрокаВыписки.Операции = ТаблицаОпераций;
		
		Если Плательщик.РасчСчет = СтрокаВыписки.НомерСчета Тогда
			НовСтрока.ДатаОперации = ЗначениеСвойстваXDTO(Операция.РеквизитыПлательщика.ДатаСписано, "__content");
			НовСтрока.НаправлениеПлатежа = "1";
		Иначе
			НовСтрока.ДатаОперации = ЗначениеСвойстваXDTO(Операция.РеквизитыПолучателя.ДатаПоступило, "__content");
			НовСтрока.НаправлениеПлатежа = "2";
		КонецЕсли;
		
		Если Операция.ПлатежиВБюджет <> Неопределено Тогда
			ПлатежВБюджет = Новый Структура;
			ПлатежВБюджет.Вставить("СтатусСоставителя", Операция.ПлатежиВБюджет.СтатусСоставителя);
			ПлатежВБюджет.Вставить("ПоказательКБК", Операция.ПлатежиВБюджет.ПоказательКБК);
			ПлатежВБюджет.Вставить("ОКТМО", Операция.ПлатежиВБюджет.ОКАТО);
			ПлатежВБюджет.Вставить("ПоказательОснования", Операция.ПлатежиВБюджет.ПоказательОснования);
			ПлатежВБюджет.Вставить("ПоказательПериода", Операция.ПлатежиВБюджет.ПоказательПериода);
			ПлатежВБюджет.Вставить("ПоказательНомера", Операция.ПлатежиВБюджет.ПоказательНомера);
			ПлатежВБюджет.Вставить("ПоказательДаты", Операция.ПлатежиВБюджет.ПоказательДаты);
			ПлатежВБюджет.Вставить("КодВыплат", Операция.ПлатежиВБюджет.ПоказательТипа);
			НовСтрока.ПлатежВБюджет = ПлатежВБюджет;
		КонецЕсли;
		
		Если Операция.ДополнительныеРеквизиты <> Неопределено Тогда
			Если ЗначениеЗаполнено(Операция.ДополнительныеРеквизиты.УсловиеОплаты) Тогда
				ПлатежноеТребование = Новый Структура;
				ПлатежноеТребование.Вставить("СрокАкцепта", Операция.ДополнительныеРеквизиты.СрокАкцепта);
				ПлатежноеТребование.Вставить("УсловиеОплаты", Операция.ДополнительныеРеквизиты.УсловиеОплаты);
				ПлатежноеТребование.Вставить("ДатаОтсылки", Операция.ДополнительныеРеквизиты.ДатаОтсылкиДок);
				НовСтрока.ПлатежноеТребование = ПлатежноеТребование;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьВыпискуСбербанк(ЭД, ТаблицаВыписок)
	
	СтрокаВыписки = ТаблицаВыписок.Добавить();
	
	СтрокаВыписки.ДатаФормирования = Формат(XMLЗначение(Тип("Дата"), ЭД.stmtDateTime), "ДЛФ=DT");
	СтрокаВыписки.НачалоПериода = XMLЗначение(Тип("Дата"), ЭД.beginDate);
	СтрокаВыписки.КонецПериода = XMLЗначение(Тип("Дата"), ЭД.endDate);
	СтрокаВыписки.НомерСчета = ЭД.Acc;
	
	НаименованиеОрганизации = ЗначениеСвойстваXDTO(ЭД, "orgName");
	Если ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
		Организация = Новый Структура;
		Организация.Вставить("Наименование", НаименованиеОрганизации);
		СтрокаВыписки.Организация = Организация;
	КонецЕсли;

	БИК = ЗначениеСвойстваXDTO(ЭД, "bic");
	Если ЗначениеЗаполнено(БИК) Тогда
		Банк = Новый Структура;
		Банк.Вставить("БИК", БИК);
		СтрокаВыписки.Банк = Банк;
	КонецЕсли;
	
	НачальныйОстаток = ЗначениеСвойстваXDTO(ЭД, "enterBal");
	НачальныйОстаток = ?(НачальныйОстаток = Неопределено, НачальныйОстаток, Число(НачальныйОстаток));
	СтрокаВыписки.НачальныйОстаток = НачальныйОстаток;
	ВсегоПоступило = ?(ЭД.debetSum = Неопределено, ЭД.creditSum, Число(ЭД.creditSum));
	СтрокаВыписки.ОборотВходящихПлатежей = ВсегоПоступило;
	ВсегоСписано = ?(ЭД.debetSum = Неопределено, ЭД.debetSum, Число(ЭД.debetSum));
	СтрокаВыписки.ОборотИсходящихПлатежей = ВсегоСписано;
	КонечныйОстаток = ЗначениеСвойстваXDTO(ЭД, "outBal");
	КонечныйОстаток = ?(КонечныйОстаток = Неопределено, КонечныйОстаток, Число(КонечныйОстаток));
	СтрокаВыписки.КонечныйОстаток = КонечныйОстаток;
	
	Если ЗначениеСвойстваXDTO(ЭД, "Docs") <> Неопределено Тогда
		ОперацииXDTO = ЗначениеСвойстваXDTO(ЭД, "Docs.TransInfo");
		Если ТипЗнч(ОперацииXDTO) = Тип("ОбъектXDTO") Тогда
			Операции = Новый Массив;
			Операции.Добавить(ОперацииXDTO);
		Иначе
			Операции = ОперацииXDTO;
		КонецЕсли;
		
		ТаблицаОпераций = ТаблицаОперацийВыписки();
		Для Каждого Операция Из Операции Цикл
			НовСтрока = ТаблицаОпераций.Добавить();
			НовСтрока.Статус = "1";
			ПлатежИсходящий = XMLЗначение(Тип("Булево"), Операция.dc);
			НовСтрока.НаправлениеПлатежа = ?(ПлатежИсходящий, "1", "2");
			НовСтрока.ДатаОперации = XMLЗначение(Тип("Дата"), Операция.carryDate);
			НовСтрока.ДатаДокумента = XMLЗначение(Тип("Дата"), Операция.docDate);
			НовСтрока.НомерДокумента = Операция.docNum;
			НовСтрока.СуммаДокумента = ?(Операция.docSum = Неопределено, 0, Число(Операция.docSum));
			НовСтрока.ВидПлатежа = ЗначениеСвойстваXDTO(Операция, "paytKind");
			НовСтрока.Очередность = ЗначениеСвойстваXDTO(Операция, "paymentOrder");
			НовСтрока.ВидОперации = Операция.transKind;
			НовСтрока.УникальныйИдентификаторПлатежа = ЗначениеСвойстваXDTO(Операция, "uip");
			Плательщик = Новый Структура;
			Плательщик.Вставить("Наименование", ЗначениеСвойстваXDTO(Операция, "payerName"));
			Плательщик.Вставить("ИНН", ЗначениеСвойстваXDTO(Операция, "payerINN"));
			Плательщик.Вставить("КПП", ЗначениеСвойстваXDTO(Операция, "payerKPP"));
			Плательщик.Вставить("РасчСчет", Операция.payerAcc);
			БанкПлательщика = Новый Структура;
			БанкПлательщика.Вставить("БИК", ЗначениеСвойстваXDTO(Операция, "payerBankBic"));
			БанкПлательщика.Вставить("Наименование", ЗначениеСвойстваXDTO(Операция, "payerBankName"));
			БанкПлательщика.Вставить("КоррСчет", ЗначениеСвойстваXDTO(Операция, "payerBankCorrAcc"));
			Плательщик.Вставить("Банк", БанкПлательщика);
			НовСтрока.Плательщик = Плательщик;
			Получатель = Новый Структура;
			Получатель.Вставить("Наименование", ЗначениеСвойстваXDTO(Операция, "payeeName"));
			Получатель.Вставить("ИНН", ЗначениеСвойстваXDTO(Операция, "payeeINN"));
			Получатель.Вставить("КПП", ЗначениеСвойстваXDTO(Операция, "payeeKPP"));
			Получатель.Вставить("РасчСчет", Операция.payeeAcc);
			БанкПолучателя = Новый Структура;
			БанкПолучателя.Вставить("БИК", ЗначениеСвойстваXDTO(Операция, "payeeBankBic"));
			БанкПолучателя.Вставить("Наименование", ЗначениеСвойстваXDTO(Операция, "payeeBankName"));
			БанкПолучателя.Вставить("КоррСчет", ЗначениеСвойстваXDTO(Операция, "payeeBankCorrAcc"));
			Получатель.Вставить("Банк", БанкПолучателя);
			НовСтрока.Получатель = Получатель;
			НовСтрока.НазначениеПлатежа = ЗначениеСвойстваXDTO(Операция, "purpose");
			Если ЗначениеСвойстваXDTO(Операция, "DepartmentalInfo") <> Неопределено Тогда
				ПлатежВБюджет = Новый Структура;
				ПлатежВБюджет.Вставить("СтатусСоставителя", ЗначениеСвойстваXDTO(Операция, "DepartmentalInfo.drawerStatus"));
				ПлатежВБюджет.Вставить("ПоказательКБК", ЗначениеСвойстваXDTO(Операция, "DepartmentalInfo.cbc"));
				ПлатежВБюджет.Вставить("ОКТМО", ЗначениеСвойстваXDTO(Операция, "DepartmentalInfo.okato"));
				ПлатежВБюджет.Вставить("ПоказательОснования", ЗначениеСвойстваXDTO(Операция, "DepartmentalInfo.paytReason"));
				ПлатежВБюджет.Вставить("ПоказательПериода", ЗначениеСвойстваXDTO(Операция, "DepartmentalInfo.taxPeriod"));
				ПлатежВБюджет.Вставить("ПоказательНомера", ЗначениеСвойстваXDTO(Операция, "DepartmentalInfo.docNo"));
				ПлатежВБюджет.Вставить("ПоказательДаты", ЗначениеСвойстваXDTO(Операция, "DepartmentalInfo.docDate"));
				ПлатежВБюджет.Вставить("КодВыплат", ЗначениеСвойстваXDTO(Операция, "DepartmentalInfo.taxPaytKind"));
				НовСтрока.ПлатежВБюджет = ПлатежВБюджет;
			КонецЕсли;
		КонецЦикла;
		СтрокаВыписки.Операции = ТаблицаОпераций;
	КонецЕсли;
	
	Если НЕ ЗначениеСвойстваXDTO(ЭД, "InfoForStamp") = Неопределено Тогда
		ПараметрыШтампа = Новый Структура;
		ПараметрыШтампа.Вставить("БИК", ЭД.bic);
		НаименованиеБанка = ЗначениеСвойстваXDTO(ЭД, "InfoForStamp.BankName");
		ПараметрыШтампа.Вставить("НаименованиеБанка", НаименованиеБанка);
		ГородБанка = ЗначениеСвойстваXDTO(ЭД, "InfoForStamp.BranchName");
		ПараметрыШтампа.Вставить("ГородБанка", ГородБанка);
		Офис = ЗначениеСвойстваXDTO(ЭД, "InfoForStamp.SubBranchName");
		ПараметрыШтампа.Вставить("Офис", Офис);
		Филиал = ЗначениеСвойстваXDTO(ЭД, "InfoForStamp.SubBranchNum");
		ПараметрыШтампа.Вставить("ОтделениеБанка", Филиал);
		СтрокаВыписки.Штамп = ПараметрыШтампа;
	КонецЕсли;

КонецПроцедуры

// Возвращает формат временем для России.
// Не исправлять, т.к это не является ошибкой.
// 
// Возвращаемое значение:
//  Строка - формат времени для России
//
Функция ФорматВремениРоссия()
	
	Возврат "HH:mm:ss";
	
КонецФункции

#Область Прочее

Функция СоответствиеВидовЭД()
	
	СоответствиеВозврата = Новый Соответствие;
	СоответствиеВозврата.Вставить(Перечисления["ВидыЭД"].УдалитьДопДанные,
		Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
	СоответствиеВозврата.Вставить(Перечисления["ВидыЭД"].УдалитьВыпискаБанка, Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьЗапросВыписки, Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
	СоответствиеВозврата.Вставить(Перечисления["ВидыЭД"].УдалитьЗапросЗонд, Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьЗапросНаОтзывЭД, Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьЗапросОСостоянииЭД, Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьИзвещениеОСостоянииЭД, Перечисления.ВидыЭДОбменСБанками.ИзвещениеОСостоянииЭД);
	СоответствиеВозврата.Вставить(Перечисления["ВидыЭД"].УдалитьКвитанция, Перечисления.ВидыЭДОбменСБанками.Квитанция);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьПлатежноеПоручение, Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение);
	СоответствиеВозврата.Вставить(
		Перечисления["ВидыЭД"].УдалитьПлатежноеТребование, Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование);
		
	Возврат СоответствиеВозврата
		
КонецФункции

Функция СоответствиеСостояний()
	
	СоответствиеВозврата = Новый Соответствие;
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].Аннулирован, Перечисления.СостоянияОбменСБанками.Аннулирован);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].НаПодписи, Перечисления.СостоянияОбменСБанками.НаПодписи);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].НаУтверждении, Перечисления.СостоянияОбменСБанками.НаПодписи);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].НеСформирован, Перечисления.СостоянияОбменСБанками.НеСформирован);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].УдалитьОжидаетсяВыписка, Перечисления.СостоянияОбменСБанками.ОжидаетсяВыписка);
	СоответствиеВозврата.Вставить(Перечисления["СостоянияВерсийЭД"].ОжидаетсяИзвещениеОПолучении,
		Перечисления.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].УдалитьОжидаетсяИсполнение, Перечисления.СостоянияОбменСБанками.ОжидаетсяИсполнение);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].ОжидаетсяОтправка, Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка);
	СоответствиеВозврата.Вставить(Перечисления["СостоянияВерсийЭД"].Отклонен, Перечисления.СостоянияОбменСБанками.Отклонен);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].ОшибкаПередачи, Перечисления.СостоянияОбменСБанками.ОшибкаПередачи);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].УдалитьПлатежИсполнен, Перечисления.СостоянияОбменСБанками.ПлатежИсполнен);
	СоответствиеВозврата.Вставить(
		Перечисления["СостоянияВерсийЭД"].УдалитьТребуетсяПодтверждение, Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение);
	
	Возврат СоответствиеВозврата
		
КонецФункции

Функция СоответствиеСтатусов()
	
	СоответствиеВозврата = Новый Соответствие;
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Аннулирован, Перечисления.СтатусыОбменСБанками.Аннулирован);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Доставлен, Перечисления.СтатусыОбменСБанками.Доставлен);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].НеСформирован, Перечисления.СтатусыОбменСБанками.НеСформирован);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Обработан, Перечисления.СтатусыОбменСБанками.Обработан);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Отклонен, Перечисления.СтатусыОбменСБанками.Отклонен);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Отправлен, Перечисления.СтатусыОбменСБанками.Отправлен);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].ОшибкаПередачи, Перечисления.СтатусыОбменСБанками.ОшибкаПередачи);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].ПодготовленКОтправке, Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Подписан, Перечисления.СтатусыОбменСБанками.Подписан);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Получен, Перечисления.СтатусыОбменСБанками.Получен);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Принят, Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Сформирован, Перечисления.СтатусыОбменСБанками.Сформирован);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].Утвержден, Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
	СоответствиеВозврата.Вставить(Перечисления["СтатусыЭД"].УдалитьИсполнен, Перечисления.СтатусыОбменСБанками.Исполнен);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьКартотека2, Перечисления.СтатусыОбменСБанками.Приостановлен);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьОтказанАБС, Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьОтклоненБанком, Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьОшибкаРеквизитов, Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьПодтвержден, Перечисления.СтатусыОбменСБанками.Подтвержден);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьПриостановлен, Перечисления.СтатусыОбменСБанками.Приостановлен);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].УдалитьЭПНеВерна, Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить(
		Перечисления["СтатусыЭД"].ЧастичноПодписан, Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
	Возврат СоответствиеВозврата
		
КонецФункции

Функция ПредставлениеЭД(Наименование, ВидЭД, СсылкаНаОбъект)
	
	ПутьКСправочникуСоглашенийЭД = "СправочникСсылка.УдалитьСоглашенияОбИспользованииЭД";
	
	Если СсылкаНаОбъект = Неопределено ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип(ПутьКСправочникуСоглашенийЭД) Тогда
		Возврат Наименование;
	КонецЕсли;
	
	ШаблонПредставленияЭД = НСтр("ru = '%1 %2 от %3'");
	
	ПечатныйНомерДокумента = ""; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, ПечатныйНомерДокумента);
	
	ДатаСтрокой = Формат(СсылкаНаОбъект.Дата, "ДЛФ=D");
	СтрокаИмениФайла = СтрШаблон(ШаблонПредставленияЭД, ВидЭД, ПечатныйНомерДокумента, ДатаСтрокой);
	
	Возврат СтрокаИмениФайла;
	
КонецФункции

#КонецОбласти

#Область ОбработкаВыписки

Функция ТаблицаОперацийВыписки()
	
	ТаблицаОпераций = Новый ТаблицаЗначений;
	ТаблицаОпераций.Колонки.Добавить("Статус");
	ТаблицаОпераций.Колонки.Добавить("НаправлениеПлатежа");
	ТаблицаОпераций.Колонки.Добавить("ДатаДокумента");
	ТаблицаОпераций.Колонки.Добавить("ДатаОперации");
	ТаблицаОпераций.Колонки.Добавить("ДатаВалютирования");
	ТаблицаОпераций.Колонки.Добавить("НомерДокумента");
	ТаблицаОпераций.Колонки.Добавить("СуммаДокумента");
	ТаблицаОпераций.Колонки.Добавить("ИдентификаторДокумента");
	ТаблицаОпераций.Колонки.Добавить("Плательщик");
	ТаблицаОпераций.Колонки.Добавить("Получатель");
	ТаблицаОпераций.Колонки.Добавить("НазначениеПлатежа");
	ТаблицаОпераций.Колонки.Добавить("ВидДокумента");
	ТаблицаОпераций.Колонки.Добавить("ВидОперации");
	ТаблицаОпераций.Колонки.Добавить("ВидПлатежа");
	ТаблицаОпераций.Колонки.Добавить("УникальныйИдентификаторПлатежа");
	ТаблицаОпераций.Колонки.Добавить("Очередность");
	ТаблицаОпераций.Колонки.Добавить("ПлатежВБюджет");
	ТаблицаОпераций.Колонки.Добавить("ПлатежноеТребование");
	ТаблицаОпераций.Колонки.Добавить("ПлатежныйОрдер");

	Возврат ТаблицаОпераций;
	
КонецФункции

// Читает данные выписки из формата ISO в таблицу значений
//
// Параметры:
//  ЭД - ОбъектXDTO - данные электронного документа
//  ТаблицаВыписок - ТаблицаЗначений - данные из выписки в виде таблицы значений.
//
Процедура ПрочитатьВыпискуISO(ЭД, ТаблицаВыписок)
	
	Если ТипЗнч(ЭД.BkToCstmrStmt.Stmt) = Тип("ОбъектXDTO") Тогда
		Выписки = Новый Массив;
		Выписки.Добавить(ЭД.BkToCstmrStmt.Stmt);
	Иначе
		Выписки = ЭД.BkToCstmrStmt.Stmt;
	КонецЕсли;
	
	Для Каждого Выписка Из Выписки Цикл
		СтрокаВыписки = ТаблицаВыписок.Добавить();
		
		СтрокаВыписки.ДатаФормирования = Формат(XMLЗначение(Тип("Дата"), Выписка.CreDtTm), "ДЛФ=DT");
		Если Выписка.Свойства().Получить("FrToDt") <> Неопределено Тогда
			СтрокаВыписки.НачалоПериода = XMLЗначение(Тип("Дата"), Выписка.FrToDt.FrDtTm);
			СтрокаВыписки.КонецПериода = XMLЗначение(Тип("Дата"), Выписка.FrToDt.ToDtTm);
		КонецЕсли;
		
		IBAN = ЗначениеСвойстваXDTO(Выписка.Acct.Id, "IBAN");
		Если IBAN <> Неопределено Тогда
			СтрокаВыписки.НомерСчета = IBAN;
		Иначе
			СтрокаВыписки.НомерСчета = ЗначениеСвойстваXDTO(Выписка.Acct.Id, "Othr.Id");
		КонецЕсли;
		
		Организация = Новый Структура;
		
		Nm = ЗначениеСвойстваXDTO(Выписка.Acct, "Nm");
		Если Nm <> Неопределено Тогда
			Организация.Вставить("Наименование", Nm);
		КонецЕсли;
		
		Если ЗначениеСвойстваXDTO(Выписка.Acct, "Ownr") <> Неопределено Тогда // владелец счета
			Если ЗначениеСвойстваXDTO(Выписка.Acct.Ownr, "Nm") <> Неопределено Тогда
				Организация.Вставить("НаименованиеМеждународное", Выписка.Acct.Ownr.Nm);
			КонецЕсли;
			
			Если ЗначениеСвойстваXDTO(Выписка.Acct.Ownr, "Id.OrgId.Othr.Id") <> Неопределено Тогда
				Организация.Вставить("ИНН", Выписка.Acct.Ownr.Id.OrgId.Othr.Id);
			КонецЕсли;
		КонецЕсли;
		
		Если Организация.Количество() Тогда
			СтрокаВыписки.Организация = Организация;
		КонецЕсли;
		
		Если ЗначениеСвойстваXDTO(Выписка.Acct, "Svcr") <> Неопределено Тогда // обслуживающий банк
			Банк = Новый Структура;
			Если ЗначениеСвойстваXDTO(Выписка.Acct.Svcr.FinInstnId, "BIC") <> Неопределено Тогда
				Банк.Вставить("SWIFT", Выписка.Acct.Svcr.FinInstnId.BIC);
			КонецЕсли;
			
			Если ЗначениеСвойстваXDTO(Выписка.Acct.Svcr.FinInstnId, "Nm") <> Неопределено Тогда
				Банк.Вставить("НаименованиеМеждународное", Выписка.Acct.Svcr.FinInstnId.Nm);
			КонецЕсли;
			
			Если ЗначениеСвойстваXDTO(Выписка.Acct.Svcr.FinInstnId, "ClrSysMmbId") <> Неопределено Тогда
				Банк.Вставить("БИК", Выписка.Acct.Svcr.FinInstnId.ClrSysMmbId.MmbId);
			КонецЕсли;
			
			Если Банк.Количество() Тогда
				СтрокаВыписки.Банк = Банк;
			КонецЕсли;
			
		КонецЕсли;

		// Остатки
		Если ТипЗнч(Выписка.Bal) = Тип("ОбъектXDTO") Тогда
			Балансы = Новый Массив;
			Балансы.Добавить(Выписка.Bal);
		Иначе
			Балансы = Выписка.Bal;
		КонецЕсли;
		
		Для Каждого Баланс Из Балансы Цикл
			
			Если ЗначениеСвойстваXDTO(Баланс.Tp.CdOrPrtry, "Cd") <> Неопределено Тогда
				СуммаСтрокой = Баланс.Amt.Последовательность().ПолучитьТекст(0);
				Если Баланс.Tp.CdOrPrtry.Cd = "OPBD" Тогда
					СтрокаВыписки.НачальныйОстаток = XMLЗначение(Тип("Число"), СуммаСтрокой);
				ИначеЕсли Баланс.Tp.CdOrPrtry.Cd = "CLBD" Тогда
					СтрокаВыписки.КонечныйОстаток = XMLЗначение(Тип("Число"), СуммаСтрокой);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Обороты
		Если ЗначениеСвойстваXDTO(Выписка, "TxsSummry") <> Неопределено Тогда
			Если ЗначениеСвойстваXDTO(Выписка.TxsSummry, "TtlCdtNtries.Sum") <> Неопределено Тогда
				СтрокаВыписки.ОборотВходящихПлатежей = XMLЗначение(Тип("Число"), Выписка.TxsSummry.TtlCdtNtries.Sum);
			КонецЕсли;
			Если ЗначениеСвойстваXDTO(Выписка.TxsSummry, "TtlDbtNtries.Sum") <> Неопределено Тогда
					СтрокаВыписки.ОборотИсходящихПлатежей = XMLЗначение(Тип("Число"), Выписка.TxsSummry.TtlDbtNtries.Sum);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеСвойстваXDTO(Выписка, "Ntry") <> Неопределено Тогда
			Если ТипЗнч(Выписка.Ntry) = Тип("ОбъектXDTO") Тогда
				Операции = Новый Массив;
				Операции.Добавить(Выписка.Ntry);
			Иначе
				Операции = Выписка.Ntry;
			КонецЕсли;
			
			ТаблицаОпераций = Новый ТаблицаЗначений;
			ТаблицаОпераций.Колонки.Добавить("Статус");
			ТаблицаОпераций.Колонки.Добавить("НаправлениеПлатежа");
			ТаблицаОпераций.Колонки.Добавить("ДатаДокумента");
			ТаблицаОпераций.Колонки.Добавить("ДатаОперации");
			ТаблицаОпераций.Колонки.Добавить("ДатаВалютирования");
			ТаблицаОпераций.Колонки.Добавить("НомерДокумента");
			ТаблицаОпераций.Колонки.Добавить("СуммаДокумента");
			ТаблицаОпераций.Колонки.Добавить("ИдентификаторДокумента");
			ТаблицаОпераций.Колонки.Добавить("Плательщик");
			ТаблицаОпераций.Колонки.Добавить("Получатель");
			ТаблицаОпераций.Колонки.Добавить("НазначениеПлатежа");
			
			Для Каждого Операция Из Операции Цикл
				// Если платеж не исполнен, то пропускаем его
				Если Операция.Sts <> "BOOK" Тогда
					Продолжить;
				КонецЕсли;
				НовСтрока = ТаблицаОпераций.Добавить();
				СуммаСтрокой = Операция.Amt.Последовательность().ПолучитьТекст(0);
				НовСтрока.СуммаДокумента = XMLЗначение(Тип("Число"), СуммаСтрокой);
				НовСтрока.НаправлениеПлатежа = ?(Операция.CdtDbtInd = "DBIT", "1", "2");
				НовСтрока.Статус = ?(Операция.Sts = "BOOK", "1", "0");
				Если ЗначениеСвойстваXDTO(Операция, "BookgDt") <> Неопределено Тогда
					ДатаОперацииСтрокой = ?(ЗначениеСвойстваXDTO(Операция.BookgDt, "Dt") <> Неопределено, Операция.BookgDt.Dt,
						Операция.BookgDt.DtTm);
					НовСтрока.ДатаОперации = XMLЗначение(Тип("Дата"), ДатаОперацииСтрокой);
				КонецЕсли;
			
				Если ЗначениеСвойстваXDTO(Операция, "ValDt") <> Неопределено Тогда
					ДатаВалютированияСтрокой = ?(ЗначениеСвойстваXDTO(Операция.ValDt, "Dt") <> Неопределено, Операция.ValDt.Dt,
						Операция.ValDt.DtTm);
					НовСтрока.ДатаВалютирования = XMLЗначение(Тип("Дата"), ДатаВалютированияСтрокой);
				КонецЕсли;
				
				Если ЗначениеСвойстваXDTO(Операция, "AcctSvcrRef") <> Неопределено Тогда
					НовСтрока.ИдентификаторДокумента = Операция.AcctSvcrRef;
				КонецЕсли;
				
				Если ЗначениеСвойстваXDTO(Операция, "NtryDtls") <> Неопределено Тогда
					Если ТипЗнч(Операция.NtryDtls) = Тип("ОбъектXDTO") Тогда
						Транзакция = Операция.NtryDtls;
					Иначе
						Транзакция = Операция.NtryDtls[0];
					КонецЕсли;
					Если ЗначениеСвойстваXDTO(Транзакция, "TxDtls") <> Неопределено Тогда
						Если ТипЗнч(Транзакция.TxDtls) = Тип("ОбъектXDTO") Тогда
							ДетальТранзакции = Транзакция.TxDtls;
						Иначе
							ДетальТранзакции = Транзакция.TxDtls[0];
						КонецЕсли;
						
						Если ЗначениеСвойстваXDTO(ДетальТранзакции, "Refs.EndToEndId") <> Неопределено Тогда
							НовСтрока.НомерДокумента = ДетальТранзакции.Refs.EndToEndId;
						КонецЕсли;

						Если ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties") <> Неопределено Тогда // участники платежа
							Плательщик = Новый Структура;
							Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdPties, "Dbtr") <> Неопределено Тогда
								
								Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdPties.Dbtr, "Nm") <> Неопределено Тогда
									Плательщик.Вставить("НаименованиеМеждународное", ДетальТранзакции.RltdPties.Dbtr.Nm);
								КонецЕсли;
								Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdPties.Dbtr, "Id.OrgId.Othr") <> Неопределено Тогда
										Плательщик.Вставить("ИНН", ДетальТранзакции.RltdPties.Dbtr.Id.OrgId.Othr.Id);
								КонецЕсли;
									
								Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdPties.Dbtr, "CtryOfRes") <> Неопределено Тогда
									АдресСтруктурированный = Новый Структура;
									Страна = Новый Структура;
									Страна.Вставить("ISOКод", ДетальТранзакции.RltdPties.Dbtr.CtryOfRes);
									АдресСтруктурированный.Вставить("Страна", Страна);
									Плательщик.Вставить("АдресСтруктурированный", АдресСтруктурированный);
								КонецЕсли;
									
							КонецЕсли;
							
							// Счет плательщика.
							Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdPties, "DbtrAcct.Id.Othr.Id") <> Неопределено Тогда
								Плательщик.Вставить("РасчСчет", ДетальТранзакции.RltdPties.DbtrAcct.Id.Othr.Id);
							ИначеЕсли ЗначениеСвойстваXDTO(ДетальТранзакции.RltdPties, "DbtrAcct.Id.IBAN") <> Неопределено Тогда
								Плательщик.Вставить("РасчСчет", ДетальТранзакции.RltdPties.DbtrAcct.Id.IBAN);
							КонецЕсли;
					
							// Банк плательщика.
							Если Плательщик.Количество() И ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdAgts.DbtrAgt") <> Неопределено Тогда
								
								Банк = Новый Структура;
								
								Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdAgts.DbtrAgt.FinInstnId, "BIC") <> Неопределено Тогда
									Банк.Вставить("SWIFT", ДетальТранзакции.RltdAgts.DbtrAgt.FinInstnId.BIC);
								КонецЕсли;
								
								Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdAgts.DbtrAgt.FinInstnId, "Nm") <> Неопределено Тогда
									Банк.Вставить("НаименованиеМеждународное", ДетальТранзакции.RltdAgts.DbtrAgt.FinInstnId.Nm);
								КонецЕсли;
								
								Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdAgts.DbtrAgt.FinInstnId, "PstlAdr.Ctry") <> Неопределено Тогда
									Страна = Новый Структура;
									Страна.Вставить("ISOКод", ДетальТранзакции.RltdAgts.DbtrAgt.FinInstnId.PstlAdr.Ctry);
									Банк.Вставить("Страна", Страна);
								КонецЕсли;

								Если Банк.Количество() Тогда
									Плательщик.Вставить("Банк", Банк);
								КонецЕсли;
								
							КонецЕсли;

							
							Если Плательщик.Количество() Тогда
								НовСтрока.Плательщик = Плательщик;
							КонецЕсли;
							
							Получатель = Новый Структура;
							Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdPties, "Cdtr") <> Неопределено Тогда
								
								Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdPties.Cdtr, "Nm") <> Неопределено Тогда
									Получатель.Вставить("Наименование", ДетальТранзакции.RltdPties.Cdtr.Nm);
								КонецЕсли;
								Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdPties.Cdtr, "Id.OrgId.Othr") <> Неопределено Тогда
										Получатель.Вставить("ИНН", ДетальТранзакции.RltdPties.Cdtr.Id.OrgId.Othr.Id);
								КонецЕсли;
									
								Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdPties.Cdtr, "CtryOfRes") <> Неопределено Тогда
									АдресСтруктурированный = Новый Структура;
									Страна = Новый Структура;
									Страна.Вставить("ISOКод", ДетальТранзакции.RltdPties.Cdtr.CtryOfRes);
									АдресСтруктурированный.Вставить("Страна", Страна);
									Получатель.Вставить("АдресСтруктурированный", АдресСтруктурированный);
								КонецЕсли;
								
							КонецЕсли;
							
							// Счет получателя.
							Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdPties, "CdtrAcct.Id.Othr.Id") <> Неопределено Тогда
								Получатель.Вставить("РасчСчет", ДетальТранзакции.RltdPties.CdtrAcct.Id.Othr.Id);
							ИначеЕсли ЗначениеСвойстваXDTO(ДетальТранзакции.RltdPties, "CdtrAcct.Id.IBAN") <> Неопределено Тогда
								Получатель.Вставить("РасчСчет", ДетальТранзакции.RltdPties.CdtrAcct.Id.IBAN);
							КонецЕсли;
							
							// Банк получателя.
							Если Получатель.Количество() И ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdAgts.CdtrAgt") <> Неопределено Тогда
								
								Банк = Новый Структура;
								
								Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdAgts.CdtrAgt.FinInstnId, "BIC") <> Неопределено Тогда
									Банк.Вставить("SWIFT", ДетальТранзакции.RltdAgts.CdtrAgt.FinInstnId.BIC);
								КонецЕсли;
								
								Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdAgts.CdtrAgt.FinInstnId, "Nm") <> Неопределено Тогда
									Банк.Вставить("НаименованиеМеждународное", ДетальТранзакции.RltdAgts.CdtrAgt.FinInstnId.Nm);
								КонецЕсли;
								
								Если ЗначениеСвойстваXDTO(ДетальТранзакции.RltdAgts.CdtrAgt.FinInstnId, "PstlAdr.Ctry") <> Неопределено Тогда
										Страна = Новый Структура;
										Страна.Вставить("ISOКод", ДетальТранзакции.RltdAgts.CdtrAgt.FinInstnId.PstlAdr.Ctry);
										Банк.Вставить("Страна", Страна);
								КонецЕсли;

								Если Банк.Количество() Тогда
									Получатель.Вставить("Банк", Банк);
								КонецЕсли;
								
							КонецЕсли;
							
							Если Получатель.Количество() Тогда
								НовСтрока.Получатель = Получатель;
							КонецЕсли;
						КонецЕсли;
						
						Если ЗначениеСвойстваXDTO(ДетальТранзакции, "RmtInf") <> Неопределено Тогда // детали документа
							Если ЗначениеСвойстваXDTO(ДетальТранзакции.RmtInf, "Ustrd") <> Неопределено Тогда // назначение платежа
								Если ТипЗнч(ДетальТранзакции.RmtInf.Ustrd) = Тип("Строка") Тогда
									НазначенияПлатежа = Новый Массив;
									НазначенияПлатежа.Добавить(ДетальТранзакции.RmtInf.Ustrd);
								Иначе
									НазначенияПлатежа = ДетальТранзакции.RmtInf.Ustrd;
								КонецЕсли;
								
								НазначениеПлатежаПолное = "";
								Для Каждого НазначениеПлатежа Из НазначенияПлатежа Цикл
									НазначениеПлатежаПолное = ?(ПустаяСтрока(НазначениеПлатежаПолное), "", НазначениеПлатежаПолное + Символы.ПС);
									НазначениеПлатежаПолное = НазначениеПлатежаПолное + НазначениеПлатежа;
								КонецЦикла;
								
								НовСтрока.НазначениеПлатежа = НазначениеПлатежаПолное;
							КонецЕсли;
							Если ЗначениеСвойстваXDTO(ДетальТранзакции.RmtInf, "Strd.RfrdDocInf.RltdDt") <> Неопределено Тогда // дата документа
								НовСтрока.ДатаДокумента = XMLЗначение(Тип("Дата"), ДетальТранзакции.RmtInf.Strd.RfrdDocInf.RltdDt);
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаВыписки.Операции = ТаблицаОпераций;
			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

Процедура ДобавитьРесурсыИзМакета(Макет, НовыеРазрешения)
	
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	ШаблонОписания = НСтр("ru = 'Обмен с банком %1 по технологии DirectBank.'");
	
	Для Индекс = 2 По КоличествоЗаписей Цикл
		URL = Макет.Область(Индекс, 5).Текст;
		НазваниеБанка = Макет.Область(Индекс, 1).Текст;
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
		ТекстОписания = СтрШаблон(ШаблонОписания, НазваниеБанка);
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса("HTTPS", СтруктураURI.Хост, СтруктураURI.Порт, ТекстОписания);
		НовыеРазрешения.Добавить(Разрешение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти



