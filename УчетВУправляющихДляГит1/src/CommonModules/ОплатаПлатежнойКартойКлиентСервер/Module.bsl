#Область СлужебныеФункцииИПроцедуры

// Возвращает массив видов договоров с контрагентом, которые могут участвуют в подборе договора для видов операции:
// Оплата от покупателя, Возврат покупателя.
//
// Параметры:
//   Форма - УправляемаяФорма
// 
// Возвращаемое значение:
//   Массив - значения: ПеречислениеСсылка.ВидыДоговоровКонтрагентов.
//
Функция ВидыДоговораСКонтрагентом(ВидОперации) Экспорт
	
	ВидыДоговора = Новый Массив;
	
	Если ЭтоРасчетыСКонтрагентом(ВидОперации) Тогда
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	КонецЕсли;
	
	Возврат ВидыДоговора;
	
КонецФункции

// Устанавливает видимость реквизитов формы: группа счетов учета, сделка.
//
// Параметры:
//   Форма - УправляемаяФорма
//
Процедура ВидимостьДоступностьПолейПриИзмененииСпособаПогашения(Форма) Экспорт
	
	Если ОплатаПлатежнойКартойКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		
		Элементы = Форма.Элементы;
		
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.Доступность =
			?(НеПогашатьЗадолженность(Форма.РасшифровкаПлатежаСпособПогашенияЗадолженности), Ложь, Истина);
		Элементы.ГруппаСделка.Видимость =
			ПогашатьЗадолженностьПоДокументу(Форма.РасшифровкаПлатежаСпособПогашенияЗадолженности);
		
	КонецЕсли;

КонецПроцедуры

// Устанавливает надписи в переданной строке платежа.
// Строка должна содержать реквизиты: НадписьВалюта, НадписьКурс, НадписьСумма.
//
// Параметры:
//   СтрокаПлатеж - ДанныеФормыЭлементКоллекции
//
Процедура ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж) Экспорт
	
	СтрокаПлатеж.НадписьВалюта = НСтр("ru = 'Вал.'");
	СтрокаПлатеж.НадписьКурс   = НСтр("ru = 'Курс'");
	СтрокаПлатеж.НадписьСумма  = НСтр("ru = 'Сумма'");
	
КонецПроцедуры

// Переносит строку табличной части РасшифровкаПлатежа в реквизиты однострочной формы, если взведен флаг "ЗаполнитьРеквизитыФормы"
// или, наоборот, заполняет первую строку названной табличной части на основании реквизитов однострочной формы.
//
// Параметры:
//  Форма                    - УправляемаяФорма - однострочная форма ПКО
//  ЗаполнитьРеквизитыФормы	 - Булево - если ИСТИНА, то заполняются реквизиты однострочной формы, если Ложь - первая строка ТЧ
//  СтрокаПлатежа - Структура - данные строки табличной части, являющейся источником изменений.
//
Процедура ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, ЗаполнитьРеквизитыФормы = Ложь,
	СтрокаПлатежа = Неопределено, Расшифровка = Неопределено) Экспорт
	
	Если Не ЗаполнитьРеквизитыФормы И Не Форма.Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.РасшифровкаПлатежа) Тогда
		Если Не ЗаполнитьРеквизитыФормы Тогда
			Возврат;
		ИначеЕсли СтрокаПлатежа = Неопределено Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		Если Не ЗаполнитьРеквизитыФормы И СтрокаПлатежа = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТабличнойЧасти = НаименованиеТабличнойЧасти();
	ШаблонИмяПоля     = НСтр("ru= '%1%2'");
	РеквизитыСуммы    = РеквизитыСуммыПлатежа();
	РеквизитыТаблицы  = СтруктураРеквизитовРасшифровкаПлатежа();
	
	Для Каждого КлючИЗначение Из РеквизитыТаблицы Цикл
		
		ИмяПоля = СтрШаблон(ШаблонИмяПоля, ИмяТабличнойЧасти, КлючИЗначение.Ключ);
		
		Если ЗаполнитьРеквизитыФормы Тогда
			
			Если СтрокаПлатежа <> Неопределено Тогда
				СтрокаПлатежа.Свойство(КлючИЗначение.Ключ, Форма[ИмяПоля]);
			ИначеЕсли РеквизитыСуммы.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
				Форма[ИмяПоля] = Объект[ИмяТабличнойЧасти][0][КлючИЗначение.Ключ];
			КонецЕсли;
			
		Иначе
			
			Объект[ИмяТабличнойЧасти][0][КлючИЗначение.Ключ] = Форма[ИмяПоля];
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаполнитьРеквизитыФормы Тогда
		
		Для Каждого ТекущийРеквизит Из РеквизитыСуммы Цикл
			Форма[СтрШаблон(ШаблонИмяПоля, ИмяТабличнойЧасти, ТекущийРеквизит)] = 0;
		КонецЦикла;
		
		ТаблицаРасшифровки = ?(Расшифровка = Неопределено, Объект[ИмяТабличнойЧасти], Расшифровка);
		Для Каждого ТекущаяСтрока Из ТаблицаРасшифровки Цикл
			
			Для Каждого ТекущийРеквизит Из РеквизитыСуммы Цикл
				ИмяПоля = СтрШаблон(ШаблонИмяПоля, ИмяТабличнойЧасти, ТекущийРеквизит);
				Форма[ИмяПоля] = Форма[ИмяПоля] + ТекущаяСтрока[ТекущийРеквизит];
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Объект.СуммаДокумента = Форма.РасшифровкаПлатежаСуммаПлатежа;
	
КонецПроцедуры

// Выполняет инициализацию свойств платежа: если ранее не инициализировано, заполняет по умолчанию.
//
// Параметры:
//   Форма              - УправляемаяФорма
//   ТолькоСоздатьКлючи - Булево
//
Процедура ИнициализироватьСвойстваПлатежа(Форма, ТолькоСоздатьКлючи = Ложь) Экспорт
	
	Если Форма.СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			Форма.СвойстваПлатежа = НоваяСтруктураСвойстваПлатежа();
		Иначе
			ИмяТабличнойЧасти = НаименованиеТабличнойЧасти();
			ПараметрыОбъекта = ОплатаПлатежнойКартойКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
			Если Не ФормаРасшифровкиПлатежа(Форма) Тогда
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента", Форма.Объект[ИмяТабличнойЧасти][0].ДоговорКонтрагента);
			КонецЕсли;
			Форма.СвойстваПлатежа = ОплатаПлатежнойКартойКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(
				ПараметрыОбъекта, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру заполняемых реквизитов документа "Операция по платежной карте".
//
// Возвращаемое значение:
//   Структура.
//
Функция ИнициализироватьСтруктуруРеквизитовДокумента() Экспорт
	
	СтруктураРезультат = Новый Структура("
	|Ссылка,
	|Дата,
	|ВидОперации,
	|Организация,
	|Контрагент,
	|ВалютаДокумента,
	|СуммаДокумента,
	|БезЗакрывающихДокументов,
	|СчетКасса,
	|Графа4_УСН,
	|Графа5_УСН");
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Возвращает структуру заполняемых реквизитов формы документа "Операция по платежной карте".
//
// Возвращаемое значение:
//   Структура.
//
Функция ИнициализироватьСтруктуруРеквизитовФормы() Экспорт
	
	СтруктураРезультат = Новый Структура("
	|ПрименениеУСН,
	|ПрименениеУСНДоходы,
	|ПрименяетсяОсобыйПорядокНалогообложения,
	|СвойстваПлатежа,
	|ПрименяетсяУСНПатент,
	|КурсДокумента,
	|КратностьДокумента");
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Возвращает наименование табличной части документа "Операция по платежной карте".
//
// Возвращаемое значение:
//   Строка.
//
Функция НаименованиеТабличнойЧасти() Экспорт
	
	Возврат "РасшифровкаПлатежа";
	
КонецФункции

Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено,
	КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено) Экспорт
	
	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()
	
	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
	"ОплатаПлатежнойКартой",
	ПричиныИзменения,
	Объект,
	СтрокаСписка,
	КонтейнерОбъект,
	КонтейнерСтрокаСписка);
	
	// 1. Заполняемые реквизиты
	// ВалютаДокумента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетКасса");
	КонецЕсли;
	
	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// РасшифровкаПлатежа.СпособПогашенияЗадолженности
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// РасшифровкаПлатежа.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВалютаДокумента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКасса");
		КонецЕсли;
		
		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// РасшифровкаПлатежа.СпособПогашенияЗадолженности
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// РасшифровкаПлатежа.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;
		
	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Выполняет обновление реквизитов объекта при выборе документа-основания.
//
// Параметры:
//   Форма             - УправляемаяФорма
//   ВыбранноеЗначение - ДокументСсылка.ОплатаПлатежнойКартой
//
Процедура ДокументОснованиеОбработкаВыбора(Форма, ВыбранноеЗначение = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ПлательщикНПД",     Форма.ПлательщикНПД);
	ПараметрыВыполнения.Вставить("Организация",       Объект.Организация);
	ПараметрыВыполнения.Вставить("Контрагент",        Объект.Контрагент);
	ПараметрыВыполнения.Вставить("ДоговорКонтрагента",Объект.ДоговорКонтрагента);
	ПараметрыВыполнения.Вставить("НомерЧекаНПД",      Объект.НомерЧекаНПД);
	ПараметрыВыполнения.Вставить("Организация",       Объект.Организация);
	ПараметрыВыполнения.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	
	СтруктураОснование = ОплатаПлатежнойКартойВызовСервера.ДанныеРеквизитовВыбранногоДокумента(ПараметрыВыполнения);
	Если СтруктураОснование = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураОснование,
		"Контрагент, ДоговорКонтрагента, ВидОплаты, Эквайер, ДоговорЭквайринга, НомерЧекаНПД, ДокументОснование");
	Форма.СведенияОЧекеНПД = СтруктураОснование.СведенияОЧекеНПД;
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	Если СтруктураОснование.Свойство("РасшифровкаПлатежа") Тогда
		Для Каждого ТекСтрока Из СтруктураОснование.РасшифровкаПлатежа Цикл
			ЗаполнитьЗначенияСвойств(Объект.РасшифровкаПлатежа.Добавить(), ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, Объект.РасшифровкаПлатежа[0]);
	Объект.СуммаДокумента = ?(СтруктураОснование.Свойство("СуммаДокумента"), СтруктураОснование.СуммаДокумента, 0);
	СформироватьПредставлениеВидаОплаты(Форма);
	
КонецПроцедуры

// Пересчитывает сумма НДС в переданной строке.
//
// Параметры:
//   СтрокаПлатежа - ДанныеФормыЭлементКоллекции.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатежа) Экспорт
	
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатежа.СтавкаНДС);
	СтрокаПлатежа.СуммаНДС = СтрокаПлатежа.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

// Заполняет расшифровку платежа из временного хранилища.
//
// Параметры:
//   Форма                            - УправляемаяФорма.
//   АдресХранилищаРасшифровкаПлатежа - Строка.
//
Процедура ПолучитьРасшифровкаПлатежаИзВременногоХранилища(Форма, АдресХранилищаРасшифровкаПлатежа) Экспорт
	
	Объект = Форма.Объект;
	
	РасшифровкаПлатежа = ОплатаПлатежнойКартойВызовСервера.ДанныеРасшифровкиПлатежа(АдресХранилищаРасшифровкаПлатежа);
	
	Объект.РасшифровкаПлатежа.Очистить();
	Если РасшифровкаПлатежа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из РасшифровкаПлатежа Цикл
		ЗаполнитьЗначенияСвойств(Объект.РасшифровкаПлатежа.Добавить(), ТекущаяСтрока);
	КонецЦикла;
	
	ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, РасшифровкаПлатежа[0], РасшифровкаПлатежа);
	УправлениеФормой(Форма);
	
КонецПроцедуры

// Заполняет курс и кратность взаиморасчетов.
//
// Параметры:
//   Форма        - УправляемаяФорма
//   СтрокаПлатеж - ДанныеФормыЭлементКоллекции
//
Процедура ЗаполнитьРеквизитыВалютногоУчета(СтрокаПлатеж, Форма) Экспорт
	
	Форма.КурсДокумента      = ?(Форма.КурсДокумента      = 0, 1, Форма.КурсДокумента);
	Форма.КратностьДокумента = ?(Форма.КратностьДокумента = 0, 1, Форма.КратностьДокумента);
	
	Если СтрокаПлатеж <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = ?(СтрокаПлатеж.КурсВзаиморасчетов = 0, 1,СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1,
			СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру свойств платежа по умолчанию.
//
// Возвращаемое значение:
//   Структура.
//
Функция НоваяСтруктураСвойстваПлатежа() Экспорт
	
	СвойстваПлатежа = Новый Структура("
	|ДоговорКонтрагента,
	|СчетНаОплату,
	|СчетУчетаРасчетовСКонтрагентом,
	|СчетУчетаРасчетовПоАвансам,
	|ДоговорКонтрагентаВалютаВзаиморасчетов,
	|ДоговорКонтрагентаРасчетыВУсловныхЕдиницах,
	|СпособПогашенияЗадолженности,
	|СтавкаНДС,
	|КурсВзаиморасчетов,
	|КратностьВзаиморасчетов");
	
	Возврат СвойстваПлатежа;
	
КонецФункции

// Пересчитывает сумму взаиморасчетов в расшифровке платежа.
//
// Параметры:
//   Форма        - УправляемаяФорма
//   СтрокаПлатеж - ДанныеФормыЭлементКоллекции.
//
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма) Экспорт
	
	ЗаполнитьРеквизитыВалютногоУчета(СтрокаПлатеж, Форма);
	СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		Форма.Объект.ВалютаДокумента, СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
		Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	
КонецПроцедуры

// Возвращает список реквизитов, суммируемых в расшифровке платежа.
//
// Возвращаемое значение:
//   Массив.
//
Функция РеквизитыСуммыПлатежа()
	
	РеквизитыСуммы = Новый Массив;
	РеквизитыСуммы.Добавить("СуммаНДС");
	РеквизитыСуммы.Добавить("СуммаПлатежа");
	РеквизитыСуммы.Добавить("СуммаВзаиморасчетов");
	
	Возврат РеквизитыСуммы;
	
КонецФункции

// Возвращает значения реквизитов строки документа (по умолчанию - пустые значения).
//
// Возвращаемое значение:
//   Структура.
//
Функция СвойстваСтрокРасшифровкиПлатежа(Знач ПараметрыОбъекта, Знач ПолучатьДоговор) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОбъекта.ВидОперации)
		Или Не ЗначениеЗаполнено(ПараметрыОбъекта.Организация)
		Или Не ЗначениеЗаполнено(ПараметрыОбъекта.Дата)
		Или Не ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент)
		Или Не ЗначениеЗаполнено(ПараметрыОбъекта.ВалютаДокумента)
		Или (Не ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) И Не ПолучатьДоговор) Тогда
		
		СвойстваПлатежа = НоваяСтруктураСвойстваПлатежа();
		
		Возврат СвойстваПлатежа;
		
	Иначе
		
		ПараметрыПлатежа = Новый Структура("
		|ВидОперации,
		|Организация,
		|Дата,
		|Контрагент,
		|ДоговорКонтрагента,
		|ПрименениеУСН,
		|ПрименяетсяОсобыйПорядокНалогообложения,
		|ПлательщикНДС,
		|ОплатаВВалюте");
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ПараметрыОбъекта);
		
		Возврат ОплатаПлатежнойКартойВызовСервера.СвойстваСтрокРасшифровкиПлатежа(ПараметрыПлатежа, ПолучатьДоговор);
		
	КонецЕсли;
	
КонецФункции

// Возвращает структуру реквизитов расшифровки платежа по умолчанию.
//
// Возвращаемое значение:
//   Структура.
//
Функция СтруктураРеквизитовРасшифровкаПлатежа()
	
	СтруктураРеквизитов = Новый Структура("
	|ДоговорКонтрагента,
	|ДоговорКонтрагентаВалютаВзаиморасчетов,
	|СпособПогашенияЗадолженности,
	|Сделка,
	|КурсВзаиморасчетов,
	|КратностьВзаиморасчетов,
	|СуммаПлатежа,
	|СуммаВзаиморасчетов,
	|СтавкаНДС,
	|СуммаНДС,
	|СчетНаОплату,
	|СчетУчетаРасчетовСКонтрагентом,
	|СчетУчетаРасчетовПоАвансам");
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Устанавливает текст надписи для представления вида оплаты.
//
// Параметры:
//   Форма - УправляемаяФорма
//
Процедура СформироватьПредставлениеВидаОплаты(Форма) Экспорт
	
	Объект = Форма.Объект;
	СчетРасчетов = ?(ЗначениеЗаполнено(Объект.СчетКасса), Строка(Объект.СчетКасса), НСтр("ru = '<Счет дебета>'"));
	Эквайер      = ?(ЗначениеЗаполнено(Объект.Эквайер), Строка(Объект.Эквайер), НСтр("ru = '<Эквайер>'"));
	Договор      = ?(ЗначениеЗаполнено(Объект.ДоговорЭквайринга),
		Строка(Объект.ДоговорЭквайринга), НСтр("ru = '<Договор>'"));
	
	Если Форма.ВестиУчетПоДоговорам Тогда
		ТекстВидОплаты = СтрШаблон(
			НСтр("ru= '%1, %2, %3'"),
			СчетРасчетов, Эквайер, Договор);
	Иначе
		ТекстВидОплаты = СтрШаблон(
			НСтр("ru= '%1, %2'"),
			СчетРасчетов, Эквайер);
	КонецЕсли;
	
	Форма.ПредставлениеВидОплаты = ТекстВидОплаты;
	
КонецПроцедуры

// Возвращает текущие параметры объекта.
//
// Параметры:
//   Форма - УправляемаяФорма
//
// Возвращаемое значение:
//   Структура - ключи - реквизиты объекта.
//
Функция ТекущиеПараметрыОбъекта(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = Новый Структура(
		"Номер, Дата, ВидОперации, Организация, Контрагент, ВалютаДокумента, СчетКасса");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,    Форма.СвойстваПлатежа.ДоговорКонтрагента));
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета",  Форма.ВалютаРегламентированногоУчета);
	ПараметрыОбъекта.Вставить("ОплатаВВалюте",                   Ложь);
	ПараметрыОбъекта.Вставить("РозничнаяТорговляОблагаетсяЕНВД", Форма.РозничнаяТорговляОблагаетсяЕНВД);
	ПараметрыОбъекта.Вставить("УчетВПродажныхЦенах",             Форма.УчетВПродажныхЦенах);
	ПараметрыОбъекта.Вставить("ПрименениеУСН",                   Форма.ПрименениеУСН);
	ПараметрыОбъекта.Вставить("ПлательщикЕНВД",                  Форма.ПлательщикЕНВД);
	ПараметрыОбъекта.Вставить("ПлательщикНДС",                   Форма.ПлательщикНДС);
	ПараметрыОбъекта.Вставить("ПрименяетсяОсобыйПорядокНалогообложения", Форма.ПрименяетсяОсобыйПорядокНалогообложения);
	ПараметрыОбъекта.Вставить("ЭтоРасчетыСКонтрагентом",         Форма.ЭтоРасчетыСКонтрагентом);
	
	ИмяТабличнойЧасти = НаименованиеТабличнойЧасти();
	РасшифровкаПлатежа = Неопределено;
	
	Если Объект.Свойство(ИмяТабличнойЧасти, РасшифровкаПлатежа) И ЗначениеЗаполнено(РасшифровкаПлатежа) Тогда
		СтрокаРасшифровки = РасшифровкаПлатежа[0];
	ИначеЕсли ЗначениеЗаполнено(Форма.РасшифровкаПлатежа) Тогда
		СтрокаРасшифровки = Форма.РасшифровкаПлатежа[0];
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СчетНаОплату", СтрокаРасшифровки.СчетНаОплату);
	ПараметрыОбъекта.Вставить("СчетУчетаРасчетовСКонтрагентом", СтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыОбъекта.Вставить("СчетУчетаРасчетовПоАвансам",     СтрокаРасшифровки.СчетУчетаРасчетовПоАвансам);
		
	Возврат ПараметрыОбъекта;
	
КонецФункции

Процедура УправлениеФормой(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.Контрагент.Доступность = Истина;
	ЭтоВозвратПокупателю = ЭтоВозвратПокупателю(Объект.ВидОперации);
	ЭтоРозничнаяВыручка  = ЭтоРозничнаяВыручка(Объект.ВидОперации);
	ДокументПроведен     = Объект.Проведен;
	ПараметрыНастроек    = ОплатаПлатежнойКартойВызовСервера.ПараметрыНастроекДокумента(Объект.Организация, Объект.Дата);
	РозницаДоступна      = ПараметрыНастроек.РозницаДоступна;
	РозницаВключена      = ПараметрыНастроек.РозницаВключена;
	УчетБезЗакрывающих   = ПараметрыНастроек.УчетБезЗакрывающихДокументов;
	НапечататьЧекВидимость = ПараметрыНастроек.НапечататьЧек;
	
	Если ЭтоРозничнаяВыручка Тогда 
		
		Форма.РасчетыПриОплатеВидимость = Ложь;
		
		Если УчетБезЗакрывающих И ДокументПроведен
			И (РозницаВключена И Объект.БезЗакрывающихДокументов
			Или НЕ РозницаВключена И Не Объект.БезЗакрывающихДокументов)
			Или ДокументПроведен И РозницаВключена И Не РозницаДоступна Тогда
			
			Форма.ТолькоПросмотр = Истина;
			Если Элементы.Найти("НадписьРазбитьПлатеж") <> Неопределено Тогда
				Элементы.НадписьРазбитьПлатеж.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ДокументПроведен И УчетБезЗакрывающих Тогда
			Объект.БезЗакрывающихДокументов = Не РозницаВключена;
		ИначеЕсли Не УчетБезЗакрывающих Тогда
			Объект.БезЗакрывающихДокументов = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Контрагент.Видимость = Не (Объект.БезЗакрывающихДокументов И ЭтоРозничнаяВыручка);
	Элементы.РасчетыПриОплате.Видимость = Форма.РасчетыПриОплатеВидимость;
	
	Если ОплатаПлатежнойКартойКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ВидимостьЭлементов = Не ОплатаПлатежнойКартойКлиентСервер.ЭтоРозничнаяВыручка(Форма.Объект.ВидОперации);
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.Видимость = ВидимостьЭлементов;
		Элементы.РасшифровкаПлатежаГруппаПогашениеЗадолженности.Видимость = ВидимостьЭлементов;
		Элементы.РасшифровкаПлатежаГруппаСчетаРасчетов.Видимость = ВидимостьЭлементов;
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = ВидимостьЭлементов;
		Элементы.РасшифровкаПлатежаГруппаРасчетыСКонтрагентом.Видимость = ВидимостьЭлементов
			И Форма.ЕстьРасчетыВУсловныхЕдиницах;
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = Не ЭтоВозвратПокупателю И Не ЭтоРозничнаяВыручка;
	КонецЕсли;
		
	ЭлементНапечататьЧек   = Элементы.Найти("НапечататьЧек");
	Если ЭлементНапечататьЧек <> Неопределено Тогда
		ЭлементНапечататьЧек.Видимость = НапечататьЧекВидимость;
	КонецЕсли;
	
	Если Элементы.Найти("Патент") <> Неопределено Тогда
		Элементы.Патент.Доступность = Объект.ДеятельностьНаПатенте Или Форма.ПрименяетсяТолькоУСНПатент;
	КонецЕсли;
	
	Если ЭтоВозвратПокупателю И Элементы.Найти("РозничнаяВыручкаНДСУСН") <> Неопределено Тогда
		
		Если Форма.УчетВПРодажныхЦенах И Форма.ПрименениеУСН И Не Форма.ПрименениеУСНДоходы Тогда
			Элементы.РозничнаяВыручкаНДСУСН.Доступность = Объект.Графа7_УСН <> 0;
		КонецЕсли;
	
	КонецЕсли;
	
	НастроитьЭлементыДляНПД(Форма);
	ВидимостьДоступностьПолейПриИзмененииСпособаПогашения(Форма);
	
	КоличествоСтрок = Объект.РасшифровкаПлатежа.Количество();
	
	Если Элементы.Найти("ГруппаРасшифровкаПлатежа") <> Неопределено Тогда
		Элементы.ГруппаРасшифровкаПлатежа.Видимость = Не Объект.БезЗакрывающихДокументов И КоличествоСтрок = 1;
	КонецЕсли;
	
	Если Элементы.Найти("ГруппаСтраницы") <> Неопределено Тогда
		Элементы.ГруппаСтраницы.Видимость = Не Объект.БезЗакрывающихДокументов;
	КонецЕсли;
	
	Если Объект.БезЗакрывающихДокументов И Элементы.Найти("ПредставлениеВидОплаты") <> Неопределено Тогда
		Элементы.ПредставлениеВидОплаты.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ВидОплаты.Видимость = Не Объект.БезЗакрывающихДокументов;
	
	Если Элементы.Найти("НадписьСуммаДокумента") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.НадписьРазбитьПлатеж.Видимость  = Не Объект.БезЗакрывающихДокументов;
	Элементы.ГруппаСуммаПлатежа.Видимость    = КоличествоСтрок = 1;
	Элементы.НадписьСуммаДокумента.Видимость = КоличествоСтрок <> 1 И Не Объект.БезЗакрывающихДокументов;
	
	Если КоличествоСтрок <> 1 И Не Объект.БезЗакрывающихДокументов Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'строка, строки, строк'");
		Если Форма.ИспользоватьВалютныйУчет Тогда
			Форма.НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2 (%3)'"),
				Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧН="),
				Объект.ВалютаДокумента,
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоСтрок, ПараметрыПредметаИсчисления));
		Иначе
			Форма.НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (%2)'"),
				Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧН="),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоСтрок, ПараметрыПредметаИсчисления));
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры выбора реквизита Контрагент (если это не розничная торговли или схема розницы - не НТТ).
//
// Параметры:
//   Форма - УправляемаяФорма
//
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	Если Элементы.Найти("РасшифровкаПлатежаДоговорКонтрагента") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = ВидыДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора)));
	
	ОплатаВВалюте = Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета;
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", ОплатаВВалюте));
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

// Устанавливает параметры выбора реквизита Склада (для схемы НТТ).
//
// Параметры:
//   Форма - УправляемаяФорма
//
Процедура УстановитьПараметрыВыбораКонтрагентаКакСклада(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЗначениеНТТ = ПредопределенноеЗначение("Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка");
	
	НовыеПараметры = Новый Массив();
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ТипСклада", ЗначениеНТТ));
	
	Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

// Возвращает признак однострочной формы: по имени формы.
//
// Параметры:
//   Форма - УправляемаяФорма
//
// Возвращаемое значение:
//   Булево.
//
Функция ФормаДокументаОднострочная(Форма) Экспорт
	
	Возврат СтрНайти(Форма.ИмяФормы, "ФормаДокументаОднострочная") > 0;
	
КонецФункции

// Возвращает признак открытия формы расшифровки платежа: по имени формы.
//
// Параметры:
//   Форма - УправляемаяФорма
//
// Возвращаемое значение:
//   Булево.
//
Функция ФормаРасшифровкиПлатежа(Форма) Экспорт
	
	Возврат СтрНайти(Форма.ИмяФормы, "ФормаРасшифровкаПлатежа") > 0;
	
КонецФункции

// Устанавливает признак ЕстьРасчетыВУсловныхЕдиницах на форме.
//
// Параметры:
//   Форма - УправляемаяФорма
//
Процедура ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма) Экспорт
	
	РасшифровкаПлатежа = ОплатаПлатежнойКартойКлиентСервер.РеквизитДокумента(
		Форма, ОплатаПлатежнойКартойКлиентСервер.НаименованиеТабличнойЧасти());
	
	ЕстьРасчетыВУЕ = Ложь;
	Для Каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
			ЕстьРасчетыВУЕ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУЕ;
	
КонецПроцедуры

// Возвращает результат сравнения способа погашения:
// Истина - способ погашения равен "Не погашать", иначе ЛОЖЬ.
//
// Возвращаемое значение:
//   Булево.
//
Функция НеПогашатьЗадолженность(СпособПогашенияЗадолженности) Экспорт
	
	Возврат СпособПогашенияЗадолженности =
		ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.НеПогашать");
	
КонецФункции

// Возвращает результат сравнения способа погашения:
// Истина - способ погашения равен "По документу", иначе ЛОЖЬ.
//
// Возвращаемое значение:
//   Булево.
//
Функция ПогашатьЗадолженностьПоДокументу(СпособПогашенияЗадолженности) Экспорт
	
	Возврат СпособПогашенияЗадолженности =
		ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу");
	
КонецФункции

// Возвращает результат сравнения вида операции:
// Истина - вид операции равен "Возврат покупателю", иначе ЛОЖЬ.
//
// Возвращаемое значение:
//   Булево.
//
Функция ЭтоВозвратПокупателю(ВидОперации) Экспорт
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю");
	
КонецФункции

// Возвращает результат сравнения вида операции:
// Истина - вид операции равен "Возврат покупателю" или "Оплата от покупателя", иначе ЛОЖЬ.
//
// Возвращаемое значение:
//   Булево.
//
Функция ЭтоРасчетыСКонтрагентом(ВидОперации) Экспорт
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя")
		Или ЭтоВозвратПокупателю(ВидОперации);
	
КонецФункции

// Возвращает результат сравнения вида операции:
// Истина - вид операции равен "Розничная выручка", иначе ЛОЖЬ.
//
// Возвращаемое значение:
//   Булево.
//
Функция ЭтоРозничнаяВыручка(ВидОперации) Экспорт
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка");
	
КонецФункции

Функция РеквизитДокумента(Форма, ИмяРеквизита) Экспорт
	
	Если ФормаРасшифровкиПлатежа(Форма) Тогда
		// Это дополнительная форма редактирования табличной части.
		// Необходимые реквизиты документа хранятся в ней в качестве отдельных реквизитов.
		Возврат Форма[ИмяРеквизита];
	Иначе
		// Это основная форма документа, у нее есть реквизит Объект.
		Возврат Форма.Объект[ИмяРеквизита];
	КонецЕсли;
	
КонецФункции

#Область ЧекиНПД

Процедура НастроитьЭлементыДляНПД(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ВидимостьЭлементовНПД = Форма.ПлательщикНПД;
	ЭтоВозвратПокупателю  = ЭтоВозвратПокупателю(Объект.ВидОперации);
	ДоступнаИнтеграция    = ЧекиНПДВызовСервера.ДоступнаИнтеграцияСПлатформойСамозанятые();
	
	Элементы.ГруппаЧекНПД.Видимость = ВидимостьЭлементовНПД И Не ЭтоВозвратПокупателю;
	Элементы.УслугаНПД.Видимость    = ВидимостьЭлементовНПД И ДоступнаИнтеграция И Не ЭтоВозвратПокупателю;
	Элементы.ГруппаЧекНПДВозврат.Видимость = ВидимостьЭлементовНПД И ЭтоВозвратПокупателю;
	Элементы.НадписьСтавкаНПД.Видимость    = ВидимостьЭлементовНПД И НЕ ЭтоВозвратПокупателю;
	
	Если Не ВидимостьЭлементовНПД Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоВозвратПокупателю Тогда
		
		ЧекАннулирован = ЗначениеЗаполнено(Форма.СведенияОЧекеНПД) И
			Форма.СведенияОЧекеНПД.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЧековНПД.Аннулирован");
		
		Элементы.ОжиданиеДанных.Видимость = Ложь;
		Элементы.ДекорацияЧекНаВозврат.Видимость = ЧекАннулирован;
		Элементы.АннулироватьЧекНПД.Видимость    = Не ЧекАннулирован И ДоступнаИнтеграция;
		Элементы.АннулироватьЧекНПД.Доступность  = Не Форма.ТолькоПросмотр;
		
		Если ЧекАннулирован Тогда
			Элементы.ДекорацияЧекНаВозврат.Заголовок = Форма.СведенияОЧекеНПД.ОписаниеЧека;
		КонецЕсли;
		
	Иначе
		
		ЧекСформирован = Не ЧекиНПДКлиентСервер.НужноНачатьФормированиеЧека(Форма.СведенияОЧекеНПД);
		Элементы.ГруппаЧекНПДКнопка.Видимость   = Не ЧекСформирован И ДоступнаИнтеграция;
		Элементы.ГруппаЧекНПДКнопка.Доступность = Не Форма.ТолькоПросмотр;
		
		Элементы.ДекорацияЧекНПД.Видимость = ЧекСформирован;
		Элементы.УслугаНПД.ТолькоПросмотр  = ЧекСформирован;
		Если ЧекСформирован Тогда
			Элементы.ДекорацияЧекНПД.Заголовок = Форма.СведенияОЧекеНПД.ОписаниеЧека;
		КонецЕсли;
		
		Элементы.НадписьСтавкаНПД.Заголовок = ОплатаПлатежнойКартойВызовСервера.ОписаниеСтавкиНПД(Объект.Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеДляАннулированияЧекаНПД(НомерЧекаНПД) Экспорт

	НомерЧекаНПДЗаполнена = ЗначениеЗаполнено(НомерЧекаНПД);
	Если Не НомерЧекаНПДЗаполнена Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение",
			НСтр("ru = 'Номер чека, по которому ранее регистрировался доход'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НомерЧекаНПД", "Объект");
	КонецЕсли;
	
	Возврат НомерЧекаНПДЗаполнена;
	
КонецФункции

Функция ПроверитьЗаполнениеДляФормированияЧекаНПД(Форма) Экспорт
	
	Если Не Форма.ПлательщикНПД Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	КонтрагентЗаполнен = ЗначениеЗаполнено(Объект.Контрагент)
		Или ОплатаПлатежнойКартойКлиентСервер.ЭтоРозничнаяВыручка(Объект.ВидОперации);
		
	Если Не КонтрагентЗаполнен Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект");
	КонецЕсли;
	
	УслугаНПДЗаполнен = ЗначениеЗаполнено(Объект.УслугаНПД);
	Если Не УслугаНПДЗаполнен Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Услуга'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "УслугаНПД", "Объект");
	КонецЕсли;
	
	СуммаДокументаЗаполнена = ЗначениеЗаполнено(Объект.СуммаДокумента);
	Если Не СуммаДокументаЗаполнена Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Сумма'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СуммаДокумента", "Объект");
	КонецЕсли;
	
	Возврат КонтрагентЗаполнен И УслугаНПДЗаполнен И СуммаДокументаЗаполнена;
	
КонецФункции

Процедура УстановитьСведенияОЧекеНПД(Форма, НовыеСведенияОЧекеНПД = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	СведенияОЧекеНПД = Неопределено;
	Если ЗначениеЗаполнено(НовыеСведенияОЧекеНПД) Тогда
		Форма.СведенияОЧекеНПД = НовыеСведенияОЧекеНПД;
	ИначеЕсли Форма.ПлательщикНПД Тогда
		Форма.СведенияОЧекеНПД = ОплатаПлатежнойКартойВызовСервера.СведенияОЧекеНПД(Объект.Ссылка);
	КонецЕсли;
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти