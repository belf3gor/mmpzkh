
#Область СлужебныйПрограммныйИнтерфейс

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		ДанныеДляПроведения - структура, описание см ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения().
//		Отказ - Булево.
//		Начисления - регистрируемые начисления.
//					Если передано Неопределено, то начисления не регистрируются.
//		ПрочиеДоходы - регистрируемые натуральные доходы.
//					Если передано Неопределено, то доходы не регистрируются.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//					если Истина - наборы записей будут записаны после заполнения.
//
Процедура ЗарегистрироватьНачисления(ДанныеДляПроведения, Отказ, Начисления, ПрочиеДоходы, ЗаписыватьДвижения = Ложь) Экспорт
	
	Движения 			= ДанныеДляПроведения.Движения;
	Организация 		= ДанныеДляПроведения.Организация;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	ПорядокВыплаты 		= ДанныеДляПроведения.ПорядокВыплаты;
	ВыплатитьКакАванс 	= ДанныеДляПроведения.ВыплатитьКакАванс;
	
	СтрокиНачислений = Новый Массив;
	
	ДанныеМежрасчетногоПериода = ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	
	ТаблицаНачислений 		= ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраНакопления("НачисленияУдержанияПоСотрудникам");
	ТаблицаПрочихНачислений = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраНакопления("НачисленияУдержанияПоСотрудникам");
	
	Если Начисления <> Неопределено Тогда
		ПравилаУчетаНачислений = УчетНачисленнойЗарплатыПовтИсп.ПравилаУчетаНачисленийСотрудников();
		// Заполняем движения
		ДобавленныеСтрокиНачислений = Новый Массив;
		Для Каждого Строка Из Начисления Цикл
			ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			УчитыватьВоВзаиморасчетах = Истина;
			ПравилаУчетаНачисления = ПравилаУчетаНачислений[Строка.Начисление];
			Если ПравилаУчетаНачисления <> Неопределено Тогда
				ГруппаНачисленияУдержанияВыплаты = ПравилаУчетаНачисления.ГруппаНачисленияУдержанияВыплаты;
				УчитыватьВоВзаиморасчетах = ПравилаУчетаНачисления.УчитыватьВоВзаиморасчетах;
			КонецЕсли;
			НоваяСтрока = ТаблицаНачислений.Добавить();
			ДобавленныеСтрокиНачислений.Добавить(НоваяСтрока);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.НачислениеУдержание	= Строка.Начисление;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = ГруппаНачисленияУдержанияВыплаты;
			НоваяСтрока.ДанныеМежрасчетногоПериода  = ДанныеМежрасчетногоПериода;
			НоваяСтрока.УчитыватьВРаспределенииНДФЛ = ВыплатитьКакАванс;
			Если УчитыватьВоВзаиморасчетах Тогда
				СтрокиНачислений.Добавить(НоваяСтрока);
			КонецЕсли;
			// Заполняем даты начала/окончания.
			Если Не ЗначениеЗаполнено(НоваяСтрока.ДатаНачала) Тогда
				НоваяСтрока.ДатаНачала = ПериодРегистрации;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НоваяСтрока.ДатаОкончания) Тогда
				НоваяСтрока.ДатаОкончания = КонецМесяца(ПериодРегистрации);
			КонецЕсли;
			НоваяСтрока.ПериодДействия = НачалоМесяца(НоваяСтрока.ДатаНачала);
		КонецЦикла;
		УчетНачисленнойЗарплатыВнутренний.СкорректироватьДатыНачисленийБезПериодаДействия(ТаблицаНачислений, ПериодРегистрации);
	КонецЕсли;
	
	// Перенесем начисления в коллекцию движений
	Если ТаблицаНачислений.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНачислений, Движения.НачисленияУдержанияПоСотрудникам);
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	КонецЕсли;
	
	Если ПрочиеДоходы <> Неопределено Тогда
		Для Каждого Строка Из ПрочиеДоходы Цикл
			НоваяСтрока = ТаблицаПрочихНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период = ПериодРегистрации;
			НоваяСтрока.Организация		= Организация;
			НоваяСтрока.НачислениеУдержание = Строка.Начисление;
			НоваяСтрока.ДанныеМежрасчетногоПериода  = ДанныеМежрасчетногоПериода;
			НоваяСтрока.УчитыватьВРаспределенииНДФЛ = ВыплатитьКакАванс;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
		КонецЦикла;
	КонецЕсли;
	
	// Перенесем удержания и прочие доходы в коллекцию движений
	Если ТаблицаПрочихНачислений.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПрочихНачислений, Движения.НачисленияУдержанияПоСотрудникам);
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	Если ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс
		И Движения.Найти("НачисленияУдержанияПоСотрудникамАвансом") <> Неопределено Тогда
		
		Если ТаблицаНачислений.Количество() + ТаблицаПрочихНачислений.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНачислений, Движения.НачисленияУдержанияПоСотрудникамАвансом);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПрочихНачислений, Движения.НачисленияУдержанияПоСотрудникамАвансом);
			Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ПорядокВыплаты) Тогда
		НачисленияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		Для Каждого Строка Из СтрокиНачислений Цикл
			НоваяСтрока = НачисленияДляВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		Если ВыплатитьКакАванс Тогда
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
				Движения, Отказ, 
				Организация, ПериодРегистрации, Перечисления.ХарактерВыплатыЗарплаты.Зарплата, 
				НачисленияДляВзаиморасчетов, Неопределено);
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленныйАванс(
				Движения, Отказ, 
				Организация, ПериодРегистрации, 
				НачисленияДляВзаиморасчетов, Неопределено);
		Иначе 
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
				Движения, Отказ, 
				Организация, ПериодРегистрации, ПорядокВыплаты,
				НачисленияДляВзаиморасчетов, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	УчетНачисленнойЗарплатыВнутренний.ПриРегистрацииНачисленийУдержанийПоСотрудникам(Движения, Отказ, ДобавленныеСтрокиНачислений, ПорядокВыплаты, ПериодРегистрации);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		ДанныеДляПроведения - структура, описание см ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения().
//		Отказ - Булево.
//		Начисления - таблица значений.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//
Процедура ЗарегистрироватьОтработанноеВремя(ДанныеДляПроведения, Отказ, Начисления, ЗаписыватьДвижения = Ложь) Экспорт
	
	Движения 			= ДанныеДляПроведения.Движения;
	Организация 		= ДанныеДляПроведения.Организация;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	ПорядокВыплаты 		= ДанныеДляПроведения.ПорядокВыплаты;
	
	Для Каждого Строка Из Начисления Цикл
		
		НоваяСтрока = Движения.ОтработанноеВремяПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.ПериодДействия = НачалоМесяца(Строка.ДатаНачала);
		
		НоваяСтрока.Период = ПериодРегистрации;
		НоваяСтрока.Организация = Организация;
		
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
		
	КонецЦикла;
	
	УчетНачисленнойЗарплатыВнутренний.СкорректироватьДатыНачисленийБезПериодаДействия(Движения.ОтработанноеВремяПоСотрудникам, ПериодРегистрации, "Начисление");
	Движения.ОтработанноеВремяПоСотрудникам.Записывать = Истина;
		
	Если ЗаписыватьДвижения Тогда
		Движения.ОтработанноеВремяПоСотрудникам.Записать();
		Движения.ОтработанноеВремяПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Движения) = Тип("Структура") Тогда
		ЕстьДвиженияОтработанноеВремяПоСотрудникамАвансом = Движения.Свойство("ОтработанноеВремяПоСотрудникамАвансом");
	Иначе
		ЕстьДвиженияОтработанноеВремяПоСотрудникамАвансом = Движения.Найти("ОтработанноеВремяПоСотрудникамАвансом") <> Неопределено;
	КонецЕсли;
	
	Если ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс
		И ЕстьДвиженияОтработанноеВремяПоСотрудникамАвансом Тогда
		
		Если Движения.ОтработанноеВремяПоСотрудникам.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Движения.ОтработанноеВремяПоСотрудникам, Движения.ОтработанноеВремяПоСотрудникамАвансом);
			Движения.ОтработанноеВремяПоСотрудникамАвансом.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УчетНачисленнойЗарплатыВнутренний.ПриРегистрацииОтработанногоВремени(Движения, ЗаписыватьДвижения);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		ДанныеДляПроведения - структура, см ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения().
//		Отказ - Булево.
//		Удержания
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
Процедура ЗарегистрироватьУдержания(ДанныеДляПроведения, Отказ, Удержания, ЗаписыватьДвижения = Ложь) Экспорт

	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения 			= ДанныеДляПроведения.Движения;
	ПорядокВыплаты 		= ДанныеДляПроведения.ПорядокВыплаты;
	Организация 		= ДанныеДляПроведения.Организация;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	ВыплатитьКакАванс 	= ДанныеДляПроведения.ВыплатитьКакАванс;
	
	ДанныеМежрасчетногоПериода = ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	
	УдержанияПоРабочимМестам = ТаблицаРаспределенияПоРабочимМестам();
	
	Для Каждого Строка Из Удержания Цикл
		НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Период				= ПериодРегистрации;
		НоваяСтрока.Организация			= Организация;
		НоваяСтрока.НачислениеУдержание = Строка.Удержание;
		НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
	КонецЦикла;

	// Заполняем движения
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникам);
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;

	Если ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс
		И Движения.Найти("НачисленияУдержанияПоСотрудникамАвансом") <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникамАвансом);
		Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Истина;
		
	КонецЕсли;

	// Взаиморасчеты
	Если ЗначениеЗаполнено(ПорядокВыплаты) Тогда
		УдержанияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
			НоваяСтрока = УдержанияДляВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		Если ВыплатитьКакАванс Тогда
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
				Движения, Отказ, 
				Организация, ПериодРегистрации, Перечисления.ХарактерВыплатыЗарплаты.Зарплата, 
				Неопределено, УдержанияДляВзаиморасчетов);
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленныйАванс(
				Движения, Отказ, 
				Организация, ПериодРегистрации, 
				Неопределено, УдержанияДляВзаиморасчетов);
		Иначе 
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
				Движения, Отказ, 
				Организация, ПериодРегистрации, ПорядокВыплаты,
				Неопределено, УдержанияДляВзаиморасчетов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		ДанныеДляПроведения - структура, см ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения().
//		Отказ - Булево.
//		РезультатыРасчетаНДФЛ
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
Процедура ЗарегистрироватьНДФЛ(ДанныеДляПроведения, Отказ, РезультатыРасчетаНДФЛ, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если РезультатыРасчетаНДФЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения 			= ДанныеДляПроведения.Движения;
	ПорядокВыплаты 		= ДанныеДляПроведения.ПорядокВыплаты;
	Авансом 			= ДанныеДляПроведения.Авансом;
	Организация 		= ДанныеДляПроведения.Организация;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	ВыплатитьКакАванс 	= ДанныеДляПроведения.ВыплатитьКакАванс;
	
	ДанныеМежрасчетногоПериода = ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
		
	Если Авансом Тогда
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникамАвансом;
	Иначе
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникам;
	КонецЕсли;

	ЕстьПодразделениеСотрудника = (РезультатыРасчетаНДФЛ.Колонки.Найти("ПодразделениеСотрудника") <> Неопределено);
	НетТерритории = (РезультатыРасчетаНДФЛ.Колонки.Найти("ТерриторияВыполненияРаботВОрганизации") = Неопределено);
	
	УдержанияПоРабочимМестам = ТаблицаРаспределенияПоРабочимМестам();
	Для Каждого Строка Из РезультатыРасчетаНДФЛ Цикл
		НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Период				= ПериодРегистрации;
		НоваяСтрока.ПериодДействия		= ПериодРегистрации;
		Если Не Авансом Тогда
			НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
		КонецЕсли;	
		НоваяСтрока.Организация			= Организация;
		Если ЕстьПодразделениеСотрудника Тогда
			НоваяСтрока.Подразделение = Строка.ПодразделениеСотрудника;
		КонецЕсли;
		Если НетТерритории Тогда
			НоваяСтрока.ТерриторияВыполненияРаботВОрганизации = Строка.Подразделение;
		КонецЕсли;
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты 		= Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
		НоваяСтрока.НачислениеУдержание 					= Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
	КонецЦикла;
	
	// Заполняем движения начислений (удержаний) удержанными суммами.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, ДвиженияНачисленийУдержаний);
	Если ПорядокВыплаты <> Неопределено И Не Авансом
		И ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс
		И Движения.Найти("НачисленияУдержанияПоСотрудникамАвансом") <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникамАвансом);
		
	КонецЕсли;

	ДвиженияНачисленийУдержаний.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		ДвиженияНачисленийУдержаний.Записать();
		ДвиженияНачисленийУдержаний.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ПорядокВыплаты) Или Авансом Тогда
		УдержанияДляВзаиморасчетов = ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, УдержанияДляВзаиморасчетов);
		Если ВыплатитьКакАванс Тогда
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
				Движения, Отказ, 
				Организация, ПериодРегистрации, Перечисления.ХарактерВыплатыЗарплаты.Зарплата, 
				Неопределено, УдержанияДляВзаиморасчетов);
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленныйАванс(
				Движения, Отказ, 
				Организация, ПериодРегистрации, 
				Неопределено, УдержанияДляВзаиморасчетов);
		ИначеЕсли Авансом Тогда
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленныйАванс(
				Движения, Отказ, 
				Организация, ПериодРегистрации, 
				Неопределено, УдержанияДляВзаиморасчетов);
		Иначе	
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
				Движения, Отказ, 
				Организация, ПериодРегистрации, ПорядокВыплаты, 
				Неопределено, УдержанияДляВзаиморасчетов);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		ДанныеДляПроведения - структура, см ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения().
//		Отказ - Булево.
//		КорректировкиВыплаты - таблица значений с корректировками выплаты.
//
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
Процедура ЗарегистрироватьКорректировкиВыплаты(ДанныеДляПроведения, Отказ, КорректировкиВыплаты, ЗаписыватьДвижения = Ложь) Экспорт

	Если КорректировкиВыплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения 			= ДанныеДляПроведения.Движения;
	ПорядокВыплаты 		= ДанныеДляПроведения.ПорядокВыплаты;
	Организация 		= ДанныеДляПроведения.Организация;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	
	ДанныеМежрасчетногоПериода = ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	
	КорректировкиПоРабочимМестам = ТаблицаРаспределенияПоРабочимМестам();
	Для Каждого СтрокаКорректировки Из КорректировкиВыплаты Цикл
		НоваяСтрока = КорректировкиПоРабочимМестам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
		НоваяСтрока.Период				= ПериодРегистрации;
		НоваяСтрока.ПериодДействия		= ПериодРегистрации;
		Если СтрокаКорректировки.КорректировкаВыплаты < 0 Тогда
			НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету;
		Иначе
			НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено;
		КонецЕсли;
		НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
		НоваяСтрока.Организация			= Организация;
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
		НоваяСтрока.Сумма = СтрокаКорректировки.КорректировкаВыплаты;
	КонецЦикла;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ПорядокВыплаты) Тогда
		Взаиморасчеты = ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		Для Каждого СтрокаКорректировки Из КорректировкиПоРабочимМестам Цикл
			НоваяСтрока = Взаиморасчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
			НоваяСтрока.СуммаКорректировкиВыплаты = НоваяСтрока.Сумма;
			НоваяСтрока.Сумма = 0;
		КонецЦикла;
		ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
			Движения, Отказ, 
			Организация, ПериодРегистрации, ПорядокВыплаты, 
			Неопределено, Взаиморасчеты);
	КонецЕсли;	
	
	// Инвертируем суммы НДФЛКЗачету для отражения в НачисленияУдержанияПоСотрудникам
	ОтборСтрок = Новый Структура("НачислениеУдержание", Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету);
	НайденныеСтроки = КорректировкиПоРабочимМестам.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Сумма = -НайденнаяСтрока.Сумма;
	КонецЦикла;
	
	// Заполняем движения начислений (удержаний) удержанными суммами.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КорректировкиПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникам);
	
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;

КонецПроцедуры

// Регистрирует передачу налогов в налоговый орган.
//
// Параметры:
//		Движения          - КоллекцияДвижений - коллекция наборов записей движений расчетного документа.
//  	Отказ             - Булево            - признак отказа выполнения операции.
//		Организация       - СправочникСсылка.Организации - организация
//		ПериодРегистрации - Дата                         - первое число месяца периода регистрации.
//		НДФЛ              - ТаблицаЗначений   - таблица с колонками:
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо.
//			* Сумма          - Число                           - сумма налога.	
//		ВидУдержания     - ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний - вид удержания.
//
Процедура ЗарегистрироватьНалогиПереданныеВНалоговыйОрган(Движения, Отказ, Организация, ПериодРегистрации, НДФЛ, ВидУдержания, ЗаписыватьДвижения = Ложь) Экспорт

	Если НДФЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = Движения.НачисленияУдержанияПоСотрудникам.Отбор.Регистратор.Значение;
	
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НДФЛ.ВыгрузитьКолонку("ФизическоеЛицо"));
	
	ПериодыРегистрации = Новый Массив;
	Период = ПериодРегистрации;
	Пока Период >= НачалоГода(ПериодРегистрации) Цикл
		ПериодыРегистрации.Добавить(Период);
		Период = ДобавитьМесяц(Период, -1);
	КонецЦикла;	
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор",		Регистратор);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ФизическиеЛица",		ФизическиеЛица);
	Запрос.УстановитьПараметр("ПериодыРегистрации",	ПериодыРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Остатки.ПериодРегистрации,
	|	Остатки.Сотрудник,
	|	Остатки.ФизическоеЛицо,
	|	Остатки.Подразделение,
	|	Остатки.СтатьяФинансирования,
	|	Остатки.СтатьяРасходов,
	|	СУММА(Остатки.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачисленияУдержанияПоСотрудникам.Период КАК ПериодРегистрации,
	|		НачисленияУдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
	|		НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	|		НачисленияУдержанияПоСотрудникам.Подразделение КАК Подразделение,
	|		НачисленияУдержанияПоСотрудникам.СтатьяФинансирования КАК СтатьяФинансирования,
	|		НачисленияУдержанияПоСотрудникам.СтатьяРасходов КАК СтатьяРасходов,
	|		НачисленияУдержанияПоСотрудникам.Сумма КАК Сумма
	|	ИЗ
	|		РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|	ГДЕ
	|		НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
	|		И НачисленияУдержанияПоСотрудникам.Период В(&ПериодыРегистрации)
	|		И НачисленияУдержанияПоСотрудникам.Организация = &Организация
	|		И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В(&ФизическиеЛица)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачисленияУдержанияПоСотрудникам.Период,
	|		НачисленияУдержанияПоСотрудникам.Сотрудник,
	|		НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
	|		НачисленияУдержанияПоСотрудникам.Подразделение,
	|		НачисленияУдержанияПоСотрудникам.СтатьяФинансирования,
	|		НачисленияУдержанияПоСотрудникам.СтатьяРасходов,
	|		НачисленияУдержанияПоСотрудникам.Сумма
	|	ИЗ
	|		РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|	ГДЕ
	|		НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
	|		И НачисленияУдержанияПоСотрудникам.Период В(&ПериодыРегистрации)
	|		И НачисленияУдержанияПоСотрудникам.Организация = &Организация
	|		И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В(&ФизическиеЛица)
	|		И НачисленияУдержанияПоСотрудникам.Регистратор = &Регистратор) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.ПериодРегистрации,
	|	Остатки.Сотрудник,
	|	Остатки.ФизическоеЛицо,
	|	Остатки.Подразделение,
	|	Остатки.СтатьяФинансирования,
	|	Остатки.СтатьяРасходов";
	
	ИсчисленныеНалоги = Запрос.Выполнить().Выгрузить();
	
	НалогиДляВзаиморасчетов = ВзаиморасчетыССотрудниками.НоваяТаблицаНалоговПередаваемыхВНалоговыйОрган();
	
	Отбор = Новый Структура("ФизическоеЛицо, ПериодРегистрации");		
	Для Каждого Налог Из НДФЛ Цикл
		
		Отбор.ФизическоеЛицо = Налог.ФизическоеЛицо;
		
		НераспределеннаяСумма = Налог.Сумма;
		
		Для Каждого Период Из ПериодыРегистрации Цикл
			
			Отбор.ПериодРегистрации = Период;
			
			НалогиРаботникаВПериоде = ИсчисленныеНалоги.Скопировать(Отбор);
			
			ПогашаемаяСуммаВПериоде = МИН(НалогиРаботникаВПериоде.Итог("Сумма"), НераспределеннаяСумма);
			
			Если ПогашаемаяСуммаВПериоде = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(НалогиРаботникаВПериоде, "Сумма");
			РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(ПогашаемаяСуммаВПериоде, Коэффициенты);
			
			Для ИндексСтроки = 0 По НалогиРаботникаВПериоде.Количество() - 1 Цикл
			
				НалогРаботникаВПериоде = НалогиРаботникаВПериоде[ИндексСтроки];
				
				ПогашаемаяСумма = РаспределенныеСуммы[ИндексСтроки];
				
				НалогДляВзаиморасчетов = НалогиДляВзаиморасчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НалогДляВзаиморасчетов, НалогРаботникаВПериоде);
				НалогДляВзаиморасчетов.Сумма = ПогашаемаяСумма;
				
				НачисленияУдержания = Движения.НачисленияУдержанияПоСотрудникам.Добавить();
				ЗаполнитьЗначенияСвойств(НачисленияУдержания, НалогРаботникаВПериоде);
				НачисленияУдержания.Период			= ПериодРегистрации;
				НачисленияУдержания.Организация		= Организация;
				НачисленияУдержания.ПериодДействия	= ПериодРегистрации;
				НачисленияУдержания.НачислениеУдержание = ВидУдержания;
				НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
				НачисленияУдержания.Сумма = ПогашаемаяСумма;
				
			КонецЦикла;	
			
			НераспределеннаяСумма = НераспределеннаяСумма - ПогашаемаяСуммаВПериоде;
			
			Если НераспределеннаяСумма = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВзаиморасчетыССотрудниками.ЗарегистрироватьНалогиПереданныеВНалоговыйОрган(
		Движения, Отказ, Организация, ПериодРегистрации, НалогиДляВзаиморасчетов);
	
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		
		ВзаиморасчетыССотрудниками.ЗаписатьДвижения(Движения);
		
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Дорабатывает таблицу с данными расчета НДФЛ в вид, пригодный для регистрации в учете начисленной и удержанной зарплаты
// Вызывается перед ЗарегистрироватьНДФЛ
// Обрабатывает колонки НалогПоСтавке13, ЗачтеноАвансовыхПлатежейПоСтавке13 если они есть.
Процедура ПодготовитьДанныеНДФЛКРегистрации(ТаблицаНДФЛ, Организация, ДатаОперации) Экспорт
	
	РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	ТаблицаНДФЛ = УчетНДФЛ.ТаблицаДвиженийСРегистрациейВНалоговомОргане(ТаблицаНДФЛ, "МесяцНалоговогоПериода");
	
	Если ТаблицаНДФЛ.Колонки.Найти("Сумма") = Неопределено И ТаблицаНДФЛ.Колонки.Найти("НалогПоСтавке13") <> Неопределено Тогда
		ТаблицаНДФЛ.Колонки.НалогПоСтавке13.Имя = "Сумма";
	КонецЕсли;
	ВычестьЗачтеннуюСумму = Ложь;
	ЗаполнитьПодразделениеСотрудника = Ложь;
	Если ТаблицаНДФЛ.Колонки.Найти("ЗачтеноАвансовыхПлатежейПоСтавке13") <> Неопределено 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		ВычестьЗачтеннуюСумму = Истина;
	КонецЕсли;
	Если ТаблицаНДФЛ.Колонки.Найти("ПодразделениеСотрудника") = Неопределено Тогда
		ТаблицаНДФЛ.Колонки.Добавить("ПодразделениеСотрудника");
		ЗаполнитьПодразделениеСотрудника = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТЗ Из ТаблицаНДФЛ Цикл
		УчетНДФЛ.ПроставитьРегистрациюВНалоговомОрганеВСтроке(СтрокаТЗ, СтрокаТЗ.РегистрацияВНалоговомОргане, РегистрацияВНалоговомОргане);
		Если ВычестьЗачтеннуюСумму Тогда
			СтрокаТЗ.Сумма = СтрокаТЗ.Сумма - СтрокаТЗ.ЗачтеноАвансовыхПлатежейПоСтавке13
		КонецЕсли;
		Если ЗаполнитьПодразделениеСотрудника Тогда
			СтрокаТЗ.ПодразделениеСотрудника = СтрокаТЗ.Подразделение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет распределение прочих сумм удержаний с физических лиц (НДФЛ и прочие)
// по рабочим местам, т.е. по сотрудникам и подразделениям.
//
// Параметры:
//	Удержания - исходная таблица удержаний, суммы из которой нужно распределить.
//  	Должна содержать колонки
//			- Сумма
//			- Подразделение
//		Может содержать для уточнения алгоритма распределения удержаний (не обязательно)
//			- КоэффициентУдержания
//			- ВычетПрименяемыйПриУдержании.
//
//	ПериодРегистрации
//	Организация
//	БазаРаспределения - таблица значений с колонками
//		- ФизическоеЛицо
//		- Подразделение
//		- Сотрудник
//		- Сумма.
//
//	УжеУдержано - таблица значений с уже удержанными суммами
//		Должна содержать колонки
//			- Сумма
//			- Подразделение
//  ВидУдержания
//  ТочностьРаспределения - по умолчанию - 2. Например, для НДФЛ следует использовать 0
//	Авансом - булево значение. Если истина, то распределение проводится при расчете первой половины месяца.
// 	УчитыватьПодразделение - булево значение. Позволяет учитывать при распределении колонку Подразделение 
//  						таблицы Удержания. Используется при распределении НДФЛ (других 
//							удержаний, "привязанных" к подразделениям нет)
// Возвращаемое значение:
//	Таблица значений с колонками, соответствующими регистру начислений и удержаний.
//    
//
Функция РаспределениеПрочихУдержанийПоРабочимМестам(Удержания, ПериодРегистрации, Организация, БазаРаспределения = Неопределено, УжеУдержано = Неопределено, ВидУдержания = Неопределено, ТочностьРаспределения = 2, Авансом = Ложь, УчитыватьПодразделение = Ложь) Экспорт
	
	УдержанияПоРабочимМестам = ТаблицаРаспределенияПоРабочимМестам(Авансом);
	
	// Если база не определена, получаем базу распределения по умолчанию.
	ИспользуетсяРаспределениеПоУмолчанию = Ложь;
	Если БазаРаспределения = Неопределено Тогда
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(Удержания, "ФизическоеЛицо", Истина);
		БазаРаспределения = РасчетЗарплаты.ПолучитьБазуУдержанийПоУмолчанию(ФизическиеЛицаМассив, ПериодРегистрации, Организация);
		ИспользуетсяРаспределениеПоУмолчанию = Истина;
	КонецЕсли;
	
	// Раскладываем строки базы по физическим лицам.
	СтрокиБазыПоФизическимЛицам = Новый Соответствие;
	Для Каждого СтрокаРаспределения Из БазаРаспределения Цикл
		СтрокиБазыПоФизическомуЛицу = СтрокиБазыПоФизическимЛицам[СтрокаРаспределения.ФизическоеЛицо];
		Если СтрокиБазыПоФизическомуЛицу = Неопределено Тогда
			СтрокиБазыПоФизическомуЛицу = Новый Массив;
		КонецЕсли;
		СтрокиБазыПоФизическомуЛицу.Добавить(СтрокаРаспределения);
		СтрокиБазыПоФизическимЛицам.Вставить(СтрокаРаспределения.ФизическоеЛицо, СтрокиБазыПоФизическомуЛицу);
	КонецЦикла;
	// Раскладываем строки выполненных удержаний по физическим лицам.
	СтрокиУжеУдержаноПоФизическимЛицам = Новый Соответствие;
	Если УжеУдержано <> НеОпределено Тогда
		Для Каждого Строка Из УжеУдержано Цикл
			СтрокиУжеУдержаноПоФизическомуЛицу = СтрокиУжеУдержаноПоФизическимЛицам[Строка.ФизическоеЛицо];
			Если СтрокиУжеУдержаноПоФизическомуЛицу = Неопределено Тогда
				СтрокиУжеУдержаноПоФизическомуЛицу = Новый Массив;
			КонецЕсли;
			СтрокиУжеУдержаноПоФизическомуЛицу.Добавить(Строка);
			СтрокиУжеУдержаноПоФизическимЛицам.Вставить(Строка.ФизическоеЛицо, СтрокиУжеУдержаноПоФизическомуЛицу);
		КонецЦикла;
	КонецЕсли;
	
	КоэффициентУдержанияЗадан = Ложь;
	ВычетПрименяемыйПриУдержанииЗадан = Ложь;
	Если Удержания.Колонки.Найти("КоэффициентУдержания") <> НеОпределено Тогда
		КоэффициентУдержанияЗадан = Истина;
	КонецЕсли;
	Если Удержания.Колонки.Найти("ВычетПрименяемыйПриУдержании") <> НеОпределено Тогда
		ВычетПрименяемыйПриУдержанииЗадан = Истина;
	КонецЕсли;
	
	// Откладываем строки, для которых не удалось найти строки базы распределения.
	СтрокиБазаНеопределена = Новый Массив;
	Для Каждого СтрокаУдержаний Из Удержания Цикл
		Если СтрокаУдержаний.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		// Находим строки распределения.
		СтрокиБазыПоФизическомуЛицу = СтрокиБазыПоФизическимЛицам[СтрокаУдержаний.ФизическоеЛицо];
		Если СтрокиБазыПоФизическомуЛицу = Неопределено Тогда
			СтрокиБазаНеопределена.Добавить(СтрокаУдержаний);
			Продолжить;
		КонецЕсли;
		СтрокиРаспределения = Новый Массив;
		Если УчитыватьПодразделение Тогда
			Для Каждого СтрокаБазыПоФизическомуЛицу Из СтрокиБазыПоФизическомуЛицу Цикл
				Если СтрокаБазыПоФизическомуЛицу.Подразделение = СтрокаУдержаний.Подразделение Тогда
					СтрокиРаспределения.Добавить(СтрокаБазыПоФизическомуЛицу);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СтрокиРаспределения.Количество() = 0 Тогда
			Для Каждого СтрокаБазыПоФизическомуЛицу Из СтрокиБазыПоФизическомуЛицу Цикл
				СтрокиРаспределения.Добавить(СтрокаБазыПоФизическомуЛицу);
			КонецЦикла;
		КонецЕсли;
		// Ранее удержано по этому виду удержания
		РанееУдержано = 0;
		СтрокиУжеУдержаноПоФизическомуЛицу = СтрокиУжеУдержаноПоФизическимЛицам[СтрокаУдержаний.ФизическоеЛицо];
		Если СтрокиУжеУдержаноПоФизическомуЛицу <> НеОпределено Тогда
			Для Каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
				Если СтрокаУжеУдержаноПоФизическомуЛицу.НачислениеУдержание = СтрокаУдержаний.НачислениеУдержание 
 						И СтрокаУжеУдержаноПоФизическомуЛицу.ДокументОснование = СтрокаУдержаний.ДокументОснование 
						И (СтрокаУжеУдержаноПоФизическомуЛицу.Подразделение = СтрокаУдержаний.Подразделение Или Не УчитыватьПодразделение Или Не ЗначениеЗаполнено(СтрокаУдержаний.Подразделение)) Тогда
					РанееУдержано = РанееУдержано + СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Распределяем пропорционально суммам в найденных строках.
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
		КоэффициентУдержания = 1;
		ВычетПрименяемыйПриУдержании = 0;
		Если КоэффициентУдержанияЗадан И СтрокаУдержаний.КоэффициентУдержания <> 0 Тогда
			КоэффициентУдержания = СтрокаУдержаний.КоэффициентУдержания;
		КонецЕсли;
		Если ВычетПрименяемыйПриУдержанииЗадан Тогда
			ВычетПрименяемыйПриУдержании = СтрокаУдержаний.ВычетПрименяемыйПриУдержании;
		КонецЕсли;
		// распределяем суммы с учетом ранее удержанного
		РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаУдержаний.Сумма + РанееУдержано, Коэффициенты, ТочностьРаспределения, КоэффициентУдержания, ВычетПрименяемыйПриУдержании);
		Если РаспределенныеСуммы <> НеОпределено Тогда
			// минусуем уже удержанные суммы
			Если СтрокиУжеУдержаноПоФизическомуЛицу <> НеОпределено Тогда
				Для Каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
					Если СтрокаУжеУдержаноПоФизическомуЛицу.НачислениеУдержание = СтрокаУдержаний.НачислениеУдержание 
 							И СтрокаУжеУдержаноПоФизическомуЛицу.ДокументОснование = СтрокаУдержаний.ДокументОснование 
							И (СтрокаУжеУдержаноПоФизическомуЛицу.Подразделение = СтрокаУдержаний.Подразделение Или Не УчитыватьПодразделение Или Не ЗначениеЗаполнено(СтрокаУдержаний.Подразделение)) Тогда
						НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУжеУдержаноПоФизическомуЛицу);
						НоваяСтрока.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтроки;
						Если Не ЗначениеЗаполнено(НоваяСтрока.ПериодДействия) Тогда
							НоваяСтрока.ПериодДействия = ПериодРегистрации;
						КонецЕсли;
						НоваяСтрока.Период = ПериодРегистрации;
						НоваяСтрока.Сумма  = - СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// плюсуем распределенные суммы
			Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
				Если РаспределенныеСуммы[Индекс] = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаРаспределения = СтрокиРаспределения[Индекс];
				НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[Индекс]);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
				Если Не ЗначениеЗаполнено(НоваяСтрока.ПериодДействия) Тогда
					НоваяСтрока.ПериодДействия = ПериодРегистрации;
				КонецЕсли;
				
				НоваяСтрока.Период			= ПериодРегистрации;
				НоваяСтрока.Организация		= Организация;
				НоваяСтрока.ФизическоеЛицо	= СтрокаРаспределения.ФизическоеЛицо;
				НоваяСтрока.Сотрудник		= СтрокаРаспределения.Сотрудник;
				НоваяСтрока.Подразделение	= СтрокаРаспределения.Подразделение;
				НоваяСтрока.Сумма 			= РаспределенныеСуммы[Индекс];
				Если ВидУдержания <> НеОпределено Тогда
					НоваяСтрока.НачислениеУдержание = ВидУдержания;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			НоваяСтрока.Период			= ПериодРегистрации;
			НоваяСтрока.ПериодДействия	= ПериодРегистрации;
			НоваяСтрока.Организация		= Организация;
			НоваяСтрока.ФизическоеЛицо	= СтрокиРаспределения[0].ФизическоеЛицо;
			НоваяСтрока.Сотрудник		= СтрокиРаспределения[0].Сотрудник;
			НоваяСтрока.Подразделение	= СтрокиРаспределения[0].Подразделение;
			НоваяСтрока.Сумма = СтрокаУдержаний.Сумма;
			Если ВидУдержания <> НеОпределено Тогда
				НоваяСтрока.НачислениеУдержание = ВидУдержания;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Колонки = "";
	Для Каждого Колонка Из УдержанияПоРабочимМестам.Колонки Цикл
		Если Колонка.Имя = "Сумма" Тогда
			Продолжить;
		КонецЕсли;
		Колонки = Колонки + "," + Колонка.Имя;
	КонецЦикла;
	Колонки = Сред(Колонки, 2);
	УдержанияПоРабочимМестам.Свернуть(Колонки, "Сумма");
	
	Если СтрокиБазаНеопределена.Количество() > 0 И Не ИспользуетсяРаспределениеПоУмолчанию Тогда
		// Распределяем этим же методом по базе распределения "по умолчанию".
		УдержанияПоРабочимМестамПоУмолчанию = РаспределениеПрочихУдержанийПоРабочимМестам(
			Удержания.Скопировать(СтрокиБазаНеопределена), ПериодРегистрации, Организация, Неопределено, Неопределено, ВидУдержания, ТочностьРаспределения, Авансом, УчитыватьПодразделение);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестамПоУмолчанию, УдержанияПоРабочимМестам);
	КонецЕсли;
	
	Возврат УдержанияПоРабочимМестам;
	
КонецФункции

// Выполняет регистрацию в учете начисленной зарплаты НДФЛ и корректировок выплаты.
// 	Параметры:
// 		ДанныеДляПроведения - Структура - см. ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения.
// 		НДФЛПоСотрудникам - ТаблицаЗначений
// 		КорректировкиВыплатыПоСотрудникам - ТаблицаЗначений
// 		ЗаписыватьДвижения - Булево.
//
Процедура ЗарегистрироватьНДФЛИКорректировкиВыплаты(ДанныеДляПроведения, Отказ, НДФЛПоСотрудникам, КорректировкиВыплатыПоСотрудникам, ЗаписыватьДвижения = Ложь) Экспорт
	
	УчетНачисленнойЗарплатыВнутренний.ЗарегистрироватьНДФЛИКорректировкиВыплаты(ДанныеДляПроведения, Отказ, НДФЛПоСотрудникам, КорректировкиВыплатыПоСотрудникам, ЗаписыватьДвижения);
	
КонецПроцедуры

// Предназначена для регистрации в учете возврата НДФЛ физлицу
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		РезультатыРасчетаНДФЛ - таблица значений с колонками.
//			ФизическоеЛицо - обязательная
//			Подразделение - обязательная
//          одна из пар колонок Сумма, СуммаКорректировкиВыплаты (необязательна при регистрации без распределения)
//          или НалогПоСтавке13, ЗачтеноАвансовыхПлатежейПоСтавке13.
//
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//			
//		Допустимо присутствие других колонок в передаваемых таблицах
//
Процедура ЗарегистрироватьВозвратНДФЛ(Движения, Отказ, Организация, ПериодРегистрации, РезультатыРасчетаНДФЛ, ХарактерВыплаты = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, КонецМесяца(ПериодРегистрации));
	ДанныеМежрасчетногоПериода = ?(ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата
									Или ХарактерВыплаты = Неопределено, Ложь, Истина);
									
	УдержанияПоРабочимМестам = РезультатыРасчетаНДФЛ.Скопировать();
	
	Для Каждого СтрокаТаблицы Из УдержанияПоРабочимМестам Цикл
		// УдержанияПоРабочимМестам требует колонки ТерриторияВыполненияРаботВОрганизации и Подразделение.
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ТерриторияВыполненияРаботВОрганизации) Тогда 
			СтрокаТаблицы.ТерриторияВыполненияРаботВОрганизации = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		СтрокаТаблицы.Период = ПериодРегистрации;
		СтрокаТаблицы.ПериодДействия = ПериодРегистрации;
		СтрокаТаблицы.Организация = Организация;
		СтрокаТаблицы.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
		СтрокаТаблицы.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
		СтрокаТаблицы.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено;
		СтрокаТаблицы.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникам);
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ХарактерВыплаты) Тогда
		// Во взаиморасчеты передаем только СуммаКорректировкиВыплаты
		Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
			Строка.СуммаКорректировкиВыплаты = Строка.Сумма;
			Строка.Сумма = 0;
		КонецЦикла;
		УдержанияДляВзаиморасчетов = ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, УдержанияДляВзаиморасчетов);
		ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
			Движения, Отказ, 
			Организация, ПериодРегистрации, ХарактерВыплаты, 
			Неопределено, УдержанияДляВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры


#Область ПроцедурыИФункцииРаботыСОтчетами

// Формирование отчета Анализ начислений и удержаний.
//
Процедура ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
	
	УчетНачисленнойЗарплатыВнутренний.ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс);
	
КонецПроцедуры

// Возвращает описание добавляемых пользовательских полей.
//
// Возвращаемое значение:
//		Имя - Имя колонки
//		Заголовок - Представление колонки в отчете.
//		ПорядокКолонки - Порядок, в котором должна располагаться колонка отчета.
//		ПриоритетКолонки - Приоритет отображения колонки, как отдельной колонки.
//		НомерКолонки - Номер колонки - используется для получения имени параметра отчета ("Колонка" + НомерКолонки).
//		ДобавитьПользовательскоеПоле - Булево - Если Истина, то пользовательское поле добавляется в коллекцию
//		                                        "ПользовательскиеПоля" варианта отчета, Ложь - поле не добавляется в
//		                                        коллекцию.
//		ВыводитьНулевыеЗначения - Булево - Если Истина, то пользовательское поле выводится в отчет всегда, Ложь - поле не выводится в отчет, если оно нулевое
//		КатегорииКолонки - Массив - Категории, которые выводятся в колонке, используется при составлении условия в
//										выражении пользовательского поля.
//		ПользовательскоеУсловие - Строка - Условие, которое будет использовано в выражении пользовательского поля,
//										при использовании условия "КатегорииКолонки" игнорируются.
//		УсловиеИсключенияИзПрочих - Строка - Условие исключения суммы из колонки "ПрочиеНачисления" или "ПрочиеУдержания",
//										используется в паре с "ПользовательскоеУсловие".
//		РезультатУсловия - Строка - Результат выполнения условия, если в выражении нужно получить не сумму по начислению, а
//										например дни.
//		ВыводитьКолонку - Булево - Если Истина, то колонка будет включена в список выводимых колонок,
//										используется, например, если пользовательское поле нужно создать, но выводить в отчет в определенном месте
//										всегда.
//
Функция ПорядокДополнительныхНачисленийИУдержаний() Экспорт
	
	ТаблицаНачисленийИУдержаний = Новый ТаблицаЗначений;
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("Имя", 								Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("Заголовок",							Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ПорядокКолонки",						Новый ОписаниеТипов("Число"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ПриоритетКолонки",					Новый ОписаниеТипов("Число"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("НомерКолонки",						Новый ОписаниеТипов("Число"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ДобавитьПользовательскоеПоле",		Новый ОписаниеТипов("Булево"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ВыводитьНулевыеЗначения",				Новый ОписаниеТипов("Булево"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КатегорииКолонки",					Новый ОписаниеТипов("Массив"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ПользовательскоеУсловие",				Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("УсловиеИсключенияИзПрочих",			Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("РезультатУсловия",					Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ВыводитьКолонку",						Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаНачисленийИУдержаний;
	
КонецФункции

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49();
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49();
КонецФункции

Процедура ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисленияИУдержания, НастройкиОтчета, КоличествоНачисленийУдержаний, ВидПолей = "Начисления", НаАванс = Ложь) Экспорт
	УчетНачисленнойЗарплатыВнутренний.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисленияИУдержания, НастройкиОтчета, КоличествоНачисленийУдержаний, ВидПолей, НаАванс);
КонецПроцедуры

// Возвращает начисления в том порядке, в котором они должны быть выведены в отчете.
//
Функция ПорядокДополнительныхНачислений(Начисления, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ПорядокДополнительныхНачислений(Начисления, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки);
КонецФункции

// Возвращает удержания в том порядке, в котором они должны быть выведены в отчете.
//
Функция ПорядокДополнительныхУдержаний(Удержания, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ПорядокДополнительныхУдержаний(Удержания, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля) Экспорт
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		УчетНачисленнойЗарплатыВнутренний.ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля);
	КонецЕсли;
	
КонецПроцедуры

// Создает коллекцию сумм для распределения по рабочим местам (удержания, корректировки выплаты)
// Параметры:
//	Авансом - признак того, что коллекция создается для удержаний первой половины месяца. По умолчанию - Ложь.
//
// Возвращаемое значение: таблица значений 
//	
Функция ТаблицаРаспределенияПоРабочимМестам(Авансом = Ложь) Экспорт
	
	ИмяРегистраНачисленийУдержаний = "НачисленияУдержанияПоСотрудникам";
	Если Авансом Тогда
		ИмяРегистраНачисленийУдержаний = ИмяРегистраНачисленийУдержаний + "Авансом";
	КонецЕсли;
	
	УдержанияПоРабочимМестам = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраНакопления(ИмяРегистраНачисленийУдержаний);
	УдержанияПоРабочимМестам.Колонки.Добавить("СуммаКорректировкиВыплаты", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	Возврат УдержанияПоРабочимМестам;
	
КонецФункции

// Конструктор коллекции распределяемых удержания
// см. УдержанияПоРабочимМестам, параметр Удержания.
Функция КоллекцияРаспределяемыхУдержаний(Авансом = Ложь) Экспорт
	
	Удержания = ТаблицаРаспределенияПоРабочимМестам(Авансом);
	
	Число15Точность2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	Число5Точность5 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 5));
	Удержания.Колонки.Добавить("КоэффициентУдержания", Число5Точность5);
	Удержания.Колонки.Добавить("ВычетПрименяемыйПриУдержании", Число15Точность2);
	
	Возврат Удержания;
КонецФункции

Функция ЭтоМежрасчетнаяВыплата(ПорядокВыплаты) Экспорт

	Возврат ?(ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Или ПорядокВыплаты = Неопределено, Ложь, Истина);

КонецФункции

#Область ФормированиеПечатныхФорм

Функция РасчетныйЛистокПоДаннымДокумента(Организация, ФизическиеЛица, Месяц, ИсключаемыеСсылки = Неопределено, ДанныеДокумента = Неопределено) Экспорт
	
	ДокументРезультат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		ОтчетРасчетныйЛисток = ЗарплатаКадрыОтчеты.ОтчетРасчетныйЛисток();
		
		Если ИсключаемыеСсылки <> Неопределено Тогда
			ПараметрИсключаемыеСсылки = ОтчетРасчетныйЛисток.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИсключаемыеСсылки");
			ПараметрИсключаемыеСсылки.Значение = ИсключаемыеСсылки;
		КонецЕсли;
		
		Если ДанныеДокумента <> Неопределено Тогда
			ОтчетРасчетныйЛисток.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ДанныеДокумента", ДанныеДокумента);
			ОтчетРасчетныйЛисток.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредварительныйПросмотр", Ложь);
		КонецЕсли;
		
		ДокументРезультат = Отчеты.АнализНачисленийИУдержаний.РасчетныйЛисток(
			ФизическиеЛица, Организация, Месяц, ОтчетРасчетныйЛисток);
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'Не удалось, сформировать отчет.'") + " " + КраткоеПредставлениеОшибки(Инфо);
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДокументРезультат = Неопределено Тогда
		
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.АвтоМасштаб = Истина;
		ДокументРезультат.ОтображатьЗаголовки = Ложь;
		ДокументРезультат.ОтображатьСетку = Ложь;
		
	КонецЕсли; 
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти


#КонецОбласти


