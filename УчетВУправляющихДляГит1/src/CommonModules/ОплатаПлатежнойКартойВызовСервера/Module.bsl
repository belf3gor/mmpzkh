#Область СлужебныеПроцедурыИФункции

// Преобразует таблицу значений, полученную по адресу, в массив структур.
//
// Параметры:
//   АдресХранилищаРасшифровкаПлатежа - строка.
//
// Возвращаемое значение:
//   Массив, значение - структура.
//
Функция ДанныеРасшифровкиПлатежа(АдресХранилищаРасшифровкаПлатежа) Экспорт

	ТаблицаДанных = ПолучитьИзВременногоХранилища(АдресХранилищаРасшифровкаПлатежа);
	Если ТаблицаДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаДанных);
	
КонецФункции

// Возвращает значение реквизитов по выбранному документу.
//
// Параметры:
//   ПараметрыВыполнения - Структура с ключами: Организация, Контрагент, ДоговорКонтрагента, ПлательщикНПД.
//
// Возвращаемое значение:
//   Структура с ключами
//       - Контрагент         - СправочникСсылка.Контрагенты
//       - ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов
//       - ВидОплаты          - СправочникСсылка.ВидыОплатОрганизаций
//       - Эквайер            - СправочникСсылка.Контрагенты
//       - ДоговорЭквайринга  - СправочникСсылка.ДоговорыКонтрагентов
//       - ДокументОснование  - ДокументСсылка.ВозвратТоваровОтПокупателя, ДокументСсылка.СчетНаОплатуПокупателю,
//                              ДокументСсылка.ОплатаПлатежнойКартой, ДокументСсылка.РеализацияТоваровУслуг
//       - СведенияОЧекеНПД, НомерЧекаНПД - если организация - плательщик НПД
//       - РасшифровкаПлатежа - массив структур (реквизиты табличной части ОплатаПлатежнойКартой.РасшифровкаПлатежа)
//       - СуммаДокумента     - Число(15,2), сумма платежа
//
Функция ДанныеРеквизитовВыбранногоДокумента(ПараметрыВыполнения) Экспорт
	
	ВыбранноеЗначение = СсылкаНаВыбранныйДокумент(ПараметрыВыполнения);
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРезультат = ПараметрыЗаполненияДокумента();
	ЗначенияДокумента  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВыбранноеЗначение, СтруктураРезультат.ОбязательныеПараметры);
		
	ЗаполнитьЗначенияСвойств(СтруктураРезультат, ЗначенияДокумента);
	СтруктураРезультат.ДокументОснование = ВыбранноеЗначение;
	
	Если ПараметрыВыполнения.ПлательщикНПД Тогда
		
		СведенияОЧекеНПД = СведенияОЧекеНПД(ВыбранноеЗначение);
		Если ЗначениеЗаполнено(СведенияОЧекеНПД) Тогда
			СтруктураРезультат.СведенияОЧекеНПД = СведенияОЧекеНПД;
			СтруктураРезультат.НомерЧекаНПД = СведенияОЧекеНПД.НомерЧека;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	РасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	РасшифровкаПлатежа.Сделка КАК Сделка,
	|	РасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	РасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	РасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|			ТОГДА &СчетУчетаРасчетовСКонтрагентом
	|		ИНАЧЕ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ КАК СчетУчетаРасчетовСКонтрагентом,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|			ТОГДА &СчетУчетаРасчетовПоАвансам
	|		ИНАЧЕ РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам
	|	КОНЕЦ КАК СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &ВыбранноеЗначение
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	СчетаУчета = СчетаУчетаРасчетовСКонтрагентом(ПараметрыВыполнения);
	Запрос.УстановитьПараметр("ВыбранноеЗначение", ВыбранноеЗначение);
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам", СчетаУчета.СчетУчетаРасчетовПоАвансам);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетУчетаРасчетовСКонтрагентом);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	СтруктураРезультат.РасшифровкаПлатежа = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаДанных);
	СтруктураРезультат.СуммаДокумента = ТаблицаДанных.Итог("СуммаПлатежа");
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Заполняет данные по УСН в платежных документах.
//
// Параметры:
//
// Форма - Управляемая форма.
//
Процедура ЗаполнитьОтражениеВУСН(Форма) Экспорт
	
	ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(Форма);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Форма.Объект, ПараметрыУСН);
	
КонецПроцедуры

Функция ПараметрыЗаполненияДокумента()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Контрагент");
	ПараметрыЗаполнения.Вставить("ДоговорКонтрагента");
	ПараметрыЗаполнения.Вставить("ВидОплаты");
	ПараметрыЗаполнения.Вставить("Эквайер");
	ПараметрыЗаполнения.Вставить("ДоговорЭквайринга");
	ПараметрыЗаполнения.Вставить("ДокументОснование");
	ПараметрыЗаполнения.Вставить("СведенияОЧекеНПД");
	ПараметрыЗаполнения.Вставить("НомерЧекаНПД");
	ПараметрыЗаполнения.Вставить("РасшифровкаПлатежа");
	ПараметрыЗаполнения.Вставить("СуммаДокумента");
	// обязательные параметры, которые нужно заполнять
	ПараметрыЗаполнения.Вставить("ОбязательныеПараметры", "Контрагент, ДоговорКонтрагента,
		|ВидОплаты, Эквайер, ДоговорЭквайринга, ДокументОснование, РасшифровкаПлатежа, СуммаДокумента");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Возвращает настройки системы с документом ОплатаПлатежнойКартой.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Дата        - Дата - Дата, для которой получается опция УчетБезЗакрывающихДокументов.
//
// Возвращаемое значение: 
//   Структура с ключами: РозницаДоступна, РозницаВключена, УчетБезЗакрывающихДокументов, НапечататьЧек - Булево.
//
Функция ПараметрыНастроекДокумента(Организация, Дата) Экспорт
	
	ПараметрыРезультат = Новый Структура;
	ПараметрыРезультат.Вставить("ПростойИнтерфейс",ОбщегоНазначенияБП.ЭтоПростойИнтерфейс());
	ПараметрыРезультат.Вставить("РозницаДоступна", РозничнаяВыручкаДоступна());
	ПараметрыРезультат.Вставить("РозницаВключена", ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля"));
	ПараметрыРезультат.Вставить("УчетБезЗакрывающихДокументов",
		УчетДенежныхСредствБП.УчетБезЗакрывающихДокументовВозможен(Организация, Дата));
	ПараметрыРезультат.Вставить("НапечататьЧек", ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование));
	
	Возврат ПараметрыРезультат;
	
КонецФункции

// Возвращает результат настройки функциональности.
// Схема розничной торговли НТТ доступна только в полном интерфейсе.
//
// Возвращаемое значение:
//   Булево.
//
Функция РозничнаяВыручкаДоступна() Экспорт
	
	ВедетсяРозничнаяТорговля = ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля");
	ЭтоПростойИнтерфейс = ОбщегоНазначенияБП.ЭтоПростойИнтерфейс();
	
	Возврат ВедетсяРозничнаяТорговля И Не ЭтоПростойИнтерфейс
		Или Не ВедетсяРозничнаяТорговля;
	
КонецФункции

// Возвращает данные строки документа.
//
// Параметры:
//   ПараметрыПлатежа - Структура.
//   ПолучатьДоговор  - Булево.
//
// Возвращаемое значение:
//   Структура - состав см. ОплатаПлатежнойКартойКлиентСервер.НоваяСтруктураСвойстваПлатежа().
//
Функция СвойстваСтрокРасшифровкиПлатежа(Знач ПараметрыПлатежа, Знач ПолучатьДоговор) Экспорт
	
	СвойстваПлатежа = ОплатаПлатежнойКартойКлиентСервер.НоваяСтруктураСвойстваПлатежа();
	
	Если ПолучатьДоговор Тогда
		ПараметрыПлатежа.ДоговорКонтрагента = УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(ПараметрыПлатежа);
	КонецЕсли;
	
	СвойстваПлатежа.ДоговорКонтрагента            = ПараметрыПлатежа.ДоговорКонтрагента;
	СвойстваПлатежа.СпособПогашенияЗадолженности  =
		ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.Автоматически");
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") 
		И Не ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		
		УстановитьРеквизитыРасчетовСКонтрагентом(ПараметрыПлатежа, СвойстваПлатежа);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		
		УстановитьРеквизитыРасчетовСКонтрагентом(ПараметрыПлатежа, СвойстваПлатежа);
		
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов,РасчетыВУсловныхЕдиницах");
			
		СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
		СвойстваПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговора.РасчетыВУсловныхЕдиницах;
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
		СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		
	КонецЕсли;
	
	Возврат СвойстваПлатежа;
	
КонецФункции

// Возвращает счета учета с контрагентом.
//
// Параметры:
//   ПараметрыПлатежа - Структура с ключами: Организация, Контрагент, ДоговорКонтрагента
//
// Возвращаемое значение:
//   Структура с ключами: СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам.
//
Функция СчетаУчетаРасчетовСКонтрагентом(ПараметрыОбъекта)
	
	СчетаУчета = Новый Структура("СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
	
	СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		ПараметрыОбъекта.Организация, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ДоговорКонтрагента);
	
	СчетаУчета.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураСчетов.СчетРасчетовПокупателя);
	СчетаУчета.Вставить("СчетУчетаРасчетовПоАвансам",     СтруктураСчетов.СчетАвансовПокупателя);
	
	Возврат СчетаУчета;
	
КонецФункции

// Устанавливает реквизиты: СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СтавкаНДС.
//
// Параметры:
//   ПараметрыПлатежа - Структура с ключами: Организация, Контрагент, ДоговорКонтрагента, ВидОперации, Дата
//   СвойстваПлатежа  - Структура с ключами: СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам
//
Процедура УстановитьРеквизитыРасчетовСКонтрагентом(ПараметрыПлатежа, СвойстваПлатежа) Экспорт
	
	СчетаУчета = СчетаУчетаРасчетовСКонтрагентом(ПараметрыПлатежа);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, СчетаУчета);
	
	Если ОплатаПлатежнойКартойКлиентСервер.ЭтоРасчетыСКонтрагентом(ПараметрыПлатежа.ВидОперации) Тогда
		
		СвойстваПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		
		ПлательщикНДС = ПараметрыПлатежа.ПлательщикНДС;
		СвойстваПлатежа.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ПараметрыПлатежа.Дата, ПлательщикНДС);
		
	КонецЕсли;

КонецПроцедуры

#Область ЧекиНПД

// Возвращает подходящие данные выбора по номеру чека.
//
// Параметры:
//   ТекущаяСтрокаТекст - строка, введенная пользователем.
//   Организация        - СправочникСсылка.Организация.
//
// Возвращаемое значение:
//   СписокЗначений.
//
Функция ДанныеВыбораИзРегистраСведенийНПД(ТекущаяСтрокаТекст, Организация) Экспорт

	Возврат Документы.ОплатаПлатежнойКартой.ПолучитьДанныеВыбораИзРегистраСведенийНПД(ТекущаяСтрокаТекст, Организация);

КонецФункции

// Возвращает контактную информацию для отправки чека.
//
// Параметры:
//   Контрагент - СправочникСсылка.Контрагенты - Контрагент, для которого возвращается контактная информация.
//
// Возвращаемое значение:
//   Структура - контактная информация для отправки чека.
//
Функция ПараметрыОтправкиЧека(Контрагент) Экспорт
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		КонтрагентЗначение = Контрагент;
	Иначе
		КонтрагентЗначение = Неопределено;
	КонецЕсли;
	
	Возврат ЧекиНПД.ПараметрыОтправкиЧека(КонтрагентЗначение);
	
КонецФункции

// Выполняет запись в журнал регистрации и вызывает исключение для пользователя.
//
// Параметры:
//   КраткоеПредставлениеОшибки   - Строка
//   ПодробноеПредставлениеОшибки - Строка
//
Процедура ПоказатьОшибкуАннулированияЧека(КраткоеПредставлениеОшибки,
	ПодробноеПредставлениеОшибки = Неопределено) Экспорт

	ЗаписьЖурналаРегистрации(
		ИнтеграцияСПлатформойСамозанятыеКлиентСервер.ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		?(ПодробноеПредставлениеОшибки <> Неопределено, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки));
	
	ВызватьИсключение КраткоеПредставлениеОшибки;
	
КонецПроцедуры

// Возвращает сведения о чеке документа-основания.
//
// Параметры:
//   ДокументОснование - ДокументСсылка - Ссылка на документ-основание.
//
// Возвращаемое значение:
//   Структура - Сведения о чеке. См. НовыйСведенияОЧеке().
//
Функция СведенияОЧекеНПД(СсылкаНаДокумент) Экспорт
	
	Возврат РегистрыСведений.ЧекиНПД.СведенияОЧеке(СсылкаНаДокумент);
	
КонецФункции

// Возвращает ссылку на выбранный документ-основание из р.с. "Чеки НПД" по указанной организации, номеру и состоянию "Зарегистрирован".
//
// Параметры:
//   ПараметрыВыполнения - Структура с ключами: ВыбранноеЗначение, НомерЧекаНПД, Организация
//
// Возвращаемое значение:
//   ДокументСсылка - документ-основание из регистра сведений "Чеки НПД" 
//   Неопределено   - в случае, если в регистре сведений "Чеки НПД" не найдено ни одного зарегистрированного чека
//
Функция СсылкаНаВыбранныйДокумент(ПараметрыВыполнения)
	
	ВыбранноеЗначение = Неопределено;
	Если ПараметрыВыполнения.Свойство("ВыбранноеЗначение", ВыбранноеЗначение)
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Возврат ПараметрыВыполнения.ВыбранноеЗначение;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекиНПД.ДокументОснование КАК ДокументОснование
	|Из
	|	РегистрСведений.ЧекиНПД КАК ЧекиНПД
	|ГДЕ
	|	ЧекиНПД.НомерЧека = &НомерЧека
	|	И ЧекиНПД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЧековНПД.Зарегистрирован)
	|	И ЧекиНПД.Организация = &Организация";
	
	Запрос.УстановитьПараметр("НомерЧека",   ПараметрыВыполнения.НомерЧекаНПД);
	Запрос.УстановитьПараметр("Организация", ПараметрыВыполнения.Организация);

	Результат = Запрос.Выполнить().Выбрать();
	
	ВыбранноеЗначение = Неопределено;
	
	Если Результат.Следующий() Тогда
		ВыбранноеЗначение = Результат.ДокументОснование;
	КонецЕсли;
	
	Возврат ВыбранноеЗначение;
	
КонецФункции

// Возвращает цену услуги НПД для организации.
//
// Параметры:
//   УслугаНПД   - СправочникСсылка.Номенклатура - Услуга, по которой нужно определить цену.
//   Организация - СправочникСсылка.Организация - Организация на НПД, для которой нужно вернуть цену услуги.
//   Дата        - Дата - Дата, на которую нужно вернуть цену.
//
// Возвращаемое значение:
//   Число - цена услуги НПД.
//
Функция ЦенаУслугиНПД(УслугаНПД, Организация, Дата) Экспорт
	
	Возврат ЧекиНПД.ЦенаУслугиНПД(УслугаНПД, Организация, Дата);
	
КонецФункции

// Возвращает надпись-пояснение ставки НПД.
//
// Параметры:
//   Контрагент - СправочникСсылка.Контрагенты - контрагент-покупатель.
//
// Возвращаемое значение:
//   Строка - заголовок для реквизита.
//
Функция ОписаниеСтавкиНПД(Контрагент) Экспорт
	
	Возврат СтрШаблон(НСтр("ru = 'Ставка налога: %1%%'"),
				ИнтеграцияСПлатформойСамозанятые.СтавкаНПД(Контрагент));
	
КонецФункции

#КонецОбласти

#КонецОбласти

