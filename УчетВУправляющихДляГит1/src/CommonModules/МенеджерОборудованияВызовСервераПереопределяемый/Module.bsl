
#Область ПрограммныйИнтерфейс

// Возвращает список доступных типов оборудования.
// 
// Возвращаемое значение:
//   Массив - Массив доступных типов подключаемого оборудования в конфигурации.
//
Функция ПолучитьДоступныеТипыОборудования() Экспорт
	
	СписокОборудования = Новый Массив;
	
	// Сканеры штрихкода
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода);
	// Конец Сканеры штрихкода
	
	// Считыватели RFID
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.СчитывательRFID);
	// Конец Считыватели RFID.
	
	// ККТ с передачей данных ОФД
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ККТ);
	// Конец ККТ с передачей данных ОФД.
	
	// Фискальные регистраторы
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор);
	// Конец Фискальные регистраторы.
	
	// Принтеры чеков
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков);
	// Конец принтеры чеков.
	
	// Эквайринговые терминалы
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал);
	// Конец Эквайринговые терминалы.
	
	// Принтер этикеток
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток);
	// Конец Принтер этикеток
	
	// ККМ offline
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ККМОфлайн);
	// Конец ККМ offline

	Возврат СписокОборудования;
	
КонецФункции

// Возвращает флаг возможности добавления новых драйверов в справочник драйверов.
// 
// Возвращаемое значение:
//   Булево - В случае разрешение добавления новых драйверов возвращает Истина.
//
Функция ВозможностьДобавленияНовыхДрайверов() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Справочники.ПодключаемоеОборудование);
	
КонецФункции

// Возвращает флаг возможности использовать подключаемое оборудование.
// 
// Возвращаемое значение:
//   Булево - В случае разрешение использовать подключаемое оборудование.
//
Функция ИспользоватьПодключаемоеОборудование() Экспорт
	
	Возврат ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование);
	
КонецФункции

// Возвращает признак возможности обращения к разделенным данным из текущего сеанса.
//  
// Возвращаемое значение:
//  Булево - В случае вызова в неразделенной конфигурации возвращает Истина.
//
Функция ДоступноИспользованиеРазделенныхДанных() Экспорт
	
	Возврат ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	
КонецФункции

// Обновление библиотеки в целевой конфигурации.
//                                   
Процедура ОбновлениеБиблиотеки() Экспорт
	
	ОбновитьПоставляемыеДрайвера();
	ОбновитьУстановленныеДрайвера();
	
КонецПроцедуры

// Обновить поставляемые драйверы в составе конфигурации.
//                                   
Процедура ОбновитьПоставляемыеДрайвера() Экспорт
	
	// Сканеры штрихкода
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодСканерыШтрихкода, "AddIn.ScancodeScanner", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСканерыШтрихкода, "AddIn.Scaner45", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкода, "AddIn.Scanner", "Драйвер1ССканерШтрихкода", Ложь, "8.1.9.1");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкодаNative, "AddIn.InputDevice", "Драйвер1СУстройстваВводаNative", Ложь, "9.0.4.9");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГексагонСканерыШтрихкода, "AddIn.ProtonScanner", "ДрайверГексагонСканерШтрихкода", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСканерыШтрихкода8X, "AddIn.ATOL_Scaners_1CInt", "ДрайверАТОЛУстройстваВвода8X", Ложь);
	// Конец Сканеры штрихкода
	
	// Фискальные регистраторы
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СФискальныйРегистраторЭмулятор, "AddIn.EmulatorFP1C", , Истина,, Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СРарусФискальныеРегистраторыФеликс, "AddIn.fr_feliksRMK1c82", "Драйвер1СРарусФискальныеРегистраторыФеликс", Ложь, "1.2.3.9");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СРарусФискальныеРегистраторыМебиус, "AddIn.fr_moebius1c82", "Драйвер1СРарусФискальныеРегистраторыМебиус", Ложь, "1.1.1.5");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторы, "AddIn.ATOL_KKM_1C", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторыУниверсальный, "AddIn.ATOL_KKM_1C", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторы8X, "AddIn.ATOL_KKM_1C82", "ДрайверАТОЛФискальныеРегистраторы8X", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикВерсияТФискальныеРегистраторы, "AddIn.KSBFR1K1C", , Истина, ,Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСФискальныеРегистраторы, "AddIn.SparkTF", "ДрайверККСФискальныеРегистраторы", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМФискальныеРегистраторы, "AddIn.DrvFR1C", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМФискальныеРегистраторыУниверсальный, "AddIn.SMDrvFR1C", "ДрайверШтрихМФискальныеРегистраторы", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикОРИОНФискальныеРегистраторы, "AddIn.OrionFR_1C8", , Истина, ,Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикКристаллСервисФискальныеРегистраторыPirit, "AddIn.PiritK", "ДрайверКристаллСервисФискальныеРегистраторыPirit", Ложь, "4.02");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикДримкасФискальныеРегистраторыVikiPrint, "AddIn.VikiP", "ДрайверДримкасФискальныеРегистраторыVikiPrint", Ложь, "4.02");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИскраФискальныеРегистраторыПрим, "AddIn.IskraFR", "ДрайверИскраФискальныеРегистраторыПрим", Ложь, "1.0.0.5");
	// Конец Фискальные регистраторы.
	
	// ККТ с передачей данных                                                                                                                            
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолККТ54ФЗ , "AddIn.ATOL_KKM_1C82_54FZ", , Ложь, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолККТ54ФЗ9X , "AddIn.ATOL_KKT_1C83_V9", "ДрайверАтолККТ54ФЗ9X", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолККТ54ФЗ10X, "AddIn.ATOL_KKT_1C83_V10", "ДрайверАтолККТ54ФЗ10X", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМККТ54ФЗ, "AddIn.SMDrvFR1C22", "ДрайверШтрихМККТ54ФЗ", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикВерсияТK1Ф54ФЗ, "AddIn.VT_KKT_1CInt", "ДрайверВерсияТK1Ф54ФЗ", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИскраККТ54ФЗ, "AddIn.IskraKKT", "ДрайверИскраККТ54ФЗ", Ложь, "2.0.3.5");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСККТ54ФЗ, "AddIn.Spark115F", "ДрайверККСККТ54ФЗ", Ложь, "1.0.0.1");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикMSTARККТ54ФЗ, "AddIn.AlfaFiscalPrinter", "ДрайверMSTARККТ54ФЗ", Ложь, "1.3.6");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСчетмашККТ54ФЗ, "AddIn.fr_feliksrmf1c83", "ДрайверСчетмашККТ54ФЗ", Ложь, "1.1.16.28");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикNEWTONККТ54ФЗ, "AddIn.NewtonMicroFR54FZ", "ДрайверNEWTONККТ54ФЗ",  Ложь, "1.0.5.6");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикARSККТ54ФЗ, "AddIn.Ars1CFiscalDriver", "ДрайверARSККТ54ФЗ",  Ложь, "1.0.9");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикДримкасККТ54ФЗ, "AddIn.VikiP", "ДрайверДримкасККТ54ФЗ",  Ложь, "1.4.2.0");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИнитпроККТ54ФЗ, "AddIn.NKR_KKT", "ДрайверИнитпроККТ54ФЗ",  Ложь, "1.0.5.4");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикFITККТ54ФЗ, "AddIn.FIT_KKT_1C83_V10", "ДрайверFITККТ54ФЗ",  Ложь, "1.09");
	// Конец ККТ с передачей данных                                                                                              
	
	// Принтеры чеков
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СПринтерЧеков, "AddIn.ReceiptPrinterNative", "Драйвер1СПринтерЧеков", Ложь, "3.0.2.0");
	// Конец Принтеры чеков.
	
	// Эквайринговые терминалы
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалыSmart, "AddIn.a_inpas1c82", , Ложь, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалыUNIPOS, "AddIn.a_inpasDC1c83", "ДрайверИНПАСЭквайринговыеТерминалыUNIPOS", Ложь, "1.1.1.2");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикTRPOSЭквайринговыеТерминалы, "AddIn.a_trpos1c82", "ДрайверTRPOSЭквайринговыеТерминалы", Ложь, "1.0.0.34");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСБРФЭквайринговыеТерминалы, "AddIn.SBRFCOMObject|AddIn.SBRFCOMExtension", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикUCSEFTPOSЭквайринговыеТерминалы, "AddIn.UCS_EFTPOS", "ДрайверUCSEFTPOSЭквайринговыеТерминалы", Ложь, "1.0.9.8");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГАЗПРОМБАНКЭквайринговыеТерминалы, "AddIn.GPBEMVGateNativeAPI1C", "ДрайверГАЗПРОМБАНКЭквайринговыеТерминалы", Ложь, "1.0.3.5");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикARCUS2ЭквайринговыеТерминалыIngenico, "AddIn.IngenicoDriver1C", "ДрайверARCUS2ЭквайринговыеТерминалыIngenico", Ложь, "1.0.0.1");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикIboxProПоддержкаMPosЭквайринга, "AddIn.iboxPro", "ДрайверIboxProПоддержкаMPosЭквайринга", Ложь, "1.2.4");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМПлатежныйТерминалYarus, "AddIn.ShtrihPayMan1C", "ДрайверШтрихМПлатежныйТерминалYarus", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СЭквайринговыеТерминалыСбербанк, "AddIn.SberAcquiringTerminal", "Драйвер1СЭквайринговыеТерминалыСбербанк", Ложь, "1.0.2.2");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикMPos2canЭквайринг, "AddIn.mPos2can", "ДрайверMPos2canЭквайринг", Ложь, "1.5.9");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикSKAM1CЭквайринговыеСистемы, "AddIn.skam", "ДрайверSKAM1CЭквайринговыеСистемы", Ложь, "1.0.2");
	// Конец Эквайринговые терминалы.
	
	// Офлайн оборудование
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолККМOffline);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМККМOffline);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СЭвоторККМOffline);
	// Конец Офлайн оборудование
	
	// Принтеры этикеток
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГексагонПринтераЭтикеток, "AddIn.HexagonLabelPrinterDriver", "ДрайверГексагонПринтераЭтикеток", Ложь, "2.9.3");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканситиПринтераЭтикеток, "AddIn.ScanCityTSC1C", "ДрайверСканситиПринтераЭтикеток", Ложь, "1.0.0.42");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодПринтераЭтикетокGodexEZPL8Native, "AddIn.GodexEZPL8", "ДрайверСканкодПринтераЭтикетокGodexEZPL8Native", Ложь, "1.0.0.31");
	// Конец Принтеры этикеток.
	
	// RFID считыватели
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикERFIDСчитывательRFID, "AddIn.RFIDReader", "ДрайверERFIDСчитывательRFID", Ложь, "1.0.0.11");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикКлеверенсСчитывателиRFID, "AddIn.Cleverence.TO_RFID", "ДрайверКлеверенсCчитывателиRFID", Ложь, "1.2.33");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодСчитывательRFIDCipherLab, "AddIn.CipherLab186x", "ДрайверСканкодСчитывательRFIDCipherLab", Ложь, "1.0.0.12");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикISBCСчитывательRFID, "AddIn.RFIDDevice", "ДрайверISBCСчитывательRFID", Ложь, "1.1.1.0");
	// Конец RFID считыватели
	
КонецПроцедуры

// Обновить установленные драйвера.
//
Процедура ОбновитьУстановленныеДрайвера() Экспорт
	
	// ККТ с передачей данных ОФД
	МенеджерОборудованияВызовСервера.ОбновитьУстановленныеДрайвера(Перечисления.ТипыПодключаемогоОборудования.ККТ);
	// Конец ККТ с передачей данных ОФД.
	
	// Принтеры чеков
	МенеджерОборудованияВызовСервера.ОбновитьУстановленныеДрайвера(Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток);
	// Конец Принтеры чеков.
	
	// Сканеры штрихкода
	МенеджерОборудованияВызовСервера.ОбновитьУстановленныеДрайвера(Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода);
	// Конец Сканеры штрихкода
	
КонецПроцедуры

// Возвращает флаг возможности использовать драйверов снятых с поддержки.
// 
// Возвращаемое значение:
//   Булево - В случае возможность использовать снятых с поддержки драйверов возвращает Истина.
//
Функция ВозможностьИспользоватьСнятыхСПоддержкиДрайверов() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Переопределяемая процедура для подсистемы управление доступом СтандартныеПодсистемы
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Менеджер, Ограничение) Экспорт
	
КонецПроцедуры

Функция ИспользуетсяОборудование(ВидОборудования) Экспорт
	Если ИспользоватьПодключаемоеОборудование() Тогда
		ИспользуетсяОборудование = (МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(ВидОборудования).Количество() > 0);
	Иначе
		ИспользуетсяОборудование = Ложь;
	КонецЕсли;
	
	Возврат ИспользуетсяОборудование;
КонецФункции

Функция СистемнаяУчетнаяЗапись() Экспорт
	
	Возврат РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	
КонецФункции

#КонецОбласти

#Область РаботаСЭлементомФормы

// Дополнительные переопределяемые действия с элементом формы 
// служит для учета специфики визуального отображения в зависимости от типа клиента.
//
Процедура ПодготовитьЭлементУправления(ЭлементУправления, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбновленияБПОМеждуВерсиями

// Обновить параметры ККТ.
//
Процедура ОбновитьПараметрыККТ() Экспорт
	
	// ККТ - при переходе на 2.0.4
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля = &СпособФорматноЛогическогоКонтроля
	|	И ПодключаемоеОборудование.ТипОборудования = &ТипОборудования";
	Запрос.УстановитьПараметр("СпособФорматноЛогическогоКонтроля", Перечисления.СпособыФорматноЛогическогоКонтроля.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ККТ);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Оборудование = Выборка.Ссылка.ПолучитьОбъект();
		Оборудование.СпособФорматноЛогическогоКонтроля = Перечисления.СпособыФорматноЛогическогоКонтроля.РазделятьСтроки;
		Оборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = 0.01;
		Оборудование.ОбменДанными.Загрузка = Истина;
		Оборудование.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обновить параметры ККМ Офлайн.
//
Процедура ОбновитьПараметрыККМОфлайн205() Экспорт
	
	// Проверка на наличие драйвера Справочник.ДрайверыОборудования.Драйвер1СККМOffline
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока РезультатЗапроса.Пустой() Цикл
		Возврат;
	КонецЦикла;
	
	
	// 1С ККМОфлайн - при переходе с 2.0.4 на 2.0.5
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Идентификатор,
	|	ПодключаемоеОборудование.УдалитьВерсияФорматаОбмена КАК ВерсияФорматаОбмена,
	|	ПодключаемоеОборудование.ВидТранспортаОфлайнОбмена КАК ВидТранспортаОфлайнОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ВидТранспортаОфлайнОбмена) Тогда
			Продолжить; // обработка уже была
		КонецЕсли;
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Идентификатор);
		
		НовыеЗначениеПараметров = Новый Структура;
		НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", Выборка.ВерсияФорматаОбмена);
		НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.FILE);
		
		Если Выборка.ВерсияФорматаОбмена > 2000 Тогда
			
			Если ДанныеУстройства.Параметры.Свойство("КаталогОбмена") Тогда
				НовыеЗначениеПараметров.Вставить("КаталогОбмена", ДанныеУстройства.Параметры.КаталогОбмена);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаЗагрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаЗагрузки", ДанныеУстройства.Параметры.ИмяФайлаЗагрузки);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаВыгрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаВыгрузки", ДанныеУстройства.Параметры.ИмяФайлаВыгрузки);
			КонецЕсли;
			
		Иначе
			
			Если ДанныеУстройства.Параметры.Свойство("КаталогВыгрузки") Тогда
				НовыеЗначениеПараметров.Вставить("КаталогВыгрузки", ДанныеУстройства.Параметры.КаталогВыгрузки);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаНастроек") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаНастроек", ДанныеУстройства.Параметры.ИмяФайлаНастроек);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаПрайсЛиста") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаПрайсЛиста", ДанныеУстройства.Параметры.ИмяФайлаПрайсЛиста);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("КаталогЗагрузки") Тогда
				НовыеЗначениеПараметров.Вставить("КаталогЗагрузки", ДанныеУстройства.Параметры.КаталогЗагрузки);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяЗагружаемогоФайла") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяЗагружаемогоФайла", ДанныеУстройства.Параметры.ИмяЗагружаемогоФайла);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("КоличествоЭлементовВПакете") Тогда
				НовыеЗначениеПараметров.Вставить("КоличествоЭлементовВПакете", ДанныеУстройства.Параметры.КоличествоЭлементовВПакете);
			КонецЕсли;
			
		КонецЕсли;
		
		МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
		
		ОборудованиеОбъект = Выборка.Идентификатор.ПолучитьОбъект();
		ОборудованиеОбъект.ТипОфлайнОборудования = Перечисления.ТипыОфлайнОборудования.ККМ;
		ОборудованиеОбъект.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.FILE;
		ОборудованиеОбъект.Записать();
		
	КонецЦикла;
	
	// WebСервис -> ККМОфлайн
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Идентификатор,
	|	ПодключаемоеОборудование.УдалитьВерсияФорматаОбмена КАК ВерсияФорматаОбмена,
	|	ПодключаемоеОборудование.ВидТранспортаОфлайнОбмена КАК ВидТранспортаОфлайнОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.УдалитьWebСервисОборудование)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ВидТранспортаОфлайнОбмена) Тогда
			Продолжить; // обработка уже была
		КонецЕсли;
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Идентификатор);
		
		НовыеЗначениеПараметров = Новый Структура;
		НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", Выборка.ВерсияФорматаОбмена);
		НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.WS);
		
		Если ДанныеУстройства.Параметры.Свойство("КоличествоЭлементовВПакете") Тогда
			НовыеЗначениеПараметров.Вставить("КоличествоЭлементовВПакете", ДанныеУстройства.Параметры.КоличествоЭлементовВПакете);
		КонецЕсли;
		
		МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
		
		ОборудованиеОбъект = Выборка.Идентификатор.ПолучитьОбъект();
		
		ОборудованиеОбъект.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.WS;
		ОборудованиеОбъект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМОфлайн;
		ОборудованиеОбъект.ТипОфлайнОборудования = Перечисления.ТипыОфлайнОборудования.ККМ;
		ОборудованиеОбъект.ДрайверОборудования = Справочники.ДрайверыОборудования.Драйвер1СККМOffline;
		ОборудованиеОбъект.РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		ОборудованиеОбъект.Записать();
		
	КонецЦикла;
	
	
	// Заполнение ТипОфлайнОборудования И ВидТранспортаОфлайнОбмена
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодключаемоеОборудование.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
		|	И ПодключаемоеОборудование.ТипОфлайнОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыОфлайнОборудования.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОборудованиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОборудованиеОбъект.ТипОфлайнОборудования = Перечисления.ТипыОфлайнОборудования.ККМ;
		ОборудованиеОбъект.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.FILE;
		ОборудованиеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обновить параметры ККМ Офлайн.
//
Процедура ОбновитьПараметрыККМОфлайн211() Экспорт
	
	// Проверка на наличие драйвера Справочник.ДрайверыОборудования.Драйвер1СККМOffline
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока РезультатЗапроса.Пустой() Цикл
		Возврат;
	КонецЦикла;
	
	// 1С ККМОфлайн - при переходе с 2.0.6 на 2.1.1
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Идентификатор,
	|	ПодключаемоеОборудование.ВидТранспортаОфлайнОбмена КАК ВидТранспортаОфлайнОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Идентификатор);
		
		Если ДанныеУстройства.Параметры.Свойство("ВерсияФорматаОбмена") Тогда
			ВерсияФорматаОбмена = ДанныеУстройства.Параметры.ВерсияФорматаОбмена;
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяВерсия = 3000;
		Если НЕ (ВерсияФорматаОбмена > 2000 И НЕ ВерсияФорматаОбмена = НоваяВерсия) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.FILE Тогда
			
			НовыеЗначениеПараметров = Новый Структура;
			НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", НоваяВерсия);
			НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.FILE);
			
			Если ДанныеУстройства.Параметры.Свойство("КаталогОбмена") Тогда
				НовыеЗначениеПараметров.Вставить("КаталогОбмена", ДанныеУстройства.Параметры.КаталогОбмена);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаЗагрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаЗагрузки", ДанныеУстройства.Параметры.ИмяФайлаЗагрузки);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаВыгрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаВыгрузки", ДанныеУстройства.Параметры.ИмяФайлаВыгрузки);
			КонецЕсли;
			
			МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
			
		ИначеЕсли Выборка.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.WS Тогда
			
			НовыеЗначениеПараметров = Новый Структура;
			НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", НоваяВерсия);
			НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.WS);
			
			Если ДанныеУстройства.Параметры.Свойство("КоличествоЭлементовВПакете") Тогда
				НовыеЗначениеПараметров.Вставить("КоличествоЭлементовВПакете", ДанныеУстройства.Параметры.КоличествоЭлементовВПакете);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ПараметрыДрайвераККМ") Тогда
				НовыеЗначениеПараметров.Вставить("ПараметрыДрайвераККМ", ДанныеУстройства.Параметры.ПараметрыДрайвераККМ);
			КонецЕсли;
			
			МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Обновить параметры ККМ Офлайн Эвотор
Процедура ОбновитьПараметрыККМОфлайнЭвотор() Экспорт
	
	//Проверка на наличие драйвера Справочник.ДрайверыОборудования.Драйвер1СЭвоторККМOffline
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СЭвоторККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока РезультатЗапроса.Пустой() Цикл
		Возврат;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СЭвоторККМOffline)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Ссылка);
		
		Если ДанныеУстройства.Свойство("ПериодИзмененВручную") Тогда
			Продолжить;
		КонецЕсли;
		
		НовыеЗначениеПараметров = Новый Структура;
		НовыеЗначениеПараметров.Вставить("ЭтоПерваяЗагрузка", Истина);
		НовыеЗначениеПараметров.Вставить("ПериодИзмененВручную", Ложь);
		
		Если ДанныеУстройства.Параметры.Свойство("Токен") Тогда
			НовыеЗначениеПараметров.Вставить("Токен", ДанныеУстройства.Параметры.Токен);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("Магазин") Тогда
			НовыеЗначениеПараметров.Вставить("Магазин", ДанныеУстройства.Параметры.Магазин);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("МагазинЗначение") Тогда
			НовыеЗначениеПараметров.Вставить("МагазинЗначение", ДанныеУстройства.Параметры.МагазинЗначение);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("Терминал") Тогда
			НовыеЗначениеПараметров.Вставить("Терминал", ДанныеУстройства.Параметры.Терминал);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("ТерминалЗначение") Тогда
			НовыеЗначениеПараметров.Вставить("ТерминалЗначение", ДанныеУстройства.Параметры.ТерминалЗначение);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("ПериодВыгрузки") Тогда
			НовыеЗначениеПараметров.Вставить("ДатаНачала", ДанныеУстройства.Параметры.ПериодВыгрузки.ДатаНачала);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("ПериодВыгрузки") Тогда
			НовыеЗначениеПараметров.Вставить("ДатаОкончания", ДанныеУстройства.Параметры.ПериодВыгрузки.ДатаОкончания);
		КонецЕсли;
		
		МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Ссылка, НовыеЗначениеПараметров);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//Обновить параметры ККМ Офлайн Эвотор
Процедура ОбновитьПараметрыДатыЗагрузкиККМОфлайнЭвотор() Экспорт
	
	// Проверка на наличие драйвера Справочник.ДрайверыОборудования.Драйвер1СЭвоторККМOffline
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СЭвоторККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока РезультатЗапроса.Пустой() Цикл
		Возврат;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СЭвоторККМOffline)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Ссылка);
		
		Если ДанныеУстройства.Параметры.Свойство("ДатаНачала") И ДанныеУстройства.Параметры.Свойство("ДатаОкончания") Тогда
			Продолжить;
		Иначе
			
			НовыеЗначениеПараметров = Новый Структура;
			НовыеЗначениеПараметров.Вставить("ЭтоПерваяЗагрузка", Истина);
			НовыеЗначениеПараметров.Вставить("ПериодИзмененВручную", Ложь);
			
			Если ДанныеУстройства.Параметры.Свойство("Токен") Тогда
				НовыеЗначениеПараметров.Вставить("Токен", ДанныеУстройства.Параметры.Токен);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("Магазин") Тогда
				НовыеЗначениеПараметров.Вставить("Магазин", ДанныеУстройства.Параметры.Магазин);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("МагазинЗначение") Тогда
				НовыеЗначениеПараметров.Вставить("МагазинЗначение", ДанныеУстройства.Параметры.МагазинЗначение);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("Терминал") Тогда
				НовыеЗначениеПараметров.Вставить("Терминал", ДанныеУстройства.Параметры.Терминал);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ТерминалЗначение") Тогда
				НовыеЗначениеПараметров.Вставить("ТерминалЗначение", ДанныеУстройства.Параметры.ТерминалЗначение);
			КонецЕсли;
			
			НовыеЗначениеПараметров.Вставить("ДатаНачала", Неопределено);
			НовыеЗначениеПараметров.Вставить("ДатаОкончания", Неопределено);
				
			МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Ссылка, НовыеЗначениеПараметров);
		
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обновить параметры ККМ Офлайн.
//
Процедура УстановитьПоследнююВерсиюФорматаОфлайнОборудование() Экспорт
	
	// 1С ККМОфлайн - установка последней версии формата обмена
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Идентификатор,
	|	ПодключаемоеОборудование.ВидТранспортаОфлайнОбмена КАК ВидТранспортаОфлайнОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Идентификатор);
		
		Если ДанныеУстройства.Параметры.Свойство("ВерсияФорматаОбмена") Тогда
			ВерсияФорматаОбмена = ДанныеУстройства.Параметры.ВерсияФорматаОбмена;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ДоступныеВерсии = МенеджерОфлайнОборудования.ДоступныеВерсииФорматовОбмена();
		НоваяВерсия = ДоступныеВерсии[ДоступныеВерсии.Количество() -1].Значение;
		
		Если ВерсияФорматаОбмена = НоваяВерсия Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.FILE Тогда
			
			НовыеЗначениеПараметров = Новый Структура;
			НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", НоваяВерсия);
			НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.FILE);
			
			Если ДанныеУстройства.Параметры.Свойство("КаталогОбмена") Тогда
				НовыеЗначениеПараметров.Вставить("КаталогОбмена", ДанныеУстройства.Параметры.КаталогОбмена);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаЗагрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаЗагрузки", ДанныеУстройства.Параметры.ИмяФайлаЗагрузки);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаВыгрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаВыгрузки", ДанныеУстройства.Параметры.ИмяФайлаВыгрузки);
			КонецЕсли;
			
			МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
			
		ИначеЕсли Выборка.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.WS Тогда
			
			НовыеЗначениеПараметров = Новый Структура;
			НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", НоваяВерсия);
			НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.WS);
			
			Если ДанныеУстройства.Параметры.Свойство("КоличествоЭлементовВПакете") Тогда
				НовыеЗначениеПараметров.Вставить("КоличествоЭлементовВПакете", ДанныеУстройства.Параметры.КоличествоЭлементовВПакете);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ПараметрыДрайвераККМ") Тогда
				НовыеЗначениеПараметров.Вставить("ПараметрыДрайвераККМ", ДанныеУстройства.Параметры.ПараметрыДрайвераККМ);
			КонецЕсли;
			
			МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОборудованиеККТ

// Процедура заполняет реквизиты организации для регистрации ФН.
//
Процедура ЗаполнитьРеквизитыОрганизацииДляРегистрацииФН(Организация, ПараметрыРегистрации) Экспорт
	
КонецПроцедуры

// Переопределяет формируемый шаблон чека.
//
Функция СформироватьШаблонЧека(ОбщиеПараметры, ДополнительныйТекст, СтандартнаяОбработка, ТипОборудования = "") Экспорт

КонецФункции

#КонецОбласти

#Область ОборудованиеOffline

// Функция возвращает префикс весового товара применяемого для генерации штрихкода.
// Используется при выгрузке в весы с печатью этикеток.
//
// Параметры:
//  ПодключаемоеОборудованиеСсылка - Ссылка на экземпляр подключаемого оборудования.
// 
// Возвращаемое значение:
//   Число - Префикс весового товара.
//
Функция ПолучитьПрефиксВесовогоТовара(ПодключаемоеОборудованиеСсылка) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает префикс штучного товара применяемого для генерации штрихкода.
// Используется при выгрузке в весы с печатью этикеток.
//
// Параметры:
//  ПодключаемоеОборудованиеСсылка - Ссылка на экземпляр подключаемого оборудования.
// 
// Возвращаемое значение:
//   Число - Префикс штучного товара который фасуется на весах.
//
Функция ПолучитьПрефиксШтучногоТовара(ПодключаемоеОборудованиеСсылка) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область РаботаСФормойЭкземпляраОборудования

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПриСозданииНаСервере".
//
Процедура ЭкземплярОборудованияПриСозданииНаСервере(Объект, ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка) Экспорт
	МенеджерОборудованияБП.ЭкземплярОборудованияПриСозданииНаСервере(Объект, ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка);
КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПриЧтенииНаСервере".
//
Процедура ЭкземплярОборудованияПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПередЗаписьюНаСервере".
//
Процедура ЭкземплярОборудованияПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПриЗаписиНаСервере".
//
Процедура ЭкземплярОборудованияПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	МенеджерОборудованияБП.ЭкземплярОборудованияПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПослеЗаписиНаСервере".
//
Процедура ЭкземплярОборудованияПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ОбработкаПроверкиЗаполненияНаСервере".
//
Процедура ЭкземплярОборудованияОбработкаПроверкиЗаполненияНаСервере(Объект, ЭтаФорма, Отказ, ПроверяемыеРеквизиты) Экспорт

КонецПроцедуры

#КонецОбласти