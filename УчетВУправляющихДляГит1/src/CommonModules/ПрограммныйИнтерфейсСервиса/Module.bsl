////////////////////////////////////////////////////////////////////////////////
// ПрограммныйИнтерфейсСервиса: выполнение штатных функций МС прикладным кодом
// через внешний API 
////////////////////////////////////////////////////////////////////////////////

// Экспортные процедуры и функции для вызова из других модулей
// 
#Область ПрограммныйИнтерфейс

// Возвращает свойства версии программного интерфейса мереджера сервиса.
// 
// Возвращаемое значение:
//  Структура - свойства версии внешнего программного интерфейса:
//   * Версия - Число - номер версии внешнего программного интерфейса.
//   * ВерсияМенеджераСервиса - Строка - номер версии менеджера сервиса.
//   * ЧасовойПоясМенеджераСервиса - Строка - часовой пояс менеджера сервиса.
//
Функция СвойстваВерсииИнтерфейса() Экспорт
	
    Адрес = АдресВерсииВнешнегоПрограммногоИнтерфейса();
    
    Попытка
        Ответ = РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("POST", Адрес);	
        ПотокДанных = Ответ.ПолучитьТелоКакПоток();
        ДанныеОтвета = РаботаВМоделиСервисаБТС.СтруктураИзПотокаJSON(ПотокДанных);
        Переименования = Новый Соответствие;
        Переименования.Вставить("version", "Версия");
        Переименования.Вставить("sm_version", "ВерсияМенеджераСервиса");
        Переименования.Вставить("sm_timezone", "ЧасовойПоясМенеджераСервиса");
        Возврат ПереименоватьСвойства(ДанныеОтвета, Переименования);
    Исключение
        ДанныеОтвета = Новый Структура;
        ДанныеОтвета.Вставить("Версия", 0);
        ДанныеОтвета.Вставить("ВерсияМенеджераСервиса", "0.0.0.0");
        ДанныеОтвета.Вставить("ЧасовойПоясМенеджераСервиса" "");
        Возврат ДанныеОтвета;
    КонецПопытки;
	
КонецФункции

#Область УстаревшиеМетоды
    
// Устарела. Следует использовать ПрограммныйИнтерфейсСервиса.Конфигурации.
//
// Параметры:
//	Абонент - Число - код абонента в МС
//	Логин - Строка - имя (логин) пользователя
//	Ключ - Строка - параметр зарезервирован, пока не используется 
//	Отладка - Булево - указывает, что к вызову метода API необходимо добавить ключ debug (расширенное логирование) 
//
// Возвращаемое значение:
//   Структура   - Ключи: *Ошибка, *КодОшибки, *Текст, *Результат
//				   *Результат - ТаблицаЗначений - Код,Имя,Наименование,Описание
//
Функция ДоступныеКонфигурацииАбонента(Абонент, Логин, Ключ = "", Отладка = Ложь) Экспорт

	АдресФункции = "/application/available";
	
	ДанныеЗапроса = Новый Соответствие();
	ДанныеЗапроса.Вставить("account", Абонент);
	ДанныеЗапроса.Вставить("login", Логин);
	ДанныеЗапроса.Вставить("debug", Отладка);
	
	УстановитьПривилегированныйРежим(Истина);
	КлючДоступа = Константы.КлючОбластиДанных.Получить();
	КодОбласти = ПараметрыСеанса.ОбластьДанныхЗначение;
	УстановитьПривилегированныйРежим(Ложь);
	ДанныеЗапроса.Вставить("key", КлючДоступа);
	ДанныеЗапроса.Вставить("tenant", КодОбласти);
	
	ДанныеОтвета = ОтветСервиса(АдресФункции, ДанныеЗапроса);
	
	Ответ = Новый Структура(); 
	Ответ.Вставить("Ошибка", ДанныеОтвета.error = Истина);
	Ответ.Вставить("КодОшибки", ДанныеОтвета.errorCode);
	Ответ.Вставить("Текст", ДанныеОтвета.text);
	
	Если Ответ.Ошибка Тогда
		Возврат Ответ;
	КонецЕсли; 
	
	Приложения = Новый ТаблицаЗначений();
	Приложения.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(9, ДопустимаяДлина.Переменная)));
	Приложения.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
	Приложения.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(64, ДопустимаяДлина.Переменная)));
	Приложения.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	
	Схема = Новый Структура();
	Схема.Вставить("Код", "code");
	Схема.Вставить("Имя", "basename");
	Схема.Вставить("Наименование", "name");
	Схема.Вставить("Описание", "description");
	
	Для каждого Элемент Из ДанныеОтвета.application Цикл
		НоваяСтрока = Приложения.Добавить();
		Для каждого ЭлементСхемы Из Схема Цикл
			НоваяСтрока[ЭлементСхемы.Ключ] = Элемент.Получить(ЭлементСхемы.Значение);
		КонецЦикла; 
	КонецЦикла; 
	
	Ответ.Вставить("Результат", Приложения);
	Возврат Ответ;

КонецФункции // ДоступныеКонфигурацииАбонента() 

// Устарела. ПрограммныйИнтерфейсСервиса.Приложения.
//
// Параметры:
//	Абонент - Число - код абонента в МС
//	Логин - Строка - имя (логин) пользователя
//	Ключ - Строка - параметр зарезервирован, пока не используется
//	Отладка - Булево - указывает, что к вызову метода API необходимо добавить ключ debug (расширенное логирование)
//
// Возвращаемое значение:
//   Структура   - Ключи: *Ошибка, *КодОшибки, *Текст, *Результат
//				   *Результат - ТаблицаЗначений - Код,Наименование,Статус,Используется,Конфигурация
//				   	*Статус - строковое перечисление, возможные значения:
//								ready — Готова
//								preparation — Готовится к использованию
//								used — Используется
//								converted — Конвертируется
//								copied — Копируется
//								toremove — К удалению
//								new — Новая
//								missing — Отсутствует
//								error — Ошибка подготовки
//								removed — Удалена
//
Функция ОбластиДанныхАбонента(Абонент, Логин, Ключ = "", Отладка = Ложь) Экспорт

	АдресФункции = "/tenant/list";
	
	ДанныеЗапроса = Новый Соответствие();
	ДанныеЗапроса.Вставить("account", Абонент);
	ДанныеЗапроса.Вставить("login", Логин);
	ДанныеЗапроса.Вставить("debug", Отладка);
	
	УстановитьПривилегированныйРежим(Истина);
	КлючДоступа = Константы.КлючОбластиДанных.Получить();
	КодОбласти = ПараметрыСеанса.ОбластьДанныхЗначение;
	УстановитьПривилегированныйРежим(Ложь);
	ДанныеЗапроса.Вставить("key", КлючДоступа);
	ДанныеЗапроса.Вставить("tenant", КодОбласти);
	
	ДанныеОтвета = ОтветСервиса(АдресФункции, ДанныеЗапроса);
	
	Ответ = Новый Структура(); 
	Ответ.Вставить("Ошибка", ДанныеОтвета.error = Истина);
	Ответ.Вставить("КодОшибки", ДанныеОтвета.errorCode);
	Ответ.Вставить("Текст", ДанныеОтвета.text);
	
	Если Ответ.Ошибка Тогда
		Возврат Ответ;
	КонецЕсли; 
	
	Приложения = Новый ТаблицаЗначений();
	Приложения.Колонки.Добавить("Код", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный)));
	Приложения.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	Приложения.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	Приложения.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	Приложения.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	Приложения.Колонки.Добавить("Конфигурация", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(9, ДопустимаяДлина.Переменная)));
	
	Схема = Новый Структура();
	Схема.Вставить("Код", "code");
	Схема.Вставить("Ключ", "key");
	Схема.Вставить("Статус", "status");
	Схема.Вставить("Наименование", "name");
	Схема.Вставить("Конфигурация", "application");
	
	Для каждого Элемент Из ДанныеОтвета.tenant Цикл
		НоваяСтрока = Приложения.Добавить();
		Для каждого ЭлементСхемы Из Схема Цикл
			НоваяСтрока[ЭлементСхемы.Ключ] = Элемент.Получить(ЭлементСхемы.Значение);
		КонецЦикла; 
		НоваяСтрока.Используется = (НРег(НоваяСтрока.Статус) = "used");
	КонецЦикла; 
	
	Ответ.Вставить("Результат", Приложения);
	Возврат Ответ;

КонецФункции // ОбластиДанныхАбонента() 

// Устарела. Следует использовать ПрограммныйИнтерфейсСервиса.СвойстваПриложения.
//
// Параметры:
//	Область - Число - код области данных
//	Логин - Строка - имя (логин) пользователя
//	Ключ - Строка - ключ для доступа к данным области в МС (для текущей области оставить пустым)
//	Отладка - Булево - указывает, что к вызову метода API необходимо добавить ключ debug (расширенное логирование)
//
// Возвращаемое значение:
//   Структура   - Ключи: *Ошибка, *КодОшибки, *Текст, *Результат
//				   *Результат - Структура - Код,Владелец,Наименование,Статус,Используется,Конфигурация
//					*Владелец - Число - код абонента-владельца области
//					*Адрес - Строка - навигационная ссылка приложения
//				   	*Статус - строковое перечисление, возможные значения:
//								ready — Готова
//								preparation — Готовится к использованию
//								used — Используется
//								converted — Конвертируется
//								copied — Копируется
//								toremove — К удалению
//								new — Новая
//								missing — Отсутствует
//								error — Ошибка подготовки
//								removed — Удалена
//
Функция СвойстваОбластиДанных(Область, Логин, Ключ = "", Отладка = Ложь) Экспорт

	АдресФункции = "/tenant/info";
	
	ДанныеЗапроса = Новый Соответствие();
	ДанныеЗапроса.Вставить("tenant", Область);
	ДанныеЗапроса.Вставить("login", Логин);
	ДанныеЗапроса.Вставить("debug", Отладка);
	
	Если ПустаяСтрока(Ключ) Тогда		
		УстановитьПривилегированныйРежим(Истина);
		КлючДоступа = Константы.КлючОбластиДанных.Получить();
		УстановитьПривилегированныйРежим(Ложь);
		ДанныеЗапроса.Вставить("key", КлючДоступа);
	Иначе
		ДанныеЗапроса.Вставить("key", Ключ);
	КонецЕсли; 

	ДанныеОтвета = ОтветСервиса(АдресФункции, ДанныеЗапроса);
	
	Ответ = Новый Структура(); 
	Ответ.Вставить("Ошибка", ДанныеОтвета.error = Истина);
	Ответ.Вставить("КодОшибки", ДанныеОтвета.errorCode);
	Ответ.Вставить("Текст", ДанныеОтвета.text);
	Ответ.Вставить("Результат", Новый Структура()); 
	
	Если Ответ.Ошибка Тогда
		Возврат Ответ;
	КонецЕсли; 
	
	Схема = Новый Структура();
	Схема.Вставить("Код", "code");
	Схема.Вставить("Ключ", "key");
	Схема.Вставить("Статус", "status");
	Схема.Вставить("Наименование", "name");
	Схема.Вставить("Конфигурация", "application");
	Схема.Вставить("Владелец", "owner");
	Схема.Вставить("Адрес", "url");
	
	Для каждого ЭлементСхемы Из Схема Цикл
		Ответ.Результат.Вставить(ЭлементСхемы.Ключ, ДанныеОтвета[ЭлементСхемы.Значение]);
	КонецЦикла; 
	Ответ.Результат.Вставить("Используется", (НРег(ДанныеОтвета.status) = "used"));
		
	Возврат Ответ;

КонецФункции // СвойстваОбластиДанных() 

// Устарела. Следует использовать ПрограммныйИнтерфейсСервиса.СоздатьПриложение.
//
// Параметры:
//	Абонент - Число - код абонента в МС
//	Конфигурация - Строка - код конфигурации в МС
//	Наименование - Строка - имя создаваемой области данных (если не указано, будет подставлено название конфигурации) 
//	Логин - Строка - имя (логин) пользователя
//	Ключ - Строка - параметр зарезервирован, пока не используется
//	Отладка - Булево - указывает, что к вызову метода API необходимо добавить ключ debug (расширенное логирование)
//
// Возвращаемое значение:
//   Структура   - Ключи: *Ошибка, *КодОшибки, *Текст, *Результат
//				   *Результат - Структура - Код,Наименование
//
Функция СоздатьОбластьДанных(Абонент, Конфигурация, Наименование = "", Логин, Ключ = "", Отладка = Ложь) Экспорт

	АдресФункции = "/tenant/create";
	
	ДанныеЗапроса = Новый Соответствие();
	ДанныеЗапроса.Вставить("account", Абонент);
	ДанныеЗапроса.Вставить("application", Конфигурация);
	ДанныеЗапроса.Вставить("name", Наименование);
	ДанныеЗапроса.Вставить("login", Логин);
	ДанныеЗапроса.Вставить("debug", Отладка);
	
	УстановитьПривилегированныйРежим(Истина);
	КлючДоступа = Константы.КлючОбластиДанных.Получить();
	КодОбласти = ПараметрыСеанса.ОбластьДанныхЗначение;
	УстановитьПривилегированныйРежим(Ложь);
	ДанныеЗапроса.Вставить("key", КлючДоступа);
	ДанныеЗапроса.Вставить("tenant", КодОбласти);
	
	ДанныеОтвета = ОтветСервиса(АдресФункции, ДанныеЗапроса);
	
	Ответ = Новый Структура(); 
	Ответ.Вставить("Ошибка", ДанныеОтвета.error = Истина);
	Ответ.Вставить("КодОшибки", ДанныеОтвета.errorCode);
	Ответ.Вставить("Текст", ДанныеОтвета.text);
	Ответ.Вставить("Результат", Новый Структура()); 
	
	Если Ответ.Ошибка Тогда
		Возврат Ответ;
	КонецЕсли; 
	
	Схема = Новый Структура();
	Схема.Вставить("Код", "code");
	Схема.Вставить("Ключ", "key");
	Схема.Вставить("Наименование", "name");
	
	Для каждого ЭлементСхемы Из Схема Цикл
		Ответ.Результат.Вставить(ЭлементСхемы.Ключ, ДанныеОтвета[ЭлементСхемы.Значение]);
	КонецЦикла; 
		
	Возврат Ответ;

КонецФункции // СоздатьОбластьДанных() 

// Устарела. Следует использовать ПрограммныйИнтерфейсСервиса.ИспользоватьПромокод.
//
// Параметры:
//	Абонент - Число - код абонента в МС
//	Область - Число - код области данных
//	ПромоКод - Строка - код промо-акции (справочник ПромоАкции) в МС
//	Логин - Строка - имя (логин) пользователя
//	Ключ - Строка - параметр зарезервирован, пока не используется
//	Отладка - Булево - указывает, что к вызову метода API необходимо добавить ключ debug (расширенное логирование)
//
// Возвращаемое значение:
//   Структура   - Ключи: *Ошибка, *КодОшибки, *Текст, *Результат
//				   *Результат - Булево
//
Функция АктивироватьПромоКод(Абонент, Область, ПромоКод, Логин, Ключ = "", Отладка = Ложь) Экспорт

	АдресФункции = "/promo/activate_code";
	
	ДанныеЗапроса = Новый Соответствие();
	ДанныеЗапроса.Вставить("account", Абонент);
	ДанныеЗапроса.Вставить("promo_code", ПромоКод);
	ДанныеЗапроса.Вставить("tenant", Область);
	ДанныеЗапроса.Вставить("login", Логин);
	ДанныеЗапроса.Вставить("debug", Отладка);
	
	УстановитьПривилегированныйРежим(Истина);
	КлючДоступа = Константы.КлючОбластиДанных.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	ДанныеЗапроса.Вставить("key", КлючДоступа);
	
	ДанныеОтвета = ОтветСервиса(АдресФункции, ДанныеЗапроса);
	
	Ответ = Новый Структура(); 
	Ответ.Вставить("Ошибка", ДанныеОтвета.error = Истина);
	Ответ.Вставить("КодОшибки", ДанныеОтвета.errorCode);
	Ответ.Вставить("Текст", ДанныеОтвета.text);
	Ответ.Вставить("Результат", Ложь); 
	
	Если Ответ.Ошибка Тогда
		Возврат Ответ;
	КонецЕсли; 
	
	Ответ.Результат = (ДанныеОтвета.success = Истина);
	Возврат Ответ;

КонецФункции // АктивироватьПромоКод() 

#КонецОбласти 

#Область Account

// Возвращает информацию о тарифе обслуживающей организаций.
//
// Параметры:
//  КодОО - Число - код обслуживающей организации.
//  КодТарифа - Строка - код тарифа обслуживающей организации. 
// 
// Возвращаемое значение:
//  Структура - информация о тарифе:
//   * Код - Строка - код тарифа
//   * Наименование - Строка - наименование тарифа
//   * КодБазовогоТарифа - Строка - код базового тарифа
//   * ОписаниеДляАбонентов - ФорматированныйДокумент - описание тарифа для абонентов.
//   * ПериодыДействия - ТаблицаЗначений - периоды действия тарифа:
//     * Код - Строка - код периода действия
//     * Наименование - Строка - наименование периода действия
//     * Сумма - Число - стоимость
//     * Комментарий - Строка - комментарий к периоду действия
//
Функция ТарифОбслуживающейОрганизаций(КодОО, КодТарифа) Экспорт
	
    Метод = "account/servant_tariffs/info";	
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("servant", КодОО);
    ДанныеЗапроса.Вставить("id", КодТарифа);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
	Тариф = ДанныеОтвета.servant_tariff;
    
    ПолеПериод = "period";
    ПолеПериоды = "validity_periods";
    Для Каждого Строка Из Тариф[ПолеПериоды] Цикл
        Строка[ПолеПериод] = Перечисления.ПериодичностьПериодовДействия.ЗначениеПоИмени(Строка[ПолеПериод]);	
    КонецЦикла; 
    
    Переименования = Новый Соответствие;
	Переименования.Вставить("id", "Код");
	Переименования.Вставить("name", "Наименование");
    Переименования.Вставить("tariff_id", "КодБазовогоТарифа");
	Переименования.Вставить("description_for_subscribers", "ОписаниеДляАбонентов");
    Переименования.Вставить("validity_periods", "ПериодыДействия");
    
    ПереименованияПериоды = Новый Соответствие;
    ПереименованияПериоды.Вставить("id", "Код");
	ПереименованияПериоды.Вставить("period", "Периодичность");
	ПереименованияПериоды.Вставить("quantity", "Количество");
    ПереименованияПериоды.Вставить("name", "Наименование");
	ПереименованияПериоды.Вставить("cost", "Сумма");
	ПереименованияПериоды.Вставить("comment", "Комментарий");
    ПереименоватьСвойства(Тариф, Переименования);
    
    СтруктураВложений = Новый Структура;
    Для Каждого Вложение Из Тариф.ОписаниеДляАбонентов.images Цикл
        ДанныеКартинки = ПолучитьДвоичныеДанныеИзBase64Строки(Вложение.data);
        СтруктураВложений.Вставить(Вложение.name, Новый Картинка(ДанныеКартинки, Истина));
    КонецЦикла;
    ОписаниеДляАбонентов = Новый ФорматированныйДокумент;
    ОписаниеДляАбонентов.УстановитьHTML(Тариф.ОписаниеДляАбонентов.html, СтруктураВложений);
	Тариф.ОписаниеДляАбонентов = ОписаниеДляАбонентов;
    
    Тариф.ПериодыДействия = МассивСтруктурВТаблицуЗначений(Тариф.ПериодыДействия, ПереименованияПериоды);
    
    Возврат Тариф;
	
КонецФункции

// Возвращает список тарифов обслуживающей организации.
//
// Параметры:
//  КодОО - Число - код обслуживающей организации.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список тарифов:
//   * Код - Строка - код тарифа
//   * Наименование - Строка - наименование тарифа
//   * КодБазовогоТарифа - Строка - код базового тарифа
//
Функция ТарифыОбслуживающейОрганизации(КодОО) Экспорт
	
    Метод = "account/servant_tariffs/list";	
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("servant", КодОО);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Переименования = Новый Соответствие;
	Переименования.Вставить("id", "Код");
	Переименования.Вставить("name", "Наименование");
    Переименования.Вставить("tariff_id", "КодБазовогоТарифа");
    
    Возврат МассивСтруктурВТаблицуЗначений(ДанныеОтвета.servant_tariff, Переименования);
    
КонецФункции
 
// Возвращает HTML-страницу выбора тарифа обслуживающей организации абонента этого приложения.
//
// Параметры:
//  КодОО - Число - код обслуживающей организации.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Строка - HTML-страница выбора тарифа обслуживающей организации.
//
Функция СтраницаВыбораТарифаОбслуживающейОрганизации(КодОО, 
    ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
    
    Метод = "account/servants/tariff_selection_page";
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("servant", КодОО);
    
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
    
    Если ДанныеОтвета <> Неопределено Тогда
        Возврат ДанныеОтвета.html;
    Иначе 
        Возврат Неопределено;
    КонецЕсли; 
    
КонецФункции

// Возвращает список обслуживающих организаций абонента этого приложения.
//
// Возвращаемое значение:
//  ТаблицаЗначений - обслуживающие организации абонента:
//   * Код - Число
//   * Наименование - Строка
//   * Город - Строка
//   * Сайт - Строка
//   * Почта - Строка
//   * Телефон - Строка
//   * РазрешеноПодписыватьНаТарифы - Булево
//   * РазрешеноАвтоматическоеВыставлениеСчетов - Булево
//   * РазрешеноПереопределениеТарифов - Булево
//
Функция ОбслуживающиеОрганизацииАбонента() Экспорт
    
    Метод = "account/servants/list";
    Абонент = ПрограммныйИнтерфейсСервисаПовтИсп.АбонентЭтогоПриложения();
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", Абонент.Код);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Переименования = Новый Соответствие;
    Переименования.Вставить("name", "Наименование");
    Переименования.Вставить("id", "Код");
    Переименования.Вставить("city", "Город");
    Переименования.Вставить("site", "Сайт");
    Переименования.Вставить("email", "Почта");
    Переименования.Вставить("phone", "Телефон");
    Переименования.Вставить("tariff_subscribe_allowed", "РазрешеноПодписыватьНаТарифы");
    Переименования.Вставить("automatic_billing_allowed", "РазрешеноАвтоматическоеВыставлениеСчетов");
    Переименования.Вставить("tariff_override_allowed", "РазрешеноПереопределениеТарифов");
    
    Возврат МассивСтруктурВТаблицуЗначений(ДанныеОтвета.servants, Переименования);
    
КонецФункции 

// Возвращает список пользователей абонента этого приложения.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пользователи абонента:
//   * Логин - Строка
//   * ПолноеИмя - Строка
//   * Почта - Строка
//   * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов
//   * РазрешенноеКоличествоСеансов - Число
//   * ВременныйДоступ - Булево
//
Функция ПользователиАбонента() Экспорт
	
    Метод = "account/users/list";
    Абонент = ПрограммныйИнтерфейсСервисаПовтИсп.АбонентЭтогоПриложения();
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", Абонент.Код);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Поле = "role";
    Для Каждого Строка Из ДанныеОтвета.user  Цикл
        Строка[Поле] = Перечисления.РолиПользователейАбонентов.ЗначениеПоИмени(Строка[Поле]);
    КонецЦикла; 
    
    Переименования = ПереименованияПолей(Метод);
    
	Возврат МассивСтруктурВТаблицуЗначений(ДанныеОтвета.user, Переименования);
	
КонецФункции  

// Возвращает свойства пользователя абонента по логину.
//
// Параметры:
//  Логин - Строка - Логин (Имя) пользователя.
// 
// Возвращаемое значение:
//  Структура - свойства пользователя абонента:
//   * Логин - Строка
//   * ПолноеИмя - Строка
//   * Почта - Строка
//   * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов
//   * РазрешенноеКоличествоСеансов - Число
//   * ВременныйДоступ - Булево
//
Функция СвойстваПользователяАбонента(Логин) Экспорт
	
    Метод = "account/users/info";
    Абонент = ПрограммныйИнтерфейсСервисаПовтИсп.АбонентЭтогоПриложения();
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", Абонент.Код);
    ДанныеЗапроса.Вставить("login", Логин);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Поле = "role";
    ДанныеОтвета.user[Поле] = Перечисления.РолиПользователейАбонентов.ЗначениеПоИмени(ДанныеОтвета.user[Поле]);
    
    Переименования = ПереименованияПолей(Метод);
    
	Возврат ПереименоватьСвойства(ДанныеОтвета.user, Переименования);
	
КонецФункции

// Создает новую учетную запись пользователя сервиса и подключает созданного пользователя к абоненту этого приложения. 
//
// Параметры:
//  ПараметрыСоздания - Структура - см. метод ПрограммныйИнтерфейсСервиса.НовыйПараметрыСозданияПользователя
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - признак создания учетной зиписи Истина - создана, Ложь - произошла ошибка.
//
Функция СоздатьПользователяАбонента(ПараметрыСоздания,
    ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
    
    Метод = "account/users/create";
    Абонент = ПрограммныйИнтерфейсСервисаПовтИсп.АбонентЭтогоПриложения();
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", Абонент.Код);
    ДанныеЗапроса.Вставить("role", Перечисления.РолиПользователейАбонентов.ИмяПоЗначению(ПараметрыСоздания.РольПользователя));
    ДанныеЗапроса.Вставить("login", ПараметрыСоздания.Логин);
    ДанныеЗапроса.Вставить("password", ПараметрыСоздания.Пароль);
    ДанныеЗапроса.Вставить("email", ПараметрыСоздания.Почта);
    ДанныеЗапроса.Вставить("email_required ", ПараметрыСоздания.ПочтаОбязательна);
    ДанныеЗапроса.Вставить("name", ПараметрыСоздания.ПолноеИмя);
    ДанныеЗапроса.Вставить("phone", ПараметрыСоздания.Телефон);
    ДанныеЗапроса.Вставить("timezone", ПараметрыСоздания.ЧасовойПояс);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
    
    Если КодОтвета = 10200 Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли; 
	
КонецФункции

// Устанавливает указанному пользователю абонента этого приложения указанную роль.
//
// Параметры:
//  Логин - Строка - логин (имя) пользователя. 
//  Роль - Перечисления.РолиПользователейАбонентов - устанавливаемая роль пользователя.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - установки роли Истина - установлено, Ложь - произошла ошибка.
//
Функция УстановитьРольПользователяАбонента(Логин, Роль,
    ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
	
	Метод = "account/users/set_role";
    Абонент = ПрограммныйИнтерфейсСервисаПовтИсп.АбонентЭтогоПриложения();
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", Абонент.Код);
    ДанныеЗапроса.Вставить("login", Логин);
    ДанныеЗапроса.Вставить("role", Перечисления.РолиПользователейАбонентов.ИмяПоЗначению(Роль));
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
    
    Если КодОтвета = 10200 Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли; 
	
КонецФункции
    
#КонецОбласти 

#Область Application
    
// Возвращает список прикладных конфигураций, доступных абоненту этого приложения.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - доступные конфигурации:
//    * Код - Строка - код конфигурации
//    * Наименование - Строка - синоним конфигурации 
//    * Имя - Строка - имя конфигурации (как оно задано в конфигураторе).
//    * Описание - Строка - описание конфигурации 
//    * КодАбонента - Число - код абонента. 
//
Функция Конфигурации() Экспорт
	
    Метод = "application/list";
    Абонент = ПрограммныйИнтерфейсСервисаПовтИсп.АбонентЭтогоПриложения();
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("account", Абонент.Код);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Переименования = Новый Соответствие;
	Переименования.Вставить("id", ОписаниеКолонки("Код", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
    Переименования.Вставить("name", ОписаниеКолонки("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(64)));
    Переименования.Вставить("sysname", ОписаниеКолонки("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(255)));
    Переименования.Вставить("description", ОписаниеКолонки("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(0)));
	Переименования.Вставить("account", ОписаниеКолонки("КодАбонента", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный)));
    
	Возврат МассивСтруктурВТаблицуЗначений(ДанныеОтвета.application, Переименования);
	
КонецФункции

#КонецОбласти 

#Область Tenant

// Возвращает данные абонента этого приложения.
// 
// Возвращаемое значение:
//  Структура - данные абонента:
//    * Наименование - Строка - наименование абонента
//    * Код - Число - код абонента
//    * РольПользователя - ПеречислениеСсылка.РолиПользоватейАбонентов - роль текущего пользователя абонента.
//
Функция АбонентЭтогоПриложения() Экспорт
    
	Метод = "tenant/account";
	
	ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	ДанныеЗапроса.Вставить("auth", ДанныеАвторизации());
    Адрес = АдресИсполненияВнешнегоПрограммногоИнтерфейса();
    Результат = РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("POST", Адрес, ДанныеЗапроса);
	
    ДанныеОтвета = РезультатВыполнения(Результат);
    Абонент = ДанныеОтвета.account;
    ПолеРоль = "role";
    Абонент[ПолеРоль] = Перечисления.РолиПользователейАбонентов.ЗначениеПоИмени(Абонент[ПолеРоль]);
    
    Переименования = Новый Соответствие;
    Переименования.Вставить("name", "Наименование");
    Переименования.Вставить("id", "Код");
    Переименования.Вставить(ПолеРоль, "РольПользователя");
    
    Возврат ПереименоватьСвойства(Абонент, Переименования);
    
КонецФункции

// Возвращает список приложений, доступных пользователю абонента этого приложения. 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - доступные приложения:
//   * Код - Число
//   * Наименование - Строка
//   * КодАбонентаВладельца - Число
//   * КодКонфигурации - Число
//   * ВерсияКонфигурации - Строка
//   * НаименованиеКонфигурации - Строка
//   * СостояниеПриложения - ПеречислениеСсылка.СостоянияПриложений
//   * АдресПриложения - Строка
//   * ЧасовойПояс - Строка
//
Функция Приложения() Экспорт
    
    Метод = "tenant/list";
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Поле = "status";
    Для Каждого Строка Из ДанныеОтвета.tenant  Цикл
        Строка[Поле] = Перечисления.СостоянияПриложений.ЗначениеПоИмени(Строка[Поле]);
    КонецЦикла; 
	Переименования = ПереименованияПолей(Метод);
    
	Возврат МассивСтруктурВТаблицуЗначений(ДанныеОтвета.tenant, Переименования);
	
КонецФункции

// Возвращает информацию об указанном приложении.
//
// Параметры:
//  КодПриложения - Строка - код приложения (номер области).
// 
// Возвращаемое значение:
//  Структура - свойства приложения:
//   * Код - Число
//   * Наименование - Строка
//   * КодАбонентаВладельца - Число
//   * КодКонфигурации - Число
//   * ВерсияКонфигурации - Строка
//   * НаименованиеКонфигурации - Строка
//   * СостояниеПриложения - ПеречислениеСсылка.СостоянияПриложений
//   * АдресПриложения - Строка
//   * ЧасовойПояс - Строка
//
Функция СвойстваПриложения(КодПриложения) Экспорт
	
    Метод = "tenant/info";
    ДанныеЗапроса = ШаблонЗапроса(Метод);
	ДанныеЗапроса.Вставить("id", КодПриложения);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Поле = "status";
    ДанныеОтвета.tenant[Поле] = Перечисления.СостоянияПриложений.ЗначениеПоИмени(ДанныеОтвета.tenant[Поле]);
	
	Переименования = ПереименованияПолей(Метод);
	
	Возврат ПереименоватьСвойства(ДанныеОтвета.tenant, Переименования);
	
КонецФункции
 
// Возвращает список пользователей, которым разрешен доступ к указанному приложению.
//
// Параметры:
//  КодПриложени - Число - код приложения (номер области)
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пользователи, которым разрешен доступ:
//   * Логин - Строка
//   * Роль - ПеречислениеСсылка.ПраваПользователяПриложения
//
Функция ПользователиПриложения(КодПриложения) Экспорт
	
	Метод = "tenant/users/list";
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", КодПриложения);
    
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Поле = "role";
    Для Каждого Строка Из ДанныеОтвета.user  Цикл
        Строка[Поле] = Перечисления.ПраваПользователяПриложения.ЗначениеПоИмени(Строка[Поле]);
    КонецЦикла; 
    
    Переименования = Новый Соответствие;
	Переименования.Вставить("login", "Логин");
	Переименования.Вставить("role", "Право");
    
	Возврат МассивСтруктурВТаблицуЗначений(ДанныеОтвета.user, Переименования);
	
КонецФункции

// Устанавливает пользователю с указанным логином доступ к указанному приложению и назначает указанную роль для работы в приложении.
//
// Параметры:
//  ПараметрыДобавления - Структура - см. метод ПрограммныйИнтерфейсСервиса.НовыйПараметрыДобавленияПользователяВПриложение
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат установки права доступа к приложению: Истина - право установлено, Ложь - произошла ошибка.
//
Функция ДобавитьПользователяВПриложение(ПараметрыДобавления,
    ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
	
	Метод = "tenant/users/add";
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", ПараметрыДобавления.КодПриложения);
    ДанныеЗапроса.Вставить("login", ПараметрыДобавления.Логин);
    ДанныеЗапроса.Вставить("role", Перечисления.ПраваПользователяПриложения.ИмяПоЗначению(ПараметрыДобавления.Право));
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
    
    Если КодОтвета = 10200 Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли; 
	
КонецФункции

// Отменяет пользователю с указанным логином доступ к указанному приложению.
//
// Параметры:
//  Логин - Строка - Логин (Имя) пользователя.
//  КодПриложени - Число - код приложения (номер области)
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат отмены права доступа к приложению: Истина - право отменено, Ложь - произошла ошибка.
//
Функция УдалитьПользователяИзПриложения(Логин, КодПриложения,
    ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
	
	Метод = "tenant/users/delete";
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", КодПриложения);
    ДанныеЗапроса.Вставить("login", Логин);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
    
    Если КодОтвета = 10200 Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли; 
	
КонецФункции

// Метод создает новое приложение с указанной прикладной конфигурацией.
//
// Параметры:
//  ПараметрыСоздания - Структура - см. метод ПрограммныйИнтерфейсСервиса.НовыйПараметрыСозданияПриложения
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Структура - результат создания приложения:
//  * Код - Число - код созданного приложения (номер области)
//  * СостояниеПриложения - ПеречислениеСсылка.СостоянияПриложений - состояние приложения после создания.
//  * АдресПриложения - Строка - адрес созданного приложения.
//
Функция СоздатьПриложение(ПараметрыСоздания,
    ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт

	Метод = "tenant/create";
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("application", ПараметрыСоздания.КодКонфигурации);
    ДанныеЗапроса.Вставить("name", ПараметрыСоздания.Наименование);
    ДанныеЗапроса.Вставить("timezone", ПараметрыСоздания.ЧасовойПояс);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
	
	Переименования = Новый Соответствие;
	Переименования.Вставить("id", ОписаниеКолонки("Код", ОбщегоНазначения.ОписаниеТипаЧисло(7, 0, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("status", ОписаниеКолонки("СостояниеПриложения", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияПриложений")));
	Переименования.Вставить("url", ОписаниеКолонки("АдресПриложения", ОбщегоНазначения.ОписаниеТипаСтрока(500)));
	
	Если КодОтвета = 10200 Или КодОтвета = 10202 Тогда
		Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеОтвета.tenant);
	    Поле = "status";
	    Результат[Поле] = Перечисления.СостоянияПриложений.ЗначениеПоИмени(Результат[Поле]);
		Результат = ПереименоватьСвойства(Результат, Переименования);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("Код", 0);
		Результат.Вставить("СостояниеПриложения", Перечисления.СостоянияПриложений.ПустаяСсылка());
		Результат.Вставить("АдресПриложения", "");
	КонецЕсли; 
	
	Возврат Результат;
    
КонецФункции
    
#КонецОбласти 

#Область Tariff
    
// Возвращает информацию о тарифе сервиса по коду тарифа.
//
// Параметры:
//  КодТарифа - Строка - код тарифа.
//
// Возвращаемое значение:
//  Структура - информация о тарифе:
//   * Код - Строка - код тарифа
//   * Наименование - Строка - наименование тарифа
//   * ОписаниеДляОбслуживающихОрганизаций - Строка - описание тарифа для обслуживающей организации.
//   * ОписаниеДляАбонентов - ФорматированныйДокумент - описание тарифа для абонентов.
//   * ДатаНачалаДействия - Дата - дата начала действия тарифа.
//   * ДатаОкончанияДействия - Дата - дата окончания действия тарифа.
//   * ПериодДействияПродлевающейПодписки - Число - период (в днях), в течение которого действует продлевающая подписка (если разрешено продление).
//   * ПериодДействияРасширяющейПодписки - Число - период (в днях), в течение которого действует расширяющая подписка.
//   * ПериодДобавленияПродлевающейПодписки - Число - период (в днях) после завершения действия подписки, в течение которого можно создать продлевающую подписку.
//   * РасширениеТарифа - Булево - признак, что тариф является расширением
//   * Платный - Булево - признак, что тариф является плантым (содержит платнфе периоды действия)
//   * Услуги - ТаблицаЗначений - услуги тарифа:
//     * Код - Строка - код услуги
//     * Наименование - Строка - Наименование услуги
//     * ТипУслуги - ПеречислениеСсылка.ТипыУслугСервиса - тип услуги
//     * Описание - Строка - Описание услуги
//     * КоличествоЛицензий - Число - количество лицензий на услугу, включенное в тариф
//     * КоличествоДопЛицензийРасширяющейПодписки - Число - количество лицензий на услугу, которое может быть предоставлено расширяющей подпиской
//     * ИдентификаторПоставщика - Строка - идентификатор поставщика услуги
//     * НаименованиеПоставщика - Строка - наименование поставщика услуги
//   * Расширения - ТаблицаЗначений - расширения тарифа:
//     * Код - Строка - код тарифа-расширения
//     * Наименование - Строка - наименование тарифа-расширения
//   * Конфигурации - ТаблицаЗначений - конфигурации тарифа:
//     * Код - Строка - код конфигурации
//     * Наименование - Строка - имя конфигурации
//     * Описание - Строка - описание конфигурации
//   * ПериодыДействия - ТаблицаЗначений - периоды действия тарифа:
//     * Код - Строка - код периода действия
//     * Наименование - Строка - наименование периода действия
//     * Сумма - Число - стоимость
//     * Комментарий - Строка - комментарий к периоду действия
//
Функция ТарифСервиса(КодТарифа) Экспорт
    
    Метод = "tariff/info";
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("id", КодТарифа);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
	Тариф = ДанныеОтвета.tariff;
    
    ПолеТип = "type";
    ПолеПериод = "period";
    ПолеУслуги = "services";
    ПолеПериоды = "validity_periods";
    Для Каждого Строка Из Тариф[ПолеУслуги] Цикл
        Строка[ПолеТип] = Перечисления.ТипыУслуг.ЗначениеПоИмени(Строка[ПолеТип]);
    КонецЦикла;
    Для Каждого Строка Из Тариф[ПолеПериоды] Цикл
        Строка[ПолеПериод] = Перечисления.ПериодичностьПериодовДействия.ЗначениеПоИмени(Строка[ПолеПериод]);	
    КонецЦикла; 
    
    Переименования = Новый Соответствие;
	Переименования.Вставить("id", "Код");
	Переименования.Вставить("name", "Наименование");
	Переименования.Вставить("description", "ОписаниеДляОбслуживающихОрганизаций");
	Переименования.Вставить("description_for_subscribers", "ОписаниеДляАбонентов");
    Переименования.Вставить("start", "ДатаНачалаДействия");
    Переименования.Вставить("expiration","ДатаОкончанияДействия");
	Переименования.Вставить("prolongation_validity", "ПериодДействияПродлевающейПодписки");
	Переименования.Вставить("extension_validity", "ПериодДействияРасширяющейПодписки");
	Переименования.Вставить("prolongation_during", "ПериодДобавленияПродлевающейПодписки");
	Переименования.Вставить("is_extension", "РасширениеТарифа");
	Переименования.Вставить("is_payable", "Платный");
    Переименования.Вставить("services", "Услуги");
    Переименования.Вставить("extensions", "Расширения");
    Переименования.Вставить("applications", "Конфигурации");
    Переименования.Вставить("validity_periods", "ПериодыДействия");
    
	ПереименованияУслуги = Новый Соответствие; 	
	ПереименованияУслуги.Вставить("id", "Код");
	ПереименованияУслуги.Вставить("name", "Наименование");
	ПереименованияУслуги.Вставить("type", "ТипУслуги");
	ПереименованияУслуги.Вставить("description", "Описание");
	ПереименованияУслуги.Вставить("amount", "КоличествоЛицензий");
	ПереименованияУслуги.Вставить("extend_amount", "КоличествоДопЛицензийРасширяющейПодписки");
	ПереименованияУслуги.Вставить("provider_id", "ИдентификаторПоставщика");
	ПереименованияУслуги.Вставить("provider_name", "НаименованиеПоставщика");
    
    ПерименованияРасширения = Новый Соответствие;
	ПерименованияРасширения.Вставить("id", "Код");
	ПерименованияРасширения.Вставить("name", "Наименование");
    
    ПерименованияКонфигурации = Новый Соответствие;
	ПерименованияКонфигурации.Вставить("id", "Код");
	ПерименованияКонфигурации.Вставить("name", "Наименование");
	ПерименованияКонфигурации.Вставить("description", "Описание");
    
    ПереименованияПериоды = Новый Соответствие;
    ПереименованияПериоды.Вставить("id", "Код");
	ПереименованияПериоды.Вставить("period", "Периодичность");
	ПереименованияПериоды.Вставить("quantity", "Количество");
    ПереименованияПериоды.Вставить("name", "Наименование");
	ПереименованияПериоды.Вставить("cost", "Сумма");
	ПереименованияПериоды.Вставить("comment", "Комментарий");
	
    ПереименоватьСвойства(Тариф, Переименования);
    
    // Обработаем описание для абонентов
    СтруктураВложений = Новый Структура;
    Для Каждого Вложение Из Тариф.ОписаниеДляАбонентов.images Цикл
        ДанныеКартинки = ПолучитьДвоичныеДанныеИзBase64Строки(Вложение.data);
        СтруктураВложений.Вставить(Вложение.name, Новый Картинка(ДанныеКартинки, Истина));
    КонецЦикла;
    ОписаниеДляАбонентов = Новый ФорматированныйДокумент;
    ОписаниеДляАбонентов.УстановитьHTML(Тариф.ОписаниеДляАбонентов.html, СтруктураВложений);
	Тариф.ОписаниеДляАбонентов = ОписаниеДляАбонентов;
    
    Тариф.Услуги = МассивСтруктурВТаблицуЗначений(Тариф.Услуги, ПереименованияУслуги);
    Тариф.Расширения = МассивСтруктурВТаблицуЗначений(Тариф.Расширения, ПерименованияРасширения);
    Тариф.Конфигурации = МассивСтруктурВТаблицуЗначений(Тариф.Конфигурации, ПерименованияКонфигурации);
    Тариф.ПериодыДействия = МассивСтруктурВТаблицуЗначений(Тариф.ПериодыДействия, ПереименованияПериоды);
    
    Возврат Тариф;
    
КонецФункции

#КонецОбласти 

#Область Subscription
    
// Возвращает список существующих подписок абонента текущего приложения.
//
// Возвращаемое значение:
//  ТаблицаЗначений - существующие подписки абонента:
//   * КодАбонента - Число
//   * Номер - Строка - номер подписки
//   * Дата - Дата - дата регистрации 
//   * ТипПодписки - ПеречислениеСсылка.ТипыПодписокСервиса
//   * КодОбслуживающейОрганизации - Число
//   * ДатаПодключения - Дата
//   * ДатаОтключения - Дата
//   * КодТарифа - Строка
//   * НомерОсновнойПодписки - Строка.
//
Функция ПодпискиАбонента() Экспорт
	
    Метод = "subscription/list";
    Абонент = ПрограммныйИнтерфейсСервисаПовтИсп.АбонентЭтогоПриложения();
    КодАбонента = Абонент.Код;
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("account", КодАбонента);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат);
    
    Поле = "type";
    Для Каждого Строка Из ДанныеОтвета.subscription Цикл
        Строка[Поле] = Перечисления.ТипыПодписокСервиса.ЗначениеПоИмени(Строка[Поле]);
    КонецЦикла; 
    
    Переименования = Новый Соответствие;
    Переименования.Вставить("account", "КодАбонента");
    Переименования.Вставить("id", "Номер");
    Переименования.Вставить("created", "Дата");
    Переименования.Вставить("type", "ТипПодписки");
    Переименования.Вставить("servant", "КодОбслуживающейОрганизации");
    Переименования.Вставить("start", "ДатаПодключения");
    Переименования.Вставить("completion", "ДатаОтключения");
    Переименования.Вставить("tariff", "КодТарифа");
    Переименования.Вставить("parent", "НомерОсновнойПодписки");
	
	Возврат МассивСтруктурВТаблицуЗначений(ДанныеОтвета.subscription, Переименования);
    
КонецФункции

#КонецОбласти 

#Область Promo_code
    
// Выполняет активацию указанного промо-кода для абонента текущего приложения.
//
// Параметры:
//  Промокод - Строка - используемый промокод.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат использования: Истина - промокод активирован, Ложь - произошла ошибка.
//
Функция ИспользоватьПромокод(Промокод,
    ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
	
	Метод = "promo_code/activate";
    Абонент = ПрограммныйИнтерфейсСервисаПовтИсп.АбонентЭтогоПриложения();
    КодАбонента = Абонент.Код;
    ДанныеЗапроса = ШаблонЗапроса(Метод);
    ДанныеЗапроса.Вставить("account", КодАбонента);
    ДанныеЗапроса.Вставить("code", ПромоКод);
    Результат = ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса);
    ДанныеОтвета = РезультатВыполнения(Результат, ВызыватьИсключениеПриОшибке, КодСостояния, КодОтвета, Сообщение);
    
    Если КодОтвета = 10200 Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли; 
	
КонецФункции
 
#КонецОбласти 

// Возвращает шаблон параметров создания пользователя для метода ПрограммныйИнтерфейсСервиса.СоздатьПользователяАбонента.
// 
// Возвращаемое значение:
//  Структура - шаблон параметров создания пользователя:
//	 * Логин - Строка - логин (имя пользователя)
//	 * Пароль - Строка
//   * ПочтаОбязательна - Булево
//   * Почта - Строка
//   * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов
//   * ПолноеИмя - Строка - полное имя пользователя
//   * Телефон - Строка
//   * ЧасовойПояс - Строка
//
Функция НовыйПараметрыСозданияПользователя() Экспорт
	
    Параметры = Новый Структура;
    Параметры.Вставить("Логин", "");
    Параметры.Вставить("Пароль");
    Параметры.Вставить("ПочтаОбязательна", Истина);
    Параметры.Вставить("Почта");
    Параметры.Вставить("РольПользователя", Перечисления.РолиПользователейАбонентов.ПользовательАбонента);
    Параметры.Вставить("ПолноеИмя");
    Параметры.Вставить("Телефон");
    Параметры.Вставить("ЧасовойПояс");
    
    Возврат Параметры;
	
КонецФункции

// Возвращает шаблон параметров создания приложения для метода ПрограммныйИнтерфейсСервиса.СоздатьПриложение.
// 
// Возвращаемое значение:
//  Структура - шаблон параметров создания приложения:
//	 * Наименование - Строка - наименование создаваемого приложения.
//	 * КодКонфигурации - Строка - кон конфигурации (вид приложения) 
//   * ЧасовойПояс - Строка
//
Функция НовыйПараметрыСозданияПриложения() Экспорт
    
    Параметры = Новый Структура;
    Параметры.Вставить("Наименование");
    Параметры.Вставить("КодКонфигурации");
    Параметры.Вставить("ЧасовойПояс");
    
    Возврат Параметры;

КонецФункции

// Возвращает шаблон параметров добавления пользвоателя в приложение для метода ПрограммныйИнтерфейсСервиса.ДобавитьПользователяВПриложение.
// 
// Возвращаемое значение:
//  Структура - шаблон параметров добавления пользователя в приложение:
//	 * КодПриложения - Строка - наименование создаваемого приложения.
//	 * Логин - Строка - логин (имя пользователя) 
//   * Право - ПеречислениеСсылка.ПраваПользователяПриложения
//
Функция НовыйПараметрыДобавленияПользователяВПриложение() Экспорт
	
	Параметры = Новый Структура;
    Параметры.Вставить("КодПриложения", 0);
    Параметры.Вставить("Логин", "");
    Параметры.Вставить("Право", Перечисления.ПраваПользователяПриложения.ПустаяСсылка());
    
    Возврат Параметры;
	
КонецФункции

#КонецОбласти  

// Важно! Служебный программный интерфейс может существенно изменяться со временем.
// 
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает шаблон запроса к внешнему программному интерфейсу менеджера сервиса.
// Шаблон включает блок "general" с заполненными свойствами "type" и "method".
// Подробнее см. статью https://its.1c.ru/db/freshsm#content:15205582:1:issogl1_zicdv1s
//
// Параметры:
//  Метод - Строка - имя метода внешнего программного интерфейса менеджера сервиса.
// 
// Возвращаемое значение:
//  Структура - шаблон запроса.
//
Функция ШаблонЗапроса(Знач Метод) Экспорт
    
   	ОсновныеПараметрыМетода = Новый Структура;
    ОсновныеПараметрыМетода.Вставить("type", "ext");
    ОсновныеПараметрыМетода.Вставить("method", Метод);

    ШаблонЗапроса = Новый Структура;
    ШаблонЗапроса.Вставить("general", ОсновныеПараметрыМетода);
    
    Возврат ШаблонЗапроса;

КонецФункции

// Отправляет запрос к сервису внешнего программного интерфейса менеджера сервиса.
//
// Параметры:
//  ДанныеЗапроса - Структура - данные запроса, в соответствующем формате без раздела "auth"
//   Подробнее см. статью https://its.1c.ru/db/freshsm#content:15205582:hdoc
//   Данные авторизации добавляются непосредственно перед выполнением запроса.
//
// Возвращаемое значение:
//  HTTPОтвет - ответ HTTP-сервиса Менеджера сервиса. 
//
Функция ОтправитьДанныеВМенеджерСервиса(ДанныеЗапроса) Экспорт
    
    Адрес = АдресИсполненияВнешнегоПрограммногоИнтерфейса();
	Абонент = ПрограммныйИнтерфейсСервисаПовтИсп.АбонентЭтогоПриложения();
	ДанныеЗапроса.Вставить("auth", ДанныеАвторизации(Абонент.Код));
    Возврат РаботаВМоделиСервисаБТС.ОтправитьЗапросВМенеджерСервиса("POST", Адрес, ДанныеЗапроса);
    
КонецФункции

#КонецОбласти  

// Служебные процедуры и функции, вызов допускается только из самого модуля.
// 
#Область СлужебныеФункции

// Пытается выполнить через API переданную команду и возвращает разобранный ответ
//
// Параметры:
//	АдресФункции - Строка - Адрес, по которому нужно обращаться для выполнения функции 
//	ДанныеЗапроса - Соответствие - будет преобразовано в JSON-тело запроса
//	Указатель - HTTPСоединение - Соединение, через которое нужно вести работу с сервисом 
//
// Возвращаемое значение:
//   Структура   - ответ сервиса [Адрес,Код,Тело,КодОтвета,ТекстОтвета,Данные,Ошибка,ОписаниеОшибки]
//
Функция ОтветСервиса(Знач АдресФункции, ДанныеЗапроса = Неопределено, Знач Указатель = Неопределено)

	// Создаем HTTP-соединение
	
	Если Указатель = Неопределено Тогда
		Указатель = УказательСервиса();
	КонецЕсли; 	
	
	Если НЕ Лев(АдресФункции, 1) = "/" Тогда
		АдресФункции = "/" + АдресФункции;
	КонецЕсли; 
	
	// Создаем и выполняем HTTP-запрос
	
	Запрос = УказательФункции(АдресФункции);
	Если ЗначениеЗаполнено(ДанныеЗапроса) Тогда
		ТелоЗапроса = РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(ДанныеЗапроса);
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли; 
	
	ОтветСервера = Указатель.ОтправитьДляОбработки(Запрос);
	ДанныеОтвета = ПрочитанныеДанныеОтвета(ОтветСервера);
	
	Возврат ДанныеОтвета;
	
КонецФункции // ОтветСервиса() 

// Возвращает данные HTTP-ответа от сервиса API, дополненные обязательными
// параметрами (если такие есть).
//
// Параметры:
//	Ответ - HTTPСервисОтвет - исходный HTTP-ответ
//
// Возвращаемое значение:
//   Структура   - данные запроса, переложенные в структуру
//
Функция ПрочитанныеДанныеОтвета(Ответ)

	ДанныеОтвета = Новый Структура();
	ДанныеОтвета.Вставить("error", Ложь);
	ДанныеОтвета.Вставить("errorCode", 0);
	ДанныеОтвета.Вставить("text", "");
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	Если ЗначениеЗаполнено(ТелоОтвета) Тогда
		
		Указатель = Новый ЧтениеJSON();
		Указатель.УстановитьСтроку(ТелоОтвета);
		
		Попытка
			РезультатОтвет = ПрочитатьJSON(Указатель, Истина); 		
		Исключение
			Комментарий = ОписаниеОшибки() + Символы.ПС + Символы.ПС + ТелоОтвета;
			Локаль = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
			Событие = ИмяСобытия() + "." + НСтр("ru = 'Ошибка чтения JSON'", Локаль);
			ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
			ВызватьИсключение;
		КонецПопытки; 	
		
		Для каждого Элемент Из РезультатОтвет Цикл
			Попытка
				ДанныеОтвета.Вставить(Элемент.Ключ, Элемент.Значение);
			Исключение
				Комментарий = ОписаниеОшибки() + Символы.ПС + Символы.ПС + Элемент.Ключ + ": " + Элемент.Значение;
				Локаль = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
				Событие = ИмяСобытия() + "." + НСтр("ru = 'Ошибка преобразования JSON'", Локаль);
				ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
				ВызватьИсключение;
			КонецПопытки; 
		КонецЦикла; 
		
	КонецЕсли; 
	
	Возврат ДанныеОтвета;

КонецФункции // ПрочитанныеДанныеОтвета() 

// Возвращает параметры подключения к веб-сервису МС PublicAPI 
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   Структура   - сформированные параметры подключения
//
Функция ПараметрыПодключения()

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("URL", РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса()+ "/hs/api/");
	ПараметрыПодключения.Вставить("Логин", РаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса());
	ПараметрыПодключения.Вставить("Пароль", РаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса());
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПараметрыПодключения;

КонецФункции // ПараметрыПодключения() 

// Создает HTTP-соединение, которое будет использоваться для работы с API. 
// Важно — необходимость в TLS определяется по URL, используются хранилища сертификатов ОС.
//
// Возвращаемое значение:
//   HTTPСоединение   - созданный "указатель сервиса"
//
Функция УказательСервиса()

	РеквизитыСервиса = ПараметрыПодключения();
	Адрес = ОбщегоНазначенияКлиентСервер.СтруктураURI(РеквизитыСервиса.URL);
	
	Сигнатура = "https://";	
	Если Лев(ВРег(РеквизитыСервиса.URL), СтрДлина(Сигнатура)) = ВРег(Сигнатура) Тогда	
		SSL = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	Иначе
		SSL = Неопределено; 
	КонецЕсли; 
	
	Указатель = Новый HTTPСоединение(Адрес.Хост, Адрес.Порт, РеквизитыСервиса.Логин, РеквизитыСервиса.Пароль,, 60, SSL);
	Возврат Указатель;

КонецФункции // УказательСервиса() 

// Создает HTTP-запрос, которое будет использоваться для вызова функции API.
//
// Параметры:
//	АдресФункции - Строка - Адрес, по которому нужно обращаться для выполнения функции 
//
// Возвращаемое значение:
//   HTTPЗапрос   - созданный "указатель функции"
//
Функция УказательФункции(АдресФункции)

	РеквизитыСервиса = ПараметрыПодключения();
	Адрес = ОбщегоНазначенияКлиентСервер.СтруктураURI(РеквизитыСервиса.URL);
	
	Указатель = Новый HTTPЗапрос();
	Указатель.АдресРесурса = Адрес.ПутьНаСервере + АдресФункции;
	
	Указатель.Заголовки.Вставить("Accept-Charset", "utf-8");
	Указатель.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат Указатель;

КонецФункции // УказательФункции()  

// Возвращает строковую константу — имя корневого события ЖР
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   Строка   - имя события
//
Функция ИмяСобытия()

	Локаль = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Возврат НСтр("ru = 'Программный интерфейс сервиса'", Локаль);

КонецФункции // ИмяСобытия() 

Функция ПереименованияПолей(Метод)
	
    Переименования = Новый Соответствие;
	
	Если Метод = "tenant/info" Или Метод = "tenant/list" Тогда
		Переименования.Вставить("id", ОписаниеКолонки("Код", ОбщегоНазначения.ОписаниеТипаЧисло(7, 0, ДопустимыйЗнак.Неотрицательный)));
		Переименования.Вставить("name", ОписаниеКолонки("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100)));
	    Переименования.Вставить("owner", ОписаниеКолонки("КодАбонентаВладельца", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0, ДопустимыйЗнак.Неотрицательный)));
	    Переименования.Вставить("application", ОписаниеКолонки("КодКонфигурации", ОбщегоНазначения.ОписаниеТипаСтрока(9)));
	    Переименования.Вставить("app_version", ОписаниеКолонки("ВерсияКонфигурации", ОбщегоНазначения.ОписаниеТипаСтрока(18)));
	    Переименования.Вставить("app_name", ОписаниеКолонки("НаименованиеКонфигурации", ОбщегоНазначения.ОписаниеТипаСтрока(64)));
	    Переименования.Вставить("status", ОписаниеКолонки("СостояниеПриложения", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияПриложений")));
	    Переименования.Вставить("url", ОписаниеКолонки("АдресПриложения", ОбщегоНазначения.ОписаниеТипаСтрока(500)));
	    Переименования.Вставить("timezone", ОписаниеКолонки("ЧасовойПояс", ОбщегоНазначения.ОписаниеТипаСтрока(100)));
		
	ИначеЕсли Метод = "account/users/list" Или Метод = "account/users/info" Тогда
		Переименования.Вставить("login", ОписаниеКолонки("Логин", ОбщегоНазначения.ОписаниеТипаСтрока(32)));
		Переименования.Вставить("name", ОписаниеКолонки("ПолноеИмя", ОбщегоНазначения.ОписаниеТипаСтрока(150)));
	    Переименования.Вставить("email", ОписаниеКолонки("Почта", ОбщегоНазначения.ОписаниеТипаСтрока(254)));
	    Переименования.Вставить("role", ОписаниеКолонки("РольПользователя", Новый ОписаниеТипов("ПеречислениеСсылка.РолиПользователейАбонентов")));
	    Переименования.Вставить("session_restriction", ОписаниеКолонки("РазрешенноеКоличествоСеансов", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный)));
	    Переименования.Вставить("is_temporary", ОписаниеКолонки("ВременныйДоступ", Новый ОписаниеТипов("Булево")));
		
	КонецЕсли; 
	
	Возврат Переименования;
	
КонецФункции
 
Функция ОписаниеКолонки(Имя, Тип)
	
	Возврат Новый Структура("Имя, Тип", Имя, Тип);
	
КонецФункции

Функция АдресИсполненияВнешнегоПрограммногоИнтерфейса()
	
	Возврат "hs/ext_api/execute";
	
КонецФункции

Функция АдресВерсииВнешнегоПрограммногоИнтерфейса()
	
	Возврат "hs/ext_api/version";
	
КонецФункции

Функция ДанныеАвторизации(КодАбонента = Неопределено)
	
    ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
    НомерОбласти = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	
	УстановленПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда
        УстановитьПривилегированныйРежим(Истина);
        УстановленПривилегированныйРежим = Истина;
    КонецЕсли; 
	
	КлючДоступа = Константы.КлючОбластиДанных.Получить();
    СохраняемоеЗначениеПароля = ТекущийПользователь.СохраняемоеЗначениеПароля;
	
	Если УстановленПривилегированныйРежим Тогда
        УстановитьПривилегированныйРежим(Ложь);
    КонецЕсли; 
    
    РасположениеПриложения = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПолучитьНавигационнуюСсылкуИнформационнойБазы());
    
    ДанныеАвторизации = Новый Структура;
    ДанныеАвторизации.Вставить("type", "smtl");
    ДанныеАвторизации.Вставить("host",РасположениеПриложения.Хост);
    ДанныеАвторизации.Вставить("login", ТекущийПользователь.Имя);
    ДанныеАвторизации.Вставить("hash", СохраняемоеЗначениеПароля);
    ДанныеАвторизации.Вставить("tenant", НомерОбласти);
    ДанныеАвторизации.Вставить("key", КлючДоступа);
    Если ЗначениеЗаполнено(КодАбонента) Тогда
        ДанныеАвторизации.Вставить("account", КодАбонента);
    КонецЕсли; 

    Возврат ДанныеАвторизации;
	
КонецФункции

Функция РезультатВыполнения(Ответ, ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "")
    
    КодСостояния = Ответ.КодСостояния;
    Если КодСостояния <> 200 Тогда
        Если ВызыватьИсключениеПриОшибке Тогда
            ВызватьИсключение СтрШаблон("%1 %2", КодСостояния, Ответ.ПолучитьТелоКакСтроку());
        Иначе
            Возврат Неопределено;
        КонецЕсли; 
    КонецЕсли;

    ПотокДанных = Ответ.ПолучитьТелоКакПоток();
    ИменаДат = СтрРазделить("start,completion,planned_date,created,activated,blocked,expiration", ",", Ложь);
    Данные = РаботаВМоделиСервисаБТС.СтруктураИзПотокаJSON(ПотокДанных, ИменаДат);
    
    КодОтвета = Данные.general.response;
    Сообщение = Данные.general.message;
	
	Если Не (КодОтвета = 10200 Или КодОтвета = 10202) Тогда
        Если ВызыватьИсключениеПриОшибке Тогда
            ВызватьИсключение СтрШаблон("%1 %2", КодОтвета, Сообщение);
        Иначе
            Возврат Неопределено;
        КонецЕсли; 
    КонецЕсли;
    
    Возврат Данные; 
    
КонецФункции

Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур, ПереименованияКолонок = Неопределено)
    
    Результат = Новый ТаблицаЗначений;
    
    Для Каждого Строка Из МассивСтруктур Цикл
        Для Каждого КлючЗначение Из Строка Цикл
            Если Результат.Колонки.Найти(КлючЗначение.Ключ) = Неопределено  Тогда
                ТипКолонки = Неопределено;
                Если ПереименованияКолонок <> Неопределено Тогда
                    ЗначениеПереименования = ПереименованияКолонок.Получить(КлючЗначение.Ключ);
                    Если ЗначениеЗаполнено(ЗначениеПереименования) И  ТипЗнч(ЗначениеПереименования) = Тип("Структура") Тогда
                        ТипКолонки = ЗначениеПереименования.Тип;
                    КонецЕсли; 
                КонецЕсли; 
                Результат.Колонки.Добавить(КлючЗначение.Ключ, ТипКолонки);
            КонецЕсли; 
        КонецЦикла;
        ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
    КонецЦикла;
    
    Если ПереименованияКолонок <> Неопределено Тогда
        Для Каждого Элемент Из ПереименованияКолонок Цикл
            Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
                ИмяКолонки = Элемент.Значение;
                ТипКолонки = Неопределено;
            Иначе
                ИмяКолонки = Элемент.Значение.Имя;
                ТипКолонки = Элемент.Значение.Тип;
            КонецЕсли;
            Если Результат.Колонки.Найти(Элемент.Ключ) <> Неопределено Тогда
                Результат.Колонки[Элемент.Ключ].Имя = ИмяКолонки;
            Иначе
                Результат.Колонки.Добавить(ИмяКолонки, ТипКолонки);
            КонецЕсли;
        КонецЦикла; 
    КонецЕсли; 
    
    Возврат Результат;
	
КонецФункции

Функция ПереименоватьСвойства(ДанныеОтвета, Знач Переименования)
    
    Для Каждого Элемент Из Переименования Цикл
        Если ДанныеОтвета.Свойство(Элемент.Ключ) Тогда
            Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
                ИмяПоля = Элемент.Значение.Имя;
            Иначе
                ИмяПоля = Элемент.Значение;
            КонецЕсли; 
            ДанныеОтвета.Вставить(ИмяПоля, ДанныеОтвета[Элемент.Ключ]);
            ДанныеОтвета.Удалить(Элемент.Ключ);
        КонецЕсли; 	
    КонецЦикла;
    
    Возврат ДанныеОтвета; 

КонецФункции

#КонецОбласти  