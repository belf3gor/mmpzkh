
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ВЫЗОВ ТИПОВЫХ ПРОЦЕДУРЫ И ФУНКЦИЙ КЛИЕНТА И СЕРВЕРА

// Возвращает текущего пользователя.
//  Рекомендуется использовать в коде, который не поддерживает
// работу с внешними пользователями.
//
//  Если вход в сеанс выполнил внешний пользователь,
// тогда будет вызвано исключение.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи.
//
Функция ТекущийПользователь() Экспорт
	
	// для ЖКХ 3.0
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Возврат ТекущийПользователь;
	
КонецФункции

// Процедура сообщения об ошибке.
Процедура СообщитьОбОшибке(Знач ТекстСообщения, Отказ = Ложь, Заголовок = "", Знач Статус = Неопределено,
							ВызыватьИсключение = Истина) Экспорт
	
	// для ЖКХ 3.0
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	
КонецПроцедуры // СообщитьОбОшибке()

// Функция возвращает рабочую дату.
Функция ПолучитьРабочуюДату() Экспорт
	
	// для ЖКХ 3.0
	Возврат УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьРабочуюДату();
	
КонецФункции // ПолучитьРабочуюДату()

// Функция раскладывает Наименование в массив из трех элементов.
//
// Параметры
//  ФИО  - строка - наименование
//
// Возвращаемое значение:
//   Массив   - массив из трех элементов, Фамилия, Имя, Отчество.
//
Функция ПолучитьМассивФИО(Знач ФИО) Экспорт
	
	// для ЖКХ 3.0
	МассивФИО = Новый Массив;
	МассивФИО.Добавить("");
	МассивФИО.Добавить("");
	МассивФИО.Добавить("");
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФИО, " ");
	Для Индекс = 0 По МассивПодстрок.ВГраница() Цикл
		Если Индекс < 3 Тогда
			МассивФИО[Индекс] = МассивПодстрок[Индекс];
		Иначе
			МассивФИО[2] = МассивФИО[2] + " " + МассивПодстрок[Индекс];
		КонецЕсли;
	КонецЦикла;

	Возврат МассивФИО;
	
КонецФункции

// Получает номер документа для вывода на печать; из номера удаляются префиксы и лидирующие нули.
// Функция:
// отбрасывает префикс организации,
// отбрасывает префикс информационной базы (опционально),
// отбрасывает пользовательские префиксы (опционально),
// удаляет лидирующие нули в номере объекта.
//
Функция ПолучитьНомерНаПечать(Знач НомерОбъекта, УдалитьПрефиксИнформационнойБазы = Ложь,
							  УдалитьПользовательскийПрефикс = Ложь) Экспорт
	
	// для ЖКХ 3.0
	Возврат ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(НомерОбъекта, УдалитьПрефиксИнформационнойБазы,
																  УдалитьПользовательскийПрефикс);
	
КонецФункции

// Возвращает Истина, если клиентское приложение является Веб-клиентом.
//
// Возвращаемое значение:
//  Булево. Если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоВебКлиент() Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();
	
КонецФункции

// Возвращает код основного языка конфигурации, например "ru".
Функция КодОсновногоЯзыка() Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	
КонецФункции

// Сравнивает две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(СтрокаВерсии1, СтрокаВерсии2) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтрокаВерсии1, СтрокаВерсии2);
	
КонецФункции // СравнитьВерсии()

// Обновляет список команд в зависимости от текущего контекста.
//
// Параметры:
//   Форма - УправляемаяФорма - форма, для которой требуется обновление команд.
//   Источник - ДанныеФормыСтруктура, ТаблицаФормы - контекст для проверки условий (Форма.Объект или Форма.Элементы.Список).
//
Процедура ОбновитьКоманды(Форма, Источник) Экспорт
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, Источник);
	
КонецПроцедуры

// Функция выполняет преобразование строкового представления имени физического лица 
// на составные части - фамилию, имя и отчество.
//
// Параметры:
//  ФамилияИмяОтчество - Строка - полное имя в виде "Фамилия Имя Отчество".
//
// Возвращаемое значение:
//  Структура - части полного имени:
//   * Фамилия  - Строка - фамилия;
//   * Имя      - Строка - имя;
//   * Отчество - Строка - отчество.
//
// Пример:
//   1. ФизическиеЛицаКлиентСервер.ЧастиИмени("Иванов Иван Иванович") 
//   вернет структуру со значениями свойств: "Иванов", "Иван", "Иванович".
//   2. ФизическиеЛицаКлиентСервер.ЧастиИмени("Смит Джон") 
//   вернет структуру со значениями свойств: "Смит", "Джон", "".
//   3. ФизическиеЛицаКлиентСервер.ЧастиИмени("Алиев Ахмед Октай оглы Мамедов") 
//   вернет структуру со значениями свойств: "Алиев", "Алиев", "Октай оглы Мамедов".
//
Функция ПолучитьЧастиИмени(ФамилияИмяОтчество) Экспорт
	
	Возврат  ФизическиеЛицаКлиентСервер.ЧастиИмени(ФамилияИмяОтчество);
	
КонецФункции // ПолучитьЧастиИмени()

// Проверяет email адрес на соответствие требованиям стандартов RFC 5321, RFC 5322,
// а также RFC 5335, RFC 5336 и RFC 3696.
// Кроме того, функция ограничивает использование спецсимволов.
// 
// Параметры:
//  Адрес - Строка - проверяемый email.
//  РазрешитьЛокальныеАдреса - Булево - не выдавать ошибку в случае отсутствия зоны домена в адресе.
//
// Возвращаемое значение:
//  Булево - Истина, если ошибок нет.
//
Функция АдресЭлектроннойПочтыСоответствуетТребованиям(Знач Адрес, РазрешитьЛокальныеАдреса = Ложь) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Адрес, РазрешитьЛокальныеАдреса);
	
КонецФункции

// Возвращает полное имя файла.
Функция ПолучитьПолноеИмяФайла(Знач ИмяКаталога, Знач ИмяФайла) Экспорт
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталога, ИмяФайла);
КонецФункции

// Проверяет наличие недопустимых символов в имени файла.
//
// Параметры:
//  ИмяФайла  - Строка - имя файла.
//
// Возвращаемое значение:
//   Массив   - массив обнаруженных в имени файла недопустимых символов.
//              Если недопустимых символов не обнаружено - возвращается пустой массив.
Функция НайтиНедопустимыеСимволыВИмениФайла(ИмяФайла) Экспорт
	Возврат ОбщегоНазначенияКлиентСервер.НайтиНедопустимыеСимволыВИмениФайла(ИмяФайла);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// МАТЕМАТИКА

// Функция выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//		ИсхСумма - распределяемая сумма
//		МассивКоэф - массив коэффициентов распределения
//		Точность - точность округления при распределении. Необязателен.
//		Скользящее распределение - признак, определяющий, каким образом
//		    нужно распределять остаток от первоначального распределения
//		    по коэффициентам:
//		    а) если параметр принимает значение Ложь, то остаток распределяется
//		    стандартно, т.е. на последний элемент распределения;
//		    б) если параметр принимает значение Истина, то остатка распределения
//		    после первого этапа не возникает, объем распределяется равномерно.
//		ИспользоватьПредопредСуммуКоэф - признак, определяющий то, каким образом
//		    будет определяться сумма коэффициентов:
//		    а) если Ложь, то сумма определяется как сумма коэффициентов из массива
//		    коэффициентов;
//		    б) если Истина, то сумма берется из параметра ПредопредСуммаКоэф.
//		ПредопредСуммаКоэф - число, которое будет использоваться в качестве суммы
//		    коэффициентов, если параметр ИспользоватьПредопредСуммуКоэф равен Истина.
//
//	Возврат:
//		МассивСумм - массив размерностью равный массиву коэффициентов, содержит
//			суммы в соответствии с весом коэффициента (из массива коэффициентов)
//          В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0,
//          или суммарный вес коэф. = 0), тогда возвращается значение Неопределено.
//
Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2, СкользящееРаспределение = Ложь,
											ИспользоватьПредопредСуммуКоэф = Ложь, ПредопредСуммаКоэф = 0) Экспорт
	
	// для ЖКХ 3.0
	//Возврат ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ИсхСумма, МассивКоэф, Точность);
	
	// В отличие от типовой функции пропорционального распределения наша функция может производить
	// более равномерное распределение в случае, когда объем распределение мал по отношению
	// к точности распределения (например, распределение значение 0,229 с точностью в 3 знака).
	// Для этого добавлен параметр "СкользящееРаспределение".
	
	Если МассивКоэф.Количество() = 0 Или ИсхСумма = 0 Или ИсхСумма = Null Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМакс = 0;
	МаксЗнач   = 0;
	РаспрСумма = 0;
	СуммаКоэф  = 0;
	
	Для Коэффициент = 0 По МассивКоэф.Количество() - 1 Цикл
		
		МодульЧисла = ?(МассивКоэф[Коэффициент] > 0, МассивКоэф[Коэффициент], - МассивКоэф[Коэффициент]);
		
		Если МаксЗнач < МодульЧисла Тогда
			МаксЗнач = МодульЧисла;
			ИндексМакс = Коэффициент;
		КонецЕсли;
		
		СуммаКоэф = СуммаКоэф + МассивКоэф[Коэффициент];
		
	КонецЦикла;
	
	Если СуммаКоэф = 0
		 Или (ИспользоватьПредопредСуммуКоэф И ПредопредСуммаКоэф = 0) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИспользоватьПредопредСуммуКоэф Тогда
		СуммаКоэф = ПредопредСуммаКоэф;
	КонецЕсли;
	
	МассивСумм = Новый Массив(МассивКоэф.Количество());
	
	Если СкользящееРаспределение Тогда
		
		// Если используется скользящий способ распределения, то распределение производится равномерно без остатка.
		мСуммаКРаспределению = ИсхСумма;
		мЗнаменательРаспределения = СуммаКоэф;
		Для Коэффициент = 0 По МассивКоэф.Количество() - 1 Цикл
			МассивСумм[Коэффициент] = Окр(мСуммаКРаспределению * МассивКоэф[Коэффициент] / ?(мЗнаменательРаспределения = 0, 1, мЗнаменательРаспределения), Точность, 1);
			мСуммаКРаспределению = мСуммаКРаспределению - МассивСумм[Коэффициент];
			мЗнаменательРаспределения = мЗнаменательРаспределения - МассивКоэф[Коэффициент];
			РаспрСумма = РаспрСумма + МассивСумм[Коэффициент];
		КонецЦикла;
		
	Иначе
		
		// Если используется стандартный способ распределения, то после распределения
		// возможно возникновение остатка, который будет отнесен на последний элемент.
		Для Коэффициент = 0 По МассивКоэф.Количество() - 1 Цикл
			МассивСумм[Коэффициент] = Окр(ИсхСумма * МассивКоэф[Коэффициент] / СуммаКоэф, Точность, 1);
			РаспрСумма = РаспрСумма + МассивСумм[Коэффициент];
		КонецЦикла;
		
	КонецЕсли;
	
	// Погрешности округления отнесем на коэффициент с максимальным весом
	Если Не РаспрСумма = ИсхСумма Тогда
		МассивСумм[ИндексМакс] = МассивСумм[ИндексМакс] + ИсхСумма - РаспрСумма;
	КонецЕсли;
	
	Возврат МассивСумм;
	
КонецФункции // РаспределитьПропорционально()

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "НДС"

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения
//
// Параметры: 
//  Сумма            - число, сумма от которой надо рассчитывать налоги, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//  СтавкаНДС        - число , процентная ставка НДС.
//
// Возвращаемое значение:
//  Число, полученная сумма НДС
//
Функция РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	// для ЖКХ 3.0
	Возврат УчетНДСКлиентСервер.РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС);
	
КонецФункции // РассчитатьСуммуНДС()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ

// Осуществляет проверку заполненного элемента содержащему ИНН
Процедура ОбработатьОтображениеПоляИНН(ИНН, Элемент, Форма) Экспорт
	
	// для ЖКХ 3.0
	СотрудникиКлиентСервер.ОбработатьОтображениеПоляИНН(ИНН, Элемент, Форма);
	
КонецПроцедуры

// Осуществляет проверку заполненного элемента содержащему СтраховойНомерПФР
Процедура ОбработатьОтображениеПоляСтраховойНомерПФР(СтраховойНомерПФР ,Элемент, Форма) Экспорт
	
	// для ЖКХ 3.0
	СотрудникиКлиентСервер.ОбработатьОтображениеПоляСтраховойНомерПФР(СтраховойНомерПФР ,Элемент, Форма);
	
КонецПроцедуры

// Проверяет соответствие ИНН требованиям.
//
// Параметры:
//  ИНН          	- Строка - Проверяемый индивидуальный номер налогоплательщика.
//  ЭтоЮрЛицо   	- Булево - признак, является ли владелец ИНН юридическим лицом.
//  ТекстСообщения 	- Строка - Текст сообщения о найденных ошибках.
//
// Возвращаемое значение:
//  Истина       - ИНН соответствует требованиям;
//  Ложь         - ИНН не соответствует требованиям.
//
Функция ИННСоответствуетТребованиям(Знач ИНН, ЭтоЮрЛицо, ТекстСообщения) Экспорт
	
	// для ЖКХ 3.0
	Возврат РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, ЭтоЮрЛицо, ТекстСообщения);
	
КонецФункции

// Проверяет номер страхового свидетельства на соответствие требованиям ПФР.
//
// Параметры:
//		СтраховойНомер - страховой номер ПФР. Строка должна быть ведена по шаблону "999-999-999 99".
//		ТекстСообщения - текст сообщения об ошибке ввода страхового номера.
//
Функция СтраховойНомерПФРСоответствуетТребованиям(Знач СтраховойНомер, ТекстСообщения) Экспорт
	
	// для ЖКХ 3.0
	Возврат РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомер, ТекстСообщения);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТРОКАМИ ТАБЛИЧНЫХ ЧАСТЕЙ ДОКУМЕНТОВ

// Рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа.
//
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества = 0) Экспорт
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества);
	
КонецПроцедуры

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа.
//
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС = Ложь, ПрименяютсяСтавки4и2 = Ложь) Экспорт
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС, ПрименяютсяСтавки4и2);
	
КонецПроцедуры

// Процедура выполняет стандартные действия по расчету плановой суммы
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа.
//
Процедура ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества = 0) Экспорт
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ОТЧЕТОВ

// Процедура управляет состояние поля табличного документа
//
// Параметры:
//  ПолеТабличногоДокумента – ПолеФормы – поле формы с видом ПолеТабличногоДокумента,
//                            для которого необходимо установить состояние.
//  Состояние               – Строка – задает вид состояния.
//
Процедура УстановитьСостояниеПоляТабличногоДокумента(ПолеТабличногоДокумента, Состояние = "НеИспользовать") Экспорт
	
	// для ЖКХ 3.0
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ПолеТабличногоДокумента, Состояние);
	
КонецПроцедуры

// Функция возвращает наименование задания выполнения отчета.
Функция ПолучитьНаименованиеЗаданияВыполненияОтчета(Форма) Экспорт
	
	// для ЖКХ 3.0
	Возврат БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(Форма);
	
КонецФункции

// Функция возвращает представление периода.
Функция ПолучитьПредставлениеПериода(НачалоПериода = '00010101', КонецПериода = '00010101', ТолькоДаты  = Ложь) Экспорт
	
	// для ЖКХ 3.0
	
	//Возврат БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода, ТолькоДаты);
	ТекстПериод = "";
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " за ")
						+ ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " за ")
					+ ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП = Истина");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

// Процедура изменяет заголовок кнопки панели настроек.
Процедура ИзменитьЗаголовокКнопкиПанельНастроек(Кнопка, ВидимостьПанелиНастроек) Экспорт
	
	// для ЖКХ 3.0
	БухгалтерскиеОтчетыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(Кнопка, ВидимостьПанелиНастроек);
	
КонецПроцедуры

// Функция возвращает идентификатор формы отчета.
Функция ПолучитьИдентификаторОбъекта(Форма) Экспорт
	
	// для ЖКХ 3.0
	Возврат БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(Форма);
	
КонецФункции

// Процедуры скрывает настройки при формировании отчета.
Процедура СкрыватьНастройкиПриФормированииОтчета(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	// для ЖКХ 3.0
	БухгалтерскиеОтчетыКлиентСервер.СкрыватьНастройкиПриФормированииОтчета(Форма, ДополнительныеПараметры);
	
КонецПроцедуры

// Функция устанавливает значение параметра компоновки данных
//
// Параметры:
//		Настройки     - Пользовательские настройки СКД, Настройки СКД, Компоновщик настроек
//		Параметр      - имя параметра СКД для которого нужно вернуть значение параметра
//      Значение      - значение параметра
//		Использование - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
Функция УстановитьПараметр(Настройки, Параметр, Значение, Использование = Истина) Экспорт
	
	// для ЖКХ 3.0
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Настройки, Параметр, Значение, Использование);
	
КонецФункции

// Добавляет отбор в коллекцию отборов компоновщика или группы отборов
//
// Параметры:
//		ЭлементСтруктуры - элемент структуры
//		Поле             - имя поля, по которому добавляется отбор
//		Значение         - значение отбора
//		ВидСравнения     - вид сравнений компоновки данных (по умолчанию: вид сравнения)
//		Использование    - признак использования отбора (по умолчанию: истина).
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина,
						ВПользовательскиеНастройки = Ложь) Экспорт
	
	// для ЖКХ 3.0
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ЭлементСтруктуры, Поле, Значение, ВидСравнения, Использование,
													ВПользовательскиеНастройки);
	
КонецФункции

// Получает параметр вывода компоновщика настроек или настройки СКД
//
// Параметры:
//		КомпоновщикНастроекГруппировка - компоновщик настроек или настройка/группировка СКД.
//		ИмяПараметра - имя параметра СКД.
//
Функция ПолучитьПараметрВывода(Настройка, ИмяПараметра) Экспорт
	
	// для ЖКХ 3.0
	Возврат БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметрВывода(Настройка, ИмяПараметра);
	
КонецФункции

// Устанавливает параметр вывода компоновщика настроек или настройки СКД
//
// Параметры:
//		КомпоновщикНастроекГруппировка - компоновщик настроек или настройка/группировка СКД
//		ИмяПараметра - имя параметра СКД
//		Значение - значение параметра вывода СКД
//		Использование - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
Функция УстановитьПараметрВывода(Настройка, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	// для ЖКХ 3.0
	Возврат БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Настройка, ИмяПараметра, Значение, Использование);
	
КонецФункции

// Функция добавляет выбранное поле и возвращает элемент выбранного поля. 
//
// Параметры:
//		ЭлементСтруктуры - компоновщик настроек, настройка СКД, элемент структуры настройки отчета
//		Поле - имя поля, которое нужно добавить в СКД
//		Заголовок - заголовок добавляемого поля
//
Функция ДобавитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле, Заголовок = Неопределено) Экспорт
	
	Возврат БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры, Поле, Заголовок);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ДИНАМИЧЕСКИМИ СПИСКАМИ

// Поиск элементов и групп отбора динамического списка.
// Параметры:
//  ОбластьПоиска - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - имя поля компоновки (не используется для групп)
//  Представление - представление поля компоновки
//  Примечание: поиск может осуществляться или по ЛевомуЗначению, или по Представлению.
//
Функция НайтиЭлементыИГруппыОтбора(знач ОбластьПоиска,
									знач ИмяПоля = Неопределено,
									знач Представление = Неопределено) Экспорт
	
	// для ЖКХ 3.0
	Возврат ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОбластьПоиска, ИмяПоля, Представление);
	
КонецФункции

// Используется для создания элемента отбора или, если таковой не найден,
// установления существующим элементам свойств.
// Параметры:
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - строка - имя для поля компоновки данных (заполняется всегда).
// Устанавливаемые поля:
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								знач ИмяПоля,
								знач ПравоеЗначение = Неопределено,
								знач ВидСравнения = Неопределено,
								знач Представление = Неопределено,
								знач Использование = Неопределено,
								знач РежимОтображения = Неопределено) Экспорт
	
	// для ЖКХ 3.0
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОбластьПоискаДобавления, ИмяПоля, ПравоеЗначение, ВидСравнения,
															Представление, Использование, РежимОтображения);
	
	//// для ЖКХ 2.0
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОбластьПоискаДобавления, ИмяПоля, ПравоеЗначение, ВидСравнения,
	//														Представление, Использование, РежимОтображения);
	
КонецПроцедуры

// Поиск элементов и групп отбора динамического списка.
// Параметры:
//  ОбластьУдаления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - имя поля компоновки (не используется для групп)
//  Представление - представление поля компоновки
//  Примечание: поиск может осуществляться или по ЛевомуЗначению, или по Представлению.
//
Процедура УдалитьЭлементыГруппыОтбора(знач ОбластьУдаления,
										знач ИмяПоля = Неопределено,
										знач Представление = Неопределено) Экспорт
	
	// для ЖКХ 3.0
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ОбластьУдаления, ИмяПоля, Представление);
	
КонецПроцедуры

// Устанавливает или изменяет "быстрый" отбор динамического списка (по значениям отбора, указанным в реквизитах формы).
//
// Параметры:
// Форма - УправляемаяФорма - форма, у которой есть реквизит динамический список с именем Список.
// ИмяПоля - Строка - имя отбора, у формы должны быть реквизиты с именами Отбор<ИмяПоля> и Отбор<ИмяПоля>Использование.
//
Процедура УстановитьБыстрыйОтбор(Форма, ИмяПоля, ВидСравнения = Неопределено) Экспорт
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(Форма, ИмяПоля, ВидСравнения);
	
КонецПроцедуры

// Используется для создания элемента отбора или, если таковой не найден,
// установления существующим элементам свойств.
// Параметры:
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - строка - имя для поля компоновки данных (заполняется всегда).
// Устанавливаемые поля:
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//
Процедура УстановитьЭлементПорядка(ОбластьПоискаДобавления,
								знач ИмяПоля,
								знач НаправлениеСортировки = Неопределено) Экспорт
	
	// для ЖКХ 3.0
	Если НаправлениеСортировки = Неопределено Тогда
		НаправлениеСортировки = НаправлениеСортировкиКомпоновкиДанных.Возр;
	КонецЕсли;
	
	Элемент = ОбластьПоискаДобавления.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	Элемент.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ТипУпорядочивания = НаправлениеСортировки;
	
КонецПроцедуры

// Устанавливает значение Значение параметра ИмяПараметра динамического списка Список 
// или отключает его использование в зависимости от признака Использование.
//
Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	// для ЖКХ 3.0
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование)
	
КонецПроцедуры

// Изменяет элемент отбора динамического списка.
//
// Параметры:
//  Список         - обрабатываемый динамический список,
//  ИмяПоля        - имя поля компоновки, отбор по которому нужно установить,
//  ВидСравнения   - вид сравнения отбора, по умолчанию - Равно,
//  ПравоеЗначение - значение отбора,
//  Установить     - признак необходимости установить отбор.
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь,
										ВидСравнения = Неопределено) Экспорт
	
	// для ЖКХ 3.0
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, Установить, ВидСравнения);
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

// Изменяет элемент отбора группы списка.
//
Процедура ИзменитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь,
											ВидСравнения = Неопределено) Экспорт
	
	// для ЖКХ 3.0
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение, Установить,ВидСравнения);
	
КонецПроцедуры

// Функция формирует представление с видом для формы ввода адреса.
//
// Параметры:
//	СтруктураАдреса - Структура - структура адреса.
//	Представление - Строка - представление адреса.
//	НаименованиеВида - Строка - наименование вида.
//
// Возвращаемое значение:
//	Строка - представление адреса с видом.
//
Функция СформироватьПредставлениеАдреса(СтруктураАдреса, Представление, НаименованиеВида = Неопределено) Экспорт
	
	// для ЖКХ 3.0
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдреса, Представление,
																						НаименованиеВида);
	
КонецФункции

// Добавить группу отбора в коллекцию КоллекцияЭлементов.
//
// Параметры:
//  КоллекцияЭлементов - ОтборКомпоновкиДанных, КоллекцияЭлементовОтбораКомпоновкиДанных,
//                       ГруппаЭлементовОтбораКомпоновкиДанных - контейнер
//                       с элементами и группами отбора, например Список.Отбор или группа в отборе.
//  Представление      - Строка - представление группы.
//  ТипГруппы          - ТипГруппыЭлементовОтбораКомпоновкиДанных - тип группы.
//
// Возвращаемое значение:
//  ГруппаЭлементовОтбораКомпоновкиДанных - группа отбора.
//
Функция СоздатьГруппуЭлементовОтбора(Знач КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	Возврат ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИЙ ДЛЯ РАБОТЫ С ВЫБОРОМ ПЕРИОДА

// Заполняет переданный в параметрах список выбора 
// 
// Параметры: 
// МинимальныйПериод   - Перечисление.ДоступныеПериодыОтчета - минимальный вид периода, 
//                       начиная с которого необходимо включать остальные виды периода по возрастанию.
// СписокВыбора        - СписокЗначений - в списке возвращаются заполненный список выбора
// ЗначениеПоУмолчанию - Перечисление.ДоступныеПериодыОтчета - в параметре возвращает вид периода по умолчанию.
//
Процедура ЗаполнитьСписокВыбораВидПериода(Знач МинимальныйПериод, СписокВыбора,
											ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	// для ЖКХ 3.0
	ВыборПериодаКлиентСервер.ЗаполнитьСписокВыбораВидПериода(МинимальныйПериод, СписокВыбора, ЗначениеПоУмолчанию);
	
КонецПроцедуры

// Функция возвращает представление периода.
Функция ПолучитьПредставлениеПериодаОтчета(ВидПериода, Знач НачалоПериода, Знач КонецПериода) Экспорт
	
	// для ЖКХ 3.0
	Возврат ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(ВидПериода, НачалоПериода, КонецПериода);
	
КонецФункции

// Процедура переключает текущую страницу выбора периода.
Процедура ПереключитьТекущуюСтраницуВыбораПериода(ВидПериода, Страницы, ПараметрыСтраниц = Неопределено) Экспорт

	// для ЖКХ 3.0
	
	//ВыборПериодаКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(ВидПериода, Страницы, ПараметрыСтраниц);
	Если ПараметрыСтраниц = Неопределено Тогда
		ПараметрыСтраниц = Новый Структура;
		ПараметрыСтраниц.Вставить("ПроизвольныйПериод", "ГруппаПроизвольныйПериод");
		ПараметрыСтраниц.Вставить("ПериодПоВидам"     , "ГруппаПериодПоВидам");
		ПараметрыСтраниц.Вставить("День"              , "ГруппаДень");
	КонецЕсли;
	
	Если УПЖКХ_ТиповыеМетодыВызовСервера.ЕстьОбъектМетаданных("Перечисления", "ДоступныеПериодыОтчета") Тогда
		Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
			Страницы.ТекущаяСтраница = Страницы.ПодчиненныеЭлементы[ПараметрыСтраниц.ПроизвольныйПериод];
		ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
			Страницы.ТекущаяСтраница = Страницы.ПодчиненныеЭлементы[ПараметрыСтраниц.День];
		Иначе
			Страницы.ТекущаяСтраница = Страницы.ПодчиненныеЭлементы[ПараметрыСтраниц.ПериодПоВидам];
		КонецЕсли;
	Иначе
		Страницы.ТекущаяСтраница = Страницы.ПодчиненныеЭлементы[ПараметрыСтраниц.ПериодПоВидам];
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения представления месяца по дате.
Процедура ЗаполнитьМесяцПоДате(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления) Экспорт
	
	// для ЖКХ 3.0
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления);
	
КонецПроцедуры

// Процедура вычисляет количество лет, месяцев и дней между двумя датами.
//
// Параметры:
//  Дата1	– дата, первая дата (более поздняя, часто текущая, стаж определяется по состоянию на эту дату)
//  Дата2	– дата, вторая дата (ранняя дата, с нее начинается "течение" стажа)
//  Лет		– Число, в этот параметр будет записано кол-во лет между двумя датами (Дата1-Дата2)
//  Месяцев	– Число, в этот параметр будет записано кол-во месяцев между двумя датами (Дата1-Дата2)
//  Дней	– Число, в этот параметр будет записано кол-во дней между двумя датами (Дата1-Дата2).
//
Процедура РазобратьРазностьДат(Дата1, Дата2, Лет = 0, Месяцев = 0, Дней = 0) Экспорт
	
	Лет		= 0;
	Месяцев	= 0;
	Дней	= 0;
	Если Дата1 > Дата2 Тогда
		
		ВременнаяДата = Дата1;
		Если День(ВременнаяДата) < День(Дата2) Тогда
			Дней = (ВременнаяДата - ДобавитьМесяц(ВременнаяДата,-1))/86400;
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата,-1);
		КонецЕсли;
		Если Месяц(ВременнаяДата) < Месяц(Дата2) Тогда
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата,-12);
			Месяцев = 12;
		КонецЕсли;
		Лет		= Макс(			 Год(ВременнаяДата)		- Год(Дата2),	0);
		Месяцев	= Макс(Месяцев	+ Месяц(ВременнаяДата)	- Месяц(Дата2),	0);
		Дней	= Макс(Дней		+ День(ВременнаяДата)	- День(Дата2),	0);
		
		// Скорректируем отображаемое значение, если "вмешалось" разное количество дней в месяцах.
		Если Дата2 <> (ДобавитьМесяц(Дата1,-Лет*12-Месяцев)-Дней*86400) Тогда
			Дней = Дней + ((ДобавитьМесяц(Дата1,-Лет*12-Месяцев)-Дней*86400) - Дата2)/86400;
			//(День(КонецМесяца(Дата2)) - День(НачалоМесяца(Дата2))) - (День(КонецМесяца(ДобавитьМесяц(Дата1,-1))) - День(НачалоМесяца(ДобавитьМесяц(Дата1,-1))));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры	// РазобратьРазностьДат

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИЙ ДЛЯ РАБОТЫ СО СТРОКАМИ

// Дополняет строку символами слева или справа до заданной длины и возвращает ее.
// Незначащие символы слева и справа удаляются. По умолчанию функция дополняет строку символами "0" (ноль) слева.
//
// Параметры:
//  Строка      - Строка - исходная строка, которую необходимо дополнить символами;
//  ДлинаСтроки - Число  - требуемая результирующая длина строки;
//  Символ      - Строка - символ, которым необходимо дополнить строку;
//  Режим       - Строка - "Слева" или "Справа" - режим добавления символов к исходной строке.
// 
// Возвращаемое значение:
//  Строка - строка, дополненная символами.
//
// Пример 1:
// Строка = "1234"; ДлинаСтроки = 10; Символ = "0"; Режим = "Слева"
// Возврат: "0000001234".
//
// Пример 2:
// Строка = " 1234  "; ДлинаСтроки = 10; Символ = "#"; Режим = "Справа"
// Возврат: "1234######".
//
Функция ДополнитьСтроку(Знач Строка, Знач ДлинаСтроки, Знач Символ = "0", Знач Режим = "Слева") Экспорт
	
	// для ЖКХ 3.0
	Возврат СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка, ДлинаСтроки, Символ, Режим);
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   – текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	// для ЖКХ 3.0
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПодстановки, Параметр1, Параметр2, Параметр3,
		Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

/// Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
Функция СтрокаИзМассиваПодстрок(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Массив, Разделитель, СокращатьНепечатаемыеСимволы);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТИПАМИ

// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
//
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт
	
	// для ЖКХ 3.0
	Возврат ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(ДлинаСтроки);
	
КонецФункции // ПолучитьОписаниеТиповСтроки()

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
//
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//  ЗнакЧисла				- ДопустимыйЗнак, знак числа.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено) Экспорт
	
	// для ЖКХ 3.0
	Возврат ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла);
	
КонецФункции // ПолучитьОписаниеТиповЧисла()

// Служебная функция, предназначенная для получения описания типов даты
//
// Параметры:
//  ЧастиДаты - системное перечисление ЧастиДаты.
//
Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт
	
	// для ЖКХ 3.0
	Возврат ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты);
	
КонецФункции // ПолучитьОписаниеТиповДаты()

// Функция возвращает пустое значение заданного типа.
//
Функция ПустоеЗначениеТипа(ЗаданныйТип) Экспорт
	
	// для ЖКХ 3.0
	Возврат РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ЗаданныйТип);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СЧЕТАМИ УЧЕТА НА ФОРМЕ

// Процедура установки типа и доступности субконто в зависимости от выбранного счета.
//
Процедура ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей = Неопределено, ЭтоТаблица = Ложь) Экспорт
	
	// для ЖКХ 3.0
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей, ЭтоТаблица);
	
КонецПроцедуры

// Процедура изменения параметров выбора полей субконто.
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Объект, ШаблонИмяПоляОбъекта,
												ШаблонИмяЭлементаФормы, СписокПараметров) Экспорт
	
	// для ЖКХ 3.0
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Объект, ШаблонИмяПоляОбъекта,
																		ШаблонИмяЭлементаФормы, СписокПараметров);
	
КонецПроцедуры

// Процедура установки типа и доступности субконто в зависимости от выбранного счета.
//
Процедура ПриИзмененииСчета(Счет, Объект, ПоляОбъекта, ЭтоТаблица = Ложь) Экспорт
	
	// для ЖКХ 3.0
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Счет, Объект, ПоляОбъекта, ЭтоТаблица);
	
КонецПроцедуры

// Процедура установки доступности субконто в зависимости от выбранного счета
//
Процедура УстановитьДоступностьСубконто(Счет, Объект, ПоляОбъекта) Экспорт
	
	// для ЖКХ 3.0
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
			Объект[ПоляОбъекта["Субконто" + Индекс] + "Доступность"] = (Индекс <= ДанныеСчета.КоличествоСубконто);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С РЕГЛАМЕНТИРОВАННЫМИ ОТЧЕТАМИ

// Функция возвращает представление адреса в формате 9 запятых.
Функция ПредставлениеАдресаВФормате9Запятых(Знач АдресВФормате9Запятых, АнализироватьРегион = Ложь) Экспорт
	
	// для ЖКХ 3.0
	Возврат РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдресВФормате9Запятых,
																							АнализироватьРегион);
	
КонецФункции

// Преобразует строку с адресом в структуру.
Функция РазложитьАдрес(Знач СтрокаАдрес) Экспорт
	
	// для ЖКХ 3.0
	Возврат РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(СтрокаАдрес);
	
КонецФункции

// Проставляет номера листов в отчете.
Процедура ПроставлениеНомеровЛистов(Форма, ПризнакНумеруемыхФорм = Истина, СписокПечатаемыхЛистов) Экспорт
	
	// для ЖКХ 3.0
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(Форма, ПризнакНумеруемыхФорм,
																		СписокПечатаемыхЛистов);
	
КонецПроцедуры

// Возвращает количество форм соответствующих выбранному периоду.
Функция КоличествоФормСоответствующихВыбранномуПериоду(Форма) Экспорт
	
	// для ЖКХ 3.0
	Возврат РегламентированнаяОтчетностьКлиентСервер.КоличествоФормСоответствующихВыбранномуПериоду(Форма);
	
КонецФункции

// Выбирает форму регламентированного отчета по умолчанию.
Процедура ВыборФормыРегламентированногоОтчетаПоУмолчанию(Форма) Экспорт
	
	// для ЖКХ 3.0
	РегламентированнаяОтчетностьКлиентСервер.ВыборФормыРегламентированногоОтчетаПоУмолчанию(Форма);
	
КонецПроцедуры

// Возвращает строковое представление места рождения
Функция ПредставлениеМестаРождения(Знач СтрокаМестоРождения) Экспорт
	
	Возврат ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(СтрокаМестоРождения);
	
КонецФункции

// Функция раскладывает строку с данными о месте рождения на элементы структуры
//
Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина) Экспорт
	
	Возврат ПерсонифицированныйУчетКлиентСервер.РазложитьМестоРождения(СтрокаМестоРождения, ВерхнийРегистр);
	
КонецФункции

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы. Используется для диалоговых сообщений пользователю.
//
Процедура СообщитьПользователю(Знач ТекстСообщенияПользователю,
							   Знач КлючДанных = Неопределено,
							   Знач Поле = "",
							   Знач ПутьКДанным = "",
							   Отказ = Ложь) Экспорт
	
	// для ЖКХ 3.0
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияПользователю, КлючДанных, Поле, ПутьКДанным, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЕЧАТЬЮ ЧЕКОВ

// Заполняет структуру параметров операции фискализации чека.
//
Функция ПараметрыОперацииФискализацииЧека() Экспорт
	
	Возврат МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
КонецФункции // ПараметрыОперацииФискализацииЧека()

// Заполняет структуру параметров фискальной строки для фискализации чека.
//
Функция ПараметрыФискальнойСтрокиЧека() Экспорт
	
	Возврат МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
	
КонецФункции // ПараметрыФискальнойСтрокиЧека()

// Заполняет структуру параметров текстовой строки для фискализации чека.
//
Функция ПараметрыТекстовойСтрокиЧека(Текст = Неопределено) Экспорт;
	
	Возврат МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(Текст);
	
КонецФункции // ПараметрыТекстовойСтрокиЧека()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИНТЕРНЕТ ПОДДЕРЖКОЙ ПОЛЬЗОВАТЕЛЕЙ

// Возвращает настройки соединения с серверами Интернет-поддержки.
//
// Возвращаемое значение:
//	Структура - настройки соединения. Поля структуры:
//		* УстанавливатьПодключениеНаСервере - Булево - Истина, если подключение
//			устанавливается на сервере 1С:Предприятие;
//		* ТаймаутПодключения - Число - таймаут подключения к серверам в секундах;
//		* ДоменРасположенияСерверовИПП - Число - если 0, устанавливать подключение
//			к серверам ИПП в доменной зоне 1c.ru, если 1 - в доменной зоне 1c.eu.
//
Функция НастройкиСоединенияССерверами() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	
КонецФункции // НастройкиСоединенияССерверами()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С АДРЕСАМИ ЭЛЕКТРОННОЙ ПОЧТЫ

// Разбирает строку с адресами электронной почты. При разборе проверяет корректность адресов.
//
// Параметры:
//  СписокАдресов - Строка - адреса электронной почты, разделитель - запятая, либо точка с запятой:
//                           Получатель1 <Адрес1>, Получатель 2 <Адрес2>... Получатель N <АдресN>.
//
// Возвращаемое значение:
//  Массив - содержит массив структур адресов.
//           Поля структуры:
//             Псевдоним      - Строка - представление адресата.
//             Адрес          - Строка - найденный и соответствующий требованиям почтовый адрес;
//                                       Если текст, похожий на адрес найден, но не соответствует требованиям
//                                       стандартов, то такой текст записывается в поле "Псевдоним".
//             ОписаниеОшибки - Строка - текстовое представление ошибки, либо пустая строка, если ошибок нет.
//
Функция АдресаЭлектроннойПочтыИзСтроки(Знач СписокАдресов) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(СписокАдресов);
	
КонецФункции

#КонецОбласти
