#Область ПараметрыРасчетаОДН

// Функция определяет, имеются ли данные учета расхождений объемов
// потребления ПУ.
Функция ОпределитьНаличиеКорректировкиОДНПриСторнированииНачислений(СтруктураПараметров = Неопределено) Экспорт
	
	Услуга = Неопределено;
	
	Если Не СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров.Свойство("Услуга", Услуга);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Услуга", Услуга);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОбороты.ЛицевойСчет,
	|	УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОбороты.Услуга,
	|	УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОбороты.ВидТарифа,
	|	УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОбороты.Количество
	|ИЗ
	|	РегистрНакопления.УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу КАК УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОбороты
	|ГДЕ
	|	&ДопУсловия";
	
	ТекстДопУсловий = "ИСТИНА";
	
	Если Не Услуга = Неопределено Тогда
		ТекстДопУсловий = ТекстДопУсловий + " И УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОбороты.Услуга В (&Услуга)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия", ТекстДопУсловий);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПроверкиФормулНаКорректностьВвода

// Основная процедура проверки введенной формулы на корректность.
//
Процедура ПроверитьКорректностьЗаполненияФормулы(ИсходныйТекстФормулы, Отказ) Экспорт
	
	Отказ = Ложь;
	
	ТекстФормулы = ИсходныйТекстФормулы;
	
	ПоказателиРасчетаФормулы = ПоказателиРасчетаФормулы(ТекстФормулы);
	
	// Проверим правильность составления формулы
	ФормулаДляВыполнения = ФормулаДляВыполнения(ТекстФормулы, ПоказателиРасчетаФормулы);
	ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ПоказателиРасчетаФормулы, Отказ);
	
КонецПроцедуры // ПроверитьКорректностьЗаполненияФормулы()

// Разбивает строку на несколько строк, используя заданный набор разделителей.
// Если параметр РазделителиСлов не задан, то разделителем слов считается любой из символов, 
// не относящихся к символам латиницы, кириллицы, цифры, подчеркивания.
//
Функция РазложитьСтрокуВМассивСлов(Знач Строка, РазделителиСлов = Неопределено)
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Строка);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		КодСимвола = КодСимвола(Строка, Позиция);
		Если ЭтоРазделительСлов(КодСимвола, РазделителиСлов) Тогда
			Если Позиция <> НачалоСлова Тогда
				Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова Тогда
		Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции // РазложитьСтрокуВМассивСлов()

// Определяет, является ли символ разделителем.
//
Функция ЭтоРазделительСлов(КодСимвола, РазделителиСлов = Неопределено)
	
	Если РазделителиСлов <> Неопределено Тогда
		Возврат Найти(РазделителиСлов, Символ(КодСимвола)) > 0;
	КонецЕсли;
		
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 48, 57)); 		// цифры
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1040, 1103)); 	// кириллица
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 95, 95)); 		// символ "_"
	
	Для Каждого Диапазон Из Диапазоны Цикл
		Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ЭтоРазделительСлов()

// Функция выбирает из формулы все слова не являющиеся разделителями и функциями.
// Предполагается, что это показатели.
Функция ПоказателиРасчетаФормулы(Формула)
	
	ПоказателиРасчета = Новый Массив;
	
	РазделителиФормулы = " +-/*?=<>(),";
	ЗарезервированныеСлова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	"МИН,МАКС");
	
	Слова = РазложитьСтрокуВМассивСлов(Формула, РазделителиФормулы);
	Для Каждого Слово Из Слова Цикл
		
		// Числа пропускаем.
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(Слово, ".", "")) Тогда
			Продолжить;
		КонецЕсли;
		
		// Зарезервированные слова пропускаем.
		Если ЗарезервированныеСлова.Найти(ВРег(Слово)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Заменяем параметры дат на числовые для использования в выражении Вычислить().
		Если Найти(Слово, "Дата") > 0 Тогда
			Формула = СтрЗаменить(Формула, Слово, "20130101");
			Продолжить;
		КонецЕсли;
		Если Найти(Слово, "МесяцРасчета") > 0 Тогда
			Формула = СтрЗаменить(Формула, Слово, "20140101");
			Продолжить;
		КонецЕсли;
		
		// Отсекаем у показателя квадратные скобки, добавляем в массив и заменяем его в тексте формулы.
		ЗаменяемоеСлово = Слово;
		ЗаменяемоеСлово = Прав(ЗаменяемоеСлово, СтрДлина(ЗаменяемоеСлово) - 1);
		ЗаменяемоеСлово = Лев (ЗаменяемоеСлово, СтрДлина(ЗаменяемоеСлово) - 1);
		Формула = СтрЗаменить(Формула, Слово, ЗаменяемоеСлово);
		
		ПоказателиРасчета.Добавить(ЗаменяемоеСлово);
		
	КонецЦикла;
	
	Возврат ПоказателиРасчета;
	
КонецФункции // ПоказателиРасчетаФормулы()

// Функция преобразует формулу введенную пользователем в формулу для выполнения.
// К показателям прибавляется префикс.
Функция ФормулаДляВыполнения(Формула, ИдентификаторыПоказателей)
	
	ФормулаДляВыполнения = "";
	
	НачалоСлова = 1;
	Для Позиция = 1 По СтрДлина(Формула) Цикл
		КодСимвола = КодСимвола(Формула, Позиция);
		Если ЭтоРазделительСлов(КодСимвола) Тогда
			ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
			ФормулаДляВыполнения = ФормулаДляВыполнения + Сред(Формула, Позиция, 1);
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
	
	Возврат ФормулаДляВыполнения;
	
КонецФункции // ФормулаДляВыполнения()

// Процедура дописывает строкам показателей расчета префикс "ИсходныеДанные." для использования их
// в структуре показателей при вычислении формулы.
//
Процедура ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ПоказателиРасчета)
	
	Если Позиция <> НачалоСлова Тогда
		Слово = Сред(Формула, НачалоСлова, Позиция - НачалоСлова);
		Если ПоказателиРасчета.Найти(Слово) <> Неопределено Тогда
			ФормулаДляВыполнения = ФормулаДляВыполнения + "ИсходныеДанные." + Слово;
		иначе
			ФормулаДляВыполнения = ФормулаДляВыполнения + Слово;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДописатьТекущееСловоВФормулуДляВыполнения()

// Процедура проверяет выполнимость формулы расчета норматива потребления.
// Формула должна быть заполнена.
// !!!Существование показателей расчета проверяется функцией ПоказателиРасчетаФормулы().
// Если при выполнении формулы произошла ошибка, то Отказ = Истина.
Процедура ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ПоказателиРасчета, Отказ)
	
	// Подготовим структуру для выполнения формулы
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	ИсходныеДанные = Новый Структура;
	Для каждого Показатель Из ПоказателиРасчета Цикл
		ИсходныеДанные.Вставить(Показатель, ГСЧ.СлучайноеЧисло(1,9));
	КонецЦикла;
	
	Попытка
		Результат = Вычислить(ФормулаДляВыполнения);
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры // ПроверитьВыполнимостьФормулы()

#КонецОбласти