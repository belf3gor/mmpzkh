
#Область МеханизмРассылкиКвитанций

/////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

// Обработчик команды "ПользовательскиеНастройкиОтправки".
Процедура Подключаемый_ПользовательскиеНастройкиРассылки(Форма) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_НастройкиПараметровРассылкиКвитанций", , Форма);
	
КонецПроцедуры

// Обработчик команды "ОтправитьНаЭлектронныеЯщикиЛицевыхСчетов".
Процедура Подключаемый_ОтправитьПоЭлектроннойПочте(Форма) Экспорт
	
	ЗапуститьРассылкуКвитанций(Форма);
	
КонецПроцедуры

// Обработчик команды "ОтправитьНаТестовыйЭлектронныеЯщики".
Процедура Подключаемый_ОтправитьНаТестововуюЭлектроннуюПочту(Форма) Экспорт
	
	ЗапуститьРассылкуКвитанций(Форма, Истина);
	
КонецПроцедуры

// Обработчик команды "ПоказатьДанныеПоКвитанциям".
Процедура Подключаемый_ПоказатьДанныеПоКвитанциям(Форма) Экспорт
	
	Форма.ФлагПоказатьДанныеПоКвитанциям = Не Форма.ФлагПоказатьДанныеПоКвитанциям;
	
	Если Форма.ФлагПоказатьДанныеПоКвитанциям Тогда
		Форма.Элементы.ПоказатьДанныеПоКвитанциям.Заголовок = "Скрыть данные по квитанциям";
		Форма.Элементы.ПоказатьДанныеПоКвитанциям.Пометка   = Истина;
	Иначе
		Форма.Элементы.ПоказатьДанныеПоКвитанциям.Заголовок = "Показать данные по квитанциям";
		Форма.Элементы.ПоказатьДанныеПоКвитанциям.Пометка   = Ложь;
	КонецЕсли;
	
	ТаблицаФормыДанныеПоКвитанциям = Форма.Элементы.Найти("ТаблицаФормы_ДанныеПоКвитанциям");
	
	Если ТаблицаФормыДанныеПоКвитанциям <> Неопределено Тогда
		ТаблицаФормыДанныеПоКвитанциям.Видимость = Форма.ФлагПоказатьДанныеПоКвитанциям;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "ГиперссылкаПодключитьРассылкуКвитанций".
Процедура Подключаемый_ГиперссылкаПодключитьРассылкуКвитанций() Экспорт
	
	ФормаФункциональностьПрограммыЖКХ = ПолучитьФорму("Обработка.УПЖКХ_ФункциональностьПрограммыЖКХ.Форма.ФормаФункциональностьПрограммыЖКХ");
	ФормаФункциональностьПрограммыЖКХ.Элементы.Страницы.ТекущаяСтраница = ФормаФункциональностьПрограммыЖКХ.Элементы.Страницы.ПодчиненныеЭлементы.СтраницаПлатежныеДокументы;
	ФормаФункциональностьПрограммыЖКХ.Открыть();
	
КонецПроцедуры

// Обработчик команды "ИнструкцияПоРассылке".
Процедура Подключаемый_ИнструкцияПоРассылке() Экспорт
	ЗапуститьПриложение("https://vgkh.ru/faq-1s-zhkh/formirovanie_platezhnykh_dokumentov_i_kvitantsiy_izveshcheniya_3_0/rassylka_kvitancij_iz_platezhnogo_dokumenta/?sphrase_id=21146");
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// РАССЫЛКА КВИТАНЦИЙ

// Запускает рассылку квитанций.
Процедура ЗапуститьРассылкуКвитанций(Форма, ЭтоТестоваяРассылкаКвитанций = Ложь)
	
	Отказ = Ложь;
	
	Если Форма.Результат.Области.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Квитанции не сформированы.", Отказ);
	КонецЕсли;
	
	ПараметрыРассылкиКвитанций = УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовСервер.ПолучитьПараметрыРассылкиКвитанций();
	
	ЭтоПользовательскийКаталог = (ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыСохраненияФайлов.КаталогУказанныйПользователем") = ПараметрыРассылкиКвитанций.ВариантКаталогаСохраненияКвитанций);
	КаталогСуществует          = УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовСервер.ПроверитьСуществованиеКаталогаСохраненияКвитанцийНаСервере();
	
	Если ЭтоПользовательскийКаталог И Не КаталогСуществует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан пользовательский каталог для сохранения квитанций.
														  |Настройте его в параметрах рассылки.", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("Форма, ПараметрыРассылкиКвитанций, ЭтоТестоваяРассылкаКвитанций",
									Форма, ПараметрыРассылкиКвитанций, ЭтоТестоваяРассылкаКвитанций);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОРассылкеКвитанций",
												  УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовКлиент, ДопПараметры);
	ПоказатьВопрос(ОписаниеОповещения, "Внимание, отправка квитанций может занять длительное время
										|и отменить рассылку отправленных писем будет невозможно.
										|Запустить рассылку?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// После вопроса о рассылке квитанций.
//
Процедура ПослеВопросаОРассылкеКвитанций(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма                        = ДопПараметры.Форма;
	ПараметрыРассылкиКвитанций   = ДопПараметры.ПараметрыРассылкиКвитанций;
	ЭтоТестоваяРассылкаКвитанций = ДопПараметры.ЭтоТестоваяРассылкаКвитанций;
	
	// Проверка адресов доставки.
	Если ЭтоТестоваяРассылкаКвитанций Тогда
		
		Если ПустаяСтрока(ПараметрыРассылкиКвитанций.ЭлектронныйАдресПолучателяТестовойРассылки) Тогда
			ПоказатьПредупреждение(, "Заполните адрес получателя тестовой рассылки в настройках параметров рассылки квитанций!");
			Возврат;
		КонецЕсли;
		
	Иначе
		
		СтрокиБезАдресов = Форма.ДанныеПоКвитанциям.НайтиСтроки(Новый Структура("АдресЭлектроннойПочты", ""));
		Если СтрокиБезАдресов.Количество() > 0 Тогда
			
			Если Форма.ДанныеПоКвитанциям.Количество() <> СтрокиБезАдресов.Количество() Тогда
				
				ТекстВопроса = "Внимание, не для всех лицевых счетов определены адреса доставки квитанций!
								|Квитанции по указанным лицевым счетам не будут отправлены.
								|Продолжить рассылку?";
				
				СообщитьПользователюОНеЗаданныхЭлектронныхАдресахДоставки(СтрокиБезАдресов);
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаОНезаполненныхАдресахЭлПочты",
															  УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовКлиент,
															  Новый Структура("Форма, ЭтоТестоваяРассылкаКвитанций", Форма, ЭтоТестоваяРассылкаКвитанций));
				
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
				
				Возврат;
				
			ИначеЕсли Форма.ДанныеПоКвитанциям.Количество() = СтрокиБезАдресов.Количество() Тогда
				
				ТекстПредупреждения = "Внимание, ни для одого лицевого счета не определены адреса доставки квитанций!";
				
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
				СообщитьПользователюОНеЗаданныхЭлектронныхАдресахДоставки(СтрокиБезАдресов);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗапуститьРассылкуКвитанцийНаЭлектронныеЯщикиЛицевыхСчетов(Форма, ЭтоТестоваяРассылкаКвитанций);
	
КонецПроцедуры

// Обработчик завершения вопроса о незаполненных адресах л/с.
//
Процедура ОбработатьРезультатВопросаОНезаполненныхАдресахЭлПочты(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗапуститьРассылкуКвитанцийНаЭлектронныеЯщикиЛицевыхСчетов(ДопПараметры.Форма, ДопПараметры.ЭтоТестоваяРассылкаКвитанций);
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит в сообщение пользователю список лицевых счетов с незаполненеными электронными адресами.
Процедура СообщитьПользователюОНеЗаданныхЭлектронныхАдресахДоставки(СтрокиБезАдресов)
	
	// Сообщим пользователю список лицевых счетов, по которым не заданы адреса доставки.
	ТекстСообщения = "Не определены адреса доставки квитанций для следующих лицевых счетов:" + Символы.ПС;
	
	Для Каждого ТекСтрокаБезАдреса Из СтрокиБезАдресов Цикл
		ТекстСообщения = ТекстСообщения + ТекСтрокаБезАдреса.ЛицевойСчет + ", ";
	КонецЦикла;
	
	ТекстСообщения = Лев(ТекстСообщения, СтрДлина(ТекстСообщения) - 2);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Запускает процедуру отправки квитанций на электронные ящики лицевых счетов.
//
Процедура ЗапуститьРассылкуКвитанцийНаЭлектронныеЯщикиЛицевыхСчетов(Форма, ЭтоТестоваяРассылкаКвитанций)
	
	// Помещаем данные из таблицы значний (реквизит формы) в массив для передачи на серверную часть механизма.
	ДанныеПоКвитанциямМассив = Новый Массив;
	
	Для Каждого ТекСтр Из Форма.ДанныеПоКвитанциям Цикл
		
		СтрокаСтруктура = Новый Структура;
		СтрокаСтруктура.Вставить("НомерСтроки",            ТекСтр.НомерСтроки);
		СтрокаСтруктура.Вставить("ИдентификаторКвитанции", ТекСтр.ИдентификаторКвитанции);
		СтрокаСтруктура.Вставить("Организация",            ТекСтр.Организация);
		СтрокаСтруктура.Вставить("МесяцНачисления",        ТекСтр.МесяцНачисления);
		СтрокаСтруктура.Вставить("Здание",                 ТекСтр.Здание);
		СтрокаСтруктура.Вставить("ЛицевойСчет",            ТекСтр.ЛицевойСчет);
		СтрокаСтруктура.Вставить("АдресЭлектроннойПочты",  ТекСтр.АдресЭлектроннойПочты);
		СтрокаСтруктура.Вставить("ТипКвитанции",           ТекСтр.ТипКвитанции);
		
		ДанныеПоКвитанциямМассив.Добавить(СтрокаСтруктура);
		
	КонецЦикла;
	
	// Параметры передаваемые на следующий этап - запуск рассылки в фоне.
	ПараметрыЗапускаОтправки = Новый Структура;
	ПараметрыЗапускаОтправки.Вставить("ДокументРезультат",            Форма.Результат);
	ПараметрыЗапускаОтправки.Вставить("МассивДанныеПоКвитанциям",     ДанныеПоКвитанциямМассив);
	ПараметрыЗапускаОтправки.Вставить("ЭтоТестоваяРассылкаКвитанций", ЭтоТестоваяРассылкаКвитанций);
	
	РезультатЗапуска = УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовСервер.ЗапуститьРассылкуКвитанцийВФонеНаСервере(ПараметрыЗапускаОтправки, Форма.УникальныйИдентификатор);
	
	Если РезультатЗапуска.Свойство("ПодробноеПредставлениеОшибки") И Не ПустаяСтрока(РезультатЗапуска.ПодробноеПредставлениеОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(РезультатЗапуска.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
	Если Не РезультатЗапуска.Свойство("ИдентификаторЗадания") Или ТипЗнч(РезультатЗапуска.ИдентификаторЗадания) <> Тип("УникальныйИдентификатор") Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось запустить рассылку квитанций.");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатЗапуска) Тогда
		
		Если ЭтоТестоваяРассылкаКвитанций Тогда
			ТекстСообщения = "Выполняется рассылка квитанций на тестовый электронный адрес";
		Иначе
			ТекстСообщения = "Выполняется рассылка квитанций на электронные адреса лицевых счетов";
		КонецЕсли;
		
		ПараметрыОжидания = УПЖКХ_ТиповыеМетодыКлиент.ПараметрыОжидания(Форма);
		ПараметрыОжидания.ТекстСообщения             = ТекстСообщения;
		ПараметрыОжидания.ВыводитьОкноОжидания       = Истина;
		ПараметрыОжидания.ПолучатьРезультат          = Истина; // для обратной совместимости
		ПараметрыОжидания.ВыводитьСообщения          = Ложь;
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		
		// Формируем дополнительные параметры для описания оповещения, который срабатывает после завершение рассылки в фоне.
		АдресХранилищаДляРезультатовФоновогоЗадания = Неопределено;
		
		РезультатЗапуска.Свойство("АдресХранилищаДляРезультатовФоновогоЗадания", АдресХранилищаДляРезультатовФоновогоЗадания);
		
		ДопПараметры = Новый Структура("АдресХранилищаДляРезультатовФоновогоЗадания", АдресХранилищаДляРезультатовФоновогоЗадания);
		
		// Формируем описание оповещение, который срабатывает после завершение рассылки в фоне.
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьПослеЗавершенияРассылки",
														 УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовКлиент,
														 ДопПараметры);
		
		УПЖКХ_ТиповыеМетодыКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения "ВыполнитьПослеЗавершенияРассылки".
Процедура ВыполнитьПослеЗавершенияРассылки(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат.Статус = "Выполнено" Тогда
		
		ПоказатьОповещениеПользователя("Рассылка квитанций завершена",,, БиблиотекаКартинок.Успешно32, СтатусОповещенияПользователя.Важное);
		
		// Выводим сообщение со списком л/с, на адреса эл. почты которых рассылка не выполнена.
		Если Не ДопПараметры.АдресХранилищаДляРезультатовФоновогоЗадания = Неопределено Тогда
			
			ЛицевыеСчетаИсключенныеИзРассылки = ПолучитьИзВременногоХранилища(ДопПараметры.АдресХранилищаДляРезультатовФоновогоЗадания);
			
			Если ЛицевыеСчетаИсключенныеИзРассылки.Количество() > 0 Тогда
				
				ТекстСообщения = "Рассылка не выполнена на адреса электронной почты лицевых счетов,"
								 + Символы.ПС + "находящихся в стоп-листе рассылки квитанций:";
				
				Счетчик = 1;
				
				Для Каждого ТекЭл Из ЛицевыеСчетаИсключенныеИзРассылки Цикл
					ТекстСообщения = ТекстСообщения + Символы.ПС + Счетчик + ") " + Строка(ТекЭл.ЛицевойСчет)
													+ " (" + Строка(ТекЭл.АдресЭлектроннойПочты) + ")" + ";";
					Счетчик = Счетчик + 1;
				КонецЦикла;
				
				ТекстСообщения = Лев(ТекстСообщения, СтрДлина(ТекстСообщения) - 1) + ".";
				
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Результат = Неопределено Тогда
			
			// Если рассылка отменена.
			ПоказатьОповещениеПользователя("Рассылка квитанций отменена",,,БиблиотекаКартинок.Информация32, СтатусОповещенияПользователя.Важное);
			
		Иначе
			
			// Оповещение об ошибке.
			ПояснениеКОшибке = "" + Результат.КраткоеПредставлениеОшибки + ": " + Результат.ПодробноеПредставлениеОшибки;
			ПоказатьОповещениеПользователя("Ошибка рассылки квитанций",, ПояснениеКОшибке, БиблиотекаКартинок.Ошибка32, СтатусОповещенияПользователя.Важное);
			
			// Фиксация в журнале регистрации.
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru='Рассылка квитанций'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "Ошибка", ПояснениеКОшибке,,Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
