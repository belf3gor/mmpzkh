////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность 
//             электронного документооборота с контролирующими органами". 
////////////////////////////////////////////////////////////////////////////////


#Область ПрограммныйИнтерфейс

// Проверка наличия подключения к интернету
// (см. http://technet.microsoft.com/en-us/library/cc766017(WS.10).aspx)
//
// Возвращаемое значение:
// 	Булево - признак наличия подключения к интернету.
//
Функция ЕстьПодключениеКИнтернету() Экспорт
	
	Соединение = Новый HTTPСоединение("www.msftncsi.com",,,,, 10);
	Запрос = Новый HTTPЗапрос("/ncsi.txt");
	Попытка
		Ответ = Соединение.Получить(Запрос);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если Ответ.КодСостояния = 200
		И Ответ.ПолучитьТелоКакСтроку() = "Microsoft NCSI" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

// Устанавливает соединение с сервером Интернета по протоколу http(s).
//
// Параметры:
//  URL                 - Строка - url сервера в формате [Протокол://]<Сервер>/.
//  ПараметрыСоединения - Структуруа - дополнительные параметры для "тонкой" настройки.
//    * Таймаут - Число - определяет время ожидания осуществляемого соединения и операций, в секундах.
//
Функция СоединениеССерверомИнтернета(URL, ПараметрыСоединения = Неопределено) Экспорт

	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	Схема = ?(ЗначениеЗаполнено(СтруктураURI.Схема), СтруктураURI.Схема, "http");
	Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(Схема);
	
	Таймаут = 30;
	Если ТипЗнч(ПараметрыСоединения) = Тип("Структура") Тогда
		Если ПараметрыСоединения.Свойство("Таймаут") Тогда
			Таймаут = ПараметрыСоединения.Таймаут;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			СтруктураURI.Порт,
			СтруктураURI.Логин,
			СтруктураURI.Пароль, 
			Прокси,
			Таймаут,
			?(НРег(Схема) = "http", Неопределено, ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение()));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();	
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с контролирующими органами. Установление соединения с сервером интернета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

// Возвращает записи присоединенных файлов объекта.
//
// Параметры:
//  Объект                       - Ссылка - ссылка на объект, который может содержать присоединенные файлы,
//                               - Массив - массив ссылок на объекты.
//  ИменаСправочников            - Строка - имена справочников присоединенных файлов через запятую, при пустом значении
//                                 используется имя справочника по умолчанию,
//                               - Неопределено - использовать имя справочника по умолчанию,
//                                 при равенстве Неопределено параметров ИменаСправочников, ИсходноеИмяФайла,
//                                 ПоляПрисоединенногоФайла и если в параметре Объект передан не массив, в параметре
//                                 ВключатьПомеченныеНаУдаление передана Истина, используется стандартная процедура,
//                                 возвращающая массив ссылок на присоединенные файлы из всех справочников присоединенных
//                                 файлов объекта.
//  ИсходноеИмяФайла             - Строка - исходное имя присоединенного файла, хранимое в ресурсе ИсходноеИмяФайла,
//                                 не ограничено 150 символами, как имя файла без расширения в стандартном реквизите Наименование,
//                                 при пустом значении возвращаются все файлы,
//                               - Неопределено - вернуть все файлы, см. также ИменаСправочников.
//  ПоляПрисоединенногоФайла     - Строка - возвращаемые поля справочника присоединенных файлов через запятую,
//                                 при непустом значении возвращается таблица значений, первая колонка содержит ссылку
//                                 на присоединенный файл, следующие колонки соответствуют перечисленным полям
//                                 справочника, при пустом значении возвращается массив ссылок на присоединенные файлы.
//                                 Неопределено - вернуть только ссылки на присоединенные файлы,
//                                 см. также ИменаСправочников.
//  ВключатьПомеченныеНаУдаление - Булево - при значении Истина возвращать также помеченные на удаление.
//
// Возвращаемое значение:
//  Массив                       - массив ссылок на присоединенные файлы, возвращается при пустом значении
//                                 ПоляПрисоединенногоФайла,
//  ТаблицаЗначений              - таблица со ссылками на присоединенные файлы в первой колонке, значениями
//                                 перечисленных в ПоляПрисоединенногоФайла полей справочника присоединенных файлов
//                                 в следующих колонках.
//
Функция ПрикрепленныеФайлыКОбъектуИзСправочника(
	Знач Объект,
	Знач ИменаСправочников = Неопределено,
	Знач ИсходноеИмяФайла = Неопределено,
	Знач ПоляПрисоединенногоФайла = Неопределено,
	Знач ВключатьПомеченныеНаУдаление = Ложь) Экспорт
	
	Если ТипЗнч(Объект) <> Тип("Массив") И ИменаСправочников = Неопределено И ИсходноеИмяФайла = Неопределено
		И ПоляПрисоединенногоФайла = Неопределено И ВключатьПомеченныеНаУдаление Тогда
		// чтение из всех справочников присоединенных файлов объекта
		МассивФайлов = Новый Массив;
		РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект, МассивФайлов);
		Возврат МассивФайлов;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИменаСправочников) Тогда
		ТипВладельцаФайлов = ТипЗнч(Объект);
		Если ТипВладельцаФайлов = Тип("Массив") Тогда
			ТипВладельцаФайлов = ТипЗнч(Объект[0]);
		КонецЕсли;
		МетаданныеВладельца = Метаданные.НайтиПоТипу(ТипВладельцаФайлов);
		ИменаСправочников = МетаданныеВладельца.Имя + "ПрисоединенныеФайлы";
	КонецЕсли;
	
	МассивИменСправочников = СтрРазделить(ИменаСправочников, ",");
	
	Если ЗначениеЗаполнено(ПоляПрисоединенногоФайла) Тогда
		МассивПолей = СтрРазделить(ПоляПрисоединенногоФайла, ",");
		Для ИндексМассива = 0 По МассивПолей.Количество() - 1 Цикл
			ИмяПоля = СокрЛП(МассивПолей[ИндексМассива]);
			МассивПолей[ИндексМассива] = "ПрисоединенныеФайлы." + ИмяПоля + " КАК " + ИмяПоля;
		КонецЦикла;
		ПоляПрисоединенногоФайла = СтрСоединить(МассивПолей, ",
			|");
	КонецЕсли;
	
	ТекстЗапросов = "";
	Для каждого ЭлементМассива Из МассивИменСправочников Цикл
		ИмяСправочника = СокрЛП(ЭлементМассива);
		Если ЗначениеЗаполнено(ТекстЗапросов) Тогда
			ТекстЗапросов = ТекстЗапросов + "
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
		КонецЕсли;
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ПрисоединенныеФайлы.Ссылка КАК Ссылка" + ?(ЗначениеЗаполнено(ПоляПрисоединенногоФайла), ",
			|	" + ПоляПрисоединенногоФайла, "") + "
			|ИЗ
			|	&ИмяСправочника КАК ПрисоединенныеФайлы
			|ГДЕ
			|	ПрисоединенныеФайлы.ВладелецФайла" + ?(ТипЗнч(Объект) = Тип("Массив"),
					" В (&ВладелецФайлов)", " = &ВладелецФайлов") + ?(ЗначениеЗаполнено(ИсходноеИмяФайла), "
			|	И ПрисоединенныеФайлы.ИсходноеИмяФайла = &ИсходноеИмяФайла", "") + ?(НЕ ВключатьПомеченныеНаУдаление, "
			|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочника);
		ТекстЗапросов = ТекстЗапросов + ТекстЗапроса;
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапросов);
	Запрос.УстановитьПараметр("ВладелецФайлов", Объект);
	Если ЗначениеЗаполнено(ИсходноеИмяФайла) Тогда
		Запрос.УстановитьПараметр("ИсходноеИмяФайла", ИсходноеИмяФайла);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоляПрисоединенногоФайла) Тогда
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
КонецФункции

#КонецОбласти