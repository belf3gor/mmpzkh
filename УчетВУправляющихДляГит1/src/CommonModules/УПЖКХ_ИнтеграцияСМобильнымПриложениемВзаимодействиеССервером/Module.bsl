
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

#Область ВспомогательныеФункции

// Формирует строку данных для передачи в теле https запроса на получение токена.
//
Функция СформироватьСтрокуПередачиДляПолученияТокена()
	
	ПараметрыДоступа = УПЖКХ_ВзаимодействиеССервисамиРарус.ПараметрыДоступаБазыКСервисамРарус();
	
	Если ТипЗнч(ПараметрыДоступа) = Тип("Структура") И ПараметрыДоступа.Свойство("Логин") И ПараметрыДоступа.Свойство("Пароль") Тогда
		Возврат "&login=" + ПараметрыДоступа.Логин + "&pass=" + ПараметрыДоступа.Пароль;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Формирует строку данных для передачи в теле https запроса на получение файла с показаниями счетчиков.
//
Функция СформироватьСтрокуПередачиДляПолученияФайлаПоказанийСчетчиков(Токен, СведенияОбОшибке)
	
	Если Токен = "" Тогда
		Если НЕ ПолучитьТокенССервера(СведенияОбОшибке) Тогда
			Возврат "";
		КонецЕсли;
		
		Токен = УПЖКХ_ВзаимодействиеССервисамиРарус.ТокенДляСоединенияССервисамиРарус();
	КонецЕсли;
	
	Возврат "&token=" + Токен + "&format=xml";
	
КонецФункции

// Формирует строку данных для передачи в теле https запроса на получение файла с оплатами.
//
Функция СформироватьСтрокуПередачиДляПолученияОплат(Токен, СведенияОбОшибке)
	
	Если Токен = "" Тогда
		Если НЕ ПолучитьТокенССервера(СведенияОбОшибке) Тогда
			Возврат "";
		КонецЕсли;
		
		Токен = УПЖКХ_ВзаимодействиеССервисамиРарус.ТокенДляСоединенияССервисамиРарус();
	КонецЕсли;
	
	// Получаем дату последней загруженной оплаты. Данная дата будет использована в качестве начальной границы
	// для отбора загружаемых с сервиса оплат.
	НастройкиОбмена = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьНастройкуАвтоматическогоОбменаСМобильнымПриложением();
	datebeg         = XMLСтрока(НастройкиОбмена.ДатаПоследнейЗагруженнойОплаты);
	
	// Формируем строку параметров.
	СтрокаПараметров = СтрШаблон("?token=%1&datebeg=%2&multipart=1", Токен, datebeg);
	
	Возврат СтрокаПараметров;
	
КонецФункции

// Формирует строку данных для передачи в теле https запроса на получение статистики.
//
Функция СформироватьСтрокуПередачиДляПолученияСтатистики(Токен, СведенияОбОшибке)
	
	Если Токен = "" Тогда
		Если НЕ ПолучитьТокенССервера(СведенияОбОшибке) Тогда
			Возврат "";
		КонецЕсли;
		
		Токен = УПЖКХ_ВзаимодействиеССервисамиРарус.ТокенДляСоединенияССервисамиРарус();
	КонецЕсли;
	
	Возврат "&token=" + Токен;
	
КонецФункции

// Проверяет строку передачи на отсутствие параметров доступа.
//
Функция ПроверитьСтрокуПередачиНаОтсутствиеПараметровДоступа(СтрокаПередачи, СведенияОбОшибке)
	
	Если СтрокаПередачи = "" Тогда
		СведенияОбОшибке = "Не обнаружены параметры доступа. Пожалуйста, пройдите регистрацию повторно.";
		
		УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.УстановитьРежимРаботыМеханизмаИнтеграцииСМобильнымПриложением(Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.Регистрация);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ФункцииОбщегоНазначения

// Получает объект соединения к веб-сервису.
//
Функция ПолучитьHTTPСоединение() Экспорт
	
	мHTTPСоединение = Новый HTTPСоединение("ws-tszh.vdgb-soft.ru",,,,,, ПолучитьОбъектSSL());
	
	Возврат мHTTPСоединение;
	
КонецФункции

// Определяет необходимость использования SSL для подключения к сервису моб. приложения
// и подготавливает объект SSL, если это необходимо.
//
Функция ПолучитьОбъектSSL(ПовторноеПодключение = Ложь)
	
	ПараметрыДоступа = УПЖКХ_ВзаимодействиеССервисамиРарус.ПараметрыДоступаБазыКСервисамРарус();
	
	// Подготавливаем сведения о необходимости использования SSL.
	// При этом:
	// 1. Если подключение первое, то выполянется попытка подключения с последними сохраненными настройками.
	// 2. При повторном подключении выполняется попытка подключения с противоположными сохраненным настройками.
	ИспользоватьSSL = Ложь;
	
	Если ПараметрыДоступа.Свойство("ИспользоватьSSL") Тогда
		ИспользоватьSSL = ПараметрыДоступа.ИспользоватьSSL;
	КонецЕсли;
	
	Если ПовторноеПодключение Тогда
		ИспользоватьSSL = НЕ ИспользоватьSSL;
	КонецЕсли;
	
	SSLОбъект = ?(ИспользоватьSSL,
				  Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено),
				  Неопределено);
	
	Попытка
		мHTTPСоединение = Новый HTTPСоединение("ws-tszh.vdgb-soft.ru",,,,,, SSLОбъект);
		Ответ           = ОтправитьGETЗапросНаСервис(мHTTPСоединение, "api/clients");
	Исключение
		Ответ = "";
	КонецПопытки;
	
	СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПрочитатьJsonИзОтветаСервера(Ответ);
	
	Если ТипЗнч(СтруктураОтвета) = Тип("Структура") Тогда
		ПараметрыДоступа.Вставить("ИспользоватьSSL", ИспользоватьSSL);
		УПЖКХ_ВзаимодействиеССервисамиРарус.УстановитьПараметрыДоступаБазыКСервисамРарус(ПараметрыДоступа);
		
	ИначеЕсли НЕ ПовторноеПодключение Тогда
		
		Возврат ПолучитьОбъектSSL(Истина);
		
	КонецЕсли;
	
	Возврат SSLОбъект;
	
КонецФункции

// Получает адрес главной страницы сервиса.
//
Функция ПолучитьАдресГлавнойСтраницыСервисаЖКХЛичныйКабинет() Экспорт
	
	Возврат "https://vgkh.ru/mobile_apps/jkh-lichnyy-kabinet/";
	
КонецФункции

// Получает адрес главной страницы сервиса.
//
Функция ПолучитьАдресГлавнойСтраницыСервисаЖКХЛичныйКабинетLite() Экспорт
	
	Возврат "https://vgkh.ru/mobile_apps/jkh-lichnyy-kabinet/?lite=Y";
	
КонецФункции

// Получает адрес страницы с лицензиями.
//
Функция ПолучитьАдресСтраницыОписанияСпособовАктивацииАккаунта() Экспорт
	
	Возврат "https://vgkh.ru/mobile_apps/jkh-lichnyy-kabinet/price.php";
	
КонецФункции

// Получает адрес страницы с лицензиями.
//
Функция ПолучитьАдресСтраницыОписанияСпособовАктивацииАккаунтаLite() Экспорт
	
	Возврат "https://vgkh.ru/mobile_apps/jkh-lichnyy-kabinet/?lite=Y#Price";
	
КонецФункции

// Получает адрес страницы с описанием способов оповещения жильцов о параметрах доступа.
//
Функция ПолучитьАдресСтраницыОписанияСпособовОповещенияЖильцовОПараметрахДоступа() Экспорт
	
	Возврат "https://vgkh.ru/mobile_apps/jkh-lichnyy-kabinet/opoveshcheniye/";
	
КонецФункции

// Получает адрес страницы с описанием способов оповещения жильцов о параметрах доступа.
//
Функция ПолучитьАдресСтраницыОписанияСпособовОповещенияЖильцовОПараметрахДоступаLite() Экспорт
	
	Возврат "https://vgkh.ru/mobile_apps/jkh-lichnyy-kabinet/opoveshcheniye/?lite=Y";
	
КонецФункции

// Получает адрес страницы с контактной информацией.
//
Функция ПолучитьАдресСтраницыСвязиСНами() Экспорт
	
	Возврат "https://vgkh.ru/contacts/#feedback";
	
КонецФункции

// Получает адрес мобильного приложения на Google Play.
//
Функция ПолучитьАдресМобильногоПриложенияЖКХЛичныйКабинетGooglePlay() Экспорт
	
	Возврат "https://play.google.com/store/apps/details?id=ru.vdgb_soft.zhkh";
	
КонецФункции

// Получает адрес мобильного приложения в App Store.
//
Функция ПолучитьАдресМобильногоПриложенияЖКХЛичныйКабинетAppStore() Экспорт
	
	Возврат "https://itunes.apple.com/ru/app/zkh-licnyj-kabinet/id1078559449?mt=8";
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ФУНКЦИИ ИМПОРТА

#Область ОбщиеФункцииИмпорта

// Выполняет загрузку данных с сервиса в базу.
//
Процедура ВыполнитьЗагрузкуДанныхССервиса(ВидОбмена, мHTTPСоединение, Токен, СведенияОбОшибке, ВыполняетсяВАвтоматическомРежиме = Ложь, ФайлЗагрузки = Неопределено, ПроводитьДокументы = Истина)
	
	СведенияОбОшибке = "";
	
	Если ФайлЗагрузки = Неопределено Тогда
		ФайлЗагрузки = ЗагрузитьДанныеССервера(ВидОбмена, мHTTPСоединение, Токен, СведенияОбОшибке);
	КонецЕсли;
	
	Если НЕ ФайлЗагрузки = Неопределено Тогда
		
		МассивЗагруженныхДанных = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьДанныеИзXML(ФайлЗагрузки, СведенияОбОшибке);
		
		Если НЕ МассивЗагруженныхДанных = Неопределено Тогда
			Для каждого ТекЗагруженныеДанные из МассивЗагруженныхДанных Цикл
				УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ЗагрузитьДанныеВБазу(ТекЗагруженныеДанные, СведенияОбОшибке, ПроводитьДокументы);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.СоздатьЗаписьЖурналаРегистрации(ФайлЗагрузки, СведенияОбОшибке,
																				  ВидОбмена,,
																				  ВыполняетсяВАвтоматическомРежиме);
	
КонецПроцедуры // ВыполнитьЗагрузкуДанныхССервиса()

// Загружает данные с сервиса и преобразовывает их в текст.
//
Функция ЗагрузитьДанныеССервера(ВидОбмена, мHTTPСоединение, Токен, СведенияОбОшибке)
	
	Ответ = ПолучитьФайлССервера(ВидОбмена, мHTTPСоединение, Токен, СведенияОбОшибке);
	
	Если Ответ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат УПЖКХ_ВебИнтеграцияОбщегоНазначения.СформироватьТекстовыйФайл(Ответ);
	
КонецФункции // ЗагрузитьДанныеССайта()

// Загружает файл с сервиса.
//
Функция ПолучитьФайлССервера(ВидОбмена, мHTTPСоединение, Токен, СведенияОбОшибке)
	
	СтрокаЗапроса = СформироватьСтрокуЗапроса(ВидОбмена, Токен, СведенияОбОшибке);
	
	Если ЗначениеЗаполнено(СведенияОбОшибке) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПопыткаПолученияФайла        = 0;
	ИспользоватьЗагрузкуПоЧастям = Ложь;
	
	Если ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаСМобильнымПриложением.ЗагрузкаОплат Тогда
		ИспользоватьЗагрузкуПоЧастям = Истина;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Попытка
		
		МассивОтветов        = Новый Массив;
		ПродолжатьВыполнение = Истина;
		
		Пока ПродолжатьВыполнение Цикл
			
			СтруктураОтвета = ОтправитьЗапросНаПолучениеДанных(мHTTPСоединение, ВидОбмена, СтрокаЗапроса, СведенияОбОшибке, ИспользоватьЗагрузкуПоЧастям);
			
			Если ТипЗнч(СтруктураОтвета.Результат) = Тип("Строка") Тогда
				МассивОтветов.Добавить(СтруктураОтвета.Результат);
			Иначе
				Результат = СтруктураОтвета.Результат;
			КонецЕсли;
			
			Если СтруктураОтвета.ЗагрузкаЗавершена Тогда
				Если Не МассивОтветов.Количество() = 0 Тогда
					Результат = СтрСоединить(МассивОтветов);
				КонецЕсли;
				
				ПродолжатьВыполнение = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		СведенияОбОшибке = "Не удалось загрузить файл: сервер не отвечает." + Символы.ПС + "Проверьте настройки соединения.";
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ПолучитьФайлССервера()

// Формирует строку запроса к сервису исходя из текущего вида обмена.
//
Функция СформироватьСтрокуЗапроса(ВидОбмена, Токен, СведенияОбОшибке)
	
	СтрокаЗапроса = "";
	
	Если ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаСМобильнымПриложением.ЗагрузкаПоказанийПУ Тогда
		СтрокаЗапроса = "api/clients/data/meters" + СформироватьСтрокуПередачиДляПолученияФайлаПоказанийСчетчиков(Токен, СведенияОбОшибке);
	ИначеЕсли ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаСМобильнымПриложением.ЗагрузкаОплат Тогда
		СтрокаЗапроса = "api/clients/data/payments_export" + СформироватьСтрокуПередачиДляПолученияОплат(Токен, СведенияОбОшибке);
	ИначеЕсли ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаСМобильнымПриложением.ЗагрузкаСтатистики Тогда
		СтрокаЗапроса = "api/clients/data/license" + СформироватьСтрокуПередачиДляПолученияСтатистики(Токен, СведенияОбОшибке);
	Иначе
		СведенияОбОшибке = "Ошибка получения файла с сервера: неизвестный формат обмена.";
	КонецЕсли;
	
	Возврат СтрокаЗапроса;
	
КонецФункции // СформироватьСтрокуЗапроса()

// Отправляет на сервис запрос на получение данных.
//
Функция ОтправитьЗапросНаПолучениеДанных(мHTTPСоединение, ВидОбмена, СтрокаЗапроса, СведенияОбОшибке, ЗагрузкаПоЧастям = Ложь, ПопыткаПолученияФайла = 0)
	
	СтруктураРезультата = Новый Структура("ЗагрузкаЗавершена, Результат", Истина, "");
	
	Ответ           = ОтправитьGETЗапросНаСервис(мHTTPСоединение, СтрокаЗапроса);
	СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПрочитатьJsonИзОтветаСервера(Ответ);
	
	// Если пришел JSON, то ничего по частям не грузим, так как это либо информация о лицензии,
	// либо служебное сообщение.
	Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
		Если СтруктураОтвета.success Тогда
			Если СтруктураОтвета.Свойство("data") Тогда
				СтруктураРезультата.Результат = СтруктураОтвета.data;
			Иначе
				СтруктураРезультата.Результат = Ответ;
			КонецЕсли;
		ИначеЕсли СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура")
		 И СтруктураОтвета.error.Свойство("code") И (СтруктураОтвета.error.code = "104" ИЛИ СтруктураОтвета.error.code = "103") Тогда
			
			// Если токен не совпадает, то запрашиваем функцию рекурсивно.
			// Для того, чтобы предотвратить возможные ошибки, максимальный уровень вложенности рекурсии
			// приравняем 3-м. Для этого передаем параметр "ПопыткаПолученияФайла".
			Если ПопыткаПолученияФайла < 3 Тогда
				
				СтрокаЗапроса = СформироватьСтрокуЗапроса(ВидОбмена, "", СведенияОбОшибке);
				
				Если СведенияОбОшибке = "" Тогда
					СтруктураРезультата = ОтправитьЗапросНаПолучениеДанных(мHTTPСоединение, ВидОбмена, СтрокаЗапроса, СведенияОбОшибке, ЗагрузкаПоЧастям, ПопыткаПолученияФайла);
				КонецЕсли;
				
			Иначе
				СтруктураРезультата.Результат = Ответ;
				СведенияОбОшибке = "Не удалось загрузить файл: не удалось авторизоваться на сервисе.";
			КонецЕсли;
		КонецЕсли;
		
	// Если ответ не в JSON, то проверяем, используется ли загрузка по частям.
	ИначеЕсли ЗагрузкаПоЧастям Тогда
		
		// Если возникла ошибка, прекращаем обмен и передаем информацию об ошибке.
		Если СтрНачинаетсяС(Ответ, "failure") Тогда
			СтруктураРезультата.Результат = Ответ;
			СведенияОбОшибке = "Не удалось загрузить файл: " + СокрЛП(Сред(Ответ, 8));
		// Если пришел пустой ответ, то считаем, что произошла неожиданная ошибка на стороне сервиса
		// и прекращаем обмен.
		ИначеЕсли СокрЛП(Ответ) = "" Тогда
			СтруктураРезультата.Результат = Ответ;
			СведенияОбОшибке = "Не удалось загрузить файл: исключительная ошибка.";
		// Если все части переданы (пришел "success"), то завершаем обмен.
		ИначеЕсли СтрНачинаетсяС(Ответ, "success") Тогда
			// Заглушка. Не нужно добавлять "success" в массив ответов.
		Иначе
			// Если обмен не завершен и ошибок не произошло, то продолжаем загружать данные.
			СтруктураРезультата.ЗагрузкаЗавершена = Ложь;
			СтруктураРезультата.Результат = Ответ;
		КонецЕсли;
		
	// Если загрузка по частям не используется и загружаемый файл представляет собой XML, то
	// передаем его в качестве результата.
	ИначеЕсли НЕ СтрДлина(Ответ) < 5 И Лев(Ответ, 5) = "<?xml" Тогда
		СтруктураРезультата.Результат = Ответ;
	Иначе
		// Если пришло что-то непредвиденное, то считаем это ошибкой.
		СтруктураРезультата.Результат = Ответ;
		СведенияОбОшибке = "Не удалось загрузить файл: исключительная ошибка.";
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ФУНКЦИИ ЭКСПОРТА

#Область ОбщиеФункцииЭкспорта

// Отправляет на сайт запрос на передачу файла.
//
// Параметры:
//  мHTTPСоединение - объект, с помощью которого осуществляется соединение с сайтом.
//  АдресСайта - Строка - адрес сайта.
//  Логин - Строка - логин доступа к админской части сайта.
//  Пароль - Строка - пароль доступа к админской части сайта.
//  ФайлВыгрузки - Строка - полный путь к файлу выгрузки.
//  РазрешенныйРазмер - Число - максимальный возможный объем данных, который можно передать за 1 раз.
//  Куки - Структура - Cookie сайта.
//  ТипДанных - Строка - идентификатор передаваемых данных.
//  ИННОрганизации - Строка - ИНН организации, на сайт которой передаем файл.
//  СведенияОбОшибке - Строка - сведения об ошибке.
//
// Возвращаемое значение:
//  Строка, Неопределено.
//
Функция ПередатьФайлНаСервис(мHTTPСоединение, Токен, ФайлВыгрузки, СведенияОбОшибке, ПопыткаПередачиФайла = 0, ИспользуетсяПовторнаяОтправка, ПоследнийЭтапВыгрузки)
	
	Если Токен = "" Тогда
		Если НЕ ПолучитьТокенССервера(СведенияОбОшибке) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Токен = УПЖКХ_ВзаимодействиеССервисамиРарус.ТокенДляСоединенияССервисамиРарус();
	КонецЕсли;
	
	ФайлПереданУспешно = Ложь;
	
	ПередаваемыйФайл = Новый Файл(ФайлВыгрузки);
	ИмяФайла         = ПередаваемыйФайл.Имя;
	ТекстФайла       = Новый ЧтениеТекста(ФайлВыгрузки);
	СтрокаПередачи   = ТекстФайла.Прочитать() + Символы.ПС;
	
	ТекстФайла.Закрыть();
	
	Попытка
		
		// Если файл отправляется повторно, то добавляем параметр "debug_mode".
		// В настоящее время на сервисе данный параметр никак не обрабатывается,
		// и добавлен для будущих доработок.
		ТекстЗапроса = СтрШаблон("api/clients/data/upload?token=%1&lastfile=%2%3", Токен, ?(ПоследнийЭтапВыгрузки, "'true'", "'false'"), ?(ИспользуетсяПовторнаяОтправка, "&debug_mode=1", ""));
		Ответ        = УПЖКХ_ВзаимодействиеССервисамиРарус.ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, ТекстЗапроса, СтрокаПередачи);
		
		СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПрочитатьJsonИзОтветаСервера(Ответ);
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
			Если СтруктураОтвета.success Тогда
				
				ФайлПереданУспешно = ЗапросНаЭкспортФайла(мHTTPСоединение, Токен, СтруктураОтвета.data.request_id, СведенияОбОшибке);
				
			ИначеЕсли СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура")
			 И СтруктураОтвета.error.Свойство("code") И СтруктураОтвета.error.code = "104" Тогда
				
				// Если токен не совпадает, то запрашиваем функцию рекурсивно.
				// Для того, чтобы предотвратить возможные ошибки, максимальный уровень вложенности рекурсии приравняем 3-м.
				// Для этого передаем параметр "ПопыткаПолученияПартии".
				Если ПопыткаПередачиФайла < 3 Тогда
					Возврат ПередатьФайлНаСервис(мHTTPСоединение, "", ФайлВыгрузки, "", ПопыткаПередачиФайла + 1, ИспользуетсяПовторнаяОтправка, ПоследнийЭтапВыгрузки);
				КонецЕсли;
				
				Если СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура") И СтруктураОтвета.error.Свойство("message") Тогда
					ОшибкаОбмена = СтруктураОтвета.error.message;
				Иначе
					ОшибкаОбмена = "";
				КонецЕсли;
				
				ФайлПереданУспешно = Ложь;
				
				СведенияОбОшибке = "Не удалось загрузить файл на сайт" + ?(ПустаяСтрока(ОшибкаОбмена), ".", ": " + ОшибкаОбмена);
				
			Иначе
				Если СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура") И СтруктураОтвета.error.Свойство("message") Тогда
					ОшибкаОбмена = СтруктураОтвета.error.message;
				Иначе
					ОшибкаОбмена = "";
				КонецЕсли;
				
				ФайлПереданУспешно = Ложь;
				
				СведенияОбОшибке = "Не удалось загрузить файл на сайт" + ?(ПустаяСтрока(ОшибкаОбмена), ".", ": " + ОшибкаОбмена);
			КонецЕсли;
		Иначе
			СведенияОбОшибке = "Не удалось загрузить файл на сайт: исключительная ошибка.";
			
			ФайлПереданУспешно = Ложь;
		КонецЕсли;
	Исключение
		СведенияОбОшибке = "Не удалось загрузить файл на сайт: сервер не отвечает." + Символы.ПС + "Проверьте настройки соединения.";
		
		ФайлПереданУспешно = Ложь;
	КонецПопытки;
	
	Возврат ФайлПереданУспешно;
	
КонецФункции // ПередатьФайлНаСервис()

// Передает на сайт файл с данными.
//
// Параметры:
//  ФайлВыгрузки - Строка - полный путь к файлу с данными.
//  ТипДанных - Строка - идентификатор передаваемых данных.
//  АдресСайта - Строка - адрес сайта.
//  Логин - Строка - логин доступа к админской части сайта.
//  Пароль - Строка - пароль доступа к админской части сайта.
//  ИННОрганизации - Строка - ИНН организации, на сайт которой передаем файл.
//  СведенияОбОшибке - Строка - сведения об ошибке.
//
// Возвращаемое значение:
//  Строка, Неопределено.
//
Функция ПередатьДанныеНаСервис(ФайлВыгрузки, СведенияОбОшибке, ИспользуетсяПовторнаяОтправка = Ложь, ПоследнийЭтапВыгрузки = Истина)
	
	// Устанавливаем соединение.
	мHTTPСоединение = ПолучитьHTTPСоединение();
	
	Токен = УПЖКХ_ВзаимодействиеССервисамиРарус.ТокенДляСоединенияССервисамиРарус();
	
	// Получаем ответ на запрос передачи файла.
	Возврат ПередатьФайлНаСервис(мHTTPСоединение, Токен, ФайлВыгрузки, СведенияОбОшибке, , ИспользуетсяПовторнаяОтправка, ПоследнийЭтапВыгрузки);
	
КонецФункции // ПередатьНаСайтДанныеДляДоступа

// Экспорт файла на сайт.
//
// Параметры:
//  мHTTPСоединение - объект, с помощью которого осуществляется соединение с сайтом.
//  АдресСайта - Строка - адрес сайта.
//  Логин - Строка - логин доступа к админской части сайта.
//  Пароль - Строка - пароль доступа к админской части сайта.
//  ТипДанных - Строка - идентификатор передаваемых данных.
//  ФайлВыгрузки - Строка - полный путь к файлу с данными.
//  Куки - Структура - Cookie сайта.
//  ИННОрганизации - Строка - ИНН организации, на сайт которой передаем файл.
//  СведенияОбОшибке - Строка - сведения об ошибке.
//  КоличествоПопыток - Число - количество попыток передачи файла.
//
// Возвращаемое значение:
//  Строка, Неопределено.
//
Функция ЗапросНаЭкспортФайла(мHTTPСоединение, Токен, IDЗапросаНаОтправкуФайла, СведенияОбОшибке, КоличествоПопыток = 1000)
	
	// Реализуем задержку между запросами в 3 секунды с помощью цикла.
	// Для этого создадим специальную переменную.
	ВремяВызоваЗапроса = ТекущаяДата();
	
	ном = 1;
	
	Пока ном <= КоличествоПопыток Цикл
		
		ТекущееВремя = ТекущаяДата();
		
		Если ТекущееВремя >= ВремяВызоваЗапроса Тогда
			
			Попытка
				
				Ответ           = ОтправитьGETЗапросНаСервис(мHTTPСоединение, СтрШаблон("api/clients/data/status?request_id=%1&token=%2", IDЗапросаНаОтправкуФайла, Токен));
				СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПрочитатьJsonИзОтветаСервера(Ответ);
				
				Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
					Если СтруктураОтвета.success Тогда
						
						Если СтруктураОтвета.data.status = "done" Тогда
							
							Возврат Истина;
							
						ИначеЕсли СтруктураОтвета.data.status = "process" Тогда
							
							ном = ном + 1;
							
						Иначе
							
							СведенияОбОшибке = "Не удалось загрузить файл на сайт.";
							
							Возврат Ложь;
						КонецЕсли;
						
					Иначе
						Если СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура") И СтруктураОтвета.error.Свойство("message") Тогда
							ОшибкаОбмена = СтруктураОтвета.error.message;
						Иначе
							ОшибкаОбмена = "";
						КонецЕсли;
						
						СведенияОбОшибке = "Не удалось загрузить файл на сайт" + ?(ПустаяСтрока(ОшибкаОбмена), ".", ": " + ОшибкаОбмена);
						
						Если СтруктураОтвета.Свойство("warnings") И ТипЗнч(СтруктураОтвета.warnings) = Тип("Массив") Тогда
							
							Для каждого ТекПредупреждение из СтруктураОтвета.warnings Цикл
								
								СведенияОбОшибке = СведенияОбОшибке + ТекПредупреждение + Символы.ПС;
								
							КонецЦикла;
							
						КонецЕсли;
						
						Возврат Ложь;
					КонецЕсли;
				Иначе
					СведенияОбОшибке = "Не удалось загрузить файл на сайт: исключительная ошибка.";
					
					Возврат Ложь;
				КонецЕсли;
				
				ВремяВызоваЗапроса = ТекущаяДата() + 3;
				
			Исключение
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	СведенияОбОшибке = "Не удалось загрузить файл на сайт: исключительная ошибка.";
	
	Возврат Ложь;
	
КонецФункции // ЗапросНаЭкспортФайла()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИМПОРТА

#Область ПроцедурыИмпортаПоВидамЗагрузок

////////////////////////////////
// Получение токена.

// Получает токен с сервиса.
//
Функция ПолучитьТокенССервера(СведенияОбОшибке = "") Экспорт
	
	СтрокаПередачи = СформироватьСтрокуПередачиДляПолученияТокена();
	
	Если ПроверитьСтрокуПередачиНаОтсутствиеПараметровДоступа(СтрокаПередачи, СведенияОбОшибке) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	мHTTPСоединение = ПолучитьHTTPСоединение();
	
	ТокенПолучен = Ложь;
	
	// Получаем ответ на запрос передачи данных.
	Попытка
		
		Ответ           = УПЖКХ_ВзаимодействиеССервисамиРарус.ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/token", СтрокаПередачи);
		СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПрочитатьJsonИзОтветаСервера(Ответ);
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
			Если СтруктураОтвета.success Тогда
				Если ТипЗнч(СтруктураОтвета.data) = Тип("Структура") И СтруктураОтвета.data.Свойство("token") Тогда
					Токен = СтруктураОтвета.data.token;
				Иначе
					Токен = "";
				КонецЕсли;
				
				УПЖКХ_ВзаимодействиеССервисамиРарус.УстановитьТокенДляСоединенияССервисамиРарус(Токен);
				ТокенПолучен = Истина;
			Иначе
				Если СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура") И СтруктураОтвета.error.Свойство("message") Тогда
					ОшибкаОбмена = СтруктураОтвета.error.message;
				Иначе
					ОшибкаОбмена = "";
				КонецЕсли;
				СведенияОбОшибке = "Не удалось получить токен" + ?(ПустаяСтрока(ОшибкаОбмена), ".", ": " + ОшибкаОбмена);
			КонецЕсли;
		Иначе
			СведенияОбОшибке = "Не удалось получить токен: исключительная ошибка.";
		КонецЕсли;
	Исключение
		СведенияОбОшибке = "Не удалось получить токен: сервер не отвечает." + Символы.ПС + "Проверьте настройки соединения.";
	КонецПопытки;
	
	Возврат ТокенПолучен;
	
КонецФункции

////////////////////////////////
// Получение идентификаторов л/с.

// Получает массив идентификаторов с сервиса.
//
Функция ПолучитьМассивIDССервера(КоличествоПартий, КоличествоIDВПартии, СведенияОбОшибке) Экспорт
	
	мHTTPСоединение = ПолучитьHTTPСоединение();
	Токен           = УПЖКХ_ВзаимодействиеССервисамиРарус.ТокенДляСоединенияССервисамиРарус();
	
	МассивЗагруженныхID = Новый Массив;
	
	Для ТекПартия = 1 по КоличествоПартий Цикл
		
		МассивIDПартии = ПолучитьIDССервера(мHTTPСоединение, Токен, КоличествоIDВПартии, СведенияОбОшибке);
		
		Если МассивIDПартии = Неопределено Тогда
			Возврат Новый Массив;
		КонецЕсли;
		
		Для каждого ТекID из МассивIDПартии Цикл
			
			МассивЗагруженныхID.Добавить(ТекID);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивЗагруженныхID;
	
КонецФункции

// Получает партию идентификаторов с сервиса.
//
Функция ПолучитьIDССервера(мHTTPСоединение, Токен, КоличествоIDВПартии = 100, СведенияОбОшибке, ПопыткаПолученияПартии = 0)
	
	Если Токен = "" Тогда
		Если НЕ ПолучитьТокенССервера(СведенияОбОшибке) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Токен = УПЖКХ_ВзаимодействиеССервисамиРарус.ТокенДляСоединенияССервисамиРарус();
	КонецЕсли;
	
	// Получаем ответ на запрос передачи данных.
	Попытка
		
		Ответ           = ОтправитьGETЗапросНаСервис(мHTTPСоединение, СтрШаблон("api/clients/members/id?count=%1&token=%2", КоличествоIDВПартии, Токен));
		СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПрочитатьJsonИзОтветаСервера(Ответ);
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
			Если СтруктураОтвета.success Тогда
				Если ТипЗнч(СтруктураОтвета.data) = Тип("Структура") И СтруктураОтвета.data.Свойство("members") Тогда
					МассивИдентификаторов = СтруктураОтвета.data.members;
				Иначе
					МассивИдентификаторов = Новый Массив;
				КонецЕсли;
			ИначеЕсли СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура")
			 И СтруктураОтвета.error.Свойство("code") И СтруктураОтвета.error.code = "104" Тогда
				
				// Если токен не совпадает, то запрашиваем функцию рекурсивно.
				// Для того, чтобы предотвратить возможные ошибки, максимальный уровень вложенности рекурсии приравняем 3-м.
				// Для этого передаем параметр "ПопыткаПолученияПартии".
				Если ПопыткаПолученияПартии < 3 Тогда
					МассивИдентификаторов = ПолучитьIDССервера(мHTTPСоединение, "", КоличествоIDВПартии, СведенияОбОшибке, ПопыткаПолученияПартии + 1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
		
		СведенияОбОшибке = "Не удалось получить идентификаторы лицевых счетов: сервер не отвечает." + Символы.ПС + "Проверьте настройки соединения.";
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат МассивИдентификаторов;
	
КонецФункции

////////////////////////////////
// Загрузка показаний счетчиков (в дальнейшем предполагается расширить загрузкой оплат).

// Выполняет загрузку данных с сервиса.
//
Процедура ВыполнитьЗагрузкуДанныхССервера(мHTTPСоединение, Токен, СведенияОбОшибке = "", ВыполняетсяВАвтоматическомРежиме = Ложь, ВидОбмена)
	
	Если ВидОбмена = Перечисления.УПЖКХ_ВидыРегламентныхЗаданийИнтеграцииСМобильнымПриложением.ЗагрузкаПоказанийССервера Тогда
		ВыполнитьЗагрузкуПоказанийПоПУ(мHTTPСоединение, Токен, СведенияОбОшибке, ВыполняетсяВАвтоматическомРежиме);
	ИначеЕсли ВидОбмена = Перечисления.УПЖКХ_ВидыРегламентныхЗаданийИнтеграцииСМобильнымПриложением.ЗагрузкаОплатССервера Тогда
		ВыполнитьЗагрузкуОплат(мHTTPСоединение, Токен, СведенияОбОшибке, ВыполняетсяВАвтоматическомРежиме);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет загрузку показания по ИПУ с сервиса.
//
Процедура ВыполнитьЗагрузкуПоказанийПоПУ(мHTTPСоединение, Токен, СведенияОбОшибке, ВыполняетсяВАвтоматическомРежиме = Ложь)
	
	ВыполнитьЗагрузкуДанныхССервиса(Перечисления.УПЖКХ_ВидыОбменаСМобильнымПриложением.ЗагрузкаПоказанийПУ, мHTTPСоединение, Токен, СведенияОбОшибке, ВыполняетсяВАвтоматическомРежиме);
	
КонецПроцедуры // ВыполнитьЗагрузкуПоказанийПоПУ

// Выполняет загрузку оплат.
//
Процедура ВыполнитьЗагрузкуОплат(мHTTPСоединение, Токен, СведенияОбОшибке, ВыполняетсяВАвтоматическомРежиме = Ложь)
	
	ВыполнитьЗагрузкуДанныхССервиса(Перечисления.УПЖКХ_ВидыОбменаСМобильнымПриложением.ЗагрузкаОплат, мHTTPСоединение, Токен, СведенияОбОшибке, ВыполняетсяВАвтоматическомРежиме);
	
КонецПроцедуры // ВыполнитьЗагрузкуПоказанийПоПУ

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЭКСПОРТА

#Область ПроцедурыИФункцииЭкспорта

////////////////////////////////
// Отправка параметров доступа для регистрации на сервисе.

// Отправляет параметры доступа на сервис.
//
Функция ОтправитьПараметрыДоступаНаСервер(СтруктураРегистрации, СведенияОбОшибке) Экспорт
	
	мHTTPСоединение = ПолучитьHTTPСоединение();
	
	СтрокаПередачи = УПЖКХ_ВзаимодействиеССервисамиРарус.СформироватьСтрокуПередачиПараметровДоступа(СтруктураРегистрации);
	
	ПараметрыПереданыУспешно = Ложь;
	
	// Получаем ответ на запрос передачи данных.
	Попытка
		
		Ответ           = УПЖКХ_ВзаимодействиеССервисамиРарус.ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/register", СтрокаПередачи);
		СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПрочитатьJsonИзОтветаСервера(Ответ);
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
			Если СтруктураОтвета.success Тогда
				СтруктураПараметровДоступа = Новый Структура("Логин, Пароль, Email", СтруктураРегистрации.Логин, СтруктураРегистрации.Пароль, СтруктураРегистрации.Email);
				
				УПЖКХ_ВзаимодействиеССервисамиРарус.УстановитьПараметрыДоступаБазыКСервисамРарус(СтруктураПараметровДоступа);
				УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.УстановитьРежимРаботыМеханизмаИнтеграцииСМобильнымПриложением(Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.ПодтверждениеРегистрации);
				
				ПараметрыПереданыУспешно = Истина;
			Иначе
				Если СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура") И СтруктураОтвета.error.Свойство("message") Тогда
					ОшибкаОбмена = СтруктураОтвета.error.message;
				Иначе
					ОшибкаОбмена = "";
				КонецЕсли;
				СведенияОбОшибке = "Не удалось создать учетную запись" + ?(ПустаяСтрока(ОшибкаОбмена), ".", ": " + ОшибкаОбмена);
			КонецЕсли;
		Иначе
			СведенияОбОшибке = "Не удалось создать учетную запись: исключительная ошибка.";
		КонецЕсли;
	Исключение
		СведенияОбОшибке = "Не удалось создать учетную запись: сервер не отвечает." + Символы.ПС + "Проверьте настройки соединения.";
	КонецПопытки;
	
	Возврат ПараметрыПереданыУспешно;
	
КонецФункции

// Выполняет верификацию аккаунта.
//
Функция ПровестиВерификациюАккаунта(СтруктураВерификации, СведенияОбОшибке) Экспорт
	
	мHTTPСоединение = ПолучитьHTTPСоединение();
	
	СтрокаПередачи = УПЖКХ_ВзаимодействиеССервисамиРарус.СформироватьСтрокуПередачиПараметровДоступаВерификация(СтруктураВерификации);
	
	ПараметрыПереданыУспешно = Ложь;
	
	// Получаем ответ на запрос передачи данных.
	Попытка
		
		Ответ           = УПЖКХ_ВзаимодействиеССервисамиРарус.ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/verification", СтрокаПередачи);
		СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПрочитатьJsonИзОтветаСервера(Ответ);
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
			Если СтруктураОтвета.success Тогда
				СтруктураПараметровДоступа = Новый Структура("Логин, Пароль, Email", СтруктураВерификации.Логин, СтруктураВерификации.Пароль, СтруктураВерификации.Email);
				
				УПЖКХ_ВзаимодействиеССервисамиРарус.УстановитьПараметрыДоступаБазыКСервисамРарус(СтруктураПараметровДоступа);
				УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.УстановитьРежимРаботыМеханизмаИнтеграцииСМобильнымПриложением(Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.НастройкаАвтоматическогоОбмена);
				
				ПараметрыПереданыУспешно = Истина;
			Иначе
				Если СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура") И СтруктураОтвета.error.Свойство("message") Тогда
					ОшибкаОбмена = СтруктураОтвета.error.message;
				Иначе
					ОшибкаОбмена = "";
				КонецЕсли;
				СведенияОбОшибке = "Не удалось подтвердить учетную запись" + ?(ПустаяСтрока(ОшибкаОбмена), ".", ": " + ОшибкаОбмена);
			КонецЕсли;
		Иначе
			СведенияОбОшибке = "Не удалось подтвердить учетную запись: исключительная ошибка.";
		КонецЕсли;
	Исключение
		СведенияОбОшибке = "Не удалось подтвердить учетную запись: сервер не отвечает." + Символы.ПС + "Проверьте настройки соединения.";
	КонецПопытки;
	
	Возврат ПараметрыПереданыУспешно;
	
КонецФункции

////////////////////////////////
// Подтверждения регистрации.

// Отправляет кодовое слово на сервис.
//
Функция ОтправитьКодовоеСловоНаСервер(КодовоеСлово, СведенияОбОшибке) Экспорт
	
	СтрокаПередачи = УПЖКХ_ВзаимодействиеССервисамиРарус.СформироватьСтрокуПередачиКодовогоСлова(КодовоеСлово);
	
	Если ПроверитьСтрокуПередачиНаОтсутствиеПараметровДоступа(СтрокаПередачи, СведенияОбОшибке) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	мHTTPСоединение = ПолучитьHTTPСоединение();
	
	РегистрацияУспешна = Ложь;
	
	// Получаем ответ на запрос передачи данных.
	Попытка
		
		Ответ           = УПЖКХ_ВзаимодействиеССервисамиРарус.ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/checkpin", СтрокаПередачи);
		СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПрочитатьJsonИзОтветаСервера(Ответ);
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
			Если СтруктураОтвета.success Тогда
				УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.УстановитьРежимРаботыМеханизмаИнтеграцииСМобильнымПриложением(Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.НастройкаАвтоматическогоОбмена);
				
				РегистрацияУспешна = Истина;
			Иначе
				Если СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура") И СтруктураОтвета.error.Свойство("message") Тогда
					ОшибкаОбмена = СтруктураОтвета.error.message;
				Иначе
					ОшибкаОбмена = "";
				КонецЕсли;
				СведенияОбОшибке = "Не удалось выполнить регистрацию учетной записи" + ?(ПустаяСтрока(ОшибкаОбмена), ".", ": " + ОшибкаОбмена);
			КонецЕсли;
		Иначе
			СведенияОбОшибке = "Не удалось выполнить регистрацию учетной записи: исключительная ошибка.";
		КонецЕсли;
	Исключение
		СведенияОбОшибке = "Не удалось выполнить регистрацию учетной записи: сервер не отвечает." + Символы.ПС + "Проверьте настройки соединения.";
	КонецПопытки;
	
	Возврат РегистрацияУспешна;
	
КонецФункции

// Отправляет кодовое слово на email повторно.
//
Функция ОтправитьКодовоеСловоНаEmailПовторно(СведенияОбОшибке = "") Экспорт
	
	СтрокаПередачи = УПЖКХ_ВзаимодействиеССервисамиРарус.СформироватьСтрокуПовторнойОтправкиКодовогоСловаНаEmail();
	
	Если ПроверитьСтрокуПередачиНаОтсутствиеПараметровДоступа(СтрокаПередачи, СведенияОбОшибке) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	мHTTPСоединение = ПолучитьHTTPСоединение();
	
	ПовторнаяОтправкаКодовогоСловаВыполнена = Ложь;
	
	// Получаем ответ на запрос передачи данных.
	Попытка
		
		Ответ           = УПЖКХ_ВзаимодействиеССервисамиРарус.ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/resend", СтрокаПередачи);
		СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПрочитатьJsonИзОтветаСервера(Ответ);
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
			Если СтруктураОтвета.success Тогда
				ПовторнаяОтправкаКодовогоСловаВыполнена = Истина;
			Иначе
				Если СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура") И СтруктураОтвета.error.Свойство("message") Тогда
					ОшибкаОбмена = СтруктураОтвета.error.message;
				Иначе
					ОшибкаОбмена = "";
				КонецЕсли;
				СведенияОбОшибке = "Не удалось выполнить повторную отправку кодового слова" + ?(ПустаяСтрока(ОшибкаОбмена), ".", ": " + ОшибкаОбмена);
			КонецЕсли;
		Иначе
			СведенияОбОшибке = "Не удалось выполнить повторную отправку кодового слова: исключительная ошибка.";
		КонецЕсли;
	Исключение
		СведенияОбОшибке = "Не удалось выполнить повторную отправку кодового слова: сервер не отвечает." + Символы.ПС + "Проверьте настройки соединения.";
	КонецПопытки;
	
	Возврат ПовторнаяОтправкаКодовогоСловаВыполнена;
	
КонецФункции

// Проверяет отправку кодового слова на email.
//
Функция ПроверитьОтправкуКодовогоСловаНаEmail(СведенияОбОшибке = "") Экспорт
	
	СтрокаПередачи = УПЖКХ_ВзаимодействиеССервисамиРарус.СформироватьСтрокуПовторнойОтправкиКодовогоСловаНаEmail();
	
	Если ПроверитьСтрокуПередачиНаОтсутствиеПараметровДоступа(СтрокаПередачи, СведенияОбОшибке) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	мHTTPСоединение = ПолучитьHTTPСоединение();
	
	// Получаем ответ на запрос передачи данных.
	Попытка
		
		Ответ           = УПЖКХ_ВзаимодействиеССервисамиРарус.ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/checksend", СтрокаПередачи);
		СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПрочитатьJsonИзОтветаСервера(Ответ);
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") И СтруктураОтвета.success Тогда
			// Кодовое слово удалось отправить.
			Возврат Истина;
		КонецЕсли;
		
	Исключение
		// Кодовое слово не удалось отправить.
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

////////////////////////////////
// Изменение email'а.

// Отпрвляет запрос на изменение email'а и отправку на него кодового слова.
//
Функция ИзменитьEmailИОтправитьКодовоеСловоПовторно(НовыйEmail, СведенияОбОшибке) Экспорт
	
	СтрокаПередачи = УПЖКХ_ВзаимодействиеССервисамиРарус.СформироватьСтрокуПовторнойОтправкиКодовогоСловаНаEmail(НовыйEmail);
	
	Если ПроверитьСтрокуПередачиНаОтсутствиеПараметровДоступа(СтрокаПередачи, СведенияОбОшибке) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	мHTTPСоединение = ПолучитьHTTPСоединение();
	
	EmailИзменен = Ложь;
	
	// Получаем ответ на запрос передачи данных.
	Попытка
		
		Ответ           = УПЖКХ_ВзаимодействиеССервисамиРарус.ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/resend", СтрокаПередачи);
		СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПрочитатьJsonИзОтветаСервера(Ответ);
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
			Если СтруктураОтвета.success Тогда
				
				СтруктураПараметровДоступа = УПЖКХ_ВзаимодействиеССервисамиРарус.ПараметрыДоступаБазыКСервисамРарус();
				СтруктураПараметровДоступа.Email = НовыйEmail;
				УПЖКХ_ВзаимодействиеССервисамиРарус.УстановитьПараметрыДоступаБазыКСервисамРарус(СтруктураПараметровДоступа);
				
				EmailИзменен = Истина;
				
			Иначе
				Если СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура") И СтруктураОтвета.error.Свойство("message") Тогда
					ОшибкаОбмена = СтруктураОтвета.error.message;
				Иначе
					ОшибкаОбмена = "";
				КонецЕсли;
				СведенияОбОшибке = "Не удалось изменить адрес электронной почты" + ?(ПустаяСтрока(ОшибкаОбмена), ".", ": " + ОшибкаОбмена);
			КонецЕсли;
		Иначе
			СведенияОбОшибке = "Не удалось изменить адрес электронной почты: исключительная ошибка.";
		КонецЕсли;
	Исключение
		СведенияОбОшибке = "Не удалось изменить адрес электронной почты: сервер не отвечает." + Символы.ПС + "Проверьте настройки соединения.";
	КонецПопытки;
	
	Возврат EmailИзменен;
	
КонецФункции

////////////////////////////////
// Выгрузка данных по л/с.

// Выполняет выгрузку данных на сервер.
//
Процедура ВыполнитьВыгрузкуДанныхНаСервер(мHTTPСоединение, Токен, СведенияОбОшибке = "", ТаблицаЛицевыхСчетов = Неопределено, МесяцОбмена = Неопределено, ВыполняетсяВАвтоматическомРежиме = Ложь)
	
	МесяцВыбранВручную = Истина;
	
	Если МесяцОбмена = Неопределено Тогда
		МесяцОбмена        = ТекущаяДата();
		МесяцВыбранВручную = Ложь;
	КонецЕсли;
	
	ВыполнитьВыгрузкуДанныхПоЛС(мHTTPСоединение, Токен, СведенияОбОшибке, ТаблицаЛицевыхСчетов, МесяцОбмена, ВыполняетсяВАвтоматическомРежиме, МесяцВыбранВручную);
	
КонецПроцедуры

// Выполняет выгрузку на сайт основных учетных данных (начисления, показания по ПУ и пр.).
//
// Параметры:
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена.
//  Пароль - пароль доступа к админской части сайта.
//  НастройкиОбмена - текущие настройки доступа.
//
Процедура ВыполнитьВыгрузкуДанныхПоЛС(мHTTPСоединение, Токен, СведенияОбОшибке, ТаблицаЛицевыхСчетов, МесяцОбмена, ВыполняетсяВАвтоматическомРежиме = Ложь, МесяцВыбранВручную = Ложь)
	
	СведенияОбОшибке = "";
	
	ВыполненоБезОшибок = Истина;
	
	// Определяем максимальное количество л/с в файле обмена.
	НастройкиОбмена    = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьНастройкуАвтоматическогоОбменаСМобильнымПриложением();
	КоличествоЛСВФайле = НастройкиОбмена.КоличествоЛСВФайлеОбмена;
	
	// Если выгрузка выполняется автоматически или вручную без выбора месяца, то считаем, что обмен выполняется автоматически.
	// Это нужно для корректной работы выгрузки данных при окончании проведения начислений в следующем месяце.
	ИспользоватьПравилаАвтоматическогоОбмена = НЕ МесяцВыбранВручную;
	ПериодОбмена                             = ?(ИспользоватьПравилаАвтоматическогоОбмена, ?(НастройкиОбмена.МесяцОкончанияПроведенияНачислений = 0, МесяцОбмена, КонецМесяца(ДобавитьМесяц(МесяцОбмена, -1))), МесяцОбмена);
	СтруктураНастроек                        = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьСтруктурыНастроекКвитанций(ТаблицаЛицевыхСчетов, ПериодОбмена, СведенияОбОшибке);
	
	Если СтруктураНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек.СтруктураОбщихНастроек.Вставить("ОбменВыполняетсяАвтоматически", ИспользоватьПравилаАвтоматическогоОбмена);
	
	ТаблицаВсехЛС = СтруктураНастроек.СтруктураОбщихНастроек.ТаблицаОбъектовОбщ.Скопировать();
	
	СписокФайлов = Новый Массив;
	
	Если ТаблицаВсехЛС.Количество() = 0 Тогда
		
		СведенияОбОшибке = "Не удалось сформировать файл обмена: не обнаружено подходящих для выгрузки на сайт лицевых счетов.";
		
	Иначе
		
		НастройкиМногопоточности = УПЖКХ_МногопоточнаяОбработкаДанных.ПолучитьНастройкиМногопоточности();
		
		ИспользоватьМногопоточность = НастройкиМногопоточности.ИспользоватьМногопоточность;
		КоличествоПотоков           = НастройкиМногопоточности.КоличествоПотоков;
		
		// Многопоточная выгрузка.
		Если ИспользоватьМногопоточность И КоличествоПотоков > 1 Тогда
			
			// Подготавливаем массивы адресов во временных хранилищах,
			// где будут храниться результаты выполнения фоновых заданий.
			МассивАдресовСписковФайлов        = Новый Массив;
			МассивАдресовСтатусовВыполнения   = Новый Массив;
			
			ИмяМетода                         = "УПЖКХ_МногопоточнаяОбработкаДанных.ВыполнитьВыгрузкуДанныхПоЛСВФоновомЗаданииЖКХЛичныйКабинет";
			НаименованиеЗадания               = "(ЖКХ: Личный кабинет) Фоновая подготовка данных по лицевым счетам.";
			МассивНаборовДанныхФоновыхЗаданий = ПодготовитьМассивНаборовПараметровДляМногопоточнойОбработкиВыгрузкаДанныхПоЛСЖКХЛичныйКабинет(СтруктураНастроек, ТаблицаВсехЛС, МассивАдресовСписковФайлов, МассивАдресовСтатусовВыполнения, КоличествоЛСВФайле, КоличествоПотоков);
			// Запускаем фоновые задания и ожидаем их завершения.
			УПЖКХ_МногопоточнаяОбработкаДанных.ОбработатьМассивНаборовДанныхМногопоточно(ИмяМетода, НаименованиеЗадания, МассивНаборовДанныхФоновыхЗаданий);
			
			// После выполнения всех фоновых заданий объединяем все результаты и проверяем на наличие ошибок.
			Для Сч = 1 по МассивАдресовСтатусовВыполнения.Количество() Цикл
				
				ВыполненоБезОшибок = ПолучитьИзВременногоХранилища(МассивАдресовСтатусовВыполнения[Сч - 1]);
				
				Если ВыполненоБезОшибок = Истина Тогда
					
					ТекущийСписокФайлов = ПолучитьИзВременногоХранилища(МассивАдресовСписковФайлов[Сч - 1]);
					
					Для каждого ТекФайл из ТекущийСписокФайлов Цикл
						
						// Получаем имя временного файла.
						ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
						ТекФайл.Записать(ИмяВременногоФайла);
						
						СписокФайлов.Добавить(ИмяВременногоФайла);
					КонецЦикла;
					
				Иначе
					
					СведенияОбОшибке = "Не удалось сформировать файл обмена: неизвестный формат обмена.";
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			СформироватьДанныеПоЛС(СтруктураНастроек, ТаблицаВсехЛС, КоличествоЛСВФайле, СписокФайлов, СведенияОбОшибке, ВыполненоБезОшибок);
			
		КонецЕсли;
		
		Если ВыполненоБезОшибок Тогда
			
			ПоследнийЭтапВыгрузки = Ложь;
			КоличествоФайлов      = СписокФайлов.Количество();
			
			Если НЕ КоличествоФайлов = 0 Тогда
				
				Для НомерФайла = 1 по КоличествоФайлов Цикл
					
					Если НомерФайла = КоличествоФайлов Тогда
						ПоследнийЭтапВыгрузки = Истина;
					КонецЕсли;
					
					ФайлВыгрузки = СписокФайлов[НомерФайла - 1];
					
					Ответ = ПередатьДанныеНаСервис(ФайлВыгрузки, СведенияОбОшибке,, ПоследнийЭтапВыгрузки);
					
					Если НЕ Ответ = Истина Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.СоздатьЗаписьЖурналаРегистрации(СписокФайлов, СведенияОбОшибке,
																								  Перечисления.УПЖКХ_ВидыОбменаСМобильнымПриложением.ВыгрузкаДанныхПоЛС,,
																								  ВыполняетсяВАвтоматическомРежиме);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьВыгрузкуДанныхПоЛС()

// Выполняет формирование массива файлов обмена с данными по лицевым счетам.
//
Процедура СформироватьДанныеПоЛС(СтруктураНастроек, ТаблицаВсехЛС, КоличествоЛСВФайле, СписокФайлов, СведенияОбОшибке = "", ВыполняетсяУспешно = Истина) Экспорт
	
	// Подготавливаем массивы, в которых будут сохранены результаты обмена.
	СписокФайлов = Новый Массив;
	
	СведенияОбОшибке = "";
	
	// Подготавливаем данные и формируем файлы обмена.
	// При этом подготавливаем данные порциями и для каждой из них
	// формируем отдельный файл.
	Пока НЕ ТаблицаВсехЛС.Количество() = 0 И ВыполняетсяУспешно Цикл
		
		// Подготавливаем структуру настроек для текущей порции л/с.
		УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПодготовитьСтруктуруНастроекДляТекущейВыгрузки(СтруктураНастроек, ТаблицаВсехЛС, КоличествоЛСВФайле);
		УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьСтруктуруСДаннымиДляКвитанции(СтруктураНастроек);
		
		ФайлВыгрузки = СформироватьФайлXML(СтруктураНастроек);
		
		Если ФайлВыгрузки = Неопределено Тогда
			
			ВыполняетсяУспешно = Ложь;
			
			СведенияОбОшибке = "Не удалось сформировать файл обмена: неизвестный формат обмена.";
			
		КонецЕсли;
		
		СписокФайлов.Добавить(ФайлВыгрузки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНОЕ ЗАДАНИЕ

#Область РегламентноеЗадание

// Выполняет обмен с сервисом мобильного приложения по регламентному заданию.
//
Процедура ОбменСМобильнымПриложением(ВидОбмена) Экспорт
	
	Если ВидОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мHTTPСоединение = ПолучитьHTTPСоединение();
	Токен           = УПЖКХ_ВзаимодействиеССервисамиРарус.ТокенДляСоединенияССервисамиРарус();
	
	Если ВидОбмена = Перечисления.УПЖКХ_ВидыРегламентныхЗаданийИнтеграцииСМобильнымПриложением.ВыгрузкаДанныхПоЛицевымСчетаНаСервер Тогда
		ВыполнитьВыгрузкуДанныхНаСервер(мHTTPСоединение, Токен,,,, Истина);
	ИначеЕсли ВидОбмена = Перечисления.УПЖКХ_ВидыРегламентныхЗаданийИнтеграцииСМобильнымПриложением.ЗагрузкаПоказанийССервера
		  ИЛИ ВидОбмена = Перечисления.УПЖКХ_ВидыРегламентныхЗаданийИнтеграцииСМобильнымПриложением.ЗагрузкаОплатССервера Тогда
		ВыполнитьЗагрузкуДанныхССервера(мHTTPСоединение, Токен,, Истина, ВидОбмена);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////
// РАЗОВЫЙ ОБМЕН ДАННЫМИ

#Область РазовыйОбменДанными

// Выполняет разовый обмен данными.
//
Функция ВыполнитьРазовыйОбменДанными(СтруктураПараметров) Экспорт
	
	// Массив сообщений.
	МассивСообщений = Новый Массив;
	СведенияОбОшибке = "";
	
	мHTTPСоединение = ПолучитьHTTPСоединение();
	Токен           = УПЖКХ_ВзаимодействиеССервисамиРарус.ТокенДляСоединенияССервисамиРарус();
	
	// Если текущий период, то ВидПериодаРазовогоОбмена = 0.
	// Если выбранный период, то ВидПериодаРазовогоОбмена = 1.
	//
	Если СтруктураПараметров.ВидПериодаРазовогоОбмена = 0 Тогда
		
		// Выгружаем данные по л/с на сервер, если необходимо.
		Если СтруктураПараметров.ВыгружатьСведенияПоЛС Тогда
			
			Если СтруктураПараметров.УказатьЛицевыеСчета Тогда
				ВыполнитьВыгрузкуДанныхНаСервер(мHTTPСоединение, Токен, СведенияОбОшибке, СтруктураПараметров.ТаблицаЛицевыхСчетов);
			Иначе
				ВыполнитьВыгрузкуДанныхНаСервер(мHTTPСоединение, Токен, СведенияОбОшибке);
			КонецЕсли;
			
			Если НЕ СведенияОбОшибке = "" Тогда
				МассивСообщений.Добавить(СведенияОбОшибке);
			КонецЕсли;
			
		КонецЕсли;
		
		// Загружаем с сервера сведения о показаниях и оплатах, если необходимо.
		Если СтруктураПараметров.ЗагружатьПоказанияСчетчиков Тогда
			ВыполнитьЗагрузкуДанныхССервера(мHTTPСоединение, Токен, СведенияОбОшибке,, Перечисления.УПЖКХ_ВидыРегламентныхЗаданийИнтеграцииСМобильнымПриложением.ЗагрузкаПоказанийССервера);
		КонецЕсли;
		
		Если СтруктураПараметров.ЗагружатьОплаты Тогда
			ВыполнитьЗагрузкуДанныхССервера(мHTTPСоединение, Токен, СведенияОбОшибке,, Перечисления.УПЖКХ_ВидыРегламентныхЗаданийИнтеграцииСМобильнымПриложением.ЗагрузкаОплатССервера);
		КонецЕсли;
		
		Если НЕ СведенияОбОшибке = "" Тогда
			МассивСообщений.Добавить(СведенияОбОшибке);
		КонецЕсли;
		
	Иначе
		
		// При обмене по выбранному периоду доступна только выгрузка данных по л/с на сервер.
		// Загрузки с сервера не выполняются.
		Если СтруктураПараметров.ВыгружатьСведенияПоЛС Тогда
			Если СтруктураПараметров.УказатьЛицевыеСчета Тогда
				ВыполнитьВыгрузкуДанныхНаСервер(мHTTPСоединение, Токен, СведенияОбОшибке, СтруктураПараметров.ТаблицаЛицевыхСчетов, СтруктураПараметров.МесяцОбмена);
			Иначе
				ВыполнитьВыгрузкуДанныхНаСервер(мHTTPСоединение, Токен, СведенияОбОшибке,, СтруктураПараметров.МесяцОбмена);
			КонецЕсли;
			
			Если НЕ СведенияОбОшибке = "" Тогда
				МассивСообщений.Добавить(СведенияОбОшибке);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивСообщений;
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////
// PUSH-РАССЫЛКА

#Область PushРассылка

// Отправляет на сервер мобильного приложения данные о рассылке push-уведомлений.
//
Процедура ОтправитьРассылкуПушУведомлений(СтруктураРассылки) Экспорт
	
	СтрокаПередачи = СформироватьСтрокуПередачиРассылкиПушУведомлений(СтруктураРассылки);
	
	ПередатьДанныеРассылкиПушУведомлений(СтрокаПередачи, УПЖКХ_ВзаимодействиеССервисамиРарус.ТокенДляСоединенияССервисамиРарус());
	
КонецПроцедуры

// Формирует строку данных для передачи в теле https запроса.
//
Функция СформироватьСтрокуПередачиРассылкиПушУведомлений(СтруктураРассылки)
	
	ТекущаяДатаФормированияСтрокиПередачи = ТекущаяДата();
	
	Если СтруктураРассылки.ДатаНачалаРассылки <= ТекущаяДатаФормированияСтрокиПередачи Тогда
		КоличествоСекундЗадержки = 0;
	Иначе
		КоличествоСекундЗадержки = СтруктураРассылки.ДатаНачалаРассылки - ТекущаяДатаФормированияСтрокиПередачи;
	КонецЕсли;
	
	Если СтруктураРассылки.ДатаОкончанияРассылки = Дата(1,1,1)
	 ИЛИ СтруктураРассылки.ДатаОкончанияРассылки < ТекущаяДатаФормированияСтрокиПередачи
	 ИЛИ СтруктураРассылки.ДатаОкончанияРассылки < СтруктураРассылки.ДатаНачалаРассылки Тогда
		КоличествоСекундДействия = 0;
	ИначеЕсли КоличествоСекундЗадержки = 0 Тогда
		КоличествоСекундДействия = СтруктураРассылки.ДатаОкончанияРассылки - ТекущаяДатаФормированияСтрокиПередачи;
	Иначе
		КоличествоСекундДействия = СтруктураРассылки.ДатаОкончанияРассылки - СтруктураРассылки.ДатаНачалаРассылки;
	КонецЕсли;
	
	СтрокаПередачи = "&title=" + СтруктураРассылки.ЗаголовокСообщения
					+ "&text=" + СтруктураРассылки.ТекстСообщения
					+ "&start=" + КоличествоСекундЗадержки
					+ "&end=" + КоличествоСекундДействия;
	
	Возврат СтрокаПередачи;
	
КонецФункции

// Передает на сайт данные о рассылке push-уведомлений.
//
// Параметры:
//  ФайлВыгрузки - Строка - полный путь к файлу с данными.
//  ТипДанных - Строка - идентификатор передаваемых данных.
//  АдресСайта - Строка - адрес сайта.
//  Логин - Строка - логин доступа к админской части сайта.
//  Пароль - Строка - пароль доступа к админской части сайта.
//  ИННОрганизации - Строка - ИНН организации, на сайт которой передаем файл.
//  СведенияОбОшибке - Строка - сведения об ошибке.
//
// Возвращаемое значение:
//  Строка, Неопределено.
//
Процедура ПередатьДанныеРассылкиПушУведомлений(СтрокаПередачи, Токен, мHTTPСоединение = Неопределено, СведенияОбОшибке = "")
	
	Если мHTTPСоединение = Неопределено Тогда
		мHTTPСоединение = ПолучитьHTTPСоединение();
	КонецЕсли;
	
	Если Токен = "" Тогда
		Если НЕ ПолучитьТокенССервера(СведенияОбОшибке) Тогда
			Возврат;
		КонецЕсли;
		
		Токен = УПЖКХ_ВзаимодействиеССервисамиРарус.ТокенДляСоединенияССервисамиРарус();
	КонецЕсли;
	
	// Получаем ответ на запрос передачи данных.
	Попытка
		
		СтрокаПередачиСТокеном = СтрокаПередачи + "&token=" + Токен;
		Ответ                  = УПЖКХ_ВзаимодействиеССервисамиРарус.ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/l/advert/message", СтрокаПередачиСТокеном);
		
		СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПрочитатьJsonИзОтветаСервера(Ответ);
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
			Если СтруктураОтвета.success Тогда
				
				// Заглушка.
				СведенияОбОшибке = "Рассылка push-уведомлений выполнена успешно!";
				
			ИначеЕсли СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура") Тогда
				Если СтруктураОтвета.error.Свойство("code") И СтруктураОтвета.error.code = "104" Тогда
					Токен = ПолучитьТокенССервера(СведенияОбОшибке);
					Если НЕ Токен = Неопределено Тогда
						ПередатьДанныеРассылкиПушУведомлений(СтрокаПередачи, Токен, мHTTPСоединение);
					Иначе
						СведенияОбОшибке = "Не удалось разослать push-уведомления: исключительная ошибка.";
					КонецЕсли;
				ИначеЕсли СтруктураОтвета.error.Свойство("message") Тогда
					ОшибкаОбмена = СтруктураОтвета.error.message;
					СведенияОбОшибке = "Не удалось разослать push-уведомления" + ?(ПустаяСтрока(ОшибкаОбмена), ".", ": " + ОшибкаОбмена);
				КонецЕсли;
			Иначе
				СведенияОбОшибке = "Не удалось разослать push-уведомления: исключительная ошибка.";
			КонецЕсли;
		Иначе
			СведенияОбОшибке = "Не удалось разослать push-уведомления: исключительная ошибка.";
		КонецЕсли;
	Исключение
		СведенияОбОшибке = "Не удалось разослать push-уведомления: сервер не отвечает." + Символы.ПС + "Проверьте настройки соединения.";
	КонецПопытки;
	
КонецПроцедуры // ПередатьДанныеРассылкиПушУведомлений

#КонецОбласти

/////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ФАЙЛОВ ОБМЕНА

#Область ФормированиеФайловОбмена

////////////////////////////////
// Формирование файла выгрузки данных по л/с.

// Записывает данные во временный XML файл и возвращает имя сформированного файла.
//
// Параметры:
//  СтруктураВыгрузки - Структура - содержит выгружаемые данные.
//  НастройкаДоступа - текущая настройка доступа.
//  ОбновлятьПараметрыДоступа - булево - обновлять ли параметры доступа на сайте.
//
// Возвращаемое значение:
//  Строка - имя файла выгрузки.
//
Функция СформироватьФайлXML(СтруктураВыгрузкиВходящая)
	
	Если НЕ ЗначениеЗаполнено(СтруктураВыгрузкиВходящая) ИЛИ НЕ ТипЗнч(СтруктураВыгрузкиВходящая) = Тип("Структура") Тогда
		// Если неопределенное значение.
		Возврат Неопределено;
	КонецЕсли;
	
	// Получаем имя временного файла.
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ВыгружатьПерсональныеДанные = Истина;
	
	// Создаем XML файл.
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	
	// Записываем сведения об организации в элемент "org".
	ДокументDOM = Новый ДокументDOM("", "orgs");
	КорневойЭлемент = ДокументDOM.ЭлементДокумента;
	
	СведенияОФайле = СтруктураВыгрузкиВходящая.СтруктураОбщихНастроек.СведенияОФайле;
	
	УстановитьЗначениеАтрибута(КорневойЭлемент, "filedate", СведенияОФайле.filedate);
	УстановитьЗначениеАтрибута(КорневойЭлемент, "filetype", СведенияОФайле.filetype);
	УстановитьЗначениеАтрибута(КорневойЭлемент, "version",  СведенияОФайле.version);
	УстановитьЗначениеАтрибута(КорневойЭлемент, "ready",    СведенияОФайле.ready);
	
	Для каждого ТекОрганизация из СтруктураВыгрузкиВходящая.ТаблицаИндивидуальныхНастроек Цикл
		
		СтруктураВыгрузки = ТекОрганизация.СтруктураПараметров;
		
		Если СтруктураВыгрузки.accs.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаORG = ДокументDOM.СоздатьЭлемент("org");
		КорневойЭлемент.ДобавитьДочерний(ГруппаORG);
		
		УстановитьЗначениеАтрибута(ГруппаORG, "name",    СтруктураВыгрузки.name);
		УстановитьЗначениеАтрибута(ГруппаORG, "inn",     СтруктураВыгрузки.inn);
		УстановитьЗначениеАтрибута(ГруппаORG, "kpp",     СтруктураВыгрузки.kpp);
		УстановитьЗначениеАтрибута(ГруппаORG, "bank",    СтруктураВыгрузки.bank);
		УстановитьЗначениеАтрибута(ГруппаORG, "bik",     СтруктураВыгрузки.bik);
		УстановитьЗначениеАтрибута(ГруппаORG, "rs",      СтруктураВыгрузки.rs);
		УстановитьЗначениеАтрибута(ГруппаORG, "ks",      СтруктураВыгрузки.ks);
		УстановитьЗначениеАтрибута(ГруппаORG, "address", СтруктураВыгрузки.address);
		УстановитьЗначениеАтрибута(ГруппаORG, "phone",   СтруктураВыгрузки.phone);
		УстановитьЗначениеАтрибута(ГруппаORG, "email",   СтруктураВыгрузки.email);
		УстановитьЗначениеАтрибута(ГруппаORG, "site",    СтруктураВыгрузки.site);
		УстановитьЗначениеАтрибута(ГруппаORG, "additional_info_main",     СтруктураВыгрузки.additional_info_main);
		УстановитьЗначениеАтрибута(ГруппаORG, "additional_info_overhaul", СтруктураВыгрузки.additional_info_overhaul);
		УстановитьЗначениеАтрибута(ГруппаORG, "annotation_main",          СтруктураВыгрузки.annotation_main);
		УстановитьЗначениеАтрибута(ГруппаORG, "annotation_overhaul",      СтруктураВыгрузки.annotation_overhaul);
		
		// Ограничение периода ввода показаний.
		УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ЗаполнитьXMLСведенияОбОграниченииВводаПоказаний(СтруктураВыгрузки, ДокументDOM, ГруппаORG);
		
		// Настройки упрощенной АДС
		ЗаполнитьXMLСведенияОНастройкахУпрощеннойАДС(СтруктураВыгрузки, ДокументDOM, ГруппаORG);
		
		// Все поставщики.
		УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ЗаполнитьXMLСведениямиПоПоставщикам(СтруктураВыгрузки, ДокументDOM, ГруппаORG);
		
		// Дома.
		УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ЗаполнитьXMLСведениямиПоЗданиям(СтруктураВыгрузки, ДокументDOM, ГруппаORG);
		
		// Л/с.
		УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ЗаполнитьXMLСведениямиПоЛС(СтруктураВыгрузки, ДокументDOM, ГруппаORG);
		
		// Дополнительный период.
		УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ЗаполнитьXMLСведенияПоЛСЗаДополнительныйПериод(СтруктураВыгрузки, ДокументDOM, ГруппаORG);
		
	КонецЦикла;
	
	ЗаписьDOM = Новый ЗаписьDOM();
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	ЗаписьXML.Закрыть();
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

// Устанавливает значение атрибута.
//
Процедура УстановитьЗначениеАтрибута(РодительскийЭлемент, НазваниеАтрибута, ЗначениеАтрибута)
	
	УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.УстановитьЗначениеАтрибута(РодительскийЭлемент, НазваниеАтрибута, ЗначениеАтрибута);
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////
// ФОНОВЫЕ ЗАДАНИЯ

#Область ФоновыеЗадания

// Получает статистику с сервиса.
//
Процедура ПолучитьСправочныеСведенияССервера(АдресВременногоХранилища) Экспорт
	
	мHTTPСоединение = ПолучитьHTTPСоединение();
	Токен           = УПЖКХ_ВзаимодействиеССервисамиРарус.ТокенДляСоединенияССервисамиРарус();
	
	СведенияОбОшибке = "";
	
	СтруктураСтатистики = ПолучитьФайлССервера(Перечисления.УПЖКХ_ВидыОбменаСМобильнымПриложением.ЗагрузкаСтатистики, мHTTPСоединение, Токен, СведенияОбОшибке);
	
	Если ТипЗнч(СтруктураСтатистики) = Тип("Структура") Тогда
		
		Если НЕ СтруктураСтатистики.Свойство("IsSubscribed") Тогда
			СтруктураСтатистики.Вставить("IsSubscribed", Ложь);
		КонецЕсли;
		
		Если НЕ СтруктураСтатистики.Свойство("IsSubscriptionActive") Тогда
			СтруктураСтатистики.Вставить("IsSubscriptionActive", Ложь);
		КонецЕсли;
		
		Если НЕ СтруктураСтатистики.Свойство("NumberOfAccsBySubscription") Тогда
			СтруктураСтатистики.Вставить("NumberOfAccsBySubscription", 0);
		КонецЕсли;
		
		Если НЕ СтруктураСтатистики.Свойство("SubscriptionEndDate") Тогда
			СтруктураСтатистики.Вставить("SubscriptionEndDate", Дата("00010101"));
		КонецЕсли;
		
		Если НЕ СтруктураСтатистики.Свойство("NumberOfAccsTotal") Тогда
			СтруктураСтатистики.Вставить("NumberOfAccsTotal", УПЖКХ_ОбщегоНазначенияСервер.ПолучитьКоличествоЛСВБазе());
		КонецЕсли;
		
		Если НЕ СтруктураСтатистики.Свойство("msg") Тогда
			СтруктураСтатистики.Вставить("msg", Новый Массив);
		КонецЕсли;
		
		СтруктураСтатистики.Вставить("УдалосьПолучитьСведенияССервера", Истина);
		
	Иначе
		
		// Формируем статистику из базы.
		СтруктураСтатистики = Новый Структура;
		
		СтруктураСтатистики.Вставить("IsSubscribed",               Ложь);
		СтруктураСтатистики.Вставить("IsSubscriptionActive",       Ложь);
		СтруктураСтатистики.Вставить("NumberOfAccsBySubscription", 0);
		СтруктураСтатистики.Вставить("SubscriptionEndDate",        Дата("00010101"));
		СтруктураСтатистики.Вставить("NumberOfAccsTotal",          УПЖКХ_ОбщегоНазначенияСервер.ПолучитьКоличествоЛСВБазе());
		СтруктураСтатистики.Вставить("msg",                        Новый Массив);
		
		СтруктураСтатистики.Вставить("УдалосьПолучитьСведенияССервера", Ложь);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураСтатистики, АдресВременногоХранилища);
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////
// МНОГОПОТОЧНАЯ ОБРАБОТКА ДАННЫХ

#Область МногопоточныйОбменДанными

// Подготавливает массив наборов параметров для передачи в потоки.
//
Функция ПодготовитьМассивНаборовПараметровДляМногопоточнойОбработкиВыгрузкаДанныхПоЛСЖКХЛичныйКабинет(СтруктураНастроек, ТаблицаВсехЛС, МассивАдресовСписковФайлов, МассивАдресовСтатусовВыполнения, КоличествоЛСВФайле, КоличествоПотоков)
	
	// Подготавливаем количество л/с, распределяемое на каждый поток.
	КоличествоЛСОбщее   = ТаблицаВсехЛС.Количество();
	КоличествоЛСНаПоток = Цел(ТаблицаВсехЛС.Количество() / КоличествоПотоков);
	
	// Уже распределенное по потокам количество л/с.
	РаспределенноеКоличествоЛС = 0;
	
	// Таблица л/с, передаваемых в поток.
	ТаблицаЛСДляПотока = ТаблицаВсехЛС.СкопироватьКолонки();
	
	// Подготавливаем массивы адресов во временных хранилищах,
	// где будут храниться результаты выполнения фоновых заданий.
	МассивНаборовДанныхФоновыхЗаданий = Новый Массив;
	
	// Подготавливаем все потоки.
	Для Сч = 1 по КоличествоПотоков Цикл
		
		// В последний поток может быть передано на 1 л/с больше,
		// если общее количество не делится нацело.
		КоличествоЛСДляПотокаТекущее = ?(Сч = КоличествоПотоков, КоличествоЛСОбщее - РаспределенноеКоличествоЛС, КоличествоЛСНаПоток);
		
		Если КоличествоЛСДляПотокаТекущее = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		РаспределенноеКоличествоЛС = РаспределенноеКоличествоЛС + КоличествоЛСНаПоток;
		
		// Подготавливаем структуру настроек для л/с, распределенных на текущий поток.
		УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПодготовитьСтруктуруНастроекДляТекущейВыгрузки(СтруктураНастроек, ТаблицаВсехЛС, КоличествоЛСДляПотокаТекущее, ТаблицаЛСДляПотока);
		
		// Подготавливаем адреса во временном хранилище, куда будут сохранены результаты выполнения потока.
		АдресСпискаФайлов      = ПоместитьВоВременноеХранилище(Неопределено);
		АдресСтатусаВыполнения = ПоместитьВоВременноеХранилище(Неопределено);
		
		МассивАдресовСписковФайлов.Добавить(АдресСпискаФайлов);
		МассивАдресовСтатусовВыполнения.Добавить(АдресСтатусаВыполнения);
		
		// Подготавливаем параметры текущего потока.
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураНастроек));
		МассивПараметров.Добавить(ТаблицаЛСДляПотока.Скопировать());
		МассивПараметров.Добавить(КоличествоЛСВФайле);
		МассивПараметров.Добавить(АдресСпискаФайлов);
		МассивПараметров.Добавить(АдресСтатусаВыполнения);
		
		МассивНаборовДанныхФоновыхЗаданий.Добавить(МассивПараметров);
		
	КонецЦикла;
	
	Возврат МассивНаборовДанныхФоновыхЗаданий;
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////
// ФУНКЦИОНАЛ ОТЛАДКИ

#Область ФункционалОтладки

// Выполняет выгрузку на сервис существующего файла журнала обмена данными с "ЖКХ: Личный кабинет".
//
Процедура ВыполнитьПовторнуюВыгрузкуФайла(СтруктураОтбора) Экспорт
	
	// Инициализация переменных.
	СведенияОбОшибке          = "";
	СведенияОбОшибкеВременная = "";
	ВидОбмена                 = СтруктураОтбора.ВидОбмена;
	МассивФайлов              = Новый Массив;
	КоличествоУспешноПереданныхФайлов = 0;
	
	мHTTPСоединение = ПолучитьHTTPСоединение();
	Токен           = УПЖКХ_ВзаимодействиеССервисамиРарус.ТокенДляСоединенияССервисамиРарус();
	
	// Определение сведений о файле обмена и параметрах обмена, таких как номер версии и т.д.
	СтруктураСведенийОФайле = РегистрыСведений.УПЖКХ_ЖурналОбменаСМобильнымПриложением.ПолучитьСведенияОФайлеОбмена(СтруктураОтбора);
	
	Если НЕ СтруктураСведенийОФайле.СохраненныйФайл = Неопределено Тогда
		
		// Сохраняем файл.
		ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураСведенийОФайле.РасширениеФайла);
		СтруктураСведенийОФайле.СохраненныйФайл.Записать(ИмяФайла);
		
		// Если файл является zip-архивом, то распаковываем его и записываем имена файлов в массив.
		Если СтруктураСведенийОФайле.РасширениеФайла = "zip" Тогда
			
			Попытка
				
				КаталогВременныхФайлов = КаталогВременныхФайлов();
				
				ФайлАрхива = Новый ЧтениеZIPФайла(ИмяФайла);
				
				Для каждого ТекЗапакованныйАрхива из ФайлАрхива Цикл
					МассивФайлов.Добавить(КаталогВременныхФайлов + ТекЗапакованныйАрхива.Имя);
				КонецЦикла;
				
				ФайлАрхива.ИзвлечьВсе(КаталогВременныхФайлов);
				
				Если МассивФайлов.Количество() = 0 Тогда
					ВызватьИсключение "архив не содержит файлов обмена.";
				КонецЕсли;
				
			Исключение
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось открыть файл: " + ОписаниеОшибки());
			КонецПопытки;
			
		// Если файл не является архивом, добавляем его в массив файлов.
		Иначе
			
			МассивФайлов.Добавить(ИмяФайла);
			
		КонецЕсли;
		
		// Передаем файлы на сайт.
		Для каждого ТекФайл из МассивФайлов Цикл
			
			Ответ = ПередатьДанныеНаСервис(ТекФайл, СведенияОбОшибкеВременная, Истина);
			
			Если Ответ = Истина Тогда
				КоличествоУспешноПереданныхФайлов = КоличествоУспешноПереданныхФайлов + 1;
			Иначе
				СведенияОбОшибке = СведенияОбОшибке + "
				|Не выполнена передача файла:" + ТекФайл + "
				|Описание ошибки:" + СведенияОбОшибкеВременная;
			КонецЕсли;
			
		КонецЦикла;
		
		// Сообщаем о результатах.
		СообщениеОРезультате = "Количество успешно переданных файлов:" + Строка(КоличествоУспешноПереданныхФайлов) + " из " + Строка(МассивФайлов.Количество()) + СведенияОбОшибке;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СообщениеОРезультате);
		
		// Создаем запись по результатам обмена.
		УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.СоздатьЗаписьЖурналаРегистрации(МассивФайлов, СведенияОбОшибке,
																									  Перечисления.УПЖКХ_ВидыОбменаСМобильнымПриложением.ПовторнаяВыгрузкаДанныхПоЛС,,
																									  Ложь);
		
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не обнаружен файл обмена.");
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет загрузку в базу данных из существующего файла журнала обмена данными с "ЖКХ: Личный кабинет".
//
Процедура ВыполнитьПовторнуюЗагрузкуФайла(СтруктураОтбора) Экспорт
	
	// Инициализация переменных.
	СведенияОбОшибке = "";
	
	// Определение сведений о файле обмена и параметрах обмена, таких как номер версии и т.д.
	СтруктураСведенийОФайле = РегистрыСведений.УПЖКХ_ЖурналОбменаСМобильнымПриложением.ПолучитьСведенияОФайлеОбмена(СтруктураОтбора);
	
	Если НЕ СтруктураСведенийОФайле.СохраненныйФайл = Неопределено Тогда
		
		// Сохраняем файл.
		ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураСведенийОФайле.РасширениеФайла);
		СтруктураСведенийОФайле.СохраненныйФайл.Записать(ИмяФайла);
		
		ВидОбменаСохраненнойЗаписи = СтруктураСведенийОФайле.ВидОбмена;
		ВидОбмена                  = Перечисления.УПЖКХ_ВидыОбменаСМобильнымПриложением.ПовторнаяЗагрузкаПоказанийПУ;
		
		Если ВидОбменаСохраненнойЗаписи = Перечисления.УПЖКХ_ВидыОбменаСМобильнымПриложением.ЗагрузкаОплат ИЛИ ВидОбменаСохраненнойЗаписи = Перечисления.УПЖКХ_ВидыОбменаСМобильнымПриложением.ПовторнаяЗагрузкаОплат Тогда
			ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаСМобильнымПриложением.ПовторнаяЗагрузкаОплат;
		КонецЕсли;
		
		ВыполнитьЗагрузкуДанныхССервиса(ВидОбмена, Неопределено, Неопределено, СведенияОбОшибке, Ложь, ИмяФайла, Ложь);
		
		Если ПустаяСтрока(СведенияОбОшибке) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Ошибок не обнаружено");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СведенияОбОшибке);
		КонецЕсли;
		
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не обнаружен файл обмена.");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОТПРАВКИ HTTP-ЗАПРОСОВ НА СЕРВИС "ЖКХ: ЛИЧНЫЙ КАБИНЕТ"

#Область ФункцииОтправкиHTTPЗапросовНаСервисЖКХЛичныйКабинет

// Функция отправки стандартных GET-запросов на сервис "ЖКХ: Личный кабинет".
//
Функция ОтправитьGETЗапросНаСервис(мHTTPСоединение, ТекстЗапроса)
	
	Возврат УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ОтправитьGETЗапрос(мHTTPСоединение, УПЖКХ_ВзаимодействиеССервисамиРарус.ПолучитьЗаголовкиДляHTTPЗапроса(мHTTPСоединение), ТекстЗапроса);
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////
// НАСТРОЙКИ УПРОЩЕННОЙ АДС

#Область НастройкиУпрощеннойАДС

// Заполняет XML-документ сведениями о настройках упрощенной АДС
//
// Параметры:
//  СтруктураВыгрузки	 - Структура	 - Структура с данными для выгрузки в файл
//  ДокументDOM			 - ДокументDOM	 - XML для выгрузки
//  КорневойЭлементDOM	 - ЭлементDOM	 - Корневой элемент DOM
//
Процедура ЗаполнитьXMLСведенияОНастройкахУпрощеннойАДС(СтруктураВыгрузки, ДокументDOM, КорневойЭлементDOM)
	
	Если СтруктураВыгрузки.Свойство("appeal_settings") Тогда
		
		ГруппаНастроекУпрощеннойАДС = ДокументDOM.СоздатьЭлемент("appeal_settings");
		КорневойЭлементDOM.ДобавитьДочерний(ГруппаНастроекУпрощеннойАДС);
		
		УстановитьЗначениеАтрибута(ГруппаНастроекУпрощеннойАДС, "email", СтруктураВыгрузки.appeal_settings.email);
		УстановитьЗначениеАтрибута(ГруппаНастроекУпрощеннойАДС, "topics", СтруктураВыгрузки.appeal_settings.topics);
		
		Если СтруктураВыгрузки.appeal_settings.free_topic Тогда
			УстановитьЗначениеАтрибута(ГруппаНастроекУпрощеннойАДС, "free_topic", "Y");
		Иначе
			УстановитьЗначениеАтрибута(ГруппаНастроекУпрощеннойАДС, "free_topic", "N");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

