////////////////////////////////////////////////////////////////////////////////
// СотрудникиФормыБазовый: методы, обслуживающие работу формы сотрудника.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийФормыСотрудника

Процедура СотрудникиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	
	СозданиеНового = Параметры.Ключ.Пустая();
	Форма.СозданиеНового = СозданиеНового;
	
	Если СозданиеНового Тогда
		
		Форма.ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
		
		Форма.ЦветСтиляПоясняющийТекст			= ЦветаСтиля.ПоясняющийТекст;
		Форма.ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
		Форма.ЦветСтиляЦветТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
		
		Форма.ДоступенПросмотрДанныхДляНачисленияЗарплаты = Пользователи.РолиДоступны("ЧтениеДанныхДляНачисленияЗарплаты,ДобавлениеИзменениеДанныхДляНачисленияЗарплаты");
	
		Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
		Форма.ДоступенПросмотрДанныхФизическихЛиц = Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц
			ИЛИ Пользователи.РолиДоступны("ЧтениеДанныхФизическихЛицЗарплатаКадры");
			
		СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
		
	КонецЕсли;
	
	Форма.РасчетЗарплатыДляНебольшихОрганизаций = ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций");
	
	ЗаданоФизическоеЛицо = Ложь;
	
	// Открытие форму существующего сотрудника.
	Если НЕ СозданиеНового Тогда
		
		Форма.ФизическоеЛицоСсылка  = Форма.Сотрудник.ФизическоеЛицо;

	// Создание сотрудника из формы физического лица.
	ИначеЕсли Параметры.Свойство("ФизическоеЛицо") 
		И ЗначениеЗаполнено(Параметры.ФизическоеЛицо) Тогда
		
		// Возможно получение ссылки на физлицо через параметр формы.
		Форма.ФизическоеЛицоСсылка = Параметры.ФизическоеЛицо;
		ЗаданоФизическоеЛицо = Истина;
		
	// Создание сотрудника путем копирования существующего.
	ИначеЕсли ЗначениеЗаполнено(Форма.Сотрудник.ФизическоеЛицо) Тогда
		
		ЗаданоФизическоеЛицо = Истина;
		Форма.ФизическоеЛицоСсылка  = Форма.Сотрудник.ФизическоеЛицо;
		
	// Просто создание сотрудника
	Иначе
		
		// ссылка для нового физлица
		Форма.ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку();
		Форма.ФизическоеЛицо.ФИО = Форма.Сотрудник.Наименование;
		
	КонецЕсли;
	
	// Если форма нового сотрудника.
	Если СозданиеНового Тогда 
		
		Если Форма.ИспользоватьКадровыйУчет Тогда
			
			Форма.ДатаПриема = '00010101000000';
			
			Если Форма.Параметры.Свойство("ГоловнаяОрганизация") Тогда
				Форма.Сотрудник.ГоловнаяОрганизация = Форма.Параметры.ГоловнаяОрганизация;
			ИначеЕсли Форма.Параметры.Свойство("ТекущаяОрганизация") Тогда
				Форма.Сотрудник.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Форма.Параметры.ТекущаяОрганизация);
			ИначеЕсли Форма.Параметры.ЗначенияЗаполнения.Свойство("ТекущаяОрганизация") Тогда
				Форма.Сотрудник.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Форма.Параметры.ЗначенияЗаполнения.ТекущаяОрганизация);
			КонецЕсли; 
			
		Иначе
			
			// Если создаем нового сотрудника, то заполняем дату приема текущей датой.
			Если НЕ ЗначениеЗаполнено(Форма.ДатаПриема) Тогда
				Форма.ДатаПриема = ТекущаяДатаСеанса();
			КонецЕсли;
			
		КонецЕсли; 
		
		Форма.СотрудникСсылка = Справочники.Сотрудники.ПолучитьСсылку();
		
		Если ЗаданоФизическоеЛицо Тогда
			
			СотрудникиФормы.ПрочитатьДанныеСвязанныеССотрудником(Форма);
			
			УточнениеНаименованияФизическогоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ФизическоеЛицоСсылка, "УточнениеНаименования");
			Форма.Сотрудник.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
				Форма.ФИОФизическихЛиц.Фамилия, 
				Форма.ФИОФизическихЛиц.Имя, 
				Форма.ФИОФизическихЛиц.Отчество, 
				УточнениеНаименованияФизическогоЛица,
				Форма.Сотрудник.УточнениеНаименования);
			
		Иначе
			
			Форма.ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку();
			
			// Если это форма нового объекта - инициализация реквизитов формы, 
			// предназначенных для редактирования дополнительных
			// данных (помимо основного редактируемого объекта).
			РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ФИОФизическихЛиц", Форма.ФизическоеЛицоСсылка);
			РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка);			
			
			СотрудникиФормы.ФизическиеЛицаОбновитьЭлементыФормы(Форма);
			
		КонецЕсли;
		
		СотрудникиКлиентСервер.УстановитьВидЗанятостиНовогоСотрудника(Форма);
		СотрудникиФормы.ИнициализироватьТекущиеДанныеСотрудника(Форма);
		
	Иначе
		
		Форма.СотрудникСсылка = Форма.Сотрудник.Ссылка;
		Форма.ФизическоеЛицоСсылка  = Форма.Сотрудник.ФизическоеЛицо;
		
	КонецЕсли;
	
	ДополнитьФормуСотрудника(Форма, "ДругиеРабочиеМеста");
	
	Если СозданиеНового Тогда
		
		СотрудникиФормы.ЗаполнитьПервоначальныеЗначения(Форма);
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			
			ОрганизацияЗадана = Истина;
			
			Если Форма.ИспользоватьКадровыйУчет Тогда
				ОрганизацияЗадана =  ЗначениеЗаполнено(Форма.Сотрудник.ГоловнаяОрганизация);
			Иначе
				ОрганизацияЗадана = ЗначениеЗаполнено(Форма.ТекущаяОрганизация);
			КонецЕсли;
			
			Если Не ОрганизацияЗадана Тогда
				ВызватьИсключение НСтр("ru='Необходимо ввести сведения об организации'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ИспользоватьКадровыйУчет И ЗначениеЗаполнено(Форма.Сотрудник.ГоловнаяОрганизация) Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.Найти("ФИО");
	КонецЕсли; 
	
	Форма.СотрудникНаименование = СотрудникиКлиентСервер.ПредставлениеСотрудникаПоДаннымФормыСотрудника(Форма);
	
	Если Форма.Параметры.Свойство("РежимОткрытияОкна") 
		И ЗначениеЗаполнено(Форма.Параметры.РежимОткрытияОкна) Тогда
		Форма.РежимОткрытияОкна = Форма.Параметры.РежимОткрытияОкна;
	КонецЕсли; 
	
	Если Форма.ДоступенПросмотрДанныхДляНачисленияЗарплаты Тогда
		
		Если Форма.ИспользоватьКадровыйУчет Тогда
			
			СотрудникиФормы.УстановитьОтображениеСпособовРасчетаАванса(Форма);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ГруппаАванс",
				"Видимость",
				Ложь);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ПлановыйАванс",
				"Видимость",
				Ложь);
			
			СотрудникиФормы.ПрочитатьРазмерАвансаПоУмолчанию(Форма);
			
			Если СозданиеНового
				И НЕ ЗначениеЗаполнено(Форма.ТекущийАванс) Тогда
				
				СотрудникиФормы.УстановитьСпособРасчетаАвансаПоУмолчанию(Форма);
				Если Не ЗначениеЗаполнено(Форма.ТекущийСпособРасчетаАванса) Тогда
					Форма.ТекущийСпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.ПроцентомОтТарифа;
				КонецЕсли; 
				
				Если Форма.ТекущийСпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.ПроцентомОтТарифа
					И Форма.ТекущийАванс = 0 Тогда
					Форма.ТекущийАванс = Форма.РазмерАвансаВПроцентахПоУмолчанию;
				КонецЕсли;
				
			КонецЕсли; 
			
			РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(Форма, "ТекущийСпособРасчетаАванса");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СотрудникиПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Форма.ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Форма.ЦветСтиляПоясняющийТекст			= ЦветаСтиля.ПоясняющийТекст;
	Форма.ЦветСтиляПоясняющийОшибкуТекст	= ЦветаСтиля.ПоясняющийОшибкуТекст;
	Форма.ЦветСтиляЦветТекстаПоля			= ЦветаСтиля.ЦветТекстаПоля;
	
	Форма.ДоступенПросмотрДанныхДляНачисленияЗарплаты = Пользователи.РолиДоступны("ЧтениеДанныхДляНачисленияЗарплаты,ДобавлениеИзменениеДанныхДляНачисленияЗарплаты");
	
	Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	Форма.ДоступенПросмотрДанныхФизическихЛиц = Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц
		ИЛИ Пользователи.РолиДоступны("ЧтениеДанныхФизическихЛицЗарплатаКадры");
		
	Форма.ФизическоеЛицоСсылка = ТекущийОбъект.ФизическоеЛицо;
	Форма.СотрудникСсылка = ТекущийОбъект.Ссылка;
	
	Форма.СотрудникЗаблокированВДругойФорме = Ложь;
	Форма.ФизическоеЛицоЗаблокированоВДругойФорме = Ложь;
	
	СотрудникиФормы.ПрочитатьДанныеСвязанныеССотрудником(Форма);
	
	// Элемент ВАрхиве показываем для новых сотрудников.
	Форма.Элементы.ВАрхиве.Видимость = Истина;
	
КонецПроцедуры

Процедура СотрудникиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если НЕ Форма.Параметры.Ключ.Пустая() Тогда
		СотрудникиФормы.ЗаписатьФизическоеЛицоСотрудника(Форма);
	КонецЕсли; 
	
	ЗаписатьТекущиеДанные(Форма, ТекущийОбъект);
	СотрудникиФормы.ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, Форма.ФизическоеЛицоСсылка, Форма.ТекущаяОрганизация);
	
	Если Форма.ГражданствоФизическихЛицПрежняя = Неопределено Тогда
		
			РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(
				Форма,
				"ГражданствоФизическихЛиц",
				Форма.ФизическоеЛицоСсылка);
			
	КонецЕсли; 
	
	Если Форма.ДокументыФизическихЛицПрежняя = Неопределено Тогда
		
		ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
		
	КонецЕсли; 
		
КонецПроцедуры

Процедура СотрудникиОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ФОИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	Если НЕ Форма.ИспользоватьКадровыйУчет И ФОИспользоватьНачислениеЗарплаты Тогда
		
		Если ЗначениеЗаполнено(Форма.ТекущаяОрганизация) Тогда
			
			Если ЗначениеЗаполнено(Форма.ДатаУвольнения) Тогда
				
				Если Форма.ДатаУвольнения <= Форма.ДатаПриема Тогда
					
					ТекстСообщения = НСтр("ru='Дата увольнения не может быть меньше или равна дате приема на работу'");
					ОбщегоНазначения.СообщитьПользователю(
						ТекстСообщения,
						,
						"ДатаУвольнения",
						,
						Отказ);
					
				ИначеЕсли НЕ ЗначениеЗаполнено(Форма.ДатаПриема) Тогда
					
					ТекстСообщения = НСтр("ru='Необходимо заполнить дату приема на работу'");
					ОбщегоНазначения.СообщитьПользователю(
						ТекстСообщения,
						,
						"ДатаПриема",
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Форма.ДатаПриема) Тогда
				ЗарплатаКадры.ПроверитьКорректностьДаты(Форма.СотрудникСсылка, Форма.ДатаПриема, "ДатаПриема", Отказ, НСтр("ru='Дата приема'"), '19800101');
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Форма.ДатаПриема)
				И НЕ ЗначениеЗаполнено(Форма.ТекущийВидЗанятости) Тогда
				
				ТекстСообщения = НСтр("ru='Не заполнен Вид занятости'");
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					,
					"ТекущийВидЗанятости",
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ФизическоеЛицоЗаблокировано И ПравоДоступа("Изменение", Метаданные.Справочники.ФизическиеЛица) Тогда
		
		СотрудникиФормы.ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, Форма.ФизическоеЛицоСсылка, Отказ);
		
		ФизическоеЛицоОбъект = Форма.РеквизитФормыВЗначение("ФизическоеЛицо");
		Если НЕ ФизическоеЛицоОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФОИспользоватьНачислениеЗарплаты 
		И НЕ Форма.ИспользоватьКадровыйУчет Тогда
		
		СообщениеПроверкиВидЗанятости = СотрудникиФормы.СообщениеОКонфликтеВидаЗанятостиНовогоСотрудникаССуществующими(Форма.СотрудникСсылка, Форма.ФизическоеЛицоСсылка, Форма.ТекущаяОрганизация, Форма.ТекущийВидЗанятости, Форма.ДатаПриема);
		Если Не ПустаяСтрока(СообщениеПроверкиВидЗанятости) Тогда
			ОбщегоНазначения.СообщитьПользователю(СообщениеПроверкиВидЗанятости,,"ТекущийВидЗанятости", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормыФизическогоЛица

Процедура ФизическиеЛицаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Перем ИмяТекущегоЭлемента;
	
	Форма.СозданиеНового = Форма.Параметры.Ключ.Пустая();
	
	Если Форма.СозданиеНового Тогда
		
		Форма.ЦветСтиляПоясняющийТекст			= ЦветаСтиля.ПоясняющийТекст;
		Форма.ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
		Форма.ЦветСтиляЦветТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
		
		Форма.ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку();
		Форма.ФизическоеЛицо.ФИО = Форма.ФизическоеЛицо.Наименование;
		
		// Если это форма нового объекта - инициализация реквизитов формы, 
		// предназначенных для редактирования дополнительных
		// данных (помимо основного редактируемого объекта).
		Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
		Форма.ДоступенПросмотрДанныхФизическихЛиц = Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц
			ИЛИ Пользователи.РолиДоступны("ЧтениеДанныхФизическихЛицЗарплатаКадры");
		
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ФИОФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ГражданствоФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		
		СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
		СотрудникиКлиентСервер.УстановитьВидимостьГруппыФамилияИмяЛатиницей(Форма, "ДокументыФизическихЛиц");
		
		ЗаполнитьПервоначальныеЗначенияФизическогоЛица(Форма);
		
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ТекущийЭлемент", ИмяТекущегоЭлемента) Тогда
		ТекущийЭлемент = Форма.Элементы[ИмяТекущегоЭлемента];
	КонецЕсли;	
	
	СотрудникиФормы.ОбновитьОтображениеПредупреждающихНадписей(Форма);
	
	// Позиционирование на элементах формы
	// см. ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуСотрудникаНаРеквизите
	// см. ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуВладельцаЭЦПНаРеквизите.
	
	Если Форма.Параметры.Свойство("ИмяРеквизита") И Не ПустаяСтрока(Форма.Параметры.ИмяРеквизита) Тогда
		
		ИмяРеквизита = "";
		ИмяТекущейСтраницы = "";
		Если Форма.Параметры.ИмяРеквизита = "ФИО" Тогда
			ИмяРеквизита = "ФИО";
		ИначеЕсли Форма.Параметры.ИмяРеквизита = "СНИЛС" Тогда
			ИмяРеквизита = "ФизлицоСтраховойНомерПФР";
		ИначеЕсли Форма.Параметры.ИмяРеквизита = "АдресРегистрации" Тогда
			ИмяТекущейСтраницы = "ГруппаКонтактнаяИнформация";
		ИначеЕсли Форма.Параметры.ИмяРеквизита = "Телефон" Тогда
			ИмяТекущейСтраницы = "ГруппаКонтактнаяИнформация";
		КонецЕсли;
		
		Если Не ПустаяСтрока(ИмяТекущейСтраницы) Тогда
			
			ТекущаяСтраница = Форма.Элементы.Найти(ИмяТекущейСтраницы);
			Если ТекущаяСтраница <> Неопределено Тогда
				Форма.Элементы.Страницы.ТекущаяСтраница = ТекущаяСтраница;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ИмяРеквизита) Тогда
			
			ТекущийЭлемент = Форма.Элементы.Найти(ИмяРеквизита);
			Если ТекущийЭлемент <> Неопределено Тогда
				Форма.ТекущийЭлемент = ТекущийЭлемент;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизическиеЛицаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Форма.ЦветСтиляПоясняющийТекст			= ЦветаСтиля.ПоясняющийТекст;
	Форма.ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
	Форма.ЦветСтиляЦветТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
	
	Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	Форма.ДоступенПросмотрДанныхФизическихЛиц = Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц
		ИЛИ Пользователи.РолиДоступны("ЧтениеДанныхФизическихЛицЗарплатаКадры");
	
	Форма.ФизическоеЛицоСсылка  = Форма.ФизическоеЛицо.Ссылка;
	СотрудникиФормы.ПрочитатьДанныеСвязанныеСФизлицом(Форма, Форма.ДоступенПросмотрДанныхФизическихЛиц);
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(Форма, "ГражданствоФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		Если ЗначениеЗаполнено(Форма.ГражданствоФизическихЛиц.Страна) Тогда
			Форма.ГражданствоФизическихЛицЛицоБезГражданства = 0;
		Иначе
			Форма.ГражданствоФизическихЛицЛицоБезГражданства = 1;
		КонецЕсли;
		СотрудникиКлиентСервер.ОбновитьДоступностьПолейВводаГражданства(Форма, ТекущаяДатаСеанса());
		
		ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.ФизическоеЛицо.УточнениеНаименования) Тогда
		Форма.ДополнятьПредставление = Ложь;
	Иначе
		Форма.ДополнятьПредставление = Истина;
	КонецЕсли;
	
	СотрудникиКлиентСервер.УстановитьДоступностьУточненияНаименования(Форма);
		
КонецПроцедуры

Процедура ФизическиеЛицаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Перем ДополнительныеСвойства;
	
	ДоступноДобавлениеИзменениеДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	
	Если Форма.СозданиеНового Тогда
		
		ДополнительныеСвойства = Новый Структура;
		ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
		ГражданствоПоУмолчанию =
			НЕ ДоступноДобавлениеИзменениеДанныхФизическихЛиц ИЛИ Форма.ГражданствоФизическихЛиц.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
			
		СотрудникиФормы.ЗаписатьЗначенияПоУмолчанию(Форма.ФизическоеЛицоСсылка, ГражданствоПоУмолчанию);
		
	КонецЕсли;
	
	СотрудникиФормы.ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, Форма.ФизическоеЛицоСсылка);
	Если ДоступноДобавлениеИзменениеДанныхФизическихЛиц Тогда
		
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			Форма,
			"ГражданствоФизическихЛиц",
			Форма.ФизическоеЛицоСсылка,
			,
			ДополнительныеСвойства);
			
		ЗаписатьЗаписьДокументыФизическихЛицПослеРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизическиеЛицаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Форма.СозданиеНового = Ложь;
	
	СотрудникиФормы.ПрочитатьДанныеСвязанныеСФизлицом(Форма, Форма.ДоступенПросмотрДанныхФизическихЛиц);
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(Форма, "ГражданствоФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		Если ЗначениеЗаполнено(Форма.ГражданствоФизическихЛиц.Страна) Тогда
			Форма.ГражданствоФизическихЛицЛицоБезГражданства = 0;
		Иначе
			Форма.ГражданствоФизическихЛицЛицоБезГражданства = 1;
		КонецЕсли;
		СотрудникиКлиентСервер.ОбновитьДоступностьПолейВводаГражданства(Форма, ТекущаяДатаСеанса());
		
		ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиМодулейОбъектаИМенеджера

Процедура ОбработкаПолученияДанныхВыбора(РезультатЗапроса, ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Перем Организация;
	Перем ГоловнаяОрганизация;
	
	Если РезультатЗапроса <> Неопределено И Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеВыбора = Новый СписокЗначений;
		СтандартнаяОбработка = Ложь;
		ДлинаСтрокиПоиска = СтрДлина(Параметры.СтрокаПоиска);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.Период) Тогда
				
				Представление = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(
						Лев(Выборка.ФИО, ДлинаСтрокиПоиска),
						Новый Шрифт( , , Истина),
						WebЦвета.Зеленый),
					Сред(Выборка.ФИО, ДлинаСтрокиПоиска + 1),
					?(ПустаяСтрока(Выборка.УточнениеНаименования), "", " " + Выборка.УточнениеНаименования));
				
				Если ЗначениеЗаполнено(Выборка.Фамилия) Тогда
					ФИОТекущее = Новый Структура("Фамилия,Имя,Отчество");
					ЗаполнитьЗначенияСвойств(ФИОТекущее, Выборка);
				Иначе
					ФИОТекущее = Выборка.ФИОТекущее;
				КонецЕсли;
				
				Представление = Новый ФорматированнаяСтрока(
					Представление,
					" (" + ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(ФИОТекущее) + " " 
						+ НСтр("ru='с'") + " " + Формат(Выборка.Период, "ДЛФ=D") + " (" + Выборка.Код + "))");
				
			Иначе
				
				Представление = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(
						Лев(Выборка.Наименование, ДлинаСтрокиПоиска),
						Новый Шрифт( , , Истина),
						WebЦвета.Зеленый),
					Сред(Выборка.Наименование, ДлинаСтрокиПоиска + 1) + " (" + Выборка.Код + ")");
				
			КонецЕсли;
			
			ДанныеВыбора.Добавить(Выборка.Сотрудник, Представление, Выборка.ПометкаУдаления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры.Отбор.Свойство("ТекущаяОрганизация", Организация);
	Параметры.Отбор.Свойство("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(ГоловнаяОрганизация);
		Параметры.Отбор.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Иначе
		Параметры.Отбор.Удалить("ГоловнаяОрганизация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Параметры.Отбор.Удалить("ТекущаяОрганизация");
	КонецЕсли;
	
	Параметры.Отбор.Удалить("ТекущееПодразделение");
	
	Если Организация <> НеОпределено Тогда
		// Если есть отбор по текущей организации - отрабатываем особенным образом.
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		
		ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
		
		Если ФОИспользоватьКадровыйУчет Тогда
			
			ЗапросТекст =
			"ВЫБРАТЬ *
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
			|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковИнтервальный.Сотрудник
			|			И (КадроваяИсторияСотрудниковИнтервальный.ДатаНачала В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					Т.ДатаНачала
			|				ИЗ
			|					РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК Т
			|				ГДЕ
			|					Сотрудники.Ссылка = Т.Сотрудник
			|					И &МаксимальнаяДатаНачалоДня МЕЖДУ Т.ДатаНачала И Т.ДатаОкончания
			|				УПОРЯДОЧИТЬ ПО
			|					Т.ДатаНачала УБЫВ))
			|ГДЕ
			|	ЕСТЬNULL(КадроваяИсторияСотрудниковИнтервальный.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
			|	И &ДополнительноеУсловие";
			
			Запрос.УстановитьПараметр("МаксимальнаяДатаНачалоДня", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
			
		Иначе
			
			ЗапросТекст =
				"ВЫБРАТЬ *
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
				|		ПО (ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка)
				|			И (ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
				|ГДЕ
				|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
				|	И &ДополнительноеУсловие";
			
		КонецЕсли;
		
		Если Параметры.Свойство("ДоступныНепринятые")
			И Параметры.ДоступныНеПринятые Тогда
			
			Если ЗначениеЗаполнено(Организация) Тогда
				
				ЗапросТекст = СтрЗаменить(ЗапросТекст, "&ДополнительноеУсловие",
					"Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация
					|	И &ДополнительноеУсловие");
				Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
				
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
			
		Иначе
			
			Если ФОИспользоватьКадровыйУчет Тогда
				
				Если Организация = НеОпределено Тогда
					
					ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(КадроваяИсторияСотрудниковИнтервальный.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
						|	И ", "");
					
				ИначеЕсли ТипЗнч(Организация) = Тип("Массив") Тогда
					
					ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(КадроваяИсторияСотрудниковИнтервальный.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
						|	И ", "ЕСТЬNULL(КадроваяИсторияСотрудниковИнтервальный.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) В (&Организация)
						|	И ");
					
				КонецЕсли;
				
			Иначе
				
				Если Организация = НеОпределено Тогда
					
					ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
						|	И ", "");
					
				ИначеЕсли ТипЗнч(Организация) = Тип("Массив") Тогда
					
					ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
						|	И ", "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) В (&Организация)
						|	И ");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = ЗапросТекст;
		
		Если ЗначениеЗаполнено(ДанныеВыбора) И ДанныеВыбора.Количество() > 0 Тогда
			ИспользоватьДанныеВыбора = Истина;
		Иначе
			ИспользоватьДанныеВыбора = Ложь;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеВыбора) И ДанныеВыбора.Количество() > 0 Тогда
		
		ИспользоватьДанныеВыбора = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ *
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	(ИСТИНА)
			|	И &ДополнительноеУсловие";
		
	КонецЕсли;
	
	Если Не СтандартнаяОбработка Тогда
		ЗарплатаКадры.ЗаполнитьДанныеВыбораСправочника(ДанныеВыбора, Метаданные.Справочники.Сотрудники, Параметры, Запрос, "Сотрудники", ИспользоватьДанныеВыбора);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаСписка" Тогда
		ВыбраннаяФорма = "ФормаСписка";
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		ВыбраннаяФорма = "ФормаСписка";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбраннаяФорма) Тогда
		
		СтандартнаяОбработка = Ложь;
		Если Не Параметры.Свойство("Отбор") Тогда
			Параметры.Вставить("Отбор", Новый Структура);
		КонецЕсли; 
		
		СотрудникиФормы.УстановитьСтандартныеОтборыСотрудников(Параметры.Отбор);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьКомандыПечатиСправочникуСотрудники(КомандыПечати) Экспорт
	
	ФОИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Если ФОИспользоватьНачислениеЗарплаты ИЛИ ФОИспользоватьКадровыйУчет Тогда
		
		Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты", , Ложь) Тогда
			
			СотрудникиФормы.ДобавитьКомандуПечатиЛичнойКарточкиТ2(КомандыПечати);
			
			СотрудникиФормы.ДобавитьКомандыПечатиТрудовогоДоговораМикропредприятий(КомандыПечати);
			
			СотрудникиФормы.ДобавитьКомандуПечатиПриказаОПриеме(КомандыПечати);
			СотрудникиФормы.ДобавитьКомандуПечатиПриказаОПереводе(КомандыПечати);
			
		КонецЕсли; 
		
		Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты", , Ложь)
			ИЛИ ПравоДоступа("Просмотр", Метаданные.Документы.Увольнение) Тогда
			
			СотрудникиФормы.ДобавитьКомандуПечатиПриказаОбУвольнении(КомандыПечати);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Отчеты.ПечатнаяФормаСправкаОСреднемЗаработке.ДобавитьКомандуПечати(КомандыПечати);
	
	Если ФОИспользоватьНачислениеЗарплаты Тогда
		
		Если Пользователи.РолиДоступны("ДобавлениеИзменениеНалоговИВзносов,ЧтениеНалоговИВзносов", , Ложь) Тогда
			СотрудникиФормы.ДобавитьКомандуПечатиКарточкиУчетаСтраховыхВзносов(КомандыПечати);
			СотрудникиФормы.ДобавитьКомандуПечатиРегистраНалоговогоУчетаПоНДФЛ(КомандыПечати);
		КонецЕсли; 
		
	КонецЕсли;
	
	СотрудникиФормы.ДобавитьКомандуПечатиСогласияНаОбработкуПерсональныхДанных(КомандыПечати);
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т2") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т2", НСтр("ru='Личная карточка (Т-2)'"),
			ПечатьТ2(МассивОбъектов, ОбъектыПечати), ,);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТрудовойДоговорМикропредприятий") Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
			
			МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
			МодульРасчетЗарплатыДляНебольшихОрганизаций.ПечатьТрудовойДоговорМикропредприятийПоСправочникуСотрудники(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
			
		КонецЕсли;
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т1") Тогда
			
			СотрудникиФормы.ПечатьТ1ПоСправочникуСотрудники(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
			
		ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т5") Тогда
			
			СотрудникиФормы.ПечатьТ5ПоСправочникуСотрудники(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
			
		ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т8") Тогда
			
			СотрудникиФормы.ПечатьТ8ПоСправочникуСотрудники(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
			
		КонецЕсли;
		
		
	Иначе
		
		Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т1")
			Или УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т5")
			Или УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т8") Тогда
		
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
				
				МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
				МодульРасчетЗарплатыДляНебольшихОрганизаций.ПечатьПоСправочникуСотрудники(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура печати Т-2.
// Возвращает табличный документ - сформированную унифицированную форму Т-2.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ПечатьТ2(МассивОбъектов, ОбъектыПечати) 
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ОтчетТ2 = Отчеты.УнифицированнаяФормаТ2.Создать();
	ОтчетТ2.ИнициализироватьОтчет();
	ОтчетТ2.КомпоновщикНастроек.ЗагрузитьНастройки(ОтчетТ2.СхемаКомпоновкиДанных.ВариантыНастроек.Т2.Настройки);
	
	Отбор = ОтчетТ2.КомпоновщикНастроек.Настройки.Отбор;
	
	Отбор.Элементы.Очистить();
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "РабочееМесто.Сотрудник", ВидСравненияКомпоновкиДанных.ВСписке, МассивОбъектов);
	
	ОтчетТ2.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	ОтчетТ2.СкомпоноватьРезультат(ДокументРезультат);
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Функция СтандартныеОтборыСотрудников() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВАрхиве", Ложь);
	
	Возврат Отбор;
	
КонецФункции

Процедура ОбновитьРежимыРаботыФормы() Экспорт
	
	МассивРежимовРаботы = Новый Массив;
	МассивРежимовРаботы.Добавить(Перечисления.РежимыРаботыФормыСотрудника.ФизическоеЛицо);
	МассивРежимовРаботы.Добавить(Перечисления.РежимыРаботыФормыСотрудника.Сотрудник);
	МассивРежимовРаботы.Добавить(Перечисления.РежимыРаботыФормыСотрудника.СотрудникОформленныйПоТрудовомуДоговору);
		
	РегистрыСведений.СведенияОРежимахРаботыФормыСотрудника.ЗаполнитьНастройкиРежимов(МассивРежимовРаботы);
		
КонецПроцедуры

Процедура ПроверитьНеобходимостьНастройкиРежимовРаботыФормыСотрудника(Источник, Отказ) Экспорт
	
	ЗначениеИзменено = Ложь;
	Если ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьКадровыйУчет") Тогда
		ЗначениеИзменено = (Константы.ИспользоватьКадровыйУчет.Получить() <> Источник.Значение);
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьНачислениеЗарплаты") Тогда
		ЗначениеИзменено = (Константы.ИспользоватьНачислениеЗарплаты.Получить() <> Источник.Значение);
	КонецЕсли;
	
	Если ЗначениеИзменено Тогда
		Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено");
	КонецЕсли; 
	
КонецПроцедуры

Функция ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ДатаСведений, ВыводитьПодробнуюИнформацию) Экспорт
	
	Если Не ВыводитьПодробнуюИнформацию Тогда
		
		НаименованиеОрганизации = ?(ЗначениеЗаполнено(РеквизитыОрганизации.НаименованиеСокращенное), РеквизитыОрганизации.НаименованиеСокращенное, РеквизитыОрганизации.Наименование); 
		Если ДанныеСотрудника.ОформленПоТрудовомуДоговору
			И ДанныеСотрудника.ДатаПриема <= ДатаСведений
			И ((Не ЗначениеЗаполнено(ДанныеСотрудника.ДатаЗавершенияРаботы))
				Или (ДанныеСотрудника.ДатаЗавершенияРаботы > ДатаСведений)) Тогда
			
			Если ЗначениеЗаполнено(ДанныеСотрудника.Должность) Тогда
				ДолжностьНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСотрудника.Должность, "Наименование");
			Иначе
				ДолжностьНаименование = НСтр("ru='<Должность не указана>'");
			КонецЕсли;
			
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
					|работает с %2 %3'"), 
				НаименованиеОрганизации,
				Формат(ДанныеСотрудника.ДатаПриема, "ДЛФ=D"),
				?(ЗначениеЗаполнено(ДолжностьНаименование), "("+ДолжностьНаименование+")", "") , Символы.ПС);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеСотрудника.ДатаЗавершенияРаботы) И ДанныеСотрудника.ДатаЗавершенияРаботы <= ДатаСведений  Тогда	
				
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 
					|уволен %2'"), 
				НаименованиеОрганизации,
				Формат(ДанныеСотрудника.ДатаЗавершенияРаботы, "ДЛФ=D"));
			
		Иначе
				
			Если ДанныеСотрудника.ДатаПриема > ДатаСведений Тогда
				
				Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1  
						|будет работать с %2'"), 
					НаименованиеОрганизации,
					Формат(ДанныеСотрудника.ДатаПриема, "ДЛФ=D"));
				
			Иначе
				
				Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1  
						|не оформлен на работу'"), 
					НаименованиеОрганизации);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
	
		Если Не ДанныеСотрудника.ОформленПоТрудовомуДоговору
			И Не ЗначениеЗаполнено(ДанныеСотрудника.ДатаЗавершенияРаботы) Тогда	
			
			Возврат НСтр("ru = 'Принять на работу'");
			
		Иначе
			Возврат НСтр("ru = 'Подробнее...'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ДатаСведений) Экспорт
	
	Если ДанныеСотрудника.СотрудникАктуален Тогда
		СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Работает с %1 года'"), Формат(ДанныеСотрудника.ДатаПриема, "ДЛФ=D"));
	Иначе
		Если ДанныеСотрудника.ОформленПоТрудовомуДоговору И ДанныеСотрудника.ДатаПриема > ДатаСведений Тогда
			СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Будет работать с %1 года'"), Формат(ДанныеСотрудника.ДатаПриема, "ДЛФ=D"));	
		ИначеЕсли ЗначениеЗаполнено(ДанныеСотрудника.ДатаПриема) И ЗначениеЗаполнено(ДанныеСотрудника.ДатаЗавершенияРаботы) Тогда 
			СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Работал с %1 по %2'"), Формат(ДанныеСотрудника.ДатаПриема, "ДЛФ=D"), Формат(ДанныеСотрудника.ДатаЗавершенияРаботы, "ДЛФ=D"));
		ИначеЕсли ЗначениеЗаполнено(ДанныеСотрудника.ДатаЗавершенияРаботы) Тогда 
			СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уволен %1'"), Формат(ДанныеСотрудника.ДатаЗавершенияРаботы, "ДЛФ=D"));
		ИначеЕсли ЗначениеЗаполнено(ДанныеСотрудника.ДатаПриема) Тогда 
			СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата планируемого приема: %1'"), Формат(ДанныеСотрудника.ДатаПриема, "ДЛФ=D")); 		
		Иначе	
			СтрокаПериодРаботы = НСтр("ru = 'Не указана дата приема на работу'");
		КонецЕсли;				
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДанныеСотрудника.Должность) Тогда
		ДолжностьНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСотрудника.Должность, "Наименование");
	Иначе
		ДолжностьНаименование = "";
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИнфоНадписьПериодРаботы", СтрокаПериодРаботы);
	Результат.Вставить("ИнфоНадписьОрганизация", ?(ЗначениеЗаполнено(РеквизитыОрганизации.Наименование), РеквизитыОрганизации.Наименование,  НСТР("ru = 'не указана'")));
	Результат.Вставить("ИнфоНадписьДолжность", ?(ЗначениеЗаполнено(ДолжностьНаименование), ДолжностьНаименование,  НСТР("ru = 'не указана'")));
	
	Если ДанныеСотрудника.Владелец().Колонки.Найти("ТекущаяТарифнаяСтавка") <> Неопределено Тогда
		Результат.Вставить("ИнфоНадписьОклад", ?(ЗначениеЗаполнено(ДанныеСотрудника.ТекущаяТарифнаяСтавка), ДанныеСотрудника.ТекущаяТарифнаяСтавка, НСТР("ru = 'не указан'")));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции	

Процедура ЗаполнитьПервоначальныеЗначенияФизическогоЛица(Форма)
	
	Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписейФизическиеЛица") Тогда
		
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("ГруппаДоступа", "ФизическоеЛицо.ГруппаДоступа");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(Форма, ЗначенияДляЗаполнения);	
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьПервоначальныеЗначения(Форма) Экспорт
	
	ЗаполнитьПервоначальныеЗначенияФизическогоЛица(Форма);
	
	ЗначенияДляЗаполнения = Новый Структура;
	Если Форма.ИспользоватьКадровыйУчет Тогда
		
		ЗначенияДляЗаполнения.Вставить("Организация", "Сотрудник.ГоловнаяОрганизация");
		
	Иначе
		
		ЗначенияДляЗаполнения.Вставить("Организация", "ТекущаяОрганизация");
		ЗначенияДляЗаполнения.Вставить("Подразделение", "ТекущееПодразделение");
		
	КонецЕсли;
	
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(Форма, ЗначенияДляЗаполнения);	
	
	Если Форма.ИспользоватьКадровыйУчет 
		И ЗначениеЗаполнено(Форма.Сотрудник.ГоловнаяОрганизация) Тогда
		
		Форма.Сотрудник.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Форма.Сотрудник.ГоловнаяОрганизация);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СотрудникиОбновитьЭлементыФормы(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыФункциональныхОпций = Новый Структура;
	ПараметрыФункциональныхОпций.Вставить("Организация", ЗарплатаКадры.ГоловнаяОрганизация(Форма.ТекущаяОрганизация));
	
	ОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ТекущаяОрганизация, "ОбособленноеПодразделение");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФункциональныхОпций);
	
	СотрудникиКлиентСервер.УстановитьИнфоНадпись(Форма, ТекущаяДатаСеанса());
	
	ЭтоПодработка = ЗначениеЗаполнено(Форма.Сотрудник.Ссылка) И Форма.Сотрудник.Ссылка <> Форма.Сотрудник.ГоловнойСотрудник;
	
	// Получим значение ДополнятьПредставление.
	Если ПустаяСтрока(Форма.Сотрудник.УточнениеНаименования) Тогда
		Форма.ДополнятьПредставление = Ложь;
	Иначе
		Форма.ДополнятьПредставление = Истина;
	КонецЕсли;
	
	СотрудникиКлиентСервер.УстановитьДоступностьУточненияНаименования(Форма);
	
	// Настройка команд панели навигации формы.
	СтруктураПараметровФО = Новый Структура;
	Если Форма.ОформленПоТрудовомуДоговору Тогда
		СтруктураПараметровФО.Вставить("РежимРаботыФормы", Перечисления.РежимыРаботыФормыСотрудника.СотрудникОформленныйПоТрудовомуДоговору);
	Иначе
		СтруктураПараметровФО.Вставить("РежимРаботыФормы", Перечисления.РежимыРаботыФормыСотрудника.Сотрудник);
	КонецЕсли;
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметровФО);
	
	ПараметрыПостроения = Новый Структура;
	ПараметрыПостроения.Вставить("Сотрудник", Форма.Сотрудник.Ссылка);
	ПараметрыПостроения.Вставить("ОформленПоТрудовомуДоговору", Форма.ОформленПоТрудовомуДоговору);
	ПараметрыПостроения.Вставить("ДатаУвольнения", Форма.ДатаУвольнения);
	
	Если НЕ ЭтоПодработка Тогда
		СотрудникиФормы.УстановитьМенюВводаНаОсновании(Форма, "ОформитьДокумент", ПараметрыПостроения);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяОрганизация",
		"ТолькоПросмотр",
		Форма.ИспользоватьКадровыйУчет);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущееПодразделение",
		"ТолькоПросмотр",
		Форма.ИспользоватьКадровыйУчет);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяДолжность",
		"ТолькоПросмотр",
		Форма.ИспользоватьКадровыйУчет);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущийВидЗанятости",
		"ТолькоПросмотр",
		Форма.ИспользоватьКадровыйУчет);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяТарифнаяСтавка",
		"ТолькоПросмотр",
		Форма.ИспользоватьКадровыйУчет);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаПриема",
		"ТолькоПросмотр",
		ЭтоПодработка
			Или Форма.ИспользоватьКадровыйУчет
				И ЗначениеЗаполнено(Форма.ПриказОПриеме));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаУвольнения",
		"ТолькоПросмотр",
		Форма.ИспользоватьКадровыйУчет);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ГоловнаяОрганизация",
		"Видимость",
		Форма.ИспользоватьКадровыйУчет);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяОрганизация",
		"Видимость",
		НЕ Форма.ИспользоватьКадровыйУчет);
	
	Если Форма.ИспользоватьКадровыйУчет Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГоловнаяОрганизация",
			"ТолькоПросмотр",
			ЗначениеЗаполнено(Форма.Сотрудник.ГоловнаяОрганизация) И Форма.ОформленПоТрудовомуДоговору);
		
		Если ОбособленноеПодразделение <> Неопределено И ОбособленноеПодразделение Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ТекущаяОрганизация",
				"Видимость",
				Истина);
			
			Форма.Элементы.ТекущаяОрганизация.Заголовок = НСтр("ru = 'Филиал'");
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ТекущаяОрганизация",
				"Видимость",
				Ложь);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаКомандыОформления",
			"Видимость",
			НЕ Форма.ОформленПоТрудовомуДоговору И Форма.РежимВыбора = Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФормаОформитьПриемНаРаботу",
			"Видимость",
			НЕ Форма.ОформленПоТрудовомуДоговору);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФормаОформитьКадровыйПеревод",
			"Видимость",
			Форма.ОформленПоТрудовомуДоговору И НЕ ЗначениеЗаполнено(Форма.ДатаУвольнения));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФормаОформитьУвольнение",
			"Видимость",
			Форма.ОформленПоТрудовомуДоговору И НЕ ЗначениеЗаполнено(Форма.ДатаУвольнения));
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаКомандыОформления",
			"Видимость",
			Ложь);
		
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ДоступныТолькоДанныеСотрудника") И Форма.Параметры.ДоступныТолькоДанныеСотрудника Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"Страхование",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ОбщаяКомандаПрисоединенныеФайлы",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФИОФизическихЛицИстория",
			"Видимость",
			Ложь);
			
		СотрудникиКлиентСервер.УстановитьРежимТолькоПросмотраЛичныхДанныхВФормеСотрудника(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтображениеСпособовРасчетаАванса(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ТекущийСпособРасчетаАванса) Тогда
			
		Если Форма.ТекущийСпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.ФиксированнойСуммой Тогда
			ЗаголовокПоляПлановыйАванс = НСтр("ru='Аванс (руб)'");
		ИначеЕсли Форма.ТекущийСпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.ПроцентомОтТарифа Тогда
			ЗаголовокПоляПлановыйАванс = НСтр("ru='Аванс (%)'");			
		КонецЕсли;
		
		Форма.ПлановыйАванс = Формат(Форма.ТекущийАванс, "ЧДЦ=2");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПлановыйАванс",
			"Заголовок",
			ЗаголовокПоляПлановыйАванс);
			
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПлановыйАванс",
		"Видимость",
		ЗначениеЗаполнено(Форма.ТекущийСпособРасчетаАванса));
		
КонецПроцедуры

Процедура ФизическиеЛицаОбновитьЭлементыФормы(Форма) Экспорт
	
	СотрудникиКлиентСервер.ОбработатьОтображениеПоляИНН(Форма.ФизическоеЛицо.ИНН, Форма.Элементы.ФизлицоИНН, Форма);
	СотрудникиКлиентСервер.ОбработатьОтображениеПоляСтраховойНомерПФР(Форма.ФизическоеЛицо.СтраховойНомерПФР, Форма.Элементы.ФизлицоСтраховойНомерПФР, Форма);
	СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
	СотрудникиКлиентСервер.УстановитьПодсказкуКДатеРождения(Форма);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВсеДокументыЭтогоЧеловека",
		"Видимость",
		Не Форма.СозданиеНового);
	
КонецПроцедуры

Процедура ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, ФизическоеЛицоСсылка, Отказ) Экспорт
	
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		
		РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(Форма, "ФИОФизическихЛиц", ФизическоеЛицоСсылка, Отказ);
		
		Если СотрудникиВызовСервера.ДоступенВыборСтраныВыдачиДокумента(Форма.ДокументыФизическихЛиц.ВидДокумента)
			И Не ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.СтранаВыдачи) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не указана страна выдачи документа.'"), , "ДокументыФизическихЛиц.СтранаВыдачи", , Отказ);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка, Организация) Экспорт
	
	ИзменилосьФИО = Ложь;
	ИзменилосьУдостоверениеЛичности = Ложь;
	
	НачатьТранзакцию();
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры") Тогда
		ИзменилосьФИО = РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(Форма, "ФИОФизическихЛиц", ФизическоеЛицоСсылка);
	КонецЕсли;
	
	Если НЕ ИзменилосьФИО И Форма["ИзмененоУточнениеНаименования"] Тогда
		ТаблицаФизЛиц = Новый ТаблицаЗначений;
		ТаблицаФизЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		Строка = ТаблицаФизЛиц.Добавить();
		Строка.ФизическоеЛицо = ФизическоеЛицоСсылка;
		
		ЗарплатаКадры.ОбновитьНаименованияФизЛицаИСотрудника(ТаблицаФизЛиц);
	КонецЕсли;

	ЗафиксироватьТранзакцию();
	
	Если НЕ Форма.ИзмененыЛичныеДанные Тогда
		
		ИзменяемыеПоля = СотрудникиФормы.ИзменяемыеПоляФизическогоЛица();
		
		Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
			
			Форма.ИзмененыЛичныеДанные = Форма[КлючИЗначение.Значение];
			
			Если Форма.ИзмененыЛичныеДанные Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
		Если НЕ Форма.ИзмененыЛичныеДанные Тогда
			
			Форма.ИзмененыЛичныеДанные = ИзменилосьФИО 
				Или ИзменилосьУдостоверениеЛичности;
				
		Иначе
				
			Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
				
				Форма[КлючИЗначение.Значение] = Ложь;
				
			КонецЦикла;
			
		КонецЕсли; 
							
	КонецЕсли; 
								
КонецПроцедуры	

Процедура ПрочитатьДанныеСвязанныеССотрудником(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПрочитатьДанныеФизлица(Форма);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПрочитатьТекущиеДанныеСотрудника(Форма);
	
	СотрудникиФормы.ПрочитатьДанныеСвязанныеСФизлицом(Форма, Форма.ДоступенПросмотрДанныхФизическихЛиц, Форма.ТекущаяОрганизация, Истина);
	
КонецПроцедуры

Процедура ПрочитатьДанныеСвязанныеСФизлицом(Форма, ДоступенПросмотрДанныхФизическихЛиц, Организация, ИзФормыСотрудника) Экспорт
	
	Форма.ФизическоеЛицоВерсияДанных = Форма.ФизическоеЛицо.ВерсияДанных;
	Если ДоступенПросмотрДанныхФизическихЛиц Тогда
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(Форма, "ФИОФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	
КонецПроцедуры

Функция КлючиСтруктурыТекущихКадровыхДанныхСотрудника() Экспорт
	КлючиСтруктуры = "ТекущаяОрганизация,ТекущееПодразделение,ТекущаяДолжность,ТекущийВидЗанятости,ДатаПриема,ДатаУвольнения,ОформленПоТрудовомуДоговору,ПриказОПриеме";
	Возврат КлючиСтруктуры;
КонецФункции

Функция КлючиСтруктурыТекущихТарифныхСтавокСотрудника() Экспорт
	КлючиСтруктуры = "";
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты") Тогда
		КлючиСтруктуры = КлючиСтруктуры + "ТекущаяТарифнаяСтавка,ТекущийСпособРасчетаАванса,ТекущийАванс";
	КонецЕсли;
	Возврат КлючиСтруктуры;
КонецФункции

Функция ПоследниеКадровыеПереводыСотрудников(МассивСотрудников) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для каждого Сотрудник Из МассивСотрудников Цикл
		ИзмеренияДаты.Добавить().Сотрудник = Сотрудник;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзмеренияДаты.ДатаНачала КАК ДатаНачала,
		|	ИзмеренияДаты.ДатаОкончания КАК ДатаОкончания,
		|	ИзмеренияДаты.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&ИзмеренияДаты КАК ИзмеренияДаты";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ВидСобытия", "=", Перечисления.ВидыКадровыхСобытий.Перемещение);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериоды", "Сотрудник"),
		ПараметрыПостроения,
		"ВТКадроваяИсторияСотрудников");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериоды", "Сотрудник"),
		,
		"ВТПлановыеНачисления");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПлановыеАвансы",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериоды", "Сотрудник"),
		,
		"ВТПлановыеАвансы");
	
	ТипыКадровыхПереводов = Новый Массив;
	ТипыКадровыхПереводов.Добавить(Тип("ДокументСсылка.КадровыйПеревод"));
	
	Запрос.УстановитьПараметр("ТипыКадровыхПереводов", ТипыКадровыхПереводов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(КадроваяИсторияСотрудников.ПериодЗаписи) КАК ПериодЗаписи,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПериодыКадроваяИсторияСотрудников
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ПлановыеНачисления.ПериодЗаписи) КАК ПериодЗаписи,
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПериодыПлановыеНачисления
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПлановыеНачисления.Регистратор) В (&ТипыКадровыхПереводов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ПлановыеАвансы.ПериодЗаписи) КАК ПериодЗаписи,
		|	ПлановыеАвансы.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПериодыПлановыеАвансы
		|ИЗ
		|	ВТПлановыеАвансы КАК ПлановыеАвансы
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПлановыеАвансы.Регистратор) В (&ТипыКадровыхПереводов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеАвансы.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.ПериодЗаписи КАК Период,
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТКадровыеПереводы
		|ИЗ
		|	ВТПериодыКадроваяИсторияСотрудников КАК ПериодыРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ПериодыРегистра.ПериодЗаписи = КадроваяИсторияСотрудников.ПериодЗаписи
		|			И ПериодыРегистра.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлановыеНачисления.ПериодЗаписи,
		|	ПлановыеНачисления.Регистратор,
		|	ПлановыеНачисления.Сотрудник
		|ИЗ
		|	ВТПериодыПлановыеНачисления КАК ПериодыРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисления КАК ПлановыеНачисления
		|		ПО ПериодыРегистра.ПериодЗаписи = ПлановыеНачисления.ПериодЗаписи
		|			И ПериодыРегистра.Сотрудник = ПлановыеНачисления.Сотрудник
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПлановыеНачисления.Регистратор) В (&ТипыКадровыхПереводов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлановыеАвансы.ПериодЗаписи,
		|	ПлановыеАвансы.Регистратор,
		|	ПлановыеАвансы.Сотрудник
		|ИЗ
		|	ВТПериодыПлановыеАвансы КАК ПериодыРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеАвансы КАК ПлановыеАвансы
		|		ПО ПериодыРегистра.ПериодЗаписи = ПлановыеАвансы.ПериодЗаписи
		|			И ПериодыРегистра.Сотрудник = ПлановыеАвансы.Сотрудник
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПлановыеАвансы.Регистратор) В (&ТипыКадровыхПереводов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(КадровыеПереводы.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК Период,
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПериодыПереводов
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПереводы КАК КадровыеПереводы
		|		ПО СотрудникиПериоды.Сотрудник = КадровыеПереводы.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиПериоды.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыПереводов.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(КадровыеПереводы.Регистратор) КАК Регистратор
		|ИЗ
		|	ВТПериодыПереводов КАК ПериодыПереводов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПереводы КАК КадровыеПереводы
		|		ПО ПериодыПереводов.Период = КадровыеПереводы.Период
		|			И ПериодыПереводов.Сотрудник = КадровыеПереводы.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыПереводов.Сотрудник";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ПроцедурыДляДополненияФормыЭлементаСправФизическиеЛица

Процедура ДополнитьФормуМестамиРаботы(Форма, ИмяГруппы, ИмяПоследнегоЭлементаГруппы = "", СотрудникИсключение = Неопределено, ВыводитьПодробнуюИнформацию = Ложь)
	
	СотрудникиФормы.ЗаполнитьФормуМестамиРаботы(Форма, ИмяГруппы, ИмяПоследнегоЭлементаГруппы, СотрудникИсключение, ВыводитьПодробнуюИнформацию);
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедуры

Функция ДругиеРабочиеМеста(ФизическоеЛицоСсылка, СотрудникИсключение) Экспорт
	
	СписокНеобходимыхДанных = "ГоловнаяОрганизация,Организация,Должность,ОформленПоТрудовомуДоговору,ДатаПриема,ДатаЗавершенияРаботы";
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты") Тогда
		СписокНеобходимыхДанных = СписокНеобходимыхДанных + ",ТекущаяТарифнаяСтавка";
	КонецЕсли; 
	
	СписокСотрудников = СотрудникиФормы.СотрудникиФизическогоЛица(ФизическоеЛицоСсылка);
	ТаблицаПоРабочимМестам = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, СписокНеобходимыхДанных, ТекущаяДатаСеанса());
	
	// Удаляем записи по СотрудникИсключение.
	Если СотрудникИсключение <> Неопределено Тогда
		МассивСтрокССотрудникИсключение = ТаблицаПоРабочимМестам.НайтиСтроки(Новый Структура("Сотрудник", СотрудникИсключение));
		Для Каждого ЭлементМассивСтрокССотрудникИсключение Из МассивСтрокССотрудникИсключение Цикл
			ТаблицаПоРабочимМестам.Удалить(ЭлементМассивСтрокССотрудникИсключение);
		КонецЦикла;
	КонецЕсли; 
	
	// Рассчитаем актуальность сотрудника.
	ТаблицаПоРабочимМестам.Колонки.Добавить("СотрудникАктуален", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаТаблицаПоРабочимМестам Из ТаблицаПоРабочимМестам Цикл
		СтрокаТаблицаПоРабочимМестам.СотрудникАктуален = СтрокаТаблицаПоРабочимМестам.ОформленПоТрудовомуДоговору И СтрокаТаблицаПоРабочимМестам.ДатаПриема < ТекущаяДатаСеанса()
			И (СтрокаТаблицаПоРабочимМестам.ДатаЗавершенияРаботы > ТекущаяДатаСеанса() ИЛИ СтрокаТаблицаПоРабочимМестам.ДатаЗавершенияРаботы = '00010101000000');
		
	КонецЦикла;
		
	Если ТаблицаПоРабочимМестам.Количество() > 1 Тогда
		
		// Выполним сортировку рабочих мест.
		ТаблицаПоРабочимМестам.Сортировать("СотрудникАктуален Убыв, ДатаПриема Возр, Организация");
		
	КонецЕсли;
		
	Возврат ТаблицаПоРабочимМестам;
	
КонецФункции

Процедура ПрочитатьДанныеФизлица(Форма)
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ФизическоеЛицоОбъект = Форма.ФизическоеЛицоСсылка.ПолучитьОбъект();
	Иначе
		ФизическоеЛицоОбъект = Форма.Сотрудник.ФизическоеЛицо.ПолучитьОбъект();
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(ФизическоеЛицоОбъект, "ФизическоеЛицо");
	
	Если Не Форма.Параметры.Ключ.Пустая() Тогда
		Форма.ФизическоеЛицоСсылка = Форма.Сотрудник.ФизическоеЛицо;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьТекущиеДанныеСотрудника(Форма)
	
	КлючиСтруктурыТекущихКадровыхДанныхСотрудника = СотрудникиФормы.КлючиСтруктурыТекущихКадровыхДанныхСотрудника();
	
	КлючиСтруктурыТарифныхСтавок = СотрудникиФормы.КлючиСтруктурыТекущихТарифныхСтавокСотрудника();
	Если Не ПустаяСтрока(КлючиСтруктурыТарифныхСтавок) Тогда
		КлючиСтруктурыТекущихКадровыхДанныхСотрудника = КлючиСтруктурыТекущихКадровыхДанныхСотрудника + "," + КлючиСтруктурыТарифныхСтавок;
	КонецЕсли;
	
	ЗаказываемыеКадровыеДанные = СтрРазделить(КлючиСтруктурыТекущихКадровыхДанныхСотрудника, ",");
	СоответствиеКадровыхДанных = Новый Соответствие;
	СоответствиеКадровыхДанныхОбОплатеТруда = Новый Соответствие;
	
	Для Каждого ИмяЗаказываемыхКадровыхДанных Из ЗаказываемыеКадровыеДанные Цикл
		
		Если ИмяЗаказываемыхКадровыхДанных = "ТекущаяОрганизация" Тогда
			СоответствиеКадровыхДанных.Вставить(ИмяЗаказываемыхКадровыхДанных, "Организация");
		ИначеЕсли ИмяЗаказываемыхКадровыхДанных = "ТекущееПодразделение" Тогда
			СоответствиеКадровыхДанных.Вставить(ИмяЗаказываемыхКадровыхДанных, "Подразделение");
		ИначеЕсли ИмяЗаказываемыхКадровыхДанных = "ТекущаяДолжность" Тогда
			СоответствиеКадровыхДанных.Вставить(ИмяЗаказываемыхКадровыхДанных, "Должность");
		ИначеЕсли ИмяЗаказываемыхКадровыхДанных = "ТекущийВидЗанятости" Тогда
			СоответствиеКадровыхДанных.Вставить(ИмяЗаказываемыхКадровыхДанных, "ВидЗанятости");
		ИначеЕсли ИмяЗаказываемыхКадровыхДанных = "ТекущаяДолжностьПоШтатномуРасписанию" Тогда
			СоответствиеКадровыхДанных.Вставить(ИмяЗаказываемыхКадровыхДанных, "ДолжностьПоШтатномуРасписанию");
		ИначеЕсли ИмяЗаказываемыхКадровыхДанных = "ТекущийВидДоговора" Тогда
			СоответствиеКадровыхДанных.Вставить(ИмяЗаказываемыхКадровыхДанных, "ВидДоговора");
		ИначеЕсли ИмяЗаказываемыхКадровыхДанных = "ТекущаяТарифнаяСтавка" Тогда
			СоответствиеКадровыхДанныхОбОплатеТруда.Вставить(ИмяЗаказываемыхКадровыхДанных, "ТарифнаяСтавка");
		ИначеЕсли ИмяЗаказываемыхКадровыхДанных = "ТекущийФОТ" Тогда
			СоответствиеКадровыхДанныхОбОплатеТруда.Вставить(ИмяЗаказываемыхКадровыхДанных, "ФОТ");
		ИначеЕсли ИмяЗаказываемыхКадровыхДанных = "ТекущийСпособРасчетаАванса" Тогда
			СоответствиеКадровыхДанныхОбОплатеТруда.Вставить(ИмяЗаказываемыхКадровыхДанных, "СпособРасчетаАванса");
		ИначеЕсли ИмяЗаказываемыхКадровыхДанных = "ТекущийАванс" Тогда
			СоответствиеКадровыхДанныхОбОплатеТруда.Вставить(ИмяЗаказываемыхКадровыхДанных, "Аванс");
		Иначе
			СоответствиеКадровыхДанных.Вставить(ИмяЗаказываемыхКадровыхДанных, ИмяЗаказываемыхКадровыхДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаКадровыхДанных = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеКадровыхДанных, "Значение");
	ИменаКадровыхДанных.Добавить("ТекущаяОрганизация");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаКадровыхДанных = КадровыйУчет.КадровыеДанныеСотрудников(
		Ложь,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Сотрудник.Ссылка),
		ИменаКадровыхДанных,
		ОбщегоНазначения.ТекущаяДатаПользователя());
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТаблицаКадровыхДанных.Количество() > 0 Тогда
		
		Для Каждого ОписаниеКадровыхДанных Из СоответствиеКадровыхДанных Цикл
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				Форма,
				ОписаниеКадровыхДанных.Ключ,
				ТаблицаКадровыхДанных[0][ОписаниеКадровыхДанных.Значение]);
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ТаблицаКадровыхДанных[0][СоответствиеКадровыхДанных.Получить("ТекущаяОрганизация")]) Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				Форма,
				"ТекущаяОрганизация",
				ТаблицаКадровыхДанных[0]["ТекущаяОрганизация"]);
				
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаКадровыхДанных = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Сотрудник.Ссылка),
		ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеКадровыхДанныхОбОплатеТруда, "Значение"),
		ОбщегоНазначения.ТекущаяДатаПользователя());
	
	Если ТаблицаКадровыхДанных.Количество() > 0 Тогда
		
		Для Каждого ОписаниеКадровыхДанных Из СоответствиеКадровыхДанныхОбОплатеТруда Цикл
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				Форма,
				ОписаниеКадровыхДанных.Ключ,
				ТаблицаКадровыхДанных[0][ОписаниеКадровыхДанных.Значение]);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекущиеДанныеКакСтруктура = Новый Структура(КлючиСтруктурыТекущихКадровыхДанныхСотрудника);
	
	Если Не Форма.СозданиеНового Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанныеКакСтруктура, Форма);
	КонецЕсли;
	
	Форма.ТекущиеДанныеПрежняя = Новый ФиксированнаяСтруктура(ТекущиеДанныеКакСтруктура);
	
КонецПроцедуры

Процедура ДополнитьФормуСотрудника(Форма, ИмяГруппы)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		ДополнитьФормуМестамиРаботы(Форма, ИмяГруппы, , Форма.Сотрудник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаписатьТекущиеДанные(Форма, СотрудникОбъект)
	
	Если НЕ Форма.СозданиеНового И Форма.ИспользоватьКадровыйУчет Тогда
		
		ИзмененаДатаПриема = Форма.ТекущиеДанныеПрежняя.ДатаПриема <> Форма.ДатаПриема;
		Если ИзмененаДатаПриема Тогда
			
			ТекущиеКадровыеДанныеНаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			ТекущиеКадровыеДанныеНаборЗаписей.Отбор.Сотрудник.Установить(СотрудникОбъект.Ссылка);
			ТекущиеКадровыеДанныеНаборЗаписей.Прочитать();
			
			ТекущиеКадровыеДанныеНаборЗаписей[0].ДатаПриема = Форма.ДатаПриема;
			
			УстановитьПривилегированныйРежим(Истина);
			ТекущиеКадровыеДанныеНаборЗаписей.ДополнительныеСвойства.Вставить("УстановитьОсновноеРабочееМесто", Истина);
			ТекущиеКадровыеДанныеНаборЗаписей.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ЕстьИзменениеТекущихКадровыхДанных = Ложь;
	ЕстьИзменениеТекущихТарифныхСтавок = Ложь;
	НовыеТекущиеДанныеПрежняя = Новый Структура;
	
	Для каждого ТекущиеКадровыеДанныеПрежние Из Форма.ТекущиеДанныеПрежняя Цикл
		
		
		Если ТекущиеКадровыеДанныеПрежние.Значение <> Форма[ТекущиеКадровыеДанныеПрежние.Ключ] Тогда
			
			Если ТекущиеКадровыеДанныеПрежние.Ключ = "ТекущаяОрганизация" Тогда
				
				ЕстьИзменениеТекущихТарифныхСтавок = Истина;
				ЕстьИзменениеТекущихКадровыхДанных = Истина;
				
			ИначеЕсли ТекущиеКадровыеДанныеПрежние.Ключ = "ТекущаяТарифнаяСтавка"
				Или ТекущиеКадровыеДанныеПрежние.Ключ = "ТекущийСпособРасчетаАванса"
				Или ТекущиеКадровыеДанныеПрежние.Ключ = "ТекущийАванс" Тогда
				
				ЕстьИзменениеТекущихТарифныхСтавок = Истина;
				
			Иначе
				ЕстьИзменениеТекущихКадровыхДанных = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		НовыеТекущиеДанныеПрежняя.Вставить(ТекущиеКадровыеДанныеПрежние.Ключ, Форма[ТекущиеКадровыеДанныеПрежние.Ключ]);
		
	КонецЦикла;
	
	Если ЕстьИзменениеТекущихКадровыхДанных Или ЕстьИзменениеТекущихТарифныхСтавок Тогда
		
		Форма.ТекущиеДанныеПрежняя = Новый ФиксированнаяСтруктура(НовыеТекущиеДанныеПрежняя);
		
		Если ЕстьИзменениеТекущихКадровыхДанных Тогда
		
			
			ТекущиеКадровыеДанныеНаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			ТекущиеКадровыеДанныеНаборЗаписей.Отбор.Сотрудник.Установить(СотрудникОбъект.Ссылка);
			
			Строка = ТекущиеКадровыеДанныеНаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Форма);
			
			Строка.Сотрудник = СотрудникОбъект.Ссылка;
			Строка.ГоловнаяОрганизация = СотрудникОбъект.ГоловнаяОрганизация;
			Строка.ФизическоеЛицо = СотрудникОбъект.ФизическоеЛицо;
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если Не Форма.ИспользоватьКадровыйУчет Тогда
				
				Строка.ОформленПоТрудовомуДоговору = ЗначениеЗаполнено(Строка.ДатаПриема)
					И ЗначениеЗаполнено(Строка.ТекущаяОрганизация)
					И ЗначениеЗаполнено(Строка.ТекущийВидЗанятости);
				
				ТекущиеКадровыеДанныеНаборЗаписей.ДополнительныеСвойства.Вставить("УстановитьОсновноеРабочееМесто", Истина);
				
			КонецЕсли;
			
			ТекущиеКадровыеДанныеНаборЗаписей.Записать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		Если Не Форма.ИспользоватьКадровыйУчет И ЕстьИзменениеТекущихТарифныхСтавок Тогда
			ЗаписатьТекущуюТарифнуюСтавку(Форма, СотрудникОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьТекущуюТарифнуюСтавку(Форма, СотрудникОбъект)
	
	ТекущаяТарифнаяСтавкаНаборЗаписей = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
	ТекущаяТарифнаяСтавкаНаборЗаписей.Отбор.Сотрудник.Установить(СотрудникОбъект.Ссылка);
	
	Строка = ТекущаяТарифнаяСтавкаНаборЗаписей.Добавить();
	Строка.Сотрудник = СотрудникОбъект.Ссылка; 
	Строка.ФизическоеЛицо = СотрудникОбъект.ФизическоеЛицо; 
	Строка.ГоловнаяОрганизация = СотрудникОбъект.ГоловнаяОрганизация; 
	Строка.ТекущаяОрганизация = Форма.ТекущаяОрганизация; 
	Строка.ТекущаяТарифнаяСтавка = Форма.ТекущаяТарифнаяСтавка; 
	Строка.ТекущийСпособРасчетаАванса = Форма.ТекущийСпособРасчетаАванса; 
	Строка.ТекущийАванс = Форма.ТекущийАванс; 
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущаяТарифнаяСтавкаНаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Форма.ТекущиеДанныеПрежняя.ТекущийАванс <> Форма.ТекущийАванс Тогда
		
		РасчетЗарплатыФормы.ЗапомнитьРазмерАвансаПоУмолчанию(
			Форма.ТекущийАванс, Форма.ТекущаяОрганизация, Форма.ТекущийСпособРасчетаАванса);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЧтенияЗаписиДанныхДокументовУдостоверяющихЛичность

Процедура ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, ВедущийОбъект) Экспорт
	
	Если Форма.Параметры.Свойство("Ключ") И НЕ Форма.Параметры.Ключ.Пустая() Тогда
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ДокументыФизическихЛиц", ВедущийОбъект);
	КонецЕсли;
	
	МенеджерЗаписи = МенеджерПоследнейЗаписиДокументовФизическихЛиц(ВедущийОбъект);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	
	// Имя реквизита формы совпадает с именем регистра.
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "ДокументыФизическихЛиц");
	
	ЗаписьКакСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра);
	Форма["ДокументыФизическихЛицПрежняя"] = Новый ФиксированнаяСтруктура(ЗаписьКакСтруктура);
	
	Форма["ДокументыФизическихЛицНоваяЗапись"] = Ложь;
	
	СотрудникиКлиентСервер.УстановитьВидимостьГруппыФамилияИмяЛатиницей(Форма, "ДокументыФизическихЛиц");
	
КонецПроцедуры

Функция МенеджерПоследнейЗаписиДокументовФизическихЛиц(ВедущийОбъект) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	
	МенеджерЗаписи = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
	МенеджерЗаписи["Физлицо"] = ВедущийОбъект;
	
	// Ищем последнюю запись
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегистрСведений.Период,
	|	РегистрСведений.Физлицо,
	|	РегистрСведений.ВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК РегистрСведений
	|ГДЕ
	|	РегистрСведений.Физлицо = &ВедущийОбъект
	|	И РегистрСведений.ЯвляетсяДокументомУдостоверяющимЛичность
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрСведений.Период УБЫВ";
	Запрос.УстановитьПараметр("ВедущийОбъект", ВедущийОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
	КонецЕсли;
	
	Возврат МенеджерЗаписи;
	
КонецФункции

Функция ЗаписатьЗаписьДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект) Экспорт
	
	Если Форма["ДокументыФизическихЛицНаборЗаписейПрочитан"] Тогда
		Возврат ЗаписатьНаборЗаписейДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект);
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	ИмяИзмерения = МетаданныеРегистра.Измерения[0].Имя;

	Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		ИзменилисьДанные = Форма["ДокументыФизическихЛиц"].Период <> Форма["ДокументыФизическихЛицПрежняя"].Период;
	Иначе
		ИзменилисьДанные = Ложь;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		ИзменилисьДанные = ИзменилисьДанные
		Или (ВедущийОбъект <> Форма["ДокументыФизическихЛицПрежняя"][ИмяИзмерения]
			И ЗначениеЗаполнено(Форма["ДокументыФизическихЛицПрежняя"][ИмяИзмерения]));
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Измерения Цикл
			Если Поле.Имя = ИмяИзмерения Тогда
				Продолжить;
			КонецЕсли; 
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Реквизиты Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменилисьДанные Тогда
		// Пишем новое состояние записи.
		МенеджерЗаписи = Форма.РеквизитФормыВЗначение("ДокументыФизическихЛиц");
		МенеджерЗаписи[ИмяИзмерения] = ВедущийОбъект;
		// Если нужно сохранить старую запись, то создадим новый менеджер записи.
		Если Форма["ДокументыФизическихЛицНоваяЗапись"] Тогда
			НоваяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,  МенеджерЗаписи);
			НоваяЗапись.Записать();
		Иначе
			Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.ДатаВыдачи)
				ИЛИ НЕ ЗначениеЗаполнено(МенеджерЗаписи.Период) Тогда
				МенеджерЗаписи.Удалить();
			Иначе
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИзменилисьДанные;
	
КонецФункции

Функция ЗаписатьНаборЗаписейДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект)
	
	ИзменилисьДанные = Ложь;
	
	СотрудникиКлиентСервер.ОбновитьНаборЗаписейИсторииДокументыФизическихЛиц(Форма, ВедущийОбъект);

	ИмяИзмерения = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"].Измерения[0].Имя;
	
	// Подготовим к сравнению набор исходных сведений.
	Набор = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьНаборЗаписей();
	Набор.Отбор[ИмяИзмерения].Установить(ВедущийОбъект);
	Набор.Прочитать();
	ТаблицаИсходногоНабора = Набор.Выгрузить();
	
	// Подготовим к сравнению набор, хранящийся в реквизите формы.
	ТаблицаНовогоНабора = Форма["ДокументыФизическихЛицНаборЗаписей"].Выгрузить();
	ТаблицаНовогоНабора.Колонки.Удалить("ИсходныйНомерСтроки");
	
	// Проверим необходимость записи нового набора.
	Если НЕ ОбщегоНазначения.КоллекцииИдентичны(ТаблицаИсходногоНабора, ТаблицаНовогоНабора, , "Представление") Тогда
		
		ИзменилисьДанные = Истина;
		МассивСохраняемыхСтрок = Новый Массив;
		
		Для Каждого СтрокаТаблицаНовогоНабора Из ТаблицаНовогоНабора Цикл
			
			СохранитьСтроку = Истина;
			СтрокиТаблицыИсходногоНабора = ТаблицаИсходногоНабора.НайтиСтроки(Новый Структура("Период,ВидДокумента", СтрокаТаблицаНовогоНабора.Период, СтрокаТаблицаНовогоНабора.ВидДокумента));
			Если СтрокиТаблицыИсходногоНабора.Количество() > 0 Тогда
				СтрокаТаблицаИсходногоНабора = СтрокиТаблицыИсходногоНабора[0];
				Если ОбщегоНазначения.КоллекцииИдентичны(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицаНовогоНабора), ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицаИсходногоНабора), , "Представление") Тогда
					СохранитьСтроку = Ложь;
				КонецЕсли;
				// Удалим строку из таблицы исходного набора.
				ТаблицаИсходногоНабора.Удалить(СтрокаТаблицаИсходногоНабора);
			КонецЕсли; 
			
			Если СохранитьСтроку Тогда
				МассивСохраняемыхСтрок.Добавить(СтрокаТаблицаНовогоНабора);
			КонецЕсли; 
			
		КонецЦикла;
		
		Для каждого СтрокаТаблицаИсходногоНабора Из ТаблицаИсходногоНабора Цикл
			УдаляемаяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(УдаляемаяЗапись, СтрокаТаблицаИсходногоНабора);
			УдаляемаяЗапись.Удалить();
		КонецЦикла;
		
		Для каждого СтрокаТаблицаНовогоНабора Из МассивСохраняемыхСтрок Цикл
			НоваяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицаНовогоНабора);
			НоваяЗапись.Записать();
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ИзменилисьДанные;
	
КонецФункции

#КонецОбласти

#Область РаботаСДополнительнымиФормами

Процедура СохранитьДанныеДополнительнойФормы(Форма, ИмяФормы, Отказ) Экспорт
	
	Перем ДополнительныеСвойства;
	
	Если ИмяФормы = "Справочник.Сотрудники.Форма.ЛичныеДанные" Тогда
		
		Если Форма.СозданиеНового Тогда
			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		КонецЕсли;
		
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			Форма,
			"ГражданствоФизическихЛиц",
			Форма.ФизическоеЛицоСсылка,
			,
			ДополнительныеСвойства);
			
		ЗаписатьЗаписьДокументыФизическихЛицПослеРедактированияВФорме(
			Форма,
			Форма.ФизическоеЛицоСсылка);
		
	ИначеЕсли ИмяФормы = "Справочник.Сотрудники.Форма.ВыплатаЗарплаты" Тогда
	
		Если Форма.СозданиеНового Тогда
			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		Иначе
			ДополнительныеСвойства = Неопределено;
		КонецЕсли;
		
		Если ОбменСБанкамиПоЗарплатнымПроектамФормы.ЗаписьЛицевыеСчетаСотрудниковПоЗарплатнымПроектамИзменена(Форма) Тогда
			
			Если Не ЗначениеЗаполнено(Форма.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ФизическоеЛицо) Тогда
				Форма.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ФизическоеЛицо = Форма.ФизическоеЛицоСсылка;
			КонецЕсли;
			
			ОбменСБанкамиПоЗарплатнымПроектам.СохранитьСведенияОЛицевомСчетеСотрудника(Форма, ДополнительныеСвойства);
			
		КонецЕсли;
		
		СтруктураВедущихОбъектов = Новый Структура();
		СтруктураВедущихОбъектов.Вставить("Организация", Форма.ТекущаяОрганизация);
		СтруктураВедущихОбъектов.Вставить("ФизическоеЛицо", Форма.ФизическоеЛицоСсылка);
		
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			Форма,
			"БухучетЗарплатыСотрудников",
			Форма.СотрудникСсылка,
			,
			ДополнительныеСвойства);
		
	ИначеЕсли ИмяФормы = "Справочник.ФизическиеЛица.Форма.Страхование" Тогда
		
		СохранитьНаборЗаписейИзДанныхФормы(Форма, "ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам");
		
		Если Форма.СозданиеНового Тогда
			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		КонецЕсли;
		
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			Форма,
			"СтатусыЗастрахованныхФизическихЛиц",
			Форма.ФизическоеЛицоСсылка,
			,
			ДополнительныеСвойства);
			
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			Форма,
			"СведенияОбИнвалидностиФизическихЛиц",
			Форма.ФизическоеЛицоСсылка,
			"ДействуетДо",
			ДополнительныеСвойства);
		
	ИначеЕсли ИмяФормы = "Справочник.Сотрудники.Форма.НалогНаДоходы" Тогда
		
		СохранитьНаборЗаписейИзДанныхФормы(Форма, "РеквизитыУведомленияИФНСНаЗачетАвансовыхПлатежей");
		
		Если Форма.СозданиеНового Тогда
			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		КонецЕсли;
		
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			Форма,
			"СтатусФизическихЛицКакНалогоплательщиковНДФЛ",
			Форма.ФизическоеЛицоСсылка,
			,
			ДополнительныеСвойства);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНаборЗаписейИзДанныхФормы(Форма, ИмяРегистра, ГоловнаяОрганизация = Неопределено)
	
	Если Не Форма["НаборЗаписей" + ИмяРегистра + "Прочитан"] Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	Набор.Отбор.ФизическоеЛицо.Установить(Форма.ФизическоеЛицоСсылка);
	
	Если ГоловнаяОрганизация = Неопределено Тогда
		
		СтруктураПараметров = Новый Структура("ГоловнаяОрганизация");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Форма);
		Если ЗначениеЗаполнено(СтруктураПараметров.ГоловнаяОрганизация) Тогда
			Набор.Отбор.ГоловнаяОрганизация.Установить(ЗарплатаКадры.ГоловнаяОрганизация(СтруктураПараметров.ГоловнаяОрганизация));
		КонецЕсли;
		
	Иначе
		Набор.Отбор.ГоловнаяОрганизация.Установить(ЗарплатаКадры.ГоловнаяОрганизация(ГоловнаяОрганизация));
	КонецЕсли;
	
	Набор.Прочитать();
	ДанныеНабора = Набор.Выгрузить();
	
	ВыгружаемыеКолонкиДанныхФормы = "";
	Для Каждого Колонка Из ДанныеНабора.Колонки Цикл
		ВыгружаемыеКолонкиДанныхФормы = ВыгружаемыеКолонкиДанныхФормы + "," + Колонка.Имя;
	КонецЦикла;
	
	ВыгружаемыеКолонкиДанныхФормы = Сред(ВыгружаемыеКолонкиДанныхФормы, 2);
	
	ДанныеФормыНабор = Форма["НаборЗаписей" + ИмяРегистра].Выгрузить(, ВыгружаемыеКолонкиДанныхФормы);
	Если НЕ ОбщегоНазначения.КоллекцииИдентичны(ДанныеНабора, ДанныеФормыНабор) Тогда
	
		Набор.Загрузить(ДанныеФормыНабор);
		Если Форма.СозданиеНового Тогда
			Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		КонецЕсли;
		
		Набор.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПостроительМеню

Функция ОписаниеМенюВводаНаОсновании(ПараметрыПостроения) Экспорт
	
	ПунктыМеню = Новый Массив;
	
	ПунктыМеню.Добавить("Документы.ПриемНаРаботу");
	ПунктыМеню.Добавить("Документы.КадровыйПеревод");
	ПунктыМеню.Добавить("Документы.Увольнение");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.БольничныйЛист");
	ПунктыМеню.Добавить("Документы.Отпуск");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.ИсполнительныйЛист");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.ОтпускБезСохраненияОплаты");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.СправкаНДФЛ");
	ПунктыМеню.Добавить("Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ");
	ПунктыМеню.Добавить("Документы.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ");
	ПунктыМеню.Добавить("Документы.ПрекращениеСтандартныхВычетовНДФЛ");
	ПунктыМеню.Добавить("Документы.ВозвратНДФЛ");
	ПунктыМеню.Добавить("Документы.АвансовыйПлатежИностранцаПоНДФЛ");
	ПунктыМеню.Добавить("Документы.ОперацияНалоговогоУчетаПоНДФЛ");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.ОперацияУчетаПоСтраховымВзносам");
	ПунктыМеню.Добавить("Документы.ИсходящаяСправкаОЗаработкеДляРасчетаПособий");
	
	ИсключаемыеПунктыМеню = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		Модуль.УстановитьИсключаемыеПунктыМенюВводаНаОснованииСотрудников(ИсключаемыеПунктыМеню);
	КонецЕсли; 
	
	Если ПараметрыПостроения <> Неопределено Тогда
		
		Если НЕ ПараметрыПостроения.ОформленПоТрудовомуДоговору
			ИЛИ ЗначениеЗаполнено(ПараметрыПостроения.ДатаУвольнения) Тогда
		
			ИсключаемыеПунктыМеню.Добавить("Документы.КадровыйПеревод");
			ИсключаемыеПунктыМеню.Добавить("Документы.Увольнение");
			ИсключаемыеПунктыМеню.Добавить("Документы.БольничныйЛист");
			ИсключаемыеПунктыМеню.Добавить("Документы.Отпуск");
			ИсключаемыеПунктыМеню.Добавить("Документы.ИсполнительныйЛист");
			ИсключаемыеПунктыМеню.Добавить("Документы.ОтпускБезСохраненияОплаты");
			
			Если НЕ ПараметрыПостроения.ОформленПоТрудовомуДоговору Тогда
				ИсключаемыеПунктыМеню.Добавить("Документы.ИсходящаяСправкаОЗаработкеДляРасчетаПособий");
			КонецЕсли; 
		
		КонецЕсли; 
	
		Если ПараметрыПостроения.ОформленПоТрудовомуДоговору Тогда
		
			ИсключаемыеПунктыМеню.Добавить("Документы.ПриемНаРаботу");
			
		КонецЕсли;
		
	КонецЕсли; 
	
	ОписаниеМеню = СотрудникиФормы.РазделМеню(НСтр("ru='Оформить документ'"), ПунктыМеню, ИсключаемыеПунктыМеню);
	
	ПунктыМенюНеНастроенныхОбъектов = СотрудникиФормы.ПунктыМенюНеНастроенныхОбъектов(ОписаниеМеню);
	Если ПунктыМенюНеНастроенныхОбъектов.Количество() > 0 Тогда
		
		ПредставленияДоступныхОбъектов = ЗарплатаКадры.ПредставленияДоступныхОбъектовМетаданных(ПунктыМенюНеНастроенныхОбъектов, "Добавление");
		СотрудникиФормы.ДобавитьПунктыВРазделМеню(ОписаниеМеню, ПунктыМенюНеНастроенныхОбъектов, ПредставленияДоступныхОбъектов);
		
	КонецЕсли; 
	
	Возврат ОписаниеМеню;
	
КонецФункции

#КонецОбласти

#КонецОбласти
