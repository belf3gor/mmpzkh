
#Область ПрограммныйИнтерфейс

Функция СобратьДанныеЧеков(ДокументСсылка, НомерСекции = 0, ВерсияФормата, АдресУстановкиККТ, ПараметрыОбработчика = Неопределено) Экспорт
	
	МассивЧеков = Новый Массив;
	
	Если ПараметрыОбработчика = Неопределено Тогда
		ПараметрыОбработчика = Новый Структура;
	КонецЕсли;
	
	ПараметрыПечатиЧека = ПодготовитьПараметрыПечатиЧека(ДокументСсылка, ПараметрыОбработчика);
	
	РеквизитыПечатиЧека = ПараметрыПечатиЧека.РеквизитыПечатиЧека;
	Если РеквизитыПечатиЧека.Количество() = 0 Тогда
		Возврат МассивЧеков;
	КонецЕсли;
	
	Для Каждого РеквизитПечатиЧека ИЗ РеквизитыПечатиЧека Цикл
		
		Реквизиты = НовыйРеквизитыПечатиЧека();
		
		ЗаполнитьЗначенияСвойств(Реквизиты, РеквизитПечатиЧека);
		
		ПрименяетсяУСНПатент                    = УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация, Реквизиты.Дата);
		ПрименяетсяЕНВД                         = УчетнаяПолитика.ПлательщикЕНВД(Реквизиты.Организация, Реквизиты.Дата);
		ПрименяетсяОсобыйПорядокНалогообложения = УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Реквизиты.Организация, Реквизиты.Дата);
		
		ПрименяетсяТолькоПатент                 = ПрименяетсяОсобыйПорядокНалогообложения И ПрименяетсяУСНПатент;
		ПрименяетсяТолькоЕНВД                   = ПрименяетсяОсобыйПорядокНалогообложения И ПрименяетсяЕНВД;
		
		Если ПрименяетсяТолькоПатент ИЛИ ЗначениеЗаполнено(Реквизиты.Патент) Тогда
			НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.Патент;
		ИначеЕсли ПрименяетсяТолькоЕНВД Тогда 
			НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
		ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходы(Реквизиты.Организация, Реквизиты.Дата) Тогда
			НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход;
		ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Дата) Тогда
			НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход;
		Иначе
			НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
		КонецЕсли;
		
		Реквизиты.Вставить("НалоговыйРежим", НалоговыйРежим);
		Реквизиты.Вставить("НомерСекции",    НомерСекции);
		
		Если ПараметрыОбработчика.Свойство("ТипОбъекта") Тогда
			Если ПараметрыОбработчика.ТипОбъекта = "ОбщийМодуль" Тогда
				МодульОбработчика = ОбщегоНазначения.ОбщийМодуль(ПараметрыОбработчика.ИмяОбъекта);
			Иначе // документ
				МодульОбработчика = Документы[ПараметрыОбработчика.ИмяОбъекта];
			КонецЕсли;
		Иначе // документ по ссылке
			МодульОбработчика = Документы[ДокументСсылка.Метаданные().Имя];
		КонецЕсли;
		
		Реквизиты.Вставить("НаименованиеВСтрокеЧека", МодульОбработчика.НаименованиеВСтрокеЧека(Реквизиты));
		
		ПараметрыОперацииФискализацииЧека = ПараметрыОперацииФискализацииЧека(Реквизиты, ПараметрыПечатиЧека, ВерсияФормата, АдресУстановкиККТ);
		
		МассивЧеков.Добавить(ПараметрыОперацииФискализацииЧека);
		
	КонецЦикла;

	Возврат МассивЧеков;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция НовыйРеквизитыПечатиЧека()
	
	РеквизитыПечатиЧека = Новый Структура;
	
	РеквизитыПечатиЧека.Вставить("Ссылка",                             Неопределено);
	РеквизитыПечатиЧека.Вставить("Дата",                               ТекущаяДата());
	РеквизитыПечатиЧека.Вставить("Номер",                              "1");
	РеквизитыПечатиЧека.Вставить("Организация",                        Справочники.Организации.ПустаяСсылка());
	РеквизитыПечатиЧека.Вставить("Контрагент",                         Неопределено);
	РеквизитыПечатиЧека.Вставить("ВыводитьКонтрагентаВЧеке",           ЛОЖЬ);
	РеквизитыПечатиЧека.Вставить("ВидОперации",                        Неопределено);
	РеквизитыПечатиЧека.Вставить("Выдать",                             "");
	РеквизитыПечатиЧека.Вставить("ПринятоОт",                          "");
	РеквизитыПечатиЧека.Вставить("Основание",                          "");
	РеквизитыПечатиЧека.Вставить("Патент",                             Справочники.Патенты.ПустаяСсылка());
	РеквизитыПечатиЧека.Вставить("СтавкаНДС",                          Перечисления.СтавкиНДС.БезНДС);
	РеквизитыПечатиЧека.Вставить("СуммаДокумента",                     0);
	РеквизитыПечатиЧека.Вставить("ВалютаДокумента",                    ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	РеквизитыПечатиЧека.Вставить("ДоговорПлатежногоАгента",            Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	РеквизитыПечатиЧека.Вставить("ПлатежныйАгент",                     Справочники.Контрагенты.ПустаяСсылка());
	РеквизитыПечатиЧека.Вставить("НесколькоДоговоровПлатежногоАгента", ЛОЖЬ);
	РеквизитыПечатиЧека.Вставить("ТипОплаты",                          Неопределено);
	РеквизитыПечатиЧека.Вставить("ТипРасчета",                         Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
	РеквизитыПечатиЧека.Вставить("НалоговыйРежим",                     Перечисления.ТипыСистемНалогообложенияККТ.ОСН);
	РеквизитыПечатиЧека.Вставить("НаименованиеВСтрокеЧека",            "");
	РеквизитыПечатиЧека.Вставить("НомерСекции",                        0);
	РеквизитыПечатиЧека.Вставить("ОписаниеУдержанияДляЧека",           "");
	РеквизитыПечатиЧека.Вставить("ИдентификаторФискальнойЗаписи",      "");
	
	Возврат РеквизитыПечатиЧека;
КонецФункции

Функция ПодготовитьПараметрыПечатиЧека(ДокументСсылка, ПараметрыОбработчика)
	
	Перем ТаблицаРезультата;
	
	ИменаТаблиц = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",                 ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("ДатаОчереди", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДатаРасчета", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Дата"));
	
	Если ПараметрыОбработчика.Свойство("ТипОбъекта") Тогда
		Если ПараметрыОбработчика.ТипОбъекта = "ОбщийМодуль" Тогда
			МодульОбработчика = ОбщегоНазначения.ОбщийМодуль(ПараметрыОбработчика.ИмяОбъекта);
		Иначе // документ
			МодульОбработчика = Документы[ПараметрыОбработчика.ИмяОбъекта];
		КонецЕсли;
	Иначе // документ по ссылке
		МодульОбработчика = Документы[ДокументСсылка.Метаданные().Имя];
	КонецЕсли;
	
	Запрос.Текст = МодульОбработчика.ТекстЗапросаПараметрыПечатиЧека(ДокументСсылка, ИменаТаблиц);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыПечатиЧека = Новый Структура;
	Для Индекс = 0 По ИменаТаблиц.Количество()-1 Цикл
		ИмяТаблицы = ИменаТаблиц[Индекс];
		
		Если ПараметрыПечатиЧека.Свойство(ИмяТаблицы, ТаблицаРезультата) Тогда
			// Документ может содержать товарные части как счета так и реализации
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат[Индекс].Выгрузить(), ТаблицаРезультата);
		Иначе
			ТаблицаРезультата = Результат[Индекс].Выгрузить();
		КонецЕсли; 
		ПараметрыПечатиЧека.Вставить(ИмяТаблицы, ТаблицаРезультата);
	КонецЦикла; 
	
	Возврат ПараметрыПечатиЧека;
	
КонецФункции

Функция ПараметрыОперацииФискализацииЧека(Реквизиты, ДанныеПечатиЧека, ВерсияФормата, АдресУстановкиККТ) Экспорт
	//Шапка чека
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ОбщиеПараметры.ИндивидуальныйРежимПодготовкиДанныхКПередачеВОФД = Истина;
	
	ПодготовитьДанныеКПередачеВОФД = Константы.ПодготовитьДанныеКПередачеВОФД.Получить();
	
	// Сумма расчета - сумма всех позиций чека
	СуммаРасчетаПоЧеку = 0;
	СуммаПостоплатойПоЧеку = 0;
	СуммаПредоплатойПоЧеку = 0;
	
	ОбщиеПараметры.ТипРасчета = Реквизиты.ТипРасчета;
		
	ОбщиеПараметры.Электронно = Ложь;
	
	//Параметры принтера чеков ЕНВД
	ОбщиеПараметры.НомерКассы        = "00001";
	ОбщиеПараметры.НомерЧека         = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер, Истина, Истина);
	ОбщиеПараметры.НомерСмены        = 1;
	ОбщиеПараметры.ДатаВремя         = Реквизиты.Дата;
	ОбщиеПараметры.ДокументОснование = Реквизиты.Ссылка;
	ОбщиеПараметры.Организация       = Реквизиты.Организация;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Организация, Реквизиты.Дата);
	
	ОбщиеПараметры.ОрганизацияНазвание       = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
	ОбщиеПараметры.ОрганизацияИНН            = СведенияОбОрганизации.ИНН;
	ОбщиеПараметры.ОрганизацияКПП            = СведенияОбОрганизации.КПП;
	ОбщиеПараметры.АдресМагазина             = ?(ЗначениеЗаполнено(АдресУстановкиККТ), АдресУстановкиККТ, СведенияОбОрганизации.ФактическийАдрес);
	
	Если ЗначениеЗаполнено(Реквизиты.Контрагент)
		И ТипЗнч(Реквизиты.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Контрагент, Реквизиты.Дата);
		
		Если Реквизиты.ВыводитьКонтрагентаВЧеке 
			И (СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
			ИЛИ ЗначениеЗаполнено(СведенияОКонтрагенте.ИНН)) Тогда
			
			ОбщиеПараметры.Получатель    = СведенияОКонтрагенте.НаименованиеДляПечатныхФорм;
			ОбщиеПараметры.ПолучательИНН = СведенияОКонтрагенте.ИНН;
			
		КонецЕсли; 
		
		ОбщиеПараметры.ПокупательEmail = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Реквизиты.Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
		ОбщиеПараметры.ПокупательНомер = ОбщегоНазначенияБПКлиентСервер.ОставитьВСтрокеТолькоЦифры(
			УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Реквизиты.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента));
			
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.Контрагент)
			и ТипЗнч(Реквизиты.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
		ОбщиеПараметры.ПокупательEmail = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Реквизиты.Контрагент, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
		ОбщиеПараметры.ПокупательНомер = ОбщегоНазначенияБПКлиентСервер.ОставитьВСтрокеТолькоЦифры(
			УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Реквизиты.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица));
		
	КонецЕсли;
		
	ОбщиеПараметры.СистемаНалогообложения = Реквизиты.НалоговыйРежим;
	
	ДанныеКассира = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛицаТекущегоПользователя(Реквизиты.Организация, Реквизиты.Дата);
	
	Если ДанныеКассира.Представление <> Неопределено Тогда
		ОбщиеПараметры.Кассир = СокрЛП(СтрШаблон("%1 %2", Строка(ДанныеКассира.Должность), ДанныеКассира.Представление));
	Иначе
		ОбщиеПараметры.Кассир = НСтр("ru = 'Администратор'");
	КонецЕсли;
	
	ОбщиеПараметры.КассирИНН = ДанныеКассира.ИНН;
	
	Если Реквизиты.Свойство("ИдентификаторФискальнойЗаписи") и НЕ ПустаяСтрока(Реквизиты.ИдентификаторФискальнойЗаписи) Тогда
		ОбщиеПараметры.ИдентификаторФискальнойЗаписи = Реквизиты.ИдентификаторФискальнойЗаписи;
		ОплачиваемыеДокументы = ДанныеПечатиЧека.ОплачиваемыеДокументы.Скопировать(Новый Структура("ИдентификаторФискальнойЗаписи", Реквизиты.ИдентификаторФискальнойЗаписи));
		ОплачиваемаяНоменклатура = ДанныеПечатиЧека.ОплачиваемаяНоменклатура.Скопировать(Новый Структура("ИдентификаторФискальнойЗаписи", Реквизиты.ИдентификаторФискальнойЗаписи));
	Иначе
		ОплачиваемыеДокументы = ДанныеПечатиЧека.ОплачиваемыеДокументы;
		ОплачиваемаяНоменклатура = ДанныеПечатиЧека.ОплачиваемаяНоменклатура;
	КонецЕсли;

	//Строки чека
	ОплачиваемаяНоменклатура.Индексы.Добавить("Документ");
	ОплачиваемаяНоменклатура.Индексы.Добавить("СтавкаНДС");
	
	ЭтоВерсия105 = ЗначениеЗаполнено(ВерсияФормата) И НЕ (ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.0.5.0", ВерсияФормата) > 0);
	ЭтоВерсия110 = ЗначениеЗаполнено(ВерсияФормата) И НЕ (ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.1.0.0", ВерсияФормата) > 0);
	
	СписокНоменклатуры          = ОбщегоНазначения.ВыгрузитьКолонку(ОплачиваемаяНоменклатура, "Номенклатура", Истина);
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(СписокНоменклатуры);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Реквизиты);
	
	СведенияОСпискеНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ПараметрыОбъекта, Истина, Ложь);
	
	ЕстьОбщийКомитентПоЧеку       = Неопределено;
	ЕстьОбщийПлатежныйАгентПоЧеку = Неопределено;
	
	ДоговорПлатежногоАгента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ПлатежныйАгент          = Справочники.Контрагенты.ПустаяСсылка();
	КомитентПоЧеку          = НовыйСведенияОКомитенте();
	
	//Платежный агент
	Если ЗначениеЗаполнено(Реквизиты.ДоговорПлатежногоАгента)
		ИЛИ ЗначениеЗаполнено(Реквизиты.ПлатежныйАгент) Тогда
		Если Реквизиты.НесколькоДоговоровПлатежногоАгента И НЕ ЭтоВерсия110 Тогда
			ТекстСообщения = НСтр("ru = 'В чеке может быть указан только один договор платежного агента.'");
			Возврат Неопределено;
		КонецЕсли;
		
		ЕстьОбщийПлатежныйАгентПоЧеку = Истина;
		ДоговорПлатежногоАгента       = Реквизиты.ДоговорПлатежногоАгента;
		ПлатежныйАгент                = Реквизиты.ПлатежныйАгент;
		
	ИначеЕсли ОплачиваемаяНоменклатура.Количество() > 0 И ЭтоВерсия105 Тогда 
		
		МассивТоваровНаКомиссии = Новый Массив;
		
		Для каждого СведенияОНоменклатуре Из СведенияОСпискеНоменклатуры Цикл
			Если СведенияОНоменклатуре.Значение.Комиссионный Тогда
				МассивТоваровНаКомиссии.Добавить(СведенияОНоменклатуре.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ОплачиваемаяНоменклатура.Сортировать("ДатаДокумента");
		
		СведенияОКомитентах = ПолучитьСведенияОКомитентах(МассивТоваровНаКомиссии, Реквизиты.Организация, ОплачиваемаяНоменклатура[0].ДатаДокумента);
	КонецЕсли;
	
	Отбор = Новый Структура("Документ, СтавкаНДС");
	Для каждого ОплачиваемыйДокумент Из ОплачиваемыеДокументы Цикл
		ЗаполнитьЗначенияСвойств(Отбор, ОплачиваемыйДокумент);
		Если ОплачиваемыйДокумент.СуммаСкидкиПоДокументу <> 0 Тогда
			ТаблицаСчетаНаОплату = ОплачиваемаяНоменклатура.Скопировать(Новый Структура("Документ", ОплачиваемыйДокумент.Документ));
			СуммаСоСкидкой = ТаблицаСчетаНаОплату.Итог("Сумма") - ОплачиваемыйДокумент.СуммаСкидкиПоДокументу;
			
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(ОплачиваемыйДокумент.СуммаСкидкиПоДокументу, ТаблицаСчетаНаОплату, "СуммаСкидок", "Сумма");
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаСоСкидкой, ТаблицаСчетаНаОплату, "Сумма");
			
			СуммаНДССоСкидкой    = ?(ТаблицаСчетаНаОплату.Итог("Сумма") = 0, 0, Окр(ТаблицаСчетаНаОплату.Итог("СуммаНДС") * СуммаСоСкидкой / ТаблицаСчетаНаОплату.Итог("Сумма"), 2));
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаНДССоСкидкой, ТаблицаСчетаНаОплату, "СуммаНДС");
			
			ОплачиваемыеПозицииСчета = ТаблицаСчетаНаОплату.Скопировать(Отбор);
		Иначе
			ОплачиваемыеПозицииСчета = ОплачиваемаяНоменклатура.Скопировать(Отбор);
		КонецЕсли; 
		
		СуммаВзаиморасчетов = ?(ОплачиваемыйДокумент.РасчетыВУсловныхЕдиницах, ОплачиваемыйДокумент.СуммаВзаиморасчетов, ОплачиваемыйДокумент.СуммаОплаты);
		
		Если ОплачиваемыеПозицииСчета.Количество() = 0  ИЛИ (ОплачиваемыеПозицииСчета.Итог("Сумма") <> СуммаВзаиморасчетов И НЕ ЭтоВерсия105) Тогда
			
			Если ЗначениеЗаполнено(ОплачиваемыйДокумент.СтавкаНДС) Тогда
				СтавкаНДС = УчетНДСВызовСервераПовтИсп.РасчетнаяСтавкаНДС(ОплачиваемыйДокумент.СтавкаНДС);
			Иначе
				СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли; 
			
			// Оплата без номенклатуры
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			СтрокаПозицииЧека.Наименование           = Реквизиты.НаименованиеВСтрокеЧека;
			СтрокаПозицииЧека.Количество             = 1;
			СтрокаПозицииЧека.Цена                   = ОплачиваемыйДокумент.СуммаОплаты;
			СтрокаПозицииЧека.ЦенаСоСкидками         = ОплачиваемыйДокумент.СуммаОплаты;
			СтрокаПозицииЧека.Сумма                  = ОплачиваемыйДокумент.СуммаОплаты;
			СтрокаПозицииЧека.СтавкаНДС              = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДСдляККТ(СтавкаНДС, ЭтоВерсия105);
			
			СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ОплачиваемыйДокумент.СуммаОплаты, Истина, 
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
			
			СтрокаПозицииЧека.СуммаНДС = Окр(СуммаНДС, 2);
			
			СтрокаПозицииЧека.ПризнакСпособаРасчета  = ?(ЭтоВерсия105,Перечисления.ПризнакиСпособаРасчета.Аванс, Неопределено);
			СтрокаПозицииЧека.ПризнакПредметаРасчета = ?(ЭтоВерсия105,Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата, Неопределено);
			СтрокаПозицииЧека.НомерСекции            = Реквизиты.НомерСекции;
			СтрокаПозицииЧека.НомерСтрокиТовара      = ОбщиеПараметры.ПозицииЧека.Количество()+1;
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			
			СуммаРасчетаПоЧеку = СуммаРасчетаПоЧеку + ОплачиваемыйДокумент.СуммаОплаты;
		Иначе
			// Оплата счета в уе
			Если ОплачиваемыйДокумент.РасчетыВУсловныхЕдиницах Тогда
				КурсОплаты = ОплачиваемыйДокумент.СуммаОплаты/СуммаВзаиморасчетов;
				
				// Используем распределение сумм по строкам документа вместо построчного расчета, чтобы избежать проблем с форматологическим контролем из-за ошибок округления.
				ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(ОплачиваемыеПозицииСчета.Итог("Сумма") * КурсОплаты, ОплачиваемыеПозицииСчета, "Сумма");
				ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(ОплачиваемыеПозицииСчета.Итог("СуммаНДС") * КурсОплаты, ОплачиваемыеПозицииСчета, "СуммаНДС");
				
				Для каждого СтрокаСчета Из ОплачиваемыеПозицииСчета Цикл
					// Если по строке есть скидка - то пересчитываем цену по курсу, иначе используем более точный метод расчета от суммы в рублях.
					СтрокаСчета.Цена = ?(
					ОплачиваемыйДокумент.СуммаСкидкиПоДокументу <> 0 ИЛИ СтрокаСчета.СуммаСкидок <> 0, 
					Окр(СтрокаСчета.Цена * КурсОплаты, 2), 
					Окр(СтрокаСчета.Сумма/СтрокаСчета.Количество, 2));
				КонецЦикла; 
			КонецЕсли; 
			
			// Признак предоплаты устанавливается по всем позициям счета под одну ставку
			// Сравниваем сумму по счету и сумму оплаты поступившую на текущий момент
			ОстатокКОплате = ОплачиваемыеПозицииСчета.Итог("Сумма") - ОплачиваемыйДокумент.СуммаОплатыВсего;
			Если ОстатокКОплате > 0   Тогда 
				ПризнакПредоплатыПоСчету = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
			Иначе
				ПризнакПредоплатыПоСчету = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
			КонецЕсли;
			
			Если НЕ ПодготовитьДанныеКПередачеВОФД ИЛИ ОплачиваемыйДокумент.СуммаОплаты = 0 Тогда
				СуммаПостоплатойПоЧеку = СуммаПостоплатойПоЧеку + ОстатокКОплате;
				СуммаПредоплатойПоЧеку = СуммаПредоплатойПоЧеку + (ОплачиваемыйДокумент.СуммаОплатыВсего - ОплачиваемыйДокумент.СуммаОплаты);
			Иначе
				// Постоплату и предоплату считаем только для передачи товара (в соответствии с методическими указаниями ФНС). 
				// В случаях приема или выдачи денежных средств постоплата не указывается.
				СуммаСчета = ОплачиваемыеПозицииСчета.Итог("Сумма");
				Если ОплачиваемыйДокумент.СуммаОплаты <> СуммаСчета Тогда
					СуммыДокумента = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ОплачиваемыйДокумент.СуммаОплаты, ОбщегоНазначения.ВыгрузитьКолонку(ОплачиваемыеПозицииСчета, "Сумма"), 2);
					
					
					ОплачиваемыеПозицииСчета.ЗагрузитьКолонку(СуммыДокумента, "Сумма");
					ОплачиваемыеПозицииСчета.ЗагрузитьКолонку(СуммыДокумента, "Цена");
					
					СуммаСкидок = ?(СуммаСчета = 0, 0, Окр(ОплачиваемыеПозицииСчета.Итог("СуммаСкидок") * ОплачиваемыйДокумент.СуммаОплаты/СуммаСчета, 2));
					ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаСкидок, ОплачиваемыеПозицииСчета, "СуммаСкидок");
					
					СуммаНДСДокумента = ?(СуммаСчета = 0, 0, Окр(ОплачиваемыеПозицииСчета.Итог("СуммаНДС") * ОплачиваемыйДокумент.СуммаОплаты/СуммаСчета, 2));
					ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаНДСДокумента, ОплачиваемыеПозицииСчета, "СуммаНДС");
				КонецЕсли;
				
				// Количество всегда 1 при предоплате и оплате кредита (в соответствии с методуказаниями)
				ОплачиваемыеПозицииСчета.ЗаполнитьЗначения(1, "Количество");
			КонецЕсли; 
			
			// Оплата в разрезе номенклатуры счета
			Для каждого СтрокаСчета Из ОплачиваемыеПозицииСчета Цикл
				СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
				
				Если НЕ ЭтоВерсия105 Тогда
					ПризнакСпособаРасчета = Неопределено;
				ИначеЕсли СтрокаСчета.КоличествоОтгружено >= СтрокаСчета.Количество Тогда
					// Если передача не сопровождается оплатой
					Если ОплачиваемыйДокумент.СуммаОплаты = 0 Тогда
						Если ОплачиваемыйДокумент.СуммаОплатыВсего = 0 Тогда
							// Товар не был оплачен ранее.
							ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
						ИначеЕсли ОстатокКОплате = 0 Тогда
							// Товар был ранее оплачен полностью (нет остатка к оплате по ставке).
							ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
						Иначе
							// Товар был оплачен ранее частично.
							ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
						КонецЕсли
					Иначе
						// Если передача сопровождается оплатой
						ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
					КонецЕсли; 
				Иначе
					ПризнакСпособаРасчета = ПризнакПредоплатыПоСчету;
				КонецЕсли;
				
				СтрокаПозицииЧека.ПризнакСпособаРасчета  = ПризнакСпособаРасчета;
				Если ПризнакСпособаРасчета = Неопределено Тогда
					ПризнакПредметаРасчета = Неопределено;
				ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой 
					ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой
					ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты Тогда
					
					Если СтрокаСчета.ЭтоУслуга Тогда
						ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга;
					Иначе
						ПризнакПредметаРасчета = ?(СведенияОСпискеНоменклатуры[СтрокаСчета.Номенклатура].АлкогольнаяПродукция, 
						Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар, 
						Перечисления.ПризнакиПредметаРасчета.Товар);
						
					КонецЕсли; 
				Иначе
					
					ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
				КонецЕсли;
				
				СтрокаПозицииЧека.ПризнакПредметаРасчета = ПризнакПредметаРасчета;
				
				ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, СтрокаСчета);
				
				// Цену со скидкой получаем расчетным путем
				СтрокаПозицииЧека.ЦенаСоСкидками = ?(СтрокаСчета.СуммаСкидок = 0, СтрокаСчета.Цена, Окр(СтрокаСчета.Сумма/СтрокаСчета.Количество,2));
				
				СтавкаНДС = СтрокаСчета.СтавкаНДС;
				СуммаНДС  = СтрокаСчета.СуммаНДС;
				
				Если ПодготовитьДанныеКПередачеВОФД Тогда
					Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита Тогда 
						СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						СуммаНДС  = 0;
					ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная 
						ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная Тогда 
						
						СтавкаНДС = УчетНДСВызовСервераПовтИсп.РасчетнаяСтавкаНДС(ОплачиваемыйДокумент.СтавкаНДС);
						СуммаНДС = СтрокаСчета.СуммаНДС;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаПозицииЧека.СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДСдляККТ(СтавкаНДС, ЭтоВерсия105);
				СтрокаПозицииЧека.СуммаНДС  = СуммаНДС;
				
				СтрокаПозицииЧека.НомерСекции            = Реквизиты.НомерСекции;
				СтрокаПозицииЧека.НомерСтрокиТовара      = ОбщиеПараметры.ПозицииЧека.Количество()+1;
				
				// Если комитент в шапке не задан
				Если ЭтоВерсия105 Тогда
					Если ЗначениеЗаполнено(СтрокаСчета.ДоговорПлатежногоАгента)
						ИЛИ ЗначениеЗаполнено(СтрокаСчета.ПлатежныйАгент) Тогда
						// Комиссионная услуга - общего комитента по чеку указать нельзя.
						ЕстьОбщийКомитентПоЧеку = Ложь;
						
						РеквизитыАгента = РеквизитыПлатежногоАгента(СтрокаСчета.ДоговорПлатежногоАгента, СтрокаСчета.ПлатежныйАгент, Реквизиты.Дата);
						ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, РеквизитыАгента, "ДанныеАгента, ДанныеПоставщика, ПризнакАгентаПоПредметуРасчета");
						Если ЕстьОбщийПлатежныйАгентПоЧеку = Неопределено Тогда
							
							// Общего платежного агента нет и никогда не было
							ДоговорПлатежногоАгента       = СтрокаСчета.ДоговорПлатежногоАгента;
							ПлатежныйАгент                = СтрокаСчета.ПлатежныйАгент;
							ЕстьОбщийПлатежныйАгентПоЧеку = Истина;
							
						ИначеЕсли ЕстьОбщийПлатежныйАгентПоЧеку = Истина
							И ДоговорПлатежногоАгента <> СтрокаСчета.ДоговорПлатежногоАгента Тогда
							
							// Платежный агент по текущей строке не равен общему платежному агента
							ЕстьОбщийПлатежныйАгентПоЧеку = Ложь;
						КонецЕсли; 
					Иначе
						ЕстьОбщийПлатежныйАгентПоЧеку = Ложь;
						
						СведенияОКомитенте = СведенияОКомитентах[СтрокаСчета.Номенклатура];
						Если СведенияОКомитенте <> Неопределено Тогда
							// Комиссионный товар
							СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.Комиссионер;
							ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека.ДанныеПоставщика, СведенияОКомитенте);
							
							Если ЕстьОбщийКомитентПоЧеку = Неопределено Тогда
								
								// Общего комитента нет и никогда не было
								КомитентПоЧеку          = СведенияОКомитенте;
								ЕстьОбщийКомитентПоЧеку = Истина;
								
							ИначеЕсли ЕстьОбщийКомитентПоЧеку = Истина 
								И СведенияОКомитенте.Контрагент <> КомитентПоЧеку.Контрагент Тогда 
								
								// Комитент по строке не равен общему комитенту по чеку
								ЕстьОбщийКомитентПоЧеку = Ложь;
							КонецЕсли; 
						Иначе
							// Некомиссионный товар или услуга - общего комитента по чеку указать нельзя.
							ЕстьОбщийКомитентПоЧеку = Ложь;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
				
				ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
				
				СуммаРасчетаПоЧеку = СуммаРасчетаПоЧеку + СтрокаСчета.Сумма;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Договор агента устанавливаем только если он совпадает в шапке и по строкам, или в шапке не задан а по строкам одинаковый.
	Если ЕстьОбщийПлатежныйАгентПоЧеку = Истина Тогда
		СтруктураРеквизитов = РеквизитыПлатежногоАгента(ДоговорПлатежногоАгента, ПлатежныйАгент, Реквизиты.Дата);
		ЗаполнитьЗначенияСвойств(ОбщиеПараметры, СтруктураРеквизитов, "ДанныеАгента, ДанныеПоставщика, ПризнакАгента");
	ИначеЕсли ЕстьОбщийКомитентПоЧеку = Истина Тогда 
		ОбщиеПараметры.ПризнакАгента = Перечисления.ПризнакиАгента.Комиссионер;
		ЗаполнитьЗначенияСвойств(ОбщиеПараметры.ДанныеПоставщика, КомитентПоЧеку);
	КонецЕсли; 
	
	Если Реквизиты.СуммаДокумента <> 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Реквизиты.ТипОплаты);
		СтрокаОплаты.Вставить("Сумма", Реквизиты.СуммаДокумента);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли; 
	
	Если СуммаРасчетаПоЧеку <> Реквизиты.СуммаДокумента Тогда
		// Для ФФД 1.0, документов без табличной части, а также случаев когда заплатили больше чем сумма по счетам добавляем служебную строку в чек 
		Если НЕ ЭтоВерсия105 ИЛИ Реквизиты.СуммаДокумента > СуммаРасчетаПоЧеку Тогда
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			
			Если ЗначениеЗаполнено(Реквизиты.СтавкаНДС) Тогда
				СтавкаНДСПоУмолчанию = Реквизиты.СтавкаНДС;
			Иначе
				ЭтоПлательщикНДС     = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Дата);
				СтавкаНДСПоУмолчанию = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Реквизиты.Дата, ЭтоПлательщикНДС);
			КонецЕсли;
			
			СтавкаНДС = УчетНДСВызовСервераПовтИсп.РасчетнаяСтавкаНДС(СтавкаНДСПоУмолчанию);
			
			СтрокаПозицииЧека.Наименование      = Реквизиты.НаименованиеВСтрокеЧека;
			СтрокаПозицииЧека.Количество        = 1;
			СтрокаПозицииЧека.Цена              = Реквизиты.СуммаДокумента - СуммаРасчетаПоЧеку;
			СтрокаПозицииЧека.ЦенаСоСкидками    = Реквизиты.СуммаДокумента - СуммаРасчетаПоЧеку;
			СтрокаПозицииЧека.Сумма             = Реквизиты.СуммаДокумента - СуммаРасчетаПоЧеку;
			СтрокаПозицииЧека.СтавкаНДС         = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДСдляККТ(СтавкаНДС, ЭтоВерсия105);
			
			СуммаНДС  = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаПозицииЧека.Сумма, Истина, 
							УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
			
			СтрокаПозицииЧека.СуммаНДС          = Окр(СуммаНДС, 2);
			СтрокаПозицииЧека.НомерСекции       = Реквизиты.НомерСекции;
			СтрокаПозицииЧека.НомерСтрокиТовара = ОбщиеПараметры.ПозицииЧека.Количество()+1;
			
			СтрокаПозицииЧека.ПризнакСпособаРасчета  = ?(ЭтоВерсия105, Перечисления.ПризнакиСпособаРасчета.Аванс, Неопределено);
			СтрокаПозицииЧека.ПризнакПредметаРасчета = ?(ЭтоВерсия105, Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата, Неопределено);
			
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			
		Иначе
			Если СуммаПредоплатойПоЧеку > 0 Тогда
				СтрокаОплаты = Новый Структура();
				СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
				СтрокаОплаты.Вставить("Сумма", СуммаПредоплатойПоЧеку);
				ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			КонецЕсли;
			
			Если СуммаПостоплатойПоЧеку > 0 Тогда
				СтрокаОплаты = Новый Структура();
				СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
				СтрокаОплаты.Вставить("Сумма", СуммаПостоплатойПоЧеку);
				ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
КонецФункции

Функция ПолучитьСведенияОКомитентах(СписокНоменклатуры, Организация, ДатаСведений) Экспорт
	Результат = Новый Соответствие;
	
	Если СписокНоменклатуры.Количество() = 0 
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов") Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Контрагент, Партия.Контрагент) КАК Комитент,
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Дата, Партия.Дата) КАК ДатаОперации
	|ПОМЕСТИТЬ ВТ_Комитенты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаСведений,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе),
	|			&ВидыСубконто,
	|			Субконто1 В (&СписокНоменклатуры)
	|				И Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ХозрасчетныйОстатки.Субконто2 = ПоступлениеТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Партия КАК Партия
	|		ПО ХозрасчетныйОстатки.Субконто2 = Партия.Ссылка
	|ГДЕ
	|	ХозрасчетныйОстатки.КоличествоОстаток > 0
	|	И (ХозрасчетныйОстатки.Субконто2 ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ИЛИ ХозрасчетныйОстатки.Субконто2 ССЫЛКА Документ.Партия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Комитенты.Номенклатура КАК Номенклатура,
	|	МИНИМУМ(ВТ_Комитенты.ДатаОперации) КАК ДатаОперации
	|ПОМЕСТИТЬ ВТ_КомитентыПоДатам
	|ИЗ
	|	ВТ_Комитенты КАК ВТ_Комитенты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Комитенты.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Комитенты.Комитент КАК Контрагент,
	|	ВТ_Комитенты.Номенклатура КАК Номенклатура
	|ИЗ
	|	ВТ_Комитенты КАК ВТ_Комитенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КомитентыПоДатам КАК КомитентыПоДатам
	|		ПО ВТ_Комитенты.Номенклатура = КомитентыПоДатам.Номенклатура
	|			И ВТ_Комитенты.ДатаОперации = КомитентыПоДатам.ДатаОперации
	|ГДЕ
	|	НЕ КомитентыПоДатам.Номенклатура ЕСТЬ NULL";
	
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	
	Запрос.УстановитьПараметр("ВидыСубконто",       ВидыСубконто);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("ДатаСведений",       ДатаСведений);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СведенияОКомитенте = НовыйСведенияОКомитенте();
		
		ЗаполнитьЗначенияСвойств(СведенияОКомитенте, Выборка);
		ЗаполнитьЗначенияСвойств(СведенияОКомитенте, СведенияОКонтрагенте(Выборка.Контрагент, ДатаСведений));
		
		Результат.Вставить(Выборка.Номенклатура, СведенияОКомитенте);
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции

Функция СведенияОКонтрагенте(Контрагент, ДатаСведений)
	СведенияОЮрФизЛице = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Контрагент, ДатаСведений);
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование", СведенияОЮрФизЛице.НаименованиеДляПечатныхФорм);
	Результат.Вставить("Телефон",      СведенияОЮрФизЛице.Телефоны);
	Результат.Вставить("ИНН",          СведенияОЮрФизЛице.ИНН);
	
	Возврат Результат;
КонецФункции

Функция НовыйСведенияОКомитенте()
	СведенияОКомитенте = МенеджерОборудованияКлиентСервер.ПараметрыДанныеПоставщика();
	
	СведенияОКомитенте.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Возврат СведенияОКомитенте;
КонецФункции

// Возвращает поставщика (комитента) если он един для всей номенклатуры
// В противном случае возвращается НЕОПРЕДЕЛЕНО
Функция КомитентПоЧеку(СведенияОКомитентах, СписокНоменклатуры) Экспорт
	СведенияОКомитенте = Неопределено;
	Для НомерПозиции = 0 По СписокНоменклатуры.Количество() - 1 Цикл
		Номенклатура = СписокНоменклатуры[НомерПозиции];
		
		Если НомерПозиции = 0 Тогда
			СведенияОКомитенте = СведенияОКомитентах[Номенклатура];
		ИначеЕсли СведенияОКомитенте = Неопределено 
			ИЛИ СведенияОКомитентах[Номенклатура] = Неопределено 
			ИЛИ СведенияОКомитентах[Номенклатура].Контрагент <> СведенияОКомитенте.Контрагент Тогда
			
			СведенияОКомитенте = Неопределено;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СведенияОКомитенте;
КонецФункции

Функция РеквизитыПлатежногоАгента(ДоговорПлатежногоАгента, ПлатежныйАгент, ДатаСведений) Экспорт
	
	Результат = Новый Структура;
	
	Если ЗначениеЗаполнено(ДоговорПлатежногоАгента) Тогда
		
		СписокПараметров = "ТелефонПлатежногоАгента, ТелефонОператораПоПриемуПлатежей, ТелефонОператораПеревода, 
			|ТелефонПоставщика, АдресОператораПеревода, ИННОператораПеревода, НаименованиеОператораПеревода, ОперацияПлатежногоАгента, ПризнакАгента, Владелец";
		
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорПлатежногоАгента, СписокПараметров);
		
		ДанныеАгента = МенеджерОборудованияКлиентСервер.ПараметрыДанныеАгента();
		
		ДанныеАгента.ПлатежныйАгент.Операция = СтруктураРеквизитов.ОперацияПлатежногоАгента;
		ДанныеАгента.ПлатежныйАгент.Телефон  = СтруктураРеквизитов.ТелефонПлатежногоАгента;
		
		ДанныеАгента.ОператорПеревода.Наименование = СтруктураРеквизитов.НаименованиеОператораПеревода;
		ДанныеАгента.ОператорПеревода.Телефон = СтруктураРеквизитов.ТелефонОператораПеревода;
		ДанныеАгента.ОператорПеревода.Адрес = СтруктураРеквизитов.АдресОператораПеревода;
		ДанныеАгента.ОператорПеревода.ИНН = СтруктураРеквизитов.ИННОператораПеревода;
		
		ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = СтруктураРеквизитов.ТелефонОператораПоПриемуПлатежей;
		
		Результат.Вставить("ДанныеАгента", ДанныеАгента);
		
		ДанныеПоставщика = МенеджерОборудованияКлиентСервер.ПараметрыДанныеПоставщика();
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтруктураРеквизитов.Владелец, ДатаСведений);
		
		ДанныеПоставщика.Телефон      = СтруктураРеквизитов.ТелефонПоставщика;
		ДанныеПоставщика.Наименование = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
		ДанныеПоставщика.ИНН          = СведенияОбОрганизации.ИНН;
		Результат.Вставить("ДанныеПоставщика", ДанныеПоставщика);
		
		ПризнакАгента = ?(ЗначениеЗаполнено(СтруктураРеквизитов.ПризнакАгента), СтруктураРеквизитов.ПризнакАгента, Перечисления.ПризнакиАгента.Агент);
		
		Результат.Вставить("ПризнакАгента", ПризнакАгента);
		Результат.Вставить("ПризнакАгентаПоПредметуРасчета", ПризнакАгента);
		
	ИначеЕсли ЗначениеЗаполнено(ПлатежныйАгент) Тогда
		
		Телефон = ОбщегоНазначенияБПКлиентСервер.ОставитьВСтрокеТолькоЦифры(
			УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(ПлатежныйАгент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента));
			
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПлатежныйАгент, ДатаСведений);
		
		ДанныеАгента = МенеджерОборудованияКлиентСервер.ПараметрыДанныеАгента();
		ДанныеАгента.ПлатежныйАгент.Телефон           = Телефон;
		ДанныеАгента.ОператорПеревода.Наименование    = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
		ДанныеАгента.ОператорПеревода.Телефон         = Телефон;
		ДанныеАгента.ОператорПеревода.Адрес           = СведенияОбОрганизации.ЮридическийАдрес;
		ДанныеАгента.ОператорПеревода.ИНН             = СведенияОбОрганизации.ИНН;
		ДанныеАгента.ОператорПоПриемуПлатежей.Телефон = Телефон;
		Результат.Вставить("ДанныеАгента", ДанныеАгента);
		
		ДанныеПоставщика = МенеджерОборудованияКлиентСервер.ПараметрыДанныеПоставщика();
		ДанныеПоставщика.Телефон      = Телефон;
		ДанныеПоставщика.Наименование = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
		ДанныеПоставщика.ИНН          = СведенияОбОрганизации.ИНН;
		Результат.Вставить("ДанныеПоставщика", ДанныеПоставщика);
		
		ПризнакАгента = Перечисления.ПризнакиАгента.ПлатежныйАгент;
		
		Результат.Вставить("ПризнакАгента", ПризнакАгента);
		Результат.Вставить("ПризнакАгентаПоПредметуРасчета", ПризнакАгента);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПечатьЧековНаУдержанияИзЗарплаты(ПараметрыОбработки, АдресХранилища) Экспорт
	
	// 1. Очистка очереди от "непробитых" чеков.
	МенеджерОборудованияВызовСервера.УдалитьЧекИзОчереди(ПараметрыОбработки.Ссылка);
	
	// 2. Генерация новых чеков.
	ПараметрыУстройства = Справочники.ПодключаемоеОборудование.ПолучитьПараметрыУстройства(ПараметрыОбработки.ИдентификаторУстройства);
	НомерСекции         = ?(ПараметрыУстройства.Свойство("НомерСекции"), ПараметрыУстройства.НомерСекции, 0);
	
	МассивЧеков = ПечатьФискальныхДокументов.СобратьДанныеЧеков(
		ПараметрыОбработки.Ссылка,
		НомерСекции,
		ПараметрыОбработки.ВерсияФормата,
		ПараметрыОбработки.АдресУстановкиККТ,
		ПараметрыОбработки.ПараметрыОбработчика);
	
	//3. Регистрация чеков в очереди.
	Для Каждого Чек ИЗ МассивЧеков Цикл
		МенеджерОборудованияВызовСервера.ДобавитьЧекВОчередьЧековККТ(Чек);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 
