
#Область СлужебныеПроцедурыИФункции

// Возвращает полное имя объекта метаданных по переданному значению ссылки
// Например,
//  "Справочник.Номенклатура";
//  "Документ.ПриходнаяНакладная".
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - значение ссылки, для которого необходимо получить имя таблицы ИБ.
// 
// Возвращаемое значение:
//  Строка - полное имя объекта метаданных для указанного значения ссылки.
//
Функция ИмяТаблицыПоСсылке(Ссылка) Экспорт
	
	Возврат Ссылка.Метаданные().ПолноеИмя();
	
КонецФункции

// Возвращает текущего пользователя или текущего внешнего пользователя,
// в зависимости от того, кто выполнил вход в сеанс.
//  Рекомендуется использовать в коде, который поддерживает работу
// в обоих случаях.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи или СправочникСсылка.ВнешниеПользователи.
// 
Функция АвторизованныйПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

// Возвращает регламентное задание для авторассылки СМС сообщений.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Задание - РегламентноеЗадание - регламентное задание для рассылки СМС-сообщений.
Функция ПолучитьРегламентноеЗаданиеСМСАвторассылкаСообщений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Отбор         = Новый Структура("Метаданные", "смсАвторассылкаСообщений");
	МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	Если МассивЗаданий.Количество() = 0 Тогда
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.смсАвторассылкаСообщений);
		Задание.Записать();
		Возврат Задание;
	Иначе
		Возврат МассивЗаданий[0];
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПолученияНастроекПользователей

// Определяет из настроек пользователя рабочую дату
//
Функция ПолучитьРабочуюДату() Экспорт
	
	Результат = ПолучитьЗначениеПоУмолчанию("РабочаяДата");
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - вид настройки, значение по умолчанию которой необходимо получить
//  Пользователь - СправочникСсылка.Пользователи - пользователь программы, настройка которого
//				   запрашивается, если параметр не передается настройка возвращается для текущего пользователя.
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь = Неопределено) Экспорт
	
	НастройкаВРег = ВРег(Настройка);
	НастройкаТипаСсылка = Ложь;
	
	Если НастройкаВРег = ВРег("РабочаяДата") Тогда
		ПустоеЗначение = '0001-01-01';
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(НастройкаВРег,,, Пользователь);
	
	Если ТипЗнч(ЗначениеНастройки) = ТипЗнч(ПустоеЗначение) Тогда
		Если НастройкаТипаСсылка Тогда
			Если НЕ СсылкаСуществует(ЗначениеНастройки) Тогда
				ЗначениеНастройки = ПустоеЗначение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗначениеНастройки = ПустоеЗначение;
	КонецЕсли;
	
	Возврат ?(ЗначениеНастройки = Неопределено, ПустоеЗначение, ЗначениеНастройки);
	
КонецФункции // ПолучитьЗначениеПоУмолчанию()

// Возвращает текущего пользователя.
//  Рекомендуется использовать в коде, который не поддерживает
// работу с внешними пользователями.
//
//  Если вход в сеанс выполнил внешний пользователь,
// тогда будет вызвано исключение.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи.
//
Функция ТекущийПользователь() Экспорт
	
	АвторизованныйПользователь = АвторизованныйПользователь();
	
	Если ТипЗнч(АвторизованныйПользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
		ВызватьИсключение
		НСтр("ru = 'Невозможно получить текущего пользователя
		|в сеансе внешнего пользователя.'");
	КонецЕсли;
	
	Возврат АвторизованныйПользователь;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Проверяет физическое наличие записи в информационной базе данных о переданном значении ссылки.
//
// Параметры:
//  ЛюбаяСсылка - СправочникСсылка, ДокументСсылка - Ссылка на объект информационной базы.
//                Также в качестве значения параметра могут быть указаны любые другие ссылки
//                на объекты информационной базы.
// 
// Возвращаемое значение:
//  Истина - ссылка физически существует;
//  Ложь   - ссылка физически не существует.
//
Функция СсылкаСуществует(ЛюбаяСсылка) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	[ИмяТаблицы]
	|ГДЕ
	|	Ссылка = &Ссылка
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяТаблицы]", ИмяТаблицыПоСсылке(ЛюбаяСсылка));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ЛюбаяСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Заполняет реквизиты объекта значениями, полученными в структуре ДанныхЗаполнения.
// Заполнение возможно только в случае, когда в качестве ДанныхЗаполнения получена структура.
// Заполнены будут только те реквизиты, для которых в метаданных установлен флаг "ЗаполнятьИзДанныхЗаполнения".
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект - заполняемый объект. Также в качестве значения параметра
//                      может быть указан любой другой тип объекта информационной базы.
//  ДанныеЗаполнения  - Произвольный - параметр, полученный в ОбработкеЗаполнения объекта.
//  МетаданныеОбъекта - ОбъектМетаданных - метаданные объекта.
//
Процедура ЗаполнитьПоСтруктуре(Объект, ДанныеЗаполнения, МетаданныеОбъекта = Неопределено)	Экспорт
	
	Если Объект = Неопределено
		ИЛИ ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		ИЛИ ДанныеЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	Если  Метаданные.Справочники.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		РазличатьГруппыИЭлементы = МетаданныеОбъекта.Иерархический;
	Иначе
		РазличатьГруппыИЭлементы = Ложь;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура;
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			СтруктураЗаполнения.Вставить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			Если РазличатьГруппыИЭлементы Тогда
				Если (Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
					ИЛИ
					(НЕ Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)
					Тогда
					СтруктураЗаполнения.Вставить(Реквизит.Имя);
				КонецЕсли;
			Иначе
				СтруктураЗаполнения.Вставить(Реквизит.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Функция ПолучитьРеквизитыДоговора() возвращает структуру со реквизитами договора, 
// используемыми при проведении документов по регламентированному учету. Функция используется 
// для унификации имен реквизитов справочника ДоговорыКонтрагентов при обращении к ним 
// из разных конфигураций, при этом типы самих реквизитов могут различаться в разных 
// конфигурациях.
//
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
//
// Возвращаемое значение:
//  Структура с ключами:
//		Ссылка				 - СправочникСсылка.ДоговорыКонтрагентов, ссылка на сам договор
//		Организация 		 - СправочникСсылка.Организации, организация, с которой заключен договор
//		Владелец 			 - СправочникСсылка.Контрагент, контрагент, с которым заключен договор.
//		
//		
Функция ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента) Экспорт
	
	СтруктураРеквизиты = Новый Структура();
	СтруктураРеквизиты.Вставить("Владелец",				Справочники.Контрагенты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Организация",			Справочники.Организации.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтруктураРеквизиты = ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
		"Ссылка,
		|Владелец,
		|Организация");
	КонецЕсли;
	
	Возврат СтруктураРеквизиты;
	
КонецФункции // ПолучитьРеквизитыДоговора()

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка    - Ссылка на объект - элемент справочника, документ, ...
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
// 
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(Реквизиты);
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Структура")
		ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		
		СтруктураРеквизитов = Реквизиты;
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив")
		ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		
		СтруктураРеквизитов = Новый Структура;
		Для каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение смсОбщегоНазначения.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"),
		Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		СокрЛП(КлючИЗначение.Значение),
		СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет наличие в строке только цифр
//
// Параметры
//  СтрокаПроверки - Строка для проверки только цифр.
//
// Возвращаемое значение:
//   Булево
//
Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки, УчитыватьЛидирующиеНули = Истина, УчитыватьПробелы = Истина) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		НомерПервойЦифры = 0;
		Для ТекПозиция = 1 По СтрДлина(СтрокаПроверки) Цикл
			НомерПервойЦифры = НомерПервойЦифры + 1;
			КодСимвола = КодСимвола(Сред(СтрокаПроверки, ТекПозиция, 1));
			Если КодСимвола <> 48 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, НомерПервойЦифры);
	КонецЕсли;
	
	Для ТекПозиция = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, ТекПозиция, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИнициализацииПараметровСеанса

Процедура УстановитьПараметрСеансаТекущийПользователь() Экспорт
	
	ИмяПользователя = ИмяПользователя();	
	Если ПустаяСтрока(ИмяПользователя) Тогда
		// пользователь не авторизовался
		ИмяПользователя = "НеАвторизован";		
	КонецЕсли;	
	
	ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(ИмяПользователя) Тогда
		ТекущийПользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя);
	КонецЕсли;		
	
	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
	
КонецПроцедуры	

#КонецОбласти
