
#Область ПроцедурыИФункцииОформленияФормы

// Формирует текст заголовка формы документа.
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа.
//  ДокументОбъект     - объект документа.
//
Функция СформироватьЗаголовокФормыДокумента(СтрокаВидаОперации, ДокументОбъект) Экспорт
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": " + СтрокаВидаОперации + ". ";
	КонецЕсли;
		
	Если ДокументОбъект.Пустая() Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если ДокументОбъект.Проведен Тогда
			Заголовок = Заголовок + "Проведен";
		ИначеЕсли ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Заголовок = Заголовок + "Не проведен";
		Иначе
			Заголовок = Заголовок + "Записан";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции // УстановитьЗаголовокФормыДокумента()

#КонецОбласти

#Область ПроцедурыИФункцииОбработкиИнформацииВФорме

// Функция определяет ситуацию, когда при изменении своей даты документ
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументОбъект         - контекст документа,из которого вызвана процедура.
//  НачальнаяДатаДокумента - начальная дата документа.
// 
Функция ПроверитьНомерДокументаСервер(ДокументОбъект, НачальнаяДатаДокумента) Экспорт   // в разработке

	// Определяем назначенную для данного вида документов периодичность смены номера.
	ПериодСменыНомера = ДокументОбъект.Ссылка.Метаданные().ПериодичностьНомера;

	// В зависимости от установленной периодичности смены номеров,
	// определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);
		
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		
		РазностьДат = НачалоДня(НачальнаяДатаДокумента) - НачалоДня(ДокументОбъект.Дата);
		
	Иначе
		
		РазностьДат = 0;
		
	КонецЕсли;
	
	Возврат РазностьДат;

КонецФункции // ПроверитьНомерДокумента()

// Предназначена для получения запросом представлений объектов.
// Поддерживает два синтаксиса:
// 1.
// Параметры:
//  СсылкиОбъектовПарам - массив ссылок.
// Возвращаемое значение:
//  Соответствие в котором ключ - одна из переданных ссылок, 
//  а значение - представление этой ссылки.
// 2. 
// Параметры:
//  СсылкиОбъектовПарам - ссылка.
// Возвращаемое значение:
//  Строка представления ссылки.
//
// Пример использования:
//  МассивСсылок = Новый Массив;
//  МассивСсылок.Добавить(НоваяОрганизация);
//  МассивСсылок.Добавить(СтараяОрганизация);
//  Представления = ПолучитьПредставленияОбъектов(МассивСсылок);
//  НоваяОрганизацияСтрокой = Представления[НоваяОрганизация];
//  СтараяОрганизацияСтрокой = Представления[СтараяОрганизация];
//
Функция ПолучитьПредставленияОбъектов(СсылкиОбъектовПарам) Экспорт
	// Соответствие возвращается если передан массив ссылок.
	ПереданМассив = Истина;
	
	// Если передано одиночное значение - "превратим" его в массив.
	Если ТипЗнч(СсылкиОбъектовПарам) <> Тип("Массив") Тогда
		Ссылка = СсылкиОбъектовПарам;
		СсылкиОбъектов = Новый Массив;
		СсылкиОбъектов.Добавить(Ссылка);
		ПереданМассив = Ложь;
		
	Иначе
		СсылкиОбъектов = СсылкиОбъектовПарам;
		
	КонецЕсли;
	
	// Обработаем массив СсылкиОбъектов и сформируем
	// соответствие ссылок по их типам.
	СсылкиПоТипам = Новый Соответствие;
	Для Каждого СсылкаНаОбъект Из СсылкиОбъектов Цикл
		ПолноеИмя = СсылкаНаОбъект.Метаданные().ПолноеИмя();
		Если СсылкиПоТипам[ПолноеИмя] = НеОпределено Тогда
			СсылкиПоТипам[ПолноеИмя] = Новый Массив;
		КонецЕсли;
		СсылкиПоТипам[ПолноеИмя].Добавить(СсылкаНаОбъект);
	КонецЦикла;
	
	// Формирование запроса.
	ТекстЗапроса = "";
	Запрос = Новый Запрос;
	ПервоеЗначение = Истина;
	Для Каждого ЭлементСоответствия Из СсылкиПоТипам Цикл
		ИмяПараметра = "Массив" + СтрЗаменить(ЭлементСоответствия.Ключ, ".", "_");
		Если Не ПервоеЗначение Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ";
			
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ 
		|	Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Ссылка) КАК Представление
		|ИЗ " + ЭлементСоответствия.Ключ + "
		|ГДЕ Ссылка В (&" + ИмяПараметра + ")";
		Запрос.УстановитьПараметр(ИмяПараметра, ЭлементСоответствия.Значение);
		ПервоеЗначение = Ложь;
	КонецЦикла;
	// Обработка запроса.
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если ПереданМассив Тогда
		ВозвращаемоеСоответствие = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ВозвращаемоеСоответствие[Выборка.Ссылка] = Выборка.Представление;
		КонецЦикла;
		
		// Дополним пустыми представлениями неполученных запросом ссылок.
		Для Каждого СсылкаНаОбъект Из СсылкиОбъектов Цикл
			Если ВозвращаемоеСоответствие[СсылкаНаОбъект] = НеОпределено Тогда
				ВозвращаемоеСоответствие[СсылкаНаОбъект] = "";
			КонецЕсли;
			
		КонецЦикла;
		Возврат ВозвращаемоеСоответствие;
		
	Иначе
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Представление;
		Иначе
			// Если ссылки не нашлось - пустое представление.
			Возврат "";
		КонецЕсли;
		
	КонецЕсли; 
	
КонецФункции // ПолучитьПредставленияОбъектов()

#КонецОбласти

#Область ПроцедурыИФункцииФормированияИОбработкиМеню

// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа.
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить.
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю.
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//  МассивИсключений              - значения элементов коллекции ОбъектЗаполнения, которые не должны добавляться.
//
Процедура УстановитьПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации, 
												МассивИсключений = Неопределено) Экспорт
	
	Если ТипЗнч(МассивИсключений) <> Тип("Массив") Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли;
	
	Форма = ЭлементМеню.Родитель.Родитель;
	
	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		
		Если МассивИсключений.Найти(ЭлементЗаполнения.Имя) = Неопределено Тогда
			
			НоваяКоманда = Форма.Команды.Добавить(ЭлементЗаполнения.Имя);
			НоваяКоманда.Действие  = ОбъектОбработкиВыбораОперации;
			НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
			
			НоваяКнопка = Форма.Элементы.Добавить(ЭлементЗаполнения.Имя, Тип("КнопкаФормы"), ЭлементМеню);
			НоваяКнопка.Заголовок = ЭлементЗаполнения.Синоним;
			НоваяКнопка.ИмяКоманды = ЭлементЗаполнения.Имя;
			
			ЭлементДобавлен = Истина;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

// Функция возвращает список видов операций.
//
Функция ПолучитьСписокВидовОпераций(ДокументОбъект, МассивИсключений = Неопределено) Экспорт

	СписокВидов = Новый СписокЗначений();
	Для каждого ЭлементЗаполнения Из ДокументОбъект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
		Если МассивИсключений.Найти(ЭлементЗаполнения.Имя) = Неопределено Тогда
			СписокВидов.Добавить(ЭлементЗаполнения.Имя, ЭлементЗаполнения.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Вставить("Имя", ДокументОбъект.ВидОперации.Метаданные().Имя);
	
	Возврат СписокВидов;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыРаботыСМногофирменнымИОднофирменнымУчетом

// Процедура устанавливает отбор по основной организации в указанно форме.
//
Функция УстановитьОтборПоОрганизации(Форма, УчетПоВсемОрганизациям = Неопределено, ОсновнаяОрганизация, 
									ИмяРеквизитаСписка, ВсегдаИзменять = Ложь, ИмяОтбора = "Организация") Экспорт
	
	Если ВсегдаИзменять = Истина Тогда
		Использование = Истина;
	Иначе
		
		Для Каждого ЭлементОтбор Из Форма[ИмяРеквизитаСписка].Отбор.Элементы Цикл
			Если Строка(ЭлементОтбор.ЛевоеЗначение) = ИмяОтбора Тогда
				Использование = НЕ ЭлементОтбор.Использование;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Использование = ?(Использование = Неопределено, Истина, Использование);
		
	КонецЕсли;
		
	// ЭлементОтбора = Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора];
	Если Использование Тогда
		Если НЕ (ТипЗнч(Форма[ИмяРеквизитаСписка]) = Тип("ТаблицаЗначений")) Тогда // Элемент - табличное поле
				
			// Проверим - Если это связанный регистр сведений тогда не нужно устанавливать отбор - 
			// он уже установлен системой автоматически.
			
			Если ИмяРеквизитаСписка = "РегистрСведенийСписок" Тогда
				
				// Возможно это переход по кнопке Перейти.
				Если ТипЗнч(Форма.ПараметрОтборПоИзмерению) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(Форма.ПараметрОтборПоИзмерению) Тогда
						Возврат Неопределено; // Это переход по кнопке Перейти - не нужно устанавливать отбор.
					КонецЕсли;
				КонецЕсли;
			
			КонецЕсли;
			
			ЭлементОтбора = Форма[ИмяРеквизитаСписка].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОтбора);
			ЭлементОтбора.ВидСравнения  = ?(ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации"), 
											ВидСравненияКомпоновкиДанных.Равно, ВидСравненияКомпоновкиДанных.ВСписке);
			ЭлементОтбора.Использование = ?(ЗначениеЗаполнено(ОсновнаяОрганизация), Использование, Ложь);
			ЭлементОтбора.ПравоеЗначение = ОсновнаяОрганизация;
	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭлементОтбора;
	
КонецФункции // УстановитьОтборПоОрганизации()

#КонецОбласти

#Область ПроцедурыСравненияМакетов

// Подготавливает макеты для сравнения.
//
Функция ПолучитьТабличныеДокументыДляСравнения(ВладелецМакетаСтрока, НаименованиеМакета, ВсегдаСравниватьСИзмененнымМакетом = Ложь) Экспорт
	
	МенеджерВладельцаМакета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ВладелецМакетаСтрока);
	
	ОригинальныйМакет = ПоместитьВоВременноеХранилище(МенеджерВладельцаМакета.ПолучитьМакет(НаименованиеМакета));
	
	Если ВсегдаСравниватьСИзмененнымМакетом Тогда
		
		НаборЗаписей = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор["Объект"].Установить(ВладелецМакетаСтрока);
		НаборЗаписей.Отбор["ИмяМакета"].Установить(НаименованиеМакета);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ПользовательскийМакет = ПоместитьВоВременноеХранилище(УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет(ВладелецМакетаСтрока + "." + НаименованиеМакета));
		Иначе
			ПользовательскийМакет = ПоместитьВоВременноеХранилище(НаборЗаписей[0].Макет.Получить());
		КонецЕсли;
		
	Иначе
		
		ПользовательскийМакет = ПоместитьВоВременноеХранилище(УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет(ВладелецМакетаСтрока + "." + НаименованиеМакета));
		
	КонецЕсли;
	
	ТабличныеДокументыСтруктура = Новый Структура("Левый, Правый", ОригинальныйМакет, ПользовательскийМакет);
	
	Возврат ПоместитьВоВременноеХранилище(ТабличныеДокументыСтруктура);
	
КонецФункции

#КонецОбласти
