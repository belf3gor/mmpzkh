
#Область СлужебныеПроцедурыИФункции

// Формируем таблицу значений параметров
//
// Параметры
//  <ТаблицаПараметров> - <ТаблицаЗначений> - Пустая таблица. 
//  <ОписаниеОшибки>  - <Строка> - Пустая строка. Описание ошибки при ее возникновении.
//
// Возвращаемое значение:
//   <Булево>    - Истина если нет ошибок в макете 
//                 Ложь   если макет содержит недопустимые или пустые поля.
//
Функция ПолучитьПараметры(ТаблицаПараметров, ТипЗначенияПолучателя = "", ОписаниеОшибки) Экспорт
	
	СхемаПравилаОтбора = Справочники.смсПравилаОтбораПолучателей.ПолучитьМакет("СхемаПравилОтбораПереопределяемый");
	
	ТаблицаПараметров.Колонки.Добавить("НаименованиеПараметра");
	ТаблицаПараметров.Колонки.Добавить("ПредставлениеПараметра");
	ТаблицаПараметров.Колонки.Добавить("ПутьПоле");
	ТаблицаПараметров.Колонки.Добавить("Пример");
	
	НаборДанныхСхемаПравилаОтбора = СхемаПравилаОтбора.НаборыДанных.Найти("ОсновнойНаборДанных");
	
	Если НаборДанныхСхемаПравилаОтбора = Неопределено Тогда
		ОписаниеОшибки = "Отсутствует набор данных для формирования параметров шаблона! Обратитесь к разработчику программного продукта.";
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ПолеКомпоновки Из НаборДанныхСхемаПравилаОтбора.Поля Цикл
		
		Если Не ПолеКомпоновки.ОграничениеИспользования.Поле И ЗначениеЗаполнено(ПолеКомпоновки.Заголовок) Тогда
			
			НоваяСтрока                        = ТаблицаПараметров.Добавить();
			НоваяСтрока.НаименованиеПараметра  = ПолеКомпоновки.ПутьКДанным;
			НоваяСтрока.ПредставлениеПараметра = ПолеКомпоновки.Заголовок;
			НоваяСтрока.ПутьПоле               = ПолеКомпоновки.Поле;
			НоваяСтрока.Пример                 = ПолеКомпоновки.Оформление.Элементы.Найти("Текст").Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПараметров.Сортировать("ПредставлениеПараметра");
	
	Возврат Истина;
	
КонецФункции // ПолучитьПараметры()

// Добавляет параметр в текст шаблона
//
// Параметры
//  <Содержание>  - <Строка> - содержание исходной строки
//  <НаименованиеПараметра>  - <Строка> - Наименование добавляемого параметра.
//
// Возвращаемое значение:
//   <Строка>   - Текст, содержащий содержание и параметр.
//
Функция ПолучитьПараметрСРазделителями(НаименованиеПараметра) Экспорт

	Возврат "[" + НаименованиеПараметра + "]";

КонецФункции // смсДобавитьПараметрВТекстШаблона()

// Формирует структуру шаблона
//
// Параметры
//  <ТекстШаблона>  - <Строка> - текст шаблона.
//
// Возвращаемое значение:
//   <Булево>   - Истина если нет ошибок в тексте шаблона, иначе Ложь.
//
Функция РазобратьШаблон(ТекстШаблона, ТаблицаПараметров, ОписаниеОшибки, СтруктураШаблона = Неопределено)

	СтруктураШаблона = Новый ТаблицаЗначений;
	СтруктураШаблона.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка")); // Параметр или текст
	СтруктураШаблона.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка")); // Значение
	
	ПозицияСкобки    = 0;
	ПоказательСкобки = 0;
	
	врШаблон = СокрЛП(ТекстШаблона);
	НаименованиеПараметра = "";
	
	Для Инд = 1 По СтрДлина(врШаблон) Цикл
		
		ТекСимвол = Сред(врШаблон, Инд, 1);
		Если (ТекСимвол <> "[") И (ТекСимвол <> "]") Тогда
			Продолжить;
		КонецЕсли;	
		
		Если (ТекСимвол = "[") Тогда
			ПоказательСкобки = ПоказательСкобки + 1;
			Если ПоказательСкобки > 1 Тогда 
				ФрагментОшибки = Сред(врШаблон, ПозицияСкобки + 1, Инд - ПозицияСкобки);
					ОписаниеОшибки = НСтр("ru = ""Отсутствует символ ']'" + 
					?(ФрагментОшибки <> "", " в фрагменте '" + ФрагментОшибки + "'", "") + """");
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
		
		Если (ТекСимвол = "]") Тогда
			ПоказательСкобки = ПоказательСкобки - 1;
			Если ПоказательСкобки < 0 Тогда 
				ФрагментОшибки = Сред(врШаблон, ПозицияСкобки + 1, Инд - ПозицияСкобки);
				ОписаниеОшибки = НСтр("ru = ""Отсутствует символ '['" + 
					?(ФрагментОшибки <> "", " в фрагменте '" + ФрагментОшибки + "'", "") + """");
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
		
		ПозицияСкобки = Инд;
	КонецЦикла;
	
	Если ПоказательСкобки > 0 Тогда 
		ФрагментОшибки = Сред(врШаблон, ПозицияСкобки + 1);
		ОписаниеОшибки = НСтр("ru = ""Отсутствует символ ']'" +
			?(ФрагментОшибки <> "", " в фрагменте '" + ФрагментОшибки + "'", "") + """");
		Возврат Ложь;
	КонецЕсли;
	
	врШаблон = СокрЛП(ТекстШаблона);
	Пока врШаблон <> "" Цикл
		
		ЛевыйРазделитель = Найти(врШаблон, "[");
		Если ЛевыйРазделитель > 0 Тогда
			
			Если ЛевыйРазделитель > 1 Тогда
			
				НоваяСтрока = СтруктураШаблона.Добавить();
				НоваяСтрока.Тип = "Текст";
				НоваяСтрока.Значение = Лев(врШаблон, ЛевыйРазделитель - 1);
			
			КонецЕсли; 
			
			врШаблон = Сред(врШаблон, ЛевыйРазделитель + 1);
		    ПравыйРазделитель = Найти(врШаблон, "]");
			
			Если ПравыйРазделитель > 0 Тогда
				НаименованиеПараметра = Лев(врШаблон, ПравыйРазделитель - 1);
				
				НайденныйПараметр = ТаблицаПараметров.Найти(НаименованиеПараметра, "НаименованиеПараметра");
				
				Если НайденныйПараметр = Неопределено Тогда
					
					ОписаниеОшибки = НСтр("ru = ""Неверный параметр '" + НаименованиеПараметра + "'""");
					Возврат Ложь;
				
				КонецЕсли; 
				
				НоваяСтрока = СтруктураШаблона.Добавить();
				НоваяСтрока.Тип = "Параметр";
				НоваяСтрока.Значение = НайденныйПараметр.НаименованиеПараметра;
					
				врШаблон = Сред(врШаблон, ПравыйРазделитель + 1);
			Иначе
				ОписаниеОшибки = "Не обнаружено окончание служебного поля """ + врШаблон + """";
				Возврат Ложь;
			КонецЕсли;	
			
		Иначе	
			
			Если врШаблон <> "" Тогда
				НоваяСтрока = СтруктураШаблона.Добавить();
				НоваяСтрока.Тип = "Текст";
				НоваяСтрока.Значение = врШаблон;
			КонецЕсли;
			врШаблон = "";
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Истина;

КонецФункции // смсПолучитьСтруктуру()

// Возвращает сформированный текст по указанной структуре шаблона
//
// Параметры
//  <СтруктураШаблона>  - <ТаблицаЗначений> - Структура шаблона
//  <ЗначенияПараметровШаблона>  - <Соответствие> - Значения параметров шаблона для заполнения структуры.
//
// Возвращаемое значение:
//   <Строка>    - Текст полученного сообщения.
//
Функция ПолучитьТекстШаблона(СтруктураШаблона, ЗначенияПараметровШаблона)

	ТекстПоШаблону = "";
	
	Для каждого СтрокаШаблона Из СтруктураШаблона Цикл
	
		Если СтрокаШаблона.Тип = "Параметр" Тогда
			
			// Определим значение параметра и приведем его к нормальному виду.
			ЗначениеПараметра = ЗначенияПараметровШаблона.Получить(СтрокаШаблона.Значение);
			
			Если ТипЗнч(ЗначениеПараметра) = Тип("Дата") Тогда
				ЗначениеПараметра = Формат(ЗначениеПараметра, "ДФ=dd.MM.yyyy");
			ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда
				ЗначениеПараметра = СокрЛП(ЗначениеПараметра);
			КонецЕсли;
			
			ТекстПоШаблону = ТекстПоШаблону + ЗначениеПараметра;
			
		Иначе
			ТекстПоШаблону = ТекстПоШаблону + СтрокаШаблона.Значение;
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат ТекстПоШаблону;

КонецФункции // ПолучитьТекстШаблона()

// Формирует текст предварительного просмотра
//
// Параметры
//  <ТекстШаблона>  - <Строка> - текст шаблона.
//
// Возвращаемое значение:
//   <Строка>   - Текст сформированный на основании шаблона.
//
Функция ПолучитьТекстПредварительногоПросмотра(ТекстШаблона, ТекстПредварительногоПросмотра, ОписаниеОшибки) Экспорт
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ОписаниеОшибки   = "";
	СтруктураШаблона = "";
	
	Если НЕ ПолучитьПараметры(ТаблицаПараметров,, ОписаниеОшибки) Тогда
	
		Возврат Ложь;
	
	КонецЕсли;
	
	ШаблонПравильный = РазобратьШаблон(ТекстШаблона, ТаблицаПараметров, ОписаниеОшибки, СтруктураШаблона);
	
	Если Не ШаблонПравильный Тогда
		ТекстПредварительногоПросмотра = "";
		Возврат Ложь;
	КонецЕсли; 
	
	ЗначенияПараметровШаблона = Новый Соответствие;
	
	Для каждого СтрокаПараметр Из ТаблицаПараметров Цикл
	
		ЗначенияПараметровШаблона.Вставить(СтрокаПараметр.НаименованиеПараметра, СтрокаПараметр.Пример);
	
	КонецЦикла; 
	
	ТекстПредварительногоПросмотра = ПолучитьТекстШаблона(СтруктураШаблона, ЗначенияПараметровШаблона);
	Возврат Истина;

КонецФункции // ПолучитьТекстПредварительногоПросмотра()

// Формирует таблицу значений параметров шаблона по переданной таблице получателей
//
// Параметры
//  <ТаблицаПолучателей>  - <ТаблицаЗначений> - Таблица значений содерджащая списое получателей и их телефоны
//  <Шаблон>  - <СправочникСсылка.смсШаблоны> - Ссылка на шаблон текстового сообщения.
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>.
//
Функция ЗаполнитьЗначенияПараметровШаблона(ТаблицаПолучателей, Шаблон, ДополнительныеПараметры) Экспорт
	
	// Разберем шаблон на структуру
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ОписаниеОшибки   = "";
	СтруктураШаблона = "";
	
	Если НЕ ПолучитьПараметры(ТаблицаПараметров,, ОписаниеОшибки) Тогда
		
		смсОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	ШаблонПравильный = РазобратьШаблон(Шаблон.Содержание, ТаблицаПараметров, ОписаниеОшибки, СтруктураШаблона);
	Если Не ШаблонПравильный Тогда
		
		смсОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	// Проверим что шаблон содержит параметры
	
	ТаблицаПараметровШаблона = ТаблицаПараметров.СкопироватьКолонки();
	
	ШаблонСПараметрами = Ложь;
	
	Для Каждого СтрокаПараметр Из СтруктураШаблона Цикл
		
		Если СтрокаПараметр.Тип = "Параметр" Тогда
			
			НайденныйПараметр = ТаблицаПараметров.Найти(СтрокаПараметр.Значение, "НаименованиеПараметра");
			НоваяСтрока = ТаблицаПараметровШаблона.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныйПараметр);
			ШаблонСПараметрами = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Параметры отсутствуют. Заполняем таблицу просто текстом шаблона.
	Если Не ШаблонСПараметрами Тогда
		Для Каждого СтрокаПолучатель Из ТаблицаПолучателей Цикл
			СтрокаПолучатель.ТекстовоеСообщение = Шаблон.Содержание;
		КонецЦикла;
	Иначе
		
		СхемаПравилаОтбора = Справочники.смсПравилаОтбораПолучателей.ПолучитьМакет("СхемаПравилОтбораПереопределяемый");
		
		КомпоновщикМакета   = Новый КомпоновщикМакетаКомпоновкиДанных();
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПравилаОтбора));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаПравилаОтбора.НастройкиПоУмолчанию);
		
		НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		
		// Подготовим структуры, которые будут использоваться для установления отбора по получателю
		// и ключу дополнительной идентификации в запросе.
		МассивПолучателей                       = ТаблицаПолучателей.ВыгрузитьКолонку("Получатель");
		МассивКлючейДополнительнойИдентификации = ТаблицаПолучателей.ВыгрузитьКолонку("КлючДополнительнойИдентификации");
		
		// Установим отбор по массиву получателей в настройках компоновки данных.
		ОтборПолучатель                = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПолучатель.Использование  = Истина;
		ОтборПолучатель.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Получатель");
		ОтборПолучатель.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборПолучатель.ПравоеЗначение = МассивПолучателей;
		
		ОтборКлючДополнительнойИдентификации                = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборКлючДополнительнойИдентификации.Использование  = Истина;
		ОтборКлючДополнительнойИдентификации.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("КлючДополнительнойИдентификации");
		ОтборКлючДополнительнойИдентификации.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборКлючДополнительнойИдентификации.ПравоеЗначение = МассивКлючейДополнительнойИдентификации;
		
		// Добавим выходные поля СКД параметрами, используемыми в шаблоне.
		Для Каждого ПараметрШаблона Из ТаблицаПараметровШаблона Цикл
			ВыбранноеПоле      = НастройкиКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ПараметрШаблона.НаименованиеПараметра);
		КонецЦикла;
		
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
		
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаПравилаОтбора, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ТекстЗапроса  = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
		ЗапросПравило = Новый Запрос(ТекстЗапроса);
		
		Для Каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
			ЗапросПравило.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
		КонецЦикла;
		
		// Устанавливаем дополнительные параметры запроса
		смсНастройкаПереопределяемый.УстановитьДополнительныеПараметрыЗапроса(ЗапросПравило, ДополнительныеПараметры);
		
		ТаблицаЗначенийПараметровШаблона = ЗапросПравило.Выполнить().Выгрузить();
		
		// В таблице получателей Ключ дополнительной идентификации может быть не заполнен (иметь значение Неопределено).
		// Для таких строк таблицы получателей необходимо дополнить таблицу значений параметров шаблона строками
		// с указанием получателя.
		Для Каждого СтрокаТаблицыПолучателей Из ТаблицаПолучателей Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицыПолучателей.КлючДополнительнойИдентификации) Тогда
				НоваяСтрокаТаблицыЗначенийПараметровШаблона            = ТаблицаЗначенийПараметровШаблона.Добавить();
				НоваяСтрокаТаблицыЗначенийПараметровШаблона.Получатель = СтрокаТаблицыПолучателей.Получатель;
			КонецЕсли;
		КонецЦикла;
		
		// Заполняем переданную нам таблицу получателей указанным текстовым шаблоном.
		ЗначенияПараметровШаблона = Новый Соответствие;
		
		Для Каждого СтрокаПолучатель Из ТаблицаПолучателей Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Получатель",                      СтрокаПолучатель.Получатель);
			
			Если ЗначениеЗаполнено(СтрокаПолучатель.КлючДополнительнойИдентификации) Тогда
				СтруктураПоиска.Вставить("КлючДополнительнойИдентификации", СтрокаПолучатель.КлючДополнительнойИдентификации);
			КонецЕсли;
			
			НайденныеПолучатели = ТаблицаЗначенийПараметровШаблона.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеПолучатели.Количество() > 0 Тогда
				НайденныйПолучатель = НайденныеПолучатели[0];
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЗначенияПараметровШаблона.Очистить();
			
			Для Каждого СтрокаПараметр Из ТаблицаПараметровШаблона Цикл
				
				//ЗначенияПараметровШаблона.Вставить(СтрокаПараметр.НаименованиеПараметра, НайденныйПолучатель[СтрокаПараметр.НаименованиеПараметра]);
				ЗначенияПараметровШаблона.Вставить(СтрокаПараметр.НаименованиеПараметра, НайденныйПолучатель[СтрокаПараметр.ПутьПоле]);
				
			КонецЦикла;
			
			СтрокаПолучатель.ТекстовоеСообщение = ПолучитьТекстШаблона(СтруктураШаблона, ЗначенияПараметровШаблона);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьЗначенияПараметровШаблона()

#КонецОбласти