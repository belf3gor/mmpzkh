
// Данный общий модуль предназначен для хранения изменяемых механизмов, которые отвечают за сбор и запись
// данных в БД.
// Детальное описание форматов сбора/записи можно найти в комментариях к процедурам и функциям.

#Область ЧетвертыйФорматОбмена

///////////////////////////////////////////////////////////////////////////////
// 4-ЫЙ ФОРМАТ. ВЫГРУЗКА ДАННЫХ ПО Л/С

// Формирует настройки, необходимые для сбора данных.
//
Функция ПолучитьСтруктуруНастроекКвитанций(НастройкаДоступа, НастройкиОбмена, НастройкаОбменаДанными, ПериодОбмена) Экспорт
	
	тмОрганизация = НастройкаДоступа.Организация;
	
	ОбъектыДляВыгрузки = ПолучитьТаблицуОбъектовДляКвитанции(НастройкиОбмена, тмОрганизация, ПериодОбмена);
	
	СтруктураНастроек = Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПолучитьСтруктуруНастроекСбораДанныхДляКвитанцийИОбменов(НастройкаОбменаДанными.НастройкаСбораДанных, тмОрганизация, ПериодОбмена, "ОбменССайтомЖКХ4", ОбъектыДляВыгрузки);
	
	// Всегда "Ложь".
	СтруктураНастроек.Вставить("ПараметрыФормированияПДОтказ", Ложь);
	СтруктураНастроек.Вставить("ВыгружатьПерсональныеДанные",  НЕ НастройкаДоступа.НеВыгружатьПерсональныеДанные);
	
	// Получаем настройки выгрузки штрихкодов.
	СтруктураНастроек.Вставить("ВыгружатьОбаВидаШтрихкодов", НастройкаОбменаДанными.ВыгружатьОбаВидаШтрихкодов);
	
	// Настройки выгрузки сведений по л/с с начислениями/показаниями и без них.
	ДополнитьТаблицуНастроекКвитанцийСведениямиИзТаблицыНастроекВыгрузкиДанныхПоЛС(СтруктураНастроек, НастройкаОбменаДанными);
	
	Возврат СтруктураНастроек;
	
КонецФункции // ПолучитьСтруктуруНастроекКвитанций

// Дополняет таблицу настроек квитанций сведениями из таблицы настроек выгрузки данных по л/с.
//
Процедура ДополнитьТаблицуНастроекКвитанцийСведениямиИзТаблицыНастроекВыгрузкиДанныхПоЛС(СтруктураНастроек, НастройкаОбменаДанными)
	
	// Получаем сведения о настройках выгрузки услуг.
	ТаблицаНастроекВыгрузкиДанныхПоЛС = НастройкаОбменаДанными.ТаблицаНастроекВыгрузкиУслуг.Выгрузить();
	
	// Настройки выгрузки сведений по л/с с начислениями/показаниями и без них.
	СтрокаПоУмолчанию = ТаблицаНастроекВыгрузкиДанныхПоЛС.Найти("<По умолчанию>", "Услуга");
	
	// Данная строка с настройкой "По умолчанию" в таблице настроек выгрузки услуг означает, что по умолчанию
	// будем выгружать или начисления или показания по всем услугам. При этом:
	//
	// 1. Если нет данной строки, то это исключительная ситуация, так как строка добавляется программно и запрещено её удаление.
	//    При этом создаём параметры выгрузки начислений и показаний со значениями "ИСТИНА" для всех выбранных услуг в настройках
	//    сбора данных для квитанций и обменов, но не указанных в таблице настроек выгрузки услуг.
	//
	// 2. Если данная строка имеется, тогда используем в ней настройки "ВыгружатьНачисления" и "ВыгружатьПоказания" как
	//    параметры выгрузки сведений о начислениях и показаниях по умолчанию для тех услуг, которые явно были указаны в
	//    настройках сбора данных для квитанций и обменов, но не указаны явно в таблице настроек выгрузки услуг.
	//    При этом данную строку удаляем, так она более не используется.
	
	Если СтрокаПоУмолчанию = Неопределено Тогда
		
		ВыгружатьНачисленияПоУмолчанию = Истина;
		ВыгружатьПоказанияПоУмолчанию  = Истина;
		
	Иначе
		
		ВыгружатьНачисленияПоУмолчанию = СтрокаПоУмолчанию.ВыгружатьНачисления;
		ВыгружатьПоказанияПоУмолчанию  = СтрокаПоУмолчанию.ВыгружатьПоказания;
		
		ТаблицаНастроекВыгрузкиДанныхПоЛС.Удалить(СтрокаПоУмолчанию);
		
	КонецЕсли;
	
	// Подготовка сведений об услугах, по которым нужно выгружать начисления/показания.
	Запрос = Новый Запрос;
	
	// Пояснение к запросу:
	//  В пакете "втТаблицаУслуг" запроса отбираем в таблице настроек выгрузки услуг сведения по выбранным услугам в настройках
	//  сбора данных для квитанций и обменов. Остальные услуги в таблице настроек выгрузки услуг не учитываем.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаУслуг.Услуга КАК Услуга,
	|	ТаблицаУслуг.ВыгружатьНачисления КАК ВыгружатьНачисления,
	|	ТаблицаУслуг.ВыгружатьПоказания КАК ВыгружатьПоказания
	|ПОМЕСТИТЬ втТаблицаУслуг
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|ГДЕ
	|	ТаблицаУслуг.Услуга В(&СписокУслуг)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Услуга,
	|	КВП_Услуги.Ссылка.ВидУслуги КАК ВидУслуги,
	|	ЕСТЬNULL(втТаблицаУслуг.ВыгружатьНачисления, &ВыгружатьНачисленияПоУмолчанию) КАК ВыгружатьНачисления,
	|	ЕСТЬNULL(втТаблицаУслуг.ВыгружатьПоказания, &ВыгружатьПоказанияПоУмолчанию) КАК ВыгружатьПоказания,
	|	ВЫБОР
	|		КОГДА КВП_Услуги.Ссылка В (&СписокУслугКапРемонт)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугаКапРемонт
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаУслуг КАК втТаблицаУслуг
	|		ПО КВП_Услуги.Ссылка = втТаблицаУслуг.Услуга
	|ГДЕ
	|	КВП_Услуги.Ссылка В(&СписокУслуг)";
	
	Запрос.УстановитьПараметр("ТаблицаУслуг",                   ТаблицаНастроекВыгрузкиДанныхПоЛС);
	Запрос.УстановитьПараметр("ВыгружатьНачисленияПоУмолчанию", ВыгружатьНачисленияПоУмолчанию);
	Запрос.УстановитьПараметр("ВыгружатьПоказанияПоУмолчанию",  ВыгружатьПоказанияПоУмолчанию);
	Запрос.УстановитьПараметр("СписокУслугКапРемонт",           СтруктураНастроек.СписокУслугКапРемонт);
	Запрос.УстановитьПараметр("СписокУслуг",                    СтруктураНастроек.СписокУслуг);
	
	ТаблицаУслугиСНастройкамиВыгрузки = Запрос.Выполнить().Выгрузить();
	
	// Таблица услуг, для которых нужно выгружать начисления.
	СтруктураНастроек.Вставить("ТаблицаУслугВыгружатьНачисления", ТаблицаУслугиСНастройкамиВыгрузки.Скопировать(Новый Структура("ВыгружатьНачисления", Истина), "Услуга, ВидУслуги"));
	
	// Таблица услуг, для которых нужно выгружать показания.
	СтруктураНастроек.Вставить("ТаблицаУслугВыгружатьПоказания", ТаблицаУслугиСНастройкамиВыгрузки.Скопировать(Новый Структура("ВыгружатьПоказания", Истина), "Услуга"));
	
	// Подготовка отдельных списков услуг, по которым нужно выгружать начисления, для основной квитанции и квитанций кап. ремонта.
	// Используется именно список значений для того, чтобы использовать уже имеющиеся механизмы сбора данных для выгрузки.
	СтрокиУслугВыгружатьНачисленияОбщ       = ТаблицаУслугиСНастройкамиВыгрузки.НайтиСтроки(Новый Структура("ВыгружатьНачисления", Истина));
	СтрокиУслугВыгружатьНачисленияКапРемонт = ТаблицаУслугиСНастройкамиВыгрузки.НайтиСтроки(Новый Структура("ВыгружатьНачисления, УслугаКапРемонт", Истина, Истина));
	
	Если СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" И НЕ СтруктураНастроек.СписокУслугКапРемонт.Количество() = 0 Тогда
		СтрокиУслугВыгружатьНачисленияОсн = СтрокиУслугВыгружатьНачисленияОбщ;
	Иначе
		СтрокиУслугВыгружатьНачисленияОсн = ТаблицаУслугиСНастройкамиВыгрузки.НайтиСтроки(Новый Структура("ВыгружатьНачисления, УслугаКапРемонт", Истина, Ложь));
	КонецЕсли;
	
	ТаблицаУслугВыгружатьНачисленияОсн       = ТаблицаУслугиСНастройкамиВыгрузки.Скопировать(СтрокиУслугВыгружатьНачисленияОсн, "Услуга");
	ТаблицаУслугВыгружатьНачисленияКапРемонт = ТаблицаУслугиСНастройкамиВыгрузки.Скопировать(СтрокиУслугВыгружатьНачисленияКапРемонт, "Услуга");
	ТаблицаУслугВыгружатьНачисленияОбщ       = ТаблицаУслугиСНастройкамиВыгрузки.Скопировать(СтрокиУслугВыгружатьНачисленияОбщ, "Услуга");
	
	СписокУслугВыгружатьНачисленияОсн       = Новый СписокЗначений;
	СписокУслугВыгружатьНачисленияКапРемонт = Новый СписокЗначений;
	СписокУслугВыгружатьНачисленияОбщ       = Новый СписокЗначений;
	
	СписокУслугВыгружатьНачисленияОсн.ЗагрузитьЗначения(ТаблицаУслугВыгружатьНачисленияОсн.ВыгрузитьКолонку("Услуга"));
	СписокУслугВыгружатьНачисленияКапРемонт.ЗагрузитьЗначения(ТаблицаУслугВыгружатьНачисленияКапРемонт.ВыгрузитьКолонку("Услуга"));
	СписокУслугВыгружатьНачисленияОбщ.ЗагрузитьЗначения(ТаблицаУслугВыгружатьНачисленияОбщ.ВыгрузитьКолонку("Услуга"));
	
	СтруктураНастроек.Вставить("СписокУслугВыгружатьНачисленияОсн",       СписокУслугВыгружатьНачисленияОсн);
	СтруктураНастроек.Вставить("СписокУслугВыгружатьНачисленияКапРемонт", СписокУслугВыгружатьНачисленияКапРемонт);
	СтруктураНастроек.Вставить("СписокУслугВыгружатьНачисленияОбщ",       СписокУслугВыгружатьНачисленияОбщ);
	
КонецПроцедуры

// Формирует структуру с данными для выгрузки квитанций.
//
Функция ПолучитьСтруктуруСДаннымиДляКвитанции(НастройкаДоступа, СтруктураНастроек) Экспорт
	
	ОбщиеДанные = Новый Структура;
	
	ОбщиеДанные.Вставить("НачисленияПроведены", УстановитьФактПроведенияНачислений(НастройкаДоступа.ЧислоОкончанияПроведенияНачислений,
																				   НастройкаДоступа.МесяцОкончанияПроведенияНачислений,
																				   СтруктураНастроек.ПериодПросмотра));
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("ВыгрузкаДанныхПоЛС", СтруктураНастроек.ВыгрузкаДанныхПоЛС);
	
	// Записываем в структуру сведения об основной организации и об исполнителе расчетов.
	УПЖКХ_ПечатьКвитанцийСервер.ПодготовитьСведенияОбОрганизациях(ОбщиеДанные, СтруктураНастроек);
	
	Если СтруктураНастроек.ВыгрузкаДанныхПоЛС Тогда
		
		// Подготавливаем структуру с таблицами данных о наслениях по всем л/с.
		СтруктураОбщихТаблиц = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблиц(СтруктураНастроек);
		
		// Дополняем таблицу счетчиков счетчиками, отключенными в предыдущем месяце.
		ДополнитьТаблицуСчетчиковОтключеннымиСчетчиками(СтруктураОбщихТаблиц, СтруктураНастроек);
		
		Если СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
			// (ПЕНИ) Дополняем структуру общих таблиц таблицами начисления пени.
			УПЖКХ_ПечатьКвитанцийСервер.ДополнитьСтруктуруОбщихТаблицТаблицамиПоПеням(СтруктураОбщихТаблиц, СтруктураНастроек);
		КонецЕсли;
		
		Если СтруктураНастроек.ПечататьКвитанциюКапРемонт И Не СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" Тогда
			
			// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в основной квитанции.
			СтруктураОбщихТаблицОсновная = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, СтруктураНастроек.СписокУслугВыгружатьНачисленияОсн);
			
			// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в квитанции по кап ремонту.
			СтруктураОбщихТаблицКапРемонт = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, СтруктураНастроек.СписокУслугВыгружатьНачисленияКапРемонт);
			
			// Меняет состав таблицы счетчиков в соответствии с настройкой выгрузки показаний.
			ПерезаполнитьТаблицыСчетчиковУчитываяНастройкуВыгрузкиПоказаний(СтруктураОбщихТаблицКапРемонт, СтруктураНастроек);
			
		Иначе
			
			СтруктураОбщихТаблицОсновная = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, СтруктураНастроек.СписокУслугВыгружатьНачисленияОсн);
			
		КонецЕсли;
		
		// Меняет состав таблицы счетчиков в соответствии с настройкой выгрузки показаний.
		ПерезаполнитьТаблицыСчетчиковУчитываяНастройкуВыгрузкиПоказаний(СтруктураОбщихТаблицОсновная, СтруктураНастроек);
		
		СтруктураВыгрузки.Вставить("ВыгружатьНачисления",         НЕ СтруктураНастроек.ТаблицаУслугВыгружатьНачисления.Количество() = 0);
		СтруктураВыгрузки.Вставить("ВыгружатьПерсональныеДанные", СтруктураНастроек.ВыгружатьПерсональныеДанные);
		
		// Добавляем услуги без начислений за отчетный период.
		
		// Основная квитанция.
		СтруктураОбщихТаблицОсновная.Вставить("ТаблицаУслугБезНачислений", СформироватьТаблицуУслугБезНачисленийКвитанцияОсновная(СтруктураОбщихТаблицОсновная, СтруктураНастроек));
		
		Если СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
			СтруктураОбщихТаблицОсновная.Вставить("ТаблицаПениБезНачислений", СформироватьТаблицуУслугБезНачисленийКвитанцияПени(СтруктураОбщихТаблицОсновная, СтруктураНастроек));
		КонецЕсли;
		
		// Квитанция кап. ремонт.
		Если СтруктураНастроек.ПечататьКвитанциюКапРемонт И Не СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" Тогда
			
			СтруктураОбщихТаблицКапРемонт.Вставить("ТаблицаУслугБезНачислений", СформироватьТаблицуУслугБезНачисленийКвитанцияОсновная(СтруктураОбщихТаблицКапРемонт, СтруктураНастроек));
			
			Если СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
				СтруктураОбщихТаблицКапРемонт.Вставить("ТаблицаПениБезНачислений", СформироватьТаблицуУслугБезНачисленийКвитанцияПени(СтруктураОбщихТаблицКапРемонт, СтруктураНастроек));
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПлательщиков = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруСДаннымиОПлательщиках(СтруктураНастроек);
		
	Иначе
		
		// Подготавливаем заменитель структуры общих таблиц для выгрузки ЭПД.
		// Формировать полную структуру общих таблиц нецелесообразно, так как
		// большая часть ее данных использоваться не будет.
		
		СтруктураОбщихТаблиц = Новый Структура;
		
		СтруктураОбщихТаблиц.Вставить("ТаблицаРСЗданий", УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуРасчетныхСчетовОрганизацийОбсуживающихЗдания(СтруктураНастроек, Ложь));
		
		Если ТипЗнч(СтруктураНастроек.СтруктураСДаннымиПоЭПД) = Тип("Структура") Тогда
			
			МассивДокументов = СтруктураНастроек.СтруктураСДаннымиПоЭПД.МассивДокументов;
			
			СтруктураНастроек.СписокЗданий.Очистить();
			
			Для каждого ТекДокумент из МассивДокументов Цикл
				СтруктураНастроек.СписокЗданий.Добавить(ТекДокумент.Здание);
			КонецЦикла;
			
		КонецЕсли;
		
		СтруктураПлательщиков = Новый Структура;
		СтруктураПлательщиков.Вставить("ТаблицаСведений", УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуБазРаспределения(СтруктураНастроек));
		
	КонецЕсли;
	
	ЗаполнитьОсновныеСведенияФайла(СтруктураВыгрузки, СтруктураНастроек, ОбщиеДанные);
	ЗаполнитьСведенияОбОграниченииВводаПоказаний(СтруктураВыгрузки, СтруктураНастроек);
	ЗаполнитьСведенияОЗданияхДляФайла(СтруктураВыгрузки, СтруктураПлательщиков, СтруктураОбщихТаблиц, СтруктураНастроек);
	
	Если СтруктураНастроек.ВыгрузкаДанныхПоЛС Тогда
		
		ЗаполнитьОбщиеСведенияОПоставщиках(СтруктураВыгрузки, СтруктураНастроек, СтруктураОбщихТаблиц, ОбщиеДанные);
		
		ЗаполнитьСведенияПоЛицевымСчетам(СтруктураВыгрузки, СтруктураНастроек, СтруктураОбщихТаблиц, СтруктураОбщихТаблицОсновная, 
										 СтруктураОбщихТаблицКапРемонт, СтруктураПлательщиков, ОбщиеДанные);
		
		ЗаполнитьСтатистикуФайлаОбмена(СтруктураВыгрузки, СтруктураОбщихТаблицОсновная, СтруктураОбщихТаблицКапРемонт);
		
		ЗаполнитьДополнительныеСведенияПриВыгрузкеДанныхЗаПредыдущийПериод(СтруктураВыгрузки, НастройкаДоступа, СтруктураНастроек);
		
	КонецЕсли;
	
	Возврат СтруктураВыгрузки;
	
КонецФункции

// Дополняет общую таблицу счетчиков счетчиками, отключенными в предыдущем месяце.
//
Процедура ДополнитьТаблицуСчетчиковОтключеннымиСчетчиками(СтруктураОбщихТаблиц, СтруктураНастроек) Экспорт
	
	ВыборкаОтключенныхСчетчиков = ПолучитьТаблицуОтключенныхСчетчиков(СтруктураОбщихТаблиц, СтруктураНастроек);
	
	Пока ВыборкаОтключенныхСчетчиков.Следующий() Цикл
		НоваяСтрока = СтруктураОбщихТаблиц.ТаблицаСчетчиковОбщ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаОтключенныхСчетчиков);
	КонецЦикла;
	
КонецПроцедуры

// Формирует выборку счетчиков, отключенных в предыдущем месяце.
//
Функция ПолучитьТаблицуОтключенныхСчетчиков(СтруктураОбщихТаблиц, СтруктураНастроек)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОбъектов.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаОбъектов.Помещение КАК Помещение,
	|	ТаблицаОбъектов.Подъезд КАК Подъезд,
	|	ТаблицаОбъектов.Здание КАК Здание
	|ПОМЕСТИТЬ втТаблицаОбъектовВходящая
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втТаблицаОбъектов
	|ИЗ
	|	втТаблицаОбъектовВходящая КАК ТаблицаОбъектов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОбъектов.Помещение
	|ИЗ
	|	втТаблицаОбъектовВходящая КАК ТаблицаОбъектов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОбъектов.Подъезд
	|ИЗ
	|	втТаблицаОбъектовВходящая КАК ТаблицаОбъектов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОбъектов.Здание
	|ИЗ
	|	втТаблицаОбъектовВходящая КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Код КАК КодСчетчика,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект) = ТИП(Справочник.КВП_ЛицевыеСчета)
	|				ИЛИ ТИПЗНАЧЕНИЯ(КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект) = ТИП(Справочник.УПЖКХ_Помещения)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЯвляетсяОПУ,
	|	ИСТИНА КАК Отключен
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаНач,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втТаблицаОбъектов.ЛицевойСчет
	|					ИЗ
	|						втТаблицаОбъектов КАК втТаблицаОбъектов)
	|				И НЕ Счетчик В (&СчетчикиИсключения)
	|				И ДатаИзменения <= &ДатаНач
	|				И ДатаИзменения > ДОБАВИТЬКДАТЕ(&ДатаНач, МЕСЯЦ, -1)) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	НЕ КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("ТаблицаОбъектов",    СтруктураНастроек.ТаблицаОбъектов);
	Запрос.УстановитьПараметр("ДатаНач",            НачалоМесяца(СтруктураНастроек.ПериодПросмотра));
	Запрос.УстановитьПараметр("СчетчикиИсключения", СтруктураОбщихТаблиц.ТаблицаСчетчиковОбщ.ВыгрузитьКолонку("Счетчик"));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат Результат;
	
КонецФункции

// Меняет состав таблицы счетчиков в соответствии с настройкой выгрузки показаний.
//
Процедура ПерезаполнитьТаблицыСчетчиковУчитываяНастройкуВыгрузкиПоказаний(СтруктураОбщихТаблиц, СтруктураНастроек) Экспорт
	
	СтруктураОбщихТаблиц.ТаблицаСчетчиковОбщ = ОтобратьПоказанияСчетчиковНаОснованииНастройкиВыгрузкиПоказаний(СтруктураОбщихТаблиц.ТаблицаСчетчиковОбщ, СтруктураНастроек);
	
КонецПроцедуры

// Выполняет отбор показаний для выгрузки на основании настройки выгрузки показаний.
//
Функция ОтобратьПоказанияСчетчиковНаОснованииНастройкиВыгрузкиПоказаний(ТаблицаСчетчиковВходящая, СтруктураНастроек)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ втТаблицаСчетчиков
	|ИЗ
	|	&ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|ГДЕ
	|	ТаблицаСчетчиков.Услуга В (&СписокУслуг)
	|;
	|
	|/////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	втТаблицаСчетчиков КАК втТаблицаСчетчиков";
	
	Запрос.УстановитьПараметр("ТаблицаСчетчиков", ТаблицаСчетчиковВходящая);
	Запрос.УстановитьПараметр("СписокУслуг",      ?(СтруктураНастроек.Свойство("ТаблицаУслугВыгружатьПоказания"), СтруктураНастроек.ТаблицаУслугВыгружатьПоказания.ВыгрузитьКолонку("Услуга"), СтруктураНастроек.СписокУслуг));
	
	ТаблицаСчетчиков = Запрос.Выполнить().Выгрузить();
	ТаблицаСчетчиков.Индексы.Добавить("ЛицевойСчет");
	
	Возврат ТаблицаСчетчиков;
	
КонецФункции

// Заполняет сведения по лицевым счетам в структуре выгрузки.
//
Процедура ЗаполнитьСведенияПоЛицевымСчетам(СтруктураВыгрузки, СтруктураНастроек, СтруктураОбщихТаблиц, СтруктураОбщихТаблицОсновная,
										   СтруктураОбщихТаблицКапРемонт, СтруктураПлательщиков, ОбщиеДанные, ИспользоватьПрефикс = Истина) Экспорт
	
	СтруктураВыгрузки.Вставить("accs", Новый ТаблицаЗначений);
	
	ТаблицаЛС = Новый ТаблицаЗначений;
	ТаблицаЛС.Колонки.Добавить("id");
	ТаблицаЛС.Колонки.Добавить("del");
	ТаблицаЛС.Колонки.Добавить("kod_ls");
	ТаблицаЛС.Колонки.Добавить("type");
	ТаблицаЛС.Колонки.Добавить("owner");
	ТаблицаЛС.Колонки.Добавить("name");
	ТаблицаЛС.Колонки.Добавить("house_id");
	ТаблицаЛС.Колонки.Добавить("email");
	ТаблицаЛС.Колонки.Добавить("els_main");
	ТаблицаЛС.Колонки.Добавить("els_overhaul");
	ТаблицаЛС.Колонки.Добавить("izhku_main");
	ТаблицаЛС.Колонки.Добавить("izhku_overhaul");
	ТаблицаЛС.Колонки.Добавить("room");
	ТаблицаЛС.Колонки.Добавить("meter");
	ТаблицаЛС.Колонки.Добавить("main_com"); // Строка итогов основной квитанции.
	ТаблицаЛС.Колонки.Добавить("main_barcode"); // ШК основной квитанции.
	ТаблицаЛС.Колонки.Добавить("main_barcode_with_insurance"); // ШК основной квитанции с учетом добровольного страхования
	ТаблицаЛС.Колонки.Добавить("main"); // Строки начисления основной квитанции.
	ТаблицаЛС.Колонки.Добавить("main_insurance"); // Строки добровольного страхования
	ТаблицаЛС.Колонки.Добавить("main_debt");
	ТаблицаЛС.Колонки.Добавить("main_credit"); // Строки рассрочки основной квитанции.
	ТаблицаЛС.Колонки.Добавить("main_correction"); // Строки перерасчетов основной квитанции.
	ТаблицаЛС.Колонки.Добавить("main_contractor"); // Строки поставщиков основной квитанции.
	ТаблицаЛС.Колонки.Добавить("overhaul_com"); // Квитанция на КР.
	ТаблицаЛС.Колонки.Добавить("overhaul_barcode");
	ТаблицаЛС.Колонки.Добавить("overhaul");
	ТаблицаЛС.Колонки.Добавить("overhaul_debt");
	ТаблицаЛС.Колонки.Добавить("overhaul_credit");
	ТаблицаЛС.Колонки.Добавить("overhaul_correction");
	ТаблицаЛС.Колонки.Добавить("overhaul_contractor");
	ТаблицаЛС.Колонки.Добавить("finesMain_com"); // Квитанция на пени по основным услугам.
	ТаблицаЛС.Колонки.Добавить("finesMain_barcode");
	ТаблицаЛС.Колонки.Добавить("finesMain");
	ТаблицаЛС.Колонки.Добавить("finesMain_debt");
	ТаблицаЛС.Колонки.Добавить("finesMain_correction");
	ТаблицаЛС.Колонки.Добавить("finesMain_contractor");
	ТаблицаЛС.Колонки.Добавить("finesOverhaul_com"); // Квитанция на пени по услугам КР.
	ТаблицаЛС.Колонки.Добавить("finesOverhaul_barcode");
	ТаблицаЛС.Колонки.Добавить("finesOverhaul");
	ТаблицаЛС.Колонки.Добавить("finesOverhaul_debt");
	ТаблицаЛС.Колонки.Добавить("finesOverhaul_correction");
	ТаблицаЛС.Колонки.Добавить("finesOverhaul_contractor");
	
	Если ИспользоватьПрефикс Тогда
		ПрефиксОрганизации = ПолучитьПрефикс(СтруктураНастроек.Организация);
	Иначе
		ПрефиксОрганизации = "";
	КонецЕсли;
	
	ТаблицаНачисления = Новый ТаблицаЗначений;
	ТаблицаНачисления.Колонки.Добавить("ВидУслуги");
	ТаблицаНачисления.Колонки.Добавить("component");
	ТаблицаНачисления.Колонки.Добавить("group");
	ТаблицаНачисления.Колонки.Добавить("name");
	ТаблицаНачисления.Колонки.Добавить("units");
	ТаблицаНачисления.Колонки.Добавить("debt_beg");
	ТаблицаНачисления.Колонки.Добавить("debt_end");
	ТаблицаНачисления.Колонки.Добавить("amount");
	ТаблицаНачисления.Колонки.Добавить("amountn");
	ТаблицаНачисления.Колонки.Добавить("hamount");
	ТаблицаНачисления.Колонки.Добавить("hamountn");
	ТаблицаНачисления.Колонки.Добавить("amount_view");
	ТаблицаНачисления.Колонки.Добавить("csum"); // Всего начислено.
	ТаблицаНачисления.Колонки.Добавить("sum");
	ТаблицаНачисления.Колонки.Добавить("hsum");
	ТаблицаНачисления.Колонки.Добавить("norm");
	ТаблицаНачисления.Колонки.Добавить("hnorm");
	ТаблицаНачисления.Колонки.Добавить("correction");
	ТаблицаНачисления.Колонки.Добавить("compensation");
	ТаблицаНачисления.Колонки.Добавить("peni");
	ТаблицаНачисления.Колонки.Добавить("sum_payed");
	ТаблицаНачисления.Колонки.Добавить("csum_to_pay"); // Всего к оплате.
	ТаблицаНачисления.Колонки.Добавить("sum_to_pay");
	ТаблицаНачисления.Колонки.Добавить("hsum_to_pay");
	ТаблицаНачисления.Колонки.Добавить("tarif");
	ТаблицаНачисления.Колонки.Добавить("volumep");
	ТаблицаНачисления.Колонки.Добавить("volumea");
	ТаблицаНачисления.Колонки.Добавить("volumeh");
	ТаблицаНачисления.Колонки.Добавить("amount_norm");
	ТаблицаНачисления.Колонки.Добавить("meter");
	ТаблицаНачисления.Колонки.Добавить("hmeter");
	ТаблицаНачисления.Колонки.Добавить("Порядок");
	ТаблицаНачисления.Колонки.Добавить("СуммаНачисленийЧислом", Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("СуммаПерерасчетовЧислом", Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("bill_only"); // Строка относится к СОИ.
	ТаблицаНачисления.Колонки.Добавить("raise_multiplier");
	ТаблицаНачисления.Колонки.Добавить("raise_sum", Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("sum_without_raise");
	ТаблицаНачисления.Колонки.Добавить("csum_without_raise");
	ТаблицаНачисления.Колонки.Добавить("contractor");
	
	// Начисления по добровольному страхованию.
	ТаблицаДобровольногоСтрахования = Новый ТаблицаЗначений;
	ТаблицаДобровольногоСтрахования.Колонки.Добавить("name");
	ТаблицаДобровольногоСтрахования.Колонки.Добавить("units");
	ТаблицаДобровольногоСтрахования.Колонки.Добавить("amount");
	ТаблицаДобровольногоСтрахования.Колонки.Добавить("sum");
	ТаблицаДобровольногоСтрахования.Колонки.Добавить("sum_payed");
	ТаблицаДобровольногоСтрахования.Колонки.Добавить("tarif");
	
	// Услуги без начислений.
	ТаблицаУслугБезНачислений = Новый ТаблицаЗначений;
	ТаблицаУслугБезНачислений.Колонки.Добавить("name");
	ТаблицаУслугБезНачислений.Колонки.Добавить("units");
	ТаблицаУслугБезНачислений.Колонки.Добавить("debt_beg");
	ТаблицаУслугБезНачислений.Колонки.Добавить("debt_end");
	ТаблицаУслугБезНачислений.Колонки.Добавить("peni");
	ТаблицаУслугБезНачислений.Колонки.Добавить("sum_payed");
	ТаблицаУслугБезНачислений.Колонки.Добавить("tarif");
	ТаблицаУслугБезНачислений.Колонки.Добавить("meter");
	
	ТаблицаРассрочки = Новый ТаблицаЗначений;
	ТаблицаРассрочки.Колонки.Добавить("name");
	ТаблицаРассрочки.Колонки.Добавить("sum");
	ТаблицаРассрочки.Колонки.Добавить("sum_credit");
	ТаблицаРассрочки.Колонки.Добавить("rate");
	ТаблицаРассрочки.Колонки.Добавить("balance");
	ТаблицаРассрочки.Колонки.Добавить("sum_to_pay");
	ТаблицаРассрочки.Колонки.Добавить("contractor");
	
	ТаблицаПерерасчетов = Новый ТаблицаЗначений;
	ТаблицаПерерасчетов.Колонки.Добавить("name");
	ТаблицаПерерасчетов.Колонки.Добавить("grounds");
	ТаблицаПерерасчетов.Колонки.Добавить("sum");
	ТаблицаПерерасчетов.Колонки.Добавить("contractor");
	
	ТаблицаПоставщиков = Новый ТаблицаЗначений;
	ТаблицаПоставщиков.Колонки.Добавить("id");
	ТаблицаПоставщиков.Колонки.Добавить("services");
	ТаблицаПоставщиков.Колонки.Добавить("debt_beg");
	ТаблицаПоставщиков.Колонки.Добавить("sum");
	ТаблицаПоставщиков.Колонки.Добавить("peni");
	ТаблицаПоставщиков.Колонки.Добавить("sum_payed");
	ТаблицаПоставщиков.Колонки.Добавить("summ");
	ТаблицаПоставщиков.Колонки.Добавить("sum_to_pay");
	ТаблицаПоставщиков.Колонки.Добавить("num");
	ТаблицаПоставщиков.Колонки.Добавить("barcode");
	ТаблицаПоставщиков.Колонки.Добавить("is_overhaul");
	
	ТаблицаСчетчиков = ПодготовитьТаблицуСчетчиков();
	
	Для Каждого СтрокаЗакрытогоЛС ИЗ СтруктураОбщихТаблиц.ТаблицаЗакрытыхЛС Цикл
		НоваяСтрока = ТаблицаЛС.Добавить();
		
		СтрокаЗакрытогоВТаблицеОбъектов = СтруктураНастроек.ТаблицаОбъектов.Найти(СтрокаЗакрытогоЛС.ЛицевойСчет, "ЛицевойСчет");
		
		Если СтрокаЗакрытогоВТаблицеОбъектов = Неопределено Тогда
			НоваяСтрока.id = СтрокаЗакрытогоЛС.Идентификатор;
		Иначе
			НоваяСтрока.id = СтрокаЗакрытогоВТаблицеОбъектов.Идентификатор;
			СтруктураНастроек.ТаблицаОбъектов.Удалить(СтрокаЗакрытогоВТаблицеОбъектов);
		КонецЕсли;
		
		НоваяСтрока.del = "1";
	КонецЦикла;
	
	Для Каждого СтрокаОбъекта Из СтруктураНастроек.ТаблицаОбъектов Цикл
		УПЖКХ_ПечатьКвитанцийСервер.ПодготовитьСведенияОПлательщике(ОбщиеДанные, СтруктураНастроек, СтруктураПлательщиков, СтрокаОбъекта, СтруктураОбщихТаблиц);
		
		НоваяСтрока = ТаблицаЛС.Добавить();
		НоваяСтрока.id     = ОбщиеДанные.ИдентификаторЛС;
		НоваяСтрока.kod_ls = ?(ПустаяСтрока(ПрефиксОрганизации), "", ПрефиксОрганизации + " ") + ОбщиеДанные.ИдентификаторЛС;
		НоваяСтрока.type   = ?(ОбщиеДанные.ВладелецЖилец, "1", ?(ОбщиеДанные.ОтветственныйКонтрагентФизЛицо, "1", "2"));
		Если СтруктураНастроек.ВыгружатьПерсональныеДанные Тогда
			НоваяСтрока.owner = ОбщиеДанные.ФИОСтрока;
		КонецЕсли;
		НоваяСтрока.email          = ОбщиеДанные.АдресЭлектроннойПочты;
		НоваяСтрока.name           = СтрокаОбъекта.НаименованиеЛицевогоСчета;
		НоваяСтрока.house_id       = СтрокаОбъекта.КодЗдания;
		НоваяСтрока.els_main       = СтрокаОбъекта.ЕЛСвГИСЖКХ;
		НоваяСтрока.els_overhaul   = СтрокаОбъекта.ЕЛСвГИСЖКХКапРемонт;
		НоваяСтрока.izhku_main     = СтрокаОбъекта.ИдентификаторЖКУ;
		НоваяСтрока.izhku_overhaul = СтрокаОбъекта.ИдентификаторЖКУКапРемонт;
		
		СтруктураПомещения = Новый Структура;
		СтруктураПомещения.Вставить("num",           XMLСтрока(СтрокаОбъекта.КодПомещения));
		СтруктураПомещения.Вставить("abbr",          СтрокаОбъекта.НаименованиеПомещения);
		СтруктураПомещения.Вставить("type",          XMLСтрока(ОбщиеДанные.ТипПомещения));
		СтруктураПомещения.Вставить("property_type", XMLСтрока(ОбщиеДанные.ТипСобственности));
		СтруктураПомещения.Вставить("area",          XMLСтрока(ОбщиеДанные.ОбщаяПлощадь));
		СтруктураПомещения.Вставить("habarea",       XMLСтрока(ОбщиеДанные.ЖилаяПлощадь));
		СтруктураПомещения.Вставить("people",        XMLСтрока(ОбщиеДанные.КоличествоПроживающих));
		СтруктураПомещения.Вставить("reg",           XMLСтрока(ОбщиеДанные.КоличествоЗарегистрированных));
		СтруктураПомещения.Вставить("comp",          XMLСтрока(ОбщиеДанные.КоличествоЛьготников));
		
		НоваяСтрока.room = СтруктураПомещения;
		
		ТаблицаСчетчиков.Очистить();
		
		ДополнитьТаблицуСчетчиков(ТаблицаСчетчиков, СтруктураНастроек, СтруктураОбщихТаблиц.ТаблицаСчетчиковОбщ.НайтиСтроки(Новый Структура("ЛицевойСчет", СтрокаОбъекта.ЛицевойСчет)));
		ДополнитьТаблицуСчетчиков(ТаблицаСчетчиков, СтруктураНастроек, СтруктураОбщихТаблиц.ТаблицаСчетчиковОбщ.НайтиСтроки(Новый Структура("ЛицевойСчет", СтрокаОбъекта.Помещение)));
		
		НоваяСтрока.meter = ТаблицаСчетчиков.Скопировать();
		
		Если НЕ СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" И СтруктураНастроек.ПечататьКвитанциюКапРемонт Тогда
			Если СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт" Тогда
				ЗаполнитьДанныеПоТекущейКвитанции(ТаблицаНачисления, ТаблицаРассрочки, ТаблицаПерерасчетов, ТаблицаПоставщиков, ТаблицаДобровольногоСтрахования, ТаблицаУслугБезНачислений, 
												  НоваяСтрока, СтруктураОбщихТаблицОсновная, СтруктураНастроек, ОбщиеДанные);
				
				ЗаполнитьДанныеПоТекущейКвитанции(ТаблицаНачисления, ТаблицаРассрочки, ТаблицаПерерасчетов, ТаблицаПоставщиков, ТаблицаДобровольногоСтрахования, ТаблицаУслугБезНачислений,
												  НоваяСтрока, СтруктураОбщихТаблицКапРемонт, СтруктураНастроек, ОбщиеДанные, Истина);
			Иначе
				ЗаполнитьДанныеПоТекущейКвитанции(ТаблицаНачисления, ТаблицаРассрочки, ТаблицаПерерасчетов, ТаблицаПоставщиков, ТаблицаДобровольногоСтрахования, ТаблицаУслугБезНачислений, 
												  НоваяСтрока, СтруктураОбщихТаблицКапРемонт, СтруктураНастроек, ОбщиеДанные, Истина);
			КонецЕсли;
		Иначе
			ЗаполнитьДанныеПоТекущейКвитанции(ТаблицаНачисления, ТаблицаРассрочки, ТаблицаПерерасчетов, ТаблицаПоставщиков, ТаблицаДобровольногоСтрахования, ТаблицаУслугБезНачислений,
											  НоваяСтрока, СтруктураОбщихТаблицОсновная, СтруктураНастроек, ОбщиеДанные);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураВыгрузки.accs = ТаблицаЛС.Скопировать();
	
КонецПроцедуры // ЗаполнитьСведенияПоЛицевымСчетам()

// Заполняет сведений о добровольном страховании.
Процедура ПодготовитьДанныеОДобровольномСтраховании(ТаблицаДобровольногоСтрахования, ТекущиеДанные, СтруктураНастроек, ВнесеноНаДобровольноеСтрахование)
	
	ТаблицаДобровольногоСтрахования.Очистить();
	
	ДанныеОСтраховании = ТекущиеДанные.ТаблицаДобровольногоСтрахования;
	
	Для Каждого ТекСтрока Из ДанныеОСтраховании Цикл
		НоваяСтрока = ТаблицаДобровольногоСтрахования.Добавить();
		
		НоваяСтрока.name      = Строка(ТекСтрока.ВидУслуги);
		НоваяСтрока.units     = Строка(ТекСтрока.ЕдИзм);
		НоваяСтрока.amount    = XMLСтрока(ТекСтрока.Количество);
		НоваяСтрока.sum       = XMLСтрока(ТекСтрока.СуммаНачисления);
		НоваяСтрока.sum_payed = XMLСтрока(ВнесеноНаДобровольноеСтрахование);
		НоваяСтрока.tarif     = Строка(ТекСтрока.Тариф);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет статистические данные файлов обмена.
//
Процедура ЗаполнитьСтатистикуФайлаОбмена(СтруктураВыгрузки, СтруктураОбщихТаблицОсновная, СтруктураОбщихТаблицКапРемонт)
	
	НачисленоПоФайлу   = 0;
	ОплаченоПоФайлу    = 0;
	СуммаКОплатеЧислом = 0;
	
	Для каждого ТекЛС из СтруктураВыгрузки.accs Цикл
		
		Если НЕ ТекЛС.main = Неопределено Тогда
			
			Для каждого ТекСтрокаНачислений из ТекЛС.main Цикл
				Если ТекСтрокаНачислений.component = "" Тогда
					НачисленоПоФайлу = НачисленоПоФайлу + ТекСтрокаНачислений.СуммаНачисленийЧислом + ТекСтрокаНачислений.СуммаПерерасчетовЧислом;
				КонецЕсли;
			КонецЦикла;
			
			ОплаченоПоФайлу    = ОплаченоПоФайлу + ТекЛС.main_com.СуммаОплатЧислом;
			СуммаКОплатеЧислом = СуммаКОплатеЧислом + ТекЛС.main_com.СуммаКОплатеЧислом;
			
		КонецЕсли;
		
		Если НЕ ТекЛС.finesMain = Неопределено Тогда
			
			Для каждого ТекСтрокаНачислений из ТекЛС.finesMain Цикл
				НачисленоПоФайлу = НачисленоПоФайлу + ТекСтрокаНачислений.СуммаНачисленийЧислом + ТекСтрокаНачислений.СуммаПерерасчетовЧислом;
			КонецЦикла;
			
			ОплаченоПоФайлу    = ОплаченоПоФайлу + ТекЛС.finesMain_com.СуммаОплатЧислом;
			СуммаКОплатеЧислом = СуммаКОплатеЧислом + ТекЛС.finesMain_com.СуммаКОплатеЧислом;
			
		КонецЕсли;
		
		Если НЕ ТекЛС.overhaul = Неопределено Тогда
			
			Для каждого ТекСтрокаНачислений из ТекЛС.overhaul Цикл
				Если ТекСтрокаНачислений.component = "" Тогда
					НачисленоПоФайлу = НачисленоПоФайлу + ТекСтрокаНачислений.СуммаНачисленийЧислом + ТекСтрокаНачислений.СуммаПерерасчетовЧислом;
				КонецЕсли;
			КонецЦикла;
			
			ОплаченоПоФайлу    = ОплаченоПоФайлу + ТекЛС.overhaul_com.СуммаОплатЧислом;
			СуммаКОплатеЧислом = СуммаКОплатеЧислом + ТекЛС.overhaul_com.СуммаКОплатеЧислом;
			
		КонецЕсли;
		
		Если НЕ ТекЛС.finesOverhaul = Неопределено Тогда
			
			Для каждого ТекСтрокаНачислений из ТекЛС.finesOverhaul Цикл
				НачисленоПоФайлу = НачисленоПоФайлу + ТекСтрокаНачислений.СуммаНачисленийЧислом + ТекСтрокаНачислений.СуммаПерерасчетовЧислом;
			КонецЦикла;
			
			ОплаченоПоФайлу    = ОплаченоПоФайлу + ТекЛС.finesOverhaul_com.СуммаОплатЧислом;
			СуммаКОплатеЧислом = СуммаКОплатеЧислом + ТекЛС.finesOverhaul_com.СуммаКОплатеЧислом;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураВыгрузки.Вставить("info", Новый Структура("accs_count, sum, sum_payed, sum_to_pay"));
	
	СтруктураВыгрузки.info.accs_count = XMLСтрока(СтруктураВыгрузки.accs.Количество());
	СтруктураВыгрузки.info.sum        = XMLСтрока(НачисленоПоФайлу);
	СтруктураВыгрузки.info.sum_payed  = XMLСтрока(ОплаченоПоФайлу);
	СтруктураВыгрузки.info.sum_to_pay = XMLСтрока(СуммаКОплатеЧислом);
	
КонецПроцедуры

// Заполняет основные сведения в структуре выгрузки.
//
Процедура ЗаполнитьОсновныеСведенияФайла(СтруктураВыгрузки, СтруктураНастроек, ОбщиеДанные)
	
	СтруктураВыгрузки.Вставить("filedate", XMLСтрока(НачалоМесяца(СтруктураНастроек.ПериодПросмотра)));
	СтруктураВыгрузки.Вставить("name",     ОбщиеДанные.Организация);
	СтруктураВыгрузки.Вставить("inn",      ОбщиеДанные.ИННОрганизации);
	СтруктураВыгрузки.Вставить("filetype", "calculations");
	СтруктураВыгрузки.Вставить("version",  XMLСтрока(4));
	СтруктураВыгрузки.Вставить("kpp",      ОбщиеДанные.КППОрганизации);
	СтруктураВыгрузки.Вставить("bank",     СокрЛП(ОбщиеДанные.Банк));
	СтруктураВыгрузки.Вставить("rs",       ОбщиеДанные.РасчетныйСчет);
	СтруктураВыгрузки.Вставить("ks",       ОбщиеДанные.КоррСчет);
	СтруктураВыгрузки.Вставить("bik",      ОбщиеДанные.БИК);
	СтруктураВыгрузки.Вставить("ready",    ОбщиеДанные.НачисленияПроведены);
	СтруктураВыгрузки.Вставить("address",  ОбщиеДанные.ЮрАдресОрганизации);
	СтруктураВыгрузки.Вставить("phone",    ?(СтрНачинаетсяС(ОбщиеДанные.Телефон, "тел.: "), Сред(ОбщиеДанные.Телефон, 7), ОбщиеДанные.Телефон));
	СтруктураВыгрузки.Вставить("email",    ОбщиеДанные.Email);
	СтруктураВыгрузки.Вставить("site",     ОбщиеДанные.СайтОрганизации);
	СтруктураВыгрузки.Вставить("additional_info_main",     УПЖКХ_ВебИнтеграцияОбщегоНазначения.ПреобразоватьСтрокуВBase64(ОбщиеДанные.ДопИнформация,          СтруктураНастроек.КодировкаФайла));
	СтруктураВыгрузки.Вставить("additional_info_overhaul", УПЖКХ_ВебИнтеграцияОбщегоНазначения.ПреобразоватьСтрокуВBase64(ОбщиеДанные.ДопИнформацияКР,        СтруктураНастроек.КодировкаФайла));
	СтруктураВыгрузки.Вставить("annotation_main",          УПЖКХ_ВебИнтеграцияОбщегоНазначения.ПреобразоватьСтрокуВBase64(ОбщиеДанные.ПримечаниеКвитанцииОсн, СтруктураНастроек.КодировкаФайла));
	СтруктураВыгрузки.Вставить("annotation_overhaul",      УПЖКХ_ВебИнтеграцияОбщегоНазначения.ПреобразоватьСтрокуВBase64(ОбщиеДанные.ПримечаниеКвитанцииКР,  СтруктураНастроек.КодировкаФайла));
	
КонецПроцедуры

// Заполняет сведения об ограничении периода ввода показаний.
//
Процедура ЗаполнитьСведенияОбОграниченииВводаПоказаний(СтруктураВыгрузки, СтруктураНастроек) Экспорт
	
	Если Не СтруктураНастроек.ПараметрыУП.ВариантОграниченияПериодаВводаПоказаний = 0 Тогда
		
		СтруктураВыгрузки.Вставить("meters_date_limitation", Новый Структура("is_limited, date_begin, date_end, reason"));
		
		СтруктураВыгрузки.meters_date_limitation.is_limited = ?(СтруктураНастроек.ПараметрыУП.ВариантОграниченияПериодаВводаПоказаний = 1, "Y", "N");
		СтруктураВыгрузки.meters_date_limitation.date_begin = XMLСтрока(СтруктураНастроек.ПараметрыУП.ЧислоНачалаПериодаПриемаПоказаний);
		СтруктураВыгрузки.meters_date_limitation.date_end   = XMLСтрока(СтруктураНастроек.ПараметрыУП.ЧислоОкончанияПериодаПриемаПоказаний);
		СтруктураВыгрузки.meters_date_limitation.reason     = СтруктураНастроек.ПараметрыУП.ПричинаОграниченияВводаПоказаний;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет сведения о поставщиках в структуре выгрузки.
//
Процедура ЗаполнитьОбщиеСведенияОПоставщиках(СтруктураВыгрузки, СтруктураНастроек, СтруктураОбщихТаблиц, ОбщиеДанные) Экспорт
	
	// Таблица поставщиков предназначена для заполнения тега "contractors". Данный тег предназначен для передачи
	// развернутой информации о поставщиках услуг, которые используется для вывода в таблице поставщиков в квитанциях.
	// При этом:
	//
	//1. Управляющая организация, для которой осуществляется выгрузка, (или исполнитель расчетов, указанный в настройках
	//   сбора данных) всегда попадает в таблицу поставщиков. Для нее и только для нее указывается параметр "executor",
	//   который может принимать следующие значения:
	//     "1" - является УО, для которой выполняется выгрузка.
	//     "2" - является исполнителем расчетов, принимающим платежи вместо УО.
	//
	//2. Каждому поставщику должна соответствовать только одна строка таблицы. Наличие нескольких записей не допускается.
	//
	//3. Получатель платежей по кап. ремонту, если его нет среди поставщиков услуг, и он не является УО или исполнителем
	//   расчетов, добавляется к поставщикам. Если он уже есть, то не добавляется.
	//
	//4. В качестве расчетного счета любого поставщика всегда используется его основной банковский счет.
	//   Сведения о расчетных счетах отдельных зданий (как по основным услугам, так и по кап. ремонту) являются информацией,
	//   принадлежащей зданиям, и выгружаются уже в их контексте.
	
	// Таблица поставщиков.
	СтруктураВыгрузки.Вставить("contractors", ПодготовитьТаблицуПоставщиков());
	
	ТаблицаУслугВыгружатьНачисления = ?(СтруктураНастроек.Свойство("ТаблицаУслугВыгружатьНачисления"),
											СтруктураНастроек.ТаблицаУслугВыгружатьНачисления,
											СтруктураНастроек.ТаблицаВидовУслуг);
	СписокВидовУслуг                = ТаблицаУслугВыгружатьНачисления.ВыгрузитьКолонку("ВидУслуги");
	
	ТаблицаПоставщиковОбщ           = СтруктураОбщихТаблиц.ТаблицаПоставщиковОбщ;
	ТаблицаПоставщиковПениОбщ       = ?(СтруктураОбщихТаблиц.Свойство("ТаблицаПениПоставщиковОбщ"),
											СтруктураОбщихТаблиц.ТаблицаПениПоставщиковОбщ,
											ТаблицаПоставщиковОбщ.СкопироватьКолонки());
	
	// Получаем только поставщиков услуг, по которым нужно выгружать начисления.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПоставщиковОбщ.Поставщик) = ТИП(Справочник.Контрагенты)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаПоставщиковОбщ.Поставщик КАК Справочник.Контрагенты)
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПоставщиковОбщ.Поставщик) = ТИП(Справочник.Организации)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаПоставщиковОбщ.Поставщик КАК Справочник.Организации)
	|	КОНЕЦ КАК Поставщик,
	|	ТаблицаПоставщиковОбщ.НаименованиеПоставщика КАК НаименованиеПоставщика,
	|	ТаблицаПоставщиковОбщ.ВидУслуги КАК ВидУслуги,
	|	ТаблицаПоставщиковОбщ.ЭтоСведенияПоКапРемонту КАК ЭтоСведенияПоКапРемонту,
	|	ТаблицаПоставщиковОбщ.ЭтоСведенияТекущейОрганизации КАК ЭтоСведенияТекущейОрганизации,
	|	ТаблицаПоставщиковОбщ.Код КАК Код,
	|	ТаблицаПоставщиковОбщ.ИНН КАК ИНН,
	|	ТаблицаПоставщиковОбщ.КПП КАК КПП,
	|	ТаблицаПоставщиковОбщ.Адрес КАК Адрес,
	|	ТаблицаПоставщиковОбщ.Телефон КАК Телефон
	|ПОМЕСТИТЬ втТаблицаПоставщиковОбщ
	|ИЗ
	|	&ТаблицаПоставщиковОбщ КАК ТаблицаПоставщиковОбщ
	|ГДЕ
	|	ТаблицаПоставщиковОбщ.ВидУслуги В(&СписокВидовУслуг)
	|	И НЕ ТаблицаПоставщиковОбщ.ЭтоСведенияПоКапРемонту
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПоставщиковПениОбщ.Поставщик) = ТИП(Справочник.Контрагенты)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаПоставщиковПениОбщ.Поставщик КАК Справочник.Контрагенты)
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПоставщиковПениОбщ.Поставщик) = ТИП(Справочник.Организации)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаПоставщиковПениОбщ.Поставщик КАК Справочник.Организации)
	|	КОНЕЦ КАК Поставщик,
	|	ТаблицаПоставщиковПениОбщ.НаименованиеПоставщика КАК НаименованиеПоставщика,
	|	ТаблицаПоставщиковПениОбщ.ВидУслуги КАК ВидУслуги,
	|	ТаблицаПоставщиковПениОбщ.ЭтоСведенияПоКапРемонту КАК ЭтоСведенияПоКапРемонту,
	|	ТаблицаПоставщиковПениОбщ.ЭтоСведенияТекущейОрганизации КАК ЭтоСведенияТекущейОрганизации,
	|	ТаблицаПоставщиковПениОбщ.Код КАК Код,
	|	ТаблицаПоставщиковПениОбщ.ИНН КАК ИНН,
	|	ТаблицаПоставщиковПениОбщ.КПП КАК КПП,
	|	ТаблицаПоставщиковПениОбщ.Адрес КАК Адрес,
	|	ТаблицаПоставщиковПениОбщ.Телефон КАК Телефон
	|ПОМЕСТИТЬ втТаблицаПоставщиковПениОбщ
	|ИЗ
	|	&ТаблицаПоставщиковПениОбщ КАК ТаблицаПоставщиковПениОбщ
	|ГДЕ
	|	ТаблицаПоставщиковПениОбщ.ВидУслуги В(&СписокВидовУслуг)
	|	И НЕ ТаблицаПоставщиковПениОбщ.ЭтоСведенияПоКапРемонту
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаПоставщиковОбщ.Поставщик КАК Поставщик,
	|	втТаблицаПоставщиковОбщ.НаименованиеПоставщика КАК НаименованиеПоставщика,
	|	втТаблицаПоставщиковОбщ.ВидУслуги КАК ВидУслуги,
	|	втТаблицаПоставщиковОбщ.ЭтоСведенияПоКапРемонту КАК ЭтоСведенияПоКапРемонту,
	|	втТаблицаПоставщиковОбщ.ЭтоСведенияТекущейОрганизации КАК ЭтоСведенияТекущейОрганизации,
	|	втТаблицаПоставщиковОбщ.Код КАК Код,
	|	втТаблицаПоставщиковОбщ.ИНН КАК ИНН,
	|	втТаблицаПоставщиковОбщ.КПП КАК КПП,
	|	втТаблицаПоставщиковОбщ.Адрес КАК Адрес,
	|	втТаблицаПоставщиковОбщ.Телефон КАК Телефон,
	|	ЕСТЬNULL(втТаблицаПоставщиковОбщ.Поставщик.ОсновнойБанковскийСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)) КАК РасчетныйСчетСсылка,
	|	ЕСТЬNULL(втТаблицаПоставщиковОбщ.Поставщик.ОсновнойБанковскийСчет.НомерСчета, ВЫРАЗИТЬ("""" КАК СТРОКА(100))) КАК РасчетныйСчет,
	|	ЕСТЬNULL(втТаблицаПоставщиковОбщ.Поставщик.ОсновнойБанковскийСчет.Банк.Наименование, ВЫРАЗИТЬ("""" КАК СТРОКА(100))) КАК Банк,
	|	ЕСТЬNULL(втТаблицаПоставщиковОбщ.Поставщик.ОсновнойБанковскийСчет.Банк.Код, ВЫРАЗИТЬ("""" КАК СТРОКА(100))) КАК БИК,
	|	ЕСТЬNULL(втТаблицаПоставщиковОбщ.Поставщик.ОсновнойБанковскийСчет.Банк.КоррСчет, ВЫРАЗИТЬ("""" КАК СТРОКА(100))) КАК КоррСчет
	|ПОМЕСТИТЬ втПоставщикиУслуг
	|ИЗ
	|	втТаблицаПоставщиковОбщ КАК втТаблицаПоставщиковОбщ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втТаблицаПоставщиковПениОбщ.Поставщик,
	|	втТаблицаПоставщиковПениОбщ.НаименованиеПоставщика,
	|	втТаблицаПоставщиковПениОбщ.ВидУслуги,
	|	втТаблицаПоставщиковПениОбщ.ЭтоСведенияПоКапРемонту,
	|	втТаблицаПоставщиковПениОбщ.ЭтоСведенияТекущейОрганизации,
	|	втТаблицаПоставщиковПениОбщ.Код,
	|	втТаблицаПоставщиковПениОбщ.ИНН,
	|	втТаблицаПоставщиковПениОбщ.КПП,
	|	втТаблицаПоставщиковПениОбщ.Адрес,
	|	втТаблицаПоставщиковПениОбщ.Телефон,
	|	ЕСТЬNULL(втТаблицаПоставщиковПениОбщ.Поставщик.ОсновнойБанковскийСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)),
	|	ЕСТЬNULL(втТаблицаПоставщиковПениОбщ.Поставщик.ОсновнойБанковскийСчет.НомерСчета, ВЫРАЗИТЬ("""" КАК СТРОКА(100))),
	|	ЕСТЬNULL(втТаблицаПоставщиковПениОбщ.Поставщик.ОсновнойБанковскийСчет.Банк, ВЫРАЗИТЬ("""" КАК СТРОКА(100))),
	|	ЕСТЬNULL(втТаблицаПоставщиковПениОбщ.Поставщик.ОсновнойБанковскийСчет.Банк.Код, ВЫРАЗИТЬ("""" КАК СТРОКА(100))),
	|	ЕСТЬNULL(втТаблицаПоставщиковПениОбщ.Поставщик.ОсновнойБанковскийСчет.Банк.КоррСчет, ВЫРАЗИТЬ("""" КАК СТРОКА(100)))
	|ИЗ
	|	втТаблицаПоставщиковПениОбщ КАК втТаблицаПоставщиковПениОбщ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втПоставщикиУслуг.Поставщик КАК Поставщик,
	|	втПоставщикиУслуг.НаименованиеПоставщика КАК НаименованиеПоставщика,
	|	втПоставщикиУслуг.Код КАК Код,
	|	втПоставщикиУслуг.ИНН КАК ИНН,
	|	втПоставщикиУслуг.КПП КАК КПП,
	|	втПоставщикиУслуг.РасчетныйСчет КАК РасчетныйСчет,
	|	втПоставщикиУслуг.КоррСчет КАК КоррСчет,
	|	втПоставщикиУслуг.Банк КАК Банк,
	|	втПоставщикиУслуг.БИК КАК БИК,
	|	втПоставщикиУслуг.Адрес КАК Адрес,
	|	втПоставщикиУслуг.Телефон КАК Телефон,
	|	"""" КАК executor
	|ИЗ
	|	втПоставщикиУслуг КАК втПоставщикиУслуг
	|ГДЕ
	|	НЕ втПоставщикиУслуг.ЭтоСведенияТекущейОрганизации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втПоставщикиУслуг.Поставщик,
	|	втПоставщикиУслуг.НаименованиеПоставщика,
	|	втПоставщикиУслуг.Код,
	|	втПоставщикиУслуг.ИНН,
	|	втПоставщикиУслуг.КПП,
	|	втПоставщикиУслуг.РасчетныйСчет,
	|	втПоставщикиУслуг.КоррСчет,
	|	втПоставщикиУслуг.Банк,
	|	втПоставщикиУслуг.БИК,
	|	втПоставщикиУслуг.Адрес,
	|	втПоставщикиУслуг.Телефон,
	|	ВЫБОР
	|		КОГДА втПоставщикиУслуг.Поставщик = &Организация
	|			ТОГДА ""1""
	|		ИНАЧЕ ""2""
	|	КОНЕЦ
	|ИЗ
	|	втПоставщикиУслуг КАК втПоставщикиУслуг
	|ГДЕ
	|	втПоставщикиУслуг.ЭтоСведенияТекущейОрганизации";
	
	Запрос.УстановитьПараметр("ТаблицаПоставщиковОбщ",     ТаблицаПоставщиковОбщ);
	Запрос.УстановитьПараметр("ТаблицаПоставщиковПениОбщ", ТаблицаПоставщиковПениОбщ);
	Запрос.УстановитьПараметр("СписокВидовУслуг",          СписокВидовУслуг);
	Запрос.УстановитьПараметр("Организация",               СтруктураНастроек.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Поставщики, указанные документом "Управление договорами с поставщиками услуг".
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтруктураВыгрузки.contractors.Добавить();
		НоваяСтрока.id       = Выборка.Код;
		НоваяСтрока.name     = Выборка.НаименованиеПоставщика;
		НоваяСтрока.inn      = Выборка.ИНН;
		НоваяСтрока.kpp      = Выборка.КПП;
		НоваяСтрока.bank     = XMLСтрока(СокрЛП(Выборка.Банк));
		НоваяСтрока.rs       = XMLСтрока(Выборка.РасчетныйСчет);
		НоваяСтрока.ks       = Выборка.КоррСчет;
		НоваяСтрока.bik      = Выборка.БИК;
		НоваяСтрока.address  = Выборка.Адрес;
		НоваяСтрока.phone    = Выборка.Телефон;
		НоваяСтрока.executor = ?(ПустаяСтрока(Выборка.executor), Неопределено, Выборка.executor);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет сведения о зданиях в структуре выгрузки.
//
Процедура ЗаполнитьСведенияОЗданияхДляФайла(СтруктураВыгрузки, СтруктураПлательщиков, СтруктураОбщихТаблиц, СтруктураНастроек) Экспорт
	
	ТаблицаЗданий                = СтруктураПлательщиков.ТаблицаСведений;
	ТаблицаРСЗданий              = СтруктураОбщихТаблиц.ТаблицаРСЗданий;
	ТаблицаДатНачалаОбслуживания = ПолучитьТаблицуСведенийОДатахНачалаОбслуживанияЗданий(СтруктураНастроек);
	
	СтруктураВыгрузки.Вставить("houses", Новый ТаблицаЗначений);
	СтруктураВыгрузки.houses.Колонки.Добавить("id");
	СтруктураВыгрузки.houses.Колонки.Добавить("area");
	СтруктураВыгрузки.houses.Колонки.Добавить("flats_area");
	СтруктураВыгрузки.houses.Колонки.Добавить("common_area");
	СтруктураВыгрузки.houses.Колонки.Добавить("address");
	СтруктураВыгрузки.houses.Колонки.Добавить("fund");
	СтруктураВыгрузки.houses.Колонки.Добавить("overhaul_fund");
	СтруктураВыгрузки.houses.Колонки.Добавить("type");
	СтруктураВыгрузки.houses.Колонки.Добавить("year_of_built");
	СтруктураВыгрузки.houses.Колонки.Добавить("date_of_commissioning");
	СтруктураВыгрузки.houses.Колонки.Добавить("date_of_maintenance");
	СтруктураВыгрузки.houses.Колонки.Добавить("floors");
	СтруктураВыгрузки.houses.Колонки.Добавить("porches");
	СтруктураВыгрузки.houses.Колонки.Добавить("add_info");
	СтруктураВыгрузки.houses.Колонки.Добавить("contents");
	СтруктураВыгрузки.houses.Колонки.Добавить("meter");
	
	ТаблицаСчетчиков = ПодготовитьТаблицуСчетчиков();
	
	СтруктураОтбораПоЗданию = Новый Структура("Здание");
	
	Для Каждого СтрокаЗдания Из ТаблицаЗданий Цикл
		НоваяСтрока = СтруктураВыгрузки.houses.Добавить();
		НоваяСтрока.id = СтрокаЗдания.КодЗдания;
		
		Если СтруктураНастроек.ВыводитьРасчетнуюПлощадь Тогда
			СтрокаРасчетнаяПлощадьЗдания = СтруктураПлательщиков.ТаблицаРасчетныхПлощадейЗданий.Найти(СтрокаЗдания.Здание, "Здание");
			НоваяСтрока.area = ?(СтрокаРасчетнаяПлощадьЗдания = Неопределено, 0, СтрокаРасчетнаяПлощадьЗдания.Площадь);
		Иначе
			НоваяСтрока.area = XMLСтрока(СтрокаЗдания.ОбщаяПлощадь);
		КонецЕсли;
		
		НоваяСтрока.flats_area            = XMLСтрока(СтрокаЗдания.ОбщаяПлощадьПомещений);
		НоваяСтрока.common_area           = XMLСтрока(СтрокаЗдания.ПлощадьОбщегоИмущества);
		НоваяСтрока.type                  = СформироватьТипЗданияДляВыгрузкиНаСайт(СтрокаЗдания);
		НоваяСтрока.year_of_built         = XMLСтрока(СтрокаЗдания.ГодПостройки);
		НоваяСтрока.date_of_commissioning = ?(ЗначениеЗаполнено(СтрокаЗдания.ДатаВводаВЭксплуатацию), СтрокаЗдания.ДатаВводаВЭксплуатацию, Неопределено);
		НоваяСтрока.floors                = XMLСтрока(СтрокаЗдания.Этажей);
		НоваяСтрока.porches               = XMLСтрока(СтрокаЗдания.Подъездов);
		
		СведенияОНачалеОбслуживания = ТаблицаДатНачалаОбслуживания.Найти(СтрокаЗдания.Здание, "Здание");
		
		Если НЕ СведенияОНачалеОбслуживания = Неопределено Тогда
			НоваяСтрока.date_of_maintenance = СведенияОНачалеОбслуживания.ДатаНачалаОбслуживания;
		КонецЕсли;
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("region",       СокрЛП(СтрокаЗдания.Регион));
		СтруктураАдреса.Вставить("district",     СокрЛП(СтрокаЗдания.Район));
		СтруктураАдреса.Вставить("city",         СокрЛП(СтрокаЗдания.Город));
		СтруктураАдреса.Вставить("settlement",   СокрЛП(СтрокаЗдания.НаселенныйПункт));
		СтруктураАдреса.Вставить("street",       СокрЛП(СтрокаЗдания.Улица));
		СтруктураАдреса.Вставить("index",        СокрЛП(СтрокаЗдания.Индекс));
		СтруктураАдреса.Вставить("house",        XMLСтрока(СокрЛП(СтрокаЗдания.Дом)) + ?(СтрокаЗдания.Корпус = "", "", "/" + СокрЛП(СтрокаЗдания.Корпус)));
		СтруктураАдреса.Вставить("address_view", СокрЛП(СтрокаЗдания.НаименованиеЗдания));
		
		ПолноеПредставлениеАдреса = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.СформироватьПолныйАдресЗданияДляВыгрузки(СтруктураАдреса.region,
																														   СтруктураАдреса.district,
																														   СтруктураАдреса.city,
																														   СтруктураАдреса.settlement,
																														   СтруктураАдреса.street,
																														   СтрокаЗдания.Дом,
																														   СтрокаЗдания.Корпус);
		
		СтруктураАдреса.Вставить("address_view_full", ПолноеПредставлениеАдреса);
		
		НоваяСтрока.address = СтруктураАдреса;
		
		Если СтрокаЗдания.РасчетныйСчетКапРемонт = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
			НоваяСтрока.overhaul_fund = Неопределено;
		Иначе
			РасчетныйСчетКапРемонт        = СтрокаЗдания.РасчетныйСчетКапРемонт;
			БанкРасчетногоСчетаКапРемонта = РасчетныйСчетКапРемонт.Банк;
			КонтрагентСчетаКапРемонта     = РасчетныйСчетКапРемонт.Владелец;
			
			СтрокаТелефонаКонтрагентаКапРемонта = КонтрагентСчетаКапРемонта.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.Телефон, "Тип");
			СтрокаEmailКонтрагентаКапРемонта    = КонтрагентСчетаКапРемонта.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "Тип");
			
			СтруктураСчетаФондаКапРемонта = Новый Структура;
			СтруктураСчетаФондаКапРемонта.Вставить("name",  СокрЛП(КонтрагентСчетаКапРемонта.Наименование));
			СтруктураСчетаФондаКапРемонта.Вставить("inn",   СокрЛП(КонтрагентСчетаКапРемонта.ИНН));
			СтруктураСчетаФондаКапРемонта.Вставить("bank",  СокрЛП(БанкРасчетногоСчетаКапРемонта.Наименование));
			СтруктураСчетаФондаКапРемонта.Вставить("bik",   СокрЛП(БанкРасчетногоСчетаКапРемонта.Код));
			СтруктураСчетаФондаКапРемонта.Вставить("ks",    СокрЛП(БанкРасчетногоСчетаКапРемонта.КоррСчет));
			СтруктураСчетаФондаКапРемонта.Вставить("rs",    СокрЛП(РасчетныйСчетКапРемонт.НомерСчета));
			СтруктураСчетаФондаКапРемонта.Вставить("phone", ?(СтрокаТелефонаКонтрагентаКапРемонта = Неопределено, "", СокрЛП(СтрокаТелефонаКонтрагентаКапРемонта.Представление)));
			СтруктураСчетаФондаКапРемонта.Вставить("email", ?(СтрокаEmailКонтрагентаКапРемонта = Неопределено, "", СокрЛП(СтрокаEmailКонтрагентаКапРемонта.Представление)));
			
			НоваяСтрока.overhaul_fund = СтруктураСчетаФондаКапРемонта;
		КонецЕсли;
		
		СтрокаРСЗдания = ТаблицаРСЗданий.Найти(СтрокаЗдания.Здание, "Здание");
		
		Если СтрокаРСЗдания = Неопределено ИЛИ НЕ СтруктураНастроек.ИсполнительРасчетов.Пустая() Тогда
			
			НоваяСтрока.fund = Неопределено;
			
		Иначе
			
			СтруктураСчетаЗдания = Новый Структура;
			СтруктураСчетаЗдания.Вставить("bank", СокрЛП(СтрокаРСЗдания.Банк));
			СтруктураСчетаЗдания.Вставить("bik",  СокрЛП(СтрокаРСЗдания.БИК));
			СтруктураСчетаЗдания.Вставить("ks",   СокрЛП(СтрокаРСЗдания.КоррСчет));
			СтруктураСчетаЗдания.Вставить("rs",   СокрЛП(СтрокаРСЗдания.РасчетныйСчет));
			
			НоваяСтрока.fund = СтруктураСчетаЗдания;
			
		КонецЕсли;
		
		НоваяСтрока.contents = Новый ТаблицаЗначений;
		НоваяСтрока.contents.Колонки.Добавить("name");
		НоваяСтрока.contents.Колонки.Добавить("type");
		НоваяСтрока.contents.Колонки.Добавить("text");
		
		Если СтруктураНастроек.ВыгрузкаЭлектронныхПаспортов И НЕ СтруктураНастроек.СтруктураСДаннымиПоЭПД = Неопределено Тогда
			
			СтрокаЭПДЗдания = СтруктураНастроек.СтруктураСДаннымиПоЭПД.ТаблицаДомов.Найти(СтрокаЗдания.Здание, "СсылкаНаЗдание");
			
			Если НЕ СтрокаЭПДЗдания = Неопределено Тогда
				
				НоваяСтрока.add_info = Новый Структура("wear, series, living_rooms, nonliving_rooms, people, accounts, people_accounts, company_accounts");
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока.add_info, СтрокаЭПДЗдания);
				
				НоваяСтрока.contents = СтрокаЭПДЗдания.contents.Скопировать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураНастроек.ВыгрузкаДанныхПоЛС Тогда
			
			// Получаем выгружаемые подъезды зданий.
			СтруктураОтбораПоЗданию.Здание = СтрокаЗдания.Здание;
			
			ТаблицаПодъездовЗдания = СтруктураНастроек.ТаблицаОбъектов.Скопировать(СтруктураОтбораПоЗданию, "Подъезд");
			ТаблицаПодъездовЗдания.Свернуть("Подъезд");
			
			МассивОбъектовСоответствующихЗданиюДляПоискаОПУ = ТаблицаПодъездовЗдания.ВыгрузитьКолонку("Подъезд");
			
			// Формируем массив объектов, соответствующих текущему зданию. Т.е. массив со зданием и его подъездами.
			// С помощью данного массива будет выполняться поиск ОПУ, соответствующих зданию.
			МассивОбъектовСоответствующихЗданиюДляПоискаОПУ.Добавить(СтрокаЗдания.Здание);
			
			ТаблицаСчетчиков.Очистить();
			
			// Выполняем поиск ОПУ по зданию и его подъездам.
			Для каждого ТекОбъектОПУ из МассивОбъектовСоответствующихЗданиюДляПоискаОПУ Цикл
				
				СтрокиСчетчиковТекЗдания = СтруктураОбщихТаблиц.ТаблицаСчетчиковОбщ.НайтиСтроки(Новый Структура("ЛицевойСчет, ЯвляетсяОПУ", ТекОбъектОПУ, Истина));
				
				Для Каждого СтрокаТекСчетчика Из СтрокиСчетчиковТекЗдания Цикл
					
					Если НЕ СтруктураНастроек.Свойство("ТаблицаУслугВыгружатьПоказания")
					 ИЛИ НЕ СтруктураНастроек.ТаблицаУслугВыгружатьПоказания.Найти(СтрокаТекСчетчика.Услуга, "Услуга") = Неопределено Тогда
						
						НоваяСтрокаСчетчика = ТаблицаСчетчиков.Добавить();
						НоваяСтрокаСчетчика.id = СтрокаТекСчетчика.КодСчетчика;
						Если СтрокаТекСчетчика.Отключен Тогда
							НоваяСтрокаСчетчика.del = "1";
						Иначе
							НоваяСтрокаСчетчика.name              = СтрокаТекСчетчика.НаименованиеСчетчика;
							НоваяСтрокаСчетчика.service_name      = СтрокаТекСчетчика.НаименованиеВидаУслуги;
							НоваяСтрокаСчетчика.num               = СтрокаТекСчетчика.ЗаводскойНомер;
							НоваяСтрокаСчетчика.use_consumption   = XMLСтрока(СтрокаТекСчетчика.ИспользуетсяВводРасходаЗаПериодРасчета);
							НоваяСтрокаСчетчика.values            = СтрокаТекСчетчика.Тарифность;
							НоваяСтрокаСчетчика.capacity          = XMLСтрока(СтрокаТекСчетчика.Разрядность);
							НоваяСтрокаСчетчика.date              = ПолучитьДатуДляXML(СтрокаТекСчетчика.ПредыдущееПоказаниеПериод);
							НоваяСтрокаСчетчика.charge1           = XMLСтрока(СтрокаТекСчетчика.РасходДн);
							НоваяСтрокаСчетчика.charge2           = XMLСтрока(СтрокаТекСчетчика.РасходНч);
							НоваяСтрокаСчетчика.charge3           = XMLСтрока(СтрокаТекСчетчика.РасходПк);
							НоваяСтрокаСчетчика.val1              = XMLСтрока(СтрокаТекСчетчика.ПредыдущееПоказаниеДн);
							НоваяСтрокаСчетчика.val2              = XMLСтрока(СтрокаТекСчетчика.ПредыдущееПоказаниеНч);
							НоваяСтрокаСчетчика.val3              = XMLСтрока(СтрокаТекСчетчика.ПредыдущееПоказаниеПк);
							НоваяСтрокаСчетчика.verification_date = ПолучитьДатуДляXML(СтрокаТекСчетчика.ДатаПоверки);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрока.meter = ТаблицаСчетчиков.Скопировать();
	КонецЦикла;
	
КонецПроцедуры

// Дополняет таблицу зданий сведениями о датах начала их обслуживания.
//
Функция ПолучитьТаблицуСведенийОДатахНачалаОбслуживанияЗданий(СтруктураНастроек)
	
	// Порядок выполнения запроса:
	// 1. Выполняем поиск зданий, которые в настоящее время обслуживает организация.
	// 2. Выполняем поиск последних записей, предшествующих началу обслуживания зданий организацией.
	// 3. Для каждого здания, обслуживаемого в настоящее время, определяем периоды, предшествующие началу обслуживания.
	// 4. Находим даты начала обслуживания, как первые даты, следующие после периодов из п.3.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.Период КАК Период,
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.Здание КАК Здание,
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.Организация КАК Организация,
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.НаходитсяНаОбслуживании КАК НаходитсяНаОбслуживании
	|ПОМЕСТИТЬ втТекущиеОбслуживающиеОрганизации
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.СрезПоследних(, Здание В (&СписокЗданий)) КАК УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.Организация = &Организация
	|	И УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.НаходитсяНаОбслуживании
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.Период КАК Период,
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.Здание КАК Здание,
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.НаходитсяНаОбслуживании КАК НаходитсяНаОбслуживании,
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.Организация КАК Организация
	|ПОМЕСТИТЬ втСведенияДоНачалаОбслуживания
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.СрезПоследних(
	|			,
	|			Здание В
	|					(ВЫБРАТЬ
	|						втТекущиеОбслуживающиеОрганизации.Здание
	|					ИЗ
	|						втТекущиеОбслуживающиеОрганизации КАК втТекущиеОбслуживающиеОрганизации)
	|				И (НЕ Организация = &Организация
	|					ИЛИ Организация = &Организация
	|						И НЕ НаходитсяНаОбслуживании)) КАК УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТекущиеОбслуживающиеОрганизации.Здание КАК Здание,
	|	втТекущиеОбслуживающиеОрганизации.Организация КАК Организация,
	|	ЕСТЬNULL(втСведенияДоНачалаОбслуживания.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период
	|ПОМЕСТИТЬ втПериодыПередНачаломОбслуживания
	|ИЗ
	|	втТекущиеОбслуживающиеОрганизации КАК втТекущиеОбслуживающиеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияДоНачалаОбслуживания КАК втСведенияДоНачалаОбслуживания
	|		ПО втТекущиеОбслуживающиеОрганизации.Здание = втСведенияДоНачалаОбслуживания.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПериодыПередНачаломОбслуживания.Здание КАК Здание,
	|	МИНИМУМ(УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Период) КАК ДатаНачалаОбслуживания
	|ИЗ
	|	втПериодыПередНачаломОбслуживания КАК втПериодыПередНачаломОбслуживания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях КАК УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях
	|		ПО втПериодыПередНачаломОбслуживания.Здание = УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Здание
	|			И втПериодыПередНачаломОбслуживания.Организация = УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Организация
	|			И втПериодыПередНачаломОбслуживания.Период < УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Период
	|ГДЕ
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.НаходитсяНаОбслуживании
	|
	|СГРУППИРОВАТЬ ПО
	|	втПериодыПередНачаломОбслуживания.Здание";
	
	Запрос.УстановитьПараметр("Организация",  СтруктураНастроек.Организация);
	Запрос.УстановитьПараметр("СписокЗданий", СтруктураНастроек.СписокЗданий);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует тип здания для выгрузки на сайт.
//
Функция СформироватьТипЗданияДляВыгрузкиНаСайт(СтрокаЗдания)
	
	ТипСооружения = "";
	
	Если СтрокаЗдания.ТипСооружения = Перечисления.УПЖКХ_ТипСооружения.Здание Тогда
		
		Если СтрокаЗдания.Многоквартирное Тогда
			ТипСооружения = "МКД";
		Иначе
			ТипСооружения = "ЖД";
		КонецЕсли;
		
	Иначе
		
		ТипСооружения = Строка(СтрокаЗдания.ТипСооружения);
		
	КонецЕсли;
	
	Возврат ТипСооружения;
	
КонецФункции

// Подготавливает пустую таблицу поставщиков.
//
Функция ПодготовитьТаблицуПоставщиков()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("id");
	Таблица.Колонки.Добавить("name");
	Таблица.Колонки.Добавить("executor");
	Таблица.Колонки.Добавить("address");
	Таблица.Колонки.Добавить("phone");
	Таблица.Колонки.Добавить("inn");
	Таблица.Колонки.Добавить("kpp");
	Таблица.Колонки.Добавить("bank");
	Таблица.Колонки.Добавить("rs");
	Таблица.Колонки.Добавить("ks");
	Таблица.Колонки.Добавить("bik");
	
	Возврат Таблица;
	
КонецФункции

// Подготавливает пустую таблицу счетчиков.
//
Функция ПодготовитьТаблицуСчетчиков()
	
	ТаблицаСчетчиков = Новый ТаблицаЗначений;
	ТаблицаСчетчиков.Колонки.Добавить("id");
	ТаблицаСчетчиков.Колонки.Добавить("del");
	ТаблицаСчетчиков.Колонки.Добавить("name");
	ТаблицаСчетчиков.Колонки.Добавить("service_name");
	ТаблицаСчетчиков.Колонки.Добавить("num");
	ТаблицаСчетчиков.Колонки.Добавить("use_consumption");
	ТаблицаСчетчиков.Колонки.Добавить("values");
	ТаблицаСчетчиков.Колонки.Добавить("capacity");
	ТаблицаСчетчиков.Колонки.Добавить("verification_date");
	ТаблицаСчетчиков.Колонки.Добавить("date");
	ТаблицаСчетчиков.Колонки.Добавить("charge1");
	ТаблицаСчетчиков.Колонки.Добавить("charge2");
	ТаблицаСчетчиков.Колонки.Добавить("charge3");
	ТаблицаСчетчиков.Колонки.Добавить("val1");
	ТаблицаСчетчиков.Колонки.Добавить("val2");
	ТаблицаСчетчиков.Колонки.Добавить("val3");
	
	Возврат ТаблицаСчетчиков;
	
КонецФункции

// Заполняет данные по текущей квитанции.
//
Процедура ЗаполнитьДанныеПоТекущейКвитанции(ТаблицаНачисления, ТаблицаРассрочки, ТаблицаПерерасчетов, ТаблицаПоставщиков, ТаблицаДобровольногоСтрахования, ТаблицаУслугБезНачислений,
											НоваяСтрока, СтруктураОбщихТаблиц, СтруктураНастроек, ОбщиеДанные, КвитанцияНаКР = Ложь)
	
	Если НЕ ОбщиеДанные.Свойство("КвитанцияНаКР") Тогда
		ОбщиеДанные.Вставить("КвитанцияНаКР");
	КонецЕсли;
	
	ОбщиеДанные.КвитанцияНаКР = КвитанцияНаКР;
	
	Если ОбщиеДанные.Свойство("КвитанцияПоПени") И ОбщиеДанные.КвитанцияПоПени = Истина Тогда
		ОбщиеДанные.КвитанцияПоПени = Ложь;
	Иначе
		ОбщиеДанные.Вставить("КвитанцияПоПени", Ложь);
	КонецЕсли;
	
	ТекущиеДанные = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруДанныхПоТекущемуОбъекту(СтруктураОбщихТаблиц, ОбщиеДанные, СтруктураНастроек);
	
	ОбщиеДанные.Вставить("ТаблицаИПУ", ТекущиеДанные.ТаблицаИндСчетчиков);
	
	Если СтруктураНастроек.УчитыватьПени И НЕ СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
		
		Если ТекущиеДанные.ТаблицаНачисления.Колонки.Найти("Пени") = Неопределено Тогда
			ТекущиеДанные.ТаблицаНачисления.Колонки.Добавить("Пени", Новый ОписаниеТипов("Число"));
		КонецЕсли;
		
		СтруктураОтбора                     = Новый Структура("ЛицевойСчет, Услуга, ВидУслуги");
		СтруктураОтбораДляСвертываемыхУслуг = Новый Структура("ЛицевойСчет, ВидУслуги");
		
		Для каждого ТекСтрока из ТекущиеДанные.ТаблицаНачисления Цикл
			
			Если НЕ ТекСтрока.ВидУслуги = Неопределено Тогда
				
				Если ТекСтрока.СпособВыводаВКвитанциях = "" ИЛИ ТекСтрока.СпособВыводаВКвитанциях = "Не сворачивать" Тогда
					
					СтруктураОтбора.ЛицевойСчет = ОбщиеДанные.ЛицевойСчет;
					СтруктураОтбора.Услуга      = ТекСтрока.Услуга;
					СтруктураОтбора.ВидУслуги   = ТекСтрока.ВидУслуги;
					
					СтрокиПени = СтруктураОбщихТаблиц.ТаблицаПениОбщПоВидамУслуг.НайтиСтроки(СтруктураОтбора);
					
					Если СтрокиПени.Количество() = 0 Тогда
						ТекСтрока.Пени = 0;
					Иначе
						ТекСтрока.Пени = СтрокиПени[0].СуммаПени;
					КонецЕсли;
					
				Иначе
					
					СтруктураОтбораДляСвертываемыхУслуг.ЛицевойСчет = ОбщиеДанные.ЛицевойСчет;
					СтруктураОтбораДляСвертываемыхУслуг.ВидУслуги   = ТекСтрока.ВидУслуги;
					
					СтрокиПени = СтруктураОбщихТаблиц.ТаблицаПениОбщПоВидамУслуг.НайтиСтроки(СтруктураОтбораДляСвертываемыхУслуг);
					
					СуммаПеней = 0;
					
					Для каждого ТекСтрокаПени из СтрокиПени Цикл
						СуммаПеней = СуммаПеней + ТекСтрокаПени.СуммаПени;
					КонецЦикла;
					
					ТекСтрока.Пени = СуммаПеней;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Дополняем данными об услугах без начислений за период.
	ДополнитьТекущиеДанныеПоУслугамБезНачислений(ТекущиеДанные, СтруктураОбщихТаблиц, ОбщиеДанные);
	
	// Отбираем таблицу услуг без начислений.
	ДанныеОПоставщиках = ТекущиеДанные.ТаблицаПоставщиков;
	
	// Записываем в структуру суммовые показатели по текущему объекту отчета.
	УПЖКХ_ПечатьКвитанцийСервер.ПолучитьИтоговыеПоказателиПоТекущемуОбъекту(ОбщиеДанные, ТекущиеДанные, СтруктураНастроек);
	
	СтруктураОбщихДанных = Новый Структура;
	
	СтруктураОбщихДанных.Вставить("ipd",                XMLСтрока(?(КвитанцияНаКР, ОбщиеДанные.ИдентификаторПДКапРемонт, ?(СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт", ОбщиеДанные.ИдентификаторПДЕдиный, ОбщиеДанные.ИдентификаторПДОсн))));
	СтруктураОбщихДанных.Вставить("debt_beg",           XMLСтрока(ОбщиеДанные.НачальноеСальдо));
	СтруктураОбщихДанных.Вставить("debt_end",           XMLСтрока(ОбщиеДанные.КонечноеСальдо));
	СтруктураОбщихДанных.Вставить("debt_prev",          XMLСтрока(ОбщиеДанные.Задолженность));
	СтруктураОбщихДанных.Вставить("prepayment",         XMLСтрока(ОбщиеДанные.Аванс));
	СтруктураОбщихДанных.Вставить("peni",               XMLСтрока(?(СтруктураНастроек.УчитыватьПени И НЕ СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням, ТекущиеДанные.СуммаПени, 0)));
	СтруктураОбщихДанных.Вставить("sum_payed",          XMLСтрока(ОбщиеДанные.ВнесеноОплат));
	СтруктураОбщихДанных.Вставить("credit_payed",       XMLСтрока(ОбщиеДанные.ВнесеноОплатНаПогашениеРассрочки));
	СтруктураОбщихДанных.Вставить("last_payment_date",  ПолучитьДатуДляXML(ОбщиеДанные.ДатаОплатыДляXML));
	СтруктураОбщихДанных.Вставить("sum_to_pay",         XMLСтрока(Число(ОбщиеДанные.ВсегоКОплате)));
	СтруктураОбщихДанных.Вставить("СуммаКОплатеЧислом", Число(ОбщиеДанные.ВсегоКОплате));
	СтруктураОбщихДанных.Вставить("СуммаОплатЧислом",   Число(ОбщиеДанные.ВнесеноОплат));
	
	Если Не КвитанцияНаКР И СтруктураНастроек.ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		Если Не ОбщиеДанные.ВнесеноНаДобровольноеСтрахование = 0 Тогда
			СтруктураОбщихДанных.Вставить("sum_payed_insurance", XMLСтрока(ОбщиеДанные.ВнесеноНаДобровольноеСтрахование));
		КонецЕсли;
		Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
			СтруктураОбщихДанных.Вставить("sum_to_pay_with_insurance", XMLСтрока(Число(ОбщиеДанные.ВсегоКОплатеСДобровольнымСтрахованием)));
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДанныеОНачислениях(ТаблицаНачисления, ТекущиеДанные, СтруктураНастроек, ОбщиеДанные, ДанныеОПоставщиках);
	ЗаполнитьДанныеОПоставщиках(ТаблицаПоставщиков, ДанныеОПоставщиках, СтруктураНастроек, ОбщиеДанные);
	ЗаполнитьДанныеОРассрочке(ТаблицаРассрочки, ТекущиеДанные, ОбщиеДанные.ОрганизацияОбъект);
	ЗаполнитьДанныеОПерерасчетах(ТаблицаПерерасчетов, ТекущиеДанные, ОбщиеДанные.ОрганизацияОбъект);
	ПодготовитьДанныеОДобровольномСтраховании(ТаблицаДобровольногоСтрахования, ТекущиеДанные, СтруктураНастроек, ОбщиеДанные.ВнесеноНаДобровольноеСтрахование);
	ПодготовитьДанныеОбУслугахБезНачислений(ТаблицаУслугБезНачислений, ТекущиеДанные, СтруктураНастроек);
	
	Если КвитанцияНаКР Тогда
		НоваяСтрока.overhaul_com        = СтруктураОбщихДанных;
		НоваяСтрока.overhaul            = ТаблицаНачисления.Скопировать();
		НоваяСтрока.overhaul_debt       = ТаблицаУслугБезНачислений.Скопировать();
		НоваяСтрока.overhaul_barcode    = ПолучитьОсновныеШтрихкодыКвитанции(СтруктураНастроек, ОбщиеДанные, КвитанцияНаКР);
		НоваяСтрока.overhaul_credit     = ТаблицаРассрочки.Скопировать();
		НоваяСтрока.overhaul_correction = ТаблицаПерерасчетов.Скопировать();
		НоваяСтрока.overhaul_contractor = ТаблицаПоставщиков.Скопировать();
	Иначе
		НоваяСтрока.main_com                    = СтруктураОбщихДанных;
		НоваяСтрока.main                        = ТаблицаНачисления.Скопировать();
		НоваяСтрока.main_debt                   = ТаблицаУслугБезНачислений.Скопировать();
		НоваяСтрока.main_insurance              = ТаблицаДобровольногоСтрахования.Скопировать();
		НоваяСтрока.main_barcode                = ПолучитьОсновныеШтрихкодыКвитанции(СтруктураНастроек, ОбщиеДанные, КвитанцияНаКР);
		НоваяСтрока.main_barcode_with_insurance = ПолучитьСтруктуруШтрихкода(СтруктураНастроек, ОбщиеДанные, КвитанцияНаКР, Истина);
		НоваяСтрока.main_credit                 = ТаблицаРассрочки.Скопировать();
		НоваяСтрока.main_correction             = ТаблицаПерерасчетов.Скопировать();
		НоваяСтрока.main_contractor             = ТаблицаПоставщиков.Скопировать();
	КонецЕсли;
	
	Если СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
		// (ПЕНИ).
		ЗаполнитьДанныеОНачисленияхПоПеням(НоваяСтрока, ТаблицаНачисления, ТаблицаПерерасчетов, ТаблицаПоставщиков, ТаблицаУслугБезНачислений, ТекущиеДанные,
										   СтруктураНастроек, ОбщиеДанные, СтруктураОбщихТаблиц, КвитанцияНаКР);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные о начислениях.
//
Процедура ЗаполнитьДанныеОНачислениях(ТаблицаНачисления, ТекущиеДанные, СтруктураНастроек, ОбщиеДанные, ДанныеОПоставщиках, КвитанцияПоПеням = Ложь)
	
	ЛицевойСчет     = ОбщиеДанные.ЛицевойСчет;
	Помещение       = ОбщиеДанные.Помещение;
	КодПоставщикаУО = "";
	
	СтрокаПоставщикаУО = ДанныеОПоставщиках.Найти(Истина, "ЭтоСведенияТекущейОрганизации");
	
	Если НЕ СтрокаПоставщикаУО = Неопределено Тогда
		КодПоставщикаУО = СтрокаПоставщикаУО.Код;
	КонецЕсли;
	
	ТаблицаНачисления.Очистить();
	
	СтруктураОтбораСворачиваемыхУслуг = Новый Структура("ВидУслуги");
	
	Для Каждого СтрокаНачисления Из ТекущиеДанные.ТаблицаНачисления Цикл
		Если ТекущиеДанные.ТаблицаНачисления.Индекс(СтрокаНачисления) = 0 Тогда
			Продолжить
		КонецЕсли;
		
		ТекВидУслуги = СтрокаНачисления.ВидУслуги;
		
		Если ТекВидУслуги.СпособВыводаВКвитанциях = "Тариф сворачивать, количество суммировать"
		 ИЛИ ТекВидУслуги.СпособВыводаВКвитанциях = "Количество сворачивать, тариф суммировать" Тогда
			
			СтруктураОтбораСворачиваемыхУслуг.ВидУслуги = ТекВидУслуги;
			СтрокиСворачиваемыхВидовУслугБезНачислений  = ТекущиеДанные.ТаблицаУслугБезНачислений.НайтиСтроки(СтруктураОтбораСворачиваемыхУслуг);
			
			Для каждого ТекСтрокаБезНачислений из СтрокиСворачиваемыхВидовУслугБезНачислений Цикл
				
				СтрокаНачисления.МассивУслуг.Добавить(ТекСтрокаБезНачислений.Услуга);
				ТекущиеДанные.ТаблицаУслугБезНачислений.Удалить(ТекСтрокаБезНачислений);
				
			КонецЦикла;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНачисления.Добавить();
		
		НоваяСтрока.Порядок   = СтрокаНачисления.Порядок;
		НоваяСтрока.ВидУслуги = СтрокаНачисления.ВидУслуги;
		НоваяСтрока.name      = СтрЗаменить(СтрокаНачисления.ВидДляВывода, ">", "-");
		НоваяСтрока.units     = ?(ЗначениеЗаполнено(СтрокаНачисления.ЕдИзм), СтрокаНачисления.ЕдИзмНаименование, "X");
		НоваяСтрока.group     = ?(СтруктураНастроек.РазделятьУслугиПоТипам, ОпределитьГруппуУслуги(СтрокаНачисления, СтруктураНастроек), "");
		НоваяСтрока.csum      = XMLСтрока(СтрокаНачисления.Начислено + СтрокаНачисления.СуммаПовышения);
		НоваяСтрока.bill_only = ?(ПроверитьЯвляетсяЛиСтрокаНачисленийСтрокойСОИ(СтрокаНачисления, ТекущиеДанные, КвитанцияПоПеням), "1", "");
		НоваяСтрока.СуммаНачисленийЧислом = СтрокаНачисления.Начислено + СтрокаНачисления.СуммаПовышения;
		
		ЗаполнитьСведенияОНачальномИКонечномСальдо(НоваяСтрока, СтрокаНачисления, ТекущиеДанные, КвитанцияПоПеням);
		ЗаполнитьСведенияОбОплатах(НоваяСтрока, СтрокаНачисления, ТекущиеДанные, КвитанцияПоПеням);
		
		Если КвитанцияПоПеням Тогда
			НоваяСтрока.csum_to_pay = XMLСтрока(СтрокаНачисления.Начислено + СтрокаНачисления.Перерасчет - СтрокаНачисления.Льгота);
			НоваяСтрока.correction  = XMLСтрока(СтрокаНачисления.Перерасчет);
			НоваяСтрока.СуммаПерерасчетовЧислом = СтрокаНачисления.Перерасчет;
		Иначе
			
			НоваяСтрока.component   = ?(СтрокаНачисления.СтрокаДетализацииТариф, "1", ?(СтрокаНачисления.СтрокаДетализацииСост, "2", ""));
			НоваяСтрока.csum_to_pay = ?(СтрокаНачисления.СтрокаДетализацииТариф ИЛИ СтрокаНачисления.СтрокаДетализацииСост, "X", XMLСтрока(СтрокаНачисления.Начислено + СтрокаНачисления.Перерасчет - СтрокаНачисления.Льгота + СтрокаНачисления.СуммаПовышения));
			
			Если СтруктураНастроек.УчитыватьПени И НЕ СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
				НоваяСтрока.peni = ?(СтрокаНачисления.СтрокаДетализацииТариф ИЛИ СтрокаНачисления.СтрокаДетализацииСост, "X", XMLСтрока(СтрокаНачисления.Пени));
			КонецЕсли;
			
			Если СтрокаНачисления.СтрокаДетализацииТариф Тогда
				НоваяСтрока.sum_to_pay  = "X";
				НоваяСтрока.hsum_to_pay = "X";
			Иначе
				НоваяСтрока.sum_to_pay = XMLСтрока(СтрокаНачисления.КОплатеИПУ);
			КонецЕсли;
			
			НоваяСтрока.sum      = XMLСтрока(СтрокаНачисления.НачисленоИПУ + СтрокаНачисления.СуммаПовышения);
			НоваяСтрока.amountn  = СтрокаНачисления.КодВидаНачисленийИПУ;
			НоваяСтрока.hamountn = СтрокаНачисления.КодВидаНачисленийОПУ;
			НоваяСтрока.norm     = XMLСтрока(СтрокаНачисления.РазмерНормы);
			НоваяСтрока.hnorm    = XMLСтрока(СтрокаНачисления.РазмерНормыОбщ);
			
			Если НЕ СтрокаНачисления.ПовышающийКоэффициент = 0 Тогда
				НоваяСтрока.raise_multiplier   = XMLСтрока(СтрокаНачисления.ПовышающийКоэффициент);
				НоваяСтрока.raise_sum          = XMLСтрока(СтрокаНачисления.СуммаПовышения);
				НоваяСтрока.sum_without_raise  = XMLСтрока(СтрокаНачисления.НачисленоИПУ);
				НоваяСтрока.csum_without_raise = XMLСтрока(СтрокаНачисления.Начислено);
			КонецЕсли;
			
			Если СтрокаНачисления.СтрокаДетализацииТариф Тогда
				НоваяСтрока.correction   = "X";
				НоваяСтрока.compensation = "X";
				НоваяСтрока.hsum_to_pay  = "X";
			Иначе
				НоваяСтрока.correction   = XMLСтрока(СтрокаНачисления.Перерасчет);
				НоваяСтрока.compensation = XMLСтрока(СтрокаНачисления.Льгота);
				НоваяСтрока.СуммаПерерасчетовЧислом = СтрокаНачисления.Перерасчет;
			КонецЕсли;
			
			Если НЕ СтрокаНачисления.УслугаПоСчетчикам И НЕ СтрокаНачисления.УслугаСоставнаяПоСчетчикам Тогда
				НоваяСтрока.hamount     = "X";
				НоваяСтрока.amount      = ?(СтруктураНастроек.ВыводитьИндРасходДляВсехУслуг, XMLСтрока(СтрокаНачисления.КоличествоИПУ), "X");
				НоваяСтрока.hsum        = "X";
				НоваяСтрока.sum         = "X";
				НоваяСтрока.hsum_to_pay = "X";
				НоваяСтрока.sum_to_pay  = "X";
				
				Если СтруктураНастроек.ВыводитьИндРасходДляВсехУслуг
				   И СтрокаНачисления.ИмеетсяСоставнойИндивидуальныйРасход Тогда
					НоваяСтрока.amount_view = ?(ПустаяСтрока(СтрокаНачисления.СоставноеКоличествоИнд), "X", XMLСтрока(СтрокаНачисления.СоставноеКоличествоИнд));
					НоваяСтрока.amount = ?(СтрокаНачисления.Тариф = 0 Или СтрокаНачисления.Тариф = Неопределено, "0", XMLСтрока(Окр(СтрокаНачисления.НачисленоИПУ/СтрокаНачисления.Тариф, 3, РежимОкругления.Окр15как20)));
				КонецЕсли;
				
			ИначеЕсли СтрокаНачисления.УслугаСоставнаяПоСчетчикам Тогда
				Если (СтрокаНачисления.ПерерасчетОДН = 0 И НЕ СтрокаНачисления.СтрокаДетализацииСост)
				 ИЛИ СтрокаНачисления.СтрокаДетализацииСост Тогда
					НоваяСтрока.hsum_to_pay = "X";
				Иначе
					НоваяСтрока.hsum_to_pay = XMLСтрока(СтрокаНачисления.КОплатеОПУ);
				КонецЕсли;
				Если (СтрокаНачисления.ПерерасчетИнд = 0 И НЕ СтрокаНачисления.СтрокаДетализацииСост)
				 ИЛИ СтрокаНачисления.СтрокаДетализацииСост Тогда
					НоваяСтрока.sum_to_pay = "X";
				Иначе
					НоваяСтрока.sum_to_pay = XMLСтрока(СтрокаНачисления.КОплатеИПУ);
				КонецЕсли;
				НоваяСтрока.hamount     = XMLСтрока(СтрокаНачисления.КоличествоОПУ);
				НоваяСтрока.amount      = XMLСтрока(СтрокаНачисления.КоличествоИПУ);
				НоваяСтрока.hsum        = XMLСтрока(СтрокаНачисления.НачисленоОПУ);
			Иначе
				НоваяСтрока.hamount     = XMLСтрока(СтрокаНачисления.КоличествоОПУ);
				НоваяСтрока.amount      = XMLСтрока(СтрокаНачисления.КоличествоИПУ);
				НоваяСтрока.hsum        = XMLСтрока(СтрокаНачисления.НачисленоОПУ);
				НоваяСтрока.hsum_to_pay = ?(СтрокаНачисления.СтрокаДетализацииТариф, "X", XMLСтрока(СтрокаНачисления.КОплатеОПУ));
			КонецЕсли;
			
			НоваяСтрока.tarif       = ?(СтрокаНачисления.ТарифДляВывода = "", "X", СтрокаНачисления.ТарифДляВывода);
			НоваяСтрока.volumep     = XMLСтрока(СтрокаНачисления.ОбщРасходИнд);
			НоваяСтрока.volumea     = XMLСтрока(СтрокаНачисления.ОбщУчетныйРасход);
			НоваяСтрока.volumeh     = XMLСтрока(СтрокаНачисления.ОбщРасходОбщ);
			НоваяСтрока.amount_norm = XMLСтрока(СтрокаНачисления.ОбщРасходИндНорма);
			
			Если СтрокаНачисления.МассивУслуг.Количество() = 0 Тогда
				УслугиСчетчиков = СтрокаНачисления.Услуга;
			Иначе
				УслугиСчетчиков = СтрокаНачисления.МассивУслуг;
			КонецЕсли;
			
			ЗаполнитьСведенияОбИПУ(НоваяСтрока, ТекущиеДанные.ТаблицаСчетчиков, ЛицевойСчет, Помещение, УслугиСчетчиков);
			ЗаполнитьСведенияОбОПУ(НоваяСтрока, ТекущиеДанные.ТаблицаСчетчиков, ЛицевойСчет, Помещение, УслугиСчетчиков);
		КонецЕсли;
		
		// Дополняем строку услуги кодом поставщика, предоставляющего данную услугу.
		Если НЕ СтрокаНачисления.СтрокаДетализацииТариф И НЕ СтрокаНачисления.СтрокаДетализацииСост Тогда
			
			ПоставщикУслуги = ТекущиеДанные.ТаблицаПоставщиковПоВидамУслуг.Найти(СтрокаНачисления.ВидУслуги, "ВидУслуги");
			
			Если ПоставщикУслуги = Неопределено Тогда
				НоваяСтрока.contractor = КодПоставщикаУО;
			Иначе
				НоваяСтрока.contractor = ПоставщикУслуги.Код;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаНачисления.Сортировать("group, Порядок, ВидУслуги, component, name");
	
КонецПроцедуры

// Заполняет данные о начислениях по пеням.
//
Процедура ЗаполнитьДанныеОНачисленияхПоПеням(НоваяСтрока, ТаблицаНачисления, ТаблицаПерерасчетов, ТаблицаПоставщиков, ТаблицаУслугБезНачислений, ТекущиеДанные,
											 СтруктураНастроек, ОбщиеДанные, СтруктураОбщихТаблиц, КвитанцияНаКР)
		
	Если ОбщиеДанные.Свойство("КвитанцияПоПени") И ОбщиеДанные.КвитанцияПоПени = Ложь Тогда
		ОбщиеДанные.КвитанцияПоПени = Истина;
	Иначе
		ОбщиеДанные.Вставить("КвитанцияПоПени", Истина);
	КонецЕсли;
	
	// Заменяем в "ТекущихДанных" таблицы начислений, оплат, начального сальдо, поставщиков и перерасчетов
	// соответствующими таблицами по пеням из "СтруктураОбщихТаблиц" по текущему объекту отчета.
	УПЖКХ_ПечатьКвитанцийСервер.ЗаменитьТаблицыВТекущихДанныхНаТаблицыПоПеням(ТекущиеДанные, СтруктураОбщихТаблиц, ОбщиеДанные, СтруктураНастроек);
	
	ДанныеОПоставщиках = ТекущиеДанные.ТаблицаПоставщиков;
	
	// Дополняем услугами без начислений.
	ДополнитьТекущиеДанныеПоПениБезНачислений(ТекущиеДанные, СтруктураОбщихТаблиц, ОбщиеДанные);
	
	// Дополняем текущие данные сведениями об оплатах по пеням.
	ДополнитьТекущиеДанныеОплатамиПоПени(ТекущиеДанные, СтруктураОбщихТаблиц, ОбщиеДанные);
	ДополнитьТекущиеДанныеСальдоПоПени(ТекущиеДанные, СтруктураОбщихТаблиц, ОбщиеДанные);
	
	// Записываем в структуру суммовые показатели по текущему объекту отчета.
	УПЖКХ_ПечатьКвитанцийСервер.ПолучитьИтоговыеПоказателиПоТекущемуОбъекту(ОбщиеДанные, ТекущиеДанные, СтруктураНастроек);
	
	СтруктураОбщихДанных = Новый Структура;
	
	ОплатыПоПениДляСвертки = ТекущиеДанные.ТаблицаОплатПоПени.Скопировать(, "СуммаОплатыПени");
	ОплатыПоПениДляСвертки.Свернуть(, "СуммаОплатыПени");
	
	СтруктураОбщихДанных.Вставить("ipd",                XMLСтрока(?(КвитанцияНаКР, ОбщиеДанные.ИдентификаторПДКапРемонт, ?(СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт", ОбщиеДанные.ИдентификаторПДЕдиный, ОбщиеДанные.ИдентификаторПДОсн))));
	СтруктураОбщихДанных.Вставить("debt_beg",           XMLСтрока(ОбщиеДанные.НачальноеСальдо));
	СтруктураОбщихДанных.Вставить("debt_end",           XMLСтрока(ОбщиеДанные.НачальноеСальдо + ТекущиеДанные.СуммаПени - ?(ОплатыПоПениДляСвертки.Количество() = 0, 0, ОплатыПоПениДляСвертки[0].СуммаОплатыПени)));
	СтруктураОбщихДанных.Вставить("debt_prev",          XMLСтрока(ОбщиеДанные.Задолженность));
	СтруктураОбщихДанных.Вставить("prepayment",         XMLСтрока(ОбщиеДанные.Аванс));
	СтруктураОбщихДанных.Вставить("sum_payed",          XMLСтрока(ОбщиеДанные.ВнесеноОплат));
	СтруктураОбщихДанных.Вставить("last_payment_date",  ПолучитьДатуДляXML(ОбщиеДанные.ДатаОплатыДляXML));
	СтруктураОбщихДанных.Вставить("sum_to_pay",         XMLСтрока(ОбщиеДанные.ВсегоКОплатеДляШК));
	СтруктураОбщихДанных.Вставить("СуммаКОплатеЧислом", ОбщиеДанные.ВсегоКОплатеДляШК);
	СтруктураОбщихДанных.Вставить("СуммаОплатЧислом",   ОбщиеДанные.ВнесеноОплат);
	
	ЗаполнитьДанныеОНачислениях(ТаблицаНачисления, ТекущиеДанные, СтруктураНастроек, ОбщиеДанные, ДанныеОПоставщиках, Истина);
	ЗаполнитьДанныеОПерерасчетах(ТаблицаПерерасчетов, ТекущиеДанные, ОбщиеДанные.ОрганизацияОбъект);
	ЗаполнитьДанныеОПоставщиках(ТаблицаПоставщиков, ДанныеОПоставщиках, СтруктураНастроек, ОбщиеДанные);
	
	ПодготовитьДанныеОПеняхБезНачислений(ТаблицаУслугБезНачислений, ТекущиеДанные.ТаблицаПениБезНачислений);
	
	Если КвитанцияНаКР Тогда
		НоваяСтрока.finesOverhaul_com        = СтруктураОбщихДанных;
		НоваяСтрока.finesOverhaul_barcode    = ПолучитьОсновныеШтрихкодыКвитанции(СтруктураНастроек, ОбщиеДанные, КвитанцияНаКР);
		НоваяСтрока.finesOverhaul            = ТаблицаНачисления.Скопировать();
		НоваяСтрока.finesOverhaul_debt       = ТаблицаУслугБезНачислений.Скопировать();
		НоваяСтрока.finesOverhaul_correction = ТаблицаПерерасчетов.Скопировать();
		НоваяСтрока.finesOverhaul_contractor = ТаблицаПоставщиков.Скопировать();
	Иначе
		НоваяСтрока.finesMain_com        = СтруктураОбщихДанных;
		НоваяСтрока.finesMain_barcode    = ПолучитьОсновныеШтрихкодыКвитанции(СтруктураНастроек, ОбщиеДанные, КвитанцияНаКР);
		НоваяСтрока.finesMain            = ТаблицаНачисления.Скопировать();
		НоваяСтрока.finesMain_debt       = ТаблицаУслугБезНачислений.Скопировать();
		НоваяСтрока.finesMain_correction = ТаблицаПерерасчетов.Скопировать();
		НоваяСтрока.finesMain_contractor = ТаблицаПоставщиков.Скопировать();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные о рассрочке.
//
Процедура ЗаполнитьДанныеОРассрочке(ТаблицаРассрочки, ТекущиеДанные, Организация)
	
	ДанныеПоРассрочке  = ТекущиеДанные.ТаблицаРассрочки;
	ДанныеОПоставщиках = ТекущиеДанные.ТаблицаПоставщиковПоВидамУслуг;
	
	ТаблицаРассрочки.Очистить();
	
	Для Каждого СтрокаРассрочки ИЗ ДанныеПоРассрочке Цикл
		НоваяСтрока = ТаблицаРассрочки.Добавить();
		
		НоваяСтрока.name       = СтрокаРассрочки.НаименованиеВидаУслуги;
		НоваяСтрока.sum        = XMLСтрока(СтрокаРассрочки.Начислено);
		НоваяСтрока.sum_credit = XMLСтрока(СтрокаРассрочки.НачисленоКомиссия);
		НоваяСтрока.rate       = XMLСтрока(СтрокаРассрочки.ПроцентнаяСтавка);
		НоваяСтрока.balance    = XMLСтрока(СтрокаРассрочки.Остаток);
		НоваяСтрока.sum_to_pay = XMLСтрока(СтрокаРассрочки.КОплате);
		
		СтрокаПоставщика = ДанныеОПоставщиках.Найти(СтрокаРассрочки.ВидУслуги, "ВидУслуги");
		НоваяСтрока.contractor = ?(СтрокаПоставщика = Неопределено, Организация.Код, СтрокаПоставщика.Код);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные о поставщиках.
//
Процедура ЗаполнитьДанныеОПоставщиках(ТаблицаПоставщиков, ДанныеПоПоставщикам, СтруктураНастроек, ОбщиеДанные)
	
	ТаблицаПоставщиков.Очистить();
	
	ПоставщикиДляНумерации = ДанныеПоПоставщикам.Скопировать(Новый Структура("ЭтоСведенияТекущейОрганизации", Ложь));
	
	УПЖКХ_ПечатьКвитанцийСервер.ЗаполнитьПорядковыеНомераПоставщиков(ПоставщикиДляНумерации);
	
	Для Каждого СтрокаПоставщика ИЗ ПоставщикиДляНумерации Цикл
		НоваяСтрока = ТаблицаПоставщиков.Добавить();
		НоваяСтрока.id          = СтрокаПоставщика.Код;
		НоваяСтрока.services    = СтрСоединить(СтрокаПоставщика.ВидыУслуг, ", ");
		НоваяСтрока.debt_beg    = XMLСтрока(СтрокаПоставщика.НачальноеСальдо);
		НоваяСтрока.sum         = XMLСтрока(СтрокаПоставщика.СуммаНачисления);
		НоваяСтрока.peni        = XMLСтрока(СтрокаПоставщика.СуммаПени);
		НоваяСтрока.sum_payed   = XMLСтрока(СтрокаПоставщика.ВсегоОплат);
		НоваяСтрока.summ        = XMLСтрока(СтрокаПоставщика.СуммаНачисления - СтрокаПоставщика.ВсегоОплат);
		НоваяСтрока.sum_to_pay  = XMLСтрока(СтрокаПоставщика.ВсегоКОплате);
		НоваяСтрока.num         = XMLСтрока(СтрокаПоставщика.ПорядковыйНомерПоставщика);
		НоваяСтрока.is_overhaul = XMLСтрока(?(СтрокаПоставщика.ЭтоСведенияПоКапРемонту, "1", ""));
		
		Если СтруктураНастроек.ВыводитьШК Тогда
			НоваяСтрока.barcode = ПолучитьСтруктуруШтрихкодаПоставщика(СтруктураНастроек, ОбщиеДанные, СтрокаПоставщика);
		Иначе
			// Если штриход формировать не нужно, сформируем структуру с пустым штрихкодом.
			НоваяСтрока.barcode = ПолучитьСтруктуруШтрихкода(СтруктураНастроек, ОбщиеДанные);
		КонецЕсли;
	КонецЦикла;
	
	// Добавим исполнителя.
	СтрокаИсполнителя = ДанныеПоПоставщикам.Найти(Истина, "ЭтоСведенияТекущейОрганизации");
	
	Если НЕ СтрокаИсполнителя = Неопределено Тогда
		НоваяСтрока = ТаблицаПоставщиков.Добавить();
		НоваяСтрока.id          = СтрокаИсполнителя.Код;
		НоваяСтрока.services    = СтрСоединить(СтрокаИсполнителя.ВидыУслуг, ", ");
		НоваяСтрока.debt_beg    = XMLСтрока(СтрокаИсполнителя.НачальноеСальдо);
		НоваяСтрока.sum         = XMLСтрока(СтрокаИсполнителя.СуммаНачисления);
		НоваяСтрока.peni        = XMLСтрока(СтрокаИсполнителя.СуммаПени);
		НоваяСтрока.sum_payed   = XMLСтрока(СтрокаИсполнителя.ВсегоОплат);
		НоваяСтрока.summ        = XMLСтрока(СтрокаИсполнителя.СуммаНачисления - СтрокаИсполнителя.ВсегоОплат);
		НоваяСтрока.sum_to_pay  = XMLСтрока(СтрокаИсполнителя.ВсегоКОплате);
		НоваяСтрока.num         = "";
		НоваяСтрока.is_overhaul = XMLСтрока(?(СтрокаИсполнителя.ЭтоСведенияПоКапРемонту, "1", ""));
		
		Если СтруктураНастроек.ВыводитьШК Тогда
			НоваяСтрока.barcode = ПолучитьСтруктуруШтрихкодаПоставщика(СтруктураНастроек, ОбщиеДанные, СтрокаИсполнителя);
		Иначе
			// Если штриход формировать не нужно, сформируем структуру с пустым штрихкодом.
			НоваяСтрока.barcode = ПолучитьСтруктуруШтрихкода(СтруктураНастроек, ОбщиеДанные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет сведения об ИПУ.
//
Процедура ЗаполнитьСведенияОбИПУ(НоваяСтрока, ТаблицаСчетчиков, ЛицевойСчет, Помещение, Услуга)
	
	ТаблицаТекСчетчиков = ПолучитьТаблицуТекущихСчетчиков(ТаблицаСчетчиков, Услуга);
	
	НоваяСтрока.meter = Новый Массив;
	
	Для Каждого СтрокаТекСчетчика ИЗ ТаблицаТекСчетчиков Цикл
		
		НоваяСтрока.meter.Добавить(СтрокаТекСчетчика.КодСчетчика);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет сведения об ОПУ.
//
Процедура ЗаполнитьСведенияОбОПУ(НоваяСтрока, ТаблицаСчетчиков, ЛицевойСчет, Помещение, Услуга)
	
	ТаблицаТекСчетчиков = ПолучитьТаблицуТекущихСчетчиков(ТаблицаСчетчиков, Услуга, Истина);
	
	НоваяСтрока.hmeter = Новый Массив;
	
	Для Каждого СтрокаТекСчетчика ИЗ ТаблицаТекСчетчиков Цикл
		
		НоваяСтрока.hmeter.Добавить(СтрокаТекСчетчика.КодСчетчика);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает сведения о текущих счетчиках.
//
Функция ПолучитьТаблицуТекущихСчетчиков(ТаблицаСчетчиков, Услуга, ОтбиратьОПУ = Ложь)
	
	Если ТипЗнч(Услуга) = Тип("Массив") Тогда
		
		ТекТаблицаСчетчиков = Новый ТаблицаЗначений();
		ТекТаблицаСчетчиков.Колонки.Добавить("КодСчетчика");
		
		СтрокиСчетчиков = ТаблицаСчетчиков.НайтиСтроки(Новый Структура("Отключен, ЯвляетсяОПУ", Ложь, ОтбиратьОПУ));
		
		Для каждого ТекСтрокаСчетчика из СтрокиСчетчиков Цикл
			Если НЕ Услуга.Найти(ТекСтрокаСчетчика.Услуга) = Неопределено Тогда
				НоваяСтрока = ТекТаблицаСчетчиков.Добавить();
				НоваяСтрока.КодСчетчика = ТекСтрокаСчетчика.КодСчетчика;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СтрокиСчетчиков     = ТаблицаСчетчиков.НайтиСтроки(Новый Структура("Услуга, Отключен, ЯвляетсяОПУ", Услуга, Ложь, ОтбиратьОПУ));
		ТекТаблицаСчетчиков = ТаблицаСчетчиков.Скопировать(СтрокиСчетчиков, "КодСчетчика");
		
	КонецЕсли;
	
	Возврат ТекТаблицаСчетчиков;
	
КонецФункции

// Проверяет является ли строка начислений строкой СОИ.
//
Функция ПроверитьЯвляетсяЛиСтрокаНачисленийСтрокойСОИ(СтрокаНачисления, ТекущиеДанные, КвитанцияПоПеням)
	
	ЯвляетсяСтрокойСОИ = Ложь;
	
	Если НЕ КвитанцияПоПеням И СтрокаНачисления.СтрокаДляОбщегоИмущества Тогда
		
		СтрокиУслугиНеСОИ = ТекущиеДанные.ТаблицаНачисления.НайтиСтроки(Новый Структура("Услуга, СтрокаДляОбщегоИмущества", СтрокаНачисления.Услуга, Ложь));
		Если НЕ СтрокиУслугиНеСОИ.Количество() = 0 Тогда
			ЯвляетсяСтрокойСОИ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЯвляетсяСтрокойСОИ;
	
КонецФункции

// Заполняет сведения об оплатах.
//
Процедура ЗаполнитьСведенияОбОплатах(НоваяСтрока, СтрокаНачисления, ТекущиеДанные, КвитанцияПоПеням)
	
	НоваяСтрока.sum_payed = "0";
	
	Если НоваяСтрока.bill_only = "1" ИЛИ СтрокаНачисления.СтрокаДетализацииСост ИЛИ СтрокаНачисления.СтрокаДетализацииТариф Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаНачисления.Услуга = Неопределено Тогда
		СтруктураОтбора = Новый Структура("ВидУслуги", СтрокаНачисления.ВидУслуги);
	Иначе
		СтруктураОтбора = Новый Структура("Услуга", СтрокаНачисления.Услуга);
	КонецЕсли;
	
	ТаблицаОплат         = ?(КвитанцияПоПеням, ТекущиеДанные.ТаблицаОплатПоПени, ТекущиеДанные.ТаблицаОплатПоУслугам);
	СтрокиОплат          = ТаблицаОплат.НайтиСтроки(СтруктураОтбора);
	ТаблицаОплатПоУслуге = ТаблицаОплат.Скопировать(СтрокиОплат, "Оплачено");
	
	ТаблицаОплатПоУслуге.Свернуть(, "Оплачено");
	
	Если НЕ ТаблицаОплатПоУслуге.Количество() = 0 Тогда
		СтрокаИтогов = ТаблицаОплатПоУслуге[0];
		НоваяСтрока.sum_payed = XMLСтрока(-?(СтрокаИтогов.Оплачено = Неопределено, 0, СтрокаИтогов.Оплачено));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет сведения о начальном и конечном сальдо.
//
Процедура ЗаполнитьСведенияОНачальномИКонечномСальдо(НоваяСтрока, СтрокаНачисления, ТекущиеДанные, КвитанцияПоПени = Ложь)
	
	Если КвитанцияПоПени Тогда
		
		// Отбираем данные.
		
		СтрокаСальдо = ТекущиеДанные.ТаблицаСальдоПоПени.Найти(СтрокаНачисления.ВидУслуги, "ВидУслуги");
		СтрокаОплаты = ТекущиеДанные.ТаблицаОплатПоПени.Найти(СтрокаНачисления.ВидУслуги, "ВидУслуги");
		
		НачальноеСальдо = ?(СтрокаСальдо = Неопределено, 0, СтрокаСальдо.НачальноеСальдоПени);
		СуммаОплаты     = ?(СтрокаОплаты = Неопределено, 0, СтрокаОплаты.СуммаОплатыПени);
		
		НоваяСтрока.debt_beg = XMLСтрока(НачальноеСальдо);
		НоваяСтрока.debt_end = XMLСтрока(НачальноеСальдо + СтрокаНачисления.Начислено - СуммаОплаты);
		
	Иначе
		
		Если НоваяСтрока.bill_only = "1" ИЛИ СтрокаНачисления.СтрокаДетализацииСост ИЛИ СтрокаНачисления.СтрокаДетализацииТариф Тогда
			НоваяСтрока.debt_beg = "0";
			НоваяСтрока.debt_end = "0";
			Возврат;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Услуга");
		
		Если СтрокаНачисления.МассивУслуг.Количество() = 0 Тогда
			
			СтруктураОтбора.Услуга = СтрокаНачисления.Услуга;
			
			ТаблицаТекущихУслуг = ТекущиеДанные.ТаблицаКонНачСальдо.Скопировать(СтруктураОтбора, "НачальноеСальдо, КонечноеСальдо");
			
		Иначе
			
			ТаблицаТекущихУслуг = ТекущиеДанные.ТаблицаКонНачСальдо.СкопироватьКолонки("НачальноеСальдо, КонечноеСальдо");
			
			Для каждого ТекУслуга из СтрокаНачисления.МассивУслуг Цикл
				
				СтруктураОтбора.Услуга = ТекУслуга;
				
				СтрокиУслуги = ТекущиеДанные.ТаблицаКонНачСальдо.НайтиСтроки(СтруктураОтбора);
				
				Для каждого ТекСтрокаУслуги из СтрокиУслуги Цикл
					НоваяСтрокаУслуги = ТаблицаТекущихУслуг.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуги, ТекСтрокаУслуги);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаТекущихУслуг.Свернуть(, "НачальноеСальдо, КонечноеСальдо");
		
		Если ТаблицаТекущихУслуг.Количество() = 0 Тогда
			НоваяСтрока.debt_beg = 0;
			НоваяСтрока.debt_end = 0;
		Иначе
			СтрокаИтогов = ТаблицаТекущихУслуг[0];
			
			НоваяСтрока.debt_beg = XMLСтрока(СтрокаИтогов.НачальноеСальдо);
			НоваяСтрока.debt_end = XMLСтрока(СтрокаИтогов.КонечноеСальдо);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные о перерасчетах.
//
Процедура ЗаполнитьДанныеОПерерасчетах(ТаблицаПерерасчетов, ТекущиеДанные, Организация)
	
	ТаблицаПерерасчетов.Очистить();
	
	ДанныеОПоставщиках  = ТекущиеДанные.ТаблицаПоставщиковПоВидамУслуг;
	ДанныеОПерерасчетах = ТекущиеДанные.ТаблицаПерерасчетов;
	
	Для Каждого Строка ИЗ ДанныеОПерерасчетах Цикл
		НоваяСтрока = ТаблицаПерерасчетов.Добавить();
		НоваяСтрока.name    = Строка.НаименованиеВидаУслуги;
		НоваяСтрока.grounds = Строка.ОснованиеКорректировки;
		НоваяСтрока.sum     = XMLСтрока(Строка.Перерасчет);
		
		СтрокаПоставщика = ДанныеОПоставщиках.Найти(Строка.ВидУслуги, "ВидУслуги");
		НоваяСтрока.contractor = ?(СтрокаПоставщика = Неопределено, Организация.Код, СтрокаПоставщика.Код);
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет группы услуг.
//
Функция ОпределитьГруппуУслуги(СтрокаНачисления, СтруктураНастроек)
	
	ВидУслуги     = СтрокаНачисления.ВидУслуги;
	УслугиПоТипам = СтруктураНастроек.УслугиПоТипам;
	
	Если СтруктураНастроек.ВыгружатьУслугиСОИВОтдельнуюГруппу = Истина
	   И СтрокаНачисления.СтрокаДляОбщегоИмущества = Истина Тогда
		
		Возврат "4";
		
	ИначеЕсли НЕ УслугиПоТипам.Количество() = 0 Тогда
		
		СтрокаВида = УслугиПоТипам.Найти(ВидУслуги, "ВидУслуги");
		
		Если Не СтрокаВида = Неопределено Тогда
			Если СтрокаВида.Коммунальная Тогда
				Возврат "1";
			ИначеЕсли СтрокаВида.СодержаниеИРемонт Тогда
				Возврат "2";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "3";
	
КонецФункции

// Формирует таблицу объектов, по которым нужно осуществить сбор данных.
//
Функция ПолучитьТаблицуОбъектовДляКвитанции(НастройкиОбмена, Организация, Дата)
	
	Запрос = Новый Запрос;
	
	УсловиеНаЛС = "ИСТИНА";
	
	Если НЕ НастройкиОбмена = Неопределено И НастройкиОбмена.Свойство("ЛицевыеСчета") Тогда
		УсловиеНаЛС = "КВП_ЛицевыеСчета.Ссылка В(&ЛицевыеСчета)";
		
		Запрос.УстановитьПараметр("ЛицевыеСчета", НастройкиОбмена.ЛицевыеСчета);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК Ссылка,
	|	КВП_ЛицевыеСчета.ЭтоГруппа КАК ЭтоГруппа
	|ПОМЕСТИТЬ втОтобранныеЛицевыеСчета
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	" + УсловиеНаЛС + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтобранныеЛицевыеСчета.Ссылка КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЭлементы
	|ИЗ
	|	втОтобранныеЛицевыеСчета КАК втОтобранныеЛицевыеСчета
	|ГДЕ
	|	НЕ втОтобранныеЛицевыеСчета.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтобранныеЛицевыеСчета.Ссылка КАК Группа
	|ПОМЕСТИТЬ втГруппы
	|ИЗ
	|	втОтобранныеЛицевыеСчета КАК втОтобранныеЛицевыеСчета
	|ГДЕ
	|	втОтобранныеЛицевыеСчета.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЭлементыИзГрупп
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				втГруппы.Группа
	|			ИЗ
	|				втГруппы КАК втГруппы)
	|	И НЕ КВП_ЛицевыеСчета.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЭлементы.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втВсеЛицевыеСчета
	|ИЗ
	|	втЭлементы КАК втЭлементы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втЭлементыИзГрупп.ЛицевойСчет
	|ИЗ
	|	втЭлементыИзГрупп КАК втЭлементыИзГрупп
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаНач,
	|			ЛицевойСчет.Ссылка В
	|					(ВЫБРАТЬ
	|						втВсеЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						втВсеЛицевыеСчета КАК втВсеЛицевыеСчета)
	|				И НЕ ЛицевойСчет.Идентификатор = """") КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_ЛицевыеСчета.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				втВсеЛицевыеСчета.ЛицевойСчет
	|			ИЗ
	|				втВсеЛицевыеСчета КАК втВсеЛицевыеСчета)
	|	И НЕ КВП_ЛицевыеСчета.ЛицевойСчет.Идентификатор = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор КАК Договор
	|ПОМЕСТИТЬ втСведенияДляВзаиморасчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)
	|				И Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|ГДЕ
	|	(УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.СрокДействия >= &ДатаНач)
	|	И НЕ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияДляВзаиморасчетов.ЛицевойСчет КАК Объект
	|ИЗ
	|	втСведенияДляВзаиморасчетов КАК втСведенияДляВзаиморасчетов";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(Дата));
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

// Устанавливает факт проведения начислений.
//
Функция УстановитьФактПроведенияНачислений(ЧислоОкончанияПроведенияНачислений, МесяцОкончанияПроведенияНачислений, ДатаОбмена) Экспорт
	
	Если ЧислоОкончанияПроведенияНачислений = 0 Тогда
		Возврат "1";
	КонецЕсли;
	
	МесяцГотовностиНачислений = ?(МесяцОкончанияПроведенияНачислений = 0, ДатаОбмена, ДобавитьМесяц(ДатаОбмена, 1));
	
	// Определяем, не превышает ли указанное пользователем число окончания
	// проведения начислений количество дней в месяце.
	// Если превышает, то устанавливаем в качестве числа окончания проведения начислений
	// количество дней в месяце.
	// Например, если указано 31, а выгрузить надо за февраль (28 дней), то
	// вместо 31 необходимо использовать 28.
	КоличествоДнейВМесяце = Число(Формат(КонецМесяца(МесяцГотовностиНачислений), "ДФ=dd"));
	
	Если ЧислоОкончанияПроведенияНачислений > КоличествоДнейВМесяце Тогда
		ЧислоОкончанияПроведенияНачисленийДляСравнения = КоличествоДнейВМесяце;
	Иначе
		ЧислоОкончанияПроведенияНачисленийДляСравнения = ЧислоОкончанияПроведенияНачислений;
	КонецЕсли;
	
	// Если период текущий то для сравнения с числом окончания проведения начислений
	// используем текущую дату.
	// Иначе используем дату окончания указанного периода.
	ТекущаяДата                      = ТекущаяДата();
	НачалоТекущегоМесяца             = НачалоМесяца(ТекущаяДата);
	НачалоМесяцаГотовностиНачислений = НачалоМесяца(МесяцГотовностиНачислений);
	
	Если НачалоМесяцаГотовностиНачислений = НачалоТекущегоМесяца Тогда
		Дата = ТекущаяДата;
	ИначеЕсли НачалоМесяцаГотовностиНачислений < НачалоТекущегоМесяца Тогда
		Дата = КонецМесяца(МесяцГотовностиНачислений);
	ИначеЕсли НачалоМесяцаГотовностиНачислений > НачалоТекущегоМесяца Тогда
		Возврат "";
	КонецЕсли;
	
	ЧислоОбмена = Число(Формат(Дата, "ДФ=dd"));
	
	Если ЧислоОбмена >= ЧислоОкончанияПроведенияНачисленийДляСравнения Тогда
		Возврат "1";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Подготавливает данные для выгрузки пинкодов.
//
Функция ПодготовитьДанныеДляВыгрузкиПинкодов(НастройкаДоступа, ТаблицаПинкодов) Экспорт
	
	// Параметры доступа.
	Если ТаблицаПинкодов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВыгрузки = Новый Структура;
	
	Организация = НастройкаДоступа.Организация;
	
	// Общие данные организации.
	СтруктураВыгрузки.Вставить("filedate", XMLСтрока(ТекущаяДата()));
	СтруктураВыгрузки.Вставить("name",     Организация.Наименование);
	СтруктураВыгрузки.Вставить("inn",      Организация.ИНН);
	СтруктураВыгрузки.Вставить("filetype", "access");
	СтруктураВыгрузки.Вставить("version",  "4");
	
	//////// ЛИЦЕВЫЕ СЧЕТА ////////
	
	// Общие данные.
	СтруктураВыгрузки.Вставить("accs", Новый ТаблицаЗначений);
	СтруктураВыгрузки.accs.Колонки.Добавить("id");
	СтруктураВыгрузки.accs.Колонки.Добавить("name");
	СтруктураВыгрузки.accs.Колонки.Добавить("login");
	СтруктураВыгрузки.accs.Колонки.Добавить("pin");
	СтруктураВыгрузки.accs.Колонки.Добавить("email");
	
	Для каждого СтрокаЛС из ТаблицаПинкодов Цикл
		
		Если СтрокаЛС = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекЛС = СтрокаЛС.ЛицевойСчет;
		
		// Проверка на заполненность идентификатора.
		// Сведения по л/с с пустым идентификатором не передаются.
		ИдентификаторЛС = СокрЛП(ТекЛС.Идентификатор);
		
		Если ИдентификаторЛС = "" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтруктураВыгрузки.accs.Добавить();
		НоваяСтрока.id    = ИдентификаторЛС;
		НоваяСтрока.name  = ТекЛС.Наименование;
		НоваяСтрока.login = Строка(СтрокаЛС.Логин);
		НоваяСтрока.pin   = Строка(СтрокаЛС.Пинкод);
		НоваяСтрока.email = ТекЛС.АдресЭлектроннойПочты;
		
	КонецЦикла;
	
	Возврат СтруктураВыгрузки;
	
КонецФункции

// Получение данных из XML версия 4.
//
Функция ПолучитьДанныеИзXML4(ДокDOM, Организация, СведенияОбОшибке)
	
	// Структура для выгрузки.
	СтруктураДанных = Новый Структура;
	
	Попытка
		
		// Корневой узел (org, requests).
		УзелКорневой = ДокDOM.ПервыйДочерний;
		
		Если УзелКорневой.ЕстьАтрибут("version") Тогда
			ВерсияСайт = УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("version").Значение;
		Иначе
			СообщенияОбОшибке = "Версия механизма обмена на сайте устарела. Необходимо обновиться.";
			Возврат Неопределено;
		КонецЕсли;
		
		ВерсияПП = "4";
		
		Если НЕ ВерсияСайт = ВерсияПП Тогда
			СообщенияОбОшибке = "Версия механизма обмена, используемого в учетной программе, не совпадает с версией, используемой на сайте.";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СообщенияОбОшибке);
			
			Возврат Неопределено;
		КонецЕсли;
		
		// Тип файла.
		ТипФайла = НРег(УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("filetype").Значение);
		
		// Формирование структуры данных.
		Если ТипФайла = "meters" Тогда
			
			СтруктураДанных.Вставить("inn",      УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("inn").Значение);
			СтруктураДанных.Вставить("filedate", XMLЗначение(Тип("Дата"), УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("filedate").Значение));
			СтруктураДанных.Вставить("filetype", ТипФайла);
			
			// Таблица л/с.
			СтруктураДанных.Вставить("meters", Новый ТаблицаЗначений);
			СтруктураДанных.meters.Колонки.Добавить("id_ls",  Новый ОписаниеТипов("Строка"));
			СтруктураДанных.meters.Колонки.Добавить("id",     Новый ОписаниеТипов("Строка"));
			СтруктураДанных.meters.Колонки.Добавить("name",   Новый ОписаниеТипов("Строка"));
			СтруктураДанных.meters.Колонки.Добавить("values", Новый ОписаниеТипов("Число"));
			СтруктураДанных.meters.Колонки.Добавить("date",   Новый ОписаниеТипов("Дата"));
			СтруктураДанных.meters.Колонки.Добавить("val1",   Новый ОписаниеТипов("Число"));
			СтруктураДанных.meters.Колонки.Добавить("val2",   Новый ОписаниеТипов("Число"));
			СтруктураДанных.meters.Колонки.Добавить("val3",   Новый ОписаниеТипов("Число"));
			
			// Дочерними являются только узлы "PersAssoc", проходим по ним всем в цикле.
			Для Каждого ТекУзел ИЗ УзелКорневой.ДочерниеУзлы Цикл
				
				Если УзелЯвляетсяТегом(ТекУзел) Тогда
					
					// Формируем код л/с.
					ИдентификаторЛСАтрибут = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("id");
					Если ИдентификаторЛСАтрибут = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ИдентификаторЛС = ИдентификаторЛСАтрибут.Значение;
					
					// Заполняем ПУ л/с.
					Для Каждого ТекПУ ИЗ ТекУзел.ДочерниеУзлы Цикл
						
						Если УзелЯвляетсяТегом(ТекПУ) Тогда
							
							СтрокаПУ = СтруктураДанных.meters.Добавить();
							
							// л/с.
							СтрокаПУ.id_ls = ИдентификаторЛС;
							
							// ПУ.
							СтрокаПУ.id   = ТекПУ.Атрибуты.ПолучитьИменованныйЭлемент("id").Значение;
							СтрокаПУ.name = ТекПУ.Атрибуты.ПолучитьИменованныйЭлемент("name").Значение;
							
							Тарифность = XMLЗначение(Тип("Число"), ТекПУ.Атрибуты.ПолучитьИменованныйЭлемент("values").Значение);
							
							СтрокаПУ.values = Тарифность;
							СтрокаПУ.date   = XMLЗначение(Тип("Дата"), ТекПУ.Атрибуты.ПолучитьИменованныйЭлемент("date").Значение);
							СтрокаПУ.val1   = XMLЗначение(Тип("Число"), ТекПУ.Атрибуты.ПолучитьИменованныйЭлемент("val1").Значение);
							
							Если НЕ Тарифность = 1 Тогда
								СтрокаПУ.val2 = XMLЗначение(Тип("Число"), ТекПУ.Атрибуты.ПолучитьИменованныйЭлемент("val2").Значение);
							КонецЕсли;
							
							Если Тарифность = 3 Тогда
								СтрокаПУ.val3 = XMLЗначение(Тип("Число"), ТекПУ.Атрибуты.ПолучитьИменованныйЭлемент("val3").Значение);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипФайла = "accexistence" Тогда
			
			СтруктураДанных.Вставить("inn",      УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("inn").Значение);
			СтруктураДанных.Вставить("filetype", ТипФайла);
			СтруктураДанных.Вставить("ИспользоватьЛогиныВВерсии4", XMLЗначение(Тип("Булево"), УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("need_logins").Значение));
			
			// Таблица л/с.
			СтруктураДанных.Вставить("accs", Новый ТаблицаЗначений);
			СтруктураДанных.accs.Колонки.Добавить("id",    Новый ОписаниеТипов("Строка"));
			СтруктураДанных.accs.Колонки.Добавить("email", Новый ОписаниеТипов("Строка"));
			
			// Дочерними являются только узлы "PersAcc", проходим по ним всем в цикле.
			Для Каждого ТекУзел ИЗ УзелКорневой.ДочерниеУзлы Цикл
				
				Если УзелЯвляетсяТегом(ТекУзел) Тогда
					
					СтрокаЛС = СтруктураДанных.accs.Добавить();
					
					// Заполняем данные л/с.
					ИдентификаторИзФайла = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("id").Значение;
					СтрокаЛС.id = Сред(ИдентификаторИзФайла, Найти(ИдентификаторИзФайла, " ") + 1);
					
					Если ТекУзел.ЕстьАтрибут("email") Тогда
						СтрокаЛС.email = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("email").Значение;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипФайла = "payments" Тогда
			
			СтруктураДанных.Вставить("inn",      УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("inn").Значение);
			СтруктураДанных.Вставить("filetype", ТипФайла);
			
			// Так как дата файла будет передаваться на сайт при следующей загрузке оплат,
			// используем только первые 19 символов, чтобы отсечь информацию о часовом поясе сайта.
			// Если этого не сделать, дата будет сконвертирована в местное время исходя из часовых
			// поясов сайта и сервера 1С. В таком случае, если часовые пояса отличаются,
			// при следующей загрузке оплат будет передана дата в часовом поясе сервера 1С, а не сайта,
			// что приведет к загрузке уже загруженных оплат или пропуске еще не загруженных оплат.
			СтруктураДанных.Вставить("filedate", XMLЗначение(Тип("Дата"), Лев(УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("filedate").Значение, 19)));
			
			СтруктураДанных.Вставить("payments", Новый ТаблицаЗначений);
			СтруктураДанных.payments.Колонки.Добавить("acc_id",                         Новый ОписаниеТипов("Строка"));
			СтруктураДанных.payments.Колонки.Добавить("date",                           Новый ОписаниеТипов("Дата"));
			СтруктураДанных.payments.Колонки.Добавить("sum",                            Новый ОписаниеТипов("Число"));
			СтруктураДанных.payments.Колонки.Добавить("fee",                            Новый ОписаниеТипов("Число"));
			СтруктураДанных.payments.Колонки.Добавить("ps",                             Новый ОписаниеТипов("Строка"));
			СтруктураДанных.payments.Колонки.Добавить("insurance_included",             Новый ОписаниеТипов("Строка"));
			СтруктураДанных.payments.Колонки.Добавить("is_overhaul",                    Новый ОписаниеТипов("Булево"));
			СтруктураДанных.payments.Колонки.Добавить("ИспользуетсяРаздельныйУчетПоКР", Новый ОписаниеТипов("Булево"));
			
			Для Каждого ТекУзел ИЗ УзелКорневой.ДочерниеУзлы Цикл
				
				Если УзелЯвляетсяТегом(ТекУзел) Тогда
					
					СтрокаОплаты = СтруктураДанных.payments.Добавить();
					СтрокаОплаты.acc_id = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("acc_id").Значение;
					СтрокаОплаты.date   = XMLЗначение(Тип("Дата"), ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("date").Значение);
					СтрокаОплаты.sum    = XMLЗначение(Тип("Число"), ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("sum").Значение);
					СтрокаОплаты.ps     = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("ps").Значение;
					
					Если ТекУзел.ЕстьАтрибут("fee") Тогда
						
						КомиссияАтрибут = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("fee");
						Если НЕ КомиссияАтрибут = Неопределено Тогда
							СтрокаОплаты.fee = XMLЗначение(Тип("Число"), КомиссияАтрибут.Значение);
						КонецЕсли;
					КонецЕсли;
					
					Если ТекУзел.ЕстьАтрибут("insurance_included") Тогда
						
						СтрахованиеАтрибут = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("insurance_included");
						Если Не СтрахованиеАтрибут = Неопределено Тогда
							СтрокаОплаты.insurance_included = СтрахованиеАтрибут.Значение;
						КонецЕсли;
					КонецЕсли;
					
					Если ТекУзел.ЕстьАтрибут("is_overhaul") Тогда
						
						СтрокаОплаты.ИспользуетсяРаздельныйУчетПоКР = Истина;
						
						ОплатаКапРемонтАтрибут = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("is_overhaul");
						Если Не ОплатаКапРемонтАтрибут = Неопределено Тогда
							СтрокаОплаты.is_overhaul = (XMLЗначение(Тип("Число"), ОплатаКапРемонтАтрибут.Значение) = 1);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		// Загрузка заявок АДС (временно закомментировано)
		//ИначеЕсли ТипФайла = "tickets" Тогда
		//	
		//	//СтруктураДанных.Вставить("name",     УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("name").Значение);
		//	//СтруктураДанных.Вставить("inn",      УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("inn").Значение);
		//	СтруктураДанных.Вставить("filedate", УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("filedate").Значение);
		//	СтруктураДанных.Вставить("filetype", ТипФайла);
		//	
		//	// Таблица статусов
		//	СтруктураДанных.Вставить("statuses", Новый ТаблицаЗначений);
		//	СтруктураДанных.meters.Колонки.Добавить("id",    Новый ОписаниеТипов("Строка"));
		//	СтруктураДанных.meters.Колонки.Добавить("title", Новый ОписаниеТипов("Число"));
		//	СтруктураДанных.meters.Колонки.Добавить("kod_ls",    Новый ОписаниеТипов("Строка"));
		//	СтруктураДанных.meters.Колонки.Добавить("indicbef1", Новый ОписаниеТипов("Число"));
		//	СтруктураДанных.meters.Колонки.Добавить("indicbef2", Новый ОписаниеТипов("Число"));
		//	СтруктураДанных.meters.Колонки.Добавить("indiccur1", Новый ОписаниеТипов("Число"));
		//	СтруктураДанных.meters.Колонки.Добавить("indiccur2", Новый ОписаниеТипов("Число"));
		//	СтруктураДанных.meters.Колонки.Добавить("kod",       Новый ОписаниеТипов("Строка"));
		//	СтруктураДанных.meters.Колонки.Добавить("name",      Новый ОписаниеТипов("Строка"));
		//	СтруктураДанных.meters.Колонки.Добавить("date",      Новый ОписаниеТипов("Дата"));
		//	
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		// Ошибка при чтении.
		СообщенияОбОшибке = "Неверный формат файла.";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СообщенияОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Загружает параметры доступа.
//
// Параметры
//  СтруктураДанных – структура, хранящая данные о параметрах доступа.
//  НастройкиОбмена - элемент справочника "Настройки обмена данными с сайтом".
//
// Примечание:
//  Описание структуры загрузки см. в функции ПолучитьДанныеИзXML().
//
Процедура ЗагрузитьПараметрыДоступа4(СтруктураДанных, НастройкиОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ТаблицаЛС.id КАК СТРОКА(100)) КАК ИдентификаторЛС,
	|	ТаблицаЛС.email
	|ПОМЕСТИТЬ втТаблицаЛС
	|ИЗ
	|	&ТаблицаЛС КАК ТаблицаЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	втТаблицаЛС.email КАК ЭлЯщик
	|ИЗ
	|	втТаблицаЛС КАК втТаблицаЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|		ПО втТаблицаЛС.ИдентификаторЛС = КВП_ЛицевыеСчета.Идентификатор";
	
	Запрос.УстановитьПараметр("ТаблицаЛС", СтруктураДанных.accs);
	
	ТаблицаЛС = Запрос.Выполнить().Выгрузить();
	
	МенеджерЗаписи = РегистрыСведений.УПЖКХ_СведенияОНаличииПараметровДоступа.СоздатьМенеджерЗаписи();
	
	Для каждого ТекСтрока из ТаблицаЛС Цикл
		
		// Элемент справочника "Лицевые счета".
		ОбъектЛС = ТекСтрока.ЛицевойСчет.ПолучитьОбъект();
		ОбъектЛС.АдресЭлектроннойПочты = ТекСтрока.ЭлЯщик;
		
		// Поиск записи в регистре.
		МенеджерЗаписи.ЛицевойСчет      = ТекСтрока.ЛицевойСчет;
		МенеджерЗаписи.НастройкаДоступа = НастройкиОбмена;
		МенеджерЗаписи.Прочитать();
		
		Попытка
			// Запись л/с.
			ОбъектЛС.Записать();
			
			// Запись регистра.
			Если МенеджерЗаписи.Выбран() Тогда
				Если НЕ МенеджерЗаписи.НаличиеПараметров Тогда
					МенеджерЗаписи.НаличиеПараметров = Истина;
					МенеджерЗаписи.Записать();
				КонецЕсли;
			Иначе
				МенеджерЗаписи.ЛицевойСчет       = ОбъектЛС.Ссылка;
				МенеджерЗаписи.НастройкаДоступа  = НастройкиОбмена;
				МенеджерЗаписи.НаличиеПараметров = Истина;
				
				МенеджерЗаписи.Записать();
			КонецЕсли;
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось записать параметры доступа для лицевого счета:" + ОбъектЛС.Наименование);
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Загружает показания счетчиков (ИПУ).
//
// Параметры
//  СтруктураДанных – структура, хранящая сведения о показаниях ИПУ.
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена данными.
//
// Примечание:
//  Описание структуры загрузки см. в функции ПолучитьДанныеИзXML().
//
Процедура ЗагрузитьПоказанияСчетчиковВБазу4(СтруктураДанных, ВариантОбмена, ПроводитьСформированныеДокументы, ИсточникДанных = "Сайт ЖКХ", ЗагружатьНулевыеПоказания = Истина)
	
	НастройкиОбменаДанными = ВариантОбмена.НастройкаОбмена;
	НастройкаСбораДанных = ?(НастройкиОбменаДанными = Неопределено, Неопределено, НастройкиОбменаДанными.НастройкаСбораДанных);
	
	ЗагружатьПоЗданиям = ?(ВариантОбмена = Неопределено, Ложь, НастройкиОбменаДанными.ЗагружатьПоказанияПУПоЗданиям);
	ЗагружатьПоУслугам = ?(ВариантОбмена = Неопределено, Ложь, НастройкиОбменаДанными.ЗагружатьПоказанияПУПоУслугам);
	
	// Запрос для определения загруженных счетчиков.
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДляЗагрузкиПоказанийСчетчиков();
	
	Если НЕ НастройкаСбораДанных = Неопределено И НЕ НастройкаСбораДанных.ВыбранныеУслуги.Количество() = 0 И Не НастройкаСбораДанных.ВыборУслуг = "Все услуги" Тогда
		Если НастройкаСбораДанных.ВыборУслуг = "Все услуги, кроме выбранных" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Счетчик.ВидУслуги В (&СписокУслуг)", "Счетчик.ВидУслуги НЕ В (&СписокУслуг)");
		КонецЕсли;
		Запрос.УстановитьПараметр("СписокУслуг", НастройкаСбораДанных.ВыбранныеУслуги.Выгрузить().ВыгрузитьКолонку("Услуга"));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Счетчик.ВидУслуги В (&СписокУслуг)", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Счетчик.ВидУслуги В (&СписокУслуг)", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата",     СтруктураДанных.filedate);
	Запрос.УстановитьПараметр("Счетчики", СтруктураДанных.meters);
	
	ТаблицаПоказаний = Запрос.Выполнить().Выгрузить();
	
	СформироватьДокументыВводаПоказаний(ТаблицаПоказаний, ЗагружатьПоЗданиям, ЗагружатьПоУслугам, ПроводитьСформированныеДокументы, ИсточникДанных, ЗагружатьНулевыеПоказания);
	
КонецПроцедуры // ЗагрузитьПоказанияСчетчиковВБазу()

// Выполняет формирование документов ввода показаний.
//
Процедура СформироватьДокументыВводаПоказаний(ТаблицаПоказаний, ЗагружатьПоЗданиям, ЗагружатьПоУслугам, ПроводитьСформированныеДокументы, ИсточникДанных, ЗагружатьНулевыеПоказания) Экспорт
	
	// Структура документа ввода показаний.
	СтруктураДляФормированияДокументов = Новый Структура("Комментарий, ЗагружатьНулевыеПоказания, ФормироватьДокументыВРазрезеЗданий, ФормироватьДокументыВРазрезеУслуг, ПроводитьСформированныеДокументы, ТаблицаПоказаний");
	
	Если ПроводитьСформированныеДокументы Тогда
		Комментарий = ?(ИсточникДанных = "Сайт ЖКХ", "#Создан автоматически при загрузке данных с сайта.", "#Создан автоматически при загрузке данных с сервиса ""ЖКХ: Личный кабинет"".");
	Иначе
		Комментарий = ?(ИсточникДанных = "Сайт ЖКХ", "#(Отладка) Создан при отладке загрузки данных с сайта. Проведение документа может привести к ошибкам в учетных данных.", "#(Отладка) Создан при отладке загрузки данных с сервиса ""ЖКХ: Личный кабинет"". Проведение документа может привести к ошибкам в учетных данных.");
	КонецЕсли;
	
	СтруктураДляФормированияДокументов.Комментарий                        = Комментарий;
	СтруктураДляФормированияДокументов.ЗагружатьНулевыеПоказания          = ЗагружатьНулевыеПоказания;
	СтруктураДляФормированияДокументов.ФормироватьДокументыВРазрезеЗданий = ЗагружатьПоЗданиям;
	СтруктураДляФормированияДокументов.ФормироватьДокументыВРазрезеУслуг  = ЗагружатьПоУслугам;
	СтруктураДляФормированияДокументов.ПроводитьСформированныеДокументы   = ПроводитьСформированныеДокументы;
	СтруктураДляФормированияДокументов.ТаблицаПоказаний                   = ТаблицаПоказаний;
	
	Документы.УПЖКХ_ВводПоказанийСчетчика.МассовоеФормированиеДокументов(СтруктураДляФормированияДокументов);
	
КонецПроцедуры // СформироватьДокументыВводаПоказаний()

// Содержит текст запроса на получение данных о счетчиках и их сопоставление с загруженными с сайта.
//
Функция ПолучитьТекстЗапросаДляЗагрузкиПоказанийСчетчиков() Экспорт
	
	// Запрос используется для обмена данными с сайтом и с мобильным приложением "ЖКХ: Личный кабинет".
	// Следует обратить внимание на то, что условие "Счетчик.ВидУслуги В (&СписокУслуг)" при
	// обмене с "ЖКХ: Личный кабинет" не должно использоваться.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Счетчики.id КАК СТРОКА(9)) КАК Код,
	|	ВЫРАЗИТЬ(Счетчики.name КАК СТРОКА(150)) КАК Наименование,
	|	Счетчики.val1 КАК ТекПоказаниеДн,
	|	Счетчики.val2 КАК ТекПоказаниеНч,
	|	Счетчики.val3 КАК ТекПоказаниеПк,
	|	Счетчики.date КАК Дата
	|ПОМЕСТИТЬ втСчетчики
	|ИЗ
	|	&Счетчики КАК Счетчики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Код КАК КодСчетчика
	|ПОМЕСТИТЬ втОбъектыСчетчиков
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&Дата,
	|			Счетчик.Код В
	|					(ВЫБРАТЬ
	|						втСчетчики.Код
	|					ИЗ
	|						втСчетчики КАК втСчетчики)
	|				И ДатаИзменения <= &Дата
	|				И Счетчик.ВидУслуги В (&СписокУслуг)) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|	И (ТИПЗНАЧЕНИЯ(КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект) = ТИП(Справочник.КВП_ЛицевыеСчета)
	|			ИЛИ ТИПЗНАЧЕНИЯ(КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект) = ТИП(Справочник.УПЖКХ_Помещения))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыСчетчиков.Объект КАК Объект,
	|	втОбъектыСчетчиков.Счетчик КАК Счетчик,
	|	втОбъектыСчетчиков.Счетчик.ВидУслуги КАК Услуга,
	|	втСчетчики.ТекПоказаниеДн КАК ДневноеПоказание,
	|	втСчетчики.ТекПоказаниеНч КАК НочноеПоказание,
	|	втСчетчики.ТекПоказаниеПк КАК ПиковоеПоказание,
	|	МАКСИМУМ(втСчетчики.Дата) КАК ДатаПоказания
	|ИЗ
	|	втОбъектыСчетчиков КАК втОбъектыСчетчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетчики КАК втСчетчики
	|		ПО втОбъектыСчетчиков.КодСчетчика = втСчетчики.Код
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыСчетчиков.Объект,
	|	втОбъектыСчетчиков.Счетчик,
	|	втОбъектыСчетчиков.Счетчик.ВидУслуги,
	|	втСчетчики.ТекПоказаниеДн,
	|	втСчетчики.ТекПоказаниеНч,
	|	втСчетчики.ТекПоказаниеПк";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Загружает сведения об оплатах.
//
// Параметры:
//  СтруктураДанных – Структура - структура, хранящая сведения об оплатах.
//  Организация - СправочникСсылка.Организации организация, в разрезе которой необходимо загружать оплаты.
// 
// Примечание:
//  Описание структуры загрузки см. в функции ПолучитьДанныеИзXML().
//
Процедура ЗагрузитьРеестрПлатежей4(СтруктураДанных, Организация, ПроводитьСформированныеДокументы, ЗагрузкаИзЖКХЛичныйКабинет = Ложь) Экспорт
	
	ТаблицаЛС = ОбработатьСведенияОбОплатахСДаннымиИзБазы(СтруктураДанных.payments, ЗагрузкаИзЖКХЛичныйКабинет);
	
	ТаблицаГруппировки = ТаблицаЛС.Скопировать();
	ТаблицаГруппировки.Свернуть("Дата, НеРаспределятьОплатуНаДобровольноеСтрахование, ОплатаНаКапРемонт, ИспользуетсяРаздельныйУчетПоКР");
	
	// Формируем максимум по 500 оплат в одном документе.
	МаксимальноеКоличествоОплатВДокументе = 500;
	
	Для Каждого СтрокаГруппировки ИЗ ТаблицаГруппировки Цикл
		
		ДатаДокумента                                 = СтрокаГруппировки.Дата;
		НеРаспределятьОплатуНаДобровольноеСтрахование = СтрокаГруппировки.НеРаспределятьОплатуНаДобровольноеСтрахование;
		ОплатаНаКапРемонт                             = СтрокаГруппировки.ОплатаНаКапРемонт;
		ИспользуетсяРаздельныйУчетПоКР                = СтрокаГруппировки.ИспользуетсяРаздельныйУчетПоКР;
		
		СтрокиТекДаты = ТаблицаЛС.НайтиСтроки(Новый Структура("Дата, НеРаспределятьОплатуНаДобровольноеСтрахование, ОплатаНаКапРемонт, ИспользуетсяРаздельныйУчетПоКР", 
															  ДатаДокумента, НеРаспределятьОплатуНаДобровольноеСтрахование, ОплатаНаКапРемонт, ИспользуетсяРаздельныйУчетПоКР));
		
		ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ВсеУслуги;
		
		Если СтрокаГруппировки.ИспользуетсяРаздельныйУчетПоКР Тогда
			Если СтрокаГруппировки.ОплатаНаКапРемонт Тогда
				ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт;
			Иначе
				ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиНеКапРемонт;
			КонецЕсли;
		КонецЕсли;
		
		ИндексТекОплаты      = 0;
		ВсегоОплат           = СтрокиТекДаты.Количество();
		КоличествоДокументов = Цел(ВсегоОплат / МаксимальноеКоличествоОплатВДокументе) + ?(ВсегоОплат % МаксимальноеКоличествоОплатВДокументе = 0, 0, 1);
		
		Для НомерДокумента = 1 по КоличествоДокументов Цикл
			
			СтруктураЗаполнения = Новый Структура;
			СтруктураЗаполнения.Вставить("Организация",        Организация);
			СтруктураЗаполнения.Вставить("Дата",               ДатаДокумента);
			СтруктураЗаполнения.Вставить("ДокументОплат",      "РегистрацияОплаты");
			СтруктураЗаполнения.Вставить("КорректировкаДолга", Ложь);
			СтруктураЗаполнения.Вставить("ВидОперации",        Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет);
			СтруктураЗаполнения.Вставить("ВариантРаспределенияОплатКапРемонт",            ВариантРаспределенияОплатКапРемонт);
			СтруктураЗаполнения.Вставить("НеРаспределятьОплатуНаДобровольноеСтрахование", НеРаспределятьОплатуНаДобровольноеСтрахование);
			
			ТаблицаОплат = ПолучитьТаблицуОплат();
			
			ТекущееКоличество = 0;
			
			Пока ТекущееКоличество < МаксимальноеКоличествоОплатВДокументе И ИндексТекОплаты < ВсегоОплат Цикл
				
				ТекОплата = СтрокиТекДаты[ИндексТекОплаты];
				
				НоваяСтрокаОплаты = ТаблицаОплат.Добавить();
				НоваяСтрокаОплаты.Объект = ТекОплата.ЛицевойСчет;
				НоваяСтрокаОплаты.Сумма  = ТекОплата.Сумма;
				
				ТекущееКоличество = ТекущееКоличество + 1;
				ИндексТекОплаты   = ИндексТекОплаты + 1;
				
			КонецЦикла;
			
			СтруктураЗаполнения.Вставить("ТаблицаОплат", ТаблицаОплат);
			
			ОбъектРегистрацияОплаты = Документы.КВП_РегистрацияОплаты.СоздатьДокумент();
			ОбъектРегистрацияОплаты.Заполнить(СтруктураЗаполнения);
			
			Если ПроводитьСформированныеДокументы Тогда
				Если ЗагрузкаИзЖКХЛичныйКабинет Тогда
					ОбъектРегистрацияОплаты.Комментарий = "#Создан автоматически при загрузке данных из мобильного приложения ""ЖКХ: Личный кабинет"".";
				Иначе
					ОбъектРегистрацияОплаты.Комментарий = "#Создан автоматически при загрузке данных с сайта.";
				КонецЕсли;
				РежимЗаписиСформированногоДокумента = РежимЗаписиДокумента.Проведение;
			Иначе
				Если ЗагрузкаИзЖКХЛичныйКабинет Тогда
					ОбъектРегистрацияОплаты.Комментарий = "#(Отладка) Создан автоматически при загрузке данных из мобильного приложения ""ЖКХ: Личный кабинет"".";
				Иначе
					ОбъектРегистрацияОплаты.Комментарий = "#(Отладка) Создан автоматически при загрузке данных с сайта.";
				КонецЕсли;
				РежимЗаписиСформированногоДокумента = РежимЗаписиДокумента.Запись;
			КонецЕсли;
			
			Если НЕ КВП_ЗаписатьОбъект(ОбъектРегистрацияОплаты, РежимЗаписиСформированногоДокумента) И РежимЗаписиСформированногоДокумента = РежимЗаписиДокумента.Проведение Тогда
				КВП_ЗаписатьОбъект(ОбъектРегистрацияОплаты, РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьРеестрПлатежей()

// Обрабатывает загруженные сведения об оплатах путем сопоставления их с данными из базы.
//
Функция ОбработатьСведенияОбОплатахСДаннымиИзБазы(ТаблицаОплат, ЗагрузкаИзЖКХЛичныйКабинет = Ложь)
	
	Запрос = Новый Запрос;
	
	Если ЗагрузкаИзЖКХЛичныйКабинет Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ТаблицаЛС.acc_id КАК СТРОКА(100)) КАК ИдентификаторЛС,
		|	КОНЕЦПЕРИОДА(ТаблицаЛС.date, ДЕНЬ) КАК date,
		|	ТаблицаЛС.sum КАК sum,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаЛС.is_overhaul
		|				И (ВЫРАЗИТЬ(ТаблицаЛС.insurance_included КАК СТРОКА(1))) = ""1""
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НеРаспределятьОплатуНаДобровольноеСтрахование,
		|	ТаблицаЛС.is_overhaul КАК ОплатаНаКапРемонт,
		|	ТаблицаЛС.ИспользуетсяРаздельныйУчетПоКР КАК ИспользуетсяРаздельныйУчетПоКР
		|ПОМЕСТИТЬ втТаблицаЛС
		|ИЗ
		|	&ТаблицаЛС КАК ТаблицаЛС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.ЛицевойСчет КАК ЛицевойСчет,
		|	втТаблицаЛС.date КАК Дата,
		|	втТаблицаЛС.sum КАК Сумма,
		|	втТаблицаЛС.НеРаспределятьОплатуНаДобровольноеСтрахование КАК НеРаспределятьОплатуНаДобровольноеСтрахование,
		|	втТаблицаЛС.ОплатаНаКапРемонт КАК ОплатаНаКапРемонт,
		|	втТаблицаЛС.ИспользуетсяРаздельныйУчетПоКР КАК ИспользуетсяРаздельныйУчетПоКР
		|ИЗ
		|	втТаблицаЛС КАК втТаблицаЛС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении КАК УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении
		|		ПО втТаблицаЛС.ИдентификаторЛС = УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.Идентификатор";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ТаблицаЛС.acc_id КАК СТРОКА(100)) КАК ИдентификаторЛС,
		|	КОНЕЦПЕРИОДА(ТаблицаЛС.date, ДЕНЬ) КАК date,
		|	ТаблицаЛС.sum КАК sum,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаЛС.is_overhaul
		|				И (ВЫРАЗИТЬ(ТаблицаЛС.insurance_included КАК СТРОКА(1))) = ""1""
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НеРаспределятьОплатуНаДобровольноеСтрахование,
		|	ТаблицаЛС.is_overhaul КАК ОплатаНаКапРемонт,
		|	ТаблицаЛС.ИспользуетсяРаздельныйУчетПоКР КАК ИспользуетсяРаздельныйУчетПоКР
		|ПОМЕСТИТЬ втТаблицаЛС
		|ИЗ
		|	&ТаблицаЛС КАК ТаблицаЛС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|	втТаблицаЛС.date КАК Дата,
		|	втТаблицаЛС.sum КАК Сумма,
		|	втТаблицаЛС.НеРаспределятьОплатуНаДобровольноеСтрахование КАК НеРаспределятьОплатуНаДобровольноеСтрахование,
		|	втТаблицаЛС.ОплатаНаКапРемонт КАК ОплатаНаКапРемонт,
		|	втТаблицаЛС.ИспользуетсяРаздельныйУчетПоКР КАК ИспользуетсяРаздельныйУчетПоКР
		|ИЗ
		|	втТаблицаЛС КАК втТаблицаЛС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|		ПО втТаблицаЛС.ИдентификаторЛС = КВП_ЛицевыеСчета.Идентификатор";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаЛС", ТаблицаОплат);
	ТаблицаЛС = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЛС;
	
КонецФункции

// Записывает параметры доступа в справочник "Лицевые счета" и
// регистр сведений "Сведения о наличии параметров доступа".
//
// Параметры:
//  ТаблицаПинкодов - таблица с параметрами доступа.
//  ОбновлятьПД - признак того, что надо заменять старые параметры доступа.
//  НастройкаДоступа - текущая настройка доступа.
//
// Возвращаемое значение:
//  Булево - удалось записать все параметры.
//
Функция ЗаписатьПараметрыДоступаНаСервереВерсия4(ТаблицаПинкодов, ОбновлятьПД, НастройкаДоступа) Экспорт
	
	КоличествоЗаписанныхПД = 0;
	
	Для Каждого СтрокаТЧ Из ТаблицаПинкодов Цикл
		// Производим запись только при условии изменения данных в строке.
		Если НЕ СтрокаТЧ.ЕстьПараметрыДоступа Тогда
			
			ОбъектЛС              = СтрокаТЧ.ЛицевойСчет.ПолучитьОбъект();
			ОбъектЛС.ЛогинДоступа = СтрокаТЧ.Логин;
			
			Если КВП_ЗаписатьОбъект(ОбъектЛС) Тогда
				КоличествоЗаписанныхПД = КоличествоЗаписанныхПД + 1;
			Иначе
				Продолжить;
			КонецЕсли;
			
			СтрокаТЧ.ДанныеЗаписаны = Истина;
			
		Иначе
			
			// Если данные не были изменены, то записывать их не нужно. Прибавляем счетчик записанных и ставим флаг.
			КоличествоЗаписанныхПД  = КоличествоЗаписанныхПД + 1;
			СтрокаТЧ.ДанныеЗаписаны = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоЗаписанныхПД = ТаблицаПинкодов.Количество() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЗаписатьПараметрыДоступаНаСервере()

// ПОДГОТОВКА ТАБЛИЦЫ НАЧИСЛЕНИЯ К ВЫГРУЗКЕ

// Формирует таблицу услуг без начислений для основной квитанции.
//
Функция СформироватьТаблицуУслугБезНачисленийКвитанцияОсновная(СтруктураОбщихТаблиц, СтруктураНастроек) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНачисленияОбщ.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаНачисленияОбщ.ВидУслуги КАК ВидУслуги,
	|	ТаблицаНачисленияОбщ.Услуга КАК Услуга,
	|	ТаблицаНачисленияОбщ.Помещение КАК Помещение,
	|	ТаблицаНачисленияОбщ.КоличествоИПУ КАК КоличествоИПУ,
	|	ТаблицаНачисленияОбщ.КоличествоОПУ КАК КоличествоОПУ,
	|	ТаблицаНачисленияОбщ.ОДНОтноситсяКОбщемуИмуществу КАК ОДНОтноситсяКОбщемуИмуществу
	|ПОМЕСТИТЬ втТаблицаСНачислениямиПередОбработкой
	|ИЗ
	|	&ТаблицаНачисленияОбщ КАК ТаблицаНачисленияОбщ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНачСальдо.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫРАЗИТЬ(ТаблицаНачСальдо.ВидУслуги КАК Справочник.КВП_ВидыУслуг) КАК ВидУслуги,
	|	ТаблицаНачСальдо.Услуга КАК Услуга,
	|	ТаблицаНачСальдо.НачальноеСальдоБезПени КАК НачальноеСальдоБезПени,
	|	ТаблицаНачСальдо.НачальноеСальдоПени КАК НачальноеСальдоПени,
	|	ТаблицаНачСальдо.НачальноеСальдо КАК НачальноеСальдо
	|ПОМЕСТИТЬ втТаблицаСальдо
	|ИЗ
	|	&ТаблицаНачСальдо КАК ТаблицаНачСальдо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПени.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаПени.ВидУслуги КАК ВидУслуги,
	|	ТаблицаПени.Услуга КАК Услуга,
	|	ТаблицаПени.СуммаПени КАК СуммаПени
	|ПОМЕСТИТЬ втТаблицаПени
	|ИЗ
	|	&ТаблицаПени КАК ТаблицаПени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплат.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаОплат.ВидУслуги КАК ВидУслуги,
	|	ТаблицаОплат.Услуга КАК Услуга,
	|	ТаблицаОплат.СуммаОплаты КАК СуммаОплаты,
	|	ТаблицаОплат.СуммаОплатыБезПени КАК СуммаОплатыБезПени,
	|	ТаблицаОплат.СуммаОплатыПени КАК СуммаОплатыПени,
	|	ТаблицаОплат.СуммаОплатыОстаткаПоРассрочке КАК СуммаОплатыОстаткаПоРассрочке
	|ПОМЕСТИТЬ втТаблицаОплат
	|ИЗ
	|	&ТаблицаОплат КАК ТаблицаОплат
	|ГДЕ
	|	НЕ(&ВестиУчетНачисленийПоДобровольномуСтрахованию
	|				И ТаблицаОплат.Услуга = &УслугаДобровольногоСтрахования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаСНачислениямиПередОбработкой.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаСНачислениямиПередОбработкой.ВидУслуги КАК ВидУслуги,
	|	втТаблицаСНачислениямиПередОбработкой.Услуга КАК Услуга,
	|	втТаблицаСНачислениямиПередОбработкой.Помещение КАК Помещение,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА &УчитыватьПостановление1498
	|					И втТаблицаСНачислениямиПередОбработкой.ОДНОтноситсяКОбщемуИмуществу ЕСТЬ НЕ NULL 
	|					И втТаблицаСНачислениямиПередОбработкой.ОДНОтноситсяКОбщемуИмуществу
	|					И втТаблицаСНачислениямиПередОбработкой.КоличествоИПУ = 0
	|					И втТаблицаСНачислениямиПередОбработкой.КоличествоОПУ = 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498
	|ПОМЕСТИТЬ втТаблицаСНачислениями
	|ИЗ
	|	втТаблицаСНачислениямиПередОбработкой КАК втТаблицаСНачислениямиПередОбработкой
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаСНачислениямиПередОбработкой.ЛицевойСчет,
	|	втТаблицаСНачислениямиПередОбработкой.ВидУслуги,
	|	втТаблицаСНачислениямиПередОбработкой.Услуга,
	|	втТаблицаСНачислениямиПередОбработкой.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаСальдо.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаСНачислениями.Помещение КАК Помещение,
	|	втТаблицаСальдо.ВидУслуги КАК ВидУслуги,
	|	втТаблицаСальдо.Услуга КАК Услуга,
	|	втТаблицаСНачислениями.ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498 КАК ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498,
	|	СУММА(ВЫБОР
	|			КОГДА &УчитыватьПени
	|					И НЕ &ПечататьОтдельнуюКвитанциюПоПеням
	|				ТОГДА втТаблицаСальдо.НачальноеСальдо
	|			ИНАЧЕ втТаблицаСальдо.НачальноеСальдоБезПени
	|		КОНЕЦ) КАК НачальноеСальдоКвитанцияОсновная,
	|	СУММА(ВЫБОР
	|			КОГДА &УчитыватьПени
	|					И &ПечататьОтдельнуюКвитанциюПоПеням
	|				ТОГДА втТаблицаСальдо.НачальноеСальдоПени
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачальноеСальдоКвитанцияПени
	|ПОМЕСТИТЬ втТаблицаСальдоБезНачислений
	|ИЗ
	|	втТаблицаСальдо КАК втТаблицаСальдо
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСНачислениями КАК втТаблицаСНачислениями
	|		ПО втТаблицаСальдо.ЛицевойСчет = втТаблицаСНачислениями.ЛицевойСчет
	|			И втТаблицаСальдо.ВидУслуги = втТаблицаСНачислениями.ВидУслуги
	|			И втТаблицаСальдо.Услуга = втТаблицаСНачислениями.Услуга
	|ГДЕ
	|	(втТаблицаСНачислениями.ВидУслуги ЕСТЬ NULL
	|			ИЛИ втТаблицаСНачислениями.ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498)
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаСальдо.ЛицевойСчет,
	|	втТаблицаСНачислениями.Помещение,
	|	втТаблицаСальдо.ВидУслуги,
	|	втТаблицаСальдо.Услуга,
	|	втТаблицаСНачислениями.ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаПени.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаСНачислениями.Помещение КАК Помещение,
	|	втТаблицаПени.ВидУслуги КАК ВидУслуги,
	|	втТаблицаПени.Услуга КАК Услуга,
	|	втТаблицаСНачислениями.ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498 КАК ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498,
	|	СУММА(ВЫБОР
	|			КОГДА &УчитыватьПени
	|					И НЕ &ПечататьОтдельнуюКвитанциюПоПеням
	|				ТОГДА втТаблицаПени.СуммаПени
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПениКвитанцияОсновная,
	|	СУММА(ВЫБОР
	|			КОГДА &УчитыватьПени
	|					И &ПечататьОтдельнуюКвитанциюПоПеням
	|				ТОГДА втТаблицаПени.СуммаПени
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПениКвитанцияПени
	|ПОМЕСТИТЬ втТаблицаПениБезНачислений
	|ИЗ
	|	втТаблицаПени КАК втТаблицаПени
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСНачислениями КАК втТаблицаСНачислениями
	|		ПО втТаблицаПени.ЛицевойСчет = втТаблицаСНачислениями.ЛицевойСчет
	|			И втТаблицаПени.ВидУслуги = втТаблицаСНачислениями.ВидУслуги
	|			И втТаблицаПени.Услуга = втТаблицаСНачислениями.Услуга
	|ГДЕ
	|	(втТаблицаСНачислениями.ВидУслуги ЕСТЬ NULL
	|			ИЛИ втТаблицаСНачислениями.ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498)
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаПени.ЛицевойСчет,
	|	втТаблицаСНачислениями.Помещение,
	|	втТаблицаПени.ВидУслуги,
	|	втТаблицаПени.Услуга,
	|	втТаблицаСНачислениями.ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаОплат.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаСНачислениями.Помещение КАК Помещение,
	|	втТаблицаОплат.ВидУслуги КАК ВидУслуги,
	|	втТаблицаОплат.Услуга КАК Услуга,
	|	втТаблицаСНачислениями.ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498 КАК ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498,
	|	СУММА(ВЫБОР
	|			КОГДА &УчитыватьПени
	|					И НЕ &ПечататьОтдельнуюКвитанциюПоПеням
	|				ТОГДА втТаблицаОплат.СуммаОплаты
	|			ИНАЧЕ втТаблицаОплат.СуммаОплатыБезПени
	|		КОНЕЦ) КАК СуммаОплатыКвитанцияОсновная,
	|	СУММА(ВЫБОР
	|			КОГДА &УчитыватьПени
	|					И &ПечататьОтдельнуюКвитанциюПоПеням
	|				ТОГДА втТаблицаОплат.СуммаОплатыПени
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплатыКвитанцияПени
	|ПОМЕСТИТЬ втТаблицаОплатБезНачислений
	|ИЗ
	|	втТаблицаОплат КАК втТаблицаОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСНачислениями КАК втТаблицаСНачислениями
	|		ПО втТаблицаОплат.ЛицевойСчет = втТаблицаСНачислениями.ЛицевойСчет
	|			И втТаблицаОплат.ВидУслуги = втТаблицаСНачислениями.ВидУслуги
	|			И втТаблицаОплат.Услуга = втТаблицаСНачислениями.Услуга
	|ГДЕ
	|	(втТаблицаСНачислениями.ВидУслуги ЕСТЬ NULL
	|			ИЛИ втТаблицаСНачислениями.ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498)
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаОплат.ЛицевойСчет,
	|	втТаблицаСНачислениями.Помещение,
	|	втТаблицаОплат.ВидУслуги,
	|	втТаблицаОплат.Услуга,
	|	втТаблицаСНачислениями.ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаСальдоБезНачислений.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаСальдоБезНачислений.Помещение КАК Помещение,
	|	втТаблицаСальдоБезНачислений.ВидУслуги КАК ВидУслуги,
	|	втТаблицаСальдоБезНачислений.Услуга КАК Услуга,
	|	втТаблицаСальдоБезНачислений.ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498 КАК ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498
	|ПОМЕСТИТЬ втВсеЛСиВидыУслуг
	|ИЗ
	|	втТаблицаСальдоБезНачислений КАК втТаблицаСальдоБезНачислений
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втТаблицаПениБезНачислений.ЛицевойСчет,
	|	втТаблицаПениБезНачислений.Помещение,
	|	втТаблицаПениБезНачислений.ВидУслуги,
	|	втТаблицаПениБезНачислений.Услуга,
	|	втТаблицаПениБезНачислений.ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498
	|ИЗ
	|	втТаблицаПениБезНачислений КАК втТаблицаПениБезНачислений
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втТаблицаОплатБезНачислений.ЛицевойСчет,
	|	втТаблицаОплатБезНачислений.Помещение,
	|	втТаблицаОплатБезНачислений.ВидУслуги,
	|	втТаблицаОплатБезНачислений.Услуга,
	|	втТаблицаОплатБезНачислений.ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498
	|ИЗ
	|	втТаблицаОплатБезНачислений КАК втТаблицаОплатБезНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеЛСиВидыУслуг.ЛицевойСчет КАК ЛицевойСчет,
	|	втВсеЛСиВидыУслуг.Помещение КАК Помещение,
	|	втВсеЛСиВидыУслуг.ВидУслуги КАК ВидУслуги,
	|	втВсеЛСиВидыУслуг.ВидУслуги.Наименование КАК ВидУслугиНаименование,
	|	втВсеЛСиВидыУслуг.ВидУслуги.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	втВсеЛСиВидыУслуг.Услуга КАК Услуга,
	|	ЕСТЬNULL(втВсеЛСиВидыУслуг.ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498, ЛОЖЬ) КАК ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498,
	|	ВЫБОР
	|		КОГДА втВсеЛСиВидыУслуг.ВидУслуги.СпособВыводаВКвитанциях = ""Не сворачивать""
	|				ИЛИ втВсеЛСиВидыУслуг.ВидУслуги.СпособВыводаВКвитанциях = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СворачиватьПоВидуУслуги,
	|	СУММА(ЕСТЬNULL(втТаблицаСальдоБезНачислений.НачальноеСальдоКвитанцияОсновная, 0)) КАК НачальноеСальдоКвитанцияОсновная,
	|	СУММА(ЕСТЬNULL(втТаблицаСальдоБезНачислений.НачальноеСальдоКвитанцияПени, 0)) КАК НачальноеСальдоКвитанцияПени,
	|	СУММА(ЕСТЬNULL(втТаблицаПениБезНачислений.СуммаПениКвитанцияОсновная, 0)) КАК СуммаПениКвитанцияОсновная,
	|	СУММА(ЕСТЬNULL(втТаблицаПениБезНачислений.СуммаПениКвитанцияПени, 0)) КАК СуммаПениКвитанцияПени,
	|	СУММА(ЕСТЬNULL(втТаблицаОплатБезНачислений.СуммаОплатыКвитанцияОсновная, 0)) КАК СуммаОплатыКвитанцияОсновная,
	|	СУММА(ЕСТЬNULL(втТаблицаОплатБезНачислений.СуммаОплатыКвитанцияПени, 0)) КАК СуммаОплатыКвитанцияПени
	|ИЗ
	|	втВсеЛСиВидыУслуг КАК втВсеЛСиВидыУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСальдоБезНачислений КАК втТаблицаСальдоБезНачислений
	|		ПО втВсеЛСиВидыУслуг.ЛицевойСчет = втТаблицаСальдоБезНачислений.ЛицевойСчет
	|			И втВсеЛСиВидыУслуг.ВидУслуги = втТаблицаСальдоБезНачислений.ВидУслуги
	|			И втВсеЛСиВидыУслуг.Услуга = втТаблицаСальдоБезНачислений.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаПениБезНачислений КАК втТаблицаПениБезНачислений
	|		ПО втВсеЛСиВидыУслуг.ЛицевойСчет = втТаблицаПениБезНачислений.ЛицевойСчет
	|			И втВсеЛСиВидыУслуг.ВидУслуги = втТаблицаПениБезНачислений.ВидУслуги
	|			И втВсеЛСиВидыУслуг.Услуга = втТаблицаПениБезНачислений.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаОплатБезНачислений КАК втТаблицаОплатБезНачислений
	|		ПО втВсеЛСиВидыУслуг.ЛицевойСчет = втТаблицаОплатБезНачислений.ЛицевойСчет
	|			И втВсеЛСиВидыУслуг.ВидУслуги = втТаблицаОплатБезНачислений.ВидУслуги
	|			И втВсеЛСиВидыУслуг.Услуга = втТаблицаОплатБезНачислений.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеЛСиВидыУслуг.ЛицевойСчет,
	|	втВсеЛСиВидыУслуг.Помещение,
	|	втВсеЛСиВидыУслуг.ВидУслуги,
	|	втВсеЛСиВидыУслуг.ВидУслуги.Наименование,
	|	втВсеЛСиВидыУслуг.ВидУслуги.ЕдиницаИзмерения.Наименование,
	|	втВсеЛСиВидыУслуг.Услуга,
	|	ЕСТЬNULL(втВсеЛСиВидыУслуг.ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498, ЛОЖЬ),
	|	ВЫБОР
	|		КОГДА втВсеЛСиВидыУслуг.ВидУслуги.СпособВыводаВКвитанциях = ""Не сворачивать""
	|				ИЛИ втВсеЛСиВидыУслуг.ВидУслуги.СпособВыводаВКвитанциях = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втВсеЛСиВидыУслуг.Услуга КАК Услуга,
	|	втВсеЛСиВидыУслуг.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	втВсеЛСиВидыУслуг КАК втВсеЛСиВидыУслуг
	|ИТОГИ ПО
	|	Услуга";
	
	Запрос.УстановитьПараметр("ТаблицаНачисленияОбщ",                          СтруктураОбщихТаблиц.ТаблицаНачисленияОбщ);
	Запрос.УстановитьПараметр("ТаблицаНачСальдо",                              СтруктураОбщихТаблиц.ТаблицаСальдоОбщПоВидамУслуг);
	Запрос.УстановитьПараметр("ТаблицаПени",                                   СтруктураОбщихТаблиц.ТаблицаПениОбщПоВидамУслуг);
	Запрос.УстановитьПараметр("ТаблицаОплат",                                  СтруктураОбщихТаблиц.ТаблицаОплатОбщПоВидамУслуг);
	Запрос.УстановитьПараметр("УчитыватьПени",                                 СтруктураНастроек.УчитыватьПени);
	Запрос.УстановитьПараметр("УчитыватьПостановление1498",                    СтруктураНастроек.ПериодПросмотра >= Дата(2017, 01, 01));
	Запрос.УстановитьПараметр("ПечататьОтдельнуюКвитанциюПоПеням",             СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням);
	Запрос.УстановитьПараметр("ВестиУчетНачисленийПоДобровольномуСтрахованию", СтруктураНастроек.ВестиУчетНачисленийПоДобровольномуСтрахованию);
	Запрос.УстановитьПараметр("УслугаДобровольногоСтрахования",                СтруктураНастроек.УслугаДобровольногоСтрахования);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаУслугБезНачислений    = РезультатыЗапроса[9].Выгрузить();
	ДеревоЛицевыхСчетовПоУслугам = РезультатыЗапроса[10].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТаблицаУслугБезНачислений.Индексы.Добавить("ЛицевойСчет");
	
	ДополнитьТаблицуУслугБезНачисленийСведениямиОТарифахУслуг(ТаблицаУслугБезНачислений, ДеревоЛицевыхСчетовПоУслугам, СтруктураНастроек);
	
	Возврат ТаблицаУслугБезНачислений;
	
КонецФункции

// Дополняет таблицу услуг без начислений сведениями о тарифах услуг.
//
Процедура ДополнитьТаблицуУслугБезНачисленийСведениямиОТарифахУслуг(ТаблицаУслугБезНачислений, ДеревоЛицевыхСчетовПоУслугам, СтруктураНастроек)
	
	// Добавляем колонку тарифа и создаем индекс, по которому будем осуществлять отборы данных.
	ТаблицаУслугБезНачислений.Колонки.Добавить("Тариф", Новый ОписаниеТипов("Строка"));
	ТаблицаУслугБезНачислений.Индексы.Добавить("Услуга, ЛицевойСчет");
	
	СписокЛицевыхСчетов = Новый СписокЗначений;
	СтруктураОтбора     = Новый Структура("Услуга, ЛицевойСчет");
	
	// Для каждой услуги получаем тарифы, назначенные на лицевые счета.
	Для каждого ТекУслуга из ДеревоЛицевыхСчетовПоУслугам.Строки Цикл
		
		СписокЛицевыхСчетов.ЗагрузитьЗначения(ТекУслуга.Строки.ВыгрузитьКолонку("ЛицевойСчет"));
		
		Услуга = ТекУслуга.Услуга;
		
		// Получаем таблицу тарифов по услуге.
		ТаблицаТарифов = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(СтруктураНастроек.ПериодПросмотра), СтруктураНастроек.Организация, Услуга, СписокЛицевыхСчетов);
		
		// Заполняем значение колонки "Тариф" таблицы услуг без начислений.
		СтруктураОтбора.Услуга = Услуга;
		
		Для каждого ТекТариф из ТаблицаТарифов Цикл
			
			СтруктураОтбора.ЛицевойСчет = ТекТариф.Объект;
			СтрокиЛС                    = ТаблицаУслугБезНачислений.НайтиСтроки(СтруктураОтбора);
			
			Для каждого ТекСтрокаЛС из СтрокиЛС Цикл
				
				Если ТекТариф.Тариф = 0 Тогда
					ТекСтрокаЛС.Тариф = "X";
				Иначе
					ТекСтрокаЛС.Тариф = Строка(ТекТариф.Тариф);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицу услуг без начислений для квитанции по пеням.
//
Функция СформироватьТаблицуУслугБезНачисленийКвитанцияПени(СтруктураОбщихТаблиц, СтруктураНастроек) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНачисленияОбщ.ЛицевойСчет,
	|	ТаблицаНачисленияОбщ.ВидУслуги
	|ПОМЕСТИТЬ втТаблицаСНачислениями
	|ИЗ
	|	&ТаблицаНачисленияОбщ КАК ТаблицаНачисленияОбщ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНачСальдо.ЛицевойСчет,
	|	ТаблицаНачСальдо.ВидУслуги,
	|	ТаблицаНачСальдо.НачальноеСальдоБезПени,
	|	ТаблицаНачСальдо.НачальноеСальдоПени,
	|	ТаблицаНачСальдо.НачальноеСальдо
	|ПОМЕСТИТЬ втТаблицаСальдо
	|ИЗ
	|	&ТаблицаНачСальдо КАК ТаблицаНачСальдо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплат.ЛицевойСчет,
	|	ТаблицаОплат.ВидУслуги,
	|	ТаблицаОплат.СуммаОплаты,
	|	ТаблицаОплат.СуммаОплатыБезПени,
	|	ТаблицаОплат.СуммаОплатыПени,
	|	ТаблицаОплат.СуммаОплатыОстаткаПоРассрочке
	|ПОМЕСТИТЬ втТаблицаОплат
	|ИЗ
	|	&ТаблицаОплат КАК ТаблицаОплат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаСальдо.ЛицевойСчет,
	|	втТаблицаСальдо.ВидУслуги,
	|	ВЫБОР
	|		КОГДА &УчитыватьПени
	|				И НЕ &ПечататьОтдельнуюКвитанциюПоПеням
	|			ТОГДА втТаблицаСальдо.НачальноеСальдо
	|		ИНАЧЕ втТаблицаСальдо.НачальноеСальдоБезПени
	|	КОНЕЦ КАК НачальноеСальдоКвитанцияОсновная,
	|	ВЫБОР
	|		КОГДА &УчитыватьПени
	|				И &ПечататьОтдельнуюКвитанциюПоПеням
	|			ТОГДА втТаблицаСальдо.НачальноеСальдоПени
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальноеСальдоКвитанцияПени
	|ПОМЕСТИТЬ втТаблицаСальдоБезНачислений
	|ИЗ
	|	втТаблицаСальдо КАК втТаблицаСальдо
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСНачислениями КАК втТаблицаСНачислениями
	|		ПО втТаблицаСальдо.ЛицевойСчет = втТаблицаСНачислениями.ЛицевойСчет
	|			И втТаблицаСальдо.ВидУслуги = втТаблицаСНачислениями.ВидУслуги
	|ГДЕ
	|	втТаблицаСНачислениями.ВидУслуги ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаОплат.ЛицевойСчет,
	|	втТаблицаОплат.ВидУслуги,
	|	ВЫБОР
	|		КОГДА &УчитыватьПени
	|				И НЕ &ПечататьОтдельнуюКвитанциюПоПеням
	|			ТОГДА втТаблицаОплат.СуммаОплаты
	|		ИНАЧЕ втТаблицаОплат.СуммаОплатыБезПени
	|	КОНЕЦ КАК СуммаОплатыКвитанцияОсновная,
	|	ВЫБОР
	|		КОГДА &УчитыватьПени
	|				И &ПечататьОтдельнуюКвитанциюПоПеням
	|			ТОГДА втТаблицаОплат.СуммаОплатыПени
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОплатыКвитанцияПени
	|ПОМЕСТИТЬ втТаблицаОплатБезНачислений
	|ИЗ
	|	втТаблицаОплат КАК втТаблицаОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСНачислениями КАК втТаблицаСНачислениями
	|		ПО втТаблицаОплат.ЛицевойСчет = втТаблицаСНачислениями.ЛицевойСчет
	|			И втТаблицаОплат.ВидУслуги = втТаблицаСНачислениями.ВидУслуги
	|ГДЕ
	|	втТаблицаСНачислениями.ВидУслуги ЕСТЬ NULL 
	|	И втТаблицаОплат.СуммаОплатыОстаткаПоРассрочке = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаСальдоБезНачислений.ЛицевойСчет,
	|	втТаблицаСальдоБезНачислений.ВидУслуги
	|ПОМЕСТИТЬ втВсеЛСиВидыУслуг
	|ИЗ
	|	втТаблицаСальдоБезНачислений КАК втТаблицаСальдоБезНачислений
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втТаблицаОплатБезНачислений.ЛицевойСчет,
	|	втТаблицаОплатБезНачислений.ВидУслуги
	|ИЗ
	|	втТаблицаОплатБезНачислений КАК втТаблицаОплатБезНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеЛСиВидыУслуг.ЛицевойСчет,
	|	втВсеЛСиВидыУслуг.ВидУслуги,
	|	втВсеЛСиВидыУслуг.ВидУслуги.Наименование КАК ВидУслугиНаименование,
	|	втВсеЛСиВидыУслуг.ВидУслуги.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	СУММА(ЕСТЬNULL(втТаблицаСальдоБезНачислений.НачальноеСальдоКвитанцияОсновная, 0)) КАК НачальноеСальдоКвитанцияОсновная,
	|	СУММА(ЕСТЬNULL(втТаблицаСальдоБезНачислений.НачальноеСальдоКвитанцияПени, 0)) КАК НачальноеСальдоКвитанцияПени,
	|	СУММА(ЕСТЬNULL(втТаблицаОплатБезНачислений.СуммаОплатыКвитанцияОсновная, 0)) КАК СуммаОплатыКвитанцияОсновная,
	|	СУММА(ЕСТЬNULL(втТаблицаОплатБезНачислений.СуммаОплатыКвитанцияПени, 0)) КАК СуммаОплатыКвитанцияПени
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втВсеЛСиВидыУслуг КАК втВсеЛСиВидыУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСальдоБезНачислений КАК втТаблицаСальдоБезНачислений
	|		ПО втВсеЛСиВидыУслуг.ЛицевойСчет = втТаблицаСальдоБезНачислений.ЛицевойСчет
	|			И втВсеЛСиВидыУслуг.ВидУслуги = втТаблицаСальдоБезНачислений.ВидУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаОплатБезНачислений КАК втТаблицаОплатБезНачислений
	|		ПО втВсеЛСиВидыУслуг.ЛицевойСчет = втТаблицаОплатБезНачислений.ЛицевойСчет
	|			И втВсеЛСиВидыУслуг.ВидУслуги = втТаблицаОплатБезНачислений.ВидУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеЛСиВидыУслуг.ЛицевойСчет,
	|	втВсеЛСиВидыУслуг.ВидУслуги,
	|	втВсеЛСиВидыУслуг.ВидУслуги.Наименование,
	|	втВсеЛСиВидыУслуг.ВидУслуги.ЕдиницаИзмерения.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.ЛицевойСчет,
	|	втИтоговая.ВидУслуги,
	|	втИтоговая.ВидУслугиНаименование,
	|	втИтоговая.ЕдиницаИзмеренияНаименование,
	|	втИтоговая.НачальноеСальдоКвитанцияОсновная,
	|	втИтоговая.НачальноеСальдоКвитанцияПени,
	|	втИтоговая.СуммаОплатыКвитанцияОсновная,
	|	втИтоговая.СуммаОплатыКвитанцияПени
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|ГДЕ
	|	НЕ втИтоговая.СуммаОплатыКвитанцияПени = 0";
	
	Запрос.УстановитьПараметр("ТаблицаНачисленияОбщ", СтруктураОбщихТаблиц.ТаблицаПениНачисленияОбщ);
	Запрос.УстановитьПараметр("ТаблицаНачСальдо",     СтруктураОбщихТаблиц.ТаблицаПениСальдоОбщПоВидамУслуг);
	Запрос.УстановитьПараметр("ТаблицаПени",          СтруктураОбщихТаблиц.ТаблицаПениОбщПоВидамУслуг);
	Запрос.УстановитьПараметр("ТаблицаОплат",         СтруктураОбщихТаблиц.ТаблицаПениОплатОбщПоВидамУслуг);
	Запрос.УстановитьПараметр("УчитыватьПени",        СтруктураНастроек.УчитыватьПени);
	Запрос.УстановитьПараметр("ПечататьОтдельнуюКвитанциюПоПеням", СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("ЛицевойСчет");
	
	Возврат Результат;
	
КонецФункции

// Текущие данные по услугам без начислений.

// Дополняет данные по услугам.
//
Процедура ДополнитьТекущиеДанныеПоУслугамБезНачислений(ТекущиеДанные, СтруктураОбщихТаблиц, ОбщиеДанные)
	
	ТаблицаНачисления            = ТекущиеДанные.ТаблицаНачисления;
	ТаблицаУслугБезНачисленийОбщ = СтруктураОбщихТаблиц.ТаблицаУслугБезНачислений;
	ТаблицаУслугБезНачислений    = ТаблицаУслугБезНачисленийОбщ.Скопировать(ТаблицаУслугБезНачисленийОбщ.НайтиСтроки(Новый Структура("ЛицевойСчет", ОбщиеДанные.ЛицевойСчет)));
	
	МассивСтрокДляУдаления = Новый Массив;
	
	// Если услуги есть в таблице начислений, то в таблицу без начислений они попадать не должны.
	// При этом, если услуги подлежат разделению на отдельные строки по инд. потреблению и ОДН
	// по постановлению №1498 от 26.12.2016, и начислений по ИПУ нет, то в таблицу без начислений
	// услуги попасть должны.
	Для каждого ТекСтрока из ТаблицаУслугБезНачислений Цикл
		
		// Строки услуг по постановлению проверяем на отсутствие начислений по ИПУ при наличии
		// начислений по ОДН. Такие услуги оставляем в таблице без начислений.
		Если НЕ ТекСтрока.ДобавитьСтрокуВУслугиБезНачисленийПоПостановлению1498 И НЕ ТаблицаНачисления.Найти(ТекСтрока.Услуга, "Услуга") = Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем повторяющиеся в таблице начислений услуги из таблицы услуг без начислений.
	Для каждого ТекСтрока из МассивСтрокДляУдаления Цикл
		ТаблицаУслугБезНачислений.Удалить(ТекСтрока);
	КонецЦикла;
	
	ТекущиеДанные.Вставить("ТаблицаУслугБезНачислений", ТаблицаУслугБезНачислений.Скопировать(ТаблицаУслугБезНачислений.НайтиСтроки(Новый Структура("ЛицевойСчет", ОбщиеДанные.ЛицевойСчет))));
	
КонецПроцедуры

// Дополняет данные по пеням.
//
Процедура ДополнитьТекущиеДанныеПоПениБезНачислений(ТекущиеДанные, СтруктураОбщихТаблиц, ОбщиеДанные)
	
	ТаблицаПениБезНачислений = СтруктураОбщихТаблиц.ТаблицаПениБезНачислений;
	
	ТекущиеДанные.Вставить("ТаблицаПениБезНачислений", ТаблицаПениБезНачислений.Скопировать(ТаблицаПениБезНачислений.НайтиСтроки(Новый Структура("ЛицевойСчет", ОбщиеДанные.ЛицевойСчет))));
	
КонецПроцедуры

// Подготавливает данные об услугах без начислений.
//
Процедура ПодготовитьДанныеОбУслугахБезНачислений(ТаблицаУслугБезНачислений, ТекущиеДанные, СтруктураНастроек)
	
	ТаблицаУслугБезНачислений.Очистить();
	
	ДанныеОбУслугахБезНачислений   = ТекущиеДанные.ТаблицаУслугБезНачислений;
	ТаблицаСчетчиков               = ТекущиеДанные.ТаблицаСчетчиков;
	
	Если СтруктураНастроек.Свойство("ТаблицаУслугВыгружатьПоказания") Тогда
		ТаблицаУслугВыгружатьПоказания = СтруктураНастроек.ТаблицаУслугВыгружатьПоказания;
	Иначе
		ТаблицаУслугВыгружатьПоказания = Неопределено;
	КонецЕсли;
	
	// Добавим услуги с пустыми долгами для вывода счетчиков в квитанциях для МО.
	СтруктураОтбора = Новый Структура("ЛицевойСчет, Услуга");
	Для каждого ТекСчетчик из ТаблицаСчетчиков Цикл
		
		Если ТипЗнч(ТекСчетчик.ЛицевойСчет) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекСчетчик);
			
			Если ТекущиеДанные.ТаблицаНачисления.НайтиСтроки(СтруктураОтбора) = Неопределено Тогда
				
				НайденныеСтроки = ДанныеОбУслугахБезНачислений.НайтиСтроки(СтруктураОтбора);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = ДанныеОбУслугахБезНачислений.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСчетчик);
					НоваяСтрока.НачальноеСальдоКвитанцияОсновная = 0;
					НоваяСтрока.СуммаПениКвитанцияОсновная       = 0;
					НоваяСтрока.СуммаОплатыКвитанцияОсновная     = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	// Сворачиваем по видам услуг, если нужно.
	СворачиваемыеВидыУслуг = ДанныеОбУслугахБезНачислений.НайтиСтроки(Новый Структура("СворачиватьПоВидуУслуги", Истина));
	ТаблицаСворачиваемых   = ДанныеОбУслугахБезНачислений.Скопировать(СворачиваемыеВидыУслуг, "ЛицевойСчет, Помещение, ВидУслуги, ВидУслугиНаименование, ЕдиницаИзмеренияНаименование");
	ТаблицаСворачиваемых.Свернуть("ЛицевойСчет, Помещение, ВидУслуги, ВидУслугиНаименование, ЕдиницаИзмеренияНаименование");
	
	СтруктураОтбора = Новый Структура("ЛицевойСчет, ВидУслуги");
	
	Для каждого ТекСтрока из ТаблицаСворачиваемых Цикл
		
		МассивУслуг = Новый Массив;
		
		СтруктураОтбора.ЛицевойСчет = ТекСтрока.ЛицевойСчет;
		СтруктураОтбора.ВидУслуги   = ТекСтрока.ВидУслуги;
		СтрокиСворачиваемых         = ДанныеОбУслугахБезНачислений.НайтиСтроки(СтруктураОтбора);
		
		НачСальдо = 0;
		КонСальдо = 0;
		Пени      = 0;
		Оплаты    = 0;
		
		Для каждого ТекСворачиваемая из СтрокиСворачиваемых Цикл
			
			НачСальдо = НачСальдо + ТекСворачиваемая.НачальноеСальдоКвитанцияОсновная;
			КонСальдо = КонСальдо + ТекСворачиваемая.НачальноеСальдоКвитанцияОсновная + ТекСворачиваемая.СуммаПениКвитанцияОсновная - ТекСворачиваемая.СуммаОплатыКвитанцияОсновная;
			Пени      = Пени      + ТекСворачиваемая.СуммаПениКвитанцияОсновная;
			Оплаты    = Оплаты    + ТекСворачиваемая.СуммаОплатыКвитанцияОсновная;
			
			МассивУслуг.Добавить(ТекСворачиваемая.Услуга);
			
		КонецЦикла;
		
		НоваяСтрока = ТаблицаУслугБезНачислений.Добавить();
		НоваяСтрока.name      = ТекСтрока.ВидУслугиНаименование;
		НоваяСтрока.units     = ТекСтрока.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.debt_beg  = XMLСтрока(НачСальдо);
		НоваяСтрока.debt_end  = XMLСтрока(КонСальдо);
		НоваяСтрока.peni      = XMLСтрока(Пени);
		НоваяСтрока.sum_payed = XMLСтрока(Оплаты);
		НоваяСтрока.tarif     = "X";
		
		ЗаполнитьСведенияОбИПУ(НоваяСтрока, ТаблицаСчетчиков, ТекСтрока.ЛицевойСчет, ТекСтрока.Помещение, МассивУслуг);
		
	КонецЦикла;
	
	// Несворачиваемые услуги.
	НесворачиваемыеВидыУслуг = ДанныеОбУслугахБезНачислений.НайтиСтроки(Новый Структура("СворачиватьПоВидуУслуги", Ложь));
	
	// Добавим услуги без начислений за период выгрузки.
	Для каждого ТекСтрока из НесворачиваемыеВидыУслуг Цикл
		
		НоваяСтрока = ТаблицаУслугБезНачислений.Добавить();
		НоваяСтрока.name      = ТекСтрока.ВидУслугиНаименование;
		НоваяСтрока.units     = ТекСтрока.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.debt_beg  = XMLСтрока(ТекСтрока.НачальноеСальдоКвитанцияОсновная);
		НоваяСтрока.debt_end  = XMLСтрока(ТекСтрока.НачальноеСальдоКвитанцияОсновная + ТекСтрока.СуммаПениКвитанцияОсновная - ТекСтрока.СуммаОплатыКвитанцияОсновная);
		НоваяСтрока.peni      = XMLСтрока(ТекСтрока.СуммаПениКвитанцияОсновная);
		НоваяСтрока.sum_payed = XMLСтрока(ТекСтрока.СуммаОплатыКвитанцияОсновная);
		НоваяСтрока.tarif     = ТекСтрока.Тариф;
		
		Если НЕ ТаблицаУслугВыгружатьПоказания = Неопределено И ТаблицаУслугВыгружатьПоказания.Найти(ТекСтрока.Услуга, "Услуга") = Неопределено Тогда
			НоваяСтрока.meter = Новый Массив;
		Иначе
			ЗаполнитьСведенияОбИПУ(НоваяСтрока, ТаблицаСчетчиков, ТекСтрока.ЛицевойСчет, ТекСтрока.Помещение, ТекСтрока.Услуга);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

// Подготавливает данные о пенях без начислений.
//
Процедура ПодготовитьДанныеОПеняхБезНачислений(ТаблицаУслугБезНачислений, ДанныеОбУслугахБезНачислений)
	
	ТаблицаУслугБезНачислений.Очистить();
	
	Для каждого ТекСтрока из ДанныеОбУслугахБезНачислений Цикл
		
		НоваяСтрока = ТаблицаУслугБезНачислений.Добавить();
		НоваяСтрока.name      = ТекСтрока.ВидУслугиНаименование;
		НоваяСтрока.units     = ТекСтрока.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.debt_beg  = XMLСтрока(ТекСтрока.НачальноеСальдоКвитанцияОсновная);
		НоваяСтрока.debt_end  = XMLСтрока(ТекСтрока.НачальноеСальдоКвитанцияОсновная - ТекСтрока.СуммаОплатыКвитанцияПени);
		НоваяСтрока.sum_payed = XMLСтрока(ТекСтрока.СуммаОплатыКвитанцияПени);
		
	КонецЦикла
	
КонецПроцедуры

// Подготавливает данные об оплатам по пеням.
//
Процедура ДополнитьТекущиеДанныеОплатамиПоПени(ТекущиеДанные, СтруктураОбщихТаблиц, ОбщиеДанные)
	
	ТаблицаОплатПоПени = СтруктураОбщихТаблиц.ТаблицаПениОплатОбщПоВидамУслуг;
	
	ТекущиеДанные.Вставить("ТаблицаОплатПоПени", ТаблицаОплатПоПени.Скопировать(ТаблицаОплатПоПени.НайтиСтроки(Новый Структура("ЛицевойСчет", ОбщиеДанные.ЛицевойСчет))));
	
	// Подготовка к передаче в запрос.
	ТекущиеДанные.ТаблицаОплатПоПени.Колонки.Добавить("Оплачено", Новый ОписаниеТипов("Число"));
	
	Для каждого ТекСтрока из ТекущиеДанные.ТаблицаОплатПоПени Цикл
		
		ТекСтрока.Оплачено = -ТекСтрока.СуммаОплаты;
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает данные о сальдо по пеням.
//
Процедура ДополнитьТекущиеДанныеСальдоПоПени(ТекущиеДанные, СтруктураОбщихТаблиц, ОбщиеДанные)
	
	ТаблицаСальдоПоПени = СтруктураОбщихТаблиц.ТаблицаПениСальдоОбщПоВидамУслуг;
	
	ТекущиеДанные.Вставить("ТаблицаСальдоПоПени", ТаблицаСальдоПоПени.Скопировать(ТаблицаСальдоПоПени.НайтиСтроки(Новый Структура("ЛицевойСчет", ОбщиеДанные.ЛицевойСчет))));
	
КонецПроцедуры

// Дополнение таблицы счетчиков.
//
Процедура ДополнитьТаблицуСчетчиков(ТаблицаСчетчиков, СтруктураНастроек, СтрокиДляДополнения)
	
	ИспользуетсяТаблицаВыгрузкиПоказаний = СтруктураНастроек.Свойство("ТаблицаУслугВыгружатьПоказания");
	
	Для Каждого СтрокаТекСчетчика Из СтрокиДляДополнения Цикл
		
		Если НЕ ИспользуетсяТаблицаВыгрузкиПоказаний ИЛИ НЕ СтруктураНастроек.ТаблицаУслугВыгружатьПоказания.Найти(СтрокаТекСчетчика.Услуга, "Услуга") = Неопределено Тогда
			НоваяСтрокаСчетчика = ТаблицаСчетчиков.Добавить();
			НоваяСтрокаСчетчика.id = СтрокаТекСчетчика.КодСчетчика;
			
			Если СтрокаТекСчетчика.Отключен Тогда
				НоваяСтрокаСчетчика.del = "1";
			Иначе
				НоваяСтрокаСчетчика.name              = СтрокаТекСчетчика.НаименованиеСчетчика;
				НоваяСтрокаСчетчика.service_name      = СтрокаТекСчетчика.НаименованиеВидаУслуги;
				НоваяСтрокаСчетчика.num               = СтрокаТекСчетчика.ЗаводскойНомер;
				НоваяСтрокаСчетчика.use_consumption   = XMLСтрока(СтрокаТекСчетчика.ИспользуетсяВводРасходаЗаПериодРасчета);
				НоваяСтрокаСчетчика.values            = СтрокаТекСчетчика.Тарифность;
				НоваяСтрокаСчетчика.capacity          = XMLСтрока(СтрокаТекСчетчика.Разрядность);
				НоваяСтрокаСчетчика.date              = ПолучитьДатуДляXML(СтрокаТекСчетчика.ПредыдущееПоказаниеПериод);
				НоваяСтрокаСчетчика.charge1           = XMLСтрока(СтрокаТекСчетчика.РасходДн);
				НоваяСтрокаСчетчика.charge2           = XMLСтрока(СтрокаТекСчетчика.РасходНч);
				НоваяСтрокаСчетчика.charge3           = XMLСтрока(СтрокаТекСчетчика.РасходПк);
				НоваяСтрокаСчетчика.val1              = XMLСтрока(СтрокаТекСчетчика.ПредыдущееПоказаниеДн);
				НоваяСтрокаСчетчика.val2              = XMLСтрока(СтрокаТекСчетчика.ПредыдущееПоказаниеНч);
				НоваяСтрокаСчетчика.val3              = XMLСтрока(СтрокаТекСчетчика.ПредыдущееПоказаниеПк);
				НоваяСтрокаСчетчика.verification_date = ПолучитьДатуДляXML(СтрокаТекСчетчика.ДатаПоверки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// ПОДГОТОВКА СВЕДЕНИЙ ДЛЯ ВЫГРУЗКИ ДОПОЛНИТЕЛЬНОГО ПЕРИОДА

// Дополняет структуру выгрузки сведениями для выгрузки в дополнительном периоде.
//
Процедура ЗаполнитьДополнительныеСведенияПриВыгрузкеДанныхЗаПредыдущийПериод(СтруктураВыгрузки, НастройкаДоступа, СтруктураНастроек) Экспорт
	
	// Если выгружаем данные за предыдущий период, то добавляем новый тег с данными
	// об оплатах и показаниях счетчиков за текущий период.
	Если СтруктураНастроек.ОбменВыполняетсяАвтоматически И НастройкаДоступа.МесяцОкончанияПроведенияНачислений = 1 Тогда
		
		// Дополняем структуру настроек необходимыми для выгрузки настройками.
		ПодготовитьНастройкиДляДополнительногоПериода(СтруктураНастроек);
		
		// Собираем сведения для выгрузки.
		ТаблицаОплатЗаТекущийПериод              = ПолучитьТаблицуОплатЗаТекущийПериод(СтруктураНастроек);
		ТаблицаПоказанийСчетчиковЗаТекущийПериод = ПолучитьТаблицуПоказанийСчетчиковЗаТекущийПериод(СтруктураНастроек);
		
		// Дополняем структуру выгрузки данными о дополнительном периоде.
		ДополнитьСтруктуруВыгрузкиДаннымиПоЛСЗаДополнительныйПериод(СтруктураВыгрузки, СтруктураНастроек, ТаблицаОплатЗаТекущийПериод, ТаблицаПоказанийСчетчиковЗаТекущийПериод);
		
	КонецЕсли;
	
КонецПроцедуры

// Допоняет структуру настроек настройками для выгрузки дополнительного периода.
//
Процедура ПодготовитьНастройкиДляДополнительногоПериода(СтруктураНастроек)
	
	ПериодСбораСведений  = ДобавитьМесяц(СтруктураНастроек.ПериодПросмотра, 1);
	СписокУслугОсн       = Новый СписокЗначений;
	СписокУслугКапРемонт = Новый СписокЗначений;
	
	УслугиВсе       = ?(СтруктураНастроек.Свойство("СписокУслугВыгружатьНачисленияОбщ"), СтруктураНастроек.СписокУслугВыгружатьНачисленияОбщ, СтруктураНастроек.СписокУслуг);
	УслугиОсновные  = ?(СтруктураНастроек.Свойство("СписокУслугВыгружатьНачисленияОсн"), СтруктураНастроек.СписокУслугВыгружатьНачисленияОсн, СтруктураНастроек.ТекущийСписокУслуг);
	УслугиКапРемонт = ?(СтруктураНастроек.Свойство("СписокУслугВыгружатьНачисленияКапРемонт"), СтруктураНастроек.СписокУслугВыгружатьНачисленияКапРемонт, СтруктураНастроек.СписокУслугКапРемонт);
	
	Если СтруктураНастроек.ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		
		СпособПечатиКвитанцииКапРемонт = СтруктураНастроек.СпособПечатиКвитанцииКапРемонт;
		
		Если СпособПечатиКвитанцииКапРемонт = "только квитанцию на кап. ремонт" Тогда
			СписокУслугКапРемонт = УслугиКапРемонт;
		ИначеЕсли СпособПечатиКвитанцииКапРемонт = "только основную квитанцию" Тогда
			СписокУслугОсн = УслугиОсновные;
		ИначеЕсли СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт" Тогда
			СписокУслугОсн       = УслугиОсновные;
			СписокУслугКапРемонт = УслугиКапРемонт;
		Иначе
			СписокУслугОсн = УслугиВсе;
		КонецЕсли;
		
	Иначе
		СписокУслугОсн = УслугиВсе;
	КонецЕсли;
	
	СтруктураНастроек.Вставить("ДопПериод_ПериодВыгрузки",       ПериодСбораСведений);
	СтруктураНастроек.Вставить("ДопПериод_СписокУслугОсн",       СписокУслугОсн);
	СтруктураНастроек.Вставить("ДопПериод_СписокУслугКапРемонт", СписокУслугКапРемонт);
	
КонецПроцедуры

// Получает сведения об оплатах в дополнительном периоде.
//
Функция ПолучитьТаблицуОплатЗаТекущийПериод(СтруктураНастроек)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОплатаПени,
	|	СУММА(-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаНачисленияОборот
	|ПОМЕСТИТЬ втОплатыЗаПериодОбщ
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Организация = &Организация
	|				И &ДопУсловие) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОплатыЗаПериодОбщ.ЛицевойСчет КАК ЛицевойСчет,
	|	втОплатыЗаПериодОбщ.ОплатаПени КАК ОплатаПени,
	|	ЛОЖЬ КАК ОплатаКапРемонт,
	|	СУММА(втОплатыЗаПериодОбщ.СуммаНачисленияОборот) КАК СуммаОплат
	|ИЗ
	|	втОплатыЗаПериодОбщ КАК втОплатыЗаПериодОбщ
	|ГДЕ
	|	втОплатыЗаПериодОбщ.Услуга В(&ТекущийСписокУслуг)
	|
	|СГРУППИРОВАТЬ ПО
	|	втОплатыЗаПериодОбщ.ЛицевойСчет,
	|	втОплатыЗаПериодОбщ.ОплатаПени
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОплатыЗаПериодОбщ.ЛицевойСчет,
	|	втОплатыЗаПериодОбщ.ОплатаПени,
	|	ИСТИНА,
	|	СУММА(втОплатыЗаПериодОбщ.СуммаНачисленияОборот)
	|ИЗ
	|	втОплатыЗаПериодОбщ КАК втОплатыЗаПериодОбщ
	|ГДЕ
	|	втОплатыЗаПериодОбщ.Услуга В(&СписокУслугКапРемонт)
	|
	|СГРУППИРОВАТЬ ПО
	|	втОплатыЗаПериодОбщ.ЛицевойСчет,
	|	втОплатыЗаПериодОбщ.ОплатаПени";
	
	Запрос.УстановитьПараметр("Организация",          СтруктураНастроек.Организация);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов",  СтруктураНастроек.СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("ТекущийСписокУслуг",   СтруктураНастроек.ДопПериод_СписокУслугОсн);
	Запрос.УстановитьПараметр("СписокУслугКапРемонт", СтруктураНастроек.ДопПериод_СписокУслугКапРемонт);
	Запрос.УстановитьПараметр("ДатаНач",              НачалоМесяца(СтруктураНастроек.ДопПериод_ПериодВыгрузки));
	Запрос.УстановитьПараметр("ДатаКон",              КонецМесяца(СтруктураНастроек.ДопПериод_ПериодВыгрузки));
	
	Если СтруктураНастроек.УчитыватьПени Тогда
		Запрос.УстановитьПараметр("ДопУсловие", ИСТИНА);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловие", "НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)");
	КонецЕсли;
	
	ТаблицаОплат = Запрос.Выполнить().Выгрузить();
	
	Если СтруктураНастроек.УчитыватьПени И СтруктураНастроек.СпособПечатиКвитанцииПоПеням = "в квитанции с основными начислениями" Тогда
		ТаблицаОплат.Свернуть("ЛицевойСчет, ОплатаКапРемонт", "СуммаОплат");
		ТаблицаОплат.Колонки.Добавить("ОплатаПени", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ТаблицаОплат.Индексы.Добавить("ЛицевойСчет");
	
	Возврат ТаблицаОплат;
	
КонецФункции

// Получает таблицу показаний счетчиков, введенных в дополнительном периоде.
//
Функция ПолучитьТаблицуПоказанийСчетчиковЗаТекущийПериод(СтруктураНастроек)
	
	ТаблицаСчетчиковНеОтфильтрованная = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьДанныеПоСчетчикамЗаВыбранныйПериод(СтруктураНастроек.Организация, СтруктураНастроек.ДопПериод_ПериодВыгрузки, СтруктураНастроек.СписокЛицевыхСчетов, СтруктураНастроек.ТаблицаОбъектов, СтруктураНастроек.СписокУслуг);
	ТаблицаСчетчиковОтфильтрованная   = ОтобратьПоказанияСчетчиковНаОснованииНастройкиВыгрузкиПоказаний(ТаблицаСчетчиковНеОтфильтрованная, СтруктураНастроек);
	
	Возврат ОтобратьПоказанияСчетчиковНаОснованииНастройкиВыгрузкиПоказаний(ТаблицаСчетчиковНеОтфильтрованная, СтруктураНастроек);
	
КонецФункции

// Дополняет структуру выгрузки данными по лицевым счетам за дополнительный период.
//
Процедура ДополнитьСтруктуруВыгрузкиДаннымиПоЛСЗаДополнительныйПериод(СтруктураВыгрузки, СтруктураНастроек, ТаблицаОплатЗаТекущийПериод, ТаблицаПоказанийСчетчиковЗаТекущийПериод)
	
	Если ТаблицаОплатЗаТекущийПериод.Количество() = 0 И ТаблицаПоказанийСчетчиковЗаТекущийПериод.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбораПоЛС = Новый Структура("ЛицевойСчет");
	
	СтруктураВыгрузки.Вставить("additional_period", Новый Структура);
	
	СтруктураВыгрузки.additional_period.Вставить("period_date", НачалоМесяца(СтруктураНастроек.ДопПериод_ПериодВыгрузки));
	СтруктураВыгрузки.additional_period.Вставить("accs",        ЗаполнитьСведенияОЛСДляДополнительногоПериода(СтруктураНастроек, ТаблицаОплатЗаТекущийПериод, ТаблицаПоказанийСчетчиковЗаТекущийПериод, СтруктураОтбораПоЛС));
	
КонецПроцедуры

// Формирует таблицу сведений по л/с для выгрузки дополнительного периода.
//
Функция ЗаполнитьСведенияОЛСДляДополнительногоПериода(СтруктураНастроек, ТаблицаОплатЗаТекущийПериод, ТаблицаПоказанийСчетчиковЗаТекущийПериод, СтруктураОтбораПоЛС)
	
	ТаблицаЛС = Новый ТаблицаЗначений;
	ТаблицаЛС.Колонки.Добавить("id");
	ТаблицаЛС.Колонки.Добавить("meter");
	ТаблицаЛС.Колонки.Добавить("main");
	ТаблицаЛС.Колонки.Добавить("overhaul");
	ТаблицаЛС.Колонки.Добавить("finesMain");
	ТаблицаЛС.Колонки.Добавить("finesOverhaul");
	
	Для Каждого СтрокаОбъекта Из СтруктураНастроек.ТаблицаОбъектов Цикл
		
		ЕстьОплатыПоЛС    = НЕ ТаблицаОплатЗаТекущийПериод.Найти(СтрокаОбъекта.ЛицевойСчет, "ЛицевойСчет") = Неопределено;
		ЕстьПоказанияПоЛС = НЕ ТаблицаПоказанийСчетчиковЗаТекущийПериод.Найти(СтрокаОбъекта.ЛицевойСчет, "ЛицевойСчет") = Неопределено;
		
		Если ЕстьОплатыПоЛС ИЛИ ЕстьПоказанияПоЛС Тогда
			
			СтруктураОтбораПоЛС.ЛицевойСчет = СтрокаОбъекта.ЛицевойСчет;
			
			НоваяСтрокаЛС    = ТаблицаЛС.Добавить();
			НоваяСтрокаЛС.id = СтрокаОбъекта.Идентификатор;
			
			Если ЕстьПоказанияПоЛС Тогда
				ЗаполнитьСведенияОСчетчикахДляДополнительногоПериода(НоваяСтрокаЛС, СтруктураНастроек, ТаблицаПоказанийСчетчиковЗаТекущийПериод, СтруктураОтбораПоЛС);
			КонецЕсли;
			
			Если ЕстьОплатыПоЛС Тогда
				ЗаполнитьСведенияОбОплатахДляДополнительногоПериода(НоваяСтрокаЛС, ТаблицаОплатЗаТекущийПериод, СтруктураОтбораПоЛС);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаЛС;
	
КонецФункции

// Дополняет структуру выгрузки сведениями о показаниях счетчиков в дополнительном периоде.
//
Процедура ЗаполнитьСведенияОСчетчикахДляДополнительногоПериода(СтрокаЛС, СтруктураНастроек, ТаблицаПоказанийСчетчиковЗаТекущийПериод, СтруктураОтбораПоЛС)
	
	СтрокаЛС.meter = ПодготовитьТаблицуСчетчиков();
	ДополнитьТаблицуСчетчиков(СтрокаЛС.meter, СтруктураНастроек, ТаблицаПоказанийСчетчиковЗаТекущийПериод.НайтиСтроки(СтруктураОтбораПоЛС));
	
КонецПроцедуры

// Выполняет заполнение структуры выгрузки сведениями об оплатах, совершенных в дополнительном периоде.
//
Процедура ЗаполнитьСведенияОбОплатахДляДополнительногоПериода(СтрокаЛС, ТаблицаОплатЗаТекущийПериод, СтруктураОтбораПоЛС)
	
	СтрокиОплат = ТаблицаОплатЗаТекущийПериод.НайтиСтроки(СтруктураОтбораПоЛС);
	
	Для каждого ТекСтрокаОплаты из СтрокиОплат Цикл
		ЗаполнитьСведенияОбОплатеДляДополнительногоПериода(СтрокаЛС, ТекСтрокаОплаты);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет заполнение сведений об оплате, совершенной в дополнительном периоде, для отдельного л/с.
//
Процедура ЗаполнитьСведенияОбОплатеДляДополнительногоПериода(СтрокаЛС, СтрокаОплаты)
	
	СтруктураОплаты = Новый Структура("sum_payed");
	СтруктураОплаты.sum_payed = СтрокаОплаты.СуммаОплат;
	
	Если НЕ СтрокаОплаты.ОплатаПени И НЕ СтрокаОплаты.ОплатаКапРемонт Тогда
		СтрокаЛС.main = СтруктураОплаты;
	ИначеЕсли НЕ СтрокаОплаты.ОплатаПени И СтрокаОплаты.ОплатаКапРемонт Тогда
		СтрокаЛС.overhaul = СтруктураОплаты;
	ИначеЕсли СтрокаОплаты.ОплатаПени И НЕ СтрокаОплаты.ОплатаКапРемонт Тогда
		СтрокаЛС.finesMain = СтруктураОплаты;
	Иначе
		СтрокаЛС.finesOverhaul = СтруктураОплаты;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ЭЛЕКТРОННЫЕ ПАСПОРТА

// Подготавливает массив атрибутов для выгрузки.
//
Функция ПолучитьМассивАтрибутовФайла(ТаблицаПоказателейМКД, ТаблицаПоказателейЖД)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПоказателейМКД.ОсновныеДанные,
	|	ВЫРАЗИТЬ(ТаблицаПоказателейМКД.НазваниеАтрибута КАК СТРОКА(50)) КАК НазваниеАтрибута
	|ПОМЕСТИТЬ втМКД
	|ИЗ
	|	&ТаблицаПоказателейМКД КАК ТаблицаПоказателейМКД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоказателейЖД.ОсновныеДанные,
	|	ВЫРАЗИТЬ(ТаблицаПоказателейЖД.НазваниеАтрибута КАК СТРОКА(50)) КАК НазваниеАтрибута
	|ПОМЕСТИТЬ втЖД
	|ИЗ
	|	&ТаблицаПоказателейЖД КАК ТаблицаПоказателейЖД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЖД.НазваниеАтрибута
	|ИЗ
	|	втЖД КАК втЖД
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втМКД.НазваниеАтрибута
	|ИЗ
	|	втМКД КАК втМКД";
	Запрос.УстановитьПараметр("ТаблицаПоказателейМКД", ТаблицаПоказателейМКД);
	Запрос.УстановитьПараметр("ТаблицаПоказателейЖД", ТаблицаПоказателейЖД);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица.ВыгрузитьКолонку("НазваниеАтрибута");
	
КонецФункции // ПолучитьМассивАтрибутовФайла()

// Формирует структуру с данными по электронным паспортам.
//
Функция ПолучитьСтруктуруСДаннымиПоЭлектроннымПаспортам(МассивДокументов = Неопределено, Организация = Неопределено) Экспорт
	
	// Если обмен выполняем по регл. заданию или из формы обмена с сайтом, то организация должна быть указана.
	ОбменПоРегламентномуЗаданию = МассивДокументов = Неопределено;
	
	Если ОбменПоРегламентномуЗаданию Тогда
		МассивДокументов = ПолучитьЭлектронныеПаспортаДляОтправки(Организация);
	КонецЕсли;
	
	Если МассивДокументов.Количество() = 0 И Не ОбменПоРегламентномуЗаданию Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаДанныхЭП = УПЖКХ_РаскрытиеИнформацииСервер.ПолучитьДанныеДляСайтаИПечатнойФормы(МассивДокументов);
	
	ТаблицаДомов = Новый ТаблицаЗначений;
	ТаблицаДомов.Колонки.Добавить("СсылкаНаЗдание");
	ТаблицаДомов.Колонки.Добавить("Здание");
	ТаблицаДомов.Колонки.Добавить("type");
	ТаблицаДомов.Колонки.Добавить("contents");
	
	Если Не ТаблицаДанныхЭП.Количество() = 0 Тогда
	
		СтрокаОрганизации = ТаблицаДанныхЭП.Получить(0);
		
		ТаблицаПоказателейМКДОбщая    = УПЖКХ_РаскрытиеИнформацииСервер.ПолучитьТаблицуПоказателейДляСайтаИПечатнойФормы(Перечисления.УПЖКХ_ВидыЗданий.МКД);
		ТаблицаПоказателейМКДОсновная = УПЖКХ_РаскрытиеИнформацииСервер.ПолучитьТаблицаОсновныхНеОсновныхПоказателей(ТаблицаПоказателейМКДОбщая);
		
		ТаблицаПоказателейЖДОбщая    = УПЖКХ_РаскрытиеИнформацииСервер.ПолучитьТаблицуПоказателейДляСайтаИПечатнойФормы(Перечисления.УПЖКХ_ВидыЗданий.ЖилойДом);
		ТаблицаПоказателейЖДОсновная = УПЖКХ_РаскрытиеИнформацииСервер.ПолучитьТаблицаОсновныхНеОсновныхПоказателей(ТаблицаПоказателейЖДОбщая);
		
		МассивАтрибутовФайла = ПолучитьМассивАтрибутовФайла(ТаблицаПоказателейМКДОсновная, ТаблицаПоказателейЖДОсновная);
		
		Для Каждого АтрибутФайла ИЗ МассивАтрибутовФайла Цикл
			ТаблицаДомов.Колонки.Добавить(СокрЛП(АтрибутФайла));
		КонецЦикла;
	КонецЕсли;
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("МассивДокументов", МассивДокументов);
	
	Для Каждого СтрокаДанных ИЗ ТаблицаДанныхЭП Цикл
		
		НоваяСтрока = ТаблицаДомов.Добавить();
		НоваяСтрока.Здание         = СтрокаДанных.Здание;
		НоваяСтрока.СсылкаНаЗдание = СтрокаДанных.СсылкаНаЗдание;
		
		Если СтрокаДанных.ВидЗдания = Перечисления.УПЖКХ_ВидыЗданий.МКД Тогда
			ТаблицаПоказателейОсновная = ТаблицаПоказателейМКДОсновная;
			НоваяСтрока.type           = "МКД";
		Иначе
			ТаблицаПоказателейОсновная = ТаблицаПоказателейЖДОсновная;
			НоваяСтрока.type           = "ЖД";
		КонецЕсли;
		
		Для Каждого СтрокаПоказателя ИЗ ТаблицаПоказателейОсновная Цикл
			СтрокаДанныхПоказателя = СтрокаДанных.ТаблицаПоказателей.Найти(СтрокаПоказателя.НазваниеПоказателя, "НазваниеПоказателя");
			Если СтрокаДанныхПоказателя = Неопределено Тогда
				НоваяСтрока[СтрокаПоказателя.НазваниеАтрибута] = "";
			ИначеЕсли НЕ ТаблицаДомов.Колонки.Найти(СтрокаПоказателя.НазваниеАтрибута) = Неопределено Тогда
				НоваяСтрока[СтрокаПоказателя.НазваниеАтрибута] = СтрокаДанныхПоказателя.ЗначениеПоказателя;
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрока.id = СтрокаДанных.КодЗдания;
		
		ТаблицаТеговHTML = Новый ТаблицаЗначений;
		ТаблицаТеговHTML.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
		ТаблицаТеговHTML.Колонки.Добавить("type", Новый ОписаниеТипов("Строка"));
		ТаблицаТеговHTML.Колонки.Добавить("text", Новый ОписаниеТипов("Строка"));
		
		СтрокиHTMLДанных  = СтрокаДанных.ТаблицаПоказателей.НайтиСтроки(Новый Структура("ОсновныеДанные", Ложь));
		ТаблицаHTMLДанных = СтрокаДанных.ТаблицаПоказателей.Скопировать(СтрокиHTMLДанных);
		
		ПодготовитьТаблицуHTMLДанных(ТаблицаHTMLДанных);
		
		ТаблицаНомеровГрупп = ТаблицаHTMLДанных.Скопировать(, "НомерГруппы");
		ТаблицаНомеровГрупп.Свернуть("НомерГруппы");
		
		Для Каждого СтрокаНомераГруппы Из ТаблицаНомеровГрупп Цикл
			НомерГруппы = СтрокаНомераГруппы.НомерГруппы;
			
			СтрокиТекущейГруппы  = ТаблицаHTMLДанных.НайтиСтроки(Новый Структура("НомерГруппы", НомерГруппы));
			ТаблицаТекущейГруппы = ТаблицаHTMLДанных.Скопировать(СтрокиТекущейГруппы);
			Если ТаблицаТекущейГруппы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаТеговHTML = ТаблицаТеговHTML.Добавить();
			НоваяСтрокаТеговHTML.name = ТаблицаТекущейГруппы.Получить(0).ЗначениеПоказателя;
			НоваяСтрокаТеговHTML.type = ПолучитьТипТекущейГруппы(НоваяСтрокаТеговHTML.name);
			НоваяСтрокаТеговHTML.text = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьТекстБлокаHTMLФайла(ТаблицаТекущейГруппы);
		КонецЦикла;
		
		НоваяСтрока.contents = ТаблицаТеговHTML.Скопировать();
	КонецЦикла;
	
	СтруктураВыгрузки.Вставить("ТаблицаДомов", ТаблицаДомов);
	
	Возврат СтруктураВыгрузки;
	
КонецФункции // ПолучитьСтруктуруСДаннымиПоЭлектроннымПаспортам()

// Получает тип текущей группы.
//
Функция ПолучитьТипТекущейГруппы(НазваниеГруппы)
	
	Если НазваниеГруппы = "Общие сведения о МКД" Или НазваниеГруппы = "Общие сведения о ЖД" Тогда
		Возврат "general";
	ИначеЕсли НазваниеГруппы = "Сведения о ценах на услуги по содержанию и ремонту" Тогда
		Возврат "repair_price";
	ИначеЕсли НазваниеГруппы = "Сведения о ценах на коммунальные услуги" Тогда
		Возврат "public_service_price";
	ИначеЕсли НазваниеГруппы = "Сведения о коммунальных услугах" Тогда
		Возврат "public_service";
	ИначеЕсли НазваниеГруппы = "Сведения о поставленных ресурсах" Тогда
		Возврат "resources";
	ИначеЕсли НазваниеГруппы = "Сведения об объемах оказания услуг" Тогда
		Возврат "service_volume";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьТипТекущейГруппы()

// Подготавливает таблицу HTML-данных.
//
Процедура ПодготовитьТаблицуHTMLДанных(ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("НомерГруппы", Новый ОписаниеТипов("Число"));
	
	НомерГруппы = 0;
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		Если СтрокаДанных.ТипПоказателя = "группа" Тогда
			НомерГруппы = НомерГруппы + 1;
		КонецЕсли;
		
		СтрокаДанных.НомерГруппы = НомерГруппы;
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуHTMLДанных()

// Получает массив электронных паспортов для отправки на сайт.
//
Функция ПолучитьЭлектронныеПаспортаДляОтправки(Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ЭлектронныеПаспортаДляОтправкиНаСайтСрезПоследних.ЭлектронныйПаспорт
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЭлектронныеПаспортаДляОтправкиНаСайт.СрезПоследних(&ТекущаяДата, ЭлектронныйПаспорт.Организация = &Организация) КАК УПЖКХ_ЭлектронныеПаспортаДляОтправкиНаСайтСрезПоследних
	|ГДЕ
	|	УПЖКХ_ЭлектронныеПаспортаДляОтправкиНаСайтСрезПоследних.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтатусыОтправкиЭлектронныхПаспортовНаСайт.ГотовКОтправке)";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица.ВыгрузитьКолонку("ЭлектронныйПаспорт");
	
КонецФункции //ПолучитьЭлектронныеПаспортаДляОтправки()

// Формирует записи в регистре сведений "Электронные паспорта для отправки на сайт".
//
Процедура СоздатьЗаписиВРСЭлектронныеПаспортаДляОтправкиНаСайт(МассивЭП) Экспорт
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_ЭлектронныеПаспортаДляОтправкиНаСайт.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ТекДата = ТекущаяДата();
	
	Для Каждого ЭлектронныйПаспорт ИЗ МассивЭП Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Период             = ТекДата;
		НоваяЗапись.ЭлектронныйПаспорт = ЭлектронныйПаспорт;
		НоваяЗапись.СтатусОтправки     = Перечисления.УПЖКХ_СтатусыОтправкиЭлектронныхПаспортовНаСайт.Отправлен;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // СоздатьЗаписиВРСЭлектронныеПаспортаДляОтправкиНаСайт()

// Создает запись об успешной отправке ЭП в регистре "Электронные паспорта для отправки на сайт" и фиксирует 
// соответствующий статус документа.
//
// Параметры:
//  МассивДокументов - Массив - массив документов, которые были отправлены на сайт.
//
Процедура ОбработатьОтправкуЭлектронногоПаспортаНаСайт(МассивДокументов) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	Для Каждого Документ ИЗ МассивДокументов Цикл
		СоздатьЗаписьВРегистреЭПДляОтправки(ТекущаяДата, Документ, Перечисления.УПЖКХ_СтатусыОтправкиЭлектронныхПаспортовНаСайт.Отправлен);
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументОбъект.ПаспортОтправленНаСайт = Истина;
		КВП_ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры // ОбработатьОтправкуЭлектронногоПаспортаНаСайт()

// Создает запись в регистре ЭПД.
//
Процедура СоздатьЗаписьВРегистреЭПДляОтправки(ТекущаяДата, Документ, Статус) Экспорт
	
	НоваяЗапись = РегистрыСведений.УПЖКХ_ЭлектронныеПаспортаДляОтправкиНаСайт.СоздатьМенеджерЗаписи();
	НоваяЗапись.Прочитать();
	
	НоваяЗапись.Период             = ТекущаяДата;
	НоваяЗапись.ЭлектронныйПаспорт = Документ;
	НоваяЗапись.СтатусОтправки     = Статус;
	
	НоваяЗапись.Записать(Ложь);
	
КонецПроцедуры // СоздатьЗаписьВРегистреЭПДляОтправки()

#КонецОбласти

#Область ФункцииРаботыСоШтрихкодами

// Формирует массив структур основных штрихкодов квитанции.
//
Функция ПолучитьОсновныеШтрихкодыКвитанции(СтруктураНастроек, ОбщиеДанные, КвитанцияНаКР)
	
	МассивШтрихкодов = Новый Массив;
	
	Если СтруктураНастроек.ВыгружатьОбаВидаШтрихкодов Тогда
		
		Для каждого ТекВидШК из Перечисления.КВП_ВидыШтрихкодовДляКвитанций Цикл
			МассивШтрихкодов.Добавить(ПолучитьСтруктуруШтрихкода(СтруктураНастроек, ОбщиеДанные, КвитанцияНаКР,, ТекВидШК));
		КонецЦикла;
		
	Иначе
		
		МассивШтрихкодов.Добавить(ПолучитьСтруктуруШтрихкода(СтруктураНастроек, ОбщиеДанные, КвитанцияНаКР));
		
	КонецЕсли;
	
	Возврат МассивШтрихкодов;
	
КонецФункции

// Формирует структуру со штрихкодом для поставщика услуг.
//
Функция ПолучитьСтруктуруШтрихкодаПоставщика(СтруктураНастроек, ОбщиеДанные, СтрокаПоставщика)
	
	ДанныеДляФормированияШтрихкода = УПЖКХ_ПечатьКвитанцийСервер.ПодготовитьДанныеДляФормированияШтрихкодаПоСтрокеПоставщика(СтруктураНастроек, ОбщиеДанные, СтрокаПоставщика);
	Возврат ПолучитьСтруктуруШтрихкода(ДанныеДляФормированияШтрихкода.СтруктураНастроек, ДанныеДляФормированияШтрихкода.ОбщиеДанные);
	
КонецФункции

// Формирует структуру со штрихкодом по заданным настройкам.
//
Функция ПолучитьСтруктуруШтрихкода(СтруктураНастроек, ОбщиеДанные, КвитанцияНаКР = Ложь, ЭтоШтрихкодПоДобровольномуСтрахованию = Ложь, ВидШКВходящий = Неопределено)
	
	СтруктураШтрихкода = Новый Структура("type, text", "", "");
	
	Если СтруктураНастроек.ВыводитьШК
	   И (НЕ ЭтоШтрихкодПоДобровольномуСтрахованию ИЛИ (ЭтоШтрихкодПоДобровольномуСтрахованию И Не КвитанцияНаКР И ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию)) Тогда
		
		ВыгружаемыйВидШК = ?(ВидШКВходящий = Неопределено, СтруктураНастроек.ВидШК, ВидШКВходящий);
		
		Если ВыгружаемыйВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.QR И УПЖКХ_ПечатьКвитанцийСервер.ПроверитьНастройкиДляQRШК(ВыгружаемыйВидШК, СтруктураНастроек, КвитанцияНаКР) Тогда
			
			СтруктураШтрихкода.type = "qr";
			СтруктураШтрихкода.text = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтрокуQRШтрихкода(ОбщиеДанные.ЛицевойСчет, СтруктураНастроек, ОбщиеДанные, ЭтоШтрихкодПоДобровольномуСтрахованию);
			
		ИначеЕсли ВыгружаемыйВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный И УПЖКХ_ПечатьКвитанцийСервер.ПроверитьНастройкиДляОдномерногоШК(ВыгружаемыйВидШК, СтруктураНастроек, КвитанцияНаКР) Тогда
			
			ТекстШК = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТекстШК(ОбщиеДанные.ЛицевойСчет, СтруктураНастроек, ОбщиеДанные, ЭтоШтрихкодПоДобровольномуСтрахованию);
			
			Если Не УПЖКХ_ПечатьКвитанцийСервер.ЕстьКириллица(ТекстШК) Тогда
				СтруктураШтрихкода.type = "code128";
				СтруктураШтрихкода.text = ТекстШК;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураШтрихкода;
	
КонецФункции

#КонецОбласти

#Область ЖурналРегистрации_ПрочиеРегистры

// Создает запись в журнале регистрации.
//
// Параметры:
//  НастройкаДоступа - СправочникСсылка.УПЖКХ_НастройкиДоступаКСайту - настройки доступа к сайту.
//  СведенияОбОшибке - Строка - сведения об ошибке (если такова имеется).
//  ВидОбмена - ПеречислениеСсылка.УПЖКХ_ВидыОбменаССайтом - вид обмена данными.
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена данными.
//  ДатаОбмена - Дата - дата совершения обмена.
//  СтруктураИнформацииОСайте - Структура - информация о сайте.
//
Процедура СоздатьЗаписьЖурналаРегистрации(НастройкаДоступа, ФайлыОбмена, СведенияОбОшибке, ВидОбмена, ВариантОбмена = Неопределено, ДатаОбмена = Неопределено, СтруктураИнформацииОСайте, ОтветыССайта, ДопСообщениеОРезультате = "") Экспорт
	
	СтруктураСтатусаВыполненияОбмена = ОпределитьСтатусВыполненияОбмена(СведенияОбОшибке, ОтветыССайта, ДопСообщениеОРезультате);
	
	// Если файлов несколько, то архивируем все файлы из списка в один архив.
	// Иначе файл не архивируем.
	Если ТипЗнч(ФайлыОбмена) = Тип("Массив") Тогда
		
		Если ФайлыОбмена.Количество() = 1 Тогда
			ФайлДляСохранения = ФайлыОбмена[0];
		Иначе
			ФайлДляСохранения = ПоместитьФайлыВZIP(ФайлыОбмена);
		КонецЕсли;
		
	Иначе
		ФайлДляСохранения = ФайлыОбмена;
	КонецЕсли;
	
	ВариантОбменаДляЗаписи = ?(ВариантОбмена = Неопределено, Справочники.УПЖКХ_ВариантыОбменаДаннымиССайтом.ПустаяСсылка(), ВариантОбмена);
	ДатаДляЗаписи          = ?(ДатаОбмена = Неопределено, ТекущаяДата(), ДатаОбмена);
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_ЖурналОбменаССайтом.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаДоступа.Установить(НастройкаДоступа);
	НаборЗаписей.Отбор.ВариантОбмена.Установить(ВариантОбменаДляЗаписи);
	НаборЗаписей.Отбор.ВидОбмена.Установить(ВидОбмена);
	НаборЗаписей.Отбор.Дата.Установить(ДатаДляЗаписи);
	НаборЗаписей.Прочитать();
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.НастройкаДоступа = НастройкаДоступа;
	НоваяЗапись.ВариантОбмена    = ВариантОбменаДляЗаписи;
	НоваяЗапись.ВидОбмена        = ВидОбмена;
	НоваяЗапись.Дата             = ДатаДляЗаписи;
	НоваяЗапись.Статус           = СтруктураСтатусаВыполненияОбмена.ВыполненоУспешно;
	НоваяЗапись.Ошибка           = СтруктураСтатусаВыполненияОбмена.СведенияОбОшибке;
	НоваяЗапись.ФайлОбмена       = ?(ФайлДляСохранения = Неопределено ИЛИ ПустаяСтрока(ФайлДляСохранения), Неопределено, Новый ХранилищеЗначения(Новый ДвоичныеДанные(ФайлДляСохранения)));
	НоваяЗапись.ЕстьФайлОбмена   = ?(ФайлДляСохранения = Неопределено, Ложь, Истина);
	
	// Сведения о сайте.
	НоваяЗапись.ВерсияФорматаОбмена = СтруктураИнформацииОСайте.ВерсияФорматаОбмена;
	НоваяЗапись.НомерБилда          = СтруктураИнформацииОСайте.НомерБилда;
	НоваяЗапись.УстановленныеМодули = СтруктураИнформацииОСайте.СписокМодулейСтрокой;
	
	// Сведения о результатах обмена.
	НоваяЗапись.СведенияОРезультатахОбмена = ПреобразоватьОтветССайтаВJSON(ОтветыССайта);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // СоздатьЗаписьЖурналаРегистрации()

// Определяет статус выполнения обмена.
//
Функция ОпределитьСтатусВыполненияОбмена(СведенияОбОшибке, ОтветыССайта, ДопСообщениеОРезультате)
	
	ВыполненоУспешно = Истина;
	
	// Проверяем успешность обмена.
	Если ПустаяСтрока(СведенияОбОшибке) Тогда
		
		СведенияОбОшибке = "";
		
		Если ТипЗнч(ОтветыССайта) = Тип("Массив") Тогда
			
			Для каждого ТекОтвет из ОтветыССайта Цикл
				
				Если НЕ ТекОтвет.status = "success" Тогда
					
					ВыполненоУспешно = Ложь;
					СведенияОбОшибке = СведенияОбОшибке + ТекОтвет.error + Символы.ПС;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ОтветыССайта) = Тип("Структура") Тогда
			
			Если НЕ ОтветыССайта.status = "success" Тогда
				
				ВыполненоУспешно = Ложь;
				СведенияОбОшибке = ОтветыССайта.error;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВыполненоУспешно = Ложь;
		
	КонецЕсли;
	
	Возврат Новый Структура("ВыполненоУспешно, СведенияОбОшибке", ВыполненоУспешно, ДопСообщениеОРезультате + СведенияОбОшибке);
	
КонецФункции // ОпределитьСтатусВыполненияОбмена()

// Преобразует ответ с сайта в json объект для его последующего сохранения в журнале обмена.
//
Функция ПреобразоватьОтветССайтаВJSON(СтруктураОтвета)
	
	Попытка
		
		ИмяФайла = ПолучитьИмяВременногоФайла();
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ОткрытьФайл(ИмяФайла, "UTF-8",,Новый ПараметрыЗаписиJSON(, Символы.Таб));
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
		ЗаписьJSON.Закрыть();
		
		ТекстФайла     = Новый ЧтениеТекста(ИмяФайла, "UTF-8");
		СтрокаПередачи = ТекстФайла.Прочитать();
		
		Возврат СтрокаПередачи;
		
	Исключение
	КонецПопытки;
	
	Возврат "";
	
КонецФункции // ПреобразоватьОтветССайтаВJSON()

// Помещает файл или массив файлов в zip архив.
//
Функция ПоместитьФайлыВZIP(Файлы) Экспорт
	
	Если ЗначениеЗаполнено(Файлы) Тогда
		
		ИмяФайла  = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZIP = Новый ЗаписьZipФайла(ИмяФайла);
		
		Если ТипЗнч(Файлы) = Тип("Массив") Тогда
			
			Для каждого ТекФайл из Файлы Цикл
				ЗаписьZIP.Добавить(ТекФайл);
			КонецЦикла;
			
		Иначе
			
			ЗаписьZIP.Добавить(Файлы);
			
		КонецЕсли;
		
		ЗаписьZIP.Записать();
		
		Возврат ИмяФайла;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПоместитьФайлыВZIP()

#КонецОбласти

#Область ФункцииСбораДанныхДляВыгрузки

// Формирует структуру, содержащую сведения для выгрузки в XML.
// 
// Параметры:
//  ВариантВыгрузки - строка, содержащая наименование варианта выгрузки.
//                    Может принимать следующие значения:
//                     "Access"  - выгрузка параметров доступа л/с. Формируется
//                                  на основании аргумента <МассивЛС>.
//                     "Calculations" - выгрузка полной информации об организация,
//                                  начислениях на л/с, счетчиках, поставщиках услуг.
//                                  Аргумент <МассивЛС> не используется. Выгрузка
//                                  логинов л/с не осуществляется.
//                     "Accounts" - аналогично с вариантом "Расчеты", но с выгрузкой
//                                  логинов л/с.
//  НастройкаДоступа - ссылка на элемент справочника "Настройки доступа к сайту".
//  НастройкиОбмена - структура - дата и настройка доступа к сайту.
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена данными.
// 
// Возвращаемое значение:
//  Структура - содержит данные для выгрузки в XML.
//  Неопределено - в случае некорректных значений аргументов <ВариантВыгрузки> или <НастройкиОбмена>.
//
// Примечание:
// Выгрузка может производиться в соответствии со следующими вариантами:
// - "access" - выгружаются параметры доступа л/с.
// - "calculations" - выгружаются сведения о взаиморасчетах по л/с.
// - "accounts" - выгружаются сведения о взаиморасчетах по л/с, а также логины л/с для доступа на сайт.
//
// Данные для выгрузки представлены в виде структуры, все поля которой, содержат значения строкового типа,
// за исключением полей, хранящих таблицы значений и массивы (значения полей таблиц значений и массивов так
// же должны быть строковыми).
// Незаполненному значению поля соответствует пустая строка ("").
// Данная структура содержит следующие поля:
//
// 1) Для выгрузки параметров доступа л/с (Вариант выгрузки "Access"):
//
// filedate // Дата начала месяца выгрузки в формате "дд.ММ.гггг".
// name     // Наименование организации.
// inn      // ИНН.
// filetype // Тип файла ("Access").
// version  // версия механизма обмена ("3").
// \PersAcc       // Таблица л/с (таблица значений, заполняется на основании аргумента "ТаблицаЛС"), содержащая колонки:
//     kod_ls     // Идентификатор л/с.
//     kod_ls_new // Идентификатор л/с в формате "[префикс организации] [идентификатор л/с]".
//     login      // Логин л/с.
//     password   // Пароль л/с.
//     email      // Электронный ящик л/с. Необязательный атрибут.
//
// 2) Для выгрузки сведений о расчетах (Варианты выгрузки "Calculations" и "Accounts"):
//
// filedate // Дата формирования выгрузки.
// name     // Наименование организации.
// inn      // ИНН.
// filetype // Тип файла (Соответсвует наименованию варианта выгрузки: "Calculations" или "Accounts").
// version  // версия механизма обмена ("3").
// kpp      // КПП.
// bank     // Полное наименование банка.
// rs       // рассчетный счет.
// ks       // коррсчет.
// bik      // БИК.
// \contractors  // Таблица поставщиков (таблица значений), содержащая колонки:
//     id        // Код поставщика.
//     name      // Наименование поставщика.
//     executor  // Исполнитель ("1" для выбранной организации, для других поставщиков услуг не заполняется).
//     address   // Адрес, заполняется только для выбранной организации.
//     phone     // Телефон/факс, заполняется только для выбранной организации.
//     services  // Услуги, предоставляемые поставщиком. Если поставщик предоставляет несколько услуг, для
//                  каждой будет создана отдельная строка. Не заполняется для выбранной организации.
//     textValue // Текстовое содержимое, содержит платежные реквизиты поставщика услуг.
//     inn       // ИНН.
//     kpp       // КПП.
//     bank      // Наименование банка.
//     rs        // Номер расчетного счета.
//     ks        // Номер корреспондентского счета.
//     bik       // БИК.
// \hmeters        // Таблица ОПУ (таблица значений), содержащая колонки:
//     value_count // Количество видов тарифов счетчика.
//     indiccur1   // Последнее учтенное дневное показание счетчика.
//     indiccur2   // Последнее учтенное ночное показание счетчика.
//     indiccur3   // Последнее учтенное пиковое показание счетчика.
//     kod         // Код счетчика.
//     name        // Наименование счетчика.
//     num         // Заводской номер счетчика.
//     service     // Услуга, на которую установлен счетчик.
// \PersAcc              // Таблица л/с(таблица значений), содержащая колонки:
//     kod_ls            // Идентификатор л/с.
//     kod_ls_new        // Идентификатор л/с в формате "[префикс организации] [идентификатор л/с]".
//     login             // Логин л/с. Заполняется только при варианте выгрузки "Accounts".
//     password          // Не заполняется.
//     AddressCity       // Адрес, город.
//     AddressDistrict   // Адрес, район города.
//     AddressFlat       // Адрес, квартира.
//     FlatAbbr          // Краткое обозначение типа помещения (кв., пом., каб. и т. п.) Если не указано,
//                          используется обозначение "кв.".
//     FlatType          // Тип помещения (квартира, офис и т.д.)
//     AddressHouse      // Адрес, дом.
//     AddressRegion     // Адрес, регион.
//     AddressSettlement // Адрес, населенный пункт.
//     AddressStreet     // Адрес, улица.
//     Barcode           // Штрихкод (для вывода в квитанциях).
//     commonarea        // Общая площадь помещения.
//     habarea           // Жилая площадь помещения.
//     HouseArea         // Общая площадь здания.
//     FlatsArea         // Площадь помещений здания.
//     ComFlatsArea      // Площадь мест общего пользования здания.
//     debtbeg           // Задолженность на начало расчетного периода (период с начала месяца,
//                          на который происходит выгрузка, по окончание текущего дня).
//     debtend           // Задолженность на конец расчетного периода.
//     debtprev          // Задолженность за предыдущие периоды.
//     prepayment        // Аванс на начало расчетного периода.
//     sumtopay          // Итоговая сумма к оплате за расчетный период.
//     lastPaymentDate   // Дата последнего платежа.
//     email             // E-mail пользователя на сайте.
//     name              // ФИО владельца л/с.
//     name_ls           // Номер лицевого счета (Наименование).
//     people            // Количество проживающих.
//     num_of_reg        // Количество зарегистрированных.
//     num_of_comp       // Количество льготников.
//     \item            // Таблица начислений по услугам за расчетный период (таблица значений), содержащая колонки:
//         component    // Является ли строкой детализации.
//         ammount      // объем потребления услуги (индивидуальный + общедомовой).
//         correction   // Сумма перерасчетов за расчетный период.
//         edizm        // Единица измерения.
//         kod          // Код услуги.
//         name         // Наименование услуги.
//         norm         // Норма потребления (полностью).
//         peni         // Пени, начисленные за расчетный период.
//         sum          // Сумма начисления (полностью).
//         sumpayed     // Сумма оплат, внесенных за расчетный период.
//         compensation // Сумма начисленных льгот.
//         sumtopay     // Сумма к оплате.
//         debtbeg      // Задолженность на начало расчетного период.
//         debtend      // Задолженность на конец отчетного периода.
//         meter        // Массив, содержащий коды ИПУ, установленных на услугу текущей строки таблицы.
//         hmeter       // Массив, содержащий коды ОПУ, установленных на услугу текущей строки таблицы.
//         hammount     // Объем потребления услуги (общедомовой).
//         hnorm        // Норма потребления (общедомовая).
//         hsum         // Сумма начисления (общедомовая).
//         hsumtopay    // Сумма к оплате (общедомовая).
//         volumep      // Общий объем потребления по ИПУ для здания.
//         volumeh      // Общий объем ОДН для здания.
//         tarif1       // Дневной тариф.
//         tarif2       // Ночной тариф. Заполняется только если услуга имеет 2 и более тарифов.
//         tarif3       // Пиковый тариф. Заполняется только если услуга имеет 2 и более тарифов.
//     \item_debt   // Таблица начального сальдо по услугам, по которым не было начислений за период выгрузки.
//         name     // Наименование услуги.
//         kod      // Код услуги.
//         edizm    // Единица измерения.
//         debtbeg  // Задолженность на начало расчетного периода.
//         debtend  // Задолженность на окончание расчетного периода.
//         peni     // Пени, начисленные за расчетный период.
//         sumpayed // Сумма оплат, внесенных за расчетный период.
//     \credit       // Сведения о рассрочке.
//         name      // Название услуги.
//         sum       // Сумма начисления за текущий месяц (без процентов за рассрочку).
//         sumcredit // Сумма процентов за рассрочку.
//         rate      // Размер процента.
//         balance   // Остаток по рассрочке (оно же «оплата за пред. период»).
//         sumtopay  // Сумма к оплате.
//     \meter            // Таблица показаний ИПУ (таблица значений), содержащая колонки:
//         del           // Указывает, нужно ли удалить данный счетчик на сайте.
//         value_count   // Количество тарифов.
//         indicbef1     // Последнее учтенное показание на начало расчетного периода (Дневное).
//                          Не заполняется при совпадении date_indicbef и date_indiccur.
//         indicbef2     // Последнее учтенное показание на начало расчетного периода (Ночное).
//                          Не заполняется при совпадении date_indicbef и date_indiccur.
//         indicbef3     // Последнее учтенное показание на начало расчетного периода (Пиковое).
//                          Не заполняется при совпадении date_indicbef и date_indiccur.
//         date_indicbef // Дата последнего учтенного показания на начало расчетного периода.
//                          Не заполняется при совпадении date_indicbef и date_indiccur.
//         indiccur1     // Последнее учтенное показание на конец отчетного период (Дневное).
//         indiccur2     // Последнее учтенное показание на конец отчетного период (Ночное).
//         indiccur3     // Последнее учтенное показание на конец отчетного период (Пиковое).
//         date_indiccur // Дата последнего учтенного показания на начало расчетного периода.
//         kod           // Код счетчика.
//         name          // Наименование счетчика.
//         num           // Заводской номер счетчика.
//         service       // Наименование услуги.
//         capacity      // Разрядность счетчика.
//     \contractor  // Таблица поставщиков услуг, назначенных на л/с (таблица значений), содержащая колонки:
//         id       // Код поставщика.
//         debtbeg  // Задолженность на начало расчетного периода.
//         sumpayed // Сумма оплат за расчетный период.
//         peni     // Пени, начисленные за расчетный период.
//         sum      // Сумма начислений за текущий месяц.
//         sumtopay // Сумма к оплате.
//         summ     // Итоговая сумма к оплате поставщику.
//
Функция ПолучитьДанныеДляВыгрузки(ВариантВыгрузки, НастройкаДоступа, НастройкиОбмена = Неопределено, НастройкаОбменаДанными, СтруктураНастроек) Экспорт
	
	// Проверка настроек обмена.
	Если НЕ ЗначениеЗаполнено(НастройкаДоступа)
	 ИЛИ НЕ ЗначениеЗаполнено(НастройкаДоступа.Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипФайла                    = "";
	ВыгружатьВсеДанные          = Ложь; // Выгружать все сведения об организации, начислениях и л/с.
	ВыгружатьЛогины             = Ложь; // Выгружать логины (для вариантов "Calculations" и "Accounts").
	Организация                 = НастройкаДоступа.Организация;
	ПрефиксЛС                   = ПолучитьПрефикс(Организация); // Префикс, добавляемый к коду л/с.
	ВариантВыгрузки             = НРег(ВариантВыгрузки);
	ВыгружатьПерсональныеДанные = НЕ НастройкаДоступа.НеВыгружатьПерсональныеДанные; // Выгружать ли персональные данные
	
	// Использовать ли префикс для старого алгоритма формирования значения атрибута kod_ls.
	ИспользоватьПрефиксСтарыйМеханизм = ПроверитьНеобходимостьПрефикса();
	
	ДатаОбмена = СтруктураНастроек.ПериодПросмотра;
	
	// Определение переменных.
	Если ВариантВыгрузки = "access" Тогда
		ТипФайла           = "access";
	ИначеЕсли ВариантВыгрузки = "calculations" Тогда
		ТипФайла           = "calculations";
		ВыгружатьВсеДанные = Истина;
		МассивЛС           = ПолучитьМассивЛицевыхСчетовОрганизации(Организация, СтруктураНастроек, ДатаОбмена);
		МассивУслуг        = ПолучитьМассивУслуг(НастройкаОбменаДанными);
	ИначеЕсли ВариантВыгрузки = "accounts" Тогда
		ТипФайла           = "accounts";
		ВыгружатьВсеДанные = Истина;
		ВыгружатьЛогины    = Истина;
		МассивЛС           = ПолучитьМассивЛицевыхСчетовОрганизации(Организация, СтруктураНастроек, ДатаОбмена);
		МассивУслуг        = ПолучитьМассивУслуг(НастройкаОбменаДанными);
	Иначе
		// Если неверный вариант выгрузки.
		Возврат Неопределено;
	КонецЕсли;
	
	//////// Сбор данных ////////
	
	// Сведения об организации.
	СведенияОбОрганизации = ПолучитьСведенияОбОрганизации(Организация, ТипФайла, ВыгружатьВсеДанные, ДатаОбмена);
	
	// Сбор сведений для полной выгрузки.
	Если ВыгружатьВсеДанные Тогда
		МассивВидовУслуг         = ПолучитьМассивВидовУслуг(МассивУслуг);
		НастройкиВыводаКвитанций = ПолучитьНастройкиВыводаКвитанций(СтруктураНастроек);
		
		ТаблицаНачисленийОбщая         = ПолучитьТаблицуНачислений(Организация, МассивЛС, МассивУслуг, МассивВидовУслуг, ДатаОбмена, НастройкиВыводаКвитанций, СтруктураНастроек.ТаблицаУслугВыгружатьНачисления, НастройкаОбменаДанными);
		ТаблицаНачисленияДляВывода     = ПолучитьТаблицуНачисленийДляВывода(ТаблицаНачисленийОбщая, НастройкиВыводаКвитанций);
		ТаблицаНачальногоСальдо        = ПолучитьТаблицуНачальногоСальдо(ТаблицаНачисленийОбщая, ТаблицаНачисленияДляВывода);
		ТаблицаПоставщиковОбщая        = ПолучитьТаблицуПоставщиков(Организация, МассивВидовУслуг, НастройкиВыводаКвитанций, ДатаОбмена, СтруктураНастроек.ТаблицаУслугВыгружатьНачисления);
		ТаблицаОПУОбщая                = ПолучитьСведенияОбОПУ(Организация, МассивЛС, МассивУслуг, ДатаОбмена, СтруктураНастроек.ТаблицаУслугВыгружатьПоказания);
		ТаблицаИПУОбщая                = ПолучитьСведенияОбИПУ(МассивЛС, МассивУслуг, ДатаОбмена, СтруктураНастроек.ТаблицаУслугВыгружатьПоказания);
		ТаблицаНачисленийПоПоставщикам = ПолучитьСуммыНачисленийПоПоставщикамУслуг(ТаблицаНачисленийОбщая);
		ТаблицаЛицевыхСчетовОбщая      = ПолучитьСведенияОЛицевыхСчетах(МассивЛС, ТаблицаНачисленийОбщая, СтруктураНастроек, ВыгружатьЛогины);
		ТаблицаРассрочкиОбщая          = ПолучитьТаблицуРассрочки(Организация, МассивЛС, МассивУслуг, ТаблицаНачисленияДляВывода, ТаблицаПоставщиковОбщая, ДатаОбмена, СтруктураНастроек.ТаблицаУслугВыгружатьНачисления);
		ТаблицаПерерасчетов            = ПолучитьТаблицуПерерасчетов(Организация, ТаблицаНачисленияДляВывода, ТаблицаПоставщиковОбщая);
	КонецЕсли;
	
	//////// Формирование структуры выгрузки ////////
	
	СтруктураВыгрузки = Новый Структура;
	
	// Общие данные организации
	СтруктураВыгрузки.Вставить("filedate", Формат(НачалоМесяца(СведенияОбОрганизации.filedate),"ДЛФ=Д"));
	СтруктураВыгрузки.Вставить("name",     СведенияОбОрганизации.name);
	СтруктураВыгрузки.Вставить("inn",      СведенияОбОрганизации.inn);
	СтруктураВыгрузки.Вставить("filetype", СведенияОбОрганизации.filetype);
	СтруктураВыгрузки.Вставить("version",  СведенияОбОрганизации.version);
	
	// Дополнительные данные организации
	Если ВыгружатьВсеДанные Тогда
		
		// Реквизиты организации
		СтруктураВыгрузки.Вставить("kpp",  СведенияОбОрганизации.kpp);
		СтруктураВыгрузки.Вставить("bank", СведенияОбОрганизации.bank);
		СтруктураВыгрузки.Вставить("rs",   СведенияОбОрганизации.rs);
		СтруктураВыгрузки.Вставить("ks",   СведенияОбОрганизации.ks);
		СтруктураВыгрузки.Вставить("bik",  СведенияОбОрганизации.bik);
		
		// Таблица поставщиков
		СтруктураВыгрузки.Вставить("contractors", Новый ТаблицаЗначений);
		СтруктураВыгрузки.contractors.Колонки.Добавить("id");
		СтруктураВыгрузки.contractors.Колонки.Добавить("name");
		СтруктураВыгрузки.contractors.Колонки.Добавить("executor");
		СтруктураВыгрузки.contractors.Колонки.Добавить("address");
		СтруктураВыгрузки.contractors.Колонки.Добавить("phone");
		СтруктураВыгрузки.contractors.Колонки.Добавить("services");
		СтруктураВыгрузки.contractors.Колонки.Добавить("textValue");
		СтруктураВыгрузки.contractors.Колонки.Добавить("inn");
		СтруктураВыгрузки.contractors.Колонки.Добавить("kpp");
		СтруктураВыгрузки.contractors.Колонки.Добавить("bank");
		СтруктураВыгрузки.contractors.Колонки.Добавить("rs");
		СтруктураВыгрузки.contractors.Колонки.Добавить("ks");
		СтруктураВыгрузки.contractors.Колонки.Добавить("bik");
		
		Для каждого ТекСтрока из ТаблицаПоставщиковОбщая Цикл
			
			НоваяСтрока = СтруктураВыгрузки.contractors.Добавить();
			
			НоваяСтрока.id       = Строка(ТекСтрока.CONId); // id
			НоваяСтрока.name     = ТекСтрока.CONName; // наименование
			НоваяСтрока.executor = ТекСтрока.executor; // исполнитель
			НоваяСтрока.services = Строка(ТекСтрока.services); // услуга
			НоваяСтрока.inn      = ТекСтрока.inn;
			НоваяСтрока.kpp      = ТекСтрока.kpp;
			НоваяСтрока.rs       = Строка(ТекСтрока.rs);
			НоваяСтрока.bank     = Строка(ТекСтрока.bank);
			НоваяСтрока.ks       = ТекСтрока.ks;
			НоваяСтрока.bik      = ТекСтрока.bik;
			НоваяСтрока.address  = ТекСтрока.address; // адрес
			
			ЕстьТелефон = ЗначениеЗаполнено(ТекСтрока.phone);
			ЕстьФакс    = ЗначениеЗаполнено(ТекСтрока.fax);
			
			Если ЕстьТелефон ИЛИ ЕстьФакс Тогда
				СтрокаТелефон = ?(ЕстьТелефон, ТекСтрока.phone, "")
					          + ?(ЕстьТелефон И ЕстьФакс, ", ", "")
					          + ?(ЕстьФакс, "факс: " + ТекСтрока.fax, "");
			
				НоваяСтрока.phone = СтрокаТелефон; // телефон/факс
			Иначе
				НоваяСтрока.phone = "";
			КонецЕсли;
			
			// Текстовое содержимое
			ПлатежныеРеквизиты = ?(ЗначениеЗаполнено(ТекСтрока.rs), "р/с " + ТекСтрока.rs + ", ", "")
			                   + ?(ЗначениеЗаполнено(ТекСтрока.bank), "в " + ТекСтрока.bank + ", ", "")
			                   + ?(ЗначениеЗаполнено(ТекСтрока.city), ТекСтрока.city + ", ", "") 
			                   + ?(ЗначениеЗаполнено(ТекСтрока.ks), "к/с " + ТекСтрока.ks + ", ", "") 
			                   + ?(ЗначениеЗаполнено(ТекСтрока.bik), "БИК " + ТекСтрока.bik, "");
			
			Если Прав(ПлатежныеРеквизиты, 2) = ", " Тогда
				ПлатежныеРеквизиты = Лев(ПлатежныеРеквизиты, СтрДлина(ПлатежныеРеквизиты) - 2);
			КонецЕсли;
			
			НоваяСтрока.textValue = ПлатежныеРеквизиты;
			
		КонецЦикла;
		
		// ОПУ
		СтруктураВыгрузки.Вставить("hmeters", Новый ТаблицаЗначений);
		СтруктураВыгрузки.hmeters.Колонки.Добавить("value_count");
		СтруктураВыгрузки.hmeters.Колонки.Добавить("indiccur1");
		СтруктураВыгрузки.hmeters.Колонки.Добавить("indiccur2");
		СтруктураВыгрузки.hmeters.Колонки.Добавить("indiccur3");
		СтруктураВыгрузки.hmeters.Колонки.Добавить("kod");
		СтруктураВыгрузки.hmeters.Колонки.Добавить("name");
		СтруктураВыгрузки.hmeters.Колонки.Добавить("num");
		СтруктураВыгрузки.hmeters.Колонки.Добавить("service");
		
		Для Каждого ТекСтрока Из ТаблицаОПУОбщая Цикл
			НоваяСтрока             = СтруктураВыгрузки.hmeters.Добавить();
			НоваяСтрока.value_count = Строка(ТекСтрока.value_count);
			НоваяСтрока.indiccur1   = Строка(ТекСтрока.indiccur1);
			НоваяСтрока.indiccur2   = Строка(ТекСтрока.indiccur2);
			НоваяСтрока.indiccur3   = Строка(ТекСтрока.indiccur3);
			НоваяСтрока.kod         = Строка(ТекСтрока.kod);
			НоваяСтрока.name        = Строка(ТекСтрока.HMName);
			НоваяСтрока.num         = Строка(ТекСтрока.num);
			НоваяСтрока.service     = Строка(ТекСтрока.service);
		КонецЦикла;
		
	КонецЕсли;
	
	//////// ЛИЦЕВЫЕ СЧЕТА ////////
	
	// Общие данные
	СтруктураВыгрузки.Вставить("PersAcc", Новый ТаблицаЗначений);
	СтруктураВыгрузки.PersAcc.Колонки.Добавить("kod_ls");
	СтруктураВыгрузки.PersAcc.Колонки.Добавить("kod_ls_new");
	СтруктураВыгрузки.PersAcc.Колонки.Добавить("login");
	СтруктураВыгрузки.PersAcc.Колонки.Добавить("password");
	СтруктураВыгрузки.PersAcc.Колонки.Добавить("email");
	
	Если ВыгружатьВсеДанные Тогда
		
		// Структуры отборов.
		ОтборПоЛС         = Новый Структура("ЛицевойСчет");
		ОтборПоЗданию     = Новый Структура("Объект");
		ОтборПоПодъезду   = Новый Структура("Объект");
		ОтборПоУслуге     = Новый Структура("Услуга");
		ОтборПоВидуУслуги = Новый Структура("SName");
		
		// Создаем таблицу л/с
		Если ВыгружатьПерсональныеДанные Тогда
			СтруктураВыгрузки.PersAcc.Колонки.Добавить("AddressCity");
			СтруктураВыгрузки.PersAcc.Колонки.Добавить("AddressDistrict");
			СтруктураВыгрузки.PersAcc.Колонки.Добавить("AddressFlat");
			СтруктураВыгрузки.PersAcc.Колонки.Добавить("FlatAbbr");
			СтруктураВыгрузки.PersAcc.Колонки.Добавить("AddressHouse");
			СтруктураВыгрузки.PersAcc.Колонки.Добавить("AddressRegion");
			СтруктураВыгрузки.PersAcc.Колонки.Добавить("AddressSettlement");
			СтруктураВыгрузки.PersAcc.Колонки.Добавить("AddressStreet");
			СтруктураВыгрузки.PersAcc.Колонки.Добавить("name");
		КонецЕсли;
		
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("name_ls");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("FlatType");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("HouseArea");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("FlatsArea");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("ComFlatsArea");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("Barcode");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("commonarea");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("habarea");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("people");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("num_of_reg");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("num_of_comp");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("debtbeg");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("debtend");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("debtprev");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("prepayment");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("sumtopay");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("lastPaymentDate");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("item");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("item_debt");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("credit");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("correction");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("meter");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("contractor");
		СтруктураВыгрузки.PersAcc.Колонки.Добавить("creditPayed");
		
		// Заполняем таблицу л/с
		Для каждого ТекЛС из ТаблицаЛицевыхСчетовОбщая Цикл
			
			// Отборы для таблиц услуг, пу, поставщиков.
			ОтборПоЛС.ЛицевойСчет  = ТекЛС.ЛицевойСчет;
			ОтборПоЗданию.Объект   = ТекЛС.Здание;
			ОтборПоПодъезду.Объект = ТекЛС.Подъезд;
			
			// Отбор нужных улсуг, счетчиков и поставщиков
			СтрокиНачислений       = ТаблицаНачисленияДляВывода.НайтиСтроки(ОтборПоЛС);
			СтрокиИПУ              = ТаблицаИПУОбщая.НайтиСтроки(ОтборПоЛС);
			СтрокиПоставщиков      = ТаблицаНачисленийПоПоставщикам.НайтиСтроки(ОтборПоЛС);
			СтрокиРассрочки        = ТаблицаРассрочкиОбщая.НайтиСтроки(ОтборПоЛС);
			СтрокиНачальногоСальдо = ТаблицаНачальногоСальдо.НайтиСтроки(ОтборПоЛС);
			СтрокиПерерасчетов     = ТаблицаПерерасчетов.НайтиСтроки(ОтборПоЛС);
			
			// Заполнение PersAcc
			НоваяСтрока = СтруктураВыгрузки.PersAcc.Добавить();
			
			Если ВыгружатьПерсональныеДанные Тогда
				НоваяСтрока.AddressCity       = СокрЛП(ТекЛС.AddressCity);
				НоваяСтрока.AddressDistrict   = СокрЛП(ТекЛС.AddressDistrict);
				НоваяСтрока.AddressFlat       = Строка(ТекЛС.AddressFlat);
				НоваяСтрока.FlatAbbr          = СокрЛП(ТекЛС.FlatAbbr);
				НоваяСтрока.AddressHouse      = Строка(ТекЛС.AddressHouse) + ?(ЗначениеЗаполнено(ТекЛС.Корпус), "/" + Строка(ТекЛС.Корпус), "");
				НоваяСтрока.AddressRegion     = СокрЛП(ТекЛС.AddressRegion);
				НоваяСтрока.AddressSettlement = СокрЛП(ТекЛС.AddressSettlement);
				НоваяСтрока.AddressStreet     = СокрЛП(ТекЛС.AddressStreet);
				НоваяСтрока.name              = Строка(ТекЛС.name1);
			КонецЕсли;
			
			НоваяСтрока.email           = СокрЛП(ТекЛС.email);
			НоваяСтрока.name_ls         = Строка(ТекЛС.name_ls);
			НоваяСтрока.people          = Строка(ТекЛС.people);
			НоваяСтрока.num_of_reg      = Строка(ТекЛС.num_of_reg);
			НоваяСтрока.num_of_comp     = Строка(ТекЛС.num_of_comp);
			НоваяСтрока.FlatType        = Строка(ТекЛС.FlatType);
			НоваяСтрока.HouseArea       = Строка(ТекЛС.HouseArea);
			НоваяСтрока.FlatsArea       = Строка(ТекЛС.FlatsArea);
			НоваяСтрока.ComFlatsArea    = Строка(ТекЛС.ComFlatsArea);
			НоваяСтрока.habarea         = Строка(ТекЛС.habarea);
			НоваяСтрока.Barcode         = ПолучитьШтрихКод(ТекЛС, СведенияОбОрганизации, СтрокиИПУ);
			НоваяСтрока.commonarea      = Строка(ТекЛС.commonarea);
			НоваяСтрока.lastPaymentDate = Строка(Формат(ТекЛС.lastPaymentDate, "ДФ=дд.ММ.гггг"));
			НоваяСтрока.kod_ls          = ?(ИспользоватьПрефиксСтарыйМеханизм, ПрефиксЛС, "") + СокрЛП(ТекЛС.kod_ls);
			НоваяСтрока.kod_ls_new      = ПрефиксЛС + " " + СокрЛП(ТекЛС.kod_ls);
			НоваяСтрока.login           = ?(ВыгружатьЛогины, СокрЛП(ТекЛС.login), "");
			НоваяСтрока.password        = "";
			
			Если НЕ ТаблицаНачисленияДляВывода.Количество() = 0 Тогда
				ТаблицаИтогаПоРассрочке = ТаблицаРассрочкиОбщая.Скопировать(СтрокиРассрочки);
				НоваяСтрока.debtbeg     = Строка(ТекЛС.debtbeg);
				НоваяСтрока.debtend     = Строка(ТекЛС.debtend);
				НоваяСтрока.debtprev    = Строка(ТекЛС.debtprev);
				НоваяСтрока.prepayment  = Строка(ТекЛС.prepayment);
				НоваяСтрока.sumtopay    = Строка(ТекЛС.sumtopay);
				НоваяСтрока.creditPayed = Строка(ТаблицаИтогаПоРассрочке.Итог("ПредоплатаРассрочки"));
			Иначе
				НоваяСтрока.debtbeg     = "";
				НоваяСтрока.debtend     = "";
				НоваяСтрока.debtprev    = "";
				НоваяСтрока.prepayment  = "";
				НоваяСтрока.sumtopay    = "";
				НоваяСтрока.creditPayed = "";
			КонецЕсли;
			
			// НАЧИСЛЕНИЯ
			Если НЕ СтрокиНачислений.Количество() = 0 Тогда
				
				НоваяСтрока.item = Новый ТаблицаЗначений;
				НоваяСтрока.item.Колонки.Добавить("group");
				НоваяСтрока.item.Колонки.Добавить("component");
				НоваяСтрока.item.Колонки.Добавить("amountn");
				НоваяСтрока.item.Колонки.Добавить("hamountn");
				НоваяСтрока.item.Колонки.Добавить("ammount");
				НоваяСтрока.item.Колонки.Добавить("correction");
				НоваяСтрока.item.Колонки.Добавить("edizm");
				НоваяСтрока.item.Колонки.Добавить("kod");
				НоваяСтрока.item.Колонки.Добавить("name");
				НоваяСтрока.item.Колонки.Добавить("norm");
				НоваяСтрока.item.Колонки.Добавить("peni");
				НоваяСтрока.item.Колонки.Добавить("sum");
				НоваяСтрока.item.Колонки.Добавить("sumpayed");
				НоваяСтрока.item.Колонки.Добавить("compensation");
				НоваяСтрока.item.Колонки.Добавить("sumtopay");
				НоваяСтрока.item.Колонки.Добавить("volumep");
				НоваяСтрока.item.Колонки.Добавить("debtbeg");
				НоваяСтрока.item.Колонки.Добавить("debtend");
				НоваяСтрока.item.Колонки.Добавить("volumea");
				НоваяСтрока.item.Колонки.Добавить("ammountNorm");
				НоваяСтрока.item.Колонки.Добавить("meter");
				НоваяСтрока.item.Колонки.Добавить("hmeter");
				НоваяСтрока.item.Колонки.Добавить("hammount");
				НоваяСтрока.item.Колонки.Добавить("hnorm");
				НоваяСтрока.item.Колонки.Добавить("hsum");
				НоваяСтрока.item.Колонки.Добавить("hsumtopay");
				НоваяСтрока.item.Колонки.Добавить("volumeh");
				НоваяСтрока.item.Колонки.Добавить("tarif1");
				НоваяСтрока.item.Колонки.Добавить("tarif2");
				НоваяСтрока.item.Колонки.Добавить("tarif3");
				
				ТаблицаОПУДляЗдания   = ТаблицаОПУОбщая.Скопировать(ТаблицаОПУОбщая.НайтиСтроки(ОтборПоЗданию));
				ТаблицаОПУДляПодъезда = ТаблицаОПУОбщая.Скопировать(ТаблицаОПУОбщая.НайтиСтроки(ОтборПоПодъезду));
				ТаблицаИПУДляЛС       = ТаблицаИПУОбщая.Скопировать(СтрокиИПУ);
				
				Для каждого ТекНачисление из СтрокиНачислений Цикл
					
					// Отбор начислений по услуге.
					ОтборПоУслуге.Услуга    = ТекНачисление.Услуга;
					ОтборПоВидуУслуги.SName = ?(ТекНачисление.ВидУслуги = Неопределено ИЛИ ТекНачисление.УслугаЯвляетсяСоставной, ТекНачисление.VidName, ТекНачисление.ВидУслугиНаименование);
					
					// Отобранные строки
					СтрокиОПУДляЛС        = ТаблицаОПУДляЗдания.НайтиСтроки(ОтборПоУслуге);
					СтрокиОПУДляЛСПодъезд = ТаблицаОПУДляПодъезда.НайтиСтроки(ОтборПоУслуге);
					СтрокиИПУПоВидуУслуги = ТаблицаИПУДляЛС.НайтиСтроки(ОтборПоВидуУслуги);
					
					// Создание новой строки начислений.
					СтрокаУслуга = НоваяСтрока.item.Добавить();
					
					// Сноски
					СтрокаУслуга.amountn  = ТекНачисление.КодВидаНачисленийИПУ;
					СтрокаУслуга.hamountn = ТекНачисление.КодВидаНачисленийОПУ;
					
					// Объем потребления по норме.
					СтрокаУслуга.ammountNorm = ?(ТекНачисление.ОбщКоличествоИндНорма = 0, "", Строка(ТекНачисление.ОбщКоличествоИндНорма));
					
					// Начисление
					СтрокаУслуга.group     = ТекНачисление.ТипУслуги;
					СтрокаУслуга.component = ?(ТекНачисление.СтрокаДетализации, "1", ?(ТекНачисление.УслугаЯвляетсяСоставной, "2", ""));
					СтрокаУслуга.ammount   = Строка(ТекНачисление.ammount);
					СтрокаУслуга.edizm     = ?(ЗначениеЗаполнено(ТекНачисление.edizm), Строка(ТекНачисление.edizm), "X");
					СтрокаУслуга.kod       = Строка(ТекНачисление.kod);
					СтрокаУслуга.sum       = Строка(ТекНачисление.sum);
					СтрокаУслуга.volumep   = Строка(?(ТекНачисление.ОсновнаяСтрока, "0", ТекНачисление.volumep));
					СтрокаУслуга.volumea   = Строка(?(ТекНачисление.ОсновнаяСтрока, "0", ТекНачисление.volumea));
					
					Если ТекНачисление.СтрокаДетализации Тогда
						СтрокаУслуга.name         = Строка(ТекНачисление.SName);
						СтрокаУслуга.correction   = "X";
						СтрокаУслуга.peni         = "X";
						СтрокаУслуга.sumpayed     = "X";
						СтрокаУслуга.compensation = "X";
						СтрокаУслуга.sumtopay     = "X";
						СтрокаУслуга.debtbeg      = "X";
						СтрокаУслуга.debtend      = "X";
						СтрокаУслуга.norm         = "0";
					Иначе
						СтрокаУслуга.name         = Строка(ТекНачисление.VidName);
						СтрокаУслуга.correction   = Строка(ТекНачисление.correction);
						СтрокаУслуга.peni         = Строка(ТекНачисление.peni);
						СтрокаУслуга.sumpayed     = Строка(-ТекНачисление.sumpayed);
						СтрокаУслуга.compensation = Строка(-ТекНачисление.compensation);
						СтрокаУслуга.debtbeg      = Строка(ТекНачисление.debtbeg);
						СтрокаУслуга.debtend      = Строка(ТекНачисление.debtend);
						СтрокаУслуга.norm         = Строка(ТекНачисление.norm);
						
						Если ТекНачисление.УслугаЯвляетсяСоставной Тогда
							СтрокаУслуга.sumtopay = "X";
						Иначе
							СтрокаУслуга.sumtopay = Строка(ТекНачисление.msumtopay);
						КонецЕсли;
					КонецЕсли;
					
					// ИПУ и ОПУ хранятся в массивах.
					СтрокаУслуга.meter  = Новый Массив;
					СтрокаУслуга.hmeter = Новый Массив;
					
					// Если проводится детализация по видам тарифов, то не выгружать сведения о приборах учета.
					Если НЕ ТекНачисление.ОсновнаяСтрока Тогда
						Для каждого ТекИПУ из СтрокиИПУПоВидуУслуги Цикл
							СтрокаУслуга.meter.Добавить(Строка(ТекИПУ.kod));
						КонецЦикла;
					КонецЕсли;
					
					// Запись данных по ОПУ, если таковые имеются.
					Если НЕ СтрокиОПУДляЛС.Количество()= 0 ИЛИ НЕ СтрокиОПУДляЛСПодъезд.Количество() = 0 Тогда
						
						// Если проводится детализация по видам тарифов, то не выгружать сведения о приборах учета.
						Если НЕ ТекНачисление.ОсновнаяСтрока Тогда
							Для каждого ТекСчетчик из СтрокиОПУДляЛС Цикл
								СтрокаУслуга.hmeter.Добавить(Строка(ТекСчетчик.kod));
							КонецЦикла;
							
							Для каждого ТекСчетчик из СтрокиОПУДляЛСПодъезд Цикл
								СтрокаУслуга.hmeter.Добавить(Строка(ТекСчетчик.kod));
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ТекНачисление.УслугаПоСчетчикам И НЕ ТекНачисление.УслугаСоставнаяПоСчетчикам Тогда
						// Проверка значения флага "Выводить инд расход для всех услуг".
						СтрокаУслуга.ammount  = ?(НастройкиВыводаКвитанций.ВыводитьИндРасходДляВсехУслуг И НЕ ТекНачисление.УслугаЯвляетсяСоставной И НЕ ТекНачисление.ОсновнаяСтрокаСоставной, Строка(ТекНачисление.ammount), "X");
						СтрокаУслуга.hammount = "X";
					Иначе
						СтрокаУслуга.ammount  = Строка(ТекНачисление.ammount);
						СтрокаУслуга.hammount = Строка(ТекНачисление.hammount);
					КонецЕсли;
					
					// Общедомовые начисления
					СтрокаУслуга.volumeh   = Строка(ТекНачисление.volumeh);
					СтрокаУслуга.hnorm     = ?(ЗначениеЗаполнено(ТекНачисление.hnorm), Строка(ТекНачисление.hnorm), "0");
					СтрокаУслуга.hsumtopay = ?(ТекНачисление.СтрокаДетализации
										   ИЛИ ТекНачисление.ОсновнаяСтрокаСоставной
										   ИЛИ ТекНачисление.УслугаЯвляетсяСоставной
										   ИЛИ НЕ ТекНачисление.УслугаПоСчетчикам, "X", Строка(Окр(ТекНачисление.hsumtopay, 2, РежимОкругления.Окр15как20)));
					
					Если ТекНачисление.УслугаПоСчетчикам ИЛИ ТекНачисление.УслугаСоставнаяПоСчетчикам Тогда
						СтрокаУслуга.hsum = Строка(ТекНачисление.hsum);
					Иначе
						СтрокаУслуга.hsum = "X";
					КонецЕсли;
					
					// Тарифы.
					СтрокаУслуга.tarif1 = ?(ТекНачисление.tarif1 = 0, "X", Строка(ТекНачисление.tarif1) + ?(ТекНачисление.УслугаЯвляетсяСоставной, ?(ТекНачисление.tarif2 = 0 ИЛИ ТекНачисление.НачисленоНч = 0, "", "/" + Строка(ТекНачисление.tarif2) + ?(ТекНачисление.tarif3 = 0 ИЛИ ТекНачисление.НачисленоПк = 0, "", "/" + Строка(ТекНачисление.tarif3))), ""));
					Если ТекНачисление.Многотарифная Тогда
						СтрокаУслуга.tarif2 = Строка(ТекНачисление.tarif2);
						СтрокаУслуга.tarif3 = Строка(ТекНачисление.tarif3);
					Иначе
						СтрокаУслуга.tarif2 = "";
						СтрокаУслуга.tarif3 = "";
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			// РАСССРОЧКА
			Если Не СтрокиРассрочки.Количество() = 0 Тогда
				
				НоваяСтрока.credit = Новый ТаблицаЗначений;
				НоваяСтрока.credit.Колонки.Добавить("name");
				НоваяСтрока.credit.Колонки.Добавить("sum");
				НоваяСтрока.credit.Колонки.Добавить("sumcredit");
				НоваяСтрока.credit.Колонки.Добавить("rate");
				НоваяСтрока.credit.Колонки.Добавить("balance");
				НоваяСтрока.credit.Колонки.Добавить("sumtopay");
				НоваяСтрока.credit.Колонки.Добавить("contractor");
				
				Для Каждого СтрокаРассрочки Из СтрокиРассрочки Цикл
					НоваяСтрокаРассрочки = НоваяСтрока.credit.Добавить();
					
					НоваяСтрокаРассрочки.name       = Строка(СтрокаРассрочки.ВидУслуги);
					НоваяСтрокаРассрочки.contractor = Строка(СтрокаРассрочки.КодПоставщика);
					НоваяСтрокаРассрочки.sum        = Строка(СтрокаРассрочки.Начислено);
					НоваяСтрокаРассрочки.sumcredit  = Строка(СтрокаРассрочки.НачисленоКомиссия);
					НоваяСтрокаРассрочки.rate       = Строка(СтрокаРассрочки.ПроцентнаяСтавка);
					НоваяСтрокаРассрочки.balance    = Строка(СтрокаРассрочки.Остаток);
					НоваяСтрокаРассрочки.sumtopay   = Строка(СтрокаРассрочки.КОплате);
				КонецЦикла;
				
			КонецЕсли;
			
			// ПЕРЕРАСЧЕТЫ
			Если НЕ СтрокиПерерасчетов.Количество() = 0 Тогда
				
				НоваяСтрока.correction = Новый ТаблицаЗначений;
				НоваяСтрока.correction.Колонки.Добавить("contractor");
				НоваяСтрока.correction.Колонки.Добавить("service");
				НоваяСтрока.correction.Колонки.Добавить("grounds");
				НоваяСтрока.correction.Колонки.Добавить("summ");
				
				Для каждого СтрокаПерерасчета из СтрокиПерерасчетов Цикл
					НоваяСтрокаПерерасчетов = НоваяСтрока.correction.Добавить();
					
					НоваяСтрокаПерерасчетов.contractor = СтрокаПерерасчета.КодПоставщика;
					НоваяСтрокаПерерасчетов.service    = СтрокаПерерасчета.ВидУслуги;
					НоваяСтрокаПерерасчетов.grounds    = СтрокаПерерасчета.correctionReason;
					НоваяСтрокаПерерасчетов.summ       = СтрокаПерерасчета.correction;
				КонецЦикла;
				
			КонецЕсли;
			
			// НАЧАЛЬНОЕ САЛЬДО
			Если НЕ СтрокиНачальногоСальдо.Количество() = 0 Тогда
				
				НоваяСтрока.item_debt = Новый ТаблицаЗначений;
				НоваяСтрока.item_debt.Колонки.Добавить("name");
				НоваяСтрока.item_debt.Колонки.Добавить("kod");
				НоваяСтрока.item_debt.Колонки.Добавить("edizm");
				НоваяСтрока.item_debt.Колонки.Добавить("debtbeg");
				НоваяСтрока.item_debt.Колонки.Добавить("debtend");
				НоваяСтрока.item_debt.Колонки.Добавить("peni");
				НоваяСтрока.item_debt.Колонки.Добавить("sumpayed");
				
				Для Каждого СтрокаНачальногоСальдо Из СтрокиНачальногоСальдо Цикл
					НоваяСтрокаСальдо = НоваяСтрока.item_debt.Добавить();
					
					НоваяСтрокаСальдо.name     = СтрокаНачальногоСальдо.VidName;
					НоваяСтрокаСальдо.kod      = СтрокаНачальногоСальдо.kod;
					НоваяСтрокаСальдо.edizm    = СтрокаНачальногоСальдо.edizm;
					НоваяСтрокаСальдо.debtbeg  = СтрокаНачальногоСальдо.debtbeg;
					НоваяСтрокаСальдо.debtend  = СтрокаНачальногоСальдо.debtend;
					НоваяСтрокаСальдо.peni     = СтрокаНачальногоСальдо.peni;
					НоваяСтрокаСальдо.sumpayed = -СтрокаНачальногоСальдо.sumpayed;
				КонецЦикла;
				
			КонецЕсли;
			
			// ИПУ
			Если НЕ СтрокиИПУ.Количество() = 0 Тогда
				
				НоваяСтрока.meter = Новый ТаблицаЗначений;
				НоваяСтрока.meter.Колонки.Добавить("del");
				НоваяСтрока.meter.Колонки.Добавить("value_count");
				НоваяСтрока.meter.Колонки.Добавить("indicbef1");
				НоваяСтрока.meter.Колонки.Добавить("indicbef2");
				НоваяСтрока.meter.Колонки.Добавить("indicbef3");
				НоваяСтрока.meter.Колонки.Добавить("date_indicbef");
				НоваяСтрока.meter.Колонки.Добавить("indiccur1");
				НоваяСтрока.meter.Колонки.Добавить("indiccur2");
				НоваяСтрока.meter.Колонки.Добавить("indiccur3");
				НоваяСтрока.meter.Колонки.Добавить("date_indiccur");
				НоваяСтрока.meter.Колонки.Добавить("charge1");
				НоваяСтрока.meter.Колонки.Добавить("charge2");
				НоваяСтрока.meter.Колонки.Добавить("charge3");
				НоваяСтрока.meter.Колонки.Добавить("kod");
				НоваяСтрока.meter.Колонки.Добавить("name");
				НоваяСтрока.meter.Колонки.Добавить("num");
				НоваяСтрока.meter.Колонки.Добавить("service");
				НоваяСтрока.meter.Колонки.Добавить("capacity");
				НоваяСтрока.meter.Колонки.Добавить("verificationDate"); // Дата поверки
				
				// Записываем и заполняем элементы "meter" для текущего элемента "PersAcc".
				Для Каждого ТекСчетчик Из СтрокиИПУ Цикл
					
					// "meter" - данные по индивидуальным счетчикам.
					СтрокаСчетчик                  = НоваяСтрока.meter.Добавить();
					СтрокаСчетчик.del              = НЕ ТекСчетчик.Действует;
					СтрокаСчетчик.value_count      = Строка(ТекСчетчик.value_count);
					СтрокаСчетчик.kod              = Строка(ТекСчетчик.kod);
					СтрокаСчетчик.name             = Строка(ТекСчетчик.MName);
					СтрокаСчетчик.num              = Строка(ТекСчетчик.num);
					СтрокаСчетчик.service          = Строка(ТекСчетчик.SName);
					СтрокаСчетчик.capacity         = Строка(ТекСчетчик.capacity);
					СтрокаСчетчик.indiccur1        = Строка(ТекСчетчик.indiccur1);
					СтрокаСчетчик.indiccur2        = Строка(ТекСчетчик.indiccur2);
					СтрокаСчетчик.indiccur3        = Строка(ТекСчетчик.indiccur3);
					СтрокаСчетчик.date_indiccur    = Строка(ТекСчетчик.date_indiccur);
					СтрокаСчетчик.verificationDate = ?(ТекСчетчик.ДатаПоверки = Неопределено, "", Формат(ТекСчетчик.ДатаПоверки, "ДФ=дд.ММ.гггг"));
					
					// Даты показаний.
					Если ЗначениеЗаполнено(ТекСчетчик.date_indicbef) И НЕ ТекСчетчик.date_indicbef = ТекСчетчик.date_indiccur Тогда
						СтрокаСчетчик.indicbef1     = Строка(ТекСчетчик.indicbef1);
						СтрокаСчетчик.indicbef2     = Строка(ТекСчетчик.indicbef2);
						СтрокаСчетчик.indicbef3     = Строка(ТекСчетчик.indicbef3);
						СтрокаСчетчик.date_indicbef = Строка(ТекСчетчик.date_indicbef);
						СтрокаСчетчик.charge1       = Строка(ТекСчетчик.indiccur1 - ТекСчетчик.indicbef1);
						СтрокаСчетчик.charge2       = Строка(ТекСчетчик.indiccur2 - ТекСчетчик.indicbef2);
						СтрокаСчетчик.charge3       = Строка(ТекСчетчик.indiccur3 - ТекСчетчик.indicbef3);
					Иначе
						СтрокаСчетчик.indicbef1     = "";
						СтрокаСчетчик.indicbef2     = "";
						СтрокаСчетчик.indicbef3     = "";
						СтрокаСчетчик.date_indicbef = "";
						
						Если ТекСчетчик.НачальноеПоказание Тогда
							СтрокаСчетчик.charge1 = "0";
							СтрокаСчетчик.charge2 = "0";
							СтрокаСчетчик.charge3 = "0";
						Иначе
							СтрокаСчетчик.charge1 = Строка(ТекСчетчик.indiccur1);
							СтрокаСчетчик.charge2 = Строка(ТекСчетчик.indiccur2);
							СтрокаСчетчик.charge3 = Строка(ТекСчетчик.indiccur3);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// ПОСТАВЩИКИ
			Если НЕ СтрокиПоставщиков.Количество() = 0 Тогда
				
				НоваяСтрока.contractor = Новый ТаблицаЗначений;
				НоваяСтрока.contractor.Колонки.Добавить("id");
				НоваяСтрока.contractor.Колонки.Добавить("num");
				НоваяСтрока.contractor.Колонки.Добавить("services");
				НоваяСтрока.contractor.Колонки.Добавить("debtbeg");
				НоваяСтрока.contractor.Колонки.Добавить("sumpayed");
				НоваяСтрока.contractor.Колонки.Добавить("peni");
				НоваяСтрока.contractor.Колонки.Добавить("sum");
				НоваяСтрока.contractor.Колонки.Добавить("sumtopay");
				НоваяСтрока.contractor.Колонки.Добавить("summ");
				
				НомерПоставщика = 1;
				
				Для Каждого ТекПоставщик Из СтрокиПоставщиков Цикл
					СтрокаПоставщик          = НоваяСтрока.contractor.Добавить();
					СтрокаПоставщик.id       = Строка(ТекПоставщик.CONId);
					СтрокаПоставщик.services = ТекПоставщик.ВидыУслуг;
					СтрокаПоставщик.debtbeg  = Строка(ТекПоставщик.debtbeg);
					СтрокаПоставщик.sumpayed = Строка(-ТекПоставщик.sumpayed);
					СтрокаПоставщик.peni     = Строка(ТекПоставщик.peni);
					СтрокаПоставщик.sum      = Строка(ТекПоставщик.sum);
					СтрокаПоставщик.sumtopay = Строка(ТекПоставщик.sumtopay);
					СтрокаПоставщик.summ     = Строка(ТекПоставщик.summ);
					
					Если ТекПоставщик.ЭтоСведенияТекущейОрганизации Тогда
						СтрокаПоставщик.num = "";
					Иначе
						СтрокаПоставщик.num = Строка(НомерПоставщика);
						НомерПоставщика     = НомерПоставщика + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Параметры доступа
		Если НЕ НастройкиОбмена.Свойство("ТаблицаЛС") Тогда
			Возврат СтруктураВыгрузки;
		КонецЕсли;
		
		Для каждого СтрокаЛС из НастройкиОбмена.ТаблицаЛС Цикл
			
			Если СтрокаЛС = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекЛС = СтрокаЛС.ЛицевойСчет;
			
			// Проверка на заполненность идентификатора.
			// Сведения по л/с с пустым идентификатором не передаются.
			ИдентификаторЛС = СокрЛП(ТекЛС.Идентификатор);
			
			Если ИдентификаторЛС = "" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = СтруктураВыгрузки.PersAcc.Добавить();
			НоваяСтрока.kod_ls     = ?(ИспользоватьПрефиксСтарыйМеханизм, ПрефиксЛС, "") + ИдентификаторЛС;
			НоваяСтрока.kod_ls_new = ПрефиксЛС + " " + ИдентификаторЛС;
			НоваяСтрока.login      = Строка(СтрокаЛС.Логин);
			НоваяСтрока.password   = Строка(СтрокаЛС.Пароль);
			НоваяСтрока.email      = СокрЛП(ТекЛС.АдресЭлектроннойПочты);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураВыгрузки;
	
КонецФункции

// Формирует массив всех л/с выбранной организации, действующих на указанную дату.
// 
// Параметры:
//  Организация - выбранная организация
//  НастройкиОбмена - Структура - настройки обмена
//  ДатаОбмена - дата - за которую происходит обмен данными.
// 
// Возвращаемое значение:
//  Массив - массив л/с
//
// Примечание:
//  Функция должна возвращать массив со всеми лицевыми счетами, сведения о которых планируется передать
//  на сайт в ходе обмена основными учетными данными (начисления, показания по ПУ и т. д.).
//
Функция ПолучитьМассивЛицевыхСчетовОрганизации(Организация, СтруктураНастроек, ДатаОбмена)
	
	УсловиеНаЛС = "";
	
	Запрос = Новый Запрос;
	
	Если НЕ СтруктураНастроек.СписокЛицевыхСчетов.Количество() = 0 Тогда
		УсловиеНаЛС = " И ЛицевойСчет В (&МассивЛС)";
		
		Запрос.УстановитьПараметр("МассивЛС", СтруктураНастроек.СписокЛицевыхСчетов);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКон,
	|			НЕ ЛицевойСчет.ЭтоГруппа
	|				И НЕ ЛицевойСчет.Идентификатор = """"" + УсловиеНаЛС + ") КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)
	|				И Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|ГДЕ
	|	(УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.СрокДействия >= &ДатаНач)
	|	И НЕ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.ПометкаУдаления";	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(ДатаОбмена));
	Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(ДатаОбмена));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.ВыгрузитьКолонку("ЛицевойСчет");
	
КонецФункции // ПолучитьМассивЛицевыхСчетовОрганизации()

// Формирует массив услуг, данные по которым необходимо выгрузить.
//
// Параметры:
//  НастройкиОбмена - Структура - настройки обмена.
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена данными.
//
// Возвращаемое значение:
//  Массив.
//
Функция ПолучитьМассивУслуг(НастройкаОбменаДанными)
	
	НастройкаСбораДанных = ?(НастройкаОбменаДанными = Неопределено, Неопределено, НастройкаОбменаДанными.НастройкаСбораДанных);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Услуга
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	НЕ КВП_Услуги.ЭтоГруппа";
	
	Если Не НастройкаОбменаДанными = Неопределено И Не НастройкаСбораДанных = Неопределено
	   И НастройкаСбораДанных.ВыбранныеУслуги.Количество() > 0 Тогда
		Если НастройкаСбораДанных.ВыборУслуг = "Выбранные услуги" Тогда
			Запрос.Текст = Запрос.Текст +
			"
			| И КВП_Услуги.Ссылка В (&МассивУслуг)";
		ИначеЕсли НастройкаСбораДанных.ВыборУслуг = "Все услуги, кроме выбранных" Тогда
			Запрос.Текст = Запрос.Текст +
			"
			| И НЕ КВП_Услуги.Ссылка В (&МассивУслуг)";
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивУслуг", НастройкаСбораДанных.ВыбранныеУслуги.Выгрузить().ВыгрузитьКолонку("Услуга"));
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Услуга");
	
КонецФункции // ПолучитьМассивУслуг()

// Формирует массив видов услуг, данные по которым необходимо выгрузить.
//
// Параметры:
//  МассивУслуг - Массив - услуги выгрузки.
//
// Возвращаемое значение:
//  Массив.
//
Функция ПолучитьМассивВидовУслуг(МассивУслуг)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Услуги.ВидУслуги
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	КВП_Услуги.Ссылка В(&МассивУслуг)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_Услуги.ВидУслуги";
	
	Запрос.УстановитьПараметр("МассивУслуг", МассивУслуг);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидУслуги");
	
КонецФункции // ПолучитьМассивВидовУслуг()

// Формирует структуру, содержащую сведения об организации.
// 
// Параметры:
//  Организация - выбранная организация
//  ТипФайла    - строка, определяет значение поля "filetype" выходной структуры.
//  ВыгружатьВсеДанные - булево, определяет, добавить ли в выходную структуру
//    сведения о банковском счете организации.
//  ДатаОбмена - дата - за которую происходит обмена данными.
// 
// Возвращаемое значение:
//  Структура - содержит сведения о выбранной организации.
//
// Примечание:
//  Данная структура будет использоваться для формирования файла обмена.
//  Поэтому наличие и наименования ключей структуры должно быть неизменно.
//
Функция ПолучитьСведенияОбОрганизации(Организация, ТипФайла, ВыгружатьВсеДанные = Ложь, ДатаОбмена)
	
	СтруктураОрганизации = Новый Структура("Ссылка, name, inn, filedate, filetype, version",
								Организация,
								Организация.Наименование, // name
								Организация.ИНН,          // inn
								?(КонецДня(ДатаОбмена) = КонецДня(ТекущаяДата()), ДатаОбмена, КонецМесяца(ДатаОбмена)), // filedate
								ТипФайла,                 // filetype
								"3"); // version
	
	Если ВыгружатьВсеДанные Тогда
		
		БанковскийСчет = Организация.ОсновнойБанковскийСчет;
		Банк           = БанковскийСчет.Банк;
		
		СтруктураОрганизации.Вставить("kpp",  Организация.КПП); // КПП
		СтруктураОрганизации.Вставить("bank", Банк.ПолноеНаименование()); // банк
		СтруктураОрганизации.Вставить("bik",  Банк.Код); // БИК
		СтруктураОрганизации.Вставить("ks",   Банк.КоррСчет); // Коррсчет
		СтруктураОрганизации.Вставить("rs",   БанковскийСчет.НомерСчета); // Расчетный счет
		
	КонецЕсли;
	
	Возврат СтруктураОрганизации;
	
КонецФункции // ПолучитьСведенияОбОрганизации()

// Формирует таблицу начислений.
// 
// Параметры:
//  Организация - выбранная организация.
//  МассивЛС    - массив л/с.
//  МассивУслуг - массив - массив услуг, данные по которым необходимо выгрузить.
//  МассивВидовУслуг - массив - массив видов услуг, данные по которым необходимо выгрузить.
//  ДатаОбмена - дата - за которую происходит обмена данными.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица начислений.
//
// Примечание:
//  Данные текущей таблицы значений будут использоваться для формирования файл обмена.
//  Поэтому наличие и наименование колонок таблицы должно быть неизменно.
//  
//  Колонки:
//   ЛицевойСчет - ссылка на лицевой счет.
//   Услуга - ссылка на услугу.
//   SName - наименование услуги.
//   VidName - наименование вида услуги.
//   kod - код услуги.
//   edizm - единица измерения услуги.
//   tarif1 - размер дневного вида тарифа по услуге.
//   tarif2 - размер ночного вида тарифа по услуге.
//   tarif3 - размер пикового вида тарифа по услуге.
//   Многотарифная - факт того, что услуга является многотарифной.
//   ammount - суммарный объем потребления услуги лицевым счетом.
//   hammount - общедомовой объем потребления услуги лицевым счетом.
//   sum - сумма начисления на лицевой счет по услуге без учета перерасчетов, пеней и льгот.
//   hsum - ОДН на лицевой счет по услуге.
//   sumpayed - сумма оплат, внесенных лицевым счетом по услуге.
//   ДатаПоследнейОплаты - дата последней поступившей оплаты от лицевого счета по услуге.
//   correction - сумма перерасчетов по услуге.
//   peni - сумма пеней, начисленных на лицевой счет по услуге.
//   compensation - сумма льгот, начисленных на лицевой счет по услуге.
//   msumtopay - сумма начисления на лицевой счет по услуге с учетом перерасчетов, пеней и льгот.
//   hsumtopay - ОДН на лицевой счет по услуге с учетом перерасчетов, пеней и льгот.
//   debtbeg - начальное сальдо по лицевому счету - услуге.
//   debtend - конечное сальдо по лицевому счету - услуге.
//   norm - размер нормы, установленной на лицевой счет по услуге.
//   hnorm - размер нормы, установленной на здание по услуге.
//   РасходИПУОбщ - суммарный объем индивидуальный потребления услуги всеми лицевыми счетами здания.
//   volumeh - суммарный объем потребления услуги всеми лицевыми счетами здания, пошедший на ОДН.
//   CONId - код поставщика услуги.
//   summ - итоговая сумма начисления на лицевой счет по всем услугам текущего поставщика услуг.
//   DebtPrev - сумма задолженности лицевого счета за предыдущие периоды по услуге: [Начальное сальдо] - [Внесенные оплаты].
//   SumToPay - итоговая сумма к оплате по лицевому счету - услуге.
//
Функция ПолучитьТаблицуНачислений(Организация, МассивЛС, МассивУслуг, МассивВидовУслуг, ДатаОбмена, НастройкиВыводаКвитанций, ТаблицаУслугВыгружатьНачисления, НастройкаОбменаДанными)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание
	|ПОМЕСТИТЬ втОбъектыЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаКон, ЛицевойСчет В (&МассивЛС)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбъектыЛС.ЛицевойСчет = КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|				ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ) КАК ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбъектыЛС.ЛицевойСчет = КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|				ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Норма,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбъектыЛС.Здание = КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|				ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаОПУ
	|ПОМЕСТИТЬ втТаблицаНорм
	|ИЗ
	|	втОбъектыЛС КАК втОбъектыЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, Услуга В (&МассивУслуг)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|		ПО (втОбъектыЛС.ЛицевойСчет = КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|				ИЛИ втОбъектыЛС.Здание = КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК НачальноеСальдо
	|ПОМЕСТИТЬ втНачальноеСальдо
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаНач,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&МассивЛС)
	|				И Услуга В (&МассивУслуг)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему)
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИндПУ,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|					И (УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИндНормаДн,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|					И (УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИндНормаНч,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|					И (УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИндНормаПк,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|					И (УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИндНормаОбщ,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоОПУ,
	|	СУММА(ВЫБОР
	|			КОГДА (УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|					И УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|					И УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИндПУДн,
	|	СУММА(ВЫБОР
	|			КОГДА (УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|					И УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|					И УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИндПУНч,
	|	СУММА(ВЫБОР
	|			КОГДА (УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|					И УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|					И УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИндПУПк,
	|	СУММА(ВЫБОР
	|			КОГДА (УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|					И УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|					И УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИндПУОбщ,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|					И УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоОПУДн,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|					И УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоОПУНч,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|					И УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоОПУПк,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|					И УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоОПУОбщ
	|ПОМЕСТИТЬ втПотреблениеПоЗданию
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Запись,
	|			Организация = &Организация
	|				И Услуга В (&МассивУслуг)
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|				И (ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец,
	|	УПЖКХ_НачисленияОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.ВидНачисления,
	|	УПЖКХ_НачисленияОбороты.РазделУчета,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК Количество,
	|	СУММА(УПЖКХ_НачисленияОбороты.КоличествоУчетное) КАК КоличествоУчетное,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисления) КАК Начислено,
	|	УПЖКХ_НачисленияОбороты.Период КАК Период,
	|	УПЖКХ_НачисленияОбороты.ОснованиеКорректировки,
	|	УПЖКХ_НачисленияОбороты.Регистратор,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.СоставнаяУслуга = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ УПЖКХ_НачисленияОбороты.СоставнаяУслуга
	|	КОНЕЦ КАК СоставнаяУслуга,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугаЯвляетсяСоставной,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугаСоставнаяПоСчетчикам,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|				ТОГДА ВЫРАЗИТЬ(""1"" КАК СТРОКА(10))
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|				ТОГДА ""3""
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|				ТОГДА ""2""
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК КодВидаНачисленийИПУ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА ""4""
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК КодВидаНачисленийОПУ
	|ПОМЕСТИТЬ втВсеНачисленияЗаПериод
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_НачисленияОбороты
	|ГДЕ
	|	УПЖКХ_НачисленияОбороты.Период >= &ДатаНач
	|	И УПЖКХ_НачисленияОбороты.Период <= &ДатаКон
	|	И УПЖКХ_НачисленияОбороты.Организация = &Организация
	|	И УПЖКХ_НачисленияОбороты.ЛицевойСчет В(&МассивЛС)
	|	И УПЖКХ_НачисленияОбороты.Услуга В(&МассивУслуг)
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.ВидНачисления,
	|	УПЖКХ_НачисленияОбороты.РазделУчета,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	УПЖКХ_НачисленияОбороты.Период,
	|	УПЖКХ_НачисленияОбороты.ОснованиеКорректировки,
	|	УПЖКХ_НачисленияОбороты.Регистратор,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.СоставнаяУслуга = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ УПЖКХ_НачисленияОбороты.СоставнаяУслуга
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга,
	|	ЕСТЬNULL(втВсеНачисленияЗаПериод.СоставнаяУслуга, 1) КАК СоставнаяУслуга,
	|	втВсеНачисленияЗаПериод.УслугаЯвляетсяСоставной,
	|	втВсеНачисленияЗаПериод.УслугаСоставнаяПоСчетчикам,
	|	втВсеНачисленияЗаПериод.КодВидаНачисленийИПУ,
	|	втВсеНачисленияЗаПериод.КодВидаНачисленийОПУ,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоДн,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоНч,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПк,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоОбщ,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоДн,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоНч,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоПк,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоОбщ,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				ТОГДА втВсеНачисленияЗаПериод.КоличествоУчетное
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоУчетноеОбщИПУ,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|				ТОГДА втВсеНачисленияЗаПериод.КоличествоУчетное
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоУчетноеДн,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|				ТОГДА втВсеНачисленияЗаПериод.КоличествоУчетное
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоУчетноеНч,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|				ТОГДА втВсеНачисленияЗаПериод.КоличествоУчетное
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоУчетноеПк,
	|	СУММА(втВсеНачисленияЗаПериод.Начислено) КАК Начислено
	|ПОМЕСТИТЬ втИПУ
	|ИЗ
	|	втВсеНачисленияЗаПериод КАК втВсеНачисленияЗаПериод
	|ГДЕ
	|	втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|	И (втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|			ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|			ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|			ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|			ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|			ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга,
	|	втВсеНачисленияЗаПериод.УслугаЯвляетсяСоставной,
	|	втВсеНачисленияЗаПериод.УслугаСоставнаяПоСчетчикам,
	|	втВсеНачисленияЗаПериод.КодВидаНачисленийИПУ,
	|	втВсеНачисленияЗаПериод.КодВидаНачисленийОПУ,
	|	ЕСТЬNULL(втВсеНачисленияЗаПериод.СоставнаяУслуга, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга,
	|	ЕСТЬNULL(втВсеНачисленияЗаПериод.СоставнаяУслуга, 1) КАК СоставнаяУслуга,
	|	втВсеНачисленияЗаПериод.УслугаЯвляетсяСоставной,
	|	втВсеНачисленияЗаПериод.УслугаСоставнаяПоСчетчикам,
	|	втВсеНачисленияЗаПериод.КодВидаНачисленийИПУ,
	|	втВсеНачисленияЗаПериод.КодВидаНачисленийОПУ,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоДн,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоНч,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПк,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоОбщ,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоДн,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоНч,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоПк,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоОбщ,
	|	СУММА(втВсеНачисленияЗаПериод.Начислено) КАК Начислено
	|ПОМЕСТИТЬ втОПУ
	|ИЗ
	|	втВсеНачисленияЗаПериод КАК втВсеНачисленияЗаПериод
	|ГДЕ
	|	втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|	И втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга,
	|	втВсеНачисленияЗаПериод.УслугаЯвляетсяСоставной,
	|	втВсеНачисленияЗаПериод.УслугаСоставнаяПоСчетчикам,
	|	втВсеНачисленияЗаПериод.КодВидаНачисленийИПУ,
	|	втВсеНачисленияЗаПериод.КодВидаНачисленийОПУ,
	|	ЕСТЬNULL(втВсеНачисленияЗаПериод.СоставнаяУслуга, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга,
	|	ЕСТЬNULL(втВсеНачисленияЗаПериод.СоставнаяУслуга, 1) КАК СоставнаяУслуга,
	|	втВсеНачисленияЗаПериод.УслугаЯвляетсяСоставной,
	|	втВсеНачисленияЗаПериод.УслугаСоставнаяПоСчетчикам,
	|	втВсеНачисленияЗаПериод.КодВидаНачисленийИПУ,
	|	втВсеНачисленияЗаПериод.КодВидаНачисленийОПУ,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Количество,
	|	СУММА(втВсеНачисленияЗаПериод.Начислено) КАК Начислено
	|ПОМЕСТИТЬ втБезПУ
	|ИЗ
	|	втВсеНачисленияЗаПериод КАК втВсеНачисленияЗаПериод
	|ГДЕ
	|	втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|	И втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга,
	|	втВсеНачисленияЗаПериод.УслугаЯвляетсяСоставной,
	|	втВсеНачисленияЗаПериод.УслугаСоставнаяПоСчетчикам,
	|	втВсеНачисленияЗаПериод.КодВидаНачисленийИПУ,
	|	втВсеНачисленияЗаПериод.КодВидаНачисленийОПУ,
	|	ЕСТЬNULL(втВсеНачисленияЗаПериод.СоставнаяУслуга, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга,
	|	ЕСТЬNULL(втВсеНачисленияЗаПериод.СоставнаяУслуга, 1) КАК СоставнаяУслуга,
	|	ЕСТЬNULL(втВсеНачисленияЗаПериод.УслугаЯвляетсяСоставной, ЛОЖЬ) КАК УслугаЯвляетсяСоставной,
	|	ЕСТЬNULL(втВсеНачисленияЗаПериод.УслугаСоставнаяПоСчетчикам, ЛОЖЬ) КАК УслугаСоставнаяПоСчетчикам,
	|	МАКСИМУМ(втВсеНачисленияЗаПериод.КодВидаНачисленийИПУ) КАК КодВидаНачисленийИПУ,
	|	МАКСИМУМ(втВсеНачисленияЗаПериод.КодВидаНачисленийОПУ) КАК КодВидаНачисленийОПУ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ втВсеНачисленияЗаПериод.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|					И (втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ФактическиеЗатраты)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.СервисныеУслуги)
	|						ИЛИ втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|							И втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|							И НЕ втВсеНачисленияЗаПериод.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты)
	|				ТОГДА втВсеНачисленияЗаПериод.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Тариф,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ втВсеНачисленияЗаПериод.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|					И (втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ФактическиеЗатраты)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.СервисныеУслуги)
	|						ИЛИ втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|							И втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|							И НЕ втВсеНачисленияЗаПериод.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|					И втВсеНачисленияЗаПериод.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплат,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И НЕ втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|					И (втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПерерасчета,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И НЕ втВсеНачисленияЗаПериод.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПеней,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаЛьгот,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо)
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВводНачальногоСальдо,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ втВсеНачисленияЗаПериод.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|					И (втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ФактическиеЗатраты)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.СервисныеУслуги)
	|						ИЛИ втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|							И втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|							И НЕ втВсеНачисленияЗаПериод.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты)
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДопНачислений,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|					И втВсеНачисленияЗаПериод.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|				ТОГДА втВсеНачисленияЗаПериод.Период
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ) КАК ДатаПоследнейОплаты,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И НЕ втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|					И (втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
	|				ТОГДА втВсеНачисленияЗаПериод.ОснованиеКорректировки
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ОснованиеКорректировки
	|ПОМЕСТИТЬ втНачисленияБезТарифов
	|ИЗ
	|	втВсеНачисленияЗаПериод КАК втВсеНачисленияЗаПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга,
	|	втВсеНачисленияЗаПериод.УслугаЯвляетсяСоставной,
	|	втВсеНачисленияЗаПериод.УслугаСоставнаяПоСчетчикам,
	|	ЕСТЬNULL(втВсеНачисленияЗаПериод.СоставнаяУслуга, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втИПУ.ЛицевойСчет, ЕСТЬNULL(втОПУ.ЛицевойСчет, втБезПУ.ЛицевойСчет)) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втИПУ.Услуга, ЕСТЬNULL(втОПУ.Услуга, втБезПУ.Услуга)) КАК Услуга,
	|	ЕСТЬNULL(втИПУ.СоставнаяУслуга, ЕСТЬNULL(втОПУ.СоставнаяУслуга, ЕСТЬNULL(втБезПУ.СоставнаяУслуга, 1))) КАК СоставнаяУслуга,
	|	ЕСТЬNULL(втИПУ.УслугаЯвляетсяСоставной, ЕСТЬNULL(втОПУ.УслугаЯвляетсяСоставной, втБезПУ.УслугаЯвляетсяСоставной)) КАК УслугаЯвляетсяСоставной,
	|	ЕСТЬNULL(втИПУ.УслугаСоставнаяПоСчетчикам, ЕСТЬNULL(втОПУ.УслугаСоставнаяПоСчетчикам, втБезПУ.УслугаСоставнаяПоСчетчикам)) КАК УслугаСоставнаяПоСчетчикам,
	|	МАКСИМУМ(ЕСТЬNULL(втИПУ.КодВидаНачисленийИПУ, ЕСТЬNULL(втОПУ.КодВидаНачисленийИПУ, втБезПУ.КодВидаНачисленийИПУ))) КАК КодВидаНачисленийИПУ,
	|	МАКСИМУМ(ЕСТЬNULL(втИПУ.КодВидаНачисленийОПУ, ЕСТЬNULL(втОПУ.КодВидаНачисленийОПУ, втБезПУ.КодВидаНачисленийОПУ))) КАК КодВидаНачисленийОПУ,
	|	СУММА(ЕСТЬNULL(втБезПУ.Количество, 0) + ЕСТЬNULL(втИПУ.КоличествоДн, 0) + ЕСТЬNULL(втИПУ.КоличествоНч, 0) + ЕСТЬNULL(втИПУ.КоличествоПк, 0) + ЕСТЬNULL(втОПУ.КоличествоДн, 0) + ЕСТЬNULL(втОПУ.КоличествоНч, 0) + ЕСТЬNULL(втОПУ.КоличествоПк, 0) + ЕСТЬNULL(втИПУ.КоличествоОбщ, 0) + ЕСТЬNULL(втОПУ.КоличествоОбщ, 0)) КАК РасходВсего,
	|	СУММА(ЕСТЬNULL(втОПУ.КоличествоДн, 0) + ЕСТЬNULL(втОПУ.КоличествоНч, 0) + ЕСТЬNULL(втОПУ.КоличествоПк, 0) + ЕСТЬNULL(втОПУ.КоличествоОбщ, 0)) КАК РасходОПУ,
	|	СУММА(ЕСТЬNULL(втИПУ.Начислено, 0) + ЕСТЬNULL(втБезПУ.Начислено, 0) + ЕСТЬNULL(втОПУ.Начислено, 0)) КАК НачисленоВсего,
	|	СУММА(ЕСТЬNULL(втИПУ.НачисленоДн, 0) + ЕСТЬNULL(втОПУ.НачисленоДн, 0)) КАК НачисленоДн,
	|	СУММА(ЕСТЬNULL(втИПУ.НачисленоНч, 0) + ЕСТЬNULL(втОПУ.НачисленоНч, 0)) КАК НачисленоНч,
	|	СУММА(ЕСТЬNULL(втИПУ.НачисленоПк, 0) + ЕСТЬNULL(втОПУ.НачисленоПк, 0)) КАК НачисленоПк,
	|	СУММА(ЕСТЬNULL(втИПУ.НачисленоОбщ, 0) + ЕСТЬNULL(втОПУ.НачисленоОбщ, 0)) КАК НачисленоОбщ,
	|	СУММА(ЕСТЬNULL(втИПУ.НачисленоДн, 0)) КАК НачисленоДнИПУ,
	|	СУММА(ЕСТЬNULL(втИПУ.НачисленоНч, 0)) КАК НачисленоНчИПУ,
	|	СУММА(ЕСТЬNULL(втИПУ.НачисленоПк, 0)) КАК НачисленоПкИПУ,
	|	СУММА(ЕСТЬNULL(втИПУ.НачисленоОбщ, 0)) КАК НачисленоОбщИПУ,
	|	СУММА(ЕСТЬNULL(втОПУ.НачисленоДн, 0)) КАК НачисленоДнОПУ,
	|	СУММА(ЕСТЬNULL(втОПУ.НачисленоНч, 0)) КАК НачисленоНчОПУ,
	|	СУММА(ЕСТЬNULL(втОПУ.НачисленоПк, 0)) КАК НачисленоПкОПУ,
	|	СУММА(ЕСТЬNULL(втОПУ.НачисленоОбщ, 0)) КАК НачисленоОбщОПУ,
	|	СУММА(ЕСТЬNULL(втИПУ.КоличествоДн, 0)) КАК КоличествоДнИПУ,
	|	СУММА(ЕСТЬNULL(втИПУ.КоличествоНч, 0)) КАК КоличествоНчИПУ,
	|	СУММА(ЕСТЬNULL(втИПУ.КоличествоПк, 0)) КАК КоличествоПкИПУ,
	|	СУММА(ЕСТЬNULL(втИПУ.КоличествоУчетноеОбщИПУ, 0)) КАК КоличествоУчетноеОбщИПУ,
	|	СУММА(ЕСТЬNULL(втИПУ.КоличествоУчетноеДн, 0)) КАК КоличествоУчетноеДнИПУ,
	|	СУММА(ЕСТЬNULL(втИПУ.КоличествоУчетноеНч, 0)) КАК КоличествоУчетноеНчИПУ,
	|	СУММА(ЕСТЬNULL(втИПУ.КоличествоУчетноеПк, 0)) КАК КоличествоУчетноеПкИПУ,
	|	СУММА(ЕСТЬNULL(втИПУ.КоличествоОбщ, 0)) КАК КоличествоОбщИПУ,
	|	СУММА(ЕСТЬNULL(втОПУ.КоличествоДн, 0)) КАК КоличествоДнОПУ,
	|	СУММА(ЕСТЬNULL(втОПУ.КоличествоНч, 0)) КАК КоличествоНчОПУ,
	|	СУММА(ЕСТЬNULL(втОПУ.КоличествоПк, 0)) КАК КоличествоПкОПУ,
	|	СУММА(ЕСТЬNULL(втОПУ.КоличествоОбщ, 0)) КАК КоличествоОбщОПУ,
	|	СУММА(ЕСТЬNULL(втОПУ.Начислено, 0)) КАК НачисленоОПУ
	|ПОМЕСТИТЬ втНачисленияПоУслугам
	|ИЗ
	|	втИПУ КАК втИПУ
	|		ПОЛНОЕ СОЕДИНЕНИЕ втОПУ КАК втОПУ
	|		ПО втИПУ.ЛицевойСчет = втОПУ.ЛицевойСчет
	|			И втИПУ.Услуга = втОПУ.Услуга
	|			И втИПУ.СоставнаяУслуга = втОПУ.СоставнаяУслуга
	|			И втИПУ.УслугаЯвляетсяСоставной = втОПУ.УслугаЯвляетсяСоставной
	|			И втИПУ.УслугаСоставнаяПоСчетчикам = втОПУ.УслугаСоставнаяПоСчетчикам
	|			И втИПУ.КодВидаНачисленийИПУ = втОПУ.КодВидаНачисленийИПУ
	|			И втИПУ.КодВидаНачисленийОПУ = втОПУ.КодВидаНачисленийОПУ
	|		ПОЛНОЕ СОЕДИНЕНИЕ втБезПУ КАК втБезПУ
	|		ПО втИПУ.ЛицевойСчет = втБезПУ.ЛицевойСчет
	|			И втИПУ.Услуга = втБезПУ.Услуга
	|			И втИПУ.СоставнаяУслуга = втБезПУ.СоставнаяУслуга
	|			И втИПУ.УслугаЯвляетсяСоставной = втБезПУ.УслугаЯвляетсяСоставной
	|			И втИПУ.УслугаСоставнаяПоСчетчикам = втБезПУ.УслугаСоставнаяПоСчетчикам
	|			И втИПУ.КодВидаНачисленийИПУ = втБезПУ.КодВидаНачисленийИПУ
	|			И втИПУ.КодВидаНачисленийОПУ = втБезПУ.КодВидаНачисленийОПУ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втИПУ.ЛицевойСчет, ЕСТЬNULL(втОПУ.ЛицевойСчет, втБезПУ.ЛицевойСчет)),
	|	ЕСТЬNULL(втИПУ.Услуга, ЕСТЬNULL(втОПУ.Услуга, втБезПУ.Услуга)),
	|	ЕСТЬNULL(втИПУ.СоставнаяУслуга, ЕСТЬNULL(втОПУ.СоставнаяУслуга, ЕСТЬNULL(втБезПУ.СоставнаяУслуга, 1))),
	|	ЕСТЬNULL(втИПУ.УслугаЯвляетсяСоставной, ЕСТЬNULL(втОПУ.УслугаЯвляетсяСоставной, втБезПУ.УслугаЯвляетсяСоставной)),
	|	ЕСТЬNULL(втИПУ.УслугаСоставнаяПоСчетчикам, ЕСТЬNULL(втОПУ.УслугаСоставнаяПоСчетчикам, втБезПУ.УслугаСоставнаяПоСчетчикам))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(втНачисленияПоУслугам.ЛицевойСчет, ЕСТЬNULL(втНачальноеСальдо.ЛицевойСчет, втНачисленияБезТарифов.ЛицевойСчет)) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втНачисленияПоУслугам.Услуга, ЕСТЬNULL(втНачальноеСальдо.Услуга, втНачисленияБезТарифов.Услуга)) КАК Услуга,
	|	ЕСТЬNULL(втНачисленияБезТарифов.Тариф, 0) КАК Тариф,
	|	ЕСТЬNULL(втНачисленияПоУслугам.ЛицевойСчет.Адрес.Подъезд, ЕСТЬNULL(втНачальноеСальдо.ЛицевойСчет.Адрес.Подъезд, втНачисленияБезТарифов.ЛицевойСчет.Адрес.Подъезд)) КАК Подъезд,
	|	ЕСТЬNULL(втНачисленияПоУслугам.ЛицевойСчет.Адрес.Владелец, ЕСТЬNULL(втНачальноеСальдо.ЛицевойСчет.Адрес.Владелец, втНачисленияБезТарифов.ЛицевойСчет.Адрес.Владелец)) КАК Здание,
	|	ЕСТЬNULL(втНачисленияПоУслугам.СоставнаяУслуга, ЕСТЬNULL(втНачисленияБезТарифов.СоставнаяУслуга, 1)) КАК СоставнаяУслуга,
	|	МАКСИМУМ(ЕСТЬNULL(втНачисленияПоУслугам.УслугаЯвляетсяСоставной, ЕСТЬNULL(втНачисленияБезТарифов.УслугаЯвляетсяСоставной, ЛОЖЬ))) КАК УслугаЯвляетсяСоставной,
	|	МАКСИМУМ(ЕСТЬNULL(втНачисленияПоУслугам.УслугаСоставнаяПоСчетчикам, ЕСТЬNULL(втНачисленияБезТарифов.УслугаСоставнаяПоСчетчикам, ЛОЖЬ))) КАК УслугаСоставнаяПоСчетчикам,
	|	МАКСИМУМ(ЕСТЬNULL(втНачисленияПоУслугам.КодВидаНачисленийИПУ, ЕСТЬNULL(втНачисленияБезТарифов.КодВидаНачисленийИПУ, """"))) КАК КодВидаНачисленийИПУ,
	|	МАКСИМУМ(ЕСТЬNULL(втНачисленияПоУслугам.КодВидаНачисленийОПУ, ЕСТЬNULL(втНачисленияБезТарифов.КодВидаНачисленийОПУ, """"))) КАК КодВидаНачисленийОПУ
	|ПОМЕСТИТЬ втОбъектыНачислений
	|ИЗ
	|	втНачисленияПоУслугам КАК втНачисленияПоУслугам
	|		ПОЛНОЕ СОЕДИНЕНИЕ втНачальноеСальдо КАК втНачальноеСальдо
	|		ПО втНачисленияПоУслугам.ЛицевойСчет = втНачальноеСальдо.ЛицевойСчет
	|			И втНачисленияПоУслугам.Услуга = втНачальноеСальдо.Услуга
	|		ПОЛНОЕ СОЕДИНЕНИЕ втНачисленияБезТарифов КАК втНачисленияБезТарифов
	|		ПО втНачисленияПоУслугам.ЛицевойСчет = втНачисленияБезТарифов.ЛицевойСчет
	|			И втНачисленияПоУслугам.Услуга = втНачисленияБезТарифов.Услуга
	|			И втНачисленияПоУслугам.СоставнаяУслуга = втНачисленияБезТарифов.СоставнаяУслуга
	|			И втНачисленияПоУслугам.УслугаЯвляетсяСоставной = втНачисленияБезТарифов.УслугаЯвляетсяСоставной
	|			И втНачисленияПоУслугам.УслугаСоставнаяПоСчетчикам = втНачисленияБезТарифов.УслугаСоставнаяПоСчетчикам
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втНачисленияПоУслугам.ЛицевойСчет, ЕСТЬNULL(втНачальноеСальдо.ЛицевойСчет, втНачисленияБезТарифов.ЛицевойСчет)),
	|	ЕСТЬNULL(втНачисленияПоУслугам.Услуга, ЕСТЬNULL(втНачальноеСальдо.Услуга, втНачисленияБезТарифов.Услуга)),
	|	ЕСТЬNULL(втНачисленияБезТарифов.Тариф, 0),
	|	ЕСТЬNULL(втНачисленияПоУслугам.ЛицевойСчет.Адрес.Подъезд, ЕСТЬNULL(втНачальноеСальдо.ЛицевойСчет.Адрес.Подъезд, втНачисленияБезТарифов.ЛицевойСчет.Адрес.Подъезд)),
	|	ЕСТЬNULL(втНачисленияПоУслугам.ЛицевойСчет.Адрес.Владелец, ЕСТЬNULL(втНачальноеСальдо.ЛицевойСчет.Адрес.Владелец, втНачисленияБезТарифов.ЛицевойСчет.Адрес.Владелец)),
	|	ЕСТЬNULL(втНачисленияПоУслугам.СоставнаяУслуга, ЕСТЬNULL(втНачисленияБезТарифов.СоставнаяУслуга, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втОбъектыНачислений.ЛицевойСчет,
	|	втОбъектыНачислений.Услуга,
	|	втОбъектыНачислений.СоставнаяУслуга,
	|	втОбъектыНачислений.УслугаЯвляетсяСоставной,
	|	втОбъектыНачислений.УслугаСоставнаяПоСчетчикам,
	|	втОбъектыНачислений.КодВидаНачисленийИПУ,
	|	втОбъектыНачислений.КодВидаНачисленийОПУ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_ТарифыСрезПоследних.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|				ТОГДА ЕСТЬNULL(КВП_ТарифыСрезПоследних.Тариф, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифДн,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбъектыНачислений.Тариф = 0
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_ТарифыСрезПоследних.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|							ТОГДА ЕСТЬNULL(КВП_ТарифыСрезПоследних.Тариф, 0)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ втОбъектыНачислений.Тариф
	|		КОНЕЦ) КАК ТарифОбщ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_ТарифыСрезПоследних.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|				ТОГДА КВП_ТарифыСрезПоследних.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифНч,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_ТарифыСрезПоследних.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|				ТОГДА КВП_ТарифыСрезПоследних.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифПк
	|ПОМЕСТИТЬ втТарифы
	|ИЗ
	|	втОбъектыНачислений КАК втОбъектыНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_Тарифы.СрезПоследних(
	|				&ДатаКон,
	|				Организация = &Организация
	|					И Услуга В (&МассивУслуг)) КАК КВП_ТарифыСрезПоследних
	|		ПО (втОбъектыНачислений.Услуга = КВП_ТарифыСрезПоследних.Услуга
	|				ИЛИ втОбъектыНачислений.СоставнаяУслуга = КВП_ТарифыСрезПоследних.Услуга)
	|			И (втОбъектыНачислений.ЛицевойСчет.Адрес = КВП_ТарифыСрезПоследних.Объект
	|				ИЛИ втОбъектыНачислений.ЛицевойСчет.Адрес.Владелец = КВП_ТарифыСрезПоследних.Объект
	|				ИЛИ КВП_ТарифыСрезПоследних.Объект = НЕОПРЕДЕЛЕНО)
	|ГДЕ
	|	КВП_ТарифыСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыНачислений.ЛицевойСчет,
	|	втОбъектыНачислений.Услуга,
	|	втОбъектыНачислений.СоставнаяУслуга,
	|	втОбъектыНачислений.УслугаЯвляетсяСоставной,
	|	втОбъектыНачислений.УслугаСоставнаяПоСчетчикам,
	|	втОбъектыНачислений.КодВидаНачисленийИПУ,
	|	втОбъектыНачислений.КодВидаНачисленийОПУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втОбъектыНачислений.ЛицевойСчет,
	|	втОбъектыНачислений.Услуга.ВидУслуги КАК ВидУслуги,
	|	втОбъектыНачислений.Здание КАК Здание,
	|	втОбъектыНачислений.Подъезд КАК Подъезд
	|ПОМЕСТИТЬ втВидыУслугЛС
	|ИЗ
	|	втОбъектыНачислений КАК втОбъектыНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втВидыУслугЛС.ЛицевойСчет,
	|	втВидыУслугЛС.ВидУслуги,
	|	СУММА(ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0)) КАК СуммаНачислений
	|ПОМЕСТИТЬ втНачисленияПоВидамУслуг
	|ИЗ
	|	втВидыУслугЛС КАК втВидыУслугЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияПоУслугам КАК втНачисленияПоУслугам
	|		ПО втВидыУслугЛС.ВидУслуги = втНачисленияПоУслугам.Услуга.ВидУслуги
	|			И втВидыУслугЛС.ЛицевойСчет = втНачисленияПоУслугам.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втВидыУслугЛС.ЛицевойСчет,
	|	втВидыУслугЛС.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втВидыУслугЛС.ЛицевойСчет,
	|	втВидыУслугЛС.ВидУслуги,
	|	СУММА(ЕСТЬNULL(втНачисленияБезТарифов.СуммаДопНачислений, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаВводНачальногоСальдо, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаПерерасчета, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаЛьгот, 0)) КАК СуммаНачислений
	|ПОМЕСТИТЬ втНачисленияПоВидамУслугБезТарифов
	|ИЗ
	|	втВидыУслугЛС КАК втВидыУслугЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияБезТарифов КАК втНачисленияБезТарифов
	|		ПО втВидыУслугЛС.ВидУслуги = втНачисленияБезТарифов.Услуга.ВидУслуги
	|			И втВидыУслугЛС.ЛицевойСчет = втНачисленияБезТарифов.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втВидыУслугЛС.ЛицевойСчет,
	|	втВидыУслугЛС.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втВидыУслугЛС.ЛицевойСчет,
	|	втВидыУслугЛС.ВидУслуги КАК ВидУслуги,
	|	ЕСТЬNULL(УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик, &ПоставщикУО) КАК Поставщик,
	|	втНачисленияПоВидамУслуг.СуммаНачислений + втНачисленияПоВидамУслугБезТарифов.СуммаНачислений КАК НачисленоПоПоставщику,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяУО
	|ПОМЕСТИТЬ втПоставщикиУслуг
	|ИЗ
	|	втВидыУслугЛС КАК втВидыУслугЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияПоВидамУслуг КАК втНачисленияПоВидамУслуг
	|		ПО втВидыУслугЛС.ВидУслуги = втНачисленияПоВидамУслуг.ВидУслуги
	|			И втВидыУслугЛС.ЛицевойСчет = втНачисленияПоВидамУслуг.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияПоВидамУслугБезТарифов КАК втНачисленияПоВидамУслугБезТарифов
	|		ПО втВидыУслугЛС.ВидУслуги = втНачисленияПоВидамУслугБезТарифов.ВидУслуги
	|			И втВидыУслугЛС.ЛицевойСчет = втНачисленияПоВидамУслугБезТарифов.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(
	|				&ДатаКон,
	|				Организация = &Организация
	|					И НЕ ВидУслуги ЕСТЬ NULL
	|					И ВидУслуги В (&МассивВидовУслуг)) КАК УПЖКХ_ПоставщикиУслугСрезПоследних
	|		ПО втВидыУслугЛС.ВидУслуги = УПЖКХ_ПоставщикиУслугСрезПоследних.ВидУслуги
	|			И (ВЫБОР
	|				КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|					ТОГДА втВидыУслугЛС.Здание = УПЖКХ_ПоставщикиУслугСрезПоследних.Объект
	|				КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Объект ССЫЛКА Справочник.КВП_Подъезды
	|					ТОГДА втВидыУслугЛС.Подъезд = УПЖКХ_ПоставщикиУслугСрезПоследних.Объект
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ПорядокУслугВКвитанции.ВидУслуги КАК ВидУслуги,
	|	КВП_ПорядокУслугВКвитанции.Порядок КАК Порядок
	|ПОМЕСТИТЬ втПорядокВыводаУслугВКвитанциях
	|ИЗ
	|	РегистрСведений.КВП_ПорядокУслугВКвитанции КАК КВП_ПорядокУслугВКвитанции
	|ГДЕ
	|	КВП_ПорядокУслугВКвитанции.НастройкаСбораДанных = &НастройкаОбменаДанными
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втОбъектыНачислений.ЛицевойСчет КАК ЛицевойСчет,
	|	втОбъектыНачислений.Услуга КАК Услуга,
	|	втОбъектыНачислений.Услуга.ВидУслуги КАК ВидУслуги,
	|	ВЫБОР
	|		КОГДА втОбъектыНачислений.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугаПоСчетчикам,
	|	ВЫБОР
	|		КОГДА втНачисленияПоУслугам.СоставнаяУслуга = 1
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|		ИНАЧЕ втНачисленияПоУслугам.СоставнаяУслуга
	|	КОНЕЦ КАК СоставнаяУслуга,
	|	втНачисленияПоУслугам.СоставнаяУслуга.Наименование КАК НаименованиеСоставнойУслуги,
	|	втНачисленияПоУслугам.УслугаЯвляетсяСоставной,
	|	втНачисленияПоУслугам.УслугаСоставнаяПоСчетчикам,
	|	втНачисленияПоУслугам.КодВидаНачисленийИПУ,
	|	втНачисленияПоУслугам.КодВидаНачисленийОПУ,
	|	втОбъектыНачислений.Услуга.Наименование КАК SName,
	|	ЕСТЬNULL(втПорядокВыводаУслугВКвитанциях.Порядок, 9999999999) КАК ПорядокВыводаУслуги,
	|	втОбъектыНачислений.Услуга.ВидУслуги.Наименование КАК VidName,
	|	втОбъектыНачислений.Услуга.Код КАК kod,
	|	втОбъектыНачислений.Услуга.ВидУслуги.ЕдиницаИзмерения КАК edizm,
	|	ВЫБОР
	|		КОГДА втТарифы.ТарифДн = 0
	|				ИЛИ ЕСТЬNULL(втНачисленияПоУслугам.КоличествоДнИПУ, 0) = 0
	|					И ЕСТЬNULL(втНачисленияПоУслугам.НачисленоДн, 0) = 0
	|			ТОГДА втТарифы.ТарифОбщ
	|		ИНАЧЕ втТарифы.ТарифДн
	|	КОНЕЦ КАК tarif1,
	|	втТарифы.ТарифНч КАК tarif2,
	|	втТарифы.ТарифПк КАК tarif3,
	|	втТарифы.ТарифДн КАК ТарифДн,
	|	ЕСТЬNULL(втТарифы.ТарифОбщ, ЕСТЬNULL(втНачисленияБезТарифов.Тариф, 0)) КАК ТарифОбщ,
	|	ВЫБОР
	|		КОГДА втТарифы.ТарифДн = втТарифы.ТарифОбщ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбщийИДневнойТарифыРавны,
	|	ВЫБОР
	|		КОГДА втОбъектыНачислений.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|				ИЛИ втОбъектыНачислений.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Многотарифная,
	|	ЕСТЬNULL(втНачисленияПоУслугам.РасходВсего, ЕСТЬNULL(втНачисленияБезТарифов.Количество, 0)) КАК ammount,
	|	ЕСТЬNULL(втНачисленияПоУслугам.РасходОПУ, 0) КАК hammount,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаДопНачислений, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаВводНачальногоСальдо, 0) КАК sum,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоОПУ, 0) КАК hsum,
	|	ЕСТЬNULL(втНачисленияБезТарифов.СуммаОплат, 0) КАК sumpayed,
	|	втНачисленияБезТарифов.ДатаПоследнейОплаты,
	|	ЕСТЬNULL(втНачисленияБезТарифов.СуммаПерерасчета, 0) КАК correction,
	|	ЕСТЬNULL(втНачисленияБезТарифов.ОснованиеКорректировки, """") КАК correctionReason,
	|	ЕСТЬNULL(втНачисленияБезТарифов.СуммаПеней, 0) КАК peni,
	|	ЕСТЬNULL(втНачисленияБезТарифов.СуммаЛьгот, 0) КАК compensation,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаПерерасчета, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаЛьгот, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаВводНачальногоСальдо, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаДопНачислений, 0) КАК msumtopay,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаДопНачислений, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(втНачисленияПоУслугам.НачисленоОПУ, 0) + (ЕСТЬNULL(втНачисленияБезТарифов.СуммаПерерасчета, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаЛьгот, 0)) * (ЕСТЬNULL(втНачисленияПоУслугам.НачисленоОПУ, 0) / (ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаДопНачислений, 0)))
	|	КОНЕЦ КАК hsumtopay,
	|	ЕСТЬNULL(втНачальноеСальдо.НачальноеСальдо, 0) КАК debtbeg,
	|	ЕСТЬNULL(втНачальноеСальдо.НачальноеСальдо, 0) + ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаОплат, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаПерерасчета, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаПеней, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаЛьгот, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаВводНачальногоСальдо, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаДопНачислений, 0) КАК debtend,
	|	ЕСТЬNULL(втТаблицаНорм.Норма, 0) КАК norm,
	|	ЕСТЬNULL(втТаблицаНорм.НормаОПУ, 0) КАК hnorm,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоИндПУ, 0) КАК volumep,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоОПУ, 0) КАК volumeh,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоИндНормаДн, 0) КАК КоличествоИндНормаДн,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоИндНормаНч, 0) КАК КоличествоИндНормаНч,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоИндНормаПк, 0) КАК КоличествоИндНормаПк,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоИндНормаОбщ, 0) КАК КоличествоИндНормаОбщ,
	|	втПоставщикиУслуг.Поставщик.Код КАК CONId,
	|	втПоставщикиУслуг.ЯвляетсяУО КАК ЯвляетсяУО,
	|	ЕСТЬNULL(втПоставщикиУслуг.НачисленоПоПоставщику, 0) КАК summ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаПерерасчета, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаЛьгот, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаВводНачальногоСальдо, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаДопНачислений, 0) + ЕСТЬNULL(втНачальноеСальдо.НачальноеСальдо, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаОплат, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаПеней, 0) КАК SumToPay,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаПерерасчета, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаЛьгот, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаВводНачальногоСальдо, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаДопНачислений, 0) КАК СуммаНачисленийДляВыводаВКвитанции,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0) КАК НачисленоВсего,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоДн, 0) КАК НачисленоДн,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоНч, 0) КАК НачисленоНч,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоПк, 0) КАК НачисленоПк,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоОбщ, 0) КАК НачисленоОбщ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоДнИПУ, 0) КАК НачисленоДнИПУ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоНчИПУ, 0) КАК НачисленоНчИПУ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоПкИПУ, 0) КАК НачисленоПкИПУ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоОбщИПУ, 0) КАК НачисленоОбщИПУ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоДнОПУ, 0) КАК НачисленоДнОПУ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоНчОПУ, 0) КАК НачисленоНчОПУ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоПкОПУ, 0) КАК НачисленоПкОПУ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоОбщОПУ, 0) КАК НачисленоОбщОПУ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.КоличествоДнИПУ, 0) КАК КоличествоДнИПУ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.КоличествоНчИПУ, 0) КАК КоличествоНчИПУ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.КоличествоПкИПУ, 0) КАК КоличествоПкИПУ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.КоличествоУчетноеОбщИПУ, 0) КАК КоличествоУчетноеОбщ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.КоличествоУчетноеДнИПУ, 0) КАК КоличествоУчетноеДн,
	|	ЕСТЬNULL(втНачисленияПоУслугам.КоличествоУчетноеНчИПУ, 0) КАК КоличествоУчетноеНч,
	|	ЕСТЬNULL(втНачисленияПоУслугам.КоличествоУчетноеПкИПУ, 0) КАК КоличествоУчетноеПк,
	|	ЕСТЬNULL(втНачисленияПоУслугам.КоличествоОбщИПУ, 0) КАК КоличествоОбщИПУ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.КоличествоДнОПУ, 0) КАК КоличествоДнОПУ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.КоличествоНчОПУ, 0) КАК КоличествоНчОПУ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.КоличествоПкОПУ, 0) КАК КоличествоПкОПУ,
	|	ЕСТЬNULL(втНачисленияПоУслугам.КоличествоОбщОПУ, 0) КАК КоличествоОбщОПУ,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоИндПУДн, 0) КАК volumepДн,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоИндПУНч, 0) КАК volumepНч,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоИндПУПк, 0) КАК volumepПк,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоИндПУОбщ, 0) КАК volumepОбщ,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоОПУДн, 0) КАК volumehДн,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоОПУНч, 0) КАК volumehНч,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоОПУПк, 0) КАК volumehПк,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоОПУОбщ, 0) КАК volumehОбщ
	|ИЗ
	|	втОбъектыНачислений КАК втОбъектыНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияПоУслугам КАК втНачисленияПоУслугам
	|		ПО втОбъектыНачислений.ЛицевойСчет = втНачисленияПоУслугам.ЛицевойСчет
	|			И втОбъектыНачислений.Услуга = втНачисленияПоУслугам.Услуга
	|			И втОбъектыНачислений.СоставнаяУслуга = втНачисленияПоУслугам.СоставнаяУслуга
	|			И втОбъектыНачислений.УслугаЯвляетсяСоставной = втНачисленияПоУслугам.УслугаЯвляетсяСоставной
	|			И втОбъектыНачислений.УслугаСоставнаяПоСчетчикам = втНачисленияПоУслугам.УслугаСоставнаяПоСчетчикам
	|			И втОбъектыНачислений.КодВидаНачисленийИПУ = втНачисленияПоУслугам.КодВидаНачисленийИПУ
	|			И втОбъектыНачислений.КодВидаНачисленийОПУ = втНачисленияПоУслугам.КодВидаНачисленийОПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачальноеСальдо КАК втНачальноеСальдо
	|		ПО втОбъектыНачислений.ЛицевойСчет = втНачальноеСальдо.ЛицевойСчет
	|			И втОбъектыНачислений.Услуга = втНачальноеСальдо.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияБезТарифов КАК втНачисленияБезТарифов
	|		ПО втОбъектыНачислений.ЛицевойСчет = втНачисленияБезТарифов.ЛицевойСчет
	|			И втОбъектыНачислений.Услуга = втНачисленияБезТарифов.Услуга
	|			И втОбъектыНачислений.СоставнаяУслуга = втНачисленияБезТарифов.СоставнаяУслуга
	|			И втОбъектыНачислений.УслугаЯвляетсяСоставной = втНачисленияБезТарифов.УслугаЯвляетсяСоставной
	|			И втОбъектыНачислений.УслугаСоставнаяПоСчетчикам = втНачисленияБезТарифов.УслугаСоставнаяПоСчетчикам
	|			И втОбъектыНачислений.КодВидаНачисленийИПУ = втНачисленияБезТарифов.КодВидаНачисленийИПУ
	|			И втОбъектыНачислений.КодВидаНачисленийОПУ = втНачисленияБезТарифов.КодВидаНачисленийОПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК втТаблицаНорм
	|		ПО втОбъектыНачислений.Услуга = втТаблицаНорм.Услуга
	|			И втОбъектыНачислений.ЛицевойСчет = втТаблицаНорм.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТарифы КАК втТарифы
	|		ПО втОбъектыНачислений.ЛицевойСчет = втТарифы.ЛицевойСчет
	|			И втОбъектыНачислений.Услуга = втТарифы.Услуга
	|			И втОбъектыНачислений.СоставнаяУслуга = втТарифы.СоставнаяУслуга
	|			И втОбъектыНачислений.УслугаЯвляетсяСоставной = втТарифы.УслугаЯвляетсяСоставной
	|			И втОбъектыНачислений.УслугаСоставнаяПоСчетчикам = втТарифы.УслугаСоставнаяПоСчетчикам
	|			И втОбъектыНачислений.КодВидаНачисленийИПУ = втТарифы.КодВидаНачисленийИПУ
	|			И втОбъектыНачислений.КодВидаНачисленийОПУ = втТарифы.КодВидаНачисленийОПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПотреблениеПоЗданию КАК втПотреблениеПоЗданию
	|		ПО втОбъектыНачислений.ЛицевойСчет.Адрес.Владелец = втПотреблениеПоЗданию.Здание
	|			И втОбъектыНачислений.Услуга = втПотреблениеПоЗданию.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПоставщикиУслуг КАК втПоставщикиУслуг
	|		ПО втОбъектыНачислений.Услуга.ВидУслуги = втПоставщикиУслуг.ВидУслуги
	|			И втОбъектыНачислений.ЛицевойСчет = втПоставщикиУслуг.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокВыводаУслугВКвитанциях КАК втПорядокВыводаУслугВКвитанциях
	|		ПО втОбъектыНачислений.Услуга.ВидУслуги = втПорядокВыводаУслугВКвитанциях.ВидУслуги
	|ГДЕ
	|	втОбъектыНачислений.Услуга В(&МассивУслугДляВыгрузкиНачислений)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокВыводаУслуги,
	|	VidName";
	
	Запрос.УстановитьПараметр("ПоставщикУО",      ?(НастройкиВыводаКвитанций.ИсполнительРасчетов.Пустая(), Организация, НастройкиВыводаКвитанций.ИсполнительРасчетов));
	Запрос.УстановитьПараметр("ДатаНач",          НачалоМесяца(ДатаОбмена));
	Запрос.УстановитьПараметр("ДатаКон",          КонецМесяца(ДатаОбмена));
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("МассивЛС",         МассивЛС);
	Запрос.УстановитьПараметр("МассивУслуг",      МассивУслуг);
	Запрос.УстановитьПараметр("МассивВидовУслуг", МассивВидовУслуг);
	Запрос.УстановитьПараметр("МассивУслугДляВыгрузкиНачислений", ТаблицаУслугВыгружатьНачисления.ВыгрузитьКолонку("Услуга"));
	Запрос.УстановитьПараметр("НастройкаОбменаДанными", НастройкаОбменаДанными);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуНачислений()

// Формирует таблицу с начальным сальдо по всем услугам.
//
// Параметры:
//  ТаблицаНачисления - таблица с начислениями по всем услугам.
//  ТаблицаУслугДляВывода - таблица с начислениями только по тем услугам, которые надо выводить в квитанции.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьТаблицуНачальногоСальдо(ТаблицаНачисления, ТаблицаУслугДляВывода)
	
	ТаблицаНачальногоСальдо = ТаблицаНачисления.СкопироватьКолонки();
	
	СтруктураПоиска = Новый Структура("ЛицевойСчет, Услуга");
	
	Для Каждого СтрокаНачисления Из ТаблицаНачисления Цикл
		СтруктураПоиска.ЛицевойСчет = СтрокаНачисления.ЛицевойСчет;
		СтруктураПоиска.Услуга      = СтрокаНачисления.Услуга;
		
		НайденныеСтроки = ТаблицаУслугДляВывода.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаНачальногоСальдо.Добавить(), СтрокаНачисления);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаНачальногоСальдо;
	
КонецФункции // ПолучитьТаблицуНачальногоСальдо()

// Формирует таблицу начислений для вывода в квитанции.
//
// Параметры:
//  ТаблицаНачисления - таблица с начислениями по всем услугам.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьТаблицуНачисленийДляВывода(ТаблицаНачислений, НастройкиВыводаКвитанций)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаНачисления.ЛицевойСчет,
	|	ТаблицаНачисления.Услуга,
	|	ТаблицаНачисления.ВидУслуги,
	|	ТаблицаНачисления.УслугаПоСчетчикам,
	|	ТаблицаНачисления.СоставнаяУслуга,
	|	ТаблицаНачисления.НаименованиеСоставнойУслуги,
	|	ТаблицаНачисления.УслугаЯвляетсяСоставной,
	|	ТаблицаНачисления.УслугаСоставнаяПоСчетчикам,
	|	ТаблицаНачисления.КодВидаНачисленийИПУ,
	|	ТаблицаНачисления.КодВидаНачисленийОПУ,
	|	ТаблицаНачисления.SName,
	|	ТаблицаНачисления.ПорядокВыводаУслуги,
	|	ТаблицаНачисления.VidName,
	|	ТаблицаНачисления.kod,
	|	ТаблицаНачисления.edizm,
	|	ТаблицаНачисления.tarif1,
	|	ТаблицаНачисления.tarif2,
	|	ТаблицаНачисления.tarif3,
	|	ТаблицаНачисления.ТарифДн,
	|	ТаблицаНачисления.ТарифОбщ,
	|	ТаблицаНачисления.ОбщийИДневнойТарифыРавны,
	|	ТаблицаНачисления.Многотарифная,
	|	ТаблицаНачисления.ammount,
	|	ТаблицаНачисления.hammount,
	|	ТаблицаНачисления.sum,
	|	ТаблицаНачисления.hsum,
	|	ТаблицаНачисления.sumpayed,
	|	ТаблицаНачисления.ДатаПоследнейОплаты,
	|	ТаблицаНачисления.correction,
	|	ТаблицаНачисления.correctionReason,
	|	ТаблицаНачисления.peni,
	|	ТаблицаНачисления.compensation,
	|	ТаблицаНачисления.msumtopay,
	|	ТаблицаНачисления.hsumtopay,
	|	ТаблицаНачисления.debtbeg,
	|	ТаблицаНачисления.debtend,
	|	ТаблицаНачисления.norm,
	|	ТаблицаНачисления.hnorm,
	|	ТаблицаНачисления.volumep,
	|	ТаблицаНачисления.volumeh,
	|	ТаблицаНачисления.CONId,
	|	ТаблицаНачисления.ЯвляетсяУО,
	|	ТаблицаНачисления.summ,
	|	ТаблицаНачисления.SumToPay,
	|	ТаблицаНачисления.СуммаНачисленийДляВыводаВКвитанции,
	|	ТаблицаНачисления.НачисленоВсего,
	|	ТаблицаНачисления.НачисленоДн,
	|	ТаблицаНачисления.НачисленоНч,
	|	ТаблицаНачисления.НачисленоПк,
	|	ТаблицаНачисления.НачисленоОбщ,
	|	ТаблицаНачисления.НачисленоДнИПУ,
	|	ТаблицаНачисления.НачисленоНчИПУ,
	|	ТаблицаНачисления.НачисленоПкИПУ,
	|	ТаблицаНачисления.НачисленоОбщИПУ,
	|	ТаблицаНачисления.НачисленоДнОПУ,
	|	ТаблицаНачисления.НачисленоНчОПУ,
	|	ТаблицаНачисления.НачисленоПкОПУ,
	|	ТаблицаНачисления.НачисленоОбщОПУ,
	|	ТаблицаНачисления.КоличествоДнИПУ,
	|	ТаблицаНачисления.КоличествоНчИПУ,
	|	ТаблицаНачисления.КоличествоПкИПУ,
	|	ТаблицаНачисления.КоличествоОбщИПУ,
	|	ТаблицаНачисления.КоличествоДнОПУ,
	|	ТаблицаНачисления.КоличествоНчОПУ,
	|	ТаблицаНачисления.КоличествоПкОПУ,
	|	ТаблицаНачисления.КоличествоОбщОПУ,
	|	ТаблицаНачисления.volumepДн,
	|	ТаблицаНачисления.volumepНч,
	|	ТаблицаНачисления.volumepПк,
	|	ТаблицаНачисления.volumepОбщ,
	|	ТаблицаНачисления.volumehДн,
	|	ТаблицаНачисления.volumehНч,
	|	ТаблицаНачисления.volumehПк,
	|	ТаблицаНачисления.volumehОбщ,
	|	ТаблицаНачисления.КоличествоУчетноеОбщ,
	|	ТаблицаНачисления.КоличествоУчетноеДн,
	|	ТаблицаНачисления.КоличествоУчетноеНч,
	|	ТаблицаНачисления.КоличествоУчетноеПк,
	|	ТаблицаНачисления.КоличествоИНдНормаДн,
	|	ТаблицаНачисления.КоличествоИНдНормаНч,
	|	ТаблицаНачисления.КоличествоИНдНормаПк,
	|	ТаблицаНачисления.КоличествоИНдНормаОбщ
	|ПОМЕСТИТЬ втТаблицаНачисленияОбщ
	|ИЗ
	|	&ТаблицаНачисления КАК ТаблицаНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНачисления.ЛицевойСчет,
	|	ТаблицаНачисления.Услуга,
	|	ТаблицаНачисления.ВидУслуги,
	|	ТаблицаНачисления.УслугаПоСчетчикам,
	|	ТаблицаНачисления.СоставнаяУслуга,
	|	ТаблицаНачисления.НаименованиеСоставнойУслуги,
	|	ТаблицаНачисления.УслугаЯвляетсяСоставной,
	|	ТаблицаНачисления.УслугаСоставнаяПоСчетчикам,
	|	ТаблицаНачисления.КодВидаНачисленийИПУ,
	|	ТаблицаНачисления.КодВидаНачисленийОПУ,
	|	ТаблицаНачисления.SName,
	|	ТаблицаНачисления.ПорядокВыводаУслуги,
	|	ТаблицаНачисления.VidName,
	|	ТаблицаНачисления.kod,
	|	ТаблицаНачисления.edizm,
	|	ТаблицаНачисления.tarif1,
	|	ТаблицаНачисления.tarif2,
	|	ТаблицаНачисления.tarif3,
	|	ТаблицаНачисления.ТарифДн,
	|	ТаблицаНачисления.ТарифОбщ,
	|	ТаблицаНачисления.ОбщийИДневнойТарифыРавны,
	|	ТаблицаНачисления.Многотарифная,
	|	ТаблицаНачисления.ammount,
	|	ТаблицаНачисления.hammount,
	|	ТаблицаНачисления.sum,
	|	ТаблицаНачисления.hsum,
	|	ТаблицаНачисления.sumpayed,
	|	ТаблицаНачисления.ДатаПоследнейОплаты,
	|	ТаблицаНачисления.correction,
	|	ТаблицаНачисления.correctionReason,
	|	ТаблицаНачисления.peni,
	|	ТаблицаНачисления.compensation,
	|	ТаблицаНачисления.msumtopay,
	|	ТаблицаНачисления.hsumtopay,
	|	ТаблицаНачисления.debtbeg,
	|	ТаблицаНачисления.debtend,
	|	ТаблицаНачисления.norm,
	|	ТаблицаНачисления.hnorm,
	|	ТаблицаНачисления.volumep,
	|	ТаблицаНачисления.volumeh,
	|	ТаблицаНачисления.CONId,
	|	ТаблицаНачисления.ЯвляетсяУО,
	|	ТаблицаНачисления.summ,
	|	ТаблицаНачисления.SumToPay,
	|	ТаблицаНачисления.СуммаНачисленийДляВыводаВКвитанции,
	|	ТаблицаНачисления.НачисленоВсего,
	|	ТаблицаНачисления.НачисленоДн,
	|	ТаблицаНачисления.НачисленоНч,
	|	ТаблицаНачисления.НачисленоПк,
	|	ТаблицаНачисления.НачисленоОбщ,
	|	ТаблицаНачисления.НачисленоДнИПУ,
	|	ТаблицаНачисления.НачисленоНчИПУ,
	|	ТаблицаНачисления.НачисленоПкИПУ,
	|	ТаблицаНачисления.НачисленоОбщИПУ,
	|	ТаблицаНачисления.НачисленоДнОПУ,
	|	ТаблицаНачисления.НачисленоНчОПУ,
	|	ТаблицаНачисления.НачисленоПкОПУ,
	|	ТаблицаНачисления.НачисленоОбщОПУ,
	|	ТаблицаНачисления.КоличествоДнИПУ,
	|	ТаблицаНачисления.КоличествоНчИПУ,
	|	ТаблицаНачисления.КоличествоПкИПУ,
	|	ТаблицаНачисления.КоличествоОбщИПУ,
	|	ТаблицаНачисления.КоличествоДнОПУ,
	|	ТаблицаНачисления.КоличествоНчОПУ,
	|	ТаблицаНачисления.КоличествоПкОПУ,
	|	ТаблицаНачисления.КоличествоОбщОПУ,
	|	ТаблицаНачисления.volumepДн,
	|	ТаблицаНачисления.volumepНч,
	|	ТаблицаНачисления.volumepПк,
	|	ТаблицаНачисления.volumepОбщ,
	|	ТаблицаНачисления.volumehДн,
	|	ТаблицаНачисления.volumehНч,
	|	ТаблицаНачисления.volumehПк,
	|	ТаблицаНачисления.volumehОбщ,
	|	ТаблицаНачисления.КоличествоУчетноеОбщ,
	|	ТаблицаНачисления.КоличествоУчетноеДн,
	|	ТаблицаНачисления.КоличествоУчетноеНч,
	|	ТаблицаНачисления.КоличествоУчетноеПк,
	|	ТаблицаНачисления.КоличествоИНдНормаДн,
	|	ТаблицаНачисления.КоличествоИНдНормаНч,
	|	ТаблицаНачисления.КоличествоИНдНормаПк,
	|	ТаблицаНачисления.КоличествоИНдНормаОбщ
	|ПОМЕСТИТЬ втТаблицаНачисления
	|ИЗ
	|	втТаблицаНачисленияОбщ КАК ТаблицаНачисления
	|ГДЕ
	|	НЕ ТаблицаНачисления.СуммаНачисленийДляВыводаВКвитанции = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНачисления.ЛицевойСчет,
	|	ТаблицаНачисления.Услуга,
	|	ТаблицаНачисления.ВидУслуги,
	|	ТаблицаНачисления.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной
	|ПОМЕСТИТЬ втСоставныеУслугиРазличные
	|ИЗ
	|	втТаблицаНачисленияОбщ КАК ТаблицаНачисления
	|ГДЕ
	|	ТаблицаНачисления.УслугаЯвляетсяСоставной
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоставныеУслугиРазличные.ЛицевойСчет,
	|	втСоставныеУслугиРазличные.Услуга,
	|	втСоставныеУслугиРазличные.ВидУслуги,
	|	СУММА(втТаблицаНачисленияОбщ.sumpayed) КАК sumpayed
	|ПОМЕСТИТЬ втОплатыСоставныхУслуг
	|ИЗ
	|	втСоставныеУслугиРазличные КАК втСоставныеУслугиРазличные
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНачисленияОбщ КАК втТаблицаНачисленияОбщ
	|		ПО втСоставныеУслугиРазличные.ЛицевойСчет = втТаблицаНачисленияОбщ.ЛицевойСчет
	|			И втСоставныеУслугиРазличные.Услуга = втТаблицаНачисленияОбщ.Услуга
	|			И втСоставныеУслугиРазличные.ВидУслуги = втТаблицаНачисленияОбщ.ВидУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	втСоставныеУслугиРазличные.ЛицевойСчет,
	|	втСоставныеУслугиРазличные.Услуга,
	|	втСоставныеУслугиРазличные.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаНачисления.ЛицевойСчет,
	|	втТаблицаНачисления.Услуга,
	|	втТаблицаНачисления.ВидУслуги,
	|	втТаблицаНачисления.УслугаПоСчетчикам,
	|	втТаблицаНачисления.СоставнаяУслуга,
	|	втТаблицаНачисления.УслугаЯвляетсяСоставной,
	|	втТаблицаНачисления.УслугаСоставнаяПоСчетчикам,
	|	втТаблицаНачисления.КодВидаНачисленийИПУ,
	|	втТаблицаНачисления.КодВидаНачисленийОПУ,
	|	втТаблицаНачисления.SName,
	|	втТаблицаНачисления.ПорядокВыводаУслуги,
	|	втТаблицаНачисления.VidName,
	|	втТаблицаНачисления.kod,
	|	втТаблицаНачисления.edizm,
	|	втТаблицаНачисления.tarif1,
	|	втТаблицаНачисления.tarif2,
	|	втТаблицаНачисления.tarif3,
	|	втТаблицаНачисления.ТарифДн,
	|	втТаблицаНачисления.ТарифОбщ,
	|	втТаблицаНачисления.ОбщийИДневнойТарифыРавны,
	|	втТаблицаНачисления.Многотарифная,
	|	втТаблицаНачисления.ammount,
	|	втТаблицаНачисления.hammount,
	|	втТаблицаНачисления.sum,
	|	втТаблицаНачисления.hsum,
	|	втТаблицаНачисления.sumpayed,
	|	втТаблицаНачисления.ДатаПоследнейОплаты,
	|	втТаблицаНачисления.correction,
	|	втТаблицаНачисления.correctionReason,
	|	втТаблицаНачисления.peni,
	|	втТаблицаНачисления.compensation,
	|	втТаблицаНачисления.msumtopay,
	|	втТаблицаНачисления.hsumtopay,
	|	втТаблицаНачисления.debtbeg,
	|	втТаблицаНачисления.debtend,
	|	втТаблицаНачисления.norm,
	|	втТаблицаНачисления.hnorm,
	|	втТаблицаНачисления.volumep,
	|	втТаблицаНачисления.volumeh,
	|	втТаблицаНачисления.CONId,
	|	втТаблицаНачисления.ЯвляетсяУО,
	|	втТаблицаНачисления.summ,
	|	втТаблицаНачисления.SumToPay,
	|	втТаблицаНачисления.СуммаНачисленийДляВыводаВКвитанции,
	|	втТаблицаНачисления.НачисленоВсего,
	|	втТаблицаНачисления.НачисленоДн,
	|	втТаблицаНачисления.НачисленоНч,
	|	втТаблицаНачисления.НачисленоПк,
	|	втТаблицаНачисления.НачисленоОбщ,
	|	втТаблицаНачисления.НачисленоДнИПУ,
	|	втТаблицаНачисления.НачисленоНчИПУ,
	|	втТаблицаНачисления.НачисленоПкИПУ,
	|	втТаблицаНачисления.НачисленоОбщИПУ,
	|	втТаблицаНачисления.НачисленоДнОПУ,
	|	втТаблицаНачисления.НачисленоНчОПУ,
	|	втТаблицаНачисления.НачисленоПкОПУ,
	|	втТаблицаНачисления.НачисленоОбщОПУ,
	|	втТаблицаНачисления.КоличествоДнИПУ,
	|	втТаблицаНачисления.КоличествоНчИПУ,
	|	втТаблицаНачисления.КоличествоПкИПУ,
	|	втТаблицаНачисления.КоличествоОбщИПУ,
	|	втТаблицаНачисления.КоличествоДнОПУ,
	|	втТаблицаНачисления.КоличествоНчОПУ,
	|	втТаблицаНачисления.КоличествоПкОПУ,
	|	втТаблицаНачисления.КоличествоОбщОПУ,
	|	втТаблицаНачисления.volumepДн,
	|	втТаблицаНачисления.volumepНч,
	|	втТаблицаНачисления.volumepПк,
	|	втТаблицаНачисления.volumepОбщ,
	|	втТаблицаНачисления.volumehДн,
	|	втТаблицаНачисления.volumehНч,
	|	втТаблицаНачисления.volumehПк,
	|	втТаблицаНачисления.volumehОбщ,
	|	втТаблицаНачисления.КоличествоУчетноеОбщ,
	|	втТаблицаНачисления.КоличествоУчетноеДн,
	|	втТаблицаНачисления.КоличествоУчетноеНч,
	|	втТаблицаНачисления.КоличествоУчетноеПк,
	|	втТаблицаНачисления.КоличествоИНдНормаОбщ,
	|	втТаблицаНачисления.КоличествоИНдНормаДн,
	|	втТаблицаНачисления.КоличествоИНдНормаНч,
	|	втТаблицаНачисления.КоличествоИНдНормаПк
	|ПОМЕСТИТЬ втСоставныеУслуги
	|ИЗ
	|	втТаблицаНачисления КАК втТаблицаНачисления
	|ГДЕ
	|	втТаблицаНачисления.УслугаЯвляетсяСоставной
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоставныеУслуги.ЛицевойСчет,
	|	втСоставныеУслуги.Услуга,
	|	втСоставныеУслуги.ВидУслуги,
	|	МИНИМУМ(втСоставныеУслуги.SName) КАК SName,
	|	МИНИМУМ(втСоставныеУслуги.VidName) КАК VidName,
	|	МИНИМУМ(втСоставныеУслуги.ПорядокВыводаУслуги) КАК ПорядокВыводаУслуги,
	|	МАКСИМУМ(втСоставныеУслуги.КодВидаНачисленийИПУ) КАК КодВидаНачисленийИПУ,
	|	МАКСИМУМ(втСоставныеУслуги.КодВидаНачисленийОПУ) КАК КодВидаНачисленийОПУ,
	|	МАКСИМУМ(втСоставныеУслуги.УслугаСоставнаяПоСчетчикам) КАК УслугаСоставнаяПоСчетчикам,
	|	МАКСИМУМ(втСоставныеУслуги.Многотарифная) КАК Многотарифная,
	|	МАКСИМУМ(втСоставныеУслуги.kod) КАК kod,
	|	СУММА(втСоставныеУслуги.ammount) КАК ammount,
	|	СУММА(втСоставныеУслуги.hammount) КАК hammount,
	|	СУММА(втСоставныеУслуги.sum) КАК sum,
	|	СУММА(втСоставныеУслуги.hsum) КАК hsum,
	|	МИНИМУМ(втОплатыСоставныхУслуг.sumpayed) КАК sumpayed,
	|	СУММА(втСоставныеУслуги.correction) КАК correction,
	|	СУММА(втСоставныеУслуги.peni) КАК peni,
	|	СУММА(втСоставныеУслуги.compensation) КАК compensation,
	|	СУММА(втСоставныеУслуги.msumtopay) КАК msumtopay,
	|	СУММА(втСоставныеУслуги.hsumtopay) КАК hsumtopay,
	|	СУММА(втСоставныеУслуги.debtbeg) КАК debtbeg,
	|	СУММА(втСоставныеУслуги.debtend) КАК debtend,
	|	СУММА(втСоставныеУслуги.norm) КАК norm,
	|	СУММА(втСоставныеУслуги.hnorm) КАК hnorm,
	|	СУММА(втСоставныеУслуги.volumep) КАК volumep,
	|	СУММА(втСоставныеУслуги.volumeh) КАК volumeh,
	|	СУММА(втСоставныеУслуги.summ) КАК summ,
	|	СУММА(втСоставныеУслуги.SumToPay) КАК SumToPay,
	|	СУММА(втСоставныеУслуги.СуммаНачисленийДляВыводаВКвитанции) КАК СуммаНачисленийДляВыводаВКвитанции,
	|	СУММА(втСоставныеУслуги.НачисленоВсего) КАК НачисленоВсего,
	|	СУММА(втСоставныеУслуги.НачисленоДн) КАК НачисленоДн,
	|	СУММА(втСоставныеУслуги.НачисленоНч) КАК НачисленоНч,
	|	СУММА(втСоставныеУслуги.НачисленоПк) КАК НачисленоПк,
	|	СУММА(втСоставныеУслуги.НачисленоОбщ) КАК НачисленоОбщ,
	|	СУММА(втСоставныеУслуги.НачисленоДнИПУ) КАК НачисленоДнИПУ,
	|	СУММА(втСоставныеУслуги.НачисленоНчИПУ) КАК НачисленоНчИПУ,
	|	СУММА(втСоставныеУслуги.НачисленоПкИПУ) КАК НачисленоПкИПУ,
	|	СУММА(втСоставныеУслуги.НачисленоОбщИПУ) КАК НачисленоОбщИПУ,
	|	СУММА(втСоставныеУслуги.НачисленоДнОПУ) КАК НачисленоДнОПУ,
	|	СУММА(втСоставныеУслуги.НачисленоНчОПУ) КАК НачисленоНчОПУ,
	|	СУММА(втСоставныеУслуги.НачисленоПкОПУ) КАК НачисленоПкОПУ,
	|	СУММА(втСоставныеУслуги.НачисленоОбщОПУ) КАК НачисленоОбщОПУ,
	|	СУММА(втСоставныеУслуги.КоличествоДнИПУ) КАК КоличествоДнИПУ,
	|	СУММА(втСоставныеУслуги.КоличествоНчИПУ) КАК КоличествоНчИПУ,
	|	СУММА(втСоставныеУслуги.КоличествоПкИПУ) КАК КоличествоПкИПУ,
	|	СУММА(втСоставныеУслуги.КоличествоОбщИПУ) КАК КоличествоОбщИПУ,
	|	СУММА(втСоставныеУслуги.КоличествоДнОПУ) КАК КоличествоДнОПУ,
	|	СУММА(втСоставныеУслуги.КоличествоНчОПУ) КАК КоличествоНчОПУ,
	|	СУММА(втСоставныеУслуги.КоличествоПкОПУ) КАК КоличествоПкОПУ,
	|	СУММА(втСоставныеУслуги.КоличествоОбщОПУ) КАК КоличествоОбщОПУ,
	|	СУММА(втСоставныеУслуги.volumepДн) КАК volumepДн,
	|	СУММА(втСоставныеУслуги.volumepНч) КАК volumepНч,
	|	СУММА(втСоставныеУслуги.volumepПк) КАК volumepПк,
	|	СУММА(втСоставныеУслуги.volumepОбщ) КАК volumepОбщ,
	|	СУММА(втСоставныеУслуги.volumehДн) КАК volumehДн,
	|	СУММА(втСоставныеУслуги.volumehНч) КАК volumehНч,
	|	СУММА(втСоставныеУслуги.volumehПк) КАК volumehПк,
	|	СУММА(втСоставныеУслуги.volumehОбщ) КАК volumehОбщ,
	|	СУММА(втСоставныеУслуги.КоличествоУчетноеОбщ) КАК КоличествоУчетноеОбщ,
	|	СУММА(втСоставныеУслуги.КоличествоУчетноеДн) КАК КоличествоУчетноеДн,
	|	СУММА(втСоставныеУслуги.КоличествоУчетноеНч) КАК КоличествоУчетноеНч,
	|	СУММА(втСоставныеУслуги.КоличествоУчетноеПк) КАК КоличествоУчетноеПк,
	|	СУММА(втСоставныеУслуги.КоличествоИНдНормаОбщ) КАК КоличествоИНдНормаОбщ,
	|	СУММА(втСоставныеУслуги.КоличествоИНдНормаДн) КАК КоличествоИНдНормаДн,
	|	СУММА(втСоставныеУслуги.КоличествоИНдНормаНч) КАК КоличествоИНдНормаНч,
	|	СУММА(втСоставныеУслуги.КоличествоИНдНормаПк) КАК КоличествоИНдНормаПк
	|ПОМЕСТИТЬ втОсновныеСтрокиСоставныхУслуг
	|ИЗ
	|	втСоставныеУслуги КАК втСоставныеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОплатыСоставныхУслуг КАК втОплатыСоставныхУслуг
	|		ПО втСоставныеУслуги.ЛицевойСчет = втОплатыСоставныхУслуг.ЛицевойСчет
	|			И втСоставныеУслуги.Услуга = втОплатыСоставныхУслуг.Услуга
	|			И втСоставныеУслуги.ВидУслуги = втОплатыСоставныхУслуг.ВидУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	втСоставныеУслуги.ЛицевойСчет,
	|	втСоставныеУслуги.Услуга,
	|	втСоставныеУслуги.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаНачисления.ЛицевойСчет,
	|	втТаблицаНачисления.Услуга,
	|	втТаблицаНачисления.ВидУслуги,
	|	втТаблицаНачисления.ВидУслуги.Наименование КАК ВидУслугиНаименование,
	|	втТаблицаНачисления.УслугаПоСчетчикам,
	|	втТаблицаНачисления.СоставнаяУслуга,
	|	ЕСТЬNULL(втТаблицаНачисления.УслугаЯвляетсяСоставной, ЛОЖЬ) КАК УслугаЯвляетсяСоставной,
	|	ЕСТЬNULL(втТаблицаНачисления.УслугаСоставнаяПоСчетчикам, ЛОЖЬ) КАК УслугаСоставнаяПоСчетчикам,
	|	ЕСТЬNULL(втТаблицаНачисления.КодВидаНачисленийИПУ, """") КАК КодВидаНачисленийИПУ,
	|	ЕСТЬNULL(втТаблицаНачисления.КодВидаНачисленийОПУ, """") КАК КодВидаНачисленийОПУ,
	|	ВЫБОР
	|		КОГДА НЕ втТаблицаНачисления.СоставнаяУслуга = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|			ТОГДА втТаблицаНачисления.SName
	|		ИНАЧЕ втТаблицаНачисления.VidName
	|	КОНЕЦ КАК SName,
	|	втТаблицаНачисления.ПорядокВыводаУслуги,
	|	ВЫБОР
	|		КОГДА втТаблицаНачисления.СоставнаяУслуга = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|				ИЛИ втТаблицаНачисления.СоставнаяУслуга ЕСТЬ NULL 
	|			ТОГДА втТаблицаНачисления.VidName
	|		ИНАЧЕ втТаблицаНачисления.НаименованиеСоставнойУслуги
	|	КОНЕЦ КАК VidName,
	|	втТаблицаНачисления.kod,
	|	втТаблицаНачисления.edizm,
	|	втТаблицаНачисления.tarif1,
	|	втТаблицаНачисления.tarif2,
	|	втТаблицаНачисления.tarif3,
	|	втТаблицаНачисления.ТарифДн,
	|	втТаблицаНачисления.ТарифОбщ,
	|	втТаблицаНачисления.ОбщийИДневнойТарифыРавны,
	|	втТаблицаНачисления.Многотарифная,
	|	втТаблицаНачисления.ammount,
	|	втТаблицаНачисления.hammount,
	|	втТаблицаНачисления.sum,
	|	втТаблицаНачисления.hsum,
	|	втТаблицаНачисления.sumpayed,
	|	втТаблицаНачисления.ДатаПоследнейОплаты,
	|	втТаблицаНачисления.correction,
	|	втТаблицаНачисления.correctionReason,
	|	втТаблицаНачисления.peni,
	|	втТаблицаНачисления.compensation,
	|	втТаблицаНачисления.msumtopay,
	|	втТаблицаНачисления.hsumtopay,
	|	втТаблицаНачисления.debtbeg,
	|	втТаблицаНачисления.debtend,
	|	втТаблицаНачисления.norm,
	|	втТаблицаНачисления.hnorm,
	|	втТаблицаНачисления.volumep,
	|	втТаблицаНачисления.volumeh,
	|	втТаблицаНачисления.CONId,
	|	втТаблицаНачисления.ЯвляетсяУО,
	|	втТаблицаНачисления.summ,
	|	втТаблицаНачисления.SumToPay,
	|	втТаблицаНачисления.СуммаНачисленийДляВыводаВКвитанции,
	|	втТаблицаНачисления.НачисленоВсего,
	|	втТаблицаНачисления.НачисленоДн,
	|	втТаблицаНачисления.НачисленоНч,
	|	втТаблицаНачисления.НачисленоПк,
	|	втТаблицаНачисления.НачисленоОбщ,
	|	втТаблицаНачисления.НачисленоДнИПУ,
	|	втТаблицаНачисления.НачисленоНчИПУ,
	|	втТаблицаНачисления.НачисленоПкИПУ,
	|	втТаблицаНачисления.НачисленоОбщИПУ,
	|	втТаблицаНачисления.НачисленоДнОПУ,
	|	втТаблицаНачисления.НачисленоНчОПУ,
	|	втТаблицаНачисления.НачисленоПкОПУ,
	|	втТаблицаНачисления.НачисленоОбщОПУ,
	|	втТаблицаНачисления.КоличествоДнИПУ,
	|	втТаблицаНачисления.КоличествоНчИПУ,
	|	втТаблицаНачисления.КоличествоПкИПУ,
	|	втТаблицаНачисления.КоличествоОбщИПУ,
	|	втТаблицаНачисления.КоличествоДнОПУ,
	|	втТаблицаНачисления.КоличествоНчОПУ,
	|	втТаблицаНачисления.КоличествоПкОПУ,
	|	втТаблицаНачисления.КоличествоОбщОПУ,
	|	втТаблицаНачисления.volumepДн,
	|	втТаблицаНачисления.volumepНч,
	|	втТаблицаНачисления.volumepПк,
	|	втТаблицаНачисления.volumepОбщ,
	|	втТаблицаНачисления.volumehДн,
	|	втТаблицаНачисления.volumehНч,
	|	втТаблицаНачисления.volumehПк,
	|	втТаблицаНачисления.volumehОбщ,
	|	втТаблицаНачисления.КоличествоУчетноеОбщ,
	|	втТаблицаНачисления.КоличествоУчетноеДн,
	|	втТаблицаНачисления.КоличествоУчетноеНч,
	|	втТаблицаНачисления.КоличествоУчетноеПк,
	|	ЛОЖЬ КАК ОсновнаяСтрокаСоставной,
	|	втТаблицаНачисления.КоличествоИНдНормаОбщ,
	|	втТаблицаНачисления.КоличествоИНдНормаДн,
	|	втТаблицаНачисления.КоличествоИНдНормаНч,
	|	втТаблицаНачисления.КоличествоИНдНормаПк
	|ИЗ
	|	втТаблицаНачисления КАК втТаблицаНачисления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОсновныеСтрокиСоставныхУслуг.ЛицевойСчет,
	|	втОсновныеСтрокиСоставныхУслуг.Услуга,
	|	втОсновныеСтрокиСоставныхУслуг.ВидУслуги,
	|	втОсновныеСтрокиСоставныхУслуг.ВидУслуги.Наименование,
	|	втОсновныеСтрокиСоставныхУслуг.УслугаСоставнаяПоСчетчикам,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ,
	|	ЕСТЬNULL(втОсновныеСтрокиСоставныхУслуг.УслугаСоставнаяПоСчетчикам, ЛОЖЬ),
	|	ЕСТЬNULL(втОсновныеСтрокиСоставныхУслуг.КодВидаНачисленийИПУ, """"),
	|	ЕСТЬNULL(втОсновныеСтрокиСоставныхУслуг.КодВидаНачисленийОПУ, """"),
	|	втОсновныеСтрокиСоставныхУслуг.SName,
	|	втОсновныеСтрокиСоставныхУслуг.ПорядокВыводаУслуги,
	|	втОсновныеСтрокиСоставныхУслуг.VidName,
	|	втОсновныеСтрокиСоставныхУслуг.kod,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ,
	|	втОсновныеСтрокиСоставныхУслуг.ammount,
	|	втОсновныеСтрокиСоставныхУслуг.hammount,
	|	втОсновныеСтрокиСоставныхУслуг.sum,
	|	втОсновныеСтрокиСоставныхУслуг.hsum,
	|	втОсновныеСтрокиСоставныхУслуг.sumpayed,
	|	НЕОПРЕДЕЛЕНО,
	|	втОсновныеСтрокиСоставныхУслуг.correction,
	|	НЕОПРЕДЕЛЕНО,
	|	втОсновныеСтрокиСоставныхУслуг.peni,
	|	втОсновныеСтрокиСоставныхУслуг.compensation,
	|	втОсновныеСтрокиСоставныхУслуг.msumtopay,
	|	втОсновныеСтрокиСоставныхУслуг.hsumtopay,
	|	втОсновныеСтрокиСоставныхУслуг.debtbeg,
	|	втОсновныеСтрокиСоставныхУслуг.debtend,
	|	втОсновныеСтрокиСоставныхУслуг.norm,
	|	втОсновныеСтрокиСоставныхУслуг.hnorm,
	|	втОсновныеСтрокиСоставныхУслуг.volumep,
	|	втОсновныеСтрокиСоставныхУслуг.volumeh,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	втОсновныеСтрокиСоставныхУслуг.summ,
	|	втОсновныеСтрокиСоставныхУслуг.SumToPay,
	|	втОсновныеСтрокиСоставныхУслуг.СуммаНачисленийДляВыводаВКвитанции,
	|	втОсновныеСтрокиСоставныхУслуг.НачисленоВсего,
	|	втОсновныеСтрокиСоставныхУслуг.НачисленоДн,
	|	втОсновныеСтрокиСоставныхУслуг.НачисленоНч,
	|	втОсновныеСтрокиСоставныхУслуг.НачисленоПк,
	|	втОсновныеСтрокиСоставныхУслуг.НачисленоОбщ,
	|	втОсновныеСтрокиСоставныхУслуг.НачисленоДнИПУ,
	|	втОсновныеСтрокиСоставныхУслуг.НачисленоНчИПУ,
	|	втОсновныеСтрокиСоставныхУслуг.НачисленоПкИПУ,
	|	втОсновныеСтрокиСоставныхУслуг.НачисленоОбщИПУ,
	|	втОсновныеСтрокиСоставныхУслуг.НачисленоДнОПУ,
	|	втОсновныеСтрокиСоставныхУслуг.НачисленоНчОПУ,
	|	втОсновныеСтрокиСоставныхУслуг.НачисленоПкОПУ,
	|	втОсновныеСтрокиСоставныхУслуг.НачисленоОбщОПУ,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоДнИПУ,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоНчИПУ,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоПкИПУ,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоОбщИПУ,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоДнОПУ,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоНчОПУ,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоПкОПУ,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоОбщОПУ,
	|	втОсновныеСтрокиСоставныхУслуг.volumepДн,
	|	втОсновныеСтрокиСоставныхУслуг.volumepНч,
	|	втОсновныеСтрокиСоставныхУслуг.volumepПк,
	|	втОсновныеСтрокиСоставныхУслуг.volumepОбщ,
	|	втОсновныеСтрокиСоставныхУслуг.volumehДн,
	|	втОсновныеСтрокиСоставныхУслуг.volumehНч,
	|	втОсновныеСтрокиСоставныхУслуг.volumehПк,
	|	втОсновныеСтрокиСоставныхУслуг.volumehОбщ,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоУчетноеОбщ,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоУчетноеДн,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоУчетноеНч,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоУчетноеПк,
	|	ИСТИНА,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоИНдНормаОбщ,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоИНдНормаДн,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоИНдНормаНч,
	|	втОсновныеСтрокиСоставныхУслуг.КоличествоИНдНормаПк
	|ИЗ
	|	втОсновныеСтрокиСоставныхУслуг КАК втОсновныеСтрокиСоставныхУслуг
	|
	|УПОРЯДОЧИТЬ ПО
	|	втТаблицаНачисления.ПорядокВыводаУслуги,
	|	SName,
	|	ОсновнаяСтрокаСоставной УБЫВ";
	
	Запрос.УстановитьПараметр("ТаблицаНачисления", ТаблицаНачислений);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	// Формируем таблицу для вывода.
	// Также проводится ли детализация данной строки отдельными строками.
	ТаблицаДляВывода = РезультатЗапроса.СкопироватьКолонки();
	ТаблицаДляВывода.Колонки.Добавить("СтрокаДетализации");
	ТаблицаДляВывода.Колонки.Добавить("ТипУслуги");
	ТаблицаДляВывода.Колонки.Добавить("ОсновнаяСтрока");
	ТаблицаДляВывода.Колонки.Добавить("volumea"); // Учетный объем
	ТаблицаДляВывода.Колонки.Добавить("ОбщКоличествоИндНорма");
	
	Для каждого ТекСтрока из РезультатЗапроса Цикл
		
		СтрокаУслуги = ТаблицаДляВывода.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУслуги, ТекСтрока);
		
		// Определяем тип услуги для группировки в квитанции
		СтрокаТипаТекущегоВидаУслуги = НастройкиВыводаКвитанций.УслугиПоТипам.Найти(ТекСтрока.ВидУслуги, "ВидУслуги");
		ТекущийТипУслуги             = ?(СтрокаТипаТекущегоВидаУслуги = Неопределено, "3", СтрокаТипаТекущегоВидаУслуги.ТипУслуги);
		
		// СОСТАВНЫЕ УСЛУГИ
		Если ТекСтрока.ОсновнаяСтрокаСоставной Тогда
			
			СтрокаУслуги.tarif1                = 0;
			СтрокаУслуги.tarif2                = 0;
			СтрокаУслуги.tarif3                = 0;
			СтрокаУслуги.ТипУслуги             = ТекущийТипУслуги;
			СтрокаУслуги.СтрокаДетализации     = Ложь;
			СтрокаУслуги.ОсновнаяСтрока        = Ложь;
			СтрокаУслуги.volumep               = ТекСтрока.volumepДн + ТекСтрока.volumepОбщ + ТекСтрока.volumepНч + ТекСтрока.volumepПк;
			СтрокаУслуги.volumeh               = ТекСтрока.volumehДн + ТекСтрока.volumehОбщ + ТекСтрока.volumehНч + ТекСтрока.volumehПк;
			СтрокаУслуги.volumea               = ТекСтрока.КоличествоУчетноеДн + ТекСтрока.КоличествоУчетноеОбщ + ТекСтрока.КоличествоУчетноеНч + ТекСтрока.КоличествоУчетноеПк;
			СтрокаУслуги.ОбщКоличествоИндНорма = ТекСтрока.КоличествоИНдНормаОбщ + ТекСтрока.КоличествоИНдНормаДн + ТекСтрока.КоличествоИНдНормаНч + ТекСтрока.КоличествоИНдНормаПк;
			
			// Заполним поля значением "X" поместив туда 0
			Если НЕ ТекСтрока.УслугаСоставнаяПоСчетчикам Тогда
				СтрокаУслуги.hsum = 0;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.УслугаЯвляетсяСоставной Тогда
			
			СтрокаУслуги.VidName               = " - " + СтрокаУслуги.VidName;
			СтрокаУслуги.СтрокаДетализации     = Ложь;
			СтрокаУслуги.ОсновнаяСтрока        = Ложь;
			СтрокаУслуги.volumep               = 0;
			СтрокаУслуги.volumeh               = 0;
			СтрокаУслуги.volumea               = 0;
			СтрокаУслуги.sum                   = ТекСтрока.НачисленоВсего;
			СтрокаУслуги.КодВидаНачисленийИПУ  = ТекСтрока.КодВидаНачисленийИПУ;
			СтрокаУслуги.КодВидаНачисленийОПУ  = ТекСтрока.КодВидаНачисленийОПУ;
			СтрокаУслуги.ОбщКоличествоИндНорма = ТекСтрока.КоличествоИНдНормаОбщ + ТекСтрока.КоличествоИНдНормаДн + ТекСтрока.КоличествоИНдНормаНч + ТекСтрока.КоличествоИНдНормаПк;
			
			Если ТекСтрока.УслугаСоставнаяПоСчетчикам Тогда
				
				ЕстьНочнойТариф  = ?(НЕ ТекСтрока.tarif2 = 0 И (НЕ ТекСтрока.НачисленоНчИПУ = 0 ИЛИ НЕ ТекСтрока.НачисленоНчОПУ = 0), Истина, Ложь);
				ЕстьПиковыйТариф = ?(НЕ ТекСтрока.tarif3 = 0 И (НЕ ТекСтрока.НачисленоПкИПУ = 0 ИЛИ НЕ ТекСтрока.НачисленоПкОПУ = 0), Истина, Ложь);
				
				СтрокаУслуги.ammount   = ТекСтрока.КоличествоДнИПУ + ТекСтрока.КоличествоДнОПУ + ТекСтрока.КоличествоОбщИПУ + ТекСтрока.КоличествоОбщОПУ + ТекСтрока.КоличествоНчИПУ + ТекСтрока.КоличествоНчОПУ + ТекСтрока.КоличествоПкИПУ + ТекСтрока.КоличествоПкОПУ;
				СтрокаУслуги.hammount  = ТекСтрока.КоличествоДнОПУ + ТекСтрока.КоличествоОбщОПУ + ТекСтрока.КоличествоНчОПУ + ТекСтрока.КоличествоПкОПУ;
				СтрокаУслуги.hsum      = ТекСтрока.НачисленоДнОПУ + ТекСтрока.НачисленоОбщОПУ + ТекСтрока.НачисленоНчОПУ + ТекСтрока.НачисленоПкОПУ;
				СтрокаУслуги.ТипУслуги = ТекущийТипУслуги;
				СтрокаУслуги.SumToPay  = 0;
				СтрокаУслуги.msumtopay = 0;
				СтрокаУслуги.hsumtopay = 0;
			Иначе
				СтрокаУслуги.tarif1    = ТекСтрока.tarif1;
				СтрокаУслуги.ammount   = 0;
				СтрокаУслуги.hammount  = 0;
				СтрокаУслуги.hsum      = 0;
				СтрокаУслуги.ТипУслуги = ТекущийТипУслуги;
				СтрокаУслуги.SumToPay  = 0;
				СтрокаУслуги.msumtopay = 0;
				СтрокаУслуги.hsumtopay = 0;
			КонецЕсли;
			
		Иначе
			
			СтрокаУслуги.СтрокаДетализации = Ложь;
			СтрокаУслуги.ОсновнаяСтрока    = Ложь;
			СтрокаУслуги.ТипУслуги         = ТекущийТипУслуги;
			
			Если ТекСтрока.УслугаПоСчетчикам Тогда
				
				// Проверка необходимости детализации
				ЕстьДневнойТариф = ?(НЕ ТекСтрока.ТарифДн = 0 И (НЕ ТекСтрока.НачисленоДнИПУ = 0 ИЛИ НЕ ТекСтрока.НачисленоДнОПУ = 0), Истина, Ложь);
				ЕстьНочнойТариф  = ?(НЕ ТекСтрока.tarif2 = 0 И (НЕ ТекСтрока.НачисленоНчИПУ = 0 ИЛИ НЕ ТекСтрока.НачисленоНчОПУ = 0), Истина, Ложь);
				ЕстьПиковыйТариф = ?(НЕ ТекСтрока.tarif3 = 0 И (НЕ ТекСтрока.НачисленоПкИПУ = 0 ИЛИ НЕ ТекСтрока.НачисленоПкОПУ = 0), Истина, Ложь);
				
				ЕстьОбщийТариф   = ?(НЕ ТекСтрока.ТарифОбщ = 0 И (НЕ ТекСтрока.НачисленоОбщИПУ = 0 ИЛИ НЕ ТекСтрока.НачисленоОбщОПУ = 0), Истина, Ложь);
				
				КоличествоТарифов = ?(ЕстьДневнойТариф, 1, 0)
								  + ?(ЕстьНочнойТариф,  1, 0)
								  + ?(ЕстьПиковыйТариф, 1, 0)
								  + ?(ЕстьОбщийТариф И НЕ ТекСтрока.ОбщийИДневнойТарифыРавны, 1, 0);
				
				Если КоличествоТарифов = 0 Тогда
					
					СтрокаУслуги.tarif1  = ТекСтрока.tarif1;
					СтрокаУслуги.tarif2  = 0;
					СтрокаУслуги.tarif3  = 0;
					СтрокаУслуги.volumea = ТекСтрока.КоличествоУчетноеДн + ТекСтрока.КоличествоУчетноеОбщ;
					СтрокаУслуги.ОбщКоличествоИндНорма = ТекСтрока.КоличествоИНдНормаОбщ + ТекСтрока.КоличествоИНдНормаДн + ТекСтрока.КоличествоИНдНормаНч + ТекСтрока.КоличествоИНдНормаПк;
					
				ИначеЕсли КоличествоТарифов > 1 Тогда
					
					СтрокаУслуги.tarif1         = 0;
					СтрокаУслуги.tarif2         = 0;
					СтрокаУслуги.tarif3         = 0;
					СтрокаУслуги.Многотарифная  = Ложь;
					СтрокаУслуги.ОсновнаяСтрока = Истина;
					СтрокаУслуги.volumep        = 0;
					СтрокаУслуги.volumea        = 0;
					СтрокаУслуги.volumeh        = 0;
					
					Если ТекСтрока.ОбщийИДневнойТарифыРавны Тогда
						
						Если ЕстьДневнойТариф ИЛИ ЕстьОбщийТариф Тогда
							СтрокаДетализации = ТаблицаДляВывода.Добавить();
							
							СтрокаДетализации.УслугаЯвляетсяСоставной    = Ложь;
							СтрокаДетализации.УслугаПоСчетчикам          = Истина;
							СтрокаДетализации.УслугаСоставнаяПоСчетчикам = Ложь;
							СтрокаДетализации.КодВидаНачисленийИПУ       = ТекСтрока.КодВидаНачисленийИПУ;
							СтрокаДетализации.КодВидаНачисленийОПУ       = ТекСтрока.КодВидаНачисленийОПУ;
							СтрокаДетализации.СтрокаДетализации          = Истина;
							СтрокаДетализации.ЛицевойСчет                = ТекСтрока.ЛицевойСчет;
							СтрокаДетализации.Услуга                     = ТекСтрока.Услуга;
							СтрокаДетализации.SName                      = ?(ЕстьДневнойТариф, " - дн. начисление", " - норм. начисление");
							СтрокаДетализации.VidName                    = ТекСтрока.VidName;
							СтрокаДетализации.kod                        = ТекСтрока.kod;
							СтрокаДетализации.edizm                      = "X";
							СтрокаДетализации.tarif1                     = ТекСтрока.tarif1;
							СтрокаДетализации.ammount                    = ТекСтрока.КоличествоДнИПУ + ТекСтрока.КоличествоДнОПУ + ТекСтрока.КоличествоОбщИПУ + ТекСтрока.КоличествоОбщОПУ;
							СтрокаДетализации.hammount                   = ТекСтрока.КоличествоДнОПУ + ТекСтрока.КоличествоОбщОПУ;
							СтрокаДетализации.sum                        = ТекСтрока.НачисленоДнИПУ + ТекСтрока.НачисленоДнОПУ + ТекСтрока.НачисленоОбщИПУ + ТекСтрока.НачисленоОбщОПУ;
							СтрокаДетализации.hsum                       = ТекСтрока.НачисленоДнОПУ + ТекСтрока.НачисленоОбщОПУ;
							СтрокаДетализации.volumep                    = ТекСтрока.volumepДн + ТекСтрока.volumepОбщ;
							СтрокаДетализации.volumeh                    = ТекСтрока.volumehДн + ТекСтрока.volumehОбщ;
							СтрокаДетализации.volumea                    = ТекСтрока.КоличествоУчетноеДн + ТекСтрока.КоличествоУчетноеОбщ;
							СтрокаДетализации.Многотарифная              = Ложь;
							СтрокаДетализации.ОсновнаяСтрока             = Ложь;
							СтрокаДетализации.ТипУслуги                  = ТекущийТипУслуги;
							
							СтрокаУслуги.ОбщКоличествоИндНорма = ТекСтрока.КоличествоИНдНормаОбщ + ТекСтрока.КоличествоИНдНормаДн;
							
						КонецЕсли;
						
					Иначе
						
						Если ЕстьОбщийТариф Тогда
							СтрокаДетализации = ТаблицаДляВывода.Добавить();
							
							СтрокаДетализации.УслугаЯвляетсяСоставной    = Ложь;
							СтрокаДетализации.СтрокаДетализации          = Истина;
							СтрокаДетализации.УслугаПоСчетчикам          = Истина;
							СтрокаДетализации.УслугаСоставнаяПоСчетчикам = Ложь;
							СтрокаДетализации.КодВидаНачисленийИПУ       = ТекСтрока.КодВидаНачисленийИПУ;
							СтрокаДетализации.КодВидаНачисленийОПУ       = ТекСтрока.КодВидаНачисленийОПУ;
							СтрокаДетализации.ЛицевойСчет                = ТекСтрока.ЛицевойСчет;
							СтрокаДетализации.Услуга                     = ТекСтрока.Услуга;
							СтрокаДетализации.SName                      = " - норм. начисление";
							СтрокаДетализации.VidName                    = ТекСтрока.VidName;
							СтрокаДетализации.kod                        = ТекСтрока.kod;
							СтрокаДетализации.edizm                      = "X";
							СтрокаДетализации.tarif1                     = ТекСтрока.ТарифОбщ;
							СтрокаДетализации.ammount                    = ТекСтрока.КоличествоОбщИПУ + ТекСтрока.КоличествоОбщОПУ;
							СтрокаДетализации.hammount                   = ТекСтрока.КоличествоОбщОПУ;
							СтрокаДетализации.sum                        = ТекСтрока.НачисленоОбщИПУ + ТекСтрока.НачисленоОбщОПУ;
							СтрокаДетализации.hsum                       = ТекСтрока.НачисленоОбщОПУ;
							СтрокаДетализации.volumeh                    = ТекСтрока.volumehОбщ;
							СтрокаДетализации.volumep                    = ТекСтрока.volumepОбщ;
							СтрокаДетализации.volumea                    = ТекСтрока.КоличествоУчетноеОбщ;
							СтрокаДетализации.Многотарифная              = Ложь;
							СтрокаДетализации.ОсновнаяСтрока             = Ложь;
							СтрокаДетализации.ТипУслуги                  = ТекущийТипУслуги;
							
							СтрокаУслуги.ОбщКоличествоИндНорма = ТекСтрока.КоличествоИНдНормаОбщ;
							
						КонецЕсли;
						
						Если ЕстьДневнойТариф Тогда
							СтрокаДетализации = ТаблицаДляВывода.Добавить();
							
							СтрокаДетализации.УслугаЯвляетсяСоставной    = Ложь;
							СтрокаДетализации.СтрокаДетализации          = Истина;
							СтрокаДетализации.УслугаПоСчетчикам          = Истина;
							СтрокаДетализации.УслугаСоставнаяПоСчетчикам = Ложь;
							СтрокаДетализации.КодВидаНачисленийИПУ       = ТекСтрока.КодВидаНачисленийИПУ;
							СтрокаДетализации.КодВидаНачисленийОПУ       = ТекСтрока.КодВидаНачисленийОПУ;
							СтрокаДетализации.ЛицевойСчет                = ТекСтрока.ЛицевойСчет;
							СтрокаДетализации.Услуга                     = ТекСтрока.Услуга;
							СтрокаДетализации.SName                      = " - дн. начисление";
							СтрокаДетализации.VidName                    = ТекСтрока.VidName;
							СтрокаДетализации.kod                        = ТекСтрока.kod;
							СтрокаДетализации.edizm                      = "X";
							СтрокаДетализации.tarif1                     = ТекСтрока.tarif1;
							СтрокаДетализации.ammount                    = ТекСтрока.КоличествоДнИПУ + ТекСтрока.КоличествоДнОПУ;
							СтрокаДетализации.hammount                   = ТекСтрока.КоличествоДнОПУ;
							СтрокаДетализации.sum                        = ТекСтрока.НачисленоДнИПУ + ТекСтрока.НачисленоДнОПУ;
							СтрокаДетализации.hsum                       = ТекСтрока.НачисленоДнОПУ;
							СтрокаДетализации.volumep                    = ТекСтрока.volumepДн;
							СтрокаДетализации.volumeh                    = ТекСтрока.volumehДн;
							СтрокаДетализации.volumea                    = ТекСтрока.КоличествоУчетноеДн;
							СтрокаДетализации.Многотарифная              = Ложь;
							СтрокаДетализации.ОсновнаяСтрока             = Ложь;
							СтрокаДетализации.ТипУслуги                  = ТекущийТипУслуги;
							
							СтрокаУслуги.ОбщКоличествоИндНорма = ТекСтрока.КоличествоИНдНормаДн;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЕстьНочнойТариф Тогда
						СтрокаДетализации = ТаблицаДляВывода.Добавить();
						
						СтрокаДетализации.УслугаЯвляетсяСоставной    = Ложь;
						СтрокаДетализации.СтрокаДетализации          = Истина;
						СтрокаДетализации.УслугаПоСчетчикам          = Истина;
						СтрокаДетализации.УслугаСоставнаяПоСчетчикам = Ложь;
						СтрокаДетализации.КодВидаНачисленийИПУ       = ТекСтрока.КодВидаНачисленийИПУ;
						СтрокаДетализации.КодВидаНачисленийОПУ       = ТекСтрока.КодВидаНачисленийОПУ;
						СтрокаДетализации.ЛицевойСчет                = ТекСтрока.ЛицевойСчет;
						СтрокаДетализации.Услуга                     = ТекСтрока.Услуга;
						СтрокаДетализации.SName                      = " - нч. начисление";
						СтрокаДетализации.VidName                    = ТекСтрока.VidName;
						СтрокаДетализации.kod                        = ТекСтрока.kod;
						СтрокаДетализации.edizm                      = "X";
						СтрокаДетализации.tarif1                     = ТекСтрока.tarif2;
						СтрокаДетализации.ammount                    = ТекСтрока.КоличествоНчИПУ + ТекСтрока.КоличествоНчОПУ;
						СтрокаДетализации.hammount                   = ТекСтрока.КоличествоНчОПУ;
						СтрокаДетализации.sum                        = ТекСтрока.НачисленоНчИПУ + ТекСтрока.НачисленоНчОПУ;
						СтрокаДетализации.hsum                       = ТекСтрока.НачисленоНчОПУ;
						СтрокаДетализации.volumep                    = ТекСтрока.volumepНч;
						СтрокаДетализации.volumeh                    = ТекСтрока.volumehНч;
						СтрокаДетализации.volumea                    = ТекСтрока.КоличествоУчетноеНч;
						СтрокаДетализации.Многотарифная              = Ложь;
						СтрокаДетализации.ОсновнаяСтрока             = Ложь;
						СтрокаДетализации.ТипУслуги                  = ТекущийТипУслуги;
						
						СтрокаУслуги.ОбщКоличествоИндНорма = ТекСтрока.КоличествоИНдНормаНч;
						
					КонецЕсли;
					
					Если ЕстьПиковыйТариф Тогда
						СтрокаДетализации = ТаблицаДляВывода.Добавить();
						
						СтрокаДетализации.УслугаЯвляетсяСоставной    = Ложь;
						СтрокаДетализации.СтрокаДетализации          = Истина;
						СтрокаДетализации.УслугаПоСчетчикам          = Истина;
						СтрокаДетализации.УслугаСоставнаяПоСчетчикам = Ложь;
						СтрокаДетализации.КодВидаНачисленийИПУ       = ТекСтрока.КодВидаНачисленийИПУ;
						СтрокаДетализации.КодВидаНачисленийОПУ       = ТекСтрока.КодВидаНачисленийОПУ;
						СтрокаДетализации.ЛицевойСчет                = ТекСтрока.ЛицевойСчет;
						СтрокаДетализации.Услуга                     = ТекСтрока.Услуга;
						СтрокаДетализации.SName                      = " - пик. начисление";
						СтрокаДетализации.VidName                    = ТекСтрока.VidName;
						СтрокаДетализации.kod                        = ТекСтрока.kod;
						СтрокаДетализации.edizm                      = "X";
						СтрокаДетализации.tarif1                     = ТекСтрока.tarif3;
						СтрокаДетализации.ammount                    = ТекСтрока.КоличествоПкИПУ + ТекСтрока.КоличествоПкОПУ;
						СтрокаДетализации.hammount                   = ТекСтрока.КоличествоПкОПУ;
						СтрокаДетализации.sum                        = ТекСтрока.НачисленоПкИПУ + ТекСтрока.НачисленоПкОПУ;
						СтрокаДетализации.hsum                       = ТекСтрока.НачисленоПкОПУ;
						СтрокаДетализации.volumep                    = ТекСтрока.volumepПк;
						СтрокаДетализации.volumeh                    = ТекСтрока.volumehПк;
						СтрокаДетализации.volumea                    = ТекСтрока.КоличествоУчетноеПк;
						СтрокаДетализации.Многотарифная              = Ложь;
						СтрокаДетализации.ОсновнаяСтрока             = Ложь;
						СтрокаДетализации.ТипУслуги                  = ТекущийТипУслуги;
						
						СтрокаУслуги.ОбщКоличествоИндНорма = ТекСтрока.КоличествоИНдНормаПк;
						
					КонецЕсли;
					
				Иначе
					
					СтрокаУслуги.volumep = ТекСтрока.volumep;
					СтрокаУслуги.volumea = ТекСтрока.КоличествоУчетноеДн + ТекСтрока.КоличествоУчетноеОбщ + ТекСтрока.КоличествоУчетноеНч + ТекСтрока.КоличествоУчетноеПк;
					СтрокаУслуги.volumeh = ТекСтрока.volumeh;
					СтрокаУслуги.ОбщКоличествоИндНорма = ТекСтрока.КоличествоИНдНормаОбщ + ТекСтрока.КоличествоИНдНормаДн + ТекСтрока.КоличествоИНдНормаНч + ТекСтрока.КоличествоИНдНормаПк;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаУслуги.tarif1  = ТекСтрока.ТарифОбщ;
				СтрокаУслуги.tarif2  = 0;
				СтрокаУслуги.tarif3  = 0;
				СтрокаУслуги.ammount = ТекСтрока.ammount;
				СтрокаУслуги.volumea = ТекСтрока.КоличествоУчетноеДн + ТекСтрока.КоличествоУчетноеОбщ + ТекСтрока.КоличествоУчетноеНч + ТекСтрока.КоличествоУчетноеПк;
				СтрокаУслуги.ОбщКоличествоИндНорма = ТекСтрока.КоличествоИНдНормаОбщ + ТекСтрока.КоличествоИНдНормаДн + ТекСтрока.КоличествоИНдНормаНч + ТекСтрока.КоличествоИНдНормаПк;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДляВывода;
	
КонецФункции

// Формирует таблица с данными по рассрочке платежей.
//
// Параметры:
//  Организация - выбранная организация.
//  МассивЛС - массив л/с, устаствующих в выгрузке.
//  МассивУслуг - массив услуг, устаствующих в выгрузке.
//  ТаблицаНачисленияДляВывода - таблица с услугами, по которым были начисления.
//  ДатаОбмена - дата обмена.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьТаблицуРассрочки(Организация, МассивЛС, МассивУслуг, ТаблицаНачисленияДляВывода, ТаблицаПоставщиков, ДатаОбмена, ТаблицаУслугВыгружатьНачисления)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПоставщиков.Services КАК ВидУслуги,
	|	ТаблицаПоставщиков.Поставщик,
	|	ТаблицаПоставщиков.CONId КАК КодПоставщика
	|ПОМЕСТИТЬ втТаблицаПоставщиков
	|ИЗ
	|	&ТаблицаПоставщиков КАК ТаблицаПоставщиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Начислено,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоКомиссия,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|					И УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплатыОстаткаПоРассрочке,
	|	УПЖКХ_НачисленияОбороты.МесяцРассрочки
	|ПОМЕСТИТЬ втТекущийМесяц
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга В (&СписокУслуг)
	|				И Услуга В (&МассивУслугВыгружатьНачисления)
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|				И (ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.МесяцРассрочки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ЗаявлениеНаРассрочку,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.Услуга,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ГодоваяПроцентнаяСтавка * 100 КАК ПроцентнаяСтавка
	|ПОМЕСТИТЬ втСведенияОРассрочке
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОРассрочке.СрезПоследних(
	|			&КонецМесяца,
	|			ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга В (&СписокУслуг)
	|				И Услуга В (&МассивУслугВыгружатьНачисления)) КАК УПЖКХ_СведенияОРассрочкеСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.Услуга,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ЗаявлениеНаРассрочку,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ГодоваяПроцентнаяСтавка * 100
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.Услуга,
	|	ЕСТЬNULL(втСведенияОРассрочке.ПроцентнаяСтавка, 0) КАК ПроцентнаяСтавка,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.МесяцРассрочки
	|ПОМЕСТИТЬ втПроцентныеСтавки
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоРассрочке.Остатки(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга В (&СписокУслуг)
	|				И Услуга В (&МассивУслугВыгружатьНачисления)
	|				И ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_Рассрочка.Предоставление)) КАК УПЖКХ_НачисленияПоРассрочкеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОРассрочке КАК втСведенияОРассрочке
	|		ПО УПЖКХ_НачисленияПоРассрочкеОстатки.ЗаявлениеНаРассрочку = втСведенияОРассрочке.ЗаявлениеНаРассрочку
	|			И УПЖКХ_НачисленияПоРассрочкеОстатки.ЛицевойСчет = втСведенияОРассрочке.ЛицевойСчет
	|			И УПЖКХ_НачисленияПоРассрочкеОстатки.Услуга = втСведенияОРассрочке.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.Услуга,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.МесяцРассрочки,
	|	втСведенияОРассрочке.ПроцентнаяСтавка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТекущийМесяц.ЛицевойСчет,
	|	втТекущийМесяц.Услуга,
	|	СУММА(втТекущийМесяц.Начислено) КАК Начислено,
	|	СУММА(втТекущийМесяц.НачисленоКомиссия) КАК НачисленоКомиссия,
	|	СУММА(втТекущийМесяц.СуммаОплатыОстаткаПоРассрочке) КАК ПредоплатаРассрочки,
	|	ЕСТЬNULL(втПроцентныеСтавки.ПроцентнаяСтавка, 0) КАК ПроцентнаяСтавка,
	|	втТекущийМесяц.МесяцРассрочки
	|ПОМЕСТИТЬ втНачислениеРассрочки
	|ИЗ
	|	втТекущийМесяц КАК втТекущийМесяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПроцентныеСтавки КАК втПроцентныеСтавки
	|		ПО втТекущийМесяц.ЛицевойСчет = втПроцентныеСтавки.ЛицевойСчет
	|			И втТекущийМесяц.Услуга = втПроцентныеСтавки.Услуга
	|			И втТекущийМесяц.МесяцРассрочки = втПроцентныеСтавки.МесяцРассрочки
	|
	|СГРУППИРОВАТЬ ПО
	|	втТекущийМесяц.ЛицевойСчет,
	|	втТекущийМесяц.Услуга,
	|	втТекущийМесяц.МесяцРассрочки,
	|	ЕСТЬNULL(втПроцентныеСтавки.ПроцентнаяСтавка, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК ОстатокРассрочки,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцРассрочки
	|ПОМЕСТИТЬ втОстаткиРассрочки
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&НачалоМесяца,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга В (&СписокУслуг)
	|				И Услуга В (&МассивУслугВыгружатьНачисления)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Рассрочка)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцРассрочки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втНачислениеРассрочки.ЛицевойСчет, втОстаткиРассрочки.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втНачислениеРассрочки.Услуга.ВидУслуги, втОстаткиРассрочки.Услуга.ВидУслуги) КАК ВидУслуги,
	|	СУММА(ЕСТЬNULL(втНачислениеРассрочки.Начислено, 0)) КАК Начислено,
	|	СУММА(ЕСТЬNULL(втНачислениеРассрочки.НачисленоКомиссия, 0)) КАК НачисленоКомиссия,
	|	СУММА(ЕСТЬNULL(втНачислениеРассрочки.ПредоплатаРассрочки, 0)) КАК ПредоплатаРассрочки,
	|	ЕСТЬNULL(втНачислениеРассрочки.ПроцентнаяСтавка, 0) КАК ПроцентнаяСтавка,
	|	СУММА(ЕСТЬNULL(втОстаткиРассрочки.ОстатокРассрочки, 0)) КАК Остаток,
	|	СУММА(ЕСТЬNULL(втНачислениеРассрочки.Начислено, 0) + ЕСТЬNULL(втНачислениеРассрочки.НачисленоКомиссия, 0) + ЕСТЬNULL(втОстаткиРассрочки.ОстатокРассрочки, 0)) КАК КОплате
	|ПОМЕСТИТЬ втРассрочка
	|ИЗ
	|	втНачислениеРассрочки КАК втНачислениеРассрочки
	|		ПОЛНОЕ СОЕДИНЕНИЕ втОстаткиРассрочки КАК втОстаткиРассрочки
	|		ПО втНачислениеРассрочки.ЛицевойСчет = втОстаткиРассрочки.ЛицевойСчет
	|			И втНачислениеРассрочки.Услуга = втОстаткиРассрочки.Услуга
	|			И втНачислениеРассрочки.МесяцРассрочки = втОстаткиРассрочки.МесяцРассрочки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втНачислениеРассрочки.ЛицевойСчет, втОстаткиРассрочки.ЛицевойСчет),
	|	ЕСТЬNULL(втНачислениеРассрочки.ПроцентнаяСтавка, 0),
	|	ЕСТЬNULL(втНачислениеРассрочки.Услуга.ВидУслуги, втОстаткиРассрочки.Услуга.ВидУслуги)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаУслугДляВывода.ЛицевойСчет,
	|	ВЫРАЗИТЬ(ТаблицаУслугДляВывода.Услуга КАК Справочник.КВП_Услуги) КАК Услуга
	|ПОМЕСТИТЬ втУслугиДляВывода
	|ИЗ
	|	&ТаблицаУслугДляВывода КАК ТаблицаУслугДляВывода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втУслугиДляВывода.ЛицевойСчет,
	|	втУслугиДляВывода.Услуга.ВидУслуги КАК ВидУслуги,
	|	ЕСТЬNULL(втТаблицаПоставщиков.Поставщик, &Организация) КАК Поставщик
	|ПОМЕСТИТЬ втВидыУслугДляВывода
	|ИЗ
	|	втУслугиДляВывода КАК втУслугиДляВывода
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаПоставщиков КАК втТаблицаПоставщиков
	|		ПО втУслугиДляВывода.Услуга.ВидУслуги = втТаблицаПоставщиков.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРассрочка.ЛицевойСчет,
	|	ПРЕДСТАВЛЕНИЕ(втРассрочка.ВидУслуги) КАК ВидУслуги,
	|	втВидыУслугДляВывода.Поставщик КАК Поставщик,
	|	втТаблицаПоставщиков.КодПоставщика,
	|	втРассрочка.Начислено,
	|	втРассрочка.НачисленоКомиссия,
	|	втРассрочка.ПредоплатаРассрочки,
	|	втРассрочка.ПроцентнаяСтавка,
	|	втРассрочка.Остаток,
	|	втРассрочка.КОплате КАК КОплате
	|ИЗ
	|	втРассрочка КАК втРассрочка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВидыУслугДляВывода КАК втВидыУслугДляВывода
	|		ПО втРассрочка.ЛицевойСчет = втВидыУслугДляВывода.ЛицевойСчет
	|			И втРассрочка.ВидУслуги = втВидыУслугДляВывода.ВидУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаПоставщиков КАК втТаблицаПоставщиков
	|		ПО (втВидыУслугДляВывода.Поставщик = втТаблицаПоставщиков.Поставщик)";
	
	Запрос.УстановитьПараметр("НачалоМесяца",          НачалоМесяца(ДатаОбмена));
	Запрос.УстановитьПараметр("КонецМесяца",           КонецМесяца(ДатаОбмена));
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов",   МассивЛС);
	Запрос.УстановитьПараметр("СписокУслуг",           МассивУслуг);
	Запрос.УстановитьПараметр("ТаблицаУслугДляВывода", ТаблицаНачисленияДляВывода);
	Запрос.УстановитьПараметр("ТаблицаПоставщиков",    ТаблицаПоставщиков);
	Запрос.УстановитьПараметр("МассивУслугВыгружатьНачисления", ТаблицаУслугВыгружатьНачисления.ВыгрузитьКолонку("Услуга"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуРассрочки()

// Формирует таблицу со сведениями о перерасчетах
//
Функция ПолучитьТаблицуПерерасчетов(Организация, ТаблицаНачисленияДляВывода, ТаблицаПоставщиков)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаНачисленияДляВывода.ЛицевойСчет,
	|	ТаблицаНачисленияДляВывода.ВидУслуги,
	|	ТаблицаНачисленияДляВывода.correction,
	|	ТаблицаНачисленияДляВывода.correctionReason
	|ПОМЕСТИТЬ втТаблицаПерерасчетов
	|ИЗ
	|	&ТаблицаНачисленияДляВывода КАК ТаблицаНачисленияДляВывода
	|ГДЕ
	|	НЕ ТаблицаНачисленияДляВывода.correction = 0
	|	И НЕ ТаблицаНачисленияДляВывода.correction = НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоставщиков.Services КАК ВидУслуги,
	|	ТаблицаПоставщиков.Поставщик КАК Поставщик,
	|	ТаблицаПоставщиков.CONId КАК КодПоставщика
	|ПОМЕСТИТЬ втТаблицаПоставщиков
	|ИЗ
	|	&ТаблицаПоставщиков КАК ТаблицаПоставщиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаПоставщиков.Поставщик,
	|	втТаблицаПоставщиков.КодПоставщика,
	|	втТаблицаПоставщиков.ВидУслуги КАК ВидУслуги
	|ПОМЕСТИТЬ втОрганизация
	|ИЗ
	|	втТаблицаПоставщиков КАК втТаблицаПоставщиков
	|ГДЕ
	|	втТаблицаПоставщиков.Поставщик = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаПерерасчетов.ЛицевойСчет,
	|	втТаблицаПерерасчетов.ВидУслуги,
	|	втТаблицаПерерасчетов.correction,
	|	втТаблицаПерерасчетов.correctionReason,
	|	втТаблицаПоставщиков.Поставщик,
	|	втТаблицаПоставщиков.КодПоставщика,
	|	ЕСТЬNULL(втТаблицаПоставщиков.ВидУслуги, """") КАК ВидУслугиПоставщика
	|ПОМЕСТИТЬ втСоответствиеПерерасчетовИПоставщиков
	|ИЗ
	|	втТаблицаПерерасчетов КАК втТаблицаПерерасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаПоставщиков КАК втТаблицаПоставщиков
	|		ПО втТаблицаПерерасчетов.ВидУслуги = втТаблицаПоставщиков.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоответствиеПерерасчетовИПоставщиков.ЛицевойСчет,
	|	втСоответствиеПерерасчетовИПоставщиков.ВидУслуги,
	|	втСоответствиеПерерасчетовИПоставщиков.correction,
	|	втСоответствиеПерерасчетовИПоставщиков.correctionReason,
	|	ЕСТЬNULL(втСоответствиеПерерасчетовИПоставщиков.Поставщик, втОрганизация.Поставщик) КАК Поставщик,
	|	ЕСТЬNULL(втСоответствиеПерерасчетовИПоставщиков.КодПоставщика, втОрганизация.КодПоставщика) КАК КодПоставщика,
	|	втСоответствиеПерерасчетовИПоставщиков.ВидУслугиПоставщика КАК ВидУслугиПоставщика
	|ИЗ
	|	втСоответствиеПерерасчетовИПоставщиков КАК втСоответствиеПерерасчетовИПоставщиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОрганизация КАК втОрганизация
	|		ПО втСоответствиеПерерасчетовИПоставщиков.ВидУслугиПоставщика = втОрганизация.ВидУслуги";
	
	Запрос.УстановитьПараметр("Организация",                Организация);
	Запрос.УстановитьПараметр("ТаблицаНачисленияДляВывода", ТаблицаНачисленияДляВывода);
	Запрос.УстановитьПараметр("ТаблицаПоставщиков",         ТаблицаПоставщиков);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуПерерасчетов()

// Формирует таблицу сведений о поставщиках услуг.
// 
// Параметры:
//  Организация - выбранная организация.
//  МассивВидовУслуг - массив - массив видов услуг, данные по которым необходимо выгрузить.
//  ДатаОбмена - дата - за которую происходит обмена данными.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица поставщиков услуг.
//
// Примечание:
//  Данные текущей таблицы значений будут использоваться для формирования файл обмена.
//  Поэтому наличие и наименования колонок таблицы должно быть неизменно.
//  
//  Колонки:
//   executor - признак того, что УО является исполнителем услуг ("1" - является, "" - не является).
//   Services - вид услуги.
//   Поставщик - ссылка на поставщика услуг (если не указан, поставщиком является УО).
//   Наименование - наименование поставщика / УО.
//   Код - код поставщика / УО.
//   РасчетныйСчет - номер основного расчетного счета поставщика / УО.
//   Банк - наименование банка, соответствующий расчетному счету.
//   БИК - БИК банка.
//   КоррСчет - корр. счет банка.
//   Город - город, в котором находится банк.
//
Функция ПолучитьТаблицуПоставщиков(Организация, МассивВидовУслуг, НастройкиВыводаКвитанций, ДатаОбмена, ТаблицаУслугВыгружатьНачисления)
	
	// При внесении правок в запрос следует обратить внимание, что в первом пакете запроса
	// осуществляется сбор сведений о поставщиках, таким образом, что:
	// 1. Если исполнитель услуг не задан, то им считается УО.
	//        3-й запрос пакета ничего не возвращает.
	// 2. Если исполнитель услуг задан, то им считается контрагент, получаемый в 3-м запросе пакета.
	//        1-й запрос пакета ничего не возвращает.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаУслугВыгружатьНачисления.Услуга
	|ПОМЕСТИТЬ втТаблицаУслугВыгружатьНачисления
	|ИЗ
	|	&ТаблицаУслугВыгружатьНачисления КАК ТаблицаУслугВыгружатьНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втТаблицаУслугВыгружатьНачисления.Услуга.ВидУслуги КАК ВидУслуги
	|ПОМЕСТИТЬ втТаблицаВидовУслугВыгружатьНачисления
	|ИЗ
	|	втТаблицаУслугВыгружатьНачисления КАК втТаблицаУслугВыгружатьНачисления
	|;
	|
	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""1"" КАК executor,
	|	"""" КАК Services,
	|	Организации.Ссылка КАК Поставщик,
	|	Организации.Наименование КАК Наименование,
	|	Организации.Код КАК Код,
	|	Организации.ОсновнойБанковскийСчет.НомерСчета КАК РасчетныйСчет,
	|	Организации.ОсновнойБанковскийСчет.Банк КАК Банк,
	|	Организации.ОсновнойБанковскийСчет.Банк.Код КАК БИК,
	|	Организации.ОсновнойБанковскийСчет.Банк.КоррСчет КАК КоррСчет,
	|	Организации.ОсновнойБанковскийСчет.Банк.Город КАК Город,
	|	Организации.ИНН,
	|	Организации.КПП
	|ПОМЕСТИТЬ втПоставщики
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &ОрганизацияКакИсполнительРасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	"""",
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.ВидУслуги,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.Наименование,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.Код,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.НомерСчета,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.Банк,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.Банк.Код,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.Банк.КоррСчет,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.Банк.Город,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ИНН,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.КПП
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И НЕ ВидУслуги ЕСТЬ NULL 
	|				И ВидУслуги В (&МассивВидовУслуг)
	|				И ВидУслуги В
	|					(ВЫБРАТЬ
	|						втТаблицаВидовУслугВыгружатьНачисления.ВидУслуги
	|					ИЗ
	|						втТаблицаВидовУслугВыгружатьНачисления КАК втТаблицаВидовУслугВыгружатьНачисления)) КАК УПЖКХ_ПоставщикиУслугСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	""2"",
	|	"""",
	|	Контрагенты.Ссылка,
	|	Контрагенты.Наименование,
	|	Контрагенты.Код,
	|	Контрагенты.ОсновнойБанковскийСчет.НомерСчета,
	|	Контрагенты.ОсновнойБанковскийСчет.Банк,
	|	Контрагенты.ОсновнойБанковскийСчет.Банк.Код,
	|	Контрагенты.ОсновнойБанковскийСчет.Банк.КоррСчет,
	|	Контрагенты.ОсновнойБанковскийСчет.Банк.Город,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &ИсполнительРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииКонтактнаяИнформация.Ссылка КАК Объект,
	|	ВЫБОР
	|		КОГДА ОрганизацииКонтактнаяИнформация.Вид.Наименование = ""Юридический адрес""
	|			ТОГДА ВЫРАЗИТЬ(ОрганизацииКонтактнаяИнформация.Представление КАК СТРОКА(150))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЮрАдрес,
	|	ВЫБОР
	|		КОГДА ОрганизацииКонтактнаяИнформация.Вид.Наименование = ""Телефон""
	|			ТОГДА ВЫРАЗИТЬ(ОрганизацииКонтактнаяИнформация.Представление КАК СТРОКА(50))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Телефон,
	|	ВЫБОР
	|		КОГДА ОрганизацииКонтактнаяИнформация.Вид.Наименование = ""Факс""
	|			ТОГДА ВЫРАЗИТЬ(ОрганизацииКонтактнаяИнформация.Представление КАК СТРОКА(50))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Факс
	|ПОМЕСТИТЬ втКонтактнаяИнформацияОрганизаций
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка = &ОрганизацияКакИсполнительРасчетов
	|	И (ОрганизацииКонтактнаяИнформация.Вид.Наименование = ""Юридический адрес""
	|			ИЛИ ОрганизацииКонтактнаяИнформация.Вид.Наименование = ""Телефон""
	|			ИЛИ ОрганизацииКонтактнаяИнформация.Вид.Наименование = ""Факс"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Объект,
	|	ВЫБОР
	|		КОГДА КонтрагентыКонтактнаяИнформация.Вид.Наименование = ""Юридический адрес""
	|			ТОГДА ВЫРАЗИТЬ(КонтрагентыКонтактнаяИнформация.Представление КАК СТРОКА(150))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЮрАдрес,
	|	ВЫБОР
	|		КОГДА КонтрагентыКонтактнаяИнформация.Вид.Наименование = ""Телефон""
	|			ТОГДА ВЫРАЗИТЬ(КонтрагентыКонтактнаяИнформация.Представление КАК СТРОКА(50))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Телефон,
	|	ВЫБОР
	|		КОГДА КонтрагентыКонтактнаяИнформация.Вид.Наименование = ""Факс""
	|			ТОГДА ВЫРАЗИТЬ(КонтрагентыКонтактнаяИнформация.Представление КАК СТРОКА(50))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Факс
	|ПОМЕСТИТЬ втКонтактнаяИнформацияПоставщиков
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				втПоставщики.Поставщик
	|			ИЗ
	|				втПоставщики КАК втПоставщики)
	|	И (КонтрагентыКонтактнаяИнформация.Вид.Наименование = ""Юридический адрес""
	|			ИЛИ КонтрагентыКонтактнаяИнформация.Вид.Наименование = ""Телефон""
	|			ИЛИ КонтрагентыКонтактнаяИнформация.Вид.Наименование = ""Факс"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКонтактнаяИнформацияОрганизаций.Объект,
	|	втКонтактнаяИнформацияОрганизаций.ЮрАдрес,
	|	втКонтактнаяИнформацияОрганизаций.Телефон,
	|	втКонтактнаяИнформацияОрганизаций.Факс
	|ПОМЕСТИТЬ втОбщаяКонтактнаяИнформация
	|ИЗ
	|	втКонтактнаяИнформацияОрганизаций КАК втКонтактнаяИнформацияОрганизаций
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втКонтактнаяИнформацияПоставщиков.Объект,
	|	втКонтактнаяИнформацияПоставщиков.ЮрАдрес,
	|	втКонтактнаяИнформацияПоставщиков.Телефон,
	|	втКонтактнаяИнформацияПоставщиков.Факс
	|ИЗ
	|	втКонтактнаяИнформацияПоставщиков КАК втКонтактнаяИнформацияПоставщиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоставщики.executor КАК executor,
	|	втПоставщики.Services КАК Services,
	|	втПоставщики.Поставщик КАК Поставщик,
	|	втПоставщики.Наименование КАК CONName,
	|	втПоставщики.Код КАК CONId,
	|	втПоставщики.ИНН КАК inn,
	|	втПоставщики.КПП КАК kpp,
	|	втПоставщики.РасчетныйСчет КАК rs,
	|	втПоставщики.Банк.Наименование КАК bank,
	|	ЕСТЬNULL(втПоставщики.БИК, """""""") КАК bik,
	|	ЕСТЬNULL(втПоставщики.КоррСчет, """""""") КАК ks,
	|	втПоставщики.Город КАК city,
	|	ЕСТЬNULL(втОбщаяКонтактнаяИнформация.ЮрАдрес, """") КАК address,
	|	ЕСТЬNULL(втОбщаяКонтактнаяИнформация.Телефон, """") КАК phone,
	|	ЕСТЬNULL(втОбщаяКонтактнаяИнформация.Факс, """") КАК fax
	|ИЗ
	|	втПоставщики КАК втПоставщики
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОбщаяКонтактнаяИнформация КАК втОбщаяКонтактнаяИнформация
	|		ПО втПоставщики.Поставщик = втОбщаяКонтактнаяИнформация.Объект";
	
	Если НастройкиВыводаКвитанций.ИсполнительРасчетов.Пустая() Тогда
		// Не указан исполнитель расчетов, executor=1
		Запрос.УстановитьПараметр("ОрганизацияКакИсполнительРасчетов", Организация);
	Иначе
		// Указан исполнитель расчетов, executor=2
		Запрос.УстановитьПараметр("ОрганизацияКакИсполнительРасчетов", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсполнительРасчетов", НастройкиВыводаКвитанций.ИсполнительРасчетов);
	Запрос.УстановитьПараметр("ДатаКон",             КонецМесяца(ДатаОбмена));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("МассивВидовУслуг",    МассивВидовУслуг);
	Запрос.УстановитьПараметр("ТаблицаУслугВыгружатьНачисления", ТаблицаУслугВыгружатьНачисления);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуПоставщиков()

// Формирует таблицу сведений об ОПУ.
// 
// Параметры:
//  Организация - выбранная организация.
//  МассивЛС    - массив л/с.
//  МассивУслуг - Массив - услуги выгрузки.
//  ДатаОбмена - Дата - дата совершения обмена.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
//
// Примечание:
//  Данные текущей таблицы значений будут использоваться для формирования файл обмена.
//  Поэтому наличие и наименования колонок таблицы должно быть неизменно.
//  
//  Колонки:
//   Услуга - ссылка на услугу.
//   Здание - ссылка на здание.
//   service - наименование услуги.
//   VidName - наименование вида услуги.
//   indiccur1 - последнее показание ОПУ по дневному виду тарифа.
//   indiccur2 - последнее показание ОПУ по ночному виду тарифа.
//   indiccur3 - последнее показание ОПУ по пиковому виду тарифа.
//   value_count - тарифность счетчика (число).
//   kod - код счетчика.
//   HMName - наименование счетчика.
//   num - заводской номер счетчика.
//
Функция ПолучитьСведенияОбОПУ(Организация, МассивЛС, МассивУслуг, ДатаОбмена, ТаблицаУслугВыгружатьПоказания)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес.Владелец КАК Здание,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес.Подъезд КАК Подъезд,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга
	|ПОМЕСТИТЬ втНазначенныеУслуги
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаНач,
	|			Организация = &Организация
	|				И Объект В (&МассивЛС)
	|				И Услуга В (&МассивУслуг)
	|				И Услуга В (&МассивУслугВыгружатьПоказания)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НазначенныеНачисления.Объект.Адрес.Владелец,
	|	КВП_НазначенныеНачисления.Объект.Адрес.Подъезд,
	|	КВП_НазначенныеНачисления.Услуга
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
	|ГДЕ
	|	КВП_НазначенныеНачисления.Активность
	|	И КВП_НазначенныеНачисления.Действует
	|	И КВП_НазначенныеНачисления.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_НазначенныеНачисления.Организация = &Организация
	|	И КВП_НазначенныеНачисления.Объект В(&МассивЛС)
	|	И КВП_НазначенныеНачисления.Услуга В(&МассивУслуг)
	|	И КВП_НазначенныеНачисления.Услуга В(&МассивУслугВыгружатьПоказания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНазначенныеУслуги.Здание КАК Объект,
	|	втНазначенныеУслуги.Услуга,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик
	|ПОМЕСТИТЬ втСчетчикиОПУ
	|ИЗ
	|	втНазначенныеУслуги КАК втНазначенныеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&ДатаНач, ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|		ПО втНазначенныеУслуги.Здание = КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект
	|			И втНазначенныеУслуги.Услуга = КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втНазначенныеУслуги.Здание,
	|	втНазначенныеУслуги.Услуга,
	|	КВП_ЗакрепленныеСчетчики.Счетчик
	|ИЗ
	|	втНазначенныеУслуги КАК втНазначенныеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|		ПО втНазначенныеУслуги.Здание = КВП_ЗакрепленныеСчетчики.Объект
	|			И втНазначенныеУслуги.Услуга = КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.Активность
	|	И КВП_ЗакрепленныеСчетчики.Действует
	|	И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втНазначенныеУслуги.Подъезд,
	|	втНазначенныеУслуги.Услуга,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик
	|ИЗ
	|	втНазначенныеУслуги КАК втНазначенныеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&ДатаНач, ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|		ПО втНазначенныеУслуги.Подъезд = КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект
	|			И втНазначенныеУслуги.Услуга = КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втНазначенныеУслуги.Подъезд,
	|	втНазначенныеУслуги.Услуга,
	|	КВП_ЗакрепленныеСчетчики.Счетчик
	|ИЗ
	|	втНазначенныеУслуги КАК втНазначенныеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|		ПО втНазначенныеУслуги.Подъезд = КВП_ЗакрепленныеСчетчики.Объект
	|			И втНазначенныеУслуги.Услуга = КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.Активность
	|	И КВП_ЗакрепленныеСчетчики.Действует
	|	И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втСчетчикиОПУ.Услуга КАК Услуга,
	|	втСчетчикиОПУ.Объект КАК Объект,
	|	втСчетчикиОПУ.Услуга.Наименование КАК service,
	|	втСчетчикиОПУ.Услуга.ВидУслуги.Наименование КАК VidName,
	|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание, 0) КАК indiccur1,
	|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.НочноеПоказание, 0) КАК indiccur2,
	|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.ПиковоеПоказание, 0) КАК indiccur3,
	|	ВЫБОР
	|		КОГДА втСчетчикиОПУ.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Однотарифный)
	|			ТОГДА 1
	|		КОГДА втСчетчикиОПУ.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК value_count,
	|	втСчетчикиОПУ.Счетчик.Код КАК kod,
	|	втСчетчикиОПУ.Счетчик.Наименование КАК HMName,
	|	втСчетчикиОПУ.Счетчик.ЗаводскойНомер КАК num
	|ИЗ
	|	втСчетчикиОПУ КАК втСчетчикиОПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(&ДатаКон, Счетчик.ВидУслуги В (&МассивУслуг)) КАК КВП_ПоказанияСчетчиковСрезПоследних
	|		ПО втСчетчикиОПУ.Счетчик = КВП_ПоказанияСчетчиковСрезПоследних.Счетчик
	|ГДЕ
	|	втСчетчикиОПУ.Услуга В(&МассивУслуг)
	|	И втСчетчикиОПУ.Услуга В(&МассивУслугВыгружатьПоказания)";
	
	Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(ДатаОбмена));
	Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(ДатаОбмена));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МассивЛС",    МассивЛС);
	Запрос.УстановитьПараметр("МассивУслуг", МассивУслуг);
	Запрос.УстановитьПараметр("МассивУслугВыгружатьПоказания", ТаблицаУслугВыгружатьПоказания.ВыгрузитьКолонку("Услуга"));
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьСведенияОбОПУ()

// Формирует таблицу сведений о ИПУ.
// 
// Параметры:
//  МассивЛС - массив л/с.
//  МассивУслуг - Массив - услуги выгрузки.
//  ДатаОбмена - Дата - дата совершения обмена.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица сведений о ИПУ.
//
// Примечание:
//  Данные текущей таблицы значений будут использоваться для формирования файл обмена.
//  Поэтому наличие и наименования колонок таблицы должно быть неизменно.
//  
//  Колонки:
//   ЛицевойСчет - ссылка на лицевой счет.
//   service - наименование услуги.
//   SName - наименование вида услуги.
//   MName - наименование счетчика.
//   kod - код счетчика.
//   capacity - разрядность счетчика.
//   Действует - действует ли счетчик.
//   value_count - тарифность счетчика (число).
//   indicbef1 - предыдущие показания счетчика по дневному тарифу.
//   indicbef2 - предыдущие показания счетчика по ночному тарифу.
//   indicbef3 - предыдущие показания счетчика по пиковому тарифу.
//   indiccur1 - текущие показания счетчика по дневному тарифу.
//   indiccur2 - текущие показания счетчика по ночному тарифу.
//   indiccur3 - текущие показания счетчика по пиковому тарифу.
//   date_indicbef - дата предыдущих показаний счетчика.
//   date_indiccur - дата текущих показаний счетчика.
//   num - заводской номер счетчика.
//
Функция ПолучитьСведенияОбИПУ(МассивЛС, МассивУслуг, ДатаОбмена, ТаблицаУслугВыгружатьПоказания)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение
	|ПОМЕСТИТЬ втПомещенияЛС
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В(&МассивЛС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПомещенияЛС.ЛицевойСчет,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Разрядность КАК Разрядность,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик
	|ПОМЕСТИТЬ втСчетчикиНаНачалоМесяца
	|ИЗ
	|	втПомещенияЛС КАК втПомещенияЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&ДатаНач, ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|		ПО (втПомещенияЛС.ЛицевойСчет = КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект
	|				ИЛИ втПомещенияЛС.Помещение = КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект)
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втПомещенияЛС.ЛицевойСчет,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги КАК Услуга,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.Разрядность КАК Разрядность,
	|	КВП_ЗакрепленныеСчетчики.Счетчик,
	|	КВП_ЗакрепленныеСчетчики.Действует
	|ПОМЕСТИТЬ втСчетчикиЗаПериод
	|ИЗ
	|	втПомещенияЛС КАК втПомещенияЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|		ПО (втПомещенияЛС.ЛицевойСчет = КВП_ЗакрепленныеСчетчики.Объект
	|				ИЛИ втПомещенияЛС.Помещение = КВП_ЗакрепленныеСчетчики.Объект)
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И (КВП_ЗакрепленныеСчетчики.Объект = втПомещенияЛС.ЛицевойСчет
	|			ИЛИ КВП_ЗакрепленныеСчетчики.Объект = втПомещенияЛС.Помещение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втСчетчикиНаНачалоМесяца.ЛицевойСчет, втСчетчикиЗаПериод.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втСчетчикиНаНачалоМесяца.Услуга, втСчетчикиЗаПериод.Услуга) КАК Услуга,
	|	ЕСТЬNULL(втСчетчикиНаНачалоМесяца.Разрядность, втСчетчикиЗаПериод.Разрядность) КАК Разрядность,
	|	ЕСТЬNULL(втСчетчикиНаНачалоМесяца.Счетчик, втСчетчикиЗаПериод.Счетчик) КАК Счетчик,
	|	ЕСТЬNULL(втСчетчикиЗаПериод.Действует, ИСТИНА) КАК Действует
	|ПОМЕСТИТЬ втСчетчики
	|ИЗ
	|	втСчетчикиНаНачалоМесяца КАК втСчетчикиНаНачалоМесяца
	|		ПОЛНОЕ СОЕДИНЕНИЕ втСчетчикиЗаПериод КАК втСчетчикиЗаПериод
	|		ПО втСчетчикиНаНачалоМесяца.Счетчик = втСчетчикиЗаПериод.Счетчик
	|			И втСчетчикиНаНачалоМесяца.ЛицевойСчет = втСчетчикиЗаПериод.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСчетчики.ЛицевойСчет,
	|	втСчетчики.Услуга,
	|	втСчетчики.Счетчик,
	|	втСчетчики.Разрядность,
	|	втСчетчики.Действует
	|ПОМЕСТИТЬ втВыбранныеСчетчики
	|ИЗ
	|	втСчетчики КАК втСчетчики
	|ГДЕ
	|	втСчетчики.Услуга В(&МассивУслуг)
	|	И втСчетчики.Услуга В(&МассивУслугВыгружатьПоказания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втВыбранныеСчетчики.ЛицевойСчет,
	|	втВыбранныеСчетчики.Услуга,
	|	втВыбранныеСчетчики.Счетчик,
	|	ПоказанияСчетчиков.ДневноеПоказание КАК ДневноеПоказание,
	|	ПоказанияСчетчиков.НочноеПоказание КАК НочноеПоказание,
	|	ПоказанияСчетчиков.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ПоказанияСчетчиков.НачальноеПоказание,
	|	ПоказанияСчетчиков.Период
	|ПОМЕСТИТЬ втВсеПоказания
	|ИЗ
	|	втВыбранныеСчетчики КАК втВыбранныеСчетчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков КАК ПоказанияСчетчиков
	|		ПО втВыбранныеСчетчики.Счетчик = ПоказанияСчетчиков.Счетчик
	|ГДЕ
	|	ПоказанияСчетчиков.Период МЕЖДУ &ДатаНач И &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеПоказания.ЛицевойСчет,
	|	втВсеПоказания.Услуга,
	|	втВсеПоказания.Счетчик,
	|	МАКСИМУМ(втВсеПоказания.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыПоследнихПоказаний
	|ИЗ
	|	втВсеПоказания КАК втВсеПоказания
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеПоказания.ЛицевойСчет,
	|	втВсеПоказания.Услуга,
	|	втВсеПоказания.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеПоказания.ЛицевойСчет,
	|	втВсеПоказания.Услуга,
	|	втВсеПоказания.Счетчик,
	|	втВсеПоказания.НачальноеПоказание,
	|	МАКСИМУМ(втВсеПоказания.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыНачальныхПоказаний
	|ИЗ
	|	втВсеПоказания КАК втВсеПоказания
	|ГДЕ
	|	втВсеПоказания.НачальноеПоказание
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеПоказания.ЛицевойСчет,
	|	втВсеПоказания.Услуга,
	|	втВсеПоказания.Счетчик,
	|	втВсеПоказания.НачальноеПоказание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПериодыПоследнихПоказаний.ЛицевойСчет,
	|	втПериодыПоследнихПоказаний.Услуга,
	|	втПериодыПоследнихПоказаний.Счетчик,
	|	втВсеПоказания.ДневноеПоказание,
	|	втВсеПоказания.НочноеПоказание,
	|	втВсеПоказания.ПиковоеПоказание,
	|	втВсеПоказания.НачальноеПоказание,
	|	втПериодыПоследнихПоказаний.Период
	|ПОМЕСТИТЬ втТекущиеПоказания
	|ИЗ
	|	втПериодыПоследнихПоказаний КАК втПериодыПоследнихПоказаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВсеПоказания КАК втВсеПоказания
	|		ПО втПериодыПоследнихПоказаний.ЛицевойСчет = втВсеПоказания.ЛицевойСчет
	|			И втПериодыПоследнихПоказаний.Услуга = втВсеПоказания.Услуга
	|			И втПериодыПоследнихПоказаний.Счетчик = втВсеПоказания.Счетчик
	|			И втПериодыПоследнихПоказаний.Период = втВсеПоказания.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПериодыНачальныхПоказаний.ЛицевойСчет,
	|	втПериодыНачальныхПоказаний.Услуга,
	|	втПериодыНачальныхПоказаний.Счетчик,
	|	втВсеПоказания.ДневноеПоказание,
	|	втВсеПоказания.НочноеПоказание,
	|	втВсеПоказания.ПиковоеПоказание,
	|	втВсеПоказания.НачальноеПоказание,
	|	втПериодыНачальныхПоказаний.Период
	|ПОМЕСТИТЬ втНачальныеПоказания
	|ИЗ
	|	втПериодыНачальныхПоказаний КАК втПериодыНачальныхПоказаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВсеПоказания КАК втВсеПоказания
	|		ПО втПериодыНачальныхПоказаний.ЛицевойСчет = втВсеПоказания.ЛицевойСчет
	|			И втПериодыНачальныхПоказаний.Услуга = втВсеПоказания.Услуга
	|			И втПериодыНачальныхПоказаний.Счетчик = втВсеПоказания.Счетчик
	|			И втПериодыНачальныхПоказаний.Период = втВсеПоказания.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втВыбранныеСчетчики.ЛицевойСчет,
	|	втВыбранныеСчетчики.Услуга,
	|	втВыбранныеСчетчики.Счетчик,
	|	ЕСТЬNULL(ПоказанияСчетчиков.ДневноеПоказание, 0) КАК ДневноеПоказание,
	|	ЕСТЬNULL(ПоказанияСчетчиков.НочноеПоказание, 0) КАК НочноеПоказание,
	|	ЕСТЬNULL(ПоказанияСчетчиков.ПиковоеПоказание, 0) КАК ПиковоеПоказание,
	|	ПоказанияСчетчиков.НачальноеПоказание,
	|	ПоказанияСчетчиков.Период
	|ПОМЕСТИТЬ втПредПоказания
	|ИЗ
	|	втВыбранныеСчетчики КАК втВыбранныеСчетчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(&ДатаНач, ) КАК ПоказанияСчетчиков
	|		ПО втВыбранныеСчетчики.Счетчик = ПоказанияСчетчиков.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения КАК ДатаПоверки
	|ПОМЕСТИТЬ втДатыПоверки
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			,
	|			ПричинаОтключения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПричиныОтключенияПриборовУчета.Поверка)
	|				И Счетчик В
	|					(ВЫБРАТЬ
	|						втВыбранныеСчетчики.Счетчик
	|					ИЗ
	|						втВыбранныеСчетчики КАК втВыбранныеСчетчики
	|					ГДЕ
	|						втВыбранныеСчетчики.Действует)
	|				И ДатаИзменения >= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВыбранныеСчетчики.ЛицевойСчет КАК ЛицевойСчет,
	|	втВыбранныеСчетчики.Услуга КАК Услуга,
	|	втВыбранныеСчетчики.Счетчик КАК Счетчик,
	|	втВыбранныеСчетчики.Услуга.Наименование КАК service,
	|	втВыбранныеСчетчики.Услуга.ВидУслуги.Наименование КАК SName,
	|	втВыбранныеСчетчики.Счетчик.Наименование КАК MName,
	|	втВыбранныеСчетчики.Счетчик.Код КАК kod,
	|	втВыбранныеСчетчики.Счетчик.ЗаводскойНомер КАК num,
	|	втВыбранныеСчетчики.Разрядность КАК capacity,
	|	втВыбранныеСчетчики.Действует КАК Действует,
	|	ЕСТЬNULL(втДатыПоверки.ДатаПоверки, НЕОПРЕДЕЛЕНО) КАК ДатаПоверки,
	|	ВЫБОР
	|		КОГДА втВыбранныеСчетчики.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Однотарифный)
	|			ТОГДА 1
	|		КОГДА втВыбранныеСчетчики.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК value_count,
	|	ЕСТЬNULL(втНачальныеПоказания.ДневноеПоказание, ЕСТЬNULL(втПредПоказания.ДневноеПоказание, 0)) КАК indicbef1,
	|	ЕСТЬNULL(втНачальныеПоказания.НочноеПоказание, ЕСТЬNULL(втПредПоказания.НочноеПоказание, 0)) КАК indicbef2,
	|	ЕСТЬNULL(втНачальныеПоказания.ПиковоеПоказание, ЕСТЬNULL(втПредПоказания.ПиковоеПоказание, 0)) КАК indicbef3,
	|	ЕСТЬNULL(втТекущиеПоказания.ДневноеПоказание, ЕСТЬNULL(втНачальныеПоказания.ДневноеПоказание, ЕСТЬNULL(втПредПоказания.ДневноеПоказание, 0))) КАК indiccur1,
	|	ЕСТЬNULL(втТекущиеПоказания.НочноеПоказание, ЕСТЬNULL(втНачальныеПоказания.НочноеПоказание, ЕСТЬNULL(втПредПоказания.НочноеПоказание, 0))) КАК indiccur2,
	|	ЕСТЬNULL(втТекущиеПоказания.ПиковоеПоказание, ЕСТЬNULL(втНачальныеПоказания.ПиковоеПоказание, ЕСТЬNULL(втПредПоказания.ПиковоеПоказание, 0))) КАК indiccur3,
	|	ЕСТЬNULL(втНачальныеПоказания.Период, втПредПоказания.Период) КАК date_indicbef,
	|	ЕСТЬNULL(втТекущиеПоказания.Период, ЕСТЬNULL(втНачальныеПоказания.Период, втПредПоказания.Период)) КАК date_indiccur,
	|	ЕСТЬNULL(втТекущиеПоказания.НачальноеПоказание, ЕСТЬNULL(втПредПоказания.НачальноеПоказание, ЛОЖЬ)) КАК НачальноеПоказание
	|ИЗ
	|	втВыбранныеСчетчики КАК втВыбранныеСчетчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПредПоказания КАК втПредПоказания
	|		ПО втВыбранныеСчетчики.ЛицевойСчет = втПредПоказания.ЛицевойСчет
	|			И втВыбранныеСчетчики.Услуга = втПредПоказания.Услуга
	|			И втВыбранныеСчетчики.Счетчик = втПредПоказания.Счетчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТекущиеПоказания КАК втТекущиеПоказания
	|		ПО втВыбранныеСчетчики.ЛицевойСчет = втТекущиеПоказания.ЛицевойСчет
	|			И втВыбранныеСчетчики.Услуга = втТекущиеПоказания.Услуга
	|			И втВыбранныеСчетчики.Счетчик = втТекущиеПоказания.Счетчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачальныеПоказания КАК втНачальныеПоказания
	|		ПО втВыбранныеСчетчики.ЛицевойСчет = втНачальныеПоказания.ЛицевойСчет
	|			И втВыбранныеСчетчики.Услуга = втНачальныеПоказания.Услуга
	|			И втВыбранныеСчетчики.Счетчик = втНачальныеПоказания.Счетчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыПоверки КАК втДатыПоверки
	|		ПО втВыбранныеСчетчики.Счетчик = втДатыПоверки.Счетчик
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Услуга,
	|	Счетчик";
	
	Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(ДатаОбмена));
	Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(ДатаОбмена));
	Запрос.УстановитьПараметр("МассивЛС",    МассивЛС);
	Запрос.УстановитьПараметр("МассивУслуг", МассивУслуг);
	Запрос.УстановитьПараметр("МассивУслугВыгружатьПоказания", ТаблицаУслугВыгружатьПоказания.ВыгрузитьКолонку("Услуга"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСведенияОбИПУ()

// Формирует таблицу сведений о лицевых счетах.
// 
// Параметры:
//  МассивЛС - массив л/с.
//  ТаблицаНачислений - таблица значений с данными о начислениях.
//  ВыгружатьЛогины - булево, указывает, нужно ли выгружать логины л/с.
//  ДатаОбмена - Дата - дата совершения обмена.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица лицевых счетов.
//
// Примечание:
//  Данные текущей таблицы значений будут использоваться для формирования файл обмена.
//  Поэтому наличие и наименования колонок таблицы должно быть неизменно.
//  
//  Колонки:
//   ЛицевойСчет - ссылка на лицевой счет.
//   Здание - ссылка на здание.
//   Подъезд - ссылка на подъезд.
//   AddressCity - город, к которому относится лицевой счет.
//   AddressDistrict - район, к которому относится лицевой счет.
//   AddressFlat - номер помещения лицевого счета.
//   FlatAbbr - представление помещения лицевого счета (напр, "кв.1", "оф.2").
//   FlayType - тип помещения.
//   AddressHouse - номер здания лицевого счета.
//   AddressRegion - регион, к которому относится лицевой счет.
//   AddressSettlement - населенный пункт, к которому относится лицевой счет.
//   AddressStreet - улица лицевого счета.
//   commonarea - размер общей площади помещения лицевого счета.
//   debtbeg - начальное сальдо по лицевому счету.
//   debtend - конечное сальдо по лицевому счету.
//   debtprev - задолженность (положительное сальдо) лицевого счета на начало месяца.
//   prepayment - аванс (абсолютное значение отрицательного сальдо) лицевого счета на начало месяца.
//   sumtopay - итоговая сумма к оплате по лицевому счету.
//   lastPaymentDate - дата последней оплаты, поступившей от лицевого счета.
//   login - логин лицевого счета.
//   email - электронный адрес лицевого счета.
//   habarea - размер жилой площади помещения лицевого счета.
//   kod_ls - идентификатор лицевого счета.
//   name1 - ФИО ответственного собственника, нанимателя по лицевоум счету.
//   name_ls - наименование лицевого счета.
//   people - количество проживающих по лицевому счету.
//   num_of_reg - количество зарегистрированных по лицевому счету.
//   Корпус - корпус здания лицевого счета.
//
Функция ПолучитьСведенияОЛицевыхСчетах(МассивЛС, ТаблицаНачислений, СтруктураНастроек, ВыгружатьЛогины)
	
	ДатаОбмена                           = СтруктураНастроек.ПериодПросмотра;
	УказыватьКоличествоПрожИЗарегЧислами = СтруктураНастроек.УказыватьКоличествоПрожИЗарегЧислами;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаКон",           КонецМесяца(ДатаОбмена));
	Запрос.УстановитьПараметр("МассивЛС",          МассивЛС);
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("ВыгружатьЛогины",   ВыгружатьЛогины);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втКолПроживающихИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В (&МассивЛС)
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втКолЗарегистрированныхИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В (&МассивЛС)
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втКолЗарегистрированныхИзСведений.ЛицевойСчет, втКолПроживающихИзСведений.ЛицевойСчет) КАК ЛицевойСчет,
	|	СУММА(ЕСТЬNULL(втКолЗарегистрированныхИзСведений.КоличествоЗарегистрированных, 0)) КАК КоличествоЗарегистрированных,
	|	СУММА(ЕСТЬNULL(втКолПроживающихИзСведений.КоличествоПроживающих, 0)) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втКоличествоЖильцовИзСведений
	|ИЗ
	|	втКолПроживающихИзСведений КАК втКолПроживающихИзСведений
	|		ПОЛНОЕ СОЕДИНЕНИЕ втКолЗарегистрированныхИзСведений КАК втКолЗарегистрированныхИзСведений
	|		ПО втКолПроживающихИзСведений.ЛицевойСчет = втКолЗарегистрированныхИзСведений.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втКолЗарегистрированныхИзСведений.ЛицевойСчет, втКолПроживающихИзСведений.ЛицевойСчет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА &ВыгружатьЛогины
	|			ТОГДА КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.ЛогинДоступа
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Логин,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Наименование КАК НаименованиеЛС,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес КАК ПомещениеСсылка,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Код КАК НомерПомещения,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Наименование КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Подъезд КАК Подъезд,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.ВидПомещения.ТипПомещения КАК ТипПомещения
	|ПОМЕСТИТЬ втЛицевойСчетБазоваяПодготовка
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаКон, ЛицевойСчет В (&МассивЛС)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоЖильцовИзСведений КАК втКоличествоЖильцовИзСведений
	|		ПО КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет = втКоличествоЖильцовИзСведений.ЛицевойСчет
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоПроживающих
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&ДатаКон, ЛицевойСчет В (&МассивЛС)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛицевойСчетБазоваяПодготовка.ЛицевойСчет,
	|	втЛицевойСчетБазоваяПодготовка.Логин,
	|	втЛицевойСчетБазоваяПодготовка.ИдентификаторЛС,
	|	втЛицевойСчетБазоваяПодготовка.НаименованиеЛС,
	|	втЛицевойСчетБазоваяПодготовка.НомерПомещения,
	|	втЛицевойСчетБазоваяПодготовка.Помещение,
	|	втЛицевойСчетБазоваяПодготовка.ПомещениеСсылка,
	|	втЛицевойСчетБазоваяПодготовка.Здание,
	|	втЛицевойСчетБазоваяПодготовка.Подъезд,
	|	втЛицевойСчетБазоваяПодготовка.АдресЭлектроннойПочты,
	|	втЛицевойСчетБазоваяПодготовка.ТипПомещения,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоПроживающих, 0)
	|		ИНАЧЕ ЕСТЬNULL(втКоличествоЖильцовИзСведений.КоличествоПроживающих, 0)
	|	КОНЕЦ КАК КоличествоПроживающих,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втКоличествоЖильцовИзСведений.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втЛицевойСчетБазовая
	|ИЗ
	|	втЛицевойСчетБазоваяПодготовка КАК втЛицевойСчетБазоваяПодготовка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втЛицевойСчетБазоваяПодготовка.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоЖильцовИзСведений КАК втКоличествоЖильцовИзСведений
	|		ПО втЛицевойСчетБазоваяПодготовка.ЛицевойСчет = втКоличествоЖильцовИзСведений.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
	|	СУММА(1) КАК КоличествоЛьготников
	|ПОМЕСТИТЬ втЛьготники
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&ДатаКон,
	|			Проживающий.Владелец В (&МассивЛС)
	|				И ДатаИзменения <= &ДатаКон) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец";
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", УказыватьКоличествоПрожИЗарегЧислами);
	
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	втЛицевойСчетБазовая.Здание КАК Объект
	|ИЗ
	|	втЛицевойСчетБазовая КАК втЛицевойСчетБазовая
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевойСчетБазовая.Здание";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛицевойСчетБазовая.Здание КАК Здание,
	|	втКонтактнаяИнформация.Город,
	|	втКонтактнаяИнформация.Район,
	|	втКонтактнаяИнформация.Регион,
	|	втКонтактнаяИнформация.НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|ПОМЕСТИТЬ втАдрес
	|ИЗ
	|	втЛицевойСчетБазовая КАК втЛицевойСчетБазовая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втЛицевойСчетБазовая.Здание = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛицевойСчетБазовая.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование КАК Ответственный,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец) = ТИП(Справочник.УПЖКХ_Жильцы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВладелецЖилец
	|ПОМЕСТИТЬ втОтветственныйСобственник
	|ИЗ
	|	втЛицевойСчетБазовая КАК втЛицевойСчетБазовая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&ДатаКон, ЛицевойСчет В (&МассивЛС)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО втЛицевойСчетБазовая.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛицевойСчетБазовая.ЛицевойСчет,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади.Наименование = ""Общая площадь""
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади.Наименование = ""Жилая площадь""
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЖилаяПлощадь
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	втЛицевойСчетБазовая КАК втЛицевойСчетБазовая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&ДатаКон, ) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО втЛицевойСчетБазовая.ЛицевойСчет.Адрес = КВП_ПлощадьПомещенияСрезПоследних.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевойСчетБазовая.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаНачислений.ЛицевойСчет,
	|	ТаблицаНачислений.Услуга,
	|	ТаблицаНачислений.ДатаПоследнейОплаты,
	|	ТаблицаНачислений.sum,
	|	ТаблицаНачислений.peni,
	|	ТаблицаНачислений.SumToPay,
	|	ТаблицаНачислений.debtbeg КАК НачальноеСальдо,
	|	ТаблицаНачислений.debtend КАК КонечноеСальдо,
	|	ТаблицаНачислений.sumpayed КАК СуммаОплат,
	|	ТаблицаНачислений.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной
	|ПОМЕСТИТЬ втНачисленияИзТаблицы
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втНачисленияИзТаблицы.ЛицевойСчет,
	|	втНачисленияИзТаблицы.Услуга
	|ПОМЕСТИТЬ втСоставныеУслуги
	|ИЗ
	|	втНачисленияИзТаблицы КАК втНачисленияИзТаблицы
	|ГДЕ
	|	втНачисленияИзТаблицы.УслугаЯвляетсяСоставной
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоставныеУслуги.ЛицевойСчет,
	|	СУММА(втНачисленияИзТаблицы.СуммаОплат) КАК СуммаОплат,
	|	СУММА(ВЫБОР
	|			КОГДА втНачисленияИзТаблицы.УслугаЯвляетсяСоставной
	|				ТОГДА втНачисленияИзТаблицы.НачальноеСальдо
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачальноеСальдо
	|ПОМЕСТИТЬ втОплатыПоСоставнымУслугам
	|ИЗ
	|	втСоставныеУслуги КАК втСоставныеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияИзТаблицы КАК втНачисленияИзТаблицы
	|		ПО втСоставныеУслуги.ЛицевойСчет = втНачисленияИзТаблицы.ЛицевойСчет
	|			И втСоставныеУслуги.Услуга = втНачисленияИзТаблицы.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втСоставныеУслуги.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ЛицевойСчет,
	|	МАКСИМУМ(Начисления.ДатаПоследнейОплаты) КАК ДатаПоследнейОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА втСоставныеУслуги.Услуга ЕСТЬ NULL
	|				ТОГДА Начисления.НачальноеСальдо
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачальноеСальдо,
	|	СУММА(Начисления.КонечноеСальдо) КАК КонечноеСальдо,
	|	СУММА(Начисления.sum) КАК Начислено,
	|	СУММА(Начисления.peni) КАК СуммаПеней,
	|	СУММА(Начисления.SumToPay) КАК СуммаКОплате
	|ПОМЕСТИТЬ втНачисленияНаЛС
	|ИЗ
	|	втНачисленияИзТаблицы КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСоставныеУслуги КАК втСоставныеУслуги
	|		ПО Начисления.ЛицевойСчет = втСоставныеУслуги.ЛицевойСчет
	|			И Начисления.Услуга = втСоставныеУслуги.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЛицевойСчетБазовая.ЛицевойСчет,
	|	втЛицевойСчетБазовая.Здание,
	|	втЛицевойСчетБазовая.Подъезд,
	|	втЛицевойСчетБазовая.ПомещениеСсылка КАК Помещение,
	|	втАдрес.Город КАК AddressCity,
	|	втАдрес.Район КАК AddressDistrict,
	|	втЛицевойСчетБазовая.НомерПомещения КАК AddressFlat,
	|	втЛицевойСчетБазовая.Помещение КАК FlatAbbr,
	|	втЛицевойСчетБазовая.ТипПомещения КАК FlatType,
	|	втАдрес.Дом КАК AddressHouse,
	|	втАдрес.Регион КАК AddressRegion,
	|	втАдрес.НаселенныйПункт КАК AddressSettlement,
	|	втАдрес.Улица КАК AddressStreet,
	|	ЕСТЬNULL(втПлощадиПомещений.ОбщаяПлощадь, 0) КАК commonarea,
	|	ЕСТЬNULL(втНачисленияНаЛС.НачальноеСальдо, 0) + ЕСТЬNULL(втОплатыПоСоставнымУслугам.НачальноеСальдо, 0) КАК debtbeg,
	|	ЕСТЬNULL(втНачисленияНаЛС.КонечноеСальдо, 0) - ЕСТЬNULL(втОплатыПоСоставнымУслугам.НачальноеСальдо, 0) КАК debtend,
	|	ВЫБОР
	|		КОГДА втНачисленияНаЛС.НачальноеСальдо + ЕСТЬNULL(втОплатыПоСоставнымУслугам.НачальноеСальдо, 0) > 0
	|			ТОГДА втНачисленияНаЛС.НачальноеСальдо + ЕСТЬNULL(втОплатыПоСоставнымУслугам.НачальноеСальдо, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК debtprev,
	|	ВЫБОР
	|		КОГДА втНачисленияНаЛС.НачальноеСальдо + ЕСТЬNULL(втОплатыПоСоставнымУслугам.НачальноеСальдо, 0) < 0
	|			ТОГДА -(втНачисленияНаЛС.НачальноеСальдо + ЕСТЬNULL(втОплатыПоСоставнымУслугам.НачальноеСальдо, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК prepayment,
	|	ЕСТЬNULL(втНачисленияНаЛС.Начислено, 0) КАК Начислено,
	|	ЕСТЬNULL(втНачисленияНаЛС.СуммаПеней, 0) КАК СуммаПеней,
	|	ЕСТЬNULL(втНачисленияНаЛС.СуммаКОплате, 0) - ЕСТЬNULL(втОплатыПоСоставнымУслугам.НачальноеСальдо, 0) КАК sumtopay,
	|	втНачисленияНаЛС.ДатаПоследнейОплаты КАК lastPaymentDate,
	|	втЛицевойСчетБазовая.АдресЭлектроннойПочты КАК email,
	|	ЕСТЬNULL(втПлощадиПомещений.ЖилаяПлощадь, 0) КАК habarea,
	|	втЛицевойСчетБазовая.ИдентификаторЛС КАК kod_ls,
	|	ВЫРАЗИТЬ(втЛицевойСчетБазовая.Логин КАК СТРОКА(100)) КАК login,
	|	втОтветственныйСобственник.Ответственный КАК name1,
	|	втОтветственныйСобственник.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	втЛицевойСчетБазовая.НаименованиеЛС КАК name_ls,
	|	втЛицевойСчетБазовая.КоличествоПроживающих КАК people,
	|	втЛицевойСчетБазовая.КоличествоЗарегистрированных КАК num_of_reg,
	|	втАдрес.Корпус,
	|	ЕСТЬNULL(втЛьготники.КоличествоЛьготников, 0) КАК num_of_comp,
	|	втОтветственныйСобственник.ВладелецЖилец КАК ВладелецЖилец
	|ИЗ
	|	втЛицевойСчетБазовая КАК втЛицевойСчетБазовая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдрес КАК втАдрес
	|		ПО втЛицевойСчетБазовая.Здание = втАдрес.Здание
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОтветственныйСобственник КАК втОтветственныйСобственник
	|		ПО втЛицевойСчетБазовая.ЛицевойСчет = втОтветственныйСобственник.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
	|		ПО втЛицевойСчетБазовая.ЛицевойСчет = втПлощадиПомещений.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияНаЛС КАК втНачисленияНаЛС
	|		ПО втЛицевойСчетБазовая.ЛицевойСчет = втНачисленияНаЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛьготники КАК втЛьготники
	|		ПО втЛицевойСчетБазовая.ЛицевойСчет = втЛьготники.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОплатыПоСоставнымУслугам КАК втОплатыПоСоставнымУслугам
	|		ПО втЛицевойСчетБазовая.ЛицевойСчет = втОплатыПоСоставнымУслугам.ЛицевойСчет";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Колонки.Добавить("HouseArea",    Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("FlatsArea",    Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ComFlatsArea", Новый ОписаниеТипов("Число"));
	
	ЗаполнитьСведенияОЗданиях(Таблица);
	
	Возврат Таблица;
	
КонецФункции // ПолучитьСведенияОЛицевыхСчетах()

// Заполняет сведения о зданиях в таблице с данными по л/с.
//
// Параметры:
//  Таблица - ТаблицаЗначений - таблица с данными по л/с.
//
Процедура ЗаполнитьСведенияОЗданиях(Таблица)
	
	ТаблицаЗданий = Таблица.Скопировать();
	ТаблицаЗданий.Свернуть("Здание");
	
	Для Каждого Строка Из ТаблицаЗданий Цикл
		СтрокиЗдания = Таблица.НайтиСтроки(Новый Структура("Здание", Строка.Здание));
		
		Для Каждого СтрокаЗдания Из СтрокиЗдания Цикл
			СтрокаЗдания.ComFlatsArea = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Строка.Здание, "ПлощадьЗданияМестОбщегоПользования");
			СтрокаЗдания.FlatsArea    = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Строка.Здание, "ПлощадьЗданияЖилыхНежилыхПомещений");
			СтрокаЗдания.HouseArea    = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Строка.Здание, "ПлощадьЗданияОбщая");
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСведенияОЗданиях()

// Формирует таблицу сведений о суммарных начислениях в разрезе поставщиков услуг.
// 
// Параметры:
//  ТаблицаНачислений - таблица значений с данными о начислениях.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица суммарных начислений по поставщикам.
//
Функция ПолучитьСуммыНачисленийПоПоставщикамУслуг(ТаблицаНачислений)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаНачислений.ЯвляетсяУО,
	|	ТаблицаНачислений.ЛицевойСчет,
	|	ТаблицаНачислений.CONId,
	|	ТаблицаНачислений.summ КАК summ,
	|	ТаблицаНачислений.debtbeg,
	|	ТаблицаНачислений.peni,
	|	ТаблицаНачислений.sumpayed,
	|	ТаблицаНачислений.sum,
	|	ТаблицаНачислений.SumToPay,
	|	ТаблицаНачислений.СуммаНачисленийДляВыводаВКвитанции
	|ПОМЕСТИТЬ втТаблицаНачислений
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|ГДЕ
	|	НЕ ТаблицаНачислений.СуммаНачисленийДляВыводаВКвитанции = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаУслугПоставщиков.ЛицевойСчет,
	|	ТаблицаУслугПоставщиков.CONId,
	|	ТаблицаУслугПоставщиков.ЯвляетсяУО,
	|	ТаблицаУслугПоставщиков.ВидыУслуг
	|ПОМЕСТИТЬ втТаблицаУслугПоставщиков
	|ИЗ
	|	&ТаблицаУслугПоставщиков КАК ТаблицаУслугПоставщиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТаблицаНачислений.ЯвляетсяУО,
	|	втТаблицаНачислений.ЛицевойСчет,
	|	втТаблицаНачислений.CONId,
	|	втТаблицаНачислений.summ
	|ПОМЕСТИТЬ втСуммыПолные
	|ИЗ
	|	втТаблицаНачислений КАК втТаблицаНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСуммыПолные.ЯвляетсяУО,
	|	втСуммыПолные.ЛицевойСчет,
	|	втСуммыПолные.CONId,
	|	СУММА(втСуммыПолные.summ) КАК summ
	|ПОМЕСТИТЬ втСуммыПолныеПоПоставщикам
	|ИЗ
	|	втСуммыПолные КАК втСуммыПолные
	|
	|СГРУППИРОВАТЬ ПО
	|	втСуммыПолные.ЯвляетсяУО,
	|	втСуммыПолные.ЛицевойСчет,
	|	втСуммыПолные.CONId
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаНачислений.ЛицевойСчет,
	|	втТаблицаНачислений.CONId,
	|	втТаблицаНачислений.ЯвляетсяУО,
	|	СУММА(ЕСТЬNULL(втТаблицаНачислений.debtbeg, 0)) КАК debtbeg,
	|	СУММА(ЕСТЬNULL(втТаблицаНачислений.peni, 0)) КАК peni,
	|	СУММА(ЕСТЬNULL(втТаблицаНачислений.sumpayed, 0)) КАК sumpayed,
	|	СУММА(ЕСТЬNULL(втТаблицаНачислений.sum, 0)) КАК sum,
	|	СУММА(ЕСТЬNULL(втТаблицаНачислений.SumToPay, 0)) КАК sumtopay
	|ПОМЕСТИТЬ втНачисленияСДетализацией
	|ИЗ
	|	втТаблицаНачислений КАК втТаблицаНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаНачислений.ЛицевойСчет,
	|	втТаблицаНачислений.CONId,
	|	втТаблицаНачислений.ЯвляетсяУО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втСуммыПолныеПоПоставщикам.ЛицевойСчет, втНачисленияСДетализацией.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втСуммыПолныеПоПоставщикам.CONId, втНачисленияСДетализацией.CONId) КАК CONId,
	|	ЕСТЬNULL(втСуммыПолныеПоПоставщикам.ЯвляетсяУО, втНачисленияСДетализацией.ЯвляетсяУО) КАК ЯвляетсяУО,
	|	ЕСТЬNULL(втНачисленияСДетализацией.debtbeg, 0) КАК debtbeg,
	|	ЕСТЬNULL(втНачисленияСДетализацией.peni, 0) КАК peni,
	|	ЕСТЬNULL(втНачисленияСДетализацией.sumpayed, 0) КАК sumpayed,
	|	ЕСТЬNULL(втСуммыПолныеПоПоставщикам.summ, 0) КАК summ,
	|	ЕСТЬNULL(втНачисленияСДетализацией.sum, 0) КАК sum,
	|	ЕСТЬNULL(втНачисленияСДетализацией.sumtopay, 0) КАК sumtopay
	|ПОМЕСТИТЬ втСуммыПоПоставщикамОбщая
	|ИЗ
	|	втСуммыПолныеПоПоставщикам КАК втСуммыПолныеПоПоставщикам
	|		ПОЛНОЕ СОЕДИНЕНИЕ втНачисленияСДетализацией КАК втНачисленияСДетализацией
	|		ПО втСуммыПолныеПоПоставщикам.ЛицевойСчет = втНачисленияСДетализацией.ЛицевойСчет
	|			И втСуммыПолныеПоПоставщикам.CONId = втНачисленияСДетализацией.CONId
	|			И втСуммыПолныеПоПоставщикам.ЯвляетсяУО = втНачисленияСДетализацией.ЯвляетсяУО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСуммыПоПоставщикамОбщая.ЛицевойСчет,
	|	втСуммыПоПоставщикамОбщая.CONId,
	|	втСуммыПоПоставщикамОбщая.ЯвляетсяУО,
	|	втСуммыПоПоставщикамОбщая.debtbeg,
	|	втСуммыПоПоставщикамОбщая.peni,
	|	втСуммыПоПоставщикамОбщая.sumpayed,
	|	втСуммыПоПоставщикамОбщая.summ,
	|	втСуммыПоПоставщикамОбщая.sum,
	|	втСуммыПоПоставщикамОбщая.sumtopay,
	|	втТаблицаУслугПоставщиков.ВидыУслуг
	|ИЗ
	|	втСуммыПоПоставщикамОбщая КАК втСуммыПоПоставщикамОбщая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаУслугПоставщиков КАК втТаблицаУслугПоставщиков
	|		ПО втСуммыПоПоставщикамОбщая.ЛицевойСчет = втТаблицаУслугПоставщиков.ЛицевойСчет
	|			И втСуммыПоПоставщикамОбщая.CONId = втТаблицаУслугПоставщиков.CONId
	|			И втСуммыПоПоставщикамОбщая.ЯвляетсяУО = втТаблицаУслугПоставщиков.ЯвляетсяУО";
	
	Запрос.УстановитьПараметр("ТаблицаНачислений",       ТаблицаНачислений);
	Запрос.УстановитьПараметр("ТаблицаУслугПоставщиков", ПолучитьСпискиВидовУслугВРазрезеЛСиПоставщиков(ТаблицаНачислений));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСуммыНачисленийПоПоставщикамУслуг()

// Формируем списки услуг поставщиков, по которым были начисления по лицевым счетам.
//
Функция ПолучитьСпискиВидовУслугВРазрезеЛСиПоставщиков(ТаблицаНачисленийОбщая)
	
	СтруктураОтбора = Новый Структура("ЛицевойСчет, CONId, ЯвляетсяУО");
	
	ТаблицаОтбора = ТаблицаНачисленийОбщая.Скопировать(, "ЛицевойСчет, CONId, ЯвляетсяУО");
	ТаблицаОтбора.Свернуть("ЛицевойСчет, CONId, ЯвляетсяУО");
	ТаблицаОтбора.Колонки.Добавить("ВидыУслуг", Новый ОписаниеТипов("Строка"));
	
	Для каждого ТекОтбор из ТаблицаОтбора Цикл
		// Отбираем строки из Таблицы услуг по поставщикам для составления списков услуг.
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекОтбор);
		ОтобранныеСтроки = ТаблицаНачисленийОбщая.НайтиСтроки(СтруктураОтбора);
		
		ЭтоПервый = Истина;
		Для каждого ТекВидУслуги из ОтобранныеСтроки Цикл
			Если НЕ ТекВидУслуги.СуммаНачисленийДляВыводаВКвитанции = 0 Тогда
				ТекОтбор.ВидыУслуг = ТекОтбор.ВидыУслуг + ?(ЭтоПервый, "", ", ") + ТекВидУслуги.VidName;
				
				ЭтоПервый = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаОтбора;
	
КонецФункции

// Формирует текст штрих-кода для вывода в квитанцию.
//
// Параметры
//  Объект       – текущий лицевой счет.
//  Организация - выбранная организация.
//  СуммаОплаты – сумма к оплате.
//
// Возвращаемое значение:
//  Строка – текст штрих-кода.
//
Функция ПолучитьШтрихКод(СведенияЛС, СведенияОбОрганизации, СтрокиИПУ)
	
	ДатаФормированияШтрихкода   = СведенияОбОрганизации.filedate;
	НастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(ДатаФормированияШтрихкода, СведенияОбОрганизации.Ссылка);
	
	// АНАЛОГ СТРУКТУРЫ НАСТРОЕК ИЗ ПЛАТЕЖНОГО ДОКУМЕНТА
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ПараметрыУП",                  НастройкиУчетнойПолитикиТСЖ);
	СтруктураНастроек.Вставить("ПериодПросмотра",              ДатаФормированияШтрихкода);
	СтруктураНастроек.Вставить("ПараметрыФормированияПД",      УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(СведенияОбОрганизации.Ссылка));
	СтруктураНастроек.Вставить("ПараметрыФормированияПДОтказ", Ложь);
	
	// АНАЛОГ СТРУКТУРЫ ОБЩИХ ДАННЫХ ИЗ ПЛАТЕЖНОГО ДОКУМЕНТА
	
	// Получение значений.
	АдресДома  = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(СведенияЛС.Здание);
	Адрес      = ПолучитьАдресПомещения(АдресДома, СведенияЛС.ЛицевойСчет.Адрес);
	СрокОплаты = КонецМесяца(ДатаФормированияШтрихкода) + НастройкиУчетнойПолитикиТСЖ.ЧислоВнесенияПлатежа * 24 * 60 * 60;
	
	// Заполнение структуры общих данных
	ОбщиеДанныеАналог = Новый Структура;
	ОбщиеДанныеАналог.Вставить("ЛицевойСчет",       СведенияЛС.ЛицевойСчет);
	ОбщиеДанныеАналог.Вставить("ФИО",               СведенияЛС.ОтветственныйВладелец);
	ОбщиеДанныеАналог.Вставить("ВладелецЖилец",     СведенияЛС.ВладелецЖилец);
	ОбщиеДанныеАналог.Вставить("Помещение",         СведенияЛС.Помещение);
	ОбщиеДанныеАналог.Вставить("Адрес",             Адрес);
	ОбщиеДанныеАналог.Вставить("Организация",       СведенияОбОрганизации.Ссылка);
	ОбщиеДанныеАналог.Вставить("КППОрганизации",    СведенияОбОрганизации.kpp);
	ОбщиеДанныеАналог.Вставить("ИННОрганизации",    СведенияОбОрганизации.inn);
	ОбщиеДанныеАналог.Вставить("Банк",              СведенияОбОрганизации.bank);
	ОбщиеДанныеАналог.Вставить("БИК",               СведенияОбОрганизации.bik);
	ОбщиеДанныеАналог.Вставить("РасчетныйСчет",     СведенияОбОрганизации.rs);
	ОбщиеДанныеАналог.Вставить("КоррСчет",          СведенияОбОрганизации.ks);
	ОбщиеДанныеАналог.Вставить("Задолженность",     СведенияЛС.debtbeg);
	ОбщиеДанныеАналог.Вставить("ИтогоНачислено",    СведенияЛС.Начислено);
	ОбщиеДанныеАналог.Вставить("ВсегоКОплатеДляШК", СведенияЛС.sumtopay);
	ОбщиеДанныеАналог.Вставить("КОплатеПени",       СведенияЛС.СуммаПеней);
	ОбщиеДанныеАналог.Вставить("КОплатеПениДляШК",  СведенияЛС.СуммаПеней);
	ОбщиеДанныеАналог.Вставить("КвитанцияНаКР",     Ложь);
	ОбщиеДанныеАналог.Вставить("СрокОплатыДата",    Формат(СрокОплаты, "ДФ = 'dd.MM.yyyy'"));
	ОбщиеДанныеАналог.Вставить("ИдентификаторЛС",   СведенияЛС.kod_ls);
	
	// Таблица ИПУ
	ОбщиеДанныеАналог.Вставить("ТаблицаИПУ", Новый ТаблицаЗначений);
	ОбщиеДанныеАналог.ТаблицаИПУ.Колонки.Добавить("Абонент");
	ОбщиеДанныеАналог.ТаблицаИПУ.Колонки.Добавить("ПредыдущееПоказаниеДн");
	ОбщиеДанныеАналог.ТаблицаИПУ.Колонки.Добавить("ПредыдущееПоказаниеНч");
	ОбщиеДанныеАналог.ТаблицаИПУ.Колонки.Добавить("ПредыдущееПоказаниеПк");
	
	// Заполнение таблицы ИПУ
	Для каждого ТекИПУ из СтрокиИПУ Цикл
		НоваяСтрока = ОбщиеДанныеАналог.ТаблицаИПУ.Добавить();
		НоваяСтрока.Абонент               = ТекИПУ.MName;
		НоваяСтрока.ПредыдущееПоказаниеДн = ТекИПУ.indiccur1;
		НоваяСтрока.ПредыдущееПоказаниеНч = ТекИПУ.indiccur2;
		НоваяСтрока.ПредыдущееПоказаниеПк = ТекИПУ.indiccur3;
	КонецЦикла;
	
	// Основные параметры штрихкода
	Параметры = Новый Структура();
	Параметры.Вставить("Дата",                    ДатаФормированияШтрихкода);
	Параметры.Вставить("ЛицевойСчет",             СведенияЛС.ЛицевойСчет);
	Параметры.Вставить("Сумма",                   СведенияЛС.sumtopay);
	Параметры.Вставить("НаименованиеОрганизации", СведенияОбОрганизации.name);
	Параметры.Вставить("РасчетныйСчет",           СведенияОбОрганизации.rs);
	Параметры.Вставить("НаименованиеБанка",       СведенияОбОрганизации.bank);
	Параметры.Вставить("БИК",                     СведенияОбОрганизации.bik);
	Параметры.Вставить("КоррСчет",                СведенияОбОрганизации.ks);
	
	// ФИО ответственного собственника л/с.
	Если СведенияЛС = Неопределено Тогда
		ОбщиеДанныеАналог.Вставить("ФИОСтрока",                      "");
		ОбщиеДанныеАналог.Вставить("ФамилияОтветственного",          "");
		ОбщиеДанныеАналог.Вставить("ИмяОтветственного",              "");
		ОбщиеДанныеАналог.Вставить("ОтчествоОтветственного",         "");
		ОбщиеДанныеАналог.Вставить("ОтветственныйКонтрагентФизЛицо", Ложь);
	Иначе
		ОбщиеДанныеАналог.Вставить("ФИОСтрока",                      Строка(СведенияЛС.ОтветственныйВладелец));
		ОбщиеДанныеАналог.Вставить("ОтветственныйКонтрагентФизЛицо", СведенияЛС.ВладелецЖилец ИЛИ СведенияЛС.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		
		Если ОбщиеДанныеАналог.ОтветственныйКонтрагентФизЛицо Тогда
			ФИОСтруктура = РазделитьФИО(СокрЛП(ОбщиеДанныеАналог.ФИО));
			ОбщиеДанныеАналог.Вставить("ФамилияОтветственного",  ФИОСтруктура.Фамилия);
			ОбщиеДанныеАналог.Вставить("ИмяОтветственного",      ФИОСтруктура.Имя);
			ОбщиеДанныеАналог.Вставить("ОтчествоОтветственного", ФИОСтруктура.Отчество);
		ИначеЕсли СведенияЛС.ВладелецЖилец Тогда
			ФизЛицо = СведенияЛС.ОтветственныйВладелец.ФизЛицо;
			ОбщиеДанныеАналог.Вставить("ФамилияОтветственного",  ФизЛицо.Фамилия);
			ОбщиеДанныеАналог.Вставить("ИмяОтветственного",      ФизЛицо.Имя);
			ОбщиеДанныеАналог.Вставить("ОтчествоОтветственного", ФизЛицо.Отчество);
		КонецЕсли;
	КонецЕсли;
	
	// Формирование штрихкода.
	СтруктураШтрихкода = Новый Структура("ВидШтрихкода, ТекстШтрихкода");
	
	Если СтруктураНастроек.ПараметрыФормированияПД.ВидШтрихкода = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.QR Тогда
		СтруктураШтрихкода.ВидШтрихкода   = "QR";
		СтруктураШтрихкода.ТекстШтрихкода = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтрокуQRШтрихкода(СведенияЛС.ЛицевойСчет, СтруктураНастроек, ОбщиеДанныеАналог);
	Иначе
		СтруктураШтрихкода.ВидШтрихкода   = "code128";
		СтруктураШтрихкода.ТекстШтрихкода = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТекстШК(СведенияЛС.ЛицевойСчет, СтруктураНастроек, ОбщиеДанныеАналог);
	КонецЕсли;
	
	Возврат СтруктураШтрихкода;
	
КонецФункции // ПолучитьШтрихКод()

// Формирует таблицу со сведениями по лицевым счетам.
//
// Параметры:
//  МассивЛС - Массив - массив с лицевыми счетами.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
// Примечание:
//  Данные текущей таблицы значений будут использоваться для формирования файл обмена.
//  Поэтому наличие и наименования колонок таблицы должно быть неизменно.
//  
//  Колонки:
//   ЛицевойСчет - ссылка на лицевой счет.
//   Владелец - ссылка на  ответственного собственника, нанимателя по лицевому счету.
//   Район - район, к которому относится лицевой счет.
//   Улица - улица лицевого счета.
//   Дом - номер здания лицевого счета.
//   Корпус - корпус здания лицевого счета.
//   Помещение - наименование помещения лицевого счета (напр., "кв.1", "оф.1").
//   Логин - логин доступа лицевого счета к аккаунту на сайте.
//   Пароль - пустая строка.
//   Карточка распечата - Ложь.
//
Функция ПолучитьДанныеПоЛС(МассивЛС) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивЛС", МассивЛС);
	Запрос.УстановитьПараметр("Дата",     ТекущаяДата());
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК Владелец,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет.ЛогинДоступа КАК Логин,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	"""" КАК Пароль,
	|	ЛОЖЬ КАК КарточкаРаспечатана
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, ЛицевойСчет В (&МассивЛС)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних";
	
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	втЛицевыеСчета.Здание КАК Объект
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевыеСчета.Здание";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Регион КАК Регион,
	|	втКонтактнаяИнформация.Район КАК Район,
	|	втКонтактнаяИнформация.Город КАК Город,
	|	втКонтактнаяИнформация.НаселенныйПункт КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Объект КАК Объект,
	|	втКонтактнаяИнформация.Улица КАК Улица,
	|	втКонтактнаяИнформация.Дом КАК Дом,
	|	втКонтактнаяИнформация.Корпус КАК Корпус
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчета.Владелец КАК Владелец,
	|	втЛицевыеСчета.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	ЕСТЬNULL(втАдреса.Регион, """") КАК Регион,
	|	ЕСТЬNULL(втАдреса.Район, """") КАК Район,
	|	ЕСТЬNULL(втАдреса.Город, """") КАК Город,
	|	ЕСТЬNULL(втАдреса.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втАдреса.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втАдреса.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдреса.Корпус, """") КАК Корпус,
	|	ПРЕДСТАВЛЕНИЕ(втЛицевыеСчета.Помещение) КАК Помещение,
	|	втЛицевыеСчета.Логин КАК Логин,
	|	втЛицевыеСчета.Пароль КАК Пароль,
	|	втЛицевыеСчета.КарточкаРаспечатана КАК КарточкаРаспечатана
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	|		ПО втЛицевыеСчета.Здание = втАдреса.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Строка ИЗ Таблица Цикл
		Строка.Адрес = ПолучитьПредставлениеАдреса(Строка);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьДанныеПоЛС()

// Ищет в БД лицевые счета, которые не имеют параметры доступа на сайт.
// (факты наличия параметров доступа фиксируются в РС "Сведения о наличии параметров доступа").
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
// Примечание:
//  Данные текущей таблицы будут загружены в табличну часть формы "Работа с лицевыми счетами".
//  Поэтому наличие и наименования колонок таблицы должно быть неизменно.
//
//  Колонки:
//   ЛицевойСчет - ссылка на лицевой счет.
//   Владелец - ссылка на  ответственного собственника, нанимателя по лицевому счету.
//   Район - район, к которому относится лицевой счет.
//   Улица - улица лицевого счета.
//   Дом - номер здания лицевого счета.
//   Корпус - корпус здания лицевого счета.
//   Помещение - наименование помещения лицевого счета (напр., "кв.1", "оф.1").
//   Логин - логин доступа лицевого счета к аккаунту на сайте.
//   Пароль - пустая строка.
//   Карточка распечата - Ложь.
//
Функция ПолучитьЛСНеИмеющиеПараметровДоступа(НастройкаДоступа, НомерВерсииОбмена = 3, МассивЛССпараметрами = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Организация", НастройкаДоступа.Организация);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Если НомерВерсииОбмена = 4 Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
		|ПОМЕСТИТЬ втЛицевыеСчетаДействующие
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ТекущаяДата, НЕ ЛицевойСчет В (&МассивЛССАккаунтами)) КАК КВП_ЛицевыеСчетаСрезПоследних
		|ГДЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.Действует
		|	И НЕ КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор = """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
		|			&ТекущаяДата,
		|			ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчетаДействующие.ЛицевойСчет
		|					ИЗ
		|						втЛицевыеСчетаДействующие КАК втЛицевыеСчетаДействующие)
		|				И Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
		|ГДЕ
		|	(УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.СрокДействия >= &ТекущаяДата)
		|	И НЕ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("МассивЛССАккаунтами", МассивЛССпараметрами);
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияОНаличииПараметровДоступа.ЛицевойСчет
		|ПОМЕСТИТЬ втЛССПараметрами
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОНаличииПараметровДоступа КАК УПЖКХ_СведенияОНаличииПараметровДоступа
		|ГДЕ
		|	УПЖКХ_СведенияОНаличииПараметровДоступа.НастройкаДоступа = &НастройкаДоступа
		|	И УПЖКХ_СведенияОНаличииПараметровДоступа.НаличиеПараметров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет
		|ПОМЕСТИТЬ втЛицевыеСчетаДействующие
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	НЕ КВП_ЛицевыеСчета.Ссылка В
		|				(ВЫБРАТЬ
		|					втЛССПараметрами.ЛицевойСчет
		|				ИЗ
		|					втЛССПараметрами КАК втЛССПараметрами)
		|	И НЕ КВП_ЛицевыеСчета.Идентификатор = """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
		|			&ТекущаяДата,
		|			ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчетаДействующие.ЛицевойСчет
		|					ИЗ
		|						втЛицевыеСчетаДействующие КАК втЛицевыеСчетаДействующие)
		|				И Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
		|ГДЕ
		|	(УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.СрокДействия >= &ТекущаяДата)
		|	И НЕ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("НастройкаДоступа", НастройкаДоступа);
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	втЛицевыеСчета.Здание КАК Объект
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевыеСчета.Здание";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Объект,
	|	втКонтактнаяИнформация.Регион КАК Регион,
	|	втКонтактнаяИнформация.Район КАК Район,
	|	втКонтактнаяИнформация.Город КАК Город,
	|	втКонтактнаяИнформация.НаселенныйПункт КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица КАК Улица,
	|	втКонтактнаяИнформация.Дом КАК Дом,
	|	втКонтактнаяИнформация.Корпус КАК Корпус
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет.Наименование КАК НаименованиеЛС,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет.Адрес.Наименование КАК Помещение,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет.ЛогинДоступа КАК Логин,
	|	"""" КАК Пароль,
	|	ЛОЖЬ КАК КарточкаРаспечатана,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК Владелец
	|ПОМЕСТИТЬ втСобственники
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&ТекущаяДата,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСобственники.ЛицевойСчет КАК ЛицевойСчет,
	|	втСобственники.ЛицевойСчет.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	втСобственники.НаименованиеЛС КАК НаименованиеЛС,
	|	втСобственники.Владелец КАК Владелец,
	|	ЕСТЬNULL(втАдреса.Регион, """") КАК Регион,
	|	ЕСТЬNULL(втАдреса.Район, """") КАК Район,
	|	ЕСТЬNULL(втАдреса.Город, """") КАК Город,
	|	ЕСТЬNULL(втАдреса.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втАдреса.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втАдреса.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдреса.Корпус, """") КАК Корпус,
	|	втСобственники.Помещение КАК Помещение,
	|	втСобственники.Логин КАК Логин,
	|	втСобственники.Пароль КАК Пароль,
	|	втСобственники.КарточкаРаспечатана КАК КарточкаРаспечатана
	|ИЗ
	|	втСобственники КАК втСобственники
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	|		ПО втСобственники.Здание = втАдреса.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеЛС";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Строка ИЗ Таблица Цикл
		Строка.Адрес = ПолучитьПредставлениеАдреса(Строка);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьЛСНеИмеющиеПараметровДоступа()

// Определяет, когда была совершена последняя удачная загрузка реестра платежей.
//
// Параметры:
//  НастройкаДоступа - СправочникСсылка.УПЖКХ_НастройкиДоступаКСайту - настройка доступа.
//
// Вовзращаемое значение:
//  Дата.
//
Функция ПолучитьДатуПоследнейЗагрузкиРестраПлатежей(НастройкаДоступа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(УПЖКХ_ЖурналОбменаССайтом.Дата) КАК Дата
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЖурналОбменаССайтом КАК УПЖКХ_ЖурналОбменаССайтом
	|ГДЕ
	|	УПЖКХ_ЖурналОбменаССайтом.НастройкаДоступа = &НастройкаДоступа
	|	И УПЖКХ_ЖурналОбменаССайтом.ВидОбмена = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОбменаССайтом.ЗагрузкаРеестраПлатежей)
	|	И УПЖКХ_ЖурналОбменаССайтом.Статус";
	
	Запрос.УстановитьПараметр("НастройкаДоступа", НастройкаДоступа);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Дата) Тогда
		Возврат Выборка.Дата;
	КонецЕсли;
	
	Возврат Дата('00010101');
	
КонецФункции // ПолучитьДатуПоследнейЗагрузкиРестраПлатежей()

// Формирует дату в формате XML, если она не нулевая.
// В противном случае возвращает пустое значение.
//
Функция ПолучитьДатуДляXML(Дата) Экспорт
	
	Возврат ?(Дата = '00010101000000', "", XMLСтрока(Дата));
	
КонецФункции

// Формирует полный адрес здания для выгрузки на сайт.
//
Функция СформироватьПолныйАдресЗданияДляВыгрузки(Регион, Район, Город, НаселенныйПункт, Улица, НомерДома, КорпусДома) Экспорт
	
	Возврат ?(Регион = "", "", Регион + ", ")
			+ ?(Район = "", "", Район + ", ")
			+ ?(Город = "", "", Город + ", ")
			+ ?(НаселенныйПункт = "", "", НаселенныйПункт + ", ")
			+ ?(Улица = "", "", Улица + ", ")
			+ ?(НомерДома = "", "", НомерДома)
			+ ?(КорпусДома = "", "", "/" + КорпусДома);
	
КонецФункции // СформироватьПолныйАдресЗданияДляВыгрузки()

#КонецОбласти

#Область ЗагрузкаДанныхИзXML

// Загружает данные из XML-файла в структуру.
//
// Параметры
//  ИмяФайлаXML – наименование загружаемого файла.
//  НастройкиОбмена - ссылка на элемент справочника "Настройки обмена данными с сайтом".
//  СведенияОбОшибке - Строка - описание проблем при обмене.
//
// Возвращаемое значение:
//  Структура – структура, содержащая загруженные из файла данные.
//
//
// Детальное описание функции:
//
// При загрузке данных из XML файла формируется структура, содержащая выгружаемые из файла данные.
// В зависимости от варианта загрузки (значения атрибута "filetype" узла "ORG") могут быть
// сформированы структуры, содержащие следующие поля:
//
// 1) Для варианта "accexistence" (параметры доступа):
//
// filetype // "accexistence"
// inn      // ИНН организации.
// \PersAcc       // Таблица значений. Хранит соответствие л/с и логинов.
//     kod_ls     // Код л/с (Идентификатор).
//     login      // Новый логин л/с.
//     email      // Электронный ящик л/с. Необязательный атрибут.
//
// 2) Для варианта "meters" (реестр показаний ИПУ):
//
// filetype // "meters"
// name     // Наименование организации.
// inn      // ИНН организации.
// filedate // Дата формирования файла.
// \meters       // Таблица значений. Хранит показания ИПУ в разрезе л/с.
//     kod_ls    // Код л/с (Идентификатор).
//     indicbef1 // Предыдущее дневное показание.
//     indicbef2 // Предыдущее ночное показание.
//     indiccur1 // Текущее дневное показание.
//     indiccur2 // Текущее ночное показание.
//     kod       // Код ПУ.
//     name      // Наименование ПУ.
//     date      // Дата текущих показаний.
//
// 3) Для варианта "payments" (реестр платежей):
//
// filetype // "payments"
// inn      // ИНН организации.
// filedate // Дата формирования файла.
// \payments     // Таблица значений. Хранит оплаты в разрезе л/с.
//     kod_ls    // Код л/с (Идентификатор).
//     date      // Дата оплаты.
//     summ      // Сумма оплаты.
//     fee       // Комиссия банка.
//
Функция ПолучитьДанныеИзXML(ИмяФайлаXML, НастройкаДоступа, СведенияОбОшибке, СтруктураИнформацииОСайте) Экспорт
	
	Попытка
		// Открытие и считывание данных из файла.
		Файл = Новый ЧтениеXML;
		Файл.ОткрытьФайл(ИмяФайлаXML);
		
		Построитель = Новый ПостроительDOM;
		ДокDOM = Построитель.Прочитать(Файл);
		
		Файл.Закрыть();
	Исключение
		// Ошибка при открытии.
		СведенияОбОшибке = ОписаниеОшибки();
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СведенияОбОшибке);
		
		Возврат Неопределено;
	КонецПопытки;
	
	// Определяем версию обмена и расшифровываем соответственно.
	
	Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 3 Тогда
		Возврат ПолучитьДанныеИзXML3(ДокDOM, НастройкаДоступа.Организация, СведенияОбОшибке);
	ИначеЕсли СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 Тогда
		Возврат ПолучитьДанныеИзXML4(ДокDOM, НастройкаДоступа.Организация, СведенияОбОшибке);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьДанныеИзXML()

// Возвращает данные, полученные с сайта, для их загрузки в базу.
//
Функция ПолучитьДанныеДляЗагрузкиВБазуИзXML(ИмяФайлаXML, НастройкаДоступа, СведенияОбОшибке, СтруктураИнформацииОСайте, ТипЗагрузки = "") Экспорт
	
	Если ТипЗагрузки = "meters" Тогда
		
		// При загрузке счетчиков делим исходный файл на пачки лицевых счетов и
		// генерируем отдельный файлы для каждой пачки.
		
		// 1. Подготавливаем итоговый массив данных, в котором будут храниться данные
		// каждой пачки.
		МассивНаборовДанных = Новый Массив;
		КоличествоЛСВПачке  = 1000;
		
		// 2. Читаем исходный файл. Файлы для каждой пачки состоят из 3-х элементов:
		//		- Шапка, содержащая корневой тег исходного файла. Одинаковая для всех временных файлов.
		//		- Данные счетчикам лицевых счетов. Эти данные будут свои у каждой пачки.
		//		- Подвал, содержащий закрывающий корневой тег.
		ЧтениеИсходногоТекста = Новый ЧтениеТекста(ИмяФайлаXML);
		ИсходныйТекст = ЧтениеИсходногоТекста.Прочитать();
		
		// Готовим шапку. Шапкой считаем часть исходного файла до первых тегов лицевых счетов.
		ШапкаДокумента      = "";
		НомерОкончанияШапки = СтрНайти(ИсходныйТекст, "<acc",,, 1);
		
		// Если тегов лицевых счетов не обнаружено, считаем исходный файл пустым и обрабатываем обычным образом.
		Если НомерОкончанияШапки = 0 Тогда
			Возврат ПолучитьДанныеИзXML(ИмяФайлаXML, НастройкаДоступа, СведенияОбОшибке, СтруктураИнформацииОСайте);
		КонецЕсли;
		
		ШапкаДокумента = Лев(ИсходныйТекст, НомерОкончанияШапки - 1);
		
		// Готови подвал.
		ПодвалДокумента = "</org>";
		
		// Формировать файлы каждой пачки будет с помощью функции "СтрСоединить", поэтому создаем массив,
		// состоящий из шапки, данных л/с и подвала.
		МассивЭлементовТекущегоДокумента = Новый Массив;
		МассивЭлементовТекущегоДокумента.Добавить(ШапкаДокумента);
		МассивЭлементовТекущегоДокумента.Добавить("");
		МассивЭлементовТекущегоДокумента.Добавить(ПодвалДокумента);
		
		// 3. Начинаем обход каждой пачки л/с. Данные каждой пачки будем сохранять в один и тот же временный файл.
		ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("xml");
		
		// Включим запись текста в ANSI, чтобы в файл обмена не добавлялся BOM.
		ЗаписьДляКодировки = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.ANSI);
		ЗаписьДляКодировки.Закрыть();
		
		ТекСмещение         = НомерОкончанияШапки;
		ПродолжатьОбработку = Истина;
		
		Пока ПродолжатьОбработку Цикл
			
			// Ищем, где текущая пачки л/с начинается. Поиск начинаем от смещения - номера символа,
			// на котором остановилась при прошлой итерации.
			НомерНачалаПачки = СтрНайти(ИсходныйТекст, "<acc",, ТекСмещение, 1);
			
			// Если пачку начинать не с чего, значит предыдущая итерация была последней и обработку можно завершать.
			Если НомерНачалаПачки = 0 Тогда
				ПродолжатьОбработку = Ложь;
			Иначе
				
				// Ищем последний закрывающий тег пачки. В данном случае тысячный.
				НомерОкончанияПачки = СтрНайти(ИсходныйТекст, "</acc>",, НомерНачалаПачки, КоличествоЛСВПачке);
				
				// Если л/с в файле осталось меньше, чем максимальное количество л/с в пачке,
				// ищем последний закрывающий тег л/с.
				Если НомерОкончанияПачки = 0 Тогда
					НомерОкончанияПачки = СтрНайти(ИсходныйТекст, "</acc>", НаправлениеПоиска.СКонца,, 1);
				КонецЕсли;
				
				// Заменяем данные л/с в массиве, из которого будем формировать файл текущей пачки.
				МассивЭлементовТекущегоДокумента[1] = Сред(ИсходныйТекст, НомерНачалаПачки, НомерОкончанияПачки - НомерНачалаПачки + 6);
				
				// Сохраняем получившиеся данные во временный файл.
				ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла,,, Ложь);
				ЗаписьТекста.Записать(СтрСоединить(МассивЭлементовТекущегоДокумента));
				ЗаписьТекста.Закрыть();
				
				// Допоняем итоговый массив данных данными текущей пачки.
				МассивНаборовДанных.Добавить(ПолучитьДанныеИзXML(ИмяВременногоФайла, НастройкаДоступа, СведенияОбОшибке, СтруктураИнформацииОСайте));
				
				// Если произошла ошибка - прекращаем обработку.
				Если Не ПустаяСтрока(СведенияОбОшибке) Тогда
					ПродолжатьОбработку = Ложь;
				КонецЕсли;
				
				// Актуализируем смещение для следующей итерации.
				ТекСмещение = НомерОкончанияПачки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат МассивНаборовДанных;
		
	Иначе
		Возврат ПолучитьДанныеИзXML(ИмяФайлаXML, НастройкаДоступа, СведенияОбОшибке, СтруктураИнформацииОСайте);
	КонецЕсли;
	
КонецФункции

// Получение данных из XML версия 3.
//
Функция ПолучитьДанныеИзXML3(ДокDOM, Организация, СведенияОбОшибке)
	
	// Структура для выгрузки
	СтруктураДанных = Новый Структура;
	
	Попытка
		
		// Префикс, добавляемый к л/с.
		ПрефиксЛС     = ПолучитьПрефикс(Организация);
		ДлинаПрефикса = СтрДлина(ПрефиксЛС);
		ИспользуетсяПрефиксСтарыйМеханизм = ПроверитьНеобходимостьПрефикса();
		
		// Корневой узел (org, requests)
		УзелКорневой = ДокDOM.ПервыйДочерний;
		
		Если УзелКорневой.ЕстьАтрибут("version") Тогда
			ВерсияСайт = УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("version").Значение;
		Иначе
			СообщенияОбОшибке = "Версия механизма обмена на сайте устарела. Необходимо обновиться.";
			Возврат Неопределено;
		КонецЕсли;
		
		ВерсияПП = "3";
		
		Если НЕ ВерсияСайт = ВерсияПП Тогда
			СообщенияОбОшибке = "Версия механизма обмена, используемого в учетной программе, не совпадает с версией, используемой на сайте.";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СообщенияОбОшибке);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		// Тип файла
		ТипФайла = НРег(УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("filetype").Значение);
		
		// Формирование структуры данных
		Если ТипФайла = "meters" Тогда
			
			СтруктураДанных.Вставить("name",     УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("name").Значение);
			СтруктураДанных.Вставить("inn",      УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("inn").Значение);
			СтруктураДанных.Вставить("filedate", УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("filedate").Значение);
			СтруктураДанных.Вставить("filetype", ТипФайла);
			
			// Таблица л/с
			СтруктураДанных.Вставить("meters", Новый ТаблицаЗначений);
			СтруктураДанных.meters.Колонки.Добавить("kod_ls",    Новый ОписаниеТипов("Строка"));
			СтруктураДанных.meters.Колонки.Добавить("indicbef1", Новый ОписаниеТипов("Число"));
			СтруктураДанных.meters.Колонки.Добавить("indicbef2", Новый ОписаниеТипов("Число"));
			СтруктураДанных.meters.Колонки.Добавить("indiccur1", Новый ОписаниеТипов("Число"));
			СтруктураДанных.meters.Колонки.Добавить("indiccur2", Новый ОписаниеТипов("Число"));
			СтруктураДанных.meters.Колонки.Добавить("kod",       Новый ОписаниеТипов("Строка"));
			СтруктураДанных.meters.Колонки.Добавить("name",      Новый ОписаниеТипов("Строка"));
			СтруктураДанных.meters.Колонки.Добавить("date",      Новый ОписаниеТипов("Дата"));
			
			// Дочерними являются только узлы "PersAssoc", проходим по ним всем в цикле.
			Для Каждого ТекУзел ИЗ УзелКорневой.ДочерниеУзлы Цикл
				
				Если УзелЯвляетсяТегом(ТекУзел) Тогда
					
					// Формируем код л/с.
					КодЛСАтрибут = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("kod_ls");
					Если КодЛСАтрибут = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					КодЛС = КодЛСАтрибут.Значение;
					
					// Проверка использования старого механизма
					Если Найти(КодЛС, " ") = 0 Тогда
						// Старый механизм
						Если ИспользуетсяПрефиксСтарыйМеханизм Тогда
							КодЛС = Прав(КодЛС, СтрДлина(КодЛС) - ДлинаПрефикса);
						КонецЕсли;
					Иначе
						// Новый механизм
						КодЛС = Прав(КодЛС, СтрДлина(КодЛС) - ДлинаПрефикса - 1);
					КонецЕсли;
					
					// Заполняем ПУ л/с
					Для Каждого ТекПУ ИЗ ТекУзел.ДочерниеУзлы Цикл
						
						Если УзелЯвляетсяТегом(ТекПУ) Тогда
							
							СтрокаПУ = СтруктураДанных.meters.Добавить();
							
							// л/с
							СтрокаПУ.kod_ls = КодЛС;
							
							// ПУ
							СтрокаПУ.indicbef1 = ТекПУ.Атрибуты.ПолучитьИменованныйЭлемент("indicbef1").Значение;
							СтрокаПУ.indicbef2 = ТекПУ.Атрибуты.ПолучитьИменованныйЭлемент("indicbef2").Значение;
							СтрокаПУ.indiccur1 = ТекПУ.Атрибуты.ПолучитьИменованныйЭлемент("indiccur1").Значение;
							СтрокаПУ.indiccur2 = ТекПУ.Атрибуты.ПолучитьИменованныйЭлемент("indiccur2").Значение;
							СтрокаПУ.kod       = ТекПУ.Атрибуты.ПолучитьИменованныйЭлемент("kod").Значение;
							СтрокаПУ.name      = ТекПУ.Атрибуты.ПолучитьИменованныйЭлемент("name").Значение;
							СтрокаПУ.date      = ТекПУ.Атрибуты.ПолучитьИменованныйЭлемент("date").Значение;
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипФайла = "accexistence" Тогда
			
			СтруктураДанных.Вставить("inn",      УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("inn").Значение);
			СтруктураДанных.Вставить("filetype", ТипФайла);
			
			// Таблица л/с
			СтруктураДанных.Вставить("PersAcc", Новый ТаблицаЗначений);
			СтруктураДанных.PersAcc.Колонки.Добавить("kod_ls", Новый ОписаниеТипов("Строка"));
			СтруктураДанных.PersAcc.Колонки.Добавить("login",  Новый ОписаниеТипов("Строка"));
			СтруктураДанных.PersAcc.Колонки.Добавить("email",  Новый ОписаниеТипов("Строка"));
			
			// Дочерними являются только узлы "PersAcc", проходим по ним всем в цикле.
			Для Каждого ТекУзел ИЗ УзелКорневой.ДочерниеУзлы Цикл
				
				Если УзелЯвляетсяТегом(ТекУзел) Тогда
					
					СтрокаЛС = СтруктураДанных.PersAcc.Добавить();
					
					// Формируем код л/с.
					КодЛС = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("kod_ls").Значение;
					
					// Проверка использования старого механизма
					Если Найти(КодЛС, " ") = 0 Тогда
						// Старый механизм
						Если ИспользуетсяПрефиксСтарыйМеханизм Тогда
							КодЛС = Прав(КодЛС, СтрДлина(КодЛС) - ДлинаПрефикса);
						КонецЕсли;
					Иначе
						// Новый механизм
						КодЛС = Прав(КодЛС, СтрДлина(КодЛС) - ДлинаПрефикса - 1);
					КонецЕсли;
					
					// Заполняем данные л/с
					СтрокаЛС.kod_ls = КодЛС;
					СтрокаЛС.login  = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("login").Значение;
					
					Если ТекУзел.ЕстьАтрибут("email") Тогда
						СтрокаЛС.email = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("email").Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипФайла = "payments" Тогда
			
			СтруктураДанных.Вставить("inn",      УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("inn").Значение);
			СтруктураДанных.Вставить("filedate", УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("filedate").Значение);
			СтруктураДанных.Вставить("filetype", ТипФайла);
			
			СтруктураДанных.Вставить("payments", Новый ТаблицаЗначений);
			СтруктураДанных.payments.Колонки.Добавить("kod_ls", Новый ОписаниеТипов("Строка"));
			СтруктураДанных.payments.Колонки.Добавить("date",   Новый ОписаниеТипов("Дата"));
			СтруктураДанных.payments.Колонки.Добавить("summ",   Новый ОписаниеТипов("Число"));
			СтруктураДанных.payments.Колонки.Добавить("fee",    Новый ОписаниеТипов("Число"));
			
			Для Каждого ТекУзел ИЗ УзелКорневой.ДочерниеУзлы Цикл
				
				Если УзелЯвляетсяТегом(ТекУзел) Тогда
					
					СтрокаОплаты = СтруктураДанных.payments.Добавить();
					
					КодЛС = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("kod_ls").Значение;
					
					// Проверка использования старого механизма
					Если Найти(КодЛС, " ") = 0 Тогда
						// Старый механизм
						Если ИспользуетсяПрефиксСтарыйМеханизм Тогда
							КодЛС = Прав(КодЛС, СтрДлина(КодЛС) - ДлинаПрефикса);
						КонецЕсли;
					Иначе
						// Новый механизм
						КодЛС = Прав(КодЛС, СтрДлина(КодЛС) - ДлинаПрефикса - 1);
					КонецЕсли;
					
					СтрокаОплаты.kod_ls = КодЛС;
					СтрокаОплаты.date   = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("date").Значение;
					СтрокаОплаты.summ   = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("summ").Значение;
					
					КомиссияАтрибут = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("fee");
					Если НЕ КомиссияАтрибут = Неопределено Тогда
						СтрокаОплаты.fee = КомиссияАтрибут.Значение;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		// Загрузка заявок АДС (временно закомментировано)
		//ИначеЕсли ТипФайла = "tickets" Тогда
		//	
		//	//СтруктураДанных.Вставить("name",     УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("name").Значение);
		//	//СтруктураДанных.Вставить("inn",      УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("inn").Значение);
		//	СтруктураДанных.Вставить("filedate", УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("filedate").Значение);
		//	СтруктураДанных.Вставить("filetype", ТипФайла);
		//	
		//	// Таблица статусов
		//	СтруктураДанных.Вставить("statuses", Новый ТаблицаЗначений);
		//	СтруктураДанных.meters.Колонки.Добавить("id",    Новый ОписаниеТипов("Строка"));
		//	СтруктураДанных.meters.Колонки.Добавить("title", Новый ОписаниеТипов("Число"));
		//	СтруктураДанных.meters.Колонки.Добавить("kod_ls",    Новый ОписаниеТипов("Строка"));
		//	СтруктураДанных.meters.Колонки.Добавить("indicbef1", Новый ОписаниеТипов("Число"));
		//	СтруктураДанных.meters.Колонки.Добавить("indicbef2", Новый ОписаниеТипов("Число"));
		//	СтруктураДанных.meters.Колонки.Добавить("indiccur1", Новый ОписаниеТипов("Число"));
		//	СтруктураДанных.meters.Колонки.Добавить("indiccur2", Новый ОписаниеТипов("Число"));
		//	СтруктураДанных.meters.Колонки.Добавить("kod",       Новый ОписаниеТипов("Строка"));
		//	СтруктураДанных.meters.Колонки.Добавить("name",      Новый ОписаниеТипов("Строка"));
		//	СтруктураДанных.meters.Колонки.Добавить("date",      Новый ОписаниеТипов("Дата"));
		//	
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		// Ошибка при чтении
		СообщенияОбОшибке = "Неверный формат файла.";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СообщенияОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьДанныеИзXML()

// Проверяет узел на то, что он является тегом.
//
Функция УзелЯвляетсяТегом(Узел) Экспорт
	
	Возврат ТипЗнч(Узел) = Тип("ЭлементDOM");
	
КонецФункции

#КонецОбласти

#Область ПроцедурыЗагрузкиДанныхВБазу

// Загружает данные из сформированной ранее структуры данных.
//
// Параметры
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена данными.
//  СтруктураДанных – структура, хранящая данные для загрузки.
//  НастройкиОбмена - элемент справочника "Настройки обмена данными с сайтом".
//  СведенияОбОшибке - Строка - описание проблем при обмене.
//  СтруктураИнформацииОСайте - Структура - информация о сайте.
//
//  Примечание:
//   accexistence - данные о наличии аккаунтов на сайте.
//   meters - показания по счетчикам.
//   payments - платежи, проведенные через "Монета" и "Payu".
//
Процедура ЗагрузитьДанныеВБазу(СтруктураДанных, НастройкиОбмена, СведенияОбОшибке, ВариантОбмена = Неопределено, СтруктураИнформацииОСайте, ПроводитьСформированныеДокументы = Истина) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		СведенияОбОшибке = "Неизвестный формат файла.";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СведенияОбОшибке);
		Возврат;
	КонецЕсли;
	
	ТипЗагрузки = НРег(СтруктураДанных.filetype);
	
	Если ТипЗагрузки = "accexistence" Тогда
		// Параметры доступа.
		ЗагрузитьПараметрыДоступа(СтруктураДанных, НастройкиОбмена, СтруктураИнформацииОСайте);
		
	ИначеЕсли ТипЗагрузки = "meters" Тогда
		// Счетчики.
		ЗагрузитьПоказанияСчетчиковВБазу(СтруктураДанных, ВариантОбмена, СтруктураИнформацииОСайте, ПроводитьСформированныеДокументы);
		
	ИначеЕсли ТипЗагрузки = "payments" Тогда
		
		ЗагрузитьРеестрПлатежей(СтруктураДанных, НастройкиОбмена.Организация, СтруктураИнформацииОСайте, ПроводитьСформированныеДокументы);
		
	Иначе
		СведенияОбОшибке = "Неизвестный формат файла.";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СведенияОбОшибке);
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДанныеВБазу()

// Загружает параметры доступа.
//
// Параметры
//  СтруктураДанных – структура, хранящая данные о параметрах доступа.
//  НастройкиОбмена - элемент справочника "Настройки обмена данными с сайтом".
//  СтруктураИнформацииОСайте - Структура - информация о сайте.
//
// Примечание:
//  Описание структуры загрузки см. в функции ПолучитьДанныеИзXML().
//
Процедура ЗагрузитьПараметрыДоступа(СтруктураДанных, НастройкиОбмена, СтруктураИнформацииОСайте)
	
	Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 Тогда
		
		ЗагрузитьПараметрыДоступа4(СтруктураДанных, НастройкиОбмена);
		
	Иначе
		// По умолчанию 3-я версия.
		ЗагрузитьПараметрыДоступа3(СтруктураДанных, НастройкиОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

// Загружает показания счетчиков (ИПУ).
//
// Параметры
//  СтруктураДанных – структура, хранящая сведения о показаниях ИПУ.
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена данными.
//  СтруктураИнформацииОСайте - Структура - информация о сайте.
//
// Примечание:
//  Описание структуры загрузки см. в функции ПолучитьДанныеИзXML().
//
Процедура ЗагрузитьПоказанияСчетчиковВБазу(СтруктураДанных, ВариантОбмена, СтруктураИнформацииОСайте, ПроводитьСформированныеДокументы)
	
	Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 Тогда
		
		ЗагрузитьПоказанияСчетчиковВБазу4(СтруктураДанных, ВариантОбмена, ПроводитьСформированныеДокументы);
		
	Иначе
		// По умолчанию 3-я версия.
		ЗагрузитьПоказанияСчетчиковВБазу3(СтруктураДанных, ВариантОбмена, ПроводитьСформированныеДокументы);
		
	КонецЕсли;
	
КонецПроцедуры

// Загружает сведения об оплатах.
//
// Параметры:
//  СтруктураДанных – Структура - структура, хранящая сведения об оплатах.
//  Организация - СправочникСсылка.Организации организация, в разрезе которой необходимо загружать оплаты.
//  СтруктураИнформацииОСайте - Структура - информация о сайте.
//
// Примечание:
//  Описание структуры загрузки см. в функции ПолучитьДанныеИзXML().
//
Процедура ЗагрузитьРеестрПлатежей(СтруктураДанных, Организация, СтруктураИнформацииОСайте, ПроводитьСформированныеДокументы)
	
	Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 Тогда
		
		ЗагрузитьРеестрПлатежей4(СтруктураДанных, Организация, ПроводитьСформированныеДокументы);
		
	Иначе
		// По умолчанию 3-я версия.
		ЗагрузитьРеестрПлатежей3(СтруктураДанных, Организация, ПроводитьСформированныеДокументы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТретийФормат_ПроцедурыЗагрузкиДанныхВБазу

// Загружает параметры доступа.
//
// Параметры
//  СтруктураДанных – структура, хранящая данные о параметрах доступа.
//  НастройкиОбмена - элемент справочника "Настройки обмена данными с сайтом".
//
// Примечание:
//  Описание структуры загрузки см. в функции ПолучитьДанныеИзXML().
//
Процедура ЗагрузитьПараметрыДоступа3(СтруктураДанных, НастройкиОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ТаблицаЛС.kod_ls КАК СТРОКА(100)) КАК ИдентификаторЛС,
	|	ТаблицаЛС.login КАК НовыйЛогин,
	|	ТаблицаЛС.email
	|ПОМЕСТИТЬ втТаблицаЛС
	|ИЗ
	|	&ТаблицаЛС КАК ТаблицаЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	втТаблицаЛС.НовыйЛогин,
	|	втТаблицаЛС.email КАК ЭлЯщик
	|ИЗ
	|	втТаблицаЛС КАК втТаблицаЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|		ПО втТаблицаЛС.ИдентификаторЛС = КВП_ЛицевыеСчета.Идентификатор";
	
	Запрос.УстановитьПараметр("ТаблицаЛС", СтруктураДанных.PersAcc);
	
	ТаблицаЛС = Запрос.Выполнить().Выгрузить();
	
	МенеджерЗаписи = РегистрыСведений.УПЖКХ_СведенияОНаличииПараметровДоступа.СоздатьМенеджерЗаписи();
	
	Для каждого ТекСтрока из ТаблицаЛС Цикл
		
		// Элемент справочника "Лицевые счета".
		ОбъектЛС = ТекСтрока.ЛицевойСчет.ПолучитьОбъект();
		ОбъектЛС.ЛогинДоступа          = ТекСтрока.НовыйЛогин;
		ОбъектЛС.АдресЭлектроннойПочты = ТекСтрока.ЭлЯщик;
		
		// Поиск записи в регистре.
		МенеджерЗаписи.ЛицевойСчет      = ТекСтрока.ЛицевойСчет;
		МенеджерЗаписи.НастройкаДоступа = НастройкиОбмена;
		МенеджерЗаписи.Прочитать();
		
		Попытка
			// Запись л/с
			ОбъектЛС.Записать();
			
			// Запись регистра
			Если МенеджерЗаписи.Выбран() Тогда
				Если НЕ МенеджерЗаписи.НаличиеПараметров Тогда
					МенеджерЗаписи.НаличиеПараметров = Истина;
					МенеджерЗаписи.Записать();
				КонецЕсли;
			Иначе
				МенеджерЗаписи.ЛицевойСчет       = ОбъектЛС.Ссылка;
				МенеджерЗаписи.НастройкаДоступа  = НастройкиОбмена;
				МенеджерЗаписи.НаличиеПараметров = Истина;
				
				МенеджерЗаписи.Записать();
			КонецЕсли;
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось записать параметры доступа для лицевого счета:" + ОбъектЛС.Наименование);
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьПараметрыДоступа()

// Загружает показания счетчиков (ИПУ).
//
// Параметры
//  СтруктураДанных – структура, хранящая сведения о показаниях ИПУ.
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена данными.
//
// Примечание:
//  Описание структуры загрузки см. в функции ПолучитьДанныеИзXML().
//
Процедура ЗагрузитьПоказанияСчетчиковВБазу3(СтруктураДанных, ВариантОбмена, ПроводитьСформированныеДокументы, ИсточникДанных = "Сайт ЖКХ", ЗагружатьНулевыеПоказания = Истина)
	
	НастройкиОбменаДанными = ВариантОбмена.НастройкаОбмена;
	НастройкаСбораДанных = ?(НастройкиОбменаДанными = Неопределено, Неопределено, НастройкиОбменаДанными.НастройкаСбораДанных);
	
	ЗагружатьПоЗданиям = ?(ВариантОбмена = Неопределено, Ложь, НастройкиОбменаДанными.ЗагружатьПоказанияПУПоЗданиям);
	ЗагружатьПоУслугам = ?(ВариантОбмена = Неопределено, Ложь, НастройкиОбменаДанными.ЗагружатьПоказанияПУПоУслугам);
	
	// Дата.
	СтрокаДаты = Сред(СтруктураДанных.filedate, 7, 4)
	           + Сред(СтруктураДанных.filedate, 4, 2)
	           + Лев(СтруктураДанных.filedate, 2)
	           + СтрЗаменить(Сред(СтруктураДанных.filedate, 12, 8), ":", "");
	
	// Запрос для определения соответствия между данными выгрузки и данными базы.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Счетчики.kod_ls КАК СТРОКА(100)) КАК ИдентификаторЛС,
	|	ВЫРАЗИТЬ(Счетчики.kod КАК СТРОКА(9)) КАК Код,
	|	Счетчики.indicbef1 КАК ПредПоказаниеДн,
	|	Счетчики.indicbef2 КАК ПредПоказаниеНч,
	|	Счетчики.indiccur1 КАК ТекПоказаниеДн,
	|	Счетчики.indiccur2 КАК ТекПоказаниеНч,
	|	Счетчики.date КАК Дата
	|ПОМЕСТИТЬ втСчетчики
	|ИЗ
	|	&Счетчики КАК Счетчики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Объект
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет.Идентификатор В
	|				(ВЫБРАТЬ
	|					втСчетчики.ИдентификаторЛС
	|				ИЗ
	|					втСчетчики КАК втСчетчики)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчета.Объект КАК Объект,
	|	втСчетчики.Код КАК Код,
	|	втСчетчики.ТекПоказаниеДн КАК ТекПоказаниеДн,
	|	втСчетчики.ТекПоказаниеНч КАК ТекПоказаниеНч,
	|	НАЧАЛОПЕРИОДА(втСчетчики.Дата, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ втЛицевыеСчетаИСчетчики
	|ИЗ
	|	втСчетчики КАК втСчетчики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛицевыеСчета КАК втЛицевыеСчета
	|		ПО втСчетчики.ИдентификаторЛС = втЛицевыеСчета.ИдентификаторЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Код КАК Код,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК ВидУслуги
	|ПОМЕСТИТЬ втДействующиеСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&Дата,
	|			Счетчик.Код В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаИСчетчики.Код
	|					ИЗ
	|						втЛицевыеСчетаИСчетчики КАК втЛицевыеСчетаИСчетчики)
	|				И ДатаИзменения <= &Дата
	|				И Счетчик.ВидУслуги В (&СписокУслуг)) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДействующиеСчетчики.Счетчик КАК Счетчик,
	|	втДействующиеСчетчики.Объект КАК Объект,
	|	втЛицевыеСчетаИСчетчики.Код КАК Код,
	|	втЛицевыеСчетаИСчетчики.ТекПоказаниеДн КАК ТекПоказаниеДн,
	|	втЛицевыеСчетаИСчетчики.ТекПоказаниеНч КАК ТекПоказаниеНч,
	|	втЛицевыеСчетаИСчетчики.Дата КАК Дата,
	|	втДействующиеСчетчики.ВидУслуги КАК ВидУслуги
	|ПОМЕСТИТЬ втСоответствиеСчетчиков
	|ИЗ
	|	втЛицевыеСчетаИСчетчики КАК втЛицевыеСчетаИСчетчики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДействующиеСчетчики КАК втДействующиеСчетчики
	|		ПО втЛицевыеСчетаИСчетчики.Код = втДействующиеСчетчики.Код
	|			И втЛицевыеСчетаИСчетчики.ЛицевойСчет = втДействующиеСчетчики.Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втДействующиеСчетчики.Счетчик,
	|	втДействующиеСчетчики.Объект,
	|	втЛицевыеСчетаИСчетчики.Код,
	|	втЛицевыеСчетаИСчетчики.ТекПоказаниеДн,
	|	втЛицевыеСчетаИСчетчики.ТекПоказаниеНч,
	|	втЛицевыеСчетаИСчетчики.Дата,
	|	NULL
	|ИЗ
	|	втЛицевыеСчетаИСчетчики КАК втЛицевыеСчетаИСчетчики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДействующиеСчетчики КАК втДействующиеСчетчики
	|		ПО втЛицевыеСчетаИСчетчики.Код = втДействующиеСчетчики.Код
	|			И втЛицевыеСчетаИСчетчики.Объект = втДействующиеСчетчики.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСоответствиеСчетчиков.Счетчик КАК Счетчик,
	|	втСоответствиеСчетчиков.Объект КАК Объект,
	|	втСоответствиеСчетчиков.Код КАК Код,
	|	втСоответствиеСчетчиков.ТекПоказаниеДн КАК ДневноеПоказание,
	|	втСоответствиеСчетчиков.ТекПоказаниеНч КАК НочноеПоказание,
	|	втСоответствиеСчетчиков.Дата КАК ДатаПоказания,
	|	втСоответствиеСчетчиков.ВидУслуги КАК Услуга
	|ИЗ
	|	втСоответствиеСчетчиков КАК втСоответствиеСчетчиков
	|
	|СГРУППИРОВАТЬ ПО
	|	втСоответствиеСчетчиков.ВидУслуги,
	|	втСоответствиеСчетчиков.Дата,
	|	втСоответствиеСчетчиков.Код,
	|	втСоответствиеСчетчиков.Объект,
	|	втСоответствиеСчетчиков.Счетчик,
	|	втСоответствиеСчетчиков.ТекПоказаниеДн,
	|	втСоответствиеСчетчиков.ТекПоказаниеНч";
	
	Если НЕ НастройкаСбораДанных = Неопределено И НастройкаСбораДанных.ВыбранныеУслуги.Количество() > 0 И Не НастройкаСбораДанных.ВыборУслуг = "Все услуги" Тогда
		Если НастройкаСбораДанных.ВыборУслуг = "Все услуги, кроме выбранных" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Счетчик.ВидУслуги В (&СписокУслуг)", "Счетчик.ВидУслуги НЕ В (&СписокУслуг)");
		КонецЕсли;
		Запрос.УстановитьПараметр("СписокУслуг", НастройкаСбораДанных.ВыбранныеУслуги.Выгрузить().ВыгрузитьКолонку("Услуга"));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Счетчик.ВидУслуги В (&СписокУслуг)", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Счетчик.ВидУслуги В (&СписокУслуг)", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата",     Дата(СтрокаДаты));
	Запрос.УстановитьПараметр("Счетчики", СтруктураДанных.meters);
	
	ТаблицаПоказаний = Запрос.Выполнить().Выгрузить();
	
	// Структура документа ввода показаний.
	СтруктураДляФормированияДокументов = Новый Структура("Комментарий, ЗагружатьНулевыеПоказания, ФормироватьДокументыВРазрезеЗданий, ФормироватьДокументыВРазрезеУслуг, ПроводитьСформированныеДокументы, ТаблицаПоказаний");
	
	Если ПроводитьСформированныеДокументы Тогда
		Комментарий = ?(ИсточникДанных = "Сайт ЖКХ", "#Создан автоматически при загрузке данных с сайта.", "#Создан автоматически при загрузке данных с сервиса ""ЖКХ: Личный кабинет"".");
	Иначе
		Комментарий = ?(ИсточникДанных = "Сайт ЖКХ", "#(Отладка) Создан при отладке загрузки данных с сайта. Проведение документа может привести к ошибкам в учетных данных.", "#(Отладка) Создан при отладке загрузки данных с сервиса ""ЖКХ: Личный кабинет"". Проведение документа может привести к ошибкам в учетных данных.");
	КонецЕсли;
	
	СтруктураДляФормированияДокументов.Комментарий                        = Комментарий;
	СтруктураДляФормированияДокументов.ЗагружатьНулевыеПоказания          = ЗагружатьНулевыеПоказания;
	СтруктураДляФормированияДокументов.ФормироватьДокументыВРазрезеЗданий = ЗагружатьПоЗданиям;
	СтруктураДляФормированияДокументов.ФормироватьДокументыВРазрезеУслуг  = ЗагружатьПоУслугам;
	СтруктураДляФормированияДокументов.ПроводитьСформированныеДокументы   = ПроводитьСформированныеДокументы;
	СтруктураДляФормированияДокументов.ТаблицаПоказаний                   = ТаблицаПоказаний;
	
	Документы.УПЖКХ_ВводПоказанийСчетчика.МассовоеФормированиеДокументов(СтруктураДляФормированияДокументов);
	
КонецПроцедуры // ЗагрузитьПоказанияСчетчиковВБазу()

// Загружает сведения об оплатах.
//
// Параметры:
//  СтруктураДанных – Структура - структура, хранящая сведения об оплатах.
//  Организация - СправочникСсылка.Организации организация, в разрезе которой необходимо загружать оплаты.
// 
// Примечание:
//  Описание структуры загрузки см. в функции ПолучитьДанныеИзXML().
//
Процедура ЗагрузитьРеестрПлатежей3(СтруктураДанных, Организация, ПроводитьСформированныеДокументы)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ТаблицаЛС.kod_ls КАК СТРОКА(100)) КАК ИдентификаторЛС,
	|	ТаблицаЛС.date,
	|	ТаблицаЛС.summ
	|ПОМЕСТИТЬ втТаблицаЛС
	|ИЗ
	|	&ТаблицаЛС КАК ТаблицаЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	втТаблицаЛС.date КАК Дата,
	|	втТаблицаЛС.summ КАК Сумма
	|ИЗ
	|	втТаблицаЛС КАК втТаблицаЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|		ПО втТаблицаЛС.ИдентификаторЛС = КВП_ЛицевыеСчета.Идентификатор";
	
	Запрос.УстановитьПараметр("ТаблицаЛС", СтруктураДанных.payments);
	ТаблицаЛС = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДат = ТаблицаЛС.Скопировать();
	ТаблицаДат.Свернуть("Дата");
	
	Для Каждого СтрокаДаты ИЗ ТаблицаДат Цикл
		СтрокиТекДаты = ТаблицаЛС.НайтиСтроки(Новый Структура("Дата", СтрокаДаты.Дата));
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Организация",        Организация);
		СтруктураЗаполнения.Вставить("Дата",               СтрокаДаты.Дата);
		СтруктураЗаполнения.Вставить("ДокументОплат",      "РегистрацияОплаты");
		СтруктураЗаполнения.Вставить("КорректировкаДолга", Ложь);
		СтруктураЗаполнения.Вставить("ВидОперации",        Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет);
		СтруктураЗаполнения.Вставить("ВариантРаспределенияОплатКапРемонт", Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ВсеУслуги);
		
		ТаблицаОплат = ПолучитьТаблицуОплат();
		
		Для Каждого СтрокаТекДаты ИЗ СтрокиТекДаты Цикл
			НоваяСтрокаОплаты = ТаблицаОплат.Добавить();
			
			НоваяСтрокаОплаты.Объект = СтрокаТекДаты.ЛицевойСчет;
			НоваяСтрокаОплаты.Сумма  = СтрокаТекДаты.Сумма;
		КонецЦикла;
		
		СтруктураЗаполнения.Вставить("ТаблицаОплат", ТаблицаОплат);
		
		ОбъектРегистрацияОплаты = Документы.КВП_РегистрацияОплаты.СоздатьДокумент();
		ОбъектРегистрацияОплаты.Заполнить(СтруктураЗаполнения);
		
		Если ПроводитьСформированныеДокументы Тогда
			ОбъектРегистрацияОплаты.Комментарий = "#Создан автоматически при загрузке данных с сайта.";
			РежимЗаписиСформированногоДокумента = РежимЗаписиДокумента.Проведение;
		Иначе
			ОбъектРегистрацияОплаты.Комментарий = "#(Отладка) Создан при отладке загрузки данных с сайта.";
			РежимЗаписиСформированногоДокумента = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		Если НЕ КВП_ЗаписатьОбъект(ОбъектРегистрацияОплаты, РежимЗаписиДокумента.Проведение) И РежимЗаписиСформированногоДокумента = РежимЗаписиДокумента.Проведение Тогда
			КВП_ЗаписатьОбъект(ОбъектРегистрацияОплаты, РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьРеестрПлатежей()

// Подготавливает таблицу, предназначенную для хранения оплат.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьТаблицуОплат()
	
	ТаблицаОплат = Новый ТаблицаЗначений;
	ТаблицаОплат.Колонки.Добавить("Объект",                         Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаОплат.Колонки.Добавить("Сумма",                          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаОплат.Колонки.Добавить("НастройкиОплатыОбъекта",         Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаОплат.Колонки.Добавить("РаспределятьПоУказаннымУслугам", Новый ОписаниеТипов("Булево"));
	ТаблицаОплат.Колонки.Добавить("ДокументОплаты",                 Новый ОписаниеТипов("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
	
	Возврат ТаблицаОплат;
	
КонецФункции // ПолучитьТаблицуОплат()

// Записывает параметры доступа в справочник "Лицевые счета" и
// регистр сведений "Сведения о наличии параметров доступа".
//
// Параметры:
//  ТаблицаЛС - таблица с параметрами доступа.
//  ОбновлятьПД - признак того, что надо заменять старые параметры доступа.
//  НастройкаДоступа - текущая настройка доступа.
//
// Возвращаемое значение:
//  Булево - удалось записать все параметры.
//
Функция ЗаписатьПараметрыДоступаНаСервереВерсия3(ТаблицаЛС, ОбновлятьПД, НастройкаДоступа) Экспорт
	
	КоличествоЗаписанныхПД = 0;
	
	Для Каждого СтрокаТЧ Из ТаблицаЛС Цикл
		// Производим запись только при условии изменения данных в строке.
		Если СтрокаТЧ.ПДИзменены Тогда
			
			ОбъектЛС               = СтрокаТЧ.ЛицевойСчет.ПолучитьОбъект();
			ОбъектЛС.ЛогинДоступа  = СтрокаТЧ.Логин;
			
			Если КВП_ЗаписатьОбъект(ОбъектЛС) Тогда
				КоличествоЗаписанныхПД = КоличествоЗаписанныхПД + 1;
			Иначе
				Продолжить;
			КонецЕсли;
			
			ПараметрыДоступа                   = РегистрыСведений.УПЖКХ_СведенияОНаличииПараметровДоступа.СоздатьМенеджерЗаписи();
			ПараметрыДоступа.ЛицевойСчет       = СтрокаТЧ.ЛицевойСчет;
			ПараметрыДоступа.НаличиеПараметров = Истина;
			ПараметрыДоступа.НастройкаДоступа  = НастройкаДоступа;
			
			ПараметрыДоступа.Записать();
			
			СтрокаТЧ.ДанныеЗаписаны = Истина;
			СтрокаТЧ.ПДИзменены     = Ложь;
		Иначе
			
			// Если данные не были изменены, то записывать их не нужно. Прибавляем счетчик записанных и ставим флаг.
			КоличествоЗаписанныхПД  = КоличествоЗаписанныхПД + 1;
			СтрокаТЧ.ДанныеЗаписаны = Истина;
			
		КонецЕсли;
	КонецЦикла;
		
	Если КоличествоЗаписанныхПД = ТаблицаЛС.Количество() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЗаписатьПараметрыДоступаНаСервере()

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Проверяет имеются ли зафиксированные в БД параметры доступа в разрезе настройки доступа.
// Если не имееются, подразумевается, что ранее механизмы обмена данными с сайтом не использовались.
//
// Параметры:
//  НастройкаДоступа - СправочникСсылка.УПЖКХ_НастройкиДоступаКСайту - настройка доступа.
//
// Возвращаемое значение:
//  Булево.
//
Функция УстановитьФактПервогоОткрытия(НастройкаДоступа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОНаличииПараметровДоступа.ЛицевойСчет,
	|	УПЖКХ_СведенияОНаличииПараметровДоступа.НаличиеПараметров
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОНаличииПараметровДоступа КАК УПЖКХ_СведенияОНаличииПараметровДоступа
	|ГДЕ
	|	УПЖКХ_СведенияОНаличииПараметровДоступа.НастройкаДоступа = &НастройкаДоступа";
	
	Запрос.УстановитьПараметр("НастройкаДоступа", НастройкаДоступа);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции // УстановитьФактПервогоОткрытия()

// Проверяет, необходимо ли добавлять префикс к коду л/с.
// Префикс необходимо добавлять, если учет в 1С ведется в разрезе нескольких организаций.
// 
// Возвращаемое значение:
//  булево - Истина - добавлять префикс, Ложь - не добавлять.
//
Функция ПроверитьНеобходимостьПрефикса()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисления.Организация,
	|	КОЛИЧЕСТВО(КВП_НазначенныеНачисления.Регистратор) КАК КолвоРегистраторов
	|ПОМЕСТИТЬ втЕстьРегистраторы
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
	|ГДЕ
	|	КВП_НазначенныеНачисления.Действует
	|	И НЕ КВП_НазначенныеНачисления.Организация.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеНачисления.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЕстьРегистраторы.Организация КАК Организация,
	|	втЕстьРегистраторы.КолвоРегистраторов
	|ПОМЕСТИТЬ втОтобранныеОрганизации
	|ИЗ
	|	втЕстьРегистраторы КАК втЕстьРегистраторы
	|ГДЕ
	|	НЕ втЕстьРегистраторы.КолвоРегистраторов = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(втОтобранныеОрганизации.Организация) КАК КолвоОрганизаций
	|ИЗ
	|	втОтобранныеОрганизации КАК втОтобранныеОрганизации";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если НЕ Результат.Количество() = 0 И Результат[0].КолвоОрганизаций > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПроверитьНеобходимостьПрефикса()

// Формирует префикс, добавляемый к коду л/с при выгрузке.
// 
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//
// Возвращаемое значение:
//  строка - содержит префикс.
//
Функция ПолучитьПрефикс(Организация)
	
	КодОрганизации = Организация.Код;
	
	ТекНомерСимвола = 0;
	ВсегоСимволов   = СтрДлина(КодОрганизации);
	ИтоговаяСтрока  = "";
	
	// Отбираем только числа.
	Пока ТекНомерСимвола < ВсегоСимволов Цикл
		
		ТекНомерСимвола = ТекНомерСимвола + 1;
		ТекСимвол       = Сред(КодОрганизации, ТекНомерСимвола, 1);
		КодТекСимвола   = КодСимвола(ТекСимвол);
		
		Если КодТекСимвола > 47 И КодТекСимвола < 58 Тогда
			ИтоговаяСтрока = ИтоговаяСтрока + ТекСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	// Убираем нули в начале строки.
	ПрефиксЛС = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ИтоговаяСтрока, "0");
	
	Возврат ПрефиксЛС;
	
КонецФункции // ПолучитьПрефикс()

// Формирует представление адреса лицевого счета.
//
// Параметры:
//  Строка - СтрокаТаблицыЗначений - строка, содержащая сведения об адресе.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьПредставлениеАдреса(Строка)
	
	Адрес = "";
	
	Адрес = ?(ПустаяСтрока(Строка.Регион),          Адрес, Адрес + Строка.Регион);
	Адрес = ?(ПустаяСтрока(Строка.Район),           Адрес, ?(ПустаяСтрока(Адрес), Строка.Район, Адрес + ", " + Строка.Район));
	Адрес = ?(ПустаяСтрока(Строка.Город),           Адрес, ?(ПустаяСтрока(Адрес), Строка.Город, Адрес + ", " + Строка.Город));
	Адрес = ?(ПустаяСтрока(Строка.НаселенныйПункт), Адрес, ?(ПустаяСтрока(Адрес), Строка.НаселенныйПункт, Адрес + ", " + Строка.НаселенныйПункт));
	Адрес = ?(ПустаяСтрока(Строка.Улица),           Адрес, ?(ПустаяСтрока(Адрес), Строка.Улица, Адрес + ", " + Строка.Улица));
	Адрес = ?(ПустаяСтрока(Строка.Дом),             Адрес, ?(ПустаяСтрока(Адрес), Строка.Дом, Адрес + ", " + Строка.Дом));
	Адрес = ?(ПустаяСтрока(Строка.Корпус),          Адрес, ?(ПустаяСтрока(Адрес), Строка.Корпус, Адрес + "/" + Строка.Корпус));
	Адрес = ?(ПустаяСтрока(Адрес), Строка.Помещение, Адрес + ", " + Строка.Помещение);
	
	Возврат Адрес;
	
КонецФункции // ПолучитьПредставлениеАдреса()

// Формирует строку, которая будет подставляться в свойтво "User-Agent" HTTP-соединения.
// Данная строка не влияет на процесс взаимодействия с сайтом и используется только на сайте для
// статистических целей.
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьПредставлениеАгентаДляСайта() Экспорт
	
	ВерсияПП = Метаданные.Версия;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы     = СистемнаяИнформация.ВерсияПриложения;
	
	Возврат "1c jkh/" + ВерсияПП + "/" + ВерсияПлатформы;
	
КонецФункции // ПолучитьПредставлениеАгентаДляСайта()

// Получает текущие настройки вывода платежных документов.
//
Функция ПолучитьНастройкиВыводаКвитанций(СтруктураНастроек) Экспорт
	
	СтруктураНастроекПД = Новый Структура;
	СтруктураНастроекПД.Вставить("ИсполнительРасчетов",            СтруктураНастроек.ИсполнительРасчетов);
	СтруктураНастроекПД.Вставить("ПечататьКвитанциюКапРемонт",     СтруктураНастроек.ПечататьКвитанциюКапРемонт);
	СтруктураНастроекПД.Вставить("СпособПечатиКвитанцииКапРемонт", СтруктураНастроек.СпособПечатиКвитанцииКапРемонт);
	СтруктураНастроекПД.Вставить("УчитыватьПени",                  СтруктураНастроек.УчитыватьПени);
	СтруктураНастроекПД.Вставить("СпособПечатиКвитанцииПоПеням",   СтруктураНастроек.СпособПечатиКвитанцииПоПеням);
	СтруктураНастроекПД.Вставить("ВыводитьИндРасходДляВсехУслуг",  СтруктураНастроек.ВыводитьИндРасходДляВсехУслуг);
	
	// Таблица услуг по типам.
	СтруктураНастроекПД.Вставить("УслугиПоТипам",                  АктуализироватьСписокУслугПоТипам(СтруктураНастроек.УслугиПоТипам));
	
	Возврат СтруктураНастроекПД;
	
КонецФункции // ПолучитьНастройкиВыводаКвитанций()

// Исключает из таблицы улуг по типам удаленные услуги и дополняет ее новыми услугами.
//
// Параметры:
//  ТаблицаУслуг - таблица с услугами.
//  
// Возвращаемое значение:
//  ТаблицаЗначений - актуализированная таблица с услугами.
//
Функция АктуализироватьСписокУслугПоТипам(ТаблицаУслугПоТипам) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаУслугПоТипам.ВидУслуги,
	|	ТаблицаУслугПоТипам.Коммунальная,
	|	ТаблицаУслугПоТипам.СодержаниеИРемонт
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ТаблицаУслугПоТипам КАК ТаблицаУслугПоТипам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВидыУслуг.Ссылка КАК ВидУслуги,
	|	ЕСТЬNULL(втУслуги.Коммунальная, ЛОЖЬ) КАК Коммунальная,
	|	ЕСТЬNULL(втУслуги.СодержаниеИРемонт, ЛОЖЬ) КАК СодержаниеИРемонт
	|ПОМЕСТИТЬ втАктуальныеДанные
	|ИЗ
	|	Справочник.КВП_ВидыУслуг КАК КВП_ВидыУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
	|		ПО КВП_ВидыУслуг.Ссылка = втУслуги.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАктуальныеДанные.ВидУслуги,
	|	ВЫБОР
	|		КОГДА втАктуальныеДанные.Коммунальная
	|			ТОГДА ""1""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втАктуальныеДанные.СодержаниеИРемонт
	|					ТОГДА ""2""
	|				ИНАЧЕ ""3""
	|			КОНЕЦ
	|	КОНЕЦ КАК ТипУслуги
	|ИЗ
	|	втАктуальныеДанные КАК втАктуальныеДанные";
	
	Запрос.УстановитьПараметр("ТаблицаУслугПоТипам", ТаблицаУслугПоТипам);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции //  АктуализироватьСписокУслугПоТипам()

// Определяет, включен ли режим отладки.
//
Функция ИспользуетсяРежимОтладки() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("УПЖКХ_ИспользоватьРежимОтладки");
	
КонецФункции

#КонецОбласти

