
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СВЕДЕНИЯ ОБ ОРГАНИЗАЦИЯХ

// Получает структуру с данными об основной организации и об исполнителе расчетов.
//
// Параметры:
//  ОбщиеДанные - структура с общими данными
//  СтруктураНастроек - структура с пользователькими настройками.
//
Процедура ПодготовитьСведенияОбОрганизациях(ОбщиеДанные, СтруктураНастроек) Экспорт
	
	ВидМакета = СтруктураНастроек.ВидМакета;
	Макеты    = Перечисления.УПЖКХ_ВидыПлатежныхДокументов;
	
	ДополнитьСтруктуруНастроекПользователя(СтруктураНастроек);
	
	ДополнитьОбщиеДанные(ОбщиеДанные);
	
	// Подготовливаем сведения об основной организации.
	ЗаполнитьСведенияОбОрганизации(ОбщиеДанные, СтруктураНастроек);
	
	// Подготавливаем сведения об исполнителе отчетов.
	Если СтруктураНастроек.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного = Истина Тогда
		
		Если ЗначениеЗаполнено(СтруктураНастроек.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам) Тогда
			
			СтруктураНастроек.ИсполнительРасчетов = СтруктураНастроек.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам.Владелец;
			ЗаполнитьСведенияОбИсполнителе(ОбщиеДанные, СтруктураНастроек, СтруктураНастроек.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам);
			
		ИначеЕсли ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) Тогда
			
			ЗаполнитьСведенияОбИсполнителе(ОбщиеДанные, СтруктураНастроек);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Подготавливаем сведения о получателе платежа. При этом, если указан исполнитель расчетов, то в качестве
	// получателя используем его. В противном случае - основную организацию.
	Если ВидМакета = Макеты.Чебоксары
	 Или ВидМакета = Макеты.СПолямиБанка2
	 Или ВидМакета = Макеты.Москва
	 Или ВидМакета = Макеты.Москва679 Тогда
		ЗаполнитьСведенияОПолучателеПлатежа(ОбщиеДанные, СтруктураНастроек.ИсполнительРасчетов);
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСтруктуруСДаннымиОбОрганизациях()

// Записывает в структуру с параметрами сведения об организации.
//
// Параметры:
//  ОбщиеДанные - структура с параметрами
//  Организация - текущая организация
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция
//  ПараметрыУПОтказ - признак отсутствия настроек УП
//  ПараметрыУП - структура с настройками УП
//  ЛьготыСправочно - значение флага "Не учитывать льготы во взаиморасчетах".
// 
Процедура ЗаполнитьСведенияОбОрганизации(ОбщиеДанные, СтруктураНастроек)
	
	Организация                  = СтруктураНастроек.Организация;
	ПериодПросмотра              = СтруктураНастроек.ПериодПросмотра;
	ПараметрыУПОтказ             = СтруктураНастроек.ПараметрыУПОтказ;
	ПараметрыУП                  = СтруктураНастроек.ПараметрыУП;
	ПараметрыФормированияПДОтказ = СтруктураНастроек.ПараметрыФормированияПДОтказ;
	ПараметрыФормированияПД      = СтруктураНастроек.ПараметрыФормированияПД;
	ЛьготыСправочно              = СтруктураНастроек.ЛьготыСправочно;
	
	СведенияОбОрганизации = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(Организация, ПериодПросмотра);
	
	// ОКТМО организации хранится в документе "Регистрация в налоговом органе",
	// поэтому нам нужно его получить.
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Организация, СведенияОбОрганизации.КПП, Организация.КодНалоговогоОргана);
	
	ОбщиеДанные.Вставить("КодОрганизации",       Организация.Код);
	ОбщиеДанные.Вставить("Организация",          ПолучитьНаименованиеОрганизации(Организация));
	ОбщиеДанные.Вставить("ОрганизацияОбъект",    Организация);
	ОбщиеДанные.Вставить("ИННОрганизации",       СведенияОбОрганизации.ИНН);
	ОбщиеДанные.Вставить("КППОрганизации",       СведенияОбОрганизации.КПП);
	ОбщиеДанные.Вставить("ЮрАдресОрганизации",   СведенияОбОрганизации.ЮридическийАдрес);
	ОбщиеДанные.Вставить("ФактАдресОрганизации", СведенияОбОрганизации.ФактическийАдрес);
	ОбщиеДанные.Вставить("Телефон", 		     СведенияОбОрганизации.Телефоны);
	ОбщиеДанные.Вставить("ЛьготыСправочно",      ЛьготыСправочно);
	ОбщиеДанные.Вставить("Email",                СведенияОбОрганизации.Email);
	ОбщиеДанные.Вставить("ОКТМО",                РегистрацияВНалоговомОргане.КодПоОКТМО);
	
	Если ЗначениеЗаполнено(СведенияОбОрганизации.Факс) Тогда
		ОбщиеДанные.Вставить("ЗапятаяФакс",      ", " + СведенияОбОрганизации.Факс);
	Иначе
		ОбщиеДанные.Вставить("ЗапятаяФакс",      "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбОрганизации.Email) Тогда
		ОбщиеДанные.Вставить("ЗапятаяEmail",     ", " + СведенияОбОрганизации.Email);
	Иначе
		ОбщиеДанные.Вставить("ЗапятаяEmail",      "");
	КонецЕсли;
	
	Если ПараметрыУПОтказ Тогда
		
		ОбщиеДанные.Вставить("ДатаОплатыУслуг",        10);
		ОбщиеДанные.Вставить("СайтОрганизации",        "");
		ОбщиеДанные.Вставить("ЗапятаяСайтОрганизации", "");
		
	Иначе
		
		ОбщиеДанные.Вставить("ДатаОплатыУслуг",        ПараметрыУП.ЧислоВнесенияПлатежа);
		
		Если ЗначениеЗаполнено(ПараметрыУП.АдресСайтаКомпании) Тогда
			ОбщиеДанные.Вставить("НадписьСайт",            "Сайт:");
			ОбщиеДанные.Вставить("СайтОрганизации",        ПараметрыУП.АдресСайтаКомпании);
			ОбщиеДанные.Вставить("ЗапятаяСайтОрганизации", ", " + ПараметрыУП.АдресСайтаКомпании);
		Иначе
			ОбщиеДанные.Вставить("СайтОрганизации",        "");
			ОбщиеДанные.Вставить("ЗапятаяСайтОрганизации", "");
		КонецЕсли;
	
	КонецЕсли;
	
	ОбщиеДанные.Вставить("ДопИнформация",   ?(ПараметрыФормированияПДОтказ, "", ПараметрыФормированияПД.ДополнительныеКонтактыОрганизацииОсн));
	ОбщиеДанные.Вставить("ДопИнформацияКР", ?(ПараметрыФормированияПДОтказ, "", ПараметрыФормированияПД.ДополнительныеКонтактыОрганизацииКР));
	
	ОбщиеДанные.Вставить("ПримечаниеКвитанцииОсн", ?(ПараметрыФормированияПДОтказ, "", ПараметрыФормированияПД.ПримечаниеКвитанцииОсн));
	ОбщиеДанные.Вставить("ПримечаниеКвитанцииКР",  ?(ПараметрыФормированияПДОтказ, "", ПараметрыФормированияПД.ПримечаниеКвитанцииКР));
	
	ОбщиеДанные.Вставить("РасчетныйСчет", СведенияОбОрганизации.НомерСчета);
	ОбщиеДанные.Вставить("Банк",          СведенияОбОрганизации.Банк);
	ОбщиеДанные.Вставить("КоррСчет",      СведенияОбОрганизации.КоррСчет);
	ОбщиеДанные.Вставить("БИК",           СведенияОбОрганизации.БИК);
	
КонецПроцедуры // ПолучитьСведенияОбОрганизации()

// Если указан исполнитель расчетов, записывает в структуру с параметрами сведения о нем.
//
// Параметры:
//  ОбщиеДанные - структура с параметрами
//  СтруктураНастроек - Структура -настройки формирования квитанции.
//
Процедура ЗаполнитьСведенияОбИсполнителе(ОбщиеДанные, СтруктураНастроек, БанковскийСчет = Неопределено) Экспорт
	
	ИсполнительРасчетов   = СтруктураНастроек.ИсполнительРасчетов;
	СведенияОбОрганизации = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(ИсполнительРасчетов, СтруктураНастроек.ПериодПросмотра, БанковскийСчет);
	
	// Если текущий поставщик/исполнитель является поставщиком по кап. ремонту, нужно использовать реквизиты кап. ремонта.
	// Это нужно для того случая, когда поставщиком услуг кап. ремонта является управляющая организация, на которую
	// формируется квитанция.
	// Используется только при формировании единой квитанции.
	Если ОбщиеДанные.Свойство("ИспользоватьРСПоКапремонту") И ОбщиеДанные.ИспользоватьРСПоКапремонту = Истина Тогда
		ОбщиеДанные.Вставить("РасчетныйСчетИсполнителя", ОбщиеДанные.РасчетныйСчетКР);
		ОбщиеДанные.Вставить("БанкИсполнителя",          ОбщиеДанные.БанкКР);
		ОбщиеДанные.Вставить("КоррСчетБанкаИсполнителя", ОбщиеДанные.КоррСчетКР);
		ОбщиеДанные.Вставить("БИКБанкаИсполнителя",      ОбщиеДанные.БИККР);
		ОбщиеДанные.Вставить("ДопИнформацияИсполнителя", ОбщиеДанные.ДопИнформацияКР);
	Иначе
		ОбщиеДанные.Вставить("РасчетныйСчетИсполнителя", СведенияОбОрганизации.НомерСчета);
		ОбщиеДанные.Вставить("БанкИсполнителя",          СведенияОбОрганизации.Банк);
		ОбщиеДанные.Вставить("КоррСчетБанкаИсполнителя", СведенияОбОрганизации.КоррСчет);
		ОбщиеДанные.Вставить("БИКБанкаИсполнителя",      СведенияОбОрганизации.БИК);
		
		Если ТипЗнч(ИсполнительРасчетов) = Тип("СправочникСсылка.Контрагенты") Тогда
			ОбщиеДанные.Вставить("ДопИнформацияИсполнителя", ИсполнительРасчетов.ДополнительнаяИнформация);
		ИначеЕсли ТипЗнч(ИсполнительРасчетов) = Тип("СправочникСсылка.Организации") Тогда
			ОбщиеДанные.Вставить("ДопИнформацияИсполнителя", ОбщиеДанные.ДопИнформация);
		КонецЕсли;
	КонецЕсли;
	
	ОбщиеДанные.Вставить("ИсполнительУслуг",   СведенияОбОрганизации.НаименованиеДляПечатныхФорм);
	ОбщиеДанные.Вставить("КодИсполнителя",     ИсполнительРасчетов.Код);
	ОбщиеДанные.Вставить("ИННИсполнителя",     СведенияОбОрганизации.ИНН);
	ОбщиеДанные.Вставить("КППИсполнителя",     СведенияОбОрганизации.КПП);
	ОбщиеДанные.Вставить("АдресИсполнителя",   СведенияОбОрганизации.ЮридическийАдрес);
	ОбщиеДанные.Вставить("ТелефонИсполнителя", СведенияОбОрганизации.Телефоны);
	ОбщиеДанные.Вставить("EmailИсполнителя",   СведенияОбОрганизации.Email);
	
КонецПроцедуры // ЗаполнитьСведенияОбИсполнителе()

// Записывает в структуру сведения об организации-получателе платежа.
//
// Параметры:
//  ОбщиеДанные - структура с общими данными
//  ИсполнительРасчетов - значение поля "Исполнитель" формы квитанции.
//
Процедура ЗаполнитьСведенияОПолучателеПлатежа(ОбщиеДанные, ИсполнительРасчетов) Экспорт
	
	Если ЗначениеЗаполнено(ИсполнительРасчетов) Тогда
		ОбщиеДанные.Вставить("ПолучательПлатежа",  ОбщиеДанные.ИсполнительУслуг);
		ОбщиеДанные.Вставить("ИННПолучателя",      ОбщиеДанные.ИННИсполнителя);
		ОбщиеДанные.Вставить("КПППолучателя",      ОбщиеДанные.КППИсполнителя);
		ОбщиеДанные.Вставить("РасчСчетПолучателя", ОбщиеДанные.РасчетныйСчетИсполнителя);
		ОбщиеДанные.Вставить("БанкПолучателя",     ОбщиеДанные.БанкИсполнителя);
		ОбщиеДанные.Вставить("КоррСчетПолучателя", ОбщиеДанные.КоррСчетБанкаИсполнителя);
		ОбщиеДанные.Вставить("БИКПолучателя",      ОбщиеДанные.БИКБанкаИсполнителя);
		ОбщиеДанные.Вставить("АдресПолучателя",    ОбщиеДанные.АдресИсполнителя);
		ОбщиеДанные.Вставить("ТелефонПолучателя",  ОбщиеДанные.ТелефонИсполнителя);
		ОбщиеДанные.Вставить("ЭлЯщикПолучателя",   ОбщиеДанные.EmailИсполнителя);
		Если ОбщиеДанные.Свойство("ДопИнформацияИсполнителя") Тогда
			ОбщиеДанные.Вставить("ДопИнформацияПолучателя",   ОбщиеДанные.ДопИнформацияИсполнителя);
			ОбщиеДанные.Вставить("ДопИнформацияПолучателяКР", ОбщиеДанные.ДопИнформацияИсполнителя);
		КонецЕсли;
	Иначе
		ОбщиеДанные.Вставить("ПолучательПлатежа",         ОбщиеДанные.Организация);
		ОбщиеДанные.Вставить("ИННПолучателя",             ОбщиеДанные.ИННОрганизации);
		ОбщиеДанные.Вставить("КПППолучателя",             ОбщиеДанные.КППОрганизации);
		ОбщиеДанные.Вставить("РасчСчетПолучателя",        ОбщиеДанные.РасчетныйСчет);
		ОбщиеДанные.Вставить("БанкПолучателя",            ОбщиеДанные.Банк);
		ОбщиеДанные.Вставить("КоррСчетПолучателя",        ОбщиеДанные.КоррСчет);
		ОбщиеДанные.Вставить("БИКПолучателя",             ОбщиеДанные.БИК);
		ОбщиеДанные.Вставить("АдресПолучателя",           ОбщиеДанные.ЮрАдресОрганизации);
		ОбщиеДанные.Вставить("ТелефонПолучателя",         ОбщиеДанные.Телефон);
		ОбщиеДанные.Вставить("ЭлЯщикПолучателя",          ОбщиеДанные.Email);
		ОбщиеДанные.Вставить("ДопИнформацияПолучателя",   ОбщиеДанные.ДопИнформация);
		ОбщиеДанные.Вставить("ДопИнформацияПолучателяКР", ОбщиеДанные.ДопИнформацияКР);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСведенияОПолучателеПлатежа()

// Формирует наименование организации с учетом настройки справочника "Организации"
// "Для печатных форм использовать".
//
// Параметры:
//  Организация - основная организация.
//
// Возвращаемое значение:
//  Строка - наименование организации.
//
Функция ПолучитьНаименованиеОрганизации(Организация) Экспорт
	
	Если Организация.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование Тогда
		Возврат Организация.НаименованиеПолное;
	Иначе
		Возврат Организация.НаименованиеСокращенное;
	КонецЕсли;
	
КонецФункции // ПолучитьНаименованиеОрганизации()

// Получает ссылку на организацию в сведениях для взаиморасчетов лицевого счета.
//
Функция ПолучитьОрганизациюИзДоговораКонтрагентаЛицевогоСчета(ЛицевойСчет, ПериодПросмотра) Экспорт
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ТекущаяДата, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних";
	
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоМесяца(ПериодПросмотра));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Организация = Выборка.Организация;
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции // ПолучитьОрганизациюИзДоговораКонтрагентаЛицевогоСчета()

////////////////////////////////////////////////////////////////////////////////
// СВЕДЕНИЯ О ПЛАТЕЛЬЩИКАХ

// Формирует структуру с таблицами данных обо все лицевых счетах отчета.
//
// Параметры:
//  СтруктураНастроек - структура с пользовательскими настройками.
//
// Возвращаемое значение:
//  Структура - структура с таблицами.
// 
Функция ПолучитьСтруктуруСДаннымиОПлательщиках(СтруктураНастроек) Экспорт
	
	СтруктураПлательщиков = Новый Структура;
	
	// Таблица с ФИО ответственных собственников.
	СтруктураПлательщиков.Вставить("ТаблицаВладельцев", ПолучитьТаблицуВладельцевЛицевыхСчетов(СтруктураНастроек.ПериодПросмотра, СтруктураНастроек.СписокЛицевыхСчетов));
	
	// Таблица с размерами общей и жилой площадей.
	СтруктураПлательщиков.Вставить("ТаблицаПлощадей",   ПолучитьТаблицуПлощадейПомещений(СтруктураНастроек));
	
	Если СтруктураНастроек.ВыводитьРасчетнуюПлощадь Тогда
		СтруктураПлательщиков.Вставить("ТаблицаРасчетныхПлощадейПомещений", ПолучитьТаблицуРасчетныхПлощадейПомещений(СтруктураНастроек));
		СтруктураПлательщиков.Вставить("ТаблицаРасчетныхПлощадейЗданий",    ПолучитьТаблицуРасчетныхПлощадейЗданий(СтруктураНастроек));
	Иначе
		СтруктураПлательщиков.Вставить("ТаблицаРасчетныхПлощадейПомещений", Новый ТаблицаЗначений);
		СтруктураПлательщиков.Вставить("ТаблицаРасчетныхПлощадейЗданий",    Новый ТаблицаЗначений);
	КонецЕсли;
	
	// Таблица с количеством зарегистрированных жильцов.
	СтруктураПлательщиков.Вставить("ТаблицаЗарегистрированных", ПолучитьТаблицуСКоличествомЗарегистрированных(СтруктураНастроек));
	
	// Таблица с количеством проживающих жильцов.
	СтруктураПлательщиков.Вставить("ТаблицаПроживающих",        ПолучитьТаблицуСКоличествомПроживающих(СтруктураНастроек));
	
	// Таблица с видами собственности помещений.
	СтруктураПлательщиков.Вставить("ТаблицаСобственности",      ПолучитьТаблицуСВидамиСобственностиПомещений(СтруктураНастроек));
	
	// Таблица со льготными категориями.
	СтруктураПлательщиков.Вставить("ТаблицаЛьготников",         ПолучитьТаблицуСЛьготнымиКатегориямиЖильцов(СтруктураНастроек));
	
	// Таблица с итоговыми показателями по зданиям.
	СтруктураПлательщиков.Вставить("ТаблицаСведений",           ПолучитьТаблицуБазРаспределения(СтруктураНастроек));
	
	Возврат СтруктураПлательщиков;
	
КонецФункции // ПолучитьСтруктуруСДаннымиОПлательщиках()

// Получает таблицу с отвественными владельцами по списку л/с.
//
// Параметры:
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция
//  СписокОбъектов - список лицевых счетов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с владельцами л/с.
//
Функция ПолучитьТаблицуВладельцевЛицевыхСчетов(ПериодПросмотра, СписокЛицевыхСчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК Владелец,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец) = &ТипЖильцы
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВладелецЖилец,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец) = &ТипКонтрагент
	|				И УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтветственныйКонтрагентФизЛицо,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование КАК НаименованиеВладельца
	|ПОМЕСТИТЬ втОтветственныеСобственники
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&КонецМесяца, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтветственныеСобственники.Владелец КАК Владелец,
	|	втОтветственныеСобственники.Владелец.ФизЛицо КАК ВладелецФизЛицо
	|ПОМЕСТИТЬ ФизЛица
	|ИЗ
	|	втОтветственныеСобственники КАК втОтветственныеСобственники
	|ГДЕ
	|	втОтветственныеСобственники.ВладелецЖилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
	|ПОМЕСТИТЬ ФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|			&КонецМесяца,
	|			ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					ФизЛица.ВладелецФизЛицо
	|				ИЗ
	|					ФизЛица КАК ФизЛица)) КАК ФИОФизЛицСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизЛица.Владелец КАК Владелец,
	|	ФизЛица.ВладелецФизЛицо КАК ВладелецФизЛицо,
	|	ФизЛица.ВладелецФизЛицо.ИНН КАК ИНН,
	|	ФизЛица.ВладелецФизЛицо.ДатаРождения КАК ДатаРождения,
	|	ФизЛица.ВладелецФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	ЕСТЬNULL(ФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ФИОФизЛиц.Отчество, """") КАК Отчество
	|ПОМЕСТИТЬ ФИОЖильцов
	|ИЗ
	|	ФизЛица КАК ФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФИОФизЛиц КАК ФИОФизЛиц
	|		ПО ФизЛица.ВладелецФизЛицо = ФИОФизЛиц.ФизическоеЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтветственныеСобственники.ЛицевойСчет КАК ЛицевойСчет,
	|	втОтветственныеСобственники.Владелец КАК Владелец,
	|	втОтветственныеСобственники.ВладелецЖилец КАК ВладелецЖилец,
	|	втОтветственныеСобственники.ОтветственныйКонтрагентФизЛицо КАК ОтветственныйКонтрагентФизЛицо,
	|	втОтветственныеСобственники.НаименованиеВладельца КАК НаименованиеВладельца,
	|	ЕСТЬNULL(ФИОЖильцов.ВладелецФизЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ВладелецФизЛицо,
	|	ЕСТЬNULL(ФИОЖильцов.Фамилия, """") КАК ФамилияЖильца,
	|	ЕСТЬNULL(ФИОЖильцов.Имя, """") КАК ИмяЖильца,
	|	ЕСТЬNULL(ФИОЖильцов.Отчество, """") КАК ОтчествоЖильца,
	|	ЕСТЬNULL(ФИОЖильцов.ИНН, """") КАК ИННВладельцаЖильца,
	|	ЕСТЬNULL(ФИОЖильцов.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРожденияВладельца,
	|	ЕСТЬNULL(ФИОЖильцов.СтраховойНомерПФР, """") КАК СтраховойНомерПФРВладельца
	|ИЗ
	|	втОтветственныеСобственники КАК втОтветственныеСобственники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФИОЖильцов КАК ФИОЖильцов
	|		ПО втОтветственныеСобственники.Владелец = ФИОЖильцов.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтветственныеСобственники.Владелец КАК Владелец,
	|	втОтветственныеСобственники.ВладелецЖилец КАК ВладелецЖилец
	|ИЗ
	|	втОтветственныеСобственники КАК втОтветственныеСобственники
	|ГДЕ
	|	втОтветственныеСобственники.ВладелецЖилец";
	
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("КонецМесяца",         КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("ТипЖильцы",           Тип("СправочникСсылка.УПЖКХ_Жильцы"));
	Запрос.УстановитьПараметр("ТипКонтрагент",       Тип("СправочникСсылка.Контрагенты"));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Получаем таблицу телефонов жильцов.
	ТаблицаВладельцевЖильцов = РезультатыЗапроса[5].Выгрузить();
	ТаблицаТелефоновЖильцов  = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов(ТаблицаВладельцевЖильцов.ВыгрузитьКолонку("Владелец"));
	
	// Получаем таблицу владельцев.
	ТаблицаВладельцев = РезультатыЗапроса[4].Выгрузить();
	
	// Дополняем таблицу владельцев сведениями о их телефонах.
	ТаблицаВладельцев.Колонки.Добавить("ТелефонВладельцаЖильца", Новый ОписаниеТипов("Строка"));
	
	СтрокиВладельцевЖильцов = ТаблицаВладельцев.НайтиСтроки(Новый Структура("ВладелецЖилец", Истина));
	
	Для каждого ТекВладелец из СтрокиВладельцевЖильцов Цикл
		
		НайденнаяСтрокаТелефона = ТаблицаТелефоновЖильцов.Найти(ТекВладелец.ВладелецФизЛицо, "ФизЛицо");
		
		Если Не НайденнаяСтрокаТелефона = Неопределено Тогда
			ТекВладелец.ТелефонВладельцаЖильца = НайденнаяСтрокаТелефона.СписокТелефонов;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаВладельцев;
	
КонецФункции // ПолучитьТаблицуВладельцевЛицевыхСчетов()

// Получает таблицу с размерами общей и жилой площадей по списку помещений.
//
// Параметры:
//  СтруктураНастроек - Структура - структура параметров настроек.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с размерами площадей.
//
Функция ПолучитьТаблицуПлощадейПомещений(СтруктураНастроек)
	
	ПериодПросмотра = СтруктураНастроек.ПериодПросмотра;
	СписокПомещений = СтруктураНастроек.СписокПомещений;
	
	ВидыПлощадей = Новый СписокЗначений;
	ВидыПлощадей.Добавить(Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
	ВидыПлощадей.Добавить(Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
	|	КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади КАК ВидПлощади,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК РазмерПлощади
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&КонецМесяца,
	|			Объект В (&СписокПомещений)
	|				И ВидПлощади В (&ВидыПлощадей)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект КАК Объект,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
	|				И НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|			ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РазмерДоли
	|ПОМЕСТИТЬ втРазмерыДолей
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&КонецМесяца,
	|			Объект В
	|				(ВЫБРАТЬ
	|					втПлощадиПомещений.Помещение
	|				ИЗ
	|					втПлощадиПомещений КАК втПлощадиПомещений)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПлощадиПомещений.Помещение КАК Помещение,
	|	втРазмерыДолей.ЛицевойСчет КАК ЛицевойСчет,
	|	втПлощадиПомещений.ВидПлощади КАК ВидПлощади,
	|	втПлощадиПомещений.РазмерПлощади КАК РазмерПлощади,
	|	втПлощадиПомещений.РазмерПлощади * втРазмерыДолей.РазмерДоли КАК РазмерПлощадиДоля
	|ИЗ
	|	втПлощадиПомещений КАК втПлощадиПомещений
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРазмерыДолей КАК втРазмерыДолей
	|		ПО втПлощадиПомещений.Помещение = втРазмерыДолей.Объект";
	
	Запрос.УстановитьПараметр("КонецМесяца",     КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("СписокПомещений", СписокПомещений);
	Запрос.УстановитьПараметр("ВидыПлощадей",    ВидыПлощадей);
	
	ТаблицаПлощадей = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПлощадей;
	
КонецФункции // ПолучитьТаблицуПлощадейПомещений()

// Получает таблицу с размерами расчетных площадей помещений.
//
// Параметры:
//  СтруктураНастроек - Структура - структура параметров настроек.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьТаблицуРасчетныхПлощадейПомещений(СтруктураНастроек)
	
	ПериодПросмотра           = СтруктураНастроек.ПериодПросмотра;
	СписокПомещений           = СтруктураНастроек.СписокПомещений;
	РасчетнаяПлощадьПомещения = СтруктураНастроек.РасчетнаяПлощадьПомещения;
	
	ЗапросПомещения = Новый Запрос;
	ЗапросПомещения.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК Площадь
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&КонецМесяца,
	|			Объект В (&СписокПомещений)
	|				И ВидПлощади = &РасчетнаяПлощадьПомещения) КАК КВП_ПлощадьПомещенияСрезПоследних";
	
	ЗапросПомещения.УстановитьПараметр("КонецМесяца",               КонецМесяца(ПериодПросмотра));
	ЗапросПомещения.УстановитьПараметр("СписокПомещений",           СписокПомещений);
	ЗапросПомещения.УстановитьПараметр("РасчетнаяПлощадьПомещения", РасчетнаяПлощадьПомещения);
	
	Возврат ЗапросПомещения.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуРасчетныхПлощадейПомещений()

// Получает таблицу с размерами расчетных площадей зданий.
//
// Параметры:
//  СтруктураНастроек - Структура - структура параметров настроек.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьТаблицуРасчетныхПлощадейЗданий(СтруктураНастроек)
	
	СписокЗданий           = СтруктураНастроек.СписокЗданий;
	РасчетнаяПлощадьЗдания = СтруктураНастроек.РасчетнаяПлощадьЗдания;
	
	ЗапросЗдания = Новый Запрос;
	ЗапросЗдания.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадиЗдания.Объект КАК Здание,
	|	КВП_ПлощадиЗдания.Площадь КАК Площадь
	|ИЗ
	|	РегистрСведений.КВП_ПлощадиЗдания КАК КВП_ПлощадиЗдания
	|ГДЕ
	|	КВП_ПлощадиЗдания.Объект В(&СписокЗданий)
	|	И КВП_ПлощадиЗдания.Тип = &РасчетнаяПлощадьЗдания";
	
	ЗапросЗдания.УстановитьПараметр("СписокЗданий",           СписокЗданий);
	ЗапросЗдания.УстановитьПараметр("РасчетнаяПлощадьЗдания", РасчетнаяПлощадьЗдания);
	
	Возврат ЗапросЗдания.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуРасчетныхПлощадейЗданий()

// Получает таблицу с информацией о количестве зарегистрированных человек по списку л/с.
//
// Параметры:
//  СтруктураНастроек - Структура - структура параметров настроек.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с информацией о количестве зарегистрированных человек.
//
Функция ПолучитьТаблицуСКоличествомЗарегистрированных(СтруктураНастроек)
	
	ПериодПросмотра                      = СтруктураНастроек.ПериодПросмотра;
	СписокЛицевыхСчетов                  = СтруктураНастроек.СписокЛицевыхСчетов;
	УказыватьКоличествоПрожИЗарегЧислами = СтруктураНастроек.УказыватьКоличествоПрожИЗарегЧислами;
	
	Запрос = Новый Запрос();
	
	Если УказыватьКоличествоПрожИЗарегЧислами Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных КАК Количество
		|ИЗ
		|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&КонецМесяца, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК Количество
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			&КонецМесяца,
		|			ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И ДатаИзменения <= &КонецМесяца) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонецМесяца",         КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Индексы.Добавить("ЛицевойСчет");
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуСКоличествомЗарегистрированных()

// Получает таблицу с информацией о количестве проживающих человек по списку л/с.
//
// Параметры:
//  СтруктураНастроек - Структура - структура параметров настроек.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с информацией о количестве проживающих человек.
//
Функция ПолучитьТаблицуСКоличествомПроживающих(СтруктураНастроек)
	
	ПериодПросмотра                      = СтруктураНастроек.ПериодПросмотра;
	СписокЛицевыхСчетов                  = СтруктураНастроек.СписокЛицевыхСчетов;
	УказыватьКоличествоПрожИЗарегЧислами = СтруктураНастроек.УказыватьКоличествоПрожИЗарегЧислами;
	
	Запрос = Новый Запрос();
	
	Если УказыватьКоличествоПрожИЗарегЧислами Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих КАК Количество
		|ИЗ
		|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&КонецМесяца, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК Количество
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
		|			&КонецМесяца,
		|			ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И ДатаИзменения <= &КонецМесяца) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонецМесяца",         КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Индексы.Добавить("ЛицевойСчет");
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуСКоличествомПроживающих()

// Получает таблицу с информацией о собственности по списку помещений.
//
// Параметры:
//  СтруктураНастроек - Структура - структура параметров настроек.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с информацией о собственности.
//
Функция ПолучитьТаблицуСВидамиСобственностиПомещений(СтруктураНастроек)
	
	ПериодПросмотра = СтруктураНастроек.ПериодПросмотра;
	СписокПомещений = СтруктураНастроек.СписокПомещений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности КАК ТипСобственности
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&КонецМесяца, Помещение В (&СписокПомещений)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("КонецМесяца",     КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("СписокПомещений", СписокПомещений);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуСВидамиСобственностиПомещений()

// Получает таблицу с информацией о льготных категориях жильцов по списку л/с.
//
// Параметры:
//  СтруктураНастроек - Структура - структура параметров настроек.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с информацией о льготных категориях жильцов.
//
Функция ПолучитьТаблицуСЛьготнымиКатегориямиЖильцов(СтруктураНастроек)
	
	ПериодПросмотра     = СтруктураНастроек.ПериодПросмотра;
	СписокЛицевыхСчетов = СтруктураНастроек.СписокЛицевыхСчетов;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Проживающий
	|ПОМЕСТИТЬ втПроживающие
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|	И УПЖКХ_Жильцы.Владелец В(&СписокЛицевыхСчетов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Жилец,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория КАК ЛьготнаяКатегория
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&КонецМесяца,
	|			Проживающий В
	|					(ВЫБРАТЬ
	|						втПроживающие.Проживающий
	|					ИЗ
	|						втПроживающие КАК втПроживающие)
	|				И ДатаИзменения <= &КонецМесяца) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие";
	
	Запрос.УстановитьПараметр("КонецМесяца",         КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуСЛьготнымиКатегориямиЖильцов()

// Формирует таблицу с информацией о лицевых счетах с итогами по зданиям:
// 1. Суммарное количество проживающих
// 2. Суммарное количество зарегистрированных
// 3. Суммарную общую площадь
// 4. Суммарную жилую площадь.
//
// Параметры:
//  СтруктураНастроек - Структура - структура параметров настроек.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с базами распределения.
//
Функция ПолучитьТаблицуБазРаспределения(СтруктураНастроек) Экспорт
	
	ПериодПросмотра                      = СтруктураНастроек.ПериодПросмотра;
	СписокЗданий                         = СтруктураНастроек.СписокЗданий;
	УказыватьКоличествоПрожИЗарегЧислами = СтруктураНастроек.УказыватьКоличествоПрожИЗарегЧислами;
	
	СписокЛС        = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(СписокЗданий, НачалоМесяца(ПериодПросмотра), КонецМесяца(ПериодПросмотра));
	СписокПомещений = КВП_ПолучитьСписокПомещенийПоЗданиям(СписокЗданий);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, СписокЗданий.ВыгрузитьЗначения());
	
	СтруктураАргументовДляВременныхТаблицПоЖильцам = Новый Структура("ПериодПросмотра,
	                                                                 |СписокЛицевыхСчетов,
	                                                                 |УказыватьКоличествоПрожИЗарегЧислами",
	                                                                 ПериодПросмотра,
	                                                                 СписокЛС,
	                                                                 УказыватьКоличествоПрожИЗарегЧислами);
	
	ТаблицаКоличестваЗарегистрированных = ПолучитьТаблицуСКоличествомЗарегистрированных(СтруктураАргументовДляВременныхТаблицПоЖильцам);
	ТаблицаКоличестваПроживающих        = ПолучитьТаблицуСКоличествомПроживающих(СтруктураАргументовДляВременныхТаблицПоЖильцам);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаКоличестваЗарегистрированных.ЛицевойСчет КАК Справочник.КВП_ЛицевыеСчета) КАК ЛицевойСчет,
	|	ТаблицаКоличестваЗарегистрированных.Количество КАК КолвоЗарегистрированных
	|ПОМЕСТИТЬ втТаблицаКоличестваЗарегистрированных
	|ИЗ
	|	&ТаблицаКоличестваЗарегистрированных КАК ТаблицаКоличестваЗарегистрированных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаКоличестваПроживающих.ЛицевойСчет КАК Справочник.КВП_ЛицевыеСчета) КАК ЛицевойСчет,
	|	ТаблицаКоличестваПроживающих.Количество КАК КолвоПроживающих
	|ПОМЕСТИТЬ втТаблицаКоличестваПроживающих
	|ИЗ
	|	&ТаблицаКоличестваПроживающих КАК ТаблицаКоличестваПроживающих
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаКоличестваЗарегистрированных.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	СУММА(втТаблицаКоличестваЗарегистрированных.КолвоЗарегистрированных) КАК КолвоЗарегистрированных,
	|	0 КАК КолвоПроживающих
	|ПОМЕСТИТЬ втЖильцыБезГруппировки
	|ИЗ
	|	втТаблицаКоличестваЗарегистрированных КАК втТаблицаКоличестваЗарегистрированных
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаКоличестваЗарегистрированных.ЛицевойСчет.Адрес.Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втТаблицаКоличестваПроживающих.ЛицевойСчет.Адрес.Владелец,
	|	0,
	|	СУММА(втТаблицаКоличестваПроживающих.КолвоПроживающих)
	|ИЗ
	|	втТаблицаКоличестваПроживающих КАК втТаблицаКоличестваПроживающих
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаКоличестваПроживающих.ЛицевойСчет.Адрес.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыБезГруппировки.Здание КАК Здание,
	|	СУММА(втЖильцыБезГруппировки.КолвоЗарегистрированных) КАК КолвоЗарегистрированных,
	|	СУММА(втЖильцыБезГруппировки.КолвоПроживающих) КАК КолвоПроживающих
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	втЖильцыБезГруппировки КАК втЖильцыБезГруппировки
	|
	|СГРУППИРОВАТЬ ПО
	|	втЖильцыБезГруппировки.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЖильцыБезГруппировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТаблицаКоличестваЗарегистрированных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТаблицаКоличестваПроживающих
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.Владелец КАК Здание,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЖилаяПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|					И НЕ КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения.ОтноситсяКМОП
	|				ТОГДА ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПлощадьЖилыхНежилыхПомещений,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|					И (КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|						ИЛИ КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Дом)
	|						ИЛИ КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Апартамент))
	|				ТОГДА ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПлощадьЖилыхПомещений,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|					И КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения.ОтноситсяКМОП
	|				ТОГДА ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПлощадьМестОбщегоПользования
	|ПОМЕСТИТЬ втПлощади
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&Дата,
	|			Объект В (&СписокПомещений)
	|				И (ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|					ИЛИ ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь))) КАК КВП_ПлощадьПомещенияСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втЖильцы.Здание, втПлощади.Здание) КАК Здание,
	|	СУММА(ЕСТЬNULL(втЖильцы.КолвоЗарегистрированных, 0)) КАК КолвоЗарегистрированных,
	|	СУММА(ЕСТЬNULL(втЖильцы.КолвоПроживающих, 0)) КАК КолвоПроживающих,
	|	СУММА(ЕСТЬNULL(втПлощади.ОбщаяПлощадь, 0)) КАК ОбщаяПлощадь,
	|	СУММА(ЕСТЬNULL(втПлощади.ЖилаяПлощадь, 0)) КАК ЖилаяПлощадь,
	|	СУММА(ЕСТЬNULL(втПлощади.ПлощадьЖилыхНежилыхПомещений, 0)) КАК ПлощадьЖилыхНежилыхПомещений,
	|	СУММА(ЕСТЬNULL(втПлощади.ПлощадьЖилыхПомещений, 0)) КАК ПлощадьЖилыхПомещений,
	|	СУММА(ЕСТЬNULL(втПлощади.ПлощадьМестОбщегоПользования, 0)) КАК ПлощадьМестОбщегоПользования,
	|	СУММА(ЕСТЬNULL(втПлощади.ПлощадьЖилыхНежилыхПомещений, 0) + ЕСТЬNULL(втПлощади.ПлощадьМестОбщегоПользования, 0)) КАК ПлощадьОбщая
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втЖильцы КАК втЖильцы
	|		ПОЛНОЕ СОЕДИНЕНИЕ втПлощади КАК втПлощади
	|		ПО втЖильцы.Здание = втПлощади.Здание
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втЖильцы.Здание, втПлощади.Здание)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПлощади
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.Здание КАК Здание,
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.РасчетныйСчетУслугКапитальногоРемонта КАК РасчетныйСчетКапРемонт
	|ПОМЕСТИТЬ втРасчетныеСчетаКапРемонт
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.СрезПоследних(
	|			&Дата,
	|			Здание В
	|				(ВЫБРАТЬ
	|					втИтоговая.Здание
	|				ИЗ
	|					втИтоговая КАК втИтоговая)) КАК УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.Здание КАК Здание,
	|	втИтоговая.Здание.Код КАК КодЗдания,
	|	втИтоговая.Здание.Наименование КАК НаименованиеЗдания,
	|	втИтоговая.Здание.Подъездов КАК Подъездов,
	|	втИтоговая.Здание.Этажей КАК Этажей,
	|	втИтоговая.Здание.ГодПостройки КАК ГодПостройки,
	|	втИтоговая.Здание.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	|	втИтоговая.Здание.ТипСооружения КАК ТипСооружения,
	|	втИтоговая.Здание.Многоквартирное КАК Многоквартирное,
	|	втИтоговая.КолвоЗарегистрированных КАК КолвоЗарегистрированных,
	|	втИтоговая.КолвоПроживающих КАК КолвоПроживающих,
	|	втИтоговая.ОбщаяПлощадь КАК ОбщаяПлощадь,
	|	втИтоговая.ЖилаяПлощадь КАК ЖилаяПлощадь,
	|	втИтоговая.ПлощадьМестОбщегоПользования КАК ПлощадьОбщегоИмущества,
	|	втИтоговая.ПлощадьЖилыхНежилыхПомещений КАК ОбщаяПлощадьПомещений,
	|	втИтоговая.ПлощадьЖилыхПомещений КАК ОбщаяПлощадьЖилыхПомещений,
	|	втИтоговая.ПлощадьОбщая КАК ОбщаяПлощадьЗдания,
	|	втИтоговая.Здание.Этажей КАК ЭтажейВЗдании,
	|	ЕСТЬNULL(втРасчетныеСчетаКапРемонт.РасчетныйСчетКапРемонт, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)) КАК РасчетныйСчетКапРемонт,
	|	ЕСТЬNULL(КонтактнаяИнформация.Регион, """") КАК Регион,
	|	ЕСТЬNULL(КонтактнаяИнформация.Район, """") КАК Район,
	|	ЕСТЬNULL(КонтактнаяИнформация.Город, """") КАК Город,
	|	ЕСТЬNULL(КонтактнаяИнформация.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(КонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(КонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(КонтактнаяИнформация.Корпус, """") КАК Корпус,
	|	ЕСТЬNULL(КонтактнаяИнформация.Индекс, """") КАК Индекс
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО втИтоговая.Здание = КонтактнаяИнформация.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРасчетныеСчетаКапРемонт КАК втРасчетныеСчетаКапРемонт
	|		ПО втИтоговая.Здание = втРасчетныеСчетаКапРемонт.Здание";
	
	Запрос.УстановитьПараметр("Дата",            КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("СписокЛС",        СписокЛС);
	Запрос.УстановитьПараметр("СписокПомещений", СписокПомещений);
	Запрос.УстановитьПараметр("ТаблицаКоличестваЗарегистрированных", ТаблицаКоличестваЗарегистрированных);
	Запрос.УстановитьПараметр("ТаблицаКоличестваПроживающих", ТаблицаКоличестваПроживающих);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуБазРаспределения()

// Записывает в структуру с общими данными сведения о текущему плательщике.
//
// Параметры:
//  ОбщиеДанные - структура с общими данными
//  СтруктураНастроек - структура с пользовательскими настройками
//  СтруктураПлательщиков - структура с информацией о всех плательщиках отчета
//  СтрокаТаблицы - строка с информацией о текущем плательщике.
//
Процедура ПодготовитьСведенияОПлательщике(ОбщиеДанные, СтруктураНастроек, СтруктураПлательщиков, СтрокаТаблицы, СтруктураОбщихТаблиц) Экспорт
	
	ЛицевойСчет               = СтрокаТаблицы.ЛицевойСчет;
	Помещение                 = СтрокаТаблицы.Помещение;
	Подъезд                   = СтрокаТаблицы.Подъезд;
	Здание                    = СтрокаТаблицы.Здание;
	Организация               = СтруктураНастроек.Организация;
	ЖилойФондПомещения        = СтрокаТаблицы.ЖилойФондПомещения;
	НаименованиеЛицевогоСчета = СтрокаТаблицы.НаименованиеЛицевогоСчета;
	ВидМакета                 = СтруктураНастроек.ВидМакета;
	Макеты                    = Перечисления.УПЖКХ_ВидыПлатежныхДокументов;
	
	ОбщиеДанные.Вставить("ЛицевойСчет",                          ЛицевойСчет);
	ОбщиеДанные.Вставить("НаименованиеЛицевогоСчета",            НаименованиеЛицевогоСчета);
	ОбщиеДанные.Вставить("ЧисловойНомерЛицевогоСчета",           СократитьНаименованиеЛС(СокрЛП(НаименованиеЛицевогоСчета)));
	ОбщиеДанные.Вставить("Помещение",                            Помещение);
	ОбщиеДанные.Вставить("Подъезд",                              Подъезд);
	ОбщиеДанные.Вставить("Здание",                               Здание);
	ОбщиеДанные.Вставить("ИдентификаторЛС",                      СтрокаТаблицы["Идентификатор"]);
	ОбщиеДанные.Вставить("КодЛС",                                СтрокаТаблицы.КодЛицевогоСчета);
	ОбщиеДанные.Вставить("ЖилойФондПомещения",                   ЖилойФондПомещения);
	ОбщиеДанные.Вставить("ИдентификаторДляМобильногоПриложения", СтрокаТаблицы.ИдентификаторЖКХЛичныйКабинет);
	ОбщиеДанные.Вставить("ЕЛСвГИСЖКХОсн",                        СтрокаТаблицы.ЕЛСвГИСЖКХ);
	ОбщиеДанные.Вставить("ЕЛСвГИСЖКХКапРемонт",                  СтрокаТаблицы.ЕЛСвГИСЖКХКапРемонт);
	ОбщиеДанные.Вставить("ИдентификаторЖКУОсн",                  СтрокаТаблицы.ИдентификаторЖКУ);
	ОбщиеДанные.Вставить("ИдентификаторЖКУКапРемонт",            СтрокаТаблицы.ИдентификаторЖКУКапРемонт);
	ОбщиеДанные.Вставить("ИдентификаторПДОсн",                   СтрокаТаблицы.ИдентификаторПДОсн);
	ОбщиеДанные.Вставить("ИдентификаторПДКапРемонт",             СтрокаТаблицы.ИдентификаторПДКапРемонт);
	ОбщиеДанные.Вставить("ИдентификаторПДЕдиный",                СтрокаТаблицы.ИдентификаторПДЕдиный);
	
	Если ЖилойФондПомещения = Истина Тогда
		Если ВидМакета = Макеты.Москва679 Тогда
			ОбщиеДанные.Вставить("ТипФондаПомещенияШапка", "жилое");
			ОбщиеДанные.Вставить("ТипФондаПомещенияСиРЖилья", "ЖИЛОЕ");
		Иначе
			ОбщиеДанные.Вставить("ТипФондаПомещенияШапка", "жилого");
			ОбщиеДанные.Вставить("ТипФондаПомещенияСиРЖилья", "ЖИЛОГО");
		КонецЕсли;
	Иначе
		Если ВидМакета = Макеты.Москва679 Тогда
			ОбщиеДанные.Вставить("ТипФондаПомещенияШапка", "нежилое");
			ОбщиеДанные.Вставить("ТипФондаПомещенияСиРЖилья", "НЕЖИЛОЕ");
		Иначе
			ОбщиеДанные.Вставить("ТипФондаПомещенияШапка", "нежилого");
			ОбщиеДанные.Вставить("ТипФондаПомещенияСиРЖилья", "НЕЖИЛОГО");
		КонецЕсли;
	КонецЕсли;
	
	// Адрес по текущему л/с.
	АдресДома = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(Здание);
	Адрес     = ПолучитьАдресПомещения(АдресДома, Помещение);
	
	Отбор        = Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета);
	СтрокиАдреса = ЛицевойСчет.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если СтрокиАдреса.Количество() > 0 Тогда
		АдресДома = СтрокиАдреса[0].Представление;
		Адрес     = Адрес + " (адрес доставки: " + АдресДома + ")";
	КонецЕсли;
	ОбщиеДанные.Вставить("Адрес", Адрес);
	
	// ФИО ответственного собственника л/с.
	СтрокаВладельца = СтруктураПлательщиков.ТаблицаВладельцев.Найти(ЛицевойСчет, "ЛицевойСчет");
	Если СтрокаВладельца = Неопределено Тогда
		
		ОбщиеДанные.Вставить("ФИО",                            "");
		ОбщиеДанные.Вставить("ФИОСтрока",                      "");
		ОбщиеДанные.Вставить("ВладелецЖилец",                  Ложь);
		ОбщиеДанные.Вставить("ВладелецФизЛицо",                Справочники.ФизическиеЛица.ПустаяСсылка());
		ОбщиеДанные.Вставить("ТелефонВладельцаЖильца",         "");
		ОбщиеДанные.Вставить("ИННВладельцаЖильца",             "");
		ОбщиеДанные.Вставить("ДатаРожденияВладельца",          Дата(1,1,1));
		ОбщиеДанные.Вставить("СтраховойНомерПФРВладельца",     "");
		ОбщиеДанные.Вставить("ФамилияОтветственного",          "");
		ОбщиеДанные.Вставить("ИмяОтветственного",              "");
		ОбщиеДанные.Вставить("ОтчествоОтветственного",         "");
		ОбщиеДанные.Вставить("ОтветственныйКонтрагентФизЛицо", Ложь);
		
	Иначе
		
		ОбщиеДанные.Вставить("ФИО",                        СтрокаВладельца.Владелец);
		ОбщиеДанные.Вставить("ФИОСтрока",                  СтрокаВладельца.НаименованиеВладельца);
		ОбщиеДанные.Вставить("ВладелецЖилец",              СтрокаВладельца.ВладелецЖилец);
		ОбщиеДанные.Вставить("ВладелецФизЛицо",            СтрокаВладельца.ВладелецФизЛицо);
		ОбщиеДанные.Вставить("ТелефонВладельцаЖильца",     СтрокаВладельца.ТелефонВладельцаЖильца);
		ОбщиеДанные.Вставить("ИННВладельцаЖильца",         СтрокаВладельца.ИННВладельцаЖильца);
		ОбщиеДанные.Вставить("ДатаРожденияВладельца",      СтрокаВладельца.ДатаРожденияВладельца);
		ОбщиеДанные.Вставить("СтраховойНомерПФРВладельца", СтрокаВладельца.СтраховойНомерПФРВладельца);
		ОбщиеДанные.Вставить("ОтветственныйКонтрагентФизЛицо", СтрокаВладельца.ОтветственныйКонтрагентФизЛицо);
		
		Если СтрокаВладельца.ОтветственныйКонтрагентФизЛицо Тогда
			ФИОСтруктура = РазделитьФИО(СокрЛП(ОбщиеДанные.ФИО));
			ОбщиеДанные.Вставить("ФамилияОтветственного",  ФИОСтруктура.Фамилия);
			ОбщиеДанные.Вставить("ИмяОтветственного",      ФИОСтруктура.Имя);
			ОбщиеДанные.Вставить("ОтчествоОтветственного", ФИОСтруктура.Отчество);
		ИначеЕсли СтрокаВладельца.ВладелецЖилец Тогда
			ОбщиеДанные.Вставить("ФамилияОтветственного",  СтрокаВладельца.ФамилияЖильца);
			ОбщиеДанные.Вставить("ИмяОтветственного",      СтрокаВладельца.ИмяЖильца);
			ОбщиеДанные.Вставить("ОтчествоОтветственного", СтрокаВладельца.ОтчествоЖильца);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщиеДанные.Вставить("АдресЭлектроннойПочты", УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовСервер.ПолучитьАдресЭлектроннойПочтыЛицевогоСчета(ЛицевойСчет, СтрокаВладельца.Владелец, СтрокаТаблицы.АдресЭлектроннойПочты));
	
	// Сведения о р/с фонда кап. ремонта.
	СтрокаРС = СтруктураОбщихТаблиц.ТаблицаРСКапРемонт.Найти(Здание, "Здание");
	Если Не СтрокаРС = Неопределено Тогда
		ОбщиеДанные.Вставить("ВладелецСчетаКР",              СтрокаРС.ВладелецСчета);
		ОбщиеДанные.Вставить("НаименованиеВладельцаСчетаКР", СтрокаРС.ВладелецНаименование);
		ОбщиеДанные.Вставить("КодВладельцаСчетаКР",          СтрокаРС.ВладелецКод);
		ОбщиеДанные.Вставить("ИННВладельцаСчетаКР",          СтрокаРС.ВладелецИНН);
		ОбщиеДанные.Вставить("КППВладельцаСчетаКР",          СтрокаРС.ВладелецКПП);
		ОбщиеДанные.Вставить("РасчетныйСчетКР",              СтрокаРС.РасчетныйСчет);
		ОбщиеДанные.Вставить("БанкКР",                       СтрокаРС.Банк);
		ОбщиеДанные.Вставить("КоррСчетКР",                   СтрокаРС.КоррСчет);
		ОбщиеДанные.Вставить("БИККР",                        СтрокаРС.БИК);
		ОбщиеДанные.Вставить("ДопИнформацияИсполнителяКР",   СтрокаРС.ДопИнформация);
		ОбщиеДанные.Вставить("ЮрАдресИсполнителяКР",         СтрокаРС.ЮрАдрес);
		ОбщиеДанные.Вставить("ТелефонИсполнителяКР",         СтрокаРС.Телефон);
		ОбщиеДанные.Вставить("ЭлЯщикПолучателяКР",           СтрокаРС.ЭлПочта);
		
	Иначе
		ОбщиеДанные.Вставить("ВладелецСчетаКР",              "");
		ОбщиеДанные.Вставить("НаименованиеВладельцаСчетаКР", "");
		ОбщиеДанные.Вставить("КодВладельцаСчетаКР",          "");
		ОбщиеДанные.Вставить("ИННВладельцаСчетаКР",          "");
		ОбщиеДанные.Вставить("КППВладельцаСчетаКР",          "");
		ОбщиеДанные.Вставить("РасчетныйСчетКР",              "");
		ОбщиеДанные.Вставить("БанкКР",                       "");
		ОбщиеДанные.Вставить("КоррСчетКР",                   "");
		ОбщиеДанные.Вставить("БИККР",                        "");
		ОбщиеДанные.Вставить("ДопИнформацияИсполнителяКР",   "");
		ОбщиеДанные.Вставить("ЮрАдресИсполнителяКР",         "");
		ОбщиеДанные.Вставить("ТелефонИсполнителяКР",         "");
		ОбщиеДанные.Вставить("ЭлЯщикПолучателяКР",           "");
	КонецЕсли;
	
	// Сведения о р/с зданий:
	СтрокаРС = СтруктураОбщихТаблиц.ТаблицаРСЗданий.Найти(Здание, "Здание");
	
	Если Не СтрокаРС = Неопределено Тогда
		Если Организация = СтрокаРС.ВладелецСчета Тогда
			ОбщиеДанные.Вставить("РасчетныйСчет", СтрокаРС.РасчетныйСчет);
			ОбщиеДанные.Вставить("Банк",          СтрокаРС.Банк);
			ОбщиеДанные.Вставить("КоррСчет",      СтрокаРС.КоррСчет);
			ОбщиеДанные.Вставить("БИК",           СтрокаРС.БИК);
			ОбщиеДанные.Вставить("РасчетныйСчетСсылка", СтрокаРС.РасчетныйСчетСсылка);
		Иначе
			ОбщиеДанные.Вставить("РасчетныйСчет", Организация.ОсновнойБанковскийСчет.НомерСчета);
			ОбщиеДанные.Вставить("Банк",          Организация.ОсновнойБанковскийСчет.Банк.Наименование);
			ОбщиеДанные.Вставить("КоррСчет",      Организация.ОсновнойБанковскийСчет.Банк.КоррСчет);
			ОбщиеДанные.Вставить("БИК",           Организация.ОсновнойБанковскийСчет.Банк.Код);
			ОбщиеДанные.Вставить("РасчетныйСчетСсылка", Организация.ОсновнойБанковскийСчет);
		КонецЕсли;
	Иначе
		ОбщиеДанные.Вставить("РасчетныйСчет",       "");
		ОбщиеДанные.Вставить("Банк",                "");
		ОбщиеДанные.Вставить("КоррСчет",            "");
		ОбщиеДанные.Вставить("БИК",                 "");
		ОбщиеДанные.Вставить("РасчетныйСчетСсылка", Неопределено);
	КонецЕсли;
	
	// Размеры площадей помещения.
	ОтборПлощадь = Новый Структура;
	ОтборПлощадь.Вставить("Помещение",   Помещение);
	ОтборПлощадь.Вставить("ЛицевойСчет", ЛицевойСчет);
	ОтборПлощадь.Вставить("ВидПлощади",  Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
	
	СтрокиОбщейПлощади       = СтруктураПлательщиков.ТаблицаПлощадей.НайтиСтроки(ОтборПлощадь);
	ЕстьДанныеОбОбщейПлощади = СтрокиОбщейПлощади.Количество() > 0;
	
	ОбщиеДанные.Вставить("ОбщаяПлощадьБезДоли", ?(ЕстьДанныеОбОбщейПлощади, Окр(СтрокиОбщейПлощади.Получить(0).РазмерПлощади, 2), 0));
	ОбщиеДанные.Вставить("ОбщаяПлощадь",        ?(ЕстьДанныеОбОбщейПлощади, Окр(СтрокиОбщейПлощади.Получить(0).РазмерПлощадиДоля, 2), 0));
	
	// Эта площадь будет использоваться в ПД для Чувашии для подстановки в качестве объема потребления для услуг, которые относятся к содержанию общего исущества (СОИ).
	// Также для СОИ на основе этой площади будет перерасчитываться тариф: Начислено / Площадь.
	ОбщиеДанные.Вставить("ОбщаяПлощадьДляСОИ", ?(НЕ ЕстьДанныеОбОбщейПлощади, 0, СтрокиОбщейПлощади.Получить(0).РазмерПлощадиДоля));
	
	// Эта единица измерения будет подставляться в качестве единицы измерения для СОИ в ПД для Чувашии.
	Если Не ОбщиеДанные.Свойство("КвадратныеМетры") Тогда
		КвадратныеМетры = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("м2");
		ОбщиеДанные.Вставить("КвадратныеМетры", КвадратныеМетры);
	КонецЕсли;
	
	ОтборПлощадь.ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь;
	
	СтрокиЖилойПлощади        = СтруктураПлательщиков.ТаблицаПлощадей.НайтиСтроки(ОтборПлощадь);
	ЕстьСведенияОЖилойПлощади = СтрокиЖилойПлощади.Количество() > 0;
	
	ОбщиеДанные.Вставить("ЖилаяПлощадьБезДоли", ?(ЕстьСведенияОЖилойПлощади, Окр(СтрокиЖилойПлощади.Получить(0).РазмерПлощади, 2), 0));
	ОбщиеДанные.Вставить("ЖилаяПлощадь",        ?(ЕстьСведенияОЖилойПлощади, Окр(СтрокиЖилойПлощади.Получить(0).РазмерПлощадиДоля, 2), 0));
	
	// Количество жильцов.
	СтрокаЗарегистрированных = СтруктураПлательщиков.ТаблицаЗарегистрированных.Найти(ЛицевойСчет, "ЛицевойСчет");
	ОбщиеДанные.Вставить("КоличествоЗарегистрированных", ?(СтрокаЗарегистрированных = Неопределено, 0, СтрокаЗарегистрированных.Количество));
	
	СтрокаПроживающих = СтруктураПлательщиков.ТаблицаПроживающих.Найти(ЛицевойСчет, "ЛицевойСчет");
	ОбщиеДанные.Вставить("КоличествоПроживающих", ?(СтрокаПроживающих = Неопределено, 0, СтрокаПроживающих.Количество));
	
	// Если ведется учет жильцов готовыми числами, тогда нельзя в проргамме найти количество временно
	// проживающих и отсутствующих. Поэтому необходимо формировать заголовок параметра и значение самого параметра
	// согласно данной схемы.
	Если СтруктураНастроек.УказыватьКоличествоПрожИЗарегЧислами Тогда
		ОбщиеДанные.Вставить("ЗаголовокКоличествоПроживающих", "");
		ОбщиеДанные.Вставить("СтрокаКоличествоПроживающих",    ОбщиеДанные.КоличествоПроживающих);
		ОбщиеДанные.Вставить("КоличествоПроживающихВр",        0);
		ОбщиеДанные.Вставить("КоличествоОтсутствующихВр",      0);
	Иначе
		ОбщиеДанные.Вставить("ЗаголовокКоличествоПроживающих", "пост. / врем. / врем. отсут.: ");
		
		Если ОбщиеДанные.КоличествоЗарегистрированных > ОбщиеДанные.КоличествоПроживающих Тогда
			ОбщиеДанные.Вставить("КоличествоПроживающихВр",   0);
			ОбщиеДанные.Вставить("КоличествоОтсутствующихВр", ОбщиеДанные.КоличествоЗарегистрированных - ОбщиеДанные.КоличествоПроживающих);
		Иначе
			ОбщиеДанные.Вставить("КоличествоПроживающихВр",   ОбщиеДанные.КоличествоПроживающих - ОбщиеДанные.КоличествоЗарегистрированных);
			ОбщиеДанные.Вставить("КоличествоОтсутствующихВр", 0);
		КонецЕсли;
		
		СтрокаКоличествоПроживающих = "" + ОбщиеДанные.КоличествоПроживающих
								 + " / " + ОбщиеДанные.КоличествоПроживающихВр
								 + " / " + ОбщиеДанные.КоличествоОтсутствующихВр;
		
		ОбщиеДанные.Вставить("СтрокаКоличествоПроживающих", СтрокаКоличествоПроживающих);
		
	КонецЕсли;
	
	// Тип собственности помещения.
	СтрокаСобственности = СтруктураПлательщиков.ТаблицаСобственности.Найти(Помещение, "Помещение");
	ОбщиеДанные.Вставить("ТипСобственности", ?(СтрокаСобственности = Неопределено, "", СтрокаСобственности.ТипСобственности));
	ОбщиеДанные.Вставить("ТипПомещения",     СтрокаТаблицы.ТипПомещения);
	
	// Льготные категории по текущему л/с.
	ОбщиеДанные.Вставить("ЛьготныеКатегории",    ПолучитьСписокЛьготныхКатегорииПоЛС(СтруктураПлательщиков, ЛицевойСчет));
	ОбщиеДанные.Вставить("КоличествоЛьготников", ПолучитьКоличествоЛьготниковПоЛС(СтруктураПлательщиков, ЛицевойСчет));
	
	ОбщиеДанные.Вставить("ТаблицаСведений", СтруктураПлательщиков.ТаблицаСведений);
	
	// Итоговые показатели по текущему зданию.
	СтрокаСведений = СтруктураПлательщиков.ТаблицаСведений.Найти(Здание, "Здание");
	Если Не СтрокаСведений = Неопределено Тогда
		ОбщиеДанные.Вставить("ОбщаяПлощадьЗдания",         СтрокаСведений.ОбщаяПлощадьЗдания);
		ОбщиеДанные.Вставить("ОбщаяПлощадьПомещений",      СтрокаСведений.ОбщаяПлощадьПомещений);
		ОбщиеДанные.Вставить("ОбщаяПлощадьЖилыхПомещений", СтрокаСведений.ОбщаяПлощадьЖилыхПомещений);
		ОбщиеДанные.Вставить("ПлощадьОбщегоИмущества",     СтрокаСведений.ПлощадьОбщегоИмущества);
		ОбщиеДанные.Вставить("КолвоЭтажейВЗдании",         СтрокаСведений.ЭтажейВЗдании);
		ОбщиеДанные.Вставить("КолвоПроживающихВЗдании",    СтрокаСведений.КолвоПроживающих);
	Иначе
		ОбщиеДанные.Вставить("ОбщаяПлощадьЗдания",         0);
		ОбщиеДанные.Вставить("ОбщаяПлощадьПомещений",      0);
		ОбщиеДанные.Вставить("ОбщаяПлощадьЖилыхПомещений", 0);
		ОбщиеДанные.Вставить("ПлощадьОбщегоИмущества",     0);
		ОбщиеДанные.Вставить("КолвоЭтажейВЗдании",         0);
		ОбщиеДанные.Вставить("КолвоПроживающихВЗдании",    0);
	КонецЕсли;
	
	// Расчетная площадь помещения и здания.
	Если СтруктураНастроек.ВыводитьРасчетнуюПлощадь Тогда
		ОбщиеДанные.Вставить("ТекстПлощадьСокращенный", "расч.");
		ОбщиеДанные.Вставить("ТекстПлощадьПолный",      "расчетная");
		ОбщиеДанные.Вставить("ТекстПлощадь",            "Расчетная");
		
		СтрокаРасчетнаяПлощадьПомещения = СтруктураПлательщиков.ТаблицаРасчетныхПлощадейПомещений.Найти(Помещение, "Помещение");
		ОбщиеДанные.ОбщаяПлощадь = ?(СтрокаРасчетнаяПлощадьПомещения = Неопределено, 0, СтрокаРасчетнаяПлощадьПомещения.Площадь);
		
		СтрокаРасчетнаяПлощадьЗдания = СтруктураПлательщиков.ТаблицаРасчетныхПлощадейЗданий.Найти(Здание, "Здание");
		ОбщиеДанные.ОбщаяПлощадьЗдания = ?(СтрокаРасчетнаяПлощадьЗдания = Неопределено, 0, СтрокаРасчетнаяПлощадьЗдания.Площадь);
		ОбщиеДанные.Вставить("ОбщаяПлощадьПомещенийЧувашия", ?(СтрокаРасчетнаяПлощадьЗдания = Неопределено, 0, СтрокаРасчетнаяПлощадьЗдания.Площадь));
	Иначе
		ОбщиеДанные.Вставить("ТекстПлощадьСокращенный",      "общ.");
		ОбщиеДанные.Вставить("ТекстПлощадьПолный",           "общая");
		ОбщиеДанные.Вставить("ТекстПлощадь",                 "Общая");
		ОбщиеДанные.Вставить("ОбщаяПлощадьПомещенийЧувашия", ОбщиеДанные.ОбщаяПлощадьПомещений);
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСведенияОПлательщике()

// Получает количество льготников по лицевому счету.
//
Функция ПолучитьКоличествоЛьготниковПоЛС(СтруктураПлательщиков, ЛицевойСчет)
	
	СтрокиЛьготников = СтруктураПлательщиков.ТаблицаЛьготников.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет));
	
	Возврат СтрокиЛьготников.Количество();
	
КонецФункции

// Формирует строку с информацией о льготных категориях по текущему л/с.
//
// Параметры:
//  СтруктураПлательщиков - структура с информацией о всех плательщиках отчета
//  ЛицевойСчет - текущий л/с.
//
// Возвращаемое значение:
//  Строка - строка с информацией о льготных категориях по текущему л/с.
//
Функция ПолучитьСписокЛьготныхКатегорииПоЛС(СтруктураПлательщиков, ЛицевойСчет)
	
	ЛьготныеКатегории = "";
	
	СтрокиЛьготныхКатегорий  = СтруктураПлательщиков.ТаблицаЛьготников.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет));
	ТаблицаЛьготников        = СтруктураПлательщиков.ТаблицаЛьготников.Скопировать(СтрокиЛьготныхКатегорий);
	ТаблицаЛьготныхКатегорий = ТаблицаЛьготников.Скопировать(, "ЛьготнаяКатегория");
	
	ТаблицаЛьготныхКатегорий.Свернуть("ЛьготнаяКатегория");
	
	Для Каждого СтрокаЛьготнойКатегории Из ТаблицаЛьготныхКатегорий Цикл
		СтрокиЛьготнойКатегории = ТаблицаЛьготников.НайтиСтроки(Новый Структура("ЛьготнаяКатегория", СтрокаЛьготнойКатегории.ЛьготнаяКатегория));
		
		КоличествоЛьгот            = СтрокиЛьготнойКатегории.Количество();
		ПредставлениеТекущейЛьготы = "" + СтрокаЛьготнойКатегории.ЛьготнаяКатегория + "(" + КоличествоЛьгот + ")";
		ЛьготныеКатегории          = ЛьготныеКатегории + ?(ЛьготныеКатегории = "", ПредставлениеТекущейЛьготы, "; " + ПредставлениеТекущейЛьготы);
	КонецЦикла;
	
	ЛьготныеКатегории = ?(ЛьготныеКатегории = "", "-", ЛьготныеКатегории);
	
	Возврат ЛьготныеКатегории;
	
КонецФункции // ПолучитьСписокЛьготныхКатегорииПоЛС()

////////////////////////////////////////////////////////////////////////////////
// СВЕДЕНИЯ О НАЧИСЛЕНИЯХ

// Формирует структуру с таблицами данных о начислениях по всем лицевым счетам отчета.
//
// Параметры:
//  СтруктураНастроек - структура с пользовательскими настройками.
//
// Возвращаемое значение:
//  Структура - структура с таблицами.
//
Функция ПолучитьСтруктуруОбщихТаблиц(СтруктураНастроек) Экспорт
	
	ВидМакета = СтруктураНастроек.ВидМакета;
	Макеты    = Перечисления.УПЖКХ_ВидыПлатежныхДокументов;
	
	// Необходимо для корректной работы выгрузки на сайт ЖКХ с ручными настройками услуг, по которым нужно выгружать начисления.
	ОсобыеНастройкиВыгрузкиНачислений = СтруктураНастроек.Свойство("СписокУслугВыгружатьНачисленияОбщ");
	
	СтруктураОбщихТаблиц = Новый Структура;
	
	СтруктураОбщихТаблиц.Вставить("ТаблицаЗакрытыхЛС",                  ПолучитьТаблицуЗакрытыхЛС(СтруктураНастроек));
	
	// Таблица с зависимыми услугами и услугами-основаниями.
	СтруктураОбщихТаблиц.Вставить("ТаблицаЗависимыхУслуг",              ПолучитьТаблицуЗависимостиУслуг(КонецМесяца(СтруктураНастроек.ПериодПросмотра)));
	
	// Таблица с зависимыми услугами и услугами-основаниями.
	СтруктураОбщихТаблиц.Вставить("ТаблицаНазначенныхУслугОбщ",         ПолучитьТаблицуНазначенныхУслугНаЛицевыеСчета(СтруктураНастроек, СтруктураОбщихТаблиц));
	
	// Таблица с р/с здания и р/с фонда кап. ремонта по зданиям.
	СтруктураОбщихТаблиц.Вставить("ТаблицаРСЗданий",                    ПолучитьТаблицуРасчетныхСчетовОрганизацийОбсуживающихЗдания(СтруктураНастроек, Ложь));
	СтруктураОбщихТаблиц.Вставить("ТаблицаРСКапРемонт",                 ПолучитьТаблицуРасчетныхСчетовОрганизацийОбсуживающихЗдания(СтруктураНастроек, Истина));
	
	// Таблица с услугами, связанными в помощью регистра "Услуги общедомового счетчика".
	СтруктураОбщихТаблиц.Вставить("ТаблицаСвязанныхУслуг",              ПолучитьТаблицуСвязанныхУслуг());
	
	// Таблица с оплатами в разрезе лицевых счетов и видов услуг.
	СтруктураОбщихТаблиц.Вставить("ТаблицаОплатОбщПоВидамУслуг",        ПолучитьДанныеОбОплатах(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений));
	
	СтруктураОбщихТаблиц.Вставить("ТаблицаОплатОбщПоУслугам",           ПолучитьТаблицуОплатПоУслугам(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений));
	
	СтруктураОбщихТаблиц.Вставить("ТаблицаОплатОбщПоУслугамОсновные",   ПолучитьТаблицуОплатПоУслугамСОтбором(СтруктураОбщихТаблиц.ТаблицаОплатОбщПоУслугам, СтруктураНастроек.ТекущийСписокУслуг));
	
	СтруктураОбщихТаблиц.Вставить("ТаблицаОплатОбщПоУслугамКР",         ПолучитьТаблицуОплатПоУслугамСОтбором(СтруктураОбщихТаблиц.ТаблицаОплатОбщПоУслугам, СтруктураНастроек.СписокУслугКапРемонт));
	
	// Таблица с оплатами в разрезе только лицевых счетов по всем услугам.
	СтруктураОбщихТаблиц.Вставить("ТаблицаОплатОбщ",                    ПолучитьТаблицуОплатВРазрезеЛицевыхСчетов(СтруктураОбщихТаблиц.ТаблицаОплатОбщПоВидамУслуг));
	
	// Таблица с оплатами в разрезе только лицевых счетов только по тем услугам, на которые формируется основная квитанция.
	СтруктураОбщихТаблиц.Вставить("ТаблицаОплатОбщОсновные",            ПолучитьТаблицуОплатВРазрезеЛицевыхСчетов(СтруктураОбщихТаблиц.ТаблицаОплатОбщПоВидамУслуг, СтруктураНастроек.ТекущийСписокУслуг));
	
	// Таблица с оплатами в разрезе только лицевых счетов только по тем услугам, на которые формируется квитанция по капитальному ремонту.
	СтруктураОбщихТаблиц.Вставить("ТаблицаОплатОбщКР",                  ПолучитьТаблицуОплатВРазрезеЛицевыхСчетов(СтруктураОбщихТаблиц.ТаблицаОплатОбщПоВидамУслуг, СтруктураНастроек.СписокУслугКапРемонт));
	
	СтруктураОбщихТаблиц.Вставить("ТаблицаДатыПоследнихОплат",          ПолучитьТаблицуДатыПоследнихОплат(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений));
	
	// Таблица со счетчиками, установленными на все отчетные объекты учета (л/с, помещения, подъезды, здания).
	СтруктураОбщихТаблиц.Вставить("ТаблицаСчетчиковОбщ",                ПолучитьДанныеПоСчетчикам(СтруктураНастроек.Организация, СтруктураНастроек.ПериодПросмотра,
																								  СтруктураНастроек.СписокЛицевыхСчетов, СтруктураНастроек.ТаблицаОбъектов,
																								  СтруктураНастроек.СписокУслуг));
	
	// Получение кодов видов начислений для платежного документа "Плат. документ (приказ №454 в соответ. с пост. №354)"
	СтруктураОбщихТаблиц.Вставить("КодыВидовНачисленийОбщ",             ПолучитьКодыВидовНачисленийОбщ(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений));
	
	// Таблица со сведениями о начислениях.
	СтруктураОбщихТаблиц.Вставить("ТаблицаНачисленияОбщ",               ПолучитьТаблицуНачисления(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений, СтруктураОбщихТаблиц));
	
	// Кэш тарифов услуг лицевых счетов.
	СтруктураОбщихТаблиц.Вставить("КэшТарифовУслугЛицевыхСчетов",       ПолучитьКэшТарифовУслугЛицевыхСчетов(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений));
	
	// Таблица со сведениями о начислениях по добровольному страхованию.
	СтруктураОбщихТаблиц.Вставить("ТаблицаДобровольногоСтрахованияОбщ", ПолучитьТаблицуДобровольногоСтрахования(СтруктураНастроек.Организация,
																												СтруктураНастроек.ПериодПросмотра,
																												СтруктураНастроек.СписокЛицевыхСчетов,
																												СтруктураНастроек.СписокУслуг,
																												СтруктураНастроек.ВестиУчетНачисленийПоДобровольномуСтрахованию,
																												СтруктураНастроек.УслугаДобровольногоСтрахования));
	
	// Таблицу со сведениями о начислениях дополним сведениями об изменениях размеров площадей помещений и об изменениях количества жильцов.
	ДополнитьТаблицуНачисленийСУчетомСпособовРасчета(СтруктураОбщихТаблиц.ТаблицаНачисленияОбщ, СтруктураНастроек.Организация, СтруктураНастроек.ПериодПросмотра);
	
	// Таблица льгот, начисленных с установленным флагом "Не учитывать льготы во взаиморасчетах".
	Если СтруктураНастроек.ЛьготыСправочно Тогда
		СтруктураОбщихТаблиц.Вставить("ТаблицаЛьготСправочноОбщ",       ПолучитьТаблицуЛьготСправочно(СтруктураНастроек.Организация, СтруктураНастроек.ПериодПросмотра,
																									  СтруктураНастроек.СписокЛицевыхСчетов));
	КонецЕсли;
	
	// Таблица с расходом по счетчикам, установленным на отчетные объекты.
	СтруктураОбщихТаблиц.Вставить("ТаблицаРасходаПоСчетчикамОбщ",       ПолучитьТаблицуРасходаПоСчетчикамИКоммунальнымУслугамПоЗданиям(СтруктураНастроек, СтруктураОбщихТаблиц));
	
	// Дополним таблицу с начислениями
	ДополнитьТаблицуНачисленийУслугамиБезНачисленийСПоказаниямиПоИПУИСРасходомПоОПУ(СтруктураНастроек, СтруктураОбщихТаблиц);
	
	// Таблица с нормами, установленными как на лицевые счета, так и на здания.
	СтруктураОбщихТаблиц.Вставить("ТаблицаНормОбщ",                     ПолучитьТаблицуНорм(СтруктураНастроек.ПериодПросмотра, СтруктураНастроек.СписокЛицевыхСчетов, 
																					  СтруктураНастроек.СписокЗданий, СтруктураОбщихТаблиц.ТаблицаНачисленияОбщ));
	
	// Таблица с пенями в разрезе лицевых счетов и видов услуг.
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениОбщПоВидамУслуг",         ПолучитьДанныеОПени(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений));
	
	// Таблица с пенями в разрезе только лицевых счетов.
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениОбщ",                     ПолучитьТаблицуПениВРазрезеЛицевыхСчетов(СтруктураОбщихТаблиц.ТаблицаПениОбщПоВидамУслуг, СтруктураНастроек.СписокУслуг));
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениОбщОсновные",             ПолучитьТаблицуПениВРазрезеЛицевыхСчетов(СтруктураОбщихТаблиц.ТаблицаПениОбщПоВидамУслуг, СтруктураНастроек.ТекущийСписокУслуг));
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениОбщКР",                   ПолучитьТаблицуПениВРазрезеЛицевыхСчетов(СтруктураОбщихТаблиц.ТаблицаПениОбщПоВидамУслуг, СтруктураНастроек.СписокУслугКапРемонт));
	
	// Таблица с сальдо в разрезе лицевых счетов и видов услуг.
	СтруктураОбщихТаблиц.Вставить("ТаблицаСальдоОбщПоВидамУслуг",       ПолучитьДанныеОНачальномСальдо(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений));
	
	// Таблица с сальдо в разрезе только лицевых счетов.
	СтруктураОбщихТаблиц.Вставить("ТаблицаСальдоОбщ",                   ПолучитьТаблицуСальдоВРазрезеЛицевыхСчетов(СтруктураОбщихТаблиц.ТаблицаСальдоОбщПоВидамУслуг, СтруктураНастроек.СписокУслуг));
	СтруктураОбщихТаблиц.Вставить("ТаблицаСальдоОбщОсновные",           ПолучитьТаблицуСальдоВРазрезеЛицевыхСчетов(СтруктураОбщихТаблиц.ТаблицаСальдоОбщПоВидамУслуг, СтруктураНастроек.ТекущийСписокУслуг));
	СтруктураОбщихТаблиц.Вставить("ТаблицаСальдоОбщКР",                 ПолучитьТаблицуСальдоВРазрезеЛицевыхСчетов(СтруктураОбщихТаблиц.ТаблицаСальдоОбщПоВидамУслуг, СтруктураНастроек.СписокУслугКапРемонт));
	
	Если ВидМакета = "ОбменССайтомЖКХ4" Тогда
		СтруктураОбщихТаблиц.Вставить("ТаблицаКонНачСальдоОбщ",         ПолучитьТаблицуКонечногоИНачальногоСальдо(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений));
		СтруктураОбщихТаблиц.Вставить("ТаблицаКонНачСальдоОбщОсновные", ПолучитьТаблицуКонечногоИНачальногоСальдоПоУслугам(СтруктураОбщихТаблиц.ТаблицаКонНачСальдоОбщ, СтруктураНастроек.ТекущийСписокУслуг));
		СтруктураОбщихТаблиц.Вставить("ТаблицаКонНачСальдоОбщКр",       ПолучитьТаблицуКонечногоИНачальногоСальдоПоУслугам(СтруктураОбщихТаблиц.ТаблицаКонНачСальдоОбщ, СтруктураНастроек.СписокУслугКапРемонт));
	КонецЕсли;
	
	// Таблица со сведениями о перерасчетах.
	СтруктураОбщихТаблиц.Вставить("ТаблицаПерерасчетовОбщ",             ПолучитьТаблицуПерерасчетов(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений));
	
	СтруктураОбщихТаблиц.Вставить("ТаблицаИтоговыхСуммПоУслугамОбщ",    ПолучитьОбщиеИтоговыеСуммыПоУслугам(СтруктураНастроек, СтруктураОбщихТаблиц));
	
	// Таблица со сведениями о поставщиках услуг.
	СтруктураОбщихТаблиц.Вставить("ТаблицаПоставщиковОбщ",              ПолучитьТаблицуПоставщиков(СтруктураНастроек, СтруктураОбщихТаблиц));
	
	// Таблица л/с в разрезе зданий.
	СтруктураОбщихТаблиц.Вставить("ТаблицаЛицевыхСчетовПоЗданиям",      КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(СтруктураНастроек.СписокЗданий, КонецМесяца(СтруктураНастроек.ПериодПросмотра), , , Истина));
	
	// Таблица со сведениями о рассрочке.
	Если ВидМакета = Макеты.СтандартныйКР
	 Или ВидМакета = Макеты.Стандартный
	 Или ВидМакета = Макеты.Чебоксары
	 Или ВидМакета = Макеты.Москва
	 Или ВидМакета = Макеты.Москва679
	 Или ВидМакета = Макеты.Стандартный43Пр
	 Или ВидМакета = "ОбменССайтомЖКХ4" Тогда
		СтруктураОбщихТаблиц.Вставить("ТаблицаРассрочкиОбщ",            ПолучитьТаблицуРассрочки(СтруктураНастроек.Организация, СтруктураНастроек.ПериодПросмотра,  СтруктураНастроек.СписокЛицевыхСчетов,
																					  ?(ОсобыеНастройкиВыгрузкиНачислений, СтруктураНастроек.СписокУслугВыгружатьНачисленияОбщ, СтруктураНастроек.СписокУслуг)));
	КонецЕсли;
	
	Если ВидМакета = Макеты.ПермскийКрай Тогда
		СтруктураОбщихТаблиц.Вставить("БазаРаспределенияПоУслугамОбщ",  ПолучитьБазуРаспределенияПермь(СтруктураОбщихТаблиц, СтруктураНастроек));
		СтруктураОбщихТаблиц.Вставить("ТаблицаУслугДляПерми",           ПолучитьТаблицуУслугПермь(СтруктураОбщихТаблиц.ТаблицаНазначенныхУслугОбщ));
	КонецЕсли;
	
	// Таблица со сведениями о количестве льготников.
	СтруктураОбщихТаблиц.Вставить("ТаблицаКоличестваЛьготОбщ",          ПолучитьТаблицуКоличестваЛьготников(СтруктураНастроек.ПериодПросмотра, СтруктураНастроек.СписокЛицевыхСчетов));
	
	// Таблица услуг общедомового счетчика.
	СтруктураОбщихТаблиц.Вставить("ТаблицаУслугКПУ",                    ПолучитьТаблицуУслугКПУ());
	
	Возврат СтруктураОбщихТаблиц;
	
КонецФункции // ПолучитьСтруктуруОбщихТаблиц()

// Функция получает данные по назначенным услугам.
//
// Параметры:
//  СтруктураНастроек - структура с пользовательскими настройками.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьТаблицуНазначенныхУслугНаЛицевыеСчета(СтруктураНастроек, СтруктураОбщихТаблиц)
	
	Организация           = СтруктураНастроек.Организация;
	Период                = КонецМесяца(СтруктураНастроек.ПериодПросмотра);
	СписокЛицевыхСчетов   = СтруктураНастроек.СписокЛицевыхСчетов;
	СписокУслуг           = СтруктураНастроек.СписокУслуг;
	ТаблицаЗависимыхУслуг = СтруктураОбщихТаблиц.ТаблицаЗависимыхУслуг;
	ТаблицаОбъектов       = СтруктураНастроек.ТаблицаОбъектов;
	
	СписокУслугКапРемонт = СтруктураНастроек.СписокУслугКапРемонт;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЗависимыхУслуг.Объект КАК Объект,
	|	ВЫРАЗИТЬ(ТаблицаЗависимыхУслуг.Услуга КАК Справочник.КВП_Услуги) КАК Услуга
	|ПОМЕСТИТЬ врТаблицаЗависимыхУслуг
	|ИЗ
	|	&ТаблицаЗависимыхУслуг КАК ТаблицаЗависимыхУслуг
	|ГДЕ
	|	ТаблицаЗависимыхУслуг.Услуга В(&СписокУслуг)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаОбъектов.Здание КАК Здание
	|ПОМЕСТИТЬ врТаблицаОбъектов
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врТаблицаОбъектов.Здание КАК Здание,
	|	ВЫРАЗИТЬ(врТаблицаОбъектов.ЛицевойСчет КАК Справочник.КВП_ЛицевыеСчета) КАК ЛицевойСчет,
	|	врТаблицаЗависимыхУслуг.Услуга КАК Услуга,
	|	врТаблицаЗависимыхУслуг.Услуга.ВидУслуги КАК ВидУслуги
	|ПОМЕСТИТЬ врТаблицаОбъектовСЗависимымиУслугами
	|ИЗ
	|	врТаблицаОбъектов КАК врТаблицаОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТаблицаЗависимыхУслуг КАК врТаблицаЗависимыхУслуг
	|		ПО врТаблицаОбъектов.Здание = врТаблицаЗависимыхУслуг.Объект
	|ГДЕ
	|	НЕ врТаблицаЗависимыхУслуг.Объект = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
	|	И &УказыватьЗависимостьУслугВРазрезеЗданий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врТаблицаОбъектов.Здание,
	|	врТаблицаОбъектов.ЛицевойСчет,
	|	врТаблицаЗависимыхУслуг.Услуга,
	|	врТаблицаЗависимыхУслуг.Услуга.ВидУслуги
	|ИЗ
	|	врТаблицаЗависимыхУслуг КАК врТаблицаЗависимыхУслуг,
	|	врТаблицаОбъектов КАК врТаблицаОбъектов
	|ГДЕ
	|	врТаблицаЗависимыхУслуг.Объект = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
	|	И &УказыватьЗависимостьУслугВРазрезеЗданий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врТаблицаОбъектов.Здание,
	|	врТаблицаОбъектов.ЛицевойСчет,
	|	врТаблицаЗависимыхУслуг.Услуга,
	|	врТаблицаЗависимыхУслуг.Услуга.ВидУслуги
	|ИЗ
	|	врТаблицаЗависимыхУслуг КАК врТаблицаЗависимыхУслуг,
	|	врТаблицаОбъектов КАК врТаблицаОбъектов
	|ГДЕ
	|	НЕ &УказыватьЗависимостьУслугВРазрезеЗданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги КАК ВидУслуги,
	|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый КАК ВидУслугиНовый,
	|	ВЫРАЗИТЬ(КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый.Наименование КАК СТРОКА(100)) КАК НаименованиеВидаУслуги
	|ПОМЕСТИТЬ втВидыУслугДляЗаменыВКвитанции
	|ИЗ
	|	РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга КАК Услуга,
	|	ЕСТЬNULL(втВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый, КВП_НазначенныеНачисленияСрезПоследних.Услуга.ВидУслуги) КАК ВидУслуги,
	|	ЕСТЬNULL(втВидыУслугДляЗаменыВКвитанции.НаименованиеВидаУслуги, ВЫРАЗИТЬ(КВП_НазначенныеНачисленияСрезПоследних.Услуга.ВидУслуги.Наименование КАК СТРОКА(100))) КАК НаименованиеВидаУслуги,
	|	ЕСТЬNULL(втВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый.ЕдиницаИзмерения, КВП_НазначенныеНачисленияСрезПоследних.Услуга.ВидУслуги.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга.СпособРасчета КАК СпособРасчета,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга.НастройкаОграниченияОДННормативом КАК НастройкаОграниченияОДННормативом,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга.ИспользоватьФормулу15 КАК ИспользоватьФормулу15,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес КАК Помещение,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес.Подъезд КАК Подъезд,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес.Владелец КАК Здание,
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует КАК Действует,
	|	ВЫБОР
	|		КОГДА КВП_НазначенныеНачисленияСрезПоследних.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоКоммунальнаяУслуга,
	|	ВЫБОР
	|		КОГДА КВП_НазначенныеНачисленияСрезПоследних.Услуга В (&СписокУслугКапРемонт)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСведенияПоКапРемонту
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&КонецПериода,
	|			Объект В (&СписокЛицевыхСчетов)
	|				И Организация = &Организация
	|				И Услуга В (&СписокУслуг)
	|				И ДатаИзменения < &КонецПериода) КАК КВП_НазначенныеНачисленияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВидыУслугДляЗаменыВКвитанции КАК втВидыУслугДляЗаменыВКвитанции
	|		ПО КВП_НазначенныеНачисленияСрезПоследних.Услуга.ВидУслуги = втВидыУслугДляЗаменыВКвитанции.ВидУслуги
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	врТаблицаОбъектовСЗависимымиУслугами.ЛицевойСчет,
	|	врТаблицаОбъектовСЗависимымиУслугами.Услуга,
	|	ЕСТЬNULL(втВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый, врТаблицаОбъектовСЗависимымиУслугами.ВидУслуги),
	|	ЕСТЬNULL(втВидыУслугДляЗаменыВКвитанции.НаименованиеВидаУслуги, ВЫРАЗИТЬ(врТаблицаОбъектовСЗависимымиУслугами.ВидУслуги.Наименование КАК СТРОКА(100))),
	|	ЕСТЬNULL(втВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый.ЕдиницаИзмерения, врТаблицаОбъектовСЗависимымиУслугами.ВидУслуги.ЕдиницаИзмерения),
	|	врТаблицаОбъектовСЗависимымиУслугами.Услуга.СпособРасчета,
	|	врТаблицаОбъектовСЗависимымиУслугами.Услуга.НастройкаОграниченияОДННормативом,
	|	врТаблицаОбъектовСЗависимымиУслугами.Услуга.ИспользоватьФормулу15,
	|	врТаблицаОбъектовСЗависимымиУслугами.ЛицевойСчет.Адрес,
	|	врТаблицаОбъектовСЗависимымиУслугами.ЛицевойСчет.Адрес.Подъезд,
	|	врТаблицаОбъектовСЗависимымиУслугами.Здание,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА врТаблицаОбъектовСЗависимымиУслугами.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА врТаблицаОбъектовСЗависимымиУслугами.Услуга В (&СписокУслугКапРемонт)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	врТаблицаОбъектовСЗависимымиУслугами КАК врТаблицаОбъектовСЗависимымиУслугами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВидыУслугДляЗаменыВКвитанции КАК втВидыУслугДляЗаменыВКвитанции
	|		ПО врТаблицаОбъектовСЗависимымиУслугами.ВидУслуги = втВидыУслугДляЗаменыВКвитанции.ВидУслуги";
	
	Запрос.УстановитьПараметр("СписокУслуг",           СписокУслуг);
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("КонецПериода",          Период);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов",   СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("СписокУслугКапРемонт",  СписокУслугКапРемонт);
	Запрос.УстановитьПараметр("ТаблицаЗависимыхУслуг", ТаблицаЗависимыхУслуг);
	Запрос.УстановитьПараметр("ТаблицаОбъектов",       ТаблицаОбъектов);
	Запрос.УстановитьПараметр("УказыватьЗависимостьУслугВРазрезеЗданий", Константы.УПЖКХ_УказыватьЗависимостьУслугВРазрезеЗданий.Получить());
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Индексы.Добавить("ЛицевойСчет");
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуНазначенныхУслугНаЛицевыеСчета()

// Процедура дополняет общую таблицу начислений услугами без начислений с показаниями по ИПУИСРасходом по ОПУ.
//
// Параметры:
//  ТаблицаНачисленияОбщ		 - ТаблицаЗначений - общая таблица с начислениями.
//  ПериодПросмотра				 - Дата	 - период квитанции.
//  ТаблицаОбъектов				 - ТаблицаЗначений - общая таблица объектов.
//  ТаблицаРасходаПоСчетчикамОбщ - ТаблицаЗначений - общая таблица расхода по счетчикам.
//  ТаблицаСчетчиковОбщ			 - ТаблицаЗначений - общая таблица показаний счетчиков.
//  ТаблицаНазначенныхУслугОбщ	 - ТаблицаЗначений - общая таблица назначенных услуг.
//
Процедура ДополнитьТаблицуНачисленийУслугамиБезНачисленийСПоказаниямиПоИПУИСРасходомПоОПУ(СтруктураНастроек, СтруктураОбщихТаблиц)
	
	ТаблицаНачисленияОбщ         = СтруктураОбщихТаблиц.ТаблицаНачисленияОбщ;
	ВидМакета                    = СтруктураНастроек.ВидМакета;
	ПериодПросмотра              = СтруктураНастроек.ПериодПросмотра;
	ТаблицаОбъектов              = СтруктураНастроек.ТаблицаОбъектов;
	ТаблицаРасходаПоСчетчикамОбщ = СтруктураОбщихТаблиц.ТаблицаРасходаПоСчетчикамОбщ;
	ТаблицаСчетчиковОбщ          = СтруктураОбщихТаблиц.ТаблицаСчетчиковОбщ;
	ТаблицаНазначенныхУслугОбщ   = СтруктураОбщихТаблиц.ТаблицаНазначенныхУслугОбщ;
	
	// Проиндексируем поля, по которым будем производить поиск.
	ТаблицаНачисленияОбщ.Индексы.Добавить("ЛицевойСчет, Услуга");
	ТаблицаРасходаПоСчетчикамОбщ.Индексы.Добавить("Здание, Услуга");
	ТаблицаСчетчиковОбщ.Индексы.Добавить("Услуга, ЛицевойСчет");
	
	// Подготовим таблицу назначенных услуг по приборам учета без начислений.
	массивСтрокНазначенныхУслугПоПУБезНачислений = Новый Массив;
	Для Каждого ТекущаяСтрокаНазначенныхУслуг Из ТаблицаНазначенныхУслугОбщ Цикл
		Если ТекущаяСтрокаНазначенныхУслуг.Действует
		   И ТаблицаНачисленияОбщ.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга", ТекущаяСтрокаНазначенныхУслуг.ЛицевойСчет, ТекущаяСтрокаНазначенныхУслуг.Услуга)).Количество() = 0
		   И (ТекущаяСтрокаНазначенныхУслуг.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
			 ИЛИ ТекущаяСтрокаНазначенныхУслуг.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме) Тогда
			массивСтрокНазначенныхУслугПоПУБезНачислений.Добавить(ТекущаяСтрокаНазначенныхУслуг);
		КонецЕсли;
	КонецЦикла;
	ТаблицаНазначенныхУслугБезНачислений = ТаблицаНазначенныхУслугОбщ.Скопировать(массивСтрокНазначенныхУслугПоПУБезНачислений);
	ТаблицаНазначенныхУслугБезНачислений.Индексы.Добавить("ЛицевойСчет");
	
	Для Каждого ТекущаяСтрокаОбъектов Из ТаблицаОбъектов Цикл
		
		Отбор = Новый Структура("ЛицевойСчет", ТекущаяСтрокаОбъектов.ЛицевойСчет);
		НазначенныеУслугиПоЛСБезНачислений = ТаблицаНазначенныхУслугБезНачислений.НайтиСтроки(Отбор);
		
		Для Каждого ТекущаяСтрокаУслуги Из НазначенныеУслугиПоЛСБезНачислений Цикл
			
			// Добавим услуги с показаниями ИПУ.
			
			// Если счетчик установлен на лицевой счет.
			ОтборУслугаЛицевойСчет = Новый Структура("Услуга, ЛицевойСчет", ТекущаяСтрокаУслуги.Услуга, ТекущаяСтрокаОбъектов.ЛицевойСчет);
			НайденныеПоказанияСчетчиков = ТаблицаСчетчиковОбщ.НайтиСтроки(ОтборУслугаЛицевойСчет);
			ДобавитьСведенияОбУслугеБезНачисленийПоПоказаниямПУВТаблицуНачислений(НайденныеПоказанияСчетчиков, ПериодПросмотра, ТаблицаНачисленияОбщ,
																				  ТекущаяСтрокаУслуги, ТекущаяСтрокаОбъектов);
			
			// Если счетчик установлен на помещение.
			ОтборУслугаЛицевойСчет.ЛицевойСчет = ТекущаяСтрокаОбъектов.Помещение;
			НайденныеПоказанияСчетчиков = ТаблицаСчетчиковОбщ.НайтиСтроки(ОтборУслугаЛицевойСчет);
			ДобавитьСведенияОбУслугеБезНачисленийПоПоказаниямПУВТаблицуНачислений(НайденныеПоказанияСчетчиков, ПериодПросмотра, ТаблицаНачисленияОбщ,
																				  ТекущаяСтрокаУслуги, ТекущаяСтрокаОбъектов);
				
			// Если счетчик установлен на подъезд.
			ОтборУслугаЛицевойСчет.ЛицевойСчет = ТекущаяСтрокаОбъектов.Подъезд;
			НайденныеПоказанияСчетчиков = ТаблицаСчетчиковОбщ.НайтиСтроки(ОтборУслугаЛицевойСчет);
			ДобавитьСведенияОбУслугеБезНачисленийПоПоказаниямПУВТаблицуНачислений(НайденныеПоказанияСчетчиков, ПериодПросмотра, ТаблицаНачисленияОбщ,
																					  ТекущаяСтрокаУслуги, ТекущаяСтрокаОбъектов);
				
			// Если счетчик установлен на здание.
			ОтборУслугаЛицевойСчет.ЛицевойСчет = ТекущаяСтрокаОбъектов.Здание;
			НайденныеПоказанияСчетчиков = ТаблицаСчетчиковОбщ.НайтиСтроки(ОтборУслугаЛицевойСчет);
			ДобавитьСведенияОбУслугеБезНачисленийПоПоказаниямПУВТаблицуНачислений(НайденныеПоказанияСчетчиков, ПериодПросмотра, ТаблицаНачисленияОбщ,
																					  ТекущаяСтрокаУслуги, ТекущаяСтрокаОбъектов);
				
			// Добавим услуги с расходом по ОПУ.
			ОтборЗданиеУслуга = Новый Структура("Здание, Услуга", ТекущаяСтрокаОбъектов.Здание, ТекущаяСтрокаУслуги.Услуга);
			НайденныеРасходыСчетчиков = ТаблицаРасходаПоСчетчикамОбщ.НайтиСтроки(ОтборЗданиеУслуга);
			ДобавитьСведенияОбУслугеБезНачисленийСРасходомПоОПУВТаблицуНачислений(НайденныеРасходыСчетчиков, ВидМакета, ТаблицаНачисленияОбщ, ТекущаяСтрокаУслуги, ТекущаяСтрокаОбъектов);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура производит поиск услуг без начисления с показаниями по ИПУ.
//
// Параметры:
//  НайденныеПоказанияСчетчиков	 - Строка таблицы значений - строка общей таблицы назначенных услуг.
//  ПериодПросмотра				 - Дата	 - период квитанции.
//  ТаблицаНачисленияОбщ		 - ТаблицаЗначений - общая таблица с начислениями.
//  ТекущаяСтрокаУслуги			 - Строка таблицы значений - строка общей таблицы назначенных услуг.
//  ТекущаяСтрокаОбъектов		 - Строка таблицы значений - строка общей таблицы объектов.
//
Процедура ДобавитьСведенияОбУслугеБезНачисленийПоПоказаниямПУВТаблицуНачислений(НайденныеПоказанияСчетчиков, ПериодПросмотра, ТаблицаНачисленияОбщ,
																				ТекущаяСтрокаУслуги, ТекущаяСтрокаОбъектов)
	
	Для Каждого ТекущаяСтрокаПоказаний Из НайденныеПоказанияСчетчиков Цикл
		Если ТекущаяСтрокаПоказаний.ПредыдущееПоказаниеПериод >= НачалоМесяца(ПериодПросмотра)
		   И ТекущаяСтрокаПоказаний.ПредыдущееПоказаниеПериод <= КонецМесяца(ПериодПросмотра) Тогда
			Если ТекущаяСтрокаПоказаний.ПредыдущееПоказаниеДн <> 0 Тогда
				ДобавитьСтрокуВТаблицуНачислений(ТаблицаНачисленияОбщ, ТекущаяСтрокаУслуги, ТекущаяСтрокаОбъектов,
												 Перечисления.КВП_ВидыТарифов.Дневной);
			КонецЕсли;
			Если ТекущаяСтрокаПоказаний.ПредыдущееПоказаниеНч <> 0 Тогда
				ДобавитьСтрокуВТаблицуНачислений(ТаблицаНачисленияОбщ, ТекущаяСтрокаУслуги, ТекущаяСтрокаОбъектов,
												 Перечисления.КВП_ВидыТарифов.Ночной);
			КонецЕсли;
			Если ТекущаяСтрокаПоказаний.ПредыдущееПоказаниеПк <> 0 Тогда
				ДобавитьСтрокуВТаблицуНачислений(ТаблицаНачисленияОбщ, ТекущаяСтрокаУслуги, ТекущаяСтрокаОбъектов,
												 Перечисления.КВП_ВидыТарифов.Пиковый);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура производит добавление услуг без начисления с расходом по ОПУ или с показаниями по ИПУ.
//
// Параметры:
//  ТаблицаНачисленияОбщ	 - ТаблицаЗначений - общая таблица с начислениями.
//  ТекущаяСтрокаУслуги		 - Строка таблицы значений - строка общей таблицы назначенных услуг.
//  ТекущаяСтрокаОбъектов	 - Строка таблицы значений - строка общей таблицы объектов.
//  ВидТарифа				 - Перечисление	 - вид тарифа показаний по ИПУ по назначенной услуге.
//
Процедура ДобавитьСтрокуВТаблицуНачислений(ТаблицаНачисленияОбщ, ТекущаяСтрокаУслуги, ТекущаяСтрокаОбъектов, ВидТарифа)
	
	Отбор = Новый Структура("ЛицевойСчет, Услуга, ВидТарифа", ТекущаяСтрокаОбъектов.ЛицевойСчет, ТекущаяСтрокаУслуги.Услуга, ВидТарифа);
	Если ТаблицаНачисленияОбщ.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаНачисленияОбщ.Добавить();
	
	Если ТаблицаНачисленияОбщ.Колонки.Найти("ВидПлощади") <> Неопределено Тогда
		НоваяСтрока.ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ПустаяСсылка();
	КонецЕсли;
	
	НоваяСтрока.ВидТарифа                               = ВидТарифа;
	НоваяСтрока.ВидУслуги                               = ТекущаяСтрокаУслуги.ВидУслуги;
	НоваяСтрока.ЕдИзм                                   = ТекущаяСтрокаУслуги.ЕдиницаИзмерения;
	НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход    = Ложь;
	НоваяСтрока.СоставноеКоличествоИнд                  = "";
	НоваяСтрока.КодВидаНачисленийИПУ                    = "";
	НоваяСтрока.КодВидаНачисленийОПУ                    = "";
	НоваяСтрока.КоличествоИПУ                           = 0;
	НоваяСтрока.КоличествоОПУ                           = 0;
	НоваяСтрока.КОплатеИПУ                              = 0;
	НоваяСтрока.КОплатеОПУ                              = 0;
	НоваяСтрока.ЛицевойСчет                             = ТекущаяСтрокаОбъектов.ЛицевойСчет;
	НоваяСтрока.Льгота                                  = 0;
	НоваяСтрока.Начислено                               = 0;
	НоваяСтрока.НачисленоИПУ                            = 0;
	НоваяСтрока.НачисленоОПУ                            = 0;
	НоваяСтрока.ПерерасчетИнд                           = 0;
	НоваяСтрока.ПерерасчетОДН                           = 0;
	НоваяСтрока.Перерасчет                              = 0;
	НоваяСтрока.Помещение                               = ТекущаяСтрокаОбъектов.Помещение;
	НоваяСтрока.СоставнаяУслуга                         = Справочники.КВП_Услуги.ПустаяСсылка();
	НоваяСтрока.Тариф                                   = 0;
	НоваяСтрока.Услуга                                  = ТекущаяСтрокаУслуги.Услуга;
	НоваяСтрока.УслугаПоСчетчикам                       = Истина;
	НоваяСтрока.УслугаСНачислениями                     = Ложь;
	НоваяСтрока.УслугаСоставнаяПоСчетчикам              = Ложь;
	НоваяСтрока.УслугаЯвляетсяСоставной                 = Ложь;
	НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу            = Ложь;
	НоваяСтрока.СтрокаДляОбщегоИмущества                = Ложь;
	НоваяСтрока.ПовышающийКоэффициент                   = 0;
	НоваяСтрока.СуммаПовышения                          = 0;
	НоваяСтрока.ЭтоКоммунальнаяУслуга                   = ТекущаяСтрокаУслуги.ЭтоКоммунальнаяУслуга;
	
КонецПроцедуры

// Процедура производит поиск услуг без начисления с расходом по ОПУ.
//
// Параметры:
//  НайденныеРасходыСчетчиков	 - Массив	 - строки общей таблицы "ТаблицаРасходаПоСчетчикамОбщ".
//  ТаблицаНачисленияОбщ		 - ТаблицаЗначений - общая таблица с начислениями.
//  ТекущаяСтрокаУслуги			 - Строка таблицы значений - строка общей таблицы назначенных услуг.
//  ТекущаяСтрокаОбъектов		 - Строка таблицы значений - строка общей таблицы объектов.
//
Процедура ДобавитьСведенияОбУслугеБезНачисленийСРасходомПоОПУВТаблицуНачислений(НайденныеРасходыСчетчиков, ВидМакета, ТаблицаНачисленияОбщ, ТекущаяСтрокаУслуги, ТекущаяСтрокаОбъектов)
	
	Для Каждого ТекущаяСтрока Из НайденныеРасходыСчетчиков Цикл
		
		ИмеютсяСведенияПоУслуге = Ложь;
		
		Если ТекущаяСтрока.РасходПоОПУ <> 0
		 ИЛИ ТекущаяСтрока.КоличествоОПУ <> 0 Тогда
			ИмеютсяСведенияПоУслуге = Истина;
		КонецЕсли;
		
		Если НЕ ИмеютсяСведенияПоУслуге
		   И (ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.ПермскийКрай
			  ИЛИ ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Чебоксары
			  ИЛИ ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва
			  ИЛИ ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва679)
		   И ТекущаяСтрока.КоличествоРасхождения <> 0 Тогда
			ИмеютсяСведенияПоУслуге = Истина;
		КонецЕсли;
		
		Если НЕ ИмеютсяСведенияПоУслуге
		   И (ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.ПермскийКрай
			  ИЛИ ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва
			  ИЛИ ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва679)
		   И ТекущаяСтрока.КоличествоИндНорма <> 0 Тогда
			ИмеютсяСведенияПоУслуге = Истина;
		КонецЕсли;
		
		Если ИмеютсяСведенияПоУслуге Тогда
			ДобавитьСтрокуВТаблицуНачислений(ТаблицаНачисленияОбщ, ТекущаяСтрокаУслуги, ТекущаяСтрокаОбъектов, ТекущаяСтрока.ВидТарифа);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет отбор данных по услугам в таблицах.
//
// Параметры:
//  СтруктураОбщихТаблиц - структура с данными по всем объектам отчета
//  СписокУслуг - список услуг, по которым необходимо установить отбор.
//
// Возвращаемое значение:
//  Структура - структура с данными о начислениях по текущему объекту отчета.
//
Функция ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, СписокУслуг) Экспорт
	
	ВидыУслуг = ПолучитьТекущиеВидыУслуг(СписокУслуг);
	
	Структура = Новый Структура;
	
	Для Каждого Таблица Из СтруктураОбщихТаблиц Цикл
		ТаблицаСОтбором = ОтобратьДанныеВТекущейТаблице(Таблица.Значение, СписокУслуг, ВидыУслуг);
		
		Если НЕ ТаблицаСОтбором.Колонки.Найти("ЛицевойСчет") = Неопределено Тогда
			ТаблицаСОтбором.Индексы.Добавить("ЛицевойСчет");
		КонецЕсли;
		
		Структура.Вставить(Таблица.Ключ, ТаблицаСОтбором);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции // ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам()

// Выполняет отбор данных по услугам в текущей таблице.
//
// Параметры:
//  Таблица - ТаблицаЗначений - текущая таблица
//  ТекущиеУслуги - СписокЗначений - список услуг, по которым необходимо установить отбор.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ОтобратьДанныеВТекущейТаблице(Таблица, СписокУслуг, ВидыУслуг)
	
	ТаблицаСОтбором = Таблица.СкопироватьКолонки();
	
	Для Каждого Строка Из Таблица Цикл
		Если НЕ Таблица.Колонки.Найти("Услуга") = Неопределено Тогда
			Если Не СписокУслуг.НайтиПоЗначению(Строка.Услуга) = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаСОтбором.Добавить(), Строка);
			КонецЕсли;
		ИначеЕсли НЕ Таблица.Колонки.Найти("ВидУслуги") = Неопределено Тогда
			Если Не ВидыУслуг.НайтиПоЗначению(Строка.ВидУслуги) = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаСОтбором.Добавить(), Строка);
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаСОтбором.Добавить(), Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСОтбором;
	
КонецФункции // ОтобратьДанныеВТекущейТаблице

// Формирует список видов услуг, соответствующий текущим услугам.
//
// Параметры:
//  ТекущиеУслуги - СписокЗначений - список услуг, для которых необходимо определить виды услуг.
//
// Врзвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьТекущиеВидыУслуг(СписокУслуг)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Услуги.ВидУслуги
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	КВП_Услуги.Ссылка В(&СписокУслуг)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый, втУслуги.ВидУслуги) КАК ВидУслуги
	|ИЗ
	|	втУслуги КАК втУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
	|		ПО втУслуги.ВидУслуги = КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги";
	Запрос.УстановитьПараметр("СписокУслуг", СписокУслуг);
	ТаблицаВидов = Запрос.Выполнить().Выгрузить();
	
	СписокВидовУслуг = Новый СписокЗначений;
	СписокВидовУслуг.ЗагрузитьЗначения(ТаблицаВидов.ВыгрузитьКолонку("ВидУслуги"));
	
	Возврат СписокВидовУслуг;
	
КонецФункции // ПолучитьТекущиеВидыУслуг()

// Формирует структуру с данными о начислениях по текущему объекту отчета.
//
// Параметры:
//  СтруктураОбщихТаблиц - структура с данными по всем объектам отчета
//  ОбщиеДанные - структура с общими данными
//  СтруктураНастроек - структура с пользовательскими настройками.
//
// Возвращаемое значение:
//  Структура - структура с данными о начислениях по текущему объекту отчета.
//
Функция ПолучитьСтруктуруДанныхПоТекущемуОбъекту(СтруктураОбщихТаблиц, ОбщиеДанные, СтруктураНастроек) Экспорт
	
	ЛицевойСчет     = ОбщиеДанные.ЛицевойСчет;
	Помещение       = ОбщиеДанные.Помещение;
	Подъезд         = ОбщиеДанные.Подъезд;
	Здание          = ОбщиеДанные.Здание;
	ВидМакета       = СтруктураНастроек.ВидМакета;
	Макеты          = Перечисления.УПЖКХ_ВидыПлатежныхДокументов;
	КвитанцияНаКР   = ОбщиеДанные.КвитанцияНаКР;
	КвитанцияПоПени = ОбщиеДанные.КвитанцияПоПени;
	
	ОтделятьДанныеПоПеням = СтруктураНастроек.УчитыватьПени И СтруктураНастроек.СпособПечатиКвитанцииПоПеням = "в отдельной квитанции";
	
	ТекущиеДанные = Новый Структура;
	
	ТекущиеДанные.Вставить("ТаблицаНазначенныхУслуг",           ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаНазначенныхУслугОбщ, "ЛицевойСчет", ЛицевойСчет));
	
	// Таблица с оплатами.
	Если КвитанцияНаКР Тогда
		
		ТекущиеДанные.Вставить("ТаблицаОплат",                  ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаОплатОбщКР, "ЛицевойСчет", ЛицевойСчет));
		ТекущиеДанные.Вставить("ТаблицаОплатПоУслугам",         ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаОплатОбщПоУслугамКР, "ЛицевойСчет", ЛицевойСчет));
		
	// В случае, когда выбрана опция "единая квитанция на осн. услуги и кап. ремонт" в качестве таблиц оплаты и оплаты по услугам берем общие таблицы без разбивки на услуги кап.ремонта и основные.
	ИначеЕсли СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" Тогда
		
		ТекущиеДанные.Вставить("ТаблицаОплат",                  ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаОплатОбщ, "ЛицевойСчет", ЛицевойСчет));
		ТекущиеДанные.Вставить("ТаблицаОплатПоУслугам",         ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаОплатОбщПоУслугам, "ЛицевойСчет", ЛицевойСчет));
		
	Иначе
		
		ТекущиеДанные.Вставить("ТаблицаОплат",                  ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаОплатОбщОсновные, "ЛицевойСчет", ЛицевойСчет));
		ТекущиеДанные.Вставить("ТаблицаОплатПоУслугам",         ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаОплатОбщПоУслугамОсновные, "ЛицевойСчет", ЛицевойСчет));
		
	КонецЕсли;
	
	// Таблица со сведениями о перерасчетах.
	ТекущиеДанные.Вставить("ТаблицаПерерасчетов",               ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаПерерасчетовОбщ, "ЛицевойСчет", ЛицевойСчет));
	
	// Таблица со сведениями о нормах потребления по текущему л/с и текущему зданию.
	ТекущиеДанные.Вставить("ТаблицаНорм",                       ПолучитьТаблицуНормПоТекущемуОбъекту(СтруктураОбщихТаблиц.ТаблицаНормОбщ, ОбщиеДанные));
	
	// Таблица со счетчиками, установленными на текущий л/с или текущее помещение.
	ТекущиеДанные.Вставить("ТаблицаСчетчиков",                  ПолучитьТаблицуПоказанийСчетчиковПоТекущемуОбъекту(СтруктураОбщихТаблиц.ТаблицаСчетчиковОбщ, ТекущиеДанные, ОбщиеДанные, СтруктураНастроек));
	
	// Таблица со счетчиками, установленными на текущее здание или текущий подъезд.
	ТекущиеДанные.Вставить("ТаблицаОбщихСчетчиков",             ПолучитьТаблицуДанныхСОтборомПоКритерию(ТекущиеДанные.ТаблицаСчетчиков, "ЛицевойСчет", Подъезд, "ЛицевойСчет", Здание));
																								
	// Таблица со счетчиками, установленными на текущий лицевой счет или помещение
	ТекущиеДанные.Вставить("ТаблицаИндСчетчиков",               ПолучитьТаблицуДанныхСОтборомПоКритерию(ТекущиеДанные.ТаблицаСчетчиков, "ЛицевойСчет", ЛицевойСчет, "ЛицевойСчет", Помещение));
	
	// Таблица с расходом по счетчикам.
	ТекущиеДанные.Вставить("ТаблицаРасходаПоСчетчикам",         ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаРасходаПоСчетчикамОбщ, "Здание", Здание));
	
	// Если в текущем отчетном месяце имеются сведения о расходах по услугам в разрезе здания, тогда услугу
	// добавляем в таблицу счетчиков для вывода информации о расходах по зданию.
	Если ВидМакета = Макеты.Москва679 ИЛИ ВидМакета = Макеты.Стандартный43Пр Тогда
		
		ДополнитьТаблицуСчетчиковУслугамиСРасходамиПоЗданию(ТекущиеДанные);
		
	КонецЕсли;
	
	// Таблица со льготами, начисленными при установленном флаге "Не учитывать льготы во взаиморасчетах".
	Если СтруктураНастроек.ЛьготыСправочно Тогда
		ТекущиеДанные.Вставить("ТаблицаЛьготСправочно",         ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаЛьготСправочноОбщ, "ЛицевойСчет", ЛицевойСчет));
	Иначе
		// В случае, если флаг "Не учитывать льготы во взаиморасчетах" снят, записываем в структуру пустую таблицу для того, чтобы в последующем не 
		// анализировать значение флага.
		ТекущиеДанные.Вставить("ТаблицаЛьготСправочно",         Новый ТаблицаЗначений);
	КонецЕсли;
	
	// Таблица с начислениями.
	ТекущиеДанные.Вставить("ТаблицаНачисления",                 ПолучитьТаблицуНачисленияПоТекущемуОбъекту(СтруктураОбщихТаблиц, ТекущиеДанные, ОбщиеДанные, СтруктураНастроек));
	
	ТекущиеДанные.Вставить("ТаблицаДобровольногоСтрахования",   ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаДобровольногоСтрахованияОбщ, "ЛицевойСчет", ЛицевойСчет));
	
	// Итоговая сумма начисленных пеней.
	Если КвитанцияНаКР Тогда
		
		ТекущиеДанные.Вставить("СуммаПени",                     ПолучитьСуммуПениПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаПениОбщКР, ЛицевойСчет));
		ТекущиеДанные.Вставить("СуммаОплатыПени",               ПолучитьСуммуОплатыПениПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаОплатОбщКР, ЛицевойСчет));
		
	// В случае, когда выбрана опция "единая квитанция на осн. услуги и кап. ремонт" в качестве таблиц начсления пени берем общую таблицу без разбивки на услуги кап.ремонта и основные.
	ИначеЕсли СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" Тогда
		
		ТекущиеДанные.Вставить("СуммаПени",                     ПолучитьСуммуПениПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаПениОбщ, ЛицевойСчет));
		Если НЕ СтруктураНастроек.УчитыватьПени Тогда
			ТекущиеДанные.Вставить("СуммаОплатыПени",         0);
		ИначеЕсли СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
			ТекущиеДанные.Вставить("СуммаОплатыПени",           ПолучитьСуммуОплатыПениПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаОплатОбщ, ЛицевойСчет));
		Иначе
			ТекущиеДанные.Вставить("СуммаОплатыПени",           ПолучитьСуммуОплатыПениПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаПениОплатОбщ, ЛицевойСчет));
		КонецЕсли;
	Иначе
		
		ТекущиеДанные.Вставить("СуммаПени",                     ПолучитьСуммуПениПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаПениОбщОсновные, ЛицевойСчет));
		
		Если НЕ СтруктураНастроек.УчитыватьПени Тогда
			
			ТекущиеДанные.Вставить("СуммаОплатыПени", 0);
			
		ИначеЕсли СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
			
			ТекущиеДанные.Вставить("СуммаОплатыПени",           ПолучитьСуммуОплатыПениПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаОплатОбщОсновные, ЛицевойСчет));
			
		Иначе
			
			ТекущиеДанные.Вставить("СуммаОплатыПени",           ПолучитьСуммуОплатыПениПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаПениОплатОбщОсновные, ЛицевойСчет));
			
		КонецЕсли;
	КонецЕсли;
	
	// Количество льготников на лицевом счете.
	ТекущиеДанные.Вставить("КоличествоЛьготников",              ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаКоличестваЛьготОбщ, "ЛицевойСчет", ЛицевойСчет));
	
	// Структура со сведениями о начльном сальдо.
	Если КвитанцияНаКР Тогда
		
		ТекущиеДанные.Вставить("СтруктураНачСальдо",            ПолучитьНачальноеСальдоПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаСальдоОбщКР, ЛицевойСчет, СтруктураНастроек.ВыводитьНачальноеСальдо));
		
		Если ВидМакета = "ОбменССайтомЖКХ4" Тогда
			
			Если ОтделятьДанныеПоПеням Тогда
				Если КвитанцияПоПени Тогда
					ТаблицаКонНачСальдо = СтруктураОбщихТаблиц.ТаблицаКонНачСальдоОбщКР.Скопировать(Новый Структура("ЭтоПени", Истина));
				Иначе
					ТаблицаКонНачСальдо = СтруктураОбщихТаблиц.ТаблицаКонНачСальдоОбщКР.Скопировать(Новый Структура("ЭтоПени", Ложь));
				КонецЕсли;
			Иначе
				ТаблицаКонНачСальдо = СтруктураОбщихТаблиц.ТаблицаКонНачСальдоОбщКР;
			КонецЕсли;
			
			ТекущиеДанные.Вставить("ТаблицаКонНачСальдо", ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаКонНачСальдо, "ЛицевойСчет", ЛицевойСчет));
			
		КонецЕсли;
		
	// В случае, когда выбрана опция "единая квитанция на осн. услуги и кап. ремонт" в качестве таблиц с данными о сальдо берем общую таблицу без разбивки на услуги кап.ремонта и основные.
	ИначеЕсли СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" Тогда
		
		ТекущиеДанные.Вставить("СтруктураНачСальдо", ПолучитьНачальноеСальдоПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаСальдоОбщ, ЛицевойСчет, СтруктураНастроек.ВыводитьНачальноеСальдо));
		
		Если ВидМакета = "ОбменССайтомЖКХ4" Тогда
			
			Если ОтделятьДанныеПоПеням Тогда
				Если КвитанцияПоПени Тогда
					ТаблицаКонНачСальдо = СтруктураОбщихТаблиц.ТаблицаКонНачСальдоОбщ.Скопировать(Новый Структура("ЭтоПени", Истина));
				Иначе
					ТаблицаКонНачСальдо = СтруктураОбщихТаблиц.ТаблицаКонНачСальдоОбщ.Скопировать(Новый Структура("ЭтоПени", Ложь));
				КонецЕсли;
			Иначе
				ТаблицаКонНачСальдо = СтруктураОбщихТаблиц.ТаблицаКонНачСальдоОбщ;
			КонецЕсли;
			
			ТекущиеДанные.Вставить("ТаблицаКонНачСальдо", ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаКонНачСальдо, "ЛицевойСчет", ЛицевойСчет));
			
		КонецЕсли;
		
	Иначе
		ТекущиеДанные.Вставить("СтруктураНачСальдо", ПолучитьНачальноеСальдоПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаСальдоОбщОсновные, ЛицевойСчет, СтруктураНастроек.ВыводитьНачальноеСальдо));
		
		Если ВидМакета = "ОбменССайтомЖКХ4" Тогда
			
			Если ОтделятьДанныеПоПеням Тогда
				Если КвитанцияПоПени Тогда
					ТаблицаКонНачСальдо = СтруктураОбщихТаблиц.ТаблицаКонНачСальдоОбщОсновные.Скопировать(Новый Структура("ЭтоПени", Истина));
				Иначе
					ТаблицаКонНачСальдо = СтруктураОбщихТаблиц.ТаблицаКонНачСальдоОбщОсновные.Скопировать(Новый Структура("ЭтоПени", Ложь));
				КонецЕсли;
			Иначе
				ТаблицаКонНачСальдо = СтруктураОбщихТаблиц.ТаблицаКонНачСальдоОбщОсновные;
			КонецЕсли;
			
			ТекущиеДанные.Вставить("ТаблицаКонНачСальдо", ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаКонНачСальдо, "ЛицевойСчет", ЛицевойСчет));
			
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаПоставщиковОбщ_Пустая = СтруктураОбщихТаблиц.ТаблицаПоставщиковОбщ.СкопироватьКолонки();
	
	// Таблица со сведениями о поставщиках услуг.
	Если ВидМакета = Макеты.СтандартныйКР ИЛИ ВидМакета = Макеты.Стандартный
	 ИЛИ ВидМакета = Макеты.Стандартный43Пр ИЛИ ВидМакета = Макеты.СПолямиБанка1 ИЛИ ВидМакета = Макеты.Москва ИЛИ ВидМакета = "ОбменССайтомЖКХ4" Тогда
		
		ТекущиеДанные.Вставить("ТаблицаПоставщиков", ПолучитьДанныеОПоставщикахПоТекущемуОбъекту(СтруктураОбщихТаблиц, СтруктураНастроек, ОбщиеДанные));
		
		Если ВидМакета = "ОбменССайтомЖКХ4" Тогда
			
			// Таблица со сведениями о поставщиках услуг (Для обмена данными с сайтом).
			ТекущиеДанные.Вставить("ТаблицаПоставщиковПоВидамУслуг", ПолучитьДанныеОПоставщикахПоТекущемуОбъектуПоВидамУслуг(СтруктураОбщихТаблиц.ТаблицаПоставщиковОбщ, Здание));
			
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные.Вставить("ТаблицаПоставщиков", ТаблицаПоставщиковОбщ_Пустая);
		
	КонецЕсли;
	
	// Таблица со сведениями о рассрочке.
	Если ВидМакета = Макеты.СтандартныйКР
	 ИЛИ ВидМакета = Макеты.Стандартный
	 Или ВидМакета = Макеты.Чебоксары
	 Или ВидМакета = Макеты.Москва
	 Или ВидМакета = Макеты.Москва679
	 Или ВидМакета = Макеты.Стандартный43Пр
	 Или ВидМакета = "ОбменССайтомЖКХ4" Тогда
		
		ТекущиеДанные.Вставить("ТаблицаРассрочки",               ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаРассрочкиОбщ, "ЛицевойСчет", ЛицевойСчет));
		
	Иначе
		ТекущиеДанные.Вставить("ТаблицаРассрочки",               Новый ТаблицаЗначений);
	КонецЕсли;
	
	Если ВидМакета = Макеты.ПермскийКрай Тогда
		
		Если СтруктураОбщихТаблиц.БазаРаспределенияПоУслугамОбщ.Количество() > 0 Тогда
			
			ТекущиеДанные.Вставить("БазаРаспределенияПоУслугам", ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.БазаРаспределенияПоУслугамОбщ, "ЛицевойСчет", ЛицевойСчет));
			
		Иначе
			ТекущиеДанные.Вставить("БазаРаспределенияПоУслугам", Новый ТаблицаЗначений);
		КонецЕсли;
		
		ТекущиеДанные.Вставить("ТаблицаУслугДляПерми",           СтруктураОбщихТаблиц.ТаблицаУслугДляПерми);
		
	КонецЕсли;
	
	ТекущиеДанные.Вставить("ТаблицаУслугКПУ",                    СтруктураОбщихТаблиц.ТаблицаУслугКПУ);
	
	ТекущиеДанные.Вставить("ТаблицаДатыПоследнихОплат",          ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаДатыПоследнихОплат, "ЛицевойСчет", ЛицевойСчет));
	
	Возврат ТекущиеДанные;
	
КонецФункции // ПолучитьСтруктуруДанныхПоТекущемуОбъекту()

// Записывает в структуру итоговые сведениями о начислениях по текущему л/с.
//
// Параметры:
//  ОбщиеДанные - структура с общими данными;
//  ТекущиеДанные - структура с данными по текущему объекту отчета;
//  СтруктураНастроек - структура с пользовательскими настройками;
//
Процедура ПолучитьИтоговыеПоказателиПоТекущемуОбъекту(ОбщиеДанные, ТекущиеДанные, СтруктураНастроек) Экспорт
	
	ПолучитьИнформациюОНачальномСальдоИОплатах(ОбщиеДанные, ТекущиеДанные.ТаблицаОплат, ТекущиеДанные.СтруктураНачСальдо,
												СтруктураНастроек.ВыводитьНачальноеСальдо, ТекущиеДанные.ТаблицаДатыПоследнихОплат, СтруктураНастроек);
	
	ПолучитьИнформациюОНачислениях(ОбщиеДанные, ТекущиеДанные, СтруктураНастроек);
	
	ПолучитьИнформациюОбИтоговойСуммеКОплате(ОбщиеДанные, ТекущиеДанные, СтруктураНастроек);
	
КонецПроцедуры // ПолучитьИтоговыеПоказателиПоТекущемуОбъекту()

// Записывает в структуру сведения о сальдо на начало отчетного месяца и о внесенных оплатах по текущему л/с.
//
// Параметры:
//  ОбщиеДанные - структура с общими данными;
//  ТаблицаОплат - таблица с оплатами;
//  СтруктураНачСальдо - структура со сведениями о начальном сальдо;
//  ВыводитьНачальноеСальдо - пользовательская настройка;
//  ТаблицаДатыПоследнихОплат - таблица последних оплат;
//
Процедура ПолучитьИнформациюОНачальномСальдоИОплатах(ОбщиеДанные, ТаблицаОплат, СтруктураНачСальдо, ВыводитьНачальноеСальдо, ТаблицаДатыПоследнихОплат, СтруктураНастроек)
	
	ВнесеноОплат                     = ТаблицаОплат.Итог("СуммаОплаты");
	ВнесеноОплатБезПени              = ТаблицаОплат.Итог("СуммаОплатыБезПени");
	ВнесеноОплатПени                 = ТаблицаОплат.Итог("СуммаОплатыПени");
	ВнесеноОплатНаПогашениеРассрочки = ТаблицаОплат.Итог("СуммаОплатыОстаткаПоРассрочке");
	ВнесеноНаДобровольноеСтрахование = ТаблицаОплат.Итог("СуммаОплатыДобровольногоСтрахования");
	УчитыватьПениВТекущейКвитанции   = (СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням);
	
	ОбщиеДанные.Вставить("ДатаОплаты",       ДАТА(1,1,1));
	ОбщиеДанные.Вставить("ДатаОплатыДляXML", ДАТА(1,1,1));
	
	// Дата последней внесенной оплаты.
	Если Не ТаблицаДатыПоследнихОплат.Количество() = 0 Тогда
		
		СтрокаПериода = ТаблицаДатыПоследнихОплат[0];
		
		Если ОбщиеДанные.КвитанцияНаКР И ОбщиеДанные.КвитанцияПоПени Тогда
			
			ДатаОплаты = СтрокаПериода.ПериодКапРемонтПени;
			
		ИначеЕсли ОбщиеДанные.КвитанцияНаКР И НЕ ОбщиеДанные.КвитанцияПоПени Тогда
			
			ДатаОплаты = СтрокаПериода.ПериодКапРемонтНеПени;
			
		ИначеЕсли НЕ ОбщиеДанные.КвитанцияНаКР И ОбщиеДанные.КвитанцияПоПени Тогда
			
			ДатаОплаты = СтрокаПериода.ПериодНеКапРемонтПени;
			
		ИначеЕсли НЕ ОбщиеДанные.КвитанцияНаКР И НЕ ОбщиеДанные.КвитанцияПоПени Тогда
			
			ДатаОплаты = СтрокаПериода.ПериодНеКапРемонтНеПени;
			
		КонецЕсли;
		
		//ДЛЯ ОТПРАВКИ НА САЙТ НУЖНА ДАТА В ФОРМАТЕ XML, ПОЭТОМУ ДОБАВИМ ЭЛЕМЕНТ С ТИПОМ "ДАТА".
		ОбщиеДанные.ДатаОплатыДляXML = ДатаОплаты;
		
		ОбщиеДанные.ДатаОплаты = Формат(ДатаОплаты, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	Если ОбщиеДанные.ДатаОплаты = Дата(1, 1, 1) Тогда
		ОбщиеДанные.ДатаОплаты = "";
	КонецЕсли;
	
	НачальноеСальдо = ?(УчитыватьПениВТекущейКвитанции, СтруктураНачСальдо.НачальноеСальдо, СтруктураНачСальдо.НачальноеСальдоБезПени);
	
	Если СтруктураНастроек.ВключатьОплатыВНачальноеСальдо Тогда
		НачальноеСальдо = НачальноеСальдо - ВнесеноОплат + ВнесеноОплатНаПогашениеРассрочки + ВнесеноНаДобровольноеСтрахование;
	КонецЕсли;
	
	// Под "Задолженностью" подразумеваем положительное сальдо.
	// Под "Авансом" - отрицательное сальдо.
	Если НачальноеСальдо > 0 Тогда
		
		Задолженность = НачальноеСальдо;
		Аванс         = 0;
		
		ОбщиеДанные.Вставить("ВидСальдо",       "Задолженность на начало расчет.периода");
		ОбщиеДанные.Вставить("НачальноеСальдо", Задолженность);
		
	Иначе
		
		Задолженность = 0;
		Аванс         = - НачальноеСальдо;
		
		ОбщиеДанные.Вставить("ВидСальдо",       "Переплата на начало расч.периода");
		ОбщиеДанные.Вставить("НачальноеСальдо", Аванс);
		
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность", Задолженность);
	ОбщиеДанные.Вставить("Аванс",         Аванс);
	
	Если ВыводитьНачальноеСальдо Тогда
		
		Если СтруктураНастроек.ВключатьОплатыВНачальноеСальдо Тогда
			ОбщиеДанные.Вставить("ТекстОплаты", "    в т.ч. оплаты");
		Иначе
			ОбщиеДанные.Вставить("ТекстОплаты", "Внесено оплат");
		КонецЕсли;
		
		ОбщиеДанные.Вставить("ВнесеноОплат",                     ВнесеноОплат);
		ОбщиеДанные.Вставить("ВнесеноОплатБезПени",              ВнесеноОплатБезПени);
		ОбщиеДанные.Вставить("ВнесеноОплатПени",                 ВнесеноОплатПени);
		ОбщиеДанные.Вставить("ВнесеноОплатНаПогашениеРассрочки", ВнесеноОплатНаПогашениеРассрочки);
		ОбщиеДанные.Вставить("ВнесеноНаДобровольноеСтрахование", ВнесеноНаДобровольноеСтрахование);
		ОбщиеДанные.Вставить("ДолгБезПени",                      СтруктураНачСальдо.НачальноеСальдоБезПени);
		ОбщиеДанные.Вставить("ДолгПени",                         СтруктураНачСальдо.НачальноеСальдоПени);
		ОбщиеДанные.Вставить("ДолгОбщий",                        НачальноеСальдо);
	Иначе
		ОбщиеДанные.Вставить("ТекстОплаты",                      "");
		ОбщиеДанные.Вставить("ВнесеноОплат",                     0);
		ОбщиеДанные.Вставить("ВнесеноОплатБезПени",              0);
		ОбщиеДанные.Вставить("ВнесеноОплатПени",                 0);
		ОбщиеДанные.Вставить("ВнесеноОплатНаПогашениеРассрочки", 0);
		ОбщиеДанные.Вставить("ВнесеноНаДобровольноеСтрахование", 0);
		ОбщиеДанные.Вставить("ДолгБезПени",                      0);
		ОбщиеДанные.Вставить("ДолгПени",                         0);
		ОбщиеДанные.Вставить("ДолгОбщий",                        0);
	КонецЕсли;
	
	// Если в текущем месяце оплатили добровольное страхование, то действовать оно будет в следующем месяце.
	ОбщиеДанные.Вставить("МесяцДобровольногоСтрахования", Формат(ДобавитьМесяц(СтруктураНастроек.ПериодПросмотра, 1), "ДФ='MMMM yyyy'") + " г.");
	
КонецПроцедуры // ПолучитьИнформациюОНачальномСальдоИОплатах()

// Записывает в структуру сведения о итоговых показателях начисления по текущему л/с.
//
// Параметры:
//  ОбщиеДанные - структура с общими данными
//  ТекущиеДанные - стуктура с данными по текущему л/с
//  СтруктураНастроек - структура с пользовательскими настройками.
// 
Процедура ПолучитьИнформациюОНачислениях(ОбщиеДанные, ТекущиеДанные, СтруктураНастроек)
	
	ПериодПросмотра    = СтруктураНастроек.ПериодПросмотра;
	УчитыватьПени      = (СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням);
	СуммаПени          = ТекущиеДанные.СуммаПени;
	ТаблицаНачисления  = ТекущиеДанные.ТаблицаНачисления;
	ТаблицаСтрахования = ТекущиеДанные.ТаблицаДобровольногоСтрахования;
	
	СрокОплаты = КонецМесяца(ПериодПросмотра) + ОбщиеДанные.ДатаОплатыУслуг * 24 * 60 * 60;
	ОбщиеДанные.Вставить("СрокОплатыДата", Формат(СрокОплаты, "ДФ = 'dd.MM.yyyy'"));
	ОбщиеДанные.Вставить("СрокОплаты",     "Оплатить до " + Формат(СрокОплаты, "ДФ='dd MMMM yyyy'") + " г.");
	
	Если УчитыватьПени Тогда
		ОбщиеДанные.Вставить("Пени", 	     Формат(СуммаПени, "ЧДЦ=2; ЧН=0,00"));
		ОбщиеДанные.Вставить("ТекстПени",    "Пени:");
		ОбщиеДанные.Вставить("ТекстПениРуб", " руб.");
	Иначе
		ОбщиеДанные.Вставить("Пени", "");
	КонецЕсли;
	
	ОбщиеДанные.Вставить("ПериодОплаты",     "" + Формат(ПериодПросмотра, "ДФ='MMMM yyyy'") + " г.");
	ОбщиеДанные.Вставить("МесяцЧислом",      Формат(ПериодПросмотра, "ДФ='MM.yy'"));
	ОбщиеДанные.Вставить("НачалоСледМесяца", Формат(КонецМесяца(ПериодПросмотра) + 1, "ДФ=dd.MM.yyyy") + " г.");
	
	НачисленоБезПени = ?(Не ТаблицаНачисления.Количество() = 0, ТаблицаНачисления.Получить(0).КОплате, 0);
	
	ОбщиеДанные.Вставить("НачисленоБезПени", Формат(НачисленоБезПени, "ЧДЦ=2; ЧН=0,00"));
	
	ИтогоНачислено = НачисленоБезПени + ?(УчитыватьПени, СуммаПени, 0);
	ОбщиеДанные.Вставить("ИтогоНачислено",   Формат(ИтогоНачислено, "ЧДЦ=2; ЧН=0,00"));
	
	ИтогоНачисленоСоСтрахованием = ИтогоНачислено + ТаблицаСтрахования.Итог("СуммаНачисления");
	ОбщиеДанные.Вставить("ИтогоНачисленоСоСтрахованием", Формат(ИтогоНачисленоСоСтрахованием, "ЧДЦ=2; ЧН=0,00"));
	
	// Добавим дополнительно общие суммы по услугам содержания и ремонта, и СОИ.
	// В качестве общего объема установим общую площидь помещения,
	// а в качестве тарифа - отношение суммы на общую площадь.
	ТаблицаСодержанияИРемонта = ПолучитьТаблицуУслугДляКвитанции(ТекущиеДанные.ТаблицаНачисления, Новый Структура("СодержаниеИРемонт", Истина), СтруктураНастроек);
	ТаблицаУслугСОИ           = ПолучитьТаблицуУслугСОИ(ТекущиеДанные.ТаблицаНачисления, СтруктураНастроек, Ложь);
	
	ОбщиеДанные.Вставить("ИтогоНачисленоЗаСодержаниеПомещения", ТаблицаСодержанияИРемонта.Итог("Начислено") + ТаблицаУслугСОИ.Итог("Начислено"));
	ОбщиеДанные.Вставить("ОбщийОбъемЗаСодержаниеПомещения",     ?(ОбщиеДанные.ОбщаяПлощадь = 0, 1, ОбщиеДанные.ОбщаяПлощадь));
	ОбщиеДанные.Вставить("ТарифЗаСодержаниеПомещения",          Окр(ОбщиеДанные.ИтогоНачисленоЗаСодержаниеПомещения / ОбщиеДанные.ОбщийОбъемЗаСодержаниеПомещения, 6));
	
КонецПроцедуры // ПолучитьИнформациюОНачислениях()

// Записывает в структуру сведения об итоговой сумме к оплате по текущему л/с.
//
// Параметры:
//  ОбщиеДанные - структура с общими данными
//  ТекущиеДанные - стуктура с данными по текущему л/с
//  СтруктураНастроек - структура с пользовательскими настройками.
// 
Процедура ПолучитьИнформациюОбИтоговойСуммеКОплате(ОбщиеДанные, ТекущиеДанные, СтруктураНастроек)
	
	ВидМакета                        = СтруктураНастроек.ВидМакета;
	Макеты                           = Перечисления.УПЖКХ_ВидыПлатежныхДокументов;
	ТаблицаНачисления                = ТекущиеДанные.ТаблицаНачисления;
	НачисленоДобровольноеСтрахование = ТекущиеДанные.ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
	СтруктураНачСальдо               = ТекущиеДанные.СтруктураНачСальдо;
	ВыводитьНачальноеСальдо          = СтруктураНастроек.ВыводитьНачальноеСальдо;
	ВключатьОплатыВНачальноеСальдо   = СтруктураНастроек.ВключатьОплатыВНачальноеСальдо;
	ВключениеНачальнойЗадолженности  = СтруктураНастроек.ВключениеНачальнойЗадолженности;
	УчитыватьПени                    = (СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням);
	СуммаПени                        = ТекущиеДанные.СуммаПени;
	ВариантУчетаКомиссииБанка        = СтруктураНастроек.ВариантУчетаКомиссииБанка;
	КомиссияБанка                    = СтруктураНастроек.КомиссияБанка;
	ВнесеноОплат                     = ОбщиеДанные.ВнесеноОплат;
	ВнесеноОплатПени                 = ОбщиеДанные.ВнесеноОплатПени;
	КОплатеПениСУчетомНачСальдоПени  = СтруктураНачСальдо.НачальноеСальдоПени + СуммаПени - ТекущиеДанные.СуммаОплатыПени;
	
	ОбщиеДанные.Вставить("ЕстьНачисленияПоДобровольномуСтрахованию", Не НачисленоДобровольноеСтрахование = 0);
	
	Если ВидМакета = "ОбменССайтомЖКХ4" Тогда
		
		Если ОбщиеДанные.КвитанцияПоПени Тогда
			
			НачальноеСальдо = ТекущиеДанные.ТаблицаСальдоПоПени.Итог("НачальноеСальдо");
			КонечноеСальдо  = НачальноеСальдо - ВнесеноОплатПени + СуммаПени;
			
		Иначе
			
			НачальноеСальдо = ТекущиеДанные.ТаблицаКонНачСальдо.Итог("НачальноеСальдо");
			КонечноеСальдо  = ТекущиеДанные.ТаблицаКонНачСальдо.Итог("КонечноеСальдо");
			
		КонецЕсли;
		
		ОбщиеДанные.Вставить("НачальноеСальдо", НачальноеСальдо);
		ОбщиеДанные.Вставить("КонечноеСальдо",  КонечноеСальдо);
		
	КонецЕсли;
	
	Если ВидМакета = Макеты.Стандартный43Пр Тогда
		ВсегоКОплате = ?(ТаблицаНачисления.Количество() = 0, 0, ТаблицаНачисления[0].ИтогоКОплате);
	Иначе
		ВсегоКОплате = ?(ТаблицаНачисления.Количество() = 0, 0, ТаблицаНачисления[0].КОплате);
	КонецЕсли;
	
	// В итоговой сумме к оплате не нужно учитывать сумму оплаты на погашение рассрочки будущих периодов и оплату добровольного страхования.
	Если Не ВключатьОплатыВНачальноеСальдо И НЕ ВидМакета = Макеты.Москва679 Тогда
		
		ВсегоКОплате = ВсегоКОплате - (-ОбщиеДанные.ВнесеноОплатНаПогашениеРассрочки) - (- ОбщиеДанные.ВнесеноНаДобровольноеСтрахование);
		
	КонецЕсли;
	
	Если ВыводитьНачальноеСальдо Тогда
		
		КОплатеБезПени = СтруктураНачСальдо.НачальноеСальдоБезПени + ВсегоКОплате - ОбщиеДанные.ВнесеноОплатБезПени;
		КОплатеПени    = СтруктураНачСальдо.НачальноеСальдоПени + СуммаПени - ВнесеноОплатПени;
		
		КОплатеПениДляШК = СуммаПени - ВнесеноОплатПени;
		
		Если ВключатьОплатыВНачальноеСальдо Тогда
			ВнесеноОплат = 0;
		КонецЕсли;
		
		Если ВидМакета = Макеты.Стандартный43Пр Тогда
			
			Если НЕ ВключениеНачальнойЗадолженности = "НеВыводить" Тогда
				ВсегоКОплате = ВсегоКОплате - ВнесеноОплат;
			КонецЕсли;
			
		ИначеЕсли НЕ ВидМакета = Макеты.Москва679 И НЕ ВидМакета = Макеты.Стандартный43Пр Тогда
			
			Если ВключениеНачальнойЗадолженности = "ВключатьЗадолженность" Тогда
				
				ВсегоКОплате = ВсегоКОплате + ОбщиеДанные.Задолженность - ВнесеноОплат;
				
			ИначеЕсли ВключениеНачальнойЗадолженности = "ВключатьАванс" Тогда
				
				ВсегоКОплате = ВсегоКОплате - ОбщиеДанные.Аванс - ВнесеноОплат;
				
			ИначеЕсли ВключениеНачальнойЗадолженности = "ВключатьНачСальдо" Тогда
				
				ВсегоКОплате = ВсегоКОплате - ОбщиеДанные.Аванс + ОбщиеДанные.Задолженность - ВнесеноОплат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		КОплатеБезПени   = ВсегоКОплате;
		КОплатеПени      = СуммаПени;
		КОплатеПениДляШК = ВсегоКОплате;
	КонецЕсли;
	
	СтрокаФормата = "ЧДЦ=2; ЧН=0,00";
	ОбщиеДанные.Вставить("КОплатеБезПени",                  Формат(КОплатеБезПени, СтрокаФормата));
	ОбщиеДанные.Вставить("КОплатеПени",                     Формат(КОплатеПени,    СтрокаФормата));
	
	Если СтруктураНастроек.УчитыватьПени И СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
		Если ОбщиеДанные.КвитанцияПоПени Тогда
			ОбщиеДанные.Вставить("КОплатеПениДляШК",                КОплатеПениДляШК);
			ОбщиеДанные.Вставить("КОплатеПениСУчетомНачСальдоПени", КОплатеПениСУчетомНачСальдоПени);
		Иначе
			ОбщиеДанные.Вставить("КОплатеПениДляШК",                0);
			ОбщиеДанные.Вставить("КОплатеПениСУчетомНачСальдоПени", 0);
		КонецЕсли;
	Иначе
		ОбщиеДанные.Вставить("КОплатеПениДляШК",                КОплатеПениДляШК);
		ОбщиеДанные.Вставить("КОплатеПениСУчетомНачСальдоПени", КОплатеПениСУчетомНачСальдоПени);
	КонецЕсли;
	
	Если НЕ ВидМакета = Макеты.Стандартный43Пр Тогда
		ВсегоКОплате = ?(УчитыватьПени, ВсегоКОплате + СуммаПени, ВсегоКОплате);
	КонецЕсли;
	
	СуммаКомиссии = ПолучитьСуммуКомиссии(ВсегоКОплате, КомиссияБанка, ВариантУчетаКомиссииБанка);
	
	ОбщиеДанные.Вставить("СуммаКомиссии", СуммаКомиссии);
	
	Если СуммаКомиссии > 0 Тогда
		
		ВсегоКОплате = ВсегоКОплате + СуммаКомиссии;
		
		ОбщиеДанные.Вставить("ТекстКомиссия", "Комиссия (" + КомиссияБанка + "%):");
		
	КонецЕсли;
	
	Если ВидМакета = Макеты.Стандартный
	 ИЛИ ВидМакета = Макеты.СтандартныйКР
	 ИЛИ ВидМакета = Макеты.СПолямиБанка1 Тогда
		
		// В платежных документах жильцов, у которых прямые взаиморасчеты с поставщиками услуг, выводим в качестве
		// итоговой суммы к оплате результат сложения сумм к оплате по услугам поставщиков.
		
		ВсегоКОплате  = 0;
		Переплаты     = 0;
		
		Для Каждого ТекущаяСтрока Из ТекущиеДанные.ТаблицаПоставщиков Цикл
			
			Если ТекущаяСтрока.ВсегоКОплате > 0 Тогда
				
				ВсегоКОплате = ВсегоКОплате + ТекущаяСтрока.ВсегоКОплате;
				
			ИначеЕсли ТекущаяСтрока.ВсегоКОплате < 0 Тогда
				
				Переплаты = Переплаты + ТекущаяСтрока.ВсегоКОплате;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Согласно настройке "Выводить отрицательную сумму к оплате" получаем сумму к оплате:
		Если СтруктураНастроек.ВыводитьОтрицательнуюСуммуКОплате
		   И ВсегоКОплате = 0
		   И Переплаты < 0 Тогда
			ВсегоКОплате = Переплаты;
		КонецЕсли;
		
	Иначе
		
		Если НЕ СтруктураНастроек.ВыводитьОтрицательнуюСуммуКОплате И ВсегоКОплате < 0 Тогда
			
			ВсегоКОплате = 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщиеДанные.Вставить("ВсегоКОплате",          Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=0,00"));
	ОбщиеДанные.Вставить("ВсегоКОплатеДляШК",     Окр(?(ВсегоКОплате < 0, 0, ВсегоКОплате), 2));
	ОбщиеДанные.Вставить("ВсегоКОплатеДляОтбора", ВсегоКОплате);
	
	// Если итоговая сумма к оплате отрицательная, то она не должна уменьшать итоговую сумму к оплате с учетом
	// добровольного страхования.
	ВсегоКОплате = ?(ВсегоКОплате < 0, 0, ВсегоКОплате) + НачисленоДобровольноеСтрахование;
	
	ОбщиеДанные.Вставить("ВсегоКОплатеСДобровольнымСтрахованием",      Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=0,00"));
	ОбщиеДанные.Вставить("ВсегоКОплатеСДобровольнымСтрахованиемДляШК", Окр(?(ВсегоКОплате < 0, 0, ВсегоКОплате), 2));
	
	// Если в текущем месяце начислили добровольное страхование, то в случае оплаты действовать оно будет через 2 месяца.
	ОбщиеДанные.Вставить("МесяцНачисленияДобровольногоСтрахования", Формат(ДобавитьМесяц(СтруктураНастроек.ПериодПросмотра, 2), "ДФ='MMMM yyyy'") + " г.");
	
КонецПроцедуры // ПолучитьИнформациюОбИтоговойСуммеКОплате()

// Подготавливает таблицу со сведениями о поставщиках услуг по текущему л/с.
// 
// Параметры
//  Таблица - общая таблица со сведениями о поставщиках
//  ТаблицаНачисления - таблица начисления по текущему л/с
//  СтруктураНастроек - структура с пользовательскими настройками.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями о поставщиках.
// 
Функция ПолучитьДанныеОПоставщикахПоТекущемуОбъекту(СтруктураОбщихТаблиц, СтруктураНастроек, ОбщиеДанные)
	
	СтруктураОтбора = Новый Структура("ЛицевойСчет", ОбщиеДанные.ЛицевойСчет);
	
	Если НЕ (СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт"
	   И НЕ СтруктураНастроек.СписокУслугКапРемонт.Количество() = 0) Тогда
		
		СтруктураОтбора.Вставить("ЭтоСведенияПоКапРемонту", ОбщиеДанные.КвитанцияНаКР);
	КонецЕсли;
	
	Если ОбщиеДанные.КвитанцияПоПени Тогда
		ТаблицаПоставщиков = СтруктураОбщихТаблиц.ТаблицаПениПоставщиковОбщ.Скопировать(СтруктураОтбора);
	Иначе
		ТаблицаПоставщиков = СтруктураОбщихТаблиц.ТаблицаПоставщиковОбщ.Скопировать(СтруктураОтбора);
	КонецЕсли;
	
	ПоляГруппировки = "ЛицевойСчет, Поставщик, РасчетныйСчетСсылка, ЭтоСведенияТекущейОрганизации, ЭтоСведенияПоКапРемонту";
	
	ТаблицаПоставщиковГруппировки = ТаблицаПоставщиков.Скопировать();
	ТаблицаПоставщиковГруппировки.Свернуть(ПоляГруппировки, "ВсегоКОплате, СуммаПениДляQRСУчетомНачСальдоПени, СуммаПени, НачальноеСальдо, СуммаНачисления, ВсегоОплат");
	
	ТаблицаПоставщиковИсходящая = ТаблицаПоставщиков.СкопироватьКолонки();
	ТаблицаПоставщиковИсходящая.Колонки.Добавить("ВидыУслуг", Новый ОписаниеТипов("Массив"));
	
	Отбор = Новый Структура(ПоляГруппировки);
	
	Для Каждого ТекущаяСтрока Из ТаблицаПоставщиковГруппировки цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрока);
		
		УслугиПоставщика = ТаблицаПоставщиков.НайтиСтроки(Отбор);
		
		СтрокаИсходящейТаблицы = ТаблицаПоставщиковИсходящая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИсходящейТаблицы, УслугиПоставщика[0]);
		ЗаполнитьЗначенияСвойств(СтрокаИсходящейТаблицы, ТекущаяСтрока);
		
		Для каждого ТекУслугаПоставщика из УслугиПоставщика Цикл
			СтрокаИсходящейТаблицы.ВидыУслуг.Добавить(ТекУслугаПоставщика.НаименованиеВидаУслуги);
		КонецЦикла;
		
		СтрокаИсходящейТаблицы.ВсегоКОплате = СтрокаИсходящейТаблицы.ВсегоКОплате
								   + ПолучитьСуммуКомиссии(СтрокаИсходящейТаблицы.ВсегоКОплате, СтруктураНастроек.КомиссияБанка, СтруктураНастроек.ВариантУчетаКомиссииБанка);
		
	КонецЦикла;
	
	КоличествоДанных = ТаблицаПоставщиковИсходящая.Количество();
	
	// Сдвинем строки со сведениями по кап ремонту и сведения текущей организации в конец таблицы.
	Если НЕ КоличествоДанных = 0 Тогда
		
		СтрокаКР = ТаблицаПоставщиковИсходящая.Найти(Истина, "ЭтоСведенияПоКапРемонту");
		Если НЕ СтрокаКР = Неопределено Тогда
			Смещение = ТаблицаПоставщиковИсходящая.Индекс(СтрокаКР) - КоличествоДанных + 1;
			ТаблицаПоставщиковИсходящая.Сдвинуть(СтрокаКР, -Смещение);
		КонецЕсли;
		
		СтрокаУО = ТаблицаПоставщиковИсходящая.Найти(Истина, "ЭтоСведенияТекущейОрганизации");
		Если НЕ СтрокаУО = Неопределено Тогда
			Смещение = ТаблицаПоставщиковИсходящая.Индекс(СтрокаУО) - КоличествоДанных + 1;
			ТаблицаПоставщиковИсходящая.Сдвинуть(СтрокаУО, -Смещение);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПорядковыеНомераПоставщиков(ТаблицаПоставщиковИсходящая);
	
	Возврат ТаблицаПоставщиковИсходящая;
	
КонецФункции // ПолучитьДанныеОПоставщикахПоТекущемуОбъекту()

// Получает данные о поставщиках по текущему объекту.
//
Функция ПолучитьДанныеОПоставщикахПоТекущемуОбъектуПоВидамУслуг(ТаблицаПоставщиков, Здание)
	
	Строки = ТаблицаПоставщиков.НайтиСтроки(Новый Структура("Здание", Здание));
	
	Возврат ТаблицаПоставщиков.Скопировать(Строки, "ВидУслуги, Код");
	
КонецФункции

// Получает сумму начисленных пеней на текущий л/с. 
// 
// Параметры:
//  ТаблицаПени - общая таблица пени
//  ЛицевойСчет - текущий лицевой счет.
//
// Возвращаемое значение:
//  Число - сумма пени.
//
Функция ПолучитьСуммуПениПоТекущемуЛС(ТаблицаПени, ЛицевойСчет)
	
	СтрокиПениЛС = ТаблицаПени.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет));
	
	Если СтрокиПениЛС.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		втТаблицаПени = ТаблицаПени.Скопировать(СтрокиПениЛС);
		Возврат втТаблицаПени.Итог("СуммаПени");
	КонецЕсли;
	
КонецФункции // ПолучитьСуммуПениПоТекущемуЛС()

// Получает сумму оплаченных пеней на текущий л/с. 
// 
// Параметры:
//  ТаблицаОплатПени - общая таблица оплат пени
//  ЛицевойСчет - текущий лицевой счет.
//
// Возвращаемое значение:
//  Число - сумма оплаты по пени.
//
Функция ПолучитьСуммуОплатыПениПоТекущемуЛС(ТаблицаОплатПени, ЛицевойСчет)
	
	СтрокиОплатыПениЛС = ТаблицаОплатПени.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет));
	
	Если СтрокиОплатыПениЛС.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		втТаблицаОплатПени = ТаблицаОплатПени.Скопировать(СтрокиОплатыПениЛС);
		Возврат втТаблицаОплатПени.Итог("СуммаОплатыПени");
	КонецЕсли;
	
КонецФункции // ПолучитьСуммуОплатыПениПоТекущемуЛС()

// Подготавливает структуру со сведениями о начальном сальдо по текущему л/с.
//
// Параметры:
//  ТаблицаСальдо - общая таблица с начальным сальдо
//  ЛицевойСчет - текущий л/с
//  ВыводитьНачальноеСальдо - пользовательская настройка.
//
// Возвращаемое значение:
//  Структура- структура со сведениями о начальном сальдо.
//
Функция ПолучитьНачальноеСальдоПоТекущемуЛС(ТаблицаСальдо, ЛицевойСчет, ВыводитьНачальноеСальдо) Экспорт
	
	СтруктураНачСальдо = Новый Структура("НачальноеСальдо, НачальноеСальдоБезПени, НачальноеСальдоПени", 0, 0, 0);
	
	ТекТаблицаСальдо = ТаблицаСальдо.Скопировать(Новый Структура("ЛицевойСчет", ЛицевойСчет));
	ТекТаблицаСальдо.Свернуть(, "НачальноеСальдо, НачальноеСальдоБезПени, НачальноеСальдоПени");
	
	Если ТекТаблицаСальдо.Количество() = 1 Тогда
		СтрокаНачСальдо = ТекТаблицаСальдо[0];
		
		СтруктураНачСальдо.НачальноеСальдо          = СтрокаНачСальдо.НачальноеСальдо;
		СтруктураНачСальдо.НачальноеСальдоБезПени   = СтрокаНачСальдо.НачальноеСальдоБезПени;
		СтруктураНачСальдо.НачальноеСальдоПени      = СтрокаНачСальдо.НачальноеСальдоПени;
	КонецЕсли;
	
	Возврат СтруктураНачСальдо;
	
КонецФункции // ПолучитьНачальноеСальдоПоТекущемуЛС()

// Подготавливает таблицу начислений по текущему л/с.
//
// Параметры:
//  СтруктураОбщихТаблиц - структура с таблица данных по всем л/с отчета
//  ТекущиеДанные - стуктура с данными по текущему л/с
//  ОбщиеДанные - структура с общими данными
//  СтруктураНастроек - структура с пользовательскими настройками.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица начисления.
//
Функция ПолучитьТаблицуНачисленияПоТекущемуОбъекту(СтруктураОбщихТаблиц, ТекущиеДанные, ОбщиеДанные, СтруктураНастроек)
	
	ВидМакета               = СтруктураНастроек.ВидМакета;
	ВидыПлатежныхДокументов = Перечисления.УПЖКХ_ВидыПлатежныхДокументов;
	
	// Выбираем из общей таблицы начислений начисления по текущему л/с.
	ТаблицаСНачислениями = ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаНачисленияОбщ, "ЛицевойСчет", ОбщиеДанные.ЛицевойСчет);
	
	ТекущиеДанные.Вставить("ТаблицаСНачислениями", ТаблицаСНачислениями);
	
	ДополнитьТаблицуНачисленияПоТекущемуОбъектуСуммамиПениНачальноеСальдоИОплаты(ТаблицаСНачислениями,
																			СтруктураОбщихТаблиц.ТаблицаСальдоОбщПоВидамУслуг,
																			СтруктураОбщихТаблиц.ТаблицаОплатОбщПоВидамУслуг,
																			СтруктураОбщихТаблиц.ТаблицаПениОбщПоВидамУслуг,
																			ОбщиеДанные,
																			СтруктураНастроек);
	
	// Сортируем таблицу начисления по текущему л/с в соответствии с порядком услуг, заданным пользователем на форме настроек.
	СортироватьТаблицуНачислений(ТаблицаСНачислениями, СтруктураНастроек);
	
	ТаблицаНачисления = ТаблицаСНачислениями.СкопироватьКолонки();
	
	// Компонуем и детализируем начисления.
	СкомпоноватьНачисления(ТекущиеДанные, ТаблицаНачисления, ОбщиеДанные, СтруктураНастроек,, СтруктураОбщихТаблиц);
	
	// Записываем в таблицу начисления сведениями по счетчикам.
	ДополнитьНачисленияПоказаниямиИРасходомПоСчетчикам(ТаблицаНачисления, ТекущиеДанные.ТаблицаСчетчиков, ТекущиеДанные.ТаблицаРасходаПоСчетчикам,
														СтруктураОбщихТаблиц.ТаблицаСвязанныхУслуг);
	
	// Получим представление постфикса для наименования услуг СОИ.
	ПараметрыФормированияПД = СтруктураНастроек.ПараметрыФормированияПД;
	ПостфиксДляУслугСОИ     = ПараметрыФормированияПД.ПредставлениеУслугСОИ;
	
	// В соответствии с Постановлением №1498 от 26.12.2016 ОДН по ГВС, ХВС, ЭЭ и ВО надо выводить отдельной строкой, отнеся его к содержанию общего имущества.
	// Тепловую энергию - в соответстви с письмом Минстроя №4275 от 14.02.2017 г.
	ПерекомпоноватьТаблицуНачисленияСУчетомПостановления1498(ТаблицаНачисления, СтруктураНастроек, ОбщиеДанные, ПостфиксДляУслугСОИ);
	
	// Сворачиваем начисления по видам услуг в соответствии с настройками, указанными пользователем.
	СвернутьТаблицуНачисления(ТаблицаНачисления, СтруктураНастроек.ТаблицаВидовУслуг, , , СтруктураНастроек);
	
	// Добавляем в таблицу начисления строку с итоговыми показателями.
	Если Не ТаблицаСНачислениями.Количество() = 0 Тогда
		ДобавитьСтрокуИтоговВТаблицуНачисления(ТаблицаСНачислениями, ТаблицаНачисления, СтруктураНастроек.ЛьготыСправочно);
	КонецЕсли;
	
	// Для платежного документа "Плат. документ (пост. №679/30 для МО)" и "Плат. документ (приказ №43/пр)" перекомпонуем таблицу начислений.
	Если ВидМакета = ВидыПлатежныхДокументов.Москва679
	 ИЛИ ВидМакета = ВидыПлатежныхДокументов.Стандартный43Пр Тогда
		ТаблицаНачисления = ПолучитьТаблицуНачисленийДляМосква679Стандартный43Пр(ТаблицаНачисления, СтруктураНастроек, ОбщиеДанные.КвитанцияПоПени);
	КонецЕсли;
	
	Возврат ТаблицаНачисления;
	
КонецФункции // ПолучитьТаблицуНачисленияПоТекущемуОбъекту()

// Добавляет на первую позицию таблицы начисления строку с итоговыми суммовыми показателями.
//
// Параметры:
//  ТаблицаСНачислениями - нескомпонованная таблица начисления по текущему л/с
//  ТаблицаНачисления - таблица начисления по текущему л/с
//  ЛьготыСправочно - пользовательская настройка.
//
Процедура ДобавитьСтрокуИтоговВТаблицуНачисления(ТаблицаСНачислениями, ТаблицаНачисления, ЛьготыСправочно)
	
	ИтогоНачисленоИПУ  = ТаблицаСНачислениями.Итог("НачисленоИПУ");
	ИтогоНачисленоОПУ  = ТаблицаСНачислениями.Итог("НачисленоОПУ");
	ИтогоНачислено     = ТаблицаСНачислениями.Итог("Начислено");
	ИтогоПовышение     = ТаблицаСНачислениями.Итог("СуммаПовышения");
	ИтогоПерерасчет    = ТаблицаСНачислениями.Итог("Перерасчет");
	ИтогоПерерасчетИнд = ТаблицаСНачислениями.Итог("ПерерасчетИнд");
	ИтогоПерерасчетОДН = ТаблицаСНачислениями.Итог("ПерерасчетОДН");
	ИтогоЛьгота        = ТаблицаСНачислениями.Итог("Льгота");
	
	СтрокаИтогов = ТаблицаНачисления.Вставить(0);
	СтрокаИтогов.НачисленоИПУ   = ИтогоНачисленоИПУ;
	СтрокаИтогов.НачисленоОПУ   = ИтогоНачисленоОПУ;
	СтрокаИтогов.Начислено      = ИтогоНачислено;
	СтрокаИтогов.СуммаПовышения = ИтогоПовышение;
	СтрокаИтогов.Перерасчет     = ИтогоПерерасчет;
	СтрокаИтогов.ПерерасчетИнд  = ИтогоПерерасчетИнд;
	СтрокаИтогов.ПерерасчетОДН  = ИтогоПерерасчетОДН;
	СтрокаИтогов.Льгота         = ИтогоЛьгота;
	СтрокаИтогов.КОплате        = ИтогоНачислено + ИтогоПовышение + СтрокаИтогов.Перерасчет - ?(ЛьготыСправочно, 0, ИтогоЛьгота);
	
КонецПроцедуры // ДобавитьСтрокуИтоговВТаблицуНачисления()

// В соответствии с Постановлением №1498 от 26.12.2016 ОДН по ГВС, ХВС, ЭЭ и ВО надо выводить отдельной строкой,
// отнеся его к содержанию общего имущества.
// Тепловую энергию - в соответстви с письмом Минстроя №4275 от 14.02.2017 г.
// Текущая процедура компонует таблицу начисления так, чтобы начисления по данным услугам выводились отдельной строкой.
Процедура ПерекомпоноватьТаблицуНачисленияСУчетомПостановления1498(ТаблицаНачисления, СтруктураНастроек, ОбщиеДанные, ПостфиксДляУслугСОИ)
	
	ПериодПросмотра = СтруктураНастроек.ПериодПросмотра;
	ВидМакета       = СтруктураНастроек.ВидМакета;
	
	Если Не СтруктураНастроек.ПараметрыУПОтказ Тогда
		НеУчитыватьЛьготы = СтруктураНастроек.ПараметрыУП.НеУчитыватьЛьготыВоВзаиморасчетах;
	Иначе
		НеУчитыватьЛьготы = Ложь;
	КонецЕсли;
	
	// В постановлении сказано, что подобный вывод должен использоваться в квитанциях, начиная с Января 2017 года.
	Если ПериодПросмотра < Дата(2017, 01, 01) Тогда
		ТаблицаНачисления.ЗаполнитьЗначения(Ложь, "СтрокаДляОбщегоИмущества");
		
		Возврат;
	КонецЕсли;
	
	ТаблицаНачисления1498 = ТаблицаНачисления.СкопироватьКолонки();
	
	МассивСтрокДляАнализа = Новый Массив;
	
	Для Каждого СтрокаНачисления Из ТаблицаНачисления Цикл
		
		Если СтрокаНачисления.ОДНОтноситсяКОбщемуИмуществу Тогда
			// Если есть инд. начисление и ОДН, то для ОДН выводим отдельную строку.
			// Если есть перерасчет индивидуальных начислений, то обязательно выводим отдельную строку для инд. начислений.
			Если Не (СтрокаНачисления.КоличествоИПУ = 0 И СтрокаНачисления.ПерерасчетИнд = 0) И Не (СтрокаНачисления.КоличествоОПУ = 0 И СтрокаНачисления.ПерерасчетОДН = 0) Тогда
				НоваяСтрока = ТаблицаНачисления1498.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				НоваяСтрока.СтрокаДляОбщегоИмущества = Ложь;
				
				МассивСтрокДляАнализа.Добавить(СтрокаНачисления);
				
				НоваяСтрока.КоличествоОПУ        = 0;
				НоваяСтрока.НачисленоОПУ         = 0;
				НоваяСтрока.Начислено            = НоваяСтрока.Начислено - СтрокаНачисления.НачисленоОПУ;
				НоваяСтрока.КодВидаНачисленийОПУ = "";
				
				Если Не НоваяСтрока.СтрокаДетализацииТариф Тогда
					
					НоваяСтрока.Перерасчет           = СтрокаНачисления.Перерасчет - СтрокаНачисления.ПерерасчетОДН;
					НоваяСтрока.ПерерасчетИнд        = СтрокаНачисления.ПерерасчетИнд;
					НоваяСтрока.ПерерасчетОДН        = 0;
					НоваяСтрока.КОплате              = СтрокаНачисления.НачисленоИПУ + СтрокаНачисления.СуммаПовышения + СтрокаНачисления.Перерасчет 
													 - СтрокаНачисления.ПерерасчетОДН - ?(НеУчитыватьЛьготы, 0, СтрокаНачисления.Льгота);
					НоваяСтрока.КоплатеИПУ           = НоваяСтрока.КОплате;
					НоваяСтрока.КоплатеОПУ           = 0;
				КонецЕсли;
				
				НоваяСтрока.РазмерНормыОбщ       = 0;
				НоваяСтрока.ПредПоказанияОбщ     = "";
				НоваяСтрока.ТекПоказанияОбщ      = "";
				НоваяСтрока.ОбщРасходОбщ         = 0;
				НоваяСтрока.ОбщРасходПоОПУ       = 0;
				НоваяСтрока.ОбъемПотребленияОПУ  = "";
				
			ИначеЕсли Не СтрокаНачисления.КоличествоОПУ = 0 Тогда
				МассивСтрокДляАнализа.Добавить(СтрокаНачисления);
			Иначе
				НоваяСтрока = ТаблицаНачисления1498.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				// Если по коммунальной услуге (в справочнике "Услуги" указано значение "Коммунальный ресурс"),
				// были начисления, тогда помечаем строку услуги как сведения по услуге СОИ.
				Если НЕ СтрокаНачисления.УслугаСНачислениями И НоваяСтрока.ЭтоКоммунальнаяУслуга И НЕ СтрокаНачисления.КОплатеОПУ = 0 Тогда
					НоваяСтрока.СтрокаДляОбщегоИмущества = Истина;
					НоваяСтрока.ВидДляВывода = НоваяСтрока.ВидДляВывода + ПостфиксДляУслугСОИ;
				Иначе
					НоваяСтрока.СтрокаДляОбщегоИмущества = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			НоваяСтрока = ТаблицаНачисления1498.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			НоваяСтрока.СтрокаДляОбщегоИмущества = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Эту площадь будем подставлять в качестве объема потребления в ПД для Чувашии.
	Если ОбщиеДанные.Свойство("ОбщаяПлощадьДляСОИ") Тогда
		ПлощадьДляСОИ = ОбщиеДанные.ОбщаяПлощадьДляСОИ;
	Иначе
		ПлощадьДляСОИ = 0;
	КонецЕсли;
	
	// Эту единицу измерения будем подставлять в ПД для Чувашии.
	Если ОбщиеДанные.Свойство("КвадратныеМетры") Тогда
		КвадратныеМетры = ОбщиеДанные.КвадратныеМетры;
	Иначе
		КвадратныеМетры = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	Для Каждого СтрокаДляАнализа Из МассивСтрокДляАнализа Цикл
		НоваяСтрока = ТаблицаНачисления1498.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляАнализа);
		НоваяСтрока.СтрокаДляОбщегоИмущества = Истина;
		
		Если Найти(НоваяСтрока.ВидДляВывода, ":") = 0 Тогда
			Если Не НоваяСтрока.СтрокаДетализацииТариф И Не НоваяСтрока.СтрокаДетализацииСост Тогда
				НоваяСтрока.ВидДляВывода = НоваяСтрока.ВидДляВывода + ПостфиксДляУслугСОИ;
			КонецЕсли;
			
		Иначе
			НоваяСтрока.ВидДляВывода = СтрЗаменить(НоваяСтрока.ВидДляВывода, ":", ПостфиксДляУслугСОИ + ":");
		КонецЕсли;
		
		// Перерасчитываем объем потребления и тариф в соответствии с рекомендациями ЖилИнспекции Чувашии.
		Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Чебоксары И Не ПлощадьДляСОИ = 0 Тогда
			НоваяСтрока.КоличествоОПУ  = ПлощадьДляСОИ;
			
			// Для итоговых строк детализации тариф не выводим.
			Если Не ПустаяСтрока(НоваяСтрока.ТарифДляВывода) Тогда
				НоваяСтрока.Тариф          = ОКР(НоваяСтрока.НачисленоОПУ / ПлощадьДляСОИ, 3);
				НоваяСтрока.ТарифДляВывода = Строка(НоваяСтрока.Тариф);
			КонецЕсли;
			
			// Указываем единицу измерения только в тех строках, в которых она должна выводиться.
			Если ЗначениеЗаполнено(НоваяСтрока.ЕдИзм) И ЗначениеЗаполнено(КвадратныеМетры) Тогда
				НоваяСтрока.ЕдИзм = КвадратныеМетры;
			КонецЕсли;
		КонецЕсли;
		
		// Если по услуге было только ОДН, а инд. начисления или перерасчета инд. начислений не было, такие показатели, как перерасчет, льготы, начальное сальдо итд выводим в строке с ОДН.
		Если Не СтрокаДляАнализа.КоличествоИПУ = 0 Или Не СтрокаДляАнализа.ПерерасчетИнд = 0 Тогда
			НоваяСтрока.НачальноеСальдо      = 0;
			НоваяСтрока.Оплата               = 0; 
			НоваяСтрока.Пени                 = 0;
			НоваяСтрока.Льгота               = 0;
			НоваяСтрока.Перерасчет           = СтрокаДляАнализа.ПерерасчетОДН;
			НоваяСтрока.ПерерасчетИнд        = 0;
			НоваяСтрока.ПерерасчетОДН        = СтрокаДляАнализа.ПерерасчетОДН;
			НоваяСтрока.КоличествоИПУ        = 0;
			НоваяСтрока.НачисленоИПУ         = 0;
			НоваяСтрока.Начислено            = СтрокаДляАнализа.НачисленоОПУ;
			НоваяСтрока.КодВидаНачисленийИПУ = "";
			Если Не НоваяСтрока.СтрокаДетализацииТариф Тогда
				НоваяСтрока.КОплате              = СтрокаДляАнализа.НачисленоОПУ + СтрокаДляАнализа.ПерерасчетОДН;
				НоваяСтрока.КоплатеИПУ           = 0;
				НоваяСтрока.КоплатеОПУ           = НоваяСтрока.КОплате;
			КонецЕсли;
			НоваяСтрока.РазмерНормы           = 0;
			НоваяСтрока.ПредПоказанияИнд      = "";
			НоваяСтрока.ТекПоказанияИнд       = "";
			НоваяСтрока.ОбщРасходИнд          = 0;
			НоваяСтрока.ОбщРасходИндПУ        = 0;
			НоваяСтрока.ОбщРасходИндНорма     = 0;
			НоваяСтрока.ОбъемПотребленияИПУ   = "";
			НоваяСтрока.ОбщРасходРасхождение  = 0;
			НоваяСтрока.ОбщУчетныйРасход      = 0;
			НоваяСтрока.ПовышающийКоэффициент = 0;
			НоваяСтрока.СуммаПовышения        = 0;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаНачисления = ТаблицаНачисления1498.Скопировать();
	
КонецПроцедуры // ПерекомпоноватьТаблицуНачисленияСУчетомПостановления1498()

// Обрабатывает таблицу со всеми начислениями по текущему лицевому счету, компонуя
// строки начисления, детализируя по видам тарифов и по составляющим услугам.
//
// Параметры:
//  ТекущиеДанные - структура с данными по текущему л/с
//  ТаблицаНачисления - таблица начисления по текущему л/с
//  ОбщиеДанные - структура с общими данными
//  СтруктураНастроек - структура с пользовательскими настройками.
//
Процедура СкомпоноватьНачисления(ТекущиеДанные, ТаблицаНачисления, ОбщиеДанные, СтруктураНастроек, ТекущаяКвитанцияПоПеням = Ложь, СтруктураОбщихТаблиц = Неопределено)
	
	Если СтруктураОбщихТаблиц = Неопределено Тогда
		КэшТарифовУслугЛицевыхСчетов  = Неопределено;
		ТаблицаЛицевыхСчетовПоЗданиям = Неопределено;
	Иначе
		КэшТарифовУслугЛицевыхСчетов  = СтруктураОбщихТаблиц.КэшТарифовУслугЛицевыхСчетов;
		ТаблицаЛицевыхСчетовПоЗданиям = СтруктураОбщихТаблиц.ТаблицаЛицевыхСчетовПоЗданиям;
	КонецЕсли;
	
	ЛицевойСчет           = ОбщиеДанные.ЛицевойСчет;
	ТаблицаСНачислениями  = ТекущиеДанные.ТаблицаСНачислениями;
	ТаблицаЛьготСправочно = ТекущиеДанные.ТаблицаЛьготСправочно;
	ТаблицаНорм           = ТекущиеДанные.ТаблицаНорм;
	
	ТаблицаУслуг = ТаблицаСНачислениями.Скопировать(, "Услуга, ВидУслуги, СпособВыводаВКвитанциях, ЕдИзм, ЕдИзмНаименование, УслугаЯвляетсяСоставной, УслугаПоСчетчикам, УслугаСоставнаяПоСчетчикам, УслугаСНачислениями, НачальноеСальдо, Оплата, ОДНОтноситсяКОбщемуИмуществу, Пени, ЭтоКоммунальнаяУслуга");
	ТаблицаУслуг.Свернуть("Услуга, ВидУслуги, СпособВыводаВКвитанциях, ЕдИзм, ЕдИзмНаименование, УслугаЯвляетсяСоставной, УслугаПоСчетчикам, УслугаСоставнаяПоСчетчикам, УслугаСНачислениями, НачальноеСальдо, Оплата, ОДНОтноситсяКОбщемуИмуществу, Пени, ЭтоКоммунальнаяУслуга");
	
	ТаблицаНачисления.Колонки.Добавить("ВидДляВывода",            Новый ОписаниеТипов("Строка"));
	ТаблицаНачисления.Колонки.Добавить("КОплате",                 Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("РазмерНормы",             Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("РазмерНормыОбщ",          Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("ТарифДляВывода",          Новый ОписаниеТипов("Строка"));
	ТаблицаНачисления.Колонки.Добавить("ОбщИДнТарифыНеРавны",     Новый ОписаниеТипов("Булево"));
	ТаблицаНачисления.Колонки.Добавить("СтрокаДетализацииСост",   Новый ОписаниеТипов("Булево"));
	ТаблицаНачисления.Колонки.Добавить("СтрокаДетализацииТариф",  Новый ОписаниеТипов("Булево"));
	ТаблицаНачисления.Колонки.Добавить("СтрокаГруппыДетализации", Новый ОписаниеТипов("Булево"));
	
	// Получаем список лицевых счетов здания для получения размеров норм потребления по услугам.
	Если Не ТекущаяКвитанцияПоПеням Тогда
		СписокЛицевыхСчетовЗдания             = ПолучитьСписокЛСПоЗданию(ТаблицаЛицевыхСчетовПоЗданиям, ОбщиеДанные.Здание);
		КэшМакетаХарактеристикНормПотребления = ?(ОбщиеДанные.Свойство("КэшМакетаХарактеристикНормПотребления"), ОбщиеДанные.КэшМакетаХарактеристикНормПотребления, Неопределено);
	КонецЕсли;
	
	Для Каждого СтрокаУслуги Из ТаблицаУслуг Цикл
		
		Услуга = СтрокаУслуги.Услуга;
		
		// Ищем размер нормы, установленной на текущий л/с. В квитанции по пеням не заполняется.
		РазмерНормыИнд = 0;
		РазмерНормыОбщ = 0;
		Если Не ТекущаяКвитанцияПоПеням Тогда
			
			РазмерНормыИнд = НайтиНормуПотребления(СтруктураНастроек.Организация, СтруктураНастроек.ПериодПросмотра,
												   ТаблицаНорм, ЛицевойСчет, Услуга, СписокЛицевыхСчетовЗдания, КэшМакетаХарактеристикНормПотребления);
			
			РазмерНормыОбщ = НайтиНормуПотребления(СтруктураНастроек.Организация, СтруктураНастроек.ПериодПросмотра,
												   ТаблицаНорм, ОбщиеДанные.Здание, Услуга, СписокЛицевыхСчетовЗдания, КэшМакетаХарактеристикНормПотребления);
			
		КонецЕсли;
		
		Отбор = Новый Структура("Услуга", Услуга);
		ТаблицаПоУслуге  = ТаблицаСНачислениями.Скопировать(Отбор);
		
		// Если в выборке из регистра имеется только одна строка по текущей
		// услуге, начисления по данной услуге компоновать и детализировать
		// не требуется.
		Если ТаблицаПоУслуге.Количество() = 1 Тогда
			СвернутьНачисленияПоУслуге(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, 
									СтруктураНастроек, ТаблицаЛьготСправочно, РазмерНормыИнд, РазмерНормыОбщ, ТекущаяКвитанцияПоПеням,
									КэшТарифовУслугЛицевыхСчетов);
			Продолжить;
		КонецЕсли;
		Если СтрокаУслуги.УслугаПоСчетчикам Тогда
			// Компонуем и детализируем начисления по видам тарифов для услуг со 
			// способом расчета "По показаниям счетчика".
			ДетализироватьПоВидамТарифа(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления,
										СтруктураНастроек, ТаблицаЛьготСправочно, РазмерНормыИнд, РазмерНормыОбщ,
										КэшТарифовУслугЛицевыхСчетов);
			
		ИначеЕсли СтрокаУслуги.УслугаЯвляетсяСоставной Тогда
			// Компонуем и детализируем начисления по составляющим услугам для составных услуг.
			ДетализироватьПоСоставляющимУслугам(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления,
												СтруктураНастроек, ТаблицаЛьготСправочно, РазмерНормыИнд, РазмерНормыОбщ,
												КэшТарифовУслугЛицевыхСчетов);
			
		Иначе
			// Компонуем начисления для всех остальных услуг.
			СвернутьНачисленияПоУслуге(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, СтруктураНастроек,
										ТаблицаЛьготСправочно, РазмерНормыИнд, РазмерНормыОбщ, ТекущаяКвитанцияПоПеням,
										КэшТарифовУслугЛицевыхСчетов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СкомпоноватьНачисления()

// Подготавливает список л/с на основании таблицы л/с по зданиям и выбранного здания.
//
Функция ПолучитьСписокЛСПоЗданию(ТаблицаЛицевыхСчетовПоЗданиям, Здание)
	
	СписокЛС = Неопределено;
	
	Если НЕ ТаблицаЛицевыхСчетовПоЗданиям = Неопределено Тогда
		
		СтрокиЛСПоЗданию = ТаблицаЛицевыхСчетовПоЗданиям.НайтиСтроки(Новый Структура("Здание", Здание));
		
		Если НЕ СтрокиЛСПоЗданию.Количество() = 0 Тогда
			
			ТаблицаЛСВременная = ТаблицаЛицевыхСчетовПоЗданиям.Скопировать(СтрокиЛСПоЗданию, "ЛицевойСчет");
			
			СписокЛС = Новый СписокЗначений;
			СписокЛС.ЗагрузитьЗначения(ТаблицаЛСВременная.ВыгрузитьКолонку("ЛицевойСчет"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокЛС;
	
КонецФункции

// Анализирует таблицу начисления по текущей услуге и при необходимости детализирует
// начисления по видам тарифа. Полученные строки начисления записываются в 
// итоговую таблицу начисления.
// 
// Параметры:
//  СтрокаУслуги - строка начисления по текущей услуге
//  ЛицевойСчет - текущий л/с
//  ТаблицаПоУслуге - таблица с начислениями по текущей услуге
//  ТаблицаНачисления - итоговая таблица начисления
//  СтруктураНастроек - структура с пользовательскими настройками
//  ТаблицаЛьготСправочно - таблица со льготами, начисленными справочно
//  РазмерНормыИнд - размер нормы, установленной на текущий л/с
//  РазмерНормыОбщ - размер нормы, установленной на текущее здание.
//
Процедура ДетализироватьПоВидамТарифа(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления,
									СтруктураНастроек, ТаблицаЛьготСправочно, РазмерНормыИнд, РазмерНормыОбщ,
									КэшТарифовУслугЛицевыхСчетов = Неопределено)
	
	Услуга                  = СтрокаУслуги.Услуга;
	ВидУслуги               = СтрокаУслуги.ВидУслуги;
	СпособВыводаВКвитанциях = СтрокаУслуги.СпособВыводаВКвитанциях;
	ЕдИзм                   = СтрокаУслуги.ЕдИзм;
	ЕдИзмНаименование       = СтрокаУслуги.ЕдИзмНаименование;
	ЭтоКоммунальнаяУслуга   = СтрокаУслуги.ЭтоКоммунальнаяУслуга;
	
	// Перерасчет, который можем однозначно отнести к индивидуальному начислению (сторнирование индивидуальных начислений), учитываем в индивидуальной сумме к оплате.
	// Остальную сумму перерасчета распределяем на индивидуальное и общедомовое начисление пропорционально суммам начисления.
	Перерасчет                 = ТаблицаПоУслуге.Итог("Перерасчет");
	ПерерасчетИнд              = ТаблицаПоУслуге.Итог("ПерерасчетИнд");
	ПерерасчетОДН              = ТаблицаПоУслуге.Итог("ПерерасчетОДН");
	
	// Параметр "ПерерасчетДляРаспределенияБезРазделения" хранит сумму перерасчета, не относящуюся к индивидуальному и общедомовому.
	ПерерасчетДляРаспределенияБезРазделения = Перерасчет - ПерерасчетОДН - ПерерасчетИнд;
	
	Льгота         = ТаблицаПоУслуге.Итог("Льгота");
	КоличествоИПУ  = ТаблицаПоУслуге.Итог("КоличествоИПУ");
	КоличествоОПУ  = ТаблицаПоУслуге.Итог("КоличествоОПУ");
	НачисленоИПУ   = ТаблицаПоУслуге.Итог("НачисленоИПУ");
	НачисленоОПУ   = ТаблицаПоУслуге.Итог("НачисленоОПУ");
	Начислено      = НачисленоИПУ + НачисленоОПУ;
	
	// Сумма повышения может имет место только для начислений по общему виду тарифа. Поэтому соответствующие сведения
	// выводим в итоговой строке и в строке с общим видом тарифа.
	ПовышающийКоэффициент = ОпределитьПовышающийКоэффициентПоТекущейУслуге(ТаблицаПоУслуге);
	СуммаПовышения        = ТаблицаПоУслуге.Итог("СуммаПовышения");
	
	ПорядокВКвитанции   = ТаблицаПоУслуге[0].Порядок;
	УслугаСНачислениями = ТаблицаПоУслуге[0].УслугаСНачислениями;
	
	Оплата          = ТаблицаПоУслуге[0].Оплата;
	Пени            = ТаблицаПоУслуге[0].Пени;
	НачальноеСальдо = ТаблицаПоУслуге[0].НачальноеСальдо;
	
	ИмеетсяСоставнойИндивидуальныйРасход = ТаблицаПоУслуге[0].ИмеетсяСоставнойИндивидуальныйРасход;
	
	// Данный коэффициент отвечает за доли распределения перерасчетов
	// и льгот на итоговые суммы начисления в разрезе типов счетчиков.
	КоэффициентИПУ = ?((НачисленоИПУ + НачисленоОПУ) = 0, 1, НачисленоИПУ / (НачисленоИПУ + НачисленоОПУ));
	
	// Представления тарифов для вывода в квитанциях.
	ПредставлениеТарифаОбщ = "";
	ПредставлениеТарифаДн  = "";
	ПредставлениеТарифаНч  = "";
	ПредставлениеТарифаПк  = "";
	ПредставлениеТарифаБезДетализацииПоВидамТарифов = "";
	
	СтрокаОбщ = ОтборСтрокиПоЗначениюТарифа(ТаблицаПоУслуге, Перечисления.КВП_ВидыТарифов.Общий, ПредставлениеТарифаОбщ);
	СтрокаДн  = ОтборСтрокиПоЗначениюТарифа(ТаблицаПоУслуге, Перечисления.КВП_ВидыТарифов.Дневной, ПредставлениеТарифаДн);
	СтрокаНч  = ОтборСтрокиПоЗначениюТарифа(ТаблицаПоУслуге, Перечисления.КВП_ВидыТарифов.Ночной, ПредставлениеТарифаНч);
	СтрокаПик = ОтборСтрокиПоЗначениюТарифа(ТаблицаПоУслуге, Перечисления.КВП_ВидыТарифов.Пиковый, ПредставлениеТарифаПк);
	
	ЕстьРассрочка = Ложь;
	СтрокиРассрочки = ТаблицаПоУслуге.НайтиСтроки(Новый Структура("ЭтоРассрочка", Истина));
	Если СтрокиРассрочки.Количество() > 0 Тогда
		ЕстьРассрочка = Истина;
	КонецЕсли;
	
	ОДНОтноситсяКОбщемуИмуществу = ОпределитьНадоЛиОтнестиОДНКОбщемуИмуществу(ТаблицаПоУслуге, СтруктураНастроек.ПериодПросмотра);
	
	ДневнойИОбщийТарифыРавны = Истина;
	
	Если НеобходимоДетализироватьПоВидамТарифов(СтрокаОбщ, СтрокаДн, СтрокаНч, СтрокаПик, ДневнойИОбщийТарифыРавны) Тогда
		
		КодВидаНачисленийИПУ = "";
		КодВидаНачисленийОПУ = "";
		// Если имеется рассрочка, то не учитываем строки по рассрочке.
		НайденныеСтроки = ТаблицаПоУслуге.НайтиСтроки(Новый Структура("ЭтоРассрочка", Ложь));
		Если НайденныеСтроки.Количество() > 0 Тогда
			КодВидаНачисленийИПУ = НайденныеСтроки[0].КодВидаНачисленийИПУ;
			КодВидаНачисленийОПУ = НайденныеСтроки[0].КодВидаНачисленийОПУ;
		КонецЕсли;
		
		// Добавляем итоговую строку по услуге.
		НоваяСтрока = ТаблицаНачисления.Добавить();
		
		НоваяСтрока.Услуга                       = Услуга;
		НоваяСтрока.ВидУслуги                    = ВидУслуги;
		НоваяСтрока.ВидДляВывода                 = "" + ВидУслуги + ":";
		НоваяСтрока.СпособВыводаВКвитанциях      = СпособВыводаВКвитанциях;
		НоваяСтрока.ЕдИзм                        = ЕдИзм;
		НоваяСтрока.ЕдИзмНаименование            = ЕдИзмНаименование;
		НоваяСтрока.РазмерНормы                  = РазмерНормыИнд;
		НоваяСтрока.РазмерНормыОбщ               = РазмерНормыОбщ;
		НоваяСтрока.КоличествоИПУ                = КоличествоИПУ;
		НоваяСтрока.КоличествоОПУ                = КоличествоОПУ;
		НоваяСтрока.КодВидаНачисленийИПУ         = КодВидаНачисленийИПУ;
		НоваяСтрока.КодВидаНачисленийОПУ         = КодВидаНачисленийОПУ;
		НоваяСтрока.НачисленоИПУ                 = НачисленоИПУ;
		НоваяСтрока.НачисленоОПУ                 = НачисленоОПУ;
		НоваяСтрока.Начислено                    = Начислено;
		НоваяСтрока.Перерасчет                   = Перерасчет;
		НоваяСтрока.ПерерасчетИнд                = ПерерасчетИнд;
		НоваяСтрока.ПерерасчетОДН                = ПерерасчетОДН;
		НоваяСтрока.Льгота                       = ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, СтруктураНастроек.ЛьготыСправочно);
		НоваяСтрока.КОплатеИПУ                   = НачисленоИПУ + ПерерасчетИнд + СуммаПовышения + ((ПерерасчетДляРаспределенияБезРазделения - Льгота) * КоэффициентИПУ);
		НоваяСтрока.КОплатеОПУ                   = НачисленоОПУ + ПерерасчетОДН + ((ПерерасчетДляРаспределенияБезРазделения - Льгота) * (1 - КоэффициентИПУ));
		НоваяСтрока.КОплате                      = НоваяСтрока.КОплатеИПУ + НоваяСтрока.КОплатеОПУ;
		НоваяСтрока.УслугаПоСчетчикам            = Истина;
		НоваяСтрока.ОбщИДнТарифыНеРавны          = Не ДневнойИОбщийТарифыРавны;
		НоваяСтрока.УслугаСоставнаяПоСчетчикам   = Ложь;
		НоваяСтрока.СтрокаДетализацииСост        = Ложь;
		НоваяСтрока.СтрокаДетализацииТариф       = Ложь;
		НоваяСтрока.Порядок                      = ПорядокВКвитанции;
		НоваяСтрока.УслугаСНачислениями          = УслугаСНачислениями;
		НоваяСтрока.Оплата                       = Оплата;
		НоваяСтрока.Пени                         = Пени;
		НоваяСтрока.НачальноеСальдо              = НачальноеСальдо;
		НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу = ОДНОтноситсяКОбщемуИмуществу;
		НоваяСтрока.ПовышающийКоэффициент        = ПовышающийКоэффициент;
		НоваяСтрока.СуммаПовышения               = СуммаПовышения;
		НоваяСтрока.ЭтоКоммунальнаяУслуга        = ЭтоКоммунальнаяУслуга;
		НоваяСтрока.СтрокаГруппыДетализации      = Истина;
		
		НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
		
		Если ДневнойИОбщийТарифыРавны Тогда
			
			ЕстьСтрокаДн  = Не СтрокаДн = Неопределено;
			ЕстьСтрокаОбщ = Не СтрокаОбщ = Неопределено;
			
			// Дневной и общий виды тарифа. 
			// (выводятся совместно)
			Если ЕстьСтрокаДн Или ЕстьСтрокаОбщ Тогда
				
				Если ЕстьСтрокаДн Тогда
					ВидТарифа        = Перечисления.КВП_ВидыТарифов.Дневной;
					ВидДляВывода     = ?(ЕстьСтрокаОбщ, " - дн. и норм. начисление", " - дн. начисление");
					Тариф            = СтрокаДн.Тариф;
					ТарифДляВывода   = ПредставлениеТарифаДн;
					ТекКоличествоИПУ = СтрокаДн.КоличествоИПУ + ?(ЕстьСтрокаОбщ, СтрокаОбщ.КоличествоИПУ, 0);
					ТекКоличествоОПУ = СтрокаДн.КоличествоОПУ + ?(ЕстьСтрокаОбщ, СтрокаОбщ.КоличествоОПУ, 0);
					ТекНачисленоИПУ  = СтрокаДн.НачисленоИПУ + ?(ЕстьСтрокаОбщ, СтрокаОбщ.НачисленоИПУ, 0);
					ТекНачисленоОПУ  = СтрокаДн.НачисленоОПУ + ?(ЕстьСтрокаОбщ, СтрокаОбщ.НачисленоОПУ, 0);
				Иначе
					ВидТарифа        = Перечисления.КВП_ВидыТарифов.Общий;
					ВидДляВывода     = " - норм. начисление";
					Тариф            = СтрокаОбщ.Тариф;
					ТарифДляВывода   = ПредставлениеТарифаОбщ;
					ТекКоличествоИПУ = СтрокаОбщ.КоличествоИПУ;
					ТекКоличествоОПУ = СтрокаОбщ.КоличествоОПУ;
					ТекНачисленоИПУ  = СтрокаОбщ.НачисленоИПУ;
					ТекНачисленоОПУ  = СтрокаОбщ.НачисленоОПУ;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаНачисления.Добавить();
				
				НоваяСтрока.Услуга                     = Услуга;
				НоваяСтрока.ВидУслуги                  = ВидУслуги;
				НоваяСтрока.ВидТарифа                  = ВидТарифа;
				НоваяСтрока.ВидДляВывода               = ВидДляВывода;
				НоваяСтрока.Тариф                      = Тариф;
				НоваяСтрока.ТарифДляВывода             = ТарифДляВывода;
				НоваяСтрока.КоличествоИПУ              = ТекКоличествоИПУ;
				НоваяСтрока.КоличествоОПУ              = ТекКоличествоОПУ;
				НоваяСтрока.КодВидаНачисленийИПУ       = ТаблицаПоУслуге.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийИПУ;
				НоваяСтрока.КодВидаНачисленийОПУ       = ТаблицаПоУслуге.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийОПУ;
				Если ЕстьРассрочка Тогда
					НоваяСтрока.НачисленоИПУ           = 0;
					НоваяСтрока.НачисленоОПУ           = 0;
				Иначе
					НоваяСтрока.НачисленоИПУ           = ТекНачисленоИПУ;
					НоваяСтрока.НачисленоОПУ           = ТекНачисленоОПУ;
				КонецЕсли;
				НоваяСтрока.Начислено                  = НоваяСтрока.НачисленоИПУ + НоваяСтрока.НачисленоОПУ;
				НоваяСтрока.Перерасчет                 = 0;
				НоваяСтрока.ПерерасчетИнд              = 0;
				НоваяСтрока.ПерерасчетОДН              = 0;
				НоваяСтрока.Льгота                     = 0;
				НоваяСтрока.УслугаПоСчетчикам          = Истина;
				НоваяСтрока.УслугаСоставнаяПоСчетчикам = Ложь;
				НоваяСтрока.СтрокаДетализацииСост      = Ложь;
				НоваяСтрока.СтрокаДетализацииТариф     = Истина;
				НоваяСтрока.Порядок                    = ПорядокВКвитанции;
				НоваяСтрока.УслугаСНачислениями        = УслугаСНачислениями;
				НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу = ОДНОтноситсяКОбщемуИмуществу;
				НоваяСтрока.ПовышающийКоэффициент        = ПовышающийКоэффициент;
				НоваяСтрока.СуммаПовышения               = СуммаПовышения;
				НоваяСтрока.ЭтоКоммунальнаяУслуга        = ЭтоКоммунальнаяУслуга;
				НоваяСтрока.СтрокаГруппыДетализации      = Ложь;
				
				НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
				
			КонецЕсли;
			
		Иначе
			// Общий вид тарифа.
			Если Не СтрокаОбщ = Неопределено Тогда
				НоваяСтрока = ТаблицаНачисления.Добавить();
				
				НоваяСтрока.Услуга                     = Услуга;
				НоваяСтрока.ВидУслуги                  = ВидУслуги;
				НоваяСтрока.ВидТарифа                  = Перечисления.КВП_ВидыТарифов.Общий;
				НоваяСтрока.ВидДляВывода               = " - норм. начисление";
				НоваяСтрока.Тариф                      = СтрокаОбщ.Тариф;
				НоваяСтрока.ТарифДляВывода             = ПредставлениеТарифаОбщ;
				НоваяСтрока.КоличествоИПУ              = СтрокаОбщ.КоличествоИПУ;
				НоваяСтрока.КоличествоОПУ              = СтрокаОбщ.КоличествоОПУ;
				НоваяСтрока.КодВидаНачисленийИПУ       = ТаблицаПоУслуге.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийИПУ;
				НоваяСтрока.КодВидаНачисленийОПУ       = ТаблицаПоУслуге.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийОПУ;
				НоваяСтрока.НачисленоИПУ               = СтрокаОбщ.НачисленоИПУ;
				НоваяСтрока.НачисленоОПУ               = СтрокаОбщ.НачисленоОПУ;
				НоваяСтрока.Начислено                  = НоваяСтрока.НачисленоИПУ + НоваяСтрока.НачисленоОПУ;
				НоваяСтрока.Перерасчет                 = 0;
				НоваяСтрока.ПерерасчетИнд              = 0;
				НоваяСтрока.ПерерасчетОДН              = 0;
				НоваяСтрока.Льгота                     = 0;
				НоваяСтрока.УслугаПоСчетчикам          = Истина;
				НоваяСтрока.ОбщИДнТарифыНеРавны        = Истина;
				НоваяСтрока.УслугаСоставнаяПоСчетчикам = Ложь;
				НоваяСтрока.СтрокаДетализацииСост      = Ложь;
				НоваяСтрока.СтрокаДетализацииТариф     = Истина;
				НоваяСтрока.Порядок                    = ПорядокВКвитанции;
				НоваяСтрока.УслугаСНачислениями        = УслугаСНачислениями;
				НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу = ОДНОтноситсяКОбщемуИмуществу;
				НоваяСтрока.ПовышающийКоэффициент        = ПовышающийКоэффициент;
				НоваяСтрока.СуммаПовышения               = СуммаПовышения;
				НоваяСтрока.ЭтоКоммунальнаяУслуга        = ЭтоКоммунальнаяУслуга;
				НоваяСтрока.СтрокаГруппыДетализации      = Ложь;
				
				НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
				
			КонецЕсли;
			
			// Дневной вид тарифа.
			Если Не СтрокаДн = Неопределено Тогда
				НоваяСтрока = ТаблицаНачисления.Добавить();
				
				НоваяСтрока.Услуга                     = Услуга;
				НоваяСтрока.ВидУслуги                  = ВидУслуги;
				НоваяСтрока.ВидТарифа                  = Перечисления.КВП_ВидыТарифов.Дневной;
				НоваяСтрока.ВидДляВывода               = " - дн. начисление";
				НоваяСтрока.Тариф                      = СтрокаДн.Тариф;
				НоваяСтрока.ТарифДляВывода             = ПредставлениеТарифаДн;
				НоваяСтрока.КоличествоИПУ              = СтрокаДн.КоличествоИПУ;
				НоваяСтрока.КоличествоОПУ              = СтрокаДн.КоличествоОПУ;
				НоваяСтрока.КодВидаНачисленийИПУ       = ТаблицаПоУслуге.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийИПУ;
				НоваяСтрока.КодВидаНачисленийОПУ       = ТаблицаПоУслуге.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийОПУ;
				НоваяСтрока.НачисленоИПУ               = СтрокаДн.НачисленоИПУ;
				НоваяСтрока.НачисленоОПУ               = СтрокаДн.НачисленоОПУ;
				НоваяСтрока.Начислено                  = НоваяСтрока.НачисленоИПУ + НоваяСтрока.НачисленоОПУ;
				НоваяСтрока.Перерасчет                 = 0;
				НоваяСтрока.ПерерасчетИнд              = 0;
				НоваяСтрока.ПерерасчетОДН              = 0;
				НоваяСтрока.Льгота                     = 0;
				НоваяСтрока.УслугаПоСчетчикам          = Истина;
				НоваяСтрока.ОбщИДнТарифыНеРавны        = Истина;
				НоваяСтрока.УслугаСоставнаяПоСчетчикам = Ложь;
				НоваяСтрока.СтрокаДетализацииСост      = Ложь;
				НоваяСтрока.СтрокаДетализацииТариф     = Истина;
				НоваяСтрока.Порядок                    = ПорядокВКвитанции;
				НоваяСтрока.УслугаСНачислениями        = УслугаСНачислениями;
				НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу = ОДНОтноситсяКОбщемуИмуществу;
				НоваяСтрока.ПовышающийКоэффициент        = 0;
				НоваяСтрока.СуммаПовышения               = 0;
				НоваяСтрока.ЭтоКоммунальнаяУслуга        = ЭтоКоммунальнаяУслуга;
				НоваяСтрока.СтрокаГруппыДетализации      = Ложь;
				
				НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
				
			КонецЕсли;
		КонецЕсли;
		
		// Ночной вид тарифа.
		Если Не СтрокаНч = Неопределено Тогда
			НоваяСтрока = ТаблицаНачисления.Добавить();
			
			НоваяСтрока.Услуга                     = Услуга;
			НоваяСтрока.ВидУслуги                  = ВидУслуги;
			НоваяСтрока.ВидТарифа                  = Перечисления.КВП_ВидыТарифов.Ночной;
			НоваяСтрока.ВидДляВывода               = " - нч. начисление";
			НоваяСтрока.Тариф                      = СтрокаНч.Тариф;
			НоваяСтрока.ТарифДляВывода             = ПредставлениеТарифаНч;
			НоваяСтрока.КоличествоИПУ              = СтрокаНч.КоличествоИПУ;
			НоваяСтрока.КоличествоОПУ              = СтрокаНч.КоличествоОПУ;
			НоваяСтрока.КодВидаНачисленийИПУ       = ТаблицаПоУслуге.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийИПУ;
			НоваяСтрока.КодВидаНачисленийОПУ       = ТаблицаПоУслуге.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийОПУ;
			НоваяСтрока.НачисленоИПУ               = СтрокаНч.НачисленоИПУ;
			НоваяСтрока.НачисленоОПУ               = СтрокаНч.НачисленоОПУ;
			НоваяСтрока.Начислено                  = НоваяСтрока.НачисленоИПУ + НоваяСтрока.НачисленоОПУ;
			НоваяСтрока.Перерасчет                 = 0;
			НоваяСтрока.ПерерасчетИнд              = 0;
			НоваяСтрока.ПерерасчетОДН              = 0;
			НоваяСтрока.Льгота                     = 0;
			НоваяСтрока.УслугаПоСчетчикам          = Истина;
			НоваяСтрока.ОбщИДнТарифыНеРавны        = Не ДневнойИОбщийТарифыРавны;
			НоваяСтрока.УслугаСоставнаяПоСчетчикам = Ложь;
			НоваяСтрока.СтрокаДетализацииСост      = Ложь;
			НоваяСтрока.СтрокаДетализацииТариф     = Истина;
			НоваяСтрока.Порядок                    = ПорядокВКвитанции;
			НоваяСтрока.УслугаСНачислениями        = УслугаСНачислениями;
			НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу = ОДНОтноситсяКОбщемуИмуществу;
			НоваяСтрока.ПовышающийКоэффициент        = 0;
			НоваяСтрока.СуммаПовышения               = 0;
			НоваяСтрока.ЭтоКоммунальнаяУслуга        = ЭтоКоммунальнаяУслуга;
			НоваяСтрока.СтрокаГруппыДетализации      = Ложь;
			
			НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
			
		КонецЕсли;
		
		// Пиковый вид тарифа.
		Если Не СтрокаПик = Неопределено Тогда
			НоваяСтрока = ТаблицаНачисления.Добавить();
			
			НоваяСтрока.Услуга                     = Услуга;
			НоваяСтрока.ВидУслуги                  = ВидУслуги;
			НоваяСтрока.ВидТарифа                  = Перечисления.КВП_ВидыТарифов.Пиковый;
			НоваяСтрока.ВидДляВывода               = " - пик. начисление";
			НоваяСтрока.Тариф                      = СтрокаПик.Тариф;
			НоваяСтрока.ТарифДляВывода             = ПредставлениеТарифаПк;
			НоваяСтрока.КоличествоИПУ              = СтрокаПик.КоличествоИПУ;
			НоваяСтрока.КоличествоОПУ              = СтрокаПик.КоличествоОПУ;
			НоваяСтрока.КодВидаНачисленийИПУ       = ТаблицаПоУслуге.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийИПУ;
			НоваяСтрока.КодВидаНачисленийОПУ       = ТаблицаПоУслуге.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийОПУ;
			НоваяСтрока.НачисленоИПУ               = СтрокаПик.НачисленоИПУ;
			НоваяСтрока.НачисленоОПУ               = СтрокаПик.НачисленоОПУ;
			НоваяСтрока.Начислено                  = НоваяСтрока.НачисленоИПУ + НоваяСтрока.НачисленоОПУ;
			НоваяСтрока.Перерасчет                 = 0;
			НоваяСтрока.ПерерасчетИнд              = 0;
			НоваяСтрока.ПерерасчетОДН              = 0;
			НоваяСтрока.Льгота                     = 0;
			НоваяСтрока.УслугаПоСчетчикам          = Истина;
			НоваяСтрока.ОбщИДнТарифыНеРавны        = Не ДневнойИОбщийТарифыРавны;
			НоваяСтрока.УслугаСоставнаяПоСчетчикам = Ложь;
			НоваяСтрока.СтрокаДетализацииСост      = Ложь;
			НоваяСтрока.СтрокаДетализацииТариф     = Истина;
			НоваяСтрока.Порядок                    = ПорядокВКвитанции;
			НоваяСтрока.УслугаСНачислениями        = УслугаСНачислениями;
			НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу = ОДНОтноситсяКОбщемуИмуществу;
			НоваяСтрока.ПовышающийКоэффициент        = 0;
			НоваяСтрока.СуммаПовышения               = 0;
			НоваяСтрока.ЭтоКоммунальнаяУслуга        = ЭтоКоммунальнаяУслуга;
			НоваяСтрока.СтрокаГруппыДетализации      = Ложь;
			
			НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
			
		КонецЕсли;
	Иначе
		
		// Если нет необходимости детализировать начисления по видам тарифов.
		НоваяСтрока = ТаблицаНачисления.Добавить();
		
		Если СтрокаОбщ <> Неопределено Тогда
			ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий;
		ИначеЕсли СтрокаДн <> Неопределено Тогда
			ВидТарифа = Перечисления.КВП_ВидыТарифов.Дневной;
		ИначеЕсли СтрокаНч <> Неопределено Тогда
			ВидТарифа = Перечисления.КВП_ВидыТарифов.Ночной;
		ИначеЕсли СтрокаПик <> Неопределено Тогда
			ВидТарифа = Перечисления.КВП_ВидыТарифов.Пиковый;
		Иначе
			ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий;
		КонецЕсли;
		
		НоваяСтрока.Услуга                     = Услуга;
		НоваяСтрока.ВидУслуги                  = ВидУслуги;
		НоваяСтрока.ВидТарифа                  = ВидТарифа;
		НоваяСтрока.ВидДляВывода               = ВидУслуги;
		НоваяСтрока.ЕдИзм                      = ЕдИзм;
		НоваяСтрока.РазмерНормы                = РазмерНормыИнд;
		НоваяСтрока.РазмерНормыОбщ             = РазмерНормыОбщ;
		НоваяСтрока.Тариф                      = ПолучитьТарифПоУслугеСоСчетчиком(СтруктураНастроек.Организация, СтруктураНастроек.ПериодПросмотра,
																				  ЛицевойСчет, Услуга, СтрокаДн, СтрокаОбщ, СтрокаНч, СтрокаПик,
																				  ПредставлениеТарифаОбщ, ПредставлениеТарифаДн, ПредставлениеТарифаНч,
																				  ПредставлениеТарифаПк, ПредставлениеТарифаБезДетализацииПоВидамТарифов,
																				  КэшТарифовУслугЛицевыхСчетов);
		НоваяСтрока.ТарифДляВывода             = ПредставлениеТарифаБезДетализацииПоВидамТарифов;
		НоваяСтрока.КоличествоИПУ              = КоличествоИПУ;
		НоваяСтрока.КоличествоОПУ              = КоличествоОПУ;
		НоваяСтрока.КодВидаНачисленийИПУ       = ПолучитьКодыНачислений(ТаблицаПоУслуге, НоваяСтрока.ВидТарифа, "КодВидаНачисленийИПУ");
		НоваяСтрока.КодВидаНачисленийОПУ       = ПолучитьКодыНачислений(ТаблицаПоУслуге, НоваяСтрока.ВидТарифа, "КодВидаНачисленийОПУ");
		НоваяСтрока.НачисленоИПУ               = НачисленоИПУ;
		НоваяСтрока.НачисленоОПУ               = НачисленоОПУ;
		НоваяСтрока.Начислено                  = НачисленоИПУ + НачисленоОПУ;
		НоваяСтрока.Перерасчет                 = Перерасчет;
		НоваяСтрока.ПерерасчетИнд              = ПерерасчетИнд;
		НоваяСтрока.ПерерасчетОДН              = ПерерасчетОДН;
		НоваяСтрока.Льгота                     = ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, СтруктураНастроек.ЛьготыСправочно);
		НоваяСтрока.КОплатеИПУ                 = НачисленоИПУ + ПерерасчетИнд + СуммаПовышения + ((ПерерасчетДляРаспределенияБезРазделения - Льгота) * КоэффициентИПУ);
		НоваяСтрока.КОплатеОПУ                 = НачисленоОПУ + ПерерасчетОДН + ((ПерерасчетДляРаспределенияБезРазделения - Льгота) * (1 - КоэффициентИПУ));
		НоваяСтрока.КОплате                    = НоваяСтрока.КОплатеИПУ + НоваяСтрока.КОплатеОПУ;
		НоваяСтрока.УслугаПоСчетчикам          = Истина;
		НоваяСтрока.УслугаСоставнаяПоСчетчикам = Ложь;
		НоваяСтрока.СтрокаДетализацииСост      = Ложь;
		НоваяСтрока.СтрокаДетализацииТариф     = Ложь;
		НоваяСтрока.Порядок                    = ПорядокВКвитанции;
		НоваяСтрока.УслугаСНачислениями        = УслугаСНачислениями;
		НоваяСтрока.Оплата                     = Оплата;
		НоваяСтрока.Пени                         = Пени;
		НоваяСтрока.НачальноеСальдо            = НачальноеСальдо;
		НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу = ОДНОтноситсяКОбщемуИмуществу;
		НоваяСтрока.ПовышающийКоэффициент        = ПовышающийКоэффициент;
		НоваяСтрока.СуммаПовышения               = СуммаПовышения;
		НоваяСтрока.ЭтоКоммунальнаяУслуга        = ЭтоКоммунальнаяУслуга;
		НоваяСтрока.СтрокаГруппыДетализации      = Ложь;
		
		НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
		
	КонецЕсли;
	
КонецПроцедуры // ДетализироватьПоВидамТарифа()

// Производит отбор строк по видам тарифа и, в случае наличия сторнации, по отсутствию перерасчетов. 
//
Функция ОтборСтрокиПоЗначениюТарифа(ТаблицаПоУслуге, ВидТарифа, СтрокаПредставленияТарифа = "")
	
	СтрокаСТарифом = Неопределено;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидТарифа", ВидТарифа);
	НайденныеСтроки = ТаблицаПоУслуге.НайтиСтроки(ПараметрыОтбора);
	
	ТаблицаПоТекущемуВидуТарифу = ТаблицаПоУслуге.Скопировать(НайденныеСтроки);
	Если ТаблицаПоТекущемуВидуТарифу.Количество() = 1 Тогда
		СтрокаСТарифом            = ТаблицаПоТекущемуВидуТарифу[0];
		СтрокаПредставленияТарифа = Строка(СтрокаСТарифом.Тариф);
	ИначеЕсли ТаблицаПоТекущемуВидуТарифу.Количество() > 1 Тогда
		
		// Отсекаем сторнирование начислений, если вид тарифа "Общий".
		
		ПараметрыОтбора.Вставить("Начислено", 0);
		СтрокиДляУдаления = ТаблицаПоТекущемуВидуТарифу.НайтиСтроки(ПараметрыОтбора);
		
		// Происходит удаление строк из таблицы "ТаблицаПоТекущемуВидуТарифу", в которых не заполнено поле "Начислено",
		// т.к. в данные строки не удовлетворяют условиям определения размера по текущему виду тарифа.
		Если СтрокиДляУдаления.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из СтрокиДляУдаления Цикл
				ТаблицаПоТекущемуВидуТарифу.Удалить(ТекСтрока);
			КонецЦикла;
		КонецЕсли;
		
		Если ТаблицаПоТекущемуВидуТарифу.Количество() = 1 Тогда
			СтрокаСТарифом            = ТаблицаПоТекущемуВидуТарифу[0];
			СтрокаПредставленияТарифа = Строка(СтрокаСТарифом.Тариф);
		ИначеЕсли ТаблицаПоТекущемуВидуТарифу.Количество() > 1 Тогда
			
			ПараметрыОтбора.Очистить();
			
			// Если произведено сторнирование за предыдущие периоды и в текущем месяце изменялся размер тарифа по текущему виду тарифа.
			ПараметрыОтбора.Вставить("Перерасчет", 0);
			НайденныеСтроки = ТаблицаПоТекущемуВидуТарифу.НайтиСтроки(ПараметрыОтбора);
			
			КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
			
			Если НЕ КоличествоНайденныхСтрок = 0 Тогда
				
				Если КоличествоНайденныхСтрок = 1 Тогда
					
					НайденнаяСтрока = НайденныеСтроки[0];
					
					СуммаПовышения = НайденнаяСтрока.СуммаПовышения;
					КоличествоИПУ  = НайденнаяСтрока.КоличествоИПУ;
					КоличествоОПУ  = НайденнаяСтрока.КоличествоОПУ;
					НачисленоИПУ   = НайденнаяСтрока.НачисленоИПУ;
					НачисленоОПУ   = НайденнаяСтрока.НачисленоОПУ;
					Начислено      = НачисленоИПУ + НачисленоОПУ;
					
					СтрокаПредставленияТарифа = Строка(НайденнаяСтрока.Тариф);
					
				Иначе
					
					// Суммируем начисления по всем тарифам в рамках текущего вида тарифа.
					СуммаПовышения = ТаблицаПоТекущемуВидуТарифу.Итог("СуммаПовышения");
					КоличествоИПУ  = ТаблицаПоТекущемуВидуТарифу.Итог("КоличествоИПУ");
					КоличествоОПУ  = ТаблицаПоТекущемуВидуТарифу.Итог("КоличествоОПУ");
					НачисленоИПУ   = ТаблицаПоТекущемуВидуТарифу.Итог("НачисленоИПУ");
					НачисленоОПУ   = ТаблицаПоТекущемуВидуТарифу.Итог("НачисленоОПУ");
					Начислено      = НачисленоИПУ + НачисленоОПУ;
					
					СтрокаПредставленияТарифа = "";
					
					Для каждого ТекСтрока из НайденныеСтроки Цикл
						СтрокаПредставленияТарифа = СтрокаПредставленияТарифа + Строка(ТекСтрока.Тариф) + "/";
					КонецЦикла;
					
					СтрокаПредставленияТарифа = Лев(СтрокаПредставленияТарифа, СтрДлина(СтрокаПредставленияТарифа) - 1);
					
				КонецЕсли;
				
				СтрокаСТарифом = НайденныеСтроки[0];
				
				СтрокаСТарифом.СуммаПовышения = СуммаПовышения;
				СтрокаСТарифом.КоличествоИПУ  = КоличествоИПУ;
				СтрокаСТарифом.КоличествоОПУ  = КоличествоОПУ;
				СтрокаСТарифом.НачисленоИПУ   = НачисленоИПУ;
				СтрокаСТарифом.НачисленоОПУ   = НачисленоОПУ;
				СтрокаСТарифом.Начислено      = Начислено;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаСТарифом;
	
КонецФункции // ОтборСтрокиПоЗначениюТарифа()

// Функция заполняет коды видов начислений в текущей строке.
//
// Параметры:
//  ТаблицаПоУслуге - таблица с начислениями по услуге.
//  ВидТарифа - вид тарифа по услуге.
//  Параметр - наименование параметра.
//
// Возвращаемое значение:
//  <Строка> - код(ы) вида начисления.
//
Функция ПолучитьКодыНачислений(ТаблицаПоУслуге, ВидТарифа, Параметр)
	
	Таблица = ТаблицаПоУслуге.Скопировать(, Параметр);
	Таблица.Свернуть(Параметр);
	Таблица.Сортировать(Параметр);
	
	Код = "";
	Для Каждого ТекущаяСтрока Из Таблица Цикл
		Код = Код + ?(Код = "", "", ",") + СокрЛП(ТекущаяСтрока[Параметр]);
	КонецЦикла;
	
	Возврат Код;
	
КонецФункции // ПолучитьКодыНачислений()

// Анализирует таблицу начисления по текущей услуге и при необходимости детализирует
// начисления по составляющим услугам. Полученные строки начисления записываются в 
// итоговую таблицу начисления.
// 
// Параметры:
//  СтрокаУслуги - строка начисления по текущей услуге
//  ЛицевойСчет - текущий л/с
//  ТаблицаПоУслуге - таблица с начислениями по текущей услуге
//  ТаблицаНачисления - итоговая таблица начисления
//  СтруктураНастроек - структура с пользовательскими настройками
//  ТаблицаЛьготСправочно - таблица со льготами, начисленными справочно
//  РазмерНормыИнд - размер нормы, установленной на текущий л/с
//  РазмерНормыОбщ - размер нормы, установленной на текущее здание.
//
Процедура ДетализироватьПоСоставляющимУслугам(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления,
											СтруктураНастроек, ТаблицаЛьготСправочно, РазмерНормыИнд, РазмерНормыОбщ,
											КэшТарифовУслугЛицевыхСчетов = Неопределено)
	
	ЛьготыСправочно = СтруктураНастроек.ЛьготыСправочно;
	
	Услуга                     = СтрокаУслуги.Услуга;
	ВидУслуги                  = СтрокаУслуги.ВидУслуги;
	СпособВыводаВКвитанциях    = СтрокаУслуги.СпособВыводаВКвитанциях;
	ЕдИзм                      = СтрокаУслуги.ЕдИзм;
	ЕдИзмНаименование          = СтрокаУслуги.ЕдИзмНаименование;
	УслугаПоСчетчикам          = СтрокаУслуги.УслугаПоСчетчикам;
	УслугаСоставнаяПоСчетчикам = СтрокаУслуги.УслугаСоставнаяПоСчетчикам;
	УслугаСНачислениями        = ТаблицаПоУслуге[0].УслугаСНачислениями;
	НачальноеСальдо            = ТаблицаПоУслуге[0].НачальноеСальдо;
	Оплата                     = ТаблицаПоУслуге[0].Оплата;
	Пени                       = ТаблицаПоУслуге[0].Пени;
	ЭтоКоммунальнаяУслуга      = СтрокаУслуги.ЭтоКоммунальнаяУслуга;
	
	Количество    = ТаблицаПоУслуге.Итог("КоличествоИПУ");
	КоличествоОПУ = ТаблицаПоУслуге.Итог("КоличествоОПУ");
	
	Перерасчет    = ТаблицаПоУслуге.Итог("Перерасчет");
	ПерерасчетИнд = ТаблицаПоУслуге.Итог("ПерерасчетИнд");
	ПерерасчетОДН = ТаблицаПоУслуге.Итог("ПерерасчетОДН");
	
	Льгота        = ТаблицаПоУслуге.Итог("Льгота");
	НачисленоИПУ  = ТаблицаПоУслуге.Итог("НачисленоИПУ");
	НачисленоОПУ  = ТаблицаПоУслуге.Итог("НачисленоОПУ");
	Начислено     = ТаблицаПоУслуге.Итог("Начислено");
	КОплатеИПУ    = ТаблицаПоУслуге.Итог("КОплатеИПУ") + ПерерасчетИнд;
	КОплатеОПУ    = ТаблицаПоУслуге.Итог("КОплатеОПУ") + ПерерасчетОДН;
	КОплате       = Начислено + Перерасчет - Льгота;
	
	СуммаПовышения = ТаблицаПоУслуге.Итог("СуммаПовышения");
	
	// В соответствии с Постановлением №1498 от 26.12.2016 ОДН по ГВС, ХВС, ЭЭ и ВО надо выводить отдельной строкой, отнеся его к содержанию общего имущества.
	ОДНОтноситсяКОбщемуИмуществу = ОпределитьНадоЛиОтнестиОДНКОбщемуИмуществу(ТаблицаПоУслуге, СтруктураНастроек.ПериодПросмотра);
	
	// Если льготу или корректировки начисляли по составляющей услуге, то в таблице по услугам могут быть записи с пустыми тарифами.
	// Их не надо учитывать при принятии решения о необходимости детализации начислений. Поэтому для таких записей вместо пустого тарифа подставляем общий.
	СтрокиСПустымиТарифами = ТаблицаПоУслуге.НайтиСтроки(Новый Структура("ВидТарифа", Перечисления.КВП_ВидыТарифов.ПустаяСсылка()));
	Если Не СтрокиСПустымиТарифами.Количество() = 0 Тогда
		// Запоминаем составной объем потребления, чтобы не потерять его при свертке таблицы.
		СтрокиСОбщимТарифом = ТаблицаПоУслуге.НайтиСтроки(Новый Структура("ВидТарифа", Перечисления.КВП_ВидыТарифов.Общий));
		СоставноеКоличествоИндОбщТариф = "";
		Для Каждого СтрокаОбщТариф Из СтрокиСОбщимТарифом Цикл
			Если Не СтрокаОбщТариф.СоставноеКоличествоИнд = "" Тогда
				СоставноеКоличествоИндОбщТариф = СтрокаОбщТариф.СоставноеКоличествоИнд;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаПоУслуге Из СтрокиСПустымиТарифами Цикл
			СтрокаПоУслуге.ВидТарифа              = ?(СтрокаПоУслуге.ВидТарифа = Перечисления.КВП_ВидыТарифов.ПустаяСсылка(), Перечисления.КВП_ВидыТарифов.Общий, СтрокаПоУслуге.ВидТарифа);
			СтрокаПоУслуге.СоставноеКоличествоИнд = СоставноеКоличествоИндОбщТариф;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаСостУслуг = ТаблицаПоУслуге.Скопировать(, "СоставнаяУслуга, ВидСоставнойУслуги, ВидТарифа, ЕдИзм, ИмеетсяСоставнойИндивидуальныйРасход, СоставноеКоличествоИнд");
	ТаблицаСостУслуг.Свернуть("СоставнаяУслуга, ВидСоставнойУслуги, ВидТарифа, ЕдИзм, ИмеетсяСоставнойИндивидуальныйРасход, СоставноеКоличествоИнд");
	
	Если НеобходимоДетализироватьПоСоставляющимУслугам(ТаблицаСостУслуг) Тогда 
		
		НоваяСтрока = ТаблицаНачисления.Добавить();
		
		ИмеетсяСоставнойИндивидуальныйРасход = (НЕ ТаблицаСостУслуг.Найти(Истина, "ИмеетсяСоставнойИндивидуальныйРасход") = Неопределено);
		
		НоваяСтрока.Услуга                               = Услуга;
		НоваяСтрока.ВидУслуги                            = ВидУслуги;
		НоваяСтрока.ВидДляВывода                         = "" + ВидУслуги + ":";
		НоваяСтрока.СпособВыводаВКвитанциях              = СпособВыводаВКвитанциях;
		НоваяСтрока.ВидТарифа                            = Перечисления.КВП_ВидыТарифов.Общий;
		НоваяСтрока.РазмерНормы                          = РазмерНормыИнд;
		НоваяСтрока.РазмерНормыОбщ                       = РазмерНормыОбщ;
		НоваяСтрока.КоличествоИПУ                        = ?(ИмеетсяСоставнойИндивидуальныйРасход, 0 ,Количество);
		НоваяСтрока.КоличествоОПУ                        = КоличествоОПУ;
		НоваяСтрока.КодВидаНачисленийИПУ                 = ТаблицаПоУслуге[0].КодВидаНачисленийИПУ;
		НоваяСтрока.КодВидаНачисленийОПУ                 = ТаблицаПоУслуге[0].КодВидаНачисленийОПУ;
		НоваяСтрока.НачисленоИПУ                         = НачисленоИПУ;
		НоваяСтрока.НачисленоОПУ                         = НачисленоОПУ;
		НоваяСтрока.Начислено                            = Начислено;
		НоваяСтрока.Перерасчет                           = Перерасчет;
		НоваяСтрока.ПерерасчетИнд                        = ПерерасчетИнд;
		НоваяСтрока.ПерерасчетОДН                        = ПерерасчетОДН;
		НоваяСтрока.Льгота                               = ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, ЛьготыСправочно);
		НоваяСтрока.КОплате                              = КОплате;
		НоваяСтрока.КОплатеИПУ                           = КОплатеИПУ;
		НоваяСтрока.КОплатеОПУ                           = КОплатеОПУ;
		НоваяСтрока.УслугаПоСчетчикам                    = УслугаПоСчетчикам;
		НоваяСтрока.УслугаСоставнаяПоСчетчикам           = УслугаСоставнаяПоСчетчикам;
		НоваяСтрока.СтрокаДетализацииСост                = Ложь;
		НоваяСтрока.СтрокаДетализацииТариф               = Ложь;
		НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = Ложь;
		НоваяСтрока.СоставноеКоличествоИнд               = "";
		НоваяСтрока.Порядок                              = ТаблицаПоУслуге[0].Порядок;
		НоваяСтрока.УслугаСНачислениями                  = УслугаСНачислениями;
		НоваяСтрока.Пени                                 = Пени;
		НоваяСтрока.Оплата                               = Оплата;
		НоваяСтрока.НачальноеСальдо                      = НачальноеСальдо;
		НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу         = ОДНОтноситсяКОбщемуИмуществу;
		НоваяСтрока.СуммаПовышения                       = СуммаПовышения;
		НоваяСтрока.ЭтоКоммунальнаяУслуга                = ЭтоКоммунальнаяУслуга;
		
		// Повышающий коэффициент указывается для каждой составляющей услуги. Суммировать его в итоговой строке нет смысла.
		НоваяСтрока.ПовышающийКоэффициент                = 0;
		
		// Для каждой составляющей услуги добавляем строку детализации.
		Для Каждого СтрокаСостУслуги Из ТаблицаСостУслуг Цикл
			
			ВидСоставнойУслуги = СтрокаСостУслуги.ВидСоставнойУслуги;
			
			Если ЗначениеЗаполнено(ВидСоставнойУслуги) Тогда
				
				СостУслуга = СтрокаСостУслуги.СоставнаяУслуга;
				СостЕдИзм  = СтрокаСостУслуги.ЕдИзм;
				ВидТарифа  = СтрокаСостУслуги.ВидТарифа;
				
				Отбор = Новый Структура;
				Отбор.Вставить("СоставнаяУслуга", СостУслуга);
				Отбор.Вставить("ВидТарифа",       ВидТарифа);
				Строки = ТаблицаПоУслуге.НайтиСтроки(Отбор);
				
				КоличествоПоУслуге     = 0;
				КоличествоПоУслугеОПУ  = 0;
				НачисленоПоУслугеИПУ   = 0;
				НачисленоПоУслугеОПУ   = 0;
				НачисленоПоУслуге      = 0;
				ПерерасчетПоУслуге     = 0;
				ПерерасчетИндПоУслуге  = 0;
				ПерерасчетОДНПоУслуге  = 0;
				ЛьготаПоУслуге         = 0;
				СуммаПовышенияПоУслуге = 0;
				
				Для Каждого Строка Из Строки Цикл
					КоличествоПоУслуге     = КоличествоПоУслуге + Строка.КоличествоИПУ;
					КоличествоПоУслугеОПУ  = КоличествоПоУслугеОПУ + Строка.КоличествоОПУ;
					НачисленоПоУслугеИПУ   = НачисленоПоУслугеИПУ  + Строка.НачисленоИПУ;
					НачисленоПоУслугеОПУ   = НачисленоПоУслугеОПУ  + Строка.НачисленоОПУ;
					НачисленоПоУслуге      = НачисленоПоУслуге  + Строка.Начислено;
					ПерерасчетПоУслуге     = ПерерасчетПоУслуге + Строка.Перерасчет;
					ПерерасчетИндПоУслуге  = ПерерасчетИндПоУслуге + Строка.ПерерасчетИнд;
					ПерерасчетОДНПоУслуге  = ПерерасчетИндПоУслуге + Строка.ПерерасчетОДН;
					ЛьготаПоУслуге         = ЛьготаПоУслуге     + Строка.Льгота;
					СуммаПовышенияПоУслуге = СуммаПовышенияПоУслуге + Строка.СуммаПовышения;
				КонецЦикла;
				
				КОплатеПоУслуге = НачисленоПоУслуге + ПерерасчетПоУслуге - ЛьготаПоУслуге;
				
				ПредставлениеТарифа = ПолучитьТарифПоУслуге(СтруктураНастроек.Организация, СтруктураНастроек.ПериодПросмотра,
															ЛицевойСчет, СостУслуга, ТаблицаПоУслуге, Истина, ВидТарифа,
															КэшТарифовУслугЛицевыхСчетов);
				
				РазмерТарифа        = ПолучитьРазмерТарифа(ПредставлениеТарифа);
				
				НоваяСтрока = ТаблицаНачисления.Добавить();
				
				НоваяСтрока.Услуга                                  = СостУслуга;
				НоваяСтрока.ВидУслуги                               = ВидСоставнойУслуги;
				НоваяСтрока.ВидТарифа                               = ВидТарифа;
				НоваяСтрока.ВидДляВывода                            = " >" + СостУслуга + " (" + ВидТарифа + ")";
				НоваяСтрока.СпособВыводаВКвитанциях                 = СпособВыводаВКвитанциях;
				НоваяСтрока.ЕдИзм                                   = СостЕдИзм;
				НоваяСтрока.ЕдИзмНаименование                       = ЕдИзмНаименование;
				НоваяСтрока.ТарифДляВывода                          = ПредставлениеТарифа;
				НоваяСтрока.Тариф                                   = РазмерТарифа;
				НоваяСтрока.КоличествоИПУ                           = КоличествоПоУслуге;
				НоваяСтрока.КоличествоОПУ                           = КоличествоПоУслугеОПУ;
				НоваяСтрока.КодВидаНачисленийИПУ                    = ТаблицаПоУслуге[0].КодВидаНачисленийИПУ;
				НоваяСтрока.КодВидаНачисленийОПУ                    = ТаблицаПоУслуге[0].КодВидаНачисленийОПУ;
				НоваяСтрока.НачисленоИПУ                            = НачисленоПоУслугеИПУ;
				НоваяСтрока.НачисленоОПУ                            = НачисленоПоУслугеОПУ;
				НоваяСтрока.Начислено                               = НачисленоПоУслуге;
				НоваяСтрока.Перерасчет                              = ПерерасчетПоУслуге;
				НоваяСтрока.ПерерасчетИнд                           = ПерерасчетИндПоУслуге;
				НоваяСтрока.ПерерасчетОДН                           = ПерерасчетОДНПоУслуге;
				НоваяСтрока.Льгота                                  = ЛьготаПоУслуге;
				НоваяСтрока.КОплате                                 = КОплатеПоУслуге;
				НоваяСтрока.КОплатеИПУ                              = 0;
				НоваяСтрока.КОплатеОПУ                              = 0;
				НоваяСтрока.УслугаПоСчетчикам                       = УслугаПоСчетчикам;
				НоваяСтрока.УслугаСоставнаяПоСчетчикам              = УслугаСоставнаяПоСчетчикам;
				НоваяСтрока.СтрокаДетализацииСост                   = Истина;
				НоваяСтрока.СтрокаДетализацииТариф                  = Ложь;
				НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход    = СтрокаСостУслуги.ИмеетсяСоставнойИндивидуальныйРасход;
				НоваяСтрока.СоставноеКоличествоИнд                  = СтрокаСостУслуги.СоставноеКоличествоИнд;
				НоваяСтрока.Порядок                                 = ТаблицаПоУслуге[0].Порядок;
				НоваяСтрока.УслугаСНачислениями                     = УслугаСНачислениями;
				НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу            = ОДНОтноситсяКОбщемуИмуществу;
				НоваяСтрока.ПовышающийКоэффициент                   = ТаблицаПоУслуге[0].ПовышающийКоэффициент;
				НоваяСтрока.СуммаПовышения                          = СуммаПовышенияПоУслуге;
				НоваяСтрока.ЭтоКоммунальнаяУслуга                   = ЭтоКоммунальнаяУслуга;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		НомерПоследнейСтрокиТаблицы = ТаблицаПоУслуге.Количество() - 1;
		
		ОсновнаяСтрокаТаблицы = ТаблицаПоУслуге[0];
		СтрокаСоставнойУслуги = ТаблицаПоУслуге[НомерПоследнейСтрокиТаблицы];
		
		НоваяСтрока = ТаблицаНачисления.Добавить();
		
		НоваяСтрока.Услуга                     = Услуга;
		НоваяСтрока.ВидУслуги                  = ВидУслуги;
		НоваяСтрока.ВидДляВывода               = ВидУслуги;
		НоваяСтрока.СпособВыводаВКвитанциях    = СпособВыводаВКвитанциях;
		НоваяСтрока.ЕдИзм                      = ЕдИзм;
		НоваяСтрока.ЕдИзмНаименование          = ЕдИзмНаименование;
		НоваяСтрока.РазмерНормы                = РазмерНормыИнд;
		НоваяСтрока.РазмерНормыОбщ             = РазмерНормыОбщ;
		
		Если ОсновнаяСтрокаТаблицы.ИмеетсяСоставнойИндивидуальныйРасход Тогда
			НоваяСтрока.КоличествоИПУ = ОсновнаяСтрокаТаблицы.СоставноеКоличествоИнд;
		Иначе
			НоваяСтрока.КоличествоИПУ = Количество;
		КонецЕсли;
		
		НоваяСтрока.Тариф          = СтрокаСоставнойУслуги.Тариф;
		НоваяСтрока.ТарифДляВывода = ПолучитьТарифПоУслуге(СтруктураНастроек.Организация, СтруктураНастроек.ПериодПросмотра,
														   ЛицевойСчет, СтрокаСоставнойУслуги.СоставнаяУслуга, ТаблицаПоУслуге, Истина,,
														   КэшТарифовУслугЛицевыхСчетов);
		
		НоваяСтрока.КоличествоОПУ                           = КоличествоОПУ;
		НоваяСтрока.КодВидаНачисленийИПУ                    = ОсновнаяСтрокаТаблицы.КодВидаНачисленийИПУ;
		НоваяСтрока.КодВидаНачисленийОПУ                    = ОсновнаяСтрокаТаблицы.КодВидаНачисленийОПУ;
		НоваяСтрока.НачисленоИПУ                            = НачисленоИПУ;
		НоваяСтрока.НачисленоОПУ                            = НачисленоОПУ;
		НоваяСтрока.Начислено                               = Начислено;
		НоваяСтрока.Перерасчет                              = Перерасчет;
		НоваяСтрока.ПерерасчетИнд                           = ПерерасчетИнд;
		НоваяСтрока.ПерерасчетОДН                           = ПерерасчетОДН;
		НоваяСтрока.Льгота                                  = ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, ЛьготыСправочно);
		НоваяСтрока.КОплате                                 = КОплате;
		НоваяСтрока.УслугаПоСчетчикам                       = УслугаПоСчетчикам;
		НоваяСтрока.УслугаСоставнаяПоСчетчикам              = УслугаСоставнаяПоСчетчикам;
		НоваяСтрока.СтрокаДетализацииСост                   = Ложь;
		НоваяСтрока.СтрокаДетализацииТариф                  = Ложь;
		НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход    = ОсновнаяСтрокаТаблицы.ИмеетсяСоставнойИндивидуальныйРасход;
		НоваяСтрока.СоставноеКоличествоИнд                  = ОсновнаяСтрокаТаблицы.СоставноеКоличествоИнд;
		НоваяСтрока.Порядок                                 = ОсновнаяСтрокаТаблицы.Порядок;
		НоваяСтрока.УслугаСНачислениями                     = УслугаСНачислениями;
		НоваяСтрока.Оплата                                  = Оплата;
		НоваяСтрока.Пени                                    = Пени;
		НоваяСтрока.НачальноеСальдо                         = НачальноеСальдо;
		НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу            = ОДНОтноситсяКОбщемуИмуществу;
		НоваяСтрока.ПовышающийКоэффициент                   = ОсновнаяСтрокаТаблицы.ПовышающийКоэффициент;
		НоваяСтрока.СуммаПовышения                          = СуммаПовышения;
		НоваяСтрока.ЭтоКоммунальнаяУслуга                   = ЭтоКоммунальнаяУслуга;
		
	КонецЕсли;
	
КонецПроцедуры // ДетализироватьПоСоставляющимУслугам()

// Анализирует количество строк таблицы составляющих услуг. Если имело место начисление по двум и 
// более составляющим услугам, принимается решение о необходимости детализации начислений.
// 
// Параметры:
//  ТаблицаСостУслуг - таблица составляющих услуг.
// 
// Возвращаемое значение:
//  Булево - необходимоть детализации начислений по составляющим услугам.
//
Функция НеобходимоДетализироватьПоСоставляющимУслугам(ТаблицаСостУслуг) Экспорт
	
	// Получим строки без составных услуг;
	// Такие строки появляются в регистрах в следствие начисления льгот.
	Отбор = Новый Структура();
	Отбор.Вставить("СоставнаяУслуга", Справочники.КВП_Услуги.ПустаяСсылка());
	СтрокиБезСоставныхУслуг = ТаблицаСостУслуг.НайтиСтроки(Отбор);
	// Найдем количество строк с составными услугами, как разницу между общим числом строк и числом строк без составных услуг.
	ВсегоСтрокВТаблице = ТаблицаСостУслуг.Количество();
	КоличествоСтрокБезСоставныхУслуг = СтрокиБезСоставныхУслуг.Количество();
	КоличествоСтрокССоставнымиУслугами = ВсегоСтрокВТаблице - КоличествоСтрокБезСоставныхУслуг;
	
	Если КоличествоСтрокССоставнымиУслугами > 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // НеобходимоДетализироватьПоСоставляющимУслугам()

// Получает тариф по услуге со счетчиком. 
// 
// Параметры:
//  Организация - организация, на которую формируется квитанция
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция
//  ЛицевойСчет - текущий лицевой счет
//  Услуга - текущая услуга
//  СтрокаОбщ - строка начисления в разрезе общего вида тарифа
//  СтрокаДн - строка начисления в разрезе дневного вида тарифа
//  СтрокаНч - строка начисления в разрезе ночного вида тарифа
//  СтрокаПик - строка начисления в разрезе пикового вида тарифа.
//  
// Возвращаемое значение:
//  Число - тариф по текущей услуге.
//  
Функция ПолучитьТарифПоУслугеСоСчетчиком(Организация, ПериодПросмотра, ЛицевойСчет, Услуга, СтрокаДн, СтрокаОбщ, СтрокаНч, СтрокаПик,
										 ПредставлениеТарифаОбщ = "", ПредставлениеТарифаДн = "", ПредставлениеТарифаНч = "",
										 ПредставлениеТарифаПк = "", ПредставлениеТарифаБезДетализацииПоВидамТарифов = "",
										 КэшТарифовУслугЛицевыхСчетов = Неопределено) Экспорт
	
	// Ищем тариф в выборке из регистра.
	Тариф = ?(НЕ СтрокаДн = Неопределено, СтрокаДн.Тариф, ?(НЕ СтрокаОбщ = Неопределено, 
	      СтрокаОбщ.Тариф, ?(НЕ СтрокаНч = Неопределено, СтрокаНч.Тариф, ?(НЕ СтрокаПик = Неопределено, СтрокаПик.Тариф, Неопределено))));
	
	// Если тариф в выборке не найден, значит начислений в отчетном месяце не было.
	// Были начислены льготы, либо проведены перерасчеты.
	Если Тариф = Неопределено ИЛИ Тариф = 0 Тогда
		
		Если КэшТарифовУслугЛицевыхСчетов = Неопределено Тогда
			Тариф = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(ПериодПросмотра), Организация, Услуга, ЛицевойСчет);
		Иначе
			СтрокиТарифа = КэшТарифовУслугЛицевыхСчетов.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга", ЛицевойСчет, Услуга));
			
			Если СтрокиТарифа.Количество() = 0 Тогда
				Тариф = 0;
			Иначе
				Тариф = СтрокиТарифа[0].Тариф;
			КонецЕсли;
			
		КонецЕсли;
		
		ПредставлениеТарифаБезДетализацииПоВидамТарифов = Строка(Тариф);
		
	Иначе
		
		Если НЕ ПустаяСтрока(ПредставлениеТарифаДн) Тогда
			ПредставлениеТарифаБезДетализацииПоВидамТарифов = ПредставлениеТарифаДн;
		ИначеЕсли НЕ ПустаяСтрока(ПредставлениеТарифаОбщ) Тогда
			ПредставлениеТарифаБезДетализацииПоВидамТарифов = ПредставлениеТарифаОбщ;
		ИначеЕсли НЕ ПустаяСтрока(ПредставлениеТарифаНч) Тогда
			ПредставлениеТарифаБезДетализацииПоВидамТарифов = ПредставлениеТарифаНч;
		ИначеЕсли НЕ ПустаяСтрока(ПредставлениеТарифаПк) Тогда
			ПредставлениеТарифаБезДетализацииПоВидамТарифов = ПредставлениеТарифаПк;
		Иначе
			ПредставлениеТарифаБезДетализацииПоВидамТарифов = Строка(Тариф);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Тариф;
	
КонецФункции // ПолучитьТарифПоУслугеСоСчетчиком()

// Формирует таблицу кэша тарифов по всем услугам лицевых счетов.
//
Функция ПолучитьКэшТарифовУслугЛицевыхСчетов(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений)
	
	ТаблицаКэшаТарифов = Новый ТаблицаЗначений;
	ТаблицаКэшаТарифов.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаКэшаТарифов.Колонки.Добавить("Услуга",      Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаКэшаТарифов.Колонки.Добавить("Тариф",       Новый ОписаниеТипов("Число"));
	
	Организация         = СтруктураНастроек.Организация;
	ПериодПросмотра     = КонецМесяца(СтруктураНастроек.ПериодПросмотра);
	СписокЛицевыхСчетов = СтруктураНастроек.СписокЛицевыхСчетов;
	СписокУслуг         = ?(ОсобыеНастройкиВыгрузкиНачислений, СтруктураНастроек.СписокУслугВыгружатьНачисленияОбщ, СтруктураНастроек.СписокУслуг);
	
	Для каждого ТекУслуга из СписокУслуг Цикл
		
		ТаблицаТарифов = ПолучитьТарифПоЛицевомуСчету(ПериодПросмотра, Организация, ТекУслуга.Значение, СписокЛицевыхСчетов);
		Если ТипЗнч(ТаблицаТарифов) = Тип("ТаблицаЗначений") Тогда
			
			ТаблицаТарифов.Индексы.Добавить("Объект");
			
			Для каждого ТекЛС из СписокЛицевыхСчетов Цикл
				
				НайденныйТариф = ТаблицаТарифов.Найти(ТекЛС.Значение, "Объект");
				
				Если Не НайденныйТариф = Неопределено Тогда
					НоваяСтрокаКэша = ТаблицаКэшаТарифов.Добавить();
					НоваяСтрокаКэша.ЛицевойСчет = ТекЛС.Значение;
					НоваяСтрокаКэша.Услуга      = ТекУслуга.Значение;
					НоваяСтрокаКэша.Тариф       = НайденныйТариф.Тариф;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаКэшаТарифов.Индексы.Добавить("ЛицевойСчет, Услуга");
	
	Возврат ТаблицаКэшаТарифов;
	
КонецФункции

// Анализирует строки таблицы на количество различных видов тарифов, по которым имели место
// начисления в отчетном месяце. Если найдены начисления по двум или более видам тарифов, 
// принимается решение о необходимости детализации.
// 
// Параметры:
//  СтрокаОбщ - строка начисления в разрезе общего вида тарифа
//  СтрокаДн - строка начисления в разрезе дневного вида тарифа
//  СтрокаНч - строка начисления в разрезе ночного вида тарифа
//  СтрокаПик - строка начисления в разрезе пикового вида тарифа.
//
// Возвращаемое значение:
//  Булево - необходимость детализации начислений по видам тарифов.
// 
Функция НеобходимоДетализироватьПоВидамТарифов(СтрокаОбщ, СтрокаДн, СтрокаНч, СтрокаПик, ДневнойИОбщийТарифыРавны) Экспорт
	
	ВсегоВидов = 0;
	
	Если (Не СтрокаОбщ = Неопределено И Не СтрокаДн = Неопределено)
	 И (Не СтрокаОбщ.Тариф = СтрокаДн.Тариф) Тогда
		ДневнойИОбщийТарифыРавны = Ложь;
	КонецЕсли;
	
	Если ДневнойИОбщийТарифыРавны Тогда
		ВсегоВидов = ?(Не СтрокаОбщ = Неопределено Или Не СтрокаДн = Неопределено, ВсегоВидов + 1, ВсегоВидов);
	Иначе
		// Если по общему виду тарифа имел место только перерасчет вследствие сторнирования, дополнительную строку не выводим.
		ВсегоВидов = ?(Не СтрокаОбщ = Неопределено И (ЗначениеЗаполнено(СтрокаОбщ.НачисленоИПУ) ИЛИ ЗначениеЗаполнено(СтрокаОбщ.НачисленоОПУ)), ВсегоВидов + 1, ВсегоВидов);
		ВсегоВидов = ?(Не СтрокаДн  = Неопределено, ВсегоВидов + 1, ВсегоВидов);
	КонецЕсли;
	ВсегоВидов = ?(Не СтрокаНч  = Неопределено, ВсегоВидов + 1, ВсегоВидов);
	ВсегоВидов = ?(Не СтрокаПик = Неопределено, ВсегоВидов + 1, ВсегоВидов);

	Возврат ?(ВсегоВидов > 1, Истина, Ложь);
	
КонецФункции // НеобходимоДетализироватьПоВидамТарифов()

// Анализирует строки начисления по текущему виду услуги на необходимость детализации по видам тарифов.
//
// Параметры:
//  СтрокиОбщ - строки с начислениями по общему виду тарифа
//  СтрокиДн - строки с начислениями по дневному виду тарифа
//  СтрокиНч - строки с начислениями по ночному виду тарифа
//  СтрокиПик - строки с начислениями по пиковому виду тарифа
//  ДневнойИОбщийТарифыРавны - признак равенства дневного и общего тарифа.
//
// Возвращаемое значение:
//  Булево - необходимость детализации.
//
Функция НеобходимоДетализироватьПоВидамТарифовСвертка(СтрокиОбщ, СтрокиДн, СтрокиНч, СтрокиПик, ДневнойИОбщийТарифыРавны)
	
	ВсегоВидов = 0;
	
	Если ДневнойИОбщийТарифыРавны Тогда
		ВсегоВидов = ?(Не СтрокиОбщ.Количество() = 0 Или Не СтрокиДн.Количество() = 0, ВсегоВидов + 1, ВсегоВидов);
	Иначе
		ВсегоВидов = ?(Не СтрокиОбщ.Количество() = 0, ВсегоВидов + 1, ВсегоВидов);
		ВсегоВидов = ?(Не СтрокиДн.Количество() = 0, ВсегоВидов + 1, ВсегоВидов);
	КонецЕсли;
	ВсегоВидов = ?(Не СтрокиНч.Количество() = 0, ВсегоВидов + 1, ВсегоВидов);
	ВсегоВидов = ?(Не СтрокиПик.Количество() = 0, ВсегоВидов + 1, ВсегоВидов);

	Возврат ?(ВсегоВидов > 1, Истина, Ложь);
	
КонецФункции // НеобходимоДетализироватьПоВидамТарифовСвертка()

// Ищет норму потребления по текущей услуге в таблице норм.
// Если находит, определяет ее размер.
//
// Параметры:
//  Организация - организация, на которую формируется квитанция
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция
//  ТаблицаНорм - таблица норм по текущему лицевому счету
//  Объект - текущий лицевой счет или текущее здание
//  Услуга - текущая услуга
//  НормаОПУ - идентификатор нормы на здание.
//
// Возвращаемое значение:
//  Элемент справочника "Нормы потребления услуг".
// 
Функция НайтиНормуПотребления(Организация, ПериодПросмотра, ТаблицаНорм, Объект, Услуга, СписокЛицевыхСчетовЗдания, КэшМакетаХарактеристикНормПотребления)
	
	РазмерНормы = 0;
	
	Отбор = Новый Структура("Услуга, Объект", Услуга, Объект);
	
	СтрокиНормы = ТаблицаНорм.НайтиСтроки(Отбор);
	
	Если Не СтрокиНормы.Количество() = 0 Тогда
		СтрокаНормы = СтрокиНормы.Получить(0);
		РазмерНормы = ПолучитьРазмерНормыПотребления(Объект, КонецМесяца(ПериодПросмотра),
													 СтрокаНормы.НормаПотребления, Организация,,,, СписокЛицевыхСчетовЗдания, КэшМакетаХарактеристикНормПотребления);
	КонецЕсли;
	
	Возврат РазмерНормы;
	
КонецФункции // НайтиНормуПотребления()

// Для услуг, по которым нет необходимости детализировать начисления, добавляет единственную
// строку в итоговую таблицу.
// 
// Параметры:
//  СтрокаУслуги - строка начисления по текущей услуге
//  ЛицевойСчет - текущий лицевой счет
//  ТаблицаПоУслуге - таблица с начислениями по текущей услуге
//  ТаблицаНачисления - итоговая таблица начисления
//  СтруктураНастроек - структура с настройками пользователя
//  ТаблицаЛьготСправочно - таблица со льготами, начисленными справочно
//  РазмерНормыИнд - размер нормы, установленной на текущий л/с
//  РазмерНормыОбщ - размер нормы, установленной на текущее здание.
//  ТекущаяКвитанцияПоПеням - указывает, являются ли переданные данные данными по пеням.
//
Процедура СвернутьНачисленияПоУслуге(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, СтруктураНастроек,
									ТаблицаЛьготСправочно, РазмерНормыИнд, РазмерНормыОбщ, ТекущаяКвитанцияПоПеням = Ложь,
									КэшТарифовУслугЛицевыхСчетов = Неопределено)
	
	Услуга                  = СтрокаУслуги.Услуга;
	ВидУслуги               = СтрокаУслуги.ВидУслуги;
	СпособВыводаВКвитанциях = СтрокаУслуги.СпособВыводаВКвитанциях;
	ЕдИзм                   = СтрокаУслуги.ЕдИзм;
	ЕдИзмНаименование       = СтрокаУслуги.ЕдИзмНаименование;
	ЭтоКоммунальнаяУслуга   = СтрокаУслуги.ЭтоКоммунальнаяУслуга;
	
	Если НЕ СтрокаУслуги.УслугаПоСчетчикам И ИмелоМестоИзменениеТарифа(ТаблицаПоУслуге) Тогда
		ТарифБылИзменен = Истина;
	Иначе
		ТарифБылИзменен = Ложь;
	КонецЕсли;
	
	// Если в течение месяца тариф менялся, объем потребления необходимо сворачивать, а не суммировать.
	Если ТарифБылИзменен Тогда
		СтрокаОбщТарифа = ТаблицаПоУслуге.Найти(Перечисления.КВП_ВидыТарифов.Общий, "ВидТарифа");
		КоличествоИПУ   = СтрокаОбщТарифа.КоличествоИПУ;
	Иначе
		КоличествоИПУ = ТаблицаПоУслуге.Итог("КоличествоИПУ");
	КонецЕсли;
	КоличествоОПУ = ТаблицаПоУслуге.Итог("КоличествоОПУ");
	Начислено     = ТаблицаПоУслуге.Итог("Начислено");
	
	СуммаПовышения        = ТаблицаПоУслуге.Итог("СуммаПовышения");
	ПовышающийКоэффициент = ОпределитьПовышающийКоэффициентПоТекущейУслуге(ТаблицаПоУслуге);
	
	// Перерасчет, который можем однозначно отнести к индивидуальному начислению (сторнирование индивидуальных начислений), учитываем в индивидуальной сумме к оплате.
	// Остальную сумму перерасчета распределяем на индивидуальное и общедомовое начисление пропорционально суммам начисления.
	Перерасчет                 = ТаблицаПоУслуге.Итог("Перерасчет");
	ПерерасчетИнд              = ТаблицаПоУслуге.Итог("ПерерасчетИнд");
	ПерерасчетОДН              = ТаблицаПоУслуге.Итог("ПерерасчетОДН");
	
	ПерерасчетДляРаспределения = Перерасчет - ПерерасчетИнд;
	
	Льгота        = ТаблицаПоУслуге.Итог("Льгота");
	НачисленоИПУ  = ТаблицаПоУслуге.Итог("НачисленоИПУ");
	НачисленоОПУ  = ТаблицаПоУслуге.Итог("НачисленоОПУ");
	КОплате       = Начислено + СуммаПовышения + Перерасчет - Льгота;
	
	// Для услуг со счетчиками подсчитываем итоговые суммы в разрезе
	// типов счетчиков.
	ВсегоНачислено = НачисленоИПУ + НачисленоОПУ;
	Если Не ВсегоНачислено = 0 Тогда
		// Данный коэффициент отвечает за доли распределения перерасчетов
		// и льгот на итоговые суммы начисления в разрезе типов счетчиков.
		КоэффициентИПУ = НачисленоИПУ / ВсегоНачислено;
		
		КОплатеИПУ = НачисленоИПУ + ((ПерерасчетДляРаспределения - Льгота) * КоэффициентИПУ);
		КОплатеОПУ = НачисленоОПУ + ((ПерерасчетДляРаспределения - Льгота) * (1 - КоэффициентИПУ));
	Иначе
		КОплатеИПУ = 0;
		КОплатеОПУ = 0;
	КонецЕсли;
	
	// Перерасчет вследствие сторнирования инд. начислений и сумму повышения при начислении по нормативу должны всегда относиться к индивидуальной итоговой сумме.
	КОплатеИПУ = КОплатеИПУ + ПерерасчетИнд + СуммаПовышения;
	
	КОплатеОПУ = КОплатеОПУ + ПерерасчетОДН;
	
	ПредставлениеТарифа = "";
	
	Если ТарифБылИзменен Тогда
		ПредставлениеТарифа = ПолучитьВсеТарифыПоУслуге(ТаблицаПоУслуге);
	ИначеЕсли НЕ ТекущаяКвитанцияПоПеням Тогда
		ПредставлениеТарифа = ПолучитьТарифПоУслуге(СтруктураНастроек.Организация, СтруктураНастроек.ПериодПросмотра,
													ЛицевойСчет, Услуга, ТаблицаПоУслуге,,, КэшТарифовУслугЛицевыхСчетов);
	КонецЕсли;
	
	РазмерТарифа = ПолучитьРазмерТарифа(ПредставлениеТарифа);
	
	СтрокаИмеетсяСоставнойИндивидуальныйРасход = ТаблицаПоУслуге.Найти(Истина, "ИмеетсяСоставнойИндивидуальныйРасход");
	Если СтрокаИмеетсяСоставнойИндивидуальныйРасход = Неопределено Тогда
		ИмеетсяСоставнойИндивидуальныйРасход = Ложь;
		СоставноеКоличествоИнд               = "";
	Иначе
		ИмеетсяСоставнойИндивидуальныйРасход = Истина;
		СоставноеКоличествоИнд               = СтрокаИмеетсяСоставнойИндивидуальныйРасход.СоставноеКоличествоИнд;
	КонецЕсли;
	
	// В соответствии с Постановлением №1498 от 26.12.2016 ОДН по ГВС, ХВС, ЭЭ и ВО надо выводить отдельной строкой, отнеся его к содержанию общего имущества.
	ОДНОтноситсяКОбщемуИмуществу = ОпределитьНадоЛиОтнестиОДНКОбщемуИмуществу(ТаблицаПоУслуге, СтруктураНастроек.ПериодПросмотра);
	
	НоваяСтрока = ТаблицаНачисления.Добавить();
	
	НоваяСтрока.Услуга                                  = Услуга;
	НоваяСтрока.ВидУслуги                               = ВидУслуги;
	НоваяСтрока.ВидТарифа                               = ОпределитьТекущийВидТарифа(ТаблицаПоУслуге);
	НоваяСтрока.ВидДляВывода                            = ВидУслуги;
	НоваяСтрока.СпособВыводаВКвитанциях                 = СпособВыводаВКвитанциях;
	НоваяСтрока.ЕдИзм                                   = ЕдИзм;
	НоваяСтрока.ЕдИзмНаименование                       = ЕдИзмНаименование;
	НоваяСтрока.РазмерНормы                             = РазмерНормыИнд;
	НоваяСтрока.РазмерНормыОбщ                          = РазмерНормыОбщ;
	НоваяСтрока.ТарифДляВывода                          = ПредставлениеТарифа;
	НоваяСтрока.Тариф                                   = РазмерТарифа;
	НоваяСтрока.КоличествоИПУ                           = КоличествоИПУ;
	НоваяСтрока.КоличествоОПУ                           = КоличествоОПУ;
	НоваяСтрока.НачисленоИПУ                            = НачисленоИПУ;
	НоваяСтрока.НачисленоОПУ                            = НачисленоОПУ;
	НоваяСтрока.Начислено                               = Начислено;
	НоваяСтрока.Перерасчет                              = Перерасчет;
	НоваяСтрока.ПерерасчетИнд                           = ПерерасчетИнд;
	НоваяСтрока.ПерерасчетОДН                           = ПерерасчетОДН;
	НоваяСтрока.Льгота                                  = ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, СтруктураНастроек.ЛьготыСправочно);
	НоваяСтрока.КОплате                                 = КОплате;
	НоваяСтрока.КОплатеИПУ                              = КОплатеИПУ;
	НоваяСтрока.КОплатеОПУ                              = КОплатеОПУ;
	НоваяСтрока.УслугаПоСчетчикам                       = СтрокаУслуги.УслугаПоСчетчикам;
	НоваяСтрока.УслугаСоставнаяПоСчетчикам              = СтрокаУслуги.УслугаСоставнаяПоСчетчикам;
	НоваяСтрока.КодВидаНачисленийИПУ                    = ТаблицаПоУслуге[0].КодВидаНачисленийИПУ;
	НоваяСтрока.КодВидаНачисленийОПУ                    = ТаблицаПоУслуге[0].КодВидаНачисленийОПУ;
	НоваяСтрока.СтрокаДетализацииСост                   = Ложь;
	НоваяСтрока.СтрокаДетализацииТариф                  = Ложь;
	НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход    = ИмеетсяСоставнойИндивидуальныйРасход;
	НоваяСтрока.СоставноеКоличествоИнд                  = СоставноеКоличествоИнд;
	НоваяСтрока.Порядок                                 = ТаблицаПоУслуге[0].Порядок;
	НоваяСтрока.УслугаСНачислениями                     = ТаблицаПоУслуге[0].УслугаСНачислениями;
	НоваяСтрока.Оплата                                  = ТаблицаПоУслуге[0].Оплата;
	НоваяСтрока.НачальноеСальдо                         = ТаблицаПоУслуге[0].НачальноеСальдо;
	НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу            = ОДНОтноситсяКОбщемуИмуществу;
	НоваяСтрока.ПовышающийКоэффициент                   = ПовышающийКоэффициент;
	НоваяСтрока.СуммаПовышения                          = СуммаПовышения;
	НоваяСтрока.Пени                                    = ТаблицаПоУслуге[0].Пени;
	НоваяСтрока.ЭтоКоммунальнаяУслуга                   = ЭтоКоммунальнаяУслуга;
	
КонецПроцедуры // СвернутьНачисленияПоУслуге()

// В таблице с начислениями по услуге ищем информацию о повышающих коэффициентах.
//
Функция ОпределитьПовышающийКоэффициентПоТекущейУслуге(ТаблицаПоУслуге)
	
	Для Каждого Строка Из ТаблицаПоУслуге Цикл
		Если Не Строка.ПовышающийКоэффициент = 0 Тогда
			Возврат Строка.ПовышающийКоэффициент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции // ОпределитьПовышающийКоэффициентПоТекущейУслуге()

// В соответствии с Постановлением №1498 от 26.12.2016 ОДН по ГВС, ХВС, ЭЭ и ВО надо выводить отдельной строкой,
// отнеся его к содержанию общего имущества.
// Функция определяет, надо ли делать это для текущей услуги.
Функция ОпределитьНадоЛиОтнестиОДНКОбщемуИмуществу(ТаблицаПоУслуге, ПериодПросмотра)
	
	ОДНОтноситсяКОбщемуИмуществу = Не ТаблицаПоУслуге.Найти(Истина, "ОДНОтноситсяКобщемуИмуществу") = Неопределено;
	ПериодНеМенееЯнваря2017      = ПериодПросмотра >= Дата(2017, 01, 01);
	
	Если ОДНОтноситсяКОбщемуИмуществу И ПериодНеМенееЯнваря2017 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ОпределитьНадоЛиОтнестиОДНКОбщемуИмуществу()

// Ищет в таблице с начислениями по текущей услуге вид тарифа, по которому имели место
// начисления.
//
// Параметры:
//  ТаблицаПоУслуге - ТаблицаЗначений - таблица с начислениями по услуге.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.КВП_ВидыТарифов.
//
Функция ОпределитьТекущийВидТарифа(ТаблицаПоУслуге) Экспорт
	
	Для Каждого СтрокаПоУслуге ИЗ ТаблицаПоУслуге Цикл
		Если ЗначениеЗаполнено(СтрокаПоУслуге.ВидТарифа) Тогда
			Возврат СтрокаПоУслуге.ВидТарифа;
		КонецЕсли;
	КонецЦикла;
	
	//Возврат Перечисления.КВП_ВидыТарифов.ПустаяСсылка();
	Возврат Перечисления.КВП_ВидыТарифов.Общий;
	
КонецФункции // ОпределитьТекущийВидТарифа()

// Определяет: имело ли место начисление по текущей услуге в разерезе тарифов
// разного размера.
//
// Параметры:
//  ТаблицаПоУслуге - ТаблицаЗначений - таблица с начислениями по услуге.
//
// Возвращаемое значение:
//  Булево
//
Функция ИмелоМестоИзменениеТарифа(ТаблицаПоУслуге) Экспорт
	
	СтрокиОбщТарифа  = ТаблицаПоУслуге.НайтиСтроки(Новый Структура("ВидТарифа", Перечисления.КВП_ВидыТарифов.Общий));
	ТаблицаОбщТарифа = ТаблицаПоУслуге.Скопировать(СтрокиОбщТарифа);
	
	ТаблицаОбщТарифа.Свернуть("Тариф");
	
	Возврат ?(ТаблицаОбщТарифа.Количество() > 1, Истина, Ложь);
	
КонецФункции // ИмелоМестоИзменениеТарифа()

// Получает строковое представление тарифа по услуге без счетчика.
//
// Параметры:
//  Организация - организация, на которую формируется квитанция
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция
//  ЛицевойСчет - текущий лицевой счет
//  Услуга - текущая услуга
//  Таблица - таблица с начислением по текущей услуге
//  СоставляющаяУслуга - признак, является ли услуга составляющей.
// 
// Возвращаемое значение:
//  Строка - строковое представление тарифа по текущей услуге.
// 
Функция ПолучитьТарифПоУслуге(Организация, ПериодПросмотра, ЛицевойСчет, Услуга, Таблица, СоставляющаяУслуга = Ложь, ВидТарифа = Неопределено, КэшТарифовУслугЛицевыхСчетов = Неопределено) Экспорт
	
	Тариф = "";
	
	// Если услуга составляющая, находим строки с начислением по ней.
	Если СоставляющаяУслуга Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("СоставнаяУслуга", Услуга);
		Отбор.Вставить("ВидТарифа",       ВидТарифа);
		СтрокиПоУслуге  = Таблица.НайтиСтроки(Отбор);
		ТаблицаПоУслуге = Таблица.Скопировать(СтрокиПоУслуге, "ВидТарифа, Тариф");
	Иначе
		ТаблицаПоУслуге = Таблица.Скопировать(, "Тариф");
	КонецЕсли;
	
	ТаблицаПоУслуге.Свернуть("Тариф");
	
	Для Каждого СтрокаУслуги Из ТаблицаПоУслуге Цикл
		Если СтрокаУслуги.Тариф = 0 Тогда
			Продолжить;
		КонецЕсли;
		Тариф = Тариф + ?(ПустаяСтрока(Тариф), "", "/") + СтрокаУслуги.Тариф;
	КонецЦикла;
	
	// Если тариф в выборке не найден, значит начислений в отчетном месяце не было.
	// Были проведены перерасчеты.
	Если ПустаяСтрока(Тариф) Тогда
		
		Если КэшТарифовУслугЛицевыхСчетов = Неопределено Тогда
			РазмерТарифа = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(ПериодПросмотра), Организация, Услуга, ЛицевойСчет);
		Иначе
			СтрокиТарифа = КэшТарифовУслугЛицевыхСчетов.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга", ЛицевойСчет, Услуга));
			
			Если СтрокиТарифа.Количество() = 0 Тогда
				РазмерТарифа = 0;
			Иначе
				РазмерТарифа = СтрокиТарифа[0].Тариф;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если пользователь установил пустой тариф документом "Операция".
		Если РазмерТарифа = Неопределено Тогда
			Возврат "";
		КонецЕсли;
		
		РазмерТарифа = ОКР(РазмерТарифа, 4);
		
		Тариф = "" + РазмерТарифа;
	КонецЕсли;
	
	Возврат Тариф;
	
КонецФункции // ПолучитьТарифПоУслуге()

// Формирует представление всех тарифов, по которым имело место начисление в отчетном
// месяце.
//
// Параметры:
//  ТаблицаПоУслуге - ТаблицаЗначений - таблица с начислениями по услуге.
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьВсеТарифыПоУслуге(ТаблицаПоУслуге) Экспорт
	
	Тариф = "";
	
	СтрокиОбщТарифа  = ТаблицаПоУслуге.НайтиСтроки(Новый Структура("ВидТарифа", Перечисления.КВП_ВидыТарифов.Общий));
	ТаблицаОбщТарифа = ТаблицаПоУслуге.Скопировать(СтрокиОбщТарифа);
	
	ТаблицаОбщТарифа.Свернуть("Тариф");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаОбщТарифа Цикл
		Тариф = ?(ЗначениеЗаполнено(Тариф), Тариф + "/" + СтрокаТаблицы.Тариф, "" + СтрокаТаблицы.Тариф);
	КонецЦикла;
	
	Возврат Тариф;
	
КонецФункции // ПолучитьВсеТарифыПоУслуге()

// Получает размер тарифа по строковому представлению.
//
// Параметры:
//  ПредставлениеТарифа - строковое представление тарифа.
//
// Возвращаемое значение:
//  Число - размер тарифа.
//
Функция ПолучитьРазмерТарифа(Знач ПредставлениеТарифа) Экспорт
	
	Тариф = 0;
	
	Попытка
		Тариф = Число(ПредставлениеТарифа);
		//Возврат Число(ПредставлениеТарифа);
	Исключение
		//Возврат 0;
		//СреднийТариф = 0;
		
		// 1. Проверим, количество вхождений слеша в представлении тарифа.
		ПредставлениеТарифа = ПредставлениеТарифа + ?(Прав(ПредставлениеТарифа, 1) = "/", "", "/");
		КоличествоРазмеровТарифов = СтрЧислоВхождений(ПредставлениеТарифа, "/");
		
		// Начинаем последовательно вычленять размеры тарифов и складывать размеры тарифов.
		Для Сч = 1 По КоличествоРазмеровТарифов Цикл
			ПозСлеша = Найти(ПредставлениеТарифа, "/");
			Если ПозСлеша > 0 Тогда
				ТекРазмерТариф = Лев(ПредставлениеТарифа, ПозСлеша - 1);
				ТекРазмерТариф = СокрЛП(ТекРазмерТариф);
				ПредставлениеТарифа = Сред(ПредставлениеТарифа, ПозСлеша + 1, СтрДлина(ПредставлениеТарифа));
				Попытка
					Тариф = Тариф + Число(ТекРазмерТариф);
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		Тариф = ?(КоличествоРазмеровТарифов = 0, 0, Окр(Тариф / КоличествоРазмеровТарифов, 2));
		
	КонецПопытки;
	
	Возврат Тариф;
	
КонецФункции // ПолучитьРазмерТарифа()

// Получает сумму начисленной льготы по текущей услуге с учетом настроек УП.
//
// Параметры:
//  ТаблицаЛьготСправочно - таблица со льготами, начисленными справочно
//  Льгота - сумма льгот, полученная из РН "Начисления"
//  Услуга - текущая услуга
//  ЛьготыСправочно - пользовательская настройка.
//
// Возвращаемое значение:
//  Число - сумма льгот.
//
Функция ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, ЛьготыСправочно)
	
	СуммаЛьготы = Льгота;
	
	Если ЛьготыСправочно И Не ТаблицаЛьготСправочно.Количество() = 0 Тогда
		СтрокаТекУслуги = ТаблицаЛьготСправочно.Найти(Услуга, "Услуга");
		
		Если Не СтрокаТекУслуги = Неопределено Тогда
			СуммаЛьготы = СтрокаТекУслуги.Льгота;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаЛьготы;
	
КонецФункции // ПолучитьЛьготуПоТекущейУслуге()

// Дополняет таблицу начисления данными о показаниях счетчиков и о расходе по счетчикам.
//
// Параметры:
//  ТаблицаНачисления - таблица начисления по текущему лицевому счету
//  ТаблицаПоказанийСчетчиков - таблица с показаниями счетчиков по текущему лиевому счету
//  ТаблицаРасхода - таблица с расходом по счетчикам по текущему лицевому счету.
//
Процедура ДополнитьНачисленияПоказаниямиИРасходомПоСчетчикам(ТаблицаНачисления, ТаблицаПоказанийСчетчиков, 
																ТаблицаРасхода, ТаблицаСвязанныхУслуг)
	
	// 1. Дополним таблицу строками по общедомовым услугам.
	// Это необходимо для корректности данных по общедомовым показателям.
	
	// Строка, необходимая только для сбора информации по общедомовым услугам.
	// При выводе данных о начислениях данная строка должна быть игнорирована.
	ТаблицаНачисления.Колонки.Добавить("ВспомогательнаяСтрока", Новый ОписаниеТипов("Булево"));
	
	// Сформируем таблицу общедомовых услуг.
	ТаблицаОбщедомовыхУслуг = ПолучитьТаблицуУслугОбщедомовогоСчетчика();
	
	врТаблицаНачисления = ТаблицаНачисления.Скопировать(, "Услуга, ВидТарифа, УслугаПоСчетчикам, УслугаСоставнаяПоСчетчикам, ЭтоКоммунальнаяУслуга");
	
	Для Каждого ТекСтрокаНачисления Из врТаблицаНачисления Цикл
		
		ТекУслуга = ТекСтрокаНачисления.Услуга;
		
		// А) Поиск по услуге базе.
		ОбщедомовыеУслуги = ТаблицаОбщедомовыхУслуг.НайтиСтроки(Новый Структура("Услуга", ТекУслуга));
		
		Для Каждого ТекСтрокаОбщедомовыхУслуг Из ОбщедомовыеУслуги Цикл
			
			УслугаОбщедомовогоСчетчика = ТекСтрокаОбщедомовыхУслуг.УслугаОбщедомовогоСчетчика;
			
			СтрокаПоУслуге = ТаблицаНачисления.Найти(УслугаОбщедомовогоСчетчика, "Услуга");
			Если СтрокаПоУслуге = Неопределено Тогда
				
				НоваяСтрока = ТаблицаНачисления.Добавить();
				НоваяСтрока.ВспомогательнаяСтрока                = Истина;
				НоваяСтрока.Услуга                               = УслугаОбщедомовогоСчетчика;
				НоваяСтрока.ВидУслуги                            = УслугаОбщедомовогоСчетчика.ВидУслуги;
				НоваяСтрока.ВидДляВывода                         = "" + УслугаОбщедомовогоСчетчика.ВидУслуги;
				НоваяСтрока.ВидТарифа                            = ТекСтрокаНачисления.ВидТарифа;
				НоваяСтрока.УслугаПоСчетчикам                    = ТекСтрокаНачисления.УслугаПоСчетчикам;
				НоваяСтрока.УслугаСоставнаяПоСчетчикам           = ТекСтрокаНачисления.УслугаСоставнаяПоСчетчикам;
				НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = Ложь;
				НоваяСтрока.КодВидаНачисленийИПУ                 = "";
				НоваяСтрока.КодВидаНачисленийОПУ                 = "";
				НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу         = Ложь;
				НоваяСтрока.УслугаСНачислениями                  = Ложь;
				НоваяСтрока.ЭтоКоммунальнаяУслуга                = ТекСтрокаНачисления.ЭтоКоммунальнаяУслуга;
				
				Для Каждого ТекКолонка Из ТаблицаНачисления.Колонки Цикл
					Если ТекКолонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
						НоваяСтрока[ТекКолонка.Имя] = 0;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Б) Поиск по общедомовой услуге.
		БазовыеУслуги = ТаблицаОбщедомовыхУслуг.НайтиСтроки(Новый Структура("УслугаОбщедомовогоСчетчика", ТекУслуга));
		
		Для Каждого ТекСтрокаБазовыхУслуг Из БазовыеУслуги Цикл
			
			БазоваяУслуга = ТекСтрокаБазовыхУслуг.Услуга;
			
			СтрокаПоУслуге = ТаблицаНачисления.Найти(БазоваяУслуга, "Услуга");
			Если СтрокаПоУслуге = Неопределено Тогда
				
				НоваяСтрока = ТаблицаНачисления.Добавить();
				НоваяСтрока.ВспомогательнаяСтрока                = Истина;
				НоваяСтрока.Услуга                               = БазоваяУслуга;
				НоваяСтрока.ВидУслуги                            = БазоваяУслуга.ВидУслуги;
				НоваяСтрока.ВидДляВывода                         = "" + БазоваяУслуга.ВидУслуги;
				НоваяСтрока.ВидТарифа                            = ТекСтрокаНачисления.ВидТарифа;
				НоваяСтрока.УслугаПоСчетчикам                    = ТекСтрокаНачисления.УслугаПоСчетчикам;
				НоваяСтрока.УслугаСоставнаяПоСчетчикам           = ТекСтрокаНачисления.УслугаСоставнаяПоСчетчикам;
				НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = Ложь;
				НоваяСтрока.КодВидаНачисленийИПУ                 = "";
				НоваяСтрока.КодВидаНачисленийОПУ                 = "";
				НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу         = Ложь;
				НоваяСтрока.УслугаСНачислениями                  = Ложь;
				НоваяСтрока.ЭтоКоммунальнаяУслуга                = ТекСтрокаНачисления.ЭтоКоммунальнаяУслуга;
				
				Для Каждого ТекКолонка Из ТаблицаНачисления.Колонки Цикл
					Если ТекКолонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
						НоваяСтрока[ТекКолонка.Имя] = 0;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// 2. Далее по алгоритму.
	ТаблицаНачисления.Колонки.Добавить("ПредПоказанияИнд",  Новый ОписаниеТипов("Строка"));
	ТаблицаНачисления.Колонки.Добавить("ПредПоказанияОбщ",  Новый ОписаниеТипов("Строка"));
	ТаблицаНачисления.Колонки.Добавить("ТекПоказанияИнд",   Новый ОписаниеТипов("Строка"));
	ТаблицаНачисления.Колонки.Добавить("ТекПоказанияОбщ",   Новый ОписаниеТипов("Строка"));
	
	// Суммарный расход всех л/с дома по ИПУ и норме.
	ТаблицаНачисления.Колонки.Добавить("ОбщРасходИнд",      Новый ОписаниеТипов("Число"));
	
	// Суммарный объем распределения расхода по ОПУ на л/с дома.
	ТаблицаНачисления.Колонки.Добавить("ОбщРасходОбщ",      Новый ОписаниеТипов("Число"));
	
	// Фактический расход по всем ОПУ дома (ПД для Перми).
	ТаблицаНачисления.Колонки.Добавить("ОбщРасходПоОПУ",    Новый ОписаниеТипов("Число"));
	
	// Суммарный расход всех л/с дома только по ИПУ (ПД для Перми).
	ТаблицаНачисления.Колонки.Добавить("ОбщРасходИндПУ",    Новый ОписаниеТипов("Число"));
	
	// Суммарный расход всех л/с дома только по норме (ПД для Перми).
	ТаблицаНачисления.Колонки.Добавить("ОбщРасходИндНорма", Новый ОписаниеТипов("Число"));
	
	// Расход в разрезе ИПУ.
	ТаблицаНачисления.Колонки.Добавить("ОбъемПотребленияИПУ", Новый ОписаниеТипов("Строка"));
	
	// Расход в разрезе ОПУ.
	ТаблицаНачисления.Колонки.Добавить("ОбъемПотребленияОПУ", Новый ОписаниеТипов("Строка"));
	
	// Суммарный объем расхождений, учтенных в отчетном месяце.
	ТаблицаНачисления.Колонки.Добавить("ОбщРасходРасхождение", Новый ОписаниеТипов("Число"));
	
	// Учетный индивидуальный объем.
	ТаблицаНачисления.Колонки.Добавить("ОбщУчетныйРасход",    Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаНачисления Из ТаблицаНачисления Цикл
		
		Если (Не ЗначениеЗаполнено(СтрокаНачисления.УслугаПоСчетчикам) Или Не СтрокаНачисления.УслугаПоСчетчикам)
			И (Не ЗначениеЗаполнено(СтрокаНачисления.УслугаСоставнаяПоСчетчикам) Или Не СтрокаНачисления.УслугаСоставнаяПоСчетчикам)
			И НЕ СтрокаНачисления.ЭтоКоммунальнаяУслуга Тогда
			Продолжить;
		КонецЕсли;
		
		Услуга = СтрокаНачисления.Услуга;
		
		// ИЩЕМ ПРЕДЫДУЩИЕ, ТЕКУЩИЕ ПОКАЗАНИЯ И РАСХОД.
		Отбор = Новый Структура;
		Отбор.Вставить("Услуга", Услуга);
		
		СтрокиПоказаний = ТаблицаПоказанийСчетчиков.НайтиСтроки(Отбор);
		ТаблицаПоказанийПоТекУслуге = ТаблицаПоказанийСчетчиков.Скопировать(СтрокиПоказаний);
		
		ТекПоказанияИнд        = "";
		ПредыдущиеПоказанияИПУ = "";
		ТекущиеПоказанияОПУ    = "";
		ПредыдущиеПоказанияОПУ = "";
		
		ТекущиеПоказанияИПУДн = "";
		ТекущиеПоказанияИПУНч = "";
		ТекущиеПоказанияИПУПк = "";
		
		ПредыдущиеПоказанияИПУДн = "";
		ПредыдущиеПоказанияИПУНч = "";
		ПредыдущиеПоказанияИПУПк = "";
		
		ПредыдущиеПоказанияОПУДн = "";
		ПредыдущиеПоказанияОПУНч = "";
		ПредыдущиеПоказанияОПУПк = "";
		
		ТекущиеПоказанияОПУДн = "";
		ТекущиеПоказанияОПУНч = "";
		ТекущиеПоказанияОПУПк = "";
		
		РасходИПУДн = "";
		РасходИПУНч = "";
		РасходИПУПк = "";
		
		РасходОПУДн = "";
		РасходОПУНч = "";
		РасходОПУПк = "";
		
		// Формируем таблицу с показаниями ИПУ.
		ОтборИПУ = Новый Структура;
		ОтборИПУ.Вставить("ЯвляетсяОПУ", Ложь);
		
		СтрокиПоказанийИПУ  = ТаблицаПоказанийПоТекУслуге.НайтиСтроки(ОтборИПУ);
		
		Для Каждого СтрокаПоказанийИПУ Из СтрокиПоказанийИПУ Цикл
			Если ЗначениеЗаполнено(СтрокаПоказанийИПУ.ПредыдущееПоказаниеДн) Тогда
				РасходИПУДн              = ?(ЗначениеЗаполнено(РасходИПУДн), РасходИПУДн + "/"
											+ СтрокаПоказанийИПУ.РасходДн, "" + СтрокаПоказанийИПУ.РасходДн);
				
				ТекущиеПоказанияИПУДн    = ?(ЗначениеЗаполнено(ТекущиеПоказанияИПУДн), ТекущиеПоказанияИПУДн + "/" 
											+ СтрокаПоказанийИПУ.ПредыдущееПоказаниеДн, "" + СтрокаПоказанийИПУ.ПредыдущееПоказаниеДн);
										
				ПредыдущиеПоказанияИПУДн = ?(ЗначениеЗаполнено(ПредыдущиеПоказанияИПУДн), ПредыдущиеПоказанияИПУДн + "/" 
											+ СтрокаПоказанийИПУ.ПредПредыдущееПоказаниеДн, "" + СтрокаПоказанийИПУ.ПредПредыдущееПоказаниеДн);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПоказанийИПУ.ПредыдущееПоказаниеНч) Тогда
				РасходИПУНч              = ?(ЗначениеЗаполнено(РасходИПУНч), РасходИПУНч + "/"
											+ СтрокаПоказанийИПУ.РасходНч, "" + СтрокаПоказанийИПУ.РасходНч);
				ТекущиеПоказанияИПУНч    = ?(ЗначениеЗаполнено(ТекущиеПоказанияИПУНч), ТекущиеПоказанияИПУНч + "/" 
											+ СтрокаПоказанийИПУ.ПредыдущееПоказаниеНч, "" + СтрокаПоказанийИПУ.ПредыдущееПоказаниеНч);
										
				ПредыдущиеПоказанияИПУНч = ?(ЗначениеЗаполнено(ПредыдущиеПоказанияИПУНч), ПредыдущиеПоказанияИПУНч + "/" 
											+ СтрокаПоказанийИПУ.ПредПредыдущееПоказаниеНч, "" + СтрокаПоказанийИПУ.ПредПредыдущееПоказаниеНч);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПоказанийИПУ.ПредыдущееПоказаниеПк) Тогда
				РасходИПУПк              = ?(ЗначениеЗаполнено(РасходИПУПк), РасходИПУПк + "/"
											+ СтрокаПоказанийИПУ.РасходПк, "" + СтрокаПоказанийИПУ.РасходПк);
				ТекущиеПоказанияИПУПк    = ?(ЗначениеЗаполнено(ТекущиеПоказанияИПУПк), ТекущиеПоказанияИПУПк + "/" 
											+ СтрокаПоказанийИПУ.ПредыдущееПоказаниеПк, "" + СтрокаПоказанийИПУ.ПредыдущееПоказаниеПк);
										
				ПредыдущиеПоказанияИПУПк = ?(ЗначениеЗаполнено(ПредыдущиеПоказанияИПУПк), ПредыдущиеПоказанияИПУПк + "/" 
											+ СтрокаПоказанийИПУ.ПредПредыдущееПоказаниеПк, "" + СтрокаПоказанийИПУ.ПредПредыдущееПоказаниеПк);
			КонецЕсли;
			
			ТекПоказанияИнд = ТекущиеПоказанияИПУДн
							+ ?(ПустаяСтрока(ТекущиеПоказанияИПУНч), "", "/")
							+ ТекущиеПоказанияИПУНч
							+ ?(ПустаяСтрока(ТекущиеПоказанияИПУПк), "", "/")
							+ ТекущиеПоказанияИПУПк;
			
			ПредыдущиеПоказанияИПУ = ПредыдущиеПоказанияИПУДн
								   + ?(ПустаяСтрока(ПредыдущиеПоказанияИПУНч), "", "/")
								   + ПредыдущиеПоказанияИПУНч
								   + ?(ПустаяСтрока(ПредыдущиеПоказанияИПУПк), "", "/")
								   + ПредыдущиеПоказанияИПУПк;
			
		КонецЦикла;
		
		// Формируем Таблицу с показаниями ОПУ.
		ОтборОПУ = Новый Структура;
		ОтборОПУ.Вставить("ЯвляетсяОПУ", Истина);
		
		СтрокиПоказанийОПУ  = ТаблицаПоказанийПоТекУслуге.НайтиСтроки(ОтборОПУ);
		
		Для Каждого СтрокаПоказанийОПУ Из СтрокиПоказанийОПУ Цикл
			
			Если ЗначениеЗаполнено(СтрокаПоказанийОПУ.ПредыдущееПоказаниеДн) Тогда
				РасходОПУДн              = ?(ЗначениеЗаполнено(РасходОПУДн), РасходОПУДн + "/"
											+ СтрокаПоказанийОПУ.РасходДн, "" + СтрокаПоказанийОПУ.РасходДн);
				ТекущиеПоказанияОПУДн    = ?(ЗначениеЗаполнено(ТекущиеПоказанияОПУДн), ТекущиеПоказанияОПУДн + "/" 
											+ СтрокаПоказанийОПУ.ПредыдущееПоказаниеДн, "" + СтрокаПоказанийОПУ.ПредыдущееПоказаниеДн);
										
				ПредыдущиеПоказанияОПУДн = ?(ЗначениеЗаполнено(ПредыдущиеПоказанияОПУДн), ПредыдущиеПоказанияОПУДн + "/" 
											+ СтрокаПоказанийОПУ.ПредПредыдущееПоказаниеДн, "" + СтрокаПоказанийОПУ.ПредПредыдущееПоказаниеДн);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПоказанийОПУ.ПредыдущееПоказаниеНч) Тогда
				РасходОПУНч              = ?(ЗначениеЗаполнено(РасходОПУНч), РасходОПУНч + "/"
											+ СтрокаПоказанийОПУ.РасходНч, "" + СтрокаПоказанийОПУ.РасходНч);
				ТекущиеПоказанияОПУНч    = ?(ЗначениеЗаполнено(ТекущиеПоказанияОПУНч), ТекущиеПоказанияОПУНч + "/" 
											+ СтрокаПоказанийОПУ.ПредыдущееПоказаниеНч, "" + СтрокаПоказанийОПУ.ПредыдущееПоказаниеНч);
										
				ПредыдущиеПоказанияОПУНч = ?(ЗначениеЗаполнено(ПредыдущиеПоказанияОПУНч), ПредыдущиеПоказанияОПУНч + "/" 
											+ СтрокаПоказанийОПУ.ПредПредыдущееПоказаниеНч, "" + СтрокаПоказанийОПУ.ПредПредыдущееПоказаниеНч);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПоказанийОПУ.ПредыдущееПоказаниеПк) Тогда
				РасходОПУПк              = ?(ЗначениеЗаполнено(РасходОПУПк), РасходОПУПк + "/"
											+ СтрокаПоказанийОПУ.РасходПк, "" + СтрокаПоказанийОПУ.РасходПк);
				ТекущиеПоказанияОПУПк    = ?(ЗначениеЗаполнено(ТекущиеПоказанияОПУПк), ТекущиеПоказанияОПУПк + "/" 
											+ СтрокаПоказанийОПУ.ПредыдущееПоказаниеПк, "" + СтрокаПоказанийОПУ.ПредыдущееПоказаниеПк);
										
				ПредыдущиеПоказанияОПУПк = ?(ЗначениеЗаполнено(ПредыдущиеПоказанияОПУПк), ПредыдущиеПоказанияОПУПк + "/" 
											+ СтрокаПоказанийОПУ.ПредПредыдущееПоказаниеПк, "" + СтрокаПоказанийОПУ.ПредПредыдущееПоказаниеПк);
			КонецЕсли;
			
			ТекущиеПоказанияОПУ = ТекущиеПоказанияОПУДн
								+ ?(ПустаяСтрока(ТекущиеПоказанияОПУНч), "", "/")
								+ ТекущиеПоказанияОПУНч
								+ ?(ПустаяСтрока(ТекущиеПоказанияОПУПк), "", "/")
								+ ТекущиеПоказанияОПУПк;
			
			ПредыдущиеПоказанияОПУ = ПредыдущиеПоказанияОПУДн
								   + ?(ПустаяСтрока(ПредыдущиеПоказанияОПУНч), "", "/")
								   + ПредыдущиеПоказанияОПУНч
								   + ?(ПустаяСтрока(ПредыдущиеПоказанияОПУПк), "", "/")
								   + ПредыдущиеПоказанияОПУПк;
			
		КонецЦикла;
		
		Если СтрокаНачисления.УслугаСоставнаяПоСчетчикам И НЕ СтрокаНачисления.СтрокаДетализацииСост Тогда
			Если Не СтрокиПоказанийИПУ.Количество() = 0 Тогда
				СтрокаНачисления.ТекПоказанияИнд     = ТекПоказанияИнд;
				СтрокаНачисления.ПредПоказанияИнд    = ПредыдущиеПоказанияИПУ;
			КонецЕсли;
			Если Не СтрокиПоказанийОПУ.Количество() = 0 Тогда
				СтрокаНачисления.ТекПоказанияОбщ     = ТекущиеПоказанияОПУ;
				СтрокаНачисления.ПредПоказанияОбщ    = ПредыдущиеПоказанияОПУ;
			КонецЕсли;
		Иначе
			
			Если СтрокаНачисления.ВидТарифа = Перечисления.КВП_ВидыТарифов.Дневной 
				Или СтрокаНачисления.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий Тогда
				
				Если (СтрокаНачисления.ОбщИДнТарифыНеРавны И СтрокаНачисления.ВидТарифа = Перечисления.КВП_ВидыТарифов.Дневной)
				 Или Не СтрокаНачисления.ОбщИДнТарифыНеРавны Тогда
					Если Не СтрокиПоказанийИПУ.Количество() = 0 Тогда
						СтрокаНачисления.ОбъемПотребленияИПУ = РасходИПУДн;
						СтрокаНачисления.ТекПоказанияИнд     = ТекущиеПоказанияИПУДн;
						СтрокаНачисления.ПредПоказанияИнд    = ПредыдущиеПоказанияИПУДн;
					КонецЕсли;
					
					Если Не СтрокиПоказанийОПУ.Количество() = 0 Тогда
						СтрокаНачисления.ОбъемПотребленияОПУ = РасходОПУДн;
						СтрокаНачисления.ТекПоказанияОбщ     = ТекущиеПоказанияОПУДн;
						СтрокаНачисления.ПредПоказанияОбщ    = ПредыдущиеПоказанияОПУДн;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрокаНачисления.ВидТарифа = Перечисления.КВП_ВидыТарифов.Ночной Тогда
				
				Если Не СтрокиПоказанийИПУ.Количество() = 0 Тогда
					СтрокаНачисления.ОбъемПотребленияИПУ = РасходИПУНч;
					СтрокаНачисления.ТекПоказанияИнд     = ТекущиеПоказанияИПУНч;
					СтрокаНачисления.ПредПоказанияИнд    = ПредыдущиеПоказанияИПУНч;
				КонецЕсли;
				
				Если Не СтрокиПоказанийОПУ.Количество() = 0 Тогда
					СтрокаНачисления.ОбъемПотребленияОПУ = РасходОПУНч;
					СтрокаНачисления.ТекПоказанияОбщ     = ТекущиеПоказанияОПУНч;
					СтрокаНачисления.ПредПоказанияОбщ    = ПредыдущиеПоказанияОПУНч;
				КонецЕсли;
			ИначеЕсли СтрокаНачисления.ВидТарифа = Перечисления.КВП_ВидыТарифов.Пиковый Тогда
				
				Если Не СтрокиПоказанийИПУ.Количество() = 0 Тогда
					СтрокаНачисления.ОбъемПотребленияИПУ = РасходИПУПк;
					СтрокаНачисления.ТекПоказанияИнд     = ТекущиеПоказанияИПУПк;
					СтрокаНачисления.ПредПоказанияИнд    = ПредыдущиеПоказанияИПУПк;
				КонецЕсли;
				
				Если Не СтрокиПоказанийОПУ.Количество() = 0 Тогда
					СтрокаНачисления.ОбъемПотребленияОПУ = РасходОПУПк;
					СтрокаНачисления.ТекПоказанияОбщ     = ТекущиеПоказанияОПУПк;
					СтрокаНачисления.ПредПоказанияОбщ    = ПредыдущиеПоказанияОПУПк;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// ИЩЕМ РАСХОД.
		Если СтрокаНачисления.СтрокаГруппыДетализации Тогда
			
			ОтборРасход = Новый Структура;
			ОтборРасход.Вставить("Услуга", Услуга);
			
		Иначе
			
			ОтборРасход = Новый Структура;
			ОтборРасход.Вставить("Услуга",    Услуга);
			ОтборРасход.Вставить("ВидТарифа", СтрокаНачисления.ВидТарифа);
			
		КонецЕсли;
		
		СтрокиРасхода = ТаблицаРасхода.НайтиСтроки(ОтборРасход);
		
		Если Не СтрокаНачисления.СтрокаГруппыДетализации И Не СтрокаНачисления.ОбщИДнТарифыНеРавны Тогда
		
			// К начислениям по дневному виду тарифа добавляем начисления по общему виду тарифа.
			// И наоборот.
			СтрокиДопРасхода = Новый Массив;
			Если СтрокаНачисления.ВидТарифа = Перечисления.КВП_ВидыТарифов.Дневной Тогда
				ОтборДопРасход = Новый Структура;
				ОтборДопРасход.Вставить("Услуга",    Услуга);
				ОтборДопРасход.Вставить("ВидТарифа", Перечисления.КВП_ВидыТарифов.Общий);
				СтрокиДопРасхода = ТаблицаРасхода.НайтиСтроки(ОтборДопРасход);
			ИначеЕсли СтрокаНачисления.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий Тогда
				ОтборДопРасход = Новый Структура;
				ОтборДопРасход.Вставить("Услуга",    Услуга);
				ОтборДопРасход.Вставить("ВидТарифа", Перечисления.КВП_ВидыТарифов.Дневной);
				СтрокиДопРасхода = ТаблицаРасхода.НайтиСтроки(ОтборДопРасход);
			КонецЕсли;
			
			Для Каждого СтрокаДопРасхода Из СтрокиДопРасхода Цикл
				СтрокиРасхода.Добавить(СтрокаДопРасхода);
			КонецЦикла;
		КонецЕсли;
		
		ДобавляемыеСтроки = Новый Массив;
		Если НеобходимоДобавитьРасходПоДругимВидамТарифов(ТаблицаНачисления, СтрокаНачисления, ТаблицаРасхода, ДобавляемыеСтроки) Тогда
			Для Каждого ДобавляемаяСтрока ИЗ ДобавляемыеСтроки Цикл
				СтрокиРасхода.Добавить(ДобавляемаяСтрока);
			КонецЦикла;
		КонецЕсли;
		
		Если Не СтрокиРасхода.Количество() = 0 Тогда
			
			ТаблицаРасходаПоТекУслуге = ТаблицаРасхода.Скопировать(СтрокиРасхода);
			
			ТаблицаРасходаПоТекУслуге.Свернуть("Услуга", "КоличествоИндПУ, КоличествоИндНорма, КоличествоИПУ,
												| КоличествоУчетное, КоличествоРасхождения, КоличествоОПУ, РасходПоОПУ");
			
			СтрокаРасходПоТекУслуге = ТаблицаРасходаПоТекУслуге.Получить(0);
			
			СтрокаНачисления.ОбщРасходИнд         = СтрокаРасходПоТекУслуге.КоличествоИПУ;
			СтрокаНачисления.ОбщРасходОбщ         = СтрокаРасходПоТекУслуге.КоличествоОПУ;
			СтрокаНачисления.ОбщРасходПоОПУ       = СтрокаРасходПоТекУслуге.РасходПоОПУ;
			СтрокаНачисления.ОбщРасходИндПУ       = СтрокаРасходПоТекУслуге.КоличествоИндПУ;
			СтрокаНачисления.ОбщРасходИндНорма    = СтрокаРасходПоТекУслуге.КоличествоИндНорма;
			СтрокаНачисления.ОбщУчетныйРасход     = СтрокаРасходПоТекУслуге.КоличествоУчетное;
			СтрокаНачисления.ОбщРасходРасхождение = СтрокаРасходПоТекУслуге.КоличествоРасхождения;
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем вспомогательные строки, по которым данные не заполнены.
	МассивСтрокДляУдаления = Новый Массив;
	
	ВспомогательныеСтроки = ТаблицаНачисления.НайтиСтроки(Новый Структура("ВспомогательнаяСтрока", Истина));
	Для Каждого ТекСтрока Из ВспомогательныеСтроки Цикл
		
		Если ТекСтрока.ОбщРасходИнд = 0
		   И ТекСтрока.ОбщРасходОбщ = 0
		   И ТекСтрока.ОбщРасходПоОПУ = 0
		   И ТекСтрока.ОбщРасходИндПУ = 0
		   И ТекСтрока.ОбщРасходИндНорма = 0
		   И ТекСтрока.ОбщУчетныйРасход = 0
		   И ТекСтрока.ОбщРасходРасхождение = 0 Тогда
			
			МассивСтрокДляУдаления.Добавить(ТекСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекСтрокаУдаления Из МассивСтрокДляУдаления Цикл
		ТаблицаНачисления.Удалить(ТекСтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ДополнитьНачисленияПоказаниямиИРасходомПоСчетчикам()

// Сворачивает начисления по видам услуг в соответствии с настройками, указанными пользователем.
//
// Параметры:
//  ТаблицаНачисления - таблица начисления по текущему л/с
//  ТаблицаВидовУслуг - таблица со способами свертки начислений
//  КвитанцияНаПени   - признак формирования квитанции по пени
//  ЭтоКвитанцииИзвещения - признак вызова процедуры из стандартных квитанций извещений.
//
Процедура СвернутьТаблицуНачисления(ТаблицаСНачислениями, ТаблицаВидовУслуг, КвитанцияНаПени = Ложь, ЭтоКвитанцииИзвещения = Ложь, СтруктураНастроек = Неопределено)
	
	ТаблицаНачисления = ТаблицаСНачислениями.СкопироватьКолонки();
	
	// Добавляем в итоговую таблицу колонку, в которой будет храниться массив всех свернутых услуг.
	ТаблицаНачисления.Колонки.Добавить("МассивУслуг", Новый ОписаниеТипов("Массив"));
	
	// Получим таблицу видов услуг для обхода таблицы с начислениями по каждому виду услуги.
	ТаблицаВидовУслугТекКвитанции = ТаблицаСНачислениями.Скопировать(, "ВидУслуги, СтрокаДляОбщегоИмущества");
	ТаблицаВидовУслугТекКвитанции.Свернуть("ВидУслуги, СтрокаДляОбщегоИмущества");
	
	СтруктураОтбора = Новый Структура("ВидУслуги, СтрокаДляОбщегоИмущества");
	
	Для каждого ТекСтрока из ТаблицаВидовУслугТекКвитанции Цикл
		
		СтруктураОтбора.ВидУслуги                = ТекСтрока.ВидУслуги;
		СтруктураОтбора.СтрокаДляОбщегоИмущества = ТекСтрока.СтрокаДляОбщегоИмущества;
		
		СтрокаВида = ТаблицаВидовУслуг.Найти(ТекСтрока.ВидУслуги, "ВидУслуги");
		СтрокиВида = ТаблицаСНачислениями.НайтиСтроки(СтруктураОтбора);
		
		ТаблицаВида = ТаблицаСНачислениями.Скопировать(СтрокиВида);
		
		Если СтрокаВида <> Неопределено
		 И Не (СтрокаВида.СпособВыводаВКвитанциях = "" Или СтрокаВида.СпособВыводаВКвитанциях = "Не сворачивать") Тогда
			// Подготавливаем массив со всеми услугами данного вида для того, чтобы в последующем записать
			// его в строки итоговой таблицы начисления.
			ТаблицаВидаБуфер = ТаблицаВида.Скопировать(, "Услуга");
			ТаблицаВидаБуфер.Свернуть("Услуга");
			МассивУслуг = ТаблицаВидаБуфер.ВыгрузитьКолонку("Услуга");
			
			// Свертка услуг имеет смысл только в следующих случаях:
			//  1. в начислении присутствуют несколько услуг данного вида
			//  2. не имеется составных услуг.
			Если Не ТаблицаВидаБуфер.Количество() = 1 И Не ИмеетсяСоставнаяУслуга(ТаблицаВида) Тогда
				СвернутьНачисленияПоВидамТарифов(ТаблицаНачисления, СтрокаВида, ТаблицаВида, МассивУслуг, ТекСтрока.СтрокаДляОбщегоИмущества, КвитанцияНаПени, ЭтоКвитанцииИзвещения, СтруктураНастроек);
			Иначе
				ДобавитьСтрокиВТаблицуНачисления(ТаблицаНачисления, ТаблицаВида);
			КонецЕсли;
			
		Иначе
			ДобавитьСтрокиВТаблицуНачисления(ТаблицаНачисления, ТаблицаВида);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТаблицаВидовУслуг.Количество() = 0 Тогда
		ТаблицаСНачислениями = ТаблицаНачисления;
	КонецЕсли;
	
	// Механизм свертки услуг, связанных в РС "Услуги общедомового счетчика" удален в силу того, что подобная свертка вызывает
	// вопросы у пользователей.
	// Тем пользователям, которые все-таки хотят сворачивать начисления, надо рекомендовать пользоваться механизмами свертки по видам услуг.
	
КонецПроцедуры // СвернутьТаблицуНачисления()

// Сворачивает строки начисления в соответствии с тарифностью.
//
// Параметры:
//  ТаблицаНачисления - итоговая таблица начисления
//  СтрокаВида - строка текущего вида тарифа
//  ТаблицаВида - таблица начисления по текущему виду тарифа
//  МассивУслуг - массив услуг, входящих в текущий вид услуг
//  СтрокаДляОбщегоИмущества - признак строки для общего имущества
//  КвитанцияНаПени - признак формирования квитанции по пени
//  ЭтоКвитанцииИзвещения - признак вызова процедуры из стандартных квитанций извещений.
//
Процедура СвернутьНачисленияПоВидамТарифов(ТаблицаНачисления, СтрокаВида, ТаблицаВида, МассивУслуг, СтрокаДляОбщегоИмущества, КвитанцияНаПени, ЭтоКвитанцииИзвещения, СтруктураНастроек = Неопределено)
	
	// Если вызов процедуры свертки начислений по видам тарифов был выполнен с квитанций и извещений,
	// то выполняем свертку начислений по одному алгоритму, иначе - по другому.
	// Такое разделение на отдельные процедуры пришлось выполнить потому, что механизмы в платежных документах
	// более развиты чем в квитанциях и извещениях. Но желательно при изменениях в одной процедуре,
	// учесть эти изменения и в другой (при необходимости).
	Если ЭтоКвитанцииИзвещения = Истина Тогда
		СвернутьНачисленияПоВидамТарифовВКвитанцияхИзвещениях(ТаблицаНачисления, СтрокаВида, ТаблицаВида, МассивУслуг, СтрокаДляОбщегоИмущества, КвитанцияНаПени);
	Иначе
		СвернутьНачисленияПоВидамТарифовВПлатежныхДокументах(ТаблицаНачисления, СтрокаВида, ТаблицаВида, МассивУслуг, СтрокаДляОбщегоИмущества, КвитанцияНаПени, СтруктураНастроек);
	КонецЕсли;
	
КонецПроцедуры // СвернутьНачисленияПоВидамТарифов()

// Сворачивает строки начисления в соответствии с тарифностью в Квитанциях и извещениях.
//
// Параметры:
//  ТаблицаНачисления - итоговая таблица начисления
//  СтрокаВида - строка текущего вида тарифа
//  ТаблицаВида - таблица начисления по текущему виду тарифа
//  МассивУслуг - массив услуг, входящих в текущий вид услуг.
//
Процедура СвернутьНачисленияПоВидамТарифовВКвитанцияхИзвещениях(ТаблицаНачисления, СтрокаВида, ТаблицаВида, МассивУслуг, СтрокаДляОбщегоИмущества, КвитанцияНаПени)
	
	ПоказательСвертки = ?(СтрокаВида.СпособВыводаВКвитанциях = "Тариф сворачивать, количество суммировать", "Тариф", "Количество");
	ИмеетсяУслугаСПУ  = НайтиУслугуСПУ(ТаблицаВида);
	
	Услуга = МассивУслуг[0];
	
	// ФОРМИРУЕМ ТАБЛИЦЫ СО СТРОКАМИ НАЧИСЛЕНИЙ ПО КАЖДОМУ ВИДУ ТАРИФА.
	// Общий тариф.
	СтрокиОбщ       = ТаблицаВида.НайтиСтроки(Новый Структура("ВидТарифа", Перечисления.КВП_ВидыТарифов.Общий));
	ТаблицаОбщ      = ТаблицаВида.Скопировать(СтрокиОбщ);
	ТаблицаОбщБуфер = ТаблицаОбщ.Скопировать(, "ВидУслуги, Количество, НачисленоИПУ, НачисленоОПУ, Начислено");
	ТаблицаОбщБуфер.Свернуть("ВидУслуги", "Количество, НачисленоИПУ, НачисленоОПУ, Начислено");
	
	// Дневной тариф.
	СтрокиДн       = ТаблицаВида.НайтиСтроки(Новый Структура("ВидТарифа", Перечисления.КВП_ВидыТарифов.Дневной));
	ТаблицаДн      = ТаблицаВида.Скопировать(СтрокиДн);
	ТаблицаДнБуфер = ТаблицаДн.Скопировать(, "ВидУслуги, Количество, НачисленоИПУ, НачисленоОПУ, Начислено");
	ТаблицаДнБуфер.Свернуть("ВидУслуги", "Количество, НачисленоИПУ, НачисленоОПУ, Начислено");
	
	// Ночной тариф.
	СтрокиНч       = ТаблицаВида.НайтиСтроки(Новый Структура("ВидТарифа", Перечисления.КВП_ВидыТарифов.Ночной));
	ТаблицаНч      = ТаблицаВида.Скопировать(СтрокиНч);
	ТаблицаНчБуфер = ТаблицаНч.Скопировать(, "ВидУслуги, Количество, НачисленоИПУ, НачисленоОПУ, Начислено");
	ТаблицаНчБуфер.Свернуть("ВидУслуги", "Количество, НачисленоИПУ, НачисленоОПУ, Начислено");
	
	// Пиковый тариф.
	СтрокиПик       = ТаблицаВида.НайтиСтроки(Новый Структура("ВидТарифа", Перечисления.КВП_ВидыТарифов.Пиковый));
	ТаблицаПик      = ТаблицаВида.Скопировать(СтрокиПик);
	ТаблицаПикБуфер = ТаблицаПик.Скопировать(, "ВидУслуги, Количество, НачисленоИПУ, НачисленоОПУ, Начислено");
	ТаблицаПикБуфер.Свернуть("ВидУслуги", "Количество, НачисленоИПУ, НачисленоОПУ, Начислено");
	
	// Итоговые строки начислений по услугам, детализированным по видам тарифов.
	СтрокиИтог       = ТаблицаВида.НайтиСтроки(Новый Структура("ВидТарифа", Неопределено));
	ТаблицаИтог      = ТаблицаВида.Скопировать(СтрокиИтог);
	ТаблицаИтогБуфер = ТаблицаИтог.Скопировать(, "ВидУслуги, Льгота, Перерасчет, Пени, Субсидии, ВРоткл, Количество, НачисленоИПУ, НачисленоОПУ, Начислено, Коплате, Оплата, НачальноеСальдо");
	ТаблицаИтогБуфер.Свернуть("ВидУслуги", "Льгота, Перерасчет, Пени, Субсидии, ВРоткл, Количество, НачисленоИПУ, НачисленоОПУ, Начислено, Коплате, Оплата, НачальноеСальдо");
	
	// В качестве нормы потребления указываем первую попавшуюся норму.
	Норма = НайтиНормуПотребленияСвертка(ТаблицаВида, "РазмерНормы");
	
	Если (Не ТаблицаДн.Количество() = 0 И Не ТаблицаОбщ.Количество() = 0) Тогда
		Если  Не ТаблицаДн.Получить(0).Тариф = ТаблицаОбщ.Получить(0).Тариф Тогда
			ДневнойИОбщийТарифыРавны = Ложь;
		Иначе
			ДневнойИОбщийТарифыРавны = Истина;
		КонецЕсли;
	Иначе
		ДневнойИОбщийТарифыРавны = Ложь;
	КонецЕсли;
	
	// ПОЛУЧАЕМ ЗНАЧЕНИЯ ТАРИФОВ И ОБЪЕМОВ ПОТРЕБЛЕНИЯ ПОСЛЕ СВЕРТКИ.
	Если ПоказательСвертки = "Тариф" Тогда
		// Тариф сворачиваем, количество суммируем.
		КоличествоИтог = ТаблицаДн.Итог("Количество") + ТаблицаОбщ.Итог("Количество") 
						+ ТаблицаНч.Итог("Количество") + ТаблицаПик.Итог("Количество");
		
		Если ДневнойИОбщийТарифыРавны Тогда
			ТарифДн          = ?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).Тариф, 
								?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).Тариф, 0));
			ТарифДляВыводаДн = ?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).ТарифДляВывода, 
								?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).ТарифДляВывода, ""));
								
			Если ИмеетсяУслугаСПУ Тогда
				КоличествоДн = ТаблицаОбщ.Итог("Количество") + ТаблицаДн.Итог("Количество");
			Иначе
				КоличествоДн = ?(ТарифДн = 0, 0, ТаблицаОбщ.Итог("Начислено") / ТарифДн);
			КонецЕсли;
			
		Иначе
			КоличествоДн = ТаблицаДн.Итог("Количество");
			КоличествоОбщ = ТаблицаОбщ.Итог("Количество");
			
			ТарифДн          = ?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).Тариф, 0);
			ТарифДляВыводаДн = ?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).ТарифДляВывода, "");
								
			ТарифОбщ          = ?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).Тариф, 0);
			ТарифДляВыводаОбщ = ?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).ТарифДляВывода, "");
		КонецЕсли;
		
		КоличествоНч = ТаблицаНч.Итог("Количество");
		
		ТарифНч          = ?(Не ТаблицаНч.Количество() = 0, ТаблицаНч.Получить(0).Тариф, 0);
		ТарифДляВыводаНч = ?(Не ТаблицаНч.Количество() = 0, ТаблицаНч.Получить(0).ТарифДляВывода, "");
		
		КоличествоПик = ТаблицаПик.Итог("Количество");
		
		ТарифПик          = ?(Не ТаблицаПик.Количество() = 0, ТаблицаПик.Получить(0).Тариф, 0);
		ТарифДляВыводаПик = ?(Не ТаблицаПик.Количество() = 0, ТаблицаПик.Получить(0).ТарифДляВывода, "");
		
	Иначе
		// Тариф суммируем, количество сворачиваем.
		КоличествоИтог = ?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).Количество,
							?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).Количество, 0));
		
		Если ДневнойИОбщийТарифыРавны Тогда
			ТарифДн          = ТаблицаДн.Итог("Тариф") + ТаблицаОбщ.Итог("Тариф");
			ТарифДляВыводаДн = "" + ТарифДн;
			
			Если ИмеетсяУслугаСПУ Тогда
				КоличествоДн = ?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).Количество,
								?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).Количество, 0));
			Иначе
				КоличествоДн = ?(ТарифДн = 0, 0, ТаблицаОбщ.Итог("Начислено") / ТарифДн);
			КонецЕсли;
			
		Иначе
			КоличествоДн = ?(ТаблицаДн.Количество() = 0, 0, ТаблицаДн.Получить(0).Количество);
			
			КоличествоОбщ = ?(ТаблицаОбщ.Количество() = 0, 0, ТаблицаОбщ.Получить(0).Количество);
			
			ТарифДн          = ?(ТаблицаДн.Количество() = 0, 0, ТаблицаДн.Итог("Тариф"));
			ТарифДляВыводаДн = "" + ТарифДн;
								
			ТарифОбщ          = ?(ТаблицаОбщ.Количество() = 0, 0, ТаблицаОбщ.Итог("Тариф"));
			ТарифДляВыводаОбщ = "" + ТарифОбщ;
			
		КонецЕсли;
		
		КоличествоНч = ?(ТаблицаНч.Количество() = 0, 0, ТаблицаНч.Получить(0).Количество);
		
		ТарифНч          = ?(ТаблицаНч.Количество() = 0, 0, ТаблицаНч.Итог("Тариф"));
		ТарифДляВыводаНч = "" + ТарифНч;
		
		КоличествоПик = ?(ТаблицаПик.Количество() = 0, 0, ТаблицаПик.Получить(0).Количество);
		
		ТарифПик          = ?(ТаблицаПик.Количество() = 0, 0, ТаблицаПик.Итог("Тариф"));
		ТарифДляВыводаПик = "" + ТарифПик;
	КонецЕсли;
	
	ИмеетсяСоставнойИндивидуальныйРасход = ТаблицаВида.НайтиСтроки(Новый Структура("ИмеетсяСоставнойИндивидуальныйРасход", Истина)).Количество() > 0;
	
	НачальноеСальдо = ТаблицаВида.Итог("НачальноеСальдо");
	Оплата          = ТаблицаВида.Итог("Оплата");
	Пени            = ТаблицаВида.Итог("Пени");
	Субсидии        = ТаблицаВида.Итог("Субсидии");
	ВРоткл          = ТаблицаВида.Итог("ВРоткл");
	
	// ЗАПИСЫВАЕМ В ИТОГОВУЮ ТАБЛИЦУ НАЧИСЛЕНИЯ СВЕРНУТЫЕ СТРОКИ.
	Если НеобходимоДетализироватьПоВидамТарифовСвертка(СтрокиОбщ, СтрокиДн, СтрокиНч, СтрокиПик, ДневнойИОбщийТарифыРавны) Тогда
		
		// Итоговая строка с детализацией по видам.
		НоваяСтрока = ТаблицаНачисления.Добавить();
		
		НоваяСтрока.Услуга                               = Услуга;
		НоваяСтрока.ВидУслуги                            = СтрокаВида.ВидУслуги;
		НоваяСтрока.ВидДляВывода                         = "" + СтрокаВида.ВидУслуги + ":";
		НоваяСтрока.ЕдИзм                                = СтрокаВида.ЕдИзм;
		НоваяСтрока.РазмерНормы                          = Норма;
		НоваяСтрока.Количество                           = КоличествоИтог;
		НоваяСтрока.Начислено                            = ТаблицаОбщ.Итог("Начислено") + ТаблицаДн.Итог("Начислено")
		                                                   + ТаблицаНч.Итог("Начислено") + ТаблицаПик.Итог("Начислено");
		НоваяСтрока.Перерасчет                           = ТаблицаИтог.Итог("Перерасчет") + ТаблицаОбщ.Итог("Перерасчет") + ТаблицаДн.Итог("Перерасчет")
		                                                   + ТаблицаНч.Итог("Перерасчет") + ТаблицаПик.Итог("Перерасчет");
		НоваяСтрока.Льгота                               = ТаблицаИтог.Итог("Льгота") + ТаблицаОбщ.Итог("Льгота") + ТаблицаДн.Итог("Льгота")
		                                                   + ТаблицаНч.Итог("Льгота") + ТаблицаПик.Итог("Льгота");
		НоваяСтрока.КОплате                              = ТаблицаИтог.Итог("КОплате") + ТаблицаОбщ.Итог("КОплате") + ТаблицаДн.Итог("КОплате")
		                                                   + ТаблицаНч.Итог("КОплате") + ТаблицаПик.Итог("КОплате");
		НоваяСтрока.Пени                                 = Пени;
		НоваяСтрока.Оплата                               = Оплата;
		НоваяСтрока.НачальноеСальдо                      = НачальноеСальдо;
		НоваяСтрока.Субсидии                             = Субсидии;
		НоваяСтрока.ВРоткл                               = ВРоткл;
		НоваяСтрока.УслугаПоСчетчикам                    = Истина;
		НоваяСтрока.УслугаСоставнаяПоСчетчикам           = Ложь;
		НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
		
		// Дневной и общий тарифы.
		Если ДневнойИОбщийТарифыРавны Тогда
			Если Не ТаблицаДн.Количество() = 0 Или Не ТаблицаОбщ.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаНачисления.Добавить();
				НоваяСтрока.Услуга                               = Услуга;
				НоваяСтрока.ВидУслуги                            = СтрокаВида.ВидУслуги;
				НоваяСтрока.ВидТарифа                            = Перечисления.КВП_ВидыТарифов.Дневной;
				НоваяСтрока.ВидДляВывода                         = " - дн. начисление";
				НоваяСтрока.Тариф                                = ТарифДн;
				НоваяСтрока.ТарифДляВывода                       = ТарифДляВыводаДн;
				НоваяСтрока.Количество                           = КоличествоДн;
				НоваяСтрока.Начислено                            = ТаблицаОбщ.Итог("Начислено") + ТаблицаДн.Итог("Начислено");
				НоваяСтрока.УслугаПоСчетчикам                    = ИмеетсяУслугаСПУ;
				НоваяСтрока.УслугаСоставнаяПоСчетчикам           = Ложь;
				НоваяСтрока.СтрокаДетализацииСост                = Ложь;
				НоваяСтрока.СтрокаДетализацииТариф               = Истина;
				НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
			КонецЕсли;
		Иначе
			Если Не ТаблицаОбщ.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаНачисления.Добавить();
				НоваяСтрока.Услуга                               = Услуга;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаОбщБуфер.Получить(0));
				НоваяСтрока.ВидТарифа                            = Перечисления.КВП_ВидыТарифов.Общий;
				НоваяСтрока.ВидДляВывода                         = " - норм. начисление";
				НоваяСтрока.Тариф                                = ТарифОбщ;
				НоваяСтрока.ТарифДляВывода                       = ТарифДляВыводаОбщ;
				НоваяСтрока.Количество                           = КоличествоОбщ;
				НоваяСтрока.УслугаПоСчетчикам                    = ИмеетсяУслугаСПУ;
				НоваяСтрока.УслугаСоставнаяПоСчетчикам           = Ложь;
				НоваяСтрока.СтрокаДетализацииСост                = Ложь;
				НоваяСтрока.СтрокаДетализацииТариф               = Истина;
				НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
			КонецЕсли;
			
			Если Не ТаблицаДн.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаНачисления.Добавить();
				НоваяСтрока.Услуга                               = Услуга;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаДнБуфер.Получить(0));
				НоваяСтрока.ВидТарифа                            = Перечисления.КВП_ВидыТарифов.Дневной;
				НоваяСтрока.ВидДляВывода                         = " - дн. начисление";
				НоваяСтрока.Тариф                                = ТарифДн;
				НоваяСтрока.ТарифДляВывода                       = ТарифДляВыводаДн;
				НоваяСтрока.Количество                           = КоличествоДн;
				НоваяСтрока.УслугаПоСчетчикам                    = ИмеетсяУслугаСПУ;
				НоваяСтрока.УслугаСоставнаяПоСчетчикам           = Ложь;
				НоваяСтрока.СтрокаДетализацииСост                = Ложь;
				НоваяСтрока.СтрокаДетализацииТариф               = Истина;
				НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
			КонецЕсли;
		КонецЕсли;
		
		// Ночной тариф.
		Если Не ТаблицаНч.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаНачисления.Добавить();
			НоваяСтрока.Услуга                               = Услуга;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаНчБуфер.Получить(0));
			НоваяСтрока.ВидТарифа                            = Перечисления.КВП_ВидыТарифов.Ночной;
			НоваяСтрока.ВидДляВывода                         = " - нч. начисление";
			НоваяСтрока.Тариф                                = ТарифНч;
			НоваяСтрока.ТарифДляВывода                       = ТарифДляВыводаНч;
			НоваяСтрока.Количество                           = КоличествоНч;
			НоваяСтрока.УслугаПоСчетчикам                    = ИмеетсяУслугаСПУ;
			НоваяСтрока.УслугаСоставнаяПоСчетчикам           = Ложь;
			НоваяСтрока.СтрокаДетализацииСост                = Ложь;
			НоваяСтрока.СтрокаДетализацииТариф               = Истина;
			НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
		КонецЕсли;
		
		// Пиковый тариф.
		Если Не ТаблицаПик.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаНачисления.Добавить();
			НоваяСтрока.Услуга                               = Услуга;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаПикБуфер.Получить(0));
			НоваяСтрока.ВидТарифа                            = Перечисления.КВП_ВидыТарифов.Пиковый;
			НоваяСтрока.ВидДляВывода                         = " - пик. начисление";
			НоваяСтрока.Тариф                                = ТарифПик;
			НоваяСтрока.ТарифДляВывода                       = ТарифДляВыводаПик;
			НоваяСтрока.Количество                           = КоличествоПик;
			НоваяСтрока.УслугаПоСчетчикам                    = ИмеетсяУслугаСПУ;
			НоваяСтрока.УслугаСоставнаяПоСчетчикам           = Ложь;
			НоваяСтрока.СтрокаДетализацииСост                = Ложь;
			НоваяСтрока.СтрокаДетализацииТариф               = Истина;
			НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
		КонецЕсли;
		
	Иначе
		
		// Если детализация не нужна, записываем в итоговую таблицу одну строку.
		НоваяСтрока = ТаблицаНачисления.Добавить();
		НоваяСтрока.Услуга                               = Услуга;
		НоваяСтрока.ВидУслуги                            = СтрокаВида.ВидУслуги;
		НоваяСтрока.ВидДляВывода                         = "" + СтрокаВида.ВидУслуги;
		НоваяСтрока.ЕдИзм                                = СтрокаВида.ЕдИзм;
		НоваяСтрока.РазмерНормы                          = Норма;
		НоваяСтрока.Пени                                 = Пени;
		НоваяСтрока.Оплата                               = Оплата;
		НоваяСтрока.НачальноеСальдо                      = НачальноеСальдо;
		НоваяСтрока.Субсидии                             = Субсидии;
		НоваяСтрока.ВРоткл                               = ВРоткл;
		НоваяСтрока.УслугаПоСчетчикам                    = ИмеетсяУслугаСПУ;
		НоваяСтрока.УслугаСоставнаяПоСчетчикам           = Ложь;
		НоваяСтрока.СтрокаДетализацииСост                = Ложь;
		НоваяСтрока.СтрокаДетализацииТариф               = Ложь;
		НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
		
		Если Не ТаблицаДн.Количество() = 0 Или Не ТаблицаОбщ.Количество() = 0 Тогда
			Если ДневнойИОбщийТарифыРавны Тогда
				НоваяСтрока.Количество            = КоличествоДн;
				НоваяСтрока.Начислено             = ТаблицаОбщ.Итог("Начислено") + ТаблицаДн.Итог("Начислено");
				НоваяСтрока.Льгота                = ТаблицаОбщ.Итог("Льгота") + ТаблицаДн.Итог("Льгота");
				НоваяСтрока.Перерасчет            = ТаблицаОбщ.Итог("Перерасчет") + ТаблицаДн.Итог("Перерасчет");
				НоваяСтрока.КОплате               = ТаблицаОбщ.Итог("КОплате") + ТаблицаДн.Итог("КОплате");
				НоваяСтрока.ТарифДляВывода        = ТарифДляВыводаДн;
				НоваяСтрока.Тариф                 = ТарифДн;
				НоваяСтрока.ВидТарифа             = Перечисления.КВП_ВидыТарифов.Дневной;
			Иначе
				Если Не ТаблицаДн.Количество() = 0 Тогда
					НоваяСтрока.Количество            = КоличествоДн;
					НоваяСтрока.Начислено             = ТаблицаДн.Итог("Начислено");
					НоваяСтрока.Льгота                = ТаблицаДн.Итог("Льгота");
					НоваяСтрока.Перерасчет            = ТаблицаДн.Итог("Перерасчет");
					НоваяСтрока.КОплате               = ТаблицаДн.Итог("КОплате");
					НоваяСтрока.ТарифДляВывода        = ТарифДляВыводаДн;
					НоваяСтрока.Тариф                 = ТарифДн;
					НоваяСтрока.ВидТарифа             = Перечисления.КВП_ВидыТарифов.Дневной;
				Иначе
					НоваяСтрока.Количество            = КоличествоОбщ;
					НоваяСтрока.Начислено             = ТаблицаОбщ.Итог("Начислено");
					НоваяСтрока.Льгота                = ТаблицаОбщ.Итог("Льгота");
					НоваяСтрока.Перерасчет            = ТаблицаОбщ.Итог("Перерасчет");
					НоваяСтрока.КОплате               = ТаблицаОбщ.Итог("КОплате");
					НоваяСтрока.ТарифДляВывода        = ТарифДляВыводаОбщ;
					НоваяСтрока.Тариф                 = ТарифОбщ;
					НоваяСтрока.ВидТарифа             = Перечисления.КВП_ВидыТарифов.Общий;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Не ТаблицаНч.Количество() = 0 Тогда
			НоваяСтрока.Количество            = КоличествоНч;
			НоваяСтрока.Начислено             = ТаблицаНч.Итог("Начислено");
			НоваяСтрока.Льгота                = ТаблицаНч.Итог("Льгота");
			НоваяСтрока.Перерасчет            = ТаблицаНч.Итог("Перерасчет");
			НоваяСтрока.КОплате               = ТаблицаНч.Итог("КОплате");
			НоваяСтрока.ТарифДляВывода        = ТарифДляВыводаНч;
			НоваяСтрока.Тариф                 = ТарифНч;
			НоваяСтрока.ВидТарифа             = Перечисления.КВП_ВидыТарифов.Ночной;
			
		ИначеЕсли Не ТаблицаПик.Количество() = 0 Тогда
			НоваяСтрока.Количество            = КоличествоПик;
			НоваяСтрока.Начислено             = ТаблицаПик.Итог("Начислено");
			НоваяСтрока.Льгота                = ТаблицаПик.Итог("Льгота");
			НоваяСтрока.Перерасчет            = ТаблицаПик.Итог("Перерасчет");
			НоваяСтрока.КОплате               = ТаблицаПик.Итог("КОплате");
			НоваяСтрока.ТарифДляВывода        = ТарифДляВыводаПик;
			НоваяСтрока.Тариф                 = ТарифПик;
			НоваяСтрока.ВидТарифа             = Перечисления.КВП_ВидыТарифов.Пиковый;
		
		ИначеЕсли ТаблицаОбщ.Количество() = 0
			И ТаблицаДн.Количество() = 0
			И ТаблицаНч.Количество() = 0
			И ТаблицаПик.Количество() = 0 Тогда
			
			НоваяСтрока.Количество            = 0;
			НоваяСтрока.Начислено             = 0;
			НоваяСтрока.Льгота                = ТаблицаВида.Итог("Льгота");
			НоваяСтрока.Перерасчет            = ТаблицаВида.Итог("Перерасчет");
			НоваяСтрока.КОплате               = ТаблицаВида.Итог("КОплате");
			НоваяСтрока.Тариф                 = ТаблицаВида[0].Тариф;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СвернутьНачисленияПоВидамТарифовВКвитанцияхИзвещениях()

// Сворачивает строки начисления в соответствии с тарифностью в Платежных документах.
//
// Параметры:
//  ТаблицаНачисления - итоговая таблица начисления
//  СтрокаВида - строка текущего вида тарифа
//  ТаблицаВида - таблица начисления по текущему виду тарифа
//  МассивУслуг - массив услуг, входящих в текущий вид услуг.
//
Процедура СвернутьНачисленияПоВидамТарифовВПлатежныхДокументах(ТаблицаНачисления, СтрокаВида, ТаблицаВида, МассивУслуг, СтрокаДляОбщегоИмущества, КвитанцияНаПени, СтруктураНастроек = Неопределено)
	
	ПоказательСвертки = ?(СтрокаВида.СпособВыводаВКвитанциях = "Тариф сворачивать, количество суммировать", "Тариф", "Количество");
	ИмеетсяУслугаСПУ  = НайтиУслугуСПУ(ТаблицаВида);
	
	// ФОРМИРУЕМ ТАБЛИЦЫ СО СТРОКАМИ НАЧИСЛЕНИЙ ПО КАЖДОМУ ВИДУ ТАРИФА.
	// Общий тариф.
	СтрокиОбщ       = ТаблицаВида.НайтиСтроки(Новый Структура("ВидТарифа", Перечисления.КВП_ВидыТарифов.Общий));
	ТаблицаОбщ      = ТаблицаВида.Скопировать(СтрокиОбщ);
	ТаблицаОбщБуфер = ТаблицаОбщ.Скопировать(, "ВидУслуги, КоличествоИПУ, КоличествоОПУ, НачисленоИПУ, НачисленоОПУ, Начислено, ОбщРасходИнд,
				| ОбщРасходИндНорма, ОбщРасходИндПУ, ОбщУчетныйРасход, ОбщРасходРасхождение, ОбщРасходОбщ, ОбщРасходПоОПУ, ОбъемПотребленияИПУ,
				| ОбъемПотребленияОПУ, КодВидаНачисленийИПУ, КодВидаНачисленийОПУ, УслугаСНачислениями, ПовышающийКоэффициент, СуммаПовышения");
	ТаблицаОбщБуфер.Свернуть("ВидУслуги", "КоличествоИПУ, КоличествоОПУ, НачисленоИПУ, НачисленоОПУ, Начислено, ОбщРасходИнд,
				| ОбщРасходИндНорма, ОбщРасходИндПУ, ОбщУчетныйРасход, ОбщРасходРасхождение, ОбщРасходОбщ, ОбщРасходПоОПУ, ОбъемПотребленияИПУ,
				| ОбъемПотребленияОПУ, КодВидаНачисленийИПУ, КодВидаНачисленийОПУ, УслугаСНачислениями, ПовышающийКоэффициент, СуммаПовышения");
	
	// Дневной тариф.
	СтрокиДн       = ТаблицаВида.НайтиСтроки(Новый Структура("ВидТарифа", Перечисления.КВП_ВидыТарифов.Дневной));
	ТаблицаДн      = ТаблицаВида.Скопировать(СтрокиДн);
	ТаблицаДнБуфер = ТаблицаДн.Скопировать(, "ВидУслуги, КоличествоИПУ, КоличествоОПУ, НачисленоИПУ, НачисленоОПУ, Начислено, ОбщРасходИнд, 
				| ОбщРасходИндНорма, ОбщРасходИндПУ, ОбщУчетныйРасход, ОбщРасходРасхождение, ОбщРасходОбщ, ОбщРасходПоОПУ, ОбъемПотребленияИПУ, 
				| ОбъемПотребленияОПУ, КодВидаНачисленийИПУ, КодВидаНачисленийОПУ, УслугаСНачислениями, ПовышающийКоэффициент, СуммаПовышения");
	ТаблицаДнБуфер.Свернуть("ВидУслуги", "КоличествоИПУ, КоличествоОПУ, НачисленоИПУ, НачисленоОПУ, Начислено, ОбщРасходИнд, 
				| ОбщРасходИндНорма, ОбщРасходИндПУ, ОбщУчетныйРасход, ОбщРасходРасхождение, ОбщРасходОбщ, ОбщРасходПоОПУ, ОбъемПотребленияИПУ, 
				| ОбъемПотребленияОПУ, КодВидаНачисленийИПУ, КодВидаНачисленийОПУ, УслугаСНачислениями, ПовышающийКоэффициент, СуммаПовышения");
	
	// Ночной тариф.
	СтрокиНч       = ТаблицаВида.НайтиСтроки(Новый Структура("ВидТарифа", Перечисления.КВП_ВидыТарифов.Ночной));
	ТаблицаНч      = ТаблицаВида.Скопировать(СтрокиНч);
	ТаблицаНчБуфер = ТаблицаНч.Скопировать(, "ВидУслуги, КоличествоИПУ, КоличествоОПУ, НачисленоИПУ, НачисленоОПУ, Начислено, ОбщРасходИнд, 
				| ОбщРасходИндНорма, ОбщРасходИндПУ, ОбщУчетныйРасход, ОбщРасходРасхождение, ОбщРасходОбщ, ОбщРасходПоОПУ, ОбъемПотребленияИПУ, 
				| ОбъемПотребленияОПУ, КодВидаНачисленийИПУ, КодВидаНачисленийОПУ, УслугаСНачислениями, ПовышающийКоэффициент, СуммаПовышения");
	ТаблицаНчБуфер.Свернуть("ВидУслуги", "КоличествоИПУ, КоличествоОПУ, НачисленоИПУ, НачисленоОПУ, Начислено, ОбщРасходИнд, 
				| ОбщРасходИндНорма, ОбщРасходИндПУ, ОбщУчетныйРасход, ОбщРасходРасхождение, ОбщРасходОбщ, ОбщРасходПоОПУ, ОбъемПотребленияИПУ, 
				| ОбъемПотребленияОПУ, КодВидаНачисленийИПУ, КодВидаНачисленийОПУ, УслугаСНачислениями, ПовышающийКоэффициент, СуммаПовышения");
	
	// Пиковый тариф.
	СтрокиПик       = ТаблицаВида.НайтиСтроки(Новый Структура("ВидТарифа", Перечисления.КВП_ВидыТарифов.Пиковый));
	ТаблицаПик      = ТаблицаВида.Скопировать(СтрокиПик);
	ТаблицаПикБуфер = ТаблицаПик.Скопировать(, "ВидУслуги, КоличествоИПУ, КоличествоОПУ, НачисленоИПУ, НачисленоОПУ, Начислено, ОбщРасходИнд, 
				| ОбщРасходИндНорма, ОбщРасходИндПУ, ОбщУчетныйРасход, ОбщРасходРасхождение, ОбщРасходОбщ, ОбщРасходПоОПУ, ОбъемПотребленияИПУ, 
				| ОбъемПотребленияОПУ, КодВидаНачисленийИПУ, КодВидаНачисленийОПУ, УслугаСНачислениями, ПовышающийКоэффициент, СуммаПовышения");
	ТаблицаПикБуфер.Свернуть("ВидУслуги", "КоличествоИПУ, КоличествоОПУ, НачисленоИПУ, НачисленоОПУ, Начислено, ОбщРасходИнд, 
				| ОбщРасходИндНорма, ОбщРасходИндПУ, ОбщУчетныйРасход, ОбщРасходРасхождение, ОбщРасходОбщ, ОбщРасходПоОПУ, ОбъемПотребленияИПУ, 
				| ОбъемПотребленияОПУ, КодВидаНачисленийИПУ, КодВидаНачисленийОПУ, УслугаСНачислениями, ПовышающийКоэффициент, СуммаПовышения");
	
	// Итоговые строки начислений по услугам, детализированным по видам тарифов.
	СтрокиИтог       = ТаблицаВида.НайтиСтроки(Новый Структура("ВидТарифа", Неопределено));
	ТаблицаИтог      = ТаблицаВида.Скопировать(СтрокиИтог);
	ТаблицаИтогБуфер = ТаблицаИтог.Скопировать(, "ВидУслуги, Льгота, Перерасчет, ПерерасчетИнд, ПерерасчетОДН, КоличествоИПУ, КоличествоОПУ,
							| НачисленоИПУ, НачисленоОПУ, Начислено, СуммаПовышения, КОплатеИПУ, КОплатеОПУ, КОплате");
	ТаблицаИтогБуфер.Свернуть("ВидУслуги", "Льгота, Перерасчет, ПерерасчетИнд, ПерерасчетОДН, КоличествоИПУ, КоличествоОПУ,
							| НачисленоИПУ, НачисленоОПУ, Начислено, СуммаПовышения, КОплатеИПУ, КОплатеОПУ, КОплате");
	
	// В качестве нормы потребления указываем первую попавшуюся норму.
	НормаИПУ = НайтиНормуПотребленияСвертка(ТаблицаВида, "РазмерНормы");
	НормаОПУ = НайтиНормуПотребленияСвертка(ТаблицаВида, "РазмерНормыОбщ");
	
	Если (Не ТаблицаДн.Количество() = 0 И Не ТаблицаОбщ.Количество() = 0) Тогда
		Если  Не ТаблицаДн.Получить(0).Тариф = ТаблицаОбщ.Получить(0).Тариф Тогда
			ДневнойИОбщийТарифыРавны = Ложь;
		Иначе
			ДневнойИОбщийТарифыРавны = Истина;
		КонецЕсли;
	Иначе
		ДневнойИОбщийТарифыРавны = Ложь;
	КонецЕсли;
	
	// ПОЛУЧАЕМ ЗНАЧЕНИЯ ТАРИФОВ И ОБЪЕМОВ ПОТРЕБЛЕНИЯ ПОСЛЕ СВЕРТКИ.
	Если ПоказательСвертки = "Тариф" Тогда
		// Тариф сворачиваем, количество суммируем.
		КоличествоИПУИтог = ТаблицаДн.Итог("КоличествоИПУ") + ТаблицаОбщ.Итог("КоличествоИПУ") 
							+ ТаблицаНч.Итог("КоличествоИПУ") + ТаблицаПик.Итог("КоличествоИПУ");
		КоличествоОПУИтог = ТаблицаДн.Итог("КоличествоОПУ") + ТаблицаОбщ.Итог("КоличествоОПУ")
							+ ТаблицаНч.Итог("КоличествоОПУ") + ТаблицаПик.Итог("КоличествоОПУ");
		
		Если ДневнойИОбщийТарифыРавны Тогда
			ТарифДн          = ?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).Тариф, 
								?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).Тариф, 0));
			ТарифДляВыводаДн = ?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).ТарифДляВывода, 
								?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).ТарифДляВывода, ""));
								
			Если ИмеетсяУслугаСПУ Тогда
				КоличествоИПУДн = ТаблицаОбщ.Итог("КоличествоИПУ") + ТаблицаДн.Итог("КоличествоИПУ");
			Иначе
				КоличествоИПУДн = ?(ТарифДн = 0, 0, ТаблицаОбщ.Итог("Начислено") / ТарифДн);
			КонецЕсли;
			КоличествоОПУДн = ТаблицаОбщ.Итог("КоличествоОПУ") + ТаблицаДн.Итог("КоличествоОПУ");
			
			ОбщРасходИндДн         = ТаблицаОбщ.Итог("ОбщРасходИнд") + ТаблицаДн.Итог("ОбщРасходИнд");
			ОбщУчетныйРасходДн     = ТаблицаОбщ.Итог("ОбщУчетныйРасход") + ТаблицаДн.Итог("ОбщУчетныйРасход");
			ОбщРасходРасхождениеДн = ТаблицаОбщ.Итог("ОбщРасходРасхождение") + ТаблицаДн.Итог("ОбщРасходРасхождение");
			ОбщРасходОбщДн         = ТаблицаОбщ.Итог("ОбщРасходОбщ") + ТаблицаДн.Итог("ОбщРасходОбщ");
			
		Иначе
			КоличествоИПУДн = ТаблицаДн.Итог("КоличествоИПУ");
			КоличествоОПУДн = ТаблицаДн.Итог("КоличествоОПУ");
			
			КоличествоИПУОбщ = ТаблицаОбщ.Итог("КоличествоИПУ");
			КоличествоОПУОбщ = ТаблицаОбщ.Итог("КоличествоОПУ");
			
			ОбщРасходИндДн         = ТаблицаДн.Итог("ОбщРасходИнд");
			ОбщУчетныйРасходДн     = ТаблицаДн.Итог("ОбщУчетныйРасход");
			ОбщРасходРасхождениеДн = ТаблицаДн.Итог("ОбщРасходРасхождение");
			ОбщРасходОбщДн         = ТаблицаДн.Итог("ОбщРасходОбщ");
			
			ОбщРасходИндОбщ         = ТаблицаОбщ.Итог("ОбщРасходИнд");
			ОбщУчетныйРасходОбщ     = ТаблицаОбщ.Итог("ОбщУчетныйРасход");
			ОбщРасходРасхождениеОбщ = ТаблицаОбщ.Итог("ОбщРасходРасхождение");
			ОбщРасходОбщОбщ         = ТаблицаОбщ.Итог("ОбщРасходОбщ");
			
			ТарифДн          = ?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).Тариф, 0);
			ТарифДляВыводаДн = ?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).ТарифДляВывода, "");
								
			ТарифОбщ          = ?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).Тариф, 0);
			ТарифДляВыводаОбщ = ?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).ТарифДляВывода, "");
		КонецЕсли;
		
		КоличествоИПУНч = ТаблицаНч.Итог("КоличествоИПУ");
		КоличествоОПУНч = ТаблицаНч.Итог("КоличествоОПУ");
		
		ОбщРасходИндНч         = ТаблицаНч.Итог("ОбщРасходИнд");
		ОбщУчетныйРасходНч     = ТаблицаНч.Итог("ОбщУчетныйРасход");
		ОбщРасходРасхождениеНч = ТаблицаНч.Итог("ОбщРасходРасхождение");
		ОбщРасходОбщНч         = ТаблицаНч.Итог("ОбщРасходОбщ");
		
		ТарифНч          = ?(Не ТаблицаНч.Количество() = 0, ТаблицаНч.Получить(0).Тариф, 0);
		ТарифДляВыводаНч = ?(Не ТаблицаНч.Количество() = 0, ТаблицаНч.Получить(0).ТарифДляВывода, "");
		
		КоличествоИПУПик = ТаблицаПик.Итог("КоличествоИПУ");
		КоличествоОПУПик = ТаблицаПик.Итог("КоличествоОПУ");
		
		ОбщРасходИндПик         = ТаблицаПик.Итог("ОбщРасходИнд");
		ОбщУчетныйРасходПик     = ТаблицаПик.Итог("ОбщУчетныйРасход");
		ОбщРасходРасхождениеПик = ТаблицаПик.Итог("ОбщРасходРасхождение");
		ОбщРасходОбщПик         = ТаблицаПик.Итог("ОбщРасходОбщ");
		
		ТарифПик          = ?(Не ТаблицаПик.Количество() = 0, ТаблицаПик.Получить(0).Тариф, 0);
		ТарифДляВыводаПик = ?(Не ТаблицаПик.Количество() = 0, ТаблицаПик.Получить(0).ТарифДляВывода, "");
		
	Иначе
		// Тариф суммируем, количество сворачиваем.
		
		// Используем сортировку таблиц для того, чтобы получить значение расхода, отличное от нуля в случае, когда
		// для текущего вида услуги используется свертка "Количество сворачивать, тариф суммировать", и когда хотя бы по одной
		//  из услуг текущего вида услуги нет индивидуального расхода, а по остальным имеется.
		Если Не ТаблицаДн.Количество() = 0 Тогда
			
			ТаблицаДн.Сортировать("КоличествоИПУ Убыв");
			
			КоличествоИПУИтог = ТаблицаДн.Получить(0).КоличествоИПУ;
			
		ИначеЕсли Не ТаблицаОбщ.Количество() = 0 Тогда
			
			ТаблицаОбщ.Сортировать("КоличествоИПУ Убыв");
			
			КоличествоИПУИтог = ТаблицаОбщ.Получить(0).КоличествоИПУ;
			
		Иначе
			
			КоличествоИПУИтог = 0;
			
		КонецЕсли;
		
		КоличествоОПУИтог = ?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).КоличествоОПУ,
							?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).КоличествоОПУ, 0));
		
		Если ДневнойИОбщийТарифыРавны Тогда
			ТарифДн          = ТаблицаДн.Итог("Тариф") + ТаблицаОбщ.Итог("Тариф");
			ТарифДляВыводаДн = "" + ТарифДн;
			
			КоличествоОПУДн = ?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).КоличествоОПУ,
								?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).КоличествоОПУ, 0));
			
			ОбщРасходИндДн     = ?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).ОбщРасходИнд,
								 ?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).ОбщРасходИнд, 0));
			ОбщУчетныйРасходДн = ?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).ОбщУчетныйРасход,
								 ?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).ОбщУчетныйРасход, 0));
			ОбщРасходРасхождениеДн = ?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).ОбщРасходРасхождение,
								 ?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).ОбщРасходРасхождение, 0));
			ОбщРасходОбщДн     = ?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).ОбщРасходОбщ,
								 ?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).ОбщРасходОбщ, 0));
			
			Если ИмеетсяУслугаСПУ Тогда
				КоличествоИПУДн = ?(Не ТаблицаДн.Количество() = 0, ТаблицаДн.Получить(0).КоличествоИПУ,
									?(Не ТаблицаОбщ.Количество() = 0, ТаблицаОбщ.Получить(0).КоличествоИПУ, 0));
			Иначе
				КоличествоИПУДн = ?(ТарифДн = 0, 0, ТаблицаОбщ.Итог("Начислено") / ТарифДн);
			КонецЕсли;
			
		Иначе
			КоличествоИПУДн = ?(ТаблицаДн.Количество() = 0, 0, ТаблицаДн.Получить(0).КоличествоИПУ);
			КоличествоОПУДн = ?(ТаблицаДн.Количество() = 0, 0, ТаблицаДн.Получить(0).КоличествоОПУ);
			
			ОбщРасходИндДн         = ?(ТаблицаДн.Количество() = 0, 0, ТаблицаДн.Получить(0).ОбщРасходИнд);
			ОбщУчетныйРасходДн     = ?(ТаблицаДн.Количество() = 0, 0, ТаблицаДн.Получить(0).ОбщУчетныйРасход);
			ОбщРасходРасхождениеДн = ?(ТаблицаДн.Количество() = 0, 0, ТаблицаДн.Получить(0).ОбщРасходРасхождение);
			ОбщРасходОбщДн         = ?(ТаблицаДн.Количество() = 0, 0, ТаблицаДн.Получить(0).ОбщРасходОбщ);
			
			КоличествоИПУОбщ = ?(ТаблицаОбщ.Количество() = 0, 0, ТаблицаОбщ.Получить(0).КоличествоИПУ);
			КоличествоОПУОбщ = ?(ТаблицаОбщ.Количество() = 0, 0, ТаблицаОбщ.Получить(0).КоличествоОПУ);
			
			ОбщРасходИндОбщ         = ?(ТаблицаОбщ.Количество() = 0, 0, ТаблицаОбщ.Получить(0).ОбщРасходИнд);
			ОбщУчетныйРасходОбщ     = ?(ТаблицаОбщ.Количество() = 0, 0, ТаблицаОбщ.Получить(0).ОбщУчетныйРасход);
			ОбщРасходРасхождениеОбщ = ?(ТаблицаОбщ.Количество() = 0, 0, ТаблицаОбщ.Получить(0).ОбщРасходРасхождение);
			ОбщРасходОбщОбщ         = ?(ТаблицаОбщ.Количество() = 0, 0, ТаблицаОбщ.Получить(0).ОбщРасходОбщ);
			
			ТарифДн          = ?(ТаблицаДн.Количество() = 0, 0, ТаблицаДн.Итог("Тариф"));
			ТарифДляВыводаДн = "" + ТарифДн;
								
			ТарифОбщ          = ?(ТаблицаОбщ.Количество() = 0, 0, ТаблицаОбщ.Итог("Тариф"));
			ТарифДляВыводаОбщ = "" + ТарифОбщ;
			
		КонецЕсли;
		
		КоличествоИПУНч = ?(ТаблицаНч.Количество() = 0, 0, ТаблицаНч.Получить(0).КоличествоИПУ);
		КоличествоОПУНч = ?(ТаблицаНч.Количество() = 0, 0, ТаблицаНч.Получить(0).КоличествоОПУ);
		
		ОбщРасходИндНч         = ?(ТаблицаНч.Количество() = 0, 0, ТаблицаНч.Получить(0).ОбщРасходИнд);
		ОбщУчетныйРасходНч     = ?(ТаблицаНч.Количество() = 0, 0, ТаблицаНч.Получить(0).ОбщУчетныйРасход);
		ОбщРасходРасхождениеНч = ?(ТаблицаНч.Количество() = 0, 0, ТаблицаНч.Получить(0).ОбщРасходРасхождение);
		ОбщРасходОбщНч         = ?(ТаблицаНч.Количество() = 0, 0, ТаблицаНч.Получить(0).ОбщРасходОбщ);
		
		ТарифНч          = ?(ТаблицаНч.Количество() = 0, 0, ТаблицаНч.Итог("Тариф"));
		ТарифДляВыводаНч = "" + ТарифНч;
		
		КоличествоИПУПик = ?(ТаблицаПик.Количество() = 0, 0, ТаблицаПик.Получить(0).КоличествоИПУ);
		КоличествоОПУПик = ?(ТаблицаПик.Количество() = 0, 0, ТаблицаПик.Получить(0).КоличествоОПУ);
		
		ОбщРасходИндПик         = ?(ТаблицаПик.Количество() = 0, 0, ТаблицаПик.Получить(0).ОбщРасходИнд);
		ОбщУчетныйРасходПик     = ?(ТаблицаПик.Количество() = 0, 0, ТаблицаПик.Получить(0).ОбщУчетныйРасход);
		ОбщРасходРасхождениеПик = ?(ТаблицаПик.Количество() = 0, 0, ТаблицаПик.Получить(0).ОбщРасходРасхождение);
		ОбщРасходОбщПик         = ?(ТаблицаПик.Количество() = 0, 0, ТаблицаПик.Получить(0).ОбщРасходОбщ);
		
		ТарифПик          = ?(ТаблицаПик.Количество() = 0, 0, ТаблицаПик.Итог("Тариф"));
		ТарифДляВыводаПик = "" + ТарифПик;
	КонецЕсли;
	
	ИмеетсяСоставнойИндивидуальныйРасход = ТаблицаВида.НайтиСтроки(Новый Структура("ИмеетсяСоставнойИндивидуальныйРасход", Истина)).Количество() > 0;
	
	НайденныеСтрокиУслугаСНачислениями = ТаблицаВида.НайтиСтроки(Новый Структура("УслугаСНачислениями", Истина));
	УслугаСНачислениями                = ?(НайденныеСтрокиУслугаСНачислениями.Количество() > 0, Истина, Ложь);
	НачальноеСальдо                    = ТаблицаВида.Итог("НачальноеСальдо");
	Оплата                             = ТаблицаВида.Итог("Оплата");
	Пени                               = ТаблицаВида.Итог("Пени");
	ЭтоКоммунальнаяУслуга              = ТаблицаВида.НайтиСтроки(Новый Структура("ЭтоКоммунальнаяУслуга", Истина)).Количество() > 0;
	
	ПовышающийКоэффициент = ОпределитьПовышающийКоэффициентПоТекущейУслуге(ТаблицаОбщ);
	СуммаПовышения        = ТаблицаОбщ.Итог("СуммаПовышения");
	
	// ЗАПИСЫВАЕМ В ИТОГОВУЮ ТАБЛИЦУ НАЧИСЛЕНИЯ СВЕРНУТЫЕ СТРОКИ.
	Если НеобходимоДетализироватьПоВидамТарифовСвертка(СтрокиОбщ, СтрокиДн, СтрокиНч, СтрокиПик, ДневнойИОбщийТарифыРавны) Тогда
		
		// Получим представление постфикса для наименования услуг СОИ.
		ПараметрыФормированияПД = СтруктураНастроек.ПараметрыФормированияПД;
		ПостфиксДляУслугСОИ     = ПараметрыФормированияПД.ПредставлениеУслугСОИ;
		
		// Итоговая строка с детализацией по видам.
		СтрокаГруппы = ТаблицаНачисления.Добавить();
		СтрокаГруппы.ВидДляВывода                         = "" + СтрокаВида.ВидУслуги + ?(СтрокаДляОбщегоИмущества, ПостфиксДляУслугСОИ, "") + ":";
		СтрокаГруппы.ВидУслуги                            = СтрокаВида.ВидУслуги;
		СтрокаГруппы.ЕдИзм                                = СтрокаВида.ЕдИзм;
		СтрокаГруппы.КоличествоИПУ                        = КоличествоИПУИтог;
		СтрокаГруппы.КоличествоОПУ                        = КоличествоОПУИтог;
		СтрокаГруппы.НачисленоИПУ                         = ТаблицаОбщ.Итог("НачисленоИПУ") + ТаблицаДн.Итог("НачисленоИПУ")
		                                                   + ТаблицаНч.Итог("НачисленоИПУ") + ТаблицаПик.Итог("НачисленоИПУ");
		СтрокаГруппы.НачисленоОПУ                         = ТаблицаОбщ.Итог("НачисленоОПУ") + ТаблицаДн.Итог("НачисленоОПУ")
		                                                   + ТаблицаНч.Итог("НачисленоОПУ") + ТаблицаПик.Итог("НачисленоОПУ");
		СтрокаГруппы.Начислено                            = ТаблицаОбщ.Итог("Начислено") + ТаблицаДн.Итог("Начислено")
		                                                   + ТаблицаНч.Итог("Начислено") + ТаблицаПик.Итог("Начислено");
		СтрокаГруппы.Льгота                               = ТаблицаИтог.Итог("Льгота") + ТаблицаОбщ.Итог("Льгота") + ТаблицаДн.Итог("Льгота")
		                                                   + ТаблицаНч.Итог("Льгота") + ТаблицаПик.Итог("Льгота");
		СтрокаГруппы.ПерерасчетИнд                        = ТаблицаИтог.Итог("ПерерасчетИнд") + ТаблицаОбщ.Итог("ПерерасчетИнд") + ТаблицаДн.Итог("ПерерасчетИнд")
		                                                   + ТаблицаНч.Итог("ПерерасчетИнд") + ТаблицаПик.Итог("ПерерасчетИнд");
		СтрокаГруппы.ПерерасчетОДН                        = ТаблицаИтог.Итог("ПерерасчетОДН") + ТаблицаОбщ.Итог("ПерерасчетОДН") + ТаблицаДн.Итог("ПерерасчетОДН")
		                                                   + ТаблицаНч.Итог("ПерерасчетОДН") + ТаблицаПик.Итог("ПерерасчетОДН");
		СтрокаГруппы.Перерасчет                           = ТаблицаИтог.Итог("Перерасчет") + ТаблицаОбщ.Итог("Перерасчет") + ТаблицаДн.Итог("Перерасчет")
		                                                   + ТаблицаНч.Итог("Перерасчет") + ТаблицаПик.Итог("Перерасчет");
		СтрокаГруппы.КОплате                              = ТаблицаИтог.Итог("КОплате") + ТаблицаОбщ.Итог("КОплате") + ТаблицаДн.Итог("КОплате")
		                                                   + ТаблицаНч.Итог("КОплате") + ТаблицаПик.Итог("КОплате");
		СтрокаГруппы.КОплатеИПУ                           = ТаблицаИтог.Итог("КОплатеИПУ") + ТаблицаОбщ.Итог("КОплатеИПУ") + ТаблицаДн.Итог("КОплатеИПУ")
		                                                   + ТаблицаНч.Итог("КОплатеИПУ") + ТаблицаПик.Итог("КОплатеИПУ")
														   + СтрокаГруппы.ПерерасчетИнд;
		СтрокаГруппы.КОплатеОПУ                           = ТаблицаИтог.Итог("КОплатеОПУ") + ТаблицаОбщ.Итог("КОплатеОПУ") + ТаблицаДн.Итог("КОплатеОПУ")
		                                                   + ТаблицаНч.Итог("КОплатеОПУ") + ТаблицаПик.Итог("КОплатеОПУ")
														   + СтрокаГруппы.ПерерасчетОДН;
		СтрокаГруппы.РазмерНормы                          = НормаИПУ;
		СтрокаГруппы.РазмерНормыОбщ                       = НормаОПУ;
		СтрокаГруппы.МассивУслуг                          = МассивУслуг;
		СтрокаГруппы.УслугаПоСчетчикам                    = Истина;
		СтрокаГруппы.УслугаСоставнаяПоСчетчикам           = Ложь;
		СтрокаГруппы.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
		СтрокаГруппы.УслугаСНачислениями                  = УслугаСНачислениями;
		СтрокаГруппы.НачальноеСальдо                      = НачальноеСальдо;
		СтрокаГруппы.Оплата                               = Оплата;
		СтрокаГруппы.Пени                                 = Пени;
		СтрокаГруппы.СтрокаДляОбщегоИмущества             = СтрокаДляОбщегоИмущества;
		СтрокаГруппы.ПовышающийКоэффициент                = ПовышающийКоэффициент;
		СтрокаГруппы.СуммаПовышения                       = СуммаПовышения;
		СтрокаГруппы.ЭтоКоммунальнаяУслуга                = ЭтоКоммунальнаяУслуга;
		
		// Дневной и общий тарифы.
		Если ДневнойИОбщийТарифыРавны Тогда
			Если Не ТаблицаДн.Количество() = 0 Или Не ТаблицаОбщ.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаНачисления.Добавить();
				НоваяСтрока.ВидУслуги                            = СтрокаВида.ВидУслуги;
				НоваяСтрока.ВидДляВывода                         = " - дн. начисление";
				НоваяСтрока.КоличествоИПУ                        = КоличествоИПУДн;
				НоваяСтрока.КоличествоОПУ                        = КоличествоОПУДн;
				НоваяСтрока.НачисленоИПУ                         = ТаблицаОбщ.Итог("НачисленоИПУ") + ТаблицаДн.Итог("НачисленоИПУ");
				НоваяСтрока.НачисленоОПУ                         = ТаблицаОбщ.Итог("НачисленоОПУ") + ТаблицаДн.Итог("НачисленоОПУ");
				НоваяСтрока.Начислено                            = НоваяСтрока.НачисленоИПУ + НоваяСтрока.НачисленоОПУ;
				НоваяСтрока.ТарифДляВывода                       = ТарифДляВыводаДн;
				НоваяСтрока.Тариф                                = ТарифДн;
				НоваяСтрока.ВидТарифа                            = Перечисления.КВП_ВидыТарифов.Дневной;
				НоваяСтрока.КодВидаНачисленийИПУ                 = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийИПУ;
				НоваяСтрока.КодВидаНачисленийОПУ                 = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийОПУ;
				НоваяСтрока.ПредПоказанияИнд                     = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ПредПоказанияИнд");
				НоваяСтрока.ПредПоказанияОбщ                     = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ПредПоказанияОбщ");
				НоваяСтрока.ТекПоказанияИнд                      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ТекПоказанияИнд");
				НоваяСтрока.ТекПоказанияОбщ                      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ТекПоказанияОбщ");
				НоваяСтрока.ОбщРасходИнд                         = ОбщРасходИндДн;
				НоваяСтрока.ОбщУчетныйРасход                     = ОбщУчетныйРасходДн;
				НоваяСтрока.ОбщРасходРасхождение                 = ОбщРасходРасхождениеДн;
				НоваяСтрока.ОбщРасходОбщ                         = ОбщРасходОбщДн;
				НоваяСтрока.ОбщРасходИндПУ                       = ТаблицаОбщ.Итог("ОбщРасходИндПУ") + ТаблицаДн.Итог("ОбщРасходИндПУ");
				НоваяСтрока.ОбщРасходИндНорма                    = ТаблицаОбщ.Итог("ОбщРасходИндНорма") + ТаблицаДн.Итог("ОбщРасходИндНорма");
				НоваяСтрока.ОбъемПотребленияИПУ                  = ТаблицаОбщ.Итог("ОбъемПотребленияИПУ") + ТаблицаДн.Итог("ОбъемПотребленияИПУ");
				НоваяСтрока.ОбъемПотребленияОПУ                  = ТаблицаОбщ.Итог("ОбъемПотребленияОПУ") + ТаблицаДн.Итог("ОбъемПотребленияОПУ");
				НоваяСтрока.УслугаПоСчетчикам                    = ИмеетсяУслугаСПУ;
				НоваяСтрока.ОбщИДнТарифыНеРавны                  = Не ДневнойИОбщийТарифыРавны;
				НоваяСтрока.МассивУслуг                          = МассивУслуг;
				НоваяСтрока.УслугаСоставнаяПоСчетчикам           = Ложь;
				НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
				НоваяСтрока.УслугаСНачислениями                  = УслугаСНачислениями;
				НоваяСтрока.Перерасчет                           = 0;
				НоваяСтрока.ПерерасчетИнд                        = 0;
				НоваяСтрока.ПерерасчетОДН                        = 0;
				НоваяСтрока.Льгота                               = 0;
				НоваяСтрока.НачальноеСальдо                      = 0;
				НоваяСтрока.Оплата                               = 0;
				НоваяСтрока.КОплате                              = 0;
				НоваяСтрока.СтрокаДетализацииТариф               = Истина;
				НоваяСтрока.СтрокаДляОбщегоИмущества             = СтрокаДляОбщегоИмущества;
				НоваяСтрока.ПовышающийКоэффициент                = ПовышающийКоэффициент;
				НоваяСтрока.СуммаПовышения                       = СуммаПовышения;
				НоваяСтрока.ЭтоКоммунальнаяУслуга                = ЭтоКоммунальнаяУслуга;
				
				// Дополняем итоговые расходы в итоговой строке вида услуги.
				СтрокаГруппы.ОбщРасходИнд         = НоваяСтрока.ОбщРасходИнд;
				СтрокаГруппы.ОбщУчетныйРасход     = НоваяСтрока.ОбщУчетныйРасход;
				СтрокаГруппы.ОбщРасходРасхождение = НоваяСтрока.ОбщРасходРасхождение;
				СтрокаГруппы.ОбщРасходОбщ         = НоваяСтрока.ОбщРасходОбщ;
				СтрокаГруппы.ОбщРасходПоОПУ       = НоваяСтрока.ОбщРасходПоОПУ;
				СтрокаГруппы.ОбщРасходИндПУ       = НоваяСтрока.ОбщРасходИндПУ;
				СтрокаГруппы.ОбщРасходИндНорма    = НоваяСтрока.ОбщРасходИндНорма;
			КонецЕсли;
		Иначе
			Если Не ТаблицаОбщ.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаОбщБуфер.Получить(0));
				НоваяСтрока.ВидДляВывода                         = " - норм. начисление";
				НоваяСтрока.КоличествоИПУ                        = КоличествоИПУОбщ;
				НоваяСтрока.КоличествоОПУ                        = КоличествоОПУОбщ;
				НоваяСтрока.ТарифДляВывода                       = ТарифДляВыводаОбщ;
				НоваяСтрока.Тариф                                = ТарифОбщ;
				НоваяСтрока.ВидТарифа                            = Перечисления.КВП_ВидыТарифов.Общий;
				НоваяСтрока.КодВидаНачисленийИПУ                 = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийИПУ;
				НоваяСтрока.КодВидаНачисленийОПУ                 = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийОПУ;
				НоваяСтрока.МассивУслуг                          = МассивУслуг;
				НоваяСтрока.ОбщИДнТарифыНеРавны                  = Не ДневнойИОбщийТарифыРавны;
				НоваяСтрока.УслугаПоСчетчикам                    = ИмеетсяУслугаСПУ;
				НоваяСтрока.УслугаСоставнаяПоСчетчикам           = Ложь;
				НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
				НоваяСтрока.УслугаСНачислениями                  = УслугаСНачислениями;
				НоваяСтрока.Перерасчет                           = 0;
				НоваяСтрока.ПерерасчетИнд                        = 0;
				НоваяСтрока.ПерерасчетОДН                        = 0;
				НоваяСтрока.Льгота                               = 0;
				НоваяСтрока.НачальноеСальдо                      = 0;
				НоваяСтрока.Оплата                               = 0;
				НоваяСтрока.КОплате                              = 0;
				НоваяСтрока.СтрокаДетализацииТариф               = Истина;
				НоваяСтрока.СтрокаДляОбщегоИмущества             = СтрокаДляОбщегоИмущества;
				НоваяСтрока.ПовышающийКоэффициент                = ПовышающийКоэффициент;
				НоваяСтрока.СуммаПовышения                       = СуммаПовышения;
				НоваяСтрока.ЭтоКоммунальнаяУслуга                = ЭтоКоммунальнаяУслуга;
				
				// Дополняем итоговые расходы в итоговой строке вида услуги.
				СтрокаГруппы.ОбщРасходИнд         = НоваяСтрока.ОбщРасходИнд;
				СтрокаГруппы.ОбщУчетныйРасход     = НоваяСтрока.ОбщУчетныйРасход;
				СтрокаГруппы.ОбщРасходРасхождение = НоваяСтрока.ОбщРасходРасхождение;
				СтрокаГруппы.ОбщРасходОбщ         = НоваяСтрока.ОбщРасходОбщ;
				СтрокаГруппы.ОбщРасходПоОПУ       = НоваяСтрока.ОбщРасходПоОПУ;
				СтрокаГруппы.ОбщРасходИндПУ       = НоваяСтрока.ОбщРасходИндПУ;
				СтрокаГруппы.ОбщРасходИндНорма    = НоваяСтрока.ОбщРасходИндНорма;
			КонецЕсли;
			
			Если Не ТаблицаДн.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаДнБуфер.Получить(0));
				НоваяСтрока.ВидДляВывода                         = " - дн. начисление";
				НоваяСтрока.КоличествоИПУ                        = КоличествоИПУДн;
				НоваяСтрока.КоличествоОПУ                        = КоличествоОПУДн;
				НоваяСтрока.ТарифДляВывода                       = ТарифДляВыводаДн;
				НоваяСтрока.Тариф                                = ТарифДн;
				НоваяСтрока.ВидТарифа                            = Перечисления.КВП_ВидыТарифов.Дневной;
				НоваяСтрока.КодВидаНачисленийИПУ                 = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийИПУ;
				НоваяСтрока.КодВидаНачисленийОПУ                 = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийОПУ;
				НоваяСтрока.ПредПоказанияИнд                     = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ПредПоказанияИнд");
				НоваяСтрока.ПредПоказанияОбщ                     = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ПредПоказанияОбщ");
				НоваяСтрока.ТекПоказанияИнд                      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ТекПоказанияИнд");
				НоваяСтрока.ТекПоказанияОбщ                      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ТекПоказанияОбщ");
				НоваяСтрока.МассивУслуг                          = МассивУслуг;
				НоваяСтрока.ОбщИДнТарифыНеРавны                  = Не ДневнойИОбщийТарифыРавны;
				НоваяСтрока.УслугаПоСчетчикам                    = ИмеетсяУслугаСПУ;
				НоваяСтрока.УслугаСоставнаяПоСчетчикам           = Ложь;
				НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
				НоваяСтрока.УслугаСНачислениями                  = УслугаСНачислениями;
				НоваяСтрока.Перерасчет                           = 0;
				НоваяСтрока.ПерерасчетИнд                        = 0;
				НоваяСтрока.ПерерасчетОДН                        = 0;
				НоваяСтрока.Льгота                               = 0;
				НоваяСтрока.НачальноеСальдо                      = 0;
				НоваяСтрока.Оплата                               = 0;
				НоваяСтрока.КОплате                              = 0;
				НоваяСтрока.СтрокаДетализацииТариф               = Истина;
				НоваяСтрока.СтрокаДляОбщегоИмущества             = СтрокаДляОбщегоИмущества;
				НоваяСтрока.ПовышающийКоэффициент                = 0;
				НоваяСтрока.СуммаПовышения                       = 0;
				НоваяСтрока.ЭтоКоммунальнаяУслуга                = ЭтоКоммунальнаяУслуга;
				
				// Дополняем итоговые расходы в итоговой строке вида услуги.
				СтрокаГруппы.ОбщРасходИнд         = СтрокаГруппы.ОбщРасходИнд + НоваяСтрока.ОбщРасходИнд;
				СтрокаГруппы.ОбщУчетныйРасход     = СтрокаГруппы.ОбщУчетныйРасход + НоваяСтрока.ОбщУчетныйРасход;
				СтрокаГруппы.ОбщРасходРасхождение = СтрокаГруппы.ОбщРасходРасхождение + НоваяСтрока.ОбщРасходРасхождение;
				СтрокаГруппы.ОбщРасходОбщ         = СтрокаГруппы.ОбщРасходОбщ + НоваяСтрока.ОбщРасходОбщ;
				СтрокаГруппы.ОбщРасходПоОПУ       = СтрокаГруппы.ОбщРасходПоОПУ + НоваяСтрока.ОбщРасходПоОПУ;
				СтрокаГруппы.ОбщРасходИндПУ       = СтрокаГруппы.ОбщРасходИндПУ + НоваяСтрока.ОбщРасходИндПУ;
				СтрокаГруппы.ОбщРасходИндНорма    = СтрокаГруппы.ОбщРасходИндНорма + НоваяСтрока.ОбщРасходИндНорма;
			КонецЕсли;
		КонецЕсли;
		
		// Ночной тариф.
		Если Не ТаблицаНч.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаНчБуфер.Получить(0));
			НоваяСтрока.ВидДляВывода                         = " - нч. начисление";
			НоваяСтрока.КоличествоИПУ                        = КоличествоИПУНч;
			НоваяСтрока.КоличествоОПУ                        = КоличествоОПУНч;
			НоваяСтрока.ТарифДляВывода                       = ТарифДляВыводаНч;
			НоваяСтрока.Тариф                                = ТарифНч;
			НоваяСтрока.ВидТарифа                            = Перечисления.КВП_ВидыТарифов.Ночной;
			НоваяСтрока.КодВидаНачисленийИПУ                 = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийИПУ;
			НоваяСтрока.КодВидаНачисленийОПУ                 = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийОПУ;
			НоваяСтрока.ПредПоказанияИнд                     = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаНч, "ПредПоказанияИнд");
			НоваяСтрока.ПредПоказанияОбщ                     = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаНч, "ПредПоказанияОбщ");
			НоваяСтрока.ТекПоказанияИнд                      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаНч, "ТекПоказанияИнд");
			НоваяСтрока.ТекПоказанияОбщ                      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаНч, "ТекПоказанияОбщ");
			НоваяСтрока.МассивУслуг                          = МассивУслуг;
			НоваяСтрока.ОбщИДнТарифыНеРавны                  = Не ДневнойИОбщийТарифыРавны;
			НоваяСтрока.УслугаПоСчетчикам                    = ИмеетсяУслугаСПУ;
			НоваяСтрока.УслугаСоставнаяПоСчетчикам           = Ложь;
			НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
			НоваяСтрока.УслугаСНачислениями                  = УслугаСНачислениями;
			НоваяСтрока.Перерасчет                           = 0;
			НоваяСтрока.ПерерасчетИнд                        = 0;
			НоваяСтрока.ПерерасчетОДН                        = 0;
			НоваяСтрока.Льгота                               = 0;
			НоваяСтрока.НачальноеСальдо                      = 0;
			НоваяСтрока.Оплата                               = 0;
			НоваяСтрока.КОплате                              = 0;
			НоваяСтрока.СтрокаДетализацииТариф               = Истина;
			НоваяСтрока.СтрокаДляОбщегоИмущества             = СтрокаДляОбщегоИмущества;
			НоваяСтрока.ПовышающийКоэффициент                = 0;
			НоваяСтрока.СуммаПовышения                       = 0;
			НоваяСтрока.ЭтоКоммунальнаяУслуга                = ЭтоКоммунальнаяУслуга;
			
			// Дополняем итоговые расходы в итоговой строке вида услуги.
			СтрокаГруппы.ОбщРасходИнд         = СтрокаГруппы.ОбщРасходИнд + НоваяСтрока.ОбщРасходИнд;
			СтрокаГруппы.ОбщУчетныйРасход     = СтрокаГруппы.ОбщУчетныйРасход + НоваяСтрока.ОбщУчетныйРасход;
			СтрокаГруппы.ОбщРасходРасхождение = СтрокаГруппы.ОбщРасходРасхождение + НоваяСтрока.ОбщРасходРасхождение;
			СтрокаГруппы.ОбщРасходОбщ         = СтрокаГруппы.ОбщРасходОбщ + НоваяСтрока.ОбщРасходОбщ;
			СтрокаГруппы.ОбщРасходПоОПУ       = СтрокаГруппы.ОбщРасходПоОПУ + НоваяСтрока.ОбщРасходПоОПУ;
			СтрокаГруппы.ОбщРасходИндПУ       = СтрокаГруппы.ОбщРасходИндПУ + НоваяСтрока.ОбщРасходИндПУ;
			СтрокаГруппы.ОбщРасходИндНорма    = СтрокаГруппы.ОбщРасходИндНорма + НоваяСтрока.ОбщРасходИндНорма;
		КонецЕсли;
		
		// Пиковый тариф.
		Если Не ТаблицаПик.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаПикБуфер.Получить(0));
			НоваяСтрока.ВидДляВывода                         = " - пик. начисление";
			НоваяСтрока.КоличествоИПУ                        = КоличествоИПУПик;
			НоваяСтрока.КоличествоОПУ                        = КоличествоОПУПик;
			НоваяСтрока.ТарифДляВывода                       = ТарифДляВыводаПик;
			НоваяСтрока.Тариф                                = ТарифПик;
			НоваяСтрока.ВидТарифа                            = Перечисления.КВП_ВидыТарифов.Пиковый;
			НоваяСтрока.КодВидаНачисленийИПУ                 = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийИПУ;
			НоваяСтрока.КодВидаНачисленийОПУ                 = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийОПУ;
			НоваяСтрока.ПредПоказанияИнд                     = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаПик, "ПредПоказанияИнд");
			НоваяСтрока.ПредПоказанияОбщ                     = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаПик, "ПредПоказанияОбщ");
			НоваяСтрока.ТекПоказанияИнд                      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаПик, "ТекПоказанияИнд");
			НоваяСтрока.ТекПоказанияОбщ                      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаПик, "ТекПоказанияОбщ");
			НоваяСтрока.МассивУслуг                          = МассивУслуг;
			НоваяСтрока.ОбщИДнТарифыНеРавны                  = Не ДневнойИОбщийТарифыРавны;
			НоваяСтрока.УслугаПоСчетчикам                    = ИмеетсяУслугаСПУ;
			НоваяСтрока.УслугаСоставнаяПоСчетчикам           = Ложь;
			НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
			НоваяСтрока.УслугаСНачислениями                  = УслугаСНачислениями;
			НоваяСтрока.Перерасчет                           = 0;
			НоваяСтрока.ПерерасчетИнд                        = 0;
			НоваяСтрока.ПерерасчетОДН                        = 0;
			НоваяСтрока.Льгота                               = 0;
			НоваяСтрока.НачальноеСальдо                      = 0;
			НоваяСтрока.Оплата                               = 0;
			НоваяСтрока.КОплате                              = 0;
			НоваяСтрока.СтрокаДетализацииТариф               = Истина;
			НоваяСтрока.СтрокаДляОбщегоИмущества             = СтрокаДляОбщегоИмущества;
			НоваяСтрока.ПовышающийКоэффициент                = 0;
			НоваяСтрока.СуммаПовышения                       = 0;
			НоваяСтрока.ЭтоКоммунальнаяУслуга                = ЭтоКоммунальнаяУслуга;
			
			// Дополняем итоговые расходы в итоговой строке вида услуги.
			СтрокаГруппы.ОбщРасходИнд         = СтрокаГруппы.ОбщРасходИнд + НоваяСтрока.ОбщРасходИнд;
			СтрокаГруппы.ОбщУчетныйРасход     = СтрокаГруппы.ОбщУчетныйРасход + НоваяСтрока.ОбщУчетныйРасход;
			СтрокаГруппы.ОбщРасходРасхождение = СтрокаГруппы.ОбщРасходРасхождение + НоваяСтрока.ОбщРасходРасхождение;
			СтрокаГруппы.ОбщРасходОбщ         = СтрокаГруппы.ОбщРасходОбщ + НоваяСтрока.ОбщРасходОбщ;
			СтрокаГруппы.ОбщРасходПоОПУ       = СтрокаГруппы.ОбщРасходПоОПУ + НоваяСтрока.ОбщРасходПоОПУ;
			СтрокаГруппы.ОбщРасходИндПУ       = СтрокаГруппы.ОбщРасходИндПУ + НоваяСтрока.ОбщРасходИндПУ;
			СтрокаГруппы.ОбщРасходИндНорма    = СтрокаГруппы.ОбщРасходИндНорма + НоваяСтрока.ОбщРасходИндНорма;
		КонецЕсли;
		
	Иначе
		
		// Получим представление постфикса для наименования услуг СОИ.
		ПараметрыФормированияПД = СтруктураНастроек.ПараметрыФормированияПД;
		ПостфиксДляУслугСОИ     = ПараметрыФормированияПД.ПредставлениеУслугСОИ;
		
		// Если детализация не нужна, записываем в итоговую таблицу одну строку.
		НоваяСтрока = ТаблицаНачисления.Добавить();
		НоваяСтрока.ВидУслуги                            = СтрокаВида.ВидУслуги;
		НоваяСтрока.ЕдИзм                                = СтрокаВида.ЕдИзм;
		НоваяСтрока.ВидДляВывода                         = "" + СтрокаВида.ВидУслуги + ?(СтрокаДляОбщегоИмущества = Истина, ПостфиксДляУслугСОИ, "");
		НоваяСтрока.УслугаПоСчетчикам                    = ИмеетсяУслугаСПУ;
		НоваяСтрока.ОбщИДнТарифыНеРавны                  = Не ДневнойИОбщийТарифыРавны;
		НоваяСтрока.РазмерНормы                          = НормаИПУ;
		НоваяСтрока.РазмерНормыОбщ                       = НормаОПУ;
		НоваяСтрока.МассивУслуг                          = МассивУслуг;
		НоваяСтрока.УслугаСоставнаяПоСчетчикам           = Ложь;
		НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
		НоваяСтрока.УслугаСНачислениями                  = УслугаСНачислениями;
		НоваяСтрока.НачальноеСальдо                      = НачальноеСальдо;
		НоваяСтрока.Оплата                               = Оплата;
		НоваяСтрока.Пени                                 = Пени;
		НоваяСтрока.СтрокаДляОбщегоИмущества             = СтрокаДляОбщегоИмущества;
		НоваяСтрока.ПовышающийКоэффициент                = ПовышающийКоэффициент;
		НоваяСтрока.СуммаПовышения                       = СуммаПовышения;
		НоваяСтрока.СпособВыводаВКвитанциях              = СтрокаВида.СпособВыводаВКвитанциях;
		НоваяСтрока.ЭтоКоммунальнаяУслуга                = ЭтоКоммунальнаяУслуга;
		
		Если Не ТаблицаДн.Количество() = 0 Или Не ТаблицаОбщ.Количество() = 0 Тогда
			Если ДневнойИОбщийТарифыРавны Тогда
				НоваяСтрока.КоличествоИПУ         = КоличествоИПУДн;
				НоваяСтрока.КоличествоОПУ         = КоличествоОПУДн;
				НоваяСтрока.НачисленоИПУ          = ТаблицаОбщ.Итог("НачисленоИПУ") + ТаблицаДн.Итог("НачисленоИПУ");
				НоваяСтрока.НачисленоОПУ          = ТаблицаОбщ.Итог("НачисленоОПУ") + ТаблицаДн.Итог("НачисленоОПУ");
				НоваяСтрока.Начислено             = ТаблицаОбщ.Итог("Начислено") + ТаблицаДн.Итог("Начислено");
				НоваяСтрока.Льгота                = ТаблицаОбщ.Итог("Льгота") + ТаблицаДн.Итог("Льгота");
				НоваяСтрока.ПерерасчетИнд         = ТаблицаОбщ.Итог("ПерерасчетИнд") + ТаблицаДн.Итог("ПерерасчетИнд");
				НоваяСтрока.ПерерасчетОДН         = ТаблицаОбщ.Итог("ПерерасчетОДН") + ТаблицаДн.Итог("ПерерасчетОДН");
				НоваяСтрока.Перерасчет            = ТаблицаОбщ.Итог("Перерасчет") + ТаблицаДн.Итог("Перерасчет");
				НоваяСтрока.КОплате               = ТаблицаОбщ.Итог("КОплате") + ТаблицаДн.Итог("КОплате");
				НоваяСтрока.КОплатеИПУ            = ТаблицаОбщ.Итог("КОплатеИПУ") + ТаблицаДн.Итог("КОплатеИПУ");
				НоваяСтрока.КОплатеОПУ            = ТаблицаОбщ.Итог("КОплатеОПУ") + ТаблицаДн.Итог("КОплатеОПУ");
				НоваяСтрока.ТарифДляВывода        = ТарифДляВыводаДн;
				НоваяСтрока.Тариф                 = ТарифДн;
				НоваяСтрока.ВидТарифа             = Перечисления.КВП_ВидыТарифов.Дневной;
				НоваяСтрока.КодВидаНачисленийИПУ  = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийИПУ;
				НоваяСтрока.КодВидаНачисленийОПУ  = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийОПУ;
				НоваяСтрока.ПредПоказанияИнд      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ПредПоказанияИнд");
				НоваяСтрока.ПредПоказанияОбщ      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ПредПоказанияОбщ");
				НоваяСтрока.ТекПоказанияИнд       = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ТекПоказанияИнд");
				НоваяСтрока.ТекПоказанияОбщ       = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ТекПоказанияОбщ");
				НоваяСтрока.ОбщРасходИнд          = ОбщРасходИндДн;
				НоваяСтрока.ОбщУчетныйРасход      = ОбщУчетныйРасходДн;
				НоваяСтрока.ОбщРасходРасхождение  = ОбщРасходРасхождениеДн;
				НоваяСтрока.ОбщРасходОбщ          = ОбщРасходОбщДн;
				НоваяСтрока.ОбщРасходПоОПУ        = ТаблицаОбщ.Итог("ОбщРасходПоОПУ") + ТаблицаДн.Итог("ОбщРасходПоОПУ");
				НоваяСтрока.ОбщРасходИндПУ        = ТаблицаОбщ.Итог("ОбщРасходИндПУ") + ТаблицаДн.Итог("ОбщРасходИндПУ");
				НоваяСтрока.ОбщРасходИндНорма     = ТаблицаОбщ.Итог("ОбщРасходИндНорма") + ТаблицаДн.Итог("ОбщРасходИндНорма");
				НоваяСтрока.ОбъемПотребленияИПУ   = ТаблицаОбщ.Итог("ОбъемПотребленияИПУ") + ТаблицаДн.Итог("ОбъемПотребленияИПУ");
				НоваяСтрока.ОбъемПотребленияОПУ   = ТаблицаОбщ.Итог("ОбъемПотребленияОПУ") + ТаблицаДн.Итог("ОбъемПотребленияОПУ");
				
			Иначе
				Если Не ТаблицаДн.Количество() = 0 Тогда
					НоваяСтрока.КоличествоИПУ         = КоличествоИПУДн;
					НоваяСтрока.КоличествоОПУ         = КоличествоОПУДн;
					НоваяСтрока.НачисленоИПУ          = ТаблицаДн.Итог("НачисленоИПУ");
					НоваяСтрока.НачисленоОПУ          = ТаблицаДн.Итог("НачисленоОПУ");
					НоваяСтрока.Начислено             = НоваяСтрока.НачисленоИПУ + НоваяСтрока.НачисленоОПУ;
					НоваяСтрока.Льгота                = ТаблицаДн.Итог("Льгота");
					НоваяСтрока.ПерерасчетИнд         = ТаблицаДн.Итог("ПерерасчетИнд");
					НоваяСтрока.ПерерасчетОДН         = ТаблицаДн.Итог("ПерерасчетОДН");
					НоваяСтрока.Перерасчет            = ТаблицаДн.Итог("Перерасчет");
					НоваяСтрока.КОплате               = ТаблицаДн.Итог("КОплате");
					НоваяСтрока.КОплатеИПУ            = ТаблицаДн.Итог("КОплатеИПУ");
					НоваяСтрока.КОплатеОПУ            = ТаблицаДн.Итог("КОплатеОПУ");
					НоваяСтрока.ТарифДляВывода        = ТарифДляВыводаДн;
					НоваяСтрока.Тариф                 = ТарифДн;
					НоваяСтрока.ВидТарифа             = Перечисления.КВП_ВидыТарифов.Дневной;
					НоваяСтрока.КодВидаНачисленийИПУ  = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийИПУ;
					НоваяСтрока.КодВидаНачисленийОПУ  = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийОПУ;
					НоваяСтрока.ПредПоказанияИнд      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ПредПоказанияИнд");
					НоваяСтрока.ПредПоказанияОбщ      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ПредПоказанияОбщ");
					НоваяСтрока.ТекПоказанияИнд       = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ТекПоказанияИнд");
					НоваяСтрока.ТекПоказанияОбщ       = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаДн, "ТекПоказанияОбщ");
					НоваяСтрока.ОбщРасходИнд          = ОбщРасходИндДн;
					НоваяСтрока.ОбщУчетныйРасход      = ОбщУчетныйРасходДн;
					НоваяСтрока.ОбщРасходРасхождение  = ОбщРасходРасхождениеДн;
					НоваяСтрока.ОбщРасходОбщ          = ОбщРасходОбщДн;
					НоваяСтрока.ОбщРасходПоОПУ        = ТаблицаДн.Итог("ОбщРасходПоОПУ");
					НоваяСтрока.ОбщРасходИндПУ        = ТаблицаДн.Итог("ОбщРасходИндПУ");
					НоваяСтрока.ОбщРасходИндНорма     = ТаблицаДн.Итог("ОбщРасходИндНорма");
					НоваяСтрока.ОбъемПотребленияИПУ   = ТаблицаДн.Итог("ОбъемПотребленияИПУ");
					НоваяСтрока.ОбъемПотребленияОПУ   = ТаблицаДн.Итог("ОбъемПотребленияОПУ");
				Иначе
					НоваяСтрока.КоличествоИПУ         = КоличествоИПУОбщ;
					НоваяСтрока.КоличествоОПУ         = КоличествоОПУОбщ;
					НоваяСтрока.НачисленоИПУ          = ТаблицаОбщ.Итог("НачисленоИПУ");
					НоваяСтрока.НачисленоОПУ          = ТаблицаОбщ.Итог("НачисленоОПУ");
					НоваяСтрока.Начислено             = ?(КвитанцияНаПени, ТаблицаОбщ.Итог("Начислено"), НоваяСтрока.НачисленоИПУ + НоваяСтрока.НачисленоОПУ);
					НоваяСтрока.Льгота                = ТаблицаОбщ.Итог("Льгота");
					НоваяСтрока.ПерерасчетИнд         = ТаблицаОбщ.Итог("ПерерасчетИнд");
					НоваяСтрока.ПерерасчетОДН         = ТаблицаОбщ.Итог("ПерерасчетОДН");
					НоваяСтрока.Перерасчет            = ТаблицаОбщ.Итог("Перерасчет");
					НоваяСтрока.КОплате               = ТаблицаОбщ.Итог("КОплате");
					НоваяСтрока.КОплатеИПУ            = ТаблицаОбщ.Итог("КОплатеИПУ");
					НоваяСтрока.КОплатеОПУ            = ТаблицаОбщ.Итог("КОплатеОПУ");
					НоваяСтрока.ПредПоказанияИнд      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаОбщ, "ПредПоказанияИнд");
					НоваяСтрока.ПредПоказанияОбщ      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаОбщ, "ПредПоказанияОбщ");
					НоваяСтрока.ТекПоказанияИнд       = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаОбщ, "ТекПоказанияИнд");
					НоваяСтрока.ТекПоказанияОбщ       = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаОбщ, "ТекПоказанияОбщ");
					НоваяСтрока.ТарифДляВывода        = ТарифДляВыводаОбщ;
					НоваяСтрока.Тариф                 = ТарифОбщ;
					НоваяСтрока.ВидТарифа             = Перечисления.КВП_ВидыТарифов.Общий;
					НоваяСтрока.КодВидаНачисленийИПУ  = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийИПУ;
					НоваяСтрока.КодВидаНачисленийОПУ  = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийОПУ;
					НоваяСтрока.ОбщРасходИнд          = ОбщРасходИндОбщ;
					НоваяСтрока.ОбщУчетныйРасход      = ОбщУчетныйРасходОбщ;
					НоваяСтрока.ОбщРасходРасхождение  = ОбщРасходРасхождениеОбщ;
					НоваяСтрока.ОбщРасходОбщ          = ОбщРасходОбщОбщ;
					НоваяСтрока.ОбщРасходПоОПУ        = ТаблицаОбщ.Итог("ОбщРасходПоОПУ");
					НоваяСтрока.ОбщРасходИндПУ        = ТаблицаОбщ.Итог("ОбщРасходИндПУ");
					НоваяСтрока.ОбщРасходИндНорма     = ТаблицаОбщ.Итог("ОбщРасходИндНорма");
					НоваяСтрока.ОбъемПотребленияИПУ   = ТаблицаОбщ.Итог("ОбъемПотребленияИПУ");
					НоваяСтрока.ОбъемПотребленияОПУ   = ТаблицаОбщ.Итог("ОбъемПотребленияОПУ");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Не ТаблицаНч.Количество() = 0 Тогда
			НоваяСтрока.КоличествоИПУ         = КоличествоИПУНч;
			НоваяСтрока.КоличествоОПУ         = КоличествоОПУНч;
			НоваяСтрока.НачисленоИПУ          = ТаблицаНч.Итог("НачисленоИПУ");
			НоваяСтрока.НачисленоОПУ          = ТаблицаНч.Итог("НачисленоОПУ");
			НоваяСтрока.Начислено             = НоваяСтрока.НачисленоИПУ + НоваяСтрока.НачисленоОПУ;
			НоваяСтрока.Льгота                = ТаблицаНч.Итог("Льгота");
			НоваяСтрока.ПерерасчетИнд         = ТаблицаНч.Итог("ПерерасчетИнд");
			НоваяСтрока.ПерерасчетОДН         = ТаблицаНч.Итог("ПерерасчетОДН");
			НоваяСтрока.Перерасчет            = ТаблицаНч.Итог("Перерасчет");
			НоваяСтрока.КОплате               = ТаблицаНч.Итог("КОплате");
			НоваяСтрока.КОплатеИПУ            = ТаблицаНч.Итог("КОплатеИПУ");
			НоваяСтрока.КОплатеОПУ            = ТаблицаНч.Итог("КОплатеОПУ");
			НоваяСтрока.ТарифДляВывода        = ТарифДляВыводаНч;
			НоваяСтрока.Тариф                 = ТарифНч;
			НоваяСтрока.ВидТарифа             = Перечисления.КВП_ВидыТарифов.Ночной;
			НоваяСтрока.КодВидаНачисленийИПУ  = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийИПУ;
			НоваяСтрока.КодВидаНачисленийОПУ  = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийОПУ;
			НоваяСтрока.ПредПоказанияИнд      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаНч, "ПредПоказанияИнд");
			НоваяСтрока.ПредПоказанияОбщ      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаНч, "ПредПоказанияОбщ");
			НоваяСтрока.ТекПоказанияИнд       = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаНч, "ТекПоказанияИнд");
			НоваяСтрока.ТекПоказанияОбщ       = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаНч, "ТекПоказанияОбщ");
			НоваяСтрока.ОбщРасходИнд          = ОбщРасходИндНч;
			НоваяСтрока.ОбщУчетныйРасход      = ОбщУчетныйРасходНч;
			НоваяСтрока.ОбщРасходРасхождение  = ОбщРасходРасхождениеНч;
			НоваяСтрока.ОбщРасходОбщ          = ОбщРасходОбщНч;
			НоваяСтрока.ОбщРасходПоОПУ        = ТаблицаНч.Итог("ОбщРасходПоОПУ");
			НоваяСтрока.ОбщРасходИндПУ        = ТаблицаНч.Итог("ОбщРасходИндПУ");
			НоваяСтрока.ОбщРасходИндНорма     = ТаблицаНч.Итог("ОбщРасходИндНорма");
			НоваяСтрока.ОбъемПотребленияИПУ   = ТаблицаНч.Итог("ОбъемПотребленияИПУ");
			НоваяСтрока.ОбъемПотребленияОПУ   = ТаблицаНч.Итог("ОбъемПотребленияОПУ");
			
		ИначеЕсли Не ТаблицаПик.Количество() = 0 Тогда
			НоваяСтрока.КоличествоИПУ         = КоличествоИПУПик;
			НоваяСтрока.КоличествоОПУ         = КоличествоОПУПик;
			НоваяСтрока.НачисленоИПУ          = ТаблицаПик.Итог("НачисленоИПУ");
			НоваяСтрока.НачисленоОПУ          = ТаблицаПик.Итог("НачисленоОПУ");
			НоваяСтрока.Начислено             = НоваяСтрока.НачисленоИПУ + НоваяСтрока.НачисленоОПУ;
			НоваяСтрока.Льгота                = ТаблицаПик.Итог("Льгота");
			НоваяСтрока.ПерерасчетИнд         = ТаблицаПик.Итог("ПерерасчетИнд");
			НоваяСтрока.ПерерасчетОДН         = ТаблицаПик.Итог("ПерерасчетОДН");
			НоваяСтрока.Перерасчет            = ТаблицаПик.Итог("Перерасчет");
			НоваяСтрока.КОплате               = ТаблицаПик.Итог("КОплате");
			НоваяСтрока.КОплатеИПУ            = ТаблицаПик.Итог("КОплатеИПУ");
			НоваяСтрока.КОплатеОПУ            = ТаблицаПик.Итог("КОплатеОПУ");
			НоваяСтрока.ТарифДляВывода        = ТарифДляВыводаПик;
			НоваяСтрока.Тариф                 = ТарифПик;
			НоваяСтрока.ВидТарифа             = Перечисления.КВП_ВидыТарифов.Пиковый;
			НоваяСтрока.КодВидаНачисленийИПУ  = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийИПУ;
			НоваяСтрока.КодВидаНачисленийОПУ  = ТаблицаВида.Найти(НоваяСтрока.ВидТарифа, "ВидТарифа").КодВидаНачисленийОПУ;
			НоваяСтрока.ПредПоказанияИнд      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаПик, "ПредПоказанияИнд");
			НоваяСтрока.ПредПоказанияОбщ      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаПик, "ПредПоказанияОбщ");
			НоваяСтрока.ТекПоказанияИнд       = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаПик, "ТекПоказанияИнд");
			НоваяСтрока.ТекПоказанияОбщ       = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаПик, "ТекПоказанияОбщ");
			НоваяСтрока.ОбщРасходИнд          = ОбщРасходИндПик;
			НоваяСтрока.ОбщУчетныйРасход      = ОбщУчетныйРасходПик;
			НоваяСтрока.ОбщРасходРасхождение  = ОбщРасходРасхождениеПик;
			НоваяСтрока.ОбщРасходОбщ          = ОбщРасходОбщПик;
			НоваяСтрока.ОбщРасходПоОПУ        = ТаблицаПик.Итог("ОбщРасходПоОПУ");
			НоваяСтрока.ОбщРасходИндПУ        = ТаблицаПик.Итог("ОбщРасходИндПУ");
			НоваяСтрока.ОбщРасходИндНорма     = ТаблицаПик.Итог("ОбщРасходИндНорма");
			НоваяСтрока.ОбъемПотребленияИПУ   = ТаблицаПик.Итог("ОбъемПотребленияИПУ");
			НоваяСтрока.ОбъемПотребленияОПУ   = ТаблицаПик.Итог("ОбъемПотребленияОПУ");
		
		ИначеЕсли ТаблицаОбщ.Количество() = 0
			И ТаблицаДн.Количество() = 0
			И ТаблицаНч.Количество() = 0
			И ТаблицаПик.Количество() = 0 Тогда
			
			НоваяСтрока.КоличествоИПУ         = 0;
			НоваяСтрока.КоличествоОПУ         = 0;
			НоваяСтрока.НачисленоИПУ          = 0;
			НоваяСтрока.НачисленоОПУ          = 0;
			НоваяСтрока.Начислено             = 0;
			НоваяСтрока.Льгота                = ТаблицаВида.Итог("Льгота");
			НоваяСтрока.ПерерасчетИнд         = ТаблицаВида.Итог("ПерерасчетИнд");
			НоваяСтрока.ПерерасчетОДН         = ТаблицаВида.Итог("ПерерасчетОДН");
			НоваяСтрока.Перерасчет            = ТаблицаВида.Итог("Перерасчет");
			НоваяСтрока.КОплате               = ТаблицаВида.Итог("КОплате");
			НоваяСтрока.КОплатеИПУ            = ТаблицаВида.Итог("КОплатеИПУ");
			НоваяСтрока.КОплатеОПУ            = ТаблицаВида.Итог("КОплатеОПУ");
			НоваяСтрока.Тариф                 = ТаблицаВида[0].Тариф;
			НоваяСтрока.ПредПоказанияИнд      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаВида, "ПредПоказанияИнд");
			НоваяСтрока.ПредПоказанияОбщ      = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаВида, "ПредПоказанияОбщ");
			НоваяСтрока.ТекПоказанияИнд       = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаВида, "ТекПоказанияИнд");
			НоваяСтрока.ТекПоказанияОбщ       = ПолучитьСтрокуПоказанийСчетчиков(ТаблицаВида, "ТекПоказанияОбщ");
			НоваяСтрока.ОбщРасходИнд          = ТаблицаВида.Итог("ОбщРасходИнд");
			НоваяСтрока.ОбщУчетныйРасход      = ТаблицаВида.Итог("ОбщУчетныйРасход");
			НоваяСтрока.ОбщРасходРасхождение  = ТаблицаВида.Итог("ОбщРасходРасхождение");
			НоваяСтрока.ОбщРасходОбщ          = ТаблицаВида.Итог("ОбщРасходОбщ");
			НоваяСтрока.ОбщРасходПоОПУ        = ТаблицаВида.Итог("ОбщРасходПоОПУ");
			НоваяСтрока.ОбщРасходИндПУ        = ТаблицаВида.Итог("ОбщРасходИндПУ");
			НоваяСтрока.ОбщРасходИндНорма     = ТаблицаВида.Итог("ОбщРасходИндНорма");
			НоваяСтрока.ОбъемПотребленияИПУ   = ТаблицаВида.Итог("ОбъемПотребленияИПУ");
			НоваяСтрока.ОбъемПотребленияОПУ   = ТаблицаВида.Итог("ОбъемПотребленияОПУ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СвернутьНачисленияПоВидамТарифовВПлатежныхДокументах()

// Ищет составную услуг в таблице начисления по текущему виду услуг.
//
// Параметры:
//  ТаблицаВида - таблица начисления по текущему виду услуг.
//
// Возвращаемое значение:
//  Булево - наличие составной услуги.
//
Функция ИмеетсяСоставнаяУслуга(ТаблицаВида)
	
	СтрокиБезВидаТарифа = ТаблицаВида.НайтиСтроки(Новый Структура("ВидТарифа", Неопределено));
	
	Для Каждого СтрокаБезТарифа Из СтрокиБезВидаТарифа Цикл
		Если Не СтрокаБезТарифа.УслугаПоСчетчикам Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ИмеетсяСоставнаяУслуга()

// Ищет услугу с ПУ в таблице начисления по текущему виду услуг.
//
// Параметры:
//  ТаблицаВида - таблица начисления по текущему виду услуг.
//
// Возвращаемое значение:
//  Булево - наличие услуги с ПУ.
//
Функция НайтиУслугуСПУ(ТаблицаВида)
	
	Для Каждого Строка Из ТаблицаВида Цикл
		Если Строка.УслугаПоСчетчикам Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // НайтиУслугуСПУ()

// Ищет норму потребления услуг текущего вида услуг.
//
// Параметры:
//  Таблица - таблица начисления по текущему виду услуг
//  ИмяКолонки - колонка, в которой необходимо искать норму.
//
// Возвращаемое значение:
//  Число - размер нормы.
//
Функция НайтиНормуПотребленияСвертка(Таблица, ИмяКолонки)
	
	РазмерНормы = 0;
	
	Для Каждого Строка Из Таблица Цикл
		Если ЗначениеЗаполнено(Строка[ИмяКолонки]) Тогда
			РазмерНормы = Строка[ИмяКолонки];
		КонецЕсли;
	КонецЦикла;
	
	Возврат РазмерНормы;
	
КонецФункции // НайтиНормуПотребленияСвертка()

// Формирует строку с показаниями всех счетчиков текущей тарифности.
//
// Параметры:
//  Таблица - таблица начисления по текущей тарифности
//  ИмяКолонки - колонка, в которой необходимо искать показания.
//
// Возвращаемое значение:
//  Строка - строка с показаниями.
//
Функция ПолучитьСтрокуПоказанийСчетчиков(Таблица, ИмяКолонки)
	
	СтрокаПоказаний = "";
	
	Для Каждого Строка Из Таблица Цикл
		Если ЗначениеЗаполнено(Строка[ИмяКолонки]) Тогда
			Если ЗначениеЗаполнено(СтрокаПоказаний) Тогда
				СтрокаПоказаний = СтрокаПоказаний + "/" + Строка[ИмяКолонки];
			Иначе
				СтрокаПоказаний = Строка[ИмяКолонки];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаПоказаний;
	
КонецФункции // ПолучитьСтрокуПоказанийСчетчиков()

// Записывает строки с начислениями в итоговую таблицу начисления.
//
// Параметры:
//  ТаблицаНачисления - итоговая таблица начисления
//  Таблица - таблица, строки которой необходимо записать в итоговую таблицу.
//
Процедура ДобавитьСтрокиВТаблицуНачисления(ТаблицаНачисления, Таблица)
	
	Для Каждого Строка Из Таблица Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаНачисления.Добавить(), Строка);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокиВТаблицуНачисления()

// Сортирует переданную таблицу начислений согласно установленному порядку.
//
// Параметры:
//  ТаблицаНачисления - Таблица значений - таблица начислений.
//  СтруктураНастроек - Структура - структура настроек сбора данных для квитанций и обменов.
//
Процедура СортироватьТаблицуНачислений(ТаблицаНачисления, СтруктураНастроек)
	
	Если ТаблицаНачисления.Колонки.Найти("Порядок") = Неопределено Тогда
		ТаблицаНачисления.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(2, 0));
	КонецЕсли;
	
	// Заглушка для внешних квитанций, разработанных до появления справочника
	// "Настройки сбора данных для квитанций и обменов".
	тмПорядокУслуг = ПолучитьТаблицуПорядкаУслугИзСтруктурыНастроек(СтруктураНастроек);
	
	МаксНомер = тмПорядокУслуг.Количество() + 1;
	Для Каждого СтрокаНачисления Из ТаблицаНачисления Цикл
		
		Если СтрокаНачисления.ВидУслуги = Неопределено Тогда
			СтрокаНачисления.Порядок = 0;
			Продолжить;
		КонецЕсли;
		
		СтрокаПорядка = тмПорядокУслуг.Найти(СтрокаНачисления.ВидУслуги);
		Если СтрокаПорядка = Неопределено Тогда
			СтрокаНачисления.Порядок = МаксНомер;
		Иначе
			СтрокаНачисления.Порядок = СтрокаПорядка.Порядок;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если в таблице начислений есть колонка "ВидТарифа", то сортируем и по ней.
	ТаблицаНачисления.Сортировать("Порядок, ВидУслуги"
								 + ?(ТаблицаНачисления.Колонки.Найти("СтрокаДетализацииСост") = Неопределено, "", ",СтрокаДетализацииСост")
								 + ?(ТаблицаНачисления.Колонки.Найти("ВидТарифа") = Неопределено, "", ",ВидТарифа"));
	
КонецПроцедуры // СортироватьТаблицуНачислений()

// Подготавливает таблицу с нормами потребления по текущему л/с и текущему зданию.
//
// Параметры:
//  ТаблицаНормОбщ - таблица с нормами по всем объектам отчета
//  ОбщиеДанные - структура с общими данными.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с нормами.
//
Функция ПолучитьТаблицуНормПоТекущемуОбъекту(ТаблицаНормОбщ, ОбщиеДанные)
	
	ТаблицаНорм         = ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаНормОбщ, "Объект", ОбщиеДанные.ЛицевойСчет);
	ТаблицаНормПоЗданию = ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаНормОбщ, "Объект", ОбщиеДанные.Здание);
	
	Для Каждого СтрокаНормыПоЗданию Из ТаблицаНормПоЗданию Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаНорм.Добавить(), СтрокаНормыПоЗданию);
	КонецЦикла;

	Возврат ТаблицаНорм;
	
КонецФункции // ПолучитьТаблицуНормПоТекущемуОбъекту()

// Подготавливает таблицу с показаниями счетчиков по текущему л/с.
//
// Параметры:
//  ТаблицаСчетчиковОбщ - таблица с показаниями счетчиков по всем объектам отчета
//  ТекущиеДанные - структура с данными о начислениях по лицевому счету.
//  ОбщиеДанные - структура с общими данными по лицевому счету.
//  СтруктураНастроек - структура настроек формирования квитанций.
//
// Возвращаемое значение:
//  ТаблицаЗначения - таблица с показаниями счетчиков.
//
Функция ПолучитьТаблицуПоказанийСчетчиковПоТекущемуОбъекту(Знач ТаблицаСчетчиковОбщ, Знач ТекущиеДанные, Знач ОбщиеДанные, Знач СтруктураНастроек)
	
	ТаблицаНазначенныхУслуг = ТекущиеДанные.ТаблицаНазначенныхУслуг;
	ЛицевойСчет             = ОбщиеДанные.ЛицевойСчет;
	Помещение               = ОбщиеДанные.Помещение;
	Подъезд                 = ОбщиеДанные.Подъезд;
	Здание                  = ОбщиеДанные.Здание;
	
	ТаблицаПоказанийСчетчиков = ТаблицаСчетчиковОбщ.СкопироватьКолонки();
	
	СтруктураОтбора = Новый Структура("ЛицевойСчет");
	
	// Л/с.
	СтруктураОтбора.ЛицевойСчет = ЛицевойСчет;
	СтрокиНайденные = ТаблицаСчетчиковОбщ.НайтиСтроки(СтруктураОтбора);
	
	Для каждого ТекСтрока из СтрокиНайденные Цикл
		Если Не ТаблицаНазначенныхУслуг.Найти(ТекСтрока.Услуга) = Неопределено Тогда
			НоваяСтрока = ТаблицаПоказанийСчетчиков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Помещение.
	СтруктураОтбора.ЛицевойСчет = Помещение;
	СтрокиНайденные = ТаблицаСчетчиковОбщ.НайтиСтроки(СтруктураОтбора);
	
	Для каждого ТекСтрока из СтрокиНайденные Цикл
		Если Не ТаблицаНазначенныхУслуг.Найти(ТекСтрока.Услуга) = Неопределено Тогда
			НоваяСтрока = ТаблицаПоказанийСчетчиков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Подъезд.
	СтруктураОтбора.ЛицевойСчет = Подъезд;
	СтрокиНайденные = ТаблицаСчетчиковОбщ.НайтиСтроки(СтруктураОтбора);
	
	Для каждого ТекСтрока из СтрокиНайденные Цикл
		Если Не ТаблицаНазначенныхУслуг.Найти(ТекСтрока.Услуга) = Неопределено Тогда
			НоваяСтрока = ТаблицаПоказанийСчетчиков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Здание.
	СтруктураОтбора.ЛицевойСчет = Здание;
	СтрокиНайденные = ТаблицаСчетчиковОбщ.НайтиСтроки(СтруктураОтбора);
	
	Для каждого ТекСтрока из СтрокиНайденные Цикл
		Если Не ТаблицаНазначенныхУслуг.Найти(ТекСтрока.Услуга) = Неопределено Тогда
			НоваяСтрока = ТаблицаПоказанийСчетчиков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	СортироватьТаблицуНачислений(ТаблицаПоказанийСчетчиков, СтруктураНастроек);
	
	Возврат ТаблицаПоказанийСчетчиков;
	
КонецФункции // ПолучитьТаблицуПоказанийСчетчиковПоТекущемуОбъекту()

// Формирует таблицу с зависимыми услугами и соответствующими им услугами-основаниями.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица зависимости услуг.
//
Функция ПолучитьТаблицуЗависимостиУслуг(ПериодСреза)
	
	Запрос = Новый Запрос;
	
	Если НЕ Константы.УПЖКХ_УказыватьЗависимостьУслугВРазрезеЗданий.Получить() Тогда
		УсловиеОтбора = "Объект = Значение(Справочник.КВП_Здания.ПустаяСсылка)";
	Иначе
		УсловиеОтбора = "Истина";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗависимостиУслугСрезПоследних.Объект,
	|	КВП_ЗависимостиУслугСрезПоследних.Услуга,
	|	КВП_ЗависимостиУслугСрезПоследних.УслугаОснование
	|ИЗ
	|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(&ПериодСреза, &УсловиеОтбора) КАК КВП_ЗависимостиУслугСрезПоследних
	|ГДЕ
	|	КВП_ЗависимостиУслугСрезПоследних.Действует";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора);
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПериодСреза", ПериодСреза);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Индексы.Добавить("Объект");
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуЗависимостиУслуг()

// Формирует таблицу закрытых лицевых счетов.
//
Функция ПолучитьТаблицуЗакрытыхЛС(СтруктураНастроек)
	
	Запрос = Новый Запрос;
	
	Если СтруктураНастроек.СписокЛицевыхСчетов.Количество() = 0 Тогда
		УсловиеНаЛС = "";
	Иначе
		УсловиеНаЛС = "КВП_ЛицевыеСчета.Ссылка В (&СписокЛицевыхСчетов) И";
		Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СтруктураНастроек.СписокЛицевыхСчетов);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	" + УсловиеНаЛС + "
	|	НЕ КВП_ЛицевыеСчета.Идентификатор = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&КонецМесяца,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)
	|				И Период >= &НачалоМесяца) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	НЕ КВП_ЛицевыеСчетаСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(СтруктураНастроек.ПериодПросмотра));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(СтруктураНастроек.ПериодПросмотра));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует таблицу с услугами, связанными с помощью регистра "Услуги общедомового счетчика".
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица связанных услуг.
//
Функция ПолучитьТаблицуСвязанныхУслуг()
	
	ТаблицаУслуг = ПолучитьТаблицуУслугОбщедомовогоСчетчика();
	
	ТаблицаУслуг.Колонки.УслугаОбщедомовогоСчетчика.Имя = "УслугаОПУ";
	ТаблицаУслуг.Колонки.Услуга.Имя = "УслугаИПУ";
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПолучитьТаблицуСвязанныхУслуг()

// Поиск оплат по списку л/с.
//
// Параметры:
//  СтруктураНастроек - Структура – структура настроек пользователя.
//  ОсобыеНастройкиВыгрузкиНачислений - Булево - указвает на факт того,
//    что необходимо использовать настройку "Таблица настроек выгрузки услуг"
//    настроек обмена данными с сайтом. Используется только при обмене с сайтом ЖКХ.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с оплатами по списку л/с в разрезе видов услуг.
//
Функция ПолучитьДанныеОбОплатах(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений)
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо Тогда
	
		Организация         = СтруктураНастроек.Организация;
		ПериодПросмотра     = СтруктураНастроек.ПериодПросмотра;
		СписокЛицевыхСчетов = СтруктураНастроек.СписокЛицевыхСчетов;
		СписокУслуг         = ?(ОсобыеНастройкиВыгрузкиНачислений, СтруктураНастроек.СписокУслугВыгружатьНачисленияОбщ, СтруктураНастроек.СписокУслуг);
		УчетОплат           = СтруктураНастроек.УчетОплат;
		
		СписокКоммунальныхРесурсов = СтруктураНастроек.СписокКоммунальныхРесурсов;
		
		// Учитываем пени в основной квитанции.
		Если (СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням) Тогда
			
			СуммаОплатыПени = 
			"ВЫБОР
			|	КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
			|		ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
			|	ИНАЧЕ 0
			|КОНЕЦ";
			ОтборНаРазделУчета = "";
			
		// Не учитываем пени в основной квитанции.
		Иначе
			СуммаОплатыПени = "0";
			ОтборНаРазделУчета = "И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)";
		КонецЕсли;
		
		КонецРасчетногоПериода = ?(УчетОплат = "Конца отчетного месяца", КонецМесяца(ПериодПросмотра), ТекущаяДата());
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаПоСчетчикам,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ((УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка) 
		|                     ИЛИ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование))
		|						И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление))
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаОплаты,
		|	УПЖКХ_НачисленияОбороты.Период КАК Период,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ((УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|                     ИЛИ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование))
		|							И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление))
		|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаОплатыБезПени,
		|	СУММА(" + СуммаОплатыПени + ") КАК СуммаОплатыПени,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|					И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаОплатыОстаткаПоРассрочке,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование)
		|					И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаОплатыДобровольногоСтрахования,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоКоммунальнаяУслуга,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.КоммунальныйРесурс В (&СписокКоммунальныхРесурсов)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОДНОтноситсяКОбщемуИмуществу
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&НачалоМесяца,
		|			&КонецМесяца,
		|			Регистратор,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И Услуга В (&СписокУслуг) " + ОтборНаРазделУчета + "
		|				И ВидНачисления В (&ВидыНачисленияОплата)) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.Период,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	ВЫБОР КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.КоммунальныйРесурс В (&СписокКоммунальныхРесурсов)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
		Запрос.УстановитьПараметр("НачалоМесяца",               НачалоМесяца(ПериодПросмотра));
		Запрос.УстановитьПараметр("КонецМесяца",                КонецРасчетногоПериода);
		Запрос.УстановитьПараметр("Организация",                Организация);
		Запрос.УстановитьПараметр("СписокЛицевыхСчетов",        СписокЛицевыхСчетов);
		Запрос.УстановитьПараметр("СписокУслуг",                СписокУслуг);
		Запрос.УстановитьПараметр("СписокКоммунальныхРесурсов", СписокКоммунальныхРесурсов);
		
		ВидыНачисленияОплата = Новый СписокЗначений;
		ВидыНачисленияОплата.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Оплата);
		ВидыНачисленияОплата.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Начисление);
		
		Запрос.УстановитьПараметр("ВидыНачисленияОплата", ВидыНачисленияОплата);
		
		ДанныеОбОплатах = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		ДанныеОбОплатах = Новый ТаблицаЗначений;
		ДанныеОбОплатах.Колонки.Добавить("ЛицевойСчет",                         Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
		ДанныеОбОплатах.Колонки.Добавить("Услуга",                              Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		ДанныеОбОплатах.Колонки.Добавить("ВидУслуги",                           Новый ОписаниеТипов("СправочникСсылка.КВП_ВидыУслуг"));
		ДанныеОбОплатах.Колонки.Добавить("ЕдиницаИзмерения",                    Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
		ДанныеОбОплатах.Колонки.Добавить("УслугаПоСчетчикам",                   Новый ОписаниеТипов("Булево"));
		ДанныеОбОплатах.Колонки.Добавить("СуммаОплаты",                         Новый ОписаниеТипов("Число"));
		ДанныеОбОплатах.Колонки.Добавить("Период",                              Новый ОписаниеТипов("Дата"));
		ДанныеОбОплатах.Колонки.Добавить("СуммаОплатыБезПени",                  Новый ОписаниеТипов("Число"));
		ДанныеОбОплатах.Колонки.Добавить("СуммаОплатыПени",                     Новый ОписаниеТипов("Число"));
		ДанныеОбОплатах.Колонки.Добавить("СуммаОплатыОстаткаПоРассрочке",       Новый ОписаниеТипов("Число"));
		ДанныеОбОплатах.Колонки.Добавить("СуммаОплатыДобровольногоСтрахования", Новый ОписаниеТипов("Число"));
		ДанныеОбОплатах.Колонки.Добавить("ЭтоКоммунальнаяУслуга",               Новый ОписаниеТипов("Булево"));
		ДанныеОбОплатах.Колонки.Добавить("ОДНОтноситсяКОбщемуИмуществу",        Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	
	ДанныеОбОплатах.Индексы.Добавить("ЛицевойСчет");
	
	Возврат ДанныеОбОплатах;
	
КонецФункции // ПолучитьДанныеОбОплатах()

// Получает таблицу оплат по услугам.
//
Функция ПолучитьТаблицуОплатПоУслугам(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений)
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо Тогда
	
		СписокУслуг = ?(ОсобыеНастройкиВыгрузкиНачислений, СтруктураНастроек.СписокУслугВыгружатьНачисленияОбщ, СтруктураНастроек.СписокУслуг);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК Оплачено
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&НачалоМесяца,
		|			&КонецМесяца,
		|			Регистратор,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И Услуга В (&СписокУслуг)
		|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
		|				" + ?(СтруктураНастроек.УчитыватьПени И НЕ СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням, "", "И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)") + ") КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	НЕ УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ";
		
		Запрос.УстановитьПараметр("НачалоМесяца",           НачалоМесяца(СтруктураНастроек.ПериодПросмотра));
		Запрос.УстановитьПараметр("КонецМесяца",            КонецМесяца(СтруктураНастроек.ПериодПросмотра));
		Запрос.УстановитьПараметр("Организация",            СтруктураНастроек.Организация);
		Запрос.УстановитьПараметр("СписокЛицевыхСчетов",    СтруктураНастроек.СписокЛицевыхСчетов);
		Запрос.УстановитьПараметр("СписокУслуг",            СписокУслуг);
		
		Таблица = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
		Таблица.Колонки.Добавить("Услуга",      Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		Таблица.Колонки.Добавить("ВидУслуги",   Новый ОписаниеТипов("СправочникСсылка.КВП_ВидыУслуг"));
		Таблица.Колонки.Добавить("Оплачено",    Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Таблица.Индексы.Добавить("ЛицевойСчет");
	
	Возврат Таблица;
	
КонецФункции

// Получает таблицу оплат по услугам с отбором.
//
Функция ПолучитьТаблицуОплатПоУслугамСОтбором(ТаблицаОплатОбщПоУслугам, СписокУслуг)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОплат.ЛицевойСчет,
	|	ТаблицаОплат.Услуга,
	|	ТаблицаОплат.ВидУслуги,
	|	ТаблицаОплат.Оплачено
	|ПОМЕСТИТЬ втОплаты
	|ИЗ
	|	&ТаблицаОплат КАК ТаблицаОплат
	|ГДЕ
	|	ТаблицаОплат.Услуга В(&СписокУслуг)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОплаты.ЛицевойСчет,
	|	втОплаты.Услуга,
	|	втОплаты.ВидУслуги,
	|	втОплаты.Оплачено
	|ИЗ
	|	втОплаты КАК втОплаты";
	
	Запрос.УстановитьПараметр("ТаблицаОплат", ТаблицаОплатОбщПоУслугам);
	Запрос.УстановитьПараметр("СписокУслуг",  СписокУслуг);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Индексы.Добавить("ЛицевойСчет");
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Поиск сведений о показаниях счетчиков по списку всех объектов отчета.
//
// Параметры:
//  Организация – организация, на которую формируется квитанция
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция
//  СписокЛицевыхСчетов - список л/с
//  СписокПомещений - список помещений
//  СписокЗданий - список зданий
//  СписокУслуг - список услуг, на который формируется квитанция.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями о показаниях счетчиков.
// 
Функция ПолучитьДанныеПоСчетчикам(Организация, ПериодПросмотра, СписокЛицевыхСчетов, ТаблицаОбъектов, СписокУслуг, УчитыватьПоказанияЗаПредыдущиеПериоды = Истина)
	
	// Формируем таблицу с максимальными показаниями счетчиков при всех возможных
	// разрядностях. Передаем данную таблицу в запрос для реализации механизма 
	// перехода через ноль.
	ТаблицаМаксЗначений = Новый ТаблицаЗначений;
	ТаблицаМаксЗначений.Колонки.Добавить("Разрядность",  Новый ОписаниеТипов("Число"));
	ТаблицаМаксЗначений.Колонки.Добавить("МаксЗначение", Новый ОписаниеТипов("Число"));
	
	Для Счетчик = 1 По 15 Цикл
		НоваяСтрока = ТаблицаМаксЗначений.Добавить();
		НоваяСтрока.Разрядность  = Счетчик;
		НоваяСтрока.МаксЗначение = Pow(10, Счетчик);
	КонецЦикла;
	
	ОбщийСписокОбъектов = Новый СписокЗначений;
	Для Каждого ТекущийОбъект Из ТаблицаОбъектов Цикл
		Если ОбщийСписокОбъектов.НайтиПоЗначению(ТекущийОбъект.ЛицевойСчет) = Неопределено Тогда
			ОбщийСписокОбъектов.Добавить(ТекущийОбъект.ЛицевойСчет);
		КонецЕсли;
		Если ОбщийСписокОбъектов.НайтиПоЗначению(ТекущийОбъект.Помещение) = Неопределено Тогда
			ОбщийСписокОбъектов.Добавить(ТекущийОбъект.Помещение);
		КонецЕсли;
		Если ОбщийСписокОбъектов.НайтиПоЗначению(ТекущийОбъект.Подъезд) = Неопределено Тогда
			ОбщийСписокОбъектов.Добавить(ТекущийОбъект.Подъезд);
		КонецЕсли;
		Если ОбщийСписокОбъектов.НайтиПоЗначению(ТекущийОбъект.Здание) = Неопределено Тогда
			ОбщийСписокОбъектов.Добавить(ТекущийОбъект.Здание);
		КонецЕсли;
	КонецЦикла;
	
	// Описание запроса:
	//
	// втТаблицаСчетчиков
	// ОПИСАНИЕ:
	//  Приборы учета, действующие на л/с или помещении на дату окончания периода
	// ПОЛЯ:
	//  Объект - л/с или помещение
	//  Абонент - наименование ПУ
	//  Счетчик - ссылка на ПУ
	//  Услуга  - ссылка на услугу
	//  ВидУслуги - ссылка на вид услуги
	//  ЕдИзм     - единица измерения вида услуги
	//  СпособРегистрацииПоказаний - способ регистрации показаний, заданный для ПУ.
	//
	// втТаблицаПоказаний
	// ОПИСАНИЕ:
	//  Данные о показаниях ПУ, выбранных в таблицу втТаблицаСчетчиков, на дату начала периода и за период.
	// ПОЛЯ:
	//  Счетчик - ссылка на ПУ
	//  Период  - дата показания
	//  ДневноеПоказание, НочноеПоказание, ПиковоеПоказание - показания.
	//
	// втТаблицаТекущихПоказаний, втТаблицаПредыдущихПоказаний
	// ОПИСАНИЕ:
	//  Данные о текущих и предыдущих показаниях ПУ. Формируются по данным таблицы втТаблицаПоказаний:
	//  текущие - это показания с наиболее поздней датой, предыдущие - показания с наиболее ранней датой.
	// ПОЛЯ:
	//  Счетчик - ссылка на ПУ
	//  Период  - дата показания
	//  ДневноеПоказание, НочноеПоказание, ПиковоеПоказание - показания.
	//
	// втТаблицаСчетчиковСПоказаниями
	// ОПИСАНИЕ:
	//  Список ПУ, действующих на л/с или помещение (по данным таблицы втТаблицаСчетчиков), с данными о
	//  текущих и предыдущих показаниях (по данным таблиц втТаблицаТекущихПоказаний, втТаблицаПредыдущихПоказаний).
	// ПОЛЯ:
	//  Объект - л/с или помещение
	//  Счетчик - ссылка на ПУ
	//  Абонент - наименование ПУ
	//  Услуга  - ссылка на услугу
	//  ВидУслуги - ссылка на вид услуги
	//  ЕдИзм     - единица измерения вида услуги
	//  СпособРегистрацииПоказаний - способ регистрации показаний, заданный для ПУ
	//  ТекПериод, ТекПоказание[Дн|Нч|Пк] - данные о текущих показаниях
	//  ПредПериод, ПредПоказание[Дн|Нч|Пк] - данные о предыдущих показаниях; если способ регистрации
	//                            показаний ПУ "Расход за период расчета", то устанавливаются равными 0.
	//
	// втДатыПоверки
	// ОПИСАНИЕ:
	//  Список ПУ, действующих на л/с или помещение (по данным таблицы втТаблицаСчетчиков), с данными о
	//  ПРЕДСТОЯЩИХ датах поверки.
	// ПОЛЯ:
	//  Счетчик - ссылка на ПУ
	//  Период - предстоящая дата поверки.
	//
	// Основной запрос
	// ОПИСАНИЕ:
	//  Список ПУ, действующих на л/с или помещения, с текущими и предыдущими показаниями (по данным 
	//  таблицы втТаблицаСчетчиковСПоказаниями), с датами предстоящих поверок и с рассчитанным расходом и сальдо по услугам на дату 
	//  окончания периода.
	//
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаМаксЗначений.Разрядность КАК Разрядность,
	|	ТаблицаМаксЗначений.МаксЗначение КАК МаксЗначение
	|ПОМЕСТИТЬ втМаксЗначенияПоказаний
	|ИЗ
	|	&ТаблицаМаксЗначений КАК ТаблицаМаксЗначений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК Объект,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга КАК Услуга,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес КАК Помещение,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес.Подъезд КАК Подъезд,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес.Владелец КАК Здание
	|ПОМЕСТИТЬ втНазначенныеНачисления
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И ДатаИзменения < &ДатаКон
	|				И Объект В (&СписокЛицевыхСчетов)
	|				И Услуга В (&СписокУслуг)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес.Подъезд,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес.Владелец
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_НазначенныеНачисления.Объект,
	|	КВП_НазначенныеНачисления.Услуга,
	|	КВП_НазначенныеНачисления.Объект.Адрес,
	|	КВП_НазначенныеНачисления.Объект.Адрес.Подъезд,
	|	КВП_НазначенныеНачисления.Объект.Адрес.Владелец
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
	|ГДЕ
	|	КВП_НазначенныеНачисления.ДатаИзменения МЕЖДУ &ДатаНачМесяца И &ДатаКон
	|	И КВП_НазначенныеНачисления.Активность
	|	И КВП_НазначенныеНачисления.Организация = &Организация
	|	И КВП_НазначенныеНачисления.Объект В(&СписокЛицевыхСчетов)
	|	И КВП_НазначенныеНачисления.Услуга В(&СписокУслуг)
	|	И НЕ КВП_НазначенныеНачисления.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеНачисления.Объект,
	|	КВП_НазначенныеНачисления.Услуга,
	|	КВП_НазначенныеНачисления.Объект.Адрес,
	|	КВП_НазначенныеНачисления.Объект.Адрес.Подъезд,
	|	КВП_НазначенныеНачисления.Объект.Адрес.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний
	|ПОМЕСТИТЬ втЗакрепленныеСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаНач,
	|			Объект В (&ОбщийСписокОбъектов)
	|				И ДатаИзменения <= &ДатаНачМесяца) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.СпособРегистрацииПоказаний
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКон,
	|			ДатаИзменения МЕЖДУ &ДатаНачМесяца И &ДатаКон
	|				И Объект В (&ОбщийСписокОбъектов)) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЗакрепленныеСчетчики.Объект КАК Объект,
	|	втЗакрепленныеСчетчики.Счетчик КАК Счетчик,
	|	втЗакрепленныеСчетчики.Услуга КАК Услуга,
	|	втЗакрепленныеСчетчики.Счетчик.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний
	|ПОМЕСТИТЬ втСчетчики
	|ИЗ
	|	втЗакрепленныеСчетчики КАК втЗакрепленныеСчетчики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНазначенныеНачисления КАК втНазначенныеНачисления
	|		ПО втЗакрепленныеСчетчики.Услуга = втНазначенныеНачисления.Услуга
	|			И втЗакрепленныеСчетчики.Объект = втНазначенныеНачисления.Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЗакрепленныеСчетчики.Объект,
	|	втЗакрепленныеСчетчики.Счетчик,
	|	втЗакрепленныеСчетчики.Услуга,
	|	втЗакрепленныеСчетчики.Счетчик.СпособРегистрацииПоказаний
	|ИЗ
	|	втЗакрепленныеСчетчики КАК втЗакрепленныеСчетчики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНазначенныеНачисления КАК втНазначенныеНачисления
	|		ПО втЗакрепленныеСчетчики.Услуга = втНазначенныеНачисления.Услуга
	|			И втЗакрепленныеСчетчики.Объект = втНазначенныеНачисления.Помещение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЗакрепленныеСчетчики.Объект,
	|	втЗакрепленныеСчетчики.Счетчик,
	|	втЗакрепленныеСчетчики.Услуга,
	|	втЗакрепленныеСчетчики.Счетчик.СпособРегистрацииПоказаний
	|ИЗ
	|	втЗакрепленныеСчетчики КАК втЗакрепленныеСчетчики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНазначенныеНачисления КАК втНазначенныеНачисления
	|		ПО втЗакрепленныеСчетчики.Услуга = втНазначенныеНачисления.Услуга
	|			И втЗакрепленныеСчетчики.Объект = втНазначенныеНачисления.Подъезд
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЗакрепленныеСчетчики.Объект,
	|	втЗакрепленныеСчетчики.Счетчик,
	|	втЗакрепленныеСчетчики.Услуга,
	|	втЗакрепленныеСчетчики.Счетчик.СпособРегистрацииПоказаний
	|ИЗ
	|	втЗакрепленныеСчетчики КАК втЗакрепленныеСчетчики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНазначенныеНачисления КАК втНазначенныеНачисления
	|		ПО втЗакрепленныеСчетчики.Услуга = втНазначенныеНачисления.Услуга
	|			И втЗакрепленныеСчетчики.Объект = втНазначенныеНачисления.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЗакрепленныеСчетчики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНазначенныеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПоказанийВсехПУ.Счетчик КАК Счетчик,
	|	ТаблицаПоказанийВсехПУ.Период КАК Период,
	|	ТаблицаПоказанийВсехПУ.ДневноеПоказание КАК ДневноеПоказание,
	|	ТаблицаПоказанийВсехПУ.НочноеПоказание КАК НочноеПоказание,
	|	ТаблицаПоказанийВсехПУ.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ТаблицаПоказанийВсехПУ.НачальноеПоказание КАК НачальноеПоказание
	|ПОМЕСТИТЬ втПоказанияСчетчиков
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(
	|			&ДатаНач,
	|			Счетчик В
	|				(ВЫБРАТЬ
	|					втСчетчики.Счетчик
	|				ИЗ
	|					втСчетчики КАК втСчетчики)) КАК ТаблицаПоказанийВсехПУ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоказанийВсехПУ.Счетчик,
	|	ТаблицаПоказанийВсехПУ.Период,
	|	ТаблицаПоказанийВсехПУ.ДневноеПоказание,
	|	ТаблицаПоказанийВсехПУ.НочноеПоказание,
	|	ТаблицаПоказанийВсехПУ.ПиковоеПоказание,
	|	ТаблицаПоказанийВсехПУ.НачальноеПоказание
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков КАК ТаблицаПоказанийВсехПУ
	|ГДЕ
	|	ТаблицаПоказанийВсехПУ.Период МЕЖДУ &ДатаНачМесяца И &ДатаКон
	|	И ТаблицаПоказанийВсехПУ.Активность
	|	И ТаблицаПоказанийВсехПУ.Счетчик В
	|			(ВЫБРАТЬ
	|				втСчетчики.Счетчик
	|			ИЗ
	|				втСчетчики КАК втСчетчики)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоказанияСчетчиков.Счетчик КАК Счетчик,
	|	МАКСИМУМ(втПоказанияСчетчиков.Период) КАК МаксПериод,
	|	МИНИМУМ(втПоказанияСчетчиков.Период) КАК МинПериод
	|ПОМЕСТИТЬ втДатыПоследнихПредпоследнихПоказаний
	|ИЗ
	|	втПоказанияСчетчиков КАК втПоказанияСчетчиков
	|
	|СГРУППИРОВАТЬ ПО
	|	втПоказанияСчетчиков.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДатыПоследнихПредпоследнихПоказаний.Счетчик КАК Счетчик,
	|	втДатыПоследнихПредпоследнихПоказаний.МаксПериод КАК Период,
	|	втПоказанияСчетчиков.ДневноеПоказание КАК ДневноеПоказание,
	|	втПоказанияСчетчиков.НочноеПоказание КАК НочноеПоказание,
	|	втПоказанияСчетчиков.ПиковоеПоказание КАК ПиковоеПоказание
	|ПОМЕСТИТЬ втТаблицаТекущихПоказаний
	|ИЗ
	|	втДатыПоследнихПредпоследнихПоказаний КАК втДатыПоследнихПредпоследнихПоказаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПоказанияСчетчиков КАК втПоказанияСчетчиков
	|		ПО втДатыПоследнихПредпоследнихПоказаний.Счетчик = втПоказанияСчетчиков.Счетчик
	|			И втДатыПоследнихПредпоследнихПоказаний.МаксПериод = втПоказанияСчетчиков.Период
	|ГДЕ
	|	(&УчитыватьПоказанияЗаПредыдущиеПериоды
	|			ИЛИ втДатыПоследнихПредпоследнихПоказаний.МаксПериод МЕЖДУ &ДатаНачМесяца И &ДатаКон)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДатыПоследнихПредпоследнихПоказаний.Счетчик КАК Счетчик,
	|	втДатыПоследнихПредпоследнихПоказаний.МинПериод КАК Период,
	|	ВЫБОР
	|		КОГДА НЕ втПоказанияСчетчиков.НачальноеПоказание
	|				И втПоказанияСчетчиков.Период >= &ДатаНачМесяца
	|			ТОГДА 0
	|		ИНАЧЕ втПоказанияСчетчиков.ДневноеПоказание
	|	КОНЕЦ КАК ДневноеПоказание,
	|	ВЫБОР
	|		КОГДА НЕ втПоказанияСчетчиков.НачальноеПоказание
	|				И втПоказанияСчетчиков.Период >= &ДатаНачМесяца
	|			ТОГДА 0
	|		ИНАЧЕ втПоказанияСчетчиков.НочноеПоказание
	|	КОНЕЦ КАК НочноеПоказание,
	|	ВЫБОР
	|		КОГДА НЕ втПоказанияСчетчиков.НачальноеПоказание
	|				И втПоказанияСчетчиков.Период >= &ДатаНачМесяца
	|			ТОГДА 0
	|		ИНАЧЕ втПоказанияСчетчиков.ПиковоеПоказание
	|	КОНЕЦ КАК ПиковоеПоказание
	|ПОМЕСТИТЬ втТаблицаПредыдущихПоказаний
	|ИЗ
	|	втДатыПоследнихПредпоследнихПоказаний КАК втДатыПоследнихПредпоследнихПоказаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПоказанияСчетчиков КАК втПоказанияСчетчиков
	|		ПО втДатыПоследнихПредпоследнихПоказаний.Счетчик = втПоказанияСчетчиков.Счетчик
	|			И втДатыПоследнихПредпоследнихПоказаний.МинПериод = втПоказанияСчетчиков.Период
	|ГДЕ
	|	(&УчитыватьПоказанияЗаПредыдущиеПериоды
	|			ИЛИ втДатыПоследнихПредпоследнихПоказаний.МаксПериод МЕЖДУ &ДатаНачМесяца И &ДатаКон)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДатыПоследнихПредпоследнихПоказаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПоказанияСчетчиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСчетчиков.Объект КАК Объект,
	|	ТаблицаСчетчиков.Счетчик КАК Счетчик,
	|	ТаблицаСчетчиков.Услуга КАК Услуга,
	|	ТаблицаСчетчиков.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний,
	|	ЕСТЬNULL(ТаблицаТекущихПоказаний.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ТекПериод,
	|	ЕСТЬNULL(ТаблицаТекущихПоказаний.ДневноеПоказание, 0) КАК ТекПоказаниеДн,
	|	ЕСТЬNULL(ТаблицаТекущихПоказаний.НочноеПоказание, 0) КАК ТекПоказаниеНч,
	|	ЕСТЬNULL(ТаблицаТекущихПоказаний.ПиковоеПоказание, 0) КАК ТекПоказаниеПк,
	|	ЕСТЬNULL(ТаблицаПредыдущихПоказаний.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ПредПериод,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиков.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаПредыдущихПоказаний.ДневноеПоказание, 0)
	|	КОНЕЦ КАК ПредПоказаниеДн,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиков.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаПредыдущихПоказаний.НочноеПоказание, 0)
	|	КОНЕЦ КАК ПредПоказаниеНч,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиков.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаПредыдущихПоказаний.ПиковоеПоказание, 0)
	|	КОНЕЦ КАК ПредПоказаниеПк,
	|	ТаблицаСчетчиков.Счетчик.Разрядность КАК Разрядность
	|ПОМЕСТИТЬ втТаблицаСчетчиковСПоказаниями
	|ИЗ
	|	втСчетчики КАК ТаблицаСчетчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаТекущихПоказаний КАК ТаблицаТекущихПоказаний
	|		ПО ТаблицаСчетчиков.Счетчик = ТаблицаТекущихПоказаний.Счетчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаПредыдущихПоказаний КАК ТаблицаПредыдущихПоказаний
	|		ПО ТаблицаСчетчиков.Счетчик = ТаблицаПредыдущихПоказаний.Счетчик
	|ГДЕ
	|	(&УчитыватьПоказанияЗаПредыдущиеПериоды
	|			ИЛИ ЕСТЬNULL(ТаблицаТекущихПоказаний.Период, ДАТАВРЕМЯ(1, 1, 1)) МЕЖДУ &ДатаНачМесяца И &ДатаКон)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТаблицаТекущихПоказаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТаблицаПредыдущихПоказаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения КАК Период
	|ПОМЕСТИТЬ втДатыПоверки
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			,
	|			ПричинаОтключения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПричиныОтключенияПриборовУчета.Поверка)
	|				И Счетчик В
	|					(ВЫБРАТЬ
	|						втСчетчики.Счетчик
	|					ИЗ
	|						втСчетчики КАК втСчетчики)
	|				И ДатаИзменения >= &ДатаКон) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСчетчики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСчетчиковСПоказаниями.Объект КАК ЛицевойСчет,
	|	ТаблицаСчетчиковСПоказаниями.Счетчик.Наименование КАК Абонент,
	|	ТаблицаСчетчиковСПоказаниями.Счетчик КАК Счетчик,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиковСПоказаниями.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользуетсяВводРасходаЗаПериодРасчета,
	|	ТаблицаСчетчиковСПоказаниями.Услуга КАК Услуга,
	|	ТаблицаСчетчиковСПоказаниями.Услуга.ВидУслуги КАК ВидУслуги,
	|	ТаблицаСчетчиковСПоказаниями.Услуга.ВидУслуги.Наименование КАК НаименованиеВидаУслуги,
	|	ТаблицаСчетчиковСПоказаниями.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
	|	ТаблицаСчетчиковСПоказаниями.ТекПериод КАК ПредыдущееПоказаниеПериод,
	|	ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн КАК ПредыдущееПоказаниеДн,
	|	ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч КАК ПредыдущееПоказаниеНч,
	|	ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк КАК ПредыдущееПоказаниеПк,
	|	ТаблицаСчетчиковСПоказаниями.ПредПериод КАК ПредПредыдущееПоказаниеПериод,
	|	ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн КАК ПредПредыдущееПоказаниеДн,
	|	ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч КАК ПредПредыдущееПоказаниеНч,
	|	ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк КАК ПредПредыдущееПоказаниеПк,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн >= ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн
	|			ТОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн / втМаксЗначенияПоказаний.МаксЗначение >= 0.9
	|						И ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн / втМаксЗначенияПоказаний.МаксЗначение < 1
	|						И ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн / втМаксЗначенияПоказаний.МаксЗначение < 0.9
	|					ТОГДА втМаксЗначенияПоказаний.МаксЗначение - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн + ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн
	|				ИНАЧЕ ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн
	|			КОНЕЦ
	|	КОНЕЦ КАК РасходДн,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч >= ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч
	|			ТОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч / втМаксЗначенияПоказаний.МаксЗначение >= 0.9
	|						И ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч / втМаксЗначенияПоказаний.МаксЗначение < 1
	|						И ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч / втМаксЗначенияПоказаний.МаксЗначение < 0.9
	|					ТОГДА втМаксЗначенияПоказаний.МаксЗначение - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч + ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч
	|				ИНАЧЕ ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч
	|			КОНЕЦ
	|	КОНЕЦ КАК РасходНч,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк >= ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк
	|			ТОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк / втМаксЗначенияПоказаний.МаксЗначение >= 0.9
	|						И ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк / втМаксЗначенияПоказаний.МаксЗначение < 1
	|						И ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк / втМаксЗначенияПоказаний.МаксЗначение < 0.9
	|					ТОГДА втМаксЗначенияПоказаний.МаксЗначение - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк + ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк
	|				ИНАЧЕ ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк
	|			КОНЕЦ
	|	КОНЕЦ КАК РасходПк,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиковСПоказаниями.Объект ССЫЛКА Справочник.КВП_Здания
	|				ИЛИ ТаблицаСчетчиковСПоказаниями.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяОПУ,
	|	ТаблицаСчетчиковСПоказаниями.Счетчик.Код КАК КодСчетчика,
	|	ТаблицаСчетчиковСПоказаниями.Разрядность КАК Разрядность,
	|	ТаблицаСчетчиковСПоказаниями.Счетчик.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиковСПоказаниями.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Однотарифный)
	|			ТОГДА ""1""
	|		КОГДА ТаблицаСчетчиковСПоказаниями.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный)
	|			ТОГДА ""2""
	|		КОГДА ТаблицаСчетчиковСПоказаниями.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Трехтарифный)
	|			ТОГДА ""3""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Тарифность,
	|	ТаблицаСчетчиковСПоказаниями.Счетчик.Наименование КАК НаименованиеСчетчика,
	|	ЕСТЬNULL(втДатыПоверки.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоверки,
	|	ТаблицаСчетчиковСПоказаниями.Услуга.Наименование КАК НаименованиеУслуги,
	|	ЛОЖЬ КАК Отключен,
	|	0 КАК Порядок
	|ИЗ
	|	втТаблицаСчетчиковСПоказаниями КАК ТаблицаСчетчиковСПоказаниями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксЗначенияПоказаний КАК втМаксЗначенияПоказаний
	|		ПО ТаблицаСчетчиковСПоказаниями.Разрядность = втМаксЗначенияПоказаний.Разрядность
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыПоверки КАК втДатыПоверки
	|		ПО ТаблицаСчетчиковСПоказаниями.Счетчик = втДатыПоверки.Счетчик
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Услуга,
	|	Счетчик";
	
	Запрос.УстановитьПараметр("ДатаНач",                               НачалоМесяца(ПериодПросмотра) - 1);
	Запрос.УстановитьПараметр("ДатаНачМесяца",                         НачалоМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("ДатаКон",                               КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("Организация",                           Организация);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов",                   СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("СписокУслуг",                           СписокУслуг);
	Запрос.УстановитьПараметр("ТаблицаМаксЗначений",                   ТаблицаМаксЗначений);
	Запрос.УстановитьПараметр("ОбщийСписокОбъектов",                   ОбщийСписокОбъектов);
	Запрос.УстановитьПараметр("УчитыватьПоказанияЗаПредыдущиеПериоды", УчитыватьПоказанияЗаПредыдущиеПериоды);
	
	ТаблицаСчетчиков = Запрос.Выполнить().Выгрузить();
	ТаблицаСчетчиков.Индексы.Добавить("ЛицевойСчет");
	
	Возврат ТаблицаСчетчиков;
	
КонецФункции // ПолучитьДанныеПоСчетчикам()

// Получает сведения о показаниях счетчиков, введенных за указанный период.
//
Функция ПолучитьДанныеПоСчетчикамЗаВыбранныйПериод(Организация, ПериодПросмотра, СписокЛицевыхСчетов, ТаблицаОбъектов, СписокУслуг) Экспорт
	
	Возврат ПолучитьДанныеПоСчетчикам(Организация, ПериодПросмотра, СписокЛицевыхСчетов, ТаблицаОбъектов, СписокУслуг, Ложь);
	
КонецФункции

// Формирует таблицу начисления по списку лицевых счетов.
//
// Параметры:
//  СтруктураНастроек – структура пользовательских настроек.
//  ОсобыеНастройкиВыгрузкиНачислений - дополнительный параметр для отбора.
//  КодыВидовНачисленийОбщ - таблица кодов видов начислений.
//
// Возвращаемое значение:
//  ТаблицаЗначений - выборка начислений из регистра накопления "Начисления".
//
Функция ПолучитьТаблицуНачисления(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений, СтруктураОбщихТаблиц)
	
	Организация                = СтруктураНастроек.Организация;
	ПериодПросмотра            = СтруктураНастроек.ПериодПросмотра;
	СписокЛицевыхСчетов        = СтруктураНастроек.СписокЛицевыхСчетов;
	СписокУслуг                = ?(ОсобыеНастройкиВыгрузкиНачислений, СтруктураНастроек.СписокУслугВыгружатьНачисленияОбщ, СтруктураНастроек.СписокУслуг);
	СписокКоммунальныхРесурсов = СтруктураНастроек.СписокКоммунальныхРесурсов;
	КодыВидовНачисленийОбщ     = СтруктураОбщихТаблиц.КодыВидовНачисленийОбщ;
	УслугиБезОДН               = СтруктураНастроек.УслугиБезОДН.ВыгрузитьКолонку("Услуга");
	
	ЗапросНачисления = Новый Запрос;
	ЗапросНачисления.Текст =
	"ВЫБРАТЬ
	|	КодыВидовНачисленийОбщ.ЛицевойСчет КАК ЛицевойСчет,
	|	КодыВидовНачисленийОбщ.Услуга КАК Услуга,
	|	КодыВидовНачисленийОбщ.Тариф КАК Тариф,
	|	КодыВидовНачисленийОбщ.ВидТарифа КАК ВидТарифа,
	|	КодыВидовНачисленийОбщ.КодВидаНачисленийИПУ КАК КодВидаНачисленийИПУ,
	|	КодыВидовНачисленийОбщ.КодВидаНачисленийОПУ КАК КодВидаНачисленийОПУ
	|ПОМЕСТИТЬ втКодыВидовНачисленийОбщ
	|ИЗ
	|	&КодыВидовНачисленийОбщ КАК КодыВидовНачисленийОбщ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги КАК ВидУслуги,
	|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый КАК НовыйВидУслуги
	|ПОМЕСТИТЬ втНовыеВидыУслуг
	|ИЗ
	|	РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ЗначенияПовышающихКоэффициентовДляНачисленияПоНормативуСрезПоследних.Услуга КАК Услуга,
	|	УПЖКХ_ЗначенияПовышающихКоэффициентовДляНачисленияПоНормативуСрезПоследних.ПовышающийКоэффициент КАК ПовышающийКоэффициент
	|ПОМЕСТИТЬ втПовышающиеКоэффициенты
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗначенияПовышающихКоэффициентовДляНачисленияПоНормативу.СрезПоследних(&КонецМесяца, Услуга В (&СписокУслуг)) КАК УПЖКХ_ЗначенияПовышающихКоэффициентовДляНачисленияПоНормативуСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга КАК Услуга,
	|	УПЖКХ_Начисления.ВидТарифа КАК ВидТарифа,
	|	УПЖКХ_Начисления.Тариф КАК Тариф,
	|	МАКСИМУМ(УПЖКХ_Начисления.Окончание) КАК Окончание
	|ПОМЕСТИТЬ втДатыОкончанияНачисленийРазрезеТарифов
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И УПЖКХ_Начисления.Организация = &Организация
	|	И УПЖКХ_Начисления.ЛицевойСчет В(&СписокЛицевыхСчетов)
	|	И УПЖКХ_Начисления.Услуга В(&СписокУслуг)
	|	И НЕ УПЖКХ_Начисления.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
	|	И НЕ УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|	И ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(УПЖКХ_Начисления.Регистратор) = ТИП(Документ.КВП_РегистрацияОплаты)
	|				ТОГДА НЕ УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|						И НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга,
	|	УПЖКХ_Начисления.ВидТарифа,
	|	УПЖКХ_Начисления.Тариф
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЛицевойСчет,
	|	Услуга,
	|	ВидТарифа,
	|	Тариф
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга КАК Услуга,
	|	УПЖКХ_Начисления.Услуга.ВидУслуги КАК ВидУслуги,
	|	УПЖКХ_Начисления.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
	|	УПЖКХ_Начисления.СоставнаяУслуга КАК СоставнаяУслуга,
	|	УПЖКХ_Начисления.Тариф КАК Тариф,
	|	УПЖКХ_Начисления.ВидТарифа КАК ВидТарифа,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|				ТОГДА -УПЖКХ_Начисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Льгота,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
	|					И УПЖКХ_Начисления.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Перерасчет,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_Начисления.ТипНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Индивидуальное)
	|					ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|				ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПерерасчетИнд,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_Начисления.ТипНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Общедомовое)
	|				ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПерерасчетОДН,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента))
	|				ТОГДА УПЖКХ_Начисления.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИПУ,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_Начисления.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоОПУ,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента))
	|					И НЕ УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|				ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоИПУ,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоОПУ,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|					ИЛИ УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента))
	|				ТОГДА 0
	|			ИНАЧЕ УПЖКХ_Начисления.СуммаНачисления
	|		КОНЕЦ) КАК Начислено,
	|	СУММА(0) КАК КОплатеИПУ,
	|	СУММА(0) КАК КОплатеОПУ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугаЯвляетсяСоставной,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугаПоСчетчикам,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугаСоставнаяПоСчетчикам,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УПЖКХ_Начисления.Регистратор) = ТИП(Документ.УПЖКХ_ЗаявлениеНаРассрочку)
	|				И УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоРассрочка,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.Услуга.КоммунальныйРесурс В (&СписокКоммунальныхРесурсов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОДНОтноситсяКОбщемуИмуществу,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|				ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПовышения,
	|	ВЫБОР
	|		КОГДА (УПЖКХ_Начисления.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
	|					ИЛИ УПЖКХ_Начисления.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
	|						И УПЖКХ_Начисления.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
	|					ИЛИ УПЖКХ_Начисления.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади)
	|					ИЛИ УПЖКХ_Начисления.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
	|						И УПЖКХ_Начисления.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
	|					И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Начисления.Количество) > 1
	|				ИЛИ УПЖКХ_Начисления.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления)
	|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Начисления.Договор) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИмеетсяСоставнойИндивидуальныйРасход,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК СоставноеКоличествоИнд,
	|	ЕСТЬNULL(УПЖКХ_Начисления.СоставнаяУслуга.ВидУслуги, ЗНАЧЕНИЕ(Справочник.КВП_ВидыУслуг.ПустаяСсылка)) КАК ВидСоставнойУслуги,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоКоммунальнаяУслуга
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И УПЖКХ_Начисления.Организация = &Организация
	|	И УПЖКХ_Начисления.ЛицевойСчет В(&СписокЛицевыхСчетов)
	|	И УПЖКХ_Начисления.Услуга В(&СписокУслуг)
	|	И НЕ УПЖКХ_Начисления.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
	|	И НЕ УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|	И ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(УПЖКХ_Начисления.Регистратор) = ТИП(Документ.КВП_РегистрацияОплаты)
	|				ТОГДА НЕ УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|						И НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга,
	|	УПЖКХ_Начисления.СоставнаяУслуга,
	|	УПЖКХ_Начисления.Тариф,
	|	УПЖКХ_Начисления.ВидТарифа,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|				ИЛИ УПЖКХ_Начисления.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	УПЖКХ_Начисления.Услуга.ВидУслуги.ЕдиницаИзмерения,
	|	УПЖКХ_Начисления.Услуга.ВидУслуги,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УПЖКХ_Начисления.Регистратор) = ТИП(Документ.УПЖКХ_ЗаявлениеНаРассрочку)
	|				И УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.Услуга.КоммунальныйРесурс В (&СписокКоммунальныхРесурсов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ЕСТЬNULL(УПЖКХ_Начисления.СоставнаяУслуга.ВидУслуги, ЗНАЧЕНИЕ(Справочник.КВП_ВидыУслуг.ПустаяСсылка)),
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	УПЖКХ_Начисления.Услуга.СпособРасчета,
	|	УПЖКХ_Начисления.СоставнаяУслуга.СпособРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет КАК ЛицевойСчет,
	|	втНачисления.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА втНовыеВидыУслуг.НовыйВидУслуги ЕСТЬ NULL
	|			ТОГДА втНачисления.ВидУслуги
	|		ИНАЧЕ втНовыеВидыУслуг.НовыйВидУслуги
	|	КОНЕЦ КАК ВидУслуги,
	|	ВЫБОР
	|		КОГДА втНовыеВидыУслуг.НовыйВидУслуги ЕСТЬ NULL
	|			ТОГДА втНачисления.ВидУслуги.СпособВыводаВКвитанциях
	|		ИНАЧЕ втНовыеВидыУслуг.НовыйВидУслуги.СпособВыводаВКвитанциях
	|	КОНЕЦ КАК СпособВыводаВКвитанциях,
	|	втНачисления.ЕдИзм КАК ЕдИзм,
	|	втНачисления.ЕдИзм.Наименование КАК ЕдИзмНаименование,
	|	втНачисления.СоставнаяУслуга КАК СоставнаяУслуга,
	|	втНачисления.ВидСоставнойУслуги КАК ВидСоставнойУслуги,
	|	втНачисления.Тариф КАК Тариф,
	|	втНачисления.ВидТарифа КАК ВидТарифа,
	|	МАКСИМУМ(втНачисления.Льгота) КАК Льгота,
	|	МАКСИМУМ(втНачисления.Перерасчет) КАК Перерасчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втНачисления.Услуга В (&УслугиБезОДН)
	|				ТОГДА втНачисления.КоличествоИПУ + втНачисления.КоличествоОПУ
	|			ИНАЧЕ втНачисления.КоличествоИПУ
	|		КОНЕЦ) КАК КоличествоИПУ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втНачисления.Услуга В (&УслугиБезОДН)
	|				ТОГДА 0
	|			ИНАЧЕ втНачисления.КоличествоОПУ
	|		КОНЕЦ) КАК КоличествоОПУ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втНачисления.Услуга В (&УслугиБезОДН)
	|				ТОГДА втНачисления.НачисленоИПУ + втНачисления.НачисленоОПУ
	|			ИНАЧЕ втНачисления.НачисленоИПУ
	|		КОНЕЦ) КАК НачисленоИПУ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втНачисления.Услуга В (&УслугиБезОДН)
	|				ТОГДА 0
	|			ИНАЧЕ втНачисления.НачисленоОПУ
	|		КОНЕЦ) КАК НачисленоОПУ,
	|	МАКСИМУМ(втНачисления.Начислено) КАК Начислено,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втНачисления.Услуга В (&УслугиБезОДН)
	|				ТОГДА втНачисления.КОплатеИПУ + втНачисления.КОплатеОПУ
	|			ИНАЧЕ втНачисления.КОплатеИПУ
	|		КОНЕЦ) КАК КОплатеИПУ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втНачисления.Услуга В (&УслугиБезОДН)
	|				ТОГДА 0
	|			ИНАЧЕ втНачисления.КОплатеОПУ
	|		КОНЕЦ) КАК КОплатеОПУ,
	|	втНачисления.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
	|	втНачисления.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
	|	втНачисления.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
	|	втНачисления.ЛицевойСчет.Адрес КАК Помещение,
	|	втНачисления.Услуга.Код КАК КодУслуги,
	|	втНачисления.ВидУслуги.Код КАК КодВидаУслуги,
	|	втНачисления.ЭтоРассрочка КАК ЭтоРассрочка,
	|	втНачисления.ОДНОтноситсяКОбщемуИмуществу КАК ОДНОтноситсяКОбщемуИмуществу,
	|	МАКСИМУМ(ЕСТЬNULL(втПовышающиеКоэффициенты.ПовышающийКоэффициент, 0)) КАК ПовышающийКоэффициент,
	|	МАКСИМУМ(втНачисления.СуммаПовышения) КАК СуммаПовышения,
	|	МАКСИМУМ(втНачисления.ИмеетсяСоставнойИндивидуальныйРасход) КАК ИмеетсяСоставнойИндивидуальныйРасход,
	|	втНачисления.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд,
	|	МАКСИМУМ(втНачисления.ПерерасчетИнд) КАК ПерерасчетИнд,
	|	МАКСИМУМ(втНачисления.ПерерасчетОДН) КАК ПерерасчетОДН,
	|	втНачисления.ЭтоКоммунальнаяУслуга КАК ЭтоКоммунальнаяУслуга,
	|	ЕСТЬNULL(втКодыВидовНачисленийОбщ.КодВидаНачисленийИПУ, """") КАК КодВидаНачисленийИПУ,
	|	ЕСТЬNULL(втКодыВидовНачисленийОбщ.КодВидаНачисленийОПУ, """") КАК КодВидаНачисленийОПУ,
	|	ИСТИНА КАК УслугаСНачислениями,
	|	ЛОЖЬ КАК СтрокаДляОбщегоИмущества,
	|	ЕСТЬNULL(втДатыОкончанияНачисленийРазрезеТарифов.Окончание, ДАТАВРЕМЯ(1, 1, 1)) КАК Окончание
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНовыеВидыУслуг КАК втНовыеВидыУслуг
	|		ПО втНачисления.ВидУслуги = втНовыеВидыУслуг.ВидУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПовышающиеКоэффициенты КАК втПовышающиеКоэффициенты
	|		ПО втНачисления.Услуга = втПовышающиеКоэффициенты.Услуга
	|			И (НЕ втНачисления.СуммаПовышения = 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыОкончанияНачисленийРазрезеТарифов КАК втДатыОкончанияНачисленийРазрезеТарифов
	|		ПО втНачисления.ЛицевойСчет = втДатыОкончанияНачисленийРазрезеТарифов.ЛицевойСчет
	|			И втНачисления.Услуга = втДатыОкончанияНачисленийРазрезеТарифов.Услуга
	|			И втНачисления.ВидТарифа = втДатыОкончанияНачисленийРазрезеТарифов.ВидТарифа
	|			И втНачисления.Тариф = втДатыОкончанияНачисленийРазрезеТарифов.Тариф
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКодыВидовНачисленийОбщ КАК втКодыВидовНачисленийОбщ
	|		ПО втНачисления.ЛицевойСчет = втКодыВидовНачисленийОбщ.ЛицевойСчет
	|			И втНачисления.Услуга = втКодыВидовНачисленийОбщ.Услуга
	|			И втНачисления.ВидТарифа = втКодыВидовНачисленийОбщ.ВидТарифа
	|			И втНачисления.Тариф = втКодыВидовНачисленийОбщ.Тариф
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисления.Услуга,
	|	втНачисления.ЕдИзм,
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.СоставнаяУслуга,
	|	втНачисления.ВидСоставнойУслуги,
	|	втНачисления.УслугаЯвляетсяСоставной,
	|	втНачисления.УслугаПоСчетчикам,
	|	втНачисления.УслугаСоставнаяПоСчетчикам,
	|	втНачисления.ВидТарифа,
	|	втНачисления.Тариф,
	|	втНачисления.ЛицевойСчет.Адрес,
	|	втНачисления.Услуга.Код,
	|	втНачисления.ВидУслуги.Код,
	|	втНачисления.ЭтоРассрочка,
	|	втНачисления.ОДНОтноситсяКОбщемуИмуществу,
	|	втНачисления.СоставноеКоличествоИнд,
	|	втНачисления.ЭтоКоммунальнаяУслуга,
	|	ЕСТЬNULL(втКодыВидовНачисленийОбщ.КодВидаНачисленийИПУ, """"),
	|	ЕСТЬNULL(втКодыВидовНачисленийОбщ.КодВидаНачисленийОПУ, """"),
	|	ЕСТЬNULL(втДатыОкончанияНачисленийРазрезеТарифов.Окончание, ДАТАВРЕМЯ(1, 1, 1)),
	|	втНачисления.ЕдИзм.Наименование,
	|	ВЫБОР
	|		КОГДА втНовыеВидыУслуг.НовыйВидУслуги ЕСТЬ NULL
	|			ТОГДА втНачисления.ВидУслуги
	|		ИНАЧЕ втНовыеВидыУслуг.НовыйВидУслуги
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА втНовыеВидыУслуг.НовыйВидУслуги ЕСТЬ NULL
	|			ТОГДА втНачисления.ВидУслуги.СпособВыводаВКвитанциях
	|		ИНАЧЕ втНовыеВидыУслуг.НовыйВидУслуги.СпособВыводаВКвитанциях
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.Услуга,
	|	ЕСТЬNULL(втДатыОкончанияНачисленийРазрезеТарифов.Окончание, ДАТАВРЕМЯ(1, 1, 1)),
	|	втНачисления.Тариф";
	
	ЗапросНачисления.УстановитьПараметр("НачалоМесяца",               НачалоМесяца(ПериодПросмотра));
	ЗапросНачисления.УстановитьПараметр("КонецМесяца",                КонецМесяца(ПериодПросмотра));
	ЗапросНачисления.УстановитьПараметр("Организация",                Организация);
	ЗапросНачисления.УстановитьПараметр("СписокЛицевыхСчетов",        СписокЛицевыхСчетов);
	ЗапросНачисления.УстановитьПараметр("СписокУслуг",                СписокУслуг);
	ЗапросНачисления.УстановитьПараметр("УслугиБезОДН",               УслугиБезОДН);
	ЗапросНачисления.УстановитьПараметр("СписокКоммунальныхРесурсов", СписокКоммунальныхРесурсов);
	ЗапросНачисления.УстановитьПараметр("КодыВидовНачисленийОбщ",     КодыВидовНачисленийОбщ);
	
	ТаблицаНачисления = ЗапросНачисления.Выполнить().Выгрузить();
	
	ТаблицаНачисления.Индексы.Добавить("ЛицевойСчет");
	
	Возврат ТаблицаНачисления;
	
КонецФункции // ПолучитьТаблицуНачисления()

// Формирует таблицу со сведениями о начислении по добровольному страхованию.
Функция ПолучитьТаблицуДобровольногоСтрахования(Организация, ПериодПросмотра, СписокЛицевыхСчетов, СписокУслуг, ВестиУчетНачисленийПоДобровольномуСтрахованию, УслугаДобровольногоСтрахования)
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию И Не СписокУслуг.НайтиПоЗначению(УслугаДобровольногоСтрахования) = Неопределено Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.Услуга,
		|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.МесяцНачисления,
		|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.Тариф,
		|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.КоличествоОборот КАК Количество,
		|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.СуммаНачисленияОборот КАК СуммаНачисления,
		|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.Услуга.ВидУслуги КАК ВидУслуги
		|ИЗ
		|	РегистрНакопления.УПЖКХ_НачисленияПоДобровольномуСтрахованию.Обороты(
		|			&НачалоМесяца,
		|			&КонецМесяца,
		|			,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И Услуга = &УслугаДобровольногоСтрахования
		|				И КОНЕЦПЕРИОДА(МесяцНачисления, МЕСЯЦ) = &МесяцНачисления) КАК УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты";
		Запрос.УстановитьПараметр("НачалоМесяца",                   НачалоМесяца(ПериодПросмотра));
		Запрос.УстановитьПараметр("КонецМесяца",                    КонецМесяца(ПериодПросмотра));
		Запрос.УстановитьПараметр("Организация",                    Организация);
		Запрос.УстановитьПараметр("СписокЛицевыхСчетов",            СписокЛицевыхСчетов);
		Запрос.УстановитьПараметр("УслугаДобровольногоСтрахования", УслугаДобровольногоСтрахования);
		Запрос.УстановитьПараметр("МесяцНачисления",                КонецМесяца(ДобавитьМесяц(ПериодПросмотра, 2)));
		
		Таблица = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("ЛицевойСчет",            Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
		Таблица.Колонки.Добавить("Услуга",                 Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		Таблица.Колонки.Добавить("ВидУслуги",              Новый ОписаниеТипов("СправочникСсылка.КВП_ВидыУслуг"));
		Таблица.Колонки.Добавить("ЕдИзм",                  Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
		Таблица.Колонки.Добавить("МесяцНачисления",        Новый ОписаниеТипов("Дата"));
		Таблица.Колонки.Добавить("Тариф",                  Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("КоличествоОборот",       Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("СуммаНачисления",        Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Таблица.Индексы.Добавить("ЛицевойСчет");
	
	Возврат Таблица;
	
КонецФункции

// Формирует таблицу с информацией о льготах, начисленных справочно.
//
// Параметры:
//  Организация – организация, на которую формируется квитанция
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция
//  СписокЛицевыхСчетов - список лицевых счетов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со льготами.
//
Функция ПолучитьТаблицуЛьготСправочно(Организация, ПериодПросмотра, СписокЛицевыхСчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет,
	|	КВП_НачисленныеЛьготыОбороты.Услуга,
	|	СУММА(КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот) КАК Льгота
	|ИЗ
	|	РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НачисленныеЛьготыОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет,
	|	КВП_НачисленныеЛьготыОбороты.Услуга";
	Запрос.УстановитьПараметр("НачалоМесяца",        НачалоМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("КонецМесяца",         КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Индексы.Добавить("ЛицевойСчет");
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуЛьготСправочно()

// Формирует таблицу с показаниями и расходом по ИПУ, ОПУ и коммунальным услугам.
//
// Параметры:
//  СтруктураНастроек – структура пользовательских настроек.
//  СтруктураОбщихТаблиц - структура общих данных.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с расходом по счетчкам.
//
Функция ПолучитьТаблицуРасходаПоСчетчикамИКоммунальнымУслугамПоЗданиям(СтруктураНастроек, СтруктураОбщихТаблиц)
	
	Организация           = СтруктураНастроек.Организация;
	ПериодПросмотра       = СтруктураНастроек.ПериодПросмотра;
	СписокЛицевыхСчетов   = СтруктураНастроек.СписокЛицевыхСчетов;
	СписокЗданий          = СтруктураНастроек.СписокЗданий;
	СписокУслуг           = СтруктураНастроек.СписокУслуг;
	УслугиБезОДН          = СтруктураНастроек.УслугиБезОДН;
	ТаблицаЗависимыхУслуг = СтруктураОбщихТаблиц.ТаблицаЗависимыхУслуг;
	ТаблицаОбъектов       = СтруктураНастроек.ТаблицаОбъектов;
	
	// 1. Получаем список общедомовых услуг.
	Отбор = Новый Структура("УслугаОбщедомовогоСчетчика", СписокУслуг);
	ДопСписокУслугБазовых = ПолучитьТаблицуУслугОбщедомовогоСчетчика(Отбор).ВыгрузитьКолонку("Услуга");
	
	Отбор = Новый Структура("Услуга", СписокУслуг);
	ДопСписокУслугОбщедомовых = ПолучитьТаблицуУслугОбщедомовогоСчетчика(Отбор).ВыгрузитьКолонку("УслугаОбщедомовогоСчетчика");
	
	// 2. Добавляем найденные услуги в список услуг для отбора.
	Для Каждого ТекУслуга Из ДопСписокУслугБазовых Цикл
		СписокУслуг.Добавить(ТекУслуга);
	КонецЦикла;
	Для Каждого ТекУслуга Из ДопСписокУслугОбщедомовых Цикл
		СписокУслуг.Добавить(ТекУслуга);
	КонецЦикла;
	
	// 3. Получаем список всех лицевых счетов по зданиям.
	СписокВсехЛС = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(СписокЗданий, НачалоМесяца(ПериодПросмотра), КонецМесяца(ПериодПросмотра), Ложь);
	
	// 4. Получаем список услуг без ОДН.
	СписокУслугБезОДН = УслугиБезОДН.ВыгрузитьКолонку("Услуга");
	
	// Параметр "ЭтоКоммунальнаяУслугаНеПоПУ" определяет, что текущая услуга по зданию является коммунальной услугой, расход по
	// которой рассчитывается не по показаниям счетчиков. Расход по таким услугам необходимо выводить в платежных документах, в
	// разделе "Справочная информация".
	
	ЗапросПУ = Новый Запрос;
	ЗапросПУ.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗависимыхУслуг.Объект КАК Объект,
	|	ТаблицаЗависимыхУслуг.Услуга КАК Услуга,
	|	ТаблицаЗависимыхУслуг.УслугаОснование КАК УслугаОснование
	|ПОМЕСТИТЬ врТаблицаЗависимыхУслуг
	|ИЗ
	|	&ТаблицаЗависимыхУслуг КАК ТаблицаЗависимыхУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаОбъектов.Здание КАК Здание
	|ПОМЕСТИТЬ врТаблицаОбъектов
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаОбъектов.Здание КАК Здание,
	|	врТаблицаЗависимыхУслуг.Услуга КАК Услуга,
	|	врТаблицаЗависимыхУслуг.УслугаОснование КАК УслугаОснование
	|ПОМЕСТИТЬ врТаблицаЗданийСЗависимымиУслугамиВнешниеДанные
	|ИЗ
	|	врТаблицаОбъектов КАК врТаблицаОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТаблицаЗависимыхУслуг КАК врТаблицаЗависимыхУслуг
	|		ПО врТаблицаОбъектов.Здание = врТаблицаЗависимыхУслуг.Объект
	|ГДЕ
	|	НЕ врТаблицаЗависимыхУслуг.Объект = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
	|	И &УказыватьЗависимостьУслугВРазрезеЗданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаОбъектов.Здание КАК Здание,
	|	врТаблицаЗависимыхУслуг.Услуга КАК Услуга,
	|	врТаблицаЗависимыхУслуг.УслугаОснование КАК УслугаОснование
	|ПОМЕСТИТЬ втВсеЗданияСУказаннымиЗависимымиУслугамиПоВсемЗданиям
	|ИЗ
	|	врТаблицаЗависимыхУслуг КАК врТаблицаЗависимыхУслуг,
	|	врТаблицаОбъектов КАК врТаблицаОбъектов
	|ГДЕ
	|	врТаблицаЗависимыхУслуг.Объект = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
	|	И &УказыватьЗависимостьУслугВРазрезеЗданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаОбъектов.Здание КАК Здание,
	|	врТаблицаЗависимыхУслуг.Услуга КАК Услуга,
	|	врТаблицаЗависимыхУслуг.УслугаОснование КАК УслугаОснование
	|ПОМЕСТИТЬ втВсеЗданияСоВсемиЗависимымиУслугами
	|ИЗ
	|	врТаблицаЗависимыхУслуг КАК врТаблицаЗависимыхУслуг,
	|	врТаблицаОбъектов КАК врТаблицаОбъектов
	|ГДЕ
	|	НЕ &УказыватьЗависимостьУслугВРазрезеЗданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаЗданийСЗависимымиУслугамиВнешниеДанные.Здание КАК Здание,
	|	врТаблицаЗданийСЗависимымиУслугамиВнешниеДанные.Услуга КАК Услуга,
	|	врТаблицаЗданийСЗависимымиУслугамиВнешниеДанные.УслугаОснование КАК УслугаОснование
	|ПОМЕСТИТЬ врТаблицаЗданийСЗависимымиУслугамиПодготовка
	|ИЗ
	|	врТаблицаЗданийСЗависимымиУслугамиВнешниеДанные КАК врТаблицаЗданийСЗависимымиУслугамиВнешниеДанные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втВсеЗданияСУказаннымиЗависимымиУслугамиПоВсемЗданиям.Здание,
	|	втВсеЗданияСУказаннымиЗависимымиУслугамиПоВсемЗданиям.Услуга,
	|	втВсеЗданияСУказаннымиЗависимымиУслугамиПоВсемЗданиям.УслугаОснование
	|ИЗ
	|	втВсеЗданияСУказаннымиЗависимымиУслугамиПоВсемЗданиям КАК втВсеЗданияСУказаннымиЗависимымиУслугамиПоВсемЗданиям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втВсеЗданияСоВсемиЗависимымиУслугами.Здание,
	|	втВсеЗданияСоВсемиЗависимымиУслугами.Услуга,
	|	втВсеЗданияСоВсемиЗависимымиУслугами.УслугаОснование
	|ИЗ
	|	втВсеЗданияСоВсемиЗависимымиУслугами КАК втВсеЗданияСоВсемиЗависимымиУслугами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаЗданийСЗависимымиУслугамиПодготовка.Здание КАК Здание,
	|	врТаблицаЗданийСЗависимымиУслугамиПодготовка.Услуга КАК Услуга,
	|	врТаблицаЗданийСЗависимымиУслугамиПодготовка.УслугаОснование КАК УслугаОснование
	|ПОМЕСТИТЬ врТаблицаЗданийСЗависимымиУслугами
	|ИЗ
	|	врТаблицаЗданийСЗависимымиУслугамиПодготовка КАК врТаблицаЗданийСЗависимымиУслугамиПодготовка
	|
	|СГРУППИРОВАТЬ ПО
	|	врТаблицаЗданийСЗависимымиУслугамиПодготовка.Здание,
	|	врТаблицаЗданийСЗависимымиУслугамиПодготовка.Услуга,
	|	врТаблицаЗданийСЗависимымиУслугамиПодготовка.УслугаОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Начисления.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	УПЖКХ_Начисления.Услуга КАК Услуга,
	|	УПЖКХ_Начисления.ВидТарифа КАК ВидТарифа,
	|	ИСТИНА КАК ЭтоРасходПоПУ,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|				ТОГДА УПЖКХ_Начисления.Количество
	|			КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|				ТОГДА -УПЖКХ_Начисления.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИндПУ,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|				ТОГДА УПЖКХ_Начисления.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИндНорма,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_Начисления.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоОПУ,
	|	СУММА(УПЖКХ_Начисления.КоличествоУчетное) КАК КоличествоУчетное
	|ПОМЕСТИТЬ втПотребление
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.Период >= &НачалоМесяца
	|	И УПЖКХ_Начисления.Период <= &КонецМесяца
	|	И УПЖКХ_Начисления.Организация = &Организация
	|	И УПЖКХ_Начисления.ЛицевойСчет В(&СписокВсехЛС)
	|	И УПЖКХ_Начисления.Услуга В(&СписокУслуг)
	|	И УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|	И УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_Начисления.ВидТарифа,
	|	УПЖКХ_Начисления.ЛицевойСчет.Адрес.Владелец,
	|	УПЖКХ_Начисления.Услуга
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	ЛОЖЬ,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0)
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокВсехЛС)
	|				И Услуга В (&СписокУслуг)
	|				И НЕ Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ФактическиеЗатраты), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.СервисныеУслуги))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОбороты.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОбороты.Услуга КАК Услуга,
	|	УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОбороты.ВидТарифа КАК ВидТарифа,
	|	СУММА(УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОбороты.КоличествоРасход) КАК КоличествоРасхождения
	|ПОМЕСТИТЬ втРасхождения
	|ИЗ
	|	РегистрНакопления.УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			,
	|			ЛицевойСчет В (&СписокВсехЛС)
	|				И Услуга В (&СписокУслуг)) КАК УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОбороты.ЛицевойСчет.Адрес.Владелец,
	|	УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОбороты.Услуга,
	|	УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативуОбороты.ВидТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты.Объект КАК Здание,
	|	УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты.Услуга КАК Услуга,
	|	УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты.ВидПоказания КАК ВидТарифа,
	|	СУММА(УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты.ПоказаниеПриход) КАК РасходПоОПУ
	|ПОМЕСТИТЬ УПЖКХ_РасчетПриборовУчета
	|ИЗ
	|	РегистрНакопления.УПЖКХ_РасчетПриборовУчета.ОстаткиИОбороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			,
	|			,
	|			Объект ССЫЛКА Справочник.КВП_Здания
	|				И Объект В (&СписокЗданий)
	|				И Услуга В (&СписокУслуг)) КАК УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты.Объект,
	|	УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты.Услуга,
	|	УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты.ВидПоказания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты.Объект.Владелец,
	|	УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты.Услуга,
	|	УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты.ВидПоказания,
	|	СУММА(УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты.ПоказаниеПриход)
	|ИЗ
	|	РегистрНакопления.УПЖКХ_РасчетПриборовУчета.ОстаткиИОбороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			,
	|			,
	|			Объект ССЫЛКА Справочник.КВП_Подъезды
	|				И Объект.Владелец В (&СписокЗданий)
	|				И Услуга В (&СписокУслуг)) КАК УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты.Объект.Владелец,
	|	УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты.Услуга,
	|	УПЖКХ_РасчетПриборовУчетаОстаткиИОбороты.ВидПоказания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа КАК ВидТарифа,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК РасходПоОПУ
	|ПОМЕСТИТЬ УПЖКХ_Начисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			,
	|			Организация = &Организация
	|				И (ЛицевойСчет.Адрес.Владелец, Услуга, УслугаОснование) В
	|					(ВЫБРАТЬ
	|						врТаблицаЗданийСЗависимымиУслугами.Здание,
	|						врТаблицаЗданийСЗависимымиУслугами.Услуга,
	|						врТаблицаЗданийСЗависимымиУслугами.УслугаОснование
	|					ИЗ
	|						врТаблицаЗданийСЗависимымиУслугами КАК врТаблицаЗданийСЗависимымиУслугами)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_РасчетПриборовУчета.Здание КАК Здание,
	|	УПЖКХ_РасчетПриборовУчета.Услуга КАК Услуга,
	|	УПЖКХ_РасчетПриборовУчета.ВидТарифа КАК ВидТарифа,
	|	УПЖКХ_РасчетПриборовУчета.РасходПоОПУ КАК РасходПоОПУ
	|ПОМЕСТИТЬ втРасходПоОПУПодготовка
	|ИЗ
	|	УПЖКХ_РасчетПриборовУчета КАК УПЖКХ_РасчетПриборовУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_Начисления.Здание,
	|	УПЖКХ_Начисления.Услуга,
	|	УПЖКХ_Начисления.ВидТарифа,
	|	УПЖКХ_Начисления.РасходПоОПУ
	|ИЗ
	|	УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРасходПоОПУПодготовка.Здание КАК Здание,
	|	втРасходПоОПУПодготовка.Услуга КАК Услуга,
	|	втРасходПоОПУПодготовка.ВидТарифа КАК ВидТарифа,
	|	СУММА(втРасходПоОПУПодготовка.РасходПоОПУ) КАК РасходПоОПУ
	|ПОМЕСТИТЬ втРасходПоОПУ
	|ИЗ
	|	втРасходПоОПУПодготовка КАК втРасходПоОПУПодготовка
	|
	|СГРУППИРОВАТЬ ПО
	|	втРасходПоОПУПодготовка.Здание,
	|	втРасходПоОПУПодготовка.Услуга,
	|	втРасходПоОПУПодготовка.ВидТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втПотребление.Здание, ЕСТЬNULL(втРасходПоОПУ.Здание, втРасхождения.Здание)) КАК Здание,
	|	ЕСТЬNULL(втПотребление.Услуга, ЕСТЬNULL(втРасходПоОПУ.Услуга, втРасхождения.Услуга)) КАК Услуга,
	|	ЕСТЬNULL(втПотребление.ВидТарифа, ЕСТЬNULL(втРасходПоОПУ.ВидТарифа, втРасхождения.ВидТарифа)) КАК ВидТарифа,
	|	ЕСТЬNULL(втПотребление.ЭтоРасходПоПУ, ИСТИНА) КАК ЭтоРасходПоПУ,
	|	СУММА(ЕСТЬNULL(втПотребление.КоличествоИндПУ, 0)) КАК КоличествоИндПУ,
	|	СУММА(ЕСТЬNULL(втПотребление.КоличествоИндНорма, 0)) КАК КоличествоИндНорма,
	|	СУММА(ЕСТЬNULL(втПотребление.КоличествоИндПУ, 0) + ЕСТЬNULL(втПотребление.КоличествоИндНорма, 0)) КАК КоличествоИПУ,
	|	СУММА(ЕСТЬNULL(втПотребление.КоличествоУчетное, 0)) КАК КоличествоУчетное,
	|	СУММА(ЕСТЬNULL(втПотребление.КоличествоОПУ, 0)) КАК КоличествоОПУ,
	|	СУММА(ЕСТЬNULL(втРасходПоОПУ.РасходПоОПУ, 0)) КАК РасходПоОПУ,
	|	СУММА(ЕСТЬNULL(втРасхождения.КоличествоРасхождения, 0)) КАК КоличествоРасхождения
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втПотребление КАК втПотребление
	|		ПОЛНОЕ СОЕДИНЕНИЕ втРасходПоОПУ КАК втРасходПоОПУ
	|		ПО втПотребление.Здание = втРасходПоОПУ.Здание
	|			И втПотребление.Услуга = втРасходПоОПУ.Услуга
	|			И втПотребление.ВидТарифа = втРасходПоОПУ.ВидТарифа
	|		ПОЛНОЕ СОЕДИНЕНИЕ втРасхождения КАК втРасхождения
	|		ПО втПотребление.Здание = втРасхождения.Здание
	|			И втПотребление.Услуга = втРасхождения.Услуга
	|			И втПотребление.ВидТарифа = втРасхождения.ВидТарифа
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втПотребление.Здание, ЕСТЬNULL(втРасходПоОПУ.Здание, втРасхождения.Здание)),
	|	ЕСТЬNULL(втПотребление.Услуга, ЕСТЬNULL(втРасходПоОПУ.Услуга, втРасхождения.Услуга)),
	|	ЕСТЬNULL(втПотребление.ВидТарифа, ЕСТЬNULL(втРасходПоОПУ.ВидТарифа, втРасхождения.ВидТарифа)),
	|	ЕСТЬNULL(втПотребление.ЭтоРасходПоПУ, ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.Здание КАК Здание,
	|	втИтоговая.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА НЕ втИтоговая.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
	|				И НЕ втИтоговая.ЭтоРасходПоПУ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоКоммунальнаяУслугаНеПоПУ,
	|	втИтоговая.Услуга.ВидУслуги.СпособВыводаВКвитанциях КАК СпособВыводаВКвитанциях,
	|	втИтоговая.Услуга.ВидУслуги КАК ВидУслуги,
	|	втИтоговая.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втИтоговая.ВидТарифа КАК ВидТарифа,
	|	втИтоговая.КоличествоИндПУ КАК КоличествоИндПУ,
	|	втИтоговая.КоличествоИндНорма КАК КоличествоИндНорма,
	|	ВЫБОР
	|		КОГДА втИтоговая.Услуга В (&СписокУслугБезОДН)
	|			ТОГДА втИтоговая.КоличествоИПУ + втИтоговая.КоличествоОПУ
	|		ИНАЧЕ втИтоговая.КоличествоИПУ
	|	КОНЕЦ КАК КоличествоИПУ,
	|	втИтоговая.КоличествоУчетное КАК КоличествоУчетное,
	|	ВЫБОР
	|		КОГДА втИтоговая.Услуга В (&СписокУслугБезОДН)
	|			ТОГДА 0
	|		ИНАЧЕ втИтоговая.КоличествоОПУ
	|	КОНЕЦ КАК КоличествоОПУ,
	|	ВЫБОР
	|		КОГДА втИтоговая.Услуга В (&СписокУслугБезОДН)
	|			ТОГДА 0
	|		ИНАЧЕ втИтоговая.РасходПоОПУ
	|	КОНЕЦ КАК РасходПоОПУ,
	|	втИтоговая.Услуга.Код КАК КодУслуги,
	|	втИтоговая.КоличествоРасхождения КАК КоличествоРасхождения
	|ИЗ
	|	втИтоговая КАК втИтоговая";
	
	ЗапросПУ.УстановитьПараметр("НачалоМесяца",                             НачалоМесяца(ПериодПросмотра));
	ЗапросПУ.УстановитьПараметр("КонецМесяца",                              КонецМесяца(ПериодПросмотра));
	ЗапросПУ.УстановитьПараметр("Организация",                              Организация);
	ЗапросПУ.УстановитьПараметр("СписокВсехЛС",                             СписокВсехЛС);
	ЗапросПУ.УстановитьПараметр("СписокЗданий",                             СписокЗданий);
	ЗапросПУ.УстановитьПараметр("СписокУслуг",                              СписокУслуг);
	ЗапросПУ.УстановитьПараметр("СписокУслугБезОДН",                        СписокУслугБезОДН);
	ЗапросПУ.УстановитьПараметр("ТаблицаЗависимыхУслуг",                    ТаблицаЗависимыхУслуг);
	ЗапросПУ.УстановитьПараметр("ТаблицаОбъектов",                          ТаблицаОбъектов);
	ЗапросПУ.УстановитьПараметр("УказыватьЗависимостьУслугВРазрезеЗданий",  Константы.УПЖКХ_УказыватьЗависимостьУслугВРазрезеЗданий.Получить());
	
	ТаблицаПУ = ЗапросПУ.Выполнить().Выгрузить();
	ТаблицаПУ.Индексы.Добавить("Здание");
	
	Возврат ТаблицаПУ;
	
КонецФункции // ПолучитьТаблицуРасходаПоСчетчикамИКоммунальнымУслугамПоЗданиям()

// Формирует таблицу с нормами потребления услуг по списоку л/с и списку зданий.
//
// Параметры:
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция
//  СписокЛицевыхСчетов - список лицевых счетов
//  СписокЗданий - список зданий
//  ТаблицаУслуг - таблица начисления по всем л/с отчета.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с нормами потребления.
// 
Функция ПолучитьТаблицуНорм(ПериодПросмотра, СписокЛицевыхСчетов, СписокЗданий, ТаблицаНачисления)
	
	ТаблицаУслуг = ТаблицаНачисления.Скопировать(, "Услуга");
	ТаблицаУслуг.Свернуть("Услуга"); 
	
	СписокУслуг = Новый СписокЗначений;
	СписокУслуг.ЗагрузитьЗначения(ТаблицаУслуг.ВыгрузитьКолонку("Услуга"));
	
	ЗапросНорм = Новый Запрос;
	ЗапросНорм.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК Услуга,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК Объект,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК НормаПотребления,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер КАК Размер,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Основание КАК Основание,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВидПлощадиЗдания КАК ВидПлощадиЗдания,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВидЖильцов КАК ВидЖильцов
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&КонецМесяца,
	|			(ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				ИЛИ ЛицевойСчет В (&СписокЗданий))
	|				И Услуга В (&СписокУслуг)) КАК КВП_НормыПотребленияУслугЛССрезПоследних";
	
	ЗапросНорм.УстановитьПараметр("КонецМесяца",         КонецМесяца(ПериодПросмотра));
	ЗапросНорм.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	ЗапросНорм.УстановитьПараметр("СписокУслуг",         СписокУслуг);
	ЗапросНорм.УстановитьПараметр("СписокЗданий",        СписокЗданий);
	
	ТаблицаНорм = ЗапросНорм.Выполнить().Выгрузить();
	ТаблицаНорм.Индексы.Добавить("Объект");
	
	Возврат ТаблицаНорм;
	
КонецФункции // ПолучитьТаблицуНорм()

// Получение данных о накопившихся пени.
//
// Параметры:
//  СтруктураНастроек - структура пользовательских настроек.
//  ОсобыеНастройкиВыгрузкиНачислений - дополнительный параметр для отбора.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с информацией о начисленных пени в разрезе лицевых счетов и услуг.
//
Функция ПолучитьДанныеОПени(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений)
	
	Организация                = СтруктураНастроек.Организация;
	ПериодПросмотра            = СтруктураНастроек.ПериодПросмотра;
	СписокЛицевыхСчетов        = СтруктураНастроек.СписокЛицевыхСчетов;
	СписокУслуг                = ?(ОсобыеНастройкиВыгрузкиНачислений, СтруктураНастроек.СписокУслугВыгружатьНачисленияОбщ, СтруктураНастроек.СписокУслуг);
	СписокКоммунальныхРесурсов = СтруктураНастроек.СписокКоммунальныхРесурсов;
	
	ЗапросПени = Новый Запрос();
	
	ЗапросПени.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаПени,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугаПоСчетчикам,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.КоммунальныйРесурс В (&СписокКоммунальныхРесурсов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОДНОтноситсяКОбщемуИмуществу,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоКоммунальнаяУслуга
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И Услуга В (&СписокУслуг)
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.КоммунальныйРесурс В (&СписокКоммунальныхРесурсов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет";
	
	ЗапросПени.УстановитьПараметр("ДатаНач",                    НачалоМесяца(ПериодПросмотра));
	ЗапросПени.УстановитьПараметр("ДатаКон",                    КонецМесяца(ПериодПросмотра));
	ЗапросПени.УстановитьПараметр("СписокЛицевыхСчетов",        СписокЛицевыхСчетов);
	ЗапросПени.УстановитьПараметр("СписокУслуг",                СписокУслуг);
	ЗапросПени.УстановитьПараметр("Организация",                Организация);
	ЗапросПени.УстановитьПараметр("СписокКоммунальныхРесурсов", СписокКоммунальныхРесурсов);
	
	ТаблицаПени = Новый ТаблицаЗначений;
	ТаблицаПени.Колонки.Добавить("ЛицевойСчет",                  Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаПени.Колонки.Добавить("ВидУслуги",                    Новый ОписаниеТипов("СправочникСсылка.КВП_ВидыУслуг"));
	ТаблицаПени.Колонки.Добавить("ЕдиницаИзмерения",             Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТаблицаПени.Колонки.Добавить("Услуга",                       Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаПени.Колонки.Добавить("СуммаПени",                    Новый ОписаниеТипов("Число"));
	ТаблицаПени.Колонки.Добавить("УслугаПоСчетчикам",            Новый ОписаниеТипов("Булево"));
	ТаблицаПени.Колонки.Добавить("ОДНОтноситсяКОбщемуИмуществу", Новый ОписаниеТипов("Булево"));
	ТаблицаПени.Колонки.Добавить("ЭтоКоммунальнаяУслуга",        Новый ОписаниеТипов("Булево"));
	
	ВыборкаПени = ЗапросПени.Выполнить().Выбрать();
	Пока ВыборкаПени.Следующий() Цикл
		Если НЕ ВыборкаПени.СуммаПени = 0 Тогда
			НоваяСтрока = ТаблицаПени.Добавить();
			НоваяСтрока.ЛицевойСчет                  = ВыборкаПени.ЛицевойСчет;
			НоваяСтрока.СуммаПени                    = ВыборкаПени.СуммаПени;
			НоваяСтрока.ВидУслуги                    = ВыборкаПени.ВидУслуги;
			НоваяСтрока.Услуга                       = ВыборкаПени.Услуга;
			НоваяСтрока.ЕдиницаИзмерения             = ВыборкаПени.ЕдиницаИзмерения;
			НоваяСтрока.УслугаПоСчетчикам            = ВыборкаПени.УслугаПоСчетчикам;
			НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу = ВыборкаПени.ОДНОтноситсяКОбщемуИмуществу;
			НоваяСтрока.ЭтоКоммунальнаяУслуга        = ВыборкаПени.ЭтоКоммунальнаяУслуга;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПени.Индексы.Добавить("ЛицевойСчет");
	
	Возврат ТаблицаПени;
	
КонецФункции // ПолучитьДанныеОПени()

// Получает сумму начального сальдо по каждому л/с в списке объектов.
//
// Параметры:
//  Организация – организация, на которую формируется квитанция
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция
//  СписокЛицевыхСчетов – список лицевых счетов
//  СписокУслуг - список услуг, на который формируется квитанция
//  ВыводитьНачальноеСальдо - пользовательская настройка.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями о начальном сальдо в разрезе лицевых счетов и видов услуг.
//
Функция ПолучитьДанныеОНачальномСальдо(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений)
	
	// Учитываем пени в основной квитанции.
	Если (СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням) Тогда
		НачальноеСальдоПени = 
		"ВЫБОР
		|	КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
		|		ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
		|	ИНАЧЕ 0
		|КОНЕЦ";
	// Не учитываем пени в основной квитанции.
	Иначе
		НачальноеСальдоПени = "0";
	КонецЕсли;
	
	// Получение суммарной информации о начислениях по лицевым счетам на начало месяца
	ЗапросСальдо = Новый Запрос();
	ЗапросСальдо.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.ВидУслуги КАК ВидУслуги,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|			ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугаПоСчетчикам,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачальноеСальдоБезПени,
	|	СУММА(" + НачальноеСальдоПени + ") КАК НачальноеСальдоПени,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачальноеСальдоПениДляQR,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК НачальноеСальдо,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоКоммунальнаяУслуга,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.КоммунальныйРесурс В (&СписокКоммунальныхРесурсов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОДНОтноситсяКОбщемуИмуществу
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга В (&СписокУслуг)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.ВидУслуги,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.ВидУслуги.ЕдиницаИзмерения,
	|	ВЫБОР КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|			ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.КоммунальныйРесурс В (&СписокКоммунальныхРесурсов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	ЗапросСальдо.УстановитьПараметр("Организация",                СтруктураНастроек.Организация);
	ЗапросСальдо.УстановитьПараметр("НачалоПериода",              НачалоМесяца(СтруктураНастроек.ПериодПросмотра));
	ЗапросСальдо.УстановитьПараметр("СписокЛицевыхСчетов",        СтруктураНастроек.СписокЛицевыхСчетов);
	ЗапросСальдо.УстановитьПараметр("СписокУслуг",                ?(ОсобыеНастройкиВыгрузкиНачислений, СтруктураНастроек.СписокУслугВыгружатьНачисленияОбщ, СтруктураНастроек.СписокУслуг));
	ЗапросСальдо.УстановитьПараметр("СписокКоммунальныхРесурсов", СтруктураНастроек.СписокКоммунальныхРесурсов);
	
	ТаблицаСальдо = ЗапросСальдо.Выполнить().Выгрузить();
	ТаблицаСальдо.Индексы.Добавить("ЛицевойСчет");
	
	Возврат ТаблицаСальдо;
	
КонецФункции // ПолучитьДанныеОНачальномСальдо()

// Получает таблицу конечного и начального сальдо.
//
Функция ПолучитьТаблицуКонечногоИНачальногоСальдо(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток КАК НачальноеСальдо,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток КАК КонечноеСальдо,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПени
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&ЛицевыеСчета)
	|				И Услуга В (&СписокУслуг)
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты";
	
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(СтруктураНастроек.ПериодПросмотра));
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(СтруктураНастроек.ПериодПросмотра));
	Запрос.УстановитьПараметр("Организация",  СтруктураНастроек.Организация);
	Запрос.УстановитьПараметр("ЛицевыеСчета", СтруктураНастроек.СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("СписокУслуг",  ?(ОсобыеНастройкиВыгрузкиНачислений, СтруктураНастроек.СписокУслугВыгружатьНачисленияОбщ, СтруктураНастроек.СписокУслуг));
	
	Если СтруктураНастроек.УчитыватьПени Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)", "ИСТИНА");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Индексы.Добавить("ЛицевойСчет");
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Формирует таблицу с суммами и основаниями корректировок.
// 
// Параметры:
//  СтруктураНастроек - Структура – данные для формирования квитанций.
//  ОсобыеНастройкиВыгрузкиНачислений - Булево - дополнительный параметр для наложения условий.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица перерасчетов.
//
Функция ПолучитьТаблицуПерерасчетов(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений)
	
	Организация         = СтруктураНастроек.Организация;
	ПериодПросмотра     = СтруктураНастроек.ПериодПросмотра;
	СписокЛицевыхСчетов = СтруктураНастроек.СписокЛицевыхСчетов;
	СписокУслуг         = ?(ОсобыеНастройкиВыгрузкиНачислений, СтруктураНастроек.СписокУслугВыгружатьНачисленияОбщ, СтруктураНастроек.СписокУслуг);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК Перерасчет,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|			ТОГДА ""Перерасчет инд. начислений по показаниям счетчика""
	|		ИНАЧЕ УПЖКХ_НачисленияОбороты.ОснованиеКорректировки
	|	КОНЕЦ КАК ОснованиеКорректировки,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ВременноеОтсутствие)
	|			ТОГДА ""1""
	|		КОГДА УПЖКХ_НачисленияОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПроценту)
	|			ТОГДА ""2""
	|		КОГДА УПЖКХ_НачисленияОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка)
	|			ТОГДА ""3""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодПерерасчета,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.Наименование КАК НаименованиеВидаУслуги
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга В (&СписокУслуг)
	|				И РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
	|	УПЖКХ_НачисленияОбороты.Регистратор.Ссылка,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ВременноеОтсутствие)
	|			ТОГДА ""1""
	|		КОГДА УПЖКХ_НачисленияОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПроценту)
	|			ТОГДА ""2""
	|		КОГДА УПЖКХ_НачисленияОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка)
	|			ТОГДА ""3""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|			ТОГДА ""Перерасчет инд. начислений по показаниям счетчика""
	|		ИНАЧЕ УПЖКХ_НачисленияОбороты.ОснованиеКорректировки
	|	КОНЕЦ,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.Наименование";
	
	Запрос.УстановитьПараметр("НачалоМесяца",        НачалоМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("КонецМесяца",         КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("СписокУслуг",         СписокУслуг);
	
	ТаблицаПерерасчетов = Запрос.Выполнить().Выгрузить();
	ТаблицаПерерасчетов.Индексы.Добавить("ЛицевойСчет");
	
	Возврат ТаблицаПерерасчетов;
	
КонецФункции // ПолучитьТаблицуПерерасчетов()

// Получает таблицу со всеми поставщиками услуг.
// 
// Параметры:
//  СтруктураНастроек - структура пользовательских настроек.
//  СтруктураОбщихТаблиц - структура общих данных.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с поставщиками.
//
Функция ПолучитьТаблицуПоставщиков(СтруктураНастроек, СтруктураОбщихТаблиц, КвитанцияПоПеням = Ложь)
	
	ВидМакета = СтруктураНастроек.ВидМакета;
	Макеты    = Перечисления.УПЖКХ_ВидыПлатежныхДокументов;
	
	ТаблицаПоставщиков = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаПоставщиков.Колонки;
	
	ТипСтрока100 = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	
	Колонки.Добавить("Здание",                        Новый ОписаниеТипов("СправочникСсылка.КВП_Здания"));
	Колонки.Добавить("ЛицевойСчет",                   Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	Колонки.Добавить("Поставщик",                     Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.Организации"));
	Колонки.Добавить("Код",                           Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(9)));
	Колонки.Добавить("НаименованиеПоставщика",        ТипСтрока100);
	Колонки.Добавить("ВидУслуги",                     Новый ОписаниеТипов("СправочникСсылка.КВП_ВидыУслуг"));
	Колонки.Добавить("НаименованиеВидаУслуги",        ТипСтрока100);
	Колонки.Добавить("ЭтоСведенияТекущейОрганизации", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ЭтоСведенияПоКапРемонту",       Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("РасчетныйСчетСсылка",           Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	Колонки.Добавить("ИНН",                           ТипСтрока100);
	Колонки.Добавить("КПП",                           ТипСтрока100);
	Колонки.Добавить("РасчетныйСчет",                 ТипСтрока100);
	Колонки.Добавить("Банк",                          ТипСтрока100);
	Колонки.Добавить("БИК",                           ТипСтрока100);
	Колонки.Добавить("КоррСчет",                      ТипСтрока100);
	Колонки.Добавить("Телефон",                       ТипСтрока100);
	Колонки.Добавить("ЭлПочта",                       ТипСтрока100);
	Колонки.Добавить("Адрес",                         Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)));
	
	Если НЕ (ВидМакета = Макеты.СтандартныйКР ИЛИ ВидМакета = Макеты.Стандартный
	 ИЛИ ВидМакета = Макеты.Стандартный43Пр ИЛИ ВидМакета = Макеты.СПолямиБанка1
	 ИЛИ ВидМакета = Макеты.Москва ИЛИ ВидМакета = "ОбменССайтомЖКХ4") Тогда
		Возврат ТаблицаПоставщиков;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецМесяца",                     КонецМесяца(СтруктураНастроек.ПериодПросмотра));
	Запрос.УстановитьПараметр("Организация",                     СтруктураНастроек.Организация);
	Запрос.УстановитьПараметр("ТаблицаРСКапРемонт",              СтруктураОбщихТаблиц.ТаблицаРСКапРемонт);
	Запрос.УстановитьПараметр("ТаблицаРСЗданий",                 СтруктураОбщихТаблиц.ТаблицаРСЗданий);
	
	Запрос.УстановитьПараметр("ТаблицаИтоговыхСуммПоУслугамОбщ", ?(КвитанцияПоПеням, СтруктураОбщихТаблиц.ТаблицаПениИтоговыхСуммПоУслугамОбщ, СтруктураОбщихТаблиц.ТаблицаИтоговыхСуммПоУслугамОбщ));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги КАК ВидУслуги,
	|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый КАК НовыйВидУслуги
	|ПОМЕСТИТЬ втНовыеВидыУслуг
	|ИЗ
	|	РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИтоговыхСуммПоУслугамОбщ.Здание КАК Здание,
	|	ТаблицаИтоговыхСуммПоУслугамОбщ.Подъезд КАК Подъезд,
	|	ТаблицаИтоговыхСуммПоУслугамОбщ.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаИтоговыхСуммПоУслугамОбщ.ВидУслуги КАК ВидУслуги,
	|	ТаблицаИтоговыхСуммПоУслугамОбщ.ЭтоСведенияПоКапРемонту КАК ЭтоСведенияПоКапРемонту,
	|	ТаблицаИтоговыхСуммПоУслугамОбщ.ВсегоКОплате КАК ВсегоКОплате,
	|	ТаблицаИтоговыхСуммПоУслугамОбщ.СуммаПениДляQRСУчетомНачСальдоПени КАК СуммаПениДляQRСУчетомНачСальдоПени,
	|	ТаблицаИтоговыхСуммПоУслугамОбщ.СуммаПени КАК СуммаПени,
	|	ТаблицаИтоговыхСуммПоУслугамОбщ.НачальноеСальдо КАК НачальноеСальдо,
	|	ТаблицаИтоговыхСуммПоУслугамОбщ.СуммаНачисления КАК СуммаНачисления,
	|	ТаблицаИтоговыхСуммПоУслугамОбщ.ВсегоОплат КАК ВсегоОплат
	|ПОМЕСТИТЬ врТаблицаИтоговыхСумм
	|ИЗ
	|	&ТаблицаИтоговыхСуммПоУслугамОбщ КАК ТаблицаИтоговыхСуммПоУслугамОбщ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаИтоговыхСумм.Здание КАК Здание,
	|	врТаблицаИтоговыхСумм.Подъезд КАК Подъезд,
	|	врТаблицаИтоговыхСумм.ЛицевойСчет КАК ЛицевойСчет,
	|	врТаблицаИтоговыхСумм.ВидУслуги КАК ВидУслуги,
	|	врТаблицаИтоговыхСумм.ЭтоСведенияПоКапРемонту КАК ЭтоСведенияПоКапРемонту,
	|	СУММА(врТаблицаИтоговыхСумм.ВсегоКОплате) КАК ВсегоКОплате,
	|	СУММА(врТаблицаИтоговыхСумм.СуммаПениДляQRСУчетомНачСальдоПени) КАК СуммаПениДляQRСУчетомНачСальдоПени,
	|	СУММА(врТаблицаИтоговыхСумм.СуммаПени) КАК СуммаПени,
	|	СУММА(врТаблицаИтоговыхСумм.НачальноеСальдо) КАК НачальноеСальдо,
	|	СУММА(врТаблицаИтоговыхСумм.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(врТаблицаИтоговыхСумм.ВсегоОплат) КАК ВсегоОплат
	|ПОМЕСТИТЬ врТаблицаИтоговыхСуммПоУслугам
	|ИЗ
	|	врТаблицаИтоговыхСумм КАК врТаблицаИтоговыхСумм
	|
	|СГРУППИРОВАТЬ ПО
	|	врТаблицаИтоговыхСумм.ЛицевойСчет,
	|	врТаблицаИтоговыхСумм.Здание,
	|	врТаблицаИтоговыхСумм.ЭтоСведенияПоКапРемонту,
	|	врТаблицаИтоговыхСумм.ВидУслуги,
	|	врТаблицаИтоговыхСумм.Подъезд
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРСКапРемонт.Здание КАК Здание,
	|	ТаблицаРСКапРемонт.ВладелецСчета КАК ВладелецСчета,
	|	ТаблицаРСКапРемонт.РасчетныйСчетСсылка КАК РасчетныйСчетСсылка
	|ПОМЕСТИТЬ врТаблицаРСКапРемонт
	|ИЗ
	|	&ТаблицаРСКапРемонт КАК ТаблицаРСКапРемонт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРСЗданий.Здание КАК Здание,
	|	ТаблицаРСЗданий.ВладелецСчета КАК ВладелецСчета,
	|	ТаблицаРСЗданий.РасчетныйСчетСсылка КАК РасчетныйСчетСсылка
	|ПОМЕСТИТЬ врТаблицаРСЗданий
	|ИЗ
	|	&ТаблицаРСЗданий КАК ТаблицаРСЗданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка) КАК Здание,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Объект КАК Подъезд,
	|	ЕСТЬNULL(втНовыеВидыУслуг.НовыйВидУслуги, УПЖКХ_ПоставщикиУслугСрезПоследних.ВидУслуги) КАК ВидУслуги,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик КАК Поставщик,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет КАК ПоставщикОсновнойБанковскийСчет,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_ПоставщикиУслугСрезПоследних.ДоговорПоставщикаУслуг.УПЖКХ_ОплатаЧерезУК
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтражатьОплатыУПоставщика
	|ПОМЕСТИТЬ врПоставщикиПоПодъздамИзРегистраСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И (Объект, ВидУслуги) В
	|					(ВЫБРАТЬ
	|						врТаблицаИтоговыхСуммПоУслугам.Подъезд КАК Подъезд,
	|						ЕСТЬNULL(втНовыеВидыУслуг.ВидУслуги, врТаблицаИтоговыхСуммПоУслугам.ВидУслуги) КАК ВидУслуги
	|					ИЗ
	|						врТаблицаИтоговыхСуммПоУслугам КАК врТаблицаИтоговыхСуммПоУслугам
	|							ЛЕВОЕ СОЕДИНЕНИЕ втНовыеВидыУслуг КАК втНовыеВидыУслуг
	|							ПО
	|								врТаблицаИтоговыхСуммПоУслугам.ВидУслуги = втНовыеВидыУслуг.НовыйВидУслуги
	|					ГДЕ
	|						НЕ врТаблицаИтоговыхСуммПоУслугам.ЭтоСведенияПоКапРемонту)) КАК УПЖКХ_ПоставщикиУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНовыеВидыУслуг КАК втНовыеВидыУслуг
	|		ПО УПЖКХ_ПоставщикиУслугСрезПоследних.ВидУслуги = втНовыеВидыУслуг.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Объект КАК Здание,
	|	ЗНАЧЕНИЕ(Справочник.КВП_Подъезды.ПустаяСсылка) КАК Подъезд,
	|	ЕСТЬNULL(втНовыеВидыУслуг.НовыйВидУслуги, УПЖКХ_ПоставщикиУслугСрезПоследних.ВидУслуги) КАК ВидУслуги,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик КАК Поставщик,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет КАК РасчетныйСчетСсылка,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_ПоставщикиУслугСрезПоследних.ДоговорПоставщикаУслуг.УПЖКХ_ОплатаЧерезУК
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтражатьОплатыУПоставщика
	|ПОМЕСТИТЬ врПоставщикиПоЗданиямИПодъездамИзРегистраСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И (Объект, ВидУслуги) В
	|					(ВЫБРАТЬ
	|						врТаблицаИтоговыхСуммПоУслугам.Здание,
	|						ЕСТЬNULL(втНовыеВидыУслуг.ВидУслуги, врТаблицаИтоговыхСуммПоУслугам.ВидУслуги) КАК ВидУслуги
	|					ИЗ
	|						врТаблицаИтоговыхСуммПоУслугам КАК врТаблицаИтоговыхСуммПоУслугам
	|							ЛЕВОЕ СОЕДИНЕНИЕ втНовыеВидыУслуг КАК втНовыеВидыУслуг
	|							ПО
	|								врТаблицаИтоговыхСуммПоУслугам.ВидУслуги = втНовыеВидыУслуг.НовыйВидУслуги
	|					ГДЕ
	|						НЕ врТаблицаИтоговыхСуммПоУслугам.ЭтоСведенияПоКапРемонту)
	|				И НЕ (Поставщик, ВидУслуги) В
	|						(ВЫБРАТЬ
	|							врПоставщикиПоПодъздамИзРегистраСведений.Поставщик,
	|							врПоставщикиПоПодъздамИзРегистраСведений.ВидУслуги
	|						ИЗ
	|							врПоставщикиПоПодъздамИзРегистраСведений КАК врПоставщикиПоПодъздамИзРегистраСведений)) КАК УПЖКХ_ПоставщикиУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНовыеВидыУслуг КАК втНовыеВидыУслуг
	|		ПО УПЖКХ_ПоставщикиУслугСрезПоследних.ВидУслуги = втНовыеВидыУслуг.ВидУслуги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врПоставщикиПоПодъздамИзРегистраСведений.Здание,
	|	врПоставщикиПоПодъздамИзРегистраСведений.Подъезд,
	|	врПоставщикиПоПодъздамИзРегистраСведений.ВидУслуги,
	|	врПоставщикиПоПодъздамИзРегистраСведений.Поставщик,
	|	врПоставщикиПоПодъздамИзРегистраСведений.ПоставщикОсновнойБанковскийСчет,
	|	врПоставщикиПоПодъздамИзРегистраСведений.ОтражатьОплатыУПоставщика
	|ИЗ
	|	врПоставщикиПоПодъздамИзРегистраСведений КАК врПоставщикиПоПодъздамИзРегистраСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врПоставщикиПоПодъздамИзРегистраСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаИтоговыхСуммПоУслугам.Здание КАК Здание,
	|	врТаблицаИтоговыхСуммПоУслугам.Подъезд КАК Подъезд,
	|	врТаблицаИтоговыхСуммПоУслугам.ЛицевойСчет КАК ЛицевойСчет,
	|	врТаблицаИтоговыхСуммПоУслугам.ВидУслуги КАК ВидУслуги,
	|	врТаблицаИтоговыхСуммПоУслугам.ЭтоСведенияПоКапРемонту КАК ЭтоСведенияПоКапРемонту,
	|	врПоставщикиПоЗданиямИПодъездамИзРегистраСведений.Поставщик КАК Поставщик,
	|	врПоставщикиПоЗданиямИПодъездамИзРегистраСведений.РасчетныйСчетСсылка КАК РасчетныйСчетСсылка,
	|	врПоставщикиПоЗданиямИПодъездамИзРегистраСведений.ОтражатьОплатыУПоставщика КАК ОтражатьОплатыУПоставщика
	|ПОМЕСТИТЬ врПоставщикиИзРегистраСведений
	|ИЗ
	|	врТаблицаИтоговыхСуммПоУслугам КАК врТаблицаИтоговыхСуммПоУслугам
	|		ЛЕВОЕ СОЕДИНЕНИЕ врПоставщикиПоЗданиямИПодъездамИзРегистраСведений КАК врПоставщикиПоЗданиямИПодъездамИзРегистраСведений
	|		ПО врТаблицаИтоговыхСуммПоУслугам.Здание = врПоставщикиПоЗданиямИПодъездамИзРегистраСведений.Здание
	|			И врТаблицаИтоговыхСуммПоУслугам.ВидУслуги = врПоставщикиПоЗданиямИПодъездамИзРегистраСведений.ВидУслуги
	|ГДЕ
	|	НЕ врПоставщикиПоЗданиямИПодъездамИзРегистраСведений.Поставщик ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	врТаблицаИтоговыхСуммПоУслугам.Здание,
	|	врТаблицаИтоговыхСуммПоУслугам.Подъезд,
	|	врТаблицаИтоговыхСуммПоУслугам.ЛицевойСчет,
	|	врТаблицаИтоговыхСуммПоУслугам.ВидУслуги,
	|	врТаблицаИтоговыхСуммПоУслугам.ЭтоСведенияПоКапРемонту,
	|	врПоставщикиПоЗданиямИПодъездамИзРегистраСведений.Поставщик,
	|	врПоставщикиПоЗданиямИПодъездамИзРегистраСведений.РасчетныйСчетСсылка,
	|	врПоставщикиПоЗданиямИПодъездамИзРегистраСведений.ОтражатьОплатыУПоставщика
	|ИЗ
	|	врТаблицаИтоговыхСуммПоУслугам КАК врТаблицаИтоговыхСуммПоУслугам
	|		ЛЕВОЕ СОЕДИНЕНИЕ врПоставщикиПоЗданиямИПодъездамИзРегистраСведений КАК врПоставщикиПоЗданиямИПодъездамИзРегистраСведений
	|		ПО врТаблицаИтоговыхСуммПоУслугам.Подъезд = врПоставщикиПоЗданиямИПодъездамИзРегистраСведений.Подъезд
	|			И врТаблицаИтоговыхСуммПоУслугам.ВидУслуги = врПоставщикиПоЗданиямИПодъездамИзРегистраСведений.ВидУслуги
	|ГДЕ
	|	НЕ врПоставщикиПоЗданиямИПодъездамИзРегистраСведений.Поставщик ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врПоставщикиПоЗданиямИПодъездамИзРегистраСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Организация КАК УО,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Организация.ОсновнойБанковскийСчет КАК РасчетныйСчетСсылка,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание
	|ПОМЕСТИТЬ втСведенияДляВзаиморасчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						врТаблицаИтоговыхСуммПоУслугам.ЛицевойСчет
	|					ИЗ
	|						врТаблицаИтоговыхСуммПоУслугам КАК врТаблицаИтоговыхСуммПоУслугам)) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияДляВзаиморасчетов.Здание КАК Здание,
	|	втСведенияДляВзаиморасчетов.ЛицевойСчет КАК ЛицевойСчет,
	|	ЕСТЬNULL(врТаблицаРСКапРемонт.ВладелецСчета, втСведенияДляВзаиморасчетов.УО) КАК Поставщик,
	|	ЕСТЬNULL(врТаблицаРСКапРемонт.РасчетныйСчетСсылка, втСведенияДляВзаиморасчетов.РасчетныйСчетСсылка) КАК РасчетныйСчетСсылка,
	|	ЛОЖЬ КАК ЭтоСведенияТекущейОрганизации,
	|	ИСТИНА КАК ЭтоСведенияПоКапРемонту
	|ПОМЕСТИТЬ втСведенияДляВзаиморасчетовПоКапРемонту
	|ИЗ
	|	втСведенияДляВзаиморасчетов КАК втСведенияДляВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаРСКапРемонт КАК врТаблицаРСКапРемонт
	|		ПО втСведенияДляВзаиморасчетов.Здание = врТаблицаРСКапРемонт.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врТаблицаИтоговыхСуммПоУслугам.Здание КАК Здание,
	|	врТаблицаИтоговыхСуммПоУслугам.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫРАЗИТЬ(врТаблицаИтоговыхСуммПоУслугам.ВидУслуги КАК Справочник.КВП_ВидыУслуг) КАК ВидУслуги,
	|	врПоставщикиИзРегистраСведений.Поставщик КАК Поставщик,
	|	врПоставщикиИзРегистраСведений.РасчетныйСчетСсылка КАК РасчетныйСчетСсылка,
	|	ЛОЖЬ КАК ЭтоСведенияТекущейОрганизации,
	|	врТаблицаИтоговыхСуммПоУслугам.ЭтоСведенияПоКапРемонту КАК ЭтоСведенияПоКапРемонту,
	|	врТаблицаИтоговыхСуммПоУслугам.Подъезд КАК Подъезд,
	|	врТаблицаИтоговыхСуммПоУслугам.ВсегоКОплате КАК ВсегоКОплате,
	|	врТаблицаИтоговыхСуммПоУслугам.СуммаПениДляQRСУчетомНачСальдоПени КАК СуммаПениДляQRСУчетомНачСальдоПени,
	|	врТаблицаИтоговыхСуммПоУслугам.СуммаПени КАК СуммаПени,
	|	врТаблицаИтоговыхСуммПоУслугам.НачальноеСальдо КАК НачальноеСальдо,
	|	врТаблицаИтоговыхСуммПоУслугам.СуммаНачисления КАК СуммаНачисления,
	|	врТаблицаИтоговыхСуммПоУслугам.ВсегоОплат КАК ВсегоОплат
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	врТаблицаИтоговыхСуммПоУслугам КАК врТаблицаИтоговыхСуммПоУслугам
	|		ЛЕВОЕ СОЕДИНЕНИЕ врПоставщикиИзРегистраСведений КАК врПоставщикиИзРегистраСведений
	|		ПО врТаблицаИтоговыхСуммПоУслугам.Здание = врПоставщикиИзРегистраСведений.Здание
	|			И врТаблицаИтоговыхСуммПоУслугам.ВидУслуги = врПоставщикиИзРегистраСведений.ВидУслуги
	|ГДЕ
	|	НЕ врТаблицаИтоговыхСуммПоУслугам.ЭтоСведенияПоКапРемонту
	|	И НЕ врПоставщикиИзРегистраСведений.Поставщик ЕСТЬ NULL
	|	И врПоставщикиИзРегистраСведений.ОтражатьОплатыУПоставщика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врТаблицаИтоговыхСуммПоУслугам.Здание,
	|	врТаблицаИтоговыхСуммПоУслугам.ЛицевойСчет,
	|	врТаблицаИтоговыхСуммПоУслугам.ВидУслуги,
	|	ЕСТЬNULL(врТаблицаРСЗданий.ВладелецСчета, ЕСТЬNULL(втСведенияДляВзаиморасчетов.УО, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))),
	|	ЕСТЬNULL(врТаблицаРСЗданий.РасчетныйСчетСсылка, ЕСТЬNULL(втСведенияДляВзаиморасчетов.РасчетныйСчетСсылка, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка))),
	|	ИСТИНА,
	|	врТаблицаИтоговыхСуммПоУслугам.ЭтоСведенияПоКапРемонту,
	|	врТаблицаИтоговыхСуммПоУслугам.Подъезд,
	|	врТаблицаИтоговыхСуммПоУслугам.ВсегоКОплате,
	|	врТаблицаИтоговыхСуммПоУслугам.СуммаПениДляQRСУчетомНачСальдоПени,
	|	врТаблицаИтоговыхСуммПоУслугам.СуммаПени,
	|	врТаблицаИтоговыхСуммПоУслугам.НачальноеСальдо,
	|	врТаблицаИтоговыхСуммПоУслугам.СуммаНачисления,
	|	врТаблицаИтоговыхСуммПоУслугам.ВсегоОплат
	|ИЗ
	|	врТаблицаИтоговыхСуммПоУслугам КАК врТаблицаИтоговыхСуммПоУслугам
	|		ЛЕВОЕ СОЕДИНЕНИЕ врПоставщикиИзРегистраСведений КАК врПоставщикиИзРегистраСведений
	|		ПО врТаблицаИтоговыхСуммПоУслугам.Здание = врПоставщикиИзРегистраСведений.Здание
	|			И врТаблицаИтоговыхСуммПоУслугам.ВидУслуги = врПоставщикиИзРегистраСведений.ВидУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаРСЗданий КАК врТаблицаРСЗданий
	|		ПО врТаблицаИтоговыхСуммПоУслугам.Здание = врТаблицаРСЗданий.Здание
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияДляВзаиморасчетов КАК втСведенияДляВзаиморасчетов
	|		ПО врТаблицаИтоговыхСуммПоУслугам.ЛицевойСчет = втСведенияДляВзаиморасчетов.ЛицевойСчет
	|ГДЕ
	|	НЕ врТаблицаИтоговыхСуммПоУслугам.ЭтоСведенияПоКапРемонту
	|	И (врПоставщикиИзРегистраСведений.Поставщик ЕСТЬ NULL
	|			ИЛИ НЕ врПоставщикиИзРегистраСведений.ОтражатьОплатыУПоставщика)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врТаблицаИтоговыхСуммПоУслугам.Здание,
	|	врТаблицаИтоговыхСуммПоУслугам.ЛицевойСчет,
	|	врТаблицаИтоговыхСуммПоУслугам.ВидУслуги,
	|	ЕСТЬNULL(втСведенияДляВзаиморасчетовПоКапРемонту.Поставщик, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|	ЕСТЬNULL(втСведенияДляВзаиморасчетовПоКапРемонту.РасчетныйСчетСсылка, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)),
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	врТаблицаИтоговыхСуммПоУслугам.Подъезд,
	|	врТаблицаИтоговыхСуммПоУслугам.ВсегоКОплате,
	|	врТаблицаИтоговыхСуммПоУслугам.СуммаПениДляQRСУчетомНачСальдоПени,
	|	врТаблицаИтоговыхСуммПоУслугам.СуммаПени,
	|	врТаблицаИтоговыхСуммПоУслугам.НачальноеСальдо,
	|	врТаблицаИтоговыхСуммПоУслугам.СуммаНачисления,
	|	врТаблицаИтоговыхСуммПоУслугам.ВсегоОплат
	|ИЗ
	|	врТаблицаИтоговыхСуммПоУслугам КАК врТаблицаИтоговыхСуммПоУслугам
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияДляВзаиморасчетовПоКапРемонту КАК втСведенияДляВзаиморасчетовПоКапРемонту
	|		ПО врТаблицаИтоговыхСуммПоУслугам.Здание = втСведенияДляВзаиморасчетовПоКапРемонту.Здание
	|			И врТаблицаИтоговыхСуммПоУслугам.ЛицевойСчет = втСведенияДляВзаиморасчетовПоКапРемонту.ЛицевойСчет
	|ГДЕ
	|	врТаблицаИтоговыхСуммПоУслугам.ЭтоСведенияПоКапРемонту
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСведенияДляВзаиморасчетовПоКапРемонту
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врТаблицаИтоговыхСуммПоУслугам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врТаблицаРСЗданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врТаблицаРСКапРемонт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врПоставщикиИзРегистраСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.Здание КАК Здание,
	|	втИтоговая.Подъезд КАК Подъезд,
	|	втИтоговая.ЛицевойСчет КАК ЛицевойСчет,
	|	втИтоговая.Поставщик КАК Поставщик,
	|	втИтоговая.Поставщик.Код КАК Код,
	|	втИтоговая.Поставщик.Наименование КАК НаименованиеПоставщика,
	|	втИтоговая.Поставщик.ИНН КАК ИНН,
	|	втИтоговая.Поставщик.КПП КАК КПП,
	|	втИтоговая.ЭтоСведенияТекущейОрганизации КАК ЭтоСведенияТекущейОрганизации,
	|	втИтоговая.ЭтоСведенияПоКапРемонту КАК ЭтоСведенияПоКапРемонту,
	|	втИтоговая.РасчетныйСчетСсылка КАК РасчетныйСчетСсылка,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.НомерСчета, """") КАК СТРОКА(100)) КАК РасчетныйСчет,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.Банк.Наименование, """") КАК СТРОКА(100)) КАК Банк,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.Банк.Код, """") КАК СТРОКА(100)) КАК БИК,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.Банк.КоррСчет, """") КАК СТРОКА(100)) КАК КоррСчет,
	|	втИтоговая.ВидУслуги КАК ВидУслуги,
	|	втИтоговая.ВидУслуги.Наименование КАК НаименованиеВидаУслуги,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК Телефон,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК ЭлПочта,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ОрганизацииКонтактнаяИнформацияЮрАдрес.Представление, """") = """"
	|			ТОГДА ЕСТЬNULL(ОрганизацииКонтактнаяИнформацияЮрАдрес.Представление, """")
	|		КОГДА НЕ ЕСТЬNULL(ОрганизацииКонтактнаяИнформацияФактАдрес.Представление, """") = """"
	|			ТОГДА ЕСТЬNULL(ОрганизацииКонтактнаяИнформацияФактАдрес.Представление, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Адрес,
	|	СУММА(втИтоговая.ВсегоКОплате) КАК ВсегоКОплате,
	|	СУММА(втИтоговая.СуммаПениДляQRСУчетомНачСальдоПени) КАК СуммаПениДляQRСУчетомНачСальдоПени,
	|	СУММА(втИтоговая.СуммаПени) КАК СуммаПени,
	|	СУММА(втИтоговая.НачальноеСальдо) КАК НачальноеСальдо,
	|	СУММА(втИтоговая.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(втИтоговая.ВсегоОплат) КАК ВсегоОплат
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформацияФактАдрес
	|		ПО втИтоговая.Поставщик = ОрганизацииКонтактнаяИнформацияФактАдрес.Ссылка
	|			И (ОрганизацииКонтактнаяИнформацияФактАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (ОрганизацииКонтактнаяИнформацияФактАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформацияЮрАдрес
	|		ПО втИтоговая.Поставщик = ОрганизацииКонтактнаяИнформацияЮрАдрес.Ссылка
	|			И (ОрганизацииКонтактнаяИнформацияЮрАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (ОрганизацииКонтактнаяИнформацияЮрАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(втИтоговая.Поставщик) = ТИП(Справочник.Организации)
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговая.Поставщик,
	|	втИтоговая.ЭтоСведенияПоКапРемонту,
	|	втИтоговая.Здание,
	|	втИтоговая.Подъезд,
	|	втИтоговая.ЭтоСведенияТекущейОрганизации,
	|	втИтоговая.РасчетныйСчетСсылка,
	|	втИтоговая.ВидУслуги,
	|	втИтоговая.ЛицевойСчет,
	|	втИтоговая.Поставщик.Код,
	|	втИтоговая.Поставщик.Наименование,
	|	втИтоговая.Поставщик.ИНН,
	|	втИтоговая.Поставщик.КПП,
	|	втИтоговая.ВидУслуги.Наименование,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.НомерСчета, """") КАК СТРОКА(100)),
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.Банк.Наименование, """") КАК СТРОКА(100)),
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.Банк.Код, """") КАК СТРОКА(100)),
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.Банк.КоррСчет, """") КАК СТРОКА(100)),
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ОрганизацииКонтактнаяИнформацияЮрАдрес.Представление, """") = """"
	|			ТОГДА ЕСТЬNULL(ОрганизацииКонтактнаяИнформацияЮрАдрес.Представление, """")
	|		КОГДА НЕ ЕСТЬNULL(ОрганизацииКонтактнаяИнформацияФактАдрес.Представление, """") = """"
	|			ТОГДА ЕСТЬNULL(ОрганизацииКонтактнаяИнформацияФактАдрес.Представление, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втИтоговая.Здание,
	|	втИтоговая.Подъезд,
	|	втИтоговая.ЛицевойСчет,
	|	втИтоговая.Поставщик,
	|	втИтоговая.Поставщик.Код,
	|	втИтоговая.Поставщик.Наименование,
	|	втИтоговая.Поставщик.ИНН,
	|	втИтоговая.Поставщик.КПП,
	|	втИтоговая.ЭтоСведенияТекущейОрганизации,
	|	втИтоговая.ЭтоСведенияПоКапРемонту,
	|	втИтоговая.РасчетныйСчетСсылка,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.НомерСчета, """") КАК СТРОКА(100)),
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.Банк.Наименование, """") КАК СТРОКА(100)),
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.Банк.Код, """") КАК СТРОКА(100)),
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.Банк.КоррСчет, """") КАК СТРОКА(100)),
	|	втИтоговая.ВидУслуги,
	|	втИтоговая.ВидУслуги.Наименование,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)),
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)),
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияЮрАдрес.Представление, """") = """"
	|				ТОГДА ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияЮрАдрес.Представление, """")
	|			КОГДА НЕ ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияФактАдрес.Представление, """") = """"
	|				ТОГДА ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияФактАдрес.Представление, """")
	|			ИНАЧЕ """"
	|		КОНЕЦ),
	|	СУММА(втИтоговая.ВсегоКОплате),
	|	СУММА(втИтоговая.СуммаПениДляQRСУчетомНачСальдоПени),
	|	СУММА(втИтоговая.СуммаПени),
	|	СУММА(втИтоговая.НачальноеСальдо),
	|	СУММА(втИтоговая.СуммаНачисления),
	|	СУММА(втИтоговая.ВсегоОплат)
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияФактАдрес
	|		ПО втИтоговая.Поставщик = КонтрагентыКонтактнаяИнформацияФактАдрес.Ссылка
	|			И (КонтрагентыКонтактнаяИнформацияФактАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтрагентыКонтактнаяИнформацияФактАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияЮрАдрес
	|		ПО втИтоговая.Поставщик = КонтрагентыКонтактнаяИнформацияЮрАдрес.Ссылка
	|			И (КонтрагентыКонтактнаяИнформацияЮрАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтрагентыКонтактнаяИнформацияЮрАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(втИтоговая.Поставщик) = ТИП(Справочник.Контрагенты)
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговая.Здание,
	|	втИтоговая.Подъезд,
	|	втИтоговая.ЛицевойСчет,
	|	втИтоговая.Поставщик,
	|	втИтоговая.ЭтоСведенияПоКапРемонту,
	|	втИтоговая.ВидУслуги,
	|	втИтоговая.ЭтоСведенияТекущейОрганизации,
	|	втИтоговая.РасчетныйСчетСсылка,
	|	втИтоговая.Поставщик.Код,
	|	втИтоговая.Поставщик.Наименование,
	|	втИтоговая.Поставщик.ИНН,
	|	втИтоговая.Поставщик.КПП,
	|	втИтоговая.ВидУслуги.Наименование,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.НомерСчета, """") КАК СТРОКА(100)),
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.Банк.Наименование, """") КАК СТРОКА(100)),
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.Банк.Код, """") КАК СТРОКА(100)),
	|	ВЫРАЗИТЬ(ЕСТЬNULL(втИтоговая.РасчетныйСчетСсылка.Банк.КоррСчет, """") КАК СТРОКА(100))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	НаименованиеПоставщика,
	|	НаименованиеВидаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИтоговая.Поставщик КАК Поставщик,
	|	ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияТелефон.Представление, ЕСТЬNULL(ОрганизацииКонтактнаяИнформацияТелефон.Представление, """")) КАК Телефон,
	|	ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияEmail.Представление, ЕСТЬNULL(ОрганизацииКонтактнаяИнформацияEmail.Представление, """")) КАК ЭлПочта
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияТелефон
	|		ПО втИтоговая.Поставщик = КонтрагентыКонтактнаяИнформацияТелефон.Ссылка
	|			И (КонтрагентыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (КонтрагентыКонтактнаяИнформацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформацияТелефон
	|		ПО втИтоговая.Поставщик = ОрганизацииКонтактнаяИнформацияТелефон.Ссылка
	|			И (ОрганизацииКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (ОрганизацииКонтактнаяИнформацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияEmail
	|		ПО втИтоговая.Поставщик = КонтрагентыКонтактнаяИнформацияEmail.Ссылка
	|			И (КонтрагентыКонтактнаяИнформацияEmail.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (КонтрагентыКонтактнаяИнформацияEmail.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагенты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформацияEmail
	|		ПО втИтоговая.Поставщик = ОрганизацииКонтактнаяИнформацияEmail.Ссылка
	|			И (ОрганизацииКонтактнаяИнформацияEmail.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (ОрганизацииКонтактнаяИнформацияEmail.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации))
	|ГДЕ
	|	НЕ втИтоговая.Поставщик В (ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|	И (НЕ ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияТелефон.Представление, ЕСТЬNULL(ОрганизацииКонтактнаяИнформацияТелефон.Представление, """")) = """"
	|			ИЛИ НЕ ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияEmail.Представление, ЕСТЬNULL(ОрганизацииКонтактнаяИнформацияEmail.Представление, """")) = """")";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТаблицаПоставщиков = Результаты[18].Выгрузить();
	
	// Так как телефонов или email у поставщика может быть несколько, преобразовываем их в строку вида:
	// Телефон1, Телефон2, ...
	// Email1, Email2, ...
	ТаблицаКИ = Результаты[19].Выгрузить();
	
	СтруктураОтбора = Новый Структура("Поставщик");
	
	врПоставщики = ТаблицаКИ.Скопировать(, "Поставщик");
	врПоставщики.Свернуть("Поставщик");
	
	Для Каждого ТекСтрокаКИПоставщика Из врПоставщики Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрокаКИПоставщика.Поставщик) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.Поставщик = ТекСтрокаКИПоставщика.Поставщик;
		
		СтрокиПоставщика   = ТаблицаПоставщиков.НайтиСтроки(СтруктураОтбора);
		СтрокиКИПоставщика = ТаблицаКИ.НайтиСтроки(СтруктураОтбора);
		
		Телефоны = Новый Массив;
		ЭлАдреса = Новый Массив;
		
		Для Каждого ТекущаяСтрока Из СтрокиКИПоставщика Цикл
			Телефон = ТекущаяСтрока.Телефон;
			ЭлПочта = ТекущаяСтрока.ЭлПочта;
			
			Если ЗначениеЗаполнено(Телефон) И Телефоны.Найти(Телефон) = Неопределено Тогда
				Телефоны.Добавить(Телефон);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлПочта) И ЭлАдреса.Найти(ЭлПочта) = Неопределено Тогда
				ЭлАдреса.Добавить(ЭлПочта);
			КонецЕсли;
		КонецЦикла;
		
		ТелефонСтрокой = СтрСоединить(Телефоны, ", ");
		ЭлПочтаСтрокой = СтрСоединить(ЭлАдреса, ", ");
		
		Если НЕ ТелефонСтрокой = "" ИЛИ НЕ ЭлПочтаСтрокой = "" Тогда
			
			Для Каждого ТекущаяСтрока Из СтрокиПоставщика Цикл
				Если НЕ ТелефонСтрокой = "" Тогда
					ТекущаяСтрока.Телефон = ТелефонСтрокой;
				КонецЕсли;
				Если НЕ ЭлПочтаСтрокой = "" Тогда
					ТекущаяСтрока.ЭлПочта = ЭлПочтаСтрокой;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПоставщиков.Индексы.Добавить("ЛицевойСчет");
	ТаблицаПоставщиков.Индексы.Добавить("Здание");
	
	Возврат ТаблицаПоставщиков;
	
КонецФункции // ПолучитьТаблицуПоставщиков()

// Получает таблицу с данными о рассрочке платежей.
//
// Параметры:
//  Организация – организация, на которую формируется квитанция
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция
//  СписокЛС - список лицевых счетов
//  СписокУслуг - список услуг.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями о рассрочке.
//
Функция ПолучитьТаблицуРассрочки(Организация, ПериодПросмотра, СписокЛицевыхСчетов, СписокУслуг) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Начислено,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоКомиссия,
	|	УПЖКХ_НачисленияОбороты.МесяцРассрочки
	|ПОМЕСТИТЬ втТекущийМесяц
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга В (&СписокУслуг)
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))) КАК УПЖКХ_НачисленияОбороты
	|ГДЕ
	|	НЕ УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.МесяцРассрочки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ЗаявлениеНаРассрочку,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.Услуга,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ГодоваяПроцентнаяСтавка * 100 КАК ПроцентнаяСтавка
	|ПОМЕСТИТЬ втСведенияОРассрочке
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОРассрочке.СрезПоследних(
	|			&КонецМесяца,
	|			ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга В (&СписокУслуг)) КАК УПЖКХ_СведенияОРассрочкеСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.Услуга,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ЗаявлениеНаРассрочку,
	|	УПЖКХ_СведенияОРассрочкеСрезПоследних.ГодоваяПроцентнаяСтавка * 100
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.Услуга,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.ЗаявлениеНаРассрочку,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.МесяцРассрочки
	|ПОМЕСТИТЬ втМесяцыРассрочек
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоРассрочке.Остатки(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга В (&СписокУслуг)
	|				И ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_Рассрочка.Предоставление)
	|				И (ЛицевойСчет, Услуга, ЗаявлениеНаРассрочку) В
	|					(ВЫБРАТЬ
	|						втСведенияОРассрочке.ЛицевойСчет,
	|						втСведенияОРассрочке.Услуга,
	|						втСведенияОРассрочке.ЗаявлениеНаРассрочку
	|					ИЗ
	|						втСведенияОРассрочке КАК втСведенияОРассрочке)) КАК УПЖКХ_НачисленияПоРассрочкеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.Услуга,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.ЗаявлениеНаРассрочку,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.МесяцРассрочки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТекущийМесяц.ЛицевойСчет,
	|	втТекущийМесяц.Услуга,
	|	СУММА(втТекущийМесяц.Начислено) КАК Начислено,
	|	СУММА(втТекущийМесяц.НачисленоКомиссия) КАК НачисленоКомиссия,
	|	ЕСТЬNULL(втСведенияОРассрочке.ПроцентнаяСтавка, 0) КАК ПроцентнаяСтавка,
	|	втТекущийМесяц.МесяцРассрочки
	|ПОМЕСТИТЬ втНачислениеРассрочки
	|ИЗ
	|	втТекущийМесяц КАК втТекущийМесяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМесяцыРассрочек КАК втМесяцыРассрочек
	|			ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОРассрочке КАК втСведенияОРассрочке
	|			ПО втМесяцыРассрочек.ЗаявлениеНаРассрочку = втСведенияОРассрочке.ЗаявлениеНаРассрочку
	|				И втМесяцыРассрочек.ЛицевойСчет = втСведенияОРассрочке.ЛицевойСчет
	|				И втМесяцыРассрочек.Услуга = втСведенияОРассрочке.Услуга
	|		ПО втТекущийМесяц.ЛицевойСчет = втМесяцыРассрочек.ЛицевойСчет
	|			И втТекущийМесяц.МесяцРассрочки = втМесяцыРассрочек.МесяцРассрочки
	|			И втТекущийМесяц.МесяцРассрочки = втМесяцыРассрочек.МесяцРассрочки
	|
	|СГРУППИРОВАТЬ ПО
	|	втТекущийМесяц.ЛицевойСчет,
	|	втТекущийМесяц.Услуга,
	|	втТекущийМесяц.МесяцРассрочки,
	|	ЕСТЬNULL(втСведенияОРассрочке.ПроцентнаяСтавка, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК ОстатокРассрочки,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцРассрочки
	|ПОМЕСТИТЬ втОстаткиРассрочки
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&НачалоМесяца,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга В (&СписокУслуг)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Рассрочка)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцРассрочки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втНачислениеРассрочки.ЛицевойСчет, втОстаткиРассрочки.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втНачислениеРассрочки.Услуга.ВидУслуги, втОстаткиРассрочки.Услуга.ВидУслуги) КАК ВидУслуги,
	|	СУММА(ЕСТЬNULL(втНачислениеРассрочки.Начислено, 0)) КАК Начислено,
	|	СУММА(ЕСТЬNULL(втНачислениеРассрочки.НачисленоКомиссия, 0)) КАК НачисленоКомиссия,
	|	ЕСТЬNULL(втНачислениеРассрочки.ПроцентнаяСтавка, 0) КАК ПроцентнаяСтавка,
	|	СУММА(ЕСТЬNULL(втОстаткиРассрочки.ОстатокРассрочки, 0)) КАК Остаток,
	|	СУММА(ЕСТЬNULL(втНачислениеРассрочки.Начислено, 0) + ЕСТЬNULL(втНачислениеРассрочки.НачисленоКомиссия, 0) + ЕСТЬNULL(втОстаткиРассрочки.ОстатокРассрочки, 0)) КАК КОплате,
	|	ЕСТЬNULL(втНачислениеРассрочки.Услуга.ВидУслуги.Наименование, втОстаткиРассрочки.Услуга.ВидУслуги.Наименование) КАК НаименованиеВидаУслуги
	|ИЗ
	|	втНачислениеРассрочки КАК втНачислениеРассрочки
	|		ПОЛНОЕ СОЕДИНЕНИЕ втОстаткиРассрочки КАК втОстаткиРассрочки
	|		ПО втНачислениеРассрочки.ЛицевойСчет = втОстаткиРассрочки.ЛицевойСчет
	|			И втНачислениеРассрочки.Услуга = втОстаткиРассрочки.Услуга
	|			И втНачислениеРассрочки.МесяцРассрочки = втОстаткиРассрочки.МесяцРассрочки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втНачислениеРассрочки.ЛицевойСчет, втОстаткиРассрочки.ЛицевойСчет),
	|	ЕСТЬNULL(втНачислениеРассрочки.ПроцентнаяСтавка, 0),
	|	ЕСТЬNULL(втНачислениеРассрочки.Услуга.ВидУслуги, втОстаткиРассрочки.Услуга.ВидУслуги),
	|	ЕСТЬNULL(втНачислениеРассрочки.Услуга.ВидУслуги.Наименование, втОстаткиРассрочки.Услуга.ВидУслуги.Наименование)";
	
	Запрос.УстановитьПараметр("НачалоМесяца",        НачалоМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("КонецМесяца",         КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("СписокУслуг",         СписокУслуг);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Индексы.Добавить("ЛицевойСчет");
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуРассрочки()

// Получает количество льготников на лицевом счете.
//
// Параметры:
//  Объект - Лицевой счет.
//
// Возвращаемое значение:
//  Число - количество льготников на лицевом счете.
//
Функция ПолучитьТаблицуКоличестваЛьготников(ПериодПросмотра, СписокЛицевыхСчетов) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",        ПериодПросмотра);
	Запрос.УстановитьПараметр("СписокЛС",    СписокЛицевыхСчетов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Жилец
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	УПЖКХ_Жильцы.Владелец В(&СписокЛС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий,
	|	1 КАК ОдинЛьготник
	|ПОМЕСТИТЬ втЛьготников
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&Дата,
	|			Проживающий В
	|					(ВЫБРАТЬ
	|						втЖильцы.Жилец
	|					ИЗ
	|						втЖильцы КАК втЖильцы)
	|				И ДатаИзменения <= &Дата) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛьготников.ЛицевойСчет,
	|	СУММА(втЛьготников.ОдинЛьготник) КАК КоличествоЛьготников
	|ИЗ
	|	втЛьготников КАК втЛьготников
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛьготников.ЛицевойСчет";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Индексы.Добавить("ЛицевойСчет");
	
	Возврат РезультатЗапроса;
	
КонецФункции // ПолучитьТаблицуКоличестваЛьготников()

// Возвращает таблицу услуг общедомового счетчика.
//
Функция ПолучитьТаблицуУслугКПУ()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_УслугиОбщедомовогоСчетчика.УслугаОбщедомовогоСчетчика,
	|	УПЖКХ_УслугиОбщедомовогоСчетчика.Услуга
	|ИЗ
	|	РегистрСведений.УПЖКХ_УслугиОбщедомовогоСчетчика КАК УПЖКХ_УслугиОбщедомовогоСчетчика";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуУслугКПУ()

// Функция выполняет свертку общей таблицы оплат и получает данные об оплатах в разрезе только лицевых счетов.
//
// Параметры:
//  ТаблицаОплатПоВидамУслуг - таблица оплат с детализацией по видам услуг.
//
// Возвращаемое значение:
//  Таблица - таблица оплат, свернутая по виду услуг.
//
Функция ПолучитьТаблицуОплатВРазрезеЛицевыхСчетов(ТаблицаОплатПоВидамУслуг, СписокУслуг = Неопределено)
	
	Таблица = ТаблицаОплатПоВидамУслуг.Скопировать(, "ЛицевойСчет, Услуга, Период, СуммаОплаты, СуммаОплатыБезПени, СуммаОплатыПени, СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования");
	
	МассивУдаления = Новый Массив;
	Если Не СписокУслуг = Неопределено Тогда
		Для Каждого Строка Из Таблица Цикл
			Если СписокУслуг.НайтиПоЗначению(Строка.Услуга) = Неопределено Тогда
				МассивУдаления.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаУдаления Из МассивУдаления Цикл
		Таблица.Удалить(СтрокаУдаления);
	КонецЦикла;
	
	Таблица.Свернуть("ЛицевойСчет, Период", "СуммаОплаты, СуммаОплатыБезПени, СуммаОплатыПени, СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования");
	Таблица.Индексы.Добавить("ЛицевойСчет");
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуОплатВРазрезеЛицевыхСчетов()

// Функция выполняет свертку общей таблицы пени и получает данные о начисленных пени в разрезе только лицевых счетов.
//
// Параметры:
//  ТаблицаПениПоВидамУслуг - таблица пени с детализацией по видам услуг.
//
// Возвращаемое значение:
//  Таблица - таблица пени, свернутая по виду услуг.
//
Функция ПолучитьТаблицуПениВРазрезеЛицевыхСчетов(ТаблицаПениПоВидамУслуг, СписокУслуг = Неопределено)
	
	Таблица = ТаблицаПениПоВидамУслуг.Скопировать(, "ЛицевойСчет, Услуга, СуммаПени");
	
	МассивУдаления = Новый Массив;
	Если Не СписокУслуг = Неопределено Тогда
		Для Каждого Строка Из Таблица Цикл
			Если СписокУслуг.НайтиПоЗначению(Строка.Услуга) = Неопределено Тогда
				МассивУдаления.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаУдаления Из МассивУдаления Цикл
		Таблица.Удалить(СтрокаУдаления);
	КонецЦикла;
	
	Таблица.Свернуть("ЛицевойСчет", "СуммаПени");
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуПениВРазрезеЛицевыхСчетов()

// Функция выполняет свертку общей таблицы сальдо и получает данные о начальном сальдо в разрезе только лицевых счетов.
//
// Параметры:
//  ТаблицаСальдоПоВидамУслуг - таблица сальдо с детализацией по видам услуг.
//
// Возвращаемое значение:
//  Таблица - таблица сальдо, свернутая по виду услуг.
//
Функция ПолучитьТаблицуСальдоВРазрезеЛицевыхСчетов(ТаблицаСальдоПоВидамУслуг, СписокУслуг = Неопределено)
	
	Таблица = ТаблицаСальдоПоВидамУслуг.Скопировать(, "ЛицевойСчет, Услуга, НачальноеСальдо, НачальноеСальдоБезПени, НачальноеСальдоПени");
	
	МассивУдаления = Новый Массив;
	Если Не СписокУслуг = Неопределено Тогда
		Для Каждого Строка Из Таблица Цикл
			Если СписокУслуг.НайтиПоЗначению(Строка.Услуга) = Неопределено Тогда
				МассивУдаления.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаУдаления Из МассивУдаления Цикл
		Таблица.Удалить(СтрокаУдаления);
	КонецЦикла;
	
	Таблица.Свернуть("ЛицевойСчет", "НачальноеСальдо, НачальноеСальдоБезПени, НачальноеСальдоПени");
	Таблица.Индексы.Добавить("ЛицевойСчет");
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуСальдоВРазрезеЛицевыхСчетов()

// Функция получает таблицу конечного и начального сальдо по услугам.
//
Функция ПолучитьТаблицуКонечногоИНачальногоСальдоПоУслугам(ТаблицаКонНачСальдоОбщ, СписокУслуг)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаКонечногоСальдо.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаКонечногоСальдо.Услуга КАК Услуга,
	|	ТаблицаКонечногоСальдо.НачальноеСальдо КАК НачальноеСальдо,
	|	ТаблицаКонечногоСальдо.КонечноеСальдо КАК КонечноеСальдо,
	|	ТаблицаКонечногоСальдо.ЭтоПени КАК ЭтоПени
	|ПОМЕСТИТЬ втВсеУслуги
	|ИЗ
	|	&ТаблицаКонечногоСальдо КАК ТаблицаКонечногоСальдо
	|ГДЕ
	|	ТаблицаКонечногоСальдо.Услуга В(&СписокУслуг)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеУслуги.ЛицевойСчет КАК ЛицевойСчет,
	|	втВсеУслуги.Услуга КАК Услуга,
	|	втВсеУслуги.НачальноеСальдо КАК НачальноеСальдо,
	|	втВсеУслуги.КонечноеСальдо КАК КонечноеСальдо,
	|	втВсеУслуги.ЭтоПени КАК ЭтоПени
	|ИЗ
	|	втВсеУслуги КАК втВсеУслуги";
	Запрос.УстановитьПараметр("ТаблицаКонечногоСальдо", ТаблицаКонНачСальдоОбщ);
	Запрос.УстановитьПараметр("СписокУслуг",            СписокУслуг);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Индексы.Добавить("ЛицевойСчет");
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Функция получает даты последних оплат.
//
// Параметры:
//  СтруктураНастроек - Структура - настройки формирования квтанций:
//    Организация – организация, на которую формируется квитанция;
//    ПериодПросмотра - дата, по состоянию на которую формируется квитанция;
//    СписокЛицевыхСчетов - список лицевых счетов;
//    ТекущийСписокУслуг - список услуг, не включающих услуги кап.ремонта;
//    СписокУслугКапРемонт - список услуг кап.ремонта.
//  ОсобыеНастройкиВыгрузкиНачислений - Булево - дополнитеьный параметр для наложения условий.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями о датах оплат.
//
Функция ПолучитьТаблицуДатыПоследнихОплат(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.Период
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ) КАК ПериодПени,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.Период
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ) КАК ПериодНеПени,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.Услуга КАК Услуга
	|ПОМЕСТИТЬ втОсновная
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Обороты(
	|			,
	|			&Дата,
	|			Запись,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛС)
	|				И Услуга В (&СписокУслугВсе)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втОсновная.ПериодПени) КАК ПериодКапРемонтПени,
	|	МАКСИМУМ(втОсновная.ПериодНеПени) КАК ПериодКапРемонтНеПени,
	|	втОсновная.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втУслугиКапРемонта
	|ИЗ
	|	втОсновная КАК втОсновная
	|ГДЕ
	|	втОсновная.Услуга В(&СписокУслугКапРемонт)
	|
	|СГРУППИРОВАТЬ ПО
	|	втОсновная.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втОсновная.ПериодПени) КАК ПериодНеКапРемонтПени,
	|	МАКСИМУМ(втОсновная.ПериодНеПени) КАК ПериодНеКапРемонтНеПени,
	|	втОсновная.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втУслугиНеКапРемот
	|ИЗ
	|	втОсновная КАК втОсновная
	|ГДЕ
	|	втОсновная.Услуга В(&СписокУслуг)
	|
	|СГРУППИРОВАТЬ ПО
	|	втОсновная.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втУслугиКапРемонта.ЛицевойСчет, втУслугиНеКапРемот.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втУслугиКапРемонта.ПериодКапРемонтПени, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодКапРемонтПени,
	|	ЕСТЬNULL(втУслугиКапРемонта.ПериодКапРемонтНеПени, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодКапРемонтНеПени,
	|	ЕСТЬNULL(втУслугиНеКапРемот.ПериодНеКапРемонтПени, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодНеКапРемонтПени,
	|	ЕСТЬNULL(втУслугиНеКапРемот.ПериодНеКапРемонтНеПени, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодНеКапРемонтНеПени
	|ИЗ
	|	втУслугиКапРемонта КАК втУслугиКапРемонта
	|		ПОЛНОЕ СОЕДИНЕНИЕ втУслугиНеКапРемот КАК втУслугиНеКапРемот
	|		ПО втУслугиКапРемонта.ЛицевойСчет = втУслугиНеКапРемот.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("СписокУслугВсе", СтруктураНастроек.СписокУслуг);
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо = Истина
	   И СтруктураНастроек.УчетОплат = "Текущего момента" Тогда
		КонецРасчетногоПериода = ТекущаяДата();
	Иначе
		КонецРасчетногоПериода = КонецМесяца(СтруктураНастроек.ПериодПросмотра);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата",                     КонецРасчетногоПериода);
	Запрос.УстановитьПараметр("Организация",              СтруктураНастроек.Организация);
	Запрос.УстановитьПараметр("СписокЛС",                 СтруктураНастроек.СписокЛицевыхСчетов);
	
	Если ОсобыеНастройкиВыгрузкиНачислений Тогда
		Запрос.УстановитьПараметр("СписокУслуг",          СтруктураНастроек.СписокУслугВыгружатьНачисленияОсн);
		Запрос.УстановитьПараметр("СписокУслугКапРемонт", СтруктураНастроек.СписокУслугВыгружатьНачисленияКапРемонт);
	Иначе
		Запрос.УстановитьПараметр("СписокУслуг",          СтруктураНастроек.ТекущийСписокУслуг);
		Запрос.УстановитьПараметр("СписокУслугКапРемонт", СтруктураНастроек.СписокУслугКапРемонт);
	КонецЕсли;
	
	ТаблицаДатыОплат = Запрос.Выполнить().Выгрузить();
	ТаблицаДатыОплат.Индексы.Добавить("ЛицевойСчет");
	
	Возврат ТаблицаДатыОплат;
	
КонецФункции // ПолучитьТаблицуДатыПоследнихОплат()

// Исключает из таблицы значений удаленные услуги и дополняет ее новыми услугами.
//
// Параметры:
//  ТаблицаУслуг - таблица с услугами.
//  
// Возвращаемое значение:
//  ТаблицаЗначений - актуализированная таблица с услугами.
//
Функция АктуализироватьСписокУслуг(ТаблицаУслуг) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаУслуг.ВидУслуги,
	|	ТаблицаУслуг.Коммунальная,
	|	ТаблицаУслуг.СодержаниеИРемонт
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВидыУслуг.Ссылка КАК ВидУслуги,
	|	ЕСТЬNULL(втУслуги.Коммунальная, ЛОЖЬ) КАК Коммунальная,
	|	ЕСТЬNULL(втУслуги.СодержаниеИРемонт, ЛОЖЬ) КАК СодержаниеИРемонт
	|ИЗ
	|	Справочник.КВП_ВидыУслуг КАК КВП_ВидыУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
	|		ПО КВП_ВидыУслуг.Ссылка = втУслуги.ВидУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_ВидыУслуг.Наименование";
	
	Запрос.УстановитьПараметр("ТаблицаУслуг", ТаблицаУслуг);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции // АктуализироватьСписокУслуг()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция возвращает структуру с настройками формирования платежного документа для организации.
//
// Параметры:
//  Организация   - организация, настройки по которой нужно получить.
//  Отказ         - булево, признак возникновения ошибки при формировании структуры.
//
// Возвращаемое значение:
//  Структура - структура с настройками формирования платежного документа.
//
Функция ПолучитьНастройкиФормированияПДЖКХ(Организация, Отказ = Ложь) Экспорт
	
	// Сформируем структуру по ресурсам регистра из метаданных.
	СтруктураНастроекФормированияПД = Новый Структура();
	Ресурсы = Метаданные.РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.Ресурсы;
	Для Каждого ТекРесурс Из Ресурсы Цикл
		ПустоеЗначение = КВП_ПустоеЗначениеТипа(ТекРесурс.Тип.Типы().Получить(0));
		СтруктураНастроекФормированияПД.Вставить(ТекРесурс.Имя, ПустоеЗначение);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Отказ = Истина;
		Возврат СтруктураНастроекФормированияПД;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	Если ВыборкаДанных.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураНастроекФормированияПД, ВыборкаДанных);
		СтруктураНастроекФормированияПД.ПредставлениеУслугСОИ = ПолучитьПредставлениеПостфиксаДляУслугСодержанияОбщегоИмущества(СтруктураНастроекФормированияПД);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не созданы настройки формирования платежного документа для организации "
														+ СокрЛП(Организация)
														+ Символы.ПС
														+ "Настройки формирования платежного документа устанавливается в разделе ""Главное"" - ""Настройки формирования ПД""", Отказ);
	КонецЕсли;
	
	СтруктураНастроекФормированияПД.КодОрганизацииДляОдномерногоШКПоОсн       = СокрЛП(СтруктураНастроекФормированияПД.КодОрганизацииДляОдномерногоШКПоОсн);
	СтруктураНастроекФормированияПД.КодОрганизацииДляОдномерногоШКПоУслугамКР = СокрЛП(СтруктураНастроекФормированияПД.КодОрганизацииДляОдномерногоШКПоУслугамКР);
	СтруктураНастроекФормированияПД.КодОрганизацииДляQRКодаПоОсн              = СокрЛП(СтруктураНастроекФормированияПД.КодОрганизацииДляQRКодаПоОсн);
	СтруктураНастроекФормированияПД.КодОрганизацииДляQRКодаПоУслугамКР        = СокрЛП(СтруктураНастроекФормированияПД.КодОрганизацииДляQRКодаПоУслугамКР);
	
	ЗначенияКлюча = Новый Структура;
	ЗначенияКлюча.Вставить("Организация", Организация);
	
	СтруктураНастроекФормированияПД.Вставить("КлючЗаписиРезультат", РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьКлючЗаписи(ЗначенияКлюча));
	
	Возврат СтруктураНастроекФормированияПД;
	
КонецФункции // ПолучитьНастройкиФормированияПДЖКХ()

// Дополняет структуру настроек пользователя параметрами, которые могут отсутствовать во внешних квитанциях.
//
// Параметры:
//  СтруктураНастроек - Структура - структура с настройками пользователя.
//
Процедура ДополнитьСтруктуруНастроекПользователя(СтруктураНастроек) Экспорт
	
	Если Не СтруктураНастроек.Свойство("ВариантУчетаКомиссииБанка") Тогда
		СтруктураНастроек.Вставить("ВариантУчетаКомиссииБанка", "Не учитывать");
	ИначеЕсли ПустаяСтрока(СтруктураНастроек.ВариантУчетаКомиссииБанка) Тогда
		СтруктураНастроек.ВариантУчетаКомиссииБанка = "Не учитывать";
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("УказыватьКоличествоПрожИЗарегЧислами") Тогда
		СтруктураНастроек.Вставить("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("КомиссияБанка") Тогда
		СтруктураНастроек.Вставить("КомиссияБанка", 0);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ВыводитьРасчетнуюПлощадь") Тогда
		СтруктураНастроек.Вставить("ВыводитьРасчетнуюПлощадь", Ложь);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("РасчетнаяПлощадьЗдания") Тогда
		СтруктураНастроек.Вставить("РасчетнаяПлощадьЗдания", Справочники.КВП_ТипыПлощадейЗдания.ПустаяСсылка());
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("РасчетнаяПлощадьПомещения") Тогда
		СтруктураНастроек.Вставить("РасчетнаяПлощадьПомещения", Справочники.УПЖКХ_ВидыПлощадей.ПустаяСсылка());
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("СписокПодъездов") Тогда
		СтруктураНастроек.Вставить("СписокПодъездов", КВП_ПолучитьСписокПодъездовПоЛицевымСчетам(СтруктураНастроек.СписокЛицевыхСчетов));
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ТаблицаВидовУслуг") Тогда
		СтруктураНастроек.Вставить("ТаблицаВидовУслуг", Новый ТаблицаЗначений);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ОбъектыОтчета") Тогда
		СтруктураНастроек.Вставить("ОбъектыОтчета", Новый ТаблицаЗначений);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ВидШК") Тогда
		СтруктураНастроек.Вставить("ВидШК", Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("НеВыводитьПоказанияПоПУ") Тогда
		СтруктураНастроек.Вставить("НеВыводитьПоказанияПоПУ", Ложь);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("НеВыводитьПоказанияПоПУ") Тогда
		СтруктураНастроек.Вставить("НеВыводитьПоказанияПоПУ", Ложь);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ВсегдаВыводитьДополнительныеОбласти") Тогда
		СтруктураНастроек.Вставить("ВсегдаВыводитьДополнительныеОбласти", Ложь);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("УслугиБезОДН") Тогда
		УслугиБезОДН = Новый ТаблицаЗначений;
		УслугиБезОДН.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		СтруктураНастроек.Вставить("УслугиБезОДН", УслугиБезОДН);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ПечататьКвитанциюКапРемонт") Тогда
		СтруктураНастроек.Вставить("ПечататьКвитанциюКапРемонт", Ложь);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("СпособПечатиКвитанцииКапРемонт") Тогда
		СтруктураНастроек.Вставить("СпособПечатиКвитанцииКапРемонт", "основную квитанцию и квитанцию на кап. ремонт");
	ИначеЕсли ПустаяСтрока(СтруктураНастроек.СпособПечатиКвитанцииКапРемонт) Тогда
		СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт";
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("СписокУслугКапРемонт") Тогда
		СтруктураНастроек.Вставить("СписокУслугКапРемонт", Новый СписокЗначений);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ТекущийСписокУслуг") Тогда
		СтруктураНастроек.Вставить("ТекущийСписокУслуг", Новый СписокЗначений);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ВыводитьОтрицательнуюСуммуКОплате") Тогда
		СтруктураНастроек.Вставить("ВыводитьОтрицательнуюСуммуКОплате", Истина);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ПечататьОтдельнуюКвитанциюПоПеням") Тогда
		СтруктураНастроек.Вставить("ПечататьОтдельнуюКвитанциюПоПеням", Ложь);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ВыводитьОбъемыРасхождения") Тогда
		СтруктураНастроек.Вставить("ВыводитьОбъемыРасхождения", Ложь);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ВключатьОплатыВНачальноеСальдо") Тогда
		СтруктураНастроек.Вставить("ВключатьОплатыВНачальноеСальдо", Ложь);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ОтборКвитанций") Тогда
		СтруктураНастроек.Вставить("ОтборКвитанций", Перечисления.УПЖКХ_ЗначенияОтбораКвитанций.ПечататьВсеКвитанции);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ГраницаОтбораИтоговойСуммыОт") Тогда
		СтруктураНастроек.Вставить("ГраницаОтбораИтоговойСуммыОт", 0);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ГраницаОтбораИтоговойСуммыДо") Тогда
		СтруктураНастроек.Вставить("ГраницаОтбораИтоговойСуммыДо", 0);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ГраницаОтбораИтоговойСуммыДоБезОграничений") Тогда
		СтруктураНастроек.Вставить("ГраницаОтбораИтоговойСуммыДоБезОграничений", Ложь);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ГраницаОтбораИтоговойСуммыОтБезОграничений") Тогда
		СтруктураНастроек.Вставить("ГраницаОтбораИтоговойСуммыОтБезОграничений", Ложь);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ВестиУчетНачисленийПоДобровольномуСтрахованию") Тогда
		СтруктураНастроек.Вставить("ВестиУчетНачисленийПоДобровольномуСтрахованию", Ложь);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("УслугаДобровольногоСтрахования") Тогда
		СтруктураНастроек.Вставить("УслугаДобровольногоСтрахования", Справочники.КВП_Услуги.ПустаяСсылка());
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ВыводитьQRштрихкодДляСитикардПоОсн") Тогда
		СтруктураНастроек.Вставить("ВыводитьQRштрихкодДляСитикардПоОсн", Ложь);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("ВыводитьQRштрихкодДляСитикардПоКР") Тогда
		СтруктураНастроек.Вставить("ВыводитьQRштрихкодДляСитикардПоКР",  Ложь);
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("КодОрганизацииВСитикардПоОсн") Тогда
		СтруктураНастроек.Вставить("КодОрганизацииВСитикардПоОсн",       "");
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("КодОрганизацииВСитикардПоКр") Тогда
		СтруктураНастроек.Вставить("КодОрганизацииВСитикардПоКр",        "");
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("НеВыводитьОтрицательнуюСуммуКОплатеПоУслугам") Тогда
		СтруктураНастроек.Вставить("НеВыводитьОтрицательнуюСуммуКОплатеПоУслугам", Ложь);
	КонецЕсли;
	
	Если НЕ СтруктураНастроек.Свойство("НастройкиОдномерногоШКПоОснКорректны") Тогда
		СтруктураНастроек.Вставить("НастройкиОдномерногоШКПоОснКорректны", УПЖКХ_ПечатьКвитанцийСервер.НастройкиДляОдномерногоШККорректны(СтруктураНастроек, Ложь));
		СтруктураНастроек.Вставить("ОдномерныйШКПоОснИспользуется",        Ложь);
	КонецЕсли;
	
	Если НЕ СтруктураНастроек.Свойство("НастройкиОдномерногоШКПоКРКорректны") Тогда
		СтруктураНастроек.Вставить("НастройкиОдномерногоШКПоКРКорректны", УПЖКХ_ПечатьКвитанцийСервер.НастройкиДляОдномерногоШККорректны(СтруктураНастроек, Истина));
		СтруктураНастроек.Вставить("ОдномерныйШКПоКРИспользуется",        Ложь);
	КонецЕсли;
	
	Если НЕ СтруктураНастроек.Свойство("НастройкиQRПоОснКорректны") Тогда
		СтруктураНастроек.Вставить("НастройкиQRПоОснКорректны", УПЖКХ_ПечатьКвитанцийСервер.НастройкиДляQRШККорректны(СтруктураНастроек, Ложь));
		СтруктураНастроек.Вставить("QRШКПоОснИспользуется",     Ложь);
	КонецЕсли;
	
	Если НЕ СтруктураНастроек.Свойство("НастройкиQRПоКРКорректны") Тогда
		СтруктураНастроек.Вставить("НастройкиQRПоКРКорректны", УПЖКХ_ПечатьКвитанцийСервер.НастройкиДляQRШККорректны(СтруктураНастроек, Истина));
		СтруктураНастроек.Вставить("QRШКПоКРИспользуется",     Ложь);
	КонецЕсли;
	
	Если НЕ СтруктураНастроек.Свойство("НастройкиQRДляСитикардПоОснКорректны") Тогда
		СтруктураНастроек.Вставить("НастройкиQRДляСитикардПоОснКорректны", УПЖКХ_ПечатьКвитанцийСервер.НастройкиQRДляОнлайнОплатыКорректны(СтруктураНастроек, Ложь));
		СтруктураНастроек.Вставить("QRДляСитикардПоОснИспользуется",       Ложь);
	КонецЕсли;
	
	Если НЕ СтруктураНастроек.Свойство("НастройкиQRДляСитикардПоКРКорректны") Тогда
		СтруктураНастроек.Вставить("НастройкиQRДляСитикардПоКРКорректны", УПЖКХ_ПечатьКвитанцийСервер.НастройкиQRДляОнлайнОплатыКорректны(СтруктураНастроек, Истина));
		СтруктураНастроек.Вставить("QRДляСитикардПоКРИспользуется",       Ложь);
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруНастроекПользователя()

// Дополняет общие данные кэшем макета "Характиристики" справочника "Нормы потребления услуг".
//
Процедура ДополнитьОбщиеДанные(ОбщиеДанные)
	
	// Кэш для хранения макета характеристик норм потребления.
	ОбщиеДанные.Вставить("КэшМакетаХарактеристикНормПотребления", Справочники.КВП_НормыПотребленияУслуг.ПолучитьМакет("Характеристики"));
	
КонецПроцедуры

// Анализирует настройки Учетной политики (ЖКХ) и определяет текущий вид макета.
//
// Параметры:
//  мНастройкиУчетнойПолитикиТСЖотказ - признак отсутствия настроек УП.
//  мНастройкиУчетнойПолитикиТСЖ - структура с настройками УП.
//
// Возвращаемое значение:
//  Строка - текущий вид макета.
//
Функция ПолучитьВидМакетаПД(мНастройкиФормированияПДЖКХОтказ, мНастройкиФормированияПДЖКХ) Экспорт
	
	Если НЕ мНастройкиФормированияПДЖКХОтказ И ЗначениеЗаполнено(мНастройкиФормированияПДЖКХ.ФормаКвитанции) Тогда
		ВидМакета = мНастройкиФормированияПДЖКХ.ФормаКвитанции;
	Иначе
		ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный;
	КонецЕсли;
	
	Возврат ВидМакета;
	
КонецФункции // ПолучитьВидМакетаПД()

// Получает таблицу с лицевыми счетами, помещениями и зданиями, соответствующими
// объектам отчета.
//
// Параметры:
//  СтруктураНастроек - структура с пользовательскими настройками.
//
// Возвращаемое значение:
//   Таблица значений   - таблица со всеми объектами отчета.
//
Функция ПолучитьТаблицуОбъектовКвитанции(СтруктураНастроек) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета);
	
	Если СтруктураНастроек.Свойство("ОбъектыОтчета") Тогда
		
		МассивЛС = СтруктураНастроек.ОбъектыОтчета.ВыгрузитьКолонку("Объект");
		УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивЛС);
		
	Иначе
		
		Если СтруктураНастроек.ОбъектОтчета.ЭтоГруппа Тогда
			
			ЗапросСпискаЛС = Новый Запрос;
			ЗапросСпискаЛС.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
			|ИЗ
			|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаНач, ЛицевойСчет В ИЕРАРХИИ (&ГруппаЛС)) КАК КВП_ЛицевыеСчетаСрезПоследних
			|ГДЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.Действует
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КВП_ЛицевыеСчета.ЛицевойСчет
			|ИЗ
			|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
			|ГДЕ
			|	КВП_ЛицевыеСчета.Активность
			|	И КВП_ЛицевыеСчета.Действует
			|	И КВП_ЛицевыеСчета.Период МЕЖДУ &ДатаНач И &ДатаКон
			|	И КВП_ЛицевыеСчета.ЛицевойСчет В ИЕРАРХИИ(&ГруппаЛС)";
			
			ЗапросСпискаЛС.УстановитьПараметр("ГруппаЛС", СтруктураНастроек.ОбъектОтчета);
			ЗапросСпискаЛС.УстановитьПараметр("ДатаНач",  НачалоМесяца(СтруктураНастроек.ПериодПросмотра));
			ЗапросСпискаЛС.УстановитьПараметр("ДатаКон",  КонецМесяца(СтруктураНастроек.ПериодПросмотра));
			
			РезультатЗапроса = ЗапросСпискаЛС.Выполнить().Выгрузить();
			МассивЛС = РезультатЗапроса.ВыгрузитьКолонку("ЛицевойСчет");
			
			УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивЛС);
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ СтруктураНастроек.Свойство("ОбъектыОтчета") Тогда
		// СТАРЫЙ МЕХАНИЗМ ФОРМИРОВАНИЯ СПИСКА Л/С.
		// После перехода на форму подбора сохраняем механизм формирования списка л/с
		// на основе справочника "Лицевые счета" для внешних квитаниций.
		
		// Объектом отчета явлется один л/с.
		Если НЕ СтруктураНастроек.ОбъектОтчета.ЭтоГруппа Тогда
			ТаблицаЛС = Новый ТаблицаЗначений;
			ТаблицаЛС.Колонки.Добавить("ЛицевойСчет");
			ТаблицаЛС.Колонки.Добавить("Помещение");
			ТаблицаЛС.Колонки.Добавить("ТипПомещения");
			ТаблицаЛС.Колонки.Добавить("Подъезд");
			ТаблицаЛС.Колонки.Добавить("Здание");
			ТаблицаЛС.Колонки.Добавить("ЖилойФондПомещения");
			
			НоваяСтрока = ТаблицаЛС.Добавить();
			НоваяСтрока.ЛицевойСчет        = СтруктураНастроек.ОбъектОтчета;
			НоваяСтрока.Помещение          = НоваяСтрока.ЛицевойСчет.Адрес;
			НоваяСтрока.ТипПомещения       = НоваяСтрока.Помещение.ВидПомещения.ТипПомещения;
			НоваяСтрока.Подъезд            = НоваяСтрока.Помещение.Подъезд;
			НоваяСтрока.Здание             = НоваяСтрока.Помещение.Владелец;
			НоваяСтрока.ЖилойФондПомещения = НоваяСтрока.Помещение.ВидПомещения.ЭтоЖилойФонд;
			
			Возврат ТаблицаЛС;
		КонецЕсли;
		
		// Группа л/с.
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаНач, ЛицевойСчет В ИЕРАРХИИ (&ГруппаЛС)) КАК КВП_ЛицевыеСчетаСрезПоследних
		|ГДЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.Действует
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КВП_ЛицевыеСчета.ЛицевойСчет
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Активность
		|	И КВП_ЛицевыеСчета.Действует
		|	И КВП_ЛицевыеСчета.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И КВП_ЛицевыеСчета.ЛицевойСчет В ИЕРАРХИИ(&ГруппаЛС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга КАК Услуга
		|ПОМЕСТИТЬ втУслуги
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			,
		|			,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчета.ЛицевойСчет
		|				ИЗ
		|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
		|ГДЕ
		|	(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток > 0
		|			ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток > 0
		|			ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияПриход > 0
		|			ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияРасход > 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ втИдентификаторыЛСЖКХЛичныйКабинет
		|ИЗ
		|	РегистрСведений.УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении КАК УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении
		|ГДЕ
		|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.ЛицевойСчет В
		|			(ВЫБРАТЬ
		|				втЛицевыеСчета.ЛицевойСчет
		|			ИЗ
		|				втЛицевыеСчета КАК втЛицевыеСчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ЛицевойСчет КАК ЛицевойСчет,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипКвитанции.ОсновнаяКвитанция)
		|				ТОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПД
		|			ИНАЧЕ """"
		|		КОНЕЦ) КАК ИдентификаторПДОсн,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипКвитанции.КвитанцияНаКР)
		|				ТОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПД
		|			ИНАЧЕ """"
		|		КОНЕЦ) КАК ИдентификаторПДКапРемонт,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипКвитанции.ЕдинаяКвитанция)
		|				ТОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПД
		|			ИНАЧЕ """"
		|		КОНЕЦ) КАК ИдентификаторПДЕдиный
		|ПОМЕСТИТЬ втПлатежныеДокументыВыгруженныеВГИС
		|ИЗ
		|	РегистрСведений.УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС КАК УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС
		|ГДЕ
		|	(УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ЛицевойСчет, НАЧАЛОПЕРИОДА(УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.Период, МЕСЯЦ)) В
		|			(ВЫБРАТЬ
		|				втЛицевыеСчета.ЛицевойСчет,
		|				НАЧАЛОПЕРИОДА(&ДатаНач, МЕСЯЦ)
		|			ИЗ
		|				втЛицевыеСчета КАК втЛицевыеСчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
		|	втЛицевыеСчета.ЛицевойСчет.Код КАК КодЛицевогоСчета,
		|	втЛицевыеСчета.ЛицевойСчет.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
		|	втЛицевыеСчета.ЛицевойСчет.Наименование КАК НаименованиеЛицевогоСчета,
		|	втУслуги.Услуга КАК Услуга,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес КАК Помещение,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.Код КАК КодПомещения,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.Наименование КАК НаименованиеПомещения,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.Подъезд КАК Подъезд,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.Владелец КАК Здание,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.Код КАК НомерКвартиры,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.Суффикс КАК СуффиксКвартиры,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.Владелец.НомерДома КАК КодЗдания,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.ВидПомещения КАК ВидПомещения,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.ВидПомещения.ТипПомещения КАК ТипПомещения,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.ВидПомещения.ЭтоЖилойФонд КАК ЖилойФондПомещения,
		|	втЛицевыеСчета.ЛицевойСчет.Идентификатор КАК Идентификатор,
		|	втЛицевыеСчета.ЛицевойСчет.ИдентификаторЖКУ КАК ИдентификаторЖКУ,
		|	ЕСТЬNULL(втИдентификаторыЛСЖКХЛичныйКабинет.Идентификатор, """") КАК ИдентификаторЖКХЛичныйКабинет,
		|	втЛицевыеСчета.ЛицевойСчет.ЕдиныйЛицевойСчет КАК ЕЛСвГИСЖКХ,
		|	втЛицевыеСчета.ЛицевойСчет.ИдентификаторЖКУКР КАК ИдентификаторЖКУКапРемонт,
		|	втЛицевыеСчета.ЛицевойСчет.ЕдиныйЛицевойСчетКР КАК ЕЛСвГИСЖКХКапРемонт,
		|	ЕСТЬNULL(втПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПДОсн, """") КАК ИдентификаторПДОсн,
		|	ЕСТЬNULL(втПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПДКапРемонт, """") КАК ИдентификаторПДКапРемонт,
		|	ЕСТЬNULL(втПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПДЕдиный, """") КАК ИдентификаторПДЕдиный,
		|	ЕСТЬNULL(КонтактнаяИнформация.Страна, """") КАК СтранаДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.Регион, """") КАК РегионДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.Район, """") КАК РайонДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.Город, """") КАК ГородДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.НаселенныйПункт, """") КАК НаселенныйПунктДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.Улица, """") КАК УлицаДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.Дом, """") КАК ДомДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.ТипКорпуса, """") КАК ТипКорпусаДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.Корпус, """") КАК КорпусДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.ТипКвартиры, """") КАК ТипКвартирыДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.Квартира, """") КАК КвартираДоставки
		|ИЗ
		|	втЛицевыеСчета КАК втЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
		|		ПО втЛицевыеСчета.ЛицевойСчет = втУслуги.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втИдентификаторыЛСЖКХЛичныйКабинет КАК втИдентификаторыЛСЖКХЛичныйКабинет
		|		ПО втЛицевыеСчета.ЛицевойСчет = втИдентификаторыЛСЖКХЛичныйКабинет.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПлатежныеДокументыВыгруженныеВГИС КАК втПлатежныеДокументыВыгруженныеВГИС
		|		ПО втЛицевыеСчета.ЛицевойСчет = втПлатежныеДокументыВыгруженныеВГИС.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО втЛицевыеСчета.ЛицевойСчет = КонтактнаяИнформация.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	втЛицевыеСчета.ЛицевойСчет,
		|	втУслуги.Услуга,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.Подъезд,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.Владелец,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.Код,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.Суффикс,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.Владелец.НомерДома,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.ВидПомещения,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.ВидПомещения.ТипПомещения,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.ВидПомещения.ЭтоЖилойФонд,
		|	ЕСТЬNULL(втИдентификаторыЛСЖКХЛичныйКабинет.Идентификатор, """"),
		|	втЛицевыеСчета.ЛицевойСчет.ИдентификаторЖКУ,
		|	втЛицевыеСчета.ЛицевойСчет.Наименование,
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.Наименование,
		|	втЛицевыеСчета.ЛицевойСчет.Идентификатор,
		|	втЛицевыеСчета.ЛицевойСчет.ЕдиныйЛицевойСчет,
		|	втЛицевыеСчета.ЛицевойСчет.ИдентификаторЖКУКР,
		|	втЛицевыеСчета.ЛицевойСчет.ЕдиныйЛицевойСчетКР,
		|	ЕСТЬNULL(втПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПДОсн, """"),
		|	ЕСТЬNULL(втПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПДКапРемонт, """"),
		|	ЕСТЬNULL(втПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПДЕдиный, """"),
		|	втЛицевыеСчета.ЛицевойСчет.АдресЭлектроннойПочты,
		|	втЛицевыеСчета.ЛицевойСчет.Код,
		|	ЕСТЬNULL(КонтактнаяИнформация.Страна, """"),
		|	ЕСТЬNULL(КонтактнаяИнформация.Регион, """"),
		|	ЕСТЬNULL(КонтактнаяИнформация.Район, """"),
		|	ЕСТЬNULL(КонтактнаяИнформация.Город, """"),
		|	ЕСТЬNULL(КонтактнаяИнформация.НаселенныйПункт, """"),
		|	ЕСТЬNULL(КонтактнаяИнформация.Улица, """"),
		|	ЕСТЬNULL(КонтактнаяИнформация.Дом, """"),
		|	ЕСТЬNULL(КонтактнаяИнформация.ТипКорпуса, """"),
		|	ЕСТЬNULL(КонтактнаяИнформация.Корпус, """"),
		|	ЕСТЬNULL(КонтактнаяИнформация.ТипКвартиры, """"),
		|	ЕСТЬNULL(КонтактнаяИнформация.Квартира, """"),
		|	втЛицевыеСчета.ЛицевойСчет.Адрес.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодЗдания,
		|	ВидПомещения,
		|	НомерКвартиры,
		|	СуффиксКвартиры";
		
		Запрос.УстановитьПараметр("ГруппаЛС", СтруктураНастроек.ОбъектОтчета);
		Запрос.УстановитьПараметр("ДатаНач",  НачалоМесяца(СтруктураНастроек.ПериодПросмотра));
		Запрос.УстановитьПараметр("ДатаКон",  КонецМесяца(СтруктураНастроек.ПериодПросмотра));
		
	Иначе
		// НОВЫЙ МЕХАНИЗМ ФОРМИРОВАНИЯ СПИСКА Л/С.
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Код КАК КодЛицевогоСчета,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Наименование КАК НаименованиеЛицевогоСчета,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Код КАК КодПомещения,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Наименование КАК НаименованиеПомещения,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор КАК Идентификатор,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.ИдентификаторЖКУ КАК ИдентификаторЖКУ,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.ВидПомещения КАК ВидПомещения,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.ВидПомещения.ТипПомещения КАК ТипПомещения,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Код КАК НомерКвартиры,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Суффикс КАК СуффиксКвартиры,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Подъезд КАК Подъезд,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Владелец.НомерДома КАК НомерДома,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Владелец.Код КАК КодЗдания,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.ВидПомещения.ЭтоЖилойФонд КАК ЖилойФондПомещения,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.ЕдиныйЛицевойСчет КАК ЕЛСвГИСЖКХ,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.ЕдиныйЛицевойСчетКР КАК ЕЛСвГИСЖКХКапРемонт,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.ИдентификаторЖКУКР КАК ИдентификаторЖКУКапРемонт
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&НачалоПериода, ЛицевойСчет В (&ОбъектыОтчета)) КАК КВП_ЛицевыеСчетаСрезПоследних
		|ГДЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.Действует
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.Код КАК КодЛицевогоСчета,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.Наименование,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.Адрес.Код,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.Адрес.Наименование,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.Идентификатор,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.ИдентификаторЖКУ,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.Адрес,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.Адрес.ВидПомещения,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.Адрес.ВидПомещения.ТипПомещения,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.Адрес.Код,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.Адрес.Суффикс,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.Адрес.Подъезд,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.Адрес.Владелец,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.Адрес.Владелец.НомерДома,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.Адрес.Владелец.Код,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.Адрес.ВидПомещения.ЭтоЖилойФонд,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.ЕдиныйЛицевойСчет,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.ЕдиныйЛицевойСчетКР,
		|	КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет.ИдентификаторЖКУКР
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчетаЗаПериод
		|ГДЕ
		|	КВП_ЛицевыеСчетаЗаПериод.Активность
		|	И КВП_ЛицевыеСчетаЗаПериод.Действует
		|	И КВП_ЛицевыеСчетаЗаПериод.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И КВП_ЛицевыеСчетаЗаПериод.ЛицевойСчет В(&ОбъектыОтчета)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Код КАК КодЛицевогоСчета,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Наименование,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.Код,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.Наименование,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Идентификатор,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.ИдентификаторЖКУ,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.ВидПомещения,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.ВидПомещения.ТипПомещения,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.Код,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.Суффикс,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.Подъезд,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.Владелец,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.Владелец.НомерДома,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.Владелец.Код,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.ВидПомещения.ЭтоЖилойФонд,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.ЕдиныйЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.ЕдиныйЛицевойСчетКР,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.ИдентификаторЖКУКР
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&ОбъектыОтчета)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
		|ГДЕ
		|	НЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ втИдентификаторыЛСЖКХЛичныйКабинет
		|ИЗ
		|	РегистрСведений.УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении КАК УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении
		|ГДЕ
		|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.ЛицевойСчет В
		|			(ВЫБРАТЬ
		|				втЛицевыеСчета.ЛицевойСчет
		|			ИЗ
		|				втЛицевыеСчета КАК втЛицевыеСчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ЛицевойСчет КАК ЛицевойСчет,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипКвитанции.ОсновнаяКвитанция)
		|				ТОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПД
		|			ИНАЧЕ """"
		|		КОНЕЦ) КАК ИдентификаторПДОсн,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипКвитанции.КвитанцияНаКР)
		|				ТОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПД
		|			ИНАЧЕ """"
		|		КОНЕЦ) КАК ИдентификаторПДКапРемонт,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипКвитанции.ЕдинаяКвитанция)
		|				ТОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПД
		|			ИНАЧЕ """"
		|		КОНЕЦ) КАК ИдентификаторПДЕдиный
		|ПОМЕСТИТЬ втПлатежныеДокументыВыгруженныеВГИС
		|ИЗ
		|	РегистрСведений.УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС КАК УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС
		|ГДЕ
		|	(УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ЛицевойСчет, НАЧАЛОПЕРИОДА(УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.Период, МЕСЯЦ)) В
		|			(ВЫБРАТЬ
		|				втЛицевыеСчета.ЛицевойСчет,
		|				НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
		|			ИЗ
		|				втЛицевыеСчета КАК втЛицевыеСчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
		|	втЛицевыеСчета.КодЛицевогоСчета КАК КодЛицевогоСчета,
		|	втЛицевыеСчета.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
		|	втЛицевыеСчета.НаименованиеЛицевогоСчета КАК НаименованиеЛицевогоСчета,
		|	втЛицевыеСчета.Помещение КАК Помещение,
		|	втЛицевыеСчета.КодПомещения КАК КодПомещения,
		|	втЛицевыеСчета.НаименованиеПомещения КАК НаименованиеПомещения,
		|	втЛицевыеСчета.ВидПомещения КАК ВидПомещения,
		|	втЛицевыеСчета.ТипПомещения КАК ТипПомещения,
		|	втЛицевыеСчета.НомерКвартиры КАК НомерКвартиры,
		|	втЛицевыеСчета.СуффиксКвартиры КАК СуффиксКвартиры,
		|	втЛицевыеСчета.Подъезд КАК Подъезд,
		|	втЛицевыеСчета.Здание КАК Здание,
		|	втЛицевыеСчета.НомерДома КАК НомерДома,
		|	втЛицевыеСчета.КодЗдания КАК КодЗдания,
		|	втЛицевыеСчета.ЖилойФондПомещения КАК ЖилойФондПомещения,
		|	втЛицевыеСчета.Идентификатор КАК Идентификатор,
		|	втЛицевыеСчета.ИдентификаторЖКУ КАК ИдентификаторЖКУ,
		|	ЕСТЬNULL(втИдентификаторыЛСЖКХЛичныйКабинет.Идентификатор, """") КАК ИдентификаторЖКХЛичныйКабинет,
		|	втЛицевыеСчета.ЕЛСвГИСЖКХ КАК ЕЛСвГИСЖКХ,
		|	втЛицевыеСчета.ЕЛСвГИСЖКХКапРемонт КАК ЕЛСвГИСЖКХКапРемонт,
		|	втЛицевыеСчета.ИдентификаторЖКУКапРемонт КАК ИдентификаторЖКУКапРемонт,
		|	ЕСТЬNULL(втПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПДОсн, """") КАК ИдентификаторПДОсн,
		|	ЕСТЬNULL(втПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПДКапРемонт, """") КАК ИдентификаторПДКапРемонт,
		|	ЕСТЬNULL(втПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПДЕдиный, """") КАК ИдентификаторПДЕдиный,
		|	ЕСТЬNULL(КонтактнаяИнформация.Страна, """") КАК СтранаДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.Регион, """") КАК РегионДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.Район, """") КАК РайонДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.Город, """") КАК ГородДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.НаселенныйПункт, """") КАК НаселенныйПунктДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.Улица, """") КАК УлицаДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.Дом, """") КАК ДомДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.ТипКорпуса, """") КАК ТипКорпусаДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.Корпус, """") КАК КорпусДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.ТипКвартиры, """") КАК ТипКвартирыДоставки,
		|	ЕСТЬNULL(КонтактнаяИнформация.Квартира, """") КАК КвартираДоставки
		|ИЗ
		|	втЛицевыеСчета КАК втЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ втИдентификаторыЛСЖКХЛичныйКабинет КАК втИдентификаторыЛСЖКХЛичныйКабинет
		|		ПО втЛицевыеСчета.ЛицевойСчет = втИдентификаторыЛСЖКХЛичныйКабинет.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПлатежныеДокументыВыгруженныеВГИС КАК втПлатежныеДокументыВыгруженныеВГИС
		|		ПО втЛицевыеСчета.ЛицевойСчет = втПлатежныеДокументыВыгруженныеВГИС.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО втЛицевыеСчета.ЛицевойСчет = КонтактнаяИнформация.Объект";
		
		Запрос.УстановитьПараметр("Организация",   СтруктураНастроек.Организация);
		Запрос.УстановитьПараметр("ОбъектыОтчета", СтруктураНастроек.ОбъектыОтчета.ВыгрузитьКолонку("Объект"));
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(СтруктураНастроек.ПериодПросмотра));
		Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(СтруктураНастроек.ПериодПросмотра));
	КонецЕсли;
	
	ТаблицаЛС = Запрос.Выполнить().Выгрузить();
	
	// Сортируем таблицу в соответствии с настройками пользователя.
	Если СтруктураНастроек.ВариантСортировки = "Лицевой счет" Тогда
		
		ТаблицаЛС.Сортировать("ЛицевойСчет");
		
	ИначеЕсли СтруктураНастроек.ВариантСортировки = "Адрес доставки" Тогда
		
		ТаблицаЛС.Колонки.Добавить("НомерДомаДоставки");
		ТаблицаЛС.Колонки.Добавить("НомерКорпусаДоставки");
		ТаблицаЛС.Колонки.Добавить("НомерКвартирыДоставки");
	
		Для Каждого ТекущаяСтрока Из ТаблицаЛС Цикл 
		
			ТекущаяСтрока.НомерДомаДоставки     = УПЖКХ_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВЧисло(ТекущаяСтрока.ДомДоставки);
			ТекущаяСтрока.НомерКорпусаДоставки  = УПЖКХ_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВЧисло(ТекущаяСтрока.КорпусДоставки);
			ТекущаяСтрока.НомерКвартирыДоставки = УПЖКХ_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВЧисло(ТекущаяСтрока.КвартираДоставки);
		
		КонецЦикла;
		
		ТаблицаЛС.Сортировать("СтранаДоставки, РегионДоставки, РайонДоставки, ГородДоставки, НаселенныйПунктДоставки, УлицаДоставки, НомерДомаДоставки, ТипКорпусаДоставки, НомерКорпусаДоставки, ТипКвартирыДоставки, НомерКвартирыДоставки");
		
	Иначе
		
		ТаблицаЛС.Сортировать("КодЗдания, ВидПомещения, НомерКвартиры, СуффиксКвартиры");
		
	КонецЕсли;

	ТаблицаЛС.Свернуть("ЛицевойСчет, НаименованиеЛицевогоСчета, Помещение, КодПомещения, НаименованиеПомещения,
						|Подъезд, Здание, КодЗдания, ТипПомещения, ЖилойФондПомещения, Идентификатор, ИдентификаторЖКУ, ИдентификаторЖКУКапРемонт,
						|ИдентификаторЖКХЛичныйКабинет, ЕЛСвГИСЖКХ, ЕЛСвГИСЖКХКапРемонт, ИдентификаторПДОсн, ИдентификаторПДКапРемонт, ИдентификаторПДЕдиный, АдресЭлектроннойПочты, КодЛицевогоСчета");
	
	Возврат ТаблицаЛС;

КонецФункции // ПолучитьТаблицуОбъектовКвитанции()

// Формирует таблицу с данными на основе исходной таблицы по заданым критерия отбора.
//
// Параметры:
//  ИсходнаяТаблица - исходная таблица
//  НазваниеКритерия - наименование колонки, по значениям которой будем выполнять отбор
//  ЗначениеКритерия - значение критерия отбора.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с найденными строками.
//
Функция ПолучитьТаблицуДанныхСОтборомПоКритерию(ИсходнаяТаблица, НазваниеКритерия, ЗначениеКритерия, НазваниеДопКритерия = Неопределено, 
												ЗначениеДопКритерия = Неопределено) Экспорт
	
	ИтоговаяТаблица = ИсходнаяТаблица.Скопировать(Новый Структура(НазваниеКритерия, ЗначениеКритерия));
	
	Если Не НазваниеДопКритерия = Неопределено И Не ЗначениеДопКритерия = Неопределено Тогда
		НайденныеДопСтроки = ИсходнаяТаблица.НайтиСтроки(Новый Структура(НазваниеДопКритерия, ЗначениеДопКритерия));
		
		Для Каждого Строка Из НайденныеДопСтроки Цикл
			ЗаполнитьЗначенияСвойств(ИтоговаяТаблица.Добавить(), Строка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИтоговаяТаблица;
	
КонецФункции // ПолучитьТаблицуДанныхПоТекущемуЛицевомуСчету()

// Если по текущему л/с имели место начисления не по всем видам тарифа, по которым имеется расход ОПУ и других ИПУ здания,
// записываем расход по "недостоющим" видам тарифа в первую по порядку строку для текущей услуги.
//
// Параметры:
//  ТаблицаНачисления - ТаблицаЗначений - таблица с начислениями по текущему л/с.
//  СтрокаНачисления - СтрокаТаблицыЗначений - строка начисления по текущему л/с и текущей услуге.
//  ТаблицаРасхода - ТаблицаЗначений - таблица с расходом ПУ для текущего л/с и здания.
//  ДобавляемыеСтроки - Массив - массив строк, расход по которым надо прибавить к текущей строке начисления.
//
Функция НеобходимоДобавитьРасходПоДругимВидамТарифов(ТаблицаНачисления, СтрокаНачисления, ТаблицаРасхода, ДобавляемыеСтроки)
	
	СтрокиТекНачисления  = ТаблицаНачисления.НайтиСтроки(Новый Структура("Услуга", СтрокаНачисления.Услуга));
	ТаблицаТекНачисления = ТаблицаНачисления.Скопировать(СтрокиТекНачисления);
	
	СтрокиТекРасхода     = ТаблицаРасхода.НайтиСтроки(Новый Структура("Услуга", СтрокаНачисления.Услуга));
	
	// Начисления по текущей услуге детализированы?
	Если НЕ ТаблицаТекНачисления.Количество() = 1 Тогда
		// Если детализированы, то расход по "недостающим" видам тарифа записываем
		// в первую строку детализации, которая располагается на второй позиции среди
		// всех строк начисления по текущей услуге.
		Если НЕ СтрокиТекНачисления.Найти(СтрокаНачисления) = 1 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТекРасхода ИЗ СтрокиТекРасхода Цикл
		// Строки расхода по текущему виду тарифа повторно не добавляем.
		Если СтрокаТекРасхода.ВидТарифа = СтрокаНачисления.ВидТарифа Тогда
			Продолжить;
		КонецЕсли;
		
		// Строки начисления по общему и дневному виду тарифа, если они равны, повторно не добавляем.
		Если (СтрокаТекРасхода.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий
		 И СтрокаНачисления.ВидТарифа = Перечисления.КВП_ВидыТарифов.Дневной)
		 ИЛИ (СтрокаТекРасхода.ВидТарифа = Перечисления.КВП_ВидыТарифов.Дневной
		 И СтрокаНачисления.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий)
		 И НЕ СтрокаНачисления.ОбщИДнТарифыНеРавны Тогда
			Продолжить;
		КонецЕсли;
		
		// Если для текущей строки расхода нет соответствующего вида тарифа в таблице начисления,
		// значит соответствующий расход надо добавить.
		СтрокаСоответствия = ТаблицаТекНачисления.Найти(СтрокаТекРасхода.ВидТарифа, "ВидТарифа");
		Если СтрокаСоответствия = Неопределено Тогда
			ДобавляемыеСтроки.Добавить(СтрокаТекРасхода);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ДобавляемыеСтроки.Количество() = 0, Ложь, Истина);
	
КонецФункции // НеобходимоДобавитьРасходПоДругимВидамТарифов()

// Функция необходима для работоспособности внешних квитанций!
// Проверяет равность нулю итоговой суммы к оплате и суммы начисления.
//
// Параметры:
//  СтруктураОбщихТаблиц - структура общих таблиц
//  ЛицевойСчет          - ссылка на текущий лицевой счет
//  СтруктураНастроек    - структура настроек данного пользователя.
//
// Возвращаемое значение:
//  Булево.
//
Функция ТекущаяКвитанцияНулевая(СтруктураОбщихТаблиц, ЛицевойСчет, СтруктураНастроек, ТекущаяКвитанцияПоПеням = Ложь) Экспорт
	
	// Выбираем из общей таблицы начислений начисления по текущему л/с.
	СтруктураОтбора = Новый Структура("ЛицевойСчет", ЛицевойСчет);
	
	// Выбираем из общей таблицы начислений начисления по текущему л/с.
	ТаблицаНачислений   = ?(ТекущаяКвитанцияПоПеням, СтруктураОбщихТаблиц.ТаблицаПениНачисленияОбщ.Скопировать(СтруктураОтбора, "Начислено"), СтруктураОбщихТаблиц.ТаблицаНачисленияОбщ.Скопировать(СтруктураОтбора, "Начислено"));
	ТаблицаОплат        = ?(ТекущаяКвитанцияПоПеням, СтруктураОбщихТаблиц.ТаблицаПениОбщПоВидамУслуг.НайтиСтроки(СтруктураОтбора), СтруктураОбщихТаблиц.ТаблицаОплатОбщПоВидамУслуг.НайтиСтроки(СтруктураОтбора));
	ТаблицаПерерасчетов = ?(ТекущаяКвитанцияПоПеням, СтруктураОбщихТаблиц.ТаблицаПениПерерасчетовОбщ.НайтиСтроки(СтруктураОтбора), СтруктураОбщихТаблиц.ТаблицаПерерасчетовОбщ.НайтиСтроки(СтруктураОтбора));
	СуммаПени           = ?(ТекущаяКвитанцияПоПеням, 0, ПолучитьСуммуПениПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаПениОбщПоВидамУслуг, ЛицевойСчет));
	СтруктураНачСальдо  = ПолучитьНачальноеСальдоПоТекущемуЛС(?(ТекущаяКвитанцияПоПеням, СтруктураОбщихТаблиц.ТаблицаПениСальдоОбщПоВидамУслуг, СтруктураОбщихТаблиц.ТаблицаСальдоОбщПоВидамУслуг),
																ЛицевойСчет, СтруктураНастроек.ВыводитьНачальноеСальдо);
	
	ВсегоКОплате = 0;
	НачСальдо    = 0;
	БылиОплаты   = Ложь;
	
	Если НЕ ТаблицаНачислений.Количество() = 0 Тогда
		ВсегоКОплате = ТаблицаНачислений.Итог("Начислено");
	КонецЕсли;
	
	Если СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
		ВсегоКОплате = ВсегоКОплате + СуммаПени;
	КонецЕсли;
	
	БылиПерерасчеты = ?(ТаблицаПерерасчетов.Количество() = 0, Ложь, Истина);
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо Тогда
		НачСальдо  = СтруктураНачСальдо.НачальноеСальдо;
		БылиОплаты = ?(ТаблицаОплат.Количество() = 0, Ложь, Истина);
	КонецЕсли;
	
	Если ВсегоКОплате = 0 И НЕ БылиОплаты И НЕ БылиПерерасчеты И НачСальдо = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ТекущаяКвитанцияНулевая()

// Формирует таблицу со всеми видами услуг.
//
// Параметры:
//  ТаблицаУслуг - ТаблицаЗначений - таблица с основными услугами
//  СписокУслугКапРемонт - СписокЗначений - список услуг кап ремонта.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьТаблицуВидовУслуг(ТаблицаУслуг, СписокУслугКапРемонт) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыУслугОсновные.ВидУслуги
	|ПОМЕСТИТЬ втВидыУслугОсновные
	|ИЗ
	|	&ВидыУслугОсновные КАК ВидыУслугОсновные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВидыУслугОсновные.ВидУслуги
	|ПОМЕСТИТЬ втВидыУслуг
	|ИЗ
	|	втВидыУслугОсновные КАК втВидыУслугОсновные
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_Услуги.ВидУслуги
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	КВП_Услуги.Ссылка В(&СписокУслугКапРемонт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый, втВидыУслуг.ВидУслуги) КАК ВидУслуги
	|ПОМЕСТИТЬ втВидыУслугСЗаменой
	|ИЗ
	|	втВидыУслуг КАК втВидыУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
	|		ПО втВидыУслуг.ВидУслуги = КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый, втВидыУслуг.ВидУслуги)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВидыУслугСЗаменой.ВидУслуги,
	|	втВидыУслугСЗаменой.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
	|	втВидыУслугСЗаменой.ВидУслуги.СпособВыводаВКвитанциях КАК СпособВыводаВКвитанциях
	|ИЗ
	|	втВидыУслугСЗаменой КАК втВидыУслугСЗаменой";
	
	Запрос.УстановитьПараметр("СписокУслугКапРемонт", СписокУслугКапРемонт);
	Запрос.УстановитьПараметр("ВидыУслугОсновные",    ТаблицаУслуг);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуВидовУслуг()

// Формирует список объектов определенного типа на основе таблицы со всеми объектами
// квитанции.
// 
// Параметры:
//  ТаблицаОбъектов - таблица со всеми объектами отчета
//  НазваниеКолонки - колонка, в которой хранятся объекты.
//
// Возвращаемое значение:
//  Список значений - список объектов.
//
Функция ПолучитьСписокОбъектов(ТаблицаОбъектов, НазваниеКолонки) Экспорт
	
	ТаблицаОбъектов.Свернуть(НазваниеКолонки);
	
	СписокОбъектов = Новый СписокЗначений;
	СписокОбъектов.ЗагрузитьЗначения(ТаблицаОбъектов.ВыгрузитьКолонку(НазваниеКолонки));
	
	Возврат СписокОбъектов;
	
КонецФункции // ПолучитьСписокОбъектов()

// Формирует список услуг, соответствующих настройкам, указанным на закладке "Выбор услуг"
// формы настроек.
//
Процедура ПолучитьСпискиУслуг(ПараметрыОтчета) Экспорт
	
	// ВАЖНО! Используется следующее правило:
	// если используются настройки для единой квитанции или по услугам капитального ремонта и в таблице выбранных услуг,
	// по которым необходимо печатать квитанции, нет услуг капитального ремонта, тогда услуги капитального ремонта не должны попадать
	// в получаемые сведения для квитанций. При этом список услуг капитального ремонта будет пустой.
	
	ВыборУслуг = ПараметрыОтчета.ВыборУслуг;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Услуга,
	|	КВП_Услуги.ВидУслуги КАК ВидУслуги,
	|	ВЫБОР
	|		КОГДА КВП_Услуги.Ссылка В (&УслугиКапРемонта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугаКапРемонта
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	НЕ КВП_Услуги.ЭтоГруппа
	|	И &ОтборПоСпособуПечатиКвитанцииКапРемонт
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_УслугиБазаКомиссии.Ссылка,
	|	КВП_УслугиБазаКомиссии.Ссылка.ВидУслуги,
	|	ИСТИНА
	|ИЗ
	|	Справочник.КВП_Услуги.БазаКомиссии КАК КВП_УслугиБазаКомиссии
	|ГДЕ
	|	КВП_УслугиБазаКомиссии.Ссылка.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.КомиссияБанка)
	|	И КВП_УслугиБазаКомиссии.Ссылка В(&УслугиКапРемонта)
	|	И КВП_УслугиБазаКомиссии.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.Услуга КАК Услуга,
	|	втИтоговая.ВидУслуги КАК ВидУслуги,
	|	втИтоговая.УслугаКапРемонта КАК УслугаКапРемонта
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|ГДЕ
	|	&ОтборПоУслуге";
	
	Запрос.УстановитьПараметр("УслугиКапРемонта", ПараметрыОтчета.СписокУслугКапРемонт);
	
	Если ПараметрыОтчета.СпособПечатиКвитанцииКапРемонт = "только квитанцию на кап. ремонт" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСпособуПечатиКвитанцииКапРемонт", "Ссылка В (&УслугиКапРемонта)");
	ИначеЕсли ПараметрыОтчета.СпособПечатиКвитанцииКапРемонт = "только основную квитанцию" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСпособуПечатиКвитанцииКапРемонт", "НЕ Ссылка В (&УслугиКапРемонта)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСпособуПечатиКвитанцииКапРемонт", "ИСТИНА");
	КонецЕсли;
	
	Если НЕ ВыборУслуг = "Все услуги" И НЕ ПустаяСтрока(ВыборУслуг) Тогда
		УслугиДляКвитанции = ПараметрыОтчета.ВыбранныеУслуги.ВыгрузитьКолонку("Услуга");
		
		Если ВыборУслуг = "Выбранные услуги" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоУслуге", "Услуга В (&УслугиДляКвитанции)");
		ИначеЕсли ВыборУслуг = "Все услуги, кроме выбранных" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоУслуге", "НЕ Услуга В (&УслугиДляКвитанции)");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("УслугиДляКвитанции", УслугиДляКвитанции);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоУслуге", "ИСТИНА");
	КонецЕсли;
	
	ТаблицаУслуг = Запрос.Выполнить().Выгрузить(); // Все услуги, доступные по настройке "Выбор услуг".
	
	// Общий список услуг:
	СписокУслуг = Новый СписокЗначений;
	СписокУслуг.ЗагрузитьЗначения(ТаблицаУслуг.ВыгрузитьКолонку("Услуга"));
	ПараметрыОтчета.Вставить("СписокУслуг", СписокУслуг);
	
	// Услуги кап ремонта после отбора.
	УслугиКапРемонта = ТаблицаУслуг.Скопировать(Новый Структура("УслугаКапРемонта", Истина), "Услуга");
	ПараметрыОтчета.СписокУслугКапРемонт.ЗагрузитьЗначения(УслугиКапРемонта.ВыгрузитьКолонку("Услуга"));
	
	// Услуги без кап ремонта
	ОснУслуги = ТаблицаУслуг.Скопировать(Новый Структура("УслугаКапРемонта", Ложь));
	
	ТекущийСписокУслуг = Новый СписокЗначений;
	ТекущийСписокУслуг.ЗагрузитьЗначения(ОснУслуги.ВыгрузитьКолонку("Услуга"));
	ПараметрыОтчета.Вставить("ТекущийСписокУслуг", ТекущийСписокУслуг);
	
	ПараметрыОтчета.Вставить("ТаблицаВидовУслуг", УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуВидовУслуг(ОснУслуги, ПараметрыОтчета.СписокУслугКапРемонт));
	
КонецПроцедуры // ПолучитьСпискиУслуг()

// На основе таблицы начисления формирует таблицу с информацией о начислениях
// по счетчикам.
//
// Параметры:
//  ТаблицаВсехНачислений - таблица начисления услуг со счетчиками.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с информацией о начислениях по счетчикам.
//
Функция ПолучитьТаблицуНачисленияПоСчетчикам(ТаблицаВсехНачислений, СтруктураНастроек) Экспорт
	
	ТаблицаНачисленияСчОбщая = ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаВсехНачислений, "УслугаПоСчетчикам", Истина, "ЭтоКоммунальнаяУслуга", Истина);
	
	// Также надо вывести показания счетчиков, установленных на составные услуги.
	// Счетчики по таким услугам на составляющие услуги не устанавливаются.
	СтрокиСоставныхУслуг = ТаблицаВсехНачислений.НайтиСтроки(Новый Структура("УслугаСоставнаяПоСчетчикам, СтрокаДетализацииСост", Истина, Ложь));
	Для Каждого СтрокаСоставнойУслуги Из СтрокиСоставныхУслуг Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаНачисленияСчОбщая.Добавить(), СтрокаСоставнойУслуги);
	КонецЦикла;
	
	ТаблицаНачисленияСчОбщая.Сортировать("Порядок");
	
	ТаблицаНачисленияСч = ТаблицаНачисленияСчОбщая.СкопироватьКолонки();
	
	ТаблицаУслуг = ТаблицаНачисленияСчОбщая.Скопировать(, "Услуга, СтрокаДляОбщегоИмущества");
	ТаблицаУслуг.Свернуть("Услуга, СтрокаДляОбщегоИмущества");
	
	Для Каждого Строка Из ТаблицаУслуг Цикл
		
		СтрокиТекУслуги  = ТаблицаНачисленияСчОбщая.НайтиСтроки(Новый Структура("Услуга, СтрокаДляОбщегоИмущества", Строка.Услуга, Строка.СтрокаДляОбщегоИмущества));
		ТаблицаТекУслуги = ТаблицаНачисленияСчОбщая.Скопировать(СтрокиТекУслуги);
		
		Если ТаблицаТекУслуги.Количество() = 1 Тогда
			НоваяСтрока    = ТаблицаНачисленияСч.Добавить();
			СтрокаИсточник = ТаблицаТекУслуги.Получить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
			НоваяСтрока.ЕдИзм = СтрокаИсточник.ЕдИзм;
			Если Не СтруктураНастроек.УслугиБезОДН.Найти(Строка.Услуга) = Неопределено Тогда
				НоваяСтрока.ОбщРасходИндПУ = СтрокаИсточник.ОбщРасходИнд;
			КонецЕсли;
			
		Иначе
			СтрокаИтогов = ТаблицаТекУслуги.Получить(0);
			СтрокаДн     = ТаблицаТекУслуги.Найти(Перечисления.КВП_ВидыТарифов.Дневной, "ВидТарифа");
			СтрокаНч     = ТаблицаТекУслуги.Найти(Перечисления.КВП_ВидыТарифов.Ночной,  "ВидТарифа");
			СтрокаПик    = ТаблицаТекУслуги.Найти(Перечисления.КВП_ВидыТарифов.Пиковый, "ВидТарифа");
			СтрокаОбщий  = ТаблицаТекУслуги.Найти(Перечисления.КВП_ВидыТарифов.Общий, "ВидТарифа");
			
			// Получим представление постфикса для наименования услуг СОИ.
			ПараметрыФормированияПД = СтруктураНастроек.ПараметрыФормированияПД;
			ПостфиксДляУслугСОИ     = ПараметрыФормированияПД.ПредставлениеУслугСОИ;
			
			ПриставкаКВидуУслуги = ?(Строка.СтрокаДляОбщегоИмущества = Истина, ПостфиксДляУслугСОИ, "");
			
			Если Не СтрокаДн = Неопределено Тогда
				НоваяСтрока = ТаблицаНачисленияСч.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДн);
				НоваяСтрока.ВидДляВывода = "" + СтрокаДн.ВидУслуги + ПриставкаКВидуУслуги + " (дн.)";
				НоваяСтрока.ЕдИзм        = СтрокаИтогов.ЕдИзм;
			КонецЕсли;
			
			Если Не СтрокаНч = Неопределено Тогда
				НоваяСтрока = ТаблицаНачисленияСч.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНч);
				НоваяСтрока.ВидДляВывода = "" + СтрокаНч.ВидУслуги + ПриставкаКВидуУслуги + " (нч.)";
				НоваяСтрока.ЕдИзм        = СтрокаИтогов.ЕдИзм;
			КонецЕсли;
			
			Если Не СтрокаПик = Неопределено Тогда
				НоваяСтрока = ТаблицаНачисленияСч.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПик);
				НоваяСтрока.ВидДляВывода = "" + СтрокаПик.ВидУслуги + ПриставкаКВидуУслуги + " (пик.)";
				НоваяСтрока.ЕдИзм        = СтрокаИтогов.ЕдИзм;
			КонецЕсли;
			
			Если Не СтрокаОбщий = Неопределено Тогда
				НоваяСтрока = ТаблицаНачисленияСч.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбщий);
				НоваяСтрока.ВидДляВывода = "" + СтрокаОбщий.ВидУслуги + ПриставкаКВидуУслуги + " (общ.)";
				НоваяСтрока.ЕдИзм        = СтрокаИтогов.ЕдИзм;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНачисленияСч;
	
КонецФункции // ПолучитьТаблицуНачисленияПоСчетчикам(ТаблицаНачисленияСчОбщая)

// (ПД для Чувашии) Формирует таблицу начисления по услугам с ОДН.
//
// Параметры:
//  ТаблицаКоммунальные - таблица начисления по услугам с ПУ.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица начисления по услугам с ОДН.
//
Функция ПолучитьТаблицуОДН(ТаблицаНачисления, ТаблицаКоммунальные) Экспорт
	
	ТаблицаОДН = ТаблицаНачисления.СкопироватьКолонки();
	
	КОплате = 0;
	
	Для Каждого Строка Из ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(Строка.ВидУслуги)
		   И ЗначениеЗаполнено(Строка.НачисленоОПУ)
		   И Не Строка.СтрокаДляОбщегоИмущества = Истина
		   И (НЕ ТаблицаКоммунальные.Количество() = 0 ИЛИ НЕ ТаблицаКоммунальные.Найти(Строка.ВидУслуги, "ВидУслуги") = Неопределено) Тогда
			
			НоваяСтрока = ТаблицаОДН.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.Перерасчет = НоваяСтрока.ПерерасчетОДН;
			
			Если НЕ Строка.СтрокаДетализацииТариф И НЕ Строка.СтрокаДетализацииСост Тогда
				КОплате = ?(ЗначениеЗаполнено(Строка.НачисленоОПУ), КОплате + Строка.НачисленоОПУ, КОплате) + Строка.ПерерасчетОДН;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаИтогов = ТаблицаОДН.Вставить(0);
	СтрокаИтогов.КОплате = КОплате;
	
	Возврат ТаблицаОДН;
	
КонецФункции // ПолучитьТаблицуОДН()

// Формирует таблицу с услугами, которые в соответствии с постановлением №1498 должны относиться к содержанию общего имущества.
//
Функция ПолучитьТаблицуУслугСОИ(ТаблицаНачисления, СтруктураНастроек, СортироватьТаблицуУслугПоПорядку = Истина) Экспорт
	
	ТаблицаУслуг = ТаблицаНачисления.Скопировать(Новый Структура("СтрокаДляОбщегоИмущества", Истина));
	
	Если СортироватьТаблицуУслугПоПорядку = Истина Тогда
		СортироватьТаблицуУслугПоПорядку(ТаблицаУслуг, СтруктураНастроек);
	КонецЕсли;
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПолучитьТаблицуУслугСОИ()

// (ПД для Пермского края) Функция возвращает таблицу с настройками услуг.
//
Функция ПолучитьТаблицуУслугПермь(ТаблицаНазначенныхУслуг)
	
	Таблица = ТаблицаНазначенныхУслуг.Скопировать();
	Таблица.Свернуть("Услуга, ИспользоватьФормулу15, НастройкаОграниченияОДННормативом");
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуУслугПермь()

// Определяет имеются ли показания счетчика по нескольким выдам тарифов.
//
// Параметры:
//  Строка - строка таблицы счетчиков.
//
// Возвращаемое значение:
//  Булево - признак, является ли счетчик многотарифным.
//
Функция СчетчикМноготарифный(Строка) Экспорт
	
	Счетчик = ?(ЗначениеЗаполнено(Строка.ПредыдущееПоказаниеДн), 1, 0);
	Счетчик = ?(ЗначениеЗаполнено(Строка.ПредыдущееПоказаниеНч), Счетчик + 1, Счетчик);
	Счетчик = ?(ЗначениеЗаполнено(Строка.ПредыдущееПоказаниеПк), Счетчик + 1, Счетчик);
	
	Если Счетчик > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // СчетчикМноготарифный()

// (ПД для Пермского края) Определяет представление текущего вида тарифа для строк таблицы счетчиков.
// 
// Параметры:
//  Строка - текущая строка таблицы.
//
// Возвращаемое значение:
//  Строка - представление текущего вида тарифа.
//
Функция ПредставлениеВидаТарифа(Строка) Экспорт
	
	Представление = "";
	
	Если Не Строка.ВидДляВывода = "" + Строка.ВидУслуги Тогда
		Если Строка.ВидТарифа = Перечисления.КВП_ВидыТарифов.Дневной Тогда
			Представление = " (дн.)";
		ИначеЕсли Строка.ВидТарифа = Перечисления.КВП_ВидыТарифов.Ночной Тогда
			Представление = " (нч.)";
		Иначе
			Представление = " (пик.)";
		КонецЕсли;		
	КонецЕсли;	
	
	Возврат Представление;
	
КонецФункции // ПредставлениеВидаТарифа()

// (ПД для Пермского края) Анализирует способы расчета всех услуг, входящих в текущую строку начисления,
// и устанавливает факт распределения ОДН по формуле 9.
//
// Параметры:
//  Строка - строка начисления.
//
// Возвращаемое значение:
//  Булево - факт использования формулы 9.
//
Функция ИспользуетсяФормула9(Строка) Экспорт
	
	Если ЗначениеЗаполнено(Строка.Услуга) Тогда
		Возврат Строка.Услуга.ИспользоватьФормулу9;
	Иначе
		Для Каждого Услуга Из Строка.МассивУслуг Цикл
			Если Услуга.ИспользоватьФормулу9 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ИспользуетсяФормула9()

// (ПД для Пермского края) Функция возвращает таблицу лицевых счетов с базами распределения ОДН по видам услуг.
//
Функция ПолучитьБазуРаспределенияПермь(СтруктураОбщихТаблиц, СтруктураНастроек)
	
	ПериодПросмотра                      = СтруктураНастроек.ПериодПросмотра;
	Организация                          = СтруктураНастроек.Организация;
	УказыватьКоличествоПрожИЗарегЧислами = СтруктураНастроек.УказыватьКоличествоПрожИЗарегЧислами;
	ТаблицаЗависимыхУслуг                = СтруктураОбщихТаблиц.ТаблицаЗависимыхУслуг;
	ТаблицаНачисленияОбщ                 = СтруктураОбщихТаблиц.ТаблицаНачисленияОбщ;
	ТаблицаНормОбщ                       = СтруктураОбщихТаблиц.ТаблицаНормОбщ;
	
	// 1. Произведем отбор сведений для анализа по способу расчета услуг.
	
	// Если в таблице начислений нет начислений по услугам по счетчикам, то возвращаем пустую таблицу.
	НайденныеСтрокиПоПоказаниямСчетчика          = ТаблицаНачисленияОбщ.НайтиСтроки(Новый Структура("УслугаПоСчетчикам", Истина));
	НайденныеСтрокиПоПоказаниямСчетчикаСоставная = ТаблицаНачисленияОбщ.НайтиСтроки(Новый Структура("УслугаСоставнаяПоСчетчикам", Истина));
	
	Если НайденныеСтрокиПоПоказаниямСчетчика.Количество() = 0 И НайденныеСтрокиПоПоказаниямСчетчикаСоставная.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	МассивСтрокОтбора = Новый Массив;
	Для Каждого ТекущаяСтрока Из НайденныеСтрокиПоПоказаниямСчетчика Цикл
		МассивСтрокОтбора.Добавить(ТекущаяСтрока);
	КонецЦикла;
	Для Каждого ТекущаяСтрока Из НайденныеСтрокиПоПоказаниямСчетчикаСоставная Цикл
		МассивСтрокОтбора.Добавить(ТекущаяСтрока);
	КонецЦикла;
	
	// Подготовим таблицу лицевых счетов с услугами.
	ТаблицаНачисления = ТаблицаНачисленияОбщ.Скопировать(МассивСтрокОтбора);
	ТаблицаНачисления = ТаблицаНачисления.Скопировать(, "ЛицевойСчет, Услуга");
	ТаблицаНачисления.Свернуть("ЛицевойСчет, Услуга");
	
	// 2. Произведем отбор сведений для анализа по способу распределения услуг.
	
	// Подготовим параметры отбора по способу распределения по услугам.
	СпособыРаспределенияУслуги = Новый СписокЗначений;
	СпособыРаспределенияУслуги.Добавить(Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади);
	СпособыРаспределенияУслуги.Добавить(Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов);
	
	ОснованияНормПотребления = Новый СписокЗначений;
	ОснованияНормПотребления.Добавить(Перечисления.КВП_ОснованияНормПотребления.Площадь);
	ОснованияНормПотребления.Добавить(Перечисления.КВП_ОснованияНормПотребления.ОдинЧеловек);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаНачисления",          ТаблицаНачисления);
	Запрос.УстановитьПараметр("СпособыРаспределенияУслуги", СпособыРаспределенияУслуги);
	
	Запрос.УстановитьПараметр("ТаблицаНормОбщ",             ТаблицаНормОбщ);
	Запрос.УстановитьПараметр("ОснованияНормПотребления",   ОснованияНормПотребления);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(врТаблицаНормОбщ.Объект КАК Справочник.КВП_Здания) КАК Здание,
	|	ВЫРАЗИТЬ(врТаблицаНормОбщ.Услуга КАК Справочник.КВП_Услуги) КАК Услуга,
	|	врТаблицаНормОбщ.Основание КАК Основание,
	|	врТаблицаНормОбщ.ВидПлощадиЗдания КАК ВидПлощадиДляРаспределенияПоЗданию,
	|	врТаблицаНормОбщ.ВидЖильцов КАК ВидЖильцовДляРаспределенияПоЗданию
	|ПОМЕСТИТЬ врТаблицаНормОбщ
	|ИЗ
	|	&ТаблицаНормОбщ КАК врТаблицаНормОбщ
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(врТаблицаНормОбщ.Объект) = ТИП(Справочник.КВП_Здания)
	|	И врТаблицаНормОбщ.Основание В(&ОснованияНормПотребления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаНачисления.ЛицевойСчет КАК Справочник.КВП_ЛицевыеСчета) КАК ЛицевойСчет,
	|	ВЫРАЗИТЬ(ТаблицаНачисления.Услуга КАК Справочник.КВП_Услуги) КАК Услуга
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	&ТаблицаНачисления КАК ТаблицаНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втНачисления.ЛицевойСчет КАК ЛицевойСчет,
	|	втНачисления.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	втНачисления.Услуга КАК Услуга
	|ИЗ
	|	втНачисления КАК втНачисления
	|ГДЕ
	|	втНачисления.Услуга.СпособРаспределенияУслугиПоСчетчику В(&СпособыРаспределенияУслуги)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.ЛицевойСчет.Адрес.Владелец,
	|	втНачисления.Услуга
	|ИЗ
	|	втНачисления КАК втНачисления
	|ГДЕ
	|	втНачисления.Услуга.РазрешитьРаспределениеОтрицательногоРасходаОПУ
	|	И втНачисления.Услуга.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику В(&СпособыРаспределенияУслуги)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.ЛицевойСчет.Адрес.Владелец,
	|	втНачисления.Услуга
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТаблицаНормОбщ КАК врТаблицаНормОбщ
	|		ПО втНачисления.ЛицевойСчет.Адрес.Владелец = врТаблицаНормОбщ.Здание
	|			И втНачисления.Услуга = врТаблицаНормОбщ.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНачисления";
	
	ТаблицаНачисленияИтоговая = Запрос.Выполнить().Выгрузить();
	
	// Если нет услуг со способами распределения ОДН по площади и по количеству жильцов, то не производим поиск баз распределения
	// и возвращаем пустую таблицу. Если такие услуги имеются, то данную таблицу используем для получения всех лицевых счетов зданий.
	Если ТаблицаНачисленияИтоговая.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	// Поместим таблицу с лицевыми счетами в пакет запроса для заполнения найденных значений баз распределения.
	Запрос.УстановитьПараметр("ТаблицаНачисленияИтоговая", ТаблицаНачисленияИтоговая);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНачисленияИтоговая.ЛицевойСчет,
	|	ТаблицаНачисленияИтоговая.Здание,
	|	ТаблицаНачисленияИтоговая.Услуга,
	|	0 КАК БазаРаспределенияОДНПоПлощади,
	|	0 КАК БазаРаспределенияОтрицательногоОДНПоПлощади,
	|	0 КАК БазаРаспределенияОДНПоЖильцам,
	|	0 КАК БазаРаспределенияОтрицательногоОДНПоЖильцам,
	|	ЛОЖЬ КАК ЭтоЗависимаяУслуга
	|ПОМЕСТИТЬ ТаблицаСБазамиРаспределения
	|ИЗ
	|	&ТаблицаНачисленияИтоговая КАК ТаблицаНачисленияИтоговая";
	Запрос.Выполнить();
	
	// 3. Произведем поиск сведений о способах распределения услуг по свем лицевым счетам зданий.
	
	СписокОставщихсяЛицевыхСчетов = Новый СписокЗначений;
	СписокОставщихсяЛицевыхСчетов.ЗагрузитьЗначения(ТаблицаНачисленияИтоговая.ВыгрузитьКолонку("ЛицевойСчет"));
	
	СписокЗданийДляПолученияСпискаЛС = КВП_ПолучитьСписокЗданийПоЛицевымСчетам(СписокОставщихсяЛицевыхСчетов);
	СписокВсехЛицевыхСчетовЗданий    = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(СписокЗданийДляПолученияСпискаЛС, НачалоМесяца(ПериодПросмотра), КонецМесяца(ПериодПросмотра), Ложь);
	
	Запрос.УстановитьПараметр("СписокВсехЛицевыхСчетовЗданий",        СписокВсехЛицевыхСчетовЗданий);
	Запрос.УстановитьПараметр("НачалоПериода",                        НачалоМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("КонецПериода",                         КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("Организация",                          Организация);
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", УказыватьКоличествоПрожИЗарегЧислами);
	Запрос.УстановитьПараметр("ТаблицаЗависимыхУслуг",                ТаблицаЗависимыхУслуг);
	
	Разделитель = 
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Получим лицевые счета с отбором по назначенным действующим услугам и сведения о способах распределения ОДН по услугам.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗависимыхУслуг.Объект КАК Здание,
	|	ТаблицаЗависимыхУслуг.Услуга КАК УслугаЗависимая,
	|	ТаблицаЗависимыхУслуг.УслугаОснование КАК УслугаОснование
	|ПОМЕСТИТЬ врТаблицаЗависимыхУслуг
	|ИЗ
	|	&ТаблицаЗависимыхУслуг КАК ТаблицаЗависимыхУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисления.Объект КАК ЛицевойСчет,
	|	КВП_НазначенныеНачисления.Объект.Адрес КАК Помещение,
	|	КВП_НазначенныеНачисления.Объект.Адрес.Владелец КАК Здание,
	|	КВП_НазначенныеНачисления.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА КВП_НазначенныеНачисления.Услуга.СпособРаспределенияУслугиПоСчетчику = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади)
	|			ТОГДА КВП_НазначенныеНачисления.Услуга.ВидПлощади
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ПустаяСсылка)
	|	КОНЕЦ КАК ВидПлощадиДляРаспределенияОДНПоСчетчику,
	|	ВЫБОР
	|		КОГДА КВП_НазначенныеНачисления.Услуга.РазрешитьРаспределениеОтрицательногоРасходаОПУ
	|			ТОГДА ВЫБОР
	|					КОГДА КВП_НазначенныеНачисления.Услуга.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади)
	|						ТОГДА КВП_НазначенныеНачисления.Услуга.ВидПлощадиРаспределенияОтрицательныхПоказаний
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ПустаяСсылка)
	|	КОНЕЦ КАК ВидПлощадиДляРаспределенияОтрицательногоРасходаОДН,
	|	ВЫБОР
	|		КОГДА КВП_НазначенныеНачисления.Услуга.СпособРаспределенияУслугиПоСчетчику = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов)
	|			ТОГДА КВП_НазначенныеНачисления.Услуга.ВидыЖильцов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцов.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЖильцовДляРаспределенияОДНПоСчетчику,
	|	ВЫБОР
	|		КОГДА КВП_НазначенныеНачисления.Услуга.РазрешитьРаспределениеОтрицательногоРасходаОПУ
	|			ТОГДА ВЫБОР
	|					КОГДА КВП_НазначенныеНачисления.Услуга.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов)
	|						ТОГДА КВП_НазначенныеНачисления.Услуга.ВидыЖильцовРаспределенияОтрицательныхПоказаний
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцов.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцов.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЖильцовРаспределенияОтрицательныхПоказаний,
	|	ВЫБОР
	|		КОГДА КВП_НазначенныеНачисления.Услуга.СпособРаспределенияУслугиПоСчетчику = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади)
	|			ТОГДА 1
	|		КОГДА КВП_НазначенныеНачисления.Услуга.СпособРаспределенияУслугиПоСчетчику = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов)
	|			ТОГДА 2
	|		КОГДА врТаблицаНормОбщ.Основание = ЗНАЧЕНИЕ(Перечисление.КВП_ОснованияНормПотребления.Площадь)
	|			ТОГДА 3
	|		КОГДА врТаблицаНормОбщ.Основание = ЗНАЧЕНИЕ(Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек)
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТипРаспределенияУслугиПоСчетчику,
	|	ВЫБОР
	|		КОГДА КВП_НазначенныеНачисления.Услуга.РазрешитьРаспределениеОтрицательногоРасходаОПУ
	|			ТОГДА ВЫБОР
	|					КОГДА КВП_НазначенныеНачисления.Услуга.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади)
	|						ТОГДА 1
	|					КОГДА КВП_НазначенныеНачисления.Услуга.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов)
	|						ТОГДА 2
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТипРаспределенияОтрицательногоРасходаОПУ,
	|	ВЫБОР
	|		КОГДА врТаблицаНормОбщ.Основание = ЗНАЧЕНИЕ(Перечисление.КВП_ОснованияНормПотребления.Площадь)
	|			ТОГДА ВЫБОР
	|					КОГДА врТаблицаНормОбщ.ВидПлощадиДляРаспределенияПоЗданию = ""ОбщаяПлощадьВсехПомещений""
	|						ТОГДА КВП_НазначенныеНачисления.Объект.Адрес.Владелец.ПлощадьЗданияОбщая
	|					КОГДА врТаблицаНормОбщ.ВидПлощадиДляРаспределенияПоЗданию = ""ОбщаяПлощадьВсехЖилыхНежилыхПомещений""
	|						ТОГДА КВП_НазначенныеНачисления.Объект.Адрес.Владелец.ПлощадьЗданияЖилыхНежилыхПомещений
	|					КОГДА врТаблицаНормОбщ.ВидПлощадиДляРаспределенияПоЗданию = ""ОбщаяПлощадьВсехПомещенийВСоставеОбщИмущества""
	|						ТОГДА КВП_НазначенныеНачисления.Объект.Адрес.Владелец.ПлощадьЗданияМестОбщегоПользования
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БазаРаспределенияОДНПоПлощадиЗдания
	|ПОМЕСТИТЬ втЛицевыеСчетаСНазначеннымиУслугами
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&КонецПериода,
	|			Объект В (&СписокВсехЛицевыхСчетовЗданий)
	|				И Организация = &Организация
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						ТаблицаСБазамиРаспределения.Услуга
	|					ИЗ
	|						ТаблицаСБазамиРаспределения КАК ТаблицаСБазамиРаспределения)) КАК КВП_НазначенныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаНормОбщ КАК врТаблицаНормОбщ
	|		ПО КВП_НазначенныеНачисления.Объект.Адрес.Владелец = врТаблицаНормОбщ.Здание
	|			И КВП_НазначенныеНачисления.Услуга = врТаблицаНормОбщ.Услуга
	|ГДЕ
	|	КВП_НазначенныеНачисления.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЛицевыеСчетаСНазначеннымиУслугами.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчетаСНазначеннымиУслугами.Помещение КАК Помещение,
	|	втЛицевыеСчетаСНазначеннымиУслугами.Здание КАК Здание,
	|	втЛицевыеСчетаСНазначеннымиУслугами.Услуга КАК Услуга,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ВидПлощадиДляРаспределенияОДНПоСчетчику КАК ВидПлощадиДляРаспределенияОДНПоСчетчику,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ВидПлощадиДляРаспределенияОтрицательногоРасходаОДН КАК ВидПлощадиДляРаспределенияОтрицательногоРасходаОДН,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ВидЖильцовДляРаспределенияОДНПоСчетчику КАК ВидЖильцовДляРаспределенияОДНПоСчетчику,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ВидЖильцовРаспределенияОтрицательныхПоказаний КАК ВидЖильцовРаспределенияОтрицательныхПоказаний,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ТипРаспределенияУслугиПоСчетчику КАК ТипРаспределенияУслугиПоСчетчику,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ТипРаспределенияОтрицательногоРасходаОПУ КАК ТипРаспределенияОтрицательногоРасходаОПУ,
	|	втЛицевыеСчетаСНазначеннымиУслугами.БазаРаспределенияОДНПоПлощадиЗдания КАК БазаРаспределенияОДНПоПлощадиЗдания,
	|	ЛОЖЬ КАК ЭтоЗависимаяУслуга
	|ПОМЕСТИТЬ втЛицевыеСчетаСНачислениями
	|ИЗ
	|	втЛицевыеСчетаСНазначеннымиУслугами КАК втЛицевыеСчетаСНазначеннымиУслугами
	|ГДЕ
	|	НЕ втЛицевыеСчетаСНазначеннымиУслугами.Услуга В
	|				(ВЫБРАТЬ
	|					врТаблицаЗависимыхУслуг.УслугаЗависимая
	|				ИЗ
	|					врТаблицаЗависимыхУслуг КАК врТаблицаЗависимыхУслуг)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЛицевыеСчетаСНазначеннымиУслугами.ЛицевойСчет,
	|	втЛицевыеСчетаСНазначеннымиУслугами.Помещение,
	|	втЛицевыеСчетаСНазначеннымиУслугами.Здание,
	|	врТаблицаЗависимыхУслуг.УслугаЗависимая,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ВидПлощадиДляРаспределенияОДНПоСчетчику,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ВидПлощадиДляРаспределенияОтрицательногоРасходаОДН,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ВидЖильцовДляРаспределенияОДНПоСчетчику,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ВидЖильцовРаспределенияОтрицательныхПоказаний,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ТипРаспределенияУслугиПоСчетчику,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ТипРаспределенияОтрицательногоРасходаОПУ,
	|	втЛицевыеСчетаСНазначеннымиУслугами.БазаРаспределенияОДНПоПлощадиЗдания,
	|	ИСТИНА
	|ИЗ
	|	втЛицевыеСчетаСНазначеннымиУслугами КАК втЛицевыеСчетаСНазначеннымиУслугами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТаблицаЗависимыхУслуг КАК врТаблицаЗависимыхУслуг
	|		ПО втЛицевыеСчетаСНазначеннымиУслугами.Здание = врТаблицаЗависимыхУслуг.Здание
	|			И втЛицевыеСчетаСНазначеннымиУслугами.Услуга = врТаблицаЗависимыхУслуг.УслугаОснование
	|ГДЕ
	|	НЕ врТаблицаЗависимыхУслуг.Здание = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЛицевыеСчетаСНазначеннымиУслугами.ЛицевойСчет,
	|	втЛицевыеСчетаСНазначеннымиУслугами.Помещение,
	|	втЛицевыеСчетаСНазначеннымиУслугами.Здание,
	|	врТаблицаЗависимыхУслуг.УслугаЗависимая,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ВидПлощадиДляРаспределенияОДНПоСчетчику,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ВидПлощадиДляРаспределенияОтрицательногоРасходаОДН,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ВидЖильцовДляРаспределенияОДНПоСчетчику,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ВидЖильцовРаспределенияОтрицательныхПоказаний,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ТипРаспределенияУслугиПоСчетчику,
	|	втЛицевыеСчетаСНазначеннымиУслугами.ТипРаспределенияОтрицательногоРасходаОПУ,
	|	втЛицевыеСчетаСНазначеннымиУслугами.БазаРаспределенияОДНПоПлощадиЗдания,
	|	ИСТИНА
	|ИЗ
	|	втЛицевыеСчетаСНазначеннымиУслугами КАК втЛицевыеСчетаСНазначеннымиУслугами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТаблицаЗависимыхУслуг КАК врТаблицаЗависимыхУслуг
	|		ПО втЛицевыеСчетаСНазначеннымиУслугами.Услуга = врТаблицаЗависимыхУслуг.УслугаОснование
	|ГДЕ
	|	врТаблицаЗависимыхУслуг.Здание = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)";
	
	// 4. Получим базы распределения по площади для распределения ОДН.
	
	// Отберем сведения только по распределению по площади.
	Запрос.Текст = Запрос.Текст + Разделитель +
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЛицевыеСчетаСНачислениями.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчетаСНачислениями.Здание КАК Здание,
	|	втЛицевыеСчетаСНачислениями.Помещение КАК Помещение,
	|	втЛицевыеСчетаСНачислениями.Услуга КАК Услуга,
	|	втЛицевыеСчетаСНачислениями.ТипРаспределенияУслугиПоСчетчику КАК ТипРаспределенияУслугиПоСчетчику,
	|	втЛицевыеСчетаСНачислениями.ТипРаспределенияОтрицательногоРасходаОПУ КАК ТипРаспределенияОтрицательногоРасходаОПУ,
	|	втЛицевыеСчетаСНачислениями.ВидПлощадиДляРаспределенияОДНПоСчетчику КАК ВидПлощадиДляРаспределенияОДНПоСчетчику,
	|	втЛицевыеСчетаСНачислениями.ВидПлощадиДляРаспределенияОтрицательногоРасходаОДН КАК ВидПлощадиДляРаспределенияОтрицательногоРасходаОДН,
	|	втЛицевыеСчетаСНачислениями.БазаРаспределенияОДНПоПлощадиЗдания КАК БазаРаспределенияОДНПоПлощадиЗдания,
	|	втЛицевыеСчетаСНачислениями.ЭтоЗависимаяУслуга
	|ПОМЕСТИТЬ ТаблицаДляРаспределенияОДНПоПлощади
	|ИЗ
	|	втЛицевыеСчетаСНачислениями КАК втЛицевыеСчетаСНачислениями
	|ГДЕ
	|	(втЛицевыеСчетаСНачислениями.ТипРаспределенияУслугиПоСчетчику = 1
	|			ИЛИ втЛицевыеСчетаСНачислениями.ТипРаспределенияУслугиПоСчетчику = 3
	|			ИЛИ втЛицевыеСчетаСНачислениями.ТипРаспределенияОтрицательногоРасходаОПУ = 1)";
	
	//Получим хоть какой-то результат для определения, нужно ли производить поиск базы распределения по площади.
	
	Запрос.Текст = Запрос.Текст + Разделитель +
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	*
	|ИЗ
	|	ТаблицаДляРаспределенияОДНПоПлощади КАК ТаблицаДляРаспределенияОДНПоПлощади";
	
	Результат = Запрос.Выполнить();
	
	// Если имеются сведения по типам распределения услуг для расчета базы распределения ОДН по площади,
	// то получим данные базы распределения по площади.
	
	Если НЕ Результат.Пустой() Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА НЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
		|			ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДоляЛС
		|ПОМЕСТИТЬ втДолиВсехЛС
		|ИЗ
		|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
		|			&КонецПериода,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					ТаблицаДляРаспределенияОДНПоПлощади.ЛицевойСчет
		|				ИЗ
		|					ТаблицаДляРаспределенияОДНПоПлощади КАК ТаблицаДляРаспределенияОДНПоПлощади
		|				ГДЕ
		|					НЕ ТаблицаДляРаспределенияОДНПоПлощади.ТипРаспределенияУслугиПоСчетчику = 3)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
		|	КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади КАК ВидПлощади,
		|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК Площадь
		|ПОМЕСТИТЬ втПлощадиВсехПомещений
		|ИЗ
		|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
		|			&КонецПериода,
		|			(Объект, ВидПлощади) В
		|		(ВЫБРАТЬ
		|			ТаблицаДляРаспределенияОДНПоПлощади.Помещение,
		|			ТаблицаДляРаспределенияОДНПоПлощади.ВидПлощадиДляРаспределенияОДНПоСчетчику КАК ВидПлощади
		|		ИЗ
		|			ТаблицаДляРаспределенияОДНПоПлощади КАК ТаблицаДляРаспределенияОДНПоПлощади
		|		ГДЕ
		|			НЕ ТаблицаДляРаспределенияОДНПоПлощади.ТипРаспределенияУслугиПоСчетчику = 3
		|	
		|		ОБЪЕДИНИТЬ
		|	
		|		ВЫБРАТЬ
		|			ТаблицаДляРаспределенияОДНПоПлощади.Помещение,
		|			ТаблицаДляРаспределенияОДНПоПлощади.ВидПлощадиДляРаспределенияОтрицательногоРасходаОДН КАК ВидПлощади
		|		ИЗ
		|			ТаблицаДляРаспределенияОДНПоПлощади КАК ТаблицаДляРаспределенияОДНПоПлощади
		|		ГДЕ
		|			НЕ ТаблицаДляРаспределенияОДНПоПлощади.ТипРаспределенияУслугиПоСчетчику = 3)) КАК КВП_ПлощадьПомещенияСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Помещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДляРаспределенияОДНПоПлощади.Здание КАК Здание,
		|	ТаблицаДляРаспределенияОДНПоПлощади.Услуга КАК Услуга,
		|	ТаблицаДляРаспределенияОДНПоПлощади.ЭтоЗависимаяУслуга КАК ЭтоЗависимаяУслуга,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаДляРаспределенияОДНПоПлощади.ТипРаспределенияУслугиПоСчетчику = 1
		|					И ТаблицаДляРаспределенияОДНПоПлощади.ВидПлощадиДляРаспределенияОДНПоСчетчику = втПлощадиВсехПомещений.ВидПлощади
		|				ТОГДА ЕСТЬNULL(втПлощадиВсехПомещений.Площадь, 0) * ЕСТЬNULL(втДолиВсехЛС.ДоляЛС, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПлощадиДляРаспределенияОДНПоСчетчику,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаДляРаспределенияОДНПоПлощади.ТипРаспределенияОтрицательногоРасходаОПУ = 1
		|					И ТаблицаДляРаспределенияОДНПоПлощади.ВидПлощадиДляРаспределенияОтрицательногоРасходаОДН = втПлощадиВсехПомещений.ВидПлощади
		|				ТОГДА ЕСТЬNULL(втПлощадиВсехПомещений.Площадь, 0) * ЕСТЬNULL(втДолиВсехЛС.ДоляЛС, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПлощадиДляРаспределенияОтрицательногоРасходаОДН
		|ПОМЕСТИТЬ втПлощадиПомещенийПоЗданиям
		|ИЗ
		|	ТаблицаДляРаспределенияОДНПоПлощади КАК ТаблицаДляРаспределенияОДНПоПлощади
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДолиВсехЛС КАК втДолиВсехЛС
		|		ПО ТаблицаДляРаспределенияОДНПоПлощади.ЛицевойСчет = втДолиВсехЛС.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиВсехПомещений КАК втПлощадиВсехПомещений
		|		ПО ТаблицаДляРаспределенияОДНПоПлощади.Помещение = втПлощадиВсехПомещений.Помещение
		|ГДЕ
		|	НЕ ТаблицаДляРаспределенияОДНПоПлощади.ТипРаспределенияУслугиПоСчетчику = 3
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДляРаспределенияОДНПоПлощади.Здание,
		|	ТаблицаДляРаспределенияОДНПоПлощади.Услуга,
		|	ТаблицаДляРаспределенияОДНПоПлощади.ЭтоЗависимаяУслуга
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДляРаспределенияОДНПоПлощади.Здание,
		|	ТаблицаДляРаспределенияОДНПоПлощади.Услуга,
		|	ТаблицаДляРаспределенияОДНПоПлощади.ЭтоЗависимаяУслуга,
		|	ТаблицаДляРаспределенияОДНПоПлощади.БазаРаспределенияОДНПоПлощадиЗдания,
		|	0
		|ИЗ
		|	ТаблицаДляРаспределенияОДНПоПлощади КАК ТаблицаДляРаспределенияОДНПоПлощади
		|ГДЕ
		|	ТаблицаДляРаспределенияОДНПоПлощади.ТипРаспределенияУслугиПоСчетчику = 3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втДолиВсехЛС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втПлощадиВсехПомещений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСБазамиРаспределения.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаСБазамиРаспределения.Здание КАК Здание,
		|	ТаблицаСБазамиРаспределения.Услуга КАК Услуга,
		|	ЕСТЬNULL(втПлощадиПомещенийПоЗданиям.ЭтоЗависимаяУслуга, ЛОЖЬ) КАК ЭтоЗависимаяУслуга,
		|	ЕСТЬNULL(втПлощадиПомещенийПоЗданиям.ПлощадиДляРаспределенияОДНПоСчетчику, 0) КАК БазаРаспределенияОДНПоПлощади,
		|	ЕСТЬNULL(втПлощадиПомещенийПоЗданиям.ПлощадиДляРаспределенияОтрицательногоРасходаОДН, 0) КАК БазаРаспределенияОтрицательногоОДНПоПлощади,
		|	ТаблицаСБазамиРаспределения.БазаРаспределенияОДНПоЖильцам КАК БазаРаспределенияОДНПоЖильцам,
		|	ТаблицаСБазамиРаспределения.БазаРаспределенияОтрицательногоОДНПоЖильцам КАК БазаРаспределенияОтрицательногоОДНПоЖильцам
		|ПОМЕСТИТЬ врТаблицаСБазамиРаспределенияПоПлощади
		|ИЗ
		|	ТаблицаСБазамиРаспределения КАК ТаблицаСБазамиРаспределения
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещенийПоЗданиям КАК втПлощадиПомещенийПоЗданиям
		|		ПО ТаблицаСБазамиРаспределения.Здание = втПлощадиПомещенийПоЗданиям.Здание
		|			И ТаблицаСБазамиРаспределения.Услуга = втПлощадиПомещенийПоЗданиям.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втПлощадиПомещенийПоЗданиям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаСБазамиРаспределения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врТаблицаСБазамиРаспределенияПоПлощади.ЛицевойСчет КАК ЛицевойСчет,
		|	врТаблицаСБазамиРаспределенияПоПлощади.Здание КАК Здание,
		|	врТаблицаСБазамиРаспределенияПоПлощади.Услуга КАК Услуга,
		|	врТаблицаСБазамиРаспределенияПоПлощади.БазаРаспределенияОДНПоПлощади КАК БазаРаспределенияОДНПоПлощади,
		|	врТаблицаСБазамиРаспределенияПоПлощади.БазаРаспределенияОтрицательногоОДНПоПлощади КАК БазаРаспределенияОтрицательногоОДНПоПлощади,
		|	врТаблицаСБазамиРаспределенияПоПлощади.БазаРаспределенияОДНПоЖильцам КАК БазаРаспределенияОДНПоЖильцам,
		|	врТаблицаСБазамиРаспределенияПоПлощади.БазаРаспределенияОтрицательногоОДНПоЖильцам КАК БазаРаспределенияОтрицательногоОДНПоЖильцам,
		|	врТаблицаСБазамиРаспределенияПоПлощади.ЭтоЗависимаяУслуга КАК ЭтоЗависимаяУслуга
		|ПОМЕСТИТЬ ТаблицаСБазамиРаспределения
		|ИЗ
		|	врТаблицаСБазамиРаспределенияПоПлощади КАК врТаблицаСБазамиРаспределенияПоПлощади
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ врТаблицаСБазамиРаспределенияПоПлощади";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// 5. Получим базу распределения по жильцам.
	
	// Отберем сведения по распределению ОДН только по жильцам.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЛицевыеСчетаСНачислениями.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчетаСНачислениями.Здание КАК Здание,
	|	втЛицевыеСчетаСНачислениями.Услуга КАК Услуга,
	|	втЛицевыеСчетаСНачислениями.ТипРаспределенияУслугиПоСчетчику КАК ТипРаспределенияУслугиПоСчетчику,
	|	втЛицевыеСчетаСНачислениями.ТипРаспределенияОтрицательногоРасходаОПУ КАК ТипРаспределенияОтрицательногоРасходаОПУ,
	|	втЛицевыеСчетаСНачислениями.ВидЖильцовДляРаспределенияОДНПоСчетчику КАК ВидЖильцовДляРаспределенияОДНПоСчетчику,
	|	втЛицевыеСчетаСНачислениями.ВидЖильцовРаспределенияОтрицательныхПоказаний КАК ВидЖильцовРаспределенияОтрицательныхПоказаний,
	|	втЛицевыеСчетаСНачислениями.ЭтоЗависимаяУслуга
	|ПОМЕСТИТЬ ТаблицаДляРаспределенияОДНПоЖильцам
	|ИЗ
	|	втЛицевыеСчетаСНачислениями КАК втЛицевыеСчетаСНачислениями
	|ГДЕ
	|	(втЛицевыеСчетаСНачислениями.ТипРаспределенияУслугиПоСчетчику = 2
	|			ИЛИ втЛицевыеСчетаСНачислениями.ТипРаспределенияУслугиПоСчетчику = 4
	|			ИЛИ втЛицевыеСчетаСНачислениями.ТипРаспределенияОтрицательногоРасходаОПУ = 2)";
	
	// Получим хоть какой-то результат для определения, нужно ли производить поиск базы распределения по количеству жильцов.
	
	Запрос.Текст = Запрос.Текст + Разделитель +
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	*
	|ИЗ
	|	ТаблицаДляРаспределенияОДНПоЖильцам КАК ТаблицаДляРаспределенияОДНПоЖильцам";
	
	Результат = Запрос.Выполнить();
	
	// Если имеются сведения по типам распределения услуг для расчета базы распределения ОДН по количеству жильцов,
	// то получим данные базы распределения по количеству жильцов.
	Если НЕ Результат.Пустой() Тогда
		
		// Сначала получим количество проживающих и количество зарегистрированных, в зависимости от настройки "Указывать количество проживающих
		// и зарегистрированных готовыми числами".
		Если УказыватьКоличествоПрожИЗарегЧислами Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет,
			|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих,
			|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных
			|ПОМЕСТИТЬ КоличествоЖильцовПоЛицевымСчетам
			|ИЗ
			|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
			|			&КонецПериода,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					ТаблицаДляРаспределенияОДНПоЖильцам.ЛицевойСчет
			|				ИЗ
			|					ТаблицаДляРаспределенияОДНПоЖильцам КАК ТаблицаДляРаспределенияОДНПоЖильцам)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КоличествоПроживающих,
			|	СУММА(0) КАК КоличествоЗарегистрированных
			|ПОМЕСТИТЬ СведенияОЗарегистрированныхИПроживающих
			|ИЗ
			|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
			|			&КонецПериода,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					ТаблицаДляРаспределенияОДНПоЖильцам.ЛицевойСчет
			|				ИЗ
			|					ТаблицаДляРаспределенияОДНПоЖильцам КАК ТаблицаДляРаспределенияОДНПоЖильцам
			|				ГДЕ
			|					ТаблицаДляРаспределенияОДНПоЖильцам.ВидЖильцовДляРаспределенияОДНПоСчетчику = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцов.Проживающие)
			|			
			|				ОБЪЕДИНИТЬ
			|			
			|				ВЫБРАТЬ
			|					ТаблицаДляРаспределенияОДНПоЖильцам.ЛицевойСчет
			|				ИЗ
			|					ТаблицаДляРаспределенияОДНПоЖильцам КАК ТаблицаДляРаспределенияОДНПоЖильцам
			|				ГДЕ
			|					ТаблицаДляРаспределенияОДНПоЖильцам.ВидЖильцовРаспределенияОтрицательныхПоказаний = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцов.Проживающие))) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
			|ГДЕ
			|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
			|
			|СГРУППИРОВАТЬ ПО
			|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
			|	СУММА(0),
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец)
			|ИЗ
			|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
			|			&КонецПериода,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					ТаблицаДляРаспределенияОДНПоЖильцам.ЛицевойСчет
			|				ИЗ
			|					ТаблицаДляРаспределенияОДНПоЖильцам КАК ТаблицаДляРаспределенияОДНПоЖильцам
			|				ГДЕ
			|					ТаблицаДляРаспределенияОДНПоЖильцам.ВидЖильцовДляРаспределенияОДНПоСчетчику = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцов.Зарегистрированные)
			|			
			|				ОБЪЕДИНИТЬ
			|			
			|				ВЫБРАТЬ
			|					ТаблицаДляРаспределенияОДНПоЖильцам.ЛицевойСчет
			|				ИЗ
			|					ТаблицаДляРаспределенияОДНПоЖильцам КАК ТаблицаДляРаспределенияОДНПоЖильцам
			|				ГДЕ
			|					ТаблицаДляРаспределенияОДНПоЖильцам.ВидЖильцовРаспределенияОтрицательныхПоказаний = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцов.Зарегистрированные))) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
			|ГДЕ
			|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
			|
			|СГРУППИРОВАТЬ ПО
			|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СведенияОЗарегистрированныхИПроживающих.ЛицевойСчет,
			|	СУММА(СведенияОЗарегистрированныхИПроживающих.КоличествоПроживающих) КАК КоличествоПроживающих,
			|	СУММА(СведенияОЗарегистрированныхИПроживающих.КоличествоЗарегистрированных) КАК КоличествоЗарегистрированных
			|ПОМЕСТИТЬ КоличествоЖильцовПоЛицевымСчетам
			|ИЗ
			|	СведенияОЗарегистрированныхИПроживающих КАК СведенияОЗарегистрированныхИПроживающих
			|
			|СГРУППИРОВАТЬ ПО
			|	СведенияОЗарегистрированныхИПроживающих.ЛицевойСчет";
			
		КонецЕсли;
		
		// Затем получим базы распределения по лицевым счетам.
		Запрос.Текст = Запрос.Текст + Разделитель +
		"ВЫБРАТЬ
		|	ТаблицаДляРаспределенияОДНПоЖильцам.Здание КАК Здание,
		|	ТаблицаДляРаспределенияОДНПоЖильцам.Услуга КАК Услуга,
		|	ТаблицаДляРаспределенияОДНПоЖильцам.ЭтоЗависимаяУслуга КАК ЭтоЗависимаяУслуга,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаДляРаспределенияОДНПоЖильцам.ТипРаспределенияУслугиПоСчетчику = 2
		|					ИЛИ ТаблицаДляРаспределенияОДНПоЖильцам.ТипРаспределенияУслугиПоСчетчику = 4
		|				ТОГДА ВЫБОР
		|						КОГДА ТаблицаДляРаспределенияОДНПоЖильцам.ВидЖильцовДляРаспределенияОДНПоСчетчику = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцов.Зарегистрированные)
		|							ТОГДА ЕСТЬNULL(КоличествоЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных, 0)
		|						КОГДА ТаблицаДляРаспределенияОДНПоЖильцам.ВидЖильцовДляРаспределенияОДНПоСчетчику = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцов.Проживающие)
		|							ТОГДА ЕСТЬNULL(КоличествоЖильцовПоЛицевымСчетам.КоличествоПроживающих, 0)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК БазаРаспределенияОДНПоЖильцам,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаДляРаспределенияОДНПоЖильцам.ТипРаспределенияОтрицательногоРасходаОПУ = 2
		|				ТОГДА ВЫБОР
		|						КОГДА ТаблицаДляРаспределенияОДНПоЖильцам.ВидЖильцовРаспределенияОтрицательныхПоказаний = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцов.Зарегистрированные)
		|							ТОГДА ЕСТЬNULL(КоличествоЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных, 0)
		|						КОГДА ТаблицаДляРаспределенияОДНПоЖильцам.ВидЖильцовРаспределенияОтрицательныхПоказаний = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцов.Проживающие)
		|							ТОГДА ЕСТЬNULL(КоличествоЖильцовПоЛицевымСчетам.КоличествоПроживающих, 0)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК БазаРаспределенияОтрицательногоОДНПоЖильцам
		|ПОМЕСТИТЬ СводнаяТаблицаКоличествоЖильцовПоЗданиям
		|ИЗ
		|	ТаблицаДляРаспределенияОДНПоЖильцам КАК ТаблицаДляРаспределенияОДНПоЖильцам
		|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоЖильцовПоЛицевымСчетам КАК КоличествоЖильцовПоЛицевымСчетам
		|		ПО ТаблицаДляРаспределенияОДНПоЖильцам.ЛицевойСчет = КоличествоЖильцовПоЛицевымСчетам.ЛицевойСчет
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДляРаспределенияОДНПоЖильцам.Здание,
		|	ТаблицаДляРаспределенияОДНПоЖильцам.Услуга,
		|	ТаблицаДляРаспределенияОДНПоЖильцам.ЭтоЗависимаяУслуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСБазамиРаспределения.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаСБазамиРаспределения.Здание КАК Здание,
		|	ТаблицаСБазамиРаспределения.Услуга КАК Услуга,
		|	ТаблицаСБазамиРаспределения.БазаРаспределенияОДНПоПлощади КАК БазаРаспределенияОДНПоПлощади,
		|	ТаблицаСБазамиРаспределения.БазаРаспределенияОтрицательногоОДНПоПлощади КАК БазаРаспределенияОтрицательногоОДНПоПлощади,
		|	ЕСТЬNULL(СводнаяТаблицаКоличествоЖильцовПоЗданиям.ЭтоЗависимаяУслуга, ЛОЖЬ) КАК ЭтоЗависимаяУслуга,
		|	ЕСТЬNULL(СводнаяТаблицаКоличествоЖильцовПоЗданиям.БазаРаспределенияОДНПоЖильцам, 0) КАК БазаРаспределенияОДНПоЖильцам,
		|	ЕСТЬNULL(СводнаяТаблицаКоличествоЖильцовПоЗданиям.БазаРаспределенияОтрицательногоОДНПоЖильцам, 0) КАК БазаРаспределенияОтрицательногоОДНПоЖильцам
		|ПОМЕСТИТЬ врТаблицаСБазамиРаспределенияПоЖильцам
		|ИЗ
		|	ТаблицаСБазамиРаспределения КАК ТаблицаСБазамиРаспределения
		|		ЛЕВОЕ СОЕДИНЕНИЕ СводнаяТаблицаКоличествоЖильцовПоЗданиям КАК СводнаяТаблицаКоличествоЖильцовПоЗданиям
		|		ПО ТаблицаСБазамиРаспределения.Здание = СводнаяТаблицаКоличествоЖильцовПоЗданиям.Здание
		|			И ТаблицаСБазамиРаспределения.Услуга = СводнаяТаблицаКоличествоЖильцовПоЗданиям.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаСБазамиРаспределения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаДляРаспределенияОДНПоЖильцам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СводнаяТаблицаКоличествоЖильцовПоЗданиям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врТаблицаСБазамиРаспределенияПоЖильцам.ЛицевойСчет КАК ЛицевойСчет,
		|	врТаблицаСБазамиРаспределенияПоЖильцам.Здание КАК Здание,
		|	врТаблицаСБазамиРаспределенияПоЖильцам.Услуга КАК Услуга,
		|	врТаблицаСБазамиРаспределенияПоЖильцам.БазаРаспределенияОДНПоПлощади КАК БазаРаспределенияОДНПоПлощади,
		|	врТаблицаСБазамиРаспределенияПоЖильцам.БазаРаспределенияОтрицательногоОДНПоПлощади КАК БазаРаспределенияОтрицательногоОДНПоПлощади,
		|	врТаблицаСБазамиРаспределенияПоЖильцам.БазаРаспределенияОДНПоЖильцам КАК БазаРаспределенияОДНПоЖильцам,
		|	врТаблицаСБазамиРаспределенияПоЖильцам.БазаРаспределенияОтрицательногоОДНПоЖильцам КАК БазаРаспределенияОтрицательногоОДНПоЖильцам,
		|	врТаблицаСБазамиРаспределенияПоЖильцам.ЭтоЗависимаяУслуга КАК ЭтоЗависимаяУслуга
		|ПОМЕСТИТЬ ТаблицаСБазамиРаспределения
		|ИЗ
		|	врТаблицаСБазамиРаспределенияПоЖильцам КАК врТаблицаСБазамиРаспределенияПоЖильцам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ врТаблицаСБазамиРаспределенияПоЖильцам";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// Итоговая таблица баз распределения.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСБазамиРаспределения.ЛицевойСчет,
	|	ТаблицаСБазамиРаспределения.Услуга,
	|	ТаблицаСБазамиРаспределения.БазаРаспределенияОДНПоПлощади,
	|	ТаблицаСБазамиРаспределения.БазаРаспределенияОтрицательногоОДНПоПлощади,
	|	ТаблицаСБазамиРаспределения.БазаРаспределенияОДНПоЖильцам,
	|	ТаблицаСБазамиРаспределения.БазаРаспределенияОтрицательногоОДНПоЖильцам,
	|	ТаблицаСБазамиРаспределения.ЭтоЗависимаяУслуга
	|ИЗ
	|	ТаблицаСБазамиРаспределения КАК ТаблицаСБазамиРаспределения";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Индексы.Добавить("ЛицевойСчет");
	
	Возврат Таблица;
	
КонецФункции // ПолучитьБазуРаспределенияПермь()

// Формирует список всех форм квитанций и платежных документов.
//
// Параметры:
//
// Возвращаемое значение:
//  СписокЗначений
//
Функция СформироватьСписокФормКвитанции() Экспорт
	
	СписокФорм = Новый СписокЗначений;
	
	СписокФорм.Очистить();
	
	Для Каждого ТекФорма Из Перечисления.УПЖКХ_ВидыПлатежныхДокументов Цикл
		//Плат. документ (приказ №924/пр) устарел и не должен отображаться.
		Если Не ПлатежныйДокументСкрыт(ТекФорма) Тогда
			СписокФорм.Добавить(ТекФорма, ТекФорма);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекФорма Из Метаданные.Отчеты.УПЖКХ_КвитанцииИзвещения.Формы Цикл
		Если Найти(ТекФорма.Имя, "Форма_") = 1
		   И СтрДлина(ТекФорма.Имя) = СтрДлина("Форма_00") Тогда
			ИмяФормы = Прав(ТекФорма.Имя, 2);
			СписокФорм.Добавить(ИмяФормы, ИмяФормы);
		КонецЕсли;
	КонецЦикла;
	
	СписокФорм.Добавить("Внешний отчет", "Выбрать из внешних отчетов...");
	
	Возврат СписокФорм;
	
КонецФункции // СформироватьСписокФормКвитанции()

// Проверяет необходимость скрыть платежный документ.
//
Функция ПлатежныйДокументСкрыт(Макет) Экспорт
	
	Если Макет = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР 
	 Или Макет = Метаданные.Отчеты.УПЖКХ_ПлатежныйДокумент.Макеты.ПФ_MXL_МакетСтандартныйКР Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // СформироватьСписокФормКвитанции()

// Формирует таблицу соответствия видов квитанций с их макетами.
//
Функция ПолучитьТаблицуСоответствияФормКвитанцийИМакетов() Экспорт
	
	МассивТиповФормКвитанций = Новый Массив;
	МассивТиповФормКвитанций.Добавить(Тип("Строка"));
	МассивТиповФормКвитанций.Добавить(Тип("ПеречислениеСсылка.УПЖКХ_ВидыПлатежныхДокументов"));
	
	ТаблицаФормКвитанцийИМакетов = Новый ТаблицаЗначений;
	ТаблицаФормКвитанцийИМакетов.Колонки.Добавить("ФормаКвитанции", Новый ОписаниеТипов(МассивТиповФормКвитанций,,,, Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаФормКвитанцийИМакетов.Колонки.Добавить("ОбъектКвитанции", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаФормКвитанцийИМакетов.Колонки.Добавить("МакетКвитанции", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	
	// Платежный документ.
	НоваяСтрока = ТаблицаФормКвитанцийИМакетов.Добавить();
	НоваяСтрока.ФормаКвитанции  = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный;
	НоваяСтрока.ОбъектКвитанции = "Отчет.УПЖКХ_ПлатежныйДокумент";
	НоваяСтрока.МакетКвитанции  = "ПФ_MXL_МакетСтандартный";
	
	НоваяСтрока = ТаблицаФормКвитанцийИМакетов.Добавить();
	НоваяСтрока.ФормаКвитанции  = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР;
	НоваяСтрока.ОбъектКвитанции = "Отчет.УПЖКХ_ПлатежныйДокумент";
	НоваяСтрока.МакетКвитанции  = "ПФ_MXL_МакетСтандартныйКР";
	
	НоваяСтрока = ТаблицаФормКвитанцийИМакетов.Добавить();
	НоваяСтрока.ФормаКвитанции  = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка1;
	НоваяСтрока.ОбъектКвитанции = "Отчет.УПЖКХ_ПлатежныйДокумент";
	НоваяСтрока.МакетКвитанции  = "ПФ_MXL_МакетСПолямиБанка1";
	
	НоваяСтрока = ТаблицаФормКвитанцийИМакетов.Добавить();
	НоваяСтрока.ФормаКвитанции  = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка2;
	НоваяСтрока.ОбъектКвитанции = "Отчет.УПЖКХ_ПлатежныйДокумент";
	НоваяСтрока.МакетКвитанции  = "ПФ_MXL_МакетСПолямиБанка2";
	
	НоваяСтрока = ТаблицаФормКвитанцийИМакетов.Добавить();
	НоваяСтрока.ФормаКвитанции  = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.ПермскийКрай;
	НоваяСтрока.ОбъектКвитанции = "Отчет.УПЖКХ_ПлатежныйДокумент";
	НоваяСтрока.МакетКвитанции  = "ПФ_MXL_МакетПермь";
	
	НоваяСтрока = ТаблицаФормКвитанцийИМакетов.Добавить();
	НоваяСтрока.ФормаКвитанции  = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Чебоксары;
	НоваяСтрока.ОбъектКвитанции = "Отчет.УПЖКХ_ПлатежныйДокумент";
	НоваяСтрока.МакетКвитанции  = "ПФ_MXL_МакетЧебоксары";
	
	НоваяСтрока = ТаблицаФормКвитанцийИМакетов.Добавить();
	НоваяСтрока.ФормаКвитанции  = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва;
	НоваяСтрока.ОбъектКвитанции = "Отчет.УПЖКХ_ПлатежныйДокумент";
	НоваяСтрока.МакетКвитанции  = "ПФ_MXL_МакетМосковскаяОбласть";
	
	НоваяСтрока = ТаблицаФормКвитанцийИМакетов.Добавить();
	НоваяСтрока.ФормаКвитанции  = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва679;
	НоваяСтрока.ОбъектКвитанции = "Отчет.УПЖКХ_ПлатежныйДокумент";
	НоваяСтрока.МакетКвитанции  = "ПФ_MXL_МакетМосковскаяОбласть679";
	
	НоваяСтрока = ТаблицаФормКвитанцийИМакетов.Добавить();
	НоваяСтрока.ФормаКвитанции  = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный43Пр;
	НоваяСтрока.ОбъектКвитанции = "Отчет.УПЖКХ_ПлатежныйДокумент";
	НоваяСтрока.МакетКвитанции  = "ПФ_MXL_МакетСтандартный43Пр";
	
	// КвитанцииИзвещения.
	Для Каждого ТекФорма Из Метаданные.Отчеты.УПЖКХ_КвитанцииИзвещения.Формы Цикл
		Если Найти(ТекФорма.Имя, "Форма_") = 1
		   И СтрДлина(ТекФорма.Имя) = СтрДлина("Форма_00") Тогда
			
			НоваяСтрока = ТаблицаФормКвитанцийИМакетов.Добавить();
			НоваяСтрока.ФормаКвитанции = Прав(ТекФорма.Имя, 2);
			НоваяСтрока.ОбъектКвитанции = "Отчет.УПЖКХ_КвитанцииИзвещения";
			НоваяСтрока.МакетКвитанции = "ПФ_MXL_Макет_" + НоваяСтрока.ФормаКвитанции;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаФормКвитанцийИМакетов;
	
КонецФункции

// Получает наименование макета по переданному виду витанции.
//
Функция ПолучитьНаименованиеМакетаПоФормеКвитанции(ВидМакета) Экспорт
	
	МакетКвитанции = "";
	
	ТаблицаСоответствияФормКвитанцийИМакетов = ПолучитьТаблицуСоответствияФормКвитанцийИМакетов();
	
	СтрокиВидаМакета = ТаблицаСоответствияФормКвитанцийИМакетов.НайтиСтроки(Новый Структура("ФормаКвитанции", ВидМакета));
	
	Если НЕ СтрокиВидаМакета.Количество() = 0 Тогда
		
		МакетКвитанции = СтрокиВидаМакета[0].МакетКвитанции;
		
	КонецЕсли;
	
	Возврат МакетКвитанции;
	
КонецФункции

// Функция устанавливает факт необходимости печатать квитанцию согласно отбору квитанций.
//
Функция ПечататьКвитанцииПоОтбору(СтруктураОбщихТаблиц, ОбщиеДанные, СтруктураНастроек, ТекущаяКвитанцияПоПеням) Экспорт
	
	ПечататьКвитанцию = Истина;
	
	Если СтруктураНастроек.ОтборКвитанций = Перечисления.УПЖКХ_ЗначенияОтбораКвитанций.ПечататьВсеКвитанции Тогда
		Возврат ПечататьКвитанцию;
	КонецЕсли;
	
	// Выбираем из общей таблицы начислений начисления по текущему л/с.
	Если СтруктураНастроек.ОтборКвитанций = Перечисления.УПЖКХ_ЗначенияОтбораКвитанций.ПечататьКвитанцииСИтоговойСуммойВИнтервале Тогда
		
		Если СтруктураНастроек.ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
			
			// В платежном документе "Плат. документ (приказ №924/пр)" имеются две итоговые суммы к оплате:
			// сумма по услугам капитального ремонта и сумма по остальным услугам. Поэтому необходимо проверить
			// принадлежность хотя бы одной из сумм заданному интервалу.
			
			Если ТекущаяКвитанцияПоПеням Тогда
				ВсегоКОплатеДляОтбораПоОсн = ОбщиеДанные.ОбщиеДанныеНеКР.ВсегоКОплатеДляОтбора;
				ВсегоКОплатеДляОтбораПоКр  = ОбщиеДанные.ОбщиеДанныеПоКР.ВсегоКОплатеДляОтбора;
			Иначе
				ВсегоКОплатеДляОтбораПоОсн = ОбщиеДанные.ОбщиеДанные.ОбщиеДанныеНеКР.ВсегоКОплатеДляОтбора;
				ВсегоКОплатеДляОтбораПоКр  = ОбщиеДанные.ОбщиеДанные.ОбщиеДанныеПоКР.ВсегоКОплатеДляОтбора;
			КонецЕсли;
			
			Если СтруктураНастроек.ГраницаОтбораИтоговойСуммыОтБезОграничений И НЕ СтруктураНастроек.ГраницаОтбораИтоговойСуммыДОБезОграничений Тогда
				ПечататьКвитанцию = ВсегоКОплатеДляОтбораПоОсн <= СтруктураНастроек.ГраницаОтбораИтоговойСуммыДо
								ИЛИ ВсегоКОплатеДляОтбораПоКр <= СтруктураНастроек.ГраницаОтбораИтоговойСуммыДо;
			ИначеЕсли НЕ СтруктураНастроек.ГраницаОтбораИтоговойСуммыОтБезОграничений И СтруктураНастроек.ГраницаОтбораИтоговойСуммыДОБезОграничений Тогда
				ПечататьКвитанцию = ВсегоКОплатеДляОтбораПоОсн >= СтруктураНастроек.ГраницаОтбораИтоговойСуммыОт
								ИЛИ ВсегоКОплатеДляОтбораПоКр >= СтруктураНастроек.ГраницаОтбораИтоговойСуммыОт;
			ИначеЕсли НЕ СтруктураНастроек.ГраницаОтбораИтоговойСуммыОтБезОграничений И НЕ СтруктураНастроек.ГраницаОтбораИтоговойСуммыДОБезОграничений Тогда
				ПечататьКвитанцию = (ВсегоКОплатеДляОтбораПоОсн >= СтруктураНастроек.ГраницаОтбораИтоговойСуммыОт
								  И ВсегоКОплатеДляОтбораПоОсн <= СтруктураНастроек.ГраницаОтбораИтоговойСуммыДо)
								  ИЛИ (ВсегоКОплатеДляОтбораПоКр >= СтруктураНастроек.ГраницаОтбораИтоговойСуммыОт
								  И ВсегоКОплатеДляОтбораПоКр <= СтруктураНастроек.ГраницаОтбораИтоговойСуммыДо);
			Иначе
				ПечататьКвитанцию = Истина;
			КонецЕсли;
			
		Иначе
			
			ВсегоКОплатеДляОтбора = ОбщиеДанные.ВсегоКОплатеДляОтбора;
			
			Если СтруктураНастроек.ГраницаОтбораИтоговойСуммыОтБезОграничений И НЕ СтруктураНастроек.ГраницаОтбораИтоговойСуммыДОБезОграничений Тогда
				ПечататьКвитанцию = ВсегоКОплатеДляОтбора <= СтруктураНастроек.ГраницаОтбораИтоговойСуммыДо;
			ИначеЕсли НЕ СтруктураНастроек.ГраницаОтбораИтоговойСуммыОтБезОграничений И СтруктураНастроек.ГраницаОтбораИтоговойСуммыДОБезОграничений Тогда
				ПечататьКвитанцию = ВсегоКОплатеДляОтбора >= СтруктураНастроек.ГраницаОтбораИтоговойСуммыОт;
			ИначеЕсли НЕ СтруктураНастроек.ГраницаОтбораИтоговойСуммыОтБезОграничений И НЕ СтруктураНастроек.ГраницаОтбораИтоговойСуммыДОБезОграничений Тогда
				ПечататьКвитанцию = ВсегоКОплатеДляОтбора >= СтруктураНастроек.ГраницаОтбораИтоговойСуммыОт
								  И ВсегоКОплатеДляОтбора <= СтруктураНастроек.ГраницаОтбораИтоговойСуммыДо;
			Иначе
				ПечататьКвитанцию = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // "Не печатать нулевые квитанции".
		
		// Квитанция считается "нулевой", если выполняются следующие условия:
		// 1. Сумма начислений в квитанции равна нулю.
		// 2. Не было оплат в отчетном месяце.
		// 3. Не было перерасчетов в отчетном месяце.
		// 4. Начальное сальдо отлично от нуля.
		// Если хоть какое-то из условий не выполняется, то квитанция не считается "нулевой".
		
		ЛицевойСчет  = ОбщиеДанные.ЛицевойСчет;
		НачСальдо    = 0;
		БылиОплаты   = Ложь;
		
		Если СтруктураНастроек.ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
			
			// В платежном документе "Плат. документ (приказ №924/пр)" имеются две итоговые суммы к оплате:
			// сумма по услугам капитального ремонта и сумма по остальным услугам. Поэтому необходимо проверить
			// данные суммы раздельно.
			
			ВсегоКОплатеПоОсн = 0;
			ВсегоКОплатеПоКр  = 0;
			
			ТекущаяСтруктураОбщихТаблицОсновная  = СтруктураОбщихТаблиц.СтруктураОбщихТаблицОсновная;
			ТекущаяСтруктураОбщихТаблицКапРемонт = СтруктураОбщихТаблиц.СтруктураОбщихТаблицКапРемонт;
			
			// Добавим сумму начислений по основным услугам:
			ТаблицаНачисленийОбщПоОсн = ?(ТекущаяКвитанцияПоПеням, ТекущаяСтруктураОбщихТаблицОсновная.ТаблицаПениНачисленияОбщ, ТекущаяСтруктураОбщихТаблицОсновная.ТаблицаНачисленияОбщ);
			ТаблицаНачисленийПоОсн    = ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаНачисленийОбщПоОсн, "ЛицевойСчет", ЛицевойСчет);
			Если НЕ ТаблицаНачисленийПоОсн.Количество() = 0 Тогда
				ВсегоКОплатеПоОсн = ВсегоКОплатеПоОсн + ТаблицаНачисленийПоОсн.Итог("Начислено");
			КонецЕсли;
			
			// Добавим сумму начислений по услугам кап.ремонта:
			ТаблицаНачисленийОбщПоКр = ?(ТекущаяКвитанцияПоПеням, ТекущаяСтруктураОбщихТаблицКапРемонт.ТаблицаПениНачисленияОбщ, ТекущаяСтруктураОбщихТаблицКапРемонт.ТаблицаНачисленияОбщ);
			ТаблицаНачисленийПоКР    = ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаНачисленийОбщПоКр, "ЛицевойСчет", ЛицевойСчет);
			Если НЕ ТаблицаНачисленийПоКР.Количество() = 0 Тогда
				ВсегоКОплатеПоКР = ВсегоКОплатеПоКр + ТаблицаНачисленийПоКР.Итог("Начислено");
			КонецЕсли;
			
			// Добавим сумму пени:
			Если СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
				СуммаПениПоОсн = ?(ТекущаяКвитанцияПоПеням, 0, ПолучитьСуммуПениПоТекущемуЛС(ТекущаяСтруктураОбщихТаблицОсновная.ТаблицаПениОбщПоВидамУслуг, ЛицевойСчет));
				СуммаПениПоКР  = ?(ТекущаяКвитанцияПоПеням, 0, ПолучитьСуммуПениПоТекущемуЛС(ТекущаяСтруктураОбщихТаблицКапРемонт.ТаблицаПениОбщПоВидамУслуг, ЛицевойСчет));
				
				ВсегоКОплатеПоОсн = ВсегоКОплатеПоОсн + СуммаПениПоОсн;
				ВсегоКОплатеПоКр  = ВсегоКОплатеПоКр  + СуммаПениПоКР;
			КонецЕсли;
			
			// Определим факт, были ли перерасчеты:
			ТаблицаПерерасчетовОбщПоОсн = ?(ТекущаяКвитанцияПоПеням, ТекущаяСтруктураОбщихТаблицОсновная.ТаблицаПениПерерасчетовОбщ, ТекущаяСтруктураОбщихТаблицОсновная.ТаблицаПерерасчетовОбщ);
			ТаблицаПерерасчетовОбщПоКр  = ?(ТекущаяКвитанцияПоПеням, ТекущаяСтруктураОбщихТаблицКапРемонт.ТаблицаПениПерерасчетовОбщ, ТекущаяСтруктураОбщихТаблицКапРемонт.ТаблицаПерерасчетовОбщ);
			ТаблицаПерерасчетовПоОсн    = ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаПерерасчетовОбщПоОсн, "ЛицевойСчет", ЛицевойСчет);
			ТаблицаПерерасчетовПоКР     = ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаПерерасчетовОбщПоКр, "ЛицевойСчет", ЛицевойСчет);
			
			БылиПерерасчеты = ?(ТаблицаПерерасчетовПоОсн.Количество() = 0 ИЛИ ТаблицаПерерасчетовПоКР.Количество() = 0, Ложь, Истина);
			
			// Определим факт, были ли оплаты:
			ТаблицаОплатОбщПоОсн = ?(ТекущаяКвитанцияПоПеням, ТекущаяСтруктураОбщихТаблицОсновная.ТаблицаПениОбщПоВидамУслуг, ТекущаяСтруктураОбщихТаблицОсновная.ТаблицаОплатОбщПоВидамУслуг);
			ТаблицаОплатОбщПоКр  = ?(ТекущаяКвитанцияПоПеням, ТекущаяСтруктураОбщихТаблицКапРемонт.ТаблицаПениОбщПоВидамУслуг, ТекущаяСтруктураОбщихТаблицКапРемонт.ТаблицаОплатОбщПоВидамУслуг);
			
			ТаблицаОплатПоОсн = ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаОплатОбщПоОсн, "ЛицевойСчет", ЛицевойСчет);
			ТаблицаОплатПоКр  = ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаОплатОбщПоКр, "ЛицевойСчет", ЛицевойСчет);
			
			Если СтруктураНастроек.ВыводитьНачальноеСальдо Тогда
				ТаблицаСальдоОбщПоОсн = ?(ТекущаяКвитанцияПоПеням, ТекущаяСтруктураОбщихТаблицОсновная.ТаблицаПениСальдоОбщПоВидамУслуг, ТекущаяСтруктураОбщихТаблицОсновная.ТаблицаСальдоОбщПоВидамУслуг);
				ТаблицаСальдоОбщПоКр  = ?(ТекущаяКвитанцияПоПеням, ТекущаяСтруктураОбщихТаблицКапРемонт.ТаблицаПениСальдоОбщПоВидамУслуг, ТекущаяСтруктураОбщихТаблицКапРемонт.ТаблицаСальдоОбщПоВидамУслуг);
				
				СтруктураНачСальдоПоОсн = ПолучитьНачальноеСальдоПоТекущемуЛС(ТаблицаСальдоОбщПоОсн, ЛицевойСчет, СтруктураНастроек.ВыводитьНачальноеСальдо);
				СтруктураНачСальдоПоКр  = ПолучитьНачальноеСальдоПоТекущемуЛС(ТаблицаСальдоОбщПоКр, ЛицевойСчет, СтруктураНастроек.ВыводитьНачальноеСальдо);
				
				НачСальдо  = СтруктураНачСальдоПоОсн.НачальноеСальдо <> 0 ИЛИ СтруктураНачСальдоПоКр.НачальноеСальдо <> 0;
				БылиОплаты = ?(ТаблицаОплатПоОсн.Количество() = 0 ИЛИ ТаблицаОплатПоКр.Количество() = 0, Ложь, Истина);
			КонецЕсли;
			
			ПечататьКвитанцию = НЕ (ВсегоКОплатеПоОсн = 0 И ВсегоКОплатеПоКр = 0 И НЕ БылиОплаты И НЕ БылиПерерасчеты И НачСальдо = 0);
			
		Иначе
			
			ВсегоКОплате = 0;
			
			ТаблицаНачислений = ПолучитьТаблицуДанныхСОтборомПоКритерию(?(ТекущаяКвитанцияПоПеням, СтруктураОбщихТаблиц.ТаблицаПениНачисленияОбщ, СтруктураОбщихТаблиц.ТаблицаНачисленияОбщ), "ЛицевойСчет", ЛицевойСчет);
			Если НЕ ТаблицаНачислений.Количество() = 0 Тогда
				ВсегоКОплате = ВсегоКОплате + ТаблицаНачислений.Итог("Начислено");
			КонецЕсли;
			
			Если СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
				СуммаПени    = ?(ТекущаяКвитанцияПоПеням, 0, ПолучитьСуммуПениПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаПениОбщПоВидамУслуг, ЛицевойСчет));
				ВсегоКОплате = ВсегоКОплате + СуммаПени;
			КонецЕсли;
			
			ТаблицаПерерасчетов = ПолучитьТаблицуДанныхСОтборомПоКритерию(?(ТекущаяКвитанцияПоПеням, СтруктураОбщихТаблиц.ТаблицаПениПерерасчетовОбщ, СтруктураОбщихТаблиц.ТаблицаПерерасчетовОбщ), "ЛицевойСчет", ЛицевойСчет);
			БылиПерерасчеты = ?(ТаблицаПерерасчетов.Количество() = 0, Ложь, Истина);
			
			Если СтруктураНастроек.ВыводитьНачальноеСальдо Тогда
				СтруктураНачСальдо = ПолучитьНачальноеСальдоПоТекущемуЛС(?(ТекущаяКвитанцияПоПеням, СтруктураОбщихТаблиц.ТаблицаПениСальдоОбщПоВидамУслуг, СтруктураОбщихТаблиц.ТаблицаСальдоОбщПоВидамУслуг),
																		 ЛицевойСчет, СтруктураНастроек.ВыводитьНачальноеСальдо);
				НачСальдо  = СтруктураНачСальдо.НачальноеСальдо;
				
				ТаблицаОплат = ПолучитьТаблицуДанныхСОтборомПоКритерию(?(ТекущаяКвитанцияПоПеням, СтруктураОбщихТаблиц.ТаблицаПениОбщПоВидамУслуг, СтруктураОбщихТаблиц.ТаблицаОплатОбщПоВидамУслуг), "ЛицевойСчет", ЛицевойСчет);
				БылиОплаты   = ?(ТаблицаОплат.Количество() = 0, Ложь, Истина);
			КонецЕсли;
			
			ПечататьКвитанцию = НЕ (ВсегоКОплате = 0 И НЕ БылиОплаты И НЕ БылиПерерасчеты И НачСальдо = 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПечататьКвитанцию;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ КВИТАНЦИИ

// Формирует таблицу значений с начислениями по норме за отчетный месяц.
//
Функция ПолучитьНачисленияПоНорме(Объект, Период, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК Количество
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|				И (ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Тариф";
	
	Запрос.УстановитьПараметр("ДатаНач",       НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЛицевойСчет", Объект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьНачисленияПоНорме()

// Получает таблицу зависимых услуг.
//
Функция ПолучитьЗависимостиУслуг(ТаблицаНачисления, Здание, ПериодСреза) Экспорт 
	
	СписокУслуг = Новый СписокЗначений;
	СписокУслуг.ЗагрузитьЗначения(ТаблицаНачисления.ВыгрузитьКолонку("Услуга"));
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗависимостиУслугСрезПоследних.Услуга,
	|	КВП_ЗависимостиУслугСрезПоследних.УслугаОснование
	|ИЗ
	|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(
	|			&ПериодСреза,
	|			Объект = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
	|				И Услуга В (&СписокУслуг)) КАК КВП_ЗависимостиУслугСрезПоследних
	|ГДЕ
	|	КВП_ЗависимостиУслугСрезПоследних.Действует";
	
	Если Константы.УПЖКХ_УказыватьЗависимостьУслугВРазрезеЗданий.Получить() Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга,
		|	КВП_ЗависимостиУслугСрезПоследних.УслугаОснование
		|ИЗ
		|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(
		|			&ПериодСреза,
		|			Объект = &Здание
		|				И Услуга В (&СписокУслуг)) КАК КВП_ЗависимостиУслугСрезПоследних
		|ГДЕ
		|	КВП_ЗависимостиУслугСрезПоследних.Действует";
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СписокУслуг", СписокУслуг);
	Запрос.УстановитьПараметр("Здание",      Здание);
	Запрос.УстановитьПараметр("ПериодСреза", ПериодСреза);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьЗависимостиУслуг()

// Детализация по тарифам в квитанциях отдельными строками (Форма №4).
// Дозаполняет таблицу начислений и подготавливает ее к свертке (Добавляя колонку "ВидТарифа").
//
// Параметры:
//  ТаблицаНачисления - таблица значений - таблица начислений.
//  ТаблицаСчетчиков  - таблица значений - таблица показаний счетчиков.
//
Процедура ДетализироватьТаблицуНачисленийВРазрезеТарифов(ТаблицаНачисления, ТаблицаСчетчиков, СтруктураНастроек) Экспорт
	
	// Определение переменных
	Организация     = СтруктураНастроек.Организация;
	ПериодПросмотра = СтруктураНастроек.ПериодПросмотра;
	
	// Расшифровка начислений по услугам, начисление по которым происходит
	// по счетчикам.
	ТаблицаНачисления.Колонки.Добавить("ВидТарифа", Новый ОписаниеТипов("Строка"));
	
	СтрокиНаУдаление = Новый Массив();
	МаксИндекс = ТаблицаНачисления.Количество() - 1;
	Для ТекИндекс = 1 По МаксИндекс Цикл
		СтрокаНачисления = ТаблицаНачисления.Получить(ТекИндекс);
		
		// Вид тарифа по умолчанию
		СтрокаНачисления.ВидТарифа = "Дневной";
		
		// найдем счетчики по данной услуге
		СтруктОтбор    = Новый Структура("Услуга", СтрокаНачисления.Услуга);
		СтрокиСчетчика = ТаблицаСчетчиков.НайтиСтроки(СтруктОтбор);
		ВсегоПоСчетчикам = 0;
		КоэффициентНормы = 0;
		Для Каждого СтрокаСчетчика Из СтрокиСчетчика Цикл
			ВсегоПоСчетчикам = ВсегоПоСчетчикам + (СтрокаСчетчика.НачисленоДн + СтрокаСчетчика.НачисленоНч + СтрокаСчетчика.НачисленоПк);
			КоэффициентНормы = ?(Не СтрокаСчетчика.НачисленоДн = 0, КоэффициентНормы + 1, КоэффициентНормы);
			КоэффициентНормы = ?(Не СтрокаСчетчика.НачисленоНч = 0, КоэффициентНормы + 1, КоэффициентНормы);
			КоэффициентНормы = ?(Не СтрокаСчетчика.НачисленоПк = 0, КоэффициентНормы + 1, КоэффициентНормы);
		КонецЦикла;
		Если ВсегоПоСчетчикам = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Запоминаем начисление, положенное по данной услуге, чтобы
		// распределить по счетчикам.
		НачислениеНаРаспределение = СтрокаНачисления.Начислено;
		НачислениеРаспределенное  = 0;
		
		// Запоминаем льготу, положенную по данной услуге, чтобы
		// распределить по счетчикам.
		ЛьготаНаРаспределение = СтрокаНачисления.Льгота;
		ЛьготаРаспределенная  = 0;
		
		// Определяем размер нормы по данной услуге.
		Если ЗначениеЗаполнено(СтрокаНачисления.Норма) Тогда
			СтрокаНачисления.РазмерНормы = ПолучитьРазмерНормыПотребления(СтрокаНачисления.ЛицевойСчет, КонецМесяца(ПериодПросмотра), СтрокаНачисления.Норма, Организация);
		КонецЕсли;
		
		Для Каждого СтрокаСчетчика Из СтрокиСчетчика Цикл
			
			Начислено = СтрокаСчетчика.НачисленоДн + СтрокаСчетчика.НачисленоНч + СтрокаСчетчика.НачисленоПк;
			// Часть льготы по текущему счетчику.
			Льгота   = Окр(ЛьготаНаРаспределение * Начислено / ВсегоПоСчетчикам, 2);
			// Раскидываем на дневную / ночную / пиковую.
			ЛьготаРаспределенная = ЛьготаРаспределенная + Льгота;
			ЛьготаДн = ?(Начислено = 0, Льгота, Льгота * СтрокаСчетчика.НачисленоДн / Начислено);
			ЛьготаПк = ?(Начислено = 0, 0, Льгота * СтрокаСчетчика.НачисленоПк / Начислено);
			ЛьготаНч = Льгота - ЛьготаДн - ЛьготаПк;
			
			// Часть начисления по текущему счетчику
			Начисление = Окр(НачислениеНаРаспределение * Начислено / ВсегоПоСчетчикам, 2);
			НачислениеРаспределенное = НачислениеРаспределенное + Начисление;
			
			// Распределим начисление по видам начисления.
			НачислениеДн = ?(Начислено = 0, Начисление, Начисление * СтрокаСчетчика.НачисленоДн / Начислено);
			НачислениеПк = ?(Начислено = 0, 0, Начисление * СтрокаСчетчика.НачисленоПк / Начислено);
			НачислениеНч = Начисление - НачислениеДн - НачислениеПк;
			
			// Добавляем строки с детализацией по виду тарифа.
			Если Не СтрокаСчетчика.НачисленоДн = 0 Тогда
				НоваяСтрока = ТаблицаНачисления.Добавить();
				НоваяСтрока.ЛицевойСчет = СтрокаНачисления.ЛицевойСчет;
				НоваяСтрока.ВидТарифа   = "Дневной";
				НоваяСтрока.Услуга      = СтрокаСчетчика.Услуга;
				НоваяСтрока.ВидУслуги   = СтрокаСчетчика.ВидУслуги;
				НоваяСтрока.ЕдИзм       = НоваяСтрока.ВидУслуги.ЕдиницаИзмерения;
				НоваяСтрока.Начислено   = НачислениеДн;
				НоваяСтрока.Тариф       = СтрокаСчетчика.ТарифДн;
				НоваяСтрока.Льгота      = ЛьготаДн;
				НоваяСтрока.Субсидии    = 0;
				НоваяСтрока.ВРоткл      = СтрокаСчетчика.НачисленоДн;
				НоваяСтрока.КОплате     = НачислениеДн - ЛьготаДн;
				НоваяСтрока.РазмерНормы = СтрокаНачисления.РазмерНормы / КоэффициентНормы;
				НоваяСтрока.УслугаСпособРасчета = СтрокаНачисления.УслугаСпособРасчета;
			КонецЕсли;
			
			Если Не СтрокаСчетчика.НачисленоНч = 0 Тогда
				НоваяСтрока = ТаблицаНачисления.Добавить();
				НоваяСтрока.ЛицевойСчет = СтрокаНачисления.ЛицевойСчет;
				НоваяСтрока.ВидТарифа   = "Ночной";
				НоваяСтрока.Услуга      = СтрокаСчетчика.Услуга;
				НоваяСтрока.ВидУслуги   = СтрокаСчетчика.ВидУслуги;
				НоваяСтрока.ЕдИзм       = НоваяСтрока.ВидУслуги.ЕдиницаИзмерения;
				НоваяСтрока.Начислено   = НачислениеНч;
				НоваяСтрока.Тариф       = СтрокаСчетчика.ТарифНч;
				НоваяСтрока.Льгота      = ЛьготаНч;
				НоваяСтрока.Субсидии    = 0;
				НоваяСтрока.ВРоткл      = СтрокаСчетчика.НачисленоНч;
				НоваяСтрока.КОплате     = НачислениеНч - ЛьготаНч;
				НоваяСтрока.РазмерНормы = СтрокаНачисления.РазмерНормы / КоэффициентНормы;
				НоваяСтрока.УслугаСпособРасчета = СтрокаНачисления.УслугаСпособРасчета;
			КонецЕсли;
			
			Если Не СтрокаСчетчика.НачисленоПк = 0 Тогда
				НоваяСтрока = ТаблицаНачисления.Добавить();
				НоваяСтрока.ЛицевойСчет = СтрокаНачисления.ЛицевойСчет;
				НоваяСтрока.ВидТарифа   = "Пиковый";
				НоваяСтрока.Услуга      = СтрокаСчетчика.Услуга;
				НоваяСтрока.ВидУслуги   = СтрокаСчетчика.ВидУслуги;
				НоваяСтрока.ЕдИзм       = НоваяСтрока.ВидУслуги.ЕдиницаИзмерения;
				НоваяСтрока.Начислено   = НачислениеПк;
				НоваяСтрока.Тариф       = СтрокаСчетчика.ТарифПк;
				НоваяСтрока.Льгота      = ЛьготаПк;
				НоваяСтрока.Субсидии    = 0;
				НоваяСтрока.ВРоткл      = СтрокаСчетчика.НачисленоПк;
				НоваяСтрока.КОплате     = НачислениеПк - ЛьготаПк;
				НоваяСтрока.РазмерНормы = СтрокаНачисления.РазмерНормы / КоэффициентНормы;
				НоваяСтрока.УслугаСпособРасчета = СтрокаНачисления.УслугаСпособРасчета;
			КонецЕсли;
			
		КонецЦикла;
		
		// Если есть нераспределенная льгота (результат округления) - кидаем
		// на последнюю строку.
		Если Не ЛьготаНаРаспределение = ЛьготаРаспределенная
		   И ТаблицаНачисления.Количество() > 0 Тогда
			ТаблицаНачисления.Получить(0).Льгота = ТаблицаНачисления.Получить(0).Льгота 
												 + (ЛьготаНаРаспределение - ЛьготаРаспределенная);
		КонецЕсли;
		// Добавляем строку в массив для удаления, чтобы данные не дублировались.
		СтрокиНаУдаление.Добавить(СтрокаНачисления);
	КонецЦикла;
	// Удаляем строки из массива.
	Для Каждого СтрокаНаУдаление Из СтрокиНаУдаление Цикл
		ТаблицаНачисления.Удалить(СтрокаНаУдаление);
	КонецЦикла;
	
КонецПроцедуры // ДетализироватьТаблицуНачисленийВРазрезеТарифов()

// Сортирует переданную таблицу начислений, разделенную по услугам, согласно установленному порядку.
//
// Параметры:
//  ТаблицаУслуг - Таблица значений - таблица начислений, разделенная по услугам.
//  СтруктураНастроек - структура - содержит настройки сбора данных для квитанций и обменов.
//
Процедура СортироватьТаблицуУслугПоПорядку(ТаблицаУслуг, СтруктураНастроек = Неопределено) Экспорт
	
	тмПорядокУслуг = ПолучитьТаблицуПорядкаУслугИзСтруктурыНастроек(СтруктураНастроек);
	
	МаксНомер = тмПорядокУслуг.Количество() + 1;
	
	Для Каждого СтрокаНачисления Из ТаблицаУслуг Цикл
		
		СтрокаПорядка = тмПорядокУслуг.Найти(СтрокаНачисления.ВидУслуги);
		Если СтрокаПорядка = Неопределено Тогда
			СтрокаНачисления.Порядок = МаксНомер;
		Иначе
			СтрокаНачисления.Порядок = СтрокаПорядка.Порядок;
		КонецЕсли;
		
	КонецЦикла;
	
	// Переставляем строки соглано их Порядку.
	ИдексНижнейСтроки = ТаблицаУслуг.Количество() - 1;
	Для ТекНомер = 0 По МаксНомер Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Порядок", ТекНомер);
		
		ВыборкаСтрок = ТаблицаУслуг.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаПеремещения Из ВыборкаСтрок Цикл
			ТекущееПоложение = ТаблицаУслуг.Индекс(СтрокаПеремещения);
			Сдвиг = ИдексНижнейСтроки - ТекущееПоложение;
			ТаблицаУслуг.Сдвинуть(ТекущееПоложение, Сдвиг);
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаУслуг.Сортировать("Порядок, ВидУслуги");
	
КонецПроцедуры // СортироватьТаблицуУслугПоПорядку()

// (ПД для Московской области)Получает из реквизита формы "МесяцСтрока" структуру месяца и года для
// вывода в поля "Расчетный период".
//
// Параметры:
//  СтруктураПараметровМакета - структура параметров
//  Строка - строковое представление месяца расчета в формате [Год][Месяц].
//
Процедура РазложитьПериодРасчета(СтруктураПараметровМакета, Строка) Экспорт
	
	КоличествоЗнаков = СтрДлина(Строка);
	СимволГода = Найти(Строка, "2");
	
	Если СимволГода > 0 Тогда
		ПодстрокаМесяца = СокрЛП(Лев(Строка, СимволГода - 1));
		ПодстрокаГода   = СокрЛП(Прав(Строка, КоличествоЗнаков - СимволГода + 1));
		СтруктураПараметровМакета.Вставить("МесяцСтрокой", ПодстрокаМесяца);
		СтруктураПараметровМакета.Вставить("ГодСтрокой",   ПодстрокаГода);
	Иначе
		СтруктураПараметровМакета.Вставить("МесяцСтрокой", "");
		СтруктураПараметровМакета.Вставить("ГодСтрокой",   "");
	КонецЕсли;
	
КонецПроцедуры // РазложитьПериодРасчета()

// (ПД для Московской области) Заполняет цифры суммы к оплате.
//
// Параметры:
//  ОбластьМакета - область макета табличного документа
//  СуммаОплаты - итоговая сумма оплаты
//  СтруктураПараметровМакета - структура параметров.
//
Процедура ЗаполнитьПараметрыСуммыВсего(ОбластьМакета, СуммаОплаты, СтруктураПараметровМакета, ДляДобровольногоСтрахования = Ложь) Экспорт
	
	СтрокаСуммы = СокрЛП(Формат(СуммаОплаты * 100, "ЧЦ=10; ЧДЦ=0; ЧН=000; ЧГ=0"));
	
	Если Число(СуммаОплаты) > - 1 И Число(СуммаОплаты) < 1 Тогда
		ТекСтрокаСуммы = "0" + Прав(СтрокаСуммы, 2);
		Если Число(СуммаОплаты) < 0 Тогда
			ТекСтрокаСуммы = "-" + ТекСтрокаСуммы;
		КонецЕсли;
		СтрокаСуммы = ТекСтрокаСуммы;
	КонецЕсли;
	
	ВсегоЦифр = Мин(СтрДлина(СтрокаСуммы), 10);
	Для Сч = 1 По ВсегоЦифр Цикл
		
		ТекЦифра = Сред(СтрокаСуммы, ВсегоЦифр - Сч + 1, 1);
		
		Если ДляДобровольногоСтрахования Тогда
			СтруктураПараметровМакета.Вставить("ВсегоКОплатеСоСтрахованием" + Сч, ТекЦифра);
		Иначе
			СтруктураПараметровМакета.Вставить("ВсегоКОплате" + Сч, ТекЦифра);
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьПараметрыСуммыВсего()

// (ПД для Московской области) Заполняет символы лицевого счета.
//
// Параметры:
//  ОбластьМакета - область макета табличного документа
//  НаименованиеЛС - наименование лицевого счета
//  СтруктураПараметровЛС - структура параметров.
//
Процедура ЗаполнитьПараметрыЛицевогоСчета(НаименованиеЛС, СтруктураПараметровЛС) Экспорт
	
	НаименованиеЛицевогоСчета = СократитьНаименованиеЛС(СокрЛП(НаименованиеЛС));
	
	ВсегоЗнаков = СтрДлина(НаименованиеЛицевогоСчета);
	Для Сч = 1 По ВсегоЗнаков Цикл
		
		ТекЗнак = Сред(НаименованиеЛицевогоСчета, Сч, 1);
		Если Не ТекЗнак = " " Тогда
			СтруктураПараметровЛС.Вставить("ЛицевойСчет" + Сч, ТекЗнак);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// (ПД для Московской области) Заполняет строку показаний счетчиков в формате дневное/ночное/пиковое.
//
// Параметры:
//  ПоказаниеДн - дневное показание счетчика.
//  ПоказаниеНч - ночное показание счетчика.
//  ПоказаниеПк - пиковое показание счетчика.
//  ТарифностьПУ - тарифность счетчика.
//
Функция СформироватьСтрокуПоказаний(ПоказаниеДн, ПоказаниеНч, ПоказаниеПк, ТарифностьПУ) Экспорт
	
	СтрокаПоказаний = "";
	
	ДневноеПоказание = "";
	НочноеПоказание  = "";
	ПиковоеПоказание = "";
	
	СтрокаФормата = "ЧДЦ=3;";
	
	Если ПоказаниеДн > 0 Тогда
		ДневноеПоказание = Формат(ПоказаниеДн, СтрокаФормата);
	Иначе
		ДневноеПоказание = "-";
	КонецЕсли;
	
	Если ТарифностьПУ <> "1" Тогда
		Если ПоказаниеНч > 0 Тогда
			НочноеПоказание = "/" + Формат(ПоказаниеНч, СтрокаФормата);
		Иначе
			НочноеПоказание = "/-";
		КонецЕсли;
	КонецЕсли;
	
	Если ТарифностьПУ = "3" Тогда
		Если ПоказаниеПк > 0 Тогда
			ПиковоеПоказание = "/" + Формат(ПоказаниеПк, СтрокаФормата);
		Иначе
			ПиковоеПоказание = "/-";
		КонецЕсли;
	КонецЕсли;
	
	СтрокаПоказаний = ДневноеПоказание + НочноеПоказание + ПиковоеПоказание;
	
	Возврат СтрокаПоказаний;
	
КонецФункции // СформироватьСтрокуПоказаний()

// (ПД для Московской области) Удаляет символы: пробелы, "л/с", "№", - из наименования лицевого счета.
//
// Параметры:
//  НаименованиеЛицевогоСчета - наименование лицевого счета.
//
// Возвращаемое значение:
//  тип "Строка".
//
Функция СократитьНаименованиеЛС(НаименованиеЛС) Экспорт
	
	НаименованиеЛС = СтрЗаменить(НаименованиеЛС, " ", "");
	НаименованиеЛС = СтрЗаменить(НаименованиеЛС, "л/с", "");
	НаименованиеЛС = СтрЗаменить(НаименованиеЛС, "Л/С", "");
	НаименованиеЛС = СтрЗаменить(НаименованиеЛС, "№", "");
	
	Возврат НаименованиеЛС;
	
КонецФункции // СократитьНаименованиеЛС()

// (ПД для "Московской области по пост. 679/30" и "Плат. документ (приказ №43/пр)")
// Процедура дополняет таблицу счетчиков недостающими данными.
//
// Параметры:
//  ТекущиеДанные - Структура - сведения по услугам.
//
Процедура ДополнитьТаблицуСчетчиковУслугамиСРасходамиПоЗданию(ТекущиеДанные)
	
	ТаблицаСчетчиков          = ТекущиеДанные.ТаблицаСчетчиков;
	ТаблицаРасходаПоСчетчикам = ТекущиеДанные.ТаблицаРасходаПоСчетчикам;
	
	// Если начисление производилось по распределению расхода по показаниям КПУ и нет закрепленных ИПУ, то
	// таблицу счетчиков необходимо дополнить такими услугами для вывода сведения в Разделе 4 ПД формы "Плат. документ (пост. №679/30 для МО)".
	
	Если ТаблицаСчетчиков.Колонки.Найти("ЭтоКоммунальнаяУслугаНеПоПУ") = Неопределено Тогда
		ТаблицаСчетчиков.Колонки.Добавить("ЭтоКоммунальнаяУслугаНеПоПУ", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока ИЗ ТаблицаРасходаПоСчетчикам Цикл
		
		СтруктураДляЗаполнения = Новый Структура();
		СтруктураДляЗаполнения.Вставить("ЛицевойСчет", ТекущаяСтрока.Здание);
		СтруктураДляЗаполнения.Вставить("Услуга",      ТекущаяСтрока.Услуга);
		СтруктураДляЗаполнения.Вставить("ВидУслуги",   ТекущаяСтрока.ВидУслуги);
		СтруктураДляЗаполнения.Вставить("ЕдИзм",       ТекущаяСтрока.ЕдиницаИзмерения);
		СтруктураДляЗаполнения.Вставить("ЯвляетсяОПУ"); // Переопределяемое значение по условиям.
		
		Если ТекущаяСтрока.КоличествоИПУ > 0
		   И ТаблицаСчетчиков.НайтиСтроки(Новый Структура("Услуга, ЯвляетсяОПУ", ТекущаяСтрока.Услуга, Ложь)).Количество() = 0 Тогда
			
			СтруктураДляЗаполнения.ЯвляетсяОПУ = Ложь;
			
			ДобавитьСтрокуУслугиСРасходамиПоЗданиюВТаблицуСчетчиков(ТаблицаСчетчиков, СтруктураДляЗаполнения);
			
		КонецЕсли;
		
		Если ТекущаяСтрока.КоличествоОПУ > 0
		   И ТаблицаСчетчиков.НайтиСтроки(Новый Структура("Услуга, ЯвляетсяОПУ", ТекущаяСтрока.Услуга, Истина)).Количество() = 0 Тогда
			
			СтруктураДляЗаполнения.ЯвляетсяОПУ = Истина;
			
			ДобавитьСтрокуУслугиСРасходамиПоЗданиюВТаблицуСчетчиков(ТаблицаСчетчиков, СтруктураДляЗаполнения)
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Так как для вывода расхода по зданию по коммунальным услугам в таблице счетчиков выводим из таблицы начислений,
	// производя поиск по Виду услуги и Услуге счетчика, то для услуг, свёрнутые по виду услуги в таблице начислений значение
	// поля "Услуга" равна Неопределено. Поэтому в таком случае необходимо производить поиск только по полю "Вид услуги", и
	// в таблице счетчиков также необходимо сворачивать строки коммунальных услуг по Виду услуги.
	
	СвернутьКоммунальныеУслугиВТаблицеСчетчики(ТаблицаСчетчиков, ТаблицаРасходаПоСчетчикам);
	
КонецПроцедуры // ДополнитьТаблицуСчетчиковУслугамиСРасходамиПоЗданию()

// Сворачивает строку коммунальных услуг в таблице счетчиков.
Процедура СвернутьКоммунальныеУслугиВТаблицеСчетчики(ТаблицаСчетчиков, ТаблицаРасходаПоСчетчикам)
	
	// 1. Получим таблицу коммунальных услуг по зданиям, определяемым по параметру "ЭтоКоммунальнаяУслугаНеПоПУ".
	врТаблица = ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаРасходаПоСчетчикам, "ЭтоКоммунальнаяУслугаНеПоПУ", Истина);
	
	// 2. Отберем услуги, для видов услуг которых настроена свертка.
	ТаблицаВидовУслуг = ПолучитьТаблицуДанныхСОтборомПоКритерию(врТаблица, "СпособВыводаВКвитанциях", "Тариф сворачивать, количество суммировать",
																		   "СпособВыводаВКвитанциях", "Количество сворачивать, тариф суммировать");
	
	Если ТаблицаВидовУслуг.Количество() > 0 Тогда
		
		ТаблицаВидовУслуг.Свернуть("Здание, ВидУслуги, ЕдиницаИзмерения");
		
		МассивСвернутыхСтрокДляУдаления = Новый Массив;
		
		Для Каждого ТекущаяСтрокаВида Из ТаблицаВидовУслуг Цикл
			
			// Строки видов услуг, которые были свернуты, будем удалять из таблицы счетчиков.
			СтрокиВидаУслуги = ТаблицаСчетчиков.НайтиСтроки(Новый Структура("ВидУслуги", ТекущаяСтрокаВида.ВидУслуги));
			
			Для Каждого СтрокаВидаУслуги Из СтрокиВидаУслуги Цикл
				// Проверяем на дублирование элементов в массиве, чтоы избежать ошибок при удалении строк из таблицы.
				Если МассивСвернутыхСтрокДляУдаления.Найти(СтрокаВидаУслуги) = Неопределено Тогда
					МассивСвернутыхСтрокДляУдаления.Добавить(СтрокаВидаУслуги);
				КонецЕсли;
			КонецЦикла;
			
			СтруктураДляЗаполнения = Новый Структура();
			СтруктураДляЗаполнения.Вставить("ЛицевойСчет", ТекущаяСтрокаВида.Здание);
			СтруктураДляЗаполнения.Вставить("ЕдИзм",       ТекущаяСтрокаВида.ЕдиницаИзмерения);
			СтруктураДляЗаполнения.Вставить("ЯвляетсяОПУ", ЛОЖЬ);
			СтруктураДляЗаполнения.Вставить("Услуга",      Неопределено);
			СтруктураДляЗаполнения.Вставить("ВидУслуги",   ТекущаяСтрокаВида.ВидУслуги);
			
			ДобавитьСтрокуУслугиСРасходамиПоЗданиюВТаблицуСчетчиков(ТаблицаСчетчиков, СтруктураДляЗаполнения);
			
		КонецЦикла;
		
		Для Каждого ТекущаяСтрокаПУ Из МассивСвернутыхСтрокДляУдаления Цикл
			ТаблицаСчетчиков.Удалить(ТекущаяСтрокаПУ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СвернутьКоммунальныеУслугиВТаблицеСчетчики()

// Добавляет строку в таблицу счетчиков сведение по услуге с расходами по зданию.
Процедура ДобавитьСтрокуУслугиСРасходамиПоЗданиюВТаблицуСчетчиков(ТаблицаСчетчиков, СтруктураДляЗаполнения)
	
	НоваяСтрока = ТаблицаСчетчиков.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДляЗаполнения);
	
	НоваяСтрока.ПредыдущееПоказаниеДн     = 0;
	НоваяСтрока.ПредыдущееПоказаниеНч     = 0;
	НоваяСтрока.ПредыдущееПоказаниеПк     = 0;
	НоваяСтрока.ПредПредыдущееПоказаниеДн = 0;
	НоваяСтрока.ПредПредыдущееПоказаниеНч = 0;
	НоваяСтрока.ПредПредыдущееПоказаниеПк = 0;
	НоваяСтрока.Тарифность                = 1;
	
КонецПроцедуры

// Получает таблицу порядка услуг для вывода в квитанции из структуры настроек.
//
Функция ПолучитьТаблицуПорядкаУслугИзСтруктурыНастроек(СтруктураНастроек)
	
	ТипПараметраСтруктурыНастроек = ТипЗнч(СтруктураНастроек);
	
	// Заглушка для внешних квитанций, разработанных до появления справочника
	// "Настройки сбора данных для квитанций и обменов".
	Если ТипПараметраСтруктурыНастроек = Тип("Структура") И СтруктураНастроек.Свойство("ТаблицаПорядкаУслугДляВыводаВКвитанции") Тогда
		тмПорядокУслуг = СтруктураНастроек.ТаблицаПорядкаУслугДляВыводаВКвитанции;
	// Для внешних квитанций до замены ссылки на справочник структурой.
	ИначеЕсли ТипПараметраСтруктурыНастроек = Тип("СправочникСсылка.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов") Тогда
		НаборЗаписей = РегистрыСведений.КВП_ПорядокУслугВКвитанции.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НастройкаСбораДанных.Установить(СтруктураНастроек);
		НаборЗаписей.Прочитать();
		тмПорядокУслуг = НаборЗаписей.Выгрузить();
	Иначе
		НаборЗаписей = РегистрыСведений.КВП_ПорядокУслугВКвитанции.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НастройкаСбораДанных.Установить(Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПустаяСсылка());
		НаборЗаписей.Прочитать();
		тмПорядокУслуг = НаборЗаписей.Выгрузить();
	КонецЕсли;
	
	Возврат тмПорядокУслуг;
	
КонецФункции

// Формирует таблицу с начислениями по типу услуг, определенному на форме настроек.
//
// Параметры:
//  ТаблицаНачисления - таблица со всеми начислениями по текущему л/с.
//  Отбор - структура с параметрами отбора.
//  СтруктураНастроек - структура - структура настроек сбора данных для квитанций и обменов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с начислениями по определенному типу услуг.
//
Функция ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Отбор, СтруктураНастроек) Экспорт
	
	УслугиПоТипам = СтруктураНастроек.УслугиПоТипам;
	ВидыУслуг     = УслугиПоТипам.НайтиСтроки(Отбор);
	ТаблицаУслуг  = ТаблицаНачисления.СкопироватьКолонки();
	
	Для Каждого ВидУслуги Из ВидыУслуг Цикл
		СтрокиНачисления = ТаблицаНачисления.НайтиСтроки(Новый Структура("ВидУслуги", ВидУслуги.ВидУслуги));
		
		Для Каждого СтрокаНачисления Из СтрокиНачисления Цикл
			// Строки, которые относятся к содержанию общего имущества, выводим в отдельном блоке.
			Если Не СтрокаНачисления.СтрокаДляОбщегоИмущества = Истина Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаУслуг.Добавить(), СтрокаНачисления);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СортироватьТаблицуУслугПоПорядку(ТаблицаУслуг, СтруктураНастроек);
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПолучитьТаблицуУслуг()

// На основе отбора формирует таблицу начисления со строкой итогов.
//
// Параметры:
//  ТаблицаНачисления - основная таблица начисления по текущему л/с.
//  СтруктураНастроек - структура - структура настроек сбора данных для квитанций и обменов.
//  Отбор - структура с параметрами отбора.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьТаблицуУслугСИтогамиДляКвитанции(ТаблицаНачисления, СтруктураНастроек, Отбор, Коммунальная = Ложь, РазделятьУслугиПоТипам = Ложь) Экспорт
	
	ВидМакета = СтруктураНастроек.ВидМакета;
	
	Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Чебоксары И РазделятьУслугиПоТипам Тогда
		ТаблицаУслуг = ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Отбор, СтруктураНастроек);
	Иначе
		СтрокиУслуг  = ТаблицаНачисления.НайтиСтроки(Отбор);
		ТаблицаУслуг = ТаблицаНачисления.Скопировать(СтрокиУслуг);
	КонецЕсли;
	
	НачисленоИПУ   = 0;
	НачисленоОПУ   = 0;
	Начислено      = 0;
	СуммаПовышения = 0;
	Перерасчет     = 0;
	Льгота         = 0;
	КОплате        = 0;
	
	Для Каждого Строка Из ТаблицаУслуг Цикл
		// Суммы в строках детализации не учитываем.
		Если НЕ Строка.СтрокаДетализацииТариф И НЕ Строка.СтрокаДетализацииСост Тогда
			
			Если Коммунальная Тогда
				
				Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Чебоксары Тогда
					Строка.Перерасчет = Строка.Перерасчет - Строка.ПерерасчетОДН;
					Строка.КОплатеИПУ = Строка.НачисленоИПУ + Строка.Перерасчет + Строка.СуммаПовышения;
					КОплате           = КОплате + Строка.КОплатеИПУ;
				Иначе
					КОплате = КОплате + Строка.КОплате;
				КонецЕсли;
				
				Если Строка.УслугаПоСчетчикам ИЛИ Строка.УслугаСоставнаяПоСчетчикам Тогда
					НачисленоИПУ = НачисленоИПУ + Строка.НачисленоИПУ;
					НачисленоОПУ = НачисленоОПУ + Строка.НачисленоОПУ;
				Иначе
					НачисленоИПУ = НачисленоИПУ + Строка.Начислено;
				КонецЕсли;
				
				Начислено      = Начислено + Строка.Начислено;
				СуммаПовышения = СуммаПовышения + Строка.СуммаПовышения;
				Льгота         = Льгота + Строка.Льгота;
				Перерасчет     = Перерасчет + Строка.Перерасчет;
				
			Иначе
				
				Начислено      = Начислено + Строка.Начислено;
				СуммаПовышения = СуммаПовышения + Строка.СуммаПовышения;
				Перерасчет     = Перерасчет + Строка.Перерасчет;
				Льгота         = Льгота + Строка.Льгота;
				КОплате        = КОплате + Строка.КОплате;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТаблицаУслуг.Количество() = 0 Тогда
		СтрокаИтогов = ТаблицаУслуг.Вставить(0);
		
		СтрокаИтогов.НачисленоИПУ   = НачисленоИПУ;
		СтрокаИтогов.НачисленоОПУ   = НачисленоОПУ;
		СтрокаИтогов.Начислено      = Начислено;
		СтрокаИтогов.СуммаПовышения = СуммаПовышения;
		СтрокаИтогов.Перерасчет     = Перерасчет;
		СтрокаИтогов.Льгота         = Льгота;
		СтрокаИтогов.КОплате        = КОплате;
	КонецЕсли;
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПолучитьТаблицуУслугСИтогами()

////////////////////////////////////////////////////////////////////////////////
// УСЛУГИ СОДЕРЖАНИЯ ОБЩЕГО ИМУЩЕСТВА

// Функция возвращает представление для услуг содержания общего имущества.
//
// Параметры (название, тип, дифференцированное значение)
//  СтруктураНастроекФормированияПД - Структура - структура настроек платежного документа.
// Возвращаемое значение: 
//  ПредставлениеПрефиксаСОИ - Строка - префикс, добавляемый к наименованию услуг содержания общего имущества.
Функция ПолучитьПредставлениеПостфиксаДляУслугСодержанияОбщегоИмущества(СтруктураНастроекФормированияПД)
	
	СтрокаПостфиксаДляУслугСОИ = "";
	
	Если Не СтруктураНастроекФормированияПД = Неопределено Тогда
		
		ПостфиксУслугСОИ = СтруктураНастроекФормированияПД.ПредставлениеУслугСОИ;
		
		СтрокаПостфиксаДляУслугСОИ = ?(ПостфиксУслугСОИ = "", "", " " + ПостфиксУслугСОИ);
		
	КонецЕсли;
	
	Возврат СтрокаПостфиксаДляУслугСОИ;
	
КонецФункции //ПолучитьПредставлениеПостфиксаДляУслугСодержанияОбщегоИмущества

// Функция получает рассчетную сумму к оплате с учетом комиссии.
Функция ПолучитьСуммуКомиссии(ВсегоКОплате, КомиссияБанка, ВариантУчетаКомиссииБанка)
	
	СуммаКомиссии = 0;
	
	Если ВсегоКОплате > 0 И Не (ВариантУчетаКомиссииБанка = "Не учитывать") Тогда
		
		Если ВариантУчетаКомиссииБанка = "Сверх суммы к оплате" Тогда
			
			СуммаКомиссии = ВсегоКОплате * КомиссияБанка / 100;
			
		ИначеЕсли ВариантУчетаКомиссииБанка = "В сумме к оплате" Тогда
			
			СуммаКомиссии = ВсегоКОплате * КомиссияБанка / (100 - КомиссияБанка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Окр(СуммаКомиссии, 2);
	
КонецФункции

// Процедура дополняет таблицу с начислениями сведниями о начальном сальдо и оплатах по видам услуг.
//
Процедура ДополнитьТаблицуНачисленияПоТекущемуОбъектуСуммамиПениНачальноеСальдоИОплаты(ТаблицаСНачислениями, ТаблицаСальдоОбщПоВидамУслуг, ТаблицаОплатОбщПоВидамУслуг,
																					   ТаблицаПениОбщПоВидамУслуг, ОбщиеДанные, СтруктураНастроек)
	
	ВидМакета               = СтруктураНастроек.ВидМакета;
	ВидыПлатежныхДокументов = Перечисления.УПЖКХ_ВидыПлатежныхДокументов;
	
	ТаблицаСНачислениями.Колонки.Добавить("НачальноеСальдо", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	ТаблицаСНачислениями.Колонки.Добавить("Оплата",          Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	ТаблицаСНачислениями.Колонки.Добавить("Пени",            Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	ТаблицаСНачислениями.Колонки.Добавить("ИтогоКОплате",    Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	
	Если НЕ (ВидМакета = ВидыПлатежныхДокументов.Москва679 ИЛИ ВидМакета = ВидыПлатежныхДокументов.Стандартный43Пр) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНачСальдо = ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаСальдоОбщПоВидамУслуг, "ЛицевойСчет", ОбщиеДанные.ЛицевойСчет);
	ТаблицаНачСальдо.Свернуть("Услуга, ВидУслуги, ЕдиницаИзмерения, УслугаПоСчетчикам, ЭтоКоммунальнаяУслуга, ОДНОтноситсяКОбщемуИмуществу", "НачальноеСальдо, НачальноеСальдоБезПени, НачальноеСальдоПени");
	
	ТаблицаОплатПоВидамУслуг = ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаОплатОбщПоВидамУслуг, "ЛицевойСчет", ОбщиеДанные.ЛицевойСчет);
	ТаблицаОплатПоВидамУслуг.Свернуть("Услуга, ВидУслуги, ЕдиницаИзмерения, УслугаПоСчетчикам, ЭтоКоммунальнаяУслуга, ОДНОтноситсяКОбщемуИмуществу", "СуммаОплаты, СуммаОплатыБезПени, СуммаОплатыПени, СуммаОплатыОстаткаПоРассрочке");
	
	Если ВидМакета = ВидыПлатежныхДокументов.Москва679 Тогда
		
		ТаблицаПениПоВидамУслуг = Новый ТаблицаЗначений;
		
	ИначеЕсли ВидМакета = ВидыПлатежныхДокументов.Стандартный43Пр Тогда
		
		ТаблицаПениПоВидамУслуг  = ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаПениОбщПоВидамУслуг, "ЛицевойСчет", ОбщиеДанные.ЛицевойСчет);
		ТаблицаПениПоВидамУслуг.Свернуть("ВидУслуги, Услуга, СуммаПени, ЕдиницаИзмерения, УслугаПоСчетчикам, ОДНОтноситсяКОбщемуИмуществу, ЭтоКоммунальнаяУслуга");
		
	КонецЕсли;
	
	ВестиУчетНачисленийПоДобровольномуСтрахованию = СтруктураНастроек.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = СтруктураНастроек.УслугаДобровольногоСтрахования;
	УчитыватьПениВТекущейКвитанции                = СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням;
	
	Для Каждого ТекущаяСтрока Из ТаблицаНачСальдо Цикл
		
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию И ТекущаяСтрока.Услуга = УслугаДобровольногоСтрахования Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщиеДанные.КвитанцияПоПени Тогда
			
			НачальноеСальдо = ТекущаяСтрока.НачальноеСальдо;
			
		Иначе
			
			Если УчитыватьПениВТекущейКвитанции Тогда
				
				НачальноеСальдо = ТекущаяСтрока.НачальноеСальдо;
				
			Иначе
				
				НачальноеСальдо = ТекущаяСтрока.НачальноеСальдоБезПени;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокиНачислений = ТаблицаСНачислениями.НайтиСтроки(Новый Структура("Услуга", ТекущаяСтрока.Услуга));
		
		Если СтрокиНачислений.Количество() > 0 Тогда
			
			Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
				
				СтрокаНачислений.НачальноеСальдо = НачальноеСальдо;
				
			КонецЦикла;
			
		Иначе
			НоваяСтрока = ТаблицаСНачислениями.Добавить();
			НоваяСтрока.ВидУслуги                               = ТекущаяСтрока.ВидУслуги;
			НоваяСтрока.Услуга                                  = ТекущаяСтрока.Услуга;
			НоваяСтрока.ЛицевойСчет                             = ОбщиеДанные.ЛицевойСчет;
			НоваяСтрока.ЕдИзм                                   = ТекущаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.КодВидаНачисленийИПУ                    = "";
			НоваяСтрока.КодВидаНачисленийОПУ                    = "";
			НоваяСтрока.КоличествоИПУ                           = 0;
			НоваяСтрока.КоличествоОПУ                           = 0;
			НоваяСтрока.КОплатеИПУ                              = 0;
			НоваяСтрока.КОплатеОПУ                              = 0;
			НоваяСтрока.Льгота                                  = 0;
			НоваяСтрока.Начислено                               = 0;
			НоваяСтрока.НачисленоИПУ                            = 0;
			НоваяСтрока.НачисленоОПУ                            = 0;
			НоваяСтрока.Перерасчет                              = 0;
			НоваяСтрока.ПерерасчетИнд                           = 0;
			НоваяСтрока.ПерерасчетОДН                           = 0;
			НоваяСтрока.Помещение                               = ОбщиеДанные.Помещение;
			НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход    = Ложь;
			НоваяСтрока.СоставноеКоличествоИнд                  = "";
			НоваяСтрока.СоставнаяУслуга                         = Справочники.КВП_Услуги.ПустаяСсылка();
			НоваяСтрока.Тариф                                   = 0;
			НоваяСтрока.УслугаПоСчетчикам                       = ТекущаяСтрока.УслугаПоСчетчикам;
			НоваяСтрока.УслугаСНачислениями                     = Ложь;
			НоваяСтрока.УслугаСоставнаяПоСчетчикам              = Ложь;
			НоваяСтрока.УслугаЯвляетсяСоставной                 = Ложь;
			НоваяСтрока.НачальноеСальдо                         = НачальноеСальдо;
			НоваяСтрока.Оплата                                  = 0;
			НоваяСтрока.ПовышающийКоэффициент                   = 0;
			НоваяСтрока.СуммаПовышения                          = 0;
			НоваяСтрока.ЭтоКоммунальнаяУслуга                   = ТекущаяСтрока.ЭтоКоммунальнаяУслуга;
			НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу            = ТекущаяСтрока.ОДНОтноситсяКОбщемуИмуществу;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из ТаблицаОплатПоВидамУслуг Цикл
		
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию И ТекущаяСтрока.Услуга = УслугаДобровольногоСтрахования Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщиеДанные.КвитанцияПоПени Тогда
			
			СуммаОплаты = ТекущаяСтрока.СуммаОплатыПени;
			
		Иначе
			
			Если УчитыватьПениВТекущейКвитанции Тогда
				
				СуммаОплаты = ТекущаяСтрока.СуммаОплаты;
				
			Иначе
				
				СуммаОплаты = ТекущаяСтрока.СуммаОплатыБезПени;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Предоплату по рассрочке не отражаем в сумме оплаты, так как данная сумма
		// предоплаты предназначена для погашения будущих начислений по рассрочке.
		СуммаОплаты = СуммаОплаты - ТекущаяСтрока.СуммаОплатыОстаткаПоРассрочке;
		
		СтрокиНачислений = ТаблицаСНачислениями.НайтиСтроки(Новый Структура("Услуга", ТекущаяСтрока.Услуга));
		Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
			
			СтрокаНачислений.Оплата = СуммаОплаты;
			
		КонецЦикла;
		
		СтрокиНачисленийСост = ТаблицаСНачислениями.НайтиСтроки(Новый Структура("СоставнаяУслуга", ТекущаяСтрока.Услуга));
		Для Каждого СтрокаНачисленийСост Из СтрокиНачисленийСост Цикл
			
			СтрокаНачисленийСост.Оплата = СтрокаНачисленийСост.Оплата + СуммаОплаты;
			
		КонецЦикла;
		
		Если СтрокиНачислений.Количество() = 0 И СтрокиНачисленийСост.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаСНачислениями.Добавить();
			НоваяСтрока.ВидУслуги                               = ТекущаяСтрока.ВидУслуги;
			НоваяСтрока.Услуга                                  = ТекущаяСтрока.Услуга;
			НоваяСтрока.ЛицевойСчет                             = ОбщиеДанные.ЛицевойСчет;
			НоваяСтрока.ЕдИзм                                   = ТекущаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.КодВидаНачисленийИПУ                    = "";
			НоваяСтрока.КодВидаНачисленийОПУ                    = "";
			НоваяСтрока.КоличествоИПУ                           = 0;
			НоваяСтрока.КоличествоОПУ                           = 0;
			НоваяСтрока.КОплатеИПУ                              = 0;
			НоваяСтрока.КОплатеОПУ                              = 0;
			НоваяСтрока.Льгота                                  = 0;
			НоваяСтрока.Начислено                               = 0;
			НоваяСтрока.НачисленоИПУ                            = 0;
			НоваяСтрока.НачисленоОПУ                            = 0;
			НоваяСтрока.Перерасчет                              = 0;
			НоваяСтрока.ПерерасчетИнд                           = 0;
			НоваяСтрока.ПерерасчетОДН                           = 0;
			НоваяСтрока.Помещение                               = ОбщиеДанные.Помещение;
			НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход    = Ложь;
			НоваяСтрока.СоставноеКоличествоИнд                  = "";
			НоваяСтрока.СоставнаяУслуга                         = Справочники.КВП_Услуги.ПустаяСсылка();
			НоваяСтрока.Тариф                                   = 0;
			НоваяСтрока.УслугаПоСчетчикам                       = ТекущаяСтрока.УслугаПоСчетчикам;
			НоваяСтрока.УслугаСНачислениями                     = Ложь;
			НоваяСтрока.УслугаСоставнаяПоСчетчикам              = Ложь;
			НоваяСтрока.УслугаЯвляетсяСоставной                 = Ложь;
			НоваяСтрока.НачальноеСальдо                         = 0;
			НоваяСтрока.Оплата                                  = СуммаОплаты;
			НоваяСтрока.ПовышающийКоэффициент                   = 0;
			НоваяСтрока.СуммаПовышения                          = 0;
			НоваяСтрока.ЭтоКоммунальнаяУслуга                   = ТекущаяСтрока.ЭтоКоммунальнаяУслуга;
			НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу            = ТекущаяСтрока.ОДНОтноситсяКОбщемуИмуществу;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из ТаблицаПениПоВидамУслуг Цикл
		
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию И ТекущаяСтрока.Услуга = УслугаДобровольногоСтрахования Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщиеДанные.КвитанцияПоПени Тогда
			
			Пени = ТекущаяСтрока.СуммаПени;
			
		Иначе
			
			Если УчитыватьПениВТекущейКвитанции Тогда
				
				Пени = ТекущаяСтрока.СуммаПени;
				
			Иначе
				
				Пени = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокиНачислений = ТаблицаСНачислениями.НайтиСтроки(Новый Структура("Услуга", ТекущаяСтрока.Услуга));
		Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
			
			СтрокаНачислений.Пени = Пени;
			
		КонецЦикла;
		
		СтрокиНачисленийСост = ТаблицаСНачислениями.НайтиСтроки(Новый Структура("СоставнаяУслуга", ТекущаяСтрока.Услуга));
		Для Каждого СтрокаНачисленийСост Из СтрокиНачисленийСост Цикл
			
			СтрокаНачисленийСост.Пени = СтрокаНачисленийСост.Пени + Пени;
			
		КонецЦикла;
		
		Если СтрокиНачислений.Количество() = 0 И СтрокиНачисленийСост.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаСНачислениями.Добавить();
			НоваяСтрока.ВидУслуги                               = ТекущаяСтрока.ВидУслуги;
			НоваяСтрока.ВидТарифа                               = Перечисления.КВП_ВидыТарифов.Дневной;
			НоваяСтрока.Услуга                                  = ТекущаяСтрока.Услуга;
			НоваяСтрока.ЛицевойСчет                             = ОбщиеДанные.ЛицевойСчет;
			НоваяСтрока.ЕдИзм                                   = ТекущаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.КодВидаНачисленийИПУ                    = "";
			НоваяСтрока.КодВидаНачисленийОПУ                    = "";
			НоваяСтрока.КоличествоИПУ                           = 0;
			НоваяСтрока.КоличествоОПУ                           = 0;
			НоваяСтрока.КОплатеИПУ                              = 0;
			НоваяСтрока.КОплатеОПУ                              = 0;
			НоваяСтрока.Льгота                                  = 0;
			НоваяСтрока.Начислено                               = 0;
			НоваяСтрока.НачисленоИПУ                            = 0;
			НоваяСтрока.НачисленоОПУ                            = 0;
			НоваяСтрока.Перерасчет                              = 0;
			НоваяСтрока.ПерерасчетИнд                           = 0;
			НоваяСтрока.ПерерасчетОДН                           = 0;
			НоваяСтрока.Помещение                               = ОбщиеДанные.Помещение;
			НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход    = Ложь;
			НоваяСтрока.СоставноеКоличествоИнд                  = "";
			НоваяСтрока.СоставнаяУслуга                         = Справочники.КВП_Услуги.ПустаяСсылка();
			НоваяСтрока.Тариф                                   = 0;
			НоваяСтрока.УслугаПоСчетчикам                       = ТекущаяСтрока.УслугаПоСчетчикам;
			НоваяСтрока.УслугаСНачислениями                     = Ложь;
			НоваяСтрока.УслугаСоставнаяПоСчетчикам              = Ложь;
			НоваяСтрока.УслугаЯвляетсяСоставной                 = Ложь;
			НоваяСтрока.НачальноеСальдо                         = 0;
			НоваяСтрока.Оплата                                  = 0;
			НоваяСтрока.ПовышающийКоэффициент                   = 0;
			НоваяСтрока.СуммаПовышения                          = 0;
			НоваяСтрока.Пени                                    = Пени;
			НоваяСтрока.ОДНОтноситсяКОбщемуИмуществу            = ТекущаяСтрока.ОДНОтноситсяКОбщемуИмуществу;
			НоваяСтрока.ЭтоКоммунальнаяУслуга                   = ТекущаяСтрока.ЭтоКоммунальнаяУслуга;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// (ПД для "Московской области по пост. 679/30" и "Плат. документ (приказ №43/пр)".
// Процедура компонует таблицу начислений по типу начислений: индивидуальным и общедомовым.
Функция ПолучитьТаблицуНачисленийДляМосква679Стандартный43Пр(ТаблицаНачисления, СтруктураНастроек, КвитанцияПоПени = Ложь)
	
	ВидМакета               = СтруктураНастроек.ВидМакета;
	ВидыПлатежныхДокументов = Перечисления.УПЖКХ_ВидыПлатежныхДокументов;
	УслугиБезОДН            = СтруктураНастроек.УслугиБезОДН;
	
	// Дополним таблицу начислений колонками "ТипНачисления" и "Количество" для хранения
	// типа начисления (индивидуальное или общедомовое начисление) и количество потребления по видам услуг.
	
	Если ТаблицаНачисления.Колонки.Найти("ТипНачисления") = Неопределено Тогда
		ТаблицаНачисления.Колонки.Добавить("ТипНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_ТипНачисления"));
	КонецЕсли;
	
	Если ТаблицаНачисления.Колонки.Найти("Количество") = Неопределено Тогда
		ТаблицаНачисления.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,6)));
	КонецЕсли;
	
	Если ТаблицаНачисления.Количество() = 0 Тогда
		Возврат ТаблицаНачисления;
	КонецЕсли;
	
	ТаблицаНачисления.Колонки.Добавить("НачальноеСальдоДляРасчета", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,6)));
	
	// Подготовим итоговую таблицу, которую будем заполнять данными о начислениях в разрезе типов начислений.
	ИтоговаяТаблицаНачисления = ТаблицаНачисления.СкопироватьКолонки();
	
	ИтоговаяТаблицаНачисления.Колонки.Добавить("НачальноеСальдоСРазбивкой", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	
	СтрокаИтога = ИтоговаяТаблицаНачисления.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаИтога, ТаблицаНачисления[0]);
	
	// Подготовим структуры данных для заполнения строк с начислениями. При этом для индивидуальных
	// начислений обнуляем общедомовые показания и наоборот.
	
	КорректировочныеДанныеДляИПУ = Новый Структура;
	КорректировочныеДанныеДляИПУ.Вставить("ТипНачисления", Перечисления.УПЖКХ_ТипНачисления.Индивидуальное);
	КорректировочныеДанныеДляИПУ.Вставить("КоличествоОПУ", 0);
	КорректировочныеДанныеДляИПУ.Вставить("НачисленоОПУ", 0);
	КорректировочныеДанныеДляИПУ.Вставить("КОплатеОПУ", 0);
	КорректировочныеДанныеДляИПУ.Вставить("ПредПоказанияОбщ", 0);
	КорректировочныеДанныеДляИПУ.Вставить("ТекПоказанияОбщ", 0);
	КорректировочныеДанныеДляИПУ.Вставить("КодВидаНачисленийОПУ", 0);
	КорректировочныеДанныеДляИПУ.Вставить("ОбщРасходПоОПУ", 0);
	КорректировочныеДанныеДляИПУ.Вставить("ОбъемПотребленияОПУ", 0);
	КорректировочныеДанныеДляИПУ.Вставить("ОбщРасходРасхождение", 0);
	КорректировочныеДанныеДляИПУ.Вставить("ОбщУчетныйРасход", 0);
	КорректировочныеДанныеДляИПУ.Вставить("ОбщРасходИндНорма", 0);
	КорректировочныеДанныеДляИПУ.Вставить("ОбщРасходИндПУ", 0);
	КорректировочныеДанныеДляИПУ.Вставить("ПерерасчетОДН", 0);
	
	КорректировочныеДанныеДляОПУ = Новый Структура;
	КорректировочныеДанныеДляОПУ.Вставить("ТипНачисления", Перечисления.УПЖКХ_ТипНачисления.Общедомовое);
	КорректировочныеДанныеДляОПУ.Вставить("КоличествоИПУ", 0);
	КорректировочныеДанныеДляОПУ.Вставить("НачисленоИПУ", 0);
	КорректировочныеДанныеДляОПУ.Вставить("ПовышающийКоэффициент", 0);
	КорректировочныеДанныеДляОПУ.Вставить("СуммаПовышения", 0);
	КорректировочныеДанныеДляОПУ.Вставить("КОплатеИПУ", 0);
	КорректировочныеДанныеДляОПУ.Вставить("ОбщРасходПоИПУ", 0);
	КорректировочныеДанныеДляОПУ.Вставить("КодВидаНачисленийИПУ", 0);
	КорректировочныеДанныеДляОПУ.Вставить("ПредПоказанияИнд", 0);
	КорректировочныеДанныеДляОПУ.Вставить("ТекПоказанияИнд", 0);
	КорректировочныеДанныеДляОПУ.Вставить("ОбъемПотребленияИПУ", 0);
	КорректировочныеДанныеДляОПУ.Вставить("Оплата", 0);
	КорректировочныеДанныеДляОПУ.Вставить("НачальноеСальдо", 0);
	КорректировочныеДанныеДляОПУ.Вставить("НачальноеСальдоДляРасчета", 0);
	КорректировочныеДанныеДляОПУ.Вставить("ПерерасчетИнд", 0);
	КорректировочныеДанныеДляОПУ.Вставить("Льгота", 0);
	КорректировочныеДанныеДляОПУ.Вставить("КОплате", 0);
	КорректировочныеДанныеДляОПУ.Вставить("Пени", 0);
	
	// Так как данные в таблице начислений в разрезе видов услуг, то будем обходить
	// строки в таблице по каждому виду услуги.
	врТаблицаВидовУслуг = ТаблицаНачисления.Скопировать(, "ВидУслуги");
	врТаблицаВидовУслуг.Свернуть("ВидУслуги");
	
	Для Каждого ТекущийВидУслуги Из врТаблицаВидовУслуг Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущийВидУслуги.ВидУслуги) Тогда // это итоговая строка.
			Продолжить;
		КонецЕсли;
		
		ТекущиеДанныеВидаУслуги = ТаблицаНачисления.НайтиСтроки(Новый Структура("ВидУслуги", ТекущийВидУслуги.ВидУслуги));
		МассивОДН               = Новый Массив; // для хранения строк с общедомовыми начислениями.
		
		// Для выделения строк с общедомовыми начислениями данные каждой строки помечаем как строка с индивидуальными начислениями,
		// а если в строке имеются данные по общедомовым начислениям, то данную строку запоминаем в массиве для хранения строк с общедомовыми
		// начислениями и запоминаем сумму по общедомовому начислению для отражения данной суммы в поле "КОплате" в строке с индивидуальным начислением.
		
		МассивТекущихДанных = Новый Массив;
		
		Для Каждого ТекущаяСтрока Из ТекущиеДанныеВидаУслуги Цикл
			
			// Установим данные по услуге (начальное сальдо, оплаты, итоговую сумму к оплате) согласно настройкам сбора данных:
			СкорректироватьСуммыПоУслугеПоНастройкамСбораДанныхДляМосква679Стандартный43Пр(ТекущаяСтрока, СтруктураНастроек, КвитанцияПоПени);
			
			Если ТекущаяСтрока.КОплате = 0
			   И ТекущаяСтрока.НачальноеСальдо = 0
			   И ТекущаяСтрока.Начислено = 0
			   И ТекущаяСтрока.ИтогоКОплате = 0
			   И ТекущаяСтрока.Пени = 0
			   И ТекущаяСтрока.Оплата = 0
			   И ТекущаяСтрока.Количество = 0
			   И ТекущаяСтрока.Льгота = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КОплатеОДН = 0;
			
			ЕстьИндивидуальныеНачисления = НЕ (ТекущаяСтрока.КоличествоИПУ = 0
											 И ТекущаяСтрока.НачисленоИПУ = 0
											 И ТекущаяСтрока.ПерерасчетИнд = 0
											 И ТекущаяСтрока.ОбщРасходИнд = 0
											 И ТекущаяСтрока.СуммаПовышения = 0
											 И ТекущаяСтрока.ОбщРасходИндНорма = 0
											 И ТекущаяСтрока.ОбщРасходИндПУ = 0
											 И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ОбъемПотребленияИПУ)
											 И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ПредПоказанияИнд)
											 И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ТекПоказанияИнд));
			
			ЭтоУслугаСИндивидуальнымиНачислениямиПоНастройкеУслугиБезОДН = УслугиБезОДН.НайтиСтроки(Новый Структура("Услуга", ТекущаяСтрока.Услуга)).Количество() > 0;
			
			ЕстьОДН = НЕ ЭтоУслугаСИндивидуальнымиНачислениямиПоНастройкеУслугиБезОДН
				   И (ЗначениеЗаполнено(ТекущаяСтрока.КоличествоОПУ)
				  ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.НачисленоОПУ)
				  ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.КОплатеОПУ)
				//  ИЛИ (ЗначениеЗаполнено(ТекущаяСтрока.ПредПоказанияОбщ) И НЕ ТекущаяСтрока.ПредПоказанияОбщ = "0")
				  ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.ОбщРасходПоОПУ)
				  ИЛИ (ЗначениеЗаполнено(ТекущаяСтрока.ОбъемПотребленияОПУ) И НЕ ТекущаяСтрока.ОбъемПотребленияОПУ = "0")
				  ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.ОбщРасходОбщ)
				//  ИЛИ (ЗначениеЗаполнено(ТекущаяСтрока.ТекПоказанияОбщ) И НЕ ТекущаяСтрока.ТекПоказанияОбщ = "0")
				  ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.ПерерасчетОДН));
			
			// Корректируем сумму начисления и расход по услуге согласно типу квитанции и типу начислений:
			Если КвитанцияПоПени Тогда
				
				ТекущаяСтрока.Начислено = ТекущаяСтрока.Начислено;
				
			ИначеЕсли ТекущаяСтрока.СтрокаДляОбщегоИмущества = Истина Тогда
				
				ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоОПУ;
				ТекущаяСтрока.Начислено  = ТекущаяСтрока.НачисленоОПУ;
				
			Иначе
				
				Если ЕстьИндивидуальныеНачисления Тогда
					
					ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоИПУ;
					ТекущаяСтрока.Начислено  = ТекущаяСтрока.НачисленоИПУ;
					
				ИначеЕсли ЕстьОДН Тогда
					
					ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоОПУ;
					ТекущаяСтрока.Начислено  = ТекущаяСтрока.НачисленоОПУ;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// В случае, если по услуге нет индивидуальных начислений, но есть начисления по ОДН, помечаем текущую строку 
			// как строка по ОДН и заполяем недостающие параметры строки.
			
			Если ЕстьИндивидуальныеНачисления Тогда
				
				// Детализацию по типу начисления определим по наличию хотя бы одного не нулевого значения по ОПУ.
				Если НЕ ТекущаяСтрока.СтрокаДетализацииСост И НЕ ТекущаяСтрока.СтрокаДетализацииТариф Тогда
					
					ТекущаяСтрока.Перерасчет = ТекущаяСтрока.Перерасчет - ТекущаяСтрока.ПерерасчетОДН;
					
					Если ЕстьОДН Тогда
						
						Отбор = Новый Структура;
						Отбор.Вставить("ВидУслуги",                ТекущаяСтрока.ВидУслуги);
						Отбор.Вставить("Услуга",                   ТекущаяСтрока.Услуга);
						Отбор.Вставить("СтрокаДляОбщегоИмущества", Ложь);
						
						ВидыУслугОДН = ТаблицаНачисления.Скопировать(Отбор); // получаем сведения по текущему виду услуги и услуге со всеми возможными
																			 // детализациями для пометки данных строк как данные с общедомовыми начислениями.
						Для Каждого СтрокаОДН Из ВидыУслугОДН Цикл
							
							Если СтрокаОДН.НачисленоОПУ <> 0 ИЛИ СтрокаОДН.ПерерасчетОДН <> 0 Тогда
								
								СтрокаОДН.Перерасчет = СтрокаОДН.ПерерасчетОДН;
								
								ЗаполнитьЗначенияСвойств(СтрокаОДН, КорректировочныеДанныеДляОПУ);
								МассивОДН.Добавить(СтрокаОДН);
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				ИначеЕсли ТекущаяСтрока.СтрокаДетализацииСост ИЛИ ТекущаяСтрока.СтрокаДетализацииТариф Тогда
					
					ТекущаяСтрока.КОплате = 0;
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, КорректировочныеДанныеДляИПУ);
				
			Иначе
				
				Если ЕстьОДН Тогда
					
					ТекущаяСтрока.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое;
					
					Если НЕ ТекущаяСтрока.СтрокаДетализацииСост И НЕ ТекущаяСтрока.СтрокаДетализацииТариф Тогда
						
						ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоОПУ;
						ТекущаяСтрока.Начислено  = ТекущаяСтрока.НачисленоОПУ;
						
					Иначе
						
						ТекущаяСтрока.КОплате = 0;
						
						Отбор = Новый Структура;
						Отбор.Вставить("ВидУслуги",                ТекущаяСтрока.ВидУслуги);
						Отбор.Вставить("Услуга",                   ТекущаяСтрока.Услуга);
						Отбор.Вставить("ВидТарифа",                ТекущаяСтрока.ВидТарифа);
						Отбор.Вставить("СтрокаДляОбщегоИмущества", Ложь);
						Отбор.Вставить("СтрокаДетализацииСост",    ТекущаяСтрока.СтрокаДетализацииСост);
						Отбор.Вставить("СтрокаДетализацииТариф",   ТекущаяСтрока.СтрокаДетализацииТариф);
						
						ВидыУслугОДН = ТаблицаНачисления.Скопировать(Отбор); // получаем сведения по текущему виду услуги и услуге со всеми возможными
																			 // детализациями для пометки данных строк как данные с общедомовыми начислениями.
						Для Каждого СтрокаОДН Из ВидыУслугОДН Цикл
							
							Если СтрокаОДН.НачисленоОПУ <> 0 ИЛИ СтрокаОДН.ПерерасчетОДН <> 0 Тогда
								
								СтрокаОДН.Перерасчет = СтрокаОДН.ПерерасчетОДН;
								
								ЗаполнитьЗначенияСвойств(СтрокаОДН, КорректировочныеДанныеДляОПУ);
								МассивОДН.Добавить(СтрокаОДН);
								
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
				Иначе
					
					ТекущаяСтрока.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущаяСтрока.СтрокаДляОбщегоИмущества = Истина Тогда
				
				ТекущаяСтрока.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое;
				
				// Заполняем "обнуленные" параметры, так как если услуга по СОИ, но при этом если индивидуальное
				// потребление по зданию, тогда в текущем механизме сведения по услуге считаются по индивидуальным начислениям
				// и все общедомовые параметры (КоличествоОПУ, НачисленоОПУ) обнуляются.
				// Данный механизм будет переработан из-за сложности в логике.
				ТекущаяСтрока.КоличествоОПУ = ТекущаяСтрока.Количество;
				ТекущаяСтрока.НачисленоОПУ  = ТекущаяСтрока.Начислено;
				
			КонецЕсли;
			
			МассивТекущихДанных.Добавить(ТекущаяСтрока);
			
		КонецЦикла;
		
		Для Каждого ТекущаяСтрока Из МассивТекущихДанных Цикл
			
			// Такие строки уже есть в МассивеОДН. Добавлять их повторно в итоговую таблицу не надо.
			Если ТекущаяСтрока.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое
			   И (ТекущаяСтрока.СтрокаДетализацииСост Или ТекущаяСтрока.СтрокаДетализацииТариф)
			   И Не ТекущаяСтрока.СтрокаДляОбщегоИмущества Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ИтоговаяТаблицаНачисления.Добавить(), ТекущаяСтрока);
			
		КонецЦикла;
		
		// Выводим в итоговую таблицу строки с общедомовым начислением.
		Для Каждого СтрокаОДН Из МассивОДН Цикл
			
			НоваяСтрока = ИтоговаяТаблицаНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОДН);
			
			Если МассивОДН.Количество() = 1 Тогда
				НоваяСтрока.ВидДляВывода = СтрЗаменить(СтрокаОДН.ВидДляВывода, ":", "");
			КонецЕсли;
			
			НоваяСтрока.Количество = СтрокаОДН.КоличествоОПУ;
			НоваяСтрока.Начислено  = СтрокаОДН.НачисленоОПУ;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаНачисления.Колонки.Удалить("НачальноеСальдоДляРасчета");
	
	// Пересчитаем итоговые значения в строке итога. При этом значение поля "КОплате"
	// рассчитаем по суммам в основных строках с начислениями без делализаций.
	
	СтрокаИтога.Оплата         = ИтоговаяТаблицаНачисления.Итог("Оплата");
	СтрокаИтога.КОплате        = 0;
	СтрокаИтога.ИтогоКОплате   = 0;
	СтрокаИтога.Пени           = 0;
	СтрокаИтога.Начислено      = 0;
	СтрокаИтога.СуммаПовышения = 0;
	СтрокаИтога.Перерасчет     = 0;
	СтрокаИтога.Льгота         = 0;
	
	// Получим суммы задолженности и переплаты по квитанции на начало отчетного периода для вывода
	// в итоговой строке таблицы начислений:
	НачальноеСальдоЗадолженность = 0;
	НачальноеСальдоПереплата     = 0;
	
	// Будем выводить обе суммы: задолженности и переплаты по услугам, - в одной ячейке
	// итоговой строки в квитанции согласно следующим настройкам сбора данных:
	Если СтруктураНастроек.ВыводитьНачальноеСальдо
	   И (СтруктураНастроек.ВключениеНачальнойЗадолженности = "ВключатьЗадолженность" ИЛИ СтруктураНастроек.ВключениеНачальнойЗадолженности = "ВключатьАванс") Тогда
		
		ВыводитьНачальноеСальдоСРазбивкой = Истина;
		
	Иначе
		
		ВыводитьНачальноеСальдоСРазбивкой = Ложь;
		
	КонецЕсли;
	
	НеВыводитьОтрицательнуюСуммуКОплатеПоУслугам = СтруктураНастроек.НеВыводитьОтрицательнуюСуммуКОплатеПоУслугам;
	
	Для Каждого ТекущаяСтрока Из ИтоговаяТаблицаНачисления Цикл
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ВидУслуги)
		   И НЕ ТекущаяСтрока.СтрокаДетализацииСост И НЕ ТекущаяСтрока.СтрокаДетализацииТариф Тогда
			
			Если ВидМакета = ВидыПлатежныхДокументов.Москва679 Тогда
				
				Если НеВыводитьОтрицательнуюСуммуКОплатеПоУслугам
				   И ТекущаяСтрока.КОплате < 0 Тогда
					ТекущаяСтрока.КОплате = 0;
				Иначе
					СтрокаИтога.КОплате = СтрокаИтога.КОплате + ТекущаяСтрока.КОплате;
				КонецЕсли;
				
			ИначеЕсли ВидМакета = ВидыПлатежныхДокументов.Стандартный43Пр Тогда
				
				ТекущаяСтрока.ИтогоКОплате = ТекущаяСтрока.КОплате + ТекущаяСтрока.Пени + ТекущаяСтрока.НачальноеСальдоДляРасчета;
				
				СтрокаИтога.КОплате        = СтрокаИтога.КОплате + ТекущаяСтрока.КОплате;
				СтрокаИтога.ИтогоКОплате   = СтрокаИтога.ИтогоКОплате + ТекущаяСтрока.ИтогоКОплате;
				
			КонецЕсли;
			
			СтрокаИтога.Пени           = СтрокаИтога.Пени + ТекущаяСтрока.Пени;
			СтрокаИтога.Начислено      = СтрокаИтога.Начислено + ТекущаяСтрока.Начислено;
			СтрокаИтога.СуммаПовышения = СтрокаИтога.СуммаПовышения + ТекущаяСтрока.СуммаПовышения;
			СтрокаИтога.Перерасчет     = СтрокаИтога.Перерасчет + ТекущаяСтрока.Перерасчет;
			СтрокаИтога.Льгота         = СтрокаИтога.Льгота + ТекущаяСтрока.Льгота;
			
			// Собираем сведения о задолженностях и переплатах по услугам.
			Если ВыводитьНачальноеСальдоСРазбивкой Тогда
				
				Если ТекущаяСтрока.НачальноеСальдо > 0 Тогда
					
					НачальноеСальдоЗадолженность = НачальноеСальдоЗадолженность + ТекущаяСтрока.НачальноеСальдо;
					
				ИначеЕсли ТекущаяСтрока.НачальноеСальдо < 0 Тогда
					
					НачальноеСальдоПереплата = НачальноеСальдоПереплата + ТекущаяСтрока.НачальноеСальдо;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Устанавливаем сумму начального сальдо согласно настройкам сбора.
	Если ВыводитьНачальноеСальдоСРазбивкой Тогда
		
		НачальноеСальдоСРазбивкой = "";
		СтрокаФормата             = "ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=";
		
		Если НЕ НачальноеСальдоЗадолженность = 0 И НачальноеСальдоПереплата = 0 Тогда
			
			НачальноеСальдоСРазбивкой = НачальноеСальдоЗадолженность;
			
		ИначеЕсли НачальноеСальдоЗадолженность = 0 И НЕ НачальноеСальдоПереплата = 0 Тогда
			
			НачальноеСальдоСРазбивкой = НачальноеСальдоПереплата;
			
		ИначеЕсли НЕ НачальноеСальдоЗадолженность = 0 И НЕ НачальноеСальдоПереплата = 0 Тогда
			
			НачальноеСальдоСРазбивкой = ""
									  + Формат(НачальноеСальдоЗадолженность, СтрокаФормата)
									  + "/" + Символы.ПС
									  + Формат(НачальноеСальдоПереплата, СтрокаФормата);
		КонецЕсли;
		
		СтрокаИтога.НачальноеСальдоСРазбивкой = НачальноеСальдоСРазбивкой;
		СтрокаИтога.НачальноеСальдо           = 0;
		
	Иначе
		
		СтрокаИтога.НачальноеСальдо = ИтоговаяТаблицаНачисления.Итог("НачальноеСальдо");
		
	КонецЕсли;
	
	// Запомним параметр вывода начального сальдо с разбивкой для корректного вывода в квитанции.
	СтруктураНастроек.Вставить("ВыводитьНачальноеСальдоСРазбивкой", ВыводитьНачальноеСальдоСРазбивкой);
	
	Возврат ИтоговаяТаблицаНачисления;
	
КонецФункции // ПолучитьТаблицуНачисленийДляМосква679Стандартный43Пр()

// Процедура устанавливает суммы начального сальдо, оплаты, итоговой суммы к оплате по услуге согласно 
// настройкам сбора данных в справочнике "Настройки сбора данных для квитанций и обменов".
//
// Параметры:
//  ТекущаяСтрока	  - Строка таблицы значений - данные о начислениях по услуге.
//  СтруктураНастроек - Структура - структура настроек сбора данных для квитанций и обменов.
//  КвитанцияПоПени   - Булево - признак пени.
//
Процедура СкорректироватьСуммыПоУслугеПоНастройкамСбораДанныхДляМосква679Стандартный43Пр(ТекущаяСтрока, СтруктураНастроек, КвитанцияПоПени)
	
	ВидМакета = СтруктураНастроек.ВидМакета;
	ВидыПлатежныхДокументов = Перечисления.УПЖКХ_ВидыПлатежныхДокументов;
	
	// Настройки сбора данных:
	ВключениеНачальнойЗадолженности = СтруктураНастроек.ВключениеНачальнойЗадолженности;
	ВключатьОплатыВНачальноеСальдо  = СтруктураНастроек.ВключатьОплатыВНачальноеСальдо;
	
	// Данные по услуге за отчетный месяц:
	НачальноеСальдо                 = ТекущаяСтрока.НачальноеСальдо;
	Оплата                          = ТекущаяСтрока.Оплата;
	Пени                            = ТекущаяСтрока.Пени;
	
	НачальноеСальдоДляРасчета = 0;
	
	// Сумма начислений в отчетном месяце:
	Если КвитанцияПоПени И ВидМакета = ВидыПлатежныхДокументов.Стандартный43Пр Тогда
		ВсегоКОплате = 0;
	Иначе
		ВсегоКОплате = ТекущаяСтрока.Начислено
					 + ТекущаяСтрока.СуммаПовышения
					 + ТекущаяСтрока.Перерасчет
					 - ?(СтруктураНастроек.ЛьготыСправочно, 0, ТекущаяСтрока.Льгота);
	КонецЕсли;
	
	ИтогоКОплате = ВсегоКОплате;
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо Тогда
		
		Если ВключатьОплатыВНачальноеСальдо Тогда
			// Отражаем оплату по услуге в начальном сальдо, при этом сумму оплаты обнуляем.
			НачальноеСальдо = НачальноеСальдо - Оплата;
			Оплата = 0;
		КонецЕсли;
		
		// Аванс и Задолженность необходимы для расчета итоговой суммы к оплате по услуге согласно
		// настройкам сбора данных.
		Если НачальноеСальдо > 0 Тогда
			Задолженность = НачальноеСальдо;
			Аванс         = 0;
		Иначе
			Задолженность = 0;
			Аванс         = -НачальноеСальдо;
		КонецЕсли;
		
		Если ВидМакета = ВидыПлатежныхДокументов.Стандартный43Пр Тогда
			
			НачальноеСальдоДляРасчета = 0;
			
			// Рассчитываем итоговоую сумму к оплате по настройкам сбора данных.
			Если ВключениеНачальнойЗадолженности = "ВключатьЗадолженность" Тогда
				
				ИтогоКОплате = ИтогоКОплате + Задолженность - Оплата;
				
				НачальноеСальдоДляРасчета = Задолженность;
				
			ИначеЕсли ВключениеНачальнойЗадолженности = "ВключатьАванс" Тогда
				
				ИтогоКОплате = ИтогоКОплате - Аванс - Оплата;
				
				НачальноеСальдоДляРасчета = -Аванс;
				
			ИначеЕсли ВключениеНачальнойЗадолженности = "ВключатьНачСальдо" Тогда
				
				ИтогоКОплате = ИтогоКОплате - Аванс + Задолженность - Оплата;
				
				НачальноеСальдоДляРасчета = НачальноеСальдо;
				
			КонецЕсли;
			
			ИтогоКОплате = ИтогоКОплате + Пени;
			
		Иначе
			
			// Рассчитываем итоговоую сумму к оплате по настройкам сбора данных.
			Если ВключениеНачальнойЗадолженности = "ВключатьЗадолженность" Тогда
				
				ВсегоКОплате = ВсегоКОплате + Задолженность - Оплата;
				
			ИначеЕсли ВключениеНачальнойЗадолженности = "ВключатьАванс" Тогда
				
				ВсегоКОплате = ВсегоКОплате - Аванс - Оплата;
				
			ИначеЕсли ВключениеНачальнойЗадолженности = "ВключатьНачСальдо" Тогда
				
				ВсегоКОплате = ВсегоКОплате - Аванс + Задолженность - Оплата;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяСтрока.НачальноеСальдоДляРасчета = НачальноеСальдоДляРасчета;
	
	ТекущаяСтрока.НачальноеСальдо = НачальноеСальдо;
	ТекущаяСтрока.Оплата          = Оплата;
	ТекущаяСтрока.КОплате         = ВсегоКОплате;
	ТекущаяСтрока.Пени            = Пени;
	ТекущаяСтрока.ИтогоКОплате    = ИтогоКОплате;
	
КонецПроцедуры // СкорректироватьСуммыПоУслугеПоНастройкамСбораДанныхДляМосква679Стандартный43Пр()

// Формирует таблицу с суммами по услугам лицевых счетов.
Функция ПолучитьОбщиеИтоговыеСуммыПоУслугам(СтруктураНастроек, СтруктураОбщихТаблиц, КвитанцияПоПеням = Ложь)
	
	ВидМакета = СтруктураНастроек.ВидМакета;
	Макеты    = Перечисления.УПЖКХ_ВидыПлатежныхДокументов;
	
	Таблица = Новый ТаблицаЗначений;
	
	Колонки = Таблица.Колонки;
	
	ТипСуммы = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	
	Колонки.Добавить("Здание",                             Новый ОписаниеТипов("СправочникСсылка.КВП_Здания"));
	Колонки.Добавить("Подъезд",                            Новый ОписаниеТипов("СправочникСсылка.КВП_Подъезды"));
	Колонки.Добавить("ЛицевойСчет",                        Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	Колонки.Добавить("Услуга",                             Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	Колонки.Добавить("ВидУслуги",                          Новый ОписаниеТипов("СправочникСсылка.КВП_ВидыУслуг"));
	Колонки.Добавить("НаименованиеВидаУслуги",             Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	Колонки.Добавить("ЭтоСведенияПоКапРемонту",            Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ВсегоКОплате",                       ТипСуммы);
	Колонки.Добавить("СуммаПениДляQRСУчетомНачСальдоПени", ТипСуммы);
	Колонки.Добавить("СуммаПени",                          ТипСуммы);
	Колонки.Добавить("НачальноеСальдо",                    ТипСуммы);
	Колонки.Добавить("СуммаНачисления",                    ТипСуммы);
	Колонки.Добавить("ВсегоОплат",                         ТипСуммы);
	
	Если НЕ (ВидМакета = Макеты.СтандартныйКР ИЛИ ВидМакета = Макеты.Стандартный
	 ИЛИ ВидМакета = Макеты.Стандартный43Пр ИЛИ ВидМакета = Макеты.СПолямиБанка1
	 ИЛИ ВидМакета = Макеты.Москва ИЛИ ВидМакета = "ОбменССайтомЖКХ4") Тогда
		Возврат Таблица;
	КонецЕсли;
	
	Организация       = СтруктураНастроек.Организация;
	ТаблицаСальдо     = ?(КвитанцияПоПеням, СтруктураОбщихТаблиц.ТаблицаПениСальдоОбщПоВидамУслуг, СтруктураОбщихТаблиц.ТаблицаСальдоОбщПоВидамУслуг);
	ТаблицаНачисления = ?(КвитанцияПоПеням, СтруктураОбщихТаблиц.ТаблицаПениНачисленияОбщ, СтруктураОбщихТаблиц.ТаблицаНачисленияОбщ);
	ТаблицаОплат      = ?(КвитанцияПоПеням, СтруктураОбщихТаблиц.ТаблицаПениОплатОбщПоВидамУслуг, СтруктураОбщихТаблиц.ТаблицаОплатОбщПоВидамУслуг);
	
	УчитыватьПени = (СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням);
	ТаблицаПени   = ?(УчитыватьПени, СтруктураОбщихТаблиц.ТаблицаПениОбщПоВидамУслуг, СтруктураОбщихТаблиц.ТаблицаПениОбщПоВидамУслуг.СкопироватьКолонки());
	
	Если Не СтруктураНастроек.ПараметрыУПОтказ Тогда
		НеУчитыватьЛьготы = СтруктураНастроек.ПараметрыУП.НеУчитыватьЛьготыВоВзаиморасчетах;
	Иначе
		НеУчитыватьЛьготы = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги КАК ВидУслуги,
	|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый КАК НовыйВидУслуги
	|ПОМЕСТИТЬ втНовыеВидыУслуг
	|ИЗ
	|	РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНачисления.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаНачисления.Услуга КАК Услуга,
	|	ТаблицаНачисления.ВидУслуги КАК ВидУслуги,
	|	ВЫБОР
	|		КОГДА &НеУчитыватьЛьготы
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаНачисления.Льгота
	|	КОНЕЦ + ТаблицаНачисления.Начислено + ТаблицаНачисления.Перерасчет + ТаблицаНачисления.СуммаПовышения КАК Начислено
	|ПОМЕСТИТЬ врТаблицаНачисления
	|ИЗ
	|	&ТаблицаНачисления КАК ТаблицаНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСальдо.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаСальдо.Услуга КАК Услуга,
	|	ТаблицаСальдо.ВидУслуги КАК ВидУслуги,
	|	ВЫБОР
	|		КОГДА &ВыводитьНачальноеСальдо
	|			ТОГДА ВЫБОР
	|					КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьЗадолженность""
	|						ТОГДА ВЫБОР
	|								КОГДА ТаблицаСальдо.НачальноеСальдоБезПени > 0
	|									ТОГДА ТаблицаСальдо.НачальноеСальдоБезПени
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьАванс""
	|						ТОГДА ВЫБОР
	|								КОГДА ТаблицаСальдо.НачальноеСальдоБезПени < 0
	|									ТОГДА ТаблицаСальдо.НачальноеСальдоБезПени
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьНачСальдо""
	|						ТОГДА ТаблицаСальдо.НачальноеСальдоБезПени
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальноеСальдоБезПени,
	|	ВЫБОР
	|		КОГДА &ВыводитьНачальноеСальдо
	|			ТОГДА ВЫБОР
	|					КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьЗадолженность""
	|						ТОГДА ВЫБОР
	|								КОГДА ТаблицаСальдо.НачальноеСальдоПени > 0
	|									ТОГДА ТаблицаСальдо.НачальноеСальдоПени
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьАванс""
	|						ТОГДА ВЫБОР
	|								КОГДА ТаблицаСальдо.НачальноеСальдоПени < 0
	|									ТОГДА ТаблицаСальдо.НачальноеСальдоПени
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьНачСальдо""
	|						ТОГДА ТаблицаСальдо.НачальноеСальдоПени
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальноеСальдоПени,
	|	ТаблицаСальдо.НачальноеСальдоПениДляQR КАК НачальноеСальдоПениДляQR,
	|	ТаблицаСальдо.НачальноеСальдо КАК НачальноеСальдо
	|ПОМЕСТИТЬ врТаблицаСальдо
	|ИЗ
	|	&ТаблицаСальдо КАК ТаблицаСальдо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПени.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаПени.Услуга КАК Услуга,
	|	ТаблицаПени.ВидУслуги КАК ВидУслуги,
	|	ТаблицаПени.СуммаПени КАК СуммаПени
	|ПОМЕСТИТЬ врТаблицаПени
	|ИЗ
	|	&ТаблицаПени КАК ТаблицаПени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплат.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаОплат.Услуга КАК Услуга,
	|	ТаблицаОплат.ВидУслуги КАК ВидУслуги,
	|	ТаблицаОплат.СуммаОплаты КАК СуммаОплаты,
	|	ВЫБОР
	|		КОГДА &ВыводитьНачальноеСальдо
	|				И НЕ &ВключениеНачальнойЗадолженности = ""НеВыводить""
	|			ТОГДА ТаблицаОплат.СуммаОплатыБезПени
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОплатыБезПени,
	|	ВЫБОР
	|		КОГДА &ВыводитьНачальноеСальдо
	|				И НЕ &ВключениеНачальнойЗадолженности = ""НеВыводить""
	|			ТОГДА ТаблицаОплат.СуммаОплатыПени
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОплатыПени,
	|	ТаблицаОплат.СуммаОплатыОстаткаПоРассрочке КАК СуммаОплатыОстаткаПоРассрочке,
	|	ТаблицаОплат.СуммаОплатыДобровольногоСтрахования КАК СуммаОплатыДобровольногоСтрахования
	|ПОМЕСТИТЬ врТаблицаОплат
	|ИЗ
	|	&ТаблицаОплат КАК ТаблицаОплат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(врТаблицаСальдо.ЛицевойСчет КАК Справочник.КВП_ЛицевыеСчета) КАК ЛицевойСчет,
	|	ВЫРАЗИТЬ(врТаблицаСальдо.Услуга КАК Справочник.КВП_Услуги) КАК Услуга,
	|	ВЫРАЗИТЬ(врТаблицаСальдо.ВидУслуги КАК Справочник.КВП_ВидыУслуг) КАК ВидУслуги,
	|	врТаблицаСальдо.НачальноеСальдоБезПени + врТаблицаСальдо.НачальноеСальдоПени КАК ВсегоКОплате,
	|	врТаблицаСальдо.НачальноеСальдоПениДляQR КАК СуммаПениДляQRСУчетомНачСальдоПени,
	|	0 КАК СуммаПени,
	|	врТаблицаСальдо.НачальноеСальдо КАК НачальноеСальдо,
	|	0 КАК СуммаНачисления,
	|	0 КАК ВсегоОплат
	|ПОМЕСТИТЬ врТаблицаОбороты
	|ИЗ
	|	врТаблицаСальдо КАК врТаблицаСальдо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врТаблицаНачисления.ЛицевойСчет,
	|	врТаблицаНачисления.Услуга,
	|	врТаблицаНачисления.ВидУслуги,
	|	врТаблицаНачисления.Начислено,
	|	0,
	|	0,
	|	0,
	|	врТаблицаНачисления.Начислено,
	|	0
	|ИЗ
	|	врТаблицаНачисления КАК врТаблицаНачисления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врТаблицаПени.ЛицевойСчет,
	|	врТаблицаПени.Услуга,
	|	врТаблицаПени.ВидУслуги,
	|	врТаблицаПени.СуммаПени,
	|	0,
	|	врТаблицаПени.СуммаПени,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	врТаблицаПени КАК врТаблицаПени
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врТаблицаОплат.ЛицевойСчет,
	|	врТаблицаОплат.Услуга,
	|	врТаблицаОплат.ВидУслуги,
	|	-врТаблицаОплат.СуммаОплатыБезПени - врТаблицаОплат.СуммаОплатыПени - врТаблицаОплат.СуммаОплатыОстаткаПоРассрочке - врТаблицаОплат.СуммаОплатыДобровольногоСтрахования,
	|	0,
	|	0,
	|	0,
	|	0,
	|	-врТаблицаОплат.СуммаОплатыБезПени - врТаблицаОплат.СуммаОплатыПени - врТаблицаОплат.СуммаОплатыОстаткаПоРассрочке - врТаблицаОплат.СуммаОплатыДобровольногоСтрахования
	|ИЗ
	|	врТаблицаОплат КАК врТаблицаОплат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаОбороты.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	врТаблицаОбороты.ЛицевойСчет.Адрес.Подъезд КАК Подъезд,
	|	врТаблицаОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	врТаблицаОбороты.Услуга КАК Услуга,
	|	ЕСТЬNULL(втНовыеВидыУслуг.НовыйВидУслуги, врТаблицаОбороты.ВидУслуги) КАК ВидУслуги,
	|	ЕСТЬNULL(втНовыеВидыУслуг.НовыйВидУслуги.Наименование, врТаблицаОбороты.ВидУслуги.Наименование) КАК НаименованиеВидаУслуги,
	|	врТаблицаОбороты.Услуга В (&СписокУслугКапРемонт) КАК ЭтоСведенияПоКапРемонту,
	|	СУММА(ЕСТЬNULL(врТаблицаОбороты.ВсегоКОплате, 0)) КАК ВсегоКОплате,
	|	СУММА(ЕСТЬNULL(врТаблицаОбороты.СуммаПениДляQRСУчетомНачСальдоПени, 0)) КАК СуммаПениДляQRСУчетомНачСальдоПени,
	|	СУММА(ЕСТЬNULL(врТаблицаОбороты.СуммаПени, 0)) КАК СуммаПени,
	|	СУММА(ЕСТЬNULL(врТаблицаОбороты.НачальноеСальдо, 0)) КАК НачальноеСальдо,
	|	СУММА(ЕСТЬNULL(врТаблицаОбороты.СуммаНачисления, 0)) КАК СуммаНачисления,
	|	СУММА(ЕСТЬNULL(-врТаблицаОбороты.ВсегоОплат, 0)) КАК ВсегоОплат
	|ИЗ
	|	врТаблицаОбороты КАК врТаблицаОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНовыеВидыУслуг КАК втНовыеВидыУслуг
	|		ПО врТаблицаОбороты.ВидУслуги = втНовыеВидыУслуг.ВидУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	врТаблицаОбороты.ЛицевойСчет.Адрес.Владелец,
	|	врТаблицаОбороты.ЛицевойСчет.Адрес.Подъезд,
	|	врТаблицаОбороты.Услуга,
	|	ЕСТЬNULL(втНовыеВидыУслуг.НовыйВидУслуги, врТаблицаОбороты.ВидУслуги),
	|	ЕСТЬNULL(втНовыеВидыУслуг.НовыйВидУслуги.Наименование, врТаблицаОбороты.ВидУслуги.Наименование),
	|	врТаблицаОбороты.ЛицевойСчет,
	|	врТаблицаОбороты.Услуга В (&СписокУслугКапРемонт)
	|
	|ИМЕЮЩИЕ
	|	НЕ(СУММА(ЕСТЬNULL(врТаблицаОбороты.ВсегоКОплате, 0)) = 0
	|			И СУММА(ЕСТЬNULL(врТаблицаОбороты.СуммаПениДляQRСУчетомНачСальдоПени, 0)) = 0
	|			И СУММА(ЕСТЬNULL(врТаблицаОбороты.СуммаПени, 0)) = 0
	|			И СУММА(ЕСТЬNULL(врТаблицаОбороты.НачальноеСальдо, 0)) = 0
	|			И СУММА(ЕСТЬNULL(врТаблицаОбороты.СуммаНачисления, 0)) = 0
	|			И СУММА(ЕСТЬNULL(-врТаблицаОбороты.ВсегоОплат, 0)) = 0)";
	
	Запрос.УстановитьПараметр("Организация",                     Организация);
	Запрос.УстановитьПараметр("ТаблицаСальдо",                   ТаблицаСальдо);
	Запрос.УстановитьПараметр("ТаблицаПени",                     ТаблицаПени);
	Запрос.УстановитьПараметр("ТаблицаОплат",                    ТаблицаОплат);
	Запрос.УстановитьПараметр("ТаблицаНачисления",               ТаблицаНачисления);
	Запрос.УстановитьПараметр("ВыводитьНачальноеСальдо",         СтруктураНастроек.ВыводитьНачальноеСальдо);
	Запрос.УстановитьПараметр("ВключениеНачальнойЗадолженности", СтруктураНастроек.ВключениеНачальнойЗадолженности);
	Запрос.УстановитьПараметр("НеУчитыватьЛьготы",               НеУчитыватьЛьготы);
	Запрос.УстановитьПараметр("СписокУслугКапРемонт",            СтруктураНастроек.СписокУслугКапРемонт);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьОбщиеИтоговыеСуммыПоУслугам()

// Заполняет пустую таблицу сведений о поставщиках данными и присваивает 
// уникальный порядковый номер каждому поставщику. Возвращает максимальный порядковый номер в таблице.
//
// Параметры:
//  ТаблицаПоставщиковССоответствиями - общая таблица поставщиков.
//
Функция ЗаполнитьПорядковыеНомераПоставщиков(ТаблицаПоставщиковССоответствиями) Экспорт
	
	Если ТаблицаПоставщиковССоответствиями.Колонки.Найти("ПорядковыйНомерПоставщика") = Неопределено Тогда
		ТаблицаПоставщиковССоответствиями.Колонки.Добавить("ПорядковыйНомерПоставщика", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Отбор = Новый Структура("Поставщик");
	Если НЕ ТаблицаПоставщиковССоответствиями.Колонки.Найти("РасчетныйСчетСсылка") = Неопределено Тогда
		Отбор.Вставить("РасчетныйСчетСсылка");
	КонецЕсли;
	
	ПорядковыйНомер = 1;
	
	Для Каждого СтрокаПоставщика Из ТаблицаПоставщиковССоответствиями Цикл
		Если СтрокаПоставщика.ПорядковыйНомерПоставщика = 0 Тогда
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаПоставщика);
			
			НайденныеСтроки = ТаблицаПоставщиковССоответствиями.НайтиСтроки(Отбор);
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				Строка.ПорядковыйНомерПоставщика = ПорядковыйНомер;
			КонецЦикла;
			
			ПорядковыйНомер = ПорядковыйНомер + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПорядковыйНомер;
	
КонецФункции // ЗаполнитьПорядковыеНомераПоставщиков()

// Формирует таблицу со сведениями о расчетных счетах по зданиям.
//
// Параметры:
//  СтруктураНастроек - Структура - структура параметров настроек.
//  ПоУслугамКапитальногоРемонта - Булево - определяет получение сведений по услугам кап.ремонта или остальным услугам.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьТаблицуРасчетныхСчетовОрганизацийОбсуживающихЗдания(СтруктураНастроек, ПоУслугамКапитальногоРемонта) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	КолонкиТаблицы = Таблица.Колонки;
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100));
	
	КолонкиТаблицы.Добавить("Здание",               Новый ОписаниеТипов("СправочникСсылка.КВП_Здания"));
	КолонкиТаблицы.Добавить("РасчетныйСчетСсылка",  Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	КолонкиТаблицы.Добавить("ВладелецСчета",        Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.Организации"));
	КолонкиТаблицы.Добавить("ВладелецНаименование", ТипСтрока);
	КолонкиТаблицы.Добавить("ВладелецКод",          ТипСтрока);
	КолонкиТаблицы.Добавить("ВладелецИНН",          ТипСтрока);
	КолонкиТаблицы.Добавить("ВладелецКПП",          ТипСтрока);
	КолонкиТаблицы.Добавить("РасчетныйСчет",        ТипСтрока);
	КолонкиТаблицы.Добавить("Банк",                 ТипСтрока);
	КолонкиТаблицы.Добавить("БИК",                  ТипСтрока);
	КолонкиТаблицы.Добавить("КоррСчет",             ТипСтрока);
	КолонкиТаблицы.Добавить("Телефон",              ТипСтрока);
	КолонкиТаблицы.Добавить("ЮрАдрес",              ТипСтрока);
	КолонкиТаблицы.Добавить("ЭлПочта",              ТипСтрока);
	КолонкиТаблицы.Добавить("ДопИнформация",        Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(500)));
	
	ПериодПросмотра = СтруктураНастроек.ПериодПросмотра;
	Организация     = СтруктураНастроек.Организация;
	СписокЗданий    = СтруктураНастроек.СписокЗданий;
	
	РасчетныйСчет = Неопределено;
	
	Если ПоУслугамКапитальногоРемонта Тогда
		
		Если СтруктураНастроек.Свойство("РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаОтличаетсяОтОсновного")
		   И СтруктураНастроек.РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаОтличаетсяОтОсновного = Истина
		   И СтруктураНастроек.Свойство("РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта") Тогда
			
			РасчетныйСчет = СтруктураНастроек.РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта;
			
		КонецЕсли;
		
	Иначе
		
		Если СтруктураНастроек.Свойство("РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного")
		   И СтруктураНастроек.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного = Истина
		   И СтруктураНастроек.Свойство("РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам")
		   И НЕ СтруктураНастроек.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
			
			РасчетныйСчет = СтруктураНастроек.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РасчетныйСчет = Неопределено И НЕ Организация.ОсновнойБанковскийСчет.Пустая() Тогда
		
		РасчетныйСчет = Организация.ОсновнойБанковскийСчет;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Здания.Ссылка КАК Здание
	|ПОМЕСТИТЬ ТаблицаЗданий
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	КВП_Здания.Ссылка В(&СписокЗданий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.Здание КАК Здание,
	|	ВЫБОР
	|		КОГДА &ПоУслугамКапитальногоРемонта
	|			ТОГДА УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.РасчетныйСчетУслугКапитальногоРемонта
	|		ИНАЧЕ УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.РасчетныйСчетУслуг
	|	КОНЕЦ КАК РасчетныйСчетУслуг
	|ПОМЕСТИТЬ втРасчетныеСчета
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.СрезПоследних(&ДатаСреза, Здание В (&СписокЗданий)) КАК УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗданий.Здание КАК Здание,
	|	ВЫБОР
	|		КОГДА НЕ втРасчетныеСчета.РасчетныйСчетУслуг ЕСТЬ NULL
	|				И НЕ втРасчетныеСчета.РасчетныйСчетУслуг = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|			ТОГДА втРасчетныеСчета.РасчетныйСчетУслуг
	|		КОГДА НЕ &РасчетныйСчет = НЕОПРЕДЕЛЕНО
	|				И НЕ &РасчетныйСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|			ТОГДА &РасчетныйСчет
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|	КОНЕЦ КАК РасчетныйСчетЗдания
	|ПОМЕСТИТЬ втТаблицаСоСчетами
	|ИЗ
	|	ТаблицаЗданий КАК ТаблицаЗданий
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРасчетныеСчета КАК втРасчетныеСчета
	|		ПО ТаблицаЗданий.Здание = втРасчетныеСчета.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаСоСчетами.Здание КАК Здание,
	|	ЕСТЬNULL(втТаблицаСоСчетами.РасчетныйСчетЗдания, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)) КАК РасчетныйСчетСсылка,
	|	ЕСТЬNULL(втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ВладелецСчета,
	|	ЕСТЬNULL(втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец.Наименование, """") КАК ВладелецНаименование,
	|	ЕСТЬNULL(втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец.Код, """") КАК ВладелецКод,
	|	ЕСТЬNULL(втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец.ИНН, """") КАК ВладелецИНН,
	|	ЕСТЬNULL(втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец.КПП, """") КАК ВладелецКПП,
	|	ЕСТЬNULL(втТаблицаСоСчетами.РасчетныйСчетЗдания.НомерСчета, """") КАК РасчетныйСчет,
	|	ЕСТЬNULL(втТаблицаСоСчетами.РасчетныйСчетЗдания.Банк.Наименование, """") КАК Банк,
	|	ЕСТЬNULL(втТаблицаСоСчетами.РасчетныйСчетЗдания.Банк.Код, """") КАК БИК,
	|	ЕСТЬNULL(втТаблицаСоСчетами.РасчетныйСчетЗдания.Банк.КоррСчет, """") КАК КоррСчет,
	|	ЕСТЬNULL(втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец.ДополнительнаяИнформация, """") КАК ДопИнформация,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК Телефон,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК ЭлПочта,
	|	ВЫБОР
	|		КОГДА НЕ втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец ССЫЛКА Справочник.Контрагенты
	|						ТОГДА КонтрагентыКонтактнаяИнформацияЮрАдрес.Представление
	|					КОГДА втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец ССЫЛКА Справочник.Организации
	|						ТОГДА ОрганизацииКонтактнаяИнформацияЮрАдрес.Представление
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЮрАдрес
	|ИЗ
	|	втТаблицаСоСчетами КАК втТаблицаСоСчетами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияЮрАдрес
	|		ПО (КонтрагентыКонтактнаяИнформацияЮрАдрес.Ссылка = втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец)
	|			И (КонтрагентыКонтактнаяИнформацияЮрАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтрагентыКонтактнаяИнформацияЮрАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформацияЮрАдрес
	|		ПО (ОрганизацииКонтактнаяИнформацияЮрАдрес.Ссылка = втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец)
	|			И (ОрганизацииКонтактнаяИнформацияЮрАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (ОрганизацииКонтактнаяИнформацияЮрАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец) = ТИП(Справочник.Контрагенты)
	|			ТОГДА ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияТелефон.Представление, """")
	|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец) = ТИП(Справочник.Организации)
	|			ТОГДА ЕСТЬNULL(ОрганизацииКонтактнаяИнформацияТелефон.Представление, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Телефон
	|ИЗ
	|	втТаблицаСоСчетами КАК втТаблицаСоСчетами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияТелефон
	|		ПО втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец = КонтрагентыКонтактнаяИнформацияТелефон.Ссылка
	|			И (КонтрагентыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (КонтрагентыКонтактнаяИнформацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформацияТелефон
	|		ПО втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец = ОрганизацииКонтактнаяИнформацияТелефон.Ссылка
	|			И (ОрганизацииКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (ОрганизацииКонтактнаяИнформацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации))
	|ГДЕ
	|	НЕ втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец ЕСТЬ NULL
	|	И (НЕ ОрганизацииКонтактнаяИнформацияТелефон.Представление = """"
	|			ИЛИ НЕ КонтрагентыКонтактнаяИнформацияТелефон.Представление = """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец) = ТИП(Справочник.Контрагенты)
	|			ТОГДА ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияEmailКонтрагенты.Представление, """")
	|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец) = ТИП(Справочник.Организации)
	|			ТОГДА ЕСТЬNULL(ОрганизацииКонтактнаяИнформацияEmailОрганизации.Представление, """")
	|	КОНЕЦ КАК ЭлПочта
	|ИЗ
	|	втТаблицаСоСчетами КАК втТаблицаСоСчетами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформацияEmailОрганизации
	|		ПО втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец = ОрганизацииКонтактнаяИнформацияEmailОрганизации.Ссылка
	|			И (ОрганизацииКонтактнаяИнформацияEmailОрганизации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (ОрганизацииКонтактнаяИнформацияEmailОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияEmailКонтрагенты
	|		ПО втТаблицаСоСчетами.РасчетныйСчетЗдания.Владелец = КонтрагентыКонтактнаяИнформацияEmailКонтрагенты.Ссылка
	|			И (КонтрагентыКонтактнаяИнформацияEmailКонтрагенты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (КонтрагентыКонтактнаяИнформацияEmailКонтрагенты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагенты))
	|ГДЕ
	|	(НЕ ОрганизацииКонтактнаяИнформацияEmailОрганизации.Представление = """"
	|			ИЛИ НЕ КонтрагентыКонтактнаяИнформацияEmailКонтрагенты.Представление = """")";
	
	Запрос.УстановитьПараметр("ДатаСреза",                    КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("СписокЗданий",                 СписокЗданий);
	Запрос.УстановитьПараметр("РасчетныйСчет",                РасчетныйСчет);
	Запрос.УстановитьПараметр("ПоУслугамКапитальногоРемонта", ПоУслугамКапитальногоРемонта);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[3].Выбрать();
	
	// Так как телефонов у поставщика может быть несколько, преобразовываем их в строку вида:
	// Телефон1, Телефон2, ...
	ТаблицаТелефоны = Результаты[4].Выгрузить();
	
	// Так как телефонов у поставщика может быть несколько, преобразовываем их в строку вида:
	// ЭлПочта1, ЭлПочта2, ...
	ТаблицаEmail = Результаты[5].Выгрузить();
	
	СтруктураОтбора = Новый Структура("Поставщик");
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Таблица.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		СтруктураОтбора.Поставщик = НоваяСтрока.ВладелецСчета;
		
		ТаблицаТелефоновТек = ТаблицаТелефоны.Скопировать(СтруктураОтбора, "Телефон");
		
		Если Не ТаблицаТелефоновТек.Количество() = 0 Тогда
			НоваяСтрока.Телефон = СтрСоединить(ТаблицаТелефоновТек.ВыгрузитьКолонку("Телефон"), ", ");
		КонецЕсли;
		
		ТаблицаEmailТек = ТаблицаEmail.Скопировать(СтруктураОтбора, "ЭлПочта");
		
		Если Не ТаблицаEmailТек.Количество() = 0 Тогда
			НоваяСтрока.ЭлПочта = СтрСоединить(ТаблицаEmailТек.ВыгрузитьКолонку("ЭлПочта"), ", ");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуРасчетныхСчетовОрганизацийОбсуживающихЗдания()

// Получает коды видов индивидуальных и общедомовых начислений.
//
Функция ПолучитьКодыВидовНачисленийОбщ(СтруктураНастроек, ОсобыеНастройкиВыгрузкиНачислений)
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаКодов.Колонки;
	
	Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	Колонки.Добавить("Услуга",      Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	Колонки.Добавить("Тариф",       Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ВидТарифа",   Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
	
	ТипСтрока10 = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10));
	
	Колонки.Добавить("КодВидаНачисленийИПУ", ТипСтрока10);
	Колонки.Добавить("КодВидаНачисленийОПУ", ТипСтрока10);
	
	ВидМакета              = СтруктураНастроек.ВидМакета;
	Организация            = СтруктураНастроек.Организация;
	ПериодПросмотра        = СтруктураНастроек.ПериодПросмотра;
	СписокЛицевыхСчетов    = СтруктураНастроек.СписокЛицевыхСчетов;
	СписокУслуг            = ?(ОсобыеНастройкиВыгрузкиНачислений, СтруктураНастроек.СписокУслугВыгружатьНачисленияОбщ, СтруктураНастроек.СписокУслуг);
	РазделятьУслугиПоТипам = СтруктураНастроек.РазделятьУслугиПоТипам;
	
	СписокКоммунальныеВидыУслуг = СтруктураНастроек.ТаблицаКоммунальныхВидовУслуг.ВыгрузитьКолонку("ВидУслуги");
	
	ТаблицаЛицевыхСчетовЖилогоФонда = СтруктураНастроек.ТаблицаОбъектов.Скопировать(Новый Структура("ЖилойФондПомещения", Истина), "ЛицевойСчет");
	ФондыЖилыхПомещений             = ТаблицаЛицевыхСчетовЖилогоФонда.ВыгрузитьКолонку("ЛицевойСчет");
	
	ЭтоСтандартныйМакет = ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный
					  ИЛИ ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР
					  ИЛИ ВидМакета = "ОбменССайтомЖКХ4";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга КАК Услуга,
	|	УПЖКХ_Начисления.Тариф КАК Тариф,
	|	УПЖКХ_Начисления.ВидТарифа КАК ВидТарифа,
	|	ВЫБОР
	|		КОГДА &ЭтоСтандартныйМакет
	|				И (НЕ УПЖКХ_Начисления.ЛицевойСчет В (&ФондыЖилыхПомещений)
	|					И (&РазделятьУслугиПоТипам
	|							И УПЖКХ_Начисления.Услуга.ВидУслуги В (&СписокКоммунальныеВидыУслуг)
	|						ИЛИ НЕ &РазделятьУслугиПоТипам
	|							И УПЖКХ_Начисления.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)))
	|			ТОГДА ""5""
	|		КОГДА УПЖКХ_Начисления.ВидНачисления В (&НачислениеПоНормативу)
	|			ТОГДА ""1""
	|		КОГДА УПЖКХ_Начисления.ВидНачисления В (&НачислениеПоСреднему)
	|			ТОГДА ""3""
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|			ТОГДА ""2""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодВидаНачисленийИПУ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА ""4""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодВидаНачисленийОПУ
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И УПЖКХ_Начисления.Организация = &Организация
	|	И УПЖКХ_Начисления.ЛицевойСчет В(&СписокЛицевыхСчетов)
	|	И УПЖКХ_Начисления.Услуга В(&СписокУслуг)
	|	И НЕ УПЖКХ_Начисления.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
	|	И НЕ УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|	И ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(УПЖКХ_Начисления.Регистратор) = ТИП(Документ.КВП_РегистрацияОплаты)
	|				ТОГДА НЕ УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|						И НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.ЛицевойСчет КАК ЛицевойСчет,
	|	втИтоговая.Услуга КАК Услуга,
	|	втИтоговая.Тариф КАК Тариф,
	|	втИтоговая.ВидТарифа КАК ВидТарифа,
	|	втИтоговая.КодВидаНачисленийИПУ КАК КодВидаНачисленийИПУ,
	|	втИтоговая.КодВидаНачисленийОПУ КАК КодВидаНачисленийОПУ
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|ГДЕ
	|	(НЕ втИтоговая.КодВидаНачисленийИПУ = """"
	|			ИЛИ НЕ втИтоговая.КодВидаНачисленийОПУ = """")";
	
	Запрос.УстановитьПараметр("НачалоМесяца",                НачалоМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("КонецМесяца",                 КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("РазделятьУслугиПоТипам",      РазделятьУслугиПоТипам);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов",         СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("СписокУслуг",                 СписокУслуг);
	Запрос.УстановитьПараметр("ФондыЖилыхПомещений",         ФондыЖилыхПомещений);
	Запрос.УстановитьПараметр("ЭтоСтандартныйМакет",         ЭтоСтандартныйМакет);
	Запрос.УстановитьПараметр("СписокКоммунальныеВидыУслуг", СписокКоммунальныеВидыУслуг);
	
	НачислениеПриОтсутствииИПУ_ПоказанийИПУПоНормативу = Новый СписокЗначений;
	НачислениеПриОтсутствииИПУ_ПоказанийИПУПоНормативу.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу);
	НачислениеПриОтсутствииИПУ_ПоказанийИПУПоНормативу.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента);
	НачислениеПриОтсутствииИПУ_ПоказанийИПУПоНормативу.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу);
	Запрос.УстановитьПараметр("НачислениеПоНормативу", НачислениеПриОтсутствииИПУ_ПоказанийИПУПоНормативу);
	
	НачислениеПриОтсутствииИПУ_ПоказанийИПУПоСреднему  = Новый СписокЗначений;
	НачислениеПриОтсутствииИПУ_ПоказанийИПУПоСреднему.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему);
	НачислениеПриОтсутствииИПУ_ПоказанийИПУПоСреднему.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему);
	Запрос.УстановитьПараметр("НачислениеПоСреднему", НачислениеПриОтсутствииИПУ_ПоказанийИПУПоСреднему);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если НЕ Таблица.Количество() = 0 Тогда
		
		КлючевыеПоля = "ЛицевойСчет, Услуга, Тариф, ВидТарифа";
		
		ТаблицаКлючевыхПолей = Таблица.Скопировать(, КлючевыеПоля);
		ТаблицаКлючевыхПолей.Свернуть(КлючевыеПоля);
		
		Отбор = Новый Структура(КлючевыеПоля);
		
		СписокКодовИПУ = Новый СписокЗначений;
		СписокКодовОПУ = СписокКодовИПУ.Скопировать();
		
		Для Каждого ТекущаяСтрока Из ТаблицаКлючевыхПолей Цикл
			
			НоваяСтрока = ТаблицаКодов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока, КлючевыеПоля);
			
			ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрока);
			
			НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
			
			СписокКодовИПУ.Очистить();
			СписокКодовОПУ.Очистить();
			
			Для Каждого ТекущаяСтрокаДанных Из НайденныеСтроки Цикл
				КодВидаНачисленийИПУ = ТекущаяСтрокаДанных.КодВидаНачисленийИПУ;
				Если НЕ КодВидаНачисленийИПУ = "" И СписокКодовИПУ.НайтиПоЗначению(КодВидаНачисленийИПУ) = Неопределено Тогда
					СписокКодовИПУ.Добавить(КодВидаНачисленийИПУ);
				КонецЕсли;
				
				КодВидаНачисленийОПУ = ТекущаяСтрокаДанных.КодВидаНачисленийОПУ;
				Если НЕ КодВидаНачисленийОПУ = "" И СписокКодовОПУ.НайтиПоЗначению(КодВидаНачисленийОПУ) = Неопределено Тогда
					СписокКодовОПУ.Добавить(КодВидаНачисленийОПУ);
				КонецЕсли;
			КонецЦикла;
			
			СписокКодовИПУ.СортироватьПоЗначению();
			СписокКодовОПУ.СортироватьПоЗначению();
			
			НоваяСтрока.КодВидаНачисленийИПУ = СтрСоединить(СписокКодовИПУ.ВыгрузитьЗначения(), ",");
			НоваяСтрока.КодВидаНачисленийОПУ = СтрСоединить(СписокКодовОПУ.ВыгрузитьЗначения(), ",");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаКодов;
	
КонецФункции // ПолучитьКодыВидовНачисленийОбщ()

#КонецОбласти

#Область ПечатьОтдельнойКвитанииПоПеням

///////////////////////////////////////
// Структура общих таблиц

// Дополняет структуру общих таблиц таблицами начисления пени по всем лицевым счетам отчета.
//
// Параметры:
//  СтруктураОбщихТаблиц - Структура - структура общих данных о начислениях.
//  СтруктураНастроек    - Структура - структура с пользовательскими настройками.
//
Процедура ДополнитьСтруктуруОбщихТаблицТаблицамиПоПеням(СтруктураОбщихТаблиц, СтруктураНастроек) Экспорт
	
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениНачисленияОбщ",         ПолучитьТаблицуПениНачисления(СтруктураНастроек.Организация, СтруктураНастроек.ПериодПросмотра, 
																									СтруктураНастроек.СписокЛицевыхСчетов, СтруктураНастроек.СписокУслуг,
																									СтруктураНастроек.УслугиБезОДН));
	
	// Таблица с сальдо пени в разрезе лицевых счетов и видов услуг.
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениСальдоОбщПоВидамУслуг", ПолучитьПениДанныеОНачальномСальдо(СтруктураНастроек));
	
	// Таблица с сальдо пени в разрезе только лицевых счетов.
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениСальдоОбщ",             ПолучитьТаблицуСальдоВРазрезеЛицевыхСчетов(СтруктураОбщихТаблиц.ТаблицаПениСальдоОбщПоВидамУслуг, СтруктураНастроек.СписокУслуг));
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениСальдоОбщОсновные",     ПолучитьТаблицуСальдоВРазрезеЛицевыхСчетов(СтруктураОбщихТаблиц.ТаблицаПениСальдоОбщПоВидамУслуг, СтруктураНастроек.ТекущийСписокУслуг));
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениСальдоОбщКР",           ПолучитьТаблицуСальдоВРазрезеЛицевыхСчетов(СтруктураОбщихТаблиц.ТаблицаПениСальдоОбщПоВидамУслуг, СтруктураНастроек.СписокУслугКапРемонт));
	
	// Таблица с оплатами в разрезе лицевых счетов и видов услуг.
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениОплатОбщПоВидамУслуг",  ПолучитьПениДанныеОбОплатах(СтруктураНастроек));
	
	// Таблица с оплатами в разрезе только лицевых счетов по всем услугам.
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениОплатОбщ",              ПолучитьТаблицуОплатВРазрезеЛицевыхСчетов(СтруктураОбщихТаблиц.ТаблицаПениОплатОбщПоВидамУслуг));
	
	// Таблица с оплатами в разрезе только лицевых счетов только по тем услугам, на которые формируется основная квитанция.
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениОплатОбщОсновные",      ПолучитьТаблицуОплатВРазрезеЛицевыхСчетов(СтруктураОбщихТаблиц.ТаблицаПениОплатОбщПоВидамУслуг, СтруктураНастроек.ТекущийСписокУслуг));
	
	// Таблица с оплатами в разрезе только лицевых счетов только по тем услугам, на которые формируется квитанция по капитальному ремонту.
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениОплатОбщКР",            ПолучитьТаблицуОплатВРазрезеЛицевыхСчетов(СтруктураОбщихТаблиц.ТаблицаПениОплатОбщПоВидамУслуг, СтруктураНастроек.СписокУслугКапРемонт));
	
	// Таблица со сведениями о перерасчетах.
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениПерерасчетовОбщ",       ПолучитьТаблицуПениПерерасчетов(СтруктураНастроек.Организация, СтруктураНастроек.ПериодПросмотра, 
																									  СтруктураНастроек.СписокЛицевыхСчетов, СтруктураНастроек.СписокУслуг));
	
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениИтоговыхСуммПоУслугамОбщ", ПолучитьОбщиеИтоговыеСуммыПоУслугам(СтруктураНастроек, СтруктураОбщихТаблиц, Истина));
	
	// Таблица со сведениями о поставщиках услуг.
	СтруктураОбщихТаблиц.Вставить("ТаблицаПениПоставщиковОбщ",           ПолучитьТаблицуПоставщиков(СтруктураНастроек, СтруктураОбщихТаблиц, Истина));
	
КонецПроцедуры // ДополнитьСтруктуруОбщихТаблицТаблицамиПоПеням()

// Формирует таблицу начисления по списку лицевых счетов.
//
// Параметры:
//  Организация – организация, на которую формируется квитанция
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция
//  СписокЛицевыхСчетов - список л/с
//  СписокУслуг - список услуг, на который формируется квитанция.
//
// Возвращаемое значение:
//  ТаблицаЗначений - выборка начислений из регистра накопления "Начисления".
//
Функция ПолучитьТаблицуПениНачисления(Организация, ПериодПросмотра, СписокЛицевыхСчетов, СписокУслуг, УслугиБезОДН)
	
	ЗапросНачисления = Новый Запрос;
	ЗапросНачисления.Текст =
	"ВЫБРАТЬ
	|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги КАК ВидУслуги,
	|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый КАК НовыйВидУслуги
	|ПОМЕСТИТЬ втНовыеВидыУслуг
	|ИЗ
	|	РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
	|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставнаяУслуга,
	|	УПЖКХ_НачисленияОбороты.Тариф КАК Тариф,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа КАК ВидТарифа,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Перерасчет,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Начислено,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес КАК Помещение
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Запись,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга В (&СписокУслуг)
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))) КАК УПЖКХ_НачисленияОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|						И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
	|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет КАК ЛицевойСчет,
	|	втНачисления.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА втНовыеВидыУслуг.НовыйВидУслуги ЕСТЬ NULL
	|			ТОГДА втНачисления.ВидУслуги
	|		ИНАЧЕ втНовыеВидыУслуг.НовыйВидУслуги
	|	КОНЕЦ КАК ВидУслуги,
	|	ВЫБОР
	|		КОГДА втНовыеВидыУслуг.НовыйВидУслуги ЕСТЬ NULL
	|			ТОГДА втНачисления.ВидУслуги.СпособВыводаВКвитанциях
	|		ИНАЧЕ втНовыеВидыУслуг.НовыйВидУслуги.СпособВыводаВКвитанциях
	|	КОНЕЦ КАК СпособВыводаВКвитанциях,
	|	втНачисления.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
	|	втНачисления.ВидУслуги.ЕдиницаИзмерения.Наименование КАК ЕдИзмНаименование,
	|	втНачисления.СоставнаяУслуга КАК СоставнаяУслуга,
	|	втНачисления.Тариф КАК Тариф,
	|	втНачисления.ВидТарифа КАК ВидТарифа,
	|	втНачисления.Перерасчет КАК Перерасчет,
	|	0 КАК ПерерасчетИнд,
	|	0 КАК ПерерасчетОДН,
	|	втНачисления.Начислено КАК Начислено,
	|	ВЫБОР
	|		КОГДА втНачисления.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|				ИЛИ втНачисления.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугаЯвляетсяСоставной,
	|	ЛОЖЬ КАК УслугаПоСчетчикам,
	|	ЛОЖЬ КАК УслугаСоставнаяПоСчетчикам,
	|	0 КАК Льгота,
	|	0 КАК КоличествоИПУ,
	|	0 КАК КоличествоОПУ,
	|	0 КАК НачисленоИПУ,
	|	0 КАК НачисленоОПУ,
	|	0 КАК КОплатеИПУ,
	|	0 КАК КОплатеОПУ,
	|	"""" КАК КодВидаНачисленийИПУ,
	|	"""" КАК КодВидаНачисленийОПУ,
	|	ЛОЖЬ КАК ИмеетсяСоставнойИндивидуальныйРасход,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК СоставноеКоличествоИнд,
	|	ИСТИНА КАК УслугаСНачислениями,
	|	втНачисления.Помещение КАК Помещение,
	|	ЛОЖЬ КАК ОДНОтноситсяКОбщемуИмуществу,
	|	ЛОЖЬ КАК СтрокаДляОбщегоИмущества,
	|	0 КАК ПовышающийКоэффициент,
	|	0 КАК СуммаПовышения,
	|	ВЫБОР
	|		КОГДА втНачисления.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоКоммунальнаяУслуга
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНовыеВидыУслуг КАК втНовыеВидыУслуг
	|		ПО втНачисления.ВидУслуги = втНовыеВидыУслуг.ВидУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Услуга";
	
	ЗапросНачисления.УстановитьПараметр("НачалоМесяца",        НачалоМесяца(ПериодПросмотра));
	ЗапросНачисления.УстановитьПараметр("КонецМесяца",         КонецМесяца(ПериодПросмотра));
	ЗапросНачисления.УстановитьПараметр("Организация",         Организация);
	ЗапросНачисления.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	ЗапросНачисления.УстановитьПараметр("СписокУслуг",         СписокУслуг);
	ЗапросНачисления.УстановитьПараметр("ТаблицаУслугБезОДН",  УслугиБезОДН);
	
	ТаблицаНачисления = ЗапросНачисления.Выполнить().Выгрузить();
	ТаблицаНачисления.Индексы.Добавить("ЛицевойСчет");
	
	Возврат ТаблицаНачисления;
	
КонецФункции // ПолучитьТаблицуПениНачисления()

// Получает сумму начального сальдо по каждому л/с в списке объектов.
//
// Параметры:
//  Организация – организация, на которую формируется квитанция
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция
//  СписокЛицевыхСчетов – список лицевых счетов
//  СписокУслуг - список услуг, на который формируется квитанция
//  ВыводитьНачальноеСальдо - пользовательская настройка.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со сведениями о начальном сальдо в разрезе лицевых счетов и видов услуг.
//
Функция ПолучитьПениДанныеОНачальномСальдо(СтруктураНастроек)
	
	// Получение суммарной информации о начислениях по лицевым счетам на начало месяца
	ЗапросСальдо = Новый Запрос();
	ЗапросСальдо.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.ВидУслуги КАК ВидУслуги,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК НачальноеСальдоБезПени,
	|	СУММА(0) КАК НачальноеСальдоПени,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК НачальноеСальдоПениДляQR,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК НачальноеСальдо,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
	|	ЛОЖЬ КАК УслугаПоСчетчикам,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоКоммунальнаяУслуга,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.КоммунальныйРесурс В (&СписокКоммунальныхРесурсов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОДНОтноситсяКОбщемуИмуществу
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга В (&СписокУслуг)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.ВидУслуги,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.ВидУслуги.ЕдиницаИзмерения,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.КоммунальныйРесурс В (&СписокКоммунальныхРесурсов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	ЗапросСальдо.УстановитьПараметр("Организация",                СтруктураНастроек.Организация);
	ЗапросСальдо.УстановитьПараметр("НачалоПериода",              НачалоМесяца(СтруктураНастроек.ПериодПросмотра));
	ЗапросСальдо.УстановитьПараметр("СписокЛицевыхСчетов",        СтруктураНастроек.СписокЛицевыхСчетов);
	ЗапросСальдо.УстановитьПараметр("СписокУслуг",                СтруктураНастроек.СписокУслуг);
	ЗапросСальдо.УстановитьПараметр("СписокКоммунальныхРесурсов", СтруктураНастроек.СписокКоммунальныхРесурсов);
	
	ТаблицаСальдо = ЗапросСальдо.Выполнить().Выгрузить();
	ТаблицаСальдо.Индексы.Добавить("ЛицевойСчет");
	
	Возврат ТаблицаСальдо;
	
КонецФункции // ПолучитьПениДанныеОНачальномСальдо()

// Поиск оплат по списку л/с.
//
// Параметры:
//  СтруктураНастроек - Структура – структура настроек пользователя.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с оплатами по списку л/с в разрезе видов услуг.
//
Функция ПолучитьПениДанныеОбОплатах(СтруктураНастроек)
	
	Организация                = СтруктураНастроек.Организация;
	ПериодПросмотра            = СтруктураНастроек.ПериодПросмотра;
	СписокЛицевыхСчетов        = СтруктураНастроек.СписокЛицевыхСчетов;
	СписокУслуг                = СтруктураНастроек.СписокУслуг;
	УчетОплат                  = СтруктураНастроек.УчетОплат;
	СписокКоммунальныхРесурсов = СтруктураНастроек.СписокКоммунальныхРесурсов;
	
	КонецРасчетногоПериода = ?(УчетОплат = "Конца отчетного месяца", КонецМесяца(ПериодПросмотра), ТекущаяДата());
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.Период КАК Период,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЛОЖЬ КАК УслугаПоСчетчикам,
	|	СУММА(-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаОплаты,
	|	0 КАК СуммаОплатыБезПени,
	|	СУММА(-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаОплатыПени,
	|	СУММА(0) КАК СуммаОплатыОстаткаПоРассрочке,
	|	СУММА(0) КАК СуммаОплатыДобровольногоСтрахования,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоКоммунальнаяУслуга,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.КоммунальныйРесурс В (&СписокКоммунальныхРесурсов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОДНОтноситсяКОбщемуИмуществу
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга В (&СписокУслуг)
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)) КАК УПЖКХ_НачисленияОбороты
	|ГДЕ
	|	УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.Период,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.КоммунальныйРесурс В (&СписокКоммунальныхРесурсов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("НачалоМесяца",               НачалоМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("КонецМесяца",                КонецРасчетногоПериода);
	Запрос.УстановитьПараметр("Организация",                Организация);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов",        СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("СписокУслуг",                СписокУслуг);
	Запрос.УстановитьПараметр("СписокКоммунальныхРесурсов", СписокКоммунальныхРесурсов);
	
	ДанныеОбОплатах = Запрос.Выполнить().Выгрузить();
	ДанныеОбОплатах.Индексы.Добавить("ЛицевойСчет");
	
	Возврат ДанныеОбОплатах;
	
КонецФункции // ПолучитьПениДанныеОбОплатах()

// Формирует таблицу с суммами и основаниями корректировок.
// 
// Параметры:
//  Организация – организация, на которую формируется квитанция
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция
//  СписокЛицевыхСчетов – список лицевых счетов
//  СписокУслуг - список услуг, на который формируется квитанция.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица перерасчетов.
//
Функция ПолучитьТаблицуПениПерерасчетов(Организация, ПериодПросмотра, СписокЛицевыхСчетов, СписокУслуг)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
	|	УПЖКХ_НачисленияОбороты.ОснованиеКорректировки,
	|	"""" КАК КодПерерасчета,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК Перерасчет,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.Наименование КАК НаименованиеВидаУслуги
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И Услуга В (&СписокУслуг)
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
	|	УПЖКХ_НачисленияОбороты.Регистратор.Ссылка,
	|	УПЖКХ_НачисленияОбороты.ОснованиеКорректировки";
	
	Запрос.УстановитьПараметр("НачалоМесяца",        НачалоМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("КонецМесяца",         КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("СписокУслуг",         СписокУслуг);
	
	ТаблицаПерерасчетов = Запрос.Выполнить().Выгрузить();
	ТаблицаПерерасчетов.Индексы.Добавить("ЛицевойСчет");
	
	Возврат ТаблицаПерерасчетов;
	
КонецФункции // ПолучитьТаблицуПениПерерасчетов()

///////////////////////////////////////
// Текущие данные

// Заменяет в текущих данных таблицы на таблицы с данными о начислениях пени по текущему объекту отчета.
//
// Параметры:
//  ТекущиеДанные        - Структура - текущие данные квитанции-родителя.
//  СтруктураОбщихТаблиц - Структура - структура с данными по всем объектам отчета
//  ОбщиеДанные          - Структура - структура с общими данными
//  СтруктураНастроек    - Структура - структура с пользовательскими настройками.
//
Процедура ЗаменитьТаблицыВТекущихДанныхНаТаблицыПоПеням(ТекущиеДанные, СтруктураОбщихТаблиц, ОбщиеДанные, СтруктураНастроек) Экспорт
	
	ЛицевойСчет = ОбщиеДанные.ЛицевойСчет;
	Здание      = ОбщиеДанные.Здание;
	Подъезд     = ОбщиеДанные.Подъезд;
	ВидМакета   = СтруктураНастроек.ВидМакета;
	Макеты      = Перечисления.УПЖКХ_ВидыПлатежныхДокументов;
	
	// Таблица с оплатами по пеням.
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		
		ТекущиеДанные.ТаблицаОплат        = ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаПениОплатОбщКР,       "ЛицевойСчет", ЛицевойСчет);
		
	// В случае, когда выбрана опция "единая квитанция на осн. услуги и кап. ремонт" в качестве таблиц оплат пени берем общую таблицу без разбивки на услуги кап.ремонта и основные.
	ИначеЕсли СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" Тогда
		
		ТекущиеДанные.ТаблицаОплат        = ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаПениОплатОбщ,         "ЛицевойСчет", ЛицевойСчет);
		
	Иначе
		
		ТекущиеДанные.ТаблицаОплат        = ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаПениОплатОбщОсновные, "ЛицевойСчет", ЛицевойСчет);
		
	КонецЕсли;
	
	// Таблица со сведениями о перерасчетах по пеням.
	ТекущиеДанные.ТаблицаПерерасчетов = ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаПениПерерасчетовОбщ, "ЛицевойСчет", ЛицевойСчет);
	
	// Структура со сведениями о начальном сальдо по пеням.
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		
		ТекущиеДанные.СтруктураНачСальдо  = ПолучитьНачальноеСальдоПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаПениСальдоОбщКР,       ЛицевойСчет, СтруктураНастроек.ВыводитьНачальноеСальдо);
		
	// В случае, когда выбрана опция "единая квитанция на осн. услуги и кап. ремонт" в качестве данных по сальдо пени берем общую таблицу без разбивки на услуги кап.ремонта и основные.
	ИначеЕсли СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" Тогда
		
		ТекущиеДанные.СтруктураНачСальдо  = ПолучитьНачальноеСальдоПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаПениСальдоОбщ,         ЛицевойСчет, СтруктураНастроек.ВыводитьНачальноеСальдо);
		
	Иначе
		
		ТекущиеДанные.СтруктураНачСальдо  = ПолучитьНачальноеСальдоПоТекущемуЛС(СтруктураОбщихТаблиц.ТаблицаПениСальдоОбщОсновные, ЛицевойСчет, СтруктураНастроек.ВыводитьНачальноеСальдо);
		
	КонецЕсли;
	
	// Таблица с начислениями по пеням.
	ТекущиеДанные.ТаблицаНачисления       = ПолучитьТаблицуПениНачисленияПоТекущемуОбъекту(СтруктураОбщихТаблиц, ТекущиеДанные, ОбщиеДанные, СтруктураНастроек);
	
	// В квитанции по пеням не надо выводить сведения о добровольном страховании, т.к. пени на добровольное страхование не начисляются.
	ТекущиеДанные.ТаблицаДобровольногоСтрахования.Очистить();
	
	ТаблицаПоставщиковОбщ_Пустая = СтруктураОбщихТаблиц.ТаблицаПоставщиковОбщ.СкопироватьКолонки();
	
	// Таблица со сведениями о поставщиках услуг.
	Если ВидМакета = Макеты.СтандартныйКР ИЛИ ВидМакета = Макеты.Стандартный
	 ИЛИ ВидМакета = Макеты.Стандартный43Пр ИЛИ ВидМакета = Макеты.СПолямиБанка1
	 ИЛИ ВидМакета = Макеты.Москва ИЛИ ВидМакета = "ОбменССайтомЖКХ4" Тогда
		
		ТекущиеДанные.ТаблицаПоставщиков = ПолучитьДанныеОПоставщикахПоТекущемуОбъекту(СтруктураОбщихТаблиц, СтруктураНастроек, ОбщиеДанные);
		
		Если ВидМакета = "ОбменССайтомЖКХ4" Тогда
			
			// Таблица со сведениями о поставщиках услуг (Для обмена данными с сайтом).
			ТекущиеДанные.Вставить("ТаблицаПоставщиковПоВидамУслуг", ПолучитьДанныеОПоставщикахПоТекущемуОбъектуПоВидамУслуг(СтруктураОбщихТаблиц.ТаблицаПениПоставщиковОбщ, Здание));
			
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные.ТаблицаПоставщиков = ТаблицаПоставщиковОбщ_Пустая;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаменитьТаблицыВТекущихДанныхНаТаблицыПоПеням()

// Подготавливает таблицу начислений пени по текущему л/с.
//
// Параметры:
//  СтруктураОбщихТаблиц - структура с таблица данных по всем л/с отчета.
//  ТекущиеДанные - стуктура с данными по текущему л/с.
//  ОбщиеДанные - структура с общими данными.
//  СтруктураНастроек - структура с пользовательскими настройками.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица начисления.
//
Функция ПолучитьТаблицуПениНачисленияПоТекущемуОбъекту(СтруктураОбщихТаблиц, ТекущиеДанные, ОбщиеДанные, СтруктураНастроек) Экспорт
	
	ВидМакета               = СтруктураНастроек.ВидМакета;
	ВидыПлатежныхДокументов = Перечисления.УПЖКХ_ВидыПлатежныхДокументов;
	
	ТаблицаСНачислениями = ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаПениНачисленияОбщ, "ЛицевойСчет", ОбщиеДанные.ЛицевойСчет);
	
	ТекущиеДанные.Вставить("ТаблицаСНачислениями", ТаблицаСНачислениями);
	
	ДополнитьТаблицуНачисленияПоТекущемуОбъектуСуммамиПениНачальноеСальдоИОплаты(ТаблицаСНачислениями,
																			СтруктураОбщихТаблиц.ТаблицаПениСальдоОбщПоВидамУслуг,
																			СтруктураОбщихТаблиц.ТаблицаПениОплатОбщПоВидамУслуг,
																			СтруктураОбщихТаблиц.ТаблицаПениОбщПоВидамУслуг,
																			ОбщиеДанные,
																			СтруктураНастроек);
	
	// Сортируем таблицу начисления по текущему л/с в соответствии с порядком услуг, заданным пользователем на форме настроек.
	СортироватьТаблицуНачислений(ТаблицаСНачислениями, СтруктураНастроек);
	
	ТаблицаНачисления = ТаблицаСНачислениями.СкопироватьКолонки();
	
	// Компонуем и детализируем начисления.
	СкомпоноватьНачисления(ТекущиеДанные, ТаблицаНачисления, ОбщиеДанные, СтруктураНастроек, Истина);
	
	// Дополним таблицу начислений пустыми колонками для компенсации работы алгоритмов для расчета услуг по ПУ.
	КомпенсироватьТаблицуПениНачисленияПоСчетчикам(ТаблицаНачисления);
	
	ТаблицаНачисления.ЗаполнитьЗначения(Ложь, "СтрокаДляОбщегоИмущества");
	
	// Сворачиваем начисления по видам услуг в соответствии с настройками, указанными пользователем.
	СвернутьТаблицуНачисления(ТаблицаНачисления, СтруктураНастроек.ТаблицаВидовУслуг, Истина, ,СтруктураНастроек);
	
	// Добавляем в таблицу начисления строку с итоговыми показателями.
	Если ТаблицаСНачислениями.Количество() <> 0 Тогда
		ДобавитьСтрокуИтоговВТаблицуНачисления(ТаблицаСНачислениями, ТаблицаНачисления, СтруктураНастроек.ЛьготыСправочно);
	КонецЕсли;
	
	// Зануляем неиспользуемые колонки.
	Для Каждого Строка Из ТаблицаНачисления Цикл
		Строка.Тариф = 0;
		Строка.ТарифДляВывода = "";
		Если ВидМакета = ВидыПлатежныхДокументов.Стандартный43Пр Тогда
			Строка.КОплате = 0;
		КонецЕсли;
	КонецЦикла;
	
	// Для платежного документа "Плат. документ (пост. №679/30 для МО)" и "Плат. документ (приказ №43/пр)" перекомпонуем таблицу начислений.
	Если ВидМакета = ВидыПлатежныхДокументов.Москва679
	 ИЛИ ВидМакета = ВидыПлатежныхДокументов.Стандартный43Пр Тогда
		ТаблицаНачисления = ПолучитьТаблицуНачисленийДляМосква679Стандартный43Пр(ТаблицаНачисления, СтруктураНастроек, ОбщиеДанные.КвитанцияПоПени);
	КонецЕсли;
	
	Возврат ТаблицаНачисления;
	
КонецФункции // ПолучитьТаблицуПениНачисленияПоТекущемуОбъекту()

// Добавляет в таблицу начисления информацию об изменениях размеров площадей помещений и об изменениях количества жильцов.
//
// Параметры:
//  ТаблицаНачисленияОбщ - структура с данными по всем объектам отчета
//  ПериодПросмотра      - список услуг, по которым необходимо установить отбор
//  СписокЛицевыхСчетов  - список лицевых счетов, по которым необходимо установить отбор.
//
Процедура ДополнитьТаблицуНачисленийСУчетомСпособовРасчета(ТаблицаНачисленияОбщ, Организация, ПериодПросмотра) Экспорт
	
	// Имеются ситуации, когда в отчетном периоде изменение количества жильцов, изменение размера площади или смена договора для взаиморасчетов
	// с текущей организацией приводят при начислении услуг к созданию нескольких записей в РН "Начисления". При этом в функции
	// "ПолучитьТаблицуНачисления()" значение индивидуального расхода суммируется без анализа влияющих на него параметров.
	
	// Например:
	//       При изменении количества жильцов в отчетном периоде с 1 на 2 начисления по соответствующей услуге (способ расчета "По нормам потребления",
	//       основание "Один человек") разбивается на подпериоды в РН "Начисления". При получении по соответствующей услуге сведений о начислениях в
	//       функции "ПолучитьТаблицуНачисления()" значение индивидуального расхода по услуге лицевого счета суммируется, и расход при этом равен 1+2=3.
	//       Данный расчет неверный, так как значения "1" и "2" - это не фактический расход по услуге, а использемые размеры норм потребления для расчета
	//       индивидуального расхода по подпериодам в отчетном периоде согласно изменению значения параметра основания нормы потребления.
	
	// Для исправления значений индивидуальных расходов по услугам процедура производит поиск по параметру "ИмеетсяСоставнойИндивидуальныйРасход"
	// все строки таблицы, подлежащие корректировке.
	// Параметр "ИмеетсяСоставнойИндивидуальныйРасход" хранит факт изменения количества жильцов, факт изменения размера площади, факт изменения договора
	// для взаиморасчетов с текущей организацией, факт того, что услуга со способом расчета "По нормам потребления". Данный параметр заполняется в запросе
	// функции "ПолучитьТаблицуНачисления()".
	
	// Для отчета "Квитанции извещения" используем колонку "Количество", для отчета "Платежный документ" - "КоличествоИПУ".
	Если ТаблицаНачисленияОбщ.Колонки.Найти("КоличествоИПУ") <> Неопределено Тогда
		ПолеКоличество = "КоличествоИПУ";
	ИначеЕсли ТаблицаНачисленияОбщ.Колонки.Найти("Количество") <> Неопределено Тогда
		ПолеКоличество = "Количество";
	Иначе
		Возврат;
	КонецЕсли;
	
	ТаблицаНачисленияОбщ.Индексы.Добавить("ИмеетсяСоставнойИндивидуальныйРасход");
	
	Отбор = Новый Структура("ИмеетсяСоставнойИндивидуальныйРасход", Истина);
	МассивСтрокТаблицыНачисленияОбщ = ТаблицаНачисленияОбщ.НайтиСтроки(Отбор);
	
	// Если сведений для корректировки нет, то данные о начислениях не меняем.
	Если МассивСтрокТаблицыНачисленияОбщ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДляАнализа = ТаблицаНачисленияОбщ.Скопировать(МассивСтрокТаблицыНачисленияОбщ, "ЛицевойСчет, Услуга");
	ТаблицаДляАнализа.Свернуть("ЛицевойСчет, Услуга");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаДляАнализа.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаДляАнализа.Услуга КАК Услуга
	|ПОМЕСТИТЬ врТаблицаДляАнализа
	|ИЗ
	|	&ТаблицаДляАнализа КАК ТаблицаДляАнализа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставнаяУслуга,
	|	УПЖКХ_НачисленияОбороты.УслугаОснование КАК УслугаОснование,
	|	УПЖКХ_НачисленияОбороты.Количество КАК КоличествоИПУ,
	|	ЛОЖЬ КАК ИмеетсяСоставнойИндивидуальныйРасход,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК СоставноеКоличествоИнд,
	|	МАКСИМУМ(УПЖКХ_НачисленияОбороты.Период) КАК Период
	|ПОМЕСТИТЬ врСведенияОРасходах
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Запись,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						врТаблицаДляАнализа.ЛицевойСчет
	|					ИЗ
	|						врТаблицаДляАнализа КАК врТаблицаДляАнализа)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						врТаблицаДляАнализа.Услуга
	|					ИЗ
	|						врТаблицаДляАнализа КАК врТаблицаДляАнализа)
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
	|	УПЖКХ_НачисленияОбороты.УслугаОснование,
	|	УПЖКХ_НачисленияОбороты.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врСведенияОРасходах.ЛицевойСчет КАК ЛицевойСчет,
	|	врСведенияОРасходах.Услуга КАК Услуга,
	|	врСведенияОРасходах.СоставнаяУслуга КАК СоставнаяУслуга,
	|	врСведенияОРасходах.КоличествоИПУ КАК КоличествоИПУ,
	|	врСведенияОРасходах.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
	|	врСведенияОРасходах.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд,
	|	врСведенияОРасходах.Период КАК Период
	|ИЗ
	|	врТаблицаДляАнализа КАК врТаблицаДляАнализа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врСведенияОРасходах КАК врСведенияОРасходах
	|		ПО врТаблицаДляАнализа.ЛицевойСчет = врСведенияОРасходах.ЛицевойСчет
	|			И врТаблицаДляАнализа.Услуга = врСведенияОРасходах.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	врСведенияОРасходах.Период,
	|	врСведенияОРасходах.ЛицевойСчет,
	|	врСведенияОРасходах.Услуга,
	|	врСведенияОРасходах.СоставнаяУслуга,
	|	врСведенияОРасходах.ИмеетсяСоставнойИндивидуальныйРасход,
	|	врСведенияОРасходах.СоставноеКоличествоИнд,
	|	врСведенияОРасходах.КоличествоИПУ
	|
	|УПОРЯДОЧИТЬ ПО
	|	врСведенияОРасходах.ЛицевойСчет,
	|	врСведенияОРасходах.Услуга,
	|	врСведенияОРасходах.Период,
	|	врСведенияОРасходах.КоличествоИПУ";
	
	Запрос.УстановитьПараметр("НачалоМесяца",      НачалоМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("КонецМесяца",       КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ТаблицаДляАнализа", ТаблицаДляАнализа);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДанных.Индексы.Добавить("ЛицевойСчет, Услуга, СоставнаяУслуга");
	ТаблицаНачисленияОбщ.Индексы.Добавить("ЛицевойСчет, Услуга, СоставнаяУслуга");
	
	врТаблицаЛС = ТаблицаДанных.Скопировать(, "ЛицевойСчет, Услуга, СоставнаяУслуга");
	врТаблицаЛС.Свернуть("ЛицевойСчет, Услуга, СоставнаяУслуга");
	
	Отбор = Новый Структура("ЛицевойСчет, Услуга, СоставнаяУслуга");
	Для Каждого ТекущаяСтрока Из врТаблицаЛС Цикл
		ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрока);
		
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаУникальныхРасходовИПУ = ТаблицаДанных.Скопировать(НайденныеСтроки);
		
		ИмеетсяСоставнойИндивидуальныйРасход = ТаблицаУникальныхРасходовИПУ.Количество() > 1;
		СоставноеКоличествоИнд               = "";
		КоличествоИПУ                        = 0;
		
		Если ИмеетсяСоставнойИндивидуальныйРасход Тогда
			Для Каждого СтрокаЗаписи Из ТаблицаУникальныхРасходовИПУ Цикл
				СоставноеКоличествоИнд = СоставноеКоличествоИнд + ?(Не ПустаяСтрока(СоставноеКоличествоИнд), "/", "") + СтрокаЗаписи.КоличествоИПУ;
			КонецЦикла;
		Иначе
			КоличествоИПУ = ТаблицаУникальныхРасходовИПУ[0].КоличествоИПУ;
		КонецЕсли;
		
		МассивСтрокТаблицыНачисленияОбщ = ТаблицаНачисленияОбщ.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаНачисления Из МассивСтрокТаблицыНачисленияОбщ Цикл
			
			СтрокаНачисления.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
			
			Если ИмеетсяСоставнойИндивидуальныйРасход И НЕ ПустаяСтрока(СоставноеКоличествоИнд) Тогда
				
				СтрокаНачисления.СоставноеКоличествоИнд = СоставноеКоличествоИнд;
				
			ИначеЕсли НЕ СтрокаНачисления[ПолеКоличество] = 0 // Пропускаем строку с нулевым расходим (перерасчеты или рассрочка).
					И НЕ ИмеетсяСоставнойИндивидуальныйРасход
					И НЕ СтрокаНачисления[ПолеКоличество] = КоличествоИПУ Тогда
				
				СтрокаНачисления[ПолеКоличество] = КоличествоИПУ;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ДополнитьТаблицуНачисленийСУчетомСпособовРасчета()

// Дополняет таблицу начислений пустыми колонками для компенсации работы алгоритмов для расчета услуг по ПУ.
//
// Параметры:
//  ТаблицаНачисления - таблица начисления по текущему лицевому счету.
//
Процедура КомпенсироватьТаблицуПениНачисленияПоСчетчикам(ТаблицаНачисления)
	
	// Компенсация работы метода ДополнитьНачисленияПоказаниямиИРасходомПоСчетчикам()
	ТаблицаНачисления.Колонки.Добавить("ВспомогательнаяСтрока", Новый ОписаниеТипов("Булево")); // Ложь
	ТаблицаНачисления.Колонки.Добавить("ПредПоказанияИнд",      Новый ОписаниеТипов("Строка")); // ""
	ТаблицаНачисления.Колонки.Добавить("ПредПоказанияОбщ",      Новый ОписаниеТипов("Строка")); // ""
	ТаблицаНачисления.Колонки.Добавить("ТекПоказанияИнд",       Новый ОписаниеТипов("Строка")); // ""
	ТаблицаНачисления.Колонки.Добавить("ТекПоказанияОбщ",       Новый ОписаниеТипов("Строка")); // ""
	ТаблицаНачисления.Колонки.Добавить("ОбщРасходИнд",          Новый ОписаниеТипов("Число"));  // 0
	ТаблицаНачисления.Колонки.Добавить("ОбщРасходОбщ",          Новый ОписаниеТипов("Число"));  // 0
	ТаблицаНачисления.Колонки.Добавить("ОбщРасходПоОПУ",        Новый ОписаниеТипов("Число"));  // 0
	ТаблицаНачисления.Колонки.Добавить("ОбщРасходИндПУ",        Новый ОписаниеТипов("Число"));  // 0
	ТаблицаНачисления.Колонки.Добавить("ОбщРасходИндНорма",     Новый ОписаниеТипов("Число"));  // 0
	ТаблицаНачисления.Колонки.Добавить("ОбъемПотребленияИПУ",   Новый ОписаниеТипов("Строка")); // ""
	ТаблицаНачисления.Колонки.Добавить("ОбъемПотребленияОПУ",   Новый ОписаниеТипов("Строка")); // ""
	ТаблицаНачисления.Колонки.Добавить("ОбщУчетныйРасход",      Новый ОписаниеТипов("Число"));  // 0
	ТаблицаНачисления.Колонки.Добавить("ОбщРасходРасхождение",  Новый ОписаниеТипов("Число"));  // 0
	
КонецПроцедуры // КомпенсироватьТаблицуПениНачисленияПоСчетчикам()

#КонецОбласти

#Область Обработчики_формирования_штрихкода

#Область ФормированиеШКОбщиеМетоды

// Получает объект внешней обработки штрихкода.
//
// Параметры
//  <ПараметрыФормированияПД> -Структура - параметры настроек формирования платежного документа.
//  <ДляОдномерногоШК> - Булево - параметр, определяющий получение для одномерного штрихкода.
//
// Возвращаемое значение:
//  Объект обработки   - объект внешней обработки штрихкода.
//
Функция ПолучитьОбъектОбработкиШтрихкода(ПараметрыФормированияПД, ДляОдномерногоШК = Истина, СпособФормированияШтрихкода = 1) Экспорт
	
	Если ТипЗнч(ПараметрыФормированияПД) = Тип("Структура") Тогда
		Если ПараметрыФормированияПД.Свойство("ОбъектОбработкиШтрихкода") Тогда
			Возврат ПараметрыФормированияПД.ОбъектОбработкиШтрихкода;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектОбработки = Неопределено;
	
	Если ДляОдномерногоШК Тогда
		ВнешняяОбработка = ?(СпособФормированияШтрихкода = 1,
							 ПараметрыФормированияПД.ВнешняяОбработкаШтрихкодаОсн,
							 ПараметрыФормированияПД.ВнешняяОбработкаШтрихкодаКР);
	Иначе
		ВнешняяОбработка = ?(СпособФормированияШтрихкода = 1,
							 ПараметрыФормированияПД.ВнешняяОбработкаШтрихкодаQRОсн,
							 ПараметрыФормированияПД.ВнешняяОбработкаШтрихкодаQRКР);
	КонецЕсли;
	
	Если НЕ ВнешняяОбработка.Пустая() Тогда
		ОбъектОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПолучитьОбъектВнешнейОбработки(ВнешняяОбработка);
		Если ТипЗнч(ПараметрыФормированияПД) = Тип("Структура") Тогда
			ПараметрыФормированияПД.Вставить("ОбъектОбработкиШтрихкода", ОбъектОбработки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектОбработки;
	
КонецФункции // ПолучитьОбъектОбработкиШтрихкода()

// Функция проверяет присутствие в тексте символа кириллицы.
// При первом найденном симоле кириллицы возвращается ИСТИНА.
//
Функция ЕстьКириллица(ИсходнаяСтрока) Экспорт 
	
	ЕстьКириллица = Ложь;
	ИсходнаяСтрока=СокрЛП(ИсходнаяСтрока);
	Если СтрДлина(ИсходнаяСтрока)>0 Тогда
		Для Сч=1 по СтрДлина(ИсходнаяСтрока) Цикл
			Символ = НРег(Сред(ИсходнаяСтрока, Сч, 1));
			Если Найти("абвгдеёжзийклмнопрстуфхцчшщъыьэюя", Символ) > 0
			 ИЛИ Найти("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ", Символ) > 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ЕстьКириллица()

// Выводит пользователю сообщение о некорректности настроек формирования ШК.
//
Процедура ВывестиСообщениеОНекорректныхНастройкахШК(ТекстСообщения, КлючДанных = Неопределено)
	
	Сообщение       = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	
	Если Не КлючДанных = Неопределено Тогда
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

#КонецОбласти // ФормированиеШКОбщиеМетоды

#Область ФормированиеОдномерногоШК

// Формирует текст штрих-кода для вывода в квитанцию.
//
// Параметры
//  Объект       – текущий лицевой счет
//  СуммаОплаты  – сумма к оплате.
//
// Возвращаемое значение:
//  Строка – текст штрих-кода.
//
Функция ПолучитьШтрихКод(Объект, ОбщиеДанные, СтруктураНастроек, ТекстКода = "", ОтображатьТекст = Истина, УчитыватьДобровольноеСтрахование = Ложь) Экспорт
	
	ТекстКода = ПолучитьТекстШК(Объект, СтруктураНастроек, ОбщиеДанные, УчитыватьДобровольноеСтрахование);
	
	Если ЕстьКириллица(ТекстКода) Тогда
		ТекстСообщения = "Для лицевого счета " + Объект + " в тексте штрихкода обнаружен символ кирилицы. Картинка одномерного штрихкода не сформирована.";
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
		
		ТекстСообщения = ТекстСообщения
					   + " Форма квитанции """
					   + СтруктураНастроек.ПараметрыФормированияПД.ФормаКвитанции
					   + """. Период просмотра "
					   + СтруктураНастроек.ПериодПросмотра;
		ЗаписьЖурналаРегистрации(НСТр("ru = 'УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтрокуQRШтрихкода'"), 
								 УровеньЖурналаРегистрации.Ошибка,,
								 Объект,
								 ТекстСообщения);
	КонецЕсли;
	
	ПараметрыШтрихкода = Новый Структура;
	ЗаполнитьПараметрыОдномерногоШК(ПараметрыШтрихкода, ТекстКода);
	
	Возврат ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	
КонецФункции // ПолучитьШтрихКод()

// Функция подготавливает параметры для формирования текста штрихкода
// и возвращает сформированный текст штрихкода функцией "СформироватьШтрихкод()".
//
Функция ПолучитьТекстШК(Объект, СтруктураНастроек, ОбщиеДанные, УчитыватьДобровольноеСтрахование = Ложь) Экспорт
	
	ПараметрыФормированияПД = СтруктураНастроек.ПараметрыФормированияПД;
	
	Параметры = Новый Структура();
	Параметры.Вставить("Дата",        СтруктураНастроек.ПериодПросмотра);
	Параметры.Вставить("ЛицевойСчет", Объект);
	Параметры.Вставить("Сумма",       ?(УчитыватьДобровольноеСтрахование, ОбщиеДанные.ВсегоКОплатеСДобровольнымСтрахованиемДляШК, ОбщиеДанные.ВсегоКОплатеДляШК));
	// Добавляется параметр, предназначенный для выбора состава параметров при формировании одномерного или QR штрихкода..
	Параметры.Вставить("СпособФормированияШтрихкода", ?(ОбщиеДанные.КвитанцияНаКР, 0, 1));
	
	// Проверяем, есть ли в структуре настроек свойство "ИсполнительРасчетов" (присутствует только в ПД) и, если оно есть, не пустая ли это ссылка.
	Если СтруктураНастроек.Свойство("ИсполнительРасчетов") Тогда
		ИспользуетсяИсполнительРасчетов = ?(СтруктураНастроек.ИсполнительРасчетов.Пустая(), Ложь, Истина);
	Иначе
		ИспользуетсяИсполнительРасчетов = Ложь;
	КонецЕсли;
	
	// В зависимости от того используется ли исполнитель расчетов выбираем соответствующий подготовленный ИНН и р/с организации,
	// причём для квитанций по кап.ремонту расчетный счет всегда берется как р/с, закрепленный за текущим зданием как счет фонда кап.ремонта.
	ПодготовленнаяСтрокаИНН = ?(ИспользуетсяИсполнительРасчетов, ОбщиеДанные.ИННИсполнителя, ОбщиеДанные.ИННОрганизации);
	ПодготовленнаяСтрокаРС  = ?(ОбщиеДанные.КвитанцияНаКР, ОбщиеДанные.РасчетныйСчетКР, ?(ИспользуетсяИсполнительРасчетов, ОбщиеДанные.РасчетныйСчетИсполнителя, ОбщиеДанные.РасчетныйСчет));
	
	Параметры.Вставить("ИННОрганизации",           УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(ПодготовленнаяСтрокаИНН, 12));
	Параметры.Вставить("РасчетныйСчетОрганизации", УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(ПодготовленнаяСтрокаРС,  20));
	
	Возврат СформироватьШтрихкод(Параметры, ПараметрыФормированияПД);
	
КонецФункции // ПолучитьТекстШК()

// Формирует штрихкод по переданным данным согласно настройкам учетной политики.
//
// Параметры
//  Параметры    – Структура – параметры для подстановки в штрихкод: дата, лицевой счет, сумма;
//  ПараметрыФормированияПД – Структура – параметры учетной политики.
//
// Возвращаемое значение:
//  Строка – сформированный штрихкод.
//
Функция СформироватьШтрихкод(Параметры, ПараметрыФормированияПД) Экспорт
	
	// Свойство "СпособФормированияШтрихкода" может принимать 3 значения: "Неопределено", "0" и "1".
	// Если значение параметра принимает значение "Неопределено" или "1", то при формировании ШК учитывать состав ШК по основным услугам.
	// В противном случае, при формировании ШК учитывать состав ШК по услугам капремонта.
	СпособФормированияШтрихкода = 1;
	Если Параметры.Свойство("СпособФормированияШтрихкода")
		И Параметры.СпособФормированияШтрихкода = 0 Тогда
		СпособФормированияШтрихкода = 0;
	КонецЕсли;
	
	ДляОдномерногоШК = (ПараметрыФормированияПД.ВидШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный"));
	
	Если ПараметрыФормированияПД.ВариантОпределенияФорматаШтрихкода 
							 = Перечисления.КВП_ВариантыОпределенияФорматаШтрихкода.ИзВнешнейОбработки Тогда
		// формат штрихкода из внешней обработки.
		ОбработкаОбъект = ПолучитьОбъектОбработкиШтрихкода(ПараметрыФормированияПД, ДляОдномерногоШК, СпособФормированияШтрихкода);
		Если ОбработкаОбъект = Неопределено Тогда
			Возврат "";
		Иначе
			Попытка
				Если ДляОдномерногоШК Тогда
					ТекстКода = ОбработкаОбъект.СформироватьШтрихкодИзШаблона(Параметры, ПараметрыФормированияПД);
				Иначе
					ТекстКода = ОбработкаОбъект.СформироватьQRкодИзШаблона(Параметры, ПараметрыФормированияПД);
				КонецЕсли;
				Возврат ТекстКода;
			Исключение
				Возврат "";
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("Константа", СокрЛП(ПараметрыФормированияПД.КонстантаОрганизацииДляШтрихКода));
	Если Параметры.Свойство("Дата") Тогда
		Параметры.Вставить("МесяцОплаты", Формат(Параметры.Дата, "ДФ=MM"));
		Параметры.Вставить("ГодОплаты",   Формат(Параметры.Дата, "ДФ=yy"));
	КонецЕсли;
	Если Параметры.Свойство("ЛицевойСчет") Тогда
		Если ПараметрыФормированияПД.ИдентификаторЛСШтрихкода Тогда
			Параметры.Вставить("КодЛС", УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(
				СокрЛП(УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Параметры.ЛицевойСчет, "Идентификатор")),
				ПараметрыФормированияПД.ДлинаИдентификатораШтрихкода, "0"));
		Иначе
			Параметры.Вставить("КодЛС", УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(
				СокрЛП(УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Параметры.ЛицевойСчет, "Код")),
				ПараметрыФормированияПД.ДлинаИдентификатораШтрихкода, "0"));
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Свойство("Сумма") Тогда
		Если ПараметрыФормированияПД.РазделительДробнойЧастиСуммы = " . (точка)" Тогда
				Параметры.Вставить("СуммаКОплате", УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(Формат(Параметры.Сумма, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0"),
																						ПараметрыФормированияПД.ДлинаСуммыШтрихкода + 1,
																						"0"));
		ИначеЕсли ПараметрыФормированияПД.РазделительДробнойЧастиСуммы = " , (запятая)" Тогда
				Параметры.Вставить("СуммаКОплате", УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(Формат(Параметры.Сумма, "ЧДЦ=2; ЧРД=,; ЧН=; ЧГ=0"),
																						ПараметрыФормированияПД.ДлинаСуммыШтрихкода + 1,
																						"0"));
		Иначе // Если ПараметрыФормированияПД.РазделительДробнойЧастиСуммы = "не выводить" Тогда
				Параметры.Вставить("СуммаКОплате", УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(Формат(Параметры.Сумма * 100, "ЧГ=0"),
																						ПараметрыФормированияПД.ДлинаСуммыШтрихкода,
																						"0"));
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыФормированияПД.ВариантОпределенияФорматаШтрихкода 
					= Перечисления.КВП_ВариантыОпределенияФорматаШтрихкода.Автоматически Тогда
		
		// Если не используется ручное формирование штрихкода, то делаем, как раньше.
		Параметры.Вставить("КодОрганизации", ПараметрыФормированияПД.КодОрганизацииДляОдномерногоШКПоОсн);
		
		ТекстКода 	= Параметры.КодОрганизации + Параметры.КодЛС + Параметры.МесяцОплаты
		          	+ Параметры.ГодОплаты + Параметры.СуммаКОплате;
		ВставитьКонтрольнуюСтрокуШК(ТекстКода, ПараметрыФормированияПД);
		
		Возврат ТекстКода;
		
	КонецЕсли;
	
	Если ДляОдномерногоШК ИЛИ (Параметры.Свойство("ЭтоПримерОдномерногоШтрихкода") И Параметры.ЭтоПримерОдномерногоШтрихкода) Тогда
		Если СпособФормированияШтрихкода = 1 Тогда
			Параметры.Вставить("КодОрганизации", ПараметрыФормированияПД.КодОрганизацииДляОдномерногоШКПоОсн);
		Иначе
			Параметры.Вставить("КодОрганизации", ПараметрыФормированияПД.КодОрганизацииДляОдномерногоШКПоУслугамКР);
		КонецЕсли;
	Иначе
		Если СпособФормированияШтрихкода = 1 Тогда
			Параметры.Вставить("КодОрганизации", ПараметрыФормированияПД.КодОрганизацииДляQRКодаПоОсн);
		Иначе
			Параметры.Вставить("КодОрганизации", ПараметрыФормированияПД.КодОрганизацииДляQRКодаПоУслугамКР);
		КонецЕсли;
	КонецЕсли;
	
	ТекстКода = "";
	
	Если СпособФормированияШтрихкода = 1 Тогда
		СоставШтрихкода = ПараметрыФормированияПД.СоставШтрихкодаПоОсн;
	Иначе
		СоставШтрихкода = ПараметрыФормированияПД.СоставШтрихкодаПоКР;
	КонецЕсли;
	
	Если ПустаяСтрока(СоставШтрихкода) Тогда
		Возврат "";
		СоставШтрихкода = "КодОрганизации,КодЛС,Константа,МесяцОплаты,ГодОплаты,СуммаКОплате,КонтрольнаяСумма";
	КонецЕсли;
	
	Список = СоставШтрихкода;
	Список = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	МассивПараметров = Новый Массив;
	Для Счетчик = 1 по ЧислоПараметров Цикл
		
		ПозЗапятой = Найти(Список, ",");
		Если ПозЗапятой > 0 Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			ИмяПараметра = СокрЛП(ИмяПараметра);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			
			Попытка
				Если Параметры.Свойство(ИмяПараметра) Тогда
					ТекстКода = ТекстКода + СокрЛП(Параметры[ИмяПараметра]);
					МассивПараметров.Добавить(ИмяПараметра);
				ИначеЕсли ИмяПараметра = "КонтрольнаяСумма" Тогда
					КонтрольнаяСумма = СформироватьКонтрольнуюСумму(ПараметрыФормированияПД.СхемаДляРасчетаКонтрольнойСуммы, ТекстКода);
					ТекстКода        = ТекстКода + КонтрольнаяСумма;
				Иначе
					ПозицияРазделителя = Найти(ИмяПараметра, "_");
					Если ПозицияРазделителя > 0 Тогда
						ТекстКода = ТекстКода + Сред(ИмяПараметра, ПозицияРазделителя + 1);
					КонецЕсли;
				КонецЕсли;
			// Если в качестве доп. свойства разделителя указан символ, отличный от буквенного и числового.
			Исключение
				ПозицияРазделителя = Найти(ИмяПараметра, "_");
				Если ПозицияРазделителя > 0 Тогда
					ТекстКода = ТекстКода + Сред(ИмяПараметра, ПозицияРазделителя + 1);
				КонецЕсли;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ТекстКода;
	
КонецФункции // СформироватьШтрихкод()

// Вставляет в сформированный текст штрих-кода контрольную строку.
//
// Параметры:
//  Текст        – сформированный текст штрих-кода, куда нужно добавить
//                 контрольную строку.
//
// Возвращаемое значение:
//  Строка – готовый текст, содержащий в себе контрольную строку.
//
Процедура ВставитьКонтрольнуюСтрокуШК(Текст, ПараметрыФормированияПД) Экспорт
	
	глКонтрольнаяСтрокаШК = СокрЛП(ПараметрыФормированияПД.КонстантаОрганизацииДляШтрихКода);
	глИндексВставкиКСШК   = ИндексВставкиКСШК();
	
	Текст = Лев(Текст, глИндексВставкиКСШК) + глКонтрольнаяСтрокаШК + Прав(Текст, СтрДлина(Текст) - глИндексВставкиКСШК);
	
КонецПроцедуры // ВставитьКонтрольнуюСтрокуШК()

// Функция осуществляет подсчет контрольной суммы в зависимости от указанной схемы.
//
Функция СформироватьКонтрольнуюСумму(СхемаДляРасчетаКонтрольнойСуммы, ТекстКода) Экспорт
	
	КонтрольнаяСумма = 0;
	
	Если СхемаДляРасчетаКонтрольнойСуммы = "Схема №1" Тогда
		
		Для Сч = 1 По СтрДлина(ТекстКода) Цикл
			Попытка
				КонтрольнаяСумма = КонтрольнаяСумма + Сч * Число(Сред(ТекстКода, Сч, 1));
			Исключение
			КонецПопытки;
		КонецЦикла;
	
		КонтрольнаяСумма = КонтрольнаяСумма + 1234;
		
	ИначеЕсли СхемаДляРасчетаКонтрольнойСуммы = "Схема №2" Тогда
		СуммаНаЧетныхМестах   = 0;
		СуммаНаНечетныхМестах = 0;
		
		Индекс = 1;
		
		Пока Индекс <= СтрДлина(ТекстКода) Цикл
			Попытка
				СуммаНаНечетныхМестах = СуммаНаНечетныхМестах + Число(Сред(ТекстКода, Индекс, 1));
			Исключение
				
			КонецПопытки;
			Индекс = Индекс + 2;
		КонецЦикла;
		
		Индекс = 2;
		
		Пока Индекс <= СтрДлина(ТекстКода) Цикл
			Попытка 
				СуммаНаЧетныхМестах = СуммаНаЧетныхМестах + Число(Сред(ТекстКода, Индекс, 1));
			Исключение
				
			КонецПопытки;
			Индекс = Индекс + 2;
		КонецЦикла;
		
		КонтрольнаяСумма = (10 - ((СуммаНаЧетныхМестах * 3) + СуммаНаНечетныхМестах) % 10) % 10;
		
	ИначеЕсли СхемаДляРасчетаКонтрольнойСуммы = "Схема №3" Тогда
		
		ВесовыеКоэффициенты = Новый Массив;
		ВесовыеКоэффициенты.Добавить(7);
		ВесовыеКоэффициенты.Добавить(1);
		ВесовыеКоэффициенты.Добавить(3);
		
		ДлинаТекстаШК                   = СтрДлина(ТекстКода);
		КоличествоКоэффициентов         = ВесовыеКоэффициенты.Количество();
		МаксимальныйИндексКоэффициентов = ВесовыеКоэффициенты.ВГраница();
		СуммаМладшихРазрядов            = 0;
		ИндексКоэффициента              = 0;
		
		Для НачальныйНомер = 1 По ДлинаТекстаШК Цикл
			Попытка
				ЗначениеПроизведения = (Число(Сред(ТекстКода, НачальныйНомер, 1)) * ВесовыеКоэффициенты[ИндексКоэффициента]);
				ЧислоМладшегоРазряда = ЗначениеПроизведения % 10;
				СуммаМладшихРазрядов = СуммаМладшихРазрядов + ЧислоМладшегоРазряда;
				ИндексКоэффициента   = ?(ИндексКоэффициента < МаксимальныйИндексКоэффициентов, ИндексКоэффициента + 1, 0);
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ЧислоМладшегоРазрядаСуммы = СуммаМладшихРазрядов % 10;
		
		КонтрольнаяСумма = (ЧислоМладшегоРазрядаСуммы * 3) % 10;
		
	ИначеЕсли СхемаДляРасчетаКонтрольнойСуммы = "Схема №4" Тогда
		
		ПараметрыРасчетаКС = ЗаполнитьПараметрыРасчетаКонтрольнойСуммыСхема4(ТекстКода);
		
		Если ПараметрыРасчетаКС.НастройкиОпределены Тогда
			врТекстКода = ТекстКода;
			Для Сч = 1 По СтрДлина(врТекстКода) Цикл
				Попытка
					Если Сч = ПараметрыРасчетаКС.НомерПропускаемогоСимвола Тогда
						Продолжить;
					КонецЕсли;
					
					КонтрольнаяСумма = КонтрольнаяСумма + Сч * (Pow(Число(Сред(врТекстКода, Сч, 1)), ?(Сч >= ПараметрыРасчетаКС.НачальныйНомерСимвола И Сч <= ПараметрыРасчетаКС.КонечныйНомерСимвола, 2, 1)));
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		
		КонтрольнаяСумма = КонтрольнаяСумма + 1234;
		
	КонецЕсли;
	
	Возврат Формат(КонтрольнаяСумма, "ЧН=0; ЧГ=0");
	
КонецФункции // СформироватьКонтрольнуюСумму()

// Процедура заполняет параметры одномерного штрихкода.
//
Процедура ЗаполнитьПараметрыОдномерногоШК(ПараметрыШтрихкода, Знач ТекстКода) Экспорт
	
	ПараметрыШтрихкода.Вставить("Штрихкод",        ТекстКода);
	ПараметрыШтрихкода.Вставить("Ширина",          100);
	ПараметрыШтрихкода.Вставить("Высота",          30);
	ПараметрыШтрихкода.Вставить("ТипКода",         4);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
	
	// Раскомментировать нужную и установитьзначение по надобности.
	//ПараметрыШтрихкода.Вставить("ПрозрачныйФон",   );
	//ПараметрыШтрихкода.Вставить("РазмерШрифта",    );
	//ПараметрыШтрихкода.Вставить("УголПоворота",    );
	
КонецПроцедуры // ЗаполнитьПараметрыОдномерногоШК()

// Функция заполняет параметры расчета контрольной суммы.
//
Функция ЗаполнитьПараметрыРасчетаКонтрольнойСуммыСхема4(ТекстШК)
	
	ДлинаТекстШК = СтрДлина(ТекстШК);
	
	ПараметрыРасчетаКС = Новый Структура("НастройкиОпределены, НомерПропускаемогоСимвола, НачальныйНомерСимвола, КонечныйНомерСимвола");
	
	ПараметрыРасчетаКС.НастройкиОпределены = Истина;
	
	Если ДлинаТекстШК = 19 Тогда
		ПараметрыРасчетаКС.НомерПропускаемогоСимвола = 4;
		ПараметрыРасчетаКС.НачальныйНомерСимвола     = 13;
		ПараметрыРасчетаКС.КонечныйНомерСимвола      = 17;
	ИначеЕсли ДлинаТекстШК = 20 Тогда
		ПараметрыРасчетаКС.НомерПропускаемогоСимвола = 5;
		ПараметрыРасчетаКС.НачальныйНомерСимвола     = 14;
		ПараметрыРасчетаКС.КонечныйНомерСимвола      = 18;
	ИначеЕсли ДлинаТекстШК = 21 Тогда
		ПараметрыРасчетаКС.НомерПропускаемогоСимвола = 6;
		ПараметрыРасчетаКС.НачальныйНомерСимвола     = 15;
		ПараметрыРасчетаКС.КонечныйНомерСимвола      = 19;
	ИначеЕсли ДлинаТекстШК = 25 Тогда
		ПараметрыРасчетаКС.НомерПропускаемогоСимвола = 6;
		ПараметрыРасчетаКС.НачальныйНомерСимвола     = 19;
		ПараметрыРасчетаКС.КонечныйНомерСимвола      = 23;
	ИначеЕсли ДлинаТекстШК = 32 Тогда
		ПараметрыРасчетаКС.НомерПропускаемогоСимвола = 6;
		ПараметрыРасчетаКС.НачальныйНомерСимвола     = 26;
		ПараметрыРасчетаКС.КонечныйНомерСимвола      = 29;
	Иначе
		ПараметрыРасчетаКС.НастройкиОпределены = Ложь;
	КонецЕсли;
	
	Возврат ПараметрыРасчетаКС;
	
КонецФункции // ЗаполнитьПараметрыРасчетаКонтрольнойСуммы()

// Проверяет корректность настроек для текущего одномерного штрихкода.
//
Функция ПроверитьНастройкиДляОдномерногоШК(ВидШтрихкодаОдномерный, СтруктураНастроек, КвитанцияНаКР) Экспорт
	
	НастройкиФормированияКорректны = Ложь;
	
	ПараметрыФормированияПД = СтруктураНастроек.ПараметрыФормированияПД;
	ПараметрыФормированияПД.ВидШтрихкода     = ВидШтрихкодаОдномерный;
	ВедетсяРаздельныйУчетПоУслугамКапремонта = СтруктураНастроек.ВедетсяРаздельныйУчетПоУслугамКапремонта;
	
	Если КвитанцияНаКР Тогда
		
		НастройкиФормированияКорректны = СтруктураНастроек.НастройкиОдномерногоШКПоКРКорректны;
		
		// Если необходимость вывода ШК по кап.ремонту ранее не проверяли и настройки некорректны,
		// то сообщаем об этом ровно один раз.
		Если НЕ СтруктураНастроек.ОдномерныйШКПоКРИспользуется Тогда
			СтруктураНастроек.ОдномерныйШКПоКРИспользуется = Истина;
			
			Если НЕ НастройкиФормированияКорректны Тогда
				ВывестиСообщениеОНекорректныхНастройкахШК(СтруктураНастроек.ТекстОшибкиНастроекДляОдномерногоШККР, ПараметрыФормированияПД.КлючЗаписиРезультат);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		НастройкиФормированияКорректны = СтруктураНастроек.НастройкиОдномерногоШКПоОснКорректны;
		
		// Если необходимость вывода ШК по основным услугам ранее не проверяли и настройки некорректны,
		// то сообщаем об этом ровно один раз.
		Если НЕ СтруктураНастроек.ОдномерныйШКПоОснИспользуется Тогда
			СтруктураНастроек.ОдномерныйШКПоОснИспользуется = Истина;
			
			Если НЕ НастройкиФормированияКорректны Тогда
				ВывестиСообщениеОНекорректныхНастройкахШК(СтруктураНастроек.ТекстОшибкиНастроекДляОдномерногоШКОсн, ПараметрыФормированияПД.КлючЗаписиРезультат);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкиФормированияКорректны;
	
КонецФункции

Функция ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода) Экспорт
	
	Возврат МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	
КонецФункции

// Функция возвращает факт подключения компоненты штрихкода.
Функция КомпонентаФормированияШтрихКодаПодключена() Экспорт
	
	КомпонентаШтрихКодаПодключена = Ложь;
	
	ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации штрихкода'");
	
	Попытка
		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиШтрихкодов",
								"КартинкаШтрихкода",
								ТипВнешнейКомпоненты.Native) Тогда
			Компонент = Новый("AddIn.КартинкаШтрихкода.Barcode");
			КомпонентаШтрихКодаПодключена = Истина;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки);
	КонецПопытки;
	
	Возврат КомпонентаШтрихКодаПодключена;
	
КонецФункции // КомпонентаФормированияШтрихКода()

#КонецОбласти // ФормированиеОдномерногоШК

#Область ФормированиеQRкода

// Возвращает строку QR штрихкода.
//
Функция ПолучитьСтрокуQRШтрихкода(Объект, СтруктураНастроек, ОбщиеДанные, УчитыватьДобровольноеСтрахование = Ложь) Экспорт
	
	ПараметрыФормированияПД = СтруктураНастроек.ПараметрыФормированияПД;
	
	РеквизитыQRКодаПользователя = Новый СписокЗначений;
	
	// Отбираем дополнительные параметры из хранилища значений.
	Если НЕ ПараметрыФормированияПД.ВариантОпределенияФорматаШтрихкода = Перечисления.КВП_ВариантыОпределенияФорматаШтрихкода.Автоматически Тогда
		
		врРеквизитыQRКодаПользователя = Неопределено;
		
		Если ОбщиеДанные.КвитанцияНаКР Тогда
			врРеквизитыQRКодаПользователя = ПараметрыФормированияПД.ДополнительныеРеквизитыQRКодаПоКР.Получить();
		Иначе
			врРеквизитыQRКодаПользователя = ПараметрыФормированияПД.ДополнительныеРеквизитыQRКодаПоОсн.Получить();
		КонецЕсли;
		
		Если ТипЗнч(врРеквизитыQRКодаПользователя) = Тип("СписокЗначений") Тогда
			РеквизитыQRКодаПользователя = врРеквизитыQRКодаПользователя;
		КонецЕсли;
		
	КонецЕсли;
	
	// Структура с полями не по стандарту УФЭБС и полями для дополнительной обработки.
	// При этом реквизит "addAmount" (резвизит по пеням) из стандарта УФЭБС будем обрабатывать отдельно.
	СтруктураПолейДляДополнительнойОбработки = Новый Структура("Sum1,
															   |Sum2,
															   |persAcc1,
															   |Purpose1,
															   |Purpose2,
															   |FIO,
															   |counterId,
															   |counterVal,
															   |addAmount,
															   |addAmount1");
	
	// Подготовим состав реквизитов в списке и структуре реквизитов QR кода.
	ОбработатьСоставРеквизитов(РеквизитыQRКодаПользователя, СтруктураПолейДляДополнительнойОбработки);
	
	// Получим структуру с данными согласно стандарту УФЭБС + дополнительные поля не по стандарту УФЭБС.
	СтруктураДанныхQR = ЗаполнитьДанныеQRШтрихкода(Объект, СтруктураНастроек, ОбщиеДанные, РеквизитыQRКодаПользователя, УчитыватьДобровольноеСтрахование);
	
	ПустаяСтрока = "";
	
	// Если текст штрихкода формируем из внешней обработки, то вызываем функцию из неё.
	Если ПараметрыФормированияПД.ВариантОпределенияФорматаШтрихкода =
						ПредопределенноеЗначение("Перечисление.КВП_ВариантыОпределенияФорматаШтрихкода.ИзВнешнейОбработки") Тогда
		// Получаем объект внешней обработки.
		ОбработкаОбъект = ПолучитьОбъектОбработкиШтрихкода(ПараметрыФормированияПД, Ложь);
		
		// Если не удалось получить объект внешней обработки, то возвращаем пустую строку.
		Если ОбработкаОбъект = Неопределено Тогда
			Возврат ПустаяСтрока;
		Иначе
			Попытка
				//Возврат ОбработкаОбъект.СформироватьQRкодИзШаблона(СтруктураДанныхQR, ПараметрыФормированияПД);
				Возврат ОбработкаОбъект.СформироватьQRкодИзШаблона(Объект, СтруктураНастроек, ОбщиеДанные);
			Исключение
				// Если возникла ошибка в формировании текста штрихкода во внешней обработке,
				// то возвращаем пустую строку.
				Возврат ПустаяСтрока;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		СтрокаQRКода = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(СтруктураДанныхQR);
		
		Если ПустаяСтрока(СтрокаQRКода) Тогда
			
			СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Для получателя платежа " + СтруктураДанныхQR.ТекстПолучателя + " не удалось сформировать штрихкод.");
			
			Для Каждого ТекущееСообщение Из СообщенияПользователю Цикл
				ТекущееСообщение.Сообщить();
			КонецЦикла;
			
			// Сообщения после первого вызова не очищаются, поэтому запрашиваем их еще раз для очистки.
			ПолучитьСообщенияПользователю(Истина);
			
			Возврат "";
			
		КонецЕсли;
		
		// Дополним строку QR штихкода значениями дополнительных реквизитов.
		ДополнитьСтрокуQRКодаРеквизитами(СтрокаQRКода, РеквизитыQRКодаПользователя, СтруктураПолейДляДополнительнойОбработки,
										 Объект, СтруктураНастроек, ОбщиеДанные, УчитыватьДобровольноеСтрахование);
		
		Возврат СтрокаQRКода;
	Исключение
		// Если возникла ошибка в типовых методах получения строки штрихкода,
		// то сообщаем пользователю об этом, записываем в журнал регистрации,
		// возвращаем пустую строку.
		ТекстСообщения = "Ошибка формирования QR штрихкода квитанции для лицевого счета " + Объект;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
		
		ТекстСообщения = ТекстСообщения
					   + " Форма квитанции """
					   + ПараметрыФормированияПД.ФормаКвитанции
					   + """. Период просмотра "
					   + СтруктураНастроек.ПериодПросмотра;
		ЗаписьЖурналаРегистрации(НСТр("ru = 'УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтрокуQRШтрихкода'"), 
								 УровеньЖурналаРегистрации.Ошибка,,
								 Объект,
								 ТекстСообщения);
		Возврат ПустаяСтрока;
	КонецПопытки;
	
КонецФункции // ПолучитьСтрокуQRШтрихкода()

// Процедура подготавливает состав реквизитов в списке и структуре реквизитов QR кода
// для дальнейшей обработки.
Процедура ОбработатьСоставРеквизитов(РеквизитыQRКодаПользователя, ПоляДляДопОбработки)
	
	МассивРеквизитовДляУдаления = Новый Массив;
	Для Каждого ТекРеквизит ИЗ ПоляДляДопОбработки Цикл
		Если РеквизитыQRКодаПользователя.НайтиПоЗначению(ТекРеквизит.Ключ) = Неопределено Тогда
			МассивРеквизитовДляУдаления.Добавить(ТекРеквизит.Ключ);
		Иначе
			НайденныйЭлемент = РеквизитыQRКодаПользователя.НайтиПоЗначению(ТекРеквизит.Ключ);
			Если НЕ НайденныйЭлемент = Неопределено Тогда
				РеквизитыQRКодаПользователя.Удалить(НайденныйЭлемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Если реквизита нет в списке реквизитов пользователя, то 
	// его исключаем из структуры реквизитов для дополнительной обработки.
	Для Каждого ТекЭлемент Из МассивРеквизитовДляУдаления Цикл
		ПоляДляДопОбработки.Удалить(ТекЭлемент);
	КонецЦикла;

КонецПроцедуры // ОбработатьСоставРеквизитов()

// Заполняет дополнительные поля структуры данных QR, не входящие в стандарт УФЭБС.
Процедура ДополнитьСтрокуQRКодаРеквизитами(СтрокаQRКода, РеквизитыQRКодаПользователя, ПоляДопОбработки,
										   Объект, СтруктураНастроек, ОбщиеДанные, УчитыватьДобровольноеСтрахование)
	
	ПараметрыФормированияПД = СтруктураНастроек.ПараметрыФормированияПД;
	СтрокаПараметра         = "";
	
	Для Каждого ТекущийЭлемент Из ПоляДопОбработки Цикл
		
		ИмяПараметра = ТекущийЭлемент.Ключ;
		
		Если ИмяПараметра = "Sum1" И ЗначениеЗаполнено(ОбщиеДанные.ИтогоНачислено) Тогда
			ПоляДопОбработки[ИмяПараметра] = Формат(Число(?(УчитыватьДобровольноеСтрахование, ОбщиеДанные.ИтогоНачисленоСоСтрахованием, ОбщиеДанные.ИтогоНачислено)) * 100,"ЧГ=0");
		КонецЕсли;
		
		Если ИмяПараметра = "Sum2" И ЗначениеЗаполнено(ОбщиеДанные.Задолженность) Тогда
			ПоляДопОбработки[ИмяПараметра] = Формат(Число(ОбщиеДанные.Задолженность) * 100,"ЧГ=0");
		КонецЕсли;
		
		Если ИмяПараметра = "persAcc1" Тогда
			ПоляДопОбработки[ИмяПараметра] = СокрЛП(ОбщиеДанные.ИдентификаторЛС);
		КонецЕсли;
		
		Если ИмяПараметра = "Purpose1" Тогда
			ПоляДопОбработки[ИмяПараметра] = "Текущие начисления";
		КонецЕсли;
		
		Если ИмяПараметра = "Purpose2" Тогда
			ПоляДопОбработки[ИмяПараметра] = "Сумма задолженности";
		КонецЕсли;
		
		Если ИмяПараметра = "FIO" И ЗначениеЗаполнено(ОбщиеДанные.ФИО) Тогда
			ПоляДопОбработки[ИмяПараметра] = СокрЛП(ОбщиеДанные.ФИО);
		КонецЕсли;
		
		Если ИмяПараметра = "addAmount" Тогда
			Если Не ОбщиеДанные.КОплатеПениДляШК = 0 Тогда
				ПоляДопОбработки[ИмяПараметра] = Формат(ОбщиеДанные.КОплатеПениДляШК * 100, "ЧГ=0");
			Иначе
				ПоляДопОбработки[ИмяПараметра] = "000";
			КонецЕсли;
		// Подставим имя параметра и значение.
		ИначеЕсли ИмяПараметра = "addAmount1" Тогда
			ПоляДопОбработки[ИмяПараметра] = Формат(ОбщиеДанные.КОплатеПениСУчетомНачСальдоПени * 100, "ЧН=000; ЧГ=0");
		КонецЕсли;
		
		Если ИмяПараметра = "counterId" ИЛИ ИмяПараметра = "counterVal" Тогда
			ТаблицаИПУ = ОбщиеДанные.ТаблицаИПУ;
			Если Не ТаблицаИПУ.Количество() = 0 Тогда
				// Показания с номерами счетчиков.
				Если ИмяПараметра = "counterVal" Тогда
					СтрокаПоказанийСчетчиков = "";
					Для Каждого ТекущийСчетчик Из ТаблицаИПУ Цикл
						НачальнаяСтрокаПоказания = СтрокаПоказанийСчетчиков + "|counterId=" + СтрЗаменить(СтрЗаменить(ТекущийСчетчик.Абонент, " ", ""), Символы.НПП,"")
																			+ "|counterVal=";
						Если Не ТекущийСчетчик.ПредыдущееПоказаниеДн = 0 Тогда
							СтрокаПоказанийСчетчиков = НачальнаяСтрокаПоказания + "Дн " + Формат(ТекущийСчетчик.ПредыдущееПоказаниеДн, "ЧГ=0");
						КонецЕсли;
						Если Не ТекущийСчетчик.ПредыдущееПоказаниеНч = 0 Тогда
							СтрокаПоказанийСчетчиков = НачальнаяСтрокаПоказания + "Нч " + Формат(ТекущийСчетчик.ПредыдущееПоказаниеНч, "ЧГ=0");
						КонецЕсли;
						Если Не ТекущийСчетчик.ПредыдущееПоказаниеПк = 0 Тогда
							СтрокаПоказанийСчетчиков = НачальнаяСтрокаПоказания + "Пк " + Формат(ТекущийСчетчик.ПредыдущееПоказаниеПк, "ЧГ=0");
						КонецЕсли;
					КонецЦикла;
					ПоляДопОбработки[ИмяПараметра] = СтрокаПоказанийСчетчиков;
					ПоляДопОбработки.Удалить("counterId");
				КонецЕсли;
				// Только номера счетчиков.
				Если ИмяПараметра = "counterId" И Не ПоляДопОбработки.Свойство("counterVal") Тогда
					СтрокаСчетчиков = "";
					Для Каждого ТекущийСчетчик Из ТаблицаИПУ Цикл
						СтрокаСчетчиков = СтрокаСчетчиков + "|counterId=" + ТекущийСчетчик.Абонент;
					КонецЦикла;
					ПоляДопОбработки[ИмяПараметра] = СтрокаСчетчиков;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеПоля = ПоляДопОбработки[ИмяПараметра];
		
		// Заменяем имя параметра, если необходимо.
		Если ИмяПараметра = "addAmount1" Тогда
			ИмяПараметра = "addAmount";
		КонецЕсли;
		
		Если ИмяПараметра = "persAcc1" Тогда
			ИмяПараметра = "persAcc";
		КонецЕсли;
		
		// Добавляем реквизит и его значение в общую строку текст QR-штрихкода.
		Если ИмяПараметра = "counterVal" Тогда
			СтрокаПараметра = СтрокаПараметра + ЗначениеПоля;
		Иначе
			СтрокаПараметра = СтрокаПараметра + "|" + ИмяПараметра + "=" + ЗначениеПоля;
		КонецЕсли;
		
	КонецЦикла;
	
	// Формат кодировки текста QR.
	СтрокаQRКодаБезСлужебнойЧасти = Сред(СтрокаQRКода, Найти(СтрокаQRКода, "|"), СтрДлина(СтрокаQRКода));
	
	СтрокаQRКода                  = СтрокаСтандартаQRКода()
								  + ПараметрыФормированияПД.ФорматКодировкиТекстаQR
								  + СтрокаQRКодаБезСлужебнойЧасти;
	
	// Итоговая строка QR штрихкода.
	СтрокаQRКода = СтрокаQRКода + СтрокаПараметра;
	
КонецПроцедуры // ДополнитьСтрокуQRКодаРеквизитами()

// Заполняет реквизиты QR штрихкода данными.
//
Функция ЗаполнитьДанныеQRШтрихкода(Объект, СтруктураНастроек, ОбщиеДанные, РеквизитыQRКодаПользователя, УчитыватьДобровольноеСтрахование)
	
	СтруктураДанныхQR = Новый Структура();
	
	// Объязательные реквизиты.
	
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		СтруктураДанныхQR.Вставить("Name",        ОбщиеДанные.НаименованиеВладельцаСчетаКР);
		СтруктураДанныхQR.Вставить("PersonalAcc", ОбщиеДанные.РасчетныйСчетКР);
		СтруктураДанныхQR.Вставить("BankName",    СокрЛП(ОбщиеДанные.БанкКР));
		СтруктураДанныхQR.Вставить("BIC",         ОбщиеДанные.БИККР);
		СтруктураДанныхQR.Вставить("CorrespAcc",  ОбщиеДанные.КоррСчетКР);
	Иначе
		Если ОбщиеДанные.Свойство("ИсполнительУслуг") Тогда
			СтруктураДанныхQR.Вставить("Name",        ОбщиеДанные.ИсполнительУслуг);
			СтруктураДанныхQR.Вставить("PersonalAcc", ОбщиеДанные.РасчетныйСчетИсполнителя);
			СтруктураДанныхQR.Вставить("BankName",    ОбщиеДанные.БанкИсполнителя);
			СтруктураДанныхQR.Вставить("BIC",         ОбщиеДанные.БИКБанкаИсполнителя);
			СтруктураДанныхQR.Вставить("CorrespAcc",  ОбщиеДанные.КоррСчетБанкаИсполнителя);
		Иначе
			СтруктураДанныхQR.Вставить("Name",        СокрЛП(ОбщиеДанные.Организация));
			СтруктураДанныхQR.Вставить("PersonalAcc", ОбщиеДанные.РасчетныйСчет);
			СтруктураДанныхQR.Вставить("BankName",    СокрЛП(ОбщиеДанные.Банк));
			СтруктураДанныхQR.Вставить("BIC",         ОбщиеДанные.БИК);
			СтруктураДанныхQR.Вставить("CorrespAcc",  ОбщиеДанные.КоррСчет);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним структуру данных QR реквизитами из полученного списока реквизитов.
	Для Каждого ЭлементСписка Из РеквизитыQRКодаПользователя Цикл
		// Делаем проверку, если настройки пометки сохранены неверно.
		Если ЭлементСписка.Пометка Тогда
			СтруктураДанныхQR.Вставить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Имеются следующие коды назначений платежа по стандарту УФЭБС:
	//			01				Мобильная связь, стационарный телефон.
	//			02				Коммунальные услуги, ЖКХ.
	//			03				ГИБДД, налоги, пошлины, бюджетные платежи.
	//			04				Охранные услуги
	//			05				Услуги, оказываемые УФМС.
	//			06				ПФР
	//			07				Погашение кредитов
	//			08				Образовательные учреждения.
	//			09				Интернет и ТВ
	//			10				Электронные деньги
	//			11				Отдых и путешествия.
	//			12				Инвестиции и страхование.
	//			13				Спорт и здоровье
	//			14				Благотворительные и общественные организации.
	//			15				Прочие услуги.
	
	КодНазначенияПлатежа = "02"; // Технический код, по умолчанию "Коммунальные услуги, ЖКХ".
	
	// Заполняем структуру данных QR реквизитами пользователя и данными.
	ЗаполнитьЗначенияДополнительныхПараметровQRКода(Объект, СтруктураДанныхQR, ОбщиеДанные, СтруктураНастроек, КодНазначенияПлатежа, УчитыватьДобровольноеСтрахование);
	
	// Заполним структуру данных QR согласно представлениям.
	СтруктураПредставлений  = ПолучитьСтруктуруПредставленийИРеквизитовQR();
	
	// Для замены ключей реквизитов структуры СтруктураДанныхQR на их представления по страндарту УФЭБС
	// запомним ключи в массиве, для последующего удаления.
	МассивКлючейДляУдаления = Новый Массив;
	Для Каждого ТекРеквизит Из СтруктураДанныхQR Цикл
		Если СтруктураПредставлений.Свойство(ТекРеквизит.Ключ) Тогда
			СтруктураДанныхQR.Вставить(СтруктураПредставлений[ТекРеквизит.Ключ], ТекРеквизит.Значение);
			МассивКлючейДляУдаления.Добавить(ТекРеквизит.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ключ Из МассивКлючейДляУдаления Цикл
		СтруктураДанныхQR.Удалить(Ключ);
	КонецЦикла;
	
	Возврат СтруктураДанныхQR;
	
КонецФункции // ЗаполнитьДанныеQRШтрихкода()

// Возвращает полную структуру реквиизитов QR штрихкода с представлениями по стандарту УФЭБ.
//
Функция ПолучитьСтруктуруПредставленийИРеквизитовQR()
	
	СтруктураВозврата = Новый Структура();
	
	// Обязательные поля структуры.
	СтруктураВозврата.Вставить("Name",        "ТекстПолучателя");
	СтруктураВозврата.Вставить("PersonalAcc", "НомерСчетаПолучателя");
	СтруктураВозврата.Вставить("BankName",    "НаименованиеБанкаПолучателя");
	СтруктураВозврата.Вставить("BIC",         "БИКБанкаПолучателя");
	СтруктураВозврата.Вставить("CorrespAcc",  "СчетБанкаПолучателя");
	
	// Дополнительные поля структуры.
	СтруктураВозврата.Вставить("Sum",          "СуммаЧислом");
	СтруктураВозврата.Вставить("Purpose",      "НазначениеПлатежа");
	СтруктураВозврата.Вставить("PayeeINN",     "ИННПолучателя");
	СтруктураВозврата.Вставить("PayerINN",     "ИННПлательщика");
	СтруктураВозврата.Вставить("DrawerStatus", "СтатусСоставителя");
	СтруктураВозврата.Вставить("KPP",          "КПППолучателя");
	СтруктураВозврата.Вставить("CBC",          "КодБК");
	СтруктураВозврата.Вставить("OKTMO",        "КодОКТМО");
	СтруктураВозврата.Вставить("PaytReason",   "ПоказательОснования");
	СтруктураВозврата.Вставить("TaxPeriod",    "ПоказательПериода");
	СтруктураВозврата.Вставить("DocNo",        "ПоказательНомера");
	СтруктураВозврата.Вставить("DocDate",      "ПоказательДаты");
	СтруктураВозврата.Вставить("TaxPaytKind",  "ПоказательТипа");
	
	// Прочие дополнительные поля.
	СтруктураВозврата.Вставить("lastName",           "ФамилияПлательщика");
	СтруктураВозврата.Вставить("firstName",          "ИмяПлательщика");
	СтруктураВозврата.Вставить("middleName",         "ОтчествоПлательщика");
	СтруктураВозврата.Вставить("payerAddress",       "АдресПлательщика");
	СтруктураВозврата.Вставить("personalAccount",    "ЛицевойСчетБюджетногоПолучателя");
	СтруктураВозврата.Вставить("docIdx",             "ИндексПлатежногоДокумента");
	СтруктураВозврата.Вставить("pensAcc",            "СНИЛС");
	СтруктураВозврата.Вставить("contract",           "НомерДоговора");
	СтруктураВозврата.Вставить("persAcc",            "НомерЛицевогоСчетаПлательщика");
	СтруктураВозврата.Вставить("flat",               "НомерКвартиры");
	СтруктураВозврата.Вставить("phone",              "НомерТелефона");
	СтруктураВозврата.Вставить("payerIdType",        "ВидПлательщика");
	СтруктураВозврата.Вставить("payerIdNum",         "НомерПлательщика");
	СтруктураВозврата.Вставить("childFio",           "ФИОРебенка");
	СтруктураВозврата.Вставить("birthDate",          "ДатаРождения");
	СтруктураВозврата.Вставить("paymTerm",           "СрокПлатежа");
	СтруктураВозврата.Вставить("paymPeriod",         "ПериодОплаты");
	СтруктураВозврата.Вставить("category",           "ВидПлатежа");
	СтруктураВозврата.Вставить("serviceName",        "КодУслуги");
	СтруктураВозврата.Вставить("counterId",          "НомерПрибораУчета");
	СтруктураВозврата.Вставить("counterVal",         "ПоказаниеПрибораУчета");
	СтруктураВозврата.Вставить("quittId",            "НомерИзвещения");
	СтруктураВозврата.Вставить("quittDate",          "ДатаИзвещения");
	СтруктураВозврата.Вставить("instNum",            "НомерУчреждения");
	СтруктураВозврата.Вставить("classNum",           "НомерГруппы");
	СтруктураВозврата.Вставить("specFio",            "ФИОПреподавателя");
	СтруктураВозврата.Вставить("addAmount",          "СуммаСтраховки");
	СтруктураВозврата.Вставить("ruleId",             "НомерПостановления");
	СтруктураВозврата.Вставить("execId",             "НомерИсполнительногоПроизводства");
	СтруктураВозврата.Вставить("regType",            "КодВидаПлатежа");
	СтруктураВозврата.Вставить("uin",                "ИдентификаторНачисления");
	СтруктураВозврата.Вставить("TechCode",           "ТехническийКод");
	
	Возврат СтруктураВозврата;
	
КонецФункции // ПолучитьСтруктуруПредставленийИРеквизитовQR()

// Функция заполняет полный список дополнительных Реквизитов QR-щтирхкода".
//
Функция ПолучитьПолныйСписокДополнительныхРеквизитовQRКода() Экспорт
	
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить("Sum",              "Сумма платежа, в копейках"                                    + " [Sum]");
	СписокДляВозврата.Добавить("Sum1",             "Сумма начисления, в копейках"                                 + " [Sum1]");
	СписокДляВозврата.Добавить("Sum2",             "Сумма задолженности, в копейках"                              + " [Sum2]");
	СписокДляВозврата.Добавить("Purpose",          "Наименование платежа (назначение)"                            + " [Purpose]");
	СписокДляВозврата.Добавить("Purpose1",         "Наименование платежа (начисления)"                            + " [Purpose1]");
	СписокДляВозврата.Добавить("Purpose2",         "Наименование платежа (задолженность)"                         + " [Purpose2]");
	СписокДляВозврата.Добавить("PayeeINN",         "ИНН получателя платежа"                                       + " [PayeeINN]");
	СписокДляВозврата.Добавить("KPP",              "КПП получателя платежа"                                       + " [KPP]");
	СписокДляВозврата.Добавить("PayerINN",         "ИНН плательщика"                                              + " [PayerINN]");
	СписокДляВозврата.Добавить("persAcc",          "Наименование лицевого счета плательщика в организации"        + " [persAcc]");
	СписокДляВозврата.Добавить("lastName",         "Фамилия плательщика"                                          + " [lastName]");
	СписокДляВозврата.Добавить("firstName",        "Имя плательщика"                                              + " [firstName]");
	СписокДляВозврата.Добавить("middleName",       "Отчество плательщика"                                         + " [middleName]");
	СписокДляВозврата.Добавить("FIO",              "ФИО"                                                          + " [FIO]");
	СписокДляВозврата.Добавить("birthDate",        "Дата рождения"                                                + " [birthDate]");
	СписокДляВозврата.Добавить("payerAddress",     "Адрес плательщика"                                            + " [payerAddress]");
	СписокДляВозврата.Добавить("pensAcc",          "СНИЛС"                                                        + " [pensAcc]");
	СписокДляВозврата.Добавить("contract",         "Номер договора"                                               + " [contract]");
	СписокДляВозврата.Добавить("flat",             "Номер квартиры"                                               + " [flat]");
	СписокДляВозврата.Добавить("phone",            "Номер телефона"                                               + " [phone]");
	СписокДляВозврата.Добавить("counterId",        "Номер прибора учета"                                          + " [counterId]");
	СписокДляВозврата.Добавить("counterVal",       "Показание прибора учета "                                     + " [counterVal]");
	СписокДляВозврата.Добавить("paymTerm",         "Срок платежа/дата выставления счета"                          + " [paymTerm]");
	СписокДляВозврата.Добавить("TechCode",         "Технический код"                                              + " [TechCode]");
	СписокДляВозврата.Добавить("addAmount",        "Сумма начисления пени, в копейках"                            + " [addAmount]");
	СписокДляВозврата.Добавить("addAmount1",       "Сумма начисления пени с учетом нач.сальдо пени, в копейках"   + " [addAmount]");
	СписокДляВозврата.Добавить("paymPeriod",       "Период оплаты"                                                + " [paymPeriod]");
	СписокДляВозврата.Добавить("persAcc1",         "Идентификатор лицевого счета плательщика в организации"       + " [persAcc]");
	СписокДляВозврата.Добавить("category",         "Вид платежа (код организации)"                                + " [category]");
	СписокДляВозврата.Добавить("serviceName",      "Код услуги"                                                   + " [serviceName]");
	СписокДляВозврата.Добавить("OKTMO",            "ОКТМО"                                                        + " [OKTMO]");
	
	Возврат СписокДляВозврата;
	
КонецФункции // ПолучитьПолныйСписокДополнительныхРеквизитовQRКода()

// Получает представление дополнительного параметра для замены в тексте Наименования платежа (назначение).
//
// Параметры:
//  ТекущийПараметр - Строка - имя параметра.
//
Функция ПредставлениеТекущегоПараметраДляЗаменыВСтроке(ТекущийПараметр)
	
	ПредставлениеПараметра = "[" + ТекущийПараметр + "]";
	
	Возврат ПредставлениеПараметра;
	
КонецФункции

// Процедура заполняет значения дополнительных параметров QR кода.
//
// Параметры:
//  СтруктураДанныхQR - структура дополнительных параметров QR кода, используемые пользователем.
//  Параметры - структура обязательных параметров QR кода.
//  ОбщиеДанные - структура данных по лицевому счету.
//  СтруктураНастроек - структура настроек отчета.
//  КодНазначенияПлатежа - код платежа.
//
Процедура ЗаполнитьЗначенияДополнительныхПараметровQRКода(Объект, СтруктураДанныхQR, ОбщиеДанные, СтруктураНастроек, КодНазначенияПлатежа, УчитыватьДобровольноеСтрахование)
	
	Для Каждого ТекущийЭлемент Из СтруктураДанныхQR Цикл
		
		ИмяПараметра = ТекущийЭлемент.Ключ;
		
		Если ИмяПараметра = "Sum" И ЗначениеЗаполнено(ОбщиеДанные.ВсегоКОплатеДляШК) Тогда
			СтруктураДанныхQR[ИмяПараметра] = Формат(?(УчитыватьДобровольноеСтрахование, ОбщиеДанные.ВсегоКОплатеСДобровольнымСтрахованиемДляШК, ОбщиеДанные.ВсегоКОплатеДляШК), "ЧГ=0");
		КонецЕсли;
		
		Если ИмяПараметра = "Purpose" Тогда
			
			Если ОбщиеДанные.КвитанцияНаКР Тогда
				НаименованиеПлатежаНазначение = СтруктураНастроек.ПараметрыФормированияПД.НаименованиеПлатежаНазначениеПоКР;
			Иначе
				НаименованиеПлатежаНазначение = СтруктураНастроек.ПараметрыФормированияПД.НаименованиеПлатежаНазначениеПоОсн;
			КонецЕсли;
			
			СписокПараметровДляЗамены = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.ПолучитьСписокПараметровДляТекстаНаименованиеПлатежаНазначение();
			
			Для Каждого ТекущийПараметрСписка Из СписокПараметровДляЗамены Цикл
				ТекущийПараметр        = ТекущийПараметрСписка.Значение;
				ПредставлениеПараметра = ПредставлениеТекущегоПараметраДляЗаменыВСтроке(ТекущийПараметр);
				Если ТекущийПараметр = "ПериодОплатыМесяцСтрокойГод" Тогда
					НаименованиеПлатежаНазначение = СтрЗаменить(НаименованиеПлатежаНазначение, ПредставлениеПараметра, Формат(СтруктураНастроек.ПериодПросмотра, "ДФ='ММММ гггг'"));
				ИначеЕсли ТекущийПараметр = "ПериодОплатыМесяцЧисломГод" Тогда
					НаименованиеПлатежаНазначение = СтрЗаменить(НаименованиеПлатежаНазначение, ПредставлениеПараметра, Формат(СтруктураНастроек.ПериодПросмотра, "ДФ=ММ.гггг"));
				КонецЕсли;
			КонецЦикла;
			
			СтруктураДанныхQR[ИмяПараметра] = НаименованиеПлатежаНазначение;
			
		КонецЕсли;
		
		Если ИмяПараметра = "KPP" Тогда
			Если ОбщиеДанные.КвитанцияНаКР И НЕ ПустаяСтрока(ОбщиеДанные.КППВладельцаСчетаКР) Тогда
				СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.КППВладельцаСчетаКР);
			ИначеЕсли НЕ ОбщиеДанные.КвитанцияНаКР Тогда
				Если ОбщиеДанные.Свойство("ИсполнительУслуг") И НЕ ПустаяСтрока(ОбщиеДанные.КППИсполнителя) Тогда
					СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.КППИсполнителя);
				ИначеЕсли НЕ ПустаяСтрока(ОбщиеДанные.КППОрганизации) Тогда
					СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.КППОрганизации);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПараметра = "PayeeINN" Тогда
			Если ОбщиеДанные.КвитанцияНаКР И НЕ ПустаяСтрока(ОбщиеДанные.ИННВладельцаСчетаКР) Тогда
				СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.ИННВладельцаСчетаКР);
			ИначеЕсли НЕ ОбщиеДанные.КвитанцияНаКР Тогда
				Если ОбщиеДанные.Свойство("ИсполнительУслуг") И НЕ ПустаяСтрока(ОбщиеДанные.ИННИсполнителя) Тогда
					СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.ИННИсполнителя);
				ИначеЕсли НЕ ПустаяСтрока(ОбщиеДанные.ИННОрганизации) Тогда
					СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.ИННОрганизации);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПараметра = "OKTMO" Тогда
			СтруктураДанныхQR[ИмяПараметра] = ОбщиеДанные.ОКТМО;
		КонецЕсли;
		
		// ФИО
		Если ИмяПараметра = "lastName" ИЛИ ИмяПараметра = "firstName" ИЛИ ИмяПараметра = "middleName" Тогда
			Если ОбщиеДанные.ВладелецЖилец ИЛИ ОбщиеДанные.ОтветственныйКонтрагентФизЛицо Тогда
				Если ИмяПараметра = "lastName" И ЗначениеЗаполнено(ОбщиеДанные.ФамилияОтветственного) Тогда
					СтруктураДанныхQR[ИмяПараметра] = ОбщиеДанные.ФамилияОтветственного;
				ИначеЕсли ИмяПараметра = "middleName" И ЗначениеЗаполнено(ОбщиеДанные.ОтчествоОтветственного) Тогда
					СтруктураДанныхQR[ИмяПараметра] = ОбщиеДанные.ОтчествоОтветственного;
				ИначеЕсли ИмяПараметра = "firstName" И ЗначениеЗаполнено(ОбщиеДанные.ИмяОтветственного) Тогда
					СтруктураДанныхQR[ИмяПараметра] = ОбщиеДанные.ИмяОтветственного;
				КонецЕсли;
			ИначеЕсли ИмяПараметра = "firstName" Тогда
				СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.ФИО);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПараметра = "PayerINN" ИЛИ ИмяПараметра = "birthDate" ИЛИ ИмяПараметра = "pensAcc" ИЛИ ИмяПараметра = "phone" Тогда
			Если Не ОбщиеДанные.ВладелецЖилец И ТипЗнч(ОбщиеДанные.ФИО) = Тип("СправочникСсылка.Контрагенты") Тогда
				Контрагент = ОбщиеДанные.ФИО;
				Если ИмяПараметра = "PayerINN" И ЗначениеЗаполнено(Контрагент.ИНН) Тогда
					СтруктураДанныхQR[ИмяПараметра] = СокрЛП(Контрагент.ИНН);
				ИначеЕсли ИмяПараметра = "phone" И ЗначениеЗаполнено(ОбщиеДанные.ЛицевойСчет.Телефон) Тогда
					СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.ЛицевойСчет.Телефон);
				КонецЕсли;
			ИначеЕсли ОбщиеДанные.ВладелецЖилец Тогда
				Если ИмяПараметра = "PayerINN" И ЗначениеЗаполнено(ОбщиеДанные.ИННВладельцаЖильца) Тогда
					СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.ИННВладельцаЖильца);
				ИначеЕсли ИмяПараметра = "birthDate" И ЗначениеЗаполнено(ОбщиеДанные.ДатаРожденияВладельца) Тогда
					СтруктураДанныхQR[ИмяПараметра] = Формат(ОбщиеДанные.ДатаРожденияВладельца, "ДФ=dd.MM.yyyy");
				ИначеЕсли ИмяПараметра = "pensAcc" И ЗначениеЗаполнено(ОбщиеДанные.СтраховойНомерПФРВладельца) Тогда
					СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.СтраховойНомерПФРВладельца);
				ИначеЕсли ИмяПараметра = "phone" И ЗначениеЗаполнено(ОбщиеДанные.ТелефонВладельцаЖильца) Тогда
					СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.ТелефонВладельцаЖильца);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПараметра = "payerAddress" Тогда
			АдресПомещения = СокрЛП(ОбщиеДанные.Адрес);
			Если СтруктураНастроек.ПараметрыФормированияПД.ИсключитьИзАдресаПомещенияСимволыНомерИТочка Тогда
				АдресПомещения = СтрЗаменить(АдресПомещения, "№", "");
				АдресПомещения = СтрЗаменить(АдресПомещения, ".", "");
			КонецЕсли;
			СтруктураДанныхQR[ИмяПараметра] = АдресПомещения;
		КонецЕсли;
		
		Если ИмяПараметра = "contract" Тогда
			СведенияДляВзаиморасчетов = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(
									ОбщиеДанные.ЛицевойСчет, ОбщиеДанные.Организация, КонецМесяца(СтруктураНастроек.ПериодПросмотра));
			Если ЗначениеЗаполнено(СведенияДляВзаиморасчетов.Договор.Номер) Тогда
				СтруктураДанныхQR[ИмяПараметра] = СокрЛП(СведенияДляВзаиморасчетов.Договор.Номер);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПараметра = "persAcc" Тогда
			СтруктураДанныхQR[ИмяПараметра] = СокрЛП(Объект);
		КонецЕсли;
		
		Если ИмяПараметра = "flat" Тогда
			СтруктураДанныхQR[ИмяПараметра] = ОбщиеДанные.Помещение.Наименование;
		КонецЕсли;

		Если ИмяПараметра = "paymTerm" И ЗначениеЗаполнено(ОбщиеДанные.СрокОплатыДата) Тогда
			СтруктураДанныхQR[ИмяПараметра] = ОбщиеДанные.СрокОплатыДата;
		КонецЕсли;
		
		Если ИмяПараметра = "paymPeriod" И ЗначениеЗаполнено(СтруктураНастроек.ПериодПросмотра) Тогда
			ФорматПериодаОплаты = СтруктураНастроек.ПараметрыФормированияПД.ФорматПериодаОплаты;
			Если ФорматПериодаОплаты = "ММГГГГ" Тогда
				ФорматПериодаОплаты = "ММгггг";
			ИначеЕсли ФорматПериодаОплаты = "ММГГММГГ" Тогда
				ФорматПериодаОплаты = "ММггММгг";
			ИначеЕсли ФорматПериодаОплаты = "ММГГ" Тогда
				ФорматПериодаОплаты = "ММгг";
			ИначеЕсли ФорматПериодаОплаты = "ММ.ГГГГ" Тогда
				ФорматПериодаОплаты = "ММ.гггг";
			Иначе
				ФорматПериодаОплаты = "ММгггг"; // по умолчанию.
			КонецЕсли;
			СтруктураДанныхQR[ИмяПараметра] = Формат(СтруктураНастроек.ПериодПросмотра, "ДФ=" + ФорматПериодаОплаты);
		КонецЕсли;
		
		Если ИмяПараметра = "TechCode" Тогда
			СтруктураДанныхQR[ИмяПараметра] = КодНазначенияПлатежа;
		КонецЕсли;
		
		Если ИмяПараметра = "category" Тогда
			Если ОбщиеДанные.КвитанцияНаКР И ЗначениеЗаполнено(СтруктураНастроек.ПараметрыФормированияПД.КодОрганизацииДляQRКодаПоУслугамКР)Тогда
				СтруктураДанныхQR[ИмяПараметра] = СтруктураНастроек.ПараметрыФормированияПД.КодОрганизацииДляQRКодаПоУслугамКР;
			ИначеЕсли НЕ ОбщиеДанные.КвитанцияНаКР И ЗначениеЗаполнено(СтруктураНастроек.ПараметрыФормированияПД.КодОрганизацииДляQRКодаПоОсн) Тогда
				СтруктураДанныхQR[ИмяПараметра] = СтруктураНастроек.ПараметрыФормированияПД.КодОрганизацииДляQRКодаПоОсн;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПараметра = "serviceName" Тогда
			Если ОбщиеДанные.КвитанцияНаКР И ЗначениеЗаполнено(СтруктураНастроек.ПараметрыФормированияПД.КодУслугиДляШтрихКодаПоКР) Тогда
				СтруктураДанныхQR[ИмяПараметра] = СтруктураНастроек.ПараметрыФормированияПД.КодУслугиДляШтрихКодаПоКР;
			ИначеЕсли НЕ ОбщиеДанные.КвитанцияНаКР И ЗначениеЗаполнено(СтруктураНастроек.ПараметрыФормированияПД.КодУслугиДляШтрихКодаПоОсн) Тогда
				СтруктураДанныхQR[ИмяПараметра] = СтруктураНастроек.ПараметрыФормированияПД.КодУслугиДляШтрихКодаПоОсн;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначенияДополнительныхПараметровQRКода()

// Первые 6 символов текста QR-кода, регламентированных согласно "Стандартам финансовых операций» — ГОСТ Р 56042-2014.
//
//
// Возвращаемое значение:
//  Строка – строка формата [Идентификатор] + [Версия] QR-кода.
//
Функция СтрокаСтандартаQRКода() Экспорт
	
	// 1. Идентификатор формата
	// Элемент содержит предопределенное значение "ST", означающее, что платеж представлен в формате,
	// описанном в ГОСТ Р 56042-2014, и его можно обрабатывать. Если элемент содержит значение, отличное от указанного,
	// то это означает, что формат "чужой", и он обрабатываться не должен.
	
	// 2. Версия
	// Версия формата. В текущей версии заполняется фиксированным значением "0001". Данное значение будет изменяться
	// в случае выхода новых версий стандарта. Программное обеспечение, используемое в приеме платежей,
	// интерпретирует (обрабатывает) форматы определенных версий.
	
	Возврат "ST" + "0001";
	
КонецФункции // ОбработатьИРазобратьQRКод()

// Возвращает двоичные данные для формирования QR кода.
// Аналог функции "ДанныеQRКода()" в ОМ "УправлениеПечатью".
//
// Параметры:
//  QRСтрока         - Строка - данные, которые необходимо разместить в QR-коде.
//
//  УровеньКоррекции - Число - уровень погрешности изображения при котором данный QR-код все еще возможно 100%
//                             распознать.
//                     Параметр должен иметь тип целого и принимать одно из 4 допустимых значений:
//                     0(7% погрешности), 1(15% погрешности), 2(25% погрешности), 3(35% погрешности).
//
//  Размер           - Число - определяет длину стороны выходного изображения в пикселях.
//                     Если минимально возможный размер изображения больше этого параметра - код сформирован не будет.
//
// Возвращаемое значение:
//  ДвоичныеДанные  - буфер, содержащий байты PNG-изображения QR-кода.
//
Функция ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер) Экспорт
	
	Попытка
		ДвоичныеДанныеКартинки = УправлениеПечатью.ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер);
	Исключение
		ДвоичныеДанныеКартинки = Неопределено;
	КонецПопытки;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции // ДанныеQRКода()

// Заполняет сведения для вывода штрихкода для указанного поставщика.
Функция ПодготовитьДанныеДляФормированияШтрихкодаПоСтрокеПоставщика(СтруктураНастроек, ОбщиеДанные, СтрокаПоставщика) Экспорт
	
	врСтруктураНастроек      = УПЖКХ_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуруЗаполнениемЗначений(СтруктураНастроек);
	врОбщиеДанные            = УПЖКХ_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуруЗаполнениемЗначений(ОбщиеДанные);
	
	врСтруктураНастроек.ИсполнительРасчетов = СтрокаПоставщика.Поставщик;
	
	Если СтрокаПоставщика.ЭтоСведенияПоКапРемонту Тогда
		врОбщиеДанные.Вставить("ИспользоватьРСПоКапремонту", Истина);
		врОбщиеДанные.Вставить("КвитанцияНаКР",              Истина);
	КонецЕсли;
	
	врОбщиеДанные.ВсегоКОплатеДляШК = СтрокаПоставщика.ВсегоКОплате;
	врОбщиеДанные.Задолженность     = СтрокаПоставщика.ВсегоКОплате;
	врОбщиеДанные.ИтогоНачислено    = СтрокаПоставщика.СуммаНачисления;
	
	Если СтруктураНастроек.УчитыватьПени
	   И (НЕ СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням ИЛИ ОбщиеДанные.КвитанцияПоПени) Тогда
		врОбщиеДанные.КОплатеПениДляШК                = СтрокаПоставщика.СуммаПени;
		врОбщиеДанные.КОплатеПениСУчетомНачСальдоПени = СтрокаПоставщика.СуммаПениДляQRСУчетомНачСальдоПени;
	Иначе
		врОбщиеДанные.КОплатеПениДляШК                = 0;
		врОбщиеДанные.КОплатеПениСУчетомНачСальдоПени = 0;
	КонецЕсли;
	
	врОбщиеДанные.Вставить("РасчетныйСчетИсполнителя", СтрокаПоставщика.РасчетныйСчет);
	врОбщиеДанные.Вставить("БанкИсполнителя",          СтрокаПоставщика.Банк);
	врОбщиеДанные.Вставить("КоррСчетБанкаИсполнителя", СтрокаПоставщика.КоррСчет);
	врОбщиеДанные.Вставить("БИКБанкаИсполнителя",      СтрокаПоставщика.БИК);
	врОбщиеДанные.Вставить("ИННИсполнителя",           СтрокаПоставщика.ИНН);
	врОбщиеДанные.Вставить("КППИсполнителя",           СтрокаПоставщика.КПП);
	врОбщиеДанные.Вставить("ИсполнительУслуг",         СтрокаПоставщика.НаименованиеПоставщика);
	
	врОбщиеДанные.Вставить("ПолучательПлатежа",        врОбщиеДанные.ИсполнительУслуг);
	врОбщиеДанные.Вставить("ИННПолучателя",            врОбщиеДанные.ИННИсполнителя);
	врОбщиеДанные.Вставить("КПППолучателя",            врОбщиеДанные.КППИсполнителя);
	врОбщиеДанные.Вставить("РасчСчетПолучателя",       врОбщиеДанные.РасчетныйСчетИсполнителя);
	врОбщиеДанные.Вставить("БанкПолучателя",           врОбщиеДанные.БанкИсполнителя);
	врОбщиеДанные.Вставить("КоррСчетПолучателя",       врОбщиеДанные.КоррСчетБанкаИсполнителя);
	врОбщиеДанные.Вставить("БИКПолучателя",            врОбщиеДанные.БИКБанкаИсполнителя);
	
	// Если поставщик - не управляющая организация, то ОКТМО выводить не нужно.
	Если НЕ СтрокаПоставщика.Поставщик = ОбщиеДанные.ОрганизацияОбъект Тогда
		врОбщиеДанные.ОКТМО = "";
	КонецЕсли;
	
	Возврат Новый Структура("СтруктураНастроек, ОбщиеДанные", врСтруктураНастроек, врОбщиеДанные);
	
КонецФункции

// Проверяет корректность настроек для текущего QR-кода.
//
Функция ПроверитьНастройкиДляQRШК(ВидШтрихкодаQR, СтруктураНастроек, КвитанцияНаКР, ЭтоQRДляСитикард = Ложь) Экспорт
	
	НастройкиФормированияКорректны = Ложь;
	
	ПараметрыФормированияПД = СтруктураНастроек.ПараметрыФормированияПД;
	ПараметрыФормированияПД.ВидШтрихкода = ВидШтрихкодаQR;
	
	Если ЭтоQRДляСитикард Тогда
		Если КвитанцияНаКР Тогда
			
			НастройкиФормированияКорректны = СтруктураНастроек.НастройкиQRДляСитикардПоКРКорректны;
			
			// Ситикард. Если необходимость вывода QR-кода по кап.ремонту ранее не проверяли и настройки некорректны,
			// то сообщаем об этом ровно один раз.
			Если НЕ СтруктураНастроек.QRДляСитикардПоКРИспользуется Тогда
				СтруктураНастроек.QRДляСитикардПоКРИспользуется = Истина;
				
				Если НЕ НастройкиФормированияКорректны Тогда
					ВывестиСообщениеОНекорректныхНастройкахШК(СтруктураНастроек.ТекстОшибкиНастроекQRДляОнлайнОплатыКР, ПараметрыФормированияПД.КлючЗаписиРезультат);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			НастройкиФормированияКорректны = СтруктураНастроек.НастройкиQRДляСитикардПоОснКорректны;
			
			// Ситикард. Если необходимость вывода QR-кода по основным услугам ранее не проверяли и настройки
			// некорректны, то сообщаем об этом ровно один раз.
			Если НЕ СтруктураНастроек.QRДляСитикардПоОснИспользуется Тогда
				СтруктураНастроек.QRДляСитикардПоОснИспользуется = Истина;
				
				Если НЕ НастройкиФормированияКорректны Тогда
					ВывестиСообщениеОНекорректныхНастройкахШК(СтруктураНастроек.ТекстОшибкиНастроекQRДляОнлайнОплатыОсн, ПараметрыФормированияПД.КлючЗаписиРезультат);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если КвитанцияНаКР Тогда
			
			НастройкиФормированияКорректны = СтруктураНастроек.НастройкиQRПоКРКорректны;
			
			// Если необходимость вывода QR-кода по кап.ремонту ранее не проверяли и настройки некорректны,
			// то сообщаем об этом ровно один раз.
			Если НЕ СтруктураНастроек.QRШКПоКРИспользуется Тогда
				СтруктураНастроек.QRШКПоКРИспользуется = Истина;
				
				Если НЕ НастройкиФормированияКорректны Тогда
					ВывестиСообщениеОНекорректныхНастройкахШК(СтруктураНастроек.ТекстОшибкиНастроекДляQRШККР, ПараметрыФормированияПД.КлючЗаписиРезультат);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			НастройкиФормированияКорректны = СтруктураНастроек.НастройкиQRПоОснКорректны;
			
			// Если необходимость вывода QR-кода по основным услугам ранее не проверяли и настройки
			// некорректны, то сообщаем об этом ровно один раз.
			Если НЕ СтруктураНастроек.QRШКПоОснИспользуется Тогда
				СтруктураНастроек.QRШКПоОснИспользуется = Истина;
				
				Если НЕ НастройкиФормированияКорректны Тогда
					ВывестиСообщениеОНекорректныхНастройкахШК(СтруктураНастроек.ТекстОшибкиНастроекДляQRШКОсн, ПараметрыФормированияПД.КлючЗаписиРезультат);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкиФормированияКорректны;
	
КонецФункции

// Функция возвращает факт подключения компоненты штрихкода.
Функция КомпонентаФормированияQRКодаПодключена() Экспорт
	
	КомпонентаQRПодключена = Ложь;
	
	QRCodeGenerator = Неопределено;
	ТекстОшибки     = НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации QR-кода'");
	
	Попытка
		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиQRКода", "QR") Тогда
			QRCodeGenerator        = Новый("AddIn.QR.QRCodeExtension");
			КомпонентаQRПодключена = Истина;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки);
	КонецПопытки;
	
	Возврат КомпонентаQRПодключена;
	
КонецФункции // КомпонентаФормированияQRКода()

#КонецОбласти

#Область ФормированиеQRкодаДляСитикард

// Функция формирует текст для QR-штрихкода для оплаты в Ситикард.
//
// Параметры:
//  ОбщиеДанные			 - Структура	 - общие данные по лицевому счету.
//  СтруктураНастроек	 - Структура	 - настройки квитанции.
// 
// Возвращаемое значение:
//   Строка - строка гиперссылки в формате:
// 					https://citycard.ru/qr/ид_провайдера/лицевой_счет/
// 					?summ=сумма_квитанции
//
Функция СформироватьТекстQRШтрихкодаДляСитикард(ОбщиеДанные, СтруктураНастроек) Экспорт
	
	Разделитель = "&"; // разделитель между параметрами гиперссылки.
	
	// [ид_провайдера]
	
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		ИДПровайдера = СтруктураНастроек.КодОрганизацииВСитикардПоКр;
	Иначе
		ИДПровайдера = СтруктураНастроек.КодОрганизацииВСитикардПоОсн;
	КонецЕсли;
	
	// [лицевой_счет]
	
	ЛицевойСчет               = "";
	НаименованиеЛицевогоСчета = СтрЗаменить(ОбщиеДанные.НаименованиеЛицевогоСчета, "л/с №", "");
	
	ДлинаНаименования = СтрДлина(НаименованиеЛицевогоСчета);
	
	Для Позиция = 1 По ДлинаНаименования Цикл
		
		Символ           = Сред(НаименованиеЛицевогоСчета, Позиция, 1);
		ПодходящийСимвол = Ложь;
		КодСимвола       = КодСимвола(Символ);
		
		Если (КодСимвола >= 48 И КодСимвола <= 57)                                                                            // 0..9
		 ИЛИ ((КодСимвола >= 1040 И КодСимвола <= 1071) ИЛИ (КодСимвола >= 1072 И КодСимвола <= 1103) ИЛИ НРег(Символ) = "ё") // кириллица: А..Я ИЛИ а..я ИЛИ ё
		 ИЛИ ((КодСимвола >= 65 И КодСимвола <= 90) ИЛИ (КодСимвола >= 97 И КодСимвола <= 122)) Тогда                         // латиница: A..F ИЛИ a..z
			
			ПодходящийСимвол = Истина;
			
		КонецЕсли;
		
		Если ПодходящийСимвол Тогда
			ЛицевойСчет = ЛицевойСчет + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавляем лидирующие нули до 4 символов номера л/с, если в номере л/с меньше 4 символов.
	
	ЛицевойСчет = УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(ЛицевойСчет, 4);
	
	// [сумма_квитанции]
	
	// Сумма в копейках:
	СуммаКвитанции = ОбщиеДанные.ВсегоКОплатеДляШК * 100;
	
	// Удаляем символы "Неразрывный пробел" в числовом значении и преобразуем в текст для корректного вывода в текст гиперссылки.
	СуммаКвитанции = "summ=" + СтрЗаменить(СуммаКвитанции, Символы.НПП, "");
	
	// Текст гиперссылки:
	
	ТекстСсылки = "https://citycard.ru/qr/" + ИДПровайдера + "/" + ЛицевойСчет + "/"	// основня часть гиперссылки.
				+ "?"+ СуммаКвитанции;													// параметры гиперссылки.
	
	Возврат КодироватьСтроку(ТекстСсылки, СпособКодированияСтроки.URLВКодировкеURL);
	
КонецФункции // СформироватьТекстQRШтрихкодаДляСитикард()

#КонецОбласти // ФормированиеQRкода

#Область Обработчики_проверки_заполнения_параметров_штрихкода

// Проверяет корректное заполнение настроек в РС "Настройки формирования платежного документа" для формирования
// QR-штрихкода для онлайн-оплаты.
//
// Параметры:
//  СтруктураНастроек - Структура - структура настроек.
//  КвитанцияНаКР	  - Булево, Неопределено - необязательный параметр, если:
//								ИСТИНА			- проверяются настройки для штрихкодов по услугам кап.ремонта;
//								ЛОЖЬ			- проверяются настройки для штрихкодов по услугам НЕ кап.ремонта (основным услугам);
//								НЕОПРЕДЕЛЕНО	- проверяются настройки для штрихкодов по основным услугам и услугам кап.ремонта.
// 
// Возвращаемое значение:
//  Булево - определяет факт корректного заполнения параметров QR-штрихкода в РС "Настройки формирования платежного документа".
//
Функция НастройкиQRДляОнлайнОплатыКорректны(СтруктураНастроек, КвитанцияНаКР = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	НастройкаФормированияПД                  = СтруктураНастроек.ПараметрыФормированияПД;
	ВедетсяРаздельныйУчетПоУслугамКапремонта = СтруктураНастроек.ВедетсяРаздельныйУчетПоУслугамКапремонта;
	ОсновнойТекстОшибки                      = "Не сформированы одномерные штрихкоды. Нажмите на это сообщение для перехода в ""Настройки формирования платежного документа"": ";
	ТекстОшибки                              = "";
	
	Если КвитанцияНаКР = Неопределено ИЛИ КвитанцияНаКР = Ложь
	   И НастройкаФормированияПД.ВыводитьQRштрихкодДляСитикардПоОсн
	   И ПустаяСтрока(НастройкаФормированияПД.КодОрганизацииВСитикардПоОсн) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
							+ "На закладке ""Штрихкод для онлайн-оплаты"" необходимо указать ""Код организации в системе онлайн-оплаты"".";
	КонецЕсли;
	
	Если КвитанцияНаКР = Неопределено
	 ИЛИ (КвитанцияНаКР = Истина И НастройкаФормированияПД.ВыводитьQRштрихкодДляСитикардПоКР И ПустаяСтрока(НастройкаФормированияПД.КодОрганизацииВСитикардПоКР)) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
							+ "На закладке ""Штрихкод для онлайн-оплаты"" необходимо указать ""Код организации в системе онлайн-оплаты по кап.ремонту"".";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Отказ = Истина;
		ТекстОшибки = ОсновнойТекстОшибки + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
	Если КвитанцияНаКР Тогда
		СтруктураНастроек.Вставить("ТекстОшибкиНастроекQRДляОнлайнОплатыКР", ТекстОшибки);
	Иначе
		СтруктураНастроек.Вставить("ТекстОшибкиНастроекQRДляОнлайнОплатыОсн", ТекстОшибки);
	КонецЕсли;
	
	Возврат Не Отказ; // возвращаем обратное значение, так как функция определяет корректное заполнение настроек, а параметр "Отказ" определяет ошибку.
	
КонецФункции

// Проверяет корректное заполнение настроек в РС "Настройки формирования платежного документа" для формирования QR-штрихкода.
//
// Параметры:
//  СтруктураНастроек - Структура - структура настроек.
//  КвитанцияНаКР	  - Булево, Неопределено - необязательный параметр, если:
//								ИСТИНА			- проверяются настройки для штрихкодов по услугам кап.ремонта;
//								ЛОЖЬ			- проверяются настройки для штрихкодов по услугам НЕ кап.ремонта (основным услугам);
//								НЕОПРЕДЕЛЕНО	- проверяются настройки для штрихкодов по основным услугам и услугам кап.ремонта.
// 
// Возвращаемое значение:
//  Булево - определяет факт корректного заполнения параметров QR-штрихкода в РС "Настройки формирования платежного документа".
//
Функция НастройкиДляQRШККорректны(СтруктураНастроек, КвитанцияНаКР = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	НастройкаФормированияПД                  = СтруктураНастроек.ПараметрыФормированияПД;
	ВедетсяРаздельныйУчетПоУслугамКапремонта = СтруктураНастроек.ВедетсяРаздельныйУчетПоУслугамКапремонта;
	ОсновнойТекстОшибки                      = "Не сформированы одномерные штрихкоды. Нажмите на это сообщение для перехода в ""Настройки формирования платежного документа"": ";
	ТекстОшибки                              = "";
	
	Если НастройкаФормированияПД.ВариантОпределенияФорматаШтрихкода = Перечисления.КВП_ВариантыОпределенияФорматаШтрихкода.ПоУказаннымНастройкам Тогда
		
		Если КвитанцияНаКР = Неопределено ИЛИ КвитанцияНаКР = Ложь Тогда
			
			ДополнительныеРеквизитыQRКодаПоОсн = НастройкаФормированияПД.ДополнительныеРеквизитыQRКодаПоОсн.Получить();
			
			Если ТипЗнч(ДополнительныеРеквизитыQRКодаПоОсн) = Тип("СписокЗначений") Тогда
				
				НайденныйЭлементИдентификаторЛицевогоСчета = ДополнительныеРеквизитыQRКодаПоОсн.НайтиПоЗначению("persAcc1");
				НайденныйЭлементНаименованиеЛицевогоСчета  = ДополнительныеРеквизитыQRКодаПоОсн.НайтиПоЗначению("persAcc");
				
				Если НайденныйЭлементИдентификаторЛицевогоСчета <> Неопределено
				   И НайденныйЭлементНаименованиеЛицевогоСчета <> Неопределено Тогда
					ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
								+ "В таблице ""Дополнительные реквизиты QRКода по основным услугам"" необходимо выбрать однин из двух выбранных реквизитов: " + Символы.ПС
								+ """Наименование лицевого счета плательщика в организации"", либо ""Идентификатор лицевого счета плательщика в организации"".";
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
							+ "В таблице ""Дополнительные реквизиты QRКода по основным услугам"" необходимо указать необходимые реквититы.";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КвитанцияНаКР = Неопределено ИЛИ (КвитанцияНаКР = Истина И ВедетсяРаздельныйУчетПоУслугамКапремонта) Тогда
			
			ДополнительныеРеквизитыQRКодаПоКР = НастройкаФормированияПД.ДополнительныеРеквизитыQRКодаПоКР.Получить();
			
			Если ТипЗнч(ДополнительныеРеквизитыQRКодаПоКР) = Тип("СписокЗначений") Тогда
				
				НайденныйЭлементИдентификаторЛицевогоСчета = ДополнительныеРеквизитыQRКодаПоКР.НайтиПоЗначению("persAcc1");
				НайденныйЭлементНаименованиеЛицевогоСчета  = ДополнительныеРеквизитыQRКодаПоКР.НайтиПоЗначению("persAcc");
				
				Если НайденныйЭлементИдентификаторЛицевогоСчета <> Неопределено
				   И НайденныйЭлементНаименованиеЛицевогоСчета <> Неопределено Тогда
					ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
								+ "В таблице ""Дополнительные реквизиты QRКода по услугам капремонта"" необходимо выбрать однин из двух выбранных реквизитов: " + Символы.ПС
								+ """Наименование лицевого счета плательщика в организации"", либо ""Идентификатор лицевого счета плательщика в организации"".";
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
							+ "В таблице ""Дополнительные реквизиты QRКода по услугам капремонта"" необходимо указать необходимые реквититы.";
				
			КонецЕсли;
			
		КонецЕсли;
		
	// Закомментировано для дальнейшего расширения проверок:
	//ИначеЕсли НастройкаФормированияПД.ВариантОпределенияФорматаШтрихкода = Перечисления.КВП_ВариантыОпределенияФорматаШтрихкода.ИзВнешнейОбработки Тогда
	//	
	//	ПроверитьЗаполнениеВнешнихОбработокШтрихкода(НастройкаФормированияПД, ВедетсяРаздельныйУчетПоУслугамКапремонта, ТекстОшибки, Ложь, КвитанцияНаКР);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Отказ = Истина;
		ТекстОшибки = ОсновнойТекстОшибки + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
	Если КвитанцияНаКР Тогда
		СтруктураНастроек.Вставить("ТекстОшибкиНастроекДляQRШККР", ТекстОшибки);
	Иначе
		СтруктураНастроек.Вставить("ТекстОшибкиНастроекДляQRШКОсн", ТекстОшибки);
	КонецЕсли;
	
	Возврат НЕ Отказ; // Возвращаем обратное значение, так как функция определяет корректное заполнение настроек, а параметр "Отказ" определяет ошибку.
	
КонецФункции

// Проверяет корректное заполнение настроек в РС "Настройки формирования платежного документа" для формирования
// одномерного штрихкода.
//
//  СтруктураНастроек - Структура - структура значений настроек формирования платежного документа.
//  КвитанцияНаКР	  - Булево, Неопределено - необязательный параметр, если:
//								ИСТИНА			- проверяются настройки для штрихкодов по услугам кап.ремонта;
//								ЛОЖЬ			- проверяются настройки для штрихкодов по услугам НЕ кап.ремонта (основным услугам);
//								НЕОПРЕДЕЛЕНО	- проверяются настройки для штрихкодов по основным услугам и услугам кап.ремонта.
// 
// Возвращаемое значение:
//  Булево - определяет факт корректного заполнения параметров одномерного штрихкода
//           в РС "Настройки формирования платежного документа".
//
Функция НастройкиДляОдномерногоШККорректны(СтруктураНастроек, КвитанцияНаКР = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	НастройкаФормированияПД                  = СтруктураНастроек.ПараметрыФормированияПД;
	ВедетсяРаздельныйУчетПоУслугамКапремонта = СтруктураНастроек.ВедетсяРаздельныйУчетПоУслугамКапремонта;
	ОсновнойТекстОшибки                      = "Не сформированы одномерные штрихкоды. Нажмите на это сообщение для перехода в ""Настройки формирования платежного документа"": ";
	ТекстОшибки                              = "";
	
	Если ПустаяСтрока(НастройкаФормированияПД.РазделительДробнойЧастиСуммы) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + "Не выбран вариант разделения дробной части суммы!";
	КонецЕсли;
	
	Если НастройкаФормированияПД.ВариантОпределенияФорматаШтрихкода = Перечисления.КВП_ВариантыОпределенияФорматаШтрихкода.ПоУказаннымНастройкам Тогда
		
		Если КвитанцияНаКР = Неопределено ИЛИ КвитанцияНаКР = Ложь Тогда
			ПроверитьКорректностьЗаполненияСоставаОдномерногоШК(НастройкаФормированияПД, "ТаблицаСоставШКПоОсновнымУслугам", "СоставШтрихкодаПоОсн", ТекстОшибки);
		КонецЕсли;
		
		Если КвитанцияНаКР = Неопределено ИЛИ (КвитанцияНаКР = Истина И ВедетсяРаздельныйУчетПоУслугамКапремонта) Тогда
			ПроверитьКорректностьЗаполненияСоставаОдномерногоШК(НастройкаФормированияПД, "ТаблицаСоставШКПоУслугамКапремонта", "СоставШтрихкодаПоКР", ТекстОшибки);
		КонецЕсли;
		
	// Закомментировано для дальнейшего расширения проверок:
	//ИначеЕсли НастройкаФормированияПД.ВариантОпределенияФорматаШтрихкода = Перечисления.КВП_ВариантыОпределенияФорматаШтрихкода.ИзВнешнейОбработки Тогда
	//	
	//	ПроверитьЗаполнениеВнешнихОбработокШтрихкода(НастройкаФормированияПД, ВедетсяРаздельныйУчетПоУслугамКапремонта, ТекстОшибки, Истина, КвитанцияНаКР);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Отказ = Истина;
		ТекстОшибки = ОсновнойТекстОшибки + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
	Если КвитанцияНаКР Тогда
		СтруктураНастроек.Вставить("ТекстОшибкиНастроекДляОдномерногоШККР", ТекстОшибки);
	Иначе
		СтруктураНастроек.Вставить("ТекстОшибкиНастроекДляОдномерногоШКОсн", ТекстОшибки);
	КонецЕсли;
	
	Возврат НЕ Отказ; // Возвращаем обратное значение, так как функция определяет корректное заполнение настроек, а параметр "Отказ" определяет ошибку.
	
КонецФункции

// Процедура предназначена для проверки корректности заполнения таблицы параметров.
//
// Параметры:
//  Настройка				 - 	Структура - структура значений настроек формирования платежного документа.
//  НаименованиеТаблицы		 - 	Строка - имя таблицы, хранящий состав параметров штрихкода.
//  НаименованиеСоставаШК	 - 	Строка - имя ключа элемента в структуре "Настройка", хранящего строку состава параметров штрихкода.
//										 Как правило имя ресурса РС "Настройки формирования платежного документа".
//  ТекстОшибки				 - 	Строка - текст с ошибкой, выводимый после проверок настроек штрихкода.
//
Процедура ПроверитьКорректностьЗаполненияСоставаОдномерногоШК(Настройка, НаименованиеТаблицы, НаименованиеСоставаШК, ТекстОшибки)
	
	Если НаименованиеТаблицы = "ТаблицаСоставШКПоОсновнымУслугам" Тогда
		ПодстрокаСообщения = "основным услугам";
	Иначе
		ПодстрокаСообщения = "услугам капремонта";
	КонецЕсли;
	
	Если ПустаяСтрока(Настройка[НаименованиеСоставаШК]) Тогда
		
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + "Не заполнен состав параметров для одномерного штрихкода по " + ПодстрокаСообщения + "!";
		
	Иначе
		
		ОбязательныеПараметрыШтрихкода = Новый Структура("КодЛС");
		
		Для Каждого ТекПарам Из ОбязательныеПараметрыШтрихкода Цикл
			Если Найти(Настройка[НаименованиеСоставаШК], ТекПарам.Ключ) = 0 Тогда
				ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + "В составе штрихкода по " + ПодстрокаСообщения + " не указан параметр """ + ТекПарам.Ключ + """!";
			КонецЕсли;
		КонецЦикла;
		
		Если СтрЧислоВхождений(Настройка[НаименованиеСоставаШК], "КонтрольнаяСумма") >= 1
		   И ПустаяСтрока(Настройка.СхемаДляРасчетаКонтрольнойСуммы) Тогда
			ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + "Необходимо указать схему для расчета контрольной суммы!";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКорректностьЗаполненияСоставаОдномерногоШК()

// Предназначена для проверки заполнения полей, содержащих ссылки на внешние обработки информационной базы.
//
// Параметры:
//  Настройка								 - 	Структура - структура значений настроек формирования платежного документа.
//  ВедетсяРаздельныйУчетПоУслугамКапремонта - 	Булево - параметр определяет факт ведения раздельного учета по услугам кап.ремонта.
//  ТекстОшибки								 - 	Строка - текст с ошибкой, выводимый после проверок настроек штрихкода.
//  ЭтоОдномерныйШК							 - 	Булево - параметр определяет вид штрихкода.
//  КвитанцияНаКР							 - 	Булево, Неопределено - необязательный параметр, если:
//															ИСТИНА			- проверяются настройки для штрихкодов по услугам кап.ремонта;
//															ЛОЖЬ			- проверяются настройки для штрихкодов по услугам НЕ кап.ремонта (основным услугам);
//															НЕОПРЕДЕЛЕНО	- проверяются настройки для штрихкодов по основным услугам и услугам кап.ремонта.
//
Процедура ПроверитьЗаполнениеВнешнихОбработокШтрихкода(Настройка, ВедетсяРаздельныйУчетПоУслугамКапремонта, ТекстОшибки, ЭтоОдномерныйШК, КвитанцияНаКР) Экспорт
	
	Если (КвитанцияНаКР = Неопределено ИЛИ КвитанцияНаКР = Ложь) И НЕ ЗначениеЗаполнено(Настройка[?(ЭтоОдномерныйШК, "ВнешняяОбработкаШтрихкодаОсн", "ВнешняяОбработкаШтрихкодаQRОсн")]) Тогда
		ТекстСообщения = "Не выбрана внешняя обработка штрихкода по основным услугам для ";
		Если ЭтоОдномерныйШК Тогда
			ТекстСообщения = ТекстСообщения + "одномерного ";
		Иначе
			ТекстСообщения = ТекстСообщения + "QR-";
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + "штрихкода!";
		ТекстОшибки    = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + ТекстСообщения;
	КонецЕсли;
	
	Если (КвитанцияНаКР = Неопределено ИЛИ (КвитанцияНаКР = Истина И ВедетсяРаздельныйУчетПоУслугамКапремонта))
		И НЕ ЗначениеЗаполнено(Настройка[?(ЭтоОдномерныйШК, "ВнешняяОбработкаШтрихкодаКР", "ВнешняяОбработкаШтрихкодаQRКР")]) Тогда
		ТекстСообщения = "Не выбрана внешняя обработка штрихкода по услугам капремонта для ";
		Если ЭтоОдномерныйШК Тогда
			ТекстСообщения = ТекстСообщения + "одномерного ";
		Иначе
			ТекстСообщения = ТекстСообщения + "QR-";
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + "штрихкода!";
		ТекстОшибки    = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет корректность настроек штрихкодов в РС "Настройки формирования платежного документа".
//
// Параметры:
//  Настройка - Структура - структура значений настроек формирования платежного документа.
// 
// Возвращаемое значение:
//  Булево - определяет факт корректного заполнения параметров штрихкодов в РС "Настройки формирования платежного документа".
//
Функция ОсновныеНастройкиФормированияШтрихкодовЗаполненыКорректно(Настройка) Экспорт
	
	ОтказДляОсновныхНастроек = Ложь;
	
	// Основной текст указывает на раздел, в котором необходимо проверить настройки.
	ОсновнойТекст = "Для вывода штрих-кодов необходимо проверить ""Настройки формирования платежного документа"": ";
	
	Если Настройка.ВидШтрихкода = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.ПустаяСсылка() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОсновнойТекст + "Не выбран вид основного штрихкода!", ОтказДляОсновныхНастроек);
	КонецЕсли;
	
	Если Настройка.ВариантОпределенияФорматаШтрихкода.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОсновнойТекст + "Не выбран вариант определения формата штрихкода в поле ""Определять формат""!", ОтказДляОсновныхНастроек);
	КонецЕсли;
	
	Возврат НЕ ОтказДляОсновныхНастроек;
	
КонецФункции

#КонецОбласти // Обработчики_проверки_заполнения_параметров_штрихкода

#КонецОбласти // Обработчики_формирования_штрихкода

#Область Обработчики_разбора_штрихкода

#Область Общие_обработчики_разбора_штрихкода

// Определяет формат считанного текста - ШтрихКод это или QR-код, и запускает процесс его разбора.
//
// ДопПараметры:
//  Текст                   – Строка    - текст QR-кода;
//  НастройкиФормированияПД – Структура – настройки формирования платежного документа;
//  ДопПараметры               – Структура – параметры для записи результатов разбора QR-кода.
//
// Возвращаемое значение:
//  Булево – удалось ли разобрать переданный текст Штрих-/QR-кода.
//
Функция ОбработатьИРазобратьШтрихКод(Знач Текст, Знач НастройкиФормированияПД, ДопПараметры = Неопределено) Экспорт
	
	Текст = СокрЛП(Текст);
	
	// QR-код, формируемый в нашей программе всегдан начинается со строки "ST0001".
	Если СтрНайти(Текст, "ST" + "0001") > 0 Тогда
		
		Если Не ОбработатьИРазобратьQRКод(Текст, НастройкиФормированияПД, ДопПараметры) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Неизвестный формат QR-кода.");
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Если Не ОбработатьИРазобратьОдномерныйШтрихКод(Текст, НастройкиФормированияПД, ДопПараметры) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Неизвестный формат одномерного штрих-кода.");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбработатьИРазобратьШтрихКод()

// Функция возвращает структуру параметров для заполнения данными по штрихкоду.
//
// Возвращаемое значение:
//  Структура:
//    "ЛицевойСчет" - ссылка на элемент справочника "Лицевые счета".
//    "Сумма" - Число - сумма.
//    "ПризнакОплатыПоКР" - Булево - определяет штрихкод по услугам капитального ремонта.
//    "Организация" - ссылка на элемент справочника "Организации".
//    "НастройкиФормированияПДЖКХОпределены" - Булево - определяет, найдены ли настройки формирования платежных документов,
//                                                      по которым формируется текст гтрихкода.
//    "МесяцНачисления" - Дата - месяц.
//    "ВедетсяРаздельныйУчетПоУслугамКапремонта" - Булево - определяет, ведется ли раздельный учет по услугам
//                                                          капитального ремонта.
//
Функция ПолучитьСтруктуруПараметровРазбораШК() Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЛицевойСчет",                              Справочники.КВП_ЛицевыеСчета.ПустаяСсылка());
	ДопПараметры.Вставить("Сумма",                                    0);
	ДопПараметры.Вставить("ПризнакОплатыПоКР",                        Ложь);
	ДопПараметры.Вставить("Организация",                              Справочники.Организации.ПустаяСсылка());
	ДопПараметры.Вставить("НастройкиФормированияПДЖКХОпределены",     Ложь);
	ДопПараметры.Вставить("МесяцНачисления",                          Дата(1, 1, 1));
	ДопПараметры.Вставить("ВедетсяРаздельныйУчетПоУслугамКапремонта", Ложь);
	ДопПараметры.Вставить("ОбъектВывзоваМеханизмаРазбораШК",          "");
	
	Возврат ДопПараметры;
	
КонецФункции // ПолучитьСтруктуруПараметровРазбораШК()

// Процедура определяет организацию и настройки формирования ПД.
//
// ДопПараметры:
//  Текст                   – Строка - текст штрих-кода.
//  Отказ                   - Булево - признак ошибки при определении данных.
//  ДопПараметры            – Структура – параметры для обработки штрихкода: код лицевого счета, сумма оплаты.
//                                        См. описание параметров в комментарии к функции "ПолучитьСтруктуруПараметровРазбораШК()".
//  НастройкиФормированияПД – Структура – настройки формирования платежного документа.
//  ЭтоОдномерныйШтрихКод   - Булево - признак вида штрихкода.
//  СтруктураПолейQRКода    - Сруктура - сруктура значений полей QR-штрихкода.
//
Процедура ОпределитьОрганизациюНастройкиФормированияПДФактВеденияУчетаПоКР(Знач Текст, Отказ, ДопПараметры, НастройкиФормированияПД,
																			ЭтоОдномерныйШтрихКод = Истина, СтруктураПолейQRКода = Неопределено)
	КоличествоСовпаденийОрганизаций       = 0;
	ОрганизацияПоНастройкамФормированияПД = Неопределено;
	
	Запрос = Новый Запрос;
	
	Если ЭтоОдномерныйШтрихКод Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация,
		|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляОдномерногоШКПоОсн КАК КодОрганизацииДляШтрихКода
		|ИЗ
		|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
		|ГДЕ
		|	НЕ УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляОдномерногоШКПоОсн = """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация,
		|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляОдномерногоШКПоУслугамКР КАК КодОрганизацииДляШтрихКода
		|ИЗ
		|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
		|ГДЕ
		|	НЕ УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляОдномерногоШКПоУслугамКР = """"";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если СтрНачинаетсяС(Текст, СокрЛП(Выборка.КодОрганизацииДляШтрихКода)) Тогда
				
				КоличествоСовпаденийОрганизаций       = КоличествоСовпаденийОрганизаций + 1;
				ОрганизацияПоНастройкамФормированияПД = Выборка.Организация;
				
			КонецЕсли;
			
		КонецЦикла;
	
	Иначе
		
		НомерСчета = Неопределено;
		
		СтруктураПолейQRКода.Свойство("PersonalAcc", НомерСчета);
		
		Если НомерСчета = Неопределено ИЛИ ПустаяСтрока(НомерСчета) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	БанковскиеСчета.Владелец КАК Организация,
		|	ПРЕДСТАВЛЕНИЕ(БанковскиеСчета.Владелец) КАК ОрганизацияПредставление
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
		|	И БанковскиеСчета.НомерСчета = &НомерСчета";
		
		Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ОрганизацияПоНастройкамФормированияПД = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			НаименованиеОрганизацииИзТекстШК = Неопределено;
			
			СтруктураПолейQRКода.Свойство("Name", НаименованиеОрганизацииИзТекстШК);
			
			Если НаименованиеОрганизацииИзТекстШК = Неопределено ИЛИ ПустаяСтрока(НаименованиеОрганизацииИзТекстШК) Тогда
				Отказ = Истина;
				//Возврат;
			ИначеЕсли Выборка.ОрганизацияПредставление = НаименованиеОрганизацииИзТекстШК Тогда
				КоличествоСовпаденийОрганизаций       = КоличествоСовпаденийОрганизаций + 1;
				ОрганизацияПоНастройкамФормированияПД = Выборка.Организация;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если КоличествоСовпаденийОрганизаций = 1 Тогда
		Если НЕ ДопПараметры.Организация.Пустая()
		   И ОрганизацияПоНастройкамФормированияПД <> ДопПараметры.Организация Тогда
			// Если найденная организация не совпадает с текущей из параметров, то прекращаем дальнейший разбор ШК.
			Отказ = Истина;
		Иначе
			// Получим значение настроек формирования ПД по найденной организации.
			НастройкиФормированияПДОтказ = Ложь;
			НастройкиФормированияПД      = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(ОрганизацияПоНастройкамФормированияПД, НастройкиФормированияПДОтказ);
			Если НастройкиФормированияПДОтказ Тогда
				// Если по найденной организации не определены настройки формирования ПД, то прекращаем дальнейший разбор ШК.
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Организация = ОрганизацияПоНастройкамФормированияПД;
	
	СтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(ДопПараметры.Организация);
	
	Если СтруктураНастроекКапРемонта.НастройкиОпределены
	   И ДопПараметры.ВедетсяРаздельныйУчетПоУслугамКапремонта <> СтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		ДопПараметры.ВедетсяРаздельныйУчетПоУслугамКапремонта = СтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет;
	КонецЕсли;
	
КонецПроцедуры // ОпределитьОрганизациюНастройкиФормированияПДФактВеденияУчетаПоКР()

#КонецОбласти // Общие_обработчики_разбора_штрихкода

#Область Обработчики_разбора_QR_штрихкода

// Проверяет считанный текст QR-кода на наличие контрольной строки и
// раскладывает его на составляющие согласно настройкам формирования платежного документа.
//
// Параметры:
//  Текст                   – Строка    - текст QR-кода;
//  НастройкиФормированияПД – Структура – настройки формирования платежного документа;
//  ДопПараметры            – Структура – параметры для записи результатов разбора QR-кода.
//                                        См. описание параметров в комментарии к функции "ПолучитьСтруктуруПараметровРазбораШК()".
//
// Возвращаемое значение:
//  Булево – удалось ли разобрать переданный текст QR-кода.
//
Функция ОбработатьИРазобратьQRКод(Текст, НастройкиФормированияПД, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПолучитьСтруктуруПараметровРазбораШК();
	КонецЕсли;
	
	// ПЛАН РАЗБОРА QR ШТРИХКОД:
	// 1. Разберем строки QR-кода в структуру.
	// 2. Если организация и параметры формированияПД не определены, то пытаемся определить по значению расчетного счета организации.
	// 3. Проверим установку выполнения разбора ШК из внешней обработки. Выполняем при возможности разбор ШК из обработки.
	// 4. Определим лицевой счет.
	// 5. Определим дополнительные параметры.
	
	// 1. Разберем строки QR-кода в структуру.
	МассивПолейQRКода    = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "|");
	СтруктураПолейQRКода = Новый Структура;
	
	Для Каждого ПараКлючЗначение Из МассивПолейQRКода Цикл
		МассивПарыКлючЗначение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараКлючЗначение, "=");
		Если МассивПарыКлючЗначение.Количество() = 2 Тогда
			СтруктураПолейQRКода.Вставить(МассивПарыКлючЗначение[0], МассивПарыКлючЗначение[1]);
		КонецЕсли;
	КонецЦикла;
	
	// 2. Если организация и параметры формированияПД не определены, то пытаемся определить по значению расчетного счета организации.
	
	Если НЕ ДопПараметры.НастройкиФормированияПДЖКХОпределены Тогда
		
		НастройкиФормированияПДЖКХОтказ = Ложь;
		ОпределитьОрганизациюНастройкиФормированияПДФактВеденияУчетаПоКР(Текст, НастройкиФормированияПДЖКХОтказ, ДопПараметры, НастройкиФормированияПД, Ложь, СтруктураПолейQRКода);
		
		Если НастройкиФормированияПДЖКХОтказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// 3. Проверим установку выполнения разбора ШК из внешней обработки. Выполняем при возможности разбор ШК из обработки.
	
	Если НастройкиФормированияПД.ВариантОпределенияФорматаШтрихкода = Перечисления.КВП_ВариантыОпределенияФорматаШтрихкода.ИзВнешнейОбработки Тогда
		
		ОбработкаОбъект = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьОбъектОбработкиШтрихкода(НастройкиФормированияПД, Ложь);
		Если ОбработкаОбъект = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Попытка
				Возврат ОбработкаОбъект.ОбработатьИРазобратьШтрихКодИзШаблона(Текст, НастройкиФормированияПД, ДопПараметры);
			Исключение
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	// 4. Определим лицевой счет.
	
	ЛицевойСчетСсылка = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
	Если СтруктураПолейQRКода.Свойство("persAcc") Тогда
		
		// Поле "persAcc" может быть как наименованием, так и идентификатором лицевого счета.
		ЛицевойСчетСсылка = Справочники.КВП_ЛицевыеСчета.НайтиПоНаименованию(СтруктураПолейQRКода.persAcc);
		
		Если ЛицевойСчетСсылка.Пустая() Тогда
			ЛицевойСчетСсылка = Справочники.КВП_ЛицевыеСчета.НайтиПоРеквизиту("Идентификатор", СтруктураПолейQRКода.persAcc);
		КонецЕсли;
		
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Штрихкод не содержит переметр ""persAcc"" для определения лицевого счета.");
		
	КонецЕсли;
	
	// Проверка и запись в структуру параметров.
	Если ЛицевойСчетСсылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДопПараметры.ЛицевойСчет = ЛицевойСчетСсылка;
	
	// 5. Определим дополнительные параметры.
	
	// СУММА (Сумма платежа, в копейках)
	Сумма = 0;
	Если СтруктураПолейQRКода.Свойство("Sum") Тогда
		Попытка
			Сумма = Число(СтруктураПолейQRКода.Sum);
		Исключение
			Сумма = 0;
		КонецПопытки;
	КонецЕсли;
	ДопПараметры.Сумма = Сумма / 100;
	
	// МЕСЯЦ НАЧИСЛЕНИЯ (Период оплаты)
	
	Дата = '00010101';
	Если СтруктураПолейQRКода.Свойство("paymPeriod") Тогда
		ФорматПериодаОплаты = НастройкиФормированияПД.ФорматПериодаОплаты;
		
		Если ФорматПериодаОплаты = "ММГГГГ" Или ФорматПериодаОплаты = "ММ.ГГГГ" Или ФорматПериодаОплаты = "" Или ФорматПериодаОплаты = Неопределено Тогда
			ДатаСтрокой = Прав(СтруктураПолейQRКода.paymPeriod, 4) + Лев(СтруктураПолейQRКода.paymPeriod, 2) + "01";
		ИначеЕсли ФорматПериодаОплаты = "ММГГММГГ" Или ФорматПериодаОплаты = "ММГГ" Тогда
			ДатаСтрокой = "20" + Сред(СтруктураПолейQRКода.paymPeriod, 3, 2) + Лев(СтруктураПолейQRКода.paymPeriod, 2) + "01";
		КонецЕсли;
		
		Попытка
			Дата = Дата(ДатаСтрокой);
		Исключение
			Дата = '00010101';
		КонецПопытки;
	КонецЕсли;
	
	ДопПараметры.МесяцНачисления = Дата;
	
	// ПРИЗНАК ОПЛАТЫ ПО КАП.РЕМОНТУ (Наименование платежа (назначение))
	
	НазначениеПлатежаСтрока = "";
	Если СтруктураПолейQRКода.Свойство("Purpose", НазначениеПлатежаСтрока) Тогда
		Если СтрНайти(НазначениеПлатежаСтрока, "Оплата за КАПРЕМОНТ") > 0 Тогда
			ДопПараметры.ПризнакОплатыПоКР = Истина;
		Иначе
			ДопПараметры.ПризнакОплатыПоКР = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДопПараметры.ВедетсяРаздельныйУчетПоУслугамКапремонта И ДопПараметры.ПризнакОплатыПоКР Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(	"Штрихкод содержит сведения по услугам капитального ремонта, но в организации """
														  + ДопПараметры.Организация
														  + """ не ведется раздельный учет по услугам капитального ремонта.");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбработатьИРазобратьQRКод()

#КонецОбласти // Обработчики_разбора_QR_штрихкода

#Область Обработчики_разбора_одномерного_штрихкода

// Проверяет считанный текст штрих-кода на наличие контрольной строки и
// раскладывает его на составляющие согласно настройкам учетной политики ЖКХ.
//
// ДопПараметры:
//  Текст        – Строка - текст штрих-кода.
//  НастройкиФормированияПД – Структура – настройки формирования платежного документа.
//  ДопПараметры    – Структура – параметры для обработки штрихкода: код лицевого счета, сумма оплаты.
//                                См. описание параметров в комментарии к функции "ПолучитьСтруктуруПараметровРазбораШК()".
//
// Возвращаемое значение:
//  Булево – корректен ли переданный текст штрих-кода.
//
Функция ОбработатьИРазобратьОдномерныйШтрихКод(Знач Текст, Знач НастройкиФормированияПД, ДопПараметры = Неопределено)
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПолучитьСтруктуруПараметровРазбораШК();
	КонецЕсли;
	
	// ПЛАН РАЗБОРА ОДНОМЕРНОГО ШТРИХКОД:
	// 1. Если организация и параметры формированияПД не определены, то пытаемся определить по значению кода организации для штрихкода.
	// 2. Проверим установку выполнения разбора ШК из внешней обработки. Выполняем при возможности разбор ШК из обработки.
	// 3. Произведем проверку на соответствие длины ШК по настройкам формирования ПД, на наличие контрольной суммы в ШК и её соответствия
	//    схеме, указанной в настройках формирования ПД, для расчета контрольной суммы.
	// 4. Определим лицевой счет.
	// 5. Определим дополнительные параметры.
	
	// 1. Если организация и параметры формированияПД не определены, то пытаемся определить по значению кода организации для штрихкода.
	
	Если НЕ ДопПараметры.НастройкиФормированияПДЖКХОпределены Тогда
		
		НастройкиФормированияПДЖКХОтказ = Ложь;
		ОпределитьОрганизациюНастройкиФормированияПДФактВеденияУчетаПоКР(Текст, НастройкиФормированияПДЖКХОтказ, ДопПараметры, НастройкиФормированияПД);
		
		Если НастройкиФормированияПДЖКХОтказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// 2. Проверим установку выполнения разбора ШК из внешней обработки. Выполняем при возможности разбор ШК из обработки.
	
	Если НастройкиФормированияПД.ВариантОпределенияФорматаШтрихкода = Перечисления.КВП_ВариантыОпределенияФорматаШтрихкода.ИзВнешнейОбработки Тогда
		
		ОбработкаОбъект = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьОбъектОбработкиШтрихкода(НастройкиФормированияПД);
		Если ОбработкаОбъект = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Попытка
				Возврат ОбработкаОбъект.ОбработатьИРазобратьШтрихКодИзШаблона(Текст, НастройкиФормированияПД, ДопПараметры);
			Исключение
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	// 3. Произведем проверку на соответствие длины ШК по настройкам формирования ПД, на наличие контрольной суммы в ШК и её соответствия
	//    схеме, указанной в настройках формирования ПД, для расчета контрольной суммы.
	
	СтруктураСоставаШК = ПолучитьПустуюСтруктуруСоставаШК();
	
	// Проверка по настройкам для основных услуг:
	Если НЕ ДопПараметры.ПризнакОплатыПоКР Тогда
		ЗаполнитьСтруктуруПараметровШтрихкодаПоНастройкамФормированияШК(Текст, СтруктураСоставаШК, НастройкиФормированияПД,
																		"СоставШтрихкодаПоОсн", ДопПараметры.ВедетсяРаздельныйУчетПоУслугамКапремонта);
	Иначе
		СтруктураСоставаШК.НастройкаШтрихкодаОпределена = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураСоставаШК.НастройкаШтрихкодаОпределена И ДопПараметры.ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		// Проверка по настройкам для услуг капитального ремонта:
		СтруктураСоставаШК = ПолучитьПустуюСтруктуруСоставаШК();
		ЗаполнитьСтруктуруПараметровШтрихкодаПоНастройкамФормированияШК(Текст, СтруктураСоставаШК, НастройкиФормированияПД,
																		"СоставШтрихкодаПоКР", ДопПараметры.ВедетсяРаздельныйУчетПоУслугамКапремонта);
		
		Если НЕ СтруктураСоставаШК.НастройкаШтрихкодаОпределена Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДопПараметры.ПризнакОплатыПоКР = Истина;
		
	ИначеЕсли СтруктураСоставаШК.НастройкаШтрихкодаОпределена
	   И ДопПараметры.ВедетсяРаздельныйУчетПоУслугамКапремонта
	   И НастройкиФормированияПД.СоставШтрихкодаПоОсн = НастройкиФормированияПД.СоставШтрихкодаПоКР Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Формат штрихкода """ + Текст + """ определен по составу штрихкода по основным услугам, так как в Настройках формирования платежного документа "
														  + "состав штрихкода по основным услугам совпадает с составом штрихкода по услугам капитального ремонта.");
		Если ДопПараметры.ОбъектВывзоваМеханизмаРазбораШК = "Документы.КВП_РегистрацияОплаты" Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Если считанный штрихкод относится к услугам капитального ремонта, то в поле ""Распределение на капремонт"" "
															  + "формы документа ""Регистрация оплаты"" следует изменить значение на ""Услуги капитального ремонта"".");
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЗначенийПараметров = СтруктураСоставаШК.СтруктураЗначенийПараметров;
	
	// 4. Определим лицевой счет.
	
	Если НастройкиФормированияПД.ИдентификаторЛСШтрихкода Тогда
		// Если лицевой счет определяется по идентификатору в соответствии Настройке формирования платежного документа,
		// то значение идентификатора лицевого счета в тексте ШК может содержать лидирующие нули. Поэтому поиск лицевого счета
		// производим по вариантам иднтификаторов лицевых счетов.
		СписокВариантовИдентификаторовЛССЛидирующимиНулями = ПолучитьСписокВариантовИдентификаторовСЛидирующимиНулями(СтруктураЗначенийПараметров.КодЛС);
		ДопПараметры.ЛицевойСчет = НайтиЛицевойСчетПСпискуВариантовИдентификаторовЛС(СписокВариантовИдентификаторовЛССЛидирующимиНулями);
	Иначе
		ДопПараметры.ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.НайтиПоКоду(СтруктураЗначенийПараметров.КодЛС);
	КонецЕсли;
	
	Если ДопПараметры.ЛицевойСчет.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Лицевой счет с "
														   + ?(НастройкиФормированияПД.ИдентификаторЛСШтрихкода, "идентификатором ", "кодом ")
														   + "не найден.");
		Возврат Ложь;
	КонецЕсли;
	
	// 5. Определим дополнительные параметры.
	
	ДопПараметры.Сумма = ?(СтруктураЗначенийПараметров.Свойство("СуммаКОплате"), СтруктураЗначенийПараметров.СуммаКОплате, 0);
	
	МесяцОплаты = "01";
	Если СтруктураЗначенийПараметров.Свойство("МесяцОплаты") Тогда
		МесяцОплаты = СтруктураЗначенийПараметров.МесяцОплаты;
		МесяцОплаты = ?(ПустаяСтрока(МесяцОплаты), "01", МесяцОплаты);
	КонецЕсли;
	
	ГодОплаты = Сред(Год(ТекущаяДата()), 3);
	Если СтруктураЗначенийПараметров.Свойство("ГодОплаты") Тогда
		ГодОплаты = СтруктураЗначенийПараметров.ГодОплаты;
		ГодОплаты = ?(ПустаяСтрока(ГодОплаты), Сред(Год(ТекущаяДата()), 3), ГодОплаты);
	КонецЕсли;
	
	// Преобразуем строки месяца и года в дату
	ДопПараметры.МесяцНачисления = "20" + ГодОплаты + МесяцОплаты + "01";
	Попытка
		ДопПараметры.МесяцНачисления = Дата(ДопПараметры.МесяцНачисления);
	Исключение
		ДопПараметры.МесяцНачисления = Дата('00010101');
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ОбработатьИРазобратьОдномерныйШтрихКод()

// Функция возвращает пустую структуру.
//
Функция ПолучитьПустуюСтруктуруСоставаШК() Экспорт
	
	Возврат Новый Структура("НастройкаШтрихкодаОпределена, СтруктураЗначенийПараметров", Истина, Новый Структура);
	
КонецФункции

// Функция производит разбор значения идентификатора лицевого счета на варианты значений. При этом
// данный идентификатор может содержать лидирующие нули.
//
// Параметры:
//  КодЛС - Текст, значение идентификатора лицевого счета с или без лидирующих нулей.
//
// Возвращаемое значение:
//  Список значений, варианты значений идентификатора лицевого счета.
//
Функция ПолучитьСписокВариантовИдентификаторовСЛидирующимиНулями(КодЛС)
	
	Список = Новый СписокЗначений;
	
	Код   = СокрЛП(КодЛС);
	Длина = СтрДлина(Код);
	
	Для Сч = 1 По Длина Цикл
		Символ = Лев(Код, 1);
		Список.Добавить(Сред(Код, Сч));
		Если НЕ Символ = "0" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокВариантовИдентификаторовСЛидирующимиНулями()

// Функция производит поиск лицевого счета по значению реквизита "Идентификатор" из
// списка вариантов значений идентификатора.
// Если лицевой счет в справочнике "Лицевые счета" не найдет, то возвращается пустая ссылка.
//
// Параметры:
//  СписокВариантовИдентификаторов - Список значений - варианты значений идентификатора лицевого счета.
//
// Возвращаемое значение:
//  Ссылка на справочник "Лицевые счета".
//
Функция НайтиЛицевойСчетПСпискуВариантовИдентификаторовЛС(СписокВариантовИдентификаторов)
	
	НайденныйЛС = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КВП_ЛицевыеСчета.Ссылка
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Идентификатор В(&СписокВариантовИдентификаторов)";
	Запрос.УстановитьПараметр("СписокВариантовИдентификаторов", СписокВариантовИдентификаторов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайденныйЛС = Выборка.Ссылка;
	КонецЦикла;
	
	Возврат НайденныйЛС;
	
КонецФункции // НайтиЛицевойСчетПСпискуВариантовИдентификаторовЛС()

// Процедура получает структуру значений полей одномерного штрихкода.
//
// ДопПараметры:
//  Текст        – Строка - текст штрих-кода.
//  НастройкиФормированияПД – Структура – настройки формирования платежного документа.
//  ИмяРеквизитаСоставаШК   – Строка – имя реквизита регистра сведений "Настройки формирования платежного документа",
//                                     который хранит строку полей штрихкода.
//
Процедура ЗаполнитьСтруктуруПараметровШтрихкодаПоНастройкамФормированияШК(Текст, СтруктураСоставаШК, НастройкиФормированияПД, ИмяРеквизитаСоставаШК, ВедетсяРаздельныйУчетПоУслугамКапремонта) Экспорт
	
	// Проверим наличие реквизита по имени.
	Если НЕ НастройкиФормированияПД.Свойство(ИмяРеквизитаСоставаШК) Тогда
		СтруктураСоставаШК.НастройкаШтрихкодаОпределена = Ложь;
		Возврат;
	КонецЕсли;
	
	// Проверим установку настоем сосотава параметров штрихкода.
	Если ПустаяСтрока(НастройкиФормированияПД[ИмяРеквизитаСоставаШК]) Тогда
		СтруктураСоставаШК.НастройкаШтрихкодаОпределена = Ложь;
		СтрокаСообщения = ?(ИмяРеквизитаСоставаШК = "СоставШтрихкодаПоОсн", "основным услугам.", "услугам капитального ремонта.");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В Настройках формирования платежного документа не настроен состав штрихкода по " + СтрокаСообщения);
		Возврат;
	КонецЕсли;
	
	мСоставШК = СтрРазделить(НастройкиФормированияПД[ИмяРеквизитаСоставаШК], ",");
	Если мСоставШК.Количество() = 0 Тогда
		Если ИмяРеквизитаСоставаШК = "СоставШтрихкодаПоОсн" Тогда
			ТекстСообщения = "основным услугам.";
		Иначе //Если ИмяРеквизитаСоставаШК = "СоставШтрихкодаПоКР" Тогда
			ТекстСообщения = "услугам капитального ремонта.";
		КонецЕсли;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не определены настройки состава параметров штрихкода по " + ТекстСообщения);
		СтруктураСоставаШК.НастройкаШтрихкодаОпределена = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ИмяРеквизитаСоставаШК = "СоставШтрихкодаПоОсн" Тогда
		КодОрганизацииДляШтрихКода = НастройкиФормированияПД.КодОрганизацииДляОдномерногоШКПоОсн;
	Иначе
		КодОрганизацииДляШтрихКода = НастройкиФормированияПД.КодОрганизацииДляОдномерногоШКПоУслугамКР;
	КонецЕсли;
	ДлинаКодаОрганизацииДляШтрихКода = СтрДлина(КодОрганизацииДляШтрихКода);
	
	КонстантаОрганизацииДляШтрихКода      = СокрЛП(НастройкиФормированияПД.КонстантаОрганизацииДляШтрихКода);
	ДлинаКонстантыОрганизацииДляШтрихКода = СтрДлина(СокрЛП(НастройкиФормированияПД.КонстантаОрганизацииДляШтрихКода));
	
	ДлинаШКИзНастроек = 0; // Начальное значение длины ШК по Настройкам формирования ПД.
	
	Для Каждого ИмяПараметра Из мСоставШК Цикл
		
		ДлинаПараметра     = 0;
		ПозицияРазделителя = Найти(ИмяПараметра, "_");
		Если ИмяПараметра = "КодОрганизации" Тогда
			ДлинаПараметра = ДлинаКодаОрганизацииДляШтрихКода;
		ИначеЕсли ИмяПараметра = "КодЛС" Тогда
			ДлинаПараметра = НастройкиФормированияПД.ДлинаИдентификатораШтрихкода;
		ИначеЕсли ИмяПараметра = "Константа" Тогда
			ДлинаПараметра = ДлинаКонстантыОрганизацииДляШтрихКода;
		ИначеЕсли ИмяПараметра = "ГодОплаты" Тогда
			ДлинаПараметра = 2;
		ИначеЕсли ИмяПараметра = "МесяцОплаты" Тогда
			ДлинаПараметра = 2;
		ИначеЕсли ИмяПараметра = "СуммаКОплате" Тогда
			ДлинаПараметра = НастройкиФормированияПД.ДлинаСуммыШтрихкода;
			Если НастройкиФормированияПД.РазделительДробнойЧастиСуммы = " . (точка)"
			 ИЛИ НастройкиФормированияПД.РазделительДробнойЧастиСуммы = " , (запятая)" Тогда
				ДлинаПараметра = ДлинаПараметра + 1;
			КонецЕсли;
		ИначеЕсли ИмяПараметра = "РасчетныйСчетОрганизации" Тогда
			ДлинаПараметра = 20;
		ИначеЕсли ИмяПараметра = "ИННОрганизации" Тогда
			ДлинаПараметра = 12;
		ИначеЕсли ИмяПараметра = "КонтрольнаяСумма" Тогда
			Если НастройкиФормированияПД.СхемаДляРасчетаКонтрольнойСуммы = "Схема №1" Тогда
				ДлинаПараметра = 4;
			ИначеЕсли НастройкиФормированияПД.СхемаДляРасчетаКонтрольнойСуммы = "Схема №4" Тогда
				ДлинаПараметра = СтрДлина(Текст) - ДлинаШКИзНастроек;
				Если ДлинаПараметра < 0 Тогда
					СтруктураСоставаШК.НастройкаШтрихкодаОпределена = Ложь;
					Возврат;
				КонецЕсли;
			Иначе
				ДлинаПараметра = 1;
			КонецЕсли;
		ИначеЕсли ПозицияРазделителя > 0 Тогда
			ДлинаШКИзНастроек = ДлинаШКИзНастроек + 1;
		КонецЕсли;
		
		ЗначениеПараметра = Сред(Текст, ДлинаШКИзНастроек + 1, ДлинаПараметра);
		
		Если ИмяПараметра = "КодЛС" И Не НастройкиФормированияПД.ИдентификаторЛСШтрихкода Тогда // если лицевой счет определяется кодом.
			ЗначениеПараметра = Сред(ЗначениеПараметра, (СтрДлина(ЗначениеПараметра) - Метаданные.Справочники.КВП_ЛицевыеСчета.ДлинаКода + 1)); // берем символы справа.
		ИначеЕсли ИмяПараметра = "Константа" И КонстантаОрганизацииДляШтрихКода <> ЗначениеПараметра Тогда
			СтруктураСоставаШК.НастройкаШтрихкодаОпределена = Ложь;
			Возврат;
		ИначеЕсли ИмяПараметра = "СуммаКОплате" Тогда
			СуммаКОплате = "";
			Для Сч = 1 По СтрДлина(ЗначениеПараметра) Цикл
				Символ = Сред(ЗначениеПараметра, Сч, 1);
				Если Символ <> "0"
				 ИЛИ (Найти(",.", Сред(ЗначениеПараметра, Сч + 1, 1)) > 0 И НастройкиФормированияПД.РазделительДробнойЧастиСуммы <> "не выводить") Тогда
					СуммаКОплате = Сред(ЗначениеПараметра, Сч);
					Прервать;
				КонецЕсли;
				СуммаКОплате = Сред(ЗначениеПараметра, Сч + 1);
				
			КонецЦикла;
			
			Если НастройкиФормированияПД.РазделительДробнойЧастиСуммы = "не выводить" Тогда
				Попытка
					СуммаКОплате = Число(СуммаКОплате) / 100;
				Исключение
					СуммаКОплате = 0;
				КонецПопытки;
			Иначе
				Если Найти(",", СуммаКОплате) > 0 Тогда // если разделитель дробной части "запятая", то заменим символ на точку
														// для преобразования всуммы в число.
					СуммаКОплате = СтрЗаменить(СуммаКОплате, ",", ".");
				КонецЕсли;
				Попытка
					СуммаКОплате = Число(СуммаКОплате);
				Исключение
					СуммаКОплате = 0;
				КонецПопытки;
			КонецЕсли;
			ЗначениеПараметра = СуммаКОплате;
		КонецЕсли;
		
		СтруктураСоставаШК.СтруктураЗначенийПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);
		
		ДлинаШКИзНастроек = ДлинаШКИзНастроек + ДлинаПараметра;
		
	КонецЦикла;
	
	Если ДлинаШКИзНастроек <> СтрДлина(Текст) Тогда
		СтруктураСоставаШК.НастройкаШтрихкодаОпределена = Ложь;
		Возврат;
	КонецЕсли;
	
	// В случае, если в составе штрихкода, указанных в Настройках Формирования платежного документа, есть параметр "Контрольная сумма", а в тексте
	// штрихкода нет значения контрольной суммы, то шрихкод считается неопределенным.
	Если СтруктураСоставаШК.СтруктураЗначенийПараметров.Свойство("КонтрольнаяСумма")
	   И НЕ ПустаяСтрока(СтруктураСоставаШК.СтруктураЗначенийПараметров.КонтрольнаяСумма)
	   И НЕ СовпадаетКонтрольнаяСумма(НастройкиФормированияПД.СхемаДляРасчетаКонтрольнойСуммы, Текст, СтруктураСоставаШК.СтруктураЗначенийПараметров.КонтрольнаяСумма) Тогда
		СтруктураСоставаШК.НастройкаШтрихкодаОпределена = Ложь;
		Если НЕ ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Контрольная сумма считанного штрихкода не совпадает с рассчитанной контрольной суммой по "
														+ "Настройкам формирования платежного документа.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтруктуруПараметровШтрихкодаПоНастройкамФормированияШК()

// Функция проверяет соответствие контрольной суммы в введенной штрихкоде и контрольной суммы
// по настройкам формирования штрихкода.
//
// Параметры:
//  СхемаДляРасчетаКонтрольнойСуммы - Структура, настройки формирования платежного документа.
//  Текст                 - Строка - текст штрихкода.
//  ТекстКонтрольнойСуммы - Строка - текст контрольной суммы.
//
// Возвращаемое значение:
//  Булево, признак совпадения контрольной суммы.
//
Функция СовпадаетКонтрольнаяСумма(Знач СхемаДляРасчетаКонтрольнойСуммы, Знач Текст, Знач ТекстКонтрольнойСуммы = "")
	
	Если ПустаяСтрока(ТекстКонтрольнойСуммы) Тогда
		Если СхемаДляРасчетаКонтрольнойСуммы = "Схема №1" Тогда
			ДлинаКС = 4;
		ИначеЕсли СхемаДляРасчетаКонтрольнойСуммы = "Схема №4" Тогда
			ДлинаКС = СтрДлина(ТекстКонтрольнойСуммы);
		Иначе
			ДлинаКС = 1;
		КонецЕсли;
		КСИзСтрокиСоШК         = Прав(Текст, ДлинаКС);
		БазоваяЧастьСтрокиСоШК = Лев(Текст, СтрДлина(Текст) - ДлинаКС);
	Иначе
		КСИзСтрокиСоШК         = ТекстКонтрольнойСуммы;
		БазоваяЧастьСтрокиСоШК = Лев(Текст, СтрДлина(Текст) - СтрДлина(КСИзСтрокиСоШК));
	КонецЕсли;
	
	КСРассчитанная = СформироватьКонтрольнуюСумму(СхемаДляРасчетаКонтрольнойСуммы, БазоваяЧастьСтрокиСоШК);
	
	Возврат КСИзСтрокиСоШК = КСРассчитанная;
	
КонецФункции // СовпадаетКонтрольнаяСумма()

#КонецОбласти // Обработчики_разбора_одномерного_штрихкода

#КонецОбласти // Обработчики_разбора_штрихкода

#Область ФункцииДляОбеспеченияОбратнойСовместимостиСВнешнимиКвитанциями

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ОБРАТНОЙ СОВМЕСТИМОСТИ С ВНЕШНИМИ КВИТАНЦИЯМИ

// Формирует таблицу с начислениями по типу услуг, определенному на форме настроек.
//
// Параметры:
//  ТаблицаНачисления - таблица со всеми начислениями по текущему л/с.
//  УслугиПоТипам - таблиа услуг по типам.
//  Отбор - структура с параметрами отбора.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с начислениями по определенному типу услуг.
//
Функция ПолучитьТаблицуУслуг(ТаблицаНачисления, УслугиПоТипам, Отбор) Экспорт
	
	ВидыУслуг    = УслугиПоТипам.НайтиСтроки(Отбор);
	ТаблицаУслуг = ТаблицаНачисления.СкопироватьКолонки();
	
	Для Каждого ВидУслуги Из ВидыУслуг Цикл
		СтрокиНачисления = ТаблицаНачисления.НайтиСтроки(Новый Структура("ВидУслуги", ВидУслуги.ВидУслуги));
		
		Для Каждого СтрокаНачисления Из СтрокиНачисления Цикл
			// Строки, которые относятся к содержанию общего имущества, выводим в отдельном блоке.
			Если Не СтрокаНачисления.СтрокаДляОбщегоИмущества = Истина Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаУслуг.Добавить(), СтрокаНачисления);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СортироватьТаблицуУслугПоПорядку(ТаблицаУслуг);
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПолучитьТаблицуУслуг()

// На основе отбора формирует таблицу начисления со строкой итогов.
//
// Параметры:
//  ТаблицаНачисления - основная таблица начисления по текущему л/с.
//  УслугиПоТипам - таблица услуг по типам.
//  ТаблицаНачисления - таблица начислений по услугам.
//  Отбор - структура с параметрами отбора.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьТаблицуУслугСИтогами(ВидМакета, УслугиПоТипам, ТаблицаНачисления, Отбор, Коммунальная = Ложь, РазделятьУслугиПоТипам = Ложь) Экспорт
	
	Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Чебоксары И РазделятьУслугиПоТипам Тогда
		ТаблицаУслуг = ПолучитьТаблицуУслуг(ТаблицаНачисления, УслугиПоТипам, Отбор);
	Иначе
		СтрокиУслуг  = ТаблицаНачисления.НайтиСтроки(Отбор);
		ТаблицаУслуг = ТаблицаНачисления.Скопировать(СтрокиУслуг);
	КонецЕсли;
	
	НачисленоИПУ   = 0;
	НачисленоОПУ   = 0;
	Начислено      = 0;
	СуммаПовышения = 0;
	Перерасчет     = 0;
	Льгота         = 0;
	КОплате        = 0;
	
	Для Каждого Строка Из ТаблицаУслуг Цикл
		// Суммы в строках детализации не учитываем.
		Если НЕ Строка.СтрокаДетализацииТариф И НЕ Строка.СтрокаДетализацииСост Тогда
			
			Если Коммунальная Тогда
				Если Строка.УслугаПоСчетчикам ИЛИ Строка.УслугаСоставнаяПоСчетчикам Тогда
					Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Чебоксары Тогда
						Строка.КОплатеИПУ = Строка.НачисленоИПУ + Строка.Перерасчет + Строка.СуммаПовышения;
					КонецЕсли;
					НачисленоИПУ   = НачисленоИПУ + Строка.НачисленоИПУ;
					НачисленоОПУ   = НачисленоОПУ + Строка.НачисленоОПУ;
					Начислено      = Начислено + Строка.Начислено;
					СуммаПовышения = СуммаПовышения + Строка.СуммаПовышения;
					Перерасчет     = Перерасчет + Строка.Перерасчет;
					Льгота         = Льгота + Строка.Льгота;
					КОплате        = КОплате + ?(ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Чебоксары, Строка.КОплатеИПУ, Строка.КОплате);
					
				Иначе
					НачисленоИПУ   = НачисленоИПУ + Строка.Начислено;
					Начислено      = Начислено + Строка.Начислено;
					СуммаПовышения = СуммаПовышения + Строка.СуммаПовышения;
					Перерасчет     = Перерасчет + Строка.Перерасчет;
					Льгота         = Льгота + Строка.Льгота;
					КОплате        = КОплате + Строка.КОплате;
					
				КонецЕсли;
				
			Иначе
				Начислено      = Начислено + Строка.Начислено;
				СуммаПовышения = СуммаПовышения + Строка.СуммаПовышения;
				Перерасчет     = Перерасчет + Строка.Перерасчет;
				Льгота         = Льгота + Строка.Льгота;
				КОплате        = КОплате + Строка.КОплате;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТаблицаУслуг.Количество() = 0 Тогда
		СтрокаИтогов = ТаблицаУслуг.Вставить(0);
		
		СтрокаИтогов.НачисленоИПУ   = НачисленоИПУ;
		СтрокаИтогов.НачисленоОПУ   = НачисленоОПУ;
		СтрокаИтогов.Начислено      = Начислено;
		СтрокаИтогов.СуммаПовышения = СуммаПовышения;
		СтрокаИтогов.Перерасчет     = Перерасчет;
		СтрокаИтогов.Льгота         = Льгота;
		СтрокаИтогов.КОплате        = КОплате;
	КонецЕсли;
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПолучитьТаблицуУслугСИтогами()

// Сворачивает начисления по видам услуг в отчете "Квитанции извещения".
//
Процедура СвернутьТаблицуНачисленияКвитанцииИзвещения(ТаблицаСНачислениями, ТаблицаВидовУслуг, СтруктураНастроек = Неопределено) Экспорт
	
	СвернутьТаблицуНачисления(ТаблицаСНачислениями, ТаблицаВидовУслуг, , Истина, СтруктураНастроек);
	
	СортироватьТаблицуНачислений(ТаблицаСНачислениями, Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПустаяСсылка());
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ ВЫВОДА СООБЩЕНИЙ ОБ ОШИБКАХ

#Область СерверныеПроцедурыВыводаСообщенийОбОшибках

// Выводит пользователю сообщение об ошибке при работе на сервере.
//
Процедура ВывестиСообщениеОбОшибкеНаСервере(Объект, ТекстОшибки = "") Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	
	// Проверяем, находится ли отчет в составе конфигурации.
	Если Лев(Объект.ИмяФормы, 5) = "Отчет" Тогда
		
		Сообщение.Текст = "Квитанция неработоспособна. Обратитесь за помощью к разработчикам: otr@rarus.ru";
		
		Если ТекстОшибки = "" Тогда
			Сообщение.Текст = "Квитанция неработоспособна. Обратитесь за помощью к разработчикам: otr@rarus.ru";
		Иначе
			Сообщение.Текст = "Произошла ошибка: " + ТекстОшибки;
		КонецЕсли;
	Иначе
		Сообщение.Текст = "Квитанция неработоспособна. Возможно, требуется адаптация к актуальному релизу программы.
						  |Обратитесь за помощью к разработчикам: otr@rarus.ru";
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

#КонецОбласти
