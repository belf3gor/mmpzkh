////////////////////////////////////////////////////////////////////////////////
// ЗарплатаКадрыОтчеты: Методы, используемые для работы отчетов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ЗарплатаКадрыОтчетыВнутренний.НастроитьВариантыОтчетов(Настройки);
	ЗарплатаКадрыОтчетыПереопределяемый.НастроитьВариантыОтчетов(Настройки);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Находит пользовательскую настройку по имени параметра.
//   Если пользовательская настройка не найдена (например,
//   если параметр не выведен в пользовательские настройки),
//   то получает общую настройку параметра.
//
// Параметры:
//   КомпоновщикНастроекКД - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек.
//   ИмяПараметра          - Строка - Имя параметра.
//
// Возвращаемое значение:
//   ЗначениеПараметраНастроекКомпоновкиДанных - Пользовательская настройка параметра.
//   ЗначениеПараметраКомпоновкиДанных - Общая настройка параметра.
//   Неопределено - Если параметр не найден.
//
Функция НайтиПараметр(КомпоновщикНастроекКД, ИмяПараметра) Экспорт
	ПараметрКД = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	
	Для Каждого ПользовательскаяНастройка Из КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И ПользовательскаяНастройка.Параметр = ПараметрКД Тогда
			Возврат ПользовательскаяНастройка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КомпоновщикНастроекКД.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКД);
КонецФункции

// Добавляет элемент отбора, предварительно проверив доступность поля отбора.
//
// Параметры:
//		Отбор - ОтборКомпоновкиДанных
//		ИмяПоля - Строка
//		ВидСравнения - Системное перечисление ВидСравненияКомпоновкиДанных.
//		ПравоеЗначение - любое значение.
//
Процедура ДобавитьЭлементОтбора(Отбор, ИмяПоля, ВидСравнения, ПравоеЗначение) Экспорт
	
	Если Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля)) <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Отбор, ИмяПоля, ВидСравнения, ПравоеЗначение);
			
	КонецЕсли; 
	
КонецПроцедуры

Функция КлючВарианта(КомпоновщикНастроекИлиНастройки) Экспорт
	Если ТипЗнч(КомпоновщикНастроекИлиНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		НастройкиОтчета = КомпоновщикНастроекИлиНастройки;
	Иначе
		НастройкиОтчета = КомпоновщикНастроекИлиНастройки.ПолучитьНастройки();
	КонецЕсли;
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КлючВарианта"));
	Если ЗначениеПараметра <> Неопределено
		И ЗначениеПараметра.Использование
		И ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
		Возврат ЗначениеПараметра.Значение;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ЭтоКлючВариантаОтчетаРасчетныйЛисток(КлючВарианта) Экспорт
	
	Возврат ЗарплатаКадрыОтчетыВнутренний.ЭтоКлючВариантаОтчетаРасчетныйЛисток(КлючВарианта);
	
КонецФункции

// Выводит в табличный документ области макета с заполненными параметрами коллекций данных.
//
// Параметры:
//		ДокументРезультат	- ТабличныйДокумент
//		Макет				- ТабличныйДокумент
//		ИменаОбластейМакета	- Строка, имена областей макета, перечисленные через запятую
//		Данные, ... Данные9	-Структура, Неопределено содержат значения параметров областей, выводимого макета.
//
Процедура ВывестиВДокументРезультатОбластиМакета(ДокументРезультат, Макет, ИменаОбластейМакета, Данные, Данные1 = Неопределено, Данные2 = Неопределено, Данные3 = Неопределено, Данные4 = Неопределено, Данные5 = Неопределено, Данные6 = Неопределено, Данные7 = Неопределено, Данные8 = Неопределено, Данные9 = Неопределено) Экспорт
	
	ИменаОбластей = СтрРазделить(ИменаОбластейМакета, ",");
	Для Каждого ИмяОбласти Из ИменаОбластей Цикл
		
		Область = Макет.ПолучитьОбласть(ИмяОбласти);
		ЗаполнитьПараметрыОбластиМакета(Область, Данные, Данные1, Данные2, Данные3, Данные4, Данные5, Данные6, Данные7, Данные8, Данные9);
		
		ДокументРезультат.Вывести(Область);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет параметры области табличного документа.
//
// Параметры:
//		Область				- ОбластьЯчеекТабличногоДокумента
//		Данные, ... Данные9	-Структура, Неопределено содержат значения параметров областей, выводимого макета.
//
Процедура ЗаполнитьПараметрыОбластиМакета(Область, Данные, Данные1 = Неопределено, Данные2 = Неопределено, Данные3 = Неопределено, Данные4 = Неопределено, Данные5 = Неопределено, Данные6 = Неопределено, Данные7 = Неопределено, Данные8 = Неопределено, Данные9 = Неопределено) Экспорт
	
	Область.Параметры.Заполнить(Данные);
	
	Если Данные1 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные1);
	КонецЕсли;
	
	Если Данные2 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные2);
	КонецЕсли;
	
	Если Данные3 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные3);
	КонецЕсли;
	
	Если Данные4 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные4);
	КонецЕсли;
	
	Если Данные5 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные5);
	КонецЕсли;
	
	Если Данные6 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные6);
	КонецЕсли;
	
	Если Данные7 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные7);
	КонецЕсли;
	
	Если Данные8 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные8);
	КонецЕсли;
	
	Если Данные9 <> Неопределено Тогда
		Область.Параметры.Заполнить(Данные9);
	КонецЕсли;
	
КонецПроцедуры

Функция ТабельныйНомерНаПечать(Знач ТабельныйНомер) Экспорт
	
	Возврат ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(ТабельныйНомер, Истина, Истина);
	
КонецФункции

Процедура ПередНачаломКомпоновкиРезультата(ОбъектОтчета) Экспорт
	
	ЗапомнитьЗапросыНаборовДанных(ОбъектОтчета.СхемаКомпоновкиДанных.НаборыДанных, ОбъектОтчета);
	
	ДополнительныеПоляПредставлений = ВыбранныеДополнительныеПоляПредставленийОтчета(ОбъектОтчета);
	
	УдаляемыеПоляНаборов = Неопределено;
	УдалитьВыведенныеПоляИзНаборовДанных(ОбъектОтчета.СхемаКомпоновкиДанных.НаборыДанных, ОбъектОтчета.ДополнительныеПоляПредставлений(), УдаляемыеПоляНаборов);
	УдалитьПоляНаборов(ОбъектОтчета.СхемаКомпоновкиДанных.НаборыДанных, УдаляемыеПоляНаборов);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ВывестиДополнительныеПоляПредставленийВОтчет(ОбъектОтчета, ДополнительныеПоляПредставлений);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьПредставленияЗапросов(ОбъектОтчета.СхемаКомпоновкиДанных.НаборыДанных, ОбъектОтчета);
	
КонецПроцедуры

Процедура ПриЗавершенииКомпоновкиРезультата(ОбъектОтчета) Экспорт
	
	ВосстановитьЗапросыНаборовДанных(ОбъектОтчета.СхемаКомпоновкиДанных.НаборыДанных, ОбъектОтчета)
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультатаВТабличныйДокумент(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПередНачаломКомпоновкиРезультата(ОбъектОтчета);
	
	ДокументРезультат.Очистить();
	
	НастройкиОтчета = ОбъектОтчета.КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ОбъектОтчета.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	// Создадим и инициализируем процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	// Обозначим начало вывода
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	ДопСвойства = ОбъектОтчета.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.Вставить("ОтчетПустой", ОтчетыСервер.ОтчетПустой(ОбъектОтчета, ПроцессорКомпоновки));
	
	ПриЗавершенииКомпоновкиРезультата(ОбъектОтчета);
	
КонецПроцедуры

Функция ВыбранныеДополнительныеПоляПредставленийОтчета(ОбъектОтчета)
	
	ДополнительныеПоляПредставлений = Новый Структура;
	ПолученныеОписанияСтрокПутейКДанным = Новый Соответствие;
	
	ВыбранныеДополнительныеПоля = Новый Соответствие;
	
	ВыбранныеПоля = Новый Соответствие;
	Настройки = ОбъектОтчета.КомпоновщикНастроек.ПолучитьНастройки();
	
	ЗаполнитьВыбранныеПоляОтоборовЭлементаСтруктурыОтчета(ВыбранныеПоля, Настройки.Отбор.Элементы);
	ЗаполнитьВыбранныеПоляПорядкаЭлементаСтруктурыОтчета(ВыбранныеПоля, Настройки.Порядок.Элементы);
	ЗаполнитьВыбранныеПоляУсловногоОфрмленияСтруктурыОтчета(ВыбранныеПоля, Настройки.УсловноеОформление.Элементы);
	ЗаполнитьВыбранныеПоляОтчетаЭлементаСтруктуры(Настройки.Структура, ВыбранныеПоля, ОбъектОтчета);
	Для Каждого ВыбранноеПоле Из Настройки.Выбор.Элементы Цикл
		
		ПутьКДанным = Строка(ВыбранноеПоле.Поле);
		ВыбранныеПоля.Вставить(ПутьКДанным, Истина);
		
	КонецЦикла;
	
	Если ВыбранныеПоля.Количество() > 0 Тогда
		
		ВыраженияПолей = ВыраженияПолейНаборовДанных(ОбъектОтчета.СхемаКомпоновкиДанных.НаборыДанных);
		ДополнительныеПоля = ОбъектОтчета.ДополнительныеПоляПредставлений();
		
		Для Каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
			
			Для Каждого КоллекцияПолей Из ДополнительныеПоля Цикл
				
				СтрокиПутей = ПолученныеОписанияСтрокПутейКДанным.Получить(КоллекцияПолей.Ключ);
				Если СтрокиПутей = Неопределено Тогда
					
					СтрокиПутей = СтрокиПутейКДанным(КоллекцияПолей.Значение);
					ПолученныеОписанияСтрокПутейКДанным.Вставить(КоллекцияПолей.Ключ, СтрокиПутей);
					
				КонецЕсли;
				
				ПутьПоля = ВыбранноеПоле.Ключ;
				ЧислоТочек = СтрЧислоВхождений(ПутьПоля, ".");
				Если ЧислоТочек = 0 Тогда
					
					ИмяПоля = ПутьПоля;
					ОписаниеПолей = СтрокиПутей.Получить(ПутьПоля);
					
				Иначе
					
					Пока ЧислоТочек > 0 Цикл
						
						ИмяПоля = Сред(ПутьПоля, СтрНайти(ПутьПоля, ".", НаправлениеПоиска.СКонца) + 1);
						ОписаниеПолей = СтрокиПутей.Получить(ПутьПоля);
						
						Если ОписаниеПолей <> Неопределено Тогда
							Прервать;
						КонецЕсли;
						
						ПутьПоля = Лев(ВыбранноеПоле.Ключ, СтрНайти(ПутьПоля, ".", НаправлениеПоиска.СКонца) - 1);
						ЧислоТочек = СтрЧислоВхождений(ПутьПоля, ".");
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если ОписаниеПолей <> Неопределено Тогда
					
					Если ОписаниеПолей.ПустоеЗначениеНаЯзыкеЗапросов = ВыраженияПолей.Получить(ПутьПоля) Тогда
						
						Если Не ДополнительныеПоляПредставлений.Свойство(КоллекцияПолей.Ключ) Тогда
							ДополнительныеПоляПредставлений.Вставить(КоллекцияПолей.Ключ, ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений());
						КонецЕсли;
						
						Если ДополнительныеПоляПредставлений[КоллекцияПолей.Ключ].Найти(ОписаниеПолей.ПутьПоляСКД, "ПутьПоляСКД") = Неопределено Тогда
							ЗаполнитьЗначенияСвойств(ДополнительныеПоляПредставлений[КоллекцияПолей.Ключ].Добавить(), ОписаниеПолей);
						КонецЕсли;
					
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДополнительныеПоляПредставлений;
	
КонецФункции

Функция ВыраженияПолейНаборовДанных(НаборыДанных, ВыраженияПолей = Неопределено)
	
	Если ВыраженияПолей = Неопределено Тогда
		ВыраженияПолей = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ВыраженияПолейНаборовДанных(НаборДанных.Элементы, ВыраженияПолей);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			
			ЗапросыНабора = СтрРазделить(НаборДанных.Запрос, ";");
			
			Схема = Новый СхемаЗапроса;
			Схема.УстановитьТекстЗапроса(ЗапросыНабора[ЗапросыНабора.Количество() - 1]);
			
			ПакетСхемы = Схема.ПакетЗапросов[0];
			Для Каждого ПолеНабора Из НаборДанных.Поля Цикл
				
				Если ТипЗнч(ПолеНабора) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				
				Колонка = ПакетСхемы.Колонки.Найти(ПолеНабора.Поле);
				Если Колонка <> Неопределено Тогда
					
					КлючКоллекции = ПолеНабора.ПутьКДанным;
					Если Не ЗначениеЗаполнено(КлючКоллекции) Тогда
						КлючКоллекции = ПолеНабора.Поле;
					КонецЕсли;
					
					Если ВыраженияПолей.Получить(КлючКоллекции) = Неопределено Тогда
						ВыраженияПолей.Вставить(КлючКоллекции, Строка(Колонка.Поля[0]));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыраженияПолей;
	
КонецФункции

Процедура УдалитьПоляНаборов(НаборыДанных, УдаляемыеПоляНаборов)
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			УдалитьПоляНаборов(НаборДанных.Элементы, УдаляемыеПоляНаборов);
		КонецЕсли;
		
		Для Каждого ПутьПоляСКД Из УдаляемыеПоляНаборов Цикл
			
			Поле = НаборДанных.Поля.Найти(ПутьПоляСКД);
			Если Поле <> Неопределено Тогда
				НаборДанных.Поля.Удалить(Поле);
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьВыведенныеПоляИзНаборовДанных(НаборыДанных, ДополнительныеПоляПредставлений, УдаляемыеПоляНаборов = Неопределено)
	
	Если УдаляемыеПоляНаборов = Неопределено Тогда
		УдаляемыеПоляНаборов = Новый Массив;
	КонецЕсли;
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			УдалитьВыведенныеПоляИзНаборовДанных(НаборДанных.Элементы, ДополнительныеПоляПредставлений, УдаляемыеПоляНаборов);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			
			ЗапросыНабора = СтрРазделить(НаборДанных.Запрос, ";");
			Схема = Новый СхемаЗапроса;
			Схема.УстановитьТекстЗапроса(ЗапросыНабора[ЗапросыНабора.Количество() - 1]);
			
			ЗапросПакета = Схема.ПакетЗапросов[0];
			ОператорПакета = ЗапросПакета.Операторы[0];
			
			Для Каждого ОписанияПолей Из ДополнительныеПоляПредставлений Цикл
				
				Если ОписанияПолей.Ключ = "_" Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаОписанияПоля Из ОписанияПолей.Значение Цикл
					
					КоллекцияПсевдонимов = Новый Соответствие;
					КоллекцияПутейСКДПсевдонимов = Новый Соответствие;
					Если СтрокаОписанияПоля.ПсевдонимыПолей.Количество() > 0 Тогда
						
						Для Каждого ОписаниеПсевдонимов Из СтрокаОписанияПоля.ПсевдонимыПолей Цикл
							КоллекцияПсевдонимов.Вставить(ОписаниеПсевдонимов.Значение.ПсевдонимПоля, СтрокаОписанияПоля.ПустоеЗначениеНаЯзыкеЗапросов);
							КоллекцияПутейСКДПсевдонимов.Вставить(ОписаниеПсевдонимов.Значение.ПсевдонимПоля, СтрокаОписанияПоля.ПутьПоляСКД);
						КонецЦикла;
						
					Иначе
						КоллекцияПсевдонимов.Вставить(СтрокаОписанияПоля.ИмяПоля, СтрокаОписанияПоля.ПустоеЗначениеНаЯзыкеЗапросов);
						КоллекцияПутейСКДПсевдонимов.Вставить(СтрокаОписанияПоля.ИмяПоля, СтрокаОписанияПоля.ПутьПоляСКД);
					КонецЕсли;
					
					Для Каждого ПсевдонимПоля Из КоллекцияПсевдонимов Цикл
						
						Колонка = ЗапросПакета.Колонки.Найти(ПсевдонимПоля.Ключ);
						Если Колонка <> Неопределено И Строка(Колонка.Поля[0]) = ПсевдонимПоля.Значение Тогда
							
							УдаляемыеПоляНаборов.Добавить(КоллекцияПутейСКДПсевдонимов.Получить(ПсевдонимПоля.Ключ));
							ЗапросПакета.Колонки.Удалить(ЗапросПакета.Колонки.Индекс(Колонка));
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ЗапросыНабора[ЗапросыНабора.Количество() - 1] = Схема.ПолучитьТекстЗапроса();
			НаборДанных.Запрос = СтрСоединить(ЗапросыНабора, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокиПутейКДанным(КоллекцияПолей)
	
	СтрокиПутей = Новый Соответствие;
	Для Каждого СтрокаКоллекции Из КоллекцияПолей Цикл
		
		Если Не ПустаяСтрока(СтрокаКоллекции.ПутьПоляСКД) Тогда
			СтрокиПутей.Вставить(СтрокаКоллекции.ПутьПоляСКД, СтрокаКоллекции);
		КонецЕсли;
		
		Для Каждого ОписаниеПсевдонима Из СтрокаКоллекции.ПсевдонимыПолей Цикл
			СтрокиПутей.Вставить(ОписаниеПсевдонима.Значение.ПутьПоляСКД, СтрокаКоллекции);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтрокиПутей;
	
КонецФункции

Процедура ЗаполнитьВыбранныеПоляОтчетаЭлементаСтруктуры(Структура, ВыбранныеПоля, ОбъектОтчета)
	
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			Или ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			
			Для Каждого ВыбранноеПоле Из ЭлементСтруктуры.Выбор.Элементы Цикл
				
				Если ТипЗнч(ВыбранноеПоле) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				
				ПутьКДанным = Строка(ВыбранноеПоле.Поле);
				ВыбранныеПоля.Вставить(ПутьКДанным, Истина);
				
			КонецЦикла;
			
			Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				
				Если ТипЗнч(ПолеГруппировки) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				
				ПутьКДанным = Строка(ПолеГруппировки.Поле);
				ВыбранныеПоля.Вставить(ПутьКДанным, Истина);
				
			КонецЦикла;
			
			ЗаполнитьВыбранныеПоляОтоборовЭлементаСтруктурыОтчета(ВыбранныеПоля, ЭлементСтруктуры.Отбор.Элементы);
			ЗаполнитьВыбранныеПоляПорядкаЭлементаСтруктурыОтчета(ВыбранныеПоля, ЭлементСтруктуры.Порядок.Элементы);
			ЗаполнитьВыбранныеПоляУсловногоОфрмленияСтруктурыОтчета(ВыбранныеПоля, ЭлементСтруктуры.УсловноеОформление.Элементы);
			
		КонецЕсли;
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ЗаполнитьВыбранныеПоляОтчетаЭлементаСтруктуры(ЭлементСтруктуры.Строки, ВыбранныеПоля, ОбъектОтчета)
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			ЗаполнитьВыбранныеПоляОтчетаЭлементаСтруктуры(ЭлементСтруктуры.Структура, ВыбранныеПоля, ОбъектОтчета)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВыбранныеПоляОтоборовЭлементаСтруктурыОтчета(ВыбранныеПоля, ЭлементыОтобора)
	
	Для Каждого ЭлементОтбора Из ЭлементыОтобора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЗаполнитьВыбранныеПоляОтоборовЭлементаСтруктурыОтчета(ВыбранныеПоля, ЭлементОтбора.Элементы);
		Иначе
			
			Если ЭлементОтбора.Использование Тогда
				
				Если ТипЗнч(ЭлементОтбора.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
					ПутьКДанным = Строка(ЭлементОтбора.ЛевоеЗначение);
					ВыбранныеПоля.Вставить(ПутьКДанным, Истина);
				КонецЕсли;
				
				Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
					ПутьКДанным = Строка(ЭлементОтбора.ПравоеЗначение);
					ВыбранныеПоля.Вставить(ПутьКДанным, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВыбранныеПоляПорядкаЭлементаСтруктурыОтчета(ВыбранныеПоля, ЭлементыПорядка)
	
	Для Каждого ЭлементПорядка Из ЭлементыПорядка Цикл
		
		Если ТипЗнч(ЭлементПорядка) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементПорядка.Использование Тогда
			
			Если ТипЗнч(ЭлементПорядка.Поле) = Тип("ПолеКомпоновкиДанных") Тогда
				ПутьКДанным = Строка(ЭлементПорядка.Поле);
				ВыбранныеПоля.Вставить(ПутьКДанным, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВыбранныеПоляУсловногоОфрмленияСтруктурыОтчета(ВыбранныеПоля, ЭлементыУсловногоОформления)
	
	Для Каждого ЭлементУсловногооформления Из ЭлементыУсловногоОформления Цикл
		
		Если ЭлементУсловногооформления.Использование Тогда
			
			Для Каждого ЭлементОформления Из ЭлементУсловногооформления.Оформление.Элементы Цикл
				
				Если Не ЭлементОформления.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭлементОформления.Параметр <> Новый ПараметрКомпоновкиДанных("Текст") Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(ЭлементОформления.Значение) = Тип("ПолеКомпоновкиДанных") Тогда
					ПутьКДанным = Строка(ЭлементОформления.Значение);
					ВыбранныеПоля.Вставить(ПутьКДанным, Истина);
				КонецЕсли;
				
			КонецЦикла;
			
			ЗаполнитьВыбранныеПоляОтоборовЭлементаСтруктурыОтчета(ВыбранныеПоля, ЭлементУсловногооформления.Отбор.Элементы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция РезультатКомпоновкиМакетаПечатнойФормы(ОбъектОтчета, ДанныеРасшифровки = Неопределено, НастройкиОтчета = Неопределено, ВнешниеНаборыДанных = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатКомпоновкиМакета = Новый Структура;
	КомпоновщикНастроек = ОбъектОтчета.КомпоновщикНастроек;
	
	// Заполняется коллекция идентификаторов пользовательских полей
	Если НастройкиОтчета = Неопределено Тогда
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
	
	РезультатКомпоновкиМакета.Вставить("КлючВарианта", КлючВарианта(НастройкиОтчета));
	ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("Отбор") Тогда
			
			Для Каждого ОписаниеОтбора Из ДополнительныеПараметры.Отбор Цикл
				
				ЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеОтбора.ЛевоеЗначение);
				ЭлементОтбора.ПравоеЗначение = ОписаниеОтбора.ПравоеЗначение;
				ЭлементОтбора.ВидСравнения = ОписаниеОтбора.ВидСравнения;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("КлючВарианта") Тогда
			РезультатКомпоновкиМакета.Вставить("КлючВарианта", ДополнительныеПараметры.КлючВарианта);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДопСвойства.Свойство("ИспользуютсяПользовательскиеНастройкиПечати") Тогда
		НастроитьВыводПользовательскихПолейОтчета(НастройкиОтчета);
	КонецЕсли;
	
	ИдентификаторыМакета = СоответствиеПользовательскихПолей(НастройкиОтчета);
	РезультатКомпоновкиМакета.Вставить("ИдентификаторыМакета", ИдентификаторыМакета);
	
	// Определяется макет печатной формы
	МакетПечатнойФормы = Неопределено;
	ДопСвойства.Свойство("МакетПечатнойФормы", МакетПечатнойФормы);
	
	Если МакетПечатнойФормы = Неопределено Тогда
		
		МакетыВариантовОтчетов = МакетыВариантовОтчетовПечатныхФорм();
		ПолноеИмяОбъекта = ОбъектОтчета.Метаданные().ПолноеИмя();
		
		ПутьКМакету = МакетыВариантовОтчетов.Получить(ПолноеИмяОбъекта + "." + РезультатКомпоновкиМакета.КлючВарианта);
		МакетПечатнойФормы = УправлениеПечатью.МакетПечатнойФормы(ПутьКМакету);
		
	КонецЕсли;
	
	РезультатКомпоновкиМакета.Вставить("МакетПечатнойФормы", МакетПечатнойФормы);
	
	Если ДопСвойства.Свойство("МакетКомпоновкиДанных")
		И ДопСвойства.МакетКомпоновкиДанных <> Неопределено Тогда
		
		МакетКомпоновки = ДопСвойства.МакетКомпоновкиДанных;
		ДопСвойства.Удалить("МакетКомпоновкиДанных");
		
	Иначе
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ОбъектОтчета.СхемаКомпоновкиДанных,
			НастройкиОтчета, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	КонецЕсли;
	
	Если ДопСвойства.Свойство("ФормированиеМакетаКомпоновкиДанных") Тогда
		
		ДопСвойства.Вставить("СкомпонованныйМакетКомпоновкиДанных", МакетКомпоновки);
		РезультатКомпоновкиМакета.Вставить("ДанныеОтчета", Новый Массив);
		
		ДопСвойства.Вставить("ОтчетПустой", Истина);
		
	Иначе
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, , Истина);
		
		ДанныеОтчета = Новый ДеревоЗначений;
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ДопСвойства.Вставить("ОтчетПустой", ДанныеОтчета.Строки.Количество() = 0);
		
		РезультатКомпоновкиМакета.Вставить("ДанныеОтчета", ДанныеОтчета);
		
	КонецЕсли;
	
	РезультатКомпоновкиМакета.Вставить("ОтчетПустой", ДопСвойства.ОтчетПустой);
	
	Возврат РезультатКомпоновкиМакета;
	
КонецФункции

Функция СоответствиеПользовательскихПолей(НастройкиОтчета) Экспорт
	
	ЭлементыПользовательскихПолей = НастройкиОтчета.ПользовательскиеПоля.Элементы;
	
	СоответствиеПользовательскихПолей = Новый Соответствие;
	
	Для каждого Элемент Из ЭлементыПользовательскихПолей Цикл
		
		ИдентификаторМакета = ЗарплатаКадрыКлиентСервер.ИдентификаторМакетаПечатнойФормы(Элемент.Заголовок);
		СоответствиеПользовательскихПолей.Вставить(ИдентификаторМакета, СтрЗаменить(Элемент.ПутьКДанным,".",""));
		
	КонецЦикла;
	
	Возврат СоответствиеПользовательскихПолей;
	
КонецФункции

Функция ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ДанныеОтчета) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ИдентификаторыМакета <> Неопределено Тогда
		
		СтруктураДанных = Новый Структура;
		Для Каждого ОписаниеИдентификатораМакета Из ИдентификаторыМакета Цикл
			СтруктураДанных.Вставить(ОписаниеИдентификатораМакета.Значение);
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеОтчета);
		
		Для Каждого ОписаниеИдентификатораМакета Из ИдентификаторыМакета Цикл
			ЗначенияЗаполнения.Вставить(ОписаниеИдентификатораМакета.Ключ, СтруктураДанных[ОписаниеИдентификатораМакета.Значение]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Процедура ЗаполнитьПараметрыПользовательскихПолей(Макет, Данные, СоответствиеПользовательскихПолей, ИменаЗаполняемыхПолей = "") Экспорт
	
	ЗаполняемыеПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаЗаполняемыхПолей);
	
	СтруктураДанных = Новый Структура;
	Для каждого СоответствиеПользовательскогоПоля Из СоответствиеПользовательскихПолей Цикл
		
		Если ЗаполняемыеПоля.Количество() > 0
			И ЗаполняемыеПоля.Найти(СоответствиеПользовательскогоПоля.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураДанных.Вставить(СоответствиеПользовательскогоПоля.Значение);
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Данные);
	
	СтруктураЗначенийПользовательскихПолей = Новый Структура;
	Для каждого СоответствиеПользовательскогоПоля Из СоответствиеПользовательскихПолей Цикл
		
		Если ЗаполняемыеПоля.Количество() > 0
			И ЗаполняемыеПоля.Найти(СоответствиеПользовательскогоПоля.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураЗначенийПользовательскихПолей.Вставить(СоответствиеПользовательскогоПоля.Ключ, СтруктураДанных[СоответствиеПользовательскогоПоля.Значение]);
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Макет.Параметры, СтруктураЗначенийПользовательскихПолей);
	
КонецПроцедуры

Процедура ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета, НаАванс = Ложь) Экспорт
	
	ЗарплатаКадрыОтчетыВнутренний.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета, НаАванс);
	
КонецПроцедуры

Функция ЕстьГруппировкаДетальныхЗаписей(Структура)
	
	ЕстьДетальныеЗаписи = Ложь;
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		
		Если Не ЭлементСтруктуры.Использование Тогда
			Прервать;
		КонецЕсли;
		
		Если ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() > 0 Тогда
			
			Если ЕстьГруппировкаДетальныхЗаписей(ЭлементСтруктуры.Структура) Тогда
				
				ЕстьДетальныеЗаписи = Истина;
				Прервать;
				
			КонецЕсли;
			
		Иначе
			
			ЕстьДетальныеЗаписи = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьДетальныеЗаписи;
	
КонецФункции

Процедура НастроитьВыводПользовательскихПолейОтчета(НастройкиОтчета)
	
	Для Каждого ЭлементВыбора Из НастройкиОтчета.Выбор.Элементы Цикл
		
		Если Не ЭлементВыбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ДоступноеПоле = НастройкиОтчета.ДоступныеПоляВыбора.НайтиПоле(ЭлементВыбора.Поле);
		Если ДоступноеПоле = Неопределено Или ДоступноеПоле.Ресурс Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьПоля = Строка(ЭлементВыбора.Поле);
		
		ПользовательскоеПоле = ПользовательскоеПоле(НастройкиОтчета, ПутьПоля);
		Если ПользовательскоеПоле <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияСкобки = СтрНайти(ПутьПоля, "[");
		Если ПозицияСкобки = 0 Тогда
			СловаПутиПоля = СтрРазделить(ПутьПоля, ".");
		Иначе
			
			ПутьПоляБезСкобки = Лев(ПутьПоля, ПозицияСкобки - 2);
			СловаПутиПоля = СтрРазделить(ПутьПоляБезСкобки, ".");
			
		КонецЕсли;
		
		Если СловаПутиПоля.Количество() > 1 Тогда
			
			СловаПутиПоля.Удалить(СловаПутиПоля.Количество() - 1);
			ПутьРодителя = СтрСоединить(СловаПутиПоля, ".");
			
			Родитель = Новый ПолеКомпоновкиДанных(ПутьРодителя);
			
		Иначе
			Родитель = Неопределено;
		КонецЕсли;
		
		Если Не ВывестиВСтруктуру(НастройкиОтчета.Структура, ЭлементВыбора.Поле, Родитель) Тогда
			
			ПользовательскоеПоле = НастройкиОтчета.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
			ПользовательскоеПоле.Заголовок = ПутьПоля;
			
			ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(ПользовательскоеПоле.Заголовок);
			ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей(ПользовательскоеПоле.Заголовок);
			
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
			
			НовоеПоле = НастройкиОтчета.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			НовоеПоле.Поле = ВыбранноеПоле;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПользовательскоеПоле(НастройкиОтчета, ПутьКДанным)
	
	Поле = Неопределено;
	
	Для Каждого ЭлементКоллекции Из НастройкиОтчета.ПользовательскиеПоля.Элементы Цикл
		
		Если ПутьКДанным = ЭлементКоллекции.ПутьКДанным Тогда
			
			Поле = ЭлементКоллекции;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Поле;
	
КонецФункции

Функция ВывестиВСтруктуру(СтруктураНастроек, Поле, Родитель)
	
	ВыведеноВСтруктуру = Ложь;
	
	Для Каждого ЭлементСтруктуры Из СтруктураНастроек Цикл
		
		Если Не ЭлементСтруктуры.Использование Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого ЭлементВыбора Из ЭлементСтруктуры.Выбор.Элементы Цикл
			
			Если ТипЗнч(ЭлементВыбора) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Поле = ЭлементВыбора.Поле Тогда
				ВыведеноВСтруктуру = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ВыведеноВСтруктуру И Родитель <> Неопределено Тогда
			
			Для Каждого ЭлементГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				
				Если ТипЗнч(ЭлементГруппировки) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				
				Если Родитель = ЭлементГруппировки.Поле Тогда
					
					НовоеПоле = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
					НовоеПоле.Поле = Поле;
					
					ВыведеноВСтруктуру = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ВыведеноВСтруктуру Тогда
			Прервать;
		ИначеЕсли ВывестиВСтруктуру(ЭлементСтруктуры.Структура, Поле, Родитель) Тогда
			
			ВыведеноВСтруктуру = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыведеноВСтруктуру;
	
КонецФункции

Процедура ДобавитьГруппировкиДетальныхЗаписей(СтруктураНастроек, ГруппировкиДетальныхЗаписей)
	
	Для Каждого ЭлементСтруктуры Из СтруктураНастроек Цикл
		
		Если Не ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
			
			НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГруппировкиДетальныхЗаписей.Добавить(НоваяГруппировка);
			
		Иначе
			ДобавитьГруппировкиДетальныхЗаписей(ЭлементСтруктуры.Структура, ГруппировкиДетальныхЗаписей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьВариантОтчетаРасчетныйЛисток(НастройкиОтчета)
	
	ЗарплатаКадрыОтчетыВнутренний.НастроитьВариантОтчетаРасчетныйЛисток(НастройкиОтчета);
	
КонецПроцедуры

Процедура ОтчетАнализНачисленийИУдержанийПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ЗарплатаКадрыОтчетыВнутренний.ОтчетАнализНачисленийИУдержанийПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
	
КонецПроцедуры

Функция ОтчетРасчетныйЛисток() Экспорт
	
	ОтчетАнализНачисленийИУдержаний = Отчеты.АнализНачисленийИУдержаний.Создать();
	
	ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("УстанавливаетсяМакетКомпоновкиДанных", Истина);
	ОтчетАнализНачисленийИУдержаний.ИнициализироватьОтчет();
	
	ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.ЗагрузитьНастройки(
		ОтчетАнализНачисленийИУдержаний.СхемаКомпоновкиДанных.ВариантыНастроек.РасчетныйЛисток.Настройки);
	
	МакетКомпоновкиДанных = МакетКомпоновкиДанныхПоМетаданнымОтчета(Метаданные.Отчеты.АнализНачисленийИУдержаний, "РасчетныйЛисток");
	ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("МакетКомпоновкиДанных", МакетКомпоновкиДанных);
	
	Возврат ОтчетАнализНачисленийИУдержаний;
	
КонецФункции

Функция НомерНаПечать(Знач Номер) Экспорт
	
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
	
	Если НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
		Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Истина, Истина);
	КонецЕсли;
	
	Возврат Номер;
	
КонецФункции

Функция ПодразделениеНаПечать(Знач Подразделение) Экспорт
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений Тогда
			Возврат Подразделение.ПолноеНаименование();
		Иначе
			Возврат Подразделение;
		КонецЕсли;
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ТарифнаяСтавкаНаПечать(Знач ТарифнаяСтавка, Группировка = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ТарифнаяСтавка) Тогда
		
		ФорматнаяСтрока = "ЧДЦ=0; ЧН=";
		Если Не Группировка Тогда
			ФорматнаяСтрока = ФорматнаяСтрока + "; ЧГ=";
		КонецЕсли;
		
		Возврат Формат(Цел(ТарифнаяСтавка), ФорматнаяСтрока) + " " + НСтр("ru='руб'") + ". " + Формат((ТарифнаяСтавка - Цел(ТарифнаяСтавка)), "ЧЦ=2; ЧДЦ=; ЧС=-2; ЧН=; ЧВН=") + " " + НСтр("ru='коп'") + ".";
		
	КонецЕсли;
	
	Возврат "_______________ " + НСтр("ru='руб'") + ". ____ " + НСтр("ru='коп'") + ".";
	
КонецФункции

Функция ПросклоненныеФИО(Знач ФИО, Падеж, Пол) Экспорт
	
	РезультатСклонения = "";
	Если ФизическиеЛицаЗарплатаКадры.Просклонять(ФИО, Падеж, РезультатСклонения, Пол) Тогда
		ФИО = РезультатСклонения;
	КонецЕсли;
	
	Возврат ФИО;
	
КонецФункции

Функция ФорматДатыЧислоВКавычкахМесяцПрописью(Знач ФорматируемаяДата, ВыводитьШаблонПустойДаты = Истина) Экспорт
	
	Если ФорматируемаяДата = NULL Тогда
		ФорматируемаяДата = '00010101';
	КонецЕсли;
	
	СтрокаФормата = "Л=ru_RU; ДФ='''""''дд''""'' ММММ гггг ''г.'''";
	Если ВыводитьШаблонПустойДаты Тогда
		СтрокаФормата = СтрокаФормата + "; ДП='""___"" ______________ 20____ г.'";
	КонецЕсли;
	
	Возврат Формат(ФорматируемаяДата, СтрокаФормата);
	
КонецФункции

Функция РазрядКатегорияНаПечать(РазрядКатегория) Экспорт
	
	Возврат ЗарплатаКадрыОтчетыВнутренний.РазрядКатегорияНаПечать(РазрядКатегория);
	
КонецФункции

Функция МесяцНачисленияНаПечать(Знач МесяцНачисления) Экспорт
	
	Возврат ВРег(Формат(МесяцНачисления, "ДФ='ММММ гггг'"));
	
КонецФункции


#Область РаботаСМакетамиКомпоновкиДанных

Функция МакетКомпоновкиДанныхПоМетаданнымОтчета(МетаданныеОтчета, КлючВарианта, ПодготовитьМакетЕслиНеНайден = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МакетКомпоновки = Неопределено;
	
	Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеОтчета);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчет", Отчет);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МакетыКомпоновкиДанных.МакетКомпоновкиДанных,
		|	МакетыКомпоновкиДанных.ВерсияКонфигурации
		|ИЗ
		|	РегистрСведений.МакетыКомпоновкиДанных КАК МакетыКомпоновкиДанных
		|ГДЕ
		|	МакетыКомпоновкиДанных.Отчет = &Отчет
		|	И МакетыКомпоновкиДанных.КлючВарианта = &КлючВарианта";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.ВерсияКонфигурации = Метаданные.Версия Тогда
			МакетКомпоновки = Выборка.МакетКомпоновкиДанных.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если МакетКомпоновки = Неопределено И ПодготовитьМакетЕслиНеНайден Тогда
		МакетКомпоновки = ДобавитьМакетКомпоновкиДанныхОтчета(Отчет, МетаданныеОтчета.Имя, КлючВарианта);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МакетКомпоновки;
	
КонецФункции

Процедура ОчиститьМакетыКомпоновкиДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.МакетыКомпоновкиДанных.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ДобавитьМакетКомпоновкиДанныхОтчета(Отчет, ИмяОтчета, КлючВарианта)
	
	ОтчетОбъект = Отчеты[ИмяОтчета].Создать();
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек[КлючВарианта].Настройки);
	ОтчетОбъект.ИнициализироватьОтчет(КлючВарианта);
	
	ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ФормированиеМакетаКомпоновкиДанных", Истина);
	ОтчетОбъект.СкомпоноватьРезультат(Новый ТабличныйДокумент);
	
	МакетКомпоновкиДанных = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.СкомпонованныйМакетКомпоновкиДанных;
	ЗапомнитьМакетКомпоновкиДанных(Отчет, КлючВарианта, МакетКомпоновкиДанных);
	
	Возврат МакетКомпоновкиДанных;
	
КонецФункции

Процедура ЗапомнитьМакетКомпоновкиДанных(Отчет, КлючВарианта, МакетКомпоновкиДанных) Экспорт
	
	НаборЗаписей = РегистрыСведений.МакетыКомпоновкиДанных.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Отчет.Установить(Отчет);
	НаборЗаписей.Отбор.КлючВарианта.Установить(КлючВарианта);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Отчет = Отчет;
	Запись.КлючВарианта = КлючВарианта;
	Запись.МакетКомпоновкиДанных = Новый ХранилищеЗначения(МакетКомпоновкиДанных);
	Запись.ВерсияКонфигурации = Метаданные.Версия;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ОчиститьМакетОтчета(МетаданныеОтчета, КлючВарианта = Неопределено) Экспорт
	
	Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеОтчета);
	
	НаборЗаписей = РегистрыСведений.МакетыКомпоновкиДанных.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Отчет.Установить(Отчет);
	
	Если КлючВарианта <> Неопределено Тогда
		НаборЗаписей.Отбор.КлючВарианта.Установить(КлючВарианта);
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти


#Область МетодыПодсистемыВариантыОтчетов

// Возвращает список полей группировок всех группировок компоновщика настроек.
//
// Параметры: 
//		КомпоновщикНастроек - компоновщик настроек.
//		БезПользовательскихПолей - признак не включения пользовательских настроек СКД.
//
Функция ПолучитьПоляГруппировок(КомпоновщикНастроек, БезПользовательскихПолей = Ложь) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей);
	Возврат СписокПолей;
	
КонецФункции

// Добавляет вложенные поля группировки.
Процедура ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Строки, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Колонки, СписокПолей, БезПользовательскихПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Серии, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Точки, СписокПолей, БезПользовательскихПолей);
		Иначе
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(ТекущееПолеГруппировки.Поле);
				Если ДоступноеПоле <> Неопределено 
				  И (ДоступноеПоле.Родитель = Неопределено ИЛИ Не БезПользовательскихПолей ИЛИ ДоступноеПоле.Родитель.Поле <> Новый ПолеКомпоновкиДанных("UserFields")) Тогда
					СписокПолей.Добавить(Строка(ДоступноеПоле.Поле), ДоступноеПоле.Заголовок);
				КонецЕсли;
			КонецЦикла;
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Структура, СписокПолей, БезПользовательскихПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает последний элемент структуры - группировку.
//
// Параметры:
//		ЭлементСтруктурыНастроек - элемент структуры компоновки данных.
//		Строки - признак для получения последний группировки строк (Серий) или колонок (точек).
//
Функция ПолучитьПоследнийЭлементСтруктуры(ЭлементСтруктурыНастроек, Строки = Истина) Экспорт
	
	Если ТипЗнч(ЭлементСтруктурыНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктурыНастроек.Настройки;
	ИначеЕсли ТипЗнч(ЭлементСтруктурыНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктурыНастроек;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Структура = Настройки.Структура;
	Если Структура.Количество() = 0 Тогда
		Возврат Настройки;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции

#КонецОбласти


#Область Т49

Процедура ПриКомпоновкеРезультатаТ49(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
	
	Попытка
		
		КомпоновщикНастроек = ОбъектОтчета.КомпоновщикНастроек;
		СхемаКомпоновкиДанных = ОбъектОтчета.СхемаКомпоновкиДанных;
		
		КлючВарианта = КлючВарианта(КомпоновщикНастроек);
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФормаТ49";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = ОбъектОтчета.КомпоновщикНастроек.ПолучитьНастройки();
		
		ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета, НаАванс);
		ДополнительныеНачисления = УчетНачисленнойЗарплаты.ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49();
		УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисления, НастройкиОтчета, 5, , НаАванс);
		ДополнительныеУдержания = УчетНачисленнойЗарплаты.ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49();
		УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеУдержания, НастройкиОтчета, 3, "Удержания", НаАванс);
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
			НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		СоответствиеПользовательскихПолей = СоответствиеПользовательскихПолей(НастройкиОтчета);
		
		Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеДокумента") Тогда
			НаборыВнешнихДанных = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеДокумента;
		Иначе
			НаборыВнешнихДанных = НаборыВнешнихДанныхАнализНачисленийИУдержаний();
		КонецЕсли;
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыВнешнихДанных, , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		ПорядокДопНачислений = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачислений(ДополнительныеНачисления, ДанныеОтчета, СоответствиеПользовательскихПолей, 8);
		ПорядокДопУдержаний = УчетНачисленнойЗарплаты.ПорядокДополнительныхУдержаний(ДополнительныеУдержания, ДанныеОтчета, СоответствиеПользовательскихПолей, 15);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_Т49");
		
		Макеты = Новый Структура("ШапкаДокумента,Шапка,Строка,ПустаяСтрока,Подвал,ИтогоПоСтранице,ИтогоПоВедомости");
		
		Если НаАванс Тогда
			Макеты.ШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокументаПерваяПоловина");
		Иначе
			Макеты.ШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
		КонецЕсли;
		
		Макеты.Шапка = Макет.ПолучитьОбласть("Шапка");
		Макеты.Строка = Макет.ПолучитьОбласть("Строка");
		Макеты.ПустаяСтрока = Макет.ПолучитьОбласть("Строка");
		Макеты.Подвал = Макет.ПолучитьОбласть("Подвал");
		Макеты.ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		Макеты.ИтогоПоВедомости = Макет.ПолучитьОбласть("ИтогоПоВедомости");
		
		ДанныеОтчета.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(18,0));
		Для каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
			Для Каждого СтрокаОрганизации Из СтрокаМесяца.Строки Цикл
				ВывестиОрганизациюТ49(ОбъектОтчета, СтрокаОрганизации, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний);
			КонецЦикла;
		КонецЦикла;
		
		ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
		ДопСвойства.Вставить("ОтчетПустой", ДанныеОтчета.Строки.Количество() = 0);
		
		СтандартнаяОбработка = Ложь;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета Т-49 внесены критичные изменения. Отчет не будет сформирован.'")
			+ " " + КраткоеПредставлениеОшибки(Инфо);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВывестиОрганизациюТ49(ОбъектОтчета, СтрокаОрганизации, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний)
	
	КомпоновщикНастроек = ОбъектОтчета.КомпоновщикНастроек;
	
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	КВыплатеПоВедомости = 0;
	
	Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаОрганизации);
	Макеты.ШапкаДокумента.Параметры.ДатаД = Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
	Макеты.Шапка.Параметры.Заполнить(СтрокаОрганизации);
	
	Документ = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Документ", Документ);
	Если Документ <> Неопределено Тогда
		
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Документ,
			"Номер, Дата, Руководитель, ДолжностьРуководителя, ГлавныйБухгалтер, Кассир, ДолжностьКассира, Бухгалтер");
			ЗарплатаКадрыОтчетыПереопределяемый.ДанныеДокумента(Документ, ДанныеДокумента);
	Иначе
		ДанныеДокумента = Новый Структура("Организация,Руководитель,ДолжностьРуководителя,ГлавныйБухгалтер,Кассир,ДолжностьКассира", СтрокаОрганизации.Организация);
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ДанныеДокумента, КонецМесяца(СтрокаОрганизации.МесяцНачисления));
		ДанныеДокумента.Удалить("Организация");
		ДанныеДокумента.Вставить("Номер", "");
		ДанныеДокумента.Вставить("Дата", "");
		ДанныеДокумента.Вставить("Бухгалтер", Справочники.ФизическиеЛица.ПустаяСсылка());
		
	КонецЕсли;
	
	СписокОтветственных = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеДокумента.Руководитель) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Руководитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.ГлавныйБухгалтер) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.ГлавныйБухгалтер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Кассир) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Кассир);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Бухгалтер) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Бухгалтер);
	КонецЕсли;
	
	РасшифровкиПодписей = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокОтветственных,"ИОФамилия", КонецМесяца(СтрокаОрганизации.МесяцНачисления));
	
	Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
		Макеты.Шапка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СтрокаТаблицы.Заголовок;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
		Макеты.Шапка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СтрокаТаблицы.Заголовок;
	КонецЦикла;
	
	Макеты.ШапкаДокумента.Параметры.ДатаД = ДанныеДокумента.Дата;
	Если ЗначениеЗаполнено(ДанныеДокумента.Номер) Тогда
		Макеты.ШапкаДокумента.Параметры.НомерД = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер, Истина, Истина);
	КонецЕсли;
	
	Макеты.ШапкаДокумента.Параметры.ДолжностьРуководителя = ДанныеДокумента.ДолжностьРуководителя;
	ДанныеРуководителя = РасшифровкиПодписей.Найти(ДанныеДокумента.Руководитель, "ФизическоеЛицо");
	Если ДанныеРуководителя <> Неопределено Тогда
		Макеты.ШапкаДокумента.Параметры.РуководительРасшифровкаПодписи = ДанныеРуководителя.ИОФамилия;
	КонецЕсли;
	
	ДанныеГлавногоБухгалтера = РасшифровкиПодписей.Найти(ДанныеДокумента.ГлавныйБухгалтер, "ФизическоеЛицо");
	Если ДанныеГлавногоБухгалтера <> Неопределено Тогда
		Макеты.ШапкаДокумента.Параметры.ГлавныйБухгалтерРасшифровкаПодписи = ДанныеГлавногоБухгалтера.ИОФамилия;
	КонецЕсли;
	
	ЗаполнитьПараметрыПользовательскихПолей(Макеты.ШапкаДокумента, СтрокаОрганизации, СоответствиеПользовательскихПолей);
	
	ДанныеВедомости = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеВедомости", ДанныеВедомости);
	Если ДанныеВедомости = Неопределено Тогда
		КВыплате = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить("КВыплате")];
	Иначе
		
		КВыплате = ДанныеВедомости.Итог("КВыплате");
		СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить("КВыплате")] = КВыплате;
		
		// Упорядочим строки как в документе
		Для Каждого СтрокаГоловногоСотрудника Из СтрокаОрганизации.Строки Цикл
			
			Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
				
				СтрокаДанныхВедомости = ДанныеВедомости.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
				Если СтрокаДанныхВедомости <> Неопределено Тогда
					
					СтрокаСотрудника.НомерСтроки = СтрокаДанныхВедомости.НомерСтроки;
					Если СтрокаГоловногоСотрудника.НомерСтроки < СтрокаСотрудника.НомерСтроки Тогда
						СтрокаГоловногоСотрудника.НомерСтроки = СтрокаСотрудника.НомерСтроки;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		СтрокаОрганизации.Строки.Сортировать("НомерСтроки", Истина);
		
	КонецЕсли;
	
	Если КВыплате > 0 Тогда
		
		ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
		Макеты.ШапкаДокумента.Параметры.СуммаВсегоПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(КВыплате, ВалютаУчета);
		Макеты.ШапкаДокумента.Параметры.СуммаДокРублей = Цел(КВыплате);
		Макеты.ШапкаДокумента.Параметры.СуммаДокКопеек = (КВыплате - Цел(КВыплате)) * 100;
		
	КонецЕсли;
	
	ПодразделениеВШапке = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ПодразделениеВШапке", ПодразделениеВШапке);
	Если ПодразделениеВШапке <> Неопределено Тогда
		Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода = ПодразделениеВШапке;
	КонецЕсли;
	
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода) Тогда
		Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода = Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода.ПолноеНаименование();
	КонецЕсли;
	
	ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
	
	ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаОрганизации, СоответствиеПользовательскихПолей);
	ДокументРезультат.Вывести(Макеты.Шапка);
	
	НомерСтроки = 0;
	ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ49(СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний);
	
	Для Каждого СтрокаСотрудника Из СтрокаОрганизации.Строки Цикл
		ВывестиСотрудникаТ49(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, ДанныеВедомости, КВыплатеПоВедомости, ПорядокДопНачислений, ПорядокДопУдержаний);
	КонецЦикла;
	
	ДополнитьСтраницуТ49(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги);
	Макеты.ИтогоПоВедомости.Параметры.Заполнить(СтрокаОрганизации);
	
	Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
		СуммаЯчейки = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
		Макеты.ИтогоПоВедомости.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
		СуммаЯчейки = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
		Макеты.ИтогоПоВедомости.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
	КонецЦикла;
	
	ЗаполнитьПараметрыПользовательскихПолей(Макеты.ИтогоПоВедомости, СтрокаОрганизации, СоответствиеПользовательскихПолей);
	Макеты.Подвал.Параметры.Заполнить(СтрокаОрганизации);
	
	Если Документ <> Неопределено Тогда
		
		Макеты.Подвал.Параметры.ДолжностьКассира = ДанныеДокумента.ДолжностьКассира;
		ДанныеКассира = РасшифровкиПодписей.Найти(ДанныеДокумента.Кассир, "ФизическоеЛицо");
		Если ДанныеКассира <> Неопределено Тогда
			Макеты.Подвал.Параметры.ФИОКассира = ДанныеКассира.ИОФамилия;
		КонецЕсли;
		
		ДанныеБухгалтера = РасшифровкиПодписей.Найти(ДанныеДокумента.Бухгалтер, "ФизическоеЛицо");
		Если ДанныеБухгалтера <> Неопределено Тогда
			Макеты.Подвал.Параметры.ФИОБухгалтера = ДанныеБухгалтера.ИОФамилия;
		КонецЕсли;
		
	КонецЕсли;
	
	Макеты.ИтогоПоВедомости.Параметры.КВыплате = КВыплатеПоВедомости;
	ДокументРезультат.Вывести(Макеты.ИтогоПоВедомости);
	ДокументРезультат.Вывести(Макеты.Подвал);
	
КонецПроцедуры

Процедура ВывестиСотрудникаТ49(НомерСтроки, СтрокаГоловногоСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, ДанныеВедомости, КВыплатеПоВедомости, ПорядокДопНачислений, ПорядокДопУдержаний)
	
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
	НомерСтроки = НомерСтроки + 1;
	
	МакетСотрудника = Новый ТабличныйДокумент;
	ПромежуточныеИтогиПоГоловномуСотруднику = ПромежуточныеИтогиПоСтраницеТ49(СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний);
	НесколькоРабочихМест = СтрокаГоловногоСотрудника.Строки.Количество() > 1;
	
	Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
		
		Если ДанныеВедомости <> Неопределено Тогда
			
			СтрокаДанныхВедомости = ДанныеВедомости.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
			Если СтрокаДанныхВедомости <> Неопределено Тогда
				СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("КВыплате")] = СтрокаДанныхВедомости.КВыплате;
			КонецЕсли;
			
		КонецЕсли;
		
		Макеты.Строка.Параметры.Заполнить(СтрокаСотрудника);
		
		Если НЕ НастройкиПечатныхФорм.ВыводитьПолныеФИОВСписочныхПечатныхФормах Тогда
			
			ФИО = Новый Структура("Фамилия, Имя, Отчество");
			ФИО.Фамилия = СтрокаСотрудника.Фамилия;
			ФИО.Имя = СтрокаСотрудника.Имя;
			ФИО.Отчество = СтрокаСотрудника.Отчество;
			Макеты.Строка.Параметры.ФизическоеЛицоФИО = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(ФИО);
			
		КонецЕсли;
		
		ЗаполнитьПараметрыПользовательскихПолей(Макеты.Строка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
			
			СуммаЯчейки = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
			Макеты.Строка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
			
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
			
			СуммаЯчейки = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
			Макеты.Строка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
			
		КонецЦикла;
		
		ОтработаноРабочихДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноРабочихДней")];
		ОтработаноРабочихЧасов = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноРабочихЧасов")];
		ОтработаноПраздничныхДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноПраздничныхДней")];
		ОтработаноПраздничныхЧасов = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноПраздничныхЧасов")];
		ОтработаноВыходныхДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноВыходныхДней")];
		ОтработаноВыходныхЧасов = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноВыходныхЧасов")];
		
		Если ЗначениеЗаполнено(ОтработаноРабочихДней) И ОтработаноРабочихДней > 0 Тогда 
			Макеты.Строка.Параметры.ОтработаноРабочихДней = "" + ОтработаноРабочихДней + " (" + ОтработаноРабочихЧасов + ")";
		Иначе
			Макеты.Строка.Параметры.ОтработаноРабочихДней = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтработаноПраздничныхДней) И ОтработаноПраздничныхДней > 0 Тогда 
			Макеты.Строка.Параметры.ОтработаноПраздничныхДней = "" + ОтработаноПраздничныхДней + " (" + ОтработаноПраздничныхЧасов + ")";
		Иначе
			Макеты.Строка.Параметры.ОтработаноПраздничныхДней = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтработаноВыходныхДней) И ОтработаноВыходныхДней > 0 Тогда 
			Макеты.Строка.Параметры.ОтработаноВыходныхДней = "" + ОтработаноВыходныхДней + " (" + ОтработаноВыходныхЧасов + ")";
		Иначе
			Макеты.Строка.Параметры.ОтработаноВыходныхДней = "";
		КонецЕсли;
		
		Макеты.Строка.Параметры.НомерПП = НомерСтроки;
		
		Если Макеты.Строка.Параметры.КВыплате < 0 Тогда
			Макеты.Строка.Параметры.КВыплате = 0;
		КонецЕсли;
		
		ДобавитьВПромежуточныйИтог(ПромежуточныеИтогиПоГоловномуСотруднику, Макеты.Строка.Параметры);
		КВыплатеПоВедомости = КВыплатеПоВедомости + Макеты.Строка.Параметры.КВыплате;
		
		Если НесколькоРабочихМест Тогда
			
			ЗаполнитьПараметрыПользовательскихПолей(
				Макеты.Строка, СтрокаГоловногоСотрудника, СоответствиеПользовательскихПолей,
				"ВсегоНачислено,ДолгЗаОрганизацией,ДолгЗаСотрудником,КВыплате");
			
			Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
				
				СуммаЯчейки = СтрокаГоловногоСотрудника[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
				Макеты.Строка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
				
			КонецЦикла;
			
		КонецЕсли;
			
		Если  СтрокаСотрудника.Сотрудник <> СтрокаСотрудника.ГоловнойСотрудник Тогда
			Макеты.Строка.Параметры.ДолжностьНаКонецПериодаНаименованиеКраткое = СтрокаСотрудника.СотрудникУточнениеНаименования;
		КонецЕсли; 
		
		МакетСотрудника.Вывести(Макеты.Строка);
		
	КонецЦикла;
	
	Если Не ЕстьИтогиПоГоловномуСотруднику(ПромежуточныеИтогиПоГоловномуСотруднику) Тогда
		
		НомерСтроки = НомерСтроки - 1;
		Возврат;
		
	КонецЕсли;
	
	Если МакетСотрудника.ВысотаТаблицы > 1 Тогда
		
		// Номер по порядку
		МакетСотрудника.Область(1, 1, МакетСотрудника.ВысотаТаблицы, 1).Объединить();
		// Табельный номер
		МакетСотрудника.Область(1, 2, МакетСотрудника.ВысотаТаблицы, 2).Объединить();
		// Всего начислено
		МакетСотрудника.Область(1, 19, МакетСотрудника.ВысотаТаблицы, 19).Объединить();
		// Удержания
		МакетСотрудника.Область(1, 20, МакетСотрудника.ВысотаТаблицы, 20).Объединить();
		МакетСотрудника.Область(1, 21, МакетСотрудника.ВысотаТаблицы, 21).Объединить();
		МакетСотрудника.Область(1, 22, МакетСотрудника.ВысотаТаблицы, 22).Объединить();
		МакетСотрудника.Область(1, 23, МакетСотрудника.ВысотаТаблицы, 23).Объединить();
		// Задолженность за организацией.
		МакетСотрудника.Область(1, 24, МакетСотрудника.ВысотаТаблицы, 24).Объединить();
		// Задолженность за работником.
		МакетСотрудника.Область(1, 25, МакетСотрудника.ВысотаТаблицы, 26).Объединить();
		// К выплате
		МакетСотрудника.Область(1, 27, МакетСотрудника.ВысотаТаблицы, 28).Объединить();
		// ФИО
		МакетСотрудника.Область(1, 29, МакетСотрудника.ВысотаТаблицы, 29).Объединить();
		// Подпись
		МакетСотрудника.Область(1, 30, МакетСотрудника.ВысотаТаблицы, 30).Объединить();
		
	КонецЕсли;
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(МакетСотрудника);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтранице);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомости);
	МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	
	Если НЕ ДокументРезультат.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
		
		ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
		ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		ДокументРезультат.Вывести(Макеты.Шапка);
		ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ49(СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний);
		
	КонецЕсли;
	
	ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, ПромежуточныеИтогиПоГоловномуСотруднику);
	
	ДокументРезультат.Вывести(МакетСотрудника);
	
КонецПроцедуры

Процедура ДополнитьСтраницуТ49(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги)
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(Макеты.ПустаяСтрока);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтранице);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомости);
	МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	
	Пока ДокументРезультат.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
		ДокументРезультат.Вывести(Макеты.ПустаяСтрока);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
	ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
	
КонецПроцедуры

Функция ПромежуточныеИтогиПоСтраницеТ49(СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний)
	
	ПромежуточныеИтоги = Новый Структура;
	
	Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
		ПромежуточныеИтоги.Вставить("Колонка" + СтрокаТаблицы.НомерКолонки, 0);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
		ПромежуточныеИтоги.Вставить("Колонка" + СтрокаТаблицы.НомерКолонки, 0);
	КонецЦикла;
	
	ПромежуточныеИтоги.Вставить("ВсегоНачислено", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаОрганизацией", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаСотрудником", 0);
	ПромежуточныеИтоги.Вставить("КВыплате", 0);
	
	Возврат ПромежуточныеИтоги;
	
КонецФункции

#КонецОбласти


#Область Т51

Процедура ПриКомпоновкеРезультатаТ51(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
	
	Попытка
		
		КомпоновщикНастроек = ОбъектОтчета.КомпоновщикНастроек;
		СхемаКомпоновкиДанных = ОбъектОтчета.СхемаКомпоновкиДанных;
		
		КлючВарианта = КлючВарианта(КомпоновщикНастроек);
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФормаТ51";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
		НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьПолныеФИОВСписочныхПечатныхФормах")).Значение =
			НастройкиПечатныхФорм.ВыводитьПолныеФИОВСписочныхПечатныхФормах;
		
		// Нужно проверить включена ли группировка по подразделениям.
		ЕстьГруппировкаПоПодразделению = Ложь;
		ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
		ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
		
		Если Не ЕстьГруппировкаПоПодразделению Тогда
			
			Для каждого ЭлементСортировки Из НастройкиОтчета.Порядок.Элементы Цикл
				
				Если ЭлементСортировки.Поле = Новый ПолеКомпоновкиДанных("Подразделение.РеквизитДопУпорядочивания") Тогда
					ЭлементСортировки.Использование = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ИзменитьГруппировкиВариантаТ49Т51(НастройкиОтчета.Структура, ЕстьГруппировкаПоПодразделению);
		
		ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета, НаАванс);
		
		Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеДокумента") Тогда
			НаборыВнешнихДанных = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеДокумента;
		Иначе
			НаборыВнешнихДанных = НаборыВнешнихДанныхАнализНачисленийИУдержаний();
		КонецЕсли;
		
		РезультатКомпоновки = РезультатКомпоновкиМакетаПечатнойФормы(ОбъектОтчета, ДанныеРасшифровки, НастройкиОтчета, НаборыВнешнихДанных);
		
		Для каждого СтрокаМесяца Из РезультатКомпоновки.ДанныеОтчета.Строки Цикл
			
			Для Каждого СтрокаОрганизации Из СтрокаМесяца.Строки Цикл
				
				ВывестиОрганизациюТ51(
					СтрокаОрганизации,
					ДокументРезультат,
					РезультатКомпоновки,
					ЕстьГруппировкаПоПодразделению,
					НаАванс);
				
			КонецЦикла;
			
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета Т-51 внесены критичные изменения. Отчет не будет сформирован.'")
			+ " " + КраткоеПредставлениеОшибки(Инфо);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВывестиОрганизациюТ51(СтрокаОрганизации, ДокументРезультат, РезультатКомпоновки, ЕстьГруппировкаПоПодразделению, НаАванс)
	
	ЕстьОплатаВНатуральнойФорме = (СтрокаОрганизации[РезультатКомпоновки.ИдентификаторыМакета["НачисленоВНатуральнойФорме"]] <> 0);
	Если ЕстьГруппировкаПоПодразделению Тогда
		
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			ВывестиВедомостьТ51(СтрокаПодразделения, ДокументРезультат, РезультатКомпоновки, ЕстьОплатаВНатуральнойФорме, НаАванс, Истина);
		КонецЦикла;
		
	Иначе
		ВывестиВедомостьТ51(СтрокаОрганизации, ДокументРезультат, РезультатКомпоновки, ЕстьОплатаВНатуральнойФорме, НаАванс, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиВедомостьТ51(СтрокаГруппировки, ДокументРезультат, РезультатКомпоновки, ЕстьОплатаВНатуральнойФорме, НаАванс, ЕстьГруппировкаПоПодразделению)
	
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	КВыплатеПоВедомости = 0;
	
	ДанныеНаПечать = Новый Структура;
	ДанныеНаПечать.Вставить("ДанныеШапки", СтрокаГруппировки);
	ДанныеНаПечать.Вставить("ДанныеШапкиПользовательскиеПоля",
		ЗначенияЗаполненияПользовательскихПолей(РезультатКомпоновки.ИдентификаторыМакета, ДанныеНаПечать.ДанныеШапки));
	
	ДанныеПолучаемыеНаХоду = Новый Структура;
	ДанныеПолучаемыеНаХоду.Вставить("СообщениеОНеприменимостиПечатнойФормы",
		ЗарплатаКадры.СообщениеОНеприменимостиПечатнойФормы(
			ДанныеНаПечать.ДанныеШапки.ПараметрыДанныхДатаОтчета,
			'20150619',
			НСтр("ru='Приказа Минфина РФ'"),
			'20150330',
			"52н"));
	
	Если НаАванс Тогда
		ИмяМакетаШапки = "ШапкаДокументаПерваяПоловина";
	Иначе
		ИмяМакетаШапки = "ШапкаДокумента";
	КонецЕсли;
	
	Если Не ЕстьГруппировкаПоПодразделению Тогда
		ДанныеПолучаемыеНаХоду.Вставить("ПодразделениеНаКонецПериодаНаПечать");
	КонецЕсли;
	
	ВывестиВДокументРезультатОбластиМакета(ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, ИмяМакетаШапки,
		ДанныеНаПечать.ДанныеШапки, ДанныеНаПечать.ДанныеШапкиПользовательскиеПоля, ДанныеПолучаемыеНаХоду);
	
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	
	ДанныеПолучаемыеНаХоду = Новый Структура;
	Если ЕстьОплатаВНатуральнойФорме Тогда
		ДанныеПолучаемыеНаХоду.Вставить("ГруппаНачислений2", НСтр("ru='Оплата в натуральной форме'"));
	КонецЕсли;
	
	ВывестиВДокументРезультатОбластиМакета(ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, "Шапка",
		ДанныеНаПечать.ДанныеШапки, ДанныеНаПечать.ДанныеШапкиПользовательскиеПоля, ДанныеПолучаемыеНаХоду);
	
	НомерСтроки = 0;
	ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ51();
	Для Каждого СтрокаСотрудника Из ДанныеНаПечать.ДанныеШапки.Строки Цикл
		
		ВывестиСотрудникаТ51(НомерСтроки, СтрокаСотрудника, ДокументРезультат, РезультатКомпоновки, 
			ПромежуточныеИтоги, КВыплатеПоВедомости, ЕстьОплатаВНатуральнойФорме, ДанныеНаПечать);
		
	КонецЦикла;
	
	ДополнитьСтраницуТ51(РезультатКомпоновки.МакетПечатнойФормы, ДокументРезультат, ДанныеНаПечать, ПромежуточныеИтоги);
	
	ДанныеПолучаемыеНаХоду = Новый Структура("КВыплате", КВыплатеПоВедомости);
	
	Если ЕстьОплатаВНатуральнойФорме Тогда
		
		ДанныеПолучаемыеНаХоду.Вставить("НачисленоСдельно", ДанныеНаПечать.ДанныеШапкиПользовательскиеПоля.НачисленоВНатуральнойФорме);
		ДанныеПолучаемыеНаХоду.Вставить("ПрочиеДоходы", ДанныеНаПечать.ДанныеШапкиПользовательскиеПоля.ПрочиеДоходы + ДанныеНаПечать.ДанныеШапкиПользовательскиеПоля.НачисленоСдельно);
		
	КонецЕсли;
	
	ВывестиВДокументРезультатОбластиМакета(ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, "ИтогоПоВедомости",
		ДанныеНаПечать.ДанныеШапки, ДанныеНаПечать.ДанныеШапкиПользовательскиеПоля, ДанныеПолучаемыеНаХоду);
	
	ВывестиВДокументРезультатОбластиМакета(ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, "Подвал",
		ДанныеНаПечать.ДанныеШапки, ДанныеНаПечать.ДанныеШапкиПользовательскиеПоля);
	
КонецПроцедуры

Процедура ВывестиСотрудникаТ51(НомерСтроки, СтрокаГоловногоСотрудника, ДокументРезультат, РезультатКомпоновки, ПромежуточныеИтоги, КВыплатеПоВедомости, ЕстьОплатаВНатуральнойФорме, ДанныеНаПечать)
	
	ОбластьСтрокСотрудника = Новый ТабличныйДокумент;
	
	ПромежуточныеИтогиПоГоловномуСотруднику = ПромежуточныеИтогиПоСтраницеТ51();
	НесколькоРабочихМест = СтрокаГоловногоСотрудника.Строки.Количество() > 1;
	
	ДанныеПользовательскихПолейГоловногоСотрудника = ЗначенияЗаполненияПользовательскихПолей(РезультатКомпоновки.ИдентификаторыМакета, СтрокаГоловногоСотрудника);
	Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
		
		ОбластьСтроки = РезультатКомпоновки.МакетПечатнойФормы.ПолучитьОбласть("Строка");
		
		ДанныеПолучаемыеНаХоду = Новый Структура;
		ДанныеПолучаемыеНаХоду.Вставить("НомерПП", НомерСтроки + 1);
		
		ДанныеПользовательскихПолей = ЗначенияЗаполненияПользовательскихПолей(РезультатКомпоновки.ИдентификаторыМакета, СтрокаСотрудника);
		
		// Отработанное рабочее время
		ОтработаноДней = ДанныеПользовательскихПолей.ОтработаноРабочихДней;
		Если ЗначениеЗаполнено(ОтработаноДней) И ОтработаноДней > 0 Тогда 
			ОтработаноРабочихДней = "" + ОтработаноДней + " (" + ДанныеПользовательскихПолей.ОтработаноРабочихЧасов + ")";
		Иначе
			ОтработаноРабочихДней = "";
		КонецЕсли;
		ДанныеПолучаемыеНаХоду.Вставить("ОтработаноРабочихДней", ОтработаноРабочихДней);
		
		// Отработанные выходные и праздничные
		ОтработаноВыходныхДней = ДанныеПользовательскихПолей.ОтработаноПразднВыходныхДней;
		Если ЗначениеЗаполнено(ОтработаноВыходныхДней) И ОтработаноВыходныхДней > 0 Тогда 
			ОтработаноПразднВыходныхДней = "" + ОтработаноВыходныхДней + " (" + ДанныеПользовательскихПолей.ОтработаноПразднВыходныхЧасов + ")";
		Иначе
			ОтработаноПразднВыходныхДней = "";
		КонецЕсли;
		ДанныеПолучаемыеНаХоду.Вставить("ОтработаноПразднВыходныхДней", ОтработаноПразднВыходныхДней);
		
		// К выплате
		КВыплате = ДанныеПользовательскихПолей.КВыплате;
		Если КВыплате < 0 Тогда
			ДанныеПолучаемыеНаХоду.Вставить("КВыплате", 0);
		Иначе
			КВыплатеПоВедомости = КВыплатеПоВедомости + КВыплате;
		КонецЕсли;
		
		Если ЕстьОплатаВНатуральнойФорме Тогда
			
			ДанныеПолучаемыеНаХоду.Вставить("НачисленоСдельно", ДанныеПользовательскихПолей.НачисленоВНатуральнойФорме);
			ДанныеПолучаемыеНаХоду.Вставить("ПрочиеДоходы", ДанныеПользовательскихПолей.ПрочиеДоходы + ДанныеПользовательскихПолей.НачисленоСдельно);
			
		КонецЕсли;
		
		Если НесколькоРабочихМест Тогда
			
			// Обнуляем данные, учтенные у головного сотрудника
			ДанныеПользовательскихПолей.Удалить("ДолгЗаОрганизацией");
			ДанныеПользовательскихПолей.Удалить("ДолгЗаСотрудником");
			ДанныеПользовательскихПолей.Удалить("ВсегоНачислено");
			ДанныеПользовательскихПолей.Удалить("НДФЛ");
			ДанныеПользовательскихПолей.Удалить("ПрочиеУдержания");
			ДанныеПользовательскихПолей.Удалить("ВсегоУдержано");
			ДанныеПользовательскихПолей.Удалить("КВыплате");
			
		КонецЕсли;
		
		ЗаполнитьПараметрыОбластиМакета(ОбластьСтроки, ДанныеНаПечать.ДанныеШапки, ДанныеНаПечать.ДанныеШапкиПользовательскиеПоля,
			ДанныеПользовательскихПолейГоловногоСотрудника, СтрокаСотрудника, ДанныеПользовательскихПолей, ДанныеПолучаемыеНаХоду);
		
		ОбластьСтрокСотрудника.Вывести(ОбластьСтроки);
		
		// Обновление итогов
		ДобавитьВПромежуточныйИтог(ПромежуточныеИтогиПоГоловномуСотруднику, ОбластьСтроки.Параметры);
	
	КонецЦикла;
	
	// В случае, когда сотрудник попадает в отчет из за взаимозакрывающихся остатков по подразделениям
	Если Не ЕстьИтогиПоГоловномуСотруднику(ПромежуточныеИтогиПоГоловномуСотруднику) Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = НомерСтроки + 1;
	Если НесколькоРабочихМест Тогда
		
		// Номер по порядку
		ОбластьСтрокСотрудника.Область(1, 1, ОбластьСтрокСотрудника.ВысотаТаблицы, 1).Объединить();
		// Табельный номер
		ОбластьСтрокСотрудника.Область(1, 2, ОбластьСтрокСотрудника.ВысотаТаблицы, 2).Объединить();
		// ФИО
		ОбластьСтрокСотрудника.Область(1, 3, ОбластьСтрокСотрудника.ВысотаТаблицы, 3).Объединить();
		// Всего начислено
		ОбластьСтрокСотрудника.Область(1, 17, ОбластьСтрокСотрудника.ВысотаТаблицы, 17).Объединить();
		// НДФЛ
		ОбластьСтрокСотрудника.Область(1, 18, ОбластьСтрокСотрудника.ВысотаТаблицы, 19).Объединить();
		// Прочие удержания
		ОбластьСтрокСотрудника.Область(1, 20, ОбластьСтрокСотрудника.ВысотаТаблицы, 20).Объединить();
		// Всего удержано
		ОбластьСтрокСотрудника.Область(1, 21, ОбластьСтрокСотрудника.ВысотаТаблицы, 22).Объединить();
		// Задолженность за организацией.
		ОбластьСтрокСотрудника.Область(1, 23, ОбластьСтрокСотрудника.ВысотаТаблицы, 23).Объединить();
		// Задолженность за работников.
		ОбластьСтрокСотрудника.Область(1, 24, ОбластьСтрокСотрудника.ВысотаТаблицы, 24).Объединить();
		// К выплате
		ОбластьСтрокСотрудника.Область(1, 25, ОбластьСтрокСотрудника.ВысотаТаблицы, 25).Объединить();
		
	КонецЕсли;
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(ОбластьСтрокСотрудника);
	МассивВыводимыхОбластей.Добавить(РезультатКомпоновки.МакетПечатнойФормы.ПолучитьОбласть("ИтогоПоСтранице"));
	МассивВыводимыхОбластей.Добавить(РезультатКомпоновки.МакетПечатнойФормы.ПолучитьОбласть("ИтогоПоВедомости"));
	МассивВыводимыхОбластей.Добавить(РезультатКомпоновки.МакетПечатнойФормы.ПолучитьОбласть("Подвал"));
	Если Не ДокументРезультат.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
		
		ВывестиВДокументРезультатОбластиМакета(ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, "ИтогоПоСтранице",
			ДанныеНаПечать.ДанныеШапки, ДанныеНаПечать.ДанныеШапкиПользовательскиеПоля, ПромежуточныеИтоги);
		
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		
		ВывестиВДокументРезультатОбластиМакета(ДокументРезультат, РезультатКомпоновки.МакетПечатнойФормы, "Шапка",
			ДанныеНаПечать.ДанныеШапки, ДанныеНаПечать.ДанныеШапкиПользовательскиеПоля, ПромежуточныеИтоги);
		
		ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ51();
		
	КонецЕсли;
	
	ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, ПромежуточныеИтогиПоГоловномуСотруднику);
	ДокументРезультат.Вывести(ОбластьСтрокСотрудника);
	
КонецПроцедуры

Процедура ДополнитьСтраницуТ51(МакетПечатнойФормы, ДокументРезультат, ДанныеНаПечать, ПромежуточныеИтоги)
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(МакетПечатнойФормы.ПолучитьОбласть("ПустаяСтрока"));
	МассивВыводимыхОбластей.Добавить(МакетПечатнойФормы.ПолучитьОбласть("ИтогоПоСтранице"));
	МассивВыводимыхОбластей.Добавить(МакетПечатнойФормы.ПолучитьОбласть("ИтогоПоВедомости"));
	МассивВыводимыхОбластей.Добавить(МакетПечатнойФормы.ПолучитьОбласть("Подвал"));
	
	Пока ДокументРезультат.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
		
		ВывестиВДокументРезультатОбластиМакета(ДокументРезультат, МакетПечатнойФормы, "ПустаяСтрока",
			ДанныеНаПечать.ДанныеШапки, ДанныеНаПечать.ДанныеШапкиПользовательскиеПоля);
		
	КонецЦикла;
	
	ВывестиВДокументРезультатОбластиМакета(ДокументРезультат, МакетПечатнойФормы, "ИтогоПоСтранице",
		ДанныеНаПечать.ДанныеШапки, ДанныеНаПечать.ДанныеШапкиПользовательскиеПоля, ПромежуточныеИтоги);
	
КонецПроцедуры

Функция ПромежуточныеИтогиПоСтраницеТ51()
	
	ПромежуточныеИтоги = Новый Структура;
	
	ПромежуточныеИтоги.Вставить("НачисленоПовременно", 0);
	ПромежуточныеИтоги.Вставить("НачисленоСдельно", 0);
	ПромежуточныеИтоги.Вставить("ПрочиеДоходы", 0);
	ПромежуточныеИтоги.Вставить("ДругиеДоходы", 0);
	ПромежуточныеИтоги.Вставить("ВсегоНачислено", 0);
	ПромежуточныеИтоги.Вставить("НДФЛ", 0);
	ПромежуточныеИтоги.Вставить("ПрочиеУдержания", 0);
	ПромежуточныеИтоги.Вставить("ВсегоУдержано", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаОрганизацией", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаСотрудником", 0);
	ПромежуточныеИтоги.Вставить("КВыплате", 0);
	
	Возврат ПромежуточныеИтоги;
	
КонецФункции

#КонецОбласти


#Область РасчетныйЛисток

Процедура ПриКомпоновкеРезультатаРасчетныйЛисток(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
	
	КомпоновщикНастроек = ОбъектОтчета.КомпоновщикНастроек;
	КлючВарианта = КлючВарианта(КомпоновщикНастроек);
	
	Если (КлючВарианта = "РасчетныйЛистокПоРабочимМестам")
		Или (КлючВарианта = "РасчетныйЛистокПоРабочимМестамИСРазбивкойПоИсточникамФинансирования") Тогда
		
		ПриКомпоновкеРезультатаРасчетныйЛистокПоРабочимМестам(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс)
		
	Иначе
		ПриКомпоновкеРезультатаРасчетныйЛистокПоФизическимЛицам(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс);
	КонецЕсли;
	
КонецПроцедуры

#Область РасчетныйЛистокПоФизическимЛицам

Процедура ПриКомпоновкеРезультатаРасчетныйЛистокПоФизическимЛицам(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		
		КомпоновщикНастроек = ОбъектОтчета.КомпоновщикНастроек;
		СхемаКомпоновкиДанных = ОбъектОтчета.СхемаКомпоновкиДанных;
		
		КлючВарианта = КлючВарианта(КомпоновщикНастроек);
		
		ГруппироватьПоИсточникамФинансирования = (КлючВарианта = "РасчетныйЛистокСРазбивкойПоИсточникамФинансирования")
			Или (КлючВарианта = "РасчетныйЛистокСРазбивкойПоИсточникамФинансированияПерваяПоловинаМесяца");
		
		УправленческийРасчетныйЛисток = (КлючВарианта = "РасчетныйЛистокУправленческий");
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетныйЛисток";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		// Подготовка настроек
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			Модуль.ДополнитьНастройкиОтчетаРасчетныйЛисток(НастройкиОтчета, КлючВарианта);
		КонецЕсли;
		
		ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета, НаАванс);
		НастроитьВариантОтчетаРасчетныйЛисток(НастройкиОтчета);
		
		// Нужно проверить включена ли группировка по подразделениям.
		ЕстьГруппировкаПоПодразделению = Ложь;
		ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
		Если НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Использование Тогда
			ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
		КонецЕсли;
		
		ПредварительныйПросмотр = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ПредварительныйПросмотр");
		Если ПредварительныйПросмотр Тогда
			
			НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(
				Новый ПараметрКомпоновкиДанных("ВыводитьОсобенностиРасчетаНДФЛ")).Значение = Ложь;
			
		КонецЕсли;
		
		НастройкиВывода = НастройкиВыводаРасчетногоЛистка(НастройкиОтчета, ПредварительныйПросмотр, НаАванс);
		ОтключитьНеИспользуемыеПоляРасчетногоЛистка(НастройкиОтчета, НастройкиВывода);
		
		// Подготовка внешнего набора данных
		Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеДокумента") Тогда
			
			НаборыВнешнихДанных = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеДокумента;
			КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Удалить("ДанныеДокумента");
			
		Иначе
			НаборыВнешнихДанных = НаборыВнешнихДанныхАнализНачисленийИУдержаний();
		КонецЕсли;
		
		РезультатКомпоновки = РезультатКомпоновкиМакетаПечатнойФормы(ОбъектОтчета, ДанныеРасшифровки, НастройкиОтчета, НаборыВнешнихДанных);
		
		Если ОбъектОтчета.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ФормированиеМакетаКомпоновкиДанных") Тогда
			Возврат;
		КонецЕсли;
		
		СвойстваРегистраторов = СвойстваРегистраторовДляРасчетныхЛистков(РезультатКомпоновки.ДанныеОтчета, НастройкиВывода);
		
		Если ПредварительныйПросмотр Тогда
			ДокументРезультат.Вывести(РезультатКомпоновки.МакетПечатнойФормы.ПолучитьОбласть("ПредварительныйПросмотр"));
		КонецЕсли;
		
		Если ПредварительныйПросмотр Тогда
			ЕстьГруппировкаПоОрганизации = Ложь;
			ЕстьГруппировкаПоПодразделению = Ложь;
		Иначе
			
			ЕстьГруппировкаПоОрганизации = МожноГруппировать(НастройкиОтчета.Порядок, "Организация");
			
			Если ЕстьГруппировкаПоПодразделению И НЕ МожноГруппировать(НастройкиОтчета.Порядок, "ПодразделениеСортировки.РеквизитДопУпорядочиванияИерархического", РезультатКомпоновки.ИдентификаторыМакета) Тогда
				ЕстьГруппировкаПоПодразделению = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Организация = Неопределено;
		Подразделение = Неопределено;
		
		ДокументРезультатСтраница = Новый ТабличныйДокумент;
		Для каждого СтрокаМесяца Из РезультатКомпоновки.ДанныеОтчета.Строки Цикл
			
			Если НастройкиВывода.ВыводитьОсобенностиРасчетаНДФЛ = Истина
				Или НастройкиВывода.ВыводитьИнформациюОНачисленныхВзносахВПФР = Истина Тогда
				
				ДанныеПоНДФЛИВзносам = ДанныеПоНДФЛИВзносам(СтрокаМесяца.Строки, СтрокаМесяца.МесяцНачисления, НастройкиВывода.ВыводитьОсобенностиРасчетаНДФЛ, НастройкиВывода.ВыводитьИнформациюОНачисленныхВзносахВПФР);
				
			Иначе
				ДанныеПоНДФЛИВзносам = Неопределено;
			КонецЕсли;
			
			ДанныеПоФизическимЛицам = Новый Массив;
			ДанныеПоФизическомуЛицу = Неопределено;
			
			ТекущееФизическоеЛицо = Неопределено;
			ТекущаяОрганизация = Неопределено;
			Для Каждого СтрокаГоловногоСотрудника Из СтрокаМесяца.Строки Цикл
				
				Если СтрокаГоловногоСотрудника.Строки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекущееФизическоеЛицо <> СтрокаГоловногоСотрудника.ФизическоеЛицо
					Или Не УправленческийРасчетныйЛисток И ТекущаяОрганизация <> СтрокаГоловногоСотрудника.Организация Тогда
					
					Если ТекущееФизическоеЛицо <> Неопределено Тогда
						ДанныеПоФизическимЛицам.Добавить(ДанныеПоФизическомуЛицу);
					КонецЕсли;
					
					ТекущееФизическоеЛицо = СтрокаГоловногоСотрудника.ФизическоеЛицо;
					ТекущаяОрганизация = Неопределено;
					
					ДанныеПоФизическомуЛицу = Новый Структура;
					ДанныеПоФизическомуЛицу.Вставить("ФизическоеЛицо", СтрокаГоловногоСотрудника.ФизическоеЛицо);
					
					Если Не УправленческийРасчетныйЛисток
						И СтрокаГоловногоСотрудника.Владелец().Колонки.Найти("Организация") <> Неопределено Тогда
						
						ДанныеПоФизическомуЛицу.Вставить("Организация", СтрокаГоловногоСотрудника.Организация);
						ТекущаяОрганизация = СтрокаГоловногоСотрудника.Организация;
						
					КонецЕсли;
					
					ДанныеПоФизическомуЛицу.Вставить("Подразделение", СтрокаГоловногоСотрудника.ПодразделениеГоловногоСотрудникаНаКонецПериода);
					ДанныеПоФизическомуЛицу.Вставить("ГоловныеСотрудники", Новый Массив);
					
				КонецЕсли;
				
				ДанныеПоФизическомуЛицу.ГоловныеСотрудники.Добавить(СтрокаГоловногоСотрудника);
				
			КонецЦикла;
			
			Если ТекущееФизическоеЛицо <> Неопределено Тогда
				ДанныеПоФизическимЛицам.Добавить(ДанныеПоФизическомуЛицу);
			КонецЕсли;
			
			КоллекцияДанных = ДанныеПоФизическимЛицам;
			ВыводимыеГруппировки = Новый Массив;
			
			Для каждого СтрокаКоллекции Из КоллекцияДанных Цикл
				
				Если ЕстьГруппировкаПоОрганизации И Организация <> СтрокаКоллекции.Организация Тогда
					
					ПараметрыГруппировки = Новый Структура;
					ПараметрыГруппировки.Вставить("НазваниеГруппировки", НСтр("ru='Организация'"));
					ПараметрыГруппировки.Вставить("ЗначениеГруппировки", СтрокаКоллекции.Организация);
					
					Область = РезультатКомпоновки.МакетПечатнойФормы.ПолучитьОбласть("Группировка");
					Область.Параметры.Заполнить(ПараметрыГруппировки);
					
					ВыводимыеГруппировки.Добавить(Область);
					Организация = СтрокаКоллекции.Организация;
					
				КонецЕсли;
				
				Если ЕстьГруппировкаПоПодразделению И Подразделение <> СтрокаКоллекции.Подразделение Тогда
					
					ПараметрыГруппировки = Новый Структура;
					ПараметрыГруппировки.Вставить("НазваниеГруппировки", НСтр("ru='Подразделение'"));
					ПараметрыГруппировки.Вставить("ЗначениеГруппировки", СтрокаКоллекции.Подразделение);
					
					Область = РезультатКомпоновки.МакетПечатнойФормы.ПолучитьОбласть("Группировка");
					Область.Параметры.Заполнить(ПараметрыГруппировки);
					
					ВыводимыеГруппировки.Добавить(Область);
					Подразделение = СтрокаКоллекции.Подразделение;
					
				КонецЕсли;
				
				ВыводимаяКоллекция = СтрокаКоллекции.ГоловныеСотрудники;
				
				ВывестиСотрудникаРасчетныйЛисток(ВыводимаяКоллекция, ДокументРезультат, ДокументРезультатСтраница, РезультатКомпоновки.МакетПечатнойФормы,
					РезультатКомпоновки.ИдентификаторыМакета, ДанныеПоНДФЛИВзносам, ГруппироватьПоИсточникамФинансирования,
					ВыводимыеГруппировки, НастройкиВывода, НаАванс, СвойстваРегистраторов);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ДокументРезультатСтраница.ВысотаТаблицы > 0 Тогда
			
			Если Не ПредварительныйПросмотр И ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ДокументРезультат.Вывести(ДокументРезультатСтраница);
			
		КонецЕсли;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета ""Расчетный листок"" внесены критичные изменения. Отчет не будет сформирован.'")
			+ " " + КраткоеПредставлениеОшибки(Инфо);
		
	КонецПопытки;
	
КонецПроцедуры

Функция СвойстваРегистраторовДляРасчетныхЛистков(ДанныеОтчета, НастройкиВывода)
	
	// Сбор информации о регистраторах выплат
	СвойстваРегистраторов = Новый Соответствие;
	
	ПолучатьПериодыРегистрации = НастройкиВывода.ВыводитьПериодыНачислений;
	Если ПолучатьПериодыРегистрации Тогда
		
		ВариантСальдо = РегистрыСведений.ДополнительныеНастройкиЗарплатаКадры.ОтражениеВзаиморасчетовССотрудниками();
		ПолучатьПериодыРегистрации = ВариантСальдо = Перечисления.ВариантыОтраженияВзаиморасчетовССотрудниками.ПоДаннымБухучета;
		
	КонецЕсли;
	
	Если ПолучатьПериодыРегистрации = Истина
		Или НастройкиВывода.ДетализироватьВыплатыПоВедомостям = Истина Тогда
		
		МетаданныеРегистраторов = Новый Соответствие;
		МетаданныеСПериодомРегистрации = Новый Соответствие;
		
		РегистраторыСПериодомРегистрации = Новый Массив;
		РегистраторыБезПериодаРегистрации = Новый Массив;
		
		СтрокиВыплат = ДанныеОтчета.Строки.НайтиСтроки(Новый Структура("Группа", Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено), Истина);
		Для Каждого СтрокаВыплат Из СтрокиВыплат Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаВыплат.Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			
			МетаданныеРегистратора = МетаданныеРегистраторов.Получить(СтрокаВыплат.Регистратор);
			Если МетаданныеРегистратора = Неопределено Тогда
				
				МетаданныеРегистратора = СтрокаВыплат.Регистратор.Метаданные();
				МетаданныеРегистраторов.Вставить(СтрокаВыплат.Регистратор, МетаданныеРегистратора);
				
				СвойстваМетаданных = МетаданныеСПериодомРегистрации.Получить(МетаданныеРегистратора);
				Если СвойстваМетаданных = Неопределено Тогда
					
					Если ПолучатьПериодыРегистрации = Истина Тогда
						СвойстваМетаданных = ОбщегоНазначения.ЕстьРеквизитОбъекта("ПериодРегистрации", МетаданныеРегистратора);
					Иначе
						СвойстваМетаданных = Ложь;
					КонецЕсли;
					
					МетаданныеСПериодомРегистрации.Вставить(МетаданныеРегистратора, СвойстваМетаданных);
					
				КонецЕсли;
				
				Если СвойстваМетаданных = Истина Тогда
					РегистраторыСПериодомРегистрации.Добавить(СтрокаВыплат.Регистратор);
				Иначе
					РегистраторыБезПериодаРегистрации.Добавить(СтрокаВыплат.Регистратор);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если РегистраторыСПериодомРегистрации.Количество() > 0 Тогда
			СвойстваРегистраторов = ОбщегоНазначенияБЗК.ЗначенияРеквизитовОбъектов(РегистраторыСПериодомРегистрации, "Дата,Номер,ПериодРегистрации");
		КонецЕсли;
		
		Если РегистраторыБезПериодаРегистрации.Количество() > 0 Тогда
			
			СвойстваРегистраторовБезПериодаРегистрации = ОбщегоНазначенияБЗК.ЗначенияРеквизитовОбъектов(РегистраторыБезПериодаРегистрации, "Дата,Номер");
			Если СвойстваРегистраторов.Количество() = 0 Тогда
				СвойстваРегистраторов = СвойстваРегистраторовБезПериодаРегистрации;
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(СвойстваРегистраторов, СвойстваРегистраторовБезПериодаРегистрации, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат СвойстваРегистраторов;
	
КонецФункции

Процедура ВывестиСотрудникаРасчетныйЛисток(СтрокиГоловныхСотрудников, ДокументРезультатПромежуточный, ДокументРезультатСтраница, Макет, СоответствиеПользовательскихПолей, ДанныеПоНДФЛИВзносам, ГруппироватьПоИсточникамФинансирования, ВыводимыеГруппировки, НастройкиВывода, НаАванс, СвойстваРегистраторов)
	
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	СтрокаПервогоГоловногоСотрудника = СтрокиГоловныхСотрудников[0];
	Если ГруппироватьПоИсточникамФинансирования Тогда
		СтрокаШапки = СтрокаПервогоГоловногоСотрудника.Строки[0].Строки[0];
	Иначе
		СтрокаШапки = СтрокаПервогоГоловногоСотрудника.Строки[0];
	КонецЕсли;
	
	ДанныеПечатнойФормы = Новый Массив;
	ДанныеПечатнойФормы.Добавить(СтрокаШапки);
	ДанныеПечатнойФормы.Добавить(ЗначенияЗаполненияПользовательскихПолей(СоответствиеПользовательскихПолей, СтрокаШапки));
	
	Если НастройкиВывода.ВыводитьОсобенностиРасчетаНДФЛ = Истина Тогда
		
		СтрокиДанныхПоНДФЛ = ДанныеПоНДФЛИВзносам.НДФЛ.НайтиСтроки(Новый Структура("ФизическоеЛицо,ГоловнаяОрганизация", СтрокаШапки.ФизическоеЛицо, СтрокаШапки.ОрганизацияГоловнаяОрганизация));
		Если СтрокиДанныхПоНДФЛ.Количество() > 0 Тогда
			
			СтрокаДанныхПоНДФЛ = СтрокиДанныхПоНДФЛ[0];
			ДанныеПечатнойФормы.Добавить(СтрокаДанныхПоНДФЛ);
			
		Иначе
			СтрокаДанныхПоНДФЛ = Неопределено;
		КонецЕсли;
		
	Иначе
		СтрокаДанныхПоНДФЛ = Неопределено;
	КонецЕсли;
	
	ДанныеВычисляемыеНаХоду = ОписаниеОбщихИтоговРасчетногоЛисткаПоФизическимЛицам();
	ДанныеПечатнойФормы.Добавить(ДанныеВычисляемыеНаХоду);
	
	ВсегоВзносов = 0;
	Если НастройкиВывода.ВыводитьИнформациюОНачисленныхВзносахВПФР = Истина Тогда
		
		Если ГруппироватьПоИсточникамФинансирования Тогда
			
			ГоловныеОрганизации = Новый Массив;
			Для каждого СтрокаСтатьиФинансирования Из СтрокиГоловныхСотрудников Цикл
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГоловныеОрганизации, ОбщегоНазначения.ВыгрузитьКолонку(СтрокаСтатьиФинансирования.Строки, "ОрганизацияГоловнаяОрганизация", Истина), Истина);
			КонецЦикла;
			
		Иначе
			ГоловныеОрганизации = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиГоловныхСотрудников, "ОрганизацияГоловнаяОрганизация", Истина);
		КонецЕсли;
		
		ПоляВзносов = СтрРазделить(УчетСтраховыхВзносовКлиентСервер.РассчитываемыеВзносыВПФР(), ",");
		Для каждого ГоловнаяОрганизации Из ГоловныеОрганизации Цикл
			
			СтрокиДанныхПоВзносам = ДанныеПоНДФЛИВзносам.Взносы.НайтиСтроки(Новый Структура("ФизическоеЛицо,ГоловнаяОрганизация", СтрокаШапки.ФизическоеЛицо, ГоловнаяОрганизации));
			Если СтрокиДанныхПоВзносам.Количество() > 0 Тогда
				
				СтрокаДанныхПоВзносам = СтрокиДанныхПоВзносам[0];
				Для каждого ПолеВзносов Из  ПоляВзносов Цикл
					ВсегоВзносов = ВсегоВзносов + СтрокаДанныхПоВзносам[ПолеВзносов];
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеВычисляемыеНаХоду.Вставить("ВсегоВзносов", ВсегоВзносов);
	
	РазделительЛистков = Новый ТабличныйДокумент;
	ВывестиОбластиСтроки(РазделительЛистков, Макет, "РазделительЛистков", НастройкиВывода);
	
	ТелоРасчетногоЛистка = Новый ТабличныйДокумент;
	Если ГруппироватьПоИсточникамФинансирования Тогда
		ИтогиПоГруппам = ВывестиГруппировкиПоСтатьямФинансирования(ТелоРасчетногоЛистка, Макет, НастройкиВывода, СтрокиГоловныхСотрудников, СоответствиеПользовательскихПолей, ДанныеПечатнойФормы, СвойстваРегистраторов);
	Иначе
		ИтогиПоГруппам = ВывестиТелоРасчетногоЛистка(ТелоРасчетногоЛистка, Макет, НастройкиВывода, СтрокиГоловныхСотрудников, СоответствиеПользовательскихПолей, ДанныеПечатнойФормы, СвойстваРегистраторов);
	КонецЕсли;
	
	// Остатки взаиморасчетов по НДФЛ
	Если СтрокаДанныхПоНДФЛ <> Неопределено
		И (СтрокаДанныхПоНДФЛ.ЗарплатаКВыплатеНаНачалоПериода <> 0
			Или СтрокаДанныхПоНДФЛ.ЗарплатаКВыплатеНаКонецПериода <> 0) Тогда
		
		ДанныеВычисляемыеНаХоду.ИзлишнеУдержаноНДФЛНаНачалоМесяца = ИтогиПоГруппам.СуммаДолгаНаНачалоМесяцаРасчета - СтрокаДанныхПоНДФЛ.ЗарплатаКВыплатеНаНачалоПериода;
		ДанныеВычисляемыеНаХоду.ИзлишнеУдержаноНДФЛНаКонецМесяца = ИтогиПоГруппам.СуммаДолгаНаКонецМесяцаРасчета - СтрокаДанныхПоНДФЛ.ЗарплатаКВыплатеНаКонецПериода;
		
		Если ДанныеВычисляемыеНаХоду.ИзлишнеУдержаноНДФЛНаНачалоМесяца < 0 Тогда
			ДанныеВычисляемыеНаХоду.ИзлишнеУдержаноНДФЛНаНачалоМесяца = 0;
		КонецЕсли;
		
		Если ДанныеВычисляемыеНаХоду.ИзлишнеУдержаноНДФЛНаКонецМесяца < 0 Тогда
			ДанныеВычисляемыеНаХоду.ИзлишнеУдержаноНДФЛНаКонецМесяца = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	// Взаимные задолженности взаиморасчетов
	ЗаполнитьОбщиеИтоги(ДанныеВычисляемыеНаХоду, ИтогиПоГруппам);
	
	#Область ВыводШапки
	
	Если НаАванс Тогда
		
		ИмяОбластиШапка = "ШапкаПерваяПоловина";
		
		ДанныеВычисляемыеНаХоду.Вставить("КВыплатеЗаПервуюПоловинуМесяца", 0);
		Для каждого СтрокаСотрудника Из СтрокиГоловныхСотрудников Цикл
			ДанныеВычисляемыеНаХоду.КВыплатеЗаПервуюПоловинуМесяца = ДанныеВычисляемыеНаХоду.КВыплатеЗаПервуюПоловинуМесяца + СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("КВыплатеЗаПервуюПоловинуМесяца")];
		КонецЦикла;
		
	Иначе
		
		ИмяОбластиШапка = "Шапка";
		
		ДанныеВычисляемыеНаХоду.Вставить("КВыплатеЗарплаты", 0);
		Для каждого СтрокаСотрудника Из СтрокиГоловныхСотрудников Цикл
			ДанныеВычисляемыеНаХоду.КВыплатеЗарплаты = ДанныеВычисляемыеНаХоду.КВыплатеЗарплаты + СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("КВыплатеЗарплаты")];
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, ИмяОбластиШапка, НастройкиВывода, ДанныеПечатнойФормы);
	
	Если НастройкиВывода.ВыводитьСуммуНачисленнойЗарплатыВРазделеКВыплате = Истина Тогда
		
		ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиШапка, НастройкиВывода, ДанныеПечатнойФормы);
		НастроитьОбъединение(ДокументРезультат, 1, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено));
		
	Иначе
		НастроитьОбъединение(ДокументРезультат, 1, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено) + ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейУдержаноВыплачено));
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВыводРабочегоМеста
	
	ВывестиОбластиСтроки(ДокументРезультат, Макет, "РабочееМесто", НастройкиВывода, ДанныеПечатнойФормы);
	
	// Объединение ячеек для поля Организация
	НастроитьОбъединение(ДокументРезультат, 5, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено) - 4, ДокументРезультат.ВысотаТаблицы - 1);
	
	// Объединение ячеек для поля Подразделение
	НастроитьОбъединение(ДокументРезультат, 5, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено) - 4);
	
	// Объединение ячеек для поля Должность
	НастроитьОбъединение(ДокументРезультат, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено) + 5,
		ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейУдержаноВыплачено) - 4, ДокументРезультат.ВысотаТаблицы - 1);
	
	#КонецОбласти
	
	ДокументРезультат.Вывести(ТелоРасчетногоЛистка);
	
	#Область ВыводИтоговПоРасчетномуЛистку
	
	ВывестиИтогиВзаиморасчетов(ДокументРезультат, Макет, НастройкиВывода, ДанныеВычисляемыеНаХоду, ДанныеПечатнойФормы);
	
	// Итоги излишне удержанного НДФЛ
	Если СтрокаДанныхПоНДФЛ <> Неопределено
		И (ДанныеВычисляемыеНаХоду.ИзлишнеУдержаноНДФЛНаНачалоМесяца > 0
			Или ДанныеВычисляемыеНаХоду.ИзлишнеУдержаноНДФЛНаКонецМесяца > 0) Тогда
		
		ВывестиОбластиСтроки(ДокументРезультат, Макет, "ВТомЧислеНДФЛ", НастройкиВывода, ДанныеПечатнойФормы);
		
		НастроитьОбъединение(ДокументРезультат, 1, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено, "СуммаНачислено"));
		НастроитьОбъединение(ДокументРезультат, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено) + 1,
			ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейУдержаноВыплачено, "СуммаУдержаноВыплачено"));
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ТекстовойИнформации
	
	// Вычеты НДФЛ, авансовые платежи
	Если НастройкиВывода.ВыводитьОсобенностиРасчетаНДФЛ = Истина И СтрокаДанныхПоНДФЛ <> Неопределено
		Или НастройкиВывода.ВыводитьИнформациюОНачисленныхВзносахВПФР = Истина И ВсегоВзносов <> 0 Тогда
		
		ТекстСекции = "";
		
		Если НастройкиВывода.ВыводитьИнформациюОНачисленныхВзносахВПФР = Истина Тогда
			
			Если ВсегоВзносов <> 0 Тогда
				
				ТекстСекции = ТекстСекции
					+ СтрокаСНепереносимымиПробелами(НСтр("ru='Страховые взносы в ПФР'") + ": " + Формат(ВсегоВзносов, "ЧДЦ=2; ЧН="));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НастройкиВывода.ВыводитьОсобенностиРасчетаНДФЛ = Истина Тогда
			
			Если Не ПустаяСтрока(ТекстСекции) Тогда
				ТекстСекции = ТекстСекции + Символы.ПС;
			КонецЕсли;
			
			ТекстСекции = ТекстСекции
				+ СтрокаСНепереносимымиПробелами(НСтр("ru='Общий облагаемый доход'") + ": " + Формат(СтрокаДанныхПоНДФЛ.ОблагаемыйДоход, "ЧДЦ=2; ЧН="));
			
			Если ЗначениеЗаполнено(СтрокаДанныхПоНДФЛ.АвансовыеПлатежи) Тогда
				
				Если Не ПустаяСтрока(ТекстСекции) Тогда
					ТекстСекции = ТекстСекции + "; ";
				КонецЕсли; 
				
				ТекстСекции = ТекстСекции
					+ СтрокаСНепереносимымиПробелами(НСтр("ru='Зачтено авансовых платежей'") + ": " + Формат(СтрокаДанныхПоНДФЛ.АвансовыеПлатежи, "ЧДЦ=2"));
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекстСекции) Тогда
				ТекстСекции = ТекстСекции + Символы.ПС;
			КонецЕсли;
			
			ДобавлятьТочкуСЗапятой = Ложь;
			Если СтрокаДанныхПоНДФЛ.ПоложеныЛичныеВычеты = Истина
				Или ЗначениеЗаполнено(СтрокаДанныхПоНДФЛ.ВычетНаФизлицо) Тогда
				
				ДобавлятьТочкуСЗапятой = Истина;
				ТекстСекции = ТекстСекции
					+ СтрокаСНепереносимымиПробелами(НСтр("ru='Вычетов личных'") + ": " + Формат(СтрокаДанныхПоНДФЛ.ВычетНаФизлицо, "ЧДЦ=2; ЧН="));
				
			КонецЕсли;
			
			Если СтрокаДанныхПоНДФЛ.ПоложеныВычетыНаДетей = Истина
				Или ЗначениеЗаполнено(СтрокаДанныхПоНДФЛ.ВычетНаДетей) Тогда
				
				Если ДобавлятьТочкуСЗапятой И Не ПустаяСтрока(ТекстСекции) Тогда
					ТекстСекции = ТекстСекции + "; ";
				Иначе
					ДобавлятьТочкуСЗапятой = Истина;
				КонецЕсли;
				
				ТекстСекции = ТекстСекции
					+ СтрокаСНепереносимымиПробелами(НСтр("ru='Вычетов на детей'") + ": " + Формат(СтрокаДанныхПоНДФЛ.ВычетНаДетей, "ЧДЦ=2; ЧН="));
				
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(СтрокаДанныхПоНДФЛ.ВычетИмущественный) Тогда
				
				Если ДобавлятьТочкуСЗапятой И Не ПустаяСтрока(ТекстСекции) Тогда
					ТекстСекции = ТекстСекции + "; ";
				Иначе
					ДобавлятьТочкуСЗапятой = Истина;
				КонецЕсли;
				
				ТекстСекции = ТекстСекции
					+ СтрокаСНепереносимымиПробелами(НСтр("ru='Вычетов имущественных'") + ": " + Формат(СтрокаДанныхПоНДФЛ.ВычетИмущественный, "ЧДЦ=2; ЧН="));
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанныхПоНДФЛ.ВычетСоциальный) Тогда
				
				Если ДобавлятьТочкуСЗапятой И Не ПустаяСтрока(ТекстСекции) Тогда
					ТекстСекции = ТекстСекции + "; ";
				Иначе
					ДобавлятьТочкуСЗапятой = Истина;
				КонецЕсли; 
				
				ТекстСекции = ТекстСекции
					+ СтрокаСНепереносимымиПробелами(НСтр("ru='Вычетов социальных'") + ": " + Формат(СтрокаДанныхПоНДФЛ.ВычетСоциальный, "ЧДЦ=2; ЧН="));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстСекции) Тогда
			ВывестиОбластиСтроки(ДокументРезультат, Макет, "ПодвалТаблицы", НастройкиВывода, ДанныеПечатнойФормы);
		КонецЕсли;
		
		ВывестиОбластиТекстовуюОбласть(ДокументРезультат, Макет, НастройкиВывода, СокрЛП(ТекстСекции), ДанныеПечатнойФормы);
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Установка идентификатора на область расчетного листка
	Ид = СтрокаШапки.ФизическоеЛицо.УникальныйИдентификатор();
	ДокументРезультат.Область(1, 1, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).Имя =
		"payslip_" + Формат(СтрокаШапки.МесяцНачисления, "ДФ=ММгггг") + "_0_" + СтрЗаменить(Ид, "-", "") + "_0";
	
	ВыведеныГруппировки = Ложь;
	Если ВыводимыеГруппировки.Количество() > 0 Тогда
		
		Если ДокументРезультатПромежуточный.ВысотаТаблицы > 0 Тогда
			ДокументРезультатПромежуточный.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Если ДокументРезультатСтраница.ВысотаТаблицы > 0 Тогда
			ДокументРезультатПромежуточный.Вывести(ДокументРезультатСтраница);
			ДокументРезультатПромежуточный.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДокументРезультатСтраница = Новый ТабличныйДокумент;
		
		Для каждого ВыводимаяОбласть Из ВыводимыеГруппировки Цикл
			ДокументРезультатСтраница.Вывести(ВыводимаяОбласть);
		КонецЦикла;
		
		ВыводимыеГруппировки.Очистить();
		
		ВыведеныГруппировки = Истина;
		
	КонецЕсли;
	
	ВывестиОбластиРасчетногоЛистка(ДокументРезультатПромежуточный, ДокументРезультатСтраница, РазделительЛистков, ДокументРезультат, ВыведеныГруппировки);
	
КонецПроцедуры

Процедура ВывестиОбластиРасчетногоЛистка(ДокументРезультатПромежуточный, ДокументРезультатСтраница, РазделительЛистков, ДокументРезультат, ВыведеныГруппировки)
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(РазделительЛистков);
	ВыводимыеОбласти.Добавить(ДокументРезультат);
	
	Если ДокументРезультатСтраница.ВысотаТаблицы = 0 Или ВыведеныГруппировки Тогда
		ВыводимыеОбласти.Удалить(0);
	ИначеЕсли НЕ ДокументРезультатСтраница.ПроверитьВывод(ВыводимыеОбласти) Тогда
		
		ДокументРезультатПромежуточный.ВывестиГоризонтальныйРазделительСтраниц();
		ДокументРезультатПромежуточный.Вывести(ДокументРезультатСтраница);
		
		ДокументРезультатСтраница = Новый ТабличныйДокумент;
		ВыводимыеОбласти.Удалить(0);
		
	КонецЕсли;
	
	Для каждого ВыводимаяОбласть Из ВыводимыеОбласти Цикл
		ДокументРезультатСтраница.Вывести(ВыводимаяОбласть);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиГруппировкиПоСтатьямФинансирования(ДокументРезультат, Макет, НастройкиВывода, СтрокиГоловныхСотрудников, СоответствиеПользовательскихПолей, ДанныеПечатнойФормы, СвойстваРегистраторов)
	
	ИтогиПоГруппам = ОписаниеИтоговПоГруппам();
	
	// Сбор сведений по всем рабочим местам
	СтатьиФинансирования = Новый Массив;
	СтрокиПоСтатьямФинансирования = Новый Соответствие;
	
	Для каждого СтрокаСотрудника Из СтрокиГоловныхСотрудников Цикл
		
		Для каждого СтрокаСтатьи Из СтрокаСотрудника.Строки Цикл
			
			СтрокиПоСтатьям = СтрокиПоСтатьямФинансирования.Получить(СтрокаСтатьи.СтатьяФинансирования);
			Если СтрокиПоСтатьям = Неопределено Тогда
				СтатьиФинансирования.Добавить(СтрокаСтатьи.СтатьяФинансирования);
				СтрокиПоСтатьям = Новый Массив;
			КонецЕсли;
			
			СтрокиПоСтатьям.Добавить(СтрокаСтатьи);
			СтрокиПоСтатьямФинансирования.Вставить(СтрокаСтатьи.СтатьяФинансирования, СтрокиПоСтатьям);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтатьяФинансирования Из СтатьиФинансирования Цикл
		
		СтрокиПоСтатьям = СтрокиПоСтатьямФинансирования.Получить(СтатьяФинансирования);
		
		СтрокаПоСтатье = СтрокиПоСтатьям[0];
		ЗначенияЗаполненияПользовательскихПолейСтрокиПоСтатье = ЗначенияЗаполненияПользовательскихПолей(СоответствиеПользовательскихПолей, СтрокаПоСтатье);
		
		ДанныеПолучаемыеНаХоду = ОписаниеИтоговРасчетногоЛисткаПоФизическимЛицам();
		Если ЗначениеЗаполнено(СтатьяФинансирования) Тогда
			
			ПредставлениеСтатьиФинансирования =
				?(ЗначениеЗаполнено(СтрокаПоСтатье.СтатьяФинансированияКод), "(" + СтрокаПоСтатье.СтатьяФинансированияКод + ")", "")
				+ ?(ЗначениеЗаполнено(СтрокаПоСтатье.СтатьяФинансированияНаименование) , " " + СтрокаПоСтатье.СтатьяФинансированияНаименование, "");
			
			ДанныеПолучаемыеНаХоду.Вставить("СтатьяФинансирования", ПредставлениеСтатьиФинансирования);
			
		КонецЕсли;
		
		ВывестиВДокументРезультатОбластиМакета(ДокументРезультат, Макет, "СтатьяФинансирования", СтрокаПоСтатье, ЗначенияЗаполненияПользовательскихПолейСтрокиПоСтатье, ДанныеПолучаемыеНаХоду);
		
		ИтогиПоСтатье = ВывестиТелоРасчетногоЛистка(ДокументРезультат, Макет, НастройкиВывода, СтрокиПоСтатьям, СоответствиеПользовательскихПолей, ДанныеПечатнойФормы, СвойстваРегистраторов);
		
		ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца = ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца + ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца;
		ИтогиПоГруппам.СуммаДолгаНаКонецМесяца = ИтогиПоГруппам.СуммаДолгаНаКонецМесяца + ИтогиПоСтатье.СуммаДолгаНаКонецМесяца;
		ИтогиПоГруппам.СуммаДолгаНаНачалоМесяцаРасчета = ИтогиПоГруппам.СуммаДолгаНаНачалоМесяцаРасчета + ИтогиПоСтатье.СуммаДолгаНаНачалоМесяцаРасчета;
		ИтогиПоГруппам.СуммаДолгаНаКонецМесяцаРасчета = ИтогиПоГруппам.СуммаДолгаНаКонецМесяцаРасчета + ИтогиПоСтатье.СуммаДолгаНаКонецМесяцаРасчета;
		
		Если СтатьиФинансирования.Количество() > 1 Тогда
			ЗаполнитьОбщиеИтоги(ДанныеПолучаемыеНаХоду, ИтогиПоСтатье);
			ВывестиИтогиВзаиморасчетов(ДокументРезультат, Макет, НастройкиВывода, ДанныеПолучаемыеНаХоду, ДополненныеПараметры(ДанныеПечатнойФормы, ДанныеПолучаемыеНаХоду));
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтатьиФинансирования.Количество() > 1 Тогда
		
		СтрокаГоловныхСотрудников = СтрокиГоловныхСотрудников[0];
		ЗначенияЗаполненияПользовательскихПолейСтрокиГоловныхСотрудников = ЗначенияЗаполненияПользовательскихПолей(СоответствиеПользовательскихПолей, СтрокаГоловныхСотрудников);
		
		ДанныеПолучаемыеНаХоду = Новый Структура;
		ДанныеПолучаемыеНаХоду.Вставить("СтатьяФинансирования", НСтр("ru='Итого по всем статьям финансирования'"));
		
		ВывестиВДокументРезультатОбластиМакета(ДокументРезультат, Макет, "СтатьяФинансирования", СтрокаГоловныхСотрудников, ЗначенияЗаполненияПользовательскихПолейСтрокиГоловныхСотрудников, ДанныеПолучаемыеНаХоду);
		
	КонецЕсли;
	
	Возврат ИтогиПоГруппам;
	
КонецФункции

Функция ВывестиТелоРасчетногоЛистка(ДокументРезультат, Макет, НастройкиВывода, СтрокиГоловныхСотрудников, СоответствиеПользовательскихПолей, ДанныеПечатнойФормы, СвойстваРегистраторов)
	
	ИтогиПоГруппам = ОписаниеИтоговПоГруппам();
	
	#Область СборСведений
	
	ИтогиРазделов = Новый Структура;
	ИтогиРазделов.Вставить("Начислено", 0);
	ИтогиРазделов.Вставить("Удержано", 0);
	ИтогиРазделов.Вставить("Выплачено", 0);
	ИтогиРазделов.Вставить("НачисленоВНатуральнойФорме", 0);
	
	КоллекцияНачислено = Новый ТаблицаЗначений;
	КоллекцияНачислено.Колонки.Добавить("ВидРасчета");
	КоллекцияНачислено.Колонки.Добавить("ПериодДействия");
	КоллекцияНачислено.Колонки.Добавить("ПериодДействияДатой");
	КоллекцияНачислено.Колонки.Добавить("МесяцНачисления");
	КоллекцияНачислено.Колонки.Добавить("ОтработаноДней");
	КоллекцияНачислено.Колонки.Добавить("ОтработаноЧасов");
	КоллекцияНачислено.Колонки.Добавить("ОплаченоДней");
	КоллекцияНачислено.Колонки.Добавить("ОплаченоЧасов");
	КоллекцияНачислено.Колонки.Добавить("Сумма");
	КоллекцияНачислено.Колонки.Добавить("ДокументОснование");
	КоллекцияНачислено.Колонки.Добавить("Показатель");
	КоллекцияНачислено.Колонки.Добавить("Значение");
	
	КоллекцияУдержано = Новый ТаблицаЗначений;
	КоллекцияУдержано.Колонки.Добавить("ВидРасчета");
	КоллекцияУдержано.Колонки.Добавить("ДокументОснование");
	КоллекцияУдержано.Колонки.Добавить("ПериодДействия");
	КоллекцияУдержано.Колонки.Добавить("Сумма");
	КоллекцияУдержано.Колонки.Добавить("Показатель");
	КоллекцияУдержано.Колонки.Добавить("Значение");
	
	КоллекцияВыплачено = Новый ТаблицаЗначений;
	КоллекцияВыплачено.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("Строка"));
	КоллекцияВыплачено.Колонки.Добавить("ПериодДействия");
	КоллекцияВыплачено.Колонки.Добавить("Сумма");
	КоллекцияВыплачено.Колонки.Добавить("Номер");
	КоллекцияВыплачено.Колонки.Добавить("Дата");
	
	КоллекцииРазделов = Новый Структура;
	КоллекцииРазделов.Вставить("Начислено", Новый Массив);
	КоллекцииРазделов.Вставить("Удержано",	КоллекцияУдержано);
	КоллекцииРазделов.Вставить("Выплачено", КоллекцияВыплачено);
	КоллекцииРазделов.Вставить("Льготы",	Новый Массив);
	КоллекцииРазделов.Вставить("Справочно", Новый Массив);
	
	ИзвестныеСтрокиСправочно = Новый Соответствие;
	ИзвестныеСтрокиВыплат = Новый Соответствие;
	ИзвестныеСтрокиЛьготы = Новый Соответствие;
	
	ИнформацияОВидахРасчета = Новый Соответствие;
	
	Для каждого СтрокаГоловногоСотрудника Из СтрокиГоловныхСотрудников Цикл
		
		Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
			
			// Начислено
			РабочееМесто = Новый Структура("СтрокаСотрудника,СтрокиНачислений", СтрокаСотрудника, КоллекцияНачислено.Скопировать());
			
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				
				СторноСтроки = Новый Соответствие;
				РегистраторыНачислений = Новый Соответствие;
				Для каждого СтрокаНачислений Из СтрокаГруппы.Строки Цикл
					
					СтрокаКоллекции = РабочееМесто.СтрокиНачислений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаКоллекции, СтрокаНачислений);
					
					Если НастройкиВывода.ВыводитьПериодыНачислений = Истина Тогда
						
						Если СтрокаНачислений.ПериодДействия = СтрокаНачислений.МесяцНачисления Тогда
							
							Если СтрокаНачислений.Сторно = Истина Тогда
								СторноСтроки.Вставить(СтрокаКоллекции, СтрокаНачислений.Регистратор);
							Иначе
								
								СтрокиРегистратора = РегистраторыНачислений.Получить(СтрокаНачислений.Регистратор);
								Если СтрокиРегистратора = Неопределено Тогда
									СтрокиРегистратора = Новый Соответствие;
									РегистраторыНачислений.Вставить(СтрокаНачислений.Регистратор, СтрокиРегистратора);
								КонецЕсли;
								
								СтрокиРегистратора.Вставить(СтрокаНачислений.ВидРасчета, СтрокаКоллекции);
								
							КонецЕсли;
							
						КонецЕсли;
						
						СтрокаКоллекции.ПериодДействияДатой = НачалоМесяца(СтрокаКоллекции.ПериодДействия);
						Если ЗначениеЗаполнено(СтрокаНачислений.ДатаНачала) И ЗначениеЗаполнено(СтрокаНачислений.ДатаОкончания) Тогда
							
							Если СтрокаНачислений.ДатаНачала <> СтрокаНачислений.ПериодДействия
								Или СтрокаНачислений.ДатаОкончания <> НачалоДня(КонецМесяца(СтрокаНачислений.ПериодДействия)) Тогда
								
								Если СтрокаНачислений.ДатаНачала = СтрокаНачислений.ДатаОкончания Тогда
									СтрокаКоллекции.ПериодДействия = Формат(СтрокаНачислений.ДатаНачала, "ДФ=дд.ММ");
								Иначе
									
									СтрокаКоллекции.ПериодДействия = Формат(СтрокаНачислений.ДатаНачала, "ДФ=дд.ММ") + "-"
										+ Формат(СтрокаНачислений.ДатаОкончания, "ДФ=дд.ММ");
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если НастройкиВывода.ВыводитьОтработанноеОплаченноеВремя = Истина Тогда
						
						СтрокаКоллекции.ОплаченоДней = 0;
						СтрокаКоллекции.ОплаченоЧасов = 0;
						
						УчетВремениВЧасах = СтрокаНачислений.ВремяВЧасах = Истина;
						
						Если УчетВремениВЧасах И ЗначениеЗаполнено(СтрокаНачислений.ОплаченоЧасов) И СтрокаНачислений.ОплаченоЧасов <> 0 Тогда
							СтрокаКоллекции.ОплаченоЧасов = СтрокаНачислений.ОплаченоЧасов;
						ИначеЕсли НЕ УчетВремениВЧасах И ЗначениеЗаполнено(СтрокаНачислений.ОплаченоДней) И СтрокаНачислений.ОплаченоДней <> 0 Тогда
							СтрокаКоллекции.ОплаченоДней = СтрокаНачислений.ОплаченоДней;
						КонецЕсли;
						
					КонецЕсли;
					
					ИтогиРазделов.Начислено = ИтогиРазделов.Начислено + СтрокаНачислений.Сумма;
					Если ТипЗнч(СтрокаНачислений.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
						
						ЯвляетсяДоходомВНатуральнойФорме = ИнформацияОВидахРасчета.Получить(СтрокаНачислений.ВидРасчета);
						Если ЯвляетсяДоходомВНатуральнойФорме = Неопределено Тогда
							ЯвляетсяДоходомВНатуральнойФорме = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаНачислений.ВидРасчета, "ЯвляетсяДоходомВНатуральнойФорме");
							ИнформацияОВидахРасчета.Вставить(СтрокаНачислений.ВидРасчета, ЯвляетсяДоходомВНатуральнойФорме);
						КонецЕсли;
						
						Если ЯвляетсяДоходомВНатуральнойФорме = Истина Тогда
							ИтогиРазделов.НачисленоВНатуральнойФорме = ИтогиРазделов.НачисленоВНатуральнойФорме + СтрокаНачислений.Сумма;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если РабочееМесто.СтрокиНачислений.Количество() > 0 Тогда
				
				Если СторноСтроки.Количество() > 0 Тогда
					
					Для Каждого ОписаниеСторноСтроки Из СторноСтроки Цикл
						
						СторноСтрока = ОписаниеСторноСтроки.Ключ;
						СтрокиРегистратора = РегистраторыНачислений.Получить(ОписаниеСторноСтроки.Значение);
						Если СтрокиРегистратора <> Неопределено Тогда
							
							СтрокаВидаРасчета = СтрокиРегистратора.Получить(СторноСтрока.ВидРасчета);
							Если СтрокаВидаРасчета <> Неопределено Тогда
								ЗаполнитьЗначенияСвойств(СторноСтрока, СтрокаВидаРасчета, "ПериодДействия,ПериодДействияДатой");
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				СворачиваемыеКолонки = "ВидРасчета";
				СуммируемыеКолонки = "Сумма";
				
				Если НастройкиВывода.ВыводитьПериодыНачислений = Истина Тогда
					СворачиваемыеКолонки = СворачиваемыеКолонки + ",ПериодДействия,ПериодДействияДатой,МесяцНачисления";
				КонецЕсли;
				
				Если НастройкиВывода.ВыводитьОтработанноеОплаченноеВремя = Истина Тогда
					СуммируемыеКолонки = СуммируемыеКолонки + ",ОтработаноДней,ОтработаноЧасов,ОплаченоДней,ОплаченоЧасов";
				КонецЕсли;
				
				Если НастройкиВывода.ВыводитьОснованияНачисленийИУдержаний = Истина Тогда
					СворачиваемыеКолонки = СворачиваемыеКолонки + ",ДокументОснование";
				КонецЕсли;
				
				Если НастройкиВывода.ВыводитьПоказателиНачисленийИУдержаний = Истина Тогда
					СворачиваемыеКолонки = СворачиваемыеКолонки + ",Показатель,Значение";
				КонецЕсли;
				
				РабочееМесто.СтрокиНачислений.Свернуть(СворачиваемыеКолонки, СуммируемыеКолонки);
				
				Если НастройкиВывода.ВыводитьПериодыНачислений = Истина Тогда
					
					УдаляемыеСтроки = Новый Массив;
					Для каждого СтрокаНачислений Из РабочееМесто.СтрокиНачислений Цикл
						
						Если СтрокаНачислений.ПериодДействияДатой = СтрокаНачислений.МесяцНачисления Тогда
							Продолжить;
						КонецЕсли;
						
						УдалитьСтроку = Истина;
						Для каждого ИмяКолонки Из СтрРазделить(СуммируемыеКолонки, ",") Цикл
							Если СтрокаНачислений[ИмяКолонки] <> 0 Тогда
								УдалитьСтроку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если УдалитьСтроку Тогда
							УдаляемыеСтроки.Добавить(СтрокаНачислений);
						КонецЕсли;
						
					КонецЦикла;
					
					Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
						РабочееМесто.СтрокиНачислений.Удалить(УдаляемаяСтрока);
					КонецЦикла;
					
				КонецЕсли;
				
				КоллекцииРазделов.Начислено.Добавить(РабочееМесто);
				
			КонецЕсли;
			
			// Удержано
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				
				Для каждого СтрокаУдержаний Из СтрокаГруппы.Строки Цикл
					
					СтрокаКоллекции = КоллекцииРазделов.Удержано.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаКоллекции, СтрокаУдержаний);
					
					ИтогиРазделов.Удержано = ИтогиРазделов.Удержано + СтрокаУдержаний.Сумма;
					
				КонецЦикла;
				
				СворачиваемыеКолонки = "ВидРасчета";
				
				Если НастройкиВывода.ВыводитьОснованияНачисленийИУдержаний = Истина Тогда
					СворачиваемыеКолонки = СворачиваемыеКолонки + ",ДокументОснование";
				КонецЕсли;
				
				Если НастройкиВывода.ВыводитьПериодыНачислений = Истина Тогда
					СворачиваемыеКолонки = СворачиваемыеКолонки + ",ПериодДействия";
				КонецЕсли;
				
				Если НастройкиВывода.ВыводитьПоказателиНачисленийИУдержаний = Истина Тогда
					СворачиваемыеКолонки = СворачиваемыеКолонки + ",Показатель,Значение";
				КонецЕсли;
				
				КоллекцииРазделов.Удержано.Свернуть(СворачиваемыеКолонки, "Сумма");
				
			КонецЕсли;
			
			// Выплачено
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				
				Для каждого СтрокаВыплачено Из СтрокаГруппы.Строки Цикл
					
					Для каждого СтрокаСРегистратором Из СтрокаВыплачено.Строки Цикл
						
						СтрокаКоллекции = ИзвестныеСтрокиВыплат.Получить(СтрокаСРегистратором.Регистратор);
						Если СтрокаКоллекции = Неопределено Тогда
							
							СтрокаКоллекции = КоллекцииРазделов.Выплачено.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаКоллекции, СтрокаСРегистратором);
							
							СвойстваРегистратора = СвойстваРегистраторов.Получить(СтрокаСРегистратором.Регистратор);
							Если СвойстваРегистратора <> Неопределено Тогда
								
								Если НастройкиВывода.ДетализироватьВыплатыПоВедомостям = Истина
									И ЗначениеЗаполнено(СтрокаСРегистратором.Регистратор) Тогда
									
									СтрокаКоллекции.Номер = СвойстваРегистратора.Номер;
									СтрокаКоллекции.Дата = СвойстваРегистратора.Дата;
									СтрокаКоллекции.ВидРасчета = СтрокаКоллекции.ВидРасчета + " "
										+ ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СвойстваРегистратора.Номер, Истина, Истина)	+ " "
										+ НСтр("ru='от'") + " " + Формат(СвойстваРегистратора.Дата, "ДФ=dd.MM.yy");	
									
								КонецЕсли;
								
								Если НастройкиВывода.ВыводитьПериодыНачислений = Истина И СвойстваРегистратора.Свойство("ПериодРегистрации") Тогда
									СтрокаКоллекции.ПериодДействия = СвойстваРегистратора.ПериодРегистрации;
								КонецЕсли;
								
							КонецЕсли;
							
							ИзвестныеСтрокиВыплат.Вставить(СтрокаСРегистратором.Регистратор, СтрокаКоллекции);
							
						Иначе
							СтрокаКоллекции.Сумма = СтрокаКоллекции.Сумма + СтрокаСРегистратором.Сумма;
						КонецЕсли;
						
					КонецЦикла;
					
					ИтогиРазделов.Выплачено = ИтогиРазделов.Выплачено + СтрокаВыплачено.Сумма;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Льготы
			Если НастройкиВывода.ВыводитьИнформациюОЛьготах = Истина Тогда
				
				СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы, "Группа");
				Если СтрокаГруппы <> Неопределено Тогда
					
					Для каждого СтрокаЛьготы Из СтрокаГруппы.Строки Цикл
						
						СтрокаКоллекции = ИзвестныеСтрокиЛьготы.Получить(СтрокаЛьготы.ВидРасчета);
						Если СтрокаКоллекции = Неопределено Тогда
							
							СтрокаКоллекции = Новый Структура("ВидРасчета,Сумма");
							ЗаполнитьЗначенияСвойств(СтрокаКоллекции, СтрокаЛьготы);
							КоллекцииРазделов.Льготы.Добавить(СтрокаКоллекции);
							ИзвестныеСтрокиЛьготы.Вставить(СтрокаЛьготы.ВидРасчета, СтрокаКоллекции);
							
						Иначе
							СтрокаКоллекции.Сумма = СтрокаКоллекции.Сумма + СтрокаЛьготы.Сумма;
						КонецЕсли;
						
					КонецЦикла;
				
				КонецЕсли;
			
			КонецЕсли;
			
			// Справочно
			Если НастройкиВывода.ВыводитьСправочнуюИнформацию = Истина Тогда
				
				СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно, "Группа");
				Если СтрокаГруппы <> Неопределено Тогда
					
					Для каждого СтрокаСправочно Из СтрокаГруппы.Строки Цикл
						
						СтрокаКоллекции = ИзвестныеСтрокиСправочно.Получить(СтрокаСправочно.ВидРасчета);
						Если СтрокаКоллекции = Неопределено Тогда
							
							СтрокаКоллекции = Новый Структура("ВидРасчета,Сумма");
							ЗаполнитьЗначенияСвойств(СтрокаКоллекции, СтрокаСправочно);
							КоллекцииРазделов.Справочно.Добавить(СтрокаКоллекции);
							ИзвестныеСтрокиСправочно.Вставить(СтрокаСправочно.ВидРасчета, СтрокаКоллекции);
							
						Иначе
							СтрокаКоллекции.Сумма = СтрокаКоллекции.Сумма + СтрокаСправочно.Сумма;
						КонецЕсли;
						
					КонецЦикла;
				
				КонецЕсли;
				
			КонецЕсли;
			
			// Начальное сальдо
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо, "Группа");
			УвеличитьРезультатНаСуммуСтроки(ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца, СтрокаГруппы);
			
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдоПоМесяцамРасчета, "Группа");
			УвеличитьРезультатНаСуммуСтроки(ИтогиПоГруппам.СуммаДолгаНаНачалоМесяцаРасчета, СтрокаГруппы);
			
			// КонечноеСальдо
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо, "Группа");
			УвеличитьРезультатНаСуммуСтроки(ИтогиПоГруппам.СуммаДолгаНаКонецМесяца, СтрокаГруппы);
			
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдоПоМесяцамРасчета, "Группа");
			УвеличитьРезультатНаСуммуСтроки(ИтогиПоГруппам.СуммаДолгаНаКонецМесяцаРасчета, СтрокаГруппы);
			
			Если НастройкиВывода.РассчитатьИтогиПоДанным Тогда
				
				ИтогиПоГруппам.СуммаДолгаНаКонецМесяца =
					ИтогиПоГруппам.СуммаДолгаНаКонецМесяца
					+ ИтогиРазделов.Начислено
					- ИтогиРазделов.Удержано
					- ИтогиРазделов.Выплачено;
				
				ИтогиПоГруппам.СуммаДолгаНаКонецМесяцаРасчета =
					ИтогиПоГруппам.СуммаДолгаНаКонецМесяцаРасчета
					+ ИтогиРазделов.Начислено
					- ИтогиРазделов.Удержано
					- ИтогиРазделов.Выплачено;
				
				КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	СворачиваемыеКолонки = "ВидРасчета";
	Если НастройкиВывода.ДетализироватьВыплатыПоВедомостям Тогда
		СворачиваемыеКолонки = СворачиваемыеКолонки + ",Дата,Номер";
		КоллекцииРазделов.Выплачено.Сортировать("Дата,Номер");
	КонецЕсли;
	Если НастройкиВывода.ВыводитьПериодыНачислений = Истина Тогда
		СворачиваемыеКолонки = СворачиваемыеКолонки + ",ПериодДействия";
	КонецЕсли;
	КоллекцииРазделов.Выплачено.Свернуть(СворачиваемыеКолонки, "Сумма");
	
	УдалитьСтрокиСНулевойСуммой(КоллекцииРазделов.Выплачено);
	
	#КонецОбласти

	#Область ВыводТела
	
	СтрокНачислено = 0;
	Для каждого СтрокиРабочегоМеста Из КоллекцииРазделов.Начислено Цикл
		СтрокНачислено = СтрокНачислено + СтрокиРабочегоМеста.СтрокиНачислений.Количество() + 1;
	КонецЦикла;
	
	Если СтрокНачислено > 0
		И КоллекцииРазделов.Начислено[0].СтрокаСотрудника.Сотрудник <> КоллекцииРазделов.Начислено[0].СтрокаСотрудника.ГоловнойСотрудник Тогда
		
		СтрокНачислено = СтрокНачислено + 1;
		
	КонецЕсли;
	
	Если ИтогиРазделов.НачисленоВНатуральнойФорме <> 0 Тогда
		ЕстьИтогиПоНачисленоВНатуральнойФорме = Истина;
		СтрокНачислено = СтрокНачислено + 1;
	Иначе
		ЕстьИтогиПоНачисленоВНатуральнойФорме = Ложь;
	КонецЕсли;
	
	КоличествоСтрокУдержано = КоллекцииРазделов.Удержано.Количество();
	КоличествоСтрокВыплачено = КоллекцииРазделов.Выплачено.Количество();
	СтрокУдержаноВыплачено = КоличествоСтрокУдержано + КоличествоСтрокВыплачено + 2;
	
	// Вывод шапки
	Если НастройкиВывода.ВыводитьОтработанноеОплаченноеВремя = Истина Тогда
		ВывестиОбластиСтроки(ДокументРезультат, Макет, "ШапкаТаблицы", НастройкиВывода, ДанныеПечатнойФормы);
	Иначе
		ВывестиОбластиСтроки(ДокументРезультат, Макет, "ШапкаТаблицыНизкая", НастройкиВывода, ДанныеПечатнойФормы);
	КонецЕсли;
	
	// Вывод таблиц Начислено, Удержано, Выплачено
	
	СтрокВыведено = 0;
	НомерРабочегоМеста = 0;
	ИндексРабочегоМеста = 0;
	СтрокРабочегоМеста = 0;
	ВывестиЗаголовокРабочегоМеста = Ложь;
	
	Пока СтрокВыведено < СтрокНачислено Или СтрокВыведено < СтрокУдержаноВыплачено Цикл
		
		РасшифровкаНачисленийУдержаний = Новый ТаблицаЗначений;
		РасшифровкаНачисленийУдержаний.Колонки.Добавить("РасшифровкаНачисления");
		РасшифровкаНачисленийУдержаний.Колонки.Добавить("РасшифровкаНачисленияОбласть");
		РасшифровкаНачисленийУдержаний.Колонки.Добавить("РасшифровкаУдержания");
		РасшифровкаНачисленийУдержаний.Колонки.Добавить("РасшифровкаУдержанияОбласть");
		
		ПараметрыЗаполнения = Новый Структура("ПредставлениеРабочегоМеста,ВидРасчета,ПериодДействия,ОтработаноДней,ОтработаноЧасов,ОплаченныеДниЧасы,Сумма");
		
		// Вывод Начислено
		ПрисоединитьОбласть = Ложь;
		Если КоллекцииРазделов.Начислено.Количество() = 0 Тогда
			
			Если СтрокВыведено = 0 Тогда
				ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "ЗаголовокНачисленоУдержано", НастройкиВывода, ДополненныеПараметры(ДанныеПечатнойФормы, ПараметрыЗаполнения));
			Иначе
				ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "Строка", НастройкиВывода, ДополненныеПараметры(ДанныеПечатнойФормы, ПараметрыЗаполнения));
			КонецЕсли;
			
		ИначеЕсли ИндексРабочегоМеста < КоллекцииРазделов.Начислено.Количество() Тогда
			
			РабочееМесто = КоллекцииРазделов.Начислено[ИндексРабочегоМеста];
			Если СтрокВыведено = 0 Или ЕстьИтогиПоНачисленоВНатуральнойФорме И СтрокВыведено = 1 Тогда
				
				Если СтрокВыведено = 0 Тогда
					
					ИмяОбластиСтроки = "ЗаголовокНачисленоУдержано";
					
					Если РабочееМесто.СтрокаСотрудника.Сотрудник <> РабочееМесто.СтрокаСотрудника.ГоловнойСотрудник Тогда
						ВывестиЗаголовокРабочегоМеста = Истина;
					КонецЕсли;
					
					ИндексСтрокиНачислено = 0;
					ПараметрыЗаполнения.Сумма = ИтогиРазделов.Начислено;
					
				Иначе
					ИмяОбластиСтроки = "ЗаголовокНачисленоВНатуральнойФорме";
					ПараметрыЗаполнения.Сумма = ИтогиРазделов.НачисленоВНатуральнойФорме;
				КонецЕсли;
				
			Иначе
				
				Если ВывестиЗаголовокРабочегоМеста Тогда
					
					ИмяОбластиСтроки = "ЗаголовокРабочееМестоВыплачено";
					Если РабочееМесто.СтрокаСотрудника.Сотрудник <> РабочееМесто.СтрокаСотрудника.ГоловнойСотрудник Тогда
						ПараметрыЗаполнения.ПредставлениеРабочегоМеста = РабочееМесто.СтрокаСотрудника.СотрудникУточнениеНаименования;
					Иначе
						ПараметрыЗаполнения.ПредставлениеРабочегоМеста = 
							Строка(РабочееМесто.СтрокаСотрудника.ДолжностьНаКонецПериода)
							+ " (" + РабочееМесто.СтрокаСотрудника.ВидЗанятостиГоловногоСотрудникаНаКонецПериода + ")";
					КонецЕсли;
					
				Иначе
					
					ИмяОбластиСтроки = "Строка";
					Если ИндексСтрокиНачислено < РабочееМесто.СтрокиНачислений.Количество() Тогда
						
						СтрокаНачислений = РабочееМесто.СтрокиНачислений[ИндексСтрокиНачислено];
						ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, СтрокаНачислений);
						
						Если НастройкиВывода.ВыводитьОснованияНачисленийИУдержаний = Истина
							И ЗначениеЗаполнено(СтрокаНачислений.ДокументОснование) Тогда
							
							ПараметрыОбласти = Новый Структура("ДокументОснование", СтрокаНачислений.ДокументОснование);
							ДобавитьРасшифровкуНачисления(РасшифровкаНачисленийУдержаний, "РасшифровкаНачисления", "ДокументОснование", ПараметрыОбласти);
							
						КонецЕсли;
						
						Если НастройкиВывода.ВыводитьПоказателиНачисленийИУдержаний = Истина
							И ЗначениеЗаполнено(СтрокаНачислений.Показатель) Тогда
							
							ПараметрыОбласти = Новый Структура();
							ПараметрыОбласти.Вставить("Показатель", СтрокаНачислений.Показатель);
							ПараметрыОбласти.Вставить("Значение", СтрокаНачислений.Значение);
							
							ДобавитьРасшифровкуНачисления(РасшифровкаНачисленийУдержаний, "РасшифровкаНачисления", "Показатель", ПараметрыОбласти);
							
						КонецЕсли;
						
						Если НастройкиВывода.ВыводитьОтработанноеОплаченноеВремя = Истина Тогда
							
							Если ЗначениеЗаполнено(СтрокаНачислений.ОплаченоДней) И СтрокаНачислений.ОплаченоДней <> 0 Тогда
								ПараметрыЗаполнения.ОплаченныеДниЧасы = Формат(СтрокаНачислений.ОплаченоДней, "ЧДЦ=2; ЧН=") + " " + НСтр("ru='дн'") + ".";
							КонецЕсли;
							
							Если ЗначениеЗаполнено(СтрокаНачислений.ОплаченоЧасов) И СтрокаНачислений.ОплаченоЧасов <> 0 Тогда
								
								Если Не ПустаяСтрока(ПараметрыЗаполнения.ОплаченныеДниЧасы) Тогда
									ПараметрыЗаполнения.ОплаченныеДниЧасы = ПараметрыЗаполнения.ОплаченныеДниЧасы + " " + НСтр("ru='и'") + " ";
								КонецЕсли;
								
								ПараметрыЗаполнения.ОплаченныеДниЧасы = Формат(СтрокаНачислений.ОплаченоЧасов, "ЧДЦ=2; ЧН=") + " " + НСтр("ru='чс'") + ".";
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ВывестиЗаголовокРабочегоМеста Тогда
					ИндексСтрокиНачислено = ИндексСтрокиНачислено + 1;
				КонецЕсли;
				
				Если ИндексСтрокиНачислено >= РабочееМесто.СтрокиНачислений.Количество() Тогда
					ИндексРабочегоМеста = ИндексРабочегоМеста + 1;
					ИндексСтрокиНачислено = 0;
					ВывестиЗаголовокРабочегоМеста = Истина;
				Иначе
					ВывестиЗаголовокРабочегоМеста = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, ДополненныеПараметры(ДанныеПечатнойФормы, ПараметрыЗаполнения));
			
		Иначе
			
			ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "Строка", НастройкиВывода, ДополненныеПараметры(ДанныеПечатнойФормы, ПараметрыЗаполнения));
			
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура("ВидРасчета,ПериодДействия,Сумма");
		
		// Вывод Удержано, Выплачено
		Если СтрокВыведено <= СтрокУдержаноВыплачено Тогда
			
			ИндексСтрокиУдержано = СтрокВыведено - 1;
			Если ИндексСтрокиУдержано < КоличествоСтрокУдержано Тогда
				
				Если ИндексСтрокиУдержано = -1 Тогда
					ИмяОбластиСтроки = "ЗаголовокНачисленоУдержано";
					ПараметрыЗаполнения.Сумма = ИтогиРазделов.Удержано;
				Иначе
					
					ИмяОбластиСтроки = "Строка";
					СтрокаУдержаний = КоллекцииРазделов.Удержано[ИндексСтрокиУдержано];
					
					Если НастройкиВывода.ВыводитьОснованияНачисленийИУдержаний = Истина
						И ЗначениеЗаполнено(СтрокаУдержаний.ДокументОснование) Тогда
						
						ПараметрыОбласти = Новый Структура("ДокументОснование", СтрокаУдержаний.ДокументОснование);
						ДобавитьРасшифровкуНачисления(РасшифровкаНачисленийУдержаний, "РасшифровкаУдержания", "ДокументОснование", ПараметрыОбласти);
						
					КонецЕсли;
				
					Если НастройкиВывода.ВыводитьПоказателиНачисленийИУдержаний = Истина
						И ЗначениеЗаполнено(СтрокаУдержаний.Показатель) Тогда
						
						ПараметрыОбласти = Новый Структура();
						ПараметрыОбласти.Вставить("Показатель", СтрокаУдержаний.Показатель);
						ПараметрыОбласти.Вставить("Значение", СтрокаУдержаний.Значение);
						
						ДобавитьРасшифровкуНачисления(РасшифровкаНачисленийУдержаний, "РасшифровкаУдержания", "Показатель", ПараметрыОбласти);
						
					КонецЕсли;
					
					ПараметрыЗаполнения = СтрокаУдержаний;
					
				КонецЕсли;
				
			Иначе
				
				ИндексСтрокиВыплачено = СтрокВыведено - 2 - КоличествоСтрокУдержано;
				Если ИндексСтрокиВыплачено < КоличествоСтрокВыплачено Тогда
					
					Если ИндексСтрокиВыплачено = -1 Тогда
						ИмяОбластиСтроки = "ЗаголовокРабочееМестоВыплачено";
						ПараметрыЗаполнения.Сумма = ИтогиРазделов.Выплачено;
					Иначе
						
						ИмяОбластиСтроки = "Строка";
						ПараметрыЗаполнения = КоллекцииРазделов.Выплачено[ИндексСтрокиВыплачено];
						
					КонецЕсли;
					
				Иначе
					ИмяОбластиСтроки = "Строка";
				КонецЕсли;
				
			КонецЕсли;
			
			ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, ДополненныеПараметры(ДанныеПечатнойФормы, ПараметрыЗаполнения));
			
		Иначе
			ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, "Строка", НастройкиВывода, ДополненныеПараметры(ДанныеПечатнойФормы, ПараметрыЗаполнения));
		КонецЕсли;
		
		Для Каждого СтрокаРасшифровкаНачисленийУдержаний Из РасшифровкаНачисленийУдержаний Цикл
			
			ИмяОбластиНачислений = "СтрокаРасшифровка";
			Если ПустаяСтрока(СтрокаРасшифровкаНачисленийУдержаний.РасшифровкаНачисленияОбласть) Тогда
				ИмяОбластиНачислений = ИмяОбластиНачислений + СтрокаРасшифровкаНачисленийУдержаний.РасшифровкаУдержанияОбласть;
			Иначе
				ИмяОбластиНачислений = ИмяОбластиНачислений + СтрокаРасшифровкаНачисленийУдержаний.РасшифровкаНачисленияОбласть;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаРасшифровкаНачисленийУдержаний.РасшифровкаНачисления) Тогда
				
				РасшифровкаНачисленияУдержания = Новый Структура;
				Для Каждого КлючИЗначениеСтруктуры Из СтрокаРасшифровкаНачисленийУдержаний.РасшифровкаУдержания Цикл
					РасшифровкаНачисленияУдержания.Вставить(КлючИЗначениеСтруктуры.Ключ);
				КонецЦикла;
				
			Иначе
				РасшифровкаНачисленияУдержания = СтрокаРасшифровкаНачисленийУдержаний.РасшифровкаНачисления;
			КонецЕсли;
			
			ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, ИмяОбластиНачислений, НастройкиВывода,
				ДополненныеПараметры(ДанныеПечатнойФормы, РасшифровкаНачисленияУдержания));
			
			ИмяОбластиУдержаний = "СтрокаРасшифровка";
			Если ПустаяСтрока(СтрокаРасшифровкаНачисленийУдержаний.РасшифровкаУдержанияОбласть) Тогда
				ИмяОбластиУдержаний = ИмяОбластиУдержаний + СтрокаРасшифровкаНачисленийУдержаний.РасшифровкаНачисленияОбласть;
			Иначе
				ИмяОбластиУдержаний = ИмяОбластиУдержаний + СтрокаРасшифровкаНачисленийУдержаний.РасшифровкаУдержанияОбласть;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаРасшифровкаНачисленийУдержаний.РасшифровкаУдержания) Тогда
				
				РасшифровкаНачисленияУдержания = Новый Структура;
				Для Каждого КлючИЗначениеСтруктуры Из СтрокаРасшифровкаНачисленийУдержаний.РасшифровкаНачисления Цикл
					РасшифровкаНачисленияУдержания.Вставить(КлючИЗначениеСтруктуры.Ключ);
				КонецЦикла;
				
			Иначе
				РасшифровкаНачисленияУдержания = СтрокаРасшифровкаНачисленийУдержаний.РасшифровкаУдержания;
			КонецЕсли;
			
			ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиУдержаний, НастройкиВывода,
				ДополненныеПараметры(ДанныеПечатнойФормы, РасшифровкаНачисленияУдержания));
			
		КонецЦикла;
		
		СтрокВыведено = СтрокВыведено + 1;
		
	КонецЦикла;
	
	ВывестиОбластиСтроки(ДокументРезультат, Макет, "ПодвалТаблицы", НастройкиВывода, ДанныеПечатнойФормы);
	
	// Льготы
	
	Если КоллекцииРазделов.Льготы.Количество() > 0 Тогда
		
		Область = Макет.ПолучитьОбласть("ШапкаЛьготы");
		ДокументРезультат.Вывести(Область);
		
		ВывестиТелоСправочнойИнформации(ДокументРезультат, Макет, КоллекцииРазделов.Льготы);
		
	КонецЕсли;
	
	// Справочно
	
	Если КоллекцииРазделов.Справочно.Количество() > 0 Тогда
		
		Область = Макет.ПолучитьОбласть("ШапкаСправочно");
		ДокументРезультат.Вывести(Область);
		
		ВывестиТелоСправочнойИнформации(ДокументРезультат, Макет, КоллекцииРазделов.Справочно);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат ИтогиПоГруппам;
	
КонецФункции

Процедура ДобавитьРасшифровкуНачисления(РасшифровкаНачисленийУдержаний, ИдентификаторКолонки, Область, РасшифровкаНачисленияУдержания)
	
	СтрокаНачисленийУдержаний = Неопределено;
	Для Каждого СтрокаКоллекции Из РасшифровкаНачисленийУдержаний Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаКоллекции[ИдентификаторКолонки]) Тогда
			СтрокаНачисленийУдержаний = СтрокаКоллекции;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаНачисленийУдержаний = Неопределено Тогда
		СтрокаНачисленийУдержаний = РасшифровкаНачисленийУдержаний.Добавить();
	КонецЕсли;
	
	СтрокаНачисленийУдержаний[ИдентификаторКолонки] = РасшифровкаНачисленияУдержания;
	СтрокаНачисленийУдержаний[ИдентификаторКолонки + "Область"] = Область;
	
КонецПроцедуры

Процедура ВывестиОбластиСтроки(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, Параметры = Неопределено)
	
	ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, Параметры);
	ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, Параметры)
	
КонецПроцедуры

Процедура ВывестиОбластиТекстовуюОбласть(ДокументРезультат, Макет, НастройкиВывода, ТекстоваяИнформация, ДанныеПечатнойФормы)
	
	Если Не ПустаяСтрока(ТекстоваяИнформация) Тогда
		
		ДанныеПечатнойФормыЛокально = ДополненныеПараметры(ДанныеПечатнойФормы, Новый Структура("ТекстоваяИнформация", ТекстоваяИнформация));
		
		ВывестиОбластиСтроки(ДокументРезультат, Макет, "ТекстоваяИнформация", НастройкиВывода, ДанныеПечатнойФормыЛокально);
		НастроитьОбъединение(ДокументРезультат, 1, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено) + ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейУдержаноВыплачено));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, Параметры = Неопределено)
	
	ПрисоединитьОбласть = Ложь;
	Для каждого ИмяОбласти Из НастройкиВывода.ИменаОбластейНачислено Цикл
		
		Область = Макет.ПолучитьОбласть(ИмяОбластиСтроки + "|" + ИмяОбласти);
		ЗаполнитьПараметрыОбласти(Область, Параметры);
		
		Если ПрисоединитьОбласть Тогда
			ДокументРезультат.Присоединить(Область);
		Иначе
			ДокументРезультат.Вывести(Область);
			ПрисоединитьОбласть = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, Параметры = Неопределено)
	
	Для каждого ИмяОбласти Из НастройкиВывода.ИменаОбластейУдержаноВыплачено Цикл
		
		Область = Макет.ПолучитьОбласть(ИмяОбластиСтроки + "|" + ИмяОбласти);
		ЗаполнитьПараметрыОбласти(Область, Параметры);
		
		ДокументРезультат.Присоединить(Область);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыОбласти(Область, Параметры)
	
	Если Параметры <> Неопределено И Область.Параметры.Количество() > 0 Тогда
		
		Если ТипЗнч(Параметры) = Тип("Массив") Тогда
			
			Для Каждого ЗначенияПараметров Из Параметры Цикл
				Область.Параметры.Заполнить(ЗначенияПараметров);
			КонецЦикла;
			
		Иначе
			Область.Параметры.Заполнить(Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НастройкиВыводаРасчетногоЛистка(НастройкиОтчета, ПредварительныйПросмотр = Ложь, НаАванс = Ложь)
	
	НастройкиВывода = Новый Структура;
	
	НастройкиВывода.Вставить("ПредварительныйПросмотр", ПредварительныйПросмотр);
	НастройкиВывода.Вставить("РассчитатьИтогиПоДанным", ПредварительныйПросмотр Или НаАванс);
	
	ИмяПараметра = "ВыводитьСуммуНачисленнойЗарплатыВРазделеКВыплате";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ВыводитьПериодыНачислений";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ВыводитьОтработанноеОплаченноеВремя";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ДетализироватьВыплатыПоВедомостям";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ВыводитьСправочнуюИнформацию";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ВыводитьИнформациюОЛьготах";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ВыводитьОснованияНачисленийИУдержаний";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ВыводитьПоказателиНачисленийИУдержаний";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ВыводитьОсобенностиРасчетаНДФЛ";
	НастройкиВывода.Вставить(ИмяПараметра, Не НаАванс И (ЗначениеПараметра(НастройкиОтчета, ИмяПараметра) = Истина));
	
	ИмяПараметра = "ВыводитьИнформациюОНачисленныхВзносахВПФР";
	НастройкиВывода.Вставить(ИмяПараметра, Не НаАванс И (ЗначениеПараметра(НастройкиОтчета, ИмяПараметра) = Истина));
	
	ИменаОбластейНачислено = "ВидНачислено";
	ИменаОбластейУдержаноВыплачено = "ВидУдержаноВыплачено";
	
	Если НастройкиВывода.ВыводитьПериодыНачислений <> Ложь Тогда
		ИменаОбластейНачислено = ИменаОбластейНачислено + ",ПериодНачислено";
		ИменаОбластейУдержаноВыплачено = ИменаОбластейУдержаноВыплачено + ",ПериодУдержаноВыплачено";
	КонецЕсли;
	
	Если НастройкиВывода.ВыводитьОтработанноеОплаченноеВремя <> Ложь Тогда
		ИменаОбластейНачислено = ИменаОбластейНачислено + ",РабочиеОплаченныеДни";
	КонецЕсли;
	
	ИменаОбластейНачислено = ИменаОбластейНачислено + ",СуммаНачислено";
	ИменаОбластейУдержаноВыплачено = ИменаОбластейУдержаноВыплачено + ",СуммаУдержаноВыплачено";
	
	НастройкиВывода.Вставить("ИменаОбластейНачислено", СтрРазделить(ИменаОбластейНачислено, ","));
	НастройкиВывода.Вставить("ИменаОбластейУдержаноВыплачено", СтрРазделить(ИменаОбластейУдержаноВыплачено, ","));
	
	Возврат НастройкиВывода;
	
КонецФункции

Функция ЗначениеПараметра(НастройкиОтчета, ИмяПараметра)

	Значение = Неопределено;
	ПараметрОтчета = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ПараметрОтчета <> Неопределено И ПараметрОтчета.Использование = Истина Тогда
		Значение = ПараметрОтчета.Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция НастроитьОбъединение(ДокументРезультат, НомерКолонки, Ширина, НомерСтроки = Неопределено)
	
	Если НомерСтроки = Неопределено Тогда
		НомерСтроки = ДокументРезультат.ВысотаТаблицы;
	КонецЕсли;
	
	Область = ДокументРезультат.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки + Ширина - 1);
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	Область.Объединить();
	
КонецФункции

Функция ШиринаОбластей(Макет, ИменаОбластей, СтрокаИменИсключаемыхОбластей = "")
	
	Ширина = 0;
	ИсключаемыеОбласти = СтрРазделить(ВРег(СтрокаИменИсключаемыхОбластей), ",");
	
	Для каждого ИмяОбласти Из ИменаОбластей Цикл
		
		Если ИсключаемыеОбласти.Найти(ВРег(ИмяОбласти)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Область = Макет.ПолучитьОбласть("Строка|" + ИмяОбласти);
		Ширина = Ширина + Область.ШиринаТаблицы;
		
	КонецЦикла;
	
	Возврат Ширина;
	
КонецФункции

Процедура УдалитьСтрокиСНулевойСуммой(КоллекцияСтрок)
	
	СтрокиКУдалению = Новый Массив;
	
	Для каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаКоллекции.Сумма) Тогда
			СтрокиКУдалению.Добавить(СтрокаКоллекции);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		КоллекцияСтрок.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбщиеИтоги(ПараметрыОбщихИтогов, Итоги)
	
	Если ЗначениеЗаполнено(Итоги.СуммаДолгаНаНачалоМесяца) Тогда
		
		Если Итоги.СуммаДолгаНаНачалоМесяца > 0 Тогда
			ПараметрыОбщихИтогов.ДолгОрганизацииНаНачалоМесяца = Итоги.СуммаДолгаНаНачалоМесяца;
		Иначе
			ПараметрыОбщихИтогов.ДолгСотрудникаНаНачалоМесяца = - Итоги.СуммаДолгаНаНачалоМесяца;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Итоги.СуммаДолгаНаКонецМесяца) Тогда
		
		Если Итоги.СуммаДолгаНаКонецМесяца > 0 Тогда
			ПараметрыОбщихИтогов.ДолгОрганизацииНаКонецМесяца = Итоги.СуммаДолгаНаКонецМесяца;
		Иначе
			ПараметрыОбщихИтогов.ДолгСотрудникаНаКонецМесяца = - Итоги.СуммаДолгаНаКонецМесяца;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиИтогиВзаиморасчетов(ДокументРезультат, Макет, НастройкиВывода, ПараметрыИтогов, ДанныеПечатнойФормы)
	
	Если ЗначениеЗаполнено(ПараметрыИтогов.ДолгСотрудникаНаНачалоМесяца) Тогда
		ИмяОбластиСтроки = "ДолгЗаРаботником";
	Иначе
		ИмяОбластиСтроки = "ДолгЗаПредприятием";
	КонецЕсли;
	
	ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, ДанныеПечатнойФормы);
	НастроитьОбъединение(ДокументРезультат, 1, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено, "СуммаНачислено"));
	
	Если ЗначениеЗаполнено(ПараметрыИтогов.ДолгСотрудникаНаКонецМесяца) Тогда
		ИмяОбластиСтроки = "ДолгЗаРаботником";
	Иначе
		ИмяОбластиСтроки = "ДолгЗаПредприятием";
	КонецЕсли;
	
	ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, ДанныеПечатнойФормы);
	
	НастроитьОбъединение(ДокументРезультат, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено) + 1,
		ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейУдержаноВыплачено, "СуммаУдержаноВыплачено"));
	
КонецПроцедуры

Процедура ВывестиТелоСправочнойИнформации(ДокументРезультат, Макет, КоллекцияСправочныхДанных)
	
	КоличествоСекций = КоличествоСекций(ДокументРезультат);
	
	НомерСекции = 0;
	Для каждого СтрокаСправочно Из КоллекцияСправочныхДанных Цикл
		
		Область = Макет.ПолучитьОбласть("СуммаЛьготыСправочно|ЛьготыСправочно");
		ЗаполнитьЗначенияСвойств(Область.Параметры, СтрокаСправочно);
		
		Если НомерСекции = 0 Тогда
			ДокументРезультат.Вывести(Область);
		Иначе
			ДокументРезультат.Присоединить(Область);
		КонецЕсли;
		
		НомерСекции = НомерСекции + 1;
		Если НомерСекции = КоличествоСекций Тогда
			НомерСекции = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КоличествоСекций(ДокументРезультат)
	
	Возврат Цел((ДокументРезультат.ШиринаТаблицы  + 1) / 11);
	
КонецФункции

Функция СтрокаСНепереносимымиПробелами(ИсходнаяСтрока)
	
	Возврат СтрЗаменить(ИсходнаяСтрока, " ", Символы.НПП);
	
КонецФункции

Функция ДополненныеПараметры(ДанныеПечатнойФормы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат ДанныеПечатнойФормы;
	Иначе
		
		КопияДанныхПечатнойФормы = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеПечатнойФормы);
		КопияДанныхПечатнойФормы.Добавить(ДополнительныеПараметры);
		
		Возврат КопияДанныхПечатнойФормы;
		
	КонецЕсли;
	
КонецФункции

Функция ОписаниеИтоговРасчетногоЛисткаПоФизическимЛицам()
	
	Итоги = Новый Структура;
	
	Итоги.Вставить("ДолгОрганизацииНаНачалоМесяца", 0);
	Итоги.Вставить("ДолгСотрудникаНаНачалоМесяца", 0);
	
	Итоги.Вставить("ДолгОрганизацииНаКонецМесяца", 0);
	Итоги.Вставить("ДолгСотрудникаНаКонецМесяца", 0);
	
	Возврат Итоги;
	
КонецФункции

Функция ОписаниеОбщихИтоговРасчетногоЛисткаПоФизическимЛицам()
	
	ОбщиеИтоги = ОписаниеИтоговРасчетногоЛисткаПоФизическимЛицам();
	
	ОбщиеИтоги.Вставить("ИзлишнеУдержаноНДФЛНаНачалоМесяца", 0);
	ОбщиеИтоги.Вставить("ИзлишнеУдержаноНДФЛНаКонецМесяца", 0);
	
	Возврат ОбщиеИтоги;
	
КонецФункции

Процедура УвеличитьРезультатНаСуммуСтроки(Результат, СтрокаССуммой)
	
	Если СтрокаССуммой <> Неопределено И ЗначениеЗаполнено(СтрокаССуммой.Сумма) Тогда
		Результат = Результат + СтрокаССуммой.Сумма;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область РасчетныйЛистокПоРабочимМестам

Процедура ПриКомпоновкеРезультатаРасчетныйЛистокПоРабочимМестам(ОбъектОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		
		КомпоновщикНастроек = ОбъектОтчета.КомпоновщикНастроек;
		СхемаКомпоновкиДанных = ОбъектОтчета.СхемаКомпоновкиДанных;
		
		КлючВарианта = КлючВарианта(КомпоновщикНастроек);
		
		ВыводитьПоРабочимМестам = (КлючВарианта = "РасчетныйЛистокПоРабочимМестам")
			Или (КлючВарианта = "РасчетныйЛистокПоРабочимМестамИСРазбивкойПоИсточникамФинансирования");
		
		ГруппироватьПоИсточникамФинансирования = (КлючВарианта = "РасчетныйЛистокПоРабочимМестамИСРазбивкойПоИсточникамФинансирования");
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетныйЛистокПоРабочимМестам";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета, НаАванс);
		НастроитьВариантОтчетаРасчетныйЛисток(НастройкиОтчета);
		
		// Нужно проверить включена ли группировка по подразделениям.
		ЕстьГруппировкаПоПодразделению = Ложь;
		ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
		Если НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Использование Тогда
			ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
		КонецЕсли;
		
		НастройкиВывода = НастройкиВыводаРасчетногоЛистка(НастройкиОтчета);
		ОтключитьНеИспользуемыеПоляРасчетногоЛистка(НастройкиОтчета, НастройкиВывода);
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
			НастройкиОтчета, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		СоответствиеПользовательскихПолей = СоответствиеПользовательскихПолей(НастройкиОтчета);
		Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеДокумента") Тогда
			
			НаборыВнешнихДанных = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеДокумента;
			КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Удалить("ДанныеДокумента");
			
		Иначе
			НаборыВнешнихДанных = НаборыВнешнихДанныхАнализНачисленийИУдержаний();
		КонецЕсли;
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыВнешнихДанных, , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализНачисленийИУдержаний.ПФ_MXL_РасчетныйЛисток");
		
		Макеты = Новый Структура("Шапка1,АвансовыеПлатежи,Шапка2,Подработка,НачисленоУдержано,ПрочиеВыплачено,Льготы,СтрокаДвижений,Итог12,Итог34,Итог56,Сальдо,Группировка,СтатьяФинансирования,ИтогСтатьяФинансирования,Итог12ВНатуральнойФорме");
		
		Макеты.Шапка1 = Макет.ПолучитьОбласть("Шапка1");
		Макеты.АвансовыеПлатежи = Макет.ПолучитьОбласть("АвансовыеПлатежи");
		Макеты.Шапка2 = Макет.ПолучитьОбласть("Шапка2");
		Макеты.Подработка = Макет.ПолучитьОбласть("Подработка");
		Макеты.НачисленоУдержано = Макет.ПолучитьОбласть("НачисленоУдержано");
		Макеты.ПрочиеВыплачено = Макет.ПолучитьОбласть("ПрочиеВыплачено");
		Макеты.Льготы = Макет.ПолучитьОбласть("Льготы");
		Макеты.СтрокаДвижений = Макет.ПолучитьОбласть("СтрокаДвижений");
		Макеты.Итог12 = Макет.ПолучитьОбласть("Итог12");
		Макеты.Итог12ВНатуральнойФорме = Макет.ПолучитьОбласть("Итог12ВНатуральнойФорме");
		Макеты.Итог34 = Макет.ПолучитьОбласть("Итог34");
		Макеты.Итог56 = Макет.ПолучитьОбласть("Итог56");
		Макеты.Сальдо = Макет.ПолучитьОбласть("Сальдо");
		Макеты.Группировка = Макет.ПолучитьОбласть("Группировка");
		Макеты.СтатьяФинансирования = Макет.ПолучитьОбласть("СтатьяФинансирования");
		Макеты.ИтогСтатьяФинансирования = Макет.ПолучитьОбласть("ИтогСтатьяФинансирования");
		
		ЕстьГруппировкаПоОрганизации = МожноГруппировать(НастройкиОтчета.Порядок, "Организация");
		
		Если ЕстьГруппировкаПоПодразделению И НЕ МожноГруппировать(НастройкиОтчета.Порядок, "ПодразделениеСортировки.РеквизитДопУпорядочиванияИерархического", СоответствиеПользовательскихПолей) Тогда
			ЕстьГруппировкаПоПодразделению = Ложь;
		КонецЕсли;
		
		Организация = Неопределено;
		Подразделение = Неопределено;
		
		ДокументРезультатСтраница = Новый ТабличныйДокумент;
		Для каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
			
			ДанныеПоНДФЛИВзносам = ДанныеПоНДФЛИВзносам(СтрокаМесяца.Строки, СтрокаМесяца.МесяцНачисления, Истина, Ложь);
			КоллекцияДанных = СтрокаМесяца.Строки;
			
			ВыводимыеГруппировки = Новый Массив;
			
			Для каждого СтрокаКоллекции Из КоллекцияДанных Цикл
				
				Если ЕстьГруппировкаПоОрганизации И Организация <> СтрокаКоллекции.Организация Тогда
					
					Макеты.Группировка.Параметры.НазваниеПараметра = НСтр("ru='Организация'");
					Макеты.Группировка.Параметры.Значение = СтрокаКоллекции.Организация;
					
					ДокументРезультат.Вывести(Макеты.Группировка);
					Организация = СтрокаКоллекции.Организация;
					
				КонецЕсли;
				
				Если ЕстьГруппировкаПоПодразделению И Подразделение <> СтрокаКоллекции.ПодразделениеГоловногоСотрудникаНаКонецПериода Тогда
					
					Макеты.Группировка.Параметры.НазваниеПараметра = НСтр("ru='Подразделение'");
					Макеты.Группировка.Параметры.Значение = СтрокаКоллекции.ПодразделениеГоловногоСотрудникаНаКонецПериода;
					
					ДокументРезультат.Вывести(Макеты.Группировка);
					Подразделение = СтрокаКоллекции.ПодразделениеГоловногоСотрудникаНаКонецПериода;
					
				КонецЕсли;
				
				ВыводимаяКоллекция = СтрокаКоллекции;
				ВывестиСотрудникаРасчетныйЛистокПоРабочимМестам(ВыводимаяКоллекция, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ДанныеПоНДФЛИВзносам, ГруппироватьПоИсточникамФинансирования);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ДокументРезультатСтраница.ВысотаТаблицы > 0 Тогда
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ДокументРезультат.Вывести(ДокументРезультатСтраница);
			
		КонецЕсли;
		
		ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
		ДопСвойства.Вставить("ОтчетПустой", ДанныеОтчета.Строки.Количество() = 0);
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета ""Расчетный листок по рабочим местам"" внесены критичные изменения. Отчет не будет сформирован.'")
			+ " " + КраткоеПредставлениеОшибки(Инфо);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВывестиСотрудникаРасчетныйЛистокПоРабочимМестам(СтрокиГоловныхСотрудников, ДокументРезультатПромежуточный, Макеты, СоответствиеПользовательскихПолей, ДанныеПоНДФЛИВзносам, ГруппироватьПоИсточникамФинансирования)
	
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	СтрокаПервогоГоловногоСотрудника = СтрокиГоловныхСотрудников;
	
	Если ГруппироватьПоИсточникамФинансирования Тогда
		СтрокаШапки = СтрокаПервогоГоловногоСотрудника.Строки[0].Строки[0];
	Иначе
		СтрокаШапки = СтрокаПервогоГоловногоСотрудника.Строки[0];
	КонецЕсли;
	
	Макеты.Шапка1.Параметры.Заполнить(СтрокаШапки);
	Макеты.Шапка1.Параметры.ПериодПредставление = Формат(СтрокаШапки.МесяцНачисления, "ДФ='ММММ гггг'");
	
	Если ЗначениеЗаполнено(Макеты.Шапка1.Параметры.СотрудникКод) Тогда
		Макеты.Шапка1.Параметры.СотрудникКод = ТабельныйНомерНаПечать(Макеты.Шапка1.Параметры.СотрудникКод);
	Иначе
		Макеты.Шапка1.Параметры.СотрудникКод = "";
	КонецЕсли;
	
	ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка1, СтрокаШапки, СоответствиеПользовательскихПолей);
	ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка1, СтрокаПервогоГоловногоСотрудника, СоответствиеПользовательскихПолей, "КВыплате");

	Если СтрокаПервогоГоловногоСотрудника.Владелец().Колонки.Найти("РазрядКатегорияГоловногоСотрудникаНаКонецПериода") <> Неопределено
		И ЗначениеЗаполнено(СтрокаПервогоГоловногоСотрудника.РазрядКатегорияГоловногоСотрудникаНаКонецПериода) Тогда
		
		Макеты.Шапка1.Параметры.РазрядКатегорияСотрудника = ", " + СтрокаПервогоГоловногоСотрудника.РазрядКатегорияГоловногоСотрудникаНаКонецПериода;
	Иначе
		Макеты.Шапка1.Параметры.РазрядКатегорияСотрудника = "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Макеты.Шапка1.Параметры.КВыплате) ИЛИ Макеты.Шапка1.Параметры.КВыплате < 0 Тогда
		Макеты.Шапка1.Параметры.КВыплате = 0;
	КонецЕсли;
	
	СтрокаДанныхПоНДФЛ = ДанныеПоНДФЛИВзносам.НДФЛ.Найти(СтрокаШапки.ФизическоеЛицо, "ФизическоеЛицо");
	Если СтрокаДанныхПоНДФЛ <> Неопределено Тогда
		Макеты.Шапка1.Параметры.Заполнить(СтрокаДанныхПоНДФЛ);
	КонецЕсли;
	
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.Шапка1.Параметры.ПодразделениеГоловногоСотрудникаНаКонецПериода) Тогда
		Макеты.Шапка1.Параметры.ПодразделениеГоловногоСотрудникаНаКонецПериода = Макеты.Шапка1.Параметры.ПодразделениеГоловногоСотрудникаНаКонецПериода.ПолноеНаименование();
	КонецЕсли;
	
	ДокументРезультат.Вывести(Макеты.Шапка1);
	
	Если СтрокаДанныхПоНДФЛ <> Неопределено
		И ЗначениеЗаполнено(СтрокаДанныхПоНДФЛ.АвансовыеПлатежи) Тогда
		
		Макеты.АвансовыеПлатежи.Параметры.АвансовыеПлатежи = СтрокаДанныхПоНДФЛ.АвансовыеПлатежи;
		ДокументРезультат.Вывести(Макеты.АвансовыеПлатежи);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(Макеты.Шапка2);
	
	Если ГруппироватьПоИсточникамФинансирования Тогда
		ИтогиПоГруппам = ВывестиГруппировкиПоСтатьямФинансированияПоРабочимМестам(ДокументРезультат, СтрокиГоловныхСотрудников,  Макеты, СоответствиеПользовательскихПолей);
	Иначе
		ИтогиПоГруппам = ВывестиТелоРасчетногоЛисткаПоРабочимМестам(ДокументРезультат, СтрокиГоловныхСотрудников, Макеты, СоответствиеПользовательскихПолей);
	КонецЕсли;
	
	Если СтрокаДанныхПоНДФЛ <> Неопределено Тогда
		Макеты.Сальдо.Параметры.Заполнить(СтрокаДанныхПоНДФЛ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаКонецМесяца) И ИтогиПоГруппам.СуммаДолгаНаКонецМесяца >= 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за предприятием на конец месяца'");
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = ИтогиПоГруппам.СуммаДолгаНаКонецМесяца;
	ИначеЕсли ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаКонецМесяца) И ИтогиПоГруппам.СуммаДолгаНаКонецМесяца < 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за работником на конец месяца'");
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = -ИтогиПоГруппам.СуммаДолгаНаКонецМесяца;
	Иначе
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за предприятием на конец месяца'");
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца) И ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца >= 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за предприятием на начало месяца'");
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца;
	ИначеЕсли ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца) И ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца < 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за работником на начало месяца'");
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = -ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца;
	Иначе
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за предприятием на начало месяца'");
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = "";
	КонецЕсли;
	
	ДокументРезультат.Вывести(Макеты.Сальдо);
	
	Ид = СтрокаШапки.ФизическоеЛицо.УникальныйИдентификатор();
	ДокументРезультат.Область(1, 1, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).Имя =
		"payslip_" + Формат(СтрокаШапки.МесяцНачисления, "ДФ=ММгггг") + "_0_" + СтрЗаменить(Ид, "-", "") + "_0";
	
	Если НЕ ДокументРезультатПромежуточный.ПроверитьВывод(ДокументРезультат) Тогда
		ДокументРезультатПромежуточный.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ДокументРезультатПромежуточный.Вывести(ДокументРезультат);
	
КонецПроцедуры

Функция ВывестиГруппировкиПоСтатьямФинансированияПоРабочимМестам(ДокументРезультат, СтрокиГоловныхСотрудников,  Макеты, СоответствиеПользовательскихПолей)
	
	ИтогиПоГруппам = ОписаниеИтоговПоГруппам();
	
	СтатьиФинансирования = Новый Массив;
	СтрокиПоСтатьямФинансирования = Новый Соответствие;
	
	Для каждого СтрокаСотрудника Из СтрокиГоловныхСотрудников.Строки Цикл
		
		СтрокиПоСтатьям = СтрокиПоСтатьямФинансирования.Получить(СтрокаСотрудника.СтатьяФинансирования);
		Если СтрокиПоСтатьям = Неопределено Тогда
			СтатьиФинансирования.Добавить(СтрокаСотрудника.СтатьяФинансирования);
			СтрокиПоСтатьям = Новый Массив;
		КонецЕсли;
		
		СтрокиПоСтатьям.Добавить(СтрокаСотрудника);
		СтрокиПоСтатьямФинансирования.Вставить(СтрокаСотрудника.СтатьяФинансирования, СтрокиПоСтатьям);
		
	КонецЦикла;
	
	Для каждого СтатьяФинансирования Из СтатьиФинансирования Цикл
		
		СтрокиПоСтатьям = СтрокиПоСтатьямФинансирования.Получить(СтатьяФинансирования);
		Для каждого СтрокаСтатьи Из СтрокиПоСтатьям Цикл
			
			Макеты.СтатьяФинансирования.Параметры.Заполнить(СтрокаСтатьи);
			
			Если ЗначениеЗаполнено(СтатьяФинансирования) Тогда
				
				Макеты.СтатьяФинансирования.Параметры.СтатьяФинансирования =
					?(ЗначениеЗаполнено(СтрокиПоСтатьям[0].СтатьяФинансированияКод), "(" + СтрокиПоСтатьям[0].СтатьяФинансированияКод + ")", "")
					+ ?(ЗначениеЗаполнено(СтрокиПоСтатьям[0].СтатьяФинансированияНаименование) , " " + СтрокиПоСтатьям[0].СтатьяФинансированияНаименование, "");
				
			КонецЕсли;
			
			ДокументРезультат.Вывести(Макеты.СтатьяФинансирования);
			
			ИтогиПоСтатье = ВывестиТелоРасчетногоЛисткаПоРабочимМестам(ДокументРезультат, СтрокаСтатьи, Макеты, СоответствиеПользовательскихПолей);
			
			ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца = ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца + ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца;
			ИтогиПоГруппам.СуммаДолгаНаКонецМесяца = ИтогиПоГруппам.СуммаДолгаНаКонецМесяца + ИтогиПоСтатье.СуммаДолгаНаКонецМесяца;
			
			Если ЗначениеЗаполнено(ИтогиПоСтатье.СуммаДолгаНаКонецМесяца) И ИтогиПоСтатье.СуммаДолгаНаКонецМесяца >= 0 Тогда
				Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за предприятием на конец месяца'");
				Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаКонецПериода = ИтогиПоСтатье.СуммаДолгаНаКонецМесяца;
			ИначеЕсли ЗначениеЗаполнено(ИтогиПоСтатье.СуммаДолгаНаКонецМесяца) И ИтогиПоСтатье.СуммаДолгаНаКонецМесяца < 0 Тогда
				Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за работником на конец месяца'");
				Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаКонецПериода = -ИтогиПоСтатье.СуммаДолгаНаКонецМесяца;
			Иначе
				Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за предприятием на конец месяца'");
				Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаКонецПериода = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца) И ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца >= 0 Тогда
				Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за предприятием на начало месяца'");
				Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаНачалоПериода = ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца;
			ИначеЕсли ЗначениеЗаполнено(ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца) И ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца < 0 Тогда
				Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за работником на начало месяца'");
				Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаНачалоПериода = -ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца;
			Иначе
				Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за предприятием на начало месяца'");
				Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаНачалоПериода = "";
			КонецЕсли;
			
			ДокументРезультат.Вывести(Макеты.ИтогСтатьяФинансирования);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Макеты.СтатьяФинансирования.Параметры.СтатьяФинансирования =
		НСтр("ru='Итого по всем статьям финансирования'");
	ДокументРезультат.Вывести(Макеты.СтатьяФинансирования);
	
	Возврат ИтогиПоГруппам;
	
КонецФункции

Функция ВывестиТелоРасчетногоЛисткаПоРабочимМестам(ДокументРезультат, СтрокаГоловногоСотрудника, Макеты, СоответствиеПользовательскихПолей)
	
	ИтогиПоГруппам = ОписаниеИтоговПоГруппам();
	
	СуммаНачисленоВНатуральнойФорме = 0;
	СуммаНачисления = 0;
	СуммаУдержания = 0;
	
	КоллекцияРабочихМест = Новый Массив;
	СтрокиУдержаний = Новый Соответствие;
	ИмяПоляСуммаУдержано = СоответствиеПользовательскихПолей.Получить("СуммаУдержано");
	
	Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
		
		ЭлементКоллекции = Новый Структура("СтрокаСотрудника,СтрокиНачислений,СтрокиУдержаний", СтрокаСотрудника, Новый Массив, Новый Массив);
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено, "Группа");
		Если СтрокаГруппы <> Неопределено Тогда
			
			Для каждого СтрокаНачислений Из СтрокаГруппы.Строки Цикл
				ЭлементКоллекции.СтрокиНачислений.Добавить(СтрокаНачислений);
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано, "Группа");
		Если СтрокаГруппы <> Неопределено Тогда
			
			Для каждого СтрокаУдержаний Из СтрокаГруппы.Строки Цикл
				
				СтрокаКоллекции = СтрокиУдержаний.Получить(СтрокаУдержаний.ВидРасчета);
				Если СтрокаКоллекции = Неопределено Тогда
					СтрокаКоллекции = СтрокаУдержаний;
				Иначе
					СтрокаКоллекции[ИмяПоляСуммаУдержано] = СтрокаКоллекции[ИмяПоляСуммаУдержано] + СтрокаУдержаний[ИмяПоляСуммаУдержано];
				КонецЕсли;
				СтрокиУдержаний.Вставить(СтрокаКоллекции.ВидРасчета, СтрокаКоллекции);
				
			КонецЦикла;
			
		КонецЕсли;
		
		КоллекцияРабочихМест.Добавить(ЭлементКоллекции);
		
	КонецЦикла;
	
	Если СтрокиУдержаний.Количество() > 0 Тогда
		КоллекцияРабочихМест[0].СтрокиУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиУдержаний, "Значение");
	КонецЕсли;
	
	ШапкаВыводилась = Ложь;
	Для каждого РабочееМесто Из КоллекцияРабочихМест Цикл
		
		СтрокаСотрудника = РабочееМесто.СтрокаСотрудника;
		СтрокиНачислений = РабочееМесто.СтрокиНачислений;
		СтрокиУдержаний = РабочееМесто.СтрокиУдержаний;
		
		Если СтрокиНачислений.Количество() > 0 ИЛИ СтрокиУдержаний.Количество() > 0 Тогда
			
			Если НЕ ШапкаВыводилась Тогда
				ДокументРезультат.Вывести(Макеты.НачисленоУдержано);
				ШапкаВыводилась = Истина;
			КонецЕсли; 
			
			Если СтрокаСотрудника.Сотрудник <> СтрокаСотрудника.ГоловнойСотрудник Тогда
				ЗаполнитьЗначенияСвойств(Макеты.Подработка.Параметры, СтрокаСотрудника);
				ДокументРезультат.Вывести(Макеты.Подработка);
			КонецЕсли;
		
			НомерСтроки = 0;
			Пока НомерСтроки < СтрокиНачислений.Количество() ИЛИ НомерСтроки < СтрокиУдержаний.Количество() Цикл
				
				Для НомерПараметра = 0 По Макеты.СтрокаДвижений.Параметры.Количество() -1 Цикл
					Макеты.СтрокаДвижений.Параметры.Установить(НомерПараметра, "");
				КонецЦикла;
				
				Если НомерСтроки < СтрокиНачислений.Количество() Тогда
					
					СтрокаНачислений = СтрокиНачислений[НомерСтроки];
					
					Макеты.СтрокаДвижений.Параметры.ПериодДействияНачислений = СтрокаНачислений.ПериодДействия;
					
					УчетВремениВЧасах = СтрокаНачислений.ВремяВЧасах = Истина;
					
					Если УчетВремениВЧасах И ЗначениеЗаполнено(СтрокаНачислений.ОплаченоЧасов) И СтрокаНачислений.ОплаченоЧасов > 0 Тогда
						ОплаченныеДниЧасы = Формат(СтрокаНачислений.ОплаченоЧасов, "ЧДЦ=2; ЧН=") + " " + НСтр("ru='чс'") + ".";
					ИначеЕсли НЕ УчетВремениВЧасах И ЗначениеЗаполнено(СтрокаНачислений.ОплаченоДней) И СтрокаНачислений.ОплаченоДней > 0 Тогда
						ОплаченныеДниЧасы = Формат(СтрокаНачислений.ОплаченоДней, "ЧДЦ=2; ЧН=") + " " + НСтр("ru='дн'") + ".";
					Иначе
						ОплаченныеДниЧасы = 0;
					КонецЕсли;
					
					Макеты.СтрокаДвижений.Параметры.ОплаченныеДниЧасы = ОплаченныеДниЧасы;
					ЗаполнитьЗначенияСвойств(Макеты.СтрокаДвижений.Параметры, СтрокаНачислений, "ОтработаноДней,ОтработаноЧасов");
					
					ЗаполнитьПараметрыПользовательскихПолей(
						Макеты.СтрокаДвижений,
						СтрокаНачислений,
						СоответствиеПользовательскихПолей,
						"Начисление,СуммаНачислено");
					
					СуммаНачисления = СуммаНачисления + СтрокаНачислений[СоответствиеПользовательскихПолей.Получить("СуммаНачислено")];
					СуммаНачисленоВНатуральнойФорме = СуммаНачисленоВНатуральнойФорме + СтрокаНачислений[СоответствиеПользовательскихПолей.Получить("СуммаНачисленоВНатуральнойФорме")];
					
				КонецЕсли;
				
				Если НомерСтроки < СтрокиУдержаний.Количество() Тогда
					
					СтрокаУдержаний = СтрокиУдержаний[НомерСтроки];
					
					Макеты.СтрокаДвижений.Параметры.ПериодДействияУдержаний = СтрокаУдержаний.ПериодДействия;
					ЗаполнитьПараметрыПользовательскихПолей(
						Макеты.СтрокаДвижений,
						СтрокаУдержаний,
						СоответствиеПользовательскихПолей,
						"Удержание,СуммаУдержано");
					
					СуммаУдержания = СуммаУдержания + СтрокаУдержаний[СоответствиеПользовательскихПолей.Получить("СуммаУдержано")];
					
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				
				ДокументРезультат.Вывести(Макеты.СтрокаДвижений);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если СуммаНачисления <> 0 ИЛИ СуммаУдержания <> 0 Тогда
		Макеты.Итог12.Параметры.СуммаНачисления = СуммаНачисления;
		Макеты.Итог12.Параметры.СуммаУдержания = СуммаУдержания;
		ДокументРезультат.Вывести(Макеты.Итог12);
	КонецЕсли;
	
	Если СуммаНачисленоВНатуральнойФорме <> 0 Тогда
		Макеты.Итог12ВНатуральнойФорме.Параметры.СуммаНачисления = СуммаНачисленоВНатуральнойФорме;
		ДокументРезультат.Вывести(Макеты.Итог12ВНатуральнойФорме);
	КонецЕсли;
	
	СуммаДолгаНаНачалоМесяца = 0;
	СуммаДолгаНаКонецМесяца = 0;
	
	СуммаНачисления = 0;
	СуммаВыплат = 0;
	
	ШапкаВыводилась = Ложь;
	Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно, "Группа");
		Если СтрокаГруппы = Неопределено Тогда
			СтрокиСправочно = Новый Массив;
		Иначе
			СтрокиСправочно = СтрокаГруппы.Строки;
		КонецЕсли;
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено, "Группа");
		Если СтрокаГруппы = Неопределено Тогда
			СтрокиВыплачено = Новый Массив;
		Иначе
			СтрокиВыплачено = СтрокаГруппы.Строки;
		КонецЕсли;
		
		Если СтрокиСправочно.Количество() > 0 ИЛИ СтрокиВыплачено.Количество() > 0 Тогда
			
			Если НЕ ШапкаВыводилась Тогда
				ДокументРезультат.Вывести(Макеты.ПрочиеВыплачено);
				ШапкаВыводилась = Истина;
			КонецЕсли;
			
			Если СтрокаСотрудника.Сотрудник <> СтрокаСотрудника.ГоловнойСотрудник Тогда
				ЗаполнитьЗначенияСвойств(Макеты.Подработка.Параметры, СтрокаСотрудника);
				ДокументРезультат.Вывести(Макеты.Подработка);
			КонецЕсли;
		
			НомерСтроки = 0;
			Пока НомерСтроки < СтрокиСправочно.Количество() ИЛИ НомерСтроки < СтрокиВыплачено.Количество() Цикл
				
				Для НомерПараметра = 0 По Макеты.СтрокаДвижений.Параметры.Количество() -1 Цикл
					Макеты.СтрокаДвижений.Параметры.Установить(НомерПараметра, "");
				КонецЦикла;
				
				Если НомерСтроки < СтрокиСправочно.Количество() Тогда
					
					СтрокаСправочно = СтрокиСправочно[НомерСтроки];
					
					Макеты.СтрокаДвижений.Параметры.ПериодДействияНачислений = СтрокаСправочно.ПериодДействия;
					ЗаполнитьПараметрыПользовательскихПолей(
						Макеты.СтрокаДвижений,
						СтрокаСправочно,
						СоответствиеПользовательскихПолей,
						"Начисление,СуммаНачислено");
					
				КонецЕсли;
				
				Если НомерСтроки < СтрокиВыплачено.Количество() Тогда
					
					СтрокаВыплачено = СтрокиВыплачено[НомерСтроки];
					
					ПредставлениеРегистраторов = "";
					Регистраторы = Новый Соответствие;
					Для каждого СтрокаСРегистратором Из СтрокаВыплачено.Строки Цикл
						
						Если ЗначениеЗаполнено(СтрокаСРегистратором.Регистратор) Тогда
							СвойстваРегистратора = Новый Структура("Номер,Дата");
							ЗаполнитьЗначенияСвойств(СвойстваРегистратора, СтрокаСРегистратором.Регистратор);
							Регистраторы.Вставить(СтрокаСРегистратором.Регистратор, СвойстваРегистратора);
						КонецЕсли;
						
					КонецЦикла;
					
					Для каждого СвойстваРегистратора Из Регистраторы Цикл
						
						ПредставлениеРегистраторов = ?(ПустаяСтрока(ПредставлениеРегистраторов), "", ПредставлениеРегистраторов + ", ")
							+ ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СвойстваРегистратора.Значение.Номер, Истина, Истина)
							+ " " + НСтр("ru='от'") + " " + Формат(СвойстваРегистратора.Значение.Дата, "ДФ=dd.MM.yy");
						
					КонецЦикла;
					
					Макеты.СтрокаДвижений.Параметры.ПериодДействияУдержаний = СтрокаВыплачено.ПериодДействия;
					ЗаполнитьПараметрыПользовательскихПолей(
						Макеты.СтрокаДвижений,
						СтрокаВыплачено,
						СоответствиеПользовательскихПолей,
						"Удержание,СуммаУдержано");
						
					Если Не ПустаяСтрока(ПредставлениеРегистраторов) Тогда
						Макеты.СтрокаДвижений.Параметры.Удержание = Строка(Макеты.СтрокаДвижений.Параметры.Удержание) + " (" + ПредставлениеРегистраторов + ")";
					КонецЕсли;
					
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				
				ДокументРезультат.Вывести(Макеты.СтрокаДвижений);
				
			КонецЦикла;
			
			Если ТипЗнч(СтрокиСправочно) <> Тип("Массив") Тогда
				СуммаНачисления = СуммаНачисления + СтрокиСправочно.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачислено"));
			КонецЕсли;
			
			Если ТипЗнч(СтрокиВыплачено) <> Тип("Массив") Тогда
				СуммаВыплат	 = СуммаВыплат + СтрокиВыплачено.Итог(СоответствиеПользовательскихПолей.Получить("СуммаУдержано"));
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо, "Группа");
		УвеличитьРезультатНаСуммуСтроки(СуммаДолгаНаНачалоМесяца, СтрокаГруппы);
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо, "Группа");
		УвеличитьРезультатНаСуммуСтроки(СуммаДолгаНаКонецМесяца, СтрокаГруппы);
		
	КонецЦикла;
	
	Если СуммаНачисления <> 0 ИЛИ СуммаВыплат <> 0 Тогда
		Макеты.Итог34.Параметры.СуммаНачисления = СуммаНачисления;
		Макеты.Итог34.Параметры.СуммаВыплат	 = СуммаВыплат;
		ДокументРезультат.Вывести(Макеты.Итог34);
	КонецЕсли;
	
	ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца = СуммаДолгаНаНачалоМесяца;
	ИтогиПоГруппам.СуммаДолгаНаКонецМесяца = СуммаДолгаНаКонецМесяца;
	
	СуммаНачисления = 0;
	ШапкаВыводилась = Ложь;
	
	Для Каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы, "Группа");
		Если СтрокаГруппы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиЛьгот = СтрокаГруппы.Строки;
		Для Каждого СтрокаЛьгот Из СтрокиЛьгот Цикл 
			
			Если Не ШапкаВыводилась Тогда
				ДокументРезультат.Вывести(Макеты.Льготы);
				ШапкаВыводилась = Истина;
			КонецЕсли;
			
			Для НомерПараметра = 0 По Макеты.СтрокаДвижений.Параметры.Количество() - 1 Цикл
				Макеты.СтрокаДвижений.Параметры.Установить(НомерПараметра, "");
			КонецЦикла;
			
			Макеты.СтрокаДвижений.Параметры.ПериодДействияНачислений = СтрокаЛьгот.ПериодДействия;
			
			УчетВремениВЧасах = СтрокаЛьгот.ВремяВЧасах = Истина;
			
			Если УчетВремениВЧасах И ЗначениеЗаполнено(СтрокаЛьгот.ОплаченоЧасов) И СтрокаЛьгот.ОплаченоЧасов > 0 Тогда
				ОплаченныеДниЧасы = Формат(СтрокаЛьгот.ОплаченоЧасов, "ЧДЦ=2; ЧН=") + " " + НСтр("ru='чс'") + ".";
			ИначеЕсли НЕ УчетВремениВЧасах И ЗначениеЗаполнено(СтрокаЛьгот.ОплаченоДней) И СтрокаЛьгот.ОплаченоДней > 0 Тогда
				ОплаченныеДниЧасы = Формат(СтрокаЛьгот.ОплаченоДней, "ЧДЦ=2; ЧН=") + " " + НСтр("ru='дн'") + ".";
			Иначе
				ОплаченныеДниЧасы = 0;
			КонецЕсли;
			
			Макеты.СтрокаДвижений.Параметры.ОплаченныеДниЧасы = ОплаченныеДниЧасы;
			ЗаполнитьЗначенияСвойств(Макеты.СтрокаДвижений.Параметры, СтрокаЛьгот, "ОтработаноДней,ОтработаноЧасов");
			
			ЗаполнитьПараметрыПользовательскихПолей(
				Макеты.СтрокаДвижений,
				СтрокаЛьгот,
				СоответствиеПользовательскихПолей,
				"Начисление,СуммаНачислено");
				
			ДокументРезультат.Вывести(Макеты.СтрокаДвижений);
			
		КонецЦикла;
		
		Если ТипЗнч(СтрокиЛьгот) <> Тип("Массив") Тогда
			СуммаНачисления = СуммаНачисления + СтрокиЛьгот.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачислено"));
		КонецЕсли;
		
	КонецЦикла;
	
	Если СуммаНачисления <> 0 Тогда
		Макеты.Итог56.Параметры.СуммаНачисления = СуммаНачисления;
		ДокументРезультат.Вывести(Макеты.Итог56);
	КонецЕсли;
	
	Возврат ИтогиПоГруппам;
	
КонецФункции

#КонецОбласти


// Вспомогательные методы вывода расчетных листков

Функция ДанныеПоНДФЛИВзносам(СтрокиСотрудников, МесяцНачисления, ВыводитьОсобенностиРасчетаНДФЛ, ВыводитьИнформациюОНачисленныхВзносахВПФР)
	
	ВозвращаемыеДанные = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НачалоПериода = НачалоМесяца(МесяцНачисления);
	КонецПериода = КонецМесяца(МесяцНачисления);
	
	Запрос.УстановитьПараметр("Сотрудники", СтрокиСотрудников.ВыгрузитьКолонку("ГоловнойСотрудник"));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(МесяцНачисления));
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Подготовка сведений об НДФЛ
	Если ВыводитьОсобенностиРасчетаНДФЛ Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	&НачалоПериода КАК Период,
			|	ЗарплатаКВыплатеОстатки.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплатеОстаток
			|ПОМЕСТИТЬ ВТОстаткиЗарплатыКВыплате
			|ИЗ
			|	РегистрНакопления.ЗарплатаКВыплате.Остатки(
			|			&НачалоПериода,
			|			ФизическоеЛицо В
			|				(ВЫБРАТЬ
			|					ФизическиеЛица.ФизическоеЛицо
			|				ИЗ
			|					ВТФизическиеЛица КАК ФизическиеЛица)) КАК ЗарплатаКВыплатеОстатки
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	&КонецПериода,
			|	ЗарплатаКВыплатеОстатки.Организация.ГоловнаяОрганизация,
			|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо,
			|	ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток
			|ИЗ
			|	РегистрНакопления.ЗарплатаКВыплате.Остатки(
			|			&КонецПериода,
			|			ФизическоеЛицо В
			|				(ВЫБРАТЬ
			|					ФизическиеЛица.ФизическоеЛицо
			|				ИЗ
			|					ВТФизическиеЛица КАК ФизическиеЛица)) КАК ЗарплатаКВыплатеОстатки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СведенияОДоходахНДФЛОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СведенияОДоходахНДФЛОбороты.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	СУММА(СведенияОДоходахНДФЛОбороты.СуммаДоходаОборот - ВЫБОР
			|			КОГДА СведенияОДоходахНДФЛОбороты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
			|				ТОГДА 0
			|			ИНАЧЕ СведенияОДоходахНДФЛОбороты.СуммаВычетаОборот
			|		КОНЕЦ) КАК ОблагаемыйДоход,
			|	&НачалоПериода КАК МесяцНачисления
			|ПОМЕСТИТЬ ВТОблагаемыйДоход
			|ИЗ
			|	РегистрНакопления.СведенияОДоходахНДФЛ.Обороты(
			|			ДАТАВРЕМЯ(1, 1, 1),
			|			&КонецПериода,
			|			,
			|			МесяцНалоговогоПериода МЕЖДУ &НачалоГода И &КонецПериода
			|				И ФизическоеЛицо В
			|					(ВЫБРАТЬ
			|						ФизическиеЛица.ФизическоеЛицо
			|					ИЗ
			|						ВТФизическиеЛица КАК ФизическиеЛица)) КАК СведенияОДоходахНДФЛОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	СведенияОДоходахНДФЛОбороты.ГоловнаяОрганизация,
			|	СведенияОДоходахНДФЛОбороты.ФизическоеЛицо";
		
		Запрос.Выполнить();
		
		УчетНДФЛ.СоздатьВТАвансовыеПлатежиПоНДФЛДляАналитическогоОтчета(Запрос.МенеджерВременныхТаблиц, Истина, НачалоПериода, КонецПериода, "ВТФизическиеЛица");
		УчетНДФЛ.СоздатьВТПраваНаСтандартныеВычетыПоНДФЛДляАналитическогоОтчета(Запрос.МенеджерВременныхТаблиц, Истина, НачалоПериода, КонецПериода, ТекущаяДатаСеанса(), "ВТФизическиеЛица");
		УчетНДФЛ.СоздатьВТПредоставленныеВычетыПоНДФЛДляАналитическогоОтчета(Запрос.МенеджерВременныхТаблиц, Истина, НачалоПериода, КонецПериода, ТекущаяДатаСеанса(), Истина, "ВТФизическиеЛица");
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПредоставленныеВычеты.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ПредоставленныеВычеты.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ПредоставленныеВычеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
			|	СУММА(ВЫБОР
			|			КОГДА ПредоставленныеВычеты.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Стандартные)
			|				ТОГДА ПредоставленныеВычеты.Сумма
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ВычетНаФизлицо,
			|	СУММА(ВЫБОР
			|			КОГДА ПредоставленныеВычеты.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей)
			|				ТОГДА ПредоставленныеВычеты.Сумма
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ВычетНаДетей,
			|	СУММА(ВЫБОР
			|			КОГДА ПредоставленныеВычеты.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Имущественные)
			|				ТОГДА ПредоставленныеВычеты.Сумма
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ВычетИмущественный,
			|	СУММА(ВЫБОР
			|			КОГДА ПредоставленныеВычеты.ГруппаВычета В (ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные), ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СоциальныеПоУведомлениюНО))
			|				ТОГДА ПредоставленныеВычеты.Сумма
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ВычетСоциальный
			|ПОМЕСТИТЬ ВТВычеты
			|ИЗ
			|	ВТПредоставленныеВычетыПоНДФЛДляАналитическогоОтчета КАК ПредоставленныеВычеты
			|
			|СГРУППИРОВАТЬ ПО
			|	ПредоставленныеВычеты.ФизическоеЛицо,
			|	ПредоставленныеВычеты.ГоловнаяОрганизация,
			|	ПредоставленныеВычеты.МесяцНалоговогоПериода";
		
		Запрос.Выполнить();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВТ.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВТ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ВТ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ВТ.ЛичныйВычет
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ПоложеныЛичныеВычеты,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ВТ.ЛичныйВычет = ЛОЖЬ
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ПоложеныВычетыНаДетей,
			|	МАКСИМУМ(ВТ.ОблагаемыйДоходСНачалаГода) КАК ОблагаемыйДоходСНачалаГода
			|ПОМЕСТИТЬ ВТПраваНаВычеты
			|ИЗ
			|	ВТПраваНаСтандартныеВычетыПоНДФЛДляАналитическогоОтчета КАК ВТ
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ.ФизическоеЛицо,
			|	ВТ.ГоловнаяОрганизация,
			|	ВТ.МесяцНалоговогоПериода";
		
		Запрос.Выполнить();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	&НачалоПериода КАК МесяцНачисления,
			|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ФизическиеЛица.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ЕСТЬNULL(Вычеты.ВычетНаФизлицо, 0) КАК ВычетНаФизлицо,
			|	ЕСТЬNULL(Вычеты.ВычетНаДетей, 0) КАК ВычетНаДетей,
			|	ЕСТЬNULL(Вычеты.ВычетИмущественный, 0) КАК ВычетИмущественный,
			|	ЕСТЬNULL(Вычеты.ВычетСоциальный, 0) КАК ВычетСоциальный,
			|	ОблагаемыйДоходПомесячно.ОблагаемыйДоход КАК ОблагаемыйДоход,
			|	ПраваНаВычеты.ОблагаемыйДоходСНачалаГода КАК ОблагаемыйДоходДляВычетов,
			|	АвансовыеПлатежи.Сумма КАК АвансовыеПлатежи,
			|	ПраваНаВычеты.ПоложеныЛичныеВычеты КАК ПоложеныЛичныеВычеты,
			|	ПраваНаВычеты.ПоложеныВычетыНаДетей КАК ПоложеныВычетыНаДетей,
			|	ЕСТЬNULL(ОстаткиЗарплатыКВыплатеНачалоПериода.СуммаКВыплатеОстаток, 0) КАК ЗарплатаКВыплатеНаНачалоПериода,
			|	ЕСТЬNULL(ОстаткиЗарплатыКВыплатеКонецПериода.СуммаКВыплатеОстаток, 0) КАК ЗарплатаКВыплатеНаКонецПериода
			|ИЗ
			|	ВТФизическиеЛица КАК ФизическиеЛица
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычеты КАК Вычеты
			|		ПО ФизическиеЛица.ФизическоеЛицо = Вычеты.ФизическоеЛицо
			|			И ФизическиеЛица.ГоловнаяОрганизация = Вычеты.ГоловнаяОрганизация
			|			И (НАЧАЛОПЕРИОДА(Вычеты.МесяцНалоговогоПериода, МЕСЯЦ) = &НачалоПериода)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОблагаемыйДоход КАК ОблагаемыйДоходПомесячно
			|		ПО (ОблагаемыйДоходПомесячно.МесяцНачисления = &НачалоПериода)
			|			И ФизическиеЛица.ФизическоеЛицо = ОблагаемыйДоходПомесячно.ФизическоеЛицо
			|			И ФизическиеЛица.ГоловнаяОрганизация = ОблагаемыйДоходПомесячно.ГоловнаяОрганизация
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычеты КАК ПраваНаВычеты
			|		ПО ФизическиеЛица.ФизическоеЛицо = ПраваНаВычеты.ФизическоеЛицо
			|			И ФизическиеЛица.ГоловнаяОрганизация = ПраваНаВычеты.ГоловнаяОрганизация
			|			И (ПраваНаВычеты.МесяцНалоговогоПериода = &НачалоПериода)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАвансовыеПлатежиПоНДФЛДляАналитическогоОтчета КАК АвансовыеПлатежи
			|		ПО (АвансовыеПлатежи.МесяцНачисления = &НачалоПериода)
			|			И ФизическиеЛица.ФизическоеЛицо = АвансовыеПлатежи.ФизическоеЛицо
			|			И ФизическиеЛица.ГоловнаяОрганизация = АвансовыеПлатежи.ГоловнаяОрганизация
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиЗарплатыКВыплате КАК ОстаткиЗарплатыКВыплатеНачалоПериода
			|		ПО (ОстаткиЗарплатыКВыплатеНачалоПериода.Период = &НачалоПериода)
			|			И ФизическиеЛица.ФизическоеЛицо = ОстаткиЗарплатыКВыплатеНачалоПериода.ФизическоеЛицо
			|			И ФизическиеЛица.ГоловнаяОрганизация = ОстаткиЗарплатыКВыплатеНачалоПериода.ГоловнаяОрганизация
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиЗарплатыКВыплате КАК ОстаткиЗарплатыКВыплатеКонецПериода
			|		ПО (ОстаткиЗарплатыКВыплатеКонецПериода.Период = &КонецПериода)
			|			И ФизическиеЛица.ФизическоеЛицо = ОстаткиЗарплатыКВыплатеКонецПериода.ФизическоеЛицо
			|			И ФизическиеЛица.ГоловнаяОрганизация = ОстаткиЗарплатыКВыплатеКонецПериода.ГоловнаяОрганизация";
		
		ВозвращаемыеДанные.Вставить("НДФЛ", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	// Подготовка сведений о взносах
	Если ВыводитьИнформациюОНачисленныхВзносахВПФР Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	&НачалоПериода КАК МесяцНачисления,
			|	ИсчисленныеСтраховыеВзносыОбороты.Организация,
			|	ИсчисленныеСтраховыеВзносыОбороты.ГоловнаяОрганизация,
			|	ИсчисленныеСтраховыеВзносыОбороты.ФизическоеЛицо,
			|	СУММА(&ПоляВзносов) КАК ПоляВзносов
			|ИЗ
			|	РегистрНакопления.ИсчисленныеСтраховыеВзносы.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			Месяц,
			|			ФизическоеЛицо В
			|				(ВЫБРАТЬ
			|					ФизическиеЛица.ФизическоеЛицо
			|				ИЗ
			|					ВТФизическиеЛица КАК ФизическиеЛица)) КАК ИсчисленныеСтраховыеВзносыОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсчисленныеСтраховыеВзносыОбороты.ФизическоеЛицо,
			|	ИсчисленныеСтраховыеВзносыОбороты.ГоловнаяОрганизация,
			|	ИсчисленныеСтраховыеВзносыОбороты.Организация";
		
		ПоляВзносов = СтрРазделить(УчетСтраховыхВзносовКлиентСервер.РассчитываемыеВзносыВПФР(), ",");
		ТекстЗапросаСуммПолей = "";
		
		ДобавитьЗапятую = Ложь;
		Для каждого ПолеВзносов Из  ПоляВзносов Цикл
			
			Если ДобавитьЗапятую Тогда
				
				ТекстЗапросаСуммПолей = ТекстЗапросаСуммПолей + ",
				|	";
				
			Иначе
				ДобавитьЗапятую = Истина;
			КонецЕсли;
			
			ТекстЗапросаСуммПолей = ТекстЗапросаСуммПолей + "СУММА(ИсчисленныеСтраховыеВзносыОбороты." + ПолеВзносов + "Оборот) КАК " + ПолеВзносов;
			
		КонецЦикла;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА(&ПоляВзносов) КАК ПоляВзносов", ТекстЗапросаСуммПолей);
		
		ВозвращаемыеДанные.Вставить("Взносы", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	Возврат ВозвращаемыеДанные;
	
КонецФункции

Функция МожноГруппировать(Порядок, ИмяПоляГруппировки, СоответствиеПользовательскихПолей = Неопределено)
	
	ГруппировкаВозможна = Ложь;
	
	Для каждого ЭлементПорядка Из Порядок.Элементы Цикл
		
		Если ЭлементПорядка.Использование Тогда
			
			Если ТипЗнч(ЭлементПорядка) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("МесяцНачисления") Тогда
				Продолжить;
			ИначеЕсли СоответствиеПользовательскихПолей <> Неопределено Тогда
				
				ПолеПорядкаОсновногоСотрудника = СоответствиеПользовательскихПолей.Получить(НСтр("ru='Порядок основного рабочего места'"));
				Если ПолеПорядкаОсновногоСотрудника <> Неопределено Тогда
					
					Если ПолеПорядкаОсновногоСотрудника = СтрЗаменить(ЭлементПорядка.Поле, ".", "") Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляГруппировки) Тогда
				
				ГруппировкаВозможна = Истина;
				Прервать;
				
			ИначеЕсли ЭлементПорядка.Поле <> Новый ПолеКомпоновкиДанных("Организация") Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ГруппировкаВозможна;
	
КонецФункции

Функция ОписаниеИтоговПоГруппам()
	
	ИтогиПоГруппам = Новый Структура;
	
	ИтогиПоГруппам.Вставить("СуммаДолгаНаНачалоМесяца", 0);
	ИтогиПоГруппам.Вставить("СуммаДолгаНаКонецМесяца", 0);
	ИтогиПоГруппам.Вставить("СуммаДолгаНаНачалоМесяцаРасчета", 0);
	ИтогиПоГруппам.Вставить("СуммаДолгаНаКонецМесяцаРасчета", 0);
	
	Возврат ИтогиПоГруппам;
	
КонецФункции

Процедура ОтключитьНеИспользуемыеПоляРасчетногоЛистка(НастройкиОтчета, НастройкиВывода)
	
	// Отключение выбора не выводимых полей
	Если НастройкиВывода.ВыводитьПериодыНачислений = Ложь Тогда
		ОтключитьИспользованиеПолей(НастройкиОтчета, "ПериодДействия,ДатаНачал,ДатаОкончания");
	КонецЕсли;
	
	Если НастройкиВывода.ВыводитьОтработанноеОплаченноеВремя = Ложь Тогда
		ОтключитьИспользованиеПолей(НастройкиОтчета, "ОтработаноДней,ОтработаноЧасов,ОплаченоДней,ОплаченоЧасов,ВремяВЧасах");
	КонецЕсли;
	
	Если НастройкиВывода.ВыводитьОснованияНачисленийИУдержаний = Ложь Тогда
		ОтключитьИспользованиеПолей(НастройкиОтчета, "ДокументОснование");
	КонецЕсли;
	
	Если НастройкиВывода.ВыводитьПоказателиНачисленийИУдержаний = Ложь Тогда
		ОтключитьИспользованиеПолей(НастройкиОтчета, "Показатель,Значение");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтключитьИспользованиеПолей(НастройкиОтчета, ИменаПолей)
	
	СписокПолей = СтрРазделить(ИменаПолей, ",");
	ОтключитьИспользованиеВыбранныхПолей(НастройкиОтчета.Выбор, СписокПолей);
	ОтключитьИспользованиеВыбранныхПолейСтруктуры(НастройкиОтчета.Структура, СписокПолей);
	
КонецПроцедуры

Процедура ОтключитьИспользованиеВыбранныхПолейСтруктуры(СтруктураНастроек, СписокПолей)
	
	Для каждого ЭлементСтруктуры Из СтруктураНастроек Цикл
		
		ОтключитьИспользованиеВыбранныхПолей(ЭлементСтруктуры.Выбор, СписокПолей);
		ОтключитьИспользованиеВыбранныхПолей(ЭлементСтруктуры.ПоляГруппировки, СписокПолей);
		
		ОтключитьИспользованиеВыбранныхПолейСтруктуры(ЭлементСтруктуры.Структура, СписокПолей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьИспользованиеВыбранныхПолей(ЭлементСтруктурыСПолями, СписокПолей)
	
	Для каждого ВыбранныйЭлемент Из ЭлементСтруктурыСПолями.Элементы Цикл
		
		Для каждого ИмяПоля Из СписокПолей Цикл
			
			Если ВыбранныйЭлемент.Использование Тогда
				
				Если ТипЗнч(ВыбранныйЭлемент) = Тип("ВыбранноеПолеКомпоновкиДанных")
					Или ТипЗнч(ВыбранныйЭлемент) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
					
					Если ВыбранныйЭлемент.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
						ВыбранныйЭлемент.Использование = Ложь;
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область РассылкиОтчетов

// Проверка настроек выполняется всегда, даже когда Объект.ОбменДанными.Загрузка = Истина.
Процедура КонтрольНастроекОтчетовПриЗаписиРассылкиОтчетов(Рассылка, Отказ) Экспорт
	РезультатПроверки = ПроверитьНастройкиРассылки(Рассылка);
	Если ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки) Тогда
		ВызватьИсключение РезультатПроверки.ТекстОшибки;
	КонецЕсли;
КонецПроцедуры

// Проверяет настройки отчетов рассылки.
//
// Параметры:
//  Рассылка - СправочникОбъект.РассылкаОтчетов - Проверяемая рассылка отчетов.
//
// Возвращаемое значение:
//  Структура - Информация о результатах проверки, в т.ч. пригодная для записи в журнал регистрации.
//      * ТекстОшибки - Строка - Текст ошибки. Если ошибок нет, то возвращается пустая строка.
//      * ИмяСобытия  - Строка - Имя события для записи в журнал регистрации (если требуется).
//      * Метаданные  - ОбъектМетаданных - Метаданные для привязки события журнала регистрации.
//      * Данные      - Произвольный     - Данные для привязки события журнала регистрации.
//
Функция ПроверитьНастройкиРассылки(Рассылка) Экспорт
	Результат = Новый Структура("ИмяСобытия, Метаданные, Данные, ТекстОшибки");
	Результат.ИмяСобытия  = НСтр("ru = 'Рассылка отчетов. Проверка настроек'", ОбщегоНазначения.КодОсновногоЯзыка());
	Результат.Данные      = Рассылка.Ссылка;
	Результат.Метаданные  = Результат.Данные.Метаданные();
	Результат.ТекстОшибки = "";
	
	Если Рассылка.ЭтоГруппа Тогда
		Возврат Результат;
	КонецЕсли;
	Если Не Рассылка.Подготовлена
		Или Не Рассылка.ИспользоватьЭлектроннуюПочту
		Или Рассылка.Личная
		Или Рассылка.Отчеты.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	СсылкаОтчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.АнализНачисленийИУдержаний);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетыРассылки.НомерСтроки,
	|	ОтчетыРассылки.ОтправлятьЕслиПустой,
	|	ОтчетыРассылки.Отчет
	|ПОМЕСТИТЬ втОтчетыРассылки
	|ИЗ
	|	&ОтчетыРассылки КАК ОтчетыРассылки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтчетыРассылки.НомерСтроки,
	|	втОтчетыРассылки.Отчет КАК Вариант,
	|	втОтчетыРассылки.ОтправлятьЕслиПустой,
	|	ВариантыОтчетов.Отчет.Имя КАК ИмяОтчета,
	|	ВариантыОтчетов.КлючВарианта,
	|	ВариантыОтчетов.Пользовательский
	|ИЗ
	|	втОтчетыРассылки КАК втОтчетыРассылки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ПО втОтчетыРассылки.Отчет = ВариантыОтчетов.Ссылка
	|			И (ВариантыОтчетов.Отчет = &ОтчетАнализНачисленийИУдержаний)";
	Запрос.УстановитьПараметр("ОтчетыРассылки", Рассылка.Отчеты.Выгрузить(, "НомерСтроки, Отчет, ОтправлятьЕслиПустой"));
	Запрос.УстановитьПараметр("ОтчетАнализНачисленийИУдержаний", СсылкаОтчета);
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Для Каждого ИнформацияОВарианте Из ТаблицаЗначений Цикл
		СтрокаОтчет = Рассылка.Отчеты.Найти(ИнформацияОВарианте.НомерСтроки, "НомерСтроки");
		
		// Инициализация отчета.
		ПараметрыОтчета = Новый Структура("Отчет, Настройки, Форматы, ОтправлятьЕслиПустой");
		ЗаполнитьЗначенияСвойств(ПараметрыОтчета, СтрокаОтчет);
		ПараметрыОтчета.Настройки = СтрокаОтчет.Настройки.Получить();
		
		МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
		Успех = МодульРассылкаОтчетов.ИнициализироватьОтчет(Результат, ПараметрыОтчета, Рассылка.Персонализирована);
		Если Не Успех Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка настроек отчета.
		НастройкиКД = ПараметрыОтчета.КомпоновщикНастроекКД.ПолучитьНастройки();
		
		Если ТребоватьПерсонализацииОтчетаПриРассылке(ИнформацияОВарианте.ИмяОтчета, КлючВарианта(НастройкиКД))
			И Не ОтчетПерсонализирован(НастройкиКД) Тогда
			
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отчет ""%1"" запрещено рассылать без отбора по физическому лицу'"),
				Строка(ИнформацияОВарианте.Вариант));
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Определяет, должен-ли быть персонализирован отчет.
Функция ТребоватьПерсонализацииОтчетаПриРассылке(ИмяОтчета, КлючВарианта)
	Если ИмяОтчета = "АнализНачисленийИУдержаний" Тогда
		Если ЭтоКлючВариантаОтчетаРасчетныйЛисток(КлючВарианта)
			Или КлючВарианта = "РегламентированнаяФормаСправкаПоДСВ" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Определяет, персонализирован-ли отчет.
Функция ОтчетПерсонализирован(НастройкиКД)
	ПолеФизическоеЛицо = Новый ПолеКомпоновкиДанных("ФизическоеЛицо");
	ПолеСотрудник      = Новый ПолеКомпоновкиДанных("Сотрудник");
	
	Для Каждого ЭлементОтбораКД Из НастройкиКД.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбораКД) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбораКД.Использование
			И ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			И (ЭлементОтбораКД.ЛевоеЗначение = ПолеФизическоеЛицо
				Или ЭлементОтбораКД.ЛевоеЗначение = ПолеСотрудник) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти

Функция ИОФамилияФизическогоЛица(ФизическоеЛицо) Экспорт
	
	ИОФамилия = "";
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическоеЛицо, "ИОФамилия");
		Если КадровыеДанные.Количество() > 0 Тогда
			ИОФамилия = КадровыеДанные[0].ИОФамилия;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИОФамилия;
	
КонецФункции

Процедура ИзменитьГруппировкиВариантаТ49Т51(Структура, ЕстьГруппировкаПоПодразделению)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		
		Если ЭлементСтруктуры.Имя = "Подразделение" Тогда
			
			Если ЕстьГруппировкаПоПодразделению Тогда
				ЭлементСтруктуры.Использование = Истина;
			Иначе
				ЭлементСтруктуры.Использование = Ложь;
			КонецЕсли;
			
		ИначеЕсли ЭлементСтруктуры.Имя = "Сотрудник" Тогда
			
			Если ЕстьГруппировкаПоПодразделению Тогда
				ЭлементСтруктуры.Использование = Ложь;
			Иначе
				ЭлементСтруктуры.Использование = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ИзменитьГруппировкиВариантаТ49Т51(ЭлементСтруктуры.Структура, ЕстьГруппировкаПоПодразделению);
		
	КонецЦикла;
	
КонецПроцедуры

// Дополнение строк промежуточного итога.
//
Процедура ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, ДанныеСтроки) Экспорт
	
	Для каждого ПромежуточныйИтог Из ПромежуточныеИтоги Цикл
		ПромежуточныеИтоги.Вставить(ПромежуточныйИтог.Ключ, ПромежуточныйИтог.Значение + ДанныеСтроки[ПромежуточныйИтог.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьИтогиПоГоловномуСотруднику(ПромежуточныеИтоги)
	
	Для Каждого ОписаниеИтога Из ПромежуточныеИтоги Цикл
		
		Если ЗначениеЗаполнено(ОписаниеИтога.Значение) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, есть ли в настройках отчета установленный отбор по физическому лицу
//
// Параметры:
//		ОбъектОтчета	- ОтчетОбъект
//
// Возвращаемое значение:
//		Булево - Истина (отбор установлен), Ложь (нет).
//
Функция ОтчетНастроенПерсонифицировано(ОбъектОтчета) Экспорт
	
	ЭтоПерсонифицированныйОтчет = Ложь;
	ПолеФизическоеЛицо = Новый ПолеКомпоновкиДанных("ФизическоеЛицо");
	
	Для Каждого ЭлементКоллекции Из ОбъектОтчета.КомпоновщикНастроек.ПолучитьНастройки().Отбор.Элементы Цикл
		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если ЭлементКоллекции.Использование
				И ЭлементКоллекции.ЛевоеЗначение = ПолеФизическоеЛицо
				И ЭлементКоллекции.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				
				ЭтоПерсонифицированныйОтчет = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭтоПерсонифицированныйОтчет;
	
КонецФункции

Функция НаборыВнешнихДанныхАнализНачисленийИУдержаний() Экспорт
	
	Возврат ЗарплатаКадрыОтчетыВнутренний.НаборыВнешнихДанныхАнализНачисленийИУдержаний();
	
КонецФункции

Функция ТабличныеЧастиДляФормированияНабораДанныхДокументов() Экспорт
	
	Возврат Новый Структура("ТаблицыНачислений,ТаблицыУдержаний", Новый Массив, Новый Массив);
	
КонецФункции

Функция ДанныеДокументаФизическихЛиц(Форма, ФизическиеЛица, ТабличныеЧасти) Экспорт
	
	Объект = Форма.Объект;
	
	НачисленияУдержанияПоСотрудникам = Новый ТаблицаЗначений;
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("Период",								Новый ОписаниеТипов("Дата"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("Регистратор",						Новый ОписаниеТипов("ДокументСсылка.НачислениеЗарплаты"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("Организация",						Новый ОписаниеТипов("СправочникСсылка.Организации"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ФизическоеЛицо",						Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("Сотрудник",							Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("Подразделение",						Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("НачислениеУдержание",				Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления,ПланВидовРасчетаСсылка.Удержания,ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ГруппаНачисленияУдержанияВыплаты",	Новый ОписаниеТипов("ПеречислениеСсылка.ГруппыНачисленияУдержанияВыплаты"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ПериодДействия",						Новый ОписаниеТипов("Дата"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ДокументОснование",					Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержания.Тип);
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ДатаНачала",							Новый ОписаниеТипов("Дата"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ДатаОкончания",						Новый ОписаниеТипов("Дата"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("Сумма",								Новый ОписаниеТипов("Число"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ОтработаноДней",						Новый ОписаниеТипов("Число"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ОтработаноЧасов",					Новый ОписаниеТипов("Число"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ОплаченоДней",						Новый ОписаниеТипов("Число"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ОплаченоЧасов",						Новый ОписаниеТипов("Число"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ВремяВЧасах",						Новый ОписаниеТипов("Булево"));
	
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		
		Для Каждого ОписаниеТаблицы Из ТабличныеЧасти.ТаблицыНачислений Цикл
			
			ТабличнаяЧасть = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
				Форма, ОписаниеТаблицы.ПутьКДанным);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ФизическоеЛицо", ФизическоеЛицо);
			
			СтрокиТаблицы = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если СтрокиТаблицы.Количество() = 0 Тогда
				
				СтруктураПоПустомуФизическомуЛицу = Новый Структура("ФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
				СтрокиТаблицыБезФизическогоЛица = ТабличнаяЧасть.НайтиСтроки(СтруктураПоПустомуФизическомуЛицу);
				Если СтрокиТаблицыБезФизическогоЛица.Количество() > 0 Тогда
					
					Для Каждого СтрокаТаблицы Из СтрокиТаблицыБезФизическогоЛица Цикл
						
						СтрокаТаблицы.ФизическоеЛицо = СотрудникиКлиентСерверПовтИсп.ФизическиеЛицаСотрудников(СтрокаТаблицы.Сотрудник)[0];
						Если СтрокаТаблицы.ФизическоеЛицо = СтруктураПоиска.ФизическоеЛицо Тогда
							СтрокиТаблицы.Добавить(СтрокаТаблицы);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				
				НоваяСтрока = НачисленияУдержанияПоСотрудникам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				Если ОписаниеТаблицы.ИмяТаблицы = "Льготы"
					Или ОписаниеТаблицы.ИмяТаблицы = "ЛьготыПерерасчет" Тогда
					
					НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы;
					
				Иначе
					НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
				КонецЕсли;
				
				НоваяСтрока.Период = Объект.МесяцНачисления;
				НоваяСтрока.Организация = Объект.Организация;
				НоваяСтрока.Сумма = СтрокаТаблицы[ОписаниеТаблицы.ИмяПоляРезультат];
				
				Если ПустаяСтрока(ОписаниеТаблицы.ИмяРеквизитаДатаНачала) Тогда
					НоваяСтрока.ДатаНачала = Объект.МесяцНачисления;
				Иначе
					НоваяСтрока.ДатаНачала = СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаДатаНачала];
				КонецЕсли;
				
				Если ПустаяСтрока(ОписаниеТаблицы.ИмяРеквизитаДатаОкончания) Тогда
					НоваяСтрока.ДатаОкончания = НачалоДня(КонецМесяца(Объект.МесяцНачисления));
				Иначе
					НоваяСтрока.ДатаОкончания = СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаДатаОкончания];
				КонецЕсли;
				
				Если Не ПустаяСтрока(ОписаниеТаблицы.ИмяРеквизитаВидРасчета) Тогда
					НоваяСтрока.НачислениеУдержание = СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаВидРасчета];
				ИначеЕсли ОписаниеТаблицы.ИмяТаблицы = "НачисленияПоДоговорам" Тогда
					НоваяСтрока.НачислениеУдержание = НачислениеДоговораГПХПоДокументуОснованию(СтрокаТаблицы.ДокументОснование);
				КонецЕсли;
				
				Если ОписаниеТаблицы.Свойство("ЗаполнятьОплаченноеВремяОтработанным") Тогда
					
					НоваяСтрока.ОплаченоДней = НоваяСтрока.ОтработаноДней;
					НоваяСтрока.ОплаченоЧасов = НоваяСтрока.ОплаченоЧасов;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(НоваяСтрока.ПериодДействия) Тогда
					НоваяСтрока.ПериодДействия = НачалоМесяца(НоваяСтрока.ДатаНачала);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого ОписаниеТаблицы Из ТабличныеЧасти.ТаблицыУдержаний Цикл
			
			ТабличнаяЧасть = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
				Форма, ОписаниеТаблицы.ПутьКДанным);
			
			СтруктураПоиска = Новый Структура;
			Если ОписаниеТаблицы.Свойство("ИмяРеквизитаФизическоеЛицо") Тогда
				СтруктураПоиска.Вставить(ОписаниеТаблицы.ИмяРеквизитаФизическоеЛицо, ФизическоеЛицо);
			Иначе
				СтруктураПоиска.Вставить("ФизическоеЛицо", ФизическоеЛицо);
			КонецЕсли;
			
			СтрокиТаблицы = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				
				Если ОписаниеТаблицы.ИмяТаблицы = "ПогашениеЗаймов" Тогда
					
					Если СтрокаТаблицы.МатериальнаяВыгода <> 0 Тогда
						
						НоваяСтрока = НачисленияУдержанияПоСотрудникам.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
						
						НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
						НоваяСтрока.Период = Объект.МесяцНачисления;
						НоваяСтрока.Организация = Объект.Организация;
						НоваяСтрока.Сумма = СтрокаТаблицы.МатериальнаяВыгода;
						НоваяСтрока.ПериодДействия = НоваяСтрока.Период;
						НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам;
						
					КонецЕсли;
					
					Если СтрокаТаблицы.НалогНаМатериальнуюВыгоду <> 0 Тогда
						
						НоваяСтрока = НачисленияУдержанияПоСотрудникам.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
						
						НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
						НоваяСтрока.Период = Объект.МесяцНачисления;
						НоваяСтрока.Организация = Объект.Организация;
						НоваяСтрока.Сумма = СтрокаТаблицы.НалогНаМатериальнуюВыгоду;
						НоваяСтрока.ПериодДействия = НоваяСтрока.Период;
						НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
						
					КонецЕсли;
					
					Если СтрокаТаблицы.ПогашениеЗайма <> 0 Тогда
						
						НоваяСтрока = НачисленияУдержанияПоСотрудникам.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
						
						НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
						НоваяСтрока.Период = Объект.МесяцНачисления;
						НоваяСтрока.Организация = Объект.Организация;
						НоваяСтрока.Сумма = СтрокаТаблицы.ПогашениеЗайма;
						НоваяСтрока.ПериодДействия = НоваяСтрока.Период;
						НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПогашениеЗаймаИзЗарплаты;
						
					КонецЕсли;
					
				Иначе
					
					НоваяСтрока = НачисленияУдержанияПоСотрудникам.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					
					Если ОписаниеТаблицы.Свойство("ИмяРеквизитаФизическоеЛицо") Тогда
						НоваяСтрока.ФизическоеЛицо = СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаФизическоеЛицо];
					КонецЕсли;
					
					НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
					НоваяСтрока.Период = Объект.МесяцНачисления;
					НоваяСтрока.Организация = Объект.Организация;
					НоваяСтрока.Сумма = СтрокаТаблицы[ОписаниеТаблицы.ИмяПоляРезультат];
					НоваяСтрока.ПериодДействия = НоваяСтрока.Период;
					
					Если ОписаниеТаблицы.ИмяТаблицы = "НДФЛ" Тогда
						НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
					Иначе
						НоваяСтрока.НачислениеУдержание = СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаВидРасчета];
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = ЗапросДанныеДокументаФизическихЛиц();
	Запрос.УстановитьПараметр("НачисленияУдержанияПоСотрудникам", НачисленияУдержанияПоСотрудникам);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьЗапросыКПредставлениямВиртуальныхТаблиц(Запрос.Текст, Запрос);
	
	НаборыВнешнихДанных = НаборыВнешнихДанныхАнализНачисленийИУдержаний();
	НаборыВнешнихДанных.НачисленияУдержанияДокумента = Запрос.Выполнить().Выгрузить();
	
	Возврат НаборыВнешнихДанных;
	
КонецФункции

Функция ЗапросДанныеДокументаФизическихЛиц()
	
	Возврат ЗарплатаКадрыОтчетыВнутренний.ЗапросДанныеДокументаФизическихЛиц();
	
КонецФункции

Функция НаборыДанныхЗапросы(НаборыДанных) Экспорт
	
	НаборыЗапросы = Новый Массив;
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			НаборыЗапросы.Добавить(НаборДанных);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НаборыЗапросы, НаборыДанныхЗапросы(НаборДанных.Элементы));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборыЗапросы;
	
КонецФункции

Функция НачислениеДоговораГПХПоДокументуОснованию(ДокументОснование) Экспорт
	
	Возврат ЗарплатаКадрыОтчетыВнутренний.НачислениеДоговораГПХПоДокументуОснованию(ДокументОснование);
	
КонецФункции

#Область ВариантовОтчетовПечатныхФорм

Функция МакетыВариантовОтчетовПечатныхФорм() Экспорт
	
	Возврат ЗарплатаКадрыОтчетыВнутренний.МакетыВариантовОтчетовПечатныхФорм();
	
КонецФункции

Процедура ИнициализироватьОтчетПечатнойФормы(Контекст, ОтчетОбъект, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ИнициализироватьНастройкиОтчета(ОтчетОбъект, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
	ПодключитьСхему(Контекст, ОтчетОбъект, КлючСхемы, КлючВарианта, НовыеПользовательскиеНастройкиКД);
	
КонецПроцедуры

Процедура ИнициализироватьНастройкиОтчета(ОтчетОбъект, КлючСхемы, КлючВарианта, НовыеНастройкиКД = Неопределено, НовыеПользовательскиеНастройкиКД = Неопределено) Экспорт
	
	Если КлючСхемы <> КлючВарианта Тогда
		
		ОтчетОбъект.ИнициализироватьОтчет();
		
		Если ВариантНастраиваемойПечатнойФормы(ОтчетОбъект, КлючВарианта) Тогда
			
			НастройкиУстановлены = Ложь;
			Если НовыеПользовательскиеНастройкиКД <> Неопределено
				И НовыеПользовательскиеНастройкиКД.ДополнительныеСвойства.Свойство("ПользовательскиеНастройкиУстановлены") Тогда
				
				НастройкиУстановлены = Истина;
				Если НовыеПользовательскиеНастройкиКД.ДополнительныеСвойства.Свойство("Настройки") Тогда
					НовыеНастройкиКД = НовыеПользовательскиеНастройкиКД.ДополнительныеСвойства.Настройки;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не НастройкиУстановлены Тогда
				
				ВариантОтчета = ВариантОтчетаПечатнойФормыПоОбъекту(ОтчетОбъект, КлючВарианта);
				Если ВариантОтчета <> Неопределено Тогда
					
					НастройкиВарианта = ВариантОтчета.Настройки.Получить();
					Если НастройкиВарианта <> Неопределено Тогда
						
						Если ТипЗнч(НастройкиВарианта) = Тип("Структура") Тогда
							НовыеНастройкиКД = НастройкиВарианта.Настройки;
							НовыеПользовательскиеНастройкиКД = НастройкиВарианта.ПользовательскиеНастройкиКД;
						Иначе
							НовыеПользовательскиеНастройкиКД = НастройкиВарианта;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НовыеПользовательскиеНастройкиКД <> Неопределено Тогда
				
				НовыеПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ИспользуютсяПользовательскиеНастройкиПечати", Истина);
				
				Если НастройкиУстановлены Тогда
					УстановитьОтборПоследнейСсылкиНаОбъектПечати(ОтчетОбъект, НовыеПользовательскиеНастройкиКД);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьСхему(Контекст, ОтчетОбъект, КлючСхемы, КлючВарианта, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если КлючСхемы <> КлючВарианта Тогда
		
		ОтчетыСервер.ПодключитьСхему(ОтчетОбъект, Контекст, ОтчетОбъект.СхемаКомпоновкиДанных, КлючСхемы);
		КлючСхемы = КлючВарианта;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВариантОтчетаПечатнойФормыПоОбъекту(ОтчетОбъект, КлючВарианта)
	
	Возврат ВариантОтчетаПечатнойФормыПоИмениОбъекта("Отчет." + ОтчетОбъект.Метаданные().Имя, КлючВарианта);
	
КонецФункции

Функция ВариантОтчетаПечатнойФормыПоИмениОбъекта(ИмяОбъектаОтчет, КлючВарианта) Экспорт
	
	Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ИмяОбъектаОтчет);
	Возврат ВариантОтчетаПечатнойФормы(Отчет, КлючВарианта);
	
КонецФункции

Функция ВариантОтчетаПечатнойФормы(Отчет, КлючВарианта)
	
	Возврат ВариантыОтчетов.ВариантОтчета(Отчет, КлючВарианта);
	
КонецФункции

Процедура УстановитьОтборПоследнейСсылкиНаОбъектПечати(ОтчетОбъект, ПользовательскиеНастройкиКД)
	
	ПараметрСсылка = ПараметрОтбораПечатнойФормы(ОтчетОбъект, ПользовательскиеНастройкиКД);
	Если ПараметрСсылка <> Неопределено Тогда
		
		ЗначениеПараметра = ПараметрСсылка.ПравоеЗначение;
		ПараметрНастройки = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти(Новый ПолеКомпоновкиДанных("СсылкаНаОбъект"));
		ТипыЗначения = ПараметрНастройки.ТипЗначения.Типы();
		
		Если ЗначениеПараметра = Неопределено
			Или (ТипЗнч(ЗначениеПараметра) = Тип("Массив") Или ТипЗнч(ЗначениеПараметра) = Тип("СписокЗначений"))
				И ЗначениеПараметра.Количество() = 0 Тогда
			
			ТипыЗначений = Новый СписокЗначений;
			Для Каждого ТипПараметра Из ТипыЗначения Цикл
				
				Если ОбщегоНазначения.ЭтоСсылка(ТипПараметра) Тогда
					
					ПолноеИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(ТипПараметра).ПолноеИмя();
					ТипыЗначений.Добавить(ТипПараметра, ПолноеИмяОбъектаМетаданных);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТипыЗначений.СортироватьПоПредставлению();
			
			ЗначениеПараметра = Новый СписокЗначений;
			Для Каждого ЭлементТипыЗначений Из ТипыЗначений Цикл
				
				ПолноеИмяОбъектаМетаданных = ЭлементТипыЗначений.Представление;
				ТипПараметра = ЭлементТипыЗначений.Значение;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ТаблицаСсылок.Ссылка КАК Ссылка
					|ИЗ
					|	&ТаблицаСсылок КАК ТаблицаСсылок
					|ГДЕ
					|	НЕ ТаблицаСсылок.ПометкаУдаления";
				
				ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоТипу(ТипПараметра);
				Если ВидОбъекта = "Документ" Тогда
					
					Запрос.Текст = Запрос.Текст + "
						|	И ТаблицаСсылок.Проведен
						|УПОРЯДОЧИТЬ ПО
						|	ТаблицаСсылок.Дата УБЫВ";
					
				КонецЕсли;
				
				ПолноеИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(ТипПараметра).ПолноеИмя();
				ИмяТипа = СтрРазделить(ПолноеИмяОбъектаМетаданных, ".")[1];
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаСсылок", ВидОбъекта + "." + ИмяТипа);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					
					ЗначениеПараметра.Добавить(Выборка.Ссылка);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			УстановитьОбъектыОтбора(ПараметрСсылка, ЗначениеПараметра, ПользовательскиеНастройкиКД);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрОтбораПечатнойФормы(ОтчетОбъект, ПользовательскиеНастройки)
	
	Если ПользовательскиеНастройки = Неопределено Тогда
		ПользовательскиеНастройкиКД = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки;
	Иначе
		ПользовательскиеНастройкиКД = ПользовательскиеНастройки;
	КонецЕсли;
	
	ПолеКомпоновкиСсылка = Новый ПолеКомпоновкиДанных("СсылкаНаОбъект");
	Если Не ЗначениеЗаполнено(ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки) Тогда
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Для Каждого ЭлементНастроек Из ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если ТипЗнч(ЭлементНастроек) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементНастроек.ЛевоеЗначение = ПолеКомпоновкиСсылка Тогда
			
			Если Не ЗначениеЗаполнено(ЭлементНастроек.ИдентификаторПользовательскойНастройки) Тогда
				ЭлементНастроек.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
			КонецЕсли;
			
			ПараметрСсылка = ЭлементНастроек;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрСсылка;
	
КонецФункции

Процедура УстановитьОбъектыОтбора(ПараметрОтбора, ОбъектыОтбора, ПользовательскиеНастройкиКД = Неопределено)
	
	Если ОбъектыОтбора <> Неопределено
		И ОбъектыОтбора.Количество() > 0 Тогда
		
		Если ТипЗнч(ОбъектыОтбора) = Тип("Массив") Тогда
			ПараметрОтбора.ПравоеЗначение.ЗагрузитьЗначения(ОбъектыОтбора);
		Иначе
			ПараметрОтбора.ПравоеЗначение = ОбъектыОтбора;
		КонецЕсли;
		
		Если ПользовательскиеНастройкиКД <> Неопределено Тогда
			
			ПользовательскаяНастройка = ПользовательскиеНастройкиКД.Элементы.Найти(ПараметрОтбора.ИдентификаторПользовательскойНастройки);
			Если ПользовательскаяНастройка <> Неопределено Тогда
				ПользовательскаяНастройка.ЛевоеЗначение = ПараметрОтбора.ЛевоеЗначение;
				ПользовательскаяНастройка.ПравоеЗначение = ПараметрОтбора.ПравоеЗначение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрОтбора(ОтчетОбъект, ОбъектыОтбора, ПользовательскиеНастройкиКД = Неопределено) Экспорт
	
	ПараметрСсылка = ПараметрОтбораПечатнойФормы(ОтчетОбъект, ПользовательскиеНастройкиКД);
	Если ПараметрСсылка <> Неопределено Тогда
		УстановитьОбъектыОтбора(ПараметрСсылка, ОбъектыОтбора, ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки);
	КонецЕсли;
	
КонецПроцедуры

Функция ВариантНастраиваемойПечатнойФормы(ОтчетОбъект, КлючВарианта)
	
	МакетыВариантовОтчетов = МакетыВариантовОтчетовПечатныхФорм();
	ПолноеИмяОбъекта = ОтчетОбъект.Метаданные().ПолноеИмя();
	
	ПутьКМакету = МакетыВариантовОтчетов.Получить(ПолноеИмяОбъекта + "." + КлючВарианта);
	
	Возврат ПутьКМакету <> Неопределено;
	
КонецФункции

Процедура ВывестиВКоллекциюПечатнуюФорму(ИмяОтчета, МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, ВнешниеНаборыДанных = Неопределено, ДополнительныеПараметрыФормирования = Неопределено) Экспорт
	
	ВариантыОтчетовПечатныхФорм = МакетыВариантовОтчетовПечатныхФорм();
	Для Каждого ОписаниеНастраиваемойФормы Из ВариантыОтчетовПечатныхФорм Цикл
		
		ПутьКВариантуОтчета = ОписаниеНастраиваемойФормы.Ключ;
		Если СтрНайти(ПутьКВариантуОтчета, ИмяОтчета) = 1 Тогда
			
			ПутьКМакетуПечатнойФормы = ОписаниеНастраиваемойФормы.Значение;
			ИмяМакетаПечатнойФормы = ИмяМакетаИзПутиКМакетуПечатнойФормы(ПутьКМакетуПечатнойФормы);
			
			Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакетаПечатнойФормы) Тогда
				
				Если ДополнительныеПараметрыФормирования = Неопределено Тогда
					ДополнительныеПараметры = Новый Структура;
				Иначе
					ДополнительныеПараметры = ОбщегоНазначения.СкопироватьРекурсивно(ДополнительныеПараметрыФормирования);
				КонецЕсли;
				
				ДокументРезультат = Новый ТабличныйДокумент;
				
				КлючВарианта = КлючВариантаИзПутиКВарианту(ПутьКВариантуОтчета);
				
				Если ВРег(Лев(ПутьКМакетуПечатнойФормы, 11)) = ВРег("ОбщийМакет.") Тогда
					ПредставлениеПечатнойФормы = Метаданные.ОбщиеМакеты[ИмяМакетаПечатнойФормы].Синоним;
				Иначе
					ПредставлениеПечатнойФормы = Метаданные.НайтиПоПолномуИмени(ИмяОтчета).Макеты[ИмяМакетаПечатнойФормы].Синоним;
				КонецЕсли;
				
				ОбъектОтчета = ОбщегоНазначения.ОбъектПоПолномуИмени(ИмяОтчета);
				
				МакетКомпоновкиДанных = МакетКомпоновкиДанныхПоМетаданнымОтчета(ОбъектОтчета.Метаданные(), КлючВарианта);
				Если МакетКомпоновкиДанных = Неопределено Тогда
					
					НастройкиОтчетаКД = Неопределено;
					ПользовательскиеНастройкиКД = Неопределено;
					
					ИнициализироватьНастройкиОтчета(ОбъектОтчета, "", КлючВарианта, НастройкиОтчетаКД, ПользовательскиеНастройкиКД);
					
					Если НастройкиОтчетаКД = Неопределено Тогда
						НастройкиОтчетаКД = ОбъектОтчета.СхемаКомпоновкиДанных.ВариантыНастроек[КлючВарианта].Настройки;
					КонецЕсли;
					
					ОбъектОтчета.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчетаКД);
					Если ТипЗнч(ПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
						ОбъектОтчета.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройкиКД);
					КонецЕсли;
					
					УстановитьПараметрОтбора(ОбъектОтчета, МассивОбъектов);
					
				Иначе
					
					ОбъектОтчета.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(
						"МакетКомпоновкиДанных", МакетКомпоновкиДанных);
					
					ПапаметрКлючВарианта = МакетКомпоновкиДанных.ЗначенияПараметров.Найти("КлючВарианта");
					Если ПапаметрКлючВарианта <> Неопределено Тогда
						ДополнительныеПараметры.Вставить("КлючВарианта", ПапаметрКлючВарианта.Значение);
					КонецЕсли;
					
					Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
						
						ПараметрКомпоновщика = Лев(Параметр.Имя, 1) = "П" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(Параметр.Имя, 2));
						
						Если Параметр.Имя = "СсылкаНаОбъект"
							Или ПараметрКомпоновщика И ТипЗнч(Параметр.Значение) = Тип("СписокЗначений") Тогда
							
							Параметр.Значение.ЗагрузитьЗначения(МассивОбъектов);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				РезультатКомпоновки = РезультатКомпоновкиМакетаПечатнойФормы(ОбъектОтчета, , , ВнешниеНаборыДанных, ДополнительныеПараметры);
				
				МенеджерОтчета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяОтчета);
				МенеджерОтчета.Сформировать(ДокументРезультат, РезультатКомпоновки, ОбъектыПечати);
				
				УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
					КоллекцияПечатныхФорм,
					ИмяМакетаПечатнойФормы,
					ПредставлениеПечатнойФормы,
					ДокументРезультат,,);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КлючВариантаИзПутиКВарианту(ПутьКВариантуОтчета) Экспорт
	
	ПодстрокиПути = СтрРазделить(ПутьКВариантуОтчета, ".");
	Возврат ПодстрокиПути[ПодстрокиПути.Количество() - 1];
	
КонецФункции

Функция ИмяМакетаИзПутиКМакетуПечатнойФормы(ПутьКМакетуПечатнойФормы) Экспорт
	
	ПодстрокиПути = СтрРазделить(ПутьКМакетуПечатнойФормы, ".");
	Возврат ПодстрокиПути[ПодстрокиПути.Количество() - 1];
	
КонецФункции

Функция ПоляПредставленийКадровыхДанныхСотрудниковОтчетовПечатныхФорм(ИмяВТПредставления = "Представления_КадровыеДанныеСотрудников") Экспорт
	
	ДополнительныеПоляПредставлений = Новый Структура;
	ДополнительныеПоляПредставлений.Вставить(ИмяВТПредставления, КадровыйУчет.ПоляПредставленийКадровыхДанныхСотрудников());
	
	Возврат ДополнительныеПоляПредставлений;
	
КонецФункции

#КонецОбласти

Процедура ЗапомнитьЗапросыНаборовДанных(НаборыДанных, ОбъектОтчета)
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			ОбъектОтчета.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(НаборДанных.Имя, НаборДанных.Запрос);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ЗапомнитьЗапросыНаборовДанных(НаборДанных.Элементы, ОбъектОтчета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьЗапросыНаборовДанных(НаборыДанных, ОбъектОтчета)
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			
			Если ОбъектОтчета.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство(НаборДанных.Имя) Тогда
				НаборДанных.Запрос = ОбъектОтчета.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства[НаборДанных.Имя];
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ВосстановитьЗапросыНаборовДанных(НаборДанных.Элементы, ОбъектОтчета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

