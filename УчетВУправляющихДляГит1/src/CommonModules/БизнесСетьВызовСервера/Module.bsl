////////////////////////////////////////////////////////////////////////////////
// Подсистема "Бизнес-сеть".
// ОбщийМодуль.БизнесСетьВызовСервера.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Получение сведений об участнике сервиса.
//
// Параметры:
//   ПараметрыКоманды - Структура, СправочникСсылка.Контрагент, СправочникСсылка.Организация - ссылка на объект поиска.
//   Результат - Структура - возвращаемые данные.
//   Отказ - Булево - признак отказа выполнения.
//
Функция ПолучитьРеквизитыУчастника(ДополнительныеПараметры, Отказ, ЗапроситьКоличествоТорговыхПредложений = Ложь) Экспорт
	
	// Заполнение параметров участника.
	ПараметрыКоманды = БизнесСеть.ПараметрыКомандыПолучитьРеквизитыУчастника(ДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Если это организация и нет ни одной зарегистрированной организации возврат пустого значения.
	Если ДополнительныеПараметры.ЭтоОрганизация И Не БизнесСеть.ОрганизацияЗарегистрирована() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Чтение профиля участника в сервисе.
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Запрос количества торговых предложений участника.
	Если ЗапроситьКоличествоТорговыхПредложений И ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура")
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		
		ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ТорговыеПредложенияСлужебный");
		ОтказКоличествоТорговыхПредложений = Ложь;
		КоличествоТорговыхПредложений = ОбщийМодуль.ПолучитьКоличествоТорговыхПредложений(ДополнительныеПараметры, 
			ОтказКоличествоТорговыхПредложений);
		Если Не ОтказКоличествоТорговыхПредложений И ТипЗнч(КоличествоТорговыхПредложений) = Тип("Число") Тогда
			Результат.Вставить("КоличествоТорговыхПредложений", КоличествоТорговыхПредложений);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Отправление приглашение контрагенту для регистрации в сервисе.
//
// Параметры:
//   Организация - СправочникСсылка - ссылка на объект организация.
//   Контрагент - СправочникСсылка - ссылка на объект контрагент.
//   ЭлектроннаяПочта - Строка - адрес электронной почты контрагента.
//   Результат - Структура - возвращаемые данные.
//   Отказ - Булево - признак отказа выполнения.
//
Функция ОтправитьПриглашениеКонтрагенту(Организация, Контрагент, ЭлектроннаяПочта, Отказ) Экспорт
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Организация",      Организация);
	ПараметрыМетода.Вставить("Контрагент",       Контрагент);
	ПараметрыМетода.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);
	ПараметрыКоманды = БизнесСеть.ПараметрыКомандыОтправкаПриглашения(ПараметрыМетода, Отказ);
	Возврат БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
КонецФункции

// Удаление документов в сервисе.
//
// Параметры:
//   Организация              - ОпределяемыйТип.Организация - организация документа.
//   ИдентификаторыДокументов - Массив из Строка - массив с идентификаторами ГУИД удаляемых документов.
//   Результат                - Структура - возвращаемые данные.
//   Отказ                    - Булево - признак отказа выполнения.
//
Функция УдалитьДокументы(ПараметрыМетода, Отказ) Экспорт
	
	ПараметрыКоманды = БизнесСеть.ПараметрыКомандыУдалитьДокументы(ПараметрыМетода, Отказ);
	Возврат БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
КонецФункции

// Отключение организаций от сервиса.
// См. БизнесСеть.ОтключитьОрганизации.
//
Процедура ОтключитьОрганизации(СписокОрганизаций, РежимУдаления, Отказ, ТребуетсяОбновитьИнтерфейс = Ложь) Экспорт
	
	БизнесСеть.ОтключитьОрганизации(СписокОрганизаций, РежимУдаления, Отказ, ТребуетсяОбновитьИнтерфейс);
	
КонецПроцедуры

// Обновление пользователей в сервисе по данным информационной базы.
//
// Параметры:
//   ТекущийАбонент - Строка - идентификатор абонента в сервисе.
//   ОбновлятьИдентификаторыДоступа - Булево.
//   Результат - Произвольный - результат выполнения.
//   Отказ - Булево - признак ошибки выполнения.
//
Процедура ОбновитьПользователейВСервисе(ТекущийАбонент, ОбновлятьИдентификаторыДоступа, Отказ) Экспорт
	
	БизнесСеть.ОбновитьПользователейВСервисе(ТекущийАбонент, ОбновлятьИдентификаторыДоступа, Отказ);

КонецПроцедуры

// Получение данных электронного документа в сервисе.
//
Функция ПолучитьДанныеДокументаСервиса(МассивИдентификаторов, ЭтоРежимЗагрузки, УникальныйИдентификатор,
	ЗагрузкаПредставления = Ложь, Отказ = Ложь) Экспорт
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыМетода.Вставить("МассивСсылокНаОбъект", МассивИдентификаторов);
	ПараметрыМетода.Вставить("РежимВходящихДокументов", ЭтоРежимЗагрузки);
	ПараметрыМетода.Вставить("ВозвращатьДанные", Истина);
	
	ПараметрыКоманды = БизнесСеть.ПараметрыКомандыПолучитьДокументы(ПараметрыМетода, Отказ);
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗагрузкаПредставления Тогда // Открытие документов представления.
		МассивАдресовДанных = КонвертацияДанныхВХранилищеBase64(Результат, "documentData", УникальныйИдентификатор, Отказ);
	Иначе
		МассивАдресовДанных = КонвертацияДанныхВХранилищеBase64(Результат, "documentPresentationData", УникальныйИдентификатор, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		ВидОперации = НСтр("ru = 'Чтение электронного документа'");
		ПодробныйТекстОшибки = НСтр("ru = 'Внутренняя ошибка чтения данных 1С:Бизнес-сеть. Ошибка формата.'");
		ТекстОшибки = НСтр("ru = 'Внутренняя ошибка чтения данных 1С:Бизнес-сеть.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МассивАдресовДанных;
	
КонецФункции

// Проверка возможности отправки документа.
//
// Параметры:
//  Ссылка		 - ДокументСсылка - ссылка на отправляемый документ.
//  Организация	 - ОпределяемыйТип.Организация - заполняется в функции, в случае если ИБ не зарегистрирована,
//                                               требуется для дальнейшей регистрации организации.
// 
// Возвращаемое значение:
//  Булево - результат проверки.
//
Функция ВозможнаОтправкаДокумента(МассивСсылок, Организация, ТекстОшибки, Отказ) Экспорт
	
	Если МассивСсылок.Количество() > 1 Тогда
		// Проверка совпадения отправителя и получателя в документах.
		БизнесСетьПереопределяемый.ВыполнитьКонтрольРеквизитовДокументов(МассивСсылок, ТекстОшибки, Отказ);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Отклонить документы.
//
// Параметры:
//  ПараметрыВызова - Структура, Массив - данные для отклонения, для массива элементами является структура.
//    * Ссылка - ДокументСсылка - ссылка документа информационной базы.
//    * Идентификатор - Число - идентификатор документа сервиса.
//  Отказ			 - Булево - возвращает результат исполнения.
//
Функция ОтклонитьДокументы(ПараметрыВызова, Отказ) Экспорт 
	
	Если ТипЗнч(ПараметрыВызова) = Тип("Массив") Тогда
		МассивДанных = ПараметрыВызова;
	ИначеЕсли ТипЗнч(ПараметрыВызова) = Тип("Структура") Тогда
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(ПараметрыВызова);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибка параметров команды отклонения'"),,,, Отказ);
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("МассивДанных", МассивДанных);
	ПараметрыМетода.Вставить("Статус", "Отклонен");
	ПараметрыКоманды = БизнесСеть.ПараметрыКомандыИзменитьСтатусыДокументов(ПараметрыМетода, Отказ);
	Возврат БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);

КонецФункции

// Проверка подключения Интернет-поддержки пользователей.
// 
// Возвращаемое значение:
//  Булево - признак подключения в информационной базе.
//
Функция ИнтернетПоддержкаПодключена() Экспорт
	
	Возврат ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
КонецФункции

// Имя формы выбора метаданных.
//
// Параметры:
//  ИмяОпределяемогоТипа - Строка - наименование определяемого типа.
// 
// Возвращаемое значение:
//  Строка - имя формы выбора.
//
Функция ИмяФормыВыбораПоОпределяемомуТипу(ИмяОпределяемогоТипа) Экспорт
	
	ОпределяемыйТип = Метаданные.ОпределяемыеТипы.Найти(ИмяОпределяемогоТипа);
	Если ОпределяемыйТип <> Неопределено Тогда
		
		ИмяФормы = "";
		Тип = ОпределяемыйТип.Тип.Типы()[0];
		Менеджер = Метаданные.НайтиПоТипу(Тип);
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			ИмяФормы = "Справочник." + Менеджер.Имя + ".ФормаВыбора";
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			ИмяФормы = "Документ." + Менеджер.Имя + ".ФормаВыбора";
		КонецЕсли;
		
		Возврат ИмяФормы;
	КонецЕсли;
	
КонецФункции

// Обновить подсказки формы в фоне.
//
// Параметры:
//  ДанныеКонтекста			 - Структура - свойства контекста формы,
//                             см. ТорговыеПредложенияКлиент.ДанныеКонтекстаДляПодсказки.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - идентификатор формы.
// 
// Возвращаемое значение:
//  Структура - параметры выполнения фонового задания, см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ОбновитьПодсказкуФормыВФоне(ДанныеКонтекста, УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = '1С:Бизнес-сеть. Запрос подсказки торговых предложений'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ТорговыеПредложения.ПолучитьПодсказкуПоКонтексту",
		ДанныеКонтекста, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Преобразование данных документа сервиса во временном хранилище из Base64.
//
// Параметры:
//   МассивДокументов        - Массив из Структура - электронные документы.
//   ИмяСвойства             - Строка - наименование свойства.
//   УникальныйИдентификатор - УникальныйИдентификатор, Строка - идентификатор для сохранения хранилища.
//   Отказ                   - Булево - признак ошибки чтения данных.
//
// Возвращаемое значение:
//   Массив - список адресов временного хранилища с конвертированными данными.
//
Функция КонвертацияДанныхВХранилищеBase64(МассивДокументов, ИмяСвойства, УникальныйИдентификатор, Отказ)
	
	Если Не ЗначениеЗаполнено(МассивДокументов) ИЛИ ТипЗнч(МассивДокументов) <> Тип("Массив") Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	МассивВозврата = Новый Массив;
	Для каждого ЭлементМассива Из МассивДокументов Цикл
		Если Не ЭлементМассива.Свойство(ИмяСвойства) Тогда
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		ДанныеДокумента = ЭлементМассива[ИмяСвойства];
		МассивВозврата.Добавить(ПоместитьВоВременноеХранилище(Base64Значение(ДанныеДокумента), УникальныйИдентификатор));
	КонецЦикла;
		
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает описание длительной операции по обновлению количества новых документов в сервисе.
// См. функцию БизнесСетьКлиент.ОбновитьИнформациюОНовыхДокументахВСервисеАсинхронно.
//
Функция ОбновитьИнформациюОНовыхДокументахВСервисеАсинхронно(Знач ПараметрыОбновления) Экспорт
	
	Возврат БизнесСеть.ОбновитьИнформациюОНовыхДокументахВСервисеАсинхронно(ПараметрыОбновления);
	
КонецФункции

#КонецОбласти
