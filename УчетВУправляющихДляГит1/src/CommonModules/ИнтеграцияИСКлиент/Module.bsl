// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

#Область ФормыДокументовИС

Процедура ПослеЗаписиВФормеОбъектаДокументаИС(Форма, Объект, ИмяПодсистемы, ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.Свойство("ПредыдущийДокументОснование")
	 И ПараметрыЗаписи.ПредыдущийДокументОснование <> Объект.ДокументОснование Тогда
		
		ПараметрыЗаписи.Вставить("Основание", ПараметрыЗаписи.ПредыдущийДокументОснование);
		
		Оповестить(
			ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененОбъект(ИмяПодсистемы, Форма),
			ПараметрыЗаписи,
			Объект.Ссылка);
		
 	КонецЕсли;
 	
	ПараметрыЗаписи.Вставить("Основание", Объект.ДокументОснование);
	
	Оповестить(
		ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененОбъект(ИмяПодсистемы, Форма),
		ПараметрыЗаписи,
		Объект.Ссылка);
	
КонецПроцедуры

Функция ОбработкаОповещенияВФормеСпискаДокументовИС(Форма, ИмяПодсистемы, ИмяСобытия, Параметр, Источник) Экспорт
	
	ОбновитьСписок = Ложь;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененОбъект(ИмяПодсистемы, Форма) Тогда
		
		ОбновитьСписок = Истина;
	
	ИначеЕсли ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИмяПодсистемы) Тогда
		
		ОбновитьСписок =
			(ТипЗнч(Параметр.Ссылка) = Тип("ДокументСсылка." + ИнтеграцияИСКлиентСервер.ИмяОбъектаИзИмениФормы(Форма, Ложь)));
		
	ИначеЕсли ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИмяПодсистемы) Тогда
		ОжидаемоеСвойство = ИнтеграцияИСКлиентСервер.ИмяСвойстваОбновлятьСтатусВФормахДокументов(ИмяПодсистемы);
	 	
		Если (ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство(ОжидаемоеСвойство)) Тогда
			
			Параметр.Свойство(ОжидаемоеСвойство, ОбновитьСписок);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьСписок Тогда
		Форма.Элементы.Список.Обновить();
	КонецЕсли;
	
	Возврат ОбновитьСписок;
	
КонецФункции

#КонецОбласти

#Область ФормыДокументовОснований

Функция ОбработкаОповещенияВФормеДокументаОснования(Форма, Объект, ИмяСобытия, Параметр, Источник) Экспорт
	
	СобытиеОбработано = Ложь;
	ИнтегрируемыеПодсистемы = ИнтеграцияИСКлиентСервер.ИнтегрируемыеПодсистемыВФормеДокументаОснования(Форма);
	
	Если НЕ ЗначениеЗаполнено(ИнтегрируемыеПодсистемы) Тогда
		Возврат СобытиеОбработано;
	КонецЕсли;
	
	// Вызовем обработки оповещения всех подсистем.
	Для Каждого КлючИЗначение Из ИнтегрируемыеПодсистемы Цикл
		
		ИмяПодсистемы = КлючИЗначение.Ключ;
		
		Если НЕ ИнтеграцияИСКлиентСервер.ЭтоИмяСобытияОповещения(ИмяСобытия, ИмяПодсистемы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПодсистемаСуществует(ИмяПодсистемы) Тогда
			
			МодульИнтеграцииКлиент = ОбщийМодуль(ИмяПодсистемы);
			МодульИнтеграцииКлиент.ОбработкаОповещенияВФормеДокументаОснования(
				Форма,
				Объект,
				ИмяСобытия,
				Параметр,
				Источник,
				СобытиеОбработано);
			
		КонецЕсли;
		
		Если СобытиеОбработано Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СобытиеОбработано;
	
КонецФункции

Процедура ОбработкаНавигационнойСсылкиВФормеДокументаОснования(Форма, Объект,
			Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	СобытиеОбработано = Ложь;
	ИнтегрируемыеПодсистемы = ИнтеграцияИСКлиентСервер.ИнтегрируемыеПодсистемыВФормеДокументаОснования(Форма);
	
	Если НЕ ЗначениеЗаполнено(ИнтегрируемыеПодсистемы) Тогда
		Возврат;
	КонецЕсли;
	
	// Определим имя подсистемы по имени элемента управления.
	//  Поскольку элемент управления есть и ведет сюда считаем что подсистема установлена
	ИмяПодсистемы = ИмяИнтегрируемойПодсистемыПоИмениЭлементаФормы(ИнтегрируемыеПодсистемы, Элемент);
	
	Если НЕ ИнтеграцияИСКлиентСервер.ЭтоИмяКомандыНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, ИмяПодсистемы) Тогда
		
		// Имя команды сформировано не функцией ИнтеграцияИСКлиентСервер.ИмяКоманды...()
		УточнениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Некорректное имя команды навигационной ссылки: ""%1""'"),
			НавигационнаяСсылкаФорматированнойСтроки);
		
		ВызватьИсключение ИнтеграцияИСКлиентСервер.ТекстОшибки(ПредставлениеПодсистемы(ИмяПодсистемы), УточнениеОшибки); // некорректное имя команды навигационной ссылки
		
	КонецЕсли;
	
	// Вызовем обработку навигационной ссылки подсистемы.
	МодульИнтеграцииКлиент = ОбщийМодуль(ИмяПодсистемы);
	МодульИнтеграцииКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		Форма,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		СобытиеОбработано);
	
КонецПроцедуры

Процедура ОбновитьПолеИнтеграцииВФормеДокументаОснования(Форма, ИмяПодсистемы) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяПодсистемы", ИмяПодсистемы); // передается в одноименную процедуру общего модуля ИнтеграцияИС
	
	ОповещениеОбОбновлении = Новый ОписаниеОповещения(
		"Подключаемый_ОбновитьПолеИнтеграцииИСВФормеДокументаОснования",
		Форма,
		ДополнительныеПараметры);
	
	ВыполнитьОбработкуОповещения(ОповещениеОбОбновлении);
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры
	
// Функция проверяет необходимость обновления статусов серий в строке.
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма документа, в которой инициировано указание серий;
//  Элемент                - ТаблицаФормы     - таблица формы, отображающая ТЧ товаров;
//  КэшированныеЗначения   - Произвольный     - кэшированные значения формы;
//  ПараметрыУказанияСерий - Структура        - параметры указания серий таблицы;
//  Удаление               - Булево           - признак удаления строки
// 
// Возвращаемое значение:
//  Булево - необходимо обновить статусы серий.
//
Функция НеобходимоОбновитьСтатусыСерий(Форма, Элемент, КэшированныеЗначения, ПараметрыУказанияСерий = "", Удаление = Ложь) Экспорт
	
	Обновить = Ложь;
	ИнтеграцияИСКлиентПереопределяемый.УстановитьОбновитьСтатусыСерий(Обновить, Форма, Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Удаление);
	Возврат Обновить;
	
КонецФункции

Процедура ОткрытьПодборСерий(Форма, ПараметрыУказанияСерий = "", Текст, СтандартнаяОбработка, ТекущиеДанные = Неопределено) Экспорт
	
	ПодборНеВыполнен = Ложь;

	ИнтеграцияИСКлиентПереопределяемый.ЗаполнитьДляУказанияСерийНуженСерверныйВызов(
		ПодборНеВыполнен,
		Форма,
		?(ПараметрыУказанияСерий = "",Форма.ПараметрыУказанияСерий, ПараметрыУказанияСерий),
		Текст,
		ТекущиеДанные,
		СтандартнаяОбработка);
	
	Если ПодборНеВыполнен Тогда
		
		ТекстИсключения = НСтр("ru = 'Ошибка при попытке указать серии - 
			| в этом документе для указания серий нужен контекстный серверный вызов.'");
		ВызватьИсключение ТекстИсключения;
	
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры
	
#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура СкопироватьШтрихКодВБуферОбмена(ЭлементФормы, Знач Штрихкод) Экспорт
	
	Попытка
		HTMLДокумент = ЭлементФормы.document;
		ВременноеПолеВвода = HTMLДокумент.createElement("INPUT");
		АктивныйЭлемент = HTMLДокумент.activeElement;
		ВременноеПолеВвода.value = Штрихкод;
		HTMLДокумент.body.appendChild(ВременноеПолеВвода);
		ВременноеПолеВвода.select();
		HTMLДокумент.execCommand("copy");
		HTMLДокумент.body.removeChild(ВременноеПолеВвода);
		АктивныйЭлемент.focus();
		
		ТекстСообщения = НСтр("ru = 'Штрихкод скопирован в буфер обмена.'");
		ПоказатьОповещениеПользователя(,,ТекстСообщения,БиблиотекаКартинок.УспешнаяПроверкаНаличияГосИС);
	Исключение
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(Штрихкод);
	КонецПопытки;

КонецПроцедуры

#Область ДальнейшиеДействия

// Функция - Структура подготовки сообщений к передаче
// 
// Возвращаемое значение:
//  Структура - обязательные параметры для подготовки сообщений к передаче
//
Функция СтруктураПодготовкиСообщенийКПередаче(ДинамическийСписок, ДальнейшееДействие, Модуль) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("МассивДокументов",       Новый Массив);
	Контекст.Вставить("НепроведенныеДокументы", Новый Массив);
	Контекст.Вставить("ДинамическийСписок",     ДинамическийСписок);
	Контекст.Вставить("ДальнейшееДействие",     ДальнейшееДействие);
	Контекст.Вставить("ДействиеНедоступно",     Ложь);
	Контекст.Вставить("ПричинаНедоступности",   "");
	Контекст.Вставить("Модуль",                 Модуль);
	Возврат Контекст;
	
КонецФункции

// Процедура - Определить доступность действий
//
// Параметры:
//  Контекст     - Структура - см. СтруктураПодготовкиСообщенийКПередаче().
//  ИменаКолонок - Массив    - имена колонок с дальнейшими действиями
//
Процедура ОпределитьДоступностьДействий(Контекст, ИменаКолонок) Экспорт
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
	
	Для Каждого ВыделеннаяСтрока Из Контекст.ДинамическийСписок.ВыделенныеСтроки Цикл
		
		Если ТипЗнч(ВыделеннаяСтрока) = ТипГруппировка Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки = Контекст.ДинамическийСписок.ДанныеСтроки(ВыделеннаяСтрока);
		ПроверкаПройдена = Ложь;
		Для Каждого ИмяКолонки Из ИменаКолонок Цикл
			ПроверкаПройдена = ПроверкаПройдена ИЛИ (ДанныеСтроки[ИмяКолонки] = Контекст.ДальнейшееДействие);
		КонецЦикла;
		Если ПроверкаПройдена Тогда 
			Контекст.МассивДокументов.Добавить(ДанныеСтроки.Ссылка);
			Если НЕ ДанныеСтроки.Проведен Тогда
				Контекст.НепроведенныеДокументы.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Подготовить сообщения к передаче
//
// Параметры:
//  Контекст - Структура - см СтруктураПодготовкиСообщенийКПередаче()
//
Процедура ПодготовитьСообщенияКПередаче(Контекст) Экспорт
	
	Если Контекст.МассивДокументов.Количество() = 0
		ИЛИ Контекст.ДействиеНедоступно Тогда
		
		Если Контекст.ДействиеНедоступно И ЗначениеЗаполнено(Контекст.ПричинаНедоступности) Тогда
			ПользовательскоеПредупреждение = Контекст.ПричинаНедоступности;
		ИначеЕсли Контекст.ДинамическийСписок.ВыделенныеСтроки.Количество() = 1 Тогда
			ПользовательскоеПредупреждение = НСтр("ru = 'Команда не может быть выполнена для указанного документа.'");
		Иначе
			ПользовательскоеПредупреждение = НСтр("ru = 'Команда не может быть выполнена для указанных документов.'");
		КонецЕсли;
		
		ПоказатьПредупреждение(,ПользовательскоеПредупреждение);
		Возврат;
		
	КонецЕсли;
	
	Если Контекст.НепроведенныеДокументы.Количество() > 0 Тогда
		Если Контекст.НепроведенныеДокументы.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документы. Выполнить проведение документов и продолжить?'");
		КонецЕсли;
		
		Обработчик = Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеПодтверждениеПроведения", ИнтеграцияИСКлиент, Контекст);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
		Возврат;
	КонецЕсли;
	
	ПродолжитьПодготовкуСообщенияКПередаче(Контекст);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПродолжитьПодготовкуСообщенияКПередаче(Контекст)
	
	Модуль = Контекст.Модуль;
	Контекст.Удалить("Модуль");
	Модуль.ПодготовитьСообщенияКПередачеЗавершение(Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область ДиалогПроведенияДокументов
// Только для внутреннего использования.
Процедура ПодготовитьСообщенияКПередачеПодтверждениеПроведения(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ДанныеОНепроведенныхДокументах = ОбщегоНазначенияВызовСервера.ПровестиДокументы(Контекст.НепроведенныеДокументы);
	ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен: %2'");
	НепроведенныеДокументы = Новый Массив;
	Для Каждого ИнформацияОДокументе Из ДанныеОНепроведенныхДокументах Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				Строка(ИнформацияОДокументе.Ссылка),
				ИнформацияОДокументе.ОписаниеОшибки),
				ИнформацияОДокументе.Ссылка);
		НепроведенныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
	КонецЦикла;
	
	Контекст.МассивДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Контекст.МассивДокументов, НепроведенныеДокументы);
	
	// Оповещаем открытые формы о том, что были проведены документы.
	ТипыПроведенныхДокументов = Новый Соответствие;
	Для Каждого ПроведенныйДокумент Из Контекст.МассивДокументов Цикл
		ТипыПроведенныхДокументов.Вставить(ТипЗнч(ПроведенныйДокумент));
	КонецЦикла;
	Для Каждого Тип Из ТипыПроведенныхДокументов Цикл
		ОповеститьОбИзменении(Тип.Ключ);
	КонецЦикла;
	
	Если НепроведенныеДокументы.Количество() > 0 Тогда
		
		Если Контекст.НепроведенныеДокументы.Количество() = НепроведенныеДокументы.Количество() Тогда
			
			Если Контекст.НепроведенныеДокументы.Количество() = 1 Тогда
				ТекстПредупреждения = НСтр("ru = 'Не удалось провести документ'");
			Иначе
				ТекстПредупреждения = НСтр("ru = 'Не удалось провести документы'");
			КонецЕсли;
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		Иначе
			
			ТекстДиалога = НСтр("ru = 'Не удалось провести один или несколько документов.'");
			
			КнопкиДиалога = Новый СписокЗначений;
			Если Контекст.МассивДокументов.Количество() = 0 Тогда
				КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'ОК'"));
			Иначе
				ТекстДиалога = ТекстДиалога + " " + НСтр("ru = 'Продолжить?'");
				КнопкиДиалога.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Продолжить'"));
				КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена);
			КонецЕсли;
			
			Обработчик = Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеПослеПодтверждениеПродолжения", ЭтотОбъект, Контекст);
			ПоказатьВопрос(Обработчик, ТекстДиалога, КнопкиДиалога);
		
		КонецЕсли; 
		
	Иначе
		
		ПродолжитьПодготовкуСообщенияКПередаче(Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьСообщенияКПередачеПослеПодтверждениеПродолжения(РезультатВопроса, Контекст) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Пропустить Тогда
		ПродолжитьПодготовкуСообщенияКПередаче(Контекст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСИнтерфейсом

// Разворачивает на форме дерево или его группу со всеми вложенными группами
//
// Параметры:
//  СтрокаДерева - ДеревоЗначений, СтрокаДереваЗначений - разворачиваемая корневая группа
//  ЭлементФормы - ТаблицаФормы - связанный с деревом элемент управляемой формы
//
Процедура РазвернутьДеревоРекурсивно(СтрокаДерева, ЭлементФормы) Экспорт
	
	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		ЭлементФормы.Развернуть(Элемент.ПолучитьИдентификатор());
		РазвернутьДеревоРекурсивно(Элемент, ЭлементФормы);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПрисоединенныеФайлы

// Открывает форму сообщения обмена с государственной информационной системой
//
// Параметры:
//  Форма           - УправляемаяФорма - источник события
//  ИмяПодсистемы   - Строка - краткое имя библиотеки
//  ВыбраннаяСтрока - Произвольный - выбранная строка таблицы
//  ПоказатьГруппу  - Булево - действие при выборе группы 
//   * показать или вывести сообщение "Операция не может быть выполнена"
//
Процедура ПоказатьСообщенияОперации(Форма, ИмяПодсистемы, ВыбраннаяСтрока, ПоказатьГруппу = Истина) Экспорт
	
	ДанныеСтроки = Форма.Элементы.ДеревоФайлов.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если ДанныеСтроки = Неопределено Тогда
		ПоказатьПредупреждение(,ИнтеграцияИСКлиентСервер.ТекстКомандаНеМожетБытьВыполнена());
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда
		
		ИмяФормы = СтрШаблон("Справочник.%1ПрисоединенныеФайлы.Форма.ФормаЗапросОтвет", ИмяПодсистемы);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ДанныеСтроки.Файл);
		ПараметрыФормы.Вставить("Заголовок", СтрШаблон(НСтр("ru = 'Сообщения операции: %1'"), ДанныеСтроки.Операция));
		
		ОткрытьФорму(
			ИмяФормы,
			ПараметрыФормы,
			Форма,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПоказатьГруппу И ДанныеСтроки.ПолучитьЭлементы().Количество() > 0 Тогда
		
		ПоказатьЗначение(,ДанныеСтроки.Документ);
		
	Иначе
		
		ПоказатьПредупреждение(,ИнтеграцияИСКлиентСервер.ТекстКомандаНеМожетБытьВыполнена());
		
	КонецЕсли;
	
КонецПроцедуры

// Проверить возможность пользовательского действия по текущей строке
//
// Параметры:
//  Форма              - УправляемаяФорма - форма в которой происходит проверка
//  Действие           - Строка - дальнейшее действие (группа)
//  ДальнейшееДействие - Произвольный - фактическое дальнейшее действие (исходящий)
// Возвращаемое значение:
//  Булево - Истина если передача данных сообщения допустима
//
Функция ПроверитьВозможностьДействия(Форма, Действие, ДальнейшееДействие) Экспорт
	
	ТекущиеДанные = Форма.Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,ИнтеграцияИСКлиентСервер.ТекстКомандаНеМожетБытьВыполнена());
		Возврат Ложь;
	КонецЕсли;
	
	ДальнейшееДействие = Неопределено;
	Для Каждого ЭлементСписка Из ТекущиеДанные.ДальнейшиеДействия Цикл
		Если Форма.Действия[Действие].Найти(ЭлементСписка.Значение) <> Неопределено Тогда
			ДальнейшееДействие = ЭлементСписка.Значение;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	ПоказатьПредупреждение(,ИнтеграцияИСКлиентСервер.ТекстКомандаНеМожетБытьВыполнена());
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСМетаданными

Функция ПодсистемаСуществует(КраткоеИмяПодсистемы)
	
	ПолноеИмяПодсистемы = ИнтеграцияИСКлиентСервер.ПолноеИмяПодсистемы(КраткоеИмяПодсистемы);
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует(ПолноеИмяПодсистемы);
	
КонецФункции

Функция ОбщийМодуль(КраткоеИмяПодсистемы) Экспорт
	
	ИмяМодуля = ИнтеграцияИСКлиентСервер.МодульКлиент(КраткоеИмяПодсистемы);
	Возврат ОбщегоНазначенияКлиент.ОбщийМодуль(ИмяМодуля);
	
КонецФункции

Функция ПредставлениеПодсистемы(ИмяПодсистемы)
	
	Если НЕ ЗначениеЗаполнено(ИмяПодсистемы) Тогда
		Представление = НСтр("ru = '<Интеграция>'");
	Иначе
		ИмяМодуля = ИнтеграцияИСКлиентСервер.МодульКлиентСервер(ИмяПодсистемы);
		Представление = ОбщегоНазначенияКлиент.ОбщийМодуль(ИмяМодуля).ПредставлениеПодсистемы();
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ИмяИнтегрируемойПодсистемыПоИмениЭлементаФормы(ИнтегрируемыеПодсистемы, Элемент)
	
	ИмяПодсистемы = "";
	
	Для Каждого КлючИЗначение Из ИнтегрируемыеПодсистемы Цикл
		
		Если Элемент.Имя = ИнтеграцияИСКлиентСервер.ИмяПоляИнтеграцииВФормеДокументаОснования(КлючИЗначение.Ключ) Тогда
			ИмяПодсистемы = КлючИЗначение.Ключ;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ИмяПодсистемы) Тогда
		
		УточнениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось определить имя интегрируемой подсистемы по имени элемента формы ""%1""'"),
			Элемент.Имя);
			
		ВызватьИсключение ИнтеграцияИСКлиентСервер.ТекстОшибки(, УточнениеОшибки); // неизвестное имя интегрируемой подсистемы
		
	КонецЕсли;
	
	Возврат ИмяПодсистемы;
	
КонецФункции

#КонецОбласти

#КонецОбласти
