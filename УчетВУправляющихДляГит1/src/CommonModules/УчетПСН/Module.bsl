#Область ПрограммныйИнтерфейс

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//  ПараметрыОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//  Контейнер - Структура
//   * ДопСтроки - Таблица значений - Строки табличной части заявления
//   * ТитульныйЛист - Структура - Данные титульного листа заявления
//
Процедура ЗаполнитьЗаявлениеУтратаПраваПатентаФорма2014_1(ПараметрыОтчета, Контейнер) Экспорт
	
	ТаблицаКонтейнера = Контейнер.ДопСтроки;
	ТаблицаКонтейнера.Очистить();
	
	ДанныеЗаполнения = ДанныеЗаполненияЗаявления(ПараметрыОтчета);
	ДанныеПатентов = ДанныеЗаполнения.ДанныеПатентов;
	
	КоличествоПатентовНаЛисте = КоличествоПатентовНаЛистеЗаявленияОбУтрате();
	
	НомерПатентаПоПорядку = 1;
	НоваяСтрока = ТаблицаКонтейнера.Добавить();
	
	Для Каждого Патент Из ДанныеПатентов Цикл
		
		Если НомерПатентаПоПорядку > КоличествоПатентовНаЛисте Тогда
			НомерПатентаПоПорядку = 1;
			НоваяСтрока = ТаблицаКонтейнера.Добавить();
		КонецЕсли;
		
		НоваяСтрока[СтрШаблон("НОМЕР_ПАТЕНТА_%1", НомерПатентаПоПорядку)] = Патент.НомерПатента;
		НоваяСтрока[СтрШаблон("ДАТА_НАЧАЛА_%1", НомерПатентаПоПорядку)] = Патент.ДатаНачала;
		НоваяСтрока[СтрШаблон("ДАТА_ОКОНЧАНИЕ_%1", НомерПатентаПоПорядку)] = Патент.ДатаОкончания;
		
		НомерПатентаПоПорядку = НомерПатентаПоПорядку + 1;
		
	КонецЦикла;
	
	ТитульныйЛист = Контейнер.Титульный;
	ТитульныйЛист.Вставить("ДАТА_УТРАТЫ_ПРАВА", ДанныеЗаполнения.ДатаУтратыПрава);
	
	Если ДанныеЗаполнения.Свойство("КодПричины") Тогда
		ТитульныйЛист.Вставить("КОД_ПРИЧИНЫ", ДанныеЗаполнения.КодПричины);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("НалоговыйОрган") Тогда
		ПараметрыОтчета.КодНалоговогоОргана = ДанныеЗаполнения.НалоговыйОрган;
		ТитульныйЛист.Вставить("КОД_НО", ДанныеЗаполнения.НалоговыйОрганКод);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//  ПараметрыОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//  Контейнер - Структура
//   * ТитульныйЛист - Структура - Данные титульного листа заявления
//
Процедура ЗаполнитьЗаявлениеПрекращениеПатентаФорма2014_1(ПараметрыОтчета, Контейнер) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.ПараметрыЗаполнения.Патент) Тогда
		Возврат;
	КонецЕсли;
	
	ТитульныйЛист = Контейнер.Титульный;
	
	ДанныеПатента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.ПараметрыЗаполнения.Патент,
		"НомерПатента, ДатаВыдачи, ПостановкаНаУчетВНалоговомОргане, НалоговыйОрган, НалоговыйОрган.Код");
		
	ТитульныйЛист.Вставить("НОМЕР_ПАТЕНТА", ДанныеПатента.НомерПатента);
	ТитульныйЛист.Вставить("ДАТА_ВЫДАЧИ",   ДанныеПатента.ДатаВыдачи);
	
	Если ДанныеПатента.ПостановкаНаУчетВНалоговомОргане =
			ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане")
		И ЗначениеЗаполнено(ДанныеПатента.НалоговыйОрган) Тогда
		ПараметрыОтчета.КодНалоговогоОргана = ДанныеПатента.НалоговыйОрган;
		ТитульныйЛист.Вставить("КОД_НО", ДанныеПатента.НалоговыйОрганКод);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
// правилами заполнения полей, доступных для автозаполнения
//
// Параметры:
//  ПоказателиОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияУтратаПраваФорма2014_1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "КОД_ПРИЧИНЫ", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_УТРАТЫ_ПРАВА", Истина, Ложь);
	Для Сч = 1 по КоличествоПатентовНаЛистеЗаявленияОбУтрате() Цикл
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("НОМЕР_ПАТЕНТА_%1", Сч) , Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("ДАТА_НАЧАЛА_%1", Сч), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("ДАТА_ОКОНЧАНИЕ_%1", Сч), Истина, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
// правилами заполнения полей, доступных для автозаполнения
//
// Параметры:
//  ПоказателиОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияПрекращениеПатентаФорма2014_1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НОМЕР_ПАТЕНТА", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_ВЫДАЧИ", Истина, Ложь);
	
КонецПроцедуры

// Возвращает данные для заполнения уведомления об уменьшении налога на расходы на онлайн-кассы
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация уведомления
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - налоговый орган, в который подается уведомление.
//
// Возвращаемое значение:
//   Структура, Неопределено - данные для заполнения нового уведомления, см. Отчеты.РегламентированноеУведомлениеУменьшениеНалогаККТ.СформироватьУведомление();
//                             если для переданной организации заполнить уведомление нельзя, возвращается Неопределено.
//
//
Функция ДанныеЗаполненияУведомленияОбУменьшенииНалога(Организация, РегистрацияВНалоговомОргане) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РасходыККТ = РегистрыСведений.РасходыНаОнлайнКассыУменьшающиеНалогПСН.ДетальныеСведенияОРасходах(
		Организация,
		РегистрацияВНалоговомОргане);
	
	УменьшениеНалога = РегистрыСведений.РасходыНаОнлайнКассыУменьшающиеНалогПСН.УменьшениеПлатежейПоПатентам(
		Организация,
		РегистрацияВНалоговомОргане);
	
	ДанныеУведомления = Новый Структура;
	
	// Шапка
	ДанныеУведомления.Вставить("Организация", Организация);
	ДанныеУведомления.Вставить("РегистрацияВИФНС", РегистрацияВНалоговомОргане);
	
	// Общие итоги
	ОбщаяСуммаРасходов    = РасходыККТ.Итог("Сумма");
	ОбщийНалоговыйВычет   = УменьшениеНалога.Итог("НалоговыйВычет");
	НеиспользованныйВычет = Макс(ОбщаяСуммаРасходов - ОбщийНалоговыйВычет, 0);
	
	ДанныеУведомления.Вставить("Стр110", ОбщаяСуммаРасходов);
	ДанныеУведомления.Вставить("Стр210", НеиспользованныйВычет);
	
	// Данные таблицы А - расходы на кассы
	ДанныеЛистовА = Новый СписокЗначений; // Требование БРО - данные заполнения передаются на клиент.
	
	Для Каждого РасходККТ Из РасходыККТ Цикл
		
		ЛистА = НовыйСтруктураДанныхЗаполненияЛистА();
		
		ЛистА.МоделККТ    = РасходККТ.Модель;
		ЛистА.НомерККТ    = РасходККТ.ЗаводскойНомер;
		ЛистА.РегНомерККТ = РасходККТ.РегистрационныйНомер;
		ЛистА.ДатаРегККТ  = РасходККТ.ДатаРегистрации;
		ЛистА.СумРасхККТ  = РасходККТ.Сумма;
		
		ДанныеЛистовА.Добавить(ЛистА);
		
	КонецЦикла;
	
	ДанныеУведомления.Вставить("ДанныеЛистовА", ДанныеЛистовА);
	
	// Данные таблицы Б - распределение расходов по патентам
	ДанныеЛистовБ = Новый СписокЗначений; // Требование БРО - данные заполнения передаются на клиент.
	
	УменьшениеНалога.Индексы.Добавить("Патент");
	
	Патенты = ОбщегоНазначения.ВыгрузитьКолонку(УменьшениеНалога, "Патент", Истина);
	Для Каждого Патент Из Патенты Цикл
		
		ЛистБ = НовыйСтруктураДанныхЗаполненияЛистБ();
		
		СтрокиУменьшенияПоПатенту = УменьшениеНалога.НайтиСтроки(Новый Структура("Патент", Патент));
		
		СуммаНалога = 0;
		
		Для Каждого УменьшаемыйПлатеж Из СтрокиУменьшенияПоПатенту Цикл
			
			ЛистБ.Стр120 = УменьшаемыйПлатеж.НомерПатента;
			ЛистБ.Стр130 = УменьшаемыйПлатеж.ДатаВыдачиПатента;
			
			Если УменьшаемыйПлатеж.ВидПлатежа = Перечисления.ВидыПлатежейПоПатенту.ПервыйПлатеж Тогда
				ЛистБ.Стр170 = УменьшаемыйПлатеж.СрокПлатежа;
				ЛистБ.Стр180 = УменьшаемыйПлатеж.НалоговыйВычет;
			ИначеЕсли УменьшаемыйПлатеж.ВидПлатежа = Перечисления.ВидыПлатежейПоПатенту.ВторойПлатеж Тогда
				ЛистБ.Стр190 = УменьшаемыйПлатеж.СрокПлатежа;
				ЛистБ.Стр200 = УменьшаемыйПлатеж.НалоговыйВычет;
			Иначе // Единственный платеж
				ЛистБ.Стр150 = УменьшаемыйПлатеж.СрокПлатежа;
				ЛистБ.Стр160 = УменьшаемыйПлатеж.НалоговыйВычет;
			КонецЕсли;
			
			СуммаНалога = СуммаНалога + УменьшаемыйПлатеж.СуммаПлатежа;
			
		КонецЦикла;
		
		ЛистБ.Стр140 = СуммаНалога;
		
		ДанныеЛистовБ.Добавить(ЛистБ);
		
	КонецЦикла;
	
	ДанныеУведомления.Вставить("ДанныеЛистовБ", ДанныеЛистовБ);
	
	Возврат ДанныеУведомления;
	
КонецФункции

// Возвращает патент, применяемый организацией на указанную дату, если он один.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, для которой необходимо получить патент.
//  Дата - Дата - Дата, на которую необходимо получить патент.
//
// Возвращаемое значение:
//  СправочникСсылка.Патенты - Патент по умолчанию.
//
Функция ПатентПоУмолчанию(Организация, Дата) Экспорт
	
	Патенты = Справочники.Патенты.ПатентыОрганизации(Организация, Дата);
	
	Если Патенты.Количество() = 1 Тогда
		Возврат Патенты[0];
	КонецЕсли;
	
	Возврат Справочники.Патенты.ПустаяСсылка();
	
КонецФункции

// Проверяет наличие действующих патентов на указанную дату.
//
// Параметры:
//  Период - Дата - проверяемый день.
//
// Возвращаемое значение:
//  Булево - если Истина, имеется как минимум один патент со сроком действия, включающим указанный день.
//
Функция ИмеютсяДействующиеПатенты(Период) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяУСНПатент") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	НЕ Патенты.ПометкаУдаления
	|	И Патенты.ДатаНачала <= &Период
	|	И Патенты.ДатаОкончания >= &Период"
	;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает сведения о допустимости применении в организации - ИП на патенте
// налогового вычета по расходам на приобретение онлайн-касс.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация для определения применимости вычета.
//   Период - Дата - дата, на которую определяется применение вычета.
//
// Возвращаемое значение:
//   Булево - если ИСТИНА, вычет применяется.
//
Функция ПрименяетсяВычетПоОнлайнКассам(Организация, Период) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		И Период >= ДатаНачалаПримененияВычетаНаОнлайнКассы()
		И Период <= ДатаОкончанияПримененияВычетаНаОнлайнКассы();
	
КонецФункции

#Область РаботаСФормами

// Возвращает текст с предупреждением о необходимости заполнения сведений о патенте
// для отображения на панели формы.
//
// Возвращаемое значение:
//  ФормированнаяСтрока - Текст предупреждения о необходимости заполнения патента.
//
Функция ТекстНеобходимоЗаполнитьПатент() Экспорт
	
	СтрокаСведенияОПатенте = Новый ФорматированнаяСтрока(
		НСтр("ru = 'сведения о патенте'"),
		,
		,
		,
		УчетПСНКлиентСервер.НавигационнаяСсылкаНеобходимоЗаполнитьПатент());
	
	Возврат Новый ФорматированнаяСтрока(НСтр("ru = 'Укажите '"), СтрокаСведенияОПатенте);
	
КонецФункции

// Процедура изменяет значения реквизитов, связанных с учетом патента,
// в соответствии с учетной политикой, действующей на дату документа.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект, в котором требуется обработать изменение даты.
//
Процедура ДатаПриИзменении(Объект) Экспорт
	
	ПараметрыУчетаПСН = Новый Структура("ДеятельностьНаПатенте, Патент", Ложь, Неопределено);
	ЗаполнитьЗначенияСвойств(ПараметрыУчетаПСН, Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУчетаПСН.ДеятельностьНаПатенте
		И НЕ УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата) Тогда
		ПараметрыУчетаПСН.ДеятельностьНаПатенте = Ложь;
		ПараметрыУчетаПСН.Патент = Справочники.Патенты.ПустаяСсылка();
	ИначеЕсли УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Дата) Тогда
		ПараметрыУчетаПСН.ДеятельностьНаПатенте = Истина;
	КонецЕсли;
	
	Если ПараметрыУчетаПСН.ДеятельностьНаПатенте Тогда
		
		// Проверим, что патент действует на указанную дату.
		Если ЗначениеЗаполнено(ПараметрыУчетаПСН.Патент)
			И НЕ УчетПСН.ПатентДоступенДляВыбора(ПараметрыУчетаПСН.Патент, Объект.Организация, Объект.Дата) Тогда
			ПараметрыУчетаПСН.Патент = Справочники.Патенты.ПустаяСсылка();
		КонецЕсли;
		
		// Заполним "Патент", если на указанную дату действует только 1 патент.
		Если НЕ ЗначениеЗаполнено(ПараметрыУчетаПСН.Патент) Тогда
			ПараметрыУчетаПСН.Патент = УчетПСН.ПатентПоУмолчанию(Объект.Организация, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыУчетаПСН);
	
КонецПроцедуры

// Проверяет, включает ли период действия патента указанную дату.
//
// Параметры:
//  Патент - СправочникСсылка.Патенты - Патент, период действия которого необходимо проверить.
//  Организация - СправочникСсылка.Организации - Организация, которой принадлежит патент.
//  Дата - Дата - Дата, которая должна входить в период действия патента.
//
// Возвращаемое значение:
//  Булево - Период действия патента включает указанную дату.
//
Функция ПатентДоступенДляВыбора(Патент, Организация, Дата) Экспорт
	
	Патенты = Справочники.Патенты.ПатентыОрганизации(Организация, Дата);
	
	Возврат Патенты.Найти(Патент) <> Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДатаНачалаПримененияВычетаНаОнлайнКассы() Экспорт
	
	Возврат НачалоДня(Дата(2018, 1, 1)); // п. 1.1 статьи 346.51 НК РФ
	
КонецФункции

Функция ДатаОкончанияПримененияВычетаНаОнлайнКассы() Экспорт
	
	Возврат КонецДня(Дата(2019, 12, 31)); // п. 1.1 статьи 346.51 НК РФ
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеЗаявления

Функция ДанныеЗаполненияЗаявления(ПараметрыОтчета)
	
	Перем ПараметрыЗаполнения;
	ДанныеЗаполнения = Новый Структура;
	
	Если ПараметрыОтчета.Свойство("ПараметрыЗаполнения", ПараметрыЗаполнения) И ПараметрыЗаполнения <> Неопределено Тогда
		ДатаУтратыПрава = ПараметрыЗаполнения.ДатаУтратыПрава;
	Иначе
		ДатаУтратыПрава = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	ГраницаДоходов = КонтрольПраваПримененияСпецрежима.ГраницаДоходовОграничивающаяПравоПримененияПСН();
	НачалоПериода  = НачалоГода(ДатаУтратыПрава);
	КонецПериода   = КонецДня(ДатаУтратыПрава);
	СуммаДоходаУСН = УчетУСН.СуммаДохода(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода);
	СуммаДоходаПСН = СуммаДохода(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода);
	
	ГраницаЧисленностиРаботников = КонтрольПраваПримененияСпецрежима.ГраницаСреднесписочнойЧисленностиРаботниковОграничивающаяПравоПримененияПатент();
	СведенияОЧисленностиРаботников = КадровыйУчет.СреднесписочнаяЧисленностьРаботающих(ПараметрыОтчета.Организация,
		НачалоПериода, ДатаУтратыПрава);
	
	Если СуммаДоходаУСН + СуммаДоходаПСН > ГраницаДоходов Тогда
		ДанныеЗаполнения.Вставить("КодПричины", 1);
	ИначеЕсли СведенияОЧисленностиРаботников.ЧисленностьРаботников > ГраницаЧисленностиРаботников Тогда 
		ДанныеЗаполнения.Вставить("КодПричины", 2);
	КонецЕсли;
	
	ДанныеПатентов = ДанныеДействующихПатентов(
		ПараметрыОтчета.Организация,
		ДатаУтратыПрава);
		
	// Если среди патентов отсутствуют оформленные по месту жительства,
	// то заявление в любую ИФНС, в которой поставлен на учет по ПСН
	Если ДанныеПатентов.Количество() > 0 Тогда
		ПатентПоМестуРегистрации = ДанныеПатентов.Найти(Перечисления.ПостановкаНаУчетВНалоговомОргане.ПоМестуНахожденияОрганизации,
														"ПостановкаНаУчетВНалоговомОргане");
		Если ПатентПоМестуРегистрации = Неопределено Тогда
			ДанныеЗаполнения.Вставить("НалоговыйОрган",    ДанныеПатентов[0].НалоговыйОрган);
			ДанныеЗаполнения.Вставить("НалоговыйОрганКод", ДанныеПатентов[0].НалоговыйОрганКод);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ДанныеПатентов",  ДанныеПатентов);
	ДанныеЗаполнения.Вставить("ДатаУтратыПрава", ДатаУтратыПрава);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция КоличествоПатентовНаЛистеЗаявленияОбУтрате()
	
	Возврат 17;
	
КонецФункции

Функция ДанныеДействующихПатентов(Организация, Дата)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Патенты.Ссылка КАК Ссылка,
	|	Патенты.ДатаНачала,
	|	Патенты.ДатаОкончания,
	|	Патенты.НомерПатента,
	|	Патенты.ДатаВыдачи,
	|	Патенты.ПостановкаНаУчетВНалоговомОргане,
	|	Патенты.НалоговыйОрган,
	|	Патенты.НалоговыйОрган.Код КАК НалоговыйОрганКод
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	Патенты.ДатаНачала <= &ДатаОкончания
	|	И Патенты.ДатаОкончания >= &ДатаНачала
	|	И Патенты.Владелец = &Владелец
	|	И НЕ Патенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Дата));

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СуммаДохода(Организация, ДатаНачала, ДатаОкончания)
	
	СуммаДохода = 0;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(Организация, ДатаНачала, ДатаОкончания) Тогда
		Возврат СуммаДохода;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовПатентОбороты.Графа4Оборот КАК СуммаДохода
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовПатент.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &Организация) КАК КнигаУчетаДоходовПатентОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаДохода = Выборка.СуммаДохода;
	КонецЕсли;
	
	Возврат СуммаДохода;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеУведомленияУменьшениеНалога

Функция НовыйСтруктураДанныхЗаполненияЛистА()
	
	ЛистА = Новый Структура;
	
	ЛистА.Вставить("МоделККТ",    "");
	ЛистА.Вставить("НомерККТ",    "");
	ЛистА.Вставить("РегНомерККТ", "");
	ЛистА.Вставить("ДатаРегККТ",  "");
	ЛистА.Вставить("СумРасхККТ",  "");
	
	Возврат ЛистА;
	
КонецФункции

Функция НовыйСтруктураДанныхЗаполненияЛистБ()
	
	ЛистБ = Новый Структура;
	
	ЛистБ.Вставить("Стр120", "");
	ЛистБ.Вставить("Стр130", '00010101');
	ЛистБ.Вставить("Стр140", 0);
	ЛистБ.Вставить("Стр150", '00010101');
	ЛистБ.Вставить("Стр160", 0);
	ЛистБ.Вставить("Стр170", '00010101');
	ЛистБ.Вставить("Стр180", 0);
	ЛистБ.Вставить("Стр190", '00010101');
	ЛистБ.Вставить("Стр200", 0);
	
	Возврат ЛистБ;
	
КонецФункции

#КонецОбласти

#КонецОбласти