
#Область РаботаСРегламентнымиЗаданиями

#Область ОбщиеМеханизмыРегламентныхЗаданий

// Возвращает РегламентноеЗадание из информационной базы.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных регламентного задания для поиска
//                  предопределенного регламентного задания.
//                - УникальныйИдентификатор регламентного задания.
//                - Строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание из которого нужно получить уникальный
//                  идентификатор для получения свежей копии регламентного задания.
// 
// Возвращаемое значение:
//  РегламентноеЗадание, прочитанное из базы данных.
//
Функция ПолучитьРегламентноеЗадание(Знач Идентификатор)
	
	РегламентноеЗадание = Неопределено;
	
	Попытка
		
		РегламентныеЗаданияСлужебный.ВызватьИсключениеЕслиНетПраваАдминистрирования();
		УстановитьПривилегированныйРежим(Истина);
		
		РегламентноеЗадание = Неопределено;
		
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	Возврат РегламентноеЗадание;
	
КонецФункции // ПолучитьРегламентноеЗадание()

// Устанавливает использование регламентного задания.
//  Перед вызовом требуется иметь право Администрирования
// или УстановитьПривилегированныйРежим.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных регламентного задания для поиска
//                  предопределенного регламентного задания.
//                - УникальныйИдентификатор регламентного задания.
//                - Строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание.
//
// Использование  - Булево.
// 
Процедура УстановитьИспользованиеРегламентногоЗадания(Знач Идентификатор, Знач Использование) Экспорт
	
	Задание = ПолучитьРегламентноеЗадание(Идентификатор);
	
	Если НЕ Задание = Неопределено И НЕ Задание.Использование = Использование Тогда
		Задание.Использование = Использование;
		Задание.Записать();
	КонецЕсли;
	
КонецПроцедуры // УстановитьИспользованиеРегламентногоЗадания()

// Функция формирует текст расписания регламентного задания.
//
Функция УстановитьРасписаниеРегламентногоЗаданияПоУмолчанию(ИдентификаторРегламентногоЗадания, ВыполнятьОбменПоРасписанию, РаписаниеРегламентногоЗаданияПоУмолчанию) Экспорт
	
	Задание = ПолучитьРегламентноеЗадание(ИдентификаторРегламентногоЗадания);
	
	Использование   = Ложь;
	ТекстРасписания = "<Расписание не задано>";
	
	Если Не Задание = Неопределено Тогда
		
		Использование = Задание.Использование;
		
		Если Использование Тогда
			ПрефиксРасписания = "Расписание: ";
		Иначе
			ПрефиксРасписания = "Расписание (НЕ АКТИВНО): ";
		КонецЕсли;
		
		Задание.Расписание = РаписаниеРегламентногоЗаданияПоУмолчанию;
		Задание.Записать();
		
		ТекстРасписания = ПрефиксРасписания + Строка(Задание.Расписание);
		
	КонецЕсли;
	
	ВыполнятьОбменПоРасписанию = Использование;
	
	Возврат ТекстРасписания;
	
КонецФункции // ПолучитьРасписаниеРегламентногоЗадания()

// Функция формирует текст расписания регламентного задания.
//
Функция ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗаданияВходящий, ВыполнятьОбменПоРасписанию) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторРегламентногоЗаданияВходящий) Тогда
		
		Если ТипЗнч(ИдентификаторРегламентногоЗаданияВходящий) = Тип("Строка") Тогда
			ИдентификаторРегламентногоЗадания = Новый УникальныйИдентификатор(ИдентификаторРегламентногоЗаданияВходящий);
		Иначе
			ИдентификаторРегламентногоЗадания = ИдентификаторРегламентногоЗаданияВходящий;
		КонецЕсли;
		
		Задание = ПолучитьРегламентноеЗадание(ИдентификаторРегламентногоЗадания);
		
	КонецЕсли;
	
	Использование   = Ложь;
	ТекстРасписания = "<Расписание не задано>";
	
	Если Не Задание = Неопределено Тогда
		
		Использование = Задание.Использование;
		
		Если Задание.Использование Тогда
			ПрефиксРасписания = "Расписание: ";
		Иначе
			ПрефиксРасписания = "Расписание (НЕ АКТИВНО): ";
		КонецЕсли;
		
		ТекстРасписания = ПрефиксРасписания + Строка(Задание.Расписание);
		
	КонецЕсли;
	
	ВыполнятьОбменПоРасписанию = Использование;
	
	Возврат ТекстРасписания;
	
КонецФункции // ПолучитьРасписаниеРегламентногоЗадания()

// Определяет установленный вид настройки расписания.
//
Процедура ОпределитьВидНастройкиРасписания(ИдентификаторРегламентногоЗадания, РасписаниеРегламентногоЗаданияПоУмолчанию, ВидНастройкиРасписания) Экспорт
	
	Задание = ПолучитьРегламентноеЗадание(ИдентификаторРегламентногоЗадания);
	
	Если НЕ Задание = Неопределено Тогда
		Если НЕ Задание.Использование Тогда
			ВидНастройкиРасписания = 0;
		ИначеЕсли Строка(Задание.Расписание) = Строка(РасписаниеРегламентногоЗаданияПоУмолчанию) Тогда
			ВидНастройкиРасписания = 1;
		Иначе
			ВидНастройкиРасписания = 2;
		КонецЕсли;
	Иначе
		ВидНастройкиРасписания = 0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает расписание регламентного задания.
//
Процедура УстановитьРасписание(ИдентификаторРегламентногоЗаданияВходящий, Знач Расписание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ИдентификаторРегламентногоЗаданияВходящий) И ТипЗнч(ИдентификаторРегламентногоЗаданияВходящий) = Тип("Строка") Тогда
		ИдентификаторРегламентногоЗадания = Новый УникальныйИдентификатор(ИдентификаторРегламентногоЗаданияВходящий);
	Иначе
		ИдентификаторРегламентногоЗадания = ИдентификаторРегламентногоЗаданияВходящий;
	КонецЕсли;
	
	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(
		ИдентификаторРегламентногоЗадания,
		Расписание);
	
КонецПроцедуры // УстановитьРасписание()

// Процедура определяет расписания регламентных заданий по умолчанию.
//
Процедура ОпределитьРасписанияРегламентныхЗаданийПоУмолчанию(РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию, РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию) Экспорт
	
	ОпределитьРасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию(РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию);
	ОпределитьРасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию(РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию);
	
КонецПроцедуры

// Определяет расписание регламентного задания по умолчанию.
//
Процедура ОпределитьРасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию(РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию)
	
	РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию = Новый РасписаниеРегламентногоЗадания;
	
	МассивМесяцев = Новый Массив;
	МассивДнейНедели = Новый Массив;
	
	Сч = 1;
	Пока НЕ Сч > 12 Цикл
		МассивМесяцев.Добавить(Сч);
		Если НЕ Сч > 7 Тогда
			МассивДнейНедели.Добавить(Сч);
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
	РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию.ПериодПовтораДней = 1;
	РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию.Месяцы      = МассивМесяцев;
	РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию.ДниНедели   = МассивДнейНедели;
	РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию.ВремяНачала = Дата(1,1,1,16,0,0);
	
КонецПроцедуры

// Определяет расписание регламентного задания по умолчанию.
//
Процедура ОпределитьРасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию(РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию)
	
	РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию = Новый РасписаниеРегламентногоЗадания;
	
	МассивМесяцев = Новый Массив;
	МассивДнейНедели = Новый Массив;
	
	Сч = 1;
	Пока НЕ Сч > 12 Цикл
		МассивМесяцев.Добавить(Сч);
		Если НЕ Сч > 7 Тогда
			МассивДнейНедели.Добавить(Сч);
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
	РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию.ПериодПовтораДней = 1;
	РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию.Месяцы      = МассивМесяцев;
	РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию.ДниНедели   = МассивДнейНедели;
	РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию.ВремяНачала = Дата(1,1,1,15,0,0);
	
КонецПроцедуры

// Процедура создает регламентное задание, если оно не определено.
//
Процедура ОпределитьРегламентноеЗадание(РегламентноеЗадание, СтруктураПараметровРеглЗадания)
	
	РеглЗадание = ПолучитьРегламентноеЗадание(РегламентноеЗадание);
	
	Попытка
		
		Если РеглЗадание = Неопределено Или НЕ ЗначениеЗаполнено(РегламентноеЗадание) Тогда
			СоздатьРегламентноеЗадание(РегламентноеЗадание, СтруктураПараметровРеглЗадания.НаименованиеРеглЗадания,
									   СтруктураПараметровРеглЗадания.НаименованиеРеглЗаданияПолное, СтруктураПараметровРеглЗадания.МассивПараметровРеглЗадания);
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры // ОпределитьРегламентноеЗадание()

// Функция возвращает расписание регламентного задания.
//
Процедура СоздатьРегламентноеЗадание(РегламентноеЗадание, НаименованиеРеглЗадания, ОписаниеРеглЗадания, МассивПараметровРеглЗадания = Неопределено)
	
	ОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание(НаименованиеРеглЗадания);
	Попытка
		// Запишем регламентное задание.
		ОбъектЗадания.Наименование = ОписаниеРеглЗадания;
		Если Не МассивПараметровРеглЗадания = Неопределено Тогда
			ОбъектЗадания.Параметры = МассивПараметровРеглЗадания;
		КонецЕсли;
		
		ОбъектЗадания.Записать();
		РегламентноеЗадание = ОбъектЗадания.УникальныйИдентификатор;
	Исключение
		ВызватьИсключение СтрШаблон("Произошла ошибка при создании расписания.
		|%1", ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры // СоздатьРегламентноеЗадание()

// Формирует пустую таблицу параметров регламентного задания.
//
Функция ПодготовитьПустуюСтруктуруПараметровРеглЗадания()
	
	Возврат Новый Структура("НаименованиеРеглЗадания, НаименованиеРеглЗаданияПолное, МассивПараметровРеглЗадания", "", "",  Новый Массив);
	
КонецФункции

#КонецОбласти


#Область ЖКХЛичныйКабинетРеглЗадания

// Процедура определяет расписания регламентных заданий по умолчанию.
//
Процедура ОпределитьРасписанияРегламентныхЗаданийПоУмолчаниюЖКХЛичныйКабинет(РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию, РасписаниеРегламентногоЗаданияЗагрузокПоказанияПоУмолчанию, РасписаниеРегламентногоЗаданияЗагрузокОплатыПоУмолчанию) Экспорт
	
	ОпределитьРасписанияРегламентныхЗаданийПоУмолчанию(РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию, РасписаниеРегламентногоЗаданияЗагрузокПоказанияПоУмолчанию);
	ОпределитьРасписаниеРегламентногоЗаданияЗагрузокОплатПоУмолчанию(РасписаниеРегламентногоЗаданияЗагрузокОплатыПоУмолчанию);
	
КонецПроцедуры

// Процедура определяет расписание регламентного задания загрузок оплат по умолчанию.
//
Процедура ОпределитьРасписаниеРегламентногоЗаданияЗагрузокОплатПоУмолчанию(РасписаниеРегламентногоЗаданияЗагрузокОплатыПоУмолчанию)
	
	РасписаниеРегламентногоЗаданияЗагрузокОплатыПоУмолчанию = Новый РасписаниеРегламентногоЗадания;
	
	МассивМесяцев = Новый Массив;
	МассивДнейНедели = Новый Массив;
	
	Сч = 1;
	Пока НЕ Сч > 12 Цикл
		МассивМесяцев.Добавить(Сч);
		Если НЕ Сч > 7 Тогда
			МассивДнейНедели.Добавить(Сч);
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
	РасписаниеРегламентногоЗаданияЗагрузокОплатыПоУмолчанию.ПериодПовтораДней = 1;
	РасписаниеРегламентногоЗаданияЗагрузокОплатыПоУмолчанию.Месяцы      = МассивМесяцев;
	РасписаниеРегламентногоЗаданияЗагрузокОплатыПоУмолчанию.ДниНедели   = МассивДнейНедели;
	РасписаниеРегламентногоЗаданияЗагрузокОплатыПоУмолчанию.ВремяНачала = Дата(1,1,1,18,0,0);
	
КонецПроцедуры

// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеВыгрузокЖКХЛичныйКабинет(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузокПоказания, РегламентноеЗаданиеЗагрузокОплаты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОпределитьРегламентноеЗаданиеЖКХЛичныйКабинет(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузокПоказания, РегламентноеЗаданиеЗагрузокОплаты);
	
	Возврат РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(РегламентноеЗаданиеВыгрузок);
	
КонецФункции // ПолучитьРасписание()

// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеЗагрузокПоказанийЖКХЛичныйКабинет(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузокПоказания, РегламентноеЗаданиеЗагрузокОплаты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОпределитьРегламентноеЗаданиеЖКХЛичныйКабинет(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузокПоказания, РегламентноеЗаданиеЗагрузокОплаты);
	
	Возврат РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(РегламентноеЗаданиеЗагрузокПоказания);
	
КонецФункции // ПолучитьРасписание()

// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеЗагрузокОплатЖКХЛичныйКабинет(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузокПоказания, РегламентноеЗаданиеЗагрузокОплаты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОпределитьРегламентноеЗаданиеЖКХЛичныйКабинет(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузокПоказания, РегламентноеЗаданиеЗагрузокОплаты);
	
	Возврат РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(РегламентноеЗаданиеЗагрузокОплаты);
	
КонецФункции // ПолучитьРасписание()

// Процедура подготавливает регламентные задания и их расписания.
//
Процедура ПодготовитьРегламентноеЗаданиеЖКХЛичныйКабинет(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузокПоказания, РегламентноеЗаданиеЗагрузокОплаты,
														 ВыполнятьВыгрузкиПоРасписанию, ВыполнятьЗагрузкиПоРасписаниюПоказания, ВыполнятьЗагрузкиПоРасписаниюОплаты) Экспорт
	
	ОпределитьРегламентноеЗаданиеЖКХЛичныйКабинет(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузокПоказания, РегламентноеЗаданиеЗагрузокОплаты);
	
	УстановитьИспользованиеРегламентногоЗадания(РегламентноеЗаданиеВыгрузок,          ВыполнятьВыгрузкиПоРасписанию);
	УстановитьИспользованиеРегламентногоЗадания(РегламентноеЗаданиеЗагрузокПоказания, ВыполнятьЗагрузкиПоРасписаниюПоказания);
	УстановитьИспользованиеРегламентногоЗадания(РегламентноеЗаданиеЗагрузокОплаты,    ВыполнятьЗагрузкиПоРасписаниюОплаты);
	
КонецПроцедуры

// Процедура создает регламентное задание, если оно не определено.
//
Процедура ОпределитьРегламентноеЗаданиеЖКХЛичныйКабинет(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузокПоказания, РегламентноеЗаданиеЗагрузокОплаты)
	
	ОпределитьРегламентноеЗаданиеВыгрузкаДанныхПоЛСвЖКХЛичныйКабинет(РегламентноеЗаданиеВыгрузок);
	ОпределитьРегламентноеЗаданиеЗагрузкаПоказанийИзЖКХЛичныйКабинет(РегламентноеЗаданиеЗагрузокПоказания);
	ОпределитьРегламентноеЗаданиеЗагрузкаОплатИзЖКХЛичныйКабинет(РегламентноеЗаданиеЗагрузокОплаты);
	
КонецПроцедуры // ОпределитьРегламентноеЗадание()

// Определяет регламентное задание выгрузки данных по л/с на сервис.
//
Процедура ОпределитьРегламентноеЗаданиеВыгрузкаДанныхПоЛСвЖКХЛичныйКабинет(РеглЗадание)
	
	СтруктураПараметровВыгрузка = ПодготовитьПустуюСтруктуруПараметровРеглЗадания();
	
	СтруктураПараметровВыгрузка.НаименованиеРеглЗадания       = "УПЖКХ_ОбменДаннымиСМобильнымПриложением";
	СтруктураПараметровВыгрузка.НаименованиеРеглЗаданияПолное = "Обмен с мобильным приложением: выгрузка данных по л/с";
	СтруктураПараметровВыгрузка.МассивПараметровРеглЗадания.Добавить(Перечисления.УПЖКХ_ВидыРегламентныхЗаданийИнтеграцииСМобильнымПриложением.ВыгрузкаДанныхПоЛицевымСчетаНаСервер);
	
	ОпределитьРегламентноеЗадание(РеглЗадание, СтруктураПараметровВыгрузка);
	
КонецПроцедуры

// Определяет регламентное задание загрузки показаний счетчиков с сервиса.
//
Процедура ОпределитьРегламентноеЗаданиеЗагрузкаПоказанийИзЖКХЛичныйКабинет(РеглЗадание)
	
	СтруктураПараметров = ПодготовитьПустуюСтруктуруПараметровРеглЗадания();
	
	СтруктураПараметров.НаименованиеРеглЗадания       = "УПЖКХ_ОбменДаннымиСМобильнымПриложением";
	СтруктураПараметров.НаименованиеРеглЗаданияПолное = "Обмен с мобильным приложением: загрузка показаний счетчиков с сервера";
	СтруктураПараметров.МассивПараметровРеглЗадания.Добавить(Перечисления.УПЖКХ_ВидыРегламентныхЗаданийИнтеграцииСМобильнымПриложением.ЗагрузкаПоказанийССервера);
	
	ОпределитьРегламентноеЗадание(РеглЗадание, СтруктураПараметров);
	
КонецПроцедуры

// Определяет регламентное задание загрузки оплат с сервиса.
//
Процедура ОпределитьРегламентноеЗаданиеЗагрузкаОплатИзЖКХЛичныйКабинет(РеглЗадание)
	
	СтруктураПараметров = ПодготовитьПустуюСтруктуруПараметровРеглЗадания();
	
	СтруктураПараметров.НаименованиеРеглЗадания       = "УПЖКХ_ОбменДаннымиСМобильнымПриложением";
	СтруктураПараметров.НаименованиеРеглЗаданияПолное = "Обмен с мобильным приложением: загрузка оплат с сервера";
	СтруктураПараметров.МассивПараметровРеглЗадания.Добавить(Перечисления.УПЖКХ_ВидыРегламентныхЗаданийИнтеграцииСМобильнымПриложением.ЗагрузкаОплатССервера);
	
	ОпределитьРегламентноеЗадание(РеглЗадание, СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти


#Область ОбменСГолосовымиСервисамиРеглЗадания

// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеВыгрузокMARS(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОпределитьРегламентноеЗаданиеMARS(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок);
	
	Возврат РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(РегламентноеЗаданиеВыгрузок);
	
КонецФункции // ПолучитьРасписание()

// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеЗагрузокMARS(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОпределитьРегламентноеЗаданиеMARS(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок);
	
	Возврат РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(РегламентноеЗаданиеЗагрузок);
	
КонецФункции // ПолучитьРасписание()

// Процедура подготавливает регламентные задания и их расписания.
//
Процедура ПодготовитьРегламентноеЗаданиеMARS(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок, ВыполнятьВыгрузкиПоРасписанию, ВыполнятьЗагрузкиПоРасписанию) Экспорт
	
	ОпределитьРегламентноеЗаданиеMARS(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок);
	
	УстановитьИспользованиеРегламентногоЗадания(РегламентноеЗаданиеВыгрузок, ВыполнятьВыгрузкиПоРасписанию);
	УстановитьИспользованиеРегламентногоЗадания(РегламентноеЗаданиеЗагрузок, ВыполнятьЗагрузкиПоРасписанию);
	
КонецПроцедуры

// Процедура создает регламентное задание, если оно не определено.
//
Процедура ОпределитьРегламентноеЗаданиеMARS(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок)
	
	ОпределитьРегламентноеЗаданиеВыгрузкаДанныхПоЛСвMARS(РегламентноеЗаданиеВыгрузок);
	ОпределитьРегламентноеЗаданиеЗагрузкаДанныхИзMARS(РегламентноеЗаданиеЗагрузок);
	СохранитьНастройкиРеглЗаданийMARS(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок);
	
КонецПроцедуры // ОпределитьРегламентноеЗадание()

// Определяет регламентное задание выгрузки данных в голосовые сервисы.
//
Процедура ОпределитьРегламентноеЗаданиеВыгрузкаДанныхПоЛСвMARS(РеглЗадание)
	
	СтруктураПараметровВыгрузка = ПодготовитьПустуюСтруктуруПараметровРеглЗадания();
	
	СтруктураПараметровВыгрузка.НаименованиеРеглЗадания       = "УПЖКХ_ОбменДаннымиСГолосовымиСервисами";
	СтруктураПараметровВыгрузка.НаименованиеРеглЗаданияПолное = "Обмен с голосовыми сервисами: выгрузка данных по л/с";
	СтруктураПараметровВыгрузка.МассивПараметровРеглЗадания.Добавить(Перечисления.УПЖКХ_ВидыОбменаСГолосовымиСервисами.ВыгрузкаДанных);
	
	ОпределитьРегламентноеЗадание(РеглЗадание, СтруктураПараметровВыгрузка);
	
КонецПроцедуры

// Определяет регламентное задание загрузки данных из голосовые сервисы.
//
Процедура ОпределитьРегламентноеЗаданиеЗагрузкаДанныхИзMARS(РеглЗадание)
	
	СтруктураПараметровВыгрузка = ПодготовитьПустуюСтруктуруПараметровРеглЗадания();
	
	СтруктураПараметровВыгрузка.НаименованиеРеглЗадания       = "УПЖКХ_ОбменДаннымиСГолосовымиСервисами";
	СтруктураПараметровВыгрузка.НаименованиеРеглЗаданияПолное = "Обмен с голосовыми сервисами: загрузка данных с сервиса";
	СтруктураПараметровВыгрузка.МассивПараметровРеглЗадания.Добавить(Перечисления.УПЖКХ_ВидыОбменаСГолосовымиСервисами.ЗагрузкаДанных);
	
	ОпределитьРегламентноеЗадание(РеглЗадание, СтруктураПараметровВыгрузка);
	
КонецПроцедуры

// Сохраняет идентификаторы регламентных заданий в настройках интеграции.
//
Процедура СохранитьНастройкиРеглЗаданийMARS(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок)
	
	НастройкиДляСохранения = Новый Структура("РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок", РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок);
	
	УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.УстановитьНастройкиИнтеграцииCГолосовымиСервисами(НастройкиДляСохранения);
	
КонецПроцедуры

#КонецОбласти

#Область WEBИнтеграцияРеглЗадания

// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеВебИнтеграция(РегламентноеЗаданиеСтрока, НаименованиеВариантаОбмена = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(РегламентноеЗаданиеСтрока) Тогда
		РегламентноеЗадание = Новый УникальныйИдентификатор(РегламентноеЗаданиеСтрока);
	КонецЕсли;
	
	ОпределитьРегламентноеЗаданиеВебИнтеграция(РегламентноеЗадание, НаименованиеВариантаОбмена);
	
	РегламентноеЗаданиеСтрока = Строка(РегламентноеЗадание);
	
	Возврат РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(РегламентноеЗадание);
	
КонецФункции // ПолучитьРасписание()

// Процедура подготавливает регламентные задания и их расписания.
//
Процедура ПодготовитьРегламентноеЗаданиеВебИнтеграция(РегламентноеЗаданиеСтрока, ВыполнятьОбменПоРасписанию, НаименованиеВариантаОбмена = "") Экспорт
	
	Если ЗначениеЗаполнено(РегламентноеЗаданиеСтрока) Тогда
		РегламентноеЗадание = Новый УникальныйИдентификатор(РегламентноеЗаданиеСтрока);
	КонецЕсли;
	
	ОпределитьРегламентноеЗаданиеВебИнтеграция(РегламентноеЗадание, НаименованиеВариантаОбмена);
	
	УстановитьИспользованиеРегламентногоЗадания(РегламентноеЗадание, ВыполнятьОбменПоРасписанию);
	
	РегламентноеЗаданиеСтрока = Строка(РегламентноеЗадание);
	
КонецПроцедуры

// Записывает в параметры регламетного задания данные для поиска элемента текущего
// справочника, соответствующего регламентному заданию.
// 
Процедура УстановитьПараметрыРегламентногоЗаданияВебИнтеграция(РегламентноеЗаданиеСтрока, Параметр) Экспорт
	
	Если ЗначениеЗаполнено(РегламентноеЗаданиеСтрока) Тогда
		РегламентноеЗадание = Новый УникальныйИдентификатор(РегламентноеЗаданиеСтрока);
	Иначе
		Возврат;
	КонецЕсли;
	
	мРегламентноеЗадание = ПолучитьРегламентноеЗадание(РегламентноеЗадание);
	
	Если мРегламентноеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Массив = Новый Массив();
	Массив.Добавить(Параметр);
	
	мРегламентноеЗадание.Параметры = Массив;
	мРегламентноеЗадание.Ключ      = Параметр;
	мРегламентноеЗадание.Записать();
	
	РегламентноеЗаданиеСтрока = Строка(РегламентноеЗадание);
	
КонецПроцедуры // УстановитьПараметрыРегламентногоЗадания()

// Процедура создает регламентное задание, если оно не определено.
//
Процедура ОпределитьРегламентноеЗаданиеВебИнтеграция(РегламентноеЗадание, НаименованиеВариантаОбмена)
	
	СтруктураПараметровРеглЗадания = ПодготовитьСтруктуруПараметровРеглЗаданийВебИнтеграция(НаименованиеВариантаОбмена);
	
	ОпределитьРегламентноеЗадание(РегламентноеЗадание, СтруктураПараметровРеглЗадания);
	
КонецПроцедуры // ОпределитьРегламентноеЗадание()

// Формирует структуру параметров регламентных задания для "WEB-интеграции".
//
Функция ПодготовитьСтруктуруПараметровРеглЗаданийВебИнтеграция(НаименованиеВариантаОбмена)
	
	СтруктураПараметров = ПодготовитьПустуюСтруктуруПараметровРеглЗадания();
	СтруктураПараметров.НаименованиеРеглЗадания       = "УПЖКХ_ОбменДаннымиССайтом";
	СтруктураПараметров.НаименованиеРеглЗаданияПолное = "Обмен данными с сайтом: " + НаименованиеВариантаОбмена;
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

#Область ОбменСПроизводителямиСчетчиков

// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеПроизводителиСчетчиков(РегламентноеЗаданиеОбмена, СистемаСбораПоказанийСчетчиков) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОпределитьРегламентноеЗаданиеОбменаПроизводителиСчетчиков(РегламентноеЗаданиеОбмена, СистемаСбораПоказанийСчетчиков);
	
	Возврат РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(РегламентноеЗаданиеОбмена);
	
КонецФункции // ПолучитьРасписаниеПроизводителиСчетчиков()

// Процедура создает регламентное задание, если оно не определено.
//
Процедура ОпределитьРегламентноеЗаданиеОбменаПроизводителиСчетчиков(РегламентноеЗаданиеОбмена, СистемаСбораПоказанийСчетчиков)
	
	СтруктураПараметровРеглЗадания = ПодготовитьСтруктуруПараметровРеглЗаданиеПроизводителиСчетчиков(УПЖКХ_ИнтеграцияССервисамиСбораПоказанийСчетчиковВзаимодействиеСБазойДанных.ПолучитьСтроковоеПредставлениеТекущейСистемыДляРегламентныхЗаданий(СистемаСбораПоказанийСчетчиков));
	
	ОпределитьРегламентноеЗаданиеПроизводителиСчетчиков(РегламентноеЗаданиеОбмена, СтруктураПараметровРеглЗадания);
	СохранитьНастройкиРеглЗаданийПроизводителиСчетчиков(РегламентноеЗаданиеОбмена, СистемаСбораПоказанийСчетчиков);
	
КонецПроцедуры // ОпределитьРегламентноеЗаданиеОбменаПроизводителиСчетчиков()

// Формирует структуру параметров регламентных задания для обмена с Саурес.
//
Функция ПодготовитьСтруктуруПараметровРеглЗаданиеПроизводителиСчетчиков(НазваниеСистемыСбораПоказанийСчетчиков)
	
	СтруктураПараметров = ПодготовитьПустуюСтруктуруПараметровРеглЗаданияСаурес();
	СтруктураПараметров.НаименованиеРеглЗадания       = "УПЖКХ_ОбменДаннымиССервисомСбораПоказанийСчетчиков";
	СтруктураПараметров.НаименованиеРеглЗаданияОбмена = "Обмен с сервисами сбора показаний счетчиков: загрузка данных с сервиса (" + НазваниеСистемыСбораПоказанийСчетчиков + ")";
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Формирует пустую таблицу параметров регламентного задания.
//
Функция ПодготовитьПустуюСтруктуруПараметровРеглЗаданияСаурес()
	
	Возврат Новый Структура("НаименованиеРеглЗадания, НаименованиеРеглЗаданияОбмена", "", "");
	
КонецФункции

// Процедура создает регламентное задание, если оно не определено.
//
Процедура ОпределитьРегламентноеЗаданиеПроизводителиСчетчиков(РегламентноеЗаданиеОбмена, СтруктураПараметровРеглЗадания)
	
	ЗаданиеОбмена = ПолучитьРегламентноеЗадание(РегламентноеЗаданиеОбмена);
	
	Попытка
		
		Если ЗаданиеОбмена = Неопределено Или НЕ ЗначениеЗаполнено(РегламентноеЗаданиеОбмена) Тогда
			СоздатьРегламентноеЗадание(РегламентноеЗаданиеОбмена, СтруктураПараметровРеглЗадания.НаименованиеРеглЗадания, СтруктураПараметровРеглЗадания.НаименованиеРеглЗаданияОбмена);
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры // ОпределитьРегламентноеЗадание()

// Сохраняет идентификаторы регламентных заданий в настройках интеграции.
//
Процедура СохранитьНастройкиРеглЗаданийПроизводителиСчетчиков(РегламентноеЗаданиеОбмена, СистемаСбораПоказанийСчетчиков)
	
	НастройкиДляСохранения = Новый Структура("РегламентноеЗаданиеОбмена", РегламентноеЗаданиеОбмена);
	
	УПЖКХ_ИнтеграцияССервисамиСбораПоказанийСчетчиковВзаимодействиеСБазойДанных.УстановитьНастройкиИнтеграцииCСервисамиОбменаПоказанийСчетчиков(НастройкиДляСохранения, СистемаСбораПоказанийСчетчиков);
	
КонецПроцедуры

// Процедура подготавливает регламентные задания и их расписания.
//
Процедура ПодготовитьРегламентноеЗаданиеПроизводителиСчетчиков(РегламентноеЗаданиеОбмена, ВыполнятьОбменПоРасписанию, СистемаСбораПоказанийСчетчиков) Экспорт
	
	ОпределитьРегламентноеЗаданиеОбменаПроизводителиСчетчиков(РегламентноеЗаданиеОбмена, СистемаСбораПоказанийСчетчиков);
	
	УстановитьИспользованиеРегламентногоЗадания(РегламентноеЗаданиеОбмена, ВыполнятьОбменПоРасписанию);
	
КонецПроцедуры

// Определяет расписание регламентного задания по умолчанию.
//
Процедура ОпределитьРасписаниеРегламентногоЗаданияПоУмолчанию(РасписаниеРегламентногоЗаданияПоУмолчанию) Экспорт
	
	РасписаниеРегламентногоЗаданияПоУмолчанию = Новый РасписаниеРегламентногоЗадания;
	
	МассивМесяцев = Новый Массив;
	
	Сч = 1;
	Пока НЕ Сч > 12 Цикл
		МассивМесяцев.Добавить(Сч);
		Сч = Сч + 1;
	КонецЦикла;
	
	РасписаниеРегламентногоЗаданияПоУмолчанию.Месяцы      = МассивМесяцев;
	РасписаниеРегламентногоЗаданияПоУмолчанию.ДеньВМесяце = 25;
	РасписаниеРегламентногоЗаданияПоУмолчанию.ВремяНачала = Дата(1,1,1,15,0,0);
	
КонецПроцедуры

// Записывает в параметры регламетного задания данные для идентификации
// системы сбора показаний счетчиков, соответствующей регламентному заданию.
// 
Процедура УстановитьПараметрыРегламентногоЗаданияПроизводителиСчетчиков(РегламентноеЗаданиеИД, Параметр) Экспорт
	
	Если Не ЗначениеЗаполнено(РегламентноеЗаданиеИД) Тогда
		Возврат;
	КонецЕсли;
	
	мРегламентноеЗадание = ПолучитьРегламентноеЗадание(РегламентноеЗаданиеИД);
	
	Если мРегламентноеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Массив = Новый Массив();
	Массив.Добавить(Параметр);
	
	мРегламентноеЗадание.Параметры = Массив;
	мРегламентноеЗадание.Ключ      = Параметр;
	мРегламентноеЗадание.Записать();
	
КонецПроцедуры // УстановитьПараметрыРегламентногоЗадания()

#КонецОбласти

#КонецОбласти