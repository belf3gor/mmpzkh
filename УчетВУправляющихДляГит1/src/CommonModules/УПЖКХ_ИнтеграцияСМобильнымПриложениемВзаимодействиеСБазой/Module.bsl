
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ И УСТАНОВКИ ЗНАЧЕНИЙ КОНСТАНТ

#Область ПроцедурыИФункцииПолученияИУстановкиЗначенийКонстант

// Возвращает номер режима работы механизма из константы УПЖКХ_РежимРаботыМеханизмаИнтеграцииСМобильнымПриложением.
//
Функция РежимРаботыМеханизмаИнтеграцииСМобильнымПриложением() Экспорт
	
	Возврат Константы.УПЖКХ_РежимРаботыМеханизмаИнтеграцииСМобильнымПриложением.Получить();
	
КонецФункции

// Устанавливает в значение константы УПЖКХ_РежимРаботыМеханизмаИнтеграцииСМобильнымПриложением номер режима работы механизма.
//
Процедура УстановитьРежимРаботыМеханизмаИнтеграцииСМобильнымПриложением(СохраняемыйРежим) Экспорт
	
	Константы.УПЖКХ_РежимРаботыМеханизмаИнтеграцииСМобильнымПриложением.Установить(СохраняемыйРежим);
	
КонецПроцедуры

// Получает из константы УПЖКХ_НастройкаАвтоматическогоОбменаДаннымиСМобильнымПриложением хранилище значения,
// содержащее в себе структуру с данными.
//
Функция ПолучитьНастройкуАвтоматическогоОбменаСМобильнымПриложением() Экспорт
	
	СтруктураВозврата   = Новый Структура;
	СтруктураОбмена     = Новый Структура;
	РасписанияНастроены = Ложь;
	
	СохраненнаяНастройкаХранилище = Константы.УПЖКХ_НастройкаАвтоматическогоОбменаДаннымиСМобильнымПриложением.Получить();
	
	Если НЕ СохраненнаяНастройкаХранилище = Неопределено Тогда
		
		СтруктураСохраненная = СохраненнаяНастройкаХранилище.Получить();
		
		Если ТипЗнч(СтруктураСохраненная) = Тип("Структура") Тогда
			СтруктураОбмена = СтруктураСохраненная;
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторРегламентногоЗаданияВыгрузок          = Неопределено;
	ИдентификаторРегламентногоЗаданияЗагрузокПоказания = Неопределено;
	ИдентификаторРегламентногоЗаданияЗагрузокОплаты    = Неопределено;
	
	НастройкаФормированияДанных = Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПустаяСсылка();
	
	ЗагружатьПоказанияПУПоЗданиям = Ложь;
	ЗагружатьПоказанияПУПоУслугам = Ложь;
	
	СтруктураОбмена.Свойство("ИдентификаторРегламентногоЗаданияВыгрузок",       ИдентификаторРегламентногоЗаданияВыгрузок);
	СтруктураОбмена.Свойство("ИдентификаторРегламентногоЗаданияЗагрузокОплаты", ИдентификаторРегламентногоЗаданияЗагрузокОплаты);
	
	Если СтруктураОбмена.Свойство("ИдентификаторРегламентногоЗаданияЗагрузокПоказания") Тогда
		ИдентификаторРегламентногоЗаданияЗагрузокПоказания = СтруктураОбмена.ИдентификаторРегламентногоЗаданияЗагрузокПоказания;
	Иначе
		СтруктураОбмена.Свойство("ИдентификаторРегламентногоЗаданияЗагрузок", ИдентификаторРегламентногоЗаданияЗагрузокПоказания);
	КонецЕсли;
	
	СтруктураОбмена.Свойство("НастройкаФормированияДанных",               НастройкаФормированияДанных);
	
	Если СтруктураОбмена.Свойство("ЗагружатьПоказанияПУПоЗданиям") Тогда
		ЗагружатьПоказанияПУПоЗданиям = СтруктураОбмена.ЗагружатьПоказанияПУПоЗданиям;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("ЗагружатьПоказанияПУПоУслугам") Тогда
		ЗагружатьПоказанияПУПоУслугам = СтруктураОбмена.ЗагружатьПоказанияПУПоУслугам;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("КоличествоЛСВФайлеОбмена") Тогда
		КоличествоЛСВФайлеОбмена = СтруктураОбмена.КоличествоЛСВФайлеОбмена;
	Иначе
		КоличествоЛСВФайлеОбмена = 3000;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("ЧислоОкончанияПроведенияНачислений") Тогда
		ЧислоОкончанияПроведенияНачислений = СтруктураОбмена.ЧислоОкончанияПроведенияНачислений;
	Иначе
		ЧислоОкончанияПроведенияНачислений = 0;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("МесяцОкончанияПроведенияНачислений") Тогда
		МесяцОкончанияПроведенияНачислений = СтруктураОбмена.МесяцОкончанияПроведенияНачислений;
	Иначе
		МесяцОкончанияПроведенияНачислений = 0;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("ДатаПоследнейЗагруженнойОплаты") Тогда
		ДатаПоследнейЗагруженнойОплаты = СтруктураОбмена.ДатаПоследнейЗагруженнойОплаты;
	Иначе
		ДатаПоследнейЗагруженнойОплаты = Дата(1970, 1, 1);
	КонецЕсли;
	
	СтруктураВозврата.Вставить("НастройкаФормированияДанных",        НастройкаФормированияДанных);
	СтруктураВозврата.Вставить("КоличествоЛСВФайлеОбмена",           КоличествоЛСВФайлеОбмена);
	СтруктураВозврата.Вставить("ЗагружатьПоказанияПУПоЗданиям",      ЗагружатьПоказанияПУПоЗданиям);
	СтруктураВозврата.Вставить("ЗагружатьПоказанияПУПоУслугам",      ЗагружатьПоказанияПУПоУслугам);
	СтруктураВозврата.Вставить("ЧислоОкончанияПроведенияНачислений", ЧислоОкончанияПроведенияНачислений);
	СтруктураВозврата.Вставить("МесяцОкончанияПроведенияНачислений", МесяцОкончанияПроведенияНачислений);
	СтруктураВозврата.Вставить("ДатаПоследнейЗагруженнойОплаты",     ДатаПоследнейЗагруженнойОплаты);
	СтруктураВозврата.Вставить("ИдентификаторРегламентногоЗаданияВыгрузок",          ИдентификаторРегламентногоЗаданияВыгрузок);
	СтруктураВозврата.Вставить("ИдентификаторРегламентногоЗаданияЗагрузокПоказания", ИдентификаторРегламентногоЗаданияЗагрузокПоказания);
	СтруктураВозврата.Вставить("ИдентификаторРегламентногоЗаданияЗагрузокОплаты",    ИдентификаторРегламентногоЗаданияЗагрузокОплаты);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Устанавливает в значение константы УПЖКХ_НастройкаАвтоматическогоОбменаДаннымиСМобильнымПриложением расписание обмена.
//
Процедура УстановитьНастройкуАвтоматическогоОбменаДаннымиСМобильнымПриложением(СтруктураНастроекОбмена) Экспорт
	
	Если ТипЗнч(СтруктураНастроекОбмена) = Тип("Структура")
	   И СтруктураНастроекОбмена.Свойство("НастройкаФормированияДанных")
	   И СтруктураНастроекОбмена.Свойство("КоличествоЛСВФайлеОбмена")
	   И СтруктураНастроекОбмена.Свойство("ИдентификаторРегламентногоЗаданияВыгрузок")
	   И СтруктураНастроекОбмена.Свойство("ИдентификаторРегламентногоЗаданияЗагрузокПоказания")
	   И СтруктураНастроекОбмена.Свойство("ИдентификаторРегламентногоЗаданияЗагрузокОплаты")
	   И СтруктураНастроекОбмена.Свойство("ЧислоОкончанияПроведенияНачислений")
	   И СтруктураНастроекОбмена.Свойство("МесяцОкончанияПроведенияНачислений") Тогда
		
		ПараметрыДляСохранения = Новый ХранилищеЗначения(СтруктураНастроекОбмена);
		
		Константы.УПЖКХ_НастройкаАвтоматическогоОбменаДаннымиСМобильнымПриложением.Установить(ПараметрыДляСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ИДЕНТИФИКАТОРАМИ ЛИЦЕВЫХ СЧЕТОВ

#Область ФункцииДляУправленияИдентификаторамиЛицевыхСчетов

// Формирует таблицу идентификаторов переданных лицевых счетов.
//
Функция ПолучитьТаблицуИдентификаторовЛицевыхСчетов(МассивЛС, СведенияОбОшибке) Экспорт
	
	Если АктуализироватьIDЛицевыхСчетов(МассивЛС, СведенияОбОшибке) Тогда
		Возврат ПолучитьТаблицуIDЛицевыхСчетов(МассивЛС);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Актуализирует сведения об идентификаторах лицевых счетов.
//
Функция АктуализироватьIDЛицевыхСчетов(МассивЛС, СведенияОбОшибке)
	
	// Получаем сведения по л/с без идентификаторов
	// и сведения о количестве свободных идентификаторов.
	СведенияПоЛСБезID = ПолучитьСведенияПоЛСБезID(МассивЛС);
	
	// Определяем количество л/с без id и, если имеются л/с без id,
	// выполняем присвоение л/с идентификаторов.
	КоличествоЛСБезID = СведенияПоЛСБезID.МассивЛСБезID.Количество();
	
	Если НЕ КоличествоЛСБезID = 0
	   И НЕ ПолучитьИЗаписатьIDДляЛицевыхСчетов(СведенияПоЛСБезID.МассивЛСБезID, КоличествоЛСБезID, СведенияПоЛСБезID.КоличествоСвободныхID, СведенияОбОшибке) Тогда
		
		// Не удалось.
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Формирует структуру со сведениями по л/с без идентификаторов и количестве свободных идентификаторов.
//
Функция ПолучитьСведенияПоЛСБезID(МассивЛС)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В(&МассивЛС)
	|	И НЕ КВП_ЛицевыеСчета.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении КАК УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении
	|		ПО втЛицевыеСчета.ЛицевойСчет = УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.ЛицевойСчет
	|ГДЕ
	|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.ЛицевойСчет ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.Идентификатор) КАК КоличествоСвободныхID
	|ИЗ
	|	РегистрСведений.УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении КАК УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении
	|ГДЕ
	|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("МассивЛС", МассивЛС);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаЛСБезID               = РезультатыЗапроса[1].Выгрузить();
	ТаблицаКоличествоСвободныхID = РезультатыЗапроса[2].Выгрузить();
	
	Возврат Новый Структура("МассивЛСБезID, КоличествоСвободныхID",
							ТаблицаЛСБезID.ВыгрузитьКолонку("ЛицевойСчет"),
							ТаблицаКоличествоСвободныхID[0].КоличествоСвободныхID);
	
КонецФункции

// Получает с сервиса необходимое количество новых идентификаторов и присваивает идентификаторы лицевым счетам.
//
Функция ПолучитьИЗаписатьIDДляЛицевыхСчетов(МассивЛС, КоличествоЛСБезID, КоличествоСвободныхID, СведенияОбОшибке)
	
	Возврат ПодготовитьIDДляЛицевыхСчетов(КоличествоЛСБезID, КоличествоСвободныхID, СведенияОбОшибке)
	      И ПрисвоитьIDЛицевымСчетам(МассивЛС, СведенияОбОшибке);
	
КонецФункции

// Подготавливает необходимое количество идентификаторов для лицевых счетов без идентификаторов.
//
Функция ПодготовитьIDДляЛицевыхСчетов(КоличествоЛСБезID, КоличествоСвободныхID, СведенияОбОшибке)
	
	// Проверяем, хватает ли свободных идентификаторов в базе:
	// 1. Если хватает, то ничего делать не нужно.
	Если КоличествоСвободныхID >= КоличествоЛСБезID Тогда
		Возврат Истина;
	КонецЕсли;
	
	// 2. Если не хватает, то пытаемся загрузить идентификаторы с веб-сервиса. При этом:
	//     - Получение идентификаторов осуществляется равными порциями (партиями).
	//     - Для избежания проблем с соединением предусмотрено использование повторной
	//           попытки получения идентификаторов.
	//     - Если получение идентификаторов не удалось выполнить, то возвращаем Ложь.
	КоличествоIDДляЗагрузки = КоличествоЛСБезID - КоличествоСвободныхID;
	КоличествоIDВПартии     = ПолучитьКоличествоОдновременноЗагружаемыхID();
	КоличествоПартий        = Цел(КоличествоIDДляЗагрузки / КоличествоIDВПартии)
	                          + ?(КоличествоIDДляЗагрузки % КоличествоIDВПартии = 0, 0, 1);
	
	// Получаем с сервера массив идентификаторов.
	МассивID = ПолучитьМассивID(КоличествоПартий, КоличествоIDВПартии, СведенияОбОшибке);
	Если МассивID = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЗаписатьIDВБазу(МассивID, СведенияОбОшибке);
	
КонецФункции

// Получает массив идентификаторов с сервиса.
//
Функция ПолучитьМассивID(КоличествоПартий, КоличествоIDВПартии = 200, СведенияОбОшибке)
	
	// На случай неудачного соединения предусмотрена возможность повторной
	// попытки загрузки идентификаторов в пределах заданного количества раз.
	КоличествоПопытокПолученияID = ПолучитьКоличествоПопытокПолученияID();
	
	СчетчикПопыток = 0;
	
	Пока СчетчикПопыток < КоличествоПопытокПолученияID Цикл
		
		МассивID = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ПолучитьМассивIDССервера(КоличествоПартий, КоличествоIDВПартии, СведенияОбОшибке);
		Если НЕ МассивID = Неопределено Тогда
			Возврат МассивID;
		КонецЕсли;
		
		СчетчикПопыток = СчетчикПопыток + 1;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Записывает полученные с сервиса идентификаторы.
//
Функция ЗаписатьIDВБазу(МассивID, СведенияОбОшибке)
	
	Попытка
		НаборЗаписей = РегистрыСведений.УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.СоздатьНаборЗаписей();
		
		Для каждого ТекID из МассивID Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Идентификатор = ТекID;
		КонецЦикла;
		
		НаборЗаписей.Записать(Ложь);
	Исключение
		СведенияОбОшибке = "Не удалось записать идентификаторы лицевых счетов в базу.";
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Присваивает идентификаторы лицевым счетам.
//
Функция ПрисвоитьIDЛицевымСчетам(МассивЛС, СведенияОбОшибке)
	
	Попытка
		// Так как будет выполнено 2 операции записи наборов записей, то выполняем их в транзакции.
		НачатьТранзакцию();
		
		// Получаем набор свободных идентификаторов и очищаем соответствующий набор записей.
		НаборИдентификаторов = РегистрыСведений.УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.СоздатьНаборЗаписей();
		НаборИдентификаторов.Отбор.ЛицевойСчет.Установить(Справочники.КВП_ЛицевыеСчета.ПустаяСсылка());
		НаборИдентификаторов.Прочитать();
		
		ТаблицаИдентификаторов = НаборИдентификаторов.Выгрузить();
		
		НаборИдентификаторов.Очистить();
		НаборИдентификаторов.Записать();
		
		// Дополняем таблицу свободных идентификаторов лицевыми счетами
		// и записываем полученную таблицу в базу.
		ТекСтрокаНабораСвободныхID = 0;
		
		Для каждого ТекЛС из МассивЛС Цикл
			ТаблицаИдентификаторов[ТекСтрокаНабораСвободныхID].ЛицевойСчет = ТекЛС;
			ТекСтрокаНабораСвободныхID = ТекСтрокаНабораСвободныхID + 1;
		КонецЦикла;
		
		НаборИдентификаторов = РегистрыСведений.УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.СоздатьНаборЗаписей();
		НаборИдентификаторов.Загрузить(ТаблицаИдентификаторов);
		
		НаборИдентификаторов.Записать(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		СведенияОбОшибке = "Не удалось записать присвоить лицевым счетам идентификаторы.";
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Формирует таблицу соответствия идентификаторов лицевым счетам.
//
Функция ПолучитьТаблицуIDЛицевыхСчетов(МассивЛС)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.ЛицевойСчет,
	|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.Идентификатор
	|ИЗ
	|	РегистрСведений.УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении КАК УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении
	|ГДЕ
	|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.ЛицевойСчет В(&МассивЛС)";
	
	Запрос.УстановитьПараметр("МассивЛС", МассивЛС);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает количество идентификаторов в одной загружаемой партии.
//
Функция ПолучитьКоличествоОдновременноЗагружаемыхID()
	
	Возврат 200;
	
КонецФункции

// Возвращает максимальное количество попыток получения идентификаторов с сервиса. Нужно при проблемах с соединением.
//
Функция ПолучитьКоличествоПопытокПолученияID()
	
	Возврат 2;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ И ОБРАБОТКИ ФАЙЛОВ ОБМЕНА

#Область ФункцииДляФормированияИОбработкиФайловОбмена

// Загружает данные из XML-файла в структуру.
//
Функция ПолучитьДанныеИзXML(ИмяФайлаXML, СведенияОбОшибке) Экспорт
	
	Попытка
		// Открытие и считывание данных из файла.
		Файл = Новый ЧтениеXML;
		Файл.ОткрытьФайл(ИмяФайлаXML);
		
		Построитель = Новый ПостроительDOM;
		ДокDOM = Построитель.Прочитать(Файл);
		
		Файл.Закрыть();
	Исключение
		// Ошибка при открытии.
		СведенияОбОшибке = ОписаниеОшибки();
		
		Возврат Неопределено;
	КонецПопытки;
	
	ЗагруженныеДанные = Неопределено;
	
	Попытка
		
		// Пытаемся найти именованный элемент. Если не находим, то пытаемся найти в дочерних тегах корневого.
		Попытка
			ЗагруженныеДанные = ПреобразоватьВсеДанныеИзXMLВМассив(ДокDOM, СведенияОбОшибке);
		Исключение
			ЗагруженныеДанные = ПреобразоватьВсеДанныеИзXMLВМассив(ДокDOM.ПервыйДочерний, СведенияОбОшибке);
		КонецПопытки;
		
	Исключение
		СведенияОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ЗагруженныеДанные;
	
КонецФункции // ПолучитьДанныеИзXML()

// Преобразовывает данные из XML файла в массив данных. Это нужно для загрузки данных по нескольким
// организациям одновременно. Сведения по каждой из организаций будут находитья в отдельных элементах
// массива.
//
Функция ПреобразоватьВсеДанныеИзXMLВМассив(УзелРодитель, СведенияОбОшибке)
	
	МассивЗагруженныхДанных = Новый Массив;
	
	Для каждого ТекУзел из УзелРодитель.ДочерниеУзлы Цикл
		
		// Если атрибут типа файла не найден, то должно возникать исключение. Так и должно работать.
		// При загрузке оплат в корневом теге данного атрибута не будет, поэтому при исключении
		// функция будет вызвана повторно, но уже для дочерних узлов корневого тега.
		ТипФайла = НРег(ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("filetype").Значение);
		
		ЗагруженныеДанные = ПреобразоватьДанныеИзXMLВСтруктуру(ТекУзел, ТипФайла, СведенияОбОшибке);
		
		Если ЗагруженныеДанные = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			МассивЗагруженныхДанных.Добавить(ЗагруженныеДанные);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивЗагруженныхДанных;
	
КонецФункции

// Выполняет преобразование данных из XML в структуру.
//
Функция ПреобразоватьДанныеИзXMLВСтруктуру(УзелКорневой, ТипФайла, СведенияОбОшибке)
	
	Попытка
		
		СтруктураДанных = Новый Структура;
		
		// Формирование структуры данных.
		Если ТипФайла = "meters" Тогда
			
			СтруктураДанных.Вставить("filedate", XMLЗначение(Тип("Дата"), УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("filedate").Значение));
			СтруктураДанных.Вставить("filetype", ТипФайла);
			
			// Таблица л/с.
			СтруктураДанных.Вставить("meters", Новый ТаблицаЗначений);
			СтруктураДанных.meters.Колонки.Добавить("id",     Новый ОписаниеТипов("Строка"));
			СтруктураДанных.meters.Колонки.Добавить("name",   Новый ОписаниеТипов("Строка"));
			СтруктураДанных.meters.Колонки.Добавить("values", Новый ОписаниеТипов("Число"));
			СтруктураДанных.meters.Колонки.Добавить("date",   Новый ОписаниеТипов("Дата"));
			СтруктураДанных.meters.Колонки.Добавить("val1",   Новый ОписаниеТипов("Число"));
			СтруктураДанных.meters.Колонки.Добавить("val2",   Новый ОписаниеТипов("Число"));
			СтруктураДанных.meters.Колонки.Добавить("val3",   Новый ОписаниеТипов("Число"));
			
			// Дочерними являются только узлы "PersAssoc", проходим по ним всем в цикле.
			Для Каждого ТекУзел ИЗ УзелКорневой.ДочерниеУзлы Цикл
				
				Если УзелЯвляетсяТегом(ТекУзел) Тогда
					
					СтрокаПУ = СтруктураДанных.meters.Добавить();
					
					// ПУ.
					СтрокаПУ.id   = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("id").Значение;
					СтрокаПУ.name = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("name").Значение;
					
					Тарифность = XMLЗначение(Тип("Число"), ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("values").Значение);
					
					СтрокаПУ.values = Тарифность;
					СтрокаПУ.date   = XMLЗначение(Тип("Дата"), ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("date").Значение);
					СтрокаПУ.val1   = XMLЗначение(Тип("Число"), ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("val1").Значение);
					
					Если НЕ Тарифность = 1 Тогда
						СтрокаПУ.val2 = XMLЗначение(Тип("Число"), ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("val2").Значение);
					КонецЕсли;
					
					Если Тарифность = 3 Тогда
						СтрокаПУ.val3 = XMLЗначение(Тип("Число"), ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("val3").Значение);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипФайла = "payments" Тогда
			
			СтруктураДанных.Вставить("inn",         УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("inn").Значение);
			СтруктураДанных.Вставить("Организация", Справочники.Организации.НайтиОрганизацию(СтруктураДанных.inn));
			СтруктураДанных.Вставить("filedate",    XMLЗначение(Тип("Дата"), УзелКорневой.Атрибуты.ПолучитьИменованныйЭлемент("filedate").Значение));
			СтруктураДанных.Вставить("filetype",    ТипФайла);
			
			СтруктураДанных.Вставить("payments", Новый ТаблицаЗначений);
			СтруктураДанных.payments.Колонки.Добавить("acc_id",                         Новый ОписаниеТипов("Строка"));
			СтруктураДанных.payments.Колонки.Добавить("date",                           Новый ОписаниеТипов("Дата"));
			СтруктураДанных.payments.Колонки.Добавить("sum",                            Новый ОписаниеТипов("Число"));
			СтруктураДанных.payments.Колонки.Добавить("fee",                            Новый ОписаниеТипов("Число"));
			СтруктураДанных.payments.Колонки.Добавить("ps",                             Новый ОписаниеТипов("Строка"));
			СтруктураДанных.payments.Колонки.Добавить("insurance_included",             Новый ОписаниеТипов("Строка"));
			СтруктураДанных.payments.Колонки.Добавить("is_overhaul",                    Новый ОписаниеТипов("Булево"));
			СтруктураДанных.payments.Колонки.Добавить("ИспользуетсяРаздельныйУчетПоКР", Новый ОписаниеТипов("Булево"));
			
			Для Каждого ТекУзел ИЗ УзелКорневой.ДочерниеУзлы Цикл
				
				Если УзелЯвляетсяТегом(ТекУзел) Тогда
					
					СтрокаОплаты = СтруктураДанных.payments.Добавить();
					СтрокаОплаты.acc_id = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("acc_id").Значение;
					СтрокаОплаты.date   = XMLЗначение(Тип("Дата"), ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("date").Значение);
					СтрокаОплаты.sum    = XMLЗначение(Тип("Число"), ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("sum").Значение);
					СтрокаОплаты.ps     = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("ps").Значение;
					
					Если ТекУзел.ЕстьАтрибут("fee") Тогда
						
						КомиссияАтрибут = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("fee");
						Если НЕ КомиссияАтрибут = Неопределено Тогда
							СтрокаОплаты.fee = XMLЗначение(Тип("Число"), КомиссияАтрибут.Значение);
						КонецЕсли;
					КонецЕсли;
					
					Если ТекУзел.ЕстьАтрибут("insurance_included") Тогда
						
						СтрахованиеАтрибут = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("insurance_included");
						Если Не СтрахованиеАтрибут = Неопределено Тогда
							СтрокаОплаты.insurance_included = СтрахованиеАтрибут.Значение;
						КонецЕсли;
					КонецЕсли;
					
					Если ТекУзел.ЕстьАтрибут("is_overhaul") Тогда
						
						СтрокаОплаты.ИспользуетсяРаздельныйУчетПоКР = Истина;
						
						ОплатаКапРемонтАтрибут = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент("is_overhaul");
						Если Не ОплатаКапРемонтАтрибут = Неопределено Тогда
							СтрокаОплаты.is_overhaul = (XMLЗначение(Тип("Число"), ОплатаКапРемонтАтрибут.Значение) = 1);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Возврат СтруктураДанных;
		
	Исключение
		
		СведенияОбОшибке = ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

// Проверяет узел на то, что он является тегом.
//
Функция УзелЯвляетсяТегом(Узел)
	
	Возврат УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.УзелЯвляетсяТегом(Узел);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ ДАННЫХ В БАЗУ

#Область ПроцедурыЗагрузкиДанныхВБазу

// Загружает данные из сформированной ранее структуры данных.
//
// Параметры
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена данными
//  СтруктураДанных – структура, хранящая данные для загрузки.
//  НастройкиОбмена - элемент справочника "Настройки обмена данными с сайтом".
//  СведенияОбОшибке - Строка - описание проблем при обмене
//
//  Примечание:
//   accexistence - данные о наличии аккаунтов на сайте
//   meters - показания по счетчикам
//   payments - платежи, проведенные через "Монета" и "Payu"
//
Процедура ЗагрузитьДанныеВБазу(СтруктураДанных, СведенияОбОшибке, ПроводитьСформированныеДокументы = Истина) Экспорт
	
	Если НЕ ТипЗнч(СтруктураДанных) = Тип("Структура") ИЛИ НЕ СтруктураДанных.Свойство("filetype") Тогда
		СведенияОбОшибке = "Неизвестный формат файла.";
		Возврат;
	КонецЕсли;
	
	ТипЗагрузки = НРег(СтруктураДанных.filetype);
	
	Если ТипЗагрузки = "meters" Тогда
		ЗагрузитьПоказанияСчетчиковВБазу(СтруктураДанных, СведенияОбОшибке, ПроводитьСформированныеДокументы);
	ИначеЕсли ТипЗагрузки = "payments" Тогда
		ЗагрузитьОплатыВБазу(СтруктураДанных, СведенияОбОшибке, ПроводитьСформированныеДокументы);
	Иначе
		СведенияОбОшибке = "Неизвестный формат файла.";
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДанныеВБазу()

// Загружает показания счетчиков (ИПУ).
//
// Параметры
//  СтруктураДанных – структура, хранящая сведения о показаниях ИПУ.
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена данными
//
// Примечание:
//  Описание структуры загрузки см. в функции ПолучитьДанныеИзXML().
//
Процедура ЗагрузитьПоказанияСчетчиковВБазу(СтруктураДанных, СведенияОбОшибке, ПроводитьСформированныеДокументы)
	
	СтруктураОбмена = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьНастройкуАвтоматическогоОбменаСМобильнымПриложением();
	
	ЗагружатьПоЗданиям = Ложь;
	ЗагружатьПоУслугам = Ложь;
	
	Если СтруктураОбмена.Свойство("ЗагружатьПоказанияПУПоЗданиям") Тогда
		ЗагружатьПоЗданиям = СтруктураОбмена.ЗагружатьПоказанияПУПоЗданиям;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("ЗагружатьПоказанияПУПоУслугам") Тогда
		ЗагружатьПоУслугам = СтруктураОбмена.ЗагружатьПоказанияПУПоУслугам;
	КонецЕсли;
	
	ИсточникДанных            = "ЖКХ: Личный кабинет";
	ЗагружатьНулевыеПоказания = Ложь;
	
	// Запрос для определения соответствия между данными выгрузки и данными базы.
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДляЗагрузкиПоказанийСчетчиков();
	
	Запрос.УстановитьПараметр("Дата",     СтруктураДанных.filedate);
	Запрос.УстановитьПараметр("Счетчики", СтруктураДанных.meters);
	
	ТаблицаПоказаний = Запрос.Выполнить().Выгрузить();
	
	УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.СформироватьДокументыВводаПоказаний(ТаблицаПоказаний, ЗагружатьПоЗданиям, ЗагружатьПоУслугам, ПроводитьСформированныеДокументы, ИсточникДанных, ЗагружатьНулевыеПоказания);
	
КонецПроцедуры // ЗагрузитьПоказанияСчетчиковВБазу()

// Загружает показания счетчиков (ИПУ).
//
// Параметры
//  СтруктураДанных – структура, хранящая сведения о показаниях ИПУ.
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена данными
//
// Примечание:
//  Описание структуры загрузки см. в функции ПолучитьДанныеИзXML().
//
Процедура ЗагрузитьОплатыВБазу(СтруктураДанных, СведенияОбОшибке, ПроводитьСформированныеДокументы)
	
	ТаблицаОплат = СтруктураДанных.payments;
	
	Если Не ТаблицаОплат.Количество() = 0 Тогда
		
		УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ЗагрузитьРеестрПлатежей4(СтруктураДанных, СтруктураДанных.Организация, ПроводитьСформированныеДокументы, Истина);
		
		ТаблицаОплат.Сортировать("date Убыв");
		ДатаПоследнейОплатыИзФайла = ТаблицаОплат[0].date;
		
		НастройкиОбмена = ПолучитьНастройкуАвтоматическогоОбменаСМобильнымПриложением();
		ДатаПоследнейЗагруженнойОплаты = НастройкиОбмена.ДатаПоследнейЗагруженнойОплаты;
		
		Если ДатаПоследнейОплатыИзФайла > ДатаПоследнейЗагруженнойОплаты Тогда
			НастройкиОбмена.ДатаПоследнейЗагруженнойОплаты = ДатаПоследнейОплатыИзФайла;
			УстановитьНастройкуАвтоматическогоОбменаДаннымиСМобильнымПриложением(НастройкиОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьОплатыВБазу()

// Содержит текст запроса на получение данных о счетчиках и их сопоставление с загруженными из моб. приложения.
//
Функция ПолучитьТекстЗапросаДляЗагрузкиПоказанийСчетчиков() Экспорт
	
	// Запрос используется для обмена данными с сайтом и с мобильным приложением "ЖКХ: Личный кабинет".
	// Следует обратить внимание на то, что условие "Счетчик.ВидУслуги В (&СписокУслуг)" при
	// обмене с "ЖКХ: Личный кабинет" не должно использоваться, поэтому заменяется на пустые строки.
	
	ТекстЗапроса = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьТекстЗапросаДляЗагрузкиПоказанийСчетчиков();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Счетчик.ВидУслуги В (&СписокУслуг)", "");
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПОЛУЧЕНИЯ И ОБРАБОТКИ ДАННЫХ ИЗ БАЗЫ

#Область ФункцииПолученияИОбработкиДанныхИзБазы

// Формирует настройки, необходимые для сбора данных.
//
Функция ПолучитьСтруктурыНастроекКвитанций(ТаблицаЛицевыхСчетов, МесяцОбмена, СведенияОбОшибке, КоличествоПопытокСбораДанных = 0) Экспорт
	
	СтруктураНастроек = Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПолучитьСтруктуруНастроекСбораДанныхДляОбменаСМобильнымПриложениемЖКХЛичныйКабинет(МесяцОбмена, "ОбменССайтомЖКХ4", ТаблицаЛицевыхСчетов, СведенияОбОшибке);
	
	Возврат СтруктураНастроек;
	
КонецФункции // ПолучитьСтруктурыНастроекКвитанций

// Подготавливает структуру настроек при выгрузке сведений по л/с по частям.
//
Процедура ПодготовитьСтруктуруНастроекДляТекущейВыгрузки(СтруктураНастроек, ТаблицаВсехЛС, КоличествоЛСВФайле = 3000, ТаблицаЛСДляВыгрузки = Неопределено) Экспорт
	
	// Получаем л/с, по которым будем выгружать за итерацию.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВсехЛС.Организация КАК Организация,
	|	ТаблицаВсехЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаВсехЛС.КодЛицевогоСчета КАК КодЛицевогоСчета,
	|	ТаблицаВсехЛС.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	ТаблицаВсехЛС.НаименованиеЛицевогоСчета КАК НаименованиеЛицевогоСчета,
	|	ТаблицаВсехЛС.Помещение КАК Помещение,
	|	ТаблицаВсехЛС.КодПомещения КАК КодПомещения,
	|	ТаблицаВсехЛС.НаименованиеПомещения КАК НаименованиеПомещения,
	|	ТаблицаВсехЛС.Подъезд КАК Подъезд,
	|	ТаблицаВсехЛС.Здание КАК Здание,
	|	ТаблицаВсехЛС.КодЗдания КАК КодЗдания,
	|	ТаблицаВсехЛС.ТипПомещения КАК ТипПомещения,
	|	ТаблицаВсехЛС.ЖилойФондПомещения КАК ЖилойФондПомещения,
	|	ТаблицаВсехЛС.ИдентификаторЖКХЛичныйКабинет КАК Идентификатор,
	|	ТаблицаВсехЛС.ИдентификаторЖКХЛичныйКабинет КАК ИдентификаторЖКХЛичныйКабинет,
	|	ТаблицаВсехЛС.ЕЛСвГИСЖКХ КАК ЕЛСвГИСЖКХ,
	|	ТаблицаВсехЛС.ИдентификаторЖКУ КАК ИдентификаторЖКУ,
	|	ТаблицаВсехЛС.ИдентификаторЖКУКапРемонт КАК ИдентификаторЖКУКапРемонт,
	|	ТаблицаВсехЛС.ЕЛСвГИСЖКХКапРемонт КАК ЕЛСвГИСЖКХКапРемонт,
	|	ТаблицаВсехЛС.ИдентификаторПДОсн КАК ИдентификаторПДОсн,
	|	ТаблицаВсехЛС.ИдентификаторПДКапРемонт КАК ИдентификаторПДКапРемонт,
	|	ТаблицаВсехЛС.ИдентификаторПДЕдиный КАК ИдентификаторПДЕдиный
	|ПОМЕСТИТЬ втТаблицаВсехЛС
	|ИЗ
	|	&ТаблицаВсехЛС КАК ТаблицаВсехЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	втТаблицаВсехЛС.Организация КАК Организация,
	|	втТаблицаВсехЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаВсехЛС.КодЛицевогоСчета КАК КодЛицевогоСчета,
	|	втТаблицаВсехЛС.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	втТаблицаВсехЛС.НаименованиеЛицевогоСчета КАК НаименованиеЛицевогоСчета,
	|	втТаблицаВсехЛС.Помещение КАК Помещение,
	|	втТаблицаВсехЛС.КодПомещения КАК КодПомещения,
	|	втТаблицаВсехЛС.НаименованиеПомещения КАК НаименованиеПомещения,
	|	втТаблицаВсехЛС.Подъезд КАК Подъезд,
	|	втТаблицаВсехЛС.Здание КАК Здание,
	|	втТаблицаВсехЛС.КодЗдания КАК КодЗдания,
	|	втТаблицаВсехЛС.ТипПомещения КАК ТипПомещения,
	|	втТаблицаВсехЛС.ЖилойФондПомещения КАК ЖилойФондПомещения,
	|	втТаблицаВсехЛС.ИдентификаторЖКХЛичныйКабинет КАК Идентификатор,
	|	втТаблицаВсехЛС.ИдентификаторЖКХЛичныйКабинет КАК ИдентификаторЖКХЛичныйКабинет,
	|	втТаблицаВсехЛС.ЕЛСвГИСЖКХ КАК ЕЛСвГИСЖКХ,
	|	втТаблицаВсехЛС.ИдентификаторЖКУ КАК ИдентификаторЖКУ,
	|	втТаблицаВсехЛС.ИдентификаторЖКУКапРемонт КАК ИдентификаторЖКУКапРемонт,
	|	втТаблицаВсехЛС.ЕЛСвГИСЖКХКапРемонт КАК ЕЛСвГИСЖКХКапРемонт,
	|	втТаблицаВсехЛС.ИдентификаторПДОсн КАК ИдентификаторПДОсн,
	|	втТаблицаВсехЛС.ИдентификаторПДКапРемонт КАК ИдентификаторПДКапРемонт,
	|	втТаблицаВсехЛС.ИдентификаторПДЕдиный КАК ИдентификаторПДЕдиный
	|ПОМЕСТИТЬ втЛСДляВыгрузки
	|ИЗ
	|	втТаблицаВсехЛС КАК втТаблицаВсехЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛСДляВыгрузки.Организация КАК Организация,
	|	втЛСДляВыгрузки.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛСДляВыгрузки.КодЛицевогоСчета КАК КодЛицевогоСчета,
	|	втЛСДляВыгрузки.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	втЛСДляВыгрузки.НаименованиеЛицевогоСчета КАК НаименованиеЛицевогоСчета,
	|	втЛСДляВыгрузки.Помещение КАК Помещение,
	|	втЛСДляВыгрузки.КодПомещения КАК КодПомещения,
	|	втЛСДляВыгрузки.НаименованиеПомещения КАК НаименованиеПомещения,
	|	втЛСДляВыгрузки.Подъезд КАК Подъезд,
	|	втЛСДляВыгрузки.Здание КАК Здание,
	|	втЛСДляВыгрузки.КодЗдания КАК КодЗдания,
	|	втЛСДляВыгрузки.ТипПомещения КАК ТипПомещения,
	|	втЛСДляВыгрузки.ЖилойФондПомещения КАК ЖилойФондПомещения,
	|	втЛСДляВыгрузки.ИдентификаторЖКХЛичныйКабинет КАК Идентификатор,
	|	втЛСДляВыгрузки.ИдентификаторЖКХЛичныйКабинет КАК ИдентификаторЖКХЛичныйКабинет,
	|	втЛСДляВыгрузки.ЕЛСвГИСЖКХ КАК ЕЛСвГИСЖКХ,
	|	втЛСДляВыгрузки.ИдентификаторЖКУ КАК ИдентификаторЖКУ,
	|	втЛСДляВыгрузки.ИдентификаторЖКУКапРемонт КАК ИдентификаторЖКУКапРемонт,
	|	втЛСДляВыгрузки.ЕЛСвГИСЖКХКапРемонт КАК ЕЛСвГИСЖКХКапРемонт,
	|	втЛСДляВыгрузки.ИдентификаторПДОсн КАК ИдентификаторПДОсн,
	|	втЛСДляВыгрузки.ИдентификаторПДКапРемонт КАК ИдентификаторПДКапРемонт,
	|	втЛСДляВыгрузки.ИдентификаторПДЕдиный КАК ИдентификаторПДЕдиный
	|ИЗ
	|	втЛСДляВыгрузки КАК втЛСДляВыгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаВсехЛС.Организация КАК Организация,
	|	втТаблицаВсехЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаВсехЛС.КодЛицевогоСчета КАК КодЛицевогоСчета,
	|	втТаблицаВсехЛС.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	втТаблицаВсехЛС.НаименованиеЛицевогоСчета КАК НаименованиеЛицевогоСчета,
	|	втТаблицаВсехЛС.Помещение КАК Помещение,
	|	втТаблицаВсехЛС.КодПомещения КАК КодПомещения,
	|	втТаблицаВсехЛС.НаименованиеПомещения КАК НаименованиеПомещения,
	|	втТаблицаВсехЛС.Подъезд КАК Подъезд,
	|	втТаблицаВсехЛС.Здание КАК Здание,
	|	втТаблицаВсехЛС.КодЗдания КАК КодЗдания,
	|	втТаблицаВсехЛС.ТипПомещения КАК ТипПомещения,
	|	втТаблицаВсехЛС.ЖилойФондПомещения КАК ЖилойФондПомещения,
	|	втТаблицаВсехЛС.ИдентификаторЖКХЛичныйКабинет КАК Идентификатор,
	|	втТаблицаВсехЛС.ИдентификаторЖКХЛичныйКабинет КАК ИдентификаторЖКХЛичныйКабинет,
	|	втТаблицаВсехЛС.ЕЛСвГИСЖКХ КАК ЕЛСвГИСЖКХ,
	|	втТаблицаВсехЛС.ИдентификаторЖКУ КАК ИдентификаторЖКУ,
	|	втТаблицаВсехЛС.ИдентификаторЖКУКапРемонт КАК ИдентификаторЖКУКапРемонт,
	|	втТаблицаВсехЛС.ЕЛСвГИСЖКХКапРемонт КАК ЕЛСвГИСЖКХКапРемонт,
	|	втЛСДляВыгрузки.ИдентификаторПДОсн КАК ИдентификаторПДОсн,
	|	втЛСДляВыгрузки.ИдентификаторПДКапРемонт КАК ИдентификаторПДКапРемонт,
	|	втЛСДляВыгрузки.ИдентификаторПДЕдиный КАК ИдентификаторПДЕдиный
	|ИЗ
	|	втТаблицаВсехЛС КАК втТаблицаВсехЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛСДляВыгрузки КАК втЛСДляВыгрузки
	|		ПО втТаблицаВсехЛС.ЛицевойСчет = втЛСДляВыгрузки.ЛицевойСчет
	|ГДЕ
	|	втЛСДляВыгрузки.ЛицевойСчет ЕСТЬ NULL";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "1000", XMLСтрока(Цел(КоличествоЛСВФайле)));
	
	Запрос.УстановитьПараметр("ТаблицаВсехЛС", ТаблицаВсехЛС);
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаЛСДляВыгрузки = Результат[2].Выгрузить();
	ТаблицаВсехЛС        = Результат[3].Выгрузить();
	
	// Отбираем данные для текущей структуры настроек.
	Для каждого ТекОрганизация из СтруктураНастроек.ТаблицаИндивидуальныхНастроек Цикл
		
		СтрокиОрганизации = ТаблицаЛСДляВыгрузки.НайтиСтроки(Новый Структура("Организация", ТекОрганизация.Организация));
		
		ТекОрганизация.СтруктураНастроек.ТаблицаОбъектов = ТаблицаЛСДляВыгрузки.Скопировать(СтрокиОрганизации);
		
		ТекОрганизация.СтруктураНастроек.СписокЛицевыхСчетов.ЗагрузитьЗначения(ТекОрганизация.СтруктураНастроек.ТаблицаОбъектов.ВыгрузитьКолонку("ЛицевойСчет"));
		ТекОрганизация.СтруктураНастроек.СписокЗданий.ЗагрузитьЗначения(ТекОрганизация.СтруктураНастроек.ТаблицаОбъектов.ВыгрузитьКолонку("Здание"));
		ТекОрганизация.СтруктураНастроек.СписокПодъездов.ЗагрузитьЗначения(ТекОрганизация.СтруктураНастроек.ТаблицаОбъектов.ВыгрузитьКолонку("Подъезд"));
		ТекОрганизация.СтруктураНастроек.СписокПомещений.ЗагрузитьЗначения(ТекОрганизация.СтруктураНастроек.ТаблицаОбъектов.ВыгрузитьКолонку("Помещение"));
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует структуру с данными для выгрузки квитанций.
//
Процедура ПолучитьСтруктуруСДаннымиДляКвитанции(СтруктураНастроекВходящая) Экспорт
	
	НастройкиОбмена                    = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьНастройкуАвтоматическогоОбменаСМобильнымПриложением();
	ЧислоОкончанияПроведенияНачислений = НастройкиОбмена.ЧислоОкончанияПроведенияНачислений;
	МесяцОкончанияПроведенияНачислений = НастройкиОбмена.МесяцОкончанияПроведенияНачислений;
	
	СтруктураОбщихНастроек = СтруктураНастроекВходящая.СтруктураОбщихНастроек;
	
	СтруктураНастроек = Новый Структура;
	
	УПЖКХ_ОбщегоНазначенияКлиентСервер.ЗаполнитьКлючиСтруктурыНаОснованииДругойСтруктуры(СтруктураНастроек, СтруктураОбщихНастроек);
	
	Если СтруктураНастроекВходящая.ТаблицаИндивидуальныхНастроек.Количество() > 0 Тогда
		
		УПЖКХ_ОбщегоНазначенияКлиентСервер.ЗаполнитьКлючиСтруктурыНаОснованииДругойСтруктуры(СтруктураНастроек, СтруктураНастроекВходящая.ТаблицаИндивидуальныхНастроек[0].СтруктураНастроек);
		
	КонецЕсли;
	
	МодульВеб = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных;
	МодульПД  = УПЖКХ_ПечатьКвитанцийСервер;
	
	Для каждого ТекОрганизация из СтруктураНастроекВходящая.ТаблицаИндивидуальныхНастроек Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, СтруктураОбщихНастроек);
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, ТекОрганизация.СтруктураНастроек);
		
		СтруктураНастроек.Организация = ТекОрганизация.Организация;
		
		ОбщиеДанные = Новый Структура;
		
		// Записываем в структуру сведения об основной организации и об исполнителе расчетов.
		МодульПД.ПодготовитьСведенияОбОрганизациях(ОбщиеДанные, СтруктураНастроек);
		
		// Подготавливаем структуру с таблицами данных о лицевых счетах.
		СтруктураПлательщиков = МодульПД.ПолучитьСтруктуруСДаннымиОПлательщиках(СтруктураНастроек);
		
		// Подготавливаем структуру с таблицами данных о наслениях по всем л/с.
		СтруктураОбщихТаблиц          = МодульПД.ПолучитьСтруктуруОбщихТаблиц(СтруктураНастроек);
		СтруктураОбщихТаблицОсновная  = Неопределено;
		СтруктураОбщихТаблицКапРемонт = Неопределено;
		
		// Дополняем таблицу счетчиков счетчиками, отключенными в предыдущем месяце.
		МодульВеб.ДополнитьТаблицуСчетчиковОтключеннымиСчетчиками(СтруктураОбщихТаблиц, СтруктураНастроек);
		
		Если СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
			// (ПЕНИ) Дополняем структуру общих таблиц таблицами начисления пени.
			МодульПД.ДополнитьСтруктуруОбщихТаблицТаблицамиПоПеням(СтруктураОбщихТаблиц, СтруктураНастроек);
		КонецЕсли;
		
		Если СтруктураНастроек.ПечататьКвитанциюКапРемонт Тогда
			
			Если СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" Тогда
				
				СтруктураОбщихТаблицОсновная = МодульПД.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, СтруктураНастроек.СписокУслуг);
				
			Иначе
				
				// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в основной квитанции.
				СтруктураОбщихТаблицОсновная = МодульПД.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, СтруктураНастроек.ТекущийСписокУслуг);
				
				// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в квитанции по кап ремонту.
				СтруктураОбщихТаблицКапРемонт = МодульПД.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, СтруктураНастроек.СписокУслугКапРемонт);
				
				// Меняет состав таблицы счетчиков в соответствии с настройкой выгрузки показаний.
				МодульВеб.ПерезаполнитьТаблицыСчетчиковУчитываяНастройкуВыгрузкиПоказаний(СтруктураОбщихТаблицКапРемонт, СтруктураНастроек);
				
			КонецЕсли;
			
		Иначе
			
			СтруктураОбщихТаблицОсновная = МодульПД.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, СтруктураНастроек.ТекущийСписокУслуг);
			
		КонецЕсли;
		
		// Меняет состав таблицы счетчиков в соответствии с настройкой выгрузки показаний.
		МодульВеб.ПерезаполнитьТаблицыСчетчиковУчитываяНастройкуВыгрузкиПоказаний(СтруктураОбщихТаблицОсновная, СтруктураНастроек);
		
		ТекОрганизация.СтруктураПараметров = Новый Структура;
		ТекОрганизация.СтруктураПараметров.Вставить("ВыгружатьНачисления",         Истина);
		ТекОрганизация.СтруктураПараметров.Вставить("ВыгружатьПерсональныеДанные", СтруктураНастроек.ВыгружатьПерсональныеДанные);
		
		ЗаполнитьОсновныеСведенияОрганизации(ТекОрганизация.СтруктураПараметров, СтруктураНастроек, ОбщиеДанные);
		
		МодульВеб.ЗаполнитьСведенияОбОграниченииВводаПоказаний(ТекОрганизация.СтруктураПараметров, СтруктураНастроек);
		ЗаполнитьСведенияОНастройкахУпрощеннойАДС(ТекОрганизация.СтруктураПараметров, СтруктураНастроек);
		МодульВеб.ЗаполнитьОбщиеСведенияОПоставщиках(ТекОрганизация.СтруктураПараметров, СтруктураНастроек, СтруктураОбщихТаблиц, ОбщиеДанные);
		МодульВеб.ЗаполнитьСведенияОЗданияхДляФайла(ТекОрганизация.СтруктураПараметров, СтруктураПлательщиков, СтруктураОбщихТаблиц, СтруктураНастроек);
		
		// Добавляем услуги без начислений за отчетный период.
		
		// Основная квитанция.
		СтруктураОбщихТаблицОсновная.Вставить("ТаблицаУслугБезНачислений", МодульВеб.СформироватьТаблицуУслугБезНачисленийКвитанцияОсновная(СтруктураОбщихТаблицОсновная, СтруктураНастроек));
		
		Если СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
			СтруктураОбщихТаблицОсновная.Вставить("ТаблицаПениБезНачислений", МодульВеб.СформироватьТаблицуУслугБезНачисленийКвитанцияПени(СтруктураОбщихТаблицОсновная, СтруктураНастроек));
		КонецЕсли;
		
		// Квитанция кап. ремонт.
		Если СтруктураНастроек.ПечататьКвитанциюКапРемонт И Не СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" Тогда
			
			СтруктураОбщихТаблицКапРемонт.Вставить("ТаблицаУслугБезНачислений", МодульВеб.СформироватьТаблицуУслугБезНачисленийКвитанцияОсновная(СтруктураОбщихТаблицКапРемонт, СтруктураНастроек));
			
			Если СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
				СтруктураОбщихТаблицКапРемонт.Вставить("ТаблицаПениБезНачислений", МодульВеб.СформироватьТаблицуУслугБезНачисленийКвитанцияПени(СтруктураОбщихТаблицКапРемонт, СтруктураНастроек));
			КонецЕсли;
		КонецЕсли;
		
		МодульВеб.ЗаполнитьСведенияПоЛицевымСчетам(ТекОрганизация.СтруктураПараметров, СтруктураНастроек, СтруктураОбщихТаблиц, СтруктураОбщихТаблицОсновная, 
										 СтруктураОбщихТаблицКапРемонт, СтруктураПлательщиков, ОбщиеДанные, Ложь);
		
		МодульВеб.ЗаполнитьДополнительныеСведенияПриВыгрузкеДанныхЗаПредыдущийПериод(ТекОрганизация.СтруктураПараметров, НастройкиОбмена, СтруктураНастроек);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет основные сведения организации.
//
Процедура ЗаполнитьОсновныеСведенияОрганизации(СтруктураВыгрузки, СтруктураНастроек, ОбщиеДанные)
	
	СтруктураВыгрузки.Вставить("name",    ОбщиеДанные.Организация);
	СтруктураВыгрузки.Вставить("inn",     ОбщиеДанные.ИННОрганизации);
	СтруктураВыгрузки.Вставить("kpp",     ОбщиеДанные.КППОрганизации);
	СтруктураВыгрузки.Вставить("bank",    СокрЛП(ОбщиеДанные.Банк));
	СтруктураВыгрузки.Вставить("rs",      ОбщиеДанные.РасчетныйСчет);
	СтруктураВыгрузки.Вставить("ks",      ОбщиеДанные.КоррСчет);
	СтруктураВыгрузки.Вставить("bik",     ОбщиеДанные.БИК);
	СтруктураВыгрузки.Вставить("address", ОбщиеДанные.ЮрАдресОрганизации);
	СтруктураВыгрузки.Вставить("phone",   ?(СтрНачинаетсяС(ОбщиеДанные.Телефон, "тел.: "), Сред(ОбщиеДанные.Телефон, 7), ОбщиеДанные.Телефон));
	СтруктураВыгрузки.Вставить("email",   ОбщиеДанные.Email);
	СтруктураВыгрузки.Вставить("site",    ОбщиеДанные.СайтОрганизации);
	СтруктураВыгрузки.Вставить("additional_info_main",     УПЖКХ_ВебИнтеграцияОбщегоНазначения.ПреобразоватьСтрокуВBase64(ОбщиеДанные.ДопИнформация,          СтруктураНастроек.КодировкаФайла));
	СтруктураВыгрузки.Вставить("additional_info_overhaul", УПЖКХ_ВебИнтеграцияОбщегоНазначения.ПреобразоватьСтрокуВBase64(ОбщиеДанные.ДопИнформацияКР,        СтруктураНастроек.КодировкаФайла));
	СтруктураВыгрузки.Вставить("annotation_main",          УПЖКХ_ВебИнтеграцияОбщегоНазначения.ПреобразоватьСтрокуВBase64(ОбщиеДанные.ПримечаниеКвитанцииОсн, СтруктураНастроек.КодировкаФайла));
	СтруктураВыгрузки.Вставить("annotation_overhaul",      УПЖКХ_ВебИнтеграцияОбщегоНазначения.ПреобразоватьСтрокуВBase64(ОбщиеДанные.ПримечаниеКвитанцииКР,  СтруктураНастроек.КодировкаФайла));
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// ЖУРНАЛ ОБМЕНА

#Область ЖурналОбмена

// Создает запись в журнале регистрации.
//
// Параметры:
//  НастройкаДоступа - СправочникСсылка.УПЖКХ_НастройкиДоступаКСайту - настройки доступа к сайту.
//  СведенияОбОшибке - Строка - сведения об ошибке (если такова имеется).
//  ВидОбмена - ПеречислениеСсылка.УПЖКХ_ВидыОбменаССайтом - вид обмена данными.
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена данными.
//  ДатаОбмена - Дата - дата совершения обмена.
//
Процедура СоздатьЗаписьЖурналаРегистрации(ФайлыОбмена, СведенияОбОшибке, ВидОбмена, ДатаОбмена = Неопределено, ВыполняетсяВАвтоматическомРежиме = Ложь) Экспорт
	
	// Если файлов несколько, то архивируем все файлы из списка в один архив.
	// Иначе файл не архивируем.
	Если ТипЗнч(ФайлыОбмена) = Тип("Массив") Тогда
		
		Если ФайлыОбмена.Количество() = 1 Тогда
			ФайлДляСохранения = ФайлыОбмена[0];
		Иначе
			ФайлДляСохранения = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПоместитьФайлыВZIP(ФайлыОбмена);
		КонецЕсли;
		
	Иначе
		ФайлДляСохранения = ФайлыОбмена;
	КонецЕсли;
	
	ДатаДляЗаписи = ?(ДатаОбмена = Неопределено, ТекущаяДата(), ДатаОбмена);
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_ЖурналОбменаСМобильнымПриложением.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаОбмена.Установить(ДатаДляЗаписи);
	НаборЗаписей.Отбор.ВидОбмена.Установить(ВидОбмена);
	НаборЗаписей.Прочитать();
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидОбмена              = ВидОбмена;
	НоваяЗапись.ДатаОбмена             = ДатаДляЗаписи;
	НоваяЗапись.Статус                 = ?(ПустаяСтрока(СведенияОбОшибке), Истина, Ложь);
	НоваяЗапись.Ошибка                 = СведенияОбОшибке;
	НоваяЗапись.ВыполненоАвтоматически = ВыполняетсяВАвтоматическомРежиме;
	
	Если ФайлДляСохранения = Неопределено Тогда
		НоваяЗапись.ЕстьФайлОбмена = Ложь;
	Иначе
		НоваяЗапись.ФайлОбмена     = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ФайлДляСохранения));
		НоваяЗапись.ЕстьФайлОбмена = Истина;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // СоздатьЗаписьЖурналаРегистрации()

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКИ УПРОЩЕННОЙ АДС

#Область НастройкиУпрощеннойАДС

// Заполняет сведения о настройках упрощенной АДС
//
// Параметры:
//  СтруктураВыгрузки	 - Структура	 - Структура с данными для выгрузки в файл
//  СтруктураНастроек	 - Структура	 - Структура с настройками
//
Процедура ЗаполнитьСведенияОНастройкахУпрощеннойАДС(СтруктураВыгрузки, СтруктураНастроек)
	
	Если СтруктураНастроек.Свойство("НастройкиУпрощеннойАДС") И СтруктураНастроек.НастройкиУпрощеннойАДС.ПриниматьСообщенияОтЖильцовНаЭлПочту Тогда
		
		СтруктураВыгрузки.Вставить("appeal_settings", Новый Структура("email,
		                                                              |topics,
		                                                              |free_topic",
		                                                              СтруктураНастроек.НастройкиУпрощеннойАДС.АдресЭлПочты,
		                                                              СтруктураНастроек.НастройкиУпрощеннойАДС.ТемыЗаявок,
		                                                              СтруктураНастроек.НастройкиУпрощеннойАДС.ЖилецМожетУказатьСвоюТему));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
