
#Область ПрограммныйИнтерфейс 

#Область ПолучениеДанныхПериодическихРегистров 

// Возвращает таблицу записей регистра.
//
// Параметры:
//		ИмяРегистра 				- Строка - имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистра.
//
// ВозвращаемоеЗначение - ТаблицаЗначений
//
Функция ТаблицаВТИмяРегистра(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено) Экспорт
	РезультатЗапроса = ВыполнитьЗапросПолученияДвиженийРегистра(ИмяРегистра, МенеджерВременныхТаблиц, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, "");
	Возврат РезультатЗапроса.Выгрузить();
КонецФункции

// Возвращает таблицу среза последних регистра.
//
// Параметры:
//		ИмяРегистра 				- Строка - имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез.
//
// Возвращаемое значение:
//		ТаблицаЗначений
//					
Функция ТаблицаВТИмяРегистраСрезПоследних(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено) Экспорт
	РезультатЗапроса = ВыполнитьЗапросПолученияСрезаРегистра(ИмяРегистра, МенеджерВременныхТаблиц, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, Истина, "");
	Возврат РезультатЗапроса.Выгрузить();	
КонецФункции

// Создает временную таблицу записей регистра в менеджере временных таблиц, переданном в качестве параметра.
//
// Параметры:
//		ИмяРегистра 				- Строка - имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистра.
//		ИмяРезультирующейТаблицы 	- Строка - имя создаваемой временной таблицы, если не задано, то
//										имя результирующей таблицы будет сформировано каК ВТ<ИмяРегистра>.
//					
Процедура СоздатьВТИмяРегистра(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено) Экспорт
	ВыполнитьЗапросПолученияДвиженийРегистра(ИмяРегистра, МенеджерВременныхТаблиц, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяРезультирующейТаблицы)	
КонецПроцедуры

// Возвращает таблицу периодов регистра 
//
// Параметры:
//		ИмяРегистра 				- Строка - имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистра.
//		
// Возвращаемое значение 
//	ТаблицаЗначений
//
Функция ТаблицаВТИмяРегистраПериоды(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено) Экспорт
	РезультатЗапроса = ВыполнитьЗапросПолученияПериодовРегистра(ИмяРегистра, МенеджерВременныхТаблиц, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, "");	
	Возврат РезультатЗапроса.Выгрузить(); 
КонецФункции

// Создает временную таблицу периодов регистра в менеджере временных таблиц, переданном в качестве параметра.
//
// Параметры:
//		ИмяРегистра 				- Строка - имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистра.
//		ИмяРезультирующейТаблицы 	- Строка - имя создаваемой временной таблицы, если не задано, то
//										имя результирующей таблицы будет сформировано как ВТ<ИмяРегистра>Периоды.
//					
Процедура СоздатьВТИмяРегистраПериоды(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено) Экспорт
	ВыполнитьЗапросПолученияПериодовРегистра(ИмяРегистра, МенеджерВременныхТаблиц, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяРезультирующейТаблицы);	
КонецПроцедуры

// Создает временную таблицу среза первых регистра в менеджере временных таблиц, переданном в качестве параметра.
//
// Параметры:
//		ИмяРегистра 				- Строка - имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез.
//		ИмяРезультирующейТаблицы 	- Строка - имя создаваемой временной таблицы, если не задано, то
//										имя результирующей таблицы будет сформировано каК ВТ<ИмяРегистра>.
//					
Процедура СоздатьВТИмяРегистраСрезПервых(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено) Экспорт
	ВыполнитьЗапросПолученияСрезаРегистра(ИмяРегистра, МенеджерВременныхТаблиц, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, Ложь, ИмяРезультирующейТаблицы);	
КонецПроцедуры

// Создает временную таблицу среза последних регистра в менеджере временных таблиц, переданном в качестве параметра.
//
// Параметры:
//		ИмяРегистра 				- Строка - имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез.
//		ИмяРезультирующейТаблицы 	- Строка - имя создаваемой временной таблицы, если не задано, то
//										имя результирующей таблицы будет сформировано каК ВТ<ИмяРегистра>.
//					
Процедура СоздатьВТИмяРегистраСрезПоследних(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено) Экспорт
	ВыполнитьЗапросПолученияСрезаРегистра(ИмяРегистра, МенеджерВременныхТаблиц, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, Истина, ИмяРезультирующейТаблицы);	
КонецПроцедуры

// Возвращает запрос представления ВТИмяРегистра.
//
// Параметры:
//		ИмяРегистра - Строка - Имя регистра как задано в конфигураторе.
//		ТолькоРазрешенные - Булево
//		ОписаниеФильтра - Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения - Структура - см.ПараметрыПостроенияПредставленияВТТаблицаРегистра.
//		ИмяСоздаваемойТаблицы - Строка - если не указано, запрос будет создавать временную
//					таблицу ВТ<ИмяРегистра>
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТИмяРегистра(ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено) Экспорт
	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра;
	КонецЕсли;	
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	КонецЕсли;	
	
	Запрос = Неопределено;	
	ПриПолученииЗапросаВТИмяРегистра(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);

	Если Запрос <> Неопределено Тогда
		Возврат Запрос;
	КонецЕсли;	
		
	ОписаниеПакета = НовыйОписаниеПакетаЗапросовКРегистру();
	ДобавитьЗапросВТИмяРегистра(ОписаниеПакета, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
	
	Возврат ЗапросПоОписаниюПакета(ОписаниеПакета, ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД);
КонецФункции	

// Возвращает запрос представления ВТИмяРегистраСрез.
//
// Параметры:
//		ИмяРегистра 			- Строка - Имя регистра как задано в конфигураторе.
//		ТолькоРазрешенные 		- Булево
//		ПараметрыПостроения 	- Структура - см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		ОписаниеФильтра - Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		СрезПоследних			- Булево - если Истина - срез последних, если Ложь - Срез первых.
//		ИмяСоздаваемойТаблицы 	- Строка - если не указано, запрос будет создавать временную таблицу.
//									ВТ<ИмяРегистра>СрезПоследних или ВТ<ИмяРегистра>СрезПервых
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТИмяРегистраСрез(ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач СрезПоследних = Истина, Знач ИмяСоздаваемойТаблицы = Неопределено) Экспорт
	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра + ?(СрезПоследних,"СрезПоследних","СрезПервых");
	КонецЕсли;
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	КонецЕсли;
	
	Запрос = Неопределено;	
	ПриПолученииЗапросаВТИмяРегистраСрез(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, СрезПоследних, ИмяСоздаваемойТаблицы);

	Если Запрос <> Неопределено Тогда
		Возврат Запрос;
	КонецЕсли;	
		
	ОписаниеПакета = НовыйОписаниеПакетаЗапросовКРегистру();
	ДобавитьЗапросВТИмяРегистраСрез(ОписаниеПакета, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, СрезПоследних, ИмяСоздаваемойТаблицы);
	
	Возврат ЗапросПоОписаниюПакета(ОписаниеПакета, ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД);
КонецФункции	

// Возвращает запрос представления ВТИмяРегистраПериоды. 
// Получение периодов по интервальному регистру сведений.
//
// Параметры:
//		ИмяРегистра 			- Строка - Имя регистра как задано в конфигураторе.
//		ТолькоРазрешенные 		- Булево
//		ОписаниеФильтра 		- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 	- Структура - см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		ИмяСоздаваемойТаблицы 	- Строка - если не указано, запрос будет создавать временную таблицу.
//									ВТ<ИмяРегистра>Периоды
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТПериодыИмяРегистра(ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено) Экспорт
	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра + "Периоды";
	КонецЕсли;
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраПериоды();
	КонецЕсли;
	
	ОписаниеПакета = НовыйОписаниеПакетаЗапросовКРегистру();
	ДобавитьЗапросВТПериодыИмяРегистра(ОписаниеПакета, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
	
	Возврат ЗапросПоОписаниюПакета(ОписаниеПакета, ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД);
КонецФункции

// Возвращает описание источника данных - временная таблица.
//
// Параметры:
//		ТаблицаФильтра 		- Строка - имя временной таблицы
//					   		- ТаблицаЗначений
//								содержат обязательные колонки:
//									"Период" (для получения представлений среза первых или
//										среза последних)
//									"ДатаНачала" и "ДатаОкончания" (для получения таблицы регистра).
//		ИзмеренияФильтра 	- Строка - имена колонок таблицы равные именам измерений регистра,
//								по которым устанавливается фильтр, для колонок с именами отличающимися
//								от имен измерений, в значениях ключа "СоответствиеИзмеренийРегистраИзмерениямФильтра",
//								указывается соответствие имени измерения регистра имени колонки таблицы фильтра.
//								Допускается не указывать, когда ТаблицаФильтра имеет тип ТаблицаЗначений.
//		ДополнительныеПоляФильтра 		- Строка
//							- Массив - имена колонок таблицы, по которым не устанавливается фильтр,
//								но которые должны участвовать в результате запроса.
//
// Возвращаемое значение - Структура - содержит структуры со свойствами:
//			* ВременнаяТаблица 	- Булево - Истина для источника данных временная таблица, Ложь
//									для источника данных таблица значений.
//			* ТаблицаФильтра 	- Строка
//							 	- ТаблицаЗначений
//			* ИзмеренияФильтра 	- Строка.
//			* СоответствиеИзмеренийРегистраИзмерениямФильтра - Соответствие.
//
Функция ОписаниеФильтраДляСоздатьВТИмяРегистра(Знач ТаблицаФильтра, Знач ИзмеренияФильтра = "", Знач ДополнительныеПоляФильтра = "") Экспорт
	Если ТипЗнч(ТаблицаФильтра) = Тип("Строка") Тогда
		Возврат ОписаниеФильтраДляСоздатьВТИмяРегистраПоВременнойТаблице(ТаблицаФильтра, ИзмеренияФильтра, ДополнительныеПоляФильтра);
	Иначе
		Если Не ЗначениеЗаполнено(ИзмеренияФильтра) Тогда
			ИзмеренияФильтра = Новый Массив;
			Для Каждого Колонка Из ТаблицаФильтра.Колонки Цикл
				Если ВРег(Колонка.Имя) <> ВРег("Период") 
					И ВРег(Колонка.Имя) <> ВРег("ДатаНачала")
					И ВРег(Колонка.Имя) <> ВРег("ДатаОкончания") Тогда
					
					ИзмеренияФильтра.Добавить(Колонка.Имя);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		Возврат ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(ТаблицаФильтра, ИзмеренияФильтра, ДополнительныеПоляФильтра);
	КонецЕсли;	
КонецФункции

// Возвращает описание источника данных - временная таблица.
//
// Параметры:
//		ТаблицаФильтра 			- ТаблицаЗначений -	содержат обязательные колонки:
//										"Период" (для получения представлений среза первых или
//											среза последних)
//										"ДатаНачала" и "ДатаОкончания" (для получения таблицы регистра).
//		Измерения 				- Строка - имена колонок таблицы равные именам измерений регистра,
//									по которым устанавливается фильтр, для колонок с именами отличающимися
//									от имен измерений, в значениях ключа "СоответствиеИзмеренийРегистраИзмерениямФильтра",
//									указывается соответствие имени измерения регистра имени колонки таблицы фильтра.
//									Допускается не указывать, когда ТаблицаФильтра имеет тип ТаблицаЗначений.
//		ДополнительныеПоля 		- Строка
//								- Массив - имена колонок таблицы, по которым не устанавливается фильтр,
//									но которые должны участвовать в результате запроса.
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//		ИмяВТФильтр 			- Строка - имя создаваемой временной таблицы фильтра
//
// Возвращаемое значение - Структура - содержит структуры со свойствами:
//			* ВременнаяТаблица 	- Булево - Истина для источника данных временная таблица, Ложь
//									для источника данных таблица значений.
//			* ТаблицаФильтра 	- Строка
//							 	- ТаблицаЗначений
//			* ИзмеренияФильтра 	- Строка.
//			* СоответствиеИзмеренийРегистраИзмерениямФильтра - Соответствие.
//
Функция ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(ТаблицаФильтра, Измерения = "", ДополнительныеПоля = "", МенеджерВременныхТаблиц = Неопределено, ИмяВТФильтр = Неопределено) Экспорт	
	ОписаниеФильтра = НовыйОписаниеФильтраДляСоздатьВТИмяРегистра(Измерения, ДополнительныеПоля);
	
	ЗначениеФильтра = ФильтрСписокЗначенийПоТаблицеЗначений(ТаблицаФильтра, ОписаниеФильтра);
	
	Если ЗначениеФильтра = Неопределено Тогда
		Если МенеджерВременныхТаблиц <> Неопределено 
			И ИмяВТФильтр <> Неопределено Тогда
			
			ЗначениеФильтра = ФильтрВременнаяТаблицаПоТаблицеЗначений(МенеджерВременныхТаблиц, ТаблицаФильтра, ИмяВТФильтр);
		Иначе
			ЗначениеФильтра = ФильтрТаблицаЗначений(ТаблицаФильтра);	
		КонецЕсли;	
	КонецЕсли;	
	
	ОписаниеФильтра.ЗначениеФильтра = ЗначениеФильтра;	
	
	Возврат ОписаниеФильтра;
КонецФункции

// Возвращает описание источника данных - временная таблица.
//
// Параметры:
//		ИмяВТФильтр 			- Строка - имя временной таблицы
//		Измерения 				- Строка - имена колонок таблицы равные именам измерений регистра,
//									по которым устанавливается фильтр, для колонок с именами отличающимися
//									от имен измерений, в значениях ключа "СоответствиеИзмеренийРегистраИзмерениямФильтра",
//									указывается соответствие имени измерения регистра имени колонки таблицы фильтра.
//									Допускается не указывать, когда ТаблицаФильтра имеет тип ТаблицаЗначений.
//		ДополнительныеПоля 		- Строка
//								- Массив - имена колонок таблицы, по которым не устанавливается фильтр,
//									но которые должны участвовать в результате запроса.
//
// Возвращаемое значение - Структура - содержит структуры со свойствами:
//			* ВременнаяТаблица 	- Булево - Истина для источника данных временная таблица, Ложь
//									для источника данных таблица значений.
//			* ТаблицаФильтра 	- Строка
//							 	- ТаблицаЗначений
//			* ИзмеренияФильтра 	- Строка.
//			* СоответствиеИзмеренийРегистраИзмерениямФильтра - Соответствие.
//
Функция ОписаниеФильтраДляСоздатьВТИмяРегистраПоВременнойТаблице(ИмяВТФильтр, Измерения = "", ДополнительныеПоля = "") Экспорт
	ОписаниеФильтра = НовыйОписаниеФильтраДляСоздатьВТИмяРегистра(Измерения, ДополнительныеПоля);
	ОписаниеФильтра.ЗначениеФильтра = ФильтрВременнаяТаблица(ИмяВТФильтр);
	
	Возврат ОписаниеФильтра;
КонецФункции

// Возвращает описание источника данных - временная таблица.
//
// Параметры:
//		ОписаниеПериода 		- Структура - см. ОписаниеПериодаДляСоздатьВТИмяРегистра
//		Измерение 				- Строка - имена колонок таблицы равные именам измерений регистра,
//									по которым устанавливается фильтр, для колонок с именами отличающимися
//									от имен измерений, в значениях ключа "СоответствиеИзмеренийРегистраИзмерениямФильтра",
//									указывается соответствие имени измерения регистра имени колонки таблицы фильтра.
//									Допускается не указывать, когда ТаблицаФильтра имеет тип ТаблицаЗначений.
//		ЗначениеИзмерения 		- Произвольный - значение измерения.
//
// Возвращаемое значение - Структура - содержит структуры со свойствами:
//			* ВременнаяТаблица 	- Булево - Истина для источника данных временная таблица, Ложь
//									для источника данных таблица значений.
//			* ТаблицаФильтра 	- Строка
//							 	- ТаблицаЗначений
//			* ИзмеренияФильтра 	- Строка.
//			* СоответствиеИзмеренийРегистраИзмерениямФильтра - Соответствие.
//
Функция ОписаниеФильтраДляСоздатьВТИмяРегистраПоЗначению(ОписаниеПериода, Измерение = "", ЗначениеИзмерения = Неопределено) Экспорт
	Если ЗначениеЗаполнено(Измерение) И ЗначениеИзмерения = Неопределено Тогда
		ВызватьИсключение НСТР("ru = 'Не передано значение измерения'");
	КонецЕсли;	
	
	СписокЗначенийИзмерения = Новый Массив;
	СписокЗначенийИзмерения.Добавить(ЗначениеИзмерения);
	
	ОписаниеФильтра = НовыйОписаниеФильтраДляСоздатьВТИмяРегистра(Измерение);
	ОписаниеФильтра.ЗначениеФильтра = ФильтрСписокЗначений(ОписаниеПериода, СписокЗначенийИзмерения);	
	
	Возврат ОписаниеФильтра;
КонецФункции

// Возвращает описание источника данных - временная таблица.
//
// Параметры:
//		ОписаниеПериода 		- Структура - см. ОписаниеПериодаДляСоздатьВТИмяРегистра
//		Измерение 				- Строка - имена колонок таблицы равные именам измерений регистра,
//									по которым устанавливается фильтр, для колонок с именами отличающимися
//									от имен измерений, в значениях ключа "СоответствиеИзмеренийРегистраИзмерениямФильтра",
//									указывается соответствие имени измерения регистра имени колонки таблицы фильтра.
//									Допускается не указывать, когда ТаблицаФильтра имеет тип ТаблицаЗначений.
//		СписокЗначенийИзмерения	- Массив - значения измерений.
//
// Возвращаемое значение - Структура - содержит структуры со свойствами:
//			* ВременнаяТаблица 	- Булево - Истина для источника данных временная таблица, Ложь
//									для источника данных таблица значений.
//			* ТаблицаФильтра 	- Строка
//							 	- ТаблицаЗначений
//			* ИзмеренияФильтра 	- Строка.
//			* СоответствиеИзмеренийРегистраИзмерениямФильтра - Соответствие.
//
Функция ОписаниеФильтраДляСоздатьВТИмяРегистраПоСпискуЗначений(ОписаниеПериода, Измерение = "", СписокЗначенийИзмерения = Неопределено) Экспорт
	Если ЗначениеЗаполнено(Измерение) И СписокЗначенийИзмерения = Неопределено Тогда
		ВызватьИсключение НСТР("ru = 'Не передан список значений измерения'");
	КонецЕсли;	
		
	ОписаниеФильтра = НовыйОписаниеФильтраДляСоздатьВТИмяРегистра(Измерение);
	ОписаниеФильтра.ЗначениеФильтра = ФильтрСписокЗначений(ОписаниеПериода, СписокЗначенийИзмерения);	
	
	Возврат ОписаниеФильтра;
КонецФункции

// Возвращает параметры построения для СоздатьВТИмяРегистра.
//
// Возвращаемое значение;
//		Структура:
//			* ИндексироватьПо 							- Неопределено - см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* Отборы 									- Массив - см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* ВключатьЗаписиНаНачалоПериода 			- Булево - если истина в результирующую таблицу будут
//															включены значения по измерениям фильтра на начало периода
//															(применимо при построении запросов к регистрам с периодичностью.
//															Секунда, День, Месяц, Квартал или Год).
//			* ИмяВременнойТаблицыЗаписейНаНачалоПериода - Строка - задает имя временной таблицы записей на начало периода.
//			* ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода - Строка - по окончании работы метода ЗапросВТИмяРегистра
//			                                                          будет сохранено имя временной таблицы, содержащей записи
//			                                                          на начало периода, если задано значение
//			                                                          ИмяВременнойТаблицыЗаписейНаНачалоПериода, то будет
//			                                                          содержать значение
//			                                                          ИмяВременнойТаблицыЗаписейНаНачалоПериода.
//			* ОтборыЗаписейНаНачалоПериода 				- Массив - описания отбора (см.ДобавитьВКоллекциюОтбор), применяется к таблице
//															формирующий записи на начало периода, при формировании результирующей таблицы.
//
Функция ПараметрыПостроенияДляСоздатьВТИмяРегистра() Экспорт
	
	ПараметрыПостроения = ПараметрыПостроенияВТИмяРегистра();
	ПараметрыПостроения.Вставить("ВключатьЗаписиНаНачалоПериода", Ложь);
	ПараметрыПостроения.Вставить("ИмяВременнойТаблицыЗаписейНаНачалоПериода", "");
	ПараметрыПостроения.Вставить("ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода", "");
	ПараметрыПостроения.Вставить("ОтборыЗаписейНаНачалоПериода", Неопределено);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

// Возвращает параметры построения для СоздатьВТИмяРегистраПериоды.
//
// Возвращаемое значение - Структура - содержит структуры со свойствами:
//			* ИндексироватьПо 							- Неопределено - см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* Отборы 									- Массив - см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* ВключатьЗаписиНаНачалоПериода 			- Булево - если истина в результирующую таблицу будут
//															включены значения по измерениям фильтра на начало периода
//															(применимо при построении запросов к регистрам с периодичностью.
//															Секунда, День, Месяц, Квартал или Год).
//			* ИмяВременнойТаблицыЗаписейНаНачалоПериода - Строка - задает имя временной таблицы записей на начало периода.
//			* ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода - Строка - по окончании работы метода ЗапросВТИмяРегистра
//			                                                          будет сохранено имя временной таблицы, содержащей записи
//			                                                          на начало периода, если задано значение
//			                                                          ИмяВременнойТаблицыЗаписейНаНачалоПериода, то будет
//			                                                          содержать значение
//			                                                          ИмяВременнойТаблицыЗаписейНаНачалоПериода.
//			* ОтборыЗаписейНаНачалоПериода 				- Массив - описания отбора (см.ДобавитьВКоллекциюОтбор), применяется к таблице
//															формирующий записи на начало периода, при формировании результирующей таблицы.
//
Функция ПараметрыПостроенияДляСоздатьВТИмяРегистраПериоды() Экспорт
	
	ПараметрыПостроения = ПараметрыПостроенияВТИмяРегистра();
	
	Возврат ПараметрыПостроения;
	
КонецФункции

// Возвращает параметры построения для СоздатьВТИмяРегистраСрез.
//
// Возвращаемое значение;
//		Структура:
//			* ИндексироватьПо 			- Неопределено 	- см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* Отборы 					- Массив 		- см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* ВсеЗаписи 				- Булево - если Истина в результирующую таблицу будут включены
//											записи таблицы фильтра, для которых нет записей в регистре.
//			* ВключаяГраницу 			- Булево - если Ложь из результирующей таблицы будут исключены
//											записи с периодами равными ограничивающим.
//			* ОтборыПрименяемыеКСрезу - Массив - коллекции, аналогичных коллекции ключа Отборы, но применяемый
//											к полученному срезу.
//
Функция ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез() Экспорт
	
	ПараметрыПостроения = ПараметрыПостроенияВТИмяРегистра();
	ПараметрыПостроения.Вставить("ВсеЗаписи", Ложь);
	ПараметрыПостроения.Вставить("ВключаяГраницу", Истина);
	ПараметрыПостроения.Вставить("ОтборыПрименяемыеКСрезу", Новый Массив);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

#КонецОбласти

#Область ИнтервальныеРегистры

// Формирует движения интервального регистра сведений по изменениям первичного регистра
//		КадроваяИсторияСотрудников
//
// Параметры:
//	ИмяРегистра - Строка - Имя регистра сведений, имеющего интервальную версию.
//	НаборЗаписей - Набор записей регистра сведений
//	МенеджерВременныхТаблиц - Менеджер временных таблиц, в котором содержится "ВТСтарыйНаборЗаписей"
//	ПараметрыПостроения - Структура - см. метод "ПараметрыПостроенияИнтервальногоРегистра".
Процедура СформироватьДвиженияИнтервальногоРегистраПоИзменениям(ИмяРегистра, НаборЗаписей, МенеджерВременныхТаблиц, ПараметрыПостроения) Экспорт

	ЭтоНовыйНабор = НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоНовыйНабор") И НаборЗаписей.ДополнительныеСвойства.ЭтоНовыйНабор;
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц,НаборЗаписей,Истина,"ВТНовыйНаборЗаписей");
	Запрос = Новый Запрос;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ПараметрыПостроения.ИзмеренияРасчета <> Неопределено Тогда
		ИзмеренияОтбора = ПараметрыПостроения.ИзмеренияРасчета;
	Иначе
		ИзмеренияОтбора = ПараметрыПостроения.ОсновноеИзмерение;
	КонецЕсли;
	МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмеренияОтбора, ",", Истина, Истина);
	
	Если Не ЭтоНовыйНабор Тогда
		Если НаборЗаписей.Количество() = 0 Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТИзмененныеЗаписи.ИзмеренияОтбора_
			|ПОМЕСТИТЬ ВТОтборДляПереформирования
			|ИЗ
			|	ВТСтарыйНаборЗаписей КАК ВТИзмененныеЗаписи"; 
		Иначе
			ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
			МассивОписанияПолей = Новый Массив;
			
			МассивОписанияПолей.Добавить("ВТНаборЗаписей.Период");
			Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
				МассивОписанияПолей.Добавить("ВТНаборЗаписей.ДействуетДо");
			КонецЕсли;
			
			Для каждого Измерение Из ОписаниеРегистра.Измерения Цикл
				МассивОписанияПолей.Добавить("ВТНаборЗаписей." + Измерение);
			КонецЦикла; 
			
			Для каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
				МассивОписанияПолей.Добавить("ВТНаборЗаписей." + Ресурс);
			КонецЦикла; 
			
			Для каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
				МассивОписанияПолей.Добавить("ВТНаборЗаписей." + Ресурс);
			КонецЦикла; 
			
			Для каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
				МассивОписанияПолей.Добавить("ВТНаборЗаписей." + Реквизит);
			КонецЦикла; 
			
			ТекстОписанияПолей = СтрСоединить(МассивОписанияПолей, Разделитель);
			
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ 
				|	ВТИзмененныеЗаписи.ИзмеренияОтбора_
				|ПОМЕСТИТЬ ВТОтборДляПереформирования
				|ИЗ
				|	(ВЫБРАТЬ
				|		#ТекстОписанияПолей,
				|		СУММА(Флаг)
				|	ИЗ
				|		(ВЫБРАТЬ
				|			#ТекстОписанияПолей,
				|			1 КАК Флаг
				|		ИЗ
				|			ВТСтарыйНаборЗаписей КАК ВТНаборЗаписей
				|	
				|		ОБЪЕДИНИТЬ ВСЕ
				|	
				|		ВЫБРАТЬ
				|			#ТекстОписанияПолей,
				|			-1
				|		ИЗ
				|			ВТНовыйНаборЗаписей КАК ВТНаборЗаписей) КАК ВТНаборЗаписей
				|
				|	СГРУППИРОВАТЬ ПО
				|		#ТекстОписанияПолей
				|
				|	ИМЕЮЩИЕ
				|		СУММА(Флаг) <> 0) КАК ВТИзмененныеЗаписи";
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТНовыйНаборЗаписей");
						
		КонецЕсли; 
		
		МассивСтрокИзмерений = Новый Массив;
		Для каждого Измерение Из МассивИзмерений Цикл
			МассивСтрокИзмерений.Добавить("ВТИзмененныеЗаписи." + Измерение);
		КонецЦикла; 
		
		ТекстИзмерений = СтрСоединить(МассивСтрокИзмерений, Разделитель);
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТСтарыйНаборЗаписей");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТекстОписанияПолей", ТекстОписанияПолей);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИзмененныеЗаписи.ИзмеренияОтбора_", ТекстИзмерений);
		Результат = Запрос.ВыполнитьПакет();
		ДанныеДляПереформирования = Результат[0].Выбрать();
		ДанныеДляПереформирования.Следующий();
		
		Если ДанныеДляПереформирования.Количество = 0 Тогда
			Запрос.Текст = "УНИЧТОЖИТЬ ВТОтборДляПереформирования";
			Запрос.Выполнить();
			Возврат;
		КонецЕсли; 
		
	Иначе
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВТСтарыйНаборЗаписей";
		Запрос.Выполнить();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Возврат;	
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыПостроения.ПолноеПереформирование = Не ЭтоНовыйНабор;
	СформироватьДвиженияИнтервальногоРегистра(ИмяРегистра, МенеджерВременныхТаблиц, ПараметрыПостроения);
	
КонецПроцедуры	

// Формирует движения интервального регистра сведений
//		КадроваяИсторияСотрудников
//
// Параметры:
//	ИмяРегистра - Строка - Имя регистра сведений, имеющего интервальную версию.
//	МенеджерВременныхТаблиц - Менеджер временных таблиц
//	ПараметрыПостроения - структура - см. метод "ПараметрыПостроенияИнтервальногоРегистра".
Процедура СформироватьДвиженияИнтервальногоРегистра(ИмяРегистра, МенеджерВременныхТаблиц, ПараметрыПостроения, ПараметрыОбновления = Неопределено) Экспорт
	
	ИмяИнтервальногоРегистра = ИмяРегистра + "Интервальный";
	
	ИзмерениеЗаписи = ПараметрыПостроения.ОсновноеИзмерение;
	Если ПараметрыПостроения.ИзмеренияРасчета <> Неопределено Тогда
		
		ИзмеренияОтбора = ПараметрыПостроения.ИзмеренияРасчета;
		СоставнойКлючРасчета = Истина;
		
	Иначе
		
		ИзмеренияОтбора = ПараметрыПостроения.ОсновноеИзмерение;
		СоставнойКлючРасчета = Ложь;
		
	КонецЕсли;
	РежимЗагрузки = ПараметрыПостроения.РежимЗагрузки;
	ПолноеПереформирование = ПараметрыПостроения.ПолноеПереформирование;
	ПараметрыРесурсов = ПараметрыПостроения.ПараметрыРесурсов;
	
	МаксимальнаяДата = МаксимальнаяДата();
	ТекстОписанияПолей = "";
	ПоляРегистра = 
		"ДатаОкончания,
		|ДатаНачала,
		|ПериодЗаписи,
		|РегистраторЗаписи,
		|РегистраторСобытия,
		|ПериодЗаписи,
		|ПериодПредыдущейЗаписи,
		|ПустойИнтервал,
		|ДействуетДо";
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяИнтервальногоРегистра);
	ЗаполнитьПоляРегистраПоОписанию(ОписаниеРегистра, ТекстОписанияПолей, ПоляРегистра);
	
	Выборка 			= Интервалы(ИмяРегистра, МенеджерВременныхТаблиц, ИмяИнтервальногоРегистра, ИзмеренияОтбора, ТекстОписанияПолей, ПолноеПереформирование);
	СтруктураОжидания 	= Новый Структура(ПоляРегистра);
	Вставка				= Новый Структура(ПоляРегистра);
	ЗначенияИзмерений 	= Новый Структура(ИзмеренияОтбора);
	НаборЗаписей 		= РегистрыСведений[ИмяИнтервальногоРегистра].СоздатьНаборЗаписей();
	ИзмеренияЗаполнены	= Ложь;
	ЕстьВставка			= Истина;
	НаборЗаписей.ОбменДанными.Загрузка = РежимЗагрузки;
	
	Если СоставнойКлючРасчета Тогда
		ДанныеРегистра = ТекущиеДанныеРегистра(ИмяИнтервальногоРегистра, МенеджерВременныхТаблиц, ИзмерениеЗаписи, ТекстОписанияПолей);
	КонецЕсли;
	
	Пока Выборка.СледующийПоЗначениюПоля(ИзмерениеЗаписи) Цикл
		
		ПространствоБлокировки = "РегистрСведений." + ИмяРегистра;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, ПространствоБлокировки, ИзмерениеЗаписи, Выборка[ИзмерениеЗаписи]) Тогда
			Продолжить;
		КонецЕсли;
		РассчитанныеПериоды = Новый Соответствие;
		ИзмеренияЗаполнены = Ложь;
		Если ПолноеПереформирование Тогда
			РассчитанныеПериоды.Вставить(Дата(1, 1, 1), НаборЗаписей);
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначенияИзмеренийОтличны(ЗначенияИзмерений, Выборка) Тогда
				
				Если ИзмеренияЗаполнены Тогда
					ЗакрытьИнтервал(Вставка, НаборЗаписей, МаксимальнаяДата, ЕстьВставка);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ЗначенияИзмерений, Выборка);				
				ИзмеренияЗаполнены 				= Истина;
				ЕстьОжидание					= Ложь;
				ЕстьВставка 					= Ложь;
				Вставка.ПустойИнтервал			= Ложь;
				Вставка.ПериодПредыдущейЗаписи 	= Дата(1, 1, 1);
				Вставка.ДатаНачала 				= Дата(1, 1, 1);
				ТекущийГод						= Дата(1, 1, 1);
				ИзмеренияПоиска = ОбщегоНазначения.СкопироватьРекурсивно(ЗначенияИзмерений);
				
			КонецЕсли;
			
			Если СоставнойКлючРасчета Тогда
				
				Если Не ПолноеПереформирование Тогда
					ИзмеренияПоиска.Вставить("Год", НачалоГода(Выборка.ДатаСобытия)); 
				КонецЕсли;
				
				НайденныеСтроки = ДанныеРегистра.НайтиСтроки(ИзмеренияПоиска);
				Для каждого СтрокаДанных Из НайденныеСтроки Цикл
					ДанныеРегистра.Удалить(СтрокаДанных);
				КонецЦикла; 
				
			КонецЕсли;

			Если Выборка.ЭтоНачалоИнтервала Тогда
				
				Если ЕстьВставка Тогда
					
					Если Вставка.ПериодЗаписи > Выборка.ПериодЗаписи
						И Вставка.ПустойИнтервал <> Истина
						Или Выборка.ПустойИнтервал Тогда
						
						Если Не ПолноеПереформирование
							И НачалоГода(Выборка.ДатаСобытия) <> ТекущийГод Тогда
				
							НаборЗаписейПоГоду(ИмяИнтервальногоРегистра, РассчитанныеПериоды, НачалоГода(Выборка.ДатаСобытия));
						КонецЕсли; 
						
						Продолжить;
					КонецЕсли;
					
					Если Вставка.ДатаНачала < Выборка.ДатаСобытия Тогда
						
						ДатаОкончания = Выборка.ДатаСобытия - 1;
						ЗакрытьИнтервал(Вставка, НаборЗаписей, ДатаОкончания, ЕстьВставка);
						
					КонецЕсли;
					ПоместитьВОжидание(СтруктураОжидания, Вставка, Выборка, ЕстьОжидание);
					
				КонецЕсли;
				
				ОткрытьИнтервал(Вставка, Выборка, Выборка.ДатаСобытия, ЕстьВставка);
				ПроверитьИзменениеТекущегоГода(ИмяИнтервальногоРегистра, Выборка.ДатаСобытия, ТекущийГод, НаборЗаписей, РассчитанныеПериоды, ПолноеПереформирование);
				
			Иначе
				
				Если ЕстьВставка
					И Вставка.ДатаНачала = Выборка.ПериодЗаписи Тогда
				
					ЗакрытьИнтервал(Вставка, НаборЗаписей, Выборка.ДатаСобытия, ЕстьВставка);
					Если ЕстьОжидание 
						И Выборка.ДатаСобытия + 1 < МаксимальнаяДата Тогда

						Вставка.ПериодПредыдущейЗаписи = Вставка.ДатаНачала;
						СтруктураОжидания.РегистраторСобытия = Выборка.РегистраторЗаписи;
						ОткрытьИнтервал(Вставка, СтруктураОжидания, Выборка.ДатаСобытия + 1, ЕстьВставка);
						ПроверитьИзменениеТекущегоГода(ИмяИнтервальногоРегистра, Выборка.ДатаСобытия + 1, ТекущийГод, НаборЗаписей, РассчитанныеПериоды, ПолноеПереформирование);
						ЕстьОжидание = Ложь;
						
					ИначеЕсли ПараметрыРесурсов <> Неопределено
						И Выборка.ДатаСобытия + 1 < МаксимальнаяДата Тогда
						
						ОткрытьПустойИнтервал(Вставка, Выборка, Выборка.ДатаСобытия + 1, ЕстьВставка, ПараметрыРесурсов);
						Вставка.РегистраторСобытия = Выборка.РегистраторЗаписи;
						ПроверитьИзменениеТекущегоГода(ИмяИнтервальногоРегистра, Выборка.ДатаСобытия + 1, ТекущийГод, НаборЗаписей, РассчитанныеПериоды, ПолноеПереформирование);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗакрытьИнтервал(Вставка, НаборЗаписей, МаксимальнаяДата, ЕстьВставка);
		СтруктураПоиска = Новый Структура(ИзмерениеЗаписи, Выборка[ИзмерениеЗаписи]);
		
		Для каждого КлючИЗначение Из РассчитанныеПериоды Цикл
			
			НаборЗаписей = КлючИЗначение.Значение;
			НаборЗаписей.Отбор[ИзмерениеЗаписи].Установить(Выборка[ИзмерениеЗаписи]);
			Если Не ПолноеПереформирование Тогда
				
				НаборЗаписей.Отбор.Год.Установить(КлючИЗначение.Ключ);
				СтруктураПоиска.Вставить("Год", КлючИЗначение.Ключ); 
				
			КонецЕсли;

			Если СоставнойКлючРасчета Тогда
				КлючиИзмерений = НаборЗаписей.Выгрузить();
				КлючиИзмерений.Свернуть(ИзмеренияОтбора);
				ДанныеИзмерений = ДанныеРегистра.НайтиСтроки(СтруктураПоиска);
				СтруктураПоискаКлючей = Новый Структура(ИзмеренияОтбора);
				Для каждого СтрокаДанных Из ДанныеИзмерений Цикл
					ЗаполнитьЗначенияСвойств(СтруктураПоискаКлючей, СтрокаДанных);
					СтрокиКлючей = КлючиИзмерений.НайтиСтроки(СтруктураПоискаКлючей);
					Если СтрокиКлючей.Количество() = 0 Тогда
						ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаДанных);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ЗаписатьНаборЗаписей(НаборЗаписей);
			
		КонецЦикла;
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает максимально возможную дату для интервального регистра.
//
// Возвращаемое значение:
//		Дата
Функция МаксимальнаяДата() Экспорт
	
	Возврат Дата(3999, 12, 31, 23, 59, 59);
	
КонецФункции

// Возвращает максимально возможную дату для интервального регистра строкой для запроса.
//
// Возвращаемое значение:
//		Строка
Функция МаксимальнаяДатаСтрокой() Экспорт
	
	Возврат "ДАТАВРЕМЯ(" + Формат(МаксимальнаяДата(), "ДФ='гггг, ММ, дд, ЧЧ, мм, сс'; ДП=") + ")";
	
КонецФункции

#Область ИнтервальныеРегистры

Функция ПараметрыПостроенияИнтервальногоРегистра() Экспорт
	
	ПараметрыПостроения = Новый Структура;
	ПараметрыПостроения.Вставить("ПолноеПереформирование", Истина);
	ПараметрыПостроения.Вставить("РежимЗагрузки", Истина);
	ПараметрыПостроения.Вставить("ОсновноеИзмерение", Неопределено);
	ПараметрыПостроения.Вставить("ИзмеренияРасчета", Неопределено);
	ПараметрыРесурсов = Новый Структура;
	ПараметрыПостроения.Вставить("ПараметрыРесурсов", ПараметрыРесурсов);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

Функция ПараметрыНаследованияРесурсов(ИмяРегистра) Экспорт
	
	ИмяИнтервальногоРегистра = ИмяРегистра + "Интервальный";
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяИнтервальногоРегистра);
	ПараметрыРесурсов = Новый Структура;
	
	Для каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
	
		Если Ресурс = "ПериодПредыдущейЗаписи" Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыРесурсов.Вставить(Ресурс);
		ПараметрыНаследования = Новый Структура("ПравилоНаследования, Значение", ПравилоНаследованияПустое());
		ПараметрыРесурсов[Ресурс] = ПараметрыНаследования;
		
	КонецЦикла;
	
	Возврат ПараметрыРесурсов;
	
КонецФункции

Функция ПравилоНаследованияПустое() Экспорт
	Возврат "Пустое";
КонецФункции

Функция ПравилоНаследованияФиксированное() Экспорт
	Возврат "Фиксированное";
КонецФункции

Функция ПравилоНаследованияНаследование() Экспорт
	Возврат "Наследование";
КонецФункции

#КонецОбласти

#Область КонтрольИзмененияДанныхРегистров

// Подготавливает данные для контроля изменений
//
// Параметры:
//	НаборЗаписейРегистра - Набор записей регистра
Процедура КонтрольИзмененийПередЗаписью(НаборЗаписейРегистра) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(НаборЗаписейРегистра) Тогда
		Возврат;
	КонецЕсли;	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	НаборЗаписейРегистра.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблицИзмененияРегистра", МенеджерВременныхТаблиц);
	
	СоздатьВТСтарыйНаборЗаписей(НаборЗаписейРегистра, МенеджерВременныхТаблиц, ИмяВТСтарыйНаборРегистра(НаборЗаписейРегистра.Метаданные().Имя));
КонецПроцедуры

// Формирует таблицу изменений регистра
//
// Параметры:
//	НаборЗаписейРегистра - Набор записей регистра
Процедура КонтрольИзмененийПриЗаписи(НаборЗаписейРегистра) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(НаборЗаписейРегистра) Тогда
		Возврат;
	КонецЕсли;	
		
	Запрос = ЗапросВТИзмененияВНаборе(НаборЗаписейРегистра.Метаданные().Имя, НаборЗаписейРегистра.Отбор.Регистратор.Значение);
	Запрос.МенеджерВременныхТаблиц = НаборЗаписейРегистра.ДополнительныеСвойства.МенеджерВременныхТаблицИзмененияРегистра;
	
	Запрос.Выполнить(); 
КонецПроцедуры

// Возвращает признак сформированности таблицы изменений
//
// Параметры:
//	НаборЗаписейРегистра - Набор записей регистра
Функция ТаблицаИзменившихсяДанныхНабораСформирована(НаборЗаписейРегистра) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(НаборЗаписейРегистра) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НаборЗаписейРегистра.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблицИзмененияРегистра");
	
КонецФункции

// Возвращает таблицу изменений регистра
//
// Параметры:
//	НаборЗаписейРегистра - Набор записей регистра
Функция ТаблицаИзменившихсяДанныхНабора(НаборЗаписейРегистра) Экспорт
	ТаблицаИзменившихсяДанных = Неопределено;	
	
	МенеджерВременныхТаблиц = Неопределено;
	
	НаборЗаписейРегистра.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблицИзмененияРегистра", МенеджерВременныхТаблиц);
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.*
		|ИЗ
		|	ВТТаблицаИзменений КАК ТаблицаИзменений";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаИзменений", ИмяТаблицыИзмененийВНаборе(НаборЗаписейРегистра.Метаданные().Имя));
		
		ТаблицаИзменившихсяДанных = Запрос.Выполнить().Выгрузить();
	КонецЕсли;	
		
	Возврат ТаблицаИзменившихсяДанных;	
КонецФункции

// Возвращает имя таблицы изменений регистра
//
// Параметры:
//	ИмяРегистра - имя регистра
Функция ИмяТаблицыИзмененийВНаборе(ИмяРегистра) Экспорт
	Возврат "ВТ" + ИмяРегистра + "Изменения";	
КонецФункции	

// Возвращает соответствие изменений массива наборов регистров
//
// Параметры:
//	НаборыИсточникДанных - Массив наборов записей регистров
Функция ИзмененияВНаборахИсточниковВторичныхДанных(НаборыИсточникДанных) Экспорт
	ИзмененияВНаборах = Новый Соответствие;
	
	Для Каждого Набор Из НаборыИсточникДанных Цикл
		ИмяРегистра = Набор.Метаданные().Имя; 
		
		ТаблицаИзмененийВНаборе = ТаблицаИзменившихсяДанныхНабора(Набор);
		
		Если ТаблицаИзмененийВНаборе <> Неопределено
			И ТаблицаИзмененийВНаборе.Количество() > 0 Тогда
						
			ИзмененияВНаборах.Вставить(ИмяРегистра, ТаблицаИзмененийВНаборе);
			
		КонецЕсли;	
	КонецЦикла;		

	Возврат ИзмененияВНаборах;	
КонецФункции

#КонецОбласти

#Область РаботаСФильтромЗапроса 

Функция ОписаниеИспользованиеФильтра(ПсевдонимТаблицыФильтра = "ИзмеренияДаты", ПсевдонимТаблицыРегистра = "РегистрСведений", ФильтрВВидеВТПринудительно = Ложь) Экспорт
	ОписаниеИспользованияФильтра = НовыйОписаниеИспользованияФильтра();
	ОписаниеИспользованияФильтра.ПсевдонимТаблицыФильтра = ПсевдонимТаблицыФильтра;
	ОписаниеИспользованияФильтра.ПсевдонимТаблицыРегистра = ПсевдонимТаблицыРегистра;
	Если ФильтрВВидеВТПринудительно Тогда
		ОписаниеИспользованияФильтра.ФильтрВВидеВТ = Истина;
	КонецЕсли;	
	
	Возврат ОписаниеИспользованияФильтра;
КонецФункции	

Функция ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтра, ОписаниеФильтра, ОписаниеРегистра, ПоляПериода, ОператорЗапроса, ПостфиксИменПараметров = "", ПолучатьВсеЗаписи = Ложь) Экспорт
	ОписаниеИспользованияФильтра.ПостфиксИменПараметров = ПостфиксИменПараметров;
	ОписаниеИспользованияФильтра.ОператорЗапроса = ОператорЗапроса;
	ОписаниеИспользованияФильтра.ВсеЗаписи = ПолучатьВсеЗаписи;
	
	Если Не ОписаниеИспользованияФильтра.ФильтрВВидеВТ Тогда	
		ОписаниеИспользованияФильтра.ФильтрВВидеВТ = ИспользоватьВТФильтр(ОписаниеФильтра, ПолучатьВсеЗаписи);
	КонецЕсли;	
	//
	Если ЗначениеЗаполнено(ОписаниеИспользованияФильтра.ПсевдонимТаблицыРегистра) Тогда
		ОписаниеСоединенияСТаблицейФильтра = ОписаниеСоединенияСТаблицейФильтра(ОператорЗапроса, ОписаниеИспользованияФильтра.ПсевдонимТаблицыФильтра, ОписаниеИспользованияФильтра.ПсевдонимТаблицыРегистра);
	                                                                                                                      
		Если ОписаниеСоединенияСТаблицейФильтра = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Не возможно установить фильтр в запрос получения данных регистра'");	
		КонецЕсли;	
		ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = ТекстУсловия(ОписаниеСоединенияСТаблицейФильтра.Условия);
		ОписаниеСоединенияСТаблицейФильтра.Условия.Очистить();
	КонецЕсли;	                                                   
	
	Для Каждого Измерение Из ОписаниеФильтра.ИзмеренияФильтра Цикл
		ПолеФильтра = ПолеТаблицыФильтра(ОписаниеФильтра, Измерение);
		ОписаниеИспользованияФильтра.ИзмеренияФильтра.Вставить(Измерение, ПолеФильтра);

		Если ОписаниеРегистра.ИзмеренияДляПоиска[ВРег(Измерение)] <> Неопределено Тогда 
			ОписаниеИспользованияФильтра.ИзмеренияСвязи.Вставить(Измерение, ПолеФильтра);		
		КонецЕсли;	
	КонецЦикла;		
	
	ПоляПериодовМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляПериода, ",", Истина, Истина);
	
	Для Каждого ПолеПериода Из ПоляПериодовМассив Цикл
		ПолеФильтра = ПолеТаблицыФильтра(ОписаниеФильтра, ПолеПериода);
		ОписаниеИспользованияФильтра.ПоляПериодаФильтра.Вставить(ПолеПериода, ПолеФильтра);
	КонецЦикла;	
	
	Для Каждого ДополнительноеПоле Из ОписаниеФильтра.ДополнительныеПоляФильтра Цикл
		Если ОписаниеИспользованияФильтра.ФильтрВВидеВТ Тогда
			ОписаниеИспользованияФильтра.ДополнительныеПоля.Вставить(ДополнительноеПоле, ОписаниеИспользованияФильтра.ПсевдонимТаблицыФильтра + "." + ДополнительноеПоле);
		Иначе
			ОписаниеИспользованияФильтра.ДополнительныеПоля.Вставить(ДополнительноеПоле, ДополнительноеПоле + ПостфиксИменПараметров);
		КонецЕсли;	
	КонецЦикла;	
КонецФункции	

Процедура УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, ЗаменяемыйТекст, ОписаниеВыраженияПериода) Экспорт
	
	ТекстВыраженияПоляПериод = ВыражениеПоляПериод(ОписаниеВыраженияПериода);
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = СтрЗаменить(
																ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи,
																ЗаменяемыйТекст,
																ТекстВыраженияПоляПериод);
КонецПроцедуры	

Процедура УстановитьВыражениеПолейФильтраВУсловияхСвязиСФильтром(ОписаниеИспользованияФильтра, ЗаменяемыеПоля)  Экспорт
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗаменяемыеПоля, ",", , Истина);
	Для Каждого Поле Из МассивПолей Цикл
		ВыражениеПоля = ВыраженияПоляФильтра(ОписаниеИспользованияФильтра, Поле);
		ЗаменяемыйТекст = ОписаниеИспользованияФильтра.ПсевдонимТаблицыФильтра + "." + Поле;
		ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтра, ЗаменяемыйТекст, ВыражениеПоля);
	КонецЦикла;	
КонецПроцедуры	

Процедура УстановитьВыражениеПолейФильтраВУсловияхСоединения(ОператорЗапроса, ОписаниеИспользованияФильтра, ПсевдонимПрисоединяемойТаблицы, ЗаменяемыеПоля)  Экспорт
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗаменяемыеПоля, ",", , Истина);
	Для Каждого Поле Из МассивПолей Цикл
		ВыражениеПоля = ВыраженияПоляФильтра(ОписаниеИспользованияФильтра, Поле);
		ЗаменяемыйТекст = ОписаниеИспользованияФильтра.ПсевдонимТаблицыФильтра + "." + Поле;
		ЗаменитьТекстВУсловииСоединения(ОператорЗапроса, ПсевдонимПрисоединяемойТаблицы, ЗаменяемыйТекст, ВыражениеПоля);
	КонецЦикла;	
КонецПроцедуры	
	
Процедура ЗаменитьТекстВУсловииСвязиСФильтром(ОписаниеИспользованияФильтра, ЗаменяемыйТекст, НовыйТекст) Экспорт
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи 
		= СтрЗаменить(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи, ЗаменяемыйТекст, НовыйТекст);	
КонецПроцедуры

Процедура УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра, ПараметрыПостроения = Неопределено) Экспорт
	ПриемникУсловийСвязи  = Неопределено;
	
	Если ОписаниеИспользованияФильтра.ФильтрВВидеВТ Тогда
		ОписаниеСоединения = ОписаниеСоединенияСТаблицейФильтра(
								ОписаниеИспользованияФильтра.ОператорЗапроса, 
								ОписаниеИспользованияФильтра.ПсевдонимТаблицыФильтра, 
								ОписаниеИспользованияФильтра.ПсевдонимТаблицыРегистра);
								
		Если ОписаниеСоединения <> Неопределено Тогда
									
			ПриемникУсловийСвязи = ОписаниеСоединения.Условия;	
										
			Если  ОписаниеИспользованияФильтра.ВсеЗаписи 
				И ОписаниеСоединения.ВедущаяТаблица = ОписаниеИспользованияФильтра.ПсевдонимТаблицыФильтра Тогда
			
				ОписаниеСоединения.ТипСоединения = "ЛЕВОЕ";
			КонецЕсли;	
		КонецЕсли;	
							
		ИмяВТФильтр = ИнициализироватьВТФильтр(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);
		
		ЗаменитьТаблицуВОператореЗапроса(ОписаниеИспользованияФильтра.ОператорЗапроса, ОписаниеИспользованияФильтра.ПсевдонимТаблицыФильтра, ИмяВТФильтр);
	Иначе	
		УдалитьТаблицуИзОператораЗапроса(ОписаниеИспользованияФильтра.ОператорЗапроса, ОписаниеИспользованияФильтра.ПсевдонимТаблицыФильтра);
			
		Для Каждого ОписаниеЗначенияПериода Из ОписаниеИспользованияФильтра.ОписаниеВычисляемыхПараметровПериода Цикл
			ПолеПериод = ПолеТаблицыФильтра(ОписаниеФильтра, ОписаниеЗначенияПериода.ИмяИсходногоПоля);
			Значение = ЗначениеПоляПериод(ОписаниеЗначенияПериода, ОписаниеФильтра.ЗначениеФильтра.ОписаниеПериода[ПолеПериод]);
			ОписаниеПакета.Параметры.Вставить(ОписаниеЗначенияПериода.ИмяПоля, Значение);
		КонецЦикла;	
		
		Для Каждого ДополнительноеПоле Из ОписаниеИспользованияФильтра.ДополнительныеПоля Цикл
			ОписаниеПакета.Параметры.Вставить(ДополнительноеПоле.Значение, ОписаниеФильтра.ЗначениеФильтра.ДополнительныеПоля[ДополнительноеПоле.Ключ]);
		КонецЦикла;	
		
		Если ЗначениеЗаполнено(ОписаниеИспользованияФильтра.ПсевдонимТаблицыРегистра) Тогда 
			ОписаниеСоединения = ОписаниеСоединенияПоПрисоединяемойТаблице(ОписаниеИспользованияФильтра.ОператорЗапроса, ОписаниеИспользованияФильтра.ПсевдонимТаблицыРегистра);
			Если ОписаниеСоединения <> Неопределено Тогда
				ПриемникУсловийСвязи = ОписаниеСоединения.Условия;
			Иначе	
				ПриемникУсловийСвязи = ОписаниеИспользованияФильтра.ОператорЗапроса.Отбор;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	УстановитьПараметрыИзмеренияФильтра(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);

	Если ПриемникУсловийСвязи <> Неопределено Тогда
		УстановитьУсловияСвязиСФильтром(ОписаниеПакета, ОписаниеИспользованияФильтра, ПриемникУсловийСвязи, ОписаниеФильтра);
	КонецЕсли;	
	
	УстановитьЭлементыОтбораСКД(ОписаниеИспользованияФильтра, ПараметрыПостроения);	
КонецПроцедуры	

Функция ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтра, Измерение) Экспорт
	Если ОписаниеИспользованияФильтра.ФильтрВВидеВТ Тогда
		ИмяПоляФильтра =  ОписаниеИспользованияФильтра.ИзмеренияФильтра[Измерение];
		Возврат ОписаниеИспользованияФильтра.ПсевдонимТаблицыФильтра + "." + ИмяПоляФильтра;
	Иначе
		Возврат "&" + ИмяПараметраЭлементаФильтра(Измерение, ОписаниеИспользованияФильтра.ПостфиксИменПараметров);
	КонецЕсли;	
КонецФункции	

#КонецОбласти

#Область ОписаниеПолейПериода

Функция ОписаниеПоляПериода(ИмяПоля, ПсевдонимТаблицы = Неопределено) Экспорт
	ОписаниеФильтраПоПериоду = Новый Структура;
	ОписаниеФильтраПоПериоду.Вставить("ПсевдонимТаблицы", ПсевдонимТаблицы);
	ОписаниеФильтраПоПериоду.Вставить("ИмяПоля", ИмяПоля);
	ОписаниеФильтраПоПериоду.Вставить("Кратность", "СЕКУНДА");
	ОписаниеФильтраПоПериоду.Вставить("Сдвиг", 0);
	ОписаниеФильтраПоПериоду.Вставить("ВариантПриведенияПериода", "НАЧАЛОПЕРИОДА");
	ОписаниеФильтраПоПериоду.Вставить("КратностьСдвига");
	ОписаниеФильтраПоПериоду.Вставить("ПустоеЗначениеКакМаксимальное", Ложь);	
	ОписаниеФильтраПоПериоду.Вставить("ИмяИсходногоПоля");

	Возврат ОписаниеФильтраПоПериоду;
КонецФункции	

Функция ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, ИмяИсходногоПоля, ПсевдонимВычисляемогоПоля) Экспорт
	ИмяПоляТаблицыФильтра = ОписаниеИспользованияФильтра.ПоляПериодаФильтра[ИмяИсходногоПоля];	
	
	Если ОписаниеИспользованияФильтра.ФильтрВВидеВТ Тогда
		ОписаниеПоля = ОписаниеПоляПериода(ИмяПоляТаблицыФильтра, ОписаниеИспользованияФильтра.ПсевдонимТаблицыФильтра);	
	Иначе	
		ИмяПараметра = ИмяПараметраЭлементаФильтра(ПсевдонимВычисляемогоПоля, ОписаниеИспользованияФильтра.ПостфиксИменПараметров);
		ОписаниеПоля = ОписаниеПоляПериода(ИмяПараметра);
		ОписаниеПоля.ИмяИсходногоПоля = ИмяПоляТаблицыФильтра;
	КонецЕсли;	
	
	ОписаниеИспользованияФильтра.ОписаниеВычисляемыхПараметровПериода.Добавить(ОписаниеПоля);
	                                                           
	Возврат ОписаниеПоля;
КонецФункции	

Функция ВыражениеПоляПериод(ОписаниеПоляПериода) Экспорт		
	Если ОписаниеПоляПериода.ПсевдонимТаблицы = Неопределено Тогда
		Возврат "&" + ОписаниеПоляПериода.ИмяПоля;
	КонецЕсли;	
	
	Если ОписаниеПоляПериода.ПустоеЗначениеКакМаксимальное Тогда
		ВыражениеПериодШаблон = "
						        |ВЫБОР
						        |	КОГДА &Дата_ = ДАТАВРЕМЯ(1, 1, 1)
						        |		ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
						        |	ИНАЧЕ &ДатаПриведенная_
						        |КОНЕЦ";
						  
		ВыражениеДата = ОписаниеПоляПериода.ПсевдонимТаблицы + "." + ОписаниеПоляПериода.ИмяПоля;
		ВыражениеПериодШаблон = СтрЗаменить(ВыражениеПериодШаблон, "&Дата_", ВыражениеДата);  
		
		ВыражениеПериод = ВыражениеДата;
	Иначе
		ВыражениеПериод = ОписаниеПоляПериода.ПсевдонимТаблицы + "." + ОписаниеПоляПериода.ИмяПоля;
	КонецЕсли;	
		
	Если ОписаниеПоляПериода.Кратность <> "СЕКУНДА" Тогда
		ВыражениеПериод = ОписаниеПоляПериода.ВариантПриведенияПериода + "(" + ВыражениеПериод + "," + ОписаниеПоляПериода.Кратность + ")";
	КонецЕсли;	
	
	КратностьСдвига = ?(ОписаниеПоляПериода.КратностьСдвига = Неопределено, ОписаниеПоляПериода.Кратность, ОписаниеПоляПериода.КратностьСдвига); 
	
	Если ОписаниеПоляПериода.Сдвиг <> 0 Тогда
		ВыражениеПериод = "ДОБАВИТЬКДАТЕ(" + ВыражениеПериод + "," + КратностьСдвига + "," + Формат(ОписаниеПоляПериода.Сдвиг, "ЧГ=") + ")";
	КонецЕсли;	
	
	Если ОписаниеПоляПериода.ПустоеЗначениеКакМаксимальное Тогда
		Возврат СтрЗаменить(ВыражениеПериодШаблон, "&ДатаПриведенная_", ВыражениеПериод);
	Иначе	
		Возврат ВыражениеПериод;
	КонецЕсли;	
КонецФункции

#КонецОбласти 

#Область ПостроениеМоделиЗапроса

Функция НовыйОписаниеПакетаЗапросовКРегистру() Экспорт
	
	ОписаниеПакетаЗапросовКРегистру = Новый Структура;
	ОписаниеПакетаЗапросовКРегистру.Вставить("ОписаниеЗапросаИнициализацииФильтра");
	ОписаниеПакетаЗапросовКРегистру.Вставить("ЗапросУничтоженияФильтра");
	ОписаниеПакетаЗапросовКРегистру.Вставить("ЗапросыПолученияДанных", Новый Массив);
	ОписаниеПакетаЗапросовКРегистру.Вставить("Параметры", Новый Структура);
	
	Возврат ОписаниеПакетаЗапросовКРегистру;
	
КонецФункции

Функция ОписаниеЗапросаПоТексту(ТекстЗапроса) Экспорт
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Возврат ОписаниеЗапросаПоЗапросуПакета(СхемаЗапроса.ПакетЗапросов[0]);
КонецФункции

#КонецОбласти

#Область РаботаСМодельюЗапроса

// Описание
// 
// Параметры:
// 	ОписаниеПакетаЗапросовКРегистру - Структура - Описание:
// * ОписаниеЗапросаИнициализацииФильтра 
// * ЗапросУничтоженияФильтра 
// * ЗапросыПолученияДанных - Массив -
// * Параметры - Структура -
// 	ВыводитьЭлементыСКД - Булево - Описание
// Возвращаемое значение:
// 	Запрос - Запрос -
Функция ЗапросПоОписаниюПакета(ОписаниеПакетаЗапросовКРегистру, ВыводитьЭлементыСКД = Истина) Экспорт
	Запрос = Новый Запрос;
	
	Для Каждого Параметр Из ОписаниеПакетаЗапросовКРегистру.Параметры Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Разделитель = Символы.ПС + ";" + Символы.ПС;
	
	СтрокиПакетаЗапросов = Новый Массив;
	
	Если ОписаниеПакетаЗапросовКРегистру.ОписаниеЗапросаИнициализацииФильтра <> Неопределено Тогда
		ОписаниеЗапросаВМассивСтрок(СтрокиПакетаЗапросов, ОписаниеПакетаЗапросовКРегистру.ОписаниеЗапросаИнициализацииФильтра, ВыводитьЭлементыСКД);
		СтрокиПакетаЗапросов.Добавить(Разделитель);
	КонецЕсли;	
	
	НомерЗапроса = 0;
	Для Каждого ОписаниеЗапроса Из ОписаниеПакетаЗапросовКРегистру.ЗапросыПолученияДанных Цикл
		НомерЗапроса = НомерЗапроса + 1;
		Если ТипЗнч(ОписаниеЗапроса) = Тип("Запрос") Тогда
			СтрокиПакетаЗапросов.Добавить(ОписаниеЗапроса.Текст);
		Иначе	
			ОписаниеЗапросаВМассивСтрок(СтрокиПакетаЗапросов, ОписаниеЗапроса, ВыводитьЭлементыСКД);
		КонецЕсли;	
		Если НомерЗапроса <> ОписаниеПакетаЗапросовКРегистру.ЗапросыПолученияДанных.Количество() Тогда
			СтрокиПакетаЗапросов.Добавить(Разделитель);
		КонецЕсли;
	КонецЦикла;	
	
	Если ОписаниеПакетаЗапросовКРегистру.ЗапросУничтоженияФильтра <> Неопределено Тогда
		СтрокиПакетаЗапросов.Добавить(Разделитель);
		СтрокиПакетаЗапросов.Добавить(ОписаниеПакетаЗапросовКРегистру.ЗапросУничтоженияФильтра.Текст);
	КонецЕсли;	
		
	Запрос.Текст = СтрСоединить(СтрокиПакетаЗапросов);
	
	Возврат Запрос;
	
КонецФункции	

Функция ТекстЗапросаПоОписанию(ОписаниеЗапроса) Экспорт
	СтрокиЗапроса = Новый Массив;
	
	ОписаниеЗапросаВМассивСтрок(СтрокиЗапроса, ОписаниеЗапроса, Ложь);
	
	Возврат СтрСоединить(СтрокиЗапроса);
КонецФункции	

Процедура УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорВыбратьЗапроса, Отборы, ПараметрыЗапроса, ПостфиксПараметров, СчПараметров = 1, Предикат = "", ПсевдонимРегистра = "РегистрСведений", УстанавливатьОтборПоИсключаемымРегистраторам = Истина, УстанавливатьОтборВУсловияСоединения = Ложь) Экспорт
	Если Отборы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеСоединения = ОписаниеСоединенияСТаблицейФильтра(ОператорВыбратьЗапроса, "ИзмеренияДаты", ПсевдонимРегистра);
	
	ПриемникУсловий = Неопределено;
	Если ОписаниеСоединения <> Неопределено И УстанавливатьОтборВУсловияСоединения Тогда
		ПриемникУсловий = ОписаниеСоединения.Условия;
	КонецЕсли;	
	
	ВыраженияПолей = ВыраженияПолейОператораЗапроса(ОператорВыбратьЗапроса);
		
	Для Каждого СтруктураОтбора Из Отборы Цикл	
		Если ЭтоЭлементОтбораПоИсключаемомуРегистратору(СтруктураОтбора)
			И Не УстанавливатьОтборПоИсключаемымРегистраторам Тогда
			
			Продолжить;
		КонецЕсли;	
		
		Если ТипЗнч(СтруктураОтбора.ПравоеЗначение) = Тип("Строка") Тогда
			ОписаниеПараметра = СтруктураОтбора.ПравоеЗначение;
		Иначе
			ИмяПараметра = УникальноеИмяПараметраЗапроса(ПостфиксПараметров, СчПараметров);
			ОписаниеПараметра = "&" + ИмяПараметра;
			ПараметрыЗапроса.Вставить(ИмяПараметра, СтруктураОтбора.ПравоеЗначение);
		КонецЕсли;
		
		Если Не СтруктураОтбора.Свойство("ОтносительныйПуть") Или СтруктураОтбора.ОтносительныйПуть Тогда
			ВыражениеЛевогоЗначения = ВыраженияПолей[НРег(СтруктураОтбора.ЛевоеЗначение)];
			Если ВыражениеЛевогоЗначения = Неопределено И ПсевдонимРегистра <> Неопределено Тогда
				ВыражениеЛевогоЗначения = ПсевдонимРегистра + "." + СтруктураОтбора.ЛевоеЗначение;	
			КонецЕсли;	
			
			ТекстУсловия = Предикат + ВыражениеЛевогоЗначения + " " + СтруктураОтбора.ВидСравнения + "(" + ОписаниеПараметра + ")";				
		Иначе
			ТекстУсловия = Предикат + СтруктураОтбора.ЛевоеЗначение + " " + СтруктураОтбора.ВидСравнения + " " + ОписаниеПараметра + " ";					
		КонецЕсли;
		Если ПриемникУсловий = Неопределено Тогда
			ДобавитьУсловие(ОператорВыбратьЗапроса, ТекстУсловия);
		Иначе
			ПриемникУсловий.Добавить(ТекстУсловия);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры		

Функция УстановитьПараметрОтбораПоИсключаемомуРегистратору(ОписаниеПакета, ИсключаемыйРегистратор, Постфикс) Экспорт
	Если ТипЗнч(ИсключаемыйРегистратор) = Тип("Строка") Тогда
		ИмяПараметраИсключаемыеРегистраторы = ИсключаемыйРегистратор;
	Иначе
		ИмяПараметраИсключаемыеРегистраторы = ИмяПараметраИсключаемыйРегистратор(Постфикс);
		Если ТипЗнч(ИсключаемыйРегистратор) = Тип("Массив") Или ТипЗнч(ИсключаемыйРегистратор) = Тип("СписокЗначений") Тогда
			ЗначениеПараметра = ИсключаемыйРегистратор;
		Иначе
			ЗначениеПараметра = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИсключаемыйРегистратор);
		КонецЕсли;
		ОписаниеПакета.Параметры.Вставить(ИмяПараметраИсключаемыеРегистраторы, ЗначениеПараметра);
	КонецЕсли;	

	Возврат ИмяПараметраИсключаемыеРегистраторы;
КонецФункции

Процедура ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапроса, ИндексОператора, ОписаниеИспользованияФильтра, ВключатьВГруппировку = Ложь) Экспорт
	Для Каждого ДополнительноеПоле Из ОписаниеИспользованияФильтра.ДополнительныеПоля Цикл
		ВыражениеПоля = ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра(ДополнительноеПоле.Ключ, ОписаниеИспользованияФильтра);
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, ИндексОператора, ВыражениеПоля, ДополнительноеПоле.Ключ);
		Если ВключатьВГруппировку Тогда
			ДобавитьГруппировку(ОписаниеЗапроса.Операторы[ИндексОператора], ВыражениеПоля);
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры	

Процедура ДобавитьПостоянныеПоляВОписаниеЗапроса(ОписаниеПакетаЗапросов, ОписаниеЗапроса, ПостоянныеПоля, ПостфиксИменаПараметров) Экспорт
	Если ПостоянныеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого Поле Из ПостоянныеПоля Цикл
		ИмяПараметра = ИмяПараметраЭлементаФильтра(Поле.Ключ, ПостфиксИменаПараметров);
		ОписаниеПакетаЗапросов.Параметры.Вставить(ИмяПараметра, Поле.Значение);
		
		ВыражениеПоля = "&" + ИмяПараметра; 
		ИндексОператора = 0;
		Для Каждого Оператор Из ОписаниеЗапроса.Операторы Цикл
			ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, ИндексОператора, ВыражениеПоля, Поле.Ключ);
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры	

Процедура УстановитьПсевдонимыПолей(ОписаниеЗапроса, ПараметрыПостроения) Экспорт
	Если ПараметрыПостроения.СоответствиеПсевдонимовПолей = Неопределено 
		И ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПараметрыПостроения.СоответствиеПсевдонимовПолей <> Неопределено Тогда
		Для Каждого Псевдоним Из ПараметрыПостроения.СоответствиеПсевдонимовПолей Цикл
			ИндексКолонки = ОписаниеЗапроса.Колонки.Найти(Псевдоним.Ключ);
			Если ИндексКолонки <> Неопределено Тогда
				ОписаниеЗапроса.Колонки[ИндексКолонки] = Псевдоним.Значение;	
				
				Для Каждого ОператорЗапроса Из ОписаниеЗапроса.Операторы Цикл
					ОператорЗапроса.ПсевдонимыПолей[ИндексКолонки] = Псевдоним.Значение;
				КонецЦикла;				
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;	
	
	Для Каждого ОператорЗапрос Из ОписаниеЗапроса.Операторы Цикл
		Для Каждого ОписаниеПоляСКД Из ОператорЗапрос.ВыбираемыеПоляСКД Цикл
			Если ПараметрыПостроения.СоответствиеПсевдонимовПолей <> Неопределено 
				И ПараметрыПостроения.СоответствиеПсевдонимовПолей[ОписаниеПоляСКД.Поле] <> Неопределено Тогда
				
				ОписаниеПоляСКД.Поле = ПараметрыПостроения.СоответствиеПсевдонимовПолей[ОписаниеПоляСКД.Поле];
			КонецЕсли;	
						
			Если ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД <> Неопределено 
				И ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД[ОписаниеПоляСКД.Поле] <> Неопределено Тогда
					
				ОписаниеПоляСКД.ПсевдонимСКД = ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД[ОписаниеПоляСКД.Поле];
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры	

Процедура ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеЗапроса, ПоляИндексирования) Экспорт
	Если ПоляИндексирования = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Поле Из ПоляИндексирования Цикл
		ОписаниеЗапроса.ПоляИндексирования.Добавить(Поле);
	КонецЦикла;	
КонецПроцедуры	

Процедура ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, ПсевдонимЗаменяемойТаблицы, ИмяНовойТаблицы) Экспорт
	ОписаниеТаблицы = ОператорЗапроса.ИсточникСоответствие[ПсевдонимЗаменяемойТаблицы];
	ОписаниеТаблицы.Имя = ИмяНовойТаблицы;
КонецПроцедуры	

Процедура УдалитьТаблицуИзОператораЗапроса(ОператорЗапроса, ПсевдонимУдаляемойТаблицы) Экспорт
	ОписаниеТаблицы = ОператорЗапроса.ИсточникСоответствие[ПсевдонимУдаляемойТаблицы];
	ОператорЗапроса.ИсточникСоответствие.Удалить(ПсевдонимУдаляемойТаблицы);
	ИндексУдаляемогоЭлемента = ОператорЗапроса.Таблицы.Найти(ОписаниеТаблицы);
	ОператорЗапроса.Таблицы.Удалить(ИндексУдаляемогоЭлемента);
	                     
	УдаляемыеСоединения = ОператорЗапроса.Соединения.НайтиСтроки(Новый Структура("ПрисоединяемаяТаблица", ПсевдонимУдаляемойТаблицы));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСоединения Цикл
		ОператорЗапроса.Соединения.Удалить(УдаляемаяСтрока);
	КонецЦикла;	
	
	УдаляемыеСоединения = ОператорЗапроса.Соединения.НайтиСтроки(Новый Структура("ВедущаяТаблица", ПсевдонимУдаляемойТаблицы));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСоединения Цикл
		ОператорЗапроса.Соединения.Удалить(УдаляемаяСтрока);
	КонецЦикла;	
КонецПроцедуры	

Процедура ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, ИндексОператораЗапроса, Выражение, Псевдоним, ДобавлятьПолеВРасширениеСКД = Истина) Экспорт
	ИндексПоля = ОписаниеЗапроса.Колонки.Найти(Псевдоним);
	
	Если ИндексПоля = Неопределено Тогда
		ОписаниеЗапроса.Колонки.Добавить(Псевдоним);
		ИндексЗапроса = 0;
		Для Каждого Запрос Из ОписаниеЗапроса.Операторы Цикл
			Если ИндексЗапроса = ИндексОператораЗапроса Тогда
				ОписаниеЗапроса.Операторы[ИндексЗапроса].ВыбираемыеПоля.Добавить(Выражение);
			Иначе
				ОписаниеЗапроса.Операторы[ИндексЗапроса].ВыбираемыеПоля.Добавить("NULL");
			КонецЕсли;	
			Запрос.ПсевдонимыПолей.Добавить(Псевдоним);
			ИндексЗапроса = ИндексЗапроса + 1;
		КонецЦикла;		
	Иначе
		ОписаниеЗапроса.Операторы[ИндексОператораЗапроса].ВыбираемыеПоля[ИндексПоля] = Выражение;
	КонецЕсли;	
	
	Если ДобавлятьПолеВРасширениеСКД И ИндексОператораЗапроса = 0 Тогда
		ОписаниеЗапроса.Операторы[ИндексОператораЗапроса].ВыбираемыеПоляСКД.Добавить(Новый Структура("Поле, ПсевдонимСКД", Псевдоним));					
	КонецЕсли;	
КонецПроцедуры	

Процедура ДобавитьУсловие(ОператорЗапроса, Условия) Экспорт
	Если ТипЗнч(Условия) = Тип("Массив") Тогда
		Для Каждого ТекстУсловия Из Условия Цикл
			ОператорЗапроса.Отбор.Добавить(ТекстУсловия);	
		КонецЦикла;
	Иначе	
		ОператорЗапроса.Отбор.Добавить(Условия);
	КонецЕсли;	
КонецПроцедуры	

Процедура ДобавитьУсловиеСоединения(ОператорЗапроса, ПсевдонимСоединяемойТаблицы, Условия) Экспорт
	ОписаниеСоединения = ОператорЗапроса.Соединения.НайтиСтроки(Новый Структура("ПрисоединяемаяТаблица", ПсевдонимСоединяемойТаблицы))[0];
	
	Если ТипЗнч(Условия) = Тип("Строка") Тогда
		ОписаниеСоединения.Условия.Добавить("(" + Условия + ")");
	Иначе
		Для Каждого СтрокаУсловия Из Условия Цикл
			ОписаниеСоединения.Условия.Добавить("(" + СтрокаУсловия + ")");
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры	

Процедура ЗаменитьТекстВУсловииЗапроса(ОператорЗапроса, ЗаменяемыйТекст, НовыйТекст) Экспорт
	Для ИндексУсловия = 0 По ОператорЗапроса.Отбор.Количество() - 1 Цикл
		ОператорЗапроса.Отбор[ИндексУсловия] = СтрЗаменить(ОператорЗапроса.Отбор[ИндексУсловия], ЗаменяемыйТекст, НовыйТекст);	
	КонецЦикла;		
КонецПроцедуры

Функция ОписаниеТаблицыЗапросаПоПсевдониму(ОператорЗапроса, ПсевдонимТаблицы) Экспорт
	Возврат ОператорЗапроса.ИсточникСоответствие[ПсевдонимТаблицы];
КонецФункции	

Процедура ЗаменитьВедущуюТаблицуВСоединении(ОператорЗапроса, ПсевдонимСоединяемойТаблицы, ПсевдонимНовойВедущейТаблицы) Экспорт
	ОписаниеСоединения = ОператорЗапроса.Соединения.НайтиСтроки(Новый Структура("ПрисоединяемаяТаблица", ПсевдонимСоединяемойТаблицы))[0];
	ОписаниеСоединения.ВедущаяТаблица = ПсевдонимНовойВедущейТаблицы;
КонецПроцедуры	

Процедура ОчиститьУсловияСоединения(ОператорЗапроса, ПсевдонимСоединяемойТаблицы) Экспорт
	ОписаниеСоединения = ОператорЗапроса.Соединения.НайтиСтроки(Новый Структура("ПрисоединяемаяТаблица", ПсевдонимСоединяемойТаблицы))[0];	
	ОписаниеСоединения.Условия.Очистить();
КонецПроцедуры	

Процедура УстановитьТипСоединения(ОператорЗапроса, ПсевдонимСоединяемойТаблицы, ТипСоединения) Экспорт
	ОписаниеСоединения = ОператорЗапроса.Соединения.НайтиСтроки(Новый Структура("ПрисоединяемаяТаблица", ПсевдонимСоединяемойТаблицы))[0];
	ОписаниеСоединения.ТипСоединения = ТипСоединения;
КонецПроцедуры	

#КонецОбласти

#Область ПараметрыПостроенияЗапросов

Функция ИсключаемыеРегистраторы(ПараметрыПостроения) Экспорт 
	ИсключаемыеРегистраторы = Новый Массив;
	Для Каждого Отбор Из ПараметрыПостроения.Отборы Цикл                    
		Если ЭтоЭлементОтбораПоИсключаемомуРегистратору(Отбор) Тогда			
			Если ТипЗнч(Отбор.ПравоеЗначение) = Тип("Массив") Тогда
				Для Каждого ЭлементОтбора Из Отбор.ПравоеЗначение Цикл		
					Если Не ЭлементОтбора.Пустая() Тогда
						ИсключаемыеРегистраторы.Добавить(ЭлементОтбора);
					КонецЕсли; 	
				КонецЦикла;
			Иначе
				ИсключаемыеРегистраторы.Добавить(Отбор.ПравоеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ИсключаемыеРегистраторы;
КонецФункции	

Функция ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра) Экспорт 
	
	Возврат ПараметрыПостроения.ФормироватьСПериодичностьДень
		И ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Секунда;
		
	КонецФункции
	
Функция ВключатьЗаписиНаНачалоПериода(ПараметрыПостроения, ОписаниеРегистра) Экспорт 
	
	Возврат ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода
		И (ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Секунда
			Или ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.День
			Или ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Месяц
			Или ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Квартал
			Или ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Год);
			
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра(ИмяДопПоля, ОписаниеИспользованиеФильтра) Экспорт
	Если ОписаниеИспользованиеФильтра.ФильтрВВидеВТ Тогда
		Возврат ОписаниеИспользованиеФильтра.ДополнительныеПоля[ИмяДопПоля];
	Иначе
		Возврат "&" + ОписаниеИспользованиеФильтра.ДополнительныеПоля[ИмяДопПоля];
	КонецЕсли;	
КонецФункции

Функция ОписаниеПериодаДляСоздатьВТИмяРегистра() Экспорт
	ОписаниеПериода = Новый Структура;
	ОписаниеПериода.Вставить("Период");
	ОписаниеПериода.Вставить("ДатаНачала");
	ОписаниеПериода.Вставить("ДатаОкончания");
	
	Возврат ОписаниеПериода;
КонецФункции

Функция ВыраженияПолейОператораЗапроса(ОператорЗапроса)
	ВыраженияПолей = Новый Соответствие;
	Для ИндексПоля = 0 По ОператорЗапроса.ВыбираемыеПоля.Количество() - 1 Цикл
		ВыраженияПолей.Вставить(НРег(ОператорЗапроса.ПсевдонимыПолей[ИндексПоля]), ОператорЗапроса.ВыбираемыеПоля[ИндексПоля]);			
	КонецЦикла;	
	
	Возврат ВыраженияПолей;
КонецФункции

Функция ВыражениеПоляПоПсевдониму(ОператорЗапроса, ПсевдонимПоля) Экспорт
	Для ИндексПоля = 0 По ОператорЗапроса.ВыбираемыеПоля.Количество() - 1 Цикл
		Если НРег(ОператорЗапроса.ПсевдонимыПолей[ИндексПоля]) = НРег(ПсевдонимПоля) Тогда
			Возврат ОператорЗапроса.ВыбираемыеПоля[ИндексПоля];	
		КонецЕсли;	
	КонецЦикла;		
	
	Возврат Неопределено;
КонецФункции	

Функция ВыражениеПоляНаследуемыйРесурс(Ресурс, ПараметрыНаследованияРесурсов, ПараметрыЗапроса)
	
	ПараметрыНаследования = Неопределено;
	Если Не ПараметрыНаследованияРесурсов.Свойство(Ресурс, ПараметрыНаследования) Тогда
		Возврат "РегистрСведенийРесурсы." + Ресурс;
	КонецЕсли;
	
	ШаблонПоляРесурсы = "
	|	ВЫБОР
	|		КОГДА ИзмеренияДаты.МаксимальныйПериодРесурсы <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ШаблонРесурсы
	|		ИНАЧЕ &ШаблонНаследованиеРесурсы
	|	КОНЕЦ";
	
	ШаблонПоляРесурсы = СтрЗаменить(ШаблонПоляРесурсы, "&ШаблонРесурсы", "РегистрСведенийРесурсы." + Ресурс);
	
	Если ПараметрыНаследования.ПравилоНаследования = ПравилоНаследованияНаследование() Тогда
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонПоляРесурсы, "&ШаблонНаследованиеРесурсы", "РегистрСведенийИзмерения." + Ресурс);
	ИначеЕсли ПараметрыНаследования.ПравилоНаследования = ПравилоНаследованияФиксированное() Тогда
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонПоляРесурсы, "&ШаблонНаследованиеРесурсы", "&ПараметрыНаследования" + Ресурс);
		ПараметрыЗапроса.Вставить("ПараметрыНаследования" + Ресурс, ПараметрыНаследования.Значение);
	Иначе 
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонПоляРесурсы, "&ШаблонНаследованиеРесурсы", "NULL");
	КонецЕсли;
	
	Возврат ВыражениеПоляРесурс;
	
КонецФункции

Функция ОписаниеСоединенияПоПрисоединяемойТаблице(ОператорЗапроса, ПсевдонимСоединяемойТаблицы)
	НайденныеСтроки = ОператорЗапроса.Соединения.НайтиСтроки(Новый Структура("ПрисоединяемаяТаблица", ПсевдонимСоединяемойТаблицы));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

Процедура ДобавитьГруппировку(ОператорЗапроса, ВыражениеГруппировки) Экспорт
	ОператорЗапроса.Группировка.Добавить(ВыражениеГруппировки);	
КонецПроцедуры

Процедура ЗаменитьТекстВУсловииСоединения(ОператорЗапроса, ПсевдонимСоединяемойТаблицы, ЗаменяемыйТекст, НовыйТекст) Экспорт
	ОписаниеСоединения = ОператорЗапроса.Соединения.НайтиСтроки(Новый Структура("ПрисоединяемаяТаблица", ПсевдонимСоединяемойТаблицы))[0];
	
	Для ИндексУсловия = 0 По ОписаниеСоединения.Условия.Количество() - 1 Цикл
		ОписаниеСоединения.Условия[ИндексУсловия] = СтрЗаменить(ОписаниеСоединения.Условия[ИндексУсловия], ЗаменяемыйТекст, НовыйТекст);	
	КонецЦикла;		
КонецПроцедуры

Процедура УдалитьКолонкуИзОписаниеЗапроса(ОписаниеЗапроса, ИмяУдаляемойКолонки)
	ИндексПоля = ОписаниеЗапроса.Колонки.Найти(ИмяУдаляемойКолонки);
	ОписаниеЗапроса.Колонки.Удалить(ИндексПоля);
	
	Для Каждого Запрос Из ОписаниеЗапроса.Операторы Цикл
		Запрос.ВыбираемыеПоля.Удалить(ИндексПоля);
		Запрос.ПсевдонимыПолей.Удалить(ИндексПоля);
	КонецЦикла;	
КонецПроцедуры

Функция ВыражениеДопПоляФильтраПоПсевдонимуИсточника(ИмяДопПоля, ПсевдонимТаблицыИсточника)
	Возврат ПсевдонимТаблицыИсточника + "." + ИмяДопПоля;		
КонецФункции	

Процедура ДобавитьДополнительныеПоляПоПсевдонимуИсточника(ОписаниеЗапроса, ИндексОператора, ПсевдонимТаблицыИсточника, ДополнительныеПоляФильтра, ВключатьВГруппировку = Ложь)
	Для Каждого ДобавляемоеПоле Из ДополнительныеПоляФильтра Цикл
		ВыражениеПоля = ВыражениеДопПоляФильтраПоПсевдонимуИсточника(ДобавляемоеПоле, ПсевдонимТаблицыИсточника);
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, ИндексОператора, ВыражениеПоля, ДобавляемоеПоле);
		Если ВключатьВГруппировку Тогда
			ДобавитьГруппировку(ОписаниеЗапроса.Операторы[ИндексОператора], ВыражениеПоля);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Функция ОписаниеЗапросаПакетаПоИмениВТ(ОписаниеПакетаЗапросов, ИмяСоздаваемойВТ)
	Для Каждого ЗапросПакета Из ОписаниеПакетаЗапросов.ЗапросыПолученияДанных Цикл
		Если ТипЗнч(ЗапросПакета) = Тип("Структура")
			И ЗапросПакета.ТаблицаДляПомещения = ИмяСоздаваемойВТ Тогда
			
			Возврат ЗапросПакета;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	

Процедура ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, ИмяВТ)
	Если Ложь Тогда
		ОписаниеПакетаЗапросов = Новый Массив;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(Запрос);
	
	Запрос.Текст = "УНИЧТОЖИТЬ " + ИмяВТ;
КонецПроцедуры

#Область Интеграция

Процедура ПриПолученииЗапросаВТИмяРегистра(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы)
	ЗарплатаКадрыПериодическиеРегистрыВнутренний.ПриПолученииЗапросаВТИмяРегистра(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);	
КонецПроцедуры	

Процедура ПриПолученииЗапросаВТИмяРегистраСрез(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, СрезПоследних, ИмяСоздаваемойТаблицы)
	ЗарплатаКадрыПериодическиеРегистрыВнутренний.ПриПолученииЗапросаВТИмяРегистраСрез(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, СрезПоследних, ИмяСоздаваемойТаблицы);	
КонецПроцедуры	

#КонецОбласти

#Область ИнтервальныеРегистры

Процедура СоздатьВТРегистраторыДляОбновления(ИмяРегистра, МенеджерВременныхТаблиц, ИзмеренияОтбора, НаборЗаписей) Экспорт
	
	Запрос = Новый Запрос;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОбновлятьУвольнение", Истина);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрСведений.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторыДляОбновления
		|ИЗ
		|	РегистрСведений.#ИмяРегистра КАК РегистрСведений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаОтбора КАК ТаблицаОтбора
		|		ПО РегистрСведений.ИзмеренияОтбора_ = ТаблицаОтбора.ИзмеренияОтбора_
		|ГДЕ
		|	РегистрСведений.Регистратор <> &Регистратор
		|	И РегистрСведений.ВидСобытия = &ВидСобытия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТаблицаОтбора";
		
	МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмеренияОтбора, ",", Истина, Истина);
	МассивСтрокСоединения = Новый Массив;
	Разделитель = Символы.ПС + "			И ";
	Для каждого Измерение Из МассивИзмерений Цикл
	
		МассивСтрокСоединения.Добавить(Разделитель);
		МассивСтрокСоединения.Добавить("РегистрСведений.");
		МассивСтрокСоединения.Добавить(Измерение);
		МассивСтрокСоединения.Добавить(" = ТаблицаОтбора.");
		МассивСтрокСоединения.Добавить(Измерение);
	
	КонецЦикла; 
	МассивСтрокСоединения.Удалить(0);
	ТекстСоединения = СтрСоединить(МассивСтрокСоединения);
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("ВидСобытия", Перечисления.ВидыКадровыхСобытий.Увольнение);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяРегистра", ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмеренияОтбора_ = ТаблицаОтбора.ИзмеренияОтбора_", ТекстСоединения);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	Выборка.Следующий();
	Если Выборка.Количество = 0 Тогда
		
		НаборЗаписей.ДополнительныеСвойства.ОбновлятьУвольнение = Ложь;
		Запрос.Текст = "УНИЧТОЖИТЬ ВТРегистраторыДляОбновления";
		Запрос.Выполнить();
	
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросВТИнтервалыПоПервичномуРегистру(Знач ИмяРегистра, Знач МассивИзмерений, Знач ТекстОписанияПолей)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &МаксимальнаяДата
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(РегистрСведений.ДействуетДо, СЕКУНДА, -1)
	|	КОНЕЦ КАК ДатаОкончания,
	|	РегистрСведений.Период КАК ДатаНачала,
	|	РегистрСведений.Период КАК ПериодЗаписи,
	|	РегистрСведений.Регистратор КАК РегистраторЗаписи,
	|	РегистрСведений.Регистратор КАК РегистраторСобытия,
	|	ЛОЖЬ КАК ПустойИнтервал,
	|	РегистрСведений.ДействуетДо КАК ДействуетДо,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодПредыдущейЗаписи, 
	|	#ТекстОписанияПолей
	|ПОМЕСТИТЬ ВТИнтервалы
	|ИЗ
	|	ВТОтборДляПереформирования КАК ВТОтборДляПереформирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.#ИмяРегистра КАК РегистрСведений
	|		ПО РегистрСведений.ИзмеренияОтбора_ = ВТОтборДляПереформирования.ИзмеренияОтбора_";
	
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
	
		ТекстЗамены = 
			"ВЫБОР
			|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА &МаксимальнаяДата
			|		ИНАЧЕ ДОБАВИТЬКДАТЕ(РегистрСведений.ДействуетДо, СЕКУНДА, -1)
			|	КОНЕЦ";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗамены, "&МаксимальнаяДата");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ДействуетДо КАК ДействуетДо", "ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо");
	
	КонецЕсли; 
	
	МассивСоединения = Новый Массив;
	РазделительСоединения = Символы.ПС + "			И ";
	Для каждого Измерение Из МассивИзмерений Цикл
		МассивСоединения.Добавить(СтрШаблон("РегистрСведений.%1 = ВТОтборДляПереформирования.%1", Измерение));
		ТекстОписанияПолей = СтрЗаменить(ТекстОписанияПолей, "РегистрСведений." + Измерение, "ВТОтборДляПереформирования." + Измерение);
	КонецЦикла; 
	
	ТекстСоединения = СтрСоединить(МассивСоединения, РазделительСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ИзмеренияОтбора_ = ВТОтборДляПереформирования.ИзмеренияОтбора_", ТекстСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолей", ТекстОписанияПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистра", ИмяРегистра);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТОтборДляПереформирования");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросВТИнтервалыПоИнтервальномуРегистру(Знач ИмяРегистра, Знач МассивИзмерений, Знач ТекстОписанияПолей)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведений.ИзмеренияОтбора_ КАК ИзмеренияОтбора_, 
	|	РегистрСведений.Год КАК НачалоГода
	|ПОМЕСТИТЬ ВТГодыИнтерваловПредварительно
	|ИЗ
	|	РегистрСведений.#ИмяРегистраИнтервальный КАК РегистрСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыйНаборЗаписей КАК ВТНовыйНаборЗаписей
	|		ПО (НАЧАЛОПЕРИОДА(ВТНовыйНаборЗаписей.Период, ДЕНЬ) <= РегистрСведений.ДатаОкончания)
	|			И (ВЫБОР
	|				КОГДА ВТНовыйНаборЗаписей.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &МаксимальнаяДата
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТНовыйНаборЗаписей.ДействуетДо, СЕКУНДА, -1)
	|			КОНЕЦ > РегистрСведений.ДатаНачала)
	|			И РегистрСведений.ИзмеренияОтбора_ = ВТНовыйНаборЗаписей.ИзмеренияОтбора_
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТНовыйНаборЗаписей.ИзмеренияОтбора_, 
	|	НАЧАЛОПЕРИОДА(ВТНовыйНаборЗаписей.Период, ГОД)
	|ИЗ
	|	ВТНовыйНаборЗаписей КАК ВТНовыйНаборЗаписей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГодыИнтервалов.ИзмеренияОтбора_ КАК ИзмеренияОтбора_, 
	|	МИНИМУМ(ГодыИнтервалов.НачалоГода) КАК НачалоГода
	|ПОМЕСТИТЬ ВТГодыИнтервалов
	|ИЗ
	|	ВТГодыИнтерваловПредварительно КАК ГодыИнтервалов
	|СГРУППИРОВАТЬ ПО
	|	ГодыИнтервалов.ИзмеренияОтбора_
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведений.ДатаОкончания,
	|	РегистрСведений.ДатаНачала,
	|	РегистрСведений.ПериодПредыдущейЗаписи,
	|	РегистрСведений.ПериодЗаписи,
	|	РегистрСведений.РегистраторЗаписи,
	|	РегистрСведений.РегистраторСобытия,
	|	РегистрСведений.ПустойИнтервал,
	|	РегистрСведений.ДействуетДо КАК ДействуетДо,
	|	#ТекстОписанияПолейСуществующийНабор
	|ПОМЕСТИТЬ ВТИнтервалы
	|ИЗ
	|	РегистрСведений.#ИмяРегистраИнтервальный КАК РегистрСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГодыИнтервалов КАК ВТГодыИнтервалов
	|		ПО РегистрСведений.ДатаОкончания >= ВТГодыИнтервалов.НачалоГода
	|			И РегистрСведений.ДатаНачала >= ВТГодыИнтервалов.НачалоГода
	|			И РегистрСведений.ИзмеренияОтбора_ = ВТГодыИнтервалов.ИзмеренияОтбора_
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТНовыйНаборЗаписей.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &МаксимальнаяДата
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТНовыйНаборЗаписей.ДействуетДо, СЕКУНДА, -1)
	|	КОНЕЦ,
	|	ВТНовыйНаборЗаписей.Период,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ВТНовыйНаборЗаписей.Период,
	|	ВТНовыйНаборЗаписей.Регистратор,
	|	ВТНовыйНаборЗаписей.Регистратор,
	|	ЛОЖЬ,
	|	ВТНовыйНаборЗаписей.ДействуетДо,
	|	#ТекстОписанияПолейНовыйНабор
	|ИЗ
	|	ВТНовыйНаборЗаписей КАК ВТНовыйНаборЗаписей
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТГодыИнтерваловПредварительно
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТГодыИнтервалов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТНовыйНаборЗаписей";
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
	
		ТекстЗамены = 
			"ВЫБОР
			|				КОГДА ВТНовыйНаборЗаписей.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА &МаксимальнаяДата
			|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТНовыйНаборЗаписей.ДействуетДо, СЕКУНДА, -1)
			|			КОНЕЦ > РегистрСведений.ДатаНачала";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗамены, "ИСТИНА");
		
		ТекстЗамены = 
			"ВЫБОР
			|		КОГДА ВТНовыйНаборЗаписей.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА &МаксимальнаяДата
			|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТНовыйНаборЗаписей.ДействуетДо, СЕКУНДА, -1)
			|	КОНЕЦ";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗамены, "&МаксимальнаяДата");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТНовыйНаборЗаписей.ДействуетДо,", "ДАТАВРЕМЯ(1, 1, 1),");
	
	КонецЕсли;
	
	МассивСтрокИзмерений = Новый Массив;
	МассивСтрокСоединения = Новый Массив;
	МассивСтрокГруппировки = Новый Массив;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	РазделительСоединения = Символы.ПС + "			И ";
	
	Для каждого Измерение Из МассивИзмерений Цикл
	
		МассивСтрокИзмерений.Добавить(СтрШаблон("РегистрСведений.%1 КАК %1", Измерение));
		МассивСтрокСоединения.Добавить(СтрШаблон("РегистрСведений.%1 = ВТНовыйНаборЗаписей.%1", Измерение));
		МассивСтрокГруппировки.Добавить("ГодыИнтервалов." + Измерение);
	
	КонецЦикла; 
	
	ТекстИзмеренийРегистрСведений = СтрСоединить(МассивСтрокИзмерений, Разделитель);
	ТекстСоединенияГодыИнтервалов = СтрСоединить(МассивСтрокСоединения, РазделительСоединения);
	ТекстИзмеренийГруппировкиГодыИнтервалов = СтрСоединить(МассивСтрокГруппировки, Разделитель);
	
	ТекстИзмеренийНовыйНабор = СтрЗаменить(ТекстИзмеренийРегистрСведений, "РегистрСведений.", "ВТНовыйНаборЗаписей.");
	ТекстИзмеренийГодыИнтервалов = СтрЗаменить(ТекстИзмеренийРегистрСведений, "РегистрСведений.", "ГодыИнтервалов.");
	ТекстСоединенияИнтервалы = СтрЗаменить(ТекстСоединенияГодыИнтервалов, "ВТНовыйНаборЗаписей.", "ВТГодыИнтервалов.");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ИзмеренияОтбора_ = ВТНовыйНаборЗаписей.ИзмеренияОтбора_", ТекстСоединенияГодыИнтервалов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ИзмеренияОтбора_ = ВТГодыИнтервалов.ИзмеренияОтбора_", ТекстСоединенияИнтервалы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ИзмеренияОтбора_ КАК ИзмеренияОтбора_", ТекстИзмеренийРегистрСведений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТНовыйНаборЗаписей.ИзмеренияОтбора_", ТекстИзмеренийНовыйНабор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГодыИнтервалов.ИзмеренияОтбора_ КАК ИзмеренияОтбора_", ТекстИзмеренийГодыИнтервалов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГодыИнтервалов.ИзмеренияОтбора_", ТекстИзмеренийГруппировкиГодыИнтервалов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистра", ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолейСуществующийНабор", ТекстОписанияПолей);
	ТекстОписанияПолейНовыйНабор = СтрЗаменить(ТекстОписанияПолей, "РегистрСведений", "ВТНовыйНаборЗаписей");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолейНовыйНабор", ТекстОписанияПолейНовыйНабор);
	Возврат ТекстЗапроса;
	
КонецФункции
	
Функция ТекущиеДанныеРегистра(ИмяРегистра, МенеджерВременныхТаблиц, ИзмерениеЗаписи, ТекстПолейРегистра)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Источник.Измерение_ КАК Измерение_
		|ПОМЕСТИТЬ ВТОтбор
		|ИЗ
		|	ВТИнтервалы КАК Источник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрСведений.ДатаОкончания КАК ДатаОкончания,
		|	РегистрСведений.ДатаНачала КАК ДатаНачала,
		|	РегистрСведений.ПериодЗаписи КАК ПериодЗаписи,
		|	РегистрСведений.РегистраторЗаписи КАК РегистраторЗаписи,
		|	РегистрСведений.РегистраторСобытия КАК РегистраторСобытия,
		|	РегистрСведений.Год КАК Год,
		|	РегистрСведений.ПериодПредыдущейЗаписи КАК ПериодПредыдущейЗаписи,
		|	РегистрСведений.ПустойИнтервал КАК ПустойИнтервал,
		|	РегистрСведений.ДействуетДо КАК ДействуетДо,
		|	РегистрСведений.Поля_
		|ИЗ
		|	РегистрСведений_ИмяРегистра КАК РегистрСведений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтбор КАК Отбор
		|		ПО РегистрСведений.Измерение_ = Отбор.Измерение_
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистрСведений.Измерение_,
		|	Год
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИнтервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОтбор";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Измерение_", ИзмерениеЗаписи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.Поля_", ТекстПолейРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений_ИмяРегистра", "РегистрСведений." + ИмяРегистра);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	ДанныеРегистра = Результат.Выгрузить();
	ДанныеРегистра.Индексы.Добавить(ИзмерениеЗаписи+",Год");
	Возврат ДанныеРегистра;
	
КонецФункции

Функция НаборЗаписейПоГоду(ИмяРегистра, РассчитанныеПериоды, Год)

	НаборЗаписей = РассчитанныеПериоды.Получить(Год);
	Если НаборЗаписей = Неопределено Тогда
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		РассчитанныеПериоды.Вставить(Год, НаборЗаписей);
	КонецЕсли;
	
	Возврат НаборЗаписей;

КонецФункции 

Процедура ОбновитьРесурсыИнтервальногоРегистра(Знач ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	
	ИмяИнтервальногоРегистра = ИмяРегистра + "Интервальный";
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
	ОписаниеИнтервальногоРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяИнтервальногоРегистра);
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПервичныйРегистр.Измерения_ КАК Измерения_
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ПервичныйРегистр_ КАК ПервичныйРегистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИнтервальныйРегистр_ КАК ИнтервальныйРегистр
		|		ПО ПервичныйРегистр.ИзмеренияСоединение_ = ИнтервальныйРегистр.ИзмеренияСоединение_
		|			И ПервичныйРегистр.Регистратор = ИнтервальныйРегистр.РегистраторЗаписи
		|			И ПервичныйРегистр.Период = ИнтервальныйРегистр.ПериодЗаписи
		|			И (ПервичныйРегистр.РесурсыСоединение_ <> ИнтервальныйРегистр.Ресурсы_)
		|
		|;
		|//////////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ИнтервальныйРегистр.Измерения_ КАК Измерения_,
		|	ИнтервальныйРегистр.Ресурсы_ КАК ИнтервальныеРесурсы_,
		|	ИнтервальныйРегистр.Реквизиты_ КАК Реквизиты_,
		|	ПервичныйРегистр.Ресурсы_ КАК ПервичныеРесурсы_
		|ИЗ
		|	ПервичныйРегистр_ КАК ПервичныйРегистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
		|		ПО ВТСотрудники.ИзмеренияСоединение_ = ПервичныйРегистр.ИзмеренияСоединение_
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИнтервальныйРегистр_ КАК ИнтервальныйРегистр
		|		ПО ПервичныйРегистр.ИзмеренияСоединение_ = ИнтервальныйРегистр.ИзмеренияСоединение_
		|			И ПервичныйРегистр.Регистратор = ИнтервальныйРегистр.РегистраторЗаписи
		|			И ПервичныйРегистр.Период = ИнтервальныйРегистр.ПериодЗаписи
		|УПОРЯДОЧИТЬ ПО
		|	ИнтервальныйРегистр.ИзмеренияПорядок_";
	
	Разделитель = "," + Символы.ПС + Символы.Таб;
	РазделительСоединение = Символы.ПС + "			И ";
	МассивИзмеренияПервичногоРегистра = Новый Массив;
	МассивПолейИнтервальногоРегистра = Новый Массив;
	МассивПолейПервичногоРегистра = Новый Массив;
    МассивИзмеренияСоединение = Новый Массив;
	МассивРесурсыСоединение = Новый Массив;
	МассивИзмеренияПорядок = Новый Массив;
	ЗначенияИзмерений = Новый Структура;
	
	Для каждого Измерение Из ОписаниеИнтервальногоРегистра.Измерения Цикл
	
		МассивПолейИнтервальногоРегистра.Добавить(Разделитель);
		МассивПолейИнтервальногоРегистра.Добавить("ИнтервальныйРегистр.");
		МассивПолейИнтервальногоРегистра.Добавить(Измерение);
		МассивПолейИнтервальногоРегистра.Добавить(" КАК ");
		МассивПолейИнтервальногоРегистра.Добавить(Измерение);
		
		Если ОписаниеРегистра.Измерения.Найти(Измерение) <> Неопределено Тогда
			
			ЗначенияИзмерений.Вставить(Измерение);
			
			МассивИзмеренияПервичногоРегистра.Добавить(Разделитель);
			МассивИзмеренияПервичногоРегистра.Добавить("ПервичныйРегистр.");
			МассивИзмеренияПервичногоРегистра.Добавить(Измерение);
			МассивИзмеренияПервичногоРегистра.Добавить(" КАК ");
			МассивИзмеренияПервичногоРегистра.Добавить(Измерение);
			
			МассивИзмеренияСоединение.Добавить(РазделительСоединение);
			МассивИзмеренияСоединение.Добавить("ПервичныйРегистр.");
			МассивИзмеренияСоединение.Добавить(Измерение);
			МассивИзмеренияСоединение.Добавить(" = ИнтервальныйРегистр.");
			МассивИзмеренияСоединение.Добавить(Измерение);
			
			МассивИзмеренияПорядок.Добавить(Разделитель);
			МассивИзмеренияПорядок.Добавить("ИнтервальныйРегистр.");
			МассивИзмеренияПорядок.Добавить(Измерение);
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	РазделительСоединение = Символы.ПС + "				ИЛИ ";
	Для каждого Ресурс Из ОписаниеИнтервальногоРегистра.Ресурсы Цикл
		
		Если ОписаниеРегистра.Ресурсы.Найти(Ресурс) <> Неопределено Тогда
			
			МассивПолейПервичногоРегистра.Добавить(Разделитель);
			МассивПолейПервичногоРегистра.Добавить("ПервичныйРегистр.");
			МассивПолейПервичногоРегистра.Добавить(Ресурс);
			МассивПолейПервичногоРегистра.Добавить(" КАК ");
			МассивПолейПервичногоРегистра.Добавить(Ресурс);
			
			МассивРесурсыСоединение.Добавить(РазделительСоединение);
			МассивРесурсыСоединение.Добавить("ПервичныйРегистр.");
			МассивРесурсыСоединение.Добавить(Ресурс);
			МассивРесурсыСоединение.Добавить(" <> ИнтервальныйРегистр.");
			МассивРесурсыСоединение.Добавить(Ресурс);
			
		Иначе
			
			МассивПолейИнтервальногоРегистра.Добавить(Разделитель);
			МассивПолейИнтервальногоРегистра.Добавить("ИнтервальныйРегистр.");
			МассивПолейИнтервальногоРегистра.Добавить(Ресурс);
			МассивПолейИнтервальногоРегистра.Добавить(" КАК ");
			МассивПолейИнтервальногоРегистра.Добавить(Ресурс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Реквизит Из ОписаниеИнтервальногоРегистра.Реквизиты Цикл
	
		МассивПолейИнтервальногоРегистра.Добавить(Разделитель);
		МассивПолейИнтервальногоРегистра.Добавить("ИнтервальныйРегистр.");
		МассивПолейИнтервальногоРегистра.Добавить(Реквизит);
		МассивПолейИнтервальногоРегистра.Добавить(" КАК ");
		МассивПолейИнтервальногоРегистра.Добавить(Реквизит);
		
	КонецЦикла;
	
	МассивПолейИнтервальногоРегистра.Удалить(0);
	МассивИзмеренияСоединение.Удалить(0);
	МассивПолейПервичногоРегистра.Удалить(0);
	МассивРесурсыСоединение.Удалить(0);
	МассивИзмеренияПорядок.Удалить(0);
	МассивИзмеренияПервичногоРегистра.Удалить(0);
	
	ТекстИзмеренияПервичногоРегистра = СтрСоединить(МассивИзмеренияПервичногоРегистра);
	ТекстПолейИнтервальногоРегистра = СтрСоединить(МассивПолейИнтервальногоРегистра);
	ТекстПолейПервичногоРегистра = СтрСоединить(МассивПолейПервичногоРегистра);
	ТекстИзмеренияСоединение = СтрСоединить(МассивИзмеренияСоединение);
	ТекстРесурсыСоединение = СтрСоединить(МассивРесурсыСоединение);
	ТекстСоединенияВТСотрудники = СтрЗаменить(ТекстИзмеренияСоединение, "ИнтервальныйРегистр.", "ВТСотрудники.");
	ТекстИзмеренияПорядок = СтрСоединить(МассивИзмеренияПорядок);
	
	ТекстЗаменыИзмеренияПервичногоРегистра = 
		"ПервичныйРегистр.Измерения_ КАК Измерения_";
		
	ТекстЗаменыПолейИнтервальногоРегистра = 
		"ИнтервальныйРегистр.Измерения_ КАК Измерения_,
		|	ИнтервальныйРегистр.Ресурсы_ КАК ИнтервальныеРесурсы_,
		|	ИнтервальныйРегистр.Реквизиты_ КАК Реквизиты_";
		
	ТекстЗаменыПолейПервичногоРегистра = 
		"ПервичныйРегистр.Ресурсы_ КАК ПервичныеРесурсы_";
		
	ТекстЗаменыСоединенияВТСотрудники = 
		"ВТСотрудники.ИзмеренияСоединение_ = ПервичныйРегистр.ИзмеренияСоединение_";
		
	ТекстЗаменыИзмеренияСоединение = 
		"ПервичныйРегистр.ИзмеренияСоединение_ = ИнтервальныйРегистр.ИзмеренияСоединение_";
		
	ТекстЗаменыРесурсыСоединение = 
		"ПервичныйРегистр.РесурсыСоединение_ <> ИнтервальныйРегистр.Ресурсы_";
		
	ТекстЗаменыИзмеренияПорядок = 
		"ИнтервальныйРегистр.ИзмеренияПорядок_";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПервичныйРегистр_", "РегистрСведений." + ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИнтервальныйРегистр_", "РегистрСведений." + ИмяИнтервальногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыИзмеренияПервичногоРегистра, ТекстИзмеренияПервичногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыПолейИнтервальногоРегистра, ТекстПолейИнтервальногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыСоединенияВТСотрудники, ТекстСоединенияВТСотрудники);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыПолейПервичногоРегистра, ТекстПолейПервичногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыИзмеренияСоединение, ТекстИзмеренияСоединение);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыРесурсыСоединение, ТекстРесурсыСоединение);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыИзмеренияПорядок, ТекстИзмеренияПорядок);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	НаборЗаписей = РегистрыСведений[ИмяИнтервальногоРегистра].СоздатьНаборЗаписей();
	ИзмеренияЗаполнены = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если ИзмеренияЗаполнены 
			И ЗначенияИзмеренийОтличны(ЗначенияИзмерений, Выборка) Тогда
		
			УстановитьОтбор(НаборЗаписей, ЗначенияИзмерений);
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		
		КонецЕсли; 
		
		ИзмеренияЗаполнены = Истина;
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЗаполнитьЗначенияСвойств(ЗначенияИзмерений, Выборка);
		
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда 
		
		УстановитьОтбор(НаборЗаписей, ЗначенияИзмерений);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначенияИзмеренийОтличны(ЗначенияИзмерений, ОбъектСравнения)
	
	Для каждого КлючИЗначение Из ЗначенияИзмерений Цикл
	
		Если КлючИЗначение.Значение <> ОбъектСравнения[КлючИЗначение.Ключ] Тогда
			Возврат Истина;
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьОтбор(НаборЗаписей, ЗначенияИзмерений)
	
	Для каждого КлючИЗначение Из ЗначенияИзмерений Цикл
		НаборЗаписей.Отбор[КлючИЗначение.Ключ].Значение = КлючИЗначение.Значение;
		НаборЗаписей.Отбор[КлючИЗначение.Ключ].Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиВозвратныйРегистрВИнтервальныйРегистрСведений(ИмяРегистра, ПараметрыПостроения, ПараметрыОбновления = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрСведений.ИзмеренияОтбора_
		|ПОМЕСТИТЬ ВТОтборДляПереформирования
		|ИЗ
		|	РегистрСведений.#ИмяРегистра КАК РегистрСведений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.#ИмяРегистраИнтервальный КАК РегистрСведенийИнтервальный
		|		ПО РегистрСведений.ИзмеренияОтбора_ = РегистрСведенийИнтервальный.ИзмеренияОтбора_
		|ГДЕ
		|	РегистрСведенийИнтервальный.ДатаНачала ЕСТЬ NULL
		|;
		|///////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтборДляПереформирования.*
		|ИЗ
		|	ВТОтборДляПереформирования КАК ОтборДляПереформирования";
	
	Если ПараметрыПостроения.ИзмеренияРасчета <> Неопределено Тогда
		ИзмеренияОтбора = ПараметрыПостроения.ИзмеренияРасчета;
	Иначе
		ИзмеренияОтбора = ПараметрыПостроения.ОсновноеИзмерение;
	КонецЕсли;
	МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмеренияОтбора, ",", Истина, Истина);
	МассивСтрокИзмерений = Новый Массив;
	МассивСтрокСоединения = Новый Массив;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	РазделительСоединения = Символы.ПС + "			И ";
	Для каждого Измерение Из МассивИзмерений Цикл
	
		МассивСтрокИзмерений.Добавить(Разделитель);
		МассивСтрокИзмерений.Добавить("РегистрСведений.");
		МассивСтрокИзмерений.Добавить(Измерение);
		
		МассивСтрокСоединения.Добавить(РазделительСоединения);
		МассивСтрокСоединения.Добавить("РегистрСведений.");
		МассивСтрокСоединения.Добавить(Измерение);
		МассивСтрокСоединения.Добавить(" = РегистрСведенийИнтервальный.");
		МассивСтрокСоединения.Добавить(Измерение);
	
	КонецЦикла;
	
	МассивСтрокИзмерений.Удалить(0);
	МассивСтрокСоединения.Удалить(0);
	ТекстИзмеренияОтбора = СтрСоединить(МассивСтрокИзмерений);
	ТекстСоединения = СтрСоединить(МассивСтрокСоединения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмеренияОтбора_ = РегистрСведенийИнтервальный.ИзмеренияОтбора_", ТекстСоединения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмеренияОтбора_", ТекстИзмеренияОтбора);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяРегистра", ИмяРегистра);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	КонецЕсли;
	ПараметрыПостроения.Вставить("ПолноеПереформирование", Истина);
	ПараметрыПостроения.Вставить("РежимЗагрузки", Истина);
	СформироватьДвиженияИнтервальногоРегистра(ИмяРегистра, Запрос.МенеджерВременныхТаблиц, ПараметрыПостроения, ПараметрыОбновления);

КонецПроцедуры

Функция Интервалы(ИмяРегистра, МенеджерВременныхТаблиц, ИмяИнтервальногоРегистра, ИзмеренияОтбора, ТекстОписанияПолей, ПолноеПереформирование)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмеренияОтбора, ",", Истина, Истина);
	УдалятьВТИнтервалы = МассивИзмерений.Количество() = 1;
	МассивСтрокИзмерений = Новый Массив;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	Для каждого Измерение Из МассивИзмерений Цикл
		МассивСтрокИзмерений.Добавить("ВТИнтервалы." + Измерение);
	КонецЦикла;
	ТекстИзмерений = СтрСоединить(МассивСтрокИзмерений, Разделитель);
	
	Если ПолноеПереформирование Тогда
		ТекстЗапроса = ЗапросВТИнтервалыПоПервичномуРегистру(ИмяРегистра, МассивИзмерений, ТекстОписанияПолей);
	Иначе
		ТекстЗапроса = ЗапросВТИнтервалыПоИнтервальномуРегистру(ИмяРегистра, МассивИзмерений, ТекстОписанияПолей);
	КонецЕсли; 
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекстЗапроса);
	МассивСтрок.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()); 
	ТекстПолейВТИнтервалы = СтрЗаменить(ТекстОписанияПолей, "РегистрСведений", "ВТИнтервалы");
		
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВТИнтервалы.ДатаОкончания,
		|	ВТИнтервалы.ДатаНачала КАК ДатаСобытия,
		|	ВТИнтервалы.ПериодЗаписи КАК ПериодЗаписи,
		|	ВТИнтервалы.РегистраторЗаписи КАК РегистраторЗаписи,
		|	ВТИнтервалы.РегистраторСобытия КАК РегистраторСобытия,
		|	ВТИнтервалы.ПериодПредыдущейЗаписи КАК ПериодПредыдущейЗаписи,
		|	ВТИнтервалы.ПустойИнтервал КАК ПустойИнтервал,
		|	ВТИнтервалы.ДействуетДо КАК ДействуетДо,
		|	ИСТИНА КАК ЭтоНачалоИнтервала,
		|	#ТекстОписанияПолей 
		|ИЗ
		|	ВТИнтервалы КАК ВТИнтервалы
		|
		|ГДЕ
		|	НЕ ВТИнтервалы.ДатаНачала ЕСТЬ NULL
		|	И ВТИнтервалы.ДатаОкончания >= ВТИнтервалы.ДатаНачала
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТИнтервалы.ДатаОкончания,
		|	ВТИнтервалы.ДатаОкончания,
		|	ВТИнтервалы.ПериодЗаписи,
		|	ВТИнтервалы.РегистраторЗаписи,
		|	ВТИнтервалы.РегистраторСобытия,
		|	ВТИнтервалы.ПериодПредыдущейЗаписи,
		|	ВТИнтервалы.ПустойИнтервал КАК ПустойИнтервал,
		|	ВТИнтервалы.ДействуетДо КАК ДействуетДо,
		|	ЛОЖЬ,
		|	#ТекстОписанияПолей
		|ИЗ
		|	ВТИнтервалы КАК ВТИнтервалы
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТИнтервалы.ИзмеренияОтбора_,
		|	ДатаСобытия,
		|	ПериодЗаписи";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолей", ТекстПолейВТИнтервалы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТИнтервалы.ИзмеренияОтбора_", ТекстИзмерений);
	МассивСтрок.Добавить(ТекстЗапроса);
	Запрос.Текст = СтрСоединить(МассивСтрок);
	Если УдалятьВТИнтервалы Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТИнтервалы");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МаксимальнаяДата", МаксимальнаяДатаСтрокой());
	Результат = Запрос.Выполнить();
	Возврат Результат.Выбрать();
	
КонецФункции

Процедура ЗаполнитьПоляРегистраПоОписанию(Знач ОписаниеРегистра, ТекстОписанияПолей, ПоляРегистра = "")
	
	МассивСтрокОписанияПолей = Новый Массив;
	Если ЗначениеЗаполнено(ТекстОписанияПолей) Тогда
		МассивСтрокОписанияПолей.Добавить(ТекстОписанияПолей);
	КонецЕсли;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	МассивСтрокПолейРегистра = Новый Массив;
	МассивСтрокПолейРегистра.Добавить(ПоляРегистра);
	Для каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		Если Измерение = "ДатаОкончания"
			Или Измерение = "ДатаНачала"
			Или Измерение = "ПериодЗаписи" 
			Или Измерение = "Год" Тогда
			
			Продолжить;
		КонецЕсли;
		
		МассивСтрокОписанияПолей.Добавить(СтрШаблон("РегистрСведений.%1 КАК %1", Измерение));
		
		МассивСтрокПолейРегистра.Добавить(", ");
		МассивСтрокПолейРегистра.Добавить(Измерение);
	КонецЦикла; 
	
	Для каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		Если Ресурс = "ПериодПредыдущейЗаписи" 
			Или Ресурс = "ДействуетДо" Тогда
			
			Продолжить;
		КонецЕсли; 
		
		МассивСтрокОписанияПолей.Добавить(СтрШаблон("РегистрСведений.%1 КАК %1", Ресурс));
		
		МассивСтрокПолейРегистра.Добавить(", ");
		МассивСтрокПолейРегистра.Добавить(Ресурс);
	КонецЦикла; 
	
	Для каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		Если Реквизит = "ПустойИнтервал" 
			Или Реквизит = "РегистраторЗаписи" 
			Или Реквизит = "РегистраторСобытия" Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСтрокОписанияПолей.Добавить(СтрШаблон("РегистрСведений.%1 КАК %1", Реквизит));
		
		МассивСтрокПолейРегистра.Добавить(", ");
		МассивСтрокПолейРегистра.Добавить(Реквизит);
	КонецЦикла;
	
	ТекстОписанияПолей = СтрСоединить(МассивСтрокОписанияПолей, Разделитель);
	ПоляРегистра = СтрСоединить(МассивСтрокПолейРегистра);
	
КонецПроцедуры

Процедура ПроверитьИзменениеТекущегоГода(ИмяРегистра, ТекущаяДата, ТекущийГод, НаборЗаписей, РассчитанныеПериоды, ПолноеПереформирование)
	
	Если Не ПолноеПереформирование
		И ТекущийГод < НачалоГода(ТекущаяДата) Тогда
		
		ТекущийГод = НачалоГода(ТекущаяДата);
		НаборЗаписей = НаборЗаписейПоГоду(ИмяРегистра, РассчитанныеПериоды, ТекущийГод);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьИнтервал(Вставка, Источник, ДатаНачала, ЕстьВставка)

	Если Не ЗначениеЗаполнено(Вставка.ПериодПредыдущейЗаписи) Тогда
		Вставка.ПериодПредыдущейЗаписи = Источник.ПериодПредыдущейЗаписи;
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(Вставка, Источник, , "ПериодПредыдущейЗаписи");
	
	Если ДатаНачала <> Источник.ПериодЗаписи 
		И Вставка.Свойство("ВидСобытия") Тогда
		Вставка.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение;
	КонецЕсли; 
	
	Вставка.ДатаНачала 	= ДатаНачала;
	ЕстьВставка 		= Истина;	

КонецПроцедуры

Процедура ОткрытьПустойИнтервал(Вставка, Источник, ДатаНачала, ЕстьВставка, ПараметрыРесурсов)

	Если Не ЗначениеЗаполнено(Вставка.ПериодПредыдущейЗаписи) Тогда
		Вставка.ПериодПредыдущейЗаписи = Источник.ПериодПредыдущейЗаписи;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Вставка.ПериодПредыдущейЗаписи) Тогда
		Вставка.ПериодПредыдущейЗаписи = Вставка.ДатаНачала;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ПараметрыРесурсов Цикл
		
		Ресурс = КлючИЗначение.Ключ;
		Наследование = КлючИЗначение.Значение;
		Если Наследование <> Неопределено 
			И ТипЗнч(Наследование) = Тип("Структура") 
			И Вставка.Свойство(Ресурс) Тогда
			
			ПравилоНаследования = Неопределено;
			Наследование.Свойство("ПравилоНаследования", ПравилоНаследования);
			
			Если ПравилоНаследования = ПравилоНаследованияФиксированное() Тогда
				Вставка[Ресурс] = Наследование.Значение;
			ИначеЕсли ПравилоНаследования = ПравилоНаследованияПустое() Тогда
			    Вставка[Ресурс] = Неопределено;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Вставка.ДатаНачала		= ДатаНачала;
	Вставка.ДействуетДо		= Дата(1, 1, 1);
	Вставка.ПустойИнтервал	= Истина;
	ЕстьВставка				= Истина;

КонецПроцедуры
Процедура ЗакрытьИнтервал(Вставка, НаборЗаписей, ДатаОкончания, ЕстьВставка)

	Если Не ЕстьВставка Тогда
		Возврат;
	КонецЕсли; 
	
	НоваяЗапись 					= НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, Вставка);
	НоваяЗапись.ДатаОкончания		= ДатаОкончания;
	НоваяЗапись.Год 				= НачалоГода(НоваяЗапись.ДатаНачала);
	ЕстьВставка 					= Ложь;
	
КонецПроцедуры
 
Процедура ПоместитьВОжидание(СтруктураОжидания, Источник, Вставка, ЕстьОжидание)

	Если Источник.РегистраторЗаписи <> Вставка.РегистраторЗаписи Тогда
		Источник.ПериодПредыдущейЗаписи = ?(Источник.ДатаНачала < Вставка.ДатаСобытия, Источник.ДатаНачала, Источник.ПериодЗаписи);
	КонецЕсли;
		
	Если Источник.ПустойИнтервал = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураОжидания, Источник,,"ПериодПредыдущейЗаписи");
	СтруктураОжидания.ДействуетДо = Дата(1, 1, 1);
	ЕстьОжидание = Истина;	

КонецПроцедуры

Процедура ЗаписатьНаборЗаписей(НаборЗаписей)
	
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
КонецПроцедуры


#КонецОбласти

#Область КонтрольИзмененияДанныхРегистров

Процедура СоздатьВТСтарыйНаборЗаписей(НаборЗаписей, МенеджерВременныхТаблиц, ИмяВТРезультат = "ВТСтарыйНаборЗаписей") Экспорт
	ТаблицаРегистра = НаборЗаписей.Метаданные().ПолноеИмя();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ВТСтарыйНаборЗаписей 
		|ИЗ
		|	#ТаблицаРегистра КАК РегистрСведений
		|ГДЕ
		|	РегистрСведений.Регистратор = &Регистратор";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСтарыйНаборЗаписей", ИмяВТРезультат);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаРегистра", ТаблицаРегистра);
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Результат = Запрос.Выполнить();
	
	СтарыеЗаписи = Результат.Выбрать();
	СтарыеЗаписи.Следующий();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовыйНабор", СтарыеЗаписи.Количество = 0);
	
КонецПроцедуры

Функция ИмяВТСтарыйНаборРегистра(ИмяРегистра)
	Возврат "ВТ" + ИмяРегистра + "СтарыйНабор";
КонецФункции	

Функция ЗапросВТИзмененияВНаборе(ИмяРегистра, РегистраторТекущегоНабора)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос._Измерения,
	|	ВложенныйЗапрос._ДействуетДо,
	|	&ИзменившиесяРесурсы,
	|	&СтарыеЗначениеРесурсов,
	|	&НовыеЗначенияРесурсов,
	|	ВложенныйЗапрос._Реквизиты,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.ФлагИзменений) = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удаление,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.ФлагИзменений) = -1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Добавление
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтарыйНабор.Период КАК Период,
	|		СтарыйНабор._Измерения КАК _Измерения,
	|		СтарыйНабор._Ресурсы КАК _Ресурсы,
	|		СтарыйНабор._Реквизиты КАК _Реквизиты,
	|		СтарыйНабор._ДействуетДо КАК _ДействуетДо,
	|		1 КАК ФлагИзменений,
	|		ЛОЖЬ КАК НовыйНабор
	|	ИЗ
	|		&СтарыйНабор КАК СтарыйНабор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НовыйНабор.Период,
	|		НовыйНабор._Измерения,
	|		НовыйНабор._Ресурсы,
	|		НовыйНабор._Реквизиты,
	|		НовыйНабор._ДействуетДо,
	|		-1,
	|		ИСТИНА
	|	ИЗ
	|		&ТаблицаРегистра КАК НовыйНабор
	|	ГДЕ
	|		НовыйНабор.Регистратор = &Регистратор) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос._Измерения,
	|	ВложенныйЗапрос._ДействуетДо
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВложенныйЗапрос.ФлагИзменений) <> 0
	|		ИЛИ &УсловиеИзменившиесяРесурсы)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТРезультат", ИмяТаблицыИзмененийВНаборе(ИмяРегистра));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтарыйНабор", ИмяВТСтарыйНаборРегистра(ИмяРегистра));
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра, Истина);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаРегистра", ОписаниеРегистра.ТипРегистра + "." + ИмяРегистра);
	Если ОписаниеРегистра.Свойство("Периодичность")
		И ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтарыйНабор.Период", "ДАТАВРЕМЯ(1,1,1)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыйНабор.Период", "ДАТАВРЕМЯ(1,1,1)");
	КонецЕсли;
	
	РазделительПолейЗапроса = "," + Символы.ПС;
	
	ПоляИзмеренияСтарогоНабораЗапроса = Новый Массив;
	ПоляИзмеренияНовогоНабораЗапроса = Новый Массив;
	ПоляИзмеренияВнешнегоЗапроса  = Новый Массив;
	
	ПоляРеквизитовСтарогоНабораЗапроса = Новый Массив;
	ПоляРеквизитовНовогоНабораЗапроса = Новый Массив;
	ПоляРеквизитовВнешнегоЗапроса  = Новый Массив;
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		ПоляИзмеренияСтарогоНабораЗапроса.Добавить("СтарыйНабор." + Измерение + " КАК " + Измерение);
		ПоляИзмеренияНовогоНабораЗапроса.Добавить("НовыйНабор." + Измерение);
		ПоляИзмеренияВнешнегоЗапроса.Добавить("ВложенныйЗапрос." + Измерение);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ПоляРеквизитовСтарогоНабораЗапроса.Добавить("СтарыйНабор." + Реквизит + " КАК " + Реквизит);
		ПоляРеквизитовНовогоНабораЗапроса.Добавить("НовыйНабор." + Реквизит);
		ПоляРеквизитовВнешнегоЗапроса.Добавить("МАКСИМУМ(ВложенныйЗапрос." + Реквизит + ") КАК " + Реквизит);
	КонецЦикла;
	
	Если ОписаниеРегистра.Свойство("Периодичность")
		И ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтарыйНабор.Период", "ДАТАВРЕМЯ(1, 1, 1)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыйНабор.Период", "ДАТАВРЕМЯ(1, 1, 1)");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтарыйНабор._Измерения КАК _Измерения", СтрСоединить(ПоляИзмеренияСтарогоНабораЗапроса, РазделительПолейЗапроса)); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыйНабор._Измерения", СтрСоединить(ПоляИзмеренияНовогоНабораЗапроса, РазделительПолейЗапроса)); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВложенныйЗапрос._Измерения", СтрСоединить(ПоляИзмеренияВнешнегоЗапроса, РазделительПолейЗапроса)); 
	
	Если ОписаниеРегистра.Реквизиты.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтарыйНабор._Реквизиты КАК _Реквизиты", СтрСоединить(ПоляРеквизитовСтарогоНабораЗапроса, РазделительПолейЗапроса)); 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыйНабор._Реквизиты", СтрСоединить(ПоляРеквизитовНовогоНабораЗапроса, РазделительПолейЗапроса)); 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВложенныйЗапрос._Реквизиты", СтрСоединить(ПоляРеквизитовВнешнегоЗапроса, РазделительПолейЗапроса)); 
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтарыйНабор._Реквизиты КАК _Реквизиты,", ""); 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыйНабор._Реквизиты,", ""); 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВложенныйЗапрос._Реквизиты,", ""); 
	КонецЕсли;
	
	Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтарыйНабор._ДействуетДо КАК _ДействуетДо", "СтарыйНабор.ДействуетДо КАК ДействуетДо"); 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыйНабор._ДействуетДо", "НовыйНабор.ДействуетДо"); 
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтарыйНабор._ДействуетДо КАК _ДействуетДо", "ДАТАВРЕМЯ(1,1,1) КАК ДействуетДо"); 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыйНабор._ДействуетДо", "ДАТАВРЕМЯ(1,1,1)"); 
	КонецЕсли;	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВложенныйЗапрос._ДействуетДо", "ВложенныйЗапрос.ДействуетДо");
	
	ПоляРесурсыСтарогоНабора = Новый Массив;
	ПоляРесурсыНовогоНаборы = Новый Массив;
	ПоляСтарыеЗначенияРесурсов = Новый Массив;
	ПоляНовыеЗначенияРесурсов = Новый Массив;	
	ПоляИзменившиесяРесурсы = Новый Массив;
	ЧастиУсловияИзменившиесяРесурсы = Новый Массив;
	
	ШаблонПоляИзменениеРесурса = 
	"	ВЫБОР
	|		КОГДА МАКСИМУМ(ВложенныйЗапрос._Ресурс) <> МИНИМУМ(ВложенныйЗапрос._Ресурс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИзменилсяРесурс_Ресурс";
	
	ШаблонУсловияИзмененияРесурса = 
	"	ВЫБОР
	|		КОГДА МАКСИМУМ(ВложенныйЗапрос._Ресурс) <> МИНИМУМ(ВложенныйЗапрос._Ресурс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	ШаблонПоляСтарогоЗначенияРесурса = 
	"	МАКСИМУМ(ВЫБОР
	|				КОГДА НЕ ВложенныйЗапрос.НовыйНабор  
	|					ТОГДА ВложенныйЗапрос._Ресурс
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ) КАК СтароеЗначение_Ресурс";
	
	ШаблонПоляНовогоЗначенияРесурса = 
	"	МАКСИМУМ(ВЫБОР
	|				КОГДА ВложенныйЗапрос.НовыйНабор
	|					ТОГДА ВложенныйЗапрос._Ресурс
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ) КАК НовоеЗначение_Ресурс";

	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ПоляРесурсыСтарогоНабора.Добавить("СтарыйНабор." + Ресурс + " КАК " + Ресурс);
		ПоляРесурсыНовогоНаборы.Добавить("НовыйНабор." + Ресурс);
		
		ТекстПоляИзменившиесяРесурсы = СтрЗаменить(ШаблонПоляИзменениеРесурса, "_Ресурс", Ресурс);
		ПоляИзменившиесяРесурсы.Добавить(ТекстПоляИзменившиесяРесурсы);
		
		ТекстУсловияИзменившиесяРесурсы = СтрЗаменить(ШаблонУсловияИзмененияРесурса, "_Ресурс", Ресурс);
		ЧастиУсловияИзменившиесяРесурсы.Добавить(ТекстУсловияИзменившиесяРесурсы);
		
		ТекстПоляСтароеЗначениеРесурса = СтрЗаменить(ШаблонПоляСтарогоЗначенияРесурса, "_Ресурс", Ресурс);
		ПоляСтарыеЗначенияРесурсов.Добавить(ТекстПоляСтароеЗначениеРесурса);
		
		ТекстПоляНовоеЗначениеРесурса = СтрЗаменить(ШаблонПоляНовогоЗначенияРесурса, "_Ресурс", Ресурс);
		ПоляНовыеЗначенияРесурсов.Добавить(ТекстПоляНовоеЗначениеРесурса);
	КонецЦикла;	
	
	Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
			
			ПоляРесурсыСтарогоНабора.Добавить("СтарыйНабор." + Ресурс + " КАК " + Ресурс);
			ПоляРесурсыНовогоНаборы.Добавить("НовыйНабор." + Ресурс);
			
			ТекстПоляИзменившиесяРесурсы = СтрЗаменить(ШаблонПоляИзменениеРесурса, "_Ресурс", Ресурс);
			ПоляИзменившиесяРесурсы.Добавить(ТекстПоляИзменившиесяРесурсы);
			
			ТекстУсловияИзменившиесяРесурсы = СтрЗаменить(ШаблонУсловияИзмененияРесурса, "_Ресурс", Ресурс);
			ЧастиУсловияИзменившиесяРесурсы.Добавить(ТекстУсловияИзменившиесяРесурсы);
			
			ТекстПоляСтароеЗначениеРесурса = СтрЗаменить(ШаблонПоляСтарогоЗначенияРесурса, "_Ресурс", Ресурс);
			ПоляСтарыеЗначенияРесурсов.Добавить(ТекстПоляСтароеЗначениеРесурса);
			
			ТекстПоляНовоеЗначениеРесурса = СтрЗаменить(ШаблонПоляНовогоЗначенияРесурса, "_Ресурс", Ресурс);
			ПоляНовыеЗначенияРесурсов.Добавить(ТекстПоляНовоеЗначениеРесурса);
			
			РесурсПоОкончании = Ресурс + "ПоОкончании";
			
			ПоляРесурсыСтарогоНабора.Добавить("СтарыйНабор." + РесурсПоОкончании + " КАК " + РесурсПоОкончании);
			ПоляРесурсыНовогоНаборы.Добавить("НовыйНабор." + РесурсПоОкончании);
			
			ТекстПоляИзменившиесяРесурсы = СтрЗаменить(ШаблонПоляИзменениеРесурса, "_Ресурс", РесурсПоОкончании);
			ПоляИзменившиесяРесурсы.Добавить(ТекстПоляИзменившиесяРесурсы);
			
			ТекстУсловияИзменившиесяРесурсы = СтрЗаменить(ШаблонУсловияИзмененияРесурса, "_Ресурс", РесурсПоОкончании);
			ЧастиУсловияИзменившиесяРесурсы.Добавить(ТекстУсловияИзменившиесяРесурсы);
			
			ТекстПоляСтароеЗначениеРесурса = СтрЗаменить(ШаблонПоляСтарогоЗначенияРесурса, "_Ресурс", РесурсПоОкончании);
			ПоляСтарыеЗначенияРесурсов.Добавить(ТекстПоляСтароеЗначениеРесурса);
			
			ТекстПоляНовоеЗначениеРесурса = СтрЗаменить(ШаблонПоляНовогоЗначенияРесурса, "_Ресурс", РесурсПоОкончании);
			ПоляНовыеЗначенияРесурсов.Добавить(ТекстПоляНовоеЗначениеРесурса);
			
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтарыйНабор._Ресурсы КАК _Ресурсы", СтрСоединить(ПоляРесурсыСтарогоНабора, РазделительПолейЗапроса));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыйНабор._Ресурсы", СтрСоединить(ПоляРесурсыНовогоНаборы, РазделительПолейЗапроса));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИзменившиесяРесурсы", СтрСоединить(ПоляИзменившиесяРесурсы, РазделительПолейЗапроса));	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтарыеЗначениеРесурсов", СтрСоединить(ПоляСтарыеЗначенияРесурсов, РазделительПолейЗапроса));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НовыеЗначенияРесурсов", СтрСоединить(ПоляНовыеЗначенияРесурсов, РазделительПолейЗапроса));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеИзменившиесяРесурсы", СтрСоединить(ЧастиУсловияИзменившиесяРесурсы, " ИЛИ "));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Регистратор", РегистраторТекущегоНабора);
	
	Возврат Запрос;
КонецФункции	

#КонецОбласти

#Область РаботаСФильтромЗапроса 

Функция НовыйОписаниеФильтраДляСоздатьВТИмяРегистра(Измерения = "", ДополнительныеПоля = "")
	СтруктураФильтра = Новый Структура;	
	СтруктураФильтра.Вставить("СоответствиеИзмеренийРегистраИзмерениямФильтра", Новый Соответствие);
	СтруктураФильтра.Вставить("ИзмеренияФильтра");
	СтруктураФильтра.Вставить("ДополнительныеПоляФильтра", Новый Массив);
	СтруктураФильтра.Вставить("ЗначениеФильтра");
	
	Если ТипЗнч(Измерения) = Тип("Массив") Тогда
		СтруктураФильтра.ИзмеренияФильтра = Измерения;
	Иначе
		СтруктураФильтра.ИзмеренияФильтра = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Измерения, ",",,Истина);
	КонецЕсли;	
	
	Если ТипЗнч(ДополнительныеПоля) = Тип("Массив") Тогда
		СтруктураФильтра.ДополнительныеПоляФильтра = ДополнительныеПоля;
	Иначе
		СтруктураФильтра.ДополнительныеПоляФильтра = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДополнительныеПоля, ",",,Истина);
	КонецЕсли;	
	
	Возврат СтруктураФильтра;	
КонецФункции	

Функция НовыйОписаниеИспользованияФильтра()
	ОписаниеИспользованияФильтра = Новый Структура;
	ОписаниеИспользованияФильтра.Вставить("ПсевдонимТаблицыФильтра");
	ОписаниеИспользованияФильтра.Вставить("ПсевдонимТаблицыРегистра");
	ОписаниеИспользованияФильтра.Вставить("ПостфиксИменПараметров");
	ОписаниеИспользованияФильтра.Вставить("ТекстШаблонаУсловийСвязи", "");
	ОписаниеИспользованияФильтра.Вставить("УсловияСвязи", Новый Массив);
	ОписаниеИспользованияФильтра.Вставить("ИзмеренияФильтра", Новый Структура);
	ОписаниеИспользованияФильтра.Вставить("ПоляПериодаФильтра", Новый Структура);
	ОписаниеИспользованияФильтра.Вставить("ДополнительныеПоля", Новый Структура);
	ОписаниеИспользованияФильтра.Вставить("ИзмеренияСвязи", Новый Структура);
	ОписаниеИспользованияФильтра.Вставить("ОператорЗапроса");
	ОписаниеИспользованияФильтра.Вставить("ФильтрВВидеВТ", Ложь);
	ОписаниеИспользованияФильтра.Вставить("ВсеЗаписи", Ложь);
	ОписаниеИспользованияФильтра.Вставить("ОписаниеВычисляемыхПараметровПериода", Новый Массив);
	
	Возврат ОписаниеИспользованияФильтра;
КонецФункции


Функция ФильтрВременнаяТаблицаПоТаблицеЗначений(МенеджерВременныхТаблиц, ТаблицаФильтра, ИмяВТФильтр)
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ТаблицаФильтра, ИмяВТФильтр);	
	
	Возврат ФильтрВременнаяТаблица(ИмяВТФильтр, МенеджерВременныхТаблиц);
КонецФункции

Функция ОписаниеСоединенияСТаблицейФильтра(ОператорЗапроса, ПсевдонимТаблицыФильтра, ПсевдонимТаблицыРегистра)
	СтруктураПоиска = Новый Структура("ВедущаяТаблица, ПрисоединяемаяТаблица");
	СтруктураПоиска.ВедущаяТаблица = ПсевдонимТаблицыФильтра;
	СтруктураПоиска.ПрисоединяемаяТаблица = ПсевдонимТаблицыРегистра;
	
	НайденныеСоединения = ОператорЗапроса.Соединения.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСоединения.Количество() = 0 Тогда
		СтруктураПоиска.ВедущаяТаблица = ПсевдонимТаблицыРегистра;
		СтруктураПоиска.ПрисоединяемаяТаблица = ПсевдонимТаблицыФильтра;	
		
		НайденныеСоединения = ОператорЗапроса.Соединения.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;	
	
	Если НайденныеСоединения.Количество() = 1 Тогда
		Возврат НайденныеСоединения[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

Функция ИнициализироватьВТФильтр(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра)
	Если ОписаниеФильтра.ЗначениеФильтра.Тип = ТипФильтраВременнаяТаблица()Тогда 
		ИмяВТФильтр = ОписаниеФильтра.ЗначениеФильтра.ИмяВременнойТаблицы;	
	ИначеЕсли ОписаниеПакетаЗапросов.ОписаниеЗапросаИнициализацииФильтра = Неопределено Тогда
		ИмяВТФильтр = "ВТФильтрДля" + ОписаниеИспользованияФильтра.ПостфиксИменПараметров; 
		УстановитьОписаниеЗапросаИнициализацииВТФильтр(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра.ПоляПериодаФильтра, ИмяВТФильтр, ОписаниеИспользованияФильтра.ПостфиксИменПараметров);
		
		ТекстЗапросаУничтожения = "УНИЧТОЖИТЬ " + ИмяВТФильтр;
		ОписаниеПакетаЗапросов.ЗапросУничтоженияФильтра = Новый Запрос(ТекстЗапросаУничтожения);	
	Иначе
		ДополнитьОписаниеЗапросаИнициализацииВТФильтр(ОписаниеПакетаЗапросов.ОписаниеЗапросаИнициализацииФильтра, ОписаниеИспользованияФильтра.ПоляПериодаФильтра);
		ИмяВТФильтр = ИмяВТТаблицыЗначенийФильтра(ОписаниеПакетаЗапросов);	
	КонецЕсли;	
	
	Возврат ИмяВТФильтр;
КонецФункции	

Процедура УстановитьУсловияСвязиСФильтром(ОписаниеПакетаЗапросов, ОписаниеИспользованияФильтра, ПриемникУсловийСвязи, ОписаниеФильтра)
	Если ЗначениеЗаполнено(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи) Тогда
		ПриемникУсловийСвязи.Добавить(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи);
	КонецЕсли;	
	
	Для Каждого ИзмерениеФильтра Из ОписаниеИспользованияФильтра.ИзмеренияСвязи Цикл
		ВыражениеПоляФильтра = ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтра, ИзмерениеФильтра.Ключ);
		Если ОписаниеИспользованияФильтра.ФильтрВВидеВТ Тогда			
			Если ПриемникУсловийСвязи <> Неопределено Тогда
				ТекстУсловия = ОписаниеИспользованияФильтра.ПсевдонимТаблицыРегистра + "." + ИзмерениеФильтра.Ключ
									+ " = " + ВыражениеПоляФильтра;	
				ПриемникУсловийСвязи.Добавить(ТекстУсловия);
			КонецЕсли;						
		Иначе
			ИмяПараметра = СтрЗаменить(ВыражениеПоляФильтра, "&", "");
			Если ПриемникУсловийСвязи <> Неопределено Тогда
				Если ОписаниеИспользованияФильтра.ВсеЗаписи Тогда
					ТекстУсловия = ОписаниеИспользованияФильтра.ПсевдонимТаблицыРегистра + "." + ИзмерениеФильтра.Ключ
									+ " = " + ВыражениеПоляФильтра;		
				Иначе
					ТекстУсловия = ОписаниеИспользованияФильтра.ПсевдонимТаблицыРегистра + "." + ИзмерениеФильтра.Ключ
									+ " В (" + ВыражениеПоляФильтра + ")";			
				КонецЕсли;					
								
				ПриемникУсловийСвязи.Добавить(ТекстУсловия);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры	

Функция УстановитьПараметрыИзмеренияФильтра(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра)
	Если Не ОписаниеИспользованияФильтра.ФильтрВВидеВТ Тогда
		Для Каждого ИзмерениеФильтра Из ОписаниеИспользованияФильтра.ИзмеренияФильтра Цикл
			ВыражениеПоляФильтра = ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтра, ИзмерениеФильтра.Ключ);
			ИмяПараметра = СтрЗаменить(ВыражениеПоляФильтра, "&", "");
			Если ОписаниеИспользованияФильтра.ВсеЗаписи Тогда 
				ЗначениеПараметра = ?(ОписаниеФильтра.ЗначениеФильтра.ЗначенияИзмерения.Количество() = 0, Неопределено, ОписаниеФильтра.ЗначениеФильтра.ЗначенияИзмерения[0]);
			Иначе	
				ЗначениеПараметра = ОписаниеФильтра.ЗначениеФильтра.ЗначенияИзмерения;
			КонецЕсли;	
			ОписаниеПакетаЗапросов.Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
		КонецЦикла;	
	КонецЕсли;	
КонецФункции	

Процедура УстановитьЭлементыОтбораСКД(ОписаниеИспользованияФильтра, ПараметрыПостроения = Неопределено)
	Если Не ЗначениеЗаполнено(ОписаниеИспользованияФильтра.ПсевдонимТаблицыРегистра) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ОписаниеИспользованияФильтра.ФильтрВВидеВТ Тогда
		Для Каждого ИзмерениеФильтра Из ОписаниеИспользованияФильтра.ИзмеренияФильтра Цикл	
			ПсевдонимЭлементаОтбора = Неопределено;
			Если ПараметрыПостроения <> Неопределено Тогда
				ПсевдонимЭлементаОтбора = ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД[ИзмерениеФильтра.Ключ];
			КонецЕсли;	
			ВыражениеПоляОтбора = ОписаниеИспользованияФильтра.ПсевдонимТаблицыРегистра + "." + ИзмерениеФильтра.Ключ + ".*";
			Если ПсевдонимЭлементаОтбора <> Неопределено Тогда
				ВыражениеПоляОтбора = ВыражениеПоляОтбора + " КАК " + ПсевдонимЭлементаОтбора;
				ОписаниеИспользованияФильтра.ОператорЗапроса.ОтборыСКД.Добавить(ВыражениеПоляОтбора);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	

Функция ИспользоватьВТФильтр(ОписаниеФильтра, ПолучатьВсеЗаписи)
	Если ОписаниеФильтра.ЗначениеФильтра.Тип = ТипФильтраСписокЗначений() Тогда
		Возврат ПолучатьВсеЗаписи;
	Иначе
		Возврат Истина
	КонецЕсли;	
КонецФункции

Функция ИмяВТТаблицыЗначенийФильтра(ОписаниеПакетаЗапросов)
	Если ОписаниеПакетаЗапросов.ОписаниеЗапросаИнициализацииФильтра = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ОписаниеПакетаЗапросов.ОписаниеЗапросаИнициализацииФильтра.ТаблицаДляПомещения;
КонецФункции	

Функция ПолеТаблицыФильтра(ОписаниеФильтра, ИмяПоляОтбораРегистра)
	Если ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра[ИмяПоляОтбораРегистра] <> Неопределено Тогда
		Возврат ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра[ИмяПоляОтбораРегистра];
	Иначе
		Возврат ИмяПоляОтбораРегистра;
	КонецЕсли;	
КонецФункции	

Функция ВсеПоляТаблицыФильтра(ОписаниеФильтра, ПоляПериода = Неопределено)
	Поля = Новый Массив;
	Для Каждого Измерение Из ОписаниеФильтра.ИзмеренияФильтра Цикл
		ПолеФильтра = ПолеТаблицыФильтра(ОписаниеФильтра, Измерение);
		Поля.Добавить(ПолеФильтра);	
	КонецЦикла;	
	
	Для Каждого Поле Из ОписаниеФильтра.ДополнительныеПоляФильтра Цикл
		ПолеФильтра = ПолеТаблицыФильтра(ОписаниеФильтра, Поле);
		Поля.Добавить(ПолеФильтра);	
	КонецЦикла;	
	
	Если ПоляПериода <> Неопределено Тогда
		Для Каждого ПолеПериода Из ПоляПериода Цикл
			Поля.Добавить(ПолеПериода.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат Поля;
КонецФункции	

Функция ВыраженияПоляФильтра(ОписаниеИспользованияФильтра, Поле)
	Если ОписаниеИспользованияФильтра.ИзмеренияФильтра.Свойство(Поле)  Тогда
		Возврат ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтра, Поле);
	КонецЕсли;
		
	Если ОписаниеИспользованияФильтра.ДополнительныеПоля.Свойство(Поле) Тогда
		Возврат ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра(Поле, ОписаниеИспользованияФильтра);
	КонецЕсли;
	
	Если ОписаниеИспользованияФильтра.ПоляПериодаФильтра.Свойство(Поле) Тогда
		ОписаниеПоляПериод = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, Поле, Поле + "Исходный");
		Возврат ВыражениеПоляПериод(ОписаниеПоляПериод);	
	КонецЕсли;	
КонецФункции	

Процедура УстановитьОписаниеЗапросаИнициализацииВТФильтр(ОписаниеПакетаЗапросов, ОписаниеФильтра, ПоляПериода, ИмяВТФильтр, ПостфиксИменПараметров)
	Если ОписаниеФильтра.ЗначениеФильтра.Тип = ТипФильтраТаблицаЗначений() Тогда
		ТаблицаФильтр = ОписаниеФильтра.ЗначениеФильтра.ТаблицаЗначений;
	Иначе
		ТаблицаФильтр = ФильтрСписокЗначенийВТаблицуЗначений(ОписаниеФильтра, ПоляПериода);
	КонецЕсли;	
	
	ПоляТаблицы = ВсеПоляТаблицыФильтра(ОписаниеФильтра, ПоляПериода);
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	&ШаблонПоляФильтра КАК ШаблонПоляФильтра
	|ПОМЕСТИТЬ ВТФильтр
	|ИЗ
	|	&ТаблицаФильтра КАК ТаблицаФильтра";
	
	ОписаниеЗапросаИнициализации = ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);
	
	ОписаниеЗапросаИнициализации.ТаблицаДляПомещения = ИмяВТФильтр;
	
	ИмяПараметраТаблица = "ТаблицаФильтра" + ПостфиксИменПараметров;
	ЗаменитьТаблицуВОператореЗапроса(ОписаниеЗапросаИнициализации.Операторы[0], "ТаблицаФильтра", "&" + ИмяПараметраТаблица);
	
	Для Каждого Поле Из ПоляТаблицы Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаИнициализации, 0, "ТаблицаФильтра." + Поле, Поле, Ложь);
	КонецЦикла;	
	
	ОписаниеПакетаЗапросов.Параметры.Вставить(ИмяПараметраТаблица, ТаблицаФильтр);	
	
	ОписаниеПакетаЗапросов.ОписаниеЗапросаИнициализацииФильтра = ОписаниеЗапросаИнициализации;
КонецПроцедуры

Процедура ДополнитьОписаниеЗапросаИнициализацииВТФильтр(ОписаниеЗапросаИнициализации, ПоляПериода)
	Для Каждого Поле Из ПоляПериода Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаИнициализации, 0, Поле.Значение, Поле.Значение, Ложь);	
	КонецЦикла;	
КонецПроцедуры	

Функция ФильтрСписокЗначенийВТаблицуЗначений(ОписаниеФильтра, ПоляПериода)
	
	ТаблицаФильтра = Новый ТаблицаЗначений;
	Если ОписаниеФильтра.ИзмеренияФильтра.Количество() = 1 Тогда 
		ТипыФильтра = Новый Массив;
		
		Для Каждого Значение Из ОписаниеФильтра.ЗначениеФильтра.ЗначенияИзмерения Цикл
			Если ТипыФильтра.Найти(ТипЗнч(Значение)) = Неопределено Тогда
				ТипыФильтра.Добавить(ТипЗнч(Значение));
			КонецЕсли;	
			ТаблицаФильтра.Добавить();
		КонецЦикла;
		
		Если ТипыФильтра.Количество() > 0 Тогда
			ОписаниеТипа = Новый ОписаниеТипов(ТипыФильтра);
		Иначе
			ОписаниеТипа = Новый ОписаниеТипов("Неопределено");
		КонецЕсли;	
		
		ТаблицаФильтра.Колонки.Добавить(ОписаниеФильтра.ИзмеренияФильтра[0], ОписаниеТипа);
		ТаблицаФильтра.ЗагрузитьКолонку(ОписаниеФильтра.ЗначениеФильтра.ЗначенияИзмерения, ОписаниеФильтра.ИзмеренияФильтра[0]);
	Иначе
		ТаблицаФильтра.Добавить();
	КонецЕсли;	
	
	Для Каждого ПолеПериода Из ОписаниеФильтра.ЗначениеФильтра.ОписаниеПериода Цикл
		Если ПолеПериода.Значение <> Неопределено Тогда
			ТаблицаФильтра.Колонки.Добавить(ПолеПериода.Ключ, Новый ОписаниеТипов("Дата"));
			ТаблицаФильтра.ЗаполнитьЗначения(ПолеПериода.Значение, ПолеПериода.Ключ);
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого ДополнительноеПоле Из ОписаниеФильтра.ЗначениеФильтра.ДополнительныеПоля Цикл
		Если ДополнительноеПоле.Значение <> Неопределено Тогда
			ТипЗначения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ДополнительноеПоле.Значение));
			ТаблицаФильтра.Колонки.Добавить(ДополнительноеПоле.Ключ, Новый ОписаниеТипов(ТипЗначения));
			ТаблицаФильтра.ЗаполнитьЗначения(ДополнительноеПоле.Значение, ДополнительноеПоле.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаФильтра;
КонецФункции

Функция ИмяПараметраЭлементаФильтра(ИмяПараметра, ИмяТаблицы)
	Возврат ИмяПараметра + "_" + ИмяТаблицы;	
КонецФункции

Функция ФильтрВременнаяТаблица(ИмяВременнойТаблицы, МенеджерВременныхТаблиц = Неопределено)
	ЗначениеФильтра = Новый Структура;
	ЗначениеФильтра.Вставить("Тип", ТипФильтраВременнаяТаблица());
	ЗначениеФильтра.Вставить("ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	ЗначениеФильтра.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
	Возврат ЗначениеФильтра;
КонецФункции

Функция ФильтрТаблицаЗначений(ТаблицаФильтра)
	ЗначениеФильтра = Новый Структура;
	ЗначениеФильтра.Вставить("Тип", ТипФильтраТаблицаЗначений());
	ЗначениеФильтра.Вставить("ТаблицаЗначений", ТаблицаФильтра);
	
	Возврат ЗначениеФильтра;
КонецФункции

Функция ФильтрСписокЗначений(ОписаниеПериода, ЗначенияИзмерения = Неопределено, ДополнительныеПоля = Неопределено)
	
	ЗначениеФильтра = Новый Структура;
	ЗначениеФильтра.Вставить("Тип", ТипФильтраСписокЗначений());	
	ЗначениеФильтра.Вставить("ЗначенияИзмерения", Новый Массив);
	ЗначениеФильтра.Вставить("ОписаниеПериода", ОписаниеПериода);
	ЗначениеФильтра.Вставить("ДополнительныеПоля", ДополнительныеПоля);
	
	Если ТипЗнч(ЗначенияИзмерения) = Тип("Массив") 
		Или ТипЗнч(ЗначенияИзмерения) = Тип("СписокЗначений") Тогда
		
		ЗначениеФильтра.ЗначенияИзмерения = ЗначенияИзмерения;
	Иначе
		ЗначениеФильтра.ЗначенияИзмерения.Добавить(ЗначенияИзмерения);
	КонецЕсли;	
			
	Возврат ЗначениеФильтра;
КонецФункции

Функция ФильтрСписокЗначенийПоТаблицеЗначений(ТаблицаФильтра, ОписаниеФильтра)	
	Если ОписаниеФильтра.ИзмеренияФильтра.Количество() > 1 Тогда
		Возврат Неопределено;
	ИначеЕсли ТаблицаФильтра.Количество() > 50 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеПериода = ОписаниеПериодаДляСоздатьВТИмяРегистра();
	
	ПоляГруппировки = Новый Массив;
	Для Каждого Колонка Из ТаблицаФильтра.Колонки Цикл
		Если ОписаниеФильтра.ДополнительныеПоляФильтра.Найти(Колонка.Имя) <> Неопределено Тогда
			ПоляГруппировки.Добавить(Колонка.Имя);	
		ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
			Если ОписаниеПериода.Свойство(Колонка.Имя) Тогда	
				ПоляГруппировки.Добавить(Колонка.Имя);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		
	
	ПоляГруппировкиСтрокой = СтрСоединить(ПоляГруппировки, ",");
	
	ТаблицаДляПроверкиУникальности = ТаблицаФильтра.Скопировать(, ПоляГруппировкиСтрокой);
	ТаблицаДляПроверкиУникальности.Свернуть(ПоляГруппировкиСтрокой);
	
	Если ТаблицаДляПроверкиУникальности.Количество() <> 1 Тогда 
		Возврат Неопределено;
	КонецЕсли;
			
	Для Каждого ПолеПериода Из ОписаниеПериода Цикл
		Если ПоляГруппировки.Найти(ПолеПериода.Ключ) <> Неопределено Тогда
			ОписаниеПериода.Вставить(ПолеПериода.Ключ, ТаблицаДляПроверкиУникальности[0][ПолеПериода.Ключ]);	
		КонецЕсли;	
	КонецЦикла;	
	
	СписокЗначенийИзмерения = Новый Массив;
	Для Каждого Измерение Из ОписаниеФильтра.ИзмеренияФильтра Цикл
		СписокЗначенийИзмерения = ТаблицаФильтра.ВыгрузитьКолонку(Измерение);
		Прервать;
	КонецЦикла;	
	
	ДополнительныеПоля = Новый Структура;
	Если ОписаниеФильтра.ДополнительныеПоляФильтра.Количество() > 0 Тогда
		Для Каждого Поле Из ОписаниеФильтра.ДополнительныеПоляФильтра Цикл
			ДополнительныеПоля.Вставить(Поле, ТаблицаДляПроверкиУникальности[0][Поле]);			
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат ФильтрСписокЗначений(ОписаниеПериода, СписокЗначенийИзмерения, ДополнительныеПоля);	
КонецФункции	

Функция ТипФильтраСписокЗначений()
	Возврат "ФильтрСписокЗначений";	
КонецФункции

Функция ТипФильтраТаблицаЗначений()
	Возврат "ФильтрТаблицаЗначений";	
КонецФункции

Функция ТипФильтраВременнаяТаблица()
	Возврат "ФильтрВременнаяТаблица";	
КонецФункции

Функция ОписаниеФильтраДляПолученияЗаписейНаНачалоПериода(ОписаниеПакетаЗапросовПолученияДвижений, ОписаниеФильтраПолученияДвижений, ПолучатьВсеЗаписи = Ложь)
	ОписаниеФильтраСреза = Неопределено;
	
	Если ИспользоватьВТФильтр(ОписаниеФильтраПолученияДвижений, ПолучатьВсеЗаписи) 
		И ОписаниеФильтраПолученияДвижений.ЗначениеФильтра.Тип <> ТипФильтраВременнаяТаблица() Тогда
		
		ИмяВременнойВТФильтр = ИмяВТТаблицыЗначенийФильтра(ОписаниеПакетаЗапросовПолученияДвижений);		
		
		ОписаниеФильтраСреза = ОписаниеФильтраДляСоздатьВТИмяРегистраПоВременнойТаблице(
									ИмяВременнойВТФильтр,
									ОписаниеФильтраПолученияДвижений.ИзмеренияФильтра, 
									ОписаниеФильтраПолученияДвижений.ДополнительныеПоляФильтра);	
	КонецЕсли;	
	
	Если ОписаниеФильтраСреза = Неопределено Тогда
		ОписаниеФильтраСреза = СкопироватьОписаниеФильтра(ОписаниеФильтраПолученияДвижений);
	КонецЕсли;	
	
	ИмяПоляДатаНачала = ПолеТаблицыФильтра(ОписаниеФильтраПолученияДвижений, "ДатаНачала"); 
	ОписаниеФильтраСреза.СоответствиеИзмеренийРегистраИзмерениямФильтра = ОбщегоНазначения.СкопироватьРекурсивно(ОписаниеФильтраПолученияДвижений.СоответствиеИзмеренийРегистраИзмерениямФильтра);
	ОписаниеФильтраСреза.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ИмяПоляДатаНачала);
	
	Возврат ОписаниеФильтраСреза;
КонецФункции	

Функция СкопироватьОписаниеФильтра(КопируемоеОписаниеФильтра)		
	Если КопируемоеОписаниеФильтра.ЗначениеФильтра.Тип = ТипФильтраВременнаяТаблица() Тогда
		
		КопированноеОписание = ОписаниеФильтраДляСоздатьВТИмяРегистраПоВременнойТаблице(
									КопируемоеОписаниеФильтра.ЗначениеФильтра.ИмяВременнойТаблицы,
									КопируемоеОписаниеФильтра.ИзмеренияФильтра,
									КопируемоеОписаниеФильтра.ДополнительныеПоляФильтра);
									
	ИначеЕсли КопируемоеОписаниеФильтра.ЗначениеФильтра.Тип = ТипФильтраТаблицаЗначений() Тогда
		
		КопированноеОписание = ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
									КопируемоеОписаниеФильтра.ЗначениеФильтра.ТаблицаЗначений,
									КопируемоеОписаниеФильтра.ИзмеренияФильтра,
									КопируемоеОписаниеФильтра.ДополнительныеПоляФильтра);
	
	ИначеЕсли КопируемоеОписаниеФильтра.ЗначениеФильтра.Тип = ТипФильтраСписокЗначений() Тогда
		
		КопированноеОписание = ОписаниеФильтраДляСоздатьВТИмяРегистраПоСпискуЗначений(
									КопируемоеОписаниеФильтра.ЗначениеФильтра.ОписаниеПериода,
									КопируемоеОписаниеФильтра.ИзмеренияФильтра[0], 
									КопируемоеОписаниеФильтра.ЗначениеФильтра.ЗначенияИзмерения);		
	КонецЕсли;	
	
	КопированноеОписание.СоответствиеИзмеренийРегистраИзмерениямФильтра = ОбщегоНазначения.СкопироватьРекурсивно(КопируемоеОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра);	
	
	Возврат КопированноеОписание;
КонецФункции	

#КонецОбласти 

#Область ОписаниеПолейПериода

Функция ЗначениеПоляПериод(ОписаниеПоляПериода, ИсходноеЗначение)
	Если ОписаниеПоляПериода.ПустоеЗначениеКакМаксимальное 
		И Не ЗначениеЗаполнено(ИсходноеЗначение) Тогда
		
		Возврат МаксимальнаяДата();
	КонецЕсли;	
	
	ПриведенноеЗначение = ЗначениеПоляПериодПриведенное(ИсходноеЗначение, ОписаниеПоляПериода.ВариантПриведенияПериода, ОписаниеПоляПериода.Кратность);
			
	КратностьСдвига = ?(ОписаниеПоляПериода.КратностьСдвига = Неопределено, ОписаниеПоляПериода.Кратность, ОписаниеПоляПериода.КратностьСдвига); 
		
	Возврат ЗначениеПоляПериодСдвинутое(ПриведенноеЗначение, КратностьСдвига, ОписаниеПоляПериода.Сдвиг)

КонецФункции

Функция ЗначениеПоляПериодПриведенное(ИсходноеЗначение, ВариантПриведенияПериода, Кратность)
	Если ВРег(Кратность) = "СЕКУНДА" Тогда
		Возврат ИсходноеЗначение;
	ИначеЕсли ВРег(Кратность) = "МИНУТА" Тогда
		Если ВРег(ВариантПриведенияПериода) = "НАЧАЛОПЕРИОДА" Тогда
			Возврат НачалоМинуты(ИсходноеЗначение);
		Иначе
			Возврат КонецМинуты(ИсходноеЗначение);
		КонецЕсли;
	ИначеЕсли ВРег(Кратность) = "ЧАС" Тогда
		Если ВРег(ВариантПриведенияПериода) = "НАЧАЛОПЕРИОДА" Тогда
			Возврат НачалоЧаса(ИсходноеЗначение);
		Иначе
			Возврат КонецЧаса(ИсходноеЗначение);
		КонецЕсли;	
	ИначеЕсли ВРег(Кратность) = "ДЕНЬ" Тогда
		Если ВРег(ВариантПриведенияПериода) = "НАЧАЛОПЕРИОДА" Тогда
			Возврат НачалоДня(ИсходноеЗначение);
		Иначе
			Возврат КонецДня(ИсходноеЗначение);
		КонецЕсли;
	ИначеЕсли ВРег(Кратность) = "НЕДЕЛЯ" Тогда
		Если ВРег(ВариантПриведенияПериода) = "НАЧАЛОПЕРИОДА" Тогда
			Возврат НачалоНедели(ИсходноеЗначение);
		Иначе
			Возврат КонецНедели(ИсходноеЗначение);
		КонецЕсли;	
	ИначеЕсли ВРег(Кратность) = "МЕСЯЦ" Тогда
		Если ВРег(ВариантПриведенияПериода) = "НАЧАЛОПЕРИОДА" Тогда
			Возврат НачалоМесяца(ИсходноеЗначение);
		Иначе
			Возврат КонецМесяца(ИсходноеЗначение);
		КонецЕсли;
	ИначеЕсли ВРег(Кратность) = "КВАРТАЛ" Тогда
		Если ВРег(ВариантПриведенияПериода) = "НАЧАЛОПЕРИОДА" Тогда
			Возврат НачалоКвартала(ИсходноеЗначение);
		Иначе
			Возврат КонецКвартала(ИсходноеЗначение);
		КонецЕсли;		
	ИначеЕсли ВРег(Кратность) = "ГОД" Тогда
		Если ВРег(ВариантПриведенияПериода) = "НАЧАЛОПЕРИОДА" Тогда
			Возврат НачалоГода(ИсходноеЗначение);
		Иначе
			Возврат КонецГода(ИсходноеЗначение);
		КонецЕсли;	
	Иначе
		Возврат ИсходноеЗначение;
	КонецЕсли;	
			
КонецФункции	

Функция ЗначениеПоляПериодСдвинутое(ИсходноеЗначение, Кратность, Сдвиг)
	ДлинаСуток = 86400;
	
	Если ВРег(Кратность) = "СЕКУНДА" Тогда
		Возврат ИсходноеЗначение + 1 * Сдвиг;
	ИначеЕсли ВРег(Кратность) = "МИНУТА" Тогда
		Возврат ИсходноеЗначение + 60 * Сдвиг;
	ИначеЕсли ВРег(Кратность) = "ЧАС" Тогда
		Возврат ИсходноеЗначение + 3600 * Сдвиг;
	ИначеЕсли ВРег(Кратность) = "ДЕНЬ" Тогда
		Возврат ИсходноеЗначение + ДлинаСуток * Сдвиг;
	ИначеЕсли ВРег(Кратность) = "НЕДЕЛЯ" Тогда
		Возврат ИсходноеЗначение + ДлинаСуток * 7 * Сдвиг; 
	ИначеЕсли ВРег(Кратность) = "МЕСЯЦ" Тогда
		Возврат ДобавитьМесяц(ИсходноеЗначение, Сдвиг);
	ИначеЕсли ВРег(Кратность) = "КВАРТАЛ" Тогда
		Возврат ДобавитьМесяц(ИсходноеЗначение, 3 * Сдвиг);	
	ИначеЕсли ВРег(Кратность) = "ГОД" Тогда
		Возврат ДобавитьМесяц(ИсходноеЗначение, 12 * Сдвиг);
	Иначе
		Возврат ИсходноеЗначение;
	КонецЕсли;	
			
КонецФункции	

Функция КратностьПериодаРегистра(ОписаниеРегистра, ПараметрыПостроения)
	ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);	
	
	Если ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Секунда Тогда
		Если ФормироватьСПериодичностьДень Тогда
			КратностьПериода = "ДЕНЬ";
		Иначе
			КратностьПериода = "СЕКУНДА";
		КонецЕсли;
	ИначеЕсли ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.День Тогда
		КратностьПериода = "ДЕНЬ";
	ИначеЕсли ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Месяц Тогда
		КратностьПериода = "МЕСЯЦ";
	ИначеЕсли ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Квартал Тогда
		КратностьПериода = "КВАРТАЛ";
	Иначе
		КратностьПериода = "ГОД";
	КонецЕсли;	
	
	Возврат КратностьПериода;
КонецФункции	

#КонецОбласти 

#Область ПостроениеМоделиЗапроса

Функция НовыйОписаниеЗапроса()
	СтруктураШаблонаЗапроса = Новый Структура;
	СтруктураШаблонаЗапроса.Вставить("ВыбиратьРазрешенные", Ложь);
	СтруктураШаблонаЗапроса.Вставить("ТаблицаДляПомещения", "");
	СтруктураШаблонаЗапроса.Вставить("Колонки", Новый Массив);
	СтруктураШаблонаЗапроса.Вставить("Порядок", Новый Массив);
	СтруктураШаблонаЗапроса.Вставить("Операторы", Новый Массив);
	СтруктураШаблонаЗапроса.Вставить("ПоляИндексирования", Новый Массив);
	
	Возврат СтруктураШаблонаЗапроса;	
КонецФункции

Функция НовыйОператорЗапроса()
	Соединения = Новый ТаблицаЗначений;
	Соединения.Колонки.Добавить("ВедущаяТаблица", Новый ОписаниеТипов("Строка"));
	Соединения.Колонки.Добавить("ПрисоединяемаяТаблица", Новый ОписаниеТипов("Строка"));
	Соединения.Колонки.Добавить("ПорядокСоединения", Новый ОписаниеТипов("Число"));
	Соединения.Колонки.Добавить("Условия");
	Соединения.Колонки.Добавить("ТипСоединения", Новый ОписаниеТипов("Строка"));

	Соединения.Индексы.Добавить("ВедущаяТаблица");
	Соединения.Индексы.Добавить("ПрисоединяемаяТаблица");
	Соединения.Индексы.Добавить("ВедущаяТаблица, ПрисоединяемаяТаблица");
	
	ОператорЗапроса = Новый Структура;
	ОператорЗапроса.Вставить("ТипОбъединения");
	ОператорЗапроса.Вставить("ВыбираемыеПоля", Новый Массив);
	ОператорЗапроса.Вставить("ВыбиратьРазличные", Ложь);
	ОператорЗапроса.Вставить("КоличествоЗаписей", 0);
	ОператорЗапроса.Вставить("Таблицы", Новый Массив);
	ОператорЗапроса.Вставить("Соединения", Соединения);
	ОператорЗапроса.Вставить("Отбор", Новый Массив);
	ОператорЗапроса.Вставить("Имеющие", Новый Массив);
	ОператорЗапроса.Вставить("Группировка", Новый Массив);
	ОператорЗапроса.Вставить("ВыбираемыеПоляСКД", Новый Массив);
	ОператорЗапроса.Вставить("ОтборыСКД", Новый Массив);
	ОператорЗапроса.Вставить("ИсточникСоответствие", Новый Соответствие);
	ОператорЗапроса.Вставить("ПсевдонимыПолей", Новый Массив);
	
	Возврат ОператорЗапроса;
КонецФункции

Функция НовыйОписаниеТаблицыЗапроса()
	Возврат Новый Структура("Имя, Псевдоним, Тип");	
КонецФункции

Функция НовыйОписаниеВложенногоЗапроса()
	Возврат Новый Структура("ОписаниеЗапроса, Псевдоним, Тип");	
КонецФункции

// Возвращает описание запроса
// 
// Параметры:
// 	ЗапросВыбораСхемыЗапроса - ЗапросВыбораСхемыЗапроса - ЗапросВыбораСхемыЗапроса
// Возвращаемое значение:
// 	Структура - см. НовыйОписаниеЗапроса() 
Функция ОписаниеЗапросаПоЗапросуПакета(ЗапросВыбораСхемыЗапроса)
	ОписаниеЗапроса = НовыйОписаниеЗапроса();

	ОписаниеЗапроса.ВыбиратьРазрешенные = ЗапросВыбораСхемыЗапроса.ВыбиратьРазрешенные;
	ОписаниеЗапроса.ТаблицаДляПомещения = ЗапросВыбораСхемыЗапроса.ТаблицаДляПомещения;
		
	Для Каждого ВыражениеУпорядочивания Из ЗапросВыбораСхемыЗапроса.Порядок Цикл
		Если ТипЗнч(ВыражениеУпорядочивания.Элемент) = Тип("КолонкаСхемыЗапроса") Тогда
			ЭлементУпорядочивания = ВыражениеУпорядочивания.Элемент.Псевдоним;
		Иначе	
			ЭлементУпорядочивания = Строка(ВыражениеУпорядочивания);
		КонецЕсли;	
			
		Если Не ЭтоВыражениеШаблон(ЭлементУпорядочивания) Тогда
			ОписаниеЗапроса.Порядок.Добавить(ЭлементУпорядочивания + ?(ВыражениеУпорядочивания.Направление = НаправлениеПорядкаСхемыЗапроса.ПоУбыванию, "УБЫВ", ""));
		КонецЕсли;	
	КонецЦикла;	
	
	СтруктураПоискаСоединения = Новый Структура("ПрисоединяемаяТаблица");
	Для Каждого Оператор Из ЗапросВыбораСхемыЗапроса.Операторы Цикл
		СтруктураОбъединяемогоЗапроса = НовыйОператорЗапроса();	
		ОписаниеЗапроса.Операторы.Добавить(СтруктураОбъединяемогоЗапроса);
		
		СтруктураОбъединяемогоЗапроса.ТипОбъединения = ТипОбъединенияСтрокой(Оператор.ТипОбъединения);
		СтруктураОбъединяемогоЗапроса.ВыбиратьРазличные = Оператор.ВыбиратьРазличные;
		СтруктураОбъединяемогоЗапроса.КоличествоЗаписей = Оператор.КоличествоПолучаемыхЗаписей;
			
		Для Каждого ВыражениеГруппировки Из Оператор.Группировка Цикл
			ЭлементГруппировки = Строка(ВыражениеГруппировки);
			Если Не ЭтоВыражениеШаблон(ЭлементГруппировки) Тогда
				ДобавитьГруппировку(СтруктураОбъединяемогоЗапроса, ЭлементГруппировки);
			КонецЕсли;	
		КонецЦикла;	
		
		Для Каждого ВыражениеОтбора Из Оператор.Отбор Цикл
			ЭлементОтбора = Строка(ВыражениеОтбора);
			Если Не ЭтоВыражениеШаблон(ЭлементОтбора) Тогда
				Если ВыражениеОтбора.СодержитАгрегатнуюФункцию() Тогда
					СтруктураОбъединяемогоЗапроса.Имеющие.Добавить(ЭлементОтбора);	
				Иначе	
					ДобавитьУсловие(СтруктураОбъединяемогоЗапроса, ЭлементОтбора);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		Для Каждого ИсточникСхемы Из Оператор.Источники Цикл
			Если ТипЗнч(ИсточникСхемы.Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
				ОписаниеТаблицыЗапроса = ОписаниеВложенногоЗапроса(ИсточникСхемы.Источник.Запрос, ИсточникСхемы.Источник.Псевдоним);		
			Иначе	
				ОписаниеТаблицыЗапроса = ОписаниеТаблицыЗапроса(ИсточникСхемы.Источник.ИмяТаблицы, ИсточникСхемы.Источник.Псевдоним);
			КонецЕсли;	
			СтруктураОбъединяемогоЗапроса.Таблицы.Добавить(ОписаниеТаблицыЗапроса);
			СтруктураОбъединяемогоЗапроса.ИсточникСоответствие.Вставить(ИсточникСхемы.Источник.Псевдоним, ОписаниеТаблицыЗапроса);
			
			ПорядокСоединения = 0;
			Для Каждого Соединение Из ИсточникСхемы.Соединения Цикл
				СтруктураПоискаСоединения.ПрисоединяемаяТаблица = Соединение.Источник.Источник.Псевдоним;
				СтрокиСоединения = СтруктураОбъединяемогоЗапроса.Соединения.НайтиСтроки(СтруктураПоискаСоединения);
				
				Если СтрокиСоединения.Количество() = 0 Тогда
					ПорядокСоединения = ПорядокСоединения + 1;
					
					ОписаниеСоединения = СтруктураОбъединяемогоЗапроса.Соединения.Добавить();
					ОписаниеСоединения.ВедущаяТаблица = ИсточникСхемы.Источник.Псевдоним;
					ОписаниеСоединения.ПрисоединяемаяТаблица = Соединение.Источник.Источник.Псевдоним;
					ОписаниеСоединения.ТипСоединения = Строка(Соединение.ТипСоединения);
					ОписаниеСоединения.Условия = Новый Массив;
					ОписаниеСоединения.ПорядокСоединения = ПорядокСоединения;
				Иначе
					ОписаниеСоединения = СтрокиСоединения[0];	
				КонецЕсли;
				СтрокаУсловия = "(" + Строка(Соединение.Условие) + ")";
				Если Не ЭтоВыражениеШаблон(СтрокаУсловия) Тогда
					ОписаниеСоединения.Условия.Добавить(СтрокаУсловия);
				КонецЕсли;						
			КонецЦикла;	
		КонецЦикла;		
	КонецЦикла;		
	
	ИндексПоля = 0;
	Для Каждого Колонка Из ЗапросВыбораСхемыЗапроса.Колонки Цикл
		ДобавляемыеПоля = Новый Массив;
		ДобавлятьКолонку = Ложь;
		Для Каждого Поле Из Колонка.Поля Цикл
			ПолеСтрокой = Строка(Поле);
			Если ЭтоВыражениеШаблон(ПолеСтрокой) Тогда
				ДобавляемыеПоля.Добавить("NULL");
			Иначе
				ДобавляемыеПоля.Добавить(ПолеСтрокой);	
				ДобавлятьКолонку = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ДобавлятьКолонку Тогда
			Для ИндексОператора = 0 По ДобавляемыеПоля.Количество() - 1 Цикл
				ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, ИндексОператора, ДобавляемыеПоля[ИндексОператора], Колонка.Псевдоним, Ложь);
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
 
	Возврат ОписаниеЗапроса;
КонецФункции	
	
Функция ОписаниеТаблицыЗапроса(Имя, Псевдоним)
	ОписаниеТаблицыЗапроса = НовыйОписаниеТаблицыЗапроса();
	ОписаниеТаблицыЗапроса.Имя = Имя;
	ОписаниеТаблицыЗапроса.Псевдоним = Псевдоним;
	ОписаниеТаблицыЗапроса.Тип = "ОписаниеТаблицыЗапроса";
	
	Возврат ОписаниеТаблицыЗапроса	
КонецФункции

Функция ОписаниеВложенногоЗапроса(ЗапросПакета, Псевдоним)
	ОписаниеТаблицыЗапроса = НовыйОписаниеВложенногоЗапроса();
	ОписаниеТаблицыЗапроса.ОписаниеЗапроса = ОписаниеЗапросаПоЗапросуПакета(ЗапросПакета);
	ОписаниеТаблицыЗапроса.Псевдоним = Псевдоним;
	ОписаниеТаблицыЗапроса.Тип = "ОписаниеВложенногоЗапроса";
	
	Возврат ОписаниеТаблицыЗапроса	
КонецФункции

Функция ЭтоВыражениеШаблон(ТекстВыражения)	
	Возврат Лев(ТекстВыражения, 7) = "&Шаблон" ИЛИ Лев(ТекстВыражения, 8) = "(&Шаблон"	
КонецФункции	

#КонецОбласти 

#Область РаботаСМодельюЗапроса

Процедура ЗаполнитьИспользуемыеВЗапросеТаблицы(ИспользуемыеТаблицы, ОператорЗапроса, ОписаниеПакетаЗапросов)
	Для Каждого ОписаниеТаблицы Из ОператорЗапроса.Таблицы Цикл
		Если ИспользуемыеТаблицы.Найти(ОписаниеТаблицы.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		ИспользуемыеТаблицы.Добавить(ОписаниеТаблицы.Имя);
		ОписаниеЗапросаФормирующееВТ = ОписаниеЗапросаПакетаПоИмениВТ(ОписаниеПакетаЗапросов, ОписаниеТаблицы.Имя);
		Если ОписаниеЗапросаФормирующееВТ <> Неопределено Тогда
			Для Каждого ОператорФормированияВТ Из ОписаниеЗапросаФормирующееВТ.Операторы Цикл
				ЗаполнитьИспользуемыеВЗапросеТаблицы(ИспользуемыеТаблицы, ОператорФормированияВТ, ОписаниеПакетаЗапросов);
			КонецЦикла;	
		КонецЕсли;			
	КонецЦикла;		
КонецПроцедуры	

Функция ВладелецОператораЗапроса(ОписаниеПакетаЗапросов, ОператорЗапроса)
	Для Каждого ОписаниеЗапроса Из ОписаниеПакетаЗапросов.ЗапросыПолученияДанных Цикл
		Для Каждого ТекущийОператор Из ОписаниеЗапроса.Операторы Цикл
			Если ТекущийОператор =  ОператорЗапроса Тогда
				Возврат ОписаниеЗапроса;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	

#КонецОбласти

#Область ГенерацияТекстЗапросаПоМодели

Процедура ОписаниеЗапросаВМассивСтрок(МассивСтрок, ОписаниеЗапроса, ВыводитьЭлементыСКД = Истина)	
	ИндексОператора = 0;
	Для Каждого ОператорЗапроса Из ОписаниеЗапроса.Операторы Цикл
		МассивСтрок.Добавить(Символы.ПС);
		
		Если ИндексОператора <> 0 Тогда
			МассивСтрок.Добавить(ОператорЗапроса.ТипОбъединения);
			МассивСтрок.Добавить(Символы.ПС);
		КонецЕсли;
		
		ОператорЗапросаВМассивСтрок(ОписаниеЗапроса, ОператорЗапроса, МассивСтрок, ИндексОператора = 0, ВыводитьЭлементыСКД);
		ИндексОператора = ИндексОператора + 1;
	КонецЦикла;	
	
	УпорядочиваниеОписанияЗапросаВМассивСтрок(ОписаниеЗапроса, МассивСтрок);
	
	ИндексированиеОписанияЗапросаВМассивСтрок(ОписаниеЗапроса, МассивСтрок);
КонецПроцедуры	

Процедура УпорядочиваниеОписанияЗапросаВМассивСтрок(ОписаниеЗапроса, МассивСтрок)
	ИндексЭлементаПорядка = 0;
	Если ОписаниеЗапроса.Порядок.Количество() > 0 Тогда
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить("УПОРЯДОЧИТЬ ПО");
		МассивСтрок.Добавить(Символы.ПС);
	КонецЕсли;	
	
	ИндексЭлементаПорядка = 0;
	Для Каждого ЭлементПорядка Из ОписаниеЗапроса.Порядок Цикл
		МассивСтрок.Добавить(ЭлементПорядка);
		
		Если ИндексЭлементаПорядка <> ОписаниеЗапроса.Порядок.Количество() - 1 Тогда			
			МассивСтрок.Добавить(РазделительПолей());
		КонецЕсли;
		
		ИндексЭлементаПорядка = ИндексЭлементаПорядка + 1;	
	КонецЦикла;		
КонецПроцедуры	

Процедура ИндексированиеОписанияЗапросаВМассивСтрок(ОписаниеЗапроса, МассивСтрок)
	Если ЗначениеЗаполнено(ОписаниеЗапроса.ТаблицаДляПомещения)
		И ОписаниеЗапроса.ПоляИндексирования.Количество() > 0 Тогда
		
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить("ИНДЕКСИРОВАТЬ ПО");
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Символы.Таб);
		
		ИндексЭлементаИндекса = 0;
		Для Каждого ЭлементИндекса Из ОписаниеЗапроса.ПоляИндексирования Цикл			
			МассивСтрок.Добавить(ЭлементИндекса);
			
			Если ИндексЭлементаИндекса <> ОписаниеЗапроса.ПоляИндексирования.Количество() - 1 Тогда			
				МассивСтрок.Добавить(РазделительПолей());
			КонецЕсли;	
			
			ИндексЭлементаИндекса = ИндексЭлементаИндекса + 1;	
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ОператорЗапросаВМассивСтрок(ОписаниеЗапроса, ОператорЗапроса, МассивСтрок, ЭтоПервыйОператор, ВыводитьЭлементыСКД)
	МассивСтрок.Добавить("ВЫБРАТЬ");
	
	Если ЭтоПервыйОператор И ОписаниеЗапроса.ВыбиратьРазрешенные Тогда
		МассивСтрок.Добавить(" РАЗРЕШЕННЫЕ");
	КонецЕсли;
	
	МодификаторыОператораЗапросаВМассивСтрок(ОписаниеЗапроса, ОператорЗапроса, МассивСтрок);	
	
	ПоляОператораЗапросаВМассивСтрок(ОписаниеЗапроса, ОператорЗапроса, МассивСтрок);
	
	Если ВыводитьЭлементыСКД И ЭтоПервыйОператор Тогда
		ПоляСКДОператораЗапросаВМассивСтрок(ОператорЗапроса, МассивСтрок);
	КонецЕсли;	
	
	МассивСтрок.Добавить(Символы.ПС);
	Если ЭтоПервыйОператор И Не ПустаяСтрока(ОписаниеЗапроса.ТаблицаДляПомещения) Тогда
		МассивСтрок.Добавить("ПОМЕСТИТЬ ");
		МассивСтрок.Добавить(ОписаниеЗапроса.ТаблицаДляПомещения);
		МассивСтрок.Добавить(Символы.ПС);
	КонецЕсли;	
		
	ИсточникиДанныхОператораЗапросаВМассивСтрок(ОператорЗапроса, МассивСтрок);
	
	МассивСтрок.Добавить(Символы.ПС);

	УсловияОператораЗапросаВМассивСтрок(ОператорЗапроса, МассивСтрок);
	
	Если ВыводитьЭлементыСКД Тогда
		ОтборыСКДОператораЗапросаВМассивСтрок(ОператорЗапроса, МассивСтрок);
	КонецЕсли;	
	
	МассивСтрок.Добавить(Символы.ПС);
	
	ГруппировкаОператораЗапросаВМассивСтрок(ОператорЗапроса, МассивСтрок);
	
	СекцияИмеющиеОператораЗапросаВМассивСтрок(ОператорЗапроса, МассивСтрок);
КонецПроцедуры

Процедура МодификаторыОператораЗапросаВМассивСтрок(ОписаниеЗапроса, ОператорЗапроса, МассивСтрок)	
	Если ОператорЗапроса.ВыбиратьРазличные Тогда
		МассивСтрок.Добавить(" РАЗЛИЧНЫЕ");
	КонецЕсли;	
	
	Если ОператорЗапроса.КоличествоЗаписей <> Неопределено Тогда
		МассивСтрок.Добавить(" ПЕРВЫЕ " + Строка(ОператорЗапроса.КоличествоЗаписей));
	КонецЕсли;	
КонецПроцедуры	

Процедура ПоляОператораЗапросаВМассивСтрок(ОписаниеЗапроса, ОператорЗапроса, МассивСтрок)
	МассивСтрок.Добавить(Символы.ПС);
	МассивСтрок.Добавить(Символы.Таб);
	ИндексПоля = 0;
	Для Каждого Поле Из ОператорЗапроса.ВыбираемыеПоля Цикл
		МассивСтрок.Добавить(Поле);
		МассивСтрок.Добавить(" КАК ");
		МассивСтрок.Добавить(ОписаниеЗапроса.Колонки[ИндексПоля]);
		Если ИндексПоля <> ОператорЗапроса.ВыбираемыеПоля.Количество() - 1 Тогда
			МассивСтрок.Добавить(РазделительПолей(ИндексПоля));
		КонецЕсли;	
		ИндексПоля = ИндексПоля + 1;
	КонецЦикла;	
КонецПроцедуры	

Процедура ПоляСКДОператораЗапросаВМассивСтрок(ОператорЗапроса, МассивСтрок)
	Если ОператорЗапроса.ВыбираемыеПоляСКД.Количество() > 0 Тогда
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить("{ВЫБРАТЬ");
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Символы.Таб);
		
		ИндексПоля = 0;
		Для Каждого ОписаниеПоля Из ОператорЗапроса.ВыбираемыеПоляСКД Цикл
			МассивСтрок.Добавить(ОписаниеПоля.Поле);
			Если ЗначениеЗаполнено(ОписаниеПоля.ПсевдонимСКД) Тогда
				МассивСтрок.Добавить(" КАК ");
				МассивСтрок.Добавить(ОписаниеПоля.ПсевдонимСКД);
			КонецЕсли;	
			Если ИндексПоля <> ОператорЗапроса.ВыбираемыеПоляСКД.Количество() - 1 Тогда			
				МассивСтрок.Добавить(РазделительПолей());
			КонецЕсли;	
			
			ИндексПоля = ИндексПоля + 1;	
		КонецЦикла;		
		МассивСтрок.Добавить("}");
	КонецЕсли;		
КонецПроцедуры	

Процедура ИсточникиДанныхОператораЗапросаВМассивСтрок(ОператорЗапроса, МассивСтрок)
	Если ОператорЗапроса.Таблицы.Количество() > 0 Тогда
		МассивСтрок.Добавить("ИЗ");
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Символы.Таб);
	КонецЕсли;	
	
	ИндексТаблицы = 0;
	Для Каждого ОписаниеТаблицы Из ОператорЗапроса.Таблицы Цикл
		Если ОператорЗапроса.Соединения.НайтиСтроки(Новый Структура("ПрисоединяемаяТаблица", ОписаниеТаблицы.Псевдоним)).Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексТаблицы <> 0 Тогда
			МассивСтрок.Добавить(",");
			МассивСтрок.Добавить(Символы.ПС);
		КонецЕсли;	
		
		Если ОписаниеТаблицы.Тип = "ОписаниеВложенногоЗапроса" Тогда
			МассивСтрок.Добавить("(");
			ОписаниеЗапросаВМассивСтрок(МассивСтрок, ОписаниеТаблицы.ОписаниеЗапроса, Ложь);	
			МассивСтрок.Добавить(")");
		Иначе	
			МассивСтрок.Добавить(ОписаниеТаблицы.Имя);
		КонецЕсли;	
		
		МассивСтрок.Добавить(" КАК ");
		МассивСтрок.Добавить(ОписаниеТаблицы.Псевдоним);
		
		СтрокиСоединения = ОператорЗапроса.Соединения.НайтиСтроки(Новый Структура("ВедущаяТаблица", ОписаниеТаблицы.Псевдоним));
		Соединения = ОператорЗапроса.Соединения.Скопировать(СтрокиСоединения);
		Соединения.Сортировать("ПорядокСоединения");
		
		Для Каждого ОписаниеСоединения Из Соединения Цикл
			СоединениеВМассивСтрок(МассивСтрок, ОписаниеСоединения, ОператорЗапроса);
		КонецЦикла;	
		
		ИндексТаблицы = ИндексТаблицы + 1;
	КонецЦикла;	
КонецПроцедуры	

Процедура УсловияОператораЗапросаВМассивСтрок(ОператорЗапроса, МассивСтрок)
	Если ОператорЗапроса.Отбор.Количество() > 0 Тогда
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить("ГДЕ");
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Символы.Таб);
	КонецЕсли;	
		
	ИндексУсловия = 0;
	Для Каждого Условие Из ОператорЗапроса.Отбор Цикл
		МассивСтрок.Добавить("(");
		МассивСтрок.Добавить(Условие);
		МассивСтрок.Добавить(")");
		Если ИндексУсловия <> ОператорЗапроса.Отбор.Количество() - 1 Тогда			
			МассивСтрок.Добавить(РазделительУсловий());
		КонецЕсли;	
		
		ИндексУсловия = ИндексУсловия + 1;	
	КонецЦикла;		
КонецПроцедуры	

Процедура ГруппировкаОператораЗапросаВМассивСтрок(ОператорЗапроса, МассивСтрок)
	Если ОператорЗапроса.Группировка.Количество() > 0 Тогда  
	 	МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить("СГРУППИРОВАТЬ ПО");
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Символы.Таб);
	КонецЕсли;
	
	ИндексГруппировки = 0;
	Для Каждого ЭлементГруппировки Из ОператорЗапроса.Группировка Цикл
		Если ИндексГруппировки <> 0 Тогда			
			МассивСтрок.Добавить(РазделительПолей());
		КонецЕсли;	
		МассивСтрок.Добавить(ЭлементГруппировки);
		
		ИндексГруппировки = ИндексГруппировки + 1;	
	КонецЦикла;			                                              
КонецПроцедуры	

Процедура СекцияИмеющиеОператораЗапросаВМассивСтрок(ОператорЗапроса, МассивСтрок)
	Если ОператорЗапроса.Имеющие.Количество() > 0 Тогда  
	 	МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить("ИМЕЮЩИЕ");
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Символы.Таб);
	КонецЕсли;
	
	Индекс = 0;
	Для Каждого ЭлементОтбора Из ОператорЗапроса.Имеющие Цикл
		Если Индекс <> 0 Тогда			
			МассивСтрок.Добавить(РазделительУсловий());
		КонецЕсли;	
		МассивСтрок.Добавить(ЭлементОтбора);
		
		Индекс = Индекс + 1;	
	КонецЦикла;			                                              
КонецПроцедуры	

Процедура СоединениеВМассивСтрок(МассивСтрок, ОписаниеСоединения, ОписаниеОбъединяемогоЗапроса)
	ОписаниеПрисоединяемойТаблицы = ОписаниеОбъединяемогоЗапроса.ИсточникСоответствие[ОписаниеСоединения.ПрисоединяемаяТаблица];
	МассивСтрок.Добавить("
	|	");
	МассивСтрок.Добавить(ОписаниеСоединения.ТипСоединения);
	МассивСтрок.Добавить(" СОЕДИНЕНИЕ ");
	МассивСтрок.Добавить(ОписаниеПрисоединяемойТаблицы.Имя);
	МассивСтрок.Добавить(" КАК ");
	МассивСтрок.Добавить(ОписаниеПрисоединяемойТаблицы.Псевдоним);
	
	СтрокиСоединения = ОписаниеОбъединяемогоЗапроса.Соединения.НайтиСтроки(Новый Структура("ВедущаяТаблица", ОписаниеПрисоединяемойТаблицы.Псевдоним));
	Соединения = ОписаниеОбъединяемогоЗапроса.Соединения.Скопировать(СтрокиСоединения);
	Соединения.Сортировать("ПорядокСоединения");
	
	Для Каждого ОписаниеВложенногоСоединения Из СтрокиСоединения Цикл
		СоединениеВМассивСтрок(МассивСтрок, ОписаниеВложенногоСоединения, ОписаниеОбъединяемогоЗапроса);
	КонецЦикла;	
	
	МассивСтрок.Добавить("
	|	ПО ");
	
	ИндексУсловия = 0;
	Для Каждого Условие Из ОписаниеСоединения.Условия Цикл
		МассивСтрок.Добавить("(");
		МассивСтрок.Добавить(Условие);	
		МассивСтрок.Добавить(")");

		Если ИндексУсловия <> ОписаниеСоединения.Условия.Количество() - 1 Тогда
			МассивСтрок.Добавить(РазделительУсловий());
		КонецЕсли;
		
		ИндексУсловия = ИндексУсловия + 1;
	КонецЦикла;	
	
	Если ОписаниеСоединения.Условия.Количество() = 0 Тогда
		МассивСтрок.Добавить("ИСТИНА");
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОтборыСКДОператораЗапросаВМассивСтрок(ОператорЗапроса, МассивСтрок)
	Если ОператорЗапроса.ОтборыСКД.Количество() > 0 Тогда
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить("{ГДЕ");
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Символы.Таб);
		
		ИндексЭлементаОтбора = 0;
		Для Каждого ЭлементОтбора Из ОператорЗапроса.ОтборыСКД Цикл
			МассивСтрок.Добавить(ЭлементОтбора);
			Если ИндексЭлементаОтбора <> ОператорЗапроса.ОтборыСКД.Количество() - 1 Тогда			
				МассивСтрок.Добавить(РазделительПолей());
			КонецЕсли;	
			
			ИндексЭлементаОтбора = ИндексЭлементаОтбора + 1;	
		КонецЦикла;		
		МассивСтрок.Добавить("}");
	КонецЕсли;		
КонецПроцедуры	

Функция ТекстУсловияСоединения(ОписаниеОператораЗапроса, ПсевдонимСоединяемойТаблицы) Экспорт
	ОписаниеСоединения = ОписаниеОператораЗапроса.Соединения.НайтиСтроки(Новый Структура("ПрисоединяемаяТаблица", ПсевдонимСоединяемойТаблицы))[0];
	
	Возврат ТекстУсловия(ОписаниеСоединения.Условия);
КонецФункции	

Функция ТекстУсловия(Условия)
	Если Условия.Количество() = 0 Тогда
		Возврат "";
	ИначеЕсли Условия.Количество() = 1 Тогда
		Возврат Условия[0];
	Иначе
		Возврат СтрСоединить(Условия, РазделительУсловий());
	КонецЕсли;			
КонецФункции	

Функция ТипОбъединенияСтрокой(ТипОбъединения)
	Если ТипОбъединения = ТипОбъединенияСхемыЗапроса.Объединить Тогда
		Возврат "ОБЪЕДИНИТЬ";
	Иначе
		Возврат "ОБЪЕДИНИТЬ ВСЕ";
	КонецЕсли;	
КонецФункции	

Функция РазделительУсловий()
	Возврат "
			|	И ";	
КонецФункции	

Функция РазделительПолей(ИндексПоля = Неопределено)
	Возврат ",
			|	";	
КонецФункции	

#КонецОбласти 

#Область ПараметрыПостроенияЗапросов 

Функция ПараметрыПостроенияВТИмяРегистра()
	
	ПараметрыПостроения = Новый Структура;
	ПараметрыПостроения.Вставить("ИндексироватьПо");
	ПараметрыПостроения.Вставить("Отборы", Новый Массив);
	ПараметрыПостроения.Вставить("ФормироватьСПериодичностьДень", Истина);
	ПараметрыПостроения.Вставить("ИспользоватьРасширениеЯзыкаЗапросовДляСКД", Истина);
	ПараметрыПостроения.Вставить("ПостоянныеПоля");
	ПараметрыПостроения.Вставить("ИсключаемыеРегистраторы", Ложь);
	ПараметрыПостроения.Вставить("СоответствиеПсевдонимовПолей", Новый Соответствие);
	ПараметрыПостроения.Вставить("СоответствиеПсевдонимовПолейСКД", Новый Соответствие);
	ПараметрыПостроения.Вставить("ИсключатьНеИспользуемыеПоля", Истина);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

Функция ИспользоватьПервичныйРегистр(ПараметрыПостроения, ИмяРегистра, ЭтоСрез = Ложь, ДопустимоеЧислоИсключаемыхРегистраторов = 1)
	
	Если ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПараметрыПостроения = Неопределено
		ИЛИ ПараметрыПостроения.Отборы = Неопределено Тогда
		
		Возврат Ложь;
	КонецЕсли; 
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.Найти(ИмяРегистра);
	Для Каждого Отбор Из ПараметрыПостроения.Отборы Цикл                    
		Если ЭтоСрез
			И МетаданныеРегистра.Ресурсы.Найти(Отбор.ЛевоеЗначение) <> Неопределено 
			И ВРег(Отбор.ЛевоеЗначение) <> ВРег("ЭтоГоловнойСотрудник") Тогда
			
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
	
	ИсключаемыеРегистраторы = ИсключаемыеРегистраторы(ПараметрыПостроения);
	
	Для ИндексТекущегоЭлемента = 0 По ИсключаемыеРегистраторы.Количество() - 1 Цикл
		ТекущийЭлемент = ИсключаемыеРегистраторы[ИндексТекущегоЭлемента];
		Если ТекущийЭлемент = Неопределено
			Или Не ТекущийЭлемент.Метаданные().Движения.Содержит(МетаданныеРегистра) Тогда
			ИсключаемыеРегистраторы.Удалить(ИндексТекущегоЭлемента);
		Иначе
			ИндексТекущегоЭлемента = ИндексТекущегоЭлемента + 1;
		КонецЕсли;
	КонецЦикла;	
		
	Если ИсключаемыеРегистраторы.Количество() > 0 Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегистрСведений.Регистратор) КАК Регистратор
			|ИЗ
			|	РегистрСведений.#ИмяРегистра КАК РегистрСведений
			|ГДЕ
			|	РегистрСведений.Регистратор В(&Регистраторы)
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегистрСведений.Регистратор) > 0";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяРегистра", ИмяРегистра);
		Запрос.УстановитьПараметр("Регистраторы", ИсключаемыеРегистраторы);
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			
			ПараметрыПостроения.Вставить("ИсключаемыеРегистраторы", Истина);
			Если Выборка.Регистратор > ДопустимоеЧислоИсключаемыхРегистраторов Тогда
				Возврат Истина;
			КонецЕсли; 
			
		Иначе
			ПараметрыПостроения.Вставить("ИсключаемыеРегистраторы", Ложь);
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

Функция ПараметрыПостроенияСрезаПоследнихПоПараметрамПостроения(ПараметрыПостроения, ОписаниеРегистра)
	
	ПараметрыПостроенияСрезаПоследних = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроенияСрезаПоследних.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);
	ПараметрыПостроенияСрезаПоследних.ИсключаемыеРегистраторы = ПараметрыПостроения.ИсключаемыеРегистраторы;	
	ПараметрыПостроенияСрезаПоследних.ИсключатьНеИспользуемыеПоля = ПараметрыПостроения.ИсключатьНеИспользуемыеПоля;
	
	Если ПараметрыПостроения.Отборы <> Неопределено Тогда
		
		Для каждого ОписаниеОтбора Из ПараметрыПостроения.Отборы Цикл
			
			Если ОписаниеОтбора.Свойство("ОтносительныйПуть") Тогда
				ОтносительныйПуть = ОписаниеОтбора.ОтносительныйПуть;
			Иначе
				ОтносительныйПуть = Истина;
			КонецЕсли;                   
			
			Если ОтносительныйПуть
				И (ОписаниеРегистра.ИзмеренияДляПоиска.Получить(ВРег(ОписаниеОтбора.ЛевоеЗначение)) <> Неопределено
					Или ВРег(ОписаниеОтбора.ЛевоеЗначение) = ВРег("Регистратор"))Тогда
					
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроенияСрезаПоследних.Отборы, ОписаниеОтбора.ЛевоеЗначение, ОписаниеОтбора.ВидСравнения, ОписаниеОтбора.ПравоеЗначение, ОтносительныйПуть);
				
			Иначе
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроенияСрезаПоследних.ОтборыПрименяемыеКСрезу, ОписаниеОтбора.ЛевоеЗначение, ОписаниеОтбора.ВидСравнения, ОписаниеОтбора.ПравоеЗначение, ОтносительныйПуть);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыПостроенияСрезаПоследних;
	
КонецФункции

Функция ПараметрыПостроенияДвиженийПоПараметрамПостроения(ПараметрыПостроения)
	
	ПараметрыПостроенияДвижений = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроенияДвижений.ФормироватьСПериодичностьДень = ПараметрыПостроения.ФормироватьСПериодичностьДень;
	ПараметрыПостроенияДвижений.ИсключаемыеРегистраторы = ПараметрыПостроения.ИсключаемыеРегистраторы;	
	ПараметрыПостроенияДвижений.ВключатьЗаписиНаНачалоПериода = Истина;
	ПараметрыПостроенияДвижений.ИсключатьНеИспользуемыеПоля = ПараметрыПостроения.ИсключатьНеИспользуемыеПоля;
	
	Если ПараметрыПостроения.Отборы <> Неопределено Тогда
		
		Для каждого ОписаниеОтбора Из ПараметрыПостроения.Отборы Цикл
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроенияДвижений.Отборы, ОписаниеОтбора.ЛевоеЗначение, ОписаниеОтбора.ВидСравнения, ОписаниеОтбора.ПравоеЗначение, ОписаниеОтбора.ОтносительныйПуть);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыПостроенияДвижений;
	
КонецФункции

Функция ЭтоЭлементОтбораПоИсключаемомуРегистратору(ЭлементОтбора)
	Если ВРег(ЭлементОтбора.ЛевоеЗначение) = ВРег("Регистратор")  
		И (ЭлементОтбора.ВидСравнения = "<>" 
		ИЛИ ВРег(ЭлементОтбора.ВидСравнения) = "НЕ В") Тогда
		
		Возврат Истина;	
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции	

#КонецОбласти

#Область ВспомогательныеМетоды 

Функция ИмяВспомогательнойВТДоступныеЗаписи(ИмяРегистра, ПараметрыПостроения)
	
	Возврат "ВТДоступныеЗаписи" + ИмяРегистра;
	
КонецФункции

Функция ИмяВспомогательнойВТПериодыСрезаНаНачалоДня(ИмяРегистра, ПараметрыПостроения)
	
	Возврат "ВТПериодыСрезаНаНачалоДня" + ИмяРегистра;
	
КонецФункции

Функция ИмяПараметраИсключаемыйРегистратор(Постфикс)
	Возврат "ИсключаемыйРегистратор" + Постфикс;	
КонецФункции	

Функция УникальноеИмяПараметраЗапроса(Знач ИмяТаблицы, НомерПараметра = Неопределено) Экспорт
	
	УникальноеИмяПараметра = ИмяТаблицы + "_Параметр";
	
	Если ТипЗнч(НомерПараметра) = Тип("Число") Тогда
		
		УникальноеИмяПараметра = УникальноеИмяПараметра + Формат(НомерПараметра, "ЧГ=");
		НомерПараметра = НомерПараметра + 1;
		
	КонецЕсли;
	
	Возврат УникальноеИмяПараметра;
	
КонецФункции

Функция ИмяВспомогательнойВТПериодыСреза(ИмяРегистра, ПараметрыПостроения)
	
	Возврат "ВТПериодыСреза" + ИмяРегистра;
	
КонецФункции

Функция ДоступенИнтервальныйРегистрСведений(Знач ИмяРегистра)
	Возврат Метаданные.РегистрыСведений.Найти(ИмяРегистра + "Интервальный") <> Неопределено;
КонецФункции

Функция ИмяСоздаваемойТаблицыСрезПоследнихВПараметрахПостроения(ИмяРегистра, ПараметрыПостроения)
	
	Если ПустаяСтрока(ПараметрыПостроения.ИмяВременнойТаблицыЗаписейНаНачалоПериода) Тогда
		ИмяСоздаваемойТаблицыСрезПоследних = "ВТ" + ИмяРегистра + "СрезПоследних";
	Иначе
		ИмяСоздаваемойТаблицыСрезПоследних = ПараметрыПостроения.ИмяВременнойТаблицыЗаписейНаНачалоПериода;
	КонецЕсли; 
	
	ПараметрыПостроения.ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода = ИмяСоздаваемойТаблицыСрезПоследних;
	
	Возврат ИмяСоздаваемойТаблицыСрезПоследних;
	
КонецФункции

// Проверяет возможность использования интервального регистра сведений
//
// Параметры:
//		ИмяРегистра - Строка - Имя проверяемого регистра.
//
// Возвращаемое значение:
//		Булево
Функция ИспользоватьИнтервальныйРегистрСведений(Знач ИмяРегистра)
	
	Возврат Метаданные.РегистрыСведений.Найти(ИмяРегистра + "Интервальный") <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область МетодыПолученияДанных

Функция ВыполнитьЗапросПолученияДвиженийРегистра(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено)	
	Если ИмяРезультирующейТаблицы = Неопределено Тогда
		ИмяРезультирующейТаблицы = "ВТ" + ИмяРегистра;
	КонецЕсли;
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	КонецЕсли;	
	
	ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД = Ложь;
	
	Запрос = Неопределено;	
	ПриПолученииЗапросаВТИмяРегистра(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяРезультирующейТаблицы);

	Если Запрос <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	    РезультатЗапроса = Запрос.Выполнить();
	ИначеЕсли ИспользоватьИнтервальныйРегистрСведений(ИмяРегистра)
		Или ПривилегированныйРежим()
		Или ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода Тогда
		
		Запрос = ЗапросВТИмяРегистра(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяРезультирующейТаблицы);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		РезультатЗапроса = Запрос.Выполнить();
	Иначе	
		ИмяВТДоступныеЗаписи = ИмяВспомогательнойВТДоступныеЗаписи(ИмяРегистра, ПараметрыПостроения);
		Запрос = ЗапросВТДоступныеЗаписиИмяРегистра(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ИмяВТДоступныеЗаписи, ПараметрыПостроения);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Выполнить();
		
		Запрос = ЗапросВТТаблицаРегистра(ИмяРегистра, Ложь, ОписаниеФильтра, ИмяВТДоступныеЗаписи, ПараметрыПостроения, ИмяРезультирующейТаблицы);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();                                
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат РезультатЗапроса;
КонецФункции	

Функция ВыполнитьЗапросПолученияСрезаРегистра(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, СрезПоследних = Истина, Знач ИмяРезультирующейТаблицы = Неопределено)	
	Если ИмяРезультирующейТаблицы = Неопределено Тогда
		ИмяРезультирующейТаблицы = "ВТ" + ИмяРегистра + ?(СрезПоследних,"СрезПоследних","СрезПервых");
	КонецЕсли;
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	КонецЕсли;	
	
	ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД = Ложь;
	
	Запрос = Неопределено;	
	ПриПолученииЗапросаВТИмяРегистраСрез(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, СрезПоследних, ИмяРезультирующейТаблицы);

	Если Запрос <> Неопределено Тогда 
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		РезультатЗапроса = Запрос.Выполнить();
	ИначеЕсли ПривилегированныйРежим()
		Или (ИспользоватьИнтервальныйРегистрСведений(ИмяРегистра)
		И СрезПоследних) Тогда
		
		Запрос = ЗапросВТИмяРегистраСрез(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, СрезПоследних, ИмяРезультирующейТаблицы);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		РезультатЗапроса = Запрос.Выполнить();
	Иначе
		ИмяВТПериодыСреза = ИмяВспомогательнойВТПериодыСреза(ИмяРегистра, ПараметрыПостроения);
		
		Запрос = ЗапросВТПериодыСреза(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ИмяВТПериодыСреза, ПараметрыПостроения, СрезПоследних);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Выполнить();
		
		Запрос = ЗапросВТТаблицаСреза(ИмяРегистра, Ложь, ОписаниеФильтра, ИмяВТПериодыСреза, ПараметрыПостроения, СрезПоследних, ИмяРезультирующейТаблицы);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса =  Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);	
	КонецЕсли;
	
	Возврат РезультатЗапроса;	
КонецФункции

Функция ВыполнитьЗапросПолученияПериодовРегистра(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено)
	Если ИмяРезультирующейТаблицы = Неопределено Тогда
		ИмяРезультирующейТаблицы = "ВТ" + ИмяРегистра + "Периоды";
	КонецЕсли;
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраПериоды()
	КонецЕсли;	
	
	ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД = Ложь;
	
	Запрос = ЗапросВТПериодыИмяРегистра(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяРезультирующейТаблицы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
	Возврат Запрос.Выполнить();	
КонецФункции	

#КонецОбласти

#Область ФормированиеЗапросовКРегистрам

Функция ЗапросВТДоступныеЗаписиИмяРегистра(ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ИмяВТДоступныеЗаписиИмяРегистра, ПараметрыПостроения = Неопределено)
	ОписаниеПакета = НовыйОписаниеПакетаЗапросовКРегистру();
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	КонецЕсли;
	
	ДобавитьЗапросВТДоступныеЗаписиИмяРегистра(ОписаниеПакета, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ИмяВТДоступныеЗаписиИмяРегистра, ПараметрыПостроения);
	
	Возврат ЗапросПоОписаниюПакета(ОписаниеПакета, ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД);
КонецФункции

Функция ЗапросВТТаблицаРегистра(ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ИмяВТДоступныеЗаписи, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)
	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра;
	КонецЕсли;	
	
	ОписаниеПакета = НовыйОписаниеПакетаЗапросовКРегистру();
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	КонецЕсли;
	
	ДобавитьЗапросВТТаблицаРегистра(ОписаниеПакета, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ИмяВТДоступныеЗаписи, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
	
	Возврат ЗапросПоОписаниюПакета(ОписаниеПакета, ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД);
КонецФункции

Функция ЗапросВТПериодыСреза(ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ИмяВТПериодыСреза, Знач ПараметрыПостроения = Неопределено, Знач СрезПоследних = Истина)
	ОписаниеПакета = НовыйОписаниеПакетаЗапросовКРегистру();
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	КонецЕсли;
	
	ДобавитьЗапросВТПериодыСреза(ОписаниеПакета, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ИмяВТПериодыСреза, ПараметрыПостроения, СрезПоследних);
	
	Возврат ЗапросПоОписаниюПакета(ОписаниеПакета, ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД);
КонецФункции	

Функция ЗапросВТТаблицаСреза(ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ИмяВТПериодыСреза, Знач ПараметрыПостроения = Неопределено, Знач СрезПоследних = Истина, Знач ИмяСоздаваемойТаблицы = Неопределено)
	ОписаниеПакета = НовыйОписаниеПакетаЗапросовКРегистру();
	
	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра + ?(СрезПоследних,"СрезПоследних","СрезПервых");
	КонецЕсли;
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	КонецЕсли;
	
	ДобавитьЗапросВТТаблицаСреза(ОписаниеПакета, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ИмяВТПериодыСреза, ПараметрыПостроения, СрезПоследних, ИмяСоздаваемойТаблицы);
	
	Возврат ЗапросПоОписаниюПакета(ОписаниеПакета, ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД);
	                             
КонецФункции	

Процедура ДобавитьЗапросВТИмяРегистра(ОписаниеПакетаЗапросов, Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)	
	Если ПараметрыПостроения <> Неопределено Тогда
		ПараметрыПостроения.ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода = "";
	КонецЕсли; 
	
	ИмяВТДоступныеЗаписи = ИмяВспомогательнойВТДоступныеЗаписи(ИмяРегистра, ПараметрыПостроения);
	Если ДоступенИнтервальныйРегистрСведений(ИмяРегистра) Тогда	
		Если ИспользоватьПервичныйРегистр(ПараметрыПостроения, ИмяРегистра) Тогда
			ДобавитьЗапросВТДвиженияПервичныйРегистр(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
		Иначе
			ДобавитьЗапросВТДвиженияИмяИнтервальногоРегистра(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
		КонецЕсли;
		ПараметрыПостроения.ИсключаемыеРегистраторы = Ложь;
	Иначе
		ДобавитьЗапросВТДоступныеЗаписиИмяРегистра(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ИмяВТДоступныеЗаписи, ПараметрыПостроения);
		ДобавитьЗапросВТТаблицаРегистра(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ИмяВТДоступныеЗаписи, ПараметрыПостроения, ИмяСоздаваемойТаблицы);		
	КонецЕсли;	
КонецПроцедуры

Процедура ДобавитьЗапросВТДвиженияИмяИнтервальногоРегистра(ОписаниеПакетаЗапросов, ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)
	ПостфиксИменПараметров = ИмяСоздаваемойТаблицы;
	Если ПостфиксИменПараметров = Неопределено Тогда
		ПостфиксИменПараметров = "Движения" + ИмяРегистра;
	КонецЕсли;	
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	КонецЕсли; 
		
	ИмяИнтервальногоРегистра = ИмяРегистра + "Интервальный";
		
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);	
	ВключатьЗаписиНаНачалоПериода = ВключатьЗаписиНаНачалоПериода(ПараметрыПостроения, ОписаниеРегистра);
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	&ШаблонРегистратор КАК Регистратор,
	|	&ШаблонРегистраторЗаписи КАК РегистраторЗаписи,
	|	&ШаблонРегистраторСобытия КАК РегистраторСобытия,
	|	&ШаблонРегистрДатаНачалаПриведенная КАК Период,
	|	&ШаблонПериодВозвратногоСобытия КАК ПериодВозвратногоСобытия,
	|	ВЫБОР
	|		КОГДА РегистрСведений.ПериодЗаписи = РегистрСведений.ДатаНачала
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоВозвратноеСобытие,
	|	РегистрСведений.ДатаНачала КАК ДатаНачала,
	|	РегистрСведений.ДатаОкончания КАК ДатаОкончания,
	|	РегистрСведений.ДатаНачала КАК ПериодЗаписи,
	|	&ШаблонПустойИнтервал КАК ПустойИнтервал,
	|	РегистрСведений.Год КАК Год,
	|	&ШаблонИзмерения КАК ШаблонИзмерения,
	|	&ШаблонРесурсы КАК ШаблонРесурсы,
	|	&ШаблонРеквизиты КАК ШаблонРеквизиты
	|ПОМЕСТИТЬ ВТДвиженияРегистра
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведений
	|		ПО (РегистрСведений.ДатаНачала >= &ФильтрДатаНачалаПриведенная_)
	|			И (РегистрСведений.ДатаНачала <= &ФильтрДатаОкончанияПриведенная_)
	|			И (&ШаблонУсловияСвязиПоИзмерениямСФильтром)
	|		ЛЕВОЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведенийЗамена
	|		ПО (РегистрСведений.ПериодПредыдущейЗаписи = РегистрСведенийЗамена.ДатаНачала)
	|			И (РегистрСведений.РегистраторЗаписи <> РегистрСведенийЗамена.РегистраторЗаписи)
	|			И (РегистрСведений.ПериодЗаписи = РегистрСведений.ДатаНачала
	|				ИЛИ РегистрСведенийЗамена.РегистраторЗаписи В (&ШаблонИсключаемыйРегистратор))
	|			И (&ШаблонУсловияСвязиПоИзмерениям)";
		
	ШаблонУсловияИсключаемыйРегистратор =
	"ВЫБОР
	|		КОГДА РегистрСведений.ДатаНачала < &ФильтрДатаНачалаПриведенная_
	|			ТОГДА ИСТИНА  
	|		КОГДА РегистрСведений.РегистраторЗаписи В (&ШаблонИсключаемыйРегистратор)
	|				И РегистрСведенийЗамена.ПериодЗаписи ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА РегистрСведений.ПериодЗаписи = РегистрСведений.ДатаНачала
	|				И РегистрСведений.РегистраторЗаписи В (&ШаблонИсключаемыйРегистратор)
	|				И ДОБАВИТЬКДАТЕ(РегистрСведенийЗамена.ДатаОкончания, СЕКУНДА, 1) = РегистрСведений.ДатаНачала
	|			ТОГДА ЛОЖЬ
	|		КОГДА РегистрСведений.ПериодЗаписи <> РегистрСведений.ДатаНачала
	|				И РегистрСведенийЗамена.РегистраторЗаписи В (&ШаблонИсключаемыйРегистратор)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";

	УсловиеПериодичностьДень = "РегистрСведений.ДатаОкончания >= КОНЕЦПЕРИОДА(РегистрСведений.ДатаНачала, ДЕНЬ)";
	
	Если ПараметрыПостроения.ИсключаемыеРегистраторы Тогда                 
		ШаблонВыбираемогоРесурса = " 
		|ВЫБОР
		|	КОГДА РегистрСведений.РегистраторЗаписи В (&ШаблонИсключаемыйРегистратор)
		|		ТОГДА РегистрСведенийЗамена.Ресурс_
		|	ИНАЧЕ РегистрСведений.Ресурс_
		|КОНЕЦ";
	Иначе
		ШаблонВыбираемогоРесурса = "РегистрСведений.Ресурс_";
	КонецЕсли;	
		
	ОписаниеЗапроса = ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОписаниеЗапроса.ВыбиратьРазрешенные = ТолькоРазрешенные;
	ОписаниеЗапроса.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ОписаниеИспользованиеФильтра();
	ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра, 
		ОписаниеФильтра,
		ОписаниеРегистра,
		"ДатаНачала, ДатаОкончания", 
		ОператорЗапроса, 
		ПостфиксИменПараметров, 
		Ложь);
	
	Если Не ОписаниеИспользованияФильтра.ФильтрВВидеВТ Тогда
		ЗаменитьВедущуюТаблицуВСоединении(ОператорЗапроса, "РегистрСведенийЗамена", "РегистрСведений");
	КонецЕсли;
	
	ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведений", "РегистрСведений." + ИмяРегистра + "Интервальный");
	ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведенийЗамена", "РегистрСведений." + ИмяРегистра + "Интервальный");
	
	РегистрДатаНачалаПриведенная = ОписаниеПоляПериода("ДатаНачала", "РегистрСведений");
	РегистрДатаНачалаПриведеннаяККонцуДня = ОписаниеПоляПериода("ДатаНачала", "РегистрСведений");
	
	ФильтрДатаНачалаПриведенная = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачалаПриведенная");
	ФильтрДатаОкончанияПриведенная = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончанияПриведенная");
	ФильтрДатаОкончания = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");
	ФильтрДатаСреза =  ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаСреза");
	ФильтрДатаСрезаПриведенная =  ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаСрезаПриведенная");
	
	ФильтрДатаОкончанияПриведенная.ПустоеЗначениеКакМаксимальное = Истина;
	
	КратностьСдвигаДляПолученияСреза = "СЕКУНДА";
	Если ФормироватьСПериодичностьДень Тогда
		РегистрДатаНачалаПриведенная.Кратность = "ДЕНЬ";	
		РегистрДатаНачалаПриведенная.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		
		ФильтрДатаНачалаПриведенная.Кратность = "ДЕНЬ";	
		ФильтрДатаНачалаПриведенная.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		
		ФильтрДатаОкончанияПриведенная.Кратность = "ДЕНЬ";	
		ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
		
		РегистрДатаНачалаПриведеннаяККонцуДня.Кратность = "ДЕНЬ";	
		РегистрДатаНачалаПриведеннаяККонцуДня.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
		
		ФильтрДатаСреза.Кратность = "ДЕНЬ";	
		ФильтрДатаСреза.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		
		ФильтрДатаСрезаПриведенная.Кратность = "ДЕНЬ";	
		ФильтрДатаСрезаПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";

		КратностьСдвигаДляПолученияСреза = "ДЕНЬ";
		
		ДобавитьУсловие(ОператорЗапроса, УсловиеПериодичностьДень);
	КонецЕсли; 		
	
	Если ВключатьЗаписиНаНачалоПериода Тогда
		// Дополним условие соединения соединения по периоду условием получения записей на начало периода
		ШаблонУсловияПолученияЗаписейНаНачалоПериода = 
		"ИЛИ &РегистрДатаНачалаПриведенная_ <= &ФильтрДатаСрезаПриведенная_
		|	И РегистрСведений.ДатаОкончания >= &ФильтрДатаСрезаПриведенная_";
		
		ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = "(" + ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи 
																	+  Символы.ПС + ШаблонУсловияПолученияЗаписейНаНачалоПериода
																	+ ")"; 
		// Для записей полученных на начало периода, значение поля Период будем считать равным параметру фильтра ДатаНачала															
		ТекстПоляПериод = 
		"ВЫБОР
		|	КОГДА РегистрСведений.ДатаНачала <= &ФильтрДатаСреза_
		|		ТОГДА &ФильтрДатаСреза_      
		|	ИНАЧЕ &РегистрДатаНачалаПриведенная_
		|КОНЕЦ";
				
		ТекстПоляПериод = СтрЗаменить(ТекстПоляПериод, "&ФильтрДатаСреза_", ВыражениеПоляПериод(ФильтрДатаСреза));
		ТекстПоляПериод = СтрЗаменить(ТекстПоляПериод, "&РегистрДатаНачалаПриведенная_", ВыражениеПоляПериод(РегистрДатаНачалаПриведенная));
		
		ФильтрДатаНачалаПриведенная.Сдвиг = 1;	
		ФильтрДатаНачалаПриведенная.КратностьСдвига = КратностьСдвигаДляПолученияСреза;
		
		УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаСрезаПриведенная_", ФильтрДатаСрезаПриведенная);
		УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&РегистрДатаНачалаПриведенная_", РегистрДатаНачалаПриведенная);

	Иначе
		ТекстПоляПериод = ВыражениеПоляПериод(РегистрДатаНачалаПриведенная);	
	КонецЕсли;	
			
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачалаПриведенная_", ФильтрДатаНачалаПриведенная);	
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаОкончанияПриведенная);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&РегистрДатаНачалаПриведеннаяККонцуДня_", РегистрДатаНачалаПриведеннаяККонцуДня);
				
	УсловияСвязиПоИзмерениям = Новый Массив;
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл			
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Измерение, Измерение);
		ТекстУсловия = "РегистрСведений." + Измерение + " = РегистрСведенийЗамена." + Измерение;
		УсловияСвязиПоИзмерениям.Добавить(ТекстУсловия);
	КонецЦикла;
	
	Если ПараметрыПостроения.ИсключаемыеРегистраторы Тогда
		ИсключаемыеРегистраторы = ИсключаемыеРегистраторы(ПараметрыПостроения);
		ИмяПараметраИсключаемыеРегистраторы = УстановитьПараметрОтбораПоИсключаемомуРегистратору(ОписаниеПакетаЗапросов, ИсключаемыеРегистраторы, ИмяСоздаваемойТаблицы);
		
		ТекстУсловияСоединенияСТаблицейЗамены = ТекстУсловияСоединения(ОператорЗапроса, "РегистрСведенийЗамена");
		ТекстУсловияСоединенияСТаблицейЗамены = СтрЗаменить(ТекстУсловияСоединенияСТаблицейЗамены, "&ШаблонИсключаемыйРегистратор", "&" + ИмяПараметраИсключаемыеРегистраторы);
		
		ОчиститьУсловияСоединения(ОператорЗапроса, "РегистрСведенийЗамена");
		                       
		ДобавитьУсловиеСоединения(ОператорЗапроса, "РегистрСведенийЗамена", УсловияСвязиПоИзмерениям);
		ДобавитьУсловиеСоединения(ОператорЗапроса, "РегистрСведенийЗамена", ТекстУсловияСоединенияСТаблицейЗамены);
		
		УсловиеИсключаемыйРегистратор = СтрЗаменить(ШаблонУсловияИсключаемыйРегистратор, "&ФильтрДатаНачалаПриведенная_", ВыражениеПоляПериод(ФильтрДатаНачалаПриведенная)); 
		УсловиеИсключаемыйРегистратор = СтрЗаменить(УсловиеИсключаемыйРегистратор, "&ШаблонИсключаемыйРегистратор", "&" + ИмяПараметраИсключаемыеРегистраторы); 
		ДобавитьУсловие(ОператорЗапроса, УсловиеИсключаемыйРегистратор);
		
		ШаблонВыбираемогоРесурса = СтрЗаменить(ШаблонВыбираемогоРесурса, "&ШаблонИсключаемыйРегистратор", "&" + ИмяПараметраИсключаемыеРегистраторы)
	Иначе 
		УдалитьТаблицуИзОператораЗапроса(ОператорЗапроса, "РегистрСведенийЗамена");
	КонецЕсли;
	
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ТекстПоляПериод, "Период");
	
	СоответствиеЭлементовОтбораВыражениям = Новый Соответствие;
	
	ВыражениеПоляПериодВозвратногоСобытия = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "ДействуетДо");
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериодВозвратногоСобытия, "ПериодВозвратногоСобытия");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("ПериодВозвратногоСобытия"), ВыражениеПоляПериодВозвратногоСобытия);
	
	ВыражениеПоляРегистратор = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "РегистраторСобытия");
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРегистратор, "Регистратор");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("Регистратор"), ВыражениеПоляРегистратор);

	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРегистратор, "РегистраторСобытия");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("Регистратор"), ВыражениеПоляРегистратор);
	
	ВыражениеПоляРегистраторЗаписи = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "РегистраторЗаписи");
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРегистраторЗаписи, "РегистраторЗаписи");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("РегистраторЗаписи"), ВыражениеПоляРегистраторЗаписи);
		
	ВыражениеПоляПустойИнтервал = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "ПустойИнтервал");
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПустойИнтервал, "ПустойИнтервал");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("ПустойИнтервал"), ВыражениеПоляПустойИнтервал);
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", Ресурс);
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРесурс, Ресурс);	
		СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег(Ресурс), ВыражениеПоляРесурс);
	КонецЦикла;	
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", Ресурс);
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРесурс, Ресурс);	
		СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег(Ресурс), ВыражениеПоляРесурс);
	КонецЦикла;	
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ВыражениеПоляРеквизит = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", Реквизит);
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРеквизит, Реквизит);	
		СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег(Реквизит), ВыражениеПоляРеквизит);
	КонецЦикла;	
	
	УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра, ПараметрыПостроения);
	
	СчПараметров = 1;
	УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.Отборы, ОписаниеПакетаЗапросов.Параметры, ИмяСоздаваемойТаблицы, СчПараметров, , , Ложь);
	
	ПредикатУсловиямНаНачалоПериода = "РегистрСведений.ДатаНачала > " + ВыражениеПоляПериод(ФильтрДатаНачалаПриведенная) + " ИЛИ ";
	УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров, СчПараметров, ПредикатУсловиямНаНачалоПериода, , Ложь);
	
	ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапроса, 0, ОписаниеИспользованияФильтра);
	ДобавитьПостоянныеПоляВОписаниеЗапроса(ОписаниеПакетаЗапросов, ОписаниеЗапроса, ПараметрыПостроения.ПостоянныеПоля, ИмяСоздаваемойТаблицы);
		
	УстановитьПсевдонимыПолей(ОписаниеЗапроса, ПараметрыПостроения); 
	
	ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеЗапроса, ПараметрыПостроения.ИндексироватьПо);	
КонецПроцедуры

Процедура ДобавитьЗапросВТДвиженияПервичныйРегистр(ОписаниеПакетаЗапросов, ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)
	ПостфиксИменПараметров = ИмяСоздаваемойТаблицы;
	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ПостфиксИменПараметров = "Движения" + ИмяРегистра;
	КонецЕсли; 
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ВключатьЗаписиНаНачалоПериода = ВключатьЗаписиНаНачалоПериода(ПараметрыПостроения, ОписаниеРегистра);
	ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);
	
	ШаблонЗапросаВТДвиженияРегистра = 
	"ВЫБРАТЬ
	|	&ШаблонРегистрПериодПриведенный КАК Период,
	|	РегистрСведений.Период КАК ПериодЗаписи,
	|	РегистрСведений.ДействуетДо КАК ПериодВозвратногоСобытия,
	|	ЛОЖЬ КАК ЭтоВозвратноеСобытие,
	|	РегистрСведений.Регистратор КАК Регистратор,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонРеквизиты КАК Реквизиты
	|ПОМЕСТИТЬ ВТДвиженияРегистра
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведений
	|		ПО (РегистрСведений.Период >= &ФильтрДатаНачалаПриведенная_)
	|			И (РегистрСведений.Период <= &ФильтрДатаОкончанияПриведенная_)
	|			И (&ШаблонУсловияСвязиПоИзмерениям)";	
	
	ОписаниеЗапроса = ОписаниеЗапросаПоТексту(ШаблонЗапросаВТДвиженияРегистра);
	ОписаниеЗапроса.ВыбиратьРазрешенные = ТолькоРазрешенные;

	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];

	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		УдалитьКолонкуИзОписаниеЗапроса(ОписаниеЗапроса, "ЭтоВозвратноеСобытие");
		УдалитьКолонкуИзОписаниеЗапроса(ОписаниеЗапроса, "ПериодВозвратногоСобытия");
	КонецЕсли;
		
	ОписаниеИспользованияФильтра = ОписаниеИспользованиеФильтра();
	ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтра, ОписаниеФильтра, ОписаниеРегистра, "ДатаНачала, ДатаОкончания", ОператорЗапроса, ПостфиксИменПараметров, Ложь);
	
	ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведений", "РегистрСведений." + ИмяРегистра);		
			
	ФильтрДатаНачалаПриведенная = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачалаПриведенная");
	ФильтрДатаОкончанияПриведенная = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончанияПриведенная");
	ФильтрДатаОкончания = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");
	
	РегистрПериодПриведенный = ОписаниеПоляПериода("Период", "РегистрСведений");
	
	ФильтрДатаОкончанияПриведенная.ПустоеЗначениеКакМаксимальное = Истина;
	
	Кратность = КратностьПериодаРегистра(ОписаниеРегистра, ПараметрыПостроения);
	
	ФильтрДатаНачалаПриведенная.Кратность = Кратность;
	РегистрПериодПриведенный.Кратность = Кратность;
	ФильтрДатаОкончанияПриведенная.Кратность = Кратность;
	ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
	
	Если ВключатьЗаписиНаНачалоПериода Тогда	
		ФильтрДатаНачалаПриведенная.Сдвиг = 1;
	КонецЕсли; 
	
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачалаПриведенная_", ФильтрДатаНачалаПриведенная);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаОкончанияПриведенная);
		
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериод(РегистрПериодПриведенный), "Период");
                                                     		
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Измерение, Измерение);
	КонецЦикла;
			
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Ресурс, Ресурс);
	КонецЦикла;
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Ресурс, Ресурс);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Реквизит, Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.СтандартныеРеквизиты Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Реквизит, Реквизит);
	КонецЦикла;
	
	УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра, ПараметрыПостроения);
	УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.Отборы, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров);
	
	Если ФормироватьСПериодичностьДень Тогда
		ИмяВТДвиженияРегистра = "ВТДвиженияРегистра" + ИмяРегистра;
		ОписаниеЗапроса.ТаблицаДляПомещения = ИмяВТДвиженияРегистра;
		
		ДобавитьЗапросПолученияЗаписейСПериодичностьюДень(ОписаниеПакетаЗапросов, ОписаниеРегистра, ПараметрыПостроения, ИмяВТДвиженияРегистра, ИмяСоздаваемойТаблицы);
		ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, ИмяВТДвиженияРегистра);
	Иначе
		ОписаниеЗапроса.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	КонецЕсли;	
	
	ДобавитьЗапросСрезаДляПолученияДвиженийПервичногоРегистра(ОписаниеПакетаЗапросов, ТолькоРазрешенные, ОписаниеРегистра, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);	
	
	ОписаниеРезультирующегоЗапроса = ОписаниеЗапросаПакетаПоИмениВТ(ОписаниеПакетаЗапросов, ИмяСоздаваемойТаблицы);
	
	ДобавитьПостоянныеПоляВОписаниеЗапроса(ОписаниеПакетаЗапросов, ОписаниеРезультирующегоЗапроса, ПараметрыПостроения.ПостоянныеПоля, ИмяСоздаваемойТаблицы);	
	
	УстановитьПсевдонимыПолей(ОписаниеРезультирующегоЗапроса, ПараметрыПостроения);
	
	ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеРезультирующегоЗапроса, ПараметрыПостроения.ИндексироватьПо);	
КонецПроцедуры

Процедура ДобавитьЗапросВТДоступныеЗаписиИмяРегистра(ОписаниеПакетаЗапросов, ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ИмяВТДоступныеЗаписиИмяРегистра, ПараметрыПостроения = Неопределено)	
	ПостфиксИменПараметров = ИмяВТДоступныеЗаписиИмяРегистра;
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	КонецЕсли;
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ВключатьЗаписиНаНачалоПериода = ВключатьЗаписиНаНачалоПериода(ПараметрыПостроения, ОписаниеРегистра);
		
	ТекстШаблонаЗапросаПолученияЗаписейРегистра = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ШаблонИзмерения КАК ВыбираемыеПоля,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонВозвратныеРесурсы КАК ВозвратныеРесурсы,
	|	&ШаблонРеквизиты КАК Реквизиты,
	|	&ШаблонСтандартныеРеквизиты КАК СтандартныеРеквизиты,
	|	&ШаблонПериод КАК Период,
	|	&ШаблонПериодЗаписи КАК ПериодЗаписи,
	|	&ШаблонЗаписьПериода КАК ЗаписьПериода,
	|	&ШаблонДействуетДо КАК ДействуетДо,
	|	&ШаблонВозвратнаяЗапись КАК ВозвратнаяЗапись
	|ПОМЕСТИТЬ ВТДоступныеЗаписи
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведений
	|		ПО (&ШаблонУсловияСвязиПериоду)
	|			И (&ШаблонУсловиеСвязиИзмерениям)";
		
	ШаблонПоляЭтоВозвратнаяЗапись = "
	|	ВЫБОР
	|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)  
	|			ТОГДА ЛОЖЬ
	|		КОГДА РегистрСведений.ДействуетДо <= &ФильтрДатаОкончанияПриведенная_
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	ШаблонПоляЗаписьПериода = "
	|(РегистрСведений.Период >= &ФильтрДатаНачала_
	|	И РегистрСведений.Период <= &ФильтрДатаОкончанияПриведенная_)";
	
	ШаблонУсловияСоединенияПоПериоду = "
	|(РегистрСведений.Период >= &ФильтрДатаНачала_
	|	И (РегистрСведений.Период <= &ФильтрДатаОкончанияПриведенная_)" +
	?(ОписаниеРегистра.ЕстьВозвратныеСобытия, "
	|ИЛИ
	|РегистрСведений.ДействуетДо >= &ФильтрДатаНачала_
	|	И (РегистрСведений.ДействуетДо <= &ФильтрДатаОкончанияПриведенная_)
	|	И РегистрСведений.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1))", 
	")");
			
	ОписаниеЗапроса = ОписаниеЗапросаПоТексту(ТекстШаблонаЗапросаПолученияЗаписейРегистра);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОписаниеЗапроса.ВыбиратьРазрешенные = ТолькоРазрешенные;
	ОписаниеЗапроса.ТаблицаДляПомещения = ИмяВТДоступныеЗаписиИмяРегистра;

	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ОписаниеИспользованиеФильтра();
	ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтра, ОписаниеФильтра, ОписаниеРегистра, "ДатаНачала, ДатаОкончания", ОператорЗапроса, ПостфиксИменПараметров, Ложь);
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = ШаблонУсловияСоединенияПоПериоду;
	
	ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведений", "РегистрСведений." + ИмяРегистра);
	
	ФильтрДатаНачала = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачала");
	ФильтрДатаОкончания = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ФильтрДатаОкончания");
	ФильтрДатаОкончанияПриведенная  = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ФильтрДатаОкончанияПриведенная");

	РегистрПериод = ОписаниеПоляПериода("Период", "РегистрСведений");
	
	ФильтрДатаОкончанияПриведенная.ПустоеЗначениеКакМаксимальное = Истина;
	
	Кратность = КратностьПериодаРегистра(ОписаниеРегистра, ПараметрыПостроения);
	РегистрПериод.Кратность = Кратность;
	ФильтрДатаОкончанияПриведенная.Кратность = Кратность;
	ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
	
	Если ВключатьЗаписиНаНачалоПериода Тогда
		ФильтрДатаНачала.Кратность = Кратность;
		ФильтрДатаНачала.Сдвиг = 1;
	ИначеЕсли ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра) Тогда
		ФильтрДатаНачала.Кратность = Кратность;
	КонецЕсли; 
	
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ФильтрДатаНачала);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаОкончанияПриведенная);
			
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериод(РегистрПериод), "Период");
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений.Период", "ПериодЗаписи");
		
	ПолеЗаписьПериода = СтрЗаменить(ШаблонПоляЗаписьПериода, "&ФильтрДатаНачала_", ВыражениеПоляПериод(ФильтрДатаНачала));
	ПолеЗаписьПериода = СтрЗаменить(ПолеЗаписьПериода, "&ФильтрДатаОкончанияПриведенная_", ВыражениеПоляПериод(ФильтрДатаОкончанияПриведенная));
	
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ПолеЗаписьПериода, "ЗаписьПериода");
		
	Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда				
		ПолеЭтоВозвратнаяЗапись = СтрЗаменить(ШаблонПоляЭтоВозвратнаяЗапись, "&ФильтрДатаОкончания_", ВыражениеПоляПериод(ФильтрДатаОкончания));
		ПолеЭтоВозвратнаяЗапись = СтрЗаменить(ПолеЭтоВозвратнаяЗапись, "&ФильтрДатаОкончанияПриведенная_", ВыражениеПоляПериод(ФильтрДатаОкончанияПриведенная));
		
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ПолеЭтоВозвратнаяЗапись, "ВозвратнаяЗапись");
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений.ДействуетДо", "ДействуетДо");
	КонецЕсли;                                                             
		
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Измерение, Измерение);
	КонецЦикла;
		
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Ресурс, Ресурс);
		ИмяВозвратногоРесурса = Ресурс + "ПоОкончании";
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + ИмяВозвратногоРесурса, ИмяВозвратногоРесурса);
	КонецЦикла;
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Ресурс, Ресурс);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Реквизит, Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.СтандартныеРеквизиты Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Реквизит, Реквизит);
	КонецЦикла;
		
	УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра, ПараметрыПостроения);
	УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.Отборы, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров);			
	ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапроса, 0, ОписаниеИспользованияФильтра);
	
КонецПроцедуры

Процедура ДобавитьЗапросВТТаблицаРегистра(ОписаниеПакетаЗапросов, ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ИмяВТДоступныеЗаписиИмяРегистра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	КонецЕсли; 

	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра;
	КонецЕсли; 
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);
	ВключатьЗаписиНаНачалоПериода = ВключатьЗаписиНаНачалоПериода(ПараметрыПостроения, ОписаниеРегистра);	
	
	ШаблонЗапросаВТПредставленияВсеЗаписи = 
	"ВЫБРАТЬ
	|	ДоступныеЗаписи.Период КАК Период,
	|	ДоступныеЗаписи.ПериодЗаписи КАК ПериодЗаписи,
	|	ЛОЖЬ КАК ЭтоВозвратноеСобытие,
	|	ДоступныеЗаписи.ДействуетДо КАК ПериодВозвратногоСобытия,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонРеквизиты КАК Реквизиты,
	|	&ШаблонСтандартныеРеквизиты КАК СтандартныеРеквизиты
	|ПОМЕСТИТЬ ВТПредставленияВсеЗаписи
	|ИЗ
	|	ВТДоступныеЗаписи КАК ДоступныеЗаписи
	|ГДЕ
	|	ДоступныеЗаписи.ЗаписьПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоступныеЗаписи.ДействуетДо,
	|	ДоступныеЗаписи.ДействуетДо,
	|	ИСТИНА,
	|	ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59),
	|	&ШаблонИзмерения,
	|	&ШаблонВозвратныеРесурсы,
	|	&ШаблонРеквизиты,
	|	&ШаблонСтандартныеРеквизиты
	|ИЗ
	|	ВТДоступныеЗаписи КАК ДоступныеЗаписи
	|		{ЛЕВОЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведенийВспомогательный
	|		ПО ДоступныеЗаписи.ПериодЗаписи < РегистрСведенийВспомогательный.Период
	|			И ДоступныеЗаписи.ДействуетДо >= РегистрСведенийВспомогательный.Период
	|			И (&ШаблонУсловияСвязиПоИзмерениям)}
	|ГДЕ
	|	РегистрСведенийВспомогательный.Период ЕСТЬ NULL
	|	И ДоступныеЗаписи.ВозвратнаяЗапись";
			
	ОписаниеЗапроса = ОписаниеЗапросаПоТексту(ШаблонЗапросаВТПредставленияВсеЗаписи);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОписаниеЗапроса.ВыбиратьРазрешенные = ТолькоРазрешенные;
	
	ОператорПолученияОсновныхЗаписей = ОписаниеЗапроса.Операторы[0];
	ОператорПолученияВозвратныхЗаписей = ОписаниеЗапроса.Операторы[1];	
	ЗаменитьТаблицуВОператореЗапроса(ОператорПолученияОсновныхЗаписей, "ДоступныеЗаписи", ИмяВТДоступныеЗаписиИмяРегистра);
	ЗаменитьТаблицуВОператореЗапроса(ОператорПолученияВозвратныхЗаписей, "ДоступныеЗаписи", ИмяВТДоступныеЗаписиИмяРегистра);
		
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ОператорПолученияВозвратныхЗаписей = Неопределено;
		ОписаниеЗапроса.Операторы.Удалить(1);
		
		УдалитьКолонкуИзОписаниеЗапроса(ОписаниеЗапроса, "ЭтоВозвратноеСобытие");
		УдалитьКолонкуИзОписаниеЗапроса(ОписаниеЗапроса, "ПериодВозвратногоСобытия");
	Иначе
		ЗаменитьТаблицуВОператореЗапроса(ОператорПолученияВозвратныхЗаписей, "РегистрСведенийВспомогательный", "РегистрСведений." + ИмяРегистра);	
	КонецЕсли;	 		
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "ДоступныеЗаписи." + Измерение, Измерение);
		
		Если ОператорПолученияВозвратныхЗаписей <> Неопределено 
			И ВРег(Измерение) <> ВРег("ДатаНачала") И ВРег(Измерение) <> ВРег("ДатаОкончания") Тогда
			
			ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 1, "ДоступныеЗаписи." + Измерение, Измерение);
			ТекстУсловияСвязи = "ДоступныеЗаписи." + Измерение + " = РегистрСведенийВспомогательный." + Измерение; 
			ДобавитьУсловиеСоединения(ОператорПолученияВозвратныхЗаписей, "РегистрСведенийВспомогательный", ТекстУсловияСвязи);
		КонецЕсли;	
	КонецЦикла;
		
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "ДоступныеЗаписи." + Ресурс, Ресурс);
	КонецЦикла;

	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ИмяРесурсаПоОкончании = Ресурс + "ПоОкончании";
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "ДоступныеЗаписи." + Ресурс, Ресурс);
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 1, "ДоступныеЗаписи." + ИмяРесурсаПоОкончании, Ресурс);	
	КонецЦикла;	
		
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "ДоступныеЗаписи." + Реквизит, Реквизит);
		Если ОператорПолученияВозвратныхЗаписей <> Неопределено Тогда
			ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 1, "ДоступныеЗаписи." + Реквизит, Реквизит);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.СтандартныеРеквизиты Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "ДоступныеЗаписи." + Реквизит, Реквизит);
		Если ОператорПолученияВозвратныхЗаписей <> Неопределено Тогда
			ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 1, "ДоступныеЗаписи." + Реквизит, Реквизит);
		КонецЕсли;	
	КонецЦикла;
	
	Если ФормироватьСПериодичностьДень Тогда
		ИмяВТПредставленияВсеЗаписи = "ВТПредставленияВсеЗаписи" + ИмяРегистра;
		ОписаниеЗапроса.ТаблицаДляПомещения = ИмяВТПредставленияВсеЗаписи;
		
		ДобавитьЗапросПолученияЗаписейСПериодичностьюДень(ОписаниеПакетаЗапросов, ОписаниеРегистра, ПараметрыПостроения, ИмяВТПредставленияВсеЗаписи, ИмяСоздаваемойТаблицы);
		ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, ИмяВТПредставленияВсеЗаписи);
	Иначе
		ОписаниеЗапроса.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	КонецЕсли;	
	
	ОписаниеРезультирующегоЗапроса = ОписаниеЗапросаПакетаПоИмениВТ(ОписаниеПакетаЗапросов, ИмяСоздаваемойТаблицы);
	
	Если ВключатьЗаписиНаНачалоПериода Тогда		
		ОператорПолученияСреза = ДобавитьЗапросПолученияЗаписейНаНачалоПериода(ОписаниеПакетаЗапросов, ТолькоРазрешенные, ОписаниеРегистра, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);	
		// добавим условие что бы отсечь записи среза если срез выполнялся на пустую дату
		ВыраженияПоляПериодСреза = ВыражениеПоляПоПсевдониму(ОператорПолученияСреза, "Период");
		ТекстУсловия = ВыраженияПоляПериодСреза + " <> ДАТАВРЕМЯ(1,1,1)";
		ДобавитьУсловие(ОператорПолученияСреза, ТекстУсловия);
	КонецЕсли;
	
	ОписаниеРезультирующегоЗапроса = ОписаниеЗапросаПакетаПоИмениВТ(ОписаниеПакетаЗапросов, ИмяСоздаваемойТаблицы);
	
	ДобавитьПостоянныеПоляВОписаниеЗапроса(ОписаниеПакетаЗапросов, ОписаниеРезультирующегоЗапроса, ПараметрыПостроения.ПостоянныеПоля, ИмяСоздаваемойТаблицы);
	
	УстановитьПсевдонимыПолей(ОписаниеРезультирующегоЗапроса, ПараметрыПостроения);
	
	ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, ИмяВТДоступныеЗаписиИмяРегистра);
	
	ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеРезультирующегоЗапроса, ПараметрыПостроения.ИндексироватьПо);	
КонецПроцедуры

Процедура ДобавитьЗапросПолученияЗаписейСПериодичностьюДень(ОписаниеПакетаЗапросов, ОписаниеРегистра, ПараметрыПостроения, ИмяВТПредставленияВсеЗаписи, ИмяВТРезультат = Неопределено)
	
	ШаблонЗапросаВТПериодыСреза = 
	"ВЫБРАТЬ
	|	РегистрСведений.Период КАК Период,
	|	МАКСИМУМ(РегистрСведений.ПериодЗаписи) КАК ПериодЗаписи,
	|	&ШаблонИзмерения КАК Измерения
	|ПОМЕСТИТЬ ВТПериодыСреза
	|ИЗ
	|	ВТПредставленияВсеЗаписи КАК РегистрСведений
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрСведений.Период,
	|	&ШаблонИзмерения
	|";
	
	ШаблонЗапросаПолученияЗаписей = 
	"ВЫБРАТЬ
	|	РегистрСведений.Период КАК Период,
	|	РегистрСведений.ПериодЗаписи КАК ПериодЗаписи,
	|	РегистрСведений.ЭтоВозвратноеСобытие КАК ЭтоВозвратноеСобытие,
	|	РегистрСведений.ПериодВозвратногоСобытия КАК ПериодВозвратногоСобытия,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонРеквизиты КАК Реквизиты,
	|	&ШаблонСтандартныеРеквизиты КАК СтандартныеРеквизиты
	|ИЗ
	|	ВТПериодыСреза КАК РегистрСведенийСрез
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПредставленияВсеЗаписи КАК РегистрСведений
	|		ПО РегистрСведенийСрез.Период = РегистрСведений.Период
	|			И РегистрСведенийСрез.ПериодЗаписи = РегистрСведений.ПериодЗаписи
	|			И &ШаблонУсловияСвязиПоИзмерениям";
	

	ИмяВТМаксимальныеПериодыПоДням = ИмяВспомогательнойВТПериодыСрезаНаНачалоДня(ОписаниеРегистра.ИмяРегистра, ПараметрыПостроения);
	
	ОписаниеЗапросаВТПериодыСреза = ОписаниеЗапросаПоТексту(ШаблонЗапросаВТПериодыСреза);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаВТПериодыСреза);
	
	ОписаниеЗапросаВТПериодыСреза.ТаблицаДляПомещения = ИмяВТМаксимальныеПериодыПоДням;
	
	ОператорПолученияМаксимальныхДат = ОписаниеЗапросаВТПериодыСреза.Операторы[0];
	ЗаменитьТаблицуВОператореЗапроса(ОператорПолученияМаксимальныхДат, "РегистрСведений", ИмяВТПредставленияВсеЗаписи);
	
	ОписаниеЗапросаВТРезультат = ОписаниеЗапросаПоТексту(ШаблонЗапросаПолученияЗаписей);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаВТРезультат);
	
	ОператорПолученияЗаписей = ОписаниеЗапросаВТРезультат.Операторы[0]; 
	ЗаменитьТаблицуВОператореЗапроса(ОператорПолученияЗаписей, "РегистрСведений", ИмяВТПредставленияВсеЗаписи);
	ЗаменитьТаблицуВОператореЗапроса(ОператорПолученияЗаписей, "РегистрСведенийСрез", ИмяВТМаксимальныеПериодыПоДням);
	
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда		
		УдалитьКолонкуИзОписаниеЗапроса(ОписаниеЗапросаВТРезультат, "ЭтоВозвратноеСобытие");
		УдалитьКолонкуИзОписаниеЗапроса(ОписаниеЗапросаВТРезультат, "ПериодВозвратногоСобытия");	
	КонецЕсли;	 		
	
	ОператорПолученияМаксимальныхДат.Группировка.Добавить("РегистрСведений.Период");
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТПериодыСреза, 0, "РегистрСведений." + Измерение, Измерение);
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТРезультат, 0, "РегистрСведений." + Измерение, Измерение);
		
		ТекстУсловияСвязи = "РегистрСведенийСрез." + Измерение + " = РегистрСведений." + Измерение; 
		ДобавитьУсловиеСоединения(ОператорПолученияЗаписей, "РегистрСведений", ТекстУсловияСвязи);
		
		ДобавитьГруппировку(ОператорПолученияМаксимальныхДат, "РегистрСведений." + Измерение);
	КонецЦикла;
			
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТРезультат, 0, "РегистрСведений." + Ресурс, Ресурс);
	КонецЦикла;
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТРезультат, 0, "РегистрСведений." + Ресурс, Ресурс);
	КонецЦикла;
		
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТРезультат, 0, "РегистрСведений." + Реквизит, Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.СтандартныеРеквизиты Цикл                      
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТРезультат, 0, "РегистрСведений." + Реквизит, Реквизит);
	КонецЦикла;	
	                                                          
	ОписаниеЗапросаВТРезультат.ТаблицаДляПомещения = ИмяВТРезультат;

	ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, ИмяВТМаксимальныеПериодыПоДням);
	
КонецПроцедуры

Функция ДобавитьЗапросПолученияЗаписейНаНачалоПериода(ОписаниеПакетаЗапросов, ТолькоРазрешенные, ОписаниеРегистра, ОписаниеФильтра,  ПараметрыПостроения, ИмяДополняемойВТ)		
	ОписаниеФильтраСреза = ОписаниеФильтраДляПолученияЗаписейНаНачалоПериода(ОписаниеПакетаЗапросов, ОписаниеФильтра, Ложь);
	
	ИмяСоздаваемойТаблицыСрезПоследних = ИмяСоздаваемойТаблицыСрезПоследнихВПараметрахПостроения(ОписаниеРегистра.ИмяРегистра, ПараметрыПостроения);
	
	ПараметрыПостроенияСреза = ПараметрыПостроенияСрезаПоследнихПоПараметрамПостроения(ПараметрыПостроения, ОписаниеРегистра);
	
	Если ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода <> Неопределено Тогда
		Для Каждого ОписаниеОтбора Из ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода Цикл
			ОтносительныйПуть = Неопределено;
			ОписаниеОтбора.Свойство("ОтносительныйПуть", ОтносительныйПуть);
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроенияСреза.ОтборыПрименяемыеКСрезу, ОписаниеОтбора.ЛевоеЗначение, ОписаниеОтбора.ВидСравнения, ОписаниеОтбора.ПравоеЗначение, ОтносительныйПуть);
		КонецЦикла;
	КонецЕсли;	
	
	ДобавитьЗапросВТИмяРегистраСрез(ОписаниеПакетаЗапросов, ОписаниеРегистра.ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтраСреза, ПараметрыПостроенияСреза, Истина, ИмяСоздаваемойТаблицыСрезПоследних);
		
	ОписаниеЗапросаПолученияЗаписейНаНачалоПериода = ОписаниеЗапросаПакетаПоИмениВТ(ОписаниеПакетаЗапросов, ИмяСоздаваемойТаблицыСрезПоследних);
	ОписаниеЗапросаПолученияДвижений = ОписаниеЗапросаПакетаПоИмениВТ(ОписаниеПакетаЗапросов, ИмяДополняемойВТ);
		
	КопируемыйОператор = ОписаниеЗапросаПолученияЗаписейНаНачалоПериода.Операторы[0];  
	ДобавляемыйОператор = ОбщегоНазначения.СкопироватьРекурсивно(КопируемыйОператор);	
	ОписаниеЗапросаПолученияДвижений.Операторы.Добавить(ДобавляемыйОператор);
	ДобавляемыйОператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;
	
	ДобавляемыйОператор.ВыбираемыеПоля.Очистить();
	ДобавляемыйОператор.ПсевдонимыПолей.Очистить();
	
	Для Каждого Колонка Из ОписаниеЗапросаПолученияДвижений.Колонки Цикл
		ДобавляемыйОператор.ВыбираемыеПоля.Добавить("NULL");
		ДобавляемыйОператор.ПсевдонимыПолей.Добавить(Колонка);
		ИндексКолонкиКопируемогоЗапроса = ОписаниеЗапросаПолученияЗаписейНаНачалоПериода.Колонки.Найти(Колонка);
		Если ИндексКолонкиКопируемогоЗапроса <> Неопределено Тогда
			ДобавляемоеВыражение = КопируемыйОператор.ВыбираемыеПоля[ИндексКолонкиКопируемогоЗапроса];
		Иначе
			ДобавляемоеВыражение = "NULL";	
		КонецЕсли;	
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаПолученияДвижений, ОписаниеЗапросаПолученияДвижений.Операторы.Количество() - 1, ДобавляемоеВыражение, Колонка);  	
	КонецЦикла;	
		
	ИндексУдаляемогоЗапроса = ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Найти(ОписаниеЗапросаПолученияЗаписейНаНачалоПериода);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Удалить(ИндексУдаляемогоЗапроса);	
	
	ИспользуемыеТаблицы = Новый Массив;
	ЗаполнитьИспользуемыеВЗапросеТаблицы(ИспользуемыеТаблицы, КопируемыйОператор, ОписаниеПакетаЗапросов);
	
	ИндексРезультирующегоЗапроса = ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Найти(ОписаниеЗапросаПолученияДвижений);
	ИндексДляВставки = ИндексРезультирующегоЗапроса;
	ИндексЗапроса = ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Количество() - 1;
	Пока ИндексЗапроса <> ИндексРезультирующегоЗапроса Цикл
		ОписаниеЗапроса = ОписаниеПакетаЗапросов.ЗапросыПолученияДанных[ИндексЗапроса];
		Если ТипЗнч(ОписаниеЗапроса) = Тип("Структура") 
			И ЗначениеЗаполнено(ОписаниеЗапроса.ТаблицаДляПомещения)
			И ИспользуемыеТаблицы.Найти(ОписаниеЗапроса.ТаблицаДляПомещения) <> Неопределено Тогда 
			
			ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Удалить(ИндексЗапроса);
			ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Вставить(ИндексДляВставки, ОписаниеЗапроса);
			ИндексРезультирующегоЗапроса = ИндексРезультирующегоЗапроса + 1;
		Иначе
			ИндексЗапроса = ИндексЗапроса - 1;	
		КонецЕсли;		
	КонецЦикла;	
		
	Возврат ДобавляемыйОператор;
КонецФункции	

Процедура ДобавитьЗапросСрезаДляПолученияДвиженийПервичногоРегистра(ОписаниеПакетаЗапросов, ТолькоРазрешенные, ОписаниеРегистра, ОписаниеФильтра, ПараметрыПостроения, ИмяДополняемойВТ)		
	ИмяВТОтборСреза= "ВТОтборСрезаНаНачалоПериода" + ОписаниеРегистра.ИмяРегистра;	
	ПостфиксИменПараметров = ИмяВТОтборСреза;
	
	ОписаниеРезультирующегоЗапроса = ОписаниеЗапросаПакетаПоИмениВТ(ОписаниеПакетаЗапросов, ИмяДополняемойВТ);
	ИндексРезультирующегоЗапроса = ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Найти(ОписаниеРезультирующегоЗапроса);
	
	ВключатьЗаписиНаНачалоПериода = ВключатьЗаписиНаНачалоПериода(ПараметрыПостроения, ОписаниеРегистра);
	ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);
	
	ИмяСоздаваемойТаблицыСрезПоследних = ИмяСоздаваемойТаблицыСрезПоследнихВПараметрахПостроения(ОписаниеРегистра.ИмяРегистра, ПараметрыПостроения);
				
	ШаблонЗапросаФильтра = 
	"ВЫБРАТЬ
	|	РегистрСведений.ДействуетДо КАК ДатаНачала,
	|	&ШаблонИзмеренияФильтра КАК Измерения
	|ПОМЕСТИТЬ ВТОтборСреза
	|ИЗ
	|	#РегистрСведений КАК РегистрСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ПО (РегистрСведений.ДействуетДо >= &ФильтрДатаНачалаПриведенная_)
	|			И (РегистрСведений.ДействуетДо <= &ФильтрДатаОкончанияПриведенная_)
	|			И (&ШаблонУсловияСвязиПоИзмерениямФильтра)
	|		ЛЕВОЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведенийПересечения
	|		ПО РегистрСведений.Период < РегистрСведенийПересечения.Период
	|			И РегистрСведений.ДействуетДо >= РегистрСведенийПересечения.Период
	|			И (&ШаблонУсловияСвязиПоИзмерениям)
	|ГДЕ
	|	РегистрСведений.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|	И РегистрСведенийПересечения.Период ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ШаблонФильтрДатаНачала,
	|	&ШаблонИзмеренияФильтра
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты";
	
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ШаблонЗапросаФильтра = СтрЗаменить(ШаблонЗапросаФильтра, "РегистрСведений.ДействуетДо", "ДАТАВРЕМЯ(1, 1, 1)");
	КонецЕсли;
	
	ШаблонТекстаУсловия = "&ФильтрДатаНачала_ <> ДАТАВРЕМЯ(1, 1, 1)";

	ОписаниеЗапроса = ОписаниеЗапросаПоТексту(ШаблонЗапросаФильтра);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Вставить(ИндексРезультирующегоЗапроса, ОписаниеЗапроса);
	ОписаниеЗапроса.ТаблицаДляПомещения = ИмяВТОтборСреза;
	
	ЗаменитьТаблицуВОператореЗапроса(ОписаниеЗапроса.Операторы[0], "РегистрСведений", "РегистрСведений." + ОписаниеРегистра.ИмяРегистра);
	ЗаменитьТаблицуВОператореЗапроса(ОписаниеЗапроса.Операторы[0], "РегистрСведенийПересечения", "РегистрСведений." + ОписаниеРегистра.ИмяРегистра);
		
	ОписаниеИспользованияФильтраПересечения = ОписаниеИспользованиеФильтра();
	ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтраПересечения, ОписаниеФильтра, ОписаниеРегистра, "ДатаНачала, ДатаОкончания", ОписаниеЗапроса.Операторы[0], ПостфиксИменПараметров);
	
	ОписаниеИспользованияФильтраВсеЗаписи = ОписаниеИспользованиеФильтра(, Неопределено);
	ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтраВсеЗаписи, ОписаниеФильтра, ОписаниеРегистра, "ДатаНачала", ОписаниеЗапроса.Операторы[1], ПостфиксИменПараметров, Истина);
			
	ФильтрДатаНачалаПриведенная =  ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтраПересечения, "ДатаНачала", "ФильтрДатаНачалаПриведенная");
	ФильтрДатаОкончания =  ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтраПересечения, "ДатаОкончания", "ФильтрДатаОкончания");
	ФильтрДатаОкончанияПриведенная = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтраПересечения, "ДатаОкончания", "ФильтрДатаОкончанияПриведенная");

	ФильтрДатаНачала =  ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтраВсеЗаписи, "ДатаНачала", "ФильтрДатаНачала");
	
	ФильтрДатаОкончанияПриведенная.ПустоеЗначениеКакМаксимальное = Истина;	
	Если ФормироватьСПериодичностьДень Тогда
		ФильтрДатаНачалаПриведенная.Кратность = "ДЕНЬ";
		ФильтрДатаНачалаПриведенная.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		ФильтрДатаОкончанияПриведенная.Кратность = "ДЕНЬ";
		ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
	КонецЕсли;	
	
	Если ВключатьЗаписиНаНачалоПериода Тогда
		ФильтрДатаНачалаПриведенная.Сдвиг = 1;
	КонецЕсли;
	
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтраПересечения, "&ФильтрДатаНачалаПриведенная_", ФильтрДатаНачалаПриведенная);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтраПересечения, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаОкончанияПриведенная);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтраПересечения, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
		
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 1, ВыражениеПоляПериод(ФильтрДатаНачала), "ДатаНачала"); 
	
	УсловиеПоПериоду = СтрЗаменить(ШаблонТекстаУсловия, "&ФильтрДатаНачала_", ВыражениеПоляПериод(ФильтрДатаНачала));
	ДобавитьУсловие(ОписаниеЗапроса.Операторы[1], УсловиеПоПериоду);
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		ТекстУсловия = "РегистрСведений." + Измерение + " = РегистрСведенийПересечения." + Измерение;
		ДобавитьУсловиеСоединения(ОписаниеЗапроса.Операторы[0], "РегистрСведенийПересечения", ТекстУсловия);
		
		Если ОписаниеФильтра.ИзмеренияФильтра.Найти(Измерение) <> Неопределено Тогда
			ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Измерение, Измерение); 
			
			ВыражениеПоляИзмерения = ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтраВсеЗаписи, Измерение);
			ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 1, ВыражениеПоляИзмерения, Измерение); 
		КонецЕсли;
	КонецЦикла;	
	
	УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтраВсеЗаписи, ПараметрыПостроения);
	УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтраПересечения, ПараметрыПостроения);
	
	Если Не ВключатьЗаписиНаНачалоПериода Тогда
		ОписаниеЗапроса.Операторы.Удалить(1);
	КонецЕсли;	
	
	ОписаниеФильтраСреза = ОписаниеФильтраДляСоздатьВТИмяРегистраПоВременнойТаблице(ИмяВТОтборСреза, ОписаниеФильтра.ИзмеренияФильтра);
	ОписаниеФильтраСреза.СоответствиеИзмеренийРегистраИзмерениямФильтра = ОбщегоНазначения.СкопироватьРекурсивно(ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра);
	ОписаниеФильтраСреза.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаНачала", "ДатаНачала");
	
	ПараметрыПолученияЗаписейНаНачало = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияЗаписейНаНачало, ПараметрыПостроения);
	
	// Отбор записей применяемых к срезу установим сами, т.к. тут мы получаем не только срез на начало
	// но еще данные для возвратных записей
	ПараметрыПолученияЗаписейНаНачало.ОтборыЗаписейНаНачалоПериода = Неопределено;
	
	ДобавленныйОператор = ДобавитьЗапросПолученияЗаписейНаНачалоПериода(ОписаниеПакетаЗапросов, ТолькоРазрешенные, ОписаниеРегистра, ОписаниеФильтраСреза, ПараметрыПолученияЗаписейНаНачало, ИмяДополняемойВТ);
	
	ВыраженияПоляПериод = ВыражениеПоляПоПсевдониму(ДобавленныйОператор, "Период"); 
	ВыраженияПоляПериодЗаписи = ВыражениеПоляПоПсевдониму(ДобавленныйОператор, "ПериодЗаписи"); 
		
	ПредикатОтбораЗаписейНаНачалоПериода = ВыраженияПоляПериодЗаписи + " >= " + ВыраженияПоляПериод + " ИЛИ ";
	
	ОписаниеЗапроса = ВладелецОператораЗапроса(ОписаниеПакетаЗапросов, ДобавленныйОператор);

	УстановитьОтборВОператорЗапросаДанныхРегистра(
		ДобавленныйОператор, 
		ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода,
		ОписаниеПакетаЗапросов.Параметры, 
		"ОтборСрезаНаНачало" + ОписаниеРегистра.ИмяРегистра,
		, 
		ПредикатОтбораЗаписейНаНачалоПериода,
		Неопределено);
	
	ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, ИмяВТОтборСреза);
КонецПроцедуры	

Процедура ДобавитьЗапросВТИмяРегистраСрез(ОписаниеПакетаЗапросов, ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач СрезПоследних = Истина, Знач ИмяСоздаваемойТаблицы = Неопределено)
	ИмяВТПериодыСреза = ИмяВспомогательнойВТПериодыСреза(ИмяРегистра, ПараметрыПостроения);
	Если СрезПоследних 
		И ДоступенИнтервальныйРегистрСведений(ИмяРегистра) Тогда
	
		Если ИспользоватьПервичныйРегистр(ПараметрыПостроения, ИмяРегистра, Истина) Тогда
			ДобавитьЗапросВТСрезПервичныйРегистр(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
		Иначе
			ДобавитьЗапросВТИнтервалыСрез(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
		КонецЕсли; 	
		ПараметрыПостроения.ИсключаемыеРегистраторы = Ложь;
	Иначе
		ДобавитьЗапросВТПериодыСреза(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ИмяВТПериодыСреза, ПараметрыПостроения, СрезПоследних);
		ДобавитьЗапросВТТаблицаСреза(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ИмяВТПериодыСреза, ПараметрыПостроения, СрезПоследних, ИмяСоздаваемойТаблицы);
	КонецЕсли; 	
КонецПроцедуры

Процедура ДобавитьЗапросВТИнтервалыСрез(ОписаниеПакетаЗапросов, ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	КонецЕсли; 
	
	ПостфиксИменПараметров = ИмяСоздаваемойТаблицы;
	Если ПостфиксИменПараметров = Неопределено Тогда
		ПостфиксИменПараметров = "СрезПоследних" + ИмяРегистра;
	КонецЕсли;	
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);	
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА РегистрСведений.ПериодЗаписи = РегистрСведений.ДатаНачала
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоВозвратноеСобытие,
	|	РегистрСведений.ДатаОкончания КАК ДатаОкончания,
	|	РегистрСведений.ДатаНачала КАК ДатаНачала,
	|	РегистрСведений.Год КАК Год,
	|	РегистрСведений.ПериодПредыдущейЗаписи КАК ПериодПредыдущейЗаписи,
	|	&ШаблонФильтрПериодИсходный КАК Период,
	|	&ШаблонПериодВозвратногоСобытия КАК ПериодВозвратногоСобытия,
	|	&ШаблонРегистратор КАК Регистратор,
	|	&ШаблонРегистраторЗаписи КАК РегистраторЗаписи,
	|	&ШаблонРегистраторСобытия КАК РегистраторСобытия,
	|	&ШаблонПериодЗаписи КАК ПериодЗаписи,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонПустойИнтервал КАК ПустойИнтервал
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведений
	|		ПО (РегистрСведений.ДатаНачала <= &ФильтрПериодПриведенный_)
	|			И (РегистрСведений.ДатаОкончания >= &ФильтрПериодПриведенный_)
	|			И (&ШаблонСвязьПоИзмерениямФильтра)}
	|		ЛЕВОЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведенийЗамена
	|		ПО (РегистрСведений.ПериодПредыдущейЗаписи = РегистрСведенийЗамена.ДатаНачала)
	|			И (РегистрСведений.РегистраторЗаписи <> РегистрСведенийЗамена.РегистраторЗаписи)
	|			И (РегистрСведений.ПериодЗаписи = РегистрСведений.ДатаНачала
	|				ИЛИ РегистрСведенийЗамена.РегистраторЗаписи В (&ШаблонИсключаемыйРегистратор))
	|			И (&ШаблонСвязьПоИзмерениям)";
	
	
	ШаблонУсловияИсключаемыйРегистратор = 
	"НЕ(РегистрСведенийЗамена.ПериодЗаписи ЕСТЬ NULL
	|	И РегистрСведений.РегистраторЗаписи В (&ШаблонИсключаемыйРегистратор))";

	Если ПараметрыПостроения.ИсключаемыеРегистраторы Тогда                 
		ШаблонВыбираемогоРесурса = " 
		|ВЫБОР
		|	КОГДА РегистрСведений.РегистраторЗаписи В (&ИсключаемыеРегистраторы)
		|		ТОГДА РегистрСведенийЗамена.Ресурс_
		|	ИНАЧЕ РегистрСведений.Ресурс_
		|КОНЕЦ";
	Иначе
		ШаблонВыбираемогоРесурса = "РегистрСведений.Ресурс_";
	КонецЕсли;	
	
	
	ОписаниеЗапроса = ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОписаниеЗапроса.ВыбиратьРазрешенные = ТолькоРазрешенные;
	ОписаниеЗапроса.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ОписаниеИспользованиеФильтра();
	ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтра, ОписаниеФильтра, ОписаниеРегистра, "Период", ОператорЗапроса, ПостфиксИменПараметров, ПараметрыПостроения.ВсеЗаписи);
	
	ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведений", "РегистрСведений." + ИмяРегистра + "Интервальный");
	ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведенийЗамена", "РегистрСведений." + ИмяРегистра + "Интервальный");
	
	Если Не ОписаниеИспользованияФильтра.ФильтрВВидеВТ Тогда
		ЗаменитьВедущуюТаблицуВСоединении(ОператорЗапроса, "РегистрСведенийЗамена", "РегистрСведений");
	КонецЕсли;
	
	ФильтрПериодИсходный = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "Период", "ПериодИсходный");
	ФильтрПериодПриведенный =ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "Период", "ПериодПриведенный");
	
	ФильтрПериодПриведенный.ПустоеЗначениеКакМаксимальное = Истина;
	
	Если ФормироватьСПериодичностьДень Тогда
		ФильтрПериодПриведенный.Кратность = "ДЕНЬ";
		ФильтрПериодПриведенный.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
		
		Если Не ПараметрыПостроения.ВключаяГраницу Тогда
			ФильтрПериодПриведенный.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
			ФильтрПериодПриведенный.Сдвиг = -1;
			ФильтрПериодПриведенный.КратностьСдвига = "СЕКУНДА";	   
		КонецЕсли; 
	ИначеЕсли Не ПараметрыПостроения.ВключаяГраницу Тогда
		ФильтрПериодПриведенный.Сдвиг = -1;
		ФильтрПериодПриведенный.КратностьСдвига = "СЕКУНДА";
	КонецЕсли; 		
	
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрПериодПриведенный_", ФильтрПериодПриведенный);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрПериодИсходный_", ФильтрПериодИсходный);
		
	Если ПараметрыПостроения.ВсеЗаписи Тогда
		УстановитьТипСоединения(ОператорЗапроса, "РегистрСведений", "ЛЕВОЕ");
	КонецЕсли; 
		
	УсловияСвязиПоИзмерениям = Новый Массив;
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		Если ПараметрыПостроения.ВсеЗаписи И ОписаниеФильтра.ИзмеренияФильтра.Найти(Измерение) <> Неопределено Тогда
			ВыражениеПоля = ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтра, Измерение);
		Иначе
			ВыражениеПоля = "РегистрСведений." + Измерение;
		КонецЕсли;	
			
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоля, Измерение);
		ТекстУсловия = "РегистрСведений." + Измерение + " = РегистрСведенийЗамена." + Измерение;
		УсловияСвязиПоИзмерениям.Добавить(ТекстУсловия);
	КонецЦикла;
	
	Если ПараметрыПостроения.ИсключаемыеРегистраторы Тогда
		ИсключаемыеРегистраторы = ИсключаемыеРегистраторы(ПараметрыПостроения);
		ИмяПараметраИсключаемыеРегистраторы = УстановитьПараметрОтбораПоИсключаемомуРегистратору(ОписаниеПакетаЗапросов, ИсключаемыеРегистраторы, ИмяСоздаваемойТаблицы);
		
		ТекстУсловияСоединенияСТаблицейЗамены = ТекстУсловияСоединения(ОператорЗапроса, "РегистрСведенийЗамена");
		ТекстУсловияСоединенияСТаблицейЗамены = СтрЗаменить(ТекстУсловияСоединенияСТаблицейЗамены, "&ШаблонИсключаемыйРегистратор", "&" + ИмяПараметраИсключаемыеРегистраторы);
		
		ОчиститьУсловияСоединения(ОператорЗапроса, "РегистрСведенийЗамена");
		
		ДобавитьУсловиеСоединения(ОператорЗапроса, "РегистрСведенийЗамена", УсловияСвязиПоИзмерениям);
		ДобавитьУсловиеСоединения(ОператорЗапроса, "РегистрСведенийЗамена", ТекстУсловияСоединенияСТаблицейЗамены);
				
		Если Не ПараметрыПостроения.ВсеЗаписи Тогда				
			ТекстУсловияИсключаемыйРегистратор = СтрЗаменить(ШаблонУсловияИсключаемыйРегистратор, "&ШаблонИсключаемыйРегистратор", "&" + ИмяПараметраИсключаемыеРегистраторы);
			ДобавитьУсловие(ОператорЗапроса, ТекстУсловияИсключаемыйРегистратор);
		КонецЕсли;	
		ШаблонВыбираемогоРесурса = СтрЗаменить(ШаблонВыбираемогоРесурса, "&ИсключаемыеРегистраторы", "&" + ИмяПараметраИсключаемыеРегистраторы);		
	Иначе 
		УдалитьТаблицуИзОператораЗапроса(ОператорЗапроса, "РегистрСведенийЗамена");
	КонецЕсли;
	
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериод(ФильтрПериодИсходный), "Период");
	
	СоответствиеЭлементовОтбораВыражениям = Новый Соответствие;
	
	Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ВыражениеПоляПериодВозвратногоСобытия = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "ДействуетДо");
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериодВозвратногоСобытия, "ПериодВозвратногоСобытия");	
		СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("ПериодВозвратногоСобытия"), ВыражениеПоляПериодВозвратногоСобытия);
	КонецЕсли;
	
	ВыражениеПоляРегистратор = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "РегистраторСобытия");
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРегистратор, "Регистратор");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("Регистратор"), ВыражениеПоляРегистратор);

	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРегистратор, "РегистраторСобытия");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("Регистратор"), ВыражениеПоляРегистратор);
	
	ВыражениеПоляРегистраторЗаписи = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "РегистраторЗаписи");
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРегистраторЗаписи, "РегистраторЗаписи");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("РегистраторЗаписи"), ВыражениеПоляРегистраторЗаписи);
	
	ВыражениеПоляПериодЗаписи = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "ПериодЗаписи");
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериодЗаписи, "ПериодЗаписи");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("ПериодЗаписи"), ВыражениеПоляПериодЗаписи);
	
	ВыражениеПоляПустойИнтервал = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "ПустойИнтервал");
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПустойИнтервал, "ПустойИнтервал");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("ПустойИнтервал"), ВыражениеПоляПустойИнтервал);
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", Ресурс);
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРесурс, Ресурс);	
		СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег(Ресурс), ВыражениеПоляРесурс);
	КонецЦикла;	
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", Ресурс);
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРесурс, Ресурс);	
		СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег(Ресурс), ВыражениеПоляРесурс);
	КонецЦикла;	

	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ВыражениеПоляРеквизит = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", Реквизит);
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРеквизит, Реквизит);	
		СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег(Реквизит), ВыражениеПоляРеквизит);
	КонецЦикла;	
	
	УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра, ПараметрыПостроения);
	
	СчПараметров = 1;
	УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.Отборы, ОписаниеПакетаЗапросов.Параметры, ИмяСоздаваемойТаблицы, СчПараметров, , , Ложь, Не ПараметрыПостроения.ИсключаемыеРегистраторы);
	
	УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.ОтборыПрименяемыеКСрезу, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров + "ОтборыКСрезу", СчПараметров,,,,Не ПараметрыПостроения.ИсключаемыеРегистраторы);
	
	ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапроса, 0, ОписаниеИспользованияФильтра);
	ДобавитьПостоянныеПоляВОписаниеЗапроса(ОписаниеПакетаЗапросов, ОписаниеЗапроса, ПараметрыПостроения.ПостоянныеПоля, ИмяСоздаваемойТаблицы);
	
	УстановитьПсевдонимыПолей(ОписаниеЗапроса, ПараметрыПостроения);
	
	ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеЗапроса, ПараметрыПостроения.ИндексироватьПо);	
КонецПроцедуры

Процедура ДобавитьЗапросВТСрезПервичныйРегистр(ОписаниеПакетаЗапросов, ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	КонецЕсли;	
	
	ПостфиксИменПараметров = ИмяСоздаваемойТаблицы;
	Если ПостфиксИменПараметров = Неопределено Тогда
		ПостфиксИменПараметров = "СрезПоследних" + ИмяРегистра;
	КонецЕсли;
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ПараметрыНаследованияРесурсов = РегистрыСведений[ИмяРегистра].ПараметрыНаследованияРесурсов();
	ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);
	
	ШаблонЗапросаВТРегистрСведений = 
	"ВЫБРАТЬ
	|	РегистрСведений.Период КАК Период,
	|	ВЫБОР
	|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
	|		ИНАЧЕ РегистрСведений.ДействуетДо
	|	КОНЕЦ КАК ДействуетДо,
	|	&ШаблонИзмерения КАК Измерения
	|ПОМЕСТИТЬ ВТРегистрСведений
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведений
	|		ПО (РегистрСведений.Период <= &ФильтрПериодПриведенный_)
	|			И (&ШаблонУсловияСвязиПоИзмерениямФильтра)";
	
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ШаблонЗапросаВТРегистрСведений = СтрЗаменить(ШаблонЗапросаВТРегистрСведений, "РегистрСведений.ДействуетДо", "ДАТАВРЕМЯ(1, 1, 1)");		
	КонецЕсли;
	
	ОписаниеЗапросаВТРегистрСведений = ОписаниеЗапросаПоТексту(ШаблонЗапросаВТРегистрСведений);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаВТРегистрСведений);
	ОписаниеЗапросаВТРегистрСведений.ВыбиратьРазрешенные = ТолькоРазрешенные;
	
	ОператорЗапросаВТРегистрСведений = ОписаниеЗапросаВТРегистрСведений.Операторы[0];
	ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаВТРегистрСведений, "РегистрСведений", "РегистрСведений." + ИмяРегистра);
	
	ОписаниеИспользованияФильтраДанныеРегистра = ОписаниеИспользованиеФильтра();
	ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтраДанныеРегистра, ОписаниеФильтра, ОписаниеРегистра, "Период", ОператорЗапросаВТРегистрСведений, ПостфиксИменПараметров, ПараметрыПостроения.ВсеЗаписи);
	
	ШаблонЗапросаВТПересеченияРегистров = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрСведений.Период КАК Период,
	|	ВЫБОР
	|		КОГДА РегистрСведений.Период < РегистрСведенийПересечения.Период
	|				И РегистрСведений.ДействуетДо > РегистрСведенийПересечения.Период
	|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
	|		ИНАЧЕ РегистрСведений.ДействуетДо
	|	КОНЕЦ КАК ДействуетДо,
	|	&ШаблонИзмерения КАК Измерения
	|ПОМЕСТИТЬ ВТПересеченияРегистров
	|ИЗ
	|	ВТРегистрСведений КАК РегистрСведений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрСведений КАК РегистрСведенийПересечения
	|		ПО РегистрСведений.Период < РегистрСведенийПересечения.Период
	|			И РегистрСведений.ДействуетДо > РегистрСведенийПересечения.Период
	|			И &ШаблонУсловияСвязиПоИзмерениям";
	
	ОписаниеЗапросаВТПересеченияРегистров = ОписаниеЗапросаПоТексту(ШаблонЗапросаВТПересеченияРегистров);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаВТПересеченияРегистров);
	ОписаниеЗапросаВТПересеченияРегистров.ВыбиратьРазрешенные = ТолькоРазрешенные;
	
	ОператорЗапросаВТПересеченияРегистров = ОписаниеЗапросаВТПересеченияРегистров.Операторы[0];	
	
	ШаблонЗапросаВТМаксимальныеПериоды =	
	"ВЫБРАТЬ
	|	&ШаблонФильтрПериод КАК ЗаданныйПериод,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонМаксимальныйПериодРесурсы КАК МаксимальныйПериодРесурсы,
	|	МАКСИМУМ(РегистрСведений.Период) КАК МаксимальныйПериодИзмерения
	|ПОМЕСТИТЬ ВТМаксимальныеПериоды
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПересеченияРегистров КАК РегистрСведений
	|		ПО (&ФильтрПериодПриведенный_ >= РегистрСведений.Период)
	|			И (&ШаблонУсловияСвязиПоИзмерениям)";
	
	ШаблонПоляМаксимальныйПериодРесурсы = "
	|МАКСИМУМ(ВЫБОР
	|		КОГДА &ФильтрПериодПриведенный_ <= РегистрСведений.ДействуетДо
	|			ТОГДА РегистрСведений.Период
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ)";
	
	ОписаниеЗапросаВТМаксимальныеПериоды = ОписаниеЗапросаПоТексту(ШаблонЗапросаВТМаксимальныеПериоды);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаВТМаксимальныеПериоды);
	ОписаниеЗапросаВТМаксимальныеПериоды.ВыбиратьРазрешенные = ТолькоРазрешенные;
	
	ОператорЗапросаВТМаксимальныеПериоды = ОписаниеЗапросаВТМаксимальныеПериоды.Операторы[0];
	
	ОписаниеИспользованияФильтраМаксимальныеПериоды = ОписаниеИспользованиеФильтра();
	ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтраМаксимальныеПериоды, ОписаниеФильтра, ОписаниеРегистра, "Период", ОператорЗапросаВТМаксимальныеПериоды, ПостфиксИменПараметров);
	
	ШаблонЗапросВТСрез = 
	"ВЫБРАТЬ
	|	ИзмеренияДаты.ЗаданныйПериод КАК Период,
	|	РегистрСведенийИзмерения.Период КАК ПериодЗаписи,
	|	ВЫБОР
	|		КОГДА ИзмеренияДаты.МаксимальныйПериодИзмерения = ИзмеренияДаты.МаксимальныйПериодРесурсы
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоВозвратноеСобытие,
	|	РегистрСведенийИзмерения.ДействуетДо КАК ПериодВозвратногоСобытия,
	|	РегистрСведенийИзмерения.Регистратор КАК Регистратор,
	|	РегистрСведенийИзмерения.Регистратор КАК РегистраторЗаписи,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонРеквизиты КАК Реквизиты
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТМаксимальныеПериоды КАК ИзмеренияДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведенийИзмерения
	|		ПО ИзмеренияДаты.МаксимальныйПериодИзмерения = РегистрСведенийИзмерения.Период
	|			И &ШаблонУсловияСвязиПоИзмерениям
	|		ЛЕВОЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведенийРесурсы
	|		ПО ИзмеренияДаты.МаксимальныйПериодРесурсы = РегистрСведенийРесурсы.Период
	|			И &ШаблонУсловияСвязиПоИзмерениям";			
	
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ШаблонЗапросВТСрез = СтрЗаменить(ШаблонЗапросВТСрез, "РегистрСведенийИзмерения.ДействуетДо", "ДАТАВРЕМЯ(1, 1, 1)");		
	КонецЕсли;
	
	ОписаниеЗапросаВТСрез = ОписаниеЗапросаПоТексту(ШаблонЗапросВТСрез);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаВТСрез);
	ОписаниеЗапросаВТСрез.ВыбиратьРазрешенные = ТолькоРазрешенные;
	ОписаниеЗапросаВТСрез.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	
	ОператорЗапросаВТСрез = ОписаниеЗапросаВТСрез.Операторы[0];
	ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаВТСрез, "РегистрСведенийИзмерения", "РегистрСведений." + ИмяРегистра);
	ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаВТСрез, "РегистрСведенийРесурсы", "РегистрСведений." + ИмяРегистра);
	
	ФильтрПериодПриведенный = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтраДанныеРегистра, "Период", "ПериодПриведенный");
	ФильтрПериод = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтраДанныеРегистра, "Период", "Период");
	
	ФильтрПериодПриведенный.ПустоеЗначениеКакМаксимальное = Истина;
	
	Если ФормироватьСПериодичностьДень Тогда
		ФильтрПериодПриведенный.Кратность = "ДЕНЬ";
		ФильтрПериодПриведенный.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
	КонецЕсли;
	
	Если Не ПараметрыПостроения.ВключаяГраницу Тогда
		ФильтрПериодПриведенный.Сдвиг = -1;
		ФильтрПериодПриведенный.КратностьСдвига = "СЕКУНДА";
		ФильтрПериодПриведенный.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
	КонецЕсли;	

	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтраДанныеРегистра, "&ФильтрПериодПриведенный_", ФильтрПериодПриведенный);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтраДанныеРегистра, "&ФильтрПериод_", ФильтрПериод);
		
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтраМаксимальныеПериоды, "&ФильтрПериодПриведенный_", ФильтрПериодПриведенный);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтраМаксимальныеПериоды, "&ФильтрПериод_", ФильтрПериод);
	
	Если ПараметрыПостроения.ВсеЗаписи Тогда
		УстановитьТипСоединения(ОператорЗапросаВТМаксимальныеПериоды, "РегистрСведений", "ЛЕВОЕ");
	КонецЕсли;	
	
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеПериоды, 0, ВыражениеПоляПериод(ФильтрПериод), "ЗаданныйПериод");
	ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеПериоды, ВыражениеПоляПериод(ФильтрПериод));
	
	ВыражениеПоляМаксимальныйПериодРесурсы = СтрЗаменить(ШаблонПоляМаксимальныйПериодРесурсы, "&ФильтрПериодПриведенный_", ВыражениеПоляПериод(ФильтрПериодПриведенный));
	ВыражениеПоляМаксимальныйПериодРесурсы = СтрЗаменить(ВыражениеПоляМаксимальныйПериодРесурсы, "&ФильтрПериод_", ВыражениеПоляПериод(ФильтрПериод));
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеПериоды, 0, ВыражениеПоляМаксимальныйПериодРесурсы, "МаксимальныйПериодРесурсы");
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		ВыражениеИзмерениеВТРегистрСведений = "РегистрСведений." + Измерение;		
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТРегистрСведений, 0, ВыражениеИзмерениеВТРегистрСведений, Измерение);
		
		ВыражениеИзмерениеВТПересеченияРегистров = "РегистрСведений." + Измерение;
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТПересеченияРегистров, 0, ВыражениеИзмерениеВТПересеченияРегистров, Измерение);
		
		Если ОписаниеФильтра.ИзмеренияФильтра.Найти(Измерение) <> Неопределено И ПараметрыПостроения.ВсеЗаписи Тогда
			ВыражениеИзмерениеВТМаксимальныеПериоды = ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтраМаксимальныеПериоды, Измерение); 	
		Иначе
			ВыражениеИзмерениеВТМаксимальныеПериоды = "РегистрСведений." + Измерение;	
		КонецЕсли;	
		
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеПериоды, 0, ВыражениеИзмерениеВТМаксимальныеПериоды, Измерение);		
		ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеПериоды, ВыражениеИзмерениеВТМаксимальныеПериоды);
		
		ВыражениеИзмерениеВТСрез = "ИзмеренияДаты." + Измерение;
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТСрез, 0, ВыражениеИзмерениеВТСрез, Измерение);
		
		УсловиеСвязи = ВыражениеИзмерениеВТПересеченияРегистров + " = РегистрСведенийПересечения." + Измерение;
		ДобавитьУсловиеСоединения(ОператорЗапросаВТПересеченияРегистров, "РегистрСведенийПересечения", УсловиеСвязи);
				
		УсловиеСвязи = ВыражениеИзмерениеВТСрез + " = РегистрСведенийИзмерения." + Измерение;
		ДобавитьУсловиеСоединения(ОператорЗапросаВТСрез, "РегистрСведенийИзмерения", УсловиеСвязи);
		
		УсловиеСвязи = ВыражениеИзмерениеВТСрез + " = РегистрСведенийРесурсы." + Измерение;
		ДобавитьУсловиеСоединения(ОператорЗапросаВТСрез, "РегистрСведенийРесурсы", УсловиеСвязи);
	КонецЦикла;	
	
	ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапросаВТРегистрСведений, 0, ОписаниеИспользованияФильтраДанныеРегистра);
	ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапросаВТМаксимальныеПериоды, 0, ОписаниеИспользованияФильтраМаксимальныеПериоды, Истина);
	ДобавитьДополнительныеПоляПоПсевдонимуИсточника(ОписаниеЗапросаВТСрез, 0, "ИзмеренияДаты", ОписаниеФильтра.ДополнительныеПоляФильтра);

	ДобавитьПостоянныеПоляВОписаниеЗапроса(ОписаниеПакетаЗапросов, ОписаниеЗапросаВТСрез, ПараметрыПостроения.ПостоянныеПоля, ИмяСоздаваемойТаблицы);
			
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТСрез, 0, ВыражениеПоляНаследуемыйРесурс(Ресурс, ПараметрыНаследованияРесурсов, ОписаниеПакетаЗапросов.Параметры), Ресурс);	
	КонецЦикла;	
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТСрез, 0, "РегистрСведенийРесурсы." + Ресурс, Ресурс);	
	КонецЦикла;	
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТСрез, 0, "РегистрСведенийРесурсы." + Реквизит, Реквизит);	
	КонецЦикла;	
	
	ПриПолученииВыраженийРесурсаВозвратныхЗаписейПервичногоРегистра(ИмяРегистра, ОписаниеЗапросаВТСрез, ОператорЗапросаВТСрез);
	
	УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтраДанныеРегистра, ПараметрыПостроения);
	УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтраМаксимальныеПериоды, ПараметрыПостроения);
	
	СчПараметров = 1;
	УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапросаВТРегистрСведений, ПараметрыПостроения.Отборы, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров, СчПараметров,,,,Истина);
	// Это условие позволяет отработать ситуация когда запрос используется и для получения записей на начало периода и для получения возвратных движений
	ПредикатУсловияСрезаНаНачало = "РегистрСведений.Период >= ИзмеренияДаты.ЗаданныйПериод ИЛИ ";
	УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапросаВТСрез, ПараметрыПостроения.ОтборыПрименяемыеКСрезу, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров + "ОтборыКСрезу", СчПараметров,,,,Истина);
	                      
	УстановитьПсевдонимыПолей(ОписаниеЗапросаВТСрез, ПараметрыПостроения);
	ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеЗапросаВТСрез, ПараметрыПостроения.ИндексироватьПо);	
	
	ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, "ВТРегистрСведений");
	ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, "ВТПересеченияРегистров");
	ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, "ВТМаксимальныеПериоды");
	
КонецПроцедуры

Процедура ПриПолученииВыраженийРесурсаВозвратныхЗаписейПервичногоРегистра(ИмяРегистра, ОписаниеЗапроса, ОператорЗапроса)
	Если НРег(ИмяРегистра) <> НРег(Метаданные.РегистрыСведений.КадроваяИсторияСотрудников.Имя) Тогда
		Возврат;
	КонецЕсли;	
	
	ШаблонПоляВидСобытия = 
	"ВЫБОР
	|	КОГДА &ЭтоВозвратноеСобытие
	|		И &ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные))
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение)
	|	ИНАЧЕ &ВидСобытия
	|КОНЕЦ";

	ВыражениеВидСобытия = ВыражениеПоляПоПсевдониму(ОператорЗапроса, "ВидСобытия");
	
	Если ВыражениеВидСобытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыражениеЭтоВозвратноеСобытие = ВыражениеПоляПоПсевдониму(ОператорЗапроса, "ЭтоВозвратноеСобытие");
	
	ТекстПоля = СтрЗаменить(ШаблонПоляВидСобытия, "&ЭтоВозвратноеСобытие", ВыражениеЭтоВозвратноеСобытие);
	ТекстПоля = СтрЗаменить(ТекстПоля, "&ВидСобытия", ВыражениеВидСобытия);

	ИндексОператора = ОписаниеЗапроса.Операторы.Найти(ОператорЗапроса);
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, ИндексОператора, ТекстПоля, "ВидСобытия", Ложь);
КонецПроцедуры	

Процедура ДобавитьЗапросВТПериодыСреза(ОписаниеПакетаЗапросов, ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ИмяВТПериодыСреза, Знач ПараметрыПостроения = Неопределено, Знач СрезПоследних = Истина)	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	КонецЕсли;	
		
	ПостфиксИменПараметров = ИмяВТПериодыСреза;
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ШаблонЗаданныйПериод КАК ЗаданныйПериод,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонАгрегированныйПериод КАК Период
	|ПОМЕСТИТЬ ИмяВТРезультат
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведений
	|		ПО (РегистрСведений.Период < &ФильтрПриведенный)
	|			И (&ШаблонУсловиеСвязиИзмерениям)}
	|
	|СГРУППИРОВАТЬ ПО
	|	&ШаблонПериод";
		
	ОписаниеЗапроса = ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОписаниеЗапроса.ВыбиратьРазрешенные = ТолькоРазрешенные;
	ОписаниеЗапроса.ТаблицаДляПомещения = ИмяВТПериодыСреза;
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ОписаниеИспользованиеФильтра();
	ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтра, ОписаниеФильтра, ОписаниеРегистра, "Период", ОператорЗапроса, ПостфиксИменПараметров, ПараметрыПостроения.ВсеЗаписи);
	
	ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведений", "РегистрСведений." + ИмяРегистра);
		                                                      
	ОписаниеПоляПериод = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "Период", "Период");
	ОписаниеПоляПериодПриведенный = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "Период", "ПериодПриведенный");
	
	ОписаниеПоляПериодПриведенный.ПустоеЗначениеКакМаксимальное = Истина;
	
	Если СрезПоследних Тогда
		АгрегатнаяФункцияКПериоду = "МАКСИМУМ";
		Если ПараметрыПостроения.ВключаяГраницу Тогда
			ОписаниеПоляПериодПриведенный.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
			ОператорСравненияПериода = "<=";
		Иначе
			ОписаниеПоляПериодПриведенный.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
			ОператорСравненияПериода = "<";
		КонецЕсли;		
	Иначе
		АгрегатнаяФункцияКПериоду = "МИНИМУМ";
		Если ПараметрыПостроения.ВключаяГраницу Тогда
			ОписаниеПоляПериодПриведенный.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";	
			ОператорСравненияПериода = ">=";
		Иначе
			ОписаниеПоляПериодПриведенный.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
			ОператорСравненияПериода = ">";
		КонецЕсли;	
	КонецЕсли;
	
	Если ФормироватьСПериодичностьДень Тогда
		ОписаниеПоляПериодПриведенный.Кратность = "ДЕНЬ";
	КонецЕсли;	
	
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи, "<", ОператорСравненияПериода);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрПриведенный", ОписаниеПоляПериодПриведенный);
		
	ВыражениеПоляАгрегированныйПериод = АгрегатнаяФункцияКПериоду + "(РегистрСведений.Период)";
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляАгрегированныйПериод, "Период");
	
	ВыражениеПоляЗаданныйПериод = ВыражениеПоляПериод(ОписаниеПоляПериод);
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляЗаданныйПериод, "ЗаданныйПериод");
	
	ДобавитьГруппировку(ОператорЗапроса, ВыражениеПоляЗаданныйПериод);
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		Если ПараметрыПостроения.ВсеЗаписи И ОписаниеРегистра.ИзмеренияФильтра.Найти(Измерение) <> НеОпределено Тогда
			ИмяПоляИзмерение = ПолеТаблицыФильтра(ОписаниеФильтра, Измерение);
			ВыражениеИзмерения = ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтра, Измерение);
		Иначе
			ВыражениеИзмерения = "РегистрСведений." + Измерение;
		КонецЕсли;	

		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеИзмерения, Измерение);	
		ДобавитьГруппировку(ОператорЗапроса, ВыражениеИзмерения);
	КонецЦикла;	
		
	УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра, ПараметрыПостроения);	
	УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.Отборы, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров,,,,,Истина);
	ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапроса, 0, ОписаниеИспользованияФильтра, Истина);	
КонецПроцедуры

Процедура ДобавитьЗапросВТТаблицаСреза(ОписаниеПакетаЗапросов, ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ИмяВТПериодыСреза, Знач ПараметрыПостроения = Неопределено, Знач СрезПоследних = Истина, Знач ИмяСоздаваемойТаблицы = Неопределено)
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	КонецЕсли;	
	
	ПостфиксИменПараметров = ИмяСоздаваемойТаблицы;
	Если ПостфиксИменПараметров = Неопределено Тогда
		ПостфиксИменПараметров = ИмяРегистра + "Срез";
	КонецЕсли;	
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	МаксимальныеПериоды.ЗаданныйПериод КАК Период,
	|	РегистрСведений.Период КАК ПериодЗаписи,
	|	&ШаблонЭтоВозвратноеСобытие КАК ЭтоВозвратноеСобытие,
	|	РегистрСведений.ДействуетДо КАК ПериодВозвратногоСобытия,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонВозвратныеРесурсы КАК ВозвратныеРесурсы,
	|	&ШаблонРеквизиты КАК Реквизиты	
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТПериодыСреза КАК МаксимальныеПериоды
	|		{ЛЕВОЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведений
	|		ПО (РегистрСведений.Период = МаксимальныеПериоды.Период)
	|			И &ШаблонУсловияСвязиПоИзмерениям}";

	
	ШаблонПоляВозвратноеЗначение = "
	|	ВЫБОР
	|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ РегистрСведений.ДействуетДо > &ЗаданныйПериод
	|					И &ЗаданныйПериод <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ЗначениеОбычногоРесурса
	|		ИНАЧЕ &ЗначениеВозвратногоРесурса
	|	КОНЕЦ";
	
	ОписаниеПоляЗаданныйПериод = ОписаниеПоляПериода("ЗаданныйПериод", "МаксимальныеПериоды");
		
	ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);
	Если ФормироватьСПериодичностьДень Тогда
		ОписаниеПоляЗаданныйПериод.Кратность = "ДЕНЬ";
		Если ПараметрыПостроения.ВключаяГраницу Тогда
			ОписаниеПоляЗаданныйПериод.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
		Иначе
			ОписаниеПоляЗаданныйПериод.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		КонецЕсли;
	КонецЕсли;
	
	ШаблонПоляВозвратноеЗначение = СтрЗаменить(ШаблонПоляВозвратноеЗначение, "&ЗаданныйПериод", ВыражениеПоляПериод(ОписаниеПоляЗаданныйПериод));
	
	ОписаниеЗапроса = ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОписаниеЗапроса.ВыбиратьРазрешенные = ТолькоРазрешенные;
	ОписаниеЗапроса.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "МаксимальныеПериоды", ИмяВТПериодыСреза);
	
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		УдалитьКолонкуИзОписаниеЗапроса(ОписаниеЗапроса, "ПериодВозвратногоСобытия");
	КонецЕсли;	
	
	ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведений", "РегистрСведений." + ИмяРегистра);
	
	Если ОписаниеРегистра.ЕстьВозвратныеСобытия И СрезПоследних Тогда
		ВыражениеЭтоВозвратнаяЗапись = СтрЗаменить(ШаблонПоляВозвратноеЗначение, "&ЗначениеОбычногоРесурса", "ЛОЖЬ");
		ВыражениеЭтоВозвратнаяЗапись = СтрЗаменить(ВыражениеЭтоВозвратнаяЗапись, "&ЗначениеВозвратногоРесурса", "ИСТИНА");
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеЭтоВозвратнаяЗапись, "ЭтоВозвратноеСобытие");
	КонецЕсли;
	
	УсловияСвязиПоИзмерениям = Новый Массив;
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "МаксимальныеПериоды." + Измерение, Измерение);
		
		ТекстУсловияСвязи = "МаксимальныеПериоды." + Измерение + " = РегистрСведений." + Измерение; 
		ДобавитьУсловиеСоединения(ОператорЗапроса, "РегистрСведений", ТекстУсловияСвязи);;	
	КонецЦикла;
		
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Ресурс, Ресурс);
	КонецЦикла;

	ВыраженияРесурсов = Новый Соответствие;
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		Если СрезПоследних Тогда
			ВыражениеРесурс = СтрЗаменить(ШаблонПоляВозвратноеЗначение, "&ЗначениеОбычногоРесурса", Ресурс);
			ВыражениеРесурс = СтрЗаменить(ВыражениеРесурс, "&ЗначениеВозвратногоРесурса", Ресурс + "ПоОкончании");
			ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеРесурс, Ресурс);
			ВыраженияРесурсов.Вставить(ВРег(Ресурс), ВыражениеРесурс);
		Иначе
			ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Ресурс, Ресурс);
			ИмяВозвратногоРесурса = Ресурс + "ПоОкончании";
			ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + ИмяВозвратногоРесурса, ИмяВозвратногоРесурса);
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Реквизит, Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.СтандартныеРеквизиты Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Реквизит, Реквизит);
	КонецЦикла;
		
	ДобавитьПостоянныеПоляВОписаниеЗапроса(ОписаниеПакетаЗапросов, ОписаниеЗапроса, ПараметрыПостроения.ПостоянныеПоля, ПостфиксИменПараметров);
	
	УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.ОтборыПрименяемыеКСрезу, ОписаниеПакетаЗапросов.Параметры, ИмяРегистра + "ОтборыСреза",,,,,Истина);
		
	ДобавитьДополнительныеПоляПоПсевдонимуИсточника(ОписаниеЗапроса, 0, "МаксимальныеПериоды", ОписаниеФильтра.ДополнительныеПоляФильтра);
	
	УстановитьПсевдонимыПолей(ОписаниеЗапроса, ПараметрыПостроения);
	
	ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеЗапроса, ПараметрыПостроения.ИндексироватьПо);	
		
	ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, ИмяВТПериодыСреза);		
КонецПроцедуры

Процедура ДобавитьЗапросВТПериодыИмяРегистра(ОписаниеПакетаЗапросов, ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)	
	Если ДоступенИнтервальныйРегистрСведений(ИмяРегистра) 
		И Не ИспользоватьПервичныйРегистр(ПараметрыПостроения, ИмяРегистра, Ложь, 0) Тогда
		
		ДобавитьЗапросВТПериодыИмяИнтервальногоРегистра(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
	Иначе
		ДобавитьЗапросВТПериодыИмяПервичногоРегистра(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
	КонецЕсли; 
	ПараметрыПостроения.ИсключаемыеРегистраторы = Ложь;
КонецПроцедуры

Процедура ДобавитьЗапросВТПериодыИмяИнтервальногоРегистра(ОписаниеПакетаЗапросов, ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)	
	ИмяИнтервальногоРегистра = ИмяРегистра + "Интервальный";
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраПериоды();
	КонецЕсли; 
	
	ПостфиксИменПараметров = ИмяСоздаваемойТаблицы;
	Если ПостфиксИменПараметров = Неопределено Тогда
		ПостфиксИменПараметров = "Периоды" + ИмяРегистра;
	КонецЕсли; 
		
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);	
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РегистрСведений.ДатаНачала <= &ФильтрДатаНачалаПолученияПериода_
	|			ТОГДА &ФильтрДатаНачалаПолученияПериода_
	|		ИНАЧЕ &РегистрДатаНачалаПриведенная_
	|	КОНЕЦ КАК НачалоПериода,
	|	ВЫБОР
	|		КОГДА &РегистрДатаОкончания_ > 
	|				&ФильтрДатаОкончанияПриведенная_
	|			ТОГДА &ФильтрДатаОкончанияПриведенная_
	|		ИНАЧЕ &РегистрДатаОкончания_
	|	КОНЕЦ КАК КонецПериода,
	|	ВЫБОР
	|		КОГДА РегистрСведений.ДатаНачала = РегистрСведений.ПериодЗаписи
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоВозвратноеСобытие,
	|РегистрСведений.ПериодЗаписи КАК Период,
	|	РегистрСведений.РегистраторСобытия КАК Регистратор,
	|	&ШаблонДатаНачала КАК ДатаНачала,
	|	&ШаблонДатаОкончания КАК ДатаОкончания,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонРеквизиты КАК Реквизиты
	|ПОМЕСТИТЬ ВТИнтервалыКадроваяИсторияСотрудников
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведений
	|		ПО (РегистрСведений.ДатаНачала >= &ФильтрДатаНачалаСледующийПериод_
	|					И РегистрСведений.ДатаНачала <= &ФильтрДатаОкончанияПриведенная_ 
	|				ИЛИ &РегистрДатаНачалаПриведенная_ <= &ФильтрДатаСреза_
	|					И РегистрСведений.ДатаОкончания >= &ФильтрДатаСреза_)
	|					И &УсловиеПериодичностьДень
	|			И (&ШаблонУсловиеПоИзмерениям_)";
	
	УсловияПериодичностьДень = "(РегистрСведений.ДатаОкончания >= КОНЕЦПЕРИОДА(РегистрСведений.ДатаНачала, ДЕНЬ))";		
	
	ОписаниеЗапроса = ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОписаниеЗапроса.ВыбиратьРазрешенные = ТолькоРазрешенные;
	ОписаниеЗапроса.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ОписаниеИспользованиеФильтра();
	ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтра, ОписаниеФильтра,  ОписаниеРегистра, "ДатаНачала, ДатаОкончания", ОператорЗапроса, ПостфиксИменПараметров);
	
	ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведений", "РегистрСведений." + ИмяРегистра + "Интервальный");
		
	ФильтрДатаНачалаПолученияПериода = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачалаПолученияПериода");
	ФильтрДатаОкончанияИсходная = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДФильтратаОкончанияИсходная");
	ФильтрДатаОкончанияПриведенная =ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ФильтрДатаОкончанияПриведенная");
	ФильтрДатаНачалаСледующийПериод = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачалаСледующийПериод");
	ФильтрДатаСреза =  ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаСреза");
	ФильтрДатаНачалаИсходная = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачалаИсходная");
	
	ФильтрДатаОкончанияПриведенная.ПустоеЗначениеКакМаксимальное = Истина;
	
	РегистрДатаНачалаПриведенная = ОписаниеПоляПериода("ДатаНачала", "РегистрСведений");
	
	ВыражениеРегистрДатаОкончания = "РегистрСведений.ДатаОкончания";
	
	Если ФормироватьСПериодичностьДень Тогда
		ФильтрДатаНачалаПолученияПериода.Кратность = "ДЕНЬ";
		ФильтрДатаНачалаПолученияПериода.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		
		РегистрДатаНачалаПриведенная.Кратность = "ДЕНЬ";
		РегистрДатаНачалаПриведенная.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		
		ФильтрДатаОкончанияПриведенная.Кратность = "ДЕНЬ";
		ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
		
		ФильтрДатаНачалаСледующийПериод.Кратность = "ДЕНЬ";
		ФильтрДатаНачалаСледующийПериод.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		ФильтрДатаНачалаСледующийПериод.Сдвиг = 1;
		
		ФильтрДатаСреза.Кратность = "ДЕНЬ";
		ФильтрДатаСреза.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
		
		// Приводим дату на конец текущего дня(предыдущего, если интервал был прерван)
		ВыражениеРегистрДатаОкончания = "КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(РегистрСведений.ДатаОкончания, СЕКУНДА, -86399), ДЕНЬ)";
	Иначе	
		УсловияПериодичностьДень = "ИСТИНА";
		ФильтрДатаНачалаСледующийПериод.Сдвиг = 1;
		ФильтрДатаНачалаСледующийПериод.КратностьСдвига = "СЕКУНДА";
	КонецЕсли;	
	
	ТекстПоляНачалоПериода = ВыражениеПоляПоПсевдониму(ОператорЗапроса, "НачалоПериода");
	ТекстПоляНачалоПериода = СтрЗаменить(ТекстПоляНачалоПериода, "&ФильтрДатаНачалаПолученияПериода_", ВыражениеПоляПериод(ФильтрДатаНачалаПолученияПериода));
	ТекстПоляНачалоПериода = СтрЗаменить(ТекстПоляНачалоПериода, "&РегистрДатаНачалаПриведенная_", ВыражениеПоляПериод(РегистрДатаНачалаПриведенная));
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ТекстПоляНачалоПериода, "НачалоПериода");
	
	ТекстПоляКонецПериода = ВыражениеПоляПоПсевдониму(ОператорЗапроса, "КонецПериода");
	ТекстПоляКонецПериода = СтрЗаменить(ТекстПоляКонецПериода, "&РегистрДатаОкончания_", ВыражениеРегистрДатаОкончания);
	ТекстПоляКонецПериода = СтрЗаменить(ТекстПоляКонецПериода, "&ФильтрДатаОкончания_", ВыражениеПоляПериод(ФильтрДатаОкончанияИсходная));
	ТекстПоляКонецПериода = СтрЗаменить(ТекстПоляКонецПериода, "&ФильтрДатаОкончанияПриведенная_", ВыражениеПоляПериод(ФильтрДатаОкончанияПриведенная));
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ТекстПоляКонецПериода, "КонецПериода");
	
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачалаСледующийПериод_", ФильтрДатаНачалаСледующийПериод);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияИсходная_", ФильтрДатаОкончанияИсходная);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаОкончанияПриведенная);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаСреза_", ФильтрДатаСреза);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&РегистрДатаНачалаПриведенная_", РегистрДатаНачалаПриведенная);
	ЗаменитьТекстВУсловииСвязиСФильтром(ОписаниеИспользованияФильтра, "&УсловиеПериодичностьДень", УсловияПериодичностьДень);
		
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериод(ФильтрДатаНачалаИсходная), "ДатаНачала");
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериод(ФильтрДатаОкончанияИсходная), "ДатаОкончания");
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		Если Измерение <> "ДатаНачала" И Измерение <> "ДатаОкончания" Тогда
			ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Измерение, Измерение);
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Ресурс, Ресурс);
	КонецЦикла;
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Ресурс, Ресурс);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Реквизит, Реквизит);
	КонецЦикла;

	УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра, ПараметрыПостроения);
	
	УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.Отборы, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров,,,,Ложь);

	УстановитьПсевдонимыПолей(ОписаниеЗапроса, ПараметрыПостроения);
	
	ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеЗапроса, ПараметрыПостроения.ИндексироватьПо);	
КонецПроцедуры

Процедура ДобавитьЗапросВТПериодыИмяПервичногоРегистра(ОписаниеПакетаЗапросов, ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраПериоды();
	КонецЕсли;
	
	ИмяВТДвиженияРегистра = "ВТДвиженияРегистра" + ИмяРегистра;	
	
	ПостфиксИменПараметров = ИмяСоздаваемойТаблицы;
	Если ПостфиксИменПараметров = Неопределено Тогда
		ПостфиксИменПараметров = "Периоды" + ИмяРегистра;
	КонецЕсли;	
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);
		
	ПараметрыПостроенияДвижений = ПараметрыПостроенияДвиженийПоПараметрамПостроения(ПараметрыПостроения);
		
	ДобавитьЗапросВТИмяРегистра(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроенияДвижений, ИмяВТДвиженияРегистра);
	
	ШаблонЗапросаВТМаксимальныеОкончанияПериодов = 
	"ВЫБРАТЬ
	|	ДвиженияРегистра.Период КАК НачалоПериода,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеИнтервалы.Период, СЕКУНДА, -1), ВЫБОР
	|						КОГДА ДвиженияРегистра.ПериодВозвратногоСобытия < ДвиженияРегистра.Период
	|							ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
	|						ИНАЧЕ ДвиженияРегистра.ПериодВозвратногоСобытия
	|					КОНЕЦ)) > &ФильтрДатаОкончанияПриведенная_
	|			ТОГДА &ФильтрДатаОкончанияПриведенная_
	|		ИНАЧЕ МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеИнтервалы.Период, СЕКУНДА, -1), ВЫБОР
	|						КОГДА ДвиженияРегистра.ПериодВозвратногоСобытия < ДвиженияРегистра.Период
	|							ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
	|						ИНАЧЕ ДвиженияРегистра.ПериодВозвратногоСобытия
	|					КОНЕЦ))
	|	КОНЕЦ КАК КонецПериода,
	|	&ШаблонФильтрДатаНачала КАК ДатаНачала,
	|	&ШаблонФильтрДатаОкончания КАК ДатаОкончания,
	|	ДвиженияРегистра.ПериодЗаписи КАК ПериодЗаписи,
	|	ДвиженияРегистра.Регистратор КАК Регистратор,
	|	&ШаблонЭтоВозвратноеСобытие КАК ЭтоВозвратноеСобытие,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонРеквизиты КАК Реквизиты
	|ПОМЕСТИТЬ ВТМаксимальныеОкончанияПериодов
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДвиженияРегистра КАК ДвиженияРегистра
	|		ПО (ДвиженияРегистра.Период >= &ФильтрДатаНачала_)
	|			И (ДвиженияРегистра.Период <= &ФильтрДатаОкончанияПриведенная_)
	|			И (&ШаблонУсловияСвязиПоИзмерениямСФильтром)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияРегистра КАК СледующиеИнтервалы
	|		ПО (ДвиженияРегистра.Период < СледующиеИнтервалы.Период)
	|			И (ДвиженияРегистра.ПериодЗаписи <> СледующиеИнтервалы.ПериодЗаписи)
	|			И (&ШаблонУсловияСвязиПоИзмерениям)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияРегистра.Период,
	|	ДвиженияРегистра.ПериодЗаписи,
	|	ДвиженияРегистра.Регистратор";
				
	ОписаниеЗапросаВТМаксимальныеОкончанияПериодов = ОписаниеЗапросаПоТексту(ШаблонЗапросаВТМаксимальныеОкончанияПериодов);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов);
	ОператорЗапросаВТМаксимальныеОкончанияПериодов = ОписаниеЗапросаВТМаксимальныеОкончанияПериодов.Операторы[0];
	
	ОписаниеИспользованияФильтра = ОписаниеИспользованиеФильтра(, "ДвиженияРегистра");
	ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтра, ОписаниеФильтра, ОписаниеРегистра, "ДатаНачала, ДатаОкончания", ОператорЗапросаВТМаксимальныеОкончанияПериодов, ПостфиксИменПараметров);
	
	ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаВТМаксимальныеОкончанияПериодов, "ДвиженияРегистра", ИмяВТДвиженияРегистра);
	ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаВТМаксимальныеОкончанияПериодов, "СледующиеИнтервалы", ИмяВТДвиженияРегистра);
	
	Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ТекстПоляКонецПериода = ВыражениеПоляПоПсевдониму(ОператорЗапросаВТМаксимальныеОкончанияПериодов, "КонецПериода");
	Иначе
		ТекстПоляКонецПериода = 	
		"ВЫБОР
		|	КОГДА МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеИнтервалы.Период, СЕКУНДА, -1), ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59))) > &ФильтрДатаОкончанияПриведенная_
		|		ТОГДА &ФильтрДатаОкончанияПриведенная_
		|	ИНАЧЕ МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеИнтервалы.Период, СЕКУНДА, -1), ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)))
		|КОНЕЦ";
	КонецЕсли;	
				
	ФильтрДатаНачала = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачала");
	ФильтрДатаОкончания = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");
	ФильтрДатаОкончанияПриведенная = ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ФильтрДатаОкончанияПриведенная");	
	
	ФильтрДатаОкончанияПриведенная.ПустоеЗначениеКакМаксимальное = Истина;
	
	Если ФормироватьСПериодичностьДень Тогда 
		ФильтрДатаОкончанияПриведенная.Кратность = "ДЕНЬ";	
		ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
	КонецЕсли;	
	
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаОкончанияПриведенная);
	УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ФильтрДатаНачала);
		
	ТекстПоляКонецПериода = СтрЗаменить(ТекстПоляКонецПериода, "&ФильтрДатаОкончанияПриведенная_", ВыражениеПоляПериод(ФильтрДатаОкончанияПриведенная));
	
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ТекстПоляКонецПериода, "КонецПериода");
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ВыражениеПоляПериод(ФильтрДатаНачала), "ДатаНачала");
	ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ВыражениеПоляПериод(ФильтрДатаОкончания), "ДатаОкончания");
	
	ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеОкончанияПериодов, ВыражениеПоляПериод(ФильтрДатаНачала));
	ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеОкончанияПериодов, ВыражениеПоляПериод(ФильтрДатаОкончания));
	
	УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра, ПараметрыПостроения);
	ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ОписаниеИспользованияФильтра, Истина);
		
	ШаблонЗапросаВТПериоды = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ДвиженияРегистра.НачалоПериода) КАК НачалоПериода,
	|	ДвиженияРегистра.КонецПериода КАК КонецПериода,
	|	ДвиженияРегистра.ДатаНачала КАК ДатаНачала,
	|	ДвиженияРегистра.ДатаОкончания КАК ДатаОкончания,
	|	ДвиженияРегистра.ПериодЗаписи КАК ПериодЗаписи,
	|	ДвиженияРегистра.Регистратор КАК Регистратор,
	|	&ШаблонЭтоВозвратноеСобытие КАК ЭтоВозвратноеСобытие,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонРеквизиты КАК Реквизиты
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТМаксимальныеОкончанияПериодов КАК ДвиженияРегистра
	|                                                                                            
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияРегистра.КонецПериода,
	|	ДвиженияРегистра.ДатаНачала,
	|	ДвиженияРегистра.ДатаОкончания,
	|	ДвиженияРегистра.ПериодЗаписи,
	|	ДвиженияРегистра.Регистратор";

	
	ОписаниеЗапросаВТПериоды = ОписаниеЗапросаПоТексту(ШаблонЗапросаВТПериоды);
	ОписаниеЗапросаВТПериоды.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаВТПериоды);
	ОператорЗапросаВТПериоды = ОписаниеЗапросаВТПериоды.Операторы[0];
	
	Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, "ДвиженияРегистра.ЭтоВозвратноеСобытие", "ЭтоВозвратноеСобытие");
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТПериоды, 0, "ДвиженияРегистра.ЭтоВозвратноеСобытие", "ЭтоВозвратноеСобытие");
		
		ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеОкончанияПериодов, "ДвиженияРегистра.ЭтоВозвратноеСобытие");
		ДобавитьГруппировку(ОператорЗапросаВТПериоды, "ДвиженияРегистра.ЭтоВозвратноеСобытие");
	КонецЕсли;
	
	УсловияСвязиПоИзмерениям = Новый Массив;
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		Если Измерение = "ДатаОкончания"
			ИЛИ Измерение = "ДатаНачала"
			ИЛИ Измерение = "Год" Тогда
		
			Продолжить;
		КонецЕсли;

		ВыражениеПоля = "ДвиженияРегистра." + Измерение;
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ВыражениеПоля, Измерение);
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТПериоды, 0, ВыражениеПоля, Измерение);	
		
		ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеОкончанияПериодов, ВыражениеПоля);
		ДобавитьГруппировку(ОператорЗапросаВТПериоды, ВыражениеПоля);	
		
		Если Измерение <> "ПериодЗаписи" Тогда
			ТекстУсловия = "ДвиженияРегистра." + Измерение + " = СледующиеИнтервалы." + Измерение;	
			УсловияСвязиПоИзмерениям.Добавить(ТекстУсловия);
		КонецЕсли;	
	КонецЦикла;	
	
	ДобавитьУсловиеСоединения(ОператорЗапросаВТМаксимальныеОкончанияПериодов, "СледующиеИнтервалы", УсловияСвязиПоИзмерениям); 
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ВыражениеПоля = "ДвиженияРегистра." + Ресурс;
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ВыражениеПоля, Ресурс);
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТПериоды, 0, ВыражениеПоля, Ресурс);	
		
		ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеОкончанияПериодов, ВыражениеПоля);
		ДобавитьГруппировку(ОператорЗапросаВТПериоды, ВыражениеПоля);	
	КонецЦикла;	
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ВыражениеПоля = "ДвиженияРегистра." + Ресурс;
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ВыражениеПоля, Ресурс);
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТПериоды, 0, ВыражениеПоля, Ресурс);	
		
		ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеОкончанияПериодов, ВыражениеПоля);
		ДобавитьГруппировку(ОператорЗапросаВТПериоды, ВыражениеПоля);	
	КонецЦикла;	
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ВыражениеПоля = "ДвиженияРегистра." + Реквизит;
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ВыражениеПоля, Реквизит);
		ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТПериоды, 0, ВыражениеПоля, Реквизит);	
		
		ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеОкончанияПериодов, ВыражениеПоля);
		ДобавитьГруппировку(ОператорЗапросаВТПериоды, ВыражениеПоля);	
	КонецЦикла;	

	ДобавитьДополнительныеПоляПоПсевдонимуИсточника(ОписаниеЗапросаВТПериоды, 0, "ДвиженияРегистра", ОписаниеФильтра.ДополнительныеПоляФильтра);
	ДобавитьПостоянныеПоляВОписаниеЗапроса(ОписаниеПакетаЗапросов, ОписаниеЗапросаВТПериоды, ПараметрыПостроения.ПостоянныеПоля, ПостфиксИменПараметров);
		
	УстановитьПсевдонимыПолей(ОписаниеЗапросаВТПериоды, ПараметрыПостроения);
	
	ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеЗапросаВТПериоды, ПараметрыПостроения.ИндексироватьПо);	
	
	ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, ИмяВТДвиженияРегистра);
	ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, "ВТМаксимальныеОкончанияПериодов");
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
