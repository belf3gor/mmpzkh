///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Снимает/устанавливает активность проводок документа (бух. учет).
//
Процедура ПереключитьАктивностьПроводокБУ(Документ) Экспорт
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ПометкаУдаления") Тогда
		Возврат;
	КонецЕсли;

	ПроводкиДокумента = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	ПроводкиДокумента.Отбор.Регистратор.Установить(Документ);
	ПроводкиДокумента.Прочитать();

	КоличествоПроводок = ПроводкиДокумента.Количество();
	Если НЕ (КоличествоПроводок = 0) Тогда
		
		// Определяем текущую активность проводок по первой проводке
		ТекущаяАктивностьПроводок = ПроводкиДокумента[0].Активность;

		// Инвертируем текущую активность проводок
		ПроводкиДокумента.УстановитьАктивность(НЕ ТекущаяАктивностьПроводок);
		ПроводкиДокумента.Записать();

	КонецЕсли;
		
КонецПроцедуры // ПереключитьАктивностьПроводокБУ()

// Процедура устанавливает субконто на счете. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//	Счет         - Счет, к которому относится субконто
//  Субконто     - набор субконто
//	ИмяСубконто  - Номер, имя или вид устанавливаемого субконто
//  Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяСубконто) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда // номер субконто

		Если ИмяСубконто > СвойстваСчета.КоличествоСубконто Тогда
			Возврат;
		КонецЕсли;

		ВидСубконто = СвойстваСчета["ВидСубконто" + ИмяСубконто];

	Иначе // имя или вид субконто

		ВидСубконто = ?(ТипЗнч(ИмяСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"),
						ИмяСубконто,
						ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто]);
		
		// Проверка, что указанный вид субконто есть на счете.
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконто
		   И СвойстваСчета.ВидСубконто2 <> ВидСубконто
		   И СвойстваСчета.ВидСубконто3 <> ВидСубконто Тогда

			Возврат;
			
		КонецЕсли;

	КонецЕсли;
		
	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);
		
	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

// Заполняет значения субконто в коллекции субконто. После первого использования свойства сохраняются в СвойстваСчетаКеш.
// Предназначена для использования в циклах с множеством итераций, заполняющих субконто проводок по малому количеству
// счетов. Проверок корректности данных (наличия субконто на счете  и т.п.) для использования на счете не выполняется.
// Поэтому необходимо обеспечить их корректность до вызова функции.
//
// Параметры:
//	Счет         - ПланСчетовСсылка.Хозрасчетный - Счет, к которому относится субконто.
//  Субконто     - РегистрБухгалтерииСубконто - набор субконто
//  СвойстваСчетаКеш
//               - Соответствие - достаточно передать пустое соответствие.
//  Субконто1, Субконто2, Субконто3
//               - значения устанавливаемых субконто.
//
// Возвращаемое значение:
//   Структура   - свойства счета, на котором были установлены субконто.
//
Функция УстановитьСубконтоПоКешуСвойствСчета(Счет, Субконто, СвойстваСчетаКеш = Неопределено,
												Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено) Экспорт
												
	// СвойстваСчетаКеш - соответствие, где ключ = значение счета, а значение = свойства счета.
	Если СвойстваСчетаКеш = Неопределено Тогда
		СвойстваСчетаКеш = Новый Соответствие;
	КонецЕсли;
												
	СвойстваСчета = СвойстваСчетаКеш[Счет];
	Если СвойстваСчета = Неопределено Тогда   // первое использование счета
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
		СвойстваСчетаКеш.Вставить(Счет, СвойстваСчета);
	КонецЕсли;
	
	// Из соображений производительности использован не цикл из трех итераций, а явно заданные имена свойств.
	Если СвойстваСчета.КоличествоСубконто > 0 Тогда
		Субконто.Вставить(СвойстваСчета.ВидСубконто1, Субконто1);
		Если СвойстваСчета.КоличествоСубконто > 1 Тогда
			Субконто.Вставить(СвойстваСчета.ВидСубконто2, Субконто2);
			Если СвойстваСчета.КоличествоСубконто > 2 Тогда
				Субконто.Вставить(СвойстваСчета.ВидСубконто3, Субконто3);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Очистка значений отсутствующих на счете субконто (если необходима) выполняется в обработчике ПередЗаписью регистра.
	
	Возврат СвойстваСчета;
	
КонецФункции

// Процедура устанавливает в проводке подразделение на счете, если по нему ведется учет по подразделениям
//
// Параметры:
//		Проводка - <запись регистра бухгалтерии> - проводка, в которой нужно установить подразделение
//      Подразделение - <ссылка на справочник подразделений> - устанавливаемое подразделение
//		ДтКт - <Строка> - если "Дт", подразделение устанавливается по дебету проводки, иначе по кредиту
//
Процедура УстановитьПодразделениеПроводки(Проводка, Подразделение, ДтКт = "Дт") Экспорт
	
	Если Проводка["Счет" + ДтКт].УчетПоПодразделениям Тогда
		Проводка["Подразделение" + ДтКт] = Подразделение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает в проводке подразделения, если по счетам дебета и кредита ведется учет по подразделениям
//
// Параметры:
//		Проводка - <запись регистра бухгалтерии> - проводка, в которой нужно установить подразделения
//      ПодразделениеДт - <ссылка на справочник подразделений> - устанавливаемое подразделение по дебету
//      ПодразделениеКт - <ссылка на справочник подразделений> - устанавливаемое подразделение по кредиту
//
Процедура УстановитьПодразделенияПроводки(Проводка, ПодразделениеДт, ПодразделениеКт) Экспорт

	УстановитьПодразделениеПроводки(Проводка, ПодразделениеДт, "Дт");
	
	УстановитьПодразделениеПроводки(Проводка, ПодразделениеКт, "Кт");

КонецПроцедуры

// Задает набор возможных условий для отбора по списку счетов.
//
Функция НовыеУсловияОтбораСубсчетов() Экспорт
	
	УсловияОтбора = Новый Структура;
	
	// флаги
	УсловияОтбора.Вставить("ИспользоватьВПроводках"); // отбор по ЗапретитьИспользоватьВПроводках
	УсловияОтбора.Вставить("Валютный");
	УсловияОтбора.Вставить("Забалансовый");
	
	// список исключаемых счетов
	УсловияОтбора.Вставить("СчетаИсключения");
	
	Возврат УсловияОтбора;
	
КонецФункции

// Дополняет переданные счета их субсчетами. Для всех счетов проверяется соответствие заданным условиям.
//
// Параметры:
//  МассивСчетов - Массив - список счетов, которые нужно дополнить субсчетами.
//  УсловияОтбора- Структура - см. НовыеУсловияОтбораСубсчетов().
//
// Возвращаемое значение:
//   Массив      - список исходных счетов плюс их субсчета.
//
Функция СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбора = Неопределено) Экспорт

	Если УсловияОтбора = Неопределено Тогда
		УсловияОтбора = НовыеУсловияОтбораСубсчетов();
	КонецЕсли;
	
	УсловиеПоСчетам = ?(ЗначениеЗаполнено(МассивСчетов), "Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетов)", "ИСТИНА");
	
	УсловиеПоИсключениям = ?(ЗначениеЗаполнено(УсловияОтбора.СчетаИсключения), "И НЕ Хозрасчетный.Ссылка В (&СчетаИсключения)", "");
	
	Если УсловияОтбора.ИспользоватьВПроводках = Неопределено Тогда
		УсловиеПоСчетамГруппам = "";
	Иначе
		УсловиеПоСчетамГруппам = "И " + ?(УсловияОтбора.ИспользоватьВПроводках, "НЕ ", "") + "Хозрасчетный.ЗапретитьИспользоватьВПроводках";
	КонецЕсли;
	
	Если УсловияОтбора.Валютный = Неопределено Тогда
		УсловиеПоВалютным = "";
	Иначе
		УсловиеПоВалютным = "И " + ?(УсловияОтбора.Валютный, "", "НЕ ") + "Хозрасчетный.Валютный";
	КонецЕсли; 
	
	Если УсловияОтбора.Забалансовый = Неопределено Тогда
		УсловиеПоЗабалансовым = "";
	Иначе
		УсловиеПоЗабалансовым = "И " + ?(УсловияОтбора.Забалансовый, "", "НЕ ") + "Хозрасчетный.Забалансовый";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетов",    МассивСчетов);
	Запрос.УстановитьПараметр("СчетаИсключения", УсловияОтбора.СчетаИсключения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	" + УсловиеПоСчетам + "
	|	" + УсловиеПоИсключениям + "
	|	" + УсловиеПоСчетамГруппам + "
	|	" + УсловиеПоВалютным + "
	|	" + УсловиеПоЗабалансовым + "
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Код
	|";
	
	МассивСчетовССубсчетами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСчетовССубсчетами;

КонецФункции

// Дополняет переданные счета их субсчетами. После первого вызова запоминает субсчета
// и при последующих вызовах не обращается к СУБД.
//
// Параметры:
//  МассивСчетов - Массив - список счетов, которые нужно дополнить субсчетами.
//
// Возвращаемое значение:
//   Массив      - список исходных счетов плюс их субсчета.
//
Функция СформироватьМассивСубсчетов(МассивСчетов) Экспорт

	МассивСубсчетов = Новый Массив;
	Для каждого СчетВерхнегоУровня Из МассивСчетов Цикл
	
		Субсчета = БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетВерхнегоУровня);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСубсчетов, Субсчета);
	
	КонецЦикла; 
	
	Возврат МассивСубсчетов;

КонецФункции // СформироватьМассивСубсчетов()

// Одновременно разворачивает (дополняет массивы) все параметры-счета до субсчетов. Имя разворачиваемого параметра
// должно начинаться со строки "Счета".
//
Процедура РазвернутьПараметрыДоСубсчетов(ЗапросСПараметрами) Экспорт 
	
	СчетаПараметров = Новый ТаблицаЗначений;
	СчетаПараметров.Колонки.Добавить("СчетГруппа", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СчетаПараметров.Колонки.Добавить("СчетПараметра", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	// создаём список разворачиваемых параметров
	СписокИменРазворачиваемыхПараметров = Новый Массив;
	Для Каждого ПараметрЗапроса Из ЗапросСПараметрами.Параметры Цикл
		
		Если Лев(ПараметрЗапроса.Ключ, 5) <> "Счета" Тогда
			Продолжить;
		КонецЕсли;
		
		СписокИменРазворачиваемыхПараметров.Добавить(ПараметрЗапроса.Ключ);
		Для Каждого СчетПараметра Из ПараметрЗапроса.Значение Цикл
			НоваяСтрока = СчетаПараметров.Добавить();		
			НоваяСтрока.СчетГруппа    = СчетПараметра;
			НоваяСтрока.СчетПараметра = СчетПараметра;
		КонецЦикла;
		
	КонецЦикла;
	
	Если СчетаПараметров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаПараметров", СчетаПараметров);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	// Создаём временную таблицу.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаПараметров.СчетГруппа КАК СчетГруппа,
	|	СчетаПараметров.СчетПараметра КАК СчетПараметра
	|ПОМЕСТИТЬ ТекущийУровень
	|ИЗ
	|	&СчетаПараметров КАК СчетаПараметров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетПараметра";
	
	// Получаем нижележащие счета.
	ТекстЗапросаСледующегоУровня =
	"ВЫБРАТЬ
	|	ТекущийУровень.СчетГруппа КАК СчетГруппа,
	|	Хозрасчетный.Ссылка КАК СчетПараметра
	|ПОМЕСТИТЬ СледующийУровень
	|ИЗ
	|	ТекущийУровень КАК ТекущийУровень
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ТекущийУровень.СчетПараметра = Хозрасчетный.Родитель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетПараметра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТекущийУровень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СледующийУровень.СчетГруппа КАК СчетГруппа,
	|	СледующийУровень.СчетПараметра КАК СчетПараметра
	|ИЗ
	|	СледующийУровень КАК СледующийУровень";
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() + ТекстЗапросаСледующегоУровня;
	
	// Создаём временную таблицу и выполняем запрос первого уровня.
	РезультатЗапроса = Запрос.Выполнить();
	
	// Задаём текст для запросов последующих уровней.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СледующийУровень.СчетГруппа КАК СчетГруппа,
	|	СледующийУровень.СчетПараметра КАК СчетПараметра
	|ПОМЕСТИТЬ ТекущийУровень
	|ИЗ
	|	СледующийУровень КАК СледующийУровень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СледующийУровень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ТекстЗапросаСледующегоУровня;
	
	Для НомерУровня = 1 По 100 Цикл // считаем, что вложенность больше 100 нереалистична; избегаем зацикливания в справочнике
		
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = СчетаПараметров.Добавить();		
			НоваяСтрока.СчетГруппа    = Выборка.СчетГруппа;
			НоваяСтрока.СчетПараметра = Выборка.СчетПараметра;
			
		КонецЦикла;
		
		РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// формируем соответствие счетов и субсчетов
	СубсчетаПараметров = Новый Соответствие;
	Для каждого Субсчет Из СчетаПараметров Цикл
		
		Если Субсчет.СчетГруппа = Субсчет.СчетПараметра Тогда // верхний уровень не нужен
			Продолжить;
		КонецЕсли;
		
		СписокСубсчетов = СубсчетаПараметров[Субсчет.СчетГруппа];
		Если СписокСубсчетов = Неопределено Тогда
			СписокСубсчетов = Новый Массив;
			СубсчетаПараметров.Вставить(Субсчет.СчетГруппа, СписокСубсчетов);
		КонецЕсли;
		
		СписокСубсчетов.Добавить(Субсчет.СчетПараметра);
		
	КонецЦикла;
	
	// дополняем списки счетов в параметрах их субсчетами
	Для Каждого ПараметрЗапроса Из СписокИменРазворачиваемыхПараметров Цикл
		
		СписокСчетовПараметра = ЗапросСПараметрами.Параметры[ПараметрЗапроса];
		КоличествоСчетовВерхнегоУровня = СписокСчетовПараметра.Количество();
		Для инд = 0 По КоличествоСчетовВерхнегоУровня - 1 Цикл
			СчетГруппа = СписокСчетовПараметра[инд];
		
			СписокСубсчетов = СубсчетаПараметров[СчетГруппа];
			Если СписокСубсчетов = Неопределено Тогда // нет субсчетов
				Продолжить;
			КонецЕсли;
			
			Для каждого Субсчет Из СписокСубсчетов Цикл
				СписокСчетовПараметра.Добавить(Субсчет);
			КонецЦикла;
		
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция МаксимальноеКоличествоСубконто() Экспорт

	Возврат Метаданные.ПланыСчетов.Хозрасчетный.МаксКоличествоСубконто;

КонецФункции

Функция ВедетсяУчетПоСкладам(Счет) Экспорт

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	УчетПоСкладам = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;

	Возврат УчетПоСкладам;

КонецФункции 

Функция ВедетсяСуммовойУчетПоСкладам(Счет) Экспорт

	СвойстваСчета      = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	Если СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто1Суммовой;
	ИначеЕсли СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто2Суммовой;
	ИначеЕсли СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
		Возврат СвойстваСчета.ВидСубконто3Суммовой;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция НаСчетеВедетсяПартионныйУчет(Счет) Экспорт

	СвойстваСчета  = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	ПартионныйУчет = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;

	Возврат ПартионныйУчет;

КонецФункции 

Функция НаСчетеВедетсяУчетПоДокументамРасчетов(Счет) Экспорт
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	УчетПоДокументамРасчетов = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;
	
	Возврат УчетПоДокументамРасчетов;
	
КонецФункции

Функция НаСчетеВедетсяУчетПоКонтрагентам(Счет) Экспорт

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	УчетПоКонтрагентам = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;

	Возврат УчетПоКонтрагентам;

КонецФункции

Функция НаСчетеВедетсяУчетПоДоговорам(Счет) Экспорт

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);

	УчетПоДоговорам = СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры
		ИЛИ СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;

	Возврат УчетПоДоговорам;

КонецФункции

Функция МассивСубконтоСчета19() Экспорт
	
	СубконтоСчета19 = Новый Массив;
	СубконтоСчета19.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчета19.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	СубконтоСчета19.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС);
	
	Возврат СубконтоСчета19;

КонецФункции

Функция МассивСубконтоСчета1907() Экспорт
	
	СубконтоСчета1907 = Новый Массив;
	СубконтоСчета1907.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчета1907.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	СубконтоСчета1907.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРеализации);

	Возврат СубконтоСчета1907;

КонецФункции

Функция МассивСубСчетов19НДСКВычету() Экспорт
	
	Счета19КВычету = Новый Массив;
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации);
	
	Возврат Счета19КВычету;

КонецФункции

Функция УчетПоСпособамНаСчете19() Экспорт
	
	Счет19 = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям.ПолучитьОбъект();
	УчетПоСпособамНаСчете19 = Счет19.ВидыСубконто.Найти(
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС, "ВидСубконто") <> Неопределено;
		
	Возврат УчетПоСпособамНаСчете19;

КонецФункции

Функция СубСчета19СчетаСНетиповымиСубконто() Экспорт
	
	// Субсчета 19 счета стандартно имеющие иную аналитику
	СубСчета19СчетаСНетиповымиСубконто = Новый Массив;
	СубСчета19СчетаСНетиповымиСубконто.Добавить(ПланыСчетов.Хозрасчетный.АкцизыПоОплаченнымМатериальнымЦенностям); // 19.06
	СубСчета19СчетаСНетиповымиСубконто.Добавить(ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0);      // 19.07
	
	УсловияОтбора = НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.СчетаИсключения = СубСчета19СчетаСНетиповымиСубконто;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);
	
	МассивСубсчетов19Счета = СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбора);
	МассивСубконтоСчета19 = МассивСубконтоСчета19();
	
	Для Каждого Субсчет19Счета Из МассивСубсчетов19Счета Цикл
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Субсчет19Счета);
		
		Если ЗначениеЗаполнено(СвойстваСчета.ВидСубконто1) 
		   И МассивСубконтоСчета19.Найти(СвойстваСчета.ВидСубконто1) = Неопределено
		 ИЛИ ЗначениеЗаполнено(СвойстваСчета.ВидСубконто2) 
		   И МассивСубконтоСчета19.Найти(СвойстваСчета.ВидСубконто2) = Неопределено
		 ИЛИ ЗначениеЗаполнено(СвойстваСчета.ВидСубконто3) 
		   И МассивСубконтоСчета19.Найти(СвойстваСчета.ВидСубконто3) = Неопределено Тогда
		
			// На счете присутствует субконто, не предусмотренное в типовом решении.
			СубСчета19СчетаСНетиповымиСубконто.Добавить(Субсчет19Счета);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СубСчета19СчетаСНетиповымиСубконто;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ДЛЯ РАСЧЕТА СУММ СПИСАНИЯ РБП

// Устарела: Следует использовать РасходыБудущихПериодов.СуммыРасходовОчередногоМесяца()
//
Функция СуммаСписанияЗаМесяц(СтатьяРасходовБудущихПериодов, ДатаНачалаСписания, ДатаОкончанияСписания, Остаток, ВспомогательныеДанные, ОчереднойМесяц, мКонДата) Экспорт
	
	ОписаниеСумм = КоллекцииСумм.НовыйОписаниеКоллекцииСумм();
	КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "Сумма", "Сумма");
	
	Суммы = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм);
	Суммы.Сумма = Остаток;
	
	ПротоколРасчета = Неопределено;
	Суммы = РасходыБудущихПериодов.СуммыРасходовОчередногоМесяца(
		Суммы,
		ОписаниеСумм,
		СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов,
		ОчереднойМесяц,
		СтатьяРасходовБудущихПериодов.ДатаНачалаСписания,
		СтатьяРасходовБудущихПериодов.ДатаОкончанияСписания,
		ПротоколРасчета);
	
	Если ВспомогательныеДанные <> Неопределено И ПротоколРасчета <> Неопределено Тогда
		ВспомогательныеДанные.КоличествоМесяцевДнейТекущегоПериода = ПротоколРасчета.Числитель;
		ВспомогательныеДанные.КоличествоМесяцевДней                = ПротоколРасчета.Знаменатель;
	КонецЕсли;
	
	Возврат Суммы.Сумма;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ ДОКУМЕНТОВ ПО ДВИЖЕНИЮ ДЕНЕЖНЫХ СРЕДСТВ

Функция ПолучитьПодразделениеПоСчету(Подразделение, Счет, Организация, ПодразделениеПоУмолчанию = Неопределено) Экспорт

	Если НЕ Счет.УчетПоПодразделениям Тогда
		Подразделение = Неопределено;
		Возврат Подразделение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) 
		И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(Подразделение, Организация) Тогда
		Возврат Подразделение;
	КонецЕсли;
	
	Если ПодразделениеПоУмолчанию = Неопределено Тогда                                    
		ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	КонецЕсли;

	Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
		Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Организация) Тогда
			Подразделение = ПодразделениеПоУмолчанию;
		Иначе
			Подразделение = Неопределено;
		КонецЕсли;
	Иначе
		Подразделение = Неопределено;
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции

Функция ПолучитьМассивСчетовДенежныхСредств(МассивСчетовОтбора, ОтборПоПризнакуВалютный = Ложь, СчетОтбораПоПризнакуВалютный = Неопределено, МассивСчетовИсключений = Неопределено) Экспорт
	
	МассивСчетов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовОтбора",     МассивСчетовОтбора);
	Запрос.УстановитьПараметр("МассивСчетовИсключений", МассивСчетовИсключений);
	
	Запрос.УстановитьПараметр("ОтбиратьПоПризнакуВалютный", ОтборПоПризнакуВалютный);
	
	Если ТипЗнч(СчетОтбораПоПризнакуВалютный) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Запрос.УстановитьПараметр("Валютный", СчетОтбораПоПризнакуВалютный.Валютный);
	Иначе
		Запрос.УстановитьПараметр("Валютный", Ложь);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Код КАК Код,
	|	Хозрасчетный.Наименование КАК Наименование
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетовОтбора)
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	И (НЕ &ОтбиратьПоПризнакуВалютный
	|			ИЛИ Хозрасчетный.Валютный = &Валютный)
	|	И НЕ Хозрасчетный.Ссылка В (&МассивСчетовИсключений)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетов.Добавить(Выборка.Счет);
	КонецЦикла;
	
	Возврат МассивСчетов;
	
КонецФункции

#Область ОпределениеСчетовУчета

// Определяет счета учета расходов будущих периодов.
//
Функция СчетаУчетаРасходовБудущихПериодов() Экспорт

	СчетаРасходыБудущихПериодов = Новый Массив;
	СчетаРасходыБудущихПериодов.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);                      // 97
	СчетаРасходыБудущихПериодов.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников); // 76.01.2
	СчетаРасходыБудущихПериодов.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования);             // 76.01.9
	
	Результат = СформироватьМассивСубсчетов(СчетаРасходыБудущихПериодов);
	
	Возврат Результат;

КонецФункции

// Определяет счет учета материалов, переданных в переработку
Функция СчетУчетаМатериалыПереданныеВПереработку(Знач СчетВыбранныйПользователем = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СчетВыбранныйПользователем)
		И СчетВыбранныйПользователем.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку) Тогда
		Возврат СчетВыбранныйПользователем;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
	КонецЕсли;
	
КонецФункции

// Определяет счет учета материалов, принятых в переработку и затем использованных
Функция СчетУчетаМатериалыПринятыеВПереработкуВПроизводстве(Знач СчетВыбранныйПользователем = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СчетВыбранныйПользователем) Тогда
		Возврат СчетВыбранныйПользователем;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ИсчислениеПериодов

// Определяет дату начала отчетного года для составления финансовой отчетности в соответствии с Законом "О БУХГАЛТЕРСКОМ УЧЕТЕ" N 402-ФЗ (6 декабря 2011 года)
//
// Статья 15
// 3. В случае, если государственная регистрация экономического субъекта, за исключением кредитной организации, произведена после 30 сентября,
// первым отчетным годом является, если иное не установлено экономическим субъектом,
// период с даты государственной регистрации по 31 декабря календарного года, следующего за годом его государственной регистрации, включительно.
// 
// Параметры:
//  Период		 - Дата - любая дата из отчетного года
//  Организация	 - СправочникСсылка.Организации - Организация, начало отчетного года которой нужно получить
// 
// Возвращаемое значение:
//  Дата         - дата начала периода; как правило начало года, но может быть и датой регистрации организации
//  Неопределено - запрошен период ранее даты регистрации организации
//
Функция НачалоОтчетногоГода(Период, Организация) Экспорт
	
	Возврат ИнтерфейсыВзаимодействияБРО.НачалоНалоговогоПериода(
		Организация,
		Период,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследнемКвартале,
		Перечисления.Периодичность.Год);
		
КонецФункции
	
#КонецОбласти