
#Область СлужебныеПроцедурыИФункции

// Функция ИнформационнаяБазаФайловая определяет режим эксплуатации
// информационной базы файловый (Истина) или Серверный (Ложь).
//  При проверке используется СтрокаСоединенияИнформационнойБазы, которую
// можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
	
	Возврат ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИНТЕРНЕТ ПОДДЕРЖКА ПОЛЬЗОВАТЕЛЕЙ

// Возвращает сохраненный регистрационный номер программного продукта.
//
Функция РегистрационныйНомерПрограммногоПродукта() Экспорт
	
	Возврат ИнтернетПоддержкаПользователей.РегистрационныйНомерПрограммногоПродукта();
	
КонецФункции

// Сохраняет регистрационный номер программного продукта.
//
Процедура СохранитьРегистрационныйНомерПрограммногоПродукта(РегистрационныйНомер) Экспорт
	
	// Используется типовая процедура сохранения параметра в безопасном хранилище.
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИнтернетПоддержкаПользователей.ИдентификаторПодсистемы(), РегистрационныйНомер, "regnumber");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Запускает выполнение процедуры в фоновом задании.
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище – Булево – признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию – Ложь.
//
// Возвращаемое значение:
//  Структура              - Возвращает свойства: 
//                             - АдресХранилища - адрес временного хранилища, в которое будет
//                          	 помещен результат работы задания;
//                             - АдресХранилищаДополнительный - адрес дополнительного временного хранилища,
//                               в которое будет помещен результат работы задания (доступно только если 
//                               установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//                             - ИдентификаторЗадания - уникальный идентификатор запущенного
//                               фонового задания;
//                             - ЗаданиеВыполнено - Истина если задание было успешно выполнено 
//                               за время вызова функции.
// 
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь) Экспорт
	
	Возврат ДлительныеОперации.ЗапуститьВыполнениеВФоне(ИдентификаторФормы, ИмяЭкспортнойПроцедуры, Параметры,
														НаименованиеЗадания, ИспользоватьДополнительноеВременноеХранилище);
	
КонецФункции

// Отменяет выполнение фонового задания по переданному идентификатору.
// 
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
// 
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

// Проверяет состояние фонового задания по переданному идентификатору.
// 
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
//
// Возвращаемое значение:
//  Булево              - возвращает Истина, если задание успешно выполнено,
//                        Ложь - если выполняется. В иных случаях вызывается исключение.
//
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) Экспорт
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

// Обработчик события формы ПриЧтенииНаСервере, который
// встраивается в формы элементов данных
// (элементов справочников, документов, записей регистров, и др.),
// чтобы заблокировать форму при наличии запрета изменения.
//
// Параметры:
//  Форма               - УправляемаяФорма.
//
//  ИдентификаторДанных - СправочникСсылка.<Имя>,
//                        ДокументСсылка.<Имя>,
//                        ПланВидовХарактеристикСсылка.<Имя>,
//                        ПланСчетовСсылка.<Имя>,
//                        ПланВидовРасчетаСсылка.<Имя>,
//                        БизнесПроцессСсылка.<Имя>,
//                        ЗадачаСсылка.<Имя>,
//                        ПланОбменаСсылка.<Имя>,
//                        РегистрСведенийНаборЗаписей.Отбор,
//                        РегистрНакопленияНаборЗаписей.Отбор,
//                        РегистрБухгалтерииНаборЗаписей.Отбор,
//                        РегистрРасчетаНаборЗаписей.Отбор.
//
Функция ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Возврат ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	
КонецФункции

// Запускает фоновое задание с контекстом клиента.
// 
// Параметры:
//  ИмяПроцедуры - Строка - имя экспортной процедуры, которую необходимо выполнить в фоне..
//  ПараметрыВыполнения - Структура - параметры выполнения фонового задания.
//     * ИдентификаторФормы      - УникальныйИдентификатор - уникальный идентификатор формы, 
//                               во временное хранилище которой надо поместить результат выполнения процедуры.
//     * ДополнительныйРезультат - Булево     - признак использования дополнительного временного хранилища для передачи 
//                                 результата из фонового задания в родительский сеанс. По умолчанию - Ложь.
//     * ОжидатьЗавершение       - Число, Неопределено - таймаут в секундах ожидания завершения фонового задания. 
//                               Если задано Неопределено, то ждать до момента завершения задания. 
//                               Если задано 0, то ждать завершения задания не требуется. 
//                               По умолчанию - 2 секунды; а для низкой скорости соединения - 4. 
//     * НаименованиеФоновогоЗадания - Строка - описание фонового задания. По умолчанию - имя процедуры.
//     * КлючФоновогоЗадания      - Строка    - уникальный ключ для активных фоновых заданий, имеющих такое же имя процедуры.
//                                              По умолчанию, не задан.
//     * АдресРезультата          - Строка - адрес временного хранилища, в которое должен быть помещен результат
//                                           работы процедуры. Если не задан, адрес формируется автоматически.
//     * ЗапуститьВФоне           - Булево - если Истина, то задание будет всегда выполняться в фоне,
//                               за исключением режима отладки.
//                               В файловом варианте, при наличии ранее запущенных заданий,
//                               новое задание становится в очередь и начинает выполняться после завершения предыдущих.
//     * ЗапуститьНеВФоне         - Булево - если Истина, задание всегда будет запускаться непосредственно,
//                               без использования фонового задания.
//     * БезРасширений            - Булево - если Истина, то фоновое задание будет запущено без подключения
//                               расширений конфигурации.
//  ПараметрыПроцедуры  - Массив - параметры исполняемой процедуры/функции в фоне.
//
// Возвращаемое значение:
//  ФоновоеЗадание - возвращает запущенное фоновое задание.
//
Функция ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяПроцедуры,
	ПараметрыВыполнения, ПараметрыПроцедуры = Неопределено) Экспорт
	
	Возврат ДлительныеОперации.ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяПроцедуры, ПараметрыВыполнения, ПараметрыПроцедуры);
	
КонецФункции

// Возвращает структуру с информацией о прогрессе выполнения фонового задания.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания.
//  ИсключениеПриОшибке - Булево - признак вызова исключений при возникновении ошибки.
//  ВыводитьПрогрессВыполнения - Булево - если "Истина", функция возвращает прогресс
//                                        в результативной структуре.
//  ВыводитьСообщения - Булево - если "Истина", функция возвращает сообщение
//                               пользователю в результативной структуре.
//
// Возвращаемое значение:
//  Структура - Возвращает свойства: 
//                - Статус - статус фонового задания;
//                - КраткоеПредставлениеОшибки - краткое представление ошибки;
//                - ПодробноеПредставлениеОшибки - подробное представление ошибки;
//                - Прогресс - прогресс выполнения фонового задания (от 0 до 100).
//                - Сообщения - сообщение пользователю.
//
Функция ОперацияВыполнена(Знач ИдентификаторЗадания, Знач ИсключениеПриОшибке = Ложь, Знач ВыводитьПрогрессВыполнения = Ложь, 
	Знач ВыводитьСообщения = Ложь) Экспорт
	
	Возврат ДлительныеОперации.ОперацияВыполнена(ИдентификаторЗадания, ИсключениеПриОшибке, ВыводитьПрогрессВыполнения, ВыводитьСообщения);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОДПИСОК

// Выполняет проверку модифицированности Даты документа.
// Если дата не входит в предыдущий период, то номер документа обнуляется.
// Это необходимо для назначения нового номера документу.
//
// Параметры:
//  Источник - ДокументОбъект - источник события подписки.
//  Отказ    - Булево - флаг отказа.
// 
Процедура ПроверитьНомерДокументаПоДате(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПрефиксацияОбъектовСобытия.ПроверитьНомерДокументаПоДате(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Выполняет проверку модифицированности даты, организации и подразделения документа-источника.
// Если дата не входит в предыдущий период или изменены организации или подразделение 
// так, что у них изменился префикс, то номер документа очищается.
// Это необходимо для назначения нового номера документу.
//
// Параметры:
//  Источник - ДокументОбъект - источник события подписки
//  Отказ    - Булево - флаг отказа.
//
Процедура ПроверитьНомерДокументаПоДатеИОрганизации(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПрефиксацияОбъектовСобытия.ПроверитьНомерДокументаПоДатеИОрганизации(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Устанавливает префикс источника подписки в соответствии с префиксом информационной базы.
// Ограничения на реквизиты источника не накладываются.
//
// Параметры:
//  Источник - Источник события подписки.
//             Любой объект из множества [Справочник, Документ, План видов характеристик, Бизнес процесс, Задача].
// СтандартнаяОбработка - Булево - флаг стандартной обработки подписки.
// Префикс - Строка - префикс объекта, который нужно изменить.
//
Процедура УстановитьПрефиксИнформационнойБазы(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы(Источник, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

// Устанавливает префикс источника подписки в соответствии с префиксом информационной базы и префиксом организации.
// Источник подписки должен содержать
// обязательный реквизит шапки "Организация", тип: "СправочникСсылка.Организации".
//
// Параметры:
//  Источник - Источник события подписки.
//             Любой объект из множества [Справочник, Документ, План видов характеристик, Бизнес процесс, Задача]
// СтандартнаяОбработка - Булево - флаг стандартной обработки подписки
// Префикс - Строка - префикс объекта, который нужно изменить.
//
Процедура УстановитьПрефиксИнформационнойБазыИОрганизации(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(Источник, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью для типа ДокументОбъект.
Процедура ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(
		Источник,
		Отказ,
		РежимЗаписи,
		РежимПроведения) Экспорт
	
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(
		Источник,
		Отказ,
		РежимЗаписи,
		РежимПроведения);
	
КонецПроцедуры

// Процедура очищает реквизит РучнаяКорректировка при копировании отредактированных вручную документов.
//
Процедура ПриКопированииДокументаСВозможностьюРучногоРедактированияПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	ОбщегоНазначенияБПСобытия.ПриКопированииДокументаСВозможностьюРучногоРедактированияПриКопировании(Источник,
																										ОбъектКопирования);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Физические лица" и склонение ФИО.

// Формирует фамилию и инициалы либо по наименованию элемента справочника ФизическиеЛица,
// либо по переданным строкам.
// Если передан Объект, то извлеченная из него строка считается совокупностью 
// Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  ОбъектИлиСтрока - строка, ссылка или объект элемента справочника ФизическиеЛица.
//  Фамилия		    - фамилия физического лица.
//  Имя		        - имя физического лица.
//  Отчество	    - отчество физического лица.
//
// Возвращаемое значение 
//  Строка - фамилия и инициалы одной строкой. 
//  В параметрах Фамилия, Имя и Отчество записываются вычисленные части.
//
// Пример:
//  Результат = ФамилияИнициалыФизЛица("Иванов Иван Иванович"); // Результат = "Иванов И. И."
//
Функция ФамилияИнициалыФизЛица(ОбъектИлиСтрока = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	Возврат ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(ОбъектИлиСтрока, Фамилия, Имя, Отчество);
	
КонецФункции

// Склоняет ФИО
// Только для работы на ОС Windows.
//
// Параметры:
// 	ФИО		- Строка 			- Строка, в которой содержится ФИО для склонения.
// 	Падеж 	- Число  			- падеж, в который необходимо просклонять представление объекта.
//                  			1 - Именительный.
//                  			2 - Родительный.
//                  			3 - Дательный.
//                  			4 - Винительный.
//                  			5 - Творительный.
//                  			6 - Предложный.
// Объект 	- ОбъектСклонения 	- Ссылка на объект, реквизит которого склоняется.
// Пол		- Число				- Число - пол физического лица, 
//								1 - мужской, 
//								2 - женский.
//
// Возвращаемое значение:
//  Строка - Результат склонения ФИО в падеже.
//
Функция ПросклонятьФИО(ФИО, Падеж, Объект = Неопределено, Пол = Неопределено) Экспорт
	
	Возврат СклонениеПредставленийОбъектов.ПросклонятьФИО(ФИО, Падеж, Объект, Пол);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С УЧЕТНОЙ ПОЛИТИКОЙ

// Функция возвращает систему налогообложения.
Функция СистемаНалогообложения(Организация, Период) Экспорт
	
	Возврат УчетнаяПолитика.СистемаНалогообложения(Организация, Период);
	
КонецФункции

// Определяет применение УСН в учетной политике.
Функция ПрименяетсяУСН(Организация, Период) Экспорт
	
	Возврат УчетнаяПолитика.ПрименяетсяУСН(Организация, Период);
	
КонецФункции

// Функция проверяет наличие учетной политики организации.
Функция Существует(Организация, Период, ВыводитьСообщениеОбОтсутствииУчетнойПолитики = Ложь,
					ДокументСсылка = Неопределено) Экспорт
	
	Возврат УчетнаяПолитика.Существует(Организация, Период, ВыводитьСообщениеОбОтсутствииУчетнойПолитики, ДокументСсылка);
	
КонецФункции

// Выводит подключенные команды в форме.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, в которой необходимо разместить команды.
//   ПараметрыРазмещения - Неопределено, Структура - Параметры размещения команд.
//       Используется когда в форме несколько списков
//       (в этом случае размещается несколько вызовов этой процедуры с указанием 2го параметра),
//       или когда типы источников зависят от параметров открытия формы.
//       Состав ключей см. в функции ПодключаемыеКоманды.ПараметрыРазмещения().
//
Процедура ПриСозданииНаСервере(Форма, ПараметрыРазмещения = Неопределено) Экспорт
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма, ПараметрыРазмещения);
	
КонецПроцедуры

// Функция определяет является ли организация плательщиком НДС.
//
Функция ПлательщикНДС(Организация, Период) Экспорт
	
	Возврат УчетнаяПолитика.ПлательщикНДС(Организация, Период);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С РЕГЛАМЕНТИРОВАННЫМИ ОТЧЕТАМИ

// Возвращает Истина, если принтер доступен.
Функция ПринтерДоступен() Экспорт
	
	// для ЖКХ 3.0
	Возврат РегламентированнаяОтчетность.ПринтерДоступен();
	
КонецФункции

// Возвращает представление вида документа.
Функция ПредставлениеВидаДокумента(Вид) Экспорт
	
	// для ЖКХ 3.0
	Возврат РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Вид);
	
КонецФункции

// Функция вызывается при записи регламентированного отчета.
Функция ПриЗаписиРегламентированногоОтчетаНаСервере(Форма, КодИФНС = "не применимо", Автосохранение = Ложь,
													Вариант = Неопределено, ВидДокументаНомерКорректировкиИзменен, мСохраненныйДок) Экспорт
	
	// для ЖКХ 3.0
	Возврат РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(Форма, КодИФНС, Автосохранение,
																						Вариант, ВидДокументаНомерКорректировкиИзменен, мСохраненныйДок);
	
КонецФункции

// Возвращает Истина, если существует документ с аналогичными реквизитами.
Функция СуществуетДокументСАналогичнымиРеквизитами(Форма, КодИФНС, КПП = "") Экспорт
	
	// для ЖКХ 3.0
	Возврат РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(Форма, КодИФНС, КПП);
	
КонецФункции

// Возвращает Истина, если изменены ключевые реквизиты отчета.
Функция БылиИзмененыКлючевыеРеквизитыОтчета(Форма, КодИФНС, КПП = "") Экспорт
	
	// для ЖКХ 3.0
	Возврат РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(Форма, КодИФНС, КПП);
	
КонецФункции

// Выполняется при восстановлении регламентированного отчета.
Процедура ОперацииПриВосстановленииРегламентированногоОтчета(Форма) Экспорт
	
	// для ЖКХ 3.0
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(Форма);
	
КонецПроцедуры

// Процедура вызывается при закрытии регламентированного отчета.
//
Процедура ПриЗакрытииРегламентированногоОтчета(Форма) Экспорт
	
	// для ЖКХ 3.0
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

////////////////////////////////////////////////////////////////////////////////
// Чтение контактной информации другими подсистемами

// Получить значение определенного вида контактной информации у объекта.
//
// Параметры
//  Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации
//                                         (организация, контрагент, партнер и т.д.)
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации.
//
// Возвращаемое значение:
//  Строка - строковое представление значения.
//
Функция ПолучитьКонтактнуюИнформацияОбъекта(Ссылка, ВидКонтактнойИнформации, Дата = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Ссылка, ВидКонтактнойИнформации, Дата);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Обработчик для события формы ПриСозданииНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма                - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной.
//                           Информации.
//    Объект               - Произвольный - Объект-владелец контактной информации.
//    ПоложениеЗаголовкаКИ - ПоложениеЗаголовкаЭлементаФормы - Может принимать значения
//                                                             ПоложениеЗаголовкаЭлементаФормы.Лево  или
//                                                             ПоложениеЗаголовкаЭлементаФормы.Верх (по умолчанию).
//
Процедура КонтактнаяИнформацияПриСозданииНаСервере(Форма, Объект, ДополнительныеПараметры = Неопределено, ПоложениеЗаголовкаКИ = "",
										Знач ИсключаемыеВиды = Неопределено, ОтложеннаяИнициализация = Ложь) Экспорт
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(Форма, Объект, ДополнительныеПараметры, ПоложениеЗаголовкаКИ, 
															ИсключаемыеВиды, ОтложеннаяИнициализация);
	
КонецПроцедуры // КонтактнаяИнформацияПриСозданииНаСервере()

// Обработчик для события формы ПриЧтенииНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура КонтактнаяИнформацияПриЧтенииНаСервере(Форма, Объект) Экспорт
	
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(Форма, Объект);
	
КонецПроцедуры // КонтактнаяИнформацияПриЧтенииНаСервере()

// Обработчик для события формы ПередЗаписьюНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура КонтактнаяИнформацияПередЗаписьюНаСервере(Форма, Объект, Отказ = Ложь) Экспорт
	
	// Обработчик подсистемы "Контактная информация"
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(Форма, Объект, Отказ);
	
КонецПроцедуры // КонтактнаяИнформацияПередЗаписьюНаСервере()

// Обработчик для события формы ОбработкаПроверкиЗаполненияНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(Форма, Объект, Отказ) Экспорт
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(Форма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры // КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере()

// Добавляет (удаляет) поле ввода или комментарий на форму, обновляя данные.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма     - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект    - Произвольный - Объект-владелец контактной информации.
//    Результат - Произвольный - Необязательный служебный реквизит, полученный из предыдущего обработчика события.
//
// Возвращаемое значение:
//    Неопределено
//
Функция КонтактнаяИнформацияОбновитьКонтактнуюИнформацию(Форма, Объект, Результат = Неопределено) Экспорт
	
	Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(Форма, Объект, Результат);
	
КонецФункции // КонтактнаяИнформацияОбновитьКонтактнуюИнформацию()

// Удаляет реквизиты формы и элементы интерфейса. Это необходимо для обновления отображения контактной информации на форме.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//    ИмяЭлементаДляРазмещения - Строка - группа, в которой размещены элементы контактной информации.
//
Процедура КонтактнаяИнформацияУдалитьЭлементыКонтактнойИнформацииНаФорме(Форма, Объект, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация") Экспорт
	
	УправлениеКонтактнойИнформацией.УдалитьЭлементыКонтактнойИнформацииНаФорме(Форма, Объект, ИмяЭлементаДляРазмещения);
	
КонецПроцедуры

// Добавляет или изменяет контактную информацию у владельца контактной информации.
//
// Параметры:
//  СсылкаИлиОбъект      - Произвольный    - Ссылка или объект владельца содержащего контактную информацию.
//                                           Для ссылки после добавления контактной информации владелец будет записан.
//                                           Если передан объект, то контактная информация будет добавлена без записи.
//                                           Для сохранения изменений объект необходимо будет записать отдельно.
//  КонтактнаяИнформация - ТаблицаЗначений - Таблица, содержащая контактную информацию
//                                           Описание колонок см. функцию НоваяКонтактнаяИнформация.
//                                           Важно! Если передана пустая таблица значений и указан режим замещения, то
//                                           произойдет очистка всей контактной информации владельца контактной информации.
//  Замещать             - Булево          - Если Истина(по умолчанию), то будет заменена
//                                           вся контактная информация по переданном виду контактной информации.
//                                           Если Ложь, то запись будет добавлена. Если вид контактной информации 
//                                           не разрешает ввод нескольких значений, а контактная информация объекта
//                                           уже содержит запись, то запись не будет добавлена.
//
Процедура КонтактнаяИнформацияУстановитьКонтактнуюИнформациюОбъекта(СсылкаИлиОбъект, Знач КонтактнаяИнформация, Замещать = Истина) Экспорт
	
	УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(СсылкаИлиОбъект, КонтактнаяИнформация, Замещать);
	
КонецПроцедуры

// Получает и помещает в менеджер временных таблиц таблицу контактной информации
// по заданному массиву объектов и видов контактной информации.
// Параметры:
//    МенеджерВременныхТаблиц     - МенеджерВременныхТаблиц запроса, в который необходимо
//                                  поместить временную таблицу контактной информации.
//    МассивВидовКИ    - Массив - Массив видов контактной информации.
//    МассивОбъектов - Массив - Массив объектов.
//    УчитыватьСокращенияВНаименованиях - признак того, нужно ли в наименования полей
//                                        "Регион", "Район", "Город", "НаселенныйПункт", "Улица" добавлять сокращения.
//                                        Как правило, не нужно учитывать сокращения наименований в выгрузках в ОСЗН.
//
Процедура СформироватьТаблицуКонтактнойИнформацииОбъектов(МенеджерВременныхТаблиц, МассивВидовКИ, МассивОбъектов = Неопределено, УчитыватьСокращенияВНаименованиях = Истина) Экспорт
	
	Элемент = МассивВидовКИ.Получить(0);
	ИмяГруппыСправочника = Элемент.Родитель.ИмяПредопределенныхДанных;
	
	Если НЕ МассивОбъектов = Неопределено И МассивОбъектов.Количество() > 0 Тогда
		Ссылка = МассивОбъектов.Получить(0);
		ИмяОбъектаМетаданных = Ссылка.Метаданные().Имя;
	Иначе
		ИмяОбъектаМетаданных = Сред(ИмяГруппыСправочника, 11);
	КонецЕсли;
	
	Если Метаданные.Справочники.Найти(ИмяОбъектаМетаданных).ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено Тогда
		ДействуетС = "КонтактнаяИнформацияОбъекта.ДействуетС";
	Иначе
		ДействуетС = "ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформацияОбъекта.Ссылка КАК Объект,
	|	КонтактнаяИнформацияОбъекта.ЗначенияПолей КАК ЗначенияПолей,
	|	КонтактнаяИнформацияОбъекта.Значение,
	|	" + ДействуетС +" КАК ДействуетС
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + ".КонтактнаяИнформация КАК КонтактнаяИнформацияОбъекта
	|ГДЕ
	|	КонтактнаяИнформацияОбъекта.Тип В (&ТипыКИ) И
	|	КонтактнаяИнформацияОбъекта.Вид В (&ВидыКИ)"
	+ ?(Не МассивОбъектов = Неопределено, " И КонтактнаяИнформацияОбъекта.Ссылка В (&МассивОбъектов)", "");
	
	Если Не МассивОбъектов = Неопределено Тогда
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	КонецЕсли;
	
	МассивТиповКонтактнойИнформации = Новый Массив;
	МассивТиповКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Запрос.УстановитьПараметр("ТипыКИ", МассивТиповКонтактнойИнформации);
	Запрос.УстановитьПараметр("ВидыКИ", МассивВидовКИ);
	
	ВыборкаКонтактнойИнформации = Запрос.Выполнить().Выбрать();
	
	ТаблицаЗначенийПолей = ПолучитьПустуюТаблицуЗначенийПолей(УчитыватьСокращенияВНаименованиях);
	
	Пока ВыборкаКонтактнойИнформации.Следующий() Цикл
		
		ТекЗначение = ВыборкаКонтактнойИнформации.Значение;
		Если ПустаяСтрока(ТекЗначение)
			И ЗначениеЗаполнено(ВыборкаКонтактнойИнформации.ЗначенияПолей) Тогда
			ТекЗначение = КонтактнаяИнформацияВJSON(ВыборкаКонтактнойИнформации.ЗначенияПолей);
		КонецЕсли;
		
		СтруктураПолей = СтруктураАдреса(ТекЗначение);
		
		НоваяСтрока = ТаблицаЗначенийПолей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПолей);
		НоваяСтрока.Объект          = ВыборкаКонтактнойИнформации.Объект;
		НоваяСтрока.Период          = ВыборкаКонтактнойИнформации.ДействуетС;
		
		Если УчитыватьСокращенияВНаименованиях Тогда
			
			НоваяСтрока.Регион          = СокрЛП(СтруктураПолей.Регион + " " + СтруктураПолей.РегионСокращение);
			НоваяСтрока.Район           = СокрЛП(СтруктураПолей.Район + " " + СтруктураПолей.РайонСокращение);
			НоваяСтрока.Город           = СокрЛП(СтруктураПолей.Город + " " + СтруктураПолей.ГородСокращение);
			НоваяСтрока.НаселенныйПункт = СокрЛП(СтруктураПолей.НаселенныйПункт + " " + СтруктураПолей.НаселенныйПунктСокращение);
			НоваяСтрока.Улица           = СокрЛП(СтруктураПолей.Улица + " " + СтруктураПолей.УлицаСокращение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	| *
	|ПОМЕСТИТЬ втКонтактнаяИнформация
	|ИЗ
	|	&КонтактнаяИнформация КАК КонтактнаяИнформация";
	
	Запрос.УстановитьПараметр("КонтактнаяИнформация", ТаблицаЗначенийПолей);
	
	Запрос.Выполнить();
	
КонецПроцедуры // СформироватьТаблицуКонтактнойИнформацииОбъектов()

// Функция вовзращает пустую таблицу значений с колонками-составляющими адреса.
//
Функция ПолучитьПустуюТаблицуЗначенийПолей(УчитыватьСокращенияВНаименованиях)
	
	ТаблицаПолей = Новый ТаблицаЗначений;
	
	МассивТиповОбъекта = Новый Массив;
	
	МассивТиповОбъекта.Добавить(Тип("СправочникСсылка.КВП_Здания"));
	МассивТиповОбъекта.Добавить(Тип("СправочникСсылка.КВП_ЛицевыеСчета"));
	МассивТиповОбъекта.Добавить(Тип("СправочникСсылка.УПЖКХ_Жильцы"));
	
	ТаблицаПолей.Колонки.Добавить("Объект",          Новый ОписаниеТипов(МассивТиповОбъекта));
	
	// Только для адресов выбытия/прибытия жильца.
	ТаблицаПолей.Колонки.Добавить("Период",          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	
	ТаблицаПолей.Колонки.Добавить("Страна",          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
	ТаблицаПолей.Колонки.Добавить("Регион",          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
	ТаблицаПолей.Колонки.Добавить("Район",           УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
	ТаблицаПолей.Колонки.Добавить("Город",           УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
	ТаблицаПолей.Колонки.Добавить("НаселенныйПункт", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
	ТаблицаПолей.Колонки.Добавить("Улица",           УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
	ТаблицаПолей.Колонки.Добавить("Дом",             УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
	ТаблицаПолей.Колонки.Добавить("ТипКорпуса",      УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
	ТаблицаПолей.Колонки.Добавить("Корпус",          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
	ТаблицаПолей.Колонки.Добавить("ТипКвартиры",     УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
	ТаблицаПолей.Колонки.Добавить("Квартира",        УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
	ТаблицаПолей.Колонки.Добавить("Индекс",          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(6));
	ТаблицаПолей.Колонки.Добавить("Представление",   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
	ТаблицаПолей.Колонки.Добавить("Комментарий",     УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
	
	Если Не УчитыватьСокращенияВНаименованиях Тогда
		
		ТаблицаПолей.Колонки.Добавить("ГородСокращение",           УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
		ТаблицаПолей.Колонки.Добавить("НаселенныйПунктСокращение", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
		ТаблицаПолей.Колонки.Добавить("УлицаСокращение",           УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(120));
		
	КонецЕсли;
	
	Возврат ТаблицаПолей;
	
КонецФункции // ПолучитьПустуюТаблицуЗначенийПолей()

// Преобразует строку в XDTO контактную информацию адреса.
//
//  Параметры:
//      ЗначенияПолей - Строка - сериализованная информация, значения полей.
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей
//                               пусто.
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция АдресXMLВXDTO(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	
	Возврат Обработки.РасширенныйВводКонтактнойИнформации.АдресXMLВXDTO(ЗначенияПолей, Представление, ОжидаемыйТип);
	
КонецФункции // АдресXMLВXDTO()

// Вычисляет, что адрес был введен в свободной форме.
//
//  Параметры:
//      КонтактнаяИнформация - Структура, Строка - Контактная информация.
//
//  Возвращаемое значение:
//      Булево - новое значение.
//
Функция АдресВведенВСвободнойФорме(Знач КонтактнаяИнформация) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.АдресВведенВСвободнойФорме(КонтактнаяИнформация);
	
КонецФункции // АдресВведенВСвободнойФорме()

/////////////////////////////////////////////////////////////////////
// Работа с адресами

// Процедура формирует представление для Адреса для ПФР
Функция ПолучитьПредставлениеАдресаДляПФР(СтруктураАдрес)Экспорт 
	
	Возврат ПерсонифицированныйУчет.ПолучитьПредставлениеАдресаДляПФР(СтруктураАдрес);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ДОПОЛНИТЕЛЬНЫМИ СВОЙСТВАМИ И РЕКВИЗИТАМИ

// Возвращает свойства владельца.
//
// Параметры:
//  ВладелецСвойств      - Ссылка на владельца свойств.
//  ПолучатьДопРеквизиты - Булево - в результат включать дополнительные реквизиты.
//  ПолучатьДопСведения  - Булево - в результат включать дополнительные сведения.
//
// Возвращаемое значение:
//  Массив значений типа ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения.
//
Функция ПолучитьСписокСвойств(ВладелецСвойств, ПолучатьДопРеквизиты = Истина, ПолучатьДопСведения = Истина) Экспорт
	
	Возврат УправлениеСвойствами.ПолучитьСписокСвойств(ВладелецСвойств, ПолучатьДопРеквизиты, ПолучатьДопСведения);
	
КонецФункции

// Заполняет дополнительные реквизиты, если используются.
// Вызывается из обработчика ПриСозданииНаСервере формы объекта со свойствами.
// 
// Параметры:
//  Форма - УправляемаяФорма - в которой будут отображаться дополнительные реквизиты.
//
//  ДополнительныеПараметры - Неопределено - все дополнительные параметры имеют значения по умолчанию.
//                               Ранее реквизит назывался "Объект" и имел смысл,
//                               как одноименное свойство структуры, указанной ниже.
//                          - Структура - с необязательными свойствами:
//
//    * Объект - ДанныеФормыСтруктура - по типу объекта, если свойство не указано или Неопределено,
//               взять объект из реквизита формы "Объект".
//
//    * ИмяЭлементаДляРазмещения - Строка - имя группы формы, в которой будут размещены свойства.
//
//    * ПроизвольныйОбъект - Булево - если Истина, тогда в форме создается таблица описания дополнительных
//            реквизитов параметр Объект игнорируется, дополнительные реквизиты не создаются и не заполняются.
//
//            Это востребовано при последовательном использовании одной формы для просмотра или редактирования
//            дополнительных реквизитов разных объектов (в том числе разных типов).
//
//            После выполнения ПриСозданииНаСервере следует вызывать ЗаполнитьДополнительныеРеквизитыВФорме()
//            для добавления и заполнения дополнительных реквизитов.
//            Чтобы сохранить изменения следует вызвать ПеренестиЗначенияИзРеквизитовФормыВОбъект(),
//            а для обновления состава реквизитов вызвать ОбновитьЭлементыДополнительныхРеквизитов().
//
//    * ИмяЭлементаКоманднойПанели - Строка - имя группы формы, в которую будет добавлена кнопка.
//            РедактироватьСоставДополнительныхРеквизитов. Если имя элемента не указано,
//            используется стандартная группа "Форма.КоманднаяПанель".
//
//    * СкрытьУдаленные - Булево - установить/отключить режим скрытия удаленных.
//            Если параметр не указан, а параметр объект указан и свойство Ссылка не заполнено,
//            тогда начальное значение устанавливается Истина, иначе Ложь.
//            При вызове процедуры ПередЗаписьюНаСервере в режиме скрытия удаленных, удаленные значения
//            очищаются (не переносятся обратно в объект), а режим СкрытьУдаленные устанавливается Ложь.
//
Процедура ДополнительныйРеквизитПриСозданииНаСервере(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	УправлениеСвойствами.ПриСозданииНаСервере(Форма, ДополнительныеПараметры);
	
КонецПроцедуры

// Заполняет объект из реквизитов, созданных в форме.
// Вызывается из обработчика ПередЗаписьюНаСервере формы объекта со свойствами.
//
// Параметры:
//  Форма         - УправляемаяФорма - уже настроена в процедуре ПриСозданииНаСервере.
//  ТекущийОбъект - Объект - <ВидОбъектаМетаданных>Объект.<ИмяОбъектаМетаданных>.
//
Процедура ДополнительныйРеквизитПередЗаписьюНаСервере(Форма, Объект) Экспорт
	
	УправлениеСвойствами.ПередЗаписьюНаСервере(Форма, Объект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНОЕ ЗАПОЛНЕНИЕ ДОКУМЕНТОВ

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект   - <ДокументОбъект> - документ, реквизиты которого необходимо заполнить
//  ДанныеЗаполнения - <Структура> или <Неопределено> - одноименный параметр обработчика ОбработкаЗаполнения документа.
//
Процедура Заполнить(ДокументОбъект, ДанныеЗаполнения = Неопределено) Экспорт
	
	ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Получает договор контрагента по умолчанию с учетом условий отбора.
// Возвращается основной договор или единственный или пустая ссылка.
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура.
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно.
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка.
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора,
										СписокВидовДоговора=неопределено, СтруктураПараметров = Неопределено) Экспорт
	
	Возврат РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора,
																			ОрганизацияДоговора, СписокВидовДоговора, СтруктураПараметров);
	
КонецФункции // ПолучитьДоговорКонтрагента()

// Устанавливает договор в качестве основного в регистре сведений "Основные договора контрагента".
// 
// Параметры:
// Договор - Договор, который необходимо установить как основной.
//
Процедура УстановитьОсновнойДоговорКонтрагента(Договор) Экспорт
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьОсновнойДоговорКонтрагента(Договор);
	
КонецПроцедуры

// Устанавливает банковский счет по умолчанию. Возвращает состояние установлен/не установлен.
//
// Параметры
//  Счет				-	Текущее значение счета
//  ВладелецСчета  		–	<СправочникСсылка.Контрагенты (.Организации)> 
//							Контрагент (организация), счет которого нужно получить
//  Валюта  			–	<СправочникСсылка.Валюты>
//							Валюта регламентированного учета
//  СовпадениеВалюты	–	<Булево>
//                          признак совпадения нужной валюты с указанной, либо исключения ее из поиска
//							По умолчанию ищем счет с указанной валютой.
//
// Возвращаемое значение:
//   <СправочникСсылка.БанковскиеСчета> – найденный счет или пустая ссылка.
//
Функция УстановитьБанковскийСчет(Счет,ВладелецСчета, Валюта, СовпадениеВалюты = Истина) Экспорт
	
	Возврат УчетДенежныхСредствБП.УстановитьБанковскийСчет(Счет, ВладелецСчета, Валюта, СовпадениеВалюты);
	
КонецФункции // ПолучитьБанковскийСчет()

// Возвращает сведения о номенклатуре
//
// Параметры:
//  Номенклатура       - номенклатура
//  ПараметрыОбъекта   - структура содержащая поля:
//  - Дата                    - обязательный
//  - Организация             - обязательный
//  - ДеятельностьНаПатенте   - не обязательный
//  - Склад                   - не обязательный
//  - ТипЦен                  - не обязательный
//  - ВалютаДокумента         - не обязательный
//  - КурсВзаиморасчетов      - не обязательный
//  - КратностьВзаиморасчетов - не обязательный
//  - СуммаВключаетНДС        - не обязательный
//  - СтавкаНДС               - не обязательный (Если параметр передан,
//    то будет использована переданная ставка, иначе ставка из номенклатуры).
//
// Возвращаемое значение:
//  Структура - структура сведений о номенклатуре.
//
Функция ПолучитьСведенияОНоменклатуре(Номенклатура, ПараметрыОбъекта, ОпределятьСчета = Истина, ОпределятьЦены = Истина) Экспорт
	
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Номенклатура, ПараметрыОбъекта, ОпределятьСчета, ОпределятьЦены);
	
КонецФункции

// Устанавливает числовое значение состояния документа.
//
Процедура УстановитьСостояниеДокумента(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СостояниеДокумента") Тогда
		Форма.СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Форма.Объект);
	КонецЕсли;
	
КонецПроцедуры // УстановитьСостояниеДокумента()

// Возвращает порядок отражения аванса.
//
Функция ПорядокОтраженияАванса(Организация, Дата) Экспорт
	
	Возврат НалоговыйУчетУСН.ПорядокОтраженияАванса(Организация, Дата);
	
КонецФункции // ПорядокОтраженияАванса()

// Возвращает значение Статьи движения денежных средств по умолчанию, в зависимости от контекста операции
//
// Параметры
//  КонтекстОперации    – <Строка>/<ПеречисленияСсылка> – Вид операции документа или строковая константа,
//                                                        однозначно идентифицирующая вид операции
//
// Возвращаемое значение:
//   <СправочникСсылка.СтатьиДвиженияДенежныхСредств>		– Ссылка на предопределенный элемент справочника или пустая ссылка
Функция СтатьяДДСПоУмолчанию(КонтекстОперации) Экспорт
	
	Возврат УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(КонтекстОперации);
	
КонецФункции // СтатьяДДСПоУмолчанию()

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции // ЗначенияРеквизитовОбъекта()

// Возвращает курс валюты на дату.
//
// Параметры:
//   Валюта    - СправочникСсылка.Валюты - Валюта, для которой получается курс.
//   ДатаКурса - Дата - Дата, на которую получается курс.
//
// Возвращаемое значение: 
//   Структура - Параметры курса.
//       * Курс      - Число - Курс валюты на указанную дату.
//       * Кратность - Число - Кратность валюты на указанную дату.
//       * Валюта    - СправочникСсылка.Валюты - Ссылка валюты.
//       * ДатаКурса - Дата - Дата получения курса.
//
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса) Экспорт
	
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаКурса);
	
КонецФункции // ПолучитьКурсВалюты()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВЕДЕНИЙ ОБ ОРГАНИЗАЦИИ ИЛИ КОНТРАГЕНТЕ

//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода = '20200101', Знач БанковскийСчет = Неопределено) Экспорт
	
	Возврат БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, БанковскийСчет);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Процедура устанавливает субконто на счете. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - набор субконто
//		Номер или имя устанавливаемого субконто
//      Значение субконто - значение устанавливаемого субконто.
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто) Экспорт
	
	БухгалтерскийУчет.УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто);
	
КонецПроцедуры // УстановитьСубконто()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СЧЕТОВ УЧЕТА ПО УМОЛЧАНИЮ

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск.
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов.
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Знач Организация, Знач Контрагент, Знач Договор) Экспорт
	
	// Для ЖКХ 2.0 и 3.0
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор);
	
	// Для УПЖКХ
	// Возврат БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор);
	
КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

// Функция возвращает счета учета номенклатуры по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Склад		        - место хранения, по которому определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета.
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов.
// 
Функция ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад = Неопределено) Экспорт
	
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад);
	
КонецФункции // ПолучитьСчетаУчетаНоменклатуры()

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции для работы с прикладными типами и коллекциями значений

//	Преобразует таблицу значений в массив.
//	Может использоваться для передачи на клиента данных, полученных
//	на сервере в виде таблицы значений в том случае, если таблица
//	значений содержит только такие значения, которые могут
//  быть переданы на клиента.
//
//	Полученный массив содержит структуры, каждая из которых повторяет
//	структуру колонок таблицы значений.
//
//	Не рекомендуется использовать для преобразования таблиц значений
//	с большим количеством строк.
//
//	Параметры: ТаблицаЗначений
//	Возвращаемое значение: Массив
//
Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаЗначений);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ПЕЧАТЬЮ

// Проверить, нужно ли печатать макет.
//
// Параметры:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - см. ПодготовитьКоллекциюПечатныхФорм();
//  ИмяМакета             - Строка          - имя проверяемого макета.
//
// Возвращаемое значение:
//  Булево - Истина, если макет надо печатать.
Функция НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета) Экспорт
	
	Возврат УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета);
	
КонецФункции

// Добавляет табличный документ в коллекцию печатных форм.
//
// Параметры:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - см. ПодготовитьКоллекциюПечатныхФорм();
//  ИмяМакета             - Строка - имя макета;
//  СинонимМакета         - Строка - представление макета;
//  ТабличныйДокумент     - ТабличныйДокумент - печатная форма документа;
//  Картинка              - Картинка;
//  ПолныйПутьКМакету     - Строка - путь к макету в дереве метаданных.
Процедура ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, СинонимМакета, ТабличныйДокумент, Картинка = Неопределено, ПолныйПутьКМакету = "") Экспорт
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, СинонимМакета, ТабличныйДокумент, Картинка, ПолныйПутьКМакету);
	
КонецПроцедуры

// Возвращает макет по полному пути к макету.
// Параметры:
//  ПолныйПутьКМакету - Строка - формат полного пути:
//								"Документ.<ИмяДокумента>.<ИмяМакета>"
//								"Обработка.<ИмяОбработки>.<ИмяМакета>"
//								"ОбщийМакет.<ИмяМакета>".
// Возвращаемое значение:
//	для макета типа MXL - табличный документ
//	для макетов DOC и ODT - двоичные данные.
//
Функция ПолучитьМакет(ПолныйПутьКМакету) Экспорт
	
	Возврат УправлениеПечатью.МакетПечатнойФормы(ПолныйПутьКМакету);
	
КонецФункции

// Задаёт область печати объекта в табличном документе.
// Применяется для связывания области в табличном документе, с объектом печати (ссылка).
// Необходимо вызывать при формировании очередной области печатной формы в табличном
// документе.
//
// Параметры:
//  ТабличныйДокумент - табличный документ - табличный документ печатной формы
//  НомерСтрокиНачало - число - позиция начала очередной области в документе
//  ОбъектыПечати - СписокЗначений - список объектов печати
//  Ссылка - ссылка на объект ИБ - объект печати.
//
Процедура ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка) Экспорт
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
	
КонецПроцедуры

// Возвращает путь к каталогу, используемому при печати, из временного хранилища
//
Функция ПолучитьЛокальныйКаталогФайловПечати() Экспорт
	
	Возврат УправлениеПечатью.ПолучитьЛокальныйКаталогФайловПечати();
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПЖКХ 

Процедура ЗаполнитьРеквизитыРасчетногоДокумента(ДокументОбъект, ТекПользователь, 
												ВалютаРегламентированногоУчета, РасшифровкаПлатежа) Экспорт
	
	//УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ДокументОбъект, ТекПользователь, 
	//																	ВалютаРегламентированногоУчета, РасшифровкаПлатежа);
	
КонецПроцедуры // ЗаполнитьРеквизитыРасчетногоДокумента()

Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт
	
	//Возврат УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры // ПересчитатьСуммуНДС()

Функция ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(Объект, Дата, ИскомыйПараметр) Экспорт
	
	//Возврат ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(Объект, Дата, ИскомыйПараметр);
	
КонецФункции // ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету()

// Функция получает рекомендуемый вид операции для документа реализация товаров и услуг,
// исходя из структуры документа.
//
// Параметры:
//  Объект - ДокументОбъект.РеализацияТоваровУслуг - Документ, 
//                   по которому получаем рекомендуемый вид операции.
// 
// Возвращаемое значение:
// Рекомендуемый вид операции, либо Неопределено.
//
Функция ПолучитьРекомендуемыйВидОперацииДокументаРеализацияТоваров(Объект) Экспорт
	
	Возврат Документы.РеализацияТоваровУслуг.РекомендуемыйВидОперации(Объект);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ОБСПЕЧИВАЮЩИЕ ПРОВЕДЕНИЕ ДОКУМЕНТОВ

// Процедура выполняет подготовку наборов записей документа к проведению документа.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 3. Устанавливает активность наборам записей документов с установленным флагом ручной корректировки
// 4. Записывает пустые наборы, если дата ранее проведенного документа была сдвинута вперед
// Вызывается из модуля документа при проведении.
//
Процедура ПодготовитьНаборыЗаписейКПроведению(Объект, ВыборочноОчищатьРегистры = Истина) Экспорт
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(Объект, ВыборочноОчищатьРегистры);
	
КонецПроцедуры // ПодготовитьНаборыЗаписейКПроведению()

// Процедура выполняет подготовку наборов записей документа к отмене проведения документа.
// 1. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 2. Снимает активность у наборов записей документов с установленным флагом ручной корректировки
// Вызывается из модуля документа при отмене проведения.
//
Процедура ПодготовитьНаборыЗаписейКОтменеПроведения(Объект) Экспорт
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(Объект);
	
КонецПроцедуры // ПодготовитьНаборыЗаписейКОтменеПроведения()

////////////////////////////////////////////////////////////////////////////////
// ДЛИТЕЛЬНЫЕ ОПЕРАЦИИ

// Возвращает новую структуру для параметра ПараметрыВыполнения функции ВыполнитьВФоне.
//
// Параметры:
//   ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы,
//                               во временное хранилище которой надо поместить результат выполнения процедуры.
//
// Возвращаемое значение:
//   Структура - со свойствами:
//     * ИдентификаторФормы      - УникальныйИдентификатор - уникальный идентификатор формы, 
//                               во временное хранилище которой надо поместить результат выполнения процедуры.
//     * ДополнительныйРезультат - Булево     - признак использования дополнительного временного хранилища для передачи
//                                 результата из фонового задания в родительский сеанс. По умолчанию - Ложь.
//     * ОжидатьЗавершение       - Число, Неопределено - таймаут в секундах ожидания завершения фонового задания.
//                               Если задано Неопределено, то ждать до момента завершения задания.
//                               Если задано 0, то ждать завершения задания не требуется.
//                               По умолчанию - 2 секунды; а для низкой скорости соединения - 4.
//     * НаименованиеФоновогоЗадания - Строка - описание фонового задания. По умолчанию - имя процедуры.
//     * КлючФоновогоЗадания      - Строка    - уникальный ключ для активных фоновых заданий, имеющих такое же имя процедуры.
//                                              По умолчанию, не задан.
//
Функция ПараметрыВыполненияВФоне(Знач ИдентификаторФормы) Экспорт
	
	Возврат ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	
КонецФункции

// Запустить выполнение процедуры в фоновом задании.
// 
// Параметры:
//  ИмяПроцедуры           - Строка    - имя экспортной процедуры, которую необходимо выполнить в фоне.
//                                       У процедуры может быть два или три формальных параметра:
//                                        * Параметры       - Структура - произвольные параметры ПараметрыПроцедуры.
//                                                                         Обязательно;
//                                        * АдресРезультата - Строка    - адрес временного хранилища, в которое нужно
//                                          поместить результат работы процедуры. Обязательно;
//                                        * АдресДополнительногоРезультата - Строка - если в ПараметрыВыполнения 
//                                          установлен параметр ДополнительныйРезультат, то содержит адрес
//                                          дополнительного временного хранилища,в которое нужно поместить
//                                          результат работы процедуры. Опционально.
//  ПараметрыПроцедуры     - Структура - произвольные параметры вызова процедуры ИмяПроцедуры.
//  ПараметрыВыполнения    - Структура - см. функцию ПараметрыВыполненияВФоне.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
// 
Функция ВыполнитьВФоне(Знач ИмяПроцедуры, Знач ПараметрыПроцедуры, Знач ПараметрыВыполнения) Экспорт
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

// Регистрирует информацию о ходе выполнения фонового задания.
// В дальнейшем ее можно считать при помощи функции ПрочитатьПрогресс.
//
// Параметры:
//  Процент - Число  - Необязательный. Процент выполнения.
//  Текст   - Строка - Необязательный. Информация о текущей операции.
//  ДополнительныеПараметры - Произвольный - Необязательный. Любая дополнительная информация,
//      которую необходимо передать на клиент. Значение должно быть простым (сериализуемым в XML строку).
//
Процедура СообщитьПрогресс(Знач Процент = Неопределено, Знач Текст = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	ДлительныеОперации.СообщитьПрогресс(Процент, Текст, ДополнительныеПараметры);
	
КонецПроцедуры

// Считывает информацию о ходе выполнения фонового задания.
//
// Параметры:
//   ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания.
//
// Возвращаемое значение:
//   Неопределено, Структура - информация о ходе выполнения фонового задания, записанная процедурой СообщитьПрогресс:
//    * Процент                 - Число  - Необязательный. Процент выполнения.
//    * Текст                   - Строка - Необязательный. Информация о текущей операции.
//    * ДополнительныеПараметры - Произвольный - Необязательный. Любая дополнительная информация.
//
Функция ПрочитатьПрогресс(Знач ИдентификаторЗадания) Экспорт
	
	Возврат ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// БЛОКИРОВКА ИБ

// Устанавливает монопольный доступ к информационной базе (области данных).
//
// При включенном использовании разделителей в сеансе
// начинает транзакцию и устанавливает исключительную управляемую блокировку
// на пространства блокировок всех объектов метаданных, входящих в состав разделителя ОбластьДанных.
//
// В других случаях (например, в локальном режиме работы) устанавливает монопольный режим.
//
// Параметры:
//   ПроверитьОтсутствиеДругихСеансов - Булево - проверить отсутствие других
//          пользовательских сеансов со значением разделителя равным текущему.
//          В случае обнаружения других сеансов будет выдано исключение.
//          Параметр используется только при работе в модели сервиса.
//
Процедура ЗаблокироватьИБ(Знач ПроверитьОтсутствиеДругихСеансов = Истина) Экспорт
	
	ОбщегоНазначения.ЗаблокироватьИБ(ПроверитьОтсутствиеДругихСеансов);
	
КонецПроцедуры

// Для внутреннего использования.
//
Процедура РазблокироватьИБ(БлокировкаИБ) Экспорт
	
	ОбновлениеИнформационнойБазыСлужебный.РазблокироватьИБ(БлокировкаИБ);
	
КонецПроцедуры

// Снимает блокировку информационной файловой базы.
//
Процедура ПриСнятииБлокировкиФайловойБазы() Экспорт
	
	ОбновлениеИнформационнойБазыСлужебныйВызовСервера.СнятьБлокировкуФайловойБазы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РЕГЛАМЕНТНЫХ ЗАДАНИЙ

&НаСервере
// Процедура для установки использования регламентого задания.
Процедура УстановитьИспользованиеРегламентногоЗадания(Идентификатор, Использование) Экспорт
	
	РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(Идентификатор, Использование);
	
КонецПроцедуры

&НаСервере
// Процедура для установки расписания регламентого задания.
Процедура УстановитьРасписаниеРегламентногоЗадания(Идентификатор, Расписание) Экспорт
	
	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(Идентификатор, Расписание);
	
КонецПроцедуры

&НаСервере
// Функция возращает значение булево в зависимости от статуса использования регламентого задания.
Функция РегламентноеЗаданиеИспользуется(Знач Идентификатор) Экспорт
	
	Возврат РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(Идентификатор);
	
КонецФункции

// Возвращает расписание регламентного задания.
Функция РасписаниеРегламентногоЗадания(Знач Идентификатор, Знач ВСтруктуре = Ложь) Экспорт
	
	Возврат РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(Идентификатор, ВСтруктуре);
	
КонецФункции

// Обработчик команды формы, требующей контекстный вызов сервера.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, из которой выполняется команда.
//   ПараметрыВызова - Структура - Параметры вызова.
//   Источник - ТаблицаФормы, ДанныеФормыСтруктура - Объект или список формы с полем "Ссылка".
//   Результат - Структура - Результат выполнения команды.
//
Процедура ВыполнитьКоманду(Знач Форма, Знач ПараметрыВызова, Знач Источник, Результат) Экспорт
	
	ПодключаемыеКоманды.ВыполнитьКоманду(Форма, ПараметрыВызова, Источник, Результат);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ОБНОВЛЕНИЕМ ИБ

// Возвращает таблицу с версиями подсистем конфигурации.
// Для пакетной выгрузки-загрузки сведений о версиях подсистем.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * ИмяПодсистемы - Строка - имя подсистемы.
//     * Версия        - Строка - версия подсистемы.
//
Функция ВерсииПодсистем() Экспорт
	
	Возврат ОбновлениеИнформационнойБазы.ВерсииПодсистем();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции.

Функция ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(Строка) Экспорт
	Возврат СтандартныеПодсистемыСервер.ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(Строка);
КонецФункции

// Проверяет, что переданное значение имеет ссылочный тип данных.
//
// Параметры:
//  Значение - Произвольный - проверяемое значение.
//
// Возвращаемое значение:
//  Булево - Истина, если тип значения ссылочный.
//
Функция ЗначениеСсылочногоТипа(Значение) Экспорт
	Возврат ОбщегоНазначения.ЗначениеСсылочногоТипа(Значение);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПОЧТОВЫМИ СООБЩЕНИЯМИ

// Создает профиль переданной учетной записи для подключения к почтовому серверу.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись.
//
// Возвращаемое значение:
//  ИнтернетПочтовыйПрофиль - профиль учетной записи;
//  Неопределено - не удалось получить учетную запись по ссылке.
//
Функция ИнтернетПочтовыйПрофиль(УчетнаяЗапись, ДляПолучения = Ложь) Экспорт
	
	Возврат РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	
КонецФункции

// Выполняет отправку почтовых сообщений.
// Функция может вызвать исключение, которое требуется обработать.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - ссылка на
//                 учетную запись электронной почты.
//  ПараметрыОтправки - Структура - содержит всю необходимую информацию о письме:
//
//   * Кому - Массив, Строка - интернет адреса получателей письма.
//          - Массив - коллекция структур адресов:
//              * Адрес         - Строка - почтовый адрес (должно быть обязательно заполнено).
//              * Представление - Строка - имя адресата.
//          - Строка - интернет адреса получателей письма, разделитель - ";".
//
//   * ПолучателиСообщения - Массив - массив структур, описывающий получателей:
//      ** Адрес - Строка - Почтовый адрес получателя сообщения.
//      ** Представление - Строка - представление адресата.
//
//   * Копии        - Массив, Строка - адреса получателей копий письма. См. описание поля Кому.
//
//   * СкрытыеКопии - Массив, Строка - адреса получателей скрытых копий письма. См. описание поля Кому.
//
//   * Тема       - Строка - (обязательный) тема почтового сообщения.
//   * Тело       - Строка - (обязательный) текст почтового сообщения (простой текст в кодировке win-1251).
//   * Важность   - ВажностьИнтернетПочтовогоСообщения.
//
//   * Вложения - Массив - файлы, которые необходимо приложить к письму (описания в виде структур):
//     ** Представление - Строка - имя файла вложения;
//     ** АдресВоВременномХранилище - Строка - адрес двоичных данных вложения во временном хранилище.
//     ** Кодировка - Строка - кодировка вложения (используется, если отличается от кодировки письма).
//     ** Идентификатор - Строка - (необязательный) используется для отметки картинок, отображаемых в теле письма.
//
//   * АдресОтвета - Соответствие - см. описание поля Кому.
//   * ИдентификаторыОснований - Строка - идентификаторы оснований данного письма.
//   * ОбрабатыватьТексты  - Булево - необходимость обрабатывать тексты письма при отправке.
//   * УведомитьОДоставке  - Булево - необходимость запроса уведомления о доставке.
//   * УведомитьОПрочтении - Булево - необходимость запроса уведомления о прочтении.
//   * ТипТекста   - Строка, Перечисление.ТипыТекстовЭлектронныхПисем, ТипТекстаПочтовогоСообщения - определяет тип
//                  переданного теста допустимые значения:
//                  HTML/ТипыТекстовЭлектронныхПисем.HTML - текст почтового сообщения в формате HTML.
//                  ПростойТекст/ТипыТекстовЭлектронныхПисем.ПростойТекст - простой текст почтового сообщения.
//                                                                          Отображается "как есть" (значение по
//                                                                          умолчанию).
//                  РазмеченныйТекст/ТипыТекстовЭлектронныхПисем.РазмеченныйТекст - текст почтового сообщения в формате
//                                                                                  Rich Text.
//   * Соединение - ИнтернетПочта - существующее соединение с почтовым сервером. Если не указано, то создается новое.
//   * ПротоколПочты - Строка - если указано значение "IMAP", то письмо будет передано по протоколу IMAP, иначе - по
//                              протоколу SMTP.
//   * ИдентификаторСообщения - Строка - (возвращаемый параметр) идентификатор отправленного почтового сообщения на SMTP
//                                       сервере;
//   * ОшибочныеПолучатели - Соответствие - (возвращаемый параметр) список адресов, по которым отправка не выполнена. 
//                                          См. возвращаемое значение метода ИнтернетПочта.Послать() в синтакс-помощнике.
//
//  Соединение - ИнтернетПочта - (параметр устарел) см. параметр ПараметрыОтправки.Соединение.
//  ПротоколПочты - Строка     - (параметр устарел) см. параметр ПараметрыОтправки.Соединение.
//
// Возвращаемое значение:
//  Строка - Идентификатор сообщения.
Функция ОтправитьПочтовоеСообщение(Знач УчетнаяЗапись, Знач ПараметрыОтправки,
	Знач Соединение = Неопределено, ПротоколПочты = "") Экспорт
	
	Возврат РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись,ПараметрыОтправки, Соединение, ПротоколПочты);
	
КонецФункции

// Проверяет доступность каталога.
Функция КаталогДоступенДляЗаписи(Каталог) Экспорт
	
	ИмяВременногоФайла = Строка(Новый УникальныйИдентификатор) + ".txt";
	
	ПолноеИмяФайла = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПолноеИмяФайла(Каталог, ИмяВременногоФайла);
	
	Попытка
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку("Временный текстовый документ.");
		ТекстовыйДокумент.Записать(ПолноеИмяФайла);
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	УдалитьФайлы(ПолноеИмяФайла);
	
	Возврат Истина;
	
КонецФункции // КаталогДоступенДляИзменений()

// Возвращает значение дополнительного свойства объекта.
//
// Параметры:
//  Объект   - ЛюбаяСсылка - ссылка на объект, например, СправочникСсылка.Номенклатура,
//                           ДокументСсылка.ЗаказПокупателя, ...
//  Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - ссылка на
//                           дополнительный реквизит, значение которого нужно получить.
//           - Строка - Имя дополнительного свойства.
//
// Возвращаемое значение:
//  Произвольный - любое значение, допустимое для свойства.
//
Функция ЗначениеСвойства(Объект, Свойство) Экспорт
	
	Возврат УправлениеСвойствами.ЗначениеСвойства(Объект, Свойство);
	
КонецФункции

// Преобразует все входящие форматы контактной информации в JSON.
//
// Параметры:
//    КонтактнаяИнформация - Строка, Структура - Описание полей контактной информации.
//                    Для строки внутренний формат JSON соответствующая структуре, описанной в функции
//                    РаботаСАдресамиКлиентСервер.ОписаниеНовойКонтактнойИнформации (для конфигурации с поддержкой специфики РФ)
//                    или УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеНовойКонтактнойИнформации.
//                    Для строки c XML соответствующего XDTO пакету КонтактнаяИнформация или Адрес.
//                    У структуры состав полей должен соответствовать возвращаемым полям функций:
//                    РаботаСАдресами.ПоляАдреса или РаботаСАдресамиКлиентСервер.СтруктураКонтактнойИнформацииПоТипу,
//                    для конфигурации с поддержкой специфики РФ или
//                    УправлениеКонтактнойИнформациейКлиентСервер.СтруктураКонтактнойИнформацииПоТипу для международной конфигурации.
//    ОжидаемыйВид  - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации -
//                    Используется для определения типа, если его невозможно вычислить по полю ЗначенияПолей.
//
// Возвращаемое значение:
//     Строка - Контактная информация в формате JSON, соответствующая структуре, описанной в функции 
//              УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеНовойКонтактнойИнформации.
//              Поля могут быть расширены национальной спецификой в одноименной функции общего модуля РаботаСАдресамиКлиентСервер.
//
Функция КонтактнаяИнформацияВJSON(Знач КонтактнаяИнформация, Знач ОжидаемыйВид = Неопределено) Экспорт
	
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(КонтактнаяИнформация, ОжидаемыйВид);
	
КонецФункции // КонтактнаяИнформацияВJSON()

// Описание параметров контактной информацией используемых в обработчике ПриСозданииНаСервере.
// 
// Возвращаемое значение:
//  Структура - параметры контактной информации.
//   * Индекс                   - Строка - Индекс адреса.
//   * Страна                   - Строка - Страна адреса.
//   * ТипПомещения             - Строка - Наименование  типа помещения, который будет установлен
//                                         в форме ввода нового адреса. По умолчанию, "Квартира".
//   * ИмяЭлементаДляРазмещения - Строка - Группа, куда будут размещены элементы контактной информации.
//   * ИсключаемыеВиды - Массив - Виды контактной информации, которые не требуется отображать на форме.
//   * СкрываемыеВиды - Массив - Виды контактной информации, которые не требуется отображать на форме.
//   * ОтложеннаяИнициализация  - Булево - Если Истина, то создание полей контактной информации на форме будет отложено.
//   * ПоложениеЗаголовкаКИ     -  ПоложениеЗаголовкаЭлементаФормы - Может принимать значения:
//                                                             ПоложениеЗаголовкаЭлементаФормы.Верх  или
//                                                             ПоложениеЗаголовкаЭлементаФормы.Лево (по умолчанию).
//
Функция ПараметрыКонтактнойИнформации() Экспорт
	
	Возврат УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	
КонецФункции // ПараметрыКонтактнойИнформации()

// Возвращает таблицу, содержащую контактную информацию нескольких объектов. 
//
// Параметры:
//    СсылкиИлиОбъекты         - Массив - владельцы контактной информации.
//    ТипыКонтактнойИнформации - Массив, ПеречислениеСсылка.ТипыКонтактнойИнформации - Если указаны, то будет получена
//        контактная информация только этих типов.
//    ВидыКонтактнойИнформации - Массив, СправочникСсылка.ВидыКонтактнойИнформации   - Если указаны, то будет получена
//        контактную информацию только этих видов.
//    Дата                     - Дата   - необязательный, дата с которой действует запись контактной информации,
//                              используется при хранении истории изменения контактной информации.
//                              Если владелец хранит историю изменений, то при несоответствии параметра
//                              дате будет вызвано исключение.
//
// Возвращаемое значение:
//  ТаблицаЗначений -  таблица с контактной информацией объектов содержащая колонки:
//    * СсылкиИлиОбъекты - Ссылка - Владелец контактной информации.
//    * Вид              - СправочникСсылка.ВидыКонтактнойИнформации - Вид контактной информации.
//    * Тип              - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
//    * Значение         - Строка - контактная информация во внутреннем формате JSON.
//    * Представление    - Строка - Представление контактной информации.
//    * Дата             - Дата - Дата, с которой действует запись контактной информации.
//    * ЗначенияПолей    - Строка - устаревший XML, соответствующий XDTO пакетам КонтактнаяИнформация или Адрес. Для
//                                  обратной совместимости.
//
Функция КонтактнаяИнформацияОбъектов(СсылкиИлиОбъекты, Знач ТипыКонтактнойИнформации = Неопределено, Знач ВидыКонтактнойИнформации = Неопределено, Дата = Неопределено) Экспорт
	
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(СсылкиИлиОбъекты, ТипыКонтактнойИнформации, ВидыКонтактнойИнформации, Дата);
	
КонецФункции // КонтактнаяИнформацияОбъектов()

// Возвращает структуру адреса.
//
// Параметры:
//    ЗначенияАдресаJSON         - Строка - строка адреса в формате JSON.
//    ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Функция СтруктураАдреса(ЗначенияАдресаJSON, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейБП.СтруктураАдреса(ЗначенияАдресаJSON, ДополнительныеПараметры);
	
КонецФункции // СтруктураАдреса()

////////////////////////////////////////////////////////////////////////////////
// ОЦЕНКА ПРОИЗВОДИТЕЛЬНОСТИ

// Изменяет ключевые операции.
//
// Параметры:
//  КлючевыеОперации - Массив - ключевые операции,
//								элемент массива - Структура("ИмяКлючевойОперацииСтарое, ИмяКлючевойОперацииНовое , ЦелевоеВремя")
//								или
//								элемент массива - Структура("ИмяКлючевойОперацииСтарое, ИмяКлючевойОперацииНовое"),
//								целевое время не изменяется.
//
Процедура ИзменитьКлючевыеОперации(КлючевыеОперации) Экспорт
	
	ОценкаПроизводительности.ИзменитьКлючевыеОперации(КлючевыеОперации);
	
КонецПроцедуры

// Создает ключевые операции в случае их отсутствия.
//
// Параметры:
//  КлючевыеОперации - Массив - ключевые операции, элемент массива - Структура("ИмяКлючевойОперации, ЦелевоеВремя").
//
Процедура СоздатьКлючевыеОперации(КлючевыеОперации) Экспорт
	
	ОценкаПроизводительности.СоздатьКлючевыеОперации(КлючевыеОперации);
	
КонецПроцедуры

#КонецОбласти
