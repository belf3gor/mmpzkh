#Область СлужебныеПроцедурыИФункции

// Процедура создает документы указанного вида.
Процедура СоздатьДокументы(ИдентификаторСеанса, МесяцНачисления, ДатаРегистрацииДокументов, Приоритет, НомерПотока, ЭтоДоработкаДокументов = Ложь) Экспорт
	
	ДанныеФормируемогоДокумента = ПолучитьДанныеФормируемогоДокумента(ИдентификаторСеанса, МесяцНачисления, Приоритет, ЭтоДоработкаДокументов);
	
	Пока НЕ ДанныеФормируемогоДокумента.Количество() = 0 Цикл
		
		Здание          = ДанныеФормируемогоДокумента.Объект;
		ВидОперации     = ДанныеФормируемогоДокумента.ВидОперации;
		Услуга          = ДанныеФормируемогоДокумента.Услуга;
		Документ        = ДанныеФормируемогоДокумента.Документ;
		Организация     = ДанныеФормируемогоДокумента.Организация;
		Проведен        = ДанныеФормируемогоДокумента.Проведен;
		Ответственный   = ДанныеФормируемогоДокумента.Ответственный;
		
		Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.ЗакрытиеПериода Тогда
			СформироватьДокументЗакрытияПериода(Организация, Здание, Документ, Проведен, МесяцНачисления, ИдентификаторСеанса, НомерПотока, Ответственный);
		ИначеЕсли ВидОперации = Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПени Тогда
			СформироватьДокументНачисленияПени(Организация, Здание, Документ, Проведен, МесяцНачисления, ДатаРегистрацииДокументов, ИдентификаторСеанса, НомерПотока, Ответственный);
		ИначеЕсли ВидОперации = Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеЛьгот Тогда
			СформироватьДокументРасчетаЛьгот(Организация, Здание, Услуга, Документ, Проведен, МесяцНачисления, ДатаРегистрацииДокументов, ИдентификаторСеанса, НомерПотока, Ответственный);
		Иначе
			СформироватьДокументНачисленияУслуг(Организация, Здание, ВидОперации, Услуга, Документ, Проведен, МесяцНачисления, ДатаРегистрацииДокументов, ИдентификаторСеанса, НомерПотока, Ответственный);
		КонецЕсли;
		
		ДанныеФормируемогоДокумента = ПолучитьДанныеФормируемогоДокумента(ИдентификаторСеанса, МесяцНачисления, Приоритет, ЭтоДоработкаДокументов);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура создает документ начисления услуг по заданным параметрам.
Процедура СформироватьДокументНачисленияУслуг(Организация, ЗданиеСсылка, ВидОперации,
											  УслугаСсылка, ДокументСсылка, ДокументПроведен,
											  МесяцНачисления, ДатаРегистрацииДокументов, ИдентификаторСеанса,
											  НомерПотока, Ответственный)
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		ДокументОбъект = Документы.КВП_НачислениеУслуг.СоздатьДокумент();
		
		// Устанавливаем значение по умолчанию.
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(ДокументОбъект, УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ДокументОбъект.Организация = Организация;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеНаЛС Тогда
			ВидОперацииДокумента = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета;
		ИначеЕсли ВидОперации = Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПоПУ Тогда
			ВидОперацииДокумента = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ;
		Иначе
			ВидОперацииДокумента = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования;
		КонецЕсли;
		
		ДокументОбъект.Дата = КонецДня(ДатаРегистрацииДокументов);
		
		// Добровольное страхование начисляется +2 месяца от даты документа
		Если ВидОперацииДокумента = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования Тогда
			ДокументОбъект.КоличествоДнейНачисления = УПЖКХ_ОбщегоНазначенияКлиентСервер.ВсегоДнейВМесяце(ДобавитьМесяц(МесяцНачисления, 2));
		// Остальные услуги начисляются по количеству дней в месяце
		Иначе
			ДокументОбъект.КоличествоДнейНачисления = День(КонецМесяца(МесяцНачисления));
		КонецЕсли;
		
		ДокументОбъект.ВидОперации              = ВидОперацииДокумента;
		ДокументОбъект.Объект                   = ЗданиеСсылка;
		ДокументОбъект.Услуга                   = УслугаСсылка;
		
	Иначе
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	// Ответственного заполняем в самом конце, т.к это возможно перезаполнение документа
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ДокументОбъект.Ответственный          = Ответственный;
	КонецЕсли;
	
	Организация = ДокументОбъект.Организация;
	
	ДокументОбъект.мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(ДокументОбъект.Дата, ДокументОбъект.Организация);
	ДокументОбъект.Комментарий = "Документ создан Мастером начислений";
	
	ДокументОбъект.ЗаполнитьТабличнуюЧастьУслуги(ДокументОбъект.Объект);
	
	БылиНачисленияНаЛС = Ложь;
	ТабличнаяЧастьПустая = Истина;
	
	Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПоПУ Тогда
		ДокументОбъект.РассчитатьПоказания();
		
		// Выполним сортировку строк.
		// Сортировка необходима, чтобы при открытии формы документа начисления по основным
		// и зависимым услугам группировались по л/с.
		ДокументОбъект.УслугиПоПоказаниямПУ.Сортировать("ЛицевойСчет, Зависимая, Услуга, УслугаОснование, СоставнаяУслуга, 
		                                                |НачислениеПоПовышающемуКоэффициенту, НачалоПериода, ВидТарифа");
		
		ТабличнаяЧастьПустая = (ДокументОбъект.УслугиПоПоказаниямПУ.Количество() = 0);
	Иначе
		
		// Выполним сортировку строк.
		// Сортировка необходима, чтобы при открытии формы документа начисления по основным
		// и зависимым услугам группировались по л/с.
		ДокументОбъект.Услуги.Сортировать("ЛицевыеСчета, Зависимая, Услуга, УслугаОснование, 
		                                  |СоставнаяУслуга, НачалоПериода");
		
		БылиНачисленияНаЛС = ПроверитьНаличиеНачислений(ДокументОбъект);
		ТабличнаяЧастьПустая = (ДокументОбъект.Услуги.Количество() = 0);
	КонецЕсли;
	
	Если ТабличнаяЧастьПустая Тогда
		
		// Если табличная часть документ пустая, то не имеет смысла сохранять пустой документ.
		Комментарий = "Документ не создан, так как он пустой.";
		СтатусОшибки = 4;
		ДокСсылка = Документы.КВП_НачислениеУслуг.ПустаяСсылка();
		
	Иначе
		
		Если БылиНачисленияНаЛС Тогда
			Если КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
				
				ДокСсылка        = ДокументОбъект.Ссылка;
				ДокПроведен      = Ложь;
				СуммаДокумента   = ДокументОбъект.СуммаДокумента;
				Комментарий      = "Не удалось выполнить проведение! Как минимум на один лицевой счет документа уже были начисления! Документ записан.";
				СтатусОшибки     = 1;
				
			Иначе
				
				ДокСсылка        = ДокументОбъект.Ссылка;
				ДокПроведен      = Ложь;
				СуммаДокумента   = ДокументОбъект.СуммаДокумента;
				СтатусОшибки     = 3;
				Комментарий      = "Не удалось создать документ! Возможно ошибка блокировки данных.";
				
			КонецЕсли;
		Иначе
			Если КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Проведение) Тогда
				
				ДокСсылка        = ДокументОбъект.Ссылка;
				ДокПроведен      = Истина;
				СуммаДокумента   = ДокументОбъект.СуммаДокумента;
				СтатусОшибки     = 0;
				Комментарий      = "Документ успешно создан.";
				
			Иначе
				Если КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
					
					ДокСсылка        = ДокументОбъект.Ссылка;
					ДокПроведен      = Ложь;
					СуммаДокумента   = ДокументОбъект.СуммаДокумента;
					СтатусОшибки     = 2;
					Комментарий      = "Не удалось выполнить проведение (возможно ошибка блокировки данных)! Документ записан."
					
				Иначе
					
					ДокСсылка        = ДокументОбъект.Ссылка;
					ДокПроведен      = Ложь;
					СуммаДокумента   = ДокументОбъект.СуммаДокумента;
					СтатусОшибки     = 3;
					Комментарий      = "Не удалось создать документ! Возможно ошибка блокировки данных.";
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Измерения
	ДанныеЗадачи = Новый Структура;
	ДанныеЗадачи.Вставить("ИдентификаторСеанса", ИдентификаторСеанса);
	ДанныеЗадачи.Вставить("МесяцНачисления", МесяцНачисления);
	ДанныеЗадачи.Вставить("Объект", ЗданиеСсылка);
	ДанныеЗадачи.Вставить("ВидОперации", ВидОперации);
	ДанныеЗадачи.Вставить("Услуга", УслугаСсылка);
	ДанныеЗадачи.Вставить("Организация", Организация);
	
	//Ресурсы
	ДанныеЗадачи.Вставить("НомерПотока", НомерПотока);
	ДанныеЗадачи.Вставить("ДокументСсылка", ДокСсылка);
	ДанныеЗадачи.Вставить("ДокументПроведен", ДокПроведен);
	ДанныеЗадачи.Вставить("СуммаДокумента", СуммаДокумента);
	ДанныеЗадачи.Вставить("Комментарий", Комментарий);
	ДанныеЗадачи.Вставить("СтатусОшибки", СтатусОшибки);
	
	ДанныеЗадачи.Вставить("ЗаписьЗаблокирована", Ложь);
	ДанныеЗадачи.Вставить("ЗаписьОбработана", Истина);
	
	ОбновитьЗадачиСеансовМастераНачислений(ДанныеЗадачи);
	
КонецПроцедуры

// Функция проверяет были ли уже начисления в текущем месяце на лицевые счета,
// указанные в табличной части текущего документа начисления услуг.
Функция ПроверитьНаличиеНачислений(Документ)
	
	Значение = Ложь;
	
	// Проверим, не начислили ли уже услуги на объекты.
	СписокОбъектов = Документ.Услуги.ВыгрузитьКолонку("ЛицевыеСчета");
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НачислениеУслугУслуги.ЛицевыеСчета КАК Объект,
	|	КВП_НачислениеУслугУслуги.Услуга
	|ИЗ
	|	Документ.КВП_НачислениеУслуг.Услуги КАК КВП_НачислениеУслугУслуги
	|ГДЕ
	|	КВП_НачислениеУслугУслуги.Ссылка <> &ТекущийДокумент
	|	И КВП_НачислениеУслугУслуги.Ссылка.Организация = &Организация
	|	И КВП_НачислениеУслугУслуги.Ссылка.Проведен
	|	И КВП_НачислениеУслугУслуги.ЛицевыеСчета В(&СписокОбъектов)
	|	И НАЧАЛОПЕРИОДА(КВП_НачислениеУслугУслуги.Ссылка.Дата, МЕСЯЦ) = &ДатаНачМес
	|	И КВП_НачислениеУслугУслуги.Начислено <> 0";
	
	Запрос.УстановитьПараметр("СписокОбъектов",  СписокОбъектов);
	Запрос.УстановитьПараметр("ДатаНачМес",      НачалоМесяца(Документ.Дата));
	Запрос.УстановитьПараметр("ТекущийДокумент", Документ.Ссылка);
	Запрос.УстановитьПараметр("Организация",     Документ.Организация);
	
	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	ТаблицаНачислений.Индексы.Добавить("Объект");
	
	Для Каждого ТекНачисление Из Документ.Услуги Цикл
		Если ТекНачисление.Начислено = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокиОбъекта = ТаблицаНачислений.НайтиСтроки(Новый Структура("Объект, Услуга", ТекНачисление.ЛицевыеСчета, ТекНачисление.Услуга));
		Если Не СтрокиОбъекта.Количество() = 0 Тогда
			Значение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

// Процедура создает документ расчета льгот по заданным параметрам.
Процедура СформироватьДокументРасчетаЛьгот(Организация, ЗданиеСсылка, УслугаСсылка, ДокументСсылка, ДокументПроведен, МесяцНачисления, ДатаРегистрацииДокументов, ИдентификаторСеанса, НомерПотока, Ответственный)
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		ДокументОбъект = Документы.КВП_РасчетЛьгот.СоздатьДокумент();
		
		// Устанавливаем значение по умолчанию.
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(ДокументОбъект, УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ДокументОбъект.Организация = Организация;
		КонецЕсли;
		
		ДокументОбъект.Дата = КонецДня(ДатаРегистрацииДокументов);
		
		Если НЕ Константы.УПЖКХ_ИспользоватьНовыйАлгоритмРасчетаЛьгот.Получить() Тогда
			
			ДокументОбъект.ВидОперации              = Перечисления.КВП_ВидыОперацийРасчетаЛьгот.НачислениеНаЛицевыеСчета;
			ДокументОбъект.КоличествоДнейНачисления = День(КонецМесяца(МесяцНачисления));
			ДокументОбъект.СтарыйДокумент           = Истина;
			
		Иначе
			ДокументОбъект.Период = МесяцНачисления;
		КонецЕсли;
		
		ДокументОбъект.Объект = ЗданиеСсылка;
		ДокументОбъект.Услуга = УслугаСсылка;
		
	Иначе
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.Льготы.Очистить();
		ДокументОбъект.РасшифровкаЛьгот.Очистить();
	КонецЕсли;
	
	// Ответственного заполняем в самом конце, т.к это возможно перезаполнение документа
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ДокументОбъект.Ответственный = Ответственный;
	КонецЕсли;
	
	Организация = ДокументОбъект.Организация;
	
	ДокументОбъект.Комментарий = "Документ создан Мастером начислений";
	
	Если ДокументОбъект.СтарыйДокумент Тогда
		ДокументОбъект.ЗаполнитьТабличнуюЧастьУслуги();
		ТабличнаяЧастьПустая = (ДокументОбъект.Льготы.Количество() = 0);
		Если НЕ ТабличнаяЧастьПустая Тогда
			КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись);
			ДокументОбъект.РассчитатьЛьготы();
		КонецЕсли;
	Иначе
		ДокументОбъект.ЗаполнитьТабличнуюЧастьНовыйАлгоритм();
		ТабличнаяЧастьПустая = (ДокументОбъект.РасчетЛьгот.Количество() = 0);
	КонецЕсли;
	
	Если ТабличнаяЧастьПустая Тогда
		
		// Если табличная часть документ пустая, то не имеет смысла сохранять пустой документ.
		Комментарий = "Документ не создан, так как он пустой.";
		СтатусОшибки = 4;
		ДокСсылка = Документы.КВП_РасчетЛьгот.ПустаяСсылка();
		
	Иначе
		
		Если КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Проведение) Тогда
			
			ДокСсылка        = ДокументОбъект.Ссылка;
			ДокПроведен      = Истина;
			СуммаДокумента   = ДокументОбъект.СуммаДокумента;
			СтатусОшибки     = 0;
			Комментарий      = "Документ успешно создан.";
			
		Иначе
			Если КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
				
				ДокСсылка        = ДокументОбъект.Ссылка;
				ДокПроведен      = Ложь;
				СуммаДокумента   = ДокументОбъект.СуммаДокумента;
				СтатусОшибки     = 2;
				Комментарий      = "Не удалось выполнить проведение (возможно ошибка блокировки данных)! Документ записан."
				
			Иначе
				
				ДокСсылка        = ДокументОбъект.Ссылка;
				ДокПроведен      = Ложь;
				СуммаДокумента   = ДокументОбъект.СуммаДокумента;
				СтатусОшибки     = 3;
				Комментарий      = "Не удалось создать документ! Возможно ошибка блокировки данных.";
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Измерения
	ДанныеЗадачи = Новый Структура;
	ДанныеЗадачи.Вставить("ИдентификаторСеанса", ИдентификаторСеанса);
	ДанныеЗадачи.Вставить("МесяцНачисления", МесяцНачисления);
	ДанныеЗадачи.Вставить("Объект", ЗданиеСсылка);
	ДанныеЗадачи.Вставить("ВидОперации", Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеЛьгот);
	ДанныеЗадачи.Вставить("Услуга", УслугаСсылка);
	ДанныеЗадачи.Вставить("Организация", Организация);
	
	//Ресурсы
	ДанныеЗадачи.Вставить("НомерПотока", НомерПотока);
	ДанныеЗадачи.Вставить("ДокументСсылка", ДокСсылка);
	ДанныеЗадачи.Вставить("ДокументПроведен", ДокПроведен);
	ДанныеЗадачи.Вставить("СуммаДокумента", СуммаДокумента);
	ДанныеЗадачи.Вставить("Комментарий", Комментарий);
	ДанныеЗадачи.Вставить("СтатусОшибки", СтатусОшибки);
	
	ДанныеЗадачи.Вставить("ЗаписьЗаблокирована", Ложь);
	ДанныеЗадачи.Вставить("ЗаписьОбработана", Истина);
	
	ОбновитьЗадачиСеансовМастераНачислений(ДанныеЗадачи);
	
КонецПроцедуры

// Процедура создает документ начисления пени по заданным параметрам.
Процедура СформироватьДокументНачисленияПени(Организация, ЗданиеСсылка, ДокументСсылка, ДокументПроведен, МесяцНачисления, ДатаРегистрацииДокументов, ИдентификаторСеанса, НомерПотока, Ответственный)
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		ДокументОбъект = Документы.КВП_НачислениеПени.СоздатьДокумент();
		
		// Устанавливаем значение по умолчанию.
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(ДокументОбъект, УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ДокументОбъект.Организация = Организация;
		КонецЕсли;
		
		ДокументОбъект.Дата   = КонецДня(ДатаРегистрацииДокументов);
		ДокументОбъект.Объект = ЗданиеСсылка;
		
	Иначе
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	// Ответственного заполняем в самом конце, т.к это возможно перезаполнение документа
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ДокументОбъект.Ответственный = Ответственный;
	КонецЕсли;
	
	Организация = ДокументОбъект.Организация;
	
	ДокументОбъект.Комментарий = "Документ создан Мастером начислений";
	
	ЗаполнитьТаблицуНачисленияПени(ДокументОбъект);
	
	ТабличнаяЧастьПустая = (ДокументОбъект.Начисления.Количество() = 0);
	
	СтруктураДанных = Новый Структура;
	
	Если ТабличнаяЧастьПустая Тогда
		
		// Если табличная часть документ пустая, то не имеет смысла сохранять пустой документ.
		Комментарий = "Документ не создан, так как он пустой.";
		СтатусОшибки = 4;
		ДокСсылка = Документы.КВП_НачислениеПени.ПустаяСсылка();
		
	Иначе
		
		Если КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Проведение) Тогда
			
			ДокСсылка        = ДокументОбъект.Ссылка;
			ДокПроведен      = Истина;
			СуммаДокумента   = ДокументОбъект.СуммаДокумента;
			СтатусОшибки     = 0;
			Комментарий      = "Документ успешно создан.";
			
		Иначе
			Если КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
				
				ДокСсылка        = ДокументОбъект.Ссылка;
				ДокПроведен      = Ложь;
				СуммаДокумента   = ДокументОбъект.СуммаДокумента;
				СтатусОшибки     = 2;
				Комментарий      = "Не удалось выполнить проведение (возможно ошибка блокировки данных)! Документ записан."
				
			Иначе
				
				ДокСсылка        = ДокументОбъект.Ссылка;
				ДокПроведен      = Ложь;
				СуммаДокумента   = ДокументОбъект.СуммаДокумента;
				СтатусОшибки     = 3;
				Комментарий      = "Не удалось создать документ! Возможно ошибка блокировки данных.";
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Измерения
	ДанныеЗадачи = Новый Структура;
	ДанныеЗадачи.Вставить("ИдентификаторСеанса", ИдентификаторСеанса);
	ДанныеЗадачи.Вставить("МесяцНачисления", МесяцНачисления);
	ДанныеЗадачи.Вставить("Объект", ЗданиеСсылка);
	ДанныеЗадачи.Вставить("ВидОперации", Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПени);
	ДанныеЗадачи.Вставить("Организация", Организация);
	
	//Ресурсы
	ДанныеЗадачи.Вставить("НомерПотока", НомерПотока);
	ДанныеЗадачи.Вставить("ДокументСсылка", ДокСсылка);
	ДанныеЗадачи.Вставить("ДокументПроведен", ДокПроведен);
	ДанныеЗадачи.Вставить("СуммаДокумента", СуммаДокумента);
	ДанныеЗадачи.Вставить("Комментарий", Комментарий);
	ДанныеЗадачи.Вставить("СтатусОшибки", СтатусОшибки);
	
	ДанныеЗадачи.Вставить("ЗаписьЗаблокирована", Ложь);
	ДанныеЗадачи.Вставить("ЗаписьОбработана", Истина);
	
	ОбновитьЗадачиСеансовМастераНачислений(ДанныеЗадачи);
	
КонецПроцедуры

// Заполняет таблицу начисления пени (взята из формы документа "Начисление пени".)
Процедура ЗаполнитьТаблицуНачисленияПени(ДокументОбъект)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	мОтказУчетнаяПолитика = Ложь;
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(ДокументОбъект.Дата,
																										ДокументОбъект.Организация, мОтказУчетнаяПолитика);
	
	Если мОтказУчетнаяПолитика = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНачисленияПени = КВП_ПолучитьТаблицуНачисленияПени(ДокументОбъект.Дата, ДокументОбъект.Организация, 
																мНастройкиУчетнойПолитикиТСЖ, ДокументОбъект.Объект);
																
	ТаблицаНачисленияПени.Свернуть("ЛицевойСчет, Услуга, МесяцНачисления", "Сумма");
	
	КВП_СкорректироватьСуммыПени(ДокументОбъект.Дата, ТаблицаНачисленияПени, ДокументОбъект.Ссылка);
	
	ДокументОбъект.Начисления.Загрузить(ТаблицаНачисленияПени);
	
	// удалим строки с нулевым пени
	СтрокиНулевогоПени = ДокументОбъект.Начисления.НайтиСтроки(Новый Структура("Сумма", 0));
	Для Каждого СтрокаНулевогоПени Из СтрокиНулевогоПени Цикл
		ДокументОбъект.Начисления.Удалить(СтрокаНулевогоПени);
	КонецЦикла;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ЗаполнениеДокументаНачисленияПениЧерезМастерНачисленийЖкх", ВремяНачала);
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	
КонецПроцедуры

// Процедура создает документ закрытия периода по начислениям ЖКХ по заданным параметрам.
Процедура СформироватьДокументЗакрытияПериода(Организация, ЗданиеСсылка, ДокументСсылка, ДокументПроведен, МесяцНачисления, ИдентификаторСеанса, НомерПотока, Ответственный)
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		ДокументОбъект = Документы.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ.СоздатьДокумент();
		
		// Устанавливаем значение по умолчанию.
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(ДокументОбъект, УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ДокументОбъект.Организация = Организация;
		КонецЕсли;
		
		ДокументОбъект.Дата   = КонецМесяца(МесяцНачисления);
		ДокументОбъект.Объект = ЗданиеСсылка;
		
	Иначе
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	// Ответственного заполняем в самом конце, т.к это возможно перезаполнение документа
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ДокументОбъект.Ответственный = Ответственный;
	КонецЕсли;
	
	Организация = ДокументОбъект.Организация;
	
	ДокументОбъект.Комментарий = "Документ создан Мастером начислений";
	
	СтруктураДанных = Новый Структура;
	
	Если КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Проведение) Тогда
		
		ДокСсылка        = ДокументОбъект.Ссылка;
		ДокПроведен      = Истина;
		СтатусОшибки     = 0;
		Комментарий      = "Документ успешно создан.";
		
	Иначе
		Если КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
			
			ДокСсылка        = ДокументОбъект.Ссылка;
			ДокПроведен      = Ложь;
			СтатусОшибки     = 2;
			Комментарий      = "Не удалось выполнить проведение (возможно ошибка блокировки данных)! Документ записан."
			
		Иначе
			
			ДокСсылка        = ДокументОбъект.Ссылка;
			ДокПроведен      = Ложь;
			СтатусОшибки     = 3;
			Комментарий      = "Не удалось создать документ! Возможно ошибка блокировки данных.";
			
		КонецЕсли;
	КонецЕсли;
	
	//Измерения
	ДанныеЗадачи = Новый Структура;
	ДанныеЗадачи.Вставить("ИдентификаторСеанса", ИдентификаторСеанса);
	ДанныеЗадачи.Вставить("МесяцНачисления", МесяцНачисления);
	ДанныеЗадачи.Вставить("Объект", ЗданиеСсылка);
	ДанныеЗадачи.Вставить("ВидОперации", Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.ЗакрытиеПериода);
	ДанныеЗадачи.Вставить("Организация", Организация);
	
	//Ресурсы
	ДанныеЗадачи.Вставить("НомерПотока", НомерПотока);
	ДанныеЗадачи.Вставить("ДокументСсылка", ДокСсылка);
	ДанныеЗадачи.Вставить("ДокументПроведен", ДокПроведен);
	ДанныеЗадачи.Вставить("Комментарий", Комментарий);
	ДанныеЗадачи.Вставить("СтатусОшибки", СтатусОшибки);
	
	ДанныеЗадачи.Вставить("ЗаписьЗаблокирована", Ложь);
	ДанныеЗадачи.Вставить("ЗаписьОбработана", Истина);
	
	ОбновитьЗадачиСеансовМастераНачислений(ДанныеЗадачи);
	
КонецПроцедуры

// Функция получает данные формируемого документа.
Функция ПолучитьДанныеФормируемогоДокумента(ИдентификаторСеанса, МесяцНачисления, Приоритет, ЭтоДоработкаДокументов)
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	НачатьТранзакцию();
	
	БлокировкаДанных.Заблокировать();
	
	Если ЭтоДоработкаДокументов Тогда
		УсловиеДоработкиДокументов = "(УПЖКХ_ЗадачиСеансовМастераНачислений.СтатусОшибки = 2 ИЛИ УПЖКХ_ЗадачиСеансовМастераНачислений.СтатусОшибки = 3)";
	Иначе
		УсловиеДоработкиДокументов = "НЕ УПЖКХ_ЗадачиСеансовМастераНачислений.ЗаписьОбработана";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.Объект КАК Объект,
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации КАК ВидОперации,
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.Услуга КАК Услуга,
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ДокументСсылка КАК Документ,
	|	ЕСТЬNULL(УПЖКХ_ЗадачиСеансовМастераНачислений.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(УПЖКХ_ЗадачиСеансовМастераНачислений.ДокументСсылка.Проведен, ЛОЖЬ) КАК Проведен,
	|	ЕСТЬNULL(УПЖКХ_СеансыМастераНачислений.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Ответственный
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СеансыМастераНачислений КАК УПЖКХ_СеансыМастераНачислений
	|		ПО УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = УПЖКХ_СеансыМастераНачислений.ИдентификаторСеанса
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.Приоритет = &Приоритет
	|	И НЕ УПЖКХ_ЗадачиСеансовМастераНачислений.ЗаписьЗаблокирована
	|	И &УсловиеДоработкиДокументов";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДоработкиДокументов", УсловиеДоработкиДокументов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ИдентификаторСеанса", ИдентификаторСеанса);
	Запрос.УстановитьПараметр("Приоритет",           Приоритет);
	Запрос.УстановитьПараметр("МесяцНачисления",     МесяцНачисления);
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	ВыборкаДанных.Следующий();
	
	Если НЕ ВыборкаДанных.Количество() = 0 Тогда
		// Необходимо установить флаг блокировки записи, чтобы другие потоки не пытались заново формировать этот же документ.
		НаборЗаписей = РегистрыСведений.УПЖКХ_ЗадачиСеансовМастераНачислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСеанса.Установить(ИдентификаторСеанса);
		НаборЗаписей.Отбор.МесяцНачисления.Установить(МесяцНачисления);
		НаборЗаписей.Отбор.Объект.Установить(ВыборкаДанных.Объект);
		НаборЗаписей.Отбор.ВидОперации.Установить(ВыборкаДанных.ВидОперации);
		НаборЗаписей.Отбор.Услуга.Установить(ВыборкаДанных.Услуга);
		НаборЗаписей.Отбор.Организация.Установить(ВыборкаДанных.Организация);
		НаборЗаписей.Прочитать();
		
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьНабора.ЗаписьЗаблокирована = Истина;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат ВыборкаДанных;
	
КонецФункции

// Процедура записывает в регистр сеансов Мастера данные об исполнении задачи
Процедура ОбновитьЗадачиСеансовМастераНачислений(ДанныеЗадачи)
	
	Услуга = Справочники.КВП_Услуги.ПустаяСсылка();
	ЕстьСвойствоУслуга = ДанныеЗадачи.Свойство("Услуга", Услуга);

	// Блокируем данные регистра от возможного чтения другими потоками,
	// а также обработчиком проверки формирования документов.
	// Блокировка устанавливается на запись регистра по комбинации измерений
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений");
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторСеанса", ДанныеЗадачи.ИдентификаторСеанса);
	ЭлементБлокировки.УстановитьЗначение("МесяцНачисления", ДанныеЗадачи.МесяцНачисления);
	ЭлементБлокировки.УстановитьЗначение("Объект", ДанныеЗадачи.Объект);
	ЭлементБлокировки.УстановитьЗначение("ВидОперации", ДанныеЗадачи.ВидОперации);
	
	Если ЕстьСвойствоУслуга Тогда
		ЭлементБлокировки.УстановитьЗначение("Услуга", Услуга);
	КонецЕсли;
	
	ЭлементБлокировки.УстановитьЗначение("Организация", ДанныеЗадачи.Организация);
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	
	БлокировкаДанных.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_ЗадачиСеансовМастераНачислений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторСеанса.Установить(ДанныеЗадачи.ИдентификаторСеанса);
	НаборЗаписей.Отбор.МесяцНачисления.Установить(ДанныеЗадачи.МесяцНачисления);
	НаборЗаписей.Отбор.Объект.Установить(ДанныеЗадачи.Объект);
	НаборЗаписей.Отбор.ВидОперации.Установить(ДанныеЗадачи.ВидОперации);
	
	Если ЕстьСвойствоУслуга Тогда
		НаборЗаписей.Отбор.Услуга.Установить(Услуга);
	КонецЕсли;
	
	НаборЗаписей.Отбор.Организация.Установить(ДанныеЗадачи.Организация);
	НаборЗаписей.Прочитать();
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		
		ЗаписьНабора.НомерПотока         = ДанныеЗадачи.НомерПотока;
		ЗаписьНабора.ДокументСсылка      = ДанныеЗадачи.ДокументСсылка;
		ЗаписьНабора.ДокументПроведен    = ДанныеЗадачи.ДокументПроведен;
		
		СуммаДокумента = 0;
		
		ЕстьСвойствоСуммаДокумента = ДанныеЗадачи.Свойство("СуммаДокумента", СуммаДокумента);
		
		Если ЕстьСвойствоСуммаДокумента Тогда
			ЗаписьНабора.СуммаДокумента      = СуммаДокумента;
		КонецЕсли;
		
		ЗаписьНабора.Комментарий         = ДанныеЗадачи.Комментарий;
		ЗаписьНабора.СтатусОшибки        = ДанныеЗадачи.СтатусОшибки;
		ЗаписьНабора.ЗаписьЗаблокирована = ДанныеЗадачи.ЗаписьЗаблокирована;
		ЗаписьНабора.ЗаписьОбработана    = ДанныеЗадачи.ЗаписьОбработана;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры
	
#КонецОбласти