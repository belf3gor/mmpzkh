
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды.
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Функция осуществляет подключение устройства.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	НовыйСтандарт = Ложь;
	
	ВыходныеПараметры = Новый Массив();
	ПараметрыПодключения.Вставить("ИДУстройства", "");
	
	ТипОборудованияИспользуемый= "";
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
		ТипОборудованияИспользуемый = ПараметрыПодключения.ТипОборудования;
		// Предопределенный параметр с указанием типа драйвера.
		Попытка
			ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудованияИспользуемый) 
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка обращения к драйверу.'"));
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = МенеджерОборудованияКлиентПовтИсп.РевизияИнтерфейсаДрайверов();
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	Попытка
		// Получаем ревизию интерфейса драйвера.
		РевизияИнтерфейса = ОбъектДрайвера.ПолучитьРевизиюИнтерфейса();
		НовыйСтандарт = Истина;
		// Получаем описание драйвера.
		ОписаниеДрайвера = "";
		ОбъектДрайвера.ПолучитьОписание(ОписаниеДрайвера);
		
		ОписаниеДрайвераПараметры = МенеджерОборудованияВызовСервера.ПолучитьОписаниеДрайвера(ОписаниеДрайвера);
		НаименованиеДрайвера      = ОписаниеДрайвераПараметры.НаименованиеДрайвера;
		ОписаниеДрайвера          = ОписаниеДрайвераПараметры.ОписаниеДрайвера;
		ТипОборудования           = ОписаниеДрайвераПараметры.ТипОборудования;
		ИнтеграционныйКомпонент   = ОписаниеДрайвераПараметры.ИнтеграционныйКомпонент;
		ОсновнойДрайверУстановлен = ОписаниеДрайвераПараметры.ОсновнойДрайверУстановлен;
		URLЗагрузкиДрайвера       = ОписаниеДрайвераПараметры.URLЗагрузкиДрайвера;
	Исключение
		// Используется стандарт драйверов ниже 2.0
		НовыйСтандарт = Ложь;
	КонецПопытки;
	
	Если Не НовыйСтандарт Тогда
		Попытка
			// Получаем описание драйвера
			ОбъектДрайвера.ПолучитьОписание(НаименованиеДрайвера, ОписаниеДрайвера, ТипОборудования, РевизияИнтерфейса, 
											ИнтеграционныйКомпонент, ОсновнойДрайверУстановлен, URLЗагрузкиДрайвера);
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьОписание>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	ПараметрыПодключения.Вставить("РевизияИнтерфейса", РевизияИнтерфейса);
	
	Если ТипОборудованияИспользуемый = "ККТ" И РевизияИнтерфейса < 2002 Тогда  
		СообщениеПользователю = НСтр("ru='Используется стандарт подключения драйверов, поддерживающий формат фискальных документов версии 1.0.'") +
			Символы.ПС + НСтр("ru='Возможно некорректное формирование чеков. Необходимо обновить драйвер ККТ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю); 
	КонецЕсли;
		
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.Подключить(ПараметрыПодключения.ИДУстройства);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.Подключить>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если НЕ Ответ Тогда
		Результат = Ложь;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
	Иначе
		
		Если ТипОборудованияИспользуемый = "ПринтерЧеков" 
				Или ТипОборудованияИспользуемый = "ФискальныйРегистратор" 
				Или ТипОборудованияИспользуемый = "ККТ" Тогда
			ВремВыходныеПараметры = Новый Массив();
			Если ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВремВыходныеПараметры) Тогда
				ВремШиринаСтроки = ВремВыходныеПараметры[0];
				ШиринаСтроки = ?(ВремШиринаСтроки <> Неопределено И ВремШиринаСтроки > 0, ВремШиринаСтроки, 32);
			КонецЕсли;
			ПараметрыПодключения.Вставить("ШиринаСтроки", ШиринаСтроки);
		ИначеЕсли ТипОборудованияИспользуемый = "ЭквайринговыйТерминал" Тогда
			ПараметрыПодключения.Вставить("КодОригинальнойТранзакции", Неопределено);
			ПараметрыПодключения.Вставить("ТипТранзакции", "");
		ИначеЕсли ТипОборудованияИспользуемый = "СканерШтрихкода" Тогда
			ВыходныеПараметры.Добавить(Строка(ПараметрыПодключения.ИДУстройства));
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("Штрихкод");
			ВыходныеПараметры[1].Добавить("Barcode");
			ВыходныеПараметры[1].Добавить("ШтрихкодBase64");
			ВыходныеПараметры[1].Добавить("BarcodeBase64");
		ИначеЕсли ТипОборудованияИспользуемый = "СчитывательМагнитныхКарт" Тогда
			ВыходныеПараметры.Добавить(Строка(ПараметрыПодключения.ИДУстройства));
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("ДанныеКарты");
			ВыходныеПараметры[1].Добавить("TracksData");
			ВыходныеПараметры[1].Добавить("ДанныеКартыBase64");
			ВыходныеПараметры[1].Добавить("TrackDataBase64");
		ИначеЕсли ТипОборудованияИспользуемый = "СчитывательRFID" Тогда
			ВыходныеПараметры.Добавить(Строка(ПараметрыПодключения.ИДУстройства));
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("RFID");
			ВыходныеПараметры[1].Добавить("RFID");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	ОбъектДрайвера.Отключить(ПараметрыПодключения.ИДУстройства);
	
	Возврат Результат;
	
КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ИначеЕсли Команда = "ВыполнитьДополнительноеДействие" ИЛИ Команда = "DoAdditionalAction" Тогда
		ИмяДействия = ВходныеПараметры[0];
		Результат = ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры);
		
	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение описание драйвера.
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда
		Результат = ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С УСТРОЙСТВАМИ ВВОДА ДАННЫХ
	
	// Обработка события от устройства.
	ИначеЕсли Команда = "ОбработатьСобытие" Тогда
		Событие = ВходныеПараметры[0];
		Данные  = ВходныеПараметры[1];
		Результат = ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры);
		
	// Завершение обработки события от устройства.
	ИначеЕсли Команда = "ЗавершитьОбработкуСобытия" Тогда
		Результат = ЗавершитьОбработкуСобытия(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ УСТРОЙСТВАМИ 
	
	// Открытие денежного ящика
	ИначеЕсли Команда = "OpenCashDrawer" ИЛИ Команда = "ОткрытьДенежныйЯщик" Тогда
		Результат = ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение ширины строки в символах
	ИначеЕсли Команда = "GetLineLength" ИЛИ Команда = "ПолучитьШиринуСтроки" Тогда
		Результат = ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Открыть смену
	ИначеЕсли Команда = "OpenShift" ИЛИ Команда = "ОткрытьСмену" Тогда
		Результат = ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Закрыть кассовую смену
	ИначеЕсли Команда = "CloseShift" ИЛИ Команда = "ЗакрытьСмену" Тогда
		Результат = ЗакрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Отчет о текущем состоянии расчетов
	ИначеЕсли Команда = "ReportCurrentStatusOfSettlements" ИЛИ Команда = "ОтчетОТекущемСостоянииРасчетов" Тогда
		Результат = ОтчетОТекущемСостоянииРасчетов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Сформировать отчет без гашения
	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда
		Результат = ОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать чека внесения/выемки.
	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда
		Результат = Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Фискализация чека.
	ИначеЕсли Команда = "CheckFiscalization" ИЛИ Команда = "ФискализацияЧека" Тогда
		Результат = ФискализацияЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Фискализация чека.
	ИначеЕсли Команда = "CheckFiscalizationPacket" ИЛИ Команда = "ФискализацияЧекаПакетом" Тогда
		Результат = ФискализацияЧекаПакетом(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать чека коррекции
	ИначеЕсли Команда = "PrintReceiptCorrection" ИЛИ Команда = "ПечатьЧекаКоррекции" Тогда
		Результат = ПечатьЧекаКоррекции(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать слип чека
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда
		СтрокаТекста = ВходныеПараметры[0];
		Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры);
		
	// Печать слип чека
	ИначеЕсли Команда = "PrintTextDocument" ИЛИ Команда = "ПечатьТекстовогоДокумента"  Тогда
		Результат = НачатьПечатьТекстовыхДокументов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Получить текущее состояние 
	ИначеЕсли Команда = "GetCurrentStatus" ИЛИ Команда = "ПолучитьТекущееСостояние" Тогда
		Результат = ПолучитьТекущееСостояние(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Получить параметры ККТ
	ИначеЕсли Команда = "GetDataKKT" ИЛИ Команда = "ПолучитьПараметрыККТ" Тогда
		Результат = ПолучитьПараметрыККТ(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Отчет о текущем состоянии расчетов
	ИначеЕсли Команда = "OperationFN" ИЛИ Команда = "ОперацияФН" Тогда
		Результат = ОперацияФискальногоНакопителя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВходныеПараметры, ВыходныеПараметры);

	// Открыть чек
	ИначеЕсли Команда = "OpenCheck" ИЛИ Команда = "ОткрытьЧек"  Тогда
		ЧекВозврата   = ВходныеПараметры[0];
		ФискальныйЧек = ВходныеПараметры[1];
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры);
		
	// Отменить открытый чек
	ИначеЕсли Команда = "CancelCheck" ИЛИ Команда = "ОтменитьЧек"  Тогда
		Результат = ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	//  Аннулирование чека
	ИначеЕсли Команда = "AnnulCheck" ИЛИ Команда = "АннулироватьЧек" Тогда
		ТипЧека       = ВходныеПараметры[0];
		ФискальныйЧек = ВходныеПараметры[1];
		Результат = АннулироватьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ЭКВАЙРИНГОВЫМИ ТЕРМИНАЛАМИ
	
	// Функция возвращает, будет ли печать слип чеков на терминале.
	ИначеЕсли Команда = "PrintSlipOnTerminal" ИЛИ Команда = "ПечатьКвитанцийНаТерминале" Тогда
		Результат = ПечатьКвитанцийНаТерминале(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Оплата платежной картой
	ИначеЕсли Команда = "AuthorizeSales" ИЛИ Команда = "ОплатитьПлатежнойКартой" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];
		НомерЧека  = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		Результат = ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                            Сумма,  НомерКарты, НомерЧека, ВыходныеПараметры);
	// Возврат платежа
	ИначеЕсли Команда = "AuthorizeRefund" ИЛИ Команда = "ВернутьПлатежПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НомерЧека      = ?(ВходныеПараметры.Количество() > 3, ВходныеПараметры[3], "");
		Результат = ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                          Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	// Отмена платежа
	ИначеЕсли Команда = "AuthorizeVoid" ИЛИ Команда = "ОтменитьПлатежПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		СсылочныйНомер = ВходныеПараметры[1];
		НомерЧека      = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		Результат = ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                           Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	// Сверка итогов по картам
	ИначеЕсли Команда = "Settlement" ИЛИ Команда = "ИтогиДняПоКартам" Тогда
		Результат = ИтогиДняПоКартам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Аварийная отмена платежа
	ИначеЕсли Команда = "EmergencyVoid" ИЛИ Команда = "АварийнаяОтменаОперации" Тогда
		Результат = АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Преавторизация платежа
	ИначеЕсли Команда = "AuthorizePreSales" ИЛИ Команда = "ПреавторизацияПоПлатежнойКарте" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];
		НомерЧека  = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		Результат = ПреавторизоватьПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                           Сумма, НомерКарты, НомерЧека, ВыходныеПараметры);
		
	// Отмена преавторизации платежа.
	ИначеЕсли Команда = "AuthorizeVoidPreSales" ИЛИ Команда = "ОтменитьПреавторизациюПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НомерЧека      = ?(ВходныеПараметры.Количество() > 3, ВходныеПараметры[3], "");
		Результат = ОтменитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                                   Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	
	// Завершение преавторизации платежа.
	ИначеЕсли Команда = "AuthorizeCompletion" ИЛИ Команда = "ЗавершитьПреавторизациюПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НомерЧека      = ?(ВходныеПараметры.Количество() > 3, ВходныеПараметры[3], "");
		Результат = ЗавершитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
															Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ТЕРМИНАЛАМИ СБОРА ДАННЫМИ
	
	// Выгрузка таблицы в терминал сбора данных.
	ИначеЕсли Команда =  "UploadDirectory" ИЛИ Команда = "ВыгрузитьТаблицу" Тогда
		ТаблицаВыгрузки = ВходныеПараметры[1];
		ПолнаяВыгрузка = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], Истина);
#Если ВебКлиент Тогда
		Результат = ВыгрузитьТаблицуПакетно(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ПолнаяВыгрузка, ВыходныеПараметры);
#Иначе
		Результат = ВыгрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ПолнаяВыгрузка, ВыходныеПараметры);
#КонецЕсли
	// Загрузка таблицы из терминала сбора данных.
	ИначеЕсли Команда = "DownloadDocument" ИЛИ Команда = "ЗагрузитьТаблицу" Тогда
		Результат = ЗагрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Очищает загруженную ранее таблицу в терминале сбора данных.
	ИначеЕсли Команда = "ClearTable" ИЛИ Команда = "ОчиститьТаблицу" Тогда
		Результат = ОчиститьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ДИСПЛЕЯМИ ПОКУПАТЕЛЯ
	
	// Вывод строк на дисплей
	ИначеЕсли Команда = "DisplayText" ИЛИ Команда = "ВывестиСтрокуНаДисплейПокупателя" Тогда
		СтрокаТекста = ВходныеПараметры[0];
		Результат = ВывестиСтрокуНаДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры);
		
	// Очистка дисплея
	ИначеЕсли Команда = "ClearText" ИЛИ Команда = "ОчиститьДисплейПокупателя" Тогда
		Результат = ОчиститьДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получить параметры вывода
	ИначеЕсли Команда = "GetOutputOptions" ИЛИ Команда = "ПолучитьПараметрыВывода" Тогда
		Результат = ПолучитьПараметрыВывода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ЭЛЕКТРОННЫМИ ВЕСАМИ
	
	// Получить вес 
	ИначеЕсли Команда = "GetWeight" ИЛИ Команда = "ПолучитьВес" Тогда
		Результат = ПолучитьВес(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Установить вес тары 
	ИначеЕсли Команда = "Calibrate" ИЛИ Команда = "Тарировать" Тогда
		ВесТары = ?(ТипЗнч(ВходныеПараметры) = Тип("Массив") И ВходныеПараметры.Количество() > 0, ВходныеПараметры[0], 0);
		Результат = Тарировать(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ВесТары);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ВЕСАМИ C ПЕЧАТЬЮ ЭТИКЕТОК
	
	// Выгрузка товаров в весы с печатью этикеток.
	ИначеЕсли Команда = "UploadGoods" ИЛИ Команда = "ВыгрузитьТовары" Тогда
		ТаблицаВыгрузки   = ВходныеПараметры[0];
		ЧастичнаяВыгрузка = ВходныеПараметры[1];
		Результат = ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ЧастичнаяВыгрузка, ВыходныеПараметры);
		
	// Очистить базу весов с печатью этикеток.
	ИначеЕсли Команда = "ClearBase" ИЛИ Команда = "ОчиститьБазу" Тогда
		Результат = ОчиститьТоварыВВесах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ПРИНТЕРАМИ ЭТИКЕТОК
		
	// Функция осуществляет печать этикеток на принтере этикеток.
	ИначеЕсли Команда = "PrintLabels" ИЛИ Команда = "ПечатьЭтикеток" Тогда
		ШаблонЭтикетки = ВходныеПараметры[0];
		МассивЭтикеток = ВходныеПараметры[1];
		Результат = ПечатьЭтикеток(ОбъектДрайвера, Параметры, ПараметрыПодключения, ШаблонЭтикетки, МассивЭтикеток, ВыходныеПараметры);
	
	// Функция осуществляет инициализация принтера этикеток
	ИначеЕсли Команда = "InitializePrinter" ИЛИ Команда = "ИнициализацияПринтера" Тогда
		Результат = ИнициализацияПринтера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С RFID
	
	// Открыть сессию RFID считывателя
	ИначеЕсли Команда = "OpenSessionRFID" ИЛИ Команда = "ОткрытьСессиюRFID" Тогда
		Результат = ОткрытьСессиюRFID(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Открыть сессию RFID считывателя
	ИначеЕсли Команда = "CloseSessionRFID" ИЛИ Команда = "ЗакрытьСессиюRFID" Тогда
		Результат = ЗакрытьСессиюRFID(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Записать данные в метку RFID 
	ИначеЕсли Команда = "SaveDataTagRFID" ИЛИ Команда = "ЗаписатьДанныеВМеткуRFID " Тогда
		ПараметрыЗаписи = ВходныеПараметры[0];
		Таймаут = ?(ВходныеПараметры.Количество() > 1, ВходныеПараметры[1], 0);
		Результат = ЗаписатьДанныеВМеткуRFID(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ПараметрыЗаписи, Таймаут);
		
	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Размер пакета в элементах передаваемой информации в драйвер.
//
Функция РазмерПакетаПоУмолчанию() Экспорт
	
	РазмерПакета = 200;
	Возврат РазмерПакета;
	
КонецФункции
 
#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляУстройствВводаДанных

// Функция осуществляет обработку внешних событий подключаемого оборудования.
//
Функция ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	
	Если Событие = "Штрихкод" Или Событие = "Barcode" Тогда
		
		Штрихкод = СокрЛП(Данные);
		ВыходныеПараметры.Добавить("ScanData");
		ВыходныеПараметры.Добавить(Новый Массив());
		ВыходныеПараметры[1].Добавить(Штрихкод);
		ВыходныеПараметры[1].Добавить(Новый Массив());
		ВыходныеПараметры[1][1].Добавить(Данные);
		ВыходныеПараметры[1][1].Добавить(Штрихкод);
		ВыходныеПараметры[1][1].Добавить(0);
		Результат = Истина;
		
	ИначеЕсли Событие = "ШтрихкодBase64" Или Событие = "BarcodeBase64" Тогда
		
		Штрихкод = СокрЛП(Данные);
		ВыходныеПараметры.Добавить("ScanDataBase64");
		ВыходныеПараметры.Добавить(Новый Массив());
		ВыходныеПараметры[1].Добавить(Штрихкод);
		ВыходныеПараметры[1].Добавить(Новый Массив());
		ВыходныеПараметры[1][1].Добавить(Данные);
		ВыходныеПараметры[1][1].Добавить(Штрихкод);
		ВыходныеПараметры[1][1].Добавить(0);
		Результат = Истина;
	
	ИначеЕсли Событие = "RFID" Тогда
		
		ТаблицаМетокXML = "";
		Ответ = ПолучитьДанныеМетокRFID(ОбъектДрайвера, ПараметрыПодключения, Данные, ТаблицаМетокXML, ВыходныеПараметры);
		Если Ответ И НЕ ПустаяСтрока(ТаблицаМетокXML) Тогда
			ТаблицаМетокXML = СокрЛП(ТаблицаМетокXML); 
			ТаблицаМеток = МенеджерОборудованияВызовСервера.МеткиRFID(ТаблицаМетокXML);
			ВыходныеПараметры.Добавить("RFID");
			ВыходныеПараметры.Добавить(ТаблицаМеток);
			Результат = Истина;
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
	ИначеЕсли Событие = "ДанныеКарты" Или Событие = "TracksData" Тогда
		
		КодКарты  = Данные;
		ПозицияПрефикса = 0;
		ПозицияСуффикса = 0;
		времКодКарты    = "";
		ДанныеКарты     = "";
		ПозицияДляЧтения = 1;
		
		ДанныеДорожек = Новый Массив();
		Если Параметры.Свойство("ПараметрыДорожек") И Параметры.ПараметрыДорожек <> Неопределено Тогда
			Для НомерДорожки = 1 По 3 Цикл
				ДанныеДорожек.Добавить("");
				ТекущаяДорожка = Параметры.ПараметрыДорожек[НомерДорожки - 1];
				Если ТекущаяДорожка.Использовать Тогда
					ПрефиксДрайвера = Символ(ТекущаяДорожка.Префикс);
					СуффиксДрайвера = Символ(ТекущаяДорожка.Суффикс);
					Если ПозицияДляЧтения < СтрДлина(КодКарты) Тогда
						ДанныеКарты = Сред(КодКарты, ПозицияДляЧтения);
						ПозицияПрефикса = Найти(ДанныеКарты, ПрефиксДрайвера);
						ПозицияСуффикса = Найти(ДанныеКарты, СуффиксДрайвера);
						времПозицияПрефикса = ?(ПозицияПрефикса = 0, 1, ПозицияПрефикса + СтрДлина(ПрефиксДрайвера));
						времДлинаДоСуффикса = ?(ПозицияСуффикса = 0, СтрДлина(ДанныеКарты) + 1 - времПозицияПрефикса, ПозицияСуффикса - времПозицияПрефикса);
						времКодКарты = времКодКарты + Сред(ДанныеКарты, времПозицияПрефикса, времДлинаДоСуффикса);
						ДанныеДорожек[НомерДорожки - 1] = Сред(ДанныеКарты, времПозицияПрефикса, времДлинаДоСуффикса);
						ПозицияДляЧтения = ПозицияДляЧтения + ?(ПозицияСуффикса = 0, СтрДлина(ДанныеКарты), ПозицияСуффикса + СтрДлина(СуффиксДрайвера) - 1);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		КодКарты = времКодКарты;
		
		ВыходныеПараметры.Добавить("TracksData");
		ВыходныеПараметры.Добавить(Новый Массив());
		ВыходныеПараметры[1].Добавить(КодКарты);
		ВыходныеПараметры[1].Добавить(Новый Массив);
		ВыходныеПараметры[1][1].Добавить(Сред(Данные,2));
		ВыходныеПараметры[1][1].Добавить(ДанныеДорожек);
		ВыходныеПараметры[1][1].Добавить(0);
		Если Параметры.Свойство("ПараметрыДорожек") И Параметры.ПараметрыДорожек <> Неопределено Тогда
			ВыходныеПараметры[1][1].Добавить(МенеджерОборудованияВызовСервера.РасшифроватьКодМагнитнойКарты(ДанныеДорожек, Параметры.ПараметрыДорожек));
		Иначе
			ВыходныеПараметры[1][1].Добавить(Неопределено);
		КонецЕсли;
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Процедура вызывается, когда система готова принять следующее событие от устройства.
//
Функция ЗавершитьОбработкуСобытия(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляФискальныхУстройств

// Функция осуществляет открытие денежного ящика.
//
Функция ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ОткрытьДенежныйЯщик(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьДенежныйЯщик>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция получает ширину строки в символах.
//  
Функция ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт 
	
	Результат = Истина;
	ШиринаСтроки = 0;
	 
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьШиринуСтроки(ПараметрыПодключения.ИДУстройства, ШиринаСтроки);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Добавить(ШиринаСтроки);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьШиринуСтроки>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет открытие смены.
//
Функция ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	НомерСмены     = 0;
	НомерДокумента = 0;
	ФискальныеДанныеСтруктура = Неопределено;
	ПараметрыСостояния = "";
	ОписаниеТеста = "";
	АктивированДемоРежим = "";
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если НЕ ПустаяСтрока(ВходныеПараметры.КассирИНН) Тогда
		ОписаниеОшибки = "";
		Если НЕ МенеджерОборудованияКлиентСервер.ИННСоответствуетТребованиям(ВходныеПараметры.КассирИНН, Ложь, ОписаниеОшибки) Тогда
			Сообщение = НСтр("ru = 'ИНН кассира некорректен (%Ошибка%)'");
			ОписаниеОшибки = СтрЗаменить(Сообщение, "%Ошибка%", ОписаниеОшибки);
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОписаниеОшибки);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		
		РезультатТеста = ОбъектДрайвера.ТестУстройства(ОписаниеТеста, АктивированДемоРежим);
		Если РезультатТеста И Не ПустаяСтрока(АктивированДемоРежим) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(АктивированДемоРежим);
		КонецЕсли;
		
		// Получить параметры ККТ при открытии смены.
		ПараметрыККТ = "";
		Попытка
			Результат = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ПараметрыККТ);
			Если Результат Тогда
				ПараметрыККТ = МенеджерОборудованияВызовСервера.ПараметрыИзXMLПакетаККТ(ПараметрыККТ, Параметры.Идентификатор, РевизияИнтерфейса);
			КонецЕсли;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыККТ>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		
		Если ПараметрыПодключения.ПараметрыРегистрации.Свойство("ВерсияФФДККТ") Тогда
			// Необходимо проверить что в прикладной конфигурации поддерживается ФФД по которому работает драйвер.
			ВерсияФФДККТ = ПараметрыПодключения.ПараметрыРегистрации.ВерсияФФДККТ;
			Если Не ПустаяСтрока(ВерсияФФДККТ) Тогда
				ФорматыФФД = МенеджерОборудованияКлиентПовтИсп.ПолучитьПоддерживаемыйФорматыФФД();
				Если ФорматыФФД.НайтиПоЗначению(ВерсияФФДККТ) = Неопределено Тогда
					Результат = Ложь;
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Формат фискальных данных, используемый в ККТ не поддерживается конфигурацией.'") + Символы.ПС + ОписаниеОшибки());
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры, РевизияИнтерфейса);
		Попытка
			Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Результат = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
				Если Результат Тогда
					ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
					НомерСмены     = ФискальныеДанныеСтруктура.НомерСменыККТ;
					НомерДокумента = ФискальныеДанныеСтруктура.НомерЧекаККТ;
				КонецЕсли;
			Иначе
				Если РевизияИнтерфейса >= 2002 Тогда // Версия стандарта 2.2 (ОФД 1.0.5)
					Результат = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния, НомерСмены, НомерДокумента);
					Если Результат Тогда
						ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
						ФискальныеДанныеСтруктура.СтатусСмены   = 2; // Открыта
						ФискальныеДанныеСтруктура.НомерСменыККТ = НомерСмены;
					КонецЕсли;
				Иначе
					Кассир = ?(ВходныеПараметры <> Неопределено И ВходныеПараметры.Свойство("Кассир"), ВходныеПараметры.Кассир, НСтр("ru='Администратор'"));
					Результат = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства, Кассир, НомерСмены, НомерДокумента);
					Если Результат Тогда
						ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
						ФискальныеДанныеСтруктура.СтатусСмены   = 2; // Открыта
						ФискальныеДанныеСтруктура.НомерСменыККТ = НомерСмены;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьСмену>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
			
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		
		Попытка
			Результат = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства);
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьСмену>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'");
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 1, Неопределено, ТекстЧека);
		Возврат ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры)
		
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.'"));
		Результат = Ложь;  
		Возврат Результат;
	КонецЕсли;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
		ВыходныеПараметры.Добавить(ПараметрыСостояния);
		ВыходныеПараметры.Добавить(ПараметрыККТ);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет закрыть смены.
//
Функция ЗакрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	НомерСмены     = 0;
	НомерДокумента = 0;
	ФискальныеДанныеСтруктура = Неопределено;
	ПараметрыСостояния = "";
	РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если НЕ ПустаяСтрока(ВходныеПараметры.КассирИНН) Тогда
		ОписаниеОшибки = "";
		Если НЕ МенеджерОборудованияКлиентСервер.ИННСоответствуетТребованиям(ВходныеПараметры.КассирИНН, Ложь, ОписаниеОшибки) Тогда
			Сообщение = НСтр("ru = 'ИНН кассира некорректен (%Ошибка%)'");
			ОписаниеОшибки = СтрЗаменить(Сообщение, "%Ошибка%", ОписаниеОшибки);
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОписаниеОшибки);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		
		ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры, РевизияИнтерфейса);
		Попытка
			Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Результат = ОбъектДрайвера.ЗакрытьСмену(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
				Если Результат Тогда
					ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
					НомерСмены     = ФискальныеДанныеСтруктура.НомерСменыККТ;
					НомерДокумента = ФискальныеДанныеСтруктура.НомерЧекаККТ;
				КонецЕсли;
			Иначе
				Если РевизияИнтерфейса >= 2002 Тогда // Версия стандарта 2.2 (ОФД 1.0.5)
					Результат = ОбъектДрайвера.ЗакрытьСмену(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния, НомерСмены, НомерДокумента);
					Если Результат Тогда
						ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния);
						ФискальныеДанныеСтруктура.НомерСменыККТ = НомерСмены;
						ФискальныеДанныеСтруктура.СтатусСмены   = 1; // Открыта
					КонецЕсли;
				Иначе
					Кассир = ?(ВходныеПараметры <> Неопределено И ВходныеПараметры.Свойство("Кассир"), ВходныеПараметры.Кассир, НСтр("ru='Администратор'"));
					Результат = ОбъектДрайвера.ЗакрытьСмену(ПараметрыПодключения.ИДУстройства, Кассир, НомерСмены, НомерДокумента);
					Если Результат Тогда
						ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния);
						ФискальныеДанныеСтруктура.НомерСменыККТ = НомерСмены;
						ФискальныеДанныеСтруктура.СтатусСмены   = 1; // Открыта
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьСмену>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
			
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		
		Попытка
			Результат = ОбъектДрайвера.НапечататьОтчетСГашением(ПараметрыПодключения.ИДУстройства);
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьОтчетСГашением>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'");
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 5, Неопределено, ТекстЧека);
		Возврат ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры)
		
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.'"));
		Результат = Ложь;  
		Возврат Результат;
	КонецЕсли;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(1); // 1 - Закрыта - Состояние смены  
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
		ВыходныеПараметры.Добавить(ПараметрыСостояния);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет формирование отчета о текущем состоянии расчетов.
//
Функция ОтчетОТекущемСостоянииРасчетов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	НомерСмены     = 0;
	НомерДокумента = 0;
	ФискальныеДанныеСтруктура = Неопределено;
	ПараметрыСостояния = "";
	
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		
		Попытка
			РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
			ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры, РевизияИнтерфейса);
			
			Если ПараметрыПодключения.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
				Результат = ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
				Если Результат Тогда
					ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
					НомерСмены     = ФискальныеДанныеСтруктура.НомерСменыККТ;
					НомерДокумента = ФискальныеДанныеСтруктура.НомерЧекаККТ;
				КонецЕсли;
			Иначе
				Результат = ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов(ПараметрыПодключения.ИДУстройства);
			КонецЕсли;
			
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		Попытка
			Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства);
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьОтчетБезГашения>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'");
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 4, Неопределено, ТекстЧека);
		Возврат ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры)
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.'"));
		Результат = Ложь;  
		Возврат Результат;
	КонецЕсли;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
		ВыходныеПараметры.Добавить(ПараметрыСостояния);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет формирование отчет без гашения.
//
Функция ОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	НомерСмены     = 0;
	НомерДокумента = 0;
	
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		
		Попытка
			Если ПараметрыПодключения.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
				ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
				Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства, ПараметрыОперации);
			Иначе
				Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства);
			КонецЕсли;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьОтчетБезГашения>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		
		Попытка
			Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства);
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьОтчетБезГашения>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		
	Иначе 
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'");
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 4, Неопределено, ТекстЧека);
		Возврат ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры)
	КонецЕсли;
		
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция осуществляет внесение или выемку суммы.
//
Функция Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	ДатаСеанса = МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса();
	НомерСмены     = 0;
	НомерДокумента = 0;
	ТипИнкассации  = ?(ВходныеПараметры.Свойство("ТипИнкассации"), ВходныеПараметры.ТипИнкассации, 0);  
	Сумма          = ?(ВходныеПараметры.Свойство("Сумма"), ВходныеПараметры.Сумма, 0);  
	
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Или ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		
		ПараметрыФискализации = МенеджерОборудованияВызовСервера.ПодготовитьДанныеИнкасации(ВходныеПараметры, ПараметрыПодключения);
		Если НЕ ПараметрыФискализации.Результат Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ПараметрыФискализации.ТекстОшибки);
			Результат = Ложь;  
			Возврат Результат;
		КонецЕсли;
		
		Попытка
			Если ПараметрыПодключения.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
				Результат = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.ДанныеЧекаXML,
					?(ТипИнкассации = 1, Сумма, -Сумма));
			Иначе
				Результат = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства, ?(ТипИнкассации = 1, Сумма, -Сумма));
			КонецЕсли;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
		ПараметрыФискализации.ДатаВремяЧека = ДатаСеанса;
		МенеджерОборудованияВызовСервера.ОбработатьДанныеИнкасации(ПараметрыФискализации);
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'") + Символы.ПС;
		ТекстЧека = ТекстЧека + НСтр("ru='СУММА ='") + Символы.НПП + Формат(Сумма, "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0");	
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, ?(ТипИнкассации = 1, 2, 3), Неопределено, ТекстЧека);
		Возврат ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры)
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.'"));
		Результат = Ложь;  
		Возврат Результат;
	КонецЕсли;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(ДатаСеанса);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции    

// Функция осуществляет фискализацию чека пакетом.
//
Функция ФискализацияЧекаПакетом(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	Результат = Ложь;
	
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Тогда 
		
		РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
		ДанныеЧека = ВходныеПараметры;
		Электронно = Ложь;
		НомерСмены = 0;
		НомерЧека  = 0;
		ФискальныйПризнак  = "";
		АдресСайтаПроверки = "";
		ПараметрыДокумента = "";
		
		Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
			Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, Электронно, ДанныеЧека, ПараметрыДокумента); 
			Если Результат Тогда  
				РезультатФискализации = МенеджерОборудованияКлиентСервер.ПараметрыФискализацииЧека();
				РезультатФискализации.РезультатОперацииXML = ПараметрыДокумента;
				МенеджерОборудованияВызовСервера.ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(РезультатФискализации);
				НомерСмены = РезультатФискализации.НомерСменыККТ;
				НомерЧека  = РезультатФискализации.НомерЧекаККТ;
				ДатаСеанса = РезультатФискализации.ДатаВремяЧека;
				ФискальныйПризнак  = РезультатФискализации.ФискальныйПризнак;
				АдресСайтаПроверки = РезультатФискализации.АдресСайтаПроверки;
			КонецЕсли;
		Иначе
			Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, Электронно, 
				ДанныеЧека, НомерЧека, НомерСмены, ФискальныйПризнак, АдресСайтаПроверки); 
			КонецЕсли;
			
		Если Результат Тогда  
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерСмены);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
			ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
			ВыходныеПараметры.Добавить(ФискальныйПризнак);
			ВыходныеПараметры.Добавить(АдресСайтаПроверки);
			ВыходныеПараметры.Добавить(Неопределено);
			ВыходныеПараметры.Добавить(ДанныеЧека);
		Иначе
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		КонецЕсли;
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.'"));
		Результат = Ложь;  
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Функция осуществляет фискализацию чека.
//
Функция ФискализацияЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	ДатаСеанса = МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса();
	
	Если ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		
		Возврат МенеджерОборудованияКлиент.ПечатьЧекаПоШаблону(ПодключаемоеОборудованиеУниверсальныйДрайверКлиент,
			ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
			
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
	
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстДокумента = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 0, ВходныеПараметры);
		
		Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстДокумента, ВыходныеПараметры);
		Если Результат Тогда
			
			НомерЧека = ?(ВходныеПараметры <> Неопределено, ВходныеПараметры.НомерЧека, 1);
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Неопределено);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
			ВыходныеПараметры.Добавить(ДатаСеанса);
			ВыходныеПараметры.Добавить(Неопределено);
			ВыходныеПараметры.Добавить(Неопределено);
			ВыходныеПараметры.Добавить(Неопределено);
			ВыходныеПараметры.Добавить(Неопределено);
			ВыходныеПараметры.Добавить(Неопределено);
		КонецЕсли;
		
		Возврат Результат;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ККТ" Тогда 
		
		ПараметрыФискализации = МенеджерОборудованияВызовСервера.ПодготовитьДанныеФискализацииЧека(ВходныеПараметры, ПараметрыПодключения);
		Если НЕ ПараметрыФискализации.Результат Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ПараметрыФискализации.ТекстОшибки);
			Результат = Ложь;  
			Возврат Результат;
		КонецЕсли;
		
		 Если ПараметрыФискализации.СформироватьЧекКоррекции Тогда
			Если ПараметрыФискализации.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.РезультатОперацииXML);
			Иначе
				Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.НомерЧекаККТ, ПараметрыФискализации.НомерСменыККТ, 
					ПараметрыФискализации.ФискальныйПризнак, ПараметрыФискализации.АдресСайтаПроверки); 
			КонецЕсли;
			ПараметрыФискализации.ДатаВремяЧека = ДатаСеанса;
		Иначе
			Попытка
				Если ПараметрыФискализации.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
					Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.Электронно, ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.РезультатОперацииXML); 
				ИначеЕсли ПараметрыФискализации.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 и выше (ОФД 1.0.5)
					Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.Электронно, 
						ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.НомерЧекаККТ, ПараметрыФискализации.НомерСменыККТ, ПараметрыФискализации.ФискальныйПризнак, ПараметрыФискализации.АдресСайтаПроверки); 
				Иначе // Версия стандарта 2.1 (ОФД 1.0)
					Кассир = ?(ВходныеПараметры <> Неопределено И ВходныеПараметры.Свойство("Кассир"), ВходныеПараметры.Кассир, НСтр("ru='Администратор'"));
					Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, Кассир, ПараметрыФискализации.Электронно, 
						ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.НомерЧекаККТ, ПараметрыФискализации.НомерСменыККТ, ПараметрыФискализации.ФискальныйПризнак, ПараметрыФискализации.АдресСайтаПроверки); 
				КонецЕсли;
				ПараметрыФискализации.ДатаВремяЧека = ДатаСеанса;
			Исключение
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.СформироватьЧек>.'") + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		Если Результат Тогда  
			МенеджерОборудованияВызовСервера.ОбработатьДанныеФискализацииЧека(ПараметрыФискализации);
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(ПараметрыФискализации.НомерСменыККТ);
			ВыходныеПараметры.Добавить(ПараметрыФискализации.НомерЧекаККТ);
			ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
			ВыходныеПараметры.Добавить(ПараметрыФискализации.ДатаВремяЧека);
			ВыходныеПараметры.Добавить(ПараметрыФискализации.ФискальныйПризнак);
			ВыходныеПараметры.Добавить(ПараметрыФискализации.АдресСайтаПроверки);
			ВыходныеПараметры.Добавить(ПараметрыФискализации.РегистрационныйНомерККТ);
			ВыходныеПараметры.Добавить(ПараметрыФискализации.ДанныеЧекаXML);
			ВыходныеПараметры.Добавить(ПараметрыФискализации);
			Если (ПараметрыФискализации.Отправляет1СSMS Или ПараметрыФискализации.Отправляет1СEmail) Тогда
				ПокупательEmail = ?(ВходныеПараметры.Отправляет1СEmail, ВходныеПараметры.ПокупательEmail, Неопределено);
				ПокупательНомер = ?(ВходныеПараметры.Отправляет1СSMS  , ВходныеПараметры.ПокупательНомер, Неопределено);
				ВходныеПараметры.НомерСмены = ПараметрыФискализации.НомерСменыККТ;
				ВходныеПараметры.НомерЧека  = ПараметрыФискализации.НомерЧекаККТ;
				ВходныеПараметры.Вставить("ФискальныйПризнак"      , ПараметрыФискализации.ФискальныйПризнак);
				ВходныеПараметры.Вставить("АдресСайтаПроверки"     , ПараметрыФискализации.АдресСайтаПроверки);
				ВходныеПараметры.Вставить("РегистрационныйНомерККТ", ПараметрыФискализации.РегистрационныйНомерККТ);
				МенеджерОборудованияКлиентПереопределяемый.НачатьОтправкуЭлектронногоЧека(ВходныеПараметры, ПараметрыФискализации.ТекстСообщения, ПокупательEmail, ПокупательНомер);
			КонецЕсли
		Иначе
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		КонецЕсли;
		
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.'"));
		Результат = Ложь;  
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Осуществляет печать чека коррекции.
//
Функция ПечатьЧекаКоррекции(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;
	
	ДатаСеанса = МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса();
	
	Если НЕ ПараметрыПодключения.ТипОборудования = "ККТ" Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.'"));
		Результат = Ложь;  
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыФискализации = МенеджерОборудованияВызовСервера.ПодготовитьДанныеЧекаКоррекции(ВходныеПараметры, ПараметрыПодключения);
	Если НЕ ПараметрыФискализации.Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ТекстОшибки);
		Результат = Ложь;  
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Если ПараметрыФискализации.НеприменениеККТ Тогда // Сценарий 1 - непримененин ККТ.
 			Если ПараметрыФискализации.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.ДанныеЧекаXML,  ПараметрыФискализации.РезультатОперацииXML); 
			Иначе
				Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.НомерЧекаККТ, ПараметрыФискализации.НомерСменыККТ, 
					ПараметрыФискализации.ФискальныйПризнак, ПараметрыФискализации.АдресСайтаПроверки); 
				ПараметрыФискализации.ДатаВремяЧека = ДатаСеанса;
			КонецЕсли;
		Иначе  // Сценарий 2 - исправление нарушений применения ККТ.
			ПараметрыФискализацииСторно = ПараметрыФискализации.ЧекКоррекцииСторно;
			Если ПараметрыФискализации.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Если ПараметрыФискализации.ВерсияФФДККТ11 Тогда
					// Шаг 1 - Формируем чек ККТ с обратным признаком расчета.
					Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ПараметрыФискализацииСторно.ДанныеЧекаXML, ПараметрыФискализацииСторно.РезультатОперацииXML);
					// Шаг 2 - Формируем чек ККТ с корректными данными.
					Если Результат Тогда
						Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.РезультатОперацииXML);
					КонецЕсли;
				Иначе
					// Шаг 1 - Формируем чек ККТ с обратным признаком расчета.
					Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ПараметрыФискализацииСторно.Электронно, 
						ПараметрыФискализацииСторно.ДанныеЧекаXML, ПараметрыФискализацииСторно.РезультатОперацииXML);
					// Шаг 2 - Формируем чек ККТ с корректными данными.
					Если Результат Тогда
						Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ПараметрыФискализацииСторно.Электронно,
							ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.РезультатОперацииXML);
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Шаг 1 - Формируем чек ККТ с обратным признаком расчета.
				Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ПараметрыФискализацииСторно.Электронно, 
					ПараметрыФискализацииСторно.ДанныеЧекаXML, ПараметрыФискализацииСторно.НомерЧекаККТ, ПараметрыФискализацииСторно.НомерСменыККТ, ПараметрыФискализацииСторно.ФискальныйПризнак, ПараметрыФискализацииСторно.АдресСайтаПроверки); 
				ПараметрыФискализацииСторно.ДатаВремяЧека = ДатаСеанса;
				// Шаг 2 - Формируем чек ККТ с корректными данными.
				Если Результат Тогда
					Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.Электронно, 
						ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.НомерЧекаККТ, ПараметрыФискализации.НомерСменыККТ, ПараметрыФискализации.ФискальныйПризнак, ПараметрыФискализации.АдресСайтаПроверки); 
					ПараметрыФискализации.ДатаВремяЧека = ДатаСеанса;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка формирования коррекции на ККТ.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Если Результат Тогда  
		МенеджерОборудованияВызовСервера.ОбработатьДанныеФискализацииЧекаКоррекции(ПараметрыФискализации);
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(ПараметрыФискализации.НомерСменыККТ);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.НомерЧекаККТ);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ДатаВремяЧека);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ФискальныйПризнак);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.АдресСайтаПроверки);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.РегистрационныйНомерККТ);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ДанныеЧекаXML);
		ВыходныеПараметры.Добавить(ПараметрыФискализации);
	Иначе
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;  
	
КонецФункции

// Осуществляет печать текстового документа.
//
Функция НачатьПечатьТекстовыхДокументов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;  
	СтрокаТекста = "";
	РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если ПараметрыПодключения.ТипОборудования = "ККТ" Или ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ОбщиеПараметры = ВходныеПараметры[0];
		
		ДанныеЧека = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляТекстовогоДокумента(ОбщиеПараметры, ВыходныеПараметры, ШиринаСтроки, РевизияИнтерфейса);
		Попытка
			Для Каждого ТекстПечати Из ДанныеЧека Цикл
				Результат = ОбъектДрайвера.НапечататьТекстовыйДокумент(ПараметрыПодключения.ИДУстройства, ТекстПечати);
				Если НЕ Результат Тогда
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить("");
					ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
					Возврат Результат;
				Иначе
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
				КонецЕсли;
			КонецЦикла;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьТекстовыйДокумент>.'") + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.'"));
		Результат = Ложь;  
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Осуществляет печать текста.
//
Функция ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;  
	РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
	
	Если (ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор") Тогда
		
		// Открываем чек
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Ложь, ВыходныеПараметры);
		// Печатаем строки чека
		Если Результат Тогда
			Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
				ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
				Если (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
				 Или (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
					ТаблицаОплат = Новый Массив();
					Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
					Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Ложь, ВыходныеПараметры);
				Иначе
					Если (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
						ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
						ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
 						ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
						ВремВыходныеПараметры = Новый Массив();
						Если НЕ ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВремТипШтрихкода, ВремШтрихКод, ВремВыходныеПараметры) Тогда
							Текст = НСтр("ru='<Штрихкод %ТипШтрихКода% не распечатан>'");
							Текст = СтрЗаменить(Текст, "%ТипШтрихКода%", ВремТипШтрихкода);
							Если НЕ НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, Текст, ВремВыходныеПараметры) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли НЕ НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыделеннаяСтрока, ВыходныеПараметры) Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Закрываем чек
		Если Результат Тогда
			ТаблицаОплат = Новый Массив();
			Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
		КонецЕсли;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ККТ" Или ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ДанныеЧека = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляТекста(СтрокаТекста, РевизияИнтерфейса);
		Попытка
			Для Каждого ТекстПечати Из ДанныеЧека Цикл
				Результат = ОбъектДрайвера.НапечататьТекстовыйДокумент(ПараметрыПодключения.ИДУстройства, ТекстПечати);
				Если НЕ Результат Тогда
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить("");
					ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
					Возврат Результат;
				Иначе
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
				КонецЕсли;
			КонецЦикла;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьТекстовыйДокумент>.'") + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.'"));
		Результат = Ложь;  
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет открытие смены.
//
Функция ПолучитьТекущееСостояние(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	
	Если ПараметрыПодключения.ТипОборудования <> "ККТ" Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.'"));
		Возврат Результат;
	КонецЕсли;
	
	НомерСмены     = 0;
	НомерДокумента = 0;
	СтатусСмены    = 0;
	ПараметрыСостояния = "";
	РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
	
	Попытка
		Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
			ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры, РевизияИнтерфейса);
			Результат = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
		Иначе
			Результат = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, НомерДокумента, НомерСмены, СтатусСмены, ПараметрыСостояния);
		КонецЕсли;
	
		Если НЕ Результат Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
				НомерСмены     = ФискальныеДанныеСтруктура.НомерСменыККТ;
				НомерДокумента = ФискальныеДанныеСтруктура.НомерЧекаККТ;
				СтатусСмены    = ФискальныеДанныеСтруктура.СтатусСмены;
			Иначе
				ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСостоянияИзXMLПакета(ПараметрыСостояния);
			КонецЕсли;
			ВыходныеПараметры.Добавить(НомерСмены);
			ВыходныеПараметры.Добавить(НомерДокумента);
			ВыходныеПараметры.Добавить(СтатусСмены); 
			ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
			ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
			ПараметрыРегистрации = ПараметрыПодключения.ПараметрыРегистрации;
			ЗаводскойНомерФН = ?(ПараметрыРегистрации.Свойство("ЗаводскойНомерФН"), ПараметрыРегистрации.ЗаводскойНомерФН, "");
			ВыходныеПараметры.Добавить(ЗаводскойНомерФН); 
		КонецЕсли;
	Исключение
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьТекущееСостояние>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет открытие смены.
//
Функция ПолучитьПараметрыККТ(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	Если ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		ВыходныеПараметры = Новый Структура();
		ВыходныеПараметры.Вставить("ТипОборудования", ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор"));
		Возврат Результат;
	КонецЕсли;
	
	Если ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		ВыходныеПараметры = Новый Структура();
		ВыходныеПараметры.Вставить("ТипОборудования", ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ПринтерЧеков"));
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыККТ = "";
	РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ПараметрыККТ);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			// Заполнение выходных параметров.
			ВыходныеПараметры = МенеджерОборудованияВызовСервера.ПараметрыИзXMLПакетаККТ(ПараметрыККТ, Параметры.Идентификатор, РевизияИнтерфейса);
			ВыходныеПараметры.Вставить("РевизияИнтерфейса", ПараметрыПодключения.РевизияИнтерфейса);
		КонецЕсли;
		
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыККТ>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет операцию с фискальным накопителем.
//
Функция ОперацияФискальногоНакопителя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ПараметрыФискализации, ВходныеПараметры, ВыходныеПараметры)
	
	Если ПараметрыПодключения.ТипОборудования <> "ККТ" Тогда
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.'"));
		Возврат Результат;
	КонецЕсли;
	
	Результат = Истина;
	ТипОперации = ПараметрыФискализации[0].ТипОперации;
	
	РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
	ПараметрыФискализацииXML = МенеджерОборудованияВызовСервера.СформироватьТаблицуПараметровДляОперацииФН(ПараметрыФискализации[0], РевизияИнтерфейса);
	Попытка
		Результат = ОбъектДрайвера.ОперацияФН(ПараметрыПодключения.ИДУстройства, ТипОперации, ПараметрыФискализацииXML);
		Если НЕ Результат Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОперацияФН>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляФискальныхРегистраторов

// Функция осуществляет открытие нового чека.
//
Функция ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;
	НомерСмены = 0;
	НомерЧека  = 0;
	
	Попытка
		Ответ = ОбъектДрайвера.ОткрытьЧек(ПараметрыПодключения.ИДУстройства, ФискальныйЧек, ТипЧека, Истина, НомерЧека, НомерСмены);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерСмены);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
			ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
			ВыходныеПараметры.Добавить("");
			ВыходныеПараметры.Добавить("");
			ВыходныеПараметры.Добавить("");
			ВыходныеПараметры.Добавить("");
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьЧек>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
		
	Возврат Результат;
	
КонецФункции

// Функция осуществляет закрытие ранее открытого чека.
//
Функция ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры) Экспорт

	Результат = Истина;
	
	СуммаНаличнойОплаты     = 0;
	СуммаБезналичнойОплаты1 = 0;
	СуммаБезналичнойОплаты2 = 0;
	СуммаБезналичнойОплаты3 = 0;
	
	Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
		Если ТаблицаОплат[ИндексОплаты][0].Значение = 0 Тогда
			СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 1 Тогда
			СуммаБезналичнойОплаты1 = СуммаБезналичнойОплаты1 + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 2 Тогда
			СуммаБезналичнойОплаты2 = СуммаБезналичнойОплаты2 + ТаблицаОплат[ИндексОплаты][1].Значение;
		Иначе
			СуммаБезналичнойОплаты3 = СуммаБезналичнойОплаты3 + ТаблицаОплат[ИндексОплаты][1].Значение;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ЗакрытьЧек(ПараметрыПодключения.ИДУстройства, СуммаНаличнойОплаты, СуммаБезналичнойОплаты1, СуммаБезналичнойОплаты2, СуммаБезналичнойОплаты3);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьЧек>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отмену ранее открытого чека.
//
Функция ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	Попытка
		ОбъектДрайвера.ОтменитьЧек(ПараметрыПодключения.ИДУстройства);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтменитьЧек>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;   
	
КонецФункции

// Функция осуществляет печать фискальной строки.
//
Функция НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, Наименование, Количество, Цена, Сумма,
                                   НомерСекции, СтавкаНДС, ВыходныеПараметры) Экспорт
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.НапечататьФискСтроку(ПараметрыПодключения.ИДУстройства, Наименование, Количество, Цена,
	                                                Сумма, НомерСекции, СтавкаНДС);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьФискСтроку>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
		
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать нефискальной строки.
//
Функция НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.НапечататьНефискСтроку(ПараметрыПодключения.ИДУстройства, СтрокаТекста);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьНефискСтроку>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать штрихкода.
//
Функция ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКодаЗнач, ШтрихКод, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.НапечататьШтрихКод(ПараметрыПодключения.ИДУстройства, ТипШтрихКодаЗнач, ШтрихКод);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьШтрихКод>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Осуществляет аннулирование чека.
//
Функция АннулироватьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры) 
	
	Результат = Истина;
	
	Если ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры);
		Если Результат Тогда
			Результат = ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;
		
	Иначе
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(Неопределено);
		ВыходныеПараметры.Добавить(Неопределено);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры.Добавить("");
	КонецЕсли;
	
	Возврат Результат;           
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляЭквайринговыхТерминалов

// Функция возвращает, будет ли печать слип чеков на терминале.
//
Функция ПечатьКвитанцийНаТерминале(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ПечатьКвитанцийНаТерминале();
		ВыходныеПараметры.Очистить();  
		ВыходныеПараметры.Добавить(Ответ);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПечатьКвитанцийНаТерминале>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет сверку итогов по картам.
//
Функция ИтогиДняПоКартам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	Ответ     = Ложь;
	СлипЧек   = "";

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Сверка итогов'");

	Попытка
		Ответ = ОбъектДрайвера.ИтогиДняПоКартам(ПараметрыПодключения.ИДУстройства, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ИтогиДняПоКартам>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет авторизацию/оплату по карте.
//
Функция ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                Сумма, НомерКарты, НомерЧека, ВыходныеПараметры)

	Результат      = Истина;
	КодRRN         = "";
	КодАвторизации = "";
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Оплатить'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ОплатитьПлатежнойКартой(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(КодRRN);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
			ВыходныеПараметры.Добавить(КодАвторизации);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОплатитьПлатежнойКартой>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет возврат платежа по карте.
//
Функция ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                      Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	  
	Результат      = Истина;
	КодRRN         = СсылочныйНомер;
	КодАвторизации = "";
	СлипЧек        = "";
	НомерКарты     = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Вернуть платеж'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(КодRRN);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
			ВыходныеПараметры.Добавить(КодАвторизации);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отмену платежа по карте.
//
Функция ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                      Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	  
	Результат      = Истина;
	КодRRN         = СсылочныйНомер;
	КодАвторизации = "";
	СлипЧек        = "";
	НомерКарты     = "";

	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отменить платеж'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет аварийную отмену операции по карте.
//
Функция АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Ответ = Ложь;
	Результат = Истина;

	Попытка
		Ответ = ОбъектДрайвера.АварийнаяОтменаОперации(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.АварийнаяОтменаОперации>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет преавторизацию по карте.
// 
Функция ПреавторизоватьПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                        Сумма, НомерКарты, НомерЧека, ВыходныеПараметры)
	Результат      = Истина;
	КодRRN         = "";
	КодАвторизации = "";
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Преавторизовать платеж'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ПреавторизацияПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(КодRRN);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
			ВыходныеПараметры.Добавить(КодАвторизации);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПреавторизацияПоПлатежнойКарте>.'") + Символы.ПС + ОписаниеОшибки());
	 КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отмену преавторизации по карте.
//
Функция ОтменитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                               Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	Результат      = Истина;
	КодАвторизации = "";
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отменить преавторизацию'");
	
	Попытка
		Ответ = ОбъектДрайвера.ОтменитьПреавторизациюПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, СсылочныйНомер, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = Ложь; 
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтменитьПреавторизациюПоПлатежнойКарте>.'") + Символы.ПС + ОписаниеОшибки());
	 КонецПопытки;
	 
	 Возврат Результат;
	 
 КонецФункции

// Функция осуществляет завершение преавторизации по карте.
//
Функция ЗавершитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                                Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	Результат      = Истина;
	КодАвторизации = "";
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Завершить преавторизацию'");
	
	Попытка
		Ответ = ОбъектДрайвера.ЗавершитьПреавторизациюПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, СсылочныйНомер, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = Ложь; 
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗавершитьПреавторизациюПоПлатежнойКарте>.'") + Символы.ПС + ОписаниеОшибки());
	 КонецПопытки;
	 
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляДисплеевПокупателя

// Функция осуществляет вывод списка строк на дисплей покупателя.
//
Функция ВывестиСтрокуНаДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя(ПараметрыПодключения.ИДУстройства, СтрокаТекста);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет очистку дисплея покупателя.
//
Функция ОчиститьДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ОчиститьДисплейПокупателя(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОчиститьДисплейПокупателя>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает параметры вывода на дисплей покупателя.
//
Функция ПолучитьПараметрыВывода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	СтолбцовНаДисплее = 20; 
	СтрокНаДисплее    = 2;
	
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьПараметрыВывода(ПараметрыПодключения.ИДУстройства, СтолбцовНаДисплее, СтрокНаДисплее);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Добавить(СтолбцовНаДисплее);
			ВыходныеПараметры.Добавить(СтрокНаДисплее);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыВывода>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляТерминаловСбораДанных

// Функция осуществляет выгрузку данных в терминал сбора данных.
//
Функция ВыгрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ПолнаяВыгрузка, ВыходныеПараметры)

	Результат = Истина;

	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.'"));
		Возврат Ложь;
	КонецЕсли;
	
	РазмерПакета     = РазмерПакетаПоУмолчанию();
	ТекущийПакет     = 1;
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	СтатусПакета     = "first";
	
	ТекущийПроцент = 0;
	МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Инициализация выгрузки...'"), Окр(ТекущийПроцент));
	ПроцентИнкремент = 100 / (ЗаписейВсего / РазмерПакета);
	
	МассивТоваров = Новый Массив;
	
	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		МассивТоваров.Добавить(Позиция);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			
			ДанныеДляВыгрузки = МенеджерОборудованияВызовСервера.СформироватьТаблицуТоваровТСД(МассивТоваров, ПолнаяВыгрузка);
			
			Если (ЗаписейВыгружено = ЗаписейВсего) Тогда
				СтатусПакета = "last";
			ИначеЕсли (ТекущийПакет > 1) Тогда
				СтатусПакета = "regular";
			КонецЕсли;
			
			Ответ = ОбъектДрайвера.ВыгрузитьТаблицу(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
			Если НЕ Ответ Тогда
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
				Возврат Результат;
			КонецЕсли;
			
			ЗаписьВПакете = 0;
			ТекущийПакет = ТекущийПакет + 1;
			
			ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
			МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПроцент));
			 
		 КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет выгрузку данных в терминал сбора данных.
//
Функция ВыгрузитьТаблицуПакетно(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ПолнаяВыгрузка, ВыходныеПараметры)

	Результат = Истина;

	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.'"));
		Возврат Ложь;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Подготовка данных...'"));
	
	РазмерПакета     = РазмерПакетаПоУмолчанию();
	ПакетыДляВыгрузки = МенеджерОборудованияВызовСервера.ПодготовитьПакетыДляЗагрузкиТСД(ТаблицаВыгрузки, РазмерПакета, ПолнаяВыгрузка);
	
	СтатусПакета     = "first";
	
	КоличествоПакетов = ПакетыДляВыгрузки.Количество();
	ПроцентИнкремент = 100 / КоличествоПакетов;
	ТекущийПроцент  = 0;
	ТекущийПакет = 0;
	
	СтатусПакета = ?(КоличествоПакетов > 1 , "first", "last");
	
	Для Каждого ДанныеДляВыгрузки Из ПакетыДляВыгрузки  Цикл
		ДанныеДляВыгрузки = ПакетыДляВыгрузки[ТекущийПакет];
		
		Ответ = ОбъектДрайвера.ВыгрузитьТаблицу(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			Возврат Результат;
		КонецЕсли;
		
		ТекущийПакет = ТекущийПакет + 1;
		СтатусПакета = ?(ТекущийПакет < КоличествоПакетов - 1 , "regular", "last");
		ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
		МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПроцент));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет загрузку таблицы из терминала сбора данных.
//
Функция ЗагрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	АлкогольнаяПродукция = Ложь;
	
	ДанныеЗагрузки = "";
	МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Загрузка данных...'"));
	
	Попытка
		
		Ответ = ОбъектДрайвера.ЗагрузитьТаблицу(ПараметрыПодключения.ИДУстройства, ДанныеЗагрузки);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			Возврат Результат;
		КонецЕсли;      
		
		Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
			МассивДанных = МенеджерОборудованияВызовСервера.ТоварыТСД(ДанныеЗагрузки, АлкогольнаяПродукция);
		КонецЕсли;
	
		Если ПустаяСтрока(ДанныеЗагрузки) Или (МассивДанных.Количество() = 0) Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для загрузки.'"));
		Иначе
			ВыходныеПараметры.Добавить(МассивДанных);
			ВыходныеПараметры.Добавить(АлкогольнаяПродукция);
		КонецЕсли;   
		
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗагрузитьТаблицу>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Очищает загруженную ранее таблицу товаров в ТСД.
//
Функция ОчиститьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Выполнение операции...'"));	
	
	Попытка
		Ответ = ОбъектДрайвера.ОчиститьТаблицу(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОчиститьТаблицу>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляЭлектронныхВесов

// Функция осуществляет получение веса груза, расположенного на весах.
//
Функция ПолучитьВес(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	Вес = 0;
	
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьВес(ПараметрыПодключения.ИДУстройства, Вес);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Добавить(Вес);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьВес>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет установку веса тары на весах.
//
Функция Тарировать(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ВесТары = 0)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.УстановитьВесТары(ПараметрыПодключения.ИДУстройства, ВесТары);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.УстановитьВесТары>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляВесовСПечатьюЭтикеток

// Функция осуществляет очистку базы товаров в весах с печатью этикеток.
//
Функция ОчиститьТоварыВВесах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ОчиститьТовары(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОчиститьТовары>.'") +  ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет выгрузку данных в весы с печатью этикеток.
//
Функция ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ЧастичнаяВыгрузка, ВыходныеПараметры)
	
	Результат = Истина;
	
	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.'"));
		Возврат Ложь;
	КонецЕсли;
	
	РазмерПакета     = РазмерПакетаПоУмолчанию();
	ТекущийПакет     = 1;
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	СтатусПакета     = "first";
	
	ТекущийПроцент = 0;
	МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Инициализация выгрузки...'"), Окр(ТекущийПроцент));
	ПроцентИнкремент = 100 / (ЗаписейВсего / РазмерПакета);
	
	МассивТоваров = Новый Массив;
	
	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		ВремНаименование = ?(Позиция.Свойство("Номенклатура"), Позиция.Номенклатура, "");
		ВремНаименование = ?(Позиция.Свойство("Наименование"), Позиция.Наименование, ВремНаименование);
		Если Позиция.Свойство("НаименованиеПолное") И Не ПустаяСтрока(Позиция.НаименованиеПолное) Тогда
			ВремНаименование = Позиция.НаименованиеПолное;
		КонецЕсли;
		
		СтрокаМассиваТоваров = Новый СписокЗначений; 
		СтрокаМассиваТоваров.Добавить(Число(Позиция.PLU));
		СтрокаМассиваТоваров.Добавить(Число(Позиция.Код));
		СтрокаМассиваТоваров.Добавить(ВремНаименование);
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("Цена"), Позиция.Цена, 0));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("ОписаниеТовара"), Позиция.ОписаниеТовара, ""));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("СрокХранения"), Позиция.СрокХранения, 0));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("ВесовойТовар"), Позиция.ВесовойТовар, Истина));
		МассивТоваров.Добавить(СтрокаМассиваТоваров);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			
			ДанныеДляВыгрузки = МенеджерОборудованияВызовСервера.СформироватьТаблицуТоваровВесыСПечатьюЭтикеток(МассивТоваров);
			
			Если (ЗаписейВыгружено = ЗаписейВсего) Тогда
				СтатусПакета = "last";
			ИначеЕсли (ТекущийПакет > 1) Тогда
				СтатусПакета = "regular";
			КонецЕсли;
			
			Ответ = ОбъектДрайвера.ВыгрузитьТовары(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
			Если НЕ Ответ Тогда
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
				Возврат Результат;
			КонецЕсли;
			
			ЗаписьВПакете = 0;
			ТекущийПакет = ТекущийПакет + 1;
			
			ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
			МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПроцент));
			 
		 КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляПринтеровЭтикеток

// Функция осуществляет инициализация принтера этикеток.
//
Функция ИнициализацияПринтера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	Попытка
		Ответ = ОбъектДрайвера.ИнициализацияПринтера(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ИнициализацияПринтера>.'") +  ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет печать этикеток на принтере этикеток.
//
Функция ПечатьЭтикеток(ОбъектДрайвера, Параметры, ПараметрыПодключения, ШаблонЭтикетки, МассивЭтикеток, ВыходныеПараметры)

	Результат = Истина;

	Если МассивЭтикеток.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.'"));
		Возврат Ложь;
	КонецЕсли;

	РазмерПакета     = РазмерПакетаПоУмолчанию();
	ТекущийПакет     = 1;
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = МассивЭтикеток.Количество();
	СтатусПакета     = "first";

	ТекущийПроцент = 0;
	МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Инициализация печати этикеток...'"), Окр(ТекущийПроцент));
	ПроцентИнкремент = 100 / (ЗаписейВсего / РазмерПакета);

	МассивТоваров = Новый Массив;

	Для Каждого Позиция Из МассивЭтикеток  Цикл

		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;

		МассивТоваров.Добавить(Позиция);

		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;

		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			
			ДанныеДляВыгрузки = МенеджерОборудованияВызовСервера.СформироватьДанныеДляПринтераЭтикеток(МассивТоваров, ?(ТекущийПакет=1, ШаблонЭтикетки, Неопределено));
				
			Если (ЗаписейВыгружено = ЗаписейВсего) Тогда
				СтатусПакета = "last";
			ИначеЕсли (ТекущийПакет > 1) Тогда
				СтатусПакета = "regular";
			КонецЕсли;

			Ответ = ОбъектДрайвера.ПечатьЭтикеток(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
			Если НЕ Ответ Тогда
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
				Возврат Результат;
			КонецЕсли;

			ЗаписьВПакете = 0;
			ТекущийПакет = ТекущийПакет + 1;

			ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
			МенеджерОборудованияКлиент.СостояниеПроцесса(НСтр("ru='Печать этикеток...'"), Окр(ТекущийПроцент));

		 КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляRFIDСчитывателей

// Функция получения данные меток RFID считывателя.
//
Функция ПолучитьДанныеМетокRFID(ОбъектДрайвера, ПараметрыПодключения, ИДПакета, ТаблицаМеток, ВыходныеПараметры) 
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьДанныеМетокRFID(ПараметрыПодключения.ИДУстройства, ИДПакета, ТаблицаМеток);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьДанныеМетокRFID>.'") +  ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция открывает сессию RFID считывателя.
//
Функция ОткрытьСессиюRFID(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ОткрытьСессиюRFID(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьСессиюRFID>.'") +  ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция закрывает сессию RFID считывателя.
//
Функция ЗакрытьСессиюRFID(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	Попытка
		Ответ = ОбъектДрайвера.ЗакрытьСессиюRFID(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьСессиюRFID>.'") +  ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция записывает данные в метку RFID.
//
Функция ЗаписатьДанныеВМеткуRFID(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ПараметрыЗаписи, Таймаут)

	Результат = Истина;
	
	TID = ПараметрыЗаписи.TID;
	EPC = ПараметрыЗаписи.EPC;
	Данные = ПараметрыЗаписи.Данные;
	БанкПамяти = ?(ПараметрыЗаписи.БанкПамяти = "EPC", 1, 2);
	
	Попытка
		Ответ = ОбъектДрайвера.ЗаписатьДанныеВМеткуRFID(ПараметрыПодключения.ИДУстройства, TID, EPC, Данные, БанкПамяти, Таймаут);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗаписатьДанныеВМеткуRFID>.'") +  ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляВсехТиповДрайверов

// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат            = Истина;
	РезультатТеста       = "";
	АктивированДемоРежим = "";
	
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			Ответ = ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ТестУстройства(РезультатТеста, АктивированДемоРежим);
	
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
		Иначе
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
		КонецЕсли;
		ВыходныеПараметры.Добавить(РезультатТеста);
		ВыходныеПараметры.Добавить(АктивированДемоРежим);
	
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ТестУстройства>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет выполнение дополнительного действия для устройства.
//
Функция ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры)
	
	Результат  = Истина;
	
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			Ответ = ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ВыполнитьДополнительноеДействие(ИмяДействия);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВыполнитьДополнительноеДействие>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает версию установленного драйвера.
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));
	
	Попытка
		ВерсияДрайвера = ОбъектДрайвера.ПолучитьНомерВерсии();
	Исключение
		
		Попытка
			// Получаем описание драйвера.
			ОписаниеДрайвера = "";
			ОбъектДрайвера.ПолучитьОписание(ОписаниеДрайвера);
			ОписаниеДрайвераПараметры = МенеджерОборудованияВызовСервера.ПолучитьОписаниеДрайвера(ОписаниеДрайвера);
			ВерсияДрайвера = ОписаниеДрайвераПараметры.ВерсияДрайвера;
		Исключение
			Результат = Истина;
		КонецПопытки;
	КонецПопытки;
	
	ВыходныеПараметры[1] = ВерсияДрайвера;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает описание установленного драйвера.
//
Функция ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));
	
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = МенеджерОборудованияКлиентПовтИсп.РевизияИнтерфейсаДрайверов();
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
		ТипОборудования = ПараметрыПодключения.ТипОборудования;
		// Предопределенный параметр с указанием типа драйвера.
		ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудования) 
	КонецЕсли;
		
	Попытка
		// Получаем версию драйвера
		ВерсияДрайвера = ОбъектДрайвера.ПолучитьНомерВерсии();
			// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьОписание(НаименованиеДрайвера, ОписаниеДрайвера, ТипОборудования, РевизияИнтерфейса, ИнтеграционныйКомпонент, 
			ОсновнойДрайверУстановлен, URLЗагрузкиДрайвера);
	Исключение
		Попытка
			ОписаниеДрайвера = "";
			ОбъектДрайвера.ПолучитьОписание(ОписаниеДрайвера);
			ОписаниеДрайвераПараметры = МенеджерОборудованияВызовСервера.ПолучитьОписаниеДрайвера(ОписаниеДрайвера);
			ВерсияДрайвера            = ОписаниеДрайвераПараметры.ВерсияДрайвера;
			НаименованиеДрайвера      = ОписаниеДрайвераПараметры.НаименованиеДрайвера;
			ОписаниеДрайвера          = ОписаниеДрайвераПараметры.ОписаниеДрайвера;
			ТипОборудования           = ОписаниеДрайвераПараметры.ТипОборудования;
			ИнтеграционныйКомпонент   = ОписаниеДрайвераПараметры.ИнтеграционныйКомпонент;
			ОсновнойДрайверУстановлен = ОписаниеДрайвераПараметры.ОсновнойДрайверУстановлен;
			URLЗагрузкиДрайвера       = ОписаниеДрайвераПараметры.URLЗагрузкиДрайвера;
			// Получаем ревизию интерфейса драйвера.
			РевизияИнтерфейса = ОбъектДрайвера.ПолучитьРевизиюИнтерфейса();
		Исключение
			ИсключениеРезультат = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения описания драйвера'") + Символы.ПС + ОписаниеОшибки());
		КонецПопытки
	КонецПопытки;
	
	Если Результат Тогда
		ВыходныеПараметры[1] = ВерсияДрайвера;
		ВыходныеПараметры[2] = НаименованиеДрайвера;
		ВыходныеПараметры[3] = ОписаниеДрайвера;
		ВыходныеПараметры[4] = ТипОборудования;
		ВыходныеПараметры[5] = РевизияИнтерфейса;
		ВыходныеПараметры[6] = ИнтеграционныйКомпонент;
		ВыходныеПараметры[7] = ОсновнойДрайверУстановлен;
		ВыходныеПараметры[8] = URLЗагрузкиДрайвера;
		
		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьПараметры(ПараметрыДрайвера);
		ВыходныеПараметры[9] = ПараметрыДрайвера;
		// Получаем дополнительные действия.
		ОбъектДрайвера.ПолучитьДополнительныеДействия(ДополнительныеДействия);
		ВыходныеПараметры[10] = ДополнительныеДействия;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти