
#Область ПроцедурыИФункцииФормированияИОбработкиМеню

// Возвращает пустую структуру параметров отбора.
Функция ОпределитьПустуюСтруктуруПараметровОтбораКлиент() Экспорт
	
	СтруктураПараметровОтбора = Новый Структура();
	
	СтруктураПараметровОтбора.Вставить("ТипОбъекта"                 , "");
	СтруктураПараметровОтбора.Вставить("ТипЗначОбъекта"             , "");
	СтруктураПараметровОтбора.Вставить("ПриостановкаДействияУслуги" , Ложь);
	СтруктураПараметровОтбора.Вставить("ДатаНач"                    , Дата(1,1,1));
	СтруктураПараметровОтбора.Вставить("ДатаКон"                    , Дата(1,1,1));
	СтруктураПараметровОтбора.Вставить("НачПериодЛС"                , Дата(1,1,1));
	СтруктураПараметровОтбора.Вставить("КонПериодЛС"                , Дата(1,1,1));
	СтруктураПараметровОтбора.Вставить("Услуга"                     ,
																	  ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка"));
	СтруктураПараметровОтбора.Вставить("ОрганизацияЛС"              ,
																	  ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	СтруктураПараметровОтбора.Вставить("ВладелецПарковочногоМеста"  ,
																	  ПредопределенноеЗначение("Справочник.КВП_Здания.ПустаяСсылка"));
	СтруктураПараметровОтбора.Вставить("ОбъектЛС"                   ,
																	  ПредопределенноеЗначение("Справочник.КВП_Здания.ПустаяСсылка"));
	СтруктураПараметровОтбора.Вставить("ЗданияКвартиры"             ,
																	  ПредопределенноеЗначение("Справочник.КВП_Здания.ПустаяСсылка"));
	
	Возврат СтруктураПараметровОтбора;

КонецФункции

// Функция вызывает окно выборка норм потребления и возвращает выбранную норму.
//
// Параметры:
//  Элемент              - Текущие данные строки.
//  СтандартнаяОбработка - Булево.
//  Объект               - <Ссылка> - Ссылка на лицевой счет или здание.
//  УслугаВладелец       - <Ссылка> - Ссылка на услугу, по которой необходимо отбирать нормы.
//  НормаНаЛицевойСчет   - Булево - Истина, если норму надо выбрать для установки на л/с;
//                                  Ложь,   если норму надо выбрать для установки на здание.
//
// Возвращаемое значение:
//  Возвращается строка с нормой.
//
Функция ВыбратьНормуПотребления(Элемент, СтандартнаяОбработка, УслугаВладелец, НормаНаЛицевойСчет) Экспорт

	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Услуга",                             УслугаВладелец);
	СтруктураПараметров.Вставить("НеИспользоватьБлизкихРодственников", Истина);
	СтруктураПараметров.Вставить("НормаНаЛицевойСчет",                 НормаНаЛицевойСчет);
	
	ОткрытьФорму("Справочник.КВП_НормыПотребленияУслуг.ФормаВыбора",
				 СтруктураПараметров,
				 Элемент,,,,,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецФункции // НачалоВыбораНормыПотребления()

// Возвращает имя формы списка подчиненного справочника.
//
// Параметры
//  СсылкаВладелец – СправочникСсылка – ссылка на объект-владелец.
//  ПодчиненныйСправочник – Строка – имя подчиненного справочника.
//
Функция ПолучитьИмяФормыПодчиненногоСправочника(СсылкаВладелец, ПодчиненныйСправочник) Экспорт
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не КВП_ПрочиеПроцедурыИФункции.ПроверитьКорректностьВладельца(СсылкаВладелец, ПодчиненныйСправочник) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФормы = "Справочник." + ПодчиненныйСправочник + ".ФормаСписка";
	
	Возврат ИмяФормы;
	
КонецФункции // ОткрытьПодчиненныйСправочник()

// Открывает отчет по назначенным начислениям для указанного элемента справочника.
//
// Параметры
//  Форма        – Форма – форма списка или элемента справочника.
//  ОткрытиеИзСписка - Булево - отчет вызывается из формы списка.
//
Процедура ОткрытьОтчетНазначенныхНачислений(Форма, ОткрытиеИзСписка = Истина) Экспорт
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОткрытиеИзСписка Тогда
		ТекущаяСтрока = Неопределено;
		Попытка
			ТекущаяСтрока = Форма.Элементы.Список.ТекущаяСтрока;
		Исключение
		КонецПопытки;
	
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Объект = ТекущаяСтрока;
	Иначе
		Объект = Форма.Объект.Ссылка;
	КонецЕсли;
	
	ПараметрыМетаданных = КВП_ПрочиеПроцедурыИФункции.ПолучитьПараметрыМетаданныхОбъекта(Объект);
	
	СписокВыбораОбъекта = Новый СписокЗначений();
	СписокВыбораОбъекта.Добавить("По всем объектам " + ПараметрыМетаданных.Синоним);
	СписокВыбораОбъекта.Добавить("По объекту " + Объект);
	
	Если ОткрытиеИзСписка Тогда
		ЭлементФормы = Форма.Элементы.Список;
	Иначе
		ЭлементФормы = Форма;
	КонецЕсли;
	
	Форма.ВыбратьСпособОткрытияИзМеню(СписокВыбораОбъекта, ЭлементФормы, ПараметрыМетаданных.Имя);
	
КонецПроцедуры // ОткрытьОтчетНазначенныхНачислений()

// Открывает отчет по назначенным начислениям для указанного элемента справочника.
//
// Параметры
//  Форма        – Форма – форма списка или элемента справочника.
//  ОткрытиеИзСписка - Булево - отчет вызывается из формы списка.
//  ТекПользователь  - текущий пользователь.
// 
Процедура ОткрытьОтчетКвитанцииИзвещения(Форма, ОткрытиеИзСписка = Истина) Экспорт
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОткрытиеИзСписка Тогда
		ТекущаяСтрока = Неопределено;
		Попытка
			ТекущаяСтрока = Форма.Элементы.Список.ТекущаяСтрока;
		Исключение
		КонецПопытки;
	
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Объект = ТекущаяСтрока;
	Иначе
		Объект = Форма.Объект.Ссылка;
	КонецЕсли;
	
	ОбслуживающиеОрганизации = УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.ПолучитьМассивОрганизацийОбслуживающихЛицевойСчет(Объект);
	
	Если ОбслуживающиеОрганизации.Количество() = 0 Тогда
		
		ОткрытьОтчетКвитанцииИзвещенияПродолжение(, Объект);
		
	ИначеЕсли ОбслуживающиеОрганизации.Количество() = 1 Тогда
		
		ОткрытьОтчетКвитанцииИзвещенияПродолжение(ОбслуживающиеОрганизации[0], Объект);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьВыборОрганизацииПриОткрытииКвитанцииИзвещения", КВП_РаботаСДиалогамиКлиент, Объект);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(ОбслуживающиеОрганизации);
		ДанныеВыбора.ПоказатьВыборЭлемента(Оповещение, "Выберите организацию");
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьОтчетКвитанцииИзвещения()

// Открывает квитанцию на основании организации и переданного объекта.
//
Процедура ОткрытьОтчетКвитанцииИзвещенияПродолжение(Организация = Неопределено, Объект)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НеЗаполнятьНастройкиПриОткрытии",  Ложь);
	ПараметрыОтчета.Вставить("СформироватьКвитанциюПриОткрытии", Истина);
	ПараметрыОтчета.Вставить("ОбъектОтчета",                     Объект);
	
	Если Не Организация = Неопределено Тогда
		ПараметрыОтчета.Вставить("Организация", Организация);
	КонецЕсли;
	
	ФормаОтчета = ПолучитьФорму("Отчет.УПЖКХ_КвитанцииИзвещения.Форма", ПараметрыОтчета);
	ФормаОтчета.Открыть();
	
КонецПроцедуры

// Обрабатывает выбор организации при формировании квитанции.
//
Процедура ОбработатьВыборОрганизацииПриОткрытииКвитанцииИзвещения(Организация, Объект) Экспорт
	
	Если НЕ Организация = Неопределено Тогда
		
		ОткрытьОтчетКвитанцииИзвещенияПродолжение(Организация.Значение, Объект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСВеб

// Позволяет просматривать веб-страницы в обработке Обозреватель.
// Если передается пустая строка, то в обработке Обозреватель 
// просматривается веб-страница конфигурации.
//
// Параметры
//  АдресСтраницы  – Строка – адрес просматриваемой страницы.
//
Процедура ПоказатьВебСтраницу(АдресСтраницы, Заголовок = "", ПоказыватьАдреснуюСтроку = Истина) Экспорт
	
	Форма = ПолучитьФорму("ОбщаяФорма.Обозреватель",
							Новый Структура("Заголовок, ПоказыватьАдреснуюСтроку, АдресСтраницы", Заголовок, ПоказыватьАдреснуюСтроку, АдресСтраницы));
	Форма.Открыть();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПереходаНаОпределенныеСтраницыНастроекПрограммы

// Открывает страницу "Производительность" Настроек программы (ЖКХ).
//
Процедура ПерейтиНаСтраницуНастроекПроизводительности() Экспорт
	
	ФормаНастроекПрограммы = ПолучитьФорму("ОбщаяФорма.УПЖКХ_НастройкаПрограммы");
	ФормаНастроекПрограммы.ТекущийЭлемент = ФормаНастроекПрограммы.Элементы.Оптимизация;
	
	ФормаНастроекПрограммы.Открыть();
	
КонецПроцедуры

#КонецОбласти