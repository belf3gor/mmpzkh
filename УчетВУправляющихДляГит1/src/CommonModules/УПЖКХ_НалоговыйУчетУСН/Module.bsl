
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ

#Область ВспомогательныеПроцедуры

// Функция получает сумму оплаты для отражения в КУДиР.
Функция ПолучитьСуммыДляОтраженияВКУДиР(РасшифровкаПлатежа, ТаблицаУслуг, ЛицевойСчет, ДоходыКУДиРОтНачисленияПениВсегдаСчитатьАвтоматически, РегистрацияОплаты = Неопределено)
	
	// Алгоритм работы:
	// 1.Отражаем оплаты "автоматически", т.е. без обнуления.
	// 2.Ищем наличие настроек для текущей услуги
	// 3.Если настройки для услуги найдены, то используем их
	// 4.Если настройки для услуги не найдены, то пробуем найти настройки для всех услуг(запись с пустой услугой)
	
	СтруктураПоиска = Новый Структура("Объект", ЛицевойСчет);
	Если НЕ РегистрацияОплаты = Неопределено Тогда
		СтруктураПоиска.Вставить("РегистрацияОплаты", РегистрацияОплаты);
	КонецЕсли;
	
	НайденныеСтроки = РасшифровкаПлатежа.НайтиСтроки(СтруктураПоиска);
	
	СтруктураСумм = Новый Структура;
	СтруктураСумм.Вставить("Графа4", 0);
	СтруктураСумм.Вставить("Графа5", 0);
	
	СуммаКОтражениюГрафа4 = 0;
	СуммаКОтражениюГрафа5 = 0;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
			// 1.Отражаем оплаты автоматически, т.е. без обнуления.
			//
			// Сперва получим суммы к отражению в КУДиР в режиме "автоматически", т.е. без обнулений граф Графа4 и Графа5.
			// Далее будем вычитать из суммы к отражению обнуляемые суммы в соответствии с настройками учетной политики ЖКХ.
			// При этом сумма долга и сумма рассрочки не разделяются друг от друга и либо рассчитываются автоматически,
			// либо обе обнуляются. Пени же является по факту доходом организации и должны попадать в облагаемую базу.
			// Поэтому в учетную политику ЖКХ добавлен флаг "ДоходыКУДиРОтНачисленияПениВсегдаСчитатьАвтоматически",
			// при установке которого пени по всем услугам всегда будет попадать в облагаемую базу, т.е. суммы граф
			// Графа4 и Графа5 по пеням обнуляться не будут.
			// Если флаг "ДоходыКУДиРОтНачисленияПениВсегдаСчитатьАвтоматически" не установлен, то обнуление пени
			// будет происходить по старой схеме, т.е. аналогично сумме долга и рассрочки в соответствие с настройками
			// учетной политики ЖКХ.
			//
			// При анализе настройки отражения услуги в КУДиР (или сводной настройки отражения), если значение флагов
			// "ДоходыВсего"/"ДоходыПринимаемые" принимают значения "Истина", то из соответствующей графы, рассчитанной
			// автоматически, вычитается сумма оплаты по долгу и сумма оплаты по рассрочке. Сумма оплаты по пени вычитается при
			// наличии дополнительного условия: если не установлен флаг "ДоходыКУДиРОтНачисленияПениВсегдаСчитатьАвтоматически".
			
			СуммаКОтражениюГрафа4 = СуммаКОтражениюГрафа4 + ТекСтрока.Сумма + ТекСтрока.Рассрочка + ТекСтрока.Пени;
			СуммаКОтражениюГрафа5 = СуммаКОтражениюГрафа5 + ТекСтрока.Сумма + ТекСтрока.Рассрочка + ТекСтрока.Пени;
			
			// 2.Ищем наличие настроек для текущей услуги
			НайденнаяУслуга = ТаблицаУслуг.Найти(ТекСтрока.Услуга, "Услуга");
			
			Если НайденнаяУслуга = Неопределено Тогда
				
				// 4.Если настройки для услуги не найдены, то пробуем найти настройки для всех услуг(запись с пустой услугой).
				//   Строка с пустой услугой в списке настроек отражения оплаты в КУДиР подразумевает, что настройки обнуления
				//   граф "Доходы всего" и "в т.ч. принимаемые" действуют на все услуги организации, для которых нет индивидуальных
				//   настроек обнуления.
				ПустаяУслуга = ТаблицаУслуг.Найти(Справочники.КВП_Услуги.ПустаяСсылка(), "Услуга");
				
				Если НЕ ПустаяУслуга = Неопределено Тогда
					// Данная ветка условия отрабатывает в следующих случаях:
					// 1. В УП ЖКХ на закладке УСН снят флаг "Суммы доходов определять автоматически"; при этом выбрано
					//    "Оплату начислений в КУДиР отражать: В разрезе услуг"; в списке "Настройки отражения оплаты в КУДиР"
					//    для организации добавлена строка с пустой услугой; отдельной строки настройки отражения для текущей услуги
					//    и организации в списке настроек нет.
					// 2. В УП ЖКХ на закладке УСН установлен флаг "Суммы доходов определять автоматически" ИЛИ (при снятом флаге)
					//    выбрано "Оплату начислений в КУДиР отражать: Сводно".
					
					Если ПустаяУслуга.ДоходыВсего Тогда
						ВычестьОбнуляемыеСуммыИзГрафыКУДиР(СуммаКОтражениюГрафа4, ТекСтрока, ДоходыКУДиРОтНачисленияПениВсегдаСчитатьАвтоматически);
					КонецЕсли;
					
					Если ПустаяУслуга.ДоходыПринимаемые Тогда
						ВычестьОбнуляемыеСуммыИзГрафыКУДиР(СуммаКОтражениюГрафа5, ТекСтрока, ДоходыКУДиРОтНачисленияПениВсегдаСчитатьАвтоматически);
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе // 3.Если настройки для услуги найдены, то используем их
				
				Если НайденнаяУслуга.ДоходыВсего Тогда
					ВычестьОбнуляемыеСуммыИзГрафыКУДиР(СуммаКОтражениюГрафа4, ТекСтрока, ДоходыКУДиРОтНачисленияПениВсегдаСчитатьАвтоматически);
				КонецЕсли;
				
				Если НайденнаяУслуга.ДоходыПринимаемые Тогда
					ВычестьОбнуляемыеСуммыИзГрафыКУДиР(СуммаКОтражениюГрафа5, ТекСтрока, ДоходыКУДиРОтНачисленияПениВсегдаСчитатьАвтоматически);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураСумм.Графа4 = СуммаКОтражениюГрафа4;
	СтруктураСумм.Графа5 = СуммаКОтражениюГрафа5;
	
	Возврат СтруктураСумм;
	
КонецФункции // ПолучитьСуммыДляОтраженияВКУДиР()

// Процедура выполняет обнуление отражаемых в КУДиР сумм на основании настроек УСН в УП ЖКХ.
// 
Процедура ВычестьОбнуляемыеСуммыИзГрафыКУДиР(СуммаКОтражениюВГрафеКУДиР, СтрокаОплаты, ДоходыКУДиРОтНачисленияПениВсегдаСчитатьАвтоматически)
	
	// Обнуляем суммы оплаты по долгу и рассрочке.
	СуммаКОтражениюВГрафеКУДиР = СуммаКОтражениюВГрафеКУДиР - СтрокаОплаты.Сумма - СтрокаОплаты.Рассрочка;
	
	Если НЕ ДоходыКУДиРОтНачисленияПениВсегдаСчитатьАвтоматически Тогда
		// Обнуляем сумму оплаты по пеням.
		СуммаКОтражениюВГрафеКУДиР = СуммаКОтражениюВГрафеКУДиР - СтрокаОплаты.Пени;
	КонецЕсли;
	
КонецПроцедуры // ВычестьОбнуляемыеСуммыИзГрафыКУДиР()

// Функция возвращает структуры сумм для последующего выполнения движений по регистру "КУДиР"
// для строки табличной части документа "Регистрация оплаты".
// 
Функция ПолучитьСтруктуруСуммКУДиР(Организация, Дата, ДокументОплатыОбъект, РегистрацияОплатыОбъект = Неопределено,
									ЧастичнаяСтруктураСуммКУДиР = Неопределено, НастройкиУчетнойПолитикиЖКХ = Неопределено,
									НомерСтрокиРО = Неопределено) Экспорт
	
	СтруктураСуммКУДиР = Неопределено;
	
	Если УчетнаяПолитика.ПрименяетсяУСН(Организация, Дата) Тогда
		
		// 1. Если переменная "РегистрацияОплатыОбъект" не передана в качестве параметра,
		// значит документ оплаты проводится "сам по себе" и значит требуется
		// получить данные по всем возможным связям документа со всеми документами РО.
		// 2. Если переменная "РегистрацияОплатыОбъект" передана в качестве параметра,
		// значит отражение оплаты происходит из документа РО. 
		// 2.1. Если документ оплаты НЕ новый, то он возможно указан не только в текущем РО, но и в других
		// документах РО, поэтому нужно получить данные по всем связям документа оплаты, кроме текущего РО,
		// а также отдельно получить данные по текущему РО.
		// 2.2. При этом если документ оплаты новый, значит он еще нигде не указан (ни в одном РО),
		// то есть другие связи с документами РО искать не нужно.
		
		// При наличии структуры "ЧастичнаяСтруктураСуммКУДиР" в параметрах функции
		// определяем, что данные по КУДиР для текущего РО уже были получены ранее,
		// а значит нужно получать только данные по другим документам (по всем РО, за исключением текущего).
		ПолучатьДанныеТолькоТекущегоРО = ЧастичнаяСтруктураСуммКУДиР = Неопределено;
		
		ДанныеПоОплатам = ПолучитьДанныеПоОплатам(ДокументОплатыОбъект, РегистрацияОплатыОбъект, ПолучатьДанныеТолькоТекущегоРО);
		
		СтрокиОплат        = ДанныеПоОплатам.СтрокиОплат;
		РасшифровкаПлатежа = ДанныеПоОплатам.РасшифровкаПлатежа;
		
		СтруктураСуммКУДиР = Новый Структура;
		СтруктураСуммКУДиР.Вставить("Графа4",      0);
		СтруктураСуммКУДиР.Вставить("Графа5",      0);
		СтруктураСуммКУДиР.Вставить("СуммаОплаты", 0);
		
		// Выполнять дальнейшие действия имеет смысл только тогда, когда имеются данные по оплатам,
		// т.е. типовой документ оплаты связан с документами регистрации оплаты.
		// В частности это касается типовых документов, которые относятся к организациям, не имеющим отношения к блоку ЖКХ:
		// т.к. связи с РО в этом случае наверняка отсутствуют, то и выполнять все дальнейшие действия не нужно.
		Если СтрокиОплат.Количество() > 0 Тогда
			
			Если НастройкиУчетнойПолитикиЖКХ = Неопределено Тогда
				НастройкиУчетнойПолитикиЖКХ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
			КонецЕсли;
			
			// Получим список услуг для отражения оплат в КУДиР из настроек учетной политики:
			ТаблицаУслуг = ПолучитьСписокУслугДляОтраженияОплатВКУДиР(Организация, НастройкиУчетнойПолитикиЖКХ);
			
			Если ТипЗнч(ДокументОплатыОбъект) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") 
			   И ДокументОплатыОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам")Тогда
				ТаблицаОПК = ДокументОплатыОбъект.Движения.ПрочиеРасчеты.Выгрузить();
			КонецЕсли;
			
			Для Каждого ТекСтрокаОплаты Из СтрокиОплат Цикл
				
				ВидОперацииРО = ТекСтрокаОплаты.ВидОперацииРО;
				
				ТекСтруктураСуммКУДиР = Новый Структура("Графа4, Графа5", 0, 0);
				
				СписокОплатТекущегоЛС = СтрокиОплат.НайтиСтроки(Новый Структура("ЛицевойСчет, РегистрацияОплаты", ТекСтрокаОплаты.ЛицевойСчет, ТекСтрокаОплаты.РегистрацияОплаты));
				
				ТекСтрокаРО = Неопределено;
				
				// Строки расшифровки платежа содержат строки по всем лицевым счетам документа РО,
				// когда ссылка на РО передается в функцию, т.е. в следующих случаях:
				// 1) Из обработки загрузки реестра платежей при совместном формировании РО и ПРС (через документ РО);
				// 2) Из обработки формирования оплат на основании платежных документов;
				// 3) Из самого документа РО при отражении оплат.
				//
				// При проведении типовых документов "самих по себе" ссылка на РО не передается,
				// поэтому в расшифровке содержатся все строки расшифровок, связанные с типовым документом,
				// а также те строки расшифровки, лицевые счета которых совпадают внутри одного РО.
				// Пример:
				// в РО1 есть 2 строки оплаты по "л/с №1"; в одной строке указан ПРС1, в другой - ПРС2.
				// в РО2 есть строка оплаты, в которой указан ПРС1.
				// В общую расшифровку платежа попадут строки расшифровки документов РО1 и РО2, связанные по ПРС1,
				// а также строки расшифровки из РО1 по "л/с №1", т.к. они нужны нам для пропорционального распределения
				// сумм отражения по КУДиР в разрезе услуг.
				
				Если НЕ НомерСтрокиРО = Неопределено Тогда
					ТекСтрокаРО = СтрокиОплат.Найти(НомерСтрокиРО, "НомерСтроки");
				КонецЕсли;
				
				Если ТипЗнч(ДокументОплатыОбъект) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") 
				   И ДокументОплатыОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам")Тогда
					Если ТаблицаОПК.Найти(ТекСтрокаОплаты.ДокументОплаты, "РасчетныйДокумент") = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				ИначеЕсли НЕ ТекСтрокаРО = Неопределено Тогда
					Если НЕ ТекСтрокаРО = ТекСтрокаОплаты И ТекСтрокаОплаты.РегистрацияОплаты = ТекСтрокаРО.РегистрацияОплаты Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					Если НЕ ТекСтрокаОплаты.ДокументОплаты = ДокументОплатыОбъект.Ссылка Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// Так как расшифровка в документе РО у нас общая для разных строк оплат одного лицевого счета,
				// то нужно разбивать общую сумму пропорционально суммам оплат строк, чтобы пропорционально
				// учитывать отражение сумм в КУДиР.
				
				ЧислительДолиОплаты   = 1;
				ЗнаменательДолиОплаты = 0;
				
				Если СписокОплатТекущегоЛС.Количество() > 1 Тогда
					
					ЧислительДолиОплаты   = ТекСтрокаОплаты.Сумма;
					
					// Рассчитаем знаменатель доли оплаты исходя из сумм расшифровки,
					// а затем полученное значение умножим на количество оплат текущего лицевого счета:
					Для Каждого СтрокаСпискаОплат Из СписокОплатТекущегоЛС Цикл
						ЗнаменательДолиОплаты = ЗнаменательДолиОплаты + СтрокаСпискаОплат.Сумма;
					КонецЦикла;
					
				КонецЕсли;
				
				Если ЗнаменательДолиОплаты = 0 Тогда
					ЗнаменательДолиОплаты = 1;
				КонецЕсли;
				
				ТекСтруктураСуммКУДиР = ПолучитьСуммыДляОтраженияВКУДиР(РасшифровкаПлатежа, ТаблицаУслуг, ТекСтрокаОплаты.ЛицевойСчет,
																		НастройкиУчетнойПолитикиЖКХ.ДоходыКУДиРОтНачисленияПениВсегдаСчитатьАвтоматически, ТекСтрокаОплаты.РегистрацияОплаты);
				СуммаДляКУДиР4 = ТекСтруктураСуммКУДиР.Графа4 * ЧислительДолиОплаты / ?(ЗнаменательДолиОплаты = 0, 1, ЗнаменательДолиОплаты * СписокОплатТекущегоЛС.Количество());
				СуммаДляКУДиР5 = ТекСтруктураСуммКУДиР.Графа5 * ЧислительДолиОплаты / ?(ЗнаменательДолиОплаты = 0, 1, ЗнаменательДолиОплаты * СписокОплатТекущегоЛС.Количество());
				
				Если ВидОперацииРО = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет
					ИЛИ ВидОперацииРО = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеВКассу 
					ИЛИ ВидОперацииРО = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеСПлатежнойКарты Тогда
					
					ТекСтруктураСуммКУДиР.Вставить("СуммаОплаты", ТекСтрокаОплаты.Сумма);
					ТекСтруктураСуммКУДиР.Графа4 = СуммаДляКУДиР4;
					ТекСтруктураСуммКУДиР.Графа5 = СуммаДляКУДиР5;
					
				ИначеЕсли ВидОперацииРО = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета
					ИЛИ ВидОперацииРО = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы Тогда
					
					// Примечание:
					// Раньше в данном месте выполнялась проверка на вид договора контрагента, и если вид договора был "Прочее",
					// то вспомогательная структура "ТекСтруктураСуммКУДиР" не заполнялась. Для данного вида договора контрагента
					// при отражении оплаты из документа "Регистрация оплаты" формируются документы списания "Выдача наличных"
					// или "Списание с расчетного счета" с видом операции "Прочее списание".
					// В типовой бухгалтерии предприятия документы списания с видом операции "Прочее списание" не формируют
					// движения по КУДиР. Поэтому условие на проверку вида договора было удалено, как избыточное.
					// Таким образом для всех видов операции документов оплат структура сумм КУДиР подготавливается, но для
					// документов списания с видом операции "Прочее списание" она фактически не используется.
					
					ТекСтруктураСуммКУДиР.Вставить("СуммаОплаты", -ТекСтрокаОплаты.Сумма);
					ТекСтруктураСуммКУДиР.Графа4 = -СуммаДляКУДиР4;
					ТекСтруктураСуммКУДиР.Графа5 = -СуммаДляКУДиР5;
					
				КонецЕсли;
				
				СтруктураСуммКУДиР.Графа4      = СтруктураСуммКУДиР.Графа4      + ТекСтруктураСуммКУДиР.Графа4;
				СтруктураСуммКУДиР.Графа5      = СтруктураСуммКУДиР.Графа5      + ТекСтруктураСуммКУДиР.Графа5;
				СтруктураСуммКУДиР.СуммаОплаты = СтруктураСуммКУДиР.СуммаОплаты + ТекСтруктураСуммКУДиР.СуммаОплаты;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Дополним структуру сумм КУДиР данными по рассчитанным ранее данным создаваемого документа "Регистрация оплаты".
		// Т.к. для еще непроведенного документа РО связей в регистре сведений "Связи документов оплат" еще нет,
		// то эти данные рассчитывались ранее при заполнении документа отражения, и передаются в данную функцию
		// в структуре "ЧастичнаяСтруктураСуммКУДиР" из общего модуля "НалоговыйУчетУСН":
		
		Если НЕ ЧастичнаяСтруктураСуммКУДиР = Неопределено Тогда
			
			СтруктураСуммКУДиР.Графа4      = СтруктураСуммКУДиР.Графа4      + ЧастичнаяСтруктураСуммКУДиР.Графа4;
			СтруктураСуммКУДиР.Графа5      = СтруктураСуммКУДиР.Графа5      + ЧастичнаяСтруктураСуммКУДиР.Графа5;
			СтруктураСуммКУДиР.СуммаОплаты = СтруктураСуммКУДиР.СуммаОплаты + ЧастичнаяСтруктураСуммКУДиР.СуммаОплаты;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураСуммКУДиР;
	
КонецФункции // ПолучитьСтруктуруСуммКУДиР()

// Функция получает данные по оплатам (по фактическим расшифровкам документов РО),
// в которых указан текущий документ отражения.
Функция ПолучитьДанныеПоОплатам(ДокументОплатыОбъект, РегистрацияОплатыОбъект = Неопределено, ПолучатьДанныеТолькоТекущегоРО = Ложь)
	
	СтруктураОплат = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ДокументОплатыОбъект) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") 
	   И ДокументОплатыОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам")Тогда
		
		// ОСОБЕННОСТЬ:
		// ___________
		// Для получения данных по оплатам платежными картами, необходимо получить данные 
		// по всем документам РО, в которых имеются связи с текущим документом ПРС, для этого:
		// 1) сначала по таблице движений документа ПРС определяем список связанных документов ОПК, 
		// 2) затем для найденных документов ОПК определяем оплаты, зарегистрированные в документах РО.
		//
		// Для выполнения п.1) ориентируемся на типовой регистр ПрочиеРасчеты. 
		// К моменту корректировки данных по КУДиР в таблице ПрочиеРасчеты движений документа ПРС
		// уже имеются данные, какие суммы каких документов ОПК закрываются текущим ПРС.
		// Чтобы не дублировать вызов типовых процедур берем сразу готовый результат.
		//
		// ВОЗМОЖНЫЕ ПРОБЛЕМЫ:
		// __________________
		// 1. Ситуации с авансами, когда как так называемого «закрытия» не происходит.
		//    Т.е. в случае авансовых платежей от банка по продажам, совершенным по платежным картам, движений 
		//    в регистре ПрочиеРасчеты при проведении ПРС нет, а следовательно не можем определить список 
		//    связанных с ПРС документов ОПК.
		// Пример:
		// ОПК 1 на сумму 5000
		// ОПК 2 на сумму 3000
		// ПРС 1 на сумму 10000 (закрывает 5000 по ОПК 1 и 3000 по ОПК 2)
		// ОПК 3 на сумму 500
		// ПРС 2 на сумму 500 – ждем что закроется ОПК 3, но закрытия нет, т.к. в алгоритме учитываются и все прошлые
		//                     авансовые суммы, поэтому движений по закрытию нет.
		// …
		// Далее если будут скажем еще какие-то документы
		// ОПК 4 на сумму 7000
		// ПРС 3 на сумму 10000 (закрывает 5000 по ОПК 4)
		//
		// 2. При непоследовательном вводе документов могут закрываться одни и те же документы ОПК.
		// Пример:
		// ОПК 1 от 01.06 на сумму 5000
		// ОПК 2 от 02.06 на сумму 3000
		// ПРС 1 от 28.06 на конец дня на сумму 6000 (закрывает 5000 по ОПК 1 и 1000 по ОПК 2)
		// ПРС 2 от 28.06 на начало дня на сумму 2000 (закрывает 2000 по ОПК 1)
		//
		// 3. Сумма ОПК превышает сумму ПРС.
		// Пример:
		// РО 1 по л/с1 на сумму 4500 -> создаем автоматически документ ОПК 1 на те же 4500.
		// Руками вводим документ ПРС 1 на 2000 (закрывает 2000 по ОПК 1).
		// Мы же просто смотрим связь ПРС 1, находим ОПК 1 через него добираемся до РО 1, где получаем
		// распределение по услугам на 4500.
		// Какие из услуг мы должны набрать на исходные 2000.
		//
		// 4. Вводим ПРС на основании РО, а закрыться может совсем другой ОПК.
		// Пример:
		// Есть какие-то старые ОПК:
		// ОПК 1 на сумму 4000
		// ОПК 2 на сумму 1500
		// Вводим РО 1 по л/с2 на сумму 700 -> создаем автоматически документ ОПК 3 на те же 700 -> создаем 
		// на основании РО 1 документ ПРС 1 на 700 (в т.ч. комиссия – тут она роли не играет).
		// ПРС 1 закрывает 700 по ОПК 1.
		//
		// РЕШИЛИ:
		// ______
		// Ситуация 2 стандартная, не соблюдена последовательность ввода, решается перепроведением, не учитываем.
		// Ситуации 1 и 3 маловероятны, т.к. банки вряд ли будут переводить денежные средства заранее. Скорее всего
		// будут переводы 1 раз в какой-то определенный период на общую сумму. Поэтому оставляем пока без внимания.
		// Для ситуации 4 предусмотреть возможность анализа сумм в ПРС с выходом на ОПК, РО и л/с.
		//
		// Если в будущем по ситуациям 1 и 3 возникнут проблемы, тогда возможны следующие варианты доработки:
		// 1) Реализовать свой дублирующий механизм закрытия документом ПРС сумм по ОПК.
		//    Плюсы:  
		//            - Независимость от типового механизма.
		//            - Гибкость.
		//    Минусы: 
		//            - Проблемы с обновлением на типовые релизы.
		//            - Расхождения с типовым механизмом (свой будет закрывать одни ОПК, типовой - другие).
		// 2) Добавить в документ ПРС новую табличную часть, с возможностью частичного автоматического заполнения, 
		//    где будут указываться конкретные документы ОПК, с которыми связан текущий ПРС.
		//    При заполнении на основании РО в ТЧ попадут только ОПК из ТЧ документа РО. При заполнении на основании ОПК – 
		//    только один конкретный ОПК. В остальном случае вручную.
		//    При этом вероятно нужна проверка на то, что сумма по всем ОПК из ТЧ не может быть меньше суммы текущего ПРС 
		//    с учетом комиссии (если будет меньше то столкнемся с ситуацией 3).
		//    Плюсы:  
		//            - Наглядность.
		//            - Возможность влиять на проведение.
		//    Минусы: 
		//            - Если потребуется что-то поменять в случае ошибки, то придется менять во всех документах.
		//            - Проблемы с обновлением на типовые релизы.
		// 3) Доработать дублирующий механизм проведения документа ПРС.
		//    Плюсы:  
		//            - Минимальные изменения.
		//    Минусы: 
		//            - Проблемы с обновлением на типовые релизы.
		//            - Затронется типовой механизм, который используется в целом при УСН. Не понятно на что еще может повлиять (нужен доп.анализ).
		
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрочиеРасчеты.РасчетныйДокумент КАК РасчетныйДокумент,
		|	ПрочиеРасчеты.Сумма КАК Сумма
		|ПОМЕСТИТЬ ТаблицаОПК
		|ИЗ
		|	&ПрочиеРасчеты КАК ПрочиеРасчеты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.РегистрацияОплаты,
		|	УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.ДокументОтражения
		|ПОМЕСТИТЬ СсылкиНаОплаты
		|ИЗ
		|	РегистрСведений.УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете КАК УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете
		|ГДЕ
		|	УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.ДокументОтражения В
		|			(ВЫБРАТЬ
		|				ТаблицаОПК.РасчетныйДокумент
		|			ИЗ
		|				ТаблицаОПК)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка КАК РегистрацияОплаты,
		|	КВП_РегистрацияОплатыЛицевыеСчета.Объект КАК ЛицевойСчет
		|ПОМЕСТИТЬ ТаблицаОбъектовИОплат
		|ИЗ
		|	Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
		|ГДЕ
		|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка В
		|			(ВЫБРАТЬ
		|				СсылкиНаОплаты.РегистрацияОплаты
		|			ИЗ
		|				СсылкиНаОплаты)
		|	И КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты В
		|			(ВЫБРАТЬ
		|				СсылкиНаОплаты.ДокументОтражения
		|			ИЗ
		|				СсылкиНаОплаты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка КАК РегистрацияОплаты,
		|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Дата КАК ДатаОплаты,
		|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.ВидОперации КАК ВидОперацииРО,
		|	КВП_РегистрацияОплатыЛицевыеСчета.НомерСтроки КАК НомерСтроки,
		|	КВП_РегистрацияОплатыЛицевыеСчета.Объект КАК ЛицевойСчет,
		|	КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты КАК ДокументОплаты,
		|	КВП_РегистрацияОплатыЛицевыеСчета.Сумма КАК СуммаОплаты
		|ПОМЕСТИТЬ ТаблицаСуммИОбъектов
		|ИЗ
		|	Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
		|ГДЕ
		|	(КВП_РегистрацияОплатыЛицевыеСчета.Ссылка, КВП_РегистрацияОплатыЛицевыеСчета.Объект) В
		|			(ВЫБРАТЬ
		|				ТаблицаОбъектовИОплат.РегистрацияОплаты,
		|				ТаблицаОбъектовИОплат.ЛицевойСчет
		|			ИЗ
		|				ТаблицаОбъектовИОплат)
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаОплатИСведений.РегистрацияОплаты,
		|	ТаблицаОплатИСведений.ДатаОплаты,
		|	ТаблицаОплатИСведений.ВидОперацииРО,
		|	ТаблицаОплатИСведений.НомерСтроки,
		|	ТаблицаОплатИСведений.ЛицевойСчет,
		|	ТаблицаОплатИСведений.ДокументОплаты,
		|	ТаблицаОплатИСведений.СуммаОплаты КАК Сумма
		|ИЗ
		|	ТаблицаСуммИОбъектов КАК ТаблицаОплатИСведений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОплатИСведений.РегистрацияОплаты,
		|	ТаблицаОплатИСведений.НомерСтроки,
		|	ТаблицаОплатИСведений.ЛицевойСчет КАК Объект,
		|	ТаблицаОплатИСведений.ДокументОплаты,
		|	ТаблицаОплатИСведений.СуммаОплаты,
		|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга,
		|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма,
		|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Рассрочка,
		|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени
		|ИЗ
		|	ТаблицаСуммИОбъектов КАК ТаблицаОплатИСведений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_РегистрацияОплаты.РасшифровкаПлатежа КАК КВП_РегистрацияОплатыРасшифровкаПлатежа
		|		ПО (КВП_РегистрацияОплатыРасшифровкаПлатежа.Ссылка = ТаблицаОплатИСведений.РегистрацияОплаты)
		|			И (КВП_РегистрацияОплатыРасшифровкаПлатежа.Объект = ТаблицаОплатИСведений.ЛицевойСчет)
		|ГДЕ
		|	(НЕ КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма = 0
		|			ИЛИ НЕ КВП_РегистрацияОплатыРасшифровкаПлатежа.Рассрочка = 0
		|			ИЛИ НЕ КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени = 0)";
		
		Запрос.УстановитьПараметр("ПрочиеРасчеты", ДокументОплатыОбъект.Движения.ПрочиеРасчеты);
		
		// Т.к. у пользователя может не быть прав на некоторые объекты учета и, соответственно,
		// на некоторые документы РО, а при перепроведении типового документа нужно получить данные
		// по всем связанным РО, то устанавливаем привилегированный режим.
		УстановитьПривилегированныйРежим(Истина);
		ПакетРезультат = Запрос.ВыполнитьПакет();
		
		СтруктураОплат.Вставить("СтрокиОплат",        ПакетРезультат[4].Выгрузить());
		СтруктураОплат.Вставить("РасшифровкаПлатежа", ПакетРезультат[5].Выгрузить());
		
		УстановитьПривилегированныйРежим(Ложь);
		
	ИначеЕсли НЕ РегистрацияОплатыОбъект = Неопределено И ПолучатьДанныеТолькоТекущегоРО Тогда
		
		// Если документ отражения новый или если нужны данные только текущего документа РО
		// то получаем данные только по табличным частям документа РО:
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&РегистрацияОплаты КАК РегистрацияОплаты,
		|	&ДатаОплаты КАК ДатаОплаты,
		|	ЛицевыеСчета.НомерСтроки КАК НомерСтроки,
		|	ЛицевыеСчета.Объект КАК ЛицевойСчет,
		|	ЛицевыеСчета.Сумма КАК СуммаОплаты
		|ПОМЕСТИТЬ ТаблицаСуммИОбъектов
		|ИЗ
		|	&ЛицевыеСчета КАК ЛицевыеСчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСуммИОбъектов.РегистрацияОплаты,
		|	ТаблицаСуммИОбъектов.ДатаОплаты,
		|	&ВидОперацииРО КАК ВидОперацииРО,
		|	ТаблицаСуммИОбъектов.НомерСтроки,
		|	ТаблицаСуммИОбъектов.ЛицевойСчет,
		|	ТаблицаСуммИОбъектов.СуммаОплаты,
		|	ЕСТЬNULL(УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
		|	ЕСТЬNULL(УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор
		|ПОМЕСТИТЬ ТаблицаОплатИСведений
		|ИЗ
		|	ТаблицаСуммИОбъектов КАК ТаблицаСуммИОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
		|				&ДатаОплаты,
		|				Организация = &Организация
		|					И ЛицевойСчет В
		|						(ВЫБРАТЬ
		|							ТаблицаСуммИОбъектов.ЛицевойСчет
		|						ИЗ
		|							ТаблицаСуммИОбъектов КАК ТаблицаСуммИОбъектов)) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
		|		ПО ТаблицаСуммИОбъектов.ЛицевойСчет = УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОплатИСведений.РегистрацияОплаты,
		|	ТаблицаОплатИСведений.ДатаОплаты,
		|	ТаблицаОплатИСведений.ВидОперацииРО,
		|	ТаблицаОплатИСведений.НомерСтроки,
		|	ТаблицаОплатИСведений.ЛицевойСчет,
		|	ТаблицаОплатИСведений.СуммаОплаты КАК Сумма,
		|	ТаблицаОплатИСведений.Контрагент,
		|	ТаблицаОплатИСведений.Договор
		|ИЗ
		|	ТаблицаОплатИСведений КАК ТаблицаОплатИСведений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаПлатежа.Объект КАК ЛицевойСчет,
		|	РасшифровкаПлатежа.Услуга,
		|	РасшифровкаПлатежа.Пени,
		|	РасшифровкаПлатежа.Рассрочка,
		|	РасшифровкаПлатежа.Сумма
		|ПОМЕСТИТЬ ТаблицаРасшифровки
		|ИЗ
		|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОплатИСведений.РегистрацияОплаты,
		|	ТаблицаОплатИСведений.НомерСтроки,
		|	ТаблицаОплатИСведений.ЛицевойСчет КАК Объект,
		|	ТаблицаОплатИСведений.СуммаОплаты,
		|	ТаблицаОплатИСведений.Контрагент,
		|	ТаблицаОплатИСведений.Договор,
		|	ТаблицаРасшифровки.Услуга,
		|	ТаблицаРасшифровки.Сумма,
		|	ТаблицаРасшифровки.Рассрочка,
		|	ТаблицаРасшифровки.Пени
		|ИЗ
		|	ТаблицаОплатИСведений КАК ТаблицаОплатИСведений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровки КАК ТаблицаРасшифровки
		|		ПО (ТаблицаРасшифровки.ЛицевойСчет = ТаблицаОплатИСведений.ЛицевойСчет)
		|ГДЕ
		|	(НЕ ТаблицаРасшифровки.Сумма = 0
		|			ИЛИ НЕ ТаблицаРасшифровки.Рассрочка = 0
		|			ИЛИ НЕ ТаблицаРасшифровки.Пени = 0)";
		
		Запрос.УстановитьПараметр("Организация",        ДокументОплатыОбъект.Организация);
		Запрос.УстановитьПараметр("РегистрацияОплаты",  РегистрацияОплатыОбъект.Ссылка);
		Запрос.УстановитьПараметр("ДатаОплаты",         РегистрацияОплатыОбъект.Дата);
		Запрос.УстановитьПараметр("ВидОперацииРО",      РегистрацияОплатыОбъект.ВидОперации);
		Запрос.УстановитьПараметр("ЛицевыеСчета",       РегистрацияОплатыОбъект.ЛицевыеСчета);
		Запрос.УстановитьПараметр("РасшифровкаПлатежа", РегистрацияОплатыОбъект.РасшифровкаПлатежа);
		
		ПакетРезультат = Запрос.ВыполнитьПакет();
		
		СтруктураОплат.Вставить("СтрокиОплат", ПакетРезультат[2].Выгрузить());
		СтруктураОплат.Вставить("РасшифровкаПлатежа", ПакетРезультат[4].Выгрузить());
		
	Иначе
		
		// Если ссылка на регистрацию оплаты отсутствует или нужно получить данные не по текущему документу РО,
		// то нужно получить данные по всем документам, в которых имеются связи с текущим документом отражения,
		// кроме текущего документа:
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.РегистрацияОплаты,
		|	УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.ДокументОтражения
		|ПОМЕСТИТЬ СсылкиНаОплаты
		|ИЗ
		|	РегистрСведений.УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете КАК УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете
		|ГДЕ
		|	УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.ДокументОтражения = &ДокументОплаты
		|	И НЕ УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.РегистрацияОплаты = &РегистрацияОплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка КАК РегистрацияОплаты,
		|	КВП_РегистрацияОплатыЛицевыеСчета.Объект КАК ЛицевойСчет
		|ПОМЕСТИТЬ ТаблицаОбъектовИОплат
		|ИЗ
		|	Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
		|ГДЕ
		|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка В
		|			(ВЫБРАТЬ
		|				СсылкиНаОплаты.РегистрацияОплаты
		|			ИЗ
		|				СсылкиНаОплаты)
		|	И КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты В
		|			(ВЫБРАТЬ
		|				СсылкиНаОплаты.ДокументОтражения
		|			ИЗ
		|				СсылкиНаОплаты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка КАК РегистрацияОплаты,
		|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Дата КАК ДатаОплаты,
		|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.ВидОперации КАК ВидОперацииРО,
		|	КВП_РегистрацияОплатыЛицевыеСчета.НомерСтроки КАК НомерСтроки,
		|	КВП_РегистрацияОплатыЛицевыеСчета.Объект КАК ЛицевойСчет,
		|	КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты КАК ДокументОплаты,
		|	КВП_РегистрацияОплатыЛицевыеСчета.Сумма КАК СуммаОплаты
		|ПОМЕСТИТЬ ТаблицаСуммИОбъектов
		|ИЗ
		|	Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
		|ГДЕ
		|	(КВП_РегистрацияОплатыЛицевыеСчета.Ссылка, КВП_РегистрацияОплатыЛицевыеСчета.Объект) В
		|			(ВЫБРАТЬ
		|				ТаблицаОбъектовИОплат.РегистрацияОплаты,
		|				ТаблицаОбъектовИОплат.ЛицевойСчет
		|			ИЗ
		|				ТаблицаОбъектовИОплат)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСуммИОбъектов.РегистрацияОплаты,
		|	ТаблицаСуммИОбъектов.ДатаОплаты,
		|	ТаблицаСуммИОбъектов.ВидОперацииРО,
		|	ТаблицаСуммИОбъектов.НомерСтроки,
		|	ТаблицаСуммИОбъектов.ЛицевойСчет,
		|	ТаблицаСуммИОбъектов.ДокументОплаты,
		|	ТаблицаСуммИОбъектов.СуммаОплаты,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация,
		|	МАКСИМУМ(УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Период) КАК Период
		|ПОМЕСТИТЬ втМаксПериодСведений
		|ИЗ
		|	ТаблицаСуммИОбъектов КАК ТаблицаСуммИОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
		|		ПО ТаблицаСуммИОбъектов.ЛицевойСчет = УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет
		|			И (УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация = &Организация)
		|			И ТаблицаСуммИОбъектов.ДатаОплаты >= УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСуммИОбъектов.РегистрацияОплаты,
		|	ТаблицаСуммИОбъектов.ДатаОплаты,
		|	ТаблицаСуммИОбъектов.ВидОперацииРО,
		|	ТаблицаСуммИОбъектов.НомерСтроки,
		|	ТаблицаСуммИОбъектов.ЛицевойСчет,
		|	ТаблицаСуммИОбъектов.ДокументОплаты,
		|	ТаблицаСуммИОбъектов.СуммаОплаты,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТаблицаСуммИОбъектов.РегистрацияОплаты,
		|	ТаблицаСуммИОбъектов.ДатаОплаты,
		|	ТаблицаСуммИОбъектов.ВидОперацииРО,
		|	ТаблицаСуммИОбъектов.НомерСтроки,
		|	ТаблицаСуммИОбъектов.ЛицевойСчет,
		|	ТаблицаСуммИОбъектов.ДокументОплаты,
		|	ТаблицаСуммИОбъектов.СуммаОплаты,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втМаксПериодСведений.РегистрацияОплаты,
		|	втМаксПериодСведений.ДатаОплаты,
		|	втМаксПериодСведений.ВидОперацииРО,
		|	втМаксПериодСведений.НомерСтроки,
		|	втМаксПериодСведений.ЛицевойСчет,
		|	втМаксПериодСведений.ДокументОплаты,
		|	втМаксПериодСведений.СуммаОплаты,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Контрагент,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Договор
		|ПОМЕСТИТЬ ТаблицаОплатИСведений
		|ИЗ
		|	втМаксПериодСведений КАК втМаксПериодСведений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
		|		ПО (УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет = втМаксПериодСведений.ЛицевойСчет)
		|			И (УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация = втМаксПериодСведений.Организация)
		|			И (УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Период = втМаксПериодСведений.Период)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОплатИСведений.РегистрацияОплаты,
		|	ТаблицаОплатИСведений.ДатаОплаты,
		|	ТаблицаОплатИСведений.ВидОперацииРО,
		|	ТаблицаОплатИСведений.НомерСтроки,
		|	ТаблицаОплатИСведений.ЛицевойСчет,
		|	ТаблицаОплатИСведений.ДокументОплаты,
		|	ТаблицаОплатИСведений.СуммаОплаты КАК Сумма,
		|	ТаблицаОплатИСведений.Контрагент,
		|	ТаблицаОплатИСведений.Договор
		|ИЗ
		|	ТаблицаОплатИСведений КАК ТаблицаОплатИСведений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОплатИСведений.РегистрацияОплаты,
		|	ТаблицаОплатИСведений.НомерСтроки,
		|	ТаблицаОплатИСведений.ЛицевойСчет КАК Объект,
		|	ТаблицаОплатИСведений.ДокументОплаты,
		|	ТаблицаОплатИСведений.СуммаОплаты,
		|	ТаблицаОплатИСведений.Контрагент,
		|	ТаблицаОплатИСведений.Договор,
		|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга,
		|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма,
		|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Рассрочка,
		|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени
		|ИЗ
		|	ТаблицаОплатИСведений КАК ТаблицаОплатИСведений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_РегистрацияОплаты.РасшифровкаПлатежа КАК КВП_РегистрацияОплатыРасшифровкаПлатежа
		|		ПО (КВП_РегистрацияОплатыРасшифровкаПлатежа.Ссылка = ТаблицаОплатИСведений.РегистрацияОплаты)
		|			И (КВП_РегистрацияОплатыРасшифровкаПлатежа.Объект = ТаблицаОплатИСведений.ЛицевойСчет)
		|ГДЕ
		|	(НЕ КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма = 0
		|			ИЛИ НЕ КВП_РегистрацияОплатыРасшифровкаПлатежа.Рассрочка = 0
		|			ИЛИ НЕ КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени = 0)";
		
		Если НЕ РегистрацияОплатыОбъект = Неопределено Тогда
			РегистрацияОплатыСсылка = РегистрацияОплатыОбъект.Ссылка;
		Иначе
			// Когда ссылка на документ РО отсутствует (типовой документ проводится "сам по себе"),
			// то исключать из данных выборки никакие документы не нужно. Поэтому устанавливаем
			// пустую ссылку на документ РО:
			РегистрацияОплатыСсылка = Документы.КВП_РегистрацияОплаты.ПустаяСсылка();
		КонецЕсли;
		Запрос.УстановитьПараметр("РегистрацияОплаты", РегистрацияОплатыСсылка);
		Запрос.УстановитьПараметр("ДокументОплаты",    ДокументОплатыОбъект.Ссылка);
		Запрос.УстановитьПараметр("Организация",       ДокументОплатыОбъект.Организация);
		
		// Т.к. у пользователя может не быть прав на некоторые объекты учета и, соответственно,
		// на некоторые документы РО, а при перепроведении типового документа нужно получить данные
		// по всем связанным РО, то устанавливаем привилегированный режим.
		УстановитьПривилегированныйРежим(Истина);
		ПакетРезультат = Запрос.ВыполнитьПакет();
		
		СтруктураОплат.Вставить("СтрокиОплат", ПакетРезультат[5].Выгрузить());
		СтруктураОплат.Вставить("РасшифровкаПлатежа", ПакетРезультат[6].Выгрузить());
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат СтруктураОплат;
	
КонецФункции // ПолучитьДанныеПоОплатам()

// Процедура выполняет корректировку значений граф Графа4 и Графа5 записи КУДиР
// в соответствии с настройками учетной политики ЖКХ.
Процедура СкорректироватьЗначенияГрафКУДиРВСоответствииСНастройкамиУПЖКХ(ДокументОбъект, ЗаписьКУДиР) Экспорт
	
	// Проверки и все дальнейшие действия актуальны на текущий момент только для 4х типов документов: ПРС, СРС, ПКО и РКО.
	// Для остальных документов выполнять дальнейшие действия не нужно!
	Если НЕ (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") 
				ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета")
				ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
				ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер")) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, имеются ли в дополнительных свойствах типовых документов отражения оплат
	// в регламентированном учете требуемые данные по корректировке значений граф "Графа4" и "Графа5"
	// регистра накопления КУДиР в соответствии с настройками Учетной политики ЖКХ.
	// При наличии требуемых значений в дополнительных свойствах документа поместим их в соответствующие переменные.
	
	СтруктураСуммКУДиР = Неопределено;
	ДанныеПоКУДиРПолны = Ложь;
	РегистрацияОплаты  = Неопределено;
	
	ДокументОбъект.ДополнительныеСвойства.Свойство("СтруктураСуммКУДиР", СтруктураСуммКУДиР);
	ДокументОбъект.ДополнительныеСвойства.Свойство("РегистрацияОплаты",  РегистрацияОплаты);
	ДокументОбъект.ДополнительныеСвойства.Свойство("ДанныеПоКУДиРПолны", ДанныеПоКУДиРПолны);
	Если ДанныеПоКУДиРПолны = Неопределено Тогда
		ДанныеПоКУДиРПолны = Ложь;
	КонецЕсли;
	
	Если СтруктураСуммКУДиР = Неопределено ИЛИ НЕ ДанныеПоКУДиРПолны Тогда
		СтруктураСуммКУДиР = ПолучитьСтруктуруСуммКУДиР(ДокументОбъект.Организация, ДокументОбъект.Дата, ДокументОбъект, РегистрацияОплаты, СтруктураСуммКУДиР);
	КонецЕсли;
	
	Если НЕ СтруктураСуммКУДиР = Неопределено Тогда
		
		// Если из-за ошибочного ведения учета или по какой-то другой причине разница,
		// на которую уменьшаем значение граф КУДиР, по модулю больше, чем само значение графы,
		// то устанавливаем значение графы в "0".
		Если ЗаписьКУДиР.Графа4 >= 0 Тогда
			ЗаписьКУДиР.Графа4 = Макс(ЗаписьКУДиР.Графа4 - (СтруктураСуммКУДиР.СуммаОплаты - СтруктураСуммКУДиР.Графа4), 0);
		Иначе
			ЗаписьКУДиР.Графа4 =  Мин(ЗаписьКУДиР.Графа4 - (СтруктураСуммКУДиР.СуммаОплаты - СтруктураСуммКУДиР.Графа4), 0);
		КонецЕсли;
		Если ЗаписьКУДиР.Графа5 >= 0 Тогда
			ЗаписьКУДиР.Графа5 = Макс(ЗаписьКУДиР.Графа5 - (СтруктураСуммКУДиР.СуммаОплаты - СтруктураСуммКУДиР.Графа5), 0);
		Иначе
			ЗаписьКУДиР.Графа5 =  Мин(ЗаписьКУДиР.Графа5 - (СтруктураСуммКУДиР.СуммаОплаты - СтруктураСуммКУДиР.Графа5), 0);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СкорректироватьЗначенияГрафКУДиРВСоответствииСНастройкамиУПЖКХ()

#КонецОбласти