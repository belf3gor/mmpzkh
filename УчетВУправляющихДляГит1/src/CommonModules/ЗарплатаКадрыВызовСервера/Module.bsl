
#Область СлужебныйПрограммныйИнтерфейс

// Проверяет необходимость обработки данных связанной с изменениями свойств организации.
// 
// Параметры:
//	СостояниеОрганизации - структура с данными организации.
//		Ссылка
//		ПрименятьРайонныйКоэффициент
//		ПрименятьСевернуюНадбавку.
//	ВозвращаемаяИнформация - структура с полями
//		ОбработатьСН
//		ОбработатьРК.
//	
// Информация возвращается в переданном параметре ВозвращаемаяИнформация.
// Если ВозвращаемаяИнформация.ОбработатьСН = Истина, то требуется обработка 
// данных по северным надбавкам (СН).
// Если ВозвращаемаяИнформация.ОбработатьРК = Истина, то требуется обработка 
// данных по районным коэффициентам (РК).
Процедура НеобходимостьОбработкиДанныхПриЗаписиОрганизации(СостояниеОрганизации, ВозвращаемаяИнформация) Экспорт
	ВозвращаемаяИнформация = Новый Структура("ОбработатьСН,ОбработатьРК,ПрименятьСевернуюНадбавку,ПрименятьРайонныйКоэффициент", Ложь, Ложь);
	Если НЕ СостояниеОрганизации.ПрименятьСевернуюНадбавку ИЛИ НЕ СостояниеОрганизации.ПрименятьРайонныйКоэффициент Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудниковОрганизаций.Организация = СостояниеОрганизации.Ссылка;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст  = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					ВТСотрудникиОрганизации КАК ОтобранныеСотрудники ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|						ПО
		|							Сотрудники.Ссылка = ОтобранныеСотрудники.Сотрудник
		|				ГДЕ
		|					Сотрудники.ТекущийПроцентСевернойНадбавки > 0
		|					И НЕ &ПрименятьСевернуюНадбавку)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбработатьСН,
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					Справочник.ПодразделенияОрганизаций КАК Подразделения
		|				ГДЕ
		|					Подразделения.Владелец = Организации.Ссылка
		|					И Подразделения.РайонныйКоэффициент <> 1
		|					И НЕ &ПрименятьРайонныйКоэффициент)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбработатьРК
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка
		|	И (Организации.ПрименятьСевернуюНадбавку <> &ПрименятьСевернуюНадбавку
		|			ИЛИ Организации.ПрименятьРайонныйКоэффициент <> &ПрименятьРайонныйКоэффициент)";
		Запрос.УстановитьПараметр("Ссылка", СостояниеОрганизации.Ссылка);
		Запрос.УстановитьПараметр("ПрименятьСевернуюНадбавку", СостояниеОрганизации.ПрименятьСевернуюНадбавку);
		Запрос.УстановитьПараметр("ПрименятьРайонныйКоэффициент", СостояниеОрганизации.ПрименятьРайонныйКоэффициент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ВозвращаемаяИнформация, Выборка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Выполняет обработку данных при записи организации.
// Список обработок передается как массив строковых идентификаторов параметром СписокОбработок.
// Параметры:
//	Организация - ссылка на организацию.
//	СписокОбработок - список обработок.
//		Поддерживаются обработки:
//			УдалитьСН - удаление данных о северных надбавках.
//			УдалитьРК - удаление данных о районных коэффициентах.
Процедура ОбработкаДанныхПриЗаписиОрганизации(Организация, СписокОбработок) Экспорт
	Для Каждого ИмяОбработки Из СписокОбработок Цикл
		НачатьТранзакцию();
		Если ИмяОбработки = "УдалитьСН" Тогда
			УдалитьСНПоОрганизации(Организация);
		ИначеЕсли ИмяОбработки = "УдалитьРК" Тогда
			УдалитьРКПоОрганизации(Организация);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьАдрес(Знач Адрес, Знач ВидАдреса = Неопределено) Экспорт
	
	Возврат РаботаСАдресами.ПроверитьАдрес(Адрес, ВидАдреса);
	
КонецФункции

Функция ДанныеРегистрацииВНалоговомОргане(СтруктурнаяЕдиница, РегистрацияВНалоговомОргане) Экспорт
	
	ДанныеРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане, "Код,Наименование,КПП,КодПоОКАТО,КодПоОКТМО");
	
	Если РегистрацияВНалоговомОргане.Владелец.Метаданные().Реквизиты.Найти("ЮридическоеФизическоеЛицо") <> Неопределено Тогда
		РеквизитЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане.Владелец, "ЮридическоеФизическоеЛицо");
		ЭтоФизическоеЛицо = РеквизитЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Иначе
		ЭтоФизическоеЛицо = Ложь;
	КонецЕсли;
	
	ДанныеРегистрации.Вставить("ВладелецФизическоеЛицо", ЭтоФизическоеЛицо);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсторияРегистрацийВНалоговомОргане.Период КАК Период
		|ИЗ
		|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
		|ГДЕ
		|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|	И ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеРегистрации.Вставить("Период", Выборка.Период);
	Иначе
		ДанныеРегистрации.Вставить("Период", Неопределено);
	КонецЕсли;
	
	Возврат ДанныеРегистрации;
	
КонецФункции

// Готовит данные выбора для справочников - классификаторов, упорядочивает по коду.
//
Процедура ПодготовитьДанныеВыбораКлассификаторовСПорядкомКодов(ДанныеВыбора, Параметры, СтандартнаяОбработка, ПолноеИмяОбъектаМетаданных) Экспорт
	
	Запрос = Новый Запрос;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 51
		|	СписокСправочника.Ссылка,
		|	СписокСправочника.Код,
		|	СписокСправочника.Наименование КАК Наименование,
		|	ИСТИНА КАК НайденПоКоду
		|ПОМЕСТИТЬ ВТОтобранныеЭлементы
		|ИЗ
		|	&СписокСправочника КАК СписокСправочника
		|ГДЕ
		|	&ТекстУсловийОтбораПоКодам
		|	И СписокСправочника.Код <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 51
		|	СписокСправочника.Ссылка,
		|	ВЫБОР
		|		КОГДА СписокСправочника.Код = """"
		|			ТОГДА ""999999999""
		|		ИНАЧЕ СписокСправочника.Код
		|	КОНЕЦ,
		|	СписокСправочника.Наименование,
		|	ЛОЖЬ
		|ИЗ
		|	&СписокСправочника КАК СписокСправочника
		|ГДЕ
		|	&ТекстУсловийОтбораПоНаименованиям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 51
		|	ОтобранныеЭлементы.Ссылка,
		|	ОтобранныеЭлементы.Код КАК Код,
		|	ОтобранныеЭлементы.Наименование КАК Наименование,
		|	МАКСИМУМ(ОтобранныеЭлементы.НайденПоКоду) КАК НайденПоКоду
		|ИЗ
		|	ВТОтобранныеЭлементы КАК ОтобранныеЭлементы
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтобранныеЭлементы.Ссылка,
		|	ОтобранныеЭлементы.Код,
		|	ОтобранныеЭлементы.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код,
		|	Наименование";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СписокСправочника", ПолноеИмяОбъектаМетаданных);
	
	УстановитьОтборВЗапросеПоПараметрам(Запрос, Параметры);
		
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		Если ДанныеВыбора.НайтиПоЗначению(Выборка.Ссылка) = Неопределено Тогда
			
			Если Выборка.НайденПоКоду Тогда
				Представление = СокрЛП(Выборка.Код) + " (" + Выборка.Наименование + ")";
			Иначе
				
				Представление = Выборка.Наименование;
				Если Не ПустаяСтрока(Выборка.Код) И Выборка.Код <> "999999999" Тогда
					Представление = Представление + " (" + СокрЛП(Выборка.Код) + ")";
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеВыбора.Добавить(Выборка.Ссылка, Представление);
			
		КонецЕсли;
		
	КонецЦикла;
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПодготовитьДанныеВыбораКлассификаторовСПорядкомРеквизитаДопУпорядочивания(ДанныеВыбора, Параметры, СтандартнаяОбработка, ПолноеИмяОбъектаМетаданных) Экспорт
	
	Запрос = Новый Запрос;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 51
		|	СписокСправочника.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(СписокСправочника.Ссылка) КАК СсылкаПредставление
		|ИЗ
		|	&СписокСправочника КАК СписокСправочника
		|ГДЕ &ТекстУсловийОтбораПоНаименованиям
		|
		|УПОРЯДОЧИТЬ ПО
		|	СписокСправочника.РеквизитДопУпорядочивания";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СписокСправочника", ПолноеИмяОбъектаМетаданных);
	
	УстановитьОтборВЗапросеПоПараметрам(Запрос, Параметры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПустаяСтрока(Параметры.СтрокаПоиска) Тогда
			Представление = Выборка.СсылкаПредставление;
		Иначе
			
			ДлинаСтрокиПоиска = СтрДлина(Параметры.СтрокаПоиска);
			Представление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(Лев(Выборка.СсылкаПредставление, ДлинаСтрокиПоиска), Новый Шрифт( , , Истина), WebЦвета.Зеленый),
				Сред(Выборка.СсылкаПредставление, ДлинаСтрокиПоиска + 1));
			
		КонецЕсли;
		
		ДанныеВыбора.Добавить(Выборка.Ссылка, Представление);
		
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Возвращает данные присоединенного к объекту файла.
//
// Параметры:	
//  ВладелецФайла      - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - Ссылка на объект-владелец файлов.
//  ИдентификаторФормы - УникальныйИдентификатор - см. РаботаСФайлами.ПолучитьДанныеФайла
//                                                 По умолчанию не задан.
//  ПолучатьСсылкуНаДвоичныеДанные - Булево      - см. РаботаСФайлами.ПолучитьДанныеФайла 
//                                                 По умолчанию - Истина.
//
// Возвращаемое значение:
//  Структура - см. РаботаСФайлами.ПолучитьДанныеФайла.
//		
Функция ПолучитьДанныеФайла(ВладелецФайла, ИдентификаторФормы = Неопределено, ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	Возврат ЗарплатаКадры.ПолучитьДанныеФайла(ВладелецФайла, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные, Ложь);	
КонецФункции


#Область ПредставленияОснованийУвольнения

Процедура ПредставленияОснованийУвольненияОбработкаПолученияДанныхВыбора(ИмяОбъекта, ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	ЗарплатаКадры.ПредставленияОснованийУвольненияОбработкаПолученияДанныхВыбора(ИмяОбъекта, ДанныеВыбора, Параметры, СтандартнаяОбработка);
КонецПроцедуры

Процедура ПредставленияОснованийУвольненияОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка) Экспорт
	ЗарплатаКадры.ПредставленияОснованийУвольненияОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВосстановитьНачальныеЗначения(Знач ИменаОбъектовМетаданных, Знач ИдентификаторФормы) Экспорт
	ИмяПроцедуры = "ЗарплатаКадры.УстановитьНачальныеЗначения";
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИменаОбъектовМетаданных", ИменаОбъектовМетаданных);
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = НСтр("ru='Установка начальных значений'");
	ПараметрыЗапуска.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыЗапуска);
КонецФункции

Процедура УдалитьСНПоОрганизации(Организация)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация = Организация;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка,
	|	Сотрудники.Наименование
	|ИЗ
	|	ВТСотрудникиОрганизации КАК ОтобранныеСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.Ссылка = ОтобранныеСотрудники.Сотрудник)
	|ГДЕ
	|	Сотрудники.ТекущийПроцентСевернойНадбавки > 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ТекущийПроцентСевернойНадбавки = 0;
		Попытка
			Объект.Заблокировать();
			Объект.Записать();
		Исключение
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru =  'Ошибка при записи сотрудника %1. Возможно, данные сотрудника редактируются другим пользователем'"), Выборка.Наименование);
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьРКПоОрганизации(Организация)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Подразделения.Ссылка,
	|	Подразделения.Наименование
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Организация
	|	И Подразделения.РайонныйКоэффициент <> 1";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.РайонныйКоэффициент = 1;
		Объект.ДополнительныеСвойства.Вставить("ОбработкаЗаписиРодителя", Истина);
		Попытка
			Объект.Заблокировать();
		Исключение
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru =  'Ошибка при записи подразделения %1. Возможно, данные подразделения редактируются другим пользователем'"), Выборка.Наименование);
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтборВЗапросеПоПараметрам(Запрос, Параметры)
	
	ТекстУсловийОтбора = "";
	
	Если Параметры.Отбор.Количество() > 0 Тогда
		
		Для каждого ЭлементОтбора Из Параметры.Отбор Цикл
			
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("ФиксированныйМассив") Тогда
				
				УсловиеСПравымЗначением = " В (&Отбор" + ЭлементОтбора.Ключ + ")";
				
			Иначе
				
				УсловиеСПравымЗначением = " = (&Отбор" + ЭлементОтбора.Ключ + ")";
				
			КонецЕсли; 
			
			ТекстУсловийОтбора = ?(ПустаяСтрока(ТекстУсловийОтбора), "", ТекстУсловийОтбора + Символы.ПС + " И ")
				+ "СписокСправочника." + ЭлементОтбора.Ключ + УсловиеСПравымЗначением;
				
			Запрос.УстановитьПараметр("Отбор" + ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Параметры.СтрокаПоиска) Тогда
		
		ТекстУсловийОтбораПоКоду = "СписокСправочника.Код ПОДОБНО &СтрокаПоиска";
		ТекстУсловийОтбораПоНаименованию = "СписокСправочника.Наименование ПОДОБНО &СтрокаПоиска";
		
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		
	Иначе
		
		ТекстУсловийОтбораПоКоду = "(ИСТИНА)";
		ТекстУсловийОтбораПоНаименованию = "(ИСТИНА)";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстУсловийОтбора) Тогда
		
		ТекстУсловийОтбораПоКоду = ?(ПустаяСтрока(ТекстУсловийОтбораПоКоду), "", ТекстУсловийОтбораПоКоду + Символы.ПС + " И ") + ТекстУсловийОтбора;
		ТекстУсловийОтбораПоНаименованию = ?(ПустаяСтрока(ТекстУсловийОтбораПоНаименованию), "", ТекстУсловийОтбораПоНаименованию + Символы.ПС + " И ") + ТекстУсловийОтбора;
		
	КонецЕсли; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловийОтбораПоКодам", ТекстУсловийОтбораПоКоду);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловийОтбораПоНаименованиям", ТекстУсловийОтбораПоНаименованию);
	
КонецПроцедуры

// Возвращает значения заполнения, передаваемые при создании нового документа из формы списка журнала
// см. описание ЗарплатаКадры.ДинамическийСписокПередНачаломДобавления.
//
Процедура ДинамическийСписокПередНачаломДобавления(ПараметрыОткрытия, ФизическоеЛицо, ОрганизацияОтбора, ТипДокумента, ИмяПоляСотрудник = "Сотрудник", ИмяПоляФизическоеЛицо = "ФизическоеЛицо") Экспорт
	ЗарплатаКадры.ДинамическийСписокПередНачаломДобавления(ПараметрыОткрытия, ФизическоеЛицо, ОрганизацияОтбора, ТипДокумента, ИмяПоляСотрудник, ИмяПоляФизическоеЛицо);
КонецПроцедуры

Функция СБазойРаботаетЕдинственныйПользователь() Экспорт
	
	СБазойРаботаетЕдинственныйПользователь = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НомерТекущегоСеанса = НомерСеансаИнформационнойБазы();
	СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		Для Каждого Сеанс Из СеансыИнформационнойБазы Цикл
			
			Если Сеанс.НомерСеанса <> НомерТекущегоСеанса
				И (Сеанс.ИмяПриложения = "1CV8"
					Или Сеанс.ИмяПриложения = "1CV8C"
					Или Сеанс.ИмяПриложения = "WebClient") Тогда
				
				СБазойРаботаетЕдинственныйПользователь = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СБазойРаботаетЕдинственныйПользователь;
	
КонецФункции

Функция ДанныеАвтоподбораЗначенияСтроковогоРеквизита(Текст, ВидСтроки) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("ВидСтроки", ВидСтроки);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСтроковыхРеквизитов.ЗначениеСтроки КАК ЗначениеСтроки
	               |ИЗ
	               |	РегистрСведений.ЗначенияСтроковыхРеквизитов КАК ЗначенияСтроковыхРеквизитов
	               |ГДЕ
	               |	ЗначенияСтроковыхРеквизитов.ВидСтроки = &ВидСтроки
	               |	И ЗначенияСтроковыхРеквизитов.ЗначениеСтроки ПОДОБНО &Текст";
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.ЗначениеСтроки);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

Функция УОрганизацииЕстьФилиалы(Знач Организация) Экспорт
	
	Возврат ЗарплатаКадрыПовтИсп.УОрганизацииЕстьФилиалы( Организация);
	
КонецФункции

#КонецОбласти
