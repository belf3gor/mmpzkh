
#Область ПрограммныйИнтерфейс

#Область ОтчетностьЗаемщика

// Возвращает пустую структуру с ключами для описания параметров формирования одного отчета
// в составе отчетности заемщика в рамках заявки на кредит.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* ВидОтчета - Строка - Идентификатор отчета как он определен в БРО.
//		* ДатаНачала - Дата - Начало периода, за который формируется отчет.
//                      Не используется для регламентированных отчетов (баланс, ОФР, налоговые декларации), 
//                      которые строятся за фиксированные периоды, для них дата начала всегда определяется по дате конца периода.
//		* ДатаОкончания - Дата - Конец периода, за который формируется отчет.
//		* Счет - ПланСчетовСсылка.Хозрасчетный - Счет бухгалтерского учета, по которому строится отчет. Используется для отчетов по бухгалтерским счетам.
//		* Банки - Массив - Содержит элементы справочника БанкиУниверсальногоОбмена, для которых требуется отчет.
//
Функция ПараметрыОтчетаЗаемщика() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ВидОтчета",      "");
	Результат.Вставить("ДатаНачала",     '0001-01-01');
	Результат.Вставить("ДатаОкончания",  '0001-01-01');
	Результат.Вставить("Счет",           ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка"));
	Результат.Вставить("Банки",          Новый Массив()); 
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Функция ПредставлениеСуммыКредита(Сумма) Экспорт 
	
	Если Сумма <= 0 Тогда
		Возврат Строка(Сумма);
	КонецЕсли;
	
	ПредставлениеСуммы = Окр(Сумма / 1000000, 3);
	
	Возврат СтрШаблон(НСтр("ru = '%1 млн'"), ПредставлениеСуммы);
	
КонецФункции

Функция ПредставлениеСрокаКредита(КоличествоМесяцев) Экспорт 
	
	Возврат СтрШаблон(НСтр("ru = '%1 мес.'"), КоличествоМесяцев);
	
КонецФункции

#КонецОбласти
	
#Область Криптография

// Возвращает пустую структуру с ключами для проверки сертификата.
//
// Возвращаемое значение:
//	Структура - см. Результат.
//
Функция ПараметрыОтбораСертификата() Экспорт

	Результат = УниверсальныйОбменСБанкамиКлиентСервер.ПараметрыОтбораСертификата(
		ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаКредит"), 
		ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
		
	// Дополнительные параметры, которые проверяются в рамках сервиса по заявка на кредит.
	Результат.Вставить("ИНН",      ""); // ИНН заемщика - юридического лица или ИП
	Результат.Вставить("ЮридическоеФизическоеЛицо", ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка"));
	// Данные руководителя юридического лица или ИП.
	Результат.Вставить("Фамилия",  "");
	Результат.Вставить("Имя",      "");
	Результат.Вставить("Отчество", "");
	Результат.Вставить("СНИЛС",    "");
	
	Возврат Результат;

КонецФункции

// Формирует строковое представление отбора по заполненным значения отбора 
// для показа пользователю на форме выбора сертификатов.
//
// Параметры:
//	ПараметрыОтбора - Структура - см. ПараметрыОтбораСертификата()
//
Функция ПредставлениеОтбораСертификата(ПараметрыОтбора) Экспорт

	Подстроки = Новый Массив; // Массив для формирования строкового представления отбора.

	// ФИО руководителя.
	Если ПараметрыОтбора.Свойство("Фамилия") Тогда
		ФИО = ФИОИзПараметровОтбораСертификата(ПараметрыОтбора);	
		Подстроки.Добавить(СтрШаблон(НСтр("ru = 'Имя владельца=%1'"), ФИО));
	КонецЕсли;

	// ИНН организации.
	ИНН = СокрЛП(ПараметрыОтбора.ИНН);
	Если ЗначениеЗаполнено(ИНН) Тогда
		Подстроки.Добавить(СтрШаблон(НСтр("ru = 'ИНН=%1'"), ИНН));
	КонецЕсли;

	// СНИЛС руководителя организации.
	// Чтобы не зависеть от формата хранения, оставляем только цифровые символы.
	СНИЛС = СокрЛП(ПараметрыОтбора.СНИЛС);
	Если ЗначениеЗаполнено(СНИЛС) Тогда
		СНИЛС = ОбщегоНазначенияБПКлиентСервер.ОставитьВСтрокеТолькоЦифры(СНИЛС);
		Подстроки.Добавить(СтрШаблон(НСтр("ru = 'СНИЛС=%1'"), СНИЛС));
	КонецЕсли;

	Если ЗначениеЗаполнено(Подстроки) Тогда
		Возврат СтрСоединить(Подстроки, НСтр("ru = ' и '"));
	КонецЕсли;

	Возврат "";

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СобытиеЖурналаРегистрации(ВариантСобытия = "") Экспорт
	
	ИмяСобытия = НСтр("ru = 'Заявки на кредит'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Если Не ПустаяСтрока(ВариантСобытия) Тогда
		ИмяСобытия = ИмяСобытия + "." + ВариантСобытия;
	КонецЕсли;

	Возврат ИмяСобытия;
	
КонецФункции

// Определяет, подходит ли сертификат для выполнения указанной операции для организации.
//
// Параметры:
//	Сертификат - СертификатКриптографии - Сертификат, для которого выполняется проверка.
//	ПараметрыОтбора - Структура - см. ПараметрыОтбораСертификата().
//	Результат - Структура - см. УниверсальныйОбменСБанкамиКлиентСервер.РезультатФункцийСоответствияОтбору().
//	
Процедура СертификатСоответствуетОтбору(Сертификат, ПараметрыОтбора, Результат) Экспорт

	ДанныеСубъекта = УниверсальныйОбменСБанкамиКлиентСервер.ДанныеСубъектаСертификата(Сертификат);

	ЮридическоеФизическоеЛицо = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбора, "ЮридическоеФизическоеЛицо");
	
	ЭтоЮрЛицо = (ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));

	// ИНН организации.
	ИНН = "";
	Если ПараметрыОтбора.Свойство("ИНН", ИНН) Тогда
		ИНН = СокрЛП(ИНН);
		
		// В реквизите ИНН сертификата могут быть впереди стоящие 0, сравниваем без их учета.
		Если (ЭтоЮрЛицо И СтрДлина(ИНН) <> 10) 
			ИЛИ (НЕ ЭтоЮрЛицо И СтрДлина(ИНН) <> 12)
			ИЛИ СтрНайти(ДанныеСубъекта.ИНН, ИНН) = 0 Тогда
			
			Результат.ПризнакСоответствия = Ложь;
			
			Если ЭтоЮрЛицо Тогда
				Результат.СообщениеДляПользователя = СтрШаблон(
					НСтр("ru='ИНН сертификата (%1) не совпадает с ИНН организации (%2)'"),
					ДанныеСубъекта.ИНН,
					ИНН);
			Иначе
				Результат.СообщениеДляПользователя = СтрШаблон(
					НСтр("ru='ИНН сертификата (%1) не совпадает с ИНН предпринимателя (%2)'"),
					ДанныеСубъекта.ИНН,
					ИНН);
			КонецЕсли;

			// Остальные поля проверять нет смысла.
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// СНИЛС владельца сертификата.
	СНИЛС = "";
	Если ПараметрыОтбора.Свойство("СНИЛС", СНИЛС) Тогда
		// Чтобы не зависеть от формата хранения, оставляем только цифровые символы.
		СНИЛС = ОбщегоНазначенияБПКлиентСервер.ОставитьВСтрокеТолькоЦифры(СНИЛС);
		СНИЛССертификата = ОбщегоНазначенияБПКлиентСервер.ОставитьВСтрокеТолькоЦифры(ДанныеСубъекта.СНИЛС);
		
		Если СНИЛС <> СНИЛССертификата Тогда
			Результат.ПризнакСоответствия = Ложь;
			Если ЭтоЮрЛицо Тогда
				Результат.СообщениеДляПользователя = СтрШаблон(
					НСтр("ru='СНИЛС владельца сертификата (%1) не совпадает со СНИЛС руководителя (%2)'"),
					СНИЛССертификата,
					СНИЛС);
			Иначе
				Результат.СообщениеДляПользователя = СтрШаблон(
					НСтр("ru='СНИЛС владельца сертификата (%1) не совпадает со СНИЛС предпринимателя (%2)'"),
					СНИЛССертификата,
					СНИЛС);
			КонецЕсли;
			
			// Остальные поля проверять нет смысла.
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// ФИО владельца сертификата
	Если ПараметрыОтбора.Свойство("Фамилия") Тогда
	
		ФИО = ФИОИзПараметровОтбораСертификата(ПараметрыОтбора);	
	
		// Проверяем точное совпадение.
		Если СокрЛП(ВРег(ФИО)) <> СокрЛП(ВРег(ДанныеСубъекта.Имя)) Тогда
			Результат.ПризнакСоответствия = Ложь;
			Если ЭтоЮрЛицо Тогда
				Результат.СообщениеДляПользователя = СтрШаблон(
					НСтр("ru='ФИО владельца сертификата (%1) не совпадает со ФИО руководителя (%2)'"),
					ДанныеСубъекта.Имя,
					ФИО);
			Иначе
				Результат.СообщениеДляПользователя = СтрШаблон(
					НСтр("ru='ФИО владельца сертификата (%1) не совпадает со ФИО предпринимателя (%2)'"),
					ДанныеСубъекта.Имя,
					ФИО);
			КонецЕсли;
			
			// Остальные поля проверять нет смысла.
			Возврат;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФИОИзПараметровОтбораСертификата(ПараметрыОтбора)

	Фамилия  = СокрЛП(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбора, "Фамилия", ""));
	Имя      = СокрЛП(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбора, "Имя", ""));
	Отчество = СокрЛП(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбора, "Отчество", ""));

	ФИО = ?(НЕ ПустаяСтрока(Фамилия), Фамилия, "") + ?(НЕ ПустаяСтрока(Имя), " " + Имя, "")
		+ ?(НЕ ПустаяСтрока(Отчество) , " " + Отчество, "");

	Возврат ФИО;

КонецФункции

#КонецОбласти