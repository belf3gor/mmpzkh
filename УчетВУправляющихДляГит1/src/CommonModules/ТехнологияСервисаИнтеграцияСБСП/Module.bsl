////////////////////////////////////////////////////////////////////////////////
// Подсистема "БазоваяФункциональность".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработка программных событий, возникающих в подсистемах БСП.
// Только для вызовов из библиотеки БСП в БТС.

#Область БазоваяФункциональность

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.РасширенияВМоделиСервиса") Тогда
		МодульРасширенияВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РасширенияВМоделиСервиса");
		МодульРасширенияВМоделиСервиса.ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок);
	КонецЕсли;
	
КонецПроцедуры

// См. ПриОтправкеДанныхГлавному в синтаксис-помощнике.
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВАвтономномРежиме");
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме.ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ПриОтправкеДанныхПодчиненному в синтаксис-помощнике.
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВАвтономномРежиме");
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме.ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ПриПолученииДанныхОтГлавного в синтаксис-помощнике.
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВАвтономномРежиме");
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме.ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ПриПолученииДанныхОтПодчиненного в синтаксис-помощнике.
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВАвтономномРежиме");
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме.ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);
		
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаВМоделиСервисаПереопределяемый.ПриВключенииРазделенияПоОбластямДанных.
Процедура ПриВключенииРазделенияПоОбластямДанных() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
		МодульТехнологияСервиса = ОбщегоНазначения.ОбщийМодуль("ТехнологияСервиса");
		МодульТехнологияСервиса.ПриВключенииРазделенияПоОбластямДанных();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервисаБТС = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервисаБТС");
		МодульРаботаВМоделиСервисаБТС.ПриВключенииРазделенияПоОбластямДанных();
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.ФайлыОбластейДанных") Тогда
		МодульФайлыОбластейДанныхСлужебный = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ФайлыОбластейДанныхСлужебный");
		МодульФайлыОбластейДанныхСлужебный.ПриВключенииРазделенияПоОбластямДанных();
	КонецЕсли;
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов.
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		МодульИнформационныйЦентрСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.УдаленноеАдминистрированиеВМоделиСервиса") Тогда
		МодульУдаленноеАдминистрированиеБТССлужебный = ОбщегоНазначения.ОбщийМодуль("УдаленноеАдминистрированиеБТССлужебный");
		МодульУдаленноеАдминистрированиеБТССлужебный.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		МодульЭлектроннаяПодписьВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервиса");
		МодульЭлектроннаяПодписьВМоделиСервиса.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ПередачаДанных") Тогда
		МодульПередачаДанныхСлужебный = ОбщегоНазначения.ОбщийМодуль("ПередачаДанныхСлужебный");
		МодульПередачаДанныхСлужебный.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ОчередьЗаданий") Тогда
		МодульОчередьЗаданийБТС = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданийБТС");
		МодульОчередьЗаданийБТС.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиентаПриЗапуске.
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры);
	КонецЕсли;
	
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиента.
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриДобавленииПараметровРаботыКлиента(Параметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		МодульЭлектроннаяПодписьВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервиса");
		МодульЭлектроннаяПодписьВМоделиСервиса.ПриДобавленииПараметровРаботыКлиента(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.МиграцияПриложений") Тогда
		МодульМиграцияПриложений = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("МиграцияПриложений");
		МодульМиграцияПриложений.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.УправлениеТарифамиВМоделиСервиса") Тогда
		МодульТарификацияСлужебный = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ТарификацияСлужебный");
		МодульТарификацияСлужебный.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ПодсистемыЦККВМоделиСервиса") Тогда
		МодульИнцидентыЦККСлужебный = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ИнцидентыЦККСлужебный");
		МодульИнцидентыЦККСлужебный.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		МодульИнформационныйЦентрСлужебный = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.ФайлыОбластейДанных") Тогда
		МодульФайлыОбластейДанныхСлужебный = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ФайлыОбластейДанныхСлужебный");
		МодульФайлыОбластейДанныхСлужебный.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеОтчетыИОбработки

// См. ИнтеграцияСТехнологиейСервиса.ПриПроверкеПраваДобавления.
Процедура ПриПроверкеПраваДобавления(Знач ДополнительнаяОбработка, Результат, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВАвтономномРежиме");
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме.ПриПроверкеПраваДобавления(ДополнительнаяОбработка, Результат, СтандартнаяОбработка);
		Если Не СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;

		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриПроверкеПраваДобавления(ДополнительнаяОбработка, Результат, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПриПроверкеВозможностиЗагрузкиОбработкиИзФайла.
Процедура ПриПроверкеВозможностиЗагрузкиОбработкиИзФайла(Знач ДополнительнаяОбработка, Результат, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВАвтономномРежиме");
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме.ПриПроверкеВозможностиЗагрузкиОбработкиИзФайла(ДополнительнаяОбработка, Результат, СтандартнаяОбработка);
		Если Не СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;

		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриПроверкеВозможностиЗагрузкиОбработкиИзФайла(ДополнительнаяОбработка, Результат, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПриПроверкеВозможностиВыгрузкиОбработкиВФайл.
Процедура ПриПроверкеВозможностиВыгрузкиОбработкиВФайл(Знач ДополнительнаяОбработка, Результат, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВАвтономномРежиме");
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме.ПриПроверкеВозможностиВыгрузкиОбработкиВФайл(ДополнительнаяОбработка, Результат, СтандартнаяОбработка);
		Если Не СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;

		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриПроверкеВозможностиВыгрузкиОбработкиВФайл(ДополнительнаяОбработка, Результат, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПриЗаполненииНедоступныхВидовПубликации.
Процедура ПриЗаполненииНедоступныхВидовПубликации(Знач НедоступныеВидыПубликации) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВАвтономномРежиме");
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме.ПриЗаполненииНедоступныхВидовПубликации(НедоступныеВидыПубликации);

		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриЗаполненииНедоступныхВидовПубликации(НедоступныеВидыПубликации);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПередЗаписьюДополнительнойОбработки.
Процедура ПередЗаписьюДополнительнойОбработки(Источник, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВАвтономномРежиме");
		МодульДополнительныеОтчетыИОбработкиВАвтономномРежиме.ПередЗаписьюДополнительнойОбработки(Источник, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;

		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПередЗаписьюДополнительнойОбработки(Источник, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПередУдалениемДополнительнойОбработки.
Процедура ПередУдалениемДополнительнойОбработки(Источник, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПередУдалениемДополнительнойОбработки(Источник, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПриПолученииРегистрационныхДанных.
Процедура ПриПолученииРегистрационныхДанных(Объект, РегистрационныеДанные, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриПолученииРегистрационныхДанных(Объект, РегистрационныеДанные, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПриПодключенииВнешнейОбработки.
Процедура ПриПодключенииВнешнейОбработки(Знач Ссылка, СтандартнаяОбработка, Результат) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриПодключенииВнешнейОбработки(Ссылка, СтандартнаяОбработка, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПриСозданииВнешнейОбработки.
Процедура ПриСозданииВнешнейОбработки(Знач Ссылка, СтандартнаяОбработка, Результат) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриСозданииВнешнейОбработки(Ссылка, СтандартнаяОбработка, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПриПолученииРазрешенийСессииБезопасногоРежима.
Процедура ПриПолученииРазрешенийСессииБезопасногоРежима(Знач КлючСессии, ОписанияРазрешений, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриПолученииРазрешенийСессииБезопасногоРежима(КлючСессии, ОписанияРазрешений, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПередОбновлениемЗадания.
Процедура ПередОбновлениемЗадания(Объект, Команда, Задание, Изменения) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПередОбновлениемЗадания(Объект, Команда, Задание, Изменения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеВерсииИБ

// Позволяет переопределить приоритет обновления сразу для всех обласей данных.
//
// Параметры:
//  Приоритет - Строка - новое значение приоритета обновления (возвращаемое). Возвращать можно следующие значения:
//              * "РаботаПользователей" - приоритет на работу пользователей.
//              * "ОбработкаДанных" - приоритет на обработку данных.
//              * Любое другое - использовать приоритет установленный в области данных (не переопределять).
//
Процедура ПриПолученииПриоритетаОбновленияВОбластяхДанных(Приоритет) Экспорт
	
	Приоритет = Константы.ПриоритетОбновленияВОбластяхДанных.Получить();
	
КонецПроцедуры

#КонецОбласти

#Область Пользователи

// См. ИнтеграцияСТехнологиейСервиса.ПриОтсутствииТекущегоПользователяВСправочнике.
Процедура ПриОтсутствииТекущегоПользователяВСправочнике(СоздатьПользователя) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервисаБТС = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервисаБТС");
		МодульПользователиСлужебныйВМоделиСервисаБТС.ПриОтсутствииТекущегоПользователяВСправочнике(СоздатьПользователя);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПриАвтоматическомСозданииТекущегоПользователяВСправочнике.
Процедура ПриАвтоматическомСозданииТекущегоПользователяВСправочнике(НовыйПользователь) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервисаБТС = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервисаБТС");
		МодульПользователиСлужебныйВМоделиСервисаБТС.ПриАвтоматическомСозданииТекущегоПользователяВСправочнике(НовыйПользователь);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПриАвторизацииНовогоПользователяИБ.
Процедура ПриАвторизацииНовогоПользователяИБ(ПользовательИБ, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервисаБТС = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервисаБТС");
		МодульПользователиСлужебныйВМоделиСервисаБТС.ПриАвторизацииНовогоПользователяИБ(ПользовательИБ, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПриАвторизацииНовогоПользователяИБ.
Процедура ПриНачалеОбработкиПользователяИБ(ПараметрыОбработки, ОписаниеПользователяИБ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервисаБТС = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервисаБТС");
		МодульПользователиСлужебныйВМоделиСервисаБТС.ПриНачалеОбработкиПользователяИБ(ПараметрыОбработки, ОписаниеПользователяИБ);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПередЗаписьюПользователяИБ.
Процедура ПередЗаписьюПользователяИБ(ПользовательИБ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервисаБТС = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервисаБТС");
		МодульПользователиСлужебныйВМоделиСервисаБТС.ПередЗаписьюПользователяИБ(ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПередУдалениемПользователяИБ.
Процедура ПередУдалениемПользователяИБ(ПользовательИБ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервисаБТС = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервисаБТС");
		МодульПользователиСлужебныйВМоделиСервисаБТС.ПередЗаписьюПользователяИБ(ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрофилиБезопасности

// См. ИнтеграцияСТехнологиейСервиса.ПриПроверкеВозможностиНастройкиПрофилейБезопасности.
Процедура ПриПроверкеВозможностиНастройкиПрофилейБезопасности(Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриПроверкеВозможностиНастройкиПрофилейБезопасности(Отказ);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗапросеРазрешенийНаИспользованиеВнешнихРесурсов.
Процедура ПриЗапросеРазрешенийНаИспользованиеВнешнихРесурсов(Знач ПрограммныйМодуль, Знач Владелец, Знач РежимЗамещения, Знач ДобавляемыеРазрешения, Знач УдаляемыеРазрешения, СтандартнаяОбработка, Результат) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриЗапросеРазрешенийНаИспользованиеВнешнихРесурсов(ПрограммныйМодуль, Владелец, РежимЗамещения, ДобавляемыеРазрешения, УдаляемыеРазрешения, СтандартнаяОбработка, Результат);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗапросеСозданияПрофиляБезопасности.
Процедура ПриЗапросеСозданияПрофиляБезопасности(Знач ПрограммныйМодуль, СтандартнаяОбработка, Результат) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриЗапросеСозданияПрофиляБезопасности(ПрограммныйМодуль, СтандартнаяОбработка, Результат);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗапросеУдаленияПрофиляБезопасности.
Процедура ПриЗапросеУдаленияПрофиляБезопасности(Знач ПрограммныйМодуль, СтандартнаяОбработка, Результат) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриЗапросеУдаленияПрофиляБезопасности(ПрограммныйМодуль, СтандартнаяОбработка, Результат);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриПодключенииВнешнегоМодуля.
Процедура ПриПодключенииВнешнегоМодуля(Знач ВнешнийМодуль, БезопасныйРежим) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриПодключенииВнешнегоМодуля(ВнешнийМодуль, БезопасныйРежим);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВМоделиСервиса_БазоваяФункциональностьВМоделиСервиса

// См. РаботаВМоделиСервисаПереопределяемый.ПриЗаполненииТаблицыПараметровИБ.
Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		МодульИнформационныйЦентрСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров);
		
		МодульРаботаВМоделиСервисаБТС = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервисаБТС");
		МодульРаботаВМоделиСервисаБТС.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.РасширенияВМоделиСервиса") Тогда
		МодульРасширенияВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РасширенияВМоделиСервиса");
		МодульРасширенияВМоделиСервиса.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		МодульЭлектроннаяПодписьВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервиса");
		МодульЭлектроннаяПодписьВМоделиСервиса.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПриОпределенииПсевдонимаПользователя.
Процедура ПриОпределенииПсевдонимаПользователя(ИдентификаторПользователя, Псевдоним) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервисаБТС = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервисаБТС");
		МодульПользователиСлужебныйВМоделиСервисаБТС.ПриОпределенииПсевдонимаПользователя(ИдентификаторПользователя, Псевдоним);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСТехнологиейСервиса.ПриОпределенииИсключенийНеразделенныхДанных.
Процедура ПриОпределенииИсключенийНеразделенныхДанных(Исключения) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ПодсистемыЦККВМоделиСервиса") Тогда
		МодульИнцидентыЦККСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнцидентыЦККСлужебный");
		МодульИнцидентыЦККСлужебный.ПриОпределенииИсключенийНеразделенныхДанных(Исключения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВМоделиСервиса_ОбменСообщениями

// См. ОбменСообщениямиПереопределяемый.ПолучитьОбработчикиКаналовСообщений.
Процедура ПриОпределенииОбработчиковКаналовСообщений(Обработчики) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		МодульИнформационныйЦентрСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.ПриОпределенииОбработчиковКаналовСообщений(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриОпределенииОбработчиковКаналовСообщений(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ОчередьЗаданий") Тогда
		МодульОчередьЗаданийБТС = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданийБТС");
		МодульОчередьЗаданийБТС.ПриОпределенииОбработчиковКаналовСообщений(Обработчики);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтерфейсыСообщенийВМоделиСервисаПереопределяемый.ЗаполнитьОбработчикиПринимаемыхСообщений.
Процедура РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		МодульИнформационныйЦентрСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.РасширенияВМоделиСервиса") Тогда
		МодульРасширенияВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РасширенияВМоделиСервиса");
		МодульРасширенияВМоделиСервиса.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.УдаленноеАдминистрированиеВМоделиСервиса") Тогда
		МодульУдаленноеАдминистрированиеСлужебный = ОбщегоНазначения.ОбщийМодуль("УдаленноеАдминистрированиеСлужебный");
		МодульУдаленноеАдминистрированиеСлужебный.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.УправлениеТарифамиВМоделиСервиса") Тогда
		МодульТарификацияСлужебный = ОбщегоНазначения.ОбщийМодуль("ТарификацияСлужебный");
		МодульТарификацияСлужебный.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтерфейсыСообщенийВМоделиСервисаПереопределяемый.ЗаполнитьОбработчикиОтправляемыхСообщений.
Процедура РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.РасширенияВМоделиСервиса") Тогда
		МодульРасширенияВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РасширенияВМоделиСервиса");
		МодульРасширенияВМоделиСервиса.РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.УдаленноеАдминистрированиеВМоделиСервиса") Тогда
		МодульУдаленноеАдминистрированиеСлужебный = ОбщегоНазначения.ОбщийМодуль("УдаленноеАдминистрированиеСлужебный");
		МодульУдаленноеАдминистрированиеСлужебный.РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.УправлениеТарифамиВМоделиСервиса") Тогда
		МодульТарификацияСлужебный = ОбщегоНазначения.ОбщийМодуль("ТарификацияСлужебный");
		МодульТарификацияСлужебный.РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтерфейсыСообщенийВМоделиСервисаПереопределяемый.ПриОпределенииВерсииИнтерфейсаКорреспондента.
Процедура ПриОпределенииВерсииИнтерфейсаКорреспондента(Знач ИнтерфейсСообщения, Знач ПараметрыПодключения, Знач ПредставлениеПолучателя, Результат) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриОпределенииВерсииИнтерфейсаКорреспондента(ИнтерфейсСообщения, ПараметрыПодключения, ПредставлениеПолучателя, Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВМоделиСервиса_ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.РасширенияВМоделиСервиса") Тогда
		МодульРасширенияВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РасширенияВМоделиСервиса");
		МодульРасширенияВМоделиСервиса.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервисаБТС = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервисаБТС");
		МодульРаботаВМоделиСервисаБТС.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.МиграцияПриложений") Тогда
		МодульМиграцияПриложений = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("МиграцияПриложений");
		МодульМиграцияПриложений.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
    
    Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.ПоставляемыеДанныеОбластейДанных") Тогда
        МодульПоставляемыеДанныеОбластейДанных = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ПоставляемыеДанныеОбластейДанных");
        МодульПоставляемыеДанныеОбластейДанных.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
    
    Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.ИнтеграцияОбъектовОбластейДанных") Тогда
        МодульИнтеграцияОбъектовОбластейДанных = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("ИнтеграцияОбъектовОбластейДанных");
        МодульИнтеграцияОбъектовОбластейДанных.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
    
    Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("ТехнологияСервиса.АсинхронноеПолучениеДанных") Тогда
        МодульАсинхронноеПолучениеДанных = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("АсинхронноеПолучениеДанных");
        МодульАсинхронноеПолучениеДанных.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
    КонецЕсли; 
    
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииОбработчиковОшибок.
Процедура ПриОпределенииОбработчиковОшибок(ОбработчикиОшибок) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервисаБТС = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервисаБТС");
		МодульРаботаВМоделиСервисаБТС.ПриОпределенииОбработчиковОшибок(ОбработчикиОшибок);
	КонецЕсли;
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииИспользованияРегламентныхЗаданий.
Процедура ПриОпределенииИспользованияРегламентныхЗаданий(ТаблицаИспользования) Экспорт
КонецПроцедуры

#КонецОбласти

#Область РаботаВМоделиСервиса_ПоставляемыеДанные

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных.
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		МодульИнформационныйЦентрСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		МодульОбменДаннымиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		МодульОбменДаннымиВМоделиСервиса.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.РасширенияВМоделиСервиса") Тогда
		МодульРасширенияВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РасширенияВМоделиСервиса");
		МодульРасширенияВМоделиСервиса.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ВнешниеКомпонентыВМоделиСервиса") Тогда
		МодульВнешниеКомпонентыВМоделиСервисаСлужебный = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыВМоделиСервисаСлужебный");
		МодульВнешниеКомпонентыВМоделиСервисаСлужебный.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. ИнтеграцияСТехнологиейСервиса.ПриОбновленииРолейПользователяИБ.
Процедура ПриОбновленииРолейПользователяИБ(ИдентификаторПользователяИБ, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса") Тогда
		МодульУправлениеДоступомСлужебныйВМоделиСервисаБТС = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебныйВМоделиСервисаБТС");
		МодульУправлениеДоступомСлужебныйВМоделиСервисаБТС.ПриОбновленииРолейПользователяИБ(ИдентификаторПользователяИБ, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВМоделиСервиса_БазоваяФункциональностьВМоделиСервиса

// См. РаботаВМоделиСервисаПереопределяемый.ПриУстановкеЗначенийПараметровИБ.
Процедура ПриУстановкеЗначенийПараметровИБ(Знач ЗначенияПараметров) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса") Тогда
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиВМоделиСервиса");
		МодульДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриУстановкеЗначенийПараметровИБ(ЗначенияПараметров);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		МодульИнформационныйЦентрСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.ПриУстановкеЗначенийПараметровИБ(ЗначенияПараметров);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.РасширенияВМоделиСервиса") Тогда
		МодульРасширенияВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РасширенияВМоделиСервиса");
		МодульРасширенияВМоделиСервиса.ПриУстановкеЗначенийПараметровИБ(ЗначенияПараметров);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.УдаленноеАдминистрированиеВМоделиСервиса") Тогда
		МодульУдаленноеАдминистрированиеСлужебный = ОбщегоНазначения.ОбщийМодуль("УдаленноеАдминистрированиеСлужебный");
		МодульУдаленноеАдминистрированиеСлужебный.ПриУстановкеЗначенийПараметровИБ(ЗначенияПараметров);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		МодульЭлектроннаяПодписьВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервиса");
		МодульЭлектроннаяПодписьВМоделиСервиса.ПриУстановкеЗначенийПараметровИБ(ЗначенияПараметров);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Базовая функциональность

// См. ОбщегоНазначения.СоздатьWSПрокси()
//
Функция СоздатьWSПрокси(ПараметрыПодключения) Экспорт
	
	Возврат ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
	
КонецФункции

// См. ОбщегоНазначения.ПараметрыПодключенияWSПрокси()
//
Функция ПараметрыПодключенияWSПрокси() Экспорт
	
	Возврат ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	
КонецФункции

// См. ОбщегоНазначения.ЗначениеВСтрокуXML()
//
Функция ЗначениеВСтрокуXML(Знач Значение) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(Значение);
	
КонецФункции

// См. РаботаВМоделиСервиса.УстановитьРазделениеСеанса()
//
Процедура УстановитьРазделениеСеанса(Знач Использование, Знач ОбластьДанных = Неопределено) Экспорт
	
	РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Использование, ОбластьДанных);
	
КонецПроцедуры

// См. ОбщегоНазначения.ИспользованиеРазделителяСеанса()
//
Функция ИспользованиеРазделителяСеанса() Экспорт
	
	Возврат ОбщегоНазначения.ИспользованиеРазделителяСеанса();
	
КонецФункции

// См. ОбщегоНазначения.ЗаблокироватьИБ()
//
Процедура ЗаблокироватьИБ(Знач ПроверитьОтсутствиеДругихСеансов = Истина) Экспорт
	
	ОбщегоНазначения.ЗаблокироватьИБ(ПроверитьОтсутствиеДругихСеансов);
	
КонецПроцедуры

// См. ОбщегоНазначения.РазблокироватьИБ()
//
Процедура РазблокироватьИБ() Экспорт
	
	ОбщегоНазначения.РазблокироватьИБ();
	
КонецПроцедуры

// См. ОбщегоНазначения.ПредметСтрокой()
//
Функция ПредметСтрокой(Знач СсылкаНаПредмет) Экспорт
	
	Возврат ОбщегоНазначения.ПредметСтрокой(СсылкаНаПредмет);
	
КонецФункции

// См. ОбщегоНазначенияПовтИсп.РазделениеВключено()
//
Функция РазделениеВключено() Экспорт
	
	Возврат РаботаВМоделиСервиса.РазделениеВключено();
	
КонецФункции

// См. ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
//
Функция ДоступноИспользованиеРазделенныхДанных() Экспорт
	
	Возврат ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	
КонецФункции

// См. ОбщегоНазначенияПовтИсп.ЗначениеРазделителяСеанса()
//
Функция ЗначениеРазделителяСеанса() Экспорт
	
	Возврат РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	
КонецФункции

// См. ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных()
//
Функция РазделительВспомогательныхДанных() Экспорт
	
	Возврат РаботаВМоделиСервиса.РазделительВспомогательныхДанных();
	
КонецФункции

// См. ОбщегоНазначения.ИдентификаторОбъектаМетаданных()
//
Функция ИдентификаторОбъектаМетаданных(ИдентификаторОбъектаМетаданных) Экспорт
	
	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ИдентификаторОбъектаМетаданных)
	
КонецФункции

// См. ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище()
//
Процедура ЗаписатьДанныеВБезопасноеХранилище(Владелец, Данные, Ключ = "Пароль") Экспорт
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, Данные, Ключ);
	
КонецПроцедуры

// См. ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища()
//
Функция ПрочитатьДанныеИзБезопасногоХранилища(Владелец, Ключи = "Пароль", ОбщиеДанные = Ложь) Экспорт
	
	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, Ключи, ОбщиеДанные);
	
КонецФункции

// См. ОбщегоНазначения.ЗначениеРеквизитаОбъекта()
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОбщегоНазначенияКлиентСервер

// См. ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует()
//
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
	
	Возврат ОбщегоНазначения.ПодсистемаСуществует(ПолноеИмяПодсистемы);
	
КонецФункции

// См. ОбщегоНазначенияКлиентСервер.ОбщийМодуль()
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Возврат ОбщегоНазначения.ОбщийМодуль(Имя);
	
КонецФункции

// См. ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
//
Функция КодОсновногоЯзыка() Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	
КонецФункции

// См. ОбщегоНазначенияКлиентСервер.СравнитьВерсии()
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтрокаВерсии1, СтрокаВерсии2);
	
КонецФункции

// См. ОбщегоНазначенияКлиентСервер.СообщитьПользователю()
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияПользователю,
		КлючДанных,	Поле, ПутьКДанным, Отказ);
	
КонецПроцедуры

// См. ОбщегоНазначенияКлиентСервер.МенеджерОбъектаПоПолномуИмени()
//
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных) Экспорт
	
	Возврат ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных)
	
КонецФункции

// См. ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу()
//
Процедура ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник);
	
КонецПроцедуры

// См. ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами()
//
Функция РазобратьСтрокуСПочтовымиАдресами(Знач СтрокаПереданныхАдресов, ВызыватьИсключение = Истина) Экспорт 
	
	Возврат ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаПереданныхАдресов, ВызыватьИсключение);
	
КонецФункции

// См. ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла()
//
Функция РазложитьПолноеИмяФайла(Знач ПолноеИмяФайла, ЭтоПапка = Ложь) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла, ЭтоПапка);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СтроковыеФункцииКлиентСервер

// См. СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор()
//
Функция ЭтоУникальныйИдентификатор(Знач Строка) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Строка);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен данными

// См. ОбменДаннымиСервер.СтруктураПараметровWS()
//
Функция СтруктураПараметровWS() Экспорт
	
	Возврат ОбменДаннымиСервер.СтруктураПараметровWS();
	
КонецФункции

// См. ОбменДаннымиСервер.ПараметрыОбмена()
//
Функция ПараметрыОбмена() Экспорт
	
	Возврат ОбменДаннымиСервер.ПараметрыОбмена();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Базовая функциональность в модели сервиса

// См. СообщенияВМоделиСервисаПовтИсп.ТипТело()
//
Функция ТипТело() Экспорт 
	
	Возврат СообщенияВМоделиСервисаПовтИсп.ТипТело();
	
КонецФункции

// См. РаботаВМоделиСервиса.ПараметрыВыборки()
//
Функция ПараметрыВыборки(ПолноеИмяОбъектаМетаданных) Экспорт 
	
	Возврат РаботаВМоделиСервиса.ПараметрыВыборки(ПолноеИмяОбъектаМетаданных);
	
КонецФункции

// См. РаботаВМоделиСервиса.ЗаблокироватьТекущуюОбластьДанных()
//
Процедура ЗаблокироватьТекущуюОбластьДанных(Знач ПроверитьОтсутствиеДругихСеансов = Ложь, Знач РазделяемаяБлокировка = Ложь) Экспорт
	
	РаботаВМоделиСервиса.ЗаблокироватьТекущуюОбластьДанных(ПроверитьОтсутствиеДругихСеансов, РазделяемаяБлокировка);
	
КонецПроцедуры

// См. РаботаВМоделиСервиса.РазблокироватьТекущуюОбластьДанных()
//
Процедура РазблокироватьТекущуюОбластьДанных() Экспорт
	
	РаботаВМоделиСервиса.РазблокироватьТекущуюОбластьДанных();
	
КонецПроцедуры

// См. РаботаВМоделиСервисаПовтИсп.ПолучитьМодельДанныхОбласти()
//
Функция ПолучитьМодельДанныхОбласти() Экспорт
	
	Возврат РаботаВМоделиСервисаПовтИсп.ПолучитьМодельДанныхОбласти();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен сообщениями

// См. ОбменСообщениями.ОтправитьСообщение()
//
Процедура ОтправитьСообщение(КаналСообщений, ТелоСообщения, Получатель) Экспорт
	
	ОбменСообщениями.ОтправитьСообщение(КаналСообщений, ТелоСообщения, Получатель);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Пользователи

// См. Пользователи.ЭтоПолноправныйПользователь()
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(Пользователь, ПроверятьПраваАдминистрированияСистемы, УчитыватьПривилегированныйРежим);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интеграция ВызовОнлайнПоддержки

// См. ВызовОнлайнПоддержки.ПриСозданииНаСервере()
//
Процедура ИнтеграцияВызовОнлайнПоддержкиПриСозданииНаСервере(Элемент) Экспорт
	
	ВызовОнлайнПоддержки.ПриСозданииНаСервере(Элемент);
	
КонецПроцедуры

// См. РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса()
//
Функция КонечнаяТочкаМенеджераСервиса() Экспорт
	
	Возврат РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса();
	
КонецФункции

#КонецОбласти

#Область УсловныеВызовыВБСПНаОбработчикиСобытий

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке.
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	ИнтеграцияСТехнологиейСервиса.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке.
Процедура ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	ИнтеграцияСТехнологиейСервиса.ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке(Типы);
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	ИнтеграцияСТехнологиейСервиса.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриРегистрацииОбработчиковВыгрузкиДанных.
Процедура ПриРегистрацииОбработчиковВыгрузкиДанных(ТаблицаОбработчиков) Экспорт
	
	ИнтеграцияСТехнологиейСервиса.ПриРегистрацииОбработчиковВыгрузкиДанных(ТаблицаОбработчиков);
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиДанных.
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	ИнтеграцияСТехнологиейСервиса.ПослеЗагрузкиДанных(Контейнер);
	
КонецПроцедуры


#КонецОбласти
