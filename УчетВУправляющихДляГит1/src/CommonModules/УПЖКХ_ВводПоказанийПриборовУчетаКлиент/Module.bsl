
#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура выполняет проверку введенных показаний.
//
Процедура ПроверитьПоказания(Форма, НеобходимоПереместитьКурсор = Ложь, ВводОднойСтроки = Ложь) Экспорт
	
	СтруктураРезультатовПроверки = Новый Структура("КоличествоСтрокСОшибками, КоличествоСтрокПереходаЧерезНоль, КоличествоСтрокСОтрицательнымРасходом, АдресХранилищаИдентификатораИсходнойСтрокиДляОтбораСтрокСОшибками", 0, 0, 0, Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураРезультатовПроверки, Форма);
	
	Если ВводОднойСтроки Тогда
		
		Если НЕ Форма.Элементы.ДеревоПоказаний.ТекущиеДанные = Неопределено Тогда
			ПроверитьПоказанияВСтроке(СтруктураРезультатовПроверки, Форма.ДеревоПоказаний.НайтиПоИдентификатору(Форма.Элементы.ДеревоПоказаний.ТекущиеДанные.ПолучитьИдентификатор()), НеобходимоПереместитьКурсор, Форма.ОтображатьТолькоСтрокиСОшибками);
		КонецЕсли;
		
	Иначе
		
		ПроверитьПоказанияВДереве(Форма.ДеревоПоказаний, СтруктураРезультатовПроверки, Форма.ОтображатьТолькоСтрокиСОшибками, НеобходимоПереместитьКурсор);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Форма, СтруктураРезультатовПроверки);
	
КонецПроцедуры // ПроверитьПоказания()

// Процедура проверяет показания в текущей строке дерева показаний.
//
Процедура ПроверитьПоказанияВСтроке(СтруктураРезультатовПроверки, ТекСтрока, НеобходимоПереместитьКурсор, ОтображатьТолькоСтрокиСОшибками, РазмерДопустимогоПревышенияСреднегоРасхода = Неопределено, ИспользоватьКонтрольПоказанийПриборовУчета = Неопределено)
	
	// 1. Определяем информацию по показаниям до текущей проверки.
	
	Если РазмерДопустимогоПревышенияСреднегоРасхода = Неопределено Тогда
		РазмерДопустимогоПревышенияСреднегоРасхода = УПЖКХ_ПараметрыУчетаСервер.РазмерДопустимогоПревышенияСреднегоРасходаПрибораУчета();
	КонецЕсли;
	
	Если ИспользоватьКонтрольПоказанийПриборовУчета = Неопределено Тогда
		ИспользоватьКонтрольПоказанийПриборовУчета = УПЖКХ_ПараметрыУчетаСервер.ИспользоватьКонтрольПоказанийПриборовУчета();
	КонецЕсли;
	
	// Наличие ошибок до текущей проверки.
	БылиОшибкиВСтроке = ОпределитьНаличиеОшибокВСтрокеПоказаний(ТекСтрока);
	
	// Наличие перехода через ноль до текущей проверки.
	БылПереходЧерезНольВСтроке = ОпределитьНаличиеПереходаЧерезНольВСтрокеПоказаний(ТекСтрока);
	
	// Наличие отрицательного расхода до текущей проверки.
	БылОтрицательныйРасходВСтроке = ОпределитьНаличиеОтрицательногоРасходаВСтрокеПоказаний(ТекСтрока);
	
	// 2. Выполняем текущую проверку.
	
	// Получим тарифность текущего ПУ для проверки перехода через ноль.
	ТекСтрока.ТарифностьСчетчика = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьТарифностьЧислом(ТекСтрока.Тарифность);
	
	// Заполнение результатов проверки показаний.
	УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ЗаполнитьПризнакиОшибокВПоказаниях(ТекСтрока, РазмерДопустимогоПревышенияСреднегоРасхода, ИспользоватьКонтрольПоказанийПриборовУчета);
	
	// 3. Анализируем результаты текущей проверки.
	ЕстьОшибкиВСтроке              = ОпределитьНаличиеОшибокВСтрокеПоказаний(ТекСтрока);
	ЕстьПереходЧерезНольВСтроке    = ОпределитьНаличиеПереходаЧерезНольВСтрокеПоказаний(ТекСтрока);
	ЕстьОтрицательныйРасходВСтроке = ОпределитьНаличиеОтрицательногоРасходаВСтрокеПоказаний(ТекСтрока);
	
	// 4. Обрабатываем динамические результаты текущей проверки.
	
	// Изменения по ошибкам.
	Если Не БылиОшибкиВСтроке И ЕстьОшибкиВСтроке Тогда
		СтруктураРезультатовПроверки.КоличествоСтрокСОшибками = СтруктураРезультатовПроверки.КоличествоСтрокСОшибками + 1;
	ИначеЕсли БылиОшибкиВСтроке И Не ЕстьОшибкиВСтроке Тогда
		СтруктураРезультатовПроверки.КоличествоСтрокСОшибками = СтруктураРезультатовПроверки.КоличествоСтрокСОшибками - 1;
		
		// Если ошибка показаний устранена, и в диалоге отобраны строки только с ошибками,
		// то нужно спозиционироваться на следующей строке с ошибкой или первой, если следующей нет.
		Если ОтображатьТолькоСтрокиСОшибками Тогда
			СтруктураРезультатовПроверки.АдресХранилищаИдентификатораИсходнойСтрокиДляОтбораСтрокСОшибками = ПоместитьВоВременноеХранилище(ТекСтрока.ПолучитьИдентификатор(), Новый УникальныйИдентификатор);
			НеобходимоПереместитьКурсор = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Изменения по переходам через ноль.
	Если Не БылПереходЧерезНольВСтроке И ЕстьПереходЧерезНольВСтроке Тогда
		СтруктураРезультатовПроверки.КоличествоСтрокПереходаЧерезНоль = СтруктураРезультатовПроверки.КоличествоСтрокПереходаЧерезНоль + 1;
	ИначеЕсли БылПереходЧерезНольВСтроке И Не ЕстьПереходЧерезНольВСтроке Тогда
		СтруктураРезультатовПроверки.КоличествоСтрокПереходаЧерезНоль = СтруктураРезультатовПроверки.КоличествоСтрокПереходаЧерезНоль - 1;
	КонецЕсли;
	
	// Изменения по отрицательному расходу.
	Если Не БылОтрицательныйРасходВСтроке И ЕстьОтрицательныйРасходВСтроке Тогда
		СтруктураРезультатовПроверки.КоличествоСтрокСОтрицательнымРасходом = СтруктураРезультатовПроверки.КоличествоСтрокСОтрицательнымРасходом + 1;
	ИначеЕсли БылОтрицательныйРасходВСтроке И Не ЕстьОтрицательныйРасходВСтроке Тогда
		СтруктураРезультатовПроверки.КоличествоСтрокСОтрицательнымРасходом = СтруктураРезультатовПроверки.КоличествоСтрокСОтрицательнымРасходом - 1;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПоказанияВСтроке()

// Процедура помещает данные о текущей строке во временное хранилище.
//
Процедура ПоместитьДанныеОТекущейСтрокеВХранилище(ТекущиеДанные, АдресХранилищаДанныхСтроки) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мСтруктураРедСтроки = Новый Структура;
	мСтруктураРедСтроки.Вставить("Счетчик",          ТекущиеДанные.Счетчик);
	мСтруктураРедСтроки.Вставить("ДатаПоказания",    ТекущиеДанные.ДатаПоказания);
	мСтруктураРедСтроки.Вставить("ДневноеПоказаниеИсходное", ТекущиеДанные.ДневноеПоказание);
	мСтруктураРедСтроки.Вставить("НочноеПоказаниеИсходное",  ТекущиеДанные.НочноеПоказание);
	мСтруктураРедСтроки.Вставить("ПиковоеПоказаниеИсходное", ТекущиеДанные.ПиковоеПоказание);
	
	мСтруктураРедСтроки.Вставить("ИзмененоДневноеПоказание", Ложь);
	мСтруктураРедСтроки.Вставить("ИзмененоНочноеПоказание",  Ложь);
	мСтруктураРедСтроки.Вставить("ИзмененоПиковоеПоказание", Ложь);
	
	// Для редактирования показаний нам необходимо временно занулить не введенные показания.
	// Если пустое показание так и не было введено, мы вернем ему пустое значение.
	ТекущиеДанные.ДневноеПоказание = ?(ТекущиеДанные.ДневноеПоказание = Неопределено, 0, ТекущиеДанные.ДневноеПоказание);
	ТекущиеДанные.НочноеПоказание  = ?(ТекущиеДанные.НочноеПоказание  = Неопределено, 0, ТекущиеДанные.НочноеПоказание);
	ТекущиеДанные.ПиковоеПоказание = ?(ТекущиеДанные.ПиковоеПоказание = Неопределено, 0, ТекущиеДанные.ПиковоеПоказание);
	
	мСтруктураРедСтроки.Вставить("ДневноеПоказание", ТекущиеДанные.ДневноеПоказание);
	мСтруктураРедСтроки.Вставить("НочноеПоказание",  ТекущиеДанные.НочноеПоказание);
	мСтруктураРедСтроки.Вставить("ПиковоеПоказание", ТекущиеДанные.ПиковоеПоказание);
	
	АдресХранилищаДанныхСтроки = ПоместитьВоВременноеХранилище(мСтруктураРедСтроки, Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура обрабатывает окончание редактирования дерева показаний.
//
Процедура ОбработатьОкончаниеРедактированияДерева(ТекущиеДанные, НоваяСтрока, АдресХранилищаДанныхСтроки, ДеревоПоказаний = Неопределено, ВызовИзДокумента = Ложь) Экспорт
	
	мСтруктураРедСтроки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныхСтроки);
	
	Если мСтруктураРедСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВызовИзДокумента Тогда
		
		ЭлементыДерева = ДеревоПоказаний.ПолучитьЭлементы();
		
		Если НоваяСтрока Тогда
			ТекНомер = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПроверитьНаличиеСчетчикаВТаблице(ТекущиеДанные.Счетчик, ДеревоПоказаний);
			Если ТекНомер >=0 И (ТекНомер + 1 <> ТекущиеДанные.Номер) Тогда
				ЭлементыДерева.Удалить(ТекущиеДанные);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущиеДанные.ПолучитьРодителя() = Неопределено И ТекущиеДанные.Счетчик = ПредопределенноеЗначение("Справочник.КВП_Счетчики.ПустаяСсылка") Тогда
			ЭлементыДерева.Удалить(ТекущиеДанные);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если мСтруктураРедСтроки.ИзмененоДневноеПоказание Тогда
		ТекущиеДанные.ДневноеПоказание = мСтруктураРедСтроки.ДневноеПоказание;
	Иначе
		Если Не ТекущиеДанные.ДневноеПоказание = Неопределено Тогда
			ТекущиеДанные.ДневноеПоказание = мСтруктураРедСтроки.ДневноеПоказаниеИсходное;
		КонецЕсли;
	КонецЕсли;
	
	Если мСтруктураРедСтроки.ИзмененоНочноеПоказание Тогда
		ТекущиеДанные.НочноеПоказание = мСтруктураРедСтроки.НочноеПоказание;
	Иначе
		Если Не ТекущиеДанные.НочноеПоказание = Неопределено Тогда
			ТекущиеДанные.НочноеПоказание = мСтруктураРедСтроки.НочноеПоказаниеИсходное;
		КонецЕсли;
	КонецЕсли;
	
	Если мСтруктураРедСтроки.ИзмененоПиковоеПоказание Тогда
		ТекущиеДанные.ПиковоеПоказание = мСтруктураРедСтроки.ПиковоеПоказание;
	Иначе
		Если Не ТекущиеДанные.ПиковоеПоказание = Неопределено Тогда
			ТекущиеДанные.ПиковоеПоказание = мСтруктураРедСтроки.ПиковоеПоказаниеИсходное;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает изменение данных в колонке "Дневное показание".
//
Процедура ОбработатьИзменениеДневногоПоказания(АдресХранилищаДанныхСтроки, ТекущиеДанные, ВызовИзДокумента = Ложь) Экспорт
	
	мСтруктураРедСтроки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныхСтроки);
	
	Если мСтруктураРедСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоказаний = Новый Структура("НомерСтроки, Счетчик, ДневноеПоказание, ДневноеПоказаниеПредыдущее, Разрядность, Тарифность, СпособРегистрацииПоказаний",
										  ТекущиеДанные.Номер, ТекущиеДанные.Счетчик, ТекущиеДанные.ДневноеПоказание,
										  ТекущиеДанные.ДневноеПоказаниеПредыдущее, ТекущиеДанные.Разрядность,
										  ТекущиеДанные.Тарифность, ТекущиеДанные.СпособРегистрацииПоказаний);
	
	ВведеныКорректныеПоказания = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПроверитьКорректностьПоказанийСчетчика(СтруктураПоказаний);
	
	Если Не ВведеныКорректныеПоказания Тогда
		ТекущиеДанные.ДневноеПоказание = мСтруктураРедСтроки.ДневноеПоказание;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ДневноеПоказание = Неопределено Тогда
		
		Если ВведеныКорректныеПоказания Тогда
			
			ТекущиеДанные.ДневноеПоказаниеРасход = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(СтруктураПоказаний, "ДневноеПоказание");
			
			Если ВызовИзДокумента Тогда
				ТекущиеДанные.ДневноеПоказаниеРасходПриведенный = ТекущиеДанные.ДневноеПоказаниеРасход
																* ТекущиеДанные.КоэффициентТрансформации
																* ТекущиеДанные.ТемпературныйКоэффициент;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущиеДанные.ПустоеДневноеПоказание = Ложь;
		
	Иначе
		ТекущиеДанные.ПустоеДневноеПоказание = Истина;
	КонецЕсли;
	
	СтруктураСреднихРасходов = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьСреднийРасход(ТекущиеДанные.Счетчик, ТекущиеДанные.ДатаПоказания, 6); // Структура: "Дневной", "Ночной", "Пиковый".
	
	ТекущиеДанные.СреднийРасходДневной = СтруктураСреднихРасходов.Дневной;
	ТекущиеДанные.ПоказанияКорректны   = Ложь;
	
	мСтруктураРедСтроки.Вставить("ИзмененоДневноеПоказание", Истина);
	мСтруктураРедСтроки.Вставить("ДневноеПоказание",         ТекущиеДанные.ДневноеПоказание);
	
	АдресХранилищаДанныхСтроки = ПоместитьВоВременноеХранилище(мСтруктураРедСтроки, Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура обрабатывает изменение данных в колонке "Ночное показание".
//
Процедура ОбработатьИзменениеНочногоПоказания(АдресХранилищаДанныхСтроки, ТекущиеДанные, ВызовИзДокумента = Ложь) Экспорт
	
	мСтруктураРедСтроки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныхСтроки);
	
	Если мСтруктураРедСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоказаний = Новый Структура("НомерСтроки, Счетчик, НочноеПоказание, НочноеПоказаниеПредыдущее, Разрядность, Тарифность, СпособРегистрацииПоказаний",
										  ТекущиеДанные.Номер, ТекущиеДанные.Счетчик, ТекущиеДанные.НочноеПоказание,
										  ТекущиеДанные.НочноеПоказаниеПредыдущее, ТекущиеДанные.Разрядность,
										  ТекущиеДанные.Тарифность, ТекущиеДанные.СпособРегистрацииПоказаний);
	
	ВведеныКорректныеПоказания = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПроверитьКорректностьПоказанийСчетчика(СтруктураПоказаний);
	
	Если Не ВведеныКорректныеПоказания Тогда
		ТекущиеДанные.НочноеПоказание = мСтруктураРедСтроки.НочноеПоказание;
	КонецЕсли;
	
	Если Не ТекущиеДанные.НочноеПоказание = Неопределено Тогда
		
		Если ВведеныКорректныеПоказания Тогда
			
			ТекущиеДанные.НочноеПоказаниеРасход = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(СтруктураПоказаний, "НочноеПоказание");
			
			Если ВызовИзДокумента Тогда
				ТекущиеДанные.НочноеПоказаниеРасходПриведенный = ТекущиеДанные.НочноеПоказаниеРасход
																* ТекущиеДанные.КоэффициентТрансформации
																* ТекущиеДанные.ТемпературныйКоэффициент;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущиеДанные.ПустоеНочноеПоказание = Ложь;
		
	Иначе
		ТекущиеДанные.ПустоеНочноеПоказание = Истина;
	КонецЕсли;
	
	СтруктураСреднихРасходов = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьСреднийРасход(ТекущиеДанные.Счетчик, ТекущиеДанные.ДатаПоказания, 6); // Структура: "Дневной", "Ночной", "Пиковый".
	
	ТекущиеДанные.СреднийРасходНочной = СтруктураСреднихРасходов.Ночной;
	ТекущиеДанные.ПоказанияКорректны  = Ложь;
	
	мСтруктураРедСтроки.Вставить("ИзмененоНочноеПоказание", Истина);
	мСтруктураРедСтроки.Вставить("НочноеПоказание",         ТекущиеДанные.НочноеПоказание);
	
	АдресХранилищаДанныхСтроки = ПоместитьВоВременноеХранилище(мСтруктураРедСтроки, Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура обрабатывает изменение данных в колонке "Пиковое показание".
//
Процедура ОбработатьИзменениеПиковогоПоказания(АдресХранилищаДанныхСтроки, ТекущиеДанные, ВызовИзДокумента = Ложь) Экспорт
	
	мСтруктураРедСтроки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныхСтроки);
	
	Если мСтруктураРедСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоказаний = Новый Структура("НомерСтроки, Счетчик, ПиковоеПоказание, ПиковоеПоказаниеПредыдущее, Разрядность, Тарифность, СпособРегистрацииПоказаний",
										  ТекущиеДанные.Номер, ТекущиеДанные.Счетчик, ТекущиеДанные.ПиковоеПоказание,
										  ТекущиеДанные.ПиковоеПоказаниеПредыдущее, ТекущиеДанные.Разрядность,
										  ТекущиеДанные.Тарифность, ТекущиеДанные.СпособРегистрацииПоказаний);
	
	ВведеныКорректныеПоказания = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПроверитьКорректностьПоказанийСчетчика(СтруктураПоказаний);
	
	Если Не ВведеныКорректныеПоказания Тогда
		ТекущиеДанные.ПиковоеПоказание = мСтруктураРедСтроки.ПиковоеПоказание;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ПиковоеПоказание = Неопределено Тогда
		
		Если ВведеныКорректныеПоказания Тогда
			
			ТекущиеДанные.ПиковоеПоказаниеРасход = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(СтруктураПоказаний, "ПиковоеПоказание");
			
			Если ВызовИзДокумента Тогда
				ТекущиеДанные.ПиковоеПоказаниеРасходПриведенный = ТекущиеДанные.ПиковоеПоказаниеРасход
																* ТекущиеДанные.КоэффициентТрансформации 
																* ТекущиеДанные.ТемпературныйКоэффициент;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущиеДанные.ПустоеПиковоеПоказание = Ложь;
		
	Иначе
		ТекущиеДанные.ПустоеПиковоеПоказание = Истина;
	КонецЕсли;
	
	СтруктураСреднихРасходов = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьСреднийРасход(ТекущиеДанные.Счетчик, ТекущиеДанные.ДатаПоказания, 6);// Структура: "Дневной", "Ночной", "Пиковый".
	
	ТекущиеДанные.СреднийРасходПиковый = СтруктураСреднихРасходов.Пиковый;
	ТекущиеДанные.ПоказанияКорректны   = Ложь;
	
	мСтруктураРедСтроки.Вставить("ИзмененоПиковоеПоказание", Истина);
	мСтруктураРедСтроки.Вставить("ПиковоеПоказание",         ТекущиеДанные.ПиковоеПоказание);
	
	АдресХранилищаДанныхСтроки = ПоместитьВоВременноеХранилище(мСтруктураРедСтроки, Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура обрабатывает очистку данных в колонке "Дневное показание".
//
Процедура ОбработатьОчисткуДневногоПоказания(ТекущиеДанные, ВызовИзДокумента = Ложь) Экспорт
	
	ТекущиеДанные.ДневноеПоказание       = Неопределено;
	ТекущиеДанные.ПустоеДневноеПоказание = Истина;
	ТекущиеДанные.ДневноеПоказаниеРасход = 0;
	ТекущиеДанные.СреднийРасходДневной   = 0;
	
	Если ВызовИзДокумента Тогда
		ТекущиеДанные.ДневноеПоказаниеРасходПриведенный = 0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает очистку данных в колонке "Ночное показание".
//
Процедура ОбработатьОчисткуНочногоПоказания(ТекущиеДанные, ВызовИзДокумента = Ложь) Экспорт
	
	ТекущиеДанные.НочноеПоказание       = Неопределено;
	ТекущиеДанные.ПустоеНочноеПоказание = Истина;
	ТекущиеДанные.НочноеПоказаниеРасход = 0;
	ТекущиеДанные.СреднийРасходНочной   = 0;
	
	Если ВызовИзДокумента Тогда
		ТекущиеДанные.НочноеПоказаниеРасходПриведенный = 0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает очистку данных в колонке "Пиковое показание".
//
Процедура ОбработатьОчисткуПиковогоПоказания(ТекущиеДанные, ВызовИзДокумента = Ложь) Экспорт
	
	ТекущиеДанные.ПиковоеПоказание       = Неопределено;
	ТекущиеДанные.ПустоеПиковоеПоказание = Истина;
	ТекущиеДанные.ПиковоеПоказаниеРасход = 0;
	ТекущиеДанные.СреднийРасходПиковый   = 0;
	
	Если ВызовИзДокумента Тогда
		ТекущиеДанные.ПиковоеПоказаниеРасходПриведенный = 0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет проверку введенных показаний.
//
Процедура ПроверитьПоказанияВДереве(ДеревоПоказаний, СтруктураРезультатовПроверки, ОтображатьТолькоСтрокиСОшибками, НеобходимоПереместитьКурсор = Ложь)
	
	РазмерДопустимогоПревышенияСреднегоРасхода = УПЖКХ_ПараметрыУчетаСервер.РазмерДопустимогоПревышенияСреднегоРасходаПрибораУчета();
	ИспользоватьКонтрольПоказанийПриборовУчета = УПЖКХ_ПараметрыУчетаСервер.ИспользоватьКонтрольПоказанийПриборовУчета();
	
	// Обнуляем сводную информацию при проверке всех строк показаний.
	// Это требуется, например, при перезаполнении документа или обновления показаний.
	СтруктураРезультатовПроверки.КоличествоСтрокСОшибками              = 0;
	СтруктураРезультатовПроверки.КоличествоСтрокПереходаЧерезНоль      = 0;
	СтруктураРезультатовПроверки.КоличествоСтрокСОтрицательнымРасходом = 0;
	
	// Обход целого дерева показаний.
	Для Каждого ТекСтрока Из ДеревоПоказаний.ПолучитьЭлементы() Цикл
		
		// Если проверку выполняем во всех строках, то необходимо сбросить информацию об ошибках в них.
		ТекСтрока.ТипОшибкиДневной = "";
		ТекСтрока.ТипОшибкиНочной  = "";
		ТекСтрока.ТипОшибкиПиковый = "";
		ТекСтрока.ПереходЧерезНольДневное = Ложь;
		ТекСтрока.ПереходЧерезНольНочное  = Ложь;
		ТекСтрока.ПереходЧерезНольПиковое = Ложь;
		
		ПроверитьПоказанияВСтроке(СтруктураРезультатовПроверки, ТекСтрока, НеобходимоПереместитьКурсор, ОтображатьТолькоСтрокиСОшибками,
								  РазмерДопустимогоПревышенияСреднегоРасхода, ИспользоватьКонтрольПоказанийПриборовУчета);
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет наличие ошибок в строке показаний.
//
Функция ОпределитьНаличиеОшибокВСтрокеПоказаний(ТекСтрока)
	
	Возврат НЕ ПустаяСтрока(ТекСтрока.ТипОшибкиДневной)
		ИЛИ НЕ ПустаяСтрока(ТекСтрока.ТипОшибкиНочной)
		ИЛИ НЕ ПустаяСтрока(ТекСтрока.ТипОшибкиПиковый);
	
КонецФункции

// Определяет наличие перехода через ноль в строке показаний.
//
Функция ОпределитьНаличиеПереходаЧерезНольВСтрокеПоказаний(ТекСтрока)
	
	Возврат ТекСтрока.ПереходЧерезНольДневное
		ИЛИ ТекСтрока.ПереходЧерезНольНочное
		ИЛИ ТекСтрока.ПереходЧерезНольПиковое;
	
КонецФункции

// Определяет наличие отрицательного расхода в строке показаний.
//
Функция ОпределитьНаличиеОтрицательногоРасходаВСтрокеПоказаний(ТекСтрока)
	
	Возврат ТекСтрока.ТипОшибкиДневной = "Отрицательный расход"
		ИЛИ ТекСтрока.ТипОшибкиНочной  = "Отрицательный расход"
		ИЛИ ТекСтрока.ТипОшибкиПиковый = "Отрицательный расход";
	
КонецФункции

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

// Процедура управляет видимостью панели информации переданной формы.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой необходимо управлять отображением элементов контроля показаний.
//  ВызовИзДокумента - Булево - признак, определяющий от куда вызывается данная процедура. Может вызываться из
//                              документа "Ввод показаний счетчика" или обработки "Загрузка реестра показаний счетчиков".
//  ОбновитьДанныеПоТекущейСтроке - Булево - признак, определяющий необходимость обновления данных в панели
//                                           информации по текущей строке.
//
Процедура УправлениеЭлементамиКонтроляПоказаний(Форма, ВызовИзДокумента = Ложь, ОбновитьДанныеПоТекущейСтроке = Ложь) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВводНачальныхПоказаний = ?(ВызовИзДокумента, Объект.ВводНачальныхПоказаний, Ложь);
	
	//////////////////////////////////////////////////////////////////////////////
	// ЭЛЕМЕНТЫ КОНТРОЛЯ ПОКАЗАНИЙ
	
	// Элементы контроля ошибок отображаем в случае, если:
	// 1. Используется контроль показаний.
	// 2. Есть строки показаний с ошибками.
	// 3. Это не начальные показания.
	ОтображатьЭлементыКонтроляОшибок = Ложь;
	
	Если Не ВводНачальныхПоказаний
		И Форма.ИспользуетсяКонтрольПоказанийПриборовУчета
		И Форма.КоличествоСтрокСОшибками > 0 Тогда
		
		ОтображатьЭлементыКонтроляОшибок = Истина;
		
	КонецЕсли;
	
	// Устанавливаем видимость команды и колонки.
	Элементы.ДеревоПоказанийКомандаОтображатьТолькоСтрокиСОшибками.Видимость = ОтображатьЭлементыКонтроляОшибок;
	Элементы.ДеревоПоказанийПоказанияКорректны.Видимость                     = ОтображатьЭлементыКонтроляОшибок;
	
	// Если строк с ошибками нет, и установлен отбор только строк с ошибками,
	// то необходимо отключить данный отбор и отображать все строки показаний.
	Если Форма.КоличествоСтрокСОшибками <= 0 И Форма.ОтображатьТолькоСтрокиСОшибками Тогда
		Форма.ОтображатьТолькоСтрокиСОшибками = Ложь;
		Элементы.ДеревоПоказанийКомандаОтображатьТолькоСтрокиСОшибками.Пометка = Ложь;
	КонецЕсли;
	
	// Процедура обновляет данные в панели информации документа.
	// По умолчанию обновляется сводная информация.
	// Если передан параметр ОбновитьДанныеПоТекущейСтроке, то также заполняются
	// сведения о наличии или отсутствии ошибок в текущей строке показаний.
	
	//////////////////////////////////////////////////////////////////////////////
	// ПАНЕЛЬ ИТОГОВОЙ ИНФОРМАЦИИ
	
	// Панель информации доступна только если используется контроль показаний,
	// и это не ввод начальных показаний.
	ВидимостьПанелиИнформации = (Форма.ИспользуетсяКонтрольПоказанийПриборовУчета И Не ВводНачальныхПоказаний);
	Элементы.ГруппаСводнаяИнформацияОбОшибках.Видимость = ВидимостьПанелиИнформации;
	
	Если ВидимостьПанелиИнформации Тогда
		
		// Подсчитаем количество строк с ошибками, показания которых подтверждены пользователем.
		// Это нужно для определения сводной информации по ошибкам в документе в панели информации.
		КоличествоСтрокСОшибкамиПодтверждено = 0;
		
		Для каждого ТекСтрока Из Форма.ДеревоПоказаний.ПолучитьЭлементы() Цикл
			
			// Информация по ошибкам с подтверждением.
			Если ТекСтрока.ПоказанияКорректны Тогда
				КоличествоСтрокСОшибкамиПодтверждено = КоличествоСтрокСОшибкамиПодтверждено + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		// Считаем, что есть неподтвержденные ошибки, если строк с ошибками
		// больше, чем строк с ошибками, показания которых подтверждены.
		ЕстьНеподтвержденныеОшибки = (Форма.КоличествоСтрокСОшибками > КоличествоСтрокСОшибкамиПодтверждено);
		
		Элементы.ГруппаСводнаяИнформацияЕстьОшибки.Видимость = ЕстьНеподтвержденныеОшибки;
		Элементы.ГруппаСводнаяИнформацияБезОшибок.Видимость  = Не ЕстьНеподтвержденныеОшибки;
		
		// Информация о переходе через ноль.
		Элементы.ГруппаСводнаяИнформацияЕстьПереходЧерезНоль.Видимость = (Форма.КоличествоСтрокПереходаЧерезНоль > 0);
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ КОРРЕКТИРОВКИ НАЧИСЛЕНИЙ
	
	//Если ВладелецФормы = "Документ" Тогда
	Если ВызовИзДокумента Тогда
		
		КорректировкаНачисленийУжеСформирована = Не Форма.ДокументКорректировкаНачислений.Пустая();
		
		ЭтоВводПоказанийНаЛицевойСчетИлиПомещение = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет")
												 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение"));
		
		ОтображатьЭлементыФормированияКорректировкиНачислений = Ложь;
		
		// Элементы формирования корректировки начислений отображаем в случае, если:
		// 1. Используется контроль показаний.
		// 2. Есть строки с ошибками отрицательного расхода.
		// 3. Это не начальные показания.
		// 4. Это ввода показаний на л/с или помещение.
		Если Не ВводНачальныхПоказаний
			И Форма.ИспользуетсяКонтрольПоказанийПриборовУчета
			И Форма.КоличествоСтрокСОтрицательнымРасходом > 0
			И ЭтоВводПоказанийНаЛицевойСчетИлиПомещение Тогда
			
			ОтображатьЭлементыФормированияКорректировкиНачислений = Истина;
			
		КонецЕсли;
		
		// Видимость панели документа корректировки начислений.
		// Если корректировка уже сформирована, то панель отображаем всегда.
		Элементы.ГруппаДокументКорректировкиНачислений.Видимость = ОтображатьЭлементыФормированияКорректировкиНачислений
																	Или КорректировкаНачисленийУжеСформирована;
		
		// Ссылка на документ корректировки начислений.
		Элементы.НадписьКорректировкаНачислений.Видимость        = КорректировкаНачисленийУжеСформирована;
		Элементы.СостояниеДокументаКорректировкаДолга.Видимость  = КорректировкаНачисленийУжеСформирована;
		
		// Заголовок кнопки формирования корректировки начислений.
		Если КорректировкаНачисленийУжеСформирована Тогда
			Элементы.СформироватьДокументКорректировкиНачислений.Заголовок = "Перезаполнить";
		Иначе
			Элементы.СформироватьДокументКорректировкиНачислений.Заголовок = "Сформировать";
		КонецЕсли;
		
		// Управление состоянием документа корректировки начислений.
		УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.УстановитьСостояниеДокументаКорректировкаНачислений(Форма);
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// ПАНЕЛЬ ИНФОРМАЦИИ ПО ТЕКУЩЕЙ СТРОКЕ
	
	// Информацию по текущей строке скрываем, если ошибок нет.
	ВидимостьИнформацииПоТекущейСтроке = (Форма.КоличествоСтрокСОшибками > 0) И Не ВводНачальныхПоказаний;
	Элементы.ИнформацияПоТекущейСтроке.Видимость = ВидимостьИнформацииПоТекущейСтроке;
	
	Если ВидимостьИнформацииПоТекущейСтроке И ОбновитьДанныеПоТекущейСтроке Тогда
		
		// Работаем с данными текущей строки.
		ДанныеТекущейСтроки = Элементы.ДеревоПоказаний.ТекущиеДанные;
		Если Не ДанныеТекущейСтроки = Неопределено Тогда
			
			ЕстьОшибкиВСтроке = Не ПустаяСтрока(ДанныеТекущейСтроки.ТипОшибкиДневной)
							Или Не ПустаяСтрока(ДанныеТекущейСтроки.ТипОшибкиНочной)
							Или Не ПустаяСтрока(ДанныеТекущейСтроки.ТипОшибкиПиковый);
			
			// Сформируем текст информации по видам тарифов, по которым введены показания.
			МассивТекстовИнформации = Новый Массив;
			
			Если Не ДанныеТекущейСтроки.ПустоеДневноеПоказание Тогда
				ТекстИнформации = ПолучитьТекстИнформацииОПоказании(ДанныеТекущейСтроки, "Дневной");
				МассивТекстовИнформации.Добавить(ТекстИнформации);
			КонецЕсли;
			
			Если Не ДанныеТекущейСтроки.ПустоеНочноеПоказание Тогда
				ТекстИнформации = ПолучитьТекстИнформацииОПоказании(ДанныеТекущейСтроки, "Ночной");
				МассивТекстовИнформации.Добавить(ТекстИнформации);
			КонецЕсли;
			
			Если Не ДанныеТекущейСтроки.ПустоеПиковоеПоказание Тогда
				ТекстИнформации = ПолучитьТекстИнформацииОПоказании(ДанныеТекущейСтроки, "Пиковый");
				МассивТекстовИнформации.Добавить(ТекстИнформации);
			КонецЕсли;
			
			// Формируем табличный документ с информацией и выводим в поле формы.
			АдресХранилищаТабличногоДокумента = УПЖКХ_ВводПоказанийПриборовУчетаСервер.СформироватьТабличныйДокументСИнформациейПоТекущейСтрокеПоказаний(ЕстьОшибкиВСтроке, ДанныеТекущейСтроки.ПоказанияКорректны, МассивТекстовИнформации);
			Форма.ДокументСИнформациейПоТекущейСтроке = ПолучитьИзВременногоХранилища(АдресХранилищаТабличногоДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция получает и возвращает строку с информацией о превышении среднемесячных показаний.
//
// Параметры:
//  ТекущиеДанные	 - ДанныеФормыЭлементДерева - Данные текущей строки;
//  ВидТарифа		 - Строка                  - "Дневной", "Ночной" или "Пиковый";
// 
// Возвращаемое значение:
//  ИнформацияОПревышении - Строка.
//
Функция ПолучитьТекстИнформацииОПоказании(ДанныеТекущейСтроки, ВидТарифа)
	
	ИнформацияОПоказании = "";
	
	// Определим средний и текущий расходы для вывода в строке в зависимости от вида тарифа
	Если ВидТарифа = "Дневной" Тогда
		
		ПредставлениеВидаТарифа = "Дневное показание";
		ТипОшибки               = ДанныеТекущейСтроки.ТипОшибкиДневной;
		СреднийРасход           = ДанныеТекущейСтроки.СреднийРасходДневной;
		ТекущийРасход           = ДанныеТекущейСтроки.ДневноеПоказаниеРасход;
		
	ИначеЕсли ВидТарифа = "Ночной" Тогда
		
		ПредставлениеВидаТарифа = "Ночное показание";
		ТипОшибки               = ДанныеТекущейСтроки.ТипОшибкиНочной;
		СреднийРасход           = ДанныеТекущейСтроки.СреднийРасходНочной;
		ТекущийРасход           = ДанныеТекущейСтроки.НочноеПоказаниеРасход;
		
	ИначеЕсли ВидТарифа = "Пиковый" Тогда
		
		ПредставлениеВидаТарифа = "Пиковое показание";
		ТипОшибки               = ДанныеТекущейСтроки.ТипОшибкиПиковый;
		СреднийРасход           = ДанныеТекущейСтроки.СреднийРасходПиковый;
		ТекущийРасход           = ДанныеТекущейСтроки.ПиковоеПоказаниеРасход;
		
	КонецЕсли;
	
	// Формирование текста информации о показании.
	ИнформацияОПоказании = ИнформацияОПоказании + ПредставлениеВидаТарифа + " - ";
	
	Если ТипОшибки = "Отрицательный расход" Тогда
		
		// Наличие отрицательного расхода.
		ИнформацияОПоказании = ИнформацияОПоказании + "введен отрицательный расход.";
		
	Иначе
		
		// Превышение среднего расхода.
		Счетчик = ДанныеТекущейСтроки.Счетчик;
		
		// Получим количество месяцев, за которое показаня не предоставлялись.
		КоличествоМесяцевОтсутствияПоказаний = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьКоличествоМесяцевОтсутствияПоказаний(Счетчик, ДанныеТекущейСтроки.ДатаПоказания);
		
		// Если перед месяцем, предшествующим вводу показаний, были месяцы, за которые показания не предоставлялись,
		// в таком случае получим среднемесячный расход за период отсутствия показаний.
		// Также сформируем информацию к выводу о текущем расходе, так как, в случае отличия текущего расхода в сообщении
		// от расхода, указанного в табличной части, пользователю может быть не понятно, почему возникло такое отклонение.
		//
		// Например:
		// Показания не предоставлялись уже 2 месяца, текущий расход составил 80 кВт, исходя из алгоритма,
		// мы считаем, что текущий расход для анализа должен быть 80/2 = 40 кВт.
		// Средний расход за последние 6 месяцев составил 20 кВт. Таким образом, получаем,
		// что превышение среднемесячного расхода составило 100%.
		
		// Приводим текущий расход к количеству месяцев, за которые переданы показания.
		ТекущийРасходЗаОдинМесяц = Окр(ТекущийРасход / ?(КоличествоМесяцевОтсутствияПоказаний = 0, 1, КоличествоМесяцевОтсутствияПоказаний), 6);
		
		// Получим процент первышения над среднемесячным расходом текущих показаний.
		ПревышениеСреднегоРасхода = Окр(?(СреднийРасход = 0, 0, ((ТекущийРасход - СреднийРасход) / СреднийРасход) * 100), 2);
		
		// Определим единицу измерений для вывода показаний по текущему счетчику.
		ПредставлениеЕдиницыИзмерения = "";
		ЕдиницаИзмерения = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьЕдиницуИзмеренияСчетчикаНаСервере(Счетчик);
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ПредставлениеЕдиницыИзмерения = " " + ЕдиницаИзмерения;
		КонецЕсли;
		
		// Представление введенного расхода.
		ПредставлениеВведенногоРасхода = "" + ТекущийРасходЗаОдинМесяц + ПредставлениеЕдиницыИзмерения + " = " + ТекущийРасход + ПредставлениеЕдиницыИзмерения + " / " + КоличествоМесяцевОтсутствияПоказаний + " мес.";
		ПредставлениеСреднегоРасхода   = "" + СреднийРасход + ПредставлениеЕдиницыИзмерения;
		
		Если Не ПустаяСтрока(ТипОшибки) Тогда
			
			// Если информация об ошибке заполнена, то имеем превышение среднего расхода.
			// Сформируем строку с информацией о превышении среднего расхода.
			ИнформацияОПоказании = ИнформацияОПоказании + "введенный расход, приходящийся на один месяц (" + ПредставлениеВведенногоРасхода
														+ "), превышает средний расход за последние 6 мес. (" + ПредставлениеСреднегоРасхода
														+ ") на " + Формат(ПревышениеСреднегоРасхода, "ЧДЦ=") + "%.";
		
		Иначе
			
			// Общая информация по среднему расходу.
			ИнформацияОПоказании = ИнформацияОПоказании + "ошибок не обнаружено.
														  |Введенный расход, приходящийся на один месяц - " + ПредставлениеВведенногоРасхода
														+ ", cредний расход за последние 6 мес. - " + ПредставлениеСреднегоРасхода + ".";
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавляем перевод строки после информации об очередном виде тарифа с ошибкой.
	ИнформацияОПоказании = ИнформацияОПоказании + Символы.ПС;
	
	Возврат ИнформацияОПоказании;
	
КонецФункции

// Процедура устанавливает в качестве текущей строки дерева первую строку
// с ошибкой. Используется в случае, если в дереве отобраны только строки с ошибками.
//
Процедура СпозиционироватьКурсорНаПервуюСтрокуСОшибкойПоказаний(Форма) Экспорт
	
	// Получим идентификатор исходной строки, если он был помещен во временное хранилище.
	ИдентификаторИсходнойСтроки = Неопределено;
	Если Не ПустаяСтрока(Форма.АдресХранилищаИдентификатораИсходнойСтрокиДляОтбораСтрокСОшибками) Тогда
		
		// Получение идентификатора исходной строки из хранилища.
		ИдентификаторИсходнойСтроки = ПолучитьИзВременногоХранилища(Форма.АдресХранилищаИдентификатораИсходнойСтрокиДляОтбораСтрокСОшибками);
		
		// Очистка адреса временного хранилища.
		Форма.АдресХранилищаИдентификатораИсходнойСтрокиДляОтбораСтрокСОшибками = "";
		
	КонецЕсли;
	
	// По умолчанию берем строку с нулевым идентификатором.
	ИдентификаторПервойСтрокиСОшибкой              = Неопределено;
	ИдентификаторПервойСтрокиСОшибкойПослеИсходной = Неопределено;
	
	// В строках дерева ищем первую строку с ошибкой показаний.
	Для Каждого ТекСтрокаДерева Из Форма.ДеревоПоказаний.ПолучитьЭлементы() Цикл
		
		Если Не ПустаяСтрока(ТекСтрокаДерева.ТипОшибкиДневной)
		 Или Не ПустаяСтрока(ТекСтрокаДерева.ТипОшибкиНочной)
		 Или Не ПустаяСтрока(ТекСтрокаДерева.ТипОшибкиПиковый) Тогда
			
			ИдентификаторТекущейСтроки = ТекСтрокаДерева.ПолучитьИдентификатор();
			
			// Поиск самой первой строки с ошибкой.
			Если ИдентификаторПервойСтрокиСОшибкой = Неопределено Тогда
				ИдентификаторПервойСтрокиСОшибкой = ИдентификаторТекущейСтроки;
			КонецЕсли;
			
			// Поиск первой строки с ошибкой после исходной строки.
			Если Не ИдентификаторИсходнойСтроки = Неопределено
			   И ИдентификаторПервойСтрокиСОшибкойПослеИсходной = Неопределено
			   И ИдентификаторТекущейСтроки > ИдентификаторИсходнойСтроки Тогда
				ИдентификаторПервойСтрокиСОшибкойПослеИсходной = ИдентификаторТекущейСтроки;
			КонецЕсли;
			
			// Прекращаем поиск, если нашли первую строку, а исходная неопределена,
			// или исходная определена и нашли первую после исходной.
			Если ИдентификаторИсходнойСтроки = Неопределено
			 Или Не ИдентификаторПервойСтрокиСОшибкойПослеИсходной = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ИдентификаторИсходнойСтроки = Неопределено
	   И Не ИдентификаторПервойСтрокиСОшибкойПослеИсходной = Неопределено Тогда
		// Если есть исходная строка и нашли следующую после нее, то берем ее.
		ИдентификаторРезультат = ИдентификаторПервойСтрокиСОшибкойПослеИсходной;
	ИначеЕсли Не ИдентификаторПервойСтрокиСОшибкой = Неопределено Тогда
		// Если найдена первая строка с ошибкой, берем ее.
		ИдентификаторРезультат = ИдентификаторПервойСтрокиСОшибкой;
	Иначе
		// В остальных случаях позиционируемся на исходной строке.
		ИдентификаторРезультат = ИдентификаторИсходнойСтроки;
	КонецЕсли;
	
	// Позиционируем дерево на строке с ошибкой.
	Форма.Элементы.ДеревоПоказаний.ТекущаяСтрока = ИдентификаторРезультат;
	
КонецПроцедуры

#КонецОбласти
