////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность электронного документооборота
//             с контролирующими органами  (служебный)". 
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьСерийныйНомерДистрибутиваViPNetCSP(Параметры) Экспорт
	
	URL = "https://getserial.infotecs.ru/partner/csp/service/GetSerialNumberByAbonentInfo/";
	Соединение = ОбщегоНазначенияЭДКО.СоединениеССерверомИнтернета(URL);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Запрос = Новый HTTPЗапрос("/partner/csp/service/GetSerialNumberByAbonentInfo/", Заголовки);
	
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеширование.Добавить(СокрЛП(ИдентификаторЗапроса) + "1594xV9dHsW7vNN");
	
	MD5 = СтрЗаменить(НРег(Хеширование.ХешСумма), " ", "");
	
	Если ЗначениеЗаполнено(Параметры.ПолнаяВерсияОС) И ЗначениеЗаполнено(Параметры.ПолноеИмяОС) Тогда
		ПолноеИмяСборкиОС = Параметры.ПолнаяВерсияОС + ?(ЗначениеЗаполнено(Параметры.СборкаОС),
			" " + ?(СтрНайти(Параметры.ПолноеИмяОС, "Майкрософт") > 0, "Сборка", "Build") + " " + Параметры.СборкаОС, "");
		
		СтрокаЗапроса = "i_id_request=%1&i_id_partner=%2&i_req_sign=%3&i_contact_person=%4&i_email=%5&os=%6&ms_info_1=%7&ms_info_2=%8";
		СтрокаЗапроса = СтрШаблон(СтрокаЗапроса,
			ИдентификаторЗапроса, "1594", MD5,
			КодироватьСтроку(Параметры.КонтактноеЛицо, СпособКодированияСтроки.URLВКодировкеURL),
			КодироватьСтроку(Параметры.ЭлектроннаяПочта, СпособКодированияСтроки.URLВКодировкеURL),
			КодироватьСтроку(Параметры.ПолнаяВерсияОС, СпособКодированияСтроки.URLВКодировкеURL),
			КодироватьСтроку(Параметры.ПолноеИмяОС, СпособКодированияСтроки.URLВКодировкеURL),
			КодироватьСтроку(ПолноеИмяСборкиОС, СпособКодированияСтроки.URLВКодировкеURL));
		
	Иначе
		ВидДистрибутива = ?(Параметры.Разрядность = 64, "latest_win64bit_all", "latest_win32bit_all");
		
		СтрокаЗапроса = "i_id_request=%1&i_id_partner=%2&i_req_sign=%3&i_contact_person=%4&i_email=%5&i_id_file=%6";
		СтрокаЗапроса = СтрШаблон(СтрокаЗапроса,
			ИдентификаторЗапроса, "1594", MD5,
			КодироватьСтроку(Параметры.КонтактноеЛицо, СпособКодированияСтроки.URLВКодировкеURL),
			КодироватьСтроку(Параметры.ЭлектроннаяПочта, СпособКодированияСтроки.URLВКодировкеURL),
			КодироватьСтроку(ВидДистрибутива, СпособКодированияСтроки.URLВКодировкеURL));
	КонецЕсли;
	
	Запрос.УстановитьТелоИзСтроки(СтрокаЗапроса);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJson = Новый ЧтениеJSON;
		ЧтениеJson.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		
		ОтветJSON = ПрочитатьJSON(ЧтениеJson);
		ЧтениеJson.Закрыть();
		
		Если ОтветJSON.Свойство("error_code") И ОтветJSON.error_code = 100 Тогда
			ПараметрыДистрибутива = Новый Структура;
			ПараметрыДистрибутива.Вставить("СерийныйНомер", ОтветJSON.i_sn);
			ПараметрыДистрибутива.Вставить("Дистрибутив", ОтветJSON.i_download_url);
			ПараметрыДистрибутива.Вставить("КонтрольнаяСумма", ОтветJSON.i_distr_checksum);
			
			// Версию возьмем из имени файла
			НачалоВерсии = СтрНайти(ОтветJSON.i_download_url, "_", НаправлениеПоиска.СКонца,, 2) + 1;
			ЧастьСВерсией = Сред(ОтветJSON.i_download_url, НачалоВерсии);
			Версия = Лев(ЧастьСВерсией, СтрНайти(ЧастьСВерсией, "_") - 1);
			
			// Для "vipnet_csp_4.2.zip"
			Если нрег(Версия) = "csp" Тогда
				НачалоВерсии = СтрНайти(ОтветJSON.i_download_url, "_", НаправлениеПоиска.СКонца) + 1;
				ЧастьСВерсией = Сред(ОтветJSON.i_download_url, НачалоВерсии);
				Версия = Лев(ЧастьСВерсией, СтрНайти(ЧастьСВерсией, ".zip") - 1);
			КонецЕсли;
			
			ПараметрыДистрибутива.Вставить("Версия", Версия);
		Иначе
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Электронный документооброт с контролирующими органами.Получение серийного номер ViPNet CSP'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			    УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон("error_code: %1", ОтветJSON.error_code));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
				НСтр("ru = 'Сервис получения серийных номер для ViPNet CSP временно не доступен. Повторите попытку позже.'"));
		КонецЕсли;
		
	Иначе
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооброт с контролирующими органами.Получение серийного номер ViPNet CSP'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Возврат ПараметрыДистрибутива;
	 	 
КонецФункции

Функция ПолучитьДистрибутивCryptoProCSP(Параметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение дистрибутива CryptoPro CSP'");
	ПараметрыВыполнения.ДополнительныйРезультат = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбщегоНазначенияЭДКОСлужебный.ПолучитьДистрибутивCryptoProCSP", Параметры, ПараметрыВыполнения);
	
КонецФункции

Функция ДоступныеЛокальныеСертификатыПользователя() Экспорт
	
	Сертификаты = Новый Массив;
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиДокументооборота) Тогда 
		Возврат Сертификаты;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.УчетнаяЗаписьОбмена.СертификатРуководителя КАК Отпечаток
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате)
	|	И НЕ Организации.ПометкаУдаления
	|	И НЕ Организации.УчетнаяЗаписьОбмена.ПометкаУдаления
	|	И НЕ Организации.УчетнаяЗаписьОбмена.ЭлектроннаяПодписьВМоделиСервиса";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Сертификаты = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Сертификаты.Добавить(Новый Структура("Отпечаток", Выборка.Отпечаток));
	КонецЦикла;
	
	Возврат Сертификаты;
	
КонецФункции

Процедура ЗаписьСобытияВЖурналРегистрации(ИмяСобытия, Событие) Экспорт
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, СтруктураВJson(Событие));
	
КонецПроцедуры

Функция СтруктураВJson(Объект) Экспорт
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, Объект);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция JsonВСтруктура(Json, ИменаСвойствСоЗначениямиДата = Неопределено, ОжидаемыйФорматДаты = Неопределено) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Json);
	Если ЗначениеЗаполнено(ОжидаемыйФорматДаты) Тогда
		Объект = ПрочитатьJSON(ЧтениеJSON,, ИменаСвойствСоЗначениямиДата, ОжидаемыйФорматДаты);
	Иначе
		Объект = ПрочитатьJSON(ЧтениеJSON);		
	КонецЕсли;
	ЧтениеJSON.Закрыть();
	
	Возврат Объект;
	
КонецФункции

#КонецОбласти


