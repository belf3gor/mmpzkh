
////////////////////////////////////////////////////////////////////////////////
// ОбменСБанкамиСлужебный: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область Письма

// Определяет, есть ли в программе настройки обмена с письмами
// 
// Возвращаемое значение:
//  Булево - если Истина, то можно обмениваться письмами.
//
Функция ЕстьПоддержкаПисем() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	|ГДЕ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.Письмо)
	|	И НЕ НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НЕ НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка.Недействительна";
	
	Результат = Запрос.Выполнить().Выбрать();
	Возврат Результат.Следующий();
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхИзИнформационнойБазы

// Получает дату последней синхронизации
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком
// 
// Возвращаемое значение:
//  Дата - дата и время последней синхронизации
//  Неопределено - синхронизация еще не производилась.
//
Функция ДатаПоследнейСинхронизации(Знач НастройкаОбмена) Экспорт
	
	Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
	Выборка = РегистрыСведений.ПараметрыОбменСБанками.Выбрать(Отбор);
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаСинхронизации;
	КонецЕсли;
	
КонецФункции

// Получает состояние актуального электронного документооборота для документа информационной базы.
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка - ссылка на документ информационной базы.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияОбменСБанками - текущее состояние электронного документооборота.
//
Функция СостояниеЭД(СсылкаНаВладельца) Экспорт
	
	ВозвращаемоеЗначение = Перечисления.СостоянияОбменСБанками.ПустаяСсылка();
	СтруктураЭД = СтруктураВерсииЭД(СсылкаНаВладельца);
	
	Возврат СтруктураЭД.Состояние;
	
КонецФункции

// Определяет объект информационной базы, к которому привязано сообщение обмена
//
// Параметры:
//    СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена.
//
// Возвращаемое значение:
//    ДокументСсылка, Неопределено - ссылка на документ информационной базы.
//
Функция ОбъектПривязки(СообщениеОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвязанныеОбъектыОбменСБанками.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СвязанныеОбъектыОбменСБанками КАК СвязанныеОбъектыОбменСБанками
	|ГДЕ
	|	СвязанныеОбъектыОбменСБанками.СообщениеОбмена = &СообщениеОбмена";
	Запрос.УстановитьПараметр("СообщениеОбмена", СообщениеОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СсылкаНаОбъект;
	КонецЕсли;
	
КонецФункции

// Получает данные файла для технической поддержки
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - ссылка на сообщение обмена.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - данные файла для технической поддержки.
//
Функция ДанныеФайлаДляТехническойПоддержки(Знач СообщениеОбмена) Экспорт
	
	РеквизитыСообщенияОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "НастройкаОбмена, ВидЭД");
	ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		РеквизитыСообщенияОбмена.НастройкаОбмена, "ПрограммаБанка");
	ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеОбмена);
	Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВремФайл = ПолучитьИмяВременногоФайла("zip");
	ФайлАрхива = Новый ЗаписьZipФайла(ВремФайл, , , , УровеньСжатияZIP.Максимальный);
	
	ВременныйКаталог = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог();
	
	ОсноваИмениФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Строка(ПрисоединенныйФайл));
	
	Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
		ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку Тогда
		СлужебноеСообщение = ПодчиненноеСообщениеОбмена(
			СообщениеОбмена, Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные, Ложь);
		Если ЗначениеЗаполнено(СлужебноеСообщение) Тогда
			ДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(СлужебноеСообщение);
			Если ЗначениеЗаполнено(ДанныеЭД) Тогда
				Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
					ИмяФайлаДанных = "doc_" + ОсноваИмениФайла + ".txt";
				Иначе
					ИмяФайлаДанных = "scheme.txt";
				КонецЕсли;
				ДанныеЭД.Записать(ВременныйКаталог + ИмяФайлаДанных);
				ФайлАрхива.Добавить(ВременныйКаталог + ИмяФайлаДанных);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка Тогда
		СсылкаНаХранилище = "";
		ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(СообщениеОбмена, СсылкаНаХранилище);
		ДвоичныеДанныеТекстовойВыписки = ПолучитьИзВременногоХранилища(СсылкаНаХранилище);
		ДвоичныеДанныеТекстовойВыписки.Записать(ВременныйКаталог + "kl_to_1c.txt");
		ФайлАрхива.Добавить(ВременныйКаталог + "kl_to_1c.txt");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлектронныеПодписи.ПорядковыйНомер КАК НомерСтроки,
	|	ЭлектронныеПодписи.Подпись,
	|	ЭлектронныеПодписи.Сертификат
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	|ГДЕ
	|	ЭлектронныеПодписи.ПодписанныйОбъект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ПрисоединенныйФайл);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ДвоичныеДанныеЭП = Выборка.Подпись.Получить();
		ИмяФайлаДанных = "sign_" + ОсноваИмениФайла + "_" + Выборка.НомерСтроки + ".txt";
		ДвоичныеДанныеЭП.Записать(ВременныйКаталог + ИмяФайлаДанных);
		ФайлАрхива.Добавить(ВременныйКаталог + ИмяФайлаДанных);

		ДанныеСертификата = Выборка.Сертификат.Получить();
		ИмяФайлаДанных = "cert_" + ОсноваИмениФайла + "_" + Выборка.НомерСтроки + ".cer";
		ДанныеСертификата = Выборка.Сертификат.Получить();
		Если ТипЗнч(ДанныеСертификата) = Тип("ДвоичныеДанные") Тогда
			ДанныеСертификата.Записать(ВременныйКаталог + ИмяФайлаДанных);
		Иначе // строка
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(ДанныеСертификата);
			ТекстовыйДокумент.Записать(ВременныйКаталог + ИмяФайлаДанных);
		КонецЕсли;
		ФайлАрхива.Добавить(ВременныйКаталог + ИмяФайлаДанных);
	КонецЦикла;

	ДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);
	ИмяФайлаДанных = ОсноваИмениФайла + ".xml";
	ДанныеФайла.Записать(ВременныйКаталог + ИмяФайлаДанных);
	ФайлАрхива.Добавить(ВременныйКаталог + ИмяФайлаДанных);
	ФайлАрхива.Записать();
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ВремФайл);
	ФайловаяСистема.УдалитьВременныйФайл(ВремФайл);
	ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

// Производит поиск сообщения обмена по владельцу.
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка - владелец электронного документа.
//
// Возвращаемое значение:
//  ДокументСсылка.СообщениеОбменСБанками - электронный документ.
//  Неопределено - электронный документ не найден.
//
Функция СообщениеОбменаПоВладельцу(СсылкаНаВладельца) Экспорт
	
	СоответствиеВладельцевИСообщенийОбмена = Новый Соответствие;
	
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СообщениеОбмена КАК СообщениеОбмена
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаВладельца";
	Запрос.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.СообщениеОбмена;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Рассчитывает количество писем по разделам
//
// Параметры:
//  СтруктураПараметров - Структура -  параметры длительной операции
//  АдресХранилища - Строка - адрес временного хранилища для помещения результата.
//
Процедура РассчитатьКоличествоПисемПоРазделам(СтруктураПараметров, АдресХранилища) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ВходящиеНепрочитанные", 0);
	СтруктураВозврата.Вставить("ИсходящиеНаПодписи", 0);
	СтруктураВозврата.Вставить("ИсходящиеОтклоненные", 0);
	СтруктураВозврата.Вставить("ИсходящиеЧерновики", 0);
	
	Запрос = Новый Запрос;
	ЧастиТекстаЗапроса = Новый Массив;
	
	КоличествоЗапросовВПакете = 0;
	РазделительЗапросовВПакете =
		"
		|;
		|";
	
	Для каждого ЭлементРасчета Из СтруктураВозврата Цикл
		
		ТекстЗапроса = ТекстЗапросаКоличестваЭлементовПоРазделу(ЭлементРасчета.Ключ);
		Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧастиТекстаЗапроса.Количество() Тогда
			ЧастиТекстаЗапроса.Добавить(РазделительЗапросовВПакете);
		КонецЕсли;
		
		ТекстЗапросаВПакете = СтрШаблон(
			"////////////////////////////////////////////////////////////////////////////
			|// %1
			|
			|%2", ЭлементРасчета.Ключ, ТекстЗапроса);
		ЧастиТекстаЗапроса.Добавить(ТекстЗапросаВПакете);
		
		// Вычисляем положение результата по разделу в пакете.
		КоличествоЗапросовВПакете = КоличествоЗапросовВПакете + 1;
		
	КонецЦикла;
	
	// Заполняем результаты по разделам по данным пакета.
	Запрос.Текст = СтрСоединить(ЧастиТекстаЗапроса);
	Результаты = Запрос.ВыполнитьПакет();
	
	Индекс = 0;
	Для каждого ЭлементРасчета Из СтруктураВозврата Цикл
		
		Результат = Результаты[Индекс];
		
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		КоличествоЭлементов = 0;
		Если Выборка.Следующий() Тогда
			КоличествоЭлементов = КоличествоЭлементов + Выборка._Счетчик;
		КонецЕсли;
		СтруктураВозврата[ЭлементРасчета.Ключ] = КоличествоЭлементов;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	
КонецПроцедуры

// Возвращает ссылку на присоединенный к сообщению файл.
// 
// Параметры:
//   СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - ссылка на сообщение обмена.
//   ВыводитьОшибку - Булево - выводить текст ошибки в виде сообщения.
//
// Возвращаемое значение:
//   СправочникСсылка.СообщениеОбменСБанкамиПрисоединенныеФайлы - присоединенный файл.
//
Функция ПрисоединенныйФайл(СообщениеОбмена, ВыводитьОшибку = Истина) Экспорт
	
	МассивФайлов = Новый Массив;
	УстановитьПривилегированныйРежим(Истина);
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(СообщениеОбмена, МассивФайлов);
	УстановитьПривилегированныйРежим(Ложь);
	Если МассивФайлов.Количество() Тогда
		Возврат МассивФайлов[0];
	ИначеЕсли ВыводитьОшибку Тогда
		Операция = НСтр("ru = 'Получение присоединенного файла'");
		ТекстОшибки = НСтр("ru = 'Не обнаружен присоединенный файл объекта: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, СообщениеОбмена);
		ОбработатьОшибку(Операция, ТекстОшибки, , СообщениеОбмена);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции

// Возвращает виды платежных документов.
// 
// Возвращаемое значение:
//  Массив - в элементах содержит ПеречислениеСсылка.ВидыЭДОбменСБанками
//
Функция ВидыПлатежныхДокументов() Экспорт
	
	МассивВозврата = Новый Массив;
	
	МассивВозврата.Добавить(Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение);
	МассивВозврата.Добавить(Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование);
	МассивВозврата.Добавить(Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты);
	МассивВозврата.Добавить(Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты);
	МассивВозврата.Добавить(Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты);
	МассивВозврата.Добавить(Перечисления.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты);
	
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти

#Область Сбербанк

// Создает и заполняет по-умолчанию XDTO-объект Request по схеме Сбербанка
//
// Параметры:
//  ИдентификаторОрганизации - Строка - идентификатор организации в системе банка.
//  ТекстОшибки - Строка - (возвращаемый параметр) - дополняет текст ошибками заполнения полей xml.
//  ИдентификаторЗапроса - Строка - идентификатор запроса.
// 
// Возвращаемое значение:
//  ОбъектXDTO - заполненный по-умолчанию объект.
//
Функция RequestСбербанк(ИдентификаторОрганизации, ТекстОшибки, ИдентификаторЗапроса = Неопределено) Экспорт
	
	Request = ОбъектТипаCML(ФабрикаXDTO, "Request", "http://bssys.com/upg/request");
	Если ИдентификаторЗапроса = Неопределено Тогда
		ИдентификаторЗапроса = Новый УникальныйИдентификатор;
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(Request, "requestId", Строка(ИдентификаторЗапроса), Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Request, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Request, "version", ВерсияФорматаСбербанк(), Истина, ТекстОшибки);
	Отправитель = ПредставлениеОтправителяСбербанк();
	ЗаполнитьСвойствоXDTO(Request, "sender", Отправитель, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO", Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Request, "protocolVersion", "32", , ТекстОшибки);
	Возврат Request;
	
КонецФункции

// Сохраняет тикет Сбербанка
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена
//  Тикет - Строка - полученный из банка тикет
//
Процедура СохранитьТикетСбербанк(Знач НастройкаОбмена, Знач Тикет) Экспорт
	
	НовЗапись = РегистрыСведений.ТикетыОбменСБанками.СоздатьМенеджерЗаписи();
	НовЗапись.Идентификатор = Тикет;
	НовЗапись.НастройкаОбмена = НастройкаОбмена;
	НовЗапись.Записать();
	
КонецПроцедуры

// Подготавливает строку (дайджест) для дальнейшей подписи в формате Base64.
//
// Параметры:
//   АдресФайла - Строка - адрес двоичных данных файла;
//   НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//
// Возвращаемое значение:
//   Строка - дайджест документа.
//
Функция ДайджестСбербанк(ВидЭД, АдресФайла, НастройкаОбмена) Экспорт
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	
	Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда
		
		Результат = СформироватьДеревоРазбора(ВидЭД, ДвоичныеДанныеФайла);
	
		Если Результат = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;

		ДеревоРазбора = Результат.ДеревоРазбора;
		СтрокаОбъекта = Результат.СтрокаОбъекта;
		
		СтрокаВозврата = ДайджестПлатежногоПорученияСбербанк(НастройкаОбмена, ДеревоРазбора, СтрокаОбъекта);
	
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
		
		Результат = СформироватьДеревоРазбора(ВидЭД, ДвоичныеДанныеФайла);
		Если Результат = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДеревоРазбора = Результат.ДеревоРазбора;
		СтрокаОбъекта = Результат.СтрокаОбъекта;
		СтрокаВозврата = ДайджестЗапросаВыпискиСбербанк(НастройкаОбмена, ДеревоРазбора, СтрокаОбъекта);
	
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка Тогда
		
		Результат = СформироватьДеревоРазбора(ВидЭД, ДвоичныеДанныеФайла);
		Если Результат = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДеревоРазбора = Результат.ДеревоРазбора;
		СтрокаОбъекта = Результат.СтрокаОбъекта;
		СтрокаВозврата = ДайджестВыпискиСбербанк(ДеревоРазбора, СтрокаОбъекта);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.Квитанция Тогда
		
		Результат = СформироватьДеревоРазбора(ВидЭД, ДвоичныеДанныеФайла);
		Если Результат = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДеревоРазбора = Результат.ДеревоРазбора;
		СтрокаОбъекта = Результат.СтрокаОбъекта;
		СтрокаВозврата = ДайджестКвитанцииСбербанк(ДеревоРазбора, СтрокаОбъекта);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты Тогда
		
		СтрокаВозврата = ДайджестПорученияНаПереводВалютыСбербанк(НастройкаОбмена, ДвоичныеДанныеФайла);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты Тогда
		
		СтрокаВозврата = ДайджестПорученияНаПокупкуВалютыСбербанк(НастройкаОбмена, ДвоичныеДанныеФайла);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты Тогда
		
		СтрокаВозврата = ДайджестПорученияНаПродажуВалютыСбербанк(НастройкаОбмена, ДвоичныеДанныеФайла);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты Тогда
		
		СтрокаВозврата = ДайджестРаспоряженияНаОбязательнуюПродажуВалютыСбербанк(НастройкаОбмена, ДвоичныеДанныеФайла);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.Письмо Тогда
		
		СтрокаВозврата = ДайджестПисьмаСбербанк(НастройкаОбмена, ДвоичныеДанныеФайла);
		
	КонецЕсли;
	
	Возврат ОбменСБанкамиСлужебныйВызовСервера.СтрокаBase64БезBOM(СтрокаВозврата);
	
КонецФункции

// Выполняет чтение тикета Сбербанка
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  Тикет - Строка - тикет, полученный из банка.
//  МассивНовыхСообщений - Массив - массив новых сообщений обмена, созданных из тикета
//  КоличествоТомов - Число - количество томов, которое нужно получить из банка.
//
Процедура ПрочитатьТикетСбербанка(НастройкаОбмена, Тикет, МассивНовыхСообщений = Неопределено, КоличествоТомов = 0) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеОбменСБанками.Ссылка КАК Владелец,
	|	СообщениеОбменСБанками.ВидЭД КАК ВидЭД,
	|	СообщениеОбменСБанками.Статус КАК Статус
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.Идентификатор = &УникальныйИдентификатор";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);

	Запрос.Текст = ТекстЗапроса;

	// Пропускаем, если извещение устарело
	Если Тикет.Свойства().Получить("docId") <> Неопределено И ЗначениеЗаполнено(Тикет.docId) Тогда
		УникальныйИДВнешний = Тикет.docId;
		Запрос.Текст = Запрос.Текст + " И СообщениеОбменСБанками.ДатаДокументаОтправителя > &ДатаДокументаОтправителя";
		Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИДВнешний);
		ДатаСоздания = XMLЗначение(Тип("Дата"), Тикет.createTime);
		Запрос.УстановитьПараметр("ДатаДокументаОтправителя", ДатаСоздания);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Если Тикет.Info = Неопределено
		ИЛИ (Тикет.Info.Свойства().Получить("docExtId") = Неопределено ИЛИ Тикет.Info.docExtId = Неопределено)
			И (Тикет.Свойства().Получить("docId") <> Неопределено И ЗначениеЗаполнено(Тикет.docId)) Тогда
		УникальныйИДВнешний = Тикет.docId;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Идентификатор", ".ВнешнийИдентификатор");
		Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИДВнешний);
	ИначеЕсли ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(Тикет, "Info.docExtId")) Тогда
		УникальныйИД = Тикет.Info.docExtId;
		Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИД);
	ИначеЕсли ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(Тикет, "Info.MsgFromBank.Message"))
		И СтрНайти(Тикет.Info.MsgFromBank.Message, "Document not found id=") > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Идентификатор", ".ВнешнийИдентификатор");
		УникальныйИД = Сред(Тикет.Info.MsgFromBank.Message, СтрДлина("Document not found id="));
		Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИД);
	ИначеЕсли ВРег(Тикет.Info.statusStateCode) = "RESPONSE_DIVISION" Тогда
		КоличествоТомов = Число(Тикет.OtherParams.Param.value);
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(Тикет, "Info.MsgFromBank.Message")) Тогда
		ТекстОшибки = НСтр("ru = 'Получена ошибка из банка:
								|%1'");
		ВызватьИсключение СтрШаблон(ТекстОшибки, Тикет.Info.MsgFromBank.Message);
		Возврат;
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(Тикет, "Info") <> Неопределено Тогда
			СтатусСББОЛ = ВРег(Тикет.Info.statusStateCode);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтатусСББОЛ)
			ИЛИ ИзменилсяСтатусВКвитанцииСбербанк(НастройкаОбмена, Выборка.Владелец, СтатусСББОЛ) Тогда
			ДвоичныеДанныеФайлаОтвета = ДвоичныеДанныеИзXDTO(ФабрикаXDTO, Тикет, , "Ticket");
			СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаОтвета);
			
			СтруктураВладельца = Новый Структура;
			
			СтруктураРеквизитов = Новый Структура;
			СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
			СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.Квитанция);
			СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
			СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
			СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", СсылкаНаХранилище);
			СтруктураРеквизитов.Вставить("СообщениеРодитель", Выборка.Владелец);
			СтруктураРеквизитов.Вставить("ДополнительнаяИнформация", СтатусСББОЛ);
			СтруктураРеквизитов.Вставить("Идентификатор", УникальныйИДВнешний);
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(Тикет, "createTime")) Тогда
				ДатаСоздания = XMLЗначение(Тип("Дата"), Тикет.createTime);
				СтруктураРеквизитов.Вставить("ДатаДокументаОтправителя", ДатаСоздания);
			КонецЕсли;
			
			СообщениеКвитанция = Неопределено;
			СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеКвитанция);
			СтруктураВладельца.Вставить(
				"ВнешнийИдентификатор", ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(Тикет, "docId"));
			
			РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				НастройкаОбмена, "СертификатБанка, ИспользуетсяКриптография");
			
			Если РеквизитыНастройкиОбмена.ИспользуетсяКриптография Тогда
			
				ДайджестBase64 = ДайджестСбербанк(Перечисления.ВидыЭДОбменСБанками.Квитанция, СсылкаНаХранилище, НастройкаОбмена);

				ДвоичныеДанныеДайджеста = Base64Значение(ДайджестBase64);
				АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеДайджеста);
				
				СтруктураРеквизитов = Новый Структура;
				СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
				СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
				СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
				СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
				СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеКвитанция);
				
				СохранитьСообщениеОбмена(СтруктураРеквизитов);
				
				Если НЕ ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(Тикет, "Sign") = Неопределено Тогда
					ХранилищеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "СертификатБанка");
					ДанныеСертификата = РеквизитыНастройкиОбмена.СертификатБанка.Получить();
					Если Не ДанныеСертификата = Неопределено Тогда
						Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
						ВладелецПодписи = Тикет.Sign.issuer;
						ДвоичныеДанныеПодписи = Base64Значение(Тикет.Sign.value);
						ДатаУстановкиПодписи = ЭлектроннаяПодпись.ДатаПодписания(ДвоичныеДанныеПодписи);
						ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
						ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеКвитанция);
						
						СвойстваПодписи = Новый Структура;
						СвойстваПодписи.Вставить("Подпись", ДвоичныеДанныеПодписи);
						СвойстваПодписи.Вставить("Отпечаток", Сертификат.Отпечаток);
						СвойстваПодписи.Вставить("КомуВыданСертификат", ВладелецПодписи);
						СвойстваПодписи.Вставить("Сертификат", ДанныеСертификата);
						
						УстановитьПривилегированныйРежим(Истина);
						ЭлектроннаяПодпись.ДобавитьПодпись(ПрисоединенныйФайл, СвойстваПодписи);
						УстановитьПривилегированныйРежим(Ложь);
						МассивНовыхСообщений = ?(МассивНовыхСообщений = Неопределено, Новый Массив, МассивНовыхСообщений);
						МассивНовыхСообщений.Добавить(СообщениеКвитанция);
					КонецЕсли;
				КонецЕсли;
			
			КонецЕсли;
		
			Если ЗначениеЗаполнено(СтатусСББОЛ) Тогда
				НовыйСтатусЭД = СостоянияИзКвитанцииСбербанк().Получить(СтатусСББОЛ);
				Если ЗначениеЗаполнено(НовыйСтатусЭД) Тогда
					СтруктураВладельца.Вставить("Статус", НовыйСтатусЭД);
				КонецЕсли;
			КонецЕсли;
			
			ПричинаОтклонения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(Тикет, "Info.MsgFromBank.Message");
			Если ПричинаОтклонения <> Неопределено Тогда
				СтруктураВладельца.Вставить("ПричинаОтклонения", ПричинаОтклонения);
			КонецЕсли;
			
			// Нельзя менять конечный статус, т.к. процесс получения выписки может не завершиться.
			Если Выборка.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки
				И Выборка.Статус = Перечисления.СтатусыОбменСБанками.Обработан Тогда
				СтруктураВладельца.Удалить("Статус");
				СтруктураВладельца.Удалить("ПричинаОтклонения");
			КонецЕсли;
			
			Если СтруктураВладельца.Количество() > 0 Тогда
				ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(Выборка.Владелец, СтруктураВладельца);
			КонецЕсли;
			
		КонецЕсли;
		
		// Сдвиг даты LastIncomingTime
		Если СтатусСББОЛ = "DELIVERED" И Выборка.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
			СдвинутьПоследнююДатуПолученияДокументовСбербанк(НастройкаОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры установленной сессии со Сбербанком
//
// Параметры:
//  Ключ - Произвольный - ключ, в разрезе которого сохранены параметры сессии.
// 
// Возвращаемое значение:
//  Структура - параметры установленный сессии с банком.
//
Функция ПараметрыУстановленнойСессииСбербанк(Ключ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса.СессииОбменСБанками.Получить(Ключ);
	
КонецФункции

// Заполняет фрод параметры в XDTO
//
// Параметры:
//  ФродЭлемент - ОбъектXDTO - объект, в котором требуется заполнить фрод-параметры.
//  Параметры - Структура - параметры фрод-мониторинга.
//  Логин - Строка - текущий логин пользователя.
//
Процедура ЗаполнитьФродПараметрыВXDTO(ФродЭлемент, Параметры, Логин = Неопределено) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Язык = Сред(КодЛокализацииИнформационнойБазы(), 1, 2);
	
	СтрокаФрод = "version=3.4.1.0_1&pm_fpua=" + Параметры.РазрядностьОС + "|0|" + Параметры.РазрядностьПроцессора + "|"
		+ Язык + "|" + ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка() + "&pm_fpsc=" + Параметры.ГлубинаЦвета
		+ "|" + Параметры.ШиринаМонитора + "|" + Параметры.ВысотаМонитора + "|" + Параметры.ШиринаРабочегоСтола + "&pm_fpsw"
		+ Параметры.УстановленныеКомпоненты + "&pm_fptz=" + Параметры.СмещениеЧасовогоПояса + "&pm_fpln=lang=" + Язык
		+ "|syslang=" + Параметры.ЯзыкСистемы + "|userlang=" + Параметры.ЯзыкПользователя
		+ "&pm_fpjv=0&pm_fpco=0&pm_fpasw=&pm_fpan=SBB&pm_fpacn=SBB&pm_fpol=" + Параметры.Онлайн
		+ "&pm_fposp=&pm_fpup=&pm_fpsaw=" + Параметры.ШиринаМонитора + "&pm_fpspd=" + Параметры.ГлубинаЦвета
		+ "&pm_fpsbd=&pm_fpsdx=" + Параметры.ПлотностьПикселяX + "&pm_fpsdy=" + Параметры.ПлотностьПикселяY + "&pm_fpslx="
		+ Параметры.ПлотностьПикселяX + "&pm_fpsly=" + Параметры.ПлотностьПикселяY + "&pm_fpsfse="
		+ Параметры.СглаживаниеШрифтов + "&pm_fpsui=&pm_os=Windows&pm_brmjv=" + СистемнаяИнформация.ВерсияПриложения
		+ "&pm_br=SBB&pm_inpt=&pm_expt=";
		
	СтрокаФродКодированная = КодироватьСтроку(СтрокаФрод, СпособКодированияСтроки.КодировкаURL);
	ТекстОшибки = "";
	
	Если ФродЭлемент.Свойства().Получить("Login") <> Неопределено Тогда
		Login = ?(ЗначениеЗаполнено(Логин), Логин, ";");
		ЗаполнитьСвойствоXDTO(ФродЭлемент, "Login", Login, Истина, ТекстОшибки);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(ФродЭлемент, "DevicePrint", СтрокаФродКодированная, Истина, ТекстОшибки);
	
	СвойстваКомпьютера = Параметры.ИдентификаторКомпьютера + ";" + Параметры.ИдентификаторПроцессора + ";"
		+ Параметры.ИдентификаторBIOS + ";" + Параметры.ИдентификаторДиска;
	
	Если ФродЭлемент.Свойства().Получить("ChannelIndicator") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(ФродЭлемент, "ChannelIndicator", "UPG_1C", Истина, ТекстОшибки);
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(ФродЭлемент, "IpMACAddresses", Параметры.IP + ";" + Параметры.MAC, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ФродЭлемент, "GeolocationInfo", ";;;;4", Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ФродЭлемент, "PcProp", СвойстваКомпьютера, Истина, ТекстОшибки);
	
	ИнформацияОТокене = Параметры.КонфигурационнаяСтрока;
	Если Параметры.Свойство("НомерКонтейнера") И ЗначениеЗаполнено(ИнформацияОТокене) Тогда
		МассивПараметровТокена = СтрРазделить(ИнформацияОТокене, "&");
		ПараметрыТокена = Новый Структура;
		Для Каждого Строка Из МассивПараметровТокена Цикл
			ПозицияРавно = СтрНайти(Строка, "=");
			ПозицияПервойКавычки = СтрНайти(Строка, """");
			ДлинаЗначения = СтрДлина(Строка) - ПозицияПервойКавычки - 1;
			ПараметрыТокена.Вставить(Сред(Строка, 1, ПозицияРавно - 1), Сред(Строка, ПозицияПервойКавычки + 1, ДлинаЗначения));
		КонецЦикла;
		TokenInfo = "TOKEN;" + ПараметрыТокена.devcfg + ";" + ПараметрыТокена.rnginitdate + ";" + ПараметрыТокена.serial
			+ ";" + ПараметрыТокена.buildid + ";" + Параметры.НомерКонтейнера;
		ЗаполнитьСвойствоXDTO(ФродЭлемент, "TokenInfo", TokenInfo, Истина, ТекстОшибки);
	Иначе
		ЗаполнитьСвойствоXDTO(ФродЭлемент, "TokenInfo", ";", Истина, ТекстОшибки);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(ФродЭлемент, "HttpAcceptLanguage", КодЛокализацииИнформационнойБазы(), Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры

// Процедура - Добавить запись в журнал
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//  Операция - Строка - выполняемый метод сервиса;
//  Фабрика - ФабрикаXDTO - используемая фабрика;
//  Запрос - ОбъектXDTO - отправленные данные;
//  Ответ - ОбъектXDTO - полученный ответ.
//
Процедура ДобавитьЗаписьВЖурнал(НастройкаОбмена, Операция, Фабрика, Отправлено, Получено) Экспорт
	
	Если ЗначениеЗаполнено(НастройкаОбмена) Тогда
		ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(НастройкаОбмена);
		Если Не ПараметрыЖурналирования.ИспользоватьЖурналирование Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ШаблонЗаписи = "%1
					|==>
					|%2
					|<==
					|%3";
	Если ТипЗнч(Отправлено) = Тип("Строка") Тогда
		ТекстЗапроса = Отправлено;
	Иначе
		ТекстЗапроса = СтрокаИзОбъектаXDTO(Фабрика, Отправлено);
	КонецЕсли;
	
	Если Получено <> Неопределено Тогда
		Если ТипЗнч(Получено) = Тип("Строка") Тогда
			ТекстОтвета = Получено;
		Иначе
			ТекстОтвета = СтрокаИзОбъектаXDTO(Фабрика, Получено);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЛога = СтрШаблон(ШаблонЗаписи, Операция, ТекстЗапроса, ТекстОтвета);
	
	ДобавитьЗаписьВЖурналОбмена(НастройкаОбмена, ЗаписьЛога);

КонецПроцедуры

// Формирует текст запроса состояния документов.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//  ИдентификаторыДокументов - Массив - список идентификаторов документов
//              * Строка - идентификатор документа.
// 
// Возвращаемое значение:
//      Строка - текст запроса состояния документов.
//
Функция ТекстЗапросаСостоянияДокументовСбербанк(НастройкаОбмена, ИдентификаторыДокументов) Экспорт
	
	ТекстОшибки = "";
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	Request = RequestСбербанк(ИдентификаторОрганизации, ТекстОшибки);
	
	DocIds = ОбъектТипаCML(ФабрикаXDTO, "Request.DocIds", "http://bssys.com/upg/request");
	Для Каждого ИдентификаторДокумента Из ИдентификаторыДокументов Цикл
		DocId = ОбъектТипаCML(ФабрикаXDTO, "Request.DocIds.DocId", "http://bssys.com/upg/request");
		ЗаполнитьСвойствоXDTO(DocId, "docid", ИдентификаторДокумента, Истина, ТекстОшибки);
		DocIds.DocId.Добавить(DocId);
	КонецЦикла;
	
	ЗаполнитьСвойствоXDTO(Request, "DocIds", DocIds, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Request.Проверить();
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(Запись, Request);
	ТекстЗапроса = Запись.Закрыть();
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает статус платежного документа
//
// Параметры:
//  Параметры - Структура - параметры выполнения процедуры:
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//    * СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - сообщение с исходным платежным документом
//    * ТекущаяСессия - Структура - параметры установленной сессии
//  АдресРезультата - Строка - адрес временного хранилища для помещения результата.
//    * Структура - возвращаемые параметры:
//       ** ТребуетсяАутентификация - Булево - требуется аутентификация, т.к. сессия "протухла".
//       ** Тикет - Строка - тикет ответа на запрос.
//
Процедура ОтправитьЗапросСтатусаПлатежногоДокумента(Параметры, АдресРезультата) Экспорт
	
	Результат = Новый Структура("ТребуетсяАутентификация, Тикет", Ложь, Неопределено);
	
	Если Параметры.ТекущаяСессия = Неопределено Тогда
		Результат.ТребуетсяАутентификация = Истина;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ВнешнийИдентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.СообщениеОбмена, "ВнешнийИдентификатор");
	МассивИдентификаторов = Новый Массив;
	МассивИдентификаторов.Добавить(ВнешнийИдентификатор);
	ТекстЗапроса = ТекстЗапросаСостоянияДокументовСбербанк(Параметры.НастройкаОбмена, МассивИдентификаторов);
	
	Данные = Новый Массив;
	Данные.Добавить(ТекстЗапроса);
	Тикеты = Неопределено;
	
	ОтправитьДанныеВСбербанк(Параметры.НастройкаОбмена, Параметры.ТекущаяСессия.ИдентификаторСессии, Данные, Тикеты,
		Результат.ТребуетсяАутентификация);
	
	Если Тикеты.Количество() Тогда
		Результат.Тикет = Тикеты.Получить(0);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Отправляет в Сбербанк запрос на генерацию SMS подтверждения платежного документа
//
// Параметры:
//  Параметры - Структура - параметры выполнения процедуры:
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//    * СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - сообщение с исходным платежным документом
//    * ТекущаяСессия - Структура - параметры установленной сессии
//  АдресРезультата - Строка - адрес временного хранилища для помещения результата.
//    * Структура - возвращаемые параметры:
//       ** ТребуетсяАутентификация - Булево - требуется аутентификация, т.к. сессия "протухла".
//       ** Тикет - Строка - тикет ответа на запрос.
//
Процедура ОтправитьЗапросНаГенерациюSMSСбербанк(Параметры, АдресРезультата) Экспорт
	
	Результат = Новый Структура("ТребуетсяАутентификация, Тикет", Ложь, Неопределено);
	
	Если Параметры.ТекущаяСессия = Неопределено Тогда
		Результат.ТребуетсяАутентификация = Истина;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ВнешнийИдентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.СообщениеОбмена, "ВнешнийИдентификатор");
	МассивИдентификаторов = Новый Массив;
	МассивИдентификаторов.Добавить(ВнешнийИдентификатор);
	ТекстЗапроса = ТекстЗапросаГенерацииSMSСбербанк(Параметры.НастройкаОбмена, ВнешнийИдентификатор);
	
	Данные = Новый Массив;
	Данные.Добавить(ТекстЗапроса);
	Тикеты = Неопределено;
	ОтправитьДанныеВСбербанк(Параметры.НастройкаОбмена, Параметры.ТекущаяСессия.ИдентификаторСессии, Данные, Тикеты,
		Результат.ТребуетсяАутентификация);
	
	Если Тикеты.Количество() Тогда
		Результат.Тикет = Тикеты.Получить(0);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Отправляет в Сбербанк запрос на проверку SMS
//
// Параметры:
//  Параметры - Структура - параметры выполнения процедуры:
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//    * СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - платежный документ
//    * ИдентификаторКриптопрофиля - Строка - идентификатор, полученный из банка
//    * SMSКод - Строка - код, введенный пользователем
//    * ТекущаяСессия - Структура - параметры установленной сессии
//  АдресРезультата - Строка - адрес временного хранилища для помещения результата.
//
Процедура ОтправитьЗапросНаПроверкуSMSСбербанк(Параметры, АдресРезультата) Экспорт
	
	Результат = Новый Структура("ТребуетсяАутентификация, Тикет", Ложь, Неопределено);

	ВнешнийИдентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.СообщениеОбмена, "ВнешнийИдентификатор");

	ТекстЗапроса = ТекстЗапросаПроверкиSMSСбербанк(Параметры.НастройкаОбмена, ВнешнийИдентификатор,
		Параметры.ИдентификаторКриптопрофиля, Параметры.SMSКод, Параметры.ТекущаяСессия);
	
	Данные = Новый Массив;
	Данные.Добавить(ТекстЗапроса);
	Тикеты = Неопределено;
	ОтправитьДанныеВСбербанк(Параметры.НастройкаОбмена, Параметры.ТекущаяСессия.ИдентификаторСессии, Данные, Тикеты,
		Результат.ТребуетсяАутентификация);
		
	Если Тикеты.Количество() Тогда
		Результат.Тикет = Тикеты.Получить(0);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Выполняет синхронизацию со Сбербанком
//
// Параметры:
//  Параметры - Структура - параметры отправки запроса, содержит поля:
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//    * ТекущаяСессия - Структура - параметры установленной сессии со Сбербанком
//  АдресРезультата - Строка - адрес временного хранилища для помещения результата.
//    * Структура - результат выполнения процедуры
//       ** Успех - Булево - признак успешности выполнения синхронизации
//       ** ТребуетсяАутентификация - Булево - сессия "протухла" и требуется повторить аутентификацию
//       ** КоличествоПолученных - Число - количество полученных документов.
//
Процедура СинхронизироватьДокументыСбербанк(Параметры, АдресРезультата) Экспорт
	
	Результат = Новый Структура("Успех, ТребуетсяАутентификация, КоличествоПолученных", Ложь, Ложь, 0);
	
	Если Параметры.ТекущаяСессия = Неопределено Тогда
		Результат.ТребуетсяАутентификация = Истина;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Параметры.НастройкаОбмена, "ИдентификаторОрганизации, Организация, Банк");
	ТекстЗапроса = ОбменСБанкамиСлужебныйВызовСервера.ТекстЗапросаНочнойВыписки(
		Параметры.НастройкаОбмена, ИдентификаторЗапроса, РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
	Данные = Новый Массив;
	Данные.Добавить(ТекстЗапроса);
	
	// Добавление запросов выписок
	ЗапросыВыписок = ЗапросыВыписокСбербанк(Параметры.НастройкаОбмена);
	Для каждого ЭлементКоллекции Из ЗапросыВыписок Цикл
		СтрокаXML = ОбменСБанкамиСлужебныйВызовСервера.ПакетXMLСбербанка(
			ЭлементКоллекции, Параметры.НастройкаОбмена, Параметры.ТекущаяСессия.ФродПараметры, Параметры.ТекущаяСессия.Логин);
		Данные.Добавить(СтрокаXML);
	КонецЦикла;
	
	Тикеты = Неопределено; ТребуетсяАутентификация = Ложь;
	
	ОтправитьДанныеВСбербанк(Параметры.НастройкаОбмена, Параметры.ТекущаяСессия.ИдентификаторСессии, Данные, Тикеты,
		ТребуетсяАутентификация);
	
	Если ТребуетсяАутентификация Тогда
		Результат.ТребуетсяАутентификация = Истина;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	СохранитьТикетыСбербанк(Параметры.НастройкаОбмена, Тикеты);
	
	// Получаем результаты по всем ранее отправленным запросам, т.к ответ на стороне Сбербанка формируется долго.
	МассивТикетов = МассивТикетовСбербанк(Параметры.НастройкаОбмена);

	ПолучитьИзвещенияПоТикетамСбербанк(Параметры.НастройкаОбмена, Параметры.ТекущаяСессия.ИдентификаторСессии,
		РеквизитыНастройкиОбмена.ИдентификаторОрганизации, МассивТикетов, Результат.КоличествоПолученных);
	
	ПолучитьСтатусыДокументовСбербанк(
		Параметры.НастройкаОбмена, Параметры.ТекущаяСессия.ИдентификаторСессии, Результат.КоличествоПолученных);
		
	СохранитьДатуСинхронизации(Параметры.НастройкаОбмена);
		
	Результат.Успех = Истина;
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Отправляет запрос новых документов в Сбербанк
//
// Параметры:
//  Параметры - Структура - параметры отправки запроса, содержит поля:
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//    * ТекущаяСессия - Структура - параметры установленной сессии со Сбербанком
//  АдресРезультата - Строка - адрес временного хранилища для помещения результата
//    * Массив - тикеты, полученные из банка:
//        * Строка - значение тикета.
//
Процедура ОтправитьЗапросНовыхДокументовСбербанк(Параметры, АдресРезультата) Экспорт
	
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.НастройкаОбмена, "ИдентификаторОрганизации");
	ТекстЗапроса = ОбменСБанкамиСлужебныйВызовСервера.ТекстЗапросаНочнойВыписки(
		Параметры.НастройкаОбмена, ИдентификаторЗапроса, ИдентификаторОрганизации);
	Данные = Новый Массив;
	Данные.Добавить(ТекстЗапроса);
	Тикеты = Неопределено;
	ОтправитьДанныеВСбербанк(
		Параметры.НастройкаОбмена, Параметры.ТекущаяСессия.ИдентификаторСессии, Данные, Тикеты, Неопределено);
	ПоместитьВоВременноеХранилище(Тикеты, АдресРезультата);
	
КонецПроцедуры

// Формирует текст запроса состояния запросов выписок Сбербанка
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком
//  МассивСообщенийОбмена - Массив - сообщения обмена, содержащие запросы выписок.
//  КоличествоИдентификаторов - Число - (возвращаемое значение) количество идентификаторов документов в тексте запроса.
// 
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаСостоянияЗапросовВыписокСбербанк(НастройкаОбмена, МассивСообщенийОбмена, КоличествоИдентификаторов = Неопределено) Экспорт
	
	РеквизитыСообщенийОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивСообщенийОбмена, "Статус, ПричинаОтклонения, ВнешнийИдентификатор");
	
	МассивИдентификаторов = Новый Массив;
	
	Для каждого ЭлементКоллекции Из РеквизитыСообщенийОбмена Цикл
		Если ЭлементКоллекции.Значение.Статус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком Тогда
			ТекстСообщения = НСтр("ru = 'Запрос выписки отклонен по причине: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЭлементКоллекции.Значение.ПричинаОтклонения);
			ВызватьИсключение ТекстСообщения;
		ИначеЕсли ЭлементКоллекции.Значение.Статус <> Перечисления.СтатусыОбменСБанками.Исполнен Тогда
			МассивИдентификаторов.Добавить(ЭлементКоллекции.Значение.ВнешнийИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоИдентификаторов = МассивИдентификаторов.Количество();
	
	Если КоличествоИдентификаторов Тогда
		ТекстВозврата = ТекстЗапросаСостоянияДокументовСбербанк(НастройкаОбмена, МассивИдентификаторов);
	КонецЕсли;
	
	Возврат ТекстВозврата;
	
КонецФункции

// Получает идентификатор криптопрофиля по тикету.
//
// Параметры:
//  Параметры - Структура - параметры обработки, содержит поля:
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//    * Тикет - Строка - текущий тикет.
//    * ТекущаяСессия - Структура - параметры установленной сессии
//  АдресРезультата - Строка - адрес, по которому будут помещены результаты выполнения.
//
Процедура ПолучитьИдентификаторКриптопрофиляСбербанк(Параметры, АдресРезультата) Экспорт
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Параметры.НастройкаОбмена, "ИдентификаторОрганизации");
		
	МассивТикетов = Новый Массив;
	МассивТикетов.Добавить(Параметры.Тикет);
		
	МассивОтветов = Новый Массив;
	
	ПолучитьОтветыПоТикетамСбербанк(Параметры.НастройкаОбмена, МассивТикетов, Параметры.ТекущаяСессия.ИдентификаторСессии,
		ИдентификаторОрганизации, МассивОтветов);
		
	Ответ = МассивОтветов.Получить(0);
		
	Если Ответ = "<!--NOT PROCESSED YET-->" ИЛИ Ответ = "<!--NOT_PROCESSED_YET-->" Тогда
	ИначеЕсли Ответ = "<!--REQUEST NOT FOUND-->" ИЛИ Ответ = "<!--REQUEST_NOT_FOUND-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка. Повторите операцию позже.'");
		ВызватьИсключение ТекстОшибки
	Иначе
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Ответ);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
		Если ЭД.Свойства().Получить("Errors") <> Неопределено Тогда
			ТекстСообщения = "";
			ОбменСБанкамиСлужебныйВызовСервера.ОбработатьИзвещениеСОшибкойСбербанк(Ответ, ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Если ЭД.Tickets.Ticket.Info.statusStateCode = "FAIL" Тогда
			ТекстСообщения = НСтр("ru = 'Получена ошибка из банка:
										|""%1""'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЭД.Tickets.Ticket.Info.MsgFromBank.Message);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	
		ИдентификаторКриптопрофиля = ЭД.SmsCryptoProfile;
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(ИдентификаторКриптопрофиля, АдресРезультата);
	
КонецПроцедуры

// Получает результат проверки SMS из банка.
//
// Параметры:
//  Параметры - Структура - параметры обработки, содержит поля:
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//    * Тикет - Строка - текущий тикет.
//    * ТекущаяСессия - Структура - параметры установленной сессии
//    * СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - платежный документ
//  АдресРезультата - Строка - адрес, по которому будут помещены результаты выполнения.
//
Процедура ПолучитьРезультатПроверкиSMSСбербанк(Параметры, АдресРезультата) Экспорт
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Параметры.НастройкаОбмена, "ИдентификаторОрганизации");
		
	МассивТикетов = Новый Массив;
	МассивТикетов.Добавить(Параметры.Тикет);
		
	МассивОтветов = Новый Массив;
	ПолучитьОтветыПоТикетамСбербанк(Параметры.НастройкаОбмена, МассивТикетов, Параметры.ТекущаяСессия.ИдентификаторСессии,
		ИдентификаторОрганизации, МассивОтветов);
		
	Ответ = МассивОтветов.Получить(0);
		
	Если Ответ = "<!--NOT PROCESSED YET-->" ИЛИ Ответ = "<!--NOT_PROCESSED_YET-->" Тогда
		ПоместитьВоВременноеХранилище(Неопределено, АдресРезультата);
	ИначеЕсли Ответ = "<!--REQUEST NOT FOUND-->" ИЛИ Ответ = "<!--REQUEST_NOT_FOUND-->" Тогда
		ТекстОшибки = НСтр("ru = 'На сервере банка произошла ошибка. Повторите операцию позже.'");
		ВызватьИсключение ТекстОшибки
	Иначе
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Ответ);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		Если ЭД.Свойства().Получить("Errors") <> Неопределено Тогда
			Если ЭД.Errors.Error.Code = "106" Тогда
				ВызватьИсключение Нстр("ru = 'Неверно указан одноразовый пароль из SMS для подтверждения платежа.'"); 
			Иначе
				ТекстСообщения = "";
				ОбменСБанкамиСлужебныйВызовСервера.ОбработатьИзвещениеСОшибкойСбербанк(Ответ, ТекстСообщения);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
		
		Тикет = ЭД.Tickets.Ticket;
		ПрочитатьТикетСбербанка(Параметры.НастройкаОбмена, Тикет);

		ПоместитьВоВременноеХранилище(ЭД.Tickets.Ticket.Info.statusStateCode = "ACCEPTED", АдресРезультата);

	КонецЕсли;
	
КонецПроцедуры

// Получить ответы по тикетам из Сбербанка
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  МассивТикетов - Массив - массив тикетов
//     * Строка - тикет
//  ИдентификаторСессии - Строка - идентификатор установленной сессии
//  ИдентификаторОрганизации - Строка - идентификатор организации в системе Сбербанка
//  МассивОтветов - Массив - ответы Сбербанка:
//     * Строка - ответ Сбербанка.
// КоличествоЗапросов - Число - количество запросов для вывода прогресса.
//
Процедура ПолучитьОтветыПоТикетамСбербанк(Знач НастройкаОбмена, Знач МассивТикетов, Знач ИдентификаторСессии, Знач ИдентификаторОрганизации, МассивОтветов, Знач КоличествоЗапросов = 0) Экспорт
	
	ТекстОшибки = "";
	
	WSПрокси = ОбменСБанкамиСлужебныйПовтИсп.WSПроксиСбербанк();
	
	МаксимальноеКоличествоЗапросов = 20;
	МассивОтветов = Новый Массив;
	ПоОдному = Ложь;
	Делитель = Цел(КоличествоЗапросов/100) + 1;
	КоличествоНеобработанныхТикетов = 0;
	
	Пока МассивТикетов.Количество() Цикл
	
		ПолучениеСтатусаТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "getRequestStatusSRP");
		ВыбранныйЭлемент = WSПрокси.ФабрикаXDTO.Создать(ПолучениеСтатусаТип);
		
		ЗаполнитьСвойствоXDTO(ВыбранныйЭлемент, "sessionId", ИдентификаторСессии, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ВыбранныйЭлемент, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ШаблонСообщения = НСтр("ru = 'Ошибка запроса статуса документа:
										|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекстОшибки);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Счетчик = 0;
		ОтправленныеТикеты = Новый Массив;
		Для Каждого Тикет Из МассивТикетов Цикл
			ВыбранныйЭлемент.requests.Добавить(Тикет);
			ОтправленныеТикеты.Добавить(Тикет);
			Счетчик = Счетчик + 1;
			Если Счетчик = МаксимальноеКоличествоЗапросов ИЛИ ПоОдному Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ВыбранныйЭлемент.Проверить();
		
		Попытка
			XDTOРезультат = WSПрокси.getRequestStatusSRP(ВыбранныйЭлемент);
		Исключение
			ДобавитьЗаписьВЖурнал(
				НастройкаОбмена, "getRequestStatusSRP", WSПрокси.ФабрикаXDTO, ВыбранныйЭлемент, XDTOРезультат);
			Если Не ПоОдному Тогда
				ПоОдному = Истина;
				Продолжить;
			КонецЕсли;
			ВызватьИсключение
		КонецПопытки;
		
		МассивТикетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивТикетов, ОтправленныеТикеты);
		
		ДобавитьЗаписьВЖурнал(НастройкаОбмена, "getRequestStatusSRP", WSПрокси.ФабрикаXDTO, ВыбранныйЭлемент, XDTOРезультат);
			
		Для Каждого Ответ Из XDTOРезультат.return Цикл
			МассивОтветов.Добавить(Ответ);
			Если Ответ = "<!--NOT PROCESSED YET-->" ИЛИ Ответ = "<!--NOT_PROCESSED_YET-->" Тогда
				КоличествоНеобработанныхТикетов = КоличествоНеобработанныхТикетов + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоЗапросов Тогда
			// Во избежание избыточного потребления памяти и ее утечек при выполнении одной длительной операции 
			// не следует сообщать прогресс более 100 раз.
			Обработано = КоличествоЗапросов - МассивТикетов.Количество() + КоличествоНеобработанныхТикетов;
			Если Обработано/Делитель - Цел(Обработано/Делитель) = 0 Тогда
				ДлительныеОперации.СообщитьПрогресс(Обработано/КоличествоЗапросов*100, "" + Обработано + "/" + КоличествоЗапросов);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Отправляет данные в сбербанк без использования токена. Полученные тикеты не сохраняются в информационной базе.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  ИдентификаторСессии - Строка - идентификатор открытой сессии
//  Данные - Массив - данные документов, отправляемых в банк
//   * Строка - данные документа, отправляемого в банк
//  Тикеты - Массив - тикеты, полученные из банка
//   * Строка - тикет на запрос
//  ТребуетсяАутентификация - Булево - (возвращаемое значение) признак, что идентификатор сессии протух.
//  МассивСообщенийОбмена - Массив - отправляемые в банк электронные документы
//     * ДокументСсылка.СообщенияОбменСБанками - ссылка на сообщение обмена.
//  ВыводитьПрогрессВыполнения - Булево - признак необходимости вывода прогресса выполнения.
//
Процедура ОтправитьДанныеВСбербанк(Знач НастройкаОбмена, Знач ИдентификаторСессии, Знач Данные, Тикеты, ТребуетсяАутентификация = Ложь, МассивСообщенийОбмена = Неопределено, ВыводитьПрогрессВыполнения = Истина) Экспорт
	
	Тикеты = Новый Массив;
	
	ТекстОшибки = "";
	Если МассивСообщенийОбмена = Неопределено Тогда // для запросов не нужен большой таймаут
		WSПрокси = ОбменСБанкамиСлужебныйПовтИсп.WSПроксиСбербанк();
	Иначе
		// Документы отправляются через длительные операции, таймаут не устанавливается
		WSПрокси = ОбменСБанкамиСлужебныйПовтИсп.WSПроксиСбербанк(0);
	КонецЕсли;
	
	КоличествоДокументов = Данные.Количество();

	МаксимальноеКоличествоЭлементов = 100;
	Индекс = 0;
	
	Пока Данные.Количество() Цикл
	
		ОтправкаЗапросаТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "sendRequestsSRP");
		ВыбранныйЭлемент = WSПрокси.ФабрикаXDTO.Создать(ОтправкаЗапросаТип);
		
		ЗаполнитьСвойствоXDTO(ВыбранныйЭлемент, "sessionId", ИдентификаторСессии, Истина, ТекстОшибки);
		Счетчик = 0;
		ОтправленныеДанные = Новый Массив;
		Для Каждого ДанныеДокумента Из Данные Цикл
			ВыбранныйЭлемент.requests.Добавить(ДанныеДокумента);
			ОтправленныеДанные.Добавить(ДанныеДокумента);
			Счетчик = Счетчик + 1;
			Если Счетчик = МаксимальноеКоличествоЭлементов Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Данные = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Данные, ОтправленныеДанные);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ШаблонСообщения = НСтр("ru = 'Ошибка формирования пакета данных:
										|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекстОшибки);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ВыбранныйЭлемент.Проверить();
		
		Попытка
			XDTOРезультат = WSПрокси.sendRequestsSRP(ВыбранныйЭлемент);
		Исключение
			ДобавитьЗаписьВЖурнал(НастройкаОбмена, "sendRequestsSRP", WSПрокси.ФабрикаXDTO, ВыбранныйЭлемент, XDTOРезультат);
			ВызватьИсключение;
		КонецПопытки;
		
		ДобавитьЗаписьВЖурнал(НастройкаОбмена, "sendRequestsSRP", WSПрокси.ФабрикаXDTO, ВыбранныйЭлемент, XDTOРезультат);
		
		Для Каждого Ответ Из XDTOРезультат.return Цикл
			Если Ответ = "00000000-0000-0000-0000-000000000002" Тогда
				ТребуетсяАутентификация = Истина;
				Возврат;
			ИначеЕсли Сред(Ответ, 1, 23) = "00000000-0000-0000-0000" Тогда
				ТекстСообщения = ОбменСБанкамиКлиентСервер.ТекстСообщенияСбербанк(Ответ);
				ВызватьИсключение ТекстСообщения;
			ИначеЕсли Ответ = "<!--REQUESTID_DUBLIC-->" Тогда
				Если МассивСообщенийОбмена = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Электронный документ с таким идентификатором уже есть в базе банка.'") ;
					ВызватьИсключение ТекстСообщения;
				Иначе // вероятно отправка была прервана пользователем
					СообщениеОбмена = МассивСообщенийОбмена.Получить(Индекс);
					Тикеты.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Идентификатор"));
				КонецЕсли;
			ИначеЕсли СтрДлина(Ответ) = 36 Тогда // уникальный идентификатор
				Тикеты.Добавить(Ответ);
			Иначе
				ТекстОшибки = "";
				ОбменСБанкамиСлужебныйВызовСервера.ОбработатьИзвещениеСОшибкойСбербанк(Ответ, ТекстОшибки);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Если ВыводитьПрогрессВыполнения Тогда
			ДлительныеОперации.СообщитьПрогресс(Индекс/КоличествоДокументов*100, "" + Индекс + "/" + КоличествоДокументов);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

// Скачивает внешнюю компоненту через интернет в фоновом процессе и определяет идентификатор внешней компоненты.
//
// Параметры:
//  Параметры - Структура - параметры загрузки внешней компоненты.
//                 * URLВК - Строка - адрес внешней компоненты
//  Адрес - Строка - адрес временного хранилища, содержащий URL информационного файла.
//
Процедура ОпределитьИдентификаторВКСбербанк(Параметры, Адрес = Неопределено) Экспорт
	
	ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
	ПараметрыПолучения.Таймаут = 1260;
	РезультатВК = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(Параметры.URLВК, ПараметрыПолучения);
	Если РезультатВК.Статус Тогда
		ИнформацияОВК = ИнформацияОВнешнейКомпоненте(РезультатВК.Путь);
		УдалитьИзВременногоХранилища(РезультатВК.Путь);
		Если ИнформацияОВК = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Файл внешней компоненты банка имеет некорректное содержимое.'")
		КонецЕсли;
		ПоместитьВоВременноеХранилище(ИнформацияОВК.ИмяМодуля, Адрес);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось скачать файл внешней компоненты.
									|Описание: %1'");
		ТекстОшибки =  НСтр("ru = 'Не удалось скачать файл внешней компоненты.
							|Описание: %1
							|URL: %2'");
		Если РезультатВК.Свойство("КодСостояния") Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Код ошибки: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатВК.СообщениеОбОшибке, РезультатВК.КодСостояния);
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Код ошибки: %3'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатВК.СообщениеОбОшибке, Параметры.URLВК, РезультатВК.КодСостояния);
		Иначе
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатВК.СообщениеОбОшибке);
			ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатВК.СообщениеОбОшибке, Параметры.URLВК);
		КонецЕсли;
		ВидОперации = НСтр("ru = 'Загрузка внешней компоненты через интернет'");
		ОбработатьОшибку(ВидОперации, ТекстОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Формирует запросы выписок для Сбербанка
//
// Параметры:
//  НастройкаОбмена	 - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
// 
// Возвращаемое значение:
//  Массив - в элементах содержит ДокументСсылка.СообщениеОбменСБанками для передачи в банк.
//
Функция ЗапросыВыписокСбербанк(Знач НастройкаОбмена) Экспорт
	
	МассивВозврата = Новый Массив;
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, Банк, ИспользуетсяКриптография");
	
	МассивБанковскихСчетов = Новый Массив;
	ОбменСБанкамиПереопределяемый.ПолучитьНомераБанковскихСчетов(
		РеквизитыНастройкиОбмена.Организация, РеквизитыНастройкиОбмена.Банк, МассивБанковскихСчетов);
	ДатаОкончания = ТекущаяДатаСеанса();
	ДатаНачала = ДатаНачалаЗапросаВыписки(НастройкаОбмена);
	КоличествоДней = (НачалоДня(ДатаОкончания) - ДатаНачала) / 60 / 60 / 24 + 1;

	Для Счетчик = 1 По КоличествоДней Цикл
		Для Каждого НомерСчета Из МассивБанковскихСчетов Цикл
			ДатаЗапроса = ДатаНачала + (Счетчик - 1) * 60 * 60 * 24;
			ИдентификаторЗапроса = Неопределено;
			ДанныеЗапроса = ДанныеЗапросаВыпискиСбербанк(НастройкаОбмена, ДатаЗапроса, НомерСчета, ИдентификаторЗапроса);
				
			АдресФайла = ПоместитьВоВременноеХранилище(ДанныеЗапроса);
			
			СтруктураРеквизитов = Новый Структура;
			СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
			СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
			СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
			СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
			СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
			СтруктураРеквизитов.Вставить("Идентификатор", ИдентификаторЗапроса);
			СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
			СтруктураРеквизитов.Вставить("НомерСчета", НомерСчета);
			СтруктураРеквизитов.Вставить("ДатаНачала", ДатаЗапроса);
			СтруктураРеквизитов.Вставить("ДатаОкончания", ДатаЗапроса);
			СтруктураРеквизитов.Вставить("СозданАвтоматически", Истина);
			СообщениеЗапрос = Неопределено;
			СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеЗапрос);
			МассивВозврата.Добавить(СообщениеЗапрос);
			
			Если РеквизитыНастройкиОбмена.ИспользуетсяКриптография Тогда
				ДайджестBase64 = ДайджестСбербанк(
					Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки, АдресФайла, НастройкаОбмена);

				ПодписанныеДанные = Base64Значение(ДайджестBase64);
				
				АдресХранилища = ПоместитьВоВременноеХранилище(ПодписанныеДанные);
				
				СтруктураРеквизитов = Новый Структура;
				СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
				СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
				СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
				СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
				СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
				СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеЗапрос);
				СохранитьСообщениеОбмена(СтруктураРеквизитов);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Осуществляет смену пароля 
//
// Параметры:
//  Параметры - Структура - параметры выполнения процедуры:
//   * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//   * ИдентификаторСессии - Строка - идентификатор установленной сессии.
//   * Логин - Строка - логин пользователя в системе банка
//   * Пароль - Строка - старый пароль
//   * НовыйПароль - Строка - новый пароль
//   * Соль - ДвоичныеДанные - соль, полученная из банка
//   * B - ДвоичныеДанные - значение параметра B для расчета свертки
//  АдресРезультата - Строка - Адрес временного хранилища, в который ничего не помещается.
//
Процедура СменитьПарольСбербанк(Параметры, АдресРезультата) Экспорт
	
	Логин = Параметры.Логин;
	СтарыйПароль = Параметры.Пароль;
	НовыйПароль = Параметры.НовыйПароль;
	
	WSПрокси = ОбменСБанкамиСлужебныйПовтИсп.WSПроксиСбербанк();
	
	Попытка
	
		ТекстОшибки = "";
	
		ПодготовкаСменыПароляТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "preChangePassword");
		ЗначениеXDTO = WSПрокси.ФабрикаXDTO.Создать(ПодготовкаСменыПароляТип);
		ЗаполнитьСвойствоXDTO(ЗначениеXDTO, "sessionId", Параметры.ИдентификаторСессии, Истина, ТекстОшибки);
	
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ШаблонСообщения = НСтр("ru = 'Ошибка формирования запроса на смену пароля:
									|%1'");
			ТекстОшибки = СтрШаблон(ШаблонСообщения, ТекстОшибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	
		ЗначениеXDTO.Проверить();
	
	Исключение
	
		ВидОперации = НСтр("ru = 'Формирование запроса на смену пароля'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = Нстр("ru = 'При формировании запроса на смену пароля произошла ошибка:
								|%1'");
		ТекстОшибки = СтрШаблон(ШаблонСообщения, КраткаяИнформация);
		ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Попытка
		XDTOРезультат = WSПрокси.preChangePassword(ЗначениеXDTO);
	Исключение
		ДобавитьЗаписьВЖурнал(
			Параметры.НастройкаОбмена, "preChangePassword", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);
		ВидОперации = НСтр("ru = 'Запрос смены пароля'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = Нстр("ru = 'При отправке запроса на смену пароля произошла ошибка:
								|%1'");
		ТекстОшибки = СтрШаблон(ШаблонСообщения, КраткаяИнформация);
		ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	ДобавитьЗаписьВЖурнал(
		Параметры.НастройкаОбмена, "preChangePassword", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);
	
	СольНовая = XDTOРезультат.return[0];
	
	ВидОперации = НСтр("ru = 'Смена пароля'");

	K = Неопределено; A = Неопределено;
	РассчитатьСверткуПароляСбербанк(Логин, СтарыйПароль, Параметры.Соль, Параметры.B, K, A);

	Верификатор = ВерификаторНовогоПароляСбербанк(Логин, НовыйПароль, СольНовая);
	
	Попытка
	
		ТекстОшибки = "";
		
		
		ИзменениеПароляТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "changePassword");
		ЗначениеXDTO = WSПрокси.ФабрикаXDTO.Создать(ИзменениеПароляТип);
		
		ЗаполнитьСвойствоXDTO(ЗначениеXDTO, "sessionId", Параметры.ИдентификаторСессии, Истина, ТекстОшибки);
		ЗначениеXDTO.newPasswordData.Добавить(K);
		ЗначениеXDTO.newPasswordData.Добавить(A);
		ЗначениеXDTO.newPasswordData.Добавить(Верификатор);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ШаблонСообщения = НСтр("ru = 'Ошибка смены пароля:
									|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекстОшибки);
			ОбработатьОшибку(ВидОперации, ТекстСообщения);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЗначениеXDTO.Проверить();
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = Нстр("ru = 'При смене пароля произошла ошибка:
								|%1'");
		ТекстОшибки = СтрШаблон(ШаблонСообщения, КраткаяИнформация);
		ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;

	Попытка
		XDTOРезультат = WSПрокси.changePassword(ЗначениеXDTO);
	Исключение
		ДобавитьЗаписьВЖурнал(
			Параметры.НастройкаОбмена, "changePassword", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);
		ВидОперации = НСтр("ru = 'Отправка нового пароля в банк'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = Нстр("ru = 'При отправке пароля в банк произошла ошибка:
								|%1'");
		ТекстОшибки = СтрШаблон(ШаблонСообщения, КраткаяИнформация);
		ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	ДобавитьЗаписьВЖурнал(Параметры.НастройкаОбмена, "changePassword", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);
	
	КодВозврата = Base64Строка(XDTOРезультат.return[1]);
	Если КодВозврата <> "AA==" Тогда // успех
		СписокКодовСбербанк = Новый Соответствие;
		Описание = НСтр("ru = 'Время жизни идентификатора сессии истекло.'");
		СписокКодовСбербанк.Вставить("AQ==", Новый Структура("Код, Описание", "01", Описание));
		Описание = НСтр("ru = 'Неверные данные нового пароля.'");
		СписокКодовСбербанк.Вставить("Ag==", Новый Структура("Код, Описание", "02", Описание));
		Описание = НСтр("ru = 'Не специфицированная ошибка.'");
		СписокКодовСбербанк.Вставить("CQ==", Новый Структура("Код, Описание", "09", Описание));
		
		ТекущаяОшибка = СписокКодовСбербанк.Получить(КодВозврата);
			
		Если ТекущаяОшибка = Неопределено Тогда
			ШаблонОшибки = НСтр("ru = 'Ошибка смены пароля.
									|Код: %1'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, КодВозврата);
		Иначе
			ШаблонОшибки = НСтр("ru = 'Ошибка смены пароля.
									|Код: %1
									|Описание: %2'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ТекущаяОшибка.Код, ТекущаяОшибка.Описание);
		КонецЕсли;
		ОбработатьОшибку(ВидОперации, ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Производит аутентификацию по логину на сервере Сбербанка
//
// Параметры:
//  Параметры - Структура - параметры выполнения процедуры:
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена.
//    * Логин - Строка - логин пользователя в системе банка
//    * Пароль - Строка - пароль для логина.
//    * ФродПараметры - Структура - параметры фрод-мониторинга, полученные на клиенте.
//  АдресРезультата - Строка - адрес временного хранилища для помещения результата.
//    * Структура - возвращаемые параметры:
//         ** ТребуетсяСМСАутентификация - Булево - требуется подтверждение сессии;
//         ** ТребуетсяТокен - Булево - пользователь должен использовать токен;
//         ** B - Строка - параметр B для расчета свертки нового пароля.
//
Процедура ВыполнитьАутентификациюПоЛогинуСбербанк(Параметры, АдресРезультата) Экспорт
	
	ПараметрыВозврата = Новый Структура;
	ПараметрыВозврата.Вставить("ТребуетсяСМСАутентификация", Ложь);
	ПараметрыВозврата.Вставить("ТребуетсяТокен", Ложь);
	ПараметрыВозврата.Вставить("B");
	ПараметрыВозврата.Вставить("Соль");
	ПараметрыВозврата.Вставить("ИдентификаторСессии");
	
	ТекстОшибки = "";
	
	WSПрокси = ОбменСБанкамиСлужебныйПовтИсп.WSПроксиСбербанк();
	
	ЗапросАутентификацииТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "preLogin");
	ЗначениеXDTO = WSПрокси.ФабрикаXDTO.Создать(ЗапросАутентификацииТип);
	
	ЗаполнитьСвойствоXDTO(ЗначениеXDTO, "userLogin", Параметры.Логин, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВидОперации = НСтр("ru = 'Формирование запроса аутентификации'");
		ШаблонСообщения = НСтр("ru = 'Ошибка при формировании запроса аутентификации:
								|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекстОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗначениеXDTO.Проверить();

	Для Счетчик = 1 По 2 Цикл
		Попытка
			XDTOРезультат = WSПрокси.preLogin(ЗначениеXDTO);
			Прервать;
		Исключение
			ДобавитьЗаписьВЖурнал(Параметры.НастройкаОбмена, "preLogin", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);
			Если Счетчик = 2 Тогда
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	ДобавитьЗаписьВЖурнал(Параметры.НастройкаОбмена, "preLogin", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);

	КодВозврата = Base64Строка(XDTOРезультат.return[3]);
	Если КодВозврата = "AA==" Тогда // успех
		
		K = ""; A = "";
		РассчитатьСверткуПароляСбербанк(
			Параметры.Логин, Параметры.Пароль, XDTOРезультат.return[0], XDTOРезультат.return[1], K, A);
		
		ПараметрыВозврата.B = XDTOРезультат.return[1];
		ПараметрыВозврата.Соль = XDTOРезультат.return[0];
	
		АутентификацияТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "login");
		ЗначениеXDTO = WSПрокси.ФабрикаXDTO.Создать(АутентификацияТип);
	
		ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
			XDTOРезультат.return[2]);
		
		ЗаполнитьСвойствоXDTO(ЗначениеXDTO, "sessionId", ИдентификаторСессии, Истина, ТекстОшибки);
		ФродСтрока = ОбменСБанкамиСлужебныйВызовСервера.Фрод(Параметры.ФродПараметры);
		ЗаполнитьСвойствоXDTO(ЗначениеXDTO, "FraudParams", ФродСтрока, Истина, ТекстОшибки);
		ЗначениеXDTO.clientAuthData.Добавить(K);
		ЗначениеXDTO.clientAuthData.Добавить(A);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВидОперации = НСтр("ru = 'Формирование данных аутентификации'");
			ШаблонСообщения = НСтр("ru = 'Ошибка при формировании данных аутентификации:
									|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекстОшибки);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ЗначениеXDTO.Проверить();

		Попытка
			XDTOРезультат = WSПрокси.login(ЗначениеXDTO);
		Исключение
			ДобавитьЗаписьВЖурнал(Параметры.НастройкаОбмена, "login", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);
			ВызватьИсключение
		КонецПопытки;
		
		ДобавитьЗаписьВЖурнал(Параметры.НастройкаОбмена, "login", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);
	
		КодВозврата = Base64Строка(XDTOРезультат.return[1]);

		Если КодВозврата = "AA==" Тогда // Успех
			ПараметрыВозврата.ИдентификаторСессии = ИдентификаторСессии;
		ИначеЕсли КодВозврата = "Ew==" Тогда // требуется аутентификация по СМС
			ПараметрыВозврата.ТребуетсяСМСАутентификация = Истина;
			ПараметрыВозврата.ИдентификаторСессии = ИдентификаторСессии;
		ИначеЕсли КодВозврата = "GA==" Тогда
			ПараметрыВозврата.ТребуетсяТокен = Истина;
		Иначе
			ИнформацияОбОшибке = ОбменСБанкамиКлиентСервер.ТекстОшибкиСбербанк(КодВозврата);
			
			Если ИнформацияОбОшибке = Неопределено Тогда
				ШаблонОшибки = НСтр("ru = 'При аутентификации произошла ошибка.
									|Код: %1'");
				ТекстОшибки = СтрШаблон(ШаблонОшибки, КодВозврата);
			Иначе
				Если ИнформацияОбОшибке.Код = "01" Тогда
					ТекстОшибки = ИнформацияОбОшибке.Описание;
				Иначе
					ШаблонОшибки = НСтр("ru = 'При аутентификации произошла ошибка.
										|Код: %1
										|Описание: %2'");
					ТекстОшибки = СтрШаблон(ШаблонОшибки, ИнформацияОбОшибке.Код, ИнформацияОбОшибке.Описание);
				КонецЕсли;
			КонецЕсли;
			ВидОперации = НСтр("ru = 'Отправка данных аутентификации'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Иначе
		ИнформацияОбОшибке = ОбменСБанкамиКлиентСервер.ТекстОшибкиСбербанк(КодВозврата);
		
		Если ИнформацияОбОшибке = Неопределено Тогда
			ШаблонОшибки = НСтр("ru = 'При запросе аутентификации произошла ошибка.
								|Код: %1'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, КодВозврата);
		Иначе
			
			Если ИнформацияОбОшибке.Код = "01" Тогда
				ТекстОшибки = ИнформацияОбОшибке.Описание;
			Иначе
				ШаблонОшибки = НСтр("ru = 'При аутентификации произошла ошибка.
									|Код: %1
									|Описание: %2'");
				ТекстОшибки = СтрШаблон(ШаблонОшибки, ИнформацияОбОшибке.Код, ИнформацияОбОшибке.Описание);
			КонецЕсли;
			
		КонецЕсли;
		ВидОперации = НСтр("ru = 'Отправка запроса аутентификации'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ПараметрыВозврата, АдресРезультата);
	
КонецПроцедуры

// Отправляет запросы статусов запросов в Сбербанк
//
// Параметры:
//  Параметры - Структура - параметры обработки, содержит поля:
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//    * ТекущаяСессия - Структура - параметры установленной сессии;
//    * МассивСообщенийОбмена - Массив - сообщения обмена, содержащие исходные запросы выписок
//        * ДокументСсылка.СообщенияОбменСБанками - сообщение обмена с банком
//  АдресРезультата - Строка - адрес для помещения результата работы процедуры в фоновом процессе.
//
Процедура ОтправитьЗапросыСтатусовЗапросовПоЛогинуСбербанк(Параметры, АдресРезультата) Экспорт
	
	КоличествоИдентификаторов = 0;
	ТекстЗапроса = ТекстЗапросаСостоянияЗапросовВыписокСбербанк(
		Параметры.НастройкаОбмена, Параметры.МассивСообщенийОбмена, КоличествоИдентификаторов);
		
	Если ТекстЗапроса = Неопределено Тогда // все запросы имеют конечный статус
		ПоместитьВоВременноеХранилище(Неопределено, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	КоличествоЗапросов = Параметры.МассивСообщенийОбмена.Количество();
	
	Процент = (КоличествоЗапросов - КоличествоИдентификаторов)/КоличествоЗапросов * 100;
	Текст = "" + (КоличествоЗапросов - КоличествоИдентификаторов) + "/" + КоличествоЗапросов;
	ДлительныеОперации.СообщитьПрогресс(Процент, Текст);
	
	Данные = Новый Массив;
	Данные.Добавить(ТекстЗапроса);
	Тикеты = Неопределено;
	ТребуетсяАутентификация = Ложь;
	ОтправитьДанныеВСбербанк(
		Параметры.НастройкаОбмена, Параметры.ТекущаяСессия.ИдентификаторСессии, Данные, Тикеты, ТребуетсяАутентификация);
		
	Если ТребуетсяАутентификация Тогда
		ТекстСообщения = НСтр("ru = 'Операция прервана, так как произведен вход под такой же учетной записью с другого места.
									|Смените пароль, если источник входа в систему банка не известен.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Тикеты, АдресРезультата);
	
КонецПроцедуры

// Получает статусы запросов по тикетам.
//
// Параметры:
//  Параметры - Структура - параметры обработки, содержит поля:
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//    * МассивТикетов - Массив - тикеты, по которым необходимо получить извещения:
//         ** Строка - текущий тикет.
//    * ТекущаяСессия - Структура - параметры установленной сессии
//    * КоличествоЗапросов - Число - полное количество запросов. Необходимо для вывода прогресса.
//  АдресРезультата - Строка - адрес, по которому будут помещены результаты выполнения.
//
Процедура ПолучитьСтатусыЗапросовПоЛогинуСбербанк(Параметры, АдресРезультата) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("МассивНеобработанныхТикетов", Новый Массив);
	СтруктураВозврата.Вставить("ТребуетсяАутентификация", Ложь);
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Параметры.НастройкаОбмена, "ИдентификаторОрганизации");
		
	МассивОтветов = Новый Массив;
	ПолучитьОтветыПоТикетамСбербанк(Параметры.НастройкаОбмена, Параметры.МассивТикетов,
		Параметры.ТекущаяСессия.ИдентификаторСессии, ИдентификаторОрганизации, МассивОтветов, Параметры.КоличествоЗапросов);
		
	Индекс = 0;
	
	Для Каждого Ответ Из МассивОтветов Цикл
		
		Если Ответ = "<!--NOT PROCESSED YET-->" ИЛИ Ответ = "<!--NOT_PROCESSED_YET-->" Тогда
			СтруктураВозврата.МассивНеобработанныхТикетов.Добавить(Параметры.МассивТикетов.Получить(Индекс));
		ИначеЕсли Ответ = "<!--REQUEST NOT FOUND-->" ИЛИ Ответ = "<!--REQUEST_NOT_FOUND-->" Тогда
			// Считаем, что тикет обработан и сохраняем его как внешний идентификатор сообщения обмена.
			СохранитьТикетКакВнешнийИдентификаторСообщенияОбменаСбербанк(
				Параметры.НастройкаОбмена, Параметры.МассивТикетов.Получить(Индекс));
		ИначеЕсли Ответ = "00000000-0000-0000-0000-000000000002" Тогда
			СтруктураВозврата.ТребуетсяАутентификация = Истина;
			Прервать;
		ИначеЕсли Сред(Ответ, 1, 23) = "00000000-0000-0000-0000" Тогда
			ТекстСообщения = ОбменСБанкамиКлиентСервер.ТекстСообщенияСбербанк(Ответ);
			ВызватьИсключение ТекстСообщения;
		Иначе
			МассивНовыхСообщенийОбмена = Новый Массив;
			КоличествоТомов = 0;
			ИдентификаторЗапроса = Параметры.МассивТикетов.Получить(Индекс);
			ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветСбербанка(
				Ответ, Параметры.НастройкаОбмена, МассивНовыхСообщенийОбмена, КоличествоТомов, Параметры.СоздаватьОперацииВыписки);
			Если КоличествоТомов > 0 Тогда
				ПолучитьБольшойПакетСбербанк(Параметры.НастройкаОбмена, Параметры.ТекущаяСессия.ИдентификаторСессии,
					ИдентификаторОрганизации, ИдентификаторЗапроса, КоличествоТомов, МассивНовыхСообщенийОбмена);
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
	
КонецПроцедуры

// Подготавливает данные для отправки в Сбербанк.
//
// Параметры:
//   Параметры - Структура - параметры выполнения операции в фоновом процессе, содержит поля:
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка прямого обмена с банком;
//    * ДатаНачала - Дата - дата начала периода запроса выписки;
//    * ДатаОкончания - Дата - дата окончания периода запроса выписки;
//    * МассивБанковскихСчетов - Массив - в элементах содержит строки - номера счетов;
//    * ТекущаяСессия - Структура, Неопределено - параметры текущей сессии.
//   АдресРезультата - Строка - адрес, по которому нужно поместить данные. Содержит массив с элементами
//        * ДокументСсылка.СообщениеОбменСБанками - сформированное сообщение запроса выписки банка.
//
Процедура СформироватьЗапросыВыписокСбербанк(Параметры, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСообщенийОбмена = Новый Массив;
	
	ЕстьОшибка = Ложь;
	ИдентификаторЗапроса = "";
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Параметры.НастройкаОбмена, "Организация, Банк, ПрограммаБанка, ИдентификаторОрганизации, ИспользуетсяКриптография");
		
	КоличествоДней = (НачалоДня(Параметры.ДатаОкончания) - Параметры.ДатаНачала) / 60 / 60 / 24 + 1;

	Делитель = Цел(КоличествоДней/100) + 1;
	
	Для Счетчик = 1 По КоличествоДней Цикл
		
		Для Каждого НомерСчета Из Параметры.МассивБанковскихСчетов Цикл
			
			ДатаЗапроса = Параметры.ДатаНачала + (Счетчик - 1) * 60 * 60 * 24;
			ДанныеЗапроса = ДанныеЗапросаВыпискиСбербанк(
				Параметры.НастройкаОбмена, ДатаЗапроса, НомерСчета, ИдентификаторЗапроса);
				
			АдресФайла = ПоместитьВоВременноеХранилище(ДанныеЗапроса);
			
			СтруктураРеквизитов = Новый Структура;
			СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
			СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
			СтруктураРеквизитов.Вставить("НастройкаОбмена", Параметры.НастройкаОбмена);
			СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
			СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
			СтруктураРеквизитов.Вставить("Идентификатор", ИдентификаторЗапроса);
			СтруктураРеквизитов.Вставить("СсылкаНаОбъект", Параметры.НастройкаОбмена);
			СтруктураРеквизитов.Вставить("НомерСчета", НомерСчета);
			СтруктураРеквизитов.Вставить("ДатаНачала", ДатаЗапроса);
			СтруктураРеквизитов.Вставить("ДатаОкончания", ДатаЗапроса);
			СообщениеЗапрос = Неопределено;
			СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеЗапрос);

			Если РеквизитыНастройкиОбмена.ИспользуетсяКриптография Тогда
				ДайджестBase64 = ДайджестСбербанк(
					Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки, АдресФайла, Параметры.НастройкаОбмена);

				ПодписанныеДанные = Base64Значение(ДайджестBase64);
				
				АдресХранилища = ПоместитьВоВременноеХранилище(ПодписанныеДанные);
				
				СтруктураРеквизитов = Новый Структура;
				СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
				СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
				СтруктураРеквизитов.Вставить("НастройкаОбмена", Параметры.НастройкаОбмена);
				СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
				СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
				СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеЗапрос);
				СохранитьСообщениеОбмена(СтруктураРеквизитов);
			КонецЕсли;

			МассивСообщенийОбмена.Добавить(СообщениеЗапрос);
			
		КонецЦикла;
		
		// Во избежание избыточного потребления памяти и ее утечек при выполнении одной длительной операции 
		// не следует сообщать прогресс более 100 раз.
		Если Счетчик/Делитель - Цел(Счетчик/Делитель) = 0 Тогда
			ДлительныеОперации.СообщитьПрогресс(Счетчик/КоличествоДней*100, "" + Счетчик + "/" + КоличествоДней);
		КонецЕсли;
	
	КонецЦикла;
	
	Счетчик = Счетчик - 1;
	ДлительныеОперации.СообщитьПрогресс(Счетчик/КоличествоДней*100, "" + Счетчик + "/" + КоличествоДней);

	ПоместитьВоВременноеХранилище(МассивСообщенийОбмена, АдресРезультата);

КонецПроцедуры

// Отправляет документы в Сбербанк на сервере без использования токена.
//
// Параметры:
//  Параметры - Структура - параметры отправки документов, содержит поля:
//     * МассивСообщенийОбмена - Массив - сообщения для отправки в банк
//         ** ДокументСсылка.СообщенияОбменСБанками- сообщение обмена с банком
//     * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//     * ТекущаяСессия - Структура - параметры установленной сессии с банком, содержит поля:
//          ** ФродПараметры - ФиксированнаяСтруктура - параметры фрод-мониторинга
//          ** ИдентификаторСессии - Строка - идентификатор установленной сессии
//     * ПолучитьСтатусыДокументов - Булево - если Истина, то необходимо получить новые документы после отправки.
//     * ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид отправляемого электронного документа.
//     * АдресРезультата - Строка - адрес временного хранилища для результата, если процедура вызывалась не в фоновом задании.
//     * ВыводитьПрогрессВыполнения - Булево - признак необходимости выводить прогресс выполнения.
//  АдресРезультата - Строка - адрес временного хранилища для помещения результата.
//      * Структура - результат выполнения процедуры, содержит следующие поля:
//          ** ОтправленныеДокументы - Массив - содержит ссылки на отправленные документы информационной базы
//               *** ДокументСсылка - владелец электронного документа.
//          ** КоличествоПолученных - Число - количество полученных документов
//          ** ТребуетсяАутентификация - Булево - признак, что идентификатор сессии протух.
//          ** МассивТикетов - Массив - полученные из банка тикеты:
//               *** Строка - тикет запроса.
//          ** СообщенияТребуютПодтверждения - Массив - сообщения обмена, которые требуют подтверждения.
//               *** ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена с банком.
//
Процедура ОтправитьДокументыПоЛогинуВСбербанк(Параметры, АдресРезультата = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяАутентификация", Ложь);
	Результат.Вставить("МассивТикетов", Новый Массив);
	Результат.Вставить("КоличествоПолученных", 0);
	Результат.Вставить("СообщенияТребуютПодтверждения", Новый Массив);
	Результат.Вставить("ОтправленныеДокументы", Новый Массив);

	Если Параметры.МассивСообщенийОбмена.Количество() = 0 Тогда
		Параметры.АдресРезультата = ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	МассивДанных = Новый Массив;
	
	Для Каждого СообщениеОбмена Из Параметры.МассивСообщенийОбмена Цикл
		ПакетXML = ОбменСБанкамиСлужебныйВызовСервера.ПакетXMLСбербанка(
			СообщениеОбмена, Параметры.НастройкаОбмена, Параметры.ТекущаяСессия.ФродПараметры, Параметры.ТекущаяСессия.Логин);
		МассивДанных.Добавить(ПакетXML);
	КонецЦикла;

	ОтправитьДанныеВСбербанк(Параметры.НастройкаОбмена, Параметры.ТекущаяСессия.ИдентификаторСессии, МассивДанных,
		Результат.МассивТикетов, Результат.ТребуетсяАутентификация, Параметры.МассивСообщенийОбмена,
		Параметры.ВыводитьПрогрессВыполнения);
	
	Если Результат.ТребуетсяАутентификация Тогда
		Параметры.АдресРезультата = ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	// Программа сразу ждет выписки по запросам, поэтому хранить тикеты не требуется.
	Если Параметры.ВидЭД <> Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
		СохранитьТикетыСбербанк(Параметры.НастройкаОбмена, Результат.МассивТикетов);
	КонецЕсли;

	Для Каждого СообщениеОбмена Из Параметры.МассивСообщенийОбмена Цикл
		УстановитьСтатусСообщенияОбмена(СообщениеОбмена, Перечисления.СтатусыОбменСБанками.Отправлен);
	КонецЦикла;
	
	ОтправленныеДокументы = ОбменСБанкамиСлужебныйВызовСервера.ВладельцыСообщенийОбмена(Параметры.МассивСообщенийОбмена);
	
	Результат.ОтправленныеДокументы = ОтправленныеДокументы;
	
	Если Параметры.ПолучитьСтатусыДокументов Тогда // для писем
		МассивТикетов = Новый Массив;
		ПолучитьСтатусыДокументовСбербанк(Параметры.НастройкаОбмена, Параметры.ТекущаяСессия.ИдентификаторСессии,
			Результат.КоличествоПолученных, Параметры.МассивСообщенийОбмена, Параметры.ВыводитьПрогрессВыполнения);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.СообщенияТребуютПодтверждения, Параметры.МассивСообщенийОбмена);
	КонецЕсли;
	
	Параметры.АдресРезультата = ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиОбменаСБанками

// Загружает актуальный список банков с сайта 1С.
//
Процедура ЗагрузитьСписокБанковССайта() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	АдресСервера = "https://directbank.1c.ru/downloads/bankslist.mxl";
	
	ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
	ПараметрыПолучения.Таймаут = 60;
	
	Результат = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АдресСервера, ПараметрыПолучения);
	
	Если Результат.Статус Тогда
		
		Данные = ПолучитьИзВременногоХранилища(Результат.Путь);
		УдалитьИзВременногоХранилища(Результат.Путь);
		
		// Проверка, что файл корректный.
		ВремФайл = ПолучитьИмяВременногоФайла("mxl");
		Данные.Записать(ВремФайл);
		Макет = Новый ТабличныйДокумент;
		Попытка
			Макет.Прочитать(ВремФайл);
		Исключение
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'Чтение файла списка банков, поддерживающих обмен через сервис 1С:ДиректБанк.'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ШаблонОшибки = НСтр("ru = 'Ошибка выполнения операции: %1
							|%2'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ВидОперации, КраткоеПредставлениеОшибки);
			ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки, ТекстОшибки);
			Возврат;
		КонецПопытки;
	
		ФайловаяСистема.УдалитьВременныйФайл(ВремФайл);
		
		ДанныеВнешнихФайлов = Константы.ОбщиеФайлыОбменСБанками.Получить().Получить();
	
		Если ДанныеВнешнихФайлов = Неопределено Тогда
			ДанныеВнешнихФайлов = Новый Структура;
		КонецЕсли;

		ДанныеВнешнихФайлов.Вставить("СписокБанков", Данные);
	
		ХранилищеДанных = Новый ХранилищеЗначения(ДанныеВнешнихФайлов);
	
		Константы.ОбщиеФайлыОбменСБанками.Установить(ХранилищеДанных);
	
		ОбновитьПовторноИспользуемыеЗначения();
		
	ИначеЕсли ЗначениеЗаполнено(Результат.СообщениеОбОшибке) Тогда
		
		ВидОперации = НСтр("ru = 'Загрузка списка банков, поддерживающих обмен DirectBank'");
		ШаблонОшибки = НСтр("ru = 'Выполнение операции: %1
							|%2'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ВидОперации, Результат.СообщениеОбОшибке);
		УровеньВажностиСобытия = УровеньЖурналаРегистрации.Предупреждение;
		Шаблон = НСтр("ru = 'Электронное взаимодействие.Обмен с банками'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(Шаблон, УровеньВажностиСобытия, , , ТекстОшибки);

	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу банков для которых возможна настройка обмена через 1С:ДиректБанк.
//
// Параметры:
//  ПараметрыОтбора - Структура - структура с ключами:
//   * Организация    - ОпределяемыйТип.Организация - организация, по которой необходимо установить фильтр (необязательный);
//   * Банк           - ОпределяемыйТип.БанкОбменСБанками - банк, по которому необходимо установить фильтр (необязательный);
//   * БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - банковский счет, по которому необходимо установить фильтр (необязательный).
//  Проект - Строка - Признак проекта, которые поддерживает банк.
//
// Возвращаемое значение:
//   Таблица или Неопределено - банки доступные для настройки обмена через 1С:ДиректБанк.
//
Функция БанкиДляНастройкиОбменаЧерезДиректБанк(ПараметрыОтбора = Неопределено, Проект = "1") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяСправочникаБанковскиеСчета = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("БанковскиеСчетаОрганизаций");
	ИмяСправочникаОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации");
	
	Если ИмяСправочникаБанковскиеСчета = Неопределено
		ИЛИ ИмяСправочникаОрганизации  = Неопределено Тогда 
		
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	БанковскиеСчета.Владелец КАК Организация,
		|	БанковскиеСчета.Банк КАК Банк,
		|	БанковскиеСчета.Банк.Код КАК БИК
		|ПОМЕСТИТЬ ВТ_БанкиДляОбмена
		|ИЗ
		|	&БанковскиеСчетаОрганизаций КАК БанковскиеСчета
		|ГДЕ
		|	НЕ БанковскиеСчета.ПометкаУдаления
		|	И &УсловиеСчетЗакрыт
		|	И БанковскиеСчета.Владелец = &Ссылка_Справочник_Организации
		|{ГДЕ
		|	БанковскиеСчета.Владелец КАК Организация,
		|	БанковскиеСчета.Банк КАК Банк,
		|	БанковскиеСчета.Ссылка КАК БанковскийСчет}
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Банк
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_БанкиДляОбмена.Организация КАК Организация,
		|	ВТ_БанкиДляОбмена.Банк КАК Банк,
		|	ВТ_БанкиДляОбмена.БИК КАК БИК
		|ИЗ
		|	ВТ_БанкиДляОбмена КАК ВТ_БанкиДляОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
		|		ПО ВТ_БанкиДляОбмена.Банк = НастройкиОбменСБанками.Банк
		|			И ВТ_БанкиДляОбмена.Организация = НастройкиОбменСБанками.Организация
		|			И (НЕ НастройкиОбменСБанками.Недействительна)
		|			И (НЕ НастройкиОбменСБанками.ПометкаУдаления)
		|ГДЕ
		|	НастройкиОбменСБанками.Банк ЕСТЬ NULL";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&БанковскиеСчетаОрганизаций", "Справочник." + ИмяСправочникаБанковскиеСчета);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "= &Ссылка_Справочник_Организации", "ССЫЛКА Справочник." + ИмяСправочникаОрганизации);
	
	НазваниеРеквизита = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"БанковскийСчетОрганизации.Закрыт");
	
	Если ЗначениеЗаполнено(НазваниеРеквизита) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСчетЗакрыт", "НЕ БанковскиеСчета." + НазваниеРеквизита);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСчетЗакрыт", "ИСТИНА");
	КонецЕсли;
	
	Построитель = Новый ПостроительЗапроса(ТекстЗапроса);
	
	Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
		Для Каждого Параметр Из ПараметрыОтбора Цикл
			ЭлементОтбора = Построитель.Отбор.Добавить(Параметр.Ключ);
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
			ЭлементОтбора.Значение = Параметр.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Построитель.Выполнить();
	РезультатЗапроса = Построитель.Результат;
		
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	БанкиБезНастройкиОбмена = РезультатЗапроса.Выгрузить();
		
	БанкиCПоддержкойDirectBank = БанкиБезНастройкиОбмена.СкопироватьКолонки("Организация,Банк");
	
	ТабДок = ОбменСБанкамиСлужебныйПовтИсп.СписокБанков();

	КоличествоЗаписей = ТабДок.ВысотаТаблицы;
	
	Для Индекс = 2 По КоличествоЗаписей Цикл
		
		ПроектыСтрокой = ТабДок.Область(Индекс, 8).Текст;
		
		Если СтрНайти(ПроектыСтрокой, Проект) Тогда
			
			БИКБанка = ТабДок.Область(Индекс, 2).Текст;
			СтруктураОтбора = Новый Структура("БИК", БИКБанка);
			НайденныеСтроки = БанкиБезНастройкиОбмена.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НоваяСтрока = БанкиCПоддержкойDirectBank.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока, "Организация,Банк");
				БанкиБезНастройкиОбмена.Удалить(НайденнаяСтрока);
			КонецЦикла;
			
			Если БанкиБезНастройкиОбмена.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат БанкиCПоддержкойDirectBank;
	
КонецФункции


#КонецОбласти

#Область СтроковыеКонстанты

// Возвращает пространство имен используемой схемы для асинхронного обмена с банком.
//
// Параметры:
//  ВерсияФормата - Строка - версия формата обмена.
// 
// Возвращаемое значение:
// Строка - пространство имен.
//
Функция ПространствоИменАсинхронногоОбмена(ВерсияФормата) Экспорт
	
	Если ВерсияФормата = "2.01" ИЛИ ВерсияФормата = "2.02" ИЛИ ВерсияФормата = "2.03" Тогда
		URI = "http://bank.1c.ru/XMLSchema";
	Иначе
		URI = "http://directbank.1c.ru/XMLSchema";
	КонецЕсли;
	Возврат URI;
	
КонецФункции

// Возвращает формат даты для России.
// Не исправлять, т.к это не является ошибкой.
// 
// Возвращаемое значение:
//  Строка - формат даты для России
//
Функция ФорматДатыРоссия() Экспорт
	
	Возврат "ДФ=dd.MM.yyyy"
	
КонецФункции

#КонецОбласти

#Область ОбработкаСообщенийОбмена

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  Параметры - Структура - параметры обработки электронных документов, содержит поля:
//   * МассивСсылокНаОбъект - Массив - содержит ссылки на документы, которые необходимо обработать;
//   * МассивОтпечатковСертификатов - Массив - отпечатки доступных сертификатов на клиенте;
//   * Действия - Строка - последовательность необходимых действий с электронным документом;
//   * СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка сообщение обмена, который нужно обработать;
//   * СессииОбменСБанками - Соответствие - существующие сессии обмена со Сбербанком
//                         - Неопределено - нет установленных сессий.
//
// Возвращаемое значение:
//  Структура - содержит следующие поля:
//    * ОтправленныеДокументы - Массив - документы-владельцы отправленных электронных документов;
//    * МассивНовыхСообщенийОбмена - Массив - содержит ссылки на сформированные электронные документы для их открытия на клиенте;
//    * КоличествоНовыхЭД - Число - количество сформированных электронных документов;
//    * КоличествоПодготовленных - Число - количество подготовленных электронных документов;
//    * КоличествоОтправленных - Число - количество отправленных электронных документов;
//    * СоотвСертификатовИИхСтруктур - Соответствие - содержит данные сертификатов с сохраненными паролями
//         ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на элемент справочника сертификатов
//         ** Значение -Структура - данные сертификата, содержит следующие поля:
//           *** Пароль - Строка - пароль сертификата
//           *** ПарольПолучен - Булево - признак, что пароль сохранен и информационной базе
//    * СертификатыСообщенийОбмена - Структура - содержит сертификаты и сообщения, сгруппированные для подписания
//    * СоотвНастроекОбменаИСертификатовАвторизации - Соответствие - содержит настройки обмена с аутентификацией по сертификату, где
//            ** Ключ - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена
//            ** Значение - Массив - содержит ссылки на сертификаты аутентификации
//    * СтруктураКОтправке - Структура - содержит поля:
//      ** БезПодписи - Массив - сообщения обмена, которые не требуется подписывать;
//      ** САвторизациейЛогинПароль - Соответствие - (ключ - НастройкаОбмена, значение - МассивСообщенийОбмена к отправке).
//      ** ЧерезТокенСбербанка - Массив - содержит ссылки на сообщения обмена, которые нужно отправить
//      ** БазоваяАутентификацияСбербанка - Соответствие - данные для отправки по логину и паролю.
//      ** ЧерезВК - Соответствие - данные для отправки через внешнюю компоненту.
//      ** САутентификациейПоСертификату - Соответствие - данные для отправки через внешнюю компоненту.
//      ** АльфаБанкОнлайн - Соответствие - данные для отправки в АльфаБанк.
//  Неопределено - при выполнении процедуры произошла ошибка.
//
Функция ОбработатьЭлектронныеДокументы(Параметры, АдресРезультата) Экспорт
	
	МассивСсылокНаОбъект = Параметры.МассивСсылокНаОбъект;
	МассивОтпечатковКлиент = Параметры.МассивОтпечатковСертификатов;
	Действия = Параметры.Действия;
	СообщениеОбмена = Параметры.СообщениеОбмена;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ОтправленныеДокументы", Новый Массив); // документы-владельцы отправленных электронных документов.
	СтруктураВозврата.Вставить("МассивНовыхСообщенийОбмена", Новый Массив); // эти ЭД будут открыты на клиенте
	СтруктураВозврата.Вставить("КоличествоНовыхЭД", 0); // количество сформированных электронных документов.
	СоотвНастроекОбменаИСертификатовАвторизации = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвНастроекОбменаИСертификатовАвторизации", СоотвНастроекОбменаИСертификатовАвторизации);
	
	СтруктураВозврата.Вставить("КоличествоОтправленных", 0);
	СтруктураВозврата.Вставить("КоличествоПодготовленных", 0);
	СтруктураКОтправке = Новый Структура;
	СтруктураВозврата.Вставить("СтруктураКОтправке", СтруктураКОтправке);

	СтруктураКОтправке.Вставить("БезПодписи", Новый Массив);
	СтруктураКОтправке.Вставить("САвторизациейЛогинПароль", Новый Соответствие);
	СтруктураКОтправке.Вставить("ЧерезТокенСбербанка", Новый Массив);
	СтруктураКОтправке.Вставить("БазоваяАутентификацияСбербанка", Новый Соответствие);
	СтруктураКОтправке.Вставить("ЧерезВК", Новый Соответствие);
	СтруктураКОтправке.Вставить("ЧерезДополнительнуюОбработку", Новый Соответствие);
	СтруктураКОтправке.Вставить("САутентификациейПоСертификату", Новый Соответствие);
	СтруктураКОтправке.Вставить("АльфаБанкОнлайн", Новый Массив);
	
	СертификатыСообщенийОбмена = Новый Структура;
	СтруктураВозврата.Вставить("СертификатыСообщенийОбмена", СертификатыСообщенийОбмена);
	
	СоотвСертификатовИИхСтруктур = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	
	СтруктураВозврата.Вставить("ПодтверждениеПлатежейВБанке", ОбменСБанкамиКлиентСервер.СтруктураПодтвержденияПлатежа());
	
	Если НЕ ОбменСБанкамиСлужебныйВызовСервера.ПравоВыполненияОбмена(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции("ИспользоватьОбменСБанками") Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы(
			"РАБОТАСБАНКАМИ");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Подписать")
		ИЛИ ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		
		ДобавитьОтпечаткиСертификатовНаСервере(МассивОтпечатковКлиент);
		
		ТаблицаДоступныхСертификатов = ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатковКлиент);

		МассивОтпечатков = ТаблицаДоступныхСертификатов.ВыгрузитьКолонку("Отпечаток");

	КонецЕсли;
	
	Если ТипЗнч(СообщениеОбмена) <> Тип("Массив")
		И НЕ (ЗначениеЗаполнено(СообщениеОбмена) И (СообщениеОбмена.Направление = Перечисления.НаправленияЭД.Входящий)) Тогда
		ЭлектронноеВзаимодействиеПереопределяемый.ПроверитьГотовностьИсточников(МассивСсылокНаОбъект);
	КонецЕсли;
	
	Если ТипЗнч(СообщениеОбмена) <> Тип("Массив") И МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивНеобрабатываемыхОбъектов = Новый Массив;
	
	// Формирование ЭД:
	
	Если СообщениеОбмена = Неопределено И ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Сформировать") Тогда
		Если Действия = "Сформировать" ИЛИ Действия = "СформироватьПоказать" Тогда
			УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылокНаОбъект);
		КонецЕсли;
		
		НастройкиОбъектов = Новый Соответствие;
		Для Сч = -МассивСсылокНаОбъект.Количество() + 1 По 0 Цикл
			СсылкаНаОбъект = МассивСсылокНаОбъект[-Сч];
			
			НастройкиОбмена = ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаОбъект, Истина, Неопределено);
			Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
				МассивСсылокНаОбъект.Удалить(-Сч);
			Иначе
				НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
			КонецЕсли;
		КонецЦикла;
		Если МассивСсылокНаОбъект.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстЗапросаСоздатьЭД =
		"ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка
		|ПОМЕСТИТЬ МассивСсылок
		|ИЗ
		|	&МассивСсылок КАК МассивСсылок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МассивСсылок.ОбъектСсылка КАК ВладелецЭД
		|ИЗ
		|	МассивСсылок КАК МассивСсылок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияЭД
		|		ПО МассивСсылок.ОбъектСсылка = СостоянияЭД.СсылкаНаОбъект";
		
		Если Действия = "СформироватьПодписатьОтправить" Тогда
			ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов);
			ТекстЗапросаСоздатьЭД = ТекстЗапросаСоздатьЭД + " ГДЕ
			|СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
			|ИЛИ (СостоянияЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.НеСформирован)
			|		ИЛИ СостоянияЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.Отклонен)
			|		ИЛИ СостоянияЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОшибкаПередачи))";
		КонецЕсли;
		Запрос.Текст = ТекстЗапросаСоздатьЭД;
		Измерение = Метаданные.РегистрыСведений.СостоянияОбменСБанками.Измерения.Найти("СсылкаНаОбъект");
		ТЗ_Ссылки = Новый ТаблицаЗначений;
		КолонкаТЗ = ТЗ_Ссылки.Колонки.Добавить("ОбъектСсылка", Измерение.Тип);
		Для Каждого Элемент Из МассивСсылокНаОбъект Цикл
			Строка = ТЗ_Ссылки.Добавить();
			Строка.ОбъектСсылка = Элемент;
		КонецЦикла;
		Запрос.УстановитьПараметр("МассивСсылок", ТЗ_Ссылки);
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		
		Если ТЗ_ЭД.Количество() > 0 Тогда
			МассивОбъектов = ТЗ_ЭД.ВыгрузитьКолонку("ВладелецЭД");
			МассивНовыхСообщенийОбмена = СформироватьСообщенияОбмена(МассивОбъектов, НастройкиОбъектов);
			СтруктураВозврата.КоличествоНовыхЭД = МассивНовыхСообщенийОбмена.Количество();
		КонецЕсли;
		Если Действия = "Сформировать" ИЛИ Действия = "СформироватьПоказать" Тогда
			СтруктураВозврата.Вставить("МассивНовыхСообщенийОбмена", МассивНовыхСообщенийОбмена);
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;
	
	// Формирование временных таблиц - обрабатываемых сообщений обмена, сформированные ВТ используются далее на всех этапах:
	Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
		ТекстОсновногоЗапроса =
			"ВЫБРАТЬ
			|	СообщенияОбмена.Ссылка,
			|	СообщенияОбмена.ВидЭД,
			|	СообщенияОбмена.Банк,
			|	СообщенияОбмена.Направление,
			|	СообщенияОбмена.Организация,
			|	СообщенияОбмена.НастройкаОбмена,
			|	СообщенияОбмена.СообщениеРодитель,
			|	СообщенияОбмена.Статус
			|ПОМЕСТИТЬ ВТ_ЭД
			|ИЗ
			|	Документ.СообщениеОбменСБанками КАК СообщенияОбмена
			|ГДЕ
			|	СообщенияОбмена.Ссылка В(&МассивСсылок)";
		Если ТипЗнч(СообщениеОбмена) <> Тип("Массив") Тогда
			МассивСсылокСообщенийОбмена = Новый Массив;
			МассивСсылокСообщенийОбмена.Добавить(СообщениеОбмена);
		Иначе
			МассивСсылокСообщенийОбмена = СообщениеОбмена;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокСообщенийОбмена);
	Иначе
		ТекстОсновногоЗапроса =
			"ВЫБРАТЬ
			|	СообщенияОбмена.Ссылка,
			|	СообщенияОбмена.ВидЭД,
			|	СообщенияОбмена.Банк,
			|	СообщенияОбмена.Направление,
			|	СообщенияОбмена.Организация,
			|	СообщенияОбмена.НастройкаОбмена,
			|	СообщенияОбмена.СообщениеРодитель,
			|	СообщенияОбмена.Статус
			|ПОМЕСТИТЬ ВТ_ЭД
			|ИЗ
			|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияЭД
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеОбменСБанками КАК СообщенияОбмена
			|		ПО СостоянияЭД.СообщениеОбмена = СообщенияОбмена.Ссылка
			|ГДЕ
			|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)";

		Если МассивНеобрабатываемыхОбъектов.Количество() > 0 Тогда
			ДопУсловие = " И НЕ(СообщенияОбмена.Ссылка В (&МассивНеобрабатываемыхОбъектов))";
			Запрос.УстановитьПараметр("МассивНеобрабатываемыхОбъектов", МассивНеобрабатываемыхОбъектов);
			ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + ДопУсловие;
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаОбъект);
	КонецЕсли;
	
	// Получим из входящих параметров СоотвСертификатовИИхСтруктур.
	СертификатыСПаролями = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату( , МассивОтпечатковКлиент);
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Для Каждого Элемент Из СертификатыСПаролями Цикл
		Структура = Новый Структура("ПарольСертификата, ПарольПолучен", Элемент.Значение, Истина);
		СоотвСертификатовИИхСтруктур.Вставить(Элемент.Ключ, Структура);
	КонецЦикла;
	
	СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАвторизацией = Новый Соответствие;
	СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАутентификациейПоСертификату = Новый Соответствие;
	
	///////////////////////////////////////
	// Подписание электронных документов
	
	Запрос.УстановитьПараметр("МассивОтпечатков", МассивОтпечатков);
	
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Подписать") Тогда
		
		// Основной запрос - выборка из временных таблиц:
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиОбменаСертификаты.СертификатЭП КАК СертификатЭП,
		|	НастройкиОбменаСертификаты.Ссылка КАК НастройкаОбмена
		|ПОМЕСТИТЬ ВТ_СертификатыИзНастроек
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
		|		ПО ВТ_ЭД.НастройкаОбмена = НастройкиОбменаСертификаты.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Ссылка,
		|	Сертификаты.Отпечаток КАК Отпечаток,
		|	Сертификаты.Отозван КАК Отозван,
		|	Сертификаты.Организация КАК Организация,
		|	Сертификаты.Наименование КАК Наименование,
		|	ПрограммыБанков.ПрограммаБанка КАК ПрограммаБанка,
		|	Сертификаты.ДействителенДо КАК ДействителенДо
		|ПОМЕСТИТЬ ВТ_РеквизитыСертификатов
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
		|		ПО (СостояниеПодписанияЭД.Текущий)
		|			И (СостояниеПодписанияЭД.Подписант В (&ТекущийПользователь, &ПустойПользователь, &ПользовательНеУказан))
		|			И (СостояниеПодписанияЭД.Сертификат = Сертификаты.Ссылка
		|				ИЛИ СостояниеПодписанияЭД.Сертификат = ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
		|		ПО (ВТ_ЭД.Ссылка = СостояниеПодписанияЭД.Объект)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СертификатыИзНастроек КАК ВТ_СертификатыИзНастроек
		|		ПО (ВТ_ЭД.НастройкаОбмена = ВТ_СертификатыИзНастроек.НастройкаОбмена)
		|			И Сертификаты.Ссылка = ВТ_СертификатыИзНастроек.СертификатЭП
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСертификатахОбменСБанками КАК ПрограммыБанков
		|		ПО (ПрограммыБанков.СертификатЭП = Сертификаты.Ссылка)
		|ГДЕ
		|	НЕ Сертификаты.Отозван
		|	И НЕ Сертификаты.ПометкаУдаления
		|	И &ПроверкаПользователя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка,
		|	Сертификаты.Отпечаток,
		|	Сертификаты.Отозван,
		|	Сертификаты.Организация,
		|	Сертификаты.Наименование,
		|	ПрограммыБанков.ПрограммаБанка,
		|	Сертификаты.ДействителенДо
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СертификатыИзНастроек КАК СертификатыИзНастроек
		|		ПО Сертификаты.Ссылка = СертификатыИзНастроек.СертификатЭП
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСертификатахОбменСБанками КАК ПрограммыБанков
		|		ПО (ПрограммыБанков.СертификатЭП = Сертификаты.Ссылка)
		|ГДЕ
		|	НЕ Сертификаты.Отозван
		|	И НЕ Сертификаты.ПометкаУдаления
		|	И &ПроверкаПользователя
		|	И ПрограммыБанков.ПрограммаБанка В(&СписокПрограммБанков)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Ссылка,
		|	Сертификаты.Отпечаток КАК Отпечаток,
		|	Сертификаты.Отозван КАК Отозван,
		|	Сертификаты.Организация КАК Организация,
		|	Сертификаты.Наименование КАК Наименование,
		|	Сертификаты.ПрограммаБанка КАК ПрограммаБанка,
		|	Сертификаты.ДействителенДо КАК ДействителенДо
		|ПОМЕСТИТЬ СертификатыПоОтпечаткамБСП
		|ИЗ
		|	ВТ_РеквизитыСертификатов КАК Сертификаты
		|ГДЕ
		|	Сертификаты.Отпечаток В(&МассивОтпечатков)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка,
		|	Сертификаты.Отпечаток,
		|	Сертификаты.Отозван,
		|	Сертификаты.Организация,
		|	Сертификаты.Наименование,
		|	Сертификаты.ПрограммаБанка,
		|	Сертификаты.ДействителенДо
		|ИЗ
		|	ВТ_РеквизитыСертификатов КАК Сертификаты
		|ГДЕ
		|	Сертификаты.ПрограммаБанка В(&СписокПрограммБанков)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.СертификатПодписи КАК СертификатПодписи,
		|	ВложенныйЗапрос.Отпечаток КАК Отпечаток,
		|	ВложенныйЗапрос.Отозван КАК Отозван,
		|	ВложенныйЗапрос.ОрганизацияВСертификате КАК ОрганизацияВСертификате,
		|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента,
		|	ВложенныйЗапрос.ПрограммаБанка КАК ПрограммаБанка,
		|	ВложенныйЗапрос.Наименование КАК Наименование,
		|	ВложенныйЗапрос.СсылкаНаСообщениеОбмена КАК СсылкаНаСообщениеОбмена,
		|	ВложенныйЗапрос.ДействителенДо КАК ДействителенДо
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	(ВЫБРАТЬ
		|		Сертификаты.Ссылка КАК СертификатПодписи,
		|		Сертификаты.Отпечаток КАК Отпечаток,
		|		Сертификаты.Отозван КАК Отозван,
		|		Сертификаты.Организация КАК ОрганизацияВСертификате,
		|		ВидыЭДЭП.ВидЭД КАК ВидДокумента,
		|		Сертификаты.ПрограммаБанка КАК ПрограммаБанка,
		|		Сертификаты.Наименование КАК Наименование,
		|		ВТ_ЭД.Ссылка КАК СсылкаНаСообщениеОбмена,
		|		Сертификаты.ДействителенДо КАК ДействителенДо
		|	ИЗ
		|		РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
		|			ПО (ВидыЭДЭП.Использовать)
		|				И (ВТ_ЭД.ВидЭД = ВидыЭДЭП.ВидЭД)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СертификатыПоОтпечаткамБСП КАК Сертификаты
		|			ПО ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СертификатыИзНастроек КАК ВТ_СертификатыИзНастроек
		|			ПО (ВТ_СертификатыИзНастроек.НастройкаОбмена = ВТ_ЭД.НастройкаОбмена)
		|				И (ВТ_СертификатыИзНастроек.СертификатЭП = Сертификаты.Ссылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Сертификаты.Ссылка,
		|		Сертификаты.Отпечаток,
		|		Сертификаты.Отозван,
		|		Сертификаты.Организация,
		|		ВидыЭДЭП.ВидЭД,
		|		Сертификаты.ПрограммаБанка,
		|		Сертификаты.Наименование,
		|		ВТ_ЭД.Ссылка,
		|		Сертификаты.ДействителенДо
		|	ИЗ
		|		РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
		|			ПО (ВидыЭДЭП.Использовать)
		|				И (ВТ_ЭД.ВидЭД = ВидыЭДЭП.ВидЭД)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РеквизитыСертификатов КАК Сертификаты
		|			ПО ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СертификатыИзНастроек КАК ВТ_СертификатыИзНастроек
		|			ПО (ВТ_СертификатыИзНастроек.НастройкаОбмена = ВТ_ЭД.НастройкаОбмена)
		|				И (ВТ_СертификатыИзНастроек.СертификатЭП = Сертификаты.Ссылка)
		|	ГДЕ
		|		НЕ ВидыЭДЭП.ВидЭД В (&ВидыЭДСМаршрутом)) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЭД.Организация КАК Организация,
		|	ВТ_ЭД.Банк КАК Банк,
		|	ВТ_ЭД.Ссылка КАК СсылкаНаСообщениеОбмена,
		|	ВТ_ЭД.ВидЭД КАК ВидЭД,
		|	ВЫБОР
		|		КОГДА ВТ_ЭД.НастройкаОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен)
		|				И ВТ_ЭД.НастройкаОбмена.АутентификацияПоСертификату = ЛОЖЬ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАутентификацияЛогинПароль,
		|	ВЫБОР
		|		КОГДА ВТ_ЭД.НастройкаОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен)
		|				И НастройкиОбмена.АутентификацияПоСертификату = ИСТИНА
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАутентификацияПоСертификату,
		|	ВТ_Сертификаты.СертификатПодписи КАК СертификатПодписи,
		|	ВТ_Сертификаты.Отпечаток КАК Отпечаток,
		|	ВТ_Сертификаты.Отозван КАК Отозван,
		|	ВТ_Сертификаты.Наименование КАК НаименованиеСертификата,
		|	НастройкиОбмена.ПрограммаБанка КАК ПрограммаБанка,
		|	ЭД_ЭП.Отпечаток КАК УстановленныеПодписи,
		|	НастройкиОбмена.Ссылка КАК НастройкаОбмена,
		|	ВТ_Сертификаты.ДействителенДо КАК ДействителенДо
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ПО ВТ_ЭД.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|			И (ВТ_Сертификаты.СсылкаНаСообщениеОбмена = ВТ_ЭД.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбмена
		|		ПО ВТ_ЭД.НастройкаОбмена = НастройкиОбмена.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменаИсходящие
		|		ПО ВТ_ЭД.НастройкаОбмена = НастройкиОбменаИсходящие.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭД_ЭП
		|		ПО (ВТ_ЭД.Ссылка = ВЫРАЗИТЬ(ЭД_ЭП.ПодписанныйОбъект КАК Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы).ВладелецФайла)
		|ГДЕ
		|	НастройкиОбменаИсходящие.ИспользоватьЭП
		|	И НЕ НастройкиОбмена.ПометкаУдаления
		|	И НЕ НастройкиОбмена.Недействительна
		|	И ВТ_ЭД.Статус В(&МассивСтатусов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ.СсылкаНаСообщениеОбмена КАК СсылкаНаСообщениеОбмена,
		|	ВТ.Организация КАК Организация,
		|	ВТ.Банк КАК Банк,
		|	ВТ.НастройкаОбмена КАК НастройкаОбмена,
		|	ВТ.ВидЭД КАК ВидЭД,
		|	ВТ.ПрограммаБанка КАК ПрограммаБанка,
		|	ВТ.ТребуетсяАутентификацияЛогинПароль КАК ТребуетсяАутентификацияЛогинПароль,
		|	ВТ.ТребуетсяАутентификацияПоСертификату КАК ТребуетсяАутентификацияПоСертификату
		|ИЗ
		|	ВТ КАК ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СсылкаНаСообщениеОбмена КАК СсылкаНаСообщениеОбмена,
		|	ВТ.СертификатПодписи КАК СертификатПодписи,
		|	ВТ.Отпечаток КАК Отпечаток,
		|	ВТ.Отозван КАК Отозван,
		|	ВТ.Организация КАК Организация,
		|	ВТ.ПрограммаБанка КАК ПрограммаБанка,
		|	ВТ.НаименованиеСертификата КАК НаименованиеСертификата,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	НЕОПРЕДЕЛЕНО КАК ПарольСертификата,
		|	ВТ.ТребуетсяАутентификацияЛогинПароль КАК ТребуетсяАутентификацияЛогинПароль,
		|	ВТ.ДействителенДо КАК ДействителенДо
		|ИЗ
		|	ВТ КАК ВТ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеСертификата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СсылкаНаСообщениеОбмена КАК СсылкаНаСообщениеОбмена,
		|	ВТ.УстановленныеПодписи КАК УстановленныеПодписи,
		|	ВТ.Организация КАК Организация
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ПО ВТ.УстановленныеПодписи = Сертификаты.Отпечаток
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Ссылка,
		|	Сертификаты.Отпечаток КАК Отпечаток,
		|	Сертификаты.Отозван КАК Отозван,
		|	Сертификаты.Организация КАК Организация,
		|	Сертификаты.Наименование КАК Наименование,
		|	Сертификаты.ПрограммаБанка КАК ПрограммаБанка,
		|	Сертификаты.ДействителенДо КАК ДействителенДо
		|ИЗ
		|	ВТ_РеквизитыСертификатов КАК Сертификаты";
		
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
		
		Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
		
		СписокПрограммБанков = Новый Массив;
		СписокПрограммБанков.Добавить(Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку);
		СписокПрограммБанков.Добавить(Перечисления.ПрограммыБанка.СбербанкОнлайн);
		СписокПрограммБанков.Добавить(Перечисления.ПрограммыБанка.ОбменЧерезВК);

		Запрос.УстановитьПараметр("СписокПрограммБанков", СписокПрограммБанков);
		
		ВидыЭДСМаршрутом = ОбменСБанкамиСлужебныйПовтИсп.ВидыДокументовПодписываемыхПоМаршруту();
		
		Запрос.УстановитьПараметр("ВидыЭДСМаршрутом", ВидыЭДСМаршрутом);
		
		Запрос.Текст = ТекстОсновногоЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапроса;
		
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
				"Сертификаты.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());

		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);
		Выборка = Результат[6].Выбрать();
		
		// Для связки Сообщения, НастройкиОбмена и Сертификата, в числе прочих нужно соответствие,
		// ключом которого является ссылка на СообщениеОбмена, значение - Настройка обмена.
		// Например, 2 Сообщения обмена могут быть подписаны 2-я сертификатами (т.е пользователь должен выбрать,
		// каким сертификатом он будет подписывать эти сообщения обмена),
		// при этом сообщения обмена относятся к разным настройкам обмена, если пользователь отказался подписывать
		// эти сообщения обмена, то это сообщение обмена нужно удалить из массива на отправку,
		// для этого найдем его настройку обмена в соответствии (СообщениеОбмена - НастройкаОбмена),
		// по настройке обмена найдем это сообщение обмена в
		// соответствии НастройкиОбмена - Массивы сообщений обмена к отправке и удалим из массива нужное сообщение обмена.
		
		// Ключ - Строка (сумма УИД сертификатов: Строка(Сертификат1.УникальныйИдентификатор())
		// + Строка(Сертификат2.УникальныйИдентификатор()) + ...), Значение - Структура массивов (МассивСертификатов
		// и Массив сообщений обмена).
		// Смысл данной структуры в том, что для подписания разных ЭД возможно будет доступен одинаковый
		// набор сертификатов. НЕ ПРАВИЛЬНО 2 раза спрашивать пользователя,
		// каким из 2-х сертификатов он хочет подписывать документы, поэтому, надо для этой пары
		// сертификатов сформировать массив ЭД, для подписания которых доступна именно эта пара сертификатов.
		// Чтобы сделать запись в структуре уникальной и иметь возможность искать нужную запись по ключу,
		// ключ сделан составным (в результатах запроса сертификаты упорядочены по наименованию).
		// В данном соответствии будем хранить ключевые имена ошибок, возникших в процессе подписания документа:
		//   Ключ - ДокументСсылка.СообщениеОбменСБанками - ссылка на подписываемый электронный документ;
		//   Значение - Строка - ключевое имя ошибки.
		СоотвСообщенийОбменаИОшибокПодписи = Новый Соответствие;
		
		// Если в системе настроена немедленная отправка и есть действие "Отправить", то из подписываемых ЭД
		// надо выделить те, которые для отправки требуют авторизации и будут подписываться на клиенте.
		// Для этого ТЗ_ЭД обработаем в 2 прохода (1- ЭД требующие авторизации, 2- не требующие).
		ВыделятьСообщенияКОтправкеСАвторизацией = ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить");
		
		МассивСообщенийОбмена = Новый Массив;
		Если Выборка.Количество() > 0 Тогда
			
			ТЗ_Сертификатов = Результат[7].Выгрузить();
			
			// Если найден подписываемый электронный документ, то проверяется наличие и доступность сертификатов.
			Если ТЗ_Сертификатов.Количество() = 0 И ЗначениеЗаполнено(СообщениеОбмена) Тогда
				СертификатыВНастройке = Результат[1].Выгрузить();
				СертификатыНаКомпьютере = Результат[2].Выгрузить();
				ДоступныеСертификаты = Результат[4].Выгрузить();
		
				ОшибкаНастройкиКриптографии = Ложь;
				ОшибкаНастройкиСертификата = Ложь;
				Если ДоступныеСертификаты[0].Количество Тогда
					НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "НастройкаОбмена");
					ШаблонСообщения = НСтр("ru = 'В настройке обмена с банком %1
												|не найден ни один из доступных сертификатов ЭП.'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, НастройкаОбмена);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, НастройкаОбмена);
				ИначеЕсли СертификатыВНастройке[0].Количество И НЕ СертификатыНаКомпьютере[0].Количество Тогда
					НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "НастройкаОбмена");
					ШаблонСообщения = НСтр("ru = 'На компьютере не установлен ни один сертификат,
											|указанный в настройке обмена с банком %1.'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, НастройкаОбмена);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, НастройкаОбмена);
				КонецЕсли;
			КонецЕсли;
			
			ТЗ_ЭД = Новый ТаблицаЗначений;
			ТЗ_ЭД.Колонки.Добавить("СсылкаНаСообщениеОбмена");
			ТЗ_ЭД.Колонки.Добавить("НастройкаОбмена");
			ТЗ_ЭД.Колонки.Добавить("СертификатыПодписи");
			
			ТЗ_УстановленныхПодписей = Результат[8].Выгрузить();
			
			Пока Выборка.Следующий() Цикл
				СсылкаНаСообщениеОбмена = Выборка.СсылкаНаСообщениеОбмена;
				Отбор = Новый Структура("СсылкаНаСообщениеОбмена", СсылкаНаСообщениеОбмена);
				КопияТЗ = ТЗ_Сертификатов.Скопировать(Отбор);
				МассивОтпечатковИсключения = Новый Массив;
				МассивСертификатов = Новый Массив;
				ТЗ_Отпечатков = ТЗ_УстановленныхПодписей.Скопировать(Отбор);
				Если ТЗ_Отпечатков.Количество() > 0 Тогда
					МассивОтпечатковИсключения = ТЗ_Отпечатков.ВыгрузитьКолонку("УстановленныеПодписи");
				КонецЕсли;
				ИДМассиваСообщений = "k";
				СтандартноеПодписание = Истина;
				Если Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
						ИЛИ Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
						ИЛИ Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
					// В зависимости от настройки, для подписания могут использоваться алгоритмы,
					// отличные от стандартных, поэтому добавим в идентификатор структуры УИД настройки обмена:
					СтандартноеПодписание = Ложь;
					ИДМассиваСообщений = ИДМассиваСообщений + Строка(Выборка.НастройкаОбмена.УникальныйИдентификатор());
				КонецЕсли;
				ПарольПолучен = Ложь;
				ПодозрениеНаОшибкиМаршрутаПодписания = Ложь;
				Для Каждого СтрокаСертификата Из КопияТЗ Цикл
					Если МассивОтпечатковИсключения.Найти(СтрокаСертификата.Отпечаток) <> Неопределено
						ИЛИ МассивСертификатов.Найти(СтрокаСертификата.СертификатПодписи) <> Неопределено Тогда
						// Если есть доступные сертификаты, но подписи по ним уже установлены
						Если МассивОтпечатковИсключения.Найти(СтрокаСертификата.Отпечаток) <> Неопределено Тогда
							ПодозрениеНаОшибкиМаршрутаПодписания = Истина;
						КонецЕсли;
						Продолжить;
					КонецЕсли;
					МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
					ИДМассиваСообщений = ИДМассиваСообщений + Строка(СтрокаСертификата.СертификатПодписи.УникальныйИдентификатор());
					
					СтруктураСертификата = Новый Структура("СертификатПодписи, ПрограммаБанка,
						|ПарольПолучен, ПарольСертификата, Отпечаток, Отозван");
					ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
					ПараметрыВСоотв = СоотвСертификатовИИхСтруктур.Получить(СтрокаСертификата.СертификатПодписи);
					Если ПараметрыВСоотв <> Неопределено И ПараметрыВСоотв.ПарольПолучен Тогда
						ПарольПолучен = Истина;
						ЗаполнитьЗначенияСвойств(СтруктураСертификата, ПараметрыВСоотв, "ПарольПолучен, ПарольСертификата");
					КонецЕсли;
					СоотвСертификатовИИхСтруктур.Вставить(СтрокаСертификата.СертификатПодписи, СтруктураСертификата);
				КонецЦикла;
				Если МассивСертификатов.Количество() > 0 Тогда
					НоваяСтрока = ТЗ_ЭД.Добавить();
					НоваяСтрока.СсылкаНаСообщениеОбмена = СсылкаНаСообщениеОбмена;
					НоваяСтрока.НастройкаОбмена = Выборка.НастройкаОбмена;
					НоваяСтрока.СертификатыПодписи = МассивСертификатов;
					
					СтруктураМассивов = "";
					ИДМассиваСообщений = СтрЗаменить(ИДМассиваСообщений, "-", "_");
					Если НЕ СертификатыСообщенийОбмена.Свойство(ИДМассиваСообщений, СтруктураМассивов)
						ИЛИ ТипЗнч(СтруктураМассивов) <> Тип("Структура") Тогда
						СтруктураСертификатов = Новый Структура("МассивСертификатов", МассивСертификатов);
						СертификатыСообщенийОбмена.Вставить(ИДМассиваСообщений, СтруктураСертификатов);
						СтруктураМассивов = СертификатыСообщенийОбмена[ИДМассиваСообщений];
					КонецЕсли;
					Если СтандартноеПодписание Тогда
						СообщенияОбменаКПодписи = Неопределено;
						Если НЕ СтруктураМассивов.Свойство("СообщенияОбменаКПодписи", СообщенияОбменаКПодписи)
							ИЛИ ТипЗнч(СообщенияОбменаКПодписи) <> Тип("Массив") Тогда
							СтруктураМассивов.Вставить("СообщенияОбменаКПодписи", Новый Массив);
							СообщенияОбменаКПодписи = СтруктураМассивов.СообщенияОбменаКПодписи;
						КонецЕсли;
						СообщенияОбменаКПодписи.Добавить(СсылкаНаСообщениеОбмена);
					Иначе
						ДанныеДляСпецОбработки = Неопределено;
						Если НЕ СертификатыСообщенийОбмена[ИДМассиваСообщений].Свойство("ДанныеДляСпецОбработки",ДанныеДляСпецОбработки)
							ИЛИ ТипЗнч(ДанныеДляСпецОбработки) <> Тип("Соответствие") Тогда
							
							СертификатыСообщенийОбмена[ИДМассиваСообщений].Вставить("ДанныеДляСпецОбработки", Новый Соответствие);
							ДанныеДляСпецОбработки = СертификатыСообщенийОбмена[ИДМассиваСообщений].ДанныеДляСпецОбработки;
						КонецЕсли;
						НастройкиОбменаИСообщенияОбмена = ДанныеДляСпецОбработки.Получить(Выборка.ПрограммаБанка);
						Если ТипЗнч(НастройкиОбменаИСообщенияОбмена) <> Тип("Соответствие") Тогда
							ДанныеДляСпецОбработки.Вставить(Выборка.ПрограммаБанка, Новый Соответствие);
							НастройкиОбменаИСообщенияОбмена = ДанныеДляСпецОбработки[Выборка.ПрограммаБанка];
						КонецЕсли;
						МассивБанковскихСообщенийОбмена = НастройкиОбменаИСообщенияОбмена.Получить(Выборка.НастройкаОбмена);
						Если ТипЗнч(МассивБанковскихСообщенийОбмена) <> Тип("Массив") Тогда
							НастройкиОбменаИСообщенияОбмена.Вставить(Выборка.НастройкаОбмена, Новый Массив);
							МассивБанковскихСообщенийОбмена = НастройкиОбменаИСообщенияОбмена[Выборка.НастройкаОбмена];
						КонецЕсли;
						МассивБанковскихСообщенийОбмена.Добавить(СсылкаНаСообщениеОбмена);
					КонецЕсли;
				ИначеЕсли ПодозрениеНаОшибкиМаршрутаПодписания Тогда
					СоотвСообщенийОбменаИОшибокПодписи.Вставить(СсылкаНаСообщениеОбмена, "ОшибкиВМаршруте");
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли (Действия = "Подписать" ИЛИ Действия = "ПодписатьОтправить") И МассивСсылокНаОбъект.Количество() = 1 Тогда
			
			// Дополнительная диагностика проблемы. Проверка, что сертификат установлен в личное хранилище.
			СертификатыМаршрута = Результат[9].Выгрузить();
			ОтпечаткиВМаршруте = СертификатыМаршрута.ВыгрузитьКолонку("Отпечаток");
			РазностьМассивов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивОтпечатков, ОтпечаткиВМаршруте);
			Если СертификатыМаршрута.Количество()
				И (СертификатыМаршрута[0].ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен
					ИЛИ СертификатыМаршрута[0].ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн)
				И РазностьМассивов.Количество() = МассивОтпечатков.Количество() Тогда
				ТекстСообщения = НСтр("ru = 'На компьютере не установлен необходимый сертификат подписи.
											|Проверьте сертификаты подписей в настройке обмена с банком.
											|Установите сертификат подписи в личное хранилище сертификатов.'");
			ИначеЕсли СертификатыМаршрута.Количество() = 1 И СертификатыМаршрута[0].ДействителенДО < ТекущаяДатаСеанса() Тогда
				ШаблонСообщения = НСтр("ru = 'Закончился срок действия сертификата %1.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СертификатыМаршрута[0].Ссылка);
			Иначе
				ТекстСообщения = НСтр("ru = 'Требуется подпись другого пользователя.'");
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		Если СоотвСообщенийОбменаИОшибокПодписи.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СоотвСообщенийОбменаИОшибокПодписи", СоотвСообщенийОбменаИОшибокПодписи);
		КонецЕсли;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////
	// Отправка электронных документов

	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		
		СтМассивовСтруктурСертификатов = Новый Структура("МассивОтпечатковКлиент", МассивОтпечатковКлиент);
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиОбменаСертификаты.СертификатЭП КАК СертификатЭП,
		|	НастройкиОбменаСертификаты.Ссылка КАК НастройкаОбмена
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
		|		ПО ВТ_ЭД.НастройкаОбмена = НастройкиОбменаСертификаты.Ссылка
		|ГДЕ
		|	НастройкиОбменаСертификаты.Ссылка.АутентификацияПоСертификату
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК СертификатПодписи,
		|	Сертификаты.Отпечаток КАК Отпечаток,
		|	Сертификаты.Отозван КАК Отозван,
		|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
		|	Сертификаты.Организация КАК ОрганизацияВСертификате,
		|	Сертификаты.Наименование КАК Наименование,
		|	СертификатыИзНастроек.НастройкаОбмена КАК НастройкаОбмена
		|ИЗ
		|	ВТ_Сертификаты КАК СертификатыИзНастроек
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ПО (Сертификаты.Ссылка = СертификатыИзНастроек.СертификатЭП)
		|ГДЕ
		|	НЕ Сертификаты.Отозван
		|	И НЕ Сертификаты.ПометкаУдаления
		|	И &ПроверкаПользователя
		|	И Сертификаты.Отпечаток В(&МассивОтпечатков)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЭД.Ссылка КАК СсылкаНаСообщениеОбмена,
		|	ВТ_ЭД.Статус КАК Статус,
		|	ВТ_ЭД.НастройкаОбмена КАК НастройкаОбмена,
		|	ВЫБОР
		|		КОГДА НастройкиОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен)
		|				И НЕ НастройкиОбмена.АутентификацияПоСертификату
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАвторизацияЛогинПароль,
		|	ВЫБОР
		|		КОГДА НастройкиОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн)
		|				И НастройкиОбмена.ИспользуетсяКриптография
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяТокенСбербанка,
		|	ВЫБОР
		|		КОГДА НастройкиОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн)
		|				И НЕ НастройкиОбмена.ИспользуетсяКриптография
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК БазоваяАутентификацияСбербанка,
		|	ВЫБОР
		|		КОГДА НастройкиОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен)
		|				И НастройкиОбмена.АутентификацияПоСертификату
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАутентификацияПоСертификату,
		|	ВЫБОР
		|		КОГДА НастройкиОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.ОбменЧерезВК)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтправкаЧерезВК,
		|	ВЫБОР
		|		КОГДА НастройкиОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтправкаЧерезДополнительнуюОбработку,
		|	ВЫБОР
		|		КОГДА НастройкиОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АльфаБанкОнлайн)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК АльфаБанкОнлайн,
		|	НастройкиОбменаИсходящие.ИспользоватьЭП КАК ТребуетсяПодпись
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбмена
		|		ПО ВТ_ЭД.НастройкаОбмена = НастройкиОбмена.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменаИсходящие
		|		ПО ВТ_ЭД.НастройкаОбмена = НастройкиОбменаИсходящие.Ссылка
		|			И ВТ_ЭД.ВидЭД = НастройкиОбменаИсходящие.ИсходящийДокумент
		|ГДЕ
		|	ВТ_ЭД.Статус В(&СтатусыКОтправке)";
		
		МассивСтатусовКОтправке = Новый Массив;
		МассивСтатусовКОтправке.Добавить(Перечисления.СтатусыОбменСБанками.Сформирован);
		МассивСтатусовКОтправке.Добавить(Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
		МассивСтатусовКОтправке.Добавить(Перечисления.СтатусыОбменСБанками.Подписан);
		МассивСтатусовКОтправке.Добавить(Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
		МассивСтатусовКОтправке.Добавить(Перечисления.СтатусыОбменСБанками.НеПодтвержден);
		
		МассивСтатусовСПодписью = Новый Массив;
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыОбменСБанками.Сформирован);
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыОбменСБанками.Подписан);
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыОбменСБанками.НеПодтвержден);
		
		МассивСтатусовБезПодписи = Новый Массив;
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыОбменСБанками.Сформирован);
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыОбменСБанками.НеПодтвержден);
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
			
		Если Действия = "ОтправитьПовторно" Тогда
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыОбменСБанками.ОшибкаПередачи);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыОбменСБанками.ОшибкаПередачи);
			МассивСтатусовКОтправке.Добавить(Перечисления.СтатусыОбменСБанками.ОшибкаПередачи);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СтатусыКОтправке", МассивСтатусовКОтправке);
		Запрос.УстановитьПараметр("МассивОтпечатков", МассивОтпечатков);
		
		Запрос.Текст = ТекстОсновногоЗапроса 
						+ "
						|;
						|//////////
						|" + ТекстЗапроса;

		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
				"Сертификаты.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)");
			Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
			Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);
		
		// Определение сертификатов, которые будут использованы для аутентификации на сервере банка.
		ТаблицаСертификатовАутентификации = Результат[2].Выгрузить();
		МассивНастроекОбмена = ТаблицаСертификатовАутентификации.ВыгрузитьКолонку("НастройкаОбмена");
		
		СоотвСертификатовИПаролей = Новый Соответствие;
		
		СоотвНастроекОбменаИСоответствийСертификатовИПараметров = СоотвНастроекОбменаИСоответствийСертификатовИПараметровДляАвторизацииСервер(
			МассивНастроекОбмена, СтМассивовСтруктурСертификатов, СоотвСертификатовИПаролей);
		
		Если СоотвНастроекОбменаИСоответствийСертификатовИПараметров.Количество() Тогда
			Для Каждого Элемент Из ТаблицаСертификатовАутентификации Цикл
				СоотвСертификатовИПараметров = СоотвНастроекОбменаИСоответствийСертификатовИПараметров.Получить(Элемент.НастройкаОбмена);
				Для Каждого КлючИЗначение Из СоотвСертификатовИПараметров Цикл
					Сертификат = КлючИЗначение.Ключ;
					Если Сертификат <> Элемент.СертификатПодписи Тогда
						Продолжить;
					КонецЕсли;
					СтруктураСертификата = КлючИЗначение.Значение;
					
					СоотвСертификатовИИхСтруктур.Вставить(Сертификат, СтруктураСертификата);
					
					МассивСертификатов = СоотвНастроекОбменаИСертификатовАвторизации.Получить(Элемент.НастройкаОбмена);
					Если МассивСертификатов = Неопределено Тогда
						МассивСертификатов = Новый Массив;
						СоотвНастроекОбменаИСертификатовАвторизации.Вставить(Элемент.НастройкаОбмена, МассивСертификатов);
					КонецЕсли;
					МассивСертификатов.Добавить(Сертификат);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
			
		СтруктураВозврата.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
		
		ТЗ_ЭД_КОтправке = Результат[3].Выгрузить();
		
		Если ТЗ_ЭД_КОтправке.Количество() > 0 Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("ТребуетсяПодпись", Ложь);
			Отбор.Вставить("ТребуетсяАвторизацияЛогинПароль", Ложь);
			Отбор.Вставить("ТребуетсяАутентификацияПоСертификату", Ложь);
			Отбор.Вставить("ОтправкаЧерезВК", Ложь);
			Отбор.Вставить("ОтправкаЧерезДополнительнуюОбработку", Ложь);
			ВременнаяТЗ = ТЗ_ЭД_КОтправке.Скопировать(Отбор);
			ЗаполнитьМассивСОтборомПоСтатусу(ВременнаяТЗ, МассивСтатусовБезПодписи, СтруктураКОтправке.БезПодписи);
			
			Отбор = Новый Структура("ТребуетсяТокенСбербанка", Истина);
			ВременнаяТЗ = ТЗ_ЭД_КОтправке.Скопировать(Отбор);
			ЗаполнитьМассивСОтборомПоСтатусу(ВременнаяТЗ, МассивСтатусовСПодписью, СтруктураКОтправке.ЧерезТокенСбербанка);
			
			Отбор = Новый Структура("АльфаБанкОнлайн", Истина);
			ВременнаяТЗ = ТЗ_ЭД_КОтправке.Скопировать(Отбор);
			ЗаполнитьМассивСОтборомПоСтатусу(ВременнаяТЗ, МассивСтатусовСПодписью, СтруктураКОтправке.АльфаБанкОнлайн);
			
			// Используется для отправки документов через ВК
			МассивСообщенийОбменаКОтправке = Новый Массив;
			Отбор = Новый Структура("ОтправкаЧерезВК", Истина);
			ВремТз = Тз_Эд_КОтправке.Скопировать(Отбор);
			ТзНастроекОбмена = ВремТз.Скопировать();
			ТзНастроекОбмена.Свернуть("НастройкаОбмена");
			МассивНастроекОбмена = ТзНастроекОбмена.ВыгрузитьКолонку("НастройкаОбмена");
			Для Каждого НастройкаОбмена Из МассивНастроекОбмена Цикл
				Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
				ВременнаяТЗПоНастройкеОбмена = ВремТз.Скопировать(Отбор);
				Если ВременнаяТЗПоНастройкеОбмена.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;

				МассивСообщенийОбмена = Новый Массив;
				МассивСообщенийТребующихПодтверждение = Новый Массив;
				
				Для Каждого ЭлементВыборки Из ВременнаяТЗПоНастройкеОбмена Цикл
					Если ЭлементВыборки.Статус = Перечисления.СтатусыОбменСБанками.НеПодтвержден Тогда
						МассивСообщенийТребующихПодтверждение.Добавить(ЭлементВыборки.СсылкаНаСообщениеОбмена);
					ИначеЕсли МассивСтатусовСПодписью.Найти(ЭлементВыборки.Статус) <> Неопределено Тогда
						МассивСообщенийОбмена.Добавить(ЭлементВыборки.СсылкаНаСообщениеОбмена);
					КонецЕсли;
				КонецЦикла;
				
				Если СтруктураКОтправке.ЧерезВК.Получить(НастройкаОбмена) = Неопределено Тогда
					ДанныеДляОтправки = Новый Структура;
					ДанныеДляОтправки.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);
					ДанныеДляОтправки.Вставить("МассивСообщенийТребующихПодтверждение", МассивСообщенийТребующихПодтверждение);
					СтруктураКОтправке.ЧерезВК.Вставить(НастройкаОбмена, ДанныеДляОтправки);
				Иначе
					ИсходныеДанные = СтруктураКОтправке.ЧерезВК.Получить(НастройкаОбмена);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсходныеДанные.МассивСообщенийОбмена, МассивСообщенийОбмена, Истина);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						ИсходныеДанные.МассивСообщенийТребующихПодтверждение, МассивСообщенийТребующихПодтверждение, Истина);
					СтруктураКОтправке.ЧерезВК.Вставить(НастройкаОбмена, ИсходныеДанные);
				КонецЕсли;
			КонецЦикла;
			
			// Используется для отправки документов через дополнительную обработку
			МассивСообщенийОбменаКОтправке = Новый Массив;
			Отбор = Новый Структура("ОтправкаЧерезДополнительнуюОбработку", Истина);
			ВремТз = Тз_Эд_КОтправке.Скопировать(Отбор);
			ТзНастроекОбмена = ВремТз.Скопировать();
			ТзНастроекОбмена.Свернуть("НастройкаОбмена");
			МассивНастроекОбмена = ТзНастроекОбмена.ВыгрузитьКолонку("НастройкаОбмена");
			Для Каждого НастройкаОбмена Из МассивНастроекОбмена Цикл
				Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
				ВременнаяТЗПоНастройкеОбмена = ВремТз.Скопировать(Отбор);
				Если ВременнаяТЗПоНастройкеОбмена.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
								
				МассивСообщенийОбмена = Новый Массив;
				МассивСообщенийТребующихПодтверждение = Новый Массив;
				
				Для Каждого ЭлементВыборки Из ВременнаяТЗПоНастройкеОбмена Цикл
					Если ЭлементВыборки.Статус = Перечисления.СтатусыОбменСБанками.НеПодтвержден Тогда
						МассивСообщенийТребующихПодтверждение.Добавить(ЭлементВыборки.СсылкаНаСообщениеОбмена);
					ИначеЕсли МассивСтатусовСПодписью.Найти(ЭлементВыборки.Статус) <> Неопределено Тогда
						МассивСообщенийОбмена.Добавить(ЭлементВыборки.СсылкаНаСообщениеОбмена);
					КонецЕсли;
				КонецЦикла;
				
				СтруктураКОтправке.ЧерезДополнительнуюОбработку.Вставить(НастройкаОбмена, ДанныеДляОтправки);
				
				Если СтруктураКОтправке.ЧерезДополнительнуюОбработку.Получить(НастройкаОбмена) = Неопределено Тогда
					ДанныеДляОтправки = Новый Структура;
					ДанныеДляОтправки.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);
					ДанныеДляОтправки.Вставить("МассивСообщенийТребующихПодтверждение", МассивСообщенийТребующихПодтверждение);
					СтруктураКОтправке.ЧерезДополнительнуюОбработку.Вставить(НастройкаОбмена, ДанныеДляОтправки);
				Иначе
					ИсходныеДанные = СтруктураКОтправке.ЧерезДополнительнуюОбработку.Получить(НастройкаОбмена);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсходныеДанные.МассивСообщенийОбмена, МассивСообщенийОбмена, Истина);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						ИсходныеДанные.МассивСообщенийТребующихПодтверждение, МассивСообщенийТребующихПодтверждение, Истина);
					СтруктураКОтправке.ЧерезДополнительнуюОбработку.Вставить(НастройкаОбмена, ИсходныеДанные);
				КонецЕсли;
			КонецЦикла;
		
			// Используется для отправки документов в Сбербанк с аутентификацией по логину-паролю.
			МассивСообщенийОбменаКОтправке = Новый Массив;
			Отбор = Новый Структура("БазоваяАутентификацияСбербанка", Истина);
			ВремТз = Тз_Эд_КОтправке.Скопировать(Отбор);
			ТзНастроекОбмена = ВремТз.Скопировать();
			ТзНастроекОбмена.Свернуть("НастройкаОбмена");
			МассивНастроекОбмена = ТзНастроекОбмена.ВыгрузитьКолонку("НастройкаОбмена");
			Для Каждого НастройкаОбмена Из МассивНастроекОбмена Цикл
				Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
				ВременнаяТЗПоНастройкеОбмена = ВремТз.Скопировать(Отбор);
				Если ВременнаяТЗПоНастройкеОбмена.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				МассивСообщенийОбмена = Новый Массив;
				МассивСообщенийТребующихПодтверждение = Новый Массив;
				
				Для Каждого ЭлементВыборки Из ВременнаяТЗПоНастройкеОбмена Цикл
					Если ЭлементВыборки.Статус = Перечисления.СтатусыОбменСБанками.НеПодтвержден Тогда
						МассивСообщенийТребующихПодтверждение.Добавить(ЭлементВыборки.СсылкаНаСообщениеОбмена);
					ИначеЕсли ЭлементВыборки.ТребуетсяПодпись
						И МассивСтатусовСПодписью.Найти(ЭлементВыборки.Статус) <> Неопределено Тогда
						МассивСообщенийОбмена.Добавить(ЭлементВыборки.СсылкаНаСообщениеОбмена);
					ИначеЕсли НЕ ЭлементВыборки.ТребуетсяПодпись
						И МассивСтатусовБезПодписи.Найти(ЭлементВыборки.Статус) <> Неопределено Тогда
						МассивСообщенийОбмена.Добавить(ЭлементВыборки.СсылкаНаСообщениеОбмена);
					КонецЕсли;
				КонецЦикла;
				
				ИмяВнешнегоМодуля = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИмяВнешнегоМодуля");
				ДанныеДляОтправки = Новый Структура;
				ДанныеДляОтправки.Вставить("ИмяВнешнегоМодуля", ИмяВнешнегоМодуля);
				ДанныеДляОтправки.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);
				ДанныеДляОтправки.Вставить("МассивСообщенийТребующихПодтверждение", МассивСообщенийТребующихПодтверждение);
				
				Если Параметры.СессииОбменСБанками <> Неопределено Тогда
					// Если есть активная сессия, то документ отправляется в банк без возврата на клиента.
					ТекущаяСессия = Параметры.СессииОбменСБанками.Получить(НастройкаОбмена);
					Если ТекущаяСессия <> Неопределено Тогда
						ДанныеДляОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
						ДанныеДляОтправки.Вставить("ТекущаяСессия", ТекущаяСессия);
						ДанныеДляОтправки.Вставить("ПолучитьСтатусыДокументов", Истина);
						ДанныеДляОтправки.Вставить("АдресРезультата");
						ДанныеДляОтправки.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение);
						ДанныеДляОтправки.Вставить("ВыводитьПрогрессВыполнения", Ложь);
						ОтправитьДокументыПоЛогинуВСбербанк(ДанныеДляОтправки);
						РезультатОтправки = ПолучитьИзВременногоХранилища(ДанныеДляОтправки.АдресРезультата);
						Если НЕ РезультатОтправки.ТребуетсяАутентификация Тогда
							ДанныеДляОтправки.Вставить("РезультатОтправки", РезультатОтправки);
							ТребуютSMS = СообщенияОбменаТребующиеSMSПодтверждения(ДанныеДляОтправки.МассивСообщенийОбмена);
							ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
								ДанныеДляОтправки.МассивСообщенийТребующихПодтверждение, ТребуютSMS);
						КонецЕсли;
						СтруктураКОтправке.БазоваяАутентификацияСбербанка.Вставить(НастройкаОбмена, ДанныеДляОтправки);
					КонецЕсли;
				КонецЕсли;
				
				СтруктураКОтправке.БазоваяАутентификацияСбербанка.Вставить(НастройкаОбмена, ДанныеДляОтправки);
			
			КонецЦикла;
			
			/// Если есть расшифрованные маркеры по сертификатам авторизации,
			//// то здесь же отправим ЭД по данным сертификатам.
			МассивСообщенийОбменаКОтправкеССервера = Новый Массив;
			ЛокальноеСоотвНастроекОбменаИСтруктур = Новый Соответствие;
			
			// Используется для отправки документов в банк по схеме логин-пароль
			МассивСообщенийОбменаКОтправкеССервераБезПодписи = Новый Массив;
			Отбор = Новый Структура("ТребуетсяАвторизацияЛогинПароль", Истина);
			ВременнаяТЗ = ТЗ_ЭД_КОтправке.Скопировать(Отбор);
			ТЗНастроекОбмена = ВременнаяТЗ.Скопировать();
			ТЗНастроекОбмена.Свернуть("НастройкаОбмена");
			МассивНастроекОбмена = ТЗНастроекОбмена.ВыгрузитьКолонку("НастройкаОбмена");
			Для Каждого НастройкаОбмена Из МассивНастроекОбмена Цикл
				Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
				ВременнаяТЗПоНастройкеОбмена = ВременнаяТЗ.Скопировать(Отбор);
				Если ВременнаяТЗПоНастройкеОбмена.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				МассивСообщенийОбмена = Новый Массив;
				Для Каждого Элемент Из ВременнаяТЗПоНастройкеОбмена Цикл
					Если Элемент.Статус = Перечисления.СтатусыОбменСБанками.НеПодтвержден Тогда
						Продолжить;
					ИначеЕсли Элемент.ТребуетсяПодпись И МассивСтатусовСПодписью.Найти(Элемент.Статус) <> Неопределено Тогда
						МассивСообщенийОбмена.Добавить(Элемент.СсылкаНаСообщениеОбмена);
					ИначеЕсли НЕ Элемент.ТребуетсяПодпись И МассивСтатусовБезПодписи.Найти(Элемент.Статус) <> Неопределено Тогда
						МассивСообщенийОбмена.Добавить(Элемент.СсылкаНаСообщениеОбмена);
					КонецЕсли;
				КонецЦикла;
					
				Если ЗначениеЗаполнено(СоотвСертификатовИПаролей)
					И НЕ СоотвСертификатовИПаролей.Получить(НастройкаОбмена) = Неопределено
					И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ПрограммаБанка") = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
					ЛокальноеСоотвНастроекОбменаИСтруктур.Вставить(НастройкаОбмена, СоотвСертификатовИПаролей.Получить(НастройкаОбмена));
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСообщенийОбменаКОтправкеССервераБезПодписи, МассивСообщенийОбмена);
				Иначе
					СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАвторизацией.Вставить(
						НастройкаОбмена, МассивСообщенийОбмена);
				КонецЕсли;
			КонецЦикла;
			
			// Используется для отправки документов в банк с аутентификацией по сертификату
			МассивСообщенийОбменаКОтправкеССервераБезПодписи = Новый Массив;
			Отбор = Новый Структура("ТребуетсяАутентификацияПоСертификату", Истина);
			ВременнаяТЗ = ТЗ_ЭД_КОтправке.Скопировать(Отбор);
			ТЗНастроекОбмена = ВременнаяТЗ.Скопировать();
			ТЗНастроекОбмена.Свернуть("НастройкаОбмена");
			МассивНастроекОбмена = ТЗНастроекОбмена.ВыгрузитьКолонку("НастройкаОбмена");
			Для Каждого НастройкаОбмена Из МассивНастроекОбмена Цикл
				Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
				ВременнаяТЗПоНастройкеОбмена = ВременнаяТЗ.Скопировать(Отбор);
				Если ВременнаяТЗПоНастройкеОбмена.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				МассивСообщенийОбмена = СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАутентификациейПоСертификату.Получить(
					НастройкаОбмена);
				Если МассивСообщенийОбмена = Неопределено Тогда
					МассивСообщенийОбмена = Новый Массив;
				КонецЕсли;
				
				Для Каждого Элемент Из ВременнаяТЗПоНастройкеОбмена Цикл
					Если Элемент.ТребуетсяПодпись И МассивСтатусовСПодписью.Найти(Элемент.Статус) <> Неопределено Тогда
						МассивСообщенийОбмена.Добавить(Элемент.СсылкаНаСообщениеОбмена);
					ИначеЕсли НЕ Элемент.ТребуетсяПодпись И МассивСтатусовБезПодписи.Найти(Элемент.Статус) <> Неопределено Тогда
						МассивСообщенийОбмена.Добавить(Элемент.СсылкаНаСообщениеОбмена);
					КонецЕсли;
				КонецЦикла;

				СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАутентификациейПоСертификату.Вставить(
					НастройкаОбмена, МассивСообщенийОбмена);
			КонецЦикла;
			
			Если СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАутентификациейПоСертификату.Количество() Тогда
				СоотвНастроекОбменаИСоответствийСертификатовИПараметров = СоотвНастроекОбменаИСоответствийСертификатовИПараметровДляАвторизацииСервер(
					МассивНастроекОбмена, СтМассивовСтруктурСертификатов, СоотвСертификатовИПаролей);
				// Если есть сертификат авторизации, то попытаемся, после подписания массива ЭД на клиенте,
				// сразу же отправить ЭД, иначе, после подписания, ЭД упакуем в ПЭД и поместим в очередь на отправку.
				Для Каждого Элемент Из СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАутентификациейПоСертификату Цикл
					НастройкаОбмена = Элемент.Ключ;
					
					СоотвСертификатовИПараметров = СоотвНастроекОбменаИСоответствийСертификатовИПараметров.Получить(НастройкаОбмена);
					
					Если СоотвСертификатовИПараметров = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Для Каждого КлючИЗначение Из СоотвСертификатовИПараметров Цикл
						Сертификат           = КлючИЗначение.Ключ;
						СтруктураСертификата = КлючИЗначение.Значение;
						
						ИдентификаторСессии = Неопределено;
						МаркерЗашифрованный = Неопределено;
						Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
							И (СтруктураСертификата.Свойство("ИдентификаторСессии", ИдентификаторСессии)
								ИЛИ СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
							И (ЗначениеЗаполнено(ИдентификаторСессии) ИЛИ ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
							
							СоотвСертификатовИИхСтруктур.Вставить(Сертификат, СтруктураСертификата);
								
							МассивСертификатов = СоотвНастроекОбменаИСертификатовАвторизации.Получить(НастройкаОбмена);
							Если МассивСертификатов = Неопределено Тогда
								МассивСертификатов = Новый Массив;
								СоотвНастроекОбменаИСертификатовАвторизации.Вставить(НастройкаОбмена, МассивСертификатов);
							КонецЕсли;
							МассивСертификатов.Добавить(Сертификат);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;

			Если МассивСообщенийОбменаКОтправкеССервераБезПодписи.Количество() > 0 Тогда
				АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
				ПараметрыОтправки = Новый Структура;
				ПараметрыОтправки.Вставить("СообщенияОбмена", МассивСообщенийОбменаКОтправкеССервераБезПодписи);
				ПараметрыОтправки.Вставить("ИдентификаторыСессий", ЛокальноеСоотвНастроекОбменаИСтруктур);
				СформироватьИОтправитьПакетыВБанк(ПараметрыОтправки, АдресХранилища);
				СтРезультата = ПолучитьИзВременногоХранилища(АдресХранилища);
				СтруктураВозврата.КоличествоОтправленных = СтруктураВозврата.КоличествоОтправленных
					+ СтРезультата.КоличествоОтправленных;
				СтруктураВозврата.КоличествоПодготовленных = СтруктураВозврата.КоличествоПодготовленных
					+ СтРезультата.КоличествоПодготовленных;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					СтруктураВозврата.ОтправленныеДокументы, СтРезультата.ОтправленныеДокументы);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					СтруктураВозврата.ПодтверждениеПлатежейВБанке.БанкиТребующиеПодтверждениеПлатежаВЛК,
					СтРезультата.ПодтверждениеПлатежейВБанке.БанкиТребующиеПодтверждениеПлатежаВЛК, Истина);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					СтруктураВозврата.ПодтверждениеПлатежейВБанке.НастройкиОбмена,
					СтРезультата.ПодтверждениеПлатежейВБанке.НастройкиОбмена);
			КонецЕсли;
			
			Если МассивСообщенийОбменаКОтправкеССервера.Количество() > 0 Тогда
				АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
				ПараметрыОтправки = Новый Структура;
				ПараметрыОтправки.Вставить("СообщенияОбмена", МассивСообщенийОбменаКОтправкеССервера);
				ПараметрыОтправки.Вставить("ИдентификаторыСессий", ЛокальноеСоотвНастроекОбменаИСтруктур);
				СформироватьИОтправитьПакетыВБанк(ПараметрыОтправки, АдресХранилища);
				СтРезультата = ПолучитьИзВременногоХранилища(АдресХранилища);
				СтруктураВозврата.КоличествоОтправленных = СтруктураВозврата.КоличествоОтправленных
					+ СтРезультата.КоличествоОтправленных;
				СтруктураВозврата.КоличествоПодготовленных = СтруктураВозврата.КоличествоПодготовленных
					+ СтРезультата.КоличествоПодготовленных;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					СтруктураВозврата.ОтправленныеДокументы, СтРезультата.ОтправленныеДокументы);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					СтруктураВозврата.ПодтверждениеПлатежейВБанке.БанкиТребующиеПодтверждениеПлатежаВЛК,
					СтРезультата.ПодтверждениеПлатежейВБанке.БанкиТребующиеПодтверждениеПлатежаВЛК, Истина);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					СтруктураВозврата.ПодтверждениеПлатежейВБанке.НастройкиОбмена,
					СтРезультата.ПодтверждениеПлатежейВБанке.НастройкиОбмена);
			КонецЕсли;
			Для Каждого Элемент Из СтруктураКОтправке Цикл
				
				Если Элемент.Ключ = "ЧерезТокенСбербанка" Тогда
					Продолжить;
				КонецЕсли;
				
				МассивКОтправке = Новый Массив;
				СтруктураКОтправке.Свойство(Элемент.Ключ, МассивКОтправке);
				МассивСообщенийОбмена = Элемент.Значение;
				Если ТипЗнч(МассивСообщенийОбмена) = Тип("Массив") И МассивСообщенийОбмена.Количество() > 0 Тогда
					АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
					ПараметрыОтправки = Новый Структура;
					ПараметрыОтправки.Вставить("СообщенияОбмена", МассивСообщенийОбмена);
					ПараметрыОтправки.Вставить("ИдентификаторыСессий", ЛокальноеСоотвНастроекОбменаИСтруктур);
					СформироватьИОтправитьПакетыВБанк(ПараметрыОтправки, АдресХранилища);
					СтРезультата = ПолучитьИзВременногоХранилища(АдресХранилища);
					СтруктураВозврата.КоличествоОтправленных = СтруктураВозврата.КоличествоОтправленных
						+ СтРезультата.КоличествоОтправленных;
					СтруктураВозврата.КоличествоПодготовленных = СтруктураВозврата.КоличествоПодготовленных
						+ СтРезультата.КоличествоПодготовленных;
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						СтруктураВозврата.ОтправленныеДокументы, СтРезультата.ОтправленныеДокументы);
					Для Каждого ЭлементКоллекции Из СтРезультата.ОтправленныеСообщенияОбмена Цикл
						ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(МассивСообщенийОбмена, ЭлементКоллекции);
					КонецЦикла;
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						СтруктураВозврата.ПодтверждениеПлатежейВБанке.БанкиТребующиеПодтверждениеПлатежаВЛК,
						СтРезультата.ПодтверждениеПлатежейВБанке.БанкиТребующиеПодтверждениеПлатежаВЛК, Истина);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						СтруктураВозврата.ПодтверждениеПлатежейВБанке.НастройкиОбмена,
						СтРезультата.ПодтверждениеПлатежейВБанке.НастройкиОбмена);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		СтруктураКОтправке.САвторизациейЛогинПароль = СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАвторизацией;
		СтруктураКОтправке.САутентификациейПоСертификату = СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправкеСАутентификациейПоСертификату;

	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
	
КонецФункции


// Устанавливает статус сообщения обмена
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена
//  Статус - ПеречислениеСсылка.СтатусыОбменСБанками - новый статус сообщения обмена.
//
Процедура УстановитьСтатусСообщенияОбмена(СообщениеОбмена, Статус) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Статус", Статус);
	ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
	
КонецПроцедуры

// Находит ссылку на сообщение обмена по идентификатору
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена.
//  Идентификатор - Строка - уникальный идентификатор сообщения обмена.
//  ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа.
// 
// Возвращаемое значение:
//  ДокументСсылка.СообщенияОбменСБанками - ссылка на найденное сообщение обмена.
//  Неопределено - сообщение не найдено.
//
Функция СообщениеОбменаПоИдентификатору(НастройкаОбмена, Идентификатор, ВидЭД = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СообщениеОбменСБанками.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	               |	И &УсловиеПоВидуЭД
	               |	И СообщениеОбменСБанками.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Если ЗначениеЗаполнено(ВидЭД) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВидуЭД", "СообщениеОбменСБанками.ВидЭД = &ВидЭД");
		Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВидуЭД", "ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
КонецФункции

// Осуществляет поиск подчиненного сообщения обмена
//
// Параметры:
//  ИсходноеСообщение - ДокументСсылка.СообщениеОбменСБанками - ссылка на исходное сообщение обмена
//  ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - ссылка на вид электронного документа.
// 
// Возвращаемое значение:
//  ДокументСсылка.СообщениеОбменСБанками - ссылка на найденное сообщение обмена
//  Неопределено - подчиненное сообщение не найдено.
//
Функция ПодчиненноеСообщениеОбмена(ИсходноеСообщение, ВидЭД = Неопределено, ВыдаватьОшибку = Истина) Экспорт
	
	РеквизитыИсходногоСообщенияОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ИсходноеСообщение, "НастройкаОбмена, Статус, ВидЭД");
		
	Если РеквизитыИсходногоСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.Письмо Тогда
		// Для писем не требуется дайджест, поэтому подписи привязаны с исходному сообщению.
		Возврат ИсходноеСообщение;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СообщениеОбменСБанками.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	               |	И &УсловиеПоВидуЭД
	               |	И СообщениеОбменСБанками.СообщениеРодитель = &ИсходноеСообщение";
	Запрос.УстановитьПараметр("НастройкаОбмена", РеквизитыИсходногоСообщенияОбмена.НастройкаОбмена);
	Запрос.УстановитьПараметр("ИсходноеСообщение", ИсходноеСообщение);
	
	Если ЗначениеЗаполнено(ВидЭД) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВидуЭД", "СообщениеОбменСБанками.ВидЭД = &ВидЭД");
		Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВидуЭД", "ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные
			И РеквизитыИсходногоСообщенияОбмена.Статус = Перечисления.СтатусыОбменСБанками.Сформирован
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыИсходногоСообщенияОбмена.НастройкаОбмена, "ПрограммаБанка") = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда

			
			ПрисоединенныйФайл = ПрисоединенныйФайл(ИсходноеСообщение);
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
			
			Дайджест = ДайджестСбербанк(РеквизитыИсходногоСообщенияОбмена.ВидЭД, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
				РеквизитыИсходногоСообщенияОбмена.НастройкаОбмена);
			АдресХранилища = ПоместитьВоВременноеХранилище(Base64Значение(Дайджест));
			
			ПараметрыСообщения = Новый Структура;
			ПараметрыСообщения.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
			ПараметрыСообщения.Вставить("НастройкаОбмена", РеквизитыИсходногоСообщенияОбмена.НастройкаОбмена);
			ПараметрыСообщения.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
			ПараметрыСообщения.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
			ПараметрыСообщения.Вставить("СообщениеРодитель", ИсходноеСообщение);
			ПараметрыСообщения.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
			СообщениеДайджест = Неопределено;
			СохранитьСообщениеОбмена(ПараметрыСообщения, СообщениеДайджест);
			Возврат СообщениеДайджест;
		ИначеЕсли ВыдаватьОшибку Тогда
			ШаблонОшибки = НСтр("ru = 'Не найдены служебные данные электронного документа %1.'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ИсходноеСообщение);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли
	
КонецФункции

Функция ДокументПодписываетсяПоМаршруту(СообщениеОбмена) Экспорт

	Если ТипЗнч(СообщениеОбмена) = Тип("ДокументОбъект.СообщениеОбменСБанками") Тогда
		ВидЭД = СообщениеОбмена.ВидЭД;
	Иначе
		ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "ВидЭД");
	КонецЕсли;
	
	Возврат ОбменСБанкамиСлужебныйПовтИсп.ВидыДокументовПодписываемыхПоМаршруту(Ложь).Найти(ВидЭД) <> Неопределено;

КонецФункции

// Создает сообщение обмена
//
// ПараметрыСообщения - Структура - реквизиты сообщения, названия ключей соответствуют названиям реквизитов.
// НовоеСообщениеСсылка - ДокументСсылка.СообщениеОбменСБанками - (возвращаемое значение) ссылка на созданный документ.
//
// Возвращаемое значение:
// Булево - признак того, что новое сообщение обмена сохранено.
//
Процедура СохранитьСообщениеОбмена(Знач ПараметрыСообщения, НовоеСообщениеСсылка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ПараметрыСообщения.Свойство("ВнешнийИдентификатор")
		И ПараметрыСообщения.Свойство("НастройкаОбмена") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВнешнийИдентификатор", ПараметрыСообщения.ВнешнийИдентификатор);
		Запрос.УстановитьПараметр("НастройкаОбмена", ПараметрыСообщения.НастройкаОбмена);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	СообщениеОбменСБанками.Ссылка
		               |ИЗ
		               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		               |ГДЕ
		               |	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
		               |	И СообщениеОбменСБанками.ВнешнийИдентификатор = &ВнешнийИдентификатор
		               |	И НЕ СообщениеОбменСБанками.ПометкаУдаления";
		Если Не Запрос.Выполнить().Пустой() Тогда
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ТекстСообщения = НСтр("ru = 'В информационной базе уже есть электронный документ с таким же внешним идентификатором.
										|Электронный документ: %1
										|Внешний идентификатор: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Ссылка, ПараметрыСообщения.ВнешнийИдентификатор);
			ВидОперации = НСтр("ru = 'Сохранение сообщения обмена в информационной базе.'");
			ОбработатьОшибку(ВидОперации, ТекстСообщения, , Выборка.Ссылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовоеСообщениеОбъект = Документы.СообщениеОбменСБанками.СоздатьДокумент();
	
	Если ПараметрыСообщения.Свойство("Статус") Тогда
		ПараметрыСообщения.Вставить("ДатаИзмененияСтатуса", ТекущаяДатаСеанса());
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовоеСообщениеОбъект, ПараметрыСообщения);
	
	Если (Не ПараметрыСообщения.Свойство("Организация") ИЛИ Не ПараметрыСообщения.Свойство("Банк"))
		И ПараметрыСообщения.Свойство("НастройкаОбмена") Тогда
		РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыСообщения.НастройкаОбмена, "Организация, Банк");
		ЗаполнитьЗначенияСвойств(НовоеСообщениеОбъект, РеквизитыНастройкиОбмена);
	КонецЕсли;
	
	НовоеСообщениеОбъект.Дата = ТекущаяДатаСеанса();
	НовоеСообщениеОбъект.Записать();
	НовоеСообщениеСсылка = НовоеСообщениеОбъект.Ссылка;
	Название = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Строка(НовоеСообщениеСсылка));
	НазваниеФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Название, "");
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", НовоеСообщениеСсылка);
	ПараметрыФайла.Вставить("ИмяБезРасширения", НазваниеФайла);
	ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
	ПараметрыФайла.Вставить("Служебный", Истина);
	
	Если ПараметрыСообщения.Свойство("АдресФайлаВоВременномХранилище") Тогда
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПараметрыСообщения.АдресФайлаВоВременномХранилище);
	КонецЕсли;
	
	Если ПараметрыСообщения.Свойство("Основной") И ПараметрыСообщения.Свойство("СсылкаНаОбъект") Тогда
		МенеджерЗаписи = РегистрыСведений.СостоянияОбменСБанками.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СсылкаНаОбъект = ПараметрыСообщения.СсылкаНаОбъект;
		МенеджерЗаписи.СообщениеОбмена = НовоеСообщениеСсылка;
		МенеджерЗаписи.Состояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовоеСообщениеСсылка, "Состояние");
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Если ПараметрыСообщения.Свойство("СсылкаНаОбъект") Тогда
		МенеджерЗаписи = РегистрыСведений.СвязанныеОбъектыОбменСБанками.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СсылкаНаОбъект = ПараметрыСообщения.СсылкаНаОбъект;
		МенеджерЗаписи.СообщениеОбмена = НовоеСообщениеСсылка;
		МенеджерЗаписи.Записать();
	ИначеЕсли ПараметрыСообщения.Свойство("СообщениеРодитель") Тогда
		ОбъектПривязки = ОбъектПривязки(ПараметрыСообщения.СообщениеРодитель);
		Если ЗначениеЗаполнено(ОбъектПривязки) Тогда
			МенеджерЗаписи = РегистрыСведений.СвязанныеОбъектыОбменСБанками.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.СсылкаНаОбъект = ОбъектПривязки;
			МенеджерЗаписи.СообщениеОбмена = НовоеСообщениеСсылка;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Транспорт

// Сохраняет последнюю дату синхронизации
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//
Процедура СохранитьДатуСинхронизации(НастройкаОбмена) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
	МенеджерЗаписи.ДатаСинхронизации = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Получает новые документы из банка
//
// Параметры:
//  Параметры - Структура - параметры выполнения длительной операции
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//    * ИдентификаторСессии - ДвоичныеДанные - идентификатор установленной сессии.
//    * АдресРезультата - Строка - адрес результата для получения в текущем сеансе
//    * ВидОперации - Строка - выполняемая операция (поле может отсутствовать).
//  АдресРезультата - Строка - адрес временного хранилища для помещения результата выполнения процедуры.
//    * Структура - возвращаемые данные:
//         * ТребуетсяПовторнаяАутентификация - Булево - если Истина, то сессия "протухла" и требуется повторная аутентификация
//         * КоличествоПолученныхПакетов - Число - количество полученных пакетов из банка.
//
Процедура ПолучитьНовыеДокументыИзБанка(Параметры, АдресРезультата = Неопределено) Экспорт
	
	ДанныеВозврата = ОбменСБанкамиКлиентСервер.ПараметрыПолученияНовыхДокументовАсинхронныйОбмен();
	
	ДанныеОСостоянии = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыОбменаСБанком(Параметры.НастройкаОбмена);
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Параметры.НастройкаОбмена, "АдресСервера, Банк, ИдентификаторОрганизации, ВерсияФормата");
		
	Заголовки = Новый Соответствие;
	
	ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
		Параметры.ИдентификаторСессии);
	Заголовки.Вставить("SID", ИдентификаторСессии);
	Заголовки.Вставить("CustomerID", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
	Заголовки.Вставить("APIVersion", РеквизитыНастройкиОбмена.ВерсияФормата);
	
	НачальнаяДатаПолученияЭД = ДанныеОСостоянии.ПоследняяДатаПолученияЭД;
	ПоследняяДатаПолученияЭД = НачальнаяДатаПолученияЭД;
	
	ДатаСтрокой = Формат(НачальнаяДатаПолученияЭД, ФорматДатыИВремениРоссия());
	ДатаСтрокой = КодироватьСтроку(ДатаСтрокой, СпособКодированияСтроки.КодировкаURL);
	
	ПараметрЗапроса = ?(ЗначениеЗаполнено(НачальнаяДатаПолученияЭД), "?date=" + ДатаСтрокой, "");
	
	АдресРесурса = "GetPackList" + ПараметрЗапроса;
	
	ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
	ПараметрыПолучения.Таймаут = 15;
	ПараметрыПолучения.Заголовки = Заголовки;
	
	АдресСервера = ?(Прав(РеквизитыНастройкиОбмена.АдресСервера, 1) = "/", РеквизитыНастройкиОбмена.АдресСервера,
		РеквизитыНастройкиОбмена.АдресСервера + "/");
		
	ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(Параметры.НастройкаОбмена);
	
	СтруктураЖурналирования = Неопределено;
	Если ПараметрыЖурналирования.ИспользоватьЖурналирование Тогда
		СтруктураЖурналирования = Новый Структура;
		СтруктураЖурналирования.Вставить("ОбщийМодуль", ОбщегоНазначения.ОбщийМодуль("ОбменСБанкамиСлужебный"));
		СтруктураЖурналирования.Вставить("НастройкаОбмена", Параметры.НастройкаОбмена);
	КонецЕсли;
		
	Результат = ЭлектронноеВзаимодействиеСлужебный.СкачатьФайлВоВременноеХранилище(
		АдресСервера + АдресРесурса, ПараметрыПолучения, СтруктураЖурналирования);
	
	Если Не Результат.Статус Тогда
		Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
			Шаблон = НСтр("ru = 'При получении списка новых документов из банка произошла ошибка.
							|Код ошибки: %1.
							|%2'");
			ТекстОшибки = СтрШаблон(Шаблон, Результат.КодСостояния, Результат.СообщениеОбОшибке);
		Иначе
			ТекстОшибки = Результат.СообщениеОбОшибке;
		КонецЕсли;
		ВидОперации = НСтр("ru = 'Получение списка новых пакетов из банка.'");
		ОбработатьОшибку(ВидОперации, ТекстОшибки, , Параметры.НастройкаОбмена);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	
	СохранитьДатуСинхронизации(Параметры.НастройкаОбмена);
	
	ПрочитатьИдентификаторыПакетов(
		Параметры.НастройкаОбмена, Результат.Путь, МассивИдентификаторов, ДанныеВозврата.ТребуетсяПовторнаяАутентификация);
	УдалитьИзВременногоХранилища(Результат.Путь);

	Если МассивИдентификаторов.Количество() = 0 Тогда
		ПоместитьВоВременноеХранилище(ДанныеВозврата, АдресРезультата);
		Возврат;
	КонецЕсли;

	ТекстОшибки = "";
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		АдресРесурса = "GetPack?id=" + Идентификатор;
		
		ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
		ПараметрыПолучения.Заголовки = Заголовки;
		
		АдресСервера = ?(Прав(РеквизитыНастройкиОбмена.АдресСервера, 1) = "/", РеквизитыНастройкиОбмена.АдресСервера,
			РеквизитыНастройкиОбмена.АдресСервера + "/");
	
		Результат = ЭлектронноеВзаимодействиеСлужебный.СкачатьФайлВоВременноеХранилище(
			АдресСервера + АдресРесурса, ПараметрыПолучения, СтруктураЖурналирования);
	
		Если Не Результат.Статус Тогда
			
			Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
				Шаблон = НСтр("ru = 'При получении нового документа из банка произошла ошибка.
									|Код ошибки: %1.
									|%2'");
				ТекстОшибки = ТекстОшибки + СтрШаблон(Шаблон, Результат.КодСостояния, Результат.СообщениеОбОшибке) + Символы.ПС;
			Иначе
				ТекстОшибки = ТекстОшибки + Результат.СообщениеОбОшибке + Символы.ПС;
			КонецЕсли;
			
			ВидОперации = НСтр("ru = 'Получение пакета по идентификатору.'");
			ОбработатьОшибку(ВидОперации, ТекстОшибки, , Параметры.НастройкаОбмена);
			Продолжить;
		КонецЕсли;
	
		СоздаватьОперацииВыписки = Параметры.Свойство("ВидОперации") = Неопределено;
		
		СохранитьПолученныйПакет(Параметры.НастройкаОбмена, Результат.Путь, СоздаватьОперацииВыписки, ДанныеВозврата,
			ДанныеВозврата.ТребуетсяПовторнаяАутентификация);
		УдалитьИзВременногоХранилища(Результат.Путь);
		
		Если ДанныеВозврата.ТребуетсяПовторнаяАутентификация Тогда
			ПоместитьВоВременноеХранилище(ДанныеВозврата, АдресРезультата);
			Возврат;
		КонецЕсли;
	
		ДанныеВозврата.КоличествоПолученныхПакетов = ДанныеВозврата.КоличествоПолученныхПакетов + 1;

	КонецЦикла;

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеВозврата, АдресРезультата);
	
КонецПроцедуры

Процедура ОтправитьЗапросСостоянияЭДВБанк(СтруктураПараметров, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураВозврата = Новый Структура;
	
	ЗапросСостоянияЭД = СтруктураПараметров.СообщениеОбмена;
	
	НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗапросСостоянияЭД, "НастройкаОбмена");
	ТекстОшибки = "";
	
	ДанныеТабличнойЧасти = Новый Массив;
	ДанныеТабличнойЧасти.Добавить(ЗапросСостоянияЭД);
	
	ПЭД = Неопределено;
	СоздатьПакетОбменСБанками(НастройкаОбмена, ДанныеТабличнойЧасти, ПЭД);
	СоздатьЭДПакетаAsync(ПЭД);
	
	МассивПакетов = Новый Массив;
	МассивПакетов.Добавить(ПЭД);
	Результат = ОтправкаПакетовВБанк(МассивПакетов, СтруктураПараметров.ИдентификаторСессии, ТекстОшибки);
	
	КолОтправлено = Результат.КоличествоОтправлено;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	СтруктураВозврата.Вставить("ЗапросОтправлен", КолОтправлено > 0);
	СтруктураВозврата.Вставить("ЕстьОшибка", КолОтправлено = 0);
	СтруктураВозврата.Вставить("СообщениеОбменаЗапросСостояния", ЗапросСостоянияЭД);
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	
КонецПроцедуры

// Запрашивает документы из банка до тех пор, пока не будет получено нужное извещение.
//
// Параметры:
//  СтруктураПараметров - Структура - содержит следующие поля:
//      *СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение - запрос;
//      *НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена;
//      *ИдентификаторСессии - Строка - расшифрованный идентификатор сессии;
//  АдресХранилища - Строка - содержит адрес хранилища, в которую помещается структура возврата.
//
Процедура ПолучитьИзвещениеОСостоянииЭДАсинхронно(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеВозврата = ОбменСБанкамиКлиентСервер.ПараметрыПолученияНовыхДокументовАсинхронныйОбмен();
	
	НастройкаОбмена = СтруктураПараметров.НастройкаОбмена;
	
	Пока Истина Цикл
	
		АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
		ПолучитьНовыеДокументыИзБанка(СтруктураПараметров, АдресРезультата);
		ДанныеВозврата = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		ЕстьОшибка = Ложь;
		ПрерватьЦикл = Ложь;
		
		Если ДанныеВозврата.ТребуетсяПовторнаяАутентификация Тогда
			ПрерватьЦикл = Истина;
		КонецЕсли;
		
		ИзвещениеПолучено = ОбменСБанкамиСлужебныйВызовСервера.ПолученоИзвещениеПоЗапросу(
			СтруктураПараметров.СообщениеОбмена, ЕстьОшибка);
		
		Если ИзвещениеПолучено Тогда
			ПрерватьЦикл = Истина;
		КонецЕсли;
		
		ДанныеВозврата.Вставить("ЕстьОшибка", ЕстьОшибка);
		Если ЕстьОшибка Тогда
			ПрерватьЦикл = Истина;
		КонецЕсли;
		
		Если ПрерватьЦикл Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеВозврата, АдресХранилища);
	
КонецПроцедуры

// Собирает пакет с запросом зондом и отправляет в банк. В ответ состояние ЭД.
//
// Параметры:
//  СтруктураПараметров - структура, содержит 2 элемента:
//      СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - электронный документ с запросом выписки,
//      НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//  АдресХранилища - строка, содержит адрес хранилища, содержащий структуру с данными возврата.
//
Процедура ОтправитьЗапросЗондВБанк(СтруктураПараметров, АдресХранилища) Экспорт
	
	МассивСообщенийОбмена = Новый Массив;
	МассивСообщенийОбмена.Добавить(СтруктураПараметров.СообщениеОбмена);
	
	ТекстСообщения = "";
	
	ПакетОбменСБанками = Неопределено;
	СоздатьПакетОбменСБанками(СтруктураПараметров.НастройкаОбмена, МассивСообщенийОбмена, ПакетОбменСБанками);
	СоздатьЭДПакетаAsync(ПакетОбменСБанками);
	
	МассивПакетов = Новый Массив;
	МассивПакетов.Добавить(ПакетОбменСБанками);
	ОтправкаПакетовВБанк(МассивПакетов, СтруктураПараметров.ИдентификаторСессии, ТекстСообщения);
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

КонецПроцедуры

// Выполняет отправку документов
//
// Параметры:
//  Параметры - Структура - параметры выполнения длительной операции
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//    * ИдентификаторСессии - ДвоичныеДанные - идентификатор установленной сессии.
//  АдресРезультата - Строка - адрес временного хранилища для помещения результата выполнения процедуры.
//   * ДанныеВозврата - Структура - результат выполнения, содержит поля:
//    ** КоличествоОтправленныхПакетов - Число - количество отравленных пакетов
//    ** ТекстОшибки - Строка - текст ошибки, если она была
//
Процедура ОтправкаДокументовВБанкАсинхронныйОбмен(Параметры, АдресРезультата = Неопределено) Экспорт
	
	РезультатОтправки = Новый Структура;
	ОбменСБанкамиСлужебныйВызовСервера.ОтправитьЭДВБанк(
		Параметры.НастройкаОбмена, Параметры.ИдентификаторСессии, Параметры.МассивЗапросовВыписок, РезультатОтправки);
	
	ПоместитьВоВременноеХранилище(РезультатОтправки, АдресРезультата);
	
КонецПроцедуры

// Отправляет пакеты в банк.
//
// Параметры:
//  МассивПакетов - Массив - список пакетов для отправки в банк;
//    * ДокументСсылка.ПакетОбменСБанками - отправляемый пакет электронных документов.
//  ИдентификаторСессии - ДвоичныеДанные - расшифрованный идентификатор сессии;
//  ТекстСообщения - Строка - возвращает тест ошибки для вывода пользователю.
// 
// Возвращаемое значение:
//  Структура - результат отправки пакетов. Содержит следующие поля:
//   * КоличествоОтправлено - Число - количество отправленных электронных документов.
//   * ОтправленныеДокументы - Массив - список документов, для которых отправлены актуальные электронные документы.
//     ** ОпределяемыйТип.ВладельцыОбменСБанками - ссылка на документ-владелец отправленного электронного документа.
//   * ОтправленныеСообщенияОбмена - Массив - список сообщений обмена, для которых производилась попытка отправки.
//     ** ДокументСсылка.СообщениеОбменСБанками - ссылка на отправляемый электронный документ.
//   * ПодтверждениеПлатежейВБанке - Структура - данные для подтверждения платежей в личном кабинете банка. Содержит поля:
//      ** БанкиТребующиеПодтверждениеПлатежаВЛК - Массив - содержит ссылки на банки, требующие подтверждение платежа в личном кабинете.
//      ** НастройкиОбмена - Массив - содержит ссылки на настройки обмена, для которых требуется подтверждение платежей в личном кабинете банка.
//
Функция ОтправкаПакетовВБанк(МассивПакетов, ИдентификаторСессии = Неопределено, ТекстСообщения = "") Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КоличествоОтправлено", 0);
	СтруктураВозврата.Вставить("ОтправленныеДокументы", Новый Массив);
	СтруктураВозврата.Вставить("ПодтверждениеПлатежейВБанке", ОбменСБанкамиКлиентСервер.СтруктураПодтвержденияПлатежа());
	
	МассивОтправляемыхСообщенийОбмена = Новый Массив;
	МассивОтправленныхСообщенийОбмена = Новый Массив;
	
	Для Каждого ПакетОбменСБанками Из МассивПакетов Цикл
		
		НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетОбменСБанками, "НастройкаОбмена");
				
		РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена,
			"АдресСервера, РесурсИсходящихДокументов, РесурсВходящихДокументов, ИспользуетсяКриптография, ПрограммаБанка,
			|ИдентификаторОрганизации, ВерсияФормата, Банк, ПоказыватьОкноПодтвержденияПлатежей");
				
		
		Настройки = Новый Структура("Адрес", РеквизитыНастройкиОбмена.АдресСервера);
			
		Данные = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(ПакетОбменСБанками);
		Если РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
			Если ИдентификаторСессии = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Настройки.Вставить("Ресурс", "SendPack");
			ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(ИдентификаторСессии);
			Настройки.Вставить("ИдентификаторСессии", ИдентификаторСессии);
			Настройки.Вставить("ИдентификаторОрганизации", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
		Иначе
			Настройки.Вставить("Ресурс", РеквизитыНастройкиОбмена.РесурсИсходящихДокументов);
		КонецЕсли;
				
		ОтветБанка = Неопределено;
		ТекстОшибки = "";
		
		СообщенияОбмена = СообщенияОбменаВПакетеЭДО(ПакетОбменСБанками);
		
		Настройки.Вставить("ВерсияФормата", РеквизитыНастройкиОбмена.ВерсияФормата);
		
		// Если электронный документ по каким-то причинам отправлен быть не может,
		// то не надо приостанавливать всю цепочку.
		
		НачатьТранзакцию();
		
		Попытка

			СтруктураЭД = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.Отправлен);
		
			ОбменСБанкамиСлужебныйВызовСервера.ОбновитьСтатусыДокументовПакетаЭДО(
				ПакетОбменСБанками, Перечисления.СтатусыПакетовЭД.Отправлен, СтруктураЭД);

			ОтправитьВБанк(НастройкаОбмена, Настройки, Данные, ОтветБанка, ТекстОшибки);
			
			Если РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
				ВыводитьОкноПодтверждения = Ложь;
				Если ЕстьПлатежныйДокументТребующийПодтверждениеВЛК(СообщенияОбмена, ВыводитьОкноПодтверждения) Тогда
					СтруктураВозврата.ПодтверждениеПлатежейВБанке.БанкиТребующиеПодтверждениеПлатежаВЛК.Добавить(
						РеквизитыНастройкиОбмена.Банк);
				КонецЕсли;
				Если ВыводитьОкноПодтверждения Тогда
					СтруктураВозврата.ПодтверждениеПлатежейВБанке.НастройкиОбмена.Добавить(НастройкаОбмена);
				КонецЕсли;
			КонецЕсли;
			
			// Используется для исключения повторной отправки сообщения после возвращения на клиента при ошибке.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтправляемыхСообщенийОбмена, СообщенияОбмена);

			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ОтменитьТранзакцию();
				ШаблонВидаОперации = НСтр("ru = 'Отправка пакета в банк по настройке обмена: %1'");
				ВидОперации = СтрШаблон(ШаблонВидаОперации, НастройкаОбмена);
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "") + ТекстОшибки;
				ОбменСБанкамиСлужебныйВызовСервера.УстановитьСтатусПакета(
					ПакетОбменСБанками, Перечисления.СтатусыПакетовЭД.Отменен);
				ОбработатьОшибкуПередачиПакета(СообщенияОбмена, ВидОперации, ТекстОшибки, ПакетОбменСБанками);
				Продолжить;
			КонецЕсли;
			
			СтруктураВозврата.КоличествоОтправлено = СтруктураВозврата.КоличествоОтправлено + 1;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтправленныхСообщенийОбмена, СообщенияОбмена);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ШаблонСообщения = НСтр("ru = 'Ошибка отправки пакета по настройке: %1
										|%2.'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстДляСообщения = СтрШаблон(ШаблонСообщения, НастройкаОбмена, КраткоеПредставлениеОшибки);
			ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "") + ТекстДляСообщения;
			ШаблонВидаОперации = НСтр("ru = 'Отправка пакета по настройке: %1'");
			ВидОперации = СтрШаблон(ШаблонВидаОперации, НастройкаОбмена);
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки, , ПакетОбменСБанками);
			
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			СтруктураРеквизитов = Новый Структура;
			СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОшибкаПередачи);
			СтруктураРеквизитов.Вставить("ПричинаОтклонения", ТекстОшибки);
			ОбменСБанкамиСлужебныйВызовСервера.ОбновитьСтатусыДокументовПакетаЭДО(
				ПакетОбменСБанками, Перечисления.СтатусыПакетовЭД.Отменен, СтруктураРеквизитов);
		КонецПопытки;
		
		Попытка
			Если РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн Тогда
				ОбработатьОтветИзБанка(ОтветБанка, СообщенияОбмена.Получить(0)); // в пакете может быть только одно сообщение
			Иначе
				Для Каждого СообщениеОбмена Из СообщенияОбмена Цикл
					УстановитьСтатусСообщенияОбмена(СообщениеОбмена, Перечисления.СтатусыОбменСБанками.Отправлен);
				КонецЦикла;
				ВремФайл = Неопределено;
				ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветБанкаНаОтправкуДокументаAsync(
					ОтветБанка, ПакетОбменСБанками, ВремФайл);
			КонецЕсли;
		Исключение
			ШаблонСообщения = НСтр("ru = 'Ошибка чтения ответа банка после отправки пакета по настройке: %1
										|%2.'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстДляСообщения = СтрШаблон(ШаблонСообщения, НастройкаОбмена, КраткоеПредставлениеОшибки);
			ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "") + ТекстДляСообщения;
			ШаблонВидаОперации = НСтр("ru = 'Чтение ответа банка после отправки пакета по настройке: %1'");
			ВидОперации = СтрШаблон(ШаблонВидаОперации, НастройкаОбмена);
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибкиВЖурнале = НСтр("ru = 'При чтении ответа банка возникла ошибка:
												|%1
												|Файл ответа: %2'");
			ТекстОшибкиВЖурнале = СтрШаблон(ТекстОшибкиВЖурнале, ПодробноеПредставлениеОшибки, ВремФайл);
			ОбработатьОшибку(ВидОперации, ТекстОшибкиВЖурнале, , ПакетОбменСБанками);
			
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			СтруктураРеквизитов = Новый Структура;
			СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОшибкаПередачи);
			СтруктураРеквизитов.Вставить("ПричинаОтклонения", ТекстОшибки);
			ОбменСБанкамиСлужебныйВызовСервера.ОбновитьСтатусыДокументовПакетаЭДО(
				ПакетОбменСБанками, Перечисления.СтатусыПакетовЭД.Отменен, СтруктураРеквизитов);
		КонецПопытки;
			
	КонецЦикла;
	
	Если МассивОтправленныхСообщенийОбмена.Количество() Тогда
		ОтправленныеДокументы = ОбменСБанкамиСлужебныйВызовСервера.ВладельцыСообщенийОбмена(
			МассивОтправленныхСообщенийОбмена);
		СтруктураВозврата.Вставить("ОтправленныеДокументы", ОтправленныеДокументы);
	КонецЕсли;
	
	СтруктураВозврата.ПодтверждениеПлатежейВБанке.БанкиТребующиеПодтверждениеПлатежаВЛК = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		СтруктураВозврата.ПодтверждениеПлатежейВБанке.БанкиТребующиеПодтверждениеПлатежаВЛК);
	
	СтруктураВозврата.Вставить("ОтправленныеСообщенияОбмена", МассивОтправляемыхСообщенийОбмена);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Создает пакет электронных документов.
// 
// Параметры:
//  МассивСообщенийОбмена - Массив ссылок на сообщения, которые надо включить в пакет.
//
Функция СоздатьДокументыПакетовЭД(МассивСообщенийОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТЗ_ПЭД = Новый ТаблицаЗначений;
	ТЗ_ПЭД.Колонки.Добавить("ПЭД");
	ТЗ_ПЭД.Колонки.Добавить("ПрограммаБанка");
	ТЗ_ПЭД.Колонки.Добавить("ФормироватьЭД");
	ТЗ_ПЭД.Колонки.Добавить("АутентификацияПоСертификату");
	ТЗ_ПЭД.Колонки.Добавить("НастройкаОбмена");
	
	МассивПодготовленныхКОтправкеСообщенийОбмена = Новый Массив;
	
	ПодготовленныеПакеты = НайтиПодготовленныеКОтправкеПакеты(МассивСообщенийОбмена);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.Статус,
	|	СообщениеОбменСБанками.НастройкаОбмена,
	|	СообщениеОбменСБанками.Направление,
	|	СообщениеОбменСБанками.ВидЭД,
	|	СообщениеОбменСБанками.НастройкаОбмена.ПрограммаБанка КАК ПрограммаБанка,
	|	СообщениеОбменСБанками.НастройкаОбмена.АутентификацияПоСертификату
	|		И СообщениеОбменСБанками.НастройкаОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен) КАК АутентификацияПоСертификату,
	|	СообщениеОбменСБанками.Ссылка КАК СообщениеОбмена
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.Ссылка В(&МассивДокументов)";
	Запрос.УстановитьПараметр("МассивДокументов", МассивСообщенийОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПЭД = ПодготовленныеПакеты.Получить(Выборка.СообщениеОбмена);
		ФормироватьЭД = Ложь;
		
		Если ПЭД = Неопределено Тогда
			
			ФормироватьЭД = Истина;
					
			ДокументНЕПодписан = Выборка.Статус = Перечисления.СтатусыОбменСБанками.Сформирован
								ИЛИ Выборка.Статус = Перечисления.СтатусыОбменСБанками.ЧастичноПодписан
								ИЛИ Выборка.Статус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком; // для обмена через ДО
			Если НЕ ОбменСБанкамиСлужебныйВызовСервера.УстановленныеПодписиВалидны(Выборка.СообщениеОбмена) Тогда
				ШаблонТекста = НСтр("ru = 'Обработка сообщения обмена %1.
									|Документ не обработан, так как содержит невалидные подписи.'");
				Текст = СтрШаблон(ШаблонТекста, Выборка.СообщениеОбмена);
				ОбщегоНазначения.СообщитьПользователю(Текст);
			КонецЕсли;

			Если (ПодписыватьВидЭД(Выборка.НастройкаОбмена, Выборка.ВидЭД)
					И (ДокументНеПодписан ИЛИ НЕ ОбменСБанкамиСлужебныйВызовСервера.УстановленныеПодписиВалидны(Выборка.СообщениеОбмена)))
				ИЛИ Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
				Продолжить;
			КонецЕсли;
			
			СообщенияОбменаТабличнойЧасти = Новый Массив;
			СообщенияОбменаТабличнойЧасти.Добавить(Выборка.СообщениеОбмена);
			
			Если Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку Тогда
				СлужебноеСообщениеБанка = ПодчиненноеСообщениеОбмена(Выборка.СообщениеОбмена, Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
				СообщенияОбменаТабличнойЧасти.Добавить(СлужебноеСообщениеБанка);
			КонецЕсли;
			
			ПЭД = Неопределено;
			СоздатьПакетОбменСБанками(Выборка.НастройкаОбмена, СообщенияОбменаТабличнойЧасти, ПЭД);
		КонецЕсли;

		Если ЗначениеЗаполнено(ПЭД) Тогда
			НовСтрока = ТЗ_ПЭД.Добавить();
			НовСтрока.ПЭД = ПЭД;
			НовСтрока.ФормироватьЭД = ФормироватьЭД;
			ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
			Если ФормироватьЭД Тогда
				МассивПодготовленныхКОтправкеСообщенийОбмена.Добавить(Выборка.СообщениеОбмена);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	// Сформируем массив структур для обработки на клиенте
	МассивСтруктурПЭД = Новый Массив;
	Для Каждого ТекСтрока Из ТЗ_ПЭД Цикл
		СтруктураПЭД = Новый Структура;
		СтруктураПЭД.Вставить("ПЭД", ТекСтрока.ПЭД);
		СтруктураПЭД.Вставить("ЭтоНовый", ТекСтрока.ФормироватьЭД);
		СтруктураПЭД.Вставить("АутентификацияПоСертификату", ТекСтрока.АутентификацияПоСертификату);
		СтруктураПЭД.Вставить("НастройкаОбмена", ТекСтрока.НастройкаОбмена);
		
		Если ТекСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
			ИЛИ ТекСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
			СтруктураПЭД.Вставить("ОтправкаСКлиента");
		ИначеЕсли ТекСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн И ТекСтрока.ФормироватьЭД Тогда
			СоздатьЭДПакетаCMSDETACHED(ТекСтрока.ПЭД)
		ИначеЕсли ТекСтрока.ФормироватьЭД Тогда
			СоздатьЭДПакетаAsync(ТекСтрока.ПЭД);
		КонецЕсли;
		МассивСтруктурПЭД.Добавить(СтруктураПЭД);
	КонецЦикла;
	
	Для Каждого СообщениеОбмена Из МассивПодготовленныхКОтправкеСообщенийОбмена Цикл
		СтруктураПараметров = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
		ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
	КонецЦикла;
		
	Возврат МассивСтруктурПЭД;
	
КонецФункции

// Формирует пакеты и отправляет в банк
//
// Параметры:
//  Параметры - Структура - содержит поля:
//     * СообщенияОбмена - Массив - содержит ссылки на ДокументСсылка.СообщениеОбменСБанками
//     * ИдентификаторыСессий - Соответствие - идентификаторы установленных сессий.
//  АдресХранилища - Строка - адрес хранилища для помещения результата.
//
Процедура СформироватьИОтправитьПакетыВБанк(Параметры, АдресХранилища) Экспорт

	ИдентификаторыСессий = Параметры.ИдентификаторыСессий;
	МассивСтруктурПакетовЭД = СоздатьДокументыПакетовЭД(Параметры.СообщенияОбмена);
	СтруктураРезультата = Новый Структура;
	
	СтруктураРезультата.Вставить("КоличествоПодготовленных", 0);
	СтруктураРезультата.Вставить("ОтправленныеДокументы", Новый Массив);
	СтруктураРезультата.Вставить("ОтправленныеСообщенияОбмена", Новый Массив);
	СтруктураРезультата.Вставить("ПодтверждениеПлатежейВБанке", ОбменСБанкамиКлиентСервер.СтруктураПодтвержденияПлатежа());

	Для Каждого Элемент Из МассивСтруктурПакетовЭД Цикл
		Если Элемент.ЭтоНовый Тогда
			СтруктураРезультата.КоличествоПодготовленных = СтруктураРезультата.КоличествоПодготовленных + 1;
		КонецЕсли;
	КонецЦикла;

	КоличествоОтправленных = 0;
	МассивПакетовДляОбработкиНаКлиенте = Новый Массив;
	МассивПакетовДляОтправкиСКлиента   = Новый Массив;
	Если МассивСтруктурПакетовЭД.Количество() > 0 Тогда
		Для Каждого СтруктураПЭД Из МассивСтруктурПакетовЭД Цикл
			Если СтруктураПЭД.Свойство("ОтправкаСКлиента") Тогда
				МассивПакетовДляОтправкиСКлиента.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			// Если пакет бы сформирован ранее, но аутентификация на сервере не производилась.
			ИначеЕсли СтруктураПЭД.АутентификацияПоСертификату И ИдентификаторыСессий.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивПЭД = Новый Массив;
			МассивПЭД.Добавить(СтруктураПЭД.ПЭД);
			
			ИдентификаторСессии = Неопределено;
			Если ИдентификаторыСессий <> Неопределено
				И ИдентификаторыСессий.Получить(СтруктураПЭД.НастройкаОбмена) <> Неопределено Тогда
				ИдентификаторСессии = ИдентификаторыСессий.Получить(СтруктураПЭД.НастройкаОбмена).ИдентификаторСессии;
			КонецЕсли;
			ТекстОшибки = "";
			Результат = ОтправкаПакетовВБанк(МассивПЭД, ИдентификаторСессии, ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
			КоличествоОтправленных = КоличествоОтправленных + Результат.КоличествоОтправлено;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураРезультата.ОтправленныеДокументы, Результат.ОтправленныеДокументы);
				
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураРезультата.ОтправленныеСообщенияОбмена, Результат.ОтправленныеСообщенияОбмена);
				
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураРезультата.ПодтверждениеПлатежейВБанке.БанкиТребующиеПодтверждениеПлатежаВЛК,
				Результат.ПодтверждениеПлатежейВБанке.БанкиТребующиеПодтверждениеПлатежаВЛК, Истина);
				
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтруктураРезультата.ПодтверждениеПлатежейВБанке.НастройкиОбмена,
				Результат.ПодтверждениеПлатежейВБанке.НастройкиОбмена, Истина);
				
		КонецЦикла;
	КонецЕсли;
	СтруктураРезультата.Вставить("КоличествоОтправленных", КоличествоОтправленных);
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

// Отправляет данные через интернет.
//
// Параметры:
//  АдресСервера - Строка - URI;
//  Ресурс - Строка - ресурс, на который отправляются данные;
//  Заголовки - Соответствие - заголовки запроса;
//  Данные - ДвоичныеДанные - тело запроса;
//         - Неопределено - отправить запрос без тела.
//  ПолучитьТелоКакСтроку - Булево - признак необходимости получения тела как строки;
//  Таймаут - Число - таймаут ожидания ответа сервера;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//
// Возвращаемое значение:
//   Структура - Структура со свойствами:
//      * Статус - Булево - результат получения файла.
//      * Тело - ДвоичныеДанные, Строка, Неопределено - данные ответа сервера.
//      * СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке, если статус Ложь.
//      * КодСостояния - Число, Неопределено - код состояния HTTP-ответа. Наличие кода означает, что был ответ от сервера.
//
Функция ОтправитьPOSTЗапрос(АдресСервера, Ресурс, Заголовки, Данные, ПолучитьТелоКакСтроку = Ложь, Таймаут = 60, НастройкаОбмена = Неопределено) Экспорт

	ПолучитьЛог = Ложь;
	Если НастройкаОбмена <> Неопределено Тогда
		ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(НастройкаОбмена);
		ПолучитьЛог = ПараметрыЖурналирования.ИспользоватьЖурналирование;
	КонецЕсли;
	
	Перенаправления = Новый Массив;
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("АдресСервера", АдресСервера);
	ПараметрыОтправки.Вставить("Ресурс", Ресурс);
	ПараметрыОтправки.Вставить("Заголовки", Заголовки);
	ПараметрыОтправки.Вставить("Данные", Данные);
	
	Возврат ОтправитьPOSTЗапросРекурсивно(
		ПараметрыОтправки, ПолучитьТелоКакСтроку, Таймаут, ПолучитьЛог, НастройкаОбмена, Перенаправления)
	
КонецФункции

#КонецОбласти

#Область ОбработкаПакетов

// Осуществляет распаковку полученного пакета.
//
// Параметры:
//  ПакетОбменСБанками - ДокументСсылка.ПакетОбменСБанками - ссылка на распаковываемый пакет;
//  СоздаватьОперацииВыписки - Булево - признак создания документов отражения выписки в учете.
//  ДанныеВозврата - Структура - см. ОбменСБанкамиКлиентСервер.ПараметрыПолученияНовыхДокументовАсинхронныйОбмен().
//
Процедура РаспаковатьПакетОбменСБанками(ПакетОбменСБанками, СоздаватьОперацииВыписки, ДанныеВозврата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПакетОбменСБанками.НастройкаОбмена
	               |ИЗ
	               |	Документ.ПакетОбменСБанками КАК ПакетОбменСБанками
	               |ГДЕ
	               |	ПакетОбменСБанками.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПакетОбменСБанкамиСообщения.Сообщение.ВнешнийИдентификатор КАК ВнешнийИдентификатор
	               |ИЗ
	               |	Документ.ПакетОбменСБанками.Сообщения КАК ПакетОбменСБанкамиСообщения
	               |ГДЕ
	               |	ПакетОбменСБанкамиСообщения.Ссылка = &Ссылка
	               |	И НЕ ПакетОбменСБанкамиСообщения.Сообщение.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(ПакетОбменСБанкамиСообщения.Ссылка) КАК КоличествоСообщений
	               |ИЗ
	               |	Документ.ПакетОбменСБанками.Сообщения КАК ПакетОбменСБанкамиСообщения
	               |ГДЕ
	               |	ПакетОбменСБанкамиСообщения.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ПакетОбменСБанками);
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоНастройке = Результат[0].Выбрать();
	ВыборкаПоНастройке.Следующий();
	НастройкаОбмена = ВыборкаПоНастройке.НастройкаОбмена;
	
	МассивВнешнихИдентификаторов = Результат[1].Выгрузить().ВыгрузитьКолонку("ВнешнийИдентификатор");
	
	ВыборкаКоличества = Результат[2].Выбрать();
	ВыборкаКоличества.Следующий();
	Если МассивВнешнихИдентификаторов.Количество() <> ВыборкаКоличества.КоличествоСообщений Тогда
		ПакетОбъект = ПакетОбменСБанками.ПолучитьОбъект();
		МассивСообщенийОбмена = Новый Массив;
		Для Каждого Строка Из ПакетОбъект.Сообщения Цикл
			Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Сообщение, "ПометкаУдаления") Тогда
				МассивСообщенийОбмена.Добавить(Строка.Сообщение);
			КонецЕсли;
		КонецЦикла;
		ПакетОбъект.Сообщения.Очистить();
		Для Каждого СообщениеОбмена Из МассивСообщенийОбмена Цикл
			НовСтрока = ПакетОбъект.Сообщения.Добавить();
			НовСтрока.Сообщение = СообщениеОбмена;
		КонецЦикла;
		ПакетОбъект.Записать();
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(ПакетОбменСБанками);
	
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
	
	ПакетXML = Новый ЧтениеXML;
	ПакетXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());

	НачатьТранзакцию();
	Попытка
		
		Попытка
			ResultBank = ФабрикаXDTO.ПрочитатьXML(ПакетXML);
		Исключение
			Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
				ШаблонСообщения = НСтр("ru = 'Возникла ошибка при разборе пакета %1.
											|%2'");
				КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстСообщения = СтрШаблон(
					ШаблонСообщения, ПакетОбменСБанками, КраткоеПредставлениеОшибки);
			Иначе
				ТекстСообщения = НСтр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
			КонецЕсли;
			ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
										|Подробное представление ошибки:
										|%2'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ПодробнаяИнформация = СтрШаблон(ПодробнаяИнформация, ПакетОбменСБанками, ПодробноеПредставлениеОшибки);
			ВидОперации = НСтр("ru = 'Чтение ЭД.'");
			ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, , ПакетОбменСБанками);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
		ПакетXML.Закрыть();
		
		Если ЗначениеСвойстваXDTO(ResultBank, "Success.GetPacketResponse.Document") <> Неопределено Тогда
			
			Document = ЗначениеСвойстваXDTO(ResultBank, "Success.GetPacketResponse.Document");
			
			Если ТипЗнч(Document) = Тип("ОбъектXDTO") Тогда
				ПрочитатьДокументИзПакета(НастройкаОбмена, ПакетОбменСБанками, Document, МассивВнешнихИдентификаторов,
					СоздаватьОперацииВыписки, ДанныеВозврата);
			Иначе
				Для Каждого Документ Из Document Цикл
					ПрочитатьДокументИзПакета(НастройкаОбмена, ПакетОбменСБанками, Документ, МассивВнешнихИдентификаторов,
						СоздаватьОперацииВыписки,ДанныеВозврата);
				КонецЦикла;
			КонецЕсли;

		ИначеЕсли ЗначениеСвойстваXDTO(ResultBank, "Error") <> Неопределено Тогда
			ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Если НЕ ДанныеВозврата.ЕстьОшибка Тогда
			ОбменСБанкамиСлужебныйВызовСервера.УстановитьСтатусПакета(
				ПакетОбменСБанками, Перечисления.СтатусыПакетовЭД.Распакован);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Сохраняет полученный пакет в информационной базе.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена.
//  Путь - Строка - адрес временного хранилища с файлом, полученным из банка.
//  СоздаватьОперацииВыписки - Булево - создавать операции при получении выписки.
//  ДанныеВозврата - Структура - см. описание ОбменСБанкамиКлиентСервер.ПараметрыПолученияНовыхДокументовАсинхронныйОбмен.
//  ТребуетсяПовторнаяАутентификация - Булево - (возвращаемое значение)получена ошибка с кодом 1006.
//
Процедура СохранитьПолученныйПакет(НастройкаОбмена, Путь, СоздаватьОперацииВыписки, ДанныеВозврата, ТребуетсяПовторнаяАутентификация) Экспорт
	
	СтруктураПараметров = Неопределено;
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Путь);
	
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		Поток = ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения();
		ОбъектXML.ОткрытьПоток(Поток);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	Исключение
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеФайла.Записать(ИмяФайла);
		ТекстСообщения = НСтр("ru = 'Получены некорректные данные из банка. Для решения проблемы обратитесь в свой банк.'");
		
		ШаблонОшибкиДляЖурнала = НСтр("ru = 'Из банка получен файл с некорректным содержимым.
											|Путь к файлу: %1
											|Текст ошибки: %2.'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(ШаблонОшибкиДляЖурнала, ИмяФайла, ПодробноеПредставлениеОшибки);
		
		ВидОперации = НСтр("ru = 'Чтение полученного из банка электронного документа.'");
		ОбработатьОшибку(ВидОперации, ТекстОшибки, , НастройкаОбмена);
		
		ВызватьИсключение ТекстСообщения;

	КонецПопытки;
	
	ОбъектXML.Закрыть();
	
	Если ЗначениеСвойстваXDTO(ResultBank, "Error") <> Неопределено Тогда
		Если ResultBank.Error = "1006" Тогда
			ТребуетсяПовторнаяАутентификация = Истина;
			Возврат;
		КонецЕсли;
		ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
		ВызватьИсключение ТекстОшибки;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеСвойстваXDTO(ResultBank, "Success.GetPacketResponse") <> Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НастройкаОбмена", НастройкаОбмена);
		ВнешнийИдентификатор = ЗначениеСвойстваXDTO(ResultBank, "Success.GetPacketResponse.id");
		СтруктураПараметров.Вставить("ВнешнийИдентификатор", ВнешнийИдентификатор);
		СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыПакетовЭД.КРаспаковке);
		СтруктураПараметров.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "Организация");
		СтруктураПараметров.Вставить("Организация", Организация);
		
		ПакетОбменСБанками = СформироватьНовыйПакетОбменСБанками(СтруктураПараметров);
		Если ЗначениеЗаполнено(ПакетОбменСБанками) Тогда
			ИмяФайлаПакета = "ResultBank_" + СтруктураПараметров.ВнешнийИдентификатор;
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", ПакетОбменСБанками);
			ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяФайлаПакета);
			ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			ПараметрыФайла.Вставить("Служебный", Истина);

			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Путь);
		Иначе
			ДанныеВозврата.ЕстьОшибка = Истина;
			Возврат;
		КонецЕсли;
		
		РаспаковатьПакетОбменСБанками(ПакетОбменСБанками, СоздаватьОперацииВыписки, ДанныеВозврата);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет параметры распаковки пакетов электронных документов.
//
// Параметры:
//   ПакетыЭД - Массив - пакеты, которые пользователь решил распаковать:
//      * ДокументСсылка.ПакетОбменСБанками - ссылка на пакет.
//
// Возвращаемое значение:
//  Массив - пакеты, которые возможно распаковать:
//      * ДокументСсылка.ПакетОбменСБанками - ссылка на пакет ЭД.
//
Функция ГотовыеКРаспаковкеПакетыЭД(Знач ПакетыЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК СсылкаНаДокумент,
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ПакетЭД.Статус
	|ИЗ
	|	Документ.ПакетОбменСБанками КАК ПакетЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПакетОбменСБанкамиПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО (ЭДПрисоединенныеФайлы.ВладелецФайла = ПакетЭД.Ссылка)
	|ГДЕ
	|	ПакетЭД.Ссылка В(&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок", ПакетыЭД);
	
	ВыборкаПакеты = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПакеты.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаПакеты.Ссылка) Тогда
			Операция = НСтр("ru = 'Распаковка пакета'");
			ТекстСообщения = НСтр("ru = 'Нет присоединенного файла для пакета: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ВыборкаПакеты.СсылкаНаДокумент);
			ОбработатьОшибку(Операция, ТекстСообщения, ТекстСообщения, ВыборкаПакеты.СсылкаНаДокумент);
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаПакеты.Статус <> Перечисления.СтатусыПакетовЭД.КРаспаковке Тогда
			
			ШаблонСообщения = НСтр("ru = 'Статус пакета %1 отличен от значения ""К распаковке"".'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаПакеты.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		МассивВозврата.Добавить(ВыборкаПакеты.СсылкаНаДокумент);
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Читает файл, полученный из банка и возвращает идентификаторы пакетов, которых еще нет в информационной базе.
// Исходный файл удаляет.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  Путь - Строка - адрес временного хранилища файла, полученного из банка.
//  МассивИдентификаторов - Массив - содержит идентификаторы новых пакетов банка.
//     * Строка - идентификатор пакета.
// ТребуетсяПовторнаяАутентификация - Булево - (возвращаемое значение) из банка получена ошибка 1006 - сессия закрыта по таймауту.
//
Процедура ПрочитатьИдентификаторыПакетов(НастройкаОбмена, Путь, МассивИдентификаторов, ТребуетсяПовторнаяАутентификация = Ложь) Экспорт
	
	МассивИдентификаторов = Новый Массив;
	
	ОбъектXML = Новый ЧтениеXML;
		
	Попытка
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Путь);
		Поток = ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения();
		ОбъектXML.ОткрытьПоток(Поток);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
			ВерсияФормата = ОбменСБанкамиКлиентСервер.УстаревшаяВерсияФорматаАсинхронногоОбмена();
		Иначе
			ВерсияФормата = ResultBank.formatVersion;
		КонецЕсли;
		ПространствоИмен = ПространствоИменАсинхронногоОбмена(ВерсияФормата);
		Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
		Поток.Перейти(0, ПозицияВПотоке.Начало);
		ОбъектXML.ОткрытьПоток(Поток);
		ТипResultBank = ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
		ResultBank = Фабрика.ПрочитатьXML(ОбъектXML, ТипResultBank);
	Исключение
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеФайла.Записать(ИмяФайла);
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При чтении данных, полученных из банка, произошла ошибка.'");
		ТекстОшибки = НСтр("ru = 'При чтении данных, полученных из банка, произошла ошибка.
								|Путь к файлу: %1
								|Подробное представление ошибки: %2'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла, ПодробноеПредставлениеОшибки);
		ВидОперации = НСтр("ru = 'Чтение списка новых документов'");
		ОбработатьОшибку(ВидОперации, ТекстОшибки, , НастройкаОбмена);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ОбъектXML.Закрыть();
		
	Если НЕ ResultBank.Success = Неопределено Тогда
		Если НЕ ResultBank.Success.GetPacketListResponse = Неопределено Тогда
			Для Каждого Идентификатор Из ResultBank.Success.GetPacketListResponse.PacketID Цикл
				МассивИдентификаторов.Добавить(Идентификатор);
			КонецЦикла;
			МассивИдентификаторов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИдентификаторов);
			ПоследняяДатаПолученияЭД = ResultBank.Success.GetPacketListResponse.TimeStampLastPacket;
		Иначе
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			ДвоичныеДанныеФайла.Записать(ИмяФайла);
			Операция = НСтр("ru = 'Чтение ответа банка.'");
			ТекстОшибки = НСтр("ru = 'Получен некорректный ответ из банка
									|Файл ответа: %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла);
			ТекстСообщения = НСтр("ru = 'Получены некорректные данные из банка'");
			ОбработатьОшибку(Операция, ТекстОшибки, , НастройкаОбмена);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
		Если ResultBank.Error = "1006" Тогда
			ТребуетсяПовторнаяАутентификация = Истина;
			Возврат;
		КонецЕсли;
		ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДанныеОСостоянии = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыОбменаСБанком(НастройкаОбмена);
	
	НачальнаяДатаПолученияЭД = ДанныеОСостоянии.ПоследняяДатаПолученияЭД;
	
	// Сдвиг даты в регистре сведений
	Если ЗначениеЗаполнено(ПоследняяДатаПолученияЭД) И ПоследняяДатаПолученияЭД > НачальнаяДатаПолученияЭД Тогда
		МенеджерЗаписи = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
		МенеджерЗаписи.ПоследняяДатаПолученияЭД = ПоследняяДатаПолученияЭД;
		МенеджерЗаписи.ДатаСинхронизации = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	КС = Новый КвалификаторыСтроки(80);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", ОписаниеТиповС);
	
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		НовСтрока = ТаблицаИдентификаторов.Добавить();
		НовСтрока.Идентификатор = Идентификатор;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетЭД.ВнешнийИдентификатор КАК ВнешнийИдентификатор
	|ПОМЕСТИТЬ ЗагруженныеПакеты
	|ИЗ
	|	Документ.ПакетОбменСБанками КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ВнешнийИдентификатор В
	|			(ВЫБРАТЬ
	|				ТаблицаИдентификаторов.Идентификатор
	|			ИЗ
	|				ТаблицаИдентификаторов)
	|	И ПакетЭД.НастройкаОбмена = &НастройкаОбмена
	|	И ПакетЭД.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИдентификаторов.Идентификатор КАК Идентификатор
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|ГДЕ
	|	НЕ ТаблицаИдентификаторов.Идентификатор В
	|				(ВЫБРАТЬ
	|					ЗагруженныеПакеты.ВнешнийИдентификатор
	|				ИЗ
	|					ЗагруженныеПакеты)";
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	МассивИдентификаторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
КонецПроцедуры

// Создает документ ПакетОбменСБанками и заполняет его реквизиты.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком,
//  МассивСообщений - Массив - содержит ссылки на документы СообщениеОбменСБанками,
//  ПакетОбменСБанками - ДокументСсылка.ПакетОбменСБанками - ссылка на созданный документ.
//
Процедура СоздатьПакетОбменСБанками(НастройкаОбмена, МассивСообщений, ПакетОбменСБанками) Экспорт
	
	ПакетОбменСБанкамиОбъект = Документы.ПакетОбменСБанками.СоздатьДокумент();
	ПакетОбменСБанкамиОбъект.Дата = ТекущаяДатаСеанса();
	ПакетОбменСБанкамиОбъект.Направление = Перечисления.НаправленияЭД.Исходящий;
	ПакетОбменСБанкамиОбъект.НастройкаОбмена = НастройкаОбмена;
	ПакетОбменСБанкамиОбъект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "Организация");
	ПакетОбменСБанкамиОбъект.Статус = Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке;
	ПакетОбменСБанкамиОбъект.Идентификатор = Строка(Новый УникальныйИдентификатор);
	
	Для Каждого Сообщение Из МассивСообщений Цикл
		НоваяСтрока = ПакетОбменСБанкамиОбъект.Сообщения.Добавить();
		НоваяСтрока.Сообщение = Сообщение;
	КонецЦикла;
	
	Попытка
		ПакетОбменСБанкамиОбъект.Записать();
		ПакетОбменСБанками = ПакетОбменСБанкамиОбъект.Ссылка;
	Исключение
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Формирование пакета ЭДО'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , НастройкаОбмена);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Создает электронный документ для пакета документов.
//
// Параметры:
//  Конверт  - ДокументСсылка.ПакетЭД - ссылка на пакет;
//  СвойстваСертификатов - Соответствие - свойства сертификатов не x509:
//    * Ключ - Строка - отпечаток сертификата;
//    * Значение - Структура - свойства сертификата:
//          ** СерийныйНомер - Строка - серийный номер сертификата;
//          ** ИмяИздателя - Строка - имя издателя.
//
Процедура СоздатьЭДПакетаAsync(Конверт, СвойстваСертификатов = Неопределено) Экспорт
	
	НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Конверт, "НастройкаОбмена");

	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, Банк, ИдентификаторОрганизации, СжиматьДанныеПакетаЭД, ВерсияФормата");
	СведенияОбОрганизации = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
		РеквизитыНастройкиОбмена.Организация, СведенияОбОрганизации);
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыНастройкиОбмена.Банк, "Наименование, Код");

	Если ЗначениеЗаполнено(РеквизитыНастройкиОбмена.ВерсияФормата) Тогда
		ВерсияФормата = РеквизитыНастройкиОбмена.ВерсияФормата;
	Иначе
		ВерсияФормата = ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
	
	ПространствоИмен = ПространствоИменАсинхронногоОбмена(ВерсияФормата);
	
	Попытка
		ТекстОшибки = "";
		
		Packet = ОбъектТипаCML(Фабрика, "Packet", ПространствоИмен);
		Sender = ОбъектТипаCML(Фабрика, "ParticipantType", ПространствоИмен);
		CustomerPartyType = ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
		
		ЗаполнитьСвойствоXDTO(
			CustomerPartyType, "id", РеквизитыНастройкиОбмена.ИдентификаторОрганизации, Истина, ТекстОшибки);
		ПолноеНаименованиеОрганизации = Сред(СведенияОбОрганизации.ПолноеНаименование, 1, 160);
		ЗаполнитьСвойствоXDTO(CustomerPartyType, "name", ПолноеНаименованиеОрганизации, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(CustomerPartyType, "inn", СведенияОбОрганизации.ИНН, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(CustomerPartyType, "kpp", СведенияОбОрганизации.КПП, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Sender, "Customer", CustomerPartyType, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Packet, "Sender", Sender, Истина, ТекстОшибки);
		
		Recipient = ОбъектТипаCML(Фабрика, "ParticipantType", ПространствоИмен);
		BankPartyType = ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(BankPartyType, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(BankPartyType, "name", РеквизитыБанка.Наименование, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Recipient, "Bank", BankPartyType, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Packet, "Recipient", Recipient, Истина, ТекстОшибки);
		
		Для каждого Строка Из Конверт.Сообщения Цикл
			
			СообщениеОбмена = Строка.Сообщение;
			ДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			ДанныеЭД.Записать(ИмяФайла);
			
			РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "ВидЭД, Идентификатор");
			
			ВидЭД = РеквизитыЭД.ВидЭД;
			
			Если РеквизитыНастройкиОбмена.СжиматьДанныеПакетаЭД Тогда
				ПотокВПамяти = Новый ПотокВПамяти();
				ЗаписьZIP = Новый ЗаписьZipФайла(ПотокВПамяти, , , , УровеньСжатияZIP.Максимальный);
				ЗаписьZIP.Добавить(ИмяФайла);
				ЗаписьZIP.Записать();
				ДанныеЭД = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
			КонецЕсли;
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайла);
			
			DocumentType = ОбъектТипаCML(Фабрика, "DocumentType", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(DocumentType, "id", РеквизитыЭД.Идентификатор, Истина, ТекстОшибки);
			Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда
				ВидЭДПакета = "10"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование Тогда
				ВидЭДПакета = "11"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
				ВидЭДПакета = "14"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД Тогда
				ВидЭДПакета = "03"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД Тогда
				ВидЭДПакета = "04"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд Тогда
				ВидЭДПакета = "05"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаЗачислениеДенежныхСредствНаСчетаСотрудников Тогда
				ВидЭДПакета = "21"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаОткрытиеСчетовПоЗарплатномуПроекту Тогда
				ВидЭДПакета = "19"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокУволенныхСотрудников Тогда
				ВидЭДПакета = "23"
			ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты Тогда
				ВидЭДПакета = "30"
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(DocumentType, "docKind", ВидЭДПакета, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(DocumentType, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);
			Если РеквизитыНастройкиОбмена.СжиматьДанныеПакетаЭД Тогда
				ЗаполнитьСвойствоXDTO(DocumentType, "compressed", Истина, , ТекстОшибки);
			КонецЕсли;
			
			data = ОбъектТипаCML(Фабрика, "DocumentType.data", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(data, "__content", ДанныеЭД, Истина, ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(DocumentType, "data", data, Истина, ТекстОшибки);
			МассивПодписей = ПодписиСообщенияОбмена(СообщениеОбмена);
			
			Для Каждого СтрокаПодписи Из МассивПодписей Цикл
				signature = ОбъектТипаCML(Фабрика, "DocumentType.signature", ПространствоИмен);
				ЗаполнитьСвойствоXDTO(signature, "signedData", СтрокаПодписи.Подпись.Получить(), Истина, ТекстОшибки);
				Если СвойстваСертификатов = Неопределено Тогда
					Сертификат = Новый СертификатКриптографии(СтрокаПодписи.Сертификат.Получить());
					ЗаполнитьСвойствоXDTO(signature, "x509SerialNumber", Сертификат.СерийныйНомер, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(signature, "x509IssuerName", Сертификат.Издатель.CN, Истина, ТекстОшибки);
				Иначе
					СвойстваСертификата = СвойстваСертификатов.Получить(СтрокаПодписи.Отпечаток);
					Если СвойстваСертификата = Неопределено Тогда
						ВызватьИсключение НСтр("ru = 'Ошибка чтения свойств сертификата'");
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(signature, "x509SerialNumber", СвойстваСертификата.СерийныйНомер, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(signature, "x509IssuerName", СвойстваСертификата.ИмяИздателя, Истина, ТекстОшибки);
				КонецЕсли;
				
				DocumentType.signature.Добавить(signature);
			КонецЦикла;
			
			Packet.Document.Добавить(DocumentType);
			
		КонецЦикла;
		
		ЗаполнитьСвойствоXDTO(Packet, "id", Строка(Конверт.Идентификатор), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Packet, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Packet, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ВерсияПрограммы = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
		ЗаполнитьСвойствоXDTO(Packet, "userAgent", ВерсияПрограммы, , ТекстОшибки);
		
		Packet.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ОбъектКонверт = Конверт.ПолучитьОбъект();
			ОбъектКонверт.ПометкаУдаления = Истина;
			ОбъектКонверт.Записать();
		Иначе
			ДвоичныеДанные = ДвоичныеДанныеИзXDTO(Фабрика, Packet, Ложь);
			СоздатьПрисоединенныйФайл(Конверт, ДвоичныеДанные);
		КонецЕсли;
		
	Исключение
		ОбъектКонверт = Конверт.ПолучитьОбъект();
		ОбъектКонверт.ПометкаУдаления = Истина;
		ОбъектКонверт.Записать();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Формирование ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки, , НастройкаОбмена);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаВходящихДанных

// Возвращает тест ошибки, полученной из банка.
//
// Параметры:
//  Ошибка - ОбъектXDTO - данные об ошибке.
// 
// Возвращаемое значение:
// Строка - подробная информация об ошибке.
//
Функция ТекстСообщенияОбОшибкеОтветаБанка(Ошибка) Экспорт
	
	ШаблонОшибки = НСтр("ru = 'Получена ошибка из банка (%1). Код ошибки %2.
						|%3%4'");
	Дата = Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
	ДопИнформация = ?(ЗначениеЗаполнено(ЗначениеСвойстваXDTO(Ошибка, "MoreInfo")), ": " + Ошибка.MoreInfo, "");
	Описание = ЗначениеСвойстваXDTO(Ошибка, "Description");
	ТекстОшибки = СтрШаблон(ШаблонОшибки, Дата, ЗначениеСвойстваXDTO(Ошибка, "Code"), Описание, ДопИнформация);
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#Область ЭлектронныеПодписи

// Добавляет отпечатки личных сертификатов с сервера
//
// Параметры:
//  МассивСертификатов - Массив - содержит Строки - отпечатки сертификатов, который необходимо дополнить.
//
Процедура ДобавитьОтпечаткиСертификатовНаСервере(МассивСертификатов) Экспорт
	
	ВыполнятьКриптооперацииНаСервере = ЭлектроннаяПодпись.СоздаватьЭлектронныеПодписиНаСервере();
	
	Если ВыполнятьКриптооперацииНаСервере Тогда
		Попытка
			МассивОтпечатковСертификатовНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
		Исключение
			МассивОтпечатковСертификатовНаСервере = Новый Массив;
		КонецПопытки;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				МассивСертификатов, МассивОтпечатковСертификатовНаСервере, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает маршрут подписания для сформированных платежных документов за последние 10 дней.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена, которая была изменена.
//
Процедура УстановитьМаршрутПодписанияПоследнихПлатежныхДокументов(НастройкаОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СообщениеОбменСБанками.Ссылка КАК Ссылка,
	               |	СообщениеОбменСБанками.ВидЭД КАК ВидЭД
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	               |	И СообщениеОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Сформирован)
	               |	И СообщениеОбменСБанками.ВидЭД В(&СписокВидовЭД)
	               |	И СообщениеОбменСБанками.Дата > &ДатаНачала";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("СписокВидовЭД", ВидыПлатежныхДокументов());
	Запрос.УстановитьПараметр("ДатаНачала", ТекущаяДатаСеанса() - 10 * 24 * 60 * 60);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОбмена = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыОбменаПоВидуЭД(НастройкаОбмена, Выборка.ВидЭД);
		Если ПараметрыОбмена.ТребуетсяПодпись И ЗначениеЗаполнено(ПараметрыОбмена.МаршрутПодписания) Тогда
			ВесМаршрута = 0;
			// Сформируем маршрут
			ЭлектронноеВзаимодействиеСлужебный.СформироватьМаршрутПодписанияЭД(
				Выборка.Ссылка, ПараметрыОбмена.МаршрутПодписания,,, ВесМаршрута);
				
			// Сформируем и запишем представление прогресса подписания
			ПредставлениеПрогрессаПодписания = ПредставлениеПрогрессаПодписания(Выборка.Ссылка, ВесМаршрута);
			
			СообщениеОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СообщениеОбменаОбъект.ПредставлениеПрогрессаПодписания = ПредставлениеПрогрессаПодписания;
			СообщениеОбменаОбъект.Состояние = Перечисления.СостоянияОбменСБанками.НаПодписи;
			СообщениеОбменаОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает данные сертификата в двоичном формате
//
// Параметры:
//  ДвоичныеДанныеСертификата - ДвоичныеДанные - двоичные данные файла сертификата в формате PEM.
// 
// Возвращаемое значение:
//    ДвоичныеДанные - данные сертификата в двоичном формате;
//    Неопределено - не удалось прочитать данные сертификата.
//
Функция ДанныеСертификатаВФорматеDER(Знач ДвоичныеДанныеСертификата) Экспорт
	
	Попытка
		// Проверка, что сертификат не в DER - формате
		ТекСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		ВозвращаемоеЗначение = ДвоичныеДанныеСертификата;
	Исключение
		ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеСертификата);
		СтрокаBase64 = ЧтениеДанных.ПрочитатьСимволы();
		СтрокаBase64 = СтрЗаменить(СтрокаBase64, "-----BEGIN CERTIFICATE-----" + Символы.ПС,""); 
		СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС + "-----END CERTIFICATE-----","");
		Попытка
			ВозвращаемоеЗначение = Base64Значение(СтрокаBase64);
		Исключение
			ВозвращаемоеЗначение = Неопределено;
			ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении данных сертификата.'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'Чтение настроек обмена с банком.'");
			ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецПопытки;

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает подписи электронного документа, прикрепленного к сообщению.
// 
// Параметры:
//    СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение.
//
// Возвращаемый параметр:
//    Массив - массив данных подписей:
//      * Структура:
//         ** Подпись - ХранилищеЗначения - содержит двоичные данные подписи.
//         ** КомуВыданСертификат - Строка - владелец сертификата.
//         ** ИмяФайлаПодписи - Строка - название файла подписи.
//         ** Сертификат - ХранилищеЗначения - двоичные данные сертификата установленной подписи.
//
Функция ПодписиСообщенияОбмена(СообщениеОбмена) Экспорт
	
	МассивВозврата = Новый Массив;
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(СообщениеОбмена, МассивФайлов);
	
	Если МассивФайлов.Количество() Тогда
		Возврат ПолучитьВсеПодписи(МассивФайлов[0]);
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

// Определяет по настройке, подписывается ли данный вид ЭД.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена;
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//
// Возвращаемое значение:
//  Булево - Истина, если документ нужно подписывать.
//
Функция ПодписыватьВидЭД(НастройкаОбмена, ВидЭД) Экспорт
	
	РеквизитыНастройкиОбмена = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыОбменаПоВидуЭД(НастройкаОбмена, ВидЭД);
	Возврат РеквизитыНастройкиОбмена.ТребуетсяПодпись;
	
КонецФункции

#КонецОбласти

#Область МетодыXDTO

// Получение типа XDTO по имени и URI пространства имен.
//
// Параметры:
//  Фабрика - ФабрикаXDTO - Фабрика типов XDTO.
//  URIПространстваИмен - Строка - URI пространства имен запрашиваемого типа.
//  Имя - Строка - Имя запрашиваемого типа. 
// 
// Возвращаемое значение:
// ТипЗначенияXDTO; ТипОбъектаXDTO; Неопределено - тип XDTO.
//
Функция ТипЗначенияCML(Фабрика, URIПространстваИмен, Имя) Экспорт
	
	Попытка
		ТипЗначения = Фабрика.Тип(URIПространстваИмен, Имя);
	Исключение
		ТипЗначения = Неопределено;
	КонецПопытки;
	
	Возврат ТипЗначения;
	
КонецФункции

// Получает объект типа CML.
//
// Параметры:
//  Фабрика - ФабрикаXDTO - Фабрика типов XDTO
//  Путь - Строка - путь к объекту
//  URIПространстваИмен - Строка - URI пространства имен запрашиваемого типа.
// 
// Возвращаемое значение:
//  ЗначениеXDTO - Значение простого типа XDTO.
//
Функция ОбъектТипаCML(Фабрика, Путь, URIПространстваИмен) Экспорт
	
	Если ТипЗнч(Путь) = Тип("Строка") Тогда
		ТипОбъекта = ТипОбъектаCML(Фабрика, URIПространстваИмен, Путь);
	Иначе
		ТипОбъекта = Путь;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = Фабрика.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

// Получает двоичные данные из объекта XDTO.
//
// Параметры:
//  Фабрика - ФабрикаXDTO - Фабрика типов XDTO, с помощью которой производится выгрузка.
//  ЭД - ЗначениеXDTO; ОбъектXDTO; Неопределено- Записываемое значение.
//  УказаниеТипа - Булево - Вариант назначения типа элемента данных XDTO, если Истина, то указание типа Явное.
//  ЛокальноеИмя - Строка - Локальное имя записываемого элемента данных.
//
// Возвращаемое значение:
//  ДвоичныеДанные - данные электронного документа.
//
Функция ДвоичныеДанныеИзXDTO(Фабрика, ЭД, УказаниеТипа = Истина, ЛокальноеИмя = Неопределено) Экспорт
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	ПотокВПамяти = Новый ПотокВПамяти();
	НоваяЗаписьXML.ОткрытьПоток(ПотокВПамяти, "UTF-8");
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	НазначениеТипа = ?(УказаниеТипа, НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное);
	Фабрика.ЗаписатьXML(НоваяЗаписьXML, ЭД, ЛокальноеИмя, , , НазначениеТипа);
	НоваяЗаписьXML.Закрыть();
	Возврат ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

// Заполняет свойство объекта XDTO.
//
// Параметры
//  ОбъектXDTO   - объект заполнения;
//  ИмяСвойства  - свойство объекта;
//  Значение     - устанавливаемое значение;
//  Обязательное - булево - признак обязательности заполнения свойства;
//  ТекстОшибки  - строка - текст ошибки в случае неудачного заполнения.
//
Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, Значение, Обязательное = Ложь, ТекстОшибки = "", УстанавливатьПустыеЗначения = Ложь) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
	Иначе
		Если Обязательное ИЛИ ЗначениеЗаполнено(Значение) ИЛИ УстанавливатьПустыеЗначения Тогда
			УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЭД

// Устанавливает новую версию электронного документа для владельца.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - Ссылка на документ базы данных, номер версии электронного документа которого надо изменить;
//  УдалятьСтаруюВерсию - Булево - признак того что необходимо удалять старую версию сообщения.
//
Процедура УстановитьНовуюВерсиюЭД(СсылкаНаОбъект, УдалятьСтаруюВерсию = Ложь) Экспорт
	
	НовЗапись = РегистрыСведений.СостоянияОбменСБанками.СоздатьМенеджерЗаписи();
	НовЗапись.СсылкаНаОбъект = СсылкаНаОбъект;
	
	Если УдалятьСтаруюВерсию Тогда
		НовЗапись.Прочитать();
		Если НовЗапись.Выбран() Тогда
			УдалитьСтаруюВерсиюСообщения(СсылкаНаОбъект);
		КонецЕсли;
		НовЗапись.СсылкаНаОбъект = СсылкаНаОбъект;
	КонецЕсли;
	
	НовЗапись.СообщениеОбмена = Документы.СообщениеОбменСБанками.ПустаяСсылка();
	НовЗапись.Состояние = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаОбъект);
	
	УстановитьПривилегированныйРежим(Истина);
	НовЗапись.Записать();
	
КонецПроцедуры

// Формирует данные для электронного документа Справка о подтверждающих документах
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ информационной базы, на основании которого формируется электронный документ;
//  НастройкиОбменаЭД - Структура - настройки обмена электронными документами
//  ДеревоДокумента - ДеревоЗначений - данные, помещаемые в электронный документ
//  СтруктураПараметров - Структура - данные, возвращаемые процедурой.
//
Процедура СформироватьСправкуОПодтверждающихДокументах(СсылкаНаОбъект, НастройкиОбменаЭД, ДеревоДокумента, СтруктураПараметров) Экспорт
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.СправкаОПодтверждающихДокументах);
	СтруктураЭД.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Идентификатор", Строка(Новый УникальныйИдентификатор));
	СтруктураЭД.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	ПечатныйНомерДокумента = "";
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("НастройкаОбмена", НастройкиОбменаЭД.НастройкаОбмена);
	СтруктураЭД.Вставить("ПрограммаБанка", НастройкиОбменаЭД.ПрограммаБанка);
	СтруктураЭД.Вставить("Подписывать", НастройкиОбменаЭД.Подписывать);
	
	СтруктураПараметров.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);

	ТекстОшибки = Неопределено;
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(ДеревоДокумента, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебный.СоединитьОшибки(ТекстОшибки);
		ШаблонСообщения = НСтр("ru = 'При формировании электронного документа для документа %1 возникла ошибка:
								|%2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект, ТекстОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ДобавитьЗначениеВДерево(ДеревоДокумента, "ИдДокумента", СтруктураЭД.Идентификатор);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкиОбменаЭД.НастройкаОбмена, "ИдентификаторОрганизации, ВерсияФормата");
	ДобавитьЗначениеВДерево(ДеревоДокумента, "ИдКлиента", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	
	ДобавитьЗначениеВДерево(ДеревоДокумента, "Номер", СтруктураЭД.НомерДокументаОтправителя);
	ДобавитьЗначениеВДерево(ДеревоДокумента, "ВерсияФормата", РеквизитыНастройкиОбмена.ВерсияФормата);
	
	АдресФайлаВоВременномХранилище = Неопределено;
	
	СформироватьСправкуОПодтверждающихДокументахСбербанк(СсылкаНаОбъект, ДеревоДокумента, АдресФайлаВоВременномХранилище);
	
	СуммаДокумента = ЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма");
	СтруктураЭД.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураЭД.Вставить("Основной", Истина);
	СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураЭД.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
	СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);

КонецПроцедуры

// Формирует данные для электронного документа Поручение на продажу валюты
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ информационной базы, на основании которого формируется электронный документ;
//  НастройкиОбменаЭД - Структура - настройки обмена электронными документами
//  ДеревоДокумента - ДеревоЗначений - данные, помещаемые в электронный документ
//  СтруктураПараметров - Структура - данные, возвращаемые процедурой.
//
Процедура СформироватьРаспоряжениеНаОбязательнуюПродажуВалюты(СсылкаНаОбъект, НастройкиОбменаЭД, ДеревоДокумента, СтруктураПараметров) Экспорт
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты);
	СтруктураЭД.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Идентификатор", Строка(Новый УникальныйИдентификатор));
	СтруктураЭД.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	ПечатныйНомерДокумента = "";
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("НастройкаОбмена", НастройкиОбменаЭД.НастройкаОбмена);
	СтруктураЭД.Вставить("ПрограммаБанка", НастройкиОбменаЭД.ПрограммаБанка);
	СтруктураЭД.Вставить("Подписывать", НастройкиОбменаЭД.Подписывать);
	
	СтруктураПараметров.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);

	ТекстОшибки = Неопределено;
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(ДеревоДокумента, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебный.СоединитьОшибки(ТекстОшибки);
		ШаблонСообщения = НСтр("ru = 'При формировании электронного документа для документа %1 возникла ошибка:
								|%2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект, ТекстОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ДобавитьЗначениеВДерево(ДеревоДокумента, "ИдДокумента", СтруктураЭД.Идентификатор);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкиОбменаЭД.НастройкаОбмена, "ИдентификаторОрганизации, ВерсияФормата");
	ДобавитьЗначениеВДерево(ДеревоДокумента, "ИдКлиента", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		
	ДобавитьЗначениеВДерево(ДеревоДокумента, "Номер", СтруктураЭД.НомерДокументаОтправителя);
	ДобавитьЗначениеВДерево(ДеревоДокумента, "ВерсияФормата", РеквизитыНастройкиОбмена.ВерсияФормата);
		
	АдресФайлаВоВременномХранилище = Неопределено;
	
	СформироватьРаспоряжениеНаОбязательнуюПродажуВалютыСбербанк(
		СсылкаНаОбъект, ДеревоДокумента, АдресФайлаВоВременномХранилище);
	
	СуммаДокумента = ЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма");
	СтруктураЭД.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураЭД.Вставить("Основной", Истина);
	СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураЭД.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
	СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
	
КонецПроцедуры

// Формирует данные для электронного документа Поручение на продажу валюты
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ информационной базы, на основании которого формируется электронный документ;
//  НастройкиОбменаЭД - Структура - настройки обмена электронными документами
//  ДеревоДокумента - ДеревоЗначений - данные, помещаемые в электронный документ
//  СтруктураПараметров - Структура - данные, возвращаемые процедурой.
//
Процедура СформироватьПоручениеНаПродажуВалюты(СсылкаНаОбъект, НастройкиОбменаЭД, ДеревоДокумента, СтруктураПараметров) Экспорт
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты);
	СтруктураЭД.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Идентификатор", Строка(Новый УникальныйИдентификатор));
	СтруктураЭД.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	ПечатныйНомерДокумента = "";
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("НастройкаОбмена", НастройкиОбменаЭД.НастройкаОбмена);
	СтруктураЭД.Вставить("ПрограммаБанка", НастройкиОбменаЭД.ПрограммаБанка);
	СтруктураЭД.Вставить("Подписывать", НастройкиОбменаЭД.Подписывать);
	
	СтруктураПараметров.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);

	ТекстОшибки = Неопределено;
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(ДеревоДокумента, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебный.СоединитьОшибки(ТекстОшибки);
		ШаблонСообщения = НСтр("ru = 'При формировании электронного документа для документа %1 возникла ошибка:
								|%2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект, ТекстОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ДобавитьЗначениеВДерево(ДеревоДокумента, "ИдДокумента", СтруктураЭД.Идентификатор);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкиОбменаЭД.НастройкаОбмена, "ИдентификаторОрганизации, ВерсияФормата");
	ДобавитьЗначениеВДерево(
		ДеревоДокумента, "ИдКлиента", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		
	ДобавитьЗначениеВДерево(
		ДеревоДокумента, "Номер", СтруктураЭД.НомерДокументаОтправителя);
	ДобавитьЗначениеВДерево(
		ДеревоДокумента, "ВерсияФормата", РеквизитыНастройкиОбмена.ВерсияФормата);
	
	АдресФайлаВоВременномХранилище = Неопределено;
	
	СформироватьПоручениеНаПродажуВалютыСбербанк(СсылкаНаОбъект, ДеревоДокумента, АдресФайлаВоВременномХранилище);

	СуммаДокумента = ЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма");
	СтруктураЭД.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураЭД.Вставить("Основной", Истина);
	СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураЭД.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
	СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);

КонецПроцедуры

// Формирует данные для электронного документа Поручение на покупку валюты
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ информационной базы, на основании которого формируется электронный документ;
//  НастройкиОбменаЭД - Структура - настройки обмена электронными документами
//  ДеревоДокумента - ДеревоЗначений - данные, помещаемые в электронный документ
//  СтруктураПараметров - Структура - данные, возвращаемые процедурой.
//
Процедура СформироватьПоручениеНаПокупкуВалюты(СсылкаНаОбъект, НастройкиОбменаЭД, ДеревоДокумента, СтруктураПараметров) Экспорт
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты);
	СтруктураЭД.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Идентификатор", Строка(Новый УникальныйИдентификатор));
	СтруктураЭД.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	ПечатныйНомерДокумента = "";
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("НастройкаОбмена", НастройкиОбменаЭД.НастройкаОбмена);
	СтруктураЭД.Вставить("ПрограммаБанка", НастройкиОбменаЭД.ПрограммаБанка);
	СтруктураЭД.Вставить("Подписывать", НастройкиОбменаЭД.Подписывать);

	СтруктураПараметров.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);

	ТекстОшибки = Неопределено;
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(ДеревоДокумента, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебный.СоединитьОшибки(ТекстОшибки);
		ШаблонСообщения = НСтр("ru = 'При формировании электронного документа для документа %1 возникла ошибка:
								|%2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект, ТекстОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ДобавитьЗначениеВДерево(ДеревоДокумента, "ИдДокумента", СтруктураЭД.Идентификатор);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкиОбменаЭД.НастройкаОбмена, "ИдентификаторОрганизации, ВерсияФормата");
	ДобавитьЗначениеВДерево(
		ДеревоДокумента, "ИдКлиента", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		
	ДобавитьЗначениеВДерево(
		ДеревоДокумента, "Номер", СтруктураЭД.НомерДокументаОтправителя);
	ДобавитьЗначениеВДерево(
		ДеревоДокумента, "ВерсияФормата", РеквизитыНастройкиОбмена.ВерсияФормата);
	
	АдресФайлаВоВременномХранилище = Неопределено;
	
	СформироватьПоручениеНаПокупкуВалютыСбербанк(СсылкаНаОбъект, ДеревоДокумента, АдресФайлаВоВременномХранилище);
	
	СуммаДокумента = ЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма");
	СтруктураЭД.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураЭД.Вставить("Основной", Истина);
	СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураЭД.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
	СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
	
КонецПроцедуры

// Формирует данные для электронного документа Поручение на перевод валюты
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ информационной базы, на основании которого формируется электронный документ;
//  НастройкиОбменаЭД - Структура - настройки обмена электронными документами
//  ДеревоДокумента - ДеревоЗначений - данные, помещаемые в электронный документ
//  СтруктураПараметров - Структура - данные, возвращаемые процедурой.
//
Процедура СформироватьПоручениеНаПереводВалюты(СсылкаНаОбъект, НастройкиОбменаЭД, ДеревоДокумента, СтруктураПараметров) Экспорт
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты);
	СтруктураЭД.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	Если НастройкиОбменаЭД.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		СтруктураЭД.Вставить("Идентификатор", Строка(Новый УникальныйИдентификатор));
	Иначе
		СтруктураЭД.Вставить("Идентификатор", СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
	КонецЕсли;
	СтруктураЭД.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	ПечатныйНомерДокумента = "";
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("НастройкаОбмена", НастройкиОбменаЭД.НастройкаОбмена);
	СтруктураЭД.Вставить("ПрограммаБанка", НастройкиОбменаЭД.ПрограммаБанка);
	СтруктураЭД.Вставить("Подписывать", НастройкиОбменаЭД.Подписывать);

	ДобавитьЗначениеВДерево(
		ДеревоДокумента, "Номер", СтруктураЭД.НомерДокументаОтправителя);

	ТекстОшибки = Неопределено;
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(ДеревоДокумента, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебный.СоединитьОшибки(ТекстОшибки);
		ШаблонСообщения = НСтр("ru = 'При формировании электронного документа для документа %1 возникла ошибка:
								|%2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект, ТекстОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ДобавитьЗначениеВДерево(ДеревоДокумента, "ИдДокумента", СтруктураЭД.Идентификатор);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкиОбменаЭД.НастройкаОбмена, "ИдентификаторОрганизации, ВерсияФормата");
	ДобавитьЗначениеВДерево(ДеревоДокумента, "ИдКлиента", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());

	ДобавитьЗначениеВДерево(ДеревоДокумента, "ВерсияФормата", РеквизитыНастройкиОбмена.ВерсияФормата);
	
	ПрограммаБанка = НастройкиОбменаЭД.ПрограммаБанка;
	
	АдресФайлаВоВременномХранилище = Неопределено;
	
	Если ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
		СформироватьПлатежноеПоручениеISO(СсылкаНаОбъект, ДеревоДокумента, АдресФайлаВоВременномХранилище);
	Иначе
		СформироватьПоручениеНаПереводВалютыСбербанк(СсылкаНаОбъект, ДеревоДокумента, АдресФайлаВоВременномХранилище);
	КонецЕсли;
	
	СуммаДокумента = ЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма");
	СтруктураЭД.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураЭД.Вставить("Основной", Истина);
	НазначениеПлатежа = ЗначениеРеквизитаВДереве(
		ДеревоДокумента, "РеквизитыПлатежа.НазначениеПлатежа");
	СтруктураЭД.Вставить("ДополнительнаяИнформация", НазначениеПлатежа);
	СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураЭД.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
	СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
	СтруктураПараметров.Вставить("Организация", НастройкиОбменаЭД.Организация);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);

КонецПроцедуры

// Формирует данные для электронного документа Платежное требование
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ информационной базы, на основании которого формируется электронный документ;
//  НастройкиОбменаЭД - Структура - настройки обмена электронными документами
//  ДеревоДокумента - ДеревоЗначений - данные, помещаемые в электронный документ
//  СтруктураПараметров - Структура - данные, возвращаемые процедурой.
//
Процедура СформироватьПлатежноеТребование(СсылкаНаОбъект, НастройкиОбменаЭД, ДеревоДокумента, СтруктураПараметров) Экспорт
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование);
	СтруктураЭД.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Идентификатор", Строка(Новый УникальныйИдентификатор));
	СтруктураЭД.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НастройкаОбмена", НастройкиОбменаЭД.НастройкаОбмена);
	СтруктураЭД.Вставить("ПрограммаБанка", НастройкиОбменаЭД.ПрограммаБанка);
	
	ПечатныйНомерДокумента = "";
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, ПечатныйНомерДокумента);
	
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	СтруктураПараметров.Вставить("Организация", НастройкиОбменаЭД.Организация);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);

	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(ДеревоДокумента, Ошибки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебный.СоединитьОшибки(Ошибки);
		ШаблонСообщения = НСтр("ru = 'При формировании электронного документа для документа %1 возникли следующие ошибки:
								|%2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект, ТекстОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ДобавитьЗначениеВДерево(ДеревоДокумента, "ИдДокумента", СтруктураЭД.Идентификатор);
		
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкиОбменаЭД.НастройкаОбмена, "ИдентификаторОрганизации, ВерсияФормата");
		
	ДобавитьЗначениеВДерево(ДеревоДокумента, "ИдКлиента", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
	
	ДобавитьЗначениеВДерево(ДеревоДокумента, "Номер", СтруктураЭД.НомерДокументаОтправителя);
	ДобавитьЗначениеВДерево(ДеревоДокумента, "ВерсияФормата", РеквизитыНастройкиОбмена.ВерсияФормата);
	
	ПрограммаБанка = НастройкиОбменаЭД.ПрограммаБанка;
	
	АдресФайлаВоВременномХранилище = Неопределено;
	СформироватьПлатежноеТребованиеAsync(СсылкаНаОбъект, ДеревоДокумента, АдресФайлаВоВременномХранилище);
	
	СтруктураЭД.Вставить("СуммаДокумента", ЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма"));
	НазначениеПлатежа = ЗначениеРеквизитаВДереве(
		ДеревоДокумента, "РеквизитыПлатежа.НазначениеПлатежа");
	СтруктураЭД.Вставить("ДополнительнаяИнформация", НазначениеПлатежа);
	СтруктураЭД.Вставить("Основной", Истина);
	СтруктураЭД.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
	СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);

КонецПроцедуры

// Формирует данные для электронного документа Платежное поручение
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ информационной базы, на основании которого формируется электронный документ;
//  НастройкиОбменаЭД - Структура - настройки обмена электронными документами
//  ДеревоДокумента - ДеревоЗначений - данные, помещаемые в электронный документ
//  СтруктураПараметров - Структура - данные, возвращаемые процедурой.
//
Процедура СформироватьПлатежноеПоручение(СсылкаНаОбъект, НастройкиОбменаЭД, ДеревоДокумента, СтруктураПараметров) Экспорт
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение);
	СтруктураЭД.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Идентификатор", Строка(Новый УникальныйИдентификатор));
	СтруктураЭД.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ПечатныйНомерДокумента = "";
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, ПечатныйНомерДокумента);
	
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("НастройкаОбмена", НастройкиОбменаЭД.НастройкаОбмена);
	СтруктураЭД.Вставить("ПрограммаБанка", НастройкиОбменаЭД.ПрограммаБанка);
	СтруктураЭД.Вставить("Подписывать", НастройкиОбменаЭД.Подписывать);
	
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(ДеревоДокумента, Ошибки);
	
	Если СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПечатныйНомерДокумента) = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Недопустимый номер документа.'");
		ПараметрыОбработкиОшибки = ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.НовыеПараметрыОшибки(СсылкаНаОбъект);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьОшибку(Ошибки, ТекстОшибки, ПараметрыОбработкиОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебный.СоединитьОшибки(Ошибки);
		ШаблонСообщения = НСтр("ru = 'При формировании электронного документа для документа %1 возникла ошибка:
									|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СсылкаНаОбъект, ТекстОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ДобавитьЗначениеВДерево(ДеревоДокумента, "ИдДокумента", СтруктураЭД.Идентификатор);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкиОбменаЭД.НастройкаОбмена, "ИдентификаторОрганизации, ВерсияФормата");
	ДобавитьЗначениеВДерево(
		ДеревоДокумента, "ИдКлиента", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	
	ДобавитьЗначениеВДерево(ДеревоДокумента, "Номер", СтруктураЭД.НомерДокументаОтправителя);
	ДобавитьЗначениеВДерево(ДеревоДокумента, "ВерсияФормата", РеквизитыНастройкиОбмена.ВерсияФормата);
	
	ПрограммаБанка = НастройкиОбменаЭД.ПрограммаБанка;
	
	АдресФайлаВоВременномХранилище = Неопределено;
	
	Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		СформироватьПлатежноеПоручениеСбербанк(
			СсылкаНаОбъект, ДеревоДокумента, АдресФайлаВоВременномХранилище, НастройкиОбменаЭД.Подписывать);
	ИначеЕсли ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен
		ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
		СформироватьПлатежноеПоручениеAsync(СсылкаНаОбъект, ДеревоДокумента, АдресФайлаВоВременномХранилище);
	Иначе
		СформироватьПлатежноеПоручениеCML(СсылкаНаОбъект, ДеревоДокумента, АдресФайлаВоВременномХранилище);
	КонецЕсли;
	
	СуммаДокумента = ЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма");
	СтруктураЭД.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураЭД.Вставить("Основной", Истина);
	НазначениеПлатежа = ЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.НазначениеПлатежа");
	СтруктураЭД.Вставить("ДополнительнаяИнформация", НазначениеПлатежа);
	СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураЭД.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
	СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		СтруктураПараметров.Вставить("Организация", НастройкиОбменаЭД.Организация);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	
КонецПроцедуры

// Функция формирует документы сообщений обмена
//
// Параметры:
//  МассивОбъектов - массив ссылок на объекты, для которых нужно создать сообщения обмена;
//  ПараметрыОбмена - соответствие, содержащая настройки обмена для объектов.
//
Функция СформироватьСообщенияОбмена(МассивОбъектов, ПараметрыОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтруктурОбмена = СформироватьXMLФайлыДокументов(МассивОбъектов, ПараметрыОбмена);
	МассивСформированныхСообщений = Новый Массив;
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
	
		СообщениеОбмена = Неопределено;
		
		СохранитьСообщениеОбмена(СтруктураОбмена.СтруктураЭД, СообщениеОбмена);
		Если СтруктураОбмена.СтруктураЭД.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
			И СтруктураОбмена.СтруктураЭД.Подписывать Тогда
			
			Дайджест = ДайджестСбербанк(СтруктураОбмена.СтруктураЭД.ВидЭД,
				СтруктураОбмена.СтруктураЭД.АдресФайлаВоВременномХранилище, СтруктураОбмена.СтруктураЭД.НастройкаОбмена);
			АдресХранилища = ПоместитьВоВременноеХранилище(Base64Значение(Дайджест));
			
			ПараметрыСообщения = Новый Структура;
			ПараметрыСообщения.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
			ПараметрыСообщения.Вставить("НастройкаОбмена", СтруктураОбмена.СтруктураЭД.НастройкаОбмена);
			ПараметрыСообщения.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
			ПараметрыСообщения.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
			ПараметрыСообщения.Вставить("СообщениеРодитель", СообщениеОбмена);
			ПараметрыСообщения.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
			СообщениеДайджест = Неопределено;
			СохранитьСообщениеОбмена(ПараметрыСообщения, СообщениеДайджест);
		КонецЕсли;

		МассивСформированныхСообщений.Добавить(СообщениеОбмена);
		
	КонецЦикла;
	
	Возврат МассивСформированныхСообщений;
	
КонецФункции

// Возвращает дерево с данными файла.
//
// Параметры:
//  ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа.
//  ДанныеФайла - ДвоичныеДанные - содержимое файла.
//
// Возвращаемое значение:
//  Структура - данные дерева.
//
Функция СформироватьДеревоРазбора(ВидЭД, ДанныеФайла) Экспорт
	
	ДеревоРазбора = ЭлектронноеВзаимодействиеСлужебный.ИнициализироватьДеревоРазбора();
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(
		ДеревоРазбора, "ОбменСБанками");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Результат = ПрочитатьФайлПоСхеме(ВидЭД, ДанныеФайла, ДеревоРазбора, НовыйЭД);
	
	Если НЕ Результат Тогда // ошибка разбора ЭД
		Возврат Неопределено;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти("ОбменСБанками", "ТипОбъекта"); // раздел ОбменСБанками
	СтрокаОбъекта = НайденнаяСтрока.Строки[0];
	
	Возврат Новый Структура("ДеревоРазбора, СтрокаОбъекта", ДеревоРазбора, СтрокаОбъекта);
	
	
КонецФункции

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр НастройкаОбмена, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных по данной настройке.
//
// Параметры:
//  МассивОтпечатков - массив - содержит строки отпечатков сертификатов, установленных в хранилище на Клиенте/Сервере
//    (в зависимости от настроек работы с криптографией).
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками, настройкаОбмена, список сертификатов
//   по которой требуется получить.
//
// Возвращаемое значение - таблица значений.
//
Функция ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатков, НастройкаОбмена = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Новый ТаблицаЗначений;
	ЗапросПоСертификатам = Новый Запрос;
	Если ЗначениеЗаполнено(НастройкаОбмена) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сертификаты.Ссылка,
		|	НЕОПРЕДЕЛЕНО КАК ПарольСертификата,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	Сертификаты.Отпечаток
		|ИЗ
		|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|			ПО Сертификаты.Ссылка = ВидыЭДЭП.СертификатЭП
		|		ПО НастройкиОбменаСертификаты.СертификатЭП = Сертификаты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
		|		ПО НастройкиОбменаСертификаты.Ссылка = НастройкиОбменСБанками.Ссылка
		|ГДЕ
		|	НастройкиОбменСБанками.Ссылка = &НастройкаОбмена
		|	И Сертификаты.Отпечаток В(&МассивОтпечатков)
		|	И &ПроверкаПользователя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сертификаты.Ссылка,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	Сертификаты.Отпечаток
		|ИЗ
		|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|			ПО Сертификаты.Ссылка = ВидыЭДЭП.СертификатЭП
		|		ПО НастройкиОбменаСертификаты.СертификатЭП = Сертификаты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
		|		ПО НастройкиОбменаСертификаты.Ссылка = НастройкиОбменСБанками.Ссылка
		|ГДЕ
		|	НастройкиОбменСБанками.Ссылка = &НастройкаОбмена
		|	И НастройкиОбменСБанками.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн)
		|	И &ПроверкаПользователя";
		ЗапросПоСертификатам.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сертификаты.Ссылка,
		|	НЕОПРЕДЕЛЕНО КАК ПарольСертификата,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	Сертификаты.Отпечаток
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|ГДЕ
		|	НЕ Сертификаты.Отозван
		|	И Сертификаты.Отпечаток В(&МассивОтпечатков)
		|	И &ПроверкаПользователя";
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПроверкаПользователя",
			"Сертификаты.Пользователь В (&ТекущийПользователь, &ПустойПользователь, &ПользовательНеУказан)");
		ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		ЗапросПоСертификатам.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		ЗапросПоСертификатам.УстановитьПараметр("ПользовательНеУказан",  Пользователи.СсылкаНеуказанногоПользователя());
	КонецЕсли;
	
	ЗапросПоСертификатам.Текст = ТекстЗапроса;
	
	ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков", МассивОтпечатков);
	ВозвращаемоеЗначение = ЗапросПоСертификатам.Выполнить().Выгрузить();

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обработчик события "ПередЗаписью" владельцев электронных документов.
//
// Параметры:
//  Источник        - Объект - владелец присоединенного файла.
//  Отказ           - Булево - признак отказа от записи.
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи владельца электронного документа.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения владельца электронного документа.
//
Процедура ОбменСБанкамиВладелецЭДПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции("ИспользоватьОбменСБанками") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПисьмоОбменСБанками") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", Истина);
	КонецЕсли;
	
	// ЭД делаем только когда есть действующая настройка обмена
	Если Не Источник.ДополнительныеСвойства.Свойство("ЕстьНастройкаОбменСБанками")
			ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьНастройкаОбменСБанками Тогда
		
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
		
		Если ОпределитьНастройкиОбменаЭД(ПараметрыЭД) = Неопределено Тогда // нет действующей настройки обмена
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЕстьНастройкаОбменСБанками", Истина);
	
	ПризнакИзменения = Источник.ЭтоНовый();
	Если Не ПризнакИзменения Тогда
		Состояние = СостояниеЭД(Источник.Ссылка);
	КонецЕсли;
	ПризнакУчастияВОбмене = Истина;
	ЭлектронноеВзаимодействиеПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокумента(
		Источник, ПризнакИзменения, Состояние, ПризнакУчастияВОбмене, Отказ);
		
	Если Отказ Тогда
		Если ПризнакИзменения Тогда
			ТекстСообщения = НСтр("ru = 'Существует актуальный электронный документ. Запрещено редактирование ключевых реквизитов документа.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Источник.ДополнительныеСвойства.Вставить("ЗарегистрироватьОбъектОбменСБанками", ПризнакИзменения И ПризнакУчастияВОбмене);
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" владельцев электронных документов.
//
// Параметры:
//  Источник - объект - владелец присоединенного файла,
//  Отказ    - булево - признак отказа от записи.
//
Процедура УстановитьСостояниеПриЗаписиОбъектаИБ(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение", ГрупповоеПерепроведение)
		И ГрупповоеПерепроведение = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменСБанками") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПисьмоОбменСБанками") Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЕстьНастройкаОбменСБанками")
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьНастройкаОбменСБанками Тогда
		ПроверитьНаличиеИУдалитьСостояниеДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьОбъектОбменСБанками")
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЗарегистрироватьОбъектОбменСБанками Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьНовуюВерсиюЭД(Источник.Ссылка);
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника;
//  ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа.
//
// Возвращаемое значение:
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//  настроек обмена ЭД.
//
Функция ЗаполнитьПараметрыЭДПоИсточнику(Источник, ВидЭД = Неопределено) Экспорт
	
	ПараметрыЭД = СтруктураПараметровЭД();
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("СправочникСсылка.НастройкиОбменСБанками") Тогда
		ПараметрыЭД.ВидЭД = ВидЭД;
		РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Банк");
		ПараметрыЭД.Банк = РеквизитыНастройкиОбмена.Банк;
		ПараметрыЭД.Организация = РеквизитыНастройкиОбмена.Организация;
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПисьмоОбменСБанками") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.Письмо;
		РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Банк");
		ПараметрыЭД.Банк = РеквизитыПисьма.Банк;
		ПараметрыЭД.Организация = РеквизитыПисьма.Организация;
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ПисьмоОбменСБанками") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.Письмо;
		ПараметрыЭД.Банк = Источник.Банк;
		ПараметрыЭД.Организация = Источник.Организация;
	Иначе
		ПараметрыЭД.ВидЭД = ВидЭД;
		ОбменСБанкамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД);
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

// Получает массив ожидаемых статусов электронного документа.
//
// Параметры:
//  НастройкиОбмена - Структура - параметры обмена. Содержит поля:
//    * Направление - ПеречислениеСсылка.НаправленияЭД - направление электронного документа;
//    * ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа;
//    * ИспользоватьПодпись - Булево - признак использования электронной подписи;
//    * ИспользуетсяНесколькоПодписей - Булево - при подписании используется более одной подписи;
//    * ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - программа банка;
//    * Статус - ПеречислениеСсылка.СтатусыОбменСБанками - текущий статус электронного документа.
// 
// Возвращаемое значение:
// Массив - перечень ожидаемых статусов электронных документов:
//   * ПеречислениеСсылка.СтатусыОбменСБанками - статус электронного документа.
//
Функция МассивСтатусовЭД(НастройкиОбмена) Экспорт
	
	МассивСтатусов = Новый Массив;
	
	Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
			МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Сформирован);
			Если НастройкиОбмена.ИспользоватьПодпись Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Подписан);
			КонецЕсли;
			Если НастройкиОбмена.ПрограммаБанка <> Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
			КонецЕсли;
			МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Отправлен);
			МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Доставлен);
		Иначе
			МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Сформирован);
			Если НастройкиОбмена.Статус = Перечисления.СтатусыОбменСБанками.ЧастичноПодписан Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
			КонецЕсли;
			Если НастройкиОбмена.ИспользоватьПодпись Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Подписан);
			КонецЕсли;
			Если НастройкиОбмена.ПрограммаБанка <> Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
			КонецЕсли;
			
			МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Отправлен);
			
			МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Доставлен);
			
			Если НастройкиОбмена.Статус = Перечисления.СтатусыОбменСБанками.НеПодтвержден Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.НеПодтвержден);
			КонецЕсли;
			
			Если НастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК
				ИЛИ НастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен
				ИЛИ НастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Принят);
			КонецЕсли;
			
			Если НастройкиОбмена.Статус = Перечисления.СтатусыОбменСБанками.Приостановлен Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Приостановлен);
			КонецЕсли;
			
			МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Исполнен);
			Если ВидыПлатежныхДокументов().Найти(НастройкиОбмена.ВидЭД) <> Неопределено Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Подтвержден);
			КонецЕсли;
	
		КонецЕсли;
	Иначе
		МассивСтатусов.Добавить(Перечисления.СтатусыОбменСБанками.Получен);
	КонецЕсли;

	Возврат МассивСтатусов;
	
КонецФункции

// Находит существующий или создает новый элемент справочника СертификатыКлючейЭлектроннойПодписиИШифрования.
//
// Параметры:
//  ДанныеСертификата - ДвоичныеДанные, Строка - содержимое сертификата;
//  Организация - СправочникСсылка.Организации - организация;
//  ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - программа банка;
//  Параметры - Структура - ДополнительныеДанныеСертификата.
//
// Возвращаемое значение:
//  СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на новый сертификат.
//
Функция НайтиСоздатьСертификатВнешнегоМодуля(ДанныеСертификата, Организация, ПрограммаБанка, Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка,
	|	СведенияОСертификатахОбменСБанками.ПрограммаБанка КАК ПрограммаБанка,
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСертификатахОбменСБанками КАК СведенияОСертификатахОбменСБанками
	|		ПО (СведенияОСертификатахОбменСБанками.СертификатЭП = СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка)
	|ГДЕ
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток = &Отпечаток";

	Запрос.УстановитьПараметр("Отпечаток", Параметры.Отпечаток);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ПрограммаБанка = Выборка.ПрограммаБанка Тогда
		Если Выборка.ПометкаУдаления Тогда
			СертификатОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СертификатОбъект.УстановитьПометкуУдаления(Ложь);
			СертификатОбъект.Записать();
		КонецЕсли;
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	СертификатОписаниеДанных = Новый ТаблицаЗначений;
	СертификатОписаниеДанных.Колонки.Добавить("Свойство");
	СертификатОписаниеДанных.Колонки.Добавить("Значение");
	
	СертификатОбъект = Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.СоздатьЭлемент();
	СертификатОбъект.ДанныеСертификата = Новый ХранилищеЗначения(ДанныеСертификата);
	СертификатОбъект.Отпечаток = Параметры.Отпечаток;
	СертификатОбъект.Добавил = Пользователи.ТекущийПользователь();
	
	СертификатОбъект.Организация = Организация;
	ШаблонНаименования = НСтр("ru = '%1, до %2'");
	ДатаСтрокой = Формат(Параметры.ДатаОкончания, "ДФ=MM.yyyy");
	СертификатОбъект.Наименование = СтрШаблон(ШаблонНаименования, Параметры.ВладелецФИО, ДатаСтрокой);
	
	СертификатОбъект.Подписание = Истина;
	
	ОбновитьЗначение(СертификатОбъект.КомуВыдан, Параметры.ВладелецФИО);
	ОбновитьЗначение(СертификатОбъект.ДействителенДо, Параметры.ДатаОкончания);
	
	ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(Параметры.ВладелецФИО);
	
	ОбновитьЗначение(СертификатОбъект.Фамилия, ФИО.Фамилия, Истина);
	ОбновитьЗначение(СертификатОбъект.Имя, ФИО.Имя, Истина);
	ОбновитьЗначение(СертификатОбъект.Отчество, ФИО.Отчество, Истина);
	ОбновитьЗначение(СертификатОбъект.Должность, Параметры.ВладелецДолжность, Истина);
	
	СертификатОбъект.Записать();
	
	МенеджерЗаписи = РегистрыСведений.СведенияОСертификатахОбменСБанками.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СертификатЭП = СертификатОбъект.Ссылка;
	МенеджерЗаписи.ПрограммаБанка = ПрограммаБанка;
	МенеджерЗаписи.Записать();
	
	Возврат СертификатОбъект.Ссылка;
	
КонецФункции

// Запускается по регламентному заданию ЗагрузкаСпискаБанковОбменСБанками.
// Загружает актуальный список банков в константу.
//
Процедура ЗагрузитьСписокDirectBank() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаСпискаБанковОбменСБанками);
	
	ЗагрузитьСписокБанковССайта();

КонецПроцедуры

// Создает настройку обмена с банком в фоновом процессе.
//
// Параметры:
//  СтруктураПараметров - структура, содержит реквизиты настройки обмена с банком:
//      * Организация - СправочникСсылка.Организации - для какой организации создается настройка обмена;
//      * Банк - ОпределяемыеТипы.БанкОбменСБанками - с каким банком будет производится обмен;
//      * АдресСервера - строка - адрес сервера банка;
//      * АутентификацияПоСертификату - Булево - признак аутентификации на сервере банка по сертификату;
//      * ВнешнийМодуль - Строка - адрес временного хранилища, содержащий данные файла внешнего модуля;
//      * ИдентификаторОрганизации - Строка - идентификатор организации на сервере банка;
//      * ИмяПользователя - Строка - логин пользователя;
//      * ИспользуетсяКриптография - Булево - признак использования электронных подписей;
//      * ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - используемая программа;
//      * РесурсВходящихДокументов - Строка - ресурс для получения выписки;
//      * РесурсИсходящихДокументов - Строка - ресурс для отправки платежных документов;
//      * СертификатБанка - Строка - адрес временного хранилища, содержащий данные сертификата банка;
//      * Сертификаты - Массив - клиентские сертификаты;
//         * СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат подписи;
//  АдресХранилища - строка, содержит адрес хранилища, содержащий ссылку на настройку обмена.
//
Процедура СоздатьНастройкуОбмена(СтруктураПараметров, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкаОбменаСсылка = ОбменСБанкамиСлужебныйВызовСервера.НастройкаОбмена(
		СтруктураПараметров.Организация, СтруктураПараметров.Банк, Ложь, Истина);
		
	Если НЕ ЗначениеЗаполнено(НастройкаОбменаСсылка) Тогда
		НастройкаОбменаОбъект = Справочники.НастройкиОбменСБанками.СоздатьЭлемент();
	Иначе
		НастройкаОбменаОбъект = НастройкаОбменаСсылка.ПолучитьОбъект();
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(НастройкаОбменаОбъект, СтруктураПараметров, "Организация, Банк, ИспользуетсяКриптография,
		|ПрограммаБанка, АдресСервера, ИдентификаторОрганизации, ИмяПользователя, АутентификацияПоСертификату,
		|РесурсВходящихДокументов, РесурсИсходящихДокументов, ИмяВнешнегоМодуля, Недействительна, ВерсияФормата,
		|НаименованиеБанка, НомерПодразделенияБанка, ДополнительнаяОбработка");
		
	Если СтруктураПараметров.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
		И СтруктураПараметров.ИспользуетсяКриптография Тогда
		Попытка 
			ДанныеСертификата = ДанныеСертификатаВФорматеDER(СтруктураПараметров.СертификатСбербанка);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
		НастройкаОбменаОбъект.СертификатБанка = Новый ХранилищеЗначения(ДанныеСертификата);
	ИначеЕсли СтруктураПараметров.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен
		И НастройкаОбменаОбъект.АутентификацияПоСертификату Тогда
		НастройкаОбменаОбъект.ИспользуетсяКриптография = Истина;
	КонецЕсли;
	
	НастройкаОбменаОбъект.СертификатыПодписейОрганизации.Очистить();
	
	Для Каждого Сертификат Из СтруктураПараметров.Сертификаты Цикл
		НовСтрока = НастройкаОбменаОбъект.СертификатыПодписейОрганизации.Добавить();
		НовСтрока.СертификатЭП = Сертификат;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.СертификатАутентификации)
		И СтруктураПараметров.Сертификаты.Найти(СтруктураПараметров.СертификатАутентификации) = Неопределено Тогда
		НовСтрока = НастройкаОбменаОбъект.СертификатыПодписейОрганизации.Добавить();
		НовСтрока.СертификатЭП = СтруктураПараметров.СертификатАутентификации;
	КонецЕсли;
	
	ЗаполнитьВидыЭДДоступнымиЗначениями(НастройкаОбменаОбъект);
	
	// Сгенерируем маршруты подписания для документов, которые подписываются более чем одной подписью.
	Если СтруктураПараметров.ИспользуетсяКриптография Тогда
		ВидыДокументовСНесколькимиПодписями = ОбменСБанкамиСлужебныйПовтИсп.ВидыДокументовПодписываемыхПоМаршруту();
		
		Для Каждого СтрокаВидаЭД Из НастройкаОбменаОбъект.ИсходящиеДокументы Цикл
			Если Не СтрокаВидаЭД.ИспользоватьЭП Тогда
				Продолжить;
			КонецЕсли;
			ТекущийВидЭД = СтрокаВидаЭД.ИсходящийДокумент;
			Если ВидыДокументовСНесколькимиПодписями.Найти(ТекущийВидЭД) <> Неопределено Тогда
				МаршрутОбъект = НайтиСоздатьМаршрутПодписания(НастройкаОбменаОбъект, ТекущийВидЭД);
				МаршрутОбъект.Наименование = СтрШаблон("%1 - %2 (%3)", НастройкаОбменаОбъект.Организация, 
					НастройкаОбменаОбъект.Банк, ТекущийВидЭД);
				МаршрутОбъект.СхемаПодписания = Перечисления.СхемыПодписанияЭД.ПоПравилам;
				МаршрутОбъект.Организация = НастройкаОбменаОбъект.Организация;
				ДеревоТребований = ЭлектронноеВзаимодействиеСлужебный.ПустоеДеревоТребованийКПодписанию();
				КорневаяСтрока = ДеревоТребований.Строки.Добавить();
				КорневаяСтрока.Требование = Перечисления.ТребованияКПодписаниюЭД.И;
				Для Каждого СтрокаТЧ Из НастройкаОбменаОбъект.СертификатыПодписейОрганизации Цикл
					СтрокаПодписанта = КорневаяСтрока.Строки.Добавить();
					СтрокаПодписанта.Сертификат = СтрокаТЧ.СертификатЭП;
				КонецЦикла;
				ЭлектронноеВзаимодействиеСлужебный.ЗаполнитьТаблицуТребованийКПодписаниюПоДереву(
					МаршрутОбъект.ТаблицаТребований, ДеревоТребований);
				МаршрутОбъект.КлючАвтоматическойНастройки = Справочники.НастройкиОбменСБанками.КлючАвтоматическойНастройки(
					НастройкаОбменаОбъект, ТекущийВидЭД);
				МаршрутОбъект.Записать();
				
				СтрокаВидаЭД.МаршрутПодписания = МаршрутОбъект.Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкаОбменаОбъект.ПометкаУдаления = Ложь;
	
	ШаблонНаименования = "%1 - %2";
	НастройкаОбменаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонНаименования, СтруктураПараметров.Организация, СтруктураПараметров.Банк);
		
	Если НастройкаОбменаОбъект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен
		И Не ЗначениеЗаполнено(НастройкаОбменаОбъект.ВерсияФормата) Тогда
		НастройкаОбменаОбъект.ВерсияФормата = ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;

	Попытка
		НастройкаОбменаОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка создания настройки обмена: %1'");
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Создание настройки обмена'");
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, НастройкаОбменаСсылка);
		Возврат;
	КонецПопытки;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НастройкаОбмена", НастройкаОбменаОбъект.Ссылка);
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	
	СохранитьПараметрыОбмена(НастройкаОбменаОбъект.Ссылка);
	
	// Заполнение справочника ТипыПисемОбменСБанками для Сбербанка
	Если НастройкаОбменаОбъект.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТипыПисемИзБанка.Представление КАК Представление,
		               |	ТипыПисемИзБанка.Шаблон КАК Шаблон
		               |ПОМЕСТИТЬ ТипыПисемИзБанка
		               |ИЗ
		               |	&ТипыПисемИзБанка КАК ТипыПисемИзБанка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТипыПисемОбменСБанками.Ссылка КАК Ссылка,
		               |	ТипыПисемОбменСБанками.Наименование КАК Наименование,
		               |	ТипыПисемОбменСБанками.Недействителен КАК Недействителен,
		               |	ТипыПисемОбменСБанками.Шаблон КАК Шаблон
		               |ПОМЕСТИТЬ ВсеТипыПисемПоНастройке
		               |ИЗ
		               |	Справочник.ТипыПисемОбменСБанками КАК ТипыПисемОбменСБанками
		               |ГДЕ
		               |	ТипыПисемОбменСБанками.Владелец = &Владелец
		               |	И ТипыПисемОбменСБанками.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТипыПисемИзБанка.Представление КАК Представление,
		               |	ТипыПисемИзБанка.Шаблон КАК Шаблон,
		               |	ВсеТипыПисемПоНастройке.Ссылка КАК Ссылка,
		               |	ВсеТипыПисемПоНастройке.Наименование КАК Наименование,
		               |	ВсеТипыПисемПоНастройке.Недействителен КАК Недействителен,
		               |	ВсеТипыПисемПоНастройке.Шаблон КАК ШаблонВИБ
		               |ИЗ
		               |	ТипыПисемИзБанка КАК ТипыПисемИзБанка
		               |		ПОЛНОЕ СОЕДИНЕНИЕ ВсеТипыПисемПоНастройке КАК ВсеТипыПисемПоНастройке
		               |		ПО ТипыПисемИзБанка.Представление = ВсеТипыПисемПоНастройке.Наименование";
		
		Запрос.УстановитьПараметр("Владелец", НастройкаОбменаОбъект.Ссылка);
		Запрос.УстановитьПараметр("ТипыПисемИзБанка", СтруктураПараметров.ТипыПисемСбербанк);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				Если ЗначениеЗаполнено(Выборка.Представление) Тогда
					Если Выборка.Шаблон <> Выборка.ШаблонВИБ ИЛИ Выборка.Недействителен Тогда
						ТипПисьмаОбъект = Выборка.Ссылка.ПолучитьОбъект();
						ТипПисьмаОбъект.Шаблон = Выборка.Шаблон;
						ТипПисьмаОбъект.Недействителен = Ложь;
						ТипПисьмаОбъект.Записать();
					КонецЕсли;
				Иначе
					ТипПисьмаОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ТипПисьмаОбъект.Недействителен = Истина;
					ТипПисьмаОбъект.Записать();
				КонецЕсли;
			Иначе
				ТипПисьмаОбъект = Справочники.ТипыПисемОбменСБанками.СоздатьЭлемент();
				ТипПисьмаОбъект.Владелец = НастройкаОбменаОбъект.Ссылка;
				ТипПисьмаОбъект.Наименование = Выборка.Представление;
				ТипПисьмаОбъект.Шаблон = Выборка.Шаблон;
				ТипПисьмаОбъект.Направление = Перечисления.НаправленияЭД.Исходящий;
				ТипПисьмаОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Создает новую настройку прямого обмена с банком.
//
// Параметры:
//    НастройкиЗаполнения - Строка - адрес во временном хранилище, содержащий файл настроек;
//    Организация - ОпределяемыйТип.Организация - ссылка на организацию, для которой загружаются настройки
//    Недействительна - Булево - позволяет отключить настройку в целях дальнейшего тестирования;
//    ЛокальныйФайл - Булево - признак, что пользователь выбрал файл с диска.
//    МассивСертификатов - Массив, Неопределено - если создана настройка обмена через ВК,
//        то в параметре возвращаются данные сертификатов подписи типа ДвоичныеДанные;
//    ЗагружатьВК - Булево - если Истина, что ВК будет загружена с сервера поставщика.
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком, если она уже существует.
//
Функция СоздатьНастройкуОбменаИзФайла(НастройкиЗаполнения, Организация, Недействительна, ЛокальныйФайл, МассивСертификатов = Неопределено, ЗагружатьВК = Истина, НастройкаОбмена = Неопределено) Экспорт
	
	ЭД = XDTOДанныеФайлаНастроек(НастройкиЗаполнения, ЛокальныйФайл);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаименованиеОрганизации = "";
	
	СтруктураПоискаОрганизации = Новый Структура;
	ИННОрганизации = ЭД.Recipient.inn;
	Если ЗначениеЗаполнено(ИННОрганизации) Тогда
		СтруктураПоискаОрганизации.Вставить("ИНН", ИННОрганизации);
	КонецЕсли;
	
	КППОрганизации = ЭД.Recipient.kpp;
	
	Если ЗначениеЗаполнено(КППОрганизации) Тогда
		СтруктураПоискаОрганизации.Вставить("КПП", КППОрганизации);
	КонецЕсли;
	НаименованиеОрганизации = ЭД.Recipient.name;
	Если ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
		СтруктураПоискаОрганизации.Вставить("Наименование", НаименованиеОрганизации);
	КонецЕсли;
	
	Если СтруктураПоискаОрганизации.Количество() > 0 Тогда
		СсылкаНаОрганизацию = ЭлектронноеВзаимодействие.НайтиСсылку(
			"Организации", , СтруктураПоискаОрганизации);
	ИначеЕсли НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru = 'В файле настроек нет информации об организации.
									|Обратитесь в свой банк.'");
		ВызватьИсключение ТекстСообщения;
	Иначе
		СсылкаНаОрганизацию = Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена организация по реквизитам: %1%2%3'");
		Если СтруктураПоискаОрганизации.Свойство("ИНН") Тогда
			ТекстИНН = Символы.ПС + НСтр("ru = 'ИНН: %1'");
			ТекстИНН = СтрШаблон(ТекстИНН, СтруктураПоискаОрганизации.ИНН);
		Иначе
			ТекстИНН = "";
		КонецЕсли;
		Если СтруктураПоискаОрганизации.Свойство("КПП") Тогда
			ТекстКПП = Символы.ПС + НСтр("ru = 'КПП: %1'");
			ТекстКПП = СтрШаблон(ТекстКПП, СтруктураПоискаОрганизации.КПП);
		Иначе
			ТекстКПП = "";
		КонецЕсли;
		Если СтруктураПоискаОрганизации.Свойство("Наименование") Тогда
			ТекстНаименование = Символы.ПС + НСтр("ru = 'Наименование: %1'");
			ТекстНаименование = СтрШаблон(
				ТекстНаименование, СтруктураПоискаОрганизации.Наименование);
		Иначе
			ТекстНаименование = "";
		КонецЕсли;
		ТекстСообщения = СтрШаблон(ТекстСообщения, ТекстИНН, ТекстКПП, ТекстНаименование);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	НаименованиеБанка = "";
	СтруктураПоискаБанка = Новый Структура;
	БИК = ЭД.Sender.bic;
	СтруктураПоискаБанка.Вставить("Код", БИК);
	НаименованиеБанка = ЭД.Sender.name;
	СтруктураПоискаБанка.Вставить("Наименование", НаименованиеБанка);
	
	СсылкаНаБанк = ЭлектронноеВзаимодействие.НайтиСсылку("Банки", БИК, СтруктураПоискаБанка);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаБанк) Тогда
		ТекстСообщения = НСтр("ru = 'Не найден банк по реквизитам: %1%2'");
		Если СтруктураПоискаБанка.Свойство("Код") Тогда
			ТекстБИК = Символы.ПС + НСтр("ru = 'БИК: %1'");
			ТекстБИК = СтрШаблон(ТекстБИК, СтруктураПоискаБанка.Код);
		Иначе
			ТекстБИК = "";
		КонецЕсли;
		Если СтруктураПоискаБанка.Свойство("Наименование") Тогда
			ТекстНаименование = Символы.ПС + НСтр("ru = 'Наименование: %1'");
			ТекстНаименование = СтрШаблон(
				ТекстНаименование, СтруктураПоискаБанка.Наименование);
		Иначе
			ТекстНаименование = "";
		КонецЕсли;
		ТекстСообщения = СтрШаблон(ТекстСообщения, ТекстБИК, ТекстНаименование);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗаписыватьОбъект = Истина;
	Если ЗначениеЗаполнено(НастройкаОбмена) Тогда
		СуществующаяНастройкаОбмена = НастройкаОбмена;
	Иначе
		СуществующаяНастройкаОбмена = ОбменСБанками.НастройкаОбмена(СсылкаНаОрганизацию, СсылкаНаБанк, Ложь);
	КонецЕсли;
	Если ЗначениеЗаполнено(СуществующаяНастройкаОбмена) Тогда
		Объект = СуществующаяНастройкаОбмена.ПолучитьОбъект();
	Иначе
		Объект = Справочники.НастройкиОбменСБанками.СоздатьЭлемент();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
		НаименованиеОрганизации = СсылкаНаОрганизацию;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеБанка) Тогда
		НаименованиеБанка = СсылкаНаБанк;
	КонецЕсли;
	
	ЗаполненыНаименования = ЗначениеЗаполнено(НаименованиеОрганизации) И ЗначениеЗаполнено(НаименованиеБанка);
	
	Объект.Наименование = Строка(НаименованиеОрганизации) + ?(ЗаполненыНаименования, " - ", "")
		+ Строка(НаименованиеБанка);
	Объект.Организация = СсылкаНаОрганизацию;
	Объект.Банк = СсылкаНаБанк;
	
	Если НЕ ЭД.Data.Свойства().Получить("CryptoParameters") = Неопределено И ЭД.Data.CryptoParameters <> Неопределено
		И НЕ ЭД.Data.CryptoParameters.Свойства().Получить("URLAddinInfo") = Неопределено
		И ЗначениеЗаполнено(ЭД.Data.CryptoParameters.URLAddinInfo) Тогда
		
		Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК;
		
		ВремФайл = ПолучитьИмяВременногоФайла("xml");
		ПараметрыПолучения = Новый Структура;
		ПараметрыПолучения.Вставить("ПутьДляСохранения", ВремФайл);
		
		Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(
			ЭД.Data.CryptoParameters.URLAddinInfo, ПараметрыПолучения);
		
		Если Результат.Статус Тогда
			ПараметрыВК = Справочники.ДополнительныеВнешниеКомпоненты.ПараметрыВК(ВремФайл);
			
			ФайловаяСистема.УдалитьВременныйФайл(ВремФайл);
			
			Если ПараметрыВК <> Неопределено Тогда
				
				ДанныеВКИБ = ДополнительныеВнешниеКомпонентыВызовСервера.ПараметрыВнешнейКомпоненты(ПараметрыВК.ИмяМодуля);
				
				Если ОбщегоНазначения.РазделениеВключено() Тогда
					Если ДанныеВКИБ <> Неопределено Тогда
						Объект.ИмяВнешнегоМодуля = ПараметрыВК.ИмяМодуля;
					Иначе
						ТекстСообщения = НСтр("ru = 'Запрещено использование неизвестных внешних компонент:
													|Наименование: %1.
													|Модуль: %2.
													|Версия: %3.'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, ПараметрыВК.Название, ПараметрыВК.ИмяМодуля, ПараметрыВК.Версия);
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;
				Иначе
					Объект.ИмяВнешнегоМодуля = ПараметрыВК.ИмяМодуля;
					
					Если ДанныеВКИБ <> Неопределено И ПараметрыВК.Версия = ДанныеВКИБ.Версия Тогда
						ЗагружатьВК = Ложь;
					КонецЕсли;
					
					Если ЗагружатьВК Тогда
						Результат = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(ПараметрыВК.URLВК);
						Если Результат.Статус Тогда
							Справочники.ДополнительныеВнешниеКомпоненты.СохранитьВнешнююКомпонентуВИнформационнойБазе(Результат.Путь);
							УдалитьИзВременногоХранилища(Результат.Путь);
						Иначе
							ВызватьИсключение Результат.СообщениеОбОшибке;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ВызватьИсключение Результат.СообщениеОбОшибке;
		КонецЕсли;
	Иначе
		Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
	КонецЕсли;
	
	Объект.ИдентификаторОрганизации = ЭД.Data.CustomerID;
	
	Объект.АутентификацияПоСертификату = Ложь;
	Объект.ИмяПользователя = "";
		
	Объект.ВерсияФормата = ЭД.Data.FormatVersion;
	Объект.АдресСервера = ЭД.Data.BankServerAddress;
	Если ЭД.formatVersion <> "2.01" Тогда
		Объект.СжиматьДанныеПакетаЭД = ЭД.Data.Compress;
	КонецЕсли;
	Если ЭД.Data.Logon.Login <> Неопределено Тогда
		Объект.ИмяПользователя = ЭД.Data.Logon.Login.User;
	ИначеЕсли ЭД.Data.Logon.Certificate <> Неопределено Тогда
		Объект.АутентификацияПоСертификату = Истина;
	КонецЕсли;
	Объект.ИспользуетсяКриптография = Ложь;
	
	Объект.СертификатыПодписейОрганизации.Очистить();
	
	ГруппыСертификатов = Новый Массив;
	ВГруппеНесколькоСертификатов = Ложь;
	
	Если НЕ ЭД.Data.Свойства().Получить("CryptoParameters") = Неопределено
		И ЭД.Data.CryptoParameters <> Неопределено Тогда
		Объект.ИспользуетсяКриптография = Истина;
		Константы.ИспользоватьЭлектронныеПодписи.Установить(Истина);
		
		Если Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
			
			Если ЭД.Data.CryptoParameters.Encrypted <> Неопределено Тогда
				ПрограммаКриптографии = НайтиСоздатьПрограммуКриптографии(ЭД.Data.CryptoParameters.CSPName,
					ЭД.Data.CryptoParameters.CSPType, ЭД.Data.CryptoParameters.SignAlgorithm, ЭД.Data.CryptoParameters.HashAlgorithm,
					ЭД.Data.CryptoParameters.Encrypted.EncryptAlgorithm);
			Иначе
				ПрограммаКриптографии = НайтиСоздатьПрограммуКриптографии(ЭД.Data.CryptoParameters.CSPName,
					ЭД.Data.CryptoParameters.CSPType, ЭД.Data.CryptoParameters.SignAlgorithm, ЭД.Data.CryptoParameters.HashAlgorithm);
			КонецЕсли;
				
			Для Каждого ГруппаПодписи Из ЭД.Data.CryptoParameters.CustomerSignature.GroupSignatures Цикл
				МассивСертификатовТекущейГруппы = Новый Массив;
				Для Каждого Сертификат Из ГруппаПодписи.Certificate Цикл
					ДанныеСертификата = ДанныеСертификатаВФорматеDER(Сертификат);
					Сертификат = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.НайтиСоздатьСертификатЭП(ДанныеСертификата,
						Объект.Организация, ЭД.Data.CryptoParameters.CSPName);
					НовСтрока = Объект.СертификатыПодписейОрганизации.Добавить();
					НовСтрока.СертификатЭП = Сертификат;
					МассивСертификатовТекущейГруппы.Добавить(Сертификат);
				КонецЦикла;
			
				Объект.СертификатыПодписейОрганизации.Свернуть("СертификатЭП");
				ГруппыСертификатов.Добавить(МассивСертификатовТекущейГруппы);
				Если МассивСертификатовТекущейГруппы.Количество() > 1 Тогда
					ВГруппеНесколькоСертификатов = Истина;
				КонецЕсли;
			КонецЦикла;
		Иначе
			
			СертификатБанка = ЭД.Data.CryptoParameters.BankCertificate;
	
			Если ЗначениеЗаполнено(СертификатБанка) Тогда
				Объект.СертификатБанка = Новый ХранилищеЗначения(СертификатБанка);
			КонецЕсли;
			
			МассивСертификатов = Новый Массив;
			Для Каждого ГруппаПодписи Из ЭД.Data.CryptoParameters.CustomerSignature.GroupSignatures Цикл
				Для Каждого Сертификат Из ГруппаПодписи.Certificate Цикл
					МассивСертификатов.Добавить(Сертификат);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Объект.ИсходящиеДокументы.Очистить();

	ВидыДокументовСНесколькимиПодписями = ОбменСБанкамиСлужебныйПовтИсп.ВидыДокументовПодписываемыхПоМаршруту();
	Для Каждого Документ Из ЭД.Data.Document Цикл
		ТекущийВидЭД = ВидЭД(Документ.docKind);
		Если ЗначениеЗаполнено(ТекущийВидЭД) Тогда
			НовЗапись = Объект.ИсходящиеДокументы.Добавить();
			НовЗапись.ИсходящийДокумент = ТекущийВидЭД;
			НовЗапись.ИспользоватьЭП = Документ.Signed <> Неопределено;
			НовЗапись.Формировать = Истина;
			
			Если НовЗапись.ИспользоватьЭП Тогда
				Если ВидыДокументовСНесколькимиПодписями.Найти(ТекущийВидЭД) = Неопределено
					ИЛИ Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
					НовЗапись.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
				ИначеЕсли Документ.Signed.RuleSignatures = "(0)" Тогда
					МаршрутОбъект = НайтиСоздатьМаршрутПодписания(Объект, ТекущийВидЭД);
					МаршрутОбъект.Наименование = СтрШаблон("%1 - %2 (%3)", Объект.Организация, Объект.Банк, ТекущийВидЭД);
					МаршрутОбъект.СхемаПодписания = Перечисления.СхемыПодписанияЭД.ПоПравилам;
					МаршрутОбъект.Организация = Объект.Организация;
					ДеревоТребований = ЭлектронноеВзаимодействиеСлужебный.ПустоеДеревоТребованийКПодписанию();
					КорневаяСтрока = ДеревоТребований.Строки.Добавить();
					КорневаяСтрока.Требование = Перечисления.ТребованияКПодписаниюЭД.И;
					Для Каждого СтрокаТЧ Из Объект.СертификатыПодписейОрганизации Цикл
						СтрокаПодписанта = КорневаяСтрока.Строки.Добавить();
						СтрокаПодписанта.Сертификат = СтрокаТЧ.СертификатЭП;
					КонецЦикла;
					ЭлектронноеВзаимодействиеСлужебный.ЗаполнитьТаблицуТребованийКПодписаниюПоДереву(
						МаршрутОбъект.ТаблицаТребований, ДеревоТребований);
					МаршрутОбъект.КлючАвтоматическойНастройки = Справочники.НастройкиОбменСБанками.КлючАвтоматическойНастройки(Объект,
						ТекущийВидЭД);
					МаршрутОбъект.Записать();
					НовЗапись.МаршрутПодписания = МаршрутОбъект.Ссылка;
				Иначе
					// Заполнение сложных правил подписания.
					ЧислоШифров = СтрЧислоВхождений(Документ.Signed.RuleSignatures, "(");
					Если ЧислоШифров = 0 Тогда // при ошибке в правиле применяем правило по-умолчанию
						НовЗапись.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
					ИначеЕсли ЧислоШифров = 1 Тогда
						Шифр = СтрЗаменить(СтрЗаменить(Документ.Signed.RuleSignatures, "(", ""), ")", "");
						Если СтрДлина(Шифр) <> ГруппыСертификатов.Количество() Тогда
							ТекстСообщения = Нстр("ru = 'Некорректный файл настроек обмена.
														|Неправильно заданы правила подписания документов.
														|Обратитесь в техническую поддержку банка.'");
							ВызватьИсключение ТекстСообщения;
						КонецЕсли;
						МаршрутОбъект = НайтиСоздатьМаршрутПодписания(Объект, ТекущийВидЭД);
						МаршрутОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%1 - %2 (%3)", Объект.Организация, Объект.Банк, ТекущийВидЭД);
						МаршрутОбъект.СхемаПодписания = Перечисления.СхемыПодписанияЭД.ПоПравилам;
						МаршрутОбъект.Организация = Объект.Организация;
		
						ДеревоТребований = ЭлектронноеВзаимодействиеСлужебный.ПустоеДеревоТребованийКПодписанию();
						КорневаяСтрока = ДеревоТребований.Строки.Добавить();
						КорневаяСтрока.Требование = Перечисления.ТребованияКПодписаниюЭД.И;
						Для Счетчик = 1 По СтрДлина(Шифр) Цикл
							ТекущееЗначение = Сред(Шифр, Счетчик, 1);
							Если ТекущееЗначение = "1" Тогда
								Если ВГруппеНесколькоСертификатов Тогда
									ТекущаяСтрока = КорневаяСтрока.Строки.Добавить();
									ТекущаяСтрока.Требование = Перечисления.ТребованияКПодписаниюЭД.ИЛИ;
								Иначе
									ТекущаяСтрока = КорневаяСтрока;
								КонецЕсли;
								
								Для Каждого Сертификат Из ГруппыСертификатов[Счетчик - 1] Цикл
									СтрокаПодписанта = ТекущаяСтрока.Строки.Добавить();
									СтрокаПодписанта.Сертификат = Сертификат;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
		
						ЭлектронноеВзаимодействиеСлужебный.ЗаполнитьТаблицуТребованийКПодписаниюПоДереву(
							МаршрутОбъект.ТаблицаТребований, ДеревоТребований);
						МаршрутОбъект.КлючАвтоматическойНастройки = Справочники.НастройкиОбменСБанками.КлючАвтоматическойНастройки(
							Объект, ТекущийВидЭД);
						МаршрутОбъект.Записать();
						НовЗапись.МаршрутПодписания = МаршрутОбъект.Ссылка;
					Иначе // Указано несколько шифров
						МассивШифров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Документ.Signed.RuleSignatures, "||");
						МаршрутОбъект = НайтиСоздатьМаршрутПодписания(Объект, ТекущийВидЭД);
						МаршрутОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"%1 - %2 (%3)", Объект.Организация, Объект.Банк, ТекущийВидЭД);
						МаршрутОбъект.СхемаПодписания = Перечисления.СхемыПодписанияЭД.ПоПравилам;
						МаршрутОбъект.Организация = Объект.Организация;

						ДеревоТребований = ЭлектронноеВзаимодействиеСлужебный.ПустоеДеревоТребованийКПодписанию();
						КорневаяСтрока = ДеревоТребований.Строки.Добавить();
						КорневаяСтрока.Требование = Перечисления.ТребованияКПодписаниюЭД.ИЛИ;
						
						Для Каждого Шифр Из МассивШифров Цикл
							СтрокаШифра = КорневаяСтрока.Строки.Добавить();
							СтрокаШифра.Требование = Перечисления.ТребованияКПодписаниюЭД.И;
							Шифр = СтрЗаменить(СтрЗаменить(Шифр, "(", ""), ")", "");
							Если СтрДлина(Шифр) <> ГруппыСертификатов.Количество() Тогда
								ТекстСообщения = Нстр("ru = 'Некорректный файл настроек обмена.
															|Неправильно заданы правила подписания документов.
															|Обратитесь в техническую поддержку банка.'");
								ВызватьИсключение ТекстСообщения;
							КонецЕсли;
							
							Для Счетчик = 1 По СтрДлина(Шифр) Цикл
								ТекущееЗначение = Сред(Шифр, Счетчик, 1);
								Если ТекущееЗначение = "1" Тогда
									Если ВГруппеНесколькоСертификатов Тогда
										ТекущаяСтрока = СтрокаШифра.Строки.Добавить();
										ТекущаяСтрока.Требование = Перечисления.ТребованияКПодписаниюЭД.ИЛИ;
									Иначе
										ТекущаяСтрока = СтрокаШифра;
									КонецЕсли;
									Для Каждого Сертификат Из ГруппыСертификатов[Счетчик - 1] Цикл
										СтрокаПодписанта = ТекущаяСтрока.Строки.Добавить();
										СтрокаПодписанта.Сертификат = Сертификат;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						ЭлектронноеВзаимодействиеСлужебный.ЗаполнитьТаблицуТребованийКПодписаниюПоДереву(
							МаршрутОбъект.ТаблицаТребований, ДеревоТребований);
						МаршрутОбъект.КлючАвтоматическойНастройки = Справочники.НастройкиОбменСБанками.КлючАвтоматическойНастройки(Объект,
							ТекущийВидЭД);
						МаршрутОбъект.Записать();
						НовЗапись.МаршрутПодписания = МаршрутОбъект.Ссылка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Объект.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");

	// Принудительное добавление документа Запрос-зонд
	Если Объект.ИсходящиеДокументы.Найти(Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд, "ИсходящийДокумент") = Неопределено Тогда
		НовЗапись = Объект.ИсходящиеДокументы.Добавить();
		НовЗапись.ИсходящийДокумент = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд;
		НовЗапись.ИспользоватьЭП = Объект.ИспользуетсяКриптография;
		НовЗапись.Формировать = Истина;
		
		Если НовЗапись.ИспользоватьЭП Тогда
			НовЗапись.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
		КонецЕсли;
	КонецЕсли;
	
	ЛогинДляПолученияВыписки = ЗначениеСвойстваXDTO(ЭД.Data, "ReceiptStatement.Login");
	// Доступно автоматическое получение выписки банка.
	Если ЗначениеЗаполнено(ЛогинДляПолученияВыписки) Тогда
		Логин = ЗначениеСвойстваXDTO(ЭД.Data, "Logon.Login.User");
		// Логины должны различаться.
		Если Логин <> ЛогинДляПолученияВыписки Тогда
			Объект.ДоступноАвтоматическоеПолучениеВыписки = Истина;
			Объект.ЛогинДляПолученияВыписки = ЛогинДляПолученияВыписки;
			Объект.СпособПолученияПароля = ЭД.Data.ReceiptStatement.Instructions;
		КонецЕсли;
	КонецЕсли;
	
	Объект.ПометкаУдаления = Ложь;
	Объект.Недействительна = Недействительна;
	
	Если ЗаписыватьОбъект Тогда
		Попытка
			Объект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'Возникла ошибка при создании настройки обмена с сервисом 1С:ДиректБанк.'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'Создание настройки обмена с сервисом 1С:ДиректБанк.'");
			ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки
	КонецЕсли;
	
	СохранитьПараметрыОбмена(Объект.Ссылка);
	
	Возврат Объект.Ссылка;

КонецФункции

// Получает объект XDTO на основании xml файла.
//
// Параметры:
//  АдресФайла - Строка - адрес временного хранилища с двоичными данными файла.
//  ЛокальныйФайл - Булево - признак выбора файла с диска.
// 
// Возвращаемое значение:
// ОбъектXDTO - данные из файла.
//
Функция XDTOДанныеФайлаНастроек(АдресФайла, ЛокальныйФайл = Ложь) Экспорт
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	
	ДвоичныеДанныеФайла.Записать(ВремФайл);
	
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл, , , "UTF-8");
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		ОбъектXML.Закрыть();
		ЕстьСвойствоData = ЭД.Свойства().Получить("Data") <> Неопределено;
		Если ЕстьСвойствоData Тогда
			Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ЭД.formatVersion);
	
			Если Фабрика = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении настроек.
											|Неизвестный формат файла.'");
				ВидОперации = НСтр("ru = 'Чтение настроек обмена с сервисом 1С:ДиректБанк из файла.'");
				Если ЛокальныйФайл Тогда
					ТекстОшибки = НСтр("ru = 'При загрузке настроек обмена с сервисом 1С:ДиректБанк произошла ошибка.
											|Информация об ошибке: Неизвестная версия формата файла.'",
									ОбщегоНазначения.КодОсновногоЯзыка());
					ФайловаяСистема.УдалитьВременныйФайл(ВремФайл);
				Иначе
					ТекстОшибки = НСтр("ru = 'При загрузке настроек обмена с сервисом 1С:ДиректБанк произошла ошибка.
										|Путь к файлу: %1
										|Информация об ошибке: Неизвестный формат файла.'",
									ОбщегоНазначения.КодОсновногоЯзыка());
					ТекстОшибки = СтрШаблон(ТекстОшибки, ВремФайл);
				КонецЕсли;
				ОбработатьОшибку(ВидОперации, ТекстОшибки);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		
			ОбъектXML.ОткрытьФайл(ВремФайл);
			ПространствоИменАсинхрОбмена = ПространствоИменАсинхронногоОбмена(ЭД.formatVersion);
			Settings = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "Settings");
			ЭД = Фабрика.ПрочитатьXML(ОбъектXML, Settings);
		Иначе
			УдалитьПространствоИмен(ВремФайл, "http://bssys.com/upg/settings");
			ОбъектXML.ОткрытьФайл(ВремФайл);
			ПостроительDOM = Новый ПостроительDOM();
			ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);
			ОбъектXML.Закрыть();
			СоответствиеПространствИмен = ДокументDOM.ЭлементДокумента.ПолучитьСоответствияПространствИмен();
			Если СоответствиеПространствИмен.Получить("xmlns") <> "http://1c-sbrf.ru/XMLSchema" Тогда
				ДокументDOM.ЭлементДокумента.УстановитьСоответствиеПространстваИмен("", "http://1c-sbrf.ru/XMLSchema");
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьXML.ОткрытьФайл(ВремФайл);
				ЗаписьDOM = Новый ЗаписьDOM;
				ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
				ЗаписьXML.Закрыть();
			КонецЕсли;
			ОбъектXML.ОткрытьФайл(ВремФайл);
			SettingsSBRF = ТипЗначенияCML(ФабрикаXDTO, "http://1c-sbrf.ru/XMLSchema", "Settings");
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, SettingsSBRF);
		КонецЕсли;
		ЭД.Проверить();
	Исключение
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении настроек.'");
		ВидОперации = НСтр("ru = 'Чтение настроек обмена с сервисом 1С:ДиректБанк из файла.'");
		Если ЛокальныйФайл Тогда
			ТекстОшибки = НСтр("ru = 'При загрузке настроек обмена с сервисом 1С:ДиректБанк произошла ошибка.
									|Информация об ошибке: %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Иначе
			ТекстОшибки = НСтр("ru = 'При загрузке настроек обмена с сервисом 1С:ДиректБанк произошла ошибка.
									|Путь к файлу: %1
									|Информация об ошибке: %2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ВремФайл, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;

		ОбработатьОшибку(ВидОперации, ТекстОшибки);
		ОбъектXML.Закрыть();
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ОбъектXML.Закрыть();
	
	ФайловаяСистема.УдалитьВременныйФайл(ВремФайл);
	
	Возврат ЭД;
	
КонецФункции

// Функция определяет настройки обмена ЭД по источнику - документу базы данных или по ЭД.
//
Функция ОпределитьНастройкиОбменаЭДПоИсточнику(Источник, ВыводитьСообщения, МассивОтпечатковСертификатов, СообщениеОбмена = Неопределено, ВидЭД = Неопределено, ФлагДействующиеНастройкиОбмена = Истина) Экспорт
	
	ДействующиеПараметрыОбмена = ДействующиеПараметрыОбмена(Источник, СообщениеОбмена);
	
	Если ВыводитьСообщения И ДействующиеПараметрыОбмена.НастройкаОбменаДействует
		И НЕ ДействующиеПараметрыОбмена.ВидЭДПоддерживаетсяБанком Тогда
		ТекстСообщения = НСтр("ru = 'Данный вид электронного документа банк не принимает.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВыводитьСообщения И НЕ ДействующиеПараметрыОбмена.НастройкаОбменаДействует
		И НЕ (ЗначениеЗаполнено(ДействующиеПараметрыОбмена.ПараметрыЭД.Банк)
				И ЗначениеЗаполнено(ДействующиеПараметрыОбмена.ПараметрыЭД.Организация)) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось определить параметры обмена с банком.
									|Проверьте реквизиты документа.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	// Заполним ВидЭД в случае непосредственного выбора пользователем.
	Если ЗначениеЗаполнено(ВидЭД) Тогда
		ДействующиеПараметрыОбмена.ПараметрыЭД.ВидЭД = ВидЭД;
	КонецЕсли;
	
	Результат = ОпределитьНастройкиОбменаЭД(
		ДействующиеПараметрыОбмена.ПараметрыЭД, МассивОтпечатковСертификатов, ФлагДействующиеНастройкиОбмена);
	
	Если Результат = Неопределено Тогда
		Если ВыводитьСообщения Тогда
			ДействующиеПараметрыОбмена.ПараметрыЭД.Удалить("ИмяРеквизитаОрганизации");
			СообщитьОбОтсутствииНастройкиОбмена(ДействующиеПараметрыОбмена.ПараметрыЭД, Источник);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет настройки обмена с банком.
//
// СсылкаНаВладельца - ДокументСсылка - ссылка на документ информационной базы;
// СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками, Неопределено - ссылка на сообщение обмена;
//
// Возвращаемое значение:
// СтруктураНастроекОбмена - Структура:
//    * НастройкаОбменаДействует - Булево - найдена действующая настройка обмена;
//    * ВидЭДПоддерживаетсяБанком - Булево - данный вид документа на поддерживается банка;
//    * НастройкаОбмена - СправочникСсылка.НастройкаОбменаСБанком - найденная настройка обмена;
//    * ПараметрыЭД - Структура - дополнительные настройки.
//
Функция ДействующиеПараметрыОбмена(СсылкаНаВладельца, СообщениеОбмена = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НастройкаОбменаДействует", Истина);
	СтруктураВозврата.Вставить("ВидЭДПоддерживаетсяБанком", Истина);
	СтруктураВозврата.Вставить("ПараметрыЭД");
	СтруктураВозврата.Вставить("НастройкаОбмена");
	
	Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
		
		РеквизитыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "ВидЭД, НастройкаОбмена");
		СтруктураВозврата.ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца, РеквизитыСообщения.ВидЭД);
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата.ПараметрыЭД, РеквизитыСообщения);
		
		ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеОбмена);
		УстановленныеПодписи = Новый Массив;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ПодписанЭП") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭП.Отпечаток
			|ИЗ
			|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
			|ГДЕ
			|	ЭП.ПодписанныйОбъект = &ПодписанныйОбъект";
			
			Запрос.УстановитьПараметр("ПодписанныйОбъект", ПрисоединенныйФайл);
			УстановитьПривилегированныйРежим(Истина);
			Отпечатки = Запрос.Выполнить().Выгрузить();
			УстановитьПривилегированныйРежим(Истина);
			УстановленныеПодписи = Отпечатки.ВыгрузитьКолонку("Отпечаток");
		КонецЕсли;
		СтруктураВозврата.ПараметрыЭД.Вставить("УстановленныеПодписи", УстановленныеПодписи);
	Иначе
		СтруктураВозврата.ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураВозврата.ПараметрыЭД.ВидЭД) Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СсылкаНаВладельца);
		СоответствиеВладельцевИСообщенийОбмена = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбменаПоВладельцам(
			МассивСсылок);
		Для Каждого ТекЭл Из МассивСсылок Цикл
			СсылкаНаСообщениеОбмена = СоответствиеВладельцевИСообщенийОбмена.Получить(ТекЭл);
			Если ЗначениеЗаполнено(СсылкаНаСообщениеОбмена) Тогда
				СтруктураВозврата.ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СсылкаНаСообщениеОбмена, "ВидЭД");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменСБанками.Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|ГДЕ
	|	НастройкиОбменСБанками.Организация = &Организация
	|	И НастройкиОбменСБанками.Банк = &Банк
	|	И НЕ НастройкиОбменСБанками.ПометкаУдаления
	|	И НЕ НастройкиОбменСБанками.Недействительна";
	Запрос.УстановитьПараметр("Организация", СтруктураВозврата.ПараметрыЭД.Организация);
	Запрос.УстановитьПараметр("Банк", СтруктураВозврата.ПараметрыЭД.Банк);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Не Результат.Следующий() Тогда
		СтруктураВозврата.НастройкаОбменаДействует = Ложь;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.НастройкаОбмена = Результат.Ссылка;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	|ГДЕ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка = &Ссылка
	|	И НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент = &ИсходящийДокумент";
	Запрос.УстановитьПараметр("Ссылка", СтруктураВозврата.НастройкаОбмена);
	Запрос.УстановитьПараметр("ИсходящийДокумент", СтруктураВозврата.ПараметрыЭД.ВидЭД);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтруктураВозврата.ВидЭДПоддерживаетсяБанком = Ложь;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область ПолучениеВыпискиБанка

// Меняет статус и состояние исполненных платежных поручений по выписке банка.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - документ выписки банка.
//
Процедура ОпределитьИсполненныеПлатежныеПоручения(Знач СообщениеОбмена) Экспорт
	
	МассивВнешнихИдентификаторов = МассивИдентификаторовВыпискиБанка(СообщениеОбмена);
	
	Если Не МассивВнешнихИдентификаторов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "НастройкаОбмена");
	ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ПрограммаБанка");
	
	ОтметитьИсполненныеПлатежныеДокументы(НастройкаОбмена, ПрограммаБанка, МассивВнешнихИдентификаторов);
	
КонецПроцедуры

// Удаляет пароль из безопасного хранилища
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//
Процедура УдалитьПарольИзБезопасногоХранилища(НастройкаОбмена) Экспорт
	
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(НастройкаОбмена);
	
КонецПроцедуры

// Выполняет автоматическое получение выписки.
// При выполнении процедуры в банк отправляется один запрос выписки и один запрос новых документов.
// Если есть пакеты к получению, то они также загружаются в информационную базу.
// Если банк не успел подготовить выписку по запросу, то она будет загружена при следующем сеансе.
// В информационной базе создаются документы только по выписке, полученной в ответ на автоматический запрос.
//
Процедура АвтоматическоеПолучениеВыписки() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПолучениеВыпискиОбменСБанками);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыОбменСБанками.НастройкаОбмена КАК НастройкаОбмена
	               |ИЗ
	               |	РегистрСведений.ПараметрыОбменСБанками КАК ПараметрыОбменСБанками
	               |ГДЕ
	               |	ПараметрыОбменСБанками.АвтоматическоеПолучениеВыписки";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ОтключитьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ПолучениеВыпискиОбменСБанками);
		Возврат;
	КонецЕсли;
		
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ПолучитьВыпискуАвтоматически(Выборка.НастройкаОбмена);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			МенеджерЗаписи = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.НастройкаОбмена = Выборка.НастройкаОбмена;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.НастройкаОбмена = Выборка.НастройкаОбмена;
			МенеджерЗаписи.ТекстОшибки = ТекстОшибки;
			МенеджерЗаписи.Записать();
		КонецПопытки;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Формирует электронные документы с запросами выписок.
//
// Параметры:
//  НастройкаОбмена			 - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//  ДатаНачала				 - Дата - начало периода запроса выписки.
//  ДатаОкончания			 - Дата - окончания периода запроса выписки.
//  МассивБанковскихСчетов	 - Массив - содержит строки с номерами счетов.
//  СозданАвтоматически		 - Булево - признак автоматического создания запроса выписки.
// 
// Возвращаемое значение:
//  Массив - содержит ссылки на документы СообщениеОбменСБанками.
//
Функция МассивЗапросовВыпискиАсинхронныйОбмен(НастройкаОбмена, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов, СозданАвтоматически = Ложь) Экспорт
	
	МассивЗапросов = Новый Массив;
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, Банк, ИдентификаторОрганизации, ИспользуетсяКриптография, ВерсияФормата");
	
	ОтправительНаименование = ЭлектронноеВзаимодействиеСлужебный.СокращенноеНаименованиеОрганизации(
		РеквизитыНастройкиОбмена.Организация);
	РеквизитыОрганизации = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
		РеквизитыНастройкиОбмена.Организация, РеквизитыОрганизации);
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыНастройкиОбмена.Банк, "Код, Наименование");

	Если ЗначениеЗаполнено(РеквизитыНастройкиОбмена.ВерсияФормата) Тогда
		ВерсияФормата = РеквизитыНастройкиОбмена.ВерсияФормата;
	Иначе
		ВерсияФормата = ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	ПространствоИмен = ПространствоИменАсинхронногоОбмена(ВерсияФормата);
	Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
	
	Для Каждого НомерСчета Из МассивБанковскихСчетов Цикл
	
		ТекстОшибки = "";
		Попытка
			
			Идентификатор = Новый УникальныйИдентификатор;
			
			ЭД = ОбъектТипаCML(Фабрика, "StatementRequest", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(ЭД, "id", Строка(Идентификатор), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЭД, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);

			ЗаполнитьСвойствоXDTO(ЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
			ВерсияПрограммы = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
			ЗаполнитьСвойствоXDTO(ЭД, "userAgent", ВерсияПрограммы, , ТекстОшибки);
			
			Отправитель = ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(Отправитель, "id", РеквизитыНастройкиОбмена.ИдентификаторОрганизации, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Отправитель, "name", ОтправительНаименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Отправитель, "inn", РеквизитыОрганизации.ИНН, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Отправитель, "kpp", РеквизитыОрганизации.КПП, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЭД, "Sender", Отправитель, Истина, ТекстОшибки);
			
			Получатель = ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(Получатель, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Получатель, "name", РеквизитыБанка.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЭД, "Recipient", Получатель, Истина, ТекстОшибки);
			
			ДанныеЗапроса = ОбъектТипаCML(Фабрика, "StatementRequest.Data", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "StatementType", "0", Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "DateFrom", ДатаНачала, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "DateTo", ДатаОкончания, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "Account", СокрЛП(НомерСчета), Истина, ТекстОшибки);
			
			БанкСчета = ОбъектТипаCML(Фабрика, "BankType", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(БанкСчета, "BIC", РеквизитыБанка.Код, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкСчета, "Name", РеквизитыБанка.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "Bank", БанкСчета, Истина, ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(ЭД, "Data", ДанныеЗапроса, Истина, ТекстОшибки);
			
			ЭД.Проверить();
		
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				ФайлСформирован = Ложь;
			Иначе
				ДвоичныеДанные = ДвоичныеДанныеИзXDTO(Фабрика, ЭД, Ложь);
				ФайлСформирован = Истина;
			КонецЕсли;

		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Операция = НСтр("ru = 'Формирование ЭД'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, НастройкаОбмена);
			ФайлСформирован = Ложь;
		КонецПопытки;
		
		Если Не ФайлСформирован Тогда
			Продолжить;
		КонецЕсли;
		
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		СтруктураРеквизитов = Новый Структура;
		
		Если РеквизитыНастройкиОбмена.ИспользуетсяКриптография Тогда
			СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
		Иначе
			СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
		КонецЕсли;
		
		СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
		СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("Организация", РеквизитыНастройкиОбмена.Организация);
		СтруктураРеквизитов.Вставить("Банк", РеквизитыНастройкиОбмена.Банк);
		СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
		СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
		СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("Идентификатор", Идентификатор);
		СтруктураРеквизитов.Вставить("ДатаНачала", ДатаНачала);
		СтруктураРеквизитов.Вставить("ДатаОкончания", ДатаОкончания);
		СтруктураРеквизитов.Вставить("СозданАвтоматически", СозданАвтоматически);
		СтруктураРеквизитов.Вставить("НомерСчета", СокрЛП(НомерСчета));
		СообщениеЗапрос = Неопределено;
		СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеЗапрос);

		МассивЗапросов.Добавить(СообщениеЗапрос);
		
	КонецЦикла;
	
	Возврат МассивЗапросов;
	
КонецФункции

// Отправляет запрос выписки в банк.
//
// Параметры:
//  СтруктураПараметров - Структура - параметры выполнения процедуры. Содержит поля:\
//    * МассивСообщенийОбмена - Массив - содержит ссылки на документ СообщениеОбменСБанками.
//    * НастройкаОбмена - Справочник - текущая настройка обмена с банком.
//    * ИдентификаторСессии - Строка - идентификатор установленной сессии.
//  АдресХранилища - Строка - адрес временного хранилища для помещения результата.
//
Процедура ОтправитьЗапросВыпискиАсинхронныйОбмен(СтруктураПараметров, АдресХранилища) Экспорт
	
	МассивСообщенийОбмена = СтруктураПараметров.МассивСообщенийОбмена;
	ТекстСообщения = "";
	
	НовыйПакет = Неопределено;
	СоздатьПакетОбменСБанками(СтруктураПараметров.НастройкаОбмена, МассивСообщенийОбмена, НовыйПакет);

	СоздатьЭДПакетаAsync(НовыйПакет);
	
	МассивПакетов = Новый Массив;
	МассивПакетов.Добавить(НовыйПакет);
	Результат = ОтправкаПакетовВБанк(МассивПакетов, СтруктураПараметров.ИдентификаторСессии, ТекстСообщения);
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Собирает пакет с запросом выписки и отправляет в банк. В ответ получает выписку банка.
//
// Параметры:
//  СтруктураПараметров - структура, содержит 2 элемента:
//      СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - электронный документ с запросом выписки,
//      НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//  АдресХранилища - строка, содержит адрес хранилища, содержащий структуру из 2 элементов:
//      ЗапросОтправлен - Булево, признак, что запрос был отправлен,
//      ВыпискаБанка - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ с выпиской банка.
//
Процедура ПолучитьВыпискуСинхронныйОбмен(СтруктураПараметров, АдресХранилища) Экспорт
	
	Перем ВыпискаБанка;
	
	НастройкаОбмена = СтруктураПараметров.НастройкаОбмена;
	СтруктураВозврата = Новый Структура;
	
	МассивСообщенийОбмена = СтруктураПараметров.МассивСообщенийОбмена;
	СообщениеОбмена = МассивСообщенийОбмена[0];
	
	ЗапросОтправлен = Ложь;
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена,
		"АдресСервера, РесурсИсходящихДокументов, РесурсВходящихДокументов, ПрограммаБанка");
	Настройки = Новый Структура("Адрес", РеквизитыНастройкиОбмена.АдресСервера);
	КоличествоОтправленных = 0;
	
	Данные = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
	URI = "urn:x-obml:1.0";
	ТипMessage = ФабрикаXDTO.Тип("urn:x-obml:1.0", "CMSDETACHED");
	Message = ФабрикаXDTO.Создать(ТипMessage);
	ТипData = ТипMessage.Свойства[0].Тип;
	Data = ФабрикаXDTO.Создать(ТипData);
	Data.ContentType = "application/xml";
	Data.__content = Данные;
	Message.data = Data;
	
	МассивПодписей = ПодписиСообщенияОбмена(СообщениеОбмена);
	
	Для Каждого СтрокаПодписи Из МассивПодписей Цикл
		Message.signature.Добавить(СтрокаПодписи.Подпись.Получить());
	КонецЦикла;
	
	ПотокВПамяти = Новый ПотокВПамяти();
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьПоток(ПотокВПамяти);
	Запись.ЗаписатьОбъявлениеXML();

	ФабрикаXDTO.ЗаписатьXML(Запись, Message, "signed", URI, , НазначениеТипаXML.Явное);
	
	Запись.Закрыть();
	
	Настройки.Вставить("Ресурс", РеквизитыНастройкиОбмена.РесурсВходящихДокументов);
	
	ВидОперации = НСтр("ru = 'Отправка запроса выписки в банк'");
	
	Попытка
		ОтветБанка = "";
		ТекстОшибки = "";
		ДанныеОтправки = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
		ОтправитьВБанк(НастройкаОбмена, Настройки, ДанныеОтправки, ОтветБанка, ТекстОшибки);
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ОбработатьОшибкуПередачиПакета(МассивСообщенийОбмена, ВидОперации, ТекстОшибки);
			ВызватьИсключение ТекстОшибки;
		Иначе
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Отправлен);
			ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
			ЗапросОтправлен = Истина;
			ОбработатьОтветИзБанка(ОтветБанка, СообщениеОбмена, ВыпискаБанка);
			ДанныеОтвета = ПолучитьДанныеИзОтветаБанка(ОтветБанка);
			ДанныеЭП = Новый Соответствие;
			ДанныеЭП.Вставить(ВыпискаБанка, ДанныеОтвета.Получить("Подписи"));
			СтруктураВозврата.Вставить("ДанныеЭП", ДанныеЭП);
		КонецЕсли;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Не удалось отправить запрос выписки в банк
									|Причина: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки);
		ОбработатьОшибкуПередачиПакета(МассивСообщенийОбмена, ВидОперации, ТекстОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	СтруктураВозврата.Вставить("ЗапросОтправлен", ЗапросОтправлен);
	СтруктураВозврата.Вставить("ВыпискаБанка", ВыпискаБанка);

	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	
КонецПроцедуры

// Отключает регламентное задание
//
// Параметры:
//  РегламентноеЗадание - ОбъектМетаданных - отключаемое регламентное задание
//
Процедура ОтключитьРегламентноеЗадание(РегламентноеЗадание) Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		// Ищем задание по наименованию.
		Отбор = Новый Структура();
		Отбор.Вставить("Метаданные", "ПолучениеВыпискиОбменСБанками");
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);

		// Проверяем, что задание найдено.
		Если Задания.Количество() <> 1 Тогда
			// Запись в журнал ошибки опущена.
			Возврат;
		КонецЕсли;

		// Выключаем найденное задание.
		НашеЗадание = Задания[0];
		Параметры = Новый Структура();
		Параметры.Вставить("Использование", Ложь);
		РегламентныеЗаданияСервер.ИзменитьЗадание(НашеЗадание.УникальныйИдентификатор, Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет дату начала запроса выписки
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
// 
// Возвращаемое значение:
//  Дата - дата начала запроса выписки.
//
Функция ДатаНачалаЗапросаВыписки(НастройкаОбмена) Экспорт
	
	Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
	Выборка = РегистрыСведений.ПараметрыОбменСБанками.Выбрать(Отбор);
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ДатаПоследнейОперации) Тогда
		ДатаНачала = Выборка.ДатаПоследнейОперации;
	Иначе
		ДатаНачала = НачалоДня(ТекущаяДатаСеанса()) - 7 * 24 * 60 * 60;
	КонецЕсли;
	
	Возврат ДатаНачала;
	
КонецФункции

// Производит аутентификацию и отправку тестового запрос выписки в банк.
//
// Параметры:
//  СтруктураПараметров - Структура - параметры выполнения процедуры. Содержит поля:
//     * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//     * Пароль - Строка - пароль для получения выписки в автоматическом режиме.
//  АдресХранилища - Строка - адрес временного хранилища с результатом выполнения. Содержит:
//     * ИдентификаторСессии - строка - идентификатор установленной сессии.
//     * МассивСообщенийОбмена - массив - в элементах содержит ДокументСсылка.СообщениеОбменСБанками - запрос выписки банка.
//
Процедура ОтправитьТестовыйЗапросВыпискиАсинхронныйОбмен(СтруктураПараметров, АдресХранилища) Экспорт
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметров.НастройкаОбмена,
		"ЛогинДляПолученияВыписки, АдресСервера, ИдентификаторОрганизации, ВерсияФормата");
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("Логин", РеквизитыНастройкиОбмена.ЛогинДляПолученияВыписки);
	ДанныеАутентификации.Вставить("Пароль", СтруктураПараметров.Пароль);
	Результат = ОбменСБанкамиСлужебныйВызовСервера.БазоваяАутентификация(
		РеквизитыНастройкиОбмена.АдресСервера, РеквизитыНастройкиОбмена.ИдентификаторОрганизации, ДанныеАутентификации,
		РеквизитыНастройкиОбмена.ВерсияФормата, СтруктураПараметров.НастройкаОбмена);
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		ВызватьИсключение Результат.ТекстОшибки;
	КонецЕсли;
	ИдентификаторСессии = Результат.ИдентификаторСессии;
	
	ПараметрыЗапроса = ОбменСБанкамиКлиентСервер.ПараметрыПолученияВыпискиБанка();
	ПараметрыЗапроса.ДатаНачала = ДатаНачалаЗапросаВыписки(СтруктураПараметров.НастройкаОбмена);
	ПараметрыЗапроса.ДатаОкончания = ТекущаяДатаСеанса();
	МассивСообщенийОбмена = ОбменСБанкамиСлужебныйВызовСервера.ЗапросыВыписок(
		СтруктураПараметров.НастройкаОбмена, ПараметрыЗапроса, , , Истина);
		
	НовыйПакет = Неопределено;
	СоздатьПакетОбменСБанками(СтруктураПараметров.НастройкаОбмена, МассивСообщенийОбмена, НовыйПакет);

	СоздатьЭДПакетаAsync(НовыйПакет);
	
	МассивПакетов = Новый Массив;
	МассивПакетов.Добавить(НовыйПакет);
	ТекстСообщения = "";
	Результат = ОтправкаПакетовВБанк(МассивПакетов, ИдентификаторСессии, ТекстСообщения);
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	СтруктураВозврата.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область ВнешняяКомпонента

// Скачивает информационный файл и получает информацию о внешней компоненте. Запускается через длительную операцию.
//
// Параметры:
//  Параметры - Структура - входящие параметры. Содержит поля:
//    * URLИнфоФайла- Строка - URL-путь к информационную файлу
//  Адрес - Строка - адрес временного хранилища для помещения результата.
//
Процедура ПолучитьИнформациюОВнешнейКомпоненте(Параметры, Адрес) Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
	ПараметрыПолучения.ПутьДляСохранения = ВремФайл;
	ПараметрыПолучения.Таймаут = 30;
	РезультатИнфоФайл = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Параметры.URLИнфоФайла, ПараметрыПолучения);
	Если РезультатИнфоФайл.Статус Тогда
		ПараметрыВК = ПараметрыВК(ВремФайл);
		ФайловаяСистема.УдалитьВременныйФайл(ВремФайл);
		ПоместитьВоВременноеХранилище(ПараметрыВК, Адрес);
	Иначе
			
		ТекстСообщения = НСтр("ru = 'Не удалось получить информационный файл внешней компоненты.
									|Описание: %1'");
		ТекстОшибки =  НСтр("ru = 'Не удалось получить информационный файл внешней компоненты.
							|Описание: %1
							|URL: %2'");
		Если РезультатИнфоФайл.Свойство("КодСостояния") Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Код ошибки: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатИнфоФайл.СообщениеОбОшибке, РезультатИнфоФайл.КодСостояния);
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Код ошибки: %3'");
			ТекстОшибки = СтрШаблон(
				ТекстОшибки, РезультатИнфоФайл.СообщениеОбОшибке, Параметры.URLИнфоФайла, РезультатИнфоФайл.КодСостояния);
		Иначе
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатИнфоФайл.СообщениеОбОшибке);
			ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатИнфоФайл.СообщениеОбОшибке, Параметры.URLИнфоФайла);
		КонецЕсли;
		
		ВидОперации = НСтр("ru = 'Загрузка информационного файла через интернет.'");
		
		ОбработатьОшибку(ВидОперации, ТекстОшибки);
		
		ВызватьИсключение ТекстСообщения;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Журналирование

// Событие возникает перед отправкой HTTP запроса на сервер банка
//
// Параметры:
//  HTTPСоединение - HTTPСоединение - HTTPСоединение.
//  HTTPЗапрос - HTTPЗапрос - отправляемый запрос.
//  ПараметрыЖурналирования - Структура - данные, переданные в метод ЭлектронноеВзаимодействиеСлужебный.СкачатьФайлВоВременноеХранилище.
//
Процедура ПриОтправкеДанныхHTTP(URL, HTTPСоединение, HTTPЗапрос, ПараметрыЖурналирования) Экспорт
	
	СохранитьЗапрос(ПараметрыЖурналирования.НастройкаОбмена, URL, HTTPСоединение, HTTPЗапрос);
	
КонецПроцедуры

// Событие возникает при получении из банка ответа на запрос.
//
//  HTTPОтвет - HTTPОтвет - полученный из банка ответ.
//  ИмяФайла - Строка - имя файла, содержащего тело ответа. Если не заполнено, то тело нужно получать из HTTPОтвет.
//  ПараметрыЖурналирования - Структура - данные, переданные в метод ЭлектронноеВзаимодействиеСлужебный.СкачатьФайлВоВременноеХранилище.
//
Процедура ПриПолученииДанныхHTTP(HTTPОтвет, ИмяФайла, ПараметрыЖурналирования) Экспорт
	
	СохранитьОтвет(ПараметрыЖурналирования.НастройкаОбмена, HTTPОтвет, ИмяФайла);
	
	
КонецПроцедуры

// Выполняет чтение событий журнала регистрации в соответствии с установленным отбором.
//
// Параметры:
//
//     ОтборЖурналаНаКлиенте - Структура - Настройки отбора для чтения записей журнала регистрации.
//     АдресХранилища - Строка, УникальныйИдентификатор - Адрес временного хранилища для результата.
//
// Результат представляет собой структуру с полями:
//     СобытияЖурнала - ТаблицаЗначений - Отобранные события обмена с банком.
//
Процедура ПрочитатьСобытияЖурналаРегистрации(ОтборЖурналаНаКлиенте, АдресХранилища) Экспорт
	
	// Проверяем параметры на корректность.
	ДатаНачала    = Неопределено;
	ДатаОкончания = Неопределено;
	ДатыОтбораУказаны = ОтборЖурналаНаКлиенте.Свойство("ДатаНачала", ДатаНачала) И ОтборЖурналаНаКлиенте.Свойство("ДатаОкончания", ДатаОкончания)
		И ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ОтборЖурналаНаКлиенте.ДатаОкончания);
		
	Если ДатыОтбораУказаны И ДатаНачала > ДатаОкончания Тогда
		ВызватьИсключение НСтр("ru = 'Некорректно заданы условия отбора журнала регистрации. Дата начала больше даты окончания.'");
	КонецЕсли;
	СмещениеВремениСервера = СмещениеВремениСервера();
	
	// Подготовка отбора
	Отбор = Новый Структура;
	Для Каждого ЭлементОтбора Из ОтборЖурналаНаКлиенте Цикл
		Отбор.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
	КонецЦикла;
	ПреобразованиеОтбора(Отбор, СмещениеВремениСервера);
	
	// Выгрузка отбираемых событий и формирование структуры таблицы.
	СобытияЖурнала = Новый ТаблицаЗначений;
	ВыгрузитьЖурналРегистрации(СобытияЖурнала, Отбор);
	
	СобытияЖурнала.Колонки.Дата.Имя = "ДатаНаСервере";
	СобытияЖурнала.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СобытиеЖурнала Из СобытияЖурнала Цикл
		СобытиеЖурнала.Дата = СобытиеЖурнала.ДатаНаСервере - СмещениеВремениСервера;
	КонецЦикла;
	
	СобытияЖурнала.Колонки.Удалить("ВспомогательныйIPПорт");
	СобытияЖурнала.Колонки.Удалить("Данные");
	СобытияЖурнала.Колонки.Удалить("ИмяПользователя");
	СобытияЖурнала.Колонки.Удалить("ИмяПриложения");
	СобытияЖурнала.Колонки.Удалить("Компьютер");
	СобытияЖурнала.Колонки.Удалить("Метаданные");
	СобытияЖурнала.Колонки.Удалить("ОсновнойIPПорт");
	СобытияЖурнала.Колонки.Удалить("Пользователь");
	СобытияЖурнала.Колонки.Удалить("ПредставлениеДанных");
	СобытияЖурнала.Колонки.Удалить("ПредставлениеМетаданных");
	СобытияЖурнала.Колонки.Удалить("ПредставлениеПриложения");
	СобытияЖурнала.Колонки.Удалить("ПредставлениеСобытия");
	СобытияЖурнала.Колонки.Удалить("РабочийСервер");
	СобытияЖурнала.Колонки.Удалить("Сеанс");
	СобытияЖурнала.Колонки.Удалить("Событие");
	СобытияЖурнала.Колонки.Удалить("Соединение");
	СобытияЖурнала.Колонки.Удалить("СтатусТранзакции");
	СобытияЖурнала.Колонки.Удалить("Транзакция");
	СобытияЖурнала.Колонки.Удалить("Уровень");
	СобытияЖурнала.Колонки.Удалить("ДатаНаСервере");
	
	// Успешное завершение
	Результат = Новый Структура;
	Результат.Вставить("СобытияЖурнала", СобытияЖурнала);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДеревоРазбора

Функция ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту)

	Возврат ЭлектронноеВзаимодействие.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту)
		
КонецФункции

Процедура ДобавитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита)
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита);
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение)
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение);
	
КонецПроцедуры

Функция ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке = Истина)
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке);
	
КонецФункции

Функция НайтиСоздатьСтрокуВДеревеРазбора(СтрокаТипаВДереве, ИдОбъекта, ОписаниеОбъекта, СсылкаНаОбъект, ДопРеквизиты, ДеревоРазбора, Ошибка)
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(СсылкаНаОбъект, "СсылкаНаОбъект");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
			НайденнаяСтрока.ИД = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа = ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта(СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки = СтрокаТипаВДереве.ИндексСтроки + "_"
				+ Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
			// Проверим, что Описания совпадают по одной ссылке
			Если НайденнаяСтрока.ОписаниеОбъекта <> ОписаниеОбъекта Тогда
				// Ошибка: по ссылке существуют в ЭД разные по Описанию объекты
				Ошибка = Истина;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка в данных эл.документа: на один Объект <%1>, два Описания <%2> и <%3>.'"), СсылкаНаОбъект,
					НайденнаяСтрока.ОписаниеОбъекта, ОписаниеОбъекта);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ИдОбъекта) Тогда
		
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ИдОбъекта, "ИД");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ИД              = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			Если СтрокаТипаВДереве.ТипОбъекта <> "Штамп" И СтрокаТипаВДереве.ТипОбъекта <> "БанковскийСчет" Тогда
				НайденнаяСтрока.ОписаниеТипа = ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта(
					СтрокаТипаВДереве.ТипОбъекта);
			КонецЕсли;
			НайденнаяСтрока.ИндексСтроки = СтрокаТипаВДереве.ИндексСтроки + "_"
				+ Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			Возврат НайденнаяСтрока;
		КонецЕсли;
	Иначе
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ОписаниеОбъекта, "ОписаниеОбъекта");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа    = ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта(
				СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

#КонецОбласти

#Область РаботаСXDTO

// Удаляет пространство имен из файла.
//
// Параметры:
//   ИмяФайла - Строка - путь к файлу на диске;
//   ПространствоИмен - Строка - удаляемое пространство имен.
//
Процедура УдалитьПространствоИмен(ИмяФайла, ПространствоИмен)
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	СтрокаФайл = Текст.ПолучитьСтроку(2);
	СтрокаФайл = СтрЗаменить(СтрокаФайл, "xmlns=""" + ПространствоИмен + """", "");
	Текст.ЗаменитьСтроку(2, СтрокаФайл);
	ТекстДокумента = Текст.ПолучитьТекст();
	
	Текст = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	Текст.Записать(ТекстДокумента);
	Текст.Закрыть();
	
КонецПроцедуры

Функция ТипОбъектаCML(Фабрика, URIПространстваИмен, Путь)
	
	МассивПути = ЭлектронноеВзаимодействиеСлужебный.МассивПодстрок(Путь, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = Фабрика.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	Иначе
		ТипОбъекта = Фабрика.Тип(URIПространстваИмен, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция СформироватьXMLФайлыДокументов(МассивОбъектовДляВыгрузки, ПараметрыОбмена, ДопПараметры = "")
	
	МассивСтруктурВозврата = Новый Массив;
	СтруктураВидовЭД = Новый Соответствие;
	
	Для Каждого ТекЭлемент Из МассивОбъектовДляВыгрузки Цикл
		ВидЭД = "";
		Если НЕ ЗначениеЗаполнено(ДопПараметры) ИЛИ НЕ ДопПараметры.Свойство("ВидЭД", ВидЭД) Тогда
			ПараметрыЭД = ПараметрыОбмена.Получить(ТекЭлемент.Ссылка);
			ПараметрыЭД.Свойство("ВидЭД", ВидЭД);
		КонецЕсли;
	
		МассивОбъектовПоВидуЭД = СтруктураВидовЭД.Получить(ВидЭД);
		Если МассивОбъектовПоВидуЭД = Неопределено Тогда
			МассивОбъектовПоВидуЭД = Новый Массив;
		КонецЕсли;
		МассивОбъектовПоВидуЭД.Добавить(ТекЭлемент);
		СтруктураВидовЭД.Вставить(ВидЭД, МассивОбъектовПоВидуЭД);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураВидовЭД Цикл
		
		Если ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда
			Макет = "ОбменСБанками.ПлатежноеПоручение";
			МетодЗаполненияДанных = "ЗаполнитьДанныеПлатежныхПоручений";
			МетодФормированияЭД = "СформироватьПлатежноеПоручение";
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование Тогда
			Макет = "ОбменСБанками.ПлатежноеТребование";
			МетодЗаполненияДанных = "ЗаполнитьДанныеПлатежныхТребований";
			МетодФормированияЭД = "СформироватьПлатежноеТребование";
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты Тогда
			Макет = "ОбменСБанками.ПоручениеНаПереводВалюты";
			МетодЗаполненияДанных = "ЗаполнитьДанныеПорученийНаПереводВалюты";
			МетодФормированияЭД = "СформироватьПоручениеНаПереводВалюты";
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты Тогда
			Макет = "ОбменСБанками.ПоручениеНаПокупкуВалюты";
			МетодЗаполненияДанных = "ЗаполнитьДанныеПорученийНаПокупкуВалюты";
			МетодФормированияЭД = "СформироватьПоручениеНаПокупкуВалюты";
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты Тогда
			Макет = "ОбменСБанками.ПоручениеНаПродажуВалюты";
			МетодЗаполненияДанных = "ЗаполнитьДанныеПорученийНаПродажуВалюты";
			МетодФормированияЭД = "СформироватьПоручениеНаПродажуВалюты";
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты Тогда
			Макет = "ОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты";
			МетодЗаполненияДанных = "ЗаполнитьДанныеРаспоряженийНаОбязательнуюПродажуВалюты";
			МетодФормированияЭД = "СформироватьРаспоряжениеНаОбязательнуюПродажуВалюты";
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.СправкаОПодтверждающихДокументах Тогда
			Макет = "ОбменСБанками.СправкаОПодтверждающихДокументах";
			МетодЗаполненияДанных = "ЗаполнитьДанныеСправокОПодтверждающихДокументах";
			МетодФормированияЭД = "СформироватьСправкуОПодтверждающихДокументах";
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.СписокНаОткрытиеСчетовПоЗарплатномуПроекту
			ИЛИ ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.СписокУволенныхСотрудников
			ИЛИ ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.СписокНаЗачислениеДенежныхСредствНаСчетаСотрудников Тогда
			Для Каждого ОбъектДляВыгрузки Из ТекЭлемент.Значение Цикл
				СтруктураВозврата = СформироватьЭДПоЗарплатномуПроекту(
					ОбъектДляВыгрузки, ПараметрыОбмена.Получить(ОбъектДляВыгрузки), ТекЭлемент.Ключ);
				Если ЗначениеЗаполнено(СтруктураВозврата) Тогда
					МассивСтруктурВозврата.Добавить(СтруктураВозврата);
				КонецЕсли;
			КонецЦикла;
			Продолжить;
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭДОбменСБанками.Письмо Тогда
			Для Каждого ОбъектДляВыгрузки Из ТекЭлемент.Значение Цикл
				СтруктураВозврата = Новый Структура;
				СформироватьПисьмо(ОбъектДляВыгрузки, ПараметрыОбмена.Получить(ОбъектДляВыгрузки), СтруктураВозврата);
				Если ЗначениеЗаполнено(СтруктураВозврата) Тогда
					МассивСтруктурВозврата.Добавить(СтруктураВозврата);
				КонецЕсли;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		Данные = Новый Массив;
		Для Каждого ОбъектДляВыгрузки Из ТекЭлемент.Значение Цикл
			ДеревоДокумента = ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента(Макет);
			Данные.Добавить(ДеревоДокумента);
		КонецЦикла;
		
		ПараметрыПроцедуры = Новый Массив;
		ПараметрыПроцедуры.Добавить(ТекЭлемент.Значение);
		ПараметрыПроцедуры.Добавить(Данные);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("ОбменСБанкамиПереопределяемый." + МетодЗаполненияДанных,
			ПараметрыПроцедуры);
	
		Счетчик = 0;
		Для Каждого ДеревоДанных Из Данные Цикл
			ДокументИБ = ТекЭлемент.Значение.Получить(Счетчик);
			Если ТипЗнч(ДеревоДанных) = Тип("Строка") Тогда
				ТекстОшибки = НСтр("ru = 'Не сформирован электронный документ для документа: %1
									|Причина: %2'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ДокументИБ, ДеревоДанных);
				Операция = НСтр("ru = 'Получение данных для формирования электронного документа'");
				ОбработатьОшибку(Операция, ТекстОшибки, ТекстОшибки, ДокументИБ);
				Продолжить;
			КонецЕсли;
			СтруктураВозврата = Новый Структура;
			ПараметрыПроцедуры = Новый Массив;
			ПараметрыПроцедуры.Добавить(ДокументИБ);
			ПараметрыПроцедуры.Добавить(ПараметрыОбмена.Получить(ДокументИБ));
			ПараметрыПроцедуры.Добавить(ДеревоДанных);
			ПараметрыПроцедуры.Добавить(СтруктураВозврата);
			Попытка
				ОбщегоНазначения.ВыполнитьМетодКонфигурации(
					"ОбменСБанкамиСлужебный" + "." + МетодФормированияЭД, ПараметрыПроцедуры);
				МассивСтруктурВозврата.Добавить(СтруктураВозврата);
			Исключение
				ТекстОшибки = НСтр("ru = 'Не сформирован электронный документ для документа: %1
									|Причина: %2'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ДокументИБ, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				Операция = НСтр("ru = 'Формирование электронного документа'");
				ОбработатьОшибку(Операция, ТекстОшибки, ТекстОшибки, ДокументИБ);
			КонецПопытки;
			Счетчик = Счетчик + 1;
		КонецЦикла
	КонецЦикла;
	
	Возврат МассивСтруктурВозврата;
	
КонецФункции

Процедура СформироватьПлатежноеТребованиеAsync(СсылкаНаДокумент, ДеревоДанных, АдресФайлаВоВременномХранилище)
	
	ВерсияФормата = ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияФормата");
	
	Если НЕ ЗначениеЗаполнено(ВерсияФормата) Тогда
		ВерсияФормата = ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	ПространствоИмен = ПространствоИменАсинхронногоОбмена(ВерсияФормата);
	Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
	
	ТекстОшибки = "";
		
	ЭД = ОбъектТипаCML(Фабрика, "PayRequest", ПространствоИмен);
	
	ИдДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдДокумента");
	ЗаполнитьСвойствоXDTO(ЭД, "id", ИдДокумента, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ЭД, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);

	ЗаполнитьСвойствоXDTO(ЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
	userAgent = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
	ЗаполнитьСвойствоXDTO(ЭД, "userAgent", userAgent, , ТекстОшибки);
	
	Отправитель = ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
	ИдКлиента = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдКлиента");
	ЗаполнитьСвойствоXDTO(Отправитель, "id", ИдКлиента, Истина, ТекстОшибки);
	ПолучательНаименование = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПолучателя.Наименование");
	ЗаполнитьСвойствоXDTO(Отправитель, "name", ПолучательНаименование, Истина, ТекстОшибки);
	ПолучательИНН = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.ИНН");
	ЗаполнитьСвойствоXDTO(Отправитель, "inn", ПолучательИНН, , ТекстОшибки);
	ПолучательКПП = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.КПП");
	ЗаполнитьСвойствоXDTO(Отправитель, "kpp", ПолучательКПП, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ЭД, "Sender", Отправитель, Истина, ТекстОшибки);
	
	Банк = ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
	ПолучательБИКБанка = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПолучателя.Банк.БИК");
	ЗаполнитьСвойствоXDTO(Банк, "bic", ПолучательБИКБанка, Истина, ТекстОшибки);
	ПолучательНаименованиеБанка = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПолучателя.Банк.Наименование");
	ЗаполнитьСвойствоXDTO(Банк, "name", ПолучательНаименованиеБанка, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ЭД, "Recipient", Банк, Истина, ТекстОшибки);
	
	ДанныеПлатежа = ОбъектТипаCML(Фабрика, "PayRequest.Data", ПространствоИмен);
	
	Номер = ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "DocNo", Номер, Истина, ТекстОшибки);
	Дата = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "DocDate", Дата, Истина, ТекстОшибки);
	Сумма = ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Sum", Сумма, Истина, ТекстОшибки);
	
	РеквизитыПлательщика = ОбъектТипаCML(Фабрика, "CustomerDetailsType", ПространствоИмен);
	ПлательщикНаименование = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.Наименование");
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Name", ПлательщикНаименование, Истина, ТекстОшибки);
	ПлательщикИНН = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.ИНН");
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "INN", ПлательщикИНН, , ТекстОшибки);
	ПлательщикКПП = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.КПП");
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "KPP", ПлательщикКПП, , ТекстОшибки);
	ПлательщикРасчСчет = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.РасчСчет");
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Account", ПлательщикРасчСчет, , ТекстОшибки);
	
	БанкПлательщика = ОбъектТипаCML(Фабрика, "BankType", ПространствоИмен);
	ПлательщикБИКБанка = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.Банк.БИК");
	ЗаполнитьСвойствоXDTO(БанкПлательщика, "BIC", ПлательщикБИКБанка, Истина, ТекстОшибки);
	ПлательщикНаименованиеБанка = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.Банк.Наименование");
	ЗаполнитьСвойствоXDTO(БанкПлательщика, "Name", ПлательщикНаименованиеБанка, , ТекстОшибки);
	ПлательщикГородБанка = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.Банк.Город");
	ЗаполнитьСвойствоXDTO(БанкПлательщика, "City", ПлательщикГородБанка, , ТекстОшибки);
	ПлательщикКоррСчетБанка = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.Банк.КоррСчет");
	ЗаполнитьСвойствоXDTO(БанкПлательщика, "CorrespAcc", ПлательщикКоррСчетБанка, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Bank", БанкПлательщика, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Payer", РеквизитыПлательщика, Истина, ТекстОшибки);
	
	РеквизитыПолучателя = ОбъектТипаCML(Фабрика, "CustomerDetailsType", ПространствоИмен);
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Name", ПолучательНаименование, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "INN", ПолучательИНН, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "KPP", ПолучательКПП, , ТекстОшибки);
	ПолучательРасчСчет = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПолучателя.РасчСчет");
		
	Если ЗначениеЗаполнено(ПолучательРасчСчет) И СтрДлина(СокрЛП(ПолучательРасчСчет)) <> 20 Тогда
		ТекстОшибки = НСтр("ru = 'Некорректный номер счета получателя %1
							|Длина номера счета должна состоять из 20 цифр.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПолучательРасчСчет);
	КонецЕсли;

	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Account", ПолучательРасчСчет, , ТекстОшибки);
	
	БанкПолучателя = ОбъектТипаCML(Фабрика, "BankType", ПространствоИмен);
	ЗаполнитьСвойствоXDTO(БанкПолучателя, "BIC", ПолучательБИКБанка, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БанкПолучателя, "Name", ПолучательНаименованиеБанка, , ТекстОшибки);
	ПолучательГородБанка = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПолучателя.Банк.Город");
	ЗаполнитьСвойствоXDTO(БанкПолучателя, "City", ПолучательГородБанка, , ТекстОшибки);
	ПолучательКоррСчет = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПолучателя.Банк.КоррСчет");
	ЗаполнитьСвойствоXDTO(БанкПолучателя, "CorrespAcc", ПолучательКоррСчет, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Bank", БанкПолучателя, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Payee", РеквизитыПолучателя, Истина, ТекстОшибки);
	
	ВидПлатежа = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ВидПлатежа");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "PaymentKind", ВидПлатежа, , ТекстОшибки);
	ВидОплаты = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ВидОплаты");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "TransitionKind", ВидОплаты, , ТекстОшибки);
	Очередность = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.Очередность");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Priority", Очередность, , ТекстОшибки);
	Код = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.Код");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Code", Код, , ТекстОшибки);
	НазначениеПлатежа = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлатежа.НазначениеПлатежа");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Purpose", НазначениеПлатежа, Истина, ТекстОшибки);
	
	УсловиеОплаты = ЗначениеРеквизитаВДереве(ДеревоДанных, "УсловиеОплаты");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "PaymentCondition", УсловиеОплаты, Истина, ТекстОшибки);
	СрокАкцепта = ЗначениеРеквизитаВДереве(ДеревоДанных, "СрокАкцепта");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "AcceptTerm", СрокАкцепта, , ТекстОшибки);
	ДатаОтсылкиДокументов = ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтсылкиДокументов");
	Если ЗначениеЗаполнено(ДатаОтсылкиДокументов) Тогда
		ДатаСтрокой = Формат(ДатаОтсылкиДокументов, ФорматДатыРоссия());
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "DocDispatchDate", ДатаСтрокой, , ТекстОшибки);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(ЭД, "Data", ДанныеПлатежа, Истина, ТекстОшибки);
	
	ЭД.Проверить();
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	Иначе
		ДвоичныеДанные = ДвоичныеДанныеИзXDTO(Фабрика, ЭД, Ложь);
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеИзОтветаБанка(ОтветБанка)
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ОтветБанка.Записать(ВремФайл);
	СодержимоеФайла = Новый Соответствие;
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ВремФайл);
		
	URI = "urn:x-obml:1.0";
	Попытка
		Message = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(URI, "CMSDETACHED"));
		СодержимоеФайла.Вставить("Данные", Message.data.__content);
		Подписи = Новый Массив;
		Для Каждого Подпись Из Message.signature Цикл
			Подписи.Добавить(Подпись);
		КонецЦикла;
		СодержимоеФайла.Вставить("Подписи", Подписи);
	Исключение
		СодержимоеФайла.Вставить("Данные", ОтветБанка);
	КонецПопытки;
	Чтение.Закрыть();
	
	ФайловаяСистема.УдалитьВременныйФайл(ВремФайл);
	
	Возврат СодержимоеФайла;

КонецФункции

Функция ПрочитатьФайлПоСхеме(ВидЭД, ДанныеФайла, ДеревоРазбора, НовыйЭД)
	
	ОбъектXML = Новый ЧтениеXML;
	Ошибка = Ложь;
	НеизвестныйЭД = Ложь;
	
	ПотокВПамяти = ДанныеФайла.ОткрытьПотокДляЧтения();
	
	Попытка
		
		ОбъектXML.ОткрытьПоток(ПотокВПамяти);
		Если ОбъектXML.Прочитать() Тогда
			ИмяКорневогоЭлемента = ВРег(ОбъектXML.Имя);
		КонецЕсли;
		
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		Если ВРег(ЭД.Тип().Имя) = ВРег("anyType") Тогда // не указан тип элемента в явном виде
			ПотокВПамяти.Перейти(0, ПозицияВПотоке.Начало);
			ОбъектXML.ОткрытьПоток(ПотокВПамяти);
			Если ЭД.Свойства().Получить("СекцияРасчСчет") <> Неопределено Тогда
				ClientBankExchange = ТипЗначенияCML(ФабрикаXDTO, "urn:1C.ru:ClientBankExchange", "ClientBankExchange");
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ClientBankExchange);
				ПрочитатьВыпискуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли ЭД.Свойства().Получить("Info") <> Неопределено Тогда
				ПрочитатьКвитанциюСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли ЭД.Свойства().Получить("stmtDateTime") <> Неопределено Тогда
				ПрочитатьВыпискуСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли ЭД.Свойства().Получить("BkToCstmrStmt") <> Неопределено Тогда
				ПрочитатьВалютнуюВыпискуISO(ЭД, ДеревоРазбора, НовыйЭД);
			ИначеЕсли ЭД.Свойства().Получить("CstmrCdtTrfInitn") <> Неопределено Тогда
				ПрочитатьПлатежноеПоручениеISO(ЭД, ДеревоРазбора, НовыйЭД);
			Иначе // читаем файл по типу, имя которого совпадает с типом объекта XDTO
				
				Если ЭД.Свойства().Получить("formatVersion") = Неопределено Тогда
					НеизвестныйЭД = Истина;
				Иначе
					ПространствоИменАсинхрОбмена = ПространствоИменАсинхронногоОбмена(ЭД.formatVersion);
					Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ЭД.formatVersion);
					Если Фабрика = Неопределено Тогда
						НеизвестныйЭД = Истина;
					Иначе
						Если ИмяКорневогоЭлемента = ВРег("PayDocRu") Тогда // платежное поручение рублевое
							PayDocRu = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "PayDocRu");
							ЭД = Фабрика.ПрочитатьXML(ОбъектXML, PayDocRu);
							ПрочитатьПлатежноеПоручениеAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						ИначеЕсли ИмяКорневогоЭлемента = ВРег("PayRequest") Тогда // платежное требование рублевое
							PayRequest = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "PayRequest");
							ЭД = Фабрика.ПрочитатьXML(ОбъектXML, PayRequest);
							ПрочитатьПлатежноеТребованиеAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						ИначеЕсли ИмяКорневогоЭлемента = ВРег("Statement") Тогда // выписка
							// "Мягкое" чтение выписки банка
							ПрочитатьВыпискуAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						ИначеЕсли ИмяКорневогоЭлемента = ВРег("StatementRequest") Тогда // запрос на выписку
							StatementRequest = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "StatementRequest");
							ЭД = Фабрика.ПрочитатьXML(ОбъектXML, StatementRequest);
							ПрочитатьЗапросВыпискиAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						ИначеЕсли ИмяКорневогоЭлемента = ВРег("StatusDocNotice") Тогда // извещение о состоянии ЭД
							StatusDocNotice = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "StatusDocNotice");
							ЭД = Фабрика.ПрочитатьXML(ОбъектXML, StatusDocNotice);
							ПрочитатьИзвещениеОСостоянииAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						ИначеЕсли ИмяКорневогоЭлемента = ВРег("StatusRequest") Тогда // запрос о состоянии ЭД
							StatusRequest = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "StatusRequest");
							ЭД = Фабрика.ПрочитатьXML(ОбъектXML, StatusRequest);
							ПрочитатьЗапросОСостоянииAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						ИначеЕсли ИмяКорневогоЭлемента = ВРег("Probe") Тогда // запрос - зонд
							Probe = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "Probe");
							ЭД = Фабрика.ПрочитатьXML(ОбъектXML, Probe);
							ПрочитатьЗапросЗондAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						ИначеЕсли ИмяКорневогоЭлемента = ВРег("CancelationRequest") Тогда // запрос на отзыв ЭД
							ТипCancelationRequest = ТипЗначенияCML(Фабрика, ПространствоИменАсинхрОбмена, "CancelationRequest");
							ЭД = Фабрика.ПрочитатьXML(ОбъектXML, ТипCancelationRequest);
							ПрочитатьЗапросНаОтзывAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						Иначе
							НеизвестныйЭД = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе // тип указан в явном виде
			Если ЭД.Тип() = ТипЗначенияCML(ФабрикаXDTO, "urn:1C.ru:ClientBankExchange", "ClientBankExchange") Тогда
				Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда
					ПрочитатьПлатежноеПоручениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
				ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка Тогда
					ПрочитатьВыпискуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
				Иначе
					ПрочитатьЗапросВыпискиXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
				КонецЕсли;
			ИначеЕсли ЭД.Тип() = ТипЗначенияCML(ФабрикаXDTO,"http://bssys.com/upg/request", "PayDocRu") Тогда
				ПрочитатьПлатежноеПоручениеСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли ЭД.Тип() = ТипЗначенияCML(ФабрикаXDTO,"http://bssys.com/upg/request", "StmtReqType") Тогда
				ПрочитатьЗапросВыпискиСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли ЭД.Тип() = ТипЗначенияCML(ФабрикаXDTO,"urn:iso:std:iso:20022:tech:xsd:pain.001.001.03", "Document") Тогда
				ПрочитатьПлатежноеПоручениеISO(ЭД, ДеревоРазбора, НовыйЭД);
			ИначеЕсли ЭД.Тип() = ТипЗначенияCML(ФабрикаXDTO,"http://bssys.com/upg/request", "PayDocCur") Тогда
				ПрочитатьПоручениеНаПереводВалютыСбербанк(ЭД, ДеревоРазбора, НовыйЭД);
			ИначеЕсли ЭД.Тип() = ТипЗначенияCML(ФабрикаXDTO,"http://bssys.com/upg/request", "CurrBuy") Тогда
				ПрочитатьПоручениеНаПокупкуВалютыСбербанк(ЭД, ДеревоРазбора, НовыйЭД);
			ИначеЕсли ЭД.Тип() = ТипЗначенияCML(ФабрикаXDTO,"http://bssys.com/upg/request", "CurrSell") Тогда
				ПрочитатьПоручениеНаПродажуВалютыСбербанк(ЭД, ДеревоРазбора, НовыйЭД);
			ИначеЕсли ЭД.Тип() = ТипЗначенияCML(ФабрикаXDTO,"http://bssys.com/upg/request", "MandatorySale") Тогда
				ПрочитатьРаспоряжениеНаОбязательнуюПродажуВалютыСбербанк(ЭД, ДеревоРазбора, НовыйЭД);
			Иначе
				НеизвестныйЭД = Истина;
			КонецЕсли;
		КонецЕсли;
		Если НеизвестныйЭД Тогда
			Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				ДанныеФайла.Записать(ИмяФайла);
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Электронный документ содержит неизвестный тип данных.
								|Путь к файлу: %1.'"), ИмяФайла);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Ошибка = Истина;
		КонецЕсли;
	Исключение
		Ошибка = Истина;
		ТекстСообщения = "";
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			ДанныеФайла.Записать(ИмяФайла);
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Чтение ЭД.'");
		ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
	КонецПопытки;
	ОбъектXML.Закрыть();

	Возврат НЕ Ошибка;
	
КонецФункции

Процедура ПрочитатьВыпискуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",   ЭД.Отправитель);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",    ЭД.Получатель);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСоздания",  ЭД.ДатаСоздания);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяСоздания", ЭД.ВремяСоздания);
	Если НЕ ЭД.СекцияРасчСчет = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", ЭД.СекцияРасчСчет.ДатаНачала);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца",  ЭД.СекцияРасчСчет.ДатаКонца);
		Если ЭД.СекцияРасчСчет.РасчСчета.Количество()>0 Тогда
			
			Для Каждого РеквизитыРасчСчета Из ЭД.СекцияРасчСчет.РасчСчета Цикл
				СписокТЧ = Новый СписокЗначений;
				ПараметрыСчета = Новый Структура;
				ПараметрыСчета.Вставить("РасчСчет",         РеквизитыРасчСчета.РасчСчет);
				ПараметрыСчета.Вставить("НачальныйОстаток", РеквизитыРасчСчета.НачальныйОстаток);
				ПараметрыСчета.Вставить("ВсегоПоступило",   РеквизитыРасчСчета.ВсегоПоступило);
				ПараметрыСчета.Вставить("ВсегоСписано",     РеквизитыРасчСчета.ВсегоСписано);
				ПараметрыСчета.Вставить("КонечныйОстаток",  РеквизитыРасчСчета.КонечныйОстаток);
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(
					ДеревоРазбора, "БанковскийСчет");
				РасчетныйСчет = ЭлектронноеВзаимодействие.НайтиСсылку(
					"БанковскиеСчетаОрганизаций", РеквизитыРасчСчета.РасчСчет);
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыРасчСчета.РасчСчет, Неопределено,
					РасчетныйСчет, ПараметрыСчета, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "БанковскийСчет");
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "БанковскиеСчетаОрганизаций", СписокТЧ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭД.УсловияОтбора = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", ЭД.УсловияОтбора.ДатаНачала);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца",  ЭД.УсловияОтбора.ДатаКонца);
	КонецЕсли;
	
	Для Каждого ЭлементПлатежа Из ЭД.СекцияПлатежногоДокумента Цикл
		РеквизитыПлатежа = Новый СписокЗначений;
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.СекцияДокумент, "СекцияДокумент");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.Номер, "Номер");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.Дата,  "Дата");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.Сумма, "Сумма");
		Если НЕ ЭлементПлатежа.Квитанция = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.Квитанция.КвитанцияДата,       "КвитанцияДата");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.Квитанция.КвитанцияВремя,      "КвитанцияВремя");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.Квитанция.КвитанцияСодержание, "КвитанцияСодержание");
		КонецЕсли;
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикСчет, "ПлательщикСчет");
		Если НЕ ЭлементПлатежа.РеквизитыПлательщика.ДатаСписано = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ДатаСписано.__content, "ДатаСписано");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ДатаСписано.ИдПлатежа, "ИдПлатежа");
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементПлатежа.РеквизитыПлательщика.Плательщик1) Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик1, "ПлательщикНаименование");
		Иначе
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик, "ПлательщикНаименование");
		КонецЕсли;
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикРасчСчет, "ПлательщикРасчСчет");
		Если ЗначениеЗаполнено(ЭлементПлатежа.РеквизитыПлательщика.Плательщик1) Тогда
			РеквизитыПлатежа.Добавить(Истина, "НепрямыеРасчетыУПлательщика");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик1, "ПлательщикНаименованиеНепрямыеРасчеты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик2, "ПлательщикСчетНепрямыеРасчеты");
			РеквизитыПлатежа.Добавить(
				ЭлементПлатежа.РеквизитыПлательщика.Плательщик3, "ПлательщикНаименованиеБанкаНепрямыеРасчеты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.Плательщик4, "ПлательщикГородБанкаНепрямыеРасчеты");
		Иначе
			РеквизитыПлатежа.Добавить(Ложь, "НепрямыеРасчетыУПлательщика");
		КонецЕсли;
		
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикИНН, "ПлательщикИНН");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикКПП, "ПлательщикКПП");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикБанк1, "ПлательщикНаименованиеБанка");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикБанк2, "ПлательщикГородБанка");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикБИК, "ПлательщикБИКБанка");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлательщика.ПлательщикКорсчет, "ПлательщикКорСчетБанка");
		
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательСчет, "ПолучательСчет");
		
		
		Если НЕ ЭлементПлатежа.РеквизитыПолучателя.ДатаПоступило = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ДатаПоступило.__content, "ДатаПоступило");
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементПлатежа.РеквизитыПолучателя.Получатель1) Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель1, "ПолучательНаименование");
		Иначе
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель, "ПолучательНаименование");
		КонецЕсли;

		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательРасчСчет, "ПолучательРасчСчет");
		Если ЗначениеЗаполнено(ЭлементПлатежа.РеквизитыПолучателя.Получатель1) Тогда
			РеквизитыПлатежа.Добавить(Истина, "НепрямыеРасчетыУПолучателя");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель1, "ПолучательНаименованиеНепрямыеРасчеты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель2, "ПолучательСчетНепрямыеРасчеты");
			РеквизитыПлатежа.Добавить(
				ЭлементПлатежа.РеквизитыПолучателя.Получатель3, "ПолучательНаименованиеБанкаНепрямыеРасчеты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.Получатель4, "ПолучательГородБанкаНепрямыеРасчеты");
		Иначе
			РеквизитыПлатежа.Добавить(Ложь, "НепрямыеРасчетыУПолучателя");
		КонецЕсли;
		
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательИНН, "ПолучательИНН");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательКПП, "ПолучательКПП");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательБанк1, "ПолучательНаименованиеБанка");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательБанк2, "ПолучательГородБанка");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательБИК, "ПолучательБИКБанка");
		РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПолучателя.ПолучательКорсчет, "ПолучательКорСчетБанка");
		
		Если НЕ ЭлементПлатежа.РеквизитыПлатежа = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.ВидПлатежа,         "ВидПлатежа");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.ВидОплаты,          "ВидОплаты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.Очередность,        "Очередность");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.Код,                "Код");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа,  "НазначениеПлатежа");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа1, "НазначениеПлатежа1");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа2, "НазначениеПлатежа2");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа3, "НазначениеПлатежа3");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа4, "НазначениеПлатежа4");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа5, "НазначениеПлатежа5");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.РеквизитыПлатежа.НазначениеПлатежа6, "НазначениеПлатежа6");
		КонецЕсли;
		
		Если НЕ ЭлементПлатежа.ПлатежиВБюджет = Неопределено Тогда
			РеквизитыПлатежа.Добавить(Истина, "ЭтоПлатежВБюджет");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.СтатусСоставителя,   "СтатусСоставителя");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательКБК,       "ПоказательКБК");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ОКАТО,               "ОКТМО");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательОснования, "ПоказательОснования");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательПериода,   "ПоказательПериода");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательНомера,    "ПоказательНомера");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательДаты,      "ПоказательДаты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ПлатежиВБюджет.ПоказательТипа,      "КодВыплат");
		Иначе
			РеквизитыПлатежа.Добавить(Ложь, "ЭтоПлатежВБюджет");
		КонецЕсли;
		
		Если НЕ ЭлементПлатежа.ДополнительныеРеквизиты = Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.СрокАкцепта,          "СрокАкцепта");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ВидАккредитива,       "ВидАккредитива");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.СрокПлатежа,          "СрокПлатежа");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.УсловиеОплаты,        "УсловиеОплаты");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ПлатежПоПредст,       "ПлатежПоПредст");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ДополнУсловия,        "ДополнУсловия");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.НомерСчетаПоставщика, "НомерСчетаПоставщика");
			РеквизитыПлатежа.Добавить(ЭлементПлатежа.ДополнительныеРеквизиты.ДатаОтсылкиДок,       "ДатаОтсылкиДок");
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыПлатежа);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьЗапросВыпискиXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки;
	
	ЗапросВыписки = ЭД.УсловияОтбора;
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ДатаНачала", ЗапросВыписки.ДатаНачала);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ДатаКонца", ЗапросВыписки.ДатаКонца);
	Для Каждого Элемент Из ЗапросВыписки.РасчСчет Цикл
		РеквизитыСчета = Новый СписокЗначений;
		РеквизитыСчета.Добавить(Элемент, "НомерСчета");
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыСчета);
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьПлатежноеПоручениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение;
	
	ПлатежныйДокумент = ЭД.СекцияПлатежногоДокумента[0];
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ПлатежныйДокумент.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ПлатежныйДокумент.Дата);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "СекцияДокумент", ПлатежныйДокумент.СекцияДокумент);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ПлатежныйДокумент.Сумма);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ПлатежныйДокумент.Сумма);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИдентификаторДокумента", ПлатежныйДокумент.ИдДокумента);
	Если Не ПлатежныйДокумент.ПлатежиВБюджет = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЭтоПлатежВБюджет",  Истина);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтатусСоставителя", ПлатежныйДокумент.ПлатежиВБюджет.СтатусСоставителя);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательКБК", ПлатежныйДокумент.ПлатежиВБюджет.ПоказательКБК);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКТМО", ПлатежныйДокумент.ПлатежиВБюджет.ОКАТО);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательОснования", ПлатежныйДокумент.ПлатежиВБюджет.ПоказательОснования);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательПериода", ПлатежныйДокумент.ПлатежиВБюджет.ПоказательПериода);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательНомера", ПлатежныйДокумент.ПлатежиВБюджет.ПоказательНомера);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательДаты", ПлатежныйДокумент.ПлатежиВБюджет.ПоказательДаты);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КодВыплат", ПлатежныйДокумент.ПлатежиВБюджет.ПоказательТипа);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЭтоПлатежВБюджет",  Ложь);
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидОплаты", ПлатежныйДокумент.РеквизитыПлатежа.ВидОплаты);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидПлатежа", ПлатежныйДокумент.РеквизитыПлатежа.ВидПлатежа);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Код", ПлатежныйДокумент.РеквизитыПлатежа.Код);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа1", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа1);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа2", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа2);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа3", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа3);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа4", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа4);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа5", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа5);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа6", ПлатежныйДокумент.РеквизитыПлатежа.НазначениеПлатежа6);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Очередность", ПлатежныйДокумент.РеквизитыПлатежа.Очередность);
	РеквизитыПлательщика = ПлатежныйДокумент.РеквизитыПлательщика;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСписано", РеквизитыПлательщика.ДатаСписано);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикНаименование", РеквизитыПлательщика.Плательщик1);
	Если Не ЗначениеЗаполнено(ПлатежныйДокумент.РеквизитыПлательщика.Плательщик1) Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикНаименование", РеквизитыПлательщика.Плательщик);
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикБИКБанка", РеквизитыПлательщика.ПлательщикБИК);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикНаименованиеБанка", РеквизитыПлательщика.ПлательщикБанк1);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикГородБанка", РеквизитыПлательщика.ПлательщикБанк2);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикГородБанкаДляРасчетов", РеквизитыПлательщика.Плательщик4);
	Если ЗначениеЗаполнено(ПлатежныйДокумент.РеквизитыПлательщика.Плательщик3) Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НепрямыеРасчетыУПлательщика", Истина);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКоррСчетБанка", РеквизитыПлательщика.Плательщик2);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКоррСчетБанкаДляРасчетов", РеквизитыПлательщика.ПлательщикКорсчет);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикНаименованиеБанкаДляРасчетов", РеквизитыПлательщика.Плательщик3);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НепрямыеРасчетыУПлательщика", Ложь);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКоррСчетБанка", РеквизитыПлательщика.ПлательщикРасчСчет);
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикИНН", РеквизитыПлательщика.ПлательщикИНН);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКПП", РеквизитыПлательщика.ПлательщикКПП);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКорсчет", РеквизитыПлательщика.ПлательщикКорсчет);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикРасчСчет", РеквизитыПлательщика.ПлательщикСчет);
	
	РеквизитыПолучателя = ПлатежныйДокумент.РеквизитыПолучателя;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоступило", РеквизитыПолучателя.ДатаПоступило);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательНаименование", РеквизитыПолучателя.Получатель1);
	Если Не ЗначениеЗаполнено(ПлатежныйДокумент.РеквизитыПолучателя.Получатель1) Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательНаименование", РеквизитыПолучателя.Получатель);
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательБИКБанка", РеквизитыПолучателя.ПолучательБИК);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательНаименованиеБанка", РеквизитыПолучателя.ПолучательБанк1);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательГородБанка", РеквизитыПолучателя.ПолучательБанк2);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательГородБанкаДляРасчетов", РеквизитыПолучателя.Получатель4);
	Если ЗначениеЗаполнено(ПлатежныйДокумент.РеквизитыПолучателя.Получатель3) Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НепрямыеРасчетыУПолучателя", Истина);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКоррСчетБанка", РеквизитыПолучателя.Получатель2);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательНаименованиеБанкаДляРасчетов", РеквизитыПолучателя.Получатель3);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКоррСчетБанкаДляРасчетов", РеквизитыПолучателя.ПолучательКорсчет);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НепрямыеРасчетыУПолучателя", Ложь);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКоррСчетБанка", РеквизитыПолучателя.ПолучательРасчСчет);
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательИНН", РеквизитыПолучателя.ПолучательИНН);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКПП", РеквизитыПолучателя.ПолучательКПП);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКорсчет", РеквизитыПолучателя.ПолучательКорсчет);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательРасчСчет", РеквизитыПолучателя.ПолучательСчет);

КонецПроцедуры

Процедура ПрочитатьВыпискуAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка;
	Stmt = ЭД;
	StmtData = Stmt.Data;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.id);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель", ЗначениеСвойстваXDTO(Stmt.Sender, "Name"));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель", ЗначениеСвойстваXDTO(Stmt.Recipient, "Name"));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", XMLЗначение(Тип("Дата"), Stmt.creationDate));
	ДатаНачалаСтрокой = ЗначениеСвойстваXDTO(StmtData, "DateFrom");
	Если ДатаНачалаСтрокой <> Неопределено Тогда
		ДатаНачала = XMLЗначение(Тип("Дата"), ДатаНачалаСтрокой);
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", ДатаНачала);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца", XMLЗначение(Тип("Дата"), StmtData.DateTo));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТипВыписки", StmtData.StatementType);
	
	СписокТЧ = Новый СписокЗначений;
	ПараметрыСчета = Новый Структура;
	ПараметрыСчета.Вставить("РасчСчет", StmtData.Account);
	
	НачальныйОстаток = ЗначениеСвойстваXDTO(StmtData, "OpeningBalance");
	НачальныйОстаток = ?(НачальныйОстаток = Неопределено, НачальныйОстаток, Число(НачальныйОстаток));
	ПараметрыСчета.Вставить("НачальныйОстаток", НачальныйОстаток);
	ВсегоПоступило = ЗначениеСвойстваXDTO(StmtData, "TotalCredits");
	ВсегоПоступило = ?(ВсегоПоступило = Неопределено, ВсегоПоступило, Число(ВсегоПоступило));
	ПараметрыСчета.Вставить("ВсегоПоступило", ВсегоПоступило);
	ВсегоСписано = ЗначениеСвойстваXDTO(StmtData, "TotalDebits");
	ВсегоСписано = ?(ВсегоСписано = Неопределено, ВсегоСписано, Число(ВсегоСписано));
	ПараметрыСчета.Вставить("ВсегоСписано", ВсегоСписано);
	ПараметрыСчета.Вставить("КонечныйОстаток", Число(StmtData.ClosingBalance));
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(
		ДеревоРазбора, "БанковскийСчет");
	РасчетныйСчет = ЭлектронноеВзаимодействие.НайтиСсылку("БанковскиеСчетаОрганизаций", ПараметрыСчета.РасчСчет);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(
		НайденныйТипВДереве, ПараметрыСчета.РасчСчет, Неопределено, РасчетныйСчет, ПараметрыСчета, ДеревоРазбора, Ошибка);
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "БанковскийСчет");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "БанковскиеСчетаОрганизаций", СписокТЧ);
	
	Stamp = ЗначениеСвойстваXDTO(StmtData, "Stamp");
	Если Stamp <> Неопределено Тогда
		ПараметрыШтампа = Новый Структура;
		ПараметрыШтампа.Вставить("БИК", StmtData.Stamp.BIC);
		ПараметрыШтампа.Вставить("НаименованиеБанка", ЗначениеСвойстваXDTO(StmtData.Stamp, "Name"));
		ПараметрыШтампа.Вставить("ГородБанка", ЗначениеСвойстваXDTO(StmtData.Stamp, "City"));
		ПараметрыШтампа.Вставить("КоррСчетБанка", ЗначениеСвойстваXDTO(StmtData.Stamp, "CorrespAcc"));
		ПараметрыШтампа.Вставить("ОтделениеБанка", ЗначениеСвойстваXDTO(StmtData.Stamp, "Branch"));
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(
			ДеревоРазбора, "Штамп");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(
			НайденныйТипВДереве, "Штамп", Неопределено, Неопределено, ПараметрыШтампа, ДеревоРазбора, Ошибка);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Штамп", НайденнаяСтрока.ИндексСтроки);
	КонецЕсли;
	
	Если НЕ ЗначениеСвойстваXDTO(StmtData, "OperationInfo") = Неопределено Тогда
		Операции = ЗначениеСвойстваXDTO(StmtData, "OperationInfo");
		Если ТипЗнч(Операции) = Тип("ОбъектXDTO") Тогда
			ПрочитатьОперациюВыписки(ЭД, Операции, НовыйЭД);
		Иначе
			Для Каждого Операция Из Операции Цикл
				ПрочитатьОперациюВыписки(ЭД, Операция, НовыйЭД);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьОперациюВыписки(ЭД, Operation, НовыйЭД)
	
	РеквизитыПлатежа = Новый СписокЗначений;
	
	ДатаОперации = XMLЗначение(Тип("Дата"), Сред(Operation.Date, 1, 10));
	
	Если Operation.DC = "1" Тогда // списание с лиц.счета
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Operation, "ExtID"), "ИдПлатежа");
		РеквизитыПлатежа.Добавить(ДатаОперации, "ДатаСписано");
		РеквизитыПлатежа.Добавить(Истина, "ПлатежИсходящий");
	ИначеЕсли Operation.DC = "2" Тогда // поступление на лиц.счет
		РеквизитыПлатежа.Добавить(ДатаОперации, "ДатаПоступило");
		РеквизитыПлатежа.Добавить(Ложь, "ПлатежИсходящий");
	Иначе
		Возврат;
	КонецЕсли;
	
	ЭтоМемориальныйОрдер = Ложь;
	
	Если ЗначениеСвойстваXDTO(Operation.PayDoc, "PayDocRu") <> Неопределено Тогда
		PayData = Operation.PayDoc.PayDocRu;
		РеквизитыПлатежа.Добавить("Платежное поручение", "СекцияДокумент");
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "PayRequest") <> Неопределено Тогда
		PayData = Operation.PayDoc.PayRequest;
		РеквизитыПлатежа.Добавить("Платежное требование", "СекцияДокумент");
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "CollectionOrder") <> Неопределено Тогда
		PayData = Operation.PayDoc.CollectionOrder;
		РеквизитыПлатежа.Добавить("Инкассовое поручение", "СекцияДокумент");
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "PaymentOrder") <> Неопределено Тогда
		PayData = Operation.PayDoc.PaymentOrder;
		РеквизитыПлатежа.Добавить("Платежный ордер", "СекцияДокумент");
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "BankOrder") <> Неопределено Тогда
		PayData = Operation.PayDoc.BankOrder;
		РеквизитыПлатежа.Добавить("Банковский ордер", "СекцияДокумент");
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "MemOrder") <> Неопределено Тогда
		PayData = Operation.PayDoc.MemOrder;
		РеквизитыПлатежа.Добавить("Мемориальный ордер", "СекцияДокумент");
		ЭтоМемориальныйОрдер = Истина;
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "InnerDoc") <> Неопределено Тогда
		PayData = Operation.PayDoc.InnerDoc;
		РеквизитыПлатежа.Добавить(PayData.InnerDocKind, "СекцияДокумент");
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "CashContribution") <> Неопределено Тогда
		PayData = Operation.PayDoc.CashContribution;
		РеквизитыПлатежа.Добавить("Объявление на взнос наличными", "СекцияДокумент");
	ИначеЕсли ЗначениеСвойстваXDTO(Operation.PayDoc, "Check") <> Неопределено Тогда
		PayData = Operation.PayDoc.Check;
		РеквизитыПлатежа.Добавить("Чек", "СекцияДокумент");
	КонецЕсли;
		
	РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayData, "DocNo"), "Номер");
	Дата =  ЗначениеСвойстваXDTO(PayData, "DocDate");
	Если Дата <> Неопределено Тогда
		Дата = XMLЗначение(Тип("Дата"), Сред(Дата, 1, 10));
	КонецЕсли;
	РеквизитыПлатежа.Добавить(Дата, "Дата");
	РеквизитыПлатежа.Добавить(Число(PayData.Sum), "Сумма");
	
	Payer = ЗначениеСвойстваXDTO(PayData, "Payer");
	
	Если Payer <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Payer, "Name"), "ПлательщикНаименование");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Payer, "INN"), "ПлательщикИНН");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Payer, "KPP"), "ПлательщикКПП");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Payer, "Account"), "ПлательщикСчет");
		
		PayerBank = ЗначениеСвойстваXDTO(Payer, "Bank");
		Если PayerBank <> Неопределено Тогда
			РеквизитыПлатежа.Добавить(PayerBank.BIC, "ПлательщикБИКБанка");
			РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayerBank, "Name"), "ПлательщикНаименованиеБанка");
			РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayerBank, "City"), "ПлательщикГородБанка");
			РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayerBank, "CorrespAcc"), "ПлательщикКоррСчетБанка");
		КонецЕсли;
		
	КонецЕсли;
	
	Payee = ЗначениеСвойстваXDTO(PayData, "Payee");
	Если Payee <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Payee, "Name"), "ПолучательНаименование");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Payee, "INN"), "ПолучательИНН");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Payee, "KPP"), "ПолучательКПП");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Payee, "Account"), "ПолучательСчет");
		PayeeBank = ЗначениеСвойстваXDTO(Payee, "Bank");
		Если PayeeBank <> Неопределено Тогда
			РеквизитыПлатежа.Добавить(PayeeBank.BIC, "ПолучательБИКБанка");
			РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayeeBank, "Name"), "ПолучательНаименованиеБанка");
			РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayeeBank, "City"), "ПолучательГородБанка");
			РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayeeBank, "CorrespAcc"), "ПолучательКоррСчетБанка");
		КонецЕсли;
	КонецЕсли;
	
	ВидПлатежа = ЗначениеСвойстваXDTO(PayData, "PaymentKind");
	Если ВидПлатежа <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(ВидПлатежа, "ВидПлатежа");
	КонецЕсли;
	
	Очередность = ЗначениеСвойстваXDTO(PayData, "Priority");
	Если Очередность <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(Очередность, "Очередность");
	КонецЕсли;
	
	ВидОплаты = ЗначениеСвойстваXDTO(PayData, "TransitionKind");
	Если ВидОплаты <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(ВидОплаты, "ВидОплаты");
	КонецЕсли;

	Код = ЗначениеСвойстваXDTO(PayData, "Code");
	Если Код <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(Код, "Код");
	КонецЕсли;
	
	НазначениеПлатежа = ЗначениеСвойстваXDTO(PayData, "Purpose");
	Если НазначениеПлатежа <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(НазначениеПлатежа, "НазначениеПлатежа");
		КоличествоСтрокНП = Мин(СтрЧислоСтрок(НазначениеПлатежа), 6);
		Для Сч = 1 По КоличествоСтрокНП Цикл
			РеквизитыПлатежа.Добавить(СтрПолучитьСтроку(НазначениеПлатежа, Сч), "НазначениеПлатежа" + Сч);
		КонецЦикла;
	КонецЕсли;
	
	BudgetPaymentInfo = ЗначениеСвойстваXDTO(PayData, "BudgetPaymentInfo");
	
	Если BudgetPaymentInfo = Неопределено Тогда
		РеквизитыПлатежа.Добавить(Ложь, "ЭтоПлатежВБюджет");
	Иначе
		PayDataBudget = PayData.BudgetPaymentInfo;
		РеквизитыПлатежа.Добавить(Истина, "ЭтоПлатежВБюджет");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayDataBudget, "DrawerStatus"), "СтатусСоставителя");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayDataBudget, "CBC"), "ПоказательКБК");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayDataBudget, "OKTMO"), "ОКТМО");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayDataBudget, "Reason"), "ПоказательОснования");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayDataBudget, "TaxPeriod"), "ПоказательПериода");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayDataBudget, "DocNo"), "ПоказательНомера");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayDataBudget, "DocDate"), "ПоказательДаты");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayDataBudget, "PayType"), "КодВыплат");
	КонецЕсли;
	
	УсловиеОплаты = ЗначениеСвойстваXDTO(PayData, "PaymentCondition");
	Если УсловиеОплаты <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(УсловиеОплаты, "УсловиеОплаты");
		КоличествоСтрок = Мин(СтрЧислоСтрок(УсловиеОплаты), 3);
		Для Сч = 1 По КоличествоСтрок Цикл
			РеквизитыПлатежа.Добавить(СтрПолучитьСтроку(УсловиеОплаты, Сч), "УсловиеОплаты" + Сч);
		КонецЦикла;
	КонецЕсли;

	СрокАкцепта = ЗначениеСвойстваXDTO(PayData, "AcceptTerm");
	Если СрокАкцепта <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(Число(СрокАкцепта), "СрокАкцепта");
	КонецЕсли;

	ДатаОтсылкиДок = ЗначениеСвойстваXDTO(PayData, "DocDispatchDate");
	Если ДатаОтсылкиДок <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(ДатаОтсылкиДок, "ДатаОтсылкиДок");
	КонецЕсли;
	
	СодержаниеОперации = ЗначениеСвойстваXDTO(PayData, "TransitionContent");
	Если СодержаниеОперации <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(СодержаниеОперации, "СодержаниеОперации");
	КонецЕсли;
	
	НомерЧастичногоПлатежа = ЗначениеСвойстваXDTO(PayData, "PartialPaymentNo");
	Если НомерЧастичногоПлатежа <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(НомерЧастичногоПлатежа, "НомерЧастичногоПлатежа");
	КонецЕсли;
	
	ШифрПлатежногоДокумента = ЗначениеСвойстваXDTO(PayData, "PartialTransitionKind");
	Если ШифрПлатежногоДокумента <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(ШифрПлатежногоДокумента, "ШифрПлатежногоДокумента");
	КонецЕсли;
	
	СуммаОстаткаПлатежа = ЗначениеСвойстваXDTO(PayData, "SumResidualPayment");
	Если СуммаОстаткаПлатежа <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(Число(СуммаОстаткаПлатежа), "СуммаОстаткаПлатежа");
	КонецЕсли;
	
	НомерПлатежногоДокумента = ЗначениеСвойстваXDTO(PayData, "PartialDocNo");
	Если НомерПлатежногоДокумента <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(НомерПлатежногоДокумента, "НомерПлатежногоДокумента");
	КонецЕсли;
	
	ДатаПлатежногоДокумента = ЗначениеСвойстваXDTO(PayData, "PartialDocDate");
	Если ДатаПлатежногоДокумента <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(ДатаПлатежногоДокумента, "ДатаПлатежногоДокумента");
	КонецЕсли;

	Если ЭтоМемориальныйОрдер Тогда
		Если Operation.DC = "1" Тогда // списание с лиц.счета
			СторонаБанка = "Получатель";
			СторонаКлиента = "Плательщик";
		Иначе // поступление на лиц.счет
			СторонаБанка = "Плательщик";
			СторонаКлиента = "Получатель";
		КонецЕсли;
		Payee = ЗначениеСвойстваXDTO(PayData, "Author");
		Если Payee <> Неопределено Тогда
			РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Payee, "Name"), СторонаБанка + "Наименование");
			РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Payee, "CorrespAcc"), СторонаБанка + "Счет");
			РеквизитыПлатежа.Добавить(Payee.BIC, СторонаБанка + "БИКБанка");
			РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Payee, "Name"), СторонаБанка + "НаименованиеБанка");
			РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Payee, "City"), СторонаБанка + "ГородБанка");
			РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Payee, "CorrespAcc"), СторонаБанка + "КоррСчетБанка");
		КонецЕсли;
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayData, "PartialTransitionKind"), "ШифрДокумента");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayData, "TransitionContent"), "СодержаниеОперации");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayData, "TransitionContent"), "НазначениеПлатежа");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(PayData, "PartialTransitionKind"), "ВидОплаты");
		
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(ЭД.Recipient, "name"), СторонаКлиента + "Наименование");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(ЭД.Recipient, "inn"), СторонаКлиента + "ИНН");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(ЭД.Recipient, "kpp"), СторонаКлиента + "КПП");
		РеквизитыПлатежа.Добавить(ЭД.Data.Account, СторонаКлиента + "Счет");
		РеквизитыПлатежа.Добавить(ЭД.Data.Bank.Bic, СторонаКлиента + "БИКБанка");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(ЭД.Data.Bank, "Name"), СторонаКлиента + "НаименованиеБанка");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(ЭД.Data.Bank, "City"), СторонаКлиента + "ГородБанка");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(ЭД.Data.Bank, "CorrespAcc"), СторонаКлиента + "КоррСчетБанка");
	КонецЕсли;
	
	Stamp = ЗначениеСвойстваXDTO(Operation, "Stamp");
	
	Если Stamp <> Неопределено Тогда
		РеквизитыПлатежа.Добавить(Stamp.BIC, "ШтампБанкаБИК");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Stamp, "Name"), "ШтампБанкаНаименование");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Stamp, "City"), "ШтампБанкаГород");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Stamp, "CorrespAcc"), "ШтампБанкаКоррСчетБанка");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Stamp, "Branch"), "ШтампБанкаОтделение");
		РеквизитыПлатежа.Добавить(ЗначениеСвойстваXDTO(Stamp.Status, "Name"), "ШтампБанкаСтатус");
	КонецЕсли;

	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыПлатежа);
	
КонецПроцедуры

Процедура ПрочитатьЗапросВыпискиAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки;
	
	DataRequest = ЭД.Data;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.id);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", DataRequest.DateFrom);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца",  DataRequest.DateTo);
	
	ТекстБанк = " " + НСтр("ru='в банке'") + " ";
	Если НЕ DataRequest.Bank.Name = Неопределено Тогда
		ТекстБанк = ТекстБанк + DataRequest.Bank.Name + ", ";
	КонецЕсли;
	ТекстБанк = ТекстБанк + НСтр("ru = 'БИК:'") + " " + DataRequest.Bank.BIC;
	
	НомерСчета = DataRequest.Account + ТекстБанк;
	РеквизитыСчета = Новый СписокЗначений;
	РеквизитыСчета.Добавить(НомерСчета, "НомерСчета");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыСчета);
	
КонецПроцедуры

Процедура ПрочитатьПлатежноеПоручениеAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение;
	PayData = ЭД.Data;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", PayData.DocNo);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", PayData.DocDate);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СекцияДокумент", "Платежное поручение");
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", PayData.Sum);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", PayData.Sum);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.id);
	
	Payer = PayData.Payer;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикНаименование", Payer.Name);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикИНН", Payer.INN);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКПП", Payer.KPP);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикРасчСчет", Payer.Account);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикБИКБанка", Payer.Bank.BIC);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикНаименованиеБанка", Payer.Bank.Name);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикГородБанка", Payer.Bank.City);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикКоррСчетБанка", Payer.Bank.CorrespAcc);
	
	Payee = PayData.Payee;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательНаименование", Payee.Name);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательИНН", Payee.INN);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКПП", Payee.KPP);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательРасчСчет", Payee.Account);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательБИКБанка", Payee.Bank.BIC);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательНаименованиеБанка", Payee.Bank.Name);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательГородБанка", Payee.Bank.City);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательКоррСчетБанка", Payee.Bank.CorrespAcc);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидПлатежа", PayData.PaymentKind);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидОплаты", PayData.TransitionKind);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Очередность", PayData.Priority);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Код", PayData.Code);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", PayData.Purpose);
	
	Если НЕ PayData.BudgetPaymentInfo = Неопределено Тогда
		PayDataBudget = PayData.BudgetPaymentInfo;
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЭтоПлатежВБюджет", Истина);
		ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "СтатусСоставителя", PayDataBudget.DrawerStatus);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательКБК", PayDataBudget.CBC);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКТМО", PayDataBudget.OKTMO);
		ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПоказательОснования", PayDataBudget.Reason);
		ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПоказательПериода", PayDataBudget.TaxPeriod);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательНомера", PayDataBudget.DocNo);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательДаты", PayDataBudget.DocDate);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КодВыплат", PayDataBudget.PayType);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЭтоПлатежВБюджет",  Ложь);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьПлатежноеТребованиеAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.id);
	
	PayData = ЭД.Data;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", PayData.DocNo);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", PayData.DocDate);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СекцияДокумент", "Платежное требование");
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", PayData.Sum);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", PayData.Sum);
	
	Payer = PayData.Payer;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикНаименование", Payer.Name);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикИНН", Payer.INN);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКПП", Payer.KPP);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикРасчСчет", Payer.Account);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикБИКБанка", Payer.Bank.BIC);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикНаименованиеБанка", Payer.Bank.Name);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикГородБанка", Payer.Bank.City);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлательщикКоррСчетБанка", Payer.Bank.CorrespAcc);
	
	Payee = PayData.Payee;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательНаименование", Payee.Name);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательИНН", Payee.INN);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКПП", Payee.KPP);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательРасчСчет", Payee.Account);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательБИКБанка", Payee.Bank.BIC);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательНаименованиеБанка", Payee.Bank.Name);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательГородБанка", Payee.Bank.City);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПолучательКоррСчетБанка", Payee.Bank.CorrespAcc);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидПлатежа", PayData.PaymentKind);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидОплаты", PayData.TransitionKind);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Очередность", PayData.Priority);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", PayData.Purpose);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Код", PayData.Code);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "УсловиеОплаты", PayData.PaymentCondition);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СрокАкцепта", PayData.AcceptTerm);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ДатаОтсылкиДокументов", PayData.DocDispatchDate);
	
КонецПроцедуры

Процедура ПрочитатьЗапросОСостоянииAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Идентификатор", ЭД.id);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВерсияФормата", ЭД.formatVersion);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСоздания", ЭД.creationDate);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Программа", ЭД.userAgent);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторКлиента", ЭД.Sender.id);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеКлиента", ЭД.Sender.name);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИНН", ЭД.Sender.inn);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КПП", ЭД.Sender.kpp);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БИК", ЭД.Recipient.bic);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеБанка", ЭД.Recipient.name);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторИсходногоДокумента", ЭД.ExtID);
	
КонецПроцедуры

Процедура ПрочитатьЗапросНаОтзывAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Идентификатор", ЭД.id);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВерсияФормата", ЭД.formatVersion);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСоздания", ЭД.creationDate);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Программа", ЭД.userAgent);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторКлиента", ЭД.Sender.id);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеКлиента", ЭД.Sender.name);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИНН", ЭД.Sender.inn);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КПП", ЭД.Sender.kpp);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БИК", ЭД.Recipient.bic);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеБанка", ЭД.Recipient.name);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторИсходногоДокумента", ЭД.ExtID);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Причина", ЭД.Reason);
	
КонецПроцедуры

Процедура ПрочитатьЗапросЗондAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Идентификатор", ЭД.id);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВерсияФормата", ЭД.formatVersion);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСоздания", ЭД.creationDate);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Программа", ЭД.userAgent);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторКлиента", ЭД.Sender.id);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеКлиента", ЭД.Sender.name);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИНН", ЭД.Sender.inn);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КПП", ЭД.Sender.kpp);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БИК", ЭД.Recipient.bic);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеБанка", ЭД.Recipient.name);
	
КонецПроцедуры

Процедура ПрочитатьИзвещениеОСостоянииAsyncXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ИзвещениеОСостоянииЭД;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.id);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВерсияФормата", ЭД.formatVersion);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСоздания", ЭД.creationDate);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Программа", ЭД.userAgent);
	
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИдентификаторКлиента", ЭД.Recipient.Customer.id);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "НаименованиеКлиента", ЭД.Recipient.Customer.name);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИНН", ЭД.Recipient.Customer.inn);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КПП", ЭД.Recipient.Customer.kpp);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БИК", ЭД.Sender.Bank.bic);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеБанка", ЭД.Sender.Bank.name);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторИсходногоДокумента", ЭД.ExtID);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИдентификаторЗапроса", ЭД.ExtIDStatusRequest);
	
	Если ЭД.Result.Error = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЕстьОшибка", Ложь);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КодСтатуса", ЭД.Result.Status.Code);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТекстСтатуса", ЭД.Result.Status.Name);
		ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ДополнительнаяИнформация", ЭД.Result.Status.MoreInfo);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЕстьОшибка", Истина);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КодОшибки", ЭД.Result.Error.Code);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Описание", ЭД.Result.Error.Description);
		ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ДополнительнаяИнформация", ЭД.Result.Error.MoreInfo);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПлатежноеПоручениеCML(СсылкаНаДокумент, ДеревоДанных, АдресФайлаВоВременномХранилище)
	
	ПространствоИмен = "urn:1C.ru:ClientBankExchange";
	
	ТекстОшибки = "";
	
	ClientBankExchange = ОбъектТипаCML(ФабрикаXDTO, "ClientBankExchange", ПространствоИмен);
	ВерсияФормата = ОбменСБанкамиКлиентСервер.ВерсияФорматаСинхронногоОбмена();
	ЗаполнитьСвойствоXDTO(ClientBankExchange, "ВерсияФормата", ВерсияФормата, Истина, ТекстОшибки);
	ПлательщикНаименованиеБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.Наименование");
	ЗаполнитьСвойствоXDTO(ClientBankExchange, "Получатель", ПлательщикНаименованиеБанка, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ClientBankExchange, "Отправитель", "1С: Предприятие", Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ClientBankExchange, "ДатаСоздания", ТекущаяДатаСеанса(), , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ClientBankExchange, "ВремяСоздания", ТекущаяДатаСеанса(), , ТекстОшибки);
	
	ПлатежноеПоручениеЭО = ОбъектТипаCML(ФабрикаXDTO, "ПлатежныйДокумент", ПространствоИмен);
	ИдДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдДокумента");
	ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "ИдДокумента", ИдДокумента, , ТекстОшибки);
	
	ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "СекцияДокумент", "Платежное поручение", Истина, ТекстОшибки);
	Номер = СокрЛП(ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"));
	
	Если СтрДлина(Номер) > 6 Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
			+ НСтр("ru = 'Длина номера документа не может превышать 6 символов.'");
	КонецЕсли;
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
			+ НСтр("ru = 'Номер документа должен содержать только цифры.'");
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "Номер", Номер, Истина, ТекстОшибки);
	Дата = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "Дата", Дата, Истина, ТекстОшибки);
	Сумма = ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
	ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "Сумма", Сумма, Истина, ТекстОшибки);
	
	РеквизитыПлательщика = ОбъектТипаCML(ФабрикаXDTO, "РеквизитыПлательщика", ПространствоИмен);
	ПлательщикРасчСчет = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.РасчСчет");
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикСчет", ПлательщикРасчСчет, Истина, ТекстОшибки);
	
	ПлательщикКПП = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.КПП");
	ПеречислениеВБюджет = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет") = Истина;
	
	Если НЕ ЗначениеЗаполнено(ПлательщикКПП) И ПеречислениеВБюджет Тогда
		ПлательщикКПП = "0";
	КонецЕсли;
	
	Если ПеречислениеВБюджет ИЛИ (ЗначениеЗаполнено(ПлательщикКПП) И НЕ ПлательщикКПП = "0") Тогда
		ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикКПП", ПлательщикКПП, ПеречислениеВБюджет, ТекстОшибки);
	КонецЕсли;
	
	ПлательщикИНН = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.ИНН");
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикИНН", ПлательщикИНН, , ТекстОшибки);
	
	ПлательщикБанк = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.Наименование");
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикБанк1", ПлательщикБанк, , ТекстОшибки);
	ПлательщикГородБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.Город");
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикБанк2", ПлательщикГородБанка, , ТекстОшибки);
	ПлательщикБИКБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.БИК");
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикБИК", ПлательщикБИКБанка, , ТекстОшибки);
	ПлательщикКоррСчет = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.КоррСчет");
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "ПлательщикРасчСчет", ПлательщикКоррСчет, , ТекстОшибки);
	
	ПлательщикНаим = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Наименование");
	
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Плательщик1", ПлательщикНаим, , ТекстОшибки);
	
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Плательщик", ПлательщикНаим, , ТекстОшибки);
		
	РеквизитыПолучателя = ОбъектТипаCML(ФабрикаXDTO, "РеквизитыПолучателя", ПространствоИмен);
	ПолучательРасчСчет = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.РасчСчет");
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательСчет", ПолучательРасчСчет, Истина, ТекстОшибки);
	
	ПолучательКПП = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.КПП");
	
	Если НЕ ЗначениеЗаполнено(ПолучательКПП) И ПеречислениеВБюджет Тогда
		ПолучательКПП = "0";
	КонецЕсли;
	
	Если ПеречислениеВБюджет ИЛИ (ЗначениеЗаполнено(ПолучательКПП) И НЕ ПолучательКПП = "0") Тогда
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательКПП", ПолучательКПП, ПеречислениеВБюджет, ТекстОшибки);
	КонецЕсли;
	
	ПолучательИНН = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.ИНН");
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательИНН", ПолучательИНН, , ТекстОшибки);
	
	ПолучательБанк = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.Наименование");
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательБанк1", ПолучательБанк, , ТекстОшибки);
	ПолучательГородБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.Город");
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательБанк2", ПолучательГородБанка, , ТекстОшибки);
	ПолучательБИКБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.БИК");
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательБИК", ПолучательБИКБанка, , ТекстОшибки);
	ПолучательКоррСчет = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.КоррСчет");
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "ПолучательРасчСчет", ПолучательКоррСчет, , ТекстОшибки);
	
	ПолучательНаим = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПолучателя.Наименование");
		
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Получатель1", ПолучательНаим, , ТекстОшибки);
	
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Получатель", ПолучательНаим, , ТекстОшибки);
	Если ПеречислениеВБюджет Тогда
		
		ПлатежиВБюджетCML = ОбъектТипаCML(ФабрикаXDTO, "ПлатежиВБюджет", ПространствоИмен);
		
		СтатусСоставителя = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.СтатусСоставителя");
		ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "СтатусСоставителя", СтатусСоставителя, Истина, ТекстОшибки);
		
		ПоказательКБК = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательКБК");
		ПоказательКБК = ?(Не ПустаяСтрока(ПоказательКБК), СокрЛП(ПоказательКБК), "0");
		ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "ПоказательКБК", ПоказательКБК, Истина, ТекстОшибки);
		
		ОКТМО = СокрЛП(ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ОКТМО"));
		Если НЕ ЗначениеЗаполнено(ОКТМО) ИЛИ ПустаяСтрока(ОКТМО) Тогда
			ОКТМО = "0";
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "ОКАТО", СокрЛП(ОКТМО), Истина, ТекстОшибки);
		
		ПоказательОснования = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательОснования");
		Если НЕ ЗначениеЗаполнено(ПоказательОснования) ИЛИ ПустаяСтрока(ПоказательОснования) Тогда
			ПоказательОснования = "0";
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "ПоказательОснования", ПоказательОснования, Истина, ТекстОшибки);
		
		ПоказательПериода = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательПериода");
		Если НЕ ЗначениеЗаполнено(ПоказательПериода) ИЛИ ПустаяСтрока(ПоказательПериода)
			ИЛИ ПоказательПериода = "  .  .    " Тогда
			ПоказательПериода = "0";
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "ПоказательПериода", ПоказательПериода, Истина, ТекстОшибки);
		
		ПоказательНомера = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательНомера");
		Если НЕ ЗначениеЗаполнено(ПоказательНомера) ИЛИ ПустаяСтрока(ПоказательНомера) Тогда
			ПоказательНомера = "0";
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "ПоказательНомера", ПоказательНомера, Истина, ТекстОшибки);
		
		ПоказательДаты = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательДаты");
		Если НЕ ЗначениеЗаполнено(ПоказательДаты) Тогда
			ПоказательДаты = "0";
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "ПоказательДаты", ПоказательДаты, Истина, ТекстОшибки);
		
		КодВыплат = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.КодВыплат");
		ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "ПоказательТипа", КодВыплат, , ТекстОшибки);
	
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "РеквизитыПлательщика", РеквизитыПлательщика, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "РеквизитыПолучателя", РеквизитыПолучателя, Истина, ТекстОшибки);
	
	РеквизитыПлатежа = ОбъектТипаCML(ФабрикаXDTO, "РеквизитыПлатежа", ПространствоИмен);
	ВидПлатежа = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ВидПлатежа");
	ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "ВидПлатежа", ВидПлатежа, , ТекстОшибки);
	ВидОплаты = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ВидОплаты");
	ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "ВидОплаты", ВидОплаты, , ТекстОшибки);
	Очередность = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.Очередность");
	ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "Очередность", Очередность, , ТекстОшибки);
	Код = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.Код");
	ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "Код", Код, , ТекстОшибки);
	Если ПеречислениеВБюджет И Не ЗначениеЗаполнено(Код) Тогда
		ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "Код", "0", , ТекстОшибки);
	КонецЕсли;
	НазначениеПлатежа = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлатежа.НазначениеПлатежа");
	ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "НазначениеПлатежа", НазначениеПлатежа, , ТекстОшибки);
	
	НазначениеПлатежаОтформатированное = НазначениеПлатежаОтформатированное(НазначениеПлатежа);
	
	КоличествоСтрокНП = Мин(СтрЧислоСтрок(НазначениеПлатежаОтформатированное), 6);
	
	Для Сч = 1 По КоличествоСтрокНП Цикл
		ТекСтрока = СтрПолучитьСтроку(НазначениеПлатежаОтформатированное, Сч);
		ЗаполнитьСвойствоXDTO(РеквизитыПлатежа, "НазначениеПлатежа" + Сч, ТекСтрока, , ТекстОшибки);
	КонецЦикла;
		
	ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "РеквизитыПлатежа", РеквизитыПлатежа, Истина, ТекстОшибки);
	
	Если ПеречислениеВБюджет Тогда
		ЗаполнитьСвойствоXDTO(ПлатежноеПоручениеЭО, "ПлатежиВБюджет", ПлатежиВБюджетCML, Истина, ТекстОшибки);
	КонецЕсли;
	
	ClientBankExchange.СекцияПлатежногоДокумента.Добавить(ПлатежноеПоручениеЭО);
	
	ClientBankExchange.Проверить();
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	Иначе
		ДвоичныеДанные = ДвоичныеДанныеИзXDTO(ФабрикаXDTO, ClientBankExchange);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	КонецЕсли;
	
КонецПроцедуры

Функция НазначениеПлатежаОтформатированное(НазначениеПлатежа)
	
	НазначениеПлатежаОтформатированное = "";
	Для Счетчик = 1 По СтрЧислоСтрок(НазначениеПлатежа) Цикл
		ТекСтрока = СтрПолучитьСтроку(НазначениеПлатежа, Счетчик);
		Пока СтрДлина(ТекСтрока) > 35 Цикл
			НазначениеПлатежаОтформатированное = НазначениеПлатежаОтформатированное + Сред(ТекСтрока, 1, 35) + Символы.ПС;
			ТекСтрока = Сред(ТекСтрока, 36);
		КонецЦикла;
		НазначениеПлатежаОтформатированное = НазначениеПлатежаОтформатированное + ТекСтрока + Символы.ПС;
	КонецЦикла;
	
	Возврат НазначениеПлатежаОтформатированное;
	
КонецФункции

Процедура СформироватьПлатежноеПоручениеAsync(СсылкаНаДокумент, ДеревоДанных, АдресФайлаВоВременномХранилище)
	
	ВерсияФормата = ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияФормата");
	
	Если НЕ ЗначениеЗаполнено(ВерсияФормата) Тогда
		ВерсияФормата = ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
	
	ПространствоИмен = ПространствоИменАсинхронногоОбмена(ВерсияФормата);
	
	ТекстОшибки = "";

	ЭД = ОбъектТипаCML(Фабрика, "PayDocRu", ПространствоИмен);
	
	ИдДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдДокумента");
	ЗаполнитьСвойствоXDTO(ЭД, "id", ИдДокумента, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ЭД, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);

	ЗаполнитьСвойствоXDTO(ЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
	userAgent = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
	ЗаполнитьСвойствоXDTO(ЭД, "userAgent", userAgent, , ТекстОшибки);
	
	Отправитель = ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
	ИдКлиента = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдКлиента");
	ЗаполнитьСвойствоXDTO(Отправитель, "id", ИдКлиента, Истина, ТекстОшибки);
	ПлательщикНаименование = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Наименование");
	ЗаполнитьСвойствоXDTO(Отправитель, "name", ПлательщикНаименование, Истина, ТекстОшибки);
	ПлательщикИНН = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.ИНН");
	ЗаполнитьСвойствоXDTO(Отправитель, "inn", ПлательщикИНН, , ТекстОшибки);
	ПлательщикКПП = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.КПП");
	Если ПлательщикКПП <> "0" Тогда
		ЗаполнитьСвойствоXDTO(Отправитель, "kpp", ПлательщикКПП, , ТекстОшибки);
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(ЭД, "Sender", Отправитель, Истина, ТекстОшибки);
	
	Получатель = ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
	ПлательщикБИКБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.БИК");
	ЗаполнитьСвойствоXDTO(Получатель, "bic", ПлательщикБИКБанка, Истина, ТекстОшибки);
	ПлательщикНаименованиеБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.Наименование");
	ЗаполнитьСвойствоXDTO(Получатель, "name", ПлательщикНаименованиеБанка, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ЭД, "Recipient", Получатель, Истина, ТекстОшибки);
	
	ДанныеПлатежа = ОбъектТипаCML(Фабрика, "PayDocRu.Data", ПространствоИмен);
	
	Номер = СокрЛП(ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"));
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
			+ НСтр("ru = 'Номер документа должен содержать только цифры.'");
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "DocNo", Номер, Истина, ТекстОшибки);
	Дата = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "DocDate", Дата, Истина, ТекстОшибки);
	Сумма = ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Sum", Сумма, Истина, ТекстОшибки);
	
	РеквизитыПлательщика = ОбъектТипаCML(Фабрика, "CustomerDetailsType", ПространствоИмен);
	ПлательщикРасчСчет = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.РасчСчет");
		
	Если ЗначениеЗаполнено(ПлательщикРасчСчет) И СтрДлина(СокрЛП(ПлательщикРасчСчет)) <> 20 Тогда
		ТекстОшибки = НСтр("ru = 'Некорректный номер счета плательщика %1
							|Длина номера счета должна состоять из 20 цифр.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПлательщикРасчСчет);
	КонецЕсли;

	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Name", ПлательщикНаименование, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "INN", ПлательщикИНН, , ТекстОшибки);
	
	СтатусСоставителя = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.СтатусСоставителя");
	ПлатежиВБюджетВДереве = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет");
	ЭтоПеречислениеВБюджет = ПлатежиВБюджетВДереве = Истина И ЗначениеЗаполнено(СтатусСоставителя);
	Если Не ЗначениеЗаполнено(ПлательщикКПП) И ЭтоПеречислениеВБюджет Тогда
		ПлательщикКПП = "0";
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "KPP", ПлательщикКПП, ЭтоПеречислениеВБюджет, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Account", ПлательщикРасчСчет, , ТекстОшибки);
	
	БанкПлательщика = ОбъектТипаCML(Фабрика, "BankType", ПространствоИмен);
	ЗаполнитьСвойствоXDTO(БанкПлательщика, "BIC", ПлательщикБИКБанка, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БанкПлательщика, "Name", ПлательщикНаименованиеБанка, , ТекстОшибки);
	ПлательщикГородБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.Город");
	ЗаполнитьСвойствоXDTO(БанкПлательщика, "City", ПлательщикГородБанка, , ТекстОшибки);
	ПлательщикКоррСчетБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.КоррСчет");
	ЗаполнитьСвойствоXDTO(БанкПлательщика, "CorrespAcc", ПлательщикКоррСчетБанка, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "Bank", БанкПлательщика, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Payer", РеквизитыПлательщика, Истина, ТекстОшибки);
	
	РеквизитыПолучателя = ОбъектТипаCML(Фабрика, "CustomerDetailsType", ПространствоИмен);
	ПолучательНаименование = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Наименование");
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Name", ПолучательНаименование, Истина, ТекстОшибки);
	ПолучательИНН = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.ИНН");
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "INN", ПолучательИНН, , ТекстОшибки);
	ПолучательКПП = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.КПП");
	Если Не ЗначениеЗаполнено(ПолучательКПП) И ЭтоПеречислениеВБюджет Тогда
		ПолучательКПП = "0";
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "KPP", ПолучательКПП, ЭтоПеречислениеВБюджет, ТекстОшибки);
	ПолучательРасчСчет = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.РасчСчет");
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Account", ПолучательРасчСчет, , ТекстОшибки);
	
	БанкПолучателя = ОбъектТипаCML(Фабрика, "BankType", ПространствоИмен);
	ПолучательБИКБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.БИК");
	ЗаполнитьСвойствоXDTO(БанкПолучателя, "BIC", ПолучательБИКБанка, Истина, ТекстОшибки);
	ПолучательНаименованиеБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.Наименование");
	ЗаполнитьСвойствоXDTO(БанкПолучателя, "Name", ПолучательНаименованиеБанка, , ТекстОшибки);
	ПолучательГородБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.Город");
	ЗаполнитьСвойствоXDTO(БанкПолучателя, "City", ПолучательГородБанка, , ТекстОшибки);
	ПолучательКоррСчет = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.КоррСчет");
	ЗаполнитьСвойствоXDTO(БанкПолучателя, "CorrespAcc", ПолучательКоррСчет, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Bank", БанкПолучателя, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Payee", РеквизитыПолучателя, Истина, ТекстОшибки);
	
	ВидПлатежа = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ВидПлатежа");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "PaymentKind", ВидПлатежа, , ТекстОшибки);
	ВидОплаты = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ВидОплаты");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "TransitionKind", ВидОплаты, , ТекстОшибки);
	Очередность = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.Очередность");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Priority", Очередность, , ТекстОшибки);
	Код = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.Код");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Code", Код, , ТекстОшибки);
	НазначениеПлатежа = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.НазначениеПлатежа");
	ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Purpose", НазначениеПлатежа, Истина, ТекстОшибки);
	
	КодВыплат = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.КодВыплат");
	
	Если ЭтоПеречислениеВБюджет ИЛИ ЗначениеЗаполнено(КодВыплат) Тогда
		
		Если ВерсияФормата = "2.01" Тогда
			ПлатежиВБюджетCML = ОбъектТипаCML(Фабрика, "PayDocRu.Data.BudgetPaymentInfo", ПространствоИмен);
		Иначе
			ПлатежиВБюджетCML = ОбъектТипаCML(Фабрика, "BudgetPaymentInfoType", ПространствоИмен);
		КонецЕсли;
		
		Если ЭтоПеречислениеВБюджет Тогда
			Если НЕ ЗначениеЗаполнено(Код) Тогда
				ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "Code", "0", , ТекстОшибки);
			КонецЕсли;
		
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "DrawerStatus", СтатусСоставителя, ЭтоПеречислениеВБюджет, ТекстОшибки);
			ПоказательКБК = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательКБК");
			ПоказательКБК = ?(Не ПустаяСтрока(ПоказательКБК), СокрЛП(ПоказательКБК), "0");
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "CBC", ПоказательКБК, ЭтоПеречислениеВБюджет, ТекстОшибки);
			ОКТМО = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ОКТМО");
			Если НЕ ЗначениеЗаполнено(ОКТМО) ИЛИ ПустаяСтрока(ОКТМО) Тогда
				ОКТМО = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "OKTMO", СокрЛП(ОКТМО), ЭтоПеречислениеВБюджет, ТекстОшибки);
			ПоказательОснования = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательОснования");
			Если НЕ ЗначениеЗаполнено(ПоказательОснования) ИЛИ ПустаяСтрока(ПоказательОснования) Тогда
				ПоказательОснования = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "Reason", ПоказательОснования, ЭтоПеречислениеВБюджет, ТекстОшибки);
			
			ПоказательПериода = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательПериода");
			Если НЕ ЗначениеЗаполнено(ПоказательПериода) ИЛИ ПустаяСтрока(ПоказательПериода)
				ИЛИ ПоказательПериода = "  .  .    " Тогда
				ПоказательПериода = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "TaxPeriod", ПоказательПериода, ЭтоПеречислениеВБюджет, ТекстОшибки);
			
			ПоказательНомера = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательНомера");
			Если НЕ ЗначениеЗаполнено(ПоказательНомера) ИЛИ ПустаяСтрока(ПоказательНомера) Тогда
				ПоказательНомера = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "DocNo", ПоказательНомера, ЭтоПеречислениеВБюджет, ТекстОшибки);
			
			ПоказательДаты = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательДаты");
			Если НЕ ЗначениеЗаполнено(ПоказательДаты) Тогда
				ПоказательДаты = "0";
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "DocDate", ПоказательДаты, ЭтоПеречислениеВБюджет, ТекстОшибки);
			
			Если Не ЗначениеЗаполнено(КодВыплат) И (ВерсияФормата = "2.02" ИЛИ ВерсияФормата = "2.01") Тогда
				КодВыплат = "0";
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ПлатежиВБюджетCML, "PayType", КодВыплат, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДанныеПлатежа, "BudgetPaymentInfo", ПлатежиВБюджетCML, , ТекстОшибки);
	КонецЕсли;

	ЗаполнитьСвойствоXDTO(ЭД, "Data", ДанныеПлатежа, Истина, ТекстОшибки);
	
	ЭД.Проверить();
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	Иначе
		ДвоичныеДанные = ДвоичныеДанныеИзXDTO(Фабрика, ЭД, Ложь);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	КонецЕсли;

КонецПроцедуры

Функция ИнформацияОРасположенииБанка(СтрокаРазбора)

	СтруктураВозврата = Новый Структура("ТипНаселенногоПункта, НазваниеНаселенногоПункта");
	ПозПробела = СтрНайти(СтрокаРазбора, " ");
	Если ПозПробела > 0 Тогда
		СтруктураВозврата.ТипНаселенногоПункта = ВРег(СтрЗаменить(Сред(СтрокаРазбора, 1, ПозПробела - 1), ".", ""));
		Если ПозПробела < СтрДлина(СтрокаРазбора) Тогда
			СтруктураВозврата.НазваниеНаселенногоПункта = ВРег(Сред(СтрокаРазбора, ПозПробела + 1));
		КонецЕсли
	Иначе
		ПозТочки = СтрНайти(СтрокаРазбора, ".");
		СтруктураВозврата.ТипНаселенногоПункта = ВРег(СтрЗаменить(Сред(СтрокаРазбора, 1, ПозТочки), ".", ""));
		Если ПозТочки < СтрДлина(СтрокаРазбора) Тогда
			СтруктураВозврата.НазваниеНаселенногоПункта = ВРег(Сред(СтрокаРазбора, ПозТочки + 1));
		КонецЕсли
	КонецЕсли;
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки)
	
	// Проверка на соответствие длины фасету для строк
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Свойства = ОбъектXDTO.Свойства();
		УстанавливаемоеСвойство = Свойства.Получить(ИмяСвойства);
		Фасеты = УстанавливаемоеСвойство.Тип.Фасеты;
		Если Фасеты <> Неопределено Тогда
			ФасетМаксимальнаяДлина = Фасеты.Получить(ВидФасетаXDTO.МаксДлина);
			Если ФасетМаксимальнаяДлина <> Неопределено Тогда
				МаксимальнаяДлина = Число(ФасетМаксимальнаяДлина.Значение);
				Если СтрДлина(Значение) > МаксимальнаяДлина Тогда
					ШаблонОшибки = НСтр("ru = 'Ошибка установки свойства %1
												|Устанавливаемое значение: %2
												|Текущая длина строки: %3 
												|Допустимая длина строки: %4'");
					ТекстОшибки = СтрШаблон(ШаблонОшибки, ОбъектXDTO.Тип().Имя + "." + ИмяСвойства, Значение,
						СтрДлина(Значение), МаксимальнаяДлина);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ФасетМинимальнаяДлина = Фасеты.Получить(ВидФасетаXDTO.МинДлина);
			Если ФасетМинимальнаяДлина <> Неопределено Тогда
				МинимальнаяДлина = Число(ФасетМинимальнаяДлина.Значение);
				Если СтрДлина(Значение) < МинимальнаяДлина Тогда
					ШаблонОшибки = НСтр("ru = 'Ошибка установки свойства %1
												|Устанавливаемое значение: %2
												|Текущая длина строки: %3 
												|Минимальная длина строки: %4'");
					ТекстОшибки = СтрШаблон(ШаблонОшибки, ОбъектXDTO.Тип().Имя + "." + ИмяСвойства, Значение,
						СтрДлина(Значение), МинимальнаяДлина);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ОбъектXDTO.Установить(ИмяСвойства, Значение);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Выполнение операции: Заполнение XDTO.
			|Ошибка установки значения свойства ""%1"".'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "ОбменСБанками");
	КонецПопытки
	
КонецПроцедуры

Процедура ДобавитьРеквизитШапкиОбъекта(СтрокаЭлементов, ИмяРеквизита, ЗначениеРеквизита, СсылкаНаОбъект = Неопределено)
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
		СтрокаЭлементов, ИмяРеквизита, ЗначениеРеквизита, СсылкаНаОбъект);
	
КонецПроцедуры

Функция ЗначениеСвойстваXDTO(ОбъектXDTO, Путь)
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ОбъектXDTO, Путь);
	
КонецФункции

// Добавляет присоединенный файл для пакета ЭДО.
//  Конверт - ДокументСсылка.ПакетОбменСБанками - созданный пакет.
//
Процедура СоздатьЭДПакетаCMSDETACHED(Конверт)
	
	СообщениеОбмена = Конверт.Сообщения[0].Сообщение;
	
	Данные = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
	
	URI = "urn:x-obml:1.0";
	ТипMessage = ФабрикаXDTO.Тип("urn:x-obml:1.0","CMSDETACHED");
	Message = ФабрикаXDTO.Создать(ТипMessage);
	ТипData = ТипMessage.Свойства[0].Тип;
	Data = ФабрикаXDTO.Создать(ТипData);
	Data.ContentType = "application/xml";
	Data.__content = Данные;
	Message.data = Data;
	
	ЭлектронныеПодписи = ПодписиСообщенияОбмена(СообщениеОбмена);
	
	Для Каждого СтрокаПодписи Из ЭлектронныеПодписи Цикл
		Message.signature.Добавить(СтрокаПодписи.Подпись.Получить());
	КонецЦикла;
	
	Запись = Новый ЗаписьXML;
	Поток = Новый ПотокВПамяти();
	Запись.ОткрытьПоток(Поток);
	Запись.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(Запись, Message, "signed", URI, , НазначениеТипаXML.Явное);
	Запись.Закрыть();
	ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	СоздатьПрисоединенныйФайл(Конверт, ДвоичныеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область Транспорт

Процедура ОбработатьОтветИзБанка(ОтветБанка, ОтправленноеСообщениеОбмена, ПолученноеСообщениеОбмена = Неопределено, ЕстьОшибка = Неопределено)
	
	ДанныеОтвета = ПолучитьДанныеИзОтветаБанка(ОтветБанка);
	ЕстьОшибка = Ложь;
	Сообщение = ДанныеОтвета.Получить("Данные");
	РеквизитыОтправленногоСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ОтправленноеСообщениеОбмена, "НастройкаОбмена, ВидЭД, ДатаНачала, ДатаОкончания");
	ВидЭД = РеквизитыОтправленногоСообщения.ВидЭД;
	ЧтениеДанных = Новый ЧтениеДанных(Сообщение);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
	Если ЧтениеXML.Прочитать() И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		И (ЧтениеXML.ЛокальноеИмя = "success" ИЛИ ЧтениеXML.ЛокальноеИмя = "error") Тогда
		ЧтениеДанных = Новый ЧтениеДанных(Сообщение);
		ЧтениеXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "success" Тогда
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВнешнийИдентификатор", ЧтениеXML.Значение);
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Доставлен);
				ДополнительныеДанные = Новый Структура("ДатаПоступления", ТекущаяДатаСеанса());
				СтруктураПараметров.Вставить("ДополнительныеДанные", ДополнительныеДанные);
				ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(ОтправленноеСообщениеОбмена, СтруктураПараметров)
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "error" Тогда
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				КодОшибки = ЧтениеXML.Значение;
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				ТекстОшибки = ЧтениеXML.Значение;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ПричинаОтклонения", ТекстОшибки);
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
				ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(ОтправленноеСообщениеОбмена, СтруктураПараметров);
				ЕстьОшибка = Истина;
				Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		АдресФайла = ПоместитьВоВременноеХранилище(Сообщение);
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Расширение", "xml");
		ПараметрыСообщения.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
		ПараметрыСообщения.Вставить("НастройкаОбмена", РеквизитыОтправленногоСообщения.НастройкаОбмена);
		ПараметрыСообщения.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
		ПараметрыСообщения.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
		ПараметрыСообщения.Вставить("СообщениеРодитель", ОтправленноеСообщениеОбмена);
		ПараметрыСообщения.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
		ПараметрыСообщения.Вставить("ДатаНачала", РеквизитыОтправленногоСообщения.ДатаНачала);
		ПараметрыСообщения.Вставить("ДатаОкончания", РеквизитыОтправленногоСообщения.ДатаОкончания);
		
		НовоеСообщение = Неопределено;
		СохранитьСообщениеОбмена(ПараметрыСообщения, НовоеСообщение);
		
		ОпределитьИсполненныеПлатежныеПоручения(НовоеСообщение);
		ПолученноеСообщениеОбмена = НовоеСообщение;
	КонецЕсли;
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

Процедура ОтправитьВБанк(НастройкаОбмена, Настройки, Данные, Результат, ТекстОшибки)
	
	Заголовки = Новый Соответствие;
	
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	
	Если Настройки.Свойство("ИдентификаторСессии") Тогда
		Заголовки.Вставить("SID", Настройки.ИдентификаторСессии);
	КонецЕсли;
	
	Если Настройки.Свойство("ИдентификаторОрганизации") Тогда
		Заголовки.Вставить("CustomerID", Настройки.ИдентификаторОрганизации);
	КонецЕсли;
	
	Если Настройки.Свойство("ВерсияФормата") Тогда
		Заголовки.Вставить("APIVersion", Настройки.ВерсияФормата);
	КонецЕсли;
	
	РезультатВыполнения = ОтправитьPOSTЗапрос(Настройки.Адрес, Настройки.Ресурс, Заголовки, Данные, , , НастройкаОбмена);
	
	Если РезультатВыполнения.Статус Тогда
		Результат = РезультатВыполнения.Тело;
	Иначе
		Если ЗначениеЗаполнено(РезультатВыполнения.КодСостояния) Тогда
			Шаблон = НСтр("ru = 'При отправке документа в банк произошла ошибка (%1). %2'");
			ТекстОшибки = СтрШаблон(Шаблон, РезультатВыполнения.КодСостояния, РезультатВыполнения.СообщениеОбОшибке);
		Иначе
			ТекстОшибки = РезультатВыполнения.СообщениеОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Создает соединение с сервером в интернет.
//
// Параметры:
//  АдресСервера - Строка - URI
//  Таймаут - Число - Определяет время ожидания осуществляемого соединения и операций, в секундах. 0 - таймаут не установлен.
// 
// Возвращаемое значение:
// HTTPСоединение - предназначен для работы с файлами на http-серверах.
//
Функция СоединениеССервером(АдресСервера, Таймаут)
	
	Перем ЗащищенноеСоединение;
	Адрес = "";
	Протокол = "";
	
	ЭлектронноеВзаимодействиеСлужебный.ОпределитьПараметрыСайта(АдресСервера, ЗащищенноеСоединение, Адрес, Протокол);
	Прокси = ЭлектронноеВзаимодействиеСлужебный.СформироватьПрокси(Протокол);
	
	Соединение = Новый HTTPСоединение(Адрес, , , ,Прокси, Таймаут, ЗащищенноеСоединение);
	
	Возврат Соединение;

КонецФункции

Функция ОтправитьPOSTЗапросРекурсивно(ПараметрыОтправки, ПолучитьТелоКакСтроку, Таймаут, ПолучитьЛог, НастройкаОбмена, Перенаправления)
	
	СтруктураВозврата = Новый Структура("Статус, Тело, СообщениеОбОшибке, КодСостояния");
	
	Соединение = СоединениеССервером(ПараметрыОтправки.АдресСервера, Таймаут);

	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыОтправки.Ресурс, ПараметрыОтправки.Заголовки);
	
	Если НЕ ПараметрыОтправки.Данные = Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыОтправки.Данные);
	КонецЕсли;

	Попытка
		Если ПолучитьЛог ИЛИ НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
			СохранитьЗапрос(НастройкаОбмена, ПараметрыОтправки.АдресСервера, Соединение, HTTPЗапрос);
		КонецЕсли;
		ОтветHTTP = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Если ПолучитьЛог ИЛИ НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
			СохранитьОтвет(НастройкаОбмена, ОтветHTTP);
		КонецЕсли;
	Исключение
		СтруктураВозврата.Статус = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	Если ОтветHTTP.КодСостояния = 301 // 301 Moved Permanently
		Или ОтветHTTP.КодСостояния = 302 // 302 Found, 302 Moved Temporarily
		Или ОтветHTTP.КодСостояния = 303 // 303 See Other by GET
		Или ОтветHTTP.КодСостояния = 307 // 307 Temporary Redirect
		Или ОтветHTTP.КодСостояния = 308 Тогда // 308 Permanent Redirect
		
		Если Перенаправления.Количество() > 7 Тогда
			СтруктураВозврата.Статус = Ложь;
			СтруктураВозврата.СообщениеОбОшибке = НСтр("ru = 'Превышено количество перенаправлений.'");
			Возврат СтруктураВозврата;
		Иначе
			
			НовыйURL = ОтветHTTP.Заголовки["Location"];
			
			Если НовыйURL = Неопределено Тогда
				СтруктураВозврата.Статус = Ложь;
				СтруктураВозврата.СообщениеОбОшибке = НСтр("ru = 'Некорректное перенаправление, отсутствует HTTP-заголовок ответа ""Location"".'");
				Возврат СтруктураВозврата;
			КонецЕсли;
			
			НовыйURL = СокрЛП(НовыйURL);
			
			Если ПустаяСтрока(НовыйURL) Тогда
				СтруктураВозврата.Статус = Ложь;
				СтруктураВозврата.СообщениеОбОшибке = НСтр("ru = 'Некорректное перенаправление, пустой HTTP-заголовок ответа ""Location"".'");
				Возврат СтруктураВозврата;
			КонецЕсли;
			
			Если Перенаправления.Найти(НовыйURL) <> Неопределено Тогда
				СтруктураВозврата.Статус = Ложь;
				СтруктураВозврата.СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Циклическое перенаправление.
																	|Попытка перейти на %1 уже выполнялась ранее.'"), НовыйURL);
				Возврат СтруктураВозврата;
			КонецЕсли;
			
			Перенаправления.Добавить(ПараметрыОтправки.АдресСервера);
			
			Если Не СтрНачинаетсяС(НовыйURL, "http") Тогда
				СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыОтправки.АдресСервера);
				Протокол      = СтруктураURI.Схема;
				Если ПустаяСтрока(Протокол) Тогда 
					Протокол = "http";
				КонецЕсли;
				// <схема>://<хост>:<порт>/<путь>
				НовыйURL = СтрШаблон("%1://%2:%3/%4", Протокол, СтруктураURI.Сервер, Формат(СтруктураURI.Порт, "ЧГ="), НовыйURL);
			КонецЕсли;
			
			ПараметрыОтправки.АдресСервера = НовыйURL;
			
			Возврат ОтправитьPOSTЗапросРекурсивно(
				ПараметрыОтправки, ПолучитьТелоКакСтроку, Таймаут, ПолучитьЛог, НастройкаОбмена, Перенаправления);
			
		КонецЕсли;
		
	КонецЕсли;

	HTTPЗапрос = Неопределено;
	
	Если ОтветHTTP.КодСостояния = 200 Тогда
		СтруктураВозврата.Статус = Истина;
		Если ПолучитьТелоКакСтроку Тогда
			СтруктураВозврата.Тело = ОтветHTTP.ПолучитьТелоКакСтроку();
		Иначе
			СтруктураВозврата.Тело = ОтветHTTP.ПолучитьТелоКакДвоичныеДанные();
		КонецЕсли;
	Иначе
		СтруктураВозврата.Статус = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = ЭлектронноеВзаимодействиеСлужебный.РасшифровкаКодаСостоянияHTTP(
			ОтветHTTP.КодСостояния);
		СтруктураВозврата.Тело = ОтветHTTP.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	СтруктураВозврата.КодСостояния = ОтветHTTP.КодСостояния;

	Возврат СтруктураВозврата;
	
КонецФункции

Функция НайтиПодготовленныеКОтправкеПакеты(МассивСообщенийОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭДСообщения.Ссылка КАК ПакетЭД,
	|	ПакетЭДСообщения.Сообщение КАК СообщениеОбмена
	|ИЗ
	|	Документ.ПакетОбменСБанками.Сообщения КАК ПакетЭДСообщения
	|ГДЕ
	|	ПакетЭДСообщения.Сообщение В(&МассивСообщенийОбмена)
	|	И ПакетЭДСообщения.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)";
	Запрос.УстановитьПараметр("МассивСообщенийОбмена", МассивСообщенийОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеВозврата = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		СоответствиеВозврата.Вставить(Выборка.СообщениеОбмена, Выборка.ПакетЭД);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

#КонецОбласти

#Область ОбработкаПакетов

Процедура ОбработатьОшибкуПередачиПакета(СообщенияОбмена, ВидОперации, ТекстОшибки, ПакетОбмена = Неопределено)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОшибкаПередачи);
	СтруктураПараметров.Вставить("ПричинаОтклонения", ТекстОшибки);
	
	Для Каждого СообщениеОбмена Из СообщенияОбмена Цикл
		ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
	КонецЦикла;
	
	ОбработатьОшибку(ВидОперации, ТекстОшибки, , ПакетОбмена);
	
КонецПроцедуры

Функция СообщенияОбменаВПакетеЭДО(ПакетОбменСБанками)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПакетОбменСБанкамиСообщения.Сообщение
	               |ИЗ
	               |	Документ.ПакетОбменСБанками.Сообщения КАК ПакетОбменСБанкамиСообщения
	               |ГДЕ
	               |	ПакетОбменСБанкамиСообщения.Ссылка = &ПакетОбменСБанками";
	Запрос.УстановитьПараметр("ПакетОбменСБанками", ПакетОбменСБанками);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаРезультата.ВыгрузитьКолонку("Сообщение");;
	
КонецФункции

Функция НайтиПакетОбменСБанками(НастройкаОбмена, ВнешнийИдентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПакетОбменСБанками.Ссылка
	               |ИЗ
	               |	Документ.ПакетОбменСБанками КАК ПакетОбменСБанками
	               |ГДЕ
	               |	ПакетОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	               |	И ПакетОбменСБанками.ВнешнийИдентификатор = &ВнешнийИдентификатор
	               |	И ПакетОбменСБанками.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("ВнешнийИдентификатор", ВнешнийИдентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли
	
КонецФункции

Процедура ДобавитьСообщениеОбменаВПакет(Пакет, СообщениеОбмена)
	
	ПакетОбъект = Пакет.ПолучитьОбъект();
	
	НоваяСтрокаСообщениеОбмена = ПакетОбъект.Сообщения.Добавить();
	НоваяСтрокаСообщениеОбмена.Сообщение = СообщениеОбмена;
	ПакетОбъект.Записать();
	
КонецПроцедуры

Функция СформироватьНовыйПакетОбменСБанками(СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетОбменСБанками = Документы.ПакетОбменСБанками.СоздатьДокумент();
		ПакетОбменСБанками.Дата = ТекущаяДатаСеанса();
		ЗаполнитьЗначенияСвойств(ПакетОбменСБанками, СтруктураПараметров);
		ПакетОбменСБанками.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Операция = НСтр("ru = 'Создание пакета обмена'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
	КонецПопытки;
	
	Возврат ПакетОбменСБанками.Ссылка;
	
КонецФункции

Процедура ПрочитатьДокументИзПакета(НастройкаОбмена, ПакетОбменСБанками, Document, МассивВнешнихИдентификаторов, СоздаватьОперацииВыписки, ДанныеВозврата)

	Если МассивВнешнихИдентификаторов.Найти(ЗначениеСвойстваXDTO(Document, "id")) <> Неопределено Тогда
		Возврат; // данное сообщение уже распаковано и находится в табличной части пакета
	КонецЕсли;
	Если ЗначениеСвойстваXDTO(Document, "compressed") <> Неопределено
		И XMLЗначение(Тип("Булево"), Document.compressed) = Истина Тогда
		data = ЗначениеСвойстваXDTO(Document, "data");
		Если ТипЗнч(data) = Тип("ОбъектXDTO") Тогда
			ДвоичныеДанныеФайла = Base64Значение(data.Последовательность().ПолучитьТекст(0));
		Иначе
			ДвоичныеДанныеФайла = Base64Значение(data);
		КонецЕсли;
		ЧтениеДанныхАрхив = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
		ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("Ext", Новый УникальныйИдентификатор);
		Попытка
			ЧтениеZIP = Новый ЧтениеZIPФайла(ЧтениеДанныхАрхив.ИсходныйПоток());
			ЧтениеZIP.ИзвлечьВсе(ПапкаДляРаспаковки);
		Исключение
			Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЧтениеZIP, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
			Иначе
				ТекстСообщения = НСтр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
			КонецЕсли;
			ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
											|Подробное представление ошибки:
											|%2'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ПодробнаяИнформация = СтрШаблон(ПодробнаяИнформация, ПакетОбменСБанками, ПодробноеПредставлениеОшибки);
			Операция = НСтр("ru = 'Распаковка пакета'");
			ОбработатьОшибку(Операция, ПодробнаяИнформация, ТекстСообщения, ПакетОбменСБанками);
			ФайловаяСистема.УдалитьВременныйКаталог(ПапкаДляРаспаковки);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		ЧтениеZIP.Закрыть();

		ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*");
		Если ФайлыЭД.Количество() > 0 Тогда
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлыЭД[0].ПолноеИмя);
			ФайловаяСистема.УдалитьВременныйКаталог(ПапкаДляРаспаковки);
		Иначе
			ФайловаяСистема.УдалитьВременныйКаталог(ПапкаДляРаспаковки);
			Возврат;
		КонецЕсли;
	Иначе
		data = ЗначениеСвойстваXDTO(Document, "data");
		Если ТипЗнч(data) = Тип("ОбъектXDTO") Тогда
			ДвоичныеДанныеФайла = Base64Значение(data.Последовательность().ПолучитьТекст(0));
		Иначе
			ДвоичныеДанныеФайла = Base64Значение(data);
		КонецЕсли;
	КонецЕсли;

	КодДокумента = ЗначениеСвойстваXDTO(Document, "dockind");
	НовоеСообщениеОбмена = Неопределено;
	Если КодДокумента = "02" Тогда
		ПрочитатьИзвещениеОСостоянииДокумента(
			НастройкаОбмена, ПакетОбменСБанками, ДвоичныеДанныеФайла, НовоеСообщениеОбмена, ДанныеВозврата)
	ИначеЕсли КодДокумента = "01" Тогда
		ПрочитатьИзвещениеОСостоянииПакета(НастройкаОбмена, ПакетОбменСБанками, ДвоичныеДанныеФайла, ДанныеВозврата);
	ИначеЕсли КодДокумента = "15" Тогда
		ПрочитатьВыпискуБанка(
			НастройкаОбмена, ПакетОбменСБанками, ДвоичныеДанныеФайла, СоздаватьОперацииВыписки, НовоеСообщениеОбмена);
	ИначеЕсли КодДокумента = "06" Тогда
		ПрочитатьНастройкиОбмена(НастройкаОбмена, ДвоичныеДанныеФайла)
	ИначеЕсли КодДокумента = "20" Тогда
		ПрочитатьПодтверждениеОткрытияСчетовПоЗарплатномуПроекту(
			НастройкаОбмена, ПакетОбменСБанками, ДвоичныеДанныеФайла, Document, НовоеСообщениеОбмена, ДанныеВозврата)
	ИначеЕсли КодДокумента = "22" Тогда
		ПрочитатьПодтверждениеЗачисленияДенежныхСредствНаСчетаСотрудников(
			НастройкаОбмена, ПакетОбменСБанками, ДвоичныеДанныеФайла, Document, НовоеСообщениеОбмена, ДанныеВозврата)
	ИначеЕсли КодДокумента = "35" Тогда
		ПрочитатьВалютнуюВыпискуБанка(
			НастройкаОбмена, ПакетОбменСБанками, ДвоичныеДанныеФайла, СоздаватьОперацииВыписки, НовоеСообщениеОбмена)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовоеСообщениеОбмена) Тогда
		signature = ЗначениеСвойстваXDTO(Document, "signature");
		Если signature <> Неопределено Тогда
			Если ТипЗнч(signature) = Тип("ОбъектXDTO") Тогда
				ДобавитьПодпись(signature, НовоеСообщениеОбмена, ДанныеВозврата);
			Иначе
				Для Каждого Подпись Из signature Цикл
					ДобавитьПодпись(Подпись, НовоеСообщениеОбмена, ДанныеВозврата);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьВыпискуБанка(НастройкаОбмена, ПакетОбменСБанками, ДвоичныеДанныеФайла, СоздаватьОперацииВыписки, НовоеСообщениеОбмена)
	
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
	
	АктуальныеВидыЭД = ОбменСБанкамиСлужебныйПовтИсп.АктуальныеВидыЭД();

	Если АктуальныеВидыЭД.Найти(Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки) = Неопределено Тогда
		// Для ЗУП не требуется получать выписку банка.
		Возврат;
	КонецЕсли;
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
	Попытка
		Statement = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	Исключение
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при разборе пакета %1.
										|%2'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения, ПакетОбменСБанками, КраткоеПредставлениеОшибки);
		Иначе
			ТекстСообщения = НСтр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
		КонецЕсли;
		ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
										|Подробное представление ошибки:
										|%2'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробнаяИнформация = СтрШаблон(ПодробнаяИнформация, ПакетОбменСБанками, ПодробноеПредставлениеОшибки);
		ВидОперации = НСтр("ru = 'Чтение ЭД.'");
		ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, , ПакетОбменСБанками);
		ВызватьИсключение ТекстСообщения
	КонецПопытки;
	ОбъектXML.Закрыть();
	
	ИдентификаторЗапроса = ЗначениеСвойстваXDTO(Statement, "ExtIDStatementRequest");
	
	Если ЗначениеЗаполнено(ИдентификаторЗапроса) Тогда
		СообщениеЗапрос = СообщениеОбменаПоИдентификатору(НастройкаОбмена, ИдентификаторЗапроса);
		
		Если НЕ ЗначениеЗаполнено(СообщениеЗапрос) Тогда
			ВидОперации = НСтр("ru = 'Распаковка пакета'");
			ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
											|Не найден  запрос выписки по идентификатору: %2'");
			ПодробнаяИнформация = СтрШаблон(
				ПодробнаяИнформация, ПакетОбменСБанками, ИдентификаторЗапроса);
			ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, , ПакетОбменСБанками);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(СообщениеЗапрос) Тогда
		СтруктураПараметров = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.Обработан);
		ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЗапрос, СтруктураПараметров);
	КонецЕсли;

	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);

	СтруктураРеквизитов = Новый Структура;
	
	СозданАвтоматически = Ложь;
	Если ЗначениеЗаполнено(СообщениеЗапрос) Тогда
		СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеЗапрос);
		РеквизитыЗапроса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеЗапрос, "СозданАвтоматически, НомерСчета");
		СозданАвтоматически = РеквизитыЗапроса.СозданАвтоматически;
		СтруктураРеквизитов.Вставить("СозданАвтоматически", РеквизитыЗапроса.СозданАвтоматически);
		СтруктураРеквизитов.Вставить("НомерСчета", РеквизитыЗапроса.НомерСчета);
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
	СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
	СтруктураРеквизитов.Вставить("ВнешнийИдентификатор", ЗначениеСвойстваXDTO(Statement, "id"));
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
	ДатаНачалаСтрокой = ЗначениеСвойстваXDTO(Statement, "Data.DateFrom");
	Если ЗначениеЗаполнено(ДатаНачалаСтрокой) Тогда
		ДатаНачала = XMLЗначение(Тип("Дата"), Сред(ДатаНачалаСтрокой, 1, 19));
		Если ЗначениеЗаполнено(ДатаНачала) Тогда
			СтруктураРеквизитов.Вставить("ДатаНачала", ДатаНачала);
		КонецЕсли;
	КонецЕсли;
	ДатаОкончанияСтрокой = ЗначениеСвойстваXDTO(Statement, "Data.DateTo");
	Если ЗначениеЗаполнено(ДатаОкончанияСтрокой) Тогда
		ДатаОкончания = XMLЗначение(Тип("Дата"), Сред(ДатаОкончанияСтрокой, 1, 19));
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			СтруктураРеквизитов.Вставить("ДатаОкончания", ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	СохранитьСообщениеОбмена(СтруктураРеквизитов, НовоеСообщениеОбмена);
	Если Не ЗначениеЗаполнено(НовоеСообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если СозданАвтоматически ИЛИ СоздаватьОперацииВыписки Тогда
		ОбменСБанкамиПереопределяемый.ПриПолученииВыписки(НовоеСообщениеОбмена);
	КонецЕсли;
	
	ДобавитьСообщениеОбменаВПакет(ПакетОбменСБанками, НовоеСообщениеОбмена);
	СохранитьШтампыБанка(НастройкаОбмена, НовоеСообщениеОбмена);
	ОпределитьИсполненныеПлатежныеПоручения(НовоеСообщениеОбмена);
	СохранитьДатуПолученияВыписки(НастройкаОбмена);
	
КонецПроцедуры

Процедура ПрочитатьПодтверждениеОткрытияСчетовПоЗарплатномуПроекту(НастройкаОбмена, ПакетОбменСБанками, ДвоичныеДанныеФайла, Document, НовоеСообщениеОбмена, ДанныеВозврата)
	
	АктуальныеВидыЭД = ОбменСБанкамиСлужебныйПовтИсп.АктуальныеВидыЭД();
	Если АктуальныеВидыЭД.Найти(Перечисления.ВидыЭДОбменСБанками.СписокНаОткрытиеСчетовПоЗарплатномуПроекту) = Неопределено Тогда
		// Для конфигурации без зарплатного проекта данный электронный документ не нужен.
		Возврат;
	КонецЕсли;
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
		
	ОбъектВладелец = Неопределено;
	ИдентификаторЭДВладельца = ЗначениеСвойстваXDTO(Document, "extID");
	ДанныеОповещения = Новый Структура;

	ИмяФайла = ЗначениеСвойстваXDTO(Document, "Data.fileName");
	ОбменСБанкамиПереопределяемый.ПриПолученииXMLФайла(АдресВХранилище, ИмяФайла, ОбъектВладелец, ДанныеОповещения);
			
	Если НЕ ЗначениеЗаполнено(ОбъектВладелец) Тогда
		ОбъектВладелец = НастройкаОбмена;
	КонецЕсли;
		
	СтруктураРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
	СтруктураРеквизитов.Вставить(
		"ВидЭД", Перечисления.ВидыЭДОбменСБанками.ПодтверждениеОткрытияСчетовПоЗарплатномуПроекту);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
	СтруктураРеквизитов.Вставить("ВнешнийИдентификатор", ЗначениеСвойстваXDTO(Document, "id"));
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);

	Если ЗначениеЗаполнено(ИдентификаторЭДВладельца) Тогда
		СообщениеРодитель = СообщениеОбменаПоИдентификатору(НастройкаОбмена, ИдентификаторЭДВладельца);
		Если ЗначениеЗаполнено(СообщениеРодитель) Тогда
			СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеРодитель);
			УстановитьСтатусСообщенияОбмена(СообщениеРодитель, Перечисления.СтатусыОбменСБанками.ПолученоПодтверждение);
			ДокументУчета = ОбменСБанкамиСлужебныйВызовСервера.ДокументУчета(СообщениеРодитель);
			Если ЗначениеЗаполнено(ДокументУчета) Тогда
				СостояниеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеРодитель, "Состояние");
				ДанныеВозврата.ПараметрОповещения.Вставить(ДокументУчета, СостояниеЭДО);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СохранитьСообщениеОбмена(СтруктураРеквизитов, НовоеСообщениеОбмена);
	Если Не ЗначениеЗаполнено(НовоеСообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОповещения.Количество() Тогда
		ДанныеВозврата.МассивОповещений.Добавить(ДанныеОповещения);
	КонецЕсли;
	
	ДобавитьСообщениеОбменаВПакет(ПакетОбменСБанками, НовоеСообщениеОбмена);
	
КонецПроцедуры

#КонецОбласти

#Область ЗарплатныйПроект

Функция СформироватьЭДПоЗарплатномуПроекту(СсылкаНаОбъект, НастройкиОбменаЭД, ВидЭД)
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", ВидЭД);
	СтруктураЭД.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Идентификатор", Строка(Новый УникальныйИдентификатор));
	СтруктураЭД.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ПечатныйНомерДокумента = "";
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, ПечатныйНомерДокумента);
	
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("НастройкаОбмена", НастройкиОбменаЭД.НастройкаОбмена);
	СтруктураЭД.Вставить("ПрограммаБанка", НастройкиОбменаЭД.ПрограммаБанка);
	
	ИмяФайла = Неопределено; АдресФайла = Неопределено;
	ОбменСБанкамиПереопределяемый.ПриФормированииXMLФайла(СсылкаНаОбъект, ИмяФайла, АдресФайла);
		
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
		
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", НастройкиОбменаЭД.Организация);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	
	СтруктураЭД.Вставить("Основной", Истина);
	СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураЭД.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	
	СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
	ВозвращаемоеЗначение = СтруктураПараметров;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область МаршрутыПодписания

// Формирует маршрут подписания по умолчанию для настройки обмена с банком.
//
// Параметры:
//  НастройкаОбмена						 - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена.
//  ВидДокумента						 - ПеречислениеСсылка.ВидыЭДОбменСБанками  - вид электронного документа.
//  ЗаполнитьКлючАвтоматическойНастройки - Булево                                  - если Истина, то у настройки будет
//      заполнен ключ, по которому она будет найдена при попытке обновления настроек из банка.
// 
// Возвращаемое значение:
//  СправочникСсылка.МаршрутыПодписания - ссылка на маршрут подписания.
//
Функция НовыйМаршрутПоСертификатамНастройки(НастройкаОбмена, ВидДокумента, 
	ЗаполнитьКлючАвтоматическойНастройки = Истина) Экспорт

	Маршрут = Справочники.МаршрутыПодписания.ПустаяСсылка();
	НастройкаСодержитСертификаты = Ложь;
	Для каждого СтрокаСертификата Из НастройкаОбмена.СертификатыПодписейОрганизации Цикл
		Если ЗначениеЗаполнено(СтрокаСертификата.СертификатЭП) Тогда
			НастройкаСодержитСертификаты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкаСодержитСертификаты Тогда
		МаршрутОбъект = Справочники.МаршрутыПодписания.СоздатьЭлемент();
		МаршрутОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 - %2 (%3)", 
			НастройкаОбмена.Организация, НастройкаОбмена.Банк, ВидДокумента);
		МаршрутОбъект.СхемаПодписания = Перечисления.СхемыПодписанияЭД.ПоПравилам;
		МаршрутОбъект.Организация = НастройкаОбмена.Организация;
		
		// Добавим ключ автоматической настройки по аналогии с загрузкой настроек из банка
		Если ЗаполнитьКлючАвтоматическойНастройки Тогда
			МаршрутОбъект.КлючАвтоматическойНастройки = Справочники.НастройкиОбменСБанками.КлючАвтоматическойНастройки(
				НастройкаОбмена, ВидДокумента);
		КонецЕсли;
		
		ДеревоТребований = ЭлектронноеВзаимодействиеСлужебный.ПустоеДеревоТребованийКПодписанию();
		КорневаяСтрока = ДеревоТребований.Строки.Добавить();
		КорневаяСтрока.Требование = Перечисления.ТребованияКПодписаниюЭД.И;
		Для Каждого СтрокаСертификата Из НастройкаОбмена.СертификатыПодписейОрганизации Цикл
			СтрокаПодписанта = КорневаяСтрока.Строки.Добавить();
			СтрокаПодписанта.Сертификат = СтрокаСертификата.СертификатЭП;
		КонецЦикла;
		
		ЭлектронноеВзаимодействиеСлужебный.ЗаполнитьТаблицуТребованийКПодписаниюПоДереву(МаршрутОбъект.ТаблицаТребований,
			ДеревоТребований);
		МаршрутОбъект.Записать();
		
		Маршрут = МаршрутОбъект.Ссылка;
	КонецЕсли;
	
	Возврат Маршрут;

КонецФункции 

// Формирует для сообщения обмена с банком текстовое представление прогресса подписания.
//
// Параметры:
//  СообщениеОбмена	 - ДокументСсылка.СообщениеОбменСБанками - ссылка на электронный документ.
//  ВесМаршрута		 - Число - максимально возможное количество подписей по маршруту.
// 
// Возвращаемое значение:
//  Строка - текстовое представление прогресса подписания.
//
Функция ПредставлениеПрогрессаПодписания(СообщениеОбмена, ВесМаршрута) Экспорт

	// Определим количество уже установленных подписей
	Если ЗначениеЗаполнено(СообщениеОбмена.Ссылка) Тогда
		ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеОбмена.Ссылка);
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			УстановленоПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл).Количество();
		Иначе
			УстановленоПодписей = 0;
		КонецЕсли;
	Иначе
		УстановленоПодписей = 0;
	КонецЕсли;
	
	// Сформируем представление прогресса подписания
	Если ВесМаршрута = 0 Тогда
		ВсегоПодписей = Макс(1, УстановленоПодписей);
	Иначе
		ВсегоПодписей = ВесМаршрута + УстановленоПодписей;
	КонецЕсли;
	ЯзыкКонфигурации = ОбщегоНазначения.КодОсновногоЯзыка();
	Разделитель = ?(ЭлектронноеВзаимодействиеСлужебный.КонфигурацияИспользуетНесколькоЯзыков(), "/", НСтр("ru = 'из'", ЯзыкКонфигурации));
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '(%1 %2 %3)'", ЯзыкКонфигурации), 
		УстановленоПодписей, Разделитель, ВсегоПодписей);
		
	Возврат Результат;

КонецФункции

// Возвращает имя поля формы настроек обмена с банком, на котором нужно спозиционироваться при возникновении ошибки
//   проверки настроек.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена.
//  НомерСтроки		- Число - номер строки таблицы исходящих документов, на которой нужно спозиционироваться.
// 
// Возвращаемое значение:
//  Строка - имя поля для передачи в функцию ОбщегоНазначения.СообщитьПользователю.
//
Функция ИмяПоляДляОтображенияОшибкиПоМаршруту(НастройкаОбмена, НомерСтроки) Экспорт

	ИмяПоляОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ИсходящиеДокументы[%1].МаршрутПодписания", 
		НомерСтроки - 1);
	
	Возврат ИмяПоляОшибки;

КонецФункции

Функция НайтиСоздатьМаршрутПодписания(НастройкаОбмена, ВидЭД)
	
	УстановитьПривилегированныйРежим(Истина);
	КлючПоиска = Справочники.НастройкиОбменСБанками.КлючАвтоматическойНастройки(НастройкаОбмена, ВидЭД);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МаршрутыПодписания.Ссылка
	               |ИЗ
	               |	Справочник.МаршрутыПодписания КАК МаршрутыПодписания
	               |ГДЕ
	               |	МаршрутыПодписания.Организация = &Организация
	               |	И МаршрутыПодписания.КлючАвтоматическойНастройки = &КлючАвтоматическойНастройки";
	Запрос.УстановитьПараметр("Организация", НастройкаОбмена.Организация);
	Запрос.УстановитьПараметр("КлючАвтоматическойНастройки", КлючПоиска);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Объект = Результат.Ссылка.ПолучитьОбъект();
		Объект.ТаблицаТребований.Очистить();
		Возврат Объект;
	КонецЕсли;
	
	Возврат Справочники.МаршрутыПодписания.СоздатьЭлемент();
	
КонецФункции

#КонецОбласти

#Область ОбработкаЭлектронногоДокумента

// Получает текущее состояние обмена по владельцу
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка - ссылка на документ, владельца обмена
// 
// Возвращаемое значение:
//  Структура - текущее состояние обмена, содержит поля:
//   * СсылкаНаДокумент - ДокументСсылка.СообщениеОбменСБанками - актуальный электронный документ
//   * Состояние - ПеречислениеСсылка.СостоянияОбменСБанками - состояние электронного документа
//   * Статус - ПеречислениеСсылка.СтатусыОбменСБанками - статус электронного документа.
//
Функция СтруктураВерсииЭД(СсылкаНаВладельца)
	
	ВозвращаемоеЗначение = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияОбменСБанками.СообщениеОбмена,
	|	СостоянияОбменСБанками.Состояние,
	|	СостоянияОбменСБанками.СообщениеОбмена.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	|ГДЕ
	|	СостоянияОбменСБанками.СсылкаНаОбъект = &СсылкаНаОбъект
	|	И НЕ СостоянияОбменСБанками.СообщениеОбмена.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
	
	ВыборкаПоРегистру = Запрос.Выполнить().Выбрать();
	КомментарийРС = "";
	
	Если ВыборкаПоРегистру.Следующий() Тогда
		Состояние = ВыборкаПоРегистру.Состояние;
		СсылкаНаДокумент = ВыборкаПоРегистру.СообщениеОбмена;
		Статус = ВыборкаПоРегистру.Статус;
	Иначе
		Состояние = Перечисления.СостоянияОбменСБанками.ПустаяСсылка();
		СсылкаНаДокумент = Документы.СообщениеОбменСБанками.ПустаяСсылка();
		Статус = Перечисления.СтатусыОбменСБанками.ПустаяСсылка();
	КонецЕсли;

	ВозвращаемоеЗначение.Вставить("СсылкаНаДокумент", СсылкаНаДокумент);
	ВозвращаемоеЗначение.Вставить("Состояние", Состояние);
	ВозвращаемоеЗначение.Вставить("Статус", Статус);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Только для внутреннего использования. Получает начальное состояние ЭД.
//
// Параметры:
//  СсылкаНаВладельца - Источник объекта либо ссылка электронного документа владельца.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияОбменСБанками - состояние ЭД.
//
Функция ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаВладельца)
	
	ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца.Ссылка);
	
	СостояниеЭД = Перечисления.СостоянияОбменСБанками.ПустаяСсылка();
	Направление = "";
	Если ПараметрыЭД.Свойство("Направление", Направление) И ЗначениеЗаполнено(Направление) Тогда
		Если Направление = Перечисления.НаправленияЭД.Исходящий Тогда
			СостояниеЭД = Перечисления.СостоянияОбменСБанками.НеСформирован;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеЭД;
	
КонецФункции

Процедура УдалитьСтаруюВерсиюСообщения(СсылкаНаОбъект)
	
	СтруктураВерсии = СтруктураВерсииЭД(СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДокумент)
		И СтруктураВерсии.Статус = Перечисления.СтатусыОбменСБанками.Сформирован Тогда
		
		НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураВерсии.СсылкаНаДокумент, "НастройкаОбмена");
		
		ДокументОбъект = СтруктураВерсии.СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
		
		// Удалим подчиненные электронные доп. файлы.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщениеОбменСБанками.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		|ГДЕ
		|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
		|	И СообщениеОбменСБанками.СообщениеРодитель = &СообщениеРодитель
		|	И НЕ СообщениеОбменСБанками.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
		Запрос.УстановитьПараметр("СообщениеРодитель", СтруктураВерсии.СсылкаНаДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМассивСОтборомПоСтатусу(ТаблицаДанных, МассивОтбора, МассивЗаполнения)
	
	Для Каждого Элемент Из ТаблицаДанных Цикл
		Если МассивОтбора.Найти(Элемент.Статус) <> Неопределено Тогда
			Если МассивЗаполнения.Найти(Элемент.СсылкаНаСообщениеОбмена) = Неопределено Тогда
				МассивЗаполнения.Добавить(Элемент.СсылкаНаСообщениеОбмена);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

Функция СтруктураПараметровЭД()
	
	ПараметрыЭД = Новый Структура;
	
	ПараметрыЭД.Вставить("ВидЭД", Неопределено);
	ПараметрыЭД.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	ПараметрыЭД.Вставить("Банк", Неопределено);
	ПараметрыЭД.Вставить("Организация", Неопределено);
	ПараметрыЭД.Вставить("НастройкаОбмена", Неопределено);
	ПараметрыЭД.Вставить("УстановленныеПодписи", Новый Массив);
	
	Возврат ПараметрыЭД;
	
КонецФункции

Процедура ПроверитьНаличиеИУдалитьСостояниеДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостоянияОбменСБанками.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаОбъект;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьПрисоединенныйФайл(ПакетОбменСБанками, ДвоичныеДанныеФайла)
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	Представление = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Строка(ПакетОбменСБанками));
	Представление = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Представление, "");
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", ПакетОбменСБанками);
	ПараметрыФайла.Вставить("ИмяБезРасширения", Представление);
	ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
	ПараметрыФайла.Вставить("Служебный", Истина);
	
	РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВоВременномХранилище);
	
КонецПроцедуры

// Производит удаление из массива объектов для которых запрещено формирование новых ЭД.
//
// Параметры:
//  МассивСсылок - Массив - массив ссылок.
//
Процедура УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И СостоянияЭД.СообщениеОбмена.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Отклонен)
	|	И СостоянияЭД.СообщениеОбмена.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.НеСформирован)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Индекс = МассивСсылок.Найти(Результат.СсылкаНаОбъект);
		МассивСсылок.Удалить(Индекс);
		ШаблонСообщения = НСтр("ru='Для документа %1 уже есть актуальный электронный документ.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;

КонецПроцедуры

// Процедура определяет, по каким объектам ИБ не надо выполнять действия (подписание, подготовка к отправке).
//
// Параметры:
//  НастройкиОбъектов - соответствие, содержит ссылки на документы ИБ, 
//                     по которым предполагается выполнение каких-либо действий с ЭД.
//  МассивНеобрабатываемыхОбъектов - массив, возвращает в вызывающую процедуру ссылки на объекты ИБ,
//                                  по которым не надо выполнять никаких действий.
//
Процедура ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов)
	
	МассивОтбора = Новый Массив;
	Для Каждого Элемент Из НастройкиОбъектов Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			МассивОтбора.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК СсылкаНаОбъект,
	|	СостоянияЭД.СообщениеОбмена КАК СообщениеОбмена,
	|	СостоянияЭД.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И СостоянияЭД.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ПлатежИсполнен), ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении), ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИсполнение))";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивОтбора);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		МассивНеобрабатываемыхОбъектов.Добавить(Результат.СообщениеОбмена);
		
		ТекстСообщения = НСтр("ru = 'Обработка %1.
				|Не требуется выполнения действий с электронным документом.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Результат.СсылкаНаОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьВалютнуюВыпискуБанка(НастройкаОбмена, ПакетОбменСБанками, ДвоичныеДанныеФайла, СоздаватьОперацииВыписки, НовоеСообщениеОбмена)
	
	АктуальныеВидыЭД = ОбменСБанкамиСлужебныйПовтИсп.АктуальныеВидыЭД();
	Если АктуальныеВидыЭД.Найти(Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты) = Неопределено Тогда
		// Для конфигурации без валютных платежей данный вид электронного документа не нужен.
		Возврат;
	КонецЕсли;
	ОбъектXML = Новый ЧтениеXML;
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
	ОбъектXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
	Попытка
		Statement = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	Исключение
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при разборе пакета %1.
										|%2'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения, ПакетОбменСБанками, КраткоеПредставлениеОшибки);
		Иначе
			ТекстСообщения = НСтр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
		КонецЕсли;
		ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
										|Подробное представление ошибки:
										|%2'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробнаяИнформация = СтрШаблон(ПодробнаяИнформация, ПакетОбменСБанками, ПодробноеПредставлениеОшибки);
		ВидОперации = НСтр("ru = 'Чтение ЭД.'");
		ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, , ПакетОбменСБанками);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	ОбъектXML.Закрыть();
	
	ИдентификаторЗапроса = Statement.BkToCstmrStmt.GrpHdr.AddtlInf;

	Если ЗначениеЗаполнено(ИдентификаторЗапроса) Тогда
		СообщениеЗапрос = СообщениеОбменаПоИдентификатору(НастройкаОбмена, ИдентификаторЗапроса);
	
		Если НЕ ЗначениеЗаполнено(СообщениеЗапрос) Тогда
			ВидОперации = НСтр("ru = 'Распаковка пакета'");
			ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
											|Не найден  запрос выписки по идентификатору: %2'");
			ПодробнаяИнформация = СтрШаблон(
				ПодробнаяИнформация, ПакетОбменСБанками, ИдентификаторЗапроса);
			ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, , ПакетОбменСБанками);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(СообщениеЗапрос) Тогда
		СтруктураПараметров = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.Обработан);
		ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЗапрос, СтруктураПараметров);
	КонецЕсли;

	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);

	СтруктураРеквизитов = Новый Структура;
	
	Если ТипЗнч(Statement.BkToCstmrStmt.Stmt) = Тип("ОбъектXDTO") Тогда
		Выписки = Новый Массив;
		Выписки.Добавить(Statement.BkToCstmrStmt.Stmt);
	Иначе
		Выписки = Statement.BkToCstmrStmt.Stmt;
	КонецЕсли;

	Для Каждого Выписка Из Выписки Цикл
		Если Выписка.Свойства().Получить("FrToDt") <> Неопределено Тогда
			НачалоПериода = XMLЗначение(Тип("Дата"), Выписка.FrToDt.FrDtTm);
			Если ЗначениеЗаполнено(НачалоПериода) Тогда
				СтруктураРеквизитов.Вставить("ДатаНачала", НачалоПериода);
			КонецЕсли;
			КонецПериода = XMLЗначение(Тип("Дата"), Выписка.FrToDt.ToDtTm);
			Если ЗначениеЗаполнено(КонецПериода) Тогда
				СтруктураРеквизитов.Вставить("ДатаОкончания", КонецПериода);
			КонецЕсли;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	СозданАвтоматически = Ложь;
	Если ЗначениеЗаполнено(СообщениеЗапрос) Тогда
		СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеЗапрос);
		РеквизитыЗапроса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеЗапрос, "СозданАвтоматически, НомерСчета");
		СозданАвтоматически = РеквизитыЗапроса.СозданАвтоматически;
		СтруктураРеквизитов.Вставить("СозданАвтоматически", СозданАвтоматически);
		СтруктураРеквизитов.Вставить("НомерСчета", РеквизитыЗапроса.НомерСчета);
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
	СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
	СтруктураРеквизитов.Вставить("ВнешнийИдентификатор", Statement.BkToCstmrStmt.GrpHdr.MsgId);
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);

	СохранитьСообщениеОбмена(СтруктураРеквизитов, НовоеСообщениеОбмена);
	Если Не ЗначениеЗаполнено(НовоеСообщениеОбмена) Тогда 
		Возврат;
	КонецЕсли;
	
	Если СозданАвтоматически ИЛИ СоздаватьОперацииВыписки Тогда
		ОбменСБанкамиПереопределяемый.ПриПолученииВыписки(НовоеСообщениеОбмена);
	КонецЕсли;
	
	ДобавитьСообщениеОбменаВПакет(ПакетОбменСБанками, НовоеСообщениеОбмена);
	
	// Изменения состояния исполненных платежных поручений
	МассивИдентификаторовПлатежныхПоручений = Новый Массив;
	Если ТипЗнч(Statement.BkToCstmrStmt.Stmt) = Тип("ОбъектXDTO") Тогда
		Выписки = Новый Массив;
		Выписки.Добавить(Statement.BkToCstmrStmt.Stmt);
	Иначе
		Выписки = Statement.BkToCstmrStmt.Stmt;
	КонецЕсли;

	МаксДата = Неопределено;
	Для Каждого Stmt Из Выписки Цикл
		Если Stmt.Свойства().Получить("Ntry") <> Неопределено И Stmt.Ntry <> Неопределено Тогда
			Если ТипЗнч(Stmt.Ntry) = Тип("ОбъектXDTO") Тогда
				Транзакции = Новый Массив;
				Транзакции.Добавить(Stmt.Ntry);
			Иначе
				Транзакции = Stmt.Ntry;
			КонецЕсли;
			Для Каждого Транзакция Из Транзакции Цикл
				Если Транзакция.Свойства().Получить("NtryDtls") <> Неопределено И Транзакция.NtryDtls <> Неопределено Тогда
					Если ТипЗнч(Транзакция.NtryDtls) = Тип("ОбъектXDTO") Тогда
						ДеталиТранзакции = Новый Массив;
						ДеталиТранзакции.Добавить(Транзакция.NtryDtls);
					Иначе
						ДеталиТранзакции = Транзакция.NtryDtls;
					КонецЕсли;
					Для Каждого NtryDtls Из ДеталиТранзакции Цикл
						Если ЗначениеСвойстваXDTO(NtryDtls, "TxDtls") <> Неопределено Тогда
							Если ТипЗнч(NtryDtls.TxDtls) = Тип("ОбъектXDTO") Тогда
								Операции = Новый Массив;
								Операции.Добавить(NtryDtls.TxDtls);
							Иначе
								Операции = NtryDtls.TxDtls;
							КонецЕсли;
							Для Каждого TxDtls Из Операции Цикл
								ИдентификаторПлатежа = ЗначениеСвойстваXDTO(TxDtls, "Refs.MsgId");
								Если ЗначениеЗаполнено(ИдентификаторПлатежа) Тогда
									МассивИдентификаторовПлатежныхПоручений.Добавить(TxDtls.Refs.MsgId);
								КонецЕсли;
								Если ЗначениеСвойстваXDTO(TxDtls, "BookgDt") <> Неопределено Тогда
									ДатаОперацииСтрокой = ?(ЗначениеСвойстваXDTO(TxDtls.BookgDt, "Dt") <> Неопределено, TxDtls.BookgDt.Dt,
										TxDtls.BookgDt.DtTm);
									ДатаОперации = XMLЗначение(Тип("Дата"), ДатаОперацииСтрокой);
									Если МаксДата = Неопределено ИЛИ МаксДата < ДатаОперации Тогда
										МаксДата = ДатаОперации;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(МаксДата) Тогда
		СохранитьДатуПоследнейОперации(НастройкаОбмена, МаксДата);
	КонецЕсли;
	ОтметитьИсполненныеПлатежныеДокументы(
		НастройкаОбмена, Перечисления.ПрограммыБанка.АсинхронныйОбмен, МассивИдентификаторовПлатежныхПоручений);
	СохранитьДатуПолученияВыписки(НастройкаОбмена);
	
КонецПроцедуры

Процедура ПрочитатьИзвещениеОСостоянииДокумента(НастройкаОбмена, ПакетОбменСБанками, ДвоичныеДанныеФайла, НовоеСообщениеОбмена, ДанныеВозврата)
	
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
	Попытка
		StatusDocNotice = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(StatusDocNotice.formatVersion);
		Если Фабрика = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Неизвестная версия формата файла.'");
		КонецЕсли;
		ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
		ПространствоИмен = ПространствоИменАсинхронногоОбмена(StatusDocNotice.formatVersion);
		ИзвещениеОСостоянииТип = ТипЗначенияCML(Фабрика, ПространствоИмен, "StatusDocNotice");
		ОбъектXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
		StatusDocNotice = Фабрика.ПрочитатьXML(ОбъектXML, ИзвещениеОСостоянииТип);
	Исключение
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при разборе пакета %1.
										|%2'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения, ПакетОбменСБанками, КраткоеПредставлениеОшибки);
		Иначе
			ТекстСообщения = НСтр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
		КонецЕсли;
		ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
										|Подробное представление ошибки:
										|%2'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробнаяИнформация = СтрШаблон(ПодробнаяИнформация, ПакетОбменСБанками, ПодробноеПредставлениеОшибки);
		ВидОперации = НСтр("ru = 'Чтение ЭД.'");
		ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстСообщения, ПакетОбменСБанками);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	ОбъектXML.Закрыть();
	
	ИДЗапроса = StatusDocNotice.ExtIDStatusRequest;
	ЭтоОтветНаЗапросСостояния = ЗначениеЗаполнено(ИДЗапроса);
	ЭтоОтветНаОтзыв = Ложь;
	
	СообщениеЗапрос = Неопределено;
	Если ЭтоОтветНаЗапросСостояния Тогда
		СообщениеЗапрос = СообщениеОбменаПоИдентификатору(
			НастройкаОбмена, ИДЗапроса, Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД);
	КонецЕсли;
	
	СообщениеЭДО = Неопределено;
	Если ЗначениеЗаполнено(StatusDocNotice.ExtID) Тогда
		СообщениеЭДО = СообщениеОбменаПоИдентификатору(НастройкаОбмена, StatusDocNotice.ExtID);
	КонецЕсли;
	
	Если ЭтоОтветНаЗапросСостояния И ЗначениеЗаполнено(СообщениеЗапрос) Тогда
		ВидЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЗапрос, "ВидЭД");
		ЭтоОтветНаОтзыв = ВидЗапроса = Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД;
	ИначеЕсли ЗначениеЗаполнено(СообщениеЭДО)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЭДО, "ВидЭД") = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд Тогда
		ЭтоОтветНаЗонд = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеЭДО) Тогда
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеЭДО);
		СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
		СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ИзвещениеОСостоянииЭД);
		СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
		СтруктураРеквизитов.Вставить("Расширение", "xml");
		СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
		СтруктураРеквизитов.Вставить("ВнешнийИдентификатор", StatusDocNotice.id);
		СсылкаНаОбъект = ОбъектПривязки(СтруктураРеквизитов.СообщениеРодитель);
		Если Не СсылкаНаОбъект = Неопределено Тогда 
			СтруктураРеквизитов.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
		КонецЕсли;
		
		СохранитьСообщениеОбмена(СтруктураРеквизитов, НовоеСообщениеОбмена);
		Если Не ЗначениеЗаполнено(НовоеСообщениеОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьСообщениеОбменаВПакет(ПакетОбменСБанками, НовоеСообщениеОбмена);
		
		РеквизитыРодителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураРеквизитов.СообщениеРодитель, "Статус, ДатаИзмененияВнешнегоСтатуса");
		
		Если ЭтоОтветНаЗапросСостояния И ЗначениеЗаполнено(СообщениеЗапрос) И СообщениеЗапрос <> СообщениеЭДО Тогда
			РеквизитыЗапроса = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.ПолученоИзвещение);
			ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЗапрос, РеквизитыЗапроса);
		КонецЕсли;
		
		Если НЕ StatusDocNotice.Result.Status = Неопределено Тогда
			КодСтатуса = StatusDocNotice.Result.Status.Code;
			РеквизитыДляИзменения = Новый Структура;
			НовыйСтатус = Неопределено;
			Если КодСтатуса = "01" Тогда
				Если НЕ РеквизитыРодителя.Статус = Перечисления.СтатусыОбменСБанками.ПолученоИзвещение Тогда
					НовыйСтатус = Перечисления.СтатусыОбменСБанками.Принят;
				КонецЕсли;
			ИначеЕсли КодСтатуса = "02" Тогда
				Если НЕ РеквизитыРодителя.Статус = Перечисления.СтатусыОбменСБанками.Обработан Тогда
					НовыйСтатус = Перечисления.СтатусыОбменСБанками.Исполнен;
				КонецЕсли;
			ИначеЕсли КодСтатуса = "03" Тогда
				НовыйСтатус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком;
				РеквизитыДляИзменения.Вставить("ПричинаОтклонения", StatusDocNotice.Result.Status.MoreInfo);
			ИначеЕсли КодСтатуса = "04" Тогда
				НовыйСтатус = Перечисления.СтатусыОбменСБанками.Приостановлен;
			ИначеЕсли КодСтатуса = "05" Тогда
				НовыйСтатус = Перечисления.СтатусыОбменСБанками.Аннулирован;
				РеквизитыДляИзменения.Вставить("ПричинаОтклонения", StatusDocNotice.Result.Status.MoreInfo);
			ИначеЕсли КодСтатуса = "06" Тогда
				НовыйСтатус = Перечисления.СтатусыОбменСБанками.НеПодтвержден;
			КонецЕсли;
			Если ЭтоОтветНаОтзыв Тогда
				РеквизитыЗапроса = Новый Структура;
				РеквизитыЗапроса.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Обработан);
				ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЗапрос, РеквизитыЗапроса);
			КонецЕсли;
			
			ДатаИзмененияСтатуса = StatusDocNotice.creationDate;
			Если ЗначениеЗаполнено(НовыйСтатус) И РеквизитыРодителя.ДатаИзмененияВнешнегоСтатуса < ДатаИзмененияСтатуса Тогда
				РеквизитыДляИзменения.Вставить("ДатаИзмененияВнешнегоСтатуса", ДатаИзмененияСтатуса);
				РеквизитыДляИзменения.Вставить("Статус", НовыйСтатус);
				ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЭДО, РеквизитыДляИзменения);
			КонецЕсли;
		ИначеЕсли НЕ StatusDocNotice.Result.Error = Неопределено Тогда
			Если ЭтоОтветНаЗонд = Истина И StatusDocNotice.Result.Error.Code = "9999" Тогда
				РеквизитыДляИзменения = Новый Структура;
				РеквизитыДляИзменения.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Исполнен);
				ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЭДО, РеквизитыДляИзменения);
			ИначеЕсли  StatusDocNotice.Result.Error.Code = "2202" Тогда // такой документ уже есть в базе банка
				ТекущийСтатусСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЭДО, "Статус");
				Если ТекущийСтатусСообщения = Перечисления.СтатусыОбменСБанками.ОшибкаПередачи Тогда
					РеквизитыДляИзменения = Новый Структура;
					РеквизитыДляИзменения.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Доставлен);
					ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЭДО, РеквизитыДляИзменения);
				КонецЕсли;
			ИначеЕсли StatusDocNotice.Result.Error.Code = "2207" Тогда
				ДатаИзмененияСтатуса = StatusDocNotice.creationDate;
				ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(StatusDocNotice.Result.Error);
				РеквизитыДляИзменения = Новый Структура;
				РеквизитыДляИзменения.Вставить("ДатаИзмененияВнешнегоСтатуса", ДатаИзмененияСтатуса);
				РеквизитыДляИзменения.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
				РеквизитыДляИзменения.Вставить(
					"ПричинаОтклонения", НСтр("ru = 'Документ отсутствует в информационной базе банка.'"));
				РеквизитыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеЭДО, "СообщениеРодитель, ВидЭД");
				Если РеквизитыСообщения.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда
					ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЭДО, РеквизитыДляИзменения);
				Иначе // запрос состояния
					ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(
						РеквизитыСообщения.СообщениеРодитель, РеквизитыДляИзменения);
					РеквизитыДляИзменения.Вставить("ПричинаОтклонения", ТекстОшибки);
					ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЭДО, РеквизитыДляИзменения);
				КонецЕсли;
			Иначе
				ДатаИзмененияСтатуса = StatusDocNotice.creationDate;
				ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(StatusDocNotice.Result.Error);
				РеквизитыДляИзменения = Новый Структура;
				РеквизитыДляИзменения.Вставить("ДатаИзмененияВнешнегоСтатуса", ДатаИзмененияСтатуса);
				РеквизитыДляИзменения.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
				РеквизитыДляИзменения.Вставить("ПричинаОтклонения", ТекстОшибки);
				ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеЭДО, РеквизитыДляИзменения);
			КонецЕсли;
		КонецЕсли;
		ДокументУчета = ОбменСБанкамиСлужебныйВызовСервера.ДокументУчета(СообщениеЭДО);
		Если ЗначениеЗаполнено(ДокументУчета) Тогда
			СостояниеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЭДО, "Состояние");
			ДанныеВозврата.ПараметрОповещения.Вставить(ДокументУчета, СостояниеЭДО);
		КонецЕсли;
	Иначе
		ВидОперации = НСтр("ru = 'Чтение извещения о состоянии электронного документа'");
		ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
										|Не найден электронный документ по идентификатору: %2'");
		ПодробнаяИнформация = СтрШаблон(
			ПодробнаяИнформация, ПакетОбменСБанками, StatusDocNotice.ExtID);
		ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, , ПакетОбменСБанками);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьИзвещениеОСостоянииПакета(НастройкаОбмена, ПакетОбменСБанками, ДвоичныеДанныеФайла, ДанныеВозврата)
	
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
	Попытка
		StatusPacketNotice = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(StatusPacketNotice.formatVersion);
		Если Фабрика = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Неизвестная версия формата файла.'");
		КонецЕсли;
		ПространствоИмен = ПространствоИменАсинхронногоОбмена(StatusPacketNotice.formatVersion);
		ИзвещениеОСостоянииПакетаТип = ТипЗначенияCML(Фабрика, ПространствоИмен, "StatusPacketNotice");
		ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
		ОбъектXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
		StatusPacketNotice = Фабрика.ПрочитатьXML(ОбъектXML, ИзвещениеОСостоянииПакетаТип);
	Исключение
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при разборе пакета %1.
										|%2'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПакетОбменСБанками, КраткоеПредставлениеОшибки);
		Иначе
			ТекстСообщения = НСтр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
		КонецЕсли;
		ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
										|Подробное представление ошибки:
										|%2'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробнаяИнформация = СтрШаблон(ПодробнаяИнформация, ПакетОбменСБанками, ПодробноеПредставлениеОшибки);
		ВидОперации = НСтр("ru = 'Чтение ЭД.'");
		ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, , ПакетОбменСБанками);
		ВызватьИсключение ТекстСообщения
	КонецПопытки;
		
	ОбъектXML.Закрыть();
	Если НЕ StatusPacketNotice.Result.Error = Неопределено Тогда
		ОтправленныйПакетЭД = НайтиПакетОбменСБанками(НастройкаОбмена, StatusPacketNotice.IDResultSuccessResponse);
		Если ЗначениеЗаполнено(ОтправленныйПакетЭД) Тогда
			ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(StatusPacketNotice.Result.Error);
			СтруктураЭД = Новый Структура;
			СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
			СтруктураЭД.Вставить("ПричинаОтклонения", ТекстОшибки);
			СообщенияОбмена = Новый Массив;
			ОбменСБанкамиСлужебныйВызовСервера.ОбновитьСтатусыДокументовПакетаЭДО(
				ОтправленныйПакетЭД, Перечисления.СтатусыПакетовЭД.Отменен, СтруктураЭД, СообщенияОбмена);
			Для Каждого СообщениеОбмена Из СообщенияОбмена Цикл
				ДокументУчета = ОбменСБанкамиСлужебныйВызовСервера.ДокументУчета(СообщениеОбмена);
				Если ЗначениеЗаполнено(ДокументУчета) Тогда
					СостояниеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Состояние");
					ДанныеВозврата.ПараметрОповещения.Вставить(ДокументУчета, СостояниеЭДО);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли НЕ StatusPacketNotice.Result.Status = Неопределено Тогда
		ОтправленныйПакетОбменСБанками = НайтиПакетОбменСБанками(НастройкаОбмена, StatusPacketNotice.IDResultSuccessResponse);
		Если ЗначениеЗаполнено(ОтправленныйПакетОбменСБанками) Тогда
			Если StatusPacketNotice.Result.Status.Code = "01" Тогда
				СтруктураЭД = Новый Структура;
				СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Доставлен);
				СообщенияОбмена = Новый Массив;
				ОбменСБанкамиСлужебныйВызовСервера.ОбновитьСтатусыДокументовПакетаЭДО(
					ОтправленныйПакетОбменСБанками, Перечисления.СтатусыПакетовЭД.Доставлен, СтруктураЭД, СообщенияОбмена);
				Для Каждого СообщениеОбмена Из СообщенияОбмена Цикл
					ДокументУчета = ОбменСБанкамиСлужебныйВызовСервера.ДокументУчета(СообщениеОбмена);
					Если ЗначениеЗаполнено(ДокументУчета) Тогда
						СостояниеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Состояние");
						ДанныеВозврата.ПараметрОповещения.Вставить(ДокументУчета, СостояниеЭДО);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьНастройкиОбмена(НастройкаОбмена, ДвоичныеДанныеФайла)

	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "Организация");
	СоздатьНастройкуОбменаИзФайла(АдресХранилища, Организация, Ложь, Ложь, , , НастройкаОбмена);

КонецПроцедуры

Процедура ПрочитатьПодтверждениеЗачисленияДенежныхСредствНаСчетаСотрудников(НастройкаОбмена, ПакетОбменСБанками, ДвоичныеДанныеФайла, Document, НовоеСообщениеОбмена, ДанныеВозврата)
	
	АктуальныеВидыЭД = ОбменСБанкамиСлужебныйПовтИсп.АктуальныеВидыЭД();
	Если АктуальныеВидыЭД.Найти(Перечисления.ВидыЭДОбменСБанками.СписокНаЗачислениеДенежныхСредствНаСчетаСотрудников) = Неопределено Тогда
		// Для конфигурации без зарплатного проекта данный электронный документ не нужен.
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
		
	ОбъектВладелец = Неопределено;
	ИдентификаторЭДВладельца = ЗначениеСвойстваXDTO(Document, "extID");
	ДанныеОповещения = Новый Структура;

	ИмяФайла = ЗначениеСвойстваXDTO(Document, "Data.fileName");
	
	ОбменСБанкамиПереопределяемый.ПриПолученииXMLФайла(АдресВХранилище, ИмяФайла, ОбъектВладелец, ДанныеОповещения);
			
	Если НЕ ЗначениеЗаполнено(ОбъектВладелец) Тогда
		ОбъектВладелец = НастройкаОбмена;
	КонецЕсли;
		
	СтруктураРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
	СтруктураРеквизитов.Вставить(
		"ВидЭД", Перечисления.ВидыЭДОбменСБанками.ПодтверждениеЗачисленияДенежныхСредствНаСчетаСотрудников);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
	СтруктураРеквизитов.Вставить("ВнешнийИдентификатор", ЗначениеСвойстваXDTO(Document, "id"));
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);

	Если ЗначениеЗаполнено(ИдентификаторЭДВладельца) Тогда
		СообщениеРодитель = СообщениеОбменаПоИдентификатору(НастройкаОбмена, ИдентификаторЭДВладельца);
		Если ЗначениеЗаполнено(СообщениеРодитель) Тогда
			СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеРодитель);
			УстановитьСтатусСообщенияОбмена(СообщениеРодитель, Перечисления.СтатусыОбменСБанками.ПолученоПодтверждение);
			ДокументУчета = ОбменСБанкамиСлужебныйВызовСервера.ДокументУчета(СообщениеРодитель);
			Если ЗначениеЗаполнено(ДокументУчета) Тогда
				СостояниеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеРодитель, "Состояние");
				ДанныеВозврата.ПараметрОповещения.Вставить(ДокументУчета, СостояниеЭДО);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СохранитьСообщениеОбмена(СтруктураРеквизитов, НовоеСообщениеОбмена);
	Если Не ЗначениеЗаполнено(НовоеСообщениеОбмена) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДанныеОповещения.Количество() Тогда
		ДанныеВозврата.МассивОповещений.Добавить(ДанныеОповещения);
	КонецЕсли;
	
	ДобавитьСообщениеОбменаВПакет(ПакетОбменСБанками, НовоеСообщениеОбмена);

КонецПроцедуры

#КонецОбласти

#Область НастройкиОбмена

Функция ТаблицаВидовЭДИПрограмм()
	
	ВозвращаемоеЗначение = Новый ТаблицаЗначений;
	
	ВозвращаемоеЗначение.Колонки.Добавить("ВидЭД");
	ВозвращаемоеЗначение.Колонки.Добавить("ПрограммаБанка");
	
	// ====== Запрос выписки =============.
	ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
	
	// ====== Запрос на отзыв =============.
	ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК;
	
	// ====== Письмо =============.
	ВидЭД = Перечисления.ВидыЭДОбменСБанками.Письмо;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
	
	// ====== Платежное поручение =============.
	ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку;

	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
	
	// ====== Платежное требование =============.
	ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК;
	
	// ====== Поручение на перевод валюты =============.
	ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;

	// ====== Поручение на покупку валюты =============.
	ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
	
	// ====== Поручение на продажу валюты =============.
	ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
	
	// ====== Распоряжение на обязательную продажу валюты =============.
	ВидЭД = Перечисления.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
	
	// ====== Список на зачисление денежных средств на счета сотрудников =============.
	ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаЗачислениеДенежныхСредствНаСчетаСотрудников;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
	
	// ====== Список на открытие счетов по зарплатному проекту =============.
	ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаОткрытиеСчетовПоЗарплатномуПроекту;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
	
	// ====== Список уволенных сотрудников =============.
	ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокУволенныхСотрудников;
	
	НовСтрока = ВозвращаемоеЗначение.Добавить();
	НовСтрока.ВидЭД = ВидЭД;
	НовСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Процедура ПолучитьТекстЗапросаПараметровОбменаПоНастройкеОбмена(ТекстЗапроса)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧ_НастройкиОбмена.Ссылка.Организация КАК Организация,
	|	ТЧ_НастройкиОбмена.Ссылка.Банк КАК Банк,
	|	ТЧ_НастройкиОбмена.ИсходящийДокумент КАК ВидЭД,
	|	ТЧ_НастройкиОбмена.ИспользоватьЭП КАК Подписывать,
	|	ТЧ_НастройкиОбмена.Ссылка.СертификатБанка КАК СертификатБанка,
	|	ТЧ_НастройкиОбмена.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ТЧ_НастройкиОбмена.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ТЧ_НастройкиОбмена.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ТЧ_НастройкиОбмена.Ссылка КАК НастройкаОбмена,
	|	ТЧ_НастройкиОбмена.Ссылка.ПрограммаБанка КАК ПрограммаБанка,
	|	ВЫБОР
	|		КОГДА ТЧ_НастройкиОбмена.Ссылка.Недействительна
	|				ИЛИ ТЧ_НастройкиОбмена.Ссылка.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НастройкаОбменаДействует,
	|	ТЧ_НастройкиОбмена.Ссылка.АутентификацияПоСертификату
	|ПОМЕСТИТЬ ВТ_ТЧ_НастройкиОбмена
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК ТЧ_НастройкиОбмена
	|ГДЕ
	|	ТЧ_НастройкиОбмена.Ссылка = &НастройкаОбмена
	|	И ТЧ_НастройкиОбмена.ИсходящийДокумент = &ВидЭД
	|	И ВЫБОР
	|			КОГДА &ТолькоДействующиеНастройкиОбмена
	|				ТОГДА НЕ ТЧ_НастройкиОбмена.Ссылка.ПометкаУдаления
	|						И НЕ ТЧ_НастройкиОбмена.Ссылка.Недействительна
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыНастройкиОбмена.СертификатЭП КАК Ссылка,
	|	ВидыЭД.ВидЭД КАК ВидДокумента,
	|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя
	|ПОМЕСТИТЬ ВТ_Сертификаты
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК СертификатыНастройкиОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭД
	|		ПО (ВидыЭД.СертификатЭП = СертификатыНастройкиОбмена.СертификатЭП)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ПО СертификатыНастройкиОбмена.СертификатЭП = Сертификаты.Ссылка
	|ГДЕ
	|	НЕ СертификатыНастройкиОбмена.СертификатЭП.ПометкаУдаления
	|	И НЕ СертификатыНастройкиОбмена.СертификатЭП.Отозван
	|	И ВидыЭД.ВидЭД = &ВидЭД
	|	И &ПроверкаПользователя
	|	И ВидыЭД.Использовать
	|	И СертификатыНастройкиОбмена.Ссылка = &НастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧ_НастройкиОбмена.Организация,
	|	ВТ_ТЧ_НастройкиОбмена.Банк,
	|	ВТ_ТЧ_НастройкиОбмена.ВидЭД,
	|	ВТ_ТЧ_НастройкиОбмена.Подписывать КАК Подписывать,
	|	ВТ_ТЧ_НастройкиОбмена.СертификатБанка,
	|	ВТ_ТЧ_НастройкиОбмена.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ВТ_ТЧ_НастройкиОбмена.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ВТ_ТЧ_НастройкиОбмена.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ВТ_ТЧ_НастройкиОбмена.НастройкаОбмена КАК НастройкаОбмена,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
	|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
	|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолучен,
	|	ВТ_Сертификаты.ПарольПользователя,
	|	ВТ_ТЧ_НастройкиОбмена.ПрограммаБанка,
	|	ВТ_ТЧ_НастройкиОбмена.НастройкаОбменаДействует,
	|	ВТ_ТЧ_НастройкиОбмена.АутентификацияПоСертификату
	|ИЗ
	|	ВТ_ТЧ_НастройкиОбмена КАК ВТ_ТЧ_НастройкиОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
	|		ПО ВТ_ТЧ_НастройкиОбмена.ВидЭД = ВТ_Сертификаты.ВидДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиОбменаСертификатыПодписейОрганизации.СертификатЭП.Отпечаток КАК Отпечаток,
	|	НастройкиОбменаСертификатыПодписейОрганизации.Ссылка КАК НастройкаОбмена
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификатыПодписейОрганизации
	|ГДЕ
	|	НЕ НастройкиОбменаСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
	|	И НастройкиОбменаСертификатыПодписейОрганизации.Ссылка = &НастройкаОбмена";
	
КонецПроцедуры

Процедура СообщитьОбОтсутствииНастройкиОбмена(ПараметрыЭД, Источник)
	
	ШаблонСообщения = НСтр("ru = 'Обработка %1.
							|Операция не выполнена.
							|Необходимо создать ""Настройку обмена с сервисом 1С:ДиректБанк"" с реквизитами:'");
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Источник);
	
	ТаблицаПараметров = Новый ТаблицаЗначений();
	ТаблицаПараметров.Колонки.Добавить("Ключ");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	ТаблицаПараметров.Колонки.Добавить("Порядок");
	
	Для Каждого ТекПараметр Из ПараметрыЭД Цикл
		
		Порядок = 0;
		Если НРег(ТекПараметр.Ключ) = НРег("Организация") Тогда
			Представление = ТекПараметр.Ключ;
			Порядок = 1;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Банк") Тогда
			Представление = ТекПараметр.Ключ;
			Порядок = 2;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ВидЭД") Тогда
			Представление = НСтр("ru = 'Вид электронного документа'");;
			Порядок = 3;
		КонецЕсли;
		
		Если Порядок > 0 Тогда
			СтрокаПараметров = ТаблицаПараметров.Добавить();
			СтрокаПараметров.Ключ = Представление;
			СтрокаПараметров.Значение = ТекПараметр.Значение;
			СтрокаПараметров.Порядок = Порядок;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПараметров.Сортировать("Порядок");
	Для Каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		Если ЗначениеЗаполнено(СтрокаПараметров.Значение) Тогда
			Текст = Текст + Символы.ПС + НСтр("ru = '<%1>: %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаПараметров.Ключ, СтрокаПараметров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.СообщитьПользователю(Текст);
	
КонецПроцедуры

// Обновляет дату получения документа текущим числом.
//
// Параметры:
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на текущую настройку обмена с банками.
//
Процедура СохранитьПараметрыОбмена(НастройкаОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ПрограммаБанка");
	
	Менеджер = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
	Менеджер.НастройкаОбмена = НастройкаОбмена;
	Менеджер.Прочитать();
	Менеджер.НастройкаОбмена = НастройкаОбмена;
	Если ПрограммаБанка <> Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		Менеджер.ПоследняяДатаПолученияЭД = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	Менеджер.ДатаСинхронизации = ТекущаяДатаСеанса();
	Менеджер.АвтоматическоеПолучениеВыписки = Ложь;
	Менеджер.ТекстОшибки = "";
	Менеджер.Записать();
	
КонецПроцедуры

// Функция возвращает соответствие настройке обмена - структуры данных сертификата,
// содержащую ссылку на сертификат и его доп.реквизиты (запомнить пароль, пароль пользователя, маркер расшифрованный/зашифрованный).
// 
// Параметры:
//  МассивНастроекОбмена               - Массив    - содержит ссылки на настройки, по которым требуется определить сертификаты;
//  СтМассивовСтруктурСертификатов - Структура - содержит структуру со свойствами:
//    * МассивСтруктурСертификатовСервер - Массив - массив структур сертификатов личного хранилища с сервера.
//    * МассивСтруктурСертификатовКлиент - Массив - массив структур сертификатов личного хранилища с клиента.
//  СоотвСертификатовИПаролей      - Фиксированное соответствие:
//    * Ключ     - СправочникСсылка.СертификатыЭП - сертификат авторизации.
//    * Значение - Строка - пароль к сертификату.
//
// Возвращаемое значение:
//  Соответствие: ключ - настройка обмена, значение - структура параметров сертификата ЭП
//    ("СертификатДляАвторизации, ПарольСертификата, ИдентификаторСессии, МаркерЗашифрованный").
//
Функция СоотвНастроекОбменаИСоответствийСертификатовИПараметровДляАвторизацииСервер(Знач МассивНастроекОбмена = Неопределено, Знач СтМассивовСтруктурСертификатов = Неопределено, Знач СоотвСертификатовИПаролей = Неопределено)
	
	Результат = ПараметрыАвторизацииНаСервереБанка(
		МассивНастроекОбмена, СтМассивовСтруктурСертификатов, СоотвСертификатовИПаролей);
	
	СоотвНастроекОбмена = Новый Соответствие;
	СоотвНастроекОбменаИМассиваСертификатовАвторизации = Неопределено;
	СоотвСертификатовИИхСтруктур = Неопределено;
	Если Результат.Свойство("СоотвНастроекОбменаИМассиваСертификатовАвторизации", СоотвНастроекОбменаИМассиваСертификатовАвторизации)
		И Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
		И ТипЗнч(СоотвНастроекОбменаИМассиваСертификатовАвторизации) = Тип("Соответствие")
		И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
		// В СоотвНастроекОбменаИМассиваСертификатовАвторизации - Ключ - Настройка обмена, Значение - Массив сертификатов
		// по данной настройке. Функция должна вернуть Соответствие, в котором Ключ - настройка обмена,
		// Значение - Соответствие сертификатов и их параметров.
		Для Каждого Элемент Из СоотвНастроекОбменаИМассиваСертификатовАвторизации Цикл
			
			Соответствие = Новый Соответствие;
			МассивСертификатов = Элемент.Значение;
			Для Каждого Сертификат Из МассивСертификатов Цикл
				
				Структура = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
				Если ЗначениеЗаполнено(Структура) И Структура.ПарольПолучен Тогда
					// Авторизоваться на сервере можно любым указанным в настройке обмена сертификатом,
					// поэтому, если есть несколько доступных для авторизации сертификатов и среди них есть хотя бы
					// один с сохраненным (в сертификате или сеансе) паролем, то вернем именно его, чтобы не открывать
					// диалог выбора сертификата.
					Соответствие = Новый Соответствие;
					Соответствие.Вставить(Сертификат, Структура);
					Прервать;
				КонецЕсли;
				Соответствие.Вставить(Сертификат, Структура);
			КонецЦикла;
			СоотвНастроекОбмена.Вставить(Элемент.Ключ, Соответствие);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоотвНастроекОбмена;
	
КонецФункции

// Получает текст запроса по настройкам обмена
//
// Параметры:
//  ТекстЗапроса - текст запроса.
//
Процедура ПолучитьТекстЗапросаПараметровОбмена(ТекстЗапроса)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТЧ_НастройкиОбмена.Ссылка.Организация КАК Организация,
		|	ТЧ_НастройкиОбмена.Ссылка.Банк КАК Банк,
		|	ТЧ_НастройкиОбмена.ИсходящийДокумент КАК ВидЭД,
		|	ТЧ_НастройкиОбмена.ИспользоватьЭП КАК Подписывать,
		|	ТЧ_НастройкиОбмена.Ссылка.СертификатБанка КАК СертификатБанка,
		|	ТЧ_НастройкиОбмена.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ТЧ_НастройкиОбмена.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ТЧ_НастройкиОбмена.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ТЧ_НастройкиОбмена.Ссылка КАК НастройкаОбмена,
		|	ТЧ_НастройкиОбмена.Ссылка.ПрограммаБанка КАК ПрограммаБанка,
		|	ВЫБОР
		|		КОГДА ТЧ_НастройкиОбмена.Ссылка.Недействительна
		|				ИЛИ ТЧ_НастройкиОбмена.Ссылка.ПометкаУдаления
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НастройкаОбменаДействует,
		|	ТЧ_НастройкиОбмена.Ссылка.АутентификацияПоСертификату
		|ПОМЕСТИТЬ ВТ_ТЧ_НастройкиОбмена
		|ИЗ
		|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК ТЧ_НастройкиОбмена
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ТолькоДействующиеНастройкиОбмена
		|				ТОГДА НЕ ТЧ_НастройкиОбмена.Ссылка.ПометкаУдаления
		|						И НЕ ТЧ_НастройкиОбмена.Ссылка.Недействительна
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ТЧ_НастройкиОбмена.Ссылка.Организация = &Организация
		|						И ТЧ_НастройкиОбмена.Ссылка.Банк = &Банк
		|			КОГДА ТЧ_НастройкиОбмена.Ссылка.Организация = &Организация
		|					И ТЧ_НастройкиОбмена.Ссылка.Банк = &Банк
		|					И ТЧ_НастройкиОбмена.ИсходящийДокумент = &ВидЭД
		|				ТОГДА ТЧ_НастройкиОбмена.Формировать
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиОбменаСертификаты.СертификатЭП КАК СертификатЭП
		|ПОМЕСТИТЬ ВТ_СертификатыИзНастроекОбмена
		|ИЗ
		|	ВТ_ТЧ_НастройкиОбмена КАК ВТ_ТЧ_НастройкиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
		|		ПО ВТ_ТЧ_НастройкиОбмена.НастройкаОбмена = НастройкиОбменаСертификаты.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Ссылка,
		|	ВидыЭДЭП.ВидЭД КАК ВидДокумента,
		|	Сертификаты.Организация КАК Организация,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	НЕОПРЕДЕЛЕНО КАК ПарольСертификата
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ПО (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СертификатыИзНастроекОбмена КАК СертификатыИзНастроекОбмена
		|		ПО Сертификаты.Ссылка = СертификатыИзНастроекОбмена.СертификатЭП
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВидыЭДЭП.ВидЭД = &ВидЭД
		|		КОНЕЦ
		|	И &ПроверкаПользователя
		|	И ВидыЭДЭП.Использовать
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТЧ_НастройкиОбмена.Организация,
		|	ВТ_ТЧ_НастройкиОбмена.Банк,
		|	ВТ_ТЧ_НастройкиОбмена.ВидЭД,
		|	ВТ_ТЧ_НастройкиОбмена.Подписывать КАК Подписывать,
		|	ВТ_ТЧ_НастройкиОбмена.СертификатБанка,
		|	ВТ_ТЧ_НастройкиОбмена.РесурсВходящихДокументов,
		|	ВТ_ТЧ_НастройкиОбмена.РесурсИсходящихДокументов,
		|	ВТ_ТЧ_НастройкиОбмена.ИдентификаторОрганизации,
		|	ВТ_ТЧ_НастройкиОбмена.НастройкаОбмена,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	ВТ_Сертификаты.ПарольСертификата,
		|	ВТ_ТЧ_НастройкиОбмена.ПрограммаБанка,
		|	ВТ_ТЧ_НастройкиОбмена.НастройкаОбменаДействует,
		|	ВТ_ТЧ_НастройкиОбмена.АутентификацияПоСертификату
		|ИЗ
		|	ВТ_ТЧ_НастройкиОбмена КАК ВТ_ТЧ_НастройкиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ПО ВТ_ТЧ_НастройкиОбмена.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|			И ВТ_ТЧ_НастройкиОбмена.Организация = ВТ_Сертификаты.Организация
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВТ_ТЧ_НастройкиОбмена.ВидЭД = &ВидЭД
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка КАК НастройкаОбмена,
		|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.Отпечаток КАК Отпечаток
		|ИЗ
		|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыПодписейОрганизации
		|ГДЕ
		|	НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
		|	И НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка.Недействительна";
	
КонецПроцедуры

Функция ОпределитьНастройкиОбменаЭД(СтруктураПараметров, МассивОтпечатковСертификатов = Неопределено, ФлагДействующиеНастройкиОбмена = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОбменаЭД = Неопределено;
	
	ВидЭД = "";
	Банк = "";
	Если СтруктураПараметров.Свойство("ВидЭД", ВидЭД) И СтруктураПараметров.Свойство("Банк", Банк)
		И ЗначениеЗаполнено(ВидЭД) И ЗначениеЗаполнено(Банк) Тогда
		
		Запрос  = Новый Запрос;
		Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
		Запрос.УстановитьПараметр("Банк", Банк);
		Запрос.УстановитьПараметр("ТолькоДействующиеНастройкиОбмена",  ФлагДействующиеНастройкиОбмена);
		
		НастройкаОбмена = "";
		Организация = "";
		Если СтруктураПараметров.Свойство("НастройкаОбмена", НастройкаОбмена) И ЗначениеЗаполнено(НастройкаОбмена) Тогда
			Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
			ПолучитьТекстЗапросаПараметровОбменаПоНастройкеОбмена(Запрос.Текст);
			Индекс = 2;
		ИначеЕсли СтруктураПараметров.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("Организация", Организация);
			ПолучитьТекстЗапросаПараметровОбмена(Запрос.Текст);
			Индекс = 3;
		КонецЕсли;
		
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(	Запрос.Текст, "&ПроверкаПользователя",
				"Сертификаты.Пользователь В (&Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)");
			Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
			Запрос.УстановитьПараметр("Пользователь",  Пользователи.АвторизованныйПользователь());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			ТЗ = РезультатЗапроса[Индекс].Выгрузить();
			ТЗСертификатовНеобходимыхПодписей = РезультатЗапроса[Индекс + 1].Выгрузить();
			
			Если Не ТЗ.Количество() = 0 Тогда
				ТекущаяНастройка = ТЗ[0];
				
				НастройкиОбменаЭД = Новый Структура;
				НастройкиОбменаЭД.Вставить("СертификатДоступен", Ложь);
				// Если с клиента были переданы установленные сертификаты криптографии,
				// то надо выбрать настройку с этими сертификатами.
				ДоступныеСертификаты = Новый Массив;
				НайденПодходящийСертификат = Ложь;
				
				Если МассивОтпечатковСертификатов = Неопределено Тогда
					МассивОтпечатковСертификатов = Новый Массив;
				КонецЕсли;
				Для Каждого СтрокаТЗ Из ТЗ Цикл
					Если СтрокаТЗ.Подписывать Тогда
						ПараметрыОтбора = Новый Структура(
							"НастройкаОбмена, Отпечаток", СтрокаТЗ.НастройкаОбмена, СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток);
						МассивСтрок = ТЗСертификатовНеобходимыхПодписей.НайтиСтроки(ПараметрыОтбора);
						Для Каждого Элемент Из МассивСтрок Цикл
							Если (МассивОтпечатковСертификатов.Найти(Элемент.Отпечаток) <> Неопределено
								ИЛИ ТекущаяНастройка.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
								ИЛИ ТекущаяНастройка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК)
								И СтруктураПараметров.УстановленныеПодписи.Найти(СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток) = Неопределено Тогда
								
								Если Не НайденПодходящийСертификат Тогда
									ТекущаяНастройка = СтрокаТЗ;
									НастройкиОбменаЭД.Вставить("СертификатДоступен", Истина);
									НайденПодходящийСертификат = Истина;
								КонецЕсли;
								ДоступныеСертификаты.Добавить(СтрокаТЗ.СертификатОрганизацииДляПодписи);
								
							КонецЕсли
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			
				Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
					НастройкиОбменаЭД.Вставить(ТекКолонка.Имя, ТекущаяНастройка[ТекКолонка.Имя]);
				КонецЦикла;
				
				НастройкиОбменаЭД.Вставить("ДоступныеСертификаты", ДоступныеСертификаты);
				
				Если НастройкиОбменаЭД.Свойство("Подписывать") Тогда
					ФлагПодписи = НастройкиОбменаЭД.Подписывать;
				Иначе
					ФлагПодписи = Ложь;
				КонецЕсли;
				НастройкиОбменаЭД.Вставить("Подписывать", ФлагПодписи);
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Если заполнены не все обязательные реквизиты, то нельзя утверждать, что нет настройки обмена.
		НастройкиОбменаЭД = "";
	КонецЕсли;
	
	Возврат НастройкиОбменаЭД;
	
КонецФункции

// Функция получает данные по сертификатам, разрешенным для использования при подписании ЭД и авторизации
// на сервере банка. Поиск сертификатов выполняется как пересечение массивов сертификатов установленных в
// личном хранилище (клиента либо сервера, в зависимости от настроек в 1с), с сертификатами импортированными в 1с.
// При необходимости, выборка может быть ограничена массивом настроек обмена, по которым
// требуется определить параметры сертификатов.
//
// Параметры:
//  СтМассивовСтруктурСертификатов - структура массивов - может содержать 2 элемента: МассивСтруктурСертификатовСервер
//    и МассивСтруктурСертификатовКлиент, соответственно массив структур сертификатов личного хранилища с сервера и
//    то же самое с клиента;
//
// Возвращаемое значение:
//  Структура соответствий - пустая, либо содержит 3 элемента:
//    СоотвНастроекОбменаИСертификатовПодписи;
//    СоотвНастроекОбменаИСертификатовАвторизации;
//    СоотвСертификатовИИхСтруктур.
//
Функция ПараметрыАвторизацииНаСервереБанка(МассивНастроекОбмена, СтМассивовСтруктурСертификатов, СоотвСертификатовИПаролей)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураСоответствий = Новый Структура;
	
	ВыполнятьКриптооперацииНаСервере = ЭлектроннаяПодпись.СоздаватьЭлектронныеПодписиНаСервере();
	// Если используется отложенная отправка, то искать сертификаты авторизации не надо.
	МассивОтпечатковКлиент = Новый Массив;
	МассивОтпечатковСервер = Новый Массив;
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	Если ТипЗнч(СтМассивовСтруктурСертификатов) = Тип("Структура") Тогда
		СтМассивовСтруктурСертификатов.Свойство("МассивОтпечатковСервер", МассивОтпечатковСервер);
		СтМассивовСтруктурСертификатов.Свойство("МассивОтпечатковКлиент", МассивОтпечатковКлиент);
		Если ВыполнятьКриптооперацииНаСервере И НЕ ЗначениеЗаполнено(МассивОтпечатковСервер) И ИспользоватьЭП Тогда
			МассивОтпечатковСервер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	МассивОтпечатковСервер = ?(ЗначениеЗаполнено(МассивОтпечатковСервер), МассивОтпечатковСервер, Новый Массив);
	МассивОтпечатковКлиент = ?(ЗначениеЗаполнено(МассивОтпечатковКлиент), МассивОтпечатковКлиент, Новый Массив);
	
	МассивОтпечатковДляАвторизации = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковДляАвторизации, МассивОтпечатковКлиент);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковДляАвторизации, МассивОтпечатковСервер);
	
	Если (МассивОтпечатковСервер <> Неопределено И МассивОтпечатковСервер.Количество())
		ИЛИ (МассивОтпечатковКлиент <> Неопределено И МассивОтпечатковКлиент.Количество()) Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСертификатов.ПарольСертификата КАК ПарольСертификата,
		|	ТаблицаСертификатов.Сертификат КАК Сертификат
		|ПОМЕСТИТЬ ВТ_ПолученныеПароли
		|ИЗ
		|	&ТаблицаСертификатов КАК ТаблицаСертификатов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК СертификатПодписи,
		|	Сертификаты.Отпечаток КАК Отпечаток,
		|	Сертификаты.Отозван КАК Отозван,
		|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
		|	Сертификаты.ПользовательОповещенОСрокеДействия КАК ОповещенОСрокеДействия,
		|	Сертификаты.ДействителенДо КАК ДатаОкончания,
		|	ТаблицаСертификатов.ПарольСертификата КАК ПарольСертификата,
		|	ТаблицаСертификатов.Сертификат КАК Сертификат,
		|	ВЫБОР
		|		КОГДА ТаблицаСертификатов.Сертификат ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПарольПолучен
		|ПОМЕСТИТЬ ТаблицаСертификатов
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПолученныеПароли КАК ТаблицаСертификатов
		|		ПО (ТаблицаСертификатов.Сертификат = Сертификаты.Ссылка)
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И &ПроверкаПользователя
		|	И Сертификаты.Отпечаток В(&МассивОтпечатковДляАвторизации)
		|	И ВЫБОР
		|			КОГДА Сертификаты.ДействителенДо = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Сертификаты.ДействителенДо, ДЕНЬ) > 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиОбмена.Ссылка КАК НастройкаОбмена,
		|	НастройкиОбмена.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	НастройкиОбмена.ПрограммаБанка КАК ПрограммаБанка,
		|	Сертификаты.СертификатПодписи КАК СертификатПодписи,
		|	Сертификаты.ПарольСертификата КАК ПарольСертификата,
		|	ЕСТЬNULL(Сертификаты.ПарольПолучен, ЛОЖЬ) КАК ПарольПолучен,
		|	Сертификаты.Отпечаток КАК Отпечаток,
		|	Сертификаты.Отозван КАК Отозван,
		|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
		|	Сертификаты.ОповещенОСрокеДействия КАК ОповещенОСрокеДействия,
		|	Сертификаты.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	Справочник.НастройкиОбменСБанками КАК НастройкиОбмена
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
		|		ПО (НастройкиОбменаСертификаты.Ссылка = НастройкиОбмена.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСертификатов КАК Сертификаты
		|		ПО (НастройкиОбменаСертификаты.СертификатЭП = Сертификаты.СертификатПодписи)
		|ГДЕ
		|	НЕ НастройкиОбмена.ПометкаУдаления
		|	И НастройкиОбмена.Ссылка В(&МассивНастроекОбмена)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сертификаты.ПарольПолучен УБЫВ";
		
		Запрос.УстановитьПараметр("МассивОтпечатковДляАвторизации", МассивОтпечатковДляАвторизации);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПроверкаПользователя", "ИСТИНА");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПроверкаПользователя",
				"Сертификаты.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)");
			Запрос.УстановитьПараметр("ПустойПользователь",  Справочники.Пользователи.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
			Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		КонецЕсли;

		
		СертификатыСПаролями = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(,МассивОтпечатковДляАвторизации);
		ТЗ_Сертификатов = Новый ТаблицаЗначений;
		ТЗ_Сертификатов.Колонки.Добавить("Сертификат",
			Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
		ТЗ_Сертификатов.Колонки.Добавить("ПарольСертификата", Новый ОписаниеТипов("Строка"));
		Для Каждого Элемент Из СертификатыСПаролями Цикл
			НоваяСтрока = ТЗ_Сертификатов.Добавить();
			НоваяСтрока.Сертификат = Элемент.Ключ;
			НоваяСтрока.ПарольСертификата = Элемент.Значение;
		КонецЦикла;
		Запрос.УстановитьПараметр("ТаблицаСертификатов", ТЗ_Сертификатов);
		Если НЕ ЗначениеЗаполнено(МассивНастроекОбмена) Тогда
			МассивНастроекОбмена = Новый Массив;
		КонецЕсли;
		Если МассивНастроекОбмена.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("МассивНастроекОбмена", МассивНастроекОбмена);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НастройкиОбмена.Ссылка В(&МассивНастроекОбмена)", "");
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		СоотвНастроекОбменаИМассиваСертификатовАвторизации = Новый Соответствие;
		СоотвСертификатовИИхСтруктур = Новый Соответствие;
		
		ТекущаяНастройкаОбмена = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ТекущаяНастройкаОбмена <> Выборка.НастройкаОбмена Тогда
				МассивСертификатов = Новый Массив;
				ТекущаяНастройкаОбмена = Выборка.НастройкаОбмена;
			КонецЕсли;
			МассивСертификатов.Добавить(Выборка.СертификатПодписи);
			
			Если СоотвНастроекОбменаИМассиваСертификатовАвторизации.Получить(ТекущаяНастройкаОбмена) = Неопределено Тогда
				СоотвНастроекОбменаИМассиваСертификатовАвторизации.Вставить(ТекущаяНастройкаОбмена, МассивСертификатов);
			КонецЕсли;
			СтруктураСертификата = Новый Структура("СертификатПодписи, ПарольПолучен, ПарольСертификата, Отпечаток, Отозван,
													|ДанныеСертификата, ОповещенОСрокеДействия, ДатаОкончания, ПрограммаБанка");
			ЗаполнитьЗначенияСвойств(СтруктураСертификата, Выборка);
		
			ПарольПолучен = Выборка.ПарольПолучен;
			СтруктураСертификата.Вставить("ПарольСертификата", Выборка.ПарольСертификата);
			СтруктураСертификата.Вставить("ПарольПолучен", ПарольПолучен);
		
			СоотвСертификатовИИхСтруктур.Вставить(Выборка.СертификатПодписи, СтруктураСертификата);
			
		КонецЦикла;
		
		СтруктураСоответствий.Вставить("СоотвНастроекОбменаИМассиваСертификатовАвторизации", СоотвНастроекОбменаИМассиваСертификатовАвторизации);
		СтруктураСоответствий.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	КонецЕсли;
	
	Возврат СтруктураСоответствий;
	
КонецФункции

// Заполняет виды электронных документов значениями по-умолчанию
//
// Параметры:
//  Объект - СправочникОбъект - настройка обмена с банком.
//
Процедура ЗаполнитьВидыЭДДоступнымиЗначениями(Объект)
	
	АктуальныеВидыЭД = ОбменСБанкамиСлужебныйПовтИсп.АктуальныеВидыЭД();
	Объект.ИсходящиеДокументы.Очистить();
	
	ТаблицаВидовЭДИПрограмм = ТаблицаВидовЭДИПрограмм();
	
	Для Каждого ЗначениеПеречисления Из АктуальныеВидыЭД Цикл
		
		ПараметрыОтбора = Новый Структура("ВидЭД, ПрограммаБанка", ЗначениеПеречисления, Объект.ПрограммаБанка);
		МассивСтрок = ТаблицаВидовЭДИПрограмм.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСтрок.Количество() Тогда
			
			НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
			НоваяСтрока.Формировать = Истина;
			НоваяСтрока.ИспользоватьЭП = Объект.ИспользуетсяКриптография;
			Если НоваяСтрока.ИспользоватьЭП Тогда
				НоваяСтрока.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
	
КонецПроцедуры

#КонецОбласти

#Область АсинхронныйОбмен

Функция ВидЭД(КодЭД)
	
	Если КодЭД = "10" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение;
	ИначеЕсли КодЭД = "11" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование;
	ИначеЕсли КодЭД = "14" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки;
	ИначеЕсли КодЭД = "05" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд;
	ИначеЕсли КодЭД = "04" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД;
	ИначеЕсли КодЭД = "03" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД;
	ИначеЕсли КодЭД = "19" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.СписокНаОткрытиеСчетовПоЗарплатномуПроекту;
	ИначеЕсли КодЭД = "21" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.СписокНаЗачислениеДенежныхСредствНаСчетаСотрудников;
	ИначеЕсли КодЭД = "23" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.СписокУволенныхСотрудников;
	ИначеЕсли КодЭД = "30" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты;
	ИначеЕсли КодЭД = "31" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты;
	ИначеЕсли КодЭД = "32" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты;
	ИначеЕсли КодЭД = "33" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты;
	ИначеЕсли КодЭД = "34" Тогда
		Возврат Перечисления.ВидыЭДОбменСБанками.СправкаОПодтверждающихДокументах;
	КонецЕсли;
	
КонецФункции

Процедура СохранитьДатуПолученияВыписки(НастройкаОбмена)
	
	МенеджерЗаписи = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
	МенеджерЗаписи.ДатаПолученияВыписки = ТекущаяДатаСеанса();
	МенеджерЗаписи.ТекстОшибки = ""; // сброс последней ошибки, т.к. выписка получена успешно.
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ПолучитьВыпискуАвтоматически(НастройкаОбмена)
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена,
		"АдресСервера, ВерсияФормата, ЛогинДляПолученияВыписки, Организация, Банк, ИдентификаторОрганизации");
		
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("Логин", РеквизитыНастройкиОбмена.ЛогинДляПолученияВыписки);
	ДанныеАутентификации.Вставить("Пароль", ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(НастройкаОбмена));
	РезультатАутентификации = ОбменСБанкамиСлужебныйВызовСервера.БазоваяАутентификация(
		РеквизитыНастройкиОбмена.АдресСервера, РеквизитыНастройкиОбмена.ИдентификаторОрганизации, ДанныеАутентификации,
		РеквизитыНастройкиОбмена.ВерсияФормата, НастройкаОбмена);
		
	Если ЗначениеЗаполнено(РезультатАутентификации.ТекстОшибки) Тогда
		ВызватьИсключение РезультатАутентификации.ТекстОшибки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатАутентификации.ИдентификаторСессии) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачала = ДатаНачалаЗапросаВыписки(НастройкаОбмена);
	ДатаОкончания = ТекущаяДатаСеанса();
	
	МассивБанковскихСчетов = Новый Массив;
	ОбменСБанкамиПереопределяемый.ПолучитьНомераБанковскихСчетов(
		РеквизитыНастройкиОбмена.Организация, РеквизитыНастройкиОбмена.Банк, МассивБанковскихСчетов);

	МассивСообщенийЗапросов = МассивЗапросовВыпискиАсинхронныйОбмен(
		НастройкаОбмена, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов, Истина);

	НовыйПакет = Неопределено;
	СоздатьПакетОбменСБанками(НастройкаОбмена, МассивСообщенийЗапросов, НовыйПакет);

	СоздатьЭДПакетаAsync(НовыйПакет);
	
	МассивПакетов = Новый Массив;
	МассивПакетов.Добавить(НовыйПакет);
	ТекстСообщения = "";
	Результат = ОтправкаПакетовВБанк(МассивПакетов, РезультатАутентификации.ИдентификаторСессии, ТекстСообщения);
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыПолучения.Вставить("ИдентификаторСессии", РезультатАутентификации.ИдентификаторСессии);
	ПолучитьНовыеДокументыИзБанка(ПараметрыПолучения);

КонецПроцедуры

Функция ПодтверждатьДокументВЛКБанка(НастройкаОбмена, ВидЭД, ПоказыватьОкноПодтвержденияПлатежей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	НастройкиОбменСБанкамиИсходящиеДокументы.ПодтвердитьВБанке КАК ПодтвердитьВБанке,
	               |	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка.ПоказыватьОкноПодтвержденияПлатежей КАК ПоказыватьОкноПодтвержденияПлатежей
	               |ИЗ
	               |	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	               |ГДЕ
	               |	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка = &НастройкаОбмена
	               |	И НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент = &ВидЭД";
	
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ПоказыватьОкноПодтвержденияПлатежей = Результат.ПоказыватьОкноПодтвержденияПлатежей;
		Возврат Результат.ПодтвердитьВБанке;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьПлатежныйДокументТребующийПодтверждениеВЛК(СообщенияОбмена, ВыводитьОкноПодтверждения)
	
	РеквизитыСообщенийОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СообщенияОбмена, "ВидЭД, НастройкаОбмена");
	Для каждого ЭлементКоллекции Из РеквизитыСообщенийОбмена Цикл
		Если ВидыПлатежныхДокументов().Найти(ЭлементКоллекции.Значение.ВидЭД) <> Неопределено
			И ПодтверждатьДокументВЛКБанка(ЭлементКоллекции.Значение.НастройкаОбмена, ЭлементКоллекции.Значение.ВидЭД, ВыводитьОкноПодтверждения) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область Сбербанк

// Получает версию формата обмена Сбербанка
//
// Возвращаемое значение:
//    Строка - версия формата обмена.
//
Функция ВерсияФорматаСбербанк()
	
	Возврат "01.010.00";
	
КонецФункции

// Получает представление программы для сервиса сбербанка
//
// Возвращаемое значение:
//    Строка - представление программы для сервиса Сбербанка.
//
Функция ПредставлениеОтправителяСбербанк()
	
	ИспользуетсяТестовыйРежим = Ложь;
	ОбменСБанкамиПереопределяемый.ПроверитьИспользованиеТестовогоРежима(ИспользуетсяТестовыйРежим);
	
	Если ИспользуетсяТестовыйРежим Тогда
		Возврат "1CEnterprise8";
	КонецЕсли;
	
	Возврат "1С: Предприятие 8";
	
КонецФункции

// Формирует список служебных реквизиты выписки Сбербанка.
// 
// Возвращаемое значение:
//  Массив - в элементах строковые названия реквизитов операции в выписке.
//
Функция СлужебныеРеквизитыВыпискиСбербанк()

	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("s_Type");
	МассивРеквизитов.Добавить("s_OriginatorE");
	МассивРеквизитов.Добавить("s_DestinatorE");
	МассивРеквизитов.Добавить("s_Number");
	МассивРеквизитов.Добавить("s_Sent");
	МассивРеквизитов.Добавить("s_Rcpt");
	МассивРеквизитов.Добавить("s_32A");
	МассивРеквизитов.Добавить("s_33B");
	МассивРеквизитов.Добавить("s_71A");
	МассивРеквизитов.Добавить("s_71F");
	МассивРеквизитов.Добавить("s_71G");
	МассивРеквизитов.Добавить("s_SA");
	МассивРеквизитов.Добавить("s_S3");
	МассивРеквизитов.Добавить("s_RA");
	МассивРеквизитов.Добавить("s_S4");
	МассивРеквизитов.Добавить("s_S2");
	МассивРеквизитов.Добавить("s_R3");
	МассивРеквизитов.Добавить("s_R4");
	МассивРеквизитов.Добавить("s_R2");
	МассивРеквизитов.Добавить("s_B3");
	МассивРеквизитов.Добавить("s_B2");
	МассивРеквизитов.Добавить("s_20");
	МассивРеквизитов.Добавить("s_21");
	МассивРеквизитов.Добавить("s_23B");
	МассивРеквизитов.Добавить("s_23E");
	МассивРеквизитов.Добавить("s_26T");
	МассивРеквизитов.Добавить("s_36");
	МассивРеквизитов.Добавить("s_72");
	МассивРеквизитов.Добавить("s_PAYERNAME");
	МассивРеквизитов.Добавить("s_SS");
	МассивРеквизитов.Добавить("s_PAYERBANKNAME");
	МассивРеквизитов.Добавить("s_IS");
	МассивРеквизитов.Добавить("s_IB");
	МассивРеквизитов.Добавить("s_RS");
	МассивРеквизитов.Добавить("s_RECEIVERBANKNAME");
	МассивРеквизитов.Добавить("s_RECEIVERNAME");
	МассивРеквизитов.Добавить("s_77B");
	МассивРеквизитов.Добавить("s_PAYERCORACC");
	МассивРеквизитов.Добавить("s_IK");
	МассивРеквизитов.Добавить("s_RECEIVERCORACC");
	МассивРеквизитов.Добавить("s_GROUND");
	МассивРеквизитов.Добавить("s_PAYERINN");
	МассивРеквизитов.Добавить("s_IC");
	МассивРеквизитов.Добавить("urgent");
	МассивРеквизитов.Добавить("s_FILIAL");
	Возврат МассивРеквизитов;
	
КонецФункции

// Сохраняет тикеты для дальнейшего запроса статусов.
//
// Параметры
//  НастройкаОбмена  - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  Тикеты - Массив - тикеты с видами электронных документов
//    * Тикет - Строка - тикет.
//
Процедура СохранитьТикетыСбербанк(НастройкаОбмена, Тикеты)
	
	Для Каждого Тикет Из Тикеты Цикл
		СохранитьТикетСбербанк(НастройкаОбмена, Тикет);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСтатусыДокументовСбербанк(НастройкаОбмена, ИдентификаторСессии, КоличествоПолучено, МассивСообщенийОбмена = Неопределено, ВыводитьПрогрессВыполнения = Истина)
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	
	Пока Истина Цикл
	
		МассивТикетов = МассивТикетовСбербанк(НастройкаОбмена);

		Если МассивТикетов.Количество() = 0 Тогда
			МассивСообщенийОбмена = Новый Массив;
			Прервать;
		КонецЕсли;
			
		ПолучитьИзвещенияПоТикетамСбербанк(
			НастройкаОбмена, ИдентификаторСессии, ИдентификаторОрганизации, МассивТикетов, КоличествоПолучено);
		
		ТекстЗапроса = ОбменСБанкамиСлужебныйВызовСервера.ТекстЗапросаСостоянияОбработкиДокументовСбербанк(
			НастройкаОбмена, МассивТикетов);

		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			
			Данные = Новый Массив;
			Данные.Добавить(ТекстЗапроса);
			ОтправитьДанныеВСбербанк(НастройкаОбмена, ИдентификаторСессии, Данные, МассивТикетов, , , ВыводитьПрогрессВыполнения);
				
			Если МассивТикетов.Количество() Тогда
				Тикет = МассивТикетов.Получить(0); // должен быть только 1 тикет
				СохранитьТикетСбербанк(НастройкаОбмена, Тикет);
			КонецЕсли;
			
			ПолучитьИзвещенияПоТикетамСбербанк(
				НастройкаОбмена, ИдентификаторСессии, ИдентификаторОрганизации, МассивТикетов, КоличествоПолучено);
			
		КонецЕсли;
		
		Если МассивСообщенийОбмена = Неопределено Тогда
			Прервать;
		ИначеЕсли ИзвещенияПодтвержденияПоSMSПолученыСбербанк(МассивСообщенийОбмена) Тогда
			МассивСообщенийОбмена = СообщенияОбменаТребующиеSMSПодтверждения(МассивСообщенийОбмена);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает массив тикетов для дальнейшего формирования запроса в банк.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ИдентификаторОрганизации - Строка - (возвращаемое значение)уникальный идентификатор организации в системе банка.
//
Функция МассивТикетовСбербанк(Знач НастройкаОбмена, ИдентификаторОрганизации = Неопределено)
	
	МассивИдентификаторов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТикетыОбменСБанками.Идентификатор
	|ИЗ
	|	РегистрСведений.ТикетыОбменСБанками КАК ТикетыОбменСБанками
	|ГДЕ
	|	ТикетыОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиОбменСБанками.ИдентификаторОрганизации
	|ИЗ
	|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|ГДЕ
	|	НастройкиОбменСБанками.Ссылка = &НастройкаОбмена";
	
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаИдентификаторов = Результат[0].Выбрать();
	
	Пока ВыборкаИдентификаторов.Следующий() Цикл
		МассивИдентификаторов.Добавить(ВыборкаИдентификаторов.Идентификатор);
	КонецЦикла;
	
	ВыборкаПоИдентификатору = Результат[1].Выбрать();
	
	ВыборкаПоИдентификатору.Следующий();
	
	ИдентификаторОрганизации = ВыборкаПоИдентификатору.ИдентификаторОрганизации;
	
	Возврат МассивИдентификаторов;

КонецФункции

Функция СостоянияИзКвитанцииСбербанк()
	
	СоответствиеВозврата = Новый Соответствие;
	
	СоответствиеВозврата.Вставить("DELIVERED", Перечисления.СтатусыОбменСБанками.Доставлен);
	
	СоответствиеВозврата.Вставить("CREATED", Перечисления.СтатусыОбменСБанками.НеПодтвержден);
	СоответствиеВозврата.Вставить("PARTLY_SIGNED", Перечисления.СтатусыОбменСБанками.НеПодтвержден);
	СоответствиеВозврата.Вставить("PARTY_SIGNED", Перечисления.СтатусыОбменСБанками.НеПодтвержден);
	
	СоответствиеВозврата.Вставить("VALIDEDS", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("ACCEPTED", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("EXPORTED", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("ACCEPTED_BY_ABS", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("ACCEPTED_BY_CFE", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("FRAUDREVIEW", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("FRAUDSMS", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("IMPORTED", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("PROCESSING", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("SIGNED", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("TRIED_BY_CFE", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("PUBLISHED_BY_BANK", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("PARTIMPLEMENTED", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("SOFT_FAIL", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("ONACCEPTANCE", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("ACCEPTANCE", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("PARTACCEPT", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("MODIFYREQUIRED", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("SUBMITTED", Перечисления.СтатусыОбменСБанками.Принят);
	СоответствиеВозврата.Вставить("PARTIALLY_ACCEPTED_BY_CFE", Перечисления.СтатусыОбменСБанками.Принят);
	
	СоответствиеВозврата.Вставить("CARD2", Перечисления.СтатусыОбменСБанками.Приостановлен);
	СоответствиеВозврата.Вставить("DELAYED", Перечисления.СтатусыОбменСБанками.Приостановлен);
	
	СоответствиеВозврата.Вставить("INVALIDEDS", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("REQUISITE_ERROR", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("EXPORT_ERROR", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("CHECKERROR", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("DECLINED_BY_ABS", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("DECLINED_BY_BANK", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("DECLINED_BY_CFE", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("FORMAT_ERROR", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("RQUID_DUPLIC", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("ORG_NOT_FOUND", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("SERT_NOT_FOUND", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("DOCUMENT_NOT_FOUND", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("REFUSEDBYBANK", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("FAIL", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("ACCEPTEXPIRE", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("NONEACCEPTANCE", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	СоответствиеВозврата.Вставить("PROCESSERROR", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
	
	СоответствиеВозврата.Вставить("RECALL", Перечисления.СтатусыОбменСБанками.Аннулирован);
	
	СоответствиеВозврата.Вставить("IMPLEMENTED", Перечисления.СтатусыОбменСБанками.Исполнен);
	СоответствиеВозврата.Вставить("PROCESSED", Перечисления.СтатусыОбменСБанками.Исполнен);
	СоответствиеВозврата.Вставить("PAID", Перечисления.СтатусыОбменСБанками.Исполнен);
	СоответствиеВозврата.Вставить("APPROVE", Перечисления.СтатусыОбменСБанками.Исполнен);
	
	Возврат СоответствиеВозврата;
	
КонецФункции

Процедура СдвинутьПоследнююДатуПолученияДокументовСбербанк(НастройкаОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеОбменСБанками.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗапросыВыписок
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.Дата >= &Дата
	|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ЗапросВыписки)
	|	И СообщениеОбменСБанками.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Доставлен), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Исполнен), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Обработан), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Отправлен), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Принят))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщениеОбменСБанками.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеОбменСБанками.ДатаДокументаОтправителя КАК ДатаДокументаОтправителя
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.СообщениеРодитель В
	|			(ВЫБРАТЬ
	|				ЗапросыВыписок.Ссылка
	|			ИЗ
	|				ЗапросыВыписок КАК ЗапросыВыписок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщениеОбменСБанками.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса() - 2*24*60*60);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		УниверсальноеВремя = УниверсальноеВремя(Выборка.ДатаДокументаОтправителя, ЧасовойПояс());
		ВремяМосква = МестноеВремя(УниверсальноеВремя, "Europe/Moscow");
		МенеджерЗаписи = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
		МенеджерЗаписи.ПоследняяДатаПолученияЭД = ВремяМосква;
		МенеджерЗаписи.ДатаСинхронизации = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПоручениеНаПродажуВалютыСбербанк(СсылкаНаДокумент, ДеревоДанных, АдресФайлаВоВременномХранилище)
		
	ПространствоИмен = "http://bssys.com/upg/request";
	ТекстОшибки = "";
	
	CurrSell = ОбъектТипаCML(ФабрикаXDTO, "CurrSell", ПространствоИмен);
		ИДДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдДокумента");
		ЗаполнитьСвойствоXDTO(CurrSell, "docExtId", ИДДокумента, Истина, ТекстОшибки);
		ОбщиеРеквизиты = ОбъектТипаCML(ФабрикаXDTO, "CurrComDocData", ПространствоИмен);
			ДатаДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "docDate", ДатаДокумента, Истина, ТекстОшибки);
			НомерДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "docNum", НомерДокумента, Истина, ТекстОшибки);
			РеквизитыОрганизации = ОбъектТипаCML(ФабрикаXDTO, "OrgData", ПространствоИмен);
				НаименованиеОрганизации = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыОрганизации.Наименование");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "orgName", НаименованиеОрганизации, Истина, ТекстОшибки);
				ИНН = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ИНН");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "inn", ИНН, Истина, ТекстОшибки);
				КПП = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.КПП");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "kpp", КПП, , ТекстОшибки);
				ОКПО = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ОКПО");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "okpo", ОКПО, , ТекстОшибки);
				НаименованиеМеждународное = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыОрганизации.НаименованиеМеждународное");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "internationalName", НаименованиеМеждународное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "OrgData", РеквизитыОрганизации, Истина, ТекстОшибки);
			Если ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник") = Истина Тогда
				УполномоченныйСотрудник = УполномоченныйСотрудникСбербанк(ДеревоДанных, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "AuthPers", УполномоченныйСотрудник, , ТекстОшибки);
			КонецЕсли;
		ЗаполнитьСвойствоXDTO(CurrSell, "DocData", ОбщиеРеквизиты, Истина, ТекстОшибки);
		Сделка = ОбъектТипаCML(ФабрикаXDTO, "CurrSellTrans", ПространствоИмен);
			Сумма = СуммаСбербанк(ДеревоДанных, "СуммаПродажи", ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Сделка, "SumSell", Сумма, Истина, ТекстОшибки);
			УсловияПродажи = ОбъектТипаCML(ФабрикаXDTO, "TermDeal", ПространствоИмен);
				УсловияСделки = ЗначениеРеквизитаВДереве(ДеревоДанных, "УсловияСделки");
				ЗаполнитьСвойствоXDTO(УсловияПродажи, "DealType", УсловияСделки, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Сделка, "TermSell", УсловияПродажи, Истина, ТекстОшибки);
			РеквизитыСчетаСписания = ОбъектТипаCML(ФабрикаXDTO, "AccountRubType", ПространствоИмен);
				НомерСчетаСписания = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыСписания.НомерСчета");
				ЗаполнитьСвойствоXDTO(РеквизитыСчетаСписания, "accNum", НомерСчетаСписания, Истина, ТекстОшибки);
				РеквизитыБанкаСписания = БанкСбербанк(ДеревоДанных, "РеквизитыСписания.Банк", ТекстОшибки);
				ЗаполнитьСвойствоXDTO(РеквизитыСчетаСписания, "Bank", РеквизитыБанкаСписания, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Сделка, "AccountSell", РеквизитыСчетаСписания, Истина, ТекстОшибки);
			РеквизитыСчетаЗачисления = ОбъектТипаCML(ФабрикаXDTO, "OurRubAccountType", ПространствоИмен);
				НомерСчетаЗачисления = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыЗачисления.НомерСчета");
				ЗаполнитьСвойствоXDTO(РеквизитыСчетаЗачисления, "accNum", НомерСчетаЗачисления, Истина, ТекстОшибки);
				ТипЗачисления = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыЗачисления.ТипЗачисления");
				ЗаполнитьСвойствоXDTO(РеквизитыСчетаЗачисления, "type", ТипЗачисления, Истина, ТекстОшибки);
				РеквизитыБанкаЗачисления = БанкСбербанк(ДеревоДанных, "РеквизитыЗачисления.Банк", ТекстОшибки);
				ЗаполнитьСвойствоXDTO(РеквизитыСчетаЗачисления, "Bank", РеквизитыБанкаЗачисления, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Сделка, "AccountCredit", РеквизитыСчетаЗачисления, Истина, ТекстОшибки);
			КомиссионноеВознаграждение = КомиссионноеВознаграждениеСбербанк(ДеревоДанных, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Сделка, "Commis", КомиссионноеВознаграждение, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(CurrSell, "Trans", Сделка, Истина, ТекстОшибки);
		СоглашениеСБанком = ЗначениеРеквизитаВДереве(ДеревоДанных, "СоглашениеСБанком");
		ЗаполнитьСвойствоXDTO(CurrSell, "BankAgreement", СоглашениеСБанком, , ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки
	КонецЕсли;
	
	CurrSell.Проверить();
		
	ДвоичныеДанные = ДвоичныеДанныеИзXDTO(ФабрикаXDTO, CurrSell);
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
КонецФункции

Функция ПриложенныеДокументыСбербанк(ДеревоДанных, ТекстОшибки)
	
	ПространствоИмен = "http://bssys.com/upg/request";
	СекцияПрисоединенныеФайлы = ОбъектТипаCML(ФабрикаXDTO, "AttachmentsType", ПространствоИмен);
	Для Каждого ТекущийПрисоединенныйФайл Из ДеревоДанных.Строки Цикл
		ПрисоединенныйФайлСсылка = ЗначениеРеквизитаВДереве(
			ТекущийПрисоединенныйФайл, "ПрисоединенныеФайлы.НомерСтроки.ПрисоединенныйФайл");
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПрисоединенныйФайлСсылка, "Расширение, Наименование, Описание, ДатаСоздания, Размер");
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайлСсылка);
		ПрисоединенныйФайл = ОбъектТипаCML(ФабрикаXDTO, "AttachmentsType.Attachment", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(ПрисоединенныйФайл, "Type", РеквизитыФайла.Расширение, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ПрисоединенныйФайл, "AttachmentName", РеквизитыФайла.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ПрисоединенныйФайл, "Description", РеквизитыФайла.Описание, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ПрисоединенныйФайл, "Date", РеквизитыФайла.ДатаСоздания, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ПрисоединенныйФайл, "Size", РеквизитыФайла.Размер, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ПрисоединенныйФайл, "Body", ДвоичныеДанныеФайла, Истина, ТекстОшибки);
		СекцияПрисоединенныеФайлы.Attachment.Добавить(ПрисоединенныйФайл);
	КонецЦикла;
	
	Возврат СекцияПрисоединенныеФайлы;
	
КонецФункции

Функция КодыВидовВалютныхОперацийСбербанк(ДеревоДанных, ТекстОшибки)
	
	ПространствоИмен = "http://bssys.com/upg/request";
	КодыВидовВалютныхОпераций = ОбъектТипаCML(ФабрикаXDTO, "VoInfos", ПространствоИмен);
	Для Каждого ТекущийКодОперации Из ДеревоДанных.Строки Цикл
		СекцияКодВидаОперации = ОбъектТипаCML(ФабрикаXDTO, "VoInfo", ПространствоИмен);
			КодВидаОперации = ЗначениеРеквизитаВДереве(
				ТекущийКодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.КодВидаВалютнойОперации");
			ЗаполнитьСвойствоXDTO(СекцияКодВидаОперации, "Vo", КодВидаОперации, Истина, ТекстОшибки);
			Сумма = ЗначениеРеквизитаВДереве(ТекущийКодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.Сумма");
			СекцияСумма = СуммаСбербанк(ТекущийКодОперации, "КодыВидовВалютныхОпераций.НомерСтроки", ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СекцияКодВидаОперации, "Sum", СекцияСумма, Истина, ТекстОшибки);
			НомерПаспортаСделки = ЗначениеРеквизитаВДереве(
				ТекущийКодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.НомерПаспортаСделки");
			ЗаполнитьСвойствоXDTO(СекцияКодВидаОперации, "PsNum", НомерПаспортаСделки, , ТекстОшибки);
			ЕстьКонтракт = ЗначениеРеквизитаВДереве(ТекущийКодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.Контракт") = Истина;
			Если ЕстьКонтракт Тогда
				Контракт = ОбъектТипаCML(ФабрикаXDTO, "Contract", ПространствоИмен);
					НомерКонтракта = ЗначениеРеквизитаВДереве(
						ТекущийКодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.Контракт.Номер");
					Если ЗначениеЗаполнено(НомерКонтракта) Тогда
						ЗаполнитьСвойствоXDTO(Контракт, "numCheck", "1", Истина, ТекстОшибки);
					Иначе
						ЗаполнитьСвойствоXDTO(Контракт, "numCheck", "0", Истина, ТекстОшибки);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(Контракт, "num", НомерКонтракта, , ТекстОшибки);
					ДатаКонтракта = ЗначениеРеквизитаВДереве(
						ТекущийКодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.Контракт.Дата");
					ЗаполнитьСвойствоXDTO(Контракт, "date", ДатаКонтракта, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияКодВидаОперации, "Contract", Контракт, , ТекстОшибки);
				ВалютаИСумма = СуммаСбербанк(ТекущийКодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.Контракт", ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияКодВидаОперации, "ContractSum", ВалютаИСумма, , ТекстОшибки);
			КонецЕсли;
			ОжидаемыйСрок = ЗначениеРеквизитаВДереве(
				ТекущийКодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.ОжидаемыйСрок");
			ЗаполнитьСвойствоXDTO(СекцияКодВидаОперации, "ExpectedDate", ОжидаемыйСрок, , ТекстОшибки);
		КодыВидовВалютныхОпераций.VoInfo.Добавить(СекцияКодВидаОперации);
	КонецЦикла;
	
	Возврат КодыВидовВалютныхОпераций;
		
КонецФункции

Функция БанкСбербанк(ДеревоДанных, Путь, ТекстОшибки)
	
	ПространствоИмен = "http://bssys.com/upg/request";
	РеквизитыБанка = ОбъектТипаCML(ФабрикаXDTO, "Bank", ПространствоИмен);
	БИКБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, Путь + ".БИК");
	ЗаполнитьСвойствоXDTO(РеквизитыБанка, "bic", БИКБанка, Истина, ТекстОшибки);
	КоррСчетБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, Путь + ".КоррСчет");
	ЗаполнитьСвойствоXDTO(РеквизитыБанка, "correspAcc", КоррСчетБанка, , ТекстОшибки);
	НаименованиеБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, Путь + ".Наименование");
	ЗаполнитьСвойствоXDTO(РеквизитыБанка, "Name", НаименованиеБанка, Истина, ТекстОшибки);
	ГородБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, Путь + ".Город");
	ЗаполнитьСвойствоXDTO(РеквизитыБанка, "BankCity", ГородБанка, , ТекстОшибки);
	ИнформацияОРасположенииБанка = ИнформацияОРасположенииБанка(ГородБанка);
	
	Если ЗначениеЗаполнено(ИнформацияОРасположенииБанка.НазваниеНаселенногоПункта)
		И ЗначениеЗаполнено(ИнформацияОРасположенииБанка.ТипНаселенногоПункта) Тогда
		ЗаполнитьСвойствоXDTO(
			РеквизитыБанка, "BankCity", ИнформацияОРасположенииБанка.НазваниеНаселенногоПункта, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(
			РеквизитыБанка, "SettlementType", ИнформацияОРасположенииБанка.ТипНаселенногоПункта, Истина, ТекстОшибки);
	Иначе
		ДопОшибка = НСтр("ru = 'Некорректные данные в поле ""Город"" банка'") + " " + НаименованиеБанка;
		Если СтрНайти(ТекстОшибки, ДопОшибка) = 0 Тогда // не добавляем одну и ту же ошибку
			ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + ДопОшибка;
		КонецЕсли;
	КонецЕсли;

	Возврат РеквизитыБанка;
	
КонецФункции

Функция КомиссионноеВознаграждениеСбербанк(ДеревоДанных, ТекстОшибки)
	
	ПространствоИмен = "http://bssys.com/upg/request";

	КомиссионноеВознаграждение = ОбъектТипаCML(ФабрикаXDTO, "Commision", ПространствоИмен);
	Если ЗначениеРеквизитаВДереве(ДеревоДанных, "КомиссионноеВознаграждение") = "Счет" Тогда
		СчетСписания = ОбъектТипаCML(ФабрикаXDTO, "ComAcc", ПространствоИмен);
			НомерСчетаСписания = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "КомиссионноеВознаграждение.Счет.НомерСчета");
			ЗаполнитьСвойствоXDTO(СчетСписания, "accNum", НомерСчетаСписания, Истина, ТекстОшибки);
			БИКБанкаСписания = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "КомиссионноеВознаграждение.Счет.БИК");
			ЗаполнитьСвойствоXDTO(СчетСписания, "bic", БИКБанкаСписания, Истина, ТекстОшибки);
			НаименованиеБанкаСписания = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "КомиссионноеВознаграждение.Счет.НаименованиеБанка");
			ЗаполнитьСвойствоXDTO(СчетСписания, "BankName", НаименованиеБанкаСписания, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КомиссионноеВознаграждение, "ComAcc", СчетСписания, Истина, ТекстОшибки);
	Иначе
		ПлатежноеПоручение = ОбъектТипаCML(ФабрикаXDTO, "ComOrder", ПространствоИмен);
			НомерПлатежногоПоручения = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "КомиссионноеВознаграждение.ПлатежноеПоручение.Номер");
			ЗаполнитьСвойствоXDTO(ПлатежноеПоручение, "numPayDoc", НомерПлатежногоПоручения, Истина, ТекстОшибки);
			ДатаПлатежногоПоручения = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "КомиссионноеВознаграждение.ПлатежноеПоручение.Дата");
			ЗаполнитьСвойствоXDTO(ПлатежноеПоручение, "datePayDoc", ДатаПлатежногоПоручения, Истина, ТекстОшибки);
			НазначениеПлатежа = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "КомиссионноеВознаграждение.ПлатежноеПоручение.НазначениеПлатежа");
			ЗаполнитьСвойствоXDTO(ПлатежноеПоручение, "purposePayDoc", НазначениеПлатежа, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КомиссионноеВознаграждение, "ComOrder", ПлатежноеПоручение, Истина, ТекстОшибки);
	КонецЕсли;
	Возврат КомиссионноеВознаграждение;

КонецФункции

Функция ОбосновывающиеДокументыСбербанк(ДеревоДанных, ТекстОшибки)
	
	ПространствоИмен = "http://bssys.com/upg/request";
	ОбосновывающиеДокументы = ОбъектТипаCML(ФабрикаXDTO, "VoDocs", ПространствоИмен);
	Для Каждого ТекущийОбосновывающийДокумент Из ДеревоДанных.Строки Цикл
		СекцияОбосновывающийДокумент = ОбъектТипаCML(ФабрикаXDTO, "VoDoc", ПространствоИмен);
			ТипДокумента = ЗначениеРеквизитаВДереве(
				ТекущийОбосновывающийДокумент, "ОбосновывающиеДокументы.НомерСтроки.ТипДокумента");
			ЗаполнитьСвойствоXDTO(СекцияОбосновывающийДокумент, "DocType", ТипДокумента, Истина, ТекстОшибки);
			НаименованиеДокумента = ЗначениеРеквизитаВДереве(
				ТекущийОбосновывающийДокумент, "ОбосновывающиеДокументы.НомерСтроки.НаименованиеДокумента");
			ЗаполнитьСвойствоXDTO(СекцияОбосновывающийДокумент, "DocName", НаименованиеДокумента, , ТекстОшибки);
			ОсновныеДанныеДокумента = РеквизитыДокументаСбербанк(
				ТекущийОбосновывающийДокумент, "ОбосновывающиеДокументы.НомерСтроки", ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СекцияОбосновывающийДокумент, "Request", ОсновныеДанныеДокумента, Истина, ТекстОшибки);
		ОбосновывающиеДокументы.VoDoc.Добавить(СекцияОбосновывающийДокумент);
	КонецЦикла;

	Возврат ОбосновывающиеДокументы;
	
КонецФункции

Функция РеквизитыДокументаСбербанк(ДеревоДанных, Путь, ТекстОшибки)
	
	ПространствоИмен = "http://bssys.com/upg/request";
	DocData = ОбъектТипаCML(ФабрикаXDTO, "DocData", ПространствоИмен);
	НаименованиеБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, Путь + ".НаименованиеБанка");
	ЗаполнитьСвойствоXDTO(DocData, "bankName", НаименованиеБанка, , ТекстОшибки);
	НомерДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, Путь + ".НомерДокумента");
	Если Не ЗначениеЗаполнено(НомерДокумента) Тогда
		НомерДокумента = "null";
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(DocData, "docNum", НомерДокумента, Истина, ТекстОшибки);
	ДатаДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, Путь + ".ДатаДокумента");
	ЗаполнитьСвойствоXDTO(DocData, "docDate", ДатаДокумента, Истина, ТекстОшибки);
	
	Возврат DocData;

КонецФункции

Функция СтранаСбербанк(ДеревоДанных, Путь, ТекстОшибки)
	
	ПространствоИмен = "http://bssys.com/upg/request";
	Страна = ОбъектТипаCML(ФабрикаXDTO, "CountryName", ПространствоИмен);
	КодСтраныНерезидента = ЗначениеРеквизитаВДереве(ДеревоДанных, Путь + ".КодСтраны");
	ЗаполнитьСвойствоXDTO(Страна, "code", КодСтраныНерезидента, Истина, ТекстОшибки);
	НаименованиеСтраныНерезидента = ЗначениеРеквизитаВДереве(ДеревоДанных, Путь + ".НаименованиеСтраны");
	ЗаполнитьСвойствоXDTO(Страна, "name", НаименованиеСтраныНерезидента, Истина, ТекстОшибки);
	Возврат Страна;
	
КонецФункции

Функция СуммаСбербанк(ДеревоДанных, Путь, ТекстОшибки)
	
	ПространствоИмен = "http://bssys.com/upg/request";
	CurrAmountType = ОбъектТипаCML(ФабрикаXDTO, "CurrAmountType", ПространствоИмен);
	Сумма = ЗначениеРеквизитаВДереве(ДеревоДанных, Путь + ".Сумма");
	ЗаполнитьСвойствоXDTO(CurrAmountType, "docSum", Сумма, Истина, ТекстОшибки);
	КодВалюты = ЗначениеРеквизитаВДереве(ДеревоДанных, Путь + ".КодВалюты");
	ЗаполнитьСвойствоXDTO(CurrAmountType, "currCode", КодВалюты, Истина, ТекстОшибки);
	ISOКодВалюты = ЗначениеРеквизитаВДереве(ДеревоДанных, Путь + ".ISOКодВалюты");
	ЗаполнитьСвойствоXDTO(CurrAmountType, "currIsoCode", ISOКодВалюты, , ТекстОшибки);
	Возврат CurrAmountType;
	
КонецФункции

Функция ИзвещенияПодтвержденияПоSMSПолученыСбербанк(МассивСообщенийОбмена)
	
	ЗначенияСтатусов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСообщенийОбмена, "Статус");
	
	Для каждого ЭлементКоллекции Из ЗначенияСтатусов Цикл
		
		Если ЭлементКоллекции.Значение = Перечисления.СтатусыОбменСБанками.Отправлен
			ИЛИ ЭлементКоллекции.Значение = Перечисления.СтатусыОбменСБанками.Доставлен Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ПолучитьИзвещенияПоТикетамСбербанк(НастройкаОбмена, ИдентификаторСессии, ИдентификаторОрганизации, МассивТикетов, КоличествоПолучено)
	
	МассивОтветов = Неопределено;
	
	ПолучитьОтветыПоТикетамСбербанк(НастройкаОбмена, МассивТикетов, ИдентификаторСессии, ИдентификаторОрганизации, МассивОтветов);
	
	Индекс = 0;
	Для Каждого Ответ Из МассивОтветов Цикл
	
		Если Ответ = "<!--NOT PROCESSED YET-->" ИЛИ Ответ = "<!--NOT_PROCESSED_YET-->" Тогда
			// тикет еще не обработан, пропускаем
		ИначеЕсли Ответ = "<!--REQUEST NOT FOUND-->" ИЛИ Ответ = "<!--REQUEST_NOT_FOUND-->" Тогда
			// Считаем, что тикет обработан и сохраняем его как внешний идентификатор сообщения обмена.
			СохранитьТикетКакВнешнийИдентификаторСообщенияОбменаСбербанк(НастройкаОбмена, МассивТикетов.Получить(Индекс));
		ИначеЕсли Сред(Ответ, 1, 23) = "00000000-0000-0000-0000" Тогда
			ТекстСообщения = ОбменСБанкамиКлиентСервер.ТекстСообщенияСбербанк(Ответ);
			ВызватьИсключение ТекстСообщения;
		Иначе
			КоличествоТомов = 0;
			МассивНовыхСообщенийОбмена = Новый Массив;
			ИдентификаторЗапроса = МассивТикетов.Получить(Индекс);
			ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветСбербанка(
				Ответ, НастройкаОбмена, МассивНовыхСообщенийОбмена, ИдентификаторЗапроса, КоличествоТомов);
			Если КоличествоТомов > 0 Тогда
				ПолучитьБольшойПакетСбербанк(НастройкаОбмена, ИдентификаторСессии, ИдентификаторОрганизации, ИдентификаторЗапроса,
					КоличествоТомов, МассивНовыхСообщенийОбмена);
			КонецЕсли;
			КоличествоПолучено = КоличествоПолучено + МассивНовыхСообщенийОбмена.Количество();
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьБольшойПакетСбербанк(НастройкаОбмена, ИдентификаторСессии, ИдентификаторОрганизации, ИдентификаторЗапроса, КоличествоТомов, МассивНовыхСообщенийОбмена)

	ВидОперации = НСтр("ru = 'Получение большого документа с сервера Сбербанка'");
	
	ТекстОшибки = "";
	
	WSПрокси = ОбменСБанкамиСлужебныйПовтИсп.WSПроксиСбербанк();
	МассивОтветов = Новый Массив;
	
	Для Индекс = 1 По КоличествоТомов Цикл
	
		ПолучениеТомаТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "getResponsePartSRP");
		ВыбранныйЭлемент = WSПрокси.ФабрикаXDTO.Создать(ПолучениеТомаТип);
		
		ЗаполнитьСвойствоXDTO(ВыбранныйЭлемент, "request", ИдентификаторЗапроса, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ВыбранныйЭлемент, "part", Индекс, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ВыбранныйЭлемент, "sessionId", ИдентификаторСессии, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ВыбранныйЭлемент, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ШаблонСообщения = НСтр("ru = 'Ошибка формирования запроса большого документа из Сбербанка:
									|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекстОшибки);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	
		ВыбранныйЭлемент.Проверить();
	
		Попытка
			XDTOРезультат = WSПрокси.getResponsePartSRP(
				ИдентификаторЗапроса, Индекс, ИдентификаторСессии, ИдентификаторОрганизации);
		Исключение
			ДобавитьЗаписьВЖурнал(НастройкаОбмена, "getResponsePartSRP", WSПрокси.ФабрикаXDTO, ВыбранныйЭлемент, XDTOРезультат);
			ВызватьИсключение;
		КонецПопытки;
	
		ДобавитьЗаписьВЖурнал(НастройкаОбмена, "getResponsePartSRP", WSПрокси.ФабрикаXDTO, ВыбранныйЭлемент, XDTOРезультат);
	
		МассивОтветов.Добавить(XDTOРезультат);
	
	КонецЦикла;
	
	ОбменСБанкамиСлужебныйВызовСервера.СохранитьБольшойПакетСбербанк(
		НастройкаОбмена, ИдентификаторЗапроса, МассивОтветов, МассивНовыхСообщенийОбмена);
	
КонецПроцедуры

Функция ТекстЗапросаГенерацииSMSСбербанк(НастройкаОбмена, ИдентификаторДокумента)
	
	ТекстОшибки = "";
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	Request = RequestСбербанк(ИдентификаторОрганизации, ТекстОшибки);
	
	GenSMSSign = ОбъектТипаCML(ФабрикаXDTO, "Request.GenSMSSign", "http://bssys.com/upg/request");
	ЗаполнитьСвойствоXDTO(GenSMSSign, "objId", ИдентификаторДокумента, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(GenSMSSign, "docType", "PayDocRu", Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Request, "GenSMSSign", GenSMSSign, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Request.Проверить();
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(Запись, Request);
	ТекстЗапроса = Запись.Закрыть();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПроверкиSMSСбербанк(НастройкаОбмена, ИдентификаторДокумента, ИдентификаторКриптопрофиля, SMSКод, ТекущаяСессия)
	
	ТекстОшибки = "";
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	Request = RequestСбербанк(ИдентификаторОрганизации, ТекстОшибки);
	
	ПространствоИмен = "http://bssys.com/upg/request";
	
	VerifySMSSign = ОбъектТипаCML(ФабрикаXDTO, "VerifySMSSign", ПространствоИмен);
	ЗаполнитьСвойствоXDTO(VerifySMSSign, "smsCode", SMSКод, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(VerifySMSSign, "cryptoProfileID", ИдентификаторКриптопрофиля, Истина, ТекстОшибки);
	
	SMSSignReqParams = ОбъектТипаCML(ФабрикаXDTO, "VerifySMSSign.SMSSignReqParams", "http://bssys.com/upg/request");
	ЗаполнитьСвойствоXDTO(SMSSignReqParams, "objId", ИдентификаторДокумента, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(SMSSignReqParams, "docType", "PayDocRu", Истина, ТекстОшибки);
	
	ЗаполнитьСвойствоXDTO(VerifySMSSign, "SMSSignReqParams", SMSSignReqParams, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Request, "VerifySMSSign", VerifySMSSign, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Fraud = ОбъектТипаCML(ФабрикаXDTO, "Fraud", ПространствоИмен);
	
	ЗаполнитьФродПараметрыВXDTO(Fraud, ТекущаяСессия.ФродПараметры, ТекущаяСессия.Логин);
	
	ЗаполнитьСвойствоXDTO(Request, "Fraud", Fraud);
	
	Request.Проверить();
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(Запись, Request);
	ТекстЗапроса = Запись.Закрыть();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтрокаИзОбъектаXDTO(Фабрика, ОбъектXDTO)

	НоваяЗаписьXML = Новый ЗаписьXML;
	ПотокВПамяти = Новый ПотокВПамяти();
	НоваяЗаписьXML.ОткрытьПоток(ПотокВПамяти, "UTF-8");
	Фабрика.ЗаписатьXML(НоваяЗаписьXML, ОбъектXDTO, , , , НазначениеТипаXML.Явное);
	НоваяЗаписьXML.Закрыть();
	ПотокВПамяти.Перейти(0, ПозицияВПотоке.Начало);
	ЧтениеДанных = Новый ЧтениеДанных(ПотокВПамяти, "UTF-8");
	СтрокаВозврата = ЧтениеДанных.ПрочитатьСимволы();
	ПотокВПамяти.Закрыть();
	Возврат СтрокаВозврата;
	
КонецФункции

Процедура СформироватьПлатежноеПоручениеСбербанк(СсылкаНаДокумент, ДеревоДанных, АдресФайлаВоВременномХранилище, ИспользуетсяПодпись)
		
	ПространствоИмен = "http://bssys.com/upg/request";
	ТекстОшибки = "";
	
	PayDocRu = ОбъектТипаCML(ФабрикаXDTO, "PayDocRu", ПространствоИмен);
	ИДДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдДокумента");
	ЗаполнитьСвойствоXDTO(PayDocRu, "docExtId", ИДДокумента, Истина, ТекстОшибки);
	Если Не ИспользуетсяПодпись Тогда
		ЗаполнитьСвойствоXDTO(PayDocRu, "sentForSign", "1", , ТекстОшибки);
	КонецЕсли;
	AccDoc = ОбъектТипаCML(ФабрикаXDTO, "PayDocRu.AccDoc", ПространствоИмен);
	
	СтатусСоставителя = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.СтатусСоставителя");
	ПлатежиВБюджетВДереве = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет");
	ПеречислениеВБюджет = ПлатежиВБюджетВДереве = Истина И ЗначениеЗаполнено(СтатусСоставителя);
	Код = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.Код");
	Если ПеречислениеВБюджет И Не ЗначениеЗаполнено(Код) Тогда
		ЗаполнитьСвойствоXDTO(AccDoc, "uip", "0", , ТекстОшибки);
	Иначе
		ЗаполнитьСвойствоXDTO(AccDoc, "uip", Код, , ТекстОшибки);
	КонецЕсли;
	НазначениеПлатежа = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлатежа.НазначениеПлатежа");
	// Сервер Сбербанка не умеет работать с символом возврата каретки.
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, Символы.ВК, "");
	ЗаполнитьСвойствоXDTO(AccDoc, "purpose", НазначениеПлатежа, Истина, ТекстОшибки);
	Номер = СокрЛП(ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"));
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
			+ НСтр("ru = 'Номер документа должен содержать только цифры.'");
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(AccDoc, "accDocNo", Номер, Истина, ТекстОшибки);
	Дата = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	ЗаполнитьСвойствоXDTO(AccDoc, "docDate", Дата, Истина, ТекстОшибки);
	Сумма = ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
	ЗаполнитьСвойствоXDTO(AccDoc, "docSum", Сумма, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(AccDoc, "transKind", "01", Истина, ТекстОшибки);
	ВидПлатежа = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ВидПлатежа");
	ВидПлатежа = ?(ЗначениеЗаполнено(ВидПлатежа), НРег(ВидПлатежа), "0");
	ЗаполнитьСвойствоXDTO(AccDoc, "paytKind", ВидПлатежа, Истина, ТекстОшибки);
	Очередность = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.Очередность");
	ЗаполнитьСвойствоXDTO(AccDoc, "priority", Очередность, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(PayDocRu, "AccDoc", AccDoc, Истина, ТекстОшибки);
	
	Payer = ОбъектТипаCML(ФабрикаXDTO, "PayDocRuClient", ПространствоИмен);
	ПлательщикНаименование = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Наименование");
	// Сервер Сбербанка не умеет работать с символом возврата каретки.
	ПлательщикНаименование = СтрЗаменить(ПлательщикНаименование, Символы.ВК, "");
	ЗаполнитьСвойствоXDTO(Payer, "Name", ПлательщикНаименование, Истина, ТекстОшибки);
	ПлательщикИНН = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.ИНН");
	ЗаполнитьСвойствоXDTO(Payer, "inn", СокрЛП(ПлательщикИНН), Истина, ТекстОшибки);
	ПлательщикКПП = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.КПП");
	Если Не ЗначениеЗаполнено(ПлательщикКПП) И ПеречислениеВБюджет Тогда
		ПлательщикКПП = "0";
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(Payer, "kpp", ПлательщикКПП, , ТекстОшибки);
	ПлательщикРасчСчет = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.РасчСчет");
	ЗаполнитьСвойствоXDTO(Payer, "personalAcc", ПлательщикРасчСчет, Истина, ТекстОшибки);
	Bank = БанкСбербанк(ДеревоДанных, "РеквизитыПлательщика.Банк", ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Payer, "Bank", Bank, Истина, ТекстОшибки);
	
	ЗаполнитьСвойствоXDTO(PayDocRu, "Payer", Payer, Истина, ТекстОшибки);
	
	Payee = ОбъектТипаCML(ФабрикаXDTO, "Contragent",ПространствоИмен);
	ПолучательНаименование = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Наименование");
	// Сервер Сбербанка не умеет работать с символом возврата каретки.
	ПолучательНаименование = СтрЗаменить(ПолучательНаименование, Символы.ВК, "");
	ЗаполнитьСвойствоXDTO(Payee, "Name", ПолучательНаименование, Истина, ТекстОшибки);
	ПолучательИНН = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.ИНН");
	ЗаполнитьСвойствоXDTO(Payee, "inn", ПолучательИНН, , ТекстОшибки);
	ПолучательКПП = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.КПП");
	Если Не ЗначениеЗаполнено(ПолучательКПП) И ПеречислениеВБюджет Тогда
		ПолучательКПП = "0";
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(Payee, "kpp", ПолучательКПП, , ТекстОшибки);
	ПолучательРасчСчет = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.РасчСчет");
	ЗаполнитьСвойствоXDTO(Payee, "personalAcc", ПолучательРасчСчет, , ТекстОшибки);
	
	Bank = БанкСбербанк(ДеревоДанных, "РеквизитыПолучателя.Банк", ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Payee, "Bank", Bank, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(PayDocRu, "Payee", Payee, Истина, ТекстОшибки);
	
	КодВыплат = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.КодВыплат");
	
	Если ПеречислениеВБюджет ИЛИ ЗначениеЗаполнено(КодВыплат) Тогда
		DepartmentalInfo = ОбъектТипаCML(ФабрикаXDTO, "PayDocRu.DepartmentalInfo", ПространствоИмен);
		Если ПеречислениеВБюджет Тогда
			СтатусСоставителя = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.СтатусСоставителя");
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "drawerStatus", СтатусСоставителя, Истина, ТекстОшибки);
			КодБК = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательКБК");
			КодБК = ?(Не ПустаяСтрока(КодБК), СокрЛП(КодБК), "0");
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "cbc", КодБК, Истина, ТекстОшибки);
			КодОКАТО = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ОКТМО");
			КодОКАТО = ?(ЗначениеЗаполнено(КодОКАТО), КодОКАТО, "0");
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "okato", СокрЛП(КодОКАТО), Истина, ТекстОшибки);
			ПоказательОснования = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательОснования");
			ПоказательОснования = ?(ЗначениеЗаполнено(ПоказательОснования), ПоказательОснования, "0");
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "paytReason", ПоказательОснования, Истина, ТекстОшибки);
			ПоказательПериода = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательПериода");
			ПоказательПериода = ?(ЗначениеЗаполнено(ПоказательПериода), ПоказательПериода, "0");
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "taxPeriod", ПоказательПериода, Истина, ТекстОшибки);
			ПоказательНомера = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательНомера");
			ПоказательНомера = ?(ЗначениеЗаполнено(ПоказательНомера), ПоказательНомера, "0");
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "docNo", ПоказательНомера, Истина, ТекстОшибки);
			ПоказательДаты = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПлатежиВБюджет.ПоказательДаты");
			ПоказательДаты = ?(ЗначениеЗаполнено(ПоказательДаты), ПоказательДаты, "0");
			ЗаполнитьСвойствоXDTO(DepartmentalInfo, "docDate", ПоказательДаты, Истина, ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(DepartmentalInfo, "taxPaytKind", КодВыплат, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(PayDocRu, "DepartmentalInfo", DepartmentalInfo, , ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки
	Иначе
		ДвоичныеДанные = ДвоичныеДанныеИзXDTO(ФабрикаXDTO, PayDocRu);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	КонецЕсли;
	
	PayDocRu.Проверить();
	
КонецПроцедуры

Процедура ПрочитатьКвитанциюСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.Квитанция;
	НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
	ТикетСББОЛ = ЗначениеСвойстваXDTO(ЭД, "docId");
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТикетСББОЛ", ТикетСББОЛ);
	ДатаСозданияКвитка = ЗначениеСвойстваXDTO(ЭД, "createTime");
	Если ЗначениеЗаполнено(ДатаСозданияКвитка) Тогда
		ДатаБезПриведения = XMLЗначение(Тип("Дата"), Сред(ДатаСозданияКвитка, 1, 19));
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСозданияКвитка", ДатаБезПриведения);
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КодСостоянияДокумента", ЭД.Info.statusStateCode);
	ИдентификаторОрганизации = ЗначениеСвойстваXDTO(ЭД, "Info.orgId");
	Если НЕ ИдентификаторОрганизации = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОрганизации", ИдентификаторОрганизации);
	КонецЕсли;
		
	ИдентификаторДокумента = ЗначениеСвойстваXDTO(ЭД, "Info.docExtId");
	Если НЕ ИдентификаторДокумента = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ИдентификаторДокумента);
	КонецЕсли;
	Если НЕ ЗначениеСвойстваXDTO(ЭД, "Info.BankDate") = Неопределено Тогда
		ДатаСписанияСоСчетаПлательщика = ЗначениеСвойстваXDTO(ЭД, "Info.BankDate.chargeOffDate");
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСписанияСоСчетаПлательщика", ДатаСписанияСоСчетаПлательщика);
		ДатаПостановкиВКартотеку = ЗначениеСвойстваXDTO(ЭД, "Info.BankDate.fileDate");
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПостановкиВКартотеку", ДатаПостановкиВКартотеку);
		ДатаОтметкиБанкомПлательщика = ЗначениеСвойстваXDTO(ЭД, "Info.BankDate.signDate");
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтметкиБанкомПлательщика", ДатаОтметкиБанкомПлательщика);
		ДатаПоступленияВБанкПлательщика = ЗначениеСвойстваXDTO(ЭД, "Info.BankDate.receiptDate");
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоступленияВБанкПлательщика", ДатаПоступленияВБанкПлательщика);
		ДатаПеречисленияПлатежа = ЗначениеСвойстваXDTO(ЭД, "Info.BankDate.dpp");
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПеречисленияПлатежа", ДатаПеречисленияПлатежа);
		ДатаОтметкиБанкомПолучателя = ЗначениеСвойстваXDTO(ЭД, "Info.BankDate.recDate");
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтметкиБанкомПолучателя", ДатаОтметкиБанкомПолучателя);
	КонецЕсли;
	Если НЕ ЗначениеСвойстваXDTO(ЭД, "Info.MsgFromBank") = Неопределено Тогда
		АвторСообщения = ЗначениеСвойстваXDTO(ЭД, "Info.MsgFromBank.author");
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "АвторСообщения", АвторСообщения);
		СообщениеИзБанка = ЗначениеСвойстваXDTO(ЭД, "Info.MsgFromBank.Message");
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СообщениеИзБанка", СообщениеИзБанка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЗапросВыпискиСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.docExtId);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСозданияЗапроса", ЭД.createTime);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", ЭД.beginDate);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца", ЭД.endDate);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТипЗапроса", ЭД.stmtType);
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлатежноеНаименованиеОрганизации", ЭД.orgName);
	Для Каждого Элемент Из ЭД.Accounts.Account Цикл
		РеквизитыСчета = Новый СписокЗначений;
		РеквизитыСчета.Добавить(Элемент.bic, "БИК");
		РеквизитыСчета.Добавить(Элемент.__content, "НомерСчета");
		РеквизитыСчета.Добавить(Элемент.docNum, "НомерЗапроса");
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыСчета);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьПлатежноеПоручениеСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
		НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение;
		НовыйЭД.ОписаниеТипа = "Сбербанк";
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Код", ЭД.AccDoc.uip);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.AccDoc.AccDocNo);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.AccDoc.docDate);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидПлатежа", ЭД.AccDoc.paytKind);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСозданияДокумента", ЭД.AccDoc.docDate);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВидОперации", ЭД.AccDoc.TransKind);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДополнительнаяУслуга", ЭД.AccDoc.urgentSBRF);
		
		Если НЕ ЭД.Credit = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦелевоеПоручение", ЭД.Credit.flagTargetAssignment);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИспользоватьСобственныеСредства", ЭД.Credit.flagUseOwnMeans);
			Если НЕ ЭД.Credit.Свойства().Получить("CredConNum") = Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерКредитногоДоговора", ЭД.Credit.CredConNum);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЭД.AccDoc.Свойства().Получить("CodeVO") = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КодВидаВалютнойОперации", ЭД.AccDoc.CodeVO);
		КонецЕсли;
		
		Если НЕ ЭД.DepartmentalInfo = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлатежиВБюджет", Истина);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтатусСоставителя", ЭД.DepartmentalInfo.drawerStatus);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательКБК", ЭД.DepartmentalInfo.cbc);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКТМО", ЭД.DepartmentalInfo.okato);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательОснования", ЭД.DepartmentalInfo.paytReason);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательПериода", ЭД.DepartmentalInfo.taxPeriod);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательНомера", ЭД.DepartmentalInfo.docNo);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПоказательДаты", ЭД.DepartmentalInfo.docDate);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КодВыплат", ЭД.DepartmentalInfo.taxPaytKind);
		КонецЕсли;
		
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикИНН", ЭД.Payer.inn);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКПП", ЭД.Payer.kpp);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ЭД.AccDoc.docSum);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикНаименование", ЭД.Payer.Name);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикРасчСчет", ЭД.Payer.PersonalAcc);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикНаименованиеБанка", ЭД.Payer.Bank.Name);
		НаселенныйПунктБанкаПлательщика = "";
		Если НЕ ЭД.Payer.Bank.Свойства().Получить("BankCity")=Неопределено Тогда
			НаселенныйПунктБанкаПлательщика = ЭД.Payer.Bank.BankCity;
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаселенныйПунктБанкаПлательщика", НаселенныйПунктБанкаПлательщика);
		КонецЕсли;
		ТипНаселенногоПунктаБанкаПлательщика = "";
		Если НЕ ЭД.Payer.Bank.Свойства().Получить("SettlementType")=Неопределено Тогда
			ТипНаселенногоПунктаБанкаПлательщика = ЭД.Payer.Bank.SettlementType;
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТипНаселенногоПунктаБанкаПлательщика", ТипНаселенногоПунктаБанкаПлательщика);
		КонецЕсли;
		ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПлательщикГородБанка", "" + ТипНаселенногоПунктаБанкаПлательщика + " " + НаселенныйПунктБанкаПлательщика);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикБИКБанка", ЭД.Payer.Bank.bic);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлательщикКоррСчетБанка", ЭД.Payer.Bank.correspAcc);
		Если НЕ ЭД.Payer.Свойства().Получить("Filial") = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ФилиалБанкаПлательщика", ЭД.Payer.Filial);
		КонецЕсли;
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательНаименованиеБанка", ЭД.Payee.Bank.Name);
		НаселенныйПунктБанкаПолучателя = "";
		Если НЕ ЭД.Payee.Bank.Свойства().Получить("BankCity") = Неопределено Тогда
			НаселенныйПунктБанкаПолучателя = ЭД.Payee.Bank.BankCity;
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаселенныйПунктБанкаПолучателя", НаселенныйПунктБанкаПолучателя);
		КонецЕсли;
		ТипНаселенногоПунктаБанкаПолучателя = "";
		Если НЕ ЭД.Payee.Bank.Свойства().Получить("SettlementType") = Неопределено Тогда
			ТипНаселенногоПунктаБанкаПолучателя = ЭД.Payee.Bank.SettlementType;
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТипНаселенногоПунктаБанкаПолучателя", ТипНаселенногоПунктаБанкаПолучателя);
		КонецЕсли;
		ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, "ПолучательГородБанка", "" + ТипНаселенногоПунктаБанкаПолучателя + " " + НаселенныйПунктБанкаПолучателя);
			
		Если НЕ ЭД.Payee.Свойства().Получить("Filial") = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ФилиалБанкаПолучателя", ЭД.Payee.Filial);
		КонецЕсли;
		
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательБИКБанка", ЭД.Payee.Bank.bic);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКоррСчетБанка", ЭД.Payee.Bank.correspAcc);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательИНН", ЭД.Payee.inn);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательКПП", ЭД.Payee.kpp);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательРасчСчет", ЭД.Payee.PersonalAcc);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолучательНаименование", ЭД.Payee.Name);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Очередность", ЭД.AccDoc.priority);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", ЭД.AccDoc.purpose);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.docExtId);
		
КонецПроцедуры

Процедура ПрочитатьВыпискуСбербанкXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка;
	
	НаименованиеОрганизации = ЗначениеСвойстваXDTO(ЭД, "orgName");
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "НаименованиеОрганизации", НаименованиеОрганизации);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель", НаименованиеОрганизации);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСоставленияВыписки", ЭД.stmtDateTime);
	ДатаФормирования = XMLЗначение(Тип("Дата"), ЭД.stmtDateTime);

	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ДатаФормирования);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БИК", ЭД.bic);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель", ЭД.bic);
	ДатаПоследнейОперации = ЗначениеСвойстваXDTO(ЭД, "lastMovetDate");
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ДатаПоследнейОперации", ДатаПоследнейОперации);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "РасчСчет", ЭД.Acc);
	НачальныйОстаток = ЗначениеСвойстваXDTO(ЭД, "enterBal");
	НачальныйОстаток = ?(НачальныйОстаток = Неопределено, НачальныйОстаток, Число(НачальныйОстаток));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НачальныйОстаток", НачальныйОстаток);
	КонечныйОстаток = ЗначениеСвойстваXDTO(ЭД, "outBal");
	КонечныйОстаток = ?(КонечныйОстаток = Неопределено, КонечныйОстаток, Число(КонечныйОстаток));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КонечныйОстаток", КонечныйОстаток);
	ДатаНачала = XMLЗначение(Тип("Дата"), ЭД.beginDate);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачала", ДатаНачала);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаНачалаСтрокой", ЭД.beginDate);
	ДатаКонца = XMLЗначение(Тип("Дата"), ЭД.endDate);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонца", ДатаКонца);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаКонцаСтрокой", ЭД.endDate);
	ВсегоСписано = ?(ЭД.debetSum = Неопределено, ЭД.debetSum, Число(ЭД.debetSum));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВсегоСписано", ВсегоСписано);
	ВсегоПоступило = ?(ЭД.debetSum = Неопределено, ЭД.creditSum, Число(ЭД.creditSum));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВсегоПоступило", ВсегоПоступило);
	ДатаПредыдущейОперации = ЗначениеСвойстваXDTO(ЭД, "DatePLast");
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ДатаПредыдущейОперации", ДатаПредыдущейОперации);
	КурсНаНачалоПериода = ЗначениеСвойстваXDTO(ЭД, "rateIn");
	КурсНаНачалоПериода = ?(КурсНаНачалоПериода = Неопределено, КурсНаНачалоПериода, Число(КурсНаНачалоПериода));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КурсНаНачалоПериода", КурсНаНачалоПериода);
	КурсНаКонецПериода = ЗначениеСвойстваXDTO(ЭД, "rateOut");
	КурсНаКонецПериода = ?(КурсНаКонецПериода = Неопределено, КурсНаКонецПериода, Число(КурсНаКонецПериода));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КурсНаКонецПериода", КурсНаКонецПериода);
	ВходящийОстатокВНациональнойВалюте = ЗначениеСвойстваXDTO(ЭД, "enterBalNat");
	ВходящийОстатокВНациональнойВалюте = ?(ВходящийОстатокВНациональнойВалюте = Неопределено,
		ВходящийОстатокВНациональнойВалюте, Число(ВходящийОстатокВНациональнойВалюте));
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ВходящийОстатокВНациональнойВалюте", ВходящийОстатокВНациональнойВалюте);
	ИсходящийОстатокВНациональнойВалюте = ЗначениеСвойстваXDTO(ЭД, "outBalNat");
	ИсходящийОстатокВНациональнойВалюте = ?(ИсходящийОстатокВНациональнойВалюте = Неопределено,
		ИсходящийОстатокВНациональнойВалюте, Число(ИсходящийОстатокВНациональнойВалюте));
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИсходящийОстатокВНациональнойВалюте", ИсходящийОстатокВНациональнойВалюте);
	ПлановыйИсходящийОстаток = ЗначениеСвойстваXDTO(ЭД, "planOutBal");
	ПлановыйИсходящийОстаток = ?(ПлановыйИсходящийОстаток = Неопределено, ПлановыйИсходящийОстаток,
		Число(ПлановыйИсходящийОстаток));
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлановыйИсходящийОстаток", ПлановыйИсходящийОстаток);
	ПлановыйИсходящийОстатокВНациональнойВалюте = ЗначениеСвойстваXDTO(ЭД, "planOutBalNat");
	ПлановыйИсходящийОстатокВНациональнойВалюте = ?(ПлановыйИсходящийОстатокВНациональнойВалюте = Неопределено,
		ПлановыйИсходящийОстатокВНациональнойВалюте, Число(ПлановыйИсходящийОстатокВНациональнойВалюте));
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ПлановыйИсходящийОстатокВНациональнойВалюте", ПлановыйИсходящийОстатокВНациональнойВалюте);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТипЗапросаВыписки", ЭД.stmtType);
	Номер = ЗначениеСвойстваXDTO(ЭД, "docNum");
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", Номер);
	УчетнаяЗапись = ЗначениеСвойстваXDTO(ЭД, "accountName");
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "УчетнаяЗапись", УчетнаяЗапись);
	ДебетВНациональнойВалюте = ЗначениеСвойстваXDTO(ЭД, "debetSumNat");
	ДебетВНациональнойВалюте = ?(ДебетВНациональнойВалюте = Неопределено, Неопределено, Число(ДебетВНациональнойВалюте));
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ДебетВНациональнойВалюте", ДебетВНациональнойВалюте);
	КредитВНациональнойВалюте = ЗначениеСвойстваXDTO(ЭД, "creditSumNat");
	КредитВНациональнойВалюте = ?(КредитВНациональнойВалюте = Неопределено, Неопределено, Число(КредитВНациональнойВалюте));
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "КредитВНациональнойВалюте", КредитВНациональнойВалюте);
	Исполнитель = ЗначениеСвойстваXDTO(ЭД, "author");
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Исполнитель", Исполнитель);
	ДопИнформация = ЗначениеСвойстваXDTO(ЭД, "docComment");
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДопИнформация", ДопИнформация);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.docId);
	
	СписокТЧ = Новый СписокЗначений;
	ПараметрыСчета = Новый Структура;
	ПараметрыСчета.Вставить("РасчСчет", ЭД.Acc);
	НачальныйОстаток = ?(ЭД.enterBal = Неопределено, ЭД.enterBal, Число(ЭД.enterBal));
	ПараметрыСчета.Вставить("НачальныйОстаток", НачальныйОстаток);
	ВсегоПоступило = ?(ЭД.creditSum = Неопределено, ЭД.creditSum, Число(ЭД.creditSum));
	ПараметрыСчета.Вставить("ВсегоПоступило", ВсегоПоступило);
	ВсегоСписано = ?(ЭД.debetSum = Неопределено, ЭД.debetSum, Число(ЭД.debetSum));
	ПараметрыСчета.Вставить("ВсегоСписано", ВсегоСписано);
	КонечныйОстаток = ЗначениеСвойстваXDTO(ЭД, "outBal");
	КонечныйОстаток = ?(КонечныйОстаток = Неопределено, КонечныйОстаток, Число(КонечныйОстаток));
	ПараметрыСчета.Вставить("КонечныйОстаток", КонечныйОстаток);
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(
		ДеревоРазбора, "БанковскийСчет");
	РасчетныйСчет = ЭлектронноеВзаимодействие.НайтиСсылку(
		"БанковскиеСчетаОрганизаций", ЭД.Acc);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(
		НайденныйТипВДереве, ЭД.Acc, Неопределено, РасчетныйСчет, ПараметрыСчета, ДеревоРазбора, Ошибка);
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "БанковскийСчет");
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "БанковскиеСчетаОрганизаций", СписокТЧ);
	
	Если НЕ ЗначениеСвойстваXDTO(ЭД, "Docs") = Неопределено Тогда
		Операции = ЗначениеСвойстваXDTO(ЭД, "Docs.TransInfo");
		Если ТипЗнч(Операции) = Тип("ОбъектXDTO") Тогда
			ПрочитатьОперациюВыпискиСбербанк(Операции, НовыйЭД);
		Иначе
			Для Каждого Операция Из Операции Цикл
				ПрочитатьОперациюВыпискиСбербанк(Операция, НовыйЭД);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеСвойстваXDTO(ЭД, "InfoForStamp") = Неопределено Тогда
		
		ПараметрыШтампа = Новый Структура;
		ПараметрыШтампа.Вставить("БИК", ЭД.bic);
		НаименованиеБанка = ЗначениеСвойстваXDTO(ЭД, "InfoForStamp.BankName");
		ПараметрыШтампа.Вставить("НаименованиеБанка", НаименованиеБанка);
		ГородБанка = ЗначениеСвойстваXDTO(ЭД, "InfoForStamp.BranchName");
		ПараметрыШтампа.Вставить("ГородБанка", ГородБанка);
		Офис = ЗначениеСвойстваXDTO(ЭД, "InfoForStamp.SubBranchName");
		ПараметрыШтампа.Вставить("Офис", Офис);
		Филиал = ЗначениеСвойстваXDTO(ЭД, "InfoForStamp.SubBranchNum");
		ПараметрыШтампа.Вставить("ОтделениеБанка", Филиал);
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(
			ДеревоРазбора, "Штамп");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(
			НайденныйТипВДереве, "Штамп", Неопределено, Неопределено, ПараметрыШтампа, ДеревоРазбора, Ошибка);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Штамп", НайденнаяСтрока.ИндексСтроки);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПрочитатьОперациюВыпискиСбербанк(Документ, НовыйЭД)
	
	РеквизитыДокумента = Новый СписокЗначений;
	ДатаСписания = ЗначениеСвойстваXDTO(Документ, "chargeOffDate");
	РеквизитыДокумента.Добавить(ДатаСписания, "ДатаСписания");
	ДатаПеречисления = ЗначениеСвойстваXDTO(Документ, "dpp");
	РеквизитыДокумента.Добавить(ДатаПеречисления, "ДатаПеречисления");
	ДатаПостановкиВКартотеку = ЗначениеСвойстваXDTO(Документ, "fileDate");
	РеквизитыДокумента.Добавить(ДатаПостановкиВКартотеку, "ДатаПостановкиВКартотеку");
	ДатаОтметкиБанкаПолучателя = ЗначениеСвойстваXDTO(Документ, "recDate");
	РеквизитыДокумента.Добавить(ДатаОтметкиБанкаПолучателя, "ДатаОтметкиБанкаПолучателя");
	ДатаПоступленияВБанкПлательщика = ЗначениеСвойстваXDTO(Документ, "receiptDate");
	РеквизитыДокумента.Добавить(ДатаПоступленияВБанкПлательщика, "ДатаПоступленияВБанкПлательщика");
	ДатаОтметкиБанкомПлательщика = ЗначениеСвойстваXDTO(Документ, "signDate");
	РеквизитыДокумента.Добавить(ДатаОтметкиБанкомПлательщика, "ДатаОтметкиБанкомПлательщика");
	НомерДокументаБанка = ЗначениеСвойстваXDTO(Документ, "bankNumDoc");
	РеквизитыДокумента.Добавить(НомерДокументаБанка, "НомерДокументаБанка");
	КодПодразделения = ЗначениеСвойстваXDTO(Документ, "branchCode");
	РеквизитыДокумента.Добавить(КодПодразделения, "КодПодразделения");
	ДатаСписано = XMLЗначение(Тип("Дата"), Документ.carryDate);
	РеквизитыДокумента.Добавить(ДатаСписано, "ДатаСписано");
	ДатаПроводки = XMLЗначение(Тип("Дата"), Документ.carryDate);
	ПлатежИсходящий = XMLЗначение(Тип("Булево"), Документ.dc);
	Если ПлатежИсходящий Тогда
		РеквизитыДокумента.Добавить(ДатаПроводки, "ДатаСписано");
	Иначе
		РеквизитыДокумента.Добавить(ДатаПроводки, "ДатаПоступило");
	КонецЕсли;
	РеквизитыДокумента.Добавить(Документ.carryDate, "ДатаПроводки");
	РеквизитыДокумента.Добавить(ПлатежИсходящий, "ПризнакПриложения");
	РеквизитыДокумента.Добавить(ПлатежИсходящий, "ПлатежИсходящий");
	Код = ЗначениеСвойстваXDTO(Документ, "uip");
	РеквизитыДокумента.Добавить(Код, "Код");
	ВалютаПлатежа = ЗначениеСвойстваXDTO(Документ, "docCurr");
	РеквизитыДокумента.Добавить(ВалютаПлатежа, "ВалютаПлатежа");
	ДатаДокумента = XMLЗначение(Тип("Дата"), Сред(Документ.docDate, 1, 19)); // без часового пояса
	РеквизитыДокумента.Добавить(ДатаДокумента, "Дата");
	РеквизитыДокумента.Добавить(Документ.docNum, "Номер");
	Сумма = ?(Документ.docSum = Неопределено, Документ.docSum, Число(Документ.docSum));
	РеквизитыДокумента.Добавить(Сумма, "Сумма");
	СуммаДокументаВНациональнойВалюте = ЗначениеСвойстваXDTO(Документ, "docSumNat");
	СуммаДокументаВНациональнойВалюте = ?(СуммаДокументаВНациональнойВалюте = Неопределено,
		СуммаДокументаВНациональнойВалюте, Число(СуммаДокументаВНациональнойВалюте));
	РеквизитыДокумента.Добавить(СуммаДокументаВНациональнойВалюте, "СуммаДокументаВНациональнойВалюте");
	Очередность = ЗначениеСвойстваXDTO(Документ, "paymentOrder");
	РеквизитыДокумента.Добавить(Очередность, "Очередность");
	ВидПлатежа = ЗначениеСвойстваXDTO(Документ, "paytKind");
	РеквизитыДокумента.Добавить(ВидПлатежа, "ВидПлатежа");
	НазначениеПлатежа = ЗначениеСвойстваXDTO(Документ, "purpose");
	РеквизитыДокумента.Добавить(НазначениеПлатежа, "НазначениеПлатежа");
	РеквизитыДокумента.Добавить(Документ.transKind, "ВидОплаты");
	ДопУслуга = ЗначениеСвойстваXDTO(Документ, "urgentSBRF");
	РеквизитыДокумента.Добавить(ДопУслуга, "ДопУслуга");
	ИдентификаторДокумента = ЗначениеСвойстваXDTO(Документ, "docId");
	РеквизитыДокумента.Добавить(ИдентификаторДокумента, "ИдентификаторДокумента");
	РеквизитыДокумента.Добавить(ИдентификаторДокумента, "ИдПлатежа");
	ПолучательНаименование = ЗначениеСвойстваXDTO(Документ, "payeeName");
	РеквизитыДокумента.Добавить(ПолучательНаименование, "ПолучательНаименование");
	РеквизитыДокумента.Добавить(Документ.payeeAcc, "ПолучательСчет");
	ПолучательИНН = ЗначениеСвойстваXDTO(Документ, "payeeINN");
	РеквизитыДокумента.Добавить(ПолучательИНН, "ПолучательИНН");
	ПолучательБИКБанка = ЗначениеСвойстваXDTO(Документ, "payeeBankBic");
	РеквизитыДокумента.Добавить(ПолучательБИКБанка, "ПолучательБИКБанка");
	СчетБанкаПолучателя = ЗначениеСвойстваXDTO(Документ, "payeeBankCorrAcc");
	РеквизитыДокумента.Добавить(СчетБанкаПолучателя, "СчетБанкаПолучателя");
	ПолучательНаименованиеБанка = ЗначениеСвойстваXDTO(Документ, "payeeBankName");
	РеквизитыДокумента.Добавить(ПолучательНаименованиеБанка, "ПолучательНаименованиеБанка");
	ПлательщикНаименование = ЗначениеСвойстваXDTO(Документ, "payerName");
	РеквизитыДокумента.Добавить(ПлательщикНаименование, "ПлательщикНаименование");
	РеквизитыДокумента.Добавить(Документ.payerAcc, "ПлательщикСчет");
	ПлательщикИНН = ЗначениеСвойстваXDTO(Документ, "payerINN");
	РеквизитыДокумента.Добавить(ПлательщикИНН, "ПлательщикИНН");
	ПлательщикБИКБанка = ЗначениеСвойстваXDTO(Документ, "payerBankBic");
	РеквизитыДокумента.Добавить(ПлательщикБИКБанка, "ПлательщикБИКБанка");
	СчетБанкаПлательщика = ЗначениеСвойстваXDTO(Документ, "payerBankCorrAcc");
	РеквизитыДокумента.Добавить(СчетБанкаПлательщика, "СчетБанкаПлательщика");
	ПлательщикНаименованиеБанка = ЗначениеСвойстваXDTO(Документ, "payerBankName");
	РеквизитыДокумента.Добавить(ПлательщикНаименованиеБанка, "ПлательщикНаименованиеБанка");
	Переоценка = ЗначениеСвойстваXDTO(Документ, "s_TI");
	РеквизитыДокумента.Добавить(Переоценка, "Переоценка");
	ДополнительнаяИнформация = ЗначениеСвойстваXDTO(Документ, "Info");
	РеквизитыДокумента.Добавить(ДополнительнаяИнформация, "ДополнительнаяИнформация");

	Если Не ЗначениеСвойстваXDTO(Документ, "DepartmentalInfo") = Неопределено Тогда
		РеквизитыДокумента.Добавить(Истина, "ЭтоПлатежВБюджет");
		ПоказательКБК = ЗначениеСвойстваXDTO(Документ, "DepartmentalInfo.cbc");
		РеквизитыДокумента.Добавить(ПоказательКБК, "ПоказательКБК");
		ПоказательДаты = ЗначениеСвойстваXDTO(Документ, "DepartmentalInfo.docDate");
		РеквизитыДокумента.Добавить(ПоказательДаты, "ПоказательДаты");
		ПоказательНомера = ЗначениеСвойстваXDTO(Документ, "DepartmentalInfo.docNo");
		РеквизитыДокумента.Добавить(ПоказательНомера, "ПоказательНомера");
		СтатусСоставителя = ЗначениеСвойстваXDTO(
			Документ, "DepartmentalInfo.drawerStatus");
		РеквизитыДокумента.Добавить(СтатусСоставителя, "СтатусСоставителя");
		ПлательщикКПП = ЗначениеСвойстваXDTO(Документ, "DepartmentalInfo.kpp102");
		РеквизитыДокумента.Добавить(ПлательщикКПП, "ПлательщикКПП");
		ПолучательКПП = ЗначениеСвойстваXDTO(Документ, "DepartmentalInfo.kpp103");
		РеквизитыДокумента.Добавить(ПолучательКПП, "ПолучательКПП");
		КодОКАТО = ЗначениеСвойстваXDTO(Документ, "DepartmentalInfo.okato");
		РеквизитыДокумента.Добавить(КодОКАТО, "КодОКАТО");
		ПоказательОснования = ЗначениеСвойстваXDTO(
			Документ, "DepartmentalInfo.paytReason");
		РеквизитыДокумента.Добавить(ПоказательОснования, "ПоказательОснования");
		ПоказательТип = ЗначениеСвойстваXDTO(Документ, "DepartmentalInfo.taxPaytKind");
		РеквизитыДокумента.Добавить(ПоказательТип, "ПоказательТип");
		ПоказательПериода = ЗначениеСвойстваXDTO(Документ, "DepartmentalInfo.taxPeriod");
		РеквизитыДокумента.Добавить(ПоказательПериода, "ПоказательПериода");
	Иначе
		РеквизитыДокумента.Добавить(Ложь, "ЭтоПлатежВБюджет");
	КонецЕсли;
	
	Если Не ЗначениеСвойстваXDTO(Документ, "DiffDoc") = Неопределено Тогда
		РеквизитыДокумента.Добавить(Истина, "ЭтоКартотека");
		
		ДатаДокументаКартотека = ЗначениеСвойстваXDTO(Документ, "DiffDoc.docDateCard");
		Если НЕ ДатаДокументаКартотека = Неопределено Тогда
			РеквизитыДокумента.Добавить(XMLЗначение(Тип("Дата"), ДатаДокументаКартотека), "ДатаОтсылкиДок");
		КонецЕсли;
		НомерДокументаКартотека = ЗначениеСвойстваXDTO(Документ, "DiffDoc.docNumberCard");
		РеквизитыДокумента.Добавить(НомерДокументаКартотека, "НомерДокументаКартотека");
		ШифрДокументаКартотека = ЗначениеСвойстваXDTO(Документ, "DiffDoc.docShifr");
		РеквизитыДокумента.Добавить(ШифрДокументаКартотека, "ШифрДокументаКартотека");
		СрокАкцепта = ЗначениеСвойстваXDTO(Документ, "DiffDoc.letterOfCreditAcceptDate");
		РеквизитыДокумента.Добавить(СрокАкцепта, "СрокАкцепта");
		ДополнУсловия = ЗначениеСвойстваXDTO(Документ, "DiffDoc.letterOfCreditAddCond");
		РеквизитыДокумента.Добавить(ДополнУсловия, "ДополнУсловия");
		ПлатежПоПредст = ЗначениеСвойстваXDTO(
			Документ, "DiffDoc.letterOfCreditDemandDocs");
		РеквизитыДокумента.Добавить(ПлатежПоПредст, "ПлатежПоПредст");
		НомерСчетаПоставщика = ЗначениеСвойстваXDTO(
			Документ, "DiffDoc.letterOfCreditPayAcc");
		РеквизитыДокумента.Добавить(НомерСчетаПоставщика, "НомерСчетаПоставщика");
		Условие1 = ЗначениеСвойстваXDTO(Документ, "DiffDoc.letterOfCreditPaymCond");
		РеквизитыДокумента.Добавить(Условие1, "Условие1");
		СрокПлатежа = ЗначениеСвойстваXDTO(Документ, "DiffDoc.letterOfCreditPeriodVal");
		РеквизитыДокумента.Добавить(СрокПлатежа, "СрокПлатежа");
		ВидАккредитива = ЗначениеСвойстваXDTO(Документ, "DiffDoc.docDateCard");
		РеквизитыДокумента.Добавить(ВидАккредитива, "ВидАккредитива");
		НомерПлатежа = ЗначениеСвойстваXDTO(Документ, "DiffDoc.NumPaymentCard");
		РеквизитыДокумента.Добавить(Документ.DiffDoc.NumPaymentCard, "НомерПлатежа");
		СодержаниеОперации = ЗначениеСвойстваXDTO(Документ, "DiffDoc.OperContent");
		РеквизитыДокумента.Добавить(СодержаниеОперации, "СодержаниеОперации");
		УсловиеОплаты = ЗначениеСвойстваXDTO(Документ, "DiffDoc.PayingCondition");
		РеквизитыДокумента.Добавить(УсловиеОплаты, "УсловиеОплаты");
		СуммаОстаткаПлатежа = ЗначениеСвойстваXDTO(Документ, "DiffDoc.SumRestCard");
		СуммаОстаткаПлатежа = ?(СуммаОстаткаПлатежа = Неопределено, СуммаОстаткаПлатежа, Число(СуммаОстаткаПлатежа));
		РеквизитыДокумента.Добавить(СуммаОстаткаПлатежа, "СуммаОстаткаПлатежа");
	Иначе
		РеквизитыДокумента.Добавить(Ложь, "ЭтоКартотека");
	КонецЕсли;
	
	Если Не ЗначениеСвойстваXDTO(Документ, "Cur") = Неопределено Тогда
		
		МассивРеквизитов = СлужебныеРеквизитыВыпискиСбербанк();
		Для Каждого Реквизит Из МассивРеквизитов Цикл
			Значение = ЗначениеСвойстваXDTO(Документ, "Cur." + Реквизит);
			РеквизитыДокумента.Добавить(Значение, Реквизит);
		КонецЦикла;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", РеквизитыДокумента);
	
КонецПроцедуры

Процедура СохранитьШтампыБанка(НастройкаОбмена, ВыпискаБанка)

	ДвоичныеДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(ВыпискаБанка);
	
	СтруктураРазбораФайла = СформироватьДеревоРазбора(Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка, ДвоичныеДанныеЭД);
	
	Если СтруктураРазбораФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоРазбора = СтруктураРазбораФайла.ДеревоРазбора;
	СтрокаОбъекта = СтруктураРазбораФайла.СтрокаОбъекта;
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		ДатаСписано = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "ДатаСписано");
		ШтампБанкаСтатус = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "ШтампБанкаСтатус");
		ИдПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "ИдПлатежа");
		Если ЗначениеЗаполнено(ДатаСписано) И ЗначениеЗаполнено(ШтампБанкаСтатус) И ЗначениеЗаполнено(ИдПлатежа) Тогда
			ПлатежныйДокумент = СообщениеОбменаПоИдентификатору(НастройкаОбмена, ИдПлатежа);
			Если ЗначениеЗаполнено(ПлатежныйДокумент) Тогда
				ШтампБанкаНаименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "ШтампБанкаНаименование");
				ШтампБанкаОтделение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "ШтампБанкаОтделение");
				ШтампБанкаБИК = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "ШтампБанкаБИК");
				ДанныеШтампа = Новый Структура();
				ДанныеШтампа.Вставить("НаименованиеБанка", ШтампБанкаНаименование);
				ДанныеШтампа.Вставить("Отделение", ШтампБанкаОтделение);
				ДанныеШтампа.Вставить("БИК", ШтампБанкаБИК);
				ДанныеШтампа.Вставить("Статус", ШтампБанкаСтатус);
				ДанныеШтампа.Вставить("ДатаОперации", ДатаСписано);
				ДополнительныеДанные = Новый Структура("ДанныеШтампа, ДатаСписания", ДанныеШтампа, ДатаСписано);
				СтруктураИзменения = Новый Структура("ДополнительныеДанные", ДополнительныеДанные);
				ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(ПлатежныйДокумент, СтруктураИзменения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

Функция СообщенияОбменаТребующиеSMSПодтверждения(МассивСообщений)
	
	МассивВозврата = Новый Массив;
	
	ЗначенияРеквизита = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСообщений, "Статус, ВидЭД");
	
	Для каждого ЭлементКоллекции Из ЗначенияРеквизита Цикл
		
		Если ЭлементКоллекции.Значение.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
			И ЭлементКоллекции.Значение.Статус = Перечисления.СтатусыОбменСБанками.НеПодтвержден Тогда
			МассивВозврата.Добавить(ЭлементКоллекции.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Формирует двоичные данные запроса выписки Сбербанка
//
// Параметры:
//  НастройкаОбмена		 - СправочникСсылка.НастройкиОбменСБанками - текущая настройка с банком.
//  ДатаЗапроса			 - Дата - дата запроса выписки.
//  НомерСчета			 - Строка - номер счета
//  ИдентификаторЗапроса - Строка - (возвращаемое значение) номер банковского счета.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные сформированного запроса.
//
Функция ДанныеЗапросаВыпискиСбербанк(НастройкаОбмена, ДатаЗапроса, НомерСчета, ИдентификаторЗапроса)

	ПространствоИмен = "http://bssys.com/upg/request";
	
	ТекстОшибки = "";
	ЕстьОшибка  = Ложь;
	
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	Операция = НСтр("ru = 'Формирование запроса выписки'");
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена, "Организация, Банк");
	
	Организация = РеквизитыНастройкиОбмена.Организация;
	Банк = РеквизитыНастройкиОбмена.Банк;
	
	StmtReqType = ОбъектТипаCML(ФабрикаXDTO, "StmtReqType", ПространствоИмен);
	ЗаполнитьСвойствоXDTO(StmtReqType, "docExtId", Строка(ИдентификаторЗапроса), Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(StmtReqType, "createTime", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(StmtReqType, "beginDate", НачалоДня(ДатаЗапроса), Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(StmtReqType, "endDate", КонецДня(ДатаЗапроса), Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(StmtReqType, "stmtType", 101, Истина, ТекстОшибки);
	
	МенеджерЗаписи = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.НомерЗапроса = МенеджерЗаписи.НомерЗапроса + 1;
	МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
	МенеджерЗаписи.ДатаСинхронизации = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
	РеквизитСокращенноеНаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"СокращенноеНаименованиеОрганизации");
	Если НЕ ЗначениеЗаполнено(РеквизитСокращенноеНаименованиеОрганизации) Тогда
		РеквизитСокращенноеНаименованиеОрганизации = "Наименование";
	КонецЕсли;
	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, РеквизитСокращенноеНаименованиеОрганизации);
	ЗаполнитьСвойствоXDTO(StmtReqType, "orgName", Наименование, , ТекстОшибки);
	
	Accounts = ОбъектТипаCML(ФабрикаXDTO, "StmtReqType.Accounts", ПространствоИмен);
	
	БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	
	Acc = ОбъектТипаCML(ФабрикаXDTO, "Acc", ПространствоИмен);
	ЗаполнитьСвойствоXDTO(Acc, "__content", НомерСчета, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Acc, "bic", БИК,  Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Acc, "docNum", МенеджерЗаписи.НомерЗапроса, , ТекстОшибки);
	Accounts.Account.Добавить(Acc);
	
	ЗаполнитьСвойствоXDTO(StmtReqType, "Accounts", Accounts, Истина, ТекстОшибки);
	
	StmtReqType.Проверить();
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'При формировании электронного документа произошла ошибка.
									|%1.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ТекстОшибки);
		ОбработатьОшибку(Операция, ТекстСообщения, , НастройкаОбмена);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ДвоичныеДанныеЗапросаВыписки = ДвоичныеДанныеИзXDTO(ФабрикаXDTO, StmtReqType);
	
	Возврат ДвоичныеДанныеЗапросаВыписки;

КонецФункции

Процедура ПрочитатьПоручениеНаПереводВалютыСбербанк(ЭД, ДеревоРазбора, НовыйЭД)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.docExtId);
	
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента("ОбменСБанками.ПоручениеНаПереводВалюты");
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Дата", ЭД.DocData.docDate);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Номер", ЭД.DocData.docNum);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.НаименованиеМеждународное", ЭД.Payer_50.Name);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.РасчСчет", ЭД.Payer_50.AccDoc.accNum);
	ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Страна.ISOКод", ЭД.Payer_50.Country.iso2);
	ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Город", ЭД.Payer_50.Place);
	ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Адрес", ЭД.Payer_50.Address);
		
	Если ЭД.BankPayer_52 <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.Банк.НаименованиеМеждународное", ЭД.BankPayer_52.Name);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.SWIFT", ЭД.BankPayer_52.BIC);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.Адрес", ЭД.BankPayer_52.Address);
	КонецЕсли;
	
	ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПолучателя.НаименованиеМеждународное", ЭД.Beneficiar_59.Name);
	Если ЭД.Beneficiar_59.Country <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Страна.ISOКод", ЭД.Beneficiar_59.Country.iso2);
	КонецЕсли;
	ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Город", ЭД.Beneficiar_59.Place);
	ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Адрес", ЭД.Beneficiar_59.Address);
	Если ЭД.Beneficiar_59.State <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Индекс", ЭД.Beneficiar_59.State.code);
	КонецЕсли;
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.РасчСчет", ЭД.Beneficiar_59.AccBeneficiar);
	
	ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПолучателя.Банк.НаименованиеМеждународное", ЭД.BankBeneficiar_57.Name);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.SWIFT", ЭД.BankBeneficiar_57.BIC);
	Если ЭД.BankBeneficiar_57.Country <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.Страна.ISOКод", ЭД.BankBeneficiar_57.Country.iso2);
	КонецЕсли;
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.Адрес", ЭД.BankBeneficiar_57.Address);
	Если ЭД.BankBeneficiar_57.CliringCode <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.БИК", ЭД.BankBeneficiar_57.CliringCode.code);
	КонецЕсли;
	
	Если ЭД.ImediaBank_56 <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.SWIFT", ЭД.ImediaBank_56.BIC);
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.НаименованиеМеждународное", ЭД.ImediaBank_56.Name);
	КонецЕсли;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаПеревода.ISOКодВалюты", ЭД.DocSum_33B.DocSumTransfer.currIsoCode);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаПеревода.Сумма", ЭД.DocSum_33B.DocSumTransfer.docSum);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.НазначениеПлатежа", ЭД.PaymentDetails_70);

	Если ЭД.VoSumInfo <> Неопределено И ЭД.VoSumInfo.VoInfo.Количество() Тогда
		ТаблицаКодовВидовОпераций = Новый ТаблицаЗначений;
		ТаблицаКодовВидовОпераций.Колонки.Добавить("КодВидаВалютнойОперации");
		ТаблицаКодовВидовОпераций.Колонки.Добавить("Сумма");
		ТаблицаКодовВидовОпераций.Колонки.Добавить("ISOКодВалюты");
		ТаблицаКодовВидовОпераций.Колонки.Добавить("НомерПаспортаСделки");
		Для Каждого КодВидаОперации Из ЭД.VoSumInfo.VoInfo Цикл
			СтрокаТаблицы = ТаблицаКодовВидовОпераций.Добавить();
			СтрокаТаблицы.КодВидаВалютнойОперации = КодВидаОперации.Vo;
			СтрокаТаблицы.Сумма = КодВидаОперации.Sum.docSum;
			СтрокаТаблицы.ISOКодВалюты = КодВидаОперации.Sum.currIsoCode;
			СтрокаТаблицы.НомерПаспортаСделки = КодВидаОперации.PsNum;
		КонецЦикла;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
			ДеревоДанных, ТаблицаКодовВидовОпераций, "КодыВидовВалютныхОпераций");
	КонецЕсли;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ТипКомиссии", ЭД.Charge_71A.chargesParty);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДанных", ДеревоДанных);
	
КонецПроцедуры

Процедура ПрочитатьПоручениеНаПокупкуВалютыСбербанк(ЭД, ДеревоРазбора, НовыйЭД)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.docExtId);
	
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента("ОбменСБанками.ПоручениеНаПокупкуВалюты");
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Дата", ЭД.DocData.docDate);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Номер", ЭД.DocData.docNum);
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.Наименование", ЭД.DocData.OrgData.orgName);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ИНН", ЭД.DocData.OrgData.inn);
	
	Если ЭД.DocData.AuthPers <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.ФИО", ЭД.DocData.AuthPers.Name);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.Телефон", ЭД.DocData.AuthPers.Telfax);
	КонецЕсли;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СуммаПокупки.Сумма", ЭД.Trans.AmountTransf.SumBuy.docSum);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СуммаПокупки.ISOКодВалюты", ЭД.Trans.AmountTransf.SumBuy.currIsoCode);
	
	Если ЭД.Trans.TermBuy <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "УсловияСделки", ЭД.Trans.TermBuy.DealType);
	КонецЕсли;
		
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыЗачисления.НомерСчета", ЭД.Trans.AccountNumTransf.accNum);
	ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыЗачисления.Банк.Наименование", ЭД.Trans.AccountNumTransf.Bank.Name);
		
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДанных", ДеревоДанных);
	
КонецПроцедуры

Процедура ПрочитатьПоручениеНаПродажуВалютыСбербанк(ЭД, ДеревоРазбора, НовыйЭД)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.docExtId);
	
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента("ОбменСБанками.ПоручениеНаПродажуВалюты");
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Дата", ЭД.DocData.docDate);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Номер", ЭД.DocData.docNum);
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.Наименование", ЭД.DocData.OrgData.orgName);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ИНН", ЭД.DocData.OrgData.inn);
	
	Если ЭД.DocData.AuthPers <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.ФИО", ЭД.DocData.AuthPers.Name);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.Телефон", ЭД.DocData.AuthPers.Telfax);
	КонецЕсли;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СуммаПродажи.Сумма", ЭД.Trans.SumSell.docSum);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СуммаПродажи.ISOКодВалюты", ЭД.Trans.SumSell.currIsoCode);
	
	Если ЭД.Trans.TermSell <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "УсловияСделки", ЭД.Trans.TermSell.DealType);
	КонецЕсли;
		
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыСписания.НомерСчета", ЭД.Trans.AccountSell.accNum);
	ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыСписания.Банк.Наименование", ЭД.Trans.AccountSell.Bank.Name);
		
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДанных", ДеревоДанных);
	
КонецПроцедуры

Процедура ПрочитатьРаспоряжениеНаОбязательнуюПродажуВалютыСбербанк(ЭД, ДеревоРазбора, НовыйЭД)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.docExtId);
	
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента("ОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты");
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Дата", ЭД.DocData.docDate);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Номер", ЭД.DocData.docNum);
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.Наименование", ЭД.DocData.OrgData.orgName);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ИНН", ЭД.DocData.OrgData.inn);
	
	Если ЭД.DocData.AuthPers <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.ФИО", ЭД.DocData.AuthPers.Name);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.Телефон", ЭД.DocData.AuthPers.Telfax);
	КонецЕсли;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.Сумма", ЭД.Advice.Doc.DocSum.docSum);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.ISOКодВалюты", ЭД.Advice.Doc.DocSum.currIsoCode);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.НомерДокумента", ЭД.Advice.Doc.DocData.docNum);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.ДатаДокумента", ЭД.Advice.Doc.DocData.docDate);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.НаименованиеБанка", ЭД.Advice.Doc.DocData.bankName);
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТранзитныйСчет.НомерСчета", ЭД.AccDoc.AccNum);
	
	Если ЭД.Trans <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.НомерСчета", ЭД.Trans.AccTrans.accNum);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.НаименованиеБанка", ЭД.Trans.AccTrans.Bank.Name);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.SWIFT", ЭД.Trans.AccTrans.Bank.BankSWIFT);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.СуммаЗачисления.Сумма", ЭД.Trans.Sum.docSum);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.СуммаЗачисления.ISOКодВалюты", ЭД.Trans.Sum.currIsoCode);
	КонецЕсли;
	
	Если ЭД.Sell <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.Сумма", ЭД.Sell.Sum.docSum);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.ISOКодВалюты", ЭД.Sell.Sum.currIsoCode);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.УсловиеСделки", ЭД.Sell.DealType.DealType);
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "НеобязательнаяПродажа.СчетЗачисленияОтПродажи.НомерСчета", ЭД.Sell.Acc.accNum);
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "НеобязательнаяПродажа.СчетЗачисленияОтПродажи.Банк.Наименование", ЭД.Sell.Acc.Bank.Name);
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "НеобязательнаяПродажа.СчетЗачисленияОтПродажи.Банк.БИК", ЭД.Sell.Acc.Bank.bic);
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "НеобязательнаяПродажа.СчетЗачисленияОтПродажи.Банк.КоррСчет", ЭД.Sell.Acc.Bank.correspAcc);
	КонецЕсли;
		
	Если ЭД.Commis <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "КомиссионноеВознаграждение.Счет.НомерСчета", ЭД.Commis.ComAcc.accNum);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДанных", ДеревоДанных);
	
КонецПроцедуры

Процедура СформироватьПоручениеНаПереводВалютыСбербанк(СсылкаНаДокумент, ДеревоДанных, АдресФайлаВоВременномХранилище)
		
	ПространствоИмен = "http://bssys.com/upg/request";
	ТекстОшибки = "";
	
	PayDocCur = ОбъектТипаCML(ФабрикаXDTO, "PayDocCur", ПространствоИмен);
		ИДДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдДокумента");
		ЗаполнитьСвойствоXDTO(PayDocCur, "docExtId", ИДДокумента, Истина, ТекстОшибки);
		ОбщиеРеквизитыПлатежногоДокумента = ОбъектТипаCML(ФабрикаXDTO, "PayDocCurDocData", ПространствоИмен);
			ДатаДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизитыПлатежногоДокумента, "docDate", ДатаДокумента, Истина, ТекстОшибки);
			НаименованиеБанкаПлательщика = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПлательщика.Банк.НаименованиеМеждународное");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизитыПлатежногоДокумента, "bankName", НаименованиеБанкаПлательщика, , ТекстОшибки);
			БИКБанкаПлательщика = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПлательщика.Банк.БИК");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизитыПлатежногоДокумента, "bankNum", БИКБанкаПлательщика, , ТекстОшибки);
			НомерДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизитыПлатежногоДокумента, "docNum", НомерДокумента, , ТекстОшибки);
			РеквизитыПлательщика = ОбъектТипаCML(ФабрикаXDTO, "OrgData", ПространствоИмен);
				КПППлательщика = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПлательщика.КПП");
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "kpp", КПППлательщика, , ТекстОшибки);
				ИННПлательщика = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПлательщика.ИНН");
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "inn", ИННПлательщика, , ТекстОшибки);
				НаименованиеПлательщика = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПлательщика.Наименование");
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "orgName", НаименованиеПлательщика, , ТекстОшибки);
				НаименованиеПлательщикаМеждународное = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПлательщика.НаименованиеМеждународное");
				ЗаполнитьСвойствоXDTO(
					РеквизитыПлательщика, "internationalName", НаименованиеПлательщикаМеждународное, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(РеквизитыПлательщика, "opf", НаименованиеПлательщикаМеждународное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизитыПлатежногоДокумента, "OrgData", РеквизитыПлательщика, Истина, ТекстОшибки);
			Если ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник") = Истина Тогда
				УполномоченныйСотрудник = УполномоченныйСотрудникСбербанк(ДеревоДанных, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ОбщиеРеквизитыПлатежногоДокумента, "AuthPers", УполномоченныйСотрудник, , ТекстОшибки);
			КонецЕсли;
		ЗаполнитьСвойствоXDTO(PayDocCur, "DocData", ОбщиеРеквизитыПлатежногоДокумента, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(PayDocCur, "Urgent", "0", Истина, ТекстОшибки);
		Плательщик = ОбъектТипаCML(ФабрикаXDTO, "Payer_50", ПространствоИмен);
			СекцияСчетПлательщика = СчетСбербанк(ДеревоДанных, "РеквизитыПлательщика", ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Плательщик, "AccDoc", СекцияСчетПлательщика, Истина, ТекстОшибки);
			МеждународноеНаименованиеПлательщика = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПлательщика.НаименованиеМеждународное");
			ЗаполнитьСвойствоXDTO(Плательщик, "Name", МеждународноеНаименованиеПлательщика, Истина, ТекстОшибки);
			АдресПроизвольный = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПлательщика.АдресПроизвольный");
			ЗаполнитьСвойствоXDTO(Плательщик, "Address", АдресПроизвольный, , ТекстОшибки);
			Город = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Город");
			ЗаполнитьСвойствоXDTO(Плательщик, "Place", Город, Истина, ТекстОшибки);
			СекцияСтрана = ОбъектТипаCML(ФабрикаXDTO, "Country", ПространствоИмен);
				КодСтраны = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Страна.КодСтраны");
				ЗаполнитьСвойствоXDTO(СекцияСтрана, "digital", КодСтраны, Истина, ТекстОшибки);
				ISOКодСтраны = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Страна.ISOКод");
				ЗаполнитьСвойствоXDTO(СекцияСтрана, "iso2", ISOКодСтраны, Истина, ТекстОшибки);
				НаименованиеСтраны = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Страна.Наименование");
				ЗаполнитьСвойствоXDTO(СекцияСтрана, "name", НаименованиеСтраны, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Плательщик, "Country", СекцияСтрана, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(PayDocCur, "Payer_50", Плательщик, Истина, ТекстОшибки);
		СекцияПоручение = ОбъектТипаCML(ФабрикаXDTO, "DocSum_33B", ПространствоИмен);
			СекцияВалютаИСуммаПеревода = СуммаСбербанк(ДеревоДанных, "ВалютаПеревода", ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СекцияПоручение, "DocSumTransfer", СекцияВалютаИСуммаПеревода, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СекцияПоручение, "RateAgree", "0", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(PayDocCur, "DocSum_33B", СекцияПоручение, Истина, ТекстОшибки);
		СекцияБенефициар = ОбъектТипаCML(ФабрикаXDTO, "Beneficiar_59", ПространствоИмен);
			СчетБенефициара = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.РасчСчет");
			ЗаполнитьСвойствоXDTO(СекцияБенефициар, "AccBeneficiar", СчетБенефициара, , ТекстОшибки);
			НаименованиеБенефициара = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.Наименование");
			ЗаполнитьСвойствоXDTO(СекцияБенефициар, "Name", НаименованиеБенефициара, , ТекстОшибки);
			АдресПроизвольный = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.АдресПроизвольный");
			ЗаполнитьСвойствоXDTO(СекцияБенефициар, "Address", АдресПроизвольный, , ТекстОшибки);
			ГородБенефициара = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Город");
			ЗаполнитьСвойствоXDTO(СекцияБенефициар, "Place", ГородБенефициара, Истина, ТекстОшибки);
			СекцияСтранаБенефициара = ОбъектТипаCML(ФабрикаXDTO, "Country", ПространствоИмен);
				КодСтраныБенифициара = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Страна.КодСтраны");
				ЗаполнитьСвойствоXDTO(СекцияСтранаБенефициара, "digital", КодСтраныБенифициара, Истина, ТекстОшибки);
				ISOКодСтраныБенифициара = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Страна.ISOКод");
				ЗаполнитьСвойствоXDTO(СекцияСтранаБенефициара, "iso2", ISOКодСтраныБенифициара, Истина, ТекстОшибки);
				НаименованиеСтраныБенефициара = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Страна.Наименование");
				ЗаполнитьСвойствоXDTO(СекцияСтранаБенефициара, "name", НаименованиеСтраныБенефициара, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СекцияБенефициар, "Country", СекцияСтранаБенефициара, Истина, ТекстОшибки);
			ИННБенефициара = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.ИНН");
			ЗаполнитьСвойствоXDTO(СекцияБенефициар, "Inn", ИННБенефициара, , ТекстОшибки);
			СВИФТКодБанкаБенефициара = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.Банк.SWIFT");
			ЗаполнитьСвойствоXDTO(СекцияБенефициар, "BeiCode", СВИФТКодБанкаБенефициара, , ТекстОшибки);
			МеждународноеНаименованиеБанкаБенефициара = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.Банк.НаименованиеМеждународное");
			ЗаполнитьСвойствоXDTO(
				СекцияБенефициар, "BankName", МеждународноеНаименованиеБанкаБенефициара, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(PayDocCur, "Beneficiar_59", СекцияБенефициар, Истина, ТекстОшибки);
		СекцияБанкПлательщика = ОбъектТипаCML(ФабрикаXDTO, "BankPayer_52", ПространствоИмен);
			СВИФТКодБанкаПлательщика = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПлательщика.Банк.SWIFT");
			ЗаполнитьСвойствоXDTO(СекцияБанкПлательщика, "BIC", СВИФТКодБанкаПлательщика, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СекцияБанкПлательщика, "NCode", БИКБанкаПлательщика, , ТекстОшибки);
			МеждународноеНаименованиеБанкаПлательщика = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПлательщика.Банк.НаименованиеМеждународное");
			ЗаполнитьСвойствоXDTO(СекцияБанкПлательщика, "Name", МеждународноеНаименованиеБанкаПлательщика, , ТекстОшибки);
			АдресБанкаПлательщика = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПлательщика.Банк.Адрес");
			ЗаполнитьСвойствоXDTO(СекцияБанкПлательщика, "Address", АдресБанкаПлательщика, , ТекстОшибки);
			ГородБанкаПлательщика = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПлательщика.Банк.Город");
			ЗаполнитьСвойствоXDTO(СекцияБанкПлательщика, "Place", ГородБанкаПлательщика, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(PayDocCur, "BankPayer_52", СекцияБанкПлательщика, , ТекстОшибки);
		Если ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.БанкПосредник") = Истина Тогда
			БанкПосредник = ОбъектТипаCML(ФабрикаXDTO, "ImediaBank_56", ПространствоИмен);
				SWIFTБанкаПосредника = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.SWIFT");
				ЗаполнитьСвойствоXDTO(БанкПосредник, "BIC", SWIFTБанкаПосредника, , ТекстОшибки);
				КлиринговыйКод = ОбъектТипаCML(ФабрикаXDTO, "CliringCode", ПространствоИмен);
					ISOКодСтраныБанкаПосредника = ЗначениеРеквизитаВДереве(
						ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.Страна.ISOКод");
					ЗаполнитьСвойствоXDTO(БанкПосредник, "countryCode", ISOКодСтраныБанкаПосредника, , ТекстОшибки);
					НаименованиеБанкаПосредника = ЗначениеРеквизитаВДереве(
						ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.Наименование");
					ЗаполнитьСвойствоXDTO(БанкПосредник, "name", НаименованиеБанкаПосредника, , ТекстОшибки);
					БИКБанкаПосредника = ЗначениеРеквизитаВДереве(
						ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.БИК");
					ЗаполнитьСвойствоXDTO(БанкПосредник, "code", БИКБанкаПосредника, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(БанкПосредник, "CliringCode", КлиринговыйКод, , ТекстОшибки);
				МеждународноеНаименованиеБанкаПосредника = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.НаименованиеМеждународное");
				ЗаполнитьСвойствоXDTO(БанкПосредник, "Name", МеждународноеНаименованиеБанкаПосредника, , ТекстОшибки);
				АдресБанкаПосредника = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.Адрес");
				ЗаполнитьСвойствоXDTO(БанкПосредник, "Address", АдресБанкаПосредника, , ТекстОшибки);
				ГородБанкаПосредника = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.Город");
				ЗаполнитьСвойствоXDTO(БанкПосредник, "Place", ГородБанкаПосредника, , ТекстОшибки);
				СтранаБанкаПосредника = ОбъектТипаCML(ФабрикаXDTO, "Country", ПространствоИмен);
					КодСтраныБанкаПосредника =  ЗначениеРеквизитаВДереве(
						ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.Страна.КодСтраны");
					ЗаполнитьСвойствоXDTO(БанкПосредник, "digital", КодСтраныБанкаПосредника, Истина, ТекстОшибки);
					ISOКодСтраныБанкаПосредника = ЗначениеРеквизитаВДереве(
						ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.Страна.ISOКод");
					ЗаполнитьСвойствоXDTO(БанкПосредник, "iso2", ISOКодСтраныБанкаПосредника, Истина, ТекстОшибки);
					НаименованиеСтраныБанкаПосредника = ЗначениеРеквизитаВДереве(
						ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.Страна.Наименование");
					ЗаполнитьСвойствоXDTO(БанкПосредник, "name", НаименованиеСтраныБанкаПосредника, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(БанкПосредник, "Country", СтранаБанкаПосредника, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(PayDocCur, "ImediaBank_56", БанкПосредник, , ТекстОшибки);
		КонецЕсли;
		БанкБенефициара = ОбъектТипаCML(ФабрикаXDTO, "BankBeneficiar_57", ПространствоИмен);
			SWIFTБанкаБенефициара = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.Банк.SWIFT");
			ЗаполнитьСвойствоXDTO(БанкБенефициара, "BIC", SWIFTБанкаБенефициара, , ТекстОшибки);
			КлиринговыйКод = ОбъектТипаCML(ФабрикаXDTO, "CliringCode", ПространствоИмен);
				ISOКодСтраныБанкаБенефициара = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПолучателя.Банк.Страна.ISOКод");
				ЗаполнитьСвойствоXDTO(КлиринговыйКод, "countryCode", ISOКодСтраныБанкаБенефициара, , ТекстОшибки);
				НаименованиеСтраныБанкаБенефициара = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПолучателя.Банк.Страна.Наименование");
				ЗаполнитьСвойствоXDTO(КлиринговыйКод, "name", НаименованиеСтраныБанкаБенефициара, , ТекстОшибки);
				БИКБанкаБенефициара = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПолучателя.Банк.БИК");
				ЗаполнитьСвойствоXDTO(КлиринговыйКод, "code", БИКБанкаБенефициара, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкБенефициара, "CliringCode", КлиринговыйКод, , ТекстОшибки);
			КоррСчетБанкаБенефициара = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.Банк.КоррСчет");
			ЗаполнитьСвойствоXDTO(БанкБенефициара, "CorrAcc", КоррСчетБанкаБенефициара, , ТекстОшибки);
			МеждународноеНаименованиеБанкаБенефициара = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.Банк.НаименованиеМеждународное");
			ЗаполнитьСвойствоXDTO(БанкБенефициара, "Name", МеждународноеНаименованиеБанкаБенефициара, , ТекстОшибки);
			АдресБанкаБенефициара = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.Банк.Адрес");
			ЗаполнитьСвойствоXDTO(БанкБенефициара, "Address", АдресБанкаБенефициара, , ТекстОшибки);
			ГородБанкаБенефициара = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.Банк.Город");
			ЗаполнитьСвойствоXDTO(БанкБенефициара, "Place", ГородБанкаБенефициара, , ТекстОшибки);
			СтранаБанкаБенефициара = ОбъектТипаCML(ФабрикаXDTO, "Country", ПространствоИмен);
				КодСтраныБанкаБенефициара = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПолучателя.Банк.Страна.КодСтраны");
				ЗаполнитьСвойствоXDTO(СтранаБанкаБенефициара, "digital", КодСтраныБанкаБенефициара, Истина, ТекстОшибки);
				ISOКодСтраныБанкаБенефициара = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПолучателя.Банк.Страна.ISOКод");
				ЗаполнитьСвойствоXDTO(СтранаБанкаБенефициара, "iso2", ISOКодСтраныБанкаБенефициара, Истина, ТекстОшибки);
				НаименованиеСтраныБанкаБенефициара = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПолучателя.Банк.Страна.ISOКод");
				ЗаполнитьСвойствоXDTO(СтранаБанкаБенефициара, "name", НаименованиеСтраныБанкаБенефициара, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкБенефициара, "Country", СтранаБанкаБенефициара, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(PayDocCur, "BankBeneficiar_57", БанкБенефициара, Истина, ТекстОшибки);
		НазначениеПлатежа = ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлатежа.НазначениеПлатежа");
		ЗаполнитьСвойствоXDTO(PayDocCur, "PaymentDetails_70", НазначениеПлатежа, Истина, ТекстОшибки);
		Комиссия = ОбъектТипаCML(ФабрикаXDTO, "Charge_71A", ПространствоИмен);
			ТипКомиссии = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПлатежа.ТипКомиссии");
			ЗаполнитьСвойствоXDTO(Комиссия, "chargesParty", ТипКомиссии, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(PayDocCur, "Charge_71A", Комиссия, Истина, ТекстОшибки);
		Опции = ОбъектТипаCML(ФабрикаXDTO, "PayDocCur.Options", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(PayDocCur, "Options", Опции, Истина, ТекстОшибки);
	
		Если ЗначениеРеквизитаВДереве(ДеревоДанных, "СправкаОВалютныхОперациях") = Истина Тогда
			СправкаОВалютныхОперациях = РеквизитыДокументаСбербанк(ДеревоДанных, "СправкаОВалютныхОперациях", ТекстОшибки);
			ЗаполнитьСвойствоXDTO(PayDocCur, "CurrDealInquiry", СправкаОВалютныхОперациях, , ТекстОшибки);
		КонецЕсли;
	
		ТаблицаЗаполнена = ЗначениеРеквизитаВДереве(ДеревоДанных, "КодыВидовВалютныхОпераций") <> "";
		Если ТаблицаЗаполнена Тогда
			СтрокаТаблицыКодыВидовОпераций = ДеревоДанных.Строки.Найти("КодыВидовВалютныхОпераций", "ПолныйПуть");
			КодыВидовВалютныхОпераций = КодыВидовВалютныхОперацийСбербанк(СтрокаТаблицыКодыВидовОпераций, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(PayDocCur, "VoSumInfo", КодыВидовВалютныхОпераций, , ТекстОшибки);
		КонецЕсли;

		ТаблицаЗаполнена = ЗначениеРеквизитаВДереве(ДеревоДанных, "ОбосновывающиеДокументы") <> "";
		Если ТаблицаЗаполнена Тогда
			СтрокаТаблицыОбосновывающихДокументов = ДеревоДанных.Строки.Найти("ОбосновывающиеДокументы", "ПолныйПуть");
			ОбосновывающиеДокументы = ОбосновывающиеДокументыСбербанк(СтрокаТаблицыОбосновывающихДокументов, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(PayDocCur, "VoDocs", ОбосновывающиеДокументы, , ТекстОшибки);
		КонецЕсли;

		ПлатежВнутриСБРФ = (МеждународноеНаименованиеБанкаБенефициара = "SBERBANK") И (КодСтраныБанкаБенефициара = "643");
		Если ПлатежВнутриСБРФ Тогда
			ЗаполнитьСвойствоXDTO(PayDocCur, "PaymentDirection", "0", , ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(PayDocCur, "PaymentDirection", "1", , ТекстОшибки);
		КонецЕсли;
		
		ИнформацияДляРегулирующихОрганов = ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ИнформацияДляРегулирующихОрганов");
		ЗаполнитьСвойствоXDTO(PayDocCur, "B77Info", ИнформацияДляРегулирующихОрганов, , ТекстОшибки);
		
		Если ЗначениеРеквизитаВДереве(ДеревоДанных, "КредитныйДоговор") = Истина Тогда
			КредитныйДоговор = ОбъектТипаCML(ФабрикаXDTO, "Credit", ПространствоИмен);
				ЦелевоеПоручение = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "КредитныйДоговор.ЦелевоеПоручение");
				ЗаполнитьСвойствоXDTO(
					КредитныйДоговор, "flagTargetAssignment", ?(ЦелевоеПоручение, "1", "0"), Истина, ТекстОшибки);
				ИспользоватьСобственныеСредства = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "КредитныйДоговор.ИспользоватьСобственныеСредства");
				ЗаполнитьСвойствоXDTO(
					КредитныйДоговор, "flagTargetAssignment", ?(ИспользоватьСобственныеСредства, "1", "0"), Истина, ТекстОшибки);
				НомерДоговора = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "КредитныйДоговор.НомерДоговора");
				ЗаполнитьСвойствоXDTO(КредитныйДоговор, "CredConNum", НомерДоговора, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(PayDocCur, "Credit", КредитныйДоговор, , ТекстОшибки);
		КонецЕсли;
		
		ТаблицаЗаполнена = ЗначениеРеквизитаВДереве(ДеревоДанных, "КодыИнструкций") <> "";
		Если ТаблицаЗаполнена Тогда
			СтрокаТаблицыКодыИнструкций = ДеревоДанных.Строки.Найти("КодыИнструкций", "ПолныйПуть");
			КодыИнструкций = ОбъектТипаCML(ФабрикаXDTO, "PayDocCur.Codes23e", ПространствоИмен);
			Для Каждого ТекущийКодИнструкции Из СтрокаТаблицыКодыИнструкций.Строки Цикл
				КодИнструкции = ОбъектТипаCML(ФабрикаXDTO, "PayDocCur.Codes23e.Code23e", ПространствоИмен);
					ОписаниеИнструкции = ЗначениеРеквизитаВДереве(
						ТекущийКодИнструкции, "КодыИнструкций.НомерСтроки.Описание");
					ЗаполнитьСвойствоXDTO(КодИнструкции, "Instr23EInfo", ОписаниеИнструкции, , ТекстОшибки);
					КодИнструкции = ЗначениеРеквизитаВДереве(
						ТекущийКодИнструкции, "КодыИнструкций.НомерСтроки.КодИнструкции");
					ЗаполнитьСвойствоXDTO(КодИнструкции, "Code", КодИнструкции, Истина, ТекстОшибки);
				КодыИнструкций.Code23e.Добавить(КодИнструкции);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(PayDocCur, "Codes23e", КодыИнструкций, , ТекстОшибки);
		КонецЕсли;

		ТаблицаЗаполнена = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПрисоединенныеФайлы") <> "";
		Если ТаблицаЗаполнена Тогда
			СтрокаТаблицыПрисоединенныеФайлы = ДеревоДанных.Строки.Найти("ПрисоединенныеФайлы", "ПолныйПуть");
			СекцияПрисоединенныеФайлы = ПриложенныеДокументыСбербанк(СтрокаТаблицыПрисоединенныеФайлы, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(PayDocCur, "Attachments", СекцияПрисоединенныеФайлы, , ТекстОшибки);
		КонецЕсли;
		
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки
	Иначе
		ДвоичныеДанные = ДвоичныеДанныеИзXDTO(ФабрикаXDTO, PayDocCur);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	КонецЕсли;
	
	PayDocCur.Проверить();
	
КонецПроцедуры

Процедура СформироватьПоручениеНаПокупкуВалютыСбербанк(СсылкаНаДокумент, ДеревоДанных, АдресФайлаВоВременномХранилище)
		
	ПространствоИмен = "http://bssys.com/upg/request";
	ТекстОшибки = "";
	
	CurrBuy = ОбъектТипаCML(ФабрикаXDTO, "CurrBuy", ПространствоИмен);
		ИДДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдДокумента");
		ЗаполнитьСвойствоXDTO(CurrBuy, "docExtId", ИДДокумента, Истина, ТекстОшибки);
		ОбщиеРеквизиты = ОбъектТипаCML(ФабрикаXDTO, "CurrComDocData", ПространствоИмен);
			ДатаДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "docDate", ДатаДокумента, Истина, ТекстОшибки);
			НомерДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "docNum", НомерДокумента, Истина, ТекстОшибки);
			РеквизитыОрганизации = ОбъектТипаCML(ФабрикаXDTO, "OrgData", ПространствоИмен);
				НаименованиеОрганизации = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.Наименование");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "orgName", НаименованиеОрганизации, Истина, ТекстОшибки);
				ИНН = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ИНН");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "inn", ИНН, Истина, ТекстОшибки);
				КПП = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.КПП");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "kpp", КПП, , ТекстОшибки);
				ОКПО = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ОКПО");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "okpo", ОКПО, , ТекстОшибки);
				НаименованиеМеждународное = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыОрганизации.НаименованиеМеждународное");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "internationalName", НаименованиеМеждународное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "OrgData", РеквизитыОрганизации, Истина, ТекстОшибки);
			Если ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник") = Истина Тогда
				УполномоченныйСотрудник = УполномоченныйСотрудникСбербанк(ДеревоДанных, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "AuthPers", УполномоченныйСотрудник, , ТекстОшибки);
			КонецЕсли;
		ЗаполнитьСвойствоXDTO(CurrBuy, "DocData", ОбщиеРеквизиты, Истина, ТекстОшибки);
		Сделка = ОбъектТипаCML(ФабрикаXDTO, "CurrBuyTrans", ПространствоИмен);
			РасчетныйСчетСписанияСредств = ОбъектТипаCML(ФабрикаXDTO, "CurrBuyTrans.Acc", ПространствоИмен);
				НомерСчетаСписанияСредств = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыСписания.НомерСчета");
				ЗаполнитьСвойствоXDTO(РасчетныйСчетСписанияСредств, "account", НомерСчетаСписанияСредств, Истина, ТекстОшибки);
				БИКБанкаСписанияСредств = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыСписания.Банк.БИК");
				ЗаполнитьСвойствоXDTO(РасчетныйСчетСписанияСредств, "bic", БИКБанкаСписанияСредств, Истина, ТекстОшибки);
				НаименованиеБанкаСписанияСредств = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыСписания.Банк.Наименование");
				ЗаполнитьСвойствоXDTO(
					РасчетныйСчетСписанияСредств, "BankName", НаименованиеБанкаСписанияСредств, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Сделка, "Acc", РасчетныйСчетСписанияСредств, Истина, ТекстОшибки);
			СекцияСуммаПокупки = ОбъектТипаCML(ФабрикаXDTO, "CurrBuyTrans.AmountTransf", ПространствоИмен);
				СуммаПокупки = СуммаСбербанк(ДеревоДанных, "СуммаПокупки", ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияСуммаПокупки, "SumBuy", СуммаПокупки, , ТекстОшибки);
				Если ЗначениеРеквизитаВДереве(ДеревоДанных, "СредстваПокупки") = Истина Тогда
					СуммаСредств = СуммаСбербанк(ДеревоДанных, "СредстваПокупки", ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СекцияСуммаПокупки, "SumThrough", СуммаСредств, , ТекстОшибки);
				КонецЕсли;
			ЗаполнитьСвойствоXDTO(Сделка, "AmountTransf", СекцияСуммаПокупки, Истина, ТекстОшибки);
			УсловияПокупки = ОбъектТипаCML(ФабрикаXDTO, "TermDeal", ПространствоИмен);
				УсловияСделки = ЗначениеРеквизитаВДереве(ДеревоДанных, "УсловияСделки");
				ЗаполнитьСвойствоXDTO(УсловияПокупки, "DealType", УсловияСделки, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Сделка, "TermBuy", УсловияПокупки, , ТекстОшибки);
			РеквизитыЗачисленияВалюты = ОбъектТипаCML(ФабрикаXDTO, "CurrBuyTrans.AccountNumTransf", ПространствоИмен);
				СчетЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыЗачисления.НомерСчета");
				ЗаполнитьСвойствоXDTO(РеквизитыЗачисленияВалюты, "accNum", СчетЗачисления, Истина, ТекстОшибки);
				БанкЗачисления = ОбъектТипаCML(ФабрикаXDTO, "AccCurrBank", ПространствоИмен);
					БИКБанкаЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыЗачисления.Банк.БИК");
					ЗаполнитьСвойствоXDTO(БанкЗачисления, "bic", БИКБанкаЗачисления, , ТекстОшибки);
					КоррСчетБанкаЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыЗачисления.Банк.КоррСчет");
					ЗаполнитьСвойствоXDTO(БанкЗачисления, "correspAcc", КоррСчетБанкаЗачисления, , ТекстОшибки);
					НаименованиеБанкаЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыЗачисления.Банк.Наименование");
					ЗаполнитьСвойствоXDTO(БанкЗачисления, "Name", НаименованиеБанкаЗачисления, Истина, ТекстОшибки);
					SWIFTБанкаЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыЗачисления.Банк.SWIFT");
					ЗаполнитьСвойствоXDTO(БанкЗачисления, "BankSWIFT", SWIFTБанкаЗачисления, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(РеквизитыЗачисленияВалюты, "Bank", БанкЗачисления, Истина, ТекстОшибки);
				ТипЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыЗачисления.ТипЗачисления");
				ЗаполнитьСвойствоXDTO(РеквизитыЗачисленияВалюты, "type", ТипЗачисления, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Сделка, "AccountNumTransf", РеквизитыЗачисленияВалюты, Истина, ТекстОшибки);
			СекцияСредстваПокупки = ОбъектТипаCML(ФабрикаXDTO, "CurrBuyTrans.PayDocBuy", ПространствоИмен);
				ИсточникСредствНаПокупку = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИсточникСредствНаПокупку.Счет");
					Если ИсточникСредствНаПокупку = "СчетСписания" Тогда
						СчетСписания = ОбъектТипаCML(ФабрикаXDTO, "DocAccount", ПространствоИмен);
							НомерСчетаСписания = ЗначениеРеквизитаВДереве(
								ДеревоДанных, "ИсточникСредствНаПокупку.Счет.СчетСписания.НомерСчета");
							ЗаполнитьСвойствоXDTO(СчетСписания, "accNum", НомерСчетаСписания, Истина, ТекстОшибки);
							БИКБанкаСписания = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИсточникСредствНаПокупку.Счет.СчетСписания.БИК");
							ЗаполнитьСвойствоXDTO(СчетСписания, "bic", БИКБанкаСписания, Истина, ТекстОшибки);
							НаименованиеБанкаСписания = ЗначениеРеквизитаВДереве(
								ДеревоДанных, "ИсточникСредствНаПокупку.Счет.СчетСписания.НаименованиеБанка");
							ЗаполнитьСвойствоXDTO(СчетСписания, "BankName", НаименованиеБанкаСписания, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СекцияСредстваПокупки, "DocAccount", СчетСписания, Истина, ТекстОшибки);
					Иначе
						СчетПеречисления = ОбъектТипаCML(ФабрикаXDTO, "AccountRub", ПространствоИмен);
							СчетПеречисленияНаПокупку = ЗначениеРеквизитаВДереве(
								ДеревоДанных, "ИсточникСредствНаПокупку.Счет.СчетПеречисленияНаПокупку");
							Если СчетПеречисленияНаПокупку = "Счет" Тогда
								РеквизитыСчетаПеречисления = ОбъектТипаCML(ФабрикаXDTO, "AccountRub.Account", ПространствоИмен);
									НомерСчетаПеречисления = ЗначениеРеквизитаВДереве(
										ДеревоДанных, "ИсточникСредствНаПокупку.Счет.СчетПеречисленияНаПокупку.Счет.НомерСчета");
									ЗаполнитьСвойствоXDTO(РеквизитыСчетаПеречисления, "accNum", НомерСчетаПеречисления, Истина, ТекстОшибки);
									БИКБанкаПеречисления = ЗначениеРеквизитаВДереве(
										ДеревоДанных, "ИсточникСредствНаПокупку.Счет.СчетПеречисленияНаПокупку.Счет.БИК");
									ЗаполнитьСвойствоXDTO(РеквизитыСчетаПеречисления, "bic", БИКБанкаПеречисления, Истина, ТекстОшибки);
									НаименованиеБанкаПеречисления = ЗначениеРеквизитаВДереве(
										ДеревоДанных, "ИсточникСредствНаПокупку.Счет.СчетПеречисленияНаПокупку.Счет.НаименованиеБанка");
									ЗаполнитьСвойствоXDTO(
										РеквизитыСчетаПеречисления, "BankName", НаименованиеБанкаПеречисления, Истина, ТекстОшибки);
								ЗаполнитьСвойствоXDTO(СчетПеречисления, "Account", РеквизитыСчетаПеречисления, Истина, ТекстОшибки);
							Иначе
								РеквизитыДокументаПеречисления = ОбъектТипаCML(ФабрикаXDTO, "AccountRub.Doc", ПространствоИмен);
									ТипДокумента = ЗначениеРеквизитаВДереве(
										ДеревоДанных, "ИсточникСредствНаПокупку.Счет.СчетПеречисленияНаПокупку.ПлатежноеПоручение.ТипДокумента");
									ЗаполнитьСвойствоXDTO(РеквизитыДокументаПеречисления, "docType", ТипДокумента, Истина, ТекстОшибки);
									НомерДокумента = ЗначениеРеквизитаВДереве(
										ДеревоДанных, "ИсточникСредствНаПокупку.Счет.СчетПеречисленияНаПокупку.ПлатежноеПоручение.Номер");
									ЗаполнитьСвойствоXDTO(РеквизитыДокументаПеречисления, "docNum", НомерДокумента, Истина, ТекстОшибки);
									ДатаДокумента = ЗначениеРеквизитаВДереве(
										ДеревоДанных, "ИсточникСредствНаПокупку.Счет.СчетПеречисленияНаПокупку.ПлатежноеПоручение.Дата");
									ЗаполнитьСвойствоXDTO(РеквизитыДокументаПеречисления, "docDate", ДатаДокумента, Истина, ТекстОшибки);
								ЗаполнитьСвойствоXDTO(СчетПеречисления, "Doc", РеквизитыДокументаПеречисления, Истина, ТекстОшибки);
							КонецЕсли;
							ЗаполнитьСвойствоXDTO(СчетПеречисления, "Doc", РеквизитыДокументаПеречисления, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СекцияСредстваПокупки, "RecAccount", СчетПеречисления, , ТекстОшибки);
					КонецЕсли;
				ТипСписания = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыСписания.ТипСписания");
				ЗаполнитьСвойствоXDTO(СекцияСредстваПокупки, "type", ТипСписания, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Сделка, "PayDocBuy", СекцияСредстваПокупки, Истина, ТекстОшибки);
			КомиссионноеВознаграждение = КомиссионноеВознаграждениеСбербанк(ДеревоДанных, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Сделка, "Commis", КомиссионноеВознаграждение, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(CurrBuy, "Trans", Сделка, Истина, ТекстОшибки);
		СоглашениеСБанком = ЗначениеРеквизитаВДереве(ДеревоДанных, "СоглашениеСБанком");
		ЗаполнитьСвойствоXDTO(CurrBuy, "BankAgreement", СоглашениеСБанком, , ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки
	КонецЕсли;
	
	CurrBuy.Проверить();
		
	ДвоичныеДанные = ДвоичныеДанныеИзXDTO(ФабрикаXDTO, CurrBuy);
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
КонецПроцедуры

Процедура СформироватьРаспоряжениеНаОбязательнуюПродажуВалютыСбербанк(СсылкаНаДокумент, ДеревоДанных, АдресФайлаВоВременномХранилище)
	
	ПространствоИмен = "http://bssys.com/upg/request";
	ТекстОшибки = "";
	
	MandatorySale = ОбъектТипаCML(ФабрикаXDTO, "MandatorySale", ПространствоИмен);
		ИДДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдДокумента");
		ЗаполнитьСвойствоXDTO(MandatorySale, "docExtId", ИДДокумента, Истина, ТекстОшибки);
			ОбщиеРеквизиты = ОбъектТипаCML(ФабрикаXDTO, "ComDocData", ПространствоИмен);
			ДатаДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "docDate", ДатаДокумента, Истина, ТекстОшибки);
			НомерДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "docNum", НомерДокумента, Истина, ТекстОшибки);
			РеквизитыОрганизации = ОбъектТипаCML(ФабрикаXDTO, "OrgData", ПространствоИмен);
				НаименованиеОрганизации = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыОрганизации.Наименование");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "orgName", НаименованиеОрганизации, Истина, ТекстОшибки);
				ИНН = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ИНН");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "inn", ИНН, Истина, ТекстОшибки);
				КПП = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.КПП");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "kpp", КПП, , ТекстОшибки);
				ОКПО = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ОКПО");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "okpo", ОКПО, , ТекстОшибки);
				НаименованиеМеждународное = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыОрганизации.НаименованиеМеждународное");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "internationalName", НаименованиеМеждународное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "OrgData", РеквизитыОрганизации, Истина, ТекстОшибки);
			Если ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник") = Истина Тогда
				УполномоченныйСотрудник = УполномоченныйСотрудникСбербанк(ДеревоДанных, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "AuthPers", УполномоченныйСотрудник, , ТекстОшибки);
			КонецЕсли;
		ЗаполнитьСвойствоXDTO(MandatorySale, "DocData", ОбщиеРеквизиты, Истина, ТекстОшибки);
		РеквизитыТранзитногоСчета = ОбъектТипаCML(ФабрикаXDTO, "AccountRU", ПространствоИмен);
			НомерТранзитногоСчета = ЗначениеРеквизитаВДереве(ДеревоДанных, "ТранзитныйСчет.НомерСчета");
			ЗаполнитьСвойствоXDTO(РеквизитыТранзитногоСчета, "AccNum", НомерТранзитногоСчета, , ТекстОшибки);
			РеквизитыТранзитногоБанка = БанкСбербанк(ДеревоДанных, "ТранзитныйСчет.Банк", ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыТранзитногоСчета, "Bank", РеквизитыТранзитногоБанка, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(MandatorySale, "AccDoc", РеквизитыТранзитногоСчета, Истина, ТекстОшибки);
		Уведомление = ОбъектТипаCML(ФабрикаXDTO, "MandatorySale.Advice", ПространствоИмен);
			ДокументУведомления = ОбъектТипаCML(ФабрикаXDTO, "MandatorySale.Advice.Doc", ПространствоИмен);
				ОсновныеДанныеУведомления = ОбъектТипаCML(ФабрикаXDTO, "DocData", ПространствоИмен);
					НаименованиеБанкаВУведомлении = ЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.НаименованиеБанка");
					ЗаполнитьСвойствоXDTO(ОсновныеДанныеУведомления, "bankName", НаименованиеБанкаВУведомлении, , ТекстОшибки);
					НомерДокументаУведомления = ЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.НомерДокумента");
					ЗаполнитьСвойствоXDTO(ОсновныеДанныеУведомления, "docNum", НомерДокументаУведомления, Истина, ТекстОшибки);
					ДатаДокументаУведомления = ЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.ДатаДокумента");
					ЗаполнитьСвойствоXDTO(ОсновныеДанныеУведомления, "docDate", ДатаДокументаУведомления, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ДокументУведомления, "DocData", ОсновныеДанныеУведомления, Истина, ТекстОшибки);
				СекцияСуммаУведомления = СуммаСбербанк(ДеревоДанных, "Уведомление", ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ДокументУведомления, "DocSum", СекцияСуммаУведомления, Истина, ТекстОшибки);
				КодОперации = ЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.КодОперации");
				ЗаполнитьСвойствоXDTO(ДокументУведомления, "OperCode", КодОперации, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Уведомление, "Doc", ДокументУведомления, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(MandatorySale, "Advice", Уведомление, Истина, ТекстОшибки);
		ОбщаяСуммаПоступившихСредств = СуммаСбербанк(ДеревоДанных, "ОбщаяСуммаПоступившихСредств", ТекстОшибки);
		ЗаполнитьСвойствоXDTO(MandatorySale, "TotalSum", ОбщаяСуммаПоступившихСредств, Истина, ТекстОшибки);
		Вычет = ОбъектТипаCML(ФабрикаXDTO, "MandatorySale.Subtract", ПространствоИмен);
			СекцияСуммаВычета = СуммаСбербанк(ДеревоДанных, "Вычет", ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Вычет, "Sum", СекцияСуммаВычета, Истина, ТекстОшибки);
			Обоснование = ЗначениеРеквизитаВДереве(ДеревоДанных, "Вычет.Обоснование");
			ЗаполнитьСвойствоXDTO(Вычет, "Substantiation", Обоснование, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(MandatorySale, "Subtract", Вычет, Истина, ТекстОшибки);
		Если ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа") = Истина Тогда
			НеОбязательнаяПродажа = ОбъектТипаCML(ФабрикаXDTO, "MandatorySale.Sell", ПространствоИмен);
				ТипСделки = ОбъектТипаCML(ФабрикаXDTO, "TermDealTypeRequired", ПространствоИмен);
					УсловияПродажи = ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.УсловиеСделки");
					ЗаполнитьСвойствоXDTO(ТипСделки, "DealType", УсловияПродажи, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НеОбязательнаяПродажа, "DealType", УсловияПродажи, Истина, ТекстОшибки);
				СекцияСумма = СуммаСбербанк(ДеревоДанных, "НеобязательнаяПродажа", ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НеОбязательнаяПродажа, "Sum", СекцияСумма, Истина, ТекстОшибки);
				РеквизитыЗачисления = ОбъектТипаCML(ФабрикаXDTO, "OurRubAccountTypeRequired", ПространствоИмен);
					БанкЗачисления = БанкСбербанк(ДеревоДанных, "НеобязательнаяПродажа.СчетЗачисленияОтПродажи.Банк", ТекстОшибки);
					ЗаполнитьСвойствоXDTO(РеквизитыЗачисления, "Bank", СекцияСумма, Истина, ТекстОшибки);
					НомерСчетаЗачисления = ЗначениеРеквизитаВДереве(
						ДеревоДанных, "НеобязательнаяПродажа.СчетЗачисленияОтПродажи.НомерСчета");
					ЗаполнитьСвойствоXDTO(РеквизитыЗачисления, "accNum", НомерСчетаЗачисления, Истина, ТекстОшибки);
					ТипЗачисления = ЗначениеРеквизитаВДереве(
						ДеревоДанных, "НеобязательнаяПродажа.СчетЗачисленияОтПродажи.Тип");
					ЗаполнитьСвойствоXDTO(РеквизитыЗачисления, "type", ТипЗачисления, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НеОбязательнаяПродажа, "Acc", РеквизитыЗачисления, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(MandatorySale, "Sell", НеОбязательнаяПродажа, , ТекстОшибки);
		КонецЕсли;
		Если ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление") = Истина Тогда
			Зачисление = ОбъектТипаCML(ФабрикаXDTO, "MandatorySale.Trans", ПространствоИмен);
				ЗаполнитьСвойствоXDTO(Зачисление, "flagNSPut", "1", , ТекстОшибки);
				ЗачислитьНа = ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.ЗачислитьНа");
				ЗаполнитьСвойствоXDTO(Зачисление, "transTo", ЗачислитьНа, , ТекстОшибки);
				РеквизитыСчета = ОбъектТипаCML(ФабрикаXDTO, "AccountCurrType", ПространствоИмен);
					НомерСчетаЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.НомерСчета");
					ЗаполнитьСвойствоXDTO(РеквизитыСчета, "accNum", НомерСчетаЗачисления, Истина, ТекстОшибки);
					РеквизитыБанка = ОбъектТипаCML(ФабрикаXDTO, "AccountCurrType.Bank", ПространствоИмен);
						БИКБанкаЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.БИКБанка");
						ЗаполнитьСвойствоXDTO(РеквизитыБанка, "bic", БИКБанкаЗачисления, , ТекстОшибки);
						КоррСчетБанкаЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.КоррСчетБанка");
						ЗаполнитьСвойствоXDTO(РеквизитыБанка, "correspAcc", КоррСчетБанкаЗачисления, , ТекстОшибки);
						НаименованиеБанкаЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.НаименованиеБанка");
						ЗаполнитьСвойствоXDTO(РеквизитыБанка, "Name", НаименованиеБанкаЗачисления, Истина, ТекстОшибки);
						SWIFTБанкаЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.SWIFT");
						ЗаполнитьСвойствоXDTO(РеквизитыБанка, "BankSWIFT", SWIFTБанкаЗачисления, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(РеквизитыСчета, "Bank", РеквизитыБанка, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Зачисление, "AccTrans", РеквизитыСчета, Истина, ТекстОшибки);
				СуммаЗачисления = СуммаСбербанк(ДеревоДанных, "Зачисление.СуммаЗачисления", ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Зачисление, "Sum", СуммаЗачисления, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(MandatorySale, "Trans", Зачисление, , ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "КомиссионноеВознаграждение")) Тогда
			КомиссионноеВознаграждение = КомиссионноеВознаграждениеСбербанк(ДеревоДанных, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(MandatorySale, "Commis", КомиссионноеВознаграждение, , ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "СправкаОВалютнойОперации")) Тогда
			СправкаОВалютнойОперации = РеквизитыДокументаСбербанк(ДеревоДанных, "СправкаОВалютнойОперации", ТекстОшибки);
			ЗаполнитьСвойствоXDTO(MandatorySale, "CurrDealInquiry", СправкаОВалютнойОперации, Истина, ТекстОшибки);
		КонецЕсли;
		
		ТаблицаЗаполнена = ЗначениеРеквизитаВДереве(ДеревоДанных, "КодыВидовВалютныхОпераций") <> "";
		Если ТаблицаЗаполнена Тогда
			СтрокаТаблицыКодыВидовОпераций = ДеревоДанных.Строки.Найти("КодыВидовВалютныхОпераций", "ПолныйПуть");
			КодыВидовВалютныхОпераций = КодыВидовВалютныхОперацийСбербанк(СтрокаТаблицыКодыВидовОпераций, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(MandatorySale, "VoSumInfo", КодыВидовВалютныхОпераций, , ТекстОшибки);
		КонецЕсли;

		ТаблицаЗаполнена = ЗначениеРеквизитаВДереве(ДеревоДанных, "ОбосновывающиеДокументы") <> "";
		Если ТаблицаЗаполнена Тогда
			СтрокаТаблицыОбосновывающихДокументов = ДеревоДанных.Строки.Найти("ОбосновывающиеДокументы", "ПолныйПуть");
			ОбосновывающиеДокументы = ОбосновывающиеДокументыСбербанк(СтрокаТаблицыОбосновывающихДокументов, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(MandatorySale, "VoDocs", ОбосновывающиеДокументы, , ТекстОшибки);
		КонецЕсли;
		
		ТаблицаЗаполнена = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПрисоединенныеФайлы") <> "";
		Если ТаблицаЗаполнена Тогда
			СтрокаТаблицыПрисоединенныеФайлы = ДеревоДанных.Строки.Найти("ПрисоединенныеФайлы", "ПолныйПуть");
			СекцияПрисоединенныеФайлы = ПриложенныеДокументыСбербанк(СтрокаТаблицыПрисоединенныеФайлы, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(MandatorySale, "Attachments", СекцияПрисоединенныеФайлы, , ТекстОшибки);
		КонецЕсли;
		
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки
	КонецЕсли;
	
	MandatorySale.Проверить();
	
	ДвоичныеДанные = ДвоичныеДанныеИзXDTO(ФабрикаXDTO, MandatorySale);
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
КонецПроцедуры

Процедура СформироватьСправкуОПодтверждающихДокументахСбербанк(СсылкаНаДокумент, ДеревоДанных, АдресФайлаВоВременномХранилище)
	
	ПространствоИмен = "http://bssys.com/upg/request";
	ТекстОшибки = "";
	
	ConfDocCertificate138I = ОбъектТипаCML(ФабрикаXDTO, "ConfDocCertificate138I", ПространствоИмен);
		ИДДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдДокумента");
		ЗаполнитьСвойствоXDTO(ConfDocCertificate138I, "docExtId", ИДДокумента, Истина, ТекстОшибки);
		ОбщиеРеквизиты = ОбъектТипаCML(ФабрикаXDTO, "DocDataConf181I", ПространствоИмен);
			ДатаДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "docDate", ДатаДокумента, Истина, ТекстОшибки);
			НомерДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "docNum", НомерДокумента, Истина, ТекстОшибки);
			ДатаСправки = ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСправки");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "statementFrom", ДатаСправки, Истина, ТекстОшибки);
			НаименованиеПодразделенияБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "НаименованиеПодразделенияБанка");
			ЗаполнитьСвойствоXDTO(
				ОбщиеРеквизиты, "branchSystemName", НаименованиеПодразделенияБанка, Истина, ТекстОшибки);
			НаименованиеБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "НаименованиеБанка");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "authBankName", НаименованиеБанка, , ТекстОшибки);
			БИКУполномоченногоБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "БИКУполномоченногоБанка");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "authBankBIC", БИКУполномоченногоБанка, , ТекстОшибки);
			РеквизитыОрганизации = ОбъектТипаCML(ФабрикаXDTO, "OrgDataCC", ПространствоИмен);
				ИННОрганизации = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ИНН");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "inn", ИННОрганизации, Истина, ТекстОшибки);
				НаименованиеОрганизации = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.Наименование");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "orgName", НаименованиеОрганизации, Истина, ТекстОшибки);
				ОКПО = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ОКПО");
				ЗаполнитьСвойствоXDTO(РеквизитыОрганизации, "okpo", ОКПО, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "OrgData", РеквизитыОрганизации, Истина, ТекстОшибки);
			НомерПаспортаСделки = ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерПаспортаСделки");
			ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "ContractNum", НомерПаспортаСделки, Истина, ТекстОшибки);
			Если ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник") = Истина Тогда
				УполномоченныйСотрудник = УполномоченныйСотрудникСбербанк(ДеревоДанных, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ОбщиеРеквизиты, "AuthPers", УполномоченныйСотрудник, , ТекстОшибки);
			КонецЕсли;
		ЗаполнитьСвойствоXDTO(ConfDocCertificate138I, "DocData", ОбщиеРеквизиты, Истина, ТекстОшибки);
		
		СтрокиПодтверждающиеДокументы = ДеревоДанных.Строки.Найти("ПодтверждающиеДокументы", "ПолныйПуть");
		ПодтверждающийДокумент = ОбъектТипаCML(ФабрикаXDTO, "ConfDocCertificateDoc181I", ПространствоИмен);
		Для Каждого ТекущийДокумент Из СтрокиПодтверждающиеДокументы.Строки Цикл
			СекцияПодтверждающегоДокумента = ОбъектТипаCML(ФабрикаXDTO, "ConfDocCertificateDoc138I", ПространствоИмен);
				НомерСтроки = ЗначениеРеквизитаВДереве(ТекущийДокумент, "ПодтверждающиеДокументы.НомерСтроки");
				ЗаполнитьСвойствоXDTO(СекцияПодтверждающегоДокумента, "lineNumber", НомерСтроки, , ТекстОшибки);
				АтрибутыПодтверждающегоДокумента = ОбъектТипаCML(ФабрикаXDTO, "ConfDoc", ПространствоИмен);
					НомерДокумента = ЗначениеРеквизитаВДереве(ТекущийДокумент, "ПодтверждающиеДокументы.НомерСтроки.НомерДокумента");
					ЗаполнитьСвойствоXDTO(АтрибутыПодтверждающегоДокумента, "num", НомерДокумента, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(
						АтрибутыПодтверждающегоДокумента, "numCheck", ?(ЗначениеЗаполнено(НомерДокумента),"0", "1"), , ТекстОшибки);
					ДатаДокумента = ЗначениеРеквизитаВДереве(ТекущийДокумент, "ПодтверждающиеДокументы.НомерСтроки.ДатаДокумента");
					ЗаполнитьСвойствоXDTO(АтрибутыПодтверждающегоДокумента, "date", ДатаДокумента, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(
					СекцияПодтверждающегоДокумента, "ConfDoc", АтрибутыПодтверждающегоДокумента, , ТекстОшибки);
				КодВидаПодтверждающегоДокумента = ЗначениеРеквизитаВДереве(
					ТекущийДокумент, "ПодтверждающиеДокументы.НомерСтроки.КодВидаПодтверждающегоДокумента");
				ЗаполнитьСвойствоXDTO(
					СекцияПодтверждающегоДокумента, "DocCode", КодВидаПодтверждающегоДокумента, Истина, ТекстОшибки);
				НаименованиеВидаПодтверждающегоДокумента = ЗначениеРеквизитаВДереве(
					ТекущийДокумент, "ПодтверждающиеДокументы.НомерСтроки.НаименованиеВидаПодтверждающегоДокумента");
				ЗаполнитьСвойствоXDTO(
					СекцияПодтверждающегоДокумента, "DocName", НаименованиеВидаПодтверждающегоДокумента, , ТекстОшибки);
				СуммаВВалютеДокумента = СуммаСбербанк(
					СекцияПодтверждающегоДокумента, "ПодтверждающиеДокументы.НомерСтроки.СуммаВВалютеДокумента", ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияПодтверждающегоДокумента, "DocSum", СуммаВВалютеДокумента, Истина, ТекстОшибки);
				СуммаВВалютеКонтракта = СуммаСбербанк(
					СекцияПодтверждающегоДокумента, "ПодтверждающиеДокументы.НомерСтроки.СуммаВВалютеКонтракта", ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияПодтверждающегоДокумента, "ContractSum", СуммаВВалютеКонтракта, , ТекстОшибки);
				ПризнакПоставки = ЗначениеРеквизитаВДереве(ТекущийДокумент, "ПодтверждающиеДокументы.НомерСтроки.ПризнакПоставки");
				ЗаполнитьСвойствоXDTO(СекцияПодтверждающегоДокумента, "DelDir", ПризнакПоставки, , ТекстОшибки);
				ОжидаемыйСрок = ЗначениеРеквизитаВДереве(ТекущийДокумент, "ПодтверждающиеДокументы.НомерСтроки.ОжидаемыйСрок");
				ЗаполнитьСвойствоXDTO(СекцияПодтверждающегоДокумента, "ExpectedTerm", ОжидаемыйСрок, , ТекстОшибки);
				СтранаГрузоотправителя = СтранаСбербанк(
					ДеревоДанных, "ПодтверждающиеДокументы.НомерСтроки.СтранаГрузоотправителя", ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияПодтверждающегоДокумента, "Country", СтранаГрузоотправителя, , ТекстОшибки);
				СуммаПоставкиВВалютеДокумента = ЗначениеРеквизитаВДереве(
					ТекущийДокумент, "ПодтверждающиеДокументы.НомерСтроки.СуммаПоставкиВВалютеДокумента");
				ЗаполнитьСвойствоXDTO(СекцияПодтверждающегоДокумента, "DocSumDel", СуммаПоставкиВВалютеДокумента, , ТекстОшибки);
				СуммаПоставкиВВалютеКонтракта = ЗначениеРеквизитаВДереве(
					ТекущийДокумент, "ПодтверждающиеДокументы.НомерСтроки.СуммаПоставкиВВалютеКонтракта");
				ЗаполнитьСвойствоXDTO(
					СекцияПодтверждающегоДокумента, "ContractSumDel", СуммаПоставкиВВалютеКонтракта, , ТекстОшибки);
				ДатаКорректируемойСПД = ЗначениеРеквизитаВДереве(
					ТекущийДокумент, "ПодтверждающиеДокументы.НомерСтроки.ДатаКорректируемойСПД");
				ЗаполнитьСвойствоXDTO(
					СекцияПодтверждающегоДокумента, "AdjustmentDate", ДатаКорректируемойСПД, , ТекстОшибки);
			ПодтверждающийДокумент.ConfDocCertificateDoc138I.Добавить(СекцияПодтверждающегоДокумента);
		КонецЦикла;
		ЗаполнитьСвойствоXDTO(ConfDocCertificate138I, "ConfDocCertificateDocs138I", ПодтверждающийДокумент, Истина, ТекстОшибки);
		
		ТаблицаЗаполнена = ЗначениеРеквизитаВДереве(ДеревоДанных, "ПрисоединенныеФайлы") <> "";
		Если ТаблицаЗаполнена Тогда
			СтрокаТаблицыПрисоединенныеФайлы = ДеревоДанных.Строки.Найти("ПрисоединенныеФайлы", "ПолныйПуть");
			СекцияПрисоединенныеФайлы = ПриложенныеДокументыСбербанк(СтрокаТаблицыПрисоединенныеФайлы, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ConfDocCertificate138I, "Attachments", СекцияПрисоединенныеФайлы, , ТекстОшибки);
		КонецЕсли;
		
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки
	КонецЕсли;
	
	ConfDocCertificate138I.Проверить();
	
	ДвоичныеДанные = ДвоичныеДанныеИзXDTO(ФабрикаXDTO, ConfDocCertificate138I);
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);

КонецПроцедуры

Функция СчетСбербанк(ДеревоДанных, Путь, ТекстОшибки)
	
	ПространствоИмен = "http://bssys.com/upg/request";

	СекцияСчет = ОбъектТипаCML(ФабрикаXDTO, "AccNumBicType", ПространствоИмен);
	Счет = ЗначениеРеквизитаВДереве(ДеревоДанных, Путь + ".РасчСчет");
	ЗаполнитьСвойствоXDTO(СекцияСчет, "accNum", Счет, Истина, ТекстОшибки);
	БИКБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, Путь + ".Банк.БИК");
	ЗаполнитьСвойствоXDTO(СекцияСчет, "bic", БИКБанка, Истина, ТекстОшибки);
	Возврат СекцияСчет;
	
КонецФункции

Функция УполномоченныйСотрудникСбербанк(ДеревоДанных, ТекстОшибки)
	
	ПространствоИмен = "http://bssys.com/upg/request";
	УполномоченныйСотрудник = ОбъектТипаCML(ФабрикаXDTO, "AuthPers", ПространствоИмен);
	ФИО = ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.ФИО");
	ЗаполнитьСвойствоXDTO(УполномоченныйСотрудник, "Name", ФИО, , ТекстОшибки);
	Телефон = ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.Телефон");
	ЗаполнитьСвойствоXDTO(УполномоченныйСотрудник, "Telfax", Телефон, , ТекстОшибки);
	Должность = ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.Должность");
	ЗаполнитьСвойствоXDTO(УполномоченныйСотрудник, "Position", Должность, , ТекстОшибки);
	Возврат УполномоченныйСотрудник;
	
КонецФункции

Функция ИзменилсяСтатусВКвитанцииСбербанк(НастройкаОбмена, СообщениеОбмена, НовыйСтатус)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СообщениеОбменСБанками.Дата КАК Дата,
	               |	СообщениеОбменСБанками.ДополнительнаяИнформация КАК ДополнительнаяИнформация
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	               |	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.Квитанция)
	               |	И СообщениеОбменСБанками.СообщениеРодитель = &СообщениеРодитель
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ";
	Запрос.УстановитьПараметр("СообщениеРодитель", СообщениеОбмена);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДополнительнаяИнформация <> НовыйСтатус;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ДайджестПлатежногоПорученияСбербанк(НастройкаОбмена, ДеревоРазбора, СтрокаОбъекта)
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	
	ДанныеЗаполнения = Новый СписокЗначений;
	
	ИдентификаторДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");
	Отправитель = ПредставлениеОтправителяСбербанк();
		
	СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10) + "Sender="
		+ Отправитель + Символ(10) + "ExtId=" + ИдентификаторДокумента + Символ(10) + "FIELDS" + Символ(10);
	
	НомерДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");
	ДанныеЗаполнения.Добавить(НомерДокумента, "AccDoc.AccDocNo");
	КодВидаВалютнойОперации = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "КодВидаВалютнойОперации");
	ДанныеЗаполнения.Добавить(КодВидаВалютнойОперации, "AccDoc.CodeVO");
	ДатаДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	ДанныеЗаполнения.Добавить(Формат(ДатаДокумента, "ДФ=yyyy-MM-dd"), "AccDoc.DocDate");
	Сумма = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Сумма");
	ДанныеЗаполнения.Добавить(Формат(Сумма, "ЧДЦ=2; ЧРД=.; ЧГ="), "AccDoc.DocSum");
	ВидПлатежа = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВидПлатежа");
	ДанныеЗаполнения.Добавить(ВидПлатежа, "AccDoc.PaytKind");
	Очередность = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Очередность");
	ДанныеЗаполнения.Добавить(Очередность, "AccDoc.Priority");
	НазначениеПлатежа = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НазначениеПлатежа");
	ДанныеЗаполнения.Добавить(НазначениеПлатежа, "AccDoc.Purpose");
	ВидОперации = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВидОперации");
	ДанныеЗаполнения.Добавить(ВидОперации, "AccDoc.TransKind");
	Код = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Код");
	ДанныеЗаполнения.Добавить(Код, "AccDoc.UIP");
	ДополнительнаяУслуга = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДополнительнаяУслуга");
	ДанныеЗаполнения.Добавить(ДополнительнаяУслуга, "AccDoc.UrgentSBRF");
	НомерКредитногоДоговора = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "НомерКредитногоДоговора");
	ДанныеЗаполнения.Добавить(НомерКредитногоДоговора, "Credit.CredConNum");
	ЦелевоеПоручение = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЦелевоеПоручение");
	ДанныеЗаполнения.Добавить(ЦелевоеПоручение, "Credit.FlagTargetAssignment");
	ИспользоватьСобственныеСредства = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ИспользоватьСобственныеСредства");
	ДанныеЗаполнения.Добавить(ИспользоватьСобственныеСредства, "Credit.FlagUseOwnMeans");
	ПоказательКБК = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПоказательКБК");
	ДанныеЗаполнения.Добавить(ПоказательКБК, "DepartmentalInfo.CBC");
	ПоказательДаты = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПоказательДаты");
	ДанныеЗаполнения.Добавить(ПоказательДаты, "DepartmentalInfo.DocDate");
	ПоказательНомера = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПоказательНомера");
	ДанныеЗаполнения.Добавить(ПоказательНомера, "DepartmentalInfo.DocNo");
	СтатусСоставителя = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СтатусСоставителя");
	ДанныеЗаполнения.Добавить(СтатусСоставителя, "DepartmentalInfo.DrawerStatus");
	ОКТМО = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ОКТМО");
	ДанныеЗаполнения.Добавить(ОКТМО, "DepartmentalInfo.OKATO");
	ПоказательОснования = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПоказательОснования");
	ДанныеЗаполнения.Добавить(ПоказательОснования, "DepartmentalInfo.PaytReason");
	КодВыплат = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КодВыплат");
	ДанныеЗаполнения.Добавить(КодВыплат, "DepartmentalInfo.TaxPaytKind");
	ПоказательПериода = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПоказательПериода");
	ДанныеЗаполнения.Добавить(ПоказательПериода, "DepartmentalInfo.TaxPeriod");
	НаименованиеБанкаПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ПолучательНаименованиеБанка");
	ДанныеЗаполнения.Добавить(НаименованиеБанкаПолучателя, "Payee.Bank.Name");
	НаселенныйПунктБанкаПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "НаселенныйПунктБанкаПолучателя");
	ДанныеЗаполнения.Добавить(НаселенныйПунктБанкаПолучателя, "Payee.Bank.BankCity");
	ТипНаселенногоПунктаБанкаПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ТипНаселенногоПунктаБанкаПолучателя");
	ДанныеЗаполнения.Добавить(ТипНаселенногоПунктаБанкаПолучателя, "Payee.Bank.SettlementType");
	БИКБанкаПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПолучательБИКБанка");
	ДанныеЗаполнения.Добавить(БИКБанкаПолучателя, "Payee.Bank.Bic");
	СчетБанкаПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПолучательКоррСчетБанка");
	ДанныеЗаполнения.Добавить(СчетБанкаПолучателя, "Payee.Bank.CorrespAcc");
	ФилиалБанкаПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ФилиалБанкаПолучателя");
	ДанныеЗаполнения.Добавить(ФилиалБанкаПолучателя, "Payee.Filial");
	ИННПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПолучательИНН");
	ДанныеЗаполнения.Добавить(ИННПолучателя, "Payee.INN");
	КПППолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПолучательКПП");
	ДанныеЗаполнения.Добавить(КПППолучателя, "Payee.KPP");
	ТекстПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПолучательНаименование");
	ДанныеЗаполнения.Добавить(ТекстПолучателя, "Payee.Name");
	НомерСчетаПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПолучательРасчСчет");
	ДанныеЗаполнения.Добавить(НомерСчетаПолучателя, "Payee.PersonalAcc");
	НаименованиеБанкаПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ПлательщикНаименованиеБанка");
	ДанныеЗаполнения.Добавить(НаименованиеБанкаПлательщика, "Payer.Bank.Name");
	НаселенныйПунктБанкаПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "НаселенныйПунктБанкаПлательщика");
	ДанныеЗаполнения.Добавить(НаселенныйПунктБанкаПлательщика, "Payer.Bank.BankCity");
	ТипНаселенногоПунктаБанкаПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ТипНаселенногоПунктаБанкаПлательщика");
	ДанныеЗаполнения.Добавить(ТипНаселенногоПунктаБанкаПлательщика, "Payer.Bank.SettlementType");
	БИКБанкаПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПлательщикБИКБанка");
	ДанныеЗаполнения.Добавить(БИКБанкаПлательщика, "Payer.Bank.Bic");
	СчетБанкаПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПлательщикКоррСчетБанка");
	ДанныеЗаполнения.Добавить(СчетБанкаПлательщика, "Payer.Bank.CorrespAcc");
	ФилиалБанкаПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ФилиалБанкаПлательщика");
	ДанныеЗаполнения.Добавить(ФилиалБанкаПлательщика, "Payer.Filial");
	ИННПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПлательщикИНН");
	ДанныеЗаполнения.Добавить(ИННПлательщика, "Payer.INN");
	КПППлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПлательщикКПП");
	ДанныеЗаполнения.Добавить(КПППлательщика, "Payer.KPP");
	ТекстПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПлательщикНаименование");
	ДанныеЗаполнения.Добавить(ТекстПлательщика, "Payer.Name");
	НомерСчетаПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПлательщикРасчСчет");
	ДанныеЗаполнения.Добавить(НомерСчетаПлательщика, "Payer.PersonalAcc");
	
	ДобавитьЗаписиВДайджест(ДанныеЗаполнения, СтрокаВозврата);
	
	СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);

	Возврат СтрокаВозврата;

КонецФункции

Функция ДайджестЗапросаВыпискиСбербанк(НастройкаОбмена, ДеревоРазбора, СтрокаОбъекта)

	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	
	ДанныеЗаполнения = Новый СписокЗначений;

	ИдентификаторДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");
	
	Отправитель = ПредставлениеОтправителяСбербанк();

	СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10)
		+ "Sender=" + Отправитель + Символ(10) + "ExtId=" + ИдентификаторДокумента + Символ(10) + "FIELDS" + Символ(10);
	
	ДатаНачалаПериода = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаНачала");

	ДанныеЗаполнения.Добавить(Формат(ДатаНачалаПериода, "ДФ=yyyy-MM-dd"), "BeginDate");
	ДатаОкончанияПериода = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаКонца");

	ДанныеЗаполнения.Добавить(Формат(ДатаОкончанияПериода, "ДФ=yyyy-MM-dd"), "EndDate");
	ТипЗапроса = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ТипЗапроса");

	ДанныеЗаполнения.Добавить(ТипЗапроса, "StmtType");
	
	ДобавитьЗаписиВДайджест(ДанныеЗаполнения, СтрокаВозврата);
	
	СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);

	СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES" + Символ(10) + "Table=Accounts" + Символ(10);
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Индекс = 0;
	ВсегоЗаписей = СтрокиТЧ.Количество();
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		Индекс = Индекс + 1;
		БИК = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "БИК");
		НомерЗапроса = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НомерЗапроса");
		НомерСчета = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НомерСчета");
		СтрокаВозврата = СтрокаВозврата + "DocNum=" + НомерЗапроса + Символ(10) + "Bic=" + БИК + Символ(10)
						+ "Account=" + НомерСчета + Символ(10) + "#" + ?(Индекс <> ВсегоЗаписей, Символ(10), "");
	КонецЦикла;

	Возврат СтрокаВозврата;

КонецФункции

Функция ДайджестВыпискиСбербанк(ДеревоРазбора, СтрокаОбъекта)
	
	ДанныеЗаполнения = Новый СписокЗначений;

	СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "FIELDS" + Символ(10);
	
	УчетнаяЗапись = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "УчетнаяЗапись");

	ДанныеЗаполнения.Добавить(УчетнаяЗапись, "AccountName");
	Исполнитель = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Исполнитель");

	ДанныеЗаполнения.Добавить(Исполнитель, "Author");
	НомерСчета = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "РасчСчет");

	ДанныеЗаполнения.Добавить(НомерСчета, "ComRests.Acc");
	ДатаНачала = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаНачалаСтрокой");
	ДатаНачала = Сред(ДатаНачала, 1, 10);

	ДанныеЗаполнения.Добавить(ДатаНачала, "ComRests.BeginDate");
	БИК = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БИК");
	ДанныеЗаполнения.Добавить(БИК, "ComRests.Bic");
	ДатаПредыдущейОперации = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПредыдущейОперации");

	ДатаПредыдущейОперации = Формат(ДатаПредыдущейОперации, "ДФ=yyyy-MM-dd");
	ДанныеЗаполнения.Добавить(ДатаПредыдущейОперации, "ComRests.DatePLast");
	ДатаОкончания = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаКонцаСтрокой");
	ДатаОкончания = Сред(ДатаОкончания, 1, 10);

	ДанныеЗаполнения.Добавить(ДатаОкончания, "ComRests.EndDate");
	ВходящийОстаток = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НачальныйОстаток");

	Если ВходящийОстаток <> Неопределено Тогда
		ВходящийОстаток = Формат(ВходящийОстаток, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ВходящийОстаток, "ComRests.EnterBal");
	КонецЕсли;
	
	ВходящийОстатокВНациональнойВалюте = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ВходящийОстатокВНациональнойВалюте");

	Если ВходящийОстатокВНациональнойВалюте <> Неопределено Тогда
		ВходящийОстатокВНациональнойВалюте = Формат(ВходящийОстатокВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ВходящийОстатокВНациональнойВалюте, "ComRests.EnterBalNat");
	КонецЕсли;
	
	ДатаПоследнейОперации = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПоследнейОперации");
	ДатаПоследнейОперации = Формат(ДатаПоследнейОперации, "ДФ=yyyy-MM-dd");
	ДанныеЗаполнения.Добавить(ДатаПоследнейОперации, "ComRests.LastMovetDate");
	ПлановыйИсходящийОстаток = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ПлановыйИсходящийОстаток");
	Если ПлановыйИсходящийОстаток  <> Неопределено Тогда
		ПлановыйИсходящийОстаток = Формат(ПлановыйИсходящийОстаток, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ПлановыйИсходящийОстаток, "ComRests.PlanOutBal");
	КонецЕсли;
	
	ПлановыйИсходящийОстатокВНациональнойВалюте = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ПлановыйИсходящийОстатокВНациональнойВалюте");
	Если ПлановыйИсходящийОстатокВНациональнойВалюте <> Неопределено Тогда
		ПлановыйИсходящийОстатокВНациональнойВалюте = Формат(
			ПлановыйИсходящийОстатокВНациональнойВалюте, "ЧДЦ=3; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ПлановыйИсходящийОстатокВНациональнойВалюте, "ComRests.PlanOutBalNat");
	КонецЕсли;
	
	КурсНаНачалоПериода = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КурсНаНачалоПериода");
	
	Если КурсНаНачалоПериода <> Неопределено Тогда
		КурсНаНачалоПериода = Формат(Окр(КурсНаНачалоПериода, 2), "ЧРД=.; ЧГ=");
	КонецЕсли;
	ДанныеЗаполнения.Добавить(КурсНаНачалоПериода, "ComRests.RateIn");
	
	КурсНаКонецПериода = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КурсНаКонецПериода");
	Если КурсНаКонецПериода <> Неопределено Тогда
		КурсНаКонецПериода = Формат(Окр(КурсНаКонецПериода, 2), "ЧРД=.; ЧГ=");
	КонецЕсли;
	ДанныеЗаполнения.Добавить(КурсНаКонецПериода, "ComRests.RateOut");

	ИсходящийОстаток = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КонечныйОстаток");
	Если ИсходящийОстаток <> Неопределено Тогда
		ИсходящийОстаток = Формат(ИсходящийОстаток, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ИсходящийОстаток, "ComRests.OutBal");
	КонецЕсли;
	
	ИсходящийОстатокВНациональнойВалюте = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ИсходящийОстатокВНациональнойВалюте");
	Если ИсходящийОстатокВНациональнойВалюте <> Неопределено Тогда
		ИсходящийОстатокВНациональнойВалюте = Формат(ИсходящийОстатокВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ИсходящийОстатокВНациональнойВалюте, "ComRests.OutBalNat");
	КонецЕсли;
	
	ДатаСоставленияВыписки = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаСоставленияВыписки");
	ДатаСоставленияВыписки = Сред(ДатаСоставленияВыписки, 1, 19);
	ДанныеЗаполнения.Добавить(ДатаСоставленияВыписки, "ComRests.StmtDateTime");
	ТипЗапросаВыписки = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ТипЗапросаВыписки");
	ДанныеЗаполнения.Добавить(ТипЗапросаВыписки, "ComRests.StmtType");
	Кредит = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВсегоПоступило");
	Если Кредит <> Неопределено Тогда
		Кредит = Формат(Кредит, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(Кредит, "CreditSum");
	КонецЕсли;
	
	КредитВНациональнойВалюте = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "КредитВНациональнойВалюте");
	Если КредитВНациональнойВалюте <> Неопределено Тогда
		КредитВНациональнойВалюте = Формат(КредитВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(КредитВНациональнойВалюте, "CreditSumNat");
	КонецЕсли;
	
	ВсегоСписано = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВсегоСписано");
	Если ВсегоСписано <> Неопределено Тогда
		Дебет = Формат(ВсегоСписано, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(Дебет, "DebetSum");
	КонецЕсли;
	
	ДебетВНациональнойВалюте = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДебетВНациональнойВалюте");
	Если ДебетВНациональнойВалюте <> Неопределено Тогда
		ДебетВНациональнойВалюте = Формат(ДебетВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ДебетВНациональнойВалюте, "DebetSumNat");
	КонецЕсли;
	
	ДопИнформация = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДопИнформация");
	ДанныеЗаполнения.Добавить(ДопИнформация, "DocComment");
	ИдентификаторДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");
	ДанныеЗаполнения.Добавить(ИдентификаторДокумента, "DocId");
	НомерДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");
	ДанныеЗаполнения.Добавить(НомерДокумента, "DocNum");
	НаименованиеОрганизации = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НаименованиеОрганизации");
	ДанныеЗаполнения.Добавить(НаименованиеОрганизации, "OrgName");
	
	ДобавитьЗаписиВДайджест(ДанныеЗаполнения, СтрокаВозврата);
	
	СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Индекс = 0;
	ВсегоЗаписей = СтрокиТЧ.Количество();
	Если ВсегоЗаписей > 0 Тогда
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES";
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "Table=TransInfo" + Символ(10);
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		Индекс = Индекс + 1;
		ДанныеЗаполненияСтроки = Новый СписокЗначений;
		ДатаСписания = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ДатаСписания");
		ДатаСписания = Сред(ДатаСписания, 1, 10);
		ДанныеЗаполненияСтроки.Добавить(ДатаСписания, "BankDate.ChargeOffDate");
		ДатаПоступленияВБанкПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "ДатаПоступленияВБанкПлательщика");
		ДатаПоступленияВБанкПлательщика = Сред(ДатаПоступленияВБанкПлательщика, 1, 10);
		ДанныеЗаполненияСтроки.Добавить(ДатаПоступленияВБанкПлательщика, "BankDate.ReceiptDate");
		НомерДокументаБанка = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НомерДокументаБанка");
		ДанныеЗаполненияСтроки.Добавить(НомерДокументаБанка, "ComTransInfo.BankNumDoc");
		КодПодразделения = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КодПодразделения");
		ДанныеЗаполненияСтроки.Добавить(КодПодразделения, "ComTransInfo.BranchCode");
		ДатаПроводки = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ДатаПроводки");
		ДатаПроводки = Сред(ДатаПроводки, 1, 19);
		ДанныеЗаполненияСтроки.Добавить(ДатаПроводки, "ComTransInfo.CarryDate");
		ПризнакПриложения = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПризнакПриложения");
		ПризнакПриложения = Формат(ПризнакПриложения, "БЛ=0; БИ=1");
		ДанныеЗаполненияСтроки.Добавить(ПризнакПриложения, "ComTransInfo.Dc");
		ВалютаПлатежа = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ВалютаПлатежа");
		ДанныеЗаполненияСтроки.Добавить(ВалютаПлатежа, "ComTransInfo.DocCurr");
		ДатаРасчетногоДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Дата");
		ДатаРасчетногоДокумента = Формат(ДатаРасчетногоДокумента, "ДФ=yyyy-MM-dd");
		ДанныеЗаполненияСтроки.Добавить(ДатаРасчетногоДокумента, "ComTransInfo.DocDate");
		НомерРасчетногоДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номер");
		ДанныеЗаполненияСтроки.Добавить(НомерРасчетногоДокумента, "ComTransInfo.DocNum");
		СуммаДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		Если СуммаДокумента <> Неопределено Тогда
			СуммаСтрокой = Формат(СуммаДокумента, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(СуммаСтрокой, "ComTransInfo.DocSum");
		КонецЕсли;
		СуммаДокументаВНациональнойВалюте = ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "СуммаДокументаВНациональнойВалюте");
		Если СуммаДокументаВНациональнойВалюте <> Неопределено Тогда
			СуммаДокументаВНациональнойВалюте = Формат(СуммаДокументаВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(СуммаДокументаВНациональнойВалюте, "ComTransInfo.DocSumNat");
		КонецЕсли;
		ОчередностьПлатежа = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Очередность");
		ОчередностьПлатежа = Формат(ОчередностьПлатежа, "ЧДЦ=0; ЧГ=");
		ДанныеЗаполненияСтроки.Добавить(ОчередностьПлатежа, "ComTransInfo.PaymentOrder");
		ВидПлатежа = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ВидПлатежа");
		ДанныеЗаполненияСтроки.Добавить(ВидПлатежа, "ComTransInfo.PaytKind");
		НазначениеПлатежа = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НазначениеПлатежа");
		ДанныеЗаполненияСтроки.Добавить(НазначениеПлатежа, "ComTransInfo.Purpose");
		ВидОперации = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ВидОплаты");
		ДанныеЗаполненияСтроки.Добавить(ВидОперации, "ComTransInfo.TransKind");
		Код = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Код");
		ДанныеЗаполненияСтроки.Добавить(Код, "ComTransInfo.UIP");
		ИдентификаторДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ИдентификаторДокумента");
		ДанныеЗаполненияСтроки.Добавить(ИдентификаторДокумента, "DocId");
		НаименованиеПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПолучательНаименование");
		ДанныеЗаполненияСтроки.Добавить(НаименованиеПолучателя, "Payee.Name");
		СчетПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПолучательСчет");
		ДанныеЗаполненияСтроки.Добавить(СчетПолучателя, "Payee.PayeeAcc");
		ИННПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПолучательИНН");
		ДанныеЗаполненияСтроки.Добавить(ИННПолучателя, "Payee.PayeeINN");
		БИКБанкаПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПолучательБИКБанка");
		ДанныеЗаполненияСтроки.Добавить(БИКБанкаПолучателя, "PayeeBank.PayeeBankBic");
		СчетБанкаПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СчетБанкаПолучателя");
		ДанныеЗаполненияСтроки.Добавить(СчетБанкаПолучателя, "PayeeBank.PayeeBankCorrAcc");
		НаименованиеБанкаПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "ПолучательНаименованиеБанка");
		ДанныеЗаполненияСтроки.Добавить(НаименованиеБанкаПолучателя, "PayeeBank.PayeeBankName");
		НаименованиеПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПлательщикНаименование");
		ДанныеЗаполненияСтроки.Добавить(НаименованиеПлательщика, "Payer.Name");
		СчетПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПлательщикСчет");
		ДанныеЗаполненияСтроки.Добавить(СчетПлательщика, "Payer.PayerAcc");
		ИННПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПлательщикИНН");
		ДанныеЗаполненияСтроки.Добавить(ИННПлательщика, "Payer.PayerINN");
		БИКБанкаПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПлательщикБИКБанка");
		ДанныеЗаполненияСтроки.Добавить(БИКБанкаПлательщика, "PayerBank.PayerBankBic");
		СчетБанкаПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СчетБанкаПлательщика");
		ДанныеЗаполненияСтроки.Добавить(СчетБанкаПлательщика, "PayerBank.PayerBankCorrAcc");
		НаименованиеБанкаПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "ПлательщикНаименованиеБанка");
		ДанныеЗаполненияСтроки.Добавить(НаименованиеБанкаПлательщика, "PayerBank.PayerBankName");
		КодБюджетнойКлассификации = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПоказательКБК");
		ДанныеЗаполненияСтроки.Добавить(КодБюджетнойКлассификации, "DepartmentalInfo.Cbc");
		ДатаНалоговогоДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПоказательДаты");
		ДанныеЗаполненияСтроки.Добавить(ДатаНалоговогоДокумента, "DepartmentalInfo.DocDate");
		НомерНалоговогоДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПоказательНомера");
		ДанныеЗаполненияСтроки.Добавить(НомерНалоговогоДокумента, "DepartmentalInfo.DocNo");
		ПоказательСтатусаНалогоплательщика = ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "СтатусСоставителя");
		ДанныеЗаполненияСтроки.Добавить(ПоказательСтатусаНалогоплательщика, "DepartmentalInfo.DrawerStatus");
		КПП102 = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПлательщикКПП");
		ДанныеЗаполненияСтроки.Добавить(КПП102, "DepartmentalInfo.Kpp102");
		КПП103 = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПолучательКПП");
		ДанныеЗаполненияСтроки.Добавить(КПП103, "DepartmentalInfo.Kpp103");
		КодОКАТО = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КодОКАТО");
		ДанныеЗаполненияСтроки.Добавить(КодОКАТО, "DepartmentalInfo.Okato");
		ПоказательОснованияПлатежа = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПоказательОснования");
		ДанныеЗаполненияСтроки.Добавить(ПоказательОснованияПлатежа, "DepartmentalInfo.PaytReason");
		ТипНалоговогоПлатежа = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПоказательТип");
		ДанныеЗаполненияСтроки.Добавить(ТипНалоговогоПлатежа, "DepartmentalInfo.TaxPaytKind");
		НалоговыйПериод = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПоказательПериода");
		ДанныеЗаполненияСтроки.Добавить(НалоговыйПериод, "DepartmentalInfo.TaxPeriod");
		ДатаДокументаКартотека = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ДатаОтсылкиДок");
		Если ЗначениеЗаполнено(ДатаДокументаКартотека) Тогда
			ДатаДокументаКартотека = Формат(ДатаДокументаКартотека, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаДокументаКартотека, "DiffDoc.DocDateCard");
		КонецЕсли;
		НомерДокументаКартотека = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НомерДокументаКартотека");
		ДанныеЗаполненияСтроки.Добавить(НомерДокументаКартотека, "DiffDoc.DocNumberCard");
		ШифрДокументаКартотека = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ШифрДокументаКартотека");
		ДанныеЗаполненияСтроки.Добавить(ШифрДокументаКартотека, "DiffDoc.DocShifr");
		НомерПлатежа = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НомерПлатежа");
		ДанныеЗаполненияСтроки.Добавить(НомерПлатежа, "DiffDoc.NumPaymentCard");
		СодержаниеОперации = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СодержаниеОперации");
		ДанныеЗаполненияСтроки.Добавить(СодержаниеОперации, "DiffDoc.OperContent");
		УсловиеОплаты = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "УсловиеОплаты");
		ДанныеЗаполненияСтроки.Добавить(УсловиеОплаты, "DiffDoc.PayingCondition");
		СуммаОстаткаПлатежа = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаОстаткаПлатежа");
		Если СуммаОстаткаПлатежа <> Неопределено Тогда
			СуммаОстаткаПлатежаСтрокой = Формат(СуммаОстаткаПлатежа, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(СуммаОстаткаПлатежаСтрокой, "DiffDoc.SumRestCard");
		КонецЕсли;
		
		СлужебныеРеквизиты = СлужебныеРеквизитыВыпискиСбербанк();
		Для Каждого Элемент Из СлужебныеРеквизиты Цикл
			Значение = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, Элемент);
			ДанныеЗаполненияСтроки.Добавить(Значение, "Cur." + Элемент);
		КонецЦикла;

		ДобавитьЗаписиВДайджест(ДанныеЗаполненияСтроки, СтрокаВозврата);
		
		СтрокаВозврата = СтрокаВозврата + "#" + ?(Индекс <> ВсегоЗаписей, Символ(10), "");
		
	КонецЦикла;
	
	Возврат СтрокаВозврата;
	
КонецФункции

Функция ДайджестКвитанцииСбербанк(ДеревоРазбора, СтрокаОбъекта)
	
	ДанныеЗаполнения = Новый СписокЗначений;
	
	ИдентификаторДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ТикетСББОЛ");
	ДатаСозданияКвитка = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаСозданияКвитка");
	ДатаВФормате = Формат(ДатаСозданияКвитка, "ДФ=yyyy-MM-dd");
	СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "CreateTime=" + ДатаВФормате + Символ(10)
		+ ?(ЗначениеЗаполнено(ИдентификаторДокумента), "DocId=" + ИдентификаторДокумента + Символ(10), "")
		+ "FIELDS" + Символ(10);
	КодСостоянияДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КодСостоянияДокумента");
	ДанныеЗаполнения.Добавить(КодСостоянияДокумента, "Info.StatusStateCode");
	ДатаСписанияСоСчетаПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаСписанияСоСчетаПлательщика");
	ДатаСписанияСоСчетаПлательщика = Формат(ДатаСписанияСоСчетаПлательщика, "ДФ=yyyy-MM-dd");
	ДанныеЗаполнения.Добавить(ДатаСписанияСоСчетаПлательщика, "Info.BankDate.ChargeOffDate");
	ДатаПеречисленияПлатежа = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаПеречисленияПлатежа");
	ДатаПеречисленияПлатежа = Формат(ДатаПеречисленияПлатежа, "ДФ=yyyy-MM-dd");
	ДанныеЗаполнения.Добавить(ДатаПеречисленияПлатежа, "Info.BankDate.DPP");
	ДатаПостановкиВКартотеку = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаПостановкиВКартотеку");
	ДатаПостановкиВКартотеку = Формат(ДатаПостановкиВКартотеку, "ДФ=yyyy-MM-dd");
	ДанныеЗаполнения.Добавить(ДатаПостановкиВКартотеку, "Info.BankDate.FileDate");
	ДатаОтметкиБанкомПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкомПолучателя");
	ДатаОтметкиБанкомПолучателя = Формат(ДатаОтметкиБанкомПолучателя, "ДФ=yyyy-MM-dd");
	ДанныеЗаполнения.Добавить(ДатаОтметкиБанкомПолучателя, "Info.BankDate.RecDate");
	ДатаПоступленияВБанкПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаПоступленияВБанкПлательщика");
	ДатаПоступленияВБанкПлательщика = Формат(ДатаПоступленияВБанкПлательщика, "ДФ=yyyy-MM-dd");
	ДанныеЗаполнения.Добавить(ДатаПоступленияВБанкПлательщика, "Info.BankDate.ReceiptDate");
	ДатаОтметкиБанкомПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкомПлательщика");
	ДатаОтметкиБанкомПлательщика = Формат(ДатаОтметкиБанкомПлательщика, "ДФ=yyyy-MM-dd");
	ДанныеЗаполнения.Добавить(ДатаОтметкиБанкомПлательщика, "Info.BankDate.SignDate");

	АвторСообщения = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "АвторСообщения");
	ДанныеЗаполнения.Добавить(АвторСообщения, "Info.MsgFromBank.Author");
	СообщениеИзБанка = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СообщениеИзБанка");
	ДанныеЗаполнения.Добавить(СообщениеИзБанка, "Info.MsgFromBank.Message");
	
	ДобавитьЗаписиВДайджест(ДанныеЗаполнения, СтрокаВозврата);
	
	СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
	
	Возврат СтрокаВозврата;
	
КонецФункции

Функция ДайджестПорученияНаПереводВалютыСбербанк(НастройкаОбмена, ДвоичныеДанныеФайла)
	
	ОбъектXML = Новый ЧтениеXML;
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
	ОбъектXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
	ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	
	ДанныеЗаполнения = Новый СписокЗначений;
	
	Отправитель = ПредставлениеОтправителяСбербанк();
		
	СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10) + "Sender="
		+ Отправитель + Символ(10) + "ExtId=" + ЭД.docExtId + Символ(10) + "FIELDS" + Символ(10);
		
	ДанныеЗаполнения.Добавить(Формат(ЭД.DocData.docDate, "ДФ=yyyy-MM-dd"), "DocDate");
	ДанныеЗаполнения.Добавить(ЭД.DocData.docNum, "DocNum");
	ДанныеЗаполнения.Добавить(ЭД.DocData.bankName, "BankName");
	ДанныеЗаполнения.Добавить(ЭД.Urgent, "Urgent");
	Если ЭД.DocSum_33B.DifferentCurrencies = Неопределено Тогда
		ДанныеЗаполнения.Добавить("0", "DifferentCurrencies");
	Иначе
		ДанныеЗаполнения.Добавить(ЭД.DocSum_33B.DifferentCurrencies, "DifferentCurrencies");
	КонецЕсли;
	
	ДанныеЗаполнения.Добавить(Формат(ЭД.DocSum_33B.Rate, "ЧДЦ=2; ЧРД=.; ЧГ="), "Rate");
	ДанныеЗаполнения.Добавить(ЭД.PaymentDetails_70, "PaymentDetails_70");
	ДанныеЗаполнения.Добавить(ЭД.Charge_71A.chargesParty, "ChargesParty");
	ДанныеЗаполнения.Добавить(ЭД.PaymentDirection, "PaymentDirection");
	ДанныеЗаполнения.Добавить(ЭД.B77Info, "B77Info");
	Если ЭД.Credit <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(ЭД.Credit.flagTargetAssignment, "FlagTargetAssignment");
		ДанныеЗаполнения.Добавить(ЭД.Credit.flagUseOwnMeans, "FlagUseOwnMeans");
		ДанныеЗаполнения.Добавить(ЭД.Credit.CredConNum, "CredConNum");
	КонецЕсли;

	ДанныеЗаполнения.Добавить(ЭД.Payer_50.AccDoc.accNum, "Payer_50.AccNum");
	ДанныеЗаполнения.Добавить(ЭД.Payer_50.AccDoc.bic, "Payer_50.Bic");
	ДанныеЗаполнения.Добавить(ЭД.Payer_50.Name, "Payer_50.Name");
	ДанныеЗаполнения.Добавить(ЭД.Payer_50.Address, "Payer_50.Address");
	ДанныеЗаполнения.Добавить(ЭД.Payer_50.Place, "Payer_50.Place");
	ДанныеЗаполнения.Добавить(ЭД.Payer_50.Country.digital, "Payer_50.CountryDigital");
	ДанныеЗаполнения.Добавить(ЭД.Payer_50.Country.iso2, "Payer_50.CountryIso2");
	ДанныеЗаполнения.Добавить(ЭД.Payer_50.Country.name, "Payer_50.CountryName");
	Если ЭД.DocSum_33B.DocSum <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(Формат(ЭД.DocSum_33B.DocSum.docSum, "ЧДЦ=2; ЧРД=.; ЧГ="), "DocSum.DocSum");
		ДанныеЗаполнения.Добавить(ЭД.DocSum_33B.DocSum.currCode, "DocSum.CurrCode");
		ДанныеЗаполнения.Добавить(ЭД.DocSum_33B.DocSum.currIsoCode, "DocSum.CurrIsoCode");
	Иначе
		ДанныеЗаполнения.Добавить("0.00", "DocSum.DocSum");
	КонецЕсли;
	ДанныеЗаполнения.Добавить(ЭД.DocData.OrgData.inn, "OrgData.Inn");
	ДанныеЗаполнения.Добавить(ЭД.DocData.OrgData.orgName, "OrgData.OrgName");
	Если ЭД.DocData.AuthPers <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(ЭД.DocData.AuthPers.Name, "AuthPers.Name");
		ДанныеЗаполнения.Добавить(ЭД.DocData.AuthPers.Telfax, "AuthPers.Telfax");
	КонецЕсли;
	ДанныеЗаполнения.Добавить(ЭД.Beneficiar_59.AccBeneficiar, "Beneficiar_59.AccBeneficiar");
	ДанныеЗаполнения.Добавить(ЭД.Beneficiar_59.Name, "Beneficiar_59.Name");
	ДанныеЗаполнения.Добавить(ЭД.Beneficiar_59.Address, "Beneficiar_59.Address");
	ДанныеЗаполнения.Добавить(ЭД.Beneficiar_59.Place, "Beneficiar_59.Place");
	ДанныеЗаполнения.Добавить(ЭД.Beneficiar_59.Country.digital, "Beneficiar_59.CountryDigital");
	ДанныеЗаполнения.Добавить(ЭД.Beneficiar_59.Country.iso2, "Beneficiar_59.CountryIso2");
	ДанныеЗаполнения.Добавить(ЭД.Beneficiar_59.Country.name, "Beneficiar_59.CountryName");
	ДанныеЗаполнения.Добавить(ЭД.Beneficiar_59.Inn, "Beneficiar_59.Inn");
	ДанныеЗаполнения.Добавить(ЭД.Beneficiar_59.BeiCode, "Beneficiar_59.BeiCode");
	Если ЭД.BankPayer_52 <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(ЭД.BankPayer_52.BIC, "BankPayer_52.BIC");
		ДанныеЗаполнения.Добавить(ЭД.BankPayer_52.Name, "BankPayer_52.Name");
		ДанныеЗаполнения.Добавить(ЭД.BankPayer_52.Place, "BankPayer_52.Place");
	КонецЕсли;
	Если ЭД.ImediaBank_56 <> Неопределено Тогда
		Если ЭД.ImediaBank_56.CliringCode <> Неопределено Тогда
			ДанныеЗаполнения.Добавить(ЭД.ImediaBank_56.CliringCode.countryCode, "ImediaBank_56.ClirCountryCode");
			ДанныеЗаполнения.Добавить(ЭД.ImediaBank_56.CliringCode.name, "ImediaBank_56.ClirName");
			ДанныеЗаполнения.Добавить(ЭД.ImediaBank_56.CliringCode.note, "ImediaBank_56.ClirNote");
			ДанныеЗаполнения.Добавить(ЭД.ImediaBank_56.CliringCode.code, "ImediaBank_56.ClirCode");
		КонецЕсли;
		ДанныеЗаполнения.Добавить(ЭД.ImediaBank_56.BIC, "ImediaBank_56.BIC");
		ДанныеЗаполнения.Добавить(ЭД.ImediaBank_56.Name, "ImediaBank_56.Name");
		ДанныеЗаполнения.Добавить(ЭД.ImediaBank_56.BranchName, "ImediaBank_56.BranchName");
		ДанныеЗаполнения.Добавить(ЭД.ImediaBank_56.Address, "ImediaBank_56.Address");
		ДанныеЗаполнения.Добавить(ЭД.ImediaBank_56.Place, "ImediaBank_56.Place");
		Если ЭД.ImediaBank_56.Country <> Неопределено Тогда
			ДанныеЗаполнения.Добавить(ЭД.ImediaBank_56.Country.digital, "ImediaBank_56.CountryDigital");
			ДанныеЗаполнения.Добавить(ЭД.ImediaBank_56.Country.iso2, "ImediaBank_56.CountryIso2");
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения.Добавить(ЭД.BankBeneficiar_57.BIC, "BankBeneficiar_57.BIC");
	Если ЭД.BankBeneficiar_57.CliringCode <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(ЭД.BankBeneficiar_57.CliringCode.countryCode, "BankBeneficiar_57.ClirCountryCode");
		ДанныеЗаполнения.Добавить(ЭД.BankBeneficiar_57.CliringCode.name, "BankBeneficiar_57.ClirName");
		ДанныеЗаполнения.Добавить(ЭД.BankBeneficiar_57.CliringCode.note, "BankBeneficiar_57.ClirNote");
		ДанныеЗаполнения.Добавить(ЭД.BankBeneficiar_57.CliringCode.code, "BankBeneficiar_57.ClirCode");
	КонецЕсли;
	ДанныеЗаполнения.Добавить(ЭД.BankBeneficiar_57.CorrAcc, "BankBeneficiar_57.CorrAcc");
	ДанныеЗаполнения.Добавить(ЭД.BankBeneficiar_57.Name, "BankBeneficiar_57.Name");
	ДанныеЗаполнения.Добавить(ЭД.BankBeneficiar_57.BranchName, "BankBeneficiar_57.BranchName");
	ДанныеЗаполнения.Добавить(ЭД.BankBeneficiar_57.Address, "BankBeneficiar_57.Address");
	ДанныеЗаполнения.Добавить(ЭД.BankBeneficiar_57.Place, "BankBeneficiar_57.Place");
	Если ЭД.BankBeneficiar_57.Country <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(ЭД.BankBeneficiar_57.Country.digital, "BankBeneficiar_57.CountryDigital");
		ДанныеЗаполнения.Добавить(ЭД.BankBeneficiar_57.Country.iso2, "BankBeneficiar_57.CountryIso2");
	КонецЕсли;
	Если ЭД.CurrDealInquiry <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(ЭД.CurrDealInquiry.docNum, "CurrDealInquiry.DocNum");
		ДанныеЗаполнения.Добавить(Формат(ЭД.CurrDealInquiry.docDate, "ДФ=yyyy-MM-dd"), "CurrDealInquiry.DocDate");
	КонецЕсли;
	
	ДобавитьЗаписиВДайджест(ДанныеЗаполнения, СтрокаВозврата);
	
	СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
	
	ЕстьТабличнаяЧасть = Ложь;
	
	Если ЭД.VoSumInfo <> Неопределено И ЭД.VoSumInfo.VoInfo.Количество() Тогда
		ЕстьТабличнаяЧасть = Истина;
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES" + Символ(10) + "Table=VoSum" + Символ(10);
		Для Каждого VoInfo Из ЭД.VoSumInfo.VoInfo Цикл
			ДанныеЗаполненияСтроки = Новый СписокЗначений;
			ДанныеЗаполненияСтроки.Добавить(VoInfo.Vo, "Vo");
			ДанныеЗаполненияСтроки.Добавить(VoInfo.PsNum, "PsNum");
			ДанныеЗаполненияСтроки.Добавить(Формат(VoInfo.Sum.docSum, "ЧДЦ=2; ЧРД=.; ЧГ="), "DocSum");
			ДанныеЗаполненияСтроки.Добавить(VoInfo.Sum.currCode, "CurrCode");
			ДанныеЗаполненияСтроки.Добавить(VoInfo.Sum.currIsoCode, "CurrIsoCode");
			ДанныеЗаполненияСтроки.Добавить(VoInfo.ExpectedDate, "ExpectedDate");
			Если VoInfo.Contract <> Неопределено Тогда
				ДанныеЗаполненияСтроки.Добавить(VoInfo.Contract.numCheck, "Contract.NumCheck");
				ДанныеЗаполненияСтроки.Добавить(VoInfo.Contract.num, "Contract.Num");
				ДанныеЗаполненияСтроки.Добавить(Формат(VoInfo.Contract.date, "ДФ=yyyy-MM-dd"), "Contract.Date");
			КонецЕсли;
			Если VoInfo.ContractSum <> Неопределено Тогда
				ДанныеЗаполненияСтроки.Добавить(Формат(VoInfo.ContractSum.docSum, "ЧДЦ=2; ЧРД=.; ЧГ="), "ContractSum.DocSum");
				ДанныеЗаполненияСтроки.Добавить(VoInfo.ContractSum.currCode, "ContractSum.CurrCode");
				ДанныеЗаполненияСтроки.Добавить(VoInfo.ContractSum.currIsoCode, "ContractSum.CurrIsoCode");
			КонецЕсли;
			ДобавитьЗаписиВДайджест(ДанныеЗаполненияСтроки, СтрокаВозврата);
			СтрокаВозврата = СтрокаВозврата + "#" + Символ(10);
		КонецЦикла;
	
		СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
		
	КонецЕсли;

	Если ЭД.VoDocs <> Неопределено И ЭД.VoDocs.VoDoc.Количество() Тогда
		Если Не ЕстьТабличнаяЧасть Тогда
			СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES";
		КонецЕсли;
		ЕстьТабличнаяЧасть = Истина;
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "Table=VoDocs" + Символ(10);
		Для Каждого VoDoc Из ЭД.VoDocs.VoDoc Цикл
			ДанныеЗаполненияСтроки = Новый СписокЗначений;
			ДанныеЗаполненияСтроки.Добавить(VoDoc.DocType, "DocType");
			ДанныеЗаполненияСтроки.Добавить(VoDoc.DocData.docNum, "DocNum");
			ДанныеЗаполненияСтроки.Добавить(Формат(VoDoc.DocData.docDate, "ДФ=yyyy-MM-dd"), "DocDate");
			ДобавитьЗаписиВДайджест(ДанныеЗаполненияСтроки, СтрокаВозврата);
			СтрокаВозврата = СтрокаВозврата + "#" + Символ(10);
		КонецЦикла;
		СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
	КонецЕсли;

	Если ЭД.Codes23e <> Неопределено И ЭД.Codes23e.Code23e.Количество() Тогда
		Если Не ЕстьТабличнаяЧасть Тогда
			СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES";
		КонецЕсли;
		ЕстьТабличнаяЧасть = Истина;
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "Table=Codes23e" + Символ(10);
		Для Каждого Code23e Из ЭД.Codes23e.Code23e Цикл
			ДанныеЗаполненияСтроки = Новый СписокЗначений;
			ДанныеЗаполненияСтроки.Добавить(Code23e.Code23e, "Code");
			ДобавитьЗаписиВДайджест(ДанныеЗаполненияСтроки, СтрокаВозврата);
			СтрокаВозврата = СтрокаВозврата + "#" + Символ(10);
		КонецЦикла;
		СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
	КонецЕсли;
	
	Если ЭД.Attachments <> Неопределено И ЭД.Attachments.Attachment.Количество() Тогда
		Если Не ЕстьТабличнаяЧасть Тогда
			СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES";
		КонецЕсли;
		ЕстьТабличнаяЧасть = Истина;
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "Table=Attachments" + Символ(10);
		Для Каждого Attachment Из ЭД.Attachments.Attachment Цикл
			ДанныеЗаполненияСтроки = Новый СписокЗначений;
			ДанныеЗаполненияСтроки.Добавить(Attachment.AttachmentName, "Attachment.AttachmentName");
			ДанныеЗаполненияСтроки.Добавить(Attachment.Description, "Attachment.Description");
			ДанныеЗаполненияСтроки.Добавить(Attachment.Body, "Attachment.Body");
			ДобавитьЗаписиВДайджест(ДанныеЗаполненияСтроки, СтрокаВозврата);
			СтрокаВозврата = СтрокаВозврата + "#" + Символ(10);
		КонецЦикла;
		СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
	КонецЕсли;
	
	Возврат СтрокаВозврата;
	
КонецФункции

Функция ДайджестПорученияНаПокупкуВалютыСбербанк(НастройкаОбмена, ДвоичныеДанныеФайла)
	
	ОбъектXML = Новый ЧтениеXML;
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
	ОбъектXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
	ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	
	ДанныеЗаполнения = Новый СписокЗначений;
	
	Отправитель = ПредставлениеОтправителяСбербанк();
		
	СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10) + "Sender="
		+ Отправитель + Символ(10) + "ExtId=" + ЭД.docExtId + Символ(10) + "FIELDS" + Символ(10);
		
	ДанныеЗаполнения.Добавить(Формат(ЭД.DocData.docDate, "ДФ=yyyy-MM-dd"), "DocDate");
	ДанныеЗаполнения.Добавить(ЭД.DocData.docNum, "DocNum");
	ДанныеЗаполнения.Добавить(ЭД.DocData.bankName, "BankName");
	ДанныеЗаполнения.Добавить(ЭД.DocData.OrgData.inn, "OrgData.Inn");
	ДанныеЗаполнения.Добавить(ЭД.DocData.OrgData.orgName, "OrgData.OrgName");
	ДанныеЗаполнения.Добавить(ЭД.DocData.OrgData.okpo, "OrgData.Okpo");
	Если ЭД.DocData.AuthPers <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(ЭД.DocData.AuthPers.Name, "AuthPers.Name");
		ДанныеЗаполнения.Добавить(ЭД.DocData.AuthPers.Telfax, "AuthPers.Telfax");
	КонецЕсли;
	ДанныеЗаполнения.Добавить(ЭД.Trans.Acc.account, "Acc.Account");
	ДанныеЗаполнения.Добавить(ЭД.Trans.Acc.bic, "Acc.Bic");
	ДанныеЗаполнения.Добавить(ЭД.Trans.Acc.BankName, "Acc.BankName");
	ДанныеЗаполнения.Добавить(Формат(ЭД.Trans.AmountTransf.SumBuy.docSum, "ЧДЦ=2; ЧРД=.; ЧГ="), "AmountTransf.Buy");
	ДанныеЗаполнения.Добавить(ЭД.Trans.AmountTransf.SumBuy.currCode, "AmountTransf.SumCurrCode");
	ДанныеЗаполнения.Добавить(ЭД.Trans.AmountTransf.SumBuy.currIsoCode, "AmountTransf.SumCurrIsoCode");
	Если ЭД.Trans.AmountTransf.SumThrough <> Неопределено Тогда
		СуммаСредствПокупкиСтрокой = Формат(ЭД.Trans.AmountTransf.SumThrough.docSum, "ЧДЦ=2; ЧРД=.; ЧГ=");
		ДанныеЗаполнения.Добавить(СуммаСредствПокупкиСтрокой, "AmountTransf.SumThrough");
		ДанныеЗаполнения.Добавить(ЭД.Trans.AmountTransf.SumThrough.currCode, "AmountTransf.SumThrough.CurrCode");
		ДанныеЗаполнения.Добавить(ЭД.Trans.AmountTransf.SumThrough.currIsoCode, "AmountTransf.SumThrough.CurrIsoCode");
	КонецЕсли;
	Если ЭД.Trans.TermBuy <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(ЭД.Trans.TermBuy.DealType, "TermBuy.DealType");
	КонецЕсли;
	ДанныеЗаполнения.Добавить(ЭД.Trans.AccountNumTransf.type, "AccountNumTransf.Type");
	ДанныеЗаполнения.Добавить(ЭД.Trans.AccountNumTransf.accNum, "AccountNumTransf.AccNum");
	ДанныеЗаполнения.Добавить(ЭД.Trans.AccountNumTransf.Bank.bic, "AccountNumTransf.Bic");
	ДанныеЗаполнения.Добавить(ЭД.Trans.AccountNumTransf.Bank.Name, "AccountNumTransf.Name");
	ДанныеЗаполнения.Добавить(ЭД.Trans.AccountNumTransf.Bank.BankSWIFT, "AccountNumTransf.BankSWIFT");
	ДанныеЗаполнения.Добавить(ЭД.Trans.PayDocBuy.type, "PayDocBuy.Type");
	Если ЭД.Trans.PayDocBuy.DocAccount <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(ЭД.Trans.PayDocBuy.DocAccount.accNum, "PayDocBuy.DocAccount");
		ДанныеЗаполнения.Добавить(ЭД.Trans.PayDocBuy.DocAccount.bic, "PayDocBuy.DocBic");
		ДанныеЗаполнения.Добавить(ЭД.Trans.PayDocBuy.DocAccount.BankName, "PayDocBuy.DocBankName");
	КонецЕсли;
	Если ЭД.Trans.PayDocBuy.RecAccount <> Неопределено Тогда
		Если ЭД.Trans.PayDocBuy.RecAccount.Doc <> Неопределено Тогда
			ДанныеЗаполнения.Добавить(ЭД.Trans.PayDocBuy.RecAccount.Doc.docNum, "PayDocBuy.RecDocNum");
			ДатаДокументаПеречисленияСредствСтрокой = Формат(ЭД.Trans.PayDocBuy.RecAccount.Doc.docDate, "ДФ=yyyy-MM-dd");
			ДанныеЗаполнения.Добавить(ДатаДокументаПеречисленияСредствСтрокой, "PayDocBuy.RecDocDate");
		КонецЕсли;
		Если ЭД.Trans.PayDocBuy.RecAccount.Account <> Неопределено Тогда
			ДанныеЗаполнения.Добавить(ЭД.Trans.PayDocBuy.RecAccount.Account.accNum, "PayDocBuy.RecAccNum");
			ДанныеЗаполнения.Добавить(ЭД.Trans.PayDocBuy.RecAccount.Account.bic, "PayDocBuy.RecBic");
			ДанныеЗаполнения.Добавить(ЭД.Trans.PayDocBuy.RecAccount.Account.BankName, "PayDocBuy.RecBankName");
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Trans.Commis <> Неопределено Тогда
		Если ЭД.Trans.Commis.ComAcc <> Неопределено Тогда
			ДанныеЗаполнения.Добавить(ЭД.Trans.Commis.ComAcc.accNum, "Commis.AccNum");
			ДанныеЗаполнения.Добавить(ЭД.Trans.Commis.ComAcc.bic, "Commis.Bic");
			ДанныеЗаполнения.Добавить(ЭД.Trans.Commis.ComAcc.BankName, "Commis.BankName");
		КонецЕсли;
		Если ЭД.Trans.Commis.ComOrder <> Неопределено Тогда
			ДанныеЗаполнения.Добавить(ЭД.Trans.Commis.ComOrder.numPayDoc, "Commis.NumPayDoc");
			ДанныеЗаполнения.Добавить(ЭД.Trans.Commis.ComOrder.datePayDoc, "Commis.DatePayDoc");
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения.Добавить(ЭД.BankAgreement, "BankAgreement");
	
	ДобавитьЗаписиВДайджест(ДанныеЗаполнения, СтрокаВозврата);
	
	СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
	
	Возврат СтрокаВозврата;
	
КонецФункции

Функция ДайджестПорученияНаПродажуВалютыСбербанк(НастройкаОбмена, ДвоичныеДанныеФайла)
	
	ОбъектXML = Новый ЧтениеXML;
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
	ОбъектXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
	ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	
	ДанныеЗаполнения = Новый СписокЗначений;
	
	Отправитель = ПредставлениеОтправителяСбербанк();
		
	СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10) + "Sender="
		+ Отправитель + Символ(10) + "ExtId=" + ЭД.docExtId + Символ(10) + "FIELDS" + Символ(10);
		
	ДанныеЗаполнения.Добавить(Формат(ЭД.DocData.docDate, "ДФ=yyyy-MM-dd"), "DocDate");
	ДанныеЗаполнения.Добавить(ЭД.DocData.docNum, "DocNum");
	ДанныеЗаполнения.Добавить(ЭД.DocData.bankName, "BankName");
	ДанныеЗаполнения.Добавить(ЭД.DocData.OrgData.inn, "OrgData.Inn");
	ДанныеЗаполнения.Добавить(ЭД.DocData.OrgData.orgName, "OrgData.OrgName");
	ДанныеЗаполнения.Добавить(ЭД.DocData.OrgData.okpo, "OrgData.Okpo");
	Если ЭД.DocData.AuthPers <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(ЭД.DocData.AuthPers.Name, "AuthPers.Name");
		ДанныеЗаполнения.Добавить(ЭД.DocData.AuthPers.Telfax, "AuthPers.Telfax");
	КонецЕсли;
	ДанныеЗаполнения.Добавить(ЭД.Trans.AccountSell.accNum, "AccountSell.Account");
	ДанныеЗаполнения.Добавить(ЭД.Trans.AccountSell.Bank.bic, "AccountSell.Bic");
	ДанныеЗаполнения.Добавить(ЭД.Trans.AccountSell.Bank.Name, "AccountSell.BankName");
	ДанныеЗаполнения.Добавить(Формат(ЭД.Trans.SumSell.docSum, "ЧДЦ=2; ЧРД=.; ЧГ="), "SumSell.Sell");
	ДанныеЗаполнения.Добавить(ЭД.Trans.SumSell.currCode, "SumSell.SumCurrCode");
	ДанныеЗаполнения.Добавить(ЭД.Trans.SumSell.currIsoCode, "SumSell.SumCurrIsoCode");
	ДанныеЗаполнения.Добавить(ЭД.Trans.TermSell.DealType, "TermSell.DealType");
	ДанныеЗаполнения.Добавить(ЭД.Trans.AccountCredit.type, "AccountCredit.Type");
	ДанныеЗаполнения.Добавить(ЭД.Trans.AccountCredit.accNum, "AccountCredit.AccNum");
	ДанныеЗаполнения.Добавить(ЭД.Trans.AccountCredit.Bank.bic, "AccountCredit.Bic");
	ДанныеЗаполнения.Добавить(ЭД.Trans.AccountCredit.Bank.Name, "AccountCredit.Name");
	
	Если ЭД.Trans.Commis <> Неопределено Тогда
		Если ЭД.Trans.Commis.ComAcc <> Неопределено Тогда
			ДанныеЗаполнения.Добавить(ЭД.Trans.Commis.ComAcc.accNum, "Commis.AccNum");
			ДанныеЗаполнения.Добавить(ЭД.Trans.Commis.ComAcc.bic, "Commis.Bic");
			ДанныеЗаполнения.Добавить(ЭД.Trans.Commis.ComAcc.BankName, "Commis.BankName");
		КонецЕсли;
		Если ЭД.Trans.Commis.ComOrder <> Неопределено Тогда
			ДанныеЗаполнения.Добавить(ЭД.Trans.Commis.ComOrder.numPayDoc, "Commis.NumPayDoc");
			ДанныеЗаполнения.Добавить(ЭД.Trans.Commis.ComOrder.datePayDoc, "Commis.DatePayDoc");
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения.Добавить(ЭД.BankAgreement, "BankAgreement");
	
	ДобавитьЗаписиВДайджест(ДанныеЗаполнения, СтрокаВозврата);
	
	СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
	
	Возврат СтрокаВозврата;
	
КонецФункции

Функция ДайджестРаспоряженияНаОбязательнуюПродажуВалютыСбербанк(НастройкаОбмена, ДвоичныеДанныеФайла)
	
	ОбъектXML = Новый ЧтениеXML;
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
	ОбъектXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
	ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	
	ДанныеЗаполнения = Новый СписокЗначений;
	
	Отправитель = ПредставлениеОтправителяСбербанк();
		
	СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10) + "Sender="
		+ Отправитель + Символ(10) + "ExtId=" + ЭД.docExtId + Символ(10) + "FIELDS" + Символ(10);
		
	ДанныеЗаполнения.Добавить(ЭД.DocData.docNum, "DocData.DocNum");
	ДанныеЗаполнения.Добавить(Формат(ЭД.DocData.docDate, "ДФ=yyyy-MM-dd"), "DocData.DocDate");
	ДанныеЗаполнения.Добавить(ЭД.DocData.OrgData.inn, "DocData.OrgData.INN");
	ДанныеЗаполнения.Добавить(ЭД.DocData.OrgData.orgName, "DocData.OrgData.OrgName");
	ДанныеЗаполнения.Добавить(ЭД.DocData.OrgData.okpo, "DocData.OrgData.Okpo");
	Если ЭД.DocData.AuthPers <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(ЭД.DocData.AuthPers.Name, "DocData.AuthPers.Name");
		ДанныеЗаполнения.Добавить(ЭД.DocData.AuthPers.Telfax, "DocData.AuthPers.Telfax");
	КонецЕсли;
	
	ДанныеЗаполнения.Добавить(ЭД.AccDoc.AccNum, "AccDoc.AccNum");
	ДанныеЗаполнения.Добавить(ЭД.AccDoc.Bank.bic, "AccDoc.Bank.Bic");
	ДанныеЗаполнения.Добавить(ЭД.AccDoc.Bank.Name, "AccDoc.Bank.Name");
	
	ДанныеЗаполнения.Добавить(Формат(ЭД.TotalSum.docSum, "ЧДЦ=2; ЧРД=.; ЧГ="), "TotalSum.DocSum");
	ДанныеЗаполнения.Добавить(ЭД.TotalSum.currCode, "TotalSum.CurrCode");
	ДанныеЗаполнения.Добавить(ЭД.TotalSum.currIsoCode, "TotalSum.CurrIsoCode");
	
	ДанныеЗаполнения.Добавить(Формат(ЭД.Subtract.Sum.docSum, "ЧДЦ=2; ЧРД=.; ЧГ="), "Subtract.Sum.DocSum");
	ДанныеЗаполнения.Добавить(ЭД.Subtract.Sum.currIsoCode, "Subtract.Sum.CurrIsoCode");
	ДанныеЗаполнения.Добавить(ЭД.Subtract.Substantiation, "Substantiation");
	
	Если ЭД.ObligatorySale <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(ЭД.ObligatorySale.Percent, "ObligatorySale.Percent");
		ДанныеЗаполнения.Добавить(Формат(ЭД.ObligatorySale.Sum.docSum, "ЧДЦ=2; ЧРД=.; ЧГ="), "ObligatorySale.Sum.DocSum");
		ДанныеЗаполнения.Добавить(ЭД.ObligatorySale.Sum.currIsoCode, "ObligatorySale.Sum.CurrIsoCode");
		ДанныеЗаполнения.Добавить(ЭД.ObligatorySale.TermSale.DealType, "ObligatorySale.TermSale.DealType");
			
		ДанныеЗаполнения.Добавить(ЭД.ObligatorySale.Account.type, "ObligatorySale.Type");
		ДанныеЗаполнения.Добавить(ЭД.ObligatorySale.Account.accNum, "ObligatorySale.Account.AccNum");
		ДанныеЗаполнения.Добавить(ЭД.ObligatorySale.Account.Bank.Name, "ObligatorySale.Account.Bank.Bic");
	КонецЕсли;
	
	Если ЭД.Sell <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(Формат(ЭД.Sell.Sum.docSum, "ЧДЦ=2; ЧРД=.; ЧГ="), "Sell.Sum.DocSum");
		ДанныеЗаполнения.Добавить(ЭД.Sell.Sum.DealType.DealType, "Sell.DealType.DealType");
		ДанныеЗаполнения.Добавить(ЭД.Sell.Acc.type, "Sell.Account.Type");
		ДанныеЗаполнения.Добавить(ЭД.Sell.Acc.accNum, "Sell.Account.AccNum");
		ДанныеЗаполнения.Добавить(ЭД.Sell.Acc.Bank.bic, "Sell.Account.Bank.Bic");
		ДанныеЗаполнения.Добавить(ЭД.Sell.Acc.Bank.Name, "Sell.Account.Bank.Name");
	КонецЕсли;
	
	Если ЭД.Trans <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(Формат(ЭД.Trans.Sum.docSum, "ЧДЦ=2; ЧРД=.; ЧГ="), "Trans.Sum.DocSum");
		ДанныеЗаполнения.Добавить(ЭД.Trans.transTo, "Trans.TransTo");
		ДанныеЗаполнения.Добавить(ЭД.Trans.AccTrans.accNum, "Trans.AccTrans.AccNum");
		ДанныеЗаполнения.Добавить(ЭД.Trans.AccTrans.Bank.BankSWIFT, "Trans.AccTrans.Bank.BankSWIFT");
	КонецЕсли;
	
	Если ЭД.Commis <> Неопределено Тогда
		Если ЭД.Commis.ComAcc <> Неопределено Тогда
			ДанныеЗаполнения.Добавить(ЭД.Commis.ComAcc.accNum, "Commision.ComAcc.AccNum");
			ДанныеЗаполнения.Добавить(ЭД.Commis.ComAcc.bic, "Commision.ComAcc.Bank.Bic");
			ДанныеЗаполнения.Добавить(ЭД.Commis.ComAcc.BankName, "Commision.ComAcc.Bank.Name");
		КонецЕсли;
	КонецЕсли;

	Если ЭД.CurrDealInquiry <> Неопределено Тогда
		ДанныеЗаполнения.Добавить(ЭД.CurrDealInquiry.docNum, "CurrDealInquiry.DocNum");
		ДанныеЗаполнения.Добавить(ЭД.CurrDealInquiry.docDate, "CurrDealInquiry.DocDate");
	КонецЕсли;
	
	ДобавитьЗаписиВДайджест(ДанныеЗаполнения, СтрокаВозврата);
	
	СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
	
	ЕстьТабличнаяЧасть = Ложь;
	
	Если ЭД.VoSumInfo <> Неопределено И ЭД.VoSumInfo.VoInfo.Количество() Тогда
		ЕстьТабличнаяЧасть = Истина;
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES" + Символ(10) + "Table=VoSum" + Символ(10);
		Для Каждого VoInfo Из ЭД.VoSumInfo.VoInfo Цикл
			ДанныеЗаполненияСтроки = Новый СписокЗначений;
			ДанныеЗаполненияСтроки.Добавить(VoInfo.Vo, "Vo");
			ДанныеЗаполненияСтроки.Добавить(VoInfo.PsNum, "PsNum");
			ДанныеЗаполненияСтроки.Добавить(Формат(VoInfo.Sum.docSum, "ЧДЦ=2; ЧРД=.; ЧГ="), "DocSum");
			ДанныеЗаполненияСтроки.Добавить(VoInfo.Sum.currCode, "CurrCode");
			ДанныеЗаполненияСтроки.Добавить(VoInfo.ExpectedDate, "ExpectedDate");
			Если VoInfo.Contract <> Неопределено Тогда
				ДанныеЗаполненияСтроки.Добавить(VoInfo.Contract.numCheck, "Contract.NumCheck");
				ДанныеЗаполненияСтроки.Добавить(VoInfo.Contract.num, "Contract.Num");
				ДанныеЗаполненияСтроки.Добавить(Формат(VoInfo.Contract.date, "ДФ=yyyy-MM-dd"), "Contract.Date");
			КонецЕсли;
			Если VoInfo.ContractSum <> Неопределено Тогда
				ДанныеЗаполненияСтроки.Добавить(Формат(VoInfo.ContractSum.docSum, "ЧДЦ=2; ЧРД=.; ЧГ="), "ContractSum.DocSum");
				ДанныеЗаполненияСтроки.Добавить(VoInfo.ContractSum.currCode, "ContractSum.CurrCode");
			КонецЕсли;
			ДобавитьЗаписиВДайджест(ДанныеЗаполненияСтроки, СтрокаВозврата);
			СтрокаВозврата = СтрокаВозврата + "#" + Символ(10);
		КонецЦикла;
	
		СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
		
	КонецЕсли;

	Если ЭД.VoDocs <> Неопределено И ЭД.VoDocs.VoDoc.Количество() Тогда
		Если Не ЕстьТабличнаяЧасть Тогда
			СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES";
		КонецЕсли;
		ЕстьТабличнаяЧасть = Истина;
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "Table=VoDocs" + Символ(10);
		Для Каждого VoDoc Из ЭД.VoDocs.VoDoc Цикл
			ДанныеЗаполненияСтроки = Новый СписокЗначений;
			ДанныеЗаполненияСтроки.Добавить(VoDoc.DocType, "DocType");
			ДанныеЗаполненияСтроки.Добавить(VoDoc.DocData.docNum, "DocNum");
			ДанныеЗаполненияСтроки.Добавить(Формат(VoDoc.DocData.docDate, "ДФ=yyyy-MM-dd"), "DocDate");
			ДобавитьЗаписиВДайджест(ДанныеЗаполненияСтроки, СтрокаВозврата);
			СтрокаВозврата = СтрокаВозврата + "#" + Символ(10);
		КонецЦикла;
		СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
	КонецЕсли;

	Если ЭД.Attachments <> Неопределено И ЭД.Attachments.Attachment.Количество() Тогда
		Если Не ЕстьТабличнаяЧасть Тогда
			СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES";
		КонецЕсли;
		ЕстьТабличнаяЧасть = Истина;
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "Table=Attachments" + Символ(10);
		Для Каждого Attachment Из ЭД.Attachments.Attachment Цикл
			ДанныеЗаполненияСтроки = Новый СписокЗначений;
			ДанныеЗаполненияСтроки.Добавить(Attachment.AttachmentName, "Attachment.AttachmentName");
			ДанныеЗаполненияСтроки.Добавить(Attachment.Description, "Attachment.Description");
			ДанныеЗаполненияСтроки.Добавить(Attachment.Body, "Attachment.Body");
			ДобавитьЗаписиВДайджест(ДанныеЗаполненияСтроки, СтрокаВозврата);
			СтрокаВозврата = СтрокаВозврата + "#" + Символ(10);
		КонецЦикла;
		СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
	КонецЕсли;
	
	Возврат СтрокаВозврата;
	
КонецФункции

Функция ДайджестПисьмаСбербанк(НастройкаОбмена, ДвоичныеДанныеФайла)
	
	ОбъектXML = Новый ЧтениеXML;
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
	ОбъектXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
	ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	
	ДанныеЗаполнения = Новый СписокЗначений;
	
	Отправитель = ПредставлениеОтправителяСбербанк();
		
	СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10) + "Sender="
		+ Отправитель + Символ(10) + "ExtId=" + ЭД.docExtId + Символ(10) + "FIELDS" + Символ(10);
		
	ДанныеЗаполнения.Добавить(Формат(ЭД.DocData.docDate, "ДФ=yyyy-MM-dd"), "DocData.DocDate");
	ДанныеЗаполнения.Добавить(ЭД.DocData.docNum, "DocData.DocNumber");
	ДанныеЗаполнения.Добавить(ЭД.DocData.bankName, "DocData.BankName");
	ДанныеЗаполнения.Добавить(ЭД.Type, "Type");
	ДанныеЗаполнения.Добавить(ЭД.Theme, "Theme");
	ДанныеЗаполнения.Добавить(ЭД.AddInfo, "AddInfo");
	
	ДобавитьЗаписиВДайджест(ДанныеЗаполнения, СтрокаВозврата);
	
	СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
	
	ЕстьТабличнаяЧасть = Ложь;
	
	Если ЭД.Attachments <> Неопределено И ЭД.Attachments.Attachment.Количество() Тогда
		Если Не ЕстьТабличнаяЧасть Тогда
			СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES";
		КонецЕсли;
		ЕстьТабличнаяЧасть = Истина;
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "Table=Attachments" + Символ(10);
		Для Каждого Attachment Из ЭД.Attachments.Attachment Цикл
			ДанныеЗаполненияСтроки = Новый СписокЗначений;
			ДанныеЗаполненияСтроки.Добавить(Attachment.AttachmentName, "Attachment.AttachmentName");
			ДанныеЗаполненияСтроки.Добавить(Attachment.Description, "Attachment.Description");
			СтрокаДвоичныхДанных = СтрЗаменить(СтрЗаменить(Base64Строка(Attachment.Body), Символы.ПС, ""), Символы.ВК, "");
			ДанныеЗаполненияСтроки.Добавить(СтрокаДвоичныхДанных, "Attachment.Body");
			ДобавитьЗаписиВДайджест(ДанныеЗаполненияСтроки, СтрокаВозврата);
			СтрокаВозврата = СтрокаВозврата + "#" + Символ(10);
		КонецЦикла;
		СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
	КонецЕсли;
	
	Возврат СтрокаВозврата;
	
КонецФункции

Процедура ДобавитьЗаписиВДайджест(ДанныеЗаполненияСтроки, СтрокаВозврата)

	Для каждого Элемент Из ДанныеЗаполненияСтроки Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			СтрокаВозврата = СтрокаВозврата + Элемент.Представление + "=" + Элемент.Значение + Символ(10);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ИнформацияОВнешнейКомпоненте(АдресВнешнейКомпоненты)
	
	ДвоичныеДанныеВК = ПолучитьИзВременногоХранилища(АдресВнешнейКомпоненты);
	ВремФайл = ПолучитьИмяВременногоФайла("zip");
	ДвоичныеДанныеВК.Записать(ВремФайл);
	
	ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
	
	ЧтениеФайла = Новый ЧтениеZipФайла(ВремФайл);
	НайденаИнформация = Ложь;
	
	Для Каждого Элемент Из ЧтениеФайла.Элементы Цикл
		Если ВРег(Элемент.Имя) = "INFO.XML" Тогда
			НайденаИнформация = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НайденаИнформация Тогда
		Операция = НСтр("ru = 'Чтение информации о файле внешнего модуля.'");
		ТекстОшибки = НСтр("ru = 'В архиве внешней компоненты отсутствует файл INFO.XML'");
		ТекстСообщения = НСтр("ru = 'При чтении данных внешней компоненты произошла ошибка.'");
		ОбработатьОшибку(Операция, ТекстОшибки);
		ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
		ФайловаяСистема.УдалитьВременныйФайл(ВремФайл);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЧтениеФайла.Извлечь(Элемент, ВременныйКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	ФайлИнформации = ВременныйКаталог + Элемент.Имя;
	
	СтруктураВозврата = ПараметрыВК(ФайлИнформации);
	
	ЧтениеФайла.Закрыть();
	ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
	ФайловаяСистема.УдалитьВременныйФайл(ВремФайл);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура СохранитьТикетКакВнешнийИдентификаторСообщенияОбменаСбербанк(НастройкаОбмена, Тикет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СообщениеОбменСБанками.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	               |	И СообщениеОбменСБанками.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("Идентификатор", Тикет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИзменяемыеРеквизиты = Новый Структура("ВнешнийИдентификатор", Тикет);
		ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(Выборка.Ссылка, ИзменяемыеРеквизиты);
	КонецЕсли;
	
	ОбменСБанкамиСлужебныйВызовСервера.УдалитьИдентификаторЗапроса(НастройкаОбмена, Тикет);
	
КонецПроцедуры


// Производит расчет свертки пароля по алгоритму SRP.
//
// Параметры:
//  Логин - Строка - название учетной записи на сервере банка
//  Пароль - Строка - пароль для учетной записи
//  Соль - ДвоичныеДанные - соль , значение полученное от сервера банка
//  B - ДвоичныеДанные - значение полученное от сервера банка
//  K - Строка - рассчитанное значение параметра
//  A - Строка - рассчитанное значение параметра.
//
Процедура РассчитатьСверткуПароляСбербанк(Логин, Пароль, Соль, B, K, A)

	СлучайноеЧисло_a = СлучайноеЧисло256Бит();
	N = 125617018995153554710546479714086468244499594888726646874671447258204721048803;
	Константа_k = 1255395351873185901587718910969259987480671485520;
	ЧислоA = ВозвестиВСтепень(2, СлучайноеЧисло_a, N);
	
	ЛогинПароль = Логин + ":" + Пароль;
	
	Хеш = ОбменСБанкамиСлужебныйВызовСервера.СтрокаBase64БезBOM(ЛогинПароль, "windows-1251");
	ДвоичныеДанные = Base64Значение(Хеш);
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(ДвоичныеДанные);
	Hp = Хеширование.ХешСумма;
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(Соль);
	Хеширование.Добавить(Hp);
	x = Хеширование.ХешСумма;
	
	РазмерА = РазмерЧисла(ЧислоA);
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Если РазмерА < 33 Тогда // 33 - размер числа N
		Для Счетчик = РазмерА + 1 По 33 Цикл
			Хеширование.Добавить(Символ(0));
		КонецЦикла;
	КонецЕсли;
	A = ДвоичныеДанныеИзЧисла(ЧислоA);
	Хеширование.Добавить(A);
	РазмерВ = B.Размер();
	Если РазмерВ < 33 Тогда
		Для Счетчик = РазмерВ + 1 По 33 Цикл
			Хеширование.Добавить(Символ(0));
		КонецЦикла;
	КонецЕсли;
	Хеширование.Добавить(B);
	u = Хеширование.ХешСумма;
	ЧислоВ = ЧислоИзДвоичныхДанных(B);
	ЧислоХ = ЧислоИзДвоичныхДанных(x);
	Base = ЧислоВ - Константа_k * ВозвестиВСтепень(2, ЧислоХ, N);
	Если Base < 0 Тогда
		Base = Константа_k * N + ЧислоВ - Константа_k * ВозвестиВСтепень(2, ЧислоХ, N);
	КонецЕсли;
	
	S = ВозвестиВСтепень(Base, СлучайноеЧисло_a + ЧислоИзДвоичныхДанных(u) * ЧислоХ, N);
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(ДвоичныеДанныеИзЧисла(S));
	K = Хеширование.ХешСумма;
	
КонецПроцедуры

Функция ДвоичныеДанныеИзЧисла(Знач Число)
	
	ШестнадцатеричнаяСтрока = ШестнадцатеричнаяСтрока(Число);
	ТипXDTOДвоичныеДанные = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "hexBinary");
	ЗначениеHEX = ФабрикаXDTO.Создать(ТипXDTOДвоичныеДанные, ШестнадцатеричнаяСтрока);
	Возврат ЗначениеHEX.Значение;

КонецФункции

// Вычисляет верификатор нового пароля при смене
//
// Параметры:
//  Логин - Строка - название учетной записи клиента банка
//  Пароль - Строка - новый пароль
//  Соль - ДвоичныеДанные - соль.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - верификатор нового пароля.
//
Функция ВерификаторНовогоПароляСбербанк(Логин, Пароль, Соль)
	
	ЛогинПароль = Логин + ":" + Пароль;
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(ЛогинПароль);
	Hp = Хеширование.ХешСумма;

	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(Соль);
	Хеширование.Добавить(Hp);
	x = Хеширование.ХешСумма;
	
	N = 125617018995153554710546479714086468244499594888726646874671447258204721048803;
	ЧислоХ = ЧислоИзДвоичныхДанных(x);

	V = ВозвестиВСтепень(2, ЧислоХ, N);
	
	Возврат ДвоичныеДанныеИзЧисла(V);

КонецФункции

Функция ШестнадцатеричнаяСтрока(Знач Число)
	
	Если Число = 0 Тогда
		Возврат "0";
	КонецЕсли;
	ВозвращаемоеЗначение = "";
	Пока Число > 0 Цикл
		Остаток = Число % 16;
		Если Остаток >= 10 Тогда
			ВозвращаемоеЗначение = Символ(КодСимвола("A") + Остаток - 10) + ВозвращаемоеЗначение;
		Иначе
			ВозвращаемоеЗначение = Строка(Остаток) + ВозвращаемоеЗначение;
		КонецЕсли;
		Число = Цел(Число / 16);
	КонецЦикла;
	
	Если СтрДлина(ВозвращаемоеЗначение) % 2 > 0 Тогда
		ВозвращаемоеЗначение = "0" + ВозвращаемоеЗначение;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВозвестиВСтепень(Знач ИсходноеЧисло, Знач Степень, Знач Делитель)
	
	Результат = 1;
	Пока Степень <> 0 Цикл
		Если Степень % 2 = 1 Тогда
			Результат = (Результат * ИсходноеЧисло) % Делитель;
			Степень = Степень - 1;
		КонецЕсли;
		Степень = Степень / 2;
		ИсходноеЧисло = (ИсходноеЧисло * ИсходноеЧисло) % Делитель;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция РазмерЧисла(Знач Число)
	
	ШестнадцатеричнаяСтрока = ШестнадцатеричнаяСтрока(Число);
	
	Возврат СтрДлина(ШестнадцатеричнаяСтрока)/2;
	
КонецФункции

Функция ЧислоИзДвоичныхДанных(ДвоичныеДанные)
	
	ДвоичныеДанныеСтрокой = СтрЗаменить(Строка(ДвоичныеДанные), " ", "");
	ВозвращаемоеЗначение = 0;
	ДлинаСтроки = СтрДлина(ДвоичныеДанныеСтрокой);
	Для Счетчик = 1 По ДлинаСтроки Цикл
		КодСимвола = КодСимвола(ДвоичныеДанныеСтрокой, Счетчик);
		Если КодСимвола >= КодСимвола("0") И КодСимвола <= КодСимвола("9") Тогда
			Разница = КодСимвола - КодСимвола("0");
		Иначе
			Разница=КодСимвола - КодСимвола("A") + 10;
		КонецЕсли;
		ВозвращаемоеЗначение = ВозвращаемоеЗначение * 16 + Разница;
	КонецЦикла;
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СлучайноеЧисло256Бит()
	
	ИтоговоеЧисло = "";
	Для Счетчик = 1 По 8 Цикл
		ГСЧ = Новый ГенераторСлучайныхЧисел();
		СлучайноеЧисло = ГСЧ.СлучайноеЧисло(100000000, 999999999);
		ИтоговоеЧисло = ИтоговоеЧисло + Формат(СлучайноеЧисло, "ЧГ=");
	КонецЦикла;
	СлучайноеЧисло = ГСЧ.СлучайноеЧисло(100000, 999999);
	ИтоговоеЧисло = ИтоговоеЧисло + Формат(СлучайноеЧисло, "ЧГ=");
	Возврат Число(ИтоговоеЧисло);
	
КонецФункции

#КонецОбласти

#Область Криптография

Процедура ОбновитьЗначение(СтароеЗначение, НовоеЗначение, ПропускатьНеопределенныеЗначения = Ложь)
	
	Если НовоеЗначение = Неопределено И ПропускатьНеопределенныеЗначения Тогда
		Возврат;
	КонецЕсли;
	
	Если СтароеЗначение <> НовоеЗначение Тогда
		СтароеЗначение = НовоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСоздатьПрограммуКриптографии(НазваниеПрограммы, ТипПрограммы, АлгоритмПодписи, АлгоритмХеширования, АлгоритмШифрования = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрограммыЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка,
	|	ПрограммыЭлектроннойПодписиИШифрования.АлгоритмПодписи КАК АлгоритмПодписи,
	|	ПрограммыЭлектроннойПодписиИШифрования.АлгоритмХеширования КАК АлгоритмХеширования,
	|	ПрограммыЭлектроннойПодписиИШифрования.АлгоритмШифрования КАК АлгоритмШифрования
	|ИЗ
	|	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
	|ГДЕ
	|	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы = &ИмяПрограммы
	|	И ПрограммыЭлектроннойПодписиИШифрования.ТипПрограммы = &ТипПрограммы
	|	И НЕ ПрограммыЭлектроннойПодписиИШифрования.ПометкаУдаления";
	Запрос.УстановитьПараметр("ИмяПрограммы", НазваниеПрограммы);
	Запрос.УстановитьПараметр("ТипПрограммы", ТипПрограммы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.АлгоритмПодписи = АлгоритмПодписи И Выборка.АлгоритмХеширования = АлгоритмХеширования
			И ?(ЗначениеЗаполнено(АлгоритмШифрования), Выборка.АлгоритмШифрования = АлгоритмШифрования, Истина) Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		Программа = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Программа = Справочники.ПрограммыЭлектроннойПодписиИШифрования.СоздатьЭлемент();
	КонецЕсли;
	
	Программа.АлгоритмПодписи = АлгоритмПодписи;
	Программа.АлгоритмХеширования = АлгоритмХеширования;
	Если ЗначениеЗаполнено(АлгоритмШифрования) Тогда
		Программа.АлгоритмШифрования = АлгоритмШифрования;
	КонецЕсли;
	Программа.ИмяПрограммы = НазваниеПрограммы;
	Программа.Наименование = НазваниеПрограммы;
	Программа.ТипПрограммы = ТипПрограммы;
	
	Программа.Записать();
	
	Возврат Программа.Ссылка;
	
КонецФункции

// Получает все подписи файла.
//
// Параметры
//  СсылкаНаОбъект  - СправочникСсылка - ссылка объект, в табличной части которого содержатся подписи;
//
// Возвращаемое значение:
//  МассивВозврата - Массив  - массив структур с возвращаемыми значениями.
//
Функция ПолучитьВсеПодписи(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	МассивВозврата = Новый Массив;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
	               |	ЭлектронныеПодписи.Подпись КАК Подпись,
	               |	ЭлектронныеПодписи.Отпечаток КАК Отпечаток,
	               |	ЭлектронныеПодписи.ИмяФайлаПодписи КАК ИмяФайлаПодписи,
	               |	ЭлектронныеПодписи.Сертификат КАК Сертификат
	               |ИЗ
	               |	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	               |ГДЕ
	               |	ЭлектронныеПодписи.ПодписанныйОбъект = &СсылкаНаОбъект";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		СтруктураВозврата = Новый Структура("Подпись, КомуВыданСертификат, ИмяФайлаПодписи, Сертификат, Отпечаток");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаЗапроса);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Процедура ДобавитьПодпись(signature, НовоеСообщениеОбмена, ДанныеВозврата)
	
	МассивПодписей = ДанныеВозврата.ДанныеЭП.Получить(НовоеСообщениеОбмена);
	Если МассивПодписей = Неопределено Тогда
		МассивПодписей = Новый Массив;
	КонецЕсли;
	МассивПодписей.Добавить(Base64Значение(ЗначениеСвойстваXDTO(signature, "signedData")));
	ДанныеВозврата.ДанныеЭП.Вставить(НовоеСообщениеОбмена, МассивПодписей);
	
КонецПроцедуры

#КонецОбласти

#Область ISO

Процедура СформироватьПлатежноеПоручениеISO(СсылкаНаДокумент, ДеревоДанных, АдресФайлаВоВременномХранилище)
	
	ПространствоИмен = "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03";
	ТекстОшибки = "";
	
	СообщениеPain001 = ОбъектТипаCML(ФабрикаXDTO, "Document", ПространствоИмен);
		СообщениеЗаголовок = ОбъектТипаCML(ФабрикаXDTO, "CustomerCreditTransferInitiationV03", ПространствоИмен);
			СекцияЗаголовокГруппы = ОбъектТипаCML(ФабрикаXDTO, "GroupHeader32", ПространствоИмен);
				ИдДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдДокумента");
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокГруппы, "MsgId", ИдДокумента, Истина, ТекстОшибки);
				Дата = ТекущаяДатаСеанса();
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокГруппы, "CreDtTm", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокГруппы, "NbOfTxs", "1", Истина, ТекстОшибки); // число документов
				ИдентификацияИнициатора = ОбъектТипаCML(ФабрикаXDTO, "PartyIdentification32", ПространствоИмен);
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокГруппы, "InitgPty", ИдентификацияИнициатора, Истина, ТекстОшибки); // фиксированное
			ЗаполнитьСвойствоXDTO(СообщениеЗаголовок, "GrpHdr", СекцияЗаголовокГруппы, Истина, ТекстОшибки);
			СекцияЗаголовокПлатежа = ОбъектТипаCML(ФабрикаXDTO, "PaymentInstructionInformation3", ПространствоИмен);
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "PmtInfId", ИдДокумента, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "PmtMtd", "TRF", Истина, ТекстОшибки);
				СекцияСрочностьИсполнения = ОбъектТипаCML(ФабрикаXDTO, "PaymentTypeInformation19", ПространствоИмен);
				ВидПлатежа = ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидПлатежа");
				Если ЗначениеЗаполнено(ВидПлатежа) Тогда
					ЗаполнитьСвойствоXDTO(СекцияСрочностьИсполнения, "InstrPrty", ВидПлатежа, , ТекстОшибки);
				Иначе
					ЗаполнитьСвойствоXDTO(СекцияСрочностьИсполнения, "InstrPrty", "NORM", , ТекстОшибки);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "PmtTpInf", СекцияСрочностьИсполнения, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "ReqdExctnDt", Дата, Истина, ТекстОшибки);
				СекцияЗаголовокДебитор = ОбъектТипаCML(ФабрикаXDTO, "PartyIdentification32", ПространствоИмен);
					ПлательщикНаименованиеМеждународное = ЗначениеРеквизитаВДереве(
						ДеревоДанных, "РеквизитыПлательщика.НаименованиеМеждународное");
					ЗаполнитьСвойствоXDTO(СекцияЗаголовокДебитор, "Nm", ПлательщикНаименованиеМеждународное, Истина, ТекстОшибки);
					Если ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный") = Истина
						ИЛИ ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.АдресПроизвольный")) Тогда
						ПочтовыйАдресПлательщика = АдресISO("РеквизитыПлательщика", ДеревоДанных, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СекцияЗаголовокДебитор, "PstlAdr", ПочтовыйАдресПлательщика, , ТекстОшибки);
					КонецЕсли;
					ИННПлательщика = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.ИНН");
					ИдентификаторУчастникаISO = ИдентификаторУчастникаISO(ДеревоДанных, ИННПлательщика, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СекцияЗаголовокДебитор, "Id", ИдентификаторУчастникаISO, , ТекстОшибки);
					КодСтраныПлательщика = ЗначениеРеквизитаВДереве(
						ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Страна.ISOКод");
					ЗаполнитьСвойствоXDTO(СекцияЗаголовокДебитор, "CtryOfRes", КодСтраныПлательщика, , ТекстОшибки);
					Если ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник") = Истина Тогда
						КонтактноеЛицо = ОбъектТипаCML(ФабрикаXDTO, "ContactDetails2", ПространствоИмен);
							ФИО = ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.ФИО");
							ЗаполнитьСвойствоXDTO(КонтактноеЛицо, "Nm", ФИО, , ТекстОшибки);
							Телефон = ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.Телефон");
							// Приведение номера телефона к требуемому фасету.
							Телефон = СтрЗаменить(Телефон, " ", "");
							НовТелефон = "";
							ДлинаТелефона = СтрДлина(Телефон);
							Для Индекс = 1 По ДлинаТелефона Цикл
								Символ = Сред(Телефон, Индекс, 1);
								Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ) ИЛИ Символ = "-" ИЛИ Символ = "(" ИЛИ Символ = ")"
									ИЛИ Символ = "+" Тогда
									НовТелефон = НовТелефон + Символ;
								Иначе
									НовТелефон = НовТелефон + "-";
								КонецЕсли;
							КонецЦикла;
							Телефон = НовТелефон;
							// Вначале должен быть плюс
							Если Сред(Телефон, 1, 1) <> "+" Тогда
								Телефон = "+" + Телефон;
							КонецЕсли;
							// После кода страны должен быть минус.
							ПозицияМинус = СтрНайти(Телефон, "-");
							ПозицияСкобка = СтрНайти(Телефон, "(");
							Если ПозицияМинус = 0 ИЛИ ПозицияМинус > 4 Тогда
								// +234(678) - максимальная допустимая позиция скобки - 5.
								Если ПозицияСкобка > 0 И ПозицияСкобка < 6 Тогда
									// Установка минуса перед открывающей скобкой.
									Телефон = Сред(Телефон, 1, ПозицияСкобка - 1) + "-" + Сред(Телефон, ПозицияСкобка);
								Иначе
									// Установка минуса после первой цифры.
									Телефон = Сред(Телефон, 1, 2) + "-" + Сред(Телефон, 3);
								КонецЕсли; 
							КонецЕсли;
							// Формируем электронный документ, даже если телефон не удалось записать.
							ЗаполнитьСвойствоXDTO(КонтактноеЛицо, "PhneNb", Телефон);
							Email = ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.Email");
							ЗаполнитьСвойствоXDTO(КонтактноеЛицо, "EmailAdr", Email, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СекцияЗаголовокДебитор, "CtctDtls", КонтактноеЛицо, , ТекстОшибки);
					КонецЕсли;
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "Dbtr", СекцияЗаголовокДебитор, Истина, ТекстОшибки);
				ПлательщикРасчСчет = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.РасчСчет");
				СекцияСчетПлательщика = СчетISO(ПлательщикРасчСчет, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "DbtrAcct", СекцияСчетПлательщика, Истина, ТекстОшибки);
				БанкПлательщик = ОбъектТипаCML(ФабрикаXDTO, "BranchAndFinancialInstitutionIdentification4", ПространствоИмен);
					БанкПлательщикИД = ОбъектТипаCML(ФабрикаXDTO, "FinancialInstitutionIdentification7", ПространствоИмен);
						ПлательщикСВИФТБИКБанка = ЗначениеРеквизитаВДереве(
							ДеревоДанных, "РеквизитыПлательщика.Банк.SWIFT");
						ЗаполнитьСвойствоXDTO(БанкПлательщикИД, "BIC", ПлательщикСВИФТБИКБанка, Истина, ТекстОшибки);
						ПлательщикМеждународноеНаименованиеБанка = ЗначениеРеквизитаВДереве(
							ДеревоДанных, "РеквизитыПлательщика.Банк.НаименованиеМеждународное");
						ЗаполнитьСвойствоXDTO(БанкПлательщикИД, "Nm", ПлательщикМеждународноеНаименованиеБанка, Истина, ТекстОшибки);
						ГородБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.Город");
						АдресБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.Адрес");
						ТипАдресБанка = ОбъектТипаCML(ФабрикаXDTO, "PostalAddress6", ПространствоИмен);
							ЗаполнитьСвойствоXDTO(ТипАдресБанка, "TwnNm", ГородБанка, , ТекстОшибки);
							Если ЗначениеЗаполнено(АдресБанка) Тогда
								ТипАдресБанка.AdrLine.Добавить(АдресБанка);
							КонецЕсли;
						ЗаполнитьСвойствоXDTO(БанкПлательщикИД, "PstlAdr", ТипАдресБанка, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(БанкПлательщик, "FinInstnId", БанкПлательщикИД, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "DbtrAgt", БанкПлательщик, Истина, ТекстОшибки);
				ТипКомиссии = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ТипКомиссии");
				Если ТипКомиссии = "BEN" Тогда
					ТипКомиссии = "CRED";
				ИначеЕсли ТипКомиссии = "OUR" Тогда
					ТипКомиссии = "DEBT";
				ИначеЕсли ТипКомиссии = "SHA" Тогда
					ТипКомиссии = "SHAR";
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "ChrgBr", ТипКомиссии, Истина, ТекстОшибки);
				СчетКомиссии = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.СчетКомиссии");
				Если ЗначениеЗаполнено(СчетКомиссии) Тогда
					СекцияСчетКомиссии = СчетISO(СчетКомиссии, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "ChrgsAcct", СекцияСчетКомиссии, Истина, ТекстОшибки);
				КонецЕсли;
				Сумма = ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
				СекцияТранзакция = ТранзакцияISO(ДеревоДанных, Сумма, "", ТекстОшибки);
				СекцияЗаголовокПлатежа.CdtTrfTxInf.Добавить(СекцияТранзакция);
		
			СообщениеЗаголовок.PmtInf.Добавить(СекцияЗаголовокПлатежа);

		ЗаполнитьСвойствоXDTO(СообщениеPain001, "CstmrCdtTrfInitn", СообщениеЗаголовок, Истина, ТекстОшибки);

	СообщениеPain001.Проверить();

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	Иначе
		ДвоичныеДанные = ДвоичныеДанныеИзXDTO(ФабрикаXDTO, СообщениеPain001);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	КонецЕсли;
	
КонецПроцедуры

Функция МассивСтрокНазначенияПлатежаДляISO(НазначениеПлатежа)
	
	МассивВозврата = Новый Массив;
	ОграничениеСтрокиФорматаISO = 140;
	
	Для Счетчик = 1 По СтрЧислоСтрок(НазначениеПлатежа) Цикл
		ТекСтрока = СтрПолучитьСтроку(НазначениеПлатежа, Счетчик);
		Если СтрДлина(ТекСтрока) > ОграничениеСтрокиФорматаISO Тогда
			Пока СтрДлина(ТекСтрока) > 0 Цикл
				КоличествоКСрезу = Мин(ОграничениеСтрокиФорматаISO, СтрДлина(ТекСтрока));
				КусокСтроки = Сред(ТекСтрока, 1, КоличествоКСрезу);
				МассивВозврата.Добавить(КусокСтроки);
				Если СтрДлина(ТекСтрока) <= ОграничениеСтрокиФорматаISO Тогда
					Прервать;
				КонецЕсли;
				ТекСтрока = Сред(ТекСтрока, КоличествоКСрезу + 1);
			КонецЦикла;
		Иначе
			МассивВозврата.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;

	Возврат МассивВозврата;
	
КонецФункции

Функция ИдентификаторУчастникаISO(ДеревоДанных, ИНН, ТекстОшибки)
	
	ПространствоИмен = "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03";
	СекцияЗаголовокИд = ОбъектТипаCML(ФабрикаXDTO, "Party6Choice", ПространствоИмен);
		СекцияЗаголовокОрг = ОбъектТипаCML(ФабрикаXDTO, "OrganisationIdentification4", ПространствоИмен);
			СекцияЗаголовокОргИд = ОбъектТипаCML(ФабрикаXDTO, "GenericOrganisationIdentification1", ПространствоИмен);
				Если Не ЗначениеЗаполнено(ИНН) Тогда
					ИНН = "0";
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокОргИд, "Id", ИНН, Истина, ТекстОшибки);
				СекцияЗаголовокИмяКода = ОбъектТипаCML(ФабрикаXDTO, "OrganisationIdentificationSchemeName1Choice", ПространствоИмен);
					ЗаполнитьСвойствоXDTO(СекцияЗаголовокИмяКода, "Cd", "TXID", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокОргИд, "SchmeNm", СекцияЗаголовокИмяКода, Ложь, ТекстОшибки);
			СекцияЗаголовокОрг.Othr.Добавить(СекцияЗаголовокОргИд);
		ЗаполнитьСвойствоXDTO(СекцияЗаголовокИд, "OrgId", СекцияЗаголовокОрг, Ложь, ТекстОшибки);
	Возврат СекцияЗаголовокИд;
	
КонецФункции

Функция АдресISO(Корень, ДеревоДанных, ТекстОшибки)
	
	ПространствоИмен = "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03";
	СекцияПочтовыйАдрес = ОбъектТипаCML(ФабрикаXDTO, "PostalAddress6", ПространствоИмен);
	Если ЗначениеРеквизитаВДереве(ДеревоДанных, Корень + ".АдресСтруктурированный") = Истина Тогда
		КодСтраны = ЗначениеРеквизитаВДереве(ДеревоДанных, Корень + ".АдресСтруктурированный.Страна.ISOКод");
		ЗаполнитьСвойствоXDTO(СекцияПочтовыйАдрес, "Ctry", КодСтраны, Ложь, ТекстОшибки);
		Город = ЗначениеРеквизитаВДереве(ДеревоДанных, Корень + ".АдресСтруктурированный.Город");
		ЗаполнитьСвойствоXDTO(СекцияПочтовыйАдрес, "TwnNm", Город, Ложь, ТекстОшибки);
		Адрес = ЗначениеРеквизитаВДереве(ДеревоДанных, Корень + ".АдресСтруктурированный.Адрес");
		Если Не ПустаяСтрока(Адрес) Тогда
			ДобавитьАдресВСекциюСРазбивкой(СекцияПочтовыйАдрес, Адрес)
		КонецЕсли;
		Индекс = ЗначениеРеквизитаВДереве(ДеревоДанных, Корень + ".АдресСтруктурированный.Индекс");
		ЗаполнитьСвойствоXDTO(СекцияПочтовыйАдрес, "PstCd", Индекс, Ложь, ТекстОшибки);
	Иначе
		АдресПроизвольный = ЗначениеРеквизитаВДереве(ДеревоДанных, Корень + ".АдресПроизвольный");
		ДобавитьАдресВСекциюСРазбивкой(СекцияПочтовыйАдрес, АдресПроизвольный)
	КонецЕсли;
	Возврат СекцияПочтовыйАдрес;
	
КонецФункции

Процедура ДобавитьАдресВСекциюСРазбивкой(СекцияПочтовыйАдрес, Адрес)
	
	Для Счетчик = 1 По СтрЧислоСтрок(Адрес) Цикл
		ТекСтрока = СтрПолучитьСтроку(Адрес, Счетчик);
		Пока СтрДлина(ТекСтрока) > 70 Цикл
			СрезСтроки = Сред(ТекСтрока, 1, 70);
			СекцияПочтовыйАдрес.AdrLine.Добавить(СрезСтроки);
			ТекСтрока = Сред(ТекСтрока, 71);
		КонецЦикла;
		СекцияПочтовыйАдрес.AdrLine.Добавить(ТекСтрока);
	КонецЦикла;

КонецПроцедуры

Функция СчетISO(НомерСчета, ТекстОшибки)
	
	ПространствоИмен = "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03";
	СекцияЗаголовокСчет = ОбъектТипаCML(ФабрикаXDTO, "CashAccount16", ПространствоИмен);
		СекцияЗаголовокСчетИд = ОбъектТипаCML(ФабрикаXDTO, "AccountIdentification4Choice", ПространствоИмен);
			СекцияЗаголовокСчетТип = ОбъектТипаCML(ФабрикаXDTO, "GenericAccountIdentification1", ПространствоИмен);
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчетТип, "Id", НомерСчета, Истина, ТекстОшибки);
				СекцияЗаголовокСчетТипИмя = ОбъектТипаCML(ФабрикаXDTO, "AccountSchemeName1Choice", ПространствоИмен);
					ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчетТипИмя, "Cd", "BBAN", Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчетТип, "SchmeNm", СекцияЗаголовокСчетТипИмя, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчетИд, "Othr", СекцияЗаголовокСчетТип, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчет, "Id", СекцияЗаголовокСчетИд, Истина, ТекстОшибки);
	Возврат СекцияЗаголовокСчет;
	
КонецФункции

Функция ТранзакцияISO(ДеревоДанных, Сумма, ЛокальныйИнструмент, ТекстОшибки)
	
	ПространствоИмен = "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03";

	СекцияТранзакция = ОбъектТипаCML(ФабрикаXDTO, "CreditTransferTransactionInformation10", ПространствоИмен);
		ИдДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдДокумента");
		СекцияИДПлатежа = ОбъектТипаCML(ФабрикаXDTO, "PaymentIdentification1", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(СекцияИДПлатежа, "InstrId", ИдДокумента, Истина, ТекстОшибки);
			Номер = СокрЛП(ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"));
			ЗаполнитьСвойствоXDTO(СекцияИДПлатежа, "EndToEndId", Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияТранзакция, "PmtId", СекцияИДПлатежа, Истина, ТекстОшибки);
		СекцияЗаголовокТипПлатежа = ОбъектТипаCML(ФабрикаXDTO, "PaymentTypeInformation19", ПространствоИмен);
			СекцияЗаголовокЛокальныйИнструмент = ОбъектТипаCML(ФабрикаXDTO, "LocalInstrument2Choice", ПространствоИмен);
			Если Не ПустаяСтрока(ЛокальныйИнструмент) Тогда
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокЛокальныйИнструмент, "Prtry", ЛокальныйИнструмент, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияЗаголовокТипПлатежа, "LclInstrm", СекцияЗаголовокЛокальныйИнструмент, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияТранзакция, "PmtTpInf", СекцияЗаголовокТипПлатежа, Истина, ТекстОшибки);
			КонецЕсли;
		СекцияСумма = ОбъектТипаCML(ФабрикаXDTO, "AmountType3Choice", ПространствоИмен);
			СекцияСуммаЗначение = ОбъектТипаCML(ФабрикаXDTO, "ActiveOrHistoricCurrencyAndAmount", ПространствоИмен);
				ЗаполнитьСвойствоXDTO(СекцияСуммаЗначение, "__content", Сумма, Истина, ТекстОшибки);
				КодВалютыПеревода = ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаПеревода.ISOКодВалюты");
				ЗаполнитьСвойствоXDTO(СекцияСуммаЗначение, "Ccy", КодВалютыПеревода, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СекцияСумма, "InstdAmt", СекцияСуммаЗначение, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияТранзакция, "Amt", СекцияСумма, Истина, ТекстОшибки);
		// Курс
		КурсКонвертации = СокрЛП(ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.Курс"));
			Если ЗначениеЗаполнено(КурсКонвертации) Тогда
				СекцияКурс = ОбъектТипаCML(ФабрикаXDTO, "ExchangeRateInformation1", ПространствоИмен);
					ЗаполнитьСвойствоXDTO(СекцияКурс, "XchgRate", КурсКонвертации, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СекцияКурс, "RateTp", "SPOT", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияТранзакция, "XchgRateInf", СекцияКурс, Истина, ТекстОшибки);
			КонецЕсли;
		Если ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.БанкПосредник") = Истина Тогда
			БанкПосредник = ОбъектТипаCML(ФабрикаXDTO, "BranchAndFinancialInstitutionIdentification4", ПространствоИмен);
				SWIFTБанкаПосредника = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.SWIFT");
				БанкПосредникИД = ОбъектТипаCML(ФабрикаXDTO, "FinancialInstitutionIdentification7", ПространствоИмен);
					ЗаполнитьСвойствоXDTO(БанкПосредникИД, "BIC", SWIFTБанкаПосредника, , ТекстОшибки);
					НаименованиеБанкаПосредника = ЗначениеРеквизитаВДереве(
						ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.НаименованиеМеждународное");
					ЗаполнитьСвойствоXDTO(БанкПосредникИД, "Nm", НаименованиеБанкаПосредника, , ТекстОшибки);
				СекцияАдресБанкаПосредника = ОбъектТипаCML(ФабрикаXDTO, "PostalAddress6", ПространствоИмен);
					ISOКодБанкаПосредника = ЗначениеРеквизитаВДереве(
						ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.Страна.ISOКод");
					ЗаполнитьСвойствоXDTO(СекцияАдресБанкаПосредника, "Ctry", ISOКодБанкаПосредника, , ТекстОшибки);
					АдресБанкаПосредника = ЗначениеРеквизитаВДереве(
						ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.Адрес");
				СекцияАдресБанкаПосредника.AdrLine.Добавить(АдресБанкаПосредника);
				ЗаполнитьСвойствоXDTO(БанкПосредник, "FinInstnId", БанкПосредникИД, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СекцияТранзакция, "IntrmyAgt1", БанкПосредник, Истина, ТекстОшибки);
		КонецЕсли;
		
		БанкПолучатель = ОбъектТипаCML(ФабрикаXDTO, "BranchAndFinancialInstitutionIdentification4", ПространствоИмен);
			БанкПолучательИД = ОбъектТипаCML(ФабрикаXDTO, "FinancialInstitutionIdentification7", ПространствоИмен);
				ПолучательБанкSWIFT = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.SWIFT");
				ЗаполнитьСвойствоXDTO(БанкПолучательИД, "BIC", ПолучательБанкSWIFT, , ТекстОшибки);
				БанкПолучателяНаименованиеМеждународное = ЗначениеРеквизитаВДереве(
					ДеревоДанных, "РеквизитыПолучателя.Банк.НаименованиеМеждународное");
				ЗаполнитьСвойствоXDTO(БанкПолучательИД, "Nm", БанкПолучателяНаименованиеМеждународное, , ТекстОшибки);
				АдресБанкаПолучателя = ОбъектТипаCML(ФабрикаXDTO, "PostalAddress6", ПространствоИмен);
					ПолучательБанкСтранаISOКод = ЗначениеРеквизитаВДереве(
						ДеревоДанных, "РеквизитыПолучателя.Банк.Страна.ISOКод");
					ЗаполнитьСвойствоXDTO(АдресБанкаПолучателя, "Ctry", ПолучательБанкСтранаISOКод, , ТекстОшибки);
					ПолучательБанкАдрес = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.Адрес");
					АдресБанкаПолучателя.AdrLine.Добавить(ПолучательБанкАдрес);
				ЗаполнитьСвойствоXDTO(БанкПолучательИД, "PstlAdr", АдресБанкаПолучателя, Истина, ТекстОшибки);
				БИКБанкПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.БИК");
				Если ЗначениеЗаполнено(БИКБанкПолучателя) Тогда
					ClrSysMmbId = ОбъектТипаCML(ФабрикаXDTO, "ClearingSystemMemberIdentification2", ПространствоИмен);
					ЗаполнитьСвойствоXDTO(ClrSysMmbId, "MmbId", БИКБанкПолучателя, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(БанкПолучательИД, "ClrSysMmbId", ClrSysMmbId, , ТекстОшибки);
				КонецЕсли;
			ЗаполнитьСвойствоXDTO(БанкПолучатель, "FinInstnId", БанкПолучательИД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияТранзакция, "CdtrAgt", БанкПолучатель, Истина, ТекстОшибки);

		Если ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.БанкПосредник") = Истина Тогда
			КорСчетБанкаПосредника = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.БанкПосредник.КорСчет");
			СчетБанкаПосредника = СчетISO(КорСчетБанкаПосредника, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СекцияТранзакция, "CdtrAgtAcct", СчетБанкаПосредника, Истина, ТекстОшибки);
		КонецЕсли;
		
		Получатель = ОбъектТипаCML(ФабрикаXDTO, "PartyIdentification32", ПространствоИмен);
			ПолучательМеждународноеНаименование = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.НаименованиеМеждународное");
			ЗаполнитьСвойствоXDTO(Получатель, "Nm", ПолучательМеждународноеНаименование, , ТекстОшибки);
			Если ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный") = Истина
				ИЛИ ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.АдресПроизвольный")) Тогда
				СекцияАдресПолучателя = АдресISO("РеквизитыПолучателя", ДеревоДанных, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Получатель, "PstlAdr", СекцияАдресПолучателя, , ТекстОшибки);
			КонецЕсли;
			ИННПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.ИНН");
			СекцияИдентификаторПолучателя = ИдентификаторУчастникаISO(ДеревоДанных, ИННПолучателя, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Получатель, "Id", СекцияИдентификаторПолучателя, , ТекстОшибки);
			КодСтраныПолучателя = ЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Страна.ISOКод");
			ЗаполнитьСвойствоXDTO(Получатель, "CtryOfRes", КодСтраныПолучателя, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияТранзакция, "Cdtr", Получатель, , ТекстОшибки);
		ПолучательРасчСчет = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.РасчСчет");
		СчетПолучатель = СчетISO(ПолучательРасчСчет, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияТранзакция, "CdtrAcct", СчетПолучатель, , ТекстОшибки);
		
		ТаблицаЗаполнена = ЗначениеРеквизитаВДереве(ДеревоДанных, "КодыВидовВалютныхОпераций") <> "";
		Если ТаблицаЗаполнена Тогда
			СтрокаТаблицыКодыВидовОпераций = ДеревоДанных.Строки.Найти("КодыВидовВалютныхОпераций", "ПолныйПуть");
			RegulatoryReporting3 = ОбъектТипаCML(ФабрикаXDTO, "RegulatoryReporting3", ПространствоИмен);
			Для Каждого ТекущийКодОперации Из СтрокаТаблицыКодыВидовОпераций.Строки Цикл
				StructuredRegulatoryReporting3 = ОбъектТипаCML(ФабрикаXDTO, "StructuredRegulatoryReporting3", ПространствоИмен);
				КодВидаОперации = ЗначениеРеквизитаВДереве(
					ТекущийКодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.КодВидаВалютнойОперации");
				ЗаполнитьСвойствоXDTO(StructuredRegulatoryReporting3, "Tp", "VO", , ТекстОшибки);
				ActiveOrHistoricCurrencyAndAmount = ОбъектТипаCML(
					ФабрикаXDTO, "ActiveOrHistoricCurrencyAndAmount", ПространствоИмен);
					Сумма = ЗначениеРеквизитаВДереве(ТекущийКодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.Сумма");
					ЗаполнитьСвойствоXDTO(ActiveOrHistoricCurrencyAndAmount, "__content", Сумма, , ТекстОшибки);
					ISOКодВалюты = ЗначениеРеквизитаВДереве(ТекущийКодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.ISOКодВалюты");
					ЗаполнитьСвойствоXDTO(ActiveOrHistoricCurrencyAndAmount, "Ccy", ISOКодВалюты, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(StructuredRegulatoryReporting3, "Amt", ActiveOrHistoricCurrencyAndAmount, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(StructuredRegulatoryReporting3, "Cd", КодВидаОперации, , ТекстОшибки);
				НомерПаспортаСделки = ЗначениеРеквизитаВДереве(
					ТекущийКодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.НомерПаспортаСделки");
				Если ЗначениеЗаполнено(НомерПаспортаСделки) Тогда
					StructuredRegulatoryReporting3.Inf.Добавить(НомерПаспортаСделки);
				КонецЕсли;
				RegulatoryReporting3.Dtls.Добавить(StructuredRegulatoryReporting3);
			КонецЦикла;
			СекцияТранзакция.RgltryRptg.Добавить(RegulatoryReporting3);
		КонецЕсли;

		СекцияИнформацияОПлатеже = ОбъектТипаCML(ФабрикаXDTO, "RemittanceInformation5", ПространствоИмен);
			НазначениеПлатежа = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.НазначениеПлатежа");
			МассивСтрокНазначенияПлатежа = МассивСтрокНазначенияПлатежаДляISO(НазначениеПлатежа);
			Для Каждого Строка Из МассивСтрокНазначенияПлатежа Цикл
				Если НЕ ПустаяСтрока(Строка) Тогда
					СекцияИнформацияОПлатеже.Ustrd.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;
			
			ИнформацияОПлатежеСтруктурная = ОбъектТипаCML(ФабрикаXDTO, "StructuredRemittanceInformation7", ПространствоИмен);
			СвязныеДокументы = ОбъектТипаCML(ФабрикаXDTO, "ReferredDocumentInformation3", ПространствоИмен);
			ТипДокумента = ОбъектТипаCML(ФабрикаXDTO, "ReferredDocumentType2", ПространствоИмен);
				ТипДокументаВыбор = ОбъектТипаCML(ФабрикаXDTO, "ReferredDocumentType1Choice", ПространствоИмен);
					ЗаполнитьСвойствоXDTO(ТипДокументаВыбор, "Prtry", "POD", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ТипДокумента, "CdOrPrtry", ТипДокументаВыбор, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвязныеДокументы, "Tp", ТипДокумента, , ТекстОшибки);
			НомерДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
			ЗаполнитьСвойствоXDTO(СвязныеДокументы, "Nb", НомерДокумента, , ТекстОшибки);
			ДатаДокумента = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
			ЗаполнитьСвойствоXDTO(СвязныеДокументы, "RltdDt", ДатаДокумента, , ТекстОшибки);
			ИнформацияОПлатежеСтруктурная.RfrdDocInf.Добавить(СвязныеДокументы);
			
			ТаблицаЗаполнена = ЗначениеРеквизитаВДереве(ДеревоДанных, "ОбосновывающиеДокументы") <> "";
			Если ТаблицаЗаполнена Тогда
				СтрокаТаблицыОбосновывающихДокументов = ДеревоДанных.Строки.Найти("ОбосновывающиеДокументы", "ПолныйПуть");
				Для Каждого ТекущийОбосновывающийДокумент Из СтрокаТаблицыОбосновывающихДокументов.Строки Цикл
					СвязныеДокументы = ОбъектТипаCML(ФабрикаXDTO, "ReferredDocumentInformation3", ПространствоИмен);
					ТипДокумента = ОбъектТипаCML(ФабрикаXDTO, "ReferredDocumentType2", ПространствоИмен);
						ТипДокументаВыбор = ОбъектТипаCML(ФабрикаXDTO, "ReferredDocumentType1Choice", ПространствоИмен);
							ТипДокументаЗначение = ЗначениеРеквизитаВДереве(
								ТекущийОбосновывающийДокумент, "ОбосновывающиеДокументы.НомерСтроки.ТипДокумента");
							ЗаполнитьСвойствоXDTO(ТипДокументаВыбор, "Prtry", ТипДокументаЗначение, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ТипДокумента, "CdOrPrtry", ТипДокументаВыбор, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СвязныеДокументы, "Tp", ТипДокумента, , ТекстОшибки);
					НомерОбосновывающегоДокумента = ЗначениеРеквизитаВДереве(
						ТекущийОбосновывающийДокумент, "ОбосновывающиеДокументы.НомерСтроки.НомерДокумента");
					ЗаполнитьСвойствоXDTO(СвязныеДокументы, "Nb", НомерОбосновывающегоДокумента, , ТекстОшибки);
					ДатаДокумента = ЗначениеРеквизитаВДереве(
						ТекущийОбосновывающийДокумент, "ОбосновывающиеДокументы.НомерСтроки.ДатаДокумента");
					ЗаполнитьСвойствоXDTO(СвязныеДокументы, "RltdDt", ДатаДокумента, , ТекстОшибки);
					ИнформацияОПлатежеСтруктурная.RfrdDocInf.Добавить(СвязныеДокументы);
				КонецЦикла;
			КонецЕсли;
			СекцияИнформацияОПлатеже.Strd.Добавить(ИнформацияОПлатежеСтруктурная);
		ЗаполнитьСвойствоXDTO(СекцияТранзакция, "RmtInf", СекцияИнформацияОПлатеже, , ТекстОшибки);
		
	Возврат СекцияТранзакция;
	
КонецФункции

Процедура ПрочитатьВалютнуюВыпискуISO(ЭД, ДеревоРазбора, НовыйЭД)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка;
	
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИдентификаторДокумента", ЭД.BkToCstmrStmt.GrpHdr.MsgId);

	МассивВыписок = Новый Массив;
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента("ОбменСБанками.ВыпискаБанка");
	
	Если ТипЗнч(ЭД.BkToCstmrStmt.Stmt) = Тип("ОбъектXDTO") Тогда
		Выписки = Новый Массив;
		Выписки.Добавить(ЭД.BkToCstmrStmt.Stmt);
	Иначе
		Выписки = ЭД.BkToCstmrStmt.Stmt;
	КонецЕсли;
	
	ТаблицаВыписок = Новый ТаблицаЗначений;
	ТаблицаВыписок.Колонки.Добавить("НачалоПериода");
	ТаблицаВыписок.Колонки.Добавить("КонецПериода");
	ТаблицаВыписок.Колонки.Добавить("НомерСчета");
	ТаблицаВыписок.Колонки.Добавить("Организация");
	ТаблицаВыписок.Колонки.Добавить("Банк");
	ТаблицаВыписок.Колонки.Добавить("НачальныйОстаток");
	ТаблицаВыписок.Колонки.Добавить("ОборотВходящихПлатежей");
	ТаблицаВыписок.Колонки.Добавить("ОборотИсходящихПлатежей");
	ТаблицаВыписок.Колонки.Добавить("КонечныйОстаток");
	ТаблицаВыписок.Колонки.Добавить("Операции");
	
	Для Каждого Выписка Из Выписки Цикл
		СтрокаВыписки = ТаблицаВыписок.Добавить();
		
		Если Выписка.Свойства().Получить("FrToDt") <> Неопределено Тогда
			СтрокаВыписки.НачалоПериода = XMLЗначение(Тип("Дата"), Выписка.FrToDt.FrDtTm);
			СтрокаВыписки.КонецПериода = XMLЗначение(Тип("Дата"), Выписка.FrToDt.ToDtTm);
		КонецЕсли;
		
		Если Выписка.Acct.Id.Свойства().Получить("IBAN") <> Неопределено Тогда
			СтрокаВыписки.НомерСчета = Выписка.Acct.Id.IBAN;
		Иначе
			СтрокаВыписки.НомерСчета = Выписка.Acct.Id.Othr.Id;
		КонецЕсли;
		
		Организация = Новый Структура;
		
		Если Выписка.Acct.Свойства().Получить("Nm") <> Неопределено Тогда
			Организация.Вставить("Наименование", Выписка.Acct.Nm);
		КонецЕсли;
		
		Если Выписка.Acct.Свойства().Получить("Ownr") <> Неопределено Тогда // владелец счета
			Если Выписка.Acct.Ownr.Свойства().Получить("Nm") <> Неопределено Тогда
				Организация.Вставить("НаименованиеМеждународное", Выписка.Acct.Ownr.Nm);
			КонецЕсли;
			
			Если Выписка.Acct.Ownr.Свойства().Получить("Id") <> Неопределено
				И Выписка.Acct.Ownr.Id.Свойства().Получить("OrgId") <> Неопределено
				И Выписка.Acct.Ownr.Id.OrgId.Свойства().Получить("Othr") <> Неопределено Тогда
					Организация.Вставить("ИНН", Выписка.Acct.Ownr.Id.OrgId.Othr.Id);
			КонецЕсли;
		КонецЕсли;
		
		Если Организация.Количество() Тогда
			СтрокаВыписки.Организация = Организация;
		КонецЕсли;
		
		Если Выписка.Acct.Свойства().Получить("Svcr") <> Неопределено Тогда // обслуживающий банк
			Банк = Новый Структура;
			Если Выписка.Acct.Svcr.FinInstnId.Свойства().Получить("BIC") <> Неопределено Тогда
				Банк.Вставить("SWIFT", Выписка.Acct.Svcr.FinInstnId.BIC);
			КонецЕсли;
			
			Если Выписка.Acct.Svcr.FinInstnId.Свойства().Получить("Nm") <> Неопределено Тогда
				Банк.Вставить("НаименованиеМеждународное", Выписка.Acct.Svcr.FinInstnId.Nm);
			КонецЕсли;
			
			Если Выписка.Acct.Svcr.FinInstnId.Свойства().Получить("ClrSysMmbId") <> Неопределено Тогда
				Банк.Вставить("БИК", Выписка.Acct.Svcr.FinInstnId.ClrSysMmbId.MmbId);
			КонецЕсли;
			
			Если Банк.Количество() Тогда
				СтрокаВыписки.Банк = Банк;
			КонецЕсли;
			
		КонецЕсли;

		// Остатки
		Если ТипЗнч(Выписка.Bal) = Тип("ОбъектXDTO") Тогда
			Балансы = Новый Массив;
			Балансы.Добавить(Выписка.Bal);
		Иначе
			Балансы = Выписка.Bal;
		КонецЕсли;
		
		Для Каждого Баланс Из Балансы Цикл
			
			Если Баланс.Tp.CdOrPrtry.Свойства().Получить("Cd") <> Неопределено Тогда
				СуммаСтрокой = Баланс.Amt.Последовательность().ПолучитьТекст(0);
				Если Баланс.Tp.CdOrPrtry.Cd = "OPBD" Тогда
					СтрокаВыписки.НачальныйОстаток = XMLЗначение(Тип("Число"), СуммаСтрокой);
				ИначеЕсли Баланс.Tp.CdOrPrtry.Cd = "CLBD" Тогда
					СтрокаВыписки.КонечныйОстаток = XMLЗначение(Тип("Число"), СуммаСтрокой);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Обороты
		Если Выписка.Свойства().Получить("TxsSummry") <> Неопределено Тогда
			Если Выписка.TxsSummry.Свойства().Получить("TtlCdtNtries") <> Неопределено
				И Выписка.TxsSummry.TtlCdtNtries.Свойства().Получить("Sum") <> Неопределено Тогда
					СтрокаВыписки.ОборотВходящихПлатежей = XMLЗначение(Тип("Число"), Выписка.TxsSummry.TtlCdtNtries.Sum);
			КонецЕсли;
			Если Выписка.TxsSummry.Свойства().Получить("TtlDbtNtries") <> Неопределено
				И Выписка.TxsSummry.TtlDbtNtries.Свойства().Получить("Sum") <> Неопределено Тогда
					СтрокаВыписки.ОборотИсходящихПлатежей = XMLЗначение(Тип("Число"), Выписка.TxsSummry.TtlDbtNtries.Sum);
			КонецЕсли;
		КонецЕсли;

		
		Если Выписка.Свойства().Получить("Ntry") <> Неопределено Тогда
			Если ТипЗнч(Выписка.Ntry) = Тип("ОбъектXDTO") Тогда
				Операции = Новый Массив;
				Операции.Добавить(Выписка.Ntry);
			Иначе
				Операции = Выписка.Ntry;
			КонецЕсли;
			
			ТаблицаОпераций = Новый ТаблицаЗначений;
			ТаблицаОпераций.Колонки.Добавить("Статус");
			ТаблицаОпераций.Колонки.Добавить("НаправлениеПлатежа");
			ТаблицаОпераций.Колонки.Добавить("ДатаОперации");
			ТаблицаОпераций.Колонки.Добавить("ДатаВалютирования");
			ТаблицаОпераций.Колонки.Добавить("НомерДокумента");
			ТаблицаОпераций.Колонки.Добавить("СуммаДокумента");
			ТаблицаОпераций.Колонки.Добавить("ИдентификаторДокумента");
			ТаблицаОпераций.Колонки.Добавить("Плательщик");
			ТаблицаОпераций.Колонки.Добавить("Получатель");
			ТаблицаОпераций.Колонки.Добавить("НазначениеПлатежа");
			
			Для Каждого Операция Из Операции Цикл
				// Если платеж не исполнен, то пропускаем его
				Если Операция.Sts <> "BOOK" Тогда
					Продолжить;
				КонецЕсли;
				НовСтрока = ТаблицаОпераций.Добавить();
				СуммаСтрокой = Операция.Amt.Последовательность().ПолучитьТекст(0);
				НовСтрока.СуммаДокумента = XMLЗначение(Тип("Число"), СуммаСтрокой);
				НовСтрока.НаправлениеПлатежа = ?(Операция.CdtDbtInd = "DBIT", "1", "2");
				НовСтрока.Статус = ?(Операция.Sts = "BOOK", "1", "0");
				Если Операция.Свойства().Получить("BookgDt") <> Неопределено Тогда
					ДатаОперацииСтрокой = ?(Операция.BookgDt.Свойства().Получить("Dt") <> Неопределено, Операция.BookgDt.Dt,
						Операция.BookgDt.DtTm);
					НовСтрока.ДатаОперации = XMLЗначение(Тип("Дата"), ДатаОперацииСтрокой);
				КонецЕсли;
			
				Если Операция.Свойства().Получить("ValDt") <> Неопределено Тогда
					ДатаВалютированияСтрокой = ?(Операция.ValDt.Свойства().Получить("Dt") <> Неопределено, Операция.ValDt.Dt,
						Операция.ValDt.DtTm);
					НовСтрока.ДатаВалютирования = XMLЗначение(Тип("Дата"), ДатаВалютированияСтрокой);
				КонецЕсли;
				
				Если Операция.Свойства().Получить("AcctSvcrRef") <> Неопределено Тогда
					НовСтрока.ИдентификаторДокумента = Операция.AcctSvcrRef;
				КонецЕсли;
				
				Если Операция.Свойства().Получить("NtryDtls") <> Неопределено Тогда
					Если ТипЗнч(Операция.NtryDtls) = Тип("ОбъектXDTO") Тогда
						Транзакция = Операция.NtryDtls;
					Иначе
						Транзакция = Операция.NtryDtls[0];
					КонецЕсли;
					Если Транзакция.Свойства().Получить("TxDtls") <> Неопределено Тогда
						Если ТипЗнч(Транзакция.TxDtls) = Тип("ОбъектXDTO") Тогда
							ДетальТранзакции = Транзакция.TxDtls;
						Иначе
							ДетальТранзакции = Транзакция.TxDtls[0];
						КонецЕсли;
						
						Если ДетальТранзакции.Свойства().Получить("Refs") <> Неопределено
							И ДетальТранзакции.Refs.Свойства().Получить("EndToEndId") <> Неопределено Тогда
							НовСтрока.НомерДокумента = ДетальТранзакции.Refs.EndToEndId;
						КонецЕсли;

						Если ДетальТранзакции.Свойства().Получить("RltdPties") <> Неопределено Тогда // участники платежа
							
							Плательщик = Новый Структура;
							Если ДетальТранзакции.RltdPties.Свойства().Получить("Dbtr") <> Неопределено Тогда
								
								Если ДетальТранзакции.RltdPties.Dbtr.Свойства().Получить("Nm") <> Неопределено Тогда
									Плательщик.Вставить("НаименованиеМеждународное", ДетальТранзакции.RltdPties.Dbtr.Nm);
								КонецЕсли;
								Если ДетальТранзакции.RltdPties.Dbtr.Свойства().Получить("Id") <> Неопределено
									И ДетальТранзакции.RltdPties.Dbtr.Id.Свойства().Получить("OrgId") <> Неопределено
									И ДетальТранзакции.RltdPties.Dbtr.Id.OrgId.Свойства().Получить("Othr") <> Неопределено Тогда
										Плательщик.Вставить("ИНН", ДетальТранзакции.RltdPties.Dbtr.Id.OrgId.Othr.Id);
								КонецЕсли;
									
								Если ДетальТранзакции.RltdPties.Dbtr.Свойства().Получить("CtryOfRes") <> Неопределено Тогда
									АдресСтруктурированный = Новый Структура;
									Страна = Новый Структура;
									Страна.Вставить("ISOКод", ДетальТранзакции.RltdPties.Dbtr.CtryOfRes);
									АдресСтруктурированный.Вставить("Страна", Страна);
									Плательщик.Вставить("АдресСтруктурированный", АдресСтруктурированный);
								КонецЕсли;
									
							КонецЕсли;
							
							// Счет плательщика
							Если ДетальТранзакции.RltdPties.Свойства().Получить("DbtrAcct") <> Неопределено
								И ДетальТранзакции.RltdPties.DbtrAcct.Id.Свойства().Получить("Othr") <> Неопределено Тогда
								Плательщик.Вставить("РасчСчет", ДетальТранзакции.RltdPties.DbtrAcct.Id.Othr.Id);
							КонецЕсли;
							
							// Банк плательщика
							Если Плательщик.Количество() И ДетальТранзакции.Свойства().Получить("RltdAgts") <> Неопределено
								И ДетальТранзакции.RltdAgts.Свойства().Получить("DbtrAgt") <> Неопределено Тогда
								
								Банк = Новый Структура;
								
								Если ДетальТранзакции.RltdAgts.DbtrAgt.FinInstnId.Свойства().Получить("BIC") <> Неопределено Тогда
									Банк.Вставить("SWIFT", ДетальТранзакции.RltdAgts.DbtrAgt.FinInstnId.BIC);
								КонецЕсли;
								
								Если ДетальТранзакции.RltdAgts.DbtrAgt.FinInstnId.Свойства().Получить("Nm") <> Неопределено Тогда
									Банк.Вставить("НаименованиеМеждународное", ДетальТранзакции.RltdAgts.DbtrAgt.FinInstnId.Nm);
								КонецЕсли;
								
								Если  ДетальТранзакции.RltdAgts.DbtrAgt.FinInstnId.Свойства().Получить("PstlAdr") <> Неопределено
									И ДетальТранзакции.RltdAgts.DbtrAgt.FinInstnId.PstlAdr.Свойства().Получить("Ctry") <> Неопределено Тогда
										Страна = Новый Структура;
										Страна.Вставить("ISOКод", ДетальТранзакции.RltdAgts.DbtrAgt.FinInstnId.PstlAdr.Ctry);
										Банк.Вставить("Страна", Страна);
								КонецЕсли;

								Если Банк.Количество() Тогда
									Плательщик.Вставить("Банк", Банк);
								КонецЕсли;
								
							КонецЕсли;

							
							Если Плательщик.Количество() Тогда
								НовСтрока.Плательщик = Плательщик;
							КонецЕсли;
							
							Получатель = Новый Структура;
							Если ДетальТранзакции.RltdPties.Свойства().Получить("Cdtr") <> Неопределено Тогда
								
								Если ДетальТранзакции.RltdPties.Cdtr.Свойства().Получить("Nm") <> Неопределено Тогда
									Получатель.Вставить("Наименование", ДетальТранзакции.RltdPties.Cdtr.Nm);
								КонецЕсли;
								Если ДетальТранзакции.RltdPties.Cdtr.Свойства().Получить("Id") <> Неопределено
									И ДетальТранзакции.RltdPties.Cdtr.Id.Свойства().Получить("OrgId") <> Неопределено
									И ДетальТранзакции.RltdPties.Cdtr.Id.OrgId.Свойства().Получить("Othr") <> Неопределено Тогда
										Получатель.Вставить("ИНН", ДетальТранзакции.RltdPties.Cdtr.Id.OrgId.Othr.Id);
								КонецЕсли;
									
								Если ДетальТранзакции.RltdPties.Cdtr.Свойства().Получить("CtryOfRes") <> Неопределено Тогда
									АдресСтруктурированный = Новый Структура;
									Страна = Новый Структура;
									Страна.Вставить("ISOКод", ДетальТранзакции.RltdPties.Cdtr.CtryOfRes);
									АдресСтруктурированный.Вставить("Страна", Страна);
									Получатель.Вставить("АдресСтруктурированный", АдресСтруктурированный);
								КонецЕсли;
								
							КонецЕсли;
							
							// Счет получателя
							Если ДетальТранзакции.RltdPties.Свойства().Получить("CdtrAcct") <> Неопределено
								И ДетальТранзакции.RltdPties.CdtrAcct.Id.Свойства().Получить("Othr") <> Неопределено Тогда
								Получатель.Вставить("РасчСчет", ДетальТранзакции.RltdPties.CdtrAcct.Id.Othr.Id);
							КонецЕсли;
							
							// Банк получателя
							Если Получатель.Количество() И ДетальТранзакции.Свойства().Получить("RltdAgts") <> Неопределено
								И ДетальТранзакции.RltdAgts.Свойства().Получить("CdtrAgt") <> Неопределено Тогда
								
								Банк = Новый Структура;
								
								Если ДетальТранзакции.RltdAgts.CdtrAgt.FinInstnId.Свойства().Получить("BIC") <> Неопределено Тогда
									Банк.Вставить("SWIFT", ДетальТранзакции.RltdAgts.CdtrAgt.FinInstnId.BIC);
								КонецЕсли;
								
								Если ДетальТранзакции.RltdAgts.CdtrAgt.FinInstnId.Свойства().Получить("Nm") <> Неопределено Тогда
									Банк.Вставить("НаименованиеМеждународное", ДетальТранзакции.RltdAgts.CdtrAgt.FinInstnId.Nm);
								КонецЕсли;
								
								Если  ДетальТранзакции.RltdAgts.CdtrAgt.FinInstnId.Свойства().Получить("PstlAdr") <> Неопределено
									И ДетальТранзакции.RltdAgts.CdtrAgt.FinInstnId.PstlAdr.Свойства().Получить("Ctry") <> Неопределено Тогда
										Страна = Новый Структура;
										Страна.Вставить("ISOКод", ДетальТранзакции.RltdAgts.CdtrAgt.FinInstnId.PstlAdr.Ctry);
										Банк.Вставить("Страна", Страна);
								КонецЕсли;

								Если Банк.Количество() Тогда
									Получатель.Вставить("Банк", Банк);
								КонецЕсли;
								
							КонецЕсли;
							
							Если Получатель.Количество() Тогда
								НовСтрока.Получатель = Получатель;
							КонецЕсли;
						КонецЕсли;
						
						Если ДетальТранзакции.Свойства().Получить("RmtInf") <> Неопределено Тогда // детали документа
							Если ДетальТранзакции.RmtInf.Свойства().Получить("Ustrd") <> Неопределено Тогда // назначение платежа
								Если ТипЗнч(ДетальТранзакции.RmtInf.Ustrd) = Тип("Строка") Тогда
									НазначенияПлатежа = Новый Массив;
									НазначенияПлатежа.Добавить(ДетальТранзакции.RmtInf.Ustrd);
								Иначе
									НазначенияПлатежа = ДетальТранзакции.RmtInf.Ustrd;
								КонецЕсли;
								
								НазначениеПлатежаПолное = "";
								Для Каждого НазначениеПлатежа Из НазначенияПлатежа Цикл
									НазначениеПлатежаПолное = ?(ПустаяСтрока(НазначениеПлатежаПолное), "", НазначениеПлатежаПолное + Символы.ПС);
									НазначениеПлатежаПолное = НазначениеПлатежаПолное + НазначениеПлатежа;
								КонецЦикла;
								
								НовСтрока.НазначениеПлатежа = НазначениеПлатежаПолное;
							КонецЕсли;
							Если ДетальТранзакции.RmtInf.Свойства().Получить("Strd") <> Неопределено // структурные детали
								И ДетальТранзакции.RmtInf.Strd.Свойства().Получить("RfrdDocInf") <> Неопределено
								И ДетальТранзакции.RmtInf.Strd.RfrdDocInf.Свойства().Получить("RltdDt") <> Неопределено Тогда // дата документа
									НовСтрока.ДатаДокумента = XMLЗначение(Тип("Дата"), ДетальТранзакции.RmtInf.Strd.RfrdDocInf.RltdDt);
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаВыписки.Операции = ТаблицаОпераций;
			
		КонецЕсли;
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаВыписок, "Выписки");
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДанных", ДеревоДанных);
	
КонецПроцедуры

Процедура ПрочитатьПлатежноеПоручениеISO(ЭД, ДеревоРазбора, НовыйЭД)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты;
	ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИдентификаторДокумента", ЭД.CstmrCdtTrfInitn.GrpHdr.MsgId);
	
	МассивВыписок = Новый Массив;
	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента("ОбменСБанками.ПоручениеНаПереводВалюты");
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Дата", ЭД.CstmrCdtTrfInitn.GrpHdr.CreDtTm);
	
	ИнформацияОПлатеже = ЭД.CstmrCdtTrfInitn.PmtInf.Получить(0);
	
	ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.НаименованиеМеждународное", ИнформацияОПлатеже.Dbtr.Nm);
		
	ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.РасчСчет", ИнформацияОПлатеже.DbtrAcct.Id.Othr.Id);
	
	Если ИнформацияОПлатеже.Dbtr.PstlAdr <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Страна.ISOКод", ИнформацияОПлатеже.Dbtr.PstlAdr.Ctry);
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Город", ИнформацияОПлатеже.Dbtr.PstlAdr.TwnNm);
		Если ИнформацияОПлатеже.Dbtr.PstlAdr.AdrLine.Количество() Тогда
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Адрес",
				ИнформацияОПлатеже.Dbtr.PstlAdr.AdrLine.Получить(0));
		КонецЕсли;
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Индекс", ИнформацияОПлатеже.Dbtr.PstlAdr.PstCd);
	КонецЕсли;
	
	ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.Банк.НаименованиеМеждународное", ИнформацияОПлатеже.DbtrAgt.FinInstnId.Nm);
	ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.Банк.SWIFT", ИнформацияОПлатеже.DbtrAgt.FinInstnId.BIC);
		
	Если ИнформацияОПлатеже.DbtrAgt.FinInstnId.PstlAdr <> Неопределено
		И ИнформацияОПлатеже.DbtrAgt.FinInstnId.PstlAdr.AdrLine.Количество() Тогда
		Адрес = ИнформацияОПлатеже.DbtrAgt.FinInstnId.PstlAdr.AdrLine.Получить(0);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.Адрес", Адрес);
	КонецЕсли;
	
	РеквизитыПоКредиту = ИнформацияОПлатеже.CdtTrfTxInf.Получить(0);
	
	Если РеквизитыПоКредиту.Cdtr <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.НаименованиеМеждународное", РеквизитыПоКредиту.Cdtr.Nm);
		Если РеквизитыПоКредиту.Cdtr.PstlAdr <> Неопределено Тогда
			ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Страна.ISOКод", РеквизитыПоКредиту.Cdtr.PstlAdr.Ctry);
			ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Город", РеквизитыПоКредиту.Cdtr.PstlAdr.TwnNm);
			Если РеквизитыПоКредиту.Cdtr.PstlAdr.AdrLine.Количество() Тогда
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Адрес",
					РеквизитыПоКредиту.Cdtr.PstlAdr.AdrLine.Получить(0));
			КонецЕсли;
			ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Индекс", РеквизитыПоКредиту.Cdtr.PstlAdr.PstCd);
		КонецЕсли;
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Номер", РеквизитыПоКредиту.PmtId.EndToEndId);
	КонецЕсли;
	
	Если РеквизитыПоКредиту.CdtrAgt <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.НаименованиеМеждународное", РеквизитыПоКредиту.CdtrAgt.FinInstnId.Nm);
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.Банк.SWIFT", РеквизитыПоКредиту.CdtrAgt.FinInstnId.BIC);
		Если РеквизитыПоКредиту.CdtrAgt.FinInstnId.PstlAdr <> Неопределено Тогда
			ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.Банк.Страна.ISOКод", РеквизитыПоКредиту.CdtrAgt.FinInstnId.PstlAdr.Ctry);
			Если РеквизитыПоКредиту.CdtrAgt.FinInstnId.PstlAdr.AdrLine.Количество() Тогда
				Адрес = РеквизитыПоКредиту.CdtrAgt.FinInstnId.PstlAdr.AdrLine.Получить(0);
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.Адрес", Адрес);
			КонецЕсли;
		КонецЕсли;
		Если РеквизитыПоКредиту.CdtrAgt.FinInstnId.ClrSysMmbId <> Неопределено Тогда
			ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, "РеквизитыПолучателя.Банк.БИК", РеквизитыПоКредиту.CdtrAgt.FinInstnId.ClrSysMmbId.MmbId);
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыПоКредиту.CdtrAcct <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПолучателя.РасчСчет", РеквизитыПоКредиту.CdtrAcct.Id.Othr.Id);
	КонецЕсли;
	
	Если РеквизитыПоКредиту.IntrmyAgt1 <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.SWIFT", РеквизитыПоКредиту.IntrmyAgt1.FinInstnId.BIC);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.НаименованиеМеждународное",
			РеквизитыПоКредиту.IntrmyAgt1.FinInstnId.Nm);
	КонецЕсли;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаПеревода.ISOКодВалюты", РеквизитыПоКредиту.Amt.InstdAmt.Ccy);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаПеревода.Сумма", РеквизитыПоКредиту.Amt.InstdAmt.__content);

	Если РеквизитыПоКредиту.RgltryRptg.Количество() Тогда
		Транзакция = РеквизитыПоКредиту.RgltryRptg.Получить(0);
		Если Транзакция.Dtls.Количество() Тогда
			ТаблицаКодовВидовОпераций = Новый ТаблицаЗначений;
			ТаблицаКодовВидовОпераций.Колонки.Добавить("КодВидаВалютнойОперации");
			ТаблицаКодовВидовОпераций.Колонки.Добавить("Сумма");
			ТаблицаКодовВидовОпераций.Колонки.Добавить("ISOКодВалюты");
			ТаблицаКодовВидовОпераций.Колонки.Добавить("НомерПаспортаСделки");
			Для Каждого КодВидаОперации Из Транзакция.Dtls Цикл
				СтрокаТаблицы = ТаблицаКодовВидовОпераций.Добавить();
				СтрокаТаблицы.КодВидаВалютнойОперации = КодВидаОперации.Cd;
				Если КодВидаОперации.Amt <> Неопределено Тогда
					СтрокаТаблицы.Сумма = КодВидаОперации.Amt.__content;
					СтрокаТаблицы.ISOКодВалюты = КодВидаОперации.Amt.Ccy;
				КонецЕсли;
				Если КодВидаОперации.Inf.Количество() Тогда
					СтрокаТаблицы.НомерПаспортаСделки = КодВидаОперации.Inf.Получить(0);
				КонецЕсли;
			КонецЦикла;
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
				ДеревоДанных, ТаблицаКодовВидовОпераций, "КодыВидовВалютныхОпераций");
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыПоКредиту.RmtInf <> Неопределено И РеквизитыПоКредиту.RmtInf.Ustrd <> Неопределено Тогда
		НазначениеПлатежа = "";
		Для Каждого СтрокаНазначения Из РеквизитыПоКредиту.RmtInf.Ustrd Цикл
			НазначениеПлатежа = НазначениеПлатежа + СтрокаНазначения + Символы.ПС;
		КонецЦикла;
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.НазначениеПлатежа", НазначениеПлатежа);
	КонецЕсли;
	
	ТипКомиссии = ИнформацияОПлатеже.ChrgBr;
	
	Если ТипКомиссии = "CRED" Тогда
		ТипКомиссии = "BEN";
	ИначеЕсли ТипКомиссии = "DEBT" Тогда
		ТипКомиссии = "OUR";
	ИначеЕсли ТипКомиссии = "SHAR" Тогда
		ТипКомиссии = "SHA";
	КонецЕсли;

	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ТипКомиссии", ТипКомиссии);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДанных", ДеревоДанных);
	
КонецПроцедуры

#КонецОбласти

#Область ВнешняяКомпонента

Функция ПараметрыВК(ПутьКФайлуИнформации)
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПутьКФайлуИнформации);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ИмяМодуля", ЭД.progid);
		СтруктураВозврата.Вставить("Название", ЭД.name);
		СтруктураВозврата.Вставить("Версия", ЭД.version);
		Если ТипЗнч(ЭД.urladdin) = Тип("Строка") Тогда
			СтруктураВозврата.Вставить("URLВК", ЭД.urladdin);
		КонецЕсли;
		Если ТипЗнч(ЭД.urladdininfo) = Тип("Строка") Тогда
			СтруктураВозврата.Вставить("URLИнфо", ЭД.urladdininfo);
		КонецЕсли;

		Возврат СтруктураВозврата;
	Исключение
		Операция = НСтр("ru = 'Чтение файла информации о внешней компоненте.'");
		ТекстСообщения = НСтр("ru = 'При чтении информации о внешней компоненте произошла ошибка.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ТекстОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения = "", СсылкаОбъект = Неопределено)
	
	ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
		Операция, ТекстОшибки, ТекстСообщения, "ОбменСБанками", СсылкаОбъект);
	
КонецПроцедуры

// Возвращает формат даты со временем для России.
// Не исправлять, т.к это не является ошибкой.
// 
// Возвращаемое значение:
//  Строка - формат даты для России
//
Функция ФорматДатыИВремениРоссия()
	
	Возврат "ДФ='dd.MM.yyyy HH:mm:ss'";
	
КонецФункции

#КонецОбласти

#Область РазборВыпискиБанка

// Отмечает исполненные платежные документы
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//  ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - текущая программа банка
//  МассивВнешнихИдентификаторов - Массив - содержит идентификаторы платежных документов.
//
Процедура ОтметитьИсполненныеПлатежныеДокументы(НастройкаОбмена, ПрограммаБанка, МассивВнешнихИдентификаторов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.Ссылка КАК Ссылка,
	|	СостоянияОбменСБанками.СсылкаНаОбъект КАК СсылкаНаОбъектАктуальная,
	|	СвязанныеОбъектыОбменСБанками.СсылкаНаОбъект КАК СсылкаНаОбъектНеАктуальная
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	|		ПО (СостоянияОбменСБанками.СообщениеОбмена = СообщениеОбменСБанками.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязанныеОбъектыОбменСБанками КАК СвязанныеОбъектыОбменСБанками
	|		ПО (СвязанныеОбъектыОбменСБанками.СообщениеОбмена = СообщениеОбменСБанками.Ссылка)
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.ВидЭД В (ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ПлатежноеПоручение), ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ПлатежноеТребование), ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты), ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты), ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты), ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты))
	|	И СообщениеОбменСБанками.ВнешнийИдентификатор В(&МассивИдентификаторов)";
	
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивВнешнихИдентификаторов);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	Если ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВнешнийИдентификатор", "Идентификатор");
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.Подтвержден);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(Выборка.Ссылка, СтруктураПараметров);
		// Если электронный документ не актуален, но в выписке операция отражена, то необходимо вернуть актуальный ЭД.
		Если НЕ ЗначениеЗаполнено(Выборка.СсылкаНаОбъектАктуальная) И ЗначениеЗаполнено(Выборка.СсылкаНаОбъектНеАктуальная) Тогда
			МенеджерЗаписи = РегистрыСведений.СостоянияОбменСБанками.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.СсылкаНаОбъект = Выборка.СсылкаНаОбъектНеАктуальная;
			МенеджерЗаписи.СообщениеОбмена = Выборка.Ссылка;
			МенеджерЗаписи.Состояние = Перечисления.СостоянияОбменСБанками.ПлатежИсполнен;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция МассивИдентификаторовВыпискиБанка(ВыпискаБанка)
	
	МассивВнешнихИдентификаторов = Новый Массив;
	
	ДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(ВыпискаБанка);
	
	Если НЕ ТипЗнч(ДанныеЭД) = Тип("ДвоичныеДанные") Тогда
		Возврат МассивВнешнихИдентификаторов;
	КонецЕсли;
	
	СтруктураДанных = СформироватьДеревоРазбора(Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка, ДанныеЭД);
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат МассивВнешнихИдентификаторов;
	КонецЕсли;
	
	ДеревоРазбора = СтруктураДанных.ДеревоРазбора;
	СтрокаОбъекта = СтруктураДанных.СтрокаОбъекта;
	
	СтруктураОтбора = Новый Структура("Реквизит", "БанковскиеСчетаОрганизаций");
	БанковскиеСчетаОрганизаций = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
	МассивСчетов = Новый Массив;
	
	Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
		НомерСчета = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.РасчСчет");
		МассивСчетов.Добавить(НомерСчета);
	КонецЦикла;
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	
	МаксДата = Неопределено;
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		ТекНомерСчета = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПлательщикСчет");
		ЭтоИсходящийПлатеж = МассивСчетов.Найти(ТекНомерСчета) <> Неопределено;
		Если ЭтоИсходящийПлатеж Тогда
			ИДВнешний = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ИдПлатежа");
			Если ЗначениеЗаполнено(ИДВнешний) Тогда
				МассивВнешнихИдентификаторов.Добавить(ИДВнешний);
			КонецЕсли;
		КонецЕсли;
		ДатаСписано = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ДатаСписано");
		ДатаПоступило = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ДатаПоступило");
		ДатаОперации = ?(ЗначениеЗаполнено(ДатаСписано), ДатаСписано, ДатаПоступило);
		Если МаксДата = Неопределено ИЛИ (ДатаОперации <> Неопределено И ДатаОперации > МаксДата) Тогда
			МаксДата = ДатаОперации;
		КонецЕсли;
	КонецЦикла;
	
	Если МаксДата <> Неопределено Тогда
		НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыпискаБанка, "НастройкаОбмена");
		СохранитьДатуПоследнейОперации(НастройкаОбмена, МаксДата);
	КонецЕсли;
	
	Возврат МассивВнешнихИдентификаторов;

КонецФункции

Процедура СохранитьДатуПоследнейОперации(НастройкаОбмена, ДатаПоследнейОперации)
	
	МенеджерЗаписи = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.ДатаПоследнейОперации <> ДатаПоследнейОперации Тогда
		МенеджерЗаписи.ДатаПоследнейОперации = ДатаПоследнейОперации;
		МенеджерЗаписи.НастройкаОбмена = НастройкаОбмена;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Письма

Функция ТекстЗапросаКоличестваЭлементовПоРазделу(Знач Раздел)
	
	ТекстЗапроса = Неопределено;
	
	Если Раздел = "ВходящиеНепрочитанные" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	КОЛИЧЕСТВО(1) КАК _Счетчик
		               |ИЗ
		               |	(ВЫБРАТЬ ПЕРВЫЕ 1000
		               |		1 КАК _Счетчик
		               |	ИЗ
		               |		Документ.ПисьмоОбменСБанками КАК ПисьмоОбменСБанками
		               |	ГДЕ
		               |		ПисьмоОбменСБанками.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		               |		И НЕ ПисьмоОбменСБанками.ПометкаУдаления
		               |		И НЕ ПисьмоОбменСБанками.Прочитано) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ИсходящиеНаПодписи" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	КОЛИЧЕСТВО(1) КАК _Счетчик
		               |ИЗ
		               |	(ВЫБРАТЬ ПЕРВЫЕ 1000
		               |		1 КАК _Счетчик
		               |	ИЗ
		               |		Документ.ПисьмоОбменСБанками КАК ПисьмоОбменСБанками
		               |	ГДЕ
		               |		ПисьмоОбменСБанками.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.ЧастичноПодписан), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.НеПодтвержден))
		               |		И ПисьмоОбменСБанками.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
		               |		И НЕ ПисьмоОбменСБанками.ПометкаУдаления) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ИсходящиеОтклоненные" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	КОЛИЧЕСТВО(1) КАК _Счетчик
		               |ИЗ
		               |	(ВЫБРАТЬ ПЕРВЫЕ 1000
		               |		1 КАК _Счетчик
		               |	ИЗ
		               |		Документ.ПисьмоОбменСБанками КАК ПисьмоОбменСБанками
		               |	ГДЕ
		               |		ПисьмоОбменСБанками.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.ОтклоненБанком), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.ОшибкаПередачи))
		               |		И ПисьмоОбменСБанками.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
		               |		И НЕ ПисьмоОбменСБанками.ПометкаУдаления) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ИсходящиеЧерновики" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	КОЛИЧЕСТВО(1) КАК _Счетчик
		               |ИЗ
		               |	(ВЫБРАТЬ ПЕРВЫЕ 1000
		               |		1 КАК _Счетчик
		               |	ИЗ
		               |		Документ.ПисьмоОбменСБанками КАК ПисьмоОбменСБанками
		               |	ГДЕ
		               |		ПисьмоОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Черновик)
		               |		И ПисьмоОбменСБанками.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
		               |		И НЕ ПисьмоОбменСБанками.ПометкаУдаления) КАК ВложенныйЗапрос";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьПисьмоСбербанк(СсылкаНаОбъект, Идентификатор, НастройкаОбмена, АдресФайлаВоВременномХранилище)

	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "ИспользуетсяКриптография, ИмяВнешнегоМодуля, НаименованиеБанка, НомерПодразделенияБанка");
	ИспользуетсяПодпись = РеквизитыНастройкиОбмена.ИспользуетсяКриптография;
	ИмяВнешнегоМодуля = РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля;
	
	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект,
		"Дата, Номер, Организация, ТипПисьма, Тема, Текст, СчетОрганизации, ДляВалютногоКонтроля, Основание");
	
	ПространствоИмен = "http://bssys.com/upg/request";
	ТекстОшибки = "";
	
	Если РеквизитыПисьма.ДляВалютногоКонтроля Тогда
		ПисьмоXDTO = ОбъектТипаCML(ФабрикаXDTO, "ExchangeMessagesWithBank", ПространствоИмен);
	Иначе
		ПисьмоXDTO = ОбъектТипаCML(ФабрикаXDTO, "LetterInBank", ПространствоИмен);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(ПисьмоXDTO, "docExtId", Идентификатор, Истина, ТекстОшибки);
	Если Не ИспользуетсяПодпись Тогда
		ЗаполнитьСвойствоXDTO(ПисьмоXDTO, "sentForSign", "1", , ТекстОшибки);
	КонецЕсли;
	
	Если РеквизитыПисьма.ДляВалютногоКонтроля Тогда
		ШапкаXDTO = ОбъектТипаCML(ФабрикаXDTO, "ComDocData", ПространствоИмен);
	Иначе
		ШапкаXDTO = ОбъектТипаCML(ФабрикаXDTO, "ComLettData", ПространствоИмен);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(ШапкаXDTO, "docDate", РеквизитыПисьма.Дата, Истина, ТекстОшибки);
	КороткийНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыПисьма.Номер);
	ЗаполнитьСвойствоXDTO(ШапкаXDTO, "docNum", КороткийНомер, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ШапкаXDTO, "bankName", РеквизитыНастройкиОбмена.НаименованиеБанка, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ШапкаXDTO, "bankNum", РеквизитыНастройкиОбмена.НомерПодразделенияБанка, , ТекстОшибки);
	
	OrgData = ОбъектТипаCML(ФабрикаXDTO, "OrgData", ПространствоИмен);
	
	РеквизитИНН = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИНН");
	Если НЕ ЗначениеЗаполнено(РеквизитИНН) Тогда
		РеквизитИНН = "ИНН";
	КонецЕсли;

	РеквизитСокращенноеНаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"СокращенноеНаименованиеОрганизации");
	Если НЕ ЗначениеЗаполнено(РеквизитСокращенноеНаименованиеОрганизации) Тогда
		РеквизитСокращенноеНаименованиеОрганизации = "Наименование";
	КонецЕсли;

	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыПисьма.Организация, РеквизитИНН + "," + РеквизитСокращенноеНаименованиеОрганизации);
		
	ИНН = Неопределено;
	РеквизитыОрганизации.Свойство(РеквизитИНН, ИНН);
	ЗаполнитьСвойствоXDTO(OrgData, "inn", ИНН, Истина, ТекстОшибки);

	НаименованиеОрганизации = Неопределено;
	РеквизитыОрганизации.Свойство(РеквизитСокращенноеНаименованиеОрганизации, НаименованиеОрганизации);
	ЗаполнитьСвойствоXDTO(OrgData, "orgName", НаименованиеОрганизации, Истина, ТекстОшибки);
	
	ЗаполнитьСвойствоXDTO(ШапкаXDTO, "OrgData", OrgData, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ПисьмоXDTO, "DocData", ШапкаXDTO, Истина, ТекстОшибки);
	Если НЕ РеквизитыПисьма.ДляВалютногоКонтроля И ЗначениеЗаполнено(РеквизитыПисьма.ТипПисьма) Тогда
		ЗаполнитьСвойствоXDTO(ПисьмоXDTO, "Type", Строка(РеквизитыПисьма.ТипПисьма), , ТекстОшибки);
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(ПисьмоXDTO, "Theme", РеквизитыПисьма.Тема, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ПисьмоXDTO, "AddInfo", РеквизитыПисьма.Текст, Истина, ТекстОшибки);
	
	Если РеквизитыПисьма.ДляВалютногоКонтроля Тогда
		Если ТипЗнч(РеквизитыПисьма.Основание) = Тип("ДокументСсылка.ПисьмоОбменСБанками") Тогда
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				РеквизитыПисьма.Основание, "Направление, Номер, ВходящийНомер, Дата, ВходящаяДата");
			Если РеквизитыОснования.Направление = Перечисления.НаправленияЭД.Входящий Тогда
				ТипДокументаОснования = "Письмо для целей ВК (из банка)";
				НомерДокументаОснования = РеквизитыОснования.ВходящийНомер;
				ДатаДокументаОснования = РеквизитыОснования.ВходящаяДата;
			Иначе
				ТипДокументаОснования = "Письмо для целей ВК (в банк)";
				НомерДокументаОснования = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОснования.Номер);
				ДатаДокументаОснования = РеквизитыОснования.Дата;
			КонецЕсли;
		Иначе
			ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(РеквизитыПисьма.Основание);
			Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты Тогда
				ТипДокументаОснования = "Поручение на перевод валюты";
			Иначе
				ТипДокументаОснования = "Платежное поручение";
			КонецЕсли;
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыПисьма.Основание, "Номер, Дата");
			НомерДокументаОснования = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОснования.Номер);
			ДатаДокументаОснования = РеквизитыОснования.Дата;
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ПисьмоXDTO, "TemplateDocumentType", ТипДокументаОснования, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПисьмоXDTO, "TemplateDocumentNumber", НомерДокументаОснования, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПисьмоXDTO, "TemplateDocumentDate", ДатаДокументаОснования, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПисьмоXDTO, "TemplateDocumentName", ТипДокументаОснования, Истина, ТекстОшибки);
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(СсылкаНаОбъект, МассивФайлов);
	AttachmentsType = ОбъектТипаCML(ФабрикаXDTO, "AttachmentsType", ПространствоИмен);
	
	ЕстьФайлы = Ложь;
	Если МассивФайлов.Количество() Тогда
		ПометкаНаУдалениеПрисоединенныхФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивФайлов, "ПометкаУдаления");
		ЕстьФайлы = Истина;
	КонецЕсли;
	
	Для каждого ПрисоединенныйФайл Из МассивФайлов Цикл
		
		Если ПометкаНаУдалениеПрисоединенныхФайлов.Получить(ПрисоединенныйФайл) Тогда
			Продолжить;
		КонецЕсли;
		

		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
		Attachment = ОбъектТипаCML(ФабрикаXDTO, "AttachmentsType.Attachment", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(Attachment, "Type", ДанныеФайла.Расширение, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Attachment, "AttachmentName", ДанныеФайла.ИмяФайла, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Attachment, "Description", ДанныеФайла.Наименование, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Attachment, "Date", ДанныеФайла.ДатаМодификацииУниверсальная, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Attachment, "Size", ДанныеФайла.Размер, , ТекстОшибки);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ЗаполнитьСвойствоXDTO(Attachment, "Body", ДвоичныеДанныеФайла, Истина, ТекстОшибки);
		AttachmentsType.Attachment.Добавить(Attachment);
		
	КонецЦикла;
	
	Если ЕстьФайлы Тогда
		ЗаполнитьСвойствоXDTO(ПисьмоXDTO, "Attachments", AttachmentsType, , ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании электронного документа произошла ошибка:
									|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекстОшибки);
		ВидОперации = НСтр("ru = 'Формирование электронного документа'");
		ОбработатьОшибку(ВидОперации, ТекстСообщения, , СсылкаНаОбъект);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПисьмоXDTO.Проверить();
	
	ДвоичныеДанные = ДвоичныеДанныеИзXDTO(ФабрикаXDTO, ПисьмоXDTO);

	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
КонецФункции

// Формирует данные для электронного документа Письмо в банк
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка.ПисьмоОбменСБанками - ссылка на документ информационной базы, на основании которого формируется электронный документ;
//  НастройкиОбменаЭД - Структура - настройки обмена электронными документами
//  СтруктураПараметров - Структура - данные, возвращаемые процедурой.
//
Процедура СформироватьПисьмо(СсылкаНаОбъект, НастройкиОбменаЭД, СтруктураПараметров)
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.Письмо);
	СтруктураЭД.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	Идентификатор = Строка(Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("Идентификатор", Идентификатор);
	СтруктураЭД.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ПечатныйНомерДокумента = "";
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, ПечатныйНомерДокумента);
	
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("НастройкаОбмена", НастройкиОбменаЭД.НастройкаОбмена);
	СтруктураЭД.Вставить("ПрограммаБанка", НастройкиОбменаЭД.ПрограммаБанка);
	СтруктураЭД.Вставить("Подписывать", НастройкиОбменаЭД.Подписывать);
	
	ПрограммаБанка = НастройкиОбменаЭД.ПрограммаБанка;
	
	АдресФайлаВоВременномХранилище = Неопределено;
	
	Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		СформироватьПисьмоСбербанк(СсылкаНаОбъект, Идентификатор, НастройкиОбменаЭД.НастройкаОбмена, АдресФайлаВоВременномХранилище);
	КонецЕсли;
	
	СтруктураЭД.Вставить("Основной", Истина);
	СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураЭД.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
	СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
	СтруктураПараметров.Вставить("Организация", НастройкиОбменаЭД.Организация);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	
КонецПроцедуры

#КонецОбласти

#Область Журналирование

// Определяет смещение времени сервера относительно времени программы.
//
// Возвращаемое значение:
//   Число - Смещение времени в секундах.
//       Может использоваться для приведения фильтров, применяемых к журналу, к дате сервера,
//       а также для приведения дат, полученных из журнала, к датам программы.
//
Функция СмещениеВремениСервера()
	
	СмещениеВремениСервера = ТекущаяДата() - ТекущаяДатаСеанса();
	Если СмещениеВремениСервера >= -1 И СмещениеВремениСервера <= 1 Тогда
		СмещениеВремениСервера = 0;
	КонецЕсли;
	Возврат СмещениеВремениСервера;
	
КонецФункции

// Преобразование отбора.
//
// Параметры:
//  Отбор - отбор - передаваемый отбор.
//
Процедура ПреобразованиеОтбора(Отбор, СмещениеВремениСервера)
	
	Для Каждого ЭлементОтбора Из Отбор Цикл
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
			ПреобразованиеЭлементаОтбора(Отбор, ЭлементОтбора);
		ИначеЕсли ВРег(ЭлементОтбора.Ключ) = ВРег("Транзакция") Тогда
			Если СтрНайти(ЭлементОтбора.Значение, "(") = 0 Тогда
				Отбор.Вставить(ЭлементОтбора.Ключ, "(" + ЭлементОтбора.Значение);
			КонецЕсли;
		ИначеЕсли СмещениеВремениСервера <> 0
			И (ВРег(ЭлементОтбора.Ключ) = ВРег("ДатаНачала") Или ВРег(ЭлементОтбора.Ключ) = ВРег("ДатаОкончания")) Тогда
			Отбор.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение + СмещениеВремениСервера);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Преобразование элемента отбора.
//
// Параметры:
//  Отбор - отбор - передаваемый отбор.
//  Отбор - Элемент отбора - элемент передаваемого отбора.
//
Процедура ПреобразованиеЭлементаОтбора(Отбор, ЭлементОтбора)
	
	КлючСтруктурыОтбора = ЭлементОтбора.Ключ;
	// Эта процедура вызывается, если элемент отбора является списком значений,
	// в отборе же должен быть массив значений. Преобразуем список в массив.
	Если ВРег(КлючСтруктурыОтбора) = ВРег("РазделениеДанныхСеанса") Тогда
		НовоеЗначение = Новый Структура;
	Иначе
		НовоеЗначение = Новый Массив;
	КонецЕсли;
	
	КлючСтруктурыОтбора = ЭлементОтбора.Ключ;
	
	Для Каждого ЗначениеИзСписка Из ЭлементОтбора.Значение Цикл
		Если ВРег(КлючСтруктурыОтбора) = ВРег("Уровень") Тогда
			// Уровни сообщений представлены строкой, требуется преобразование в значение перечисления.
			НовоеЗначение.Добавить(УровеньЖурналаРегистрацииЗначениеПоИмени(ЗначениеИзСписка.Значение));
		ИначеЕсли ВРег(КлючСтруктурыОтбора) = ВРег("СтатусТранзакции") Тогда
			// Статусы транзакций представлены строкой, требуется преобразование в значение перечисления.
			НовоеЗначение.Добавить(СтатусТранзакцииЗаписиЖурналаРегистрацииЗначениеПоИмени(ЗначениеИзСписка.Значение));
		ИначеЕсли ВРег(КлючСтруктурыОтбора) = ВРег("РазделениеДанныхСеанса") Тогда
			МассивЗначенийРазделителей = Новый Массив;
			КлючСтруктурыОтбора = "РазделениеДанныхСеанса";
			РазделениеДанныхМассив = СтрРазделить(ЗначениеИзСписка.Значение, "=", Истина);
			
			ЗначенияРазделителя = СтрРазделить(РазделениеДанныхМассив[1], ",", Истина);
			Для Каждого ЗначениеРазделителя Из ЗначенияРазделителя Цикл
				ЭлементОтбораПоРазделителю = Новый Структура("Значение, Использование", Число(ЗначениеРазделителя), Истина);
				МассивЗначенийРазделителей.Добавить(ЭлементОтбораПоРазделителю);
			КонецЦикла;
			
			НовоеЗначение.Вставить(РазделениеДанныхМассив[0], МассивЗначенийРазделителей);
			
		Иначе
			ЗначенияОтбора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗначениеИзСписка.Значение, Символы.ПС);
			Для Каждого ЗначениеОтбора Из ЗначенияОтбора Цикл
				НовоеЗначение.Добавить(ЗначениеОтбора);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Отбор.Вставить(ЭлементОтбора.Ключ, НовоеЗначение);
	
КонецПроцедуры

Процедура ДобавитьЗаписьВЖурналОбмена(НастройкаОбмена, Лог)
	
	Подсистема = НСтр("ru = 'Обмен с банками'", ОбщегоНазначения.КодОсновногоЯзыка());
	Журнал = НСтр("ru = 'Журнал'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ИмяСобытия = НСтр("ru = 'Электронное взаимодействие.%1.%2'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ИмяСобытия = СтрШаблон(ИмяСобытия, Подсистема, Журнал);
	
	ОбъектМетаданных = Метаданные.Справочники.НастройкиОбменСБанками;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, ОбъектМетаданных, НастройкаОбмена, Лог);
	
КонецПроцедуры

Процедура СохранитьЗапрос(НастройкаОбмена, URL, Соединение, HTTPЗапрос)
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("POST ");
	МассивСтрок.Добавить(URL);
	МассивСтрок.Добавить("/");
	МассивСтрок.Добавить(HTTPЗапрос.АдресРесурса);
	МассивСтрок.Добавить(" HTTP/1.1
						|Host: ");
	МассивСтрок.Добавить(Соединение.Сервер);
	МассивСтрок.Добавить(":");
	МассивСтрок.Добавить(Соединение.Порт);
	МассивСтрок.Добавить("
						|User-Agent: 1C+Enterprise/8.3
						|Accept: */*
						|");
	
	Тело = HTTPЗапрос.ПолучитьТелоКакСтроку();
	Для каждого ЭлементКоллекции Из HTTPЗапрос.Заголовки Цикл
		МассивСтрок.Добавить(ЭлементКоллекции.Ключ);
		МассивСтрок.Добавить(": ");
		Если Не ЗначениеЗаполнено(НастройкаОбмена) И ЭлементКоллекции.Ключ = "Authorization" Тогда
			МассивСтрок.Добавить("***********");
		Иначе
			МассивСтрок.Добавить(ЭлементКоллекции.Значение);
		КонецЕсли;
		МассивСтрок.Добавить(Символы.ПС);
	КонецЦикла;
	Если Тело <> Неопределено Тогда
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Тело);
	КонецЕсли;
	
	Лог = СтрСоединить(МассивСтрок);
	ДобавитьЗаписьВЖурналОбмена(НастройкаОбмена, Лог);
	
КонецПроцедуры

Процедура СохранитьОтвет(НастройкаОбмена, HTTPОтвет, ИмяФайла = Неопределено)
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("HTTP/1.1 ");
	МассивСтрок.Добавить(HTTPОтвет.КодСостояния);
	МассивСтрок.Добавить(?(HTTPОтвет.КодСостояния = 200, " " + "OK", ""));
	МассивСтрок.Добавить(Символы.ПС);

	ДвоичныеДанныеВТеле = Ложь;
	Для Каждого ЭлементКоллекции Из HTTPОтвет.Заголовки Цикл
		МассивСтрок.Добавить(ЭлементКоллекции.Ключ);
		МассивСтрок.Добавить(": ");
		МассивСтрок.Добавить(ЭлементКоллекции.Значение);
		МассивСтрок.Добавить(Символы.ПС);
		Если ЭлементКоллекции.Ключ = "Content-Type"
			И (ЭлементКоллекции.Значение = "application/zip" ИЛИ ЭлементКоллекции.Значение = "application/gzip") Тогда
			ДвоичныеДанныеВТеле = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяФайла <> Неопределено Тогда
		Если ДвоичныеДанныеВТеле Тогда
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
			Тело = Base64Строка(ДвоичныеДанные);
		Иначе
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ИмяФайла);
			Тело = ТекстовыйДокумент.ПолучитьТекст();
		КонецЕсли;
	Иначе
		Если ДвоичныеДанныеВТеле Тогда
			ДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
			Тело = Base64Строка(ДвоичныеДанные);
		Иначе
			Тело = HTTPОтвет.ПолучитьТелоКакСтроку();
		КонецЕсли;
	КонецЕсли;
	
	Если Тело <> Неопределено Тогда
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Тело);
	КонецЕсли;
	
	Лог = СтрСоединить(МассивСтрок);
	
	ДобавитьЗаписьВЖурналОбмена(НастройкаОбмена, Лог);
	
КонецПроцедуры

// Возвращает значение перечисления соответствующе строковому имени статус события.
//
// Параметры:
//	Имя - Строка - статус транзакции записи.
//
// Возвращаемое значение:
//	СтатусТранзакцииЗаписиЖурналаРегистрации - значение статуса транзакции.
//
Функция СтатусТранзакцииЗаписиЖурналаРегистрацииЗначениеПоИмени(Имя)
	
	ЗначениеПеречисления = Неопределено;
	Если Имя = "Зафиксирована" Тогда
		ЗначениеПеречисления = СтатусТранзакцииЗаписиЖурналаРегистрации.Зафиксирована;
	ИначеЕсли Имя = "НеЗавершена" Тогда
		ЗначениеПеречисления = СтатусТранзакцииЗаписиЖурналаРегистрации.НеЗавершена;
	ИначеЕсли Имя = "НетТранзакции" Тогда
		ЗначениеПеречисления = СтатусТранзакцииЗаписиЖурналаРегистрации.НетТранзакции;
	ИначеЕсли Имя = "Отменена" Тогда
		ЗначениеПеречисления = СтатусТранзакцииЗаписиЖурналаРегистрации.Отменена;
	КонецЕсли;
	Возврат ЗначениеПеречисления;
	
КонецФункции

// Возвращает значение перечисления соответствующе строковому уровню журнала регистрации.
//
// Параметры:
//	Имя - Строка - уровень журнала регистрации.
//
// Возвращаемое значение:
//	УровеньЖурналаРегистрации - значение уровня журнала регистрации.
//
Функция УровеньЖурналаРегистрацииЗначениеПоИмени(Имя)
	
	ЗначениеПеречисления = Неопределено;
	Если Имя = "Информация" Тогда
		ЗначениеПеречисления = УровеньЖурналаРегистрации.Информация;
	ИначеЕсли Имя = "Ошибка" Тогда
		ЗначениеПеречисления = УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли Имя = "Предупреждение" Тогда
		ЗначениеПеречисления = УровеньЖурналаРегистрации.Предупреждение;
	ИначеЕсли Имя = "Примечание" Тогда
		ЗначениеПеречисления = УровеньЖурналаРегистрации.Примечание;
	КонецЕсли;
	Возврат ЗначениеПеречисления;
	
КонецФункции

#КонецОбласти

#КонецОбласти


