#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Заполняет регистр бухгалтерские взаиморасчеты с сотрудниками для тех типов ведомостей, которые
// предполагают наличие отдельных документов, регистрирующих оплату ведомостей.
Процедура ЗаполнитьБухгалтерскиеВзаиморасчетыПоОплатамВедомостей(ПараметрыОбновления = Неопределено) Экспорт 
	
	Если Не ЗарплатаКадры.ИспользуютсяДокументыОплатыВедомостей() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ТипыВедомостейДляЗапроса = ТипыВедомостейДляОплатыИзРегистраторовВзаиморасчетов();
	Если ТипыВедомостейДляЗапроса.Количество()=0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	УсловияПоТипамВедомостей = "";
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	Взаиморасчеты.Регистратор КАК Регистратор,
		|	Взаиморасчеты.Период
		|ПОМЕСТИТЬ
		|	ВТРегистраторыПустые
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
		|		ПО ОплатаВедомостей.Ведомость = Взаиморасчеты.Регистратор
		|			И ОплатаВедомостей.Организация = Взаиморасчеты.Организация
		|			И ОплатаВедомостей.ФизическоеЛицо = Взаиморасчеты.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БухгалтерскиеВзаиморасчетыССотрудниками КАК БухгалтерскиеВзаиморасчеты
		|		ПО 
		|			ОплатаВедомостей.Регистратор = БухгалтерскиеВзаиморасчеты.Регистратор
		|			И БухгалтерскиеВзаиморасчеты.Организация = Взаиморасчеты.Организация
		|			И БухгалтерскиеВзаиморасчеты.ФизическоеЛицо = Взаиморасчеты.ФизическоеЛицо
		|			И БухгалтерскиеВзаиморасчеты.СтатьяФинансирования = Взаиморасчеты.СтатьяФинансирования
		|			И БухгалтерскиеВзаиморасчеты.СтатьяРасходов = Взаиморасчеты.СтатьяРасходов
		|			И БухгалтерскиеВзаиморасчеты.Сотрудник = Взаиморасчеты.Сотрудник
		|			И БухгалтерскиеВзаиморасчеты.Подразделение = Взаиморасчеты.Подразделение
		|ГДЕ
		|	БухгалтерскиеВзаиморасчеты.Регистратор ЕСТЬ NULL";
	Запрос.Текст = Запрос.Текст + "
		|		  И (";
	Для Каждого ТипВедомости Из ТипыВедомостейДляЗапроса Цикл
		УсловияПоТипамВедомостей = УсловияПоТипамВедомостей + ?(УсловияПоТипамВедомостей="", "
			|				Взаиморасчеты.Регистратор ССЫЛКА Документ." + Метаданные.НайтиПоТипу(ТипВедомости).Имя, "
			|			ИЛИ Взаиморасчеты.Регистратор ССЫЛКА Документ." + Метаданные.НайтиПоТипу(ТипВедомости).Имя);
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + УсловияПоТипамВедомостей + "

		|			)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Взаиморасчеты.Период УБЫВ;
		|			
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ведомости.Ведомость КАК Регистратор
		|ПОМЕСТИТЬ
		|	ВТРегистраторы
		|ИЗ
		|	ВТРегистраторыПустые КАК РегистраторыПустые
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
		|		ПО ОплатаВедомостей.Ведомость = РегистраторыПустые.Регистратор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК Ведомости
		|		ПО ОплатаВедомостей.Регистратор = Ведомости.Регистратор;
		|			
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистраторы.Регистратор
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	Иначе 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	КонецЕсли;
	
	// Подготовим массив типов регистраторов для расходных движений, которые реально есть в данных.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(ОплатаВедомостей.Регистратор) КАК ТипРегистратора
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО Регистраторы.Регистратор = Взаиморасчеты.Регистратор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
		|		ПО ОплатаВедомостей.Ведомость = Взаиморасчеты.Регистратор
		|			И ОплатаВедомостей.Организация = Взаиморасчеты.Организация
		|			И ОплатаВедомостей.ФизическоеЛицо = Взаиморасчеты.ФизическоеЛицо
		|СГРУППИРОВАТЬ ПО
		|	ТИПЗНАЧЕНИЯ(ОплатаВедомостей.Регистратор)";
	ТипыРегистраторовРасхода = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипРегистратора");

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|   ОплатаВедомостей.Регистратор КАК Регистратор,
		|	ВЫБОР";
	Для Каждого ТипРегистратора Из ТипыРегистраторовРасхода Цикл
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипРегистратора);
		ИспользоватьДатуПлатежа = МетаданныеДокумента.Реквизиты.Найти("ДатаПлатежа")<>Неопределено;
		ИмяМетаданных = МетаданныеДокумента.ПолноеИмя();
		Запрос.Текст = Запрос.Текст + 
		СтрШаблон("
		|		КОГДА ОплатаВедомостей.Регистратор ССЫЛКА %1
		|			ТОГДА ВЫРАЗИТЬ(ОплатаВедомостей.Регистратор КАК %1).%2", 
		ИмяМетаданных, ?(ИспользоватьДатуПлатежа, "ДатаПлатежа", "Дата"));
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
		|	КОНЕЦ КАК Период,";
	Запрос.Текст = Запрос.Текст + "
		|	 Взаиморасчеты.Период КАК ПериодРегистраВзаиморасчеты,
		|	 Взаиморасчеты.*
		|ИЗ
		|	 РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
		|		 ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		 ПО Регистраторы.Регистратор = Взаиморасчеты.Регистратор
		|		 ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
		|		 ПО ОплатаВедомостей.Ведомость = Взаиморасчеты.Регистратор
		|			 И ОплатаВедомостей.Организация = Взаиморасчеты.Организация
		|			 И ОплатаВедомостей.ФизическоеЛицо = Взаиморасчеты.ФизическоеЛицо
		|ГДЕ
		|	 НЕ ОплатаВедомостей.Регистратор ЕСТЬ NULL
		|УПОРЯДОЧИТЬ ПО
		|    ВЫБОР
		|        КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|            ТОГДА ОплатаВедомостей.Регистратор
		|        ИНАЧЕ Взаиморасчеты.Регистратор
		|    КОНЕЦ";
	
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПространствоБлокировки = "РегистрНакопления.БухгалтерскиеВзаиморасчетыССотрудниками.НаборЗаписей";
	ПолеБлокировки = "Регистратор";
	Пока ВыборкаПоРегистраторам.СледующийПоЗначениюПоля("Регистратор") Цикл 
		ТекущийРегистратор = ВыборкаПоРегистраторам.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, ПространствоБлокировки, ПолеБлокировки, ТекущийРегистратор) Тогда
			Продолжить;
		КонецЕсли;
		БухгалтерскиеВзаиморасчеты = РегистрыНакопления.БухгалтерскиеВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
		БухгалтерскиеВзаиморасчеты.Отбор.Регистратор.Установить(ТекущийРегистратор);
		Пока ВыборкаПоРегистраторам.Следующий() Цикл
			НовыйБухВзаиморасчет = БухгалтерскиеВзаиморасчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйБухВзаиморасчет, ВыборкаПоРегистраторам, , "Период,НомерСтроки");
			Если ЗначениеЗаполнено(ВыборкаПоРегистраторам.Период) Тогда
				ПериодДляЗаписиРегистраБухВзаиморасчеты = ВыборкаПоРегистраторам.Период;
			Иначе 
				ПериодДляЗаписиРегистраБухВзаиморасчеты = ВыборкаПоРегистраторам.ПериодРегистраВзаиморасчеты;
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Битая ссылка на документ-регистратор'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Предупреждение, , ТекущийРегистратор, ПространствоБлокировки);
			КонецЕсли;
			НовыйБухВзаиморасчет.Период = ПериодДляЗаписиРегистраБухВзаиморасчеты;
		КонецЦикла;
		БухгалтерскиеВзаиморасчеты.ОбменДанными.Загрузка = Истина;
		БухгалтерскиеВзаиморасчеты.ОбменДанными.Получатели.Очистить();
		БухгалтерскиеВзаиморасчеты.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		БухгалтерскиеВзаиморасчеты.Записать();
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет регистр бухгалтерские взаиморасчеты с сотрудниками для всех типов документов, кроме 
// тех ведомостей, которые предполагают наличие отдельных документов, регистрирующих оплату ведомостей.
Процедура ЗаполнитьБухгалтерскиеВзаиморасчетыКромеПоОплатамВедомостей(ПараметрыОбновления = Неопределено) Экспорт 
	
	ТипыВедомостейДляЗапроса = ТипыВедомостейДляОплатыИзРегистраторовВзаиморасчетов();
	ОграничитьТипыДокументов = ТипыВедомостейДляЗапроса.Количество()>0
								И ЗарплатаКадры.ИспользуютсяДокументыОплатыВедомостей();
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	// Создадим ВТ с очередной порцией документов-регистраторов, не являющихся документами (ведомостями),
	// оплата которых регистрируется отдельными специальными документами.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	Взаиморасчеты.Регистратор КАК Регистратор,
		|	Взаиморасчеты.Период
		|ПОМЕСТИТЬ
		|	ВТРегистраторыПустые
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БухгалтерскиеВзаиморасчетыССотрудниками КАК БухгалтерскиеВзаиморасчеты
		|		ПО БухгалтерскиеВзаиморасчеты.Регистратор = Взаиморасчеты.Регистратор
		|			И БухгалтерскиеВзаиморасчеты.Организация = Взаиморасчеты.Организация
		|			И БухгалтерскиеВзаиморасчеты.ФизическоеЛицо = Взаиморасчеты.ФизическоеЛицо
		|			И БухгалтерскиеВзаиморасчеты.СтатьяФинансирования = Взаиморасчеты.СтатьяФинансирования
		|			И БухгалтерскиеВзаиморасчеты.СтатьяРасходов = Взаиморасчеты.СтатьяРасходов
		|			И БухгалтерскиеВзаиморасчеты.Сотрудник = Взаиморасчеты.Сотрудник
		|			И БухгалтерскиеВзаиморасчеты.Подразделение = Взаиморасчеты.Подразделение
		|ГДЕ
		|	БухгалтерскиеВзаиморасчеты.Регистратор ЕСТЬ NULL";
	Если ОграничитьТипыДокументов Тогда 
		УсловияПоТипамВедомостей = "";
		Запрос.Текст = Запрос.Текст + "
			|		  И НЕ (";
		Для Каждого ТипВедомости Из ТипыВедомостейДляЗапроса Цикл
			УсловияПоТипамВедомостей = УсловияПоТипамВедомостей + ?(УсловияПоТипамВедомостей="", "
				|				Взаиморасчеты.Регистратор ССЫЛКА Документ." + Метаданные.НайтиПоТипу(ТипВедомости).Имя, "
				|			ИЛИ Взаиморасчеты.Регистратор ССЫЛКА Документ." + Метаданные.НайтиПоТипу(ТипВедомости).Имя);
		КонецЦикла;
		Запрос.Текст = Запрос.Текст + УсловияПоТипамВедомостей + "

			|			)";
	КонецЕсли;
	
	// Добавим запрос, который позволит определить, есть ли в ВТ данные.
	Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Взаиморасчеты.Период УБЫВ;
		|			
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистраторыПустые.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ
		|	ВТРегистраторы
		|ИЗ
		|	ВТРегистраторыПустые КАК РегистраторыПустые;
		|			
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистраторы.Регистратор
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	Иначе 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	КонецЕсли;
	
	// Подготовим массив типов регистраторов для расходных движений, которые реально есть в данных.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(Взаиморасчеты.Регистратор) КАК ТипРегистратора
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
		|		 ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		 ПО Регистраторы.Регистратор = Взаиморасчеты.Регистратор
		|ГДЕ
		|	 Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|СГРУППИРОВАТЬ ПО
		|	ТИПЗНАЧЕНИЯ(Взаиморасчеты.Регистратор)";
	ТипыРегистраторовРасхода = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипРегистратора");

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|    Взаиморасчеты.Регистратор КАК Регистратор,";
	Если ТипыРегистраторовРасхода.Количество()=0 Тогда 
		Запрос.Текст = Запрос.Текст + "
			|	 КОНЕЦПЕРИОДА(Взаиморасчеты.Период, Месяц) КАК Период,";
	Иначе 
		Запрос.Текст = Запрос.Текст + "
			|	 ВЫБОР
			|    	 КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|        	 ТОГДА 
			|				 ВЫБОР";
		Для Каждого ТипРегистратора Из ТипыРегистраторовРасхода Цикл
			ИмяМетаданных = Метаданные.НайтиПоТипу(ТипРегистратора).ПолноеИмя();
			Запрос.Текст = Запрос.Текст + "

			|					 КОГДА Взаиморасчеты.Регистратор ССЫЛКА " + ИмяМетаданных + "
			|						 ТОГДА ВЫРАЗИТЬ(Взаиморасчеты.Регистратор КАК " + ИмяМетаданных + ").Дата";
		КонецЦикла;
		Запрос.Текст = Запрос.Текст + "
			|				 КОНЕЦ
			|    	 ИНАЧЕ КОНЕЦПЕРИОДА(Взаиморасчеты.Период, Месяц)
			|	 КОНЕЦ КАК Период,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
		|	 Взаиморасчеты.Период КАК ПериодРегистраВзаиморасчеты,
		|	 Взаиморасчеты.*
		|ИЗ
		|	 РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
		|		 ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		 ПО Регистраторы.Регистратор = Взаиморасчеты.Регистратор
		|УПОРЯДОЧИТЬ ПО
		|    Взаиморасчеты.Регистратор";

	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПространствоБлокировки = "РегистрНакопления.БухгалтерскиеВзаиморасчетыССотрудниками.НаборЗаписей";
	ПолеБлокировки = "Регистратор";
	Пока ВыборкаПоРегистраторам.СледующийПоЗначениюПоля("Регистратор") Цикл 
		ТекущийРегистратор = ВыборкаПоРегистраторам.Регистратор;
		ИмяТипаРегистратора = Метаданные.НайтиПоТипу(ТипЗнч(ТекущийРегистратор)).Имя;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, ПространствоБлокировки, ПолеБлокировки, ТекущийРегистратор) Тогда
			Продолжить;
		КонецЕсли;
		БухгалтерскиеВзаиморасчеты = РегистрыНакопления.БухгалтерскиеВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
		БухгалтерскиеВзаиморасчеты.Отбор.Регистратор.Установить(ТекущийРегистратор);
		Пока ВыборкаПоРегистраторам.Следующий() Цикл
			НовыйБухВзаиморасчет = БухгалтерскиеВзаиморасчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйБухВзаиморасчет, ВыборкаПоРегистраторам, , "Период,НомерСтроки");
			Если ЗначениеЗаполнено(ВыборкаПоРегистраторам.Период) Тогда
				ПериодДляЗаписиРегистраБухВзаиморасчеты = ВыборкаПоРегистраторам.Период;
			Иначе 
				ПериодДляЗаписиРегистраБухВзаиморасчеты = ВыборкаПоРегистраторам.ПериодРегистраВзаиморасчеты;
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Битая ссылка на документ-регистратор'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Предупреждение, , ТекущийРегистратор, ПространствоБлокировки);
			КонецЕсли;
			Если ИмяТипаРегистратора="НачальнаяЗадолженностьПоЗарплате"
					И ВыборкаПоРегистраторам.ВидДвижения=ВидДвиженияНакопления.Приход Тогда 
				НовыйБухВзаиморасчет.Период = НачалоМесяца(ПериодДляЗаписиРегистраБухВзаиморасчеты) - 1;
			Иначе 
				НовыйБухВзаиморасчет.Период = ПериодДляЗаписиРегистраБухВзаиморасчеты;
			КонецЕсли;
		КонецЦикла;
		БухгалтерскиеВзаиморасчеты.ОбменДанными.Загрузка = Истина;
		БухгалтерскиеВзаиморасчеты.ОбменДанными.Получатели.Очистить();
		БухгалтерскиеВзаиморасчеты.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		БухгалтерскиеВзаиморасчеты.Записать();
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

Функция ТипыВедомостейДляОплатыИзРегистраторовВзаиморасчетов()
	ТипыВедомостейДляОплаты = Метаданные.РегистрыСведений.ОплатаВедомостейНаВыплатуЗарплаты.Измерения.Ведомость.Тип.Типы();
	НаборЗаписей = РегистрыНакопления.ВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
	ТипыРегистраторовВзаиморасчетов = НаборЗаписей.Отбор.Регистратор.ТипЗначения.Типы();
	ТипыВедомостей = Новый Массив;
	Для Каждого ТипВедомостиДляОплаты Из ТипыВедомостейДляОплаты Цикл 
		Если ТипыРегистраторовВзаиморасчетов.Найти(ТипВедомостиДляОплаты)<>Неопределено Тогда
			ТипыВедомостей.Добавить(ТипВедомостиДляОплаты);
		КонецЕсли;
	КонецЦикла;
	Возврат ТипыВедомостей;
КонецФункции

#КонецОбласти

#КонецЕсли