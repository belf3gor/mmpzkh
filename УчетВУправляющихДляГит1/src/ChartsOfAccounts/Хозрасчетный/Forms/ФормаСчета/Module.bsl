#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Ключ.Пустая() 
		И Параметры.ЗначениеКопирования.Пустая() Тогда
		Объект.Валютный       = Ложь;
		Объект.Количественный = Ложь;
	КонецЕсли;
	
	ВидыСубконтоЗапрещенногоСчета.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
	ИдентификаторОграниченияСпискаСубконто = ОграничениеСпискаСубконто();
	УстановитьДоступностьРедактированияВидовСубконто(ИдентификаторОграниченияСпискаСубконто);
	
	УстановитьВидимостьПредупрежденияУчетПоПодразделениям();
	
	Элементы.Родитель.ТолькоПросмотр = Объект.Предопределенный;
	
	Элементы.Вид.Доступность                  = НЕ Объект.Предопределенный;
	Элементы.Забалансовый.Доступность         = НЕ Объект.Предопределенный;
	Элементы.Количественный.Доступность       = НЕ Объект.Предопределенный;
	Элементы.Валютный.Доступность             = НЕ Объект.Предопределенный;
	Элементы.НалоговыйУчет.Доступность        = НЕ Объект.Предопределенный;
	Элементы.УчетПоПодразделениям.Доступность = НЕ Объект.Предопределенный;
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьУсловноеОформление();	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КодПриИзменении(Элемент)
	
	Объект.Код = СтрЗаменить(Объект.Код, " ", "");
	Пока Прав(Объект.Код, 1) = "." Цикл
		Объект.Код = Лев(Объект.Код, СтрДлина(Объект.Код)-1);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Если задан субсчет, то в его коде должна быть точка
	Код      = Объект.Код;
	Родитель = Объект.Родитель;
	
	Если СтрНайти(Код, ".") > 0 Тогда
		
		//Найдем код родителя, для этого найдем последнюю точку в коде счета
		ПозицияТочки = СтрДлина(Код);
		
		Пока Сред(Код, ПозицияТочки, 1) <> "." Цикл
			
			ПозицияТочки = ПозицияТочки - 1;
			
		КонецЦикла;
		
		КодРодителя    = Лев(Код, ПозицияТочки - 1);
		РодительПоКоду = НайтиРодителя(КодРодителя);
		
		Если НЕ ЗначениеЗаполнено(РодительПоКоду) Тогда
			
			ПоказатьПредупреждение( , СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='План счетов не содержит счета с кодом %1'"),
				КодРодителя));
			
		ИначеЕсли РодительПоКоду <> Объект.Ссылка Тогда
			
			Объект.Родитель       = РодительПоКоду;
			
			РодительПриИзмененииНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Код, ".", ""));
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	РодительПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РодительПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Родитель) Тогда
		// Ситуация может возникнуть в том случае, если родитель счета не выбран. Тогда никаких органичений быть не может.
		УстановитьДоступностьРедактированияВидовСубконто();
		Возврат;
	КонецЕсли;
	
	ИдентификаторОграниченияСпискаСубконто = ОграничениеСпискаСубконто(Объект.Родитель);
	Если ПустаяСтрока(ИдентификаторОграниченияСпискаСубконто) Тогда
		// Определяем запрещенность редактирования по родителю: если родитель - разрешенный счет, значит и текущий также
		// будет разрешенным, так как наличие ограничений определяется для иерархии счетов.
		УстановитьДоступностьРедактированияВидовСубконто();
		Возврат;
	КонецЕсли;
		
	// Если счет запрещенный, то принудительно копируем состав субконто из родителя и устанавливаем свойство ЗапрещенныйСчет.
	
	// Скопируем свойства счета
	СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Родитель, "Забалансовый, Валютный, Количественный, УчетПоПодразделениям, НалоговыйУчет, Вид");
	ЗаполнитьЗначенияСвойств(Объект, СвойстваСчета);
	
	//скопируем аналитику счета
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Счет", Объект.Родитель);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК ПорядокСубконто,
	|	ХозрасчетныйВидыСубконто.ТолькоОбороты,
	|	ХозрасчетныйВидыСубконто.Суммовой,
	|	ХозрасчетныйВидыСубконто.Валютный,
	|	ХозрасчетныйВидыСубконто.Количественный
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка = &Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйВидыСубконто.НомерСтроки";
	
	ЭталонныеСубконта = Запрос.Выполнить().Выгрузить();
	МассивСубконтоКУдалению = Новый Массив;
	// Удаляем лишние виды субконто
	Для К = 0 По Объект.ВидыСубконто.Количество()-1 Цикл
		ВидСубконто = Объект.ВидыСубконто[К].ВидСубконто;
		Если ЭталонныеСубконта.Найти(ВидСубконто, "ВидСубконто") = Неопределено Тогда
			МассивСубконтоКУдалению.Добавить(ВидСубконто);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СубконтоКУдалению Из МассивСубконтоКУдалению Цикл
		СтрокиКУдалению = Объект.ВидыСубконто.НайтиСтроки(Новый Структура("ВидСубконто", СубконтоКУдалению));
		Для Каждого СтрокаКУдалению ИЗ СтрокиКУдалению Цикл
			Объект.ВидыСубконто.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЦикла;
	
	// Установим свойства субконто так, как они установлены у родителя
	Для Каждого ЭталонноеСубконто ИЗ ЭталонныеСубконта Цикл
		СуществующееСубконто = Объект.ВидыСубконто.НайтиСтроки(Новый Структура("ВидСубконто", ЭталонноеСубконто.ВидСубконто));
		Если СуществующееСубконто.Количество()>0 Тогда
			ЗаполнитьЗначенияСвойств(СуществующееСубконто[0], ЭталонноеСубконто);
			ИндексСубконто = Объект.ВидыСубконто.Индекс(СуществующееСубконто[0]);
			Объект.ВидыСубконто.Сдвинуть(ИндексСубконто, ЭталонноеСубконто.ПорядокСубконто - 1 - ИндексСубконто);
		Иначе
			ЗаполнитьЗначенияСвойств(Объект.ВидыСубконто.Вставить(ЭталонноеСубконто.ПорядокСубконто-1), ЭталонноеСубконто);
		КонецЕсли;
		
	КонецЦикла;

	УстановитьДоступностьРедактированияВидовСубконто(ИдентификаторОграниченияСпискаСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютныйПриИзменении(Элемент)
	
	Элементы.ВидыСубконтоВалютный.Видимость = Объект.Валютный;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличественныйПриИзменении(Элемент)
	
	Элементы.ВидыСубконтоКоличественный.Видимость = Объект.Количественный;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыСубконто

&НаКлиенте
Процедура ВидыСубконтоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ЗапрещенныйСчет Тогда
		ПредупреждениеОНевозможностиИзмененияСоставаВидовСубконто(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыСубконтоПередНачаломИзменения(Элемент, Отказ)
	
	Если ЗапрещенныйСчет Тогда
		ПредупреждениеОНевозможностиИзмененияСоставаВидовСубконто(Отказ);
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Предопределенное Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыСубконтоВидСубконтоПриИзменении(Элемент)
	
	НастроитьСубконтоПродукцияПоУмолчанию(Элементы.ВидыСубконто.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыСубконтоТолькоОборотыПриИзменении(Элемент)
	
	ПредупредитьИзменениеНастроекСубконтоПродукция(Элементы.ВидыСубконто.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыСубконтоПередУдалением(Элемент, Отказ)
	
	Если ЗапрещенныйСчет Тогда
		ПредупреждениеОНевозможностиИзмененияСоставаВидовСубконто(Отказ);
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Предопределенное Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыСубконтоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Суммовой       = Истина;
		Элемент.ТекущиеДанные.Валютный       = Истина;
		Элемент.ТекущиеДанные.Количественный = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ВидыСубконтоВалютный

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВидыСубконтоВалютный");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Валютный", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ВидыСубконтоКоличественный

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВидыСубконтоКоличественный");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Количественный", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыСчета(Счет)
	
	ПараметрыСчета = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Хозрасчетный.УчетПоПодразделениям), ЛОЖЬ) КАК УчетПоПодразделениям,
	|	ЕСТЬNULL(МАКСИМУМ(Хозрасчетный.НалоговыйУчет), ЛОЖЬ) КАК НалоговыйУчет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель В ИЕРАРХИИ(&Родитель)";
	Запрос.УстановитьПараметр("Родитель", Счет);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ПараметрыСчета.Вставить("УчетПоПодразделениям", Истина);
		ПараметрыСчета.Вставить("НалоговыйУчет"       , Истина);
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПараметрыСчета.Вставить("УчетПоПодразделениям", НЕ Выборка.УчетПоПодразделениям);
		ПараметрыСчета.Вставить("НалоговыйУчет"       , НЕ Выборка.НалоговыйУчет);
	КонецЕсли;
	
	Возврат ПараметрыСчета;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиРодителя(КодРодителя)
	
	Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду(КодРодителя);
	
КонецФункции

&НаСервере
Функция ОграничениеСпискаСубконто(Знач Счет = Неопределено)
	
	ИдентификаторОграниченияСпискаСубконто = "";
	
	// Определяем счет, с которым может быть связано ограничение.
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Счет = Объект.Ссылка;
	КонецЕсли;
	Если Счет.Пустая() Тогда // создаётся новый элемент
		
		Если Параметры.Свойство("ЗначениеКопирования")
		   И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда // копирование
			Счет = Параметры.ЗначениеКопирования;
		ИначеЕсли Не Объект.Родитель.Пустая() Тогда // изменение родителя
			Счет = Объект.Родитель;
		Иначе
			Возврат ИдентификаторОграниченияСпискаСубконто;
		КонецЕсли;
		
	КонецЕсли;
	
	// Задаем список счетов, с которыми связаны ограничения.
	
	СчетаИсключения = ПланыСчетов.Хозрасчетный.ПолучитьСчетаИсключения();
	
	УчетТоваровВРознице = Новый Массив(2);
	УчетТоваровВРознице[0] = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ; // 41.12
	УчетТоваровВРознице[1] = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;                         // 42.02
	УчетТоваровВРознице = БухгалтерскийУчет.СформироватьМассивСубсчетов(УчетТоваровВРознице);
	УчетТоваровВРознице = ОбщегоНазначенияКлиентСервер.РазностьМассивов(УчетТоваровВРознице, СчетаИсключения);
	
	УчетЗапасов = Новый Массив(8);
	УчетЗапасов[0] = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;                 // 07
	УчетЗапасов[1] = ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств; // 08.04
	УчетЗапасов[2] = ПланыСчетов.Хозрасчетный.Товары;                                 // 41
	УчетЗапасов[3] = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;                     // 42.01
	УчетЗапасов[4] = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;                       // 43
	УчетЗапасов[5] = ПланыСчетов.Хозрасчетный.Материалы;                              // 10
	УчетЗапасов[6] = ПланыСчетов.Хозрасчетный.ТоварыОтгруженные;                      // 45
	УчетЗапасов[7] = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию;               // 004
	УчетЗапасов = БухгалтерскийУчет.СформироватьМассивСубсчетов(УчетЗапасов);
	УчетЗапасов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(УчетЗапасов, СчетаИсключения);
	УчетЗапасов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(УчетЗапасов, УчетТоваровВРознице);
	
	УчетДвиженияДенежныхСредств = Новый Массив(6);
	УчетДвиженияДенежныхСредств[0] = ПланыСчетов.Хозрасчетный.Касса;            // 50
	УчетДвиженияДенежныхСредств[1] = ПланыСчетов.Хозрасчетный.РасчетныеСчета;   // 51
	УчетДвиженияДенежныхСредств[2] = ПланыСчетов.Хозрасчетный.ВалютныеСчета;    // 52
	УчетДвиженияДенежныхСредств[3] = ПланыСчетов.Хозрасчетный.СпециальныеСчета; // 55
	УчетДвиженияДенежныхСредств[4] = ПланыСчетов.Хозрасчетный.ПереводыВПути;    // 57.01
	УчетДвиженияДенежныхСредств[5] = ПланыСчетов.Хозрасчетный.ПереводыВПутиВал; // 57.21
	УчетДвиженияДенежныхСредств = БухгалтерскийУчет.СформироватьМассивСубсчетов(УчетДвиженияДенежныхСредств);
	УчетДвиженияДенежныхСредств = ОбщегоНазначенияКлиентСервер.РазностьМассивов(УчетДвиженияДенежныхСредств, СчетаИсключения);
	
	УчетРасчетовСПерсоналом = Новый Массив(3);
	УчетРасчетовСПерсоналом[0] = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;     // 70
	УчетРасчетовСПерсоналом[1] = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;       // 76.04
	УчетРасчетовСПерсоналом[2] = ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов; // 97.01
	УчетРасчетовСПерсоналом = БухгалтерскийУчет.СформироватьМассивСубсчетов(УчетРасчетовСПерсоналом);
	УчетРасчетовСПерсоналом = ОбщегоНазначенияКлиентСервер.РазностьМассивов(УчетРасчетовСПерсоналом, СчетаИсключения);
	
	ЗапрещенныеСчета = Новый Структура;
	ЗапрещенныеСчета.Вставить("УчетТоваровВРознице",         УчетТоваровВРознице);
	ЗапрещенныеСчета.Вставить("УчетЗапасов",                 УчетЗапасов);
	ЗапрещенныеСчета.Вставить("УчетДвиженияДенежныхСредств", УчетДвиженияДенежныхСредств);
	ЗапрещенныеСчета.Вставить("УчетРасчетовСПерсоналом",     УчетРасчетовСПерсоналом);
	
	// Проверяем счет на принадлежность к одному из ограничений.
	
	Для каждого ГруппаСчетов Из ЗапрещенныеСчета Цикл

		Если ГруппаСчетов.Значение.Найти(Счет) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторОграниченияСпискаСубконто = ГруппаСчетов.Ключ;
		Прервать;
	
	КонецЦикла;
	
	Возврат ИдентификаторОграниченияСпискаСубконто;
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуНастройкиСубконто(ИдентификаторОграниченияСпискаСубконто)
	
	Если ИдентификаторОграниченияСпискаСубконто = "УчетЗапасов" Тогда
		ЗаголовокФормы = НСтр("ru='Учет запасов'");
	ИначеЕсли ИдентификаторОграниченияСпискаСубконто = "УчетТоваровВРознице" Тогда
		ЗаголовокФормы = НСтр("ru='Учет товаров в рознице'");
	ИначеЕсли ИдентификаторОграниченияСпискаСубконто = "УчетДвиженияДенежныхСредств" Тогда
		ЗаголовокФормы = НСтр("ru='Учет движения денежных средств'");
	ИначеЕсли ИдентификаторОграниченияСпискаСубконто = "УчетРасчетовСПерсоналом" Тогда
		ЗаголовокФормы = НСтр("ru='Учет расчетов с персоналом'");
	Иначе
		ЗаголовокФормы = НСтр("ru='Раздел учета'");
	КонецЕсли;
	Возврат Новый ФорматированнаяСтрока(ЗаголовокФормы,,,,
		"e1cib/command/ПланСчетов.Хозрасчетный.Команда." + ИдентификаторОграниченияСпискаСубконто);

КонецФункции

&НаКлиенте
Процедура ПредупреждениеОНевозможностиИзмененияСоставаВидовСубконто(Отказ)
	
	ПоказатьПредупреждение( , НСтр("ru = 'Состав видов субконто на этом счете определяется настройкой плана счетов.'"));
	Отказ = Истина;
	
КонецПроцедуры // ПредупреждениеОНевозможностиИзмененияСоставаВидовСубконто()

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	Если НЕ Объект.Предопределенный Тогда
		Если ЗначениеЗаполнено(Объект.Родитель) Тогда
			СвойстваТекущегоРодителя = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.Родитель);
			Элементы.УчетПоПодразделениям.Доступность = СвойстваТекущегоРодителя.УчетПоПодразделениям;
			Элементы.НалоговыйУчет.Доступность        = СвойстваТекущегоРодителя.НалоговыйУчет;
		Иначе
			Если НЕ Форма.Параметры.Ключ.Пустая() Тогда
				ПараметрыСчета = ПолучитьПараметрыСчета(Объект.Ссылка);
				Элементы.УчетПоПодразделениям.Доступность = ПараметрыСчета.УчетПоПодразделениям;
				Элементы.НалоговыйУчет.Доступность        = ПараметрыСчета.НалоговыйУчет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормой()

&НаСервере
Процедура УстановитьДоступностьРедактированияВидовСубконто(ИдентификаторОграниченияСпискаСубконто = "")
	
	МожноРедактировать = ПустаяСтрока(ИдентификаторОграниченияСпискаСубконто);
	
	Элементы.ВидыСубконто.Видимость                    = МожноРедактировать;
	Элементы.ВидыСубконтоЗапрещенногоСчета.Видимость   = НЕ МожноРедактировать;
	Элементы.ПредупреждениеЗапрещенногоСчета.Видимость = НЕ МожноРедактировать;
	
	Если НЕ МожноРедактировать Тогда
		Элементы.ПредупреждениеЗапрещенногоСчета.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru='   Состав видов субконто на этом счете определяется настройкой плана счетов ""'"),
			ПолучитьСсылкуНастройкиСубконто(ИдентификаторОграниченияСпискаСубконто),
			""".");
	КонецЕсли;
	
	Элементы.ВидыСубконтоДобавить.Доступность = МожноРедактировать;
	Элементы.ВидыСубконтоИзменить.Доступность = МожноРедактировать;
	Элементы.ВидыСубконтоУдалить.Доступность  = МожноРедактировать;
	
	Кнопка = Элементы.ВидыСубконто.КонтекстноеМеню.ПодчиненныеЭлементы.Найти("ВидыСубконтоКонтекстноеМенюДобавить");
	Если Кнопка <> Неопределено Тогда
		Кнопка.Доступность = МожноРедактировать;
	КонецЕсли;
	Кнопка = Элементы.ВидыСубконто.КонтекстноеМеню.ПодчиненныеЭлементы.Найти("ВидыСубконтоКонтекстноеМенюИзменить");
	Если Кнопка <> Неопределено Тогда
		Кнопка.Доступность = МожноРедактировать;
	КонецЕсли;
	Кнопка = Элементы.ВидыСубконто.КонтекстноеМеню.ПодчиненныеЭлементы.Найти("ВидыСубконтоКонтекстноеМенюУдалить");
	Если Кнопка <> Неопределено Тогда
		Кнопка.Доступность = МожноРедактировать;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПредупрежденияУчетПоПодразделениям()
	
	Элементы.ПредупреждениеУчетПоПодразделениям.Видимость = Ложь;
	
	Если Не ПланыСчетов.Хозрасчетный.ДоступнаНастройкаУчетаЗатратПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);       // 20
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства); // 23
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы); // 25
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);    // 26
	
	Для Каждого СчетЗатрат Из СчетаЗатрат Цикл
		Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Объект.Ссылка, СчетЗатрат) Тогда
			Элементы.ПредупреждениеУчетПоПодразделениям.Видимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область НастройкаВидаСубконтоПродукция

&НаКлиенте
// ОписаниеСубконто - строка из Объект.ВидыСубконто или аналогичная по составу коллекция
Процедура НастроитьСубконтоПродукцияПоУмолчанию(ОписаниеСубконто)
	
	Если ОписаниеСубконто.ВидСубконто <> ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСубконто.ТолькоОбороты = Истина;
	
КонецПроцедуры

&НаКлиенте
// ОписаниеСубконто - строка из Объект.ВидыСубконто или аналогичная по составу коллекция
Процедура ПредупредитьИзменениеНастроекСубконтоПродукция(ОписаниеСубконто)
	
	Если ОписаниеСубконто.ВидСубконто <> ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеСубконто.ТолькоОбороты Тогда
		// Значение по умолчанию
		Возврат;
	КонецЕсли;
	
	ПредставлениеСубконто = Строка(ОписаниеСубконто.ВидСубконто);
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Учет незавершенного производства в разрезе продукции не поддерживается.
			|Поэтому по субконто ""%1"" рекомендуется учитывать только обороты.
			|Следовать рекомендации?'"),
		ПредставлениеСубконто);
		
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Настройка субконто %1'"), ПредставлениеСубконто);
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПредупредитьИзменениеНастроекСубконтоПродукцияОтветПользователя", ЭтотОбъект, ОписаниеСубконто),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет,
		,// Без таймаута
		КодВозвратаДиалога.Да,
		ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик оповещения
Процедура ПредупредитьИзменениеНастроекСубконтоПродукцияОтветПользователя(РезультатВопроса, ОписаниеСубконто) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСубконто.ТолькоОбороты = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеНастройкиПланаСчетов" Тогда
		Прочитать();
		Элементы.ВидыСубконтоЗапрещенногоСчета.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
