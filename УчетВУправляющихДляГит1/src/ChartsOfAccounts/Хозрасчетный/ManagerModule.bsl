#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Описывает простой рабочий план счетов
//
Функция ОсновнойСчет(Назначение) Экспорт
	
	Если Назначение = "Затраты" Тогда
		
		Возврат ОбщехозяйственныеРасходы;
		
	ИначеЕсли Назначение = "Запасы" Тогда
		
		Возврат ТоварыНаСкладах;
		
	ИначеЕсли Назначение = "ЗапасыВЦенахПродажи" Тогда
		
		Возврат ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		
	ИначеЕсли Назначение = "ОборудованиеНаСкладе" Тогда
		
		Возврат ПриобретениеКомпонентовОсновныхСредств;
		
	ИначеЕсли Назначение = "ТоварыПринятыеНаКомиссию" Тогда
		
		Возврат ТоварыНаСкладе;
		
	ИначеЕсли Назначение = "ТоварыПриобретенныеДляКомитента" Тогда
		
		Возврат ТМЦпринятыеНаОтветственноеХранение;
		
	ИначеЕсли Назначение = "ЗапасыОтгруженные" Тогда
		
		// См. также СчетОтгруженныхЗапасов()
		Возврат ПокупныеТоварыОтгруженные;
		
	ИначеЕсли Назначение = "МатериалыПринятыеВПереработку" Тогда
		
		Возврат МатериалыПринятыеВПереработку;
		
	ИначеЕсли Назначение = "МатериалыПринятыеВПереработкуВПроизводстве" Тогда
		
		Возврат МатериалыПринятыеВПереработкуВПроизводстве;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_Запасы" Тогда
		
		Возврат НДСпоПриобретеннымМПЗ;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_Расходы" Тогда
		
		Возврат НДСпоПриобретеннымУслугам;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_ОсновныеСредства" Тогда
		
		Возврат НДСприПриобретенииОсновныхСредств;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_ОбъектыСтроительства" Тогда
		
		Возврат НДСприСтроительствеОсновныхСредств;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_НематериальныеАктивы" Тогда
		
		Возврат НДСпоПриобретеннымНематериальнымАктивам;
		
	ИначеЕсли Назначение = "НаличныеДеньги" Тогда
		
		Возврат КассаОрганизации;
		
	ИначеЕсли Назначение = "БезналичныеДеньги" Тогда
		
		Возврат РасчетныеСчета;
		
	ИначеЕсли Назначение = "СчетКорпоративныхРасчетов" Тогда
		
		Возврат ПрочиеСпециальныеСчета;
		
	ИначеЕсли Назначение = "Инкассация" Тогда
		
		Возврат ПереводыВПути;
		
	ИначеЕсли Назначение = "ПереводыВПути" Тогда
		
		Возврат ПереводыВПути;
		
	ИначеЕсли Назначение = "НаличныеДеньгиВВалюте" Тогда
		
		Возврат КассаОрганизацииВал;
		
	ИначеЕсли Назначение = "БезналичныеДеньгиВВалюте" Тогда
		
		Возврат ВалютныеСчета;
		
	ИначеЕсли Назначение = "СчетКорпоративныхРасчетовВВалюте" Тогда
		
		Возврат ПрочиеСпециальныеСчетаВал;
		
	ИначеЕсли Назначение = "ИнкассацияВВалюте" Тогда
		
		Возврат ПереводыВПутиВал;
		
	ИначеЕсли Назначение = "ПереводыВПутиВВалюте" Тогда
		
		Возврат ПереводыВПутиВал;
		
	ИначеЕсли Назначение = "РасходыНаПродажу" Тогда
		
		Возврат ИздержкиОбращения;
		
	ИначеЕсли Назначение = "ОбъектыСтроительства" Тогда
		
		Возврат СтроительствоОбъектовОсновныхСредств;
		
	ИначеЕсли Назначение = "ПрочиеДоходы" Тогда
		
		Возврат ПрочиеДоходы;
		
	ИначеЕсли Назначение = "ПрочиеРасходы" Тогда
		
		Возврат ПрочиеРасходы;
		
	ИначеЕсли Назначение = "ОсновныеСредства" Тогда
		
		Возврат ОСвОрганизации;
		
	ИначеЕсли Назначение = "ОсновныеСредстваАмортизация" Тогда
		
		Возврат АмортизацияОС_01;
		
	ИначеЕсли Назначение = "НематериальныеАктивы" Тогда
		
		Возврат НематериальныеАктивыОрганизации;
		
	ИначеЕсли Назначение = "НематериальныеАктивыАмортизация" Тогда
		
		Возврат АмортизацияНематериальныхАктивов;
		
	ИначеЕсли Назначение = "Налоги" Тогда
		
		Возврат ПрочиеНалогиИСборы;
		
	ИначеЕсли Назначение = "Зарплата" Тогда
		
		Возврат РасчетыСПерсоналомПоОплатеТруда;
		
	ИначеЕсли Назначение = "Подотчет" Тогда
		
		Возврат РасчетыСПодотчетнымиЛицами;
		
	ИначеЕсли Назначение = "ПодотчетВВалюте" Тогда
		
		Возврат РасчетыСПодотчетнымиЛицамиВал;
		
	ИначеЕсли Назначение = "УставныйКапитал" Тогда
		
		Возврат УставныйКапитал_ПрочийКапитал;
		
	ИначеЕсли Назначение = "Учредители" Тогда
		
		Возврат РасчетыПоВкладамВУставныйКапитал;
		
	Иначе
		
		Возврат ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

Функция СчетОтгруженныхЗапасов(СчетЗапасов) Экспорт
	
	Если Не ЗначениеЗаполнено(СчетЗапасов) Тогда
		Возврат ОсновнойСчет("ЗапасыОтгруженные");
	КонецЕсли;
	
	// Правила определения счета отгруженных запасов по основному счету запасов
	СоответствиеСчетов = Новый Соответствие;
	СоответствиеСчетов.Вставить(
		ГотоваяПродукция,             // 43
		ГотоваяПродукцияОтгруженная); // 45.02
	СоответствиеСчетов.Вставить(
		Товары,                       // 41
		ПокупныеТоварыОтгруженные);   // 45.01
	СоответствиеСчетов.Вставить(
		ТоварыНаСкладе,               // 004.01
		ТоварыПереданныеНаКомиссию);  // 004.02
		
	// ... для счетов, не перечисленных выше
	Если СчетЗапасов.Забалансовый Тогда
		СчетОтгруженныхЗапасов = СчетЗапасов;
	Иначе
		СчетОтгруженныхЗапасов = ПрочиеТоварыОтгруженные; // 45.03
	КонецЕсли;
	
	// Применение правил
	Для Каждого ЭлементСоответствияСчетов Из СоответствиеСчетов Цикл
		Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетЗапасов, ЭлементСоответствияСчетов.Ключ) Тогда
			СчетОтгруженныхЗапасов = ЭлементСоответствияСчетов.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СчетОтгруженныхЗапасов;
		
КонецФункции

Функция ПолучитьСчетаИсключения() Экспорт
	
	МассивСчетовИсключений = Новый Массив;
	
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);                     // 10.11
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ВекселяВыданные); 											// 60.03
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ВекселяПолученные); 										// 62.03
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуЛичномуИДобровольномуСтрахованию);	// 76.01
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);      		// 76.21
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам); 						// 76.03
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАренде);											// 76.07
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАрендеВал);										// 76.27
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАрендеУЕ);										// 76.37
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕВСчетОтгрузки);				// 62.ОТ
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеУЕ);									// ОТ
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСФакторинговымиКомпаниями);							// 76.08
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовИсключений", МассивСчетовИсключений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетовИсключений)";
	
	МассивСчетовИсключений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат МассивСчетовИсключений;
	
КонецФункции

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Накладная на оприходование товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПростойСписок";
	КомандаПечати.Представление = НСтр("ru = 'Простой список'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'План счетов'");
	КомандаПечати.СписокФорм    = "ФормаСписка, ФормаВыбора";
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Накладная на оприходование товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СПодробнымиОписаниями";
	КомандаПечати.Представление = НСтр("ru = 'С подробными описаниями'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'План счетов (с подробными описаниями)'");
	КомандаПечати.СписокФорм    = "ФормаСписка, ФормаВыбора";
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
КонецПроцедуры

Функция ПечатьПланаСчетов(ВыводитьОписания = Ложь, ПараметрыПриказа = Неопределено) Экспорт
	
	Макет = ПланыСчетов.Хозрасчетный.ПолучитьМакет("Описание");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Если ПараметрыПриказа <> Неопределено Тогда
		Приказ = Макет.ПолучитьОбласть("Приказ");
		Приказ.Параметры.Заполнить(ПараметрыПриказа);
		ТабДокумент.Вывести(Приказ);
	КонецЕсли;
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Если ПараметрыПриказа <> Неопределено Тогда
		Шапка.Параметры.Заполнить(ПараметрыПриказа);
	Иначе
		Шапка.Параметры.ЗаголовокШапки = НСтр("ru='План счетов бухгалтерского учета'");
	КонецЕсли;
	ТабДокумент.Вывести(Шапка);
	
	ТабДокумент.ФиксацияСверху = ТабДокумент.ВысотаТаблицы;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИспользоватьВалютныйУчет", БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПланаСчетов.Ссылка КАК Ссылка,
	|	ТаблицаПланаСчетов.ЭтоГруппа КАК ЭтоГруппа,
	|	ТаблицаПланаСчетов.Ссылка.Код КАК Код,
	|	ТаблицаПланаСчетов.Ссылка.Наименование КАК Наименование,
	|	ТаблицаПланаСчетов.Ссылка.Валютный КАК Валютный,
	|	ТаблицаПланаСчетов.Ссылка.Количественный КАК Количественный,
	|	ТаблицаПланаСчетов.Ссылка.Забалансовый КАК Забалансовый,
	|	ТаблицаПланаСчетов.Ссылка.Вид КАК Вид,
	|	ТаблицаПланаСчетов.Ссылка.ВидыСубконто.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВидСубконто.Наименование КАК Наименование,
	|		ТолькоОбороты КАК ТолькоОбороты
	|	) КАК ВидыСубконто
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПланСчетов1.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(ПланСчетов2.Ссылка) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоГруппа
	|	ИЗ
	|		ПланСчетов.Хозрасчетный КАК ПланСчетов1
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК ПланСчетов2
	|			ПО ПланСчетов1.Ссылка = ПланСчетов2.Родитель
	|	ГДЕ
	|		ПланСчетов1.ПометкаУдаления = ЛОЖЬ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПланСчетов1.Ссылка) КАК ТаблицаПланаСчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (&ИспользоватьВалютныйУчет
	|				ИЛИ НЕ &ИспользоватьВалютныйУчет
	|					И НЕ ТаблицаПланаСчетов.Ссылка.Валютный)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПланаСчетов.Ссылка.Порядок";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Строка = Макет.ПолучитьОбласть("Группа");
		Иначе
			Строка = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
			
		Строка.Параметры.Заполнить(Выборка);
			
		Если Выборка.Вид = ВидСчета.Активный Тогда
			Строка.Параметры.Активность = "А";
		ИначеЕсли Выборка.Вид = ВидСчета.Пассивный Тогда
			Строка.Параметры.Активность = "П";
		Иначе
			Строка.Параметры.Активность = "АП";
		КонецЕсли;
		
		ВидыСубконто = Выборка.ВидыСубконто.Выбрать();
		Пока ВидыСубконто.Следующий() Цикл
			Строка.Параметры["Субконто" + ВидыСубконто.НомерСтроки] = ?(ВидыСубконто.ТолькоОбороты, "(об) ", "") + ВидыСубконто.Наименование;
		КонецЦикла;
			
		ТабДокумент.Вывести(Строка);
		
		Если ВыводитьОписания Тогда
		
			Попытка
				Описание = Макет.ПолучитьОбласть(ПланыСчетов[Выборка.Ссылка.Метаданные().Имя].ПолучитьИмяПредопределенного(Выборка.Ссылка));
				ТабДокумент.Вывести(Описание);
			Исключение
				// Запись в журнал регистрации не требуется
			КонецПопытки;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПростойСписок") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПростойСписок", "План счетов бухгалтерского учета", ПечатьПланаСчетов());                                            
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СПодробнымиОписаниями") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СПодробнымиОписаниями", "План счетов бухгалтерского учета", ПечатьПланаСчетов(Истина));                                            
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

// Обработка добавления счетов 19.10 и 68.42
//
Процедура ОбработатьДобавлениеСчетовУчетаНДСВТаможенномСоюзе() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.НДСУплачиваемыйПриИмпортеИзТаможенногоСоюза.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "1910";
	
	ПараметрыУчета = ОбщегоНазначенияБП.ОпределитьПараметрыУчета();

	Если ПараметрыУчета.ВестиУчетНДСПоСпособам Тогда
		
		СтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
		
		ИзмененыПараметрыСубконто = Ложь;
		ПараметрыУчета.ВестиУчетНДСПоСпособам = Истина;
		Отказ = Ложь;
		
		ОбщегоНазначенияБП.ПрименитьПараметрыУчета(ПараметрыУчета, ИзмененыПараметрыСубконто, Отказ);
		
	КонецЕсли;
		
	Попытка
		СчетОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось установить код быстрого выбора
			|для счета 19.10 ""НДС, уплачиваемый при импорте из Таможенного союза"", 
			|рекомендуется установить самостоятельно.
			|
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "6842";
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось установить код быстрого выбора
			|для счета 68.42 ""НДС при импорте товаров из Таможенного союза"", 
			|рекомендуется установить самостоятельно.
			|
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Обработка переименования счета 68.12
//
Процедура ПереименоватьСчетНалогаУСН() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
	
		СчетСсылка = ПланыСчетов.Хозрасчетный.ЕНприУСН;

		РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетСсылка,
			"Код, Наименование, ЗапретитьИспользоватьВПроводках, Забалансовый");
			
		Если НЕ РеквизитыСчета.ЗапретитьИспользоватьВПроводках
			И НЕ РеквизитыСчета.Забалансовый
			И РеквизитыСчета.Код = "68.12"
			И СокрЛП(РеквизитыСчета.Наименование) = НСтр("ru = 'Единый налог при применении упрощенной системы налогообложения'") Тогда

			// Счет не модифицировался пользователем
			// Можно менять наименование
			
			СчетОбъект = СчетСсылка.ПолучитьОбъект();
			СчетОбъект.Наименование = НСтр("ru = 'Налог при упрощенной системе налогообложения'");
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект, Истина);
		
		КонецЕсли;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось установить новое наименование
			|для счета 68.12 ""Единый налог при применении упрощенной системы налогообложения"".
			|
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

#Область ДетализацияЗатрат

Функция ДоступнаНастройкаУчетаЗатратПоПодразделениям() Экспорт
	
	// Возможность настраивать учет затрат по подразделениям есть только в том случае,
	// если отключено ведение учета по подразделениям на плане счетов.
	
	Возврат Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	
КонецФункции

// Приводит признак УчетПоПодразделениям на счетах учета затрат в соответствие с переданным параметром.
// Если установить признак на одном из счетов не удалось, то вызывает исключение. 
// При этом отменяет транзакцию, начатую методом НачатьТранзакцию().
// Не следует вызывать из транзакций, которые не могут быть отменены.
//
// Также приводит в соответствие признаку 
//
// Параметры:
//  ВестиУчетЗатратПоПодразделениям	 - Булево - значение, к которому следует привести свойства счетов
//
Процедура УстановитьУчетЗатратПоПодразделениям(ВестиУчетЗатратПоПодразделениям, СобытиеЖурналаРегистрации) Экспорт
	
	ШаблоныСообщений = ШаблоныСообщений("УстановкаУчетаЗатратПоПодразделениям", ВестиУчетЗатратПоПодразделениям);
	
	Для Каждого Счет Из БухгалтерскийУчетПереопределяемый.СчетаУчетаЗатратПоПодразделениям() Цикл
		
		СчетОбъект = Счет.ПолучитьОбъект();
		Если СчетОбъект.УчетПоПодразделениям = ВестиУчетЗатратПоПодразделениям Тогда
			Продолжить;
		КонецЕсли;
		
		СчетОбъект.УчетПоПодразделениям = ВестиУчетЗатратПоПодразделениям;
		
		ЗаписатьСчет(СчетОбъект, ШаблоныСообщений, СобытиеЖурналаРегистрации);
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет на каких счетах прямые расходы учитываются с детализацией до продукции.
// Предполагается, что для такого учета используется оборотное субконто без количественного учета.
// 
// Возвращаемое значение:
//  ФиксированныйМассив - счета учета
//
Функция ПрямыеРасходыУчитываютсяПоПродукции() Экспорт
	
	СчетаПрямыхРасходов = БухгалтерскийУчет.СформироватьМассивСубсчетов(УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаПрямыхРасходов", СчетаПрямыхРасходов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В(&СчетаПрямыхРасходов)
	|	И ХозрасчетныйВидыСубконто.ТолькоОбороты
	|	И ХозрасчетныйВидыСубконто.Суммовой
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)";
	
	Возврат Новый ФиксированныйМассив(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
	
КонецФункции

#КонецОбласти

#Область ВключениеОтключениеУчетаПоПодразделениям

// Настраивает план счетов для учета обособленных подразделений:
//  - устанавливает или снимает учет по подразделениям
//  - добавляет или удаляет субконто РегистрацияВНалоговомОргане
//  - при необходимости включает ВестиУчетЗатратПоПодразделениям
//
// Параметры:
//  НовоеЗначение	 - Булево - Если Истина - включается учет по подразделениям, Ложь - отключается.
//
Процедура НастроитьПланСчетовДляОбособленныхПодразделений(НовоеЗначение) Экспорт
	
	СобытиеЖурналаРегистрации = ФункциональностьПрограммыКлиентСервер.СобытиеЖурналаРегистрации();
	УстановитьУчетПоПодразделениям(НовоеЗначение, СобытиеЖурналаРегистрации);
	УстановитьСубконтоРегистрацияВНалоговомОргане(НовоеЗначение, СобытиеЖурналаРегистрации);
	
	Если НовоеЗначение
		И Не Константы.ВестиУчетЗатратПоПодразделениям.Получить() Тогда
		Константы.ВестиУчетЗатратПоПодразделениям.Установить(Истина);
		ПланыСчетов.Хозрасчетный.УстановитьУчетЗатратПоПодразделениям(НовоеЗначение, СобытиеЖурналаРегистрации);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает/снимает признак УчетПоПодразделениям на счетах бухгалтерского учета в соответствие с переданным параметром.
//
// Параметры:
//  ВестиУчетПоПодразделениям	 - Булево - значение, к которому следует привести свойства счетов
//
Процедура УстановитьУчетПоПодразделениям(ВестиУчетПоПодразделениям, СобытиеЖурналаРегистрации)
	
	ШаблоныСообщений = ШаблоныСообщений("УстановкаУчетаПоПодразделениям", ВестиУчетПоПодразделениям);
	
	СчетаСРазличиямиПризнакаУчетПоПодразделениям = СчетаСРазличиямиПризнакаУчетПоПодразделениям();
	Для Каждого Счет Из СчетаСРазличиямиПризнакаУчетПоПодразделениям Цикл
		
		СчетОбъект = Счет.ПолучитьОбъект();
			
		Если СчетОбъект.УчетПоПодразделениям = ВестиУчетПоПодразделениям Тогда
			Продолжить;
		КонецЕсли;
			
		СчетОбъект.УчетПоПодразделениям = ВестиУчетПоПодразделениям;
		ЗаписатьСчет(СчетОбъект, ШаблоныСообщений, СобытиеЖурналаРегистрации);
		
	КонецЦикла;
	
	// Установка признака УчетПоПодразделениям для пользовательских счетов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	НЕ Хозрасчетный.Родитель В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|	И НЕ Хозрасчетный.Предопределенный";
	
	ВыборкаПользовательскихСчетов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПользовательскихСчетов.Следующий() Цикл
		
		Если Не НужноИзменитьПризнакУчетаПоПодразделениям(ВыборкаПользовательскихСчетов.Счет, СчетаСРазличиямиПризнакаУчетПоПодразделениям) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетОбъект = ВыборкаПользовательскихСчетов.Счет.ПолучитьОбъект();
		
		Если СчетОбъект.УчетПоПодразделениям = ВестиУчетПоПодразделениям Тогда
			Продолжить;
		КонецЕсли;
		
		СчетОбъект.УчетПоПодразделениям = ВестиУчетПоПодразделениям;
		ЗаписатьСчет(СчетОбъект, ШаблоныСообщений, СобытиеЖурналаРегистрации);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает/снимает признак УчетПоПодразделениям на счетах бухгалтерского учета в соответствие с переданным параметром.
//
// Параметры:
//  ВестиУчетПоПодразделениям	 - Булево - значение, к которому следует привести свойства счетов
//
Процедура УстановитьСубконтоРегистрацияВНалоговомОргане(ВестиУчетПоСубконто, СобытиеЖурналаРегистрации)
	
	ШаблоныСообщений = ШаблоныСообщений("УстановкаСубконтоРегистрацияВНалоговомОргане", ВестиУчетПоСубконто);
	ТаблицаСчетов = СчетаДляУстановкиСубконтоРегистрацияВНалоговомОргане();
	
	Для Каждого СтрокаТаблицы Из ТаблицаСчетов Цикл
		
		СчетОбъект = СтрокаТаблицы.Счет.ПолучитьОбъект();
		Если ВестиУчетПоСубконто Тогда
			
			// Если у счета уже есть субконто "РегистрацияВНалоговом органе, то пропускаем его.
			НайденныйСубконто = СчетОбъект.ВидыСубконто.Найти(СтрокаТаблицы.ВидСубконто, "ВидСубконто");
			Если НайденныйСубконто <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСубконто = СчетОбъект.ВидыСубконто.Вставить(СтрокаТаблицы.НомерСубконто - 1);
			ЗаполнитьЗначенияСвойств(СтрокаСубконто, СтрокаТаблицы);
			
		Иначе
			
			// Если субконто не найден или добавлен руками, пропускаем
			НайденныйСубконто = СчетОбъект.ВидыСубконто.Найти(СтрокаТаблицы.ВидСубконто, "ВидСубконто");
			Если НайденныйСубконто = Неопределено ИЛИ Не НайденныйСубконто.Предопределенное Тогда
				Продолжить;
			КонецЕсли;
			СчетОбъект.ВидыСубконто.Удалить(НайденныйСубконто);
			
		КонецЕсли;
		ЗаписатьСчет(СчетОбъект, ШаблоныСообщений, СобытиеЖурналаРегистрации);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция - возвращает список счетов, где признак УчетПоПодразделениям в версии ПРОФ отличается от КОРП
// 
// Возвращаемое значение:
//  Массив - массив счетов бухгалтерского учета
//
Функция СчетаСРазличиямиПризнакаУчетПоПодразделениям() Экспорт
	
	Макет = ПолучитьМакет("УчетПоПодразделениям");
	ДанныеСчетов = Макет.Область("ДанныеСчетов");
	
	СписокСчетов = Новый Массив;
	Для Н = ДанныеСчетов.Верх По ДанныеСчетов.Низ Цикл
		
		НомерСтроки = "R" + Формат(Н, "ЧН=0; ЧГ=0");
		УчетПоПодразделениямКОРП = СокрЛП(ВРег(Макет.Область(НомерСтроки + "|УчетПоПодразделениямКОРП").Текст)) = "ДА";
		УчетПоПодразделениямПРОФ = СокрЛП(Врег(Макет.Область(НомерСтроки + "|УчетПоПодразделениямПРОФ").Текст)) = "ДА";
		
		Если УчетПоПодразделениямКОРП И Не УчетПоПодразделениямПРОФ Тогда
			ИмяСчета = СокрЛП(Макет.Область(НомерСтроки + "|ИмяСчета").Текст);
			СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный[ИмяСчета]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокСчетов;
	
КонецФункции

// Функция - возвращает массив счетов для программного заполнения подразделения
// по данным местонахождения ОС
// 
// Возвращаемое значение:
//  Массив - массив счетов бухгалтерского учета
//
Функция СчетаОСДляЗаполненияПодразделенияПоДаннымМестонахождения() Экспорт
	
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОСвОрганизации);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОСБезГосРегистрации);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеОС);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_01);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_03);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости);
	
	Возврат СписокСчетов;
	
КонецФункции

// Функция - возвращает список счетов для установки субконто РегистрацияВНалоговомОргане
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица счетов с настройками субконто
//
Функция СчетаДляУстановкиСубконтоРегистрацияВНалоговомОргане() Экспорт
	
	Макет = ПолучитьМакет("УчетПоСубконтоРегистрацияВНалоговомОргане");
	ДанныеСчетов = Макет.Область("ДанныеСчетов");
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("Счет");
	ТаблицаСчетов.Колонки.Добавить("ВидСубконто");
	ТаблицаСчетов.Колонки.Добавить("НомерСубконто");
	ТаблицаСчетов.Колонки.Добавить("Предопределенное");
	ТаблицаСчетов.Колонки.Добавить("ТолькоОбороты");
	ТаблицаСчетов.Колонки.Добавить("Суммовой");
	ТаблицаСчетов.Колонки.Добавить("Валютный");
	ТаблицаСчетов.Колонки.Добавить("Количественный");
	
	Для Н = ДанныеСчетов.Верх По ДанныеСчетов.Низ Цикл
		
		НомерСтроки = "R" + Формат(Н, "ЧН=0; ЧГ=0");
		ИмяСчета = СокрЛП(Макет.Область(НомерСтроки + "|ИмяСчета").Текст);
		
		СтрокаТаблицы = ТаблицаСчетов.Добавить();
		СтрокаТаблицы.Счет             = ПланыСчетов.Хозрасчетный[ИмяСчета];
		СтрокаТаблицы.ВидСубконто      = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["РегистрацияВНалоговомОргане"];
		СтрокаТаблицы.НомерСубконто    = Число(Макет.Область(НомерСтроки + "|НомерСубконто").Текст);
		СтрокаТаблицы.Предопределенное = Истина;
		СтрокаТаблицы.ТолькоОбороты    = СокрЛП(ВРег(Макет.Область(НомерСтроки + "|ТолькоОбороты").Текст)) = "ДА";
		СтрокаТаблицы.Суммовой         = СокрЛП(ВРег(Макет.Область(НомерСтроки + "|Суммовой").Текст)) = "ДА";
		СтрокаТаблицы.Валютный         = СокрЛП(ВРег(Макет.Область(НомерСтроки + "|Валютный").Текст)) = "ДА";
		СтрокаТаблицы.Количественный   = СокрЛП(ВРег(Макет.Область(НомерСтроки + "|Количественный").Текст)) = "ДА";
		
	КонецЦикла;
	
	Возврат ТаблицаСчетов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Не БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет() Тогда
		Параметры.Отбор.Вставить("Валютный", Ложь);
	КонецЕсли;
	
	// При вводе кода счета с цифровой клавиатуры заменяем запятую на точку
	Если ТипЗнч(Параметры.СтрокаПоиска) = Тип("Строка") Тогда
		Параметры.СтрокаПоиска = СтрЗаменить(Параметры.СтрокаПоиска, ",", ".");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// При изменении плана счетов может потребоваться обновление данных в соответствующем регистре бухгалтерии.
// Платформа это делает автоматически вне режима ОбменДанными.Загрузка.
// Поэтому в обработчиках обновления не следует использовать ОбновлениеИнформационнойБазы.ЗаписатьОбъект()
// в режиме с пропуском бизнес-логики - следует использовать программный интерфейс, приведенный ниже.

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//  Объект - ПланСчетовОбъект.Хозрасчетный - записываемый объект.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьОбъект(Объект, РегистрироватьНаУзлахПлановОбмена = Неопределено, ВключитьБизнесЛогику = Ложь) Экспорт
	
	ПропуститьБизнесЛогикуПриЗаписи(Объект);
	Попытка
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект, РегистрироватьНаУзлахПлановОбмена, Истина);
	Исключение
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ПланыСчетов.Хозрасчетный,
			Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает переданному объекту признак пропуска бизнес-логики в ходе записи объекта.
//
// Параметры:
//  Объект - ПланСчетовОбъект.Хозрасчетный - записываемый объект.
//
Процедура ПропуститьБизнесЛогикуПриЗаписи(Знач Объект) Экспорт
	
	// Если свойство отсутствует, то бизнес-логика проверяется.
	Объект.ДополнительныеСвойства.Вставить("ПропуститьБизнесЛогикуПриЗаписи", Истина); 
		
КонецПроцедуры

// Определяет, следует ли пропустить выполнение бизнес-логики при записи объекта.
// Пропуск бизнес-логики может потребоваться в ходе загрузки данных
// или обновления данных в ходе обновления версии программы.
//
// Параметры:
//  Объект - ПланСчетовОбъект.Хозрасчетный - объект для которого
//   проверяется необходимость пропуска бизнес логики при записи.
//
// Возвращаемое значение:
//  Булево - Истина, если бизнес-логику выполнять не следует.
//
Функция ПропущенаБизнесЛогикаПриЗаписи(Знач Объект) Экспорт
	
	// в загрузке данных
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат Истина;
	КонецЕсли;
	
	// в обработчике обновления
	Возврат Объект.ДополнительныеСвойства.Свойство("ПропуститьБизнесЛогикуПриЗаписи")
		И Объект.ДополнительныеСвойства.ПропуститьБизнесЛогикуПриЗаписи;
	
КонецФункции

#Область ОбработчикиОбновления

Процедура ОбновитьПараметрыСчета96_09() Экспорт
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходовПрочие.ПолучитьОбъект();
	СчетОбъект.Родитель = ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов;
	СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
	
КонецПроцедуры

Процедура ОбработатьДобавлениеСчетовУчетаЛизинг() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	МассивНовыхСчетов = Новый Массив;
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендованноеИмущество);             // 01.03
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияАрендованногоИмущества); // 02.03
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАренде);                   // 76.07
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательства);             // 76.07.1
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЛизинговыеПлатежи);                 // 76.07.2
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствам);       // 76.07.9
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАрендеВал);                // 76.27
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал);          // 76.27.1
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЛизинговыеПлатежиВал);              // 76.27.2
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАрендеУЕ);                 // 76.37
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ);           // 76.37.1
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЛизинговыеПлатежиУЕ);               // 76.37.2
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствамУЕ);     // 76.37.9
	
	МассивСчетовГрупп = Новый Массив;
	МассивСчетовГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАренде);    // 76.07
	МассивСчетовГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАрендеВал); // 76.27
	МассивСчетовГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАрендеУЕ);  // 76.37

	МассивСчетовССубконто3 = Новый Массив;
	МассивСчетовССубконто3.Добавить(ПланыСчетов.Хозрасчетный.ЛизинговыеПлатежи);    // 76.07.2
	МассивСчетовССубконто3.Добавить(ПланыСчетов.Хозрасчетный.ЛизинговыеПлатежиВал); // 76.27.2
	МассивСчетовССубконто3.Добавить(ПланыСчетов.Хозрасчетный.ЛизинговыеПлатежиУЕ);  // 76.37.2
	
	Для Каждого Счет Из МассивНовыхСчетов Цикл
	
		Попытка
			СчетОбъект = Счет.ПолучитьОбъект();
			СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
			
			Если МассивСчетовГрупп.Найти(Счет) <> Неопределено Тогда
				СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
			КонецЕсли;
			
			Если МассивСчетовССубконто3.Найти(Счет) <> Неопределено Тогда
			
				Субконто      = СчетОбъект.ВидыСубконто.Найти(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто");
				НетДокументов = (Субконто = Неопределено);
				ВсегоСубконто = СчетОбъект.ВидыСубконто.Количество();
				Если НетДокументов И ВсегоСубконто < 3 Тогда
					
					НовыйВид = СчетОбъект.ВидыСубконто.Добавить();
					
					НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;
					НовыйВид.Суммовой       = Истина;
					НовыйВид.Валютный       = Истина;
					НовыйВид.Количественный = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СчетОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьУдаленныйСчет01_К() Экспорт
	
	УдаленныйСчет = ПланыСчетов.Хозрасчетный.УдалитьКорректировкаСтоимостиАрендованногоИмущества;
	СчетОбъект = УдаленныйСчет.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
	
	Попытка
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не удалось установить код быстрого выбора по счету
                               |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ПланыСчетов.Хозрасчетный,
			СчетОбъект.Ссылка, 
			ТекстСообщения);
	КонецПопытки;
	
	НовыйСчет = ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", УдаленныйСчет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	(Хозрасчетный.СчетДт = &Счет
	|			ИЛИ Хозрасчетный.СчетКт = &Счет)";
	
	Результат = Запрос.Выполнить();
	Рег = РегистрыБухгалтерии.Хозрасчетный;
	
	Проводки = Рег.СоздатьНаборЗаписей();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекДок = ВыборкаДетальныеЗаписи.Регистратор;
		Если ЗначениеЗаполнено(ТекДок) Тогда
	
			Проводки.Отбор.Регистратор.Значение = ТекДок;
			Проводки.Прочитать();
	
			Для Каждого Проводка ИЗ Проводки Цикл
				Если Проводка.СчетДт = УдаленныйСчет Тогда
					Проводка.СчетДт = НовыйСчет;
				КонецЕсли;
				Если Проводка.СчетКт = УдаленныйСчет Тогда
					Проводка.СчетКт = НовыйСчет;
				КонецЕсли;
			КонецЦикла;
	
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Проводки);
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось обновить проводки по документу
                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				ТекДок.Метаданные(),
				ТекДок, 
				ТекстСообщения);
		КонецПопытки;
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСчетПФР_ОПС_ИП() Экспорт
	
	СчетУчетаУдаленный = ПланыСчетов.Хозрасчетный.УдалитьПФР_ОПС_ИП;
	СчетУчетаНовый     = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
	
	СчетОбъектУдаленный = СчетУчетаУдаленный.ПолучитьОбъект();
	СчетОбъектУдаленный.КодБыстрогоВыбора = "";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СчетОбъектУдаленный);
	
	НомерВидыПлатежейВГосБюджет_Удаленный = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		СчетУчетаУдаленный, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	НомерВидыПлатежейВГосБюджет_Новый = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		СчетУчетаНовый, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	Если НомерВидыПлатежейВГосБюджет_Удаленный = 0 Или НомерВидыПлатежейВГосБюджет_Новый = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерВидыСтраховыхВзносовИП = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		СчетУчетаУдаленный, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УдалитьВидыСтраховыхВзносовИП);
	
	Документы.СписаниеСРасчетногоСчета.ЗаменитьСчетПФР_ОПС_ИП();
	Документы.РасходныйКассовыйОрдер.ЗаменитьСчетПФР_ОПС_ИП();
	Документы.ВводНачальныхОстатков.ЗаменитьСчетПФР_ОПС_ИП();
	
	РегистрыНакопления.ПрочиеРасчеты.ЗаменитьСчетПФР_ОПС_ИП();
	РегистрыНакопления.ИППрочиеРасходы.ЗаменитьСчетПФР_ОПС_ИП();
	РегистрыНакопления.РасходыПриУСН.ЗаменитьСчетПФР_ОПС_ИП();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетУчетаУдаленный", СчетУчетаУдаленный);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетДт = &СчетУчетаУдаленный
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетКт = &СчетУчетаУдаленный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.СчетДт = СчетУчетаУдаленный Тогда
				ЗаменитьСчетПФР_ОПС_ИПвПроводке(Запись, "СчетДт", "СубконтоДт");
			КонецЕсли;
			Если Запись.СчетКт = СчетУчетаУдаленный Тогда
				ЗаменитьСчетПФР_ОПС_ИПвПроводке(Запись, "СчетКт", "СубконтоКт");
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСчетПФР_ОПС_ИПвДокументе(Объект, ИмяСчетаУчета, ИмяСубконто) Экспорт
	
	НомерВидыПлатежейВГосБюджет_Удаленный = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		Объект[ИмяСчетаУчета], ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	НомерВидыСтраховыхВзносовИП_Удаленный = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		Объект[ИмяСчетаУчета], ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УдалитьВидыСтраховыхВзносовИП);
	
	Если НомерВидыПлатежейВГосБюджет_Удаленный <> 0 Тогда
		ВидПлатежаВГосБюджет = Объект[ИмяСубконто + НомерВидыПлатежейВГосБюджет_Удаленный];
	КонецЕсли;
	
	Если НомерВидыСтраховыхВзносовИП_Удаленный <> 0 Тогда
		
		Если ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			ВидСтраховогоВзносаИП = Объект[ИмяСубконто + НомерВидыСтраховыхВзносовИП_Удаленный];
			Если ВидСтраховогоВзносаИП = Перечисления.УдалитьВидыСтраховыхВзносовИП.СтраховыеВзносыСДоходов Тогда
				ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
			КонецЕсли;
		КонецЕсли;
		
		Объект[ИмяСубконто + НомерВидыСтраховыхВзносовИП_Удаленный] = Неопределено;
		
	КонецЕсли;
	
	СчетУчетаНовый = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
	
	Объект[ИмяСчетаУчета] = СчетУчетаНовый;
	
	НомерВидыПлатежейВГосБюджет_Новый = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		СчетУчетаНовый, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Если НомерВидыПлатежейВГосБюджет_Новый <> 0 Тогда
		Объект[ИмяСубконто + НомерВидыПлатежейВГосБюджет_Новый] = ВидПлатежаВГосБюджет;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьСчетПФР_ОПС_ИПвПроводке(Проводка, ИмяСчетаУчета, ИмяСубконто)
	
	КоллекцияСубконто = Проводка[ИмяСубконто];
	
	ВидПлатежаВГосБюджет = КоллекцияСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет];
	
	Если ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
		ВидСтраховогоВзносаИП = КоллекцияСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УдалитьВидыСтраховыхВзносовИП];
		Если ВидСтраховогоВзносаИП = Перечисления.УдалитьВидыСтраховыхВзносовИП.СтраховыеВзносыСДоходов Тогда
			ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
		КонецЕсли;
	КонецЕсли;
	
	Проводка[ИмяСчетаУчета] = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
	
	КоллекцияСубконто.Очистить();
	КоллекцияСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет, ВидПлатежаВГосБюджет);
	
КонецПроцедуры

Процедура ОбновитьПараметрыСчета01_К() Экспорт
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
	
	Попытка
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), 
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьПараметрыСчетов08_4() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	МассивНовыхСчетов = Новый Массив;
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);    // 08.04
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств); // 08.04.1
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОсновныхСредств);            // 08.04.2
	
	МассивСчетовГрупп = Новый Массив;
	МассивСчетовГрупп.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);    // 08.04
	
	Для Каждого Счет Из МассивНовыхСчетов Цикл
	
		СчетОбъект = Счет.ПолучитьОбъект();
		СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
		
		Если МассивСчетовГрупп.Найти(Счет) <> Неопределено Тогда
			СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
		КонецЕсли;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), 
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПараметрыСчетов08_1() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	МассивНовыхСчетов = Новый Массив;
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков);               // 08.01
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастковСДопРасходами);  // 08.01.1
	МассивНовыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастковБезДопРасходов); // 08.01.2
	
	МассивСчетовГрупп = Новый Массив;
	МассивСчетовГрупп.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков);               // 08.01
	
	Для Каждого Счет Из МассивНовыхСчетов Цикл
	
		СчетОбъект = Счет.ПолучитьОбъект();
		СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
		
		Если МассивСчетовГрупп.Найти(Счет) <> Неопределено Тогда
			СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
		КонецЕсли;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), 
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьСчетаОбеспеченияОбязательств() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	ИзмененныеСчета = Новый Массив;
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствИПлатежейПолученные); // 008
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствПолученные);          // 008.01
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствПолученныеВал);       // 008.21
	
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствИПлатежейВыданные); // 009
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствВыданные);          // 009.01
	ИзмененныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствВыданныеВал);       // 009.21
	
	СчетаГруппы = Новый Массив;
	СчетаГруппы.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствИПлатежейПолученные); // 008
	СчетаГруппы.Добавить(ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствИПлатежейВыданные);   // 009
	
	ВестиУчетПоПодразделениям = ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям");
	
	Для Каждого Счет Из ИзмененныеСчета Цикл
	
		СчетОбъект = Счет.ПолучитьОбъект();
		СчетОбъект.НастроитьПоКоду();
		
		Если СчетаГруппы.Найти(Счет) <> Неопределено Тогда
			СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
		КонецЕсли;
		
		СчетОбъект.УчетПоПодразделениям = ВестиУчетПоПодразделениям;
		
		ЗаписатьОбъект(СчетОбъект);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСубконтоПродукция() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СчетаДляДобавленияСубконто
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	НЕ Хозрасчетный.Количественный
	|	И НЕ Хозрасчетный.Валютный
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство_))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчета.Ссылка КАК СчетУчета
	|ПОМЕСТИТЬ НевозможноДобавитьСубконто
	|ИЗ
	|	СчетаДляДобавленияСубконто КАК СчетаУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
	|		ПО СчетаУчета.Ссылка = ВидыСубконто.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаУчета.Ссылка
	|
	|ИМЕЮЩИЕ
	|	(МАКСИМУМ(ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)) = ИСТИНА
	|		ИЛИ КОЛИЧЕСТВО(ВидыСубконто.ВидСубконто) = 3)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаДляДобавленияСубконто.Ссылка КАК СчетУчета
	|ИЗ
	|	СчетаДляДобавленияСубконто КАК СчетаДляДобавленияСубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ НевозможноДобавитьСубконто КАК НевозможноДобавитьСубконто
	|		ПО СчетаДляДобавленияСубконто.Ссылка = НевозможноДобавитьСубконто.СчетУчета
	|ГДЕ
	|	НевозможноДобавитьСубконто.СчетУчета ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.СчетУчета.ПолучитьОбъект();
		ОписаниеВидаСубконто = Объект.ВидыСубконто.Добавить();
		ОписаниеВидаСубконто.ВидСубконто   = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция;
		ОписаниеВидаСубконто.Суммовой      = Истина;
		ОписаниеВидаСубконто.ТолькоОбороты = Истина;
		
		ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПараметрыСчетовРасчетовСУчредителями() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьРасчетыСУчредителями);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьРасчетыПоВкладамВУставныйКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьРасчетыПоВыплатеДоходов);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьУставныйКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьУставныйКапитал_ОбыкновенныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьУставныйКапитал_ПривилегированныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьУставныйКапитал_ПрочийКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьСобственныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьСобственныеАкции_ПривилегированныеАкции);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьСобственныеАкции_ПрочийКапитал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.УдалитьСобственныеАкции_ОбыкновенныеАкции);
	
	Для Каждого Счет Из МассивСчетов Цикл
	
		СчетОбъект = Счет.ПолучитьОбъект();
		СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), 
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НужноИзменитьПризнакУчетаПоПодразделениям(Счет, СчетаСРазличиямиПризнакаУчетПоПодразделениям)
	
	Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "Родитель");
	Если ЗначениеЗаполнено(Родитель) Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Предопределенный") Тогда
			Возврат СчетаСРазличиямиПризнакаУчетПоПодразделениям.Найти(Родитель) <> Неопределено;
		Иначе
			Возврат НужноИзменитьПризнакУчетаПоПодразделениям(Родитель, СчетаСРазличиямиПризнакаУчетПоПодразделениям);
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьСчет(СчетОбъект, ШаблоныСообщений, СобытиеЖурналаРегистрации)
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстСообщенияОбОшибке = СтрШаблон(
			ШаблоныСообщений.СообщениеОбОшибкеДетально,
			СчетОбъект.Код,
			ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ПланыСчетов.Хозрасчетный,
			СчетОбъект.Ссылка,
			ТекстСообщенияОбОшибке);
			
		// Для пользователя выведем краткое сообщение
		ВызватьИсключение СтрШаблон(ШаблоныСообщений.СообщениеОбОшибкеКратко, СчетОбъект.Код);
			
	КонецПопытки;
	
	// Запишем в журнал регистрации подробную информацию об изменениях
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации,
		УровеньЖурналаРегистрации.Информация, 
		Метаданные.ПланыСчетов.Хозрасчетный,
		СчетОбъект.Ссылка, // Данные
		СтрШаблон(ШаблоныСообщений.СообщениеОбУспехе, СчетОбъект.Код),
		РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	
КонецПроцедуры

Функция ШаблоныСообщений(Операция, ЗначениеУстанавливаемогоПараметра)
	
	Результат = Новый Структура("СообщениеОбОшибкеКратко, СообщениеОбОшибкеДетально, СообщениеОбУспехе");
	Если ЗначениеУстанавливаемогоПараметра Тогда
		
		Если Операция = "УстановкаСубконтоРегистрацияВНалоговомОргане" Тогда
			
			// на языке пользователя
			Результат.СообщениеОбОшибкеКратко = НСтр("ru = 'Ошибка при добавлении субконто ""Регистрация в налоговом органе"" на счете %1:
				|Подробности см. в Журнале регистрации.'"); 
			
			// на языке администратора - для записи в журнал регистрации
			Результат.СообщениеОбОшибкеДетально = НСтр("ru = 'Ошибка при добавлении субконто ""Регистрация в налоговом органе"" на счете %1:
				|%2'"); 
			
			Результат.СообщениеОбУспехе = НСтр("ru = 'На счете %1 добавлено субконто ""Регистрация в налоговом органе""'");
			
		Иначе
			
			// на языке пользователя
			Результат.СообщениеОбОшибкеКратко = НСтр("ru = 'Ошибка при включении учета по подразделениям на счете %1
				|Подробности см. в Журнале регистрации.'"); 
			
			// на языке администратора - для записи в журнал регистрации
			Результат.СообщениеОбОшибкеДетально = НСтр("ru = 'Ошибка при включении учета по подразделениям на счете %1:
				|%2'"); 
			
			Результат.СообщениеОбУспехе = НСтр("ru = 'На счете %1 включен учет по подразделениям'");
		
		КонецЕсли;
		
	Иначе
		
		Если Операция = "УстановкаСубконтоРегистрацияВНалоговомОргане" Тогда
			
			// на языке пользователя
			Результат.СообщениеОбОшибкеКратко = НСтр("ru = 'Ошибка при удалении субконто ""Регистрация в налоговом органе"" на счете %1:
				|Подробности см. в Журнале регистрации.'"); 
			
			// на языке администратора - для записи в журнал регистрации
			Результат.СообщениеОбОшибкеДетально = НСтр("ru = 'Ошибка при удалении субконто ""Регистрация в налоговом органе"" на счете %1:
				|%2'"); 
			
			Результат.СообщениеОбУспехе = НСтр("ru = 'На счете %1 удалено субконто ""Регистрация в налоговом органе""'");
			
		Иначе
			
			Результат.СообщениеОбОшибкеКратко = НСтр("ru = 'Ошибка при отключении учета по подразделениям на счете %1
				|Подробности см. в Журнале регистрации.'");
			
			Результат.СообщениеОбОшибкеДетально = НСтр("ru = 'Ошибка при отключении учета по подразделениям на счете %1:
				|%2'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			Результат.СообщениеОбУспехе = НСтр("ru = 'На счете %1 отключен учет по подразделениям'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
