
#Область ПрочиеПроцедурыИФункции

&НаСервере
// Предназначена для помещения настроек во временное хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("НоваяСтрока",                                 НоваяСтрока);
	СтруктураПараметров.Вставить("ИдентификаторТекущейСтроки",                  ИдентификаторТекущейСтроки);
	СтруктураПараметров.Вставить("ГруппаУслуг",                                 ГруппаУслуг);
	СтруктураПараметров.Вставить("ВидЖильцовКоторымПредоставляютсяЛьготы",      ВидЖильцовКоторымПредоставляютсяЛьготы);
	СтруктураПараметров.Вставить("ТипЖильцовДляДеленияОбъемаНачисленнойУслуги", ТипЖильцовДляДеленияОбъемаНачисленнойУслуги);
	СтруктураПараметров.Вставить("ТипЖильцовДляДеленияОбъемаОграниченияЛьготы", ТипЖильцовДляДеленияОбъемаОграниченияЛьготы);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
// Процедура сохраняет изменения и закрывает форму.
Процедура СохранитьИзмененияИЗакрытьФорму()
	
	Если НЕ ПроверитьНаличиеНастроекДляТекущейГруппыУслуг() Тогда
		
		Модифицированность = Ложь;
		
		АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
		Закрыть(АдресНастроекВХранилище);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет проверку наличия настроек по текущей группе услуг.
Функция ПроверитьНаличиеНастроекДляТекущейГруппыУслуг()
	
	НастройкиТекущейГруппыУслугУжеВведены = Ложь;
	
	// При окончании редактирования настроек необходимо проверить,
	// не введены ли настройки для текущей группы услуг.
	// Если уже введены, то запрещаем сохранение текущей строки.
	
	// Поиск строк с текущей группой услуг.
	НайденныеСтроки = ВладелецФормы.ТаблицаНастроекПредоставленияИРасчетаЛьгот.НайтиСтроки(Новый Структура("ГруппаУслуг", ГруппаУслуг));
	Если НоваяСтрока И НайденныеСтроки.Количество() > 0 Тогда
		НастройкиТекущейГруппыУслугУжеВведены = Истина;
	Иначе
		Для Каждого ТекНайденнаяСтрока Из НайденныеСтроки Цикл
			Если Не ИдентификаторТекущейСтроки = ТекНайденнаяСтрока.ПолучитьИдентификатор() Тогда
				НастройкиТекущейГруппыУслугУжеВведены = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Если строки найдены, то уходим в отказ.
	Если НастройкиТекущейГруппыУслугУжеВведены Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Настройки для текущей группы услуг уже введены! Укажите другую группу услуг.");
		
	КонецЕсли;
	
	Возврат НастройкиТекущейГруппыУслугУжеВведены;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Во входной структуре должны содержаться следующие параметры:
	// - Идентификатор строки из таблицы настроек льгот по группам услуг.
	// - Группа услуг.
	// - Вид жильцов, которым предоставляются льготы.
	// - Тип жильцов для деления объема начисленной услуги.
	// - Тип жильцов для деления объема ограничения льготы.
	
	Если Параметры.Свойство("АдресНастроекВХранилищеДоРедактирования")
	   И НЕ Параметры.АдресНастроекВХранилищеДоРедактирования = Неопределено Тогда
		
		СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилищеДоРедактирования);
		
		СтруктураПараметров.Свойство("НоваяСтрока",                                 НоваяСтрока);
		СтруктураПараметров.Свойство("ИдентификаторТекущейСтроки",                  ИдентификаторТекущейСтроки);
		СтруктураПараметров.Свойство("ГруппаУслуг",                                 ГруппаУслуг);
		СтруктураПараметров.Свойство("ВидЖильцовКоторымПредоставляютсяЛьготы",      ВидЖильцовКоторымПредоставляютсяЛьготы);
		СтруктураПараметров.Свойство("ТипЖильцовДляДеленияОбъемаНачисленнойУслуги", ТипЖильцовДляДеленияОбъемаНачисленнойУслуги);
		СтруктураПараметров.Свойство("ТипЖильцовДляДеленияОбъемаОграниченияЛьготы", ТипЖильцовДляДеленияОбъемаОграниченияЛьготы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Если настройки были изменены, то предложим пользователю сохранить их.
	Если Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаПередЗакрытиемФормы", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик ответа перед закрытием формы.
Процедура ОбработкаОтветаПередЗакрытиемФормы(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		// Сохраняем настройки и закрываем форму.
		СохранитьИзмененияИЗакрытьФорму();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		// Закрываем форму без сохранения настроек.
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик события "Нажатие" кнопки "Сохранить и закрыть".
Процедура СохранитьИЗакрыть(Команда)
	
	СохранитьИзмененияИЗакрытьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "ГруппаУслуг".
Процедура ГруппаУслугНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Отбор", Новый Структура("Родитель", ПредопределенноеЗначение("Справочник.УПЖКХ_ГруппыУслуг.НастройкиРасчётаЛьгот")));
	
	ОткрытьФорму("Справочник.УПЖКХ_ГруппыУслуг.ФормаВыбора", ПараметрыОтбора, Элемент);
	
КонецПроцедуры

#КонецОбласти