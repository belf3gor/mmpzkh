#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураБыстрогоОтбора = Неопределено;
	Если Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора) Тогда
		
		ИнтеграцияВЕТИСКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "ОрганизацииВЕТИС", ОрганизацииВЕТИС, СтруктураБыстрогоОтбора, Ложь);
		
		ОрганизацияВЕТИС = СтруктураБыстрогоОтбора.ОрганизацияВЕТИС;
		ОрганизацииВЕТИСПредставление = СтруктураБыстрогоОтбора.ОрганизацииВЕТИСПредставление;
		Если ОрганизацииВЕТИС.ПолучитьЭлементы().Количество() > 0
			И ПустаяСтрока(ОрганизацииВЕТИСПредставление) Тогда
			ОрганизацииВЕТИСПредставление = ИнтеграцияВЕТИСКлиентСервер.ПредставлениеВыбранныхНастроек(ОрганизацииВЕТИС);
		КонецЕсли;
		ИнтеграцияВЕТИС.ОтборПоОрганизацииПриСозданииНаСервере(ЭтотОбъект, "Отбор");
		
		ИнтеграцияВЕТИСКлиентСервер.ОрганизацияВЕТИСОтборПриИзменении(ЭтотОбъект, "");
		
	КонецЕсли;
	
	// Исключение поля "Состояние обмена" из пользовательского оформления.
	ПолеСостояниеОбмена = Новый Массив();
	ПолеСостояниеОбмена.Добавить("СостояниеОбмена");
	
	Список.УстановитьОграниченияИспользованияВГруппировке(ПолеСостояниеОбмена);
	Список.УстановитьОграниченияИспользованияВОтборе(ПолеСостояниеОбмена);
	Список.УстановитьОграниченияИспользованияВПорядке(ПолеСостояниеОбмена);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область ОтборПоОрганизацииВЕТИС

&НаКлиенте
Процедура ОтборОрганизацииВЕТИСПриИзменении(Элемент)
	
	ИнтеграцияВЕТИСКлиент.ОбработатьВыборОрганизацийВЕТИС(
		ЭтотОбъект, ОрганизацииВЕТИС, Истина, "Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы(),"");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацииВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияВЕТИСКлиент.ОткрытьФормуВыбораОрганизацийВЕТИС(
		ЭтотОбъект, "Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы(),,"");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацииВЕТИСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияВЕТИСКлиент.ОбработатьВыборОрганизацийВЕТИС(
		ЭтотОбъект, Неопределено, Истина, "Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы(),"");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацииВЕТИСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияВЕТИСКлиент.ОбработатьВыборОрганизацийВЕТИС(
		ЭтотОбъект, ВыбранноеЗначение, Истина, "Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы(),"");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияВЕТИСПриИзменении(Элемент)
	
	ИнтеграцияВЕТИСКлиент.ОбработатьВыборОрганизацийВЕТИС(
		ЭтотОбъект, ОрганизацииВЕТИС, Истина, "Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы(),"");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияВЕТИСКлиент.ОткрытьФормуВыбораОрганизацийВЕТИС(
		ЭтотОбъект, "Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы(),,"");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияВЕТИСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияВЕТИСКлиент.ОбработатьВыборОрганизацийВЕТИС(
		ЭтотОбъект, Неопределено, Истина, "Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы(),"");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияВЕТИСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияВЕТИСКлиент.ОбработатьВыборОрганизацийВЕТИС(
		ЭтотОбъект, ВыбранноеЗначение, Истина, "Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы(),"");
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	СписокТиповКлассификаторов = Новый Массив();
	
	Для Каждого ЗначениеТипа Из Перечисления.ТипыВЕТИС Цикл
		СписокТиповКлассификаторов.Добавить(ЗначениеТипа);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ТипВЕТИС,
	|	Таблица.ХозяйствующийСубъект,
	|	Таблица.Предприятие,
	|	Таблица.ДатаСинхронизации,
	|	Таблица.Смещение,
	|	Таблица.ДатаОбмена
	|ИЗ
	|	РегистрСведений.СинхронизацияКлассификаторовВЕТИС КАК Таблица
	|ГДЕ
	|	(Таблица.ТипВЕТИС, Таблица.ХозяйствующийСубъект, Таблица.Предприятие) В (&Ключи)
	|";
	
	СтрокиСписка = Строки.ПолучитьКлючи();
	
	ДанныеСписка = Новый ТаблицаЗначений();
	ДанныеСписка.Колонки.Добавить("ТипВЕТИС",             Новый ОписаниеТипов("ПеречислениеСсылка.ТипыВЕТИС"));
	ДанныеСписка.Колонки.Добавить("ХозяйствующийСубъект", Новый ОписаниеТипов("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС"));
	ДанныеСписка.Колонки.Добавить("Предприятие",          Новый ОписаниеТипов("СправочникСсылка.ПредприятияВЕТИС"));
	ДанныеСписка.Колонки.Добавить("КлючЗаписи");
	
	ПредприятияОрганизацииВЕТИС = ИнтеграцияВЕТИС.ИнициализироватьТаблицуОрганизацияПредприятиеВЕТИС();
	Для Каждого КлючЗаписи Из СтрокиСписка Цикл
		
		СтрокаТЧ = ДанныеСписка.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, КлючЗаписи);
		СтрокаТЧ.КлючЗаписи = КлючЗаписи;
		
		// Состояние по-умолчанию: Зеленый
		СтрокаСписка = Строки[КлючЗаписи];
		СтрокаСписка.Оформление["ДатаОбмена"].УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Зеленый);
		СтрокаСписка.Оформление["СостояниеОбмена"].УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Зеленый);
		
		Если ЗначениеЗаполнено(КлючЗаписи.ХозяйствующийСубъект) Тогда
			СтрокаТЧ = ПредприятияОрганизацииВЕТИС.Добавить();
			СтрокаТЧ.Организация = КлючЗаписи.ХозяйствующийСубъект;
			СтрокаТЧ.Предприятие = КлючЗаписи.Предприятие;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатыЗапроса = ИнтеграцияВЕТИС.СостояниеОбмена(ПредприятияОрганизацииВЕТИС);
	
	// Обмен не выполнялся длительное время
	ИдентификаторПроблемы = "ДлительноеОтсутствиеОбменаПоВСД";
	Проблемы = РезультатыЗапроса[ИдентификаторПроблемы].Выгрузить();
	Для Каждого СтрокаТЧ Из Проблемы Цикл
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("ТипВЕТИС",             Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы);
		СтруктураКлюча.Вставить("ХозяйствующийСубъект", СтрокаТЧ.ХозяйствующийСубъект);
		СтруктураКлюча.Вставить("Предприятие",          СтрокаТЧ.Предприятие);
		
		НайденныеСтроки = ДанныеСписка.НайтиСтроки(СтруктураКлюча);
		ПрименитьОформление(Строки, НайденныеСтроки, ИдентификаторПроблемы,
			НСтр("ru='Обмен не выполнялся длительное время'"),
			ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
		
	КонецЦикла;
	
	// Обмен не выполнялся длительное время
	ИдентификаторПроблемы = "ДлительноеОтсутствиеОбменаПоЗаписямСкладскогоЖурнала";
	Проблемы = РезультатыЗапроса[ИдентификаторПроблемы].Выгрузить();
	Для Каждого СтрокаТЧ Из Проблемы Цикл
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("ТипВЕТИС",             Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала);
		СтруктураКлюча.Вставить("ХозяйствующийСубъект", СтрокаТЧ.ХозяйствующийСубъект);
		СтруктураКлюча.Вставить("Предприятие",          СтрокаТЧ.Предприятие);
		
		НайденныеСтроки = ДанныеСписка.НайтиСтроки(СтруктураКлюча);
		ПрименитьОформление(Строки, НайденныеСтроки, ИдентификаторПроблемы,
			НСтр("ru='Обмен не выполнялся длительное время'"),
			ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
		
	КонецЦикла;
	
	// Есть ошибки APLM0012
	ИдентификаторПроблемы = "ЕстьПроблемыAPLM0012ПриСинхронизацииВСД";
	Проблемы = РезультатыЗапроса[ИдентификаторПроблемы].Выгрузить();
	Для Каждого СтрокаТЧ Из Проблемы Цикл
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("ТипВЕТИС",             Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы);
		СтруктураКлюча.Вставить("ХозяйствующийСубъект", СтрокаТЧ.ХозяйствующийСубъект);
		СтруктураКлюча.Вставить("Предприятие",          СтрокаТЧ.Предприятие);
		
		НайденныеСтроки = ДанныеСписка.НайтиСтроки(СтруктураКлюча);
		ПрименитьОформление(Строки, НайденныеСтроки, ИдентификаторПроблемы,
			НСтр("ru='Есть ошибки APLM0012 при синхронизации ветеринарно-сопроводительных документов'"),
			ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
		
	КонецЦикла;
	
	// Есть ошибки APLM0012
	ИдентификаторПроблемы = "ЕстьПроблемыAPLM0012ПриСинхронизацииЗаписейСкладскогоЖурнала";
	Проблемы = РезультатыЗапроса[ИдентификаторПроблемы].Выгрузить();
	Для Каждого СтрокаТЧ Из Проблемы Цикл
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("ТипВЕТИС",             Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала);
		СтруктураКлюча.Вставить("ХозяйствующийСубъект", СтрокаТЧ.ХозяйствующийСубъект);
		СтруктураКлюча.Вставить("Предприятие",          СтрокаТЧ.Предприятие);
		
		НайденныеСтроки = ДанныеСписка.НайтиСтроки(СтруктураКлюча);
		ПрименитьОформление(Строки, НайденныеСтроки, ИдентификаторПроблемы,
			НСтр("ru='Есть ошибки APLM0012 при синхронизации записей складского журнала'"),
			ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
		
	КонецЦикла;
	
	// Расхождения
	ИдентификаторПроблемы = "ЕстьРасхожденияДатыСинхронизацииИДатыОбменаПоВСД";
	Проблемы = РезультатыЗапроса[ИдентификаторПроблемы].Выгрузить();
	Для Каждого СтрокаТЧ Из Проблемы Цикл
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("ТипВЕТИС",             Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы);
		СтруктураКлюча.Вставить("ХозяйствующийСубъект", СтрокаТЧ.ХозяйствующийСубъект);
		СтруктураКлюча.Вставить("Предприятие",          СтрокаТЧ.Предприятие);
		
		НайденныеСтроки = ДанныеСписка.НайтиСтроки(СтруктураКлюча);
		ПрименитьОформление(Строки, НайденныеСтроки, ИдентификаторПроблемы,
			НСтр("ru='Есть проблемы с синхронизацией ветеринарно-сопроводительных документов'"),
			ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
		
	КонецЦикла;
	
	// Расхождения
	ИдентификаторПроблемы = "ЕстьРасхожденияДатыСинхронизацииИДатыОбменаПоЗаписямСкладскогоЖурнала";
	Проблемы = РезультатыЗапроса[ИдентификаторПроблемы].Выгрузить();
	Для Каждого СтрокаТЧ Из Проблемы Цикл
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("ТипВЕТИС",             Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала);
		СтруктураКлюча.Вставить("ХозяйствующийСубъект", СтрокаТЧ.ХозяйствующийСубъект);
		СтруктураКлюча.Вставить("Предприятие",          СтрокаТЧ.Предприятие);
		
		НайденныеСтроки = ДанныеСписка.НайтиСтроки(СтруктураКлюча);
		ПрименитьОформление(Строки, НайденныеСтроки, ИдентификаторПроблемы,
			НСтр("ru='Есть проблемы с синхронизацией записей складского журнала'"),
			ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
		
	КонецЦикла;
	
	// Рассинхронизация обмена
	ИдентификаторПроблемы = "ЕстьРасхожденияМеждуДатамиСинхронизацииЗаписейСкладскогоЖурналаИВСД";
	Проблемы = РезультатыЗапроса[ИдентификаторПроблемы].Выгрузить();
	Для Каждого СтрокаТЧ Из Проблемы Цикл
		
		Если СтрокаТЧ.ДатаСинхронизацииЗаписейСкладскогоЖурнала < СтрокаТЧ.ДатаСинхронизацииВСД Тогда
			
			СтруктураКлюча = Новый Структура;
			СтруктураКлюча.Вставить("ТипВЕТИС",             Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала);
			СтруктураКлюча.Вставить("ХозяйствующийСубъект", СтрокаТЧ.ХозяйствующийСубъект);
			СтруктураКлюча.Вставить("Предприятие",          СтрокаТЧ.Предприятие);
			
			НайденныеСтроки = ДанныеСписка.НайтиСтроки(СтруктураКлюча);
			ПрименитьОформление(Строки, НайденныеСтроки, ИдентификаторПроблемы,
				НСтр("ru='Рассинхронизация обмена по записям складского журнала'"),
				ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
			
		ИначеЕсли СтрокаТЧ.ДатаСинхронизацииВСД < СтрокаТЧ.ДатаСинхронизацииЗаписейСкладскогоЖурнала Тогда
			
			СтруктураКлюча = Новый Структура;
			СтруктураКлюча.Вставить("ТипВЕТИС",             Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы);
			СтруктураКлюча.Вставить("ХозяйствующийСубъект", СтрокаТЧ.ХозяйствующийСубъект);
			СтруктураКлюча.Вставить("Предприятие",          СтрокаТЧ.Предприятие);
			
			НайденныеСтроки = ДанныеСписка.НайтиСтроки(СтруктураКлюча);
			ПрименитьОформление(Строки, НайденныеСтроки, ИдентификаторПроблемы,
				НСтр("ru='Рассинхронизация обмена по ветеринарно-сопроводительным документам'"),
				ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Не актуальные ВСД
	ИдентификаторПроблемы = "НеАктуальныеВСД";
	Проблемы = РезультатыЗапроса[ИдентификаторПроблемы].Выгрузить();
	Для Каждого СтрокаТЧ Из Проблемы Цикл
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("ТипВЕТИС",             Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы);
		СтруктураКлюча.Вставить("ХозяйствующийСубъект", СтрокаТЧ.ХозяйствующийСубъект);
		СтруктураКлюча.Вставить("Предприятие",          СтрокаТЧ.Предприятие);
		
		НайденныеСтроки = ДанныеСписка.НайтиСтроки(СтруктураКлюча);
		ПрименитьОформление(Строки, НайденныеСтроки, ИдентификаторПроблемы,
			НСтр("ru='Ветеринарно-сопроводительные документы не актуальны'"),
			WebЦвета.Коричневый);
		
	КонецЦикла;
	
	// Не актуальные записи
	ИдентификаторПроблемы = "НеАктуальныеЗаписиСкладскогоЖурнала";
	Проблемы = РезультатыЗапроса[ИдентификаторПроблемы].Выгрузить();
	Для Каждого СтрокаТЧ Из Проблемы Цикл
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("ТипВЕТИС",             Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала);
		СтруктураКлюча.Вставить("ХозяйствующийСубъект", СтрокаТЧ.ХозяйствующийСубъект);
		СтруктураКлюча.Вставить("Предприятие",          СтрокаТЧ.Предприятие);
		
		НайденныеСтроки = ДанныеСписка.НайтиСтроки(СтруктураКлюча);
		ПрименитьОформление(Строки, НайденныеСтроки, ИдентификаторПроблемы,
			НСтр("ru='Записи складского журнала не актуальны'"),
			WebЦвета.Коричневый);
		
	КонецЦикла;
	
	ИдентификаторПроблемы = "ЛишниеЗаписиСинхронизации";
	Проблемы = РезультатыЗапроса[ИдентификаторПроблемы].Выгрузить();
	Для Каждого СтрокаТЧ Из Проблемы Цикл
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("ТипВЕТИС",             СтрокаТЧ.ТипВЕТИС);
		СтруктураКлюча.Вставить("ХозяйствующийСубъект", СтрокаТЧ.ХозяйствующийСубъект);
		СтруктураКлюча.Вставить("Предприятие",          СтрокаТЧ.Предприятие);
		
		НайденныеСтроки = ДанныеСписка.НайтиСтроки(СтруктураКлюча);
		ПрименитьОформление(Строки, НайденныеСтроки, ИдентификаторПроблемы,
			НСтр("ru='Запись не используется'"),
			ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
		
	КонецЦикла;
	
	ДанныеСписка.Колонки.Удалить(ДанныеСписка.Колонки.Найти("КлючЗаписи"));
	Запрос.УстановитьПараметр("Ключи", ДанныеСписка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураКлюча = Новый Структура("ТипВЕТИС, ХозяйствующийСубъект, Предприятие");
		ЗаполнитьЗначенияСвойств(СтруктураКлюча, Выборка);
		КлючЗаписи = РегистрыСведений.СинхронизацияКлассификаторовВЕТИС.СоздатьКлючЗаписи(СтруктураКлюча);
		
		СтрокаСписка = Строки[КлючЗаписи];
		
		Если Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.Продукция
		      Или Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.ВидыПродукции
		      Или Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.НаименованияПродукции
		      Или Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.НазначенияГрузов
		      Или Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.ЗарубежныеПредприятия
		      Или Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.ПредприятияРФ
		      Или Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.ХозяйствующиеСубъекты
		      Или Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.ЕдиницыИзмерения
		      Или Выборка.ТипВЕТИС = Перечисления.ТипыВЕТИС.Заболевания Тогда
			
			Если Не ЗначениеЗаполнено(Выборка.ДатаОбмена) И Не ЗначениеЗаполнено(Выборка.ДатаСинхронизации) Тогда
				
				СтрокаСписка.Данные["ИдентификаторПроблемы"] = "СинхронизацияНеВыполняласьДлительноеВремя";
				СтрокаСписка.Данные["СостояниеОбмена"] = НСтр("ru = 'Синхронизация не выполнялась длительное время'");
				СтрокаСписка.Оформление["СостояниеОбмена"].УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
				
				СтрокаСписка.Данные["ДатаОбмена"] = НСтр("ru = '<не выполнялся>'");
				СтрокаСписка.Оформление["ДатаОбмена"].УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
				
			ИначеЕсли Не ЗначениеЗаполнено(Выборка.ДатаОбмена) И ЗначениеЗаполнено(Выборка.ДатаСинхронизации) Тогда
				
				СтрокаСписка.Данные["ИдентификаторПроблемы"] = "СинхронизацияНеВыполняласьДлительноеВремя";
				СтрокаСписка.Данные["СостояниеОбмена"] = НСтр("ru = 'Синхронизация не выполнялась длительное время'");
				
				Если ТекущаяДатаСеанса() - Выборка.ДатаСинхронизации > 30 * 24 * 60 * 60 Тогда
					СтрокаСписка.Оформление["СостояниеОбмена"].УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
				Иначе
					СтрокаСписка.Оформление["СостояниеОбмена"].УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
				КонецЕсли;
				
				СтрокаСписка.Данные["ДатаОбмена"] = Формат(Выборка.ДатаСинхронизации, "ДЛФ=D;");
				СтрокаСписка.Оформление["ДатаОбмена"].УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
				
			Иначе
				
				Если ТекущаяДатаСеанса() - Выборка.ДатаОбмена > 30 * 24 * 60 * 60 Тогда
					
					СтрокаСписка.Данные["ИдентификаторПроблемы"] = "СинхронизацияНеВыполняласьДлительноеВремя";
					СтрокаСписка.Данные["СостояниеОбмена"] = НСтр("ru = 'Синхронизация не выполнялась длительное время'");
					СтрокаСписка.Оформление["СостояниеОбмена"].УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
					
					СтрокаСписка.Оформление["ДатаОбмена"].УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
					
				Иначе
					
					СтрокаСписка.Оформление["ДатаОбмена"].УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Зеленый);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СостояниеОбмена" Тогда
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбраннаяСтрока);
		
		СтандартнаяОбработка = Ложь;
		
		Если ДанныеСтроки.ИдентификаторПроблемы = "СинхронизацияНеВыполняласьДлительноеВремя" Тогда
			Синхронизировать(Неопределено);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Рекомендации = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.ИдентификаторПроблемы) Тогда
		
		Рекомендации = Новый ФорматированнаяСтрока(НСтр("ru = 'Обмен выполняется, проблем не обнаружено.'"));
		
	Иначе
		
		Рекомендации = ИнтеграцияВЕТИСКлиентСервер.ПодсказкаКСостояниюОбмена(
			ТекущиеДанные.ИдентификаторПроблемы,
			Элементы.Рекомендации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗапросаОбновления(Элемент)
	
	СписокПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПараметрыОптимизации" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.ПанельАдминистрированияВЕТИС.Форма.ПараметрыОптимизации");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "УдалитьЗаписьСинхронизации" Тогда
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			СтандартнаяОбработка = Ложь;
			УдалитьЗаписьСинхронизации(
				ТекущиеДанные.ТипВЕТИС,
				ТекущиеДанные.ХозяйствующийСубъект,
				ТекущиеДанные.Предприятие);
			
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитьОбмен" Тогда
		
		СтандартнаяОбработка = Ложь;
		Синхронизировать(Неопределено);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗапроситьОстаткиИНепогашенныеВСД" Тогда
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			СтандартнаяОбработка = Ложь;
			УдалитьЗаписьСинхронизации(
				Неопределено,
				ТекущиеДанные.ХозяйствующийСубъект,
				ТекущиеДанные.Предприятие);
			
			ХозяйствующиеСубъекты = Новый Массив;
			Предприятия = Новый Массив;
			Предприятия.Добавить(ТекущиеДанные.Предприятие);
			
			ОрганизацияПредприятие = Новый Структура(
				"Организация, Предприятия, ВсеПредприятияВыбраны",
				ТекущиеДанные.ХозяйствующийСубъект,
				Предприятия,
				Ложь);
			ХозяйствующиеСубъекты.Добавить(ОрганизацияПредприятие);
			
			ИнтеграцияВЕТИСКлиент.ВыполнитьОбмен(
				ЭтотОбъект,
				ХозяйствующиеСубъекты,
				Новый ОписаниеОповещения("ПриЗавершенииОбмена", ЭтотОбъект));
			
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначенияСлужебныйКлиент.ЭтоНавигационнаяСсылка(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		
		СтандартнаяОбработка = Ложь;
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестная ссылка: %1'"),
			НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Синхронизировать(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или Не ЗначениеЗаполнено(ТекущиеДанные.ТипВЕТИС) Тогда
			ПоказатьПредупреждение(, ИнтеграцияИСКлиентСервер.ТекстКомандаНеМожетБытьВыполнена());
			Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	РезультатОбмена = СинхронизироватьНаСервере(
		ТекущиеДанные.ТипВЕТИС,
		ТекущиеДанные.ХозяйствующийСубъект,
		ТекущиеДанные.Предприятие);
	
	Если РезультатОбмена <> Неопределено Тогда
		ОбработатьРезультатОбмена(РезультатОбмена);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала);
	СписокТипов.Добавить(Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы);
	
	// Хозяйствующие субъекты
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ХозяйствующийСубъект.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТипВЕТИС.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокТипов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для всех организаций>'"));
	
	// Предприятия
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Предприятие.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТипВЕТИС.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокТипов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для всех предприятий>'"));
	
	// Нет данных о выполнении обмена
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаОбмена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ДатаОбмена.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<нет данных>'"));
	
	// Даты
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.ДатаОбмена", Элементы.ДатаОбмена.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияРезультатаОбработкиЗаявки(Изменения, ДополнительныеПараметры) Экспорт
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииОбмена(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Функция СинхронизироватьНаСервере(ТипВЕТИС, ХозяйствующийСубъект, Предприятие)
	
	РазмерПорции = 500;
	
	Если ТипВЕТИС = Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы Тогда
		Изменения = ЗаявкиВЕТИСВызовСервера.ПодготовитьЗапросИзмененныхВетеринарноСопроводительныхДокументов(
			ХозяйствующийСубъект, Предприятие, РазмерПорции, УникальныйИдентификатор);
	ИначеЕсли ТипВЕТИС = Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала Тогда
		Изменения = ЗаявкиВЕТИСВызовСервера.ПодготовитьЗапросИзмененныхЗаписейСкладскогоЖурнала(
			ХозяйствующийСубъект, Предприятие, РазмерПорции, УникальныйИдентификатор);
	Иначе
		ИнтеграцияВЕТИСВызовСервера.ВыполнитьСинхронизациюКлассификаторов(
			Неопределено,
			ТипВЕТИС);
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
	Возврат Изменения;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатОбмена(РезультатОбмена)
	
	ИнтеграцияВЕТИСКлиент.ОбработатьРезультатОбмена(РезультатОбмена, ЭтотОбъект,, ОповещениеПриЗавершенииОбмена(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияВЕТИСКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект,, ОповещениеПриЗавершенииОбмена(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ОповещениеПриЗавершенииОбмена()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПолученияРезультатаОбработкиЗаявки", ЭтотОбъект);
	
	Возврат ОписаниеОповещения;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПрименитьОформление(Строки, НайденныеСтроки, ИдентификаторПроблемы, СостояниеОбмена, ЦветТекста)
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		СтрокаСписка = Строки[НайденнаяСтрока.КлючЗаписи];
		
		Если ПустаяСтрока(СтрокаСписка.Данные["СостояниеОбмена"]) Тогда
			
			СтрокаСписка.Данные["ИдентификаторПроблемы"] = ИдентификаторПроблемы;
			СтрокаСписка.Данные["СостояниеОбмена"]       = СостояниеОбмена;
			
			СтрокаСписка.Оформление["СостояниеОбмена"].УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
			СтрокаСписка.Оформление["ДатаОбмена"].УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписьСинхронизации(ТипВЕТИС, ХозяйствующийСубъект, Предприятие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СинхронизацияКлассификаторовВЕТИС.СоздатьНаборЗаписей();
	
	Если ТипВЕТИС <> Неопределено Тогда
		НаборЗаписей.Отбор.ТипВЕТИС.Установить(ТипВЕТИС);
	КонецЕсли;
	
	НаборЗаписей.Отбор.ХозяйствующийСубъект.Установить(ХозяйствующийСубъект);
	НаборЗаписей.Отбор.Предприятие.Установить(Предприятие);
	
	НаборЗаписей.Записать(Истина);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти