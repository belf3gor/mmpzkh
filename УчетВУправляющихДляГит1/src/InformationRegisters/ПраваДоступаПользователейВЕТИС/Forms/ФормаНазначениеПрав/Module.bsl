
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьОбязательныеПраваДоступа();
	ЗаполнитьНедоступныеПраваДоступа();
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИменаСтраниц();
	
	ХозяйствующийСубъект = Параметры.ХозяйствующийСубъект;
	
	ЗаполнитьПраваДоступа();
	ЗаполнитьПредприятия();
	
	Если Параметры.СозданиеНового Тогда
		Заголовок = НСтр("ru='Регистрация и связывание пользователя ВетИС с хозяйствующим субъектом'");
		
		ЭлементСозданиеНовогоХозяйствующийСубъект = Элементы.СозданиеНовогоХозяйствующийСубъект;
		
		Если ЗначениеЗаполнено(ХозяйствующийСубъект) Тогда
			ЭлементСозданиеНовогоХозяйствующийСубъект.Вид = ВидПоляФормы.ПолеНадписи;
			ЭлементСозданиеНовогоХозяйствующийСубъект.АвтоМаксимальнаяШирина = Ложь;
			ЭлементСозданиеНовогоХозяйствующийСубъект.Гиперссылка = Истина;
		ИначеЕсли НЕ ИспользуетсяКомиссияПриЗакупкахИлиПереработкаДавальческогоСырья() Тогда
			ПараметрыВыбора = Новый Массив();
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.СоответствуетОрганизации", Истина));
			ЭлементСозданиеНовогоХозяйствующийСубъект.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		КонецЕсли;
		
		ПользовательВЕТИС = Параметры.ЗначениеКопирования;
	Иначе
		ПользовательВЕТИС = Параметры.ПользовательВЕТИС;
	КонецЕсли;
	
	УстановитьПометкиПравДоступа();
	УстановитьПризнакСобственнойОрганизации();
	УстановитьРежимРегистрацииНовогоПользователя();
	
	Если НЕ ЭтоСобственнаяОрганизация ИЛИ НЕ Параметры.СозданиеНового Тогда
		ЗаполнитьАдреса();
		УстановитьПометкиПредприятий();
	КонецЕсли;
	
	Если Параметры.СозданиеНового Тогда
		ПользовательВЕТИС = Неопределено;
	КонецЕсли;
	
	УстановитьОграничениеЗоныОтветственности(ЭтотОбъект);
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
	СтраницыФормы = Элементы.ГруппаСтраницы;
	СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[0]];
	
	УстановитьТекущуюСтраницуНавигации(ЭтотОбъект);
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветПроблема    = ЦветаСтиля.ЦветТекстаПроблемаГосИС;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьВсеПрава(Команда)
	
	Для Каждого ЭлементСпискаЗначений Из ПраваДоступа Цикл
		
		Если НедоступныеПраваДоступа.Найти(ЭлементСпискаЗначений.Значение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСпискаЗначений.Пометка = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеПрава(Команда)
	
	Для Каждого ЭлементСпискаЗначений Из ПраваДоступа Цикл
		
		Если НедоступныеПраваДоступа.Найти(ЭлементСпискаЗначений.Значение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСпискаЗначений.Пометка = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеПредприятия(Команда)
	
	ПредприятияЗоныОтветственности.ЗаполнитьПометки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеПредприятия(Команда)
	
	ПредприятияЗоныОтветственности.ЗаполнитьПометки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если НЕ ПроверитьЗаполнениеТекущейСтраницы() Тогда
		Возврат;
	КонецЕсли;
	
	СтраницыФормы  = Элементы.ГруппаСтраницы;
	ИндексСтраницы = ИменаСтраниц.Найти(СтраницыФормы.ТекущаяСтраница.Имя);
	
	Если ИменаСтраниц[ИндексСтраницы + 1] = "СтраницаЛичныеДанные" Тогда
		Если ЭтоСобственнаяОрганизация И СозданиеНовогоПользователя = 0 Тогда
			СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[ИндексСтраницы + 2]];
		ИначеЕсли НЕ ЭтоСобственнаяОрганизация И ЗначениеЗаполнено(ПользовательВЕТИС) Тогда
			СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[ИндексСтраницы + 2]];
		Иначе
			СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[ИндексСтраницы + 1]];
		КонецЕсли;
	ИначеЕсли ИменаСтраниц[ИндексСтраницы + 1] = "СтраницаЗапросОшибка" И ПустаяСтрока(ТекстОшибка) Тогда
		СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[ИндексСтраницы + 2]];
	Иначе
		СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[ИндексСтраницы + 1]];
	КонецЕсли;
	
	ГруппаСтраницыПриСменеСтраницы(СтраницыФормы, СтраницыФормы.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	СтраницыФормы  = Элементы.ГруппаСтраницы;
	ИндексСтраницы = ИменаСтраниц.Найти(СтраницыФормы.ТекущаяСтраница.Имя);
	
	Если ИменаСтраниц[ИндексСтраницы - 1] = "СтраницаЛичныеДанные" Тогда
		Если ЭтоСобственнаяОрганизация И СозданиеНовогоПользователя = 0 Тогда
			СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[ИндексСтраницы - 2]];
		ИначеЕсли НЕ ЭтоСобственнаяОрганизация И ЗначениеЗаполнено(ПользовательВЕТИС) Тогда
			СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[ИндексСтраницы - 2]];
		Иначе
			СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[ИндексСтраницы - 1]];
		КонецЕсли;
	ИначеЕсли ИменаСтраниц[ИндексСтраницы - 1] = "СтраницаЗапросОшибка" И ПустаяСтрока(ТекстОшибка) Тогда
		СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[ИндексСтраницы - 2]];
	Иначе
		СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[ИндексСтраницы - 1]];
	КонецЕсли;
	
	ГруппаСтраницыПриСменеСтраницы(СтраницыФормы, СтраницыФормы.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВНачало(Команда)
	
	СтраницыФормы = Элементы.ГруппаСтраницы;
	СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаНазначениеПрав;
	
	ГруппаСтраницыПриСменеСтраницы(СтраницыФормы, СтраницыФормы.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПоследнееИсходящееСообщение" Тогда
		ТекущийЭтапОбмена = ТекущийЭтапОбменаСВЕТИС();
		Если ТекущийЭтапОбмена <> Неопределено Тогда
			ПоказатьЗначение(, ТекущийЭтапОбмена.ИсходящееСообщение);
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьИсходящееСообщение") Тогда
		ИндексЭтапаОбмена = Число(СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьИсходящееСообщение", ""));
		ПоказатьЗначение(, ЭтапыОбмена[ИндексЭтапаОбмена].ИсходящееСообщение);
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьВходящееСообщение") Тогда
		ИндексЭтапаОбмена = Число(СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьВходящееСообщение", ""));
		ПоказатьЗначение(, ЭтапыОбмена[ИндексЭтапаОбмена].ВходящееСообщение);
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьПользователяВЕТИС") Тогда
		ПоказатьЗначение(, ПользовательВЕТИС);
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьХозяйствующийСубъект") Тогда
		ПоказатьЗначение(, ХозяйствующийСубъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьТекущуюСтраницуНавигации(ЭтотОбъект);
	
	Если ТекущаяСтраница = Элемент.ПодчиненныеЭлементы.СтраницаЗапросОжидание Тогда
		Если ЭтоСобственнаяОрганизация Тогда
			НачатьВыполнениеЗаявокВЕТИС();
		Иначе
			ЗаписатьДанныеПользователейВЕТИС();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СозданиеНовогоХозяйствующийСубъектПриИзмененииНаСервере()
	
	ЗаполнитьПредприятия();
	УстановитьПризнакСобственнойОрганизации();
	ОчиститьОграниченияЗоныОтветственности(ЭтотОбъект);
	УстановитьОграничениеЗоныОтветственности(ЭтотОбъект);
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеНовогоХозяйствующийСубъектПриИзменении(Элемент)
	СозданиеНовогоХозяйствующийСубъектПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СозданиеНовогоПользователяПриИзменении(Элемент)
	
	Если СозданиеНовогоПользователя = 1 Тогда
		ПользовательВЕТИС              = Неопределено;
		НовыйПользовательУчетнаяЗапись = "";
	КонецЕсли;
	
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПользовательПриИзмененииНаСервере()
	
	ЗаполнитьДанныеНовогоПользователя();
	
	ПользовательВЕТИС = СопоставленныйПользовательВЕТИС(Пользователь);
	
	НовыйПользовательВЕТИСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	ПользовательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НовыйПользовательВЕТИСПриИзмененииНаСервере(ИзменитьПользователя = Ложь)
	
	Если ЗначениеЗаполнено(ПользовательВЕТИС) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПользовательВЕТИС, "УчетнаяЗапись, Пользователь");
		
		Если ИзменитьПользователя Тогда
			Пользователь = ЗначенияРеквизитов.Пользователь;
			ЗаполнитьДанныеНовогоПользователя();
		КонецЕсли;
		
		НовыйПользовательУчетнаяЗапись = ЗначенияРеквизитов.УчетнаяЗапись;
		СозданиеНовогоПользователя     = 0;
	Иначе
		НовыйПользовательУчетнаяЗапись = "";
		СозданиеНовогоПользователя     = 1;
	КонецЕсли;
	
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйПользовательУчетнаяЗаписьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолноеИмяФормы = "Справочник.ПользователиВЕТИС.ФормаВыбора";
	ПараметрыФормы = Новый Структура("МножественныйВыбор", Ложь);
	РежимОткрытия  = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Если ЗначениеЗаполнено(ПользовательВЕТИС) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока ", ПользовательВЕТИС);
	КонецЕсли;
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("ПриВыбореПользователяВЕТИС", ЭтотОбъект);
	
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект,,,, ОповещениеПриЗакрытии, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументТипПриИзменении(Элемент)
	
	Если ДокументТип = ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.ПаспортГражданинаРФ") Тогда
		НовыйПользовательСтрана = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	Иначе
		Если ДокументТип = ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.ПаспортГражданинаРеспубликиАрмения") Тогда
			СтранаКодАльфа2 = "AM";
		ИначеЕсли ДокументТип = ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.ПаспортГражданинаРеспубликиБеларусь") Тогда
			СтранаКодАльфа2 = "BY";
		ИначеЕсли ДокументТип = ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.ПаспортГражданинаРеспубликиКазахстан") Тогда
			СтранаКодАльфа2 = "KZ";
		ИначеЕсли ДокументТип = ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.ПаспортГражданинаРеспубликиКиргизия") Тогда
			СтранаКодАльфа2 = "KG";
		Иначе
			СтранаКодАльфа2 = "";
		КонецЕсли;
		
		Если СтранаКодАльфа2 <> "" Тогда
			НовыйПользовательСтрана = СтранаМираПоКодуАльфа2(СтранаКодАльфа2);
		Иначе
			НовыйПользовательСтрана = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйПользовательСтрана) Тогда
		НовыйПользовательСтранаИдентификатор = ИдентификаторСтраныМира(НовыйПользовательСтрана);
	Иначе
		НовыйПользовательСтранаИдентификатор = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйПользовательСтранаПриИзменении(Элемент)
	
	НовыйПользовательСтранаИдентификатор = ИдентификаторСтраныМира(НовыйПользовательСтрана);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьЗонуОтветственностиПриИзменении(Элемент)
	
	Если ОграничениеЗоныОтветственности = 0 Тогда
		ОчиститьОграниченияЗоныОтветственности(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ХозяйствующийСубъектПриИзмененииНаСервере()
	
	ЗаполнитьПредприятия();
	УстановитьПометкиПравДоступа();
	УстановитьПризнакСобственнойОрганизации();
	
	Если РежимРегистрацииНовогоПользователя Тогда
		ОчиститьОграниченияЗоныОтветственности(ЭтотОбъект);
	Иначе
		ЗаполнитьАдреса();
		УстановитьПометкиПредприятий();
	КонецЕсли;
	
	УстановитьОграничениеЗоныОтветственности(ЭтотОбъект);
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйствующийСубъектПриИзменении(Элемент)
	ХозяйствующийСубъектПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПользовательВЕТИСПриИзмененииНаСервере()
	
	УстановитьПометкиПравДоступа();
	
	Если РежимРегистрацииНовогоПользователя Тогда
		ОчиститьОграниченияЗоныОтветственности(ЭтотОбъект);
	Иначе
		ЗаполнитьАдреса();
		УстановитьПометкиПредприятий();
	КонецЕсли;
	
	УстановитьОграничениеЗоныОтветственности(ЭтотОбъект);
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательВЕТИСПриИзменении(Элемент)
	ПользовательВЕТИСПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АдресаЗоныОтветственностиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПолноеИмяФормы = "Обработка.КлассификаторыВЕТИС.Форма.РедактированиеАдреса";
	ПараметрыФормы = Новый Структура("ЭтоАдресЗоныОтветственности", Истина);
	РежимОткрытия  = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("ПриВводеАдреса", ЭтотОбъект);
	
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект,,,, ОповещениеПриЗакрытии, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаЗоныОтветственностиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	ПолноеИмяФормы = "Обработка.КлассификаторыВЕТИС.Форма.РедактированиеАдреса";
	ПараметрыФормы = Новый Структура("ЭтоАдресЗоныОтветственности", Истина);
	РежимОткрытия  = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ДанныеАдреса = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныхАдреса();
		ДанныеАдреса.СтранаGUID = ТекущиеДанные.СтранаИдентификатор;
		ДанныеАдреса.РегионGUID = ТекущиеДанные.РегионИдентификатор;
		ДанныеАдреса.РайонGUID  = ТекущиеДанные.РайонИдентификатор;
		ДанныеАдреса.НаселенныйПунктGUID = ТекущиеДанные.НаселенныйПунктИдентификатор;
		ДанныеАдреса.ПредставлениеАдреса = ТекущиеДанные.АдресПредставление;
		
		ПараметрыФормы.Вставить("ДанныеАдреса", ДанныеАдреса);
	КонецЕсли;
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("ПриВводеАдреса", ЭтотОбъект, Элемент.ТекущаяСтрока);
	
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект,,,, ОповещениеПриЗакрытии, РежимОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеЗаявокВЕТИС_API

&НаКлиенте
Процедура НачатьВыполнениеЗаявокВЕТИС()
	
	ОчиститьСообщения();
	ЭтапыОбмена.Очистить();
	
	НовыйЭтапОбмена = ЭтапыОбмена.Добавить();
	
	Если РежимРегистрацииНовогоПользователя Тогда
		НовыйЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИПривязкуПользователейХозяйствующегоСубъекта");
	Иначе
		НовыйЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаИзменениеПравПользователей");
	КонецЕсли;
	
	ВыполнениеЗаявкиВЕТИСНачало();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеЗаявкиВЕТИСНачало()
	
	ТекущийЭтапОбмена = ТекущийЭтапОбменаСВЕТИС();
	
	Если ТекущийЭтапОбмена <> Неопределено Тогда
		Если ТекущийЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИПривязкуПользователейХозяйствующегоСубъекта") Тогда
			РезультатОбмена = ЗаявкиВЕТИСВызовСервера.ПодготовитьЗапросНаРегистрациюИПривязкуПользователейХозяйствующегоСубъекта(
			                  ХозяйствующийСубъект, ДанныеПользователей(), УникальныйИдентификатор);
		ИначеЕсли ТекущийЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаИзменениеПравПользователей") Тогда
			РезультатОбмена = ЗаявкиВЕТИСВызовСервера.ПодготовитьЗапросНаИзменениеПравПользователей(
			                  ХозяйствующийСубъект, ДанныеПользователей(), УникальныйИдентификатор);
		ИначеЕсли ТекущийЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаИзменениеЗонОтветственностиПользователей") Тогда
			РезультатОбмена = ЗаявкиВЕТИСВызовСервера.ПодготовитьЗапросНаИзменениеЗонОтветственностиПользователей(
			                  ХозяйствующийСубъект, ДанныеПользователей(), УникальныйИдентификатор);
		КонецЕсли;
		
		ОбработатьРезультатОбменаСВЕТИС(РезультатОбмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеЗаявкиВЕТИСОкончание(ДанныеДляОбработки)
	
	ТекущийЭтапОбмена = ТекущийЭтапОбменаСВЕТИС();
	
	Если ТекущийЭтапОбмена <> Неопределено Тогда
		Если ТекущийЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИПривязкуПользователейХозяйствующегоСубъекта") Тогда
			Если НЕ ЗначениеЗаполнено(ПользовательВЕТИС) Тогда
				ПользовательВЕТИС = ДанныеДляОбработки.Объект;
			КонецЕсли;
			ЗакончитьВыполнениеЗаявокВЕТИС();
		ИначеЕсли ТекущийЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаИзменениеПравПользователей") Тогда
			НовыйЭтапОбмена = ЭтапыОбмена.Добавить();
			НовыйЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаИзменениеЗонОтветственностиПользователей");
			ВыполнениеЗаявкиВЕТИСНачало();
		ИначеЕсли ТекущийЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаИзменениеЗонОтветственностиПользователей") Тогда
			ЗакончитьВыполнениеЗаявокВЕТИС();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьВыполнениеЗаявокВЕТИС()
	
	ОповеститьОбИзменениях();
	ПоказатьУспешныйРезультатОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатОбменаСВЕТИС(РезультатОбмена)
	
	Если РезультатОбмена.Ожидать <> Неопределено Тогда
		ТекущийЭтапОбмена = ТекущийЭтапОбменаСВЕТИС();
		
		Если ТекущийЭтапОбмена <> Неопределено Тогда
			ТекущийЭтапОбмена.ИсходящееСообщение = РезультатОбмена.Изменения[0].ИсходящееСообщение;
		КонецЕсли;
		
		СформироватьТекстОжидание();
	КонецЕсли;
	
	ИнтеграцияВЕТИСКлиент.ОбработатьРезультатОбмена(РезультатОбмена, ЭтотОбъект,, ОповещениеПриЗавершенииОбмена(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияВЕТИСКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект,, ОповещениеПриЗавершенииОбмена(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ОповещениеПриЗавершенииОбмена()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПолученияРезультатОбработкиЗаявки", ЭтотОбъект);
	
	Возврат ОписаниеОповещения;
	
КонецФункции

&НаКлиенте
Процедура ПослеПолученияРезультатОбработкиЗаявки(Изменения, ДополнительныеПараметры) Экспорт
	
	ТекущийЭтапОбмена = ТекущийЭтапОбменаСВЕТИС();
	
	Если ТекущийЭтапОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляОбработки = Неопределено;
	
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЭлементДанных.Операция = ТекущийЭтапОбмена.Заявка Тогда
			ДанныеДляОбработки = ЭлементДанных;
		ИначеЕсли ЭлементДанных.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ОтветНаЗапросРегистрацииИПривязкиПользователейХозяйствующегоСубъекта")
			И ТекущийЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИПривязкуПользователейХозяйствующегоСубъекта") Тогда
			ДанныеДляОбработки = ЭлементДанных;
			Прервать;
		ИначеЕсли ЭлементДанных.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененияПравПользователей")
			И ТекущийЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаИзменениеПравПользователей") Тогда
			ДанныеДляОбработки = ЭлементДанных;
			Прервать;
		ИначеЕсли ЭлементДанных.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененияЗонОтветственностиПользователей")
			И ТекущийЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаИзменениеЗонОтветственностиПользователей") Тогда
			ДанныеДляОбработки = ЭлементДанных;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеДляОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭтапОбмена.ВходящееСообщение = ДанныеДляОбработки.ВходящееСообщение;
	
	Если ДанныеДляОбработки.НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОтклонена")
		Или Не ПустаяСтрока(ДанныеДляОбработки.ТекстОшибки) Тогда
		ПоказатьОшибкуОбмена(ДанныеДляОбработки.ТекстОшибки);
	ИначеЕсли ДанныеДляОбработки.НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаВыполнена") Тогда
		ВыполнениеЗаявкиВЕТИСОкончание(ДанныеДляОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущийЭтапОбменаСВЕТИС()
	
	Если ЭтапыОбмена.Количество() > 0 Тогда
		Возврат ЭтапыОбмена[ЭтапыОбмена.Количество() - 1];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СформироватьТекстОжидание()
	
	Строки = Новый Массив();
	
	ТекущийЭтапОбмена = ТекущийЭтапОбменаСВЕТИС();
	
	Если ТекущийЭтапОбмена <> Неопределено Тогда
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Запрос'"),, ЦветГиперссылки,, "ОткрытьПоследнееИсходящееСообщение"));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЭтапаОбмена(ТекущийЭтапОбмена)));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'передан в ВетИС.'")));
		Строки.Добавить(Символы.ПС);
	КонецЕсли;
	
	Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Получение ответа от сервера может занять продолжительное время.'")));
	
	ТекстОжидание = Новый ФорматированнаяСтрока(Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуОбмена(ТекстОшибки)
	
	Строки = Новый Массив();
	
	ТекущийЭтапОбмена = ТекущийЭтапОбменаСВЕТИС();
	
	Если ТекущийЭтапОбмена <> Неопределено Тогда
		ИндексЭтапаОбмена = ЭтапыОбмена.Индекс(ТекущийЭтапОбмена);
		
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Запрос'"),, ЦветГиперссылки,, "ОткрытьИсходящееСообщение" + ИндексЭтапаОбмена));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЭтапаОбмена(ТекущийЭтапОбмена)));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'завершился с'")));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'ошибкой'"),, ЦветГиперссылки,, "ОткрытьВходящееСообщение" + ИндексЭтапаОбмена));
		Строки.Добавить(":");
		Строки.Добавить(Символы.ПС);
	Иначе
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Ошибка:'")));
		Строки.Добавить(" ");
	КонецЕсли;

	Строки.Добавить(Новый ФорматированнаяСтрока(ТекстОшибки,, ЦветПроблема));
	
	ТекстОшибка = Новый ФорматированнаяСтрока(Строки);
	
	СтраницыФормы = Элементы.ГруппаСтраницы;
	СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаЗапросОшибка;
	
	ГруппаСтраницыПриСменеСтраницы(СтраницыФормы, СтраницыФормы.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУспешныйРезультатОбмена()
	
	Строки = Новый Массив();
	
	Для Каждого ЭтапОбмена Из ЭтапыОбмена Цикл
		ИндексЭтапаОбмена = ЭтапыОбмена.Индекс(ЭтапОбмена);
	
		Строки.Добавить(НСтр("ru = 'На'"));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'запрос'"),, ЦветГиперссылки,, "ОткрытьИсходящееСообщение" + ИндексЭтапаОбмена));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЭтапаОбмена(ЭтапОбмена)));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'получен'")));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'ответ'"),, ЦветГиперссылки,, "ОткрытьВходящееСообщение" + ИндексЭтапаОбмена));
		Строки.Добавить(".");
		Строки.Добавить(Символы.ПС);
		
		ДобавитьРасшифровкуЭтапаОбмена(ЭтапОбмена, Строки);
	КонецЦикла;

	ТекстРезультат = Новый ФорматированнаяСтрока(Строки);
	
	СтраницыФормы = Элементы.ГруппаСтраницы;
	СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаЗапросРезультат;
	
	ГруппаСтраницыПриСменеСтраницы(СтраницыФормы, СтраницыФормы.ТекущаяСтраница);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьПользователейБезОбращенияКВЕТИС_API

&НаКлиенте
Процедура ЗаписатьДанныеПользователейВЕТИС()
	
	ТекстОшибки = "";
	
	ЗаписатьДанныеПользователейВЕТИСНаСервере(ДанныеПользователей(), ТекстОшибки);
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		ОповеститьОбИзменениях();
		ПоказатьУспешныйРезультатЗаписи();
	Иначе
		ПоказатьОшибкуЗаписи(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеПользователейВЕТИСНаСервере(ДанныеПользователей, ТекстОшибки)
	
	НачатьТранзакцию();
	
	Попытка
		Для Каждого ДанныеПользователя Из ДанныеПользователей Цикл
			Если РежимРегистрацииНовогоПользователя И НЕ ЗначениеЗаполнено(ДанныеПользователя.ПользовательВЕТИС) Тогда
				ПользователиВЕТИС.ЗагрузитьПользователяВЕТИС(ДанныеПользователя);
				ПользовательВЕТИС = ДанныеПользователя.ПользовательВЕТИС;
			КонецЕсли;
			ПользователиВЕТИС.ЗагрузитьПраваДоступаПользователяВЕТИС(ХозяйствующийСубъект, ДанныеПользователя);
		КонецЦикла;
		ПользователиВЕТИС.ЗагрузитьЗоныОтветственностиПользователейВЕТИС(ХозяйствующийСубъект, ДанныеПользователей);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуЗаписи(ТекстОшибки)
	
	Строки = Новый Массив();
	
	Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Запись пользователя завершилась с ошибкой'")));
	Строки.Добавить(":");
	Строки.Добавить(Символы.ПС);
	Строки.Добавить(Новый ФорматированнаяСтрока(ТекстОшибки,, ЦветПроблема));
	
	ТекстОшибка = Новый ФорматированнаяСтрока(Строки);
	
	СтраницыФормы = Элементы.ГруппаСтраницы;
	СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаЗапросОшибка;
	
	ГруппаСтраницыПриСменеСтраницы(СтраницыФормы, СтраницыФормы.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУспешныйРезультатЗаписи()
	
	Строки = Новый Массив();
	
	Если РежимРегистрацииНовогоПользователя Тогда
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Установлена связь пользователя ВетИС'")));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(Строка(ПользовательВЕТИС),, ЦветГиперссылки,, "ОткрытьПользователяВЕТИС"));
		Строки.Добавить(Символы.ПС);
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'с хозяйствующим субъектом'")));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(Строка(ХозяйствующийСубъект),, ЦветГиперссылки,, "ОткрытьХозяйствующийСубъект"));
		Строки.Добавить(Символы.ПС);
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'с назначением прав доступа и зоны ответственности'")));
		Строки.Добавить(".");
		Строки.Добавить(Символы.ПС);
	Иначе
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Пользователю ВетИС'")));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(Строка(ПользовательВЕТИС),, ЦветГиперссылки,, "ОткрытьПользователяВЕТИС"));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'назначены права доступа и зона ответственности'")));
		Строки.Добавить(Символы.ПС);
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'в хозяйствующем субъекте'")));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(Строка(ХозяйствующийСубъект),, ЦветГиперссылки,, "ОткрытьХозяйствующийСубъект"));
		Строки.Добавить(".");
		Строки.Добавить(Символы.ПС);
	КонецЕсли;
	
	ТекстРезультат = Новый ФорматированнаяСтрока(Строки);
	
	СтраницыФормы = Элементы.ГруппаСтраницы;
	СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаЗапросРезультат;
	
	ГруппаСтраницыПриСменеСтраницы(СтраницыФормы, СтраницыФормы.ТекущаяСтраница);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеИнтерфейсом

&НаСервере
Процедура ЗаполнитьОбязательныеПраваДоступа()
	
	ОбязательныеПрава = Новый Массив();
	
	ОбязательныеПрава.Добавить(Перечисления.ПраваДоступаВЕТИС.АвторизованныйЗаявительАргус);
	ОбязательныеПрава.Добавить(Перечисления.ПраваДоступаВЕТИС.АвторизованныйЗаявительМеркурий);
	
	ОбязательныеПраваДоступа = Новый ФиксированныйМассив(ОбязательныеПрава);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНедоступныеПраваДоступа()
	
	НедоступныеПрава = Новый Массив(ОбязательныеПраваДоступа);
	
	НедоступныеПрава.Добавить(Перечисления.ПраваДоступаВЕТИС.АттестованныйСпециалист);
	НедоступныеПрава.Добавить(Перечисления.ПраваДоступаВЕТИС.НазначениеУполномоченных);
	
	НедоступныеПраваДоступа = Новый ФиксированныйМассив(НедоступныеПрава);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПраваДоступаПометка.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПраваДоступаЗначение.Имя);
	
	СписокНедоступныхПрав = Новый СписокЗначений();
	СписокНедоступныхПрав.ЗагрузитьЗначения(Новый Массив(НедоступныеПраваДоступа));
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПраваДоступа.Значение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокНедоступныхПрав;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИменаСтраниц()
	
	СтраницыФормы = Новый Массив();
	
	Если Параметры.СозданиеНового Тогда
		СтраницыФормы.Добавить("СтраницаСозданиеНового");
		СтраницыФормы.Добавить("СтраницаЛичныеДанные");
	КонецЕсли;
	
	СтраницыФормы.Добавить("СтраницаНазначениеПрав");
	СтраницыФормы.Добавить("СтраницаЗапросОжидание");
	СтраницыФормы.Добавить("СтраницаЗапросОшибка");
	СтраницыФормы.Добавить("СтраницаЗапросРезультат");
	
	ИменаСтраниц = Новый ФиксированныйМассив(СтраницыФормы);
	
КонецПроцедуры // ЗаполнитьИменаСтраниц()

&НаКлиенте
Процедура ОповеститьОбИзменениях()
	
	Оповестить("Изменение_ПраваДоступаПользователейВЕТИС",     ХозяйствующийСубъект, ЭтотОбъект);
	Оповестить("Изменение_АдресаЗонОтветственностиВЕТИС",      ХозяйствующийСубъект, ЭтотОбъект);
	Оповестить("Изменение_ПредприятияЗонОтветственностиВЕТИС", ХозяйствующийСубъект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницуНавигации(Форма)
	
	СтраницыФормы     = Форма.Элементы.ГруппаСтраницы;
	СтраницыНавигации = Форма.Элементы.Навигация;
	
	ИндексСтраницы    = Форма.ИменаСтраниц.Найти(СтраницыФормы.ТекущаяСтраница.Имя);
	КоличествоСтраниц = Форма.ИменаСтраниц.Количество();
	
	Если ИндексСтраницы = 0 Тогда
		СтраницыНавигации.ТекущаяСтраница = СтраницыНавигации.ПодчиненныеЭлементы.НавигацияНачало;
		Форма.Элементы.НачалоДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли ИндексСтраницы = (КоличествоСтраниц - 1) Тогда
		СтраницыНавигации.ТекущаяСтраница = СтраницыНавигации.ПодчиненныеЭлементы.НавигацияОкончание;
		Форма.Элементы.ОкончаниеЗакрыть.КнопкаПоУмолчанию = Истина;
	ИначеЕсли СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаЗапросОшибка Тогда
		СтраницыНавигации.ТекущаяСтраница = СтраницыНавигации.ПодчиненныеЭлементы.НавигацияОшибка;
		Форма.Элементы.ОшибкаНазад.КнопкаПоУмолчанию = Истина;
	Иначе
		СтраницыНавигации.ТекущаяСтраница = СтраницыНавигации.ПодчиненныеЭлементы.НавигацияПродолжение;
		Если НЕ Форма.Элементы.ПродолжениеДалее.КнопкаПоУмолчанию Тогда
			Форма.Элементы.ПродолжениеДалее.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаЗапросОжидание Тогда
		СтраницыНавигации.Доступность = Ложь;
	Иначе
		СтраницыНавигации.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеЗоныОтветственности(Форма)
	
	ОбновитьПризнакиОграниченияЗоныОтветственности(Форма);
	
	Если Форма.ЗонаОтветственностиОграниченаТерриторией ИЛИ Форма.ЗонаОтветственностиОграниченаПредприятиями Тогда
		Форма.ОграничениеЗоныОтветственности = 1;
	Иначе
		Форма.ОграничениеЗоныОтветственности = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПризнакиОграниченияЗоныОтветственности(Форма)
	
	Форма.ЗонаОтветственностиОграниченаТерриторией = Форма.АдресаЗоныОтветственности.Количество() > 0;
	
	Форма.ЗонаОтветственностиОграниченаПредприятиями = Ложь;
	Для Каждого ЭлементСписка Из Форма.ПредприятияЗоныОтветственности Цикл
		Если ЭлементСписка.Пометка Тогда
			Форма.ЗонаОтветственностиОграниченаПредприятиями = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиФормы(Форма)
	
	Если Форма.РежимРегистрацииНовогоПользователя Тогда
		Если НЕ Форма.ЭтоСобственнаяОрганизация Тогда
			Форма.СозданиеНовогоПользователя = 0;
		КонецЕсли;
		
		Форма.Элементы.СозданиеНовогоПользователя.Доступность   = Форма.ЭтоСобственнаяОрганизация;
		Форма.Элементы.СвязываниеНовогоПользователя.Доступность = Форма.ЭтоСобственнаяОрганизация;
		
		Форма.Элементы.НовыйПользовательУчетнаяЗапись.Доступность               = Форма.СозданиеНовогоПользователя = 0;
		Форма.Элементы.НовыйПользовательУчетнаяЗапись.АвтоОтметкаНезаполненного = Форма.СозданиеНовогоПользователя = 0;
		
		Форма.Элементы.ГруппаДокумент.Видимость                 = Форма.ЭтоСобственнаяОрганизация;
		Форма.Элементы.НовыйПользовательЛичныйEmail.Видимость   = Форма.ЭтоСобственнаяОрганизация;
		Форма.Элементы.НовыйПользовательЛичныйТелефон.Видимость = Форма.ЭтоСобственнаяОрганизация;
		
		Форма.Элементы.ГруппаОграничениеЗоныОтветственности.Видимость = Не Форма.ЭтоСобственнаяОрганизация;
		Форма.Элементы.ГруппаЗонаОтветственности.Видимость            = Не Форма.ЭтоСобственнаяОрганизация;
	КонецЕсли;
	
	Если Форма.Элементы.ГруппаЗонаОтветственности.Видимость Тогда
		Форма.Элементы.ГруппаЗонаОтветственности.ТолькоПросмотр = Не Форма.ОграничениеЗоныОтветственности = 1;
		
		Форма.Элементы.ПредприятияЗоныОтветственностиУстановитьВсеПредприятия.Доступность = Форма.ОграничениеЗоныОтветственности = 1;
		Форма.Элементы.ПредприятияЗоныОтветственностиСнятьВсеПредприятия.Доступность      = Форма.ОграничениеЗоныОтветственности = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяКомиссияПриЗакупкахИлиПереработкаДавальческогоСырья()
	
	Возврат ИнтеграцияВЕТИС.ИспользуетсяКомиссияПриЗакупкахИлиПереработкаДавальческогоСырья();
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДанныхФормы

&НаСервере
Процедура ЗаполнитьДанныеНовогоПользователя()
	
	Если Пользователь.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФизЛица = ИнтеграцияВЕТИС.ДанныеФизическогоЛица(ФизическоеЛицо);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	НовыйПользовательФамилия      = ДанныеФизЛица.Фамилия;
	НовыйПользовательИмя          = ДанныеФизЛица.Имя;
	НовыйПользовательОтчество     = ДанныеФизЛица.Отчество;
	НовыйПользовательДатаРождения = ДанныеФизЛица.ДатаРождения;
	
	ДокументТип   = ДанныеФизЛица.ДокументТип;
	ДокументСерия = ДанныеФизЛица.ДокументСерия;
	ДокументНомер = ДанныеФизЛица.ДокументНомер;
	
	Если ЗначениеЗаполнено(ДанныеФизЛица.ГражданствоСтрана) Тогда
		НовыйПользовательСтрана = ДанныеФизЛица.ГражданствоСтрана;
		НовыйПользовательСтранаИдентификатор = ИдентификаторСтраныМира(НовыйПользовательСтрана);
		
		Если ДанныеФизЛица.ГражданствоСтрана = Справочники.СтраныМира.Россия И ДокументТип.Пустая() Тогда
			ДокументТип = Перечисления.ТипыДокументовВЕТИС.ПаспортГражданинаРФ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтранаМираПоКодуАльфа2(КодАльфа2)
	
	СтранаМира = Новый("СправочникСсылка.СтраныМира");
	
	Если НЕ ПустаяСтрока(КодАльфа2) Тогда
		СтранаМира = Справочники.СтраныМира.НайтиПоРеквизиту("КодАльфа2", КодАльфа2);
	КонецЕсли;
	
	Возврат СтранаМира;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИдентификаторСтраныМира(СтранаМира)
	
	Идентификатор = "";
	
	Если ЗначениеЗаполнено(СтранаМира) Тогда
		ДанныеСтраны  = ПрочиеКлассификаторыВЕТИСВызовСервера.ДанныеСтраныМира(СтранаМира);
		Идентификатор = ДанныеСтраны.Идентификатор;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПраваДоступа()
	
	ПраваДоступа.Очистить();
	
	Для Каждого ЗначениеПрава Из Перечисления.ПраваДоступаВЕТИС Цикл
		ПраваДоступа.Добавить(ЗначениеПрава);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкиПравДоступа()
	
	ПраваДоступа.ЗаполнитьПометки(Ложь);
	
	Если ЗначениеЗаполнено(ХозяйствующийСубъект) И ЗначениеЗаполнено(ПользовательВЕТИС) Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	ПраваДоступаПользователейВЕТИС.ПравоДоступа КАК ПравоДоступа
		|ИЗ
		|	РегистрСведений.ПраваДоступаПользователейВЕТИС КАК ПраваДоступаПользователейВЕТИС
		|ГДЕ
		|	ПраваДоступаПользователейВЕТИС.ХозяйствующийСубъект = &ХозяйствующийСубъект
		|	И ПраваДоступаПользователейВЕТИС.ПользовательВЕТИС = &ПользовательВЕТИС
		|";
		Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект);
		Запрос.УстановитьПараметр("ПользовательВЕТИС",    ПользовательВЕТИС);
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЭлементСписка = ПраваДоступа.НайтиПоЗначению(Выборка.ПравоДоступа);
			Если ЭлементСписка <> Неопределено Тогда
				ЭлементСписка.Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ПравоДоступа Из ОбязательныеПраваДоступа Цикл
		ЭлементСписка = ПраваДоступа.НайтиПоЗначению(ПравоДоступа);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдреса()
	
	АдресаЗоныОтветственности.Очистить();
	
	Если ЗначениеЗаполнено(ХозяйствующийСубъект) И ЗначениеЗаполнено(ПользовательВЕТИС) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	АдресаЗонОтветственностиВЕТИС.АдресПредставление  КАК АдресПредставление,
		|	АдресаЗонОтветственностиВЕТИС.СтранаИдентификатор КАК СтранаИдентификатор,
		|	АдресаЗонОтветственностиВЕТИС.РегионИдентификатор КАК РегионИдентификатор,
		|	АдресаЗонОтветственностиВЕТИС.РайонИдентификатор  КАК РайонИдентификатор,
		|	АдресаЗонОтветственностиВЕТИС.НаселенныйПунктИдентификатор КАК НаселенныйПунктИдентификатор
		|ИЗ
		|	РегистрСведений.АдресаЗонОтветственностиВЕТИС КАК АдресаЗонОтветственностиВЕТИС
		|ГДЕ
		|	АдресаЗонОтветственностиВЕТИС.ХозяйствующийСубъект = &ХозяйствующийСубъект
		|	И АдресаЗонОтветственностиВЕТИС.ПользовательВЕТИС = &ПользовательВЕТИС
		|";
		Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект);
		Запрос.УстановитьПараметр("ПользовательВЕТИС",    ПользовательВЕТИС);
		Результат = Запрос.Выполнить();
		
		АдресаЗоныОтветственности.Загрузить(Результат.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредприятия()
	
	ПредприятияЗоныОтветственности.Очистить();
	
	Если ЗначениеЗаполнено(ХозяйствующийСубъект) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	ХозяйствующиеСубъектыВЕТИСПредприятия.Предприятие КАК Предприятие
		|ИЗ
		|	Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК ХозяйствующиеСубъектыВЕТИСПредприятия
		|ГДЕ
		|	ХозяйствующиеСубъектыВЕТИСПредприятия.Ссылка = &ХозяйствующийСубъект
		|";
		Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект);
		Результат = Запрос.Выполнить();
		
		ПредприятияЗоныОтветственности.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Предприятие"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкиПредприятий()
	
	ПредприятияЗоныОтветственности.ЗаполнитьПометки(Ложь);
	
	Если ЗначениеЗаполнено(ХозяйствующийСубъект) И ЗначениеЗаполнено(ПользовательВЕТИС) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	ПредприятияЗонОтветственностиВЕТИС.Предприятие КАК Предприятие
		|ИЗ
		|	РегистрСведений.ПредприятияЗонОтветственностиВЕТИС КАК ПредприятияЗонОтветственностиВЕТИС
		|ГДЕ
		|	ПредприятияЗонОтветственностиВЕТИС.ХозяйствующийСубъект = &ХозяйствующийСубъект
		|	И ПредприятияЗонОтветственностиВЕТИС.ПользовательВЕТИС = &ПользовательВЕТИС
		|	И НЕ ПредприятияЗонОтветственностиВЕТИС.НаследуетсяИзАдреса
		|";
		Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект);
		Запрос.УстановитьПараметр("ПользовательВЕТИС",    ПользовательВЕТИС);
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЭлементСписка = ПредприятияЗоныОтветственности.НайтиПоЗначению(Выборка.Предприятие);
			Если ЭлементСписка <> Неопределено Тогда
				ЭлементСписка.Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьОграниченияЗоныОтветственности(Форма)
	
	Форма.АдресаЗоныОтветственности.Очистить();
	Форма.ПредприятияЗоныОтветственности.ЗаполнитьПометки(Ложь);
	
	Форма.ЗонаОтветственностиОграниченаТерриторией   = Ложь;
	Форма.ЗонаОтветственностиОграниченаПредприятиями = Ложь;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриВыбореПользователяВЕТИС(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДанныеВыбора) <> Тип("СправочникСсылка.ПользователиВЕТИС") Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательВЕТИС = ДанныеВыбора;
	
	НовыйПользовательВЕТИСПриИзмененииНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВводеАдреса(ДанныеАдреса, ИдентификаторСтроки) Экспорт
	
	Если ТипЗнч(ДанныеАдреса) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("СтранаИдентификатор", ДанныеАдреса.СтранаGUID);
	СтруктураПоиска.Вставить("РегионИдентификатор", ДанныеАдреса.РегионGUID);
	СтруктураПоиска.Вставить("РайонИдентификатор",  ДанныеАдреса.РайонGUID);
	СтруктураПоиска.Вставить("НаселенныйПунктИдентификатор", ДанныеАдреса.НаселенныйПунктGUID);
	
	Если АдресаЗоныОтветственности.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Адрес %1 уже включен в зону ответственности.'"), ДанныеАдреса.ПредставлениеАдреса);
		ИмяРеквизитаФормы = "АдресаЗоныОтветственности";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ИмяРеквизитаФормы,,);
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		ТекущиеДанные = АдресаЗоныОтветственности.НайтиПоИдентификатору(ИдентификаторСтроки);
	Иначе
		ТекущиеДанные = АдресаЗоныОтветственности.Добавить();
	КонецЕсли;
	
	ТекущиеДанные.АдресПредставление  = ДанныеАдреса.ПредставлениеАдреса;
	ТекущиеДанные.СтранаИдентификатор = ДанныеАдреса.СтранаGUID;
	ТекущиеДанные.РегионИдентификатор = ДанныеАдреса.РегионGUID;
	ТекущиеДанные.РайонИдентификатор  = ДанныеАдреса.РайонGUID;
	ТекущиеДанные.НаселенныйПунктИдентификатор = ДанныеАдреса.НаселенныйПунктGUID;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеПользователей()
	
	ДанныеПользователей = Новый Массив();
	
	Если РежимРегистрацииНовогоПользователя Тогда
		ДанныеПользователя = ПользователиВЕТИСКлиентСервер.СтруктураДанныхПользователяВЕТИС();
		ДанныеПользователя.Пользователь      = Пользователь;
		ДанныеПользователя.ПользовательВЕТИС = ПользовательВЕТИС;
		
		Если СозданиеНовогоПользователя = 0 Тогда
			ДанныеПользователя.УчетнаяЗапись = НовыйПользовательУчетнаяЗапись;
			Если НЕ ЭтоСобственнаяОрганизация И НЕ ЗначениеЗаполнено(ДанныеПользователя.ПользовательВЕТИС) Тогда
				ДанныеПользователя.Фамилия         = НовыйПользовательФамилия;
				ДанныеПользователя.Имя             = НовыйПользовательИмя;
				ДанныеПользователя.Отчество        = НовыйПользовательОтчество;
				ДанныеПользователя.ДатаРождения    = НовыйПользовательДатаРождения;
				ДанныеПользователя.РабочийТелефон  = НовыйПользовательРабочийТелефон;
				ДанныеПользователя.РабочийEmail    = НовыйПользовательРабочийEmail;
				ДанныеПользователя.Должность       = НовыйПользовательДолжность;
			КонецЕсли;
		ИначеЕсли СозданиеНовогоПользователя = 1 Тогда
			ДанныеПользователя.Фамилия             = НовыйПользовательФамилия;
			ДанныеПользователя.Имя                 = НовыйПользовательИмя;
			ДанныеПользователя.Отчество            = НовыйПользовательОтчество;
			ДанныеПользователя.ДатаРождения        = НовыйПользовательДатаРождения;
			ДанныеПользователя.ДокументТип         = ДокументТип;
			ДанныеПользователя.ДокументСерия       = ДокументСерия;
			ДанныеПользователя.ДокументНомер       = ДокументНомер;
			ДанныеПользователя.СтранаИдентификатор = НовыйПользовательСтранаИдентификатор;
			ДанныеПользователя.СНИЛС               = НовыйПользовательСНИЛС;
			ДанныеПользователя.ЛичныйТелефон       = НовыйПользовательЛичныйТелефон;
			ДанныеПользователя.ЛичныйEmail         = НовыйПользовательЛичныйEmail;
			ДанныеПользователя.РабочийТелефон      = НовыйПользовательРабочийТелефон;
			ДанныеПользователя.РабочийEmail        = НовыйПользовательРабочийEmail;
			ДанныеПользователя.Должность           = НовыйПользовательДолжность;
		КонецЕсли;
	Иначе
		ДанныеПользователя = ПользователиВЕТИСКлиентСервер.СтруктураРазграниченияДоступаПользователя();
		ДанныеПользователя.ПользовательВЕТИС = ПользовательВЕТИС;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ПраваДоступа Цикл
		Если ЭлементСписка.Пометка Тогда
			ДанныеПользователя.ПраваДоступа.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ОграничениеЗоныОтветственности = 1 Тогда
		Если ЗонаОтветственностиОграниченаТерриторией Тогда
			Для Каждого СтрокаАдреса Из АдресаЗоныОтветственности Цикл
				ДанныеАдреса = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныхАдреса();
				ДанныеАдреса.СтранаGUID = СтрокаАдреса.СтранаИдентификатор;
				ДанныеАдреса.РегионGUID = СтрокаАдреса.РегионИдентификатор;
				ДанныеАдреса.РайонGUID  = СтрокаАдреса.РайонИдентификатор;
				ДанныеАдреса.НаселенныйПунктGUID = СтрокаАдреса.НаселенныйПунктИдентификатор;
				ДанныеАдреса.ПредставлениеАдреса = СтрокаАдреса.АдресПредставление;
				ДанныеПользователя.Адреса.Добавить(ДанныеАдреса);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗонаОтветственностиОграниченаПредприятиями Тогда
			Для Каждого ЭлементСписка Из ПредприятияЗоныОтветственности Цикл
				Если ЭлементСписка.Пометка Тогда
					ДанныеПользователя.Предприятия.Добавить(ЭлементСписка.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПользователей.Добавить(ДанныеПользователя);
	
	Возврат ДанныеПользователей;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеТекущейСтраницы()
	
	ТекущаяСтраницаЗаполнена = Истина;
	
	СтраницыФормы = Элементы.ГруппаСтраницы;
	СписокОшибок  = Новый СписокЗначений();
	
	Если СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаСозданиеНового Тогда
		
		Если ХозяйствующийСубъект.Пустая() Тогда
			ТекстОшибки = НСтр("ru = 'Не указан хозяйствующий субъект.'");
			СписокОшибок.Добавить("ХозяйствующийСубъект", ТекстОшибки);
		ИначеЕсли ЭтоСобственнаяОрганизация И НЕ ЭтоАдминистраторХозяйствующегоСубъекта(ХозяйствующийСубъект) Тогда
			ТекстОшибки = НСтр("ru = 'Для выполнения операции необходимо иметь роль ""Администратор"" в хозяйствующем субъекте в системе ""ВетИС.Паспорт"".'");
			СписокОшибок.Добавить("ХозяйствующийСубъект", ТекстОшибки);
		КонецЕсли;
		
		Если Пользователь.Пустая() Тогда
			ТекстОшибки = НСтр("ru = 'Не указан пользователь информационной базы.'");
			СписокОшибок.Добавить("Пользователь", ТекстОшибки);
		ИначеЕсли СозданиеНовогоПользователя = 1 Тогда
			СопоставленныйПользовательВЕТИС = СопоставленныйПользовательВЕТИС(Пользователь);
			Если НЕ СопоставленныйПользовательВЕТИС.Пустая() Тогда
				ТекстОшибки = НСтр("ru='Пользователь информационной базы ""%1"" сопоставлен с пользователем ВетИС ""%2"". Нельзя регистрировать сопоставленного пользователя как нового.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, Пользователь, СопоставленныйПользовательВЕТИС);
				СписокОшибок.Добавить("Пользователь", ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Если СозданиеНовогоПользователя = 0 Тогда
			Если ПустаяСтрока(НовыйПользовательУчетнаяЗапись) Тогда
				ТекстОшибки = НСтр("ru = 'Не указана учетная запись пользователя в системе ""ВетИС.Паспорт"".'");
				СписокОшибок.Добавить("НовыйПользовательУчетнаяЗапись", ТекстОшибки);
			ИначеЕсли НЕ ПользователиВЕТИСКлиентСервер.ЭтоУчетнаяЗапись(НовыйПользовательУчетнаяЗапись) Тогда
				ТекстОшибки = НСтр("ru = 'Неправильно указана учетная запись пользователя в системе ""ВетИС.Паспорт"".'");
				СписокОшибок.Добавить("НовыйПользовательУчетнаяЗапись", ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаЛичныеДанные Тогда
		
		Если ПустаяСтрока(НовыйПользовательФамилия) Тогда
			ТекстОшибки = НСтр("ru = 'Не указана фамилия регистрируемого пользователя.'");
			СписокОшибок.Добавить("НовыйПользовательФамилия", ТекстОшибки);
		КонецЕсли;
		
		Если ПустаяСтрока(НовыйПользовательИмя) Тогда
			ТекстОшибки = НСтр("ru = 'Не указано имя регистрируемого пользователя.'");
			СписокОшибок.Добавить("НовыйПользовательИмя", ТекстОшибки);
		КонецЕсли;
		
		Если ПустаяСтрока(НовыйПользовательДатаРождения) Тогда
			ТекстОшибки = НСтр("ru = 'Не указана дата рождения регистрируемого пользователя.'");
			СписокОшибок.Добавить("НовыйПользовательДатаРождения", ТекстОшибки);
		КонецЕсли;
		
		Если НЕ ПользователиВЕТИСКлиентСервер.ЭтоСНИЛС(НовыйПользовательСНИЛС) Тогда
			ТекстОшибки = НСтр("ru = 'Неправильно указан СНИЛС регистрируемого пользователя.'");
			СписокОшибок.Добавить("НовыйПользовательСНИЛС", ТекстОшибки);
		КонецЕсли;
		
		Если ЭтоСобственнаяОрганизация Тогда
			Если ДокументТип.Пустая() Тогда
				ТекстОшибки = НСтр("ru = 'Не указан тип документа, удостоверяющего личность.'");
				СписокОшибок.Добавить("ДокументТип", ТекстОшибки);
			КонецЕсли;
			
			Если ПустаяСтрока(ДокументСерия) Тогда
				ТекстОшибки = НСтр("ru = 'Не указана серия документа, удостоверяющего личность.'");
				СписокОшибок.Добавить("ДокументСерия", ТекстОшибки);
			КонецЕсли;
			
			Если ПустаяСтрока(ДокументНомер) Тогда
				ТекстОшибки = НСтр("ru = 'Не указан номер документа, удостоверяющего личность.'");
				СписокОшибок.Добавить("ДокументНомер", ТекстОшибки);
			КонецЕсли;
			
			Если НовыйПользовательСтрана.Пустая() Тогда
				ТекстОшибки = НСтр("ru = 'Не указана страна гражданства регистрируемого пользователя.'");
				СписокОшибок.Добавить("НовыйПользовательСтрана", ТекстОшибки);
			КонецЕсли;
			
			Если ПустаяСтрока(НовыйПользовательЛичныйEmail) Тогда
				ТекстОшибки = НСтр("ru = 'Не указан личный email регистрируемого пользователя.'");
				СписокОшибок.Добавить("НовыйПользовательЛичныйEmail", ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаНазначениеПрав Тогда
		
		Если ЭтоСобственнаяОрганизация И НЕ ЭтоАдминистраторХозяйствующегоСубъекта(ХозяйствующийСубъект) Тогда
			ТекстОшибки = НСтр("ru = 'Для выполнения операции необходимо иметь роль ""Администратор"" в хозяйствующем субъекте в системе ""ВетИС.Паспорт"".'");
			СписокОшибок.Добавить("ХозяйствующийСубъект", ТекстОшибки);
		КонецЕсли;
		
		ОтсутствующиеПраваДоступа = "";
		Если НЕ ПраваДоступаУстановленыКорректно(ОтсутствующиеПраваДоступа) Тогда
			ТекстОшибки = НСтр("ru = 'Не установлены обязательные права доступа:'") + " " + ОтсутствующиеПраваДоступа;
			СписокОшибок.Добавить("ПраваДоступа", ТекстОшибки);
		КонецЕсли;
		
		Если НЕ ЗонаОтветственностиОграниченаКорректно() Тогда
			ТекстОшибки = НСтр("ru = 'Неправильно установлены ограничения зоны ответственности.'");
			СписокОшибок.Добавить("ОграничениеЗоныОтветственности", ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Для Каждого ОшибкаЭлемент Из СписокОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаЭлемент.Представление,, ОшибкаЭлемент.Значение,,);
		ТекущаяСтраницаЗаполнена = Ложь;
	КонецЦикла;
	
	Возврат ТекущаяСтраницаЗаполнена;
	
КонецФункции

&НаКлиенте
Функция ПраваДоступаУстановленыКорректно(ОтсутствующиеПрава)
	
	ПраваКорректны = Истина;
	
	Для Каждого ПравоДоступа Из ОбязательныеПраваДоступа Цикл
		ЭлементСписка = ПраваДоступа.НайтиПоЗначению(ПравоДоступа);
		Если ЭлементСписка <> Неопределено И НЕ ЭлементСписка.Пометка Тогда
			ОтсутствующиеПрава = ОтсутствующиеПрава + ?(ПустаяСтрока(ОтсутствующиеПрава), "", ", ") + ПравоДоступа;
			ПраваКорректны = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПраваКорректны;
	
КонецФункции

&НаКлиенте
Функция ЗонаОтветственностиОграниченаКорректно()
	
	Если ОграничениеЗоныОтветственности = 1 Тогда
		ОбновитьПризнакиОграниченияЗоныОтветственности(ЭтотОбъект);
		Возврат ЗонаОтветственностиОграниченаТерриторией ИЛИ ЗонаОтветственностиОграниченаПредприятиями;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПредставлениеЭтапаОбмена(ЭтапОбмена)
	
	ПредставлениеЭтапа = "";
	
	Если ЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИПривязкуПользователейХозяйствующегоСубъекта") Тогда
		ПредставлениеЭтапа = НСтр("ru = 'на регистрацию нового пользователя'");
	ИначеЕсли ЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаИзменениеПравПользователей") Тогда
		ПредставлениеЭтапа = НСтр("ru = 'на изменение прав доступа'");
	ИначеЕсли ЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаИзменениеЗонОтветственностиПользователей") Тогда
		ПредставлениеЭтапа = НСтр("ru = 'на изменение зоны ответственности'");
	КонецЕсли;
	
	Возврат ПредставлениеЭтапа;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьРасшифровкуЭтапаОбмена(ЭтапОбмена, Строки)
	
	Если ЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИПривязкуПользователейХозяйствующегоСубъекта") Тогда
		
		Если СозданиеНовогоПользователя = 0 Тогда
			Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Установлена связь пользователя ВетИС'")));
			Строки.Добавить(" ");
			Строки.Добавить(Новый ФорматированнаяСтрока(Строка(ПользовательВЕТИС),, ЦветГиперссылки,, "ОткрытьПользователяВЕТИС"));
			Строки.Добавить(Символы.ПС);
			Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'с хозяйствующим субъектом'")));
			Строки.Добавить(" ");
			Строки.Добавить(Новый ФорматированнаяСтрока(Строка(ХозяйствующийСубъект),, ЦветГиперссылки,, "ОткрытьХозяйствующийСубъект"));
			Строки.Добавить(".");
			Строки.Добавить(Символы.ПС);
		Иначе
			Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Создан новый пользователь ВетИС'")));
			Строки.Добавить(" ");
			Строки.Добавить(Новый ФорматированнаяСтрока(Строка(ПользовательВЕТИС),, ЦветГиперссылки,, "ОткрытьПользователяВЕТИС"));
			Строки.Добавить(",");
			Строки.Добавить(Символы.ПС);
			Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'связанный с хозяйствующим субъектом'")));
			Строки.Добавить(" ");
			Строки.Добавить(Новый ФорматированнаяСтрока(Строка(ХозяйствующийСубъект),, ЦветГиперссылки,, "ОткрытьХозяйствующийСубъект"));
			Строки.Добавить(".");
			Строки.Добавить(Символы.ПС);
			Строки.Добавить(Символы.ПС);
			Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'До начала работы пользователю необходимо изменить временный пароль.'")));
			Строки.Добавить(" ");
			Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Инструкция по изменению пароля отправлена на личный email пользователя.'")));
			Строки.Добавить(" ");
			Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Выполнение операций в ВетИС от имени пользователя'"),, ЦветПроблема));
			Строки.Добавить(" ");
			Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'с временным паролем невозможно'"),, ЦветПроблема));
			Строки.Добавить(".");
			Строки.Добавить(Символы.ПС);
		КонецЕсли;
		
	ИначеЕсли ЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаИзменениеПравПользователей") Тогда
		
	ИначеЕсли ЭтапОбмена.Заявка = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросНаИзменениеЗонОтветственностиПользователей") Тогда
		
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Пользователю ВетИС'")));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(Строка(ПользовательВЕТИС),, ЦветГиперссылки,, "ОткрытьПользователяВЕТИС"));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'назначены права доступа и зона ответственности'")));
		Строки.Добавить(Символы.ПС);
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'в хозяйствующем субъекте'")));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(Строка(ХозяйствующийСубъект),, ЦветГиперссылки,, "ОткрытьХозяйствующийСубъект"));
		Строки.Добавить(".");
		Строки.Добавить(Символы.ПС);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакСобственнойОрганизации()
	
	Если ЗначениеЗаполнено(ХозяйствующийСубъект) Тогда
		ЭтоСобственнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ХозяйствующийСубъект, "СоответствуетОрганизации");
	Иначе
		ЭтоСобственнаяОрганизация = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимРегистрацииНовогоПользователя()
	
	РежимРегистрацииНовогоПользователя = Параметры.СозданиеНового;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СопоставленныйПользовательВЕТИС(Пользователь)
	
	Возврат ПользователиВЕТИС.ПользовательВЕТИС(Пользователь);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоАдминистраторХозяйствующегоСубъекта(ХозяйствующийСубъект)
	
	Возврат ПользователиВЕТИС.ЭтоАдминистраторХозяйствующегоСубъекта(ХозяйствующийСубъект);
	
КонецФункции

#КонецОбласти

