
#Область ОбщиеПроцедурыИФункции

&НаСервере
// Процедура заполняет таблицы формы из хранилищ значений.
Процедура ЗаполнитьТаблицу(ТаблицаИсточник, ТаблицаФормы)
	
	Если ТипЗнч(ТаблицаИсточник) = Тип("ТаблицаЗначений") Тогда
		ТаблицаФормы.Загрузить(ТаблицаИсточник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет таблицу кодов данными из макета.
Процедура ЗаполнитьТаблицуКодов(Наименование, Таблица)
	
	Выполнить(Таблица + ".Очистить();");
	Макет = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.ПолучитьМакет(Наименование);
	ОбластьКодов = Макет.ПолучитьОбласть(Наименование);
	Для НомерСтроки = 1 По ОбластьКодов.ВысотаТаблицы Цикл
		
		ТекстКода         = ОбластьКодов.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		Если Наименование = "КодыУлиц" Тогда
			ТекстКодаБТИ  = ОбластьКодов.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
		КонецЕсли;
		ТекстНаименования = ОбластьКодов.Область(НомерСтроки, ?(Наименование = "КодыУлиц", 3, 2),
		                                         НомерСтроки, ?(Наименование = "КодыУлиц", 3, 2)).Текст;
		
		Если Не ПустаяСтрока(ТекстКода) И Не ПустаяСтрока(ТекстНаименования) Тогда
			Выполнить("НоваяСтрока = " + Таблица + ".Добавить();
			|НоваяСтрока.Код          = ТекстКода;"
			+ ?(Наименование = "КодыУлиц", "НоваяСтрока.КодБТИ = ТекстКодаБТИ;", "")
			+ "НоваяСтрока.Наименование = ТекстНаименования;");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура получает или заполняет таблицу кодов организаций.
Функция ЗаполнитьТаблицуОрганизаций(НеобходимВозврат = Ложь)
	
	ТаблицаОрганизаций = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.ПолучитьИнформациюОбОрганизациях();
	Если НеобходимВозврат Тогда
		Возврат ТаблицаОрганизаций;
	Иначе
		ТаблицаКодовОрганизаций.Загрузить(ТаблицаОрганизаций);
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура получает или заполняет таблицу кодов зданий.
Функция ЗаполнитьТаблицуЗданий(НеобходимВозврат = Ложь)
	
	ТаблицаЗданий = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.ПолучитьИнформациюОЗданиях();
	Если НеобходимВозврат Тогда
		Возврат ТаблицаЗданий;
	Иначе
		ТаблицаКодовЗданий.Загрузить(ТаблицаЗданий);
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция получает таблицу кодов данными из макета.
Функция ПолучитьТаблицуКодовПоМакету(Наименование)
	
	ТаблицаМакета = Новый ТаблицаЗначений;
	ТаблицаМакета.Колонки.Добавить("Код",          Новый ОписаниеТипов("Число"));
	ТаблицаМакета.Колонки.Добавить("КодБТИ",       Новый ОписаниеТипов("Число"));
	ТаблицаМакета.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	Макет = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.ПолучитьМакет(Наименование);
	ОбластьКодов = Макет.ПолучитьОбласть(Наименование);
	Для НомерСтроки = 1 По ОбластьКодов.ВысотаТаблицы Цикл
		
		Если Наименование = "КодыУлиц" Тогда
			ТекстКода         = ОбластьКодов.Область(НомерСтроки, 1).Текст;
			ТекстКодаБТИ      = ОбластьКодов.Область(НомерСтроки, 2).Текст;
			ТекстНаименования = ОбластьКодов.Область(НомерСтроки, 3).Текст;
		Иначе
			ТекстКода         = ОбластьКодов.Область(НомерСтроки, 1).Текст;
			ТекстНаименования = ОбластьКодов.Область(НомерСтроки, 2).Текст;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстКода) И Не ПустаяСтрока(ТекстНаименования) Тогда
			НоваяСтрока = ТаблицаМакета.Добавить();
			НоваяСтрока.Код          = ТекстКода;
			НоваяСтрока.КодБТИ       = ТекстКодаБТИ;
			НоваяСтрока.Наименование = ТекстНаименования;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаМакета;
	
КонецФункции

&НаСервере
// Функция получает или заполняет таблицу кодов плательщиков.
Функция ЗаполнитьТаблицуКодовПлательщиков(НеобходимВозврат = Ложь, СписокЛС = Неопределено)
	
	ТаблицаПлательщиков = 
		РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.ПолучитьИнформациюОПлательщиках(Запись.Период, СписокЛС);
	
	Если НеобходимВозврат Тогда
		Возврат ТаблицаПлательщиков;
	Иначе
		ТаблицаКодовПлательщиков.Загрузить(ТаблицаПлательщиков);
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция получает или заполняет таблицу кодов жилищных фондов.
Функция ЗаполнитьТаблицуКодовЖилищныхФондов(НеобходимВозврат = Ложь)
	
	СоответствиеЖилФонда = Новый Соответствие;
	СоответствиеЖилФонда.Вставить(Перечисления.КВП_ТипыЖилогоФонда.Муниципальный,         1);
	СоответствиеЖилФонда.Вставить(Перечисления.КВП_ТипыЖилогоФонда.ЖСКНаОбслуживанииДЕЗ,  2);
	СоответствиеЖилФонда.Вставить(Перечисления.КВП_ТипыЖилогоФонда.ЖСКНаСамообслуживании, 3);
	СоответствиеЖилФонда.Вставить(Перечисления.КВП_ТипыЖилогоФонда.ТСЖ,                   4);
	СоответствиеЖилФонда.Вставить(Перечисления.КВП_ТипыЖилогоФонда.Ведомства,             5);
	СоответствиеЖилФонда.Вставить(Перечисления.КВП_ТипыЖилогоФонда.ДомаВУпрКомОрг,        6);
	
	Если НеобходимВозврат Тогда
		
		ТаблицаСоответствия = Новый ТаблицаЗначений;
		ТаблицаСоответствия.Колонки.Добавить("Код");
		ТаблицаСоответствия.Колонки.Добавить("Наименование");
		
		Для Каждого ТекСоответствие Из СоответствиеЖилФонда Цикл
			НоваяСтрока = ТаблицаСоответствия.Добавить();
			НоваяСтрока.Наименование = ТекСоответствие.Ключ;
			НоваяСтрока.Код          = ТекСоответствие.Значение;
		КонецЦикла;
		
		Возврат ТаблицаСоответствия;
		
	Иначе
		
		ТаблицаКодовЖилищныхФондов.Очистить();
		Для Каждого ТекЗначение Из СоответствиеЖилФонда Цикл
			НоваяСтрока = ТаблицаКодовЖилищныхФондов.Добавить();
			НоваяСтрока.Наименование = ТекЗначение.Ключ;
			НоваяСтрока.Код          = ТекЗначение.Значение;
		КонецЦикла;
		
		ТаблицаКодовЖилищныхФондов.Сортировать("Код");
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция получает или заполняет таблицу кодов типов заселения.
Функция ЗаполнитьТаблицуКодовТиповЗаселения(НеобходимВозврат = Ложь)
	
	СоответствиеТиповЗаселения = Новый Соответствие;
	СоответствиеТиповЗаселения.Вставить(Перечисления.КВП_КатегорииКвартир.Отдельная,                1);
	СоответствиеТиповЗаселения.Вставить(Перечисления.КВП_КатегорииКвартир.Коммунальная,             2);
	СоответствиеТиповЗаселения.Вставить(Перечисления.КВП_КатегорииКвартир.Общежитие,                3);
	СоответствиеТиповЗаселения.Вставить(Перечисления.КВП_КатегорииКвартир.ОбщежитиеКоридорногоТипа, 4);
	
	Если НеобходимВозврат Тогда
		
		ТаблицаСоответствия = Новый ТаблицаЗначений;
		ТаблицаСоответствия.Колонки.Добавить("Код");
		ТаблицаСоответствия.Колонки.Добавить("Наименование");
		
		Для Каждого ТекСоответствие Из СоответствиеТиповЗаселения Цикл
			НоваяСтрока = ТаблицаСоответствия.Добавить();
			НоваяСтрока.Наименование = ТекСоответствие.Ключ;
			НоваяСтрока.Код          = ТекСоответствие.Значение;
		КонецЦикла;
		
		Возврат ТаблицаСоответствия;
		
	Иначе
		
		ТаблицаКодовТиповЗаселения.Очистить();
		Для Каждого ТекЗначение Из СоответствиеТиповЗаселения Цикл
			НоваяСтрока = ТаблицаКодовТиповЗаселения.Добавить();
			НоваяСтрока.Наименование = ТекЗначение.Ключ;
			НоваяСтрока.Код          = ТекЗначение.Значение;
		КонецЦикла;
		
		ТаблицаКодовТиповЗаселения.Сортировать("Код");
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция получает или заполняет таблицу кодов документов личности.
Функция ЗаполнитьТаблицуКодовДокументовЛичности(НеобходимВозврат = Ложь)
	
	СоответствиеДокументовЛичности = Новый Соответствие;
	СоответствиеДокументовЛичности.Вставить(Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ,                 1);
	СоответствиеДокументовЛичности.Вставить(Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении,    2);
	СоответствиеДокументовЛичности.Вставить(Справочники.ВидыДокументовФизическихЛиц.УдостоверениеОфицера,      3);
	СоответствиеДокументовЛичности.Вставить(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилет,              4);
	СоответствиеДокументовЛичности.Вставить(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса, 4);
	
	Если НеобходимВозврат Тогда
		
		ТаблицаСоответствия = Новый ТаблицаЗначений;
		ТаблицаСоответствия.Колонки.Добавить("Код");
		ТаблицаСоответствия.Колонки.Добавить("Наименование");
		
		Для Каждого ТекСоответствие Из СоответствиеДокументовЛичности Цикл
			НоваяСтрока = ТаблицаСоответствия.Добавить();
			НоваяСтрока.Наименование = ТекСоответствие.Ключ;
			НоваяСтрока.Код          = ТекСоответствие.Значение;
		КонецЦикла;
		
		Возврат ТаблицаСоответствия;
		
	Иначе
		
		ТаблицаКодовДокументовЛичности.Очистить();
		Для Каждого ТекЗначение Из СоответствиеДокументовЛичности Цикл
			НоваяСтрока = ТаблицаКодовДокументовЛичности.Добавить();
			НоваяСтрока.Наименование = ТекЗначение.Ключ;
			НоваяСтрока.Код          = ТекЗначение.Значение;
		КонецЦикла;
		
		ТаблицаКодовДокументовЛичности.Сортировать("Код");
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция получает или заполняет таблицу кодов услуг.
Функция ЗаполнитьТаблицуКодовУслуг(НеобходимВозврат = Ложь)
	
	ТаблицаУслуг = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.ПолучитьИнформациюОУслугах(Запись.Период);
	Если НеобходимВозврат Тогда
		Возврат ТаблицаУслуг;
	Иначе
		ТаблицаКодовУслуг.Загрузить(ТаблицаУслуг);
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция получает или заполняет таблицу кодов льгот.
Функция ЗаполнитьТаблицуКодовЛьгот(НеобходимВозврат = Ложь)
	
	ТаблицаЛьгот = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.ПолучитьИнформациюОЛьготах();
	Если НеобходимВозврат Тогда
		Возврат ТаблицаЛьгот;
	Иначе
		ТаблицаКодовЛьгот.Загрузить(ТаблицаЛьгот);
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция получает или заполняет таблицу кодов типов запирающего устройства.
Функция ЗаполнитьТаблицуКодовТиповЗапирающегоУстройства(НеобходимВозврат = Ложь)
	
	СоответствиеТиповЗапирающегоУстройства = Новый Соответствие;
	СоответствиеТиповЗапирающегоУстройства.Вставить(Перечисления.УПЖКХ_ТипЗапирающегоУстройства.Отсутствует,  0);
	СоответствиеТиповЗапирающегоУстройства.Вставить(Перечисления.УПЖКХ_ТипЗапирающегоУстройства.Механическое, 1);
	СоответствиеТиповЗапирающегоУстройства.Вставить(Перечисления.УПЖКХ_ТипЗапирающегоУстройства.Электронное,  2);
	СоответствиеТиповЗапирающегоУстройства.Вставить(Перечисления.УПЖКХ_ТипЗапирающегоУстройства.Домофон,      3);
	
	Если НеобходимВозврат Тогда
		
		ТаблицаСоответствия = Новый ТаблицаЗначений;
		ТаблицаСоответствия.Колонки.Добавить("Код");
		ТаблицаСоответствия.Колонки.Добавить("Наименование");
		
		Для Каждого ТекСоответствие Из СоответствиеТиповЗапирающегоУстройства Цикл
			НоваяСтрока = ТаблицаСоответствия.Добавить();
			НоваяСтрока.Наименование = ТекСоответствие.Ключ;
			НоваяСтрока.Код          = ТекСоответствие.Значение;
		КонецЦикла;
		
		Возврат ТаблицаСоответствия;
		
	Иначе
		
		ТаблицаКодовЗапирающегоУстройства.Очистить();
		Для Каждого ТекЗначение Из СоответствиеТиповЗапирающегоУстройства Цикл
			НоваяСтрока = ТаблицаКодовЗапирающегоУстройства.Добавить();
			НоваяСтрока.Наименование = ТекЗначение.Ключ;
			НоваяСтрока.Код          = ТекЗначение.Значение;
		КонецЦикла;
		
		ТаблицаКодовЗапирающегоУстройства.Сортировать("Код");
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция получает или заполняет таблицу кодов типов плит.
Функция ЗаполнитьТаблицуКодовТиповПлит(НеобходимВозврат = Ложь)
	
	СоответствиеТиповПлит = Новый Соответствие;
	СоответствиеТиповПлит.Вставить(Перечисления.КВП_Плита.Газовая,       1);
	СоответствиеТиповПлит.Вставить(Перечисления.КВП_Плита.Электрическая, 2);
	
	Если НеобходимВозврат Тогда
		
		ТаблицаСоответствия = Новый ТаблицаЗначений;
		ТаблицаСоответствия.Колонки.Добавить("Код");
		ТаблицаСоответствия.Колонки.Добавить("Наименование");
		
		Для Каждого ТекСоответствие Из СоответствиеТиповПлит Цикл
			НоваяСтрока = ТаблицаСоответствия.Добавить();
			НоваяСтрока.Наименование = ТекСоответствие.Ключ;
			НоваяСтрока.Код          = ТекСоответствие.Значение;
		КонецЦикла;
		
		Возврат ТаблицаСоответствия;
		
	Иначе
		
		ТаблицаКодовТиповПлит.Очистить();
		Для Каждого ТекЗначение Из СоответствиеТиповПлит Цикл
			НоваяСтрока = ТаблицаКодовТиповПлит.Добавить();
			НоваяСтрока.Наименование = ТекЗначение.Ключ;
			НоваяСтрока.Код          = ТекЗначение.Значение;
		КонецЦикла;
		
		ТаблицаКодовТиповПлит.Сортировать("Код");
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура добавляет новые элементы в таблицы соответствия.
Процедура ДополнитьТаблицуКодовНовымиЭлементами(Таблица, ИмяМакета, ПараметрРесурса, СписокЛС = Неопределено)
	
	Если      ПараметрРесурса = 1 Тогда
		ТаблицаМакета  = ПолучитьТаблицуКодовПоМакету(ИмяМакета);
	ИначеЕсли ПараметрРесурса = 2 Тогда
		ТаблицаМакета = ЗаполнитьТаблицуКодовПлательщиков(Истина, СписокЛС);
	ИначеЕсли ПараметрРесурса = 3 Тогда
		ТаблицаМакета = ЗаполнитьТаблицуКодовЖилищныхФондов(Истина);
	ИначеЕсли ПараметрРесурса = 4 Тогда
		ТаблицаМакета = ЗаполнитьТаблицуКодовТиповЗаселения(Истина);
	ИначеЕсли ПараметрРесурса = 5 Тогда
		ТаблицаМакета = ЗаполнитьТаблицуКодовДокументовЛичности(Истина);
	ИначеЕсли ПараметрРесурса = 6 Тогда
		ТаблицаМакета = ЗаполнитьТаблицуОрганизаций(Истина);
	ИначеЕсли ПараметрРесурса = 7 Тогда
		ТаблицаМакета = ЗаполнитьТаблицуКодовУслуг(Истина);
	ИначеЕсли ПараметрРесурса = 8 Тогда
		ТаблицаМакета = ЗаполнитьТаблицуКодовЛьгот(Истина);
	ИначеЕсли ПараметрРесурса = 9 Тогда
		ТаблицаМакета = ЗаполнитьТаблицуКодовТиповЗапирающегоУстройства(Истина);
	ИначеЕсли ПараметрРесурса = 10 Тогда
		ТаблицаМакета = ЗаполнитьТаблицуКодовТиповПлит(Истина);
	ИначеЕсли ПараметрРесурса = 11 Тогда
		ТаблицаМакета = ЗаполнитьТаблицуЗданий(Истина);
	КонецЕсли;
	
	ТекущаяТаблица = Неопределено;
	НоваяСтрока = Неопределено;
	Выполнить("ТекущаяТаблица = ДанныеФормыВЗначение(" + Таблица + ", Тип(""ТаблицаЗначений""));");
	Для Каждого ТекСтрока Из ТаблицаМакета Цикл
		
		ОтборСтрок = Новый Структура("Наименование", ТекСтрока.Наименование);
		Если ПараметрРесурса = 7 Тогда
			ОтборСтрок.Вставить("ВидТарифа", ТекСтрока.ВидТарифа);
		КонецЕсли;
			
		//МассивНайденныхСтрок = ТекущаяТаблица.НайтиСтроки(ОтборПоУслугеИВидуТарифа);
		МассивНайденныхСтрок = ТекущаяТаблица.НайтиСтроки(ОтборСтрок);
		
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			
			Выполнить("НоваяСтрока = " + Таблица + ".Добавить();");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура проверяет заполнение табличных частей.
Процедура ПроверитьЗаполнениеЗаписи(Отказ)
	
	БылиОшибки = Ложь;
	ПроверитьЗаполнениеТаблицы(ТаблицаКодовОрганизаций, "Коды организаций", "Организация",
								"ТаблицаКодовОрганизаций", БылиОшибки);
	ПроверитьЗаполнениеТаблицы(ТаблицаКодовРайонов, "Коды районов", "Район", "ТаблицаКодовРайонов", БылиОшибки);
	ПроверитьЗаполнениеТаблицы(ТаблицаКодовУлиц, "Коды улиц", "Улица", "ТаблицаКодовУлиц", БылиОшибки);
	ПроверитьЗаполнениеТаблицы(ТаблицаКодовЗданий, "Коды зданий", "Здание",
								"ТаблицаКодовЗданий", БылиОшибки);
	ПроверитьЗаполнениеТаблицы(ТаблицаКодовПлательщиков, "Коды плательщиков", УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПредставлениеОтветственногоСобственника(),
	                           "ТаблицаКодовПлательщиков", БылиОшибки);
	ПроверитьЗаполнениеТаблицы(ТаблицаКодовЖилищныхФондов, "Жилищные фонды", "Жилищный фонд",
	                           "ТаблицаКодовЖилищныхФондов", БылиОшибки);
	ПроверитьЗаполнениеТаблицы(ТаблицаКодовТиповЗаселения, "Типы заселения", "Тип заселения",
	                           "ТаблицаКодовТиповЗаселения", БылиОшибки);
	ПроверитьЗаполнениеТаблицы(ТаблицаКодовЛьгот, "Коды льготных категорий", "Льготная категория",
	                           "ТаблицаКодовЛьгот", БылиОшибки);
	ПроверитьЗаполнениеТаблицы(ТаблицаКодовДокументовЛичности, "Документы, удостоверяющие личность",
	                           "Вид документа", "ТаблицаКодовДокументовЛичности", БылиОшибки);
	ПроверитьЗаполнениеТаблицы(ТаблицаКодовУслуг, "Коды услуг", "Услуга", "ТаблицаКодовУслуг", БылиОшибки);
	ПроверитьЗаполнениеТаблицы(ТаблицаКодовЗапирающегоУстройства, "Типы запирающего устройства",
								"Тип запирающего устройства", "ТаблицаКодовЗапирающегоУстройства", БылиОшибки);
	ПроверитьЗаполнениеТаблицы(ТаблицаКодовТиповПлит, "Типы плит", "Тип плиты", "ТаблицаКодовТиповПлит", БылиОшибки);
	
	Если БылиОшибки И НЕ ЗакрытьФорму Тогда
		Отказ              = Истина;
		Модифицированность = Истина;
		
		ТекстВопроса = "В процессе записи обнаружены ошибки заполнения." + Символы.ПС + "Продолжить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаПроверитьЗаполнениеЗаписи", ЭтаФорма),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеЗаписи()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ПроверитьЗаполнениеЗаписи()".
Процедура ОбработатьРезультатВопросаПроверитьЗаполнениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытьФорму = Истина;
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаПроверитьЗаполнениеЗаписи()

&НаКлиенте
// Процедура проверяет заполнение указанной таблицы.
Процедура ПроверитьЗаполнениеТаблицы(Таблица, НаименованиеЗакладки, НаименованиеПоля, НаименованиеТаблицы, БылиОшибки)
	
	НомерСтроки = 1;
	Для Каждого ТекСтрока Из Таблица Цикл
		
		Если НаименованиеТаблицы = "ТаблицаКодовЗапирающегоУстройства"
		   И ТекСтрока.Наименование = 
		   		ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипЗапирающегоУстройства.Отсутствует") Тогда
			НомерСтроки = НомерСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.Код = 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле = НаименованиеТаблицы + "[" + Строка(НомерСтроки - 1) + "]" + ".Код";
			Сообщение.Текст = "Закладка """ + НаименованиеЗакладки + """: в строке №" + НомерСтроки
			                + " не заполнен код!";
			Сообщение.Сообщить();
			БылиОшибки = Истина;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Наименование) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле = НаименованиеТаблицы + "[" + Строка(НомерСтроки - 1) + "]" + ".Наименование";
			Сообщение.Текст = "Закладка """ + НаименованиеЗакладки + """: в строке №" + НомерСтроки
			                + " не заполнено поле """ + НаименованиеПоля + """!";
			Сообщение.Сообщить();
			БылиОшибки = Истина;
			
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Функция проверяет возможность заполнения таблицы.
Процедура ЗаполнениеТаблицыВозможно(Таблица, НаименованиеТаблицы)
	
	ДопПараметры = Новый Структура("Таблица, НаименованиеТаблицы", Таблица, НаименованиеТаблицы);
	
	Если Таблица.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнениеТаблицыВозможно", ЭтаФорма, ДопПараметры),
					   "Таблица " + НаименованиеТаблицы + " будет очищена!" + Символы.ПС + "Продолжить?",
					   РежимДиалогаВопрос.ДаНет,,
					   КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ОбработатьРезультатВопросаЗаполнениеТаблицыВозможно(КодВозвратаДиалога.Да, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВопросаЗаполнениеТаблицыВозможно(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НаименованиеТаблицы = ДополнительныеПараметры.НаименованиеТаблицы;
	Таблица             = ДополнительныеПараметры.Таблица;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Таблица.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НаименованиеТаблицы = "кодов организаций" Тогда
		ЗаполнитьТаблицуОрганизаций();
	ИначеЕсли НаименованиеТаблицы = "кодов районов" Тогда
		ЗаполнитьТаблицуКодов("КодыРайонов", "ТаблицаКодовРайонов");
	ИначеЕсли НаименованиеТаблицы = "кодов улиц" Тогда
		ЗаполнитьТаблицуКодов("КодыУлиц", "ТаблицаКодовУлиц");
	ИначеЕсли НаименованиеТаблицы = "кодов зданий" Тогда
		ЗаполнитьТаблицуЗданий();
	ИначеЕсли НаименованиеТаблицы = "кодов плательщиков" Тогда
		ОткрытьФормуВыбораОбъектов(Ложь);
	ИначеЕсли НаименованиеТаблицы = "кодов жилищных фондов" Тогда
		ЗаполнитьТаблицуКодовЖилищныхФондов();
	ИначеЕсли НаименованиеТаблицы = "кодов типов заселения" Тогда
		ЗаполнитьТаблицуКодовТиповЗаселения();
	ИначеЕсли НаименованиеТаблицы = "кодов документов, удостоверяющих личность" Тогда
		ЗаполнитьТаблицуКодовДокументовЛичности();
	ИначеЕсли НаименованиеТаблицы = "кодов услуг" Тогда
		ЗаполнитьТаблицуКодовУслуг();
	ИначеЕсли НаименованиеТаблицы = "кодов льгот" Тогда
		ЗаполнитьТаблицуКодовЛьгот();
	ИначеЕсли НаименованиеТаблицы = "типов запирающего устройства" Тогда
		ЗаполнитьТаблицуКодовТиповЗапирающегоУстройства();
	ИначеЕсли НаименованиеТаблицы = "типов плит" Тогда
		ЗаполнитьТаблицуКодовТиповПлит();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость элементов формы.
Процедура УстановитьВидимость()
	
	Если Настройки = "Настройки отчета о выпадающих доходах" Тогда
		
		Элементы.КодыЛьгот.Видимость                                 = Истина;
		Элементы.ДокументыЛичности.Видимость                         = Истина;
		Элементы.ТаблицаКодовУлицКод.Видимость                       = Истина;
		Элементы.ЖилищныеФонды.Видимость                             = Истина;
		Элементы.ТаблицаКодовУлицКодБТИ.Видимость                    = Ложь;
		Элементы.ТипыЗапирающегоУстройства.Видимость                 = Ложь;
		Элементы.ТипыПлит.Видимость                                  = Ложь;
		Элементы.ТаблицаКодовОрганизацийКод.Видимость                = Истина;
		Элементы.ТаблицаКодовОрганизацийКодНачисленийЗаЖКУ.Видимость = Ложь;
		Элементы.КодыЗданий.Видимость                                = Ложь;
		
	ИначеЕсли Настройки = "Настройки выгрузки начислений за ЖКУ" Тогда
		
		Элементы.КодыЛьгот.Видимость                                 = Ложь;
		Элементы.ДокументыЛичности.Видимость                         = Ложь;
		Элементы.ТаблицаКодовУлицКод.Видимость                       = Ложь;
		Элементы.ЖилищныеФонды.Видимость                             = Ложь;
		Элементы.ТаблицаКодовУлицКодБТИ.Видимость                    = Истина;
		Элементы.ТипыЗапирающегоУстройства.Видимость                 = Истина;
		Элементы.ТипыПлит.Видимость                                  = Истина;
		Элементы.ТаблицаКодовОрганизацийКод.Видимость                = Ложь;
		Элементы.ТаблицаКодовОрганизацийКодНачисленийЗаЖКУ.Видимость = Истина;
		Элементы.КодыЗданий.Видимость                                = Истина;
		
	Иначе
		
		Элементы.КодыЛьгот.Видимость                                 = Истина;
		Элементы.ДокументыЛичности.Видимость                         = Истина;
		Элементы.ТаблицаКодовУлицКод.Видимость                       = Истина;
		Элементы.ЖилищныеФонды.Видимость                             = Истина;
		Элементы.ТаблицаКодовУлицКодБТИ.Видимость                    = Истина;
		Элементы.ТипыЗапирающегоУстройства.Видимость                 = Истина;
		Элементы.ТипыПлит.Видимость                                  = Истина;
		Элементы.ТаблицаКодовОрганизацийКод.Видимость                = Истина;
		Элементы.ТаблицаКодовОрганизацийКодНачисленийЗаЖКУ.Видимость = Истина;
		Элементы.КодыЗданий.Видимость                                = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает адрес жильца.
Функция ПолучитьАдресЖильца(Проживающий)
	
	Возврат РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.ПолучитьАдресПроживающего(Проживающий);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораОбъектов(НовыеЭлементы)
	
	СтруктураПараметровОтбора = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	
	СтруктураПараметровОтбора.Вставить("ТипОбъекта",      "ЛицевыеСчета");
	СтруктураПараметровОтбора.Вставить("ТипЗначОбъекта",  "ЛицевыеСчета");
	СтруктураПараметровОтбора.Вставить("НачПериодЛС",      НачалоМесяца(Запись.Период));
	СтруктураПараметровОтбора.Вставить("КонПериодЛС",      Запись.Период);
	
	ДопПараметры = Новый Структура("НовыеЭлементы", НовыеЭлементы);
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма",
				 СтруктураПараметровОтбора,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьВыборОбъектовПолучитьСписокЛС", ЭтаФорма, ДопПараметры),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьФормуВыбораОбъектов()

&НаКлиенте
// Обработчик результата выбора объектов, вызванного в процедуре "ОткрытьФормуВыбораОбъектов()".
Процедура ОбработатьВыборОбъектовПолучитьСписокЛС(СписокЛС, ДополнительныеПараметры) Экспорт
	
	НовыеЭлементы = ДополнительныеПараметры.НовыеЭлементы;
	
	Если НовыеЭлементы И ЗначениеЗаполнено(СписокЛС) Тогда
		ДополнитьТаблицуКодовНовымиЭлементами("ТаблицаКодовПлательщиков", "", 2, СписокЛС);
	ИначеЕсли НЕ НовыеЭлементы Тогда
		ЗаполнитьТаблицуКодовПлательщиков(, СписокЛС);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборОбъектовПолучитьСписокЛС()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ТаблицаКодовОрганизаций           = 
		Новый ХранилищеЗначения(ДанныеФормыВЗначение(ТаблицаКодовОрганизаций, Тип("ТаблицаЗначений")));
	ТекущийОбъект.ТаблицаКодовРайонов               = 
		Новый ХранилищеЗначения(ДанныеФормыВЗначение(ТаблицаКодовРайонов, Тип("ТаблицаЗначений")));
	ТекущийОбъект.ТаблицаКодовУлиц                  = 
		Новый ХранилищеЗначения(ДанныеФормыВЗначение(ТаблицаКодовУлиц, Тип("ТаблицаЗначений")));
	ТекущийОбъект.ТаблицаКодовПлательщиков          = 
		Новый ХранилищеЗначения(ДанныеФормыВЗначение(ТаблицаКодовПлательщиков, Тип("ТаблицаЗначений")));
	ТекущийОбъект.ТаблицаКодовЖилищныхФондов        = 
		Новый ХранилищеЗначения(ДанныеФормыВЗначение(ТаблицаКодовЖилищныхФондов, Тип("ТаблицаЗначений")));
	ТекущийОбъект.ТаблицаКодовТиповЗаселения        = 
		Новый ХранилищеЗначения(ДанныеФормыВЗначение(ТаблицаКодовТиповЗаселения, Тип("ТаблицаЗначений")));
	ТекущийОбъект.ТаблицаКодовЛьгот                 = 
		Новый ХранилищеЗначения(ДанныеФормыВЗначение(ТаблицаКодовЛьгот, Тип("ТаблицаЗначений")));
	ТекущийОбъект.ТаблицаКодовДокументовЛичности    = 
		Новый ХранилищеЗначения(ДанныеФормыВЗначение(ТаблицаКодовДокументовЛичности, Тип("ТаблицаЗначений")));
	ТекущийОбъект.ТаблицаКодовУслуг                 = 
		Новый ХранилищеЗначения(ДанныеФормыВЗначение(ТаблицаКодовУслуг, Тип("ТаблицаЗначений")));
	ТекущийОбъект.ТаблицаКодовЗапирающегоУстройства = 
		Новый ХранилищеЗначения(ДанныеФормыВЗначение(ТаблицаКодовЗапирающегоУстройства, Тип("ТаблицаЗначений")));
	ТекущийОбъект.ТаблицаКодовТиповПлит             = 
		Новый ХранилищеЗначения(ДанныеФормыВЗначение(ТаблицаКодовТиповПлит, Тип("ТаблицаЗначений")));
	ТекущийОбъект.ТаблицаКодовЗданий                = 
		Новый ХранилищеЗначения(ДанныеФормыВЗначение(ТаблицаКодовЗданий, Тип("ТаблицаЗначений")));
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПроверитьЗаполнениеЗаписи(Отказ);
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьТаблицу(ТекущийОбъект.ТаблицаКодовОрганизаций.Получить(),           ТаблицаКодовОрганизаций);
	ЗаполнитьТаблицу(ТекущийОбъект.ТаблицаКодовРайонов.Получить(),               ТаблицаКодовРайонов);
	ЗаполнитьТаблицу(ТекущийОбъект.ТаблицаКодовУлиц.Получить(),                  ТаблицаКодовУлиц);
	ЗаполнитьТаблицу(ТекущийОбъект.ТаблицаКодовПлательщиков.Получить(),          ТаблицаКодовПлательщиков);
	ЗаполнитьТаблицу(ТекущийОбъект.ТаблицаКодовЖилищныхФондов.Получить(),        ТаблицаКодовЖилищныхФондов);
	ЗаполнитьТаблицу(ТекущийОбъект.ТаблицаКодовТиповЗаселения.Получить(),        ТаблицаКодовТиповЗаселения);
	ЗаполнитьТаблицу(ТекущийОбъект.ТаблицаКодовЛьгот.Получить(),                 ТаблицаКодовЛьгот);
	ЗаполнитьТаблицу(ТекущийОбъект.ТаблицаКодовДокументовЛичности.Получить(),    ТаблицаКодовДокументовЛичности);
	ЗаполнитьТаблицу(ТекущийОбъект.ТаблицаКодовУслуг.Получить(),                 ТаблицаКодовУслуг);
	ЗаполнитьТаблицу(ТекущийОбъект.ТаблицаКодовЗапирающегоУстройства.Получить(), ТаблицаКодовЗапирающегоУстройства);
	ЗаполнитьТаблицу(ТекущийОбъект.ТаблицаКодовТиповПлит.Получить(),             ТаблицаКодовТиповПлит);
	ЗаполнитьТаблицу(ТекущийОбъект.ТаблицаКодовЗданий.Получить(),                ТаблицаКодовЗданий);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Если ПустаяСтрока(Настройки) И ПустаяСтрока(Параметры.ПараметрНастройки) Тогда
		Настройки = "Все настройки";
	ИначеЕсли Не ПустаяСтрока(Параметры.ПараметрНастройки) Тогда
		Настройки = Параметры.ПараметрНастройки;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить все".
Процедура ЗаполнитьВсе(Команда)
	
	Если НЕ (ТаблицаКодовДокументовЛичности.Количество() = 0
	   И ТаблицаКодовЖилищныхФондов.Количество()         = 0
	   И ТаблицаКодовПлательщиков.Количество()           = 0
	   И ТаблицаКодовРайонов.Количество()                = 0
	   И ТаблицаКодовТиповЗаселения.Количество()         = 0
	   И ТаблицаКодовУлиц.Количество()                   = 0
	   И ТаблицаКодовУслуг.Количество()                  = 0
	   И ТаблицаКодовЗданий.Количество()                 = 0
	   И ТаблицаКодовЗапирающегоУстройства.Количество()  = 0
	   И ТаблицаКодовТиповПлит.Количество()              = 0) Тогда
		
		ТекстВопроса = "Заполнить таблицы соответствия настройками по умолчанию?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнитьВсе", ЭтаФорма),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВсеПродолжение();
	
КонецПроцедуры // ЗаполнитьВсе()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ЗаполнитьВсе()".
Процедура ОбработатьРезультатВопросаЗаполнитьВсе(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьВсеПродолжение();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаЗаполнитьВсе()

&НаКлиенте
// Продолжение процедуры "ЗаполнитьВсе()".
Процедура ЗаполнитьВсеПродолжение()
	
	Состояние("Заполнение таблицы организаций...");
	ЗаполнитьТаблицуОрганизаций();
	Состояние("Заполнение таблицы районов...");
	ЗаполнитьТаблицуКодов("КодыРайонов", "ТаблицаКодовРайонов");
	Состояние("Заполнение таблицы улиц...");
	ЗаполнитьТаблицуКодов("КодыУлиц",   "ТаблицаКодовУлиц");
	Состояние("Заполнение таблицы зданий...");
	ЗаполнитьТаблицуЗданий();
	ТаблицаКодовПлательщиков.Очистить();
	Состояние("Заполнение таблицы жилищных фондов...");
	ЗаполнитьТаблицуКодовЖилищныхФондов();
	Состояние("Заполнение таблицы типов заселения...");
	ЗаполнитьТаблицуКодовТиповЗаселения();
	Состояние("Заполнение таблицы кодов льгот...");
	ЗаполнитьТаблицуКодовЛьгот();
	Состояние("Заполнение таблицы документов личности...");
	ЗаполнитьТаблицуКодовДокументовЛичности();
	Состояние("Заполнение таблицы услуг...");
	ЗаполнитьТаблицуКодовУслуг();
	Состояние("Заполнение таблицы типов запирающего устройства...");
	ЗаполнитьТаблицуКодовТиповЗапирающегоУстройства();
	Состояние("Заполнение таблицы типов плит...");
	ЗаполнитьТаблицуКодовТиповПлит();
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить" табличной части "Организации".
Процедура ЗаполнитьКодыОрганизаций(Команда)
	
	ДополнитьТаблицуКодовНовымиЭлементами("ТаблицаКодовОрганизаций", "", 6);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить по умолчанию" табличной части "Организации".
Процедура ЗаполнитьКодыОрганизацийПоУмолчанию(Команда)
	
	ЗаполнениеТаблицыВозможно(ТаблицаКодовОрганизаций, "кодов организаций");
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить" табличной части "Коды райнов".
Процедура ЗаполнитьКодыРайонов(Команда)
	
	ДополнитьТаблицуКодовНовымиЭлементами("ТаблицаКодовРайонов", "КодыРайонов", 1);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить по умолчанию" табличной части "Коды райнов".
Процедура ЗаполнитьКодыРайоновПоУмолчанию(Команда)
	
	ЗаполнениеТаблицыВозможно(ТаблицаКодовРайонов, "кодов районов");
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить" табличной части "Коды улиц".
Процедура ЗаполнитьКодыУлиц(Команда)
	
	ДополнитьТаблицуКодовНовымиЭлементами("ТаблицаКодовУлиц", "КодыУлиц", 1);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить по умолчанию" табличной части "Коды улиц".
Процедура ЗаполнитьКодыУлицПоУмолчанию(Команда)
	
	ЗаполнениеТаблицыВозможно(ТаблицаКодовУлиц, "кодов улиц");
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить" табличной части "Здания".
Процедура ЗаполнитьКодыЗданий(Команда)
	
	ДополнитьТаблицуКодовНовымиЭлементами("ТаблицаКодовЗданий", "", 11);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить по умолчанию" табличной части "Здания".
Процедура ЗаполнитьКодыЗданийПоУмолчанию(Команда)
	
	ЗаполнениеТаблицыВозможно(ТаблицаКодовЗданий, "кодов зданий");
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить" табличной части "Коды плательщиков".
Процедура ЗаполнитьКодыПлательщиков(Команда)
	
	ОткрытьФормуВыбораОбъектов(Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить по умолчанию" табличной части "Коды плательщиков".
Процедура ЗаполнитьКодыПлательщиковПоУмолчанию(Команда)
	
	ЗаполнениеТаблицыВозможно(ТаблицаКодовПлательщиков, "кодов плательщиков");
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить" табличной части "Коды жилищных фондов".
Процедура ЗаполнитьКодыЖилищныхФондов(Команда)
	
	ДополнитьТаблицуКодовНовымиЭлементами("ТаблицаКодовЖилищныхФондов", "", 3);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить по умолчанию" табличной части "Коды жилищных фондов".
Процедура ЗаполнитьКодыЖилищныхФондовПоУмолчанию(Команда)
	
	ЗаполнениеТаблицыВозможно(ТаблицаКодовЖилищныхФондов, "кодов жилищных фондов");
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить" табличной части "Коды типов заселения".
Процедура ЗаполнитьКодыТиповЗаселения(Команда)
	
	ДополнитьТаблицуКодовНовымиЭлементами("ТаблицаКодовТиповЗаселения", "", 4);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить по умолчанию" табличной части "Коды типов заселения".
Процедура ЗаполнитьКодыТиповЗаселенияПоУмолчанию(Команда)
	
	ЗаполнениеТаблицыВозможно(ТаблицаКодовТиповЗаселения, "кодов типов заселения");
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить" табличной части "Коды документов личности".
Процедура ЗаполнитьКодыДокументовЛичности(Команда)
	
	ДополнитьТаблицуКодовНовымиЭлементами("ТаблицаКодовДокументовЛичности", "", 5);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить по умолчанию" табличной части "Коды документов личности".
Процедура ЗаполнитьКодыДокументовЛичностиПоУмолчанию(Команда)
	
	ЗаполнениеТаблицыВозможно(ТаблицаКодовДокументовЛичности, "кодов документов, удостоверяющих личность");
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить" табличной части "Коды услуг".
Процедура ЗаполнитьКодыУслуг(Команда)
	
	ДополнитьТаблицуКодовНовымиЭлементами("ТаблицаКодовУслуг", "", 7);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить по умолчанию" табличной части "Коды услуг".
Процедура ЗаполнитьКодыУслугПоУмолчанию(Команда)
	
	ЗаполнениеТаблицыВозможно(ТаблицаКодовУслуг, "кодов услуг");
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить" табличной части "Коды льгот".
Процедура ЗаполнитьКодыЛьгот(Команда)
	
	ДополнитьТаблицуКодовНовымиЭлементами("ТаблицаКодовЛьгот", "", 8);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить по умолчанию" табличной части "Коды льгот".
Процедура ЗаполнитьКодыЛьготПоУмолчанию(Команда)
	
	ЗаполнениеТаблицыВозможно(ТаблицаКодовЛьгот, "кодов льгот");
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить" табличной части "Коды Запирающего Устройства".
Процедура ДополнитьКодыЗапирающегоУстройства(Команда)
	
	ДополнитьТаблицуКодовНовымиЭлементами("ТаблицаКодовЗапирающегоУстройства", "", 9);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить по умолчанию" табличной части "Коды Запирающего Устройства".
Процедура ЗаполнитьКодыЗапирающегоУстройстваПоУмолчанию(Команда)
	
	ЗаполнениеТаблицыВозможно(ТаблицаКодовЗапирающегоУстройства, "типов запирающего устройства");
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить" табличной части "Коды типов плит".
Процедура ДополнитьКодыТиповПлит(Команда)
	
	ДополнитьТаблицуКодовНовымиЭлементами("ТаблицаКодовТиповПлит", "", 10);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик нажатия кнопки "Заполнить по умолчанию" табличной части "Коды типов плит".
Процедура ЗаполнитьКодыТиповПлитПоУмолчанию(Команда)
	
	ЗаполнениеТаблицыВозможно(ТаблицаКодовТиповПлит, "типов плит");
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриИзменении" поля ввода "Настройки".
Процедура НастройкиПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриИзменении" поля ввода "ТаблицаКодовПлательщиковОтветственныйСобственник".
Процедура ТаблицаКодовПлательщиковОтветственныйСобственникПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаКодовПлательщиков.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекДанные.Наименование) Тогда
			ТекДанные.Адрес = ПолучитьАдресЖильца(ТекДанные.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
