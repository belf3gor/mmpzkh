
#Область СлужебныеПроцедурыИФункции

// Функция получает данные по организациям.
//
// Возвращаемое значение:
//  Таблица значений - таблица с организациями.
//
Функция ПолучитьИнформациюОбОрганизациях() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Наименование,
	|	Организации.Код,
	|	Организации.Код КАК КодНачисленийЗаЖКУ
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОрганизаций;
	
КонецФункции

// Функция получает данные по зданиям.
//
// Возвращаемое значение:
//  Таблица значений - таблица с зданиями.
//
Функция ПолучитьИнформациюОЗданиях() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Здания.Ссылка КАК Наименование
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	НЕ КВП_Здания.ПометкаУдаления
	|	И НЕ КВП_Здания.ЭтоГруппа";
	
	ТаблицаЗданий = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗданий;
	
КонецФункции

// Функция получает данные по плательщикам.
//
// Возвращаемое значение:
//  Таблица значений - таблица с лицевыми счетами.
//
Функция ПолучитьИнформациюОПлательщиках(Дата, СписокЛС = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_НазначенныеЛьготы.Проживающий КАК Наименование,
	|	КВП_НазначенныеЛьготы.Проживающий.Владелец КАК ЛицевойСчет,
	|	КВП_НазначенныеЛьготы.Проживающий.Владелец.Адрес.Код КАК Квартира,
	|	КВП_НазначенныеЛьготы.Проживающий.Владелец.Адрес.Суффикс КАК Суффикс,
	|	КВП_НазначенныеЛьготы.Проживающий.Владелец.Адрес.Владелец КАК Здание
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&Дата,
	|			&Условие1
	|				И ДатаИзменения <= &Дата) КАК КВП_НазначенныеЛьготы
	|ГДЕ
	|	КВП_НазначенныеЛьготы.Действие
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_ОтветственныйСобственник.ОтветственныйВладелец,
	|	УПЖКХ_ОтветственныйСобственник.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственник.ЛицевойСчет.Адрес.Код,
	|	УПЖКХ_ОтветственныйСобственник.ЛицевойСчет.Адрес.Суффикс,
	|	УПЖКХ_ОтветственныйСобственник.ЛицевойСчет.Адрес.Владелец
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, &Условие2) КАК УПЖКХ_ОтветственныйСобственник";
	
	Если ЗначениеЗаполнено(СписокЛС) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие1", "Проживающий.Владелец В (&СписокЛС)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие2", "ЛицевойСчет В (&СписокЛС)");
		Запрос.УстановитьПараметр("СписокЛС", СписокЛС);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие1", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие2", "ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата",     Дата);
	
	ТаблицаЛицевыхСчетов = Запрос.Выполнить().Выгрузить();
	ТаблицаЛицевыхСчетов.Колонки.Добавить("Код",   Новый ОписаниеТипов("Число"));
	ТаблицаЛицевыхСчетов.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
	
	Если ТаблицаЛицевыхСчетов.Количество() > 0 Тогда
		
		Для Каждого ТекЛС Из ТаблицаЛицевыхСчетов Цикл
			
			ТекЛС.Код = ВыбратьТолькоЦифры(Строка(ТекЛС.ЛицевойСчет));
			ТекЛС.Адрес = "" + ТекЛС.Здание + ", кв. " + ТекЛС.Квартира + ТекЛС.Суффикс;
			
		КонецЦикла;
		
		ТаблицаЛицевыхСчетов.Сортировать("Код");
		
	КонецЕсли;
	
	Возврат ТаблицаЛицевыхСчетов;
	
КонецФункции

// Функция получает данные по услугам.
//
// Возвращаемое значение:
//  Таблица значений - таблица с услугами.
//
//Функция ПолучитьИнформациюОУслугах() Экспорт
Функция ПолучитьИнформациюОУслугах(ПериодЗапроса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втАктуальныеУслуги
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	НЕ КВП_Услуги.ПометкаУдаления
	|	И НЕ КВП_Услуги.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ТарифыСрезПоследних.Услуга КАК Услуга,
	|	КВП_ТарифыСрезПоследних.ВидТарифа КАК ВидТарифа
	|ПОМЕСТИТЬ втУслугиСДействующимиНочнымиИПиковымиВидамиТарифов
	|ИЗ
	|	РегистрСведений.КВП_Тарифы.СрезПоследних(
	|			&ДатаСреза,
	|			Услуга В
	|					(ВЫБРАТЬ
	|						втАктуальныеУслуги.Ссылка КАК Ссылка
	|					ИЗ
	|						втАктуальныеУслуги КАК втАктуальныеУслуги)
	|				И ВидТарифа В (ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной), ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый))) КАК КВП_ТарифыСрезПоследних
	|ГДЕ
	|	КВП_ТарифыСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ТарифыСрезПоследних.Услуга,
	|	КВП_ТарифыСрезПоследних.ВидТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втУслугиСДействующимиНочнымиИПиковымиВидамиТарифов.Услуга КАК Наименование,
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной) КАК ВидТарифа
	|ИЗ
	|	втУслугиСДействующимиНочнымиИПиковымиВидамиТарифов КАК втУслугиСДействующимиНочнымиИПиковымиВидамиТарифов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втУслугиСДействующимиНочнымиИПиковымиВидамиТарифов.Услуга,
	|	втУслугиСДействующимиНочнымиИПиковымиВидамиТарифов.ВидТарифа
	|ИЗ
	|	втУслугиСДействующимиНочнымиИПиковымиВидамиТарифов КАК втУслугиСДействующимиНочнымиИПиковымиВидамиТарифов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втАктуальныеУслуги.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|ИЗ
	|	втАктуальныеУслуги КАК втАктуальныеУслуги
	|ГДЕ
	|	НЕ втАктуальныеУслуги.Ссылка В
	|				(ВЫБРАТЬ
	|					втУслугиСДействующимиНочнымиИПиковымиВидамиТарифов.Услуга КАК Услуга
	|				ИЗ
	|					втУслугиСДействующимиНочнымиИПиковымиВидамиТарифов КАК втУслугиСДействующимиНочнымиИПиковымиВидамиТарифов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	ВидТарифа";
	
	Запрос.Параметры.Вставить("ДатаСреза", ПериодЗапроса);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Выделяет из исходной строки только цифры.
Функция ВыбратьТолькоЦифры(Знач ИсхСтрока)
	
	СписокЦифр = Новый СписокЗначений();
	СписокЦифр.Добавить("0");
	СписокЦифр.Добавить("1");
	СписокЦифр.Добавить("2");
	СписокЦифр.Добавить("3");
	СписокЦифр.Добавить("4");
	СписокЦифр.Добавить("5");
	СписокЦифр.Добавить("6");
	СписокЦифр.Добавить("7");
	СписокЦифр.Добавить("8");
	СписокЦифр.Добавить("9");
	
	ИсхСтрока     = СокрЛП(ИсхСтрока);
	ВсегоСимволов = СтрДлина(ИсхСтрока);
	НоваяСтрока   = "";
	Для Сч = 1 По ВсегоСимволов Цикл
		Если СписокЦифр.НайтиПоЗначению(Сред(ИсхСтрока, Сч, 1)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НоваяСтрока + Сред(ИсхСтрока, Сч, 1);
	КонецЦикла;
	
	Если ПустаяСтрока(НоваяСтрока) Тогда
		НоваяСтрока = "0";
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции // ВыбратьТолькоЦифры()

// Функция получает данные по льготам.
//
// Возвращаемое значение:
//  Таблица значений - таблица с льготами.
//
Функция ПолучитьИнформациюОЛьготах() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛьготныеКатегории.Ссылка КАК Наименование,
	|	КВП_ЛьготныеКатегории.Код
	|ИЗ
	|	Справочник.КВП_ЛьготныеКатегории КАК КВП_ЛьготныеКатегории
	|ГДЕ
	|	НЕ КВП_ЛьготныеКатегории.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает адрес проживающего.
//
// Параметры:
//  Проживающий - СправочникСсылка, ссылка на справочник жильцов.
//
// Возвращаемое значение:
//  Таблица значений - таблица с услугами.
//
Функция ПолучитьАдресПроживающего(Проживающий) Экспорт
	
	Возврат "" + Проживающий.Владелец.Адрес.Владелец + ", кв. " + Проживающий.Владелец.Адрес.Код
	           + Проживающий.Владелец.Адрес.Суффикс;
	
		   КонецФункции

// Функция возвращает признак действия настройки "ОбрезатьПрефиксЛС".
//
// Параметры:
//  Дата - Дата, дата по состоянию на которую определяется настройка.
//
// Возвращаемое значение:
//  Булево - признак действия настройки "ОбрезатьПрефиксЛС".
//
Функция ОпределитьДействиеНастройки_ОбрезатьПрефиксЛС(Дата) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних.ОбрезатьПрефиксЛС КАК ОбрезатьПрефиксЛС
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.СрезПоследних(&Дата, ) КАК УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбрезатьПрефиксЛС = Ложь;
	Если Выборка.Следующий() Тогда
		ОбрезатьПрефиксЛС = Выборка.ОбрезатьПрефиксЛС;
	КонецЕсли;
	
	Возврат ОбрезатьПрефиксЛС;
	
КонецФункции // ОпределитьДействиеНастройки_ОбрезатьПрефиксЛС()

// Функция получает код организации для записи в выходной файл для ГЦЖС.
//
// Параметры:
//  НаДату						 - Дата		 - Дата, на которую получаются данные.
//  Организация					 - Ссылка	 - Ссылка на организацию.
//  ЭтоОтчетОНачисленияхЗаЖКУ	 - Булево	 - Признак, что данные нужны для отчета о начислениях за ЖКУ.
// 
// Возвращаемое значение:
//  Строка - код оганизации для выгрузки.
//
Функция ПолучитьКодОрганизации(Период, Организация, ЭтоОтчетОНачисленияхЗаЖКУ) Экспорт
	
	Код = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних.ТаблицаКодовОрганизаций
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.СрезПоследних(&Период, ) КАК УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних";
	
	Запрос.УстановитьПараметр("Период", Период);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		КодыОрганизаций = Выборка.ТаблицаКодовОрганизаций.Получить();
		
		Если ЭтоОтчетОНачисленияхЗаЖКУ Тогда
			КодыОрганизаций.Колонки.Удалить("Код");
			КодыОрганизаций.Колонки.КодНачисленийЗаЖКУ.Имя = "Код";
		КонецЕсли;
		
		РезультатПоиска = КодыОрганизаций.Найти(Организация, "Наименование");
		
		Если НЕ РезультатПоиска = Неопределено Тогда
			Код = РезультатПоиска.Код;
		КонецЕсли;
		
	КонецЕсли;
	
	// Форматы кода
	Если ЭтоОтчетОНачисленияхЗаЖКУ Тогда
		Возврат Формат(Код, "ЧЦ=5; ЧН=00000; ЧВН=; ЧГ=");
	Иначе
		Возврат Формат(Код, "ЧЦ=7; ЧН=0000000; ЧВН=; ЧГ=");
	КонецЕсли;

КонецФункции

// Функция формирует пустую таблицу кодов.
//
// Параметры:
//  ТипДанныхКолонкиНаименование - Строка 	 - Тип данных колонки.
//  ЭтоТаблицаКодовУслуг		 - Булево	 - Признак того, что это таблица кодов для коммунальных услуг.
// 
// Возвращаемое значение:
//  Таблица значений - таблица с колонками для заполнения.
//
Функция СформироватьПустуюТаблицуКодов(ТипДанныхКолонкиНаименование)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Код", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Наименование", ТипДанныхКолонкиНаименование);
	
	Возврат Таблица;
	
КонецФункции

// Функция формирует таблицы кодов.
//
// Параметры:
//  НаДату - Дата - Дата, по стостоянию на которую получаем коды.
//  ЭтоОтчетОНачисленияхЗаЖКУ - Булево - Признак, что настройки получаются для отчета о начислениях за ЖКУ.
// 
// Возвращаемое значение:
//  Структура - структура с таблицами кодов.
//
Функция СформироватьТаблицыКодов(Период, ЭтоОтчетОНачисленияхЗаЖКУ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних.ТаблицаКодовРайонов КАК ТаблицаКодовРайонов,
	|	УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних.ТаблицаКодовУлиц КАК ТаблицаКодовУлиц,
	|	УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних.ТаблицаКодовПлательщиков КАК ТаблицаКодовПлательщиков,
	|	УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних.ТаблицаКодовЖилищныхФондов КАК ТаблицаКодовЖилищныхФондов,
	|	УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних.ТаблицаКодовТиповЗаселения КАК ТаблицаКодовТиповЗаселения,
	|	УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних.ТаблицаКодовДокументовЛичности КАК ТаблицаКодовДокументовЛичности,
	|	УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних.ТаблицаКодовУслуг КАК ТаблицаКодовУслуг,
	|	УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних.ТаблицаКодовОрганизаций КАК ТаблицаКодовОрганизаций,
	|	УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних.ТаблицаКодовЛьгот КАК ТаблицаКодовЛьгот,
	|	УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних.ТаблицаКодовЗданий КАК ТаблицаКодовЗданий,
	|	УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних.ТаблицаКодовЗапирающегоУстройства КАК ТаблицаКодовЗапирающегоУстройства,
	|	УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних.ТаблицаКодовТиповПлит КАК ТаблицаКодовТиповПлит
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.СрезПоследних(&Период, ) КАК УПЖКХ_НастройкиВыгрузкиВГЦЖССрезПоследних";
	
	Запрос.УстановитьПараметр("Период", Период);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		КодыОрганизаций        = Выборка.ТаблицаКодовОрганизаций.Получить();
		Если КодыОрганизаций = Неопределено Тогда
			КодыОрганизаций        = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("СправочникСсылка.Организации"));
			КодыОрганизаций.Колонки.Добавить("КодНачисленийЗаЖКУ", Новый ОписаниеТипов("Число"));
		КонецЕсли;
		
		КодыРайонов            = Выборка.ТаблицаКодовРайонов.Получить();
		Если КодыРайонов = Неопределено Тогда
			КодыРайонов            = СформироватьПустуюТаблицуКодов(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(100));
		КонецЕсли;
		
		КодыУлиц               = Выборка.ТаблицаКодовУлиц.Получить();
		Если КодыУлиц = Неопределено Тогда
			КодыУлиц               = СформироватьПустуюТаблицуКодов(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(100));
			КодыУлиц.Колонки.Добавить("КодБТИ", Новый ОписаниеТипов("Число"));
		КонецЕсли;
		
		КодыПлательщиков       = Выборка.ТаблицаКодовПлательщиков.Получить();
		Если КодыПлательщиков = Неопределено Тогда
			КодыПлательщиков       = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.УПЖКХ_Жильцы"));
			КодыПлательщиков.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
			КодыПлательщиков.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		КодыЖилищныхФондов     = Выборка.ТаблицаКодовЖилищныхФондов.Получить();
		Если КодыЖилищныхФондов = Неопределено Тогда
			КодыЖилищныхФондов     = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ТипыЖилогоФонда"));
		КонецЕсли;
		
		КодыТиповЗаселения     = Выборка.ТаблицаКодовТиповЗаселения.Получить();
		Если КодыТиповЗаселения = Неопределено Тогда
			КодыТиповЗаселения     = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("ПеречислениеСсылка.КВП_КатегорииКвартир"));
		КонецЕсли;
		
		КодыДокументовЛичности = Выборка.ТаблицаКодовДокументовЛичности.Получить();
		Если КодыДокументовЛичности = Неопределено Тогда
			КодыДокументовЛичности = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовФизическихЛиц"));
		КонецЕсли;
		
		КодыУслуг              = Выборка.ТаблицаКодовУслуг.Получить();
		Если КодыУслуг = Неопределено Тогда
			КодыУслуг              = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
			// Добавляем колонку с видом тарифа для таблицы с кодами услуг
			КодыУслуг.Колонки.Добавить("ВидТарифа", Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
		КонецЕсли;
		
		//Добавлено для старых настроек, у которых нет колонки с видом тарифа.
		Если КодыУслуг.Колонки.Найти("ВидТарифа") = Неопределено Тогда
			КодыУслуг.Колонки.Добавить("ВидТарифа", Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
		КонецЕсли;
		
		КодыЛьгот                 = Выборка.ТаблицаКодовЛьгот.Получить();
		Если КодыЛьгот = Неопределено Тогда
			КодыЛьгот              = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("СправочникСсылка.КВП_ЛьготныеКатегории"));
		КонецЕсли;
		
		Если ЭтоОтчетОНачисленияхЗаЖКУ Тогда
			
			КодыЗданий                = Выборка.ТаблицаКодовЗданий.Получить();
			Если КодыЗданий = Неопределено Тогда
				КодыЗданий                = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("СправочникСсылка.КВП_Здания"));
			КонецЕсли;
			
			КодыЗапирающегоУстройства = Выборка.ТаблицаКодовЗапирающегоУстройства.Получить();
			Если КодыЗапирающегоУстройства = Неопределено Тогда
				КодыЗапирающегоУстройства = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_ТипЗапирающегоУстройства"));
			КонецЕсли;
			
			КодыТиповПлит             = Выборка.ТаблицаКодовТиповПлит.Получить();
			Если КодыТиповПлит = Неопределено Тогда
				КодыТиповПлит             = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("ПеречислениеСсылка.КВП_Плита"));
			КонецЕсли;
			
			// В таблице кодов улиц нужна колонка Коды БТИ, колонка коды не нужна.
			КодыУлиц.Колонки.Удалить("Код");
			КодыУлиц.Колонки.КодБТИ.Имя = "Код";
		
			// В таблице кодов организаций нужна колонка "КодНачисленийЗаЖКУ", колонка коды не нужна.
			КодыОрганизаций.Колонки.Удалить("Код");
			КодыОрганизаций.Колонки.КодНачисленийЗаЖКУ.Имя = "Код";
			
		КонецЕсли;
		
	Иначе
		
		КодыОрганизаций        = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("СправочникСсылка.Организации"));
		КодыРайонов            = СформироватьПустуюТаблицуКодов(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(100));
		КодыУлиц               = СформироватьПустуюТаблицуКодов(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(100));
		КодыПлательщиков       = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.УПЖКХ_Жильцы"));
		КодыПлательщиков.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
		КодыПлательщиков.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
		КодыЖилищныхФондов     = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ТипыЖилогоФонда"));
		КодыТиповЗаселения     = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("ПеречислениеСсылка.КВП_КатегорииКвартир"));
		КодыДокументовЛичности = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовФизическихЛиц"));
		КодыУслуг              = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		// Добавляем колонку с видом тарифа для таблицы с кодами услуг
		КодыУслуг.Колонки.Добавить("ВидТарифа", Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
		
		КодыЛьгот              = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("СправочникСсылка.КВП_ЛьготныеКатегории"));
		
		Если ЭтоОтчетОНачисленияхЗаЖКУ Тогда
			КодыЗданий                = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("СправочникСсылка.КВП_Здания"));
			КодыЗапирающегоУстройства = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_ТипЗапирающегоУстройства"));
			КодыТиповПлит             = СформироватьПустуюТаблицуКодов(Новый ОписаниеТипов("ПеречислениеСсылка.КВП_Плита"));
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураТаблиц = Новый Структура;
	
	СтруктураТаблиц.Вставить("КодыОрганизаций",        КодыОрганизаций);
	СтруктураТаблиц.Вставить("КодыРайонов",            КодыРайонов);
	СтруктураТаблиц.Вставить("КодыУлиц",               КодыУлиц);
	СтруктураТаблиц.Вставить("КодыПлательщиков",       КодыПлательщиков);
	СтруктураТаблиц.Вставить("КодыЖилищныхФондов",     КодыЖилищныхФондов);
	СтруктураТаблиц.Вставить("КодыТиповЗаселения",     КодыТиповЗаселения);
	СтруктураТаблиц.Вставить("КодыДокументовЛичности", КодыДокументовЛичности);
	СтруктураТаблиц.Вставить("КодыУслуг",              КодыУслуг);
	СтруктураТаблиц.Вставить("КодыЛьгот",              КодыЛьгот);
	
	Если ЭтоОтчетОНачисленияхЗаЖКУ Тогда
		
		СтруктураТаблиц.Вставить("КодыЗданий",                КодыЗданий);
		СтруктураТаблиц.Вставить("КодыЗапирающегоУстройства", КодыЗапирающегоУстройства);
		СтруктураТаблиц.Вставить("КодыТиповПлит",             КодыТиповПлит);
		
	КонецЕсли;
	
	Возврат СтруктураТаблиц;
	
КонецФункции

#КонецОбласти