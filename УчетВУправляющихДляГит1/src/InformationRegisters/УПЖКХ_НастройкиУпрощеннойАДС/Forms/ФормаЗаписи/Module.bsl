
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЕ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
// Процедура устанавливает видимость элементов формы.
//
Процедура УправлениеФормой()
	
	Элементы.АдресЭлПочты.Доступность              = Запись.ПриниматьСообщенияОтЖильцовНаЭлПочту;
	Элементы.ТемыЗаявок.Доступность                = Запись.ПриниматьСообщенияОтЖильцовНаЭлПочту;
	Элементы.ЖилецМожетУказатьСвоюТему.Доступность = Запись.ПриниматьСообщенияОтЖильцовНаЭлПочту;
	
КонецПроцедуры

&НаСервере
// Функция получает длину строки с темами с учетом разделителей для выгрузки.
//
Функция ПолучитьДлинуСтрокиТемЗаявок()
	
	Если ТемыЗаявок.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокаТемСРазделителями = СтрСоединить(ТемыЗаявок.ВыгрузитьЗначения(), "|");
	
	Возврат СтрДлина(СтрокаТемСРазделителями);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокДоступныхТем = Новый Массив;
	СписокДоступныхТем.Добавить("Заявка на ремонт");
	СписокДоступныхТем.Добавить("Авария");
	СписокДоступныхТем.Добавить("Претензия");
	СписокДоступныхТем.Добавить("Отзыв");
	
	ЗначениеЗапись = РеквизитФормыВЗначение("Запись");
	ТемыЗаявокИзХранилища = ЗначениеЗапись.ТемыЗаявок.Получить();
	
	Если ТемыЗаявокИзХранилища = Неопределено Тогда
		ТемыЗаявок.ЗагрузитьЗначения(СписокДоступныхТем);
	Иначе
		ТемыЗаявок.ЗагрузитьЗначения(ТемыЗаявокИзХранилища);
	КонецЕсли;
	
	Элементы.ТемыЗаявокЗначение.СписокВыбора.ЗагрузитьЗначения(СписокДоступныхТем);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПередЗаписьюНаСервере" формы.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Проверка указания организации
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Организация) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнено поле Организация.",,"Организация","Запись.Организация", Отказ);
	КонецЕсли;
	
	//Проверка указания адрес эл. почты
	Если ТекущийОбъект.ПриниматьСообщенияОтЖильцовНаЭлПочту И НЕ ЗначениеЗаполнено(ТекущийОбъект.АдресЭлПочты) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнено поле Адрес эл. почты.",,"АдресЭлПочты","Запись.АдресЭлПочты", Отказ);
	КонецЕсли;
	
	//Проверка указания тем заявок
	Если ТекущийОбъект.ПриниматьСообщенияОтЖильцовНаЭлПочту И ТемыЗаявок.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнены темы заявок",,"ТемыЗаявок","ТемыЗаявок", Отказ);
	КонецЕсли;
	
	//Проверка суммарной длины тем
	Если ТемыЗаявок.Количество() > 0 И ПолучитьДлинуСтрокиТемЗаявок() > 512 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Суммарная длина всех тем заявок с учетом разделителей превышает 512 символов",,"ТемыЗаявок","ТемыЗаявок", Отказ);
	КонецЕсли;
	
	//Проверка правильности заполнения таблицы с темам
	Если ТекущийОбъект.ПриниматьСообщенияОтЖильцовНаЭлПочту
		 И ТемыЗаявок.Количество() > 0 Тогда
		
		ТаблицаТемЗаявок = Новый ТаблицаЗначений;
		ТаблицаТемЗаявок.Колонки.Добавить("ТемаЗаявки");
		ТаблицаТемЗаявок.Колонки.Добавить("Количество");
		
		Для Каждого ТемаЗаявки Из ТемыЗаявок Цикл
			
			НоваяСтрока = ТаблицаТемЗаявок.Добавить();
			НоваяСтрока.ТемаЗаявки = СокрЛП(ТемаЗаявки.Значение);
			
		КонецЦикла;
		
		//Проверка на пустые темы
		СтрокиСПустойТемой = ТаблицаТемЗаявок.НайтиСтроки(Новый Структура("ТемаЗаявки", ""));
		
		Если СтрокиСПустойТемой.Количество() > 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В таблице есть строки с пустой темой.",,"ТемыЗаявок","ТемыЗаявок", Отказ);
			
			Для Каждого СтрокаСПустойТемой Из СтрокиСПустойТемой Цикл
				
				ТаблицаТемЗаявок.Удалить(СтрокаСПустойТемой);
				
			КонецЦикла;
			
		КонецЕсли;
		
		//Проверка на одинаковые темы
		ТаблицаТемЗаявок.ЗаполнитьЗначения(1,"Количество");
		
		ТаблицаТемЗаявок.Свернуть("ТемаЗаявки", "Количество");
		
		ТаблицаТемЗаявок.Сортировать("Количество УБЫВ");
		
		Если ТаблицаТемЗаявок[0].Количество > 1 Тогда
			
			ПовторяющиесяТемы = "";
			
			Для Каждого СтрокаТаблицыТемЗаявок Из ТаблицаТемЗаявок Цикл
				
				Если СтрокаТаблицыТемЗаявок.Количество = 1 Тогда
					Прервать;
				КонецЕсли;
				
				ПовторяющиесяТемы = ?(ПовторяющиесяТемы = "", "", ПовторяющиесяТемы + ", ") + СтрокаТаблицыТемЗаявок.ТемаЗаявки;
				
			КонецЦикла;
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В таблице есть одинаковые темы.",,"ТемыЗаявок","ТемыЗаявок", Отказ);
			Сообщить("Повторяющиеся темы: " + ПовторяющиесяТемы);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ТекущийОбъект.ТемыЗаявок = Новый ХранилищеЗначения(ТемыЗаявок.ВыгрузитьЗначения());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ИзменениеНастроекУпрощеннойАДС");
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля флажка "ПриниматьСообщенияОтЖильцовНаЭлПочту".
//
Процедура ПриниматьСообщенияОтЖильцовНаЭлПочтуПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

#КонецОбласти
