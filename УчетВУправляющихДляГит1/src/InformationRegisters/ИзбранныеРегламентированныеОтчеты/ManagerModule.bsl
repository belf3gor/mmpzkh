
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура перезаполняет полностью список отчетов при интерактивной записи списка налогов и отчетов
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на элемент справочника Организации.
//  ДеревоЗадач   - дерево значений с колонками:
//   *Наименование                    - Строка - наименование налога или отчета;
//   *Включен                         - Булево - признак того, что отчет отображается в списке задач.
//   *ДетальнаяНастройкаПредставление - Строка - текстовое представдение детальной настройки.
//   *Ссылка                           - ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства,
//                                       ПеречислениеСсылка.ВидыПодакцизныхТоваров,
//                                       СправочникСсылка.ЗадачиБухгалтера,
//                                       СправочникСсылка.РегистрацииВНалоговомОргане,
//                                       СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов.
//   *ВключаетсяПользователем          - Булево - признак того, что отчет включается в список задач вручную.
//   *ЕстьДетальнаяНастройка           - Булево - призна наличия детальной настройки отчета.
//   *РегистрацияВНалоговомОргане      - СправочникСсылка.РегистрацииВНалоговомОргане - регистрация в ИФНС для местного налога.
//   *Ключ                             - Строка - ключ связи с детальной настройкой.
//   *НалогУплачиваетсяНаМестах        - Булево - признак местного налога.
//
Процедура ОбновитьИЗаполнитьИзбранныеРегламентированныеОтчеты(Организация, ДеревоЗадач) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаОтчетов        = НоваяТаблицаОтчетов();
	
	ВключенныеЗадачи = ДеревоЗадач.Строки.НайтиСтроки(Новый Структура("Включен", Истина), Истина);
	
	МассивВсеЗадачи             = Новый Массив;
	МассивЗадачи                = Новый Массив;
	МассивПравила               = Новый Массив;
	МассивАкцизы                = Новый Массив;
	
	Акцизы = Справочники.ЗадачиБухгалтера.НайтиПоКоду("Акцизы");
	
	Для Каждого Задача ИЗ ВключенныеЗадачи Цикл
		
		МассивВсеЗадачи.Добавить(Задача.Ссылка);
		
		Если Задача.Ссылка = Акцизы Тогда
			Продолжить;
		ИначеЕсли Задача.Родитель <> Неопределено
			И Задача.Родитель.Ссылка = Акцизы Тогда
			Если Задача.Ссылка = Перечисления.ВидыПодакцизныхТоваров.Табак Тогда
				МассивАкцизы.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.АкцизыФормаТабак);
			Иначе
				МассивАкцизы.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.АкцизыОбщаяФорма);
				Если Задача.Ссылка = Перечисления.ВидыПодакцизныхТоваров.АлкогольнаяПродукция Тогда
					МассивАкцизы.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.АвансыПоАкцизам);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Задача.ВключаетсяПользователем Тогда
				Если Задача.Строки.Количество() = 0 Тогда
					Если ЗначениеЗаполнено(Задача.Родитель) Тогда
						МассивПравила.Добавить(Задача.Ссылка);
					Иначе
						МассивЗадачи.Добавить(Задача.Ссылка);
					КонецЕсли;
				Иначе
					// это не задача, а правила  - они будут обработаны ниже в запросе
				КонецЕсли;
			Иначе
				МассивЗадачи.Добавить(Задача.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивУсловий_Исключение = Новый Массив;
	// Исключения - это задачи, для которых в списке отмечаются только условия применения законодательства
	// Бух.отчетность
	МассивУсловий_Исключение.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.БухгалтерскаяОтчетностьОбщаяФорма);
	МассивУсловий_Исключение.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.БухгалтерскаяОтчетностьМалыеПредприятия);
	МассивУсловий_Исключение.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.БухгалтерскаяОтчетностьНекоммерческиеОрганизации);
	МассивУсловий_Исключение.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.БухгалтерскаяОтчетностьСоциальноОриентированные);
	// Декларации по алкоголю
	МассивУсловий_Исключение.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.РозничнаяПродажаАлкоголя);
	МассивУсловий_Исключение.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.РозничнаяПродажаПива);
	МассивУсловий_Исключение.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.ОптоваяТорговляАлкоголем);
	МассивУсловий_Исключение.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.ПроизводствоАлгоколя);
	МассивУсловий_Исключение.Добавить(Перечисления.УсловияПримененияТребованийЗаконодательства.ПеревозкаАлкоголя);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("МассивУсловий_Исключение", МассивУсловий_Исключение);
	Запрос.УстановитьПараметр("МассивВсеЗадачи",          МассивВсеЗадачи);
	Запрос.УстановитьПараметр("МассивЗадачи",             МассивЗадачи);
	Запрос.УстановитьПараметр("МассивПравила",            МассивПравила);
	Запрос.УстановитьПараметр("МассивАкцизы",             МассивАкцизы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Ссылка КАК Ссылка,
	|	ЗадачиБухгалтера.Код КАК Код
	|ПОМЕСТИТЬ ВТ_ВсеЗадачиБухгалтера
	|ИЗ
	|	Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Ссылка В(&МассивВсеЗадачи)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыПримененияТребованийЗаконодательства.Условие КАК Условие
	|ПОМЕСТИТЬ ВТ_УсловияИсключения
	|ИЗ
	|	РегистрСведений.ВариантыПримененияТребованийЗаконодательства КАК ВариантыПримененияТребованийЗаконодательства
	|ГДЕ
	|	ВариантыПримененияТребованийЗаконодательства.Организация = &Организация
	|	И ВариантыПримененияТребованийЗаконодательства.Условие В(&МассивУсловий_Исключение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка КАК Ссылка,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка.Владелец КАК Владелец
	|ПОМЕСТИТЬ ВТ_ПравилаИсключения
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК ПравилаПредставленияОтчетовУплатыНалоговУсловия
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Условие В
	|			(ВЫБРАТЬ
	|				ВТ_УсловияИсключения.Условие
	|			ИЗ
	|				ВТ_УсловияИсключения КАК ВТ_УсловияИсключения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Ссылка,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код КАК Код,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец КАК Владелец
	|ПОМЕСТИТЬ ВТ_ПравилаПредставленияОтчетов
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Владелец В(&МассивЗадачи)
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.Владелец В
	|				(ВЫБРАТЬ
	|					ВТ_ПравилаИсключения.Владелец
	|				ИЗ
	|					ВТ_ПравилаИсключения КАК ВТ_ПравилаИсключения)
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.Ссылка В (&МассивПравила)
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.Владелец В (&МассивПравила)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Владелец В
	|			(ВЫБРАТЬ
	|				ВТ_ПравилаИсключения.Владелец
	|			ИЗ
	|				ВТ_ПравилаИсключения КАК ВТ_ПравилаИсключения)
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ПравилаИсключения.Ссылка
	|			ИЗ
	|				ВТ_ПравилаИсключения КАК ВТ_ПравилаИсключения)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Ссылка В(&МассивПравила)
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.Владелец В
	|				(ВЫБРАТЬ
	|					ВТ_ПравилаИсключения.Владелец
	|				ИЗ
	|					ВТ_ПравилаИсключения КАК ВТ_ПравилаИсключения)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка.Код,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка.Владелец
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК ПравилаПредставленияОтчетовУплатыНалоговУсловия
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Условие В(&МассивАкцизы)
	|	И ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка.Код,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка.Владелец
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеЗадачиБухгалтера.Код + ""."" + ВТ_ПравилаПредставленияОтчетов.Код КАК ПолноеИмяПравила
	|ИЗ
	|	ВТ_ПравилаПредставленияОтчетов КАК ВТ_ПравилаПредставленияОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВсеЗадачиБухгалтера КАК ВТ_ВсеЗадачиБухгалтера
	|		ПО ВТ_ПравилаПредставленияОтчетов.Владелец = ВТ_ВсеЗадачиБухгалтера.Ссылка";
	
	ТекущаяТаблицаОтчетов = Запрос.Выполнить().Выгрузить();
	ЗаполнитьТаблицуОтчетов(ТекущаяТаблицаОтчетов, ТаблицаОтчетов, Организация);
	
	СоответствиеОтчетов = Новый Соответствие;
	Для Каждого ТекущийОтчет ИЗ ТаблицаОтчетов Цикл
		СоответствиеОтчетов.Вставить(ТекущийОтчет.ИмяОтчета, ТекущийОтчет.ИмяОтчета);
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Блокировка = НоваяБлокировкаДанных(Организация);
	Блокировка.Заблокировать();
	
	МенеджерЗаписи = РегистрыСведений.ИзбранныеРегламентированныеОтчеты.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Отчеты      = Новый ХранилищеЗначения(СоответствиеОтчетов);
	МенеджерЗаписи.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура дополняет список избранных отчетов при фоновом добавлении задачи бухгалтера
//
// Параметры:
//  ТаблицаПравил   - таблица значений с колонками:
//   *Правило          - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов.
//   *ФинансовыйПериод - Дата - период с которого отчет включен в список задач.
//  Организация - СправочникСсылка.Организации - ссылка на элемент справочника Организации.
//
Процедура ДополнитьИзбранныеРегламентированныеОтчеты(ТаблицаПравил, Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаОтчетов        = НоваяТаблицаОтчетов();
	
	ВключенныеПравила = ТаблицаПравил.ВыгрузитьКолонку("Правило");
	
	Если ВключенныеПравила.Количество() = 0 Тогда
		// Существующие в списке отчеты не удаляем
		// новых отчетов добавлять нет необходимости
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВключенныеПравила", ВключенныеПравила);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец
	|ПОМЕСТИТЬ ВТ_ПравилаПредставленияОтчетов
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка В(&ВключенныеПравила)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Код,
	|	ЗадачиБухгалтера.Ссылка
	|ПОМЕСТИТЬ ВТ_ЗадачиБухгалтера
	|ИЗ
	|	Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ПравилаПредставленияОтчетов.Владелец
	|			ИЗ
	|				ВТ_ПравилаПредставленияОтчетов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗадачиБухгалтера.Код + ""."" + ВТ_ПравилаПредставленияОтчетов.Код КАК ПолноеИмяПравила
	|ИЗ
	|	ВТ_ЗадачиБухгалтера КАК ВТ_ЗадачиБухгалтера
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПравилаПредставленияОтчетов КАК ВТ_ПравилаПредставленияОтчетов
	|		ПО ВТ_ЗадачиБухгалтера.Ссылка = ВТ_ПравилаПредставленияОтчетов.Владелец";
	
	
	ТекущаяТаблицаОтчетов = Запрос.Выполнить().Выгрузить();
	ЗаполнитьТаблицуОтчетов(ТекущаяТаблицаОтчетов, ТаблицаОтчетов, Организация);
	
	Если ТекущаяТаблицаОтчетов.Количество() <> 0 Тогда
		
		НачатьТранзакцию();
		
		Блокировка = НоваяБлокировкаДанных(Организация);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ИзбранныеРегламентированныеОтчеты.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			СоответствиеОтчетов = МенеджерЗаписи.Отчеты.Получить();
		Иначе
			СоответствиеОтчетов = Новый Соответствие;
		КонецЕсли;
		
		Для Каждого ТекущийОтчет ИЗ ТаблицаОтчетов Цикл
			СоответствиеОтчетов.Вставить(ТекущийОтчет.ИмяОтчета, ТекущийОтчет.ИмяОтчета);
		КонецЦикла;
		
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Отчеты      = Новый ХранилищеЗначения(СоответствиеОтчетов);
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

#Область ФормированиеСпискаИзбранныхОтчетов

// Заполняется таблица избранного по правилам, определяемым в самом потребителе
//
// Параметры:
//  ПараметрыОтбора - структура, содержащая значения:
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника Организации.
//   РанееСозданныеОтчеты - пустая таблица избранного с колонками:
//     * Наименование - Строка - наименование отчета.
//     * ПолноеИмя    - Строка - имя объекта отчета.
//     * Ссылка       - ДокументСсылка.РегламентированныйОтчет или иной документ который приравнен к отчетам.
//     * ЭтоГруппа    - Булево - признак группы отчетов.
//
Процедура ЗаполнитьТаблицуДоступныхОтчетов(ПараметрыОтбора) Экспорт
	
	// Организация установлена в форме и есть в параметрах
	ОсновнаяОрганизация  = ПараметрыОтбора.Организация;
	РанееСозданныеОтчеты = ПараметрыОтбора.РанееСозданныеОтчеты;
	
	// Организация в форме не установлена, но есть основная организация
	Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
		ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	// Организация в форме не установлена, и их несколько
	Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
		ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
	Иначе
		ДоступныеОрганизации = Новый Массив;
		ДоступныеОрганизации.Добавить(ОсновнаяОрганизация);
	КонецЕсли;
	
	ТаблицаОбязательныхОтчетов = СформироватьТаблицуОбязательныхОтчетов(ДоступныеОрганизации);
	
	Если ТаблицаОбязательныхОтчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РанееСозданныеОтчеты.Очистить();
	Для Каждого Строка ИЗ ТаблицаОбязательныхОтчетов Цикл
		НоваяСтрока = РанееСозданныеОтчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	
	ТаблицаВсехРанееСозданныхОтчетов  = РегламентированнаяОтчетность.ТаблицаСозданныхВидовОтчетов(ДоступныеОрганизации);
	ДоступныеРегламентированныеОтчеты = РегламентированнаяОтчетность.ТаблицаДоступныеРегламентированныеОтчеты(ТаблицаВсехРанееСозданныхОтчетов.ВыгрузитьКолонку("ИсточникОтчета"));

	Для Каждого Отчет Из ТаблицаВсехРанееСозданныхОтчетов Цикл
		СтруктураОтбора = Новый Структура("Наименование, ПолноеИмя", Отчет.Наименование, Отчет.ПолноеИмя);
		МассивСтрок = РанееСозданныеОтчеты.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрокаТаблицы = РанееСозданныеОтчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, Отчет);
			
			СтруктураСсылок = Новый Структура("ИсточникОтчета", Отчет.ИсточникОтчета);
			МасивСсылок = ДоступныеРегламентированныеОтчеты.НайтиСтроки(СтруктураСсылок);
			Если МасивСсылок.Количество() <> 0 Тогда
				НоваяСтрокаТаблицы.Ссылка = МасивСсылок[0].СсылкаВидОтчета;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РанееСозданныеОтчеты.Сортировать("Наименование");
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяТаблицаОтчетов()
	
	ТаблицаОтчетов = Новый ТаблицаЗначений;
	ТаблицаОтчетов.Колонки.Добавить("ИмяОтчета", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(250, ДопустимаяДлина.Переменная)));
	
	Возврат ТаблицаОтчетов;
КонецФункции

Процедура ЗаполнитьТаблицуОтчетов(ТекущаяТаблицаОтчетов, ТаблицаОтчетов, Организация)
	
	ВсеОтчеты = ИнтерфейсыВзаимодействияБРО.РеглОтчетыИсполнителиТребований();
		
	Для Каждого СтрокаТаблицы ИЗ ТекущаяТаблицаОтчетов Цикл
		ТекущийОтчет =  ВсеОтчеты.Получить(ВРЕГ(СтрокаТаблицы.ПолноеИмяПравила));
		Если ТекущийОтчет = Неопределено Тогда
			ТекущийОтчет =  ВсеОтчеты.Получить(ВРЕГ(ИнтерфейсыВзаимодействияБРО.ИмяНалогаОтчета(СтрокаТаблицы.ПолноеИмяПравила)));
		КонецЕсли;
		Если ТекущийОтчет <> Неопределено Тогда
			НоваяСтрока = ТаблицаОтчетов.Добавить();
			НоваяСтрока.ИмяОтчета  = ТекущийОтчет;
		КонецЕсли;
	КонецЦикла;
	
	//Ниже - замена безусловного вызова метода РегламентированнаяОтчетность.ДобавитьВДеревоРегламентированныхОтчетовДругиеОтчеты
	
	//Условное дополнение отчетами по НДС
	Если ТаблицаОтчетов.Найти("РегламентированныйОтчетКосвенныеНалогиТамСоюз", "ИмяОтчета") <> Неопределено Тогда
		НоваяСтрока = ТаблицаОтчетов.Добавить();
		НоваяСтрока.ИмяОтчета   = "ЗаявлениеОВвозеТоваров";
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров") Тогда
		Если НЕ УчетнаяПолитика.ПлательщикНДС(Организация, ТекущаяДата()) Тогда
			НоваяСтрока = ТаблицаОтчетов.Добавить();
			НоваяСтрока.ИмяОтчета   = "ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде";
		КонецЕсли;
	КонецЕсли;
	
	// Условное дополнение отчетами по физлицам (НДФЛ, отчетность в ПФР)
	ТаблицаОписанияОбъектов = РегламентированнаяОтчетность.ПустаяТаблицаОписанияОбъектовРегламентированнойОтчетности();
	Если Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ЕстьОтчетностьПоФизлицам = УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация);
		Иначе
			ЕстьОтчетностьПоФизлицам = Истина;
		КонецЕсли;
		Если ЕстьОтчетностьПоФизлицам Тогда
			
			УчетНДФЛ.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписанияОбъектов);
			Если Год(ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий(Организация)) <= Год(ТекущаяДата()) Тогда
				ПрямыеВыплатыПособийСоциальногоСтрахования.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписанияОбъектов);
			КонецЕсли;
			ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетностиПФР(ТаблицаОписанияОбъектов);
			
		КонецЕсли;
	КонецЕсли;
	РегламентированнаяОтчетность.ЗаполнитьНаименованиеВТаблицеОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписанияОбъектов);
	ТаблицаОписанияОтчетов = ТаблицаОписанияОбъектов.Скопировать(Новый Структура("ВидДокумента, ЯвляетсяАктуальным", Перечисления.СтраницыЖурналаОтчетность.Отчеты, Истина));
	Для Каждого СтрокаТаблицы ИЗ ТаблицаОписанияОтчетов Цикл
		МетаОбъект = Метаданные.НайтиПоТипу(СтрокаТаблицы.ТипОбъекта);
		НоваяСтрока = ТаблицаОтчетов.Добавить();
		НоваяСтрока.ИмяОтчета   = МетаОбъект.Имя;
	КонецЦикла;
	
	ТаблицаОтчетов.Свернуть("ИмяОтчета");
	ТаблицаОтчетов.Сортировать("ИмяОтчета");
	ТаблицаОтчетов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОтчетов.ЗаполнитьЗначения(Организация, "Организация");
	
КонецПроцедуры

Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетностиПФР(ТаблицаОписания) Экспорт
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ФормаСВЗ_М";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.СведенияОЗастрахованныхЛицахСЗВ_М;
	
КонецПроцедуры

Функция НоваяБлокировкаДанных(Организация);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзбранныеРегламентированныеОтчеты");
	ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
	
	Возврат Блокировка;
	
КонецФункции

#Область ПолучениеСпискаИзбранныхОтчетов

Функция СформироватьТаблицуОбязательныхОтчетов(Организации)
	
	ТаблицаОтчетов = НоваяТаблицаОтчетов();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИзбранныеРегламентированныеОтчеты.Отчеты КАК Отчеты
	|ИЗ
	|	РегистрСведений.ИзбранныеРегламентированныеОтчеты КАК ИзбранныеРегламентированныеОтчеты
	|ГДЕ
	|	ИзбранныеРегламентированныеОтчеты.Организация В(&Организации)";
	
	ВыборкаОтчетов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОтчетов.Следующий() Цикл
		
		ИзбранныеОтчеты = ВыборкаОтчетов.Отчеты.Получить();
		
		Если ТипЗнч(ИзбранныеОтчеты) <> Тип("Соответствие") Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого ИзбранныйОтчет ИЗ ИзбранныеОтчеты Цикл
			НоваяСтрока = ТаблицаОтчетов.Добавить();
			НоваяСтрока.ИмяОтчета = ИзбранныйОтчет.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаОтчетов.Свернуть("ИмяОтчета");
	ДоступныеРегламентированныеОтчеты = РегламентированнаяОтчетность.ТаблицаДоступныеРегламентированныеОтчеты(ТаблицаОтчетов.ВыгрузитьКолонку("ИмяОтчета"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоступныеРегламентированныеОтчеты", ДоступныеРегламентированныеОтчеты);
	Запрос.УстановитьПараметр("ТаблицаОтчетов",                    ТаблицаОтчетов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаОтчетов.ИмяОтчета КАК СТРОКА(255)) КАК ИмяОтчета
	|ПОМЕСТИТЬ ВТ_НеобходимыеОтчеты
	|ИЗ
	|	&ТаблицаОтчетов КАК ТаблицаОтчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеРегламентированныеОтчеты.НаименованиеОтчета КАК НаименованиеОтчета,
	|	ДоступныеРегламентированныеОтчеты.СсылкаВидОтчета КАК СсылкаВидОтчета,
	|	ВЫРАЗИТЬ(ДоступныеРегламентированныеОтчеты.ИсточникОтчета КАК СТРОКА(255)) КАК ИсточникОтчета
	|ПОМЕСТИТЬ ВТ_ДоступныеОтчеты
	|ИЗ
	|	&ДоступныеРегламентированныеОтчеты КАК ДоступныеРегламентированныеОтчеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_ДоступныеОтчеты.СсылкаВидОтчета ЕСТЬ NULL 
	|			ТОГДА ВТ_НеобходимыеОтчеты.ИмяОтчета
	|	КОНЕЦ КАК ПолноеИмя,
	|	ВТ_ДоступныеОтчеты.НаименованиеОтчета КАК Наименование,
	|	ВТ_ДоступныеОтчеты.СсылкаВидОтчета КАК Ссылка,
	|	ВТ_ДоступныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
	|ИЗ
	|	ВТ_НеобходимыеОтчеты КАК ВТ_НеобходимыеОтчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоступныеОтчеты КАК ВТ_ДоступныеОтчеты
	|		ПО ВТ_НеобходимыеОтчеты.ИмяОтчета = ВТ_ДоступныеОтчеты.ИсточникОтчета";
	
	ТаблицаВсехОтчетов = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из ТаблицаВсехОтчетов Цикл
		ПолноеИмя = СокрЛП(Строка.ПолноеИмя);
		Если ЗначениеЗаполнено(ПолноеИмя) Тогда
			Если ПолноеИмя = "ЗаявлениеОВвозеТоваров" Тогда
				Строка.Наименование = НСтр("ru = 'Заявление о ввозе товаров (на основании поступления)'");
			Иначе
				МетаОбъект = Метаданные.Документы.Найти(ПолноеИмя);
				Если МетаОбъект <> Неопределено Тогда
					Строка.Наименование = МетаОбъект.Синоним;
				КонецЕсли;
			КонецЕсли;
			Строка.ПолноеИмя = "Документ." + ПолноеИмя;
		Иначе
			Строка.ПолноеИмя = "Документ.РегламентированныйОтчет";
			МетаОтчет = Метаданные.Отчеты.Найти(СокрЛП(Строка.ИсточникОтчета));
			Если МетаОтчет <> Неопределено И МетаОтчет.ОсновнаяФорма <> Неопределено Тогда
				Строка.Наименование = МетаОтчет.ОсновнаяФорма.Синоним;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаВсехОтчетов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли