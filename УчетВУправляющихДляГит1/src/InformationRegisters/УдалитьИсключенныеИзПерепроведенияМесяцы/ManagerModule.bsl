#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ОбработчикиОбновленияИнформационнойБазы

// Переносит границу последовательности после последнего из исключенных месяцев и очищает регистр.
//
// Параметры:
//  Параметры – Структура со свойствами, состав которой определяется БСП:
//              * ОбработкаЗавершена (Булево). Для того чтобы обработчик был вызван повторно для обработки следующей
//					порции данных, следует записать в него значение Ложь.
//              * ПрогрессВыполнения (Структура). Данные для отображения прогресса обработки данных:
//                  * ВсегоОбъектов (Число). Общее количество объектов, которые необходимо обработать.
//                  * ОбработаноОбъектов (Число). Сколько объектов уже обработано.
//
Процедура ПереместитьГраницуПослеИсключенных(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсключенныеИзПерепроведенияМесяцы.Организация КАК Организация,
	|	МАКСИМУМ(КОНЕЦПЕРИОДА(ИсключенныеИзПерепроведенияМесяцы.ПериодРегистрации, МЕСЯЦ)) КАК ПериодРегистрации
	|ПОМЕСТИТЬ ПоследниеПропущенные
	|ИЗ
	|	РегистрСведений.УдалитьИсключенныеИзПерепроведенияМесяцы КАК ИсключенныеИзПерепроведенияМесяцы
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсключенныеИзПерепроведенияМесяцы.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоследниеПропущенные.Организация КАК Организация,
	|	ПоследниеПропущенные.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	ПоследниеПропущенные КАК ПоследниеПропущенные";
	
	Если Запрос.Выполнить().Пустой() Тогда
		// Нет пропущенных месяцев.
 		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;

	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		// Вычислим, сколько всего предстоит пометить актуальными.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументыОрганизаций.Регистратор) КАК ВсегоОбъектов
		|ИЗ
		|	ПоследниеПропущенные КАК ПоследниеПропущенные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.ДокументыОрганизаций КАК ДокументыОрганизаций
		|		ПО ПоследниеПропущенные.Организация = ДокументыОрганизаций.Организация
		|			И (ДокументыОрганизаций.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности)))
		|			И ПоследниеПропущенные.ПериодРегистрации >= ДокументыОрганизаций.Период
		|ГДЕ
		|	ДокументыОрганизаций.Организация ЕСТЬ НЕ NULL ";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ВсегоОбъектов) Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
			// Нет проведенных вне последовательности документов среди пропущенных месяцев.
			ИсключенныеИзПерепроведенияМесяцы = РегистрыСведений.УдалитьИсключенныеИзПерепроведенияМесяцы.СоздатьНаборЗаписей();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИсключенныеИзПерепроведенияМесяцы);
			Параметры.ОбработкаЗавершена = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяСобытия = ЗакрытиеМесяцаКлиентСервер.СобытиеЖурналаРегистрации()
		+ "." + ЗакрытиеМесяца.ПредставлениеОперацииПереносГраницы(ОбщегоНазначения.КодОсновногоЯзыка());
	
	// Обработка записей последовательности.
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ДокументыОрганизаций.Регистратор КАК Регистратор,
	|	МИНИМУМ(ДокументыОрганизаций.Период) КАК ГраницаПоРегистратору
	|ПОМЕСТИТЬ ПорцияВключаемых
	|ИЗ
	|	ПоследниеПропущенные КАК ПоследниеПропущенные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.ДокументыОрганизаций КАК ДокументыОрганизаций
	|		ПО ПоследниеПропущенные.Организация = ДокументыОрганизаций.Организация
	|			И (ДокументыОрганизаций.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности)))
	|			И ПоследниеПропущенные.ПериодРегистрации >= ДокументыОрганизаций.Период
	|ГДЕ
	|	ДокументыОрганизаций.Организация ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОрганизаций.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорцияВключаемых.ГраницаПоРегистратору КАК ГраницаПоРегистратору,
	|	ДокументыОрганизаций.Регистратор КАК Регистратор,
	|	ДокументыОрганизаций.Период КАК Период,
	|	ДокументыОрганизаций.Организация КАК Организация,
	|	ДокументыОрганизаций.СостояниеПроведения КАК СостояниеПроведения,
	|	ВЫБОР
	|		КОГДА ДокументыОрганизаций.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности)
	|			ТОГДА 3
	|		КОГДА ДокументыОрганизаций.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПерепроведениеПропущено)
	|			ТОГДА 2
	|		КОГДА ДокументыОрганизаций.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокАнализа
	|ИЗ
	|	ПорцияВключаемых КАК ПорцияВключаемых
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.ДокументыОрганизаций КАК ДокументыОрганизаций
	|		ПО ПорцияВключаемых.Регистратор = ДокументыОрганизаций.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГраницаПоРегистратору,
	|	Регистратор,
	|	ПорядокАнализа УБЫВ,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПорцияВключаемых";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЭтоПоследняяИтерация = (Выборка.Количество() < 1000);

	ТекущийРегистратор = Неопределено;
	ДокументыОрганизаций = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();
	ДокументыОрганизаций.ДополнительныеСвойства.Вставить("ОтключитьБизнесЛогикуРИБ", Истина);
	ОтборНабора = ДокументыОрганизаций.Отбор.Регистратор;
	НаборСформирован = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущийРегистратор <> Выборка.Регистратор
		   И ЗначениеЗаполнено(ТекущийРегистратор) Тогда
			// Переходим к новому регистратору, поэтому записываем движения по старому.
			ОтборНабора.Установить(ТекущийРегистратор);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументыОрганизаций);
			Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + 1;
			ДокументыОрганизаций.Очистить();
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Предупреждение,
				ТекущийРегистратор.Метаданные(),
				ТекущийРегистратор,
				НСтр("ru = 'Пометка документа проведенным в последовательности'"));
			ТекущийРегистратор = Неопределено;
			НаборСформирован = Ложь;
			
		КонецЕсли;
		
		Если НаборСформирован Тогда
			// Ранее в набор записей уже была добавлена единственная запись, или было решено, что набор должен быть записан пустым.
			Продолжить;
		КонецЕсли;

		ТекущийРегистратор = Выборка.Регистратор;
		НаборСформирован = Ложь;
		
		Если Выборка.ПорядокАнализа <> 0 Тогда // оставить эту запись единственной
			
			НоваяРегистрация = ДокументыОрганизаций.Добавить();
			НоваяРегистрация.Регистратор         = ТекущийРегистратор;
			НоваяРегистрация.Период              = Выборка.Период;
			НоваяРегистрация.Организация         = Выборка.Организация;
			Если Выборка.ПорядокАнализа = 3 Тогда
				НоваяРегистрация.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности;
			Иначе
				НоваяРегистрация.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПерепроведениеПропущено;
			КонецЕсли;
			
		КонецЕсли;
		НаборСформирован = Истина;

	КонецЦикла;
	Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
		
		ОтборНабора.Установить(ТекущийРегистратор);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументыОрганизаций);
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + 1;
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Предупреждение,
			ТекущийРегистратор.Метаданные(),
			ТекущийРегистратор,
			НСтр("ru = 'Пометка документа проведенным в последовательности'"));
			
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ЭтоПоследняяИтерация;
	Если Параметры.ОбработкаЗавершена Тогда
		// Нет проведенных вне последовательности документов среди пропущенных месяцев.
		ИсключенныеИзПерепроведенияМесяцы = РегистрыСведений.УдалитьИсключенныеИзПерепроведенияМесяцы.СоздатьНаборЗаписей();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИсключенныеИзПерепроведенияМесяцы); 

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


#КонецЕсли
