#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьПоНаличиюРегламентированныхОтчетов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ВариантыПримененияТребованийЗаконодательства КАК ВариантыПримененияТребованийЗаконодательства";
	Если Не Запрос.Выполнить().Пустой() Тогда
		// Уже что-то настроено
		Возврат;
	КонецЕсли;
	
	ЗаписиНалогиОтчеты = РегистрыСведений.НалогиОтчеты.СоздатьНаборЗаписей();
	ЗаписиВариантыТребований = РегистрыСведений.ВариантыПримененияТребованийЗаконодательства.СоздатьНаборЗаписей();
	
	// ДАННЫЕ, ОБЩИЕ ДЛЯ ВСЕХ ОРГАНИЗАЦИЙ
	// Задачи, которые можно включать
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Ссылка.Владелец КАК Задача,
	|	Правила.Ссылка.Владелец.Код КАК Идентификатор
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК Правила
	|ГДЕ
	|	Правила.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.ЗадачаВыбранаПользователем)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	РеглОтчетыКоторыеВключаютЗадачи = Новый ТаблицаЗначений; // "Включают" - означает здесь "On", а не "Include"
	РеглОтчетыКоторыеВключаютЗадачи.Колонки.Добавить("РеглОтчет", Новый ОписаниеТипов("Строка"));
	РеглОтчетыКоторыеВключаютЗадачи.Колонки.Добавить("Задача",    Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера"));
	РеглОтчетыКоторыеВключаютЗадачи.Индексы.Добавить("РеглОтчет");
	
	ИсполнителиЗадач = ИнтерфейсыВзаимодействияБРО.РеглОтчетыИсполнителиЗадачБухгалтера();
	Пока Выборка.Следующий() Цикл
		
		// В ранних версиях БРО возвращались имена правил, совпадающие с кодами справочника, т.е. с символами нижнего и верхнего регистров.
		// В более поздних - приведены к верхнему регистру.
		// Поиск в соответствии - регистрозависимый.
		РеглОтчеты = ИсполнителиЗадач[Выборка.Идентификатор];
		Если РеглОтчеты = Неопределено Тогда
			РеглОтчеты = ИсполнителиЗадач[ВРег(Выборка.Идентификатор)];
		КонецЕсли;
		
		Если РеглОтчеты <> Неопределено Тогда
			Для Каждого РеглОтчет Из РеглОтчеты Цикл
				НоваяСтрока = РеглОтчетыКоторыеВключаютЗадачи.Добавить();
				НоваяСтрока.Задача    = Выборка.Задача;
				НоваяСтрока.РеглОтчет = РеглОтчет;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Правила, которые можно включать "поштучно" (статистика)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Ссылка КАК Правило,
	|	Правила.Ссылка.Владелец.Код КАК ИдентификаторЗадачи,
	|	Правила.Ссылка.Код КАК ИдентификаторПравила
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК Правила
	|ГДЕ
	|	Правила.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.ПравилоВыбраноПользователем)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РеглОтчетыКоторыеВключаютПравила = Новый ТаблицаЗначений;
	РеглОтчетыКоторыеВключаютПравила.Колонки.Добавить("РеглОтчет", Новый ОписаниеТипов("Строка"));
	РеглОтчетыКоторыеВключаютПравила.Колонки.Добавить("Правило",   Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	РеглОтчетыКоторыеВключаютПравила.Индексы.Добавить("РеглОтчет");
	
	ИсполнителиТребований = ИнтерфейсыВзаимодействияБРО.РеглОтчетыИсполнителиТребований();
	Пока Выборка.Следующий() Цикл
		
		ИмяТребования = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(
			Выборка.ИдентификаторЗадачи, 
			Выборка.ИдентификаторПравила);
			
		РеглОтчет = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(ИмяТребования);
		Если РеглОтчет <> Неопределено Тогда
			НоваяСтрока = РеглОтчетыКоторыеВключаютПравила.Добавить();
			НоваяСтрока.Правило   = Выборка.Правило;
			НоваяСтрока.РеглОтчет = РеглОтчет;
		КонецЕсли;
		
	КонецЦикла;
	
	// Форма бух. отчетности
	// Порядок уплаты налога на прибыль
	// Алкоголь
	// Доп. взносы сотрудников?
	НастройкиПримененияТребований = РегистрыСведений.ВариантыПримененияТребованийЗаконодательства.НастройкиПримененияТребований();
	УсловияКоторыеМожноВключать = Новый Массив;
	Для Каждого Настройка Из НастройкиПримененияТребований Цикл
		Если ТипЗнч(Настройка.Варианты) = Тип("ТаблицаЗначений") Тогда
			Для Каждого Вариант Из Настройка.Варианты Цикл
				Если ЗначениеЗаполнено(Вариант.Условие) Тогда
					УсловияКоторыеМожноВключать.Добавить(Вариант.Условие);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Настройка.Варианты) = Тип("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства") Тогда
			УсловияКоторыеМожноВключать.Добавить(Настройка.Варианты);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Условия", УсловияКоторыеМожноВключать);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Условие КАК Условие,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка КАК Правило,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка.Код КАК ИдентификаторПравила,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка.Владелец.Код КАК ИдентификаторЗадачи
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК ПравилаПредставленияОтчетовУплатыНалоговУсловия
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Условие В(&Условия)";
	РеглОтчетыКоторыеВключаютУсловия = Новый ТаблицаЗначений;
	РеглОтчетыКоторыеВключаютУсловия.Колонки.Добавить("Условие",   Новый ОписаниеТипов("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства"));
	РеглОтчетыКоторыеВключаютУсловия.Колонки.Добавить("РеглОтчет", Новый ОписаниеТипов("Строка"));
	РеглОтчетыКоторыеВключаютУсловия.Индексы.Добавить("РеглОтчет");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяТребования = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(
			Выборка.ИдентификаторЗадачи, 
			Выборка.ИдентификаторПравила);
			
		РеглОтчет = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(ИмяТребования);
		Если РеглОтчет <> Неопределено Тогда
			НоваяСтрока = РеглОтчетыКоторыеВключаютУсловия.Добавить();
			НоваяСтрока.Условие   = Выборка.Условие;
			НоваяСтрока.РеглОтчет = РеглОтчет;
		КонецЕсли;
		
	КонецЦикла;
	
	// ДАННЫЕ ПО ОРГАНИЗАЦИЯМ
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегламентированныйОтчет.ИсточникОтчета КАК РеглОтчет,
	|	РегламентированныйОтчет.Организация КАК Организация
	|ПОМЕСТИТЬ РеглОтчеты
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	НЕ РегламентированныйОтчет.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА РеглОтчеты.Организация.ОбособленноеПодразделение
	|			ТОГДА РеглОтчеты.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ РеглОтчеты.Организация
	|	КОНЕЦ КАК Организация,
	|	РеглОтчеты.РеглОтчет
	|ИЗ
	|	РеглОтчеты КАК РеглОтчеты
	|ИТОГИ ПО
	|	Организация";
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		НалогиОтчетыДолжныБытьВключены = Новый Соответствие; // Чтобы исключить дубли
		УсловияДолжныБытьВключены      = Новый Соответствие;
		
		Отбор = Новый Структура;
		
		Выборка = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
		
			Отбор.Вставить("РеглОтчет", Выборка.РеглОтчет);
			
			// Задачи, которые можно включать
			ВключитьЗадачи = РеглОтчетыКоторыеВключаютЗадачи.НайтиСтроки(Отбор);
			Для Каждого ОписаниеЗадачи Из ВключитьЗадачи Цикл
				НалогиОтчетыДолжныБытьВключены.Вставить(ОписаниеЗадачи.Задача);
			КонецЦикла;
		
			// Правила, которые можно включать
			ВключитьПравила = РеглОтчетыКоторыеВключаютПравила.НайтиСтроки(Отбор);
			Для Каждого ОписаниеПравила Из ВключитьПравила Цикл
				НалогиОтчетыДолжныБытьВключены.Вставить(ОписаниеПравила.Правило);
			КонецЦикла;
			
			// Условия, которые надо включить
			ВключитьУсловия = РеглОтчетыКоторыеВключаютУсловия.НайтиСтроки(Отбор);
			Для Каждого ОписаниеУсловия Из ВключитьУсловия Цикл
				УсловияДолжныБытьВключены.Вставить(ОписаниеУсловия.Условие, ОписаниеУсловия.Условие);
			КонецЦикла;
			
		КонецЦикла;
		
		// Запишем список отчетов
		Для Каждого КлючИЗначение Из НалогиОтчетыДолжныБытьВключены Цикл
			НоваяЗапись = ЗаписиНалогиОтчеты.Добавить();
			НоваяЗапись.Организация = ВыборкаОрганизации.Организация;
			НоваяЗапись.НалогОтчет  = КлючИЗначение.Ключ;
		КонецЦикла;
			
		// Проверим совместимость условий
		ВключитьУсловия = Новый Массив;
		Для Каждого Настройка Из НастройкиПримененияТребований Цикл
			
			Если ТипЗнч(Настройка.Варианты) = Тип("ТаблицаЗначений") Тогда
				Если Настройка.Варианты.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				ВариантПоУмолчанию = Настройка.Варианты[0].Условие;
				Если УсловияДолжныБытьВключены[ВариантПоУмолчанию] <> Неопределено Тогда
					// Вариант по умолчанию не записываем
					Продолжить;
				КонецЕсли;
				Для Каждого Вариант Из Настройка.Варианты Цикл
					Условие = Вариант.Условие;
					Если ЗначениеЗаполнено(Условие) Тогда
						Если УсловияДолжныБытьВключены[Условие] <> Неопределено Тогда
							ВключитьУсловия.Добавить(Условие);
							Прервать; // Берем только первый подходящий вариант - остальные с ним несовместны
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(Настройка.Варианты) = Тип("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства") Тогда
				Если УсловияДолжныБытьВключены[Настройка.Варианты] <> Неопределено Тогда
					ВключитьУсловия.Добавить(Настройка.Варианты);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Запишем условия, определяющие варианты требований, в регистр
		Для Каждого Условие Из ВключитьУсловия Цикл
			НоваяЗапись = ЗаписиВариантыТребований.Добавить();
			НоваяЗапись.Организация = ВыборкаОрганизации.Организация;
			НоваяЗапись.Условие     = Условие;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗаписиНалогиОтчеты.Модифицированность() Тогда
		ЗаписиНалогиОтчеты.Записать();
	КонецЕсли;
	
	Если ЗаписиВариантыТребований.Модифицированность() Тогда
		ЗаписиВариантыТребований.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Конструктор базовой коллекции, которая описывает разные варианты детальной настройки налогов и отчетов.
// Такая коллекция может быть передана в форму ДетальнаяНастройка в свойстве Варианты элементов ПараметрыДетальнойНастройки.
Функция НовыйВариантыДетальнойНастройки() Экспорт
	
	Варианты = Новый ТаблицаЗначений;
	Варианты.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Варианты.Колонки.Добавить("ТекстВыбора",   Новый ОписаниеТипов("Строка"));
	Варианты.Колонки.Добавить("Устарел",       Новый ОписаниеТипов("Булево"));
	
	Возврат Варианты;
	
КонецФункции

Процедура ПодготовитьДанные(Параметры, АдресХранилища) Экспорт
	
	Организация   = Параметры.Организация;
	Дерево        = Параметры.Дерево;
	ТекущийПериод = Неопределено;
	Параметры.Свойство("ТекущийПериод", ТекущийПериод);
	
	// Заполняем Список и ЗначенияДетальнойНастройки
	ПараметрыДетальнойНастройки = ЗаполнитьПараметрыДетальнойНастройки(Организация);
	
	ЗадачиИсключения = ЗадачиИсключенияПоТипуОрганизации(Организация, ТекущийПериод);
	
	Дерево.Строки.Очистить();
	
	// ЗначенияДетальнойНастройки будут помещены во временное хранилище
	// с адресом АдресЗначенияДетальнойНастройки
	ЗначенияДетальнойНастройки = НовыйЗначенияДетальнойНастройки(ПараметрыДетальнойНастройки);
	
	// Список включенных правил
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	ВключенныеПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ВключенныеПравилаОрганизации(Организация, ТекущийПериод);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВключенныеПравила", ВключенныеПравила);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Правила.Правило КАК Правило,
	|	Правила.ВключеноПользователем КАК ВключеноПользователем
	|ПОМЕСТИТЬ ВТ_ВключенныеПравила
	|ИЗ
	|	&ВключенныеПравила КАК Правила
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Ссылка КАК Правило,
	|	Правила.Владелец КАК Задача,
	|	ВключенныеПравила.ВключеноПользователем КАК ВключеноПользователем
	|ПОМЕСТИТЬ ВключенныеПравила
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВключенныеПравила КАК ВключенныеПравила
	|		ПО Правила.Ссылка = ВключенныеПравила.Правило
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВключенныеПравила";
	Запрос.Выполнить();
	
	// ПЕРВЫЙ УРОВЕНЬ ДЕРЕВА
		
	// Список задач
	НалогиУплачиваемыеНаМестах = РегистрыСведений.ПорядокУплатыНалоговНаМестах.НалогиПорядокКоторыхУстанавливаетсяНаМестах();
	ТаблицаНалоговУплачиваемыхНаМестах = Новый ТаблицаЗначений;
	ТаблицаНалоговУплачиваемыхНаМестах.Колонки.Добавить("Налог", Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера"));
	Для Каждого Налог Из НалогиУплачиваемыеНаМестах Цикл
		Если ЗадачиИсключения.Найти(Налог.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицыНалогов = ТаблицаНалоговУплачиваемыхНаМестах.Добавить();
		СтрокаТаблицыНалогов.Налог = Налог;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНалоговУплачиваемыхНаМестах", ТаблицаНалоговУплачиваемыхНаМестах);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалогиУплачиваемыеНаМестах.Налог КАК Налог
	|ПОМЕСТИТЬ НалогиУплачиваемыеНаМестах
	|ИЗ
	|	&ТаблицаНалоговУплачиваемыхНаМестах КАК НалогиУплачиваемыеНаМестах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Налог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Задача КАК Задача,
	|	МАКСИМУМ(Правила.ВключеноПользователем) КАК ВключеноПользователем
	|ПОМЕСТИТЬ ВключенныеЗадачи
	|ИЗ
	|	ВключенныеПравила КАК Правила
	|
	|СГРУППИРОВАТЬ ПО
	|	Правила.Задача
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Ссылка КАК Ссылка,
	|	ЗадачиБухгалтера.НаименованиеПолное КАК Наименование,
	|	ЗадачиБухгалтера.РеквизитДопУпорядочивания КАК Порядок,
	|	ВЫБОР
	|		КОГДА Включены.Задача ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Включены.ВключеноПользователем
	|	КОНЕЦ КАК ВключаетсяПользователем,
	|	ВЫБОР
	|		КОГДА НЕ Включены.Задача ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Включен,
	|	ВЫБОР
	|		КОГДА НалогиУплачиваемыеНаМестах.Налог ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НалогУплачиваетсяНаМестах,
	|	ЗадачиБухгалтера.Код КАК Идентификатор
	|ИЗ
	|	Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВключенныеЗадачи КАК Включены
	|		ПО ЗадачиБухгалтера.Ссылка = Включены.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ НалогиУплачиваемыеНаМестах КАК НалогиУплачиваемыеНаМестах
	|		ПО ЗадачиБухгалтера.Ссылка = НалогиУплачиваемыеНаМестах.Налог
	|ГДЕ
	|	НЕ ЗадачиБухгалтера.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА 0 В
	|					(ВЫБРАТЬ
	|						КОЛИЧЕСТВО(НастройкиУчетаНалогаНаПрибыль.Период) КАК Период
	|					ИЗ
	|						РегистрСведений.НастройкиУчетаНалогаНаПрибыль КАК НастройкиУчетаНалогаНаПрибыль
	|					ГДЕ
	|						НастройкиУчетаНалогаНаПрибыль.Организация = &Организация)
	|				ТОГДА ЗадачиБухгалтера.Код <> ""НалогНаПрибыль""
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗадачиИсключения.Найти(Выборка.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	// Форма бухгалтерской отчетности
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      ТекущаяДата);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетнаяПолитикаСрезПоследних.ВариантБухгалтерскойОтчетности
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВариантБухгалтерскойОтчетности = Выборка.ВариантБухгалтерскойОтчетности;
	Иначе
		ВариантБухгалтерскойОтчетности = Перечисления.ВариантыБухгалтерскойОтчетности.ОбщиеПравила;
	КонецЕсли;
	
	// Порядок уплаты авансовых платежей по налогу на прибыль
	
	ПорядокУплатыАвансовПоНалогуНаПрибыль = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ПорядокУплатыАвансовДействующейНастройки(
		Организация,
		ТекущаяДата);
	
	// Другие детальные настройки: варианты применения требований законодательства в разных условиях
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыбранныеУсловия.Условие
	|ИЗ
	|	РегистрСведений.ВариантыПримененияТребованийЗаконодательства КАК ВыбранныеУсловия
	|ГДЕ
	|	ВыбранныеУсловия.Организация = &Организация
	|";
	УсловияВыбранныеПользователем = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Условие");
	
	Для Каждого Строка Из Дерево.Строки Цикл
		
		Если Строка.Идентификатор = "БухгалтерскаяОтчетность" Тогда
			
			Строка.Включен                 = Истина;
			Строка.ВключаетсяПользователем = Ложь;
			Строка.ЕстьДетальнаяНастройка  = Истина;
			Строка.ДетальнаяНастройкаПредставление = НСтр("ru = 'Состав форм: '") + Строка(ВариантБухгалтерскойОтчетности);
			
		ИначеЕсли Строка.Идентификатор = "НалогНаПрибыль" Тогда
			
			Строка.ЕстьДетальнаяНастройка = Истина;
			Строка.ДетальнаяНастройкаПредставление = НСтр("ru = 'Уплата авансов: '") + Строка(ПорядокУплатыАвансовПоНалогуНаПрибыль);
			
		КонецЕсли;
		
		ПараметрыНастройкиНалогаОтчета = ПараметрыДетальнойНастройки[Строка.Ссылка];
		
		Если ПараметрыНастройкиНалогаОтчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для ИндексПараметра = 0 По ПараметрыНастройкиНалогаОтчета.ВГраница() Цикл
			
			ОписаниеПараметра = ПараметрыНастройкиНалогаОтчета[ИндексПараметра];
			
			Если ОписаниеПараметра = "ПорядокУплатыНалоговНаМестах" Тогда
				Продолжить;
			КонецЕсли;
			
			СпособОписанияВариантов = ТипЗнч(ОписаниеПараметра.Варианты);
			Если СпособОписанияВариантов = Тип("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства") Тогда
				
				ЗначениеПараметра = (УсловияВыбранныеПользователем.Найти(ОписаниеПараметра.Варианты) <> Неопределено);
				
				ДобавитьЗначениеДетальнойНастройки(
					ЗначенияДетальнойНастройки,
					Строка.Ссылка,
					ИндексПараметра,
					ЗначениеПараметра);
				
			ИначеЕсли СпособОписанияВариантов = Тип("ТаблицаЗначений") Тогда
				
				ЗначениеПараметра = 0; // Вариант по умолчанию
				Для Каждого Вариант Из ОписаниеПараметра.Варианты Цикл
					Если УсловияВыбранныеПользователем.Найти(Вариант.Условие) <> Неопределено Тогда
						ЗначениеПараметра = ОписаниеПараметра.Варианты.Индекс(Вариант);
					КонецЕсли;
				КонецЦикла;
				
				ДобавитьЗначениеДетальнойНастройки(
					ЗначенияДетальнойНастройки,
					Строка.Ссылка,
					ИндексПараметра,
					ЗначениеПараметра);
					
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, ТекущаяДата) Тогда
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Наименование = "Патентная система налогообложения (ПСН)";
		НоваяСтрока.Включен = Истина;
		НоваяСтрока.ВключаетсяПользователем = Ложь;
		НоваяСтрока.Идентификатор = "Патент";
	КонецЕсли;
	
	// Для ИП, не применяющих ОСНО, добавляем вручную настройку для оповещения о сроках сдачи 3-НДФЛ.
	Если Не (ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) И УчетнаяПолитика.ПлательщикНДФЛ(Организация, ТекущаяДата)) Тогда
		ИдентификаторЗадачи = "НДФЛ_Предприниматель";
		ПравилоНДФЛ_ИП = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(ИдентификаторЗадачи, "2013_ИП_Декларация");
		Если ПравилоНДФЛ_ИП <> Неопределено Тогда
			НастройкаВключена = ВключенныеПравила.Найти(ПравилоНДФЛ_ИП, "Правило");
			
			НоваяСтрока = Дерево.Строки.Добавить();
			НоваяСтрока.Наименование = НСтр("ru = 'Налог на доходы физических лиц'");
			НоваяСтрока.Ссылка = ПравилоНДФЛ_ИП;
			НоваяСтрока.Включен = НастройкаВключена <> Неопределено И НастройкаВключена.ВключеноПользователем;
			НоваяСтрока.ВключаетсяПользователем = Истина;
			НоваяСтрока.Идентификатор = "НДФЛ_ФизЛицо"; // Для связи со страницей общей формы "НалогиИОтчеты"
		КонецЕсли;
	КонецЕсли;
	
	// ВТОРОЙ УРОВЕНЬ ДЕРЕВА
	
	// Порядок уплаты нефедеральных налогов
	ПорядокУплатыНефедеральныхНалогов = РегистрыСведений.ПорядокУплатыНалоговНаМестах.ПорядокУплатыРегиональныхМестныхНалогов(Организация, ТекущаяДата);
	
	Свойства = Новый Структура("КодКонтролирующегоОргана, ВидКонтролирующегоОргана",
		"", Перечисления.ТипыКонтролирующихОрганов.ФНС);
	
	КодыКонтролирующихОрганов = Новый Соответствие;
	
	НалоговыеОрганы = ПорядокУплатыНефедеральныхНалогов.ВыгрузитьКолонку("РегистрацияВНалоговомОргане");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НалоговыеОрганы", НалоговыеОрганы);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегистрацииВНалоговомОргане.Ссылка КАК РегистрацияВНалоговомОргане,
	|	РегистрацииВНалоговомОргане.Код КАК КодКонтролирующегоОргана
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Ссылка В(&НалоговыеОрганы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КодыКонтролирующихОрганов.Вставить(Выборка.РегистрацияВНалоговомОргане, Выборка.КодКонтролирующегоОргана);
	КонецЦикла;
	
	Для Каждого ПорядокУплатыНалога Из ПорядокУплатыНефедеральныхНалогов Цикл
		
		РодительНалог = Дерево.Строки.Найти(ПорядокУплатыНалога.Налог, "Ссылка");
		
		Если РодительНалог <> Неопределено Тогда
			
			Если ЗадачиИсключения.Найти(ПорядокУплатыНалога.Налог) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = РодительНалог.Строки.Добавить();
			НоваяСтрока.Ссылка = ПорядокУплатыНалога.Налог;
			НоваяСтрока.РегистрацияВНалоговомОргане = ПорядокУплатыНалога.РегистрацияВНалоговомОргане;
			НоваяСтрока.Ключ = Строка(ПорядокУплатыНалога.Налог.УникальныйИдентификатор())
				+ Строка(ПорядокУплатыНалога.РегистрацияВНалоговомОргане.УникальныйИдентификатор());
			НоваяСтрока.ВключаетсяПользователем = Ложь;
			НоваяСтрока.Включен = РодительНалог.Включен;
			НоваяСтрока.ЕстьДетальнаяНастройка = Истина;
			НоваяСтрока.ДетальнаяНастройкаПредставление = ПорядокУплатыНалога.Описание;
			
			Если ЗначениеЗаполнено(ПорядокУплатыНалога.РегистрацияВНалоговомОргане) Тогда
				Свойства.КодКонтролирующегоОргана = КодыКонтролирующихОрганов[ПорядокУплатыНалога.РегистрацияВНалоговомОргане];
				НоваяСтрока.Наименование = РегламентированнаяОтчетностьВызовСервера.ПредставлениеКонтролирующегоОргана(Свойства);
			Иначе
				НоваяСтрока.Наименование = НСтр("ru = 'По месту нахождения организации'");
			КонецЕсли;
			
			ПараметрыНастройкиНалогаОтчета = ПараметрыДетальнойНастройки[НоваяСтрока.Ключ];
			Если ПараметрыНастройкиНалогаОтчета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИндексПараметра = ПараметрыНастройкиНалогаОтчета.Найти("ПорядокУплатыНалоговНаМестах");
			Если ИндексПараметра = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПорядокУплаты = Новый Структура;
			СтруктураПорядокУплаты.Вставить("Период");
			СтруктураПорядокУплаты.Вставить("Налог");
			СтруктураПорядокУплаты.Вставить("СрокУплатыНалогаМесяцев");
			СтруктураПорядокУплаты.Вставить("СрокУплатыНалогаДней");
			СтруктураПорядокУплаты.Вставить("УплачиваютсяАвансы");
			СтруктураПорядокУплаты.Вставить("СрокУплатыАвансаМесяцев");
			СтруктураПорядокУплаты.Вставить("СрокУплатыАвансаДней");
			СтруктураПорядокУплаты.Вставить("Описание");
			ЗаполнитьЗначенияСвойств(СтруктураПорядокУплаты, ПорядокУплатыНалога);
		
			ДобавитьЗначениеДетальнойНастройки(
				ЗначенияДетальнойНастройки,
				НоваяСтрока.Ключ,
				ИндексПараметра,
				СтруктураПорядокУплаты);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Список отчетов, подчиненных задачам, который составляется пользователем непосредственно
	// Не допускаются правила, которые включаются _автоматически_ и находятся на втором уровне
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Ссылка КАК Правило
	|ПОМЕСТИТЬ ПравилаВключаемыеПользователем
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК Правила
	|ГДЕ
	|	Правила.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.ПравилоВыбраноПользователем)
	|	И НЕ Правила.Ссылка.ПометкаУдаления
	|	И (Правила.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|		ИЛИ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Правила.Ссылка.КонецДействия, МЕСЯЦ, Правила.Ссылка.СрокМесяцев), ДЕНЬ, Правила.Ссылка.СрокДней + 7) >= &ТекущаяДата) 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Правило.Владелец КАК Задача,
	|	Правила.Правило КАК Ссылка,
	|	Правила.Правило.Наименование КАК Наименование,
	|	ИСТИНА КАК ВключаетсяПользователем,
	|	ВЫБОР
	|		КОГДА ВключенныеПравила.Правило ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Включен
	|ИЗ
	|	ПравилаВключаемыеПользователем КАК Правила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВключенныеПравила КАК ВключенныеПравила
	|		ПО Правила.Правило = ВключенныеПравила.Правило
	|
	|УПОРЯДОЧИТЬ ПО
	|	Правила.Правило.РеквизитДопУпорядочивания
	|ИТОГИ
	|	МАКСИМУМ(Включен)
	|ПО
	|	Задача";
	
	ВыборкаЗадач = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗадач.Следующий() Цикл
		
		Родитель = Дерево.Строки.Найти(ВыборкаЗадач.Задача, "Ссылка");
		Если Родитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗадачиИсключения.Найти(ВыборкаЗадач.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Родитель.Включен = Родитель.Включен Или ВыборкаЗадач.Включен;
		
		Выборка = ВыборкаЗадач.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			Если ЗадачиИсключения.Найти(Выборка.Ссылка) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Родитель.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
	// Список подакцизных товаров и значения их детальной настройки
	
	Акцизы = Справочники.ЗадачиБухгалтера.НайтиПоКоду("Акцизы");
	Если Не Акцизы.Пустая() Тогда
		РодительАкцизы = Дерево.Строки.Найти(Акцизы, "Ссылка");
	Иначе
		РодительАкцизы = Неопределено;
	КонецЕсли;
	
	Если РодительАкцизы <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",        Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыПодакцизныхТоваров.Ссылка КАК Ссылка,
		|	ВидыПодакцизныхТоваров.Порядок КАК Порядок,
		|	ПРЕДСТАВЛЕНИЕ(ВидыПодакцизныхТоваров.Ссылка) КАК Наименование,
		|	ВЫБОР
		|		КОГДА ПорядокУплатыАкцизов.ВидТовара ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Включен,
		|	ЕСТЬNULL(ПорядокУплатыАкцизов.ЛьготныйСрокУплаты, ЛОЖЬ) КАК ЛьготныйСрокУплаты,
		|	ЕСТЬNULL(ПорядокУплатыАкцизов.АвансыПриЗакупкеСырья, ЛОЖЬ) КАК АвансыПриЗакупкеСырья
		|ИЗ
		|	Перечисление.ВидыПодакцизныхТоваров КАК ВидыПодакцизныхТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
		|		ПО ВидыПодакцизныхТоваров.Ссылка = ПорядокУплатыАкцизов.ВидТовара
		|			И (ПорядокУплатыАкцизов.Организация = &Организация)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Отбор = Новый Структура;
		Отбор.Вставить("ЛьготныйСрокУплаты");
		Отбор.Вставить("АвансыПриЗакупкеСырья");
		
		ОрганизацияПлатитАкцизы = Ложь;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗадачиИсключения.Найти(Выборка.Ссылка) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = РодительАкцизы.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ВключаетсяПользователем = Истина;
			
			// Определим, как настройка выполнена сейчас
			ПараметрыНастройкиВидаАкциза = ПараметрыДетальнойНастройки[Выборка.Ссылка];
			
			Если ПараметрыНастройкиВидаАкциза = Неопределено Тогда
				// Не требует настройки
			Иначе
				
				ЗаполнитьЗначенияСвойств(Отбор, Выборка);
				
				Для ИндексЭлементаНастройки = 0 По ПараметрыНастройкиВидаАкциза.Количество()-1 Цикл
					
					ЭлементНастройки = ПараметрыНастройкиВидаАкциза[ИндексЭлементаНастройки];
					
					Настройка = ЭлементНастройки.Варианты.НайтиСтроки(Отбор);
					Если Настройка.Количество() = 1 Тогда
						
						ДобавитьЗначениеДетальнойНастройки(
							ЗначенияДетальнойНастройки,
							Выборка.Ссылка,
							ИндексЭлементаНастройки,
							ЭлементНастройки.Варианты.Индекс(Настройка[0]));
							
					КонецЕсли;
						
				КонецЦикла; // По элементам настройки
				
				НоваяСтрока.ЕстьДетальнаяНастройка = Истина;
				НоваяСтрока.ДетальнаяНастройкаПредставление = ПредставлениеДетальнойНастройки(
					ПараметрыНастройкиВидаАкциза,
					ЗначенияДетальнойНастройки[Выборка.Ссылка]);
					
			КонецЕсли; // Закончили считывать настройку
			
		КонецЦикла; // По видам товаров (элементам выборки)
		
	КонецЕсли; // Акцизы
	
	// Условия, выбираемые в списке
	
	НастройкиПримененияТребований = РегистрыСведений.ВариантыПримененияТребованийЗаконодательства.НастройкиПримененияТребований();
	
	Для Каждого Настройка Из НастройкиПримененияТребований Цикл
		
		Если Не Настройка.ВыбиратьВСписке Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Настройка.Варианты) <> Тип("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства") Тогда
			Продолжить;
		КонецЕсли;
		
		Родитель = Дерево.Строки.Найти(Настройка.Задача ,"Ссылка");
		Если Родитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗадачиИсключения.Найти(Настройка.Задача) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗадачиИсключения.Найти(Настройка.Варианты) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Родитель.Строки.Добавить();
		НоваяСтрока.Ссылка                  = Настройка.Варианты;
		НоваяСтрока.Наименование            = Настройка.Наименование;
		НоваяСтрока.ВключаетсяПользователем = Истина;
		НоваяСтрока.Включен                 = (УсловияВыбранныеПользователем.Найти(НоваяСтрока.Ссылка) <> Неопределено);
		
	КонецЦикла;
	
	Для Каждого Строка Из Дерево.Строки Цикл
		
		Если Строка.Идентификатор = "БухгалтерскаяОтчетность" ИЛИ Строка.Идентификатор = "НалогНаПрибыль" Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.ЕстьДетальнаяНастройка = Истина;
		Строка.ДетальнаяНастройкаПредставление = ПредставлениеДетальнойНастройки(
			ПараметрыДетальнойНастройки[Строка.Ссылка],
			ЗначенияДетальнойНастройки[Строка.Ссылка]);
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Организация",                 Организация);
	Результат.Вставить("Дерево",                      Дерево);
	Результат.Вставить("ПараметрыДетальнойНастройки", ПараметрыДетальнойНастройки);
	Результат.Вставить("ЗначенияДетальнойНастройки",  ЗначенияДетальнойНастройки);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция ПредставлениеДетальнойНастройки(ПараметрыДетальнойНастройки, ЗначенияДетальнойНастройки) Экспорт
	
	Если ПараметрыДетальнойНастройки = Неопределено Или ЗначенияДетальнойНастройки = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Представления = Новый Массив;
	
	Для Индекс = 0 По ЗначенияДетальнойНастройки.ВГраница() Цикл
		
		ОписаниеПараметра = ПараметрыДетальнойНастройки[Индекс];
		ЗначениеПараметра = ЗначенияДетальнойНастройки[Индекс];
		
		Если ЗначениеПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеПараметра = "ПорядокУплатыНалоговНаМестах" Тогда
			Представления.Добавить(ЗначениеПараметра.Описание);
		Иначе
			ЗначениеПараметра = ОписаниеПараметра.Варианты[ЗначениеПараметра];
			Представления.Добавить(ЗначениеПараметра.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(Представления, "; ");
	
КонецФункции

Процедура ЗаписатьДанные(Параметры, АдресХранилища) Экспорт
	
	Организация                 = Параметры.Организация;
	Дерево                      = Параметры.Дерево;
	ЗначенияДетальнойНастройки  = Параметры.ЗначенияДетальнойНастройки;
	ПараметрыДетальнойНастройки = Параметры.ПараметрыДетальнойНастройки;
	
	// Запишем:
	// НалогиОтчеты
	// ПорядокУплатыАкцизов
	// ВариантыПримененияТребованийЗаконодательства
	// ПорядокУплатыНалоговНаМестах
	
	// 1. Список налогов
	
	// НалогиОтчеты
	НаборЗаписейНалогиОтчеты = РегистрыСведений.НалогиОтчеты.СоздатьНаборЗаписей();
	НаборЗаписейНалогиОтчеты.Отбор.Организация.Установить(Организация);
	
	ТипНастройки = Метаданные.РегистрыСведений.НалогиОтчеты.Измерения.НалогОтчет.Тип;
	
	НалогиУплачиваемыеНаМестах = РегистрыСведений.ПорядокУплатыНалоговНаМестах.НалогиПорядокКоторыхУстанавливаетсяНаМестах();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВключаетсяПользователем", Истина);
	Отбор.Вставить("Включен",                 Истина);
	Для Каждого Строка Из Дерево.Строки.НайтиСтроки(Отбор, Истина) Цикл
		
		Если Строка.Строки.Количество() > 0 И НалогиУплачиваемыеНаМестах.Найти(Строка.Ссылка) = Неопределено Тогда
			Продолжить; // Значение определяется подчиненными строками
		КонецЕсли;
		
		Если Не ТипНастройки.СодержитТип(ТипЗнч(Строка.Ссылка)) Тогда
			Продолжить; // Это какая-то другая настройка
		КонецЕсли;
		
		Запись = НаборЗаписейНалогиОтчеты.Добавить();
		Запись.НалогОтчет  = Строка.Ссылка;
		Запись.Организация = Организация;
		
	КонецЦикла;
	
	// 2. Детальные настройки:
	// - ПорядокУплатыАкцизов
	// - ВариантыПримененияТребованийЗаконодательства
	// - ПорядокУплатыНалоговНаМестах
	
	НаборЗаписейПорядокУплатыАкцизов = РегистрыСведений.ПорядокУплатыАкцизов.СоздатьНаборЗаписей();
	НаборЗаписейПорядокУплатыАкцизов.Отбор.Организация.Установить(Организация);
	
	НаборЗаписейВариантыПримененияТребованийЗаконодательства = РегистрыСведений.ВариантыПримененияТребованийЗаконодательства.СоздатьНаборЗаписей();
	НаборЗаписейВариантыПримененияТребованийЗаконодательства.Отбор.Организация.Установить(Организация);
	
	НаборЗаписейПорядокУплатыНалоговНаМестах = РегистрыСведений.ПорядокУплатыНалоговНаМестах.СоздатьНаборЗаписей();
	НаборЗаписейПорядокУплатыНалоговНаМестах.Отбор.Организация.Установить(Организация);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Включен", Истина);
	Для Каждого Строка Из Дерево.Строки.НайтиСтроки(Отбор, Истина) Цикл
		
		Если ТипЗнч(Строка.Ссылка) = Тип("ПеречислениеСсылка.ВидыПодакцизныхТоваров") Тогда
			
			Запись = НаборЗаписейПорядокУплатыАкцизов.Добавить();
			Запись.Организация = Организация;
			Запись.ВидТовара   = Строка.Ссылка;
			
			// Значения остальных ресурсов возьмем из настройки
			ПараметрыНастройкиВидаТовара = ПараметрыДетальнойНастройки[Строка.Ссылка];
			Если ПараметрыНастройкиВидаТовара = Неопределено Тогда
				Продолжить; // Все по умолчанию
			КонецЕсли;
			
			ЗначенияНастройкиВидаТовара = ЗначенияДетальнойНастройки[Строка.Ссылка];
			Для Индекс = 0 По ПараметрыНастройкиВидаТовара.ВГраница() Цикл
				Параметр                = ПараметрыНастройкиВидаТовара[Индекс];
				ИндексЗначенияПараметра = ЗначенияНастройкиВидаТовара[Индекс];
				ЗначениеПараметра       = Параметр.Варианты[ИндексЗначенияПараметра];
				ЗаполнитьЗначенияСвойств(Запись, ЗначениеПараметра);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Строка.Ссылка) = Тип("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства") Тогда
			
			// Требования, выбираемые в списке
			Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
				Запись = НаборЗаписейВариантыПримененияТребованийЗаконодательства.Добавить();
				Запись.Организация = Организация;
				Запись.Условие     = Строка.Ссылка;
			КонецЕсли;
			
		ИначеЕсли Строка.ЕстьДетальнаяНастройка Тогда
			
			// Детальная настройка, кроме акцизов
			
			Если Строка.Ключ = "" Тогда
				ПараметрыНастройкиВидаТовара = ПараметрыДетальнойНастройки[Строка.Ссылка];
			Иначе
				ПараметрыНастройкиВидаТовара = ПараметрыДетальнойНастройки[Строка.Ключ];
			КонецЕсли;
			Если ПараметрыНастройкиВидаТовара = Неопределено Тогда
				Продолжить; // Не требуется детальная настройка
			КонецЕсли;
			
			Если Строка.Ключ = "" Тогда
				ЗначенияНастройкиВидаТовара = ЗначенияДетальнойНастройки[Строка.Ссылка];
			Иначе
				ЗначенияНастройкиВидаТовара = ЗначенияДетальнойНастройки[Строка.Ключ];
			КонецЕсли;
			Для Индекс = 0 По ПараметрыНастройкиВидаТовара.ВГраница() Цикл
				
				Параметр          = ПараметрыНастройкиВидаТовара[Индекс];
				Если Параметр = "ПорядокУплатыНалоговНаМестах" Тогда
					
					ЗначениеПараметра = ЗначенияНастройкиВидаТовара[Индекс];
					
					Запись = НаборЗаписейПорядокУплатыНалоговНаМестах.Добавить();
					Запись.Организация					= Организация;
					Запись.Налог						= Строка.Ссылка;
					Запись.РегистрацияВНалоговомОргане	= Строка.РегистрацияВНалоговомОргане;
					ЗаполнитьЗначенияСвойств(Запись, ЗначениеПараметра);
					
				Иначе
					
					// ВариантыПримененияТребованийЗаконодательства
					ЗначениеПараметра = ЗначенияНастройкиВидаТовара[Индекс]; // Булево или индекс
					
					СпособОписанияВариантов = ТипЗнч(Параметр.Варианты);
					Если ЗначениеПараметра = Истина И СпособОписанияВариантов = Тип("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства") Тогда
						Условие = Параметр.Варианты;
					ИначеЕсли СпособОписанияВариантов = Тип("ТаблицаЗначений") Тогда
						Условие = Параметр.Варианты[ЗначениеПараметра].Условие;
					Иначе
						Условие = Неопределено;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Условие) Тогда
						Запись = НаборЗаписейВариантыПримененияТребованийЗаконодательства.Добавить();
						Запись.Организация = Организация;
						Запись.Условие     = Условие;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	
	// Собственно запись
	НачатьТранзакцию();

	НаборЗаписейНалогиОтчеты.Записать();
	НаборЗаписейПорядокУплатыАкцизов.Записать();
	НаборЗаписейВариантыПримененияТребованийЗаконодательства.Записать();
	
	// прочитаем данные о настройках за предыдущие периоды, чтобы не потерять их
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПорядокУплатыНалоговНаМестах");
	ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НовыеЗаписи", НаборЗаписейПорядокУплатыНалоговНаМестах.Выгрузить(,"Период, Организация, Налог, РегистрацияВНалоговомОргане"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НовыеЗаписи.Период КАК Период,
	|	НовыеЗаписи.Организация КАК Организация,
	|	НовыеЗаписи.Налог КАК Налог,
	|	НовыеЗаписи.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ НовыеЗаписи
	|ИЗ
	|	&НовыеЗаписи КАК НовыеЗаписи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация,
	|	Налог,
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокУплатыНалоговНаМестах.Период,
	|	ПорядокУплатыНалоговНаМестах.Организация,
	|	ПорядокУплатыНалоговНаМестах.Налог,
	|	ПорядокУплатыНалоговНаМестах.РегистрацияВНалоговомОргане,
	|	ПорядокУплатыНалоговНаМестах.СрокУплатыНалогаМесяцев,
	|	ПорядокУплатыНалоговНаМестах.СрокУплатыНалогаДней,
	|	ПорядокУплатыНалоговНаМестах.УплачиваютсяАвансы,
	|	ПорядокУплатыНалоговНаМестах.СрокУплатыАвансаМесяцев,
	|	ПорядокУплатыНалоговНаМестах.СрокУплатыАвансаДней,
	|	ПорядокУплатыНалоговНаМестах.Описание
	|ИЗ
	|	РегистрСведений.ПорядокУплатыНалоговНаМестах КАК ПорядокУплатыНалоговНаМестах
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеЗаписи КАК НовыеЗаписи
	|		ПО ПорядокУплатыНалоговНаМестах.Период = НовыеЗаписи.Период
	|			И ПорядокУплатыНалоговНаМестах.Организация = НовыеЗаписи.Организация
	|			И ПорядокУплатыНалоговНаМестах.Налог = НовыеЗаписи.Налог
	|			И ПорядокУплатыНалоговНаМестах.РегистрацияВНалоговомОргане = НовыеЗаписи.РегистрацияВНалоговомОргане
	|ГДЕ
	|	ПорядокУплатыНалоговНаМестах.Организация = &Организация
	|	И НовыеЗаписи.Период ЕСТЬ NULL";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НаборЗаписейПорядокУплатыНалоговНаМестах.Добавить(), Выборка);
	КонецЦикла;
	
	НаборЗаписейПорядокУплатыНалоговНаМестах.Записать();
	
	РегистрыСведений.ИзбранныеРегламентированныеОтчеты.ОбновитьИЗаполнитьИзбранныеРегламентированныеОтчеты(Организация, Дерево);
	
	ЗафиксироватьТранзакцию();
	
	РегистрыСведений.ЗадачиБухгалтера.ОбновитьИЗаполнитьЗадачиНачалаРаботы(Организация);
	ИзмененыРегулярныеЗадачи = РегистрыСведений.ЗадачиБухгалтера.ОбновитьИЗаполнитьРегулярныеЗадачи(
		Организация, КалендарьБухгалтера.УпреждениеЗаполненияСписка(), Ложь);
	МобильноеПриложениеПредприниматель.ОтправитьУведомленияОЗадачах();
	Если ИзмененыРегулярныеЗадачи Тогда
		СинхронизацияСКалендаремGoogle.СинхронизироватьЗадачи(Организация);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Неопределено, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаписатьДанныеВыборочно(Параметры) Экспорт
	
	Организация                 = Параметры.Организация;
	Дерево                      = Параметры.Дерево;
	ЗначенияДетальнойНастройки  = Параметры.ЗначенияДетальнойНастройки;
	ПараметрыДетальнойНастройки = Параметры.ПараметрыДетальнойНастройки;
	Полное                      = Параметры.ПолноеДерево;
	
	// Запишем:
	// НалогиОтчеты
	// ПорядокУплатыАкцизов
	// ВариантыПримененияТребованийЗаконодательства
	// ПорядокУплатыНалоговНаМестах
	
	// 1. Список налогов
	
	// НалогиОтчеты
	ТипНастройки = Метаданные.РегистрыСведений.НалогиОтчеты.Измерения.НалогОтчет.Тип;
	
	НалогиУплачиваемыеНаМестах = РегистрыСведений.ПорядокУплатыНалоговНаМестах.НалогиПорядокКоторыхУстанавливаетсяНаМестах();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВключаетсяПользователем", Истина);
	Для Каждого Строка Из Дерево.Строки.НайтиСтроки(Отбор, Истина) Цикл
		
		Если Строка.Строки.Количество() > 0 И НалогиУплачиваемыеНаМестах.Найти(Строка.Ссылка) = Неопределено Тогда
			Продолжить; // Значение определяется подчиненными строками
		КонецЕсли;
		
		Если Не ТипНастройки.СодержитТип(ТипЗнч(Строка.Ссылка)) Тогда
			Продолжить; // Это какая-то другая настройка
		КонецЕсли;
		
		НаборЗаписейНалогиОтчеты = РегистрыСведений.НалогиОтчеты.СоздатьНаборЗаписей();
		НаборЗаписейНалогиОтчеты.Отбор.Организация.Установить(Организация);
		НаборЗаписейНалогиОтчеты.Отбор.НалогОтчет.Установить(Строка.Ссылка);
		Если Строка.Включен Тогда
			НаборЗаписейНалогиОтчеты.Прочитать();
			Если НаборЗаписейНалогиОтчеты.Количество() = 0 Тогда
				Запись = НаборЗаписейНалогиОтчеты.Добавить();
				Запись.НалогОтчет  = Строка.Ссылка;
				Запись.Организация = Организация;
			КонецЕсли;
		КонецЕсли;
		НаборЗаписейНалогиОтчеты.Записать();
		
	КонецЦикла;
	
	// 2. Детальные настройки:
	// - ПорядокУплатыАкцизов
	// - ВариантыПримененияТребованийЗаконодательства
	// - ПорядокУплатыНалоговНаМестах
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			Для Каждого Строка Из СтрокаДерева.Строки Цикл
				
				ЗаписатьВыборочноДополнительныеНастройки(Организация, Строка, ПараметрыДетальнойНастройки, ЗначенияДетальнойНастройки);
				
			КонецЦикла;
		Иначе
			
			ЗаписатьВыборочноДополнительныеНастройки(Организация, СтрокаДерева, ПараметрыДетальнойНастройки, ЗначенияДетальнойНастройки);
			
		КонецЕсли;
	КонецЦикла;
	
	РегистрыСведений.ИзбранныеРегламентированныеОтчеты.ОбновитьИЗаполнитьИзбранныеРегламентированныеОтчеты(Организация, Дерево);
	ИзмененыРегулярныеЗадачи = РегистрыСведений.ЗадачиБухгалтера.ОбновитьИЗаполнитьРегулярныеЗадачи(
		Организация, КалендарьБухгалтера.УпреждениеЗаполненияСписка(), Ложь);
	МобильноеПриложениеПредприниматель.ОтправитьУведомленияОЗадачах();
	Если ИзмененыРегулярныеЗадачи Тогда
		СинхронизацияСКалендаремGoogle.СинхронизироватьЗадачи(Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьВыборочноДополнительныеНастройки(Организация, Строка, ПараметрыДетальнойНастройки, ЗначенияДетальнойНастройки)
	
	Если ТипЗнч(Строка.Ссылка) = Тип("ПеречислениеСсылка.ВидыПодакцизныхТоваров") Тогда
		
		НаборЗаписейПорядокУплатыАкцизов = РегистрыСведений.ПорядокУплатыАкцизов.СоздатьНаборЗаписей();
		НаборЗаписейПорядокУплатыАкцизов.Отбор.Организация.Установить(Организация);
		НаборЗаписейПорядокУплатыАкцизов.Отбор.ВидТовара.Установить(Строка.Ссылка);
		Если Строка.Включен Тогда
			НаборЗаписейПорядокУплатыАкцизов.Прочитать();
			Если НаборЗаписейПорядокУплатыАкцизов.Количество() = 0 Тогда
				Запись = НаборЗаписейПорядокУплатыАкцизов.Добавить();
				Запись.Организация = Организация;
				Запись.ВидТовара   = Строка.Ссылка;
			Иначе
				Запись = НаборЗаписейПорядокУплатыАкцизов[0];
			КонецЕсли;
			
			// Значения остальных ресурсов возьмем из настройки
			ПараметрыНастройкиВидаТовара = ПараметрыДетальнойНастройки[Строка.Ссылка];
			Если ПараметрыНастройкиВидаТовара <> Неопределено Тогда
				ЗначенияНастройкиВидаТовара = ЗначенияДетальнойНастройки[Строка.Ссылка];
				Для Индекс = 0 По ПараметрыНастройкиВидаТовара.ВГраница() Цикл
					Параметр                = ПараметрыНастройкиВидаТовара[Индекс];
					ИндексЗначенияПараметра = ЗначенияНастройкиВидаТовара[Индекс];
					ЗначениеПараметра       = Параметр.Варианты[ИндексЗначенияПараметра];
					ЗаполнитьЗначенияСвойств(Запись, ЗначениеПараметра);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		НаборЗаписейПорядокУплатыАкцизов.Записать();
		
	ИначеЕсли ТипЗнч(Строка.Ссылка) = Тип("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства") Тогда
		
		// Требования, выбираемые в списке
		Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			НаборЗаписейВариантыПримененияТребованийЗаконодательства = РегистрыСведений.ВариантыПримененияТребованийЗаконодательства.СоздатьНаборЗаписей();
			НаборЗаписейВариантыПримененияТребованийЗаконодательства.Отбор.Организация.Установить(Организация);
			НаборЗаписейВариантыПримененияТребованийЗаконодательства.Отбор.Условие.Установить(Строка.Ссылка);
			Если Строка.Включен Тогда
				НаборЗаписейВариантыПримененияТребованийЗаконодательства.Прочитать();
				Если НаборЗаписейВариантыПримененияТребованийЗаконодательства.Количество() = 0 Тогда
					Запись = НаборЗаписейВариантыПримененияТребованийЗаконодательства.Добавить();
					Запись.Организация = Организация;
					Запись.Условие     = Строка.Ссылка;
				Иначе
					Запись = НаборЗаписейВариантыПримененияТребованийЗаконодательства[0];
				КонецЕсли;
			КонецЕсли;
			НаборЗаписейВариантыПримененияТребованийЗаконодательства.Записать();
		КонецЕсли;
		
	ИначеЕсли Строка.ЕстьДетальнаяНастройка Тогда
		
		// Детальная настройка, кроме акцизов
		
		Если Строка.Ключ = "" Тогда
			ПараметрыНастройкиВидаТовара = ПараметрыДетальнойНастройки[Строка.Ссылка];
		Иначе
			ПараметрыНастройкиВидаТовара = ПараметрыДетальнойНастройки[Строка.Ключ];
		КонецЕсли;
		Если ПараметрыНастройкиВидаТовара = Неопределено Тогда
			Возврат; // Не требуется детальная настройка
		КонецЕсли;
		
		Если Строка.Ключ = "" Тогда
			ЗначенияНастройкиВидаТовара = ЗначенияДетальнойНастройки[Строка.Ссылка];
		Иначе
			ЗначенияНастройкиВидаТовара = ЗначенияДетальнойНастройки[Строка.Ключ];
		КонецЕсли;
		Для Индекс = 0 По ПараметрыНастройкиВидаТовара.ВГраница() Цикл
			
			Параметр          = ПараметрыНастройкиВидаТовара[Индекс];
			Если Параметр = "ПорядокУплатыНалоговНаМестах" Тогда
				
				НаборЗаписейПорядокУплатыНалоговНаМестах = РегистрыСведений.ПорядокУплатыНалоговНаМестах.СоздатьНаборЗаписей();
				НаборЗаписейПорядокУплатыНалоговНаМестах.Отбор.Организация.Установить(Организация);
				НаборЗаписейПорядокУплатыНалоговНаМестах.Отбор.Налог.Установить(Строка.Ссылка);
				НаборЗаписейПорядокУплатыНалоговНаМестах.Отбор.РегистрацияВНалоговомОргане.Установить(Строка.РегистрацияВНалоговомОргане);
				НаборЗаписейПорядокУплатыНалоговНаМестах.Отбор.Период.Установить(НачалоГода(ТекущаяДатаСеанса()));
				Если Строка.Включен Тогда
					НаборЗаписейПорядокУплатыНалоговНаМестах.Прочитать();
					ЗначениеПараметра = ЗначенияНастройкиВидаТовара[Индекс];
					Если НаборЗаписейПорядокУплатыНалоговНаМестах.Количество() = 0 Тогда
						Запись = НаборЗаписейПорядокУплатыНалоговНаМестах.Добавить();
						Запись.Организация					= Организация;
						Запись.Налог						= Строка.Ссылка;
						Запись.РегистрацияВНалоговомОргане	= Строка.РегистрацияВНалоговомОргане;
					Иначе
						Запись = НаборЗаписейПорядокУплатыНалоговНаМестах[0];
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(Запись, ЗначениеПараметра);
				КонецЕсли;
				НаборЗаписейПорядокУплатыНалоговНаМестах.Записать();
				
			Иначе
				
				// ВариантыПримененияТребованийЗаконодательства
				ЗначениеПараметра = ЗначенияНастройкиВидаТовара[Индекс]; // Булево или индекс
				
				СпособОписанияВариантов = ТипЗнч(Параметр.Варианты);
				Если ЗначениеПараметра = Истина И СпособОписанияВариантов = Тип("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства") Тогда
					Условие = Параметр.Варианты;
				ИначеЕсли СпособОписанияВариантов = Тип("ТаблицаЗначений") Тогда
					Условие = Параметр.Варианты[ЗначениеПараметра].Условие;
				Иначе
					Условие = Неопределено;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Условие) Тогда
					НаборЗаписейВариантыПримененияТребованийЗаконодательства = РегистрыСведений.ВариантыПримененияТребованийЗаконодательства.СоздатьНаборЗаписей();
					НаборЗаписейВариантыПримененияТребованийЗаконодательства.Отбор.Организация.Установить(Организация);
					НаборЗаписейВариантыПримененияТребованийЗаконодательства.Отбор.Условие.Установить(Условие);
					Если Строка.Включен Тогда
						НаборЗаписейВариантыПримененияТребованийЗаконодательства.Прочитать();
						Если НаборЗаписейВариантыПримененияТребованийЗаконодательства.Количество() = 0 Тогда
							Запись = НаборЗаписейВариантыПримененияТребованийЗаконодательства.Добавить();
							Запись.Организация = Организация;
							Запись.Условие     = Условие;
						Иначе
							Запись = НаборЗаписейВариантыПримененияТребованийЗаконодательства[0];
						КонецЕсли;
					КонецЕсли;
					НаборЗаписейВариантыПримененияТребованийЗаконодательства.Записать();
				ИначеЕсли СпособОписанияВариантов = Тип("ТаблицаЗначений") Тогда // перебор вариантов, т.к. отдельные варианты не имеют условий
					Для Каждого СтрокаТаблицы ИЗ Параметр.Варианты Цикл
						Если ЗначениеЗаполнено(СтрокаТаблицы.Условие) Тогда
							НаборЗаписейВариантыПримененияТребованийЗаконодательства = РегистрыСведений.ВариантыПримененияТребованийЗаконодательства.СоздатьНаборЗаписей();
							НаборЗаписейВариантыПримененияТребованийЗаконодательства.Отбор.Организация.Установить(Организация);
							НаборЗаписейВариантыПримененияТребованийЗаконодательства.Отбор.Условие.Установить(СтрокаТаблицы.Условие);
							НаборЗаписейВариантыПримененияТребованийЗаконодательства.Записать();
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗадачиИсключенияПоТипуОрганизации(Организация, ТекущийПериод = Неопределено)
	
	УсловияИсключения = Перечисления.УсловияПримененияТребованийЗаконодательства.УсловияИсключенияПоТипуОрганизации(Организация, ТекущийПериод);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УсловияИсключения", УсловияИсключения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка КАК Правило,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка.Владелец КАК Задача
	|ПОМЕСТИТЬ ПравилаИсключения
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК ПравилаПредставленияОтчетовУплатыНалоговУсловия
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Условие В(&УсловияИсключения)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Правило,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец КАК Задача
	|ПОМЕСТИТЬ ЗадачиПравилаИсключения
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец В
	|			(ВЫБРАТЬ
	|				ПравилаИсключения.Задача
	|			ИЗ
	|				ПравилаИсключения)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиПравилаИсключения.Правило,
	|	ЗадачиПравилаИсключения.Задача
	|ПОМЕСТИТЬ ВыполняемыеЗадачи
	|ИЗ
	|	ЗадачиПравилаИсключения КАК ЗадачиПравилаИсключения
	|ГДЕ
	|	НЕ ЗадачиПравилаИсключения.Правило В
	|				(ВЫБРАТЬ
	|					ПравилаИсключения.Правило
	|				ИЗ
	|					ПравилаИсключения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиПравилаИсключения.Задача КАК ЗадачаПравило
	|ИЗ
	|	ЗадачиПравилаИсключения КАК ЗадачиПравилаИсключения
	|ГДЕ
	|	НЕ ЗадачиПравилаИсключения.Задача В
	|				(ВЫБРАТЬ
	|					ВыполняемыеЗадачи.Задача
	|				ИЗ
	|					ВыполняемыеЗадачи)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиПравилаИсключения.Задача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаИсключения.Правило
	|ИЗ
	|	ПравилаИсключения КАК ПравилаИсключения
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаИсключения.Правило";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивИсключений = Результат.ВыгрузитьКолонку("ЗадачаПравило");
	Для Каждого Условие ИЗ УсловияИсключения Цикл
		МассивИсключений.Добавить(Условие);
	КонецЦикла;
	
	Возврат МассивИсключений;
	
КонецФункции

Функция ЗаполнитьПараметрыДетальнойНастройки(Организация)
	
	// Параметры детальной настройки
	ПараметрыДетальнойНастройки = Новый Соответствие; 
	// Элемент соответствия описывает все варианты настройки для строки списка.
	// Ключ - Ссылка
	// Значение - Массив с описанием настраиваемых параметров
	
	// Бухгалтерская отчетность
	
	// Порядок уплаты авансовых платежей по налогу на прибыль

	// Акцизы
	НастройкиУплатыАкцизов = РегистрыСведений.ПорядокУплатыАкцизов.НастройкиУплатыАкцизов();
	Для Каждого Настройка Из НастройкиУплатыАкцизов Цикл
		
		// Настройка содержит колонки "ЗаголовокВыбора", "Варианты"
		ДобавитьОписаниеДетальнойНастройки(ПараметрыДетальнойНастройки, Настройка.ВидТовара, Настройка);
		
	КонецЦикла;
	
	// Налоги, порядок уплаты которых устанавливается на региональном или местном уровне
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; // Хранит МестныеНалогиВРазрезеНалоговыхОрганов
	РегистрыСведений.ПорядокУплатыНалоговНаМестах.СоздатьМестныеНалогиВРазрезеНалоговыхОрганов(МенеджерВременныхТаблиц, Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МестныеНалогиВРазрезеНалоговыхОрганов.Налог,
	|	МестныеНалогиВРазрезеНалоговыхОрганов.НалоговыйОрган
	|ИЗ
	|	МестныеНалогиВРазрезеНалоговыхОрганов КАК МестныеНалогиВРазрезеНалоговыхОрганов";
	
	ДецентрализованныеНалоги = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Налог Из ДецентрализованныеНалоги Цикл
		Ключ = Строка(Налог.Налог.УникальныйИдентификатор()) + Строка(Налог.НалоговыйОрган.УникальныйИдентификатор());
		ДобавитьОписаниеДетальнойНастройки(ПараметрыДетальнойНастройки, Ключ, "ПорядокУплатыНалоговНаМестах");
	КонецЦикла;
	
	// Другие требования
	НастройкиПримененияТребований = РегистрыСведений.ВариантыПримененияТребованийЗаконодательства.НастройкиПримененияТребований();
	Для Каждого Настройка Из НастройкиПримененияТребований Цикл
		
		Если Настройка.ВыбиратьВСписке Тогда
			// Не является детальной настройкой - выбирается в основном списке настроек
			Продолжить;
		КонецЕсли;
		
		// Настройка содержит колонки "ЗаголовокВыбора", "Варианты"
		ДобавитьОписаниеДетальнойНастройки(ПараметрыДетальнойНастройки, Настройка.Задача, Настройка);
		
	КонецЦикла;
	
	Возврат ПараметрыДетальнойНастройки;
	
КонецФункции

Функция ДобавитьОписаниеДетальнойНастройки(КоллекцияОписаний, ПредметНастройки, НаборПараметров)
	
	ОписаниеНастройки = КоллекцияОписаний[ПредметНастройки];
	Если ОписаниеНастройки = Неопределено Тогда
		ОписаниеНастройки = Новый Массив;
		КоллекцияОписаний.Вставить(ПредметНастройки, ОписаниеНастройки);
	КонецЕсли;
	
	Если НаборПараметров = "ПорядокУплатыНалоговНаМестах" Тогда
		ОписаниеНастройки.Добавить(НаборПараметров);
	Иначе
		ОписаниеНастройки.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НаборПараметров));
	КонецЕсли;
	
КонецФункции

Функция НовыйЗначенияДетальнойНастройки(ПараметрыДетальнойНастройки)
	
	// См. также ДобавитьЗначениеДетальнойНастройки()
	ЗначенияДетальнойНастройки = Новый Соответствие;
	
	Для Каждого ОписаниеДетальнойНастройки Из ПараметрыДетальнойНастройки Цикл
		
		Настройки = Новый Массив(ОписаниеДетальнойНастройки.Значение.Количество());
		
		ЗначенияДетальнойНастройки.Вставить(ОписаниеДетальнойНастройки.Ключ, Настройки);
		
	КонецЦикла;
	
	Возврат ЗначенияДетальнойНастройки;
	
КонецФункции

Процедура ДобавитьЗначениеДетальнойНастройки(КоллекцияНастроек, ПредметНастройки, ИндексПараметра, ЗначениеПараметра)
	
	// КоллекцияНастроек - это соответствие.
	//  Ключ     - Ссылка 
	//  Значение - Массив
	//   - индекс массива - индекс настраиваемого параметра (строки таблицы из АдресПараметрыДетальнойНастройки)
	//   - элементы
	//       - Число - индекс строки таблицы Варианты, описывающей значение параметра
	//       - Структура - состав свойств как ресурсы регистра ПорядокУплатыНалоговНаМестах
	
	Настройки = КоллекцияНастроек[ПредметНастройки];
	Если Настройки = Неопределено Тогда
		Возврат; // Должна быть инициализирована
	КонецЕсли;
	
	Настройки[ИндексПараметра] = ЗначениеПараметра;
	
КонецПроцедуры

#Область ОбработчикиОбновления

// Удаляет из регистра сведений "НалогиОтчеты" записи с кодами задач,
// которые более не требуется указывать в данном регистре.
//
Процедура ОчиститьНеиспользуемыеНастройки() Экспорт
	
	КодыЗадач = Новый Массив;
	КодыЗадач.Добавить("НДС");
	КодыЗадач.Добавить("ЕНВД");
	
	МассивЗадач = Новый Массив;
	Для Каждого КодЗадачи Из КодыЗадач Цикл
		Задача = Справочники.ЗадачиБухгалтера.НайтиПоКоду(КодЗадачи);
		Если ЗначениеЗаполнено(Задача) Тогда
			МассивЗадач.Добавить(Задача);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалогиОтчеты.Организация КАК Организация,
	|	НалогиОтчеты.НалогОтчет КАК НалогОтчет
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|ГДЕ
	|	НалогиОтчеты.НалогОтчет В(&НалогОтчет)";
	
	Запрос.УстановитьПараметр("НалогОтчет", МассивЗадач);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НаборЗаписейНалогиОтчеты = РегистрыСведений.НалогиОтчеты.СоздатьНаборЗаписей();
			НаборЗаписейНалогиОтчеты.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписейНалогиОтчеты.Отбор.НалогОтчет.Установить(Выборка.НалогОтчет);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейНалогиОтчеты, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
