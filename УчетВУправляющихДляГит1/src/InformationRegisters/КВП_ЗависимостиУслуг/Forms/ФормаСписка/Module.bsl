
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура устанавливает видимость для элементов управления формы.
//
Процедура УстановитьВидимость()
	
	Элементы.Организация.Видимость = 
	       РегистрыСведений.КВП_ЗависимостиУслуг.ПолучитьЗначениеКонстантыНачислениеЗависимыхУслугВРазрезеОрганизаций();
	
	Элементы.Объект.Видимость = 
	       РегистрыСведений.КВП_ЗависимостиУслуг.ПолучитьЗначениеКонстантыУказыватьЗависимостьУслугВРазрезеЗданий();
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает условное оформление для элементов управления формы.
//
Процедура УстановитьУсловноеОформление(ТекущаяУслуга)
	
	// Выделяет ячейки с текущей услугой.
	
	// Условное оформление для колонки "Услуга".
	ЭлементОформленияУслуга = Список.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформленияУслуга.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Услуга");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ТекущаяУслуга;
	ЭлементОтбора.Использование  = Истина;
	
	ЭлементОформленияУслуга.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	ПолеОформления = ЭлементОформленияУслуга.Поля.Элементы.Добавить();
	ПолеОформления.Поле          = Новый ПолеКомпоновкиДанных("Услуга");
	ПолеОформления.Использование = Истина;
	
	// Условное оформление для колонки "УслугаОснование".
	ЭлементОформленияУслугаОснование = Список.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформленияУслугаОснование.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("УслугаОснование");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ТекущаяУслуга;
	ЭлементОтбора.Использование  = Истина;
	
	ЭлементОформленияУслугаОснование.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	ПолеОформления = ЭлементОформленияУслугаОснование.Поля.Элементы.Добавить();
	ПолеОформления.Поле          = Новый ПолеКомпоновкиДанных("УслугаОснование");
	ПолеОформления.Использование = Истина;

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокОбъектов = Новый СписокЗначений;
	ОтборОбъект = Неопределено;
	
	УказыватьЗависимостьУслугВРазрезеЗданий = РегистрыСведений.КВП_ЗависимостиУслуг.ПолучитьЗначениеКонстантыУказыватьЗависимостьУслугВРазрезеЗданий();
	
	Если Параметры.Отбор.Свойство("Объект", ОтборОбъект) Тогда
		
		Параметры.Отбор.Удалить("Объект");
		
		Если УказыватьЗависимостьУслугВРазрезеЗданий Тогда
			
			// Показываем только записи с непустыми Зданиями.
			СписокОбъектов.Добавить(ОтборОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ УказыватьЗависимостьУслугВРазрезеЗданий Тогда
		
		// Показываем только записи с пустыми Зданиями.
		СписокОбъектов.Добавить(Справочники.КВП_Здания.ПустаяСсылка());
		
	КонецЕсли;
	
	Если НЕ СписокОбъектов.Количество() = 0 Тогда
		
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект");
		ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = СписокОбъектов;
	КонецЕсли;
	
	// Если получена текущая услуга, т.е. регистр открыли из
	// другой формы и передали текущую услугу,
	// то отбираем элементы регистра, содержащие данную услугу,
	// и выделяем ее для того, чтобы пользователю было понятно,
	// где услуга является зависимой, а где базой.
	Если Параметры.Свойство("Услуга") Тогда
		
		// Отбираем текущую услугу.
		ГруппаИли = УПЖКХ_ТиповыеМетодыКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
					"ГруппаОтбор", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(
					ГруппаИли, "Услуга", Параметры.Услуга, ВидСравненияКомпоновкиДанных.Равно);
					УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(
					ГруппаИли, "УслугаОснование", Параметры.Услуга, ВидСравненияКомпоновкиДанных.Равно);
		
		// Выделяем текущую услугу.
		УстановитьУсловноеОформление(Параметры.Услуга);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриОткрытии" формы списка.
//
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" регистра сведения.
// Параметры:
//  Элемент 			  - <Поле ввода>
//        				  - Поле ввода, с которым связано данное событие.
//  НоваяСтрока 		  - <Булево>
//        				  - Установлен в Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования  - < Булево>
//          			  - Истина, если произошла отмена редактирования.
//  Отказ - 			 - <Булево>
//         				 - Признак отказа от выполнения действия.
//
Процедура СписокПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования И Элементы.Список.ТекущиеДанные.Значение = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Нельзя в качестве значения услуги указывать 0!", Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
