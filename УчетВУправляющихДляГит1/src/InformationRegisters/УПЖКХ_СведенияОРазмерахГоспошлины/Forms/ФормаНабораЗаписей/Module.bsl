&НаКлиенте
Перем мДатаИзмененияГоспошлины;  // Хранит дату изменения сведений о размерах пошлины

&НаСервере
Перем мРегистрСведенийНаборЗаписей Экспорт;   //Хранит набор записей для обработки

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыОбщегоНазначения

&НаСервере
// Добавляет запись в набор записей регистра "УПЖКХ_СведенияОРазмерахГоспошлины" 
//
Процедура ДобавитьСведенияПоРасчетуГоспошлины(НаборЗаписей, 
											  ДатаИзмененияГоспошлины, 
											  НомерСтрокиСтавок, 
											  СуммаДолгаС, 
											  СуммаДолгаПо, 
											  ПроцентПошлины,
											  ФиксированнаяЧастьПошлины = 0, 
											  МинСуммаПошлины, 
											  МаксСуммаПошлины)

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.Период            = ДатаИзмененияГоспошлины;
	НоваяЗапись.НомерСтрокиСтавок = НомерСтрокиСтавок;
	НоваяЗапись.СуммаДолгаС       = СуммаДолгаС;
	НоваяЗапись.СуммаДолгаПо      = СуммаДолгаПо;
	НоваяЗапись.ПроцентПошлины    = ПроцентПошлины;
	НоваяЗапись.ФиксированнаяЧастьПошлины = ФиксированнаяЧастьПошлины;
	НоваяЗапись.МинимальныйРазмерПошлины  = МинСуммаПошлины;
	НоваяЗапись.МаксимальныйРазмерПошлины = МаксСуммаПошлины;

КонецПроцедуры

&НаСервере
// Процедура вызывается из обработки обновления ИБ для первоначального заполнения
// сведений для расчета госпошлины или из формы набора записей,
// для заполнения набора значениями по умолчанию.
Процедура ЗаполнитьСведенияОРазмерахГоспошлины(ДатаИзмененияГоспошлины = Неопределено)
	
	ЗаполнитьВсе = НаборЗаписей = Неопределено;
	
	Если Не ЗаполнитьВсе и (ДатаИзмененияГоспошлины < Дата(2010, 06, 01)) Тогда
		
		ТекстСообщения = "Нет данных о размерах госпошлины на " + ДатаИзмененияГоспошлины;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗаполнитьВсе Тогда
		
		НовыйНаборЗаписей = РегистрыСведений.УПЖКХ_СведенияОРазмерахГоспошлины.СоздатьНаборЗаписей();
		НовыйНаборЗаписей.Отбор.Период.Использование = Истина;
		
	Иначе
		
		// Заполняем переданный набор записей.
		НовыйНаборЗаписей = НаборЗаписей;

	КонецЕсли;
	
	// ----------------------------------------------------------------------------
	// 2009 год 
	
	Если ЗаполнитьВсе ИЛИ (ДатаИзмененияГоспошлины >= Дата(2010, 06, 01)) Тогда

		Если ЗаполнитьВсе Тогда
			НовыйНаборЗаписей.Отбор.Период.Установить(Дата(2010, 06, 01));
		КонецЕсли;
		НовыйНаборЗаписей.Очистить();
	
		// до 20000
		ДобавитьСведенияПоРасчетуГоспошлины(НовыйНаборЗаписей, ДатаИзмененияГоспошлины, 1, 0, 20000, 4.0, 0, 400, 0);
		
		// до 100000
		ДобавитьСведенияПоРасчетуГоспошлины(НовыйНаборЗаписей, ДатаИзмененияГоспошлины, 2, 20001, 100000, 3.0, 800, 0, 0);
		
		// до 200000
		ДобавитьСведенияПоРасчетуГоспошлины(НовыйНаборЗаписей, ДатаИзмененияГоспошлины, 3, 100001, 200000, 2.0, 3200, 0, 0);
		
		// до 1000000
		ДобавитьСведенияПоРасчетуГоспошлины(НовыйНаборЗаписей, ДатаИзмененияГоспошлины, 4, 200001, 1000000, 1.0, 5200, 0, 0);
		
		// свыше 1000000
		ДобавитьСведенияПоРасчетуГоспошлины(НовыйНаборЗаписей, ДатаИзмененияГоспошлины, 5, 1000001, 0, 0.5, 13200, 0, 60000);
		
		Если ЗаполнитьВсе Тогда
			НовыйНаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
// Записывает изменения в регистр.
Процедура ЗаписатьИзмененияГоспошлины(ДатаИзменения)
	
	НовыйНаборЗаписей = РегистрыСведений.УПЖКХ_СведенияОРазмерахГоспошлины.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Использование = Истина;
	НовыйНаборЗаписей.Отбор.Период.Установить(ДатаИзменения);
	НовыйНаборЗаписей.Очистить();
	
	Для каждого Запись Из НаборЗаписей Цикл
		ДобавитьСведенияПоРасчетуГоспошлины(НовыйНаборЗаписей, ДатаИзменения, Запись.НомерСтрокиСтавок, 
		Запись.СуммаДолгаС, Запись.СуммаДолгаПо, Запись.ПроцентПошлины, 
		Запись.ФиксированнаяЧастьПошлины, Запись.МинимальныйРазмерПошлины, Запись.МаксимальныйРазмерПошлины);
	КонецЦикла;
	
	НовыйНаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "При изменении данных".
//
Процедура ПриИзмененииДанных()
		
	Если ЭтотОбъект.Модифицированность И НЕ мДатаИзмененияГоспошлины = ДатаИзмененияГоспошлины Тогда
		Оповещение = Новый ОписаниеОповещения("ПриИзмененииДанныхПродолжение", ЭтотОбъект, мДатаИзмененияГоспошлины);
		ТекстВопроса = "Записать сведения о размерах госпошлины на " + Формат(мДатаИзмененияГоспошлины, "ДЛФ=DD");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ПолучитьДанныеНаДатуПоследнегоИзменения();
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный обработчик ответа на вопросы пользователя при редактировании даты изменения госпошлины.
//
&НаКлиенте
Процедура ПриИзмененииДанныхПродолжение(Результат, ДопПараметр) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Попытка
			ЗаписатьИзмененияГоспошлины(мДатаИзмененияГоспошлины);
			ЭтотОбъект.Модифицированность = Ложь;
			ПолучитьДанныеНаДатуПоследнегоИзменения();
		Исключение
		КонецПопытки;
	Иначе
		
		ПолучитьДанныеНаДатуПоследнегоИзменения();
		
		// Сброс модифицированности после обновления данных.
		ЭтотОбъект.Модифицированность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДанныхПродолжение()

&НаСервере
// Получает данные регистра "УПЖКХ_СведенияОРазмерахГоспошлины" на дату последнего изменения.
//
Процедура ПолучитьДанныеНаДатуПоследнегоИзменения()
	
	РазмерыПошлины = РегистрыСведений.УПЖКХ_СведенияОРазмерахГоспошлины.СрезПоследних(ДатаИзмененияГоспошлины);
	
	ДатаПоследнегоИзменения = Дата(1980,01,01);
	Если РазмерыПошлины.Количество() > 0 Тогда
		ДатаПоследнегоИзменения = РазмерыПошлины[0].Период;
	КонецЕсли;
	
	НаборЗаписей.Отбор.Период.Значение = ДатаПоследнегоИзменения;
	
	Записи = ДанныеФормыВЗначение(НаборЗаписей, Тип("РегистрСведенийНаборЗаписей.УПЖКХ_СведенияОРазмерахГоспошлины"));
	
	Записи.Прочитать();
	
	ЗначениеВДанныеФормы(Записи, НаборЗаписей);
	
	Заголовок = "Сведения о размерах госпошлины на " + Формат(ДатаИзмененияГоспошлины,"ДЛФ=DD");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаборЗаписей()
	
	ЗаписатьИзмененияГоспошлины(ДатаИзмененияГоспошлины);
	
	НаборЗаписей.Отбор.Период.Значение = ДатаИзмененияГоспошлины;
	
	Записи = ДанныеФормыВЗначение(НаборЗаписей, Тип("РегистрСведенийНаборЗаписей.УПЖКХ_СведенияОРазмерахГоспошлины"));
	
	Записи.Прочитать();
	
	ЗначениеВДанныеФормы(Записи, НаборЗаписей);
	
	// Сброс модифицированности после записи данных.
	ЭтотОбъект.Модифицированность = Ложь;
	
	Заголовок = "Сведения о размерах госпошлины на " + Формат(ДатаИзмененияГоспошлины,"ДЛФ=DD");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Определим дату, на которую необходимо отобразить размеры госпошлины.
	Если Параметры.Свойство("ДатаСведенийОРазмерахГоспошлины") Тогда
		ДатаИзмененияГоспошлины = Параметры.ДатаСведенийОРазмерахГоспошлины;
	Иначе
		ДатаИзмененияГоспошлины = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
	мДатаИзмененияГоспошлины = ДатаИзмененияГоспошлины;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "При открытии" формы. Данное событие
// возникает при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Нет.
//
Процедура ПриОткрытии(Отказ)
	
	НаборЗаписей.Отбор.Период.Использование = Истина;
	
	ПриИзмененииДанных();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "При открытии" формы. Данное событие
// возникает при открытии формы, до показа окна пользователю.
//
// Параметры:
//  СтандартнаяОбработка - <Булево>
//          - В данный параметр передается признак выполнения
//			  стандартной (системной) обработки события. 
//
//
Процедура ПриПовторномОткрытии()
	
	НаборЗаписей.Отбор.Период.Использование = Истина;
	
	ДатаИзмененияГоспошлины = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	ПриИзмененииДанных();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Пред Записью" формы. Данное событие
// возникает при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - <Булево>
//          - Признак отказа от записи объекта.
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Тест = ДатаИзмененияГоспошлины;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	мРегистрСведенийНаборЗаписей = НаборЗаписей;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

#Область ОбработчикиСобытийРеквизитовФормы

&НаКлиенте
// Процедура вызывается принажатии кнопки "Заполнить"  панели 
// Формы.
// 
Процедура Заполнить(Команда)

	ЗаполнитьСведенияОРазмерахГоспошлины(ДатаИзмененияГоспошлины);
	
КонецПроцедуры

// Процедура - обработчик события "При изменении" элемента формы "Дата". 
//
&НаКлиенте
Процедура ДатаИзмененияГоспошлиныПриИзменении(Элемент)
	
	ПриИзмененииДанных();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "ДатаИзмененияГоспошлины". 
//
Процедура ДатаИзмененияГоспошлиныНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мДатаИзмененияГоспошлины = ДатаИзмененияГоспошлины;
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается принажатии кнопки "Записать"  панели 
// Формы.
//
Процедура ЗаписатьНабор(Команда)

	мДатаИзмененияГоспошлины = ДатаИзмененияГоспошлины;
	
	ОбновитьНаборЗаписей();
	
КонецПроцедуры

&НаКлиенте
// Процедура закрытия формы.
//
Процедура ЗакрытьФорму(Команда)
	
	Если ЭтотОбъект.Модифицированность И НЕ мДатаИзмененияГоспошлины = ДатаИзмененияГоспошлины Тогда
		Оповещение = Новый ОписаниеОповещения("ЗакрытьФормуПродолжение", ЭтотОбъект, мДатаИзмененияГоспошлины);
		ТекстВопроса = "Данные были изменены. Сохранить изменения?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный обработчик ответа на вопросы пользователя при закрытии формы.
//
&НаКлиенте
Процедура ЗакрытьФормуПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Попытка
			ЗаписатьИзмененияГоспошлины(ДопПараметры);
			ЭтотОбъект.Модифицированность = Ложь;
			ЭтотОбъект.Закрыть();
		Исключение
		КонецПопытки;
	Иначе
		ЭтотОбъект.Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ЗакрытьФормуПродолжение()

#КонецОбласти