
#Область ИнициализацияПеременныхМодуля

// Хранит значение предыдущего значения параметра в строке ТЧ состава ШК.
&НаКлиенте
Перем ПредыдущееЗначениеПараметра;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Необходимо заполнить по-умолчанию запись при добавлении.
	СформироватьСписокФормКвитанции();
	
	// Заполняется только в том случае, если событие добавления сгенерировано из формы списка.
	Если Запись.Организация.Пустая() Тогда
		ЗаполнитьРеквизитыПоУмолчанию();
	КонецЕсли;
	
	СформироватьЗаголовокФормыНаСервере();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Заполнение данного реквизита перенесено в данное событие по причиние того,
	// что при получении формы элемента из формы списка(при добавлении нового элемента)
	// сначало идет обращение к обработчику формы элемента "ПриСозданииНаСервере"
	// и только после этого для полученной формы заполняется реквизит "Организация".
	// См. обработчики "СписокПередНачаломДобавления" модуля формы списка данного РС.
	
	СтруктураНастроекПоКапремонту            = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Запись.Организация);
	ВедетсяРаздельныйУчетПоУслугамКапремонта = СтруктураНастроекПоКапремонту.ВедетсяРаздельныйУчет;
	
	ДопПараметры = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиФормированияПД_ДопПараметры");
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		ДопПараметры.Свойство("ЛицевойСчетШтрихкода",            ЛицевойСчетДляШК);
		ДопПараметры.Свойство("СуммаДляШтрихкода",               СуммаДляШК);
		
		ОбновитьПримерШтрихкода();
	КонецЕсли;
	
	ОбновитьПредставлениеФормыКвитанции();
	
	ЗаполнитьТаблицыРазделаШК();
	
	ОписаниеСхемКонтрольнойСуммы(Запись.СхемаДляРасчетаКонтрольнойСуммы);
	
	УстановитьВидимостьСтраницСНастройкамиПоУслугамКапремонта();
	УстановитьВидимостьЭлементовПриИзмененииВариантаОпределенияФормата();
	УстановитьВидимостьПолейРедактированияЗаголовкаКвитанции();
	
	ОбновитьПримерПредставленияУслугСОИ();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ЛицевойСчетШтрихкода", ЛицевойСчетДляШК);
	ДопПараметры.Вставить("СуммаДляШтрихкода",    СуммаДляШК);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("УчетнаяПолитикаТСЖ_ДопПараметры",,ДопПараметры);
	
КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПроверитьЗаполнениеПараметров(Отказ);
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	врДопРеквизитыQRКодаПользователяПоОсн            = ПолучитьДополнительныеРеквизитыQRКодаПользователя("ДополнительныеРеквизитыQRКодаПоОсн");
	ТекущийОбъект.ДополнительныеРеквизитыQRКодаПоОсн = Новый ХранилищеЗначения(врДопРеквизитыQRКодаПользователяПоОсн);
	
	врДопРеквизитыQRКодаПользователяПоКР = Новый СписокЗначений;
	
	Если ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		врДопРеквизитыQRКодаПользователяПоКР = ПолучитьДополнительныеРеквизитыQRКодаПользователя("ДополнительныеРеквизитыQRКодаПоКР");
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеРеквизитыQRКодаПоКР = Новый ХранилищеЗначения(врДопРеквизитыQRКодаПользователяПоКР);
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписаныНастройкиУчетаКапремонта"
		И Параметр = Запись.Организация Тогда
		СтруктураНастроекПоКапремонту            = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Запись.Организация);
		ВедетсяРаздельныйУчетПоУслугамКапремонта = СтруктураНастроекПоКапремонту.ВедетсяРаздельныйУчет;
		ЗаполнитьТаблицыРазделаШК();
		УстановитьВидимостьСтраницСНастройкамиПоУслугамКапремонта();
		УстановитьВидимостьЭлементовПриИзмененииВариантаОпределенияФормата();
		УстановитьВидимостьПолейРедактированияЗаголовкаКвитанции();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СформироватьЗаголовокФормыНаСервере();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Обработчик события "Очистка" поля "Организация".
//
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	// Отменяем очистку поля по "Shift+F4".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ОрганизацияОчистка()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ "КВИТАНЦИИ"

// Процедура - обработчик события "Нажатие" формы.
//
&НаКлиенте
Процедура ПросмотрФормыКвитанции(Команда)
	
	ОткрытьФормуКвитанции();
	
КонецПроцедуры // ПросмотрФормыКвитанции()

&НаКлиенте
// Обработчик события "Очистка" поля "ФормаКвитанции".
//
Процедура ФормаКвитанцииОчистка(Элемент, СтандартнаяОбработка)
	
	// Отменяем очистку поля по "Shift+F4".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ФормаКвитанцииОчистка()

// Процедура - обработчик события "ПередЗаписью" формы.
//
&НаКлиенте
Процедура ФормаКвитанцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = "Выбрать из внешних отчетов..." Тогда
		ФормаВыбора = ПолучитьФорму("Справочник.ДополнительныеОтчетыИОбработки.ФормаВыбора");
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Отбор,
																"Вид",
																ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет"),
																ВидСравненияКомпоновкиДанных.Равно,
																,
																Истина,
																РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораФормыКвитанции", ЭтаФорма);
		ФормаВыбора.Открыть();
		
	Иначе
		Запись.ФормаКвитанции = ВыбранноеЗначение;
		ОбновитьПредставлениеФормыКвитанции();
	КонецЕсли;
	
	УстановитьВидимостьПолейРедактированияЗаголовкаКвитанции();
	УстановитьВидимостьСтраницСНастройкамиПоУслугамКапремонта();
	
КонецПроцедуры // ФормаКвитанцииОбработкаВыбора()

// Обработчик результата выбора формы квитанции, вызванной в процедуре "ФормаКвитанцииОбработкаВыбора()".
&НаКлиенте
Процедура ОбработатьРезультатВыбораФормыКвитанции(ВыбраннаяКвитанция, ДопПараметры) Экспорт
	
	Если Не ВыбраннаяКвитанция = Неопределено Тогда
		Запись.ФормаКвитанции = ВыбраннаяКвитанция;
		ОбновитьПредставлениеФормыКвитанции();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораФормыКвитанции()

// Обновляет представление квитанции в поле "Номер формы квитанции".
//
&НаКлиенте
Процедура ОбновитьПредставлениеФормыКвитанции()
	
	Если ТипЗнч(Запись.ФормаКвитанции) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		ФормаКвитанцииПредставление = "Внешний отчет";
	Иначе
		ФормаКвитанцииПредставление = Запись.ФормаКвитанции;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПредставлениеФормыКвитанции()

// Предназначена для открытия формы квитанции, выбранной в поле "Форма квитанции".
//
&НаКлиенте
Процедура ОткрытьФормуКвитанции()
	
	Если ПустаяСтрока(Запись.ФормаКвитанции) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана форма квитанции!");
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация", Запись.Организация);
	
	Если ТипЗнч(Запись.ФормаКвитанции) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		Попытка
			ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(Запись.ФормаКвитанции);
			ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма", , ЭтаФорма, Истина);
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ИнформацияОбОшибке());
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(Запись.ФормаКвитанции) = Тип("ПеречислениеСсылка.УПЖКХ_ВидыПлатежныхДокументов") Тогда
		
		ПараметрыОтчета.Вставить("ВидМакета", Запись.ФормаКвитанции);
		
		ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета, ЭтаФорма, Истина);
		
	Иначе
		
		ОткрытьФорму("Отчет.УПЖКХ_КвитанцииИзвещения.Форма.Форма_" + Запись.ФормаКвитанции, ПараметрыОтчета, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуКвитанции()

// Предназначена для формирования списка доступных в базе форм квитанций
// и их последующей загрузки в список выбора поля ввода "Форма квитанции".
&НаСервере
Процедура СформироватьСписокФормКвитанции()
	
	СписокФорм = УПЖКХ_ПечатьКвитанцийСервер.СформироватьСписокФормКвитанции();
	
	// Работу необходимо вести с массивом представлений форм квитанций.
	МассивФорм = Новый Массив;
	Для Каждого ТекФорма Из СписокФорм Цикл
		Если ТекФорма.Значение = "Внешний отчет" Тогда
			Элементы.ФормаКвитанции.СписокВыбора.Добавить(ТекФорма.Представление, ТекФорма.Значение);
		Иначе
			Элементы.ФормаКвитанции.СписокВыбора.Добавить(ТекФорма.Значение, ТекФорма.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Запись.ФормаКвитанции) Тогда
		Запись.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный;
	КонецЕсли;
	
КонецПроцедуры // СформироватьСписокФормКвитанции()

// Процедура - обработчик события "ПриИзменении" поля флажка "ИспользоватьСтандартныйЗаголовок".
//
&НаКлиенте
Процедура ИспользоватьСтандартныйЗаголовокПриИзменении(Элемент)
	
	УстановитьВидимостьПолейРедактированияЗаголовкаКвитанции();
	
КонецПроцедуры // ИспользоватьСтандартныйЗаголовокПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ "ШТРИХКОД"

//// ОДНОМЕРНЫЙ ШТРИХКОД

// Процедура - обработчик события "ПриИзменении" поля ввода "КодОрганизацииДляОдномерногоШКПоОсн".
//
&НаКлиенте
Процедура КодОрганизацииДляОдномерногоШКПоОснПриИзменении(Элемент)
	
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // КодОрганизацииДляОдномерногоШКПоОснПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "КодОрганизацииДляОдномерногоШКПоУслугамКР".
//
&НаКлиенте
Процедура КодОрганизацииДляОдномерногоШКПоУслугамКРПриИзменении(Элемент)
	
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // КодОрганизацииДляОдномерногоШКПоУслугамКРПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "КодОрганизацииДляОдномерногоШКОбщий".
&НаКлиенте
Процедура КодОрганизацииДляОдномерногоШКОбщийПриИзменении(Элемент)
	
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // КодОрганизацииДляОдномерногоШКОбщийПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "РазделительДробнойЧастиСуммы".
//
&НаКлиенте
Процедура РазделительДробнойЧастиСуммыПриИзменении(Элемент)
	
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // РазделительДробнойЧастиСуммыПриИзменении()

&НаКлиенте
// Обработчик события "Очистка" поля "РазделительДробнойЧастиСуммы".
//
Процедура РазделительДробнойЧастиСуммыОчистка(Элемент, СтандартнаяОбработка)
	
	// Отменяем очистку поля по "Shift+F4".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // РазделительДробнойЧастиСуммыОчистка()

// Процедура - обработчик события "ПриИзменении" поля ввода "ИдентификаторЛСШтрихкода".
//
&НаКлиенте
Процедура ИдентификаторЛСШтрихкодаПриИзменении(Элемент)
	
	Если Запись.ИдентификаторЛСШтрихкода Тогда
		Элементы.ДлинаИдентификатораШтрихкода.Заголовок = "Длина идентификатора";
	Иначе
		Элементы.ДлинаИдентификатораШтрихкода.Заголовок = "Длина кода";
	КонецЕсли;
	
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // ИдентификаторЛСШтрихкодаПриИзменении()

&НаКлиенте
// Обработчик события "Очистка" поля "ИдентификаторЛСШтрихкода".
//
Процедура ИдентификаторЛСШтрихкодаОчистка(Элемент, СтандартнаяОбработка)
	
	// Отменяем очистку поля по "Shift+F4".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ИдентификаторЛСШтрихкодаОчистка()

// Процедура - обработчик события "ПриИзменении" поля ввода "КонстантаОрганизацииДляШтрихКода".
//
&НаКлиенте
Процедура КонстантаОрганизацииДляШтрихКодаПриИзменении(Элемент)
	
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // КонстантаОрганизацииДляШтрихКодаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ДлинаСуммыШтрихкода".
//
&НаКлиенте
Процедура ДлинаСуммыШтрихкодаПриИзменении(Элемент)
	
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // ДлинаСуммыШтрихкодаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ДлинаИдентификатораШтрихкода".
//
&НаКлиенте
Процедура ДлинаИдентификатораШтрихкодаПриИзменении(Элемент)
	
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // ДлинаИдентификатораШтрихкодаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ЛицевойСчетШК".
//
&НаКлиенте
Процедура ЛицевойСчетШКПриИзменении(Элемент)
	
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // ЛицевойСчетШКПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаДляШК".
//
&НаКлиенте
Процедура СуммаДляШКПриИзменении(Элемент)
	
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // СуммаДляШКПриИзменении()

// Процедура - обработчик события "ПриСменеСтраницы" группы "ГруппаСоставШК".
//
&НаКлиенте
Процедура ГруппаСоставШКПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // ГруппаСоставШКПриСменеСтраницы()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВнешняяОбработкаШтрихкодаОсн".
//
&НаКлиенте
Процедура ВнешняяОбработкаШтрихкодаОснПриИзменении(Элемент)
	
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // ВнешняяОбработкаШтрихкодаОснПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВнешняяОбработкаШтрихкодаКР".
//
&НаКлиенте
Процедура ВнешняяОбработкаШтрихкодаКРПриИзменении(Элемент)
	
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // ВнешняяОбработкаШтрихкодаКРПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ "ШТРИХКОД ДЛЯ СИТИКАРД"

//// ОДНОМЕРНЫЙ ШТРИХКОД

// Процедура - обработчик события "ПриИзменении" поля ввода "ВыводитьQRштрихкодДляСитикард".
//
&НаКлиенте
Процедура ВыводитьQRштрихкодДляСитикардПриИзменении(Элемент)
	
	УстановитьВидимостьПолейНаЗакладкеШтрихкодДляСитикард();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаНавигационнойСсылки" поля "ГиперссылкаПечатьЛистовкиОбОнлайнОплате".
//
Процедура ГиперссылкаПечатьЛистовкиОбОнлайнОплатеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ПечатьЛистовкиОбОнлайнОплате" Тогда
		Праметры = Новый Структура("ИмяОбъекта, Организация", "Отчет.УПЖКХ_ПлатежныйДокумент", Запись.Организация);
		ОткрытьФорму("ОбщаяФорма.УПЖКХ_ПечатьЛистовокЖКХ", Праметры, , Ложь);
	КонецЕсли;
	
КонецПроцедуры

// СОСТАВ ШК ПО ОСНОВНЫМ УСЛУГАМ.

// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "ТаблицаСоставШКПоОсновнымУслугам".
//
&НаКлиенте
Процедура ТаблицаСоставШКПоОсновнымУслугамПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.ТаблицаСоставШКПоОсновнымУслугам.ТекущиеДанные = Неопределено Тогда
		УстановитьТолькоПросмотрКолонкиДопСвойств("ТаблицаСоставШКПоОсновнымУслугам", 
												  Элементы.ТаблицаСоставШКПоОсновнымУслугам.ТекущиеДанные.Параметр = "Разделитель");
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСоставШКПоОсновнымУслугамПриАктивизацииСтроки()

// Процедура - обработчик события "ПередУдалением" таблицы формы "ТаблицаСоставШКПоОсновнымУслугам".
//
&НаКлиенте
Процедура ТаблицаСоставШКПоОсновнымУслугамПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Параметр = "КонтрольнаяСумма" Тогда
		Запись.ОтображатьКонтрольнуюСуммуПоОсн = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСоставШКПоОсновнымУслугамПередУдалением()

// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы формы "ТаблицаСоставШКПоОсновнымУслугам".
//
&НаКлиенте
Процедура ТаблицаСоставШКПоОсновнымУслугамПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		ПроверитьЗаполнениеДопСвойстваПараметра(Элемент.ТекущиеДанные, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСоставШКПоОсновнымУслугамПередОкончаниемРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы формы "ТаблицаСоставШКПоОсновнымУслугам".
//
&НаКлиенте
Процедура ТаблицаСоставШКПоОсновнымУслугамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные <> Неопределено И Не ОтменаРедактирования Тогда
		
		Если ПустаяСтрока(Элемент.ТекущиеДанные.Параметр) Тогда
			// Удаляем пустую строку.
			ТаблицаСоставШКПоОсновнымУслугам.Удалить(ТаблицаСоставШКПоОсновнымУслугам.Индекс(Элемент.ТекущиеДанные));
		Иначе
			ОтредактироватьТаблицуСоставаШК(Элемент.ТекущиеДанные, "ТаблицаСоставШКПоОсновнымУслугам", "ОтображатьКонтрольнуюСуммуПоОсн", "СоставШтрихкодаПоОсн");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСоставШКПоОсновнымУслугамПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" таблицы формы "ТаблицаСоставШКПоОсновнымУслугам".
//
&НаКлиенте
Процедура ТаблицаСоставШКПоОсновнымУслугамПослеУдаления(Элемент)
	
	ПроверитьСоставШКПослеУдаленияПараметра("ТаблицаСоставШКПоОсновнымУслугам");
	
	ОбновитьСтрокуФорматаШтрихкода("ТаблицаСоставШКПоОсновнымУслугам", "СоставШтрихкодаПоОсн");
	
КонецПроцедуры // ТаблицаСоставШКПоОсновнымУслугамПослеУдаления()

// Процедура - обработчик события "НачалоВыбораИзСписка" колонки "Параметр" таблицы формы "ТаблицаСоставШКПоОсновнымУслугам".
//
&НаКлиенте
Процедура ТаблицаСоставШКПоОсновнымУслугамПараметрНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ПредыдущееЗначениеПараметра = Элементы.ТаблицаСоставШКПоОсновнымУслугам.ТекущиеДанные.Параметр;
	
КонецПроцедуры // ТаблицаСоставШКПоОсновнымУслугамПараметрНачалоВыбораИзСписка()

// Процедура - обработчик события "ОбработкаВыбора" колонки "Параметр" таблицы формы "ТаблицаСоставШКПоОсновнымУслугам".
//
&НаКлиенте
Процедура ТаблицаСоставШКПоОсновнымУслугамПараметрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработатьВыбранныйПараметрВСоставеШК(ВыбранноеЗначение, "ТаблицаСоставШКПоОсновнымУслугам");
	
КонецПроцедуры // ТаблицаСоставШКПоОсновнымУслугамПараметрОбработкаВыбора()

// Процедура - обработчик события "Нажатие" кнопки "ПереместитьПараметрШКПоОсновнымУслугамВверх".
//
&НаКлиенте
Процедура ПереместитьПараметрШКПоОсновнымУслугамВверх(Команда)
	
	ПереместитьПараметрВСоставеШКВверх("ТаблицаСоставШКПоОсновнымУслугам", "СоставШтрихкодаПоОсн");
	
КонецПроцедуры // ПереместитьПараметрШКПоОсновнымУслугамВверх()

// Процедура - обработчик события "Нажатие" кнопки "ПереместитьПараметрШКПоОсновнымУслугамВниз".
//
&НаКлиенте
Процедура ПереместитьПараметрШКПоОсновнымУслугамВниз(Команда)
	
	ПереместитьПараметрВСоставеШКВниз("ТаблицаСоставШКПоОсновнымУслугам", "СоставШтрихкодаПоОсн");
	
КонецПроцедуры // ПереместитьПараметрШКПоОсновнымУслугамВниз()

// Процедура - обработчик события "Нажатие" кнопки "Скопировать состав ШК по основным услугам".
//
&НаКлиенте
Процедура СкопироватьСоставКР(Команда)
	
	Запись.СоставШтрихкодаПоОсн = Запись.СоставШтрихкодаПоКР;
	ОбновитьТаблицуФорматаОдномерногоШтрихкода();
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // СкопироватьСоставКР()

// СОСТАВ ШК ПО УСЛУГАМ КАПРЕМОНТА.

// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "ТаблицаСоставШКПоУслугамКапремонта".
//
&НаКлиенте
Процедура ТаблицаСоставШКПоУслугамКапремонтаПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.ТаблицаСоставШКПоУслугамКапремонта.ТекущиеДанные = Неопределено Тогда
		УстановитьТолькоПросмотрКолонкиДопСвойств("ТаблицаСоставШКПоУслугамКапремонта", 
												  Элементы.ТаблицаСоставШКПоУслугамКапремонта.ТекущиеДанные.Параметр = "Разделитель");
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСоставШКПоУслугамКапремонтаПриАктивизацииСтроки()

// Процедура - обработчик события "ПередУдалением" таблицы формы "ТаблицаСоставШКПоУслугамКапремонта".
//
&НаКлиенте
Процедура ТаблицаСоставШКПоУслугамКапремонтаПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Параметр = "КонтрольнаяСумма" Тогда
		Запись.ОтображатьКонтрольнуюСуммуПоКР = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСоставШКПоУслугамКапремонтаПередУдалением()

// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы формы "ТаблицаСоставШКПоУслугамКапремонта".
//
&НаКлиенте
Процедура ТаблицаСоставШКПоУслугамКапремонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		ПроверитьЗаполнениеДопСвойстваПараметра(Элемент.ТекущиеДанные, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСоставШКПоУслугамКапремонтаПередОкончаниемРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы формы "ТаблицаСоставШКПоУслугамКапремонта".
//
&НаКлиенте
Процедура ТаблицаСоставШКПоУслугамКапремонтаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные <> Неопределено И Не ОтменаРедактирования Тогда
		
		Если ПустаяСтрока(Элемент.ТекущиеДанные.Параметр) Тогда
			// Удаляем пустую строку.
			ТаблицаСоставШКПоУслугамКапремонта.Удалить(ТаблицаСоставШКПоУслугамКапремонта.Индекс(Элемент.ТекущиеДанные));
		Иначе
			ОтредактироватьТаблицуСоставаШК(Элемент.ТекущиеДанные, "ТаблицаСоставШКПоУслугамКапремонта", "ОтображатьКонтрольнуюСуммуПоКР", "СоставШтрихкодаПоКР");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСоставШКПоУслугамКапремонтаПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" таблицы формы "ТаблицаСоставШКПоУслугамКапремонта".
//
&НаКлиенте
Процедура ТаблицаСоставШКПоУслугамКапремонтаПослеУдаления(Элемент)
	
	ПроверитьСоставШКПослеУдаленияПараметра("ТаблицаСоставШКПоУслугамКапремонта");
	
	ОбновитьСтрокуФорматаШтрихкода("ТаблицаСоставШКПоУслугамКапремонта", "СоставШтрихкодаПоКР");
	
КонецПроцедуры // ТаблицаСоставШКПоУслугамКапремонтаПослеУдаления()

// Процедура - обработчик события "НачалоВыбораИзСписка" колонки "Параметр" таблицы формы "ТаблицаСоставШКПоУслугамКапремонта".
//
&НаКлиенте
Процедура ТаблицаСоставШКПоУслугамКапремонтаПараметрНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ПредыдущееЗначениеПараметра = Элементы.ТаблицаСоставШКПоУслугамКапремонта.ТекущиеДанные.Параметр;
	
КонецПроцедуры // ТаблицаСоставШКПоУслугамКапремонтаПараметрНачалоВыбораИзСписка()

// Процедура - обработчик события "ОбработкаВыбора" колонки "Параметр" таблицы формы "ТаблицаСоставШКПоУслугамКапремонта".
//
&НаКлиенте
Процедура ТаблицаСоставШКПоУслугамКапремонтаПараметрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработатьВыбранныйПараметрВСоставеШК(ВыбранноеЗначение, "ТаблицаСоставШКПоУслугамКапремонта");
	
КонецПроцедуры // ТаблицаСоставШКПоУслугамКапремонтаПараметрОбработкаВыбора()

// Процедура - обработчик события "Нажатие" таблицы формы "ПереместитьПараметрШКПоУслугамКапремонтаВверх".
//
&НаКлиенте
Процедура ПереместитьПараметрШКПоУслугамКапремонтаВверх(Команда)
	
	ПереместитьПараметрВСоставеШКВверх("ТаблицаСоставШКПоУслугамКапремонта", "СоставШтрихкодаПоКР");
	
КонецПроцедуры // ПереместитьПараметрШКПоУслугамКапремонтаВверх()

// Процедура - обработчик события "Нажатие" таблицы формы "ПереместитьПараметрШКПоУслугамКапремонтаВниз".
//
&НаКлиенте
Процедура ПереместитьПараметрШКПоУслугамКапремонтаВниз(Команда)
	
	ПереместитьПараметрВСоставеШКВниз("ТаблицаСоставШКПоУслугамКапремонта", "СоставШтрихкодаПоКР");
	
КонецПроцедуры // ПереместитьПараметрШКПоУслугамКапремонтаВниз()

// Процедура - обработчик события "Нажатие" кнопки "Скопировать состав ШК по услугам капремонта".
//
&НаКлиенте
Процедура СкопироватьСоставОсн(Команда)
	
	Запись.СоставШтрихкодаПоКР = Запись.СоставШтрихкодаПоОсн;
	ОбновитьТаблицуФорматаОдномерногоШтрихкода();
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // СкопироватьСоставОсн()

//// QR ШТРИХКОД

// Процедура - обработчик события "ПриИзменении" колонки "Пометка" таблицы формы "ДополнительныеРеквизитыQRКодаПоОсновнымУслугам".
//
&НаКлиенте
Процедура ДополнительныеРеквизитыQRКодаПоОсновнымУслугамПометкаПриИзменении(Элемент)
	
	ОбработатьРедактированиеФлагаДополнительногоРеквизитаQRКода("ДополнительныеРеквизитыQRКодаПоОсн");
	
КонецПроцедуры // ДополнительныеРеквизитыQRКодаПоОсновнымУслугамПометкаПриИзменении()

// Процедура - обработчик события "ПриИзменении" колонки "Пометка" таблицы формы "ДополнительныеРеквизитыQRКодаПоУслугамКапремонта".
//
&НаКлиенте
Процедура ДополнительныеРеквизитыQRКодаПоУслугамКапремонтаПометкаПриИзменении(Элемент)
	
	ОбработатьРедактированиеФлагаДополнительногоРеквизитаQRКода("ДополнительныеРеквизитыQRКодаПоКР");
	
КонецПроцедуры // ДополнительныеРеквизитыQRКодаПоУслугамКапремонтаПометкаПриИзменении()

// Процедура - обработчик конанды "Выбрать параметр из контекстного меню".
//
&НаКлиенте
Процедура ВыбратьПараметрИзКонтекстногоМеню(Команда)
	
	ИмяРесурса = Этаформа.ТекущийЭлемент.Имя;
	
	НачалоСтроки  = 0;
	НачалоКолонки = 0;
	КонецСтроки   = 0;
	КонецКолонки  = 0;
	Элементы[ИмяРесурса].ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	Если НачалоСтроки <> КонецСтроки ИЛИ НачалоКолонки <> КонецКолонки Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Необходимо установить курсор. В данный момент в поле ""Наименование платежа (назначение)"" выделена часть текста.");
		Возврат;
	КонецЕсли;
	
	СписокПараметров   = ПолучитьСписокПараметровДляТекстаНаименованиеПлатежаНазначениеНаСервере();
	ПозицияКурсора     = Новый Структура("ИмяРесурса, ИндексСтроки, ПозицияВСтроке", ИмяРесурса, НачалоСтроки - 1, НачалоКолонки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПараметраДляТекстаНаименованиеПлатежаНазначение", ЭтаФорма, ПозицияКурсора);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокПараметров, Элементы[ИмяРесурса]);
	
КонецПроцедуры

&НаСервере
// Функция получает список параметров для текста Наименования платежа (назначение).
Функция ПолучитьСписокПараметровДляТекстаНаименованиеПлатежаНазначениеНаСервере()
	
	Возврат РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.ПолучитьСписокПараметровДляТекстаНаименованиеПлатежаНазначение();
	
КонецФункции

&НаКлиенте
// Процедура-обработчик события "ПоказатьВыборИзМеню" в обработчике команды "ВыбратьПараметрЗаголовка".
Процедура ОбработатьВыборПараметраДляТекстаНаименованиеПлатежаНазначение(РезультатВыбора, ПозицияКурсора) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ИндексСтроки        = ПозицияКурсора.ИндексСтроки;
		ПозицияВСтроке      = ПозицияКурсора.ПозицияВСтроке;
		ТекстПараметра      = "[" + РезультатВыбора.Значение + "]";
		МассивСтрок         = СтрРазделить(Запись[ПозицияКурсора.ИмяРесурса], Символы.ПС);
		РедактируемаяСтрока = МассивСтрок[ИндексСтроки];
		ЛеваяЧасть          = Лев(РедактируемаяСтрока, ПозицияВСтроке - 1);
		ПраваяЧасть         = Сред(РедактируемаяСтрока, ПозицияВСтроке);
		ПолученнаяСтрока    = ЛеваяЧасть + ТекстПараметра + ПраваяЧасть;
		
		МассивСтрок.Удалить(ИндексСтроки);
		МассивСтрок.Вставить(ИндексСтроки, ПолученнаяСтрока);
		
		Запись[ПозицияКурсора.ИмяРесурса] = СтрСоединить(МассивСтрок, Символы.ПС);
	КонецЕсли;
	
КонецПроцедуры

//// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ НАСТРОЙКИ ШК

// Процедура - обработчик события "ПриИзменении" поля ввода "ВариантОпределенияФорматаШтрихкода".
//
&НаКлиенте
Процедура ВариантОпределенияФорматаШтрихкодаПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовПриИзмененииВариантаОпределенияФормата();
	
	Если Элементы.СтраницыНастроекПоВидамШтрихкода.ТекущаяСтраница = Элементы.СтраницаОдномерныйШК Тогда
		ОбновитьПримерШтрихкода();
	КонецЕсли;
	
КонецПроцедуры // ВариантОпределенияФорматаШтрихкодаПриИзменении()

&НаКлиенте
// Обработчик события "Очистка" поля "ВариантОпределенияФорматаШтрихкода".
//
Процедура ВариантОпределенияФорматаШтрихкодаОчистка(Элемент, СтандартнаяОбработка)
	
	// Отменяем очистку поля по "Shift+F4".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ВариантОпределенияФорматаШтрихкодаОчистка()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидШтрихкода".
//
&НаКлиенте
Процедура ВидШтрихкодаПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовПриИзмененииВариантаОпределенияФормата();
	
КонецПроцедуры // ВидШтрихкодаПриИзменении()

&НаКлиенте
// Обработчик события "Очистка" поля "ВидШтрихкода".
//
Процедура ВидШтрихкодаОчистка(Элемент, СтандартнаяОбработка)
	
	// Отменяем очистку поля по "Shift+F4".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ВидШтрихкодаОчистка()

//// УСЛУГИ СОИ.

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПредставлениеУслугСОИ".
//
Процедура ПредставлениеУслугСОИПриИзменении(Элемент)
	ОбновитьПримерПредставленияУслугСОИ();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//// ДЛЯ ОДНОМЕРНОГО ШК.

// Обновляет таблицу формата штрихкода по строке.
//
&НаКлиенте
Процедура ОбновитьТаблицуФорматаОдномерногоШтрихкода()
	
	ТаблицаСоставШКПоОсновнымУслугам.Очистить();
	Если НЕ ПустаяСтрока(Запись.СоставШтрихкодаПоОсн) Тогда
		ЗаполнитьТЧПоСписку("СоставШтрихкодаПоОсн", "ТаблицаСоставШКПоОсновнымУслугам");
	КонецЕсли;
	
	Если ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		ТаблицаСоставШКПоУслугамКапремонта.Очистить();
		Если НЕ ПустаяСтрока(Запись.СоставШтрихкодаПоКР) Тогда
			ЗаполнитьТЧПоСписку("СоставШтрихкодаПоКР", "ТаблицаСоставШКПоУслугамКапремонта");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьТаблицуФорматаОдномерногоШтрихкода()

// Предназначена для заполнения таблицы параметров при открытии формы.
//
&НаКлиенте
Процедура ЗаполнитьТЧПоСписку(НаименованиеСоставаШК, НаименованиеТаблицы)
	
	Список = Запись[НаименованиеСоставаШК];
	
	Список = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	
	Для Счетчик = 1 по ЧислоПараметров Цикл
		
		ПозЗапятой = Найти(Список, ",");
		ДопСвойство = "";
		Если ПозЗапятой > 0 Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			ПозицияДопСвойства = Найти(ИмяПараметра, "_");
			Если ПозицияДопСвойства > 0 Тогда
				ДопСвойство = Сред(ИмяПараметра, ПозицияДопСвойства + 1);
				ИмяПараметра = Лев(ИмяПараметра, ПозицияДопСвойства - 1);
			КонецЕсли;
			
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			
			НоваяСтрока = ЭтаФорма[НаименованиеТаблицы].Добавить();
			НоваяСтрока.Параметр = ИмяПараметра;
			Если НЕ ДопСвойство = "" Тогда
				НоваяСтрока.ДопСвойство = ДопСвойство;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТЧПоСписку()

// Удаляет дублирование строк с параметром "КонтрольнаяСумма".
//
&НаКлиенте
Функция ИмеютсяДублиКонтрольнойСуммы(НаименованиеТаблицы)
	
	Если ИмеетсяВТаблицеКонтрольнаяСумма(НаименованиеТаблицы, 2) Тогда
		//ЭтаФорма[НаименованиеТаблицы].Удалить(ТекущаяСтрока);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ИмеютсяДублиКонтрольнойСуммы()

// Функция проверяет наличие параметра "КонтрольнаяСумма".
//
&НаКлиенте
Функция ИмеетсяВТаблицеКонтрольнаяСумма(НаименованиеТаблицы, Количество)
	
	Отбор = Новый Структура("Параметр", "КонтрольнаяСумма");
	КоличествоЭлементов = ЭтаФорма[НаименованиеТаблицы].НайтиСтроки(Отбор).Количество();
	
	Если КоличествоЭлементов >= Количество Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ИмеетсяВТаблицеКонтрольнаяСумма

// Процедура помещает в конец таблицы контрольную сумму на сервере.
//
&НаКлиенте
Процедура ПоместитьВКонецТаблицыКонтрольнуюСумму(НаименованиеТаблицы)
	
	НайденныеСтроки = ЭтаФорма[НаименованиеТаблицы].НайтиСтроки(Новый Структура("Параметр", "КонтрольнаяСумма"));
	Если НайденныеСтроки.Количество() = 1 Тогда
		ЭтаФорма[НаименованиеТаблицы].Удалить(НайденныеСтроки[0]);
		
		НоваяСтрока = ЭтаФорма[НаименованиеТаблицы].Добавить();
		НоваяСтрока.Параметр = "КонтрольнаяСумма";
	КонецЕсли;
	
КонецПроцедуры // ПоместитьВКонецТаблицыКонтрольнуюСуммуНаСервере()

&НаКлиенте
// Процедура заполняет надпись описания схемы расчета контрольной суммы для выбранной.
Процедура ОписаниеСхемКонтрольнойСуммы(ЭлементЗначение = Неопределено)
	
	Если ЭлементЗначение = Неопределено Тогда
		ЭлементЗначение = "Схема №1";
	КонецЕсли;
	
	РасширеннаяПодсказка = "";
	
	Если ЭлементЗначение = "Схема №1" Тогда
		РасширеннаяПодсказка = "Контрольная сумма рассчитывается как сумма произведений числовых символов на номера занимаемых ими позиций.";
	ИначеЕсли ЭлементЗначение = "Схема №2" Тогда
		РасширеннаяПодсказка = "Контрольная сумма вычисляется по заданной формуле.";
	ИначеЕсли ЭлементЗначение = "Схема №3" Тогда
		РасширеннаяПодсказка = "Контрольная сумма рассчитывается с использованием весовых коэффициентов, устанавливаемых каждой позиции штрихкода.";
	ИначеЕсли ЭлементЗначение = "Схема №4" Тогда
		РасширеннаяПодсказка = "Контрольная сумма рассчитывается только для штрихкодов без контрольной суммы, длина которых составляет 19, 20, 21, 25 и 32 символов.";
	КонецЕсли;
	
	Если Не ПустаяСтрока(РасширеннаяПодсказка) Тогда
		Элементы.СхемаДляРасчетаКонтрольнойСуммы.РасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка + Символы.ПС + "Более подробно алгоритм описан в справочной информации.";
	КонецЕсли;
	
КонецПроцедуры // ОписаниеСхемКонтрольнойСуммы()

// Обновляет строку формата штрихкода по таблице.
//
&НаКлиенте
Процедура ОбновитьСтрокуФорматаШтрихкода(НаименованиеТаблицы, НаименованиеСоставаШК)

	СоставШК = "";
	Для Каждого СтрокаПредставления Из ЭтаФорма[НаименованиеТаблицы] Цикл
		Если НЕ ПустаяСтрока(СтрокаПредставления.Параметр) Тогда
			СоставШК = СоставШК + "," + СтрокаПредставления.Параметр + ?(СтрокаПредставления.Параметр = "Разделитель",
																		 "_" + СтрокаПредставления.ДопСвойство,
																		 "");
		КонецЕсли;
	КонецЦикла;
	Запись[НаименованиеСоставаШК] = Сред(СоставШК, 2);
	
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // ОбновитьСтрокуФорматаШтрихкода()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СхемаДляРасчетаКонтрольнойСуммы".
//
Процедура СхемаДляРасчетаКонтрольнойСуммыПриИзменении(Элемент)
	
	ОписаниеСхемКонтрольнойСуммы(Элемент.ВыделенныйТекст);
	
	ОбновитьПримерШтрихкода();
	
КонецПроцедуры // СхемаДляРасчетаКонтрольнойСуммыПриИзменении()

&НаКлиенте
// Обработчик события "Очистка" поля "СхемаДляРасчетаКонтрольнойСуммы".
//
Процедура СхемаДляРасчетаКонтрольнойСуммыОчистка(Элемент, СтандартнаяОбработка)
	
	// Отменяем очистку поля по "Shift+F4".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // СхемаДляРасчетаКонтрольнойСуммыОчистка()

// Обновляет пример формата штрихкода согласно выбранным настройкам.
//
&НаКлиенте
Процедура ОбновитьПримерШтрихкода()
	
	Если НЕ Запись.ВариантОпределенияФорматаШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВариантыОпределенияФорматаШтрихкода.ПоУказаннымНастройкам") Тогда
		Если Элементы.СтраницыНастроекПоВидамШтрихкода.ТекущаяСтраница = Элементы.СтраницаОдномерныйШК Тогда
			ПримерШтрихкода = "";
			Элементы.ДекорацияДлинаШК.Заголовок  = "";
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Запись.СхемаДляРасчетаКонтрольнойСуммы = "Схема №3" Тогда
		Запись.РазделительДробнойЧастиСуммы = "не выводить";
	КонецЕсли;
	
	ПримерШтрихкода = ПолучитьПримерШтрихкодаНаСервере();
	
	ДлинаПримераШтрихкода = СтрДлина(ПримерШтрихкода);
	
	ТекстДлиныШтрихкода = "Длина штрихкода: " + ДлинаПримераШтрихкода + " символов.";
	
	ИмяРесурса = ?(Элементы.ГруппаСоставШК.ТекущаяСтраница.Имя = "ГруппаСоставШКПоОсн", "СоставШтрихкодаПоОсн", "СоставШтрихкодаПоКР");
	
	Если (ИмяРесурса = "СоставШтрихкодаПоОсн" И Найти(Запись.СоставШтрихкодаПоОсн, "КонтрольнаяСумма") > 0)
	 ИЛИ (ИмяРесурса = "СоставШтрихкодаПоКР" И Найти(Запись.СоставШтрихкодаПоКР, "КонтрольнаяСумма") > 0) Тогда
		
		ДлинаКонтрольнойСуммы = 0;
		
		Если Запись.СхемаДляРасчетаКонтрольнойСуммы = "Схема №1" Тогда
			ДлинаКонтрольнойСуммы = 4;
		ИначеЕсли Запись.СхемаДляРасчетаКонтрольнойСуммы = "Схема №4" Тогда
			КонтрольнаяСумма = ПолучитьЗначениеПараметраИзОдномерногоШтрихкода(ПримерШтрихкода, ИмяРесурса, "КонтрольнаяСумма");
			Если КонтрольнаяСумма <> Неопределено Тогда
				ДлинаКонтрольнойСуммы = СтрДлина(КонтрольнаяСумма);
			КонецЕсли;
		Иначе
			ДлинаКонтрольнойСуммы = 1;
		КонецЕсли;
		
		ДлинаШтрихкодаБезКонтрольнойСуммы = ДлинаПримераШтрихкода - ДлинаКонтрольнойСуммы;
		
		ТекстДлиныШтрихкода = ТекстДлиныШтрихкода + Символы.ПС
							+ "Длина штрихкода без контрольной суммы: " + ДлинаШтрихкодаБезКонтрольнойСуммы + " символов.";
		ТекстДлиныШтрихкода = ТекстДлиныШтрихкода + Символы.ПС
							+ "Длина контрольной суммы: " + ДлинаКонтрольнойСуммы + " символов.";
	КонецЕсли;
	
	Элементы.ДекорацияДлинаШК.Заголовок = ТекстДлиныШтрихкода;
	
КонецПроцедуры // ОбновитьПримерШтрихкода()

&НаСервере
// Функция возвращает значение параметра одномерного штрихкода по тексту примера штрихкода.
Функция ПолучитьЗначениеПараметраИзОдномерногоШтрихкода(ПримерШтрихкода, ИмяРесурсаСоставаШК, ИмяПараметра)
	
	ЗначениеПраметра = Неопределено;
	
	ЗаписьОбъект = РеквизитФормыВЗначение("Запись", Тип("РегистрСведенийМенеджерЗаписи.УПЖКХ_НастройкиФормированияПлатежногоДокумента"));
	
	СтруктураНастроекФормированияПД = Новый Структура();
	Ресурсы = Метаданные.РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.Ресурсы;
	Для Каждого ТекРесурс Из Ресурсы Цикл
		ПустоеЗначение = КВП_ПустоеЗначениеТипа(ТекРесурс.Тип.Типы().Получить(0));
		СтруктураНастроекФормированияПД.Вставить(ТекРесурс.Имя, ПустоеЗначение);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураНастроекФормированияПД, ЗаписьОбъект);
	
	СтруктураСоставаШК = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьПустуюСтруктуруСоставаШК();
	
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Запись.Организация);
	
	УПЖКХ_ПечатьКвитанцийСервер.ЗаполнитьСтруктуруПараметровШтрихкодаПоНастройкамФормированияШК(ПримерШтрихкода, СтруктураСоставаШК, СтруктураНастроекФормированияПД,
																								ИмяРесурсаСоставаШК, мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет);
	
	Если СтруктураСоставаШК.НастройкаШтрихкодаОпределена
	   И СтруктураСоставаШК.СтруктураЗначенийПараметров.Свойство(ИмяПараметра) Тогда
		ЗначениеПраметра = СтруктураСоставаШК.СтруктураЗначенийПараметров[ИмяПараметра];
	КонецЕсли;
	
	Возврат ЗначениеПраметра;
	
КонецФункции // ПолучитьЗначениеПараметраИзОдномерногоШтрихкода()

&НаСервере
// Функция возвращает пример штрихкода на сервере.
Функция ПолучитьПримерШтрихкодаНаСервере()
	
	ДатаШтрихкода = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	ПараметрыШтрихкода = Новый Структура();
	ПараметрыШтрихкода.Вставить("Дата",        ДатаШтрихкода);
	ПараметрыШтрихкода.Вставить("ЛицевойСчет", ЛицевойСчетДляШК);
	ПараметрыШтрихкода.Вставить("Сумма",       СуммаДляШК);
	
	ПараметрыШтрихкода.Вставить("ЭтоПримерОдномерногоШтрихкода", Элементы.СтраницыНастроекПоВидамШтрихкода.ТекущаяСтраница.Имя = "СтраницаОдномерныйШК");
	ПараметрыШтрихкода.Вставить("СпособФормированияШтрихкода", ?(Элементы.ГруппаСоставШК.ТекущаяСтраница.Имя = "ГруппаСоставШКПоОсн", 1, 0));
	
	ОргСведения = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСведенияОбОрганизации(Запись.Организация, ДатаШтрихкода, "ИННЮЛ,БанкСчетНомер");
	
	ПараметрыШтрихкода.Вставить("ИННОрганизации",           УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(ОргСведения.ИННЮЛ,         12));
	ПараметрыШтрихкода.Вставить("РасчетныйСчетОрганизации", УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(ОргСведения.БанкСчетНомер, 20));
	
	ЗаписьОбъект = РеквизитФормыВЗначение("Запись", Тип("РегистрСведенийМенеджерЗаписи.УПЖКХ_НастройкиФормированияПлатежногоДокумента"));
	
	ЗаписьОбъект.КодОрганизацииДляОдномерногоШКПоОсн       = СокрЛП(ЗаписьОбъект.КодОрганизацииДляОдномерногоШКПоОсн);
	ЗаписьОбъект.КодОрганизацииДляОдномерногоШКПоУслугамКР = СокрЛП(ЗаписьОбъект.КодОрганизацииДляОдномерногоШКПоУслугамКР);
	ЗаписьОбъект.КодОрганизацииДляQRКодаПоОсн              = СокрЛП(ЗаписьОбъект.КодОрганизацииДляQRКодаПоОсн);
	ЗаписьОбъект.КодОрганизацииДляQRКодаПоУслугамКР        = СокрЛП(ЗаписьОбъект.КодОрганизацииДляQRКодаПоУслугамКР);
	
	Возврат УПЖКХ_ПечатьКвитанцийСервер.СформироватьШтрихкод(ПараметрыШтрихкода, ЗаписьОбъект);
	
КонецФункции

// Предназначена для проверки состава одномерного штрихкода после удаления строки из таблицы параметров.
//
&НаКлиенте
Процедура ПроверитьСоставШКПослеУдаленияПараметра(НаименованиеТаблицы)
	
	КоличествоЭлементов = ЭтаФорма[НаименованиеТаблицы].Количество();
	Параметр = "";
	Если КоличествоЭлементов = 1 Тогда
		Параметр = ЭтаФорма[НаименованиеТаблицы].Получить(0).Параметр;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Параметр) Тогда
		Если Параметр = "КонтрольнаяСумма" Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"Для расчета контрольной суммы необходимо наличие в составе штрихкода хотя бы одного параметра!");
			ЭтаФорма[НаименованиеТаблицы].Удалить(0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСоставШКПослеУдаленияПараметра()

// Предназначена для перемещения вверх строки в таблице параметров.
//
&НаКлиенте
Процедура ПереместитьПараметрВСоставеШКВверх(НаименованиеТаблицы, НаименованиеСоставаШК)
	
	ТекущаяСтрока = Элементы[НаименованиеТаблицы].ТекущиеДанные;
	ИндексТекущий = ЭтаФорма[НаименованиеТаблицы].Индекс(ТекущаяСтрока);
	
	Если ИндексТекущий > 0 И НЕ ТекущаяСтрока.Параметр = "КонтрольнаяСумма" Тогда
		СледующаяСтрока = ЭтаФорма[НаименованиеТаблицы].Получить(ИндексТекущий - 1);
		Если НЕ СледующаяСтрока.Параметр = "КонтрольнаяСумма" Тогда
			ЭтаФорма[НаименованиеТаблицы].Сдвинуть(ИндексТекущий, -1);
			ОбновитьСтрокуФорматаШтрихкода(НаименованиеТаблицы, НаименованиеСоставаШК);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПереместитьПараметрВСоставеШКВверх()

// Предназначена для перемещения вниз строки в таблице параметров.
//
&НаКлиенте
Процедура ПереместитьПараметрВСоставеШКВниз(НаименованиеТаблицы, НаименованиеСоставаШК)
	
	ТекущаяСтрока = Элементы[НаименованиеТаблицы].ТекущиеДанные;
	ИндексТекущий = ЭтаФорма[НаименованиеТаблицы].Индекс(ТекущаяСтрока);
	
	Если ИндексТекущий < ЭтаФорма[НаименованиеТаблицы].Количество() - 1 И НЕ ТекущаяСтрока.Параметр = "КонтрольнаяСумма" Тогда
		СледующаяСтрока = ЭтаФорма[НаименованиеТаблицы].Получить(ИндексТекущий + 1);
		Если НЕ СледующаяСтрока.Параметр = "КонтрольнаяСумма" Тогда
			ЭтаФорма[НаименованиеТаблицы].Сдвинуть(ИндексТекущий, 1);
			ОбновитьСтрокуФорматаШтрихкода(НаименованиеТаблицы, НаименованиеСоставаШК);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПереместитьПараметрВСоставеШКВниз()

// Предназначена для редактирования свойства "ТолькоПросмотр" колонки "ДопСвойство" таблицы параметров.
//
&НаКлиенте
Процедура УстановитьТолькоПросмотрКолонкиДопСвойств(НаименованиеТаблицы, ЭтоРазделитель)
	
	Элементы[НаименованиеТаблицы].ПодчиненныеЭлементы[НаименованиеТаблицы + "ДопСвойство"].ТолькоПросмотр = НЕ ЭтоРазделитель;
	
КонецПроцедуры // УстановитьТолькоПросмотрКолонкиДопСвойств()

// Предназначена для обработки событий редактирования таблицы параметров.
//
&НаКлиенте
Процедура ОтредактироватьТаблицуСоставаШК(ТекущаяСтрока, НаименованиеТаблицы, НаименованиеПризнакаОтраженияШК, НаименованиеСоставаШК)
	
	ВнестиИзменения = Ложь;
	
	Если НЕ ПустаяСтрока(ТекущаяСтрока.Параметр) Тогда
		
		КоличествоЭлементов = ЭтаФорма[НаименованиеТаблицы].Количество();
		Если КоличествоЭлементов > 1 Тогда
			Если НЕ ТекущаяСтрока.Параметр = "КонтрольнаяСумма" Тогда
				Если ИмеетсяВТаблицеКонтрольнаяСумма(НаименованиеТаблицы, 1) Тогда
					ВнестиИзменения = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ИмеютсяДублиКонтрольнойСуммы(НаименованиеТаблицы) Тогда
					Запись[НаименованиеПризнакаОтраженияШК] = Истина;
					ВнестиИзменения = Истина;
				Иначе
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
						"При формировании штрихкода предусмотрено только однократное вхождение блока с контрольной суммой!", ,
						"Раздел ""Штрихкод"":");
					ЭтаФорма[НаименованиеТаблицы].Удалить(ТекущаяСтрока);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли КоличествоЭлементов = 1 Тогда
			Если ТекущаяСтрока.Параметр = "КонтрольнаяСумма" Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
					"Для расчета контрольной суммы необходимо наличие в составе штрихкода хотя бы одного параметра!", ,
					"Раздел ""Штрихкод"":");
				ЭтаФорма[НаименованиеТаблицы].Удалить(ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
			"В табличной части имеются не заполненные строки!", ,"Раздел ""Штрихкод"":");
	КонецЕсли;
	
	Если ВнестиИзменения Тогда
		ПоместитьВКонецТаблицыКонтрольнуюСумму(НаименованиеТаблицы);
	КонецЕсли;
	
	ОбновитьСтрокуФорматаШтрихкода(НаименованиеТаблицы, НаименованиеСоставаШК);
	
КонецПроцедуры // ОтредактироватьТаблицуСоставаШК()

// Предназначена для проверки заполнения поля "ДопСвойство" строки таблицы параметров.
//
&НаКлиенте
Процедура ПроверитьЗаполнениеДопСвойстваПараметра(ТекущаяСтрока, Отказ)
	
	Если ТекущаяСтрока.Параметр = "Разделитель" Тогда
		ДопСвойство = СокрЛП(ТекущаяСтрока.ДопСвойство);
		Если ДопСвойство = "" Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не допустимо использование пустого разделителя в составе штрихкода!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнение()

// Предназначена для обработки выбранного параметра в таблице параметров.
//
&НаКлиенте
Процедура ОбработатьВыбранныйПараметрВСоставеШК(ВыбранныйПараметр, НаименованиеТаблицы)
	
	Если ВыбранныйПараметр = "Разделитель"
	 И НЕ ВыбранныйПараметр = ПредыдущееЗначениеПараметра Тогда
		УстановитьТолькоПросмотрКолонкиДопСвойств(НаименованиеТаблицы, Истина);
		Элементы[НаименованиеТаблицы].ТекущиеДанные.Параметр = ВыбранныйПараметр;
		Элементы[НаименованиеТаблицы].ТекущийЭлемент = Элементы[НаименованиеТаблицы].ПодчиненныеЭлементы[НаименованиеТаблицы + "ДопСвойство"];
	Иначе
		Если ПредыдущееЗначениеПараметра = "Разделитель" Тогда
			Элементы[НаименованиеТаблицы].ТекущиеДанные.ДопСвойство = "";
		КонецЕсли;
		УстановитьТолькоПросмотрКолонкиДопСвойств(НаименованиеТаблицы, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПроверитьДлинуИдентификатора".
//
&НаКлиенте
Процедура ПроверитьДлинуИдентификатора(Команда)
	
	НайденнаяМаксимальнаяДлина = ОпределитьМаксимальнуюДлинуКодаИлиИдентификатораЛС(Запись.ИдентификаторЛСШтрихкода);
	
	Если НайденнаяМаксимальнаяДлина > Запись.ДлинаИдентификатораШтрихкода Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьДлинуИдентификатораЗавершение", ЭтотОбъект, НайденнаяМаксимальнаяДлина);
		
		ТекстВопроса = "Обнаружены лицевые счета с длиной " + ?(Запись.ИдентификаторЛСШтрихкода, "идентификатора", "кода")
					 + " в " + НайденнаяМаксимальнаяДлина + " символов. Изменить значение поля на " + НайденнаяМаксимальнаяДлина + "?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
	Иначе
		
		Текст = "Лицевых счетов с длиной " + ?(Запись.ИдентификаторЛСШтрихкода, "идентификатора", "кода")
			  + " больше " + Запись.ДлинаИдентификатораШтрихкода + " символов не обнаружено.";
		
		ПоказатьПредупреждение(, Текст);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДлинуИдентификатора()

&НаКлиенте
Процедура ПроверитьДлинуИдентификатораЗавершение(Ответ, ДополнительныйПараметр) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Запись.ДлинаИдентификатораШтрихкода = ДополнительныйПараметр;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДлинуИдентификатораЗавершение()

// Предназначена для получения в базе длины идентификатора(кода) лицевого счета с максимальной длиной.
//
&НаСервереБезКонтекста
Функция ОпределитьМаксимальнуюДлинуКодаИлиИдентификатораЛС(ЭтоИдентификатор)
	
	НайденаяМаксимальнаяДлина = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчета." + ?(ЭтоИдентификатор, "Идентификатор", "Код") + " КАК ИдентификаторЛС
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	НЕ КВП_ЛицевыеСчета.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НайденаяМаксимальнаяДлина < СтрДлина(Выборка.ИдентификаторЛС) Тогда
			НайденаяМаксимальнаяДлина = СтрДлина(Выборка.ИдентификаторЛС);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденаяМаксимальнаяДлина;
	
КонецФункции // ОпределитьМаксимальнуюДлинуКодаИлиИдентификатораЛС()

// Предназначена для проверки корректного заполнения элементов перед записью формы.
//
&НаКлиенте
Процедура ПроверитьЗаполнениеПараметров(Отказ)
	
	ЗаголовокРаздела = "Раздел ""Штрихкод"": ";
	Если Запись.ВариантОпределенияФорматаШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВариантыОпределенияФорматаШтрихкода.ПоУказаннымНастройкам") Тогда
		
		ПроверитьКорректностьЗаполненияСоставаШК("ТаблицаСоставШКПоОсновнымУслугам", "СоставШтрихкодаПоОсн", ЗаголовокРаздела, Отказ);
		
		Если ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
			ПроверитьКорректностьЗаполненияСоставаШК("ТаблицаСоставШКПоУслугамКапремонта", "СоставШтрихкодаПоКР", ЗаголовокРаздела, Отказ);
		КонецЕсли;
		
	ИначеЕсли Запись.ВариантОпределенияФорматаШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВариантыОпределенияФорматаШтрихкода.ИзВнешнейОбработки") Тогда
		
		ПроверитьЗаполнениеВнешнихОбработокШтрихкода(Отказ);
		
	КонецЕсли;
	
	ПроверитьУстановкуФлаговQRШтрихкодов(Отказ);
	
	Если Запись.ВыводитьQRштрихкодДляСитикардПоОсн
	   И ПустаяСтрока(Запись.КодОрганизацииВСитикардПоОсн) Тогда
		Элементы.ГруппаНастроекПлатежногоДокумента.ТекущаяСтраница = Элементы.ГруппаШтрихкодДляОнлайнОплаты;
		Элементы.НастройкиВыводаШКДляОплатыОнлайн.ТекущаяСтраница  = Элементы.НастройкиВыводаШКДляОплатыОнлайнПоОсн;
		Если ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
			ТекстСообщения = "Не указан код организации в системе онлайн-оплаты по основным услугам!";
		Иначе
			ТекстСообщения = "Не указан код организации в системе онлайн-оплаты!";
		КонецЕсли;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, Отказ);
	КонецЕсли;
	
	Если ВедетсяРаздельныйУчетПоУслугамКапремонта
	   И Запись.ВыводитьQRштрихкодДляСитикардПоКР
	   И ПустаяСтрока(Запись.КодОрганизацииВСитикардПоКР) Тогда
		Элементы.ГруппаНастроекПлатежногоДокумента.ТекущаяСтраница = Элементы.ГруппаШтрихкодДляОнлайнОплаты;
		Элементы.НастройкиВыводаШКДляОплатыОнлайн.ТекущаяСтраница  = Элементы.НастройкиВыводаШКДляОплатыОнлайнПоКР;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан код организации в системе онлайн-оплаты по услугам капитального ремонта!", Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеПараметров()

&НаКлиенте
// Предназначена для проверки корректности заполнения таблицы параметров.
Процедура ПроверитьКорректностьЗаполненияСоставаШК(НаименованиеТаблицы, НаименованиеСоставаШК, ЗаголовокРаздела, Отказ)
	
	ПодстрокаСообщения = ?(НаименованиеТаблицы = "ТаблицаСоставШКПоОсновнымУслугам", "основным услугам", "услугам капремонта");
	
	ТекстОшибки = НаличиеНезаполненныхСтрокФорматШтрихкода(НаименованиеТаблицы, ПодстрокаСообщения);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ЗаголовокРаздела + ТекстОшибки, Отказ);
	Иначе
		Если ИмеетсяВТаблицеКонтрольнаяСумма(НаименованиеТаблицы, 1) И ПустаяСтрока(Запись.СхемаДляРасчетаКонтрольнойСуммы) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				ЗаголовокРаздела + "Необходимо указать схему для расчета контрольной суммы!", Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для проверки наличия не заполненных данных в табличной части страницы "Штрихкод".
//
&НаКлиенте
Функция НаличиеНезаполненныхСтрокФорматШтрихкода(НаименованиеТаблицы, ПодстрокаСообщения)
	
	ТекстОшибки = "";
	Для Каждого ТекСтрока Из ЭтаФорма[НаименованиеТаблицы] Цикл
		Если ПустаяСтрока(ТекСтрока.Параметр) Тогда
			ТекстОшибки = "В составе штрихкода по " + ПодстрокаСообщения + " содержатся не заполненные строки!";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстОшибки;
	
КонецФункции // НаличиеНезаполненныхСтрокФорматШтрихкода()

&НаСервере
// Предназначена для проверки заполнения полей, содержащих ссылки на внешние обработки информационной базы.
Процедура ПроверитьЗаполнениеВнешнихОбработокШтрихкода(Отказ)
	
	ТекстОшибки = "";
	
	// Проверка для одномерного штрихкода.
	Если ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		УПЖКХ_ПечатьКвитанцийСервер.ПроверитьЗаполнениеВнешнихОбработокШтрихкода(Запись, ВедетсяРаздельныйУчетПоУслугамКапремонта, ТекстОшибки, Истина, Неопределено);
	Иначе
		УПЖКХ_ПечатьКвитанцийСервер.ПроверитьЗаполнениеВнешнихОбработокШтрихкода(Запись, ВедетсяРаздельныйУчетПоУслугамКапремонта, ТекстОшибки, Истина, Ложь);
	КонецЕсли;
	
	// Проверка для QR-штрихкода.
	Если ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		УПЖКХ_ПечатьКвитанцийСервер.ПроверитьЗаполнениеВнешнихОбработокШтрихкода(Запись, ВедетсяРаздельныйУчетПоУслугамКапремонта, ТекстОшибки, Ложь, Неопределено);
	Иначе
		УПЖКХ_ПечатьКвитанцийСервер.ПроверитьЗаполнениеВнешнихОбработокШтрихкода(Запись, ВедетсяРаздельныйУчетПоУслугамКапремонта, ТекстОшибки, Ложь, Ложь);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеВнешнихОбработокШтрихкода()

// Предназначена для проверки выбранных дополнительных реквизитов QR-штрихкодов.
//
&НаКлиенте
Процедура ПроверитьУстановкуФлаговQRШтрихкодов(Отказ)
	
	врДопРеквизитыQRКодаПользователяПоОсн = ПолучитьДополнительныеРеквизитыQRКодаПользователя("ДополнительныеРеквизитыQRКодаПоОсн");
	
	НайденныйЭлементИдентификаторЛицевогоСчета = врДопРеквизитыQRКодаПользователяПоОсн.НайтиПоЗначению("persAcc1");
	НайденныйЭлементНаименованиеЛицевогоСчета  = врДопРеквизитыQRКодаПользователяПоОсн.НайтиПоЗначению("persAcc");
	
	Если НайденныйЭлементИдентификаторЛицевогоСчета <> Неопределено
	   И НайденныйЭлементНаименованиеЛицевогоСчета <> Неопределено Тогда
		ИмяТаблицы = Элементы.ГруппаДопРеквизитовQRШКПоОсновнымУслугам.Заголовок;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице """ + ИмяТаблицы + """ необходимо выбрать однин из двух выбранных реквизитов: 
										|""Наименование лицевого счета плательщика в организации"", либо
										|""Идентификатор лицевого счета плательщика в организации"".", Отказ);
	КонецЕсли;
	
	Если ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		
		врДопРеквизитыQRКодаПользователяПоКР = ПолучитьДополнительныеРеквизитыQRКодаПользователя("ДополнительныеРеквизитыQRКодаПоКР");
		
		НайденныйЭлементИдентификаторЛицевогоСчета = врДопРеквизитыQRКодаПользователяПоКР.НайтиПоЗначению("persAcc1");
		НайденныйЭлементНаименованиеЛицевогоСчета  = врДопРеквизитыQRКодаПользователяПоКР.НайтиПоЗначению("persAcc");
		
		Если НайденныйЭлементИдентификаторЛицевогоСчета <> Неопределено
		   И НайденныйЭлементНаименованиеЛицевогоСчета <> Неопределено Тогда
			ИмяТаблицы = Элементы.ГруппаДопРеквизитовQRШКПоУслугамКР.Заголовок;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице """ + ИмяТаблицы + """ необходимо выбрать однин из двух выбранных реквизитов: 
											|""Наименование лицевого счета плательщика в организации"", либо
											|""Идентификатор лицевого счета плательщика в организации"".", Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьУстановкуФлаговQRШтрихкодов()

//// ДЛЯ QR ШТРИХКОДА.

// Обновляет список дополнительных реквизитов QR кодов.
//
&НаСервере
Процедура ОбновитьСписокДополнительныхРеквизитовQRКода(НаименованиеРеквизита)
	
	ПолныйСписок          = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьПолныйСписокДополнительныхРеквизитовQRКода();
	ВосстановленныйСписок = РеквизитФормыВЗначение("Запись")[НаименованиеРеквизита].Получить();
	
	АктуализироватьСписокДополнительныхРеквизитовQRКода(НаименованиеРеквизита, ПолныйСписок, ВосстановленныйСписок);
	
	ЭтаФорма[НаименованиеРеквизита].СортироватьПоПредставлению();
	
КонецПроцедуры // ОбновитьСписокДополнительныхРеквизитовQRКода()

&НаСервере
// Добавляет новые реквизиты QR-штрихкода в список значений "ДополнительныеРеквизитыQRКода".
Процедура АктуализироватьСписокДополнительныхРеквизитовQRКода(НаименованиеРеквизита, ПолныйСписок, ВосстановленныйСписок)
	
	Если ТипЗнч(ВосстановленныйСписок) = Тип("СписокЗначений") Тогда
		
		Для Каждого ТекущийРеквизит Из ПолныйСписок Цикл
			ЭлементДляВосстановления = ВосстановленныйСписок.НайтиПоЗначению(ТекущийРеквизит.Значение);
			Если Не ЭлементДляВосстановления = Неопределено Тогда
				ТекущийРеквизит.Пометка = ЭлементДляВосстановления.Пометка;
			Иначе
				ТекущийРеквизит.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЭтаФорма[НаименованиеРеквизита] = ПолныйСписок;
	
КонецПроцедуры // АктуализироватьСписокДополнительныхРеквизитовQRКода()

&НаКлиенте
Процедура ОбработатьРедактированиеФлагаДополнительногоРеквизитаQRКода(НаименованиеРеквизита)
	
	Если НЕ Элементы.Найти(НаименованиеРеквизита) = Неопределено Тогда
		
		ТекущиеДанные = Элементы[НаименованиеРеквизита].ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			
			Если ТекущиеДанные.Значение = "counterVal" И ТекущиеДанные.Пометка Тогда
				ЭлементНомерСчетчика = ЭтаФорма[НаименованиеРеквизита].НайтиПоЗначению("counterId");
				Если Не ЭлементНомерСчетчика = Неопределено И Не ЭлементНомерСчетчика.Пометка Тогда
					ЭлементНомерСчетчика.Пометка = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущиеДанные.Значение = "counterId" И Не ТекущиеДанные.Пометка Тогда
				ЭлементПоказаниеСчетчика = ЭтаФорма[НаименованиеРеквизита].НайтиПоЗначению("counterVal");
				Если Не ЭлементПоказаниеСчетчика = Неопределено И ЭлементПоказаниеСчетчика.Пометка Тогда
					ЭлементПоказаниеСчетчика.Пометка = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРедактированиеФлагаДополнительногоРеквизитаQRКода()

&НаСервере
// Возвращает список дополнительных реквизитов QR-штрихкода,
// выбранные пользователем.
//
Функция ПолучитьДополнительныеРеквизитыQRКодаПользователя(НаименованиеРеквизита)
	
	ДополнительныеРеквизитыQRКодаПользователя = Новый СписокЗначений;
	
	Для Каждого ТекЭлемент Из ЭтаФорма[НаименованиеРеквизита] Цикл
		Если ТекЭлемент.Пометка Тогда
			ДополнительныеРеквизитыQRКодаПользователя.Добавить(ТекЭлемент.Значение,
															   ТекЭлемент.Представление,
															   ТекЭлемент.Пометка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДополнительныеРеквизитыQRКодаПользователя;
	
КонецФункции // ПолучитьДополнительныеРеквизитыQRКодаПользователя()

&НаКлиенте
// Обработчик события "Очистка" поля "ФорматКодировкиТекстаQR".
//
Процедура ФорматКодировкиТекстаQRОчистка(Элемент, СтандартнаяОбработка)
	
	// Отменяем очистку поля по "Shift+F4".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ФорматКодировкиТекстаQRОчистка()

&НаКлиенте
// Обработчик события "Очистка" поля "ФорматПериодаОплаты".
//
Процедура ФорматПериодаОплатыОчистка(Элемент, СтандартнаяОбработка)
	
	// Отменяем очистку поля по "Shift+F4".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Изменяет видимость полей на закладке "Штрихкод для ситикард".
//
Процедура УстановитьВидимостьПолейНаЗакладкеШтрихкодДляСитикард()
	
	Элементы.НастройкиВыводаШКДляОплатыОнлайнПоКР.Видимость = ВедетсяРаздельныйУчетПоУслугамКапремонта;
	Элементы.КодОрганизацииВСитикардПоОсн.Видимость         = Запись.ВыводитьQRштрихкодДляСитикардПоОсн;
	Элементы.КодОрганизацииВСитикардПоКр.Видимость          = Запись.ВыводитьQRштрихкодДляСитикардПоКР;
	
	Если ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		Элементы.НастройкиВыводаШКДляОплатыОнлайн.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.НастройкиВыводаШКДляОплатыОнлайн.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьПолейНаЗакладкеШтрихкодДляСитикард()

//// ДЛЯ УСЛУГ СОИ.

&НаКлиенте
// Процедура обновляет прмер представления услуг содержания общего имущества.
//
Процедура ОбновитьПримерПредставленияУслугСОИ()
	
	ПостфиксПредставленияУслугиСОИ = ?(Запись.ПредставлениеУслугСОИ = "", "", " " + Запись.ПредставлениеУслугСОИ);
	
	НадписьПредставленияУслугСОИ = "(например, " + """Водоотведение" + ПостфиксПредставленияУслугиСОИ + """)";
	
	Элементы.ПримерПредставленияУслугиСОИ.Заголовок = НадписьПредставленияУслугСОИ;
	
КонецПроцедуры

//// ОБЩИЕ

// Предназначена для формирования заголовка формы.
//
&НаСервере
Процедура СформироватьЗаголовокФормыНаСервере()
	
	ЭтаФорма.АвтоЗаголовок = Ложь;
	ЭтаФорма.Заголовок = "Настройки формирования платежного документа: "
					   + ?(Запись.Организация.Пустая(), "Создание", Запись.Организация.Наименование);
	
КонецПроцедуры // СформироватьЗаголовокФормыНаСервере()

// Предназначена для заполнения реквизитов формы по-умолчанию при создании новой записи регистра сведений.
//
&НаСервере
Процедура ЗаполнитьРеквизитыПоУмолчанию()
	
	// Квитанции
	Запись.ИспользоватьСтандартныйЗаголовок = Истина;
	
	// Штрихкод
	Запись.ВидШтрихкода                       = ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный");
	Запись.ВариантОпределенияФорматаШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВариантыОпределенияФорматаШтрихкода.ПоУказаннымНастройкам");
	Запись.РазделительДробнойЧастиСуммы       = " . (точка)";
	Запись.ДлинаСуммыШтрихкода                = 7;
	Запись.ИдентификаторЛСШтрихкода           = Истина;
	Запись.ДлинаИдентификатораШтрихкода       = ОпределитьМаксимальнуюДлинуКодаИлиИдентификатораЛС(Истина);
	Запись.СхемаДляРасчетаКонтрольнойСуммы    = "Схема №1";
	Запись.ФорматКодировкиТекстаQR            = 2; // соответствует UTF-8
	Запись.ФорматПериодаОплаты                = Элементы.ФорматПериодаОплаты.СписокВыбора[0].Значение; // "ММГГГГ"
	
	// Услуги СОИ
	Запись.ПредставлениеУслугСОИ = "для СОИ";
	
КонецПроцедуры // ЗаполнитьРеквизитыПоУмолчанию()

// Предназначена для установления видимости страниц по услугам капремонта при открытии формы записи.
//
&НаКлиенте
Процедура УстановитьВидимостьСтраницСНастройкамиПоУслугамКапремонта()
	
	// Страница "Квитанции".
	Если ВедетсяРаздельныйУчетПоУслугамКапремонта 
		И (Запись.ФормаКвитанции = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежныхДокументов.Стандартный")		//"Плат. документ (приказ №454 в соответ. с пост. №354)"
		ИЛИ Запись.ФормаКвитанции = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка1")	//"Плат. документ (с полями для отметки банка №1)"
		ИЛИ Запись.ФормаКвитанции = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка2")	//"Плат. документ (с полями для отметки банка №2)"
		ИЛИ Запись.ФормаКвитанции = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежныхДокументов.Москва")			//"Плат. документ (пост. №1161/57 для МО)"
		ИЛИ Запись.ФормаКвитанции = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежныхДокументов.ПермскийКрай")		//"Плат. документ (Пермский край)"
		ИЛИ Запись.ФормаКвитанции = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежныхДокументов.Чебоксары")		//"Плат. документ (Чувашская республика)"
		ИЛИ Запись.ФормаКвитанции = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежныхДокументов.Стандартный43Пр")	// "Плат. документ (приказ №43/пр)"
		ИЛИ Запись.ФормаКвитанции = "01"
		ИЛИ Запись.ФормаКвитанции = "02"
		ИЛИ Запись.ФормаКвитанции = "03"
		ИЛИ Запись.ФормаКвитанции = "04"
		ИЛИ Запись.ФормаКвитанции = "05"
		ИЛИ Запись.ФормаКвитанции = "06"
		ИЛИ Запись.ФормаКвитанции = "07"
		ИЛИ Запись.ФормаКвитанции = "08"
		ИЛИ Запись.ФормаКвитанции = "09"
		ИЛИ Запись.ФормаКвитанции = "10"
		ИЛИ Запись.ФормаКвитанции = "11"
		ИЛИ Запись.ФормаКвитанции = "12"
		ИЛИ Запись.ФормаКвитанции = "13"
		ИЛИ Запись.ФормаКвитанции = "14"
		ИЛИ ТипЗнч(Запись.ФормаКвитанции) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки")) Тогда
		Элементы.ГруппаЗаголовкиДополнительныеКонтактыПримечания.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.ГруппаЗаголовкиДополнительныеКонтактыПримечанияКР.Видимость        = Истина;
	Иначе
		Элементы.ГруппаЗаголовкиДополнительныеКонтактыПримечания.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаЗаголовкиДополнительныеКонтактыПримечанияКР.Видимость        = Ложь;
	КонецЕсли;
	
	// Страница "ШтрихКод".
	Если НЕ ВедетсяРаздельныйУчетПоУслугамКапремонта
	   И Элементы.ГруппаСоставШК.ТекущаяСтраница <> Элементы.ГруппаСоставШКПоОсн Тогда
		Элементы.ГруппаСоставШК.ТекущаяСтраница = Элементы.ГруппаСоставШКПоОсн;
		ОбновитьПримерШтрихкода();
	КонецЕсли;
	
	Элементы.ГруппаСоставШК.ОтображениеСтраниц     = ?(ВедетсяРаздельныйУчетПоУслугамКапремонта, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
	Элементы.ГруппаСоставШКПоУслугамКР.Видимость   = ВедетсяРаздельныйУчетПоУслугамКапремонта;
	Элементы.СтраницаСоставШКПоУслугамКР.Видимость = ВедетсяРаздельныйУчетПоУслугамКапремонта;
	
	Элементы.ТаблицаСоставШКПоОсновнымУслугамКнопкаСкопироватьСоставКР.Видимость    = ВедетсяРаздельныйУчетПоУслугамКапремонта;
	Элементы.ТаблицаСоставШКПоУслугамКапремонтаКнопкаСкопироватьСоставОсн.Видимость = ВедетсяРаздельныйУчетПоУслугамКапремонта;
	Элементы.ГруппаДопРеквизитовQRШКПоОсновнымУслугам.Заголовок                     = ?(ВедетсяРаздельныйУчетПоУслугамКапремонта, "Доп. реквизиты QR ШК по основным услугам",
																																  "Доп. реквизиты QR ШК");
	Элементы.ГруппаДопРеквизитовQRШКПоУслугамКР.Видимость                           = ВедетсяРаздельныйУчетПоУслугамКапремонта;
	
	// Страница "Штрихкод для онлайн-оплаты".
	УстановитьВидимостьПолейНаЗакладкеШтрихкодДляСитикард();
	
КонецПроцедуры // УстановитьВидимостьСтраницСНастройкамиПоУслугамКапремонта()

// Предназначена для установки видимости элементов формы при изменении поля ввода "ВариантОпределенияФорматаШтрихкода".
//
&НаКлиенте
Процедура УстановитьВидимостьЭлементовПриИзмененииВариантаОпределенияФормата()
	
	Если Запись.ВариантОпределенияФорматаШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВариантыОпределенияФорматаШтрихкода.Автоматически") Тогда
		
		Элементы.КодОрганизацииДляОдномерногоШКОбщий.Видимость      = Истина;
		Элементы.ГруппаСоставШКиДопНастройки.Видимость              = Ложь;
		
		Элементы.ГруппаДопРеквизитовQRШКПоОсновнымУслугам.Видимость = Ложь;
		Элементы.ГруппаДопРеквизитовQRШКПоУслугамКР.Видимость       = Ложь;
		Элементы.ГруппаГруппаНастройкиQRШтрихкодаДоп.Видимость      = Ложь;
		Элементы.ГруппаДопРеквизитовQRШК.ОтображениеСтраниц         = ОтображениеСтраницФормы.Нет;
		
		Элементы.ГруппаДопРеквизитовQRАвтоматически.Видимость       = Истина;
		Элементы.СхемаДляРасчетаКонтрольнойСуммы.Видимость          = Ложь;
		
	ИначеЕсли Запись.ВариантОпределенияФорматаШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВариантыОпределенияФорматаШтрихкода.ПоУказаннымНастройкам") Тогда
		
		
		Элементы.КодОрганизацииДляОдномерногоШКОбщий.Видимость      = Ложь;
		Элементы.ГруппаСоставШКиДопНастройки.Видимость              = Истина;
		Элементы.ГруппаТаблицаСоставШКПоОсн.Видимость               = Истина;
		Элементы.ГруппаВнешняяОбработкаОсн.Видимость                = Ложь;
		
		Если ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
			Элементы.ГруппаТаблицаСоставШКПоКР.Видимость            = Истина;
			Элементы.ГруппаВнешняяОбработкаКР.Видимость             = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаДопРеквизитовQRШКПоОсновнымУслугам.Видимость = Истина;
		Элементы.ГруппаГруппаНастройкиQRШтрихкодаДоп.Видимость      = Истина;
		Элементы.ГруппаДопРеквизитовQRШК.ОтображениеСтраниц         = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Элементы.ГруппаДопРеквизитовQRАвтоматически.Видимость       = Ложь;
		Элементы.СхемаДляРасчетаКонтрольнойСуммы.Видимость          = Истина;
		Элементы.ГруппаТаблицаДопРеквизитовQRШКПоОсн.Видимость      = Истина;
		Элементы.ГруппаВнешняяОбработкаQRОсн.Видимость              = Ложь;
		Элементы.ГруппаДопРеквизитовQRШКПоУслугамКР.Видимость       = ВедетсяРаздельныйУчетПоУслугамКапремонта
		;
		Если ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
			Элементы.ГруппаТаблицаДопРеквизитовQRШКПоКР.Видимость   = Истина;
			Элементы.ГруппаВнешняяОбработкаQRКР.Видимость           = Ложь;
		КонецЕсли;
		
	Иначе // Из внешней обработки.
		
		Элементы.КодОрганизацииДляОдномерногоШКОбщий.Видимость      = Ложь;
		Элементы.ГруппаСоставШКиДопНастройки.Видимость              = Истина;
		Элементы.ГруппаТаблицаСоставШКПоОсн.Видимость               = Ложь;
		Элементы.ГруппаВнешняяОбработкаОсн.Видимость                = Истина;
		
		Если ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
			Элементы.ГруппаТаблицаСоставШКПоКР.Видимость            = Ложь;
			Элементы.ГруппаВнешняяОбработкаКР.Видимость             = Истина;
		КонецЕсли;
		
		Элементы.ГруппаДопРеквизитовQRШКПоОсновнымУслугам.Видимость = Истина;
		Элементы.ГруппаГруппаНастройкиQRШтрихкодаДоп.Видимость      = Истина;
		Элементы.ГруппаДопРеквизитовQRШК.ОтображениеСтраниц         = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Элементы.ГруппаДопРеквизитовQRАвтоматически.Видимость       = Ложь;
		Элементы.СхемаДляРасчетаКонтрольнойСуммы.Видимость          = Ложь;
		Элементы.ГруппаТаблицаДопРеквизитовQRШКПоОсн.Видимость      = Ложь;
		Элементы.ГруппаВнешняяОбработкаQRОсн.Видимость              = Истина;
		Элементы.ГруппаДопРеквизитовQRШКПоУслугамКР.Видимость       = ВедетсяРаздельныйУчетПоУслугамКапремонта;
		
		Если ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
			Элементы.ГруппаТаблицаДопРеквизитовQRШКПоКР.Видимость   = Ложь;
			Элементы.ГруппаВнешняяОбработкаQRКР.Видимость           = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для установления видимости полей редактирования заголовка квитанции.
&НаКлиенте
Процедура УстановитьВидимостьПолейРедактированияЗаголовкаКвитанции()
	
	Если Запись.ФормаКвитанции = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежныхДокументов.Стандартный")
	 ИЛИ Запись.ФормаКвитанции = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка1")
	 ИЛИ Запись.ФормаКвитанции = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка2")
	 ИЛИ Запись.ФормаКвитанции = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежныхДокументов.Москва")
	 ИЛИ Запись.ФормаКвитанции = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР")
	 ИЛИ Запись.ФормаКвитанции = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежныхДокументов.Москва679")
	 ИЛИ Запись.ФормаКвитанции = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежныхДокументов.Стандартный43Пр") Тогда
		Элементы.ГруппаЗаголовокКвитанции.Видимость = Истина;
		Элементы.ЗаголовокОсн.Видимость             = НЕ Запись.ИспользоватьСтандартныйЗаголовок;
		Если Запись.ФормаКвитанции = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР") Тогда
			Элементы.ЗаголовокКР.Видимость = Ложь;
		Иначе
			Элементы.ЗаголовокКР.Видимость = НЕ Запись.ИспользоватьСтандартныйЗаголовок И ВедетсяРаздельныйУчетПоУслугамКапремонта;
		КонецЕсли;
	Иначе
		Элементы.ГруппаЗаголовокКвитанции.Видимость = Ложь;
		Элементы.ЗаголовокОсн.Видимость             = Ложь;
		Элементы.ЗаголовокКР.Видимость              = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьПолейРедактированияЗаголовкаКвитанции()

// Предназначена для заполнения таблиц с составом одномерного ШК и с составом доп. реквизитов QR-кода.
//
&НаКлиенте
Процедура ЗаполнитьТаблицыРазделаШК()
	
	ОбновитьТаблицуФорматаОдномерногоШтрихкода();
	ОписаниеСхемКонтрольнойСуммы();
	
	// Восстанавливаем из хранилища список доп.реквизитов QR кода.
	ОбновитьСписокДополнительныхРеквизитовQRКода("ДополнительныеРеквизитыQRКодаПоОсн");
	
	Если ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		ОбновитьСписокДополнительныхРеквизитовQRКода("ДополнительныеРеквизитыQRКодаПоКР");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицыРазделаШК()

&НаКлиенте
// Процедура - обработчик события "Очистка" поля ввода "ПримерШтрихкода".
//
Процедура ПримерШтрихкодаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти
