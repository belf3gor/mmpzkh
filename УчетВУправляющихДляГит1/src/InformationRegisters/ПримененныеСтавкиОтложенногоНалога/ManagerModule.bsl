#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс
	
// Записывает комплект примененных ставок.
//
// Параметры:
//  Движения					 - КоллекцияДвижений - коллекция, в которую будут помещены записи регистра.
//  СтавкиНалога				 - Соответствие - значения ставок для записи.
//                 * Ключ - ПеречислениеСсылка.ВидыСтавокОтложенногоНалога - вид ставки
//                 * Значение - число, значение ставки в виде доли, например, 0.2 для ставки 20%
//  ПротоколРасчетаСтавокНалога	 - Соответствие - подробное описание хода расчета каждой ставки.
//                 * Ключ - ПеречислениеСсылка.ВидыСтавокОтложенногоНалога - вид ставки
//                 * Значение - Структура - см. НалогНаПрибыльБухгалтерскийУчет.НовыйПротоколРасчетаСтавкиНалога()
//  ПериодРасчета                - Дата - период, в котором выполнен расчет; соответствует периоду регламентной операции.
//  Организация					 - СправочникСсылка.Организации - организация, по которой выполнен расчет.
//  ОтчетнаяДата                 - Дата - отчетная дата, по состоянию на которую определены данные.
//                                 Следует передавать для записи результатов инициализации.
//                                 Если не передан, вычисляется по ПериодРасчета.
//
Процедура ЗаписатьРасчетСтавокНалога(Движения, СтавкиНалога, ПротоколРасчетаСтавокНалога, ПериодРасчета, Организация, ОтчетнаяДата = '0001-01-01') Экспорт
	
	ДанныеДляЗаписи = ЗакрытиеМесяца.НовыйЗаписиВспомогательногоРегистраСведений(
		Метаданные.РегистрыСведений.ПримененныеСтавкиОтложенногоНалога);
		
	Если Не ЗначениеЗаполнено(ОтчетнаяДата) Тогда
		ОтчетнаяДата = КонецМесяца(ПериодРасчета) + 1;
	КонецЕсли;
		
	Для Каждого МетаданныеВидСтавки Из Метаданные.Перечисления.ВидыСтавокОтложенногоНалога.ЗначенияПеречисления Цикл
		
		ВидСтавки = Перечисления.ВидыСтавокОтложенногоНалога[МетаданныеВидСтавки.Имя];
		
		СтавкаНалога = СтавкиНалога[ВидСтавки];
		
		Если Не ЗначениеЗаполнено(СтавкаНалога) Тогда
			Продолжить;
		КонецЕсли;
		
		Протокол = ПротоколРасчетаСтавокНалога[ВидСтавки];
		
		Если Не ЗначениеЗаполнено(Протокол) Тогда
			АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.ПустаяСсылка();
		Иначе
			АлгоритмРасчета = Протокол.АлгоритмРасчета;
		КонецЕсли;
		
		Запись = ДанныеДляЗаписи.Добавить();
		Запись.ОтчетнаяДата    = ОтчетнаяДата;
		Запись.ВидСтавки       = ВидСтавки;
		Запись.СтавкаНалога    = СтавкаНалога;
		Запись.АлгоритмРасчета = АлгоритмРасчета;
		Если ЗначениеЗаполнено(АлгоритмРасчета) Тогда
			Запись.ПротоколРасчета = СериализоватьДанныеАлгоритмаРасчетаСтавки(Протокол.ДанныеАлгоритма);
		КонецЕсли;
		
	КонецЦикла;
		
	РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(ПериодРасчета, Организация);
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		ДанныеДляЗаписи,
		РеквизитыЗаписи,
		"ПримененныеСтавкиОтложенногоНалога");
		
КонецПроцедуры

// Читает комплект примененных ставок.
//
// Параметры:
//  ОтчетныйПериод - Дата - дата, характеризующая отчетный период
//                 - Структура - полное описание периода, за который следует прочитать данные; 
//                   Ключи:
//                    * ОтчетнаяДата  - Дата - отчетная дата, на которую определены ставки
//                    * ПериодРасчета - Дата - результат функции ПериодРасчета
//  Организация	   - СправочникСсылка.Организация - налогоплательщик
//  ФормаПредставленияРезультата 
//                 - Строка - форма, в которой функция вернет значение
//                     * "Доля"                              - как доля от налоговой базы (например, 0,2)
//                     * "Процент", "%" и любые другие слова - как процент, где база принята за 100% (например, 20%)
//  ОтборВидСтавки - ПеречислениеСсылка.ВидыСтавокОтложенногоНалога - отбор по виду ставки
//                 - Неопределено - отбор по виду ставки не требуется
// 
// Возвращаемое значение:
//  Соответствие - прочитанные ставки, если прочитан полный комплект и значения ставок фактически разные.
//                 * Ключ - ПеречислениеСсылка.ВидыСтавокОтложенногоНалога - вид ставки
//                 * Значение - число, значение ставки (в долях от единицы или в процентах - см. ФормаПредставленияРезультата)
//                 Может быть возвращено, если не задан ОтборВидСтавки.
//  Число        - прочитанное значение ставки (в долях от единицы или в процентах - см. ФормаПредставленияРезультата),
//                 если задан полный комплект ставок, но их значения фактически равны.
//  Неопределено - сведений о ставках нет или комплект не полный.
//
// Возвращаемое значение:
//  Число - значение ставки налога (в долях от единицы или в процентах - см. ФормаПредставленияРезультата)
Функция ПрочитатьСтавки(ОтчетныйПериод, Организация, ФормаПредставленияРезультата = "Доля", ОтборВидСтавки = Неопределено) Экспорт
	
	Если ТипЗнч(ОтчетныйПериод) = Тип("Дата") Тогда
		ОтчетнаяДата  = КонецМесяца(ОтчетныйПериод) + 1;
		ПериодРасчета = ПериодРасчета(ОтчетнаяДата, Организация, ОтчетнаяДата);
	ИначеЕсли ТипЗнч(ОтчетныйПериод) = Тип("Структура") Тогда
		ОтчетнаяДата  = ОтчетныйПериод.ОтчетнаяДата;
		ПериодРасчета = ОтчетныйПериод.ПериодРасчета;
	Иначе
		ПериодРасчета = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПериодРасчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетнаяДата",  ОтчетнаяДата);
	Запрос.УстановитьПараметр("ПериодРасчета", ПериодРасчета);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПримененныеСтавкиОтложенногоНалога.ВидСтавки КАК ВидСтавки,
	|	ПримененныеСтавкиОтложенногоНалога.СтавкаНалога КАК СтавкаНалога
	|ИЗ
	|	РегистрСведений.ПримененныеСтавкиОтложенногоНалога КАК ПримененныеСтавкиОтложенногоНалога
	|ГДЕ
	|	ПримененныеСтавкиОтложенногоНалога.ОтчетнаяДата = &ОтчетнаяДата
	|	И ПримененныеСтавкиОтложенногоНалога.Организация = &Организация
	|	И ПримененныеСтавкиОтложенногоНалога.ПериодРасчета = &ПериодРасчета
	|	И ПримененныеСтавкиОтложенногоНалога.Активность";
	
	СтавкиНалога = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ФормаПредставленияРезультата = "Доля" Тогда
			Значение = Выборка.СтавкаНалога;
		Иначе
			Значение = Выборка.СтавкаНалога * 100;
		КонецЕсли;
		
		СтавкиНалога.Вставить(Выборка.ВидСтавки, Значение);
		
	КонецЦикла;
	
	ЗаданыВсеСтавки       = Истина;
	ЗаданыРазличныеСтавки = Ложь;
	ПредыдущееЗначениеСтавки = Неопределено;
	Для Каждого МетаданныеВидСтавок Из Метаданные.Перечисления.ВидыСтавокОтложенногоНалога.ЗначенияПеречисления Цикл
		
		ВидСтавки = Перечисления.ВидыСтавокОтложенногоНалога[МетаданныеВидСтавок.Имя];
		
		Если ЗначениеЗаполнено(ОтборВидСтавки) И ВидСтавки <> ОтборВидСтавки Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтавкиНалога[ВидСтавки] = Неопределено Тогда
			ЗаданыВсеСтавки = Ложь;
			Продолжить;
		КонецЕсли;
		
		ЗначениеСтавки = СтавкиНалога[ВидСтавки];
		
		Если ПредыдущееЗначениеСтавки = Неопределено Тогда
			ПредыдущееЗначениеСтавки = ЗначениеСтавки;
		ИначеЕсли Не ЗаданыРазличныеСтавки Тогда
			ЗаданыРазличныеСтавки = (ЗначениеСтавки <> ПредыдущееЗначениеСтавки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаданыВсеСтавки И ЗаданыРазличныеСтавки Тогда
		Возврат СтавкиНалога;
	Иначе
		Возврат ПредыдущееЗначениеСтавки;
	КонецЕсли;
	
КонецФункции

// Определяет период расчета, за который в регистре записаны данные на отчетную дату.
//
// См. РегистрыСведений.РасчетОтложенногоНалога.ПериодРасчета
//
// Параметры:
//  ОтчетнаяДата - Дата - отчетная дата, на которую нужны сведения.
//  Организация	 - СправочникСсылка.Организации - организация.
//  Ограничение  - Дата - период, за который выполняется расчет;
//                 записи с начальными данными должны быть рассчитаны не позднее этой даты.
// 
// Возвращаемое значение:
//  Дата - период в регистре (соответствует значению измерения ПериодРасчета).
//         Может быть пустой датой, если в регистре нет данных на отчетную дату.
//
Функция ПериодРасчета(Знач ОтчетнаяДата, Организация, Знач Ограничение) Экспорт
	
	РегистрыСведений.РасчетОтложенногоНалога.ПривестиПериодРасчета(ОтчетнаяДата);
	РегистрыСведений.РасчетОтложенногоНалога.ПривестиПериодРасчета(Ограничение);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетнаяДата",  ОтчетнаяДата);
	Запрос.УстановитьПараметр("ПериодРасчета", Ограничение);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчет.ПериодРасчета КАК ПериодРасчета
	|ИЗ
	|	РегистрСведений.ПримененныеСтавкиОтложенногоНалога КАК Расчет
	|ГДЕ
	|	Расчет.ОтчетнаяДата = &ОтчетнаяДата
	|	И Расчет.Организация = &Организация
	|	И Расчет.ПериодРасчета <= &ПериодРасчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодРасчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПериодРасчета;
	Иначе
		Возврат '0001-01-01';
	КонецЕсли;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СериализоватьДанныеАлгоритмаРасчетаСтавки(ДанныеАлгоритма)
		
	Если Не ЗначениеЗаполнено(ДанныеАлгоритма) Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеАлгоритмаДляСериализации = Новый Структура;
	ДанныеРегистраций              = Новый Соответствие;
	
	Для Каждого ПоказательПротокола Из ДанныеАлгоритма Цикл
		
		Если ТипЗнч(ПоказательПротокола.Значение) <> Тип("Соответствие") Тогда
			ДанныеАлгоритмаДляСериализации.Вставить(ПоказательПротокола.Ключ, ПоказательПротокола.Значение);
		Иначе
			// Предполагается, что все ключи соответствия имеют тип СправочникСсылка.РегистрацииВНалоговомОргане.
			// Для сериализации заменим их на значения КПП.
			ДанныеАлгоритмаДляСериализации.Вставить(ПоказательПротокола.Ключ, Новый Соответствие);
			Для Каждого ПоказательРегистрации Из ПоказательПротокола.Значение Цикл
				
				ДанныеРегистрации = ДанныеРегистраций[ПоказательРегистрации.Ключ];
				Если ДанныеРегистрации = Неопределено Тогда
					ДанныеРегистрации = Новый Структура;
					ДанныеРегистраций.Вставить(ПоказательРегистрации.Ключ, ДанныеРегистрации);
				КонецЕсли;
				
				ДанныеРегистрации.Вставить(ПоказательПротокола.Ключ, ПоказательРегистрации.Значение);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеРегистраций) Тогда
		
		// Для регистраций сохраним в протокол значения КПП, а не ссылки.
		// Если окажется, что для каких-то ссылок КПП ошибочно дублируются или отсутствуют,
		// то данные протокола будут не в полной мере отражать фактический ход расчета.
		
		Ссылки = Новый Массив;
		Для Каждого КлючИЗначение Из ДанныеРегистраций Цикл
			Ссылки.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылки", Ссылки);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РегистрацииВНалоговомОргане.КПП КАК КПП,
		|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|ГДЕ
		|	РегистрацииВНалоговомОргане.Ссылка В(&Ссылки)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Для Каждого ПоказательПротокола Из ДанныеРегистраций[Выборка.Ссылка] Цикл
				ДанныеАлгоритмаДляСериализации[ПоказательПротокола.Ключ].Вставить(Выборка.КПП, ПоказательПротокола.Значение);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, ДанныеАлгоритмаДляСериализации);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

#КонецЕсли
