#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

Функция Отбор(Параметры) Экспорт
	
	ОтборЛисты = Новый Структура;
	ОтборЛисты.Вставить("Организация",    Параметры.Организация);
	ОтборЛисты.Вставить("ПлатежныйАгент", Параметры.ПлатежныйАгент);
	Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		ОтборЛисты.Вставить("ПодразделениеОрганизации", Параметры.ПодразделениеОрганизации);
	Иначе
		ОтборЛисты.Вставить("ПодразделениеОрганизации", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	КонецЕсли;
	
	Возврат ОтборЛисты;
	
КонецФункции

Функция ПроверитьИзменитьНумерацию(Знач ПараметрыОтчета, Знач СписокПодразделений,
		Знач НумерацияЛистовИзменилась, Знач ДатаНачальногоЛиста, Знач СоответствиеЛистыТек) Экспорт
	
	НачалоГода = НачалоГода(ПараметрыОтчета.НачалоПериода);
	НачИтоги   = ?(ПараметрыОтчета.ПроверитьНомера И НЕ ПараметрыОтчета.ПересчитатьНомераЛистов, НачалоГода, ПараметрыОтчета.НачалоПериода);
	
	СтекСообщенийОНумерации = Новый Массив;
	
	ДатаПоследнегоЛиста   = ПараметрыОтчета.КонецПериода;
	СоответствиеЛистыПред = ПолучитьНомераЛистовЗаВесьПериод(ДатаПоследнегоЛиста, ПараметрыОтчета, СписокПодразделений);
	
	ДниУдаленныхЛистов         = Новый Соответствие;
	ДниЛистовСДругойНумерацией = Новый Соответствие;
	СписокВсеДниЛистов         = Новый СписокЗначений;
	
	Для каждого КлючИЗначение Из СоответствиеЛистыПред Цикл
		Если КлючИЗначение.Ключ >= НачИтоги И КлючИЗначение.Ключ <= ПараметрыОтчета.КонецПериода
			И СоответствиеЛистыТек[КлючИЗначение.Ключ] = Неопределено Тогда
			СписокВсеДниЛистов.Добавить(КлючИЗначение.Ключ);
			ДниУдаленныхЛистов.Вставить(КлючИЗначение.Ключ, Истина);
			НумерацияЛистовИзменилась = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КлючИЗначение Из СоответствиеЛистыТек Цикл
		СписокВсеДниЛистов.Добавить(КлючИЗначение.Ключ);
		Если СоответствиеЛистыПред[КлючИЗначение.Ключ] = Неопределено Тогда // новые листы
			НумерацияЛистовИзменилась = Истина;
		ИначеЕсли СоответствиеЛистыПред[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			ДниЛистовСДругойНумерацией.Вставить(КлючИЗначение.Ключ, Истина);
			НумерацияЛистовИзменилась = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаНачальногоЛиста) Тогда
		Если СоответствиеЛистыПред[ДатаНачальногоЛиста] <> Неопределено Тогда
			ДниЛистовСДругойНумерацией.Вставить(ДатаНачальногоЛиста, Истина);
		КонецЕсли;
		
		Если ПараметрыОтчета.НомерЛистаНачало > 1 Тогда
			СоответствиеЛистыТек.Вставить(ДатаНачальногоЛиста, ПараметрыОтчета.НомерЛистаНачало - 1);
		КонецЕсли;
		
		Если СписокВсеДниЛистов.НайтиПоЗначению(ДатаНачальногоЛиста) = Неопределено Тогда
			СписокВсеДниЛистов.Добавить(ДатаНачальногоЛиста);
		КонецЕсли;
	КонецЕсли;
	
	СписокВсеДниЛистов.СортироватьПоЗначению();
	
	ОтборЛисты = Отбор(ПараметрыОтчета);
	
	ДатаПервогоЛистаСНарушеннойНумерацией = Неопределено;
	Если НумерацияЛистовИзменилась Тогда
		РазницаЛистовДоЭтого = 0;
		Если ПараметрыОтчета.ПересчитатьНомераЛистов Тогда
			НомераЛистов = РегистрыСведений.НомераЛистовКассовойКниги.СоздатьНаборЗаписей();
			Для каждого КлючИЗначение Из ОтборЛисты Цикл
				НомераЛистов.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
			КонецЦикла;
			
			Для каждого ЭлементСписка Из СписокВсеДниЛистов Цикл
				ДатаЛистаИзм  = ЭлементСписка.Значение;
				НомерЛистаИзм = СоответствиеЛистыТек[ДатаЛистаИзм];
				Если ДниУдаленныхЛистов[ДатаЛистаИзм] <> Неопределено Тогда
					НомераЛистов.Отбор.Период.Значение      = ДатаЛистаИзм;
					НомераЛистов.Отбор.Период.Использование = Истина;
					НомераЛистов.Очистить();
					ЗаписатьНомерЛиста(НомераЛистов);
				ИначеЕсли ДниЛистовСДругойНумерацией[ДатаЛистаИзм] <> Неопределено Тогда
					НомераЛистов.Отбор.Период.Значение      = ДатаЛистаИзм;
					НомераЛистов.Отбор.Период.Использование = Истина;
					
					НомераЛистов.Прочитать();
					ТекНомера = НомераЛистов.Выгрузить();
					Если ТекНомера.Количество() > 0 Тогда
						ТекНомера[0].НомерЛиста = НомерЛистаИзм;
						НомераЛистов.Загрузить(ТекНомера);
						ЗаписатьНомерЛиста(НомераЛистов);
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(НомерЛистаИзм) И СоответствиеЛистыПред[ДатаЛистаИзм] = Неопределено Тогда
					НомераЛистов.Отбор.Период.Значение      = ДатаЛистаИзм;
					НомераЛистов.Отбор.Период.Использование = Истина;
					НомераЛистов.Прочитать();
					
					НовыйЛист = НомераЛистов.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйЛист, ОтборЛисты);
					НовыйЛист.Период     = ДатаЛистаИзм;
					НовыйЛист.НомерЛиста = НомерЛистаИзм;
					ЗаписатьНомерЛиста(НомераЛистов);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для каждого ЭлементСписка Из СписокВсеДниЛистов Цикл
				ДатаЛистаИзм  = ЭлементСписка.Значение;
				НомерЛистаИзм = СоответствиеЛистыТек[ДатаЛистаИзм];
				Если ДниУдаленныхЛистов[ДатаЛистаИзм] <> Неопределено Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Лист кассовой книги за %1 отсутствует'"), Формат(ДатаЛистаИзм, "ДФ=dd.MM.yyyy"));
					СтекСообщенийОНумерации.Добавить(ТекстСообщения);
					
					Если ДатаПервогоЛистаСНарушеннойНумерацией = Неопределено Тогда
						ДатаПервогоЛистаСНарушеннойНумерацией = ДатаЛистаИзм;
					Иначе
						ДатаПервогоЛистаСНарушеннойНумерацией = Мин(ДатаЛистаИзм, ДатаПервогоЛистаСНарушеннойНумерацией);
					КонецЕсли;
				ИначеЕсли ДниЛистовСДругойНумерацией[ДатаЛистаИзм] <> Неопределено И РазницаЛистовДоЭтого = 0 Тогда
					НомерЛистаТек = СоответствиеЛистыТек[ДатаЛистаИзм];
					
					ИндексЭлементаЭтогоДня = СписокВсеДниЛистов.Индекс(ЭлементСписка);
					Если ИндексЭлементаЭтогоДня > 0 Тогда
						ДатаЛистаДоТекущего = СписокВсеДниЛистов.Получить(ИндексЭлементаЭтогоДня - 1);
						НомерЛистаДоЭтогоДняТек  = СоответствиеЛистыТек[ДатаЛистаДоТекущего];
						НомерЛистаДоЭтогоДняПред = СоответствиеЛистыПред[ДатаЛистаДоТекущего];
					Иначе
						Если ДатаЛистаИзм = НачалоГода Тогда
							РазницаЛистовДоЭтого = 0;
						ИначеЕсли ДатаЛистаИзм = НачИтоги Тогда
							РазницаЛистовДоЭтого = 0;
							ДатаЛистаДоТекущего  = НачИтоги - 84000;
							ПредыдущиеНомера = РегистрыСведений.НомераЛистовКассовойКниги.СрезПоследних(ДатаЛистаДоТекущего, ОтборЛисты);
							Если ПредыдущиеНомера.Количество() > 0 И ПредыдущиеНомера[0].Период >= НачалоГода Тогда
								НомерЛистаДоЭтогоДня = ПредыдущиеНомера[0].НомерЛиста;
								Если НомерЛистаДоЭтогоДня >= НомерЛистаТек Тогда
									РазницаЛистовДоЭтого = -1;  // уменьшилась до этого дня
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ДатаЛистаИзм > НачИтоги Тогда
							ДатаЛистаДоТекущего = НачИтоги;
							НомерЛистаДоЭтогоДняТек  = СоответствиеЛистыТек[ДатаЛистаДоТекущего];
							НомерЛистаДоЭтогоДняПред = СоответствиеЛистыПред[ДатаЛистаДоТекущего];
							Если НомерЛистаДоЭтогоДняПред = Неопределено Тогда
								РазницаЛистовДоЭтого = 1;       // увеличилась до этого дня
							Иначе
								РазницаЛистовДоЭтого = НомерЛистаДоЭтогоДняТек - НомерЛистаДоЭтогоДняПред;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если РазницаЛистовДоЭтого <> 0 Тогда
						Если СтекСообщенийОНумерации.Количество() = 0 Тогда
							ТекстСообщения = НСтр("ru = 'Нумерация листов изменена до начала периода формирования кассовой книги'");
						Иначе
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Нумерация листов кассовой книги была изменена до %1'"), Формат(ДатаЛистаИзм, "ДФ=dd.MM.yyyy"));
						КонецЕсли;
						
						СтекСообщенийОНумерации.Добавить(ТекстСообщения);
					Иначе
						НомерЛистаПред = СоответствиеЛистыПред[ДатаЛистаИзм];
						Если НомерЛистаПред = Неопределено Тогда
							РазницаЛистов = 1; // увеличилась
						Иначе
							РазницаЛистов = НомерЛистаТек - НомерЛистаПред;
						КонецЕсли;
						
						Если РазницаЛистов > 0 Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Количество листов кассовой книги за %1 увеличилось'"), Формат(ДатаЛистаИзм, "ДФ=dd.MM.yyyy"));
						Иначе
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Количество листов кассовой книги за %1 уменьшилось'"), Формат(ДатаЛистаИзм, "ДФ=dd.MM.yyyy"));
						КонецЕсли;
						
						СтекСообщенийОНумерации.Добавить(ТекстСообщения);
					КонецЕсли;
					
					Если ДатаПервогоЛистаСНарушеннойНумерацией = Неопределено Тогда
						ДатаПервогоЛистаСНарушеннойНумерацией = ДатаЛистаИзм;
					Иначе
						ДатаПервогоЛистаСНарушеннойНумерацией = Мин(ДатаЛистаИзм, ДатаПервогоЛистаСНарушеннойНумерацией);
					КонецЕсли;
				ИначеЕсли СоответствиеЛистыПред[ДатаЛистаИзм] = Неопределено Тогда
					Если ЛистНумеруетсяПервыйРаз(ДатаЛистаИзм, СоответствиеЛистыПред) Тогда // листы нумеруются первый раз
						НомераЛистов = РегистрыСведений.НомераЛистовКассовойКниги.СоздатьНаборЗаписей();
						Для каждого КлючИЗначение Из ОтборЛисты Цикл
							НомераЛистов.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
						КонецЦикла;
						
						НомераЛистов.Отбор.Период.Значение      = ДатаЛистаИзм;
						НомераЛистов.Отбор.Период.Использование = Истина;
						НомераЛистов.Прочитать();
						
						НовыйЛист = НомераЛистов.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйЛист, ОтборЛисты);
						НовыйЛист.Период     = ДатаЛистаИзм;
						НовыйЛист.НомерЛиста = НомерЛистаИзм;
						ЗаписатьНомерЛиста(НомераЛистов);
					Иначе
						Если ДатаПервогоЛистаСНарушеннойНумерацией = Неопределено Тогда
							ДатаПервогоЛистаСНарушеннойНумерацией = ДатаЛистаИзм;
						Иначе
							ДатаПервогоЛистаСНарушеннойНумерацией = Мин(ДатаЛистаИзм, ДатаПервогоЛистаСНарушеннойНумерацией);
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Нумерация листов кассовой книги была изменена до %1'"), Формат(ДатаЛистаИзм, "ДФ=dd.MM.yyyy"));
							СтекСообщенийОНумерации.Добавить(ТекстСообщения);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("СтекСообщенийОНумерации, РазницаЛистовДоЭтого, ДатаПоследнегоЛиста, ДатаПервогоЛистаСНарушеннойНумерацией",
		СтекСообщенийОНумерации,
		РазницаЛистовДоЭтого,
		ДатаПоследнегоЛиста,
		ДатаПервогоЛистаСНарушеннойНумерацией);
	
КонецФункции

Функция ПолучитьНомерЛистаНачало(Знач ПараметрыОтчета) Экспорт
	
	НомерЛистаНачало = 1;
	Если ПараметрыОтчета.НачалоПериода > НачалоГода(ПараметрыОтчета.НачалоПериода) Тогда
		Запрос = Новый Запрос;
		ТекстЗапросаНомерЛиста =
		"ВЫБРАТЬ
		|	1 КАК НомерЛиста,
		|	&ПредыдущийПериод КАК КлючСвязи
		|ПОМЕСТИТЬ ВТ_НомерЛистаНезадан
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючСвязи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НомераЛистовКассовойКнигиСрезПоследних.НомерЛиста КАК НомерЛиста,
		|	&ПредыдущийПериод КАК КлючСвязи
		|ПОМЕСТИТЬ ВТ_НомерЛистаДоЭтойДаты
		|ИЗ
		|	РегистрСведений.НомераЛистовКассовойКниги.СрезПоследних(
		|			&ПредыдущийПериод,
		|			Организация = &Организация
		|				И ПодразделениеОрганизации = &Подразделение
		|				И ПлатежныйАгент = &ПлатежныйАгент) КАК НомераЛистовКассовойКнигиСрезПоследних
		|ГДЕ
		|	НомераЛистовКассовойКнигиСрезПоследних.Период >= &НачалоГода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючСвязи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_НомерЛистаДоЭтойДаты.НомерЛиста, 0) > 0
		|			ТОГДА ВТ_НомерЛистаДоЭтойДаты.НомерЛиста + 1
		|		ИНАЧЕ ВТ_НомерЛистаНезадан.НомерЛиста
		|	КОНЕЦ КАК НомерЛиста
		|ИЗ
		|	ВТ_НомерЛистаНезадан КАК ВТ_НомерЛистаНезадан
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НомерЛистаДоЭтойДаты КАК ВТ_НомерЛистаДоЭтойДаты
		|		ПО ВТ_НомерЛистаНезадан.КлючСвязи = ВТ_НомерЛистаДоЭтойДаты.КлючСвязи";
		
		Запрос.УстановитьПараметр("Организация",       ПараметрыОтчета.Организация);
		Запрос.УстановитьПараметр("НачалоГода",        НачалоГода(ПараметрыОтчета.НачалоПериода));
		Запрос.УстановитьПараметр("ПредыдущийПериод",  ПараметрыОтчета.НачалоПериода - 86400);
		Запрос.УстановитьПараметр("ПлатежныйАгент",    ПараметрыОтчета.ПлатежныйАгент);
		Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
			Запрос.УстановитьПараметр("Подразделение", ПараметрыОтчета.ПодразделениеОрганизации);
		Иначе
			ТекстЗапросаНомерЛиста = СтрЗаменить(ТекстЗапросаНомерЛиста,
				"И НомераЛистовКассовойКниги.ПодразделениеОрганизации = &Подразделение", "");
			ТекстЗапросаНомерЛиста = СтрЗаменить(ТекстЗапросаНомерЛиста,
				"И ПодразделениеОрганизации = &Подразделение", "");
		КонецЕсли;
		
		Запрос.Текст     = ТекстЗапросаНомерЛиста;
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			НомерЛистаНачало = Выборка.НомерЛиста;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерЛистаНачало;
	
КонецФункции

Функция ПолучитьНомераЛистовЗаВесьПериод(ДатаПоследнегоЛиста, Знач ПараметрыОтчета, Знач СписокПодразделений)
	
	ЗапросЛисты = Новый Запрос;
	ТекстЗапросаЛисты =
	"ВЫБРАТЬ
	|	НомераЛистовКассовойКниги.Период КАК ДатаЛиста,
	|	НомераЛистовКассовойКниги.НомерЛиста КАК НомерЛиста
	|ИЗ
	|	РегистрСведений.НомераЛистовКассовойКниги КАК НомераЛистовКассовойКниги
	|ГДЕ
	|	НомераЛистовКассовойКниги.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НомераЛистовКассовойКниги.Организация = &Организация
	|	И НомераЛистовКассовойКниги.ПодразделениеОрганизации В(&СписокПодразделений)
	|	И НомераЛистовКассовойКниги.ПлатежныйАгент = &ПлатежныйАгент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЛиста";
	
	ЗапросЛисты.УстановитьПараметр("Организация",    ПараметрыОтчета.Организация);
	ЗапросЛисты.УстановитьПараметр("НачалоПериода",  НачалоГода(ПараметрыОтчета.НачалоПериода));
	ЗапросЛисты.УстановитьПараметр("КонецПериода",   КонецГода(ПараметрыОтчета.КонецПериода));
	ЗапросЛисты.УстановитьПараметр("ПлатежныйАгент", ПараметрыОтчета.ПлатежныйАгент);
	Если СписокПодразделений <> Неопределено Тогда
		ЗапросЛисты.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
	Иначе
		ТекстЗапросаЛисты = СтрЗаменить(ТекстЗапросаЛисты,
			"И НомераЛистовКассовойКниги.ПодразделениеОрганизации В(&СписокПодразделений)", "");
	КонецЕсли;
	
	ЗапросЛисты.Текст     = ТекстЗапросаЛисты;
	РезультатЗапросаЛисты = ЗапросЛисты.Выполнить();
	
	СоответствиеЛистыПред = Новый Соответствие;
	ВыборкаЛисты = РезультатЗапросаЛисты.Выбрать();
	Пока ВыборкаЛисты.Следующий() Цикл
		СоответствиеЛистыПред.Вставить(ВыборкаЛисты.ДатаЛиста, ВыборкаЛисты.НомерЛиста);
		ДатаПоследнегоЛиста = ВыборкаЛисты.ДатаЛиста;
	КонецЦикла;
	
	Возврат СоответствиеЛистыПред;
	
КонецФункции

Процедура ЗаписатьНомерЛиста(НаборЗаписей)
	
	Попытка
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		НаборЗаписей.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись'"),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.НомераЛистовКассовойКниги,,
			ОписаниеОшибки());
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ЛистНумеруетсяПервыйРаз(ДатаЛиста, СоответствиеЛистыПред)
	
	// Если среди ранее пронумерованных листов не было ни одного, 
	// чья дата >= дате текущего листа, то считаем, что это новый лист
	// за новую дату, и он нумеруется первый раз.
	
	Результат = Истина;
	
	Для каждого КлючИЗначение Из СоответствиеЛистыПред Цикл
		Если КлючИЗначение.Ключ >= ДатаЛиста Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли