
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
// Процедура установки видимости элементов формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Запись   = Форма.Запись;
	
	// Видимость организации и настроек р/с только тогда,
	// когда здание на обслуживании организации.
	Элементы.Организация.Видимость = Запись.НаходитсяНаОбслуживании;
	
	// Видимость настроек р/с капитального ремонта.
	ВидимостьСчетаКапитальногоРемонта = Ложь;
	
	Если Не Запись.Организация.Пустая() Тогда
		
		СтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Запись.Организация, Истина);
		Если СтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
			ВидимостьСчетаКапитальногоРемонта = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СпособФормированияФондаКапитальногоРемонта.Видимость       = ВидимостьСчетаКапитальногоРемонта;
	Элементы.ГруппаРасчетногоСчетаКапитальногоРемонта.Видимость         = ВидимостьСчетаКапитальногоРемонта;
	Элементы.ГруппаРешениеОСпособеФормированияФондаКапРемонта.Видимость = ВидимостьСчетаКапитальногоРемонта;
	
	Элементы.ГруппаДокументыСобранияСобственников.Видимость = 
		Запись.Основание = ПредопределенноеЗначение("Перечисление.УПЖКХ_ОснованияРешенийОСпособеФормированияФондаКапитальногоРемонта.РешениеОбщегоСобранияСобственников");
	Элементы.ДатаОткрытияСчетаКапРемонта.Видимость = НЕ Запись.РасчетныйСчетУслугКапитальногоРемонта.Пустая();
	
КонецПроцедуры // УправлениеФормой()

&НаСервере
// Процедура устанавливает значение в поле "ДатаОткрытияСчетаКапРемонта" из реквизита банковского счета.
Процедура УстановитьДатуОткрытияСчетаКапРемонта()
	Если НЕ Запись.РасчетныйСчетУслугКапитальногоРемонта.Пустая() Тогда
		ДатаОткрытияСчетаКапРемонта = Запись.РасчетныйСчетУслугКапитальногоРемонта.ДатаОткрытия;
	Иначе
		ДатаОткрытияСчетаКапРемонта = Дата("00010101");
	КонецЕсли;
КонецПроцедуры // УстановитьДатуОткрытияСчетаКапРемонта()

&НаСервере
// Процедура записывает расчетный счет кап.ремонта в режиме обмена, чтобы не выполнять никаких проверок.
// Цель записи расчетного счета - записать дату открытия из формы записи данного регистра сведений.
Процедура ЗаписатьРасчетныйСчетКапРемонта()
	
	РасчетныйСчетКапРемонтаОбъект = Запись.РасчетныйСчетУслугКапитальногоРемонта.ПолучитьОбъект();
	РасчетныйСчетКапРемонтаОбъект.ДатаОткрытия = ДатаОткрытияСчетаКапРемонта;
	РасчетныйСчетКапРемонтаОбъект.ОбменДанными.Загрузка = Истина;
	РасчетныйСчетКапРемонтаОбъект.Записать();
	
КонецПроцедуры // ЗаписатьРасчетныйСчетКапРемонта()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьДатуОткрытияСчетаКапРемонта();
	УправлениеФормой(ЭтаФорма);
	
	мВладелецСчетаУслугКапитальногоРемонта = Запись.РасчетныйСчетУслугКапитальногоРемонта.Владелец;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Проверка заполнения реквизитов.
	Если Запись.НаходитсяНаОбслуживании И Запись.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указана обслуживающая организация!", , "Организация", "Запись", Отказ);
	КонецЕсли;
	
	Если НЕ Запись.РасчетныйСчетУслугКапитальногоРемонта.Пустая() И НЕ ДатаОткрытияСчетаКапРемонта = Дата("00010101") Тогда
		ЗаписатьРасчетныйСчетКапРемонта();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" флага "НаходитсяНаОбслуживании".
//
Процедура НаходитсяНаОбслуживанииПриИзменении(Элемент)
	
	// Очищаем настройки обсуживающей организации, если здание не обслуживается.
	Если Не Запись.НаходитсяНаОбслуживании Тогда
		Если Не Запись.Организация.Пустая() Тогда
			Запись.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "РасчетныйСчетУслугКапитальногоРемонта".
//
Процедура РасчетныйСчетУслугКапитальногоРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(мВладелецСчетаУслугКапитальногоРемонта) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(Тип("СправочникСсылка.Организации"), "Справочник ""Организации""");
		СписокТипов.Добавить(Тип("СправочникСсылка.Контрагенты"), "Справочник ""Контрагенты""");
		
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОбработатьВыборТипаВладельцаСчета", ЭтаФорма), СписокТипов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик выбора типа владельца счета из списка типов владельцев.
//
Процедура ОбработатьВыборТипаВладельцаСчета(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		Если Результат.Значение = Тип("СправочникСсылка.Организации") Тогда
			ОткрытьФорму("Справочник.Организации.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ОбработкаВыбораВладельцаСчета", ЭтаФорма));
		ИначеЕсли Результат.Значение = Тип("СправочникСсылка.Контрагенты") Тогда
			ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ОбработкаВыбораВладельцаСчета", ЭтаФорма));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик выбора владельца счета кап.ремонта.
//
Процедура ОбработкаВыбораВладельцаСчета(Результат, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		мВладелецСчетаУслугКапитальногоРемонта = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "РасчетныйСчетУслугКапитальногоРемонта".
//
Процедура РасчетныйСчетУслугКапитальногоРемонтаОчистка(Элемент, СтандартнаяОбработка)
	
	мВладелецСчетаУслугКапитальногоРемонта = Неопределено;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РасчетныйСчетУслугКапитальногоРемонта".
Процедура РасчетныйСчетУслугКапитальногоРемонтаПриИзменении(Элемент)
	
	УстановитьДатуОткрытияСчетаКапРемонта();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // РасчетныйСчетУслугКапитальногоРемонтаПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Основание".
// 
Процедура ОснованиеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ОснованиеПриИзменении()

#КонецОбласти
