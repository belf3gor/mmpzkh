
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНасервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Период", ОтборПериод);
	
	Если ОтборПериод = Дата(1,1,1) Тогда
		ОтборПериод = НачалоМесяца(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	КонецЕсли;
	
	ОтборПериодФлаг = Истина;
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Период", ОтборПериод, ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "ОтборПериод", "ПериодСтрокой");
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

//////////////////////////
// РАБОТА С ПЕРИОДОМ

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "ОтборПериод", "ПериодСтрокой");
	ОтборПериодФлаг = Истина;
	ОтборПериодФлагПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "ОтборПериод", "ПериодСтрокой", Направление);
	ОтборПериодФлаг = Истина;
	ОтборПериодФлагПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОповещениеЗавершенияВыбораПериода = Новый ОписаниеОповещения("ОповещениеЗавершенияВыбораПериода", ЭтотОбъект); 
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "ОтборПериод", "ПериодСтрокой",Ложь, ОповещениеЗавершенияВыбораПериода);
	
КонецПроцедуры

&НаКлиенте
// Обработчик оповещения "ОповещениеЗавершенияВыбораПериода".
//
Процедура ОповещениеЗавершенияВыбораПериода(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеВыбрано Тогда
		
		ОтборПериодФлаг = Истина;
		ОтборПериодФлагПриИзменении(Неопределено);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обрабочик события "ПриИзменении" реквизита "ОтборПериодФлаг".
//
Процедура ОтборПериодФлагПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Период", ОтборПериод, ВидСравненияКомпоновкиДанных.Равно,,ОтборПериодФлаг,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "ВыбратьИЗакрыть".
//
Процедура ВыбратьИЗакрыть(Команда)
	
	Если ПодобранныеПД.Количество() = 0 Тогда
		
		ТекстВопроса = "Не выбрано ни одного платежного документа. Продолжить?";
		ОповещениеОтвет = Новый ОписаниеОповещения("ОбработатьОтветПользователяВопросОЗакрытии", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		СохранитьИЗакрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "ВыбратьИЗакрыть".
//
Процедура ОбработатьОтветПользователяВопросОЗакрытии(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьИЗакрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СохранитьИЗакрыть".
//
Процедура СохранитьИЗакрыть()
	
	АдресВХранилище = ПоместитьТаблицуПДВХранилище();
	Оповестить("ДобавлениеПДДляОтзыва", АдресВХранилище);
	ЭтотОбъект.Закрыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПеренестиВыделенные".
//
Процедура ПеренестиВыделенные(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиВыделенныеНаСервере();
	
КонецПроцедуры

&НаСервере
// Процедура переносит выделенные ПД в таблицу для выбора.
//
Процедура ПеренестиВыделенныеНаСервере()
	
	ЕстьПеренесенные = Ложь;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		
		Результат = ДобавитьПлатежныйДокументНаСервере(ВыделеннаяСтрока);
		
		Если Результат И НЕ ЕстьПеренесенные Тогда
			ЕстьПеренесенные = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьПеренесенные Тогда
		ОбновитьОтборВСписке();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПеренестиВсе".
//
Процедура ПеренестиВсе(Команда)
	
	ПеренестиВсеНаСервере();
	
КонецПроцедуры

&НаСервере
// Процедура переносит все ПД в таблицу для выбора.
//
Процедура ПеренестиВсеНаСервере()
	
	Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультата = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ТаблицаРезультата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПеренесенные = Ложь;
	
	Для Каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
		
		СтруктураЗаписи = Новый Структура("Период, ЛицевойСчет, ТипКвитанции", СтрокаТаблицы.Период, СтрокаТаблицы.ЛицевойСчет, СтрокаТаблицы.ТипКвитанции);
		КлючЗаписи = РегистрыСведений.УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.СоздатьКлючЗаписи(СтруктураЗаписи);
		
		Результат = ДобавитьПлатежныйДокументНаСервере(КлючЗаписи);
		
		Если Результат И НЕ ЕстьПеренесенные Тогда
			ЕстьПеренесенные = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьПеренесенные Тогда
		ОбновитьОтборВСписке();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОтменитьВыделенные".
//
Процедура ОтменитьВыделенные(Команда)
	
	Если ПодобранныеПД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПодобранныеПД.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивВыделенныхСтрокПодобранныхПД = Новый Массив;
	
	Для Каждого ЭлементМассива Из Элементы.ПодобранныеПД.ВыделенныеСтроки Цикл
		МассивВыделенныхСтрокПодобранныхПД.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрокПодобранныхПД Цикл
		
		СтрокаТаблицы = ПодобранныеПД.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ПодобранныеПД.Удалить(СтрокаТаблицы);
		
	КонецЦикла;
	
	ОбновитьОтборВСписке();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОтменитьВсе".
//
Процедура ОтменитьВсе(Команда)
	
	Если ПодобранныеПД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодобранныеПД.Очистить();
	
	ОбновитьОтборВСписке();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СПИСОК

#Область Список

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" табличного поля "Список".
//
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломИзменения" табличного поля "Список".
//
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" табличного поля "Список".
//
Процедура СписокПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" табличного поля "Список".
//
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Результат = ДобавитьПлатежныйДокументНаСервере(ВыбраннаяСтрока);
	
	Если Результат Тогда
		ОбновитьОтборВСписке();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ПОДОБРАННЫЕПД

#Область ПодобранныеПД

&НаКлиенте
// Обработчик события "ПослеУдаления" табличного поля "ПодобранныеПД".
//
Процедура ПодобранныеПДПослеУдаления(Элемент)
	ОбновитьОтборВСписке();
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор"  табличного поля "ПодобранныеПД".
//
Процедура ПодобранныеПДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = ПодобранныеПД.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
	ПодобранныеПД.Удалить(СтрокаТаблицы);
		
	ОбновитьОтборВСписке();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
// Процедура обновляет отбор по идентификаторам ПД в динамическом списке "Список".
//
Процедура ОбновитьОтборВСписке()
	
	СписокИдентификаторовПД = Новый СписокЗначений;
	СписокИдентификаторовПД.ТипЗначения = Новый ОписаниеТипов("Строка");
	
	Для Каждого СтрокаТаблицы Из ПодобранныеПД Цикл
		СписокИдентификаторовПД.Добавить(СтрокаТаблицы.ИдентификаторПД);
	КонецЦикла;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ИдентификаторПД", СписокИдентификаторовПД, ВидСравненияКомпоновкиДанных.НеВСписке,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаСервере
// Процедура помещает отобранные ПД во временное хранилище.
//
Функция ПоместитьТаблицуПДВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(ПодобранныеПД.Выгрузить(), Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьТаблицуПДВХранилище()

&НаСервере
// Процедура помещает ПД в таблицу отобранных.
//
Функция ДобавитьПлатежныйДокументНаСервере(КлючЗаписи)
	
	МенеджерЗаписи = РегистрыСведений.УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
	МенеджерЗаписи.Прочитать();
	
	ТекПД = МенеджерЗаписи.ИдентификаторПД;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторПД", ТекПД);
	
	НайденныеСтроки = ПодобранныеПД.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Документ " + Формат(МенеджерЗаписи.Период, "ДФ=MM.yyyy") 
		                                                      + "; " + Строка(МенеджерЗаписи.ЛицевойСчет) 
															  + "; № " + МенеджерЗаписи.НомерПД 
															  + "; идентификатор: " 
															  + МенеджерЗаписи.ИдентификаторПД + "; " 
															  + Строка(МенеджерЗаписи.ТипКвитанции) 
															  + " пропущен, т.к уже есть документ с таким идентификатором");
		Возврат Ложь;
	КонецЕсли;
	
	НоваяСтрока = ПодобранныеПД.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, МенеджерЗаписи);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


