#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Функция КлючАналитикиВыпускаПродукции() Экспорт 
	
	// Соответствует фактическому ключу регистра РасчетСебестоимостиПродукции
	
	Возврат "СчетВыпуска, Подразделение, НоменклатурнаяГруппа, Продукция";
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти
		
#Область ОбработчикиОбновления
	
Процедура ЗаполнитьДаннымиПрежнегоРегистра(Параметры) Экспорт
	
	// Переносим записи из прежнего регистра в новый порциями.
	// Все записи по каждому отдельному документу (регистратору) нужно переносить одновременно.
	// Поэтому используем такой прием:
	// - выбираем все записи последнего по времени регистратора (определяем по ПериодРасчета в записях)
	// - считаем количество записей по этому регистратору
	// - контролируем, чтобы общее количество обрабатываемых записей соответствовало условному размеру порции (1000):
	//	 если этот рамер достигнут и есть еще необработанные регистраторы, то обработчик будет запущен еще раз
	// - непосредственно сам перенос записей выполняется по каждому регистратору отдельно
	// 
	// В итоге фактический размер порции может превышать 1000 записей.
	// НАПРИМЕР: в 1000 наиболее "свежих" записей попала только одна из 20 записей документа А (она оказалась 1000-й по порядку).
	// В итоге в данном примере в порции будет обработано 1019 записей (в т.ч. все записи документа А).
	
	// На первой итерации обработчика считаем общее количество регистраторов - это количество объектов к обработке
	Если НЕ ЗначениеЗаполнено(Параметры.ПрогрессВыполнения.ВсегоОбъектов) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УдалитьРасчетСебестоимостиПродукции.Регистратор), 0) КАК КоличествоРегистраторов
		|ИЗ
		|	РегистрСведений.УдалитьРасчетСебестоимостиПродукции КАК УдалитьРасчетСебестоимостиПродукции";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КоличествоРегистраторов;
		
		Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
	 		Параметры.ОбработкаЗавершена = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;	
	                                                                    
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СчетаЗапасов", УчетЗатрат.ПредопределенныеСчетаЗапасов());
	
	// Создаем СчетаЗапасов - понадобится при обходе регистраторов
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.НомерСтроки КАК НомерСубконтоНоменклатура
	|ПОМЕСТИТЬ СчетаЗапасов
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|	И Хозрасчетный.Количественный
	|	И Хозрасчетный.Суммовой
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаЗапасов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";

	Запрос.Выполнить();
	
	ОстатокПорции = 1000; 
	КоличествоОбрабатываемыхЗаписей = 0;
	КоличествоОшибок = 0;
	
	Пока ОстатокПорции > 0 Цикл  // может быть прерван и раньше
		
		// Выбираем наиболее "свежий" (по периоду записей) документ (регистратор).
		// Отбираем только те типы регистраторов, чьи записи могут быть перенесены в новый регистр.
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УдалитьРасчетСебестоимостиПродукции.Регистратор КАК Регистратор,
		|	УдалитьРасчетСебестоимостиПродукции.ПериодРасчета КАК ПериодРасчета,
		|	УдалитьРасчетСебестоимостиПродукции.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.УдалитьРасчетСебестоимостиПродукции КАК УдалитьРасчетСебестоимостиПродукции
		|ГДЕ
		|	УдалитьРасчетСебестоимостиПродукции.Регистратор ССЫЛКА Документ.РегламентнаяОперация
		|	ИЛИ УдалитьРасчетСебестоимостиПродукции.Регистратор ССЫЛКА Документ.ОперацияБух
		|
		|УПОРЯДОЧИТЬ ПО
		|	УдалитьРасчетСебестоимостиПродукции.ПериодРасчета УБЫВ,
		|	УдалитьРасчетСебестоимостиПродукции.Регистратор УБЫВ";
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			// Нет больше записей для переноса
			Параметры.ОбработкаЗавершена = Истина;
			Возврат;					
		КонецЕсли; 
		
		ВыборкаРегистратор = Результат.Выбрать();
		ВыборкаРегистратор.Следующий();
		
		Регистратор = ВыборкаРегистратор.Регистратор;
		
		НачатьТранзакцию();
		
		Попытка
			
			// Блокируем записи нового регистра по организации за период расчета.
			// Так как в течение месяца должен быть только 1 расчет себестоимости, то блокируем записи за весь за месяц.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетСебестоимостиПродукции");
			
			ДиапазонПериод = Новый Диапазон(НачалоМесяца(ВыборкаРегистратор.ПериодРасчета), КонецМесяца(ВыборкаРегистратор.ПериодРасчета));
			ЭлементБлокировки.УстановитьЗначение("ПериодРасчета", ДиапазонПериод);
			ЭлементБлокировки.УстановитьЗначение("Организация", ВыборкаРегистратор.Организация);
			
			Блокировка.Заблокировать();		
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			// Выбираем данные о записях регистратора в прежнем регистре.
			// Таблица ВТ_ПрежнийРегистр понадобится ниже - в ней только те записи, которые нужно перенести в новый регистр.
			// Также отдельным запросом считаем общее количество записей в прежнем регистре - для контроля порции обрабатываемых данных. 
			Запрос.Текст =
			"ВЫБРАТЬ
			|	УдалитьРасчетСебестоимостиПродукции.Регистратор КАК Регистратор,
			|	УдалитьРасчетСебестоимостиПродукции.ПериодРасчета КАК ПериодРасчета,
			|	УдалитьРасчетСебестоимостиПродукции.Организация КАК Организация,
			|	УдалитьРасчетСебестоимостиПродукции.СчетУчета КАК СчетУчета,
			|	УдалитьРасчетСебестоимостиПродукции.Подразделение КАК Подразделение,
			|	УдалитьРасчетСебестоимостиПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	УдалитьРасчетСебестоимостиПродукции.Продукция КАК Продукция,
			|	УдалитьРасчетСебестоимостиПродукции.ВидОперации КАК ВидОперации,
			|	УдалитьРасчетСебестоимостиПродукции.Сумма КАК Сумма,
			|	УдалитьРасчетСебестоимостиПродукции.СуммаНУ КАК СуммаНУ,
			|	УдалитьРасчетСебестоимостиПродукции.СуммаПР КАК СуммаПР,
			|	УдалитьРасчетСебестоимостиПродукции.СуммаВР КАК СуммаВР,
			|	УдалитьРасчетСебестоимостиПродукции.СуммаПлан КАК СуммаПлан
			|ПОМЕСТИТЬ ВТ_ПрежнийРегистр
			|ИЗ
			|	РегистрСведений.УдалитьРасчетСебестоимостиПродукции КАК УдалитьРасчетСебестоимостиПродукции
			|ГДЕ
			|	УдалитьРасчетСебестоимостиПродукции.Регистратор = &Регистратор
			|	И УдалитьРасчетСебестоимостиПродукции.Активность
			|	И УдалитьРасчетСебестоимостиПродукции.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасчетаСебестоимости.РасходыНаПроизводствоПродукцииИУслуг)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Организация,
			|	СчетУчета,
			|	Подразделение,
			|	НоменклатурнаяГруппа,
			|	Продукция
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(УдалитьРасчетСебестоимостиПродукции.Регистратор) КАК Регистратор,
			|	МАКСИМУМ(УдалитьРасчетСебестоимостиПродукции.ПериодРасчета) КАК ПериодРасчета,
			|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК КоличествоЗаписей
			|ИЗ
			|	РегистрСведений.УдалитьРасчетСебестоимостиПродукции КАК УдалитьРасчетСебестоимостиПродукции
			|ГДЕ
			|	УдалитьРасчетСебестоимостиПродукции.Регистратор = &Регистратор";
			
			ИтогиПоРегистратору = Запрос.Выполнить().Выбрать();
			ИтогиПоРегистратору.Следующий();
			
			// Даже если ниже при записи наборов возникнет ошибка, все равно учитываем записи регистратора в общем размере порции.
			КоличествоОбрабатываемыхЗаписей = ИтогиПоРегистратору.КоличествоЗаписей;
			ОстатокПорции = ОстатокПорции - КоличествоОбрабатываемыхЗаписей;
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			
			Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ИтогиПоРегистратору.ПериодРасчета));
			Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ИтогиПоРегистратору.ПериодРасчета));
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВыпускПродукцииУслугОбороты.Организация КАК Организация,
			|	ВыпускПродукцииУслугОбороты.СчетЗатрат КАК СчетЗатрат,
			|	ВыпускПродукцииУслугОбороты.Подразделение КАК Подразделение,
			|	ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	ВЫБОР
			|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
			|			ТОГДА ВЫРАЗИТЬ(ВыпускПродукцииУслугОбороты.СубконтоСписания1 КАК Справочник.Номенклатура)
			|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
			|			ТОГДА ВЫРАЗИТЬ(ВыпускПродукцииУслугОбороты.СубконтоСписания2 КАК Справочник.Номенклатура)
			|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
			|			ТОГДА ВЫРАЗИТЬ(ВыпускПродукцииУслугОбороты.СубконтоСписания3 КАК Справочник.Номенклатура)
			|		ИНАЧЕ ВыпускПродукцииУслугОбороты.Продукция
			|	КОНЕЦ КАК Продукция,
			|	СУММА(ВыпускПродукцииУслугОбороты.КоличествоОборот) КАК Количество
			|ПОМЕСТИТЬ ВТ_ОбъемВыпуска
			|ИЗ
			|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			,
			|			(Организация, СчетЗатрат, Подразделение, НоменклатурнаяГруппа, ПрямыеРасходыРаспределятьПоКоличеству) В
			|				(ВЫБРАТЬ
			|					ВТ_ПрежнийРегистр.Организация,
			|					ВТ_ПрежнийРегистр.СчетУчета,
			|					ВТ_ПрежнийРегистр.Подразделение,
			|					ВТ_ПрежнийРегистр.НоменклатурнаяГруппа,
			|					ИСТИНА
			|				ИЗ
			|					ВТ_ПрежнийРегистр)) КАК ВыпускПродукцииУслугОбороты
			|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
			|		ПО ВыпускПродукцииУслугОбороты.СчетСписания = СчетаЗапасов.Счет
			|
			|СГРУППИРОВАТЬ ПО
			|	ВыпускПродукцииУслугОбороты.Организация,
			|	ВыпускПродукцииУслугОбороты.СчетЗатрат,
			|	ВыпускПродукцииУслугОбороты.Подразделение,
			|	ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа,
			|	ВЫБОР
			|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
			|			ТОГДА ВЫРАЗИТЬ(ВыпускПродукцииУслугОбороты.СубконтоСписания1 КАК Справочник.Номенклатура)
			|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
			|			ТОГДА ВЫРАЗИТЬ(ВыпускПродукцииУслугОбороты.СубконтоСписания2 КАК Справочник.Номенклатура)
			|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
			|			ТОГДА ВЫРАЗИТЬ(ВыпускПродукцииУслугОбороты.СубконтоСписания3 КАК Справочник.Номенклатура)
			|		ИНАЧЕ ВыпускПродукцииУслугОбороты.Продукция
			|	КОНЕЦ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Организация,
			|	СчетЗатрат,
			|	Подразделение,
			|	НоменклатурнаяГруппа,
			|	Продукция
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПрежнийРегистр.ПериодРасчета КАК ПериодРасчета,
			|	ПрежнийРегистр.Организация КАК Организация,
			|	ПрежнийРегистр.СчетУчета КАК СчетВыпуска,
			|	ПрежнийРегистр.Подразделение КАК Подразделение,
			|	ПрежнийРегистр.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	ПрежнийРегистр.Продукция КАК Продукция,
			|	СУММА(ПрежнийРегистр.Сумма) КАК Сумма,
			|	СУММА(ПрежнийРегистр.СуммаНУ) КАК СуммаНУ,
			|	СУММА(ПрежнийРегистр.СуммаПР) КАК СуммаПР,
			|	СУММА(ПрежнийРегистр.СуммаВР) КАК СуммаВР,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ПрежнийРегистр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасчетаСебестоимости.УслугиБезИспользованияПлановыхЦен)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ПустаяСсылка)
			|			КОГДА ЕСТЬNULL(ОбъемВыпуска.Количество, 0) <> 0
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска)
			|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость)
			|		КОНЕЦ) КАК ВидБазыРаспределения,
			|	СУММА(ВЫБОР
			|			КОГДА ПрежнийРегистр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасчетаСебестоимости.УслугиБезИспользованияПлановыхЦен)
			|				ТОГДА 0
			|			КОГДА ЕСТЬNULL(ОбъемВыпуска.Количество, 0) <> 0
			|				ТОГДА ОбъемВыпуска.Количество
			|			ИНАЧЕ ПрежнийРегистр.СуммаПлан
			|		КОНЕЦ) КАК БазаРаспределения,
			|	СУММА(ВЫБОР
			|			КОГДА ПрежнийРегистр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасчетаСебестоимости.УслугиБезИспользованияПлановыхЦен)
			|				ТОГДА 0
			|			ИНАЧЕ ПрежнийРегистр.Сумма
			|		КОНЕЦ) КАК КосвенныеРасходы,
			|	СУММА(ВЫБОР
			|			КОГДА ПрежнийРегистр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасчетаСебестоимости.УслугиБезИспользованияПлановыхЦен)
			|				ТОГДА 0
			|			ИНАЧЕ ПрежнийРегистр.СуммаНУ
			|		КОНЕЦ) КАК КосвенныеРасходыНУ,
			|	СУММА(ВЫБОР
			|			КОГДА ПрежнийРегистр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасчетаСебестоимости.УслугиБезИспользованияПлановыхЦен)
			|				ТОГДА 0
			|			ИНАЧЕ ПрежнийРегистр.СуммаПР
			|		КОНЕЦ) КАК КосвенныеРасходыПР,
			|	СУММА(ВЫБОР
			|			КОГДА ПрежнийРегистр.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасчетаСебестоимости.УслугиБезИспользованияПлановыхЦен)
			|				ТОГДА 0
			|			ИНАЧЕ ПрежнийРегистр.СуммаВР
			|		КОНЕЦ) КАК КосвенныеРасходыВР
			|ИЗ
			|	ВТ_ПрежнийРегистр КАК ПрежнийРегистр
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбъемВыпуска КАК ОбъемВыпуска
			|		ПО ПрежнийРегистр.Организация = ОбъемВыпуска.Организация
			|			И ПрежнийРегистр.СчетУчета = ОбъемВыпуска.СчетЗатрат
			|			И ПрежнийРегистр.Подразделение = ОбъемВыпуска.Подразделение
			|			И ПрежнийРегистр.НоменклатурнаяГруппа = ОбъемВыпуска.НоменклатурнаяГруппа
			|			И ПрежнийРегистр.Продукция = ОбъемВыпуска.Продукция
			|
			|СГРУППИРОВАТЬ ПО
			|	ПрежнийРегистр.ПериодРасчета,
			|	ПрежнийРегистр.Организация,
			|	ПрежнийРегистр.СчетУчета,
			|	ПрежнийРегистр.Подразделение,
			|	ПрежнийРегистр.НоменклатурнаяГруппа,
			|	ПрежнийРегистр.Продукция
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПрежнийРегистр.СчетУчета,
			|	Подразделение,
			|	НоменклатурнаяГруппа,
			|	Продукция
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_ПрежнийРегистр
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_ОбъемВыпуска";
			
			ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
			
			ПрежнийРегистр = РегистрыСведений.УдалитьРасчетСебестоимостиПродукции.СоздатьНаборЗаписей();
			НовыйРегистр   = РегистрыСведений.РасчетСебестоимостиПродукции.СоздатьНаборЗаписей();
			
			ПрежнийРегистр.Отбор.Регистратор.Установить(Регистратор);
			НовыйРегистр.Отбор.Регистратор.Установить(Регистратор);
			
			Пока ВыборкаЗаписей.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НовыйРегистр.Добавить(), ВыборкаЗаписей);
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ПрежнийРегистр, Истина);// Будет очищен.
			
			Если НовыйРегистр.Количество() > 0 Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НовыйРегистр, Истина);
			КонецЕсли;	
			
			ЗафиксироватьТранзакцию();
			
			Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + 1;
			КоличествоОбрабатываемыхЗаписей = 0;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			// Если не удалось перенести записи в новый регистр, повторим попытку снова (позже).
			КоличествоОшибок = КоличествоОшибок + 1;
			
			// Учтем необработанные записи в общем размере порции.
			
			// Возможно, ошибка возникла уже после того, как было рассчитано количество записей регистратора.
			// В этом случае КоличествоОбрабатываемыхЗаписей не равно 0. В ином случае рассчитаем количество записей здесь. 
			Если КоличествоОбрабатываемыхЗаписей = 0 Тогда
							
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Регистратор", Регистратор);
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК КоличествоЗаписей
				|ИЗ
				|	РегистрСведений.УдалитьРасчетСебестоимостиПродукции КАК УдалитьРасчетСебестоимостиПродукции
				|ГДЕ
				|	УдалитьРасчетСебестоимостиПродукции.Регистратор = &Регистратор";
				
				ИтогиПоРегистратору = Запрос.Выполнить().Выбрать();
				ИтогиПоРегистратору.Следующий();
				
				ОстатокПорции = ОстатокПорции - ИтогиПоРегистратору.КоличествоЗаписей;
				
			КонецЕсли;	
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось перенести данные в регистр ""Расчет себестоимости продукции"" по документу: %1 по причине:
			|%2'"), 
			Строка(Регистратор),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Регистратор.Метаданные(),
			Регистратор,
			ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла; 
	
	Параметры.ОбработкаЗавершена = (Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ВсегоОбъектов);
	
	Если КоличествоОшибок > 0 Тогда
				
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""РегистрСведений.РасчетСебестоимостиПродукции.ЗаполнитьДаннымиПрежнегоРегистра""
			|не удалось перенести данные из прежнего регистра. Количество ошибок: %1'"), 
			КоличествоОшибок);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли	