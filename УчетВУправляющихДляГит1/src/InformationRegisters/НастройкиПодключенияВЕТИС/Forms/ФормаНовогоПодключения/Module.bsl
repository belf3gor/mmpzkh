&НаКлиенте
Перем ИндексПредприятия;

&НаКлиенте
Перем ПараметрыОжиданияФоновогоЗадания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИменаСтраниц();
	
	ИнициализироватьРеквизиты();
	
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
	СтраницыФормы = Элементы.ГруппаСтраницы;
	СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[0]];
	Элементы.Идентификатор.ОтметкаНезаполненного = Истина;
	
	УстановитьТекущуюСтраницуНавигации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОткрытьХозяйствующийСубъектПослеЗакрытияПомощника Тогда
		СтраницыФормы = Элементы.ГруппаСтраницы;
		Если СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаРезультат Тогда
			ПоказатьЗначение(, ХозяйствующийСубъект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если НЕ ПроверитьЗаполнениеТекущейСтраницы() Тогда
		Возврат;
	КонецЕсли;
	
	СтраницыФормы  = Элементы.ГруппаСтраницы;
	ИндексСтраницы = ИменаСтраниц.Найти(СтраницыФормы.ТекущаяСтраница.Имя);
	
	Если ИменаСтраниц[ИндексСтраницы + 1] = "СтраницаОшибкаПолучения" И ПустаяСтрока(ТекстОшибки) Тогда
		СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[ИндексСтраницы + 2]];
	Иначе
		СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[ИндексСтраницы + 1]];
	КонецЕсли;
	
	ГруппаСтраницыПриСменеСтраницы(СтраницыФормы, СтраницыФормы.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	СтраницыФормы  = Элементы.ГруппаСтраницы;
	ИндексСтраницы = ИменаСтраниц.Найти(СтраницыФормы.ТекущаяСтраница.Имя);
	
	Если ИменаСтраниц[ИндексСтраницы - 1] = "СтраницаОшибкаПолучения" И ПустаяСтрока(ТекстОшибки) Тогда
		СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[ИндексСтраницы - 2]];
	Иначе
		СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[ИндексСтраницы - 1]];
	КонецЕсли;
	
	ГруппаСтраницыПриСменеСтраницы(СтраницыФормы, СтраницыФормы.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВНачало(Команда)
	
	СтраницыФормы = Элементы.ГруппаСтраницы;
	
	Если ИменаСтраниц[0] = "СтраницаВариантПодключения" Тогда
		СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[1]];
	Иначе
		СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы[ИменаСтраниц[0]];
	КонецЕсли;
	
	ГруппаСтраницыПриСменеСтраницы(СтраницыФормы, СтраницыФормы.ТекущаяСтраница);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементоФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьТекущуюСтраницуНавигации(ЭтотОбъект);
	
	Если ТекущаяСтраница = Элемент.ПодчиненныеЭлементы.СтраницаПолучениеДанных Тогда
		ПроверитьНеобходимостьПолученияСведений();
	ИначеЕсли ТекущаяСтраница = Элемент.ПодчиненныеЭлементы.СтраницаРезультат Тогда
		СформироватьОтчетНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеСобственнойОрганизацииПриИзменении(Элемент)
	
	ПодключениеСобственнойОрганизацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодключениеСобственнойОрганизацииПриИзмененииНаСервере()
	
	ОчиститьРеквизитыПодключения();
	
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛогинПриИзменении(Элемент)
	
	Логин = ИнтеграцияИСКлиентСервер.ЗаменитьНечитаемыеСимволы(Логин);
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ПарольПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПарольПриИзмененииНаСервере()
	
	БезопасноеХранилище.Пароль = ИнтеграцияИСКлиентСервер.ЗаменитьНечитаемыеСимволы(Пароль);
	Пароль = ?(ЗначениеЗаполнено(Пароль), ЭтотОбъект.УникальныйИдентификатор, "");
	
КонецПроцедуры

&НаКлиенте
Процедура КлючAPIПриИзменении(Элемент)
	
	КлючAPIПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КлючAPIПриИзмененииНаСервере()
	
	БезопасноеХранилище.КлючAPI = ИнтеграцияИСКлиентСервер.ЗаменитьНечитаемыеСимволы(КлючAPI);
	КлючAPI = ?(ЗначениеЗаполнено(КлючAPI), ЭтотОбъект.УникальныйИдентификатор, "");
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПриИзменении(Элемент)
	
	Идентификатор = ИнтеграцияИСКлиентСервер.ЗаменитьНечитаемыеСимволы(Идентификатор);
	Элементы.Идентификатор.ОтметкаНезаполненного = НЕ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Идентификатор);
	ОчиститьСведенияХозяйствующегоСубъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛогинАдминистратораПриИзменении(Элемент)
	
	ЛогинАдминистратора = ИнтеграцияИСКлиентСервер.ЗаменитьНечитаемыеСимволы(ЛогинАдминистратора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛогинПользователяПриИзменении(Элемент)
	
	ЛогинАдминистратора = ИнтеграцияИСКлиентСервер.ЗаменитьНечитаемыеСимволы(ЛогинАдминистратора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСведенияПредприятийПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИнформацияРеквизитыПодключенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьСправку" Тогда
		ОткрытьСправку("РегистрСведений.НастройкиПодключенияВЕТИС");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЗаявкуВетисAPI" Тогда
		Если ИнтеграцияВЕТИСВызовСервера.РежимРаботыСТестовымКонтуромВЕТИС() Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://t2-aplms.vetrf.ru/pub/");
		Иначе
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://aplms.vetrf.ru/pub/");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеИнтерфейсом

&НаСервере
Процедура ЗаполнитьИменаСтраниц()
	
	СтраницыФормы = Новый Массив();
	
	Если ИнтеграцияВЕТИС.ИспользуетсяКомиссияПриЗакупкахИлиПереработкаДавальческогоСырья() Тогда
		СтраницыФормы.Добавить("СтраницаВариантПодключения");
	КонецЕсли;
	
	СтраницыФормы.Добавить("СтраницаРеквизитыПодключения");
	СтраницыФормы.Добавить("СтраницаПолучениеДанных");
	СтраницыФормы.Добавить("СтраницаОшибкаПолучения");
	СтраницыФормы.Добавить("СтраницаРезультат");
	
	ИменаСтраниц = Новый ФиксированныйМассив(СтраницыФормы);
	
КонецПроцедуры // ЗаполнитьИменаСтраниц()

&НаСервере
Процедура ОчиститьРеквизитыПодключения()
	
	Логин               = "";
	Пароль              = "";
	КлючAPI             = "";
	Идентификатор       = "";
	ЛогинАдминистратора = "";
	
	БезопасноеХранилище.Пароль  = "";
	БезопасноеХранилище.КлючAPI = "";
	
КонецПроцедуры // ОчиститьРеквизитыПодключения()

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиФормы(Форма)
	
	СтрокиИнформация = Новый Массив();
	СтрокиРезультат  = Новый Массив();
	
	Если Форма.ПодключениеСобственнойОрганизации = 1 Тогда
		СтрокиИнформация.Добавить(НСтр("ru = 'Укажите реквизиты, требуемые для подключения к ВетИС.API, перечисленные в ответном письме на'"));
		СтрокиИнформация.Добавить(" ");
		СтрокиИнформация.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'заявку'"),, Форма.ЦветГиперссылки,, "ОткрытьЗаявкуВетисAPI"));
		СтрокиИнформация.Добавить(" ");
		СтрокиИнформация.Добавить(НСтр("ru = 'на предоставление доступа к программному интерфейсу взаимодействия с информационной системой ВетИС.'"));
		СтрокиИнформация.Добавить(" ");
		СтрокиИнформация.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"),, Форма.ЦветГиперссылки,, "ОткрытьСправку"));
		
		СтрокиРезультат.Добавить(НСтр("ru = 'Получены и записаны в систему сведения о хозяйствующем субъекте, его поднадзорных объектах и пользователях.'"));
		СтрокиРезультат.Добавить(" ");
		СтрокиРезультат.Добавить(НСтр("ru='Для продолжения работы необходимо сопоставить пользователей ВетИС с пользователями информационной базы.'"));
		СтрокиРезультат.Добавить(" ");
		СтрокиРезультат.Добавить(НСтр("ru = 'Для этого откройте хозяйствующий субъект и перейдите на закладку ""Пользователи"".'"));
		
		Форма.Элементы.ЛогинАдминистратора.Видимость = Истина;
		Форма.Элементы.ЛогинПользователя.Видимость   = Ложь;
		
		Форма.Элементы.ГруппаПолучениеПользователей.Видимость = Истина;
	Иначе
		СтрокиИнформация.Добавить(НСтр("ru = 'Укажите реквизиты, требуемые для подключения к ВетИС.API, полученные от контрагента - комитента или давальца.'"));
		СтрокиИнформация.Добавить(" ");
		СтрокиИнформация.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'"),, Форма.ЦветГиперссылки,, "ОткрытьСправку"));
		
		СтрокиРезультат.Добавить(НСтр("ru = 'Получены и записаны в систему сведения о хозяйствующем субъекте и его поднадзорных объектах.'"));
		СтрокиРезультат.Добавить(" ");
		СтрокиРезультат.Добавить(НСтр("ru='Для добавления пользователей ВетИС откройте хозяйствующий субъект и перейдите на закладку ""Пользователи"".'"));
		
		Форма.Элементы.ЛогинАдминистратора.Видимость = Ложь;
		Форма.Элементы.ЛогинПользователя.Видимость   = Форма.ПолучитьСведенияПредприятий;
		
		Форма.Элементы.ГруппаПолучениеПользователей.Видимость = Ложь;
	КонецЕсли;
	
	Форма.Элементы.НадписьИнформацияРеквизитыПодключения.Заголовок = Новый ФорматированнаяСтрока(СтрокиИнформация);
	Форма.Элементы.НадписьИнформацияРезультат.Заголовок            = Новый ФорматированнаяСтрока(СтрокиРезультат);
	
	Форма.Элементы.ДатаНачалаЗагрузкиВСД.Видимость = Форма.ПолучитьСведенияПредприятий;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницуНавигации(Форма)
	
	СтраницыФормы     = Форма.Элементы.ГруппаСтраницы;
	СтраницыНавигации = Форма.Элементы.Навигация;
	
	ИндексСтраницы    = Форма.ИменаСтраниц.Найти(СтраницыФормы.ТекущаяСтраница.Имя);
	КоличествоСтраниц = Форма.ИменаСтраниц.Количество();
	
	Если ИндексСтраницы = 0 Тогда
		СтраницыНавигации.ТекущаяСтраница = СтраницыНавигации.ПодчиненныеЭлементы.НавигацияНачало;
		Форма.Элементы.НачалоДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли ИндексСтраницы = (КоличествоСтраниц - 1) Тогда
		СтраницыНавигации.ТекущаяСтраница = СтраницыНавигации.ПодчиненныеЭлементы.НавигацияОкончание;
		Форма.Элементы.ОкончаниеЗакрыть.КнопкаПоУмолчанию = Истина;
	ИначеЕсли СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаОшибкаПолучения Тогда
		СтраницыНавигации.ТекущаяСтраница = СтраницыНавигации.ПодчиненныеЭлементы.НавигацияОшибка;
		Форма.Элементы.ОшибкаНазад.КнопкаПоУмолчанию = Истина;
		Если СведенияСуществуют(Форма.Идентификатор) Тогда
			Форма.Элементы.ОшибкаВНачало.Видимость = Ложь;
			Форма.Элементы.ОшибкаДалее.Видимость   = Истина;
		Иначе
			Форма.Элементы.ОшибкаВНачало.Видимость = Истина;
			Форма.Элементы.ОшибкаДалее.Видимость   = Ложь;
		КонецЕсли;
	Иначе
		СтраницыНавигации.ТекущаяСтраница = СтраницыНавигации.ПодчиненныеЭлементы.НавигацияПродолжение;
		Если НЕ Форма.Элементы.ПродолжениеДалее.КнопкаПоУмолчанию Тогда
			Форма.Элементы.ПродолжениеДалее.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаПолучениеДанных Тогда
		СтраницыНавигации.Доступность = Ложь;
	Иначе
		СтраницыНавигации.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуПолучения()
	
	СтраницыФормы = Элементы.ГруппаСтраницы;
	СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаОшибкаПолучения;
	
	ГруппаСтраницыПриСменеСтраницы(СтраницыФормы, СтраницыФормы.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУспешныйРезультат()
	
	СтраницыФормы = Элементы.ГруппаСтраницы;
	СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаРезультат;
	
	ГруппаСтраницыПриСменеСтраницы(СтраницыФормы, СтраницыФормы.ТекущаяСтраница);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеСведений

&НаКлиенте
Процедура ПроверитьНеобходимостьПолученияСведений()
	
	Если СведенияСуществуют(Идентификатор) Тогда
		
		Если ЗначениеЗаполнено(ХозяйствующийСубъект.Ссылка) Тогда
			Если ПолучитьСведенияПредприятий Тогда
				ПродолжитьПолучениеСведенийПредприятий();
			КонецЕсли;
		ИначеЕсли ПерезаписыватьСуществующиеСведения Тогда
			ТекстВопроса = СтрШаблон(НСтр("ru='Хозяйствующий субъект с идентификатором %1 уже подключен к ВетИС.API.
			               |Выполнить для него повторный запрос сведений из ВетИС и перезапись настроек подключения к ВетИС.API?'"),
			               Идентификатор);
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подключить повторно'"));
			Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
			
			ОповещениеПриОтвете = Новый ОписаниеОповещения("ПерезаписатьСведенияПриОтветеНаВопрос", ЭтотОбъект);
			ПоказатьВопрос(ОповещениеПриОтвете, ТекстВопроса, Кнопки);
		Иначе
			ТекстПредупреждения = СтрШаблон(НСтр("ru='Хозяйствующий субъект с идентификатором %1 уже подключен к ВетИС.API.
			                      |Изменение настроек подключения к ВетИС.API необходимо производить из формы хранилища настроек'"),
			                      Идентификатор);
			ОповещениеПриПредупреждении = Новый ОписаниеОповещения("ПерезаписатьСведенияПриПредупреждении", ЭтотОбъект);
			ПоказатьПредупреждение(ОповещениеПриПредупреждении, ТекстПредупреждения);
		КонецЕсли;
		
	Иначе
		
		НачатьПолучениеСведенийХозяйствующегоСубъекта();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаписатьСведенияПриОтветеНаВопрос(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		НачатьПолучениеСведенийХозяйствующегоСубъекта();
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаписатьСведенияПриПредупреждении(ДополнительныеПараметры) Экспорт
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСведенияХозяйствующегоСубъекта()
	
	КлючиЗначений = "";
	Для Каждого КлючИЗначение Из ХозяйствующийСубъект Цикл
		КлючиЗначений = КлючиЗначений + ?(ПустаяСтрока(КлючиЗначений), "", ",") + КлючИЗначение.Ключ;
	КонецЦикла;
	ХозяйствующийСубъект = Новый Структура(КлючиЗначений);
	
	Предприятия.Очистить();
	
	ТекстОшибки = "";
	
	ИндексПредприятия = 0;
	
	РезультатПолученияПользователей   = Неопределено;
	РезультатЗапросаСкладскихЖурналов = Неопределено;
	РезультатПолученияВСДокументов    = Неопределено;
	
	КартинкаЗаполнениеКлассификаторов  = БиблиотекаКартинок.ОжидаетВыполненияГосИС;
	КартинкаПолучениеХозСубъекта       = БиблиотекаКартинок.ОжидаетВыполненияГосИС;
	КартинкаПолучениеПредприятий       = БиблиотекаКартинок.ОжидаетВыполненияГосИС;
	КартинкаПолучениеПользователей     = БиблиотекаКартинок.ОжидаетВыполненияГосИС;
	КартинкаПолучениеНачальныхОстатков = БиблиотекаКартинок.ОжидаетВыполненияГосИС;
	КартинкаПолучениеВСДокументов      = БиблиотекаКартинок.ОжидаетВыполненияГосИС;
	
КонецПроцедуры

&НаКлиенте
Функция НастройкаПодключения()
	
	НастройкаПодключения = ИнтеграцияВЕТИСКлиентСервер.НоваяНастройкаПодключенияВЕТИС();
	
	ЗаполнитьЗначенияСвойств(НастройкаПодключения, ЭтотОбъект,, "Пароль,КлючAPI");
	ЗаполнитьЗначенияИзБезопасногоХранилища(НастройкаПодключения);
	
	НастройкаПодключения.ЛогинПользователя = ЭтотОбъект.ЛогинАдминистратора;
	НастройкаПодключения.ФорматОбмена      = ПредопределенноеЗначение("Перечисление.ФорматыОбменаВЕТИС.V2_1");
	
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.APIЗапись"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.APIЧтение"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.WebИнтерфейсЗапись"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.WebИнтерфейсЧтение"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.АвторизованныйЗаявительАргус"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.АвторизованныйЗаявительМеркурий"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.АттестованныйСпециалист"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.ГашениеВСД"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.НазначениеУполномоченных"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.ОформлениеВозвратныхВСД"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.ОформлениеВСДНаСыроеМолоко"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.ОформлениеВСДПриказ646"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.ОформлениеПроизводственныхВСД"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.СертификацияУлововВБР"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.УполномоченноеГашениеВСД"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.УполномоченноеОформлениеВозвратныхВСД"));
	НастройкаПодключения.ПраваДоступа.Добавить(ПредопределенноеЗначение("Перечисление.ПраваДоступаВЕТИС.УправлениеЗонамиОтветственности"));
	
	Возврат НастройкаПодключения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияИзБезопасногоХранилища(НастройкаПодключения)
	
	НастройкаПодключения.Пароль  = БезопасноеХранилище.Пароль;
	НастройкаПодключения.КлючAPI = БезопасноеХранилище.КлючAPI;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеСведенийХозяйствующегоСубъекта()
	
	ОчиститьСообщения();
	ОчиститьСведенияХозяйствующегоСубъекта();
	
	КартинкаЗаполнениеКлассификаторов = БиблиотекаКартинок.НезавершившаясяПроверка;
	
	РезультатВыполнения = НачатьПолучениеСведенийНаСервере(НастройкаПодключения());
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьОшибкуПолучения();
	ИначеЕсли РезультатВыполнения.Статус = "Выполнено" Тогда
		ПродолжитьПолучениеСведенийХозяйствующегоСубъекта();
	ИначеЕсли РезультатВыполнения.Статус = "Выполняется" Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОжиданияФоновогоЗадания);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания", ПараметрыОжиданияФоновогоЗадания.ТекущийИнтервал, Истина);
	Иначе
		ЗаголовокОшибки = НСтр("ru='Не удалось получить сведения хозяйствующего субъекта'");
		Если РезультатВыполнения.Статус = "Ошибка" Тогда
			ТекстОшибки = СформироватьТекстОшибки(ЗаголовокОшибки, РезультатВыполнения.КраткоеПредставлениеОшибки);
		Иначе
			ТекстОшибки = СформироватьТекстОшибки(ЗаголовокОшибки, НСтр("ru = 'Процедура получения сведений была отменена'"));
		КонецЕсли;
		ПоказатьОшибкуПолучения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьПолучениеСведенийНаСервере(НастройкаПодключения)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторФоновогоЗадания);
	ИдентификаторФоновогоЗадания = Неопределено;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ЭтоСобственнаяОрганизация", ПодключениеСобственнойОрганизации = 1);
	СтруктураПараметров.Вставить("НастройкаПодключения",      НастройкаПодключения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновая загрузка сведений хозяйствующего субъекта'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне("РегистрыСведений.НастройкиПодключенияВЕТИС.ПолучитьСведенияХозяйствующегоСубъекта",
	                      СтруктураПараметров, ПараметрыВыполнения);
	
	ИдентификаторФоновогоЗадания = РезультатВыполнения.ИдентификаторЗадания;
	АдресРезультатаОбменаВоВременномХранилище = РезультатВыполнения.АдресРезультата;
	
	СообщенияОбОшибках = РезультатВыполнения.Сообщения;
	Если СообщенияОбОшибках.Количество() = 0 Тогда
		СообщенияОбОшибках = ДлительныеОперации.СообщенияПользователю(Ложь, ИдентификаторФоновогоЗадания);
	КонецЕсли;
	
	Для Каждого СообщениеОбОшибке Из СообщенияОбОшибках Цикл
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + СообщениеОбОшибке.Текст;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		Если РезультатВыполнения.Статус = "Выполнено" Тогда
			ОбработатьРезультатВыполненияФоновогоЗадания();
		ИначеЕсли РезультатВыполнения.Статус = "Выполняется" Тогда
			ОбработатьПрогрессВыполненияФоновогоЗадания();
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыполнениеФоновогоЗадания()
	
	ЗаданиеВыполнено = ПроверитьВыполнениеФоновогоЗаданияНаСервере();
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьОшибкуПолучения();
	ИначеЕсли ЗаданиеВыполнено Тогда 
		ПродолжитьПолучениеСведенийХозяйствующегоСубъекта();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОжиданияФоновогоЗадания);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания", ПараметрыОжиданияФоновогоЗадания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВыполнениеФоновогоЗаданияНаСервере()
	
	Попытка
		ЗаданиеВыполнено   = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторФоновогоЗадания);
		СообщенияОбОшибках = ДлительныеОперации.СообщенияПользователю(Ложь, ИдентификаторФоновогоЗадания);
		
		Для Каждого СообщениеОбОшибке Из СообщенияОбОшибках Цикл
			ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + СообщениеОбОшибке.Текст;
		КонецЦикла;
	Исключение
		ЗаголовокОшибки = НСтр("ru='Не удалось получить сведения хозяйствующего субъекта'");
		ТекстОшибки = СформироватьТекстОшибки(ЗаголовокОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаданиеВыполнено = Ложь;
	КонецПопытки;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		Если ЗаданиеВыполнено Тогда
			ОбработатьРезультатВыполненияФоновогоЗадания();
		Иначе
			ОбработатьПрогрессВыполненияФоновогоЗадания();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаСервере
Процедура ОбработатьПрогрессВыполненияФоновогоЗадания()
	
	ПрогрессВыполнения = ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторФоновогоЗадания);
	
	Если ПрогрессВыполнения = Неопределено Тогда
	ИначеЕсли ПрогрессВыполнения.Текст = "ВыполненоЗаполнениеКлассификаторов" Тогда
		КартинкаЗаполнениеКлассификаторов = БиблиотекаКартинок.Успешно;
		КартинкаПолучениеХозСубъекта      = БиблиотекаКартинок.НезавершившаясяПроверка;
	ИначеЕсли ПрогрессВыполнения.Текст = "ПолученХозяйствующийСубъект" Тогда
		КартинкаЗаполнениеКлассификаторов = БиблиотекаКартинок.Успешно;
		КартинкаПолучениеХозСубъекта      = БиблиотекаКартинок.Успешно;
		КартинкаПолучениеПредприятий      = БиблиотекаКартинок.НезавершившаясяПроверка;
	ИначеЕсли ПрогрессВыполнения.Текст = "ПолученыПредприятияХозяйствующегоСубъекта" Тогда
		КартинкаЗаполнениеКлассификаторов = БиблиотекаКартинок.Успешно;
		КартинкаПолучениеХозСубъекта      = БиблиотекаКартинок.Успешно;
		КартинкаПолучениеПредприятий      = БиблиотекаКартинок.Успешно;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВыполненияФоновогоЗадания()
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресРезультатаОбменаВоВременномХранилище);
	
	Если (РезультатВыполнения = Неопределено) ИЛИ НЕ ЗначениеЗаполнено(РезультатВыполнения.ХозяйствующийСубъект.Ссылка) Тогда
		
		ТекстОшибки = НСтр("ru='Не удалось получить сведения хозяйствующего субъекта. Подробности см. в Журнале регистрации.'");
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(ХозяйствующийСубъект, РезультатВыполнения.ХозяйствующийСубъект);
		
		Для Каждого ДанныеПредприятия Из РезультатВыполнения.Предприятия Цикл
			ЗаполнитьЗначенияСвойств(Предприятия.Добавить(), ДанныеПредприятия);
		КонецЦикла;
		
		Если КартинкаЗаполнениеКлассификаторов <> БиблиотекаКартинок.Успешно Тогда
			КартинкаЗаполнениеКлассификаторов = БиблиотекаКартинок.Успешно;
		КонецЕсли;
		
		Если КартинкаПолучениеХозСубъекта <> БиблиотекаКартинок.Успешно Тогда
			КартинкаПолучениеХозСубъекта = БиблиотекаКартинок.Успешно;
		КонецЕсли;
		
		Если КартинкаПолучениеПредприятий <> БиблиотекаКартинок.Успешно Тогда
			КартинкаПолучениеПредприятий = БиблиотекаКартинок.Успешно;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеСведенийХозяйствующегоСубъекта()
	
	Если ПодключениеСобственнойОрганизации = 0 Тогда
		ЗакончитьПолучениеСведенийХозяйствующегоСубъекта();
	ИначеЕсли РезультатПолученияПользователей <> Неопределено
		ИЛИ КартинкаПолучениеПользователей <> БиблиотекаКартинок.Успешно Тогда
		НачатьПолучениеПользователей();
	Иначе
		ЗакончитьПолучениеСведенийХозяйствующегоСубъекта();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПолучениеСведенийХозяйствующегоСубъекта()
	
	Отказ = Ложь;
	
	ЗакончитьПолучениеСведенийХозяйствующегоСубъектаНаСервере(Отказ);
	
	Если Отказ Тогда
		ПоказатьОшибкуПолучения();
	Иначе
		ОповеститьОбИзменениях();
		
		Если ПолучитьСведенияПредприятий Тогда
			ПродолжитьПолучениеСведенийПредприятий();
		Иначе
			ПоказатьУспешныйРезультат();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьПолучениеСведенийХозяйствующегоСубъектаНаСервере(Отказ)
	
	ЗаписатьСинхронизациюКлассификаторов(, Отказ);
	
	Если НЕ Отказ Тогда
		ЗаписатьНастройкиПодключения(Отказ);
	КонецЕсли;
	
	Если НЕ Отказ И ПодключениеСобственнойОрганизации = 1 Тогда
		СопоставитьАдминистратораХозяйствующегоСубъекта();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеСведенийПредприятий()
	
	Если Предприятия.Количество() = 0 Тогда
		ЗакончитьПолучениеСведенийПредприятий();
	ИначеЕсли РезультатЗапросаСкладскихЖурналов <> Неопределено
		ИЛИ КартинкаПолучениеНачальныхОстатков <> БиблиотекаКартинок.Успешно Тогда
		НачатьЗапросСкладскихЖурналов();
	ИначеЕсли РезультатПолученияВСДокументов <> Неопределено
		ИЛИ КартинкаПолучениеВСДокументов <> БиблиотекаКартинок.Успешно Тогда
		НачатьПолучениеВетеринарноСопроводительныхДокументов();
	Иначе
		ЗакончитьПолучениеСведенийПредприятий();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПолучениеСведенийПредприятий()
	
	Отказ = Ложь;
	
	Если Предприятия.Количество() > 0 Тогда
		ЗаписатьСинхронизациюКлассификаторов(Истина, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		ПоказатьОшибкуПолучения();
	Иначе
		ПоказатьУспешныйРезультат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатОбменаСВЕТИС(РезультатОбмена)
	
	ИнтеграцияВЕТИСКлиент.ОбработатьРезультатОбмена(РезультатОбмена, ЭтотОбъект,, ОповещениеПриЗавершенииОбмена(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияВЕТИСКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект,, ОповещениеПриЗавершенииОбмена(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ОповещениеПриЗавершенииОбмена()
	
	Если РезультатПолученияПользователей <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПолученияПользователей", ЭтотОбъект);
	ИначеЕсли РезультатЗапросаСкладскихЖурналов <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗапросаСкладскихЖурналов", ЭтотОбъект);
	ИначеЕсли РезультатПолученияВСДокументов <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПолученияВетеринарноСопроводительныхДокументов", ЭтотОбъект);
	КонецЕсли;
	
	Возврат ОписаниеОповещения;
	
КонецФункции

&НаКлиенте
Процедура НачатьПолучениеПользователей()
	
	КартинкаПолучениеПользователей = БиблиотекаКартинок.НезавершившаясяПроверка;
	
	ЗаголовокОшибки = НСтр("ru='Не удалось получить сведения о пользователях хозяйствующего субъекта'");
	ОкончаниеОшибки = НСтр("ru='Проверьте правильность заполнения полей ""APIKey"" и ""Логин администратора"".'");
	
	Попытка
		
		РезультатПолученияПользователей = ЗаявкиВЕТИСВызовСервера.ПодготовитьЗапросПользователейХозяйствующегоСубъекта(
			ХозяйствующийСубъект.Ссылка, Неопределено,
			ЭтотОбъект.УникальныйИдентификатор, НастройкаПодключения());
			
	Исключение
		
		РезультатПолученияПользователей = Неопределено;
		ТекстОшибки = СформироватьТекстОшибки(ЗаголовокОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ОкончаниеОшибки);
		ПоказатьОшибкуПолучения();
		
	КонецПопытки;
	
	Если РезультатПолученияПользователей <> Неопределено Тогда
		ОбработатьРезультатОбменаСВЕТИС(РезультатПолученияПользователей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияПользователей(Изменения, ДополнительныеПараметры) Экспорт
	
	ЗаголовокОшибки = НСтр("ru='Не удалось получить сведения о пользователях хозяйствующего субъекта'");
	ДанныеДляОбработки = Неопределено;
	
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЭлементДанных.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросПользователейХозяйствующегоСубъекта") Тогда
			ДанныеДляОбработки = ЭлементДанных;
		ИначеЕсли ЭлементДанных.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ОтветНаЗапросПользователейХозяйствующегоСубъекта") Тогда
			ДанныеДляОбработки = ЭлементДанных;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеДляОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеДляОбработки.НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОбрабатывается")
	 ИЛИ ДанныеДляОбработки.НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаВыполнена") Тогда
		КартинкаПолучениеПользователей  = БиблиотекаКартинок.Успешно;
		РезультатПолученияПользователей = Неопределено;
		ПродолжитьПолучениеСведенийХозяйствующегоСубъекта();
	ИначеЕсли ДанныеДляОбработки.НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОтклонена")
		ИЛИ НЕ ПустаяСтрока(ДанныеДляОбработки.ТекстОшибки) Тогда
		ТекстОшибки = СформироватьТекстОшибки(ЗаголовокОшибки, ДанныеДляОбработки.ТекстОшибки);
		ПоказатьОшибкуПолучения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗапросСкладскихЖурналов()
	
	КартинкаПолучениеНачальныхОстатков = БиблиотекаКартинок.НезавершившаясяПроверка;
	
	ЗаголовокОшибки = НСтр("ru='Не удалось выполнить запрос складских журналов ВетИС'");
	
	ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи(
		ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные"));
	
	Попытка
		СоздатьЗапросыСкладскогоЖурнала();
		
		ЗапросыСкладскогоЖурнала = Новый Массив();
		
		Для Каждого ДанныеПредприятия Из Предприятия Цикл
			ЗапросыСкладскогоЖурнала.Добавить(ДанныеПредприятия.ЗапросСкладскогоЖурнала);
		КонецЦикла;
		
		РезультатЗапросаСкладскихЖурналов = ИнтеграцияВЕТИСВызовСервера.ПодготовитьКПередаче(
			ЗапросыСкладскогоЖурнала, ПараметрыПередачи,
			ЭтотОбъект.УникальныйИдентификатор,
			ХозяйствующийСубъект.Ссылка, НастройкаПодключения());
	Исключение
		РезультатЗапросаСкладскихЖурналов = Неопределено;
		ТекстОшибки = СформироватьТекстОшибки(ЗаголовокОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьОшибкуПолучения();
	КонецПопытки;
	
	Если РезультатЗапросаСкладскихЖурналов <> Неопределено Тогда
		ОбработатьРезультатОбменаСВЕТИС(РезультатЗапросаСкладскихЖурналов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапросаСкладскихЖурналов(Изменения, ДополнительныеПараметры) Экспорт
	
	ЗаголовокОшибки = НСтр("ru='Не удалось выполнить запрос складских журналов предприятия ""%1""'");
	
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЭлементДанных.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросЗаписейСкладскогоЖурнала")
		 ИЛИ ЭлементДанных.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ОтветНаЗапросЗаписейСкладскогоЖурнала") Тогда
			Если ЭлементДанных.НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОбрабатывается") Тогда
				Продолжить;
			ИначеЕсли НЕ ПустаяСтрока(ЭлементДанных.ТекстОшибки) Тогда
				ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
					+ СформироватьТекстОшибки(СтрШаблон(ЗаголовокОшибки, ЭлементДанных.Предприятие), ЭлементДанных.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьОшибкуПолучения();
	Иначе
		КартинкаПолучениеНачальныхОстатков = БиблиотекаКартинок.Успешно;
		РезультатЗапросаСкладскихЖурналов  = Неопределено;
		ПродолжитьПолучениеСведенийПредприятий();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеВетеринарноСопроводительныхДокументов()
	
	Если ИндексПредприятия = 0 Тогда
		КартинкаПолучениеВСДокументов = БиблиотекаКартинок.НезавершившаясяПроверка;
	КонецЕсли;
	
	ЗаголовокОшибки = НСтр("ru='Не удалось получить ветеринарно-сопроводительные документы предприятия %1'");
	ЗаголовокОшибки = СтрШаблон(ЗаголовокОшибки, Предприятия[ИндексПредприятия].Наименование);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("СтатусВСД", ПредопределенноеЗначение("Перечисление.СтатусыВетеринарныхДокументовВЕТИС.Оформлен"));
	
	Попытка
		Если ЗначениеЗаполнено(ДатаНачалаЗагрузкиВСД) Тогда
			ПараметрыОтбора.Вставить(
				"Интервал",
				ИнтеграцияВЕТИСКлиентСервер.СтруктураИнтервала(ДатаНачалаЗагрузкиВСД, ТекущаяДата()));
		КонецЕсли;
		
		РезультатПолученияВСДокументов = ЗаявкиВЕТИСВызовСервера.ПодготовитьЗапросВетеринарноСопроводительныхДокументов(
			ХозяйствующийСубъект.Ссылка, Предприятия[ИндексПредприятия].Ссылка,
			ПараметрыОтбора,
			ЭтотОбъект.УникальныйИдентификатор, НастройкаПодключения());
	Исключение
		РезультатПолученияВСДокументов = Неопределено;
		ТекстОшибки = СформироватьТекстОшибки(ЗаголовокОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьОшибкуПолучения();
	КонецПопытки;
	
	Если РезультатПолученияВСДокументов <> Неопределено Тогда
		ОбработатьРезультатОбменаСВЕТИС(РезультатПолученияВСДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияВетеринарноСопроводительныхДокументов(Изменения, ДополнительныеПараметры) Экспорт
	
	ЗаголовокОшибки = НСтр("ru='Не удалось получить ветеринарно-сопроводительные документы предприятия ""%1""'");
	ЗаголовокОшибки = СтрШаблон(ЗаголовокОшибки, Предприятия[ИндексПредприятия].Наименование);
		
	ДанныеДляОбработки = Неопределено;
	
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЭлементДанных.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ЗапросВсехВСД") Тогда
			ДанныеДляОбработки = ЭлементДанных;
		ИначеЕсли ЭлементДанных.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийВЕТИС.ОтветНаЗапросВсехВСД") Тогда
			ДанныеДляОбработки = ЭлементДанных;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеДляОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеДляОбработки.НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОбрабатывается")
	 ИЛИ ДанныеДляОбработки.НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаВыполнена") Тогда
		ИндексПредприятия = ИндексПредприятия + 1;
		Если ИндексПредприятия < Предприятия.Количество() Тогда
			НачатьПолучениеВетеринарноСопроводительныхДокументов();
		Иначе
			КартинкаПолучениеВСДокументов  = БиблиотекаКартинок.Успешно;
			РезультатПолученияВСДокументов = Неопределено;
			ПродолжитьПолучениеСведенийПредприятий();
		КонецЕсли;
	ИначеЕсли ДанныеДляОбработки.НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОтклонена")
		ИЛИ НЕ ПустаяСтрока(ДанныеДляОбработки.ТекстОшибки) Тогда
		ТекстОшибки = СформироватьТекстОшибки(ЗаголовокОшибки, ДанныеДляОбработки.ТекстОшибки);
		ПоказатьОшибкуПолучения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьСведений

&НаСервере
Процедура ЗаписатьСинхронизациюКлассификаторов(СинхронизацияПредприятий = Ложь, Отказ)
	
	ЗаголовокОшибки = НСтр("ru='Не удалось записать синхронизацию классификаторов ВетИС'");
	
	ТипыУказыватьПредприятия = Новый СписокЗначений();
	ТипыНеСинхронизировать   = Новый СписокЗначений();
	
	ТипыНеСинхронизировать.Добавить(Перечисления.ТипыВЕТИС.Пользователи);
	ТипыНеСинхронизировать.Добавить(Перечисления.ТипыВЕТИС.СтраныМира);
	ТипыНеСинхронизировать.Добавить(Перечисления.ТипыВЕТИС.Упаковки);
	
	Если СинхронизацияПредприятий Тогда
		ТипыУказыватьПредприятия.Добавить(Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы);
		ТипыУказыватьПредприятия.Добавить(Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала);
	Иначе
		ТипыНеСинхронизировать.Добавить(Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы);
		ТипыНеСинхронизировать.Добавить(Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТипыВЕТИС.Ссылка КАК ТипВЕТИС,
	|	ЕСТЬNULL(ХозяйствующиеСубъектыВЕТИС.Ссылка, ЗНАЧЕНИЕ(Справочник.ХозяйствующиеСубъектыВЕТИС.ПустаяСсылка)) КАК ХозяйствующийСубъект,
	|	ЕСТЬNULL(ПредприятияВЕТИС.Ссылка, ЗНАЧЕНИЕ(Справочник.ПредприятияВЕТИС.ПустаяСсылка)) КАК Предприятие
	|ПОМЕСТИТЬ
	|	ВремТаблТипыВЕТИС
	|ИЗ
	|	Перечисление.ТипыВЕТИС КАК ТипыВЕТИС
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХозяйствующиеСубъектыВЕТИС КАК ХозяйствующиеСубъектыВЕТИС
	|		ПО ТипыВЕТИС.Ссылка В (&ТипыУказыватьПредприятия)
	|		 И ХозяйствующиеСубъектыВЕТИС.Ссылка = &ХозяйствующийСубъект
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредприятияВЕТИС КАК ПредприятияВЕТИС
	|		ПО ТипыВЕТИС.Ссылка В (&ТипыУказыватьПредприятия)
	|		 И ПредприятияВЕТИС.Ссылка В (&Предприятия)
	|ГДЕ
	|	НЕ ТипыВЕТИС.Ссылка В (&ТипыНеСинхронизировать)
	|
	|;
	|
	|ВЫБРАТЬ
	|	ТипыВЕТИС.ТипВЕТИС             КАК ТипВЕТИС,
	|	ТипыВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	ТипыВЕТИС.Предприятие          КАК Предприятие,
	|	&ТекущаяДата                   КАК ДатаСинхронизации
	|ИЗ
	|	ВремТаблТипыВЕТИС КАК ТипыВЕТИС
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
	|		ПО ТипыВЕТИС.ТипВЕТИС = СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС
	|		 И ТипыВЕТИС.ХозяйствующийСубъект = СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект
	|		 И ТипыВЕТИС.Предприятие = СинхронизацияКлассификаторовВЕТИС.Предприятие
	|ГДЕ
	|	СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС ЕСТЬ NULL
	|");
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект.Ссылка);
	Запрос.УстановитьПараметр("Предприятия", РеквизитФормыВЗначение("Предприятия").ВыгрузитьКолонку("Ссылка"));
	Запрос.УстановитьПараметр("ТипыУказыватьПредприятия", ТипыУказыватьПредприятия);
	Запрос.УстановитьПараметр("ТипыНеСинхронизировать", ТипыНеСинхронизировать);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	
	НачатьТранзакцию();
	
	Попытка
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.СинхронизацияКлассификаторовВЕТИС.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Отказ = Истина;
		ТекстОшибки = СформироватьТекстОшибки(ЗаголовокОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КодЯзыка = Метаданные.ОсновнойЯзык.КодЯзыка;
		ЗаписьЖурналаРегистрации(НСтр("ru='Запись синхронизации классификаторов ВетИС.'", КодЯзыка),
		                         УровеньЖурналаРегистрации.Ошибка,
		                         Метаданные.РегистрыСведений.СинхронизацияКлассификаторовВЕТИС,,
		                         ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиПодключения(Отказ)
	
	ЗаголовокОшибки = НСтр("ru='Не удалось записать настройки подключения к ВетИС.API'");
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		МенеджерЗаписи = РегистрыСведений.НастройкиПодключенияВЕТИС.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ХозяйствующийСубъект = ХозяйствующийСубъект.Ссылка;
		МенеджерЗаписи.Логин                = Логин;
		МенеджерЗаписи.Таймаут              = Таймаут;
		Если ПодключениеСобственнойОрганизации = 1 Тогда
			МенеджерЗаписи.Администратор = Справочники.ПользователиВЕТИС.НайтиПоРеквизиту("УчетнаяЗапись", ЛогинАдминистратора);
		КонецЕсли;
		МенеджерЗаписи.Записать(Истина);
		
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ХозяйствующийСубъект.Ссылка, БезопасноеХранилище.Пароль);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ХозяйствующийСубъект.Ссылка, БезопасноеХранилище.КлючAPI, "КлючAPI");
		
		НастройкиПодключенияКлючЗаписи = РегистрыСведений.НастройкиПодключенияВЕТИС.ПустойКлюч();
		ЗаполнитьЗначенияСвойств(НастройкиПодключенияКлючЗаписи, МенеджерЗаписи);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Отказ = Истина;
		ТекстОшибки = СформироватьТекстОшибки(ЗаголовокОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КодЯзыка = Метаданные.ОсновнойЯзык.КодЯзыка;
		ЗаписьЖурналаРегистрации(НСтр("ru='Запись настройки подключения ВетИС.'", КодЯзыка),
		                         УровеньЖурналаРегистрации.Ошибка,
		                         Метаданные.РегистрыСведений.НастройкиПодключенияВЕТИС,,
		                         ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьАдминистратораХозяйствующегоСубъекта()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПользователиВЕТИС.Ссылка КАК ПользовательВЕТИС,
	|	Пользователи.Ссылка      КАК Пользователь
	|ИЗ
	|	Справочник.ПользователиВЕТИС КАК ПользователиВЕТИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ПользователиВЕТИС.НаименованиеПолное = Пользователи.Наименование
	|		 И НЕ Пользователи.ПометкаУдаления
	|ГДЕ
	|	НЕ ПользователиВЕТИС.ПометкаУдаления
	|	И ПользователиВЕТИС.УчетнаяЗапись = &УчетнаяЗапись
	|	И ПользователиВЕТИС.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("УчетнаяЗапись", ЛогинАдминистратора);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ПользовательВЕТИСОбъект = Выборка.ПользовательВЕТИС.ПолучитьОбъект();
		ПользовательВЕТИСОбъект.Заблокировать();
		
		Если ЗначениеЗаполнено(Выборка.Пользователь) Тогда
			ПользовательВЕТИСОбъект.Пользователь = Выборка.Пользователь;
		Иначе
			ПользовательВЕТИСОбъект.Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Попытка
			ПользовательВЕТИСОбъект.Записать();
		Исключение
			КодЯзыка = Метаданные.ОсновнойЯзык.КодЯзыка;
			ЗаписьЖурналаРегистрации(НСтр("ru='Сопоставление администратора хозяйствующего субъекта.'", КодЯзыка),
			                         УровеньЖурналаРегистрации.Ошибка,
			                         Метаданные.Справочники.ПользователиВЕТИС,,
			                         ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗапросыСкладскогоЖурнала()
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		Для Каждого ДанныеПредприятия Из Предприятия Цикл
			Если НЕ ЗначениеЗаполнено(ДанныеПредприятия.ЗапросСкладскогоЖурнала) Тогда
				НовыйДокумент = Документы.ЗапросСкладскогоЖурналаВЕТИС.СоздатьДокумент();
				НовыйДокумент.Заполнить(Неопределено);
				НовыйДокумент.Дата = ТекущаяДатаСеанса();
				НовыйДокумент.УстановитьНовыйНомер();
				НовыйДокумент.ХозяйствующийСубъект = ХозяйствующийСубъект.Ссылка;
				НовыйДокумент.Предприятие = ДанныеПредприятия.Ссылка;
				НовыйДокумент.Комментарий = НСтр("ru = 'Загрузка начальных остатков'");
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				
				ДанныеПредприятия.ЗапросСкладскогоЖурнала = НовыйДокумент.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ВызватьИсключение НСтр("ru='Ошибка при создании документов ""Запрос складского журнала ВетИС""'");
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СводныйОтчетПоПолученнымСведениям

&НаСервере
Процедура СформироватьОтчетНаСервере()
	
	ТабличныйДокумент.Очистить();
	Макет = РегистрыСведений.НастройкиПодключенияВЕТИС.ПолучитьМакет("Макет");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокХозСубъект");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка = Макет.ПолучитьОбласть("ШапкаХозСубъект");
	ОбластьШапка.Параметры.Заполнить(ХозяйствующийСубъект);
	ОбластьШапка.Параметры.ХозяйствующийСубъект = ХозяйствующийСубъект.Ссылка;
	
	Если ХозяйствующийСубъект.Тип = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ФизическоеЛицо
		ИЛИ ХозяйствующийСубъект.Тип = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ИндивидуальныйПредприниматель Тогда
		ОбластьШапка.Параметры.Наименование       = ХозяйствующийСубъект.ФИО;
		ОбластьШапка.Параметры.НаименованиеПолное = ХозяйствующийСубъект.ФИО;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Если Предприятия.Количество() > 0 Тогда
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокПредприятия");
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаПредприятия");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		Для Каждого СтрокаПредприятие Из Предприятия Цикл
			ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаПредприятия");
			ОбластьСтрока.Параметры.Заполнить(СтрокаПредприятие);
			ОбластьСтрока.Параметры.Предприятие = СтрокаПредприятие.Ссылка;
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПользователиВЕТИС.Ссылка              КАК ПользовательВЕТИС,
	|	ПользователиВЕТИС.УчетнаяЗапись       КАК УчетнаяЗапись,
	|	ПользователиВЕТИС.ИдентификаторВерсии КАК ИдентификаторВерсии,
	|	ПользователиВЕТИС.Наименование        КАК Наименование,
	|	ПользователиВЕТИС.РабочийEmail        КАК РабочийEmail,
	|	ПраваДоступаВЕТИС.ПравоДоступа        КАК ПравоДоступа
	|ПОМЕСТИТЬ
	|	ВремТаблПраваДоступаПользователейВЕТИС
	|ИЗ
	|	Справочник.ПользователиВЕТИС КАК ПользователиВЕТИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваДоступаПользователейВЕТИС КАК ПраваДоступаВЕТИС
	|		ПО ПользователиВЕТИС.Ссылка = ПраваДоступаВЕТИС.ПользовательВЕТИС
	|ГДЕ
	|	ПраваДоступаВЕТИС.ХозяйствующийСубъект = &ХозяйствующийСубъект
	|
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиВЕТИС.ПользовательВЕТИС   КАК ПользовательВЕТИС,
	|	ПользователиВЕТИС.УчетнаяЗапись       КАК УчетнаяЗапись,
	|	ПользователиВЕТИС.ИдентификаторВерсии КАК ИдентификаторВерсии,
	|	ПользователиВЕТИС.Наименование        КАК Наименование,
	|	ПользователиВЕТИС.РабочийEmail        КАК РабочийEmail
	|ИЗ
	|	ВремТаблПраваДоступаПользователейВЕТИС КАК ПользователиВЕТИС
	|
	|;
	|
	|ВЫБРАТЬ
	|	ПользователиВЕТИС.ПользовательВЕТИС   КАК ПользовательВЕТИС,
	|	ПользователиВЕТИС.ПравоДоступа        КАК ПравоДоступа
	|ИЗ
	|	ВремТаблПраваДоступаПользователейВЕТИС КАК ПользователиВЕТИС
	|";
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект.Ссылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПользователи = Результаты[1].Выбрать();
	ВыборкаПраваДоступа = Результаты[2].Выбрать();
	
	Если ВыборкаПользователи.Количество() > 0 Тогда
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокПользователи");
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаПользователи");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		Пока ВыборкаПользователи.Следующий() Цикл
			ПраваДоступа  = "";
			
			ВыборкаПраваДоступа.Сбросить();
			Пока ВыборкаПраваДоступа.НайтиСледующий(ВыборкаПользователи.ПользовательВЕТИС, "ПользовательВЕТИС") Цикл
				ПраваДоступа = ПраваДоступа + ?(ПустаяСтрока(ПраваДоступа), "", ", ") + ВыборкаПраваДоступа.ПравоДоступа;
			КонецЦикла;
			
			ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаПользователи");
			ОбластьСтрока.Параметры.Заполнить(ВыборкаПользователи);
			ОбластьСтрока.Параметры.Пользователь = ВыборкаПользователи.ПользовательВЕТИС;
			ОбластьСтрока.Параметры.ПраваДоступа = ПраваДоступа;
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ИнициализироватьРеквизиты()
	
	БезопасноеХранилище = Новый Структура("Пароль,КлючAPI");
	
	ПодключениеСобственнойОрганизации  = 1;
	ПерезаписыватьСуществующиеСведения = ОбщегоНазначения.РежимОтладки();
	
	ПолучитьСведенияПредприятий = Истина;
	ОткрытьХозяйствующийСубъектПослеЗакрытияПомощника = Истина;
	
	ХозяйствующийСубъект = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныеХозяйствующегоСубъекта();
	
	Таймаут = 60;
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеТекущейСтраницы()
	
	ТекущаяСтраницаЗаполнена = Истина;
	
	СтраницыФормы = Элементы.ГруппаСтраницы;
	СписокОшибок  = Новый СписокЗначений();
	
	Если СтраницыФормы.ТекущаяСтраница = СтраницыФормы.ПодчиненныеЭлементы.СтраницаРеквизитыПодключения Тогда
		
		Если ПустаяСтрока(Логин) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Login"".'");
			СписокОшибок.Добавить("Логин", ТекстОшибки);
		КонецЕсли;
		
		Если ПустаяСтрока(Пароль) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Password"".'");
			СписокОшибок.Добавить("Пароль", ТекстОшибки);
		КонецЕсли;
		
		Если ПустаяСтрока(КлючAPI) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено поле ""APIKey"".'");
			СписокОшибок.Добавить("КлючAPI", ТекстОшибки);
		ИначеЕсли НЕ ЭтоКлючAPIПроверитьНаСервере() Тогда
			ТекстОшибки = НСтр("ru = 'Неправильно заполнено поле ""APIKey"".'");
			СписокОшибок.Добавить("КлючAPI", ТекстОшибки);
		КонецЕсли;
		
		Если ПустаяСтрока(Идентификатор) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено поле ""IssuerID"".'");
			СписокОшибок.Добавить("Идентификатор", ТекстОшибки);
		ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Идентификатор) Тогда
			ТекстОшибки = НСтр("ru = 'Неправильно заполнено поле ""IssuerID"".'");
			СписокОшибок.Добавить("Идентификатор", ТекстОшибки);
		КонецЕсли;
		
		Если ПодключениеСобственнойОрганизации = 1 Тогда
			Если ПустаяСтрока(ЛогинАдминистратора) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Логин администратора"".'");
				СписокОшибок.Добавить("ЛогинАдминистратора", ТекстОшибки);
			ИначеЕсли НЕ ПользователиВЕТИСКлиентСервер.ЭтоУчетнаяЗапись(ЛогинАдминистратора) Тогда
				ТекстОшибки = НСтр("ru = 'Неправильно заполнено поле ""Логин администратора"".'");
				СписокОшибок.Добавить("ЛогинАдминистратора", ТекстОшибки);
			КонецЕсли;
		ИначеЕсли ПолучитьСведенияПредприятий Тогда
			Если ПустаяСтрока(ЛогинАдминистратора) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Логин пользователя"".'");
				СписокОшибок.Добавить("ЛогинАдминистратора", ТекстОшибки);
			ИначеЕсли НЕ ПользователиВЕТИСКлиентСервер.ЭтоУчетнаяЗапись(ЛогинАдминистратора) Тогда
				ТекстОшибки = НСтр("ru = 'Неправильно заполнено поле ""Логин пользователя"".'");
				СписокОшибок.Добавить("ЛогинАдминистратора", ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Для Каждого ОшибкаЭлемент Из СписокОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаЭлемент.Представление,, ОшибкаЭлемент.Значение,,);
		ТекущаяСтраницаЗаполнена = Ложь;
	КонецЦикла;
	
	Возврат ТекущаяСтраницаЗаполнена;
	
КонецФункции

&НаСервере
Функция ЭтоКлючAPIПроверитьНаСервере()
	
	Возврат ПользователиВЕТИСКлиентСервер.ЭтоУчетнаяЗапись(БезопасноеХранилище.КлючAPI,,,,, ".-=");
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзменениях()
	
	ОповеститьОбИзменении(ХозяйствующийСубъект.Ссылка);
	ОповеститьОбИзменении(НастройкиПодключенияКлючЗаписи);
	
	Для Каждого СтрокаПредприятие Из Предприятия Цикл
		ОповеститьОбИзменении(СтрокаПредприятие.Ссылка);
	КонецЦикла;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция СведенияСуществуют(Знач Идентификатор)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.НастройкиПодключенияВЕТИС КАК НастройкиПодключенияВЕТИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХозяйствующиеСубъектыВЕТИС КАК ХозяйствующиеСубъектыВЕТИС
	|		ПО НастройкиПодключенияВЕТИС.ХозяйствующийСубъект = ХозяйствующиеСубъектыВЕТИС.Ссылка
	|ГДЕ
	|	ХозяйствующиеСубъектыВЕТИС.Идентификатор = &Идентификатор
	|";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьТекстОшибки(Заголовок, Описание, Заключение = "")
	
	ТекстОшибки = Заголовок;
	
	Если НЕ ПустаяСтрока(Описание) Тогда
		ТекстОшибки = ТекстОшибки + " " + НСтр("ru='по причине:'") + Символы.ПС + Описание;
	Иначе
		ТекстОшибки = ТекстОшибки + ".";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Заключение) Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + Заключение;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

