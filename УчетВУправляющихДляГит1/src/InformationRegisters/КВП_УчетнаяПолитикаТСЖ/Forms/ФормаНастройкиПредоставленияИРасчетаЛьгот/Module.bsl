
#Область ПрочиеПроцедурыИФункции

&НаСервере
// Предназначена для помещения настроек во временное хранилище.
//
Функция ПоместитьНастройкиВХранилище(РедактированиеСтрокиНастроекГруппыУслуг = Ложь, ИдентификаторТекущейСтроки = Неопределено)
	
	СтруктураПараметров = Новый Структура;
	
	Если РедактированиеСтрокиНастроекГруппыУслуг Тогда
		
		Если ИдентификаторТекущейСтроки = Неопределено Тогда
			
			СтруктураПараметров.Вставить("НоваяСтрока",                                 Истина);
			СтруктураПараметров.Вставить("ВидЖильцовКоторымПредоставляютсяЛьготы",      ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Зарегистрированные"));
			СтруктураПараметров.Вставить("ТипЖильцовДляДеленияОбъемаНачисленнойУслуги", ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЛьготникиПолучающиеЛьготуПоУслуге"));
			СтруктураПараметров.Вставить("ТипЖильцовДляДеленияОбъемаОграниченияЛьготы", ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ЖильцыПользующиесяЛьготойЛьготника"));
			
		Иначе
			
			ТекущаяСтрока = ТаблицаНастроекПредоставленияИРасчетаЛьгот.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
			
			СтруктураПараметров.Вставить("ИдентификаторТекущейСтроки",                  ИдентификаторТекущейСтроки);
			СтруктураПараметров.Вставить("ГруппаУслуг",                                 ТекущаяСтрока.ГруппаУслуг);
			СтруктураПараметров.Вставить("ВидЖильцовКоторымПредоставляютсяЛьготы",      ТекущаяСтрока.ВидЖильцовКоторымПредоставляютсяЛьготы);
			СтруктураПараметров.Вставить("ТипЖильцовДляДеленияОбъемаНачисленнойУслуги", ТекущаяСтрока.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги);
			СтруктураПараметров.Вставить("ТипЖильцовДляДеленияОбъемаОграниченияЛьготы", ТекущаяСтрока.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы);
			
		КонецЕсли;
		
	Иначе
		
		СтруктураПараметров.Вставить("ТаблицаНастроекПредоставленияИРасчетаЛьгот", 
									  ТаблицаНастроекПредоставленияИРасчетаЛьгот.Выгрузить().Скопировать());
	
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Предназначена для получения настроек из временного хранилища.
//
Процедура ПолучитьНастройкиИзХранилища(АдресВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	НоваяСтрока                = Ложь;
	ИдентификаторТекущейСтроки = Неопределено;
	
	СтруктураНастроек.Свойство("НоваяСтрока",                НоваяСтрока);
	СтруктураНастроек.Свойство("ИдентификаторТекущейСтроки", ИдентификаторТекущейСтроки);
	
	Если НоваяСтрока Тогда
		
		// Добавляем новую строку настроек.
		ТекущаяСтрока = ТаблицаНастроекПредоставленияИРасчетаЛьгот.Добавить();
		
	ИначеЕсли НЕ ИдентификаторТекущейСтроки = Неопределено Тогда
		
		// Ищем строку настроек по идентификатору.
		ТекущаяСтрока = ТаблицаНастроекПредоставленияИРасчетаЛьгот.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	// Заполняем новые значения настроек в строке.
	СтруктураНастроек.Свойство("ГруппаУслуг",                                 ТекущаяСтрока.ГруппаУслуг);
	СтруктураНастроек.Свойство("ВидЖильцовКоторымПредоставляютсяЛьготы",      ТекущаяСтрока.ВидЖильцовКоторымПредоставляютсяЛьготы);
	СтруктураНастроек.Свойство("ТипЖильцовДляДеленияОбъемаНачисленнойУслуги", ТекущаяСтрока.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги);
	СтруктураНастроек.Свойство("ТипЖильцовДляДеленияОбъемаОграниченияЛьготы", ТекущаяСтрока.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы);
	
	// Принудительная сортировка строк в настройках.
	ВыполнитьСортировкуСтрокНастроек(ЭтаФорма);
	
КонецПроцедуры // ПолучитьНастройкиИзХранилища()

&НаСервере
// Процедура устанавливает списки выбора и условное оформление полей.
Процедура УстановитьСпискиВыбораИУсловноеОформлениеПолей()
	
	// Настройка предоставления льготы
	СписокВыбораПредоставленияЛьготы = Новый СписокЗначений;
	СписокВыбораПредоставленияЛьготы.Добавить(Перечисления.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Зарегистрированные, "Зарегистрированным");
	СписокВыбораПредоставленияЛьготы.Добавить(Перечисления.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Проживающие,        "Проживающим");
	СписокВыбораПредоставленияЛьготы.Добавить(Перечисления.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Собственники,       "Собственникам");
	
	ПолеВвода = Элементы.ТаблицаНастроекПредоставленияИРасчетаЛьготВидЖильцовКоторымПредоставляютсяЛьготы;
	УстановитьСписокВыбораИУсловноеОформлениеПоля(ПолеВвода, СписокВыбораПредоставленияЛьготы);
	
	// Настройка распределения объема услуги.
	СписокВыбораОбъемаУслуги = Новый СписокЗначений;
	СписокВыбораОбъемаУслуги.Добавить(Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчета,                    "количества всех жильцов");
	СписокВыбораОбъемаУслуги.Добавить(Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой, "количества всех жильцов, пользующихся льготой");
	СписокВыбораОбъемаУслуги.Добавить(Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЛьготникиПолучающиеЛьготуПоУслуге,      "количества льготников, получающих льготу по услуге");
	
	// Настройка распределения объема ограничения.
	СписокВыбораОбъемаОграничения = Новый СписокЗначений;
	СписокВыбораОбъемаОграничения.Добавить(Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ВсеЖильцыЛицевогоСчета,                    "количества всех жильцов");
	СписокВыбораОбъемаОграничения.Добавить(Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой, "количества всех жильцов, пользующихся льготой");
	СписокВыбораОбъемаОграничения.Добавить(Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ЖильцыПользующиесяЛьготойЛьготника,        "количества жильцов, пользующихся льготой льготника");
	
	// Объем услуги.
	ПолеВвода = Элементы.ТаблицаНастроекПредоставленияИРасчетаЛьготТипЖильцовДляДеленияОбъемаНачисленнойУслуги;
	УстановитьСписокВыбораИУсловноеОформлениеПоля(ПолеВвода, СписокВыбораОбъемаУслуги);
	
	// Объем ограничения.
	ПолеВвода = Элементы.ТаблицаНастроекПредоставленияИРасчетаЛьготТипЖильцовДляДеленияОбъемаОграниченияЛьготы;
	УстановитьСписокВыбораИУсловноеОформлениеПоля(ПолеВвода, СписокВыбораОбъемаОграничения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Процедура выполняет сортировку строк настроек.
Процедура ВыполнитьСортировкуСтрокНастроек(Форма)
	
	// Принудительная сортировка строк в настройках.
	Форма.ТаблицаНастроекПредоставленияИРасчетаЛьгот.Сортировать("ГруппаУслуг");
	
КонецПроцедуры

&НаСервере
// Процедура выполняет установку списка выбора и условного оформления поля ввода.
Процедура УстановитьСписокВыбораИУсловноеОформлениеПоля(ПолеВвода, СписокВыбора)
	
	СписокВыбораПолеВвода = ПолеВвода.СписокВыбора;
	СписокВыбораПолеВвода.Очистить();
	
	Для Каждого ТекЭлемент Из СписокВыбора Цикл
		
		// Определение списка выбора.
		СписокВыбораПолеВвода.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
		
		// Определение условного оформления.
		НовоеОформление = УсловноеОформление.Элементы.Добавить();
		
		НовоеОформление.Оформление.УстановитьЗначениеПараметра("Текст", ТекЭлемент.Представление);
		
		ОтборЭлемента = НовоеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеВвода.ПутьКДанным);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ТекЭлемент.Значение;
		
		ПолеОформления = НовоеОформление.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ПолеВвода.Имя);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет проверку наличия настроек по текущей группе услуг.
Процедура ПроверитьНаличиеНастроекДляТекущейГруппыУслуг(Отказ = Ложь, СтандартнаяОбработка = Истина, ТекущаяГруппаУслуг = Неопределено)
	
	НастройкиТекущейГруппыУслугУжеВведены = Ложь;
	
	// При окончании редактирования строки необходимо проверить,
	// не введены ли настройки для текущей группы услуг в других строках.
	// Если уже введены, то запрещаем сохранение текущей строки.
	ТекущиеДанные = Элементы.ТаблицаНастроекПредоставленияИРасчетаЛьгот.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
		
		Если ТекущаяГруппаУслуг = Неопределено Тогда
			ТекущаяГруппаУслуг = ТекущиеДанные.ГруппаУслуг;
		КонецЕсли;
		
		// Поиск строк с текущей группой услуг.
		НайденныеСтроки = ТаблицаНастроекПредоставленияИРасчетаЛьгот.НайтиСтроки(Новый Структура("ГруппаУслуг", ТекущаяГруппаУслуг));
		Для Каждого ТекНайденнаяСтрока Из НайденныеСтроки Цикл
			Если Не ИдентификаторТекущейСтроки = ТекНайденнаяСтрока.ПолучитьИдентификатор() Тогда
				НастройкиТекущейГруппыУслугУжеВведены = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Если строки найдены, то уходим в отказ.
		Если НастройкиТекущейГруппыУслугУжеВведены Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Настройки для текущей группы услуг уже введены! Укажите другую группу услуг.");
			
			// Отказ от стандартных действий.
			Отказ = Истина;
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура сохраняет изменения и закрывает форму.
Процедура СохранитьИзмененияИЗакрытьФорму()
	
	Модифицированность = Ложь;
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	Закрыть(АдресНастроекВХранилище);
	
КонецПроцедуры

&НаКлиенте
// Открывает форму редактирования настроек текущей группы услуг.
Процедура ИзменитьНастройкиПараметровРасчетаЛьготыПоГруппеУслуг(ИдентификаторТекущейСтроки = Неопределено)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗакрыватьПриЗакрытииВладельца",           Истина);
	ПараметрыОткрытия.Вставить("АдресНастроекВХранилищеДоРедактирования", ПоместитьНастройкиВХранилище(Истина, ИдентификаторТекущейСтроки));
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.Форма.ФормаНастройкиПараметровРасчетаЛьготыПоГруппеУслуг", 
					ПараметрыОткрытия, 
					ЭтаФорма,,,,
					Новый ОписаниеОповещения("КомандаНастройкиПараметровРасчетаЛьготыПоГруппеУслугЗавершениеИзменения", ЭтаФорма),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения настройки предоставления и расчета льгот.
Процедура КомандаНастройкиПараметровРасчетаЛьготыПоГруппеУслугЗавершениеИзменения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		Модифицированность = Истина;
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры // КомандаНастройкиПараметровРасчетаЛьготыПоГруппеУслугЗавершениеИзменения()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Во входной структуре должны содержаться следующие параметры:
	// - Таблица настроек льгот по группам услуг.
	
	Если Параметры.Свойство("АдресНастроекВХранилищеДоРедактирования")
	   И НЕ Параметры.АдресНастроекВХранилищеДоРедактирования = Неопределено Тогда
		
		СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилищеДоРедактирования);
		
		ВременнаяПеременная = Неопределено;
		СтруктураПараметров.Свойство("ТаблицаНастроекПредоставленияИРасчетаЛьгот", ВременнаяПеременная);
		Если НЕ ВременнаяПеременная = Неопределено Тогда
			ТаблицаНастроекПредоставленияИРасчетаЛьгот.Загрузить(ВременнаяПеременная);
		КонецЕсли;
		
	КонецЕсли;
	
	// Установка списков выбора и условного оформления.
	УстановитьСпискиВыбораИУсловноеОформлениеПолей();
	
	// Принудительная сортировка строк в настройках.
	ВыполнитьСортировкуСтрокНастроек(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Если настройки были изменены, то предложим пользователю сохранить их.
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаПередЗакрытиемФормы", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик ответа перед закрытием формы.
Процедура ОбработкаОтветаПередЗакрытиемФормы(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		// Сохраняем настройки и закрываем форму.
		СохранитьИзмененияИЗакрытьФорму();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		// Закрываем форму без сохранения настроек.
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" колонки "ГруппаУслуг" 
// табличного поля "ТаблицаНастроекПредоставленияИРасчетаЛьгот".
Процедура ТаблицаНастроекПредоставленияИРасчетаЛьготГруппаУслугНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Отбор", Новый Структура("Родитель", ПредопределенноеЗначение("Справочник.УПЖКХ_ГруппыУслуг.НастройкиРасчётаЛьгот")));
	
	ОткрытьФорму("Справочник.УПЖКХ_ГруппыУслуг.ФормаВыбора", ПараметрыОтбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" колонки "ГруппаУслуг" 
// табличного поля "ТаблицаНастроекПредоставленияИРасчетаЛьгот".
Процедура ТаблицаНастроекПредоставленияИРасчетаЛьготГруппаУслугОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПроверитьНаличиеНастроекДляТекущейГруппыУслуг(, СтандартнаяОбработка, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" 
// табличного поля "ТаблицаНастроекПредоставленияИРасчетаЛьгот".
Процедура ТаблицаНастроекПредоставленияИРасчетаЛьготПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если НЕ Копирование Тогда
		
		ИзменитьНастройкиПараметровРасчетаЛьготыПоГруппеУслуг();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" 
// табличного поля "ТаблицаНастроекПредоставленияИРасчетаЛьгот".
Процедура ТаблицаНастроекПредоставленияИРасчетаЛьготПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Принудительная сортировка строк в настройках.
	ВыполнитьСортировкуСтрокНастроек(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Выбор" 
// табличного поля "ТаблицаНастроекПредоставленияИРасчетаЛьгот".
Процедура ТаблицаНастроекПредоставленияИРасчетаЛьготВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИзменитьНастройкиПараметровРасчетаЛьготыПоГруппеУслуг(ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик события "Нажатие" кнопки "Сохранить и закрыть".
Процедура СохранитьИЗакрыть(Команда)
	
	СохранитьИзмененияИЗакрытьФорму();
	
КонецПроцедуры

#КонецОбласти
