
////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
// Функция проверяет наличие 
//
Функция НаличиеНезаполненныхСтрокПорядокУслугДляРаспределенияОплат()
	
	ТекстОшибки = "";
	
	Для Каждого Строка Из ПорядокУслугДляРаспределенияОплат Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ВидУслуги) Тогда
			ТекстОшибки = "В табличной части имеются незаполненные строки";
			Возврат ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстОшибки;
	
КонецФункции // НаличиеНезаполненныхСтрокПорядокУслугДляРаспределенияОплат()

&НаКлиенте
// Устанавливает видимость и доступность элементов формы, в зависимости от
// установленных параметров.
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	Элементы.ГруппаУСН.Видимость = УСН;
	
	// Страница "Регистрация оплат".
	ПорядокУслугДляРаспределенияОплат.Сортировать("Порядок");
	Элементы.ГруппаМесяц.Видимость = Запись.РаспределятьАвансПропорциональноНачислениям;
	
	// Страница "УСН".
	Элементы.ГруппаОтраженияВКУДиР.Видимость           = НЕ АвтоматическиОтражатьОплатуВКУДиР;
	Элементы.ДоходыПринимаемые.Доступность             = НЕ Запись.ОбнулятьДоходыВсего;
	Элементы.ГруппаНастроекОтраженияВКУДиР.Доступность = НЕ Запись.ОтражениеОплатыВРазрезеУслуг;
	Элементы.НастройкаОплатыВКУДиР.Доступность         = Запись.ОтражениеОплатыВРазрезеУслуг;
	
	// Страница "Закрытие периода".
	Элементы.ВыполнятьПереносВРамкахОдногоМесяцаНачисления.Доступность = 
		Запись.РазрешитьПереносАвансовНаДолгиПоВсемУслугам;
	Если НЕ Запись.РазрешитьПереносАвансовНаДолгиПоВсемУслугам
	  И Запись.ВыполнятьПереносВРамкахОдногоМесяцаНачисления Тогда
		Запись.ВыполнятьПереносВРамкахОдногоМесяцаНачисления = Ложь;
	КонецЕсли;
	
	Элементы.ДекорацияЗадатьГруппыУслугДляОграниченияРаспределенияАвансов.Доступность = Запись.РазрешитьПереносАвансовНаДолгиПоВсемУслугам;
	
	// Страница "Льготы"
	Элементы.НастройкаЛьготныхТарифов.Доступность = Запись.ИспользоватьЛьготныйТариф;
	
	// Страница "ТСЖ"
	Элементы.ГруппаТСЖ.Видимость = ИспользоватьФункционалТСЖ;
	ОтражатьВзносы               = УСН И Запись.УчитыватьВступительныеВзносыТСЖ;
	
	Элементы.ГруппаВзносыКУДиР.Видимость    = ОтражатьВзносы;
	Элементы.ОтражатьВзносыВКУДиР.Видимость = ОтражатьВзносы;
	
	// Страница "Пени"
	Элементы.НастройкаСпискаУслугИсключений.Видимость = Запись.ИспользоватьУслугиИсключенияПриРасчетеПени;
	
	// Страница "Регл. учет".
	Элементы.ГруппаПараметрыРеглУчет.Видимость = Запись.ОтражатьНачисленияВРеглУчете;
	
	// Страница "Отражение капремонта в регл. учете"
	Элементы.ГруппаСчетРасчетовКапРемонт.Видимость           = мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет;
	Элементы.ГруппаПениКапРемонт.Видимость                   = мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет;
	Элементы.СчетУчетаВзаиморасчетовПоКапремонту.Доступность =
		(Запись.ВариантОтраженияВзаиморасчетовПоКапремонту = ПредопределенноеЗначение("Перечисление.КВП_ВидыСчетовРасчетовСКонтрагентамиПоКапремонту.ОтдельныеСчета"));
	
	Элементы.ОткрытьСчетаУчетаРасчетовПоПени.Доступность              = (Запись.СчетаУчетаДляОтраженияПени = ПредопределенноеЗначение("Перечисление.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета"));
	Элементы.ОткрытьСчетаУчетаРасчетовПоПениКапРемонт.Доступность     = (Запись.СчетаУчетаДляОтраженияПениКапремонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета"));
	Элементы.ГруппаПериодОграниченияВводаПоказанийСчетчиков.Видимость = Запись.ВариантОграниченияПериодаВводаПоказаний = 1;
	
КонецПроцедуры // УстановитьВидимостьИДоступностьЭлементов()

// Проверяет, корректно ли заполнены значения параметров.
//
&НаКлиенте
Процедура ПроверитьЗаполнениеПараметров(Отказ)
	
	Отказ = Ложь;
	
	// Страница "Регл. учет".
	ЗаголовокРаздела = "Раздел ""Регл. учет"": ";
	
	Если Запись.ОтражатьНачисленияВРеглУчете Тогда
		
		Если Запись.ВариантРеализацииТоваров.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ЗаголовокРаздела + "Укажите вариант реализации товаров.",Отказ);
		КонецЕсли;
			
		Если Запись.ВидСчетаУчетаУслугиДляОтраженияВРеглУчете.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ЗаголовокРаздела + "Укажите вид счета учета услуги.",Отказ);
		КонецЕсли;
		
		Если Запись.СпособОтраженияЛьгот.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ЗаголовокРаздела + "Укажите способ отражения льгот.",Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Страница "Штрихкод".
	//ЗаголовокРаздела = "Раздел ""Штрихкод"": ";
	//Если Запись.ВариантОпределенияФорматаШтрихкода.Пустая() Тогда
	//	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
	//		ЗаголовокРаздела + "Не выбран вариант определения формата штрихкода!", Отказ);
	//КонецЕсли;
	//
	//Если ПустаяСтрока(Запись.РазделительДробнойЧастиСуммы) Тогда
	//	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
	//		ЗаголовокРаздела + "Не выбран вариант разделения дробной части суммы!", Отказ);
	//	КонецЕсли;
	//	
	//Если Запись.ВидШтрихкода.Пустая() Тогда
	//	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
	//		ЗаголовокРаздела + "Не выбран вид штрихкода!", Отказ);
	//КонецЕсли;
	//
	//Если Запись.ВидШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
	//	
	//	Если Запись.ВариантОпределенияФорматаШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВариантыОпределенияФорматаШтрихкода.ПоУказаннымНастройкам") Тогда
	//		
	//		ТекстОшибки = НаличиеНезаполенныхСтрокФорматШтрихкода();
	//		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
	//			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ЗаголовокРаздела + ТекстОшибки,
	//									   Отказ);
	//		Иначе
	//			Если ИмеетсяВТаблицеКонтрольнаяСумма() И ПустаяСтрока(Запись.СхемаДляРасчетаКонтрольнойСуммы) Тогда
	//				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
	//					ЗаголовокРаздела + "Необходимо указать схему для расчета контрольной суммы!", Отказ);
	//			КонецЕсли;
	//			
	//			ОбязательныеПараметрыШтрихкода = Новый Структура();
	//			ОбязательныеПараметрыШтрихкода.Вставить("КодЛС");
	//			Для Каждого ТекПарам Из ОбязательныеПараметрыШтрихкода Цикл
	//				Если Найти(Запись.СоставШтрихкода, ТекПарам.Ключ) = 0 Тогда
	//					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
	//						ЗаголовокРаздела + "В формате штрихкода не указан параметр """ + ТекПарам.Ключ + """!", Отказ);
	//				КонецЕсли;
	//			КонецЦикла;
	//		КонецЕсли;
	//		
	//		Если Найти(Запись.СоставШтрихкода, "СуммаКОплате") <> 0 И Запись.ДлинаСуммыШтрихкода = 0 Тогда
	//			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ЗаголовокРаздела + "Необходимо указать длину суммы к оплате!", Отказ);
	//		КонецЕсли;
	//		
	//	Иначе
	//		
	//		Если Запись.ДлинаСуммыШтрихкода = 0 Тогда
	//			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ЗаголовокРаздела + "Необходимо указать длину суммы к оплате!", Отказ);
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	Если Запись.ДлинаИдентификатораШтрихкода = 0 Тогда
	//		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ЗаголовокРаздела + "Необходимо указать длину " + ?(Запись.ИдентификаторЛСШтрихкода, "идентификатора", "кода") + "!", Отказ);
	//	КонецЕсли;
	//	
	//	Если Запись.ВариантОпределенияФорматаШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВариантыОпределенияФорматаШтрихкода.ИзВнешнейОбработки")
	//		И Не ЗначениеЗаполнено(Запись.ВнешняяОбработкаШтрихкода) Тогда
	//		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбрана внешняя обработка штрихкода!", Отказ);
	//	КонецЕсли;
	//	
	//Иначе
	//	Если Запись.ВариантОпределенияФорматаШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВариантыОпределенияФорматаШтрихкода.ИзВнешнейОбработки")
	//		И Не ЗначениеЗаполнено(Запись.ВнешняяОбработкаQRкода) Тогда
	//		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбрана внешняя обработка QR-штрихкода!", Отказ);
	//	КонецЕсли;
	//КонецЕсли;
	
	// Страница "Регистрация оплаты".
	ЗаголовокРаздела = "Раздел ""Регистрация оплаты"": ";
	ТекстОшибки = НаличиеНезаполненныхСтрокПорядокУслугДляРаспределенияОплат();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ЗаголовокРаздела + ТекстОшибки, Отказ);
	Иначе
		Если Запись.РаспределятьАвансПропорциональноНачислениям И Запись.КоличествоПериодовНачисления = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				ЗаголовокРаздела + "Не указано количество месяцев начислений для расчета распределения аванса!", Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеПараметров()

// Устанавливает настройки учетной политики ТСЖ по умолчанию.
//
&НаСервере
Процедура УстановкаПараметровУчетнойПолитикиТСЖПоУмолчанию()
	
	// Страница "Общее".
	Запись.ЧислоВнесенияПлатежа                     = 10;
	Запись.УчитыватьПериодыСРазнымКолвомПроживающих = Истина;
	
	// Страница "Штрихкод".
	//Запись.ДлинаСуммыШтрихкода                = 7;
	//Запись.ВариантОпределенияФорматаШтрихкода = Перечисления.КВП_ВариантыОпределенияФорматаШтрихкода.Автоматически;
	//Запись.ВидШтрихкода                       = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный;
	//Запись.РазделительДробнойЧастиСуммы       = Элементы.РазделительДробнойЧастиСуммы.СписокВыбора[0];
	
	// Страница "Регистрация оплат".
	Запись.ВариантРаспределенияОплат = Перечисления.КВП_ВариантыРаспределенияОплат.ПоДолгамЗатемПоНачислениям;
	
	// Страница "Регл. учет".
	Запись.ОтражатьНачисленияВРеглУчете = Ложь;
	
	// Страница "Пени".
	Запись.НастройкаРасчетаПени = Справочники.УПЖКХ_НастройкиРасчетаПени.ОсновнаяНастройка;
	
	// Страница "Рассрочка платежей".
	Запись.ГодоваяПроцентнаяСтавкаРассрочка = 10;
	
	// Страница "Льготы".
	ТаблицаНастроекПредоставленияИРасчетаЛьгот.Загрузить(
		РегистрыСведений.УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.ПолучитьНастройкиПредоставленияИРасчетаЛьготПоУмолчанию());
	
КонецПроцедуры  //УстановкаПараметровУчетнойПолитикиТСЖПоУмолчанию()

// Выводит описание настройки расчета пени.
//
&НаКлиенте
Процедура ВывестиОписаниеНастройкиРасчетаПени()

	Описание = "";
	
	Если НЕ Запись.НастройкаРасчетаПени.Пустая() Тогда
		ИспользоватьПроцентнуюСтавку = 
			УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Запись.НастройкаРасчетаПени, "ИспользоватьПроцентнуюСтавку");
		Если ИспользоватьПроцентнуюСтавку Тогда
			//ПроцентнаяСтавкаПени = 
			//	УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Запись.НастройкаРасчетаПени, "ПроцентнаяСтавкаПени");
			//Описание = "Для расчета используется процентная ставка " + ПроцентнаяСтавкаПени + " %/день.";
			Описание = "Для расчета используется процентная ставка";
		Иначе
			//ДоляСтавкиРефинансированияЦБЧислитель = 
			//	УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Запись.НастройкаРасчетаПени,
			//															"ДоляСтавкиРефинансированияЦБЧислитель");
			//ДоляСтавкиРефинансированияЦБЗнаменатель = 
			//	УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Запись.НастройкаРасчетаПени,
			//															"ДоляСтавкиРефинансированияЦБЗнаменатель");
			//Описание = "Расчет производится исходя из доли ставки рефинансирования " 
			//             + ДоляСтавкиРефинансированияЦБЧислитель + "/" 
			//			 + ДоляСтавкиРефинансированияЦБЗнаменатель + ".";
			Описание = "Расчет производится исходя из доли ставки рефинансирования";
		КонецЕсли;
		Описание = Описание + ", размер которой определяется по графику, указанному в настройке расчета пени.";
		
		ВариантОплатыПени = 
			УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Запись.НастройкаРасчетаПени, "ВариантОплатыПени");
		Описание = Описание + "
		|Вариант оплаты пени: " + ВариантОплатыПени + ".";
	КонецЕсли;
	
	Элементы.НастройкаРасчетаПени.РасширеннаяПодсказка.Заголовок = Описание;

КонецПроцедуры // ВывестиОписаниеНастройкиРасчетаПени()

// Процедура заполняет надпись окончания действия учетной политики.
//
&НаКлиенте
Процедура ЗаполнитьНадписьОкончаниеДействия()
	
	ДатаОкончанияДействия = УПЖКХ_ОбщегоНазначенияСервер.НайтиДатуОкончанияДействияЖКХ(Запись.Период, Запись.Организация);
	Элементы.НадписьОкончанияДействия.Заголовок = Формат(ДатаОкончанияДействия, "ДФ=дд.ММ.гггг");
	
КонецПроцедуры

// Функция возвращает список услуг не подлежащих перерасчету.
//
&НаСервере
Функция ПрочитатьИзХранилищаСписокУслугДляПерерасчета()
	
	ЗаписьОбъект = РеквизитФормыВЗначение("Запись");
	СписокУслугДляПерерасчета = ЗаписьОбъект.УслугиНеПодлежащиеПерерасчету.Получить();
	Возврат СписокУслугДляПерерасчета;
	
КонецФункции

&НаСервере
// Процедура устанавливает значение реквизита формы "УСН" в зависимости от системы налогообложения организации.
Процедура ЗаполнитьЗначениеУСН()
	
	УСН   = Ложь;
	Отказ = Ложь;
	Если Не Запись.Организация.Пустая() Тогда
		Если УПЖКХ_ТиповыеМетодыСервер.Существует(Запись.Организация, Запись.Период, Истина) Тогда
			УСН = УПЖКХ_ТиповыеМетодыСервер.СистемаНалогообложения(Запись.Организация, Запись.Период) = 
					Перечисления.СистемыНалогообложения.Упрощенная;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Помещает данные во временное хранилище для передачи их в форму настройки.
//
// Возвращаемое значение:
//  Строка - адрес настроек в хранилище.
//
Функция ПоместитьНастройкиВХранилищеНаСервере()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Организация",                                                  Запись.Организация);
	СтруктураНастроек.Вставить("ТаблицаГруппОграниченияРаспределенияАвансовПриЗакрытииМесяца", ТаблицаГруппОграниченияРаспределенияАвансовПриЗакрытииМесяца.Выгрузить());
	СтруктураНастроек.Вставить("ТаблицаНастроекПредоставленияИРасчетаЛьгот",                   ТаблицаНастроекПредоставленияИРасчетаЛьгот.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилищеНаСервер()

&НаСервере
Процедура ПолучитьНастройкиИзХранилищаНаСервере(АдресВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	// Таблица настроек групп ограничения распределения авансов при закрытии месяца.
	врТаблицаГруппОграничения = Неопределено;
	Если СтруктураНастроек.Свойство("ТаблицаГруппОграниченияРаспределенияАвансовПриЗакрытииМесяца", врТаблицаГруппОграничения) Тогда
		Если ТипЗнч(врТаблицаГруппОграничения) = Тип("ТаблицаЗначений") Тогда
			ТаблицаГруппОграниченияРаспределенияАвансовПриЗакрытииМесяца.Загрузить(врТаблицаГруппОграничения);
		КонецЕсли;
	КонецЕсли;
	
	// Таблица настроек предоставления и расчета льгот.
	врТаблицаНастроекПредоставленияИРасчетаЛьгот = Неопределено;
	Если СтруктураНастроек.Свойство("ТаблицаНастроекПредоставленияИРасчетаЛьгот", врТаблицаНастроекПредоставленияИРасчетаЛьгот) Тогда
		Если ТипЗнч(врТаблицаНастроекПредоставленияИРасчетаЛьгот) = Тип("ТаблицаЗначений") Тогда
			ТаблицаНастроекПредоставленияИРасчетаЛьгот.Загрузить(врТаблицаНастроекПредоставленияИРасчетаЛьгот);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьНастройкиИзХранилищаНаСервере()

&НаСервере
// Процедура - обработчик предназначена для обновления таблицы с группами ограничений при распределении.
Функция ОбновитьГруппыОграниченияУслуг()
	
	ЗаписьОбъект = РеквизитФормыВЗначение("Запись");
	ВосстановленнаяТаблицаГрупп = ЗаписьОбъект.ГруппыУслугДляРаспределенияАвансовПриЗакрытииПериода.Получить();
	
	Возврат ВосстановленнаяТаблицаГрупп;
	
КонецФункции

&НаСервере
// Процедура - обработчик предназначена для получения таблицы настроек предоставления и расчета льгот.
Процедура ОбновитьНастройкиПредоставленияИРасчетаЛьгот()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Запись.Организация);
	Запрос.УстановитьПараметр("Период",      Запись.Период);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.ГруппаУслуг КАК ГруппаУслуг,
	|	УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.ВидЖильцовКоторымПредоставляютсяЛьготы КАК ВидЖильцовКоторымПредоставляютсяЛьготы,
	|	УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги КАК ТипЖильцовДляДеленияОбъемаНачисленнойУслуги,
	|	УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы КАК ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот КАК УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот
	|ГДЕ
	|	УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.Период = &Период
	|	И УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.Организация = &Организация";
	
	ЗначениеВДанныеФормы(Запрос.Выполнить().Выгрузить(), ТаблицаНастроекПредоставленияИРасчетаЛьгот);
	
КонецПроцедуры // ОбновитьНастройкиПредоставленияИРасчетаЛьгот()

&НаСервере
// Процедура - обработчик предназначена для записи в отдельный регистр настроек предоставления и расчета льгот.
Процедура ЗаписатьНастройкиПредоставленияИРасчетаЛьгот(Отказ)
	
	// Очищаем предыдущие записи настроек во всех случаях, кроме случая, 
	// когда учетная политика была создана копированием.
	// Делаем отдельной итерацией, для корректного удаления предыдущих настроек
	// в случае изменения даты учетной политики ЖКХ.
	Если НЕ ПризнакКопирования
	   И ТипЗнч(ПараметрыПриОткрытии) = Тип("Структура")
	   И ПараметрыПриОткрытии.Свойство("Период") И ПараметрыПриОткрытии.Свойство("Организация") Тогда
		РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.УдалитьНастройкиПредоставленияИРасчетаЛьгот(
				ПараметрыПриОткрытии.Период, 
				ПараметрыПриОткрытии.Организация);
	КонецЕсли;
	
	// Запишем новые настройки.
	РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.ЗаписатьНастройкиПредоставленияИРасчетаЛьгот(
				Отказ,
				ТаблицаНастроекПредоставленияИРасчетаЛьгот,
				Запись.Период, 
				Запись.Организация);
	
КонецПроцедуры // ЗаписатьНастройкиПредоставленияИРасчетаЛьгот()

&НаСервере
// Функция - проверяет наличие проведенных в текущем периоде документов "Расчет льгот".
//
Функция ПроверитьНаличиеСформированныхДокументовРасчетаЛьготВТекущемПериоде()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КВП_РасчетЛьгот.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КВП_РасчетЛьгот КАК КВП_РасчетЛьгот
	|ГДЕ
	|	КВП_РасчетЛьгот.Проведен
	|	И НЕ КВП_РасчетЛьгот.ПометкаУдаления
	|	И КВП_РасчетЛьгот.Организация = &Организация
	|	И КВП_РасчетЛьгот.Период = &Период";
	
	Запрос.УстановитьПараметр("Организация", Запись.Организация);
	Запрос.УстановитьПараметр("Период",      НачалоМесяца(ТекущаяДата()));
	
	ТаблицаПроверкиДокументовРасчетаЛьгот = Запрос.Выполнить().Выгрузить();
	
	Возврат НЕ ТаблицаПроверкиДокументовРасчетаЛьгот.Количество() = 0;
	
КонецФункции

&НаСервере
// Определяет заданы ли счета учета расчетов по пени за услуги капитального ремонта и некапитального ремонта.
Функция ПроверитьНаличиеСчетовУчетаРасчетовПоПени()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Организация КАК Организация,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.ВидВзаиморасчетов КАК ВидВзаиморасчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СчетаУчетаРасчетовПоПени КАК УПЖКХ_СчетаУчетаРасчетовПоПени
	|ГДЕ
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Организация = &Организация
	|	И НЕ УПЖКХ_СчетаУчетаРасчетовПоПени.ЭтоСчетаДляКапРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Организация КАК Организация,
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.ВидВзаиморасчетов КАК ВидВзаиморасчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СчетаУчетаРасчетовПоПени КАК УПЖКХ_СчетаУчетаРасчетовПоПени
	|ГДЕ
	|	УПЖКХ_СчетаУчетаРасчетовПоПени.Организация = &Организация
	|	И УПЖКХ_СчетаУчетаРасчетовПоПени.ЭтоСчетаДляКапРемонта";
	
	Запрос.УстановитьПараметр("Организация", Запись.Организация);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СчетаПоПениЗаданы          = РезультатЗапроса[0].Выбрать().Следующий();
	СчетаПоПениКапремонтЗаданы = РезультатЗапроса[1].Выбрать().Следующий();
	
	Возврат Новый Структура("СчетаПоПениЗаданы, СчетаПоПениКапремонтЗаданы", СчетаПоПениЗаданы, СчетаПоПениКапремонтЗаданы);
	
КонецФункции

&НаСервере
// Заполняет списки выбора начала и окончания периода приема показаний.
//
Процедура ЗаполнитьСпискиВыбораНачалаИОкончанияПериодаПриемаПоказаний()
	
	Элементы.ЧислоОкончанияПериодаПриемаПоказаний.СписокВыбора.Добавить(0, "Конец месяца");
	
	Для Сч = 1 по 31 Цикл
		Элементы.ЧислоНачалаПериодаПриемаПоказаний.СписокВыбора.Добавить(Сч, Строка(Сч));
		Элементы.ЧислоОкончанияПериодаПриемаПоказаний.СписокВыбора.Добавить(Сч, Строка(Сч));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

// Обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Если в параметрах передана начальная страница, установим ее.
	Если Параметры.Свойство("ИмяНачальнойСтраницы") И ТипЗнч(Параметры.ИмяНачальнойСтраницы) = Тип("Строка") Тогда
		
		// Основная панель.
		ЭлементОсновнойПанели = Элементы.Страницы;
		
		// Поиск страницы и ее установка в качестве текущей.
		СтраницаПанели = Элементы.Найти(Параметры.ИмяНачальнойСтраницы);
		Если ТипЗнч(СтраницаПанели) = Тип("ГруппаФормы") И СтраницаПанели.Родитель = ЭлементОсновнойПанели Тогда
			ЭлементОсновнойПанели.ТекущаяСтраница = СтраницаПанели;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ЗначениеКопирования.Пустой() Тогда
		ПризнакКопирования = Ложь;
	Иначе
		ПризнакКопирования = Истина;
	КонецЕсли;
	
	РегистрМенеджерЗаписи = РеквизитФормыВЗначение("Запись");
	Если Не РегистрМенеджерЗаписи.Выбран() Тогда
		// Проверка ведения однофирменности.
		Если Запись.Организация.Пустая() Тогда // если заполнена - значит это был переход по кнопке перейти.
			Запись.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
		КонецЕсли;
		
		УстановкаПараметровУчетнойПолитикиТСЖПоУмолчанию();
	КонецЕсли;
	
	// Сохраним параметры на момент открытия, для возможности
	// удаления предыдущих настроек, например, в случае изменения даты учетной политики ЖКХ.
	ПараметрыПриОткрытии = Новый Структура;
	ПараметрыПриОткрытии.Вставить("Период",      Запись.Период);
	ПараметрыПриОткрытии.Вставить("Организация", Запись.Организация);
	
	// Заполним настройки по расчету льгот.
	Если РегистрМенеджерЗаписи.Выбран() ИЛИ ПризнакКопирования Тогда
		ОбновитьНастройкиПредоставленияИРасчетаЛьгот();
	КонецЕсли;
	
	// Капремонт.
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Запись.Организация, Истина);
	
	ВосстановленнаяТаблицаГрупп = ОбновитьГруппыОграниченияУслуг();
	Если ТипЗнч(ВосстановленнаяТаблицаГрупп) = Тип("ТаблицаЗначений") Тогда
		ТаблицаГруппОграниченияРаспределенияАвансовПриЗакрытииМесяца.Загрузить(ВосстановленнаяТаблицаГрупп);
	КонецЕсли;
	
	ЗаполнитьЗначениеУСН();
	
	УстановитьВариантыРаспределенияОплат();
	
	ИспользоватьФункционалТСЖ = Константы.УПЖКХ_ИспользоватьФункционалТСЖ.Получить();
	
	СтруктураНаличиеСчетовПоПени = ПроверитьНаличиеСчетовУчетаРасчетовПоПени();
	
	Если Не СтруктураНаличиеСчетовПоПени.СчетаПоПениЗаданы Тогда
		Элементы.ОткрытьСчетаУчетаРасчетовПоПени.Заголовок = "Задать счета учета расчетов по пени";
	Иначе
		Элементы.ОткрытьСчетаУчетаРасчетовПоПени.Заголовок = "Счета учета расчетов по пени";
	КонецЕсли;
	
	Если Не СтруктураНаличиеСчетовПоПени.СчетаПоПениКапремонтЗаданы Тогда
		Элементы.ОткрытьСчетаУчетаРасчетовПоПениКапРемонт.Заголовок = "Задать счета учета расчетов по пеням за капитальный ремонт";
	Иначе
		Элементы.ОткрытьСчетаУчетаРасчетовПоПениКапРемонт.Заголовок = "Счета учета расчетов по пеням за капитальный ремонт";
	КонецЕсли;
	
	ПорядокУслугДляРаспределенияОплат.Загрузить(
		РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.ЗаполнитьПорядокУслугДляРаспределенияОплат());
	
	ЗаполнитьСпискиВыбораНачалаИОкончанияПериодаПриемаПоказаний();
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

// Обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.Организация.ТолькоПросмотр = НЕ УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьПризнакУчетаПоВсемОрганизациям();
	
	АвтоматическиОтражатьОплатуВКУДиР = НЕ Запись.ОбнулятьДоходыВсего
										И НЕ Запись.ОбнулятьДоходыПринимаемые
										И НЕ Запись.ОтражениеОплатыВРазрезеУслуг;
	АвтоматическиОтражатьВзносыВКУДиР = Запись.УчитыватьВступительныеВзносыТСЖ И Запись.ОбнулятьДоходыВзносыПринимаемые;
	
	Если Запись.ОтражениеОплатыВРазрезеУслуг Тогда
		ПереключательКУДиР = 1;
	Иначе 
		ПереключательКУДиР = 0;
	КонецЕсли;
		
	//ОбновитьТаблицуФорматаШтрихкода();
	
	//ПоместитьВКонецТаблицыКонтрольнуюСумму();
	
	// Восстанавливаем из хранилища список услуг.
	ОбновитьСписокУслугДляПерерасчета();
	
	// Восстанавливаем из хранилища список доп.реквизитов QR кода.
	//ОбновитьСписокДополнительныхРеквизитовQRКода();
	
	УстановитьВидимостьИДоступностьЭлементов();
	
	//СформироватьСписокФормКвитанции();
	
	//ОбновитьПредставлениеФормыКвитанции();
	
	ДопПараметры = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("УчетнаяПолитикаТСЖ_ДопПараметры");
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		ДопПараметры.Свойство("ЛицевойСчетШтрихкода",            ЛицевойСчетШтрихкода);
		ДопПараметры.Свойство("СуммаДляШтрихкода",               СуммаДляШтрихкода);
		
		//ОбновитьПримерШтрихкода();
	КонецЕсли;
	
	// Устанавливает видимость элемента формы "СхемаДляРасчетаКонтрольнойСуммы".
	//ВидимостьСхемаДляРасчетаКонтрольнойСуммы();
	
	ВывестиОписаниеВариантаРаспределенияОплат();
	
	ВывестиОписаниеНастройкиРасчетаПени();
	
	ОбновитьНастройкиПаспортногоСтола();
	
	ЗаполнитьНадписьОкончаниеДействия();
	
	мСпособОтраженияЛьгот = Запись.СпособОтраженияЛьгот;
	
КонецПроцедуры

// Обработчик события "ОбработкаОповещения" формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписаныНастройкиУчетаКапремонта"
		И Параметр = Запись.Организация Тогда
		
		УстановитьВидимостьИДоступностьЭлементов();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыСчетаУчетаПоПени" Тогда
		
		СтруктураНаличиеСчетовПоПени = ПроверитьНаличиеСчетовУчетаРасчетовПоПени();
		
		Если Не СтруктураНаличиеСчетовПоПени.СчетаПоПениЗаданы Тогда
			Элементы.ОткрытьСчетаУчетаРасчетовПоПени.Заголовок = "Задать счета учета расчетов по пени";
		Иначе
			Элементы.ОткрытьСчетаУчетаРасчетовПоПени.Заголовок = "Счета учета расчетов по пени";
		КонецЕсли;
		
		Если Не СтруктураНаличиеСчетовПоПени.СчетаПоПениКапремонтЗаданы Тогда
			Элементы.ОткрытьСчетаУчетаРасчетовПоПениКапРемонт.Заголовок = "Задать счета учета расчетов по пени за капитальный ремонт";
		Иначе
			Элементы.ОткрытьСчетаУчетаРасчетовПоПениКапРемонт.Заголовок = "Счета учета расчетов по пени за капитальный ремонт";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

// Обработчик события "ПередЗаписью" формы.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПроверитьЗаполнениеПараметров(Отказ);
	
	Если АвтоматическиОтражатьОплатуВКУДиР Тогда
		Запись.ОбнулятьДоходыВсего          = Ложь;
		Запись.ОбнулятьДоходыПринимаемые    = Ложь;
		Запись.ОтражениеОплатыВРазрезеУслуг = Ложь;
	КонецЕсли;
	
	Если Запись.ОтражениеОплатыВРазрезеУслуг Тогда
		Запись.ОбнулятьДоходыВсего          = Истина;
		Запись.ОбнулятьДоходыПринимаемые    = Истина;
	КонецЕсли;
	
	Если АвтоматическиОтражатьВзносыВКУДиР Тогда
		Запись.ОбнулятьДоходыВзносыПринимаемые = Истина;
	КонецЕсли;
	
	// Если способ отражения льгот изменили и он стал "Уменьшением начисления", то проверим
	// наличие остатоков на дату записи учетной политика, а также обороты за период,
	// начиная с даты записи учетной политики.
	Если НЕ мСпособОтраженияЛьгот = Запись.СпособОтраженияЛьгот
	   И Запись.СпособОтраженияЛьгот = 
			ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыОтраженияЛьгот.УменьшениемНачисления") Тогда
		СообщенияМассив = 
		ПроверитьНаличиеОтраженияЛьготПени(Новый Структура("Параметр, Период, Организация", "Льгота", Запись.Период, Запись.Организация));
		Если Не СообщенияМассив = Неопределено Тогда
			
			Для Каждого Сообщение Из СообщенияМассив Цикл
				ПоказатьПредупреждение(Неопределено, Сообщение);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	// Если способ отражения пени изменен (настройка "ОтражатьПениОтдельноОтНачислений" на вкладке 
	// "Регламентированный учет"), то проверим наличие остатков на дату записи учетной политики,
	// а также обороты за период, начиная с даты записи учетной политики.
	//Если НЕ мОтражатьПениОтдельноОтНачислений = Запись.ОтражатьПениОтдельноОтНачислений Тогда
	//	СообщенияМассив = 
	//	ПроверитьНаличиеОтраженияЛьготПени(Новый Структура("Параметр, Период, Организация", "Пени", Запись.Период, Запись.Организация));
	//	Если Не СообщенияМассив = Неопределено Тогда
	//		
	//		Для Каждого Сообщение Из СообщенияМассив Цикл
	//			ПоказатьПредупреждение(Неопределено, Сообщение);
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//КонецЕсли;
	
	// Страница "Отражение взаиморасчетов по капремонту".
	Если Запись.ВариантОтраженияВзаиморасчетовПоКапремонту = ПредопределенноеЗначение("Перечисление.КВП_ВидыСчетовРасчетовСКонтрагентамиПоКапремонту.ОтдельныеСчета")
	   И Запись.СчетУчетаВзаиморасчетовПоКапремонту.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнен счет учета взаиморасчетов по капремонту.",, "Запись.СчетУчетаВзаиморасчетовПоКапремонту",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПередЗаписьюНаСервере" формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.УслугиНеПодлежащиеПерерасчету = Новый ХранилищеЗначения(СписокУслуг.ВыгрузитьЗначения());
	
	ТекущийОбъект.ГруппыУслугДляРаспределенияАвансовПриЗакрытииПериода = Новый ХранилищеЗначения(ТаблицаГруппОграниченияРаспределенияАвансовПриЗакрытииМесяца.Выгрузить());
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
// Обработчик события "ПриЗаписиНаСервере" формы.
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьНастройкиПредоставленияИРасчетаЛьгот(Отказ);
	
КонецПроцедуры

// Обработчик события "ПослеЗаписиНаСервере" формы.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.ЗаписатьПорядокУслугДляРаспределенияОплат(
		ПорядокУслугДляРаспределенияОплат.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзменениеНастроекУчетнойПолитики");
	
КонецПроцедуры

// Обработчик события "ПередЗакрытием" формы.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ЛицевойСчетШтрихкода", ЛицевойСчетШтрихкода);
	ДопПараметры.Вставить("СуммаДляШтрихкода",    СуммаДляШтрихкода);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("УчетнаяПолитикаТСЖ_ДопПараметры",,ДопПараметры);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

// Обработчик события "ПриИзменении" поля ввода Период.
//
&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементов();
	
	ЗаполнитьНадписьОкончаниеДействия();
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля ввода Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьЗначениеУСН();
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

// Обработчик события "Очистка" поля "Организация".
//
&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	// Отменяем очистку поля по "Shift+F4".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ОрганизацияОчистка()

// Обработчик события "ПриИзменении" флажка "Отражать начисления в регл учете".
//
&НаКлиенте
Процедура ОтражатьНачисленияВРеглУчетеПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементов();
	
	// При снятии флажка "Отражать начисления в регл. учете" установим значения по умолчанию.
	Если Не Запись.ОтражатьНачисленияВРеглУчете Тогда
		
		Запись.ВидСчетаУчетаУслугиДляОтраженияВРеглУчете =
			ПредопределенноеЗначение("Перечисление.КВП_ВидыСчетовУчетаУслугДляОтраженияВРеглУчете.СчетУчетаДоходовОтРеализации");
		
		Запись.ВариантОтраженияВзаиморасчетовПоКапремонту =
			ПредопределенноеЗначение("Перечисление.КВП_ВидыСчетовРасчетовСКонтрагентамиПоКапремонту.СчетаВзаиморасчетовСКонтрагентами");
		
		Запись.ВариантРеализацииТоваров = 
			ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРеализацииТоваров.ОтИмениПосредника");
		
		Запись.ФормироватьТиповыеДокументыСОтрицательнымиСуммами = Ложь;
		
		Запись.СпособОтраженияЛьгот                = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыОтраженияЛьгот.ОтдельноОтНачислений");
		Запись.СчетаУчетаДляОтраженияПени          = ПредопределенноеЗначение("Перечисление.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.СчетаДляНачислений");
		Запись.СчетаУчетаДляОтраженияПениКапремонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.СчетаДляНачислений");
		Запись.СтавкаНДСДляОтраженияПени           = ПредопределенноеЗначение("Перечисление.УПЖКХ_СтавкиНДСДляПениПриОтраженииВРеглУчете.БезНДС");
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "Нажатие" кнопки "ДекорацияПерейтиНаСайтРазработчика".
//
&НаКлиенте
Процедура ДекорацияПерейтиНаСайтРазработчикаНажатие(Элемент)
	
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере(УПЖКХ_ИнформацияОРазработчикеИПрограмме.АдресГлавнойСтраницыСайтаКомпании("~XrswY"));
	
КонецПроцедуры // ДекорацияПерейтиНаСайтРазработчикаНажатие()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ "ОБЩЕЕ"

#Область ОбработчикиСобытийСтраницыОбщее

&НаКлиенте
// Обработчик события "ПриИзменении" флажка "Вариант ограничения периода ввода показаний".
//
Процедура ВариантОграниченияПериодаВводаПоказанийПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" флажка "ЧислоНачалаПериодаПриемаПоказаний".
//
Процедура ЧислоНачалаПериодаПриемаПоказанийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не Запись.ЧислоОкончанияПериодаПриемаПоказаний = 0 Тогда
		Если ВыбранноеЗначение > Запись.ЧислоОкончанияПериодаПриемаПоказаний Тогда
			СтандартнаяОбработка = Ложь;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Дата начала периода приема показаний счетчиков не может быть больше даты окончания периода.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" флажка "ЧислоОкончанияПериодаПриемаПоказаний".
//
Процедура ЧислоОкончанияПериодаПриемаПоказанийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ВыбранноеЗначение = 0 Тогда
		Если ВыбранноеЗначение < Запись.ЧислоНачалаПериодаПриемаПоказаний Тогда
			СтандартнаяОбработка = Ложь;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Дата окончания периода приема показаний счетчиков не может быть меньше даты начала периода.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" флажка "ЧислоНачалаПериодаПриемаПоказаний".
//
Процедура ЧислоНачалаПериодаПриемаПоказанийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" флажка "ЧислоОкончанияПериодаПриемаПоказаний".
//
Процедура ЧислоОкончанияПериодаПриемаПоказанийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ "РЕГИСТРАЦИЯ ОПЛАТ"

#Область ОбработчикиСобытийСтраницыРегистрацияОплат

// Выводит описание текущего варианта распределения оплат.
//
&НаКлиенте
Процедура ВывестиОписаниеВариантаРаспределенияОплат()
	
	Описание = "";
	Если Запись.ВариантРаспределенияОплат = 
			ПредопределенноеЗначение("Перечисление.КВП_ВариантыРаспределенияОплат.ПоНачислениямЗатемПоДолгам") Тогда
		Описание = "При указании суммы оплаты, либо нажатии на кнопку ""Распределить"" в документе ""Регистрация оплаты"" "
		         + "сумма оплаты разносится по услугам, по которым было произведено начисление в прошлом месяце "
				 + "в размере этого начисления. Оставшаяся часть суммы идет на погашение долгов.";
	ИначеЕсли Запись.ВариантРаспределенияОплат = 
				ПредопределенноеЗначение("Перечисление.КВП_ВариантыРаспределенияОплат.ПоДолгамЗатемПоНачислениям") Тогда
		Описание = "При указании суммы оплаты, либо нажатии на кнопку ""Распределить"" в документе ""Регистрация оплаты"" "
		         + "сумма оплаты распределяется на погашение долгов. "
				 + "Оставшаяся часть суммы идет на погашение начислений, произведенных в прошлом месяце.";
	ИначеЕсли Запись.ВариантРаспределенияОплат = 
				ПредопределенноеЗначение("Перечисление.КВП_ВариантыРаспределенияОплат.ПропорциональноПоДолгамИНачислениям") Тогда
		Описание = "При указании суммы оплаты, либо нажатии на кнопку ""Распределить"" в документе ""Регистрация оплаты"" "
		         + "сумма оплаты распределяется на погашение долгов, а также начислений, произведенных в прошлом месяце, "
				 + "пропорционально суммам долгов и начислений.";
	КонецЕсли;
	Описание = Описание + "
				|Если для распределения нет основания, сумма распределяется равномерно на все услуги, "
				"действующие на текущем лицевом счете.";
	
	Элементы.ВариантРаспределенияОплат.РасширеннаяПодсказка.Заголовок = Описание;
	
КонецПроцедуры // ВывестиОписаниеВариантаРаспределенияОплат()

// Обработчик события "ПриИзменении" поля ввода варианта распределения оплат.
//
&НаКлиенте
Процедура ВариантРаспределенияОплатПриИзменении(Элемент)
	
	ВывестиОписаниеВариантаРаспределенияОплат();
	
КонецПроцедуры

// Обработчик события "Очистка" поля "ВариантРаспределенияОплат".
//
&НаКлиенте
Процедура ВариантРаспределенияОплатОчистка(Элемент, СтандартнаяОбработка)
	
	// Отменяем очистку поля по "Shift+F4".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ВариантРаспределенияОплатОчистка()

// Обработчик события "ПриИзменении" поля выбора "РаспределятьАвансПропорциональноНачислениям".
//
&НаКлиенте
Процедура РаспределятьАвансПропорциональноНачислениямПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

// Устанавливает список выбора вариантов распределения оплаты.
//
// Параметры
//  нет.
//
&НаСервере
Процедура УстановитьВариантыРаспределенияОплат()
	
	Элементы.ВариантРаспределенияОплат.СписокВыбора.Очистить();
	Для каждого ТекЭлемент из Перечисления.КВП_ВариантыРаспределенияОплат Цикл
		Если ТекЭлемент = Перечисления.КВП_ВариантыРаспределенияОплат.ПоДолгамПолностью
		 ИЛИ ТекЭлемент = Перечисления.КВП_ВариантыРаспределенияОплат.ПоНачислениямПолностью Тогда
			Продолжить;
		КонецЕсли;
		Элементы.ВариантРаспределенияОплат.СписокВыбора.Добавить(ТекЭлемент);
	КонецЦикла;
	
КонецПроцедуры // УстановитьВариантыРаспределенияОплат()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ "ЛЬГОТЫ"

#Область ОбработчикиСобытийСтраницыЛьготы

// Процедура обработчик события "Нажатие" кнопки "НастройкаЛьготныхТарифов".
//
&НаКлиенте
Процедура НастройкаЛьготныхТарифов(Команда)
	
	ОткрытьФорму("РегистрСведений.КВП_УслугиДляРасчетаЛьготПоДругимТарифам.ФормаСписка",
					Новый Структура("Организация", Запись.Организация), ЭтаФорма);
	
КонецПроцедуры

// Процедура обработчик события "ПриИзменении" флажка "ИспользоватьЛьготныеТарифы".
//
&НаКлиенте
Процедура ИспользоватьЛьготныйТарифПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" ссылки "Задать настройки предоставления и расчета льгот".
Процедура ДекорацияЗадатьНастройкиПредоставленияИРасчетаЛьготНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",           Истина);
	ПараметрыФормы.Вставить("АдресНастроекВХранилищеДоРедактирования", ПоместитьНастройкиВХранилищеНаСервере());
	
	ОткрытьФорму("РегистрСведений.КВП_УчетнаяПолитикаТСЖ.Форма.ФормаНастройкиПредоставленияИРасчетаЛьгот", 
					ПараметрыФормы, 
					ЭтаФорма, , , ,
					Новый ОписаниеОповещения("КомандаПредоставленияИРасчетаЛьготЗавершениеИзменения", ЭтаФорма),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ДекорацияЗадатьНастройкиПредоставленияИРасчетаЛьготНажатие()

&НаКлиенте
// Обработчик завершения настройки предоставления и расчета льгот.
Процедура КомандаПредоставленияИРасчетаЛьготЗавершениеИзменения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		Модифицированность = Истина;
		ПолучитьНастройкиИзХранилищаНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры // КомандаПредоставленияИРасчетаЛьготЗавершениеИзменения()

&НаКлиенте
// Обработчик события "ПриИзменении" флажка "Не учитывать льготы во взаиморасчетах".
// 
Процедура НеУчитыватьЛьготыВоВзаиморасчетахПриИзменении(Элемент)
	
	Если ПроверитьНаличиеСформированныхДокументовРасчетаЛьготВТекущемПериоде() Тогда
		
		ТекущееЗначениеНастройки                 = НЕ Запись.НеУчитыватьЛьготыВоВзаиморасчетах;
		Запись.НеУчитыватьЛьготыВоВзаиморасчетах = ТекущееЗначениеНастройки;
		Оповещение                               = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОбИзмененииНастройкиНеУчитыватьЛьготыВоВзаиморасчетах", ЭтаФорма);
		ТекстДиалога                             = "";
		
		Если ТекущееЗначениеНастройки Тогда
			ТекстДиалога = "Внимание! Изменение настройки ""Не учитывать льготы во взаиморасчетах"" не повлияет на проводки, сформированные имеющимися документами ""Расчет льгот"". Все суммы льгот, не учтенные ранее во взаиморасчетах, не будут в них включены. Для того, чтобы имеющиеся льготы были учтены во взаиморасчетах, необходимо перепровести соответствующие документы ""Расчет льгот"". Продолжить изменение настройки?";
		Иначе
			ТекстДиалога = "Внимание! Изменение настройки ""Не учитывать льготы во взаиморасчетах"" не повлияет на проводки, сформированные имеющимися документами ""Расчет льгот"". Все суммы льгот, учтенные ранее во взаиморасчетах, не будут из них исключены. Для того, чтобы имеющиеся льготы были исключены из взаиморасчетов, необходимо перепровести соответствующие документы ""Расчет льгот"". Продолжить изменение настройки?";
		КонецЕсли;
		
		ПоказатьВопрос(Оповещение, ТекстДиалога, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик ответа на вопрос об изменении флага "Не учитывать льготы во взаиморасчетах".
//
Процедура ОбработатьОтветНаВопросОбИзмененииНастройкиНеУчитыватьЛьготыВоВзаиморасчетах(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Запись.НеУчитыватьЛьготыВоВзаиморасчетах = НЕ Запись.НеУчитыватьЛьготыВоВзаиморасчетах;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ "ПЕРЕРАСЧЕТ"

#Область ОбработчикиСобытийСтраницыПерерасчет

// Обновляет список услуг подлежащих перерасчету.
//
&НаКлиенте
Процедура ОбновитьСписокУслугДляПерерасчета()
	
	ВосстановленныйМассивУслуг = ПрочитатьИзХранилищаСписокУслугДляПерерасчета();
	
	Если Не ВосстановленныйМассивУслуг = Неопределено Тогда
		СписокУслуг.ЗагрузитьЗначения(ВосстановленныйМассивУслуг);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик события "ПередНачаломДобавления" списка "СписокУслуг".
//
&НаКлиенте
Процедура СписокУслугПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ОтображатьСписком", Истина);
	СтруктураПараметры.Вставить("ЭтоГруппа", Ложь);
	
	Отказ = Истина;
	
	ОткрытьФорму("Справочник.КВП_Услуги.ФормаВыбора",
				 СтруктураПараметры,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьРезультатВыбораУслугиСписокУслугПередНачаломДобавления", ЭтаФорма),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // СписокУслугПередНачаломДобавления()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ "ПЕНИ"

#Область ОбработчикиСобытийСтраницыПени

// Обработчик события "ПриИзменении" поля "Настройка расчета пени".
//
&НаКлиенте
Процедура НастройкаРасчетаПениПриИзменении(Элемент)
	
	ВывестиОписаниеНастройкиРасчетаПени();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ "ПАСПОРТНЫЙ СТОЛ"

#Область ОбработчикиСобытийСтраницыПаспортныйСтол

// Формирует правильное отображение ответственног лица.
//
&НаКлиенте
Процедура ОбновитьНастройкиПаспортногоСтола()

	Тип = ТипЗнч(Запись.ОтветственноеЛицоПаспортногоСтола);
	
	Если Тип = Тип("ПеречислениеСсылка.ОтветственныеЛицаОрганизаций") Тогда
		
		ПереключательОтветственноеЛицо = 0;
		
		Элементы.ОтветственноеЛицоПаспортногоСтола.Видимость = Истина;
		Элементы.ДекорацияОтвЛицо.Видимость = Ложь;
		
	ИначеЕсли Тип = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ПереключательОтветственноеЛицо = 1;
		
		Элементы.ОтветственноеЛицоПаспортногоСтола.Видимость = Истина;
		Элементы.ДекорацияОтвЛицо.Видимость = Истина;
		
	Иначе
		
		ПереключательОтветственноеЛицо = 2;
		
		Элементы.ОтветственноеЛицоПаспортногоСтола.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // НастроитьОтветственноеЛицоПаспортногоСтола()

// Обработчик события "ПриИзменении" переключателя "ОтветственноеЛицо".
//
&НаКлиенте
Процедура ПереключательОтветственноеЛицоПриИзменении(Элемент)
	
	Если ПереключательОтветственноеЛицо = 0 Тогда
		
		Запись.ОтветственноеЛицоПаспортногоСтола = 
			ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.ПустаяСсылка");
		
	ИначеЕсли ПереключательОтветственноеЛицо = 1 Тогда
		
		Запись.ОтветственноеЛицоПаспортногоСтола = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		
	Иначе
		
		Запись.ОтветственноеЛицоПаспортногоСтола = Неопределено;
		
	КонецЕсли;
	
	ОбновитьНастройкиПаспортногоСтола();
	
КонецПроцедуры

// Процедура обработчик события "НачалоВыбора" поля ввода "ОтветственноеЛицоПаспортногоСтола".
//
&НаКлиенте
Процедура ОтветственноеЛицоПаспортногоСтолаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Тип = ТипЗнч(Запись.ОтветственноеЛицоПаспортногоСтола);
	
	Если Тип = Тип("СправочникСсылка.Сотрудники") Тогда	
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("РежимВыбора", Истина);
		СтруктураПараметры.Вставить("Отбор", Новый Структура("ТекущаяОрганизация", Запись.Организация));
		
		ОткрытьФорму("Справочник.Сотрудники.Форма.ФормаСписка",
					 СтруктураПараметры,
					 ЭтаФорма,,,,
					 Новый ОписаниеОповещения("ОбработатьРезультатВыбораСотрудника", ЭтаФорма),
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры // ОтветственноеЛицоПаспортногоСтолаНачалоВыбора()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ "УСН"

#Область ОбработчикиСобытийСтраницыУСН

// Процедура обработчик события "ПриИзменении" флажка "АвтоматическиОтражатьОплатуВКУДиР".
//
&НаКлиенте
Процедура АвтоматическиОтражатьОплатуВКУДиРПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

// Процедура обработчик события "ОбработкаВыбора" поля ввода "ДоходыВсего".
//
&НаКлиенте
Процедура ДоходыВсегоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		Если ВыбранноеЗначение Тогда
			Запись.ОбнулятьДоходыПринимаемые = Истина;
		КонецЕсли;
		
		Элементы.ДоходыПринимаемые.Доступность = НЕ ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик события "ПриИзменении" переключателя "ПереключательКУДиРСводно".
//
&НаКлиенте
Процедура ПереключательКУДиРСводноПриИзменении(Элемент)
	
	Запись.ОтражениеОплатыВРазрезеУслуг = Ложь;
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

// Процедура обработчик события "ПриИзменении" переключателя "ПереключательКУДиРВРазрезеУслуг".
//
&НаКлиенте
Процедура ПереключательКУДиРВРазрезеУслугПриИзменении(Элемент)
	
	Запись.ОтражениеОплатыВРазрезеУслуг = Истина;
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

// Обработчик нажатия кнопки настройки оплаты в КУДиР.
//
&НаКлиенте
Процедура НастройкаОплатыВКУДиР(Команда)
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_НастройкиОтраженияОплатыВКУДиР.ФормаСписка",
					Новый Структура("Организация", Запись.Организация), ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ "ТСЖ"

#Область ОбработчикиСобытийСтраницыТСЖ

&НаКлиенте
// Процедура обработчик события "ПриИзменении" флажка "УчитыватьВступительныеВзносыТСЖ".
Процедура УчитыватьВступительныеВзносыТСЖПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементов();

КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриИзменении" флажка "ОтражатьВзносыВКУДиР".
Процедура ОтражатьВзносыВКУДиРПриИзменении(Элемент)
	
	Если АвтоматическиОтражатьВзносыВКУДиР Тогда
		Запись.ОбнулятьДоходыВзносыПринимаемые = Истина;
	Иначе
		Запись.ОбнулятьДоходыВзносыПринимаемые = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ "ЗАКРЫТИЕ ПЕРИОДА"

#Область ОбработчикиСобытийСтраницыЗакрытиеПериода

// Процедура обработчик события "ПриИзменении" переключателя "РазрешитьПереносАвансовНаДолгиПоВсемУслугам".
//
&НаКлиенте
Процедура РазрешитьПереносАвансовНаДолгиПоВсемУслугамПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик команды "НастройкаСпискаУслугИсключений".
Процедура НастройкаСпискаУслугИсключений(Команда)
	
	ОткрытьФорму("РегистрСведений.КВП_УслугиИсключенияДляНачисленияПени.ФормаСписка",
				Новый Структура("Организация", Запись.Организация), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриИзменении" поля флажка "ИспользоватьСписокУслугИсключений".
//
Процедура ИспользоватьСписокУслугИсключенийПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик команды "ЗадатьСчетаУчетаРасчетовПоПени".
//
Процедура ОткрытьСчетаУчетаРасчетовПоПени(Команда)
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_СчетаУчетаРасчетовПоПени.Форма.ФормаСписка", Новый Структура("Организация, ЭтоСчетаДляКапРемонта", Запись.Организация, Ложь), ЭтаФорма, "Счета по пени");
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик команды "ЗадатьСчетаУчетаРасчетовПоПениКапРемонт".
Процедура ОткрытьСчетаУчетаРасчетовПоПениКапРемонт(Команда)
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_СчетаУчетаРасчетовПоПени.Форма.ФормаСписка", Новый Структура("Организация, ЭтоСчетаДляКапРемонта", Запись.Организация, Истина), ЭтаФорма, "Счета по пени капремонт");
	
КонецПроцедуры

&НаСервере
// Процедура проверяет наличие отражения льгот или пени в регламентированном учете.
//
// Параметры:
//  Параметр - Тип Строка - наименование объекта отражения (возможные значения: "Льгота", "Пени").
//
Функция ПроверитьНаличиеОтраженияЛьготПени(Параметры)
	
	Возврат РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.ПроверитьНаличиеОтраженияЛьготПени(Параметры);
	
КонецФункции //ПроверитьНаличиеОтраженияЛьготПени()

&НаКлиенте
// Обработчик результата выбора услуги, вызванной в процедуре "СписокУслугПередНачаломДобавления()".
Процедура ОбработатьРезультатВыбораУслугиСписокУслугПередНачаломДобавления(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		
		Если Не СписокУслуг.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Услуга """ + ВыбранноеЗначение + """ уже выбрана!");
		Иначе
			СписокУслуг.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораУслугиСписокУслугПередНачаломДобавления()

&НаКлиенте
// Обработчик результата выбора сотрудника, вызванного в процедуре "ОтветственноеЛицоПаспортногоСтолаНачалоВыбора()".
Процедура ОбработатьРезультатВыбораСотрудника(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Запись.ОтветственноеЛицоПаспортногоСтола = Результат;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораСотрудника()

&НаКлиенте
Процедура ДекорацияЗадатьГруппыУслугДляОграниченияРаспределенияАвансовНажатие(Элемент)
	
	АдресНастроекВХранилищеДоРедактирования = ПоместитьНастройкиВХранилищеНаСервере();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("РегистрСведений.КВП_УчетнаяПолитикаТСЖ.Форма.ФормаНастройкиГруппДляРаспределенияАвансовПриЗакрытииПериода", Новый Структура("АдресНастроекВХранилищеДоРедактирования", АдресНастроекВХранилищеДоРедактирования), ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры // ДекорацияЗадатьГруппыУслугДляОграниченияРаспределенияАвансовНажатие()

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилищаНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры // КомандаНастройкаЗавершение()

&НаКлиенте
// Процедура обработчик события "ПриИзменении" поля "СчетаУчетаДляОтраженияПени".
//
Процедура СчетаУчетаДляОтраженияПениПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриИзменении" поля флажка "СчетаУчетаДляОтраженияПениКапремонт".
Процедура СчетаУчетаДляОтраженияПениКапремонтПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "ПриИзменении" поля "СтавкаНДСДляОтраженияПени".
//
Процедура СтавкаНДСДляОтраженияПениПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ "ОТРАЖЕНИЕ КАПРЕМОНТА"

#Область ОбработчикиСобытийСтраницыОтражениеКапремонта

&НаКлиенте
// Обрыботчик события "ПриИзменении" поля "ОтражатьВзаиморасчетыПоКапремонтуПоЗаданномуСчетуУчета".
//
Процедура ОтражатьВзаиморасчетыПоКапремонтуПоЗаданномуСчетуУчетаПриИзменении(Элемент)
	
	Если Запись.ВариантОтраженияВзаиморасчетовПоКапремонту = ПредопределенноеЗначение("Перечисление.КВП_ВидыСчетовРасчетовСКонтрагентамиПоКапремонту.СчетаВзаиморасчетовСКонтрагентами") Тогда
		Запись.СчетУчетаВзаиморасчетовПоКапремонту = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
	КонецЕсли;
	
	Элементы.СчетУчетаВзаиморасчетовПоКапремонту.Доступность =
		(Запись.ВариантОтраженияВзаиморасчетовПоКапремонту = ПредопределенноеЗначение("Перечисление.КВП_ВидыСчетовРасчетовСКонтрагентамиПоКапремонту.ОтдельныеСчета"));
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" поля "НадписьОткрытьСчетаУчетаРасчетовСКонтрагентами".
Процедура НадписьОткрытьСчетаУчетаРасчетовСКонтрагентамиНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.СчетаУчетаРасчетовСКонтрагентами.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" поля "НадписьОткрытьСчетаУчетаНоменклатурыНажатие".
Процедура НадписьОткрытьСчетаУчетаНоменклатурыНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.СчетаУчетаНоменклатуры.ФормаСписка");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти
