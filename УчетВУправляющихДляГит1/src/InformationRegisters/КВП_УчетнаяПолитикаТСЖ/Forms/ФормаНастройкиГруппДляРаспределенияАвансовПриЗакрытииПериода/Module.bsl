
//////////////////////////////////////////////////////////////////////////////////
/// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ФОРМОЙ

#Область ПроцедурыИФункцииУправленияФормой

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.ГруппаНастроекКапремонта.Видимость = Форма.мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет;
	
КонецПроцедуры // УстановитьВидимостьЭлементовФормы()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////
/// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаСервере
// Процедура предназначена для обновления сведений в таблице информации о группах ограничения.
//
Процедура ОбновитьТаблицуИнформацииОГруппахОграничения()
	
	врТаблица = СоставГруппУслугДляРаспределенияАвансов.Выгрузить();
	врТаблица.Свернуть("ГруппаОграничения", "КоличествоУслуг");
	
	ГруппыУслугДляРаспределенияАвансов.Загрузить(врТаблица);
	
	ГруппыУслугДляРаспределенияАвансов.Сортировать("ГруппаОграничения");
	
КонецПроцедуры // ОбновитьТаблицуИнформацииОГруппахОграничения()

&НаСервере
// Предназначена для добавления колонки "Услуга" во временную таблицу "врТаблицаГруппОграничения".
//
Процедура ДобавитьКолонкуКоличестваУслугИЗаполнитьЗначения(врТаблицаГруппОграничения)
	
	врТаблицаГруппОграничения.Колонки.Добавить("КоличествоУслуг", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(3,0));
	врТаблицаГруппОграничения.ЗаполнитьЗначения(1, "КоличествоУслуг");
	
КонецПроцедуры // ДобавитьКолонкуКоличестваУслугИЗаполнитьЗначения()

&НаСервере
// Процедура предназначена для добавления в таблицу групп ограничения строк с услугами по капремонту.
//
Процедура ДополнитьТаблицуОграниченияРаспределенияАвансаСтрокамиПоКапремонту(СписокУслуг)
	
	Для Каждого ТекУслугаКР Из СписокУслуг Цикл
		НоваяСтрока = СоставГруппУслугДляРаспределенияАвансов.Добавить();
		НоваяСтрока.ГруппаОграничения = мГруппаУслугПоКапитальномуРемонту;
		НоваяСтрока.Услуга            = ТекУслугаКР.Значение;
		НоваяСтрока.КоличествоУслуг   = 1;
	КонецЦикла;
	
КонецПроцедуры // ДополнитьТаблицуОграниченияРаспределенияАвансаСтрокамиПоКапремонту()

&НаСервере
// Процедура предназначена для очистки в таблице групп ограничения распределения аванса строк с группой "Капитальный ремонт".
//
Процедура ОчиститьВТаблицеОграниченияРаспределенияАвансаСтрокамиПоКапремонту()
	
	СтрокиПоКапремонту = СоставГруппУслугДляРаспределенияАвансов.НайтиСтроки(Новый Структура("ГруппаОграничения", мГруппаУслугПоКапитальномуРемонту));
	Для каждого ТекСтрока Из СтрокиПоКапремонту Цикл
		СоставГруппУслугДляРаспределенияАвансов.Удалить(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры // ОчиститьВТаблицеОграниченияРаспределенияАвансаСтрокамиПоКапремонту()

&НаСервереБезКонтекста
// Процедура вызывает редактирование пометки удаления настройки по капремонту на сервере.
//
Функция ПолучитьЭлементНастройкиКапремонтаПоОрганизацииНаСервере(Организация)
	
	Возврат Справочники.УПЖКХ_НастройкиУчетаКапремонта.ПолучитьЭлементСправочникаПоОрганизации(Организация);
	
КонецФункции // ПолучитьЭлементНастройкиКапремонтаПоОрганизацииНаСервере()

&НаСервереБезКонтекста
// Процедура вызывает редактирование пометки удаления настройки по капремонту на сервере.
//
Процедура РедактироватьПометкуНаУдалениеНастройкиКапремонтаНаСервере(НастройкаКапремонта)
	
	Справочники.УПЖКХ_НастройкиУчетаКапремонта.РедактироватьПометкуНаУдалениеПоСсылке(НастройкаКапремонта);
	
КонецПроцедуры // РедактироватьПометкуНаУдалениеНастройкиКапремонтаНаСервере()

&НаСервере
// Предназначена для помещения установленных настроек во временное хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураПараметров = Новый Структура;
	
	ОчиститьВТаблицеОграниченияРаспределенияАвансаСтрокамиПоКапремонту();
	
	врТаблица = СоставГруппУслугДляРаспределенияАвансов.Выгрузить(, "ГруппаОграничения, Услуга");
	
	врТаблица.Свернуть("ГруппаОграничения, Услуга");
	
	СтруктураПараметров.Вставить("ТаблицаГруппОграниченияРаспределенияАвансовПриЗакрытииМесяца", врТаблица.Скопировать());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////
/// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Предопределенная группа услуг по капремонту.
	мГруппаУслугПоКапитальномуРемонту = "Капитальный ремонт";
	
	// Во входной структуре должны содержаться следующие параметры:
	// 1. Организация;
	// 2. Таблица групп ограничений с услугами;
	// 3. Признак ведения раздельного учета по услугам капитального ремонта.
	
	Если Параметры.Свойство("АдресНастроекВХранилищеДоРедактирования")
	 И НЕ Параметры.АдресНастроекВХранилищеДоРедактирования = Неопределено Тогда
		
		СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилищеДоРедактирования);
		
		ВременнаяПеременная = Неопределено;
		СтруктураПараметров.Свойство("ТаблицаГруппОграниченияРаспределенияАвансовПриЗакрытииМесяца", ВременнаяПеременная);
		Если НЕ ВременнаяПеременная = Неопределено Тогда
			ДобавитьКолонкуКоличестваУслугИЗаполнитьЗначения(ВременнаяПеременная);
			СоставГруппУслугДляРаспределенияАвансов.Загрузить(ВременнаяПеременная);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("Организация", Организация);
		
	КонецЕсли;
	
	// Заполним параметры учета по капремонту.
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
	Если мСтруктураНастроекКапРемонта.ЗапретитьВзаимозачетАвансовИДолгов Тогда
		ДополнитьТаблицуОграниченияРаспределенияАвансаСтрокамиПоКапремонту(мСтруктураНастроекКапРемонта.СписокУслуг);
	КонецЕсли;
	
	// Обновить таблицу информации о группах ограничения и количестве различных услуг.
	СоставГруппУслугДляРаспределенияАвансов.Сортировать("ГруппаОграничения");
	
	// Обновим таблицу сводной информации о группах.
	ОбновитьТаблицуИнформацииОГруппахОграничения();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	// Установим свойства предопределенной кнопки командной панели, если она доступна.
	Попытка
		Элементы.ОсновнаяКоманднаяПанель.ПодчиненныеЭлементы.СоставГруппУслугДляРаспределенияАвансовСкопировать.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Элементы.ОсновнаяКоманднаяПанель.ПодчиненныеЭлементы.СоставГруппУслугДляРаспределенияАвансовСкопировать.Заголовок = "Скопировать";
	Исключение
	КонецПопытки;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписаныНастройкиУчетаКапремонта"
		И Параметр = Организация Тогда
		
		мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
		
		ОчиститьВТаблицеОграниченияРаспределенияАвансаСтрокамиПоКапремонту();
		Если мСтруктураНастроекКапРемонта.ЗапретитьВзаимозачетАвансовИДолгов Тогда
			ДополнитьТаблицуОграниченияРаспределенияАвансаСтрокамиПоКапремонту(мСтруктураНастроекКапРемонта.СписокУслуг);
			СоставГруппУслугДляРаспределенияАвансов.Сортировать("ГруппаОграничения");
			ОбновитьТаблицуИнформацииОГруппахОграничения();
		КонецЕсли;
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
// Процедура - обработчик события "Нажатие" кнопки "Сохранить и закрыть".
Процедура СохранитьИЗакрыть(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	Закрыть(АдресНастроекВХранилище);
	
КонецПроцедуры // СохранитьИЗакрыть()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////
/// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "СоставГруппУслугДляРаспределенияАвансов".
//
Процедура СоставГруппУслугДляРаспределенияАвансовПередУдалением(Элемент, Отказ)
	
	// 1. Проверить на то, что в удаляемой строке значение не равно "Капитальный ремонт".
	// Если значение равно "Капитальный ремонт", то НЕ удаляем строку.
	Если Не Элемент.ТекущиеДанные = Неопределено
	   И НРег(Элемент.ТекущиеДанные.ГруппаОграничения) = НРег(мГруппаУслугПоКапитальномуРемонту) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Состав группы услуг ""Капитальный ремонт"" недоступен для редактирования!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // СоставГруппУслугДляРаспределенияАвансовПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПослеУдаления" таблицы "СоставГруппУслугДляРаспределенияАвансов".
//
Процедура СоставГруппУслугДляРаспределенияАвансовПослеУдаления(Элемент)
	
	ОбновитьТаблицуИнформацииОГруппахОграничения();
	
КонецПроцедуры // СоставГруппУслугДляРаспределенияАвансовПослеУдаления()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "СоставГруппУслугДляРаспределенияАвансов".
//
Процедура СоставГруппУслугДляРаспределенияАвансовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование
	   И Не Элемент.ТекущиеДанные = Неопределено
	   И НРег(Элемент.ТекущиеДанные.ГруппаОграничения) = НРег(мГруппаУслугПоКапитальномуРемонту) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Состав группы услуг ""Капитальный ремонт"" недоступен для редактирования!", Отказ);
	КонецЕсли;
	
КонецПроцедуры // СоставГруппУслугДляРаспределенияАвансовПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" таблицы "СоставГруппУслугДляРаспределенияАвансов".
//
Процедура СоставГруппУслугДляРаспределенияАвансовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование
	   И Не Элемент.ТекущиеДанные = Неопределено Тогда
		Элемент.ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры // СоставГруппУслугДляРаспределенияАвансовПриНачалеРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "СоставГруппУслугДляРаспределенияАвансов".
//
Процедура СоставГруппУслугДляРаспределенияАвансовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НЕ ОтменаРедактирования
	   И НЕ ТекущиеДанные = Неопределено Тогда
		
		НаименованиеГруппыОграничения = ТекущиеДанные.ГруппаОграничения;
		Если ПустаяСтрока(НаименованиеГруппыОграничения) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Наименование группы услуг не может быть пустым!", Отказ);
		ИначеЕсли НРег(НаименованиеГруппыОграничения) = НРег(мГруппаУслугПоКапитальномуРемонту) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В качестве группы услуг нельзя указывать группу ""Капитальный ремонт""."
											+ "Состав группы услуг ""Капитальный ремонт"" задается в ""Настройках учета по услугам капремонта"".", Отказ);
		КонецЕсли;
		
		Если ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана услуга, входящая в состав группы!", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СоставГруппУслугДляРаспределенияАвансовПередОкончаниемРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "СоставГруппУслугДляРаспределенияАвансов".
//
Процедура СоставГруппУслугДляРаспределенияАвансовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НЕ ОтменаРедактирования
	   И НЕ ТекущиеДанные = Неопределено Тогда
		
		// Если строка новая, то в поле "КоличествоУслуг" ставим значение "1".
		Если НЕ ПустаяСтрока(ТекущиеДанные.ГруппаОграничения)
		   И НЕ ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
			ТекущиеДанные.КоличествоУслуг = 1;
		Иначе
			ТекущиеДанные.КоличествоУслуг = 0;
		КонецЕсли;
		
		СоставГруппУслугДляРаспределенияАвансов.Сортировать("ГруппаОграничения");
		
		ОбновитьТаблицуИнформацииОГруппахОграничения();
		
	КонецЕсли;
	
КонецПроцедуры // СоставГруппУслугДляРаспределенияАвансовПриОкончанииРедактирования()

&НаКлиенте
// Процедура - обработчик события "ОбработкаНавигационнойСсылки" декорации "ДекорацияНастройкиУчетаПоКР".
//
Процедура ДекорацияНастройкиУчетаПоКРОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СсылкаНаЭлемент = ПолучитьЭлементНастройкиКапремонтаПоОрганизацииНаСервере(Организация);
	Если НЕ мСтруктураНастроекКапРемонта.НастройкиОпределены Или СсылкаНаЭлемент = Неопределено Тогда
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.ФормаОбъекта", Новый Структура("Владелец", Организация), ЭтаФорма);
	Иначе
		Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(СсылкаНаЭлемент, "ПометкаУдаления") Тогда
			ТекстВопроса = "Для текущей организации действие настройки учета по капитальному ремонту отменено."
			+ Символы.ПС + "Перед открытием формы элемента настройки необходимо включить. Продолжить?";
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОтветаНаВопросОВключенииУчетаПоКапремонтуДляОрганизации", ЭтаФорма, СсылкаНаЭлемент), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Иначе
			ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.ФормаОбъекта", Новый Структура("Ключ", СсылкаНаЭлемент), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДекорацияНастройкиУчетаПоКРОбработкаНавигационнойСсылки()

&НаКлиенте
// Процедура - обработчик вопроса о включении учета по кап. ремонту при настройке учета
// по кап. ремонту, помеченной на удаление.
// 
Процедура ОбработчикОтветаНаВопросОВключенииУчетаПоКапремонтуДляОрганизации(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		РедактироватьПометкуНаУдалениеНастройкиКапремонтаНаСервере(Параметры);
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.ФормаОбъекта", Новый Структура("Ключ", Параметры), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти