
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Функция заполняет порядок услуг для распределения оплат.
Функция ЗаполнитьПорядокУслугДляРаспределенияОплат() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокУслуг.ВидУслуги,
	|	ПорядокУслуг.Порядок
	|ИЗ
	|	РегистрСведений.КВП_ПорядокУслугДляРаспределенияОплат КАК ПорядокУслуг";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура записывает порядок услуг для распределения оплат.
Процедура ЗаписатьПорядокУслугДляРаспределенияОплат(СписокУслуг) Экспорт
	
	НаборЗаписей = РегистрыСведений.КВП_ПорядокУслугДляРаспределенияОплат.СоздатьНаборЗаписей();
	
	Индекс = 0;
	Для Каждого Услуга Из СписокУслуг Цикл
		
		Индекс = Индекс + 1;
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.ВидУслуги = Услуга.ВидУслуги;
		СтрокаНабора.Порядок = Индекс;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Процедура проверяет наличие отражения льгот/пени в регламентированном учете.
Функция ПроверитьНаличиеОтраженияЛьготПени(ПараметрыЗапроса) Экспорт
	
	МассивСообщений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КВП_НачислениеДляОтраженияВРеглУчетеОстаткиИОбороты.СуммаНачальныйОстаток > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеобходимоСообщениеОстаток,
	|	ВЫБОР
	|		КОГДА КВП_НачислениеДляОтраженияВРеглУчетеОстаткиИОбороты.СуммаОборот > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеобходимоСообщениеОборот
	|ИЗ
	|	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете.ОстаткиИОбороты(
	|			&ДатаНач,
	|			,
	|			,
	|			,
	|			Организация = &Организация
	|				И Это" + ПараметрыЗапроса.Параметр + ") КАК КВП_НачислениеДляОтраженияВРеглУчетеОстаткиИОбороты";
	
	Запрос.УстановитьПараметр("ДатаНач",     ПараметрыЗапроса.Период);
	Запрос.УстановитьПараметр("Организация", ПараметрыЗапроса.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.НеобходимоСообщениеОборот Тогда
			МассивСообщений.Добавить("Необходимо перепровести документы """
									 + ?(ПараметрыЗапроса.Параметр = "Льгота", "Расчет льгот", "Начисление пени") + """ и "
									 + """Отражение начислений в регламентированном учете"" начиная с даты "
									 + Формат(ПараметрыЗапроса.Период, "ДЛФ=ДД")); 
		КонецЕсли;
		
		Если Выборка.НеобходимоСообщениеОстаток Тогда
			МассивСообщений.Добавить("Необходимо отразить начисления и "
											 + ?(ПараметрыЗапроса.Параметр = "Льгота", "льготы", "пени")
											 + " с помощью документа ""Отражение начислений в регламентированном учете"" до даты "
											 + Формат(ПараметрыЗапроса.Период, "ДЛФ=ДД"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Процедура удаляет записи в регистре сведений "Настройки предоставления и расчета льгот".
Процедура УдалитьНастройкиПредоставленияИРасчетаЛьгот(Период, Организация) Экспорт
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	КВП_ЗаписатьОбъект(НаборЗаписей);
	
КонецПроцедуры

// Процедура добавляет записи в регистр сведений "Настройки предоставления и расчета льгот".
Процедура ЗаписатьНастройкиПредоставленияИРасчетаЛьгот(Отказ, ТаблицаНастроек, Период, Организация) Экспорт
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	
	Для Каждого ТекущаяНастройка Из ТаблицаНастроек Цикл
		
		НоваяЗапись             = НаборЗаписей.Добавить();
		НоваяЗапись.Период      = Период;
		НоваяЗапись.Организация = Организация;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекущаяНастройка);
		
	КонецЦикла;
	
	Если НЕ КВП_ЗаписатьОбъект(НаборЗаписей) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли