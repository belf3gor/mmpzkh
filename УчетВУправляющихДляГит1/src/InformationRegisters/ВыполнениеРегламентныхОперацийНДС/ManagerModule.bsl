#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция РасчетНДСАктуален(Организация, Период) Экспорт
	
	Параметры = ПомощникРасчетаНДС.ПараметрыРегламентныхДокументов(Организация, Период);
	КорректноСозданыДокументы = Не (Параметры.ДокументСозданВПомощнике И Параметры.ДокументСозданВручную);
	
	Возврат КорректноСозданыДокументы И ВсеРегламентныеОперацииНДСВыполнены(Организация, Период);
	
КонецФункции

Функция ВыполненАвтоматическийРасчет(Организация, Период) Экспорт
	
	Параметры = ПомощникРасчетаНДС.ПараметрыРегламентныхДокументов(Организация, Период);
	ОперацииСозданыАвтоматически = Параметры.ДокументСозданВПомощнике И Не Параметры.ДокументСозданВручную;
	
	Возврат ОперацииСозданыАвтоматически И ВсеРегламентныеОперацииНДСВыполнены(Организация, Период);
	
КонецФункции

Функция ЗаполнитьЗначенияДереваОпераций() Экспорт
	
	ДеревоОпераций    = Новый ТаблицаЗначений;
	ДеревоОпераций.Колонки.Добавить("Узел");
	ДеревоОпераций.Колонки.Добавить("Связи");
	ДеревоОпераций.Колонки.Добавить("Ответственный");
	
	ЗаполнитьЗначенияДереваОперацийНДС(ДеревоОпераций);
	
	Возврат ДеревоОпераций;
	
КонецФункции

Процедура ОпределитьНеобходимостьКонтроляОпераций(Организация, ПериодРегистрации, ДеревоОпераций) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Установка флагов по умолчанию
	ОрганизацияПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, ПериодРегистрации);
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Организация, ПериодРегистрации);
	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Организация, ПериодРегистрации);
	ДоступенАвтоматическийРасчетНДС = ПомощникРасчетаНДС.ДоступенАвтоматическийРасчетНДС(Организация,
		 НачалоКвартала(ПериодРегистрации));
	
	Если УпрощенныйУчетНДС Тогда
		Для каждого ТекущаяОперация Из ДеревоОпераций Цикл
			ТекущаяОперация.Контроль = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли; 
	
	НачалоНалоговогоПериода = УчетНДСПереопределяемый.НачалоНалоговогоПериода(Организация, ПериодРегистрации);
	НачалоПериода = НачалоКвартала(НачалоНалоговогоПериода);
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецКвартала(ПериодРегистрации),  ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоПериодаДата", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериодаДата",  КонецКвартала(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивСчетовАвансовВыданных = Новый Массив();
	МассивСчетовАвансовВыданных.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); // 62.02
	МассивСчетовАвансовВыданных.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	МассивСчетовАвансовВыданных.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); // 62.32
	
	МассивСчетовАвансовВыданных = БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовАвансовВыданных);
	
	Запрос.УстановитьПараметр("МассивСчетовАвансовВыданных", МассивСчетовАвансовВыданных);
	
	МассивСчетовАвансовПолученных = Новый Массив();
	МассивСчетовАвансовПолученных.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным); // 60.02
	МассивСчетовАвансовПолученных.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал); // 60.22
	МассивСчетовАвансовПолученных.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ); // 60.32
	
	МассивСчетовАвансовПолученных = БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовАвансовПолученных);
	
	Запрос.УстановитьПараметр("МассивСчетовАвансовПолученных", МассивСчетовАвансовПолученных);

	ВидыСубконтоРасчеты = Новый Массив;
	ВидыСубконтоРасчеты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоРасчеты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоРасчеты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконтоРасчеты", ВидыСубконтоРасчеты);
	
	СчетаУчетаДенежныхСредствОрганизации = Новый Массив;
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);

	Запрос.УстановитьПараметр("СчетаУчетаДенежныхСредств",		СчетаУчетаДенежныхСредствОрганизации);
	
	СубконтоЗаявленияОВвозе = Новый Массив;
	СубконтоЗаявленияОВвозе.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоЗаявленияОВвозе.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоЗаявленияОВвозе.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	
	Запрос.УстановитьПараметр("СубконтоЗаявлениеОВвозе",		СубконтоЗаявленияОВвозе);
	
	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента);
	
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	Запрос.УстановитьПараметр("ВидыЦенностейНА",
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
	Запрос.УстановитьПараметр("ВидыЦенностейСМР", 			Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("СчетаСтроительство", 		
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств));
	Запрос.УстановитьПараметр("СчетаВекселяПолученные", 		
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ВекселяПолученные));
	Запрос.УстановитьПараметр("СубконтоСтроительство", 		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства);
	Запрос.УстановитьПараметр("УчетНДС2012", 				КонецКвартала(ПериодРегистрации) >= '20120101');
	Запрос.УстановитьПараметр("РаздельныйУчетНДСНаСчете19", 
		УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, ПериодРегистрации));
	Запрос.УстановитьПараметр("РаздельныйУчетНДСДо2014Года",
		УчетнаяПолитика.РаздельныйУчетНДСДо2014Года(Организация, ПериодРегистрации));
	
	Запрос.УстановитьПараметр("ВедетсяРозничнаяТорговля", ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля"));
	Запрос.УстановитьПараметр("ВерсияПостановленияНДС1137", УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(КонецКвартала(ПериодРегистрации)));
	
	СчетаУчетаДенежныхСредствОрганизации = Новый Массив;
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);

	СубконтоЗаявленияОВвозе = Новый Массив;
	СубконтоЗаявленияОВвозе.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоЗаявленияОВвозе.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоЗаявленияОВвозе.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	
	Запрос.УстановитьПараметр("СчетУчетаКосвенногоНалога",	ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате);
	Запрос.УстановитьПараметр("СубконтоЗаявлениеОВвозе",	СубконтоЗаявленияОВвозе);
	Запрос.УстановитьПараметр("СчетаУчетаДенежныхСредств",	СчетаУчетаДенежныхСредствОрганизации);
	
	Запрос.Текст = ТекстЗапросаНеобходимостьРегламентныхОпераций();
	
	ОперацииТребующиеКонтроля = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РегламентнаяОперация");
	
	КонтролируемыеОперации = Новый Соответствие();
	
	// Обороты по СМР хозспособом
	ЕстьСтроительствоХозспособом = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.НачислениеНДСпоСМРхозспособом) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.НачислениеНДСпоСМРхозспособом, ОрганизацияПлательщикНДС и ЕстьСтроительствоХозспособом);
	
	// Проверка наличия авансов
	НаличиеАвансов = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс, ОрганизацияПлательщикНДС и НаличиеАвансов);
	
	// Проверка наличия оплат при исполнении обязанностей налогового агента
	НаличиеНА = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента, ОрганизацияПлательщикНДС и НаличиеНА);
	
	// Проверка выписки отдельных СФ на суммовую разницу (по УП НУ)
	НаличиеВыделенныхСуммовых = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы, ОрганизацияПлательщикНДС и НаличиеВыделенныхСуммовых);
	
	// Распределения НДС (по УП НУ)
	НаличиеНДСКРаспределению = ЕстьНДСКРаспределению(Организация, ПериодРегистрации);
	КонтролируемыеОперации.Вставить(
		Перечисления.РегламентныеОперации.РаспределениеНДС, ОрганизацияПлательщикНДС И НаличиеНДСКРаспределению);
	
	// Наличие реализации по 0%
	ЕстьРеализация0КПодтверждению = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС, ЕстьРеализация0КПодтверждению);
	
	ЕстьРеализация0КОтражениюВКнигеПродаж = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0, ЕстьРеализация0КОтражениюВКнигеПродаж);
	
	ЕстьРеализация0КОтражениюВКнигеПокупок = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0, ЕстьРеализация0КОтражениюВКнигеПокупок);
	
	// Наличие неподтвержденных оплат заявлений о ввозе товаров
	ЕстьЗаявленияКПодтверждению = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ПодтверждениеОплатыНДСВБюджет) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ПодтверждениеОплатыНДСВБюджет, ЕстьЗаявленияКПодтверждению);
	
	// Необходимость восстановления НДС
	РеализацияПод0_ТребуетсяВосстановление = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ВосстановлениеНДС) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ВосстановлениеНДС, РеализацияПод0_ТребуетсяВосстановление);
	
	Если ДоступенАвтоматическийРасчетНДС Тогда
		КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок, Истина);
		КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж,
			 ОрганизацияПлательщикНДС);
	Иначе
		ЕстьПоступленияКОтражениюВКнигеПокупок = (НЕ ОперацииТребующиеКонтроля.Найти(
			Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок) = Неопределено);
		КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок,
			 ЕстьПоступленияКОтражениюВКнигеПокупок);
	
		ЕстьРеализацияКОтражениюВКнигеПродаж = (НЕ ОперацииТребующиеКонтроля.Найти(
			Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж) = Неопределено);
		КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж,
			 ОрганизацияПлательщикНДС И ЕстьРеализацияКОтражениюВКнигеПродаж);
	КонецЕсли;
	
	// Необходимость свернуть записи книги продаж по розничным реализациям
	ЕстьСворачиваемыеРозничныеПродажи = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ФормированиеСводнойСправки) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ФормированиеСводнойСправки, ЕстьСворачиваемыеРозничныеПродажи);
	
	// Конец года
	ЕстьОбъектыНедвижимости = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ВосстановлениеНДСПоОбъектамНедвижимости) = Неопределено);
	ПоследнийМесяцГода = (Месяц(КонецКвартала(ПериодРегистрации)) = 12);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ВосстановлениеНДСПоОбъектамНедвижимости, ЕстьОбъектыНедвижимости 
		И ОрганизацияПлательщикНДС И ПоследнийМесяцГода И РаздельныйУчетНДС);
		
	// Необходимость формировать записи раздела 7 Декларации по НДС
	ЕстьНеоблагаемыеОперации = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ФормированиеЗаписейРаздела7ДекларацииНДС) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ФормированиеЗаписейРаздела7ДекларацииНДС, ОрганизацияПлательщикНДС И ЕстьНеоблагаемыеОперации);
	
	// Формирование декларации - обязательная операция для автоматической отчетности по НДС.
	КонтролируемыеОперации.Вставить(
		Перечисления.РегламентныеОперации.ФормированиеДекларации, 
		ДоступенАвтоматическийРасчетНДС);
	
	Для каждого ТекущаяОперация Из ДеревоОпераций Цикл
		ТекущаяОперация.Контроль = КонтролируемыеОперации[ТекущаяОперация.Узел];
	КонецЦикла; 
	
	ОпределитьСостояниеОпераций(Организация, ПериодРегистрации, ДеревоОпераций);
	
КонецПроцедуры

Функция СуществуютРегламентныеОперации(Организация, Период, ВидОперации) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьОперация
	|ИЗ
	|	РегистрСведений.ВыполнениеРегламентныхОперацийНДС КАК РегламентныеОперацииНДС
	|ГДЕ
	|	РегламентныеОперацииНДС.Организация = &Организация
	|	И РегламентныеОперацииНДС.ПериодРегистрации = &Период
	|	И РегламентныеОперацииНДС.РегламентнаяОперация = &ВидОперации";
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Сброс факта выполнения при отмене проведения документа
Процедура СброситьФактВыполненияОперации(Регистратор) Экспорт
	
	МетаданныеРегистратора = Регистратор.Метаданные();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
 		            |	НачалоПериода(Регистратор.Дата,Месяц) КАК ПериодРегистрации,
				    |	Регистратор.Организация КАК Организация,
					|   ВыполненныеОперации.РегламентнаяОперация КАК РегламентнаяОперация
		            |ИЗ
		            |	Документ." + МетаданныеРегистратора.Имя + " КАК Регистратор
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеРегламентныхОперацийНДС КАК ВыполненныеОперации
		            |		ПО ВыполненныеОперации.РегламентныйДокумент = Регистратор.Ссылка
		            |
		            |ГДЕ
		            |	Регистратор.Ссылка = &РегистраторСсылка";
	Запрос.УстановитьПараметр("РегистраторСсылка", Регистратор); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	// удаление всех записей по регистратору
	НаборЗаписей = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РегламентныйДокумент.Установить(Регистратор);
	НаборЗаписей.Записать();
	
	ДеревоОпераций = ЗаполнитьЗначенияДереваОпераций();
	
	ПоследняяОперация = Неопределено;
	Пока Выборка.Следующий() Цикл
		СброситьФактВыполненияПодчиненныхОпераций(Выборка.Организация , Выборка.ПериодРегистрации, ДеревоОпераций, Выборка.РегламентнаяОперация, Регистратор);
		ПоследняяОперация = Выборка.РегламентнаяОперация;
	КонецЦикла;	
	
	#Если Клиент Тогда
	Если не ПоследняяОперация = Неопределено Тогда
		Оповестить("ОбновленоСостояниеРегламентнойОперации",ПоследняяОперация,Регистратор);
	КонецЕсли; 
	#КонецЕсли
	
КонецПроцедуры

// Сбрасывает в регистре признак Актуальность для всех регламентных операций НДС
// по переданной организации за текущий и все последующие периоды.
// 
Процедура СброситьФактВыполненияВсехРегламетныхОпераций(Организация, ПериодРегистрации) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоКвартала(ПериодРегистрации));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыполнениеРегламентныхОперацийНДС.ПериодРегистрации
	|ИЗ
	|	РегистрСведений.ВыполнениеРегламентныхОперацийНДС КАК ВыполнениеРегламентныхОперацийНДС
	|ГДЕ
	|	ВыполнениеРегламентныхОперацийНДС.Организация = &Организация
	|	И ВыполнениеРегламентныхОперацийНДС.ПериодРегистрации >= &ПериодРегистрации";
	
	Набор =  РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СоздатьНаборЗаписей();
	
	Попытка
	
		НачатьТранзакцию();
		
		ДиапазонПериода = Новый Диапазон(НачалоКвартала(ПериодРегистрации), Неопределено);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыполнениеРегламентныхОперацийНДС");
		ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
		ЭлементБлокировки.УстановитьЗначение("ПериодРегистрации", ДиапазонПериода);
		Блокировка.Заблокировать();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор.Отбор.Организация.Установить(Организация, Истина);
			Набор.Отбор.ПериодРегистрации.Установить(Выборка.ПериодРегистрации, Истина);
			
			Набор.Прочитать();
			Для Каждого Движение Из Набор Цикл
				Если Движение.Актуальность Тогда
					Движение.Актуальность = Ложь;
				КонецЕсли;
			КонецЦикла;
		
			Если Набор.Модифицированность() Тогда
				Набор.Записать(Истина);
			КонецЕсли;
			
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
		
	Исключение
	
		ТекстОшибки = ОписаниеОшибки();
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение ТекстОшибки;
	
	КонецПопытки;

КонецПроцедуры

// Сбрасывает в регистре признак Актуальность для переданной регламентной операции НДС
Процедура СброситьФактВыполненияРегламетнойОперации(Организация, ПериодРегистрации, РегламентнаяОперация) Экспорт

	Запрос = Новый Запрос;
	Период = НачалоКвартала(ПериодРегистрации);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", Период);
	Запрос.УстановитьПараметр("РегламентнаяОперация", РегламентнаяОперация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыполнениеРегламентныхОперацийНДС.ПериодРегистрации КАК ПериодРегистрации,
	|	ВыполнениеРегламентныхОперацийНДС.РегламентныйДокумент КАК РегламентныйДокумент,
	|	ВыполнениеРегламентныхОперацийНДС.ОбъектТекущейОперации КАК ОбъектТекущейОперации,
	|	ВыполнениеРегламентныхОперацийНДС.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.ВыполнениеРегламентныхОперацийНДС КАК ВыполнениеРегламентныхОперацийНДС
	|ГДЕ
	|	ВыполнениеРегламентныхОперацийНДС.Организация = &Организация
	|	И ВыполнениеРегламентныхОперацийНДС.ПериодРегистрации >= &ПериодРегистрации
	|	И ВыполнениеРегламентныхОперацийНДС.РегламентнаяОперация = &РегламентнаяОперация
	|	И ВыполнениеРегламентныхОперацийНДС.Актуальность
	|ИТОГИ ПО
	|	ПериодРегистрации";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДиапазонПериода = Новый Диапазон(Период, Неопределено);

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыполнениеРегламентныхОперацийНДС");
	ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
	ЭлементБлокировки.УстановитьЗначение("ПериодРегистрации", ДиапазонПериода);
	ЭлементБлокировки.УстановитьЗначение("РегламентнаяОперация", РегламентнаяОперация);
	
	Попытка
	
		НачатьТранзакцию();
		
		Блокировка.Заблокировать();
		
		Набор = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.Установить(Организация);
		Набор.Отбор.РегламентнаяОперация.Установить(РегламентнаяОперация);
		ОтборПериодРегистрации = Набор.Отбор.ПериодРегистрации;
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл

			ОтборПериодРегистрации.Установить(Выборка.ПериодРегистрации);

			ВыборкаПоЗаписям = Выборка.Выбрать();
			Пока ВыборкаПоЗаписям.Следующий() Цикл
			
				НоваяСтрока = Набор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоЗаписям);
				НоваяСтрока.Организация = Организация;
				НоваяСтрока.РегламентнаяОперация = РегламентнаяОперация;
				НоваяСтрока.Актуальность = Ложь;
			
			КонецЦикла;

			Набор.Записать();
			Набор.Очистить();
					
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
	
		ТекстОшибки = ОписаниеОшибки();
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение ТекстОшибки;
	
	КонецПопытки;

КонецПроцедуры

Функция ПодготовитьПараметрыФактВыполненияРегламентнойОперации(Таблица)
	
	Параметры = Новый Структура;
	
	// Реквизиты
	СписокОбязательныхКолонок = ""
		+ "Период, "      		  // <Дата> - период движений - дата документа
		+ "Организация, " 		  // <СправочникСсылка.Организации>
		+ "Регистратор, "		  // <ДокументСсылка.ФормированиеЗаписейКнигиПокупок> - документ-регистратор	
		+ "РегламентнаяОперация"; // <ПеречислениеСсылка.РегламентныеОперации> - вид регламентной операции
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		Таблица, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияФактВыполненияРегламентнойОперации(Таблица, Отказ)  Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыФактВыполненияРегламентнойОперации(Таблица);	
	Реквизиты = Параметры.Реквизиты[0];
	ЗафиксироватьФактВыполненияРегламентнойОперации(
		Реквизиты.Период, Реквизиты.Организация, Реквизиты.Регистратор, Реквизиты.РегламентнаяОперация);
	
КонецПроцедуры

// Определяет необходимость распределения входящего НДС
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, по которой необходимо проверить необходимость распределения.
//   Период      - Дата - дата внутри квартала (налогового периода) проверки.
// Возвращаемое значение:
//   Булево - Истина, если распределение НДС необходимо.
Функция ЕстьНДСКРаспределению(Организация, Период) Экспорт
	
	НачалоПериода = НачалоКвартала(Период);
	КонецПериода  = КонецДня(КонецКвартала(Период));

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("РаздельныйУчетНДСНаСчете19",
		УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, КонецПериода));
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НДСКосвенныеРасходы.СчетФактура КАК СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСКосвенныеРасходы.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И НЕ &РаздельныйУчетНДСНаСчете19) КАК НДСКосвенныеРасходы
	|ГДЕ
	|	НДСКосвенныеРасходы.СуммаБезНДСПриход + НДСКосвенныеРасходы.НДСПриход > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НДСРаздельныйУчетОбороты.АналитикаУчетаНДС
	|ИЗ
	|	РегистрНакопления.НДСРаздельныйУчет.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И СпособУчетаНДС = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.Распределяется)
	|				И &РаздельныйУчетНДСНаСчете19) КАК НДСРаздельныйУчетОбороты
	|ГДЕ
	|	НДСРаздельныйУчетОбороты.СуммаБезНДСПриход + НДСРаздельныйУчетОбороты.НДСПриход > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭкспортныйНДСПодлежащийРаспределению.СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ДокументОтгрузки = НЕОПРЕДЕЛЕНО
	|				И &РаздельныйУчетНДСНаСчете19) КАК ЭкспортныйНДСПодлежащийРаспределению
	|ГДЕ
	|	ЭкспортныйНДСПодлежащийРаспределению.СуммаБезНДСОстаток + ЭкспортныйНДСПодлежащийРаспределению.НДСОстаток > 0";
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДереваОпераций

// Возвращает признак актуальности расчета НДС за период.
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, по которой необходимо проверить расчет НДС.
//   ПериодРегистрации - Дата - дата внутри квартала (налогового периода) проверки.
//   ПроверятьНаличиеДекларации - Булево - признак необходимости проверки наличия декларации.
//                                Поскольку при выполнении расчета в фоне декларация не формируется,
//                                то и её наличие не влияет на актуальность расчета, выполненного не интерактивно.
// Возвращаемое значение:
//   Булево - Истина, если расчет НДС актуален.
Функция ВсеРегламентныеОперацииНДСВыполнены(Организация, ПериодРегистрации)
	
	ГраницаАктуальности = РаботаСПоследовательностями.МоментНачалаПерепроведения(
		Организация, КонецКвартала(ПериодРегистрации));
			
	Если ГраницаАктуальности <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Переход на раздельный учет НДС на счете 19
	СтруктураКонтроля = НеобходимостьДействийПоПереходуНаРаздельныйУчетНДСНаСчете19(Организация, ПериодРегистрации);
	
	Если СтруктураКонтроля.ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Отключение раздельного учета НДС
	СтруктураКонтроля = НеобходимостьДействийПоОтключениюРаздельногоУчетаНДС(Организация, ПериодРегистрации);
	
	Если СтруктураКонтроля.ТребуетсяВыполнитьОтключениеРаздельногоУчетаНДС Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПолноеДерево = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗаполнитьЗначенияДереваОпераций();
	ПолноеДерево.Колонки.Добавить("Контроль", Новый ОписаниеТипов("Булево"));
	ПолноеДерево.Колонки.Добавить("Актуальна", Новый ОписаниеТипов("Булево"));
	ПолноеДерево.Колонки.Добавить("Выполнена", Новый ОписаниеТипов("Булево"));
	ПолноеДерево.Колонки.Добавить("СостояниеОпераций", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ОпределитьНеобходимостьКонтроляОпераций(Организация, ПериодРегистрации, ПолноеДерево);
	
	Для Каждого ОперацияНДС ИЗ ПолноеДерево Цикл
		Если ОперацияНДС.Контроль И НЕ (ОперацияНДС.Выполнена И ОперацияНДС.Актуальна) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ОпределитьСостояниеОпераций(Организация, ПериодРегистрации, ДеревоОпераций)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачалоНалоговогоПериода = УчетНДСПереопределяемый.НачалоНалоговогоПериода(Организация, ПериодРегистрации);
	НачалоПериода = НачалоКвартала(НачалоНалоговогоПериода);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Факт.РегламентнаяОперация КАК РегламентнаяОперация,
	|	МАКСИМУМ(Факт.Актуальность) КАК Актуальна,
	|	МИНИМУМ(Факт.РегламентныйДокумент) КАК Регистратор
	|ИЗ
	|	РегистрСведений.ВыполнениеРегламентныхОперацийНДС КАК Факт
	|ГДЕ
	|	Факт.Организация = &Организация
	|	И Факт.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Факт.РегламентнаяОперация";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецКвартала(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	СостояниеОпераций = Запрос.Выполнить().Выгрузить();
	
	// Переход на раздельный учет НДС на счете 19.
	СтруктураКонтроля = НеобходимостьДействийПоПереходуНаРаздельныйУчетНДСНаСчете19(Организация, ПериодРегистрации);
	
	ТребуетсяКонтрольПереходаНаРаздельныйУчетНДСНаСчете19 = СтруктураКонтроля.ТребуетсяКонтрольПереходаНаРаздельныйУчетНДСНаСчете19;
	ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19 = СтруктураКонтроля.ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19;
	
	// Отключение раздельного учета НДС.
	СтруктураКонтроля = НеобходимостьДействийПоОтключениюРаздельногоУчетаНДС(Организация, ПериодРегистрации);
	
	ТребуетсяКонтрольОтключенияРаздельногоУчетаНДС = СтруктураКонтроля.ТребуетсяКонтрольОтключенияРаздельногоУчетаНДС;
	ТребуетсяВыполнитьОтключениеРаздельногоУчетаНДС = СтруктураКонтроля.ТребуетсяВыполнитьОтключениеРаздельногоУчетаНДС;
	
	ТребуетсяКонтрольПерепроведенияСчетовФактур = 
		РегистрыСведений.ПрефиксыИнформационныхБаз.НадоПерепровестиСчетаФактуры() И ПериодРегистрации = '20150101';
	НеобходимоПерепровестиСчетаФактуры = Ложь;
	
	Если ТребуетсяКонтрольПерепроведенияСчетовФактур Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВыполнениеРегламентныхОперацийНДС.РегламентныйДокумент
		|ИЗ
		|	РегистрСведений.ВыполнениеРегламентныхОперацийНДС КАК ВыполнениеРегламентныхОперацийНДС
		|ГДЕ
		|	ВыполнениеРегламентныхОперацийНДС.РегламентнаяОперация = ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ОбработкаНомеровСчетовФактур)
		|	И ВыполнениеРегламентныхОперацийНДС.Организация = &Организация
		|	И ВыполнениеРегламентныхОперацийНДС.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода";
		
		Результат = Запрос.Выполнить();
		НеобходимоПерепровестиСчетаФактуры = Результат.Пустой();
		
	КонецЕсли;
	
	Для Каждого СтрокаУзла ИЗ ДеревоОпераций Цикл
		
		РегламентнаяОперация = СтрокаУзла.Узел;
		
		Если РегламентнаяОперация = Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19 Тогда
			
			СтрокаУзла.Контроль = ТребуетсяКонтрольПереходаНаРаздельныйУчетНДСНаСчете19;
			
			Если ТребуетсяКонтрольПереходаНаРаздельныйУчетНДСНаСчете19 Тогда
				
				СтрокаУзла.Выполнена = НЕ ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19;
				СтрокаУзла.Актуальна = НЕ ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19;
				
			Иначе
				
				СтрокаУзла.Выполнена = Ложь;
				СтрокаУзла.Актуальна = Ложь;
				
			КонецЕсли;
			
			Продолжить;
			
		ИначеЕсли РегламентнаяОперация = Перечисления.РегламентныеОперации.ОтключениеРаздельногоУчетаНДС Тогда 
			
			СтрокаУзла.Контроль = ТребуетсяКонтрольОтключенияРаздельногоУчетаНДС;
			
			Если ТребуетсяКонтрольОтключенияРаздельногоУчетаНДС Тогда
				
				СтрокаУзла.Выполнена = НЕ ТребуетсяВыполнитьОтключениеРаздельногоУчетаНДС;
				СтрокаУзла.Актуальна = НЕ ТребуетсяВыполнитьОтключениеРаздельногоУчетаНДС;
				
			Иначе
				
				СтрокаУзла.Выполнена = Ложь;
				СтрокаУзла.Актуальна = Ложь;
				
			КонецЕсли;
			
			Продолжить;
			
		ИначеЕсли РегламентнаяОперация = Перечисления.РегламентныеОперации.ОбработкаНомеровСчетовФактур Тогда
			
			СтрокаУзла.Контроль  = ТребуетсяКонтрольПерепроведенияСчетовФактур;
			СтрокаУзла.Выполнена = ТребуетсяКонтрольПерепроведенияСчетовФактур И НЕ НеобходимоПерепровестиСчетаФактуры;
			СтрокаУзла.Актуальна = ТребуетсяКонтрольПерепроведенияСчетовФактур И НЕ НеобходимоПерепровестиСчетаФактуры;
			
			Продолжить;
			
		КонецЕсли;
	
		НайденныеОперации = СостояниеОпераций.НайтиСтроки(Новый Структура("РегламентнаяОперация", РегламентнаяОперация));
		
		ОперацияВыполнена = (НайденныеОперации.Количество() > 0);
		ОперацияАктуальна = (ОперацияВыполнена и НайденныеОперации[0].Актуальна);
		
		СтрокаУзла.Выполнена = ОперацияВыполнена;
		СтрокаУзла.Актуальна = ОперацияАктуальна;
		
		СтрокаУзла.СостояниеОпераций.Очистить();
		Для Каждого Операция Из НайденныеОперации Цикл
			ЗаполнитьЗначенияСвойств(СтрокаУзла.СостояниеОпераций.Добавить(), Операция);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения общего дерева регламентных операций
Процедура ЗаполнитьЗначенияДереваОперацийНДС(ДеревоОпераций)

	СписокПодчиненных = Новый СписокЗначений();

	//**********************************
	// Книга продаж

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ОбработкаНомеровСчетовФактур;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ОтключениеРаздельногоУчетаНДС;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ПодтверждениеОплатыНДСВБюджет;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ВосстановлениеНДСПоОбъектамНедвижимости;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ФормированиеСводнойСправки;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	// Книга продаж
	//**********************************

	//**********************************
	// Книга покупок

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.НачислениеНДСпоСМРхозспособом;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.РаспределениеНДС;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ВосстановлениеНДС);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейРаздела7ДекларацииНДС);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ВосстановлениеНДС;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0;
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19);
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	// Книга покупок
	//**********************************
	
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ФормированиеЗаписейРаздела7ДекларацииНДС;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ФормированиеДекларации;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
КонецПроцедуры

Функция НеобходимостьДействийПоПереходуНаРаздельныйУчетНДСНаСчете19(Организация, Период)

	УстановитьПривилегированныйРежим(Истина);
	
	РаздельныйУчетНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Период);
	
	Если НЕ РаздельныйУчетНаСчете19 Тогда
		Возврат Новый Структура(
			"ТребуетсяКонтрольПереходаНаРаздельныйУчетНДСНаСчете19,
			|ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19",
			Ложь, Ложь);
	КонецЕсли;
	
	// При переходе и (наличии остатков или наличии сформированных документов)
	ТребуетсяКонтроль = Ложь;
	// При наличии остатков
	ТребуетсяВыполнить = Ложь;
	
	Если НЕ ПереходНаУчетНДСПоСпособамВТекущемКвартале(Организация, Период) Тогда
		Возврат Новый Структура(
			"ТребуетсяКонтрольПереходаНаРаздельныйУчетНДСНаСчете19,
			|ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19",
			Ложь, Ложь); 
	КонецЕсли;
		
	ЕстьОстаткиДляПереноса = ОстаткиДляПереносаПриПереходеНаУчетНДСПоСпособам(
		Организация, Период);
	
	ЕстьВыполненныеРегламентныеОперации = СуществуютРегламентныеОперации(
		Организация, Период, Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19);
		
	ТребуетсяКонтроль  = ЕстьОстаткиДляПереноса ИЛИ ЕстьВыполненныеРегламентныеОперации;
	ТребуетсяВыполнить = ЕстьОстаткиДляПереноса;

	Возврат Новый Структура(
		"ТребуетсяКонтрольПереходаНаРаздельныйУчетНДСНаСчете19,
		|ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19",
		ТребуетсяКонтроль, ТребуетсяВыполнить); 

КонецФункции

Функция ПереходНаУчетНДСПоСпособамВТекущемКвартале(Организация, Период)
	
	// Проверим, в каком квартале осуществлен переход на раздельный учет НДС на счете 19.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиУчетаНДС.Период КАК Период
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|ГДЕ
	|	НастройкиУчетаНДС.РаздельныйУчетНДСНаСчете19
	|	И НастройкиУчетаНДС.Организация = &Организация
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиУчетаНДС.Период КАК Период
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|ГДЕ
	|	НастройкиУчетаНДС.РаздельныйУчетНДСНаСчете19
	|	И НастройкиУчетаНДС.Организация = &Организация
	|	И НастройкиУчетаНДС.Период < &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Учетная политика есть и переход производится в текущем квартале.
	ПереходНаУчетНДСПоСпособамВТекущемКвартале = НЕ Результат[0].Пустой() И Результат[1].Пустой();
	
	Возврат ПереходНаУчетНДСПоСпособамВТекущемКвартале;

КонецФункции

Функция ОстаткиДляПереносаПриПереходеНаУчетНДСПоСпособам(Организация, Период)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("Период",                      Новый Граница(Период - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивСубСчетов19НДСКВычету", БухгалтерскийУчет.МассивСубСчетов19НДСКВычету());
	Запрос.УстановитьПараметр("МассивСубконтоСчета19",       БухгалтерскийУчет.МассивСубконтоСчета19());
	Запрос.УстановитьПараметр("УчетПоСпособамНаСчете19",     БухгалтерскийУчет.УчетПоСпособамНаСчете19());
	Запрос.УстановитьПараметр("Счет1907",                    ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0);
	Запрос.УстановитьПараметр("СубконтоСчета1907",           БухгалтерскийУчет.МассивСубконтоСчета1907());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПоПриобретеннымЦенностямОстатки.НДСОстаток
	|ИЗ
	|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(&Период, Организация = &Организация) КАК НДСПоПриобретеннымЦенностямОстатки
	|ГДЕ
	|	(НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток <> 0
	|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток <> 0
	|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.НДСОстаток <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В (&МассивСубСчетов19НДСКВычету),
	|			&МассивСубконтоСчета19,
	|			Организация = &Организация
	|				И Субконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт <> 0
	|	И &УчетПоСпособамНаСчете19
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &Счет1907, &СубконтоСчета1907, Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт <> 0";
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

Функция НеобходимостьДействийПоОтключениюРаздельногоУчетаНДС(Организация, Период)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Контроль необходим если есть остатки или ранее сформированы документы для их списания.
	ТребуетсяКонтроль = Ложь;
	// Необходимо выполнить списание остатков при их наличии.
	ТребуетсяВыполнить = Ложь;
	
	ВедетсяРаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Организация, Период);
	// Если ведется раздельный учет НДС, ничего контролировать и выполнять не нужно.
	Если ВедетсяРаздельныйУчетНДС Тогда
		Возврат Новый Структура(
			"ТребуетсяКонтрольОтключенияРаздельногоУчетаНДС,
			|ТребуетсяВыполнитьОтключениеРаздельногоУчетаНДС",
			Ложь, Ложь);
	КонецЕсли;

	Если НЕ РаздельныйУчетНДСОтключенВТекущемКвартале(Организация, Период) Тогда
		Возврат Новый Структура(
			"ТребуетсяКонтрольОтключенияРаздельногоУчетаНДС,
			|ТребуетсяВыполнитьОтключениеРаздельногоУчетаНДС",
			Ложь, Ложь);
	КонецЕсли;
	
	ЕстьОстаткиКСписанию = ОстаткиКСписаниюПриОтключенииРаздельногоУчетаНДС(
		Организация, Период);
	
	ЕстьВыполненныеРегламентныеОперации = СуществуютРегламентныеОперации(
		Организация, Период, Перечисления.РегламентныеОперации.ОтключениеРаздельногоУчетаНДС);
		
	ТребуетсяКонтроль  = ЕстьОстаткиКСписанию ИЛИ ЕстьВыполненныеРегламентныеОперации;
	ТребуетсяВыполнить = ЕстьОстаткиКСписанию;
		
	Возврат Новый Структура(
		"ТребуетсяКонтрольОтключенияРаздельногоУчетаНДС,
		|ТребуетсяВыполнитьОтключениеРаздельногоУчетаНДС",
		ТребуетсяКонтроль, ТребуетсяВыполнить); 
	
КонецФункции

Функция РаздельныйУчетНДСОтключенВТекущемКвартале(Организация, Период)
	
	// Убедимся, что раздельный учет НДС отключен в текущем периоде:
	// 1. в текущем периоде раздельный учет НДС выключен,
	// 2. в предыдущем квартале раздельный учет НДС включен.
	
	РаздельныйУчетВПрошломКвартале = УчетнаяПолитика.РаздельныйУчетНДС(Организация, Период - 1);
	РаздельныйУчетВТекущемКвартале = УчетнаяПолитика.РаздельныйУчетНДС(Организация, Период);
	
	Возврат РаздельныйУчетВПрошломКвартале И НЕ РаздельныйУчетВТекущемКвартале;

КонецФункции

Функция ОстаткиКСписаниюПриОтключенииРаздельногоУчетаНДС(Организация, Период)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("Период",                      Новый Граница(Период - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("УчетПоСпособамНаСчете19",     БухгалтерскийУчет.УчетПоСпособамНаСчете19());
	Запрос.УстановитьПараметр("МассивСубСчетов19НДСКВычету", БухгалтерскийУчет.МассивСубСчетов19НДСКВычету());
	Запрос.УстановитьПараметр("МассивСубконтоСчета19",       БухгалтерскийУчет.МассивСубконтоСчета19());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЕстьОстаток
	|ИЗ
	|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(&Период, Организация = &Организация) КАК ПриобретенныеЦенности
	|ГДЕ
	|	(ПриобретенныеЦенности.КоличествоОстаток <> 0
	|			ИЛИ ПриобретенныеЦенности.СтоимостьОстаток <> 0
	|			ИЛИ ПриобретенныеЦенности.НДСОстаток <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.НДСРаздельныйУчет.Остатки(&Период, Организация = &Организация) КАК НДСРаздельныйУчет
	|ГДЕ
	|	НДСРаздельныйУчет.КоличествоОстаток <> 0
	|	И НДСРаздельныйУчет.СуммаБезНДСОстаток <> 0
	|	И НДСРаздельныйУчет.НДСОстаток <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В (&МассивСубСчетов19НДСКВычету),
	|			&МассивСубконтоСчета19,
	|			Организация = &Организация
	|				И Субконто3 <> ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка)) КАК ОстаткиПоСчету19
	|ГДЕ
	|	ОстаткиПоСчету19.СуммаОстатокДт <> 0
	|	И &УчетПоСпособамНаСчете19
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И ДокументОтгрузки = НЕОПРЕДЕЛЕНО) КАК НДСПредъявленныйРеализация0Остатки
	|ГДЕ
	|	(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток <> 0
	|			ИЛИ НДСПредъявленныйРеализация0Остатки.НДСОстаток <> 0)";
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

Функция ТекстЗапросаНеобходимостьРегламентныхОпераций()
	
	Возврат
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК ЗаявлениеОВвозе
	|ПОМЕСТИТЬ ВсеЗаявленияОВвозе
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Организация = &Организация
	|	И ЗаявлениеОВвозеТоваров.Проведен
	|	И ЗаявлениеОВвозеТоваров.Дата <= &КонецПериодаДата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаявлениеОВвозе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КнигаПокупок.СчетФактура КАК ЗаявлениеОВвозе
	|ПОМЕСТИТЬ КнигаПокупокВЧастиЗаявленийОВвозе
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК КнигаПокупок
	|ГДЕ
	|	КнигаПокупок.Организация = &Организация
	|	И КнигаПокупок.Период <= &КонецПериодаДата
	|	И КнигаПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КнигаПокупок.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеЗаявленияОВвозе.ЗаявлениеОВвозе КАК ЗаявлениеОВвозе
	|ПОМЕСТИТЬ НеподтвержденныеЗаявленияОВвозе
	|ИЗ
	|	ВсеЗаявленияОВвозе КАК ВсеЗаявленияОВвозе
	|		ЛЕВОЕ СОЕДИНЕНИЕ КнигаПокупокВЧастиЗаявленийОВвозе КАК КнигаПокупокВЧастиЗаявленийОВвозе
	|		ПО (КнигаПокупокВЧастиЗаявленийОВвозе.ЗаявлениеОВвозе = ВсеЗаявленияОВвозе.ЗаявлениеОВвозе)
	|ГДЕ
	|	КнигаПокупокВЧастиЗаявленийОВвозе.ЗаявлениеОВвозе ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВсеЗаявленияОВвозе.ЗаявлениеОВвозе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто3 КАК ЗаявлениеОВвозе,
	|	ХозрасчетныйОбороты.Регистратор КАК ДокументОплаты
	|ПОМЕСТИТЬ ВТ_ДатыОплат
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(, &КонецПериода, Регистратор, Счет = &СчетУчетаКосвенногоНалога, &СубконтоЗаявлениеОВвозе, Организация = &Организация, КорСчет В (&СчетаУчетаДенежныхСредств), ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотДт > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаявленияОВвозе.ЗаявлениеОВвозе КАК ЗаявлениеОВвозе
	|ПОМЕСТИТЬ ЗаявлениеОВвозеТребующиеПодтверждения
	|ИЗ
	|	НеподтвержденныеЗаявленияОВвозе КАК ЗаявленияОВвозе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыОплат КАК ДатыОплат
	|		ПО ЗаявленияОВвозе.ЗаявлениеОВвозе = ДатыОплат.ЗаявлениеОВвозе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъединенныеДанныеПоАвансам.РегламентнаяОперация КАК РегламентнаяОперация
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.РегистрацияСчетовФактурНаАванс) КАК РегламентнаяОперация
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				НЕ СчетДт В (&СчетаВекселяПолученные)
	|					И НЕ СчетДт В (&МассивСчетовАвансовВыданных),
	|				,
	|				СчетКт В (&МассивСчетовАвансовВыданных),
	|				,
	|				Организация = &Организация) КАК УсловиеПоОборотам
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА УсловиеПоОборотам.СчетКт.Валютный
	|						И НЕ УсловиеПоОборотам.ВалютнаяСуммаОборотКт ЕСТЬ NULL
	|					ТОГДА УсловиеПоОборотам.ВалютнаяСуммаОборотКт
	|				ИНАЧЕ УсловиеПоОборотам.СуммаОборот
	|			КОНЕЦ > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.РегистрацияСчетовФактурНаАванс)
	|	ИЗ
	|		Документ.ОтчетКомиссионераОПродажах.ДенежныеСредства КАК ОтчетКомиссионераОПродажах
	|	ГДЕ
	|		ОтчетКомиссионераОПродажах.ВидОтчетаПоПлатежам = ЗНАЧЕНИЕ(Перечисление.ВидыОтчетовПоПлатежамКомиссия.Аванс)
	|		И ОтчетКомиссионераОПродажах.Ссылка.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериодаДата
	|		И ОтчетКомиссионераОПродажах.Ссылка.Организация = &Организация
	|		И ОтчетКомиссионераОПродажах.Ссылка.Проведен) КАК ОбъединенныеДанныеПоАвансам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			НЕ СчетДт В (&СчетаИсключения),
	|			&ВидыСубконтоРасчеты,
	|			,
	|			,
	|			Организация = &Организация
	|				И ВЫРАЗИТЬ(СубконтоДт2 КАК Справочник.ДоговорыКонтрагентов).УчетАгентскогоНДС
	|				И ВЫРАЗИТЬ(СубконтоДт2 КАК Справочник.ДоговорыКонтрагентов).ВидАгентскогоДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.РеализацияТоваров)) КАК УсловиеПоОборотам
	|ГДЕ
	|	УсловиеПоОборотам.СуммаОборот > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.НачислениеНДСпоСМРхозспособом)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Счет В (&СчетаСтроительство),
	|			&СубконтоСтроительство,
	|			Организация = &Организация
	|				И (ВЫРАЗИТЬ(Субконто1 КАК Перечисление.СпособыСтроительства)) = ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.Хозспособ),
	|			,
	|			) КАК УсловиеПоОборотам
	|ГДЕ
	|	УсловиеПоОборотам.СуммаОборотДт > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы)
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.НДСНачисленКУплате)) КАК УсловиеПоОборотам
	|ГДЕ
	|	УсловиеПоОборотам.СуммаБезНДСПриход + УсловиеПоОборотам.НДСПриход > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловиеОперации.РегламентнаяОперация
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ВЫБОР
	|			КОГДА УсловиеПоОборотам.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение)
	|					ИЛИ &УчетНДС2012
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0)
	|		КОНЕЦ КАК РегламентнаяОперация
	|	ИЗ
	|		РегистрНакопления.НДСРеализация0.Обороты(&НачалоПериода, &КонецПериода, Период, Организация = &Организация) КАК УсловиеПоОборотам
	|	ГДЕ
	|		УсловиеПоОборотам.СуммаБезНДСПриход + УсловиеПоОборотам.НДСПриход > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ВЫБОР
	|			КОГДА УсловиеПоОстаткам.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение)
	|					ИЛИ &УчетНДС2012
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.НДСРеализация0.Остатки(&НачалоПериода, Организация = &Организация) КАК УсловиеПоОстаткам
	|	ГДЕ
	|		УсловиеПоОстаткам.СуммаБезНДСОстаток + УсловиеПоОстаткам.НДСОстаток > 0) КАК УсловиеОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ПодтверждениеОплатыНДСВБюджет)
	|ИЗ
	|	ЗаявлениеОВвозеТребующиеПодтверждения КАК ЗаявлениеОВвозеТребующиеПодтверждения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловиеОперации.РегламентнаяОперация
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0) КАК РегламентнаяОперация
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленныйРеализация0.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				Организация = &Организация
	|					И НЕ Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение)) КАК УсловиеПоОборотам
	|	ГДЕ
	|		УсловиеПоОборотам.СуммаБезНДСПриход + УсловиеПоОборотам.НДСПриход > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0)
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|				&НачалоПериода,
	|				Организация = &Организация
	|					И НЕ Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение)) КАК УсловиеПоОстаткам
	|	ГДЕ
	|		УсловиеПоОстаткам.СуммаБезНДСОстаток + УсловиеПоОстаткам.НДСОстаток > 0) КАК УсловиеОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловиеОперации.РегламентнаяОперация
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ВЫБОР
	|			КОГДА УсловиеПоОборотам.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.Реализация0)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ВосстановлениеНДС)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж)
	|		КОНЕЦ КАК РегламентнаяОперация
	|	ИЗ
	|		РегистрНакопления.НДСНачисленный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				НЕ &УчетНДС2012
	|					И Организация = &Организация) КАК УсловиеПоОборотам
	|	ГДЕ
	|		УсловиеПоОборотам.СуммаБезНДСПриход + УсловиеПоОборотам.НДСПриход > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ВЫБОР
	|			КОГДА УсловиеПоОстаткам.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.Реализация0)
	|				ТОГДА НЕОПРЕДЕЛЕНО
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.НДСНачисленный.Остатки(
	|				&НачалоПериода,
	|				НЕ &УчетНДС2012
	|					И Организация = &Организация) КАК УсловиеПоОстаткам
	|	ГДЕ
	|		УсловиеПоОстаткам.СуммаБезНДСОстаток + УсловиеПоОстаткам.НДСОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж)
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&МассивСчетовАвансовПолученных), , Организация = &Организация, , ) КАК УсловиеПоОборотам
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА УсловиеПоОборотам.Счет.Валютный
	|						И НЕ УсловиеПоОборотам.ВалютнаяСуммаОборотКт ЕСТЬ NULL
	|					ТОГДА УсловиеПоОборотам.ВалютнаяСуммаОборотКт
	|				ИНАЧЕ УсловиеПоОборотам.СуммаОборотКт
	|			КОНЕЦ > 0) КАК УсловиеОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловиеОперации.РегламентнаяОперация
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок) КАК РегламентнаяОперация
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленный.Обороты(&НачалоПериода, &КонецПериода, Период, Организация = &Организация) КАК УсловиеПоОборотам
	|	ГДЕ
	|		УсловиеПоОборотам.СуммаБезНДСПриход + УсловиеПоОборотам.НДСПриход > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок)
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленный.Остатки(&НачалоПериода, Организация = &Организация) КАК УсловиеПоОстаткам
	|	ГДЕ
	|		УсловиеПоОстаткам.СуммаБезНДСОстаток + УсловиеПоОстаткам.НДСОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок)
	|	ИЗ
	|		РегистрНакопления.НДСсАвансов.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				НЕ &УчетНДС2012
	|					И Организация = &Организация
	|					И (ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	|						ИЛИ ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные0))) КАК УсловиеПоОборотам
	|	ГДЕ
	|		УсловиеПоОборотам.СуммаБезНДСПриход + УсловиеПоОборотам.НДСПриход > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок)
	|	ИЗ
	|		РегистрНакопления.НДСсАвансов.Остатки(
	|				&НачалоПериода,
	|				НЕ &УчетНДС2012
	|					И Организация = &Организация
	|					И (ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	|						ИЛИ ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные0))) КАК УсловиеПоОстаткам
	|	ГДЕ
	|		УсловиеПоОстаткам.СуммаБезНДСОстаток + УсловиеПоОстаткам.НДСОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок)
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				&УчетНДС2012
	|					И Организация = &Организация
	|					И ВидЦенности В (ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученныеНалоговыйАгент), ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ВозвратАвансовПолученныхНалоговыйАгент))) КАК УсловиеПоОборотам
	|	ГДЕ
	|		УсловиеПоОборотам.СуммаБезНДСОборот + УсловиеПоОборотам.НДСОборот > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок)
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&МассивСчетовАвансовВыданных), , Организация = &Организация, , ) КАК УсловиеПоОборотам
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА УсловиеПоОборотам.Счет.Валютный
	|						И НЕ УсловиеПоОборотам.ВалютнаяСуммаОборотДт ЕСТЬ NULL
	|					ТОГДА УсловиеПоОборотам.ВалютнаяСуммаОборотДт
	|				ИНАЧЕ УсловиеПоОборотам.СуммаОборотДт
	|			КОНЕЦ > 0) КАК УсловиеОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ВосстановлениеНДСПоОбъектамНедвижимости)
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство.НедвижимоеИмущество
	|				И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)) КАК СостоянияОСОрганизацийСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ВосстановлениеНДС)
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И &РаздельныйУчетНДСДо2014Года
	|				И &УчетНДС2012) КАК УсловиеПоОборотам
	|ГДЕ
	|	УсловиеПоОборотам.СуммаБезНДСПриход > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейРаздела7ДекларацииНДС)
	|ИЗ
	|	РегистрНакопления.НДСНеоблагаемыеОперации.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И &РаздельныйУчетНДСНаСчете19) КАК НДСНеоблагаемыеОперацииОстатки
	|ГДЕ
	|	НДСНеоблагаемыеОперацииОстатки.СуммаРеализацииБезНДСОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейРаздела7ДекларацииНДС)
	|ИЗ
	|	РегистрНакопления.НДСНеоблагаемыеОперации.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И &РаздельныйУчетНДСНаСчете19) КАК НДСНеоблагаемыеОперацииОбороты
	|ГДЕ
	|	НДСНеоблагаемыеОперацииОбороты.СуммаРеализацииБезНДСПриход > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеСводнойСправки)
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И &ВедетсяРозничнаяТорговля
	|				И &УчетНДС2012
	|				И &ВерсияПостановленияНДС1137 >= 4) КАК НДСЗаписиКнигиПродажОбороты
	|ГДЕ
	|	НДСЗаписиКнигиПродажОбороты.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.Реализация)
	|	И (НДСЗаписиКнигиПродажОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ИЛИ НДСЗаписиКнигиПродажОбороты.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер)";
	
КонецФункции

#КонецОбласти

#Область ВыполнениеРегламентныхОпераций

// Процедура выполняет отражения факта выполнения регламентной операции в регистре сведений,
// при этом сбрасывается факт выполнения для всех подчиненных ей операций
Процедура ЗафиксироватьФактВыполненияРегламентнойОперации(ПериодРегистрации,
														  Организация,
														  Регистратор,
														  РегламентнаяОперация,
														  Актуальность = Истина) Экспорт
														  
	Ответственный = Пользователи.ТекущийПользователь();

	Набор = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СоздатьНаборЗаписей();
	Набор.Отбор.ПериодРегистрации.Установить(ПериодРегистрации);
	Набор.Отбор.Организация.Установить(Организация);
	Набор.Отбор.РегламентныйДокумент.Установить(Регистратор);
	Набор.Отбор.РегламентнаяОперация.Установить(РегламентнаяОперация);
	
	Набор.Прочитать();
	
	Если Набор.Количество() = 1 Тогда
		Запись = Набор[0];
		
		Запись.Ответственный = Ответственный;
		Запись.Актуальность  = Актуальность;
	Иначе
		Если Набор.Количество() > 1 Тогда
			Набор.Очистить();
		КонецЕсли;
		Запись = Набор.Добавить();
		Запись.Организация          = Организация;
		Запись.РегламентныйДокумент = Регистратор;
		Запись.ПериодРегистрации    = ПериодРегистрации;
		Запись.РегламентнаяОперация = РегламентнаяОперация;
		Запись.Ответственный        = Ответственный;
		Запись.Актуальность         = Актуальность;
	КонецЕсли;
	
	Набор.Записать();
	
	ДеревоОпераций = ЗаполнитьЗначенияДереваОпераций();
	
	СброситьФактВыполненияПодчиненныхОпераций(Организация, ПериодРегистрации,  ДеревоОпераций, РегламентнаяОперация, Регистратор);
	
КонецПроцедуры

// Процедура удаляет запись о выполнении регламентной операции в регистре сведений,
// при этом сбрасывается факт выполнения для всех подчиненных ей операций
Процедура УдалитьФактВыполненияРегламентнойОперации(ПериодРегистрации,
														  Организация,
														  Регистратор,
														  РегламентнаяОперация) Экспорт
														  
	Набор = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СоздатьНаборЗаписей();
	Набор.Отбор.ПериодРегистрации.Установить(ПериодРегистрации);
	Набор.Отбор.Организация.Установить(Организация);
	Если ЗначениеЗаполнено(Регистратор) Тогда 
		Набор.Отбор.РегламентныйДокумент.Установить(Регистратор);
	КонецЕсли;
	Набор.Отбор.РегламентнаяОперация.Установить(РегламентнаяОперация);
	
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать();
	
	ДеревоОпераций = ЗаполнитьЗначенияДереваОпераций();
	
	СброситьФактВыполненияПодчиненныхОпераций(Организация, ПериодРегистрации,  ДеревоОпераций, РегламентнаяОперация, Регистратор);
	
КонецПроцедуры

// Процедуры снимает признак выполнения для регламентных операций, включая подчиненные
Процедура СброситьФактВыполненияПодчиненныхОпераций(Знач Организация, ПериодРегистрации, ДеревоОпераций, Операция, Регистратор = Неопределено)
	Перем ОрганизацияЛокально;
	
	СтрокиДереваРегламентнойОперации = ДеревоОпераций.НайтиСтроки(Новый Структура("Узел", Операция));
	Для каждого СтрокаДереваРегламентнойОперации Из СтрокиДереваРегламентнойОперации Цикл
		Если СтрокаДереваРегламентнойОперации.Связи.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Набор = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СоздатьНаборЗаписей();
		Для каждого ПодчиненнаяОперация Из СтрокаДереваРегламентнойОперации.Связи Цикл
		
			Набор.Отбор.Организация.Установить(Организация);
			Набор.Отбор.ПериодРегистрации.Установить(ПериодРегистрации);
			Набор.Отбор.РегламентнаяОперация.Установить(ПодчиненнаяОперация.Значение);
			Набор.Прочитать();
			
			КолвоЗаписейВНаборе = Набор.Количество();
			Для ОбратныйИндекс = 1 По КолвоЗаписейВНаборе Цикл
				Запись = Набор[КолвоЗаписейВНаборе - ОбратныйИндекс];
				Если не Запись.Актуальность Тогда
					Продолжить;
				КонецЕсли; 
				
				Запись.Актуальность = Ложь;
				
			КонецЦикла;
			
			Набор.Записать();
			
			СброситьФактВыполненияПодчиненныхОпераций(Организация, ПериодРегистрации, ДеревоОпераций, ПодчиненнаяОперация.Значение, Регистратор);
		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#КонецЕсли