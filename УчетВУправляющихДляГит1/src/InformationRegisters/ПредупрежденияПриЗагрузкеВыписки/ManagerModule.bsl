#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает признак, что есть хотя бы одно предупреждение при загрузке выписки.
//
// Параметры:
//  Отбор - Структура - см. НовыеПараметрыОтбораПредупреждений()
//
// Возвращаемое значение:
//  - Булево - Есть хотя бы одно предупреждение, которое подходит под отборы.
//
Функция ЕстьПредупрежденияВСписке(Отбор) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПредупрежденияПриЗагрузкеВыписки.Документ КАК Документ,
	|	ПредупрежденияПриЗагрузкеВыписки.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ПредупрежденияПриЗагрузкеВыписки КАК ПредупрежденияПриЗагрузкеВыписки";
	
	Запрос = ЗапросДляОтбораПредупреждений(ТекстЗапроса, Отбор);
	
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Возвращает список документов, для которых есть предупреждение при загрузке выписки.
//
// Параметры:
//  Отбор - Структура - см. НовыеПараметрыОтбораПредупреждений()
//
// Возвращаемое значение:
//  - Массив - Документы, для которых есть предупреждения при загрузке.
//
Функция ДокументыСПредупреждениями(Отбор) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредупрежденияПриЗагрузкеВыписки.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.ПредупрежденияПриЗагрузкеВыписки КАК ПредупрежденияПриЗагрузкеВыписки";
	
	Запрос = ЗапросДляОтбораПредупреждений(ТекстЗапроса, Отбор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокументыТребующиеПроверки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ДокументыТребующиеПроверки.Добавить(Выборка.Документ);
	КонецЦикла;
	
	Возврат ДокументыТребующиеПроверки;
	
КонецФункции

// Возвращает текст предупреждения при загрузке для документа.
//
// Параметры:
//  ПараметрыДокумента	 - ДокументСсылка - Документ, для которого нужно сформировать предупреждение.
// 
// Возвращаемое значение:
//   - Строка - Форматированная строка с предупреждением.
//              Если предупреждения для документа нет - возвращается пустая строка.
//
Функция ПредупреждениеДляДокумента(ПараметрыДокумента) Экспорт
	
	Предупреждение = "";
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Документ", ПараметрыДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПредупрежденияПриЗагрузкеВыписки.СтрокаВыписки КАК СтрокаВыписки,
	|	ПредупрежденияПриЗагрузкеВыписки.ТекстСообщенияПользователю КАК ТекстСообщенияПользователю
	|ИЗ
	|	РегистрСведений.ПредупрежденияПриЗагрузкеВыписки КАК ПредупрежденияПриЗагрузкеВыписки
	|ГДЕ
	|	ПредупрежденияПриЗагрузкеВыписки.Документ = &Документ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаВыписки = Выборка.СтрокаВыписки.Получить();
		Если ЗначениеЗаполнено(Выборка.ТекстСообщенияПользователю) Тогда
			Предупреждение = Выборка.ТекстСообщенияПользователю;
		Иначе
			Предупреждение = ТекстПредупрежденияПоСтрокеВыписки(СтрокаВыписки, ПараметрыДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Предупреждение;
	
КонецФункции

// Функция - Есть предупреждение при загрузке выписик для документа.
//
// Параметры:
//  Документ - ДокументСсылка - Документ, для которого нужно получить признак, что при загрузке было
//                              получено предупреждение.
// 
// Возвращаемое значение:
//   - Булево - для документа есть предупреждение при загрузке выписки.
//
Функция ЕстьПредупреждениеДляДокумента(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Документ", Документ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредупрежденияПриЗагрузкеВыписки.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.ПредупрежденияПриЗагрузкеВыписки КАК ПредупрежденияПриЗагрузкеВыписки
	|ГДЕ
	|	ПредупрежденияПриЗагрузкеВыписки.Документ = &Документ";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Процедура - Удаляет предупреждение при загрузке выписки для документа.
//
// Параметры:
//  Документ - ДокументСсылка - Документ, для которого нужно удалить предупреждение.
//
Процедура УдалитьПредупреждениеДляДокумента(Документ) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает параметры отбора предупреждений при загрузке выписки.
//
// Возвращаемое значение:
//  Структура:
//    * Организация     - СправочникСсылка.Организации     - Организация, для которой ищется предупреждение.
//                                                           Если не задана, то по всем организациям.
//    * СчетОрганизации - СправочникСсылка.БанковскиеСчета - Счет организации, для которого ищется предупреждение.
//                                                           Если не задан, то по всем счетам организаций.
//    * НачалоПериода   - Дата                             - Дата, с которой ищутся документы с предупреждениями.
//    * КонецПериода    - Дата                             - Дата, по которую ищутся документы с предупреждениями.
//                                                           Если задан, то приводится к концу дня.
//    * ТипДокументов   - Строка                           - Тип документов, для которых нужно проверить наличие предупреждений.
//                                                           Принимает значения: "ПоступлениеНаРасчетныйСчет", "СписаниеСРасчетногоСчета".
//                                                           Если не задан, то по всем документам.
//
Функция НовыеПараметрыОтбораПредупреждений() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыОтбора.Вставить("СчетОрганизации", Справочники.БанковскиеСчета.ПустаяСсылка());
	ПараметрыОтбора.Вставить("НачалоПериода", Дата(1,1,1));
	ПараметрыОтбора.Вставить("КонецПериода", Дата(1,1,1));
	ПараметрыОтбора.Вставить("ТипДокументов", "");
	
	Возврат ПараметрыОтбора;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстПредупрежденияПоСтрокеВыписки(СтрокаВыписки, ПараметрыДокумента)
	
	ТекстПредупреждений = Новый Массив;
	
	РаспознаннаяОперация = ЗагрузкаВыпискиПоБанковскомуСчету.РаспознатьОперациюДокумента(
		СтрокаВыписки, ПараметрыДокумента);
	Если ЗначениеЗаполнено(РаспознаннаяОперация)
		И ЗначениеЗаполнено(РаспознаннаяОперация.Предупреждения) Тогда
		
		Для Каждого Предупреждение Из РаспознаннаяОперация.Предупреждения Цикл
			ТекстПредупреждений.Добавить(ТекстПредупреждения(РаспознаннаяОперация, Предупреждение));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрСоединить(ТекстПредупреждений);
	
КонецФункции

Функция ТекстПредупреждения(РаспознаннаяОперация, Предупреждение)
	
	Если Предупреждение.КодПроблемы = "СлучайныйВыбор" Тогда
		Возврат ПредупреждениеСлучайногоВыбораКонтрагента(РаспознаннаяОперация, Предупреждение);
	Иначе
		Возврат Предупреждение.Текст;
	КонецЕсли;
	
КонецФункции

Функция ПредупреждениеСлучайногоВыбораКонтрагента(РаспознаннаяОперация, Предупреждение)
	
	Операция = РаспознаннаяОперация.Операция;
	
	ИдентификаторыКонтрагента = ?(Операция.ПоступилоСписано = "Поступило", 
		Операция.ПлательщикИдентификаторы, Операция.ПолучательИдентификаторы);
	ИдентификаторыУчастников = РаспознаннаяОперация.УчастникиОпераций.Идентификаторы;
	ЭлементыИдентификаторов = ЭлементыИдентификаторов();
	
	РеквизитыКонтрагента = РеквизитыКонтрагентаИзИдентификаторов(
		ИдентификаторыКонтрагента, ИдентификаторыУчастников, ЭлементыИдентификаторов);
	
	Возврат ТекстПредупрежденияСлучайногоВыбораКонтрагента(Операция, Предупреждение, РеквизитыКонтрагента);
	
КонецФункции

Функция ТекстПредупрежденияСлучайногоВыбораКонтрагента(Операция, Предупреждение, РеквизитыКонтрагента)
	
	ЭлементыИдентификаторов = ЭлементыИдентификаторов();
	
	ОписаниеРеквизитов = Новый Массив;
	Для Каждого ИдентификаторРеквизита Из ПорядокВыводаЭлементовИдентификатора() Цикл
		ЗначениеРеквизита = РеквизитыКонтрагента.Получить(ИдентификаторРеквизита);
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ОписаниеРеквизита = СтрШаблон(НСтр("ru = '%1 %2'"), 
				ЭлементыИдентификаторов.Получить(ИдентификаторРеквизита), ЗначениеРеквизита);
			ОписаниеРеквизитов.Добавить(ОписаниеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоКонтрагентов = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';%1 контрагент;;%1 контрагента;%1 контрагентов;%1 контрагента'"),
		Предупреждение.ДетальныеДанные.Количество());
	
	ШаблонСообщения = НСтр("ru = 'Проверьте, верно ли указан %1.
								|Реквизитам %2 соответствуют %3.'");
	
	Возврат СтрШаблон(ШаблонСообщения,
		?(Операция.ПоступилоСписано = "Поступило", НСтр("ru = 'плательщик'"), НСтр("ru = 'получатель'")),
		СтрСоединить(ОписаниеРеквизитов, ", "),
		КоличествоКонтрагентов);
	
КонецФункции

Функция ЭлементыИдентификаторов()
	
	Элементы = Новый Соответствие;
	Элементы.Вставить("НомерБанковскогоСчета", НСтр("ru = 'р/с'"));
	Элементы.Вставить("ИНН", НСтр("ru = 'ИНН'"));
	Элементы.Вставить("КПП", НСтр("ru = 'КПП'"));
	Возврат Элементы;
	
КонецФункции

Функция ПорядокВыводаЭлементовИдентификатора()
	
	ПорядокВывода = Новый Массив;
	ПорядокВывода.Добавить("НомерБанковскогоСчета");
	ПорядокВывода.Добавить("ИНН");
	ПорядокВывода.Добавить("КПП");
	Возврат ПорядокВывода;
	
КонецФункции

Функция РеквизитыКонтрагентаИзИдентификаторов(ИдентификаторыКонтрагента, ИдентификаторыУчастников, ЭлементыИдентификаторов)
	
	РеквизитыКонтрагента = Новый Соответствие();
	
	Для Каждого Идентификатор ИЗ ИдентификаторыКонтрагента Цикл
		ИдентификаторыУчастника = ИдентификаторыУчастников.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
		Для Каждого ИдентификаторУчастника Из ИдентификаторыУчастника Цикл
			Для Каждого ЭлементСостава Из ИдентификаторУчастника.Состав Цикл
				Если ЭлементыИдентификаторов.Получить(ЭлементСостава.Ключ) <> Неопределено Тогда
					РеквизитыКонтрагента.Вставить(ЭлементСостава.Ключ, ЭлементСостава.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат РеквизитыКонтрагента;
	
КонецФункции

Функция ЗапросДляОтбораПредупреждений(ШаблонТекстаЗапроса, ПараметрыЗапроса)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапроса);
	
	ОператорыЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Организация) Тогда
		ОператорыЗапроса.Отбор.Добавить("ПредупрежденияПриЗагрузкеВыписки.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", ПараметрыЗапроса.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.СчетОрганизации) Тогда
		ОператорыЗапроса.Отбор.Добавить("ПредупрежденияПриЗагрузкеВыписки.Документ.СчетОрганизации = &СчетОрганизации");
		Запрос.УстановитьПараметр("СчетОрганизации", ПараметрыЗапроса.СчетОрганизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.НачалоПериода) Тогда
		ОператорыЗапроса.Отбор.Добавить("ПредупрежденияПриЗагрузкеВыписки.Документ.Дата >= &НачалоПериода");
		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыЗапроса.НачалоПериода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.КонецПериода) Тогда
		ОператорыЗапроса.Отбор.Добавить("ПредупрежденияПриЗагрузкеВыписки.Документ.Дата <= &КонецПериода");
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыЗапроса.КонецПериода));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ТипДокументов) Тогда
		ОператорыЗапроса.Отбор.Добавить("ПредупрежденияПриЗагрузкеВыписки.Документ ССЫЛКА Документ." + ПараметрыЗапроса.ТипДокументов);
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#КонецЕсли