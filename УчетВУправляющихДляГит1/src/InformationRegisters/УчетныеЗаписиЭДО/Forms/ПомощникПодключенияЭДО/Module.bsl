 
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания, КонтекстОперацииПодписания;

&НаКлиенте
Перем ОбработчикРезультатаДанные, ОтветДанные;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ПолучатьИдентификаторыВСервисе1СЭДО = Истина;
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	Элементы.СтраницыПомощника.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО;
	ТипРегистрации = 2;
	
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	Параметры.Свойство("КнопкаНазадДоступна", КнопкаНазадДоступна);
	
	ИспользуетсяНесколькоОрганизацийЭД = ЭлектронноеВзаимодействиеСлужебный.ИспользуетсяНесколькоОрганизаций();
	
	Если Не ИспользуетсяНесколькоОрганизацийЭД И НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ЭлектронноеВзаимодействиеСлужебный.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) И ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность") Тогда
		
		МодульЭлектронныйДокументооборотСКонтролирующимиОрганами = ОбщегоНазначения.ОбщийМодуль("ЭлектронныйДокументооборотСКонтролирующимиОрганами");
		
		СтруктураПараметров = Новый Структура("ОтпечатокСертификатаПодписи, ЭлектроннаяПодписьВМоделиСервиса, КодНО, ТипКриптоПровайдера");
		МодульЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаполнитьПараметрыДляФормыПодключенияКСервисуЭлектронныхДокументов(
			Организация, СтруктураПараметров);
		
		Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
			
			ЭПВМоделиСервиса = Ложь;
			Если СтруктураПараметров.Свойство("ЭлектроннаяПодписьВМоделиСервиса", ЭПВМоделиСервиса)
				И ЭПВМоделиСервиса <> Истина Тогда
				СтруктураПараметров.Свойство("ОтпечатокСертификатаПодписи", ОтпечатокСертификата);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
				КодНалоговогоОргана = СтруктураПараметров.КодНО;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СпособыОбменаЭД = "";
	Если Параметры.Свойство("СпособыОбменаЭД", СпособыОбменаЭД) И ЗначениеЗаполнено(СпособыОбменаЭД) Тогда
		Если СпособыОбменаЭД.Количество() = 1 Тогда
			СпособОбменаЭД = СпособыОбменаЭД[0];
			Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО;
				Заголовок = Элементы.СтраницаПодключенияК1СЭДО.Заголовок;
				
				Если Параметры.Свойство("ДополнительныеПараметры") И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры)
					И ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
					
					ОбработатьДополнительныеПараметры(Параметры.ДополнительныеПараметры);
					
				КонецЕсли;
				
				ТипРегистрации = 2;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗначенияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбменСКонтрагентамиСлужебныйКлиент.ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки, АдресЭлектроннойПочтыСлужбыПоддержки);
	
	Если ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
		
		Контекст = Новый Структура;
		Контекст.Вставить("Организация", Организация);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПослеПолученияОтпечатковПолучитьМенеджерКриптографии", ЭтотОбъект, Контекст);
		ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
	КонецЕсли;
	
	ЗапуститьОжиданиеПолученияИдентификаторовЭДО();
	
	Если Не ИнтернетПоддержкаПользователейПодключена Тогда
		ПодключитьОбработчикОжидания("ПодключитьИнтернетПоддержкуПользователей", 1, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПодключенияК1СЭДОПриИзменении(Элемент)
	
	ИдентификаторОрганизации = "";
	ИдентификаторОрганизацииСуществующий = "";
	Элементы.ИдентификаторОрганизацииЧерез1СЭДО.СписокВыбора.Очистить();
	
	// Очистить адрес организации
	АдресОрганизации = "";
	КодНалоговогоОргана = "";
	
	УстановитьЗначенияПоУмолчанию();
	
	ЗапуститьОжиданиеПолученияИдентификаторовЭДО();
КонецПроцедуры

&НаКлиенте
Процедура ТипРегистрацииСуществующаяУчетнаяЗаписьПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ТипРегистрацииНоваяУчетнаяЗаписьПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СертификатЭПЧерезОператораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЭлектроннаяПодписьКлиент.СертификатНачалоВыбораСПодтверждением(Элемент,
			СертификатКриптографии, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СертификатЭПЧерезОператораОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение)
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		
		МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиентСервер");
		Если МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно()
			И НЕ ОбменСКонтрагентамиСлужебныйКлиентПовтИсп.ИспользованиеСертификатовОблачногоСервисаВозможно()
			И ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСертификатОблачногоСервиса(ВыбранноеЗначение) Тогда
			
			СтандартнаяОбработка = Ложь;
			ТекстСообщения = НСтр("ru = 'Выбранный сертификат связан с недопустимым средством ""облачной"" электронной подписи.
				|Согласно приказу Минфина РФ от 10.11.2015 № 174Н электронные документы должны быть подписаны
				|усиленной квалифицированной электронной подписью с использованием средств электронной подписи,
				|имеющих подтверждение (сертификат) соответствия требованиям, установленным в соответствии с Федеральным законом от 06.04.2011 N 63-ФЗ.
				|Выберите сертификат, связанный с другим средством электронной подписи.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорЭДОПодключенныйК1СЭДОПриИзменении(Элемент)
	
	ПолучитьСпособОбменаПоОператоруЭДО();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОрганизацииЧерез1СЭДОПриИзменении(Элемент)
	
	Для Каждого Оператор Из ОператорыЭДО Цикл
		
		ИдентификаторОператора = Оператор.Идентификатор;
		ДлинаИдентификатораОператора = СтрДлина(ИдентификаторОператора);
		
		Если Лев(ИдентификаторОрганизацииСуществующий, ДлинаИдентификатораОператора) = ИдентификаторОператора Тогда
			ИдентификаторОператораЭДО = Оператор.Идентификатор;
			СпособОбменаЭД = Оператор.СпособОбменаЭД;
			Отбор = Новый Структура("Идентификатор", ИдентификаторОператораЭДО);
			НайденныеСтроки = ОператорыЭДО.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() Тогда
				ОператорЭДО = НайденныеСтроки[0].Наименование;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУсловияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.УсловияИспользования");
КонецПроцедуры

&НаКлиенте
Процедура АдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидКонтактнойИнформации = ПараметрыВидаКонтактнойИнформации(
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
		
	ВидКонтактнойИнформации.Вставить("РедактированиеТолькоВДиалоге", Истина);
	ВидКонтактнойИнформации.Вставить("ОбязательноеЗаполнение", Истина);
	ВидКонтактнойИнформации.Вставить("Наименование", НСтр("ru = 'Юридический адрес организации'"));
	
	ВидКонтактнойИнформации.НастройкиПроверки.ПроверятьКорректность = Истина;
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ВидКонтактнойИнформации, ЗначениеПолейАдреса, АдресОрганизации,,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение", ЭтотОбъект);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПолучитьКодИМНСЗавершение", ЭтотОбъект);
	
	СтандартнаяОбработкаМетода = Истина;
	ОбменСКонтрагентамиКлиентПереопределяемый.ЗаполнитьКодНалоговогоОргана(Оповещение, СтандартнаяОбработкаМетода);
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КодНалоговогоОргана)) Тогда
		ПараметрыФормы.Вставить("КодНалоговогоОргана", КодНалоговогоОргана);
	КонецЕсли;
	Если СтандартнаяОбработкаМетода Тогда
		ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.ВводКодаНалоговогоОргана", ПараметрыФормы,
				УникальныйИдентификатор, , , , Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлятьОСобытияхПриИзменении(Элемент)
	
	Элементы.ГруппаПодУведомления.Доступность           = УведомлятьОСобытиях;
	
	УведомлятьОНовыхПриглашениях                        = УведомлятьОСобытиях;
	УведомлятьОбОтветахНаПриглашения                    = УведомлятьОСобытиях;
	УведомлятьОНовыхДокументах                          = УведомлятьОСобытиях;
	УведомлятьОНеобработанныхДокументах                 = УведомлятьОСобытиях;
	УведомлятьОбОкончанииСрокаДействияСертификата       = УведомлятьОСобытиях;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		Результат = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЭлектроннаяПочта);
		ЭлектроннаяПочтаНеКорректна = Не Результат;
	Иначе
		ЭлектроннаяПочтаНеКорректна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатЭПЧерезОператораПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НадписьПодключениеТакскомВМоделиСервисаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ВыбратьСуществующий" Тогда
		СтандартнаяОбработка = Ложь;
		ТипРегистрации = 1;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПо1СБухфон(Команда)
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьИнструкциюПо1СБухфон();
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ПолучитьСпособОбменаПоОператоруЭДО();
	
	Если ПустаяСтрока(НаименованиеУчетнойЗаписи) Тогда
		ШаблонНаименование = НСтр("ru = '%1, %2'");
		НаименованиеУчетнойЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименование,
			Организация, СпособОбменаЭД);
	КонецЕсли;
		
	ЗаполнитьОписаниеУчетнойЗаписи();
	ИзменитьТекущуюСтраницу(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если ВыполняетсяРегистрация Тогда
		
		Описание = Новый ОписаниеОповещения("ОтменаОперации", ЭтотОбъект, Ложь);
		
		ПоказатьВопрос(Описание,
			НСтр("ru = 'Подключение еще не завершено.Хотите его прервать и вернуться на предыдущий этап?'")
				,РежимДиалогаВопрос.ДаНет);
	Иначе
		ИзменитьТекущуюСтраницу(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ОчиститьСообщения();
	
	Отказ = ПроверкаЗаполнения();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеПроверки = Новый ОписаниеОповещения("НачатьРегистрацияВСервисе", ЭтотОбъект);
	ВыполнитьПроверкиПередПолучениемИдентификатора(ОповещениеПослеПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Описание = Новый ОписаниеОповещения("ОтменаОперации", ЭтотОбъект, Истина);
	ПоказатьВопрос(Описание, НСтр("ru = 'Подключение еще не завершено. Хотите его прервать и выйти?'")
				,РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформации)

	Возврат УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформации);

КонецФункции

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуПользователей()

	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект);
	ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);

КонецПроцедуры // Проверить()

&НаКлиенте
Процедура ОтменаОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ДополнительныеПараметры = Ложь Тогда
			ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД");
			ВыполняетсяРегистрация = Ложь;
			УправлениеФормой(ЭтотОбъект);
			ИзменитьТекущуюСтраницу(Ложь);
		Иначе
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаУведомления.Видимость = Форма.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО");
	Элементы.ГруппаУведомления.Видимость = Элементы.ГруппаУведомления.Видимость И Форма.ТипРегистрации = 2;
	
	ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	
	СписокИдентификаторов = Элементы.ИдентификаторОрганизацииЧерез1СЭДО.СписокВыбора;
	
	Элементы.ТипРегистрацииСуществующаяУчетнаяЗапись.Доступность = СписокИдентификаторов.Количество();
	Элементы.ИдентификаторОрганизацииЧерез1СЭДО.Доступность      = Форма.ТипРегистрации = 1;
	Элементы.ОператорЭДОПодключенныйК1СЭДО.Доступность           = Форма.ТипРегистрации = 2;
	
	ТребуетсяЗаявкаНаРегистрацию = Ложь;
	ПодключениеТакскомВМоделиСервиса = ПодключениеТакскомВМоделиСервиса(Форма);
	Если Форма.ТипРегистрации = 2 И ПодключениеТакскомВМоделиСервиса Тогда
		
		ИдентификаторОператораТакском = ИдентификаторОператораТакском(Форма);
		Если Не СтрНачинаетсяС(Форма.ИдентификаторОрганизацииСуществующий, ИдентификаторОператораТакском) Тогда
			ТребуетсяЗаявкаНаРегистрацию = Истина;
			Если ЗначениеЗаполнено(СписокИдентификаторов) Тогда
				Для Каждого ЭлементСписка Из СписокИдентификаторов Цикл
					Если СтрНачинаетсяС(ЭлементСписка.Значение, ИдентификаторОператораТакском) Тогда
						Форма.ИдентификаторОрганизацииСуществующий = ЭлементСписка.Значение;
						ТребуетсяЗаявкаНаРегистрацию = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НадписьПодключениеТакскомВМоделиСервиса.Видимость = ТребуетсяЗаявкаНаРегистрацию;
	
	Элементы.ПроверьтеДанныеОрганизации.Видимость = Не ПодключениеТакскомВМоделиСервиса;
	Элементы.УчетнаяЗапись.Видимость = Не ПодключениеТакскомВМоделиСервиса;
	
	Элементы.ГруппаОтправкаЗаявленияНаРегистрацию.Видимость = Не ПодключениеТакскомВМоделиСервиса;
	Элементы.ГруппаОжиданиеОтветаОтОператора.Видимость = Не ПодключениеТакскомВМоделиСервиса;
	
	Доступна = Ложь;
	Если ЗначениеЗаполнено(Форма.Организация)
		И ЗначениеЗаполнено(Форма.СертификатКриптографии)
		И ((Форма.ТипРегистрации = 2 И ЗначениеЗаполнено(Форма.ОператорЭДО))
			Или (Форма.ТипРегистрации = 1 И ЗначениеЗаполнено(Форма.ИдентификаторОрганизацииСуществующий)))
		И Не ТребуетсяЗаявкаНаРегистрацию Тогда
		
		Доступна = Истина;
	КонецЕсли;
	
	ЭлементСписка = Элементы.ИдентификаторОрганизацииЧерез1СЭДО.СписокВыбора.НайтиПоЗначению(Форма.ИдентификаторОрганизацииСуществующий);
	Пометка = Форма.ТипРегистрации = 1 И ЭлементСписка <> Неопределено И ЭлементСписка.Пометка;
	Если Не ЗначениеЗаполнено(Форма.ДлительнаяОперация) Тогда
		Элементы.ГруппаОшибкаВыбора.Видимость = Пометка;
		Элементы.ГруппаПодсказка.Видимость    = Не Пометка;
		Элементы.ГруппаПолучениеДанных.Видимость = Ложь;
	Иначе
		Элементы.ГруппаОшибкаВыбора.Видимость    = Ложь;
		Элементы.ГруппаПодсказка.Видимость       = Ложь;
		Элементы.ГруппаПолучениеДанных.Видимость = Истина;
	КонецЕсли;
	
	ПоказатьДалее = ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО;
	
	Элементы.Далее.Видимость          = ПоказатьДалее;
	Элементы.Далее.КнопкаПоУмолчанию  = ПоказатьДалее;
	Элементы.Далее.Доступность = Доступна И Не Пометка И Форма.ИнтернетПоддержкаПользователейПодключена;
	
	ПоказатьГотово = ТекущаяСтраница = Элементы.СтраницаЗапросаСведений;
	Элементы.Готово.Видимость                     = ПоказатьГотово;
	Элементы.Готово.КнопкаПоУмолчанию             = ПоказатьГотово;
	Элементы.ГруппаУсловияИспользования.Видимость = ПоказатьГотово;
	
	
	Элементы.Назад.Видимость             = ТекущаяСтраница <> Элементы.СтраницаПодключенияК1СЭДО Или Форма.КнопкаНазадДоступна;
	Элементы.Закрыть.Видимость           = Не Форма.ВыполняетсяРегистрация;
	Элементы.Отмена.Видимость            =    Форма.ВыполняетсяРегистрация И ТекущаяСтраница = Элементы.СтраницаОжиданиеРегистрации;
	Элементы.Повторить.Видимость         = Не Форма.ВыполняетсяРегистрация И ТекущаяСтраница = Элементы.СтраницаОжиданиеРегистрации;
	Элементы.Повторить.КнопкаПоУмолчанию = Элементы.Повторить.Видимость;
	
	Цвет = Новый Цвет;
	Если ПустаяСтрока(Форма.АдресОрганизации) Тогда
		
		Форма.АдресОрганизацииПредставление = НСтр("ru = 'Заполните адрес организации'");
		Цвет = WebЦвета.Красный;
	Иначе
		
		Форма.АдресОрганизацииПредставление = Форма.АдресОрганизации;
		
	КонецЕсли;
	
	Элементы.АдресОрганизации.ЦветТекста = Цвет;
	
	Цвет = Новый Цвет;
	
	КодНалоговогоОргана = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Форма.КодНалоговогоОргана);
	Если Не ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		
		Форма.КодНалоговогоОргана = НСтр("ru = 'Укажите код налогового органа'");
		Цвет = WebЦвета.Красный;
		
	КонецЕсли;
	
	Элементы.КодНалоговогоОргана.ЦветТекста = Цвет;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекущуюСтраницу(Вперед)
	
	Страницы = Новый Массив;
	Страницы.Добавить(Элементы.СтраницаПодключенияК1СЭДО);
	Страницы.Добавить(Элементы.СтраницаЗапросаСведений);
	Страницы.Добавить(Элементы.СтраницаОжиданиеРегистрации);
	
	ТекущаяСтраница = Страницы.Найти(Элементы.СтраницыПомощника.ТекущаяСтраница);
	
	Если Вперед = Истина Тогда
		ТекущаяСтраница = ТекущаяСтраница + 1;
	ИначеЕсли Вперед = Ложь Тогда
		ТекущаяСтраница = ТекущаяСтраница - 1;
	КонецЕсли;
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Страницы[ТекущаяСтраница];
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаСостоянияПолученияИдентификатораЭД(ОтправкаЗаявления, ОжиданиеОтвета = Неопределено, СозданиеУчетнойЗаписи = Неопределено)
	
	Элементы.ГруппаЗаявлениеВыполнение.Видимость = ОтправкаЗаявления = Ложь;
	Элементы.ГруппаЗаявлениеВыполнено.Видимость  = ОтправкаЗаявления = Истина;
	Элементы.ГруппаЗаявлениеОшибка.Видимость     = ОтправкаЗаявления = "Ошибка";
	
	Элементы.ГруппаОжиданияОтветаОжидание.Видимость   = ОжиданиеОтвета = Неопределено;
	Элементы.ГруппаОжиданияОтветаВыполнение.Видимость = ОжиданиеОтвета = Ложь;
	Элементы.ГруппаОжиданияОтветаВыполнено.Видимость  = ОжиданиеОтвета = Истина;
	Элементы.ГруппаОжиданияОтветаОшибка.Видимость     = ОжиданиеОтвета = "Ошибка";
	
	Элементы.ГруппаСозданиеУчетнойЗаписиЭДООжидание.Видимость   = СозданиеУчетнойЗаписи = Неопределено;
	Элементы.ГруппаСозданиеУчетнойЗаписиЭДОВыполнение.Видимость = СозданиеУчетнойЗаписи = Ложь;
	Элементы.ГруппаСозданиеУчетнойЗаписиЭДОВыполнено.Видимость  = СозданиеУчетнойЗаписи = Истина;
	Элементы.ГруппаСозданиеУчетнойЗаписиЭДООшибка.Видимость     = СозданиеУчетнойЗаписи = "Ошибка";
	
	Если ОтправкаЗаявления = "Ошибка"
			Или ОжиданиеОтвета = "Ошибка"
				Или СозданиеУчетнойЗаписи = "Ошибка" Тогда
				
				ВыполняетсяРегистрация = Ложь;
				
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПодключениеТакскомВМоделиСервиса(Форма)
	Возврат Форма.РазделениеВключено
		И Форма.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторОператораТакском(Форма)
	
	Отбор = Новый Структура("СпособОбменаЭД",
		ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском"));
	НайденныеСтроки = Форма.ОператорыЭДО.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		Результат = НайденныеСтроки[0].Идентификатор;
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ИнициализацияДанных

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗначенияПоУмолчанию();
	ЗапуститьОжиданиеПолученияИдентификаторовЭДО();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлектроннаяПочтаНеКорректна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЭлектроннаяПочта");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодключенныхОператоровЭДО()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОператорыЭДО.ИНН КАК ИНН,
		|	ОператорыЭДО.КПП КАК КПП,
		|	ОператорыЭДО.ОГРН КАК ОГРН,
		|	ОператорыЭДО.ОтпечатокСертификата КАК Сертификат,
		|	ОператорыЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ОператорыЭДО.Представление КАК Наименование,
		|	ОператорыЭДО.ИдентификаторОператора КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
		|ГДЕ
		|	ОператорыЭДО.ДоступноПодключениеЧерез1С";
	
	ТаблицаОператоров = Запрос.Выполнить().Выгрузить();
	ОператорыЭДО.Загрузить(ТаблицаОператоров);
	
	МассивОператоровЭДО = ТаблицаОператоров.ВыгрузитьКолонку("Наименование");
	Элементы.ОператорЭДОПодключенныйК1СЭДО.СписокВыбора.ЗагрузитьЗначения(МассивОператоровЭДО);
	Если ЗначениеЗаполнено(МассивОператоровЭДО) Тогда
		ОператорЭДО = МассивОператоровЭДО[0];
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Обновление_данных_на_форме

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	ЗаполнитьАдресЭлектроннойПочты();
	
	ИнтернетПоддержкаПользователейПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	СертификатКриптографии = ПолучитьЕдинственныйСертификатОрганизации(Организация);
	
	Если ИспользоватьЭП И ЗначениеЗаполнено(Организация) Тогда
		
		ЗаполнитьРеквизитыОрганизацииДляРегистрационногоПакета();
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	Элементы.СтраницыЗагрузки.ТекущаяСтраница = Элементы.СтраницаЗагрузкиДанных;
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение идентификаторов в сервисе ЭДО'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
				"ОбменСКонтрагентамиСлужебный.ПолучитьИдентификаторыВСервисе1СЭДО", Организация, ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЕдинственныйСертификатОрганизации(Знач Организация)
	
	
	СертификатКриптографии = Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат СертификатКриптографии;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сертификаты.Ссылка
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|ГДЕ
	|	Сертификаты.Организация = &Организация
	|	И НЕ Сертификаты.ПометкаУдаления
	|	И НЕ Сертификаты.Отозван";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		СертификатКриптографии = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СертификатКриптографии;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыОрганизацииДляРегистрационногоПакета()
	
	ДанныеАдреса = Новый Структура;
	ДанныеОрганизации = Новый Структура;
	ЭлектронноеВзаимодействиеПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации(Организация, ДанныеОрганизации);
	
	Если ДанныеОрганизации.Свойство("КодИМНС") Тогда
		КодНалоговогоОргана = ДанныеОрганизации.КодИМНС;
	КонецЕсли;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,
							Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса(), Ложь);
							
	НайденныеСтроки      = КонтактнаяИнформация.НайтиСтроки(Новый Структура(
		"Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		АдресОрганизации    = НайденныеСтроки[0].Представление;
		ЗначениеПолейАдреса = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОжиданиеПолученияИдентификаторовЭДО()
	
	Если Не ПолучатьИдентификаторыВСервисе1СЭДО Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Описание = Новый ОписаниеОповещения("ПриПолученииИдентификаторовОрганизации", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииИдентификаторовОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьПодключенныхОператоровЭДО();
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено Тогда
		Элементы.СтраницыЗагрузки.ТекущаяСтраница = Элементы.ГруппаИдентификатораСИнтернетПоддержкой2;
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		СписокИдентификаторов = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ЗначениеЗаполнено(СписокИдентификаторов) Тогда
			
			ИдентификаторОрганизацииСуществующий = СписокИдентификаторов[0].Значение;
			Элементы.ИдентификаторОрганизацииЧерез1СЭДО.СписокВыбора.Очистить();
			
			Для Каждого СтрокаСписка Из СписокИдентификаторов Цикл
				
				Элементы.ИдентификаторОрганизацииЧерез1СЭДО.СписокВыбора.Добавить(СтрокаСписка.Значение,
						СтрокаСписка.Представление, СтрокаСписка.Пометка);
				
			КонецЦикла;
			
			ТипРегистрации = ?(ЗначениеЗаполнено(ИдентификаторОрганизацииСуществующий), 1, 2);
			
			ИдентификаторОрганизацииЧерез1СЭДОПриИзменении(Неопределено);
			
		КонецЕсли;
		
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
	Элементы.СтраницыЗагрузки.ТекущаяСтраница = Элементы.ГруппаИдентификатораСИнтернетПоддержкой2;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресЭлектроннойПочты()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		
		МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		
		МетаданныеТипыКонтактнойИнформации = Метаданные.Перечисления.Найти("ТипыКонтактнойИнформации");
		МетаданныеАдресЭлектроннойПочты = МетаданныеТипыКонтактнойИнформации.ЗначенияПеречисления.Найти("АдресЭлектроннойПочты");
		
		Если Не (МетаданныеТипыКонтактнойИнформации = Неопределено
			Или МетаданныеАдресЭлектроннойПочты = Неопределено) Тогда
			
			ТипыКонтактнойИнформации = Перечисления["ТипыКонтактнойИнформации"];
			АдресЭлектроннойПочты = ТипыКонтактнойИнформации["АдресЭлектроннойПочты"];
			
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(Организация);
			КонтактнаяИнформацияОбъекта = МодульОчередьЗаданий.КонтактнаяИнформацияОбъектов(МассивОбъектов,
				АдресЭлектроннойПочты,, ТекущаяДатаСеанса());
			
			Если КонтактнаяИнформацияОбъекта.Количество() > 0 Тогда
				ЭлектроннаяПочта = КонтактнаяИнформацияОбъекта[0].Представление;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКодИМНСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		КодНалоговогоОргана = Формат(Результат, "ЧГ=");
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		АдресИзменен = Истина;
		АдресОрганизации = Результат.Представление;
		ЗначениеПолейАдреса = Результат.Значение;

		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСпособОбменаПоОператоруЭДО()
	
	Если ТипРегистрации = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Оператор Из ОператорыЭДО Цикл
		
		Если Оператор.Наименование = ОператорЭДО Тогда
			ИдентификаторОператораЭДО = Оператор.Идентификатор;
			СпособОбменаЭД    = Оператор.СпособОбменаЭД;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Добавление_учетной_записи

&НаКлиенте
Функция ПроверкаЗаполнения()
	
	Отказ = Ложь;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УведомлятьОСобытиях = УведомлятьОСобытиях И (УведомлятьОНовыхПриглашениях
		Или УведомлятьОНовыхДокументах Или УведомлятьОНеобработанныхДокументах
		Или УведомлятьОбОтветахНаПриглашения Или УведомлятьОбОкончанииСрокаДействияСертификата);
	
	ПодключениеТакскомВМоделиСервиса = ПодключениеТакскомВМоделиСервиса(ЭтотОбъект);
	
	// Тестируем заполненность формы
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", "Организация"),
				,
				"Организация",
				,
				Отказ);
	КонецЕсли;
	
	Если ЭлектроннаяПочтаНеКорректна Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "КОРРЕКТНОСТЬ", НСтр("ru = 'Адрес электронной почты'")),
				,
				"ЭлектроннаяПочта",
				,
				Отказ);
	КонецЕсли;
	
	Если Не СоглашаюсьСУсловиямиИспользования Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Согласитесь с условиями использования'"),
				,
				"СоглашаюсьСУсловиямиИспользования",
				,
				Отказ);
			КонецЕсли;
			
	Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
				"ИспользоватьЭлектронныеПодписиЭД") Тогда
		
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ТекстСообщенияОНеобходимостиНастройкиСистемы("НАСТРОЙКАКРИПТОГРАФИИ");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СертификатКриптографии) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Сертификат ключа электронной подписи'")),
				,
				"СертификатКриптографии",
				,
				Отказ);
	КонецЕсли;
			
	Если Не ЗначениеЗаполнено(АдресОрганизации) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "КОРРЕКТНОСТЬ", НСтр("ru = 'Юридический адрес'")),
				,
				"АдресОрганизацииПредставление",
				,
				Отказ);
	КонецЕсли;
	
	Если Не ПодключениеТакскомВМоделиСервиса
		И Не ЗначениеЗаполнено(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КодНалоговогоОргана)) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Код налогового органа'")),
				,
				"КодНалоговогоОргана",
				,
				Отказ);
	КонецЕсли;
	
	Если Не ПодключениеТакскомВМоделиСервиса
		И Не ЗначениеЗаполнено(ЭлектроннаяПочта)
			И УведомлятьОСобытиях 
				И ТипРегистрации = 2 Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Электронная почта'")),
				,
				"ЭлектроннаяПочта",
				,
				Отказ);
	КонецЕсли;
	
	Если ТипРегистрации = 1
			И Не ЗначениеЗаполнено(ИдентификаторОрганизацииСуществующий) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Идентификатор организации'")),
				,
				"ИдентификаторОрганизацииСуществующий",
				,
				Отказ);
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкиПередПолучениемИдентификатора(ОповещениеПослеПроверки)
	
	УстановкаСостоянияПолученияИдентификатораЭД(Ложь);
	РезультатыПроверки = РезультатПроверкиПередПолучениемИдентификатораНаСервере(Организация, СертификатКриптографии, СпособОбменаЭД);
	Если РезультатыПроверки.ИННОтличается Тогда
		
		ПослеПодтвержденияСозданияПрофиля = Новый ОписаниеОповещения("ПослеПодтвержденияСозданияПрофиля", ЭтотОбъект,
				Новый Структура("ОписаниеОповещения", ОповещениеПослеПроверки));
			
		Вопросы = Новый Массив;
		Вопросы.Добавить(НСтр("ru = 'Обратите внимание:'"));
		
		Если РезультатыПроверки.ИННОтличается Тогда
			
			ПредупреждениеОРазличииРеквизитов = " " + НСтр("ru = '- ИНН по данным сертификата не совпадает с ИНН выбранной организации.'");
			Вопросы.Добавить(ПредупреждениеОРазличииРеквизитов);
			
		КонецЕсли;
		Вопросы.Добавить(НСтр("ru = 'Продолжить получение идентификатора?'"));
		
		ТекстВопроса = СтрСоединить(Вопросы, Символы.ПС);
		ПоказатьВопрос(ПослеПодтвержденияСозданияПрофиля, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		ПриУспешнойПроверкеАналогичногоПрофиля(ОповещениеПослеПроверки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияСозданияПрофиля(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПриУспешнойПроверкеАналогичногоПрофиля(ДополнительныеПараметры.ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриУспешнойПроверкеАналогичногоПрофиля(ОповещениеПослеПроверки)

	ВыполнитьОбработкуОповещения(ОповещениеПослеПроверки);

КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатПроверкиПередПолучениемИдентификатораНаСервере(Организация, Сертификат, СпособОбменаЭД)

	Результат = Новый Структура;
	
	СвойстваСубъекта = ЭлектронноеВзаимодействиеСлужебный.СвойстваСубъектаСертификата(Сертификат);
	СвойстваСубъекта.Вставить("ИНН", 
		СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СвойстваСубъекта.ИНН, 12, "0"));
	
	РеквизитИНН = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, РеквизитИНН);
	СвойстваОрганизации.Вставить(РеквизитИНН, 
		СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СвойстваОрганизации[РеквизитИНН], 12, "0"));
	
	Результат.Вставить("ИННОтличается", СвойстваСубъекта.Свойство("ИНН") И СвойстваСубъекта.ИНН <> СвойстваОрганизации[РеквизитИНН]);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура НачатьРегистрацияВСервисе(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаОжиданиеРегистрации;
	
	ВыполняетсяРегистрация = Истина;
	
	УправлениеФормой(ЭтотОбъект);
	
	Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
		ЗарегистрироватьСертификат1СЭДО();
	ИначеЕсли ПодключениеТакскомВМоделиСервиса(ЭтотОбъект)
		И СтрНачинаетсяС(ИдентификаторОрганизацииСуществующий, ИдентификаторОператораТакском(ЭтотОбъект)) Тогда
		ИдентификаторОрганизации = ИдентификаторОрганизацииСуществующий;
		ТестСвязиСервисаЭДО();
	ИначеЕсли СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		ЗапуститьПолучениеНовогоИдентификатораТакском();
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияВСервисеТакском

&НаКлиенте
Процедура ЗапуститьПолучениеНовогоИдентификатораТакском(Результат = Неопределено, ДополнительныеПараметры = Неопределено)
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПолучениеНовогоИдентификатораТакскомОбработкаЗавершения", ЭтотОбъект);
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ОбработчикСтатусаЗаявки" ,
		Новый ОписаниеОповещения("ПолучениеНовогоИдентификатораТакскомОбработчикСтатусаЗаявки", ЭтотОбъект));
	
	ПараметрыОбработки.Вставить("ОбработчикСозданияЗаявки",
		Новый ОписаниеОповещения("ПолучениеНовогоИдентификатораТакскомООбработчикСозданияЗаявки", ЭтотОбъект));
	
	ЗаявкаТакскомОбработана = Ложь;
	
	Подключение1СТакскомКлиент.ПолучитьУникальныйИдентификаторАбонента(СертификатКриптографии, Организация,
		ОбработкаЗавершения, ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеНовогоИдентификатораТакскомОбработкаЗавершения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		И Не ИгнорироватьОшибкуТакском Тогда
		УстановкаСостоянияПолученияИдентификатораЭД("Ошибка");
		Возврат;
	КонецЕсли;
	
	Если ЗаявкаТакскомОбработана Тогда
		ИгнорироватьОшибкуТакском = Ложь;
	ИначеЕсли Результат <> Неопределено Тогда
		
		ЗаявкаТакскомОбработана = Истина;
		ИгнорироватьОшибкуТакском = Истина;

		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, Ложь);
		
		ИдентификаторОрганизацииСуществующий = Результат;
		ИдентификаторОрганизации = Результат;
		
		ТестСвязиСервисаЭДО();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеНовогоИдентификатораТакскомОбработчикСтатусаЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	ОтветДанные = Новый Структура;
	Действие = "СтандартнаяОбработка";
	
	Если Результат.СтатусЗаявки = "Отсутствует" Тогда
		
		Действие = "НоваяЗаявка";
		
	ИначеЕсли Результат.СтатусЗаявки = "ОжиданиеОбработки" Тогда
		
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Ложь);
		
		Если ВыполняетсяРегистрация Тогда
			Действие = "ПроверитьСтатусЗаявки";
		Иначе
			Действие = "Завершить";
		КонецЕсли;
		
	ИначеЕсли Результат.СтатусЗаявки = "Обработана" Тогда
		
		ЗаявкаТакскомОбработана = Истина;
		
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, Ложь);
		
		ИдентификаторОрганизацииСуществующий = Результат.ДанныеЗаявки.ИдентификаторАбонента;
		ИдентификаторОрганизации = Результат.ДанныеЗаявки.ИдентификаторАбонента;
		
		ТестСвязиСервисаЭДО();
		Действие = "Завершить";
		ИгнорироватьОшибкуТакском = Истина;
		
	ИначеЕсли Результат.СтатусЗаявки = "Отклонена" Тогда
		
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, "Ошибка");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
		
		Действие = "Завершить";
	КонецЕсли;
	
	ОтветДанные.Вставить("Действие", Действие);
	
	ПодключитьОбработчикОжидания("ОжиданиеОбработки", 10, Ложь);
	
	ОбработчикРезультатаДанные = Результат.ОбработчикРезультата;
	
	Если Действие <> "ПроверитьСтатусЗаявки" Тогда
		ВыполнитьОбработкуОповещения(Результат.ОбработчикРезультата, ОтветДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжиданиеОбработки()

	ВыполнитьОбработкуОповещения(ОбработчикРезультатаДанные, ОтветДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПолучениеНовогоИдентификатораТакскомООбработчикСозданияЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Новый Структура;
	
	ДанныеЗаявки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Результат.ДанныеЗаявки);
	
	ЗаполнитьДанныеЗаявки(АдресОрганизации, СертификатКриптографии, ДанныеЗаявки);
	
	ДанныеЗаявки.КодНалоговогоОргана = КодНалоговогоОргана;
	
	Ответ.Вставить("Действие"     , "ОтправитьЗаявку");
	Ответ.Вставить("ДанныеЗаявки" , ДанныеЗаявки);
	
	ВыполнитьОбработкуОповещения(Результат.ОбработчикРезультата, Ответ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеЗаявки(Знач Адрес, Знач СертификатКриптографии, ДанныеЗаявки)
	
	ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(СертификатКриптографии);
	Ответ = ОбменСКонтрагентамиСлужебный.СведенияОбАдресеПоПредставлению(Адрес);
	
	Если Не ЗначениеЗаполнено(Ответ.Город) Тогда 
		Ответ.Город = Ответ.Регион;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаявки, Ответ);
	ЗаполнитьЗначенияСвойств(ДанныеЗаявки, ПараметрыСертификата,"Фамилия, Имя, Отчество");
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияВСервисе1СЭДО

&НаКлиенте
Процедура ЗарегистрироватьСертификат1СЭДО()
	
	МассивСертификатов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СертификатКриптографии);
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Организация"                    , Организация);
	ПараметрыРегистрации.Вставить("ОператорЭДО"                    , ИдентификаторОператораЭДО);
	ПараметрыРегистрации.Вставить("АдресОрганизации"               , АдресОрганизации);
	ПараметрыРегистрации.Вставить("АдресОрганизацииЗначение"       , ЗначениеПолейАдреса);
	ПараметрыРегистрации.Вставить("СертификатКриптографии"         , СертификатКриптографии);
	ПараметрыРегистрации.Вставить("ЭлектроннаяПочта"               , ЭлектроннаяПочта);
	ПараметрыРегистрации.Вставить("КодНалоговогоОргана"            , КодНалоговогоОргана);
	ПараметрыРегистрации.Вставить("СертификатыПодписейОрганизации" , МассивСертификатов);
	
	Если ТипРегистрации = 1 Тогда
		ПараметрыРегистрации.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизацииСуществующий);
	КонецЕсли;
	
	Оповещение   = Новый ОписаниеОповещения("ЗарегистрироватьСертификат1СЭДОЗавершение", ЭтотОбъект, Новый Структура);
	ОбменСКонтрагентамиСлужебныйКлиент.ОтправитьРегистрационныйПакетВСервис1СЭДО(ЭтотОбъект, Оповещение, ПараметрыРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификат1СЭДОЗавершение(Результат, Контекст) Экспорт
	
	Если ВыполняетсяРегистрация = Ложь Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат = Истина Тогда
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Ложь);
		УникальныйИдентификаторЗаявки1СЭДО = Контекст.УникальныйИдентификаторЗаявки1СЭДО;
		КонтекстОперацииПодписания         = Контекст.КонтекстОперации;
		// Запустим обработчик ожидания результата регистрации организации у оператора.
		ЭлектронноеВзаимодействиеСлужебныйКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	Иначе
		ВыполняетсяРегистрация = Ложь;
		УстановкаСостоянияПолученияИдентификатораЭД("Ошибка");
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияДляЭД()
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("УникальныйИдентификаторЗаявки1СЭДО", УникальныйИдентификаторЗаявки1СЭДО);
	
	Операция = ОбменСКонтрагентамиСлужебныйВызовСервера.НачатьПолучениеСостоянияРегистрацииСертификатаВ1СЭДО(
					ПараметрыОперации, УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Описание = Новый ОписаниеОповещения("ПолучениеСостоянияРегистрацииСертификатаВ1СЭДОЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Операция, Описание, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ПолучениеСостоянияРегистрацииСертификатаВ1СЭДОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, "Ошибка");
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ИдентификаторОрганизации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
			
			ИдентификаторОрганизацииСуществующий = ИдентификаторОрганизации;
			ТестСвязиСервисаЭДО();
			
		Иначе
			ЭлектронноеВзаимодействиеСлужебныйКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при регистрации учетной записи у оператора ЭДО.
                               |Подробности см. в журнале регистрации.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, "Ошибка");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСервисаЭДО()
	
	ДополнительныеПараметры = Новый Структура;
	ОбработкаЗавершения = Новый ОписаниеОповещения("ТестСвязиСервисаЭДОЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, Ложь);
	
	Если СпособОбменаЭД <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО")
		И Не ПодключениеТакскомВМоделиСервиса(ЭтотОбъект) Тогда
		РезультатВыполнения = Новый Структура("Успех, РасшифрованныеДанные", Истина, Неопределено);
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровЗапросаМаркера = Новый Структура;
	СтруктураПараметровЗапросаМаркера.Вставить("СертификатПодписи", СертификатКриптографии);
	СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", СпособОбменаЭД);
	
	СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизацииСуществующий);
	
	ЗашифрованныеДанные = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗашифрованныйМаркер(
		СтруктураПараметровЗапросаМаркера, ИнтернетПоддержкаПользователейПодключена, Истина, Ложь);
		
	Если Не ИнтернетПоддержкаПользователейПодключена
		И ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
		
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			Новый ОписаниеОповещения("ТестСвязиСервисаЭДОАутентификация", ЭтотОбъект),
			ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗашифрованныеДанные) Тогда
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, "Ошибка");
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Тест аутентификации в сервисе ЭДО'"));
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(СертификатКриптографии);
	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ИзменятьНабор",       Ложь);
	ОписаниеДанных.Вставить("ЭтоАутентификация",   Истина);
	ОписаниеДанных.Вставить("Данные",              ЗашифрованныеДанные);
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	ОписаниеДанных.Вставить("КонтекстОперации",    КонтекстОперацииПодписания);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСервисаЭДОЗавершение(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если РезультатВыполнения.Успех = Истина Тогда
			
			РасшифрованныйМаркер = РезультатВыполнения.РасшифрованныеДанные;
			РасшифрованныйМаркер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(РасшифрованныйМаркер);
			
			ПараметрыПроцедуры = Новый Структура;
			ПараметрыПроцедуры.Вставить("ИдентификаторЭДО"        , ИдентификаторОрганизации);
			ПараметрыПроцедуры.Вставить("РасшифрованныйМаркер"    , РасшифрованныйМаркер);
			ПараметрыПроцедуры.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
			
			// После того как получили расшифрованные данные необходимо получить зарегистрированный
			// адрес электронной почты.
			Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО")
				 И ТипРегистрации = 1 Тогда
				
				Оповещение = Новый ОписаниеОповещения("ПолучитьПараметрыУведомленийЗавершение", ЭтотОбъект, ПараметрыПроцедуры);
				
				ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьПараметрыУведомленийВСервисеЭДО(ЭтотОбъект, Оповещение, ПараметрыПроцедуры);
				Возврат;
				
			КонецЕсли;
			
			Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО")
				 И ТипРегистрации = 2 Тогда
				
				ПараметрыПроцедуры.Вставить("УведомлятьОСобытиях"                           , УведомлятьОСобытиях);
				ПараметрыПроцедуры.Вставить("УведомлятьОНовыхПриглашениях"                  , УведомлятьОНовыхПриглашениях);
				ПараметрыПроцедуры.Вставить("УведомлятьОбОтветахНаПриглашения"              , УведомлятьОбОтветахНаПриглашения);
				ПараметрыПроцедуры.Вставить("УведомлятьОНовыхДокументах"                    , УведомлятьОНовыхДокументах);
				ПараметрыПроцедуры.Вставить("УведомлятьОНеОбработанныхДокументах"           , УведомлятьОНеобработанныхДокументах);
				ПараметрыПроцедуры.Вставить("УведомлятьОбОкончанииСрокаДействияСертификата" , УведомлятьОбОкончанииСрокаДействияСертификата);
				ПараметрыПроцедуры.Вставить("АдресУведомлений"                              , ЭлектроннаяПочта);
				
				Оповещение = Новый ОписаниеОповещения("УстановитьПараметрыУведомленийЗавершение", ЭтотОбъект, ПараметрыПроцедуры);
				
				ОбменСКонтрагентамиСлужебныйКлиент.ОбновитьПараметрыУведомленийВСервисеЭДО(ЭтотОбъект, Оповещение, ПараметрыПроцедуры);
				Возврат;
			КонецЕсли;
			
			
			ВыполнитьОтправкуДанныхВСервисНастроек(ПараметрыПроцедуры);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, "Ошибка");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСУведомлениямиИСервисомНастроек

&НаКлиенте
Процедура УстановитьПараметрыУведомленийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ВыполнитьОтправкуДанныхВСервисНастроек(ДополнительныеПараметры);
	Иначе
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, "Ошибка");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтправкуДанныхВСервисНастроек(ПараметрыПроцедуры)
	
	ДанныеСохранены = СохранитьУчетнуюЗапись();
	
	Если Не ДанныеСохранены Тогда 
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, "Ошибка");
		Возврат;
	КонецЕсли;
	
	Описание = Новый ОписаниеОповещения("ОтправкаДанныхВСервисНастроекЗавершение", ЭтотОбъект, ПараметрыПроцедуры.ИдентификаторЭДО);
	
	ПараметрыПроцедуры.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОтправитьДанныеАбонентаВСервисНастроек(ЭтотОбъект, Описание, ПараметрыПроцедуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаДанныхВСервисНастроекЗавершение(Результат, ИдентификаторЭДО) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ОткрытьУчетнуюЗапись(ИдентификаторЭДО);
	Иначе
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, "Ошибка");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПараметрыУведомленийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ТекущиеНастройкиУведомлений = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ТекущиеНастройкиУведомлений <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТекущиеНастройкиУведомлений);
		КонецЕсли;
		
		ВыполнитьОтправкуДанныхВСервисНастроек(ДополнительныеПараметры);
		
	Иначе
		
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, "Ошибка");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСервисаЭДОАутентификация(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		 ТестСвязиСервисаЭДО();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСУчетнойЗаписью

&НаСервере
Процедура ЗаполнитьОписаниеУчетнойЗаписи()
	
	КраткоеОписание   = "";
	ПодробноеОписание = "";
	
	Если ТипРегистрации = 1 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	АбонентыЭДО.КраткоеОписание КАК КраткоеОписание,
		|	АбонентыЭДО.ПодробноеОписание КАК ПодробноеОписание
		|ИЗ
		|	РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
		|ГДЕ
		|	АбонентыЭДО.ИдентификаторЭДО = &ИдентификаторЭДО";
		
		Запрос.УстановитьПараметр("ИдентификаторЭДО", ИдентификаторОрганизацииСуществующий);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КраткоеОписание = ВыборкаДетальныеЗаписи.КраткоеОписание;
			ПодробноеОписание = ВыборкаДетальныеЗаписи.ПодробноеОписание;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПустаяСтрока(НазначениеУчетнойЗаписи) Тогда
		НазначениеУчетнойЗаписи = КраткоеОписание;
	КонецЕсли;
	
	Если ПустаяСтрока(ПодробноеОписаниеУчетнойЗаписи) Тогда
		ПодробноеОписаниеУчетнойЗаписи = ПодробноеОписание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохранитьУчетнуюЗапись()

	ДанныеСохранены = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		Если АдресИзменен Тогда
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Организация, АдресОрганизации,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса(), Истина);
		КонецЕсли;

		НовыйПрофильНастроек = РегистрыСведений.УчетныеЗаписиЭДО.НовыеДанныеЗаполнения();
		
		НовыйПрофильНастроек.НаименованиеУчетнойЗаписи = НаименованиеУчетнойЗаписи;
		
		НовыйПрофильНастроек.Организация              = Организация;
		НовыйПрофильНастроек.АдресОрганизации         = АдресОрганизации;
		НовыйПрофильНастроек.СпособОбменаЭД           = СпособОбменаЭД;
		
		НовыйПрофильНастроек.ИдентификаторЭДО = ИдентификаторОрганизацииСуществующий;
		
		// Настройки сертификатов
		Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД") Тогда
			РегистрыСведений.СертификатыУчетныхЗаписейЭДО.ДобавитьСертификат(НовыйПрофильНастроек.ИдентификаторЭДО, СертификатКриптографии);
		КонецЕсли;
		
		НовыйПрофильНастроек.ЭлектроннаяПочтаДляУведомлений = ЭлектроннаяПочта;
		НовыйПрофильНастроек.КодНалоговогоОргана = КодНалоговогоОргана;
		НовыйПрофильНастроек.ОператорЭДО     = ИдентификаторОператораЭДО;
		НовыйПрофильНастроек.ДатаПолученияЭД = НачалоДня(ТекущаяДатаСеанса());
		НовыйПрофильНастроек.УведомлятьОНовыхПриглашениях = УведомлятьОНовыхПриглашениях;
		НовыйПрофильНастроек.УведомлятьОбОтветахНаПриглашения = УведомлятьОбОтветахНаПриглашения;
		НовыйПрофильНастроек.УведомлятьОНовыхДокументах = УведомлятьОНовыхДокументах;
		НовыйПрофильНастроек.УведомлятьОНеОбработанныхДокументах = УведомлятьОНеОбработанныхДокументах;
		НовыйПрофильНастроек.УведомлятьОбОкончанииСрокаДействияСертификата = УведомлятьОбОкончанииСрокаДействияСертификата;
		НовыйПрофильНастроек.НазначениеУчетнойЗаписи = НазначениеУчетнойЗаписи;
		НовыйПрофильНастроек.ПодробноеОписаниеУчетнойЗаписи = ПодробноеОписаниеУчетнойЗаписи;
		НовыйПрофильНастроек.ПринятыУсловияИспользования = СоглашаюсьСУсловиямиИспользования;
		
		Отказ = Ложь;
		РегистрыСведений.УчетныеЗаписиЭДО.НоваяУчетнаяЗаписьЭДО(НовыйПрофильНастроек, Отказ);
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
			ДанныеСохранены = Ложь;
			Возврат ДанныеСохранены;
		Иначе
			ДанныеСохранены = Истина;
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Создание учетной записи ЭДО'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ТекстОшибки);
		ДанныеСохранены = Ложь;
		
		Возврат ДанныеСохранены;
		
	КонецПопытки;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат ДанныеСохранены;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьУчетнуюЗапись(ИдентификаторЭДО)
	
	Оповестить("ОбновленСписокУчетныхЗаписей1СЭДО");
	
	// Оповещение для БП_3.0 - удалить задачу подключения из начальной страницы.
	Оповестить("СозданПрофиль1СЭДО", Организация);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Успех'"),,НСтр("ru = 'Учетная запись создана успешно'"));
	
	Если КнопкаНазадДоступна Тогда
		Закрыть(ИдентификаторЭДО);
	Иначе
		
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, Истина);
		Элементы.ГруппаЛево.Видимость = Ложь;
		Элементы.Повторить.Видимость = Ложь;
		Элементы.Далее.Видимость = Ложь;
		Элементы.Отмена.Видимость = Ложь;
		Элементы.Закрыть.Видимость = Истина;
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Интеграция1СЭДОИ1СОтчетности

&НаКлиенте
Процедура ПослеПолученияОтпечатковПолучитьМенеджерКриптографии(Отпечатки, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(Отпечатки) <> Тип("Соответствие") Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО;
		Заголовок = Элементы.СтраницаПодключенияК1СЭДО.Заголовок;
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из Отпечатки Цикл
		Если ОтпечатокСертификата = НРег(СтрЗаменить(Строка(Base64Значение(КлючЗначение.Ключ))," ","")) Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПолучитьМенеджерКриптографииПослеПолученияСертификатаКриптографии", ЭтотОбъект, Контекст);
			ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОписаниеОповещения, КлючЗначение.Ключ, Истина, Ложь);
			Прервать;
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьМенеджерКриптографииПослеПолученияСертификатаКриптографии(Сертификат, Контекст) Экспорт
	
	Если ТипЗнч(Сертификат) <> Тип("СертификатКриптографии") Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьСертификатЗавершение = Новый ОписаниеОповещения("СертификатВыгрузитьПродолжить", ЭтотОбъект, Контекст);
	
	Сертификат.НачатьВыгрузку(ВыгрузитьСертификатЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатВыгрузитьПродолжить(ДвоичныеДанныеСертификата, Контекст) Экспорт
	
	Если ДвоичныеДанныеСертификата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьДействияПослеПолученияМенеджераКриптографии", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, "ПолучениеСертификатов", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеПолученияМенеджераКриптографии(МенеджерКриптографии, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) <> Тип("МенеджерКриптографии") Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО;
		Заголовок = Элементы.СтраницаПодключенияК1СЭДО.Заголовок;
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьНайтиСертификатКриптографииПользователя", ЭтотОбъект, Контекст);
	МенеджерКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНайтиСертификатКриптографииПользователя(ИнформацияМодуля, Контекст = Неопределено) Экспорт
	
	СертификатКриптографии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.НайтиСоздатьСертификатЭП(
		Контекст.ДвоичныеДанныеСертификата, Контекст.Организация, ИнформацияМодуля.Имя);
	
	Готово(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДополнительныеПараметры(Знач ДополнительныеПараметры)
	
	ПолучатьИдентификаторыВСервисе1СЭДО = Ложь;
	СоглашаюсьСУсловиямиИспользования = Истина;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ДополнительныеПараметры);
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаОжиданиеРегистрации;
	
	Если Параметры.ДополнительныеПараметры.Свойство("КодРегиона")
		И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.КодРегиона) Тогда
		СформироватьАдрес(ДополнительныеПараметры);
	КонецЕсли;
	
	НазначениеУчетнойЗаписи = НСтр("ru = 'Основная'");
	ИдентификаторОператораЭДО = "2AE"; // Калуга-Астрал.
	НаименованиеУчетнойЗаписи = СтрШаблон(НСтр("ru = '%1, %2'"), Организация, СпособОбменаЭД);
	
КонецПроцедуры

// Выполняет формирование строки адреса по реквизитам адреса.
&НаСервере
Процедура СформироватьАдрес(Знач ДополнительныеПараметры)
	
	ДанныеАдреса = Новый Структура("Индекс,Регион,КодРегиона,Район,Город,НаселенныйПункт,Улица,Дом,Корпус,Квартира");
	ЗаполнитьЗначенияСвойств(ДанныеАдреса, ДополнительныеПараметры);
	
	Адр = "";
	
	ДобавитьПодстроку(Адр, ДанныеАдреса.Индекс);
	ДобавитьПодстроку(Адр, ДанныеАдреса.Регион);
	ДобавитьПодстроку(Адр, ДанныеАдреса.КодРегиона, "регион ");
	ДобавитьПодстроку(Адр, ДанныеАдреса.Район);
	ДобавитьПодстроку(Адр, ДанныеАдреса.Город);
	ДобавитьПодстроку(Адр, ДанныеАдреса.НаселенныйПункт);
	ДобавитьПодстроку(Адр, ДанныеАдреса.Улица);
	ДобавитьПодстроку(Адр, ДанныеАдреса.Дом     , "д. ");
	ДобавитьПодстроку(Адр, ДанныеАдреса.Корпус  , "корп. ");
	ДобавитьПодстроку(Адр, ДанныеАдреса.Квартира, "кв. ");
	
	АдресОрганизации = Адр;
	
КонецПроцедуры

// Процедура добавления подстроки к строке
// Параметры:
// - ИсходнаяСтрока - Строка - исходная строка;
// - Подстрока      - Строка - строка, которая должна быть добавлена в конец исходной строки;
// - Префикс        - Строка - строка, которая добавляется перед подстрокой;
// - Разделитель    - строка - строка, которая служит разделителем между строкой и подстрокой.
//
&НаСервере
Процедура ДобавитьПодстроку(ИсходнаяСтрока, Знач Подстрока, Префикс = "", Разделитель = ", ")
	
	Если ЗначениеЗаполнено(ИсходнаяСтрока) И ЗначениеЗаполнено(Подстрока) Тогда
		ИсходнаяСтрока = ИсходнаяСтрока + Разделитель;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подстрока) Тогда
		ИсходнаяСтрока = ИсходнаяСтрока + Префикс + Подстрока;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

