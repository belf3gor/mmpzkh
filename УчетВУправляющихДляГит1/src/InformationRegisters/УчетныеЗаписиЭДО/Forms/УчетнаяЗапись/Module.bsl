
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания, КонтекстОперацииПодписания, УникальныйИдентификаторЗаявки1СЭДО, ТекущийСтатусЗаявкиТакском, ВыполняетсяДлительнаяОперация;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ТолькоПросмотр = Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийЗапись)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Сертификат,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо КАК СертификатДействителенДо,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.КемВыдан КАК КемВыдан,
		|	ВЫБОР
		|		КОГДА СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо >= &ТекущаяДата
		|			ТОГДА РАЗНОСТЬДАТ(&ТекущаяДата, СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо, ДЕНЬ)
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СрокДействияВДнях,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Наименование КАК Представление
		|ИЗ
		|	РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ПО СертификатыУчетныхЗаписейЭДО.Сертификат = СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка
		|			И (СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО = &ИдентификаторЭДО)";
	
	Запрос.УстановитьПараметр("ИдентификаторЭДО", Запись.ИдентификаторЭДО);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаРезультат = РезультатЗапроса.Выгрузить();
	СписокСертификатов.Загрузить(ТаблицаРезультат);
	
	ЗаполнитьСрокДействияСертификата(ЭтотОбъект);
	
	АдресОрганизацииИнформация = ИнформацияОбАдресеОрганизации(Запись.Организация);
	АдресОрганизации = АдресОрганизацииИнформация.Представление;
	АдресОрганизацииЗначение = АдресОрганизацииИнформация.Значение;
	
	ДанныеОрганизации = ОбменСКонтрагентамиСлужебный.РегистрационныеДанныеОрганизации(Запись.Организация);
	КодНалоговогоОргана = ДанныеОрганизации.КодИМНС;
	
	НастроитьЭлементыАдресаОрганизации(ЭтотОбъект);
	НастроитьЭлементыКодаНалоговогоОргана(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("Записать")
		И ПараметрыЗаписи.Записать Тогда
		
		Если ИзмененыПараметрыУчетнойЗаписи Или ИзмененыНастройкиУведомлений Тогда
			
			ЗначенияСвойств = ПолучитьНеСохраненныеРеквизиты(Запись.ИдентификаторЭДО, ИзмененыПараметрыУчетнойЗаписи,
				ИзмененыНастройкиУведомлений);
				
			СохранитьНовыеЗначенияВПараметрыЗаписи(ЗначенияСвойств, ПараметрыЗаписи);
			
			ЗаполнитьЗначенияСвойств(Запись, ЗначенияСвойств);
			
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Если ПроверитьЗаполнениеРеквизитов() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ИзмененыНастройкиУведомлений"   , ИзмененыНастройкиУведомлений);
	РезультатПроверки.Вставить("ИзмененыПараметрыУчетнойЗаписи" , ИзмененыПараметрыУчетнойЗаписи);
	РезультатПроверки.Вставить("ИзмененСоставСертификатов"      , ИзмененСоставСертификатов);
	РезультатПроверки.Вставить("ИзмененыРегистрационныеДанные", ИзмененыРегистрационныеДанные);
	
	Отказ = Истина;
	
	ЗаписатьИОтправитьВСервисы(РезультатПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Элементы.КопироватьID.Видимость = Ложь;
	#КонецЕсли
	
	ИспользоватьУведомления = ЕстьВключенныеСобытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СписокНеСохраненныхСвойств = Неопределено;
	Если ПараметрыЗаписи.Свойство("СписокНеСохраненныхСвойств", СписокНеСохраненныхСвойств) Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СписокНеСохраненныхСвойств);
		
		ЗаполнитьЗначенияСвойств(Запись, СписокНеСохраненныхСвойств.ЗначенияЗаписи);
		
	КонецЕсли;
	
	Если ИзмененыНастройкиУведомлений 
		Или ИзмененыПараметрыУчетнойЗаписи
		Или ИзмененСоставСертификатов
		ИЛИ ИзмененыРегистрационныеДанные Тогда
		Модифицированность = Истина;
	КонецЕсли;
		
	Если Закрыть И ЭтотОбъект.Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
	ВыполняетсяДлительнаяОперация                  = Ложь;
	Элементы.ГруппаОжиданиеСинхронизации.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы И ВыполняетсяДлительнаяОперация Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияАдресОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Запись.АдресОрганизации = АдресОрганизации;
	ПриИзмененииАдресаОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКодНалоговогоОрганаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Запись.КодНалоговогоОргана = КодНалоговогоОргана;
	ПриИзмененииКодаНалоговогоОргана();
КонецПроцедуры

&НаКлиенте
Процедура ПодробноеОписаниеУчетнойЗаписиПриИзменении(Элемент)
	ИзменилисьПараметрыУчетнойЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура НазначениеУчетнойЗаписиПриИзменении(Элемент)
	ИзменилисьПараметрыУчетнойЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУведомленияПриИзменении(Элемент)
	
	Запись.УведомлятьОНовыхПриглашениях                  = ИспользоватьУведомления;
	Запись.УведомлятьОбОтветахНаПриглашения              = ИспользоватьУведомления;
	Запись.УведомлятьОНовыхДокументах                    = ИспользоватьУведомления;
	Запись.УведомлятьОНеОбработанныхДокументах           = ИспользоватьУведомления;
	Запись.УведомлятьОбОкончанииСрокаДействияСертификата = ИспользоватьУведомления;
	
	ИзмененыНастройкиУведомлений = Истина;
	Модифицированность           = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаДляУведомленийПриИзменении(Элемент)
	
	ИзмененыНастройкиУведомлений = Истина;
	Модифицированность = Истина;
	
	ЭлектроннаяПочтаНеКорректна = Не ПустаяСтрока(Запись.ЭлектроннаяПочтаДляУведомлений)
		И Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Запись.ЭлектроннаяПочтаДляУведомлений);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЛичныйКабинетУчастникаОбменаЭДНажатие(Элемент)
	
	// Если соглашение содержит более одного сертификата, то считается,
	// что все сертификаты были зарегистрированы у оператора ЭДО ранее и
	// обращение в личный кабинет выполняется по текущему или по первому сертификату.
	
	Если СписокСертификатов.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Для входа в личный кабинет должен быть зарегистрирован хотя бы один сертификат'");
		ПоказатьПредупреждение(, ТекстПредупреждения, 30);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерейтиВЛичныйКабинет", ЭтотОбъект);
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Выполнить действие можно только после записи учетной записи.
			|Записать?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОбновлениеУведомленийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗагрузитьНастройкиУведомленийИзСервиса();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСертификатов

&НаКлиенте
Процедура СписокСертификатовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД") Тогда
		
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ТекстСообщенияОНеобходимостиНастройкиСистемы("ПодписаниеЭД");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Запись.Организация));
	ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ФормаВыбора", ПараметрыФормы, Элементы.СписокСертификатов);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ОповещениеПослеПроверки = Новый ОписаниеОповещения("ЗарегистрироватьДобавитьСертификат", ЭтотОбъект);
		ВыполнитьПроверкиПередДобавлениемСертификата(ВыбранноеЗначение, ОповещениеПослеПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Сертификат);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Модифицированность = Истина;
	ИзмененСоставСертификатов = Истина;
	
	Для Каждого Сертификат Из Элементы.СписокСертификатов.ВыделенныеСтроки Цикл
		
		СтрокаСертификат = Элементы.СписокСертификатов.ДанныеСтроки(Сертификат);
		
		СтрокаСертификат.Скрыть = Истина;
		
	КонецЦикла;
	
	Отбор = Новый Структура("Скрыть", Ложь);
	Элементы.СписокСертификатов.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КопироватьID(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.СкопироватьВБуферОбмена(Запись.ИдентификаторЭДО,
		НСтр("ru = 'Идентификатор учетной записи скопирован в буфер обмена'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСоединенияСОператором(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ТестНастроекПродолжить", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'В текущую настройку ЭДО внесены изменения. Продолжить выполнение теста?'");
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Выполнить", НСтр("ru = 'Сохранить и выполнить тест'"));
		СписокКнопок.Добавить("Отменить", НСтр("ru = 'Отменить тест'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , "Выполнить", НСтр("ru = 'Тест настроек'"));
	Иначе
		ТестНастроекПродолжить("Выполнить", Неопределено);
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Закрыть = Истина;
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура НачальнаяДатаЗапросаДанныхУОператора(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьЭДО", Запись.ИдентификаторЭДО);
	ОткрытьФорму("РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО.Форма.ФормаРедактирования",
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	Описание = Новый ОписаниеОповещения("ПослеВопросаУдаленияНастроек", ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru = 'Сейчас будут удалена учетная запись ЭДО. Также будут удалены настройки отправки и получения, связанные с этой учетной записью.
                         |Продолжить?'");
	
	ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАдресОрганизации(Команда)
	
	НачатьРедактированиеАдресаОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКодНалоговогоОргана(Команда)
	
	НачатьРедактированиеКодаНалоговогоОргана();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СохранениеДанныхВСервисе

&НаКлиенте
Процедура ЗаписатьИОтправитьВСервисы(РезультатПроверки)
	
	Отказ = Ложь;
	
	Если РезультатПроверки.ИзмененыНастройкиУведомлений
		Или РезультатПроверки.ИзмененыПараметрыУчетнойЗаписи
		Или РезультатПроверки.ИзмененСоставСертификатов
		ИЛИ РезультатПроверки.ИзмененыРегистрационныеДанные Тогда
	
		Отказ = Истина;
		ТолькоПросмотр = Истина;
		Элементы.ГруппаОжиданиеСинхронизации.Видимость = Истина;
		ВыполняетсяДлительнаяОперация = Истина;
		ВыполнитьСохранениеДанныхВСервисах(РезультатПроверки);
	Иначе 
		ВыполняетсяДлительнаяОперация = Ложь;
		Элементы.ГруппаОжиданиеСинхронизации.Видимость = Ложь;
		ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	
	Если Не Отказ Тогда
		ПараметрыЗаписи = Новый Структура("Записать", Истина);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСохранениеДанныхВСервисах(Этапы)
	
	ПараметрыПроцедуры = Новый Структура;
	
	ДанныеСертификатов = ВсеСертификатыИСамыйНовый(СписокСертификатов);
	
	Если Запись.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		
		Если Этапы.ИзмененСоставСертификатов Тогда
			// Данные по новому сертификату отправлены в Такском при его добавлении.
			ЗаписатьДанныеСертификатов();
			ИзмененСоставСертификатов = Ложь;
			Этапы.ИзмененСоставСертификатов = Ложь;
		КонецЕсли;
		Если Этапы.ИзмененыРегистрационныеДанные Тогда
			// Изменение регистрационных данных для Такскома не поддерживается.
			ИзмененыРегистрационныеДанные = Ложь;
			Этапы.ИзмененыРегистрационныеДанные = Ложь;
		КонецЕсли;
		ЗаписатьИОтправитьВСервисы(Этапы);
		Возврат;
		
	ИначеЕсли Запись.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
		
		Если Этапы.ИзмененСоставСертификатов ИЛИ Этапы.ИзмененыРегистрационныеДанные Тогда
		
			ПараметрыРегистрации = Новый Структура;
			ПараметрыРегистрации.Вставить("Организация"                    , Запись.Организация);
			ПараметрыРегистрации.Вставить("ОператорЭДО"                    , Запись.ОператорЭДО);
			ПараметрыРегистрации.Вставить("АдресОрганизации"               , Запись.АдресОрганизации);
			Если Запись.АдресОрганизации = АдресОрганизации Тогда
				ПараметрыРегистрации.Вставить("АдресОрганизацииЗначение", АдресОрганизацииЗначение);
			КонецЕсли;
			ПараметрыРегистрации.Вставить("СертификатКриптографии"         , ДанныеСертификатов.СамыйНовый);
			ПараметрыРегистрации.Вставить("ЭлектроннаяПочта"               , Запись.ЭлектроннаяПочтаДляУведомлений);
			ПараметрыРегистрации.Вставить("КодНалоговогоОргана"            , Запись.КодНалоговогоОргана);
			ПараметрыРегистрации.Вставить("СертификатыПодписейОрганизации" , ДанныеСертификатов.Список);
			ПараметрыРегистрации.Вставить("ИдентификаторОрганизации"       , Запись.ИдентификаторЭДО);
			ПараметрыРегистрации.Вставить("Этапы"                          , Этапы);
			
			Оповещение = Новый ОписаниеОповещения("ПослеОтправкиРегистрационногоПакетаВСервис1СЭДО", ЭтотОбъект, ПараметрыРегистрации);
			ОбменСКонтрагентамиСлужебныйКлиент.ОтправитьРегистрационныйПакетВСервис1СЭДО(ЭтотОбъект, Оповещение, ПараметрыРегистрации);
			
			Возврат;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если Этапы.ИзмененыПараметрыУчетнойЗаписи Тогда
		
		Описание = Новый ОписаниеОповещения("ОтправкаДанныхВСервисНастроекЗавершение", ЭтотОбъект, Этапы);
		
		ПараметрыПроцедуры.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
		ПараметрыПроцедуры.Вставить("ИдентификаторЭДО"        , Запись.ИдентификаторЭДО);
		
		ОбменСКонтрагентамиСлужебныйКлиент.ОтправитьДанныеАбонентаВСервисНастроек(ЭтотОбъект, Описание, ПараметрыПроцедуры);
		
		Возврат;
	КонецЕсли;
	
	Если Этапы.ИзмененыНастройкиУведомлений Тогда
		
		СтруктураПараметровЗапросаМаркера = Новый Структура;
		СтруктураПараметровЗапросаМаркера.Вставить("СертификатПодписи", ДанныеСертификатов.СамыйНовый);
		СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", Запись.СпособОбменаЭД);
		СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", Запись.ИдентификаторЭДО);
		
		ИнтернетПоддержкаПользователейПодключена = Ложь;
		
		ЗашифрованныеДанные = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗашифрованныйМаркер(
			СтруктураПараметровЗапросаМаркера, ИнтернетПоддержкаПользователейПодключена, Истина, Ложь);
		
		Если Не ИнтернетПоддержкаПользователейПодключена
			И ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
			
			ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
				Новый ОписаниеОповещения("ВыполнитьСохранениеДанныхВСервисахАутентификация", ЭтотОбъект, Этапы),
				ЭтотОбъект);
				
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗашифрованныеДанные) Тогда
			
			Закрыть = Ложь;
			ТекстСообщения = НСтр("ru = 'Произошла ошибка при обновлении уведомлений у оператора ЭДО
                                   |Подробности см. в журнале регистрации.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			Этапы.ИзмененыНастройкиУведомлений = Ложь;
			ЗаписатьИОтправитьВСервисы(Этапы);
			
			Возврат;
		КонецЕсли;
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Тест аутентификации в сервисе ЭДО'"));
		ОписаниеДанных.Вставить("ОтборСертификатов",   ДанныеСертификатов.Список);
		ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
		ОписаниеДанных.Вставить("ИзменятьНабор",       Ложь);
		ОписаниеДанных.Вставить("ЭтоАутентификация",   Истина);
		ОписаниеДанных.Вставить("Данные",              ЗашифрованныеДанные);
		ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
		ОписаниеДанных.Вставить("КонтекстОперации",    КонтекстОперацииПодписания);
		
		ОбработкаЗавершения = Новый ОписаниеОповещения("УстановитьПараметрыУведомленийПродолжение", ЭтотОбъект, Этапы);
		ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаЗавершения);
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыУведомленийПродолжение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если РезультатВыполнения.Успех = Истина Тогда
			
			РасшифрованныйМаркер = РезультатВыполнения.РасшифрованныеДанные;
			РасшифрованныйМаркер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(РасшифрованныйМаркер);
			
			ПараметрыПроцедуры = Новый Структура;
			ПараметрыПроцедуры.Вставить("ИдентификаторЭДО"                              , Запись.ИдентификаторЭДО);
			ПараметрыПроцедуры.Вставить("РасшифрованныйМаркер"                          , РасшифрованныйМаркер);
			ПараметрыПроцедуры.Вставить("УникальныйИдентификатор"                       , УникальныйИдентификатор);
			ПараметрыПроцедуры.Вставить("УведомлятьОСобытиях"                           , ИспользоватьУведомления);
			ПараметрыПроцедуры.Вставить("УведомлятьОНовыхПриглашениях"                  , Запись.УведомлятьОНовыхПриглашениях);
			ПараметрыПроцедуры.Вставить("УведомлятьОбОтветахНаПриглашения"              , Запись.УведомлятьОбОтветахНаПриглашения);
			ПараметрыПроцедуры.Вставить("УведомлятьОНовыхДокументах"                    , Запись.УведомлятьОНовыхДокументах);
			ПараметрыПроцедуры.Вставить("УведомлятьОНеОбработанныхДокументах"           , Запись.УведомлятьОНеОбработанныхДокументах);
			ПараметрыПроцедуры.Вставить("УведомлятьОбОкончанииСрокаДействияСертификата" , Запись.УведомлятьОбОкончанииСрокаДействияСертификата);
			ПараметрыПроцедуры.Вставить("АдресУведомлений"                              , Запись.ЭлектроннаяПочтаДляУведомлений);
			
			Оповещение = Новый ОписаниеОповещения("УстановитьПараметрыУведомленийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ОбменСКонтрагентамиСлужебныйКлиент.ОбновитьПараметрыУведомленийВСервисеЭДО(ЭтотОбъект, Оповещение, ПараметрыПроцедуры);
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Закрыть = Ложь;
	ТекстСообщения = НСтр("ru = 'Произошла ошибка при обновлении уведомлений у оператора ЭДО
		|Подробности см. в журнале регистрации.'");
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
	ДополнительныеПараметры.ИзмененыНастройкиУведомлений = Ложь;
	ЗаписатьИОтправитьВСервисы(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиРегистрационногоПакетаВСервис1СЭДО(Результат, Контекст) Экспорт
	
	Если Результат = Истина Тогда
		
		УникальныйИдентификаторЗаявки1СЭДО = Контекст.УникальныйИдентификаторЗаявки1СЭДО;
		КонтекстОперацииПодписания         = Контекст.КонтекстОперации;
		// Запустим обработчик ожидания результата регистрации организации у оператора.
		ЭлектронноеВзаимодействиеСлужебныйКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не удалось отправить регистрационный пакет оператору ЭДО.
                               |Подробности см. в журнале регистрации.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Контекст.Этапы.ИзмененСоставСертификатов = Ложь;
		Контекст.Этапы.ИзмененыРегистрационныеДанные = Ложь;
		Закрыть = Ложь;
		ЗаписатьИОтправитьВСервисы(Контекст.Этапы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияДляЭД()
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("УникальныйИдентификаторЗаявки1СЭДО", УникальныйИдентификаторЗаявки1СЭДО);
	
	Операция = ОбменСКонтрагентамиСлужебныйВызовСервера.НачатьПолучениеСостоянияРегистрацииСертификатаВ1СЭДО(
					ПараметрыОперации, УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Описание = Новый ОписаниеОповещения("ПолучениеСостоянияРегистрацииСертификатаВ1СЭДОЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Операция, Описание, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура ПолучениеСостоянияРегистрацииСертификатаВ1СЭДОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
	КонецЕсли;
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ИзмененыНастройкиУведомлений"   , ИзмененыНастройкиУведомлений);
	РезультатПроверки.Вставить("ИзмененыПараметрыУчетнойЗаписи" , ИзмененыПараметрыУчетнойЗаписи);
	РезультатПроверки.Вставить("ИзмененСоставСертификатов"      , Ложь);
	РезультатПроверки.Вставить("ИзмененыРегистрационныеДанные", Ложь);
	
	Если Результат <> Неопределено
		И Результат.Статус = "Выполнено" Тогда
		
		ИдентификаторОрганизации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
			
			ЗаписатьДанныеСертификатов(РезультатПроверки);
			ИзмененСоставСертификатов = Ложь;
			ИзмененыРегистрационныеДанные = Ложь;
			
		Иначе
			ЭлектронноеВзаимодействиеСлужебныйКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
				
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Закрыть = Ложь;
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при обновлении сертификатов у оператора ЭДО.
										|Подробности см. в журнале регистрации.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ЗаписатьИОтправитьВСервисы(РезультатПроверки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеСертификатов(Знач РезультатПроверки = Неопределено)
	
	ДанныеСертификатов = ВсеСертификатыИСамыйНовый(СписокСертификатов);
	ДобавитьСертификатыУчетныхЗаписейЭДО(Запись.ИдентификаторЭДО, ДанныеСертификатов.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСохранениеДанныхВСервисахАутентификация(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		 ВыполнитьСохранениеДанныхВСервисах(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыУведомленийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ИзмененыНастройкиУведомлений = Ложь;
	Успешно = Ложь;
	
	Если Результат <> Неопределено И Результат.Статус = "Выполнено" Тогда
		
		Если ПолучитьИзВременногоХранилища(Результат.АдресРезультата) Тогда
			ИзмененыНастройкиУведомлений = Ложь;
			Успешно = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Успешно Тогда 
		Закрыть = Ложь;
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при обновлении уведомлений у оператора ЭДО
			|Подробности см. в журнале регистрации.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ЗаписатьИОтправитьВСервисы(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаДанныхВСервисНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ИзмененыПараметрыУчетнойЗаписи = Ложь;
	
	Если Результат <> Неопределено 
		И Результат.Статус = "Выполнено"
		И ЗначениеЗаполнено(ПолучитьИзВременногоХранилища(Результат.АдресРезультата)) Тогда
		
		ИзмененыПараметрыУчетнойЗаписи = Ложь;
		
	ИначеЕсли ЭтотОбъект.Открыта() Тогда
		Закрыть = Ложь;
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при обновлении информации в сервисе настроек 1С:ЭДО
                               |Подробности см. в журнале регистрации.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЗаписатьИОтправитьВСервисы(ДополнительныеПараметры);
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлектроннаяПочтаНеКорректна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ГруппаОтбораИ = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запись.ЭлектроннаяПочтаДляУведомлений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьУведомления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запись.СпособОбменаЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЭлектроннаяПочтаДляУведомлений");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокСертификатов.СрокДействияВДнях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовСертификат");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовДействителенДо");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовСрокДействия");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовКемВыдан");
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокСертификатов.СрокДействияВДнях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокСертификатов.СрокДействияВДнях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 30;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовСертификат");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовДействителенДо");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовСрокДействия");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовКемВыдан");
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСрокДействияСертификата(Форма)
	НетДействующихСертификатов = Истина;
	Для Каждого СтрокаТЧ Из Форма.СписокСертификатов Цикл
		
		Если СтрокаТЧ.СрокДействияВДнях < 0 Тогда
			СрокДействия = НСтр("ru = 'Истек'");
		Иначе
			
			Если СтрокаТЧ.СрокДействияВДнях > 30 Тогда
				НетДействующихСертификатов = Ложь;
			КонецЕсли;
			
			СрокДействия = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		        НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня'"),
		        СтрокаТЧ.СрокДействияВДнях);
		КонецЕсли;
		
		СтрокаТЧ.СрокДействияСертификата = СрокДействия;
	КонецЦикла;
	
	Если НетДействующихСертификатов Тогда
		Форма.Элементы.СтраницаСертификаты.Картинка = БиблиотекаКартинок.НекорректныйКонтрагент;
	Иначе
		Форма.Элементы.СтраницаСертификаты.Картинка = Новый Картинка;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	Элементы.ГруппаОжиданиеТакском.Видимость       = Ложь;
	Элементы.ГруппаОжиданиеСинхронизации.Видимость = Ложь;
	Элементы.ГруппаОжиданиеУдаления.Видимость      = Ложь;
	
	Элементы.Уведомления.Видимость = Запись.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	Если Запись.ОбновитьНастройкиУведомлений Тогда
		Элементы.СтраницыУведомлений.ТекущаяСтраница = Элементы.СтраницаОбновлениеУведомлений;
	Иначе
		Элементы.СтраницыУведомлений.ТекущаяСтраница = Элементы.СтраницаНастройкаУведомлений;
	КонецЕсли;
	
	ЭтоТакском = (Запись.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	
	Элементы.ГруппаОбменЧерезОператораИнформация.Видимость = ЭтоТакском;
	Элементы.ГруппаАдрес.Видимость = Не ЭтоТакском;
	Элементы.ГруппаКодНО.Видимость = Не ЭтоТакском;
	
	ЭлектроннаяПочтаНеКорректна = Не ПустаяСтрока(Запись.ЭлектроннаяПочтаДляУведомлений)
		И Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Запись.ЭлектроннаяПочтаДляУведомлений);
	
	Заголовок = Запись.НаименованиеУчетнойЗаписи;
	
	ПолучитьПредставлениеОператора();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПредставлениеОператора()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОператорыЭДО.Представление КАК Представление
		|ИЗ
		|	РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
		|ГДЕ
		|	ОператорыЭДО.ИдентификаторОператора = &ИдентификаторОператора";
	
	Запрос.УстановитьПараметр("ИдентификаторОператора", Запись.ОператорЭДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПредставлениеОператора = ВыборкаДетальныеЗаписи.Представление;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ТестНастроекЭДО

&НаКлиенте
Процедура ТестНастроекПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = "Отменить" Тогда
			Возврат;
		ИначеЕсли Модифицированность Тогда
			Записать();
			
		КонецЕсли;
	КонецЕсли;
	
	// Блок проверки связи с оператором.
	Состояние(НСтр("ru = 'Тест настроек.'"),
		,
		НСтр("ru = 'Выполняется тестирование связи с сервисом ЭДО. Подождите...'"));
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковПроверитьСвязьЭДО", ЭтотОбъект);
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковПроверитьСвязьЭДО(Отпечатки, Параметры = Неопределено) Экспорт
	
	Если Не ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтпечатковСертификатов = Новый Массив;
	Для Каждого КлючЗначение Из Отпечатки Цикл
		МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	// Получаем доступные сертификаты без учета пользователя, поскольку тест профиля и его администрирование может
	// выполнять администратор системы, а не пользователь, подписывающий документы.
	Соответствие = ОбменСКонтрагентамиСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
												МассивОтпечатковСертификатов, Запись.ИдентификаторЭДО, Ложь);
	
	МассивСертификатов = Новый Массив;
	ЕстьСвойство = Ложь;
	Для Каждого КлючЗначение Из Соответствие Цикл
		СвойствоСертификата = Неопределено;
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура")
			И КлючЗначение.Значение.Свойство("ПарольПолучен", ЕстьСвойство) И ЕстьСвойство = Истина
			И КлючЗначение.Значение.Свойство("ПарольПользователя", СвойствоСертификата) Тогда
			ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(КлючЗначение.Ключ, СвойствоСертификата);
		КонецЕсли;
		МассивСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(МассивСертификатов) Тогда
		ТекстСообщения = НСтр("ru = 'Нет доступных сертификатов. Тест не выполнен.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ОбработкаПолученияМаркера = Новый ОписаниеОповещения("ПолучениеМаркераДляВыбранногоСертификата", ЭтотОбъект, ДополнительныеПараметры);
	ОбработкаЗавершения = Новый ОписаниеОповещения("ДействияПослеТестаСвязиЭДО", ЭтотОбъект, ДополнительныеПараметры);
	
	ШаблонОперация = НСтр("ru = 'Тест аутентификации: %1'");
	Операция = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОперация,
		Запись.НаименованиеУчетнойЗаписи);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            Операция);
	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	ОписаниеДанных.Вставить("ИзменятьНабор",       Ложь);
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ЭтоАутентификация",   Истина);
	ОписаниеДанных.Вставить("Данные",              ОбработкаПолученияМаркера);
	ОписаниеДанных.Вставить("БезПодтверждения",    ЕстьСвойство И МассивСертификатов.Количество() = 1);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеМаркераДляВыбранногоСертификата(Знач РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура")
		И Не РезультатВыполнения.ОписаниеДанных.Свойство("ВыбранныйСертификат") Тогда
		
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("СертификатПодписи", РезультатВыполнения.ОписаниеДанных.ВыбранныйСертификат.Ссылка);
	Контекст.Вставить("РезультатВыполнения", РезультатВыполнения);
	ПолучениеМаркераДляВыбранногоСертификатаПродолжить(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеМаркераДляВыбранногоСертификатаПродолжить(Контекст)
	
	ИнтернетПоддержкаПользователейПодключена = Ложь;
	СтруктураПараметровЗапросаМаркера = Новый Структура;
	СтруктураПараметровЗапросаМаркера.Вставить("СертификатПодписи",        Контекст.СертификатПодписи);
	СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД",           Запись.СпособОбменаЭД);
	СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", запись.ИдентификаторЭДО);
	
	ЗашифрованныеДанные = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера,
		ИнтернетПоддержкаПользователейПодключена);
		
	Если Не ИнтернетПоддержкаПользователейПодключена
		И ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
		
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			Новый ОписаниеОповещения("ПолучениеМаркераДляВыбранногоСертификатаАутентификация", ЭтотОбъект, Контекст),
			ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = Контекст.РезультатВыполнения;
	РезультатВыполнения.ОписаниеДанных.Данные = ЗашифрованныеДанные;
	
	Если ЗначениеЗаполнено(ЗашифрованныеДанные) Тогда
		Результат = РезультатВыполнения.ОписаниеДанных;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Не удалось пройти аутентификацию в сервисе оператора ЭДО.
									|Подробнее см. в журнале регистрации.'");
		
		Результат = Новый Структура;
		Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(РезультатВыполнения.Оповещение, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеМаркераДляВыбранногоСертификатаАутентификация(ПараметрыАутентификации, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыАутентификации) <> Тип("Структура") Тогда
		// Пользователь отказался от ввода логина и пароля.
		Возврат;
	КонецЕсли;
	
	ПолучениеМаркераДляВыбранногоСертификатаПродолжить(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеТестаСвязиЭДО(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если РезультатВыполнения.Успех = Истина Тогда
			Если Запись.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
			    СверитьУчетныеДанныеСОператором(РезультатВыполнения.РасшифрованныеДанные);
			Иначе
				ПриУспешнойПроверкеПрофиля();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СверитьУчетныеДанныеСОператором(РасшифрованныйМаркер)

	УчетныеДанныеОператора = УчетныеДанныеАбонентаТакском(РасшифрованныйМаркер);
	Если УчетныеДанныеОператора <> Неопределено Тогда
		Если УчетныеДанныеОператора.ИдентификаторОрганизации = Запись.ИдентификаторЭДО Тогда
			ПриУспешнойПроверкеПрофиля();
		Иначе 
			ШаблонСообщения = НСтр("ru = 'Идентификатор организации ""%1"", привязанный к учетной записи, отличается от указанного.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, УчетныеДанныеОператора.ИдентификаторОрганизации);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Запись.ИдентификаторЭДО, "ИдентификаторОрганизации", "Объект");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция УчетныеДанныеАбонентаТакском(ДанныеМаркера)
	
	Результат = Неопределено;
	
	СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
	АдресРесурса = "GetMyAccountInfo";
	ВидОперации = НСтр("ru = 'Получение учетных данных'");
	
	РезультатОперации = ОбменСКонтрагентамиВнутренний.РезультатОперацииЭДОПолучить(ДанныеМаркера, СпособОбмена, АдресРесурса,
		ВидОперации);
		
	Если РезультатОперации <> Неопределено Тогда
		Если РезультатОперации.Свойства().Получить("TaxcomId") = Неопределено Тогда
			ПодробноеОписаниеОшибки = НСтр("ru = 'Ошибка чтения ответа сервиса ЭДО: Поле ""TaxcomId"" в ответе сервера не обнаружено.'");
		ИначеЕсли Не ЗначениеЗаполнено(РезультатОперации.TaxcomId) Тогда
			ПодробноеОписаниеОшибки = НСтр("ru = 'Ошибка чтения ответа сервиса ЭДО: Поле ""TaxcomId"" в ответе сервера не заполнено.'");	
		Иначе
			Результат = Новый Структура;
			Результат.Вставить("ИдентификаторОрганизации", РезультатОперации.TaxcomId);
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка чтения ответа сервиса ЭДО.'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробноеОписаниеОшибки, ТекстОшибки);	
		КонецЕсли;
	Иначе
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриУспешнойПроверкеПрофиля()
	
	ТекстСообщения = НСтр("ru = 'Тест профиля настроек выполнен успешно.'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

#КонецОбласти

#Область РаботаСТакском

&НаКлиенте
Процедура ЗарегистрироватьСертификатТакском(ДобавляемыйСертификат)
	
	// Проводим тест настроек сертификата подписи с подавлением вывода успешных результатов.
	ОчиститьСообщения();
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(ДобавляемыйСертификат) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
											ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", "Сертификат"),
											,
											"СписокСертификатов",
											,
											Отказ);
										КонецЕсли;
										
	Если Не ЗначениеЗаполнено(Запись.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
											ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", "Организация"),
											,
											"Организация",
											,
											Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДобавляемыйСертификат", ДобавляемыйСертификат);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ЗарегистрироватьСертификатТакскомОповещение", ЭтотОбъект, Контекст);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ТестНастроекСПроверкойСертификата(ДобавляемыйСертификат, ЭтаФорма,
		Ложь, Истина, Истина, ОбработкаОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификатТакскомОповещение(РезультатВыполнения, Контекст) Экспорт
	
	Если РезультатВыполнения = Истина Тогда
		
		Элементы.СписокСертификатов.Доступность = Ложь;
		Элементы.ГруппаОжиданиеТакском.Видимость  = Истина;
		
		ДополнительныеОбработчики  = Новый Структура;
		
		ДополнительныеОбработчики.Вставить("ОбработчикСтатусаЗаявки" ,
			Новый ОписаниеОповещения("ПолучениеНовогоИдентификатораТакскомОбработчикСтатусаЗаявки"   , ЭтотОбъект));
			
		ДополнительныеОбработчики.Вставить("ОбработчикСозданияЗаявки",
			Новый ОписаниеОповещения("ПолучениеНовогоИдентификатораТакскомОбработчикСозданияЗаявки" , ЭтотОбъект, Контекст));
			
		ДополнительныеОбработчики.Вставить("ОбработчикРезультата"    ,
			Новый ОписаниеОповещения("ПолучениеНовогоИдентификатораТакскомОбработчикРезультата"    , ЭтотОбъект));
		
		Подключение1СТакскомКлиент.ЗарегистрироватьСертификатАбонента(Контекст.ДобавляемыйСертификат,
			Запись.ИдентификаторЭДО,
			Запись.Организация,
			Новый ОписаниеОповещения("ЗарегистрироватьСертификатТакскомЗавершение", ЭтотОбъект, Контекст), ДополнительныеОбработчики);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификатТакскомЗавершение(РезультатВыполнения, Контекст) Экспорт
	
	Элементы.СписокСертификатов.Доступность = Истина;
	Элементы.ГруппаОжиданиеТакском.Видимость  = Ложь;
	
	Если ТекущийСтатусЗаявкиТакском = "Обработана" Тогда
		ЗаписатьСертификатТакском(Контекст);
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'"),, НСтр("ru = 'Сертификат успешно зарегистрирован у  оператора.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСертификатТакском(Знач Контекст)
	
	ДобавитьСертификатыУчетныхЗаписейЭДО(Запись.ИдентификаторЭДО, Контекст.ДобавляемыйСертификат);
	ДобавитьСертификатВСписок(Контекст.ДобавляемыйСертификат, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПолучениеНовогоИдентификатораТакскомОбработчикСтатусаЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Новый Структура;
	Действие = "СтандартнаяОбработка";
	Если Результат.СтатусЗаявки = "Отсутствует" Тогда
		Действие = "НоваяЗаявка";
	ИначеЕсли Результат.СтатусЗаявки = "ОжиданиеОбработки" Тогда
		Действие = "ПроверитьСтатусЗаявки";
	ИначеЕсли Результат.СтатусЗаявки = "Обработана" Тогда
		Действие = "Завершить";
	ИначеЕсли Результат.СтатусЗаявки = "Отклонена" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
		Действие = "Завершить";
	КонецЕсли;
	
	ТекущийСтатусЗаявкиТакском = Результат.СтатусЗаявки;
	
	Ответ.Вставить("Действие", Действие);
	ВыполнитьОбработкуОповещения(Результат.ОбработчикРезультата, Ответ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеНовогоИдентификатораТакскомОбработчикСозданияЗаявки(Результат, Контекст) Экспорт
	
	Ответ = Новый Структура;
	
	ДанныеЗаявки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Результат.ДанныеЗаявки);
	ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(Контекст.ДобавляемыйСертификат);
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаявки, ПараметрыСертификата,"Фамилия, Имя, Отчество");
	
	Ответ.Вставить("Действие", "ОтправитьЗаявку");
	Ответ.Вставить("ДанныеЗаявки", ДанныеЗаявки);
	
	ВыполнитьОбработкуОповещения(Результат.ОбработчикРезультата, Ответ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеНовогоИдентификатораТакскомОбработчикРезультата(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСертификатовПередДобавлением

&НаКлиенте
Процедура ВыполнитьПроверкиПередДобавлениемСертификата(Сертификат, ОповещениеПослеПроверки)

	// Сначала нужно проверить, что выбранный сертификат уже не содержится в списке
	МассивСтрок = СписокСертификатов.НайтиСтроки(Новый Структура("Сертификат", Сертификат));
	Если МассивСтрок.Количество() > 0 И Не МассивСтрок[0].Скрыть Тогда
		ТекстПредупреждения = НСтр("ru = 'Выбранный сертификат уже добавлен для учетной записи ЭДО'");
		ПоказатьПредупреждение(, ТекстПредупреждения, 30);
		Возврат;
	КонецЕсли;
	
	РезультатыПроверки = РезультатПроверкиПередДобавлениемСертификата(Запись.Организация, Сертификат);
	
	// Облачные сертификаты могут быть запрещены.
	Если РезультатыПроверки.СертификатЗапрещенКакОблачный Тогда
		ТекстСообщения = НСтр("ru = 'Выбранный сертификат связан с недопустимым средством ""облачной"" электронной подписи.
			|Согласно приказу Минфина РФ от 10.11.2015 № 174Н электронные документы должны быть подписаны
			|усиленной квалифицированной электронной подписью с использованием средств электронной подписи,
			|имеющих подтверждение (сертификат) соответствия требованиям, установленным в соответствии с Федеральным законом от 06.04.2011 N 63-ФЗ.
			|Выберите сертификат, связанный с другим средством электронной подписи.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если РезультатыПроверки.ИННОтличается ИЛИ РезультатыПроверки.КППОтличается Тогда
		ДополнительныеПараметры = Новый Структура("ОписаниеОповещения, Сертификат", ОповещениеПослеПроверки, Сертификат);
		ПослеПодтвержденияДобавленияСертификата = Новый ОписаниеОповещения("ПослеПодтвержденияДобавленияСертификата",
					ЭтотОбъект, ДополнительныеПараметры);
		
		Вопросы = Новый Массив;
		
		Если РезультатыПроверки.ИННОтличается И РезультатыПроверки.КППОтличается Тогда
			ПредупреждениеОРазличииРеквизитов = НСтр("ru = 'ИНН/КПП по данным выбранного сертификата не совпадают с ИНН/КПП организации.'");
		ИначеЕсли РезультатыПроверки.ИННОтличается Тогда
			ПредупреждениеОРазличииРеквизитов = НСтр("ru = 'ИНН по данным выбранного сертификата не совпадает с ИНН организации.'");
		Иначе
			ПредупреждениеОРазличииРеквизитов = НСтр("ru = 'КПП по данным выбранного сертификата не совпадает с КПП организации.'");
		КонецЕсли;
		
		Вопросы.Добавить(ПредупреждениеОРазличииРеквизитов);
		Вопросы.Добавить(НСтр("ru = 'Продолжить регистрацию сертификата?'"));
		
		ТекстВопроса = СтрСоединить(Вопросы, Символы.ПС);
		ПоказатьВопрос(ПослеПодтвержденияДобавленияСертификата, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		ПриУспешнойПроверкеПередДобавлениемСертификата(Сертификат, ОповещениеПослеПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатПроверкиПередДобавлениемСертификата(Организация, Сертификат)

	Результат = Новый Структура;
	
	// Проверяем равенство ИНН и КПП в сертификате и организации.
	СвойстваСубъекта = ЭлектронноеВзаимодействиеСлужебный.СвойстваСубъектаСертификата(Сертификат);
	СвойстваСубъекта.Вставить("ИНН", 
		СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СвойстваСубъекта.ИНН, 12, "0"));
	
	РеквизитИНН = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	РеквизитКПП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, РеквизитИНН + ", " + РеквизитКПП);
	СвойстваОрганизации.Вставить(РеквизитИНН, 
		СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СвойстваОрганизации[РеквизитИНН], 12, "0"));
	
	Результат.Вставить("ИННОтличается", СвойстваСубъекта.Свойство("ИНН") И СвойстваСубъекта.ИНН <> СвойстваОрганизации[РеквизитИНН]);
	Результат.Вставить("КППОтличается", СвойстваСубъекта.Свойство("КПП") И СвойстваСубъекта.КПП <> СвойстваОрганизации[РеквизитКПП]);
	
	// Проверяем для облачных сертификатов, что их можно использовать.
	Результат.Вставить("СертификатЗапрещенКакОблачный", Ложь);
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиентСервер");
		Если МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно()
			И НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ИспользованиеСертификатовОблачногоСервисаВозможно()
			И ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСертификатОблачногоСервиса(Сертификат) Тогда
			
			Результат.Вставить("СертификатЗапрещенКакОблачный", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПриУспешнойПроверкеПередДобавлениемСертификата(Сертификат, ОповещениеПослеПроверки)

	ВыполнитьОбработкуОповещения(ОповещениеПослеПроверки, Сертификат); 

КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияДобавленияСертификата(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПриУспешнойПроверкеПередДобавлениемСертификата(ДополнительныеПараметры.Сертификат,
			ДополнительныеПараметры.ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроверкиЗаполнения

&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитов()
	
	ОшибкаЗаполнения = Ложь;
	
	ИспользоватьУведомления = ЕстьВключенныеСобытия();
	
	Если ИспользоватьУведомления Тогда
			
		Если ИспользоватьУведомления
			И Не ЗначениеЗаполнено(Запись.ЭлектроннаяПочтаДляУведомлений) Тогда
				ОшибкаЗаполнения = Истина;
				ТекстСообщения = НСтр("ru = 'Не указана почта для уведомлений'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ЭлектроннаяПочтаДляУведомлений");
		ИначеЕсли ИспользоватьУведомления И ЭлектроннаяПочтаНеКорректна Тогда
				ОшибкаЗаполнения = Истина;
				ТекстСообщения = НСтр("ru = 'Электронная почта указана не верно'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ЭлектроннаяПочтаДляУведомлений");
		КонецЕсли;
			
		Если Не ПроверитьЗаполнение() Тогда
			ОшибкаЗаполнения = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокСертификатов.НайтиСтроки(Новый Структура("Скрыть", Ложь)).Количество() = 0 Тогда
		ОшибкаЗаполнения = Истина;
		ТекстСообщения = НСтр("ru = 'Нет доступных сертификатов'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СписокСертификатов");
	КонецЕсли;
	
	Возврат ОшибкаЗаполнения;
	
КонецФункции

&НаКлиенте
Функция ЕстьВключенныеСобытия()
	
	Результат = Ложь;
	Если Запись.УведомлятьОбОкончанииСрокаДействияСертификата
		Или Запись.УведомлятьОНеОбработанныхДокументах
		Или Запись.УведомлятьОНовыхДокументах
		Или Запись.УведомлятьОбОтветахНаПриглашения
		Или Запись.УведомлятьОНовыхПриглашениях Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
Процедура ЗарегистрироватьДобавитьСертификат(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Запись.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		
		Если ОбменСКонтрагентамиСлужебныйКлиент.ИспользуетсяИнтернетПоддержкаПользователей() Тогда
			
			ЗарегистрироватьСертификатТакском(ВыбранноеЗначение);
			
		Иначе
			
			ДобавитьСертификатВСписок(ВыбранноеЗначение, Ложь);
			ИзмененСоставСертификатов = Истина;
			Модифицированность = Истина;
			
			// В случае, если в конфигурацию не встроена интернет-поддержка или работа производится в режиме сервиса,
			// сертификат в сервисе 1С-Такском необходимо регистрировать через тех. поддержку.
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сертификат добавлен в учетную запись, но для регистрации его в сервисе ЭДО необходимо обратиться в техническую поддержку 1С-ЭДО.'"));
			
		КонецЕсли;
		
	ИначеЕсли Запись.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
			
		ДобавитьСертификатВСписок(ВыбранноеЗначение, Истина);
		
		ИзмененСоставСертификатов = Истина;
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСертификатыУчетныхЗаписейЭДО(Знач ИдентификаторЭДО, Знач Сертификаты)
	
	РегистрыСведений.СертификатыУчетныхЗаписейЭДО.ДобавитьСертификат(ИдентификаторЭДО, Сертификаты);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСертификатВСписок(ДобавляемыйСертификат, ТребуетсяСинхронизация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Сертификат,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо КАК СертификатДействителенДо,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.КемВыдан КАК КемВыдан,
		|	ВЫБОР
		|		КОГДА СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо >= &ТекущаяДата
		|			ТОГДА РАЗНОСТЬДАТ(&ТекущаяДата, СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо, ДЕНЬ)
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СрокДействияВДнях,
		|	&ТребуетсяСинхронизация КАК ТребуетсяСинхронизация,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Наименование КАК Представление
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка = &ДобавляемыйСертификат";
	
	Запрос.УстановитьПараметр("ДобавляемыйСертификат" , ДобавляемыйСертификат);
	Запрос.УстановитьПараметр("ТекущаяДата"           , ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТребуетсяСинхронизация", ТребуетсяСинхронизация);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокиСертификата = СписокСертификатов.НайтиСтроки(Новый Структура("Сертификат", ДобавляемыйСертификат));
		Если СтрокиСертификата.Количество() = 0 Тогда
			СтрокаСертификата = СписокСертификатов.Добавить();
		Иначе
			СтрокаСертификата = СтрокиСертификата[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаСертификата, ВыборкаДетальныеЗаписи);
		СтрокаСертификата.Скрыть = Ложь;
		
	КонецЦикла;
	
	ЗаполнитьСрокДействияСертификата(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменилисьПараметрыУчетнойЗаписи()
	
	ИзмененыПараметрыУчетнойЗаписи = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИспользованиеУведомлений(Элемент)
	
	ИспользоватьУведомления = Запись.УведомлятьОбОкончанииСрокаДействияСертификата
		Или Запись.УведомлятьОНеОбработанныхДокументах
		Или Запись.УведомлятьОНовыхДокументах
		Или Запись.УведомлятьОбОтветахНаПриглашения
		Или Запись.УведомлятьОНовыхПриглашениях;
		
	Если Элемент <> Неопределено Тогда
		ИзмененыНастройкиУведомлений = Истина;
		Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВсеСертификатыИСамыйНовый(Знач СписокСертификатов)
	
	Результат = Новый Структура("СамыйНовый, Список");
	ТаблицаРезультатов = СписокСертификатов.Выгрузить(Новый Структура("Скрыть", Ложь));
	
	Результат.Список = ТаблицаРезультатов.ВыгрузитьКолонку("Сертификат");
	
	ТаблицаРезультатов.Сортировать("СрокДействияВДнях Убыв");
	Результат.СамыйНовый = ТаблицаРезультатов[0].Сертификат;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНеСохраненныеРеквизиты(Знач ИдентификаторЭДО, Знач ИзмененыПараметрыУчетнойЗаписи,Знач ИзмененыНастройкиУведомлений)
	
	Результат = Новый Структура;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("ВЫБРАТЬ" + Символы.ПС);
	
	Если ИзмененыНастройкиУведомлений Тогда
		МассивСтрок.Добавить("УчетныеЗаписиЭДО.УведомлятьОНовыхПриглашениях КАК УведомлятьОНовыхПриглашениях,
		|	УчетныеЗаписиЭДО.УведомлятьОбОтветахНаПриглашения КАК УведомлятьОбОтветахНаПриглашения,
		|	УчетныеЗаписиЭДО.УведомлятьОНовыхДокументах КАК УведомлятьОНовыхДокументах,
		|	УчетныеЗаписиЭДО.ЭлектроннаяПочтаДляУведомлений КАК ЭлектроннаяПочтаДляУведомлений,
		|	УчетныеЗаписиЭДО.УведомлятьОНеОбработанныхДокументах КАК УведомлятьОНеОбработанныхДокументах,
		|	УчетныеЗаписиЭДО.УведомлятьОбОкончанииСрокаДействияСертификата КАК УведомлятьОбОкончанииСрокаДействияСертификата");
		Если ИзмененыПараметрыУчетнойЗаписи Тогда
			МассивСтрок.Добавить("," + Символы.ПС);
		КонецЕсли;
	КонецЕсли;
	
	Если ИзмененыПараметрыУчетнойЗаписи Тогда
		МассивСтрок.Добавить("	УчетныеЗаписиЭДО.НазначениеУчетнойЗаписи КАК НазначениеУчетнойЗаписи,
		|	УчетныеЗаписиЭДО.ПодробноеОписаниеУчетнойЗаписи КАК ПодробноеОписаниеУчетнойЗаписи");
	КонецЕсли;
	
	МассивСтрок.Добавить(Символы.ПС);
	
	МассивСтрок.Добавить("ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО = &ИдентификаторЭДО");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(МассивСтрок, "");
	Запрос.УстановитьПараметр("ИдентификаторЭДО", ИдентификаторЭДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	Таблица = РезультатЗапроса.Выгрузить();
	Если ЗначениеЗаполнено(Таблица) Тогда
		Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Таблица[0]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ЦветСтиля(Знач ИмяЦветаСтиля)
	
	ЦветСтиля = Новый Цвет;
	
	#Если Клиент Тогда
		ЦветСтиля = ОбщегоНазначенияКлиент.ЦветСтиля(ИмяЦветаСтиля);
	#Иначе
		ЦветСтиля = ЦветаСтиля[ИмяЦветаСтиля];
	#КонецЕсли
	
	Возврат ЦветСтиля;
	
КонецФункции

#КонецОбласти

#Область УдалениеУчетнойЗаписи

&НаКлиенте
Процедура ПослеВопросаУдаленияНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Модифицированность = Ложь;
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИдентификаторЭДО"         , Запись.ИдентификаторЭДО);
	ПараметрыПроцедуры.Вставить("НаименованиеУчетнойЗаписи", Запись.НазначениеУчетнойЗаписи);
	
	ДлительнаяОперация = НачатьУдалениеУчетнойЗаписиНаСервере(УникальныйИдентификатор, ПараметрыПроцедуры);
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ТолькоПросмотр = Истина;
		ВыполняетсяДлительнаяОперация = Истина;
		Элементы.ГруппаОжиданиеУдаления.Видимость = Истина;
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		Описание = Новый ОписаниеОповещения("ПриЗавершенииУдаленияУчетнойЗаписи", ЭтаФорма);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииУдаленияУчетнойЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	ТолькоПросмотр = Ложь;
	ВыполняетсяДлительнаяОперация = Ложь;
	Элементы.ГруппаОжиданиеУдаления.Видимость = Ложь;

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ТекстСообщения = НСтр("ru = 'Во время удаления учетной записи произошла ошибка.'");
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Удаление учетной записи ЭДО'"),
			Результат.ПодробноеПредставлениеОшибки, ТекстСообщения);
			
		Возврат;
	КонецЕсли;
	
	Если ПолучитьИзВременногоХранилища(Результат.АдресРезультата) = Ложь Тогда
		
		Оповестить("ОбновленСписокУчетныхЗаписей1СЭДО");
		Закрыть();
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Во время удаления учетной записи произошла ошибка.
                               |Подробнее см. в журнале регистрации.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьУдалениеУчетнойЗаписиНаСервере(Знач УникальныйИдентификатор, Знач ПараметрыПроцедуры)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Удаление учетной записи ЭДО'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("РегистрыСведений.УчетныеЗаписиЭДО.УдалитьУчетнуюЗаписьЭДО",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ПерейтиВЛичныйКабинет(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	Массив = Новый Массив;
	Массив.Добавить(запись.ИдентификаторЭДО);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ПерейтиВЛичныйКабинетОповещение", ЭтотОбъект);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработкаОповещения, Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЛичныйКабинетОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейИПараметровСертификатов = "";
	СертификатПодписи  = Неопределено;
	ПарольПользователя = Неопределено;
	Если Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов)
		И Не ЗначениеЗаполнено(СоответствиеПрофилейИПараметровСертификатов) Тогда
		
		ТекстСообщения = НСтр("ru='Нет доступных сертификатов, среди зарегистрированных по данной учетной записи.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,
			,
			"СписокСертификатов",
			"СписокСертификатов");
	Иначе
		Для Каждого ЭлементСтруктуры Из СоответствиеПрофилейИПараметровСертификатов Цикл
			СтруктураСертификата = ЭлементСтруктуры.Значение;
			Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
				СтруктураСертификата.Свойство("СертификатПодписи", СертификатПодписи);
				СтруктураСертификата.Свойство("ПарольПользователя", ПарольПользователя);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		Подключение1СТакскомКлиент.ОткрытьЛичныйКабинетАбонента(СертификатПодписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНовыеЗначенияВПараметрыЗаписи(ЗначенияСвойств, ПараметрыЗаписи)
	
	СписокНеСохраненныхСвойств = Новый Структура;
	СписокНеСохраненныхСвойств.Вставить("ИзмененСоставСертификатов"     , ИзмененСоставСертификатов);
	СписокНеСохраненныхСвойств.Вставить("ИзмененыНастройкиУведомлений"  , ИзмененыНастройкиУведомлений);
	СписокНеСохраненныхСвойств.Вставить("ИзмененыПараметрыУчетнойЗаписи", ИзмененыПараметрыУчетнойЗаписи);
	СписокНеСохраненныхСвойств.Вставить("ИзмененыРегистрационныеДанные" , ИзмененыРегистрационныеДанные);
	
	ЗначенияЗаписи = Новый Структура;
	Для Каждого Элемент Из ЗначенияСвойств Цикл
		
		ЗначенияЗаписи.Вставить(Элемент.Ключ,Запись[Элемент.Ключ]);
		
	КонецЦикла;
	
	СписокНеСохраненныхСвойств.Вставить("ЗначенияЗаписи", ЗначенияЗаписи);
	
	ПараметрыЗаписи.Вставить("СписокНеСохраненныхСвойств", СписокНеСохраненныхСвойств);
КонецПроцедуры

#Область Уведомления

&НаКлиенте
Процедура ЗагрузитьНастройкиУведомленийИзСервиса()
	
	ДанныеСертификатов = ВсеСертификатыИСамыйНовый(СписокСертификатов);
	
	ПараметрыЗапросаМаркера = Новый Структура;
	ПараметрыЗапросаМаркера.Вставить("СертификатПодписи", ДанныеСертификатов.СамыйНовый);
	ПараметрыЗапросаМаркера.Вставить("СпособОбменаЭД", Запись.СпособОбменаЭД);
	ПараметрыЗапросаМаркера.Вставить("ИдентификаторОрганизации", Запись.ИдентификаторЭДО);
	
	ИнтернетПоддержкаПользователейПодключена = Ложь;
	
	Маркер = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗашифрованныйМаркер(
		ПараметрыЗапросаМаркера, ИнтернетПоддержкаПользователейПодключена, Истина, Ложь);
	
	Если Не ИнтернетПоддержкаПользователейПодключена
		И ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
		ОбработкаПодключенияИПП = Новый ОписаниеОповещения("ЗагрузитьНастройкиУведомленийИзСервисаАутентификация", ЭтотОбъект);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОбработкаПодключенияИПП, ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация в сервисе ЭДО'"));
	ОписаниеДанных.Вставить("ОтборСертификатов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСертификатов.СамыйНовый));
	ОписаниеДанных.Вставить("ИзменятьНабор", Ложь);
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
	ОписаниеДанных.Вставить("Данные", Маркер);
	ОписаниеДанных.Вставить("БезПодтверждения", Истина);
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("ЗагрузитьНастройкиУведомленийИзСервисаРасшифровка", ЭтотОбъект);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиУведомленийИзСервисаАутентификация(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		 ЗагрузитьНастройкиУведомленийИзСервиса();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиУведомленийИзСервисаРасшифровка(ОписаниеДанных, ДополнительныеПараметры) Экспорт
	
	Если Не ОписаниеДанных.Свойство("Успех") Тогда
		Возврат;
	КонецЕсли;
	Если Не ОписаниеДанных.Успех Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиУведомления = СвойстваПодписок(ОписаниеДанных.РасшифрованныеДанные);
	
	Если НастройкиУведомления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьУведомления = НастройкиУведомления.ВключитьПодписку;
	Запись.ЭлектроннаяПочтаДляУведомлений = НастройкиУведомления.ЭлектроннаяПочта;
	Запись.УведомлятьОНовыхПриглашениях = НастройкиУведомления.Приглашения;
	Запись.УведомлятьОбОтветахНаПриглашения = НастройкиУведомления.Ответы;
	Запись.УведомлятьОНовыхДокументах = НастройкиУведомления.НовыеЭД;
	Запись.УведомлятьОНеОбработанныхДокументах = НастройкиУведомления.СтарыеЭД;
	Запись.УведомлятьОбОкончанииСрокаДействияСертификата = НастройкиУведомления.Сертификаты;
	
	Запись.ОбновитьНастройкиУведомлений = Ложь;
	Модифицированность = Истина;
	Элементы.СтраницыУведомлений.ТекущаяСтраница = Элементы.СтраницаНастройкаУведомлений;
	
КонецПроцедуры

&НаСервере
Функция СвойстваПодписок(Знач РасшифрованныйМаркер)
	
	СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	АдресРесурса = "GetSubscriptions/?query=" + Запись.ИдентификаторЭДО;
	ВидОперации = НСтр("ru = 'Получение информации о свойствах подписки ЭДО'");

	Если ЭтоАдресВременногоХранилища(РасшифрованныйМаркер) Тогда
		Маркер = ПолучитьИзВременногоХранилища(РасшифрованныйМаркер);
	Иначе
		Маркер = РасшифрованныйМаркер;
	КонецЕсли;
	
	
	Настройка = ОбменСКонтрагентамиВнутренний.РезультатОперацииЭДОПолучить(Маркер, СпособОбмена, АдресРесурса, ВидОперации);
	
	Если Настройка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваПодписок = ПустыеРеквизитыПодписки();
	
	СвойстваПодписок.ВключитьПодписку = ЗначениеСтатуса(Настройка.Total.Status);
	СвойстваПодписок.ЭлектроннаяПочта = Настройка.Mail;
	СвойстваПодписок.Приглашения = ЗначениеСтатуса(Настройка.NewInvitations.Status);
	СвойстваПодписок.Ответы = ЗначениеСтатуса(Настройка.NewInvitationResults.Status);
	СвойстваПодписок.НовыеЭД = ЗначениеСтатуса(Настройка.NewMessages.Status);
	СвойстваПодписок.СтарыеЭД = ЗначениеСтатуса(Настройка.UnfinishedMessages.Status);
	СвойстваПодписок.Сертификаты = ЗначениеСтатуса(Настройка.CertExpiration.Status);
	
	Возврат СвойстваПодписок;
	
КонецФункции

&НаСервере
Функция ПустыеРеквизитыПодписки()
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ВключитьПодписку", Неопределено);
	Реквизиты.Вставить("ЭлектроннаяПочта", Неопределено);
	Реквизиты.Вставить("Приглашения", Неопределено);
	Реквизиты.Вставить("Ответы", Неопределено);
	Реквизиты.Вставить("НовыеЭД", Неопределено);
	Реквизиты.Вставить("СтарыеЭД", Неопределено);
	Реквизиты.Вставить("Сертификаты", Неопределено);
	
	Возврат Реквизиты;
	
КонецФункции

&НаСервере
Функция ЗначениеСтатуса(ЗначениеСтатусаВФайле)
	
	Если ВРег(ЗначениеСтатусаВФайле) = ВРег("True") Тогда
		ЗначениеСтатуса = Истина;
	Иначе
		ЗначениеСтатуса = Ложь;
	КонецЕсли;
	
	Возврат ЗначениеСтатуса;
	
КонецФункции

#КонецОбласти

#Область Адрес

&НаСервереБезКонтекста 
Функция ДанныеКонтактнойИнформацииПоПредставлению(Знач Представление, Знач ОжидаемыйТипВид)
	
	Данные = Новый Структура;
	Данные.Вставить("Значение", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ОжидаемыйТипВид));
	Данные.Вставить("ПараметрыВида", УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ОжидаемыйТипВид));
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Процедура НачатьРедактированиеАдресаОрганизации()
	
	ТипАдрес = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
	
	Данные = ДанныеКонтактнойИнформацииПоПредставлению(
		Запись.АдресОрганизации, ТипАдрес);
	
	Данные.ПараметрыВида.РедактированиеТолькоВДиалоге = Истина;
	Данные.ПараметрыВида.ОбязательноеЗаполнение = Истина;
	Данные.ПараметрыВида.Наименование = НСтр("ru = 'Юридический адрес организации'");
	Данные.ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		Данные.ПараметрыВида, Данные.Значение, АдресОрганизации,, ТипАдрес);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьРедактированиеАдресаОрганизации", ЭтотОбъект);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, , ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеАдресаОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Запись.АдресОрганизации = Результат.Представление;
		ПриИзмененииАдресаОрганизации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииАдресаОрганизации()
	
	ПриИзмененииРегистрационныхДанных();
	НастроитьЭлементыАдресаОрганизации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура НастроитьЭлементыАдресаОрганизации(Форма)
	
	Элементы = Форма.Элементы;
	Запись = Форма.Запись;
	Шаблон = НСтр("ru = '%1: %2'");
	
	Элементы.ГруппаАдрес.ЗаголовокСвернутогоОтображения =
		СтрШаблон(Шаблон, Элементы.ГруппаАдрес.Заголовок, Запись.АдресОрганизации);
	
	ЗаголовокКнопкиИзменения = НСтр("ru = 'Заполните адрес организации'");
	ЦветТекстаКнопкиИзменения = ЦветСтиля("НезаполненныйРеквизитЦветБЭД");
	
	Если ЗначениеЗаполнено(Запись.АдресОрганизации) Тогда
		ЗаголовокКнопкиИзменения = Запись.АдресОрганизации;
		ЦветТекстаКнопкиИзменения = Новый Цвет;
	КонецЕсли;
	
	Элементы.ИзменитьАдресОрганизации.Заголовок = ЗаголовокКнопкиИзменения;
	Элементы.ИзменитьАдресОрганизации.ЦветТекста = ЦветТекстаКнопкиИзменения;
	
	АдресСовпадает = (Форма.АдресОрганизации = Запись.АдресОрганизации) ИЛИ Не ЗначениеЗаполнено(Форма.АдресОрганизации);
	
	Элементы.ДекорацияАдрес.Видимость = Не АдресСовпадает;
	Элементы.ГруппаАдрес.ЦветТекстаЗаголовка = 
		?(АдресСовпадает, Новый Цвет, Элементы.ДекорацияАдрес.ЦветТекста);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияОбАдресеОрганизации(Знач Организация)
	
	Информация = Новый Структура();
	Информация.Вставить("Значение", "");
	Информация.Вставить("Представление", "");
	
	ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Организация, ВидАдреса, ТекущаяДатаСеанса(), Ложь);
	
	НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ВидАдреса));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Информация.Представление = НайденныеСтроки[0].Представление;
		Информация.Значение = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	Возврат Информация;
	
КонецФункции

#КонецОбласти

#Область КодНалоговогоОргана

&НаКлиенте
Процедура НачатьРедактированиеКодаНалоговогоОргана()
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьРедактированиеКодаНалоговогоОргана", ЭтотОбъект);
	
	СтандартнаяОбработкаМетода = Истина;
	ОбменСКонтрагентамиКлиентПереопределяемый.ЗаполнитьКодНалоговогоОргана(ОбработкаЗавершения, СтандартнаяОбработкаМетода);
	
	Если Не СтандартнаяОбработкаМетода Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Запись.КодНалоговогоОргана) Тогда
		ПараметрыФормы.Вставить("КодНалоговогоОргана", Запись.КодНалоговогоОргана);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.ВводКодаНалоговогоОргана",
		ПараметрыФормы, УникальныйИдентификатор, , , , ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеКодаНалоговогоОргана(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Запись.КодНалоговогоОргана = Формат(Результат, "ЧГ=");
		ПриИзмененииКодаНалоговогоОргана();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКодаНалоговогоОргана()
	
	ПриИзмененииРегистрационныхДанных();
	НастроитьЭлементыКодаНалоговогоОргана(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура НастроитьЭлементыКодаНалоговогоОргана(Форма)
	
	Элементы = Форма.Элементы;
	Запись = Форма.Запись;
	Шаблон = НСтр("ru = '%1: %2'");
	
	Элементы.ГруппаКодНО.ЗаголовокСвернутогоОтображения =
		СтрШаблон(Шаблон, Элементы.ГруппаКодНО.Заголовок, Запись.КодНалоговогоОргана);
	
	ЗаголовокКнопкиИзменения = НСтр("ru = 'Укажите код налоговой инспекции'");
	ЦветТекстаКнопкиИзменения = ЦветСтиля("НезаполненныйРеквизитЦветБЭД");
	
	Если ЗначениеЗаполнено(Запись.КодНалоговогоОргана) Тогда
		ЗаголовокКнопкиИзменения = Запись.КодНалоговогоОргана;
		ЦветТекстаКнопкиИзменения = Новый Цвет;
	КонецЕсли;
	
	Элементы.ИзменитьКодНалоговогоОргана.Заголовок = ЗаголовокКнопкиИзменения;
	Элементы.ИзменитьКодНалоговогоОргана.ЦветТекста = ЦветТекстаКнопкиИзменения;
	
	КодНОСовпадает = (Форма.КодНалоговогоОргана = Запись.КодНалоговогоОргана)
		ИЛИ Не ЗначениеЗаполнено(Форма.КодНалоговогоОргана);
	
	Элементы.ДекорацияКодНалоговогоОргана.Видимость = Не КодНОСовпадает;
	Элементы.ГруппаКодНО.ЦветТекстаЗаголовка = 
		?(КодНОСовпадает, Новый Цвет, Элементы.ДекорацияКодНалоговогоОргана.ЦветТекста);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрационныеДанные

&НаКлиенте
Процедура ПриИзмененииРегистрационныхДанных()
	
	ИзмененыРегистрационныеДанные = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

ВыполняетсяДлительнаяОперация = Ложь;

#КонецОбласти

