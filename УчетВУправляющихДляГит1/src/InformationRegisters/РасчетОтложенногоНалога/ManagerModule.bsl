#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти
	
#Область ПрограммныйИнтерфей
	
// Приводит значение измерений ПериодРасчета и ОтчетнаяДата к принятым для регистра.
//
// Для регистра используется соглашение:
// ПериодРасчета и ОтчетнаяДата - это всегда дата начала месяца.
// Это сделано, чтобы в справках-расчетах было проще получать данные
// (избежать неоднозначности, на какую конкретно дату в течение месяца выбирать данные).
// См. также ПериодРасчета()
//
// Параметры:
//  ПериодРасчета  - Дата - значение измерения ПериодРасчета.
//
Процедура ПривестиПериодРасчета(ПериодРасчета) Экспорт
	
	ПериодРасчета = НачалоМесяца(ПериодРасчета);
	
КонецПроцедуры

// Определяет период расчета, за который в регистре записаны данные на отчетную дату.
//
// ПериодРасчета определяет период, расчет которого выполняется регламентной операцией.
//
// Как правило, регламентная операция рассчитывает данные на отчетную дату, непосредственно следующую за этим месяцем.
// Например, операция за Декабрь 2018 рассчитывает данные на отчетную дату 01 января 2019.
// В этом случае ПериодРасчета будет равен 01.12.2018, а ОтчетнаяДата - 01.01.2019.
// В подобных случаях одной отчетной дате соответствует один период отчета и они отличаются ровно на 1 месяц.
//
// Однако, при начале использования подсистемы или при пропуске регламентных операций может потребоваться
// данные на начало отчетного периода записать регламентными операциями,
// рассчитывающими данные за более поздние периоды.
//
// Измерение ПериодРасчета в дополнение к ОтчетнаяДата введено для того, чтобы избежать коллизий,
// в случаях, когда сначала выполнена регламентная операция за более поздний период, сформировавшая данные на отчетную дату,
// а потом выполняется более ранняя.
//
// В таких случаях будет записано несколько наборов данных с одинаковым значением ОтчетнаяДата, но разными значениями ПериодРасчета.
// При этом, если последовательно провести все регламентные операции,
// то однозначное соответствие ОтчетнаяДата и ПериодРасчета восстановится.
// (Исключение: начало использования подсистемы).
// 
// Как следствие, если на одну отчетную дату есть записи с разными периодами регистрации, то корректным следует считать набор
// с наименьшими периодами регистрации.
//
// Параметры:
//  НачалоПериода - Дата - отчетная дата, на которую нужны сведения.
//  Организация	  - СправочникСсылка.Организации - организация.
//  Ограничение   - Дата - период, за который выполняется расчет;
//                  записи с начальными данными должны быть рассчитаны не позднее этой даты.
// 
// Возвращаемое значение:
//  Дата - период в регистре (соответствует значению измерения ПериодРасчета).
//         Может быть пустой датой, если в регистре нет данных на отчетную дату.
//
Функция ПериодРасчета(Знач НачалоПериода, Организация, Знач Ограничение) Экспорт
	
	ПривестиПериодРасчета(НачалоПериода);
	ПривестиПериодРасчета(Ограничение);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетнаяДата",  НачалоПериода);
	Запрос.УстановитьПараметр("ПериодРасчета", Ограничение);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетОтложенногоНалога.ПериодРасчета КАК ПериодРасчета
	|ИЗ
	|	РегистрСведений.РасчетОтложенногоНалога КАК РасчетОтложенногоНалога
	|ГДЕ
	|	РасчетОтложенногоНалога.ОтчетнаяДата = &ОтчетнаяДата
	|	И РасчетОтложенногоНалога.Организация = &Организация
	|	И РасчетОтложенногоНалога.ПериодРасчета <= &ПериодРасчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодРасчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПериодРасчета;
	Иначе
		Возврат '0001-01-01';
	КонецЕсли;
	
КонецФункции

// Настраивает период справки-расчета, который строится по данным регистра.
//
// В таких отчетах выбираются начальные данные и данные периода расчета выбираются на отчетные даты.
// При этом данные на одну и ту же отчетную дату в общем случае могут рассчитываться несколько раз.
// Поэтому каждая из дат уточняется Периодом расчета.
//
// Процедура устаналивает эти даты в компоновщике для параметров 
// - ОтчетнаяДата
// - ПериодРасчета
// - НачальныеДанныеОтчетнаяДата
// - НачальныеДанныеПериодРасчета.
//
// Параметры:
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек, в котором объявлены
//                         параметры, перечисленные выше.
//  НачалоПериода		 - Дата - начало периода, за который строится отчет. Должна быть заполнена.
//  КонецПериода		 - Дата - конец периода, за который строится отчет. Должна быть заполнена.
//  Организация			 - СправочникСсылка.Организация - организация, по данным которой строится отчет.
//
Процедура НастроитьПериодОтчета(КомпоновщикНастроек, НачалоПериода, КонецПериода, Организация) Экспорт
	
	ОтчетнаяДата                = КонецМесяца(КонецПериода) + 1;
	НачальныеДанныеОтчетнаяДата = НачалоМесяца(НачалоПериода);
	
	ПериодРасчета                = ПериодРасчета(ОтчетнаяДата,                Организация, КонецПериода);
	НачальныеДанныеПериодРасчета = ПериодРасчета(НачальныеДанныеОтчетнаяДата, Организация, КонецПериода);
	
	// начальные данные
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"НачальныеДанныеОтчетнаяДата",
		НачальныеДанныеОтчетнаяДата);
		
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"НачальныеДанныеПериодРасчета",
		НачальныеДанныеПериодРасчета);
	
	// период отчета
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ОтчетнаяДата",  ОтчетнаяДата);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериодРасчета", ПериодРасчета);
	
КонецПроцедуры	

#КонецОбласти

#КонецЕсли
