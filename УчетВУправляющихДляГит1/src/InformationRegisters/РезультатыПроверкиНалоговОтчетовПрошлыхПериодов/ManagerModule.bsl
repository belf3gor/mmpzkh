#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает таблицу добавленных пользователем прошлых отчетных периодов,
// за которые ему нужно сдать просроченные отчеты.
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - организация, по которой сдается отчетность
//  Правило       - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - если указано,
//                                  возвращаются отчетные периоды только по данному виду отчета.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Период        - Дата - дата внутри границ отчетного периода
//   * Правило       - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило, для которого добавлен прошлый период
//   * Периодичность - ПеречислениеСсылка.Периодичность - периодичность правила
//   * Требуется     - Булево - если Истина, нужен отчет за данный период по данному правилу.
//                              Значение Ложь возможно только тогда, когда есть более ранние периоды, за которые отчеты нужны.
//
Функция ДобавленныеПериоды(Организация, Правило = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезультатыТеста.ПериодСобытия КАК ПериодСобытия,
	|	РезультатыТеста.Правило КАК Правило,
	|	ЕСТЬNULL(РезультатыТеста.Правило.Периодичность, НЕОПРЕДЕЛЕНО) КАК Периодичность,
	|	РезультатыТеста.ТребуетсяНалогОтчет КАК Требуется
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов КАК РезультатыТеста
	|ГДЕ
	|	РезультатыТеста.Организация = &Организация
	|	И &ОтборПравило
	|	И РезультатыТеста.ПериодСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодСобытия"
	;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ЗначениеЗаполнено(Правило) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПравило", "РезультатыТеста.Правило = &Правило");
		Запрос.УстановитьПараметр("Правило", Правило);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПравило", "ИСТИНА");
	КонецЕсли;
	
	ДобавленныеПериоды = Запрос.Выполнить().Выгрузить();
	ДобавленныеПериоды.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Для Каждого ДобавленныйПериод Из ДобавленныеПериоды Цикл
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
			ДобавленныйПериод.Периодичность, ДобавленныйПериод.ПериодСобытия);
		ДобавленныйПериод.Период = НачалоПериода;
	КонецЦикла;
	
	Возврат ДобавленныеПериоды;
	
КонецФункции

// Возвращает признак того, что задача по уплате налога была создана помощником
// по уплате налогов прошлых периодов
//
// Параметры:
//  Организация		 - СправочникСсылка.Организация - Организация, по которой нужно проверить задачу.
//  Правило			 - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - Правило задачи
//  ПериодСобытия	 - Дата - Период события, к которому относится задача. Нужно передавать начало периода задачи.
// 
// Возвращаемое значение:
//   - Булево - добавлена ли задача помощником.
//
Функция ЗадачаВведенаПомощникомПрошлыхПериодов(Организация, Правило, ПериодСобытия) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Правило", Правило);
	Запрос.УстановитьПараметр("ПериодСобытия", ПериодСобытия);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезультатыТеста.ПериодСобытия КАК Период,
	|	РезультатыТеста.Правило КАК Правило,
	|	ЕСТЬNULL(РезультатыТеста.Правило.Периодичность, НЕОПРЕДЕЛЕНО) КАК Периодичность,
	|	РезультатыТеста.ТребуетсяНалогОтчет КАК Требуется
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов КАК РезультатыТеста
	|ГДЕ
	|	РезультатыТеста.Организация = &Организация
	|	И РезультатыТеста.Правило = &Правило
	|	И РезультатыТеста.ПериодСобытия = &ПериодСобытия";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает информацию о прохождении проверки на отчетность прошлых периодов.
//
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Булево - если Истина, по данной организации проверка пройдена.
//
Функция ПроверкаВыполнена(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РезультатыТеста.Организация
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов КАК РезультатыТеста
	|ГДЕ
	|	РезультатыТеста.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	РезультатыТеста.Организация"
	;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Конструктор для заполнения результата теста.
// Используется как входной параметр для ЗарегистрироватьИзменения();
// 
// Возвращаемое значение:
//   - Структура
//
Функция НовыйРезультатыТеста() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("Правило", Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	Результат.Вставить("ДобавленыПрошлыеПериоды", Ложь);
	Результат.Вставить("ОтчетныеПериоды", НовыйТаблицаПериодов());
	
	Возврат Результат;
	
КонецФункции

// Регистрирует результат проверки отчетности прошлых периодов,
// для добавленных прошлых периодов задает настройки учетной политики,
// систем налогообложения, а также обновляет список задач.
//
// Параметры:
//  РезультатТеста - Структура - См.НовыйРезультатыТеста().
//
Процедура ЗарегистрироватьИзменения(РезультатТеста) Экспорт
	
	Организация = РезультатТеста.Организация;
	Правило     = РезультатТеста.Правило;
	ОтчетныеПериоды = РезультатТеста.ОтчетныеПериоды;
	
	НаборЗаписей = РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация, Истина);
	НаборЗаписей.Отбор.Правило.Установить(Правило, Истина);
	НаборЗаписей.Прочитать();
	
	РезультатыПроверкиДоИзменения = НаборЗаписей.Выгрузить();
	
	ПериодичностьПравила = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "Периодичность");
	
	НовыеРезультатыПроверки = РезультатыПроверкиДоИзменения.СкопироватьКолонки();
	ЗаполнитьНовыеРезультатыПроверки(Организация, ОтчетныеПериоды, НовыеРезультатыПроверки, Правило, ПериодичностьПравила);
	
	// Изменения учетной политики нужно сделать до транзакции,
	// т.к. в транзакции не обновятся значения функциональных опций
	// до завершения транзакции и задачи не будут корректно построены.
	// При этом не важно, если в транзакции произойдет ошибка и следующие изменения откатятся - изменение учетной политики не повредит.
	// Изменения в учетной политике формируем в привилегированном режиме, т.к. тест может проходить и бухгалтер.
	// То, что учетная политика будет сдвинута в область, когда учет не велся, кажется не опасным.
	ИзмененияУчетнойПолитики = ИзмененияУчетнойПолитики(Организация, ОтчетныеПериоды, ПериодичностьПравила);
	УстановитьПривилегированныйРежим(Истина);
	ЗарегистрироватьИзменениеУчетнойПолитики(ИзмененияУчетнойПолитики);
	УстановитьПривилегированныйРежим(Ложь);
	
	НачатьТранзакцию();
	
	НаборЗаписей.Загрузить(НовыеРезультатыПроверки);
	НаборЗаписей.Записать();
	
	Если ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		Обработки.ПодготовкаОтчетностиПрошлыхПериодов.ЗаполнитьОбновитьЗадачи(Организация);
	Иначе
		ИзмененияЗадач = ИзмененияЗадач(Организация, ОтчетныеПериоды, Правило, ПериодичностьПравила, РезультатыПроверкиДоИзменения);
		ЗарегистрироватьИзменениеЗадачДляНулевойОтчетности(ИзмененияЗадач);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьНовыеРезультатыПроверки(Организация, ОтчетныеПериоды, НовыеРезультатыПроверки, Правило, ПериодичностьПравила)
	
	Для каждого СтрокаПериода Из ОтчетныеПериоды Цикл
		
		ПериодСобытия = РегистрыСведений.ЗадачиБухгалтера.ПериодСобытияПоНалогамИСборам(ПериодичностьПравила, СтрокаПериода.Период);
		
		Запись = НовыеРезультатыПроверки.Добавить();
		Запись.Организация = Организация;
		Запись.Правило     = Правило;
		Запись.ПериодСобытия = ПериодСобытия;
		Запись.ТребуетсяНалогОтчет = СтрокаПериода.Требуется;
		
	КонецЦикла;
	
	Если НовыеРезультатыПроверки.Количество() = 0 Тогда
		// Добавим запись с пустым периодом события.
		// Такая запись означает, что тест пройден и по его итогам прошлые задачи добавлять не нужно.
		Запись = НовыеРезультатыПроверки.Добавить();
		Запись.Организация = Организация;
		Запись.Правило     = Правило;
	КонецЕсли;
	
КонецПроцедуры

Функция ИзмененияУчетнойПолитики(Организация, ОтчетныеПериоды, ПериодичностьПравила)
	
	ИзменениеУчетнойПолитики = НовоеОписаниеИзмененийУчетнойПолитики();
	
	Для каждого СтрокаПериода Из ОтчетныеПериоды Цикл
		
		Если Не СтрокаПериода.Требуется Тогда
			Продолжить;
		КонецЕсли;
		
		УчетнаяПолитикаСуществует = УчетнаяПолитика.Существует(Организация, СтрокаПериода.Период);
		
		Если Не УчетнаяПолитикаСуществует Тогда
			ДобавитьИзменениеУчетнойПолитики(ИзменениеУчетнойПолитики, Организация, СтрокаПериода.Период);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзменениеУчетнойПолитики;
	
КонецФункции

Функция ИзмененияЗадач(Организация, ОтчетныеПериоды, Правило, ПериодичностьПравила, РезультатыПроверкиДоИзменения)
	
	ИзменениеЗадач = НоваяТаблицаИзмененияЗадач();
	
	РезультатыПроверки = РезультатыПроверкиДоИзменения.Скопировать();
	
	Для каждого СтрокаПериода Из ОтчетныеПериоды Цикл
		
		ПериодСобытия = РегистрыСведений.ЗадачиБухгалтера.ПериодСобытияПоНалогамИСборам(ПериодичностьПравила, СтрокаПериода.Период);
		
		ПредыдущаяЗапись = НайтиЗапись(РезультатыПроверки, Организация, Правило, ПериодСобытия);
		
		Если ЗначениеЗаполнено(ПредыдущаяЗапись) Тогда
			
			Если СтрокаПериода.Требуется <> ПредыдущаяЗапись.ТребуетсяНалогОтчет Тогда
				ДобавитьИзменениеЗадач(ИзменениеЗадач, Организация, ПериодСобытия, ПериодичностьПравила, СтрокаПериода.Требуется, Ложь);
			КонецЕсли;
			
			// Удаляем предыдущую запись. Очищать ненужные задачи и настройки будем только по оставшимся.
			РезультатыПроверки.Удалить(ПредыдущаяЗапись);
			
		Иначе
			
			ДобавитьИзменениеЗадач(ИзменениеЗадач, Организация, ПериодСобытия, ПериодичностьПравила, СтрокаПериода.Требуется, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Для старых периодов, которые при текущем прохождении оказались не нужны, необходимо удалить задачи.
	// Учетную политику удалять не имеет смысла - сама по себе она не влияет на формирование отчетных задач.
	Для каждого УдаляемыйПериод Из РезультатыПроверки Цикл
		Если ЗначениеЗаполнено(УдаляемыйПериод.ПериодСобытия) Тогда
			ДобавитьИзменениеЗадач(ИзменениеЗадач, Организация, УдаляемыйПериод.ПериодСобытия, ПериодичностьПравила, Ложь, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИзменениеЗадач;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиОбновления

Процедура ОбновитьПериодСобытия() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.Организация КАК Организация,
	|	РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.Правило КАК Правило,
	|	РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.ПериодСобытия КАК ПериодСобытия,
	|	РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.Правило.Периодичность КАК Периодичность
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов КАК РезультатыПроверкиНалоговОтчетовПрошлыхПериодов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Периодичность) Тогда
			ПериодСобытия = РегистрыСведений.ЗадачиБухгалтера.ПериодСобытияПоНалогамИСборам(
				Выборка.Периодичность, Выборка.ПериодСобытия);
			Если ПериодСобытия <> Выборка.ПериодСобытия Тогда
				НаборЗаписейСтарый = РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.СоздатьНаборЗаписей();
				НаборЗаписейСтарый.Отбор.Организация.Установить(Выборка.Организация);
				НаборЗаписейСтарый.Отбор.Правило.Установить(Выборка.Правило);
				НаборЗаписейСтарый.Отбор.ПериодСобытия.Установить(Выборка.ПериодСобытия);
				НаборЗаписейСтарый.Прочитать();
				
				ДанныеРегистра = НаборЗаписейСтарый.Выгрузить();
				ДанныеРегистра.ЗаполнитьЗначения(ПериодСобытия, "ПериодСобытия");
				НаборЗаписейСтарый.Очистить();
				
				НаборЗаписейНовый = РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.СоздатьНаборЗаписей();
				НаборЗаписейНовый.Отбор.Организация.Установить(Выборка.Организация);
				НаборЗаписейНовый.Отбор.Правило.Установить(Выборка.Правило);
				НаборЗаписейНовый.Отбор.ПериодСобытия.Установить(ПериодСобытия);
				НаборЗаписейНовый.Загрузить(ДанныеРегистра);
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейСтарый);
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейНовый);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйТаблицаПериодов()
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	
	ТаблицаПериодов.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаПериодов.Колонки.Добавить("Требуется", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаПериодов;
	
КонецФункции

Процедура ЗарегистрироватьИзменениеУчетнойПолитики(ОписаниеИзменений)
	
	Если НЕ ЗначениеЗаполнено(ОписаниеИзменений.НачалоДействия) Тогда
		// Нечего изменять
		Возврат;
	КонецЕсли;
	
	ДействующаяУчетнаяПолитика =
		НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("НастройкиСистемыНалогообложения", ОписаниеИзменений.Организация);
	
	НастройкиУчета.СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("НастройкиСистемыНалогообложения",
		ОписаниеИзменений.Организация,
		ДействующаяУчетнаяПолитика.Период,
		ОписаниеИзменений.НачалоДействия);
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеЗадачДляНулевойОтчетности(ИзменениеЗадач)
	
	Если ИзменениеЗадач.Количество() = 0 Тогда
		// Нечего изменять
		Возврат;
	КонецЕсли;
	
	ИзменениеЗадач.Сортировать("НачалоПериода");
	
	Организация      = ИзменениеЗадач[0].Организация;
	НачалоОбновления = ИзменениеЗадач[0].НачалоПериода;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьАктуальностьСпискаЗадач(Организация, НачалоОбновления);
	
	РегистрыСведений.ЗадачиБухгалтера.ОбновитьИЗаполнитьРегулярныеЗадачи(Организация, , Ложь);
	
	// Заблокируем до окончания транзакции
	УстановитьБлокировкуНаЗадачиБухгалтера(Организация);
	
	// После обновления задач изменим статусы, если это нужно
	УдалитьИлиПоместитьВАрхивЛишниеЗадачи(ИзменениеЗадач);
	
КонецПроцедуры

Процедура УстановитьАктуальностьСпискаЗадач(Организация, НоваяДатаАктуальности)
	
	МенеджерЗаписи = РегистрыСведений.АктуальностьСпискаЗадачБухгалтера.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация      = Организация;
	МенеджерЗаписи.ДатаАктуальности = НоваяДатаАктуальности;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура УстановитьБлокировкуНаЗадачиБухгалтера(Организация)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗадачиБухгалтера");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура УдалитьИлиПоместитьВАрхивЛишниеЗадачи(ИзменениеЗадач)
	
	// Для всех режимов работы:
	//  - удаляются задачи, которые не попали в периоды отчетности по результатам теста.
	//  - помещаются в архив задачи периода, которые попали в результаты теста между 2 действующими периодами.
	// Например, пользователь выбрал, что ему нужна отчетность за 2016 и 2018 годы.
	// В этом случае все задачи до 2016 года будут удалены, а задачи за 2017 год помещены в архив.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИзменениеЗадач", ИзменениеЗадач);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзменениеЗадач.Организация КАК Организация,
	|	ИзменениеЗадач.НачалоПериода КАК НачалоПериода,
	|	ИзменениеЗадач.КонецПериода КАК КонецПериода,
	|	ИзменениеЗадач.ПоместитьВАрхив КАК ПоместитьВАрхив,
	|	ИзменениеЗадач.Удалить КАК Удалить
	|ПОМЕСТИТЬ ВТ_ИзменениеЗадач
	|ИЗ
	|	&ИзменениеЗадач КАК ИзменениеЗадач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_ИзменениеЗадач.ПоместитьВАрхив КАК ВАрхиве,
	|	ЗадачиБухгалтера.Срок КАК Срок,
	|	ЗадачиБухгалтера.НачалоВыполнения КАК НачалоВыполнения,
	|	ЗадачиБухгалтера.Наименование КАК Наименование,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗадачиБухгалтера.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ЗадачиБухгалтера.ДатаСоздания КАК ДатаСоздания,
	|	ЗадачиБухгалтера.ВАрхиве КАК ИсходныйСтатусВАрхиве,
	|	ВТ_ИзменениеЗадач.Удалить КАК Удалить
	|ИЗ
	|	ВТ_ИзменениеЗадач КАК ВТ_ИзменениеЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО ВТ_ИзменениеЗадач.Организация = ЗадачиБухгалтера.Организация
	|			И (ЗадачиБухгалтера.ПериодСобытия МЕЖДУ ВТ_ИзменениеЗадач.НачалоПериода И ВТ_ИзменениеЗадач.КонецПериода)
	|			И (ВТ_ИзменениеЗадач.Удалить
	|				ИЛИ ВТ_ИзменениеЗадач.ПоместитьВАрхив <> ЗадачиБухгалтера.ВАрхиве)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		Если Выборка.Удалить Тогда
			Запись.Удалить();
		Иначе
			Запись.Прочитать();
			Запись.ВАрхиве = Выборка.ВАрхиве;
			Запись.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИзменениеУчетнойПолитики(ОписаниеИзменений, Организация, Период)
	
	ОписаниеИзменений.Организация = Организация;
	
	Если ЗначениеЗаполнено(ОписаниеИзменений.НачалоДействия) Тогда
		ОписаниеИзменений.НачалоДействия = Мин(Период, ОписаниеИзменений.НачалоДействия);
	Иначе
		ОписаниеИзменений.НачалоДействия = Период;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИзменениеЗадач(ТаблицаИзменений, Организация, Период, Периодичность, ЗадачиТребуются, Удалить)
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
	
	НоваяСтрока = ТаблицаИзменений.Добавить();
	
	НоваяСтрока.Организация     = Организация;
	НоваяСтрока.НачалоПериода   = НачалоПериода;
	НоваяСтрока.КонецПериода    = КонецПериода;
	НоваяСтрока.ПоместитьВАрхив = НЕ ЗадачиТребуются;
	НоваяСтрока.Удалить         = Удалить;
	
КонецПроцедуры

Функция НайтиЗапись(Записи, Организация, Правило, ПериодСобытия)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация",   Организация);
	Отбор.Вставить("Правило",       Правило);
	Отбор.Вставить("ПериодСобытия", ПериодСобытия);
	
	НайденныеСтроки = Записи.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НайденныеСтроки[0];
	
КонецФункции

Функция НоваяТаблицаИзмененияЗадач()
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	
	ТаблицаИзменений.Колонки.Добавить("Организация",     Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаИзменений.Колонки.Добавить("НачалоПериода",   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаИзменений.Колонки.Добавить("КонецПериода",    ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаИзменений.Колонки.Добавить("ПоместитьВАрхив", Новый ОписаниеТипов("Булево"));
	ТаблицаИзменений.Колонки.Добавить("Удалить",         Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаИзменений;
	
КонецФункции

Функция НовоеОписаниеИзмененийУчетнойПолитики()
	
	ОписаниеИзменений = Новый Структура;
	
	ОписаниеИзменений.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ОписаниеИзменений.Вставить("НачалоДействия", '00010101');
	
	Возврат ОписаниеИзменений;
	
КонецФункции

#КонецОбласти

#КонецЕсли