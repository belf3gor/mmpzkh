
////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаСервереБезКонтекста
// Возвращает новый порядок услуги.
Функция ПолучитьНовыйПорядок(НастройкаСбораДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(КВП_ПорядокУслугВКвитанции.Порядок) КАК Порядок
	|ИЗ
	|	РегистрСведений.КВП_ПорядокУслугВКвитанции КАК КВП_ПорядокУслугВКвитанции
	|ГДЕ
	|	КВП_ПорядокУслугВКвитанции.НастройкаСбораДанных = &НастройкаСбораДанных";
	
	Запрос.УстановитьПараметр("НастройкаСбораДанных", НастройкаСбораДанных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НовПорядок = ?(Выборка.Следующий() И Выборка.Порядок <> Null, Выборка.Порядок + 1, 1);
	
	Возврат НовПорядок;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустой() Тогда
		Запись.Порядок = ПолучитьНовыйПорядок(Запись.НастройкаСбораДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Запись.ВидУслуги.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Значение ""Вид услуги"" не заполнено.");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

#КонецОбласти