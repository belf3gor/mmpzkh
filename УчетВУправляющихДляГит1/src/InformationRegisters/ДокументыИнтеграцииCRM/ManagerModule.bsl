#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру состояния настроек интеграции документа.
//
// Параметры:
//  Документ - ДокументСсылка.СчетНаОплатуПокупателю - Документ, для которого нужно получить состояние.
// 
// Возвращаемое значение:
//   - Структура, Неопределено - 
//         * Состояние - ПеречислениеСсылка.СостоянияДокументовИнтеграцииCRM - состояние интеграции.
//         * Идентификатор - Строка (50) - Идентификатор документа.
//         * НастройкаИнтеграции - СправочникСсылка.НастройкиИнтеграцииCRM - Ссылка на настройки интеграции CRM.
//         * ТекстОшибки - Строка - Текст ошибки, присланный CRM.
//
Функция СостояниеИнтеграцииДокумента(Документ) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыИнтеграцииCRM.Состояние КАК Состояние,
	|	ДокументыИнтеграцииCRM.Идентификатор КАК Идентификатор,
	|	ДокументыИнтеграцииCRM.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	ДокументыИнтеграцииCRM.ТекстОшибки КАК ТекстОшибки
	|ИЗ
	|	РегистрСведений.ДокументыИнтеграцииCRM КАК ДокументыИнтеграцииCRM
	|ГДЕ
	|	ДокументыИнтеграцииCRM.Документ = &Документ";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Результат = Новый Структура;
	Результат.Вставить("Состояние", Выборка.Состояние);
	Результат.Вставить("Идентификатор", Выборка.Идентификатор);
	Результат.Вставить("НастройкаИнтеграции", Выборка.НастройкаИнтеграции);
	Результат.Вставить("ТекстОшибки", Выборка.ТекстОшибки);
	
	Возврат Результат;
	
КонецФункции

// Возвращает документ по идентификатору
// 
// Параметры:
//  Идентификатор - Строка (50) - Идентификатор документа из внешней системы.
// 
// Возвращаемое значение:
//   - ДокументСсылка.СчетНаОплатуПокупателю - Документ, соответствующий идентификатору в ИБ.
//
Функция ДокументПоИдентификатору(Идентификатор) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыИнтеграцииCRM.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.ДокументыИнтеграцииCRM КАК ДокументыИнтеграцииCRM
	|ГДЕ
	|	ДокументыИнтеграцииCRM.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Документ;
	КонецЕсли;
	
КонецФункции

// Устанавливает для объекта интеграции состояние: Синхронизировано.
//
// Параметры:
//  Документ            - ДокументСсылка.СчетНаОплатуПокупателю - Документ, который приняли из CRM.
//  НастройкаИнтеграции - СправочникСсылка.НастройкиИнтеграцииCRM - Настройка интеграции, к которой относится объект.
//  Идентификатор       - Строка - Идентификатор объекта, для которого нужно установить состояние.
//
Процедура УстановитьСостояниеДокументСинхронизировано(Документ, НастройкаИнтеграции, Идентификатор) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Документ) ИЛИ НЕ ЗначениеЗаполнено(НастройкаИнтеграции) Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеИнтеграции = НовыйСостояниеИнтеграции();
	СостояниеИнтеграции.НастройкаИнтеграции = НастройкаИнтеграции;
	СостояниеИнтеграции.Идентификатор = Идентификатор;
	СостояниеИнтеграции.Состояние = Перечисления.СостоянияДокументовИнтеграцииCRM.Синхронизировано;
	
	ЗаписатьСостояниеИнтеграцииCRM(Документ, СостояниеИнтеграции);
	
	ЗаписьЖурналаРегистрации(ИнтеграцияCRM.ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация, Документ.Метаданные(), Документ, НСтр("ru = 'Документ синхронизирован с CRM системой'"));
	
КонецПроцедуры

// Устанавливает для объекта интеграции состояние: ошибка передачи.
//
// Параметры:
//  Документ    - ДокументСсылка.СчетНаОплатуПокупателю - Документ, для которого нужно установить состояние.
//  ТекстОшибки - Строка - Текст ошибки передачи в банк. Формируется CRM.
//
Процедура УстановитьСостояниеОшибкаПередачи(Документ, ТекстОшибки) Экспорт
	
	СостояниеИнтеграции = СостояниеИнтеграцииДокумента(Документ);
	
	Если СостояниеИнтеграции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеИнтеграции.Состояние   = Перечисления.СостоянияДокументовИнтеграцииCRM.ОшибкаПриОтправке;
	СостояниеИнтеграции.ТекстОшибки = ТекстОшибки;
	
	ЗаписатьСостояниеИнтеграцииCRM(Документ, СостояниеИнтеграции);
	
	ЗаписьЖурналаРегистрации(ИнтеграцияCRM.ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка, Документ.Метаданные(), Документ, ТекстОшибки);
	
КонецПроцедуры

#Область Отправка

Процедура ДобавитьВДополнительныеСвойстваДанныеДляОтправкиОбъекта(Объект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеИнтеграции = СостояниеИнтеграцииДокумента(Объект.Ссылка);
	
	Если НЕ ЗначениеЗаполнено(СостояниеИнтеграции) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСостояниеИнтеграцииВДополнительныеСвойства(Объект, СостояниеИнтеграции);
	
КонецПроцедуры

Процедура ПроверитьИзмененияИЗарегистрироватьКОтправке(Объект) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("СостояниеИнтеграцииCRM")
		И ЗначениеЗаполнено(Объект.ДополнительныеСвойства.СостояниеИнтеграцииCRM) Тогда
		
		СостояниеИнтеграции = Объект.ДополнительныеСвойства.СостояниеИнтеграцииCRM;
		
		Если Объект.Проведен Тогда
			ПроверитьИзмененияИЗарегистрироватьДокументКОтправке(Объект, СостояниеИнтеграции);
		Иначе
			ОтменитьОтправкуДокумента(Объект, СостояниеИнтеграции);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьКОтправке(Документ) Экспорт
	
	СостояниеИнтеграции = СостояниеИнтеграцииДокумента(Документ);
	
	Если НЕ ЗначениеЗаполнено(СостояниеИнтеграции) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьРегистрациюКОтправке(Документ, СостояниеИнтеграции);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеКОтправкеИОповеститьОбИзмененияхВФоне(ДокументыДляОповещения) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДокументыДляОповещения", ДокументыДляОповещения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка оповещения по измененным документам в CRM.'");
	
	ДлительныеОперации.ВыполнитьВФоне(
		"РегистрыСведений.ДокументыИнтеграцииCRM.ЗаполнитьДвоичныеДанныеИОповеститьОбИзменениях",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
КонецПроцедуры

Функция ДвоичныеДанныеДокументаДляОтправки(Документ, НастройкаИнтеграции, Обработчик) Экспорт
	
	Если Обработчик = ОбработчикДанныхEnterpriseData() Тогда
		Возврат ДвоичныеДанныеДляОтправкиEnterpriseData(Документ, НастройкаИнтеграции);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Загрузка

// Возвращает структуру состояния настроек интеграции по идентификатору.
//
// Параметры:
//  Идентификатор - Строка (50) - Идентификатор документа из внешней системы.
// 
// Возвращаемое значение:
//   - Структура, Неопределено - 
//         * Документ - ДокументСсылка.СчетНаОплатуПокупателю - Документ, соответствующий идентификатору в ИБ.
//         * Состояние - ПеречислениеСсылка.СостоянияДокументовИнтеграцииCRM - состояние интеграции.
//         * НастройкаИнтеграции - СправочникСсылка.НастройкиИнтеграцииCRM - Ссылка на настройки интеграции CRM.
//         * ТекстОшибки - Строка - Текст ошибки, присланный CRM.
//
Функция СостояниеИнтеграцииПоИдентификатору(Идентификатор)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыИнтеграцииCRM.Состояние КАК Состояние,
	|	ДокументыИнтеграцииCRM.Документ КАК Документ,
	|	ДокументыИнтеграцииCRM.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	ДокументыИнтеграцииCRM.ТекстОшибки КАК ТекстОшибки
	|ИЗ
	|	РегистрСведений.ДокументыИнтеграцииCRM КАК ДокументыИнтеграцииCRM
	|ГДЕ
	|	ДокументыИнтеграцииCRM.Идентификатор = &Идентификатор";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Результат = Новый Структура;
	Результат.Вставить("Состояние", Выборка.Состояние);
	Результат.Вставить("Документ", Выборка.Документ);
	Результат.Вставить("НастройкаИнтеграции", Выборка.НастройкаИнтеграции);
	Результат.Вставить("ТекстОшибки", Выборка.ТекстОшибки);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьДанные(УчетнаяСистема, ИдентификаторОбъекта, ПотокДанных, Обработчик, 
	КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	Если НРег(Обработчик) = ОбработчикДанныхEnterpriseData() Тогда
		
		СостояниеИнтеграции = СостояниеИнтеграцииПоИдентификатору(ИдентификаторОбъекта);
		Если СостояниеИнтеграции <> Неопределено
			И СостояниеИнтеграции.Состояние = Перечисления.СостоянияДокументовИнтеграцииCRM.ПодготовленоКОтправке Тогда
			Ошибка = Истина;
			СообщениеОбОшибке = СтрШаблон(НСтр("ru='Для документа с идентификатором %1 зарегистрированы изменения.
				|Сначала следует подтвердить получение изменений в CRM'"), ИдентификаторОбъекта);
		Иначе
			ЗагруженныеОбъекты = ЗагрузитьСообщениеEnterpriseData(ПотокДанных, Ошибка, СообщениеОбОшибке);
			ПровестиЗагруженныйСчетНаОплату(ЗагруженныеОбъекты, Ошибка, СообщениеОбОшибке);
			ЗаписатьИдентификаторЗагруженногоСчетаНаОплату(ЗагруженныеОбъекты, УчетнаяСистема, ИдентификаторОбъекта);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ошибка Тогда
		КодыСостояний = РегистрыСведений.СвойстваЗаданий.КодыСостояний();
		КодВозврата = КодыСостояний.ОшибкаДанных;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьСостояниеИнтеграцииCRM(Документ, СостояниеИнтеграции);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Организация, Дата");
	
	Набор = РегистрыСведений.ДокументыИнтеграцииCRM.СоздатьНаборЗаписей();
	Набор.Отбор.Документ.Установить(Документ);
	Запись             = Набор.Добавить();
	Запись.Документ    = Документ;
	Запись.Организация = РеквизитыДокумента.Организация;
	Запись.Дата        = РеквизитыДокумента.Дата;
	ЗаполнитьЗначенияСвойств(Запись, СостояниеИнтеграции);
	Набор.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьДвоичныеДанныеИОповеститьОбИзменениях(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ДокументыДляОповещения = ПараметрыЗадания.ДокументыДляОповещения;
	Для Каждого ДокументДляОповещения Из ДокументыДляОповещения Цикл
		
		СостояниеИнтеграции = СостояниеИнтеграцииДокумента(ДокументДляОповещения);
		Если СостояниеИнтеграции <> Неопределено
			И СостояниеИнтеграции.Состояние = Перечисления.СостоянияДокументовИнтеграцииCRM.ПодготовленоКОтправке Тогда
			
			Обработчик = ОбработчикДанныхEnterpriseData();
			
			УстановитьОтключениеБезопасногоРежима(Истина);
			УстановитьПривилегированныйРежим(Истина);
			
			ДвоичныеДанныеДокументаДляОтправки = ДвоичныеДанныеДокументаДляОтправки(
				ДокументДляОповещения,
				СостояниеИнтеграции.НастройкаИнтеграции,
				Обработчик);
				
			ИнтеграцияОбъектовОбластейДанных.ДобавитьОбъектКОтправке(
				СостояниеИнтеграции.НастройкаИнтеграции,
				СостояниеИнтеграции.Идентификатор,
				Обработчик,
				ДвоичныеДанныеДокументаДляОтправки);
			
			ИнтеграцияОбъектовОбластейДанных.ОповеститьОбИзмененииОбъекта(
				СостояниеИнтеграции.НастройкаИнтеграции, СостояниеИнтеграции.Идентификатор);
				
			УстановитьПривилегированныйРежим(Ложь);
			УстановитьОтключениеБезопасногоРежима(Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйСостояниеИнтеграции()
	
	СостояниеИнтеграции = Новый Структура;
	СостояниеИнтеграции.Вставить("Идентификатор",       Строка(Новый УникальныйИдентификатор()));
	СостояниеИнтеграции.Вставить("НастройкаИнтеграции", Справочники.НастройкиИнтеграцииCRM.ПустаяСсылка());
	СостояниеИнтеграции.Вставить("Состояние",           Перечисления.СостоянияДокументовИнтеграцииСБанком.ПустаяСсылка());
	СостояниеИнтеграции.Вставить("ТекстОшибки",         "");
	
	Возврат СостояниеИнтеграции;
	
КонецФункции

#Область СлужебныеПроцедурыИФункцииОтправки

Процедура ПроверитьИзмененияИЗарегистрироватьДокументКОтправке(Объект, СостояниеИнтеграции)
	
	ХешОбъектаПослеЗаписи = ХешОбъекта(Объект);
	Если ХешОбъектаПослеЗаписи <> СостояниеИнтеграции.ХешОбъектаДоЗаписи Тогда
		ВыполнитьРегистрациюКОтправке(Объект.Ссылка, СостояниеИнтеграции);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьРегистрациюКОтправке(Документ, СостояниеИнтеграции)
	
	СостояниеИнтеграции.Состояние = Перечисления.СостоянияДокументовИнтеграцииCRM.ПодготовленоКОтправке;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьСостояниеИнтеграцииCRM(Документ, СостояниеИнтеграции);
	ИнтеграцияОбъектовОбластейДанных.ДобавитьОбъектКОтправке(
		СостояниеИнтеграции.НастройкаИнтеграции,
		СостояниеИнтеграции.Идентификатор,
		ОбработчикДанныхEnterpriseData());
		
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
КонецПроцедуры

Процедура ОтменитьОтправкуДокумента(Объект, СостояниеИнтеграции)
	
	СостояниеИнтеграции.Состояние = Неопределено;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьСостояниеИнтеграцииCRM(Объект.Ссылка, СостояниеИнтеграции);
	ИнтеграцияОбъектовОбластейДанных.УдалитьОбъектКОтправке(
		СостояниеИнтеграции.НастройкаИнтеграции,
		СостояниеИнтеграции.Идентификатор);
		
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
КонецПроцедуры

Процедура ДобавитьСостояниеИнтеграцииВДополнительныеСвойства(Объект, СостояниеИнтеграции)
	
	ОбъектПоСсылке = Объект.Ссылка.ПолучитьОбъект();
	ХешОбъекта = ХешОбъекта(ОбъектПоСсылке);
	
	СостояниеИнтеграции.Вставить("ХешОбъектаДоЗаписи", ХешОбъекта);
	
	Объект.ДополнительныеСвойства.Вставить("СостояниеИнтеграцииCRM", СостояниеИнтеграции);
	
КонецПроцедуры

Функция ХешОбъекта(Объект)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписатьXML(ЗаписьXML, Объект, НазначениеТипаXML.Явное);
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.CRC32);
	Хеширование.Добавить(ЗаписьXML.Закрыть());
	Возврат Хеширование.ХешСумма;
	
КонецФункции

Функция ОбработчикДанныхEnterpriseData()
	
	Возврат "enterprise_data";
	
КонецФункции

#Область ВыгрузкаEnterpriseData

Функция ДвоичныеДанныеДляОтправкиEnterpriseData(Документ, НастройкиИнтеграции)
	
	Обработка = Обработки.ВыгрузкаЗагрузкаEnterpriseData.Создать();
	Обработка.ВерсияФормата = ВерсияФорматаEnterpriseData(НастройкиИнтеграции);
	Обработка.СписокДополнениеКВыгрузке.Добавить(Документ);
	Обработка.СписокДополнениеКВыгрузке.Добавить(СтатусыДокумента(Документ));
	
	РезультатВыгрузки = Обработка.ВыгрузитьДанныеВXML();
	Если РезультатВыгрузки.ЕстьОшибки Тогда
		// Запишем в журнал регистрации ошибку, но саму отправку не блокируем,
		// чтобы не тормозить отправку остальных документов.
		ЗаписьЖурналаРегистрации(ИнтеграцияCRM.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, Документ.Метаданные(), Документ, РезультатВыгрузки.ТекстОшибки);
	КонецЕсли;
	ДокументДляВыгрузки = Новый ТекстовыйДокумент;
	ДокументДляВыгрузки.УстановитьТекст(РезультатВыгрузки.ТекстВыгрузки);
	
	Поток = Новый ПотокВПамяти;
	ДокументДляВыгрузки.Записать(Поток, "UTF-8");
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

Функция ВерсияФорматаEnterpriseData(НастройкиИнтеграции)
	
	ВерсияФормата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиИнтеграции, "ВерсияФормата");
	Если ЗначениеЗаполнено(ВерсияФормата) Тогда
		Возврат ВерсияФормата;
	Иначе
		Возврат "1.6";
	КонецЕсли;
	
КонецФункции

Функция СтатусыДокумента(Документ)
	
	НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация"));
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	НаборЗаписей.Прочитать();
	Возврат НаборЗаписей;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаEnterpriseData

Функция ЗагрузитьСообщениеEnterpriseData(ПотокДанных, Ошибка, СообщениеОбОшибке)
	
	РезультатЗагрузки = ИнтеграцияEnterpriseData.ЗагрузитьСообщениеEnterpriseData(ПотокДанных,
		Истина, // ПровестиЗагруженныеДокументы
		ИнтеграцияCRM.ИмяСобытияЖурналаРегистрации());
	
	Ошибка = РезультатЗагрузки.ЕстьОшибки;
	СообщениеОбОшибке = РезультатЗагрузки.ТекстОшибки;
	
	Возврат РезультатЗагрузки.ЗагруженныеОбъекты;
	
КонецФункции

Процедура ПровестиЗагруженныйСчетНаОплату(ЗагруженныеОбъекты, Ошибка, СообщениеОбОшибке)

	СчетНаОплатуПокупателю = Неопределено;
	
	Для Каждого ЗагруженнаяСсылка Из ЗагруженныеОбъекты Цикл
		Если ТипЗнч(ЗагруженнаяСсылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			СчетНаОплатуПокупателю = ЗагруженнаяСсылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(СчетНаОплатуПокупателю) Тогда
		Возврат;
	КонецЕсли;
	
	// При неинтерактивной загрузке через EnterpriseData документы загружаются не проведенными, поэтому проведем документ.
	// В случае ошибки вернем сообщение об ошибке во внешнюю систему.
	СчетНаОплатуПокупателюОбъект = СчетНаОплатуПокупателю.ПолучитьОбъект();
	Попытка
		СчетНаОплатуПокупателюОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Ошибка = Истина;
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьИдентификаторЗагруженногоСчетаНаОплату(ЗагруженныеОбъекты, УчетнаяСистема, ИдентификаторОбъекта)
	
	СчетНаОплатуПокупателю = Неопределено;
	
	Для Каждого ЗагруженнаяСсылка Из ЗагруженныеОбъекты Цикл
		Если ТипЗнч(ЗагруженнаяСсылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			СчетНаОплатуПокупателю = ЗагруженнаяСсылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СчетНаОплатуПокупателю) Тогда
		УстановитьСостояниеДокументСинхронизировано(
			СчетНаОплатуПокупателю, УчетнаяСистема, ИдентификаторОбъекта);
			
		// При загрузке через EnterpriseData может измениться хэш документа и он зарегистрируется на отправку.
		// Поэтому очистим только что загруженный документ из объектов к отправке.
		ИнтеграцияОбъектовОбластейДанных.УдалитьОбъектКОтправке(
			УчетнаяСистема,
			ИдентификаторОбъекта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
