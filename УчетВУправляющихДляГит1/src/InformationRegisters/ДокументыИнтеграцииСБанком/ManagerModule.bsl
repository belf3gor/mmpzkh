#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает состояние документа при включенной интеграции.
//
// Параметры:
//  Документ - ДокументСсылка - Документ, для которого нужно получить состояние.
// 
// Возвращаемое значение:
//   - ПеречислениеСсылка.СостоянияДокументовИнтеграцииСБанком - состояние интеграции. Если состояние не
//                                                               определено, возвращается пустое значение.
//
Функция СостояниеИнтеграции(Документ) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Перечисления.СостоянияДокументовИнтеграцииСБанком.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Документ", Документ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыИнтеграцииСБанком.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.ДокументыИнтеграцииСБанком КАК ДокументыИнтеграцииСБанком
	|ГДЕ
	|	ДокументыИнтеграцииСБанком.Документ = &Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Состояние;
	КонецЕсли;
	
	Возврат Перечисления.СостоянияДокументовИнтеграцииСБанком.ПустаяСсылка();
	
КонецФункции

// Возвращает состояния массива документа при включенной интеграции.
// Если состояние не определено, документ не включается в результат.
//
// Параметры:
//  ДокументыОплаты - Массив - Массив документов, для которых нужно получить состояние.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений, Неопределено - состояния интеграции документов. 
//                                     Если в базе интеграция не включена - возвращает Неопределено.
//        * Документ     - ДокументСсылка - Документ из входного параметра Документы.
//        * Состояние - ПеречислениеСсылка.СостоянияДокументовИнтеграцииСБанком - состояние интеграции.
//        * НастройкаИнтеграции - СправочникСсылка.НастройкиИнтеграцииСБанком - настройка интеграции для документа.
//
Функция СостоянияИнтеграцииДокументов(МассивДокументов) Экспорт
	
	Если НЕ ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Документы", МассивДокументов);
	Запрос.Параметры.Вставить("ДатаНеактуальностиПлатежек", НачалоДня(ТекущаяДатаСеанса()) - СрокНеактуальностиПлатежей());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыИнтеграцииСБанком.Документ КАК Документ,
	|	ТИПЗНАЧЕНИЯ(ДокументыИнтеграцииСБанком.Документ) КАК ТипДокумента,
	|	ДокументыИнтеграцииСБанком.Состояние КАК Состояние,
	|	ДокументыИнтеграцииСБанком.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	ДокументыИнтеграцииСБанком.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_ДокументыИнтеграцииСБанком
	|ИЗ
	|	РегистрСведений.ДокументыИнтеграцииСБанком КАК ДокументыИнтеграцииСБанком
	|ГДЕ
	|	ДокументыИнтеграцииСБанком.Документ В(&Документы)
	|	И ДокументыИнтеграцииСБанком.НастройкаИнтеграции <> ЗНАЧЕНИЕ(Справочник.НастройкиИнтеграцииСБанками.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыИнтеграцииСБанком.Документ КАК Документ,
	|	ДокументыИнтеграцииСБанком.ТипДокумента КАК ТипДокумента,
	|	ДокументыИнтеграцииСБанком.Состояние КАК Состояние,
	|	ДокументыИнтеграцииСБанком.НастройкаИнтеграции КАК НастройкаИнтеграции
	|ИЗ
	|	ВТ_ДокументыИнтеграцииСБанком КАК ДокументыИнтеграцииСБанком
	|ГДЕ
	|	ДокументыИнтеграцииСБанком.ТипДокумента = ТИП(Документ.ПлатежноеПоручение)
	|	И ДокументыИнтеграцииСБанком.Дата >= &ДатаНеактуальностиПлатежек
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыИнтеграцииСБанком.Документ,
	|	ДокументыИнтеграцииСБанком.ТипДокумента,
	|	ДокументыИнтеграцииСБанком.Состояние,
	|	ДокументыИнтеграцииСБанком.НастройкаИнтеграции
	|ИЗ
	|	ВТ_ДокументыИнтеграцииСБанком КАК ДокументыИнтеграцииСБанком
	|ГДЕ
	|	ДокументыИнтеграцииСБанком.ТипДокумента = ТИП(Документ.РегламентированныйОтчет)
	|	И НЕ ВЫРАЗИТЬ(ДокументыИнтеграцииСБанком.Документ КАК Документ.РегламентированныйОтчет).ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Обновляет данные интеграции, формирует двоичные данные выгрузки и регистрирует документ в БТС для отправки в банк.
// Данные отправляются только в том случае, если изменились двоичные данные для выгрузки по сравнению с предыдущей отправкой.
//
// Параметры:
//  Документ - ДокументСсылка.ПлатежноеПоручение, ДокументСсылка.РегламентированныйОтчет - Документ, который требуется отправить в банк.
//
Процедура ОбновитьДанныеИнтеграцииИЗарегистрироватьДокументДляОтправкиВБанк(Документ) Экспорт
	
	ВыполнятьРегистрациюТолькоПриИзменениях = Истина;
	ВыполнитьРегистрациюДокументаКОтправке(Документ, ВыполнятьРегистрациюТолькоПриИзменениях);
	
КонецПроцедуры

// Обновляет данные интеграции регламентированного отчета при изменении статуса.
//
// Параметры:
//  Документ - ДокументСсылка.РегламентированныйОтчет - Документ, который требуется отправить в банк.
//
Процедура ПриИзмененииСтатусаРегламентированногоОтчета(Документ) Экспорт
	
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьБП.Используется1СОтчетность() Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнятьРегистрациюТолькоПриИзменениях = Истина;
	ПерезаписыватьПодготовленныеКОтправке = Ложь; // Изменение статуса не приводит к изменению выгрузки отчета.
	ВыполнитьРегистрациюДокументаКОтправке(Документ, ВыполнятьРегистрациюТолькоПриИзменениях, ПерезаписыватьПодготовленныеКОтправке);
	
КонецПроцедуры

// Обновляет данные интеграции регламентированного отчета.
//
// Параметры:
//  Документ - ДокументСсылка.РегламентированныйОтчет - Документ, который требуется отправить в банк.
//
Процедура ПриЗаписиРегламентированногоОтчета(Документ) Экспорт
	
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьБП.Используется1СОтчетность() Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнятьРегистрациюТолькоПриИзменениях = Истина;
	ВыполнитьРегистрациюДокументаКОтправке(Документ, ВыполнятьРегистрациюТолькоПриИзменениях);
	
КонецПроцедуры

// Обновляет данные интеграции, формирует двоичные данные выгрузки и регистрирует документ в БТС для отправки в банк.
// Данные отправляются всегда, независимо от того, изменились ли двоичные данные для выгрузки по сравнению с прошлой отправкой.
//
// Параметры:
//  Документ - ДокументСсылка.ПлатежноеПоручение, ДокументСсылка.РегламентированныйОтчет - Документ, который требуется отправить в банк.
// 
// Возвращаемое значение:
//   - Структура - Сведения о регистрации документа. См. НовыйРегистрацияДляОтправки()
//
Функция ЗарегистрироватьДокументКОтправке(Документ) Экспорт
	
	ВыполнятьРегистрациюТолькоПриИзменениях = Ложь;
	РезультатРегистрации = ВыполнитьРегистрациюДокументаКОтправке(Документ, ВыполнятьРегистрациюТолькоПриИзменениях);
	Возврат РезультатРегистрации;
	
КонецФункции

// Обновляет данные интеграции, формирует двоичные данные выгрузки и регистрирует документ в БТС для отправки в банк.
// Данные отправляются всегда, независимо от того, изменились ли двоичные данные для выгрузки по сравнению с прошлой отправкой.
//
// Параметры:
//  Документ -ДокументСсылка.РегламентированныйОтчет
//  ДанныеОтчета - Структура      - Структура содержит данные выгрузки регламентированного отчета:
//   * ТекстВыгрузки          - Строка - Текст выгрузки отчета или адрес во временном хранилище,
//   * ИмяФайлаВыгрузки       - Строка - Имя файла выгрузки,
//   * КодировкаФайлаВыгрузки - Строка - Кодировка файла выгрузки,
//   * ТипФайлаВыгрузки       - Строка - Зарезервировано для выгрузки комплекта файлов.
// 
// Возвращаемое значение:
//  Структура - Сведения о регистрации документа. См. НовыйРегистрацияДляОтправки()
//
Функция ЗарегистрироватьДанныеРегламентированногоОтчетаКОтправке(Документ, ДанныеОтчета) Экспорт
	
	ВыполнятьРегистрациюТолькоПриИзменениях = Ложь;
	РезультатРегистрации = ВыполнитьРегистрациюДанныхРегламентированногоОтчетаКОтправке(Документ, ДанныеОтчета);
	Возврат РезультатРегистрации;
	
КонецФункции

Функция ЗарегистрированныеДанныеДляОтправки(Документ, НастройкиИнтеграции) Экспорт
	
	РегистрацияДляОтправки = НовыйРегистрацияДляОтправки();
	СостояниеИнтеграции = СостояниеИнтеграцииСБанкомПоДаннымБазы(Документ);
	Если СостояниеИнтеграции.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ПодготовленоКОтправке Тогда
		РегистрацияДляОтправки.Идентификатор = СостояниеИнтеграции.Идентификатор;
		РегистрацияДляОтправки.ИмяОбработчика = ИмяОбработчикаДляОтправки(Документ);
	Иначе
		ДобавитьОшибкуВРегистрациюДляОтправки(РегистрацияДляОтправки, НСтр("ru = 'Документ не зарегистрирован для отправки'"));
	КонецЕсли;
	
	Возврат РегистрацияДляОтправки;
	
КонецФункции

// Выполняется в фоновом задании, возвращает состояние всех интеграций с банками для баннера в списке платежных поручений.
// Результат (Текст баннера, цвет баннера, картинку и т.д.)
//
// Параметры:
//  ПараметрыЗадания - Структура - Параметры выполнения, никаких параметров не требуется.
//  АдресХранилища	 - Строка - Адрес хранилища, в который будет возвращен результат.
//
Процедура ДанныеБаннераИнтеграцииСБанкомВФоне(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ОписаниеДокументов = ОписаниеДокументов();
	
	ПараметрыОтображения = ПараметрыОтображенияПоУмолчанию();
	
	ДанныеБаннераИнтеграцииСБанком = ДанныеБаннераИнтеграцииСБанкомПоОписанию(ОписаниеДокументов, ПараметрыОтображения);
	
	ПоместитьВоВременноеХранилище(ДанныеБаннераИнтеграцииСБанком, АдресХранилища);
	
КонецПроцедуры

// Выполняется в фоновом задании, возвращает состояние всех интеграций с банками для баннера в списке платежных поручений.
// Результат (Текст баннера, цвет баннера, картинку и т.д.)
//
// Параметры:
//  ПараметрыЗадания - Структура - Параметры выполнения, никаких параметров не требуется.
//  АдресХранилища	 - Строка - Адрес хранилища, в который будет возвращен результат.
//
Процедура ДанныеБаннераИнтеграцииСБанкомСпискаЗадачВФоне(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ОписаниеДокументов = ОписаниеДокументов();
	
	ПараметрыОтображения = ПараметрыОтображенияПоУмолчанию();
	ПараметрыОтображения.ЦветБаннера = ЦветаСтиля.ЦветБаннераСерый;
	
	ДанныеБаннераИнтеграцииСБанком = ДанныеБаннераИнтеграцииСБанкомПоОписанию(ОписаниеДокументов, ПараметрыОтображения);
	
	ПоместитьВоВременноеХранилище(ДанныеБаннераИнтеграцииСБанком, АдресХранилища);
	
КонецПроцедуры

// Возвращает состояние интеграции для баннера в помощниках уплаты налогов и взносов.
// Результат (Текст баннера, цвет баннера, картинку и т.д.)
//
// Параметры:
//  СостоянияИнтеграцииДокументов - ТаблицаЗначений - результат выполнения функции СостоянияИнтеграцииДокументов().
//
// Возвращаемое значение:
//   - Структура - Текст баннера, картинка и т.д.
//
Функция ДанныеБаннераИнтеграцииСБанкомДляПомощников(СостоянияИнтеграцииДокументов) Экспорт
	
	ОписаниеДокументовПоТипам = Новый Соответствие;
	ОписаниеДокументовПоТипам.Вставить("ПлатежноеПоручение",
		ОписаниеДокументовПоСостояниюИнтеграции(СостоянияИнтеграцииДокументов, Тип("ДокументСсылка.ПлатежноеПоручение")));
	ОписаниеДокументовПоТипам.Вставить("РегламентированныйОтчет",
		ОписаниеДокументовПоСостояниюИнтеграции(СостоянияИнтеграцииДокументов, Тип("ДокументСсылка.РегламентированныйОтчет")));
	ДобавитьИтогОписанияДокументов(ОписаниеДокументовПоТипам);
	
	ПараметрыОтображения = ПараметрыОтображенияПоУмолчанию();
	ПараметрыОтображения.ЗапускатьОжиданиеБаннера = Ложь;
	
	Возврат ДанныеБаннераИнтеграцииСБанкомПоОписанию(ОписаниеДокументовПоТипам, ПараметрыОтображения);
	
КонецФункции

// Возвращает данные баннера для нового документа уплаты налогов и взносов.
// Результат (Текст баннера, цвет баннера, картинку и т.д.)
//
// Возвращаемое значение:
//   - Структура - Текст баннера, картинка и т.д.
//
Функция ДанныеБаннераИнтеграцииСБанкомНовыйДокумент() Экспорт
	
	ДанныеБаннера = НовыйДанныеБаннера();
	ДанныеБаннера.ТекстБаннера = НСтр("ru = 'После записи платежное поручение будет передано в банк'");
	ДанныеБаннера.ЦветБаннера = ПараметрыОтображенияПоУмолчанию().ЦветБаннера;
	
	Возврат ДанныеБаннера;
	
КонецФункции

// Возвращает данные баннера для документа налогов и взносов в том случае, если интеграция для счета выключена.
// Результат (Текст баннера, цвет баннера, картинку и т.д.)
//
// Возвращаемое значение:
//   - Структура - Текст баннера, картинка и т.д.
//
Функция ДанныеБаннераИнтеграцииСБанкомПустойБаннер() Экспорт
	
	ДанныеБаннера = НовыйДанныеБаннера();
	Возврат ДанныеБаннера;
	
КонецФункции

// Возвращает текст подсказки состояния в форме платежного поручения.
//
// Параметры:
//  Документ - ДокументСсылка
// 
// Возвращаемое значение:
//   - ФорматированнаяСтрока
//
Функция ТекстПодсказкиИнтеграцииСБанкомВДокументе(Документ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Документ", Документ);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыИнтеграцииСБанком.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	ДокументыИнтеграцииСБанком.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.ДокументыИнтеграцииСБанком КАК ДокументыИнтеграцииСБанком
	|ГДЕ
	|	ДокументыИнтеграцииСБанком.Документ = &Документ
	|	И ДокументыИнтеграцииСБанком.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовИнтеграцииСБанком.ОтправленоВБанк)
	|	И НЕ ДокументыИнтеграцииСБанком.НастройкаИнтеграции = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовИнтеграцииСБанком.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ОписаниеПлатежныхПоручений = НовыйОписаниеДокументов();
		ОписаниеПлатежныхПоручений.Отправленные = 1;
		
		ОписаниеДокументовПоТипам = Новый Соответствие;
		ОписаниеДокументовПоТипам.Вставить("ПлатежноеПоручение", ОписаниеПлатежныхПоручений);
		ОписаниеДокументовПоТипам.Вставить("РегламентированныйОтчет", НовыйОписаниеДокументов());
		ДобавитьИтогОписанияДокументов(ОписаниеДокументовПоТипам);
		
		Возврат ТекстЕстьДокументыДляПодписи(ОписаниеДокументовПоТипам);
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Возвращает двоичные даннные выгрузки для объекта интеграции с банками.
//
// Параметры:
//  НастройкаИнтеграции	 - СправочникСсылка.НастройкиИнтеграцииСБанками - Настройка интеграции, для которой нужно возвратить двоичные данные.
//  Идентификатор		 - Строка - Идентификатор объекта, для которого нужно возвратить двоичные данные.
// 
// Возвращаемое значение:
//   - Структура
//              * Данные - двоичные данные выгрузки.
//              * Обработчик - имя обработчика данных для передачи в банк.
//
Функция ДанныеОбъектаПоИдентификатору(НастройкаИнтеграции, Идентификатор, Обработчик) Экспорт
	
	Документ = ДокументПоИдентификатору(НастройкаИнтеграции, Идентификатор);
	
	Если ЗначениеЗаполнено(Документ)
		И НРег(Обработчик) = ОбработчикДанныхОтправкиПлатежныхПоручений() Тогда
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			Возврат Обработки.КлиентБанк.ВыгрузитьДокумент(Документ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Устанавливает для объекта интеграции состояние: передан в банк.
//
// Параметры:
//  НастройкаИнтеграции	 - СправочникСсылка.НастройкиИнтеграцииСБанками - Настройка интеграции, к которой относиться объект.
//  Идентификатор		 - Строка - Идентификатор объекта, для которого нужно установить состояние.
//
Процедура УстановитьСостояниеДокументПереданВБанк(НастройкаИнтеграции, Идентификатор) Экспорт
	
	Документ = ДокументПоИдентификатору(НастройкаИнтеграции, Идентификатор);
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеИнтеграцииСБанком = СостояниеИнтеграцииСБанкомПоДаннымБазы(Документ);
	
	Если НЕ ЗначениеЗаполнено(СостояниеИнтеграцииСБанком)
		ИЛИ СостояниеИнтеграцииСБанком.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ОбменЗавершен Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеИнтеграцииСБанком.Состояние   = Перечисления.СостоянияДокументовИнтеграцииСБанком.ОтправленоВБанк;
	СостояниеИнтеграцииСБанком.ТекстОшибки = "";
	
	ЗаписатьДокументИнтеграцииСБанком(Документ, СостояниеИнтеграцииСБанком);
	
	РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(Документ, Перечисления.СостоянияБанковскихДокументов.НаПодписи);
	
	ЗаписьЖурналаРегистрации(ИнтеграцияСБанкамиКлиентСервер.ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация, Документ.Метаданные(), Документ, НСтр("ru = 'Документ передан в банк'"));
	
КонецПроцедуры

// Устанавливает для объекта интеграции состояние: ошибка передачи в банк.
//
// Параметры:
//  НастройкаИнтеграции	 - СправочникСсылка.НастройкиИнтеграцииСБанками - Настройка интеграции, к которой относиться объект.
//  Идентификатор		 - Строка - Идентификатор объекта, для которого нужно установить состояние.
//  ТекстОшибки			 - Строка - Текст ошибки передачи в банк. Формируется банком.
//
Процедура УстановитьСостояниеОшибкаПередачиВБанк(НастройкаИнтеграции, Идентификатор, ТекстОшибки) Экспорт
	
	Документ = ДокументПоИдентификатору(НастройкаИнтеграции, Идентификатор);
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеИнтеграцииСБанком = СостояниеИнтеграцииСБанкомПоДаннымБазы(Документ);
	
	Если НЕ ЗначениеЗаполнено(СостояниеИнтеграцииСБанком)
		ИЛИ СостояниеИнтеграцииСБанком.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ОбменЗавершен Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеИнтеграцииСБанком.Состояние   = Перечисления.СостоянияДокументовИнтеграцииСБанком.ОшибкаПриОтправке;
	СостояниеИнтеграцииСБанком.ТекстОшибки = ТекстОшибки;
	
	ЗаписатьДокументИнтеграцииСБанком(Документ, СостояниеИнтеграцииСБанком);
	
	ЗаписьЖурналаРегистрации(ИнтеграцияСБанкамиКлиентСервер.ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка, Документ.Метаданные(), Документ, ТекстОшибки);
	
КонецПроцедуры

// Устанавливает для объекта интеграции статус "Обмен завершен".
//
// Параметры:
//  Документ - ДокументСсылка - документ, для которого нужно установить статус "ОбменЗавершен".
//
Процедура УстановитьСостояниеОбменЗавершен(Документ) Экспорт
	
	СостояниеИнтеграцииСБанком = СостояниеИнтеграцииСБанкомПоДаннымБазы(Документ);
	
	Если НЕ ЗначениеЗаполнено(СостояниеИнтеграцииСБанком)
		ИЛИ СостояниеИнтеграцииСБанком.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ОбменЗавершен Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеИнтеграцииСБанком.Состояние   = Перечисления.СостоянияДокументовИнтеграцииСБанком.ОбменЗавершен;
	СостояниеИнтеграцииСБанком.ТекстОшибки = "";
	
	ЗаписатьДокументИнтеграцииСБанком(Документ, СостояниеИнтеграцииСБанком);
	
КонецПроцедуры

// Запускает фоновую отправку сообщений об изменненых документах в банк.
//
// Параметры:
//  Документы	 - Массив - Массив документов, для которых нужно отправить сообщение об изменении
// 
// Возвращаемое значение:
//   - Структура - Описание длительной операции.
//
Функция ОтправитьОповещениеОбИзмененииПоДокументамВФоне(Документы) Экспорт
	
	Если НЕ ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Документы", Документы);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка оповещения по измененным документам в банк.'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"РегистрыСведений.ДокументыИнтеграцииСБанком.ОтправитьОповещениеОбИзмененииПоДокументам",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
КонецФункции

// Удаляет из таблицы платежей, которые выводятся на  документы, которые подготовлены к отправке в банк, но еще не отправлены.
//
// Параметры:
//  ТаблицаПлатежей					 - ТаблицаЗначений - Таблица со списком платежей.
//                                     См. ПомощникиПоУплатеНалоговИВзносов.ОтобразитьПлатежи.
//  СостоянияИнтеграцииДокументов	 - ТаблицаЗначений - Состояния интеграции с банком для документов помощника.
//                                     См. РегистрыСведений.ДокументыИнтеграцииСБанком.СостоянияИнтеграцииДокументов.
//
Процедура УдалитьИзТаблицыПлатежейДокументыКОтправке(ТаблицаПлатежей, СостоянияИнтеграцииДокументов) Экспорт
	
	Для Каждого СостояниеДокумента Из СостоянияИнтеграцииДокументов Цикл
		Если СостояниеДокумента.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ПодготовленоКОтправке Тогда
			СтрокиКУдалению = ТаблицаПлатежей.НайтиСтроки(Новый Структура("Ссылка", СостояниеДокумента.Документ));
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаПлатежей.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НастройкаИнтеграцииДляОтправкиДокумента(Документ)
	
	ТипДокумента = ТипЗнч(Документ);
	
	Если ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		НастройкаИнтеграции = НастройкаИнтеграцииДляОтправкиПлатежногоПоручения(Документ);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		НастройкаИнтеграции = НастройкаИнтеграцииДляОтправкиРегламентированногоОтчета(Документ);
	Иначе
		НастройкаИнтеграции = Неопределено;
	КонецЕсли;
	
	Возврат НастройкаИнтеграции;
	
КонецФункции

Функция НастройкаИнтеграцииДляОтправкиПлатежногоПоручения(Документ)
	
	// Платежное поручение выгружается в банк только, если выполняются условия:
	//  - Заполнен счет организации и для него есть настройка интеграции
	//  - Счет организации рублевый
	//  - Документ проведен
	//  - Документ не старше 10 дней
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Дата, Проведен, СчетОрганизации, СчетОрганизации.Валютный");
	Если НЕ ЗначениеЗаполнено(РеквизитыДокумента.СчетОрганизации)
		ИЛИ РеквизитыДокумента.СчетОрганизацииВалютный
		ИЛИ НЕ РеквизитыДокумента.Проведен
		ИЛИ НачалоДня(РеквизитыДокумента.Дата) < (НачалоДня(ТекущаяДатаСеанса()) - СрокНеактуальностиПлатежей()) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Справочники.НастройкиИнтеграцииСБанками.НастройкаИнтеграцииБанковскогоСчета(
		РеквизитыДокумента.СчетОрганизации);
	
КонецФункции

Функция НастройкаИнтеграцииДляОтправкиРегламентированногоОтчета(Документ)
	
	Если РегламентированнаяОтчетностьБП.Используется1СОтчетность() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ПометкаУдаления, Организация");
	Если РеквизитыДокумента.ПометкаУдаления Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СостояниеДокумента = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(Документ);
	Если СостояниеДокумента.ВРаботе Или СостояниеДокумента.Сдано Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Справочники.НастройкиИнтеграцииСБанками.НастройкаИнтеграцииРегламентированнойОтчетности(РеквизитыДокумента.Организация);
	
КонецФункции

Функция ВыполнитьРегистрациюДокументаКОтправке(Документ, ВыполнятьРегистрациюТолькоПриИзменениях = Ложь, ПерезаписыватьПодготовленныеКОтправке = Истина)
	
	РегистрацияДляОтправки = НовыйРегистрацияДляОтправки();
	
	Если Не Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияВИнформационнойБазеВключена() Тогда
		ДобавитьОшибкуВРегистрациюДляОтправки(РегистрацияДляОтправки, НСтр("ru = 'В информационной базе отключена интеграция.'"));
		Возврат РегистрацияДляОтправки;
	КонецЕсли;
	
	НастройкаИнтеграции = НастройкаИнтеграцииДляОтправкиДокумента(Документ);
	
	СостояниеИнтеграцииСБанком = СостояниеИнтеграцииСБанкомПоДаннымБазы(Документ);
	
	ПроверитьВозможностьОтправки(НастройкаИнтеграции, СостояниеИнтеграцииСБанком, РегистрацияДляОтправки, ПерезаписыватьПодготовленныеКОтправке);
	
	Если РегистрацияДляОтправки.Ошибка Тогда
		Возврат РегистрацияДляОтправки;
	КонецЕсли;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВыгрузки = ВыгрузитьДокумент(Документ);
	ЗаписатьСостояниеИнтеграции(Документ, СтруктураВыгрузки, СостояниеИнтеграцииСБанком, НастройкаИнтеграции, ВыполнятьРегистрациюТолькоПриИзменениях);
	ЗаполнитьРегистрациюДляОтправкиПоВыгрузке(РегистрацияДляОтправки, СтруктураВыгрузки, СостояниеИнтеграцииСБанком);
	
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Возврат РегистрацияДляОтправки;
	
КонецФункции

Функция ВыполнитьРегистрациюДанныхРегламентированногоОтчетаКОтправке(РегламентированныйОтчет, ДанныеОтчета)
	
	РегистрацияДляОтправки = НовыйРегистрацияДляОтправки();
	
	ОрганизацияРегламентированногоОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегламентированныйОтчет, "Организация");
	
	НастройкиИнтеграции = Справочники.НастройкиИнтеграцииСБанками.НастройкиИнтеграцииСБанкомДляОбменаРегламентированнойОтчетностью(
		ОрганизацияРегламентированногоОтчета);
	
	Если Не ЗначениеЗаполнено(НастройкиИнтеграции) Тогда
		ДобавитьОшибкуВРегистрациюДляОтправки(РегистрацияДляОтправки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для организации %1 отключена интеграция с банком.'"), ОрганизацияРегламентированногоОтчета));
		Возврат РегистрацияДляОтправки;
	ИначеЕсли НастройкиИнтеграции.Количество() > 1 Тогда
		ДобавитьОшибкуВРегистрациюДляОтправки(РегистрацияДляОтправки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для организации %1 настроена интеграция с несколькими банками.'"), ОрганизацияРегламентированногоОтчета));
		Возврат РегистрацияДляОтправки;
	КонецЕсли;
	
	НастройкаИнтеграции = НастройкиИнтеграции[0];
	
	СостояниеИнтеграцииСБанком = СостояниеИнтеграцииСБанкомПоДаннымБазы(РегламентированныйОтчет);
	
	ПерезаписыватьПодготовленныеКОтправке = Истина;
	ПроверитьВозможностьОтправки(НастройкаИнтеграции, СостояниеИнтеграцииСБанком, РегистрацияДляОтправки, ПерезаписыватьПодготовленныеКОтправке);
	
	Если РегистрацияДляОтправки.Ошибка Тогда
		Возврат РегистрацияДляОтправки;
	КонецЕсли;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВыгрузки = ВыгрузитьДанныеРегламентированногоОтчета(ДанныеОтчета);
	
	ВыполнятьРегистрациюТолькоПриИзменениях = Ложь;
	ЗаписатьСостояниеИнтеграции(РегламентированныйОтчет, СтруктураВыгрузки, СостояниеИнтеграцииСБанком, НастройкаИнтеграции, ВыполнятьРегистрациюТолькоПриИзменениях);
	ЗаполнитьРегистрациюДляОтправкиПоВыгрузке(РегистрацияДляОтправки, СтруктураВыгрузки, СостояниеИнтеграцииСБанком);
	
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Возврат РегистрацияДляОтправки;
	
КонецФункции

Функция НовыйРегистрацияДляОтправки()
	
	РегистрацияДляОтправки = Новый Структура();
	РегистрацияДляОтправки.Вставить("Идентификатор", "");
	РегистрацияДляОтправки.Вставить("ИмяОбработчика", "");
	РегистрацияДляОтправки.Вставить("Ошибка", Ложь);
	РегистрацияДляОтправки.Вставить("СообщениеОбОшибке", "");
	Возврат РегистрацияДляОтправки;
	
КонецФункции

Процедура ПроверитьВозможностьОтправки(НастройкаИнтеграции, СостояниеИнтеграцииСБанком, РегистрацияДляОтправки, ПерезаписыватьПодготовленныеКОтправке)
	
	Если НЕ ЗначениеЗаполнено(НастройкаИнтеграции)
		И НЕ ЗначениеЗаполнено(СостояниеИнтеграцииСБанком) Тогда
		ДобавитьОшибкуВРегистрациюДляОтправки(РегистрацияДляОтправки, НСтр("ru = 'Документ не может быть отправлен.'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеИнтеграцииСБанком)
		И СостояниеИнтеграцииСБанком.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ОбменЗавершен Тогда
		ДобавитьОшибкуВРегистрациюДляОтправки(РегистрацияДляОтправки, НСтр("ru = 'Обмен по данному документу завершен.'"));
		Возврат;
	КонецЕсли;
	
	Если Не ПерезаписыватьПодготовленныеКОтправке
		И ЗначениеЗаполнено(СостояниеИнтеграцииСБанком)
		И СостояниеИнтеграцииСБанком.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ПодготовленоКОтправке Тогда
		ДобавитьОшибкуВРегистрациюДляОтправки(РегистрацияДляОтправки, НСтр("ru = 'Документ уже подготовлен к отправке.'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОшибкуВРегистрациюДляОтправки(РегистрацияДляОтправки, СообщениеОбОшибке)
	
	РегистрацияДляОтправки.Ошибка = Истина;
	РегистрацияДляОтправки.СообщениеОбОшибке = СообщениеОбОшибке;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрациюДляОтправкиПоВыгрузке(РегистрацияДляОтправки, СтруктураВыгрузки, СостояниеИнтеграцииСБанком)
	
	Если СтруктураВыгрузки.Ошибка Тогда
		ДобавитьОшибкуВРегистрациюДляОтправки(РегистрацияДляОтправки, СтруктураВыгрузки.СообщениеОбОшибке);
	Иначе
		РегистрацияДляОтправки.Идентификатор = СостояниеИнтеграцииСБанком.Идентификатор;
		РегистрацияДляОтправки.ИмяОбработчика = СтруктураВыгрузки.ИмяОбработчика;
	КонецЕсли;
	
КонецПроцедуры

Функция СостояниеИнтеграцииСБанкомПоДаннымБазы(Документ)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Документ", Документ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыИнтеграцииСБанком.Состояние КАК Состояние,
	|	ДокументыИнтеграцииСБанком.Идентификатор КАК Идентификатор,
	|	ДокументыИнтеграцииСБанком.ХешСумма КАК ХешСумма,
	|	ДокументыИнтеграцииСБанком.НастройкаИнтеграции КАК НастройкаИнтеграции,
	|	ДокументыИнтеграцииСБанком.ТекстОшибки КАК ТекстОшибки
	|ИЗ
	|	РегистрСведений.ДокументыИнтеграцииСБанком КАК ДокументыИнтеграцииСБанком
	|ГДЕ
	|	ДокументыИнтеграцииСБанком.Документ = &Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СостояниеИнтеграцииСБанком = НовыйСостояниеИнтеграцииСБанком();
		ЗаполнитьЗначенияСвойств(СостояниеИнтеграцииСБанком, Выборка);
		Возврат СостояниеИнтеграцииСБанком;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СостояниеИнтеграцииСБанкомПоУмолчанию(НастройкаИнтеграции)
	
	СостояниеИнтеграцииСБанком = НовыйСостояниеИнтеграцииСБанком();
	СостояниеИнтеграцииСБанком.Идентификатор = Строка(Новый УникальныйИдентификатор());
	СостояниеИнтеграцииСБанком.НастройкаИнтеграции = НастройкаИнтеграции;
	Возврат СостояниеИнтеграцииСБанком;
	
КонецФункции

Функция НовыйСостояниеИнтеграцииСБанком()
	
	СостояниеИнтеграцииСБанком = Новый Структура();
	СостояниеИнтеграцииСБанком.Вставить("Состояние",     Перечисления.СостоянияДокументовИнтеграцииСБанком.ПустаяСсылка());
	СостояниеИнтеграцииСБанком.Вставить("Идентификатор", "");
	СостояниеИнтеграцииСБанком.Вставить("ХешСумма",      0);
	СостояниеИнтеграцииСБанком.Вставить("НастройкаИнтеграции", Справочники.НастройкиИнтеграцииСБанками.ПустаяСсылка());
	СостояниеИнтеграцииСБанком.Вставить("ТекстОшибки",   "");
	Возврат СостояниеИнтеграцииСБанком;
	
КонецФункции

Процедура ЗаписатьСостояниеИнтеграции(Документ, СтруктураВыгрузки, СостояниеИнтеграцииСБанком, НастройкаИнтеграции, ВыполнятьРегистрациюТолькоПриИзменениях)
	
	Если НЕ ЗначениеЗаполнено(СостояниеИнтеграцииСБанком) Тогда
		СостояниеИнтеграцииСБанком = СостояниеИнтеграцииСБанкомПоУмолчанию(НастройкаИнтеграции);
	КонецЕсли;
	
	Если СостояниеИнтеграцииСБанком.НастройкаИнтеграции <> НастройкаИнтеграции Тогда
		ОбновитьНастройкуИнтеграции(СостояниеИнтеграцииСБанком, НастройкаИнтеграции);
	КонецЕсли;
	
	ЕстьИзменения = ОбновитьДанныеДокументаПоДвоичнымДанным(СостояниеИнтеграцииСБанком, СтруктураВыгрузки.ДвоичныеДанные, ВыполнятьРегистрациюТолькоПриИзменениях);
	
	// Записывается состояние интеграции в любом случае, даже если оно не изменилось.
	// Это нужно для обновления организации в случае, если есть запись в состоянии.
	ЗаписатьДокументИнтеграцииСБанком(Документ, СостояниеИнтеграцииСБанком);
	
	Если ЕстьИзменения
		И ЗначениеЗаполнено(СостояниеИнтеграцииСБанком.НастройкаИнтеграции) Тогда
		
		ЗарегистрироватьДокументДляОтправкиВБанк(СостояниеИнтеграцииСБанком, СтруктураВыгрузки.ДвоичныеДанные, СтруктураВыгрузки.ИмяОбработчика);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьДокумент(Документ)
	
	СтруктураВыгрузки = НоваяСтруктураВыгрузки();
	
	ТипДокумента = ТипЗнч(Документ);
	
	Если ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		СтруктураВыгрузки.ДвоичныеДанные = Обработки.КлиентБанк.ВыгрузитьДокумент(Документ);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Ошибки = Неопределено;
		СтруктураВыгрузки.ДвоичныеДанные = РегламентированнаяОтчетностьБП.ДвоичныеДанныеРегламентированногоОтчета(Документ, Ошибки);
		Если ЗначениеЗаполнено(Ошибки) Тогда
			СтруктураВыгрузки.Ошибка = Истина;
			СтруктураВыгрузки.СообщениеОбОшибке = СтрСоединить(Ошибки, Символы.ПС);
		КонецЕсли;
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Выгрузка объекта типа ""%1"" в банк не поддерживается'"), ТипДокумента);
	КонецЕсли;
	
	СтруктураВыгрузки.ИмяОбработчика = ИмяОбработчикаДляОтправки(Документ);
	
	Возврат СтруктураВыгрузки;
	
КонецФункции

Функция ВыгрузитьДанныеРегламентированногоОтчета(ДанныеОтчета)
	
	СтруктураВыгрузки = НоваяСтруктураВыгрузки();
	
	Ошибки = Неопределено;
	СтруктураВыгрузки.ДвоичныеДанные = РегламентированнаяОтчетностьБП.ДвоичныеДанныеВыгрузкиРегламентированногоОтчета(ДанныеОтчета, Ошибки);
	СтруктураВыгрузки.ИмяОбработчика = ОбработчикДанныхОтправкиРегламентированныхОтчетов();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		СтруктураВыгрузки.Ошибка = Истина;
		СтруктураВыгрузки.СообщениеОбОшибке = СтрСоединить(Ошибки, Символы.ПС);
	КонецЕсли;
	
	Возврат СтруктураВыгрузки;
	
КонецФункции

Функция ИмяОбработчикаДляОтправки(Документ)
	
	ТипДокумента = ТипЗнч(Документ);
	Если ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Возврат ОбработчикДанныхОтправкиПлатежныхПоручений();
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат ОбработчикДанныхОтправкиРегламентированныхОтчетов();
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Выгрузка объекта типа ""%1"" в банк не поддерживается'"), ТипДокумента);
	КонецЕсли;
	
КонецФункции

Функция НоваяСтруктураВыгрузки()
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("ДвоичныеДанные", Неопределено);
	СтруктураВыгрузки.Вставить("ИмяОбработчика", "");
	СтруктураВыгрузки.Вставить("Ошибка", Ложь);
	СтруктураВыгрузки.Вставить("СообщениеОбОшибке", "");
	
	Возврат СтруктураВыгрузки;
	
КонецФункции

Процедура ОбновитьНастройкуИнтеграции(СостояниеИнтеграцииСБанком, НастройкаИнтеграции)
	
	// Изменилась настройка интеграции - изменился расчетный счет в документе так, 
	// что документ стал относиться к другому банку.
	// С новым банком интеграция может быть не настроена. В этом случае удалять запись не нужно, 
	// что бы не потерять идентификатор, т.к. пользователь может захотеть вернуть расчетный счет обратно.
	
	Если ЗначениеЗаполнено(СостояниеИнтеграцииСБанком.НастройкаИнтеграции) Тогда
		ИнтеграцияОбъектовОбластейДанных.УдалитьОбъектКОтправке(СостояниеИнтеграцииСБанком.НастройкаИнтеграции,
			СостояниеИнтеграцииСБанком.Идентификатор, ОбработчикДанныхОтправкиПлатежныхПоручений());
	КонецЕсли;
	
	СостояниеИнтеграцииСБанком.НастройкаИнтеграции = НастройкаИнтеграции;
	СостояниеИнтеграцииСБанком.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ПустаяСсылка();
	СостояниеИнтеграцииСБанком.ХешСумма = 0; // Сбросим хэш, что бы документ гарантированно выгрузился по новой настройке интеграции.
	
КонецПроцедуры

Функция ОбновитьДанныеДокументаПоДвоичнымДанным(СостояниеИнтеграцииСБанком, ДвоичныеДанныеДокумента, ВыполнятьРегистрациюТолькоПриИзменениях)
	
	Если ДвоичныеДанныеДокумента = Неопределено Тогда
		ХешСумма = 0;
	Иначе
		ХешСумма = ХешСумма(ДвоичныеДанныеДокумента);
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	Если Не ВыполнятьРегистрациюТолькоПриИзменениях
		Или СостояниеИнтеграцииСБанком.ХешСумма <> ХешСумма
		Или (ХешСумма <> 0 
			И СостояниеИнтеграцииСБанком.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ОшибкаПриОтправке) Тогда
		
		ЕстьИзменения = Истина;
		
		СостояниеИнтеграцииСБанком.ХешСумма  = ХешСумма;
		СостояниеИнтеграцииСБанком.ТекстОшибки = "";
		
		Если ХешСумма = 0 Тогда
			СостояниеИнтеграцииСБанком.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ПустаяСсылка();
		Иначе
			СостояниеИнтеграцииСБанком.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ПодготовленоКОтправке;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

Процедура ЗаписатьДокументИнтеграцииСБанком(Документ, СостояниеИнтеграции);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Организация, Дата");
	
	Набор = РегистрыСведений.ДокументыИнтеграцииСБанком.СоздатьНаборЗаписей();
	Набор.Отбор.Документ.Установить(Документ);
	Запись = Набор.Добавить();
	Запись.Документ    = Документ;
	Запись.Организация = РеквизитыДокумента.Организация;
	Запись.Дата        = РеквизитыДокумента.Дата;
	ЗаполнитьЗначенияСвойств(Запись, СостояниеИнтеграции);
	Набор.Записать();
	
КонецПроцедуры

Процедура ЗарегистрироватьДокументДляОтправкиВБанк(СостояниеИнтеграцииСБанком, ДвоичныеДанныеДокумента, ИмяОбработчика)
	
	Если СостояниеИнтеграцииСБанком.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ПодготовленоКОтправке Тогда
		
		ИнтеграцияОбъектовОбластейДанных.ДобавитьОбъектКОтправке(
			СостояниеИнтеграцииСБанком.НастройкаИнтеграции,
			СостояниеИнтеграцииСБанком.Идентификатор,
			ИмяОбработчика,
			ДвоичныеДанныеДокумента);
		
	Иначе
		
		// Данных для выгрузки сейчас нет - поэтому нужно удалить документ из очереди отправки.
		ИнтеграцияОбъектовОбластейДанных.УдалитьОбъектКОтправке(
			СостояниеИнтеграцииСБанком.НастройкаИнтеграции,
			СостояниеИнтеграцииСБанком.Идентификатор,
			ИмяОбработчика);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ХешСумма(ДвоичныеДанныеДокумента)
	
	Хеш = Новый ХешированиеДанных(ХешФункция.CRC32);
	Хеш.Добавить(ДвоичныеДанныеДокумента);
	Возврат Хеш.ХешСумма;
	
КонецФункции

Функция ДокументПоИдентификатору(НастройкаИнтеграции, Идентификатор) Экспорт
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Идентификатор", Идентификатор);
	Запрос.Параметры.Вставить("НастройкаИнтеграции", НастройкаИнтеграции);
	
	// Выполняется рег.заданием в привилегированном режиме.
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыИнтеграцииСБанком.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.ДокументыИнтеграцииСБанком КАК ДокументыИнтеграцииСБанком
	|ГДЕ
	|	ДокументыИнтеграцииСБанком.Идентификатор = &Идентификатор
	|	И ДокументыИнтеграцииСБанком.НастройкаИнтеграции = &НастройкаИнтеграции";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Документ;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОписаниеДокументов()
	
	СостоянияДляОписаний = Новый Массив;
	СостоянияДляОписаний.Добавить(Перечисления.СостоянияДокументовИнтеграцииСБанком.ПодготовленоКОтправке);
	СостоянияДляОписаний.Добавить(Перечисления.СостоянияДокументовИнтеграцииСБанком.ОтправленоВБанк);
	СостоянияДляОписаний.Добавить(Перечисления.СостоянияДокументовИнтеграцииСБанком.ОшибкаПриОтправке);
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ДатаНеактуальностиПлатежек", НачалоДня(ТекущаяДатаСеанса()) - СрокНеактуальностиПлатежей());
	Запрос.Параметры.Вставить("Состояния", СостоянияДляОписаний);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыИнтеграцииСБанком.Документ КАК Документ,
	|	ТИПЗНАЧЕНИЯ(ДокументыИнтеграцииСБанком.Документ) КАК ТипДокумента,
	|	ДокументыИнтеграцииСБанком.Состояние КАК Состояние,
	|	ДокументыИнтеграцииСБанком.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_ДокументыИнтеграцииСБанком
	|ИЗ
	|	РегистрСведений.ДокументыИнтеграцииСБанком КАК ДокументыИнтеграцииСБанком
	|ГДЕ
	|	ДокументыИнтеграцииСБанком.Состояние В(&Состояния)
	|	И ДокументыИнтеграцииСБанком.НастройкаИнтеграции <> ЗНАЧЕНИЕ(Справочник.НастройкиИнтеграцииСБанками.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДокументыИнтеграцииСБанком.Документ) КАК Документ,
	|	КОЛИЧЕСТВО(ДокументыИнтеграцииСБанком.Состояние) КАК Количество,
	|	ДокументыИнтеграцииСБанком.Состояние КАК Состояние
	|ИЗ
	|	ВТ_ДокументыИнтеграцииСБанком КАК ДокументыИнтеграцииСБанком
	|ГДЕ
	|	ДокументыИнтеграцииСБанком.ТипДокумента = ТИП(Документ.ПлатежноеПоручение)
	|	И ДокументыИнтеграцииСБанком.Дата >= &ДатаНеактуальностиПлатежек
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыИнтеграцииСБанком.Состояние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыИнтеграцииСБанком.Документ КАК Документ,
	|	ДокументыИнтеграцииСБанком.Состояние КАК Состояние
	|ИЗ
	|	ВТ_ДокументыИнтеграцииСБанком КАК ДокументыИнтеграцииСБанком
	|ГДЕ
	|	ДокументыИнтеграцииСБанком.ТипДокумента = ТИП(Документ.РегламентированныйОтчет)
	|	И НЕ ВЫРАЗИТЬ(ДокументыИнтеграцииСБанком.Документ КАК Документ.РегламентированныйОтчет).ПометкаУдаления";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ОписаниеДокументовПоТипам = Новый Соответствие;
	ОписаниеДокументовПоТипам.Вставить("ПлатежноеПоручение", ОписаниеПлатежныхПоручений(Результат[1].Выбрать()));
	ОписаниеДокументовПоТипам.Вставить("РегламентированныйОтчет", ОписаниеРегламентированныхОтчетов(Результат[2].Выбрать()));
	ДобавитьИтогОписанияДокументов(ОписаниеДокументовПоТипам);
	
	Возврат ОписаниеДокументовПоТипам;
	
КонецФункции

Функция ОписаниеПлатежныхПоручений(Выборка)
	
	ОписаниеДокументов = НовыйОписаниеДокументов();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ПодготовленоКОтправке Тогда
			ОписаниеДокументов.ПодготовленныеКОтправке = Выборка.Количество;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ОшибкаПриОтправке Тогда
			ОписаниеДокументов.ОшибкаОтправки = Выборка.Количество;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ОтправленоВБанк Тогда
			ОписаниеДокументов.Отправленные = Выборка.Количество;
		КонецЕсли;
		Если Выборка.Количество = 1 Тогда
			ОписаниеДокументов.Документ = Выборка.Документ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеДокументов;
	
КонецФункции

Функция ОписаниеРегламентированныхОтчетов(Выборка)
	
	ОписаниеДокументов = НовыйОписаниеДокументов();
	Пока Выборка.Следующий() Цикл
		Если ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(Выборка.Документ).ВРаботе
			Или ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(Выборка.Документ).Сдано Тогда
			Продолжить;
		КонецЕсли;
		Если Выборка.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ПодготовленоКОтправке Тогда
			ОписаниеДокументов.ПодготовленныеКОтправке = ОписаниеДокументов.ПодготовленныеКОтправке + 1;
			ОписаниеДокументов.Документ = ?(ОписаниеДокументов.ПодготовленныеКОтправке = 1, Выборка.Документ, Неопределено);
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ОшибкаПриОтправке Тогда
			ОписаниеДокументов.ОшибкаОтправки = ОписаниеДокументов.ОшибкаОтправки + 1;
			ОписаниеДокументов.Документ = ?(ОписаниеДокументов.ОшибкаОтправки = 1, Выборка.Документ, Неопределено);
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияДокументовИнтеграцииСБанком.ОтправленоВБанк Тогда
			ОписаниеДокументов.Отправленные = ОписаниеДокументов.Отправленные + 1;
			ОписаниеДокументов.Документ = ?(ОписаниеДокументов.Отправленные = 1, Выборка.Документ, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеДокументов;
	
КонецФункции

Процедура ДобавитьИтогОписанияДокументов(ОписаниеДокументовПоТипам)
	
	ОписаниеИтого = НовыйОписаниеДокументов();
	Для Каждого КлючИЗначение Из ОписаниеДокументовПоТипам Цикл
		ОписаниеИтого.ПодготовленныеКОтправке = ОписаниеИтого.ПодготовленныеКОтправке + КлючИЗначение.Значение.ПодготовленныеКОтправке;
		ОписаниеИтого.ОшибкаОтправки = ОписаниеИтого.ОшибкаОтправки + КлючИЗначение.Значение.ОшибкаОтправки;
		ОписаниеИтого.Отправленные = ОписаниеИтого.Отправленные + КлючИЗначение.Значение.Отправленные;
	КонецЦикла;
	ОписаниеДокументовПоТипам.Вставить("Итого", ОписаниеИтого);
	
КонецПроцедуры

Функция ОписаниеДокументовПоСостояниюИнтеграции(СостоянияИнтеграцииДокументов, ТипДокумента)
	
	ОписаниеДокументов = НовыйОписаниеДокументов();
	
	Если НЕ ЗначениеЗаполнено(СостоянияИнтеграцииДокументов) Тогда
		Возврат ОписаниеДокументов;
	КонецЕсли;
	
	СтрокиПодготовленоКОтправке = СостоянияИнтеграцииДокументов.НайтиСтроки(Новый Структура(
		"Состояние, ТипДокумента", Перечисления.СостоянияДокументовИнтеграцииСБанком.ПодготовленоКОтправке, ТипДокумента));
	ОписаниеДокументов.ПодготовленныеКОтправке = СтрокиПодготовленоКОтправке.Количество();
	Если ОписаниеДокументов.ПодготовленныеКОтправке = 1 Тогда
		ОписаниеДокументов.Документ = СтрокиПодготовленоКОтправке[0].Документ;
	КонецЕсли;
	
	СтрокиОшибкаОтправки = СостоянияИнтеграцииДокументов.НайтиСтроки(Новый Структура(
		"Состояние, ТипДокумента", Перечисления.СостоянияДокументовИнтеграцииСБанком.ОшибкаПриОтправке, ТипДокумента));
	ОписаниеДокументов.ОшибкаОтправки = СтрокиОшибкаОтправки.Количество();
	Если ОписаниеДокументов.ОшибкаОтправки = 1 Тогда
		ОписаниеДокументов.Документ = СтрокиОшибкаОтправки[0].Документ;
	КонецЕсли;
	
	СтрокиОтправленные = СостоянияИнтеграцииДокументов.НайтиСтроки(Новый Структура(
		"Состояние, ТипДокумента", Перечисления.СостоянияДокументовИнтеграцииСБанком.ОтправленоВБанк, ТипДокумента));
	ОписаниеДокументов.Отправленные = СтрокиОтправленные.Количество();
	Если ОписаниеДокументов.Отправленные = 1 Тогда
		ОписаниеДокументов.Документ = СтрокиОтправленные[0].Документ;
	КонецЕсли;
	
	Возврат ОписаниеДокументов;
	
КонецФункции

Функция НовыйОписаниеДокументов()
	
	ОписаниеДокументов = Новый Структура();
	ОписаниеДокументов.Вставить("ПодготовленныеКОтправке", 0);
	ОписаниеДокументов.Вставить("Отправленные", 0);
	ОписаниеДокументов.Вставить("ОшибкаОтправки", 0);
	ОписаниеДокументов.Вставить("Документ", Неопределено);
	Возврат ОписаниеДокументов;
	
КонецФункции

Функция СрокНеактуальностиПлатежей()
	
	Возврат 10 * 24 * 60 * 60;
	
КонецФункции

Функция ОбработчикДанныхОтправкиПлатежныхПоручений()
	
	Возврат НРег("payment_order_1c_txt");
	
КонецФункции

Функция ОбработчикДанныхОтправкиРегламентированныхОтчетов()
	
	Возврат НРег("tax_return_1c_zip");
	
КонецФункции

Функция НовыйДанныеБаннера()
	
	ДанныеБаннера = Новый Структура();
	ДанныеБаннера.Вставить("ТекстБаннера", "");
	ДанныеБаннера.Вставить("ИмяКартинкиБаннера", "");
	ДанныеБаннера.Вставить("ИнтервалПроверкиСостоянияИнтеграцииСБанком", 0);
	ДанныеБаннера.Вставить("ЦветБаннера", Неопределено);
	ДанныеБаннера.Вставить("ХешДанныхБаннера", Неопределено);
	
	Возврат ДанныеБаннера;
	
КонецФункции

Функция ДанныеБаннераИнтеграцииСБанкомПоОписанию(Описание, ПараметрыОтображения)
	
	ДанныеБаннера = НовыйДанныеБаннера();
	
	ДанныеБаннера.ТекстБаннера = ТекстБаннераИнтеграцииСБанком(Описание);
	ДанныеБаннера.ИмяКартинкиБаннера = КартинкаБаннераИнтеграцииСБанком(Описание);
	ДанныеБаннера.ИнтервалПроверкиСостоянияИнтеграцииСБанком =
		ИнтервалОбновленияБаннераИнтеграцииСБанком(Описание, ПараметрыОтображения.ЗапускатьОжиданиеБаннера);
	ДанныеБаннера.ЦветБаннера = ЦветБаннераИнтеграцииСБанком(Описание, ПараметрыОтображения.ЦветБаннера);
	ДанныеБаннера.ХешДанныхБаннера = ХешЗначенийДанныхБаннера(ДанныеБаннера);
	
	Возврат ДанныеБаннера;
	
КонецФункции

Функция ХешЗначенийДанныхБаннера(ДанныеБаннера)
	
	ЗначенияБаннера = "";
	Для Каждого КлючИЗначение Из ДанныеБаннера Цикл
		ЗначенияБаннера = ЗначенияБаннера + Строка(КлючИЗначение.Значение);
	КонецЦикла;
	Хеш = Новый ХешированиеДанных(ХешФункция.CRC32);
	Хеш.Добавить(ЗначенияБаннера);
	
	Возврат Хеш.ХешСумма;
	
КонецФункции

Функция ТекстБаннераИнтеграцииСБанком(Описание)
	
	ТекстБаннера = "";
	
	ОписаниеИтого = Описание["Итого"];
	Если ОписаниеИтого.ОшибкаОтправки <> 0 Тогда
		ТекстБаннера = ТекстЕстьДокументыСОшибками(Описание);
	ИначеЕсли ОписаниеИтого.ПодготовленныеКОтправке > 0 Тогда
		ТекстБаннера = ТекстЕстьДокументыКОтправке(Описание);
	ИначеЕсли ОписаниеИтого.Отправленные > 0 Тогда
		ТекстБаннера = ТекстЕстьДокументыДляПодписи(Описание);
	КонецЕсли;
	
	Возврат ТекстБаннера;
	
КонецФункции

Функция ТекстЕстьДокументыКОтправке(Описание)
	
	КоличествоПлатежныхПоручений = Описание["ПлатежноеПоручение"].ПодготовленныеКОтправке;
	КоличествоРегламентированныхОтчетов = Описание["РегламентированныйОтчет"].ПодготовленныеКОтправке;
	КоличествоИтого = Описание["Итого"].ПодготовленныеКОтправке;
	
	Если КоличествоПлатежныхПоручений <> 0 И КоличествоПлатежныхПоручений = КоличествоИтого Тогда
		Если КоличествоПлатежныхПоручений = 1 Тогда
			ТекстСообщения = НСтр("ru = 'Платежное поручение передается в Личный кабинет банка'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Платежные поручения передаются в Личный кабинет банка'");
		КонецЕсли;
	ИначеЕсли КоличествоРегламентированныхОтчетов <> 0 И КоличествоРегламентированныхОтчетов = КоличествоИтого Тогда
		Если КоличествоРегламентированныхОтчетов = 1 И ЗначениеЗаполнено(Описание["РегламентированныйОтчет"].Документ) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = '%1 передается в Личный кабинет банка'"),
				НаименованиеОтчета(Описание["РегламентированныйОтчет"].Документ));
		Иначе
			ТекстСообщения = НСтр("ru = 'Отчеты передаются в Личный кабинет банка'");
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Документы передаются в Личный кабинет банка'");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ТекстСообщения);
	
КонецФункции

Функция ТекстЕстьДокументыДляПодписи(Описание)
	
	КоличествоПлатежныхПоручений = Описание["ПлатежноеПоручение"].Отправленные;
	КоличествоРегламентированныхОтчетов = Описание["РегламентированныйОтчет"].Отправленные;
	КоличествоИтого = Описание["Итого"].Отправленные;
	
	Если КоличествоПлатежныхПоручений <> 0 И КоличествоПлатежныхПоручений = КоличествоИтого Тогда
		Если КоличествоПлатежныхПоручений = 1 Тогда
			ТекстСообщения = НСтр("ru = 'Оплатите платежное поручение в Личном кабинете банка'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Оплатите платежные поручения в Личном кабинете банка'");
		КонецЕсли;
	ИначеЕсли КоличествоРегламентированныхОтчетов <> 0 И КоличествоРегламентированныхОтчетов = КоличествоИтого Тогда
		Если КоличествоРегламентированныхОтчетов = 1 И ЗначениеЗаполнено(Описание["РегламентированныйОтчет"].Документ) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Подпишите отчет %1 в Личном кабинете банка'"),
				НаименованиеОтчета(Описание["РегламентированныйОтчет"].Документ));
		Иначе
			ТекстСообщения = НСтр("ru = 'Подпишите отчеты в Личном кабинете банка'");
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Документы переданы в Личный кабинет банка'");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ТекстСообщения);
	
КонецФункции

Функция ТекстЕстьДокументыСОшибками(Описание)
	
	КоличествоПлатежныхПоручений = Описание["ПлатежноеПоручение"].ОшибкаОтправки;
	КоличествоРегламентированныхОтчетов = Описание["РегламентированныйОтчет"].ОшибкаОтправки;
	КоличествоИтого = Описание["Итого"].ОшибкаОтправки;
	
	Если КоличествоПлатежныхПоручений <> 0 И КоличествоПлатежныхПоручений = КоличествоИтого Тогда
		Если КоличествоПлатежныхПоручений = 1 Тогда
			ТекстСообщения = НСтр("ru = 'При отправке платежного поручения в банк произошла ошибка.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'При отправке платежных поручений в банк произошла ошибка.'");
		КонецЕсли;
	ИначеЕсли КоличествоРегламентированныхОтчетов <> 0 И КоличествоРегламентированныхОтчетов = КоличествоИтого Тогда
		Если КоличествоРегламентированныхОтчетов = 1 И ЗначениеЗаполнено(Описание["РегламентированныйОтчет"].Документ) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'При отправке отчета %1 в банк произошла ошибка.'"),
				НаименованиеОтчета(Описание["РегламентированныйОтчет"].Документ));
		Иначе
			ТекстСообщения = НСтр("ru = 'При отправке отчетов в банк произошла ошибка.'");
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'При отправке документов в банк произошла ошибка.'");
	КонецЕсли;
	
	ЧастиТекста = Новый Массив;
	ЧастиТекста.Добавить(" ");
	ЧастиТекста.Добавить(ТекстСообщения);
	ЧастиТекста.Добавить(" ");
	ЧастиТекста.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее в журнале регистрации'"), , , ,
		"ОткрытьЖурналРегистрацииСОшибками"));
	
	Возврат Новый ФорматированнаяСтрока(ЧастиТекста);
	
КонецФункции

Функция НаименованиеОтчета(РегламентированныйОтчет)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегламентированныйОтчет, "НаименованиеОтчета");
	
КонецФункции

Функция КартинкаБаннераИнтеграцииСБанком(Описание)
	
	КартинкаБаннера = "";
	
	Если Описание["Итого"].ПодготовленныеКОтправке > 0 Тогда
		КартинкаБаннера = "СинхронизацияДанныхДлительнаяОперация";
	КонецЕсли;
	
	Возврат КартинкаБаннера;
	
КонецФункции

Функция ИнтервалОбновленияБаннераИнтеграцииСБанком(Описание, ЗапускатьОжиданиеБаннера)
	
	ИнтервалПроверкиСостоянияИнтеграцииСБанком = ?(ЗапускатьОжиданиеБаннера,
		ИнтервалОбновленияДанныхБаннераПоУмолчанию(), 0);
		
	Если Описание["Итого"].ПодготовленныеКОтправке > 0 Тогда
		ИнтервалПроверкиСостоянияИнтеграцииСБанком = ИнтервалОбновленияДанныхБаннераПриОтправке();
	ИначеЕсли Описание["Итого"].Отправленные > 0 Тогда
		ИнтервалПроверкиСостоянияИнтеграцииСБанком = ИнтервалОбновленияДанныхБаннераПоУмолчанию();
	КонецЕсли;
	
	Возврат ИнтервалПроверкиСостоянияИнтеграцииСБанком;
	
КонецФункции

Функция ЦветБаннераИнтеграцииСБанком(Описание, ЦветБаннераПоУмолчанию)
	
	ЦветБаннера = ЦветБаннераПоУмолчанию;
	Если Описание["Итого"].ОшибкаОтправки > 0 Тогда
		ЦветБаннера = ЦветаСтиля.ЦветФонаНекорректногоКонтрагентаВДокументе;
	КонецЕсли;
	
	Возврат ЦветБаннера;
	
КонецФункции

Функция ПараметрыОтображенияПоУмолчанию()
	
	ПараметрыОтображения = Новый Структура;
	ПараметрыОтображения.Вставить("ЦветБаннера", ЦветаСтиля.ЦветБаннераБежевый);
	ПараметрыОтображения.Вставить("ЗапускатьОжиданиеБаннера", 
		ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена());
	Возврат ПараметрыОтображения;
	
КонецФункции

Функция ИнтервалОбновленияДанныхБаннераПоУмолчанию()
	
	Возврат ?(ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена(), 60, 0);
	
КонецФункции

Функция ИнтервалОбновленияДанныхБаннераПриОтправке()
	
	Возврат 10;
	
КонецФункции

#КонецОбласти

#Область ОповещениеВФоне

Процедура ОтправитьОповещениеОбИзмененииПоДокументам(ПараметрыЗадания, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Документы", ПараметрыЗадания.Документы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыИнтеграцииСБанком.Идентификатор КАК Идентификатор,
	|	ДокументыИнтеграцииСБанком.НастройкаИнтеграции КАК НастройкаИнтеграции
	|ИЗ
	|	РегистрСведений.ДокументыИнтеграцииСБанком КАК ДокументыИнтеграцииСБанком
	|ГДЕ
	|	ДокументыИнтеграцииСБанком.Документ В(&Документы)
	|	И ДокументыИнтеграцииСБанком.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовИнтеграцииСБанком.ПодготовленоКОтправке)
	|	И ДокументыИнтеграцииСБанком.НастройкаИнтеграции <> ЗНАЧЕНИЕ(Справочник.НастройкиИнтеграцииСБанками.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИнтеграцияОбъектовОбластейДанных.ОповеститьОбИзмененииОбъекта(Выборка.НастройкаИнтеграции, Выборка.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
