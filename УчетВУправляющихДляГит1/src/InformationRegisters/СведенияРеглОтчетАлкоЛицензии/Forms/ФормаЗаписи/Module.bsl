

#Область ОписаниеПеременных

&НаСервере
Перем ОбъектЭтогоОтчета; // Объект метаданных отчета, из которого открыта форма записи.

&НаКлиенте
Перем УправляемаяФормаВладелец; // Форма отчета, из которого открыта форма записи.

&НаКлиенте
Перем УникальностьФормы; // Уникальный идентификатор формы отчета.


// Форма выбора из списка, ввода пары значений, форма длительной операции, 
// записи регистра, ввода данных по ОП и т.д.
// Любая открытая из данной формы форма в режиме блокировки владельца.
&НаКлиенте
Перем ОткрытаяФормаПотомокСБлокировкойВладельца Экспорт;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЦветСтиляНезаполненныйРеквизит 	= ЦветаСтиля["ЦветНезаполненныйРеквизитБРО"];
	ЦветСтиляЦветГиперссылкиБРО		= ЦветаСтиля["ЦветГиперссылкиБРО"];
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекстПредупреждения = НСтр("ru='Данная форма предназначена для редактирования данных из форм регламентированных отчетов.
										|
										|Открытие данной формы не из формы регламентированного отчета не предусмотрено!'");
	
	// Ищем управляемую форму, откуда открыли.
	Если ВладелецФормы = Неопределено Тогда
		
	    Отказ = Истина;		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
				
	ТекущийРодитель = ВладелецФормы;
	 
	Пока ТипЗнч(ТекущийРодитель) <> Тип("УправляемаяФорма") Цикл
	    ТекущийРодитель = ТекущийРодитель.Родитель;		
	КонецЦикла;
	
	УправляемаяФормаВладелец = ТекущийРодитель;
		
	ИмяФормыВладельца 	= УправляемаяФормаВладелец.ИмяФормы;
		
	Если СтрНайти(ИмяФормыВладельца, "РегламентированныйОтчетАлко") = 0 Тогда
	
		Отказ = Истина;
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	
	КонецЕсли;
	
	УникальностьФормы   = УправляемаяФормаВладелец.УникальностьФормы;
	Оповестить("ОткрытаФормаЗаписиРегистра", ЭтаФорма, УникальностьФормы);
		
	ТекущееСостояниеВладельца = УправляемаяФормаВладелец.ТекущееСостояние;
	
    ДокументЗаписи = 		УправляемаяФормаВладелец.СтруктураРеквизитовФормы.мСохраненныйДок;
	ИндексСтраницыЗаписи = 	УправляемаяФормаВладелец.ИндексАктивнойСтраницыВРегистре;
	ИндексСтраницы = 		УправляемаяФормаВладелец.НомерАктивнойСтраницыМногострочногоРаздела;
	НомерПоследнейЗаписи = 	УправляемаяФормаВладелец.КоличествоСтрок;
	МаксИндексСтраницы = 	УправляемаяФормаВладелец.МаксИндексСтраницы;
	
	Если ТекущееСостояниеВладельца = "Добавление" или ТекущееСостояниеВладельца = "Копирование" Тогда
				
		// Заполним измерения, их нет на форме.
	    Запись.Активно = Истина;
		
		Запись.Документ = ДокументЗаписи;
				
		НомерПоследнейЗаписи = НомерПоследнейЗаписи + 1;
	    Запись.ИндексСтроки = НомерПоследнейЗаписи;
		
		Модифицированность = Истина;
		
	КонецЕсли;
		
	Заголовок = "Адрес места осуществления деятельности";
	
	ЭтоПБОЮЛ = УправляемаяФормаВладелец.ЭтоПБОЮЛ;
	ПодготовкаНаСервере();
	
	Если (ВладелецФормы.ТекущийЭлемент <> Неопределено) 
		и НЕ (ТекущееСостояниеВладельца = "Добавление" или ТекущееСостояниеВладельца = "Копирование")
		Тогда
		
		ИмяАктивногоПоля = ВладелецФормы.ТекущийЭлемент.Имя;
		
	    АктивноеПоле = Элементы.Найти(ИмяАктивногоПоля);
		Если НЕ АктивноеПоле = Неопределено Тогда
			
			Если ИмяАктивногоПоля = "П000000000201" Тогда
			    ТекущийЭлемент = АктивноеПоле;
			КонецЕсли; 
		
		КонецЕсли;
	
	КонецЕсли;
				
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Оповестить("ЗакрытаФормаЗаписиРегистра", , УникальностьФормы);
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Оповещаем о необходимости пересчета итогов форму-владелец для активных записей.
	Если ВнесеныИзменения и Запись.Активно Тогда
	    		
		// Оповещаем форму-владелец о изменениях.
		ИнформацияДляПересчетаИтогов = Новый Структура;
		ИнформацияДляПересчетаИтогов.Вставить("ИмяРегистра", 		ИмяРегистра);
		ИнформацияДляПересчетаИтогов.Вставить("ИндексСтраницы", 	ИндексСтраницы);
		ИнформацияДляПересчетаИтогов.Вставить("ИндексСтроки", 		Запись.ИндексСтроки);
		ИнформацияДляПересчетаИтогов.Вставить("НачальноеЗначение", 	НачальноеЗначениеСтруктураДанных);
		ИнформацияДляПересчетаИтогов.Вставить("КонечноеЗначение", 	КонечноеЗначениеСтруктураДанных);
		
		Оповестить("ПересчетИтогов", ИнформацияДляПересчетаИтогов, УникальностьФормы);
	
	КонецЕсли;
	
	ВнесеныИзменения = Ложь;
			
КонецПроцедуры


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЦветСтиляНезаполненныйРеквизит 	= ЦветаСтиля["ЦветНезаполненныйРеквизитБРО"];
	ЦветСтиляЦветГиперссылкиБРО		= ЦветаСтиля["ЦветГиперссылкиБРО"];
	
	ЗаполнитьАдресПредставлениеНаСервере();
	
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
				
	ВнесеныИзменения = Модифицированность;
	
	Если ТекущееСостояниеВладельца = "Добавление" или ТекущееСостояниеВладельца = "Копирование" Тогда
		// Обработка ситуаций "битых" внутренних данных отчета, когда из отчета пришло неверное значение последней строки.
		// Теперь всегда перед записью проверяем последний индекс строки в регистре.
		
		СписокСоставаРегистра = Новый СписокЗначений;
		СписокСоставаРегистра.Добавить("Измерения");
		СтруктураИзмерений = РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруДанныхЗаписиРегистраСведений(
																		ИмяРегистра, СписокСоставаРегистра);
	
		Пока РегламентированнаяОтчетностьАЛКО.СуществуетЗапись(Запись, ИмяРегистра, СтруктураИзмерений) Цикл
			
			НомерПоследнейЗаписи = НомерПоследнейЗаписи + 1;
			Запись.ИндексСтроки = НомерПоследнейЗаписи;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоПервоеРедактирование = Ложь;
	
	Если ТекущееСостояниеВладельца = "Добавление" или ТекущееСостояниеВладельца = "Копирование" Тогда
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ТекущийОбъект.Документ, ИмяРегистра,
									ИндексСтраницыЗаписи, ТекущийОбъект.ИндексСтроки, "ДобавлениеСтроки");
		
	ИначеЕсли ВнесеныИзменения Тогда
		
		// Нужно записать первоначальные данные Записи регистра в журнал.
		// Но сделать это надо только для случая первого изменения Записи после последнего сохранения отчета,
		// чтобы была информация о данных до изменения в случае отката внесенных изменений, если
		// отказался пользователь от сохранения отчета.
		
		ЭтоПервоеРедактирование = РегламентированнаяОтчетностьАЛКО.ЭтоПервоеРедактированиеЗаписиРегистра(ТекущийОбъект.Документ, ИмяРегистра, 
															ИндексСтраницыЗаписи, ТекущийОбъект.ИндексСтроки);
				
	КонецЕсли;
	
	Если ЭтоПервоеРедактирование Тогда
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("НачальноеЗначение", НачальноеЗначение);
		Ресурсы.Вставить("КоличествоСтрок", НомерПоследнейЗаписи);
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		// Нужно сохранить первоначальные данные.
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ТекущийОбъект.Документ, ИмяРегистра,
									ИндексСтраницыЗаписи, ТекущийОбъект.ИндексСтроки, "Редактирование", Ресурсы);
	Иначе
									
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", НомерПоследнейЗаписи);		
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ТекущийОбъект.Документ, ИмяРегистра,
									ИндексСтраницыЗаписи, 0, "Сервис", Ресурсы);							
	КонецЕсли;
	
	Если ВнесеныИзменения Тогда
		РегламентированнаяОтчетностьАЛКО.ПолучитьВнутреннееПредставлениеСтруктурыДанныхЗаписи(
											Запись, ИмяРегистра, КонечноеЗначениеСтруктураДанных);
	КонецЕсли;
										
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
    	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
     	МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = УникальностьФормы Тогда
		
		Если НРег(ИмяСобытия) = НРег("ЗакрытьОткрытыеФормыЗаписи") Тогда			
		    Модифицированность = Ложь;
			Закрыть();			
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АдресПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВводАдресаНаКлиенте();
		
КонецПроцедуры


&НаКлиенте
Процедура П000000000201ПриИзменении(Элемент)
	ОбработкаПослеИзменения();
КонецПроцедуры


&НаКлиенте
Процедура П000000000202Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВводАдресаНаКлиенте();
	
КонецПроцедуры


&НаКлиенте
Процедура П000000000203Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВводАдресаНаКлиенте();
	
КонецПроцедуры


&НаКлиенте
Процедура П000000000204Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВводАдресаНаКлиенте();
	
КонецПроцедуры


&НаКлиенте
Процедура П000000000205Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВводАдресаНаКлиенте();
	
КонецПроцедуры


&НаКлиенте
Процедура П000000000206Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВводАдресаНаКлиенте();
	
КонецПроцедуры


&НаКлиенте
Процедура П000000000207Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВводАдресаНаКлиенте();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтменитьИЗакрыть(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если НЕ Модифицированность Тогда
	    Закрыть();
	Иначе	
	    Записать();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура РедактироватьАдрес(Команда)
	ВводАдресаНаКлиенте();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьАдресПредставлениеНаСервере()

	АдресПредставление = ?(ЗначениеЗаполнено(Запись.П0000000Адрес), Запись.П0000000Адрес, "Заполнить");
	АдресXML = Запись.П0000000VNUTR;
	
	Если (АдресПредставление = "Заполнить")
		И УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресXML) Тогда
		
		// Попытаемся заполнить по имеющимся данным.
		
		// Заполняем шаблон.
		АдресМестаДеятельности = ПолучитьСтруктуруАдреса(АдресXML);
		Представление = АдресМестаДеятельности.ПредставлениеАдреса;
		
		Если ЗначениеЗаполнено(СтрЗаменить(Представление, ",", "")) Тогда
			
			АдресПредставление = Представление;
			Запись.П0000000Адрес = Представление;
		    Модифицированность = Истина;
				
		КонецЕсли; 
				
	КонецЕсли;
	
	Элементы.АдресПредставление.ЦветТекста = ?(АдресПредставление = "Заполнить", 
												ЦветСтиляНезаполненныйРеквизит, ЦветСтиляЦветГиперссылкиБРО); 
	
КонецПроцедуры


&НаСервере
Процедура ПодготовкаНаСервере()
	
	ДоступностьПолейНаСервере();	
	ЗаполнитьАдресПредставлениеНаСервере();
		
	// Заполним начальное значение всех полей записи во внутреннем формате.
	ИмяРегистра = РегламентированнаяОтчетностьАЛКО.ПолучитьИмяОбъектаМетаданныхПоИмениФормы(ИмяФормы);
	
	Если ТекущееСостояниеВладельца = "Добавление" или ТекущееСостояниеВладельца = "Копирование" Тогда
		
		Запись.ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(Запись.Документ, ИндексСтраницыЗаписи);
		Запись.Организация = Запись.Документ.Организация;
		
		// Начальные данные в этих случаях всегда пустые.
		НачальноеЗначениеСтруктураДанных = РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистра);
		НачальноеЗначение = ЗначениеВСтрокуВнутр(НачальноеЗначениеСтруктураДанных);
		
	Иначе
		НачальноеЗначение = РегламентированнаяОтчетностьАЛКО.ПолучитьВнутреннееПредставлениеСтруктурыДанныхЗаписи(
															Запись, ИмяРегистра, НачальноеЗначениеСтруктураДанных);
	КонецЕсли;	
		
КонецПроцедуры


&НаСервере
Процедура ДоступностьПолейНаСервере()
	
	Элементы.П000000000201.Видимость = НЕ ЭтоПБОЮЛ;
	Запись.П000000000201 = ?(ЭтоПБОЮЛ, "", Запись.П000000000201);
	
КонецПроцедуры


&НаСервере
Функция ОбъектОтчета(ИмяФормыОбъекта)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ОбъектОтчетаАЛКО(ИмяФормыОбъекта, ОбъектЭтогоОтчета);
	
КонецФункции


&НаСервере
Процедура ОбработкаПослеИзменения()
	
	ОбъектОтчета(ИмяФормыВладельца).ОбработкаЗаписи(ИмяРегистра, Запись);	 
	Модифицированность = РегламентированнаяОтчетностьАЛКО.ЗаписьИзменилась(Запись, НачальноеЗначениеСтруктураДанных);
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьПредставлениеАдреса(Дополнение, СтрокаКонкатенации, Представление)
	
	Если Дополнение <> "" Тогда
		Представление = Представление + СтрокаКонкатенации + Дополнение;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВводАдресаНаКлиенте()

	ТекущаяСтрока = Запись;
		
	СтандартнаяОбработка = Ложь;
		
	АдресМестаДеятельности = РегламентированнаяОтчетностьАЛКОВызовСервера.ПолучитьПустуюСтруктуруАдреса();
		
	// Читаем сохраненную во внутреннем представлении структуру.
	АдресXML = ТекущаяСтрока.П0000000VNUTR;
		
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресXML) Тогда			
		АдресМестаДеятельности.АдресXML = АдресXML;								     
	КонецЕсли;	
	АдресМестаДеятельности.ПредставлениеАдреса = ТекущаяСтрока.П0000000Адрес;
	
	ЗаголовокФормыВвода = "Ввод адреса";
	
	ВидКонтактнойИнформации = УправляемаяФормаВладелец.СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформации.ТолькоНациональныйАдрес;
		
	ДополнительныеПараметры = Новый Структура;		
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",    ТекущаяСтрока);
	Оповещение = Новый ОписаниеОповещения("ВводАдресаЗавершениеНаКлиенте", ЭтаФорма, ДополнительныеПараметры);
	
	РегламентированнаяОтчетностьАЛКОКлиент.ВызватьФормуВводаАдресаАЛКО(
							АдресМестаДеятельности, ЗаголовокФормыВвода, Оповещение, ВидКонтактнойИнформации);
			
КонецПроцедуры


// Возвращает сведения об адресах в виде структуру частей адреса и кодов КЛАДР
//
// Параметры:
//   Адрес                  - Строка, ОбъектXDTO - XDTO объект или строка XML контактной информации
//   ДополнительныеПараметры - Структура - параметры контактной информации. 
//       * БезПредставлений - Булево - Если Истина, то поле представления адреса будет отсутствовать.
//       * КодыКЛАДР - Булево - Если Истина, то возвращает структуру с кодами КЛАДР по всем частям адреса
//       * ПолныеНаименованияСокращений - Булево - Если Истина, то возвращает полное наименование адресных объектов
//       * НаименованиеВключаетСокращение - Булево - Если Истина, то поля содержат сокращениям в наименованиях адресных объектов.
// Возвращаемое значение:
//   Структура - набор пар ключ-значение. Состав свойств для адреса:
//        * Страна           - Строка - текстовое представление страны.
//        * КодСтраны        - Строка - код страны по ОКСМ.
//        * Индекс           - Строка - почтовый индекс.
//        * Регион           - Строка - текстовое представление региона РФ.
//        * КодРегиона       - Строка - код региона РФ.
//        * РегионСокращение - Строка - сокращение региона.
//        * Округ            - Строка - текстовое представление округа.
//        * ОкругСокращение  - Строка - сокращение округа.
//        * РегионСокращение - Строка - сокращение региона.
//        * Район            - Строка - текстовое представление района.
//        * РайонСокращение  - Строка - сокращение района.
//        * Город            - Строка - текстовое представление города
//        * ГородСокращение  - Строка - сокращение города.
//        * ВнутригородскойРайон - Строка - текстовое представление внутригородского района
//        * ВнутригородскойРайонСокращение  - Строка - сокращение внутригородского района.
//        * НаселенныйПункт  - Строка - текстовое представление населенного пункта.
//        * НаселенныйПунктСокращение - Строка - сокращение населенного пункта.
//        * Улица            - Строка - текстовое представление улицы.
//        * УлицаСокращение  - Строка - сокращение улицы.
//        * ДополнительнаяТерритория - Строка - текстовое представление дополнительной территории.
//        * ДополнительнаяТерриторияСокращение - Строка - сокращение дополнительной территории.
//        * ЭлементДополнительнойТерритории - Строка - текстовое представление элемента дополнительной территории.
//        * ЭлементДополнительнойТерриторииСокращение - Строка - сокращение элемента дополнительной территории.
//        * Здание - Структура - структура с информацией о здании адреса
//            ** ТипЗдания - Строка  - тип объекта адресации адреса РФ согласно приказу ФНС ММВ-7-1/525 от 31.08.2011.
//            ** Номер - Строка  - текстовое представление номера дома (только для адресов РФ).
//        * Корпуса - Массив - содержит структуры(поля структуры: ТипКорпуса, Номер) с перечнем корпусов адреса.
//        * Помещения - Массив - содержит структуры(поля структуры: ТипПомещения, Номер) с перечнем помещений адреса.
//        * КодыКЛАДР           - Структура - Коды КЛАДР, если установлен параметр КодыКЛАДР.
//           ** Регион          - Строка    - код КЛАДР региона.
//           ** Район           - Строка    - код КЛАДР район.
//           ** Город           - Строка    - код КЛАДР города.
//           ** НаселенныйПункт - Строка    - код КЛАДР населенного пункта.
//           ** Улица           - Строка    - код КЛАДР улица.
//        * ДополнительныеКоды  - Структура - Коды ОКТМО, ОКТМО, ОКАТО, КодИФНСФЛ, КодИФНСЮЛ, КодУчасткаИФНСФЛ, КодУчасткаИФНСЮЛ.
&НаСервере
Функция ПолучитьСтруктуруАдреса(Адрес)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXML(Адрес);
	
КонецФункции


&НаКлиенте
Процедура ВводАдресаЗавершениеНаКлиенте(Результат, Параметры) Экспорт

	Если Результат = Неопределено Тогда
	    Возврат;	
	КонецЕсли; 
	
	СтароеПредставление = АдресПредставление;
		
	ТекущаяСтрока  					 = Параметры.ТекущаяСтрока;
				
	СтруктураАдреса = Неопределено;
	
	Если НЕ (ТипЗнч(Результат) = Тип("Структура")) Тогда
		Возврат;	
	КонецЕсли;
			
	КонтактнаяИнформация =  Результат.КонтактнаяИнформация; // формат XML
	СтрокаПредставления  =  Результат.Представление;
					
	СтруктураАдреса = ПолучитьСтруктуруАдреса(КонтактнаяИнформация);
	ТекущаяСтрока.П0000000VNUTR = КонтактнаяИнформация;
	ТекущаяСтрока.П0000000Адрес = СтрокаПредставления;
			
	СтрокаГород = ?(ПустаяСтрока(СтруктураАдреса.Город), 
					СтруктураАдреса.НаселенныйПункт, 
					СтруктураАдреса.Город 
					+ ?(ПустаяСтрока(СтруктураАдреса.НаселенныйПункт), 
					"", " / " + СтруктураАдреса.НаселенныйПункт));					
						
	СтрокаДома = СтруктураАдреса.Дом;	
	ДополнитьПредставлениеАдреса(СтруктураАдреса.Корпус,   ", ", СтрокаДома);
	ДополнитьПредставлениеАдреса(СтруктураАдреса.Литера,   ", ", СтрокаДома);
	ДополнитьПредставлениеАдреса(СтруктураАдреса.Квартира, ", ", СтрокаДома);
	
	ТекущаяСтрока.П000000000202 = СокрЛП(СтруктураАдреса.Индекс);
	ТекущаяСтрока.П000000000203 = СокрЛП(СтруктураАдреса.КодРегиона);
	ТекущаяСтрока.П000000000204 = СокрЛП(СтруктураАдреса.Район);
	ТекущаяСтрока.П000000000205 = СокрЛП(СтрокаГород);
	ТекущаяСтрока.П000000000206 = СокрЛП(СтруктураАдреса.Улица);	
	ТекущаяСтрока.П000000000207 = СокрЛП(СтрокаДома);	
		
	ЗаполнитьАдресПредставлениеНаСервере();
	
	Если СтароеПредставление <> АдресПредставление Тогда
	    Модифицированность = Истина;	
	КонецЕсли;
	
	ОбработкаПослеИзменения();
	
КонецПроцедуры 

#КонецОбласти
