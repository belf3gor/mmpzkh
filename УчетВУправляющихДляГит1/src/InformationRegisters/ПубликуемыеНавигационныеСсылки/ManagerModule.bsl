#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Регистрирует новую навигационную ссылку для открытия формы с параметрами.
// Если для переданных параметров публикации уже есть зарегистрированная ссылка, возвращает ее.
//
// Параметры:
//   ПараметрыРегистрации - см. РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПараметрыПубликации().
//
// Возвращаемое значение:
//   Строка - навигационная ссылка на форму.
//
Функция ПолучитьСсылку(ПараметрыПубликации) Экспорт
	
	НавигационнаяСсылка = НайтиСсылку(ПараметрыПубликации);
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		Возврат НавигационнаяСсылка;
	Иначе
		Идентификатор = ЗаписатьНавигационнуюСсылку(ПараметрыПубликации);
		Возврат НавигационнаяСсылка(Идентификатор);
	КонецЕсли;
	
КонецФункции

// Возвращает параметры поиска и регистрации публикуемой навигационной ссылки.
//
// Возвращаемое значение:
//   Структура:
//      * ИмяФормы - Строка - имя формы, которую требуется открыть по навигационной ссылке.
//      * Организация - СправочникСсылка.Организация - параметр формы.
//      * НачалоПериода - Дата - параметр формы.
//      * КонецПериода - Дата - параметр формы.
//
Функция ПараметрыПубликации() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяФормы", "");
	Параметры.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Параметры.Вставить("НачалоПериода", Дата(1,1,1));
	Параметры.Вставить("КонецПериода", Дата(1,1,1));
	Параметры.Вставить("ПараметрыФормы", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

// Получает новую навигационную ссылку для открытия формы с произвольными параметрами.
//
// Параметры:
//  ИмяФормы		 - Строка - Имя формы, на которую определяется публикуемая ссылка.
//  ПараметрыФормы	 - Структура - ПараметрыФормы.
// 
// Возвращаемое значение:
//   - Ссылка для открытия формы.
//
Функция СсылкаНаФорму(ИмяФормы, ПараметрыФормы) Экспорт
	
	ПараметрыПубликации = ПараметрыПубликации();
	ЗаполнитьЗначенияСвойств(ПараметрыПубликации, ПараметрыФормы);
	ПараметрыПубликации.ИмяФормы = ИмяФормы;
	ПараметрыПубликации.ПараметрыФормы = ПараметрыФормы;
	
	НавигационнаяСсылка = НайтиСсылку(ПараметрыПубликации);
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		Возврат НавигационнаяСсылка;
	Иначе
		Идентификатор = ЗаписатьНавигационнуюСсылку(ПараметрыПубликации);
		Возврат НавигационнаяСсылка(Идентификатор);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

Процедура Очистить() Экспорт
	
	Набор = РегистрыСведений.ПубликуемыеНавигационныеСсылки.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиСсылку(ПараметрыПоиска)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыПоиска.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыПоиска.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", НачалоДня(ПараметрыПоиска.КонецПериода));
	Запрос.УстановитьПараметр("ИмяФормы", ПараметрыПоиска.ИмяФормы);
	Запрос.УстановитьПараметр("ХешПараметровФормы", ХешПараметровФормы( ПараметрыПоиска.ПараметрыФормы));
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПубликуемыеНавигационныеСсылки.Идентификатор КАК Идентификатор,
	|	ПубликуемыеНавигационныеСсылки.ПараметрыФормы КАК ПараметрыФормы
	|ИЗ
	|	РегистрСведений.ПубликуемыеНавигационныеСсылки КАК ПубликуемыеНавигационныеСсылки
	|ГДЕ
	|	ПубликуемыеНавигационныеСсылки.ИмяФормы = &ИмяФормы
	|	И ПубликуемыеНавигационныеСсылки.Организация = &Организация
	|	И ПубликуемыеНавигационныеСсылки.НачалоПериода = &НачалоПериода
	|	И ПубликуемыеНавигационныеСсылки.КонецПериода = &КонецПериода
	|	И ПубликуемыеНавигационныеСсылки.ХешПараметровФормы = &ХешПараметровФормы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПараметрыФормы = Выборка.ПараметрыФормы.Получить();
		Если Совпадают(ПараметрыФормы, ПараметрыПоиска.ПараметрыФормы) Тогда
			Возврат НавигационнаяСсылка(Выборка.Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ЗаписатьНавигационнуюСсылку(ПараметрыПубликации)
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Идентификатор = Новый УникальныйИдентификатор;
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыПубликации, , "ПараметрыФормы");
	Если ЗначениеЗаполнено(ПараметрыПубликации.ПараметрыФормы) Тогда
		МенеджерЗаписи.ПараметрыФормы = Новый ХранилищеЗначения(ПараметрыПубликации.ПараметрыФормы);
		МенеджерЗаписи.ХешПараметровФормы = ХешПараметровФормы(ПараметрыПубликации.ПараметрыФормы);
	КонецЕсли;
	МенеджерЗаписи.Записать(Истина);
	
	Возврат МенеджерЗаписи.Идентификатор;
	
КонецФункции

Функция НавигационнаяСсылка(Идентификатор)
	
	ШаблонНавигационнойСсылки = "e1cib/data/РегистрСведений.ПубликуемыеНавигационныеСсылки?Идентификатор=%1";
	
	Возврат СтрШаблон(ШаблонНавигационнойСсылки, Идентификатор);
	
КонецФункции

Функция Совпадают(Параметры1, Параметры2)
	
	Если ЗначениеЗаполнено(Параметры1) <> ЗначениеЗаполнено(Параметры2) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры1) И Не ЗначениеЗаполнено(Параметры2) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ДанныеСовпадают(Параметры1, Параметры2);
	
КонецФункции

Функция ХешПараметровФормы(ПараметрыФормы)
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		Возврат 0;
	КонецЕсли;
	
	ПараметрыФормыДляХеширования = СтруктураДляХеширования(ПараметрыФормы);
	ЗначениеXMLДляХеширования = ОбщегоНазначения.ЗначениеВСтрокуXML(ПараметрыФормыДляХеширования);
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.CRC32);
	Хеширование.Добавить(ЗначениеXMLДляХеширования);
	Возврат Хеширование.ХешСумма;
	
КонецФункции

Функция СтруктураДляХеширования(ПараметрыФормы)
	
	// Порядок полей XML от структуры зависит от того, в каком порядке добавлялись
	// значения в структуру. Если сначала в структуру добавлено значение Организация,
	// а потом Период, то в значении XML также будет сначала поле Организация, а потом поле Период.
	// Так как нам важно, что бы совпадали значения полей структуры, и не важно, в каком порядке
	// они добавлялись в нее, то для хеширования создадим новую структуру, добавив в нее
	// значения в алфавитном порядке.
	
	СписокДляСортировки = Новый СписокЗначений;
	Для Каждого ПараметрФормы Из ПараметрыФормы Цикл
		СписокДляСортировки.Добавить(ПараметрФормы.Значение, ПараметрФормы.Ключ);
	КонецЦикла;
	СписокДляСортировки.СортироватьПоПредставлению();
	
	СтруктураДляХеширования = Новый Структура;
	Для Каждого ЭлементСписка Из СписокДляСортировки Цикл
		СтруктураДляХеширования.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	
	Возврат СтруктураДляХеширования;
	
КонецФункции

#КонецОбласти

#КонецЕсли