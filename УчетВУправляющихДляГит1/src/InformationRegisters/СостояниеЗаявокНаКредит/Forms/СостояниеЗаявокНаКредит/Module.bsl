
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заявки создаются всегда по головной организации вместе со всеми ее обособленными подразделениями.
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ОсновнаяГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ОсновнаяОрганизация);

	ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтотОбъект, , , ОсновнаяГоловнаяОрганизация);
	
	ОтборыПоОрганизации = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, "Организация");
	Если ОтборыПоОрганизации.Количество() > 0 И ОтборыПоОрганизации[0].Использование Тогда
		ОтборОрганизация = ОтборыПоОрганизации[0].ПравоеЗначение;
	Иначе	
		ОтборОрганизация = ОсновнаяГоловнаяОрганизация;
	КонецЕсли;
	
	// Если сервис пока не работает в регионе основной организации, пытаемся найти
	// и подставить организацию, в регионе которой сервис работает.
	ЗаявкиНаКредит.ПроверитьРегионОрганизации(ОтборОрганизация);
	
	ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");

	ЕстьПравоИзмененияЗаявок = ПравоДоступа("Изменение", Метаданные.Документы.ЗаявкаНаКредит);
	
	Элементы.Создать.Доступность                      = ЕстьПравоИзмененияЗаявок;
	Элементы.СписокКонтекстноеМенюСоздать.Доступность = ЕстьПравоИзмененияЗаявок;
	Элементы.ОбновитьСостояниеЗаявок.Доступность      = ЕстьПравоИзмененияЗаявок;
	
	УстановитьУсловноеОформление();
	
	УстановитьБаннерПолученыОдобренияОтБанков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленоСостояниеЗаявки" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			ОтборОрганизация = Параметр.Организация;
			ОтборОрганизацияПриИзменении(Неопределено);
			
			Элементы.Список.ТекущаяСтрока = ЗаявкиНаКредитВызовСервера.КлючЗаписиСостоянияЗаявки(Параметр);
		   
		Иначе
			
			Элементы.Список.Обновить();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СервисПоКредитам_НовыеСообщенияОтБанков" Тогда
		
		УстановитьБаннерПолученыОдобренияОтБанков();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСостояниеЗаявок(Команда)
	
	ДлительнаяОперация = ЗапуститьУниверсальныйОбменСБанкамиПоСервису();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьСостояниеЗаявокЗавершение", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьСообщения(Команда)
	
	ПараметрыРасшифровки = УниверсальныйОбменСБанкамиКлиент.ПараметрыРасшифроватьНерасшифрованныеТранзакции();
	ПараметрыРасшифровки.Сервис = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаКредит");
	ПараметрыРасшифровки.ТранзакцииДляРасшифровки = НерасшифрованныеТранзакции.ВыгрузитьЗначения();
	Если ОтборОрганизацияИспользование Тогда
		ПараметрыРасшифровки.Организация = ОтборОрганизация;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("РасшифроватьСообщенияЗавершение", ЭтотОбъект);
	УниверсальныйОбменСБанкамиКлиент.РасшифроватьНерасшифрованныеТранзакции(ОповещениеОЗавершении, ПараметрыРасшифровки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
		
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	
	ПриДобавленииСтрокиСписка();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПриВыбореСтрокиСписка();

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;

	Если Элементы.Создать.Доступность И Не Копирование Тогда
		ПриДобавленииСтрокиСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	ПриВыбореСтрокиСписка(); 

КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаКредит.Черновик") Тогда
	
		ПредставлениеЗаявки = СтрШаблон(НСтр("ru = 'Заявка на кредит %1 на %2 от %3'"), 
			ЗаявкиНаКредитКлиентСервер.ПредставлениеСуммыКредита(ТекущиеДанные.СуммаЗаявки),
			ЗаявкиНаКредитКлиентСервер.ПредставлениеСрокаКредита(ТекущиеДанные.СрокЗаявки),
			Формат(ТекущиеДанные.ДатаИзменения, "ДЛФ=D"));
	
		Если ТекущиеДанные.ПометкаУдаления Тогда
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"), ПредставлениеЗаявки);
		Иначе
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'"), ПредставлениеЗаявки);
		КонецЕсли; 
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СписокПередУдалениемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	
	Иначе
		// Заявка уже была ранее отправлена хотя бы в какой-то банк, ее не даем удалить.
		ТекстСообщения = НСтр("ru = 'Заявка отправлена в банк.
									|Удалить ее невозможно.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	УстановитьПометкуУдаления(ТекущиеДанные.ЗаявкаНаКредит, НЕ ТекущиеДанные.ПометкаУдаления);
	
	// Обновляем форму списка.
	Элементы.Список.Обновить();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// Отбираем заявки, которые находятся в состоянии Черновик и для которых не указан конкретный банк получатель,
	// чтобы для них показывать количество банков.
	ЗаявкиЧерновики = Новый Массив;

	Для каждого СтрокаЗаявки Из Строки Цикл
		
		ТекущиеДанные = СтрокаЗаявки.Значение.Данные;
		
		Если ТекущиеДанные.Состояние = Перечисления.СостоянияЗаявокНаКредит.Черновик
			И НЕ ЗначениеЗаполнено(ТекущиеДанные.Банк) Тогда
			ЗаявкиЧерновики.Добавить(ТекущиеДанные.ЗаявкаНаКредит);
		КонецЕсли;
				
		ОписаниеСуммы = ЗаявкиНаКредитКлиентСервер.ПредставлениеСуммыКредита(ТекущиеДанные.СуммаЗаявки);
		СтрокаЗаявки.Значение.Оформление["СуммаЗаявки"].УстановитьЗначениеПараметра("Текст", ОписаниеСуммы);
		
		ОписаниеСрока = ЗаявкиНаКредитКлиентСервер.ПредставлениеСрокаКредита(ТекущиеДанные.СрокЗаявки);
		СтрокаЗаявки.Значение.Оформление["СрокЗаявки"].УстановитьЗначениеПараметра("Текст", ОписаниеСрока);
		
		Если ЗначениеЗаполнено(ТекущиеДанные.СуммаМакс) Тогда
			ОписаниеСуммы = ЗаявкиНаКредитКлиентСервер.ПредставлениеСуммыКредита(ТекущиеДанные.СуммаМакс);
			СтрокаЗаявки.Значение.Оформление["СуммаМакс"].УстановитьЗначениеПараметра("Текст", ОписаниеСуммы);
		КонецЕсли;	
			
		Если ЗначениеЗаполнено(ТекущиеДанные.СрокМакс) Тогда
			ОписаниеСрока = ЗаявкиНаКредитКлиентСервер.ПредставлениеСрокаКредита(ТекущиеДанные.СрокМакс);
			СтрокаЗаявки.Значение.Оформление["СрокМакс"].УстановитьЗначениеПараметра("Текст", ОписаниеСрока);
		КонецЕсли;
		
	КонецЦикла; 

	Если НЕ ЗначениеЗаполнено(ЗаявкиЧерновики) Тогда
		// Нет заявок в состоянии Черновик, поэтому больше обновлять нечего.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкиЧерновики", ЗаявкиЧерновики);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧБанки.Ссылка,
	|	КОЛИЧЕСТВО(*) КАК КоличествоБанков
	|ИЗ
	|	Документ.ЗаявкаНаКредит.Банки КАК ТЧБанки
	|ГДЕ
	|	ТЧБанки.Ссылка В (&ЗаявкиЧерновики)
	|СГРУППИРОВАТЬ ПО
	|	ТЧБанки.Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	БанкиПолучатели = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	БанкиПолучатели.Индексы.Добавить("Ссылка");
	
	Для каждого СтрокаЗаявки Из Строки Цикл
		
		ТекущиеДанные = СтрокаЗаявки.Значение.Данные;
		
		Если ТекущиеДанные.Состояние <> Перечисления.СостоянияЗаявокНаКредит.Черновик Тогда
			Продолжить;
		КонецЕсли;
		
		СведенияОЗаявке = БанкиПолучатели.Найти(ТекущиеДанные.ЗаявкаНаКредит, "Ссылка");
		Если СведенияОЗаявке = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если СведенияОЗаявке.КоличествоБанков > 1 Тогда
			СтрокаЗаявки.Значение.Оформление["Банк"].УстановитьЗначениеПараметра("Текст", СтрокаСЧислом(
				Нстр("ru = '; %1 банк; ; %1 банка; %1 банков; %1 банка'"),
				СведенияОЗаявке.КоличествоБанков,
				ВидЧисловогоЗначения.Количественное,
				"L=ru"));
		КонецЕсли;		
		
	КонецЦикла;

	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриДобавленииСтрокиСписка()
	
	КлючеваяОперация = "СозданиеФормыЗаявкаНаКредит";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);

	ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	
	ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ЗаявкаНаКредит.ФормаОбъекта", ПараметрыСоздания, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтрокиСписка()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ВыбраннаяСтрока = Элементы.Список.ТекущаяСтрока;
	
	Если ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокНаКредит.Черновик") Тогда

		КлючеваяОперация = "ОткрытиеФормыЗаявкаНаКредит";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
		ОткрытьФорму("Документ.ЗаявкаНаКредит.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.ЗаявкаНаКредит));

	ИначеЕсли ТекущиеДанные.ТребуетсяРасшифровка Тогда
		Если ЕстьПравоИзмененияЗаявок Тогда
			ОбработкаОкончанияРасшифровки = Новый ОписаниеОповещения(
				"ПослеРасшифровкиСообщения", 
				ЗаявкиНаКредитКлиент, 
				Новый Структура("КлючЗаписи, Банк", ВыбраннаяСтрока, ТекущиеДанные.Банк));

			УниверсальныйОбменСБанкамиКлиент.РасшифроватьДанныеТранзакции(ОбработкаОкончанияРасшифровки, ТекущиеДанные.Транзакция);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Это сообщение от банка требуется сначала расшифровать, обратитесь к администратору.'"));
		КонецЕсли;
	Иначе	
		ОткрытьФорму("РегистрСведений.СостояниеЗаявокНаКредит.Форма.ИнформацияПоЗаявкеНаКредит", Новый Структура("Ключ", ВыбраннаяСтрока));
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
		
	// ЦВЕТА СОСТОЯНИЙ
		
	// "Одобрено", "КредитЗапрошен", "Готово" - зеленый
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Состояние");
		
	СписокСтатусовОдобрено = Новый СписокЗначений;
	СписокСтатусовОдобрено.Добавить(Перечисления.СостоянияЗаявокНаКредит.Одобрено);
	СписокСтатусовОдобрено.Добавить(Перечисления.СостоянияЗаявокНаКредит.КредитЗапрошен);
	СписокСтатусовОдобрено.Добавить(Перечисления.СостоянияЗаявокНаКредит.Готово);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Состояние", ВидСравненияКомпоновкиДанных.ВСписке, СписокСтатусовОдобрено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЗаявкиНаКредит.ЦветСостояния(Перечисления.СостоянияЗаявокНаКредит.Одобрено));
	
	// "Ошибка" - красный
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Состояние");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.ЕстьОшибки", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОшибкиОтправкиБРО);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Ошибка'"));
	
	// "Истек срок" - вся строка серая
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Состояние");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.ИстекСрок", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНеподдерживаемойОтправкиБРО);
	
	// НЕ РАСШИФРОВАННЫЕ СООБЩЕНИЯ
	
	// Выделяем всю строку жирным
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Состояние");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Новое", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.Список.Шрифт,,, Истина));
		
	// Если одобренные условия зашифрованы, то вместо текста выводим знаки "*"
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Ставка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммаМин");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммаМакс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокМин");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокМакс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокДействия");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.ТребуетсяРасшифровка", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Состояние", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СостоянияЗаявокНаКредит.Одобрено);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "* * * * *");
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьУниверсальныйОбменСБанкамиПоСервису()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Запуск универсального обмена с банками'");
	
	ИмяПроцедуры = "ЗаявкиНаКредит.ЗапуститьУниверсальныйОбменСБанкамиПоСервисуВФоне";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, Новый Структура, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСостояниеЗаявокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") 
		ИЛИ НЕ Результат.Свойство("Статус") Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
	УстановитьБаннерПолученыОдобренияОтБанков();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПометкуУдаления(Знач ЗаявкаНаКредит, Знач ПометкаУдаления)

	Объект = ЗаявкаНаКредит.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.УстановитьПометкуУдаления(ПометкаУдаления);

КонецПроцедуры

#Область БаннерПолученыОдобренияБанков

&НаСервере
Процедура УстановитьБаннерПолученыОдобренияОтБанков()
	
	Если НЕ ЕстьПравоИзмененияЗаявок Тогда
		// При отсутствии прав на редактирование не показываем кнопку для расшифровки.
		Возврат;
	КонецЕсли;

	// Нерасшифрованные транзакции.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостояниеЗаявокНаКредит.Транзакция КАК Транзакция
	|ИЗ
	|	РегистрСведений.СостояниеЗаявокНаКредит КАК СостояниеЗаявокНаКредит
	|ГДЕ
	|	СостояниеЗаявокНаКредит.ТребуетсяРасшифровка = ИСТИНА
	|	И СостояниеЗаявокНаКредит.Организация = &Организация";
	
	Если Параметры.Свойство("Организация")
		И ТипЗнч(Параметры.Организация) = Тип("СправочникСсылка.Организации") Тогда
		Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеЗаявокНаКредит.Организация = &Организация", "ИСТИНА");
	КонецЕсли;
	
	НерасшифрованныеТранзакции.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Транзакция"));
	
	// Количество банков, одобрения которых не расшифрованы.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостояниеЗаявокНаКредит.Банк КАК Банк
	|ИЗ
	|	РегистрСведений.СостояниеЗаявокНаКредит КАК СостояниеЗаявокНаКредит
	|ГДЕ
	|	СостояниеЗаявокНаКредит.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаКредит.Одобрено)
	|	И СостояниеЗаявокНаКредит.ТребуетсяРасшифровка = ИСТИНА
	|	И СостояниеЗаявокНаКредит.Организация = &Организация";
	
	Если Параметры.Свойство("Организация")
		И ТипЗнч(Параметры.Организация) = Тип("СправочникСсылка.Организации") Тогда
		Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеЗаявокНаКредит.Организация = &Организация", "ИСТИНА");
	КонецЕсли;
	
	КоличествоБанковСНерасшифрованнымиОдобрениями = Запрос.Выполнить().Выбрать().Количество();
	
	// Управление видимостью баннера.
	Элементы.ГруппаПолученыСообщенияОтБанков.Видимость = КоличествоБанковСНерасшифрованнымиОдобрениями <> 0;
	
	Шаблон = НСтр("ru = 'Получено одобрение от %1. Чтобы увидеть подробности, расшифруйте сообщения.'");
	Подстрока = СтрокаСЧислом(";%1 банка;; %1 банков;%1 банков;%1 банков",
			КоличествоБанковСНерасшифрованнымиОдобрениями,
			ВидЧисловогоЗначения.Количественное, "L=ru");
	Элементы.ПолученыСообщенияОтБанковТекст.Заголовок = СтрШаблон(Шаблон, Подстрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьСообщенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьБаннерПолученыОдобренияОтБанков();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
