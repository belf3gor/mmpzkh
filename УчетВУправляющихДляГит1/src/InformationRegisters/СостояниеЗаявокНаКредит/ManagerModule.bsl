#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура - обрабочик события получения сообщения от банка по заявке на кредит
//
// Параметры:
//  ЗаявкаНаКредит  - ДокументСсылка.ЗаявкаНаКредит - заявка, к которой относится сообщение от банка
//  РеквизитыТранзакции - структура - см. УниверсальныйОбменСБанками.РеквизитыТранзакции()
//
Процедура ОбновитьСостояниеЗаявкиПриПолученииСообщения(ЗаявкаНаКредит, РеквизитыТранзакции) Экспорт 
	
	Запись = ЗаписьСостоянияЗаявки(ЗаявкаНаКредит, РеквизитыТранзакции.Организация, РеквизитыТранзакции.Банк);
	
	Запись.ЕстьОшибки 			= Ложь;
	Запись.ТребуетсяРасшифровка = РеквизитыТранзакции.ТребуетРасшифровки;
	Запись.Новое 				= Истина;
	Запись.Транзакция 			= РеквизитыТранзакции.Транзакция;	
	
	НовоеСостояние = Запись.Состояние;
	
	Если РеквизитыТранзакции.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ИзвещениеОПолученииБанкомЗаявки Тогда
		НовоеСостояние = Перечисления.СостоянияЗаявокНаКредит.ОжидаетРешения;
	ИначеЕсли РеквизитыТранзакции.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ПоложительноеКредитноеРешение Тогда
		НовоеСостояние = Перечисления.СостоянияЗаявокНаКредит.Одобрено;
	ИначеЕсли РеквизитыТранзакции.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ОтрицательноеКредитноеРешение Тогда
		НовоеСостояние = Перечисления.СостоянияЗаявокНаКредит.Отказано;
	ИначеЕсли РеквизитыТранзакции.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ИзвещениеОПолученииБанкомАкцептаЗаемщика Тогда
		НовоеСостояние = Перечисления.СостоянияЗаявокНаКредит.Готово;
	ИначеЕсли РеквизитыТранзакции.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.Ошибка Тогда
		Запись.ЕстьОшибки = Истина;
	КонецЕсли;	
	
	Если Запись.Состояние <> НовоеСостояние И НЕ ДопустимоеИзменениеСостояния(НовоеСостояние, Запись.Состояние) Тогда
		ТекстСообщения = НСтр("ru='Пропущено сообщение об изменении состояния ""%1"", банк ""%2"". Прежнее состояние (%3) не может быть изменено на новое (%4)'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Запись.ЗаявкаНаКредит, Запись.Банк, Запись.Состояние, НовоеСостояние);
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Заявки на кредит'"), 
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ЗаявкаНаКредит, 
			Запись.ЗаявкаНаКредит,
			ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	Запись.Состояние = НовоеСостояние;
	
	// Если расшифровка не требуется, то сразу читаем подробности ответа из файла сообщения.
	Если НЕ Запись.ТребуетсяРасшифровка Тогда
		ПрочитатьПодробностиОтвета(Запись, РеквизитыТранзакции);
	КонецЕсли;	
	
	УстановитьСрокАктуальностиЗаписи(Запись);
	Запись.Записать();
	
КонецПроцедуры	

// Процедура - обрабочик события расшифровки сообщения от банка по заявке на кредит
//
// Параметры:
//  ЗаявкаНаКредит  - ДокументСсылка.ЗаявкаНаКредит - заявка, к которой относится сообщение от банка
//  РеквизитыТранзакции - структура - см. УниверсальныйОбменСБанками.РеквизитыТранзакции()
//
Процедура ОбновитьСостояниеЗаявкиПриРасшифровкеСообщения(ЗаявкаНаКредит, РеквизитыТранзакции) Экспорт 
	
	Запись = ЗаписьСостоянияЗаявки(ЗаявкаНаКредит, РеквизитыТранзакции.Организация, РеквизитыТранзакции.Банк);
	
	ПрочитатьПодробностиОтвета(Запись, РеквизитыТранзакции);
	
	Запись.ТребуетсяРасшифровка = Ложь;
	УстановитьСрокАктуальностиЗаписи(Запись);
	Запись.Записать();
	
КонецПроцедуры	

// Процедура - обрабочик события отправки сообщения банку по заявке на кредит
//
// Параметры:
//  ЗаявкаНаКредит  - ДокументСсылка.ЗаявкаНаКредит - заявка, к которой относится сообщение банку
//  РеквизитыТранзакции - структура - см. УниверсальныйОбменСБанками.РеквизитыТранзакции()
//
Процедура ОбновитьСостояниеЗаявкиПриОтправкеСообщения(ЗаявкаНаКредит, РеквизитыТранзакции) Экспорт 
	
	// Текущая процедура (событие) будет вызвана в случае успешной отправки сообщения (транзакции) в каждый банк.
	// При первой успешной отправке заявки на кредит (т.е. если дошли до этого места) по текущему банку установим статус успешной отправки (Отправлено),
	// а по остальным банкам запишем начальный статус (НеОтправлено) на случай, если далее что-то сломается, и отправка не выполнится.
	// В дальнейшем по мере успешной отправки заявки в остальные банки состояние отправки в эти банки будет актуализироваться - см. ниже. 
	Если РеквизитыТранзакции.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ЗаявкаНаКредит 
		И НЕ ЗаявкаОтправлена(ЗаявкаНаКредит) Тогда
		ЗаписатьНачальноеСостояниеОтправки(ЗаявкаНаКредит, РеквизитыТранзакции);
		Возврат;
	КонецЕсли;	
	
	Запись = ЗаписьСостоянияЗаявки(ЗаявкаНаКредит, РеквизитыТранзакции.Организация, РеквизитыТранзакции.Банк);
	
	Если РеквизитыТранзакции.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ЗаявкаНаКредит Тогда
		Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.Отправлено;
	ИначеЕсли РеквизитыТранзакции.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.АкцептЗаемщика Тогда
		Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.КредитЗапрошен;
	КонецЕсли;	
	
	Запись.Транзакция = РеквизитыТранзакции.Транзакция;	
	
	УстановитьСрокАктуальностиЗаписи(Запись);
	
	Запись.Записать();
	
КонецПроцедуры	

// Записывает начальное состояние заявки на кредит в таблицу состояний,
// если еще не выполнялась ее отправка в банки
//
// Параметры:
//  ЗаявкаНаКредит  - ДокументСсылка.ЗаявкаНаКредит - заявка, по которой нужно записать состояние
//
Процедура УстановитьСостояниеНеотправленнойЗаявки(ЗаявкаНаКредит) Экспорт 
	
	// Если по заявке уже отправлены сообщения в банки, то состояние не меняем 
	Если ЗаявкаОтправлена(ЗаявкаНаКредит) Тогда
		Возврат;
	КонецЕсли;	
	
	СостоянияЗаявок = РегистрыСведений.СостояниеЗаявокНаКредит.СоздатьНаборЗаписей();
	СостоянияЗаявок.Отбор.ЗаявкаНаКредит.Установить(ЗаявкаНаКредит);
	СостоянияЗаявок.Прочитать();
	
	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаявкаНаКредит, "Организация, СуммаДокумента, СрокКредита, ПометкаУдаления");
	ВыбранныеБанки = Документы.ЗаявкаНаКредит.ВыбранныеБанки(ЗаявкаНаКредит);
	
	Если СостоянияЗаявок.Количество() = 0 Тогда
		Запись = СостоянияЗаявок.Добавить();
	Иначе
		Запись = СостоянияЗаявок[0];
	КонецЕсли;
	Запись.ЗаявкаНаКредит = ЗаявкаНаКредит;
	Запись.Организация = РеквизитыЗаявки.Организация;
	
	Если ВыбранныеБанки.Количество() = 1 Тогда
		Запись.Банк = ЗаявкаНаКредит.Банки[0].Банк;
	КонецЕсли;	
	
	Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.Черновик;
	
	Запись.СуммаЗаявки = РеквизитыЗаявки.СуммаДокумента;
	Запись.СрокЗаявки = РеквизитыЗаявки.СрокКредита;
		
	Если Запись.ПометкаУдаления <> РеквизитыЗаявки.ПометкаУдаления Тогда
		// Если меняется пометка удаления у заявки, то не меняем ее дату.
		Запись.ПометкаУдаления = РеквизитыЗаявки.ПометкаУдаления;
	Иначе
		// Иначе фиксируем дату изменения и пересчитываем срок актуальности.
		Запись.ДатаИзменения = ТекущаяДатаСеанса();
		УстановитьСрокАктуальностиЗаписи(Запись);
		Запись.ПометкаУдаления = РеквизитыЗаявки.ПометкаУдаления;
	КонецЕсли;

	СостоянияЗаявок.Записать();
	
КонецПроцедуры	

// Находит актуальную запись по заявке на кредит и добавляет в нее описание ошибки обмена данными с банком.
// Учитывает в том числе случай, когда заявка находится в состоянии "Черновик", т.е. еще не была отправлена ни в один банк.
//
// Параметры:
//  ЗаявкаНаКредит		 - ДокументСсылка.ЗаявкаНаКредит - заявка, к которой относится ошибка  
//  РеквизитыТранзакции  - структура - см. УниверсальныйОбменСБанками.РеквизитыТранзакции()
//  ОписаниеОшибки		 - Строка - описание ошибки, возникшей при обмене данными по заявке на кредит с банком
//
Процедура ЗаписатьОшибкуПоАктуальномуСостоянию(ЗаявкаНаКредит, РеквизитыТранзакции, ОписаниеОшибки) Экспорт 
	
	Банк = РеквизитыТранзакции.Банк;
	
	Если РеквизитыТранзакции.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ЗаявкаНаКредит Тогда
		
		// При начальной отправке заявки (ТипТранзакции = ЗаявкаНаКредит), состояние заявки может быть записано:
		// 	- одной записью без указания конкретного банка (если еще не было ни одной успешной отправки в какой-либо из банков),
		// 	- множеством записей - по 1 на каждый банк из заявки (если уже была хотя бы одна успешная транзакция отправки)
		// Поэтому сначала определим, куда именно (по какому банку) нужно записать ошибку.
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеЗаявокНаКредит.Организация КАК Организация,
		|	СостояниеЗаявокНаКредит.ЗаявкаНаКредит КАК ЗаявкаНаКредит,
		|	СостояниеЗаявокНаКредит.Банк КАК Банк
		|ИЗ
		|	РегистрСведений.СостояниеЗаявокНаКредит КАК СостояниеЗаявокНаКредит
		|ГДЕ
		|	СостояниеЗаявокНаКредит.Организация = &Организация
		|	И СостояниеЗаявокНаКредит.ЗаявкаНаКредит = &ЗаявкаНаКредит
		|	И СостояниеЗаявокНаКредит.Банк = &Банк
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеЗаявокНаКредит.Организация,
		|	СостояниеЗаявокНаКредит.ЗаявкаНаКредит,
		|	СостояниеЗаявокНаКредит.Банк
		|ИЗ
		|	РегистрСведений.СостояниеЗаявокНаКредит КАК СостояниеЗаявокНаКредит
		|ГДЕ
		|	СостояниеЗаявокНаКредит.Организация = &Организация
		|	И СостояниеЗаявокНаКредит.ЗаявкаНаКредит = &ЗаявкаНаКредит
		|	И СостояниеЗаявокНаКредит.Банк = ЗНАЧЕНИЕ(Справочник.БанкиУниверсальногоОбмена.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("Организация", РеквизитыТранзакции.Организация);
		Запрос.УстановитьПараметр("ЗаявкаНаКредит", ЗаявкаНаКредит);
		Запрос.УстановитьПараметр("Банк", РеквизитыТранзакции.Банк);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда 
			ВыборкаЗаписей = РезультатЗапроса.Выбрать();
			ВыборкаЗаписей.Следующий(); // в выборке 1 запись
			Банк = ВыборкаЗаписей.Банк;
		КонецЕсли;	
			
	КонецЕсли;	
	
	ЗаписатьОшибку(ЗаявкаНаКредит, РеквизитыТранзакции.Организация, Банк, ОписаниеОшибки);
		
КонецПроцедуры

// Находит запись по заявке на кредит в конкретный банк и добавляет в нее описание ошибки обмена данными.
// Отличается от ЗаписатьОшибкуПоАктуальномуСостоянию() тем, что ожидает наличие записи состояния заявки по конкретному банку 
// (т.е., заявка уже была ранее отправлена в банки).
//
// Параметры:
//  ЗаявкаНаКредит	 - ДокументСсылка.ЗаявкаНаКредит - заявка, к которой относится сообщение банку 
//  Организация		 - СправочникСсылка.Организации - организация-заявитель по заявке на кредит
//  Банк			 - СправочникСсылка.БанкиУниверсальногоОбмена - банк-получатель заявки на кредит
//  ОписаниеОшибки	 - Строка - описание ошибки, возникшей при обмене данными по заявке на кредит с банком
//
Процедура ЗаписатьОшибку(ЗаявкаНаКредит, Организация, Банк, ОписаниеОшибки) Экспорт 

	Запись = ЗаписьСостоянияЗаявки(ЗаявкаНаКредит, Организация, Банк);
			
	Запись.ЕстьОшибки = Истина;
	Запись.ОписаниеОшибки = ОписаниеОшибки;
	
	УстановитьСрокАктуальностиЗаписи(Запись);
	
	Запись.Записать();
	
КонецПроцедуры
 
// Помещает во временное хранилище транзакций обмена с банками файл акцепта
// и возвращает идентификатор отправки.
//
// Параметры:
//	ЗаявкаНаКредит - ДокументСсылка.ЗаякаНаКредит - Заполненная заявка.
//	Банки - Массив - Банки-получатели.
//	ЭтоЭлектроннаяПодписьВМоделиСервиса - Булево - Истина, если используется облачный сертификат.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* Идентификатор - Строка - Уникальный идентификатор, под которым во временном хранилище транзакций обмена помещены данные.
//		* ОписаниеОшибки - Строка - Текст ошибки, если были ошибки в процессе обмена.
// 
Функция ПодготовитьАкцептДляОтправки(ЗаявкаНаКредит, Банк, ЭтоЭлектроннаяПодписьВМоделиСервиса) Экспорт
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();

	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ТаблицаСообщений");
	Результат.Вставить("ИдентификаторВременногоХранилищаТранзакций", Строка(Новый УникальныйИдентификатор()));
	
	СостояниеПрогресса = ЗаявкиНаКредит.СостояниеПрогрессаПодписанияИОтправки();
	СостояниеПрогресса.ДополнительныеПараметры.ИмяШага = "подготовка";
	СостояниеПрогресса.КоличествоДействий = 2; // 1 (по умолчанию) + 1 действие (подготовка акцепта)
	СостояниеПрогресса.ВыполненоДействий = 1; // чтобы индикатор сразу был на 50%
	ДлительныеОперации.СообщитьПрогресс(СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
		НСтр("ru = 'Подготовка акцепта по заявке...'"),
		СостояниеПрогресса.ДополнительныеПараметры);
	
	СведенияОбАкцепте = СведенияОбАкцепте(ЗаявкаНаКредит, Банк);
	
	Вложение = УниверсальныйОбменСБанками.ПараметрыПомещенияВЖурналОперацийСФайлами();
	Вложение.Сервис           = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит;
	Вложение.Организация      = СведенияОбАкцепте.ДанныеЗаявки.Организация;
	Вложение.Предмет          = ЗаявкаНаКредит;
	Вложение.Идентификатор    = Результат.ИдентификаторВременногоХранилищаТранзакций;
	Вложение.ИсходноеИмяФайла = ЗаявкиНаКредит.ИмяФайлаДляКонтейнера(
		Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.АкцептЗаемщика,
		Перечисления.ТипыСодержимогоФайловОбменаСБанками.xml,
		СведенияОбАкцепте);
	Вложение.ИсходныеДанные   = ВыгрузитьАкцепт(СведенияОбАкцепте);
	Вложение.ТипСодержимого   = Перечисления.ТипыСодержимогоФайловОбменаСБанками.xml;
	Вложение.ТипДокумента     = Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.АкцептЗаемщика;
	Вложение.БанкиПолучатели.Добавить(Банк);
	Вложение.Зашифровать      = Истина;
	Вложение.Подписать        = Истина;
	Вложение.Сжать            = Истина;
	Вложение.ЭтоЭлектроннаяПодписьВМоделиСервиса  = ЭтоЭлектроннаяПодписьВМоделиСервиса;
	
	РезультатОперации = УниверсальныйОбменСБанками.ПоместитьВЖурналОперацияСФайлами(Вложение);
	Если НЕ РезультатОперации.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	СостояниеПрогресса.ВыполненоДействий = 2;
	ДлительныеОперации.СообщитьПрогресс(СостояниеПрогресса.ВыполненоДействий / СостояниеПрогресса.КоличествоДействий * 100,
		НСтр("ru = 'Акцепт подготовлен'"),
		СостояниеПрогресса.ДополнительныеПараметры);
	
	Результат.Выполнено = Истина;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ПодготовкаФайловДляОтправкиАкцептаЗаявкаНаКредит", ВремяНачала);

	Возврат Результат;

КонецФункции

// Возвращает признак того, была ли заявка отправлена в банки.
//
// Параметры:
//	ЗаявкаНаКредит - ДокументСсылка.ЗаявкаНаКредит - Ссылка на заявку.
//
// Возвращаемое значение:
//	Булево - Истина, если заявка отправлена, иначе Ложь.
//
Функция ЗаявкаОтправлена(ЗаявкаНаКредит) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ЗаявкаНаКредит) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Определяем, есть ли по заявке записи о ее отправке в банки.
	// При успешной отправке заявки хотя бы в 1 банк состояние заявки далее отслеживается отдельно по каждому банку, 
	// но при этом ни по какому банку не будет состояния Черновик (см. ОбновитьСостояниеЗаявкиПриОтправкеСообщения()).
	// Поэтому по наличию хотя бы 1 записи о состоянии, отличном от Черновик, можно гарантированно определить, что заявка уже отправлена.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаявкаНаКредитБанки.Банк КАК Банк
		|ИЗ
		|	Документ.ЗаявкаНаКредит.Банки КАК ЗаявкаНаКредитБанки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗаявокНаКредит КАК СостояниеЗаявокНаКредит
		|		ПО ЗаявкаНаКредитБанки.Ссылка = СостояниеЗаявокНаКредит.ЗаявкаНаКредит
		|			И ЗаявкаНаКредитБанки.Банк = СостояниеЗаявокНаКредит.Банк
		|ГДЕ
		|	ЗаявкаНаКредитБанки.Ссылка = &ЗаявкаНаКредит
		|	И НЕ СостояниеЗаявокНаКредит.Состояние ЕСТЬ NULL
		|	И СостояниеЗаявокНаКредит.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаКредит.Черновик)";
	
	Запрос.УстановитьПараметр("ЗаявкаНаКредит", ЗаявкаНаКредит);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции	

// Получает массив непрочитанных сообщений от банков по заявкам на кредит текущего пользователя
//
// Параметры:
//  ПовторятьЗапрос - Булево - определяет, стоит ли ожидать новые сообщения от банков 
// 
// Возвращаемое значение:
//   - Массив - массив структур, содержащих описание нового состояния заявки на кредит
//   			или пустой массив, если отсутствуют права на просмотр состояний заявок
//
Функция НовыеСообщенияОтБанков(ПовторятьЗапрос) Экспорт 
	
	Если НЕ ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.СостояниеЗаявокНаКредит) Тогда
		ПовторятьЗапрос = Ложь;
		Возврат Новый Массив;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостояниеЗаявокНаКредит.Организация КАК Организация,
	|	СостояниеЗаявокНаКредит.ЗаявкаНаКредит КАК ЗаявкаНаКредит,
	|	СостояниеЗаявокНаКредит.Банк КАК Банк,
	|	СостояниеЗаявокНаКредит.Состояние КАК Состояние,
	|	СостояниеЗаявокНаКредит.ЕстьОшибки КАК ЕстьОшибки
	|ИЗ
	|	РегистрСведений.СостояниеЗаявокНаКредит КАК СостояниеЗаявокНаКредит
	|ГДЕ
	|	СостояниеЗаявокНаКредит.Новое
	|	И СостояниеЗаявокНаКредит.СрокАктуальности >= &ТекущаяДата
	|	И СостояниеЗаявокНаКредит.ЗаявкаНаКредит.Ответственный = &Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостояниеЗаявокНаКредит.ЗаявкаНаКредит КАК ЗаявкаНаКредит
	|ИЗ
	|	РегистрСведений.СостояниеЗаявокНаКредит КАК СостояниеЗаявокНаКредит
	|ГДЕ
	|	СостояниеЗаявокНаКредит.ЗаявкаНаКредит.Ответственный = &Ответственный
	|	И СостояниеЗаявокНаКредит.СрокАктуальности >= &ТекущаяДата
	|	И (СостояниеЗаявокНаКредит.Новое
	|		ИЛИ СостояниеЗаявокНаКредит.Состояние В (
	|				ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаКредит.Отправлено),
	|				ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаКредит.ОжидаетРешения),
	|				ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаКредит.КредитЗапрошен)))";
	
	Запрос.УстановитьПараметр("ТекущаяДата",   НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Ответственный", Пользователи.ТекущийПользователь());
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	НовыеСостояния = ПакетЗапросов[0].Выгрузить();
	
	// При отстуствии заявок, по которым хотя бы теоретически можно получить ответ от банка,
	// нет смысла постоянно проверять оповещения.
	ПовторятьЗапрос = НЕ ПакетЗапросов[1].Пустой(); 
		
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(НовыеСостояния);

КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаписьСостоянияЗаявки

Функция ЗаписьСостоянияЗаявки(ЗаявкаНаКредит, Организация, Банк)
	
	Запись = СоздатьМенеджерЗаписи();
	Запись.ЗаявкаНаКредит = ЗаявкаНаКредит;
	Запись.Организация = Организация;
	Запись.Банк = Банк;
	
	Запись.Прочитать();
			
	Если НЕ Запись.Выбран() Тогда
		Запись.ЗаявкаНаКредит = ЗаявкаНаКредит;
		Запись.Организация = Организация;
		Запись.Банк = Банк;
	КонецЕсли;	
	
	Запись.ДатаИзменения = ТекущаяДатаСеанса();
	
	Возврат Запись;
	
КонецФункции	
	
Процедура ЗаписатьНачальноеСостояниеОтправки(ЗаявкаНаКредит, РеквизитыТранзакции)
		
	БанкТекущейТранзакции = РеквизитыТранзакции.Банк;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаКредитБанки.Ссылка КАК ЗаявкаНаКредит,
		|	ЗаявкаНаКредитБанки.Ссылка.Организация КАК Организация,
		|	ЗаявкаНаКредитБанки.Банк КАК Банк,
		|	ВЫБОР
		|		КОГДА ЗаявкаНаКредитБанки.Банк = &БанкТекущейТранзакции
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаКредит.Отправлено)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаКредит.НеОтправлено)
		|	КОНЕЦ КАК Состояние,
		|	ЗаявкаНаКредитБанки.Ссылка.СуммаДокумента КАК СуммаЗаявки,
		|	ЗаявкаНаКредитБанки.Ссылка.СрокКредита КАК СрокЗаявки
		|ИЗ
		|	Документ.ЗаявкаНаКредит.Банки КАК ЗаявкаНаКредитБанки
		|ГДЕ
		|	ЗаявкаНаКредитБанки.Ссылка = &ЗаявкаНаКредит";
	
	Запрос.УстановитьПараметр("ЗаявкаНаКредит", ЗаявкаНаКредит);
	Запрос.УстановитьПараметр("БанкТекущейТранзакции", БанкТекущейТранзакции);
	
	ВыборкаПоБанкам = Запрос.Выполнить().Выбрать();
	
	СостоянияЗаявок = РегистрыСведений.СостояниеЗаявокНаКредит.СоздатьНаборЗаписей();
	СостоянияЗаявок.Отбор.ЗаявкаНаКредит.Установить(ЗаявкаНаКредит);
	
	Пока ВыборкаПоБанкам.Следующий() Цикл
		Запись = СостоянияЗаявок.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаПоБанкам);
		Запись.ДатаИзменения = ТекущаяДатаСеанса();
		УстановитьСрокАктуальностиЗаписи(Запись);
		
		Если Запись.Банк = БанкТекущейТранзакции Тогда
			// Запоминаем ссылку на последнюю транзакцию по заявке в конкретный банк.
			Запись.Транзакция = РеквизитыТранзакции.Транзакция;
		КонецЕсли;
	КонецЦикла;
	
	СостоянияЗаявок.Записать();
	
КонецПроцедуры

Процедура УстановитьСрокАктуальностиЗаписи(Запись)

	Если Запись.ЕстьОшибки Тогда
		// 7 дней с момента возникновения ошибки
		Запись.СрокАктуальности = Запись.ДатаИзменения + 7 * 24 * 3600;
	ИначеЕсли Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.Отправлено 
		ИЛИ Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.ОжидаетРешения Тогда	
		// 1 месяц с момента изменения состояния
		Запись.СрокАктуальности = ДобавитьМесяц(Запись.ДатаИзменения, 1);
	ИначеЕсли Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.Одобрено 
		ИЛИ Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.КредитЗапрошен 
		ИЛИ Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.Готово Тогда	
		
		// В течение указанного срока действия или 1 месяц с момента изменения состояния
		Если ЗначениеЗаполнено(Запись.СрокДействия) Тогда
			Запись.СрокАктуальности = Запись.СрокДействия;
		Иначе
			Запись.СрокАктуальности = ДобавитьМесяц(Запись.ДатаИзменения, 1);
		КонецЕсли;	
	ИначеЕсли Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.Отказано Тогда
		// 7 дней с момента получения ответа
		Запись.СрокАктуальности = Запись.ДатаИзменения + 7 * 24 * 3600;
	ИначеЕсли Запись.Состояние = Перечисления.СостоянияЗаявокНаКредит.Черновик Тогда
		// 7 дней с момента получения ответа
		Запись.СрокАктуальности = Запись.ДатаИзменения + 7 * 24 * 3600;
	КонецЕсли; 	
		
КонецПроцедуры

Функция ДопустимоеИзменениеСостояния(НовоеСостояние, ПрежнееСостояние)
	
	// Для каждого состояния определим порядковый номер.
	// Новое состояние допустимо, если его порядковый номер выше, чем у прежнего состояния.
	ОчередностьСостояний = Новый Соответствие;
	
	ОчередностьСостояний.Вставить(Перечисления.СостоянияЗаявокНаКредит.Черновик, 		1);
	ОчередностьСостояний.Вставить(Перечисления.СостоянияЗаявокНаКредит.НеОтправлено, 	2);
	ОчередностьСостояний.Вставить(Перечисления.СостоянияЗаявокНаКредит.Отправлено, 		3);
	ОчередностьСостояний.Вставить(Перечисления.СостоянияЗаявокНаКредит.ОжидаетРешения, 	4);
	ОчередностьСостояний.Вставить(Перечисления.СостоянияЗаявокНаКредит.Одобрено, 		5);
	ОчередностьСостояний.Вставить(Перечисления.СостоянияЗаявокНаКредит.КредитЗапрошен, 	6);
	ОчередностьСостояний.Вставить(Перечисления.СостоянияЗаявокНаКредит.Готово, 			7); // конец процесса
	ОчередностьСостояний.Вставить(Перечисления.СостоянияЗаявокНаКредит.Отказано, 		7); // конец процесса
	
	ПриоритетПрежнего = ОчередностьСостояний.Получить(ПрежнееСостояние);
	
	Если ПриоритетПрежнего = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПриоритетНового = ОчередностьСостояний.Получить(НовоеСостояние);
	
	Если ПриоритетНового = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПриоритетНового > ПриоритетПрежнего;  
	
КонецФункции	

#КонецОбласти

#Область ПодробностиРешения

Функция ХранилищеФайлаОтвета(РеквизитыТранзакции)

	СписокТиповДокументов = УниверсальныйОбменСБанками.ПолучитьСписокТиповДокументовТранзакции(
		Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит,
		РеквизитыТранзакции.ТипТранзакции);
		
	Если СписокТиповДокументов.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли;	
		
	ТаблицаВложений = УниверсальныйОбменСБанками.ПолучитьВложенияТранзакции(
		РеквизитыТранзакции.Транзакция,
		Новый Структура("Данные", Истина),
		Новый Структура("ТипДокумента", СписокТиповДокументов[0]));
		
	Если ТаблицаВложений.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли;	
		
	Возврат ТаблицаВложений[0].Данные; 

КонецФункции

Процедура ПрочитатьПодробностиОтвета(Запись, РеквизитыТранзакции)

	// Получаем хранилище значения с файлом, соответствующим типу транзакции
	ПодробностиОтветаХранилище = ХранилищеФайлаОтвета(РеквизитыТранзакции);
	
	Если ПодробностиОтветаХранилище = Неопределено Тогда
		Запись.ЕстьОшибки = Истина;
		Запись.ОписаниеОшибки = НСтр("ru='В сообщении банка отсутствует файл с подробностями.'");
		Возврат;
	КонецЕсли;	

	Запись.ЕстьОшибки = (РеквизитыТранзакции.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.Ошибка);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	
	Попытка
	
		// В хранилище находятся двоичные данные
		ПодробностиОтвета = ПодробностиОтветаХранилище.Получить();
		ПодробностиОтвета.Записать(ИмяФайла);
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			ТипУзла = ЧтениеXML.ТипУзла;
			ИмяУзла = ЧтениеXML.Имя;
			
			// ДОКУМЕНТ - непосредственно описание заявки.
			// В атрибутах этого узла содержится информация для идентификации заявки.
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента И ИмяУзла = "Документ" Тогда
				
				// Номер заявки, присвоенный банком
				РегистрационныйНомер = ЧтениеXML.ПолучитьАтрибут("РегистрационныйНомер");
				Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда
					Запись.РегистрационныйНомер = РегистрационныйНомер;
				КонецЕсли;	
			
			// ПРОДУКТ - основные параметры кредита.
			// Этот узел содержит сообщения следующих видов:
			//	- положительное кредитное решение
			//	- ответ банка на акцепт заемщика
			ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента И ИмяУзла = "Продукт" Тогда
				
				// Состав атрибутов в узле известен (конечен), но в конкретном сообщении может быть неполным (предполагаются необязательные атрибуты),
				// а также может отличаться для разных видов сообщения.
				// Заполним соответствие имен атрибутов данного узла и реквизитов регистра состояний заявок.
				// Соответствие содержит все возможные атрибуты, а фактическое их наличие в сообщении проверяется ниже.
				СловарьАтрибутовПродукта = Новый Соответствие;
				
				СловарьАтрибутовПродукта.Вставить("СрокДейств", 	 Новый Структура("ИмяРесурса, Тип", "СрокДействия", "Дата"));
				СловарьАтрибутовПродукта.Вставить("ПроцСт", 		 Новый Структура("ИмяРесурса, Тип", "Ставка", 		"Число"));
				СловарьАтрибутовПродукта.Вставить("МаксСрок", 		 Новый Структура("ИмяРесурса, Тип", "СрокМакс", 	"Число"));
				СловарьАтрибутовПродукта.Вставить("МинСрок", 		 Новый Структура("ИмяРесурса, Тип", "СрокМин", 		"Число"));
				СловарьАтрибутовПродукта.Вставить("МаксСум", 		 Новый Структура("ИмяРесурса, Тип", "СуммаМакс", 	"Число"));
				СловарьАтрибутовПродукта.Вставить("МинСум", 		 Новый Структура("ИмяРесурса, Тип", "СуммаМин", 	"Число"));
				СловарьАтрибутовПродукта.Вставить("СпособПогашения", Новый Структура("ИмяРесурса, Тип", "СпособРасчетаСуммыПлатежаПоКредиту",
																														"ПеречислениеСсылка.СпособыРасчетаСуммыПлатежаПоКредитамЗаймам"));
				
				Для каждого ОписаниеАтрибута Из СловарьАтрибутовПродукта Цикл
					
					ЗначениеАтрибута = ЧтениеXML.ПолучитьАтрибут(ОписаниеАтрибута.Ключ);
					Если НЕ ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
						Продолжить;
					КонецЕсли;	
					
					ИмяРесурса = ОписаниеАтрибута.Значение.ИмяРесурса;
					ТипСтрокой = ОписаниеАтрибута.Значение.Тип;
					
					// В формате обмена используется локальный формат даты - читаем его обособленно
					Если ТипСтрокой = "Дата" Тогда
						Запись[ИмяРесурса] = СтроковыеФункцииКлиентСервер.СтрокаВДату(ЗначениеАтрибута);
					ИначеЕсли ИмяРесурса = "СпособРасчетаСуммыПлатежаПоКредиту" Тогда
						// Способ расчета графика платежей.
						Если ЗначениеАтрибута = "1" Тогда
							Запись[ИмяРесурса] = Перечисления.СпособыРасчетаСуммыПлатежаПоКредитамЗаймам.ЕжемесячныйАннуитетныйПлатеж;
						Иначе
							Запись[ИмяРесурса] = Перечисления.СпособыРасчетаСуммыПлатежаПоКредитамЗаймам.Прочее;
						КонецЕсли;
					Иначе
						Запись[ИмяРесурса] = XMLЗначение(Тип(ТипСтрокой), ЗначениеАтрибута);
					КонецЕсли;	
				
				КонецЦикла; 
				
			// ДОПОЛНИТЕЛЬНЫЕ СВЕДЕНИЯ - Дополнительные сведения по кредитному решению.
			// Особенность этого узла в том, что количество доп сведений может быть любым, поэтому отдельно отслеживается начало узла, список доп сведений и окончание узла.
			// Этот узел может содержать сообщения следующих видов:
			//	- ответ банка о получении заявки
			//	- положительное кредитное решение
			//	- отрицательное кредитное решение
			//	- ответ банка на акцепт заемщика
			ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента И ИмяУзла = "ДопСвед" Тогда
				
				// В отрицательном кредитном решении здесь указана причина отказа.
				// Состав дополнительных сведений свободный. В каждом узле указан вид сведения и значение.
				// Поэтому сохраняем эти сведения в таблицу значений, а саму таблицу храним в записи регистра сведений в виде ХранилищеЗначения.
				// При получении ответа банка на кредитный акцепт заемщика дописываем дополнительные сведения, которых не было в начальном решении,
				// а те сведения, которые дублируются по виду сведений, обновляем.
				
				ДополнительныеСведения = НоваяТаблицаДополнительныхСведений();
				Если РеквизитыТранзакции.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ИзвещениеОПолученииБанкомАкцептаЗаемщика Тогда
					// В извещении о получении акцепта банк может прислать дополнительные комментарии,
					// которые необходимо объединить с теми, что были получены ранее вместе с одобрением.
					ПодробностиРешения = Запись.ПодробностиРешения.Получить();
					Если ТипЗнч(ПодробностиРешения) = Тип("ТаблицаЗначений") Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПодробностиРешения, ДополнительныеСведения);
					КонецЕсли;		
				КонецЕсли;	
				
					
			ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента И ИмяУзла = "Свед" Тогда
				// Отдельная запись о дополнительном сведении по кредиту.
				// Таблица дополнительных сведений инициализирована ранее.
				СтрокаСведений = Неопределено;
				ВидСведений    = ЧтениеXML.ПолучитьАтрибут("ВидСвед");

				Если ЗначениеЗаполнено(ВидСведений)
					И РеквизитыТранзакции.ТипТранзакции = Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.ИзвещениеОПолученииБанкомАкцептаЗаемщика Тогда
					// Чтобы не создавать повторы, поищем в предыдущих данных строку с таким же видом,
					// если найдем, то заменим в ней ранее присланное содержание на новое.
					СтрокаСведений = ДополнительныеСведения.Найти(ВидСведений, "ВидСведений");
				КонецЕсли;
				
				Если СтрокаСведений = Неопределено Тогда
					СтрокаСведений = ДополнительныеСведения.Добавить();
				КонецЕсли;
				СтрокаСведений.ВидСведений      = ВидСведений;
				СтрокаСведений.ЗначениеСведений = ЧтениеXML.ПолучитьАтрибут("Содерж");
						
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента И ИмяУзла = "ДопСвед" Тогда
				// Закончено чтение дополнительных сведений - нужно сохранить сведения в запись регистра сведений.
				Запись.ПодробностиРешения = Новый ХранилищеЗначения(ДополнительныеСведения);
				
			// ОПИСАНИЕ ОШИБКИ - Описание ошибок, возникших при обработке банком сообщения от заявителя.
			// Этот узел может содержать сообщения следующих видов:
			//	- ответ банка об ошибках обработки сообщения от заявителя
			ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента И ИмяУзла = "Ошибки" Тогда
				// Внутри узла может быть описано несколько ошибок.
				Ошибки 		   = Новый Массив;
				ОшибкиПодробно = Новый Массив;

			ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента И ИмяУзла = "Ошибка" Тогда
				// Отдельная запись об ошибке - дописываем к предыдущим.
				КодОшибки 				= ЧтениеXML.ПолучитьАтрибут("Код");
				ОписаниеОшибки 			= ЧтениеXML.ПолучитьАтрибут("Сообщение");
				ОписаниеОшибкиПодробное = ЧтениеXML.ПолучитьАтрибут("ПолноеОписание");
				
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Ошибки.Добавить(ОписаниеОшибки);
				КонецЕсли;
				
				ОшибкаПодробно = Новый Массив;
				Если ЗначениеЗаполнено(КодОшибки) Тогда
					ОшибкаПодробно.Добавить(СтрШаблон(НСтр("ru='ошибка %1:'"), КодОшибки));
				КонецЕсли;
				Если ЗначениеЗаполнено(ОписаниеОшибкиПодробное) Тогда
					ОшибкаПодробно.Добавить(ОписаниеОшибкиПодробное);
				КонецЕсли;
				Если ЗначениеЗаполнено(ОшибкаПодробно) Тогда
					ОшибкиПодробно.Добавить(СтрСоединить(ОшибкаПодробно, " "));
				КонецЕсли;
				
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента И ИмяУзла = "Ошибки" Тогда
				// Закончено чтение ошибок - нужно сохранить информацио об ошибках в запись регистра сведений.
				Запись.ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
				Запись.ОписаниеОшибкиПодробное 	= СтрСоединить(ОшибкиПодробно, Символы.ПС);
			КонецЕсли;	
			
		КонецЦикла;	
		
		ЧтениеXML.Закрыть();
		
	Исключение
	
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЗаявкиНаКредит.ПрочитатьПодробностиОтвета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			РеквизитыТранзакции.Транзакция,
			ПодробноеПредставлениеОшибки);
	
		Запись.ЕстьОшибки     = Истина;
		Запись.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Запись.ОписаниеОшибкиПодробное = ПодробноеПредставлениеОшибки;
			
	КонецПопытки;

	// Удаляем временные файлы.
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		// Регистрируем в журнале факт ошибки, но не прерываем общее выполнение.
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЗаявкиНаКредит.ПрочитатьПодробностиОтвета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			РеквизитыТранзакции.Транзакция,
			СтрШаблон(НСтр("ru = 'Ошибка при удалении временного файла %1: %2'"), ИмяФайла, ПодробноеПредставлениеОшибки));
	КонецПопытки;
		
КонецПроцедуры

Функция НоваяТаблицаДополнительныхСведений()

	ДополнительныеСведения = Новый ТаблицаЗначений;
	ДополнительныеСведения.Колонки.Добавить("ВидСведений",      ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДополнительныеСведения.Колонки.Добавить("ЗначениеСведений", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	Возврат ДополнительныеСведения;
	
КонецФункции
 
#КонецОбласти

#Область ПодготовкаАкцепта

// Возвращает структуру с подробной информацией из ИБ для выгрузки акцепта.
//
// Параметры:
//	ЗаявкаНаКредит - ДокументСсылка.ЗаявкаНаКредит - Заполненная заявка.
//	Банк - СправочникСсылка.БанкиУниверсальногоОбмена - Банк, в который отправляется акцепт по кредитному предложению.
//
// Возвращаемое значение:
//	Структура - содержит ключи:
//		* ДанныеЗаявки - Структура - Поля из документа Заявка на кредит.
//		* ДанныеБанка - Структура - Поля из справочника Банки универсального обмена
//		* ДанныеЗаемщика - Структура - Поля из справочника Организации
//		* ДанныеКредита - Структура - Поля из записи регистра сведений Состояние заявок на кредит
//
Функция СведенияОбАкцепте(ЗаявкаНаКредит, Банк)

	ОписаниеОшибки = НСтр("ru='При выгрузке акцепт произошла ошибка: %1'");
	
	Если НЕ ЗначениеЗаполнено(ЗаявкаНаКредит) Тогда
		ВызватьИсключение СтрШаблон(ОписаниеОшибки, НСтр("ru='Не указана заявка на кредит'"));
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		ВызватьИсключение СтрШаблон(ОписаниеОшибки, НСтр("ru='Не указан банк'"));
	КонецЕсли;
		
	Результат = Новый Структура();
	Результат.Вставить("ДанныеЗаявки");
	Результат.Вставить("ДанныеБанка");
	Результат.Вставить("ДанныеЗаемщика");
	Результат.Вставить("ДанныеКредита", Новый Структура());
		
	// Заявка
	ДанныеЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаявкаНаКредит, "Ссылка, Дата, Организация");
	Результат.ДанныеЗаявки = ДанныеЗаявки;
	
	Запись = РегистрыСведений.СостояниеЗаявокНаКредит.СоздатьМенеджерЗаписи();
	Запись.ЗаявкаНаКредит = ЗаявкаНаКредит;
	Запись.Банк = Банк;
	Запись.Организация = ДанныеЗаявки.Организация;
	
	Запись.Прочитать();
	
	Если НЕ Запись.Выбран() Тогда
		ВызватьИсключение СтрШаблон(ОписаниеОшибки, НСтр("ru='Не найдены сведения по заявке на кредит'"));
	КонецЕсли; 
	
	ДанныеЗаявки.Вставить("РегистрационныйНомер", Запись.РегистрационныйНомер);
	
	// Банк
	Результат.ДанныеБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк, "Наименование, ИНН");
	
	// Заемщик
	Результат.ДанныеЗаемщика = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
		ДанныеЗаявки.Организация, ДанныеЗаявки.Дата);
	Результат.ДанныеЗаемщика.Вставить("ИдентификаторЗаемщика",
		Результат.ДанныеЗаемщика.ИНН + СокрЛП(Результат.ДанныеЗаемщика.КПП));
	
	// Продукт
	Результат.ДанныеКредита.Вставить("Сумма", Запись.СуммаЗаявки);
	Результат.ДанныеКредита.Вставить("Срок", Запись.СрокЗаявки);
	
	Возврат Результат;

КонецФункции

// Возвращает двоичные данные с XML-текстом кредитного акцепта.
//
// Параметры:
//	СведенияОбАкцепте - Структура - см. СведенияОбАкцепте().
//
Функция ВыгрузитьАкцепт(СведенияОбАкцепте)

	ДанныеЗаявки 	= СведенияОбАкцепте.ДанныеЗаявки;
	ДанныеЗаемщика  = СведенияОбАкцепте.ДанныеЗаемщика;
	ДанныеБанка     = СведенияОбАкцепте.ДанныеБанка;
	ДанныеКредита   = СведенияОбАкцепте.ДанныеКредита;
	
	ПараметрыВыгрузки = НовыеСведенияАкцепта();
	ПараметрыВыгрузки.ИдентификаторФайла = ЗаявкиНаКредит.ИмяФайлаДляКонтейнера(
		Перечисления.ТипыДокументовОбменаСБанкамиЗаявкиНаКредит.АкцептЗаемщика,
		Перечисления.ТипыСодержимогоФайловОбменаСБанками.xml,
		СведенияОбАкцепте);
	
	// Общие реквизиты заявки.
	ПараметрыВыгрузки.ИдентификаторЗаявки = XMLСтрока(ДанныеЗаявки.Ссылка);
	ПараметрыВыгрузки.ДатаЗаявки          = ДанныеЗаявки.Дата;
	ПараметрыВыгрузки.РегистрационныйНомер = ДанныеЗаявки.РегистрационныйНомер;
	ПараметрыВыгрузки.СуммаКредита        = ДанныеКредита.Сумма;
	ПараметрыВыгрузки.СрокКредита         = ДанныеКредита.Срок;
	
	ПараметрыВыгрузки.Банк.Наименование   = ДанныеБанка.Наименование;
	ПараметрыВыгрузки.Банк.ИНН   		  = ДанныеБанка.ИНН;
	
	ПараметрыВыгрузки.Организация.Наименование = ДанныеЗаемщика.СокращенноеНаименование;
	ПараметрыВыгрузки.Организация.ИНН          = ДанныеЗаемщика.ИНН;
	ПараметрыВыгрузки.Организация.КПП          = ДанныеЗаемщика.КПП;
	
	Возврат ЗаявкиНаКредит.ЭлектронноеПредставлениеСообщения(
		Перечисления.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит.АкцептЗаемщика,
		ПараметрыВыгрузки);

КонецФункции

Функция НовыеСведенияАкцепта()
	
	Сведения = Новый Структура;
	
	Сведения.Вставить("Кодировка", "windows-1251");
	
	Сведения.Вставить("ИдентификаторФайла", "");
	Сведения.Вставить("ВерсияПрограммы",    РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	Сведения.Вставить("ИдентификаторЗаявки", "");
	Сведения.Вставить("ДатаЗаявки",          '0001-01-01');
	Сведения.Вставить("РегистрационныйНомер","");
	Сведения.Вставить("СуммаКредита",        0);
	Сведения.Вставить("СрокКредита",         0);
	
	// Сведения о банке
	Банк = Новый Структура;
	
	Банк.Вставить("Наименование", "");
	Банк.Вставить("ИНН", "");
	
	Сведения.Вставить("Банк", Банк);
	
	// Сведения о заемщике
	Организация = Новый Структура;
	
	Организация.Вставить("Наименование", "");
	Организация.Вставить("ИНН", "");
	Организация.Вставить("КПП", "");
	
	Сведения.Вставить("Организация", Организация);
		
	Возврат Сведения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения 
	|	ПО ОбособленныеПодразделения.ГоловнаяОрганизация = ЭтотСписок.Организация.ГоловнаяОрганизация
	|;
	|РазрешитьЧтение
	|ГДЕ
	| ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)
	|
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	| ЗначениеРазрешено(ЭтотСписок.Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецЕсли
