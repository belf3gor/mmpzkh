#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Пересчитывает остатки и обороты, отслеживаемые монитором руководителя, по указанной организации
// на указанную дату. Если задан интервал обновления, то проверяет актуальность данных.
// Если данные обновлялись в пределах интервала, то обновление не происходит.
//
// Параметры
// Организация - СправочникСсылка.Организации
// Дата - Дата - Дата, на которую нужно пересчитать данные
// ИнтервалОбновления - Число - Интервал в секундах, в пределах которого не нужно обновлять данные
//
Процедура ОбновитьДанные(Организация, Дата = Неопределено, ИнтервалОбновления = 0, РазделыПерсонализированныхДанных = Неопределено) Экспорт
		
	Если РазделыПерсонализированныхДанных = Неопределено Тогда
		РазделыПерсонализированныхДанных = Перечисления.РазделыПерсонализированныхДанных.РазделыПерсонализированныхДанныхПоУмолчанию();
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнтервалОбновления) Тогда
		Если ТекущиеДанныеАктуальны(Организация, Дата, ИнтервалОбновления, РазделыПерсонализированныхДанных) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДатаПолученияДанных = КонецДня(Дата);
	
	ДанныеКОбновлению = НоваяТаблицаОбновляемыхДанных();
	
	Для каждого Раздел из РазделыПерсонализированныхДанных Цикл
		
		ТаблицаДанных = Неопределено;
		
		Если Раздел = Перечисления.РазделыПерсонализированныхДанных.КоличествоПоступлений Тогда
			ТаблицаДанных = Документы.ПоступлениеТоваровУслуг.КоличествоДокументовЗаПериод(Организация, НачалоГода(ДатаПолученияДанных), КонецГода(ДатаПолученияДанных));
			
		ИначеЕсли Раздел = Перечисления.РазделыПерсонализированныхДанных.КоличествоРеализаций Тогда
			ТаблицаДанных = Документы.РеализацияТоваровУслуг.КоличествоДокументовЗаПериод(Организация, НачалоГода(ДатаПолученияДанных), КонецГода(ДатаПолученияДанных));
			
		ИначеЕсли Раздел = Перечисления.РазделыПерсонализированныхДанных.СреднесписочнаяЧисленность Тогда
			ТаблицаДанных = ПерсонализированныеПредложенияСервисов.СреднесписочнаяЧисленностьОрганизацииДляПерсонализированныеДанные(Организация, ДатаПолученияДанных);
			
		ИначеЕсли Раздел = Перечисления.РазделыПерсонализированныхДанных.НДСКВычету Тогда
			ТаблицаДанных = ПерсонализированныеПредложенияСервисов.ПолучитьНДСКВычетуДляПерсонализированныхДанных(Организация, ДатаПолученияДанных);
			
		ИначеЕсли Раздел = Перечисления.РазделыПерсонализированныхДанных.КоличествоКонтрагентов Тогда
			ТаблицаДанных = ПерсонализированныеПредложенияСервисов.ПолучитьКоличествоКонтрагентовДляПерсонализированныхДанных(ДатаПолученияДанных);
			
		ИначеЕсли Раздел = Перечисления.РазделыПерсонализированныхДанных.Сервис1СКонтрагентПодключен Тогда
			ТаблицаДанных = ПерсонализированныеПредложенияСервисов.Сервис1СКонтрагентПодключен();
			
		ИначеЕсли Раздел = Перечисления.РазделыПерсонализированныхДанных.Сервис1СОтчетностьПодключен Тогда
			ТаблицаДанных = ПерсонализированныеПредложенияСервисов.Сервис1СОтчетностьПодключен(Организация);
			
		ИначеЕсли Раздел = Перечисления.РазделыПерсонализированныхДанных.Сервис1СПАРКПодключен Тогда
			ТаблицаДанных = ПерсонализированныеПредложенияСервисов.Сервис1СПАРКПодключен();
			
		ИначеЕсли Раздел = Перечисления.РазделыПерсонализированныхДанных.Сервис1СЭДОПодключен Тогда
			ТаблицаДанных = ПерсонализированныеПредложенияСервисов.Сервис1СЭДОПодключен(Организация);
			
		ИначеЕсли Раздел = Перечисления.РазделыПерсонализированныхДанных.СервисПроверкаОплатыНалогов Тогда
			ТаблицаДанных = Обработки.СверкаНалоговСФНС.ПоказательНеобходимостиПроверкиОплатНалогов(Организация, ДатаПолученияДанных);
			
		ИначеЕсли Раздел = Перечисления.РазделыПерсонализированныхДанных.ИнтеграцияСоSmartway Тогда
			ТаблицаДанных = ПерсонализированныеПредложенияСервисов.КомандировкиЗаПрошлыйМесяц(Организация, ДатаПолученияДанных);

		ИначеЕсли Раздел = Перечисления.РазделыПерсонализированныхДанных.ЗаявкаНаКредит Тогда
			ПерсонализированныеПредложенияСервисов.ОбновитьДанныеДляЗаявкиНаКредит(ДатаПолученияДанных);
			Продолжить;
			
		Иначе
			Продолжить;
			
		КонецЕсли;
		
		НовыеДанные = ДанныеКОбновлению.Добавить();
		НовыеДанные.Раздел = Раздел;
		НовыеДанные.ТаблицаДанных = ТаблицаДанных;
		
	КонецЦикла;
	
	// Когда все данные посчитаны наложим блокировку и будем записывать.
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПерсонализированныеДанные");
		ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
		Блокировка.Заблокировать();
		
		Для Каждого ДанныеРаздела из ДанныеКОбновлению Цикл
			ЗаписатьДанныеРаздела(
				ДанныеРаздела.Раздел,
				Организация,
				Дата,
				ДанныеРаздела.ТаблицаДанных);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	// В роли в тексте ограничения доступа добавлено дополнительное ограничение
	// по "Раздел". При получении расчетных прав для данного регистра нужно это учитывать:
	//  * реально для пользователя данные ограничиваются по разделам.
	//    См. параметр сеанса РазрешенныеПользователюРазделыПерсонализированныхДанных,
	//    Перечисления.РазделыПерсонализированныхДанных.РазрешенныеПользователюРазделыПерсонализированныхДанных().
	//  * расчетные права РЛС об этом дополнительном ограничении не знают, и если получать ограничение из кода,
	//    то код вернет, что пользователю доступны все разделы.
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция проверяет актуальность данных, 
// если данные регистра обновлялись в пределах интервала обновления то данные считаются актуальными
// Параметры:
//	Организация - СправочникСсылка.Организации - организация для данных которой нужно проверить актуальность
//	Дата - Дата - дата и время на которую нужно проверить актупльность
//	ИнтервалОбновления - Число - Период времени в секундах в течении которого данные считать актульными
// Возвращаемое значение:
//  Булево - Истина, - Данные регистра актуальны, ложь - нет
//
Функция ТекущиеДанныеАктуальны(Организация, Дата, ИнтервалОбновления, РазделыПерсонализированныхДанных)
	
	// По умолчанию считаем данные неактуальными
	ДанныеАктуальны = Ложь;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("РазделыПерсонализированныхДанных", РазделыПерсонализированныхДанных);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	МИНИМУМ(ПерсонализированныеДанные.ДатаОбновления) КАК ДатаОбновления
	|ИЗ
	|	РегистрСведений.ПерсонализированныеДанные КАК ПерсонализированныеДанные
	|ГДЕ
	|	ПерсонализированныеДанные.Организация = &Организация
	|	И ПерсонализированныеДанные.Раздел В(&РазделыПерсонализированныхДанных)";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		// Если дата обновления регистра входит в интервал, то данные считаются актуальными
		Если ТипЗнч(Выборка.ДатаОбновления) = Тип("Дата") Тогда
			ДанныеАктуальны = Выборка.ДатаОбновления > (Дата - ИнтервалОбновления)
							И Выборка.ДатаОбновления < (Дата + ИнтервалОбновления);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеАктуальны;
	
КонецФункции

Процедура ЗаписатьДанныеРаздела(Раздел, Организация, Дата, ТаблицаДанных) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Раздел.Установить(Раздел);
		
	НомерСтрокиРаздела = 1;
	Для Каждого Данные Из ТаблицаДанных Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Данные);
		Запись.Организация        = Организация;
		Запись.Раздел             = Раздел;
		Запись.НомерСтрокиРаздела = НомерСтрокиРаздела;
		Запись.ДатаОбновления     = Дата;
		
		НомерСтрокиРаздела = НомерСтрокиРаздела + 1;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция НоваяТаблицаОбновляемыхДанных()
	
	ТаблицаОбновляемыхДанных = Новый ТаблицаЗначений;
	ТаблицаОбновляемыхДанных.Колонки.Добавить("Раздел");
	ТаблицаОбновляемыхДанных.Колонки.Добавить("ТаблицаДанных");
	Возврат ТаблицаОбновляемыхДанных;
	
КонецФункции

#КонецОбласти

#КонецЕсли