#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ОбновитьГраницуАктуальности(Организация, Период, ВидОперации, ПропуститьПроверкуСтатусаПредыдущих = Ложь) Экспорт
	
	НомерГруппы = ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации);
	
	// Проверим, не записана ли эта операция как устаревшая
	УжеБылаУстаревшей = ОперацияОтмеченаУстаревшей(Организация, Период, ВидОперации);
	
	Если УжеБылаУстаревшей Тогда
		СдвинутьГраницуАктуальностиВперед(Организация, Период, НомерГруппы, ВидОперации, ПропуститьПроверкуСтатусаПредыдущих);
	Иначе
		СдвинутьГраницуАктуальностиНазад(Организация, Период, НомерГруппы, ВидОперации);
	КонецЕсли;
	
КонецПроцедуры

Процедура СдвинутьГраницуАктуальностиНазад(Организация, Период, НомерГруппы, ВидОперации, ТекущаяОперацияУстарела = Ложь) Экспорт

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// 1. Устарели все одноименные операции в периодах, следующих за текущим.
	
	// 2. Устарели все операции более поздних групп, чем переданная.
	// Так как каждая вторая группа выполняется по организации в целом, 
	// то любое изменение (кроме группы "0 - перепроведение документов") 
	// делает неактуальными все следующие операции _всех_ обособленных подразделений.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВидыОпераций",             ЗакрытиеМесяца.ВсеВидыОпераций());
	Запрос.УстановитьПараметр("ВидОперации",              ВидОперации);
	Запрос.УстановитьПараметр("НомерГруппы",              НомерГруппы);
	Запрос.УстановитьПараметр("Период",                   НачалоМесяца(Период));
	Запрос.УстановитьПараметр("МесяцУстареванияОперации", НачалоМесяца(?(ТекущаяОперацияУстарела, Период, ДобавитьМесяц(Период, 1))));
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",      БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОпераций.ВидОперации КАК ВидОперации,
	|	ВидыОпераций.НомерГруппы КАК НомерГруппы,
	|	ВидыОпераций.ПоОрганизацииВЦелом КАК ПоОрганизацииВЦелом
	|ПОМЕСТИТЬ ВидыОпераций
	|ИЗ
	|	&ВидыОпераций КАК ВидыОпераций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыОпераций.ВидОперации КАК ВидОперации,
	|	ВидыОпераций.НомерГруппы КАК НомерГруппы,
	|	ВидыОпераций.ПоОрганизацииВЦелом КАК ПоОрганизацииВЦелом
	|ПОМЕСТИТЬ ВидыОперацийСледующихГрупп
	|ИЗ
	|	ВидыОпераций КАК ВидыОпераций
	|ГДЕ
	|	ВидыОпераций.НомерГруппы > &НомерГруппы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентнаяОперация.ВидОперации КАК ВидОперации,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ УстарелиРегламентныеОперации
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Дата >= &Период
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И РегламентнаяОперация.ВидОперации В
	|			(ВЫБРАТЬ
	|				ВидыОпераций.ВидОперации
	|			ИЗ
	|				ВидыОперацийСледующихГрупп КАК ВидыОпераций)
	|	И РегламентнаяОперация.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РегламентнаяОперация.ВидОперации,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ),
	|	РегламентнаяОперация.Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	&НомерГруппы >= 1
	|	И РегламентнаяОперация.Дата >= &Период
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И РегламентнаяОперация.ВидОперации В
	|			(ВЫБРАТЬ
	|				ВидыОпераций.ВидОперации
	|			ИЗ
	|				ВидыОперацийСледующихГрупп КАК ВидыОпераций)
	|	И РегламентнаяОперация.Организация В
	|			(ВЫБРАТЬ
	|				Организации.Ссылка
	|			ИЗ
	|				Справочник.Организации КАК Организации
	|			ГДЕ
	|				Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РегламентнаяОперация.ВидОперации,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ),
	|	РегламентнаяОперация.Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Дата >= &МесяцУстареванияОперации
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И РегламентнаяОперация.ВидОперации = &ВидОперации
	|	И РегламентнаяОперация.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УстарелиРегламентныеОперации.Организация КАК Организация,
	|	УстарелиРегламентныеОперации.Дата КАК Дата,
	|	УстарелиРегламентныеОперации.ВидОперации КАК ВидОперации
	|ИЗ
	|	УстарелиРегламентныеОперации КАК УстарелиРегламентныеОперации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписиРегистра = РегистрыСведений.НеАктуальныеРегламентныеОперации.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиРегистра, Выборка);
		МенеджерЗаписиРегистра.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЗапись(Организация, Период, ВидОперации) Экспорт
			
	МенеджерЗаписиРегистра = РегистрыСведений.НеАктуальныеРегламентныеОперации.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Организация = Организация;
	МенеджерЗаписиРегистра.Дата        = НачалоМесяца(Период);
	МенеджерЗаписиРегистра.ВидОперации = ВидОперации;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписиРегистра.Удалить();
	
КонецПроцедуры

Процедура УдалитьЗаписиПрошлыхПериодов(Организация, Период) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Период", 		НачалоМесяца(Период));

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеАктуальныеРегламентныеОперации.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.НеАктуальныеРегламентныеОперации КАК НеАктуальныеРегламентныеОперации
	|ГДЕ
	|	НеАктуальныеРегламентныеОперации.Организация = &Организация
	|	И НеАктуальныеРегламентныеОперации.Дата < &Период";

	НаборЗаписейРегистра = РегистрыСведений.НеАктуальныеРегламентныеОперации.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Организация.Установить(Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписейРегистра.Отбор.Дата.Установить(Выборка.Дата);
		НаборЗаписейРегистра.Записать();
	
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Совместимость с устаревшей структурой данных

Процедура УдалитьВремяИзДатыИОчиститьГруппу() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НеактуальныеРегламентныеОперации.Организация КАК Организация,
	|	НеактуальныеРегламентныеОперации.Группа КАК Группа,
	|	НеактуальныеРегламентныеОперации.Дата КАК Дата,
	|	НеактуальныеРегламентныеОперации.ВидОперации КАК ВидОперации,
	|	НеактуальныеРегламентныеОперации.УдалитьДата КАК УдалитьДата
	|ИЗ
	|	РегистрСведений.НеактуальныеРегламентныеОперации КАК НеактуальныеРегламентныеОперации
	|ГДЕ
	|	(НеактуальныеРегламентныеОперации.Дата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НеактуальныеРегламентныеОперации.Дата <> НАЧАЛОПЕРИОДА(НеактуальныеРегламентныеОперации.Дата, МЕСЯЦ)
	|			ИЛИ НеактуальныеРегламентныеОперации.УдалитьДата <> ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НеактуальныеРегламентныеОперации.Группа <> 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Запись = РегистрыСведений.НеактуальныеРегламентныеОперации.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
		
		// Записей не будет много, поэтому записываем маленькими наборами
		НачатьТранзакцию();
		
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Удалить();
		
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		// Измерение Группа используется только для установки объектных блокировок; его значения в информационной базе смысла не имеют
		Запись.Группа      = 0;
		
		// В регистре измерение Дата ошибочно имело вариант использования ДатаВремя.
		// Фактически, значения этого измерения характеризуют закрываемый _месяц_,
		// а значит число и время в нем избыточны.
		// Изменить тип нельзя, так как есть риск ошибок при реструктуризации.
		// Поэтому Дата переименовано в УдалитьДата и добавлено новое измерение.
		Если ЗначениеЗаполнено(Выборка.УдалитьДата) Тогда
			Запись.Дата        = НачалоМесяца(Выборка.УдалитьДата);
			Запись.УдалитьДата = '0001-01-01';
		Иначе
			Запись.Дата        = НачалоМесяца(Выборка.Дата);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.Дата) Тогда // Записи с незаполненной датой - ошибочные
			Запись.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура СдвинутьГраницуАктуальностиВперед(Организация, Период, НомерГруппы, ВидОперации, ПропуститьПроверкуСтатусаПредыдущих)
	
	Если ПропуститьПроверкуСтатусаПредыдущих
	 Или ЗакрытиеМесяца.ПредыдущиеОперацииВыполнены(Период, Организация, ВидОперации) Тогда
		УдалитьЗапись(Организация, Период, ВидОперации);
	КонецЕсли;
	
КонецПроцедуры

Функция ОперацияОтмеченаУстаревшей(Организация, Период, ВидОперации)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("ВидОперации",   ВидОперации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УстаревшиеОперации.ВидОперации
	|ИЗ
	|	РегистрСведений.НеактуальныеРегламентныеОперации КАК УстаревшиеОперации
	|ГДЕ
	|	УстаревшиеОперации.Организация = &Организация
	|	И УстаревшиеОперации.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И УстаревшиеОперации.ВидОперации = &ВидОперации";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецЕсли
