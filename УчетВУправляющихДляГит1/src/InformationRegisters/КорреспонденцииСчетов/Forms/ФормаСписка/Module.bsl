
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Для каждого Документ Из Метаданные.Документы Цикл
		
		Если Врег(Лев(Документ.Имя, 7)) = "УДАЛИТЬ" Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.ОтборТипДокумента.СписокВыбора.Добавить(Документ.Синоним);
		
	КонецЦикла;
	
	ОтборСодержаниеИстория = ХранилищеОбщихНастроек.Загрузить("РегистрСведений.КорреспонденцииСчетов", "ОтборСодержаниеИстория");
	
	Если ОтборСодержаниеИстория <> Неопределено Тогда
		Элементы.ОтборСодержание.СписокВыбора.ЗагрузитьЗначения(ОтборСодержаниеИстория);
	КонецЕсли;
	
	Если Элементы.ОтборСодержание.СписокВыбора.Количество() = 0 Тогда
		Элементы.ОтборСодержание.СписокВыбора.Добавить("товар от поставщ");
		Элементы.ОтборСодержание.СписокВыбора.Добавить("денеж на расчет счет от покупателя");
		Элементы.ОтборСодержание.СписокВыбора.Добавить("перечислен ден поставщик");
	КонецЕсли;
	
	СохраненныеПоследниеВведенные = ХранилищеОбщихНастроек.Загрузить("РегистрСведений.КорреспонденцииСчетов", "ПоследниеВведенные");
	
	Если СохраненныеПоследниеВведенные <> Неопределено Тогда
		ПоследниеВведенные.ЗагрузитьЗначения(СохраненныеПоследниеВведенные.ВыгрузитьЗначения());
	КонецЕсли;
	
	ПоказОпераций = "Все";
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтборСчетДтПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список,"СчетДт", ОтборСчетДт,
		ЗначениеЗаполнено(ОтборСчетДт), ВидСравненияКомпоновкиДанных.ВИерархии);
		
	УправлениеФормой();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборСчетКтПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список,"СчетКт", ОтборСчетКт,
		ЗначениеЗаполнено(ОтборСчетКт), ВидСравненияКомпоновкиДанных.ВИерархии);
		
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура ОтборСодержаниеПриИзменении(Элемент)
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОтборСодержание, " ");
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, 
		"Содержание");
	
	Для каждого Подстрока Из МассивПодстрок Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор, 
			"Содержание", 
			Подстрока, 
			ВидСравненияКомпоновкиДанных.Содержит, 
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, 
			Истина); 
	КонецЦикла;
		
	Если НЕ ПустаяСтрока(ОтборСодержание) И Элементы.ОтборСодержание.СписокВыбора.НайтиПоЗначению(ОтборСодержание) = Неопределено Тогда
		Элементы.ОтборСодержание.СписокВыбора.Вставить(0, ОтборСодержание);
		СохранитьОтборСодержаниеИстория(Элементы.ОтборСодержание.СписокВыбора.ВыгрузитьЗначения());
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипДокументаПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ТипДокумента", ОтборТипДокумента, 
		ЗначениеЗаполнено(ОтборТипДокумента));
	
	УправлениеФормой();
	
	#Если ВебКлиент Тогда
		// В веб-клиенте, если после применения отбора в списке нет строк событие ПриАктивизацииСтроки не срабатывает.
		// Поэтому нужно обновить подвал принудительно
		Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПодвал", 0.2, Истина);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Идентификатор",
				ПоследниеВведенные,
				ПоказОпераций = "Последние",
				ВидСравненияКомпоновкиДанных.ВСписке);
				
	УправлениеФормой();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Список

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПодвал", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущийЭлемент.Имя = "СсылкаНаИТС" Тогда
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.СсылкаНаИТС) Тогда
			ПерейтиПоНавигационнойСсылке(Элемент.ТекущиеДанные.СсылкаНаИТС);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьОперацию(Элемент.ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВвестиОперацию(Команда)
	
	ТабличноеПоле = Элементы.Список;
	
	Если ТабличноеПоле.ТекущиеДанные <> Неопределено Тогда
		ОткрытьОперацию(ТабличноеПоле.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	
	// СсылкаНаИТС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СсылкаНаИТС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.СсылкаНаИТС", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Пример на ИТС'"));
	
	
	// СписокПоследнихВведенныхИТС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокПоследнихВведенныхИТС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СписокПоследнихВведенных.СсылкаНаИТС", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Пример на ИТС'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	          
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Элементы.ВвестиОперацию.Доступность = Ложь;
	Иначе
		Элементы.ВвестиОперацию.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьПодвал()
	
	УстановитьТекстПутиКДокументу();
	УстановитьКартинкуРазделаДляПутиКДокументу();
	УстановитьСтраницуСсылкиНаИТС();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстПутиКДокументу()
	
	// установим текст для "Где найти в меню"
	ПутьКДокументу = "";
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ПутьКДокументу = ПутьКДокументу + Элементы.Список.ТекущиеДанные.Раздел;
	    Если ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Подраздел) Тогда
			ПутьКДокументу = ПутьКДокументу + " / " + Элементы.Список.ТекущиеДанные.Подраздел;
		КонецЕсли;
		ПоказыватьЖурнал = Истина;
		// Обработаем исключительные ситуации
		Если ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Журнал) И ПоказыватьЖурнал Тогда
			ПутьКДокументу = ПутьКДокументу + " / " + Элементы.Список.ТекущиеДанные.Журнал;			
		КонецЕсли;
		Если ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.ТипДокумента) Тогда
			ПутьКДокументу = ПутьКДокументу + " / " + Элементы.Список.ТекущиеДанные.ТипДокумента;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.ВидОперацииДокумента) Тогда
			Если НЕ ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.ЗакладкаДокумента) Тогда
				ПутьКДокументу = ПутьКДокументу + " (Вид операции: " + Элементы.Список.ТекущиеДанные.ВидОперацииДокумента + ")";
			Иначе
				ПутьКДокументу = ПутьКДокументу + " (Вид операции: " + Элементы.Список.ТекущиеДанные.ВидОперацииДокумента;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.ЗакладкаДокумента) Тогда
			Если НЕ ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.ВидОперацииДокумента) Тогда
				ПутьКДокументу = ПутьКДокументу + " (Закладка: " + Элементы.Список.ТекущиеДанные.ЗакладкаДокумента + ")";
			Иначе
				ПутьКДокументу = ПутьКДокументу + ", Закладка: " + Элементы.Список.ТекущиеДанные.ЗакладкаДокумента + ")";
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	Если ПутьКДокументу = "" Тогда
		Элементы.ДекорацияПутьКДокументуЗаголовок.Видимость = Ложь;
		Элементы.ПутьКДокументу.Видимость                   = Ложь;
	Иначе
		Элементы.ДекорацияПутьКДокументуЗаголовок.Видимость = Истина;
		Элементы.ПутьКДокументу.Видимость                   = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКартинкуРазделаДляПутиКДокументу()
	
	// выберем картинку раздела для "Где найти в меню"	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		ТекущаяКартинка = Новый Картинка;
	Иначе
		ПутьКДокументуРаздел = Элементы.Список.ТекущиеДанные.Раздел;
		
		Если ПутьКДокументуРаздел = "Главное" Тогда
			ТекущаяКартинка = БиблиотекаКартинок.Главное;
		ИначеЕсли ПутьКДокументуРаздел = "Банк и касса" Тогда
			ТекущаяКартинка = БиблиотекаКартинок.БанкИКасса;
		ИначеЕсли ПутьКДокументуРаздел = "Покупки" Тогда
			ТекущаяКартинка = БиблиотекаКартинок.Покупки;
		ИначеЕсли ПутьКДокументуРаздел = "Продажи" Тогда
			ТекущаяКартинка = БиблиотекаКартинок.Продажи;
		ИначеЕсли ПутьКДокументуРаздел = "Склад" Тогда
			ТекущаяКартинка = БиблиотекаКартинок.Склад;
		ИначеЕсли ПутьКДокументуРаздел = "Производство" Тогда
			ТекущаяКартинка = БиблиотекаКартинок.Производство;
		ИначеЕсли ПутьКДокументуРаздел = "ОС и НМА" Тогда
			ТекущаяКартинка = БиблиотекаКартинок.ОС;
		ИначеЕсли ПутьКДокументуРаздел = "Зарплата и кадры" Тогда
			ТекущаяКартинка = БиблиотекаКартинок.Сотрудники;
		ИначеЕсли ПутьКДокументуРаздел = "Отчеты" Тогда
			ТекущаяКартинка = БиблиотекаКартинок.Отчеты;
		ИначеЕсли ПутьКДокументуРаздел = "Справочники" Тогда
			ТекущаяКартинка = БиблиотекаКартинок.Справочники;
		ИначеЕсли ПутьКДокументуРаздел = "Операции" Тогда
			ТекущаяКартинка = БиблиотекаКартинок.Операции;
		Иначе
			ТекущаяКартинка = БиблиотекаКартинок.Операции;
		КонецЕсли;
	КонецЕсли;
	Элементы.ДекорацияКартинкаРаздела.Картинка = ТекущаяКартинка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуСсылкиНаИТС()
	
	// установим видимость гиперссылки на пример на ИТС
	ЕстьСсылкаНаИТС = Ложь;
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ПолеСсылкиНаИТС = "СсылкаНаИТС";
		ЕстьСсылкаНаИТС = ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные[ПолеСсылкиНаИТС]);
	КонецЕсли;
	Элементы.ДекорацияСсылкаНаИТС.Видимость = ЕстьСсылкаНаИТС;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОперацию(ДанныеСтроки)
	
	ДобавитьОперациюВСписокПоследнихВведенных(ДанныеСтроки.Идентификатор);
	
	ИмяДокумента = ДанныеСтроки.ИмяДокумента;
	
	Если Не ЗначениеЗаполнено(ИмяДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ВидОперацииДокумента) Тогда
		ВидОперации = ДанныеСтроки.ВидОперацииДокумента;
		ИмяПараметра = ?(ИмяДокумента = "ВводНачальныхОстатков", "РазделУчета", "ВидОперации");
		ЗначенияЗаполнения.Вставить(ИмяПараметра, ВидОперации);
	КонецЕсли;
	
	Если ИмяДокумента = "ОперацияБух" Тогда
		
		ЗначенияЗаполнения.Вставить("Содержание",   ДанныеСтроки.Содержание);
		ЗначенияЗаполнения.Вставить("Хозрасчетный", Новый Массив);
		
		НоваяПроводка = Новый Структура;
		НоваяПроводка.Вставить("СчетДт", ДанныеСтроки.СчетДт);
		НоваяПроводка.Вставить("СчетКт", ДанныеСтроки.СчетКт);
		НоваяПроводка.Вставить("Содержание", ДанныеСтроки.Содержание);
		ЗначенияЗаполнения.Хозрасчетный.Добавить(НоваяПроводка);
		
	КонецЕсли;
	
	Если ПроверитьФункциональнуюОпциюПоИмениДокумента(ИмяДокумента, ПоследниеВведенные) Тогда
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаОбъекта", ПараметрыФормы);
	Иначе
		Если ВРег(ИмяДокумента) = ВРег("ОтражениеЗарплатыВБухучете")
			ИЛИ ВРег(ИмяДокумента) = ВРег("ОтражениеЗарплатыВУчете")
			ИЛИ ВРег(ИмяДокумента) = ВРег("НачислениеЗарплаты")
			ИЛИ ВРег(ИмяДокумента) = ВРег("Отпуск")
			ИЛИ ВРег(ИмяДокумента) = ВРег("БольничныйЛист") Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Данная функциональность программы отключена.
				|Настроить функциональность программы можно в форме ""Параметры учета"" (Главное - Параметры учета)'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Данная функциональность программы отключена.
				|Настроить функциональность программы можно в форме ""Функциональность программы"" (Главное - Функциональность)'");
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьФункциональнуюОпциюПоИмениДокумента(Знач ИмяДокумента, ПоследниеВведенные)
	
	ДокументМетаданные = Метаданные.Документы.Найти(ИмяДокумента);
	Если ДокументМетаданные <> Неопределено Тогда
		ФункциональностьДоступна = ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ДокументМетаданные);
	Иначе
		ФункциональностьДоступна = Ложь;
	КонецЕсли;
	
	Если ФункциональностьДоступна Тогда // список последних введенных изменяется
		ХранилищеОбщихНастроек.Сохранить("РегистрСведений.КорреспонденцииСчетов", "ПоследниеВведенные", ПоследниеВведенные);
	КонецЕсли;
	
	Возврат ФункциональностьДоступна;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОперациюВСписокПоследнихВведенных(Идентификатор)
	
	НайденноеЗначение = ПоследниеВведенные.НайтиПоЗначению(Идентификатор);
	
	Если НайденноеЗначение = Неопределено Тогда
		Если ПоследниеВведенные.Количество() > 10 Тогда
			ПоследниеВведенные.Удалить(0);
		КонецЕсли;
	Иначе
		ПоследниеВведенные.Удалить(НайденноеЗначение);
	КонецЕсли;
	ПоследниеВведенные.Добавить(Идентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтборСодержаниеИстория(МассивСтрок)
	
	ХранилищеОбщихНастроек.Сохранить("РегистрСведений.КорреспонденцииСчетов", "ОтборСодержаниеИстория", МассивСтрок);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаНаИТСНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.СсылкаНаИТС) Тогда
		ПерейтиПоНавигационнойСсылке(Элементы.Список.ТекущиеДанные.СсылкаНаИТС);
	КонецЕсли;
	
КонецПроцедуры
