#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура устанавливает значения регистра по умолчанию
//
// Параметры:
//   Запись           - РегистрСведенийЗапись - запись регистра
//   ДанныеЗаполнения - Структура - где ключ - имя ресурса
//
Процедура УстановкаНастроекПоУмолчанию(Запись, ДанныеЗаполнения) Экспорт
	
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"Период",
		НачалоГода(ТекущаяДатаСеанса()));
	
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"Организация",
		БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	
	// Розница
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"СпособОценкиТоваровВРознице",
		Перечисления.СпособыОценкиТоваровВРознице.ПоСтоимостиПриобретения);
		
	// Производство
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"ОсновнойСчетУчетаЗатрат",
		ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"ВыпускПродукции",
		Ложь);
		
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись, 
		ДанныеЗаполнения, 
		"ОказаниеУслуг",
		Ложь);
		
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"РассчитыватьСебестоимостьПолуфабрикатов",
		Ложь);
		
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"РассчитыватьСебестоимостьУслугСобственнымПодразделениям",
		Ложь);
		
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"ИспользоватьПлановуюСебестоимость",
		Ложь);
		
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"ДиректКостинг",
		Истина);
		
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"ПорядокСписанияРасходовНаСебестоимостьУслуг",
		Перечисления.ПорядокСписанияРасходовНаСебестоимостьУслуг.БезУчетаВыручки);
		
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"ВариантБухгалтерскойОтчетности",
		ВариантБухгалтерскойОтчетностиПоУмолчанию());
	
	// Производство: Выпуск продукции, услуг
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"СпособУчетаВыпускаГотовойПродукции",
		Перечисления.СпособыУчетаВыпускаГотовойПродукции.БезИспользованияСчета40);
		
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"СпособРасчетаСебестоимостиПроизводства",
		Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам);
		
	// При отключенной опции ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств в учетной политике
	// банковские документы не формируют движений - ожидается, что движения по банку и кассе сформируют кассовые документы.
	// При включенной интеграции с банками остатки по банку должны всегда совпадать с выпиской - поэтому опцию нужно включить.
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств",
		ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена());
		
	// Запасы
	Если (УчетнаяПолитика.СистемаНалогообложения(Запись.Организация, Запись.Период) = Перечисления.СистемыНалогообложения.Упрощенная
			И УчетнаяПолитика.ОбъектНалогообложенияУСН(Запись.Организация, Запись.Период) = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы)
		ИЛИ (НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Запись.Организация) И УчетнаяПолитика.СистемаНалогообложения(Запись.Организация, Запись.Период) = Перечисления.СистемыНалогообложения.Общая) Тогда
		
		НастройкиУчета.УстановитьЗначениеПоУмолчанию(
			Запись,
			ДанныеЗаполнения,
			"СпособОценкиМПЗ",
			Перечисления.СпособыОценки.ФИФО);
		
	Иначе
		НастройкиУчета.УстановитьЗначениеПоУмолчанию(
			Запись,
			ДанныеЗаполнения,
			"СпособОценкиМПЗ",
			Перечисления.СпособыОценки.ПоСредней);
	КонецЕсли;
	
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"ВариантУчетаОтложенногоНалога",
		Перечисления.ВариантыУчетаОтложенногоНалога.Нет);
		
КонецПроцедуры

// Возвращает сведения о варианте бухгалтерской отчетности
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, для которой необходимо получить данные.
//   Период      - Дата - период, на который необходимо получить данные.
// 
// Возвращаемые значения:
//  Неопределено                                       - когда нет записей в регистре
//  ПеречислениеСсылка.ВариантыБухгалтерскойОтчетности - значение ресурса ВариантБухгалтерскойОтчетности
//
Функция ВариантБухгалтерскойОтчетностиДействующейУчетнойПолитики(Организация, Период = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ?(Период = Неопределено, ТекущаяДатаСеанса(), Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетнаяПолитикаСрезПоследних.ВариантБухгалтерскойОтчетности
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВариантБухгалтерскойОтчетности = Выборка.ВариантБухгалтерскойОтчетности;
	Иначе
		ВариантБухгалтерскойОтчетности = Неопределено;
	КонецЕсли;
	
	Возврат ВариантБухгалтерскойОтчетности;
	
КонецФункции

Функция ДоступноВключениеПлановойСебестоимости(Организация, Период) Экспорт
	
	РезультатЗапросаДокументыБезПлановойСебестоимости = РезультатЗапросаДокументыБезПлановойСебестоимости(Организация, Период, Истина);
	
	Возврат РезультатЗапросаДокументыБезПлановойСебестоимости.Пустой();
	
КонецФункции

// Процедура формирует список документов, препятствующих включению плановой себестоимости.
// Предназначена для запуска в фоновом режиме.
//
// Параметры:
//  Параметры		 - Структура - см. параметр ПараметрыПроцедуры в ДлительныеОперации.ВыполнитьВФоне()
//  					Обязательно должны быть свойства:
//						- Организация - Организация, по которой выполняется проверка.
//						- Период - период записи учетной политики, для которой выполняется проверка. 
//  АдресХранилища	 - Строка - адрес временного хранилища, в которое должен быть помещен результат работы процедуры. 
//
Процедура СформироватьСписокДокументовПрепятствующихВключениюПлановойСебестоимости(Параметры, АдресХранилища) Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
		
	РезультатЗапросаДокументыБезПлановойСебестоимости = РезультатЗапросаДокументыБезПлановойСебестоимости(
		Параметры.Организация,
		Параметры.Период);
			
	Выборка = РезультатЗапросаДокументыБезПлановойСебестоимости.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		ПарамерыШапки = Новый Структура;
		
		ПарамерыШапки.Вставить("Заголовок", НСтр("ru = 'Документы выпуска без плановых цен'"));
		
		Обработки.ФункциональностьПрограммы.ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"Шапка",
			ПарамерыШапки);
		
	КонецЕсли;
			
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения 
	|	ПО ОбособленныеПодразделения.ГоловнаяОрганизация = ЭтотСписок.Организация.ГоловнаяОрганизация
	|;
	|РазрешитьЧтение
	|ГДЕ
	| ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)
	|
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	| ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияШапкиПечатнойФормы(ПараметрыПечати.ИмяМакета, ПараметрыПечати);
	Если ПараметрыПечати.ИмяМакета = "ПланСчетов" Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПланСчетов",
			ПараметрыЗаполнения.ЗаголовокШапки,
			ТабличныйДокументПланСчетов(ПараметрыЗаполнения));
	ИначеЕсли ПараметрыПечати.ИмяМакета = "РегистрыБУ"
		ИЛИ ПараметрыПечати.ИмяМакета = "РегистрыНУ" 
		ИЛИ ПараметрыПечати.ИмяМакета = "ПервичныеДокументы" Тогда
		
		Если ПараметрыПечати.ИмяМакета = "РегистрыБУ" Тогда
			ТаблицаФорм = ТаблицаФормДокументовИлиРегистров(
				"РегистрыБУ", "РегистрыБУСлужебный", ПараметрыПечати, ПараметрыЗаполнения);
		ИначеЕсли ПараметрыПечати.ИмяМакета = "РегистрыНУ" Тогда
			ТаблицаФорм = ТаблицаФормДокументовИлиРегистров(
				"РегистрыНУ", "РегистрыНУСлужебный", ПараметрыПечати, ПараметрыЗаполнения);
		ИначеЕсли ПараметрыПечати.ИмяМакета = "ПервичныеДокументы" Тогда
			ТаблицаФорм = ТаблицаФормДокументовИлиРегистров(
				"ПервичныеДокументы", "ПервичныеДокументыСлужебный", ПараметрыПечати, ПараметрыЗаполнения);
		КонецЕсли;
		КоллекцияПечатныхФорм.Очистить();
		Для каждого СтрокаТаблицы Из ТаблицаФорм Цикл
			НоваяСтрока = КоллекцияПечатныхФорм.Добавить();
			НоваяСтрока.ИмяМакета = СтрокаТаблицы.Идентификатор;
			НоваяСтрока.СинонимМакета = СтрокаТаблицы.Наименование;
			НоваяСтрока.ТабличныйДокумент = СтрокаТаблицы.ТабличныйДокумент;
			НоваяСтрока.Экземпляров = 1;
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПечатнойФормыУчетнойПолитики(ИмяМакета, Запись) Экспорт
	
	ДанныеПечатнойФормы = Новый Структура("Документ,ЗаголовокФормы");
	ДанныеПечатнойФормы.Документ = Новый ТабличныйДокумент;
	ПараметрыЗаполнения = ПараметрыЗаполненияШапкиПечатнойФормы(ИмяМакета, Запись);
	ДанныеПечатнойФормы.ЗаголовокФормы = ПараметрыЗаполнения.ЗаголовокФормы;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Если ИмяМакета = "УчетнаяПолитикаБУ" 
		ИЛИ ИмяМакета = "УчетнаяПолитикаНУ" Тогда
		ТабличныйДокумент = ТабличныйДокументУчетнойПолитикиБУ_НУ(ИмяМакета, Запись, ПараметрыЗаполнения);
	ИначеЕсли ИмяМакета = "Приказ" Тогда
		ТабличныйДокумент = ТабличныйДокументПриказ(Запись, ПараметрыЗаполнения);
	КонецЕсли;
	
	ДанныеПечатнойФормы.Документ = ФорматированныйДокументИзТабличного(ТабличныйДокумент);
	
	Возврат ДанныеПечатнойФормы;
	
КонецФункции

Функция ТабличныйДокументУчетнойПолитикиБУ_НУ(ИмяМакета, Запись, ПараметрыЗаполнения)
	
	Результат = Новый ТабличныйДокумент;
	
	МакетОформления = РегистрыСведений.УчетнаяПолитика.ПолучитьМакет("МакетОформления");
	МакетСодержания = РегистрыСведений.УчетнаяПолитика.ПолучитьМакет(ИмяМакета);
	
	ОбластьШапка   = МакетОформления.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ПараметрыЗаполнения);
	Результат.Вывести(ОбластьШапка);
	
	ПараметрыСодержания = ПараметрыЗаполненияСодержанияПечатнойФормы(Запись);
	ОбластьСодержания   = МакетСодержания.ПолучитьОбласть("Содержание");
	ОбластьСодержания.Параметры.Заполнить(ПараметрыСодержания);
	ДокументСодержания = Новый ТабличныйДокумент;
	ДокументСодержания.Вывести(ОбластьСодержания);
	
	ПараметрыОпций = Новый Структура("Организация,Период", Запись.Организация, НачалоМесяца(Запись.Период));
	
	ЗначенияОпций  = Новый Соответствие;
	УстановитьДополнительныеЗначенияОпций(ЗначенияОпций, Запись);
	
	ВыводитьЗаголовок1  = Истина;
	ВыводитьЗаголовок2  = Истина;
	ВыводитьРазделитель = Ложь;
	НомерЗаголовка2     = 1;
	
	Для НомерСтроки = 1 По ДокументСодержания.ВысотаТаблицы Цикл
		
		ТекстЗаголовка1 = ДокументСодержания.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		Если НЕ ПустаяСтрока(ТекстЗаголовка1) Тогда
			ВыводитьЗаголовок1 = ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций);
			Если ВыводитьЗаголовок1 Тогда
				Если ВыводитьРазделитель Тогда
					ВывестиРазделитель(Результат, МакетОформления);
					ВыводитьРазделитель = Ложь;
				КонецЕсли;
				ВывестиЗаголовок1(Результат, ТекстЗаголовка1, МакетОформления);
				ВыводитьЗаголовок2 = Истина;
				НомерЗаголовка2    = 1;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ВыводитьЗаголовок1 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗаголовка2 = ДокументСодержания.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
		Если НЕ ПустаяСтрока(ТекстЗаголовка2) Тогда
			ВыводитьЗаголовок2 = ?(НЕ ПустаяСтрока(ТекстЗаголовка1),
				Истина,
				ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций));
			Если ВыводитьЗаголовок2 Тогда
				Если ВыводитьРазделитель Тогда
					ВывестиРазделитель(Результат, МакетОформления);
					ВыводитьРазделитель = Ложь;
				КонецЕсли;
				ВывестиЗаголовок2(Результат, ТекстЗаголовка2, НомерЗаголовка2, МакетОформления);
				НомерЗаголовка2 = НомерЗаголовка2 + 1;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ВыводитьЗаголовок2 Тогда
			Продолжить;
		КонецЕсли;
		
		Текст = ДокументСодержания.Область(НомерСтроки, 3, НомерСтроки, 3).Текст;
		Если НЕ ПустаяСтрока(Текст) Тогда
			ВыводитьТекст = ?(НЕ ПустаяСтрока(ТекстЗаголовка1) ИЛИ НЕ ПустаяСтрока(ТекстЗаголовка2),
				Истина,
				ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций));
			Если ВыводитьТекст Тогда
				ВывестиТекст(Результат, Текст, МакетОформления);
				ВыводитьРазделитель = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТабличныйДокументПриказ(Запись, ПараметрыЗаполнения)
	
	Результат = Новый ТабличныйДокумент;
	
	МакетСодержания   = РегистрыСведений.УчетнаяПолитика.ПолучитьМакет("Приказ");
	ОбластьСодержания = МакетСодержания.ПолучитьОбласть("Содержание");
	ОбластьСодержания.Параметры.Заполнить(ПараметрыЗаполнения);
	Результат.Вывести(ОбластьСодержания);
	
	Возврат Результат;
	
КонецФункции

Функция ТабличныйДокументПланСчетов(ПараметрыЗаполнения)

	Результат = ПланыСчетов.Хозрасчетный.ПечатьПланаСчетов(Ложь, ПараметрыЗаполнения);
	
	Возврат Результат;

КонецФункции

Функция ТаблицаФормДокументовИлиРегистров(ИмяМакетаФорм, ИмяМакетаСписка, Запись, ПараметрыЗаполнения)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Наименование",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Ландшафт",      Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ТабличныйДокумент");
	
	// 1. Перечень всех форм используемых документов или регистров
	
	ПереченьФорм = Новый ТабличныйДокумент;
	
	МакетОформления = РегистрыСведений.УчетнаяПолитика.ПолучитьМакет("МакетОформления");
	МакетСодержания = РегистрыСведений.УчетнаяПолитика.ПолучитьМакет(ИмяМакетаСписка);
	
	ОбластьШапка   = МакетОформления.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ПараметрыЗаполнения);
	ПереченьФорм.Вывести(ОбластьШапка);
	
	ДокументСодержания = МакетСодержания.ПолучитьОбласть("Содержание");
	
	ПараметрыОпций = Новый Структура("Организация,Период", Запись.Организация, НачалоМесяца(Запись.Период));
	ЗначенияОпций  = Новый Соответствие;
	УстановитьДополнительныеЗначенияОпций(ЗначенияОпций, Запись);
	
	ВыводитьЗаголовок1  = Истина;
	ВыводитьЗаголовок2  = Истина;
	ВыводитьРазделитель = Ложь;
	НомерЗаголовка2     = 1;
	
	Для НомерСтроки = 1 По ДокументСодержания.ВысотаТаблицы Цикл
		
		ТекстЗаголовка1 = ДокументСодержания.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		Если НЕ ПустаяСтрока(ТекстЗаголовка1) Тогда
			ВыводитьЗаголовок1 = ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций);
			Если ВыводитьЗаголовок1 Тогда
				Если ВыводитьРазделитель Тогда
					ВывестиРазделитель(ПереченьФорм, МакетОформления);
					ВыводитьРазделитель = Ложь;
				КонецЕсли;
				ВывестиЗаголовок1(ПереченьФорм, ТекстЗаголовка1, МакетОформления);
				НомерЗаголовка2 = 1;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ВыводитьЗаголовок1 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗаголовка2 = ДокументСодержания.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
		Если НЕ ПустаяСтрока(ТекстЗаголовка2) Тогда
			ВыводитьЗаголовок2 = ?(НЕ ПустаяСтрока(ТекстЗаголовка1),
				Истина,
				ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций));
			Если ВыводитьЗаголовок2 Тогда
				Если ВыводитьРазделитель Тогда
					ВывестиРазделитель(ПереченьФорм, МакетОформления);
					ВыводитьРазделитель = Ложь;
				КонецЕсли;
				ВывестиЗаголовок2(ПереченьФорм, ТекстЗаголовка2, НомерЗаголовка2, МакетОформления);
				НомерЗаголовка2 = НомерЗаголовка2 + 1;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ВыводитьЗаголовок2 Тогда
			Продолжить;
		КонецЕсли;
		
		Текст = ДокументСодержания.Область(НомерСтроки, 3, НомерСтроки, 3).Текст;
		Если НЕ ПустаяСтрока(Текст) Тогда
			ВыводитьТекст = ?(НЕ ПустаяСтрока(ТекстЗаголовка1) ИЛИ НЕ ПустаяСтрока(ТекстЗаголовка2),
				Истина,
				ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций));
			Если ВыводитьТекст Тогда
				ВывестиТекст(ПереченьФорм, Текст, МакетОформления);
				ВыводитьРазделитель = Истина;
				Идентификатор = ДокументСодержания.Область(НомерСтроки, 6, НомерСтроки, 6).Текст;
				Если ЗначениеЗаполнено(Идентификатор) Тогда
					НоваяСтрока = Результат.Добавить();
					НоваяСтрока.Наименование  = Текст;
					НоваяСтрока.Идентификатор = Идентификатор;
					НоваяСтрока.Ландшафт      = ДокументСодержания.Область(НомерСтроки, 7, НомерСтроки, 7).Текст = "1";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// 2. Шаблоны всех форм используемых документов или регистров, каждый в отдельном табличном документе
	
	МакетФорм = РегистрыСведений.УчетнаяПолитика.ПолучитьМакет(ИмяМакетаФорм);
	Для каждого СтрокаТаблицы Из Результат Цикл
	
		ФормаДокументаРегистра = Новый ТабличныйДокумент;
		ОбластьДокументаРегистра = МакетФорм.ПолучитьОбласть(СтрокаТаблицы.Идентификатор);
		ФормаДокументаРегистра.Вывести(ОбластьДокументаРегистра);
		ФормаДокументаРегистра.ОриентацияСтраницы = ?(СтрокаТаблицы.Ландшафт, 
			ОриентацияСтраницы.Ландшафт, 
			ОриентацияСтраницы.Портрет);
		ФормаДокументаРегистра.АвтоМасштаб        = Истина;
		СтрокаТаблицы.ТабличныйДокумент  = ФормаДокументаРегистра;
	
	КонецЦикла;
	
	НоваяСтрока = Результат.Вставить(0);
	НоваяСтрока.Наименование      = ПараметрыЗаполнения.ЗаголовокПеречня;
	НоваяСтрока.Идентификатор     = "ПереченьФорм";
	НоваяСтрока.Ландшафт          = Ложь;
	НоваяСтрока.ТабличныйДокумент = ПереченьФорм;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматированныйДокументИзТабличного(ТабличныйДокумент)

	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	
	Для НомерСтроки = 1 По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		СтрокаТаблицы = ТабличныйДокумент.ПолучитьОбласть(НомерСтроки, , НомерСтроки);
		НовыйПараграф = ФорматированныйДокумент.Элементы.Добавить();
		НовыйПараграф.ГоризонтальноеПоложение = СтрокаТаблицы.Область(1, 1, 1, 1).ГоризонтальноеПоложение;
		Для НомерКолонки = 1 По СтрокаТаблицы.ШиринаТаблицы Цикл
			ОбластьЯчейки = СтрокаТаблицы.Область(1, НомерКолонки, 1, НомерКолонки);
			Если НЕ ПустаяСтрока(ОбластьЯчейки.Текст) Тогда
				НовыйЭлемент = НовыйПараграф.Элементы.Добавить(
					?(НовыйПараграф.Элементы.Количество() = 0, "", " ") + ОбластьЯчейки.Текст, 
					Тип("ТекстФорматированногоДокумента"));
				НовыйЭлемент.Шрифт      = ОбластьЯчейки.Шрифт;
				НовыйЭлемент.ЦветТекста = ОбластьЯчейки.ЦветТекста;
				НовыйЭлемент.ЦветФона   = ОбластьЯчейки.ЦветФона;
			КонецЕсли;
		КонецЦикла;
		Если НовыйПараграф.Элементы.Количество() = 0 Тогда
			НовыйПараграф.Элементы.Добавить("", Тип("ПереводСтрокиФорматированногоДокумента"));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ФорматированныйДокумент;

КонецФункции

Функция ПараметрыЗаполненияСодержанияПечатнойФормы(Запись)

	Результат = Новый Структура;
	Результат.Вставить("СпособОценкиМПЗ", 
		УчетнаяПолитика.СпособОценкиМПЗ(Запись.Организация, Запись.Период));
	Результат.Вставить("СпособОценкиТоваровВРознице", 
		УчетнаяПолитика.СпособОценкиТоваровВРознице(Запись.Организация, Запись.Период));
	Результат.Вставить("МетодНачисленияАмортизацииНУ", 
		УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Запись.Организация, Запись.Период));
	Результат.Вставить("ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств", 
		УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Запись.Организация, Запись.Период));
		
	// Резервы отпусков
	НастройкиРезервовОтпусков = УчетЗарплаты.НастройкиРезервовОтпусков(Запись.Организация, Запись.Период);
	Результат.Вставить("НормативОтчисленийВРезервОтпусков", 
		НастройкиРезервовОтпусков.НормативОтчисленийВРезервОтпусков);
	Результат.Вставить("ПредельнаяВеличинаОтчисленийВРезервОтпусков", 
		НастройкиРезервовОтпусков.ПредельнаяВеличинаОтчисленийВРезервОтпусков);
		
	Возврат Результат;

КонецФункции

Процедура УстановитьДополнительныеЗначенияОпций(ЗначенияОпций, Запись)

	СпособУчетаВыпускаГотовойПродукции = УчетнаяПолитика.СпособУчетаВыпускаГотовойПродукции(
		Запись.Организация, Запись.Период);
	ЗначенияОпций.Вставить("УчитыватьОтклоненияОтПлановойСебестоимости",
		СпособУчетаВыпускаГотовойПродукции = Перечисления.СпособыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40);
	
	СпособПогашенияСтоимостиСпецодеждыНУ = УчетнаяПолитика.СпособПогашенияСтоимостиСпецодеждыНУ(
		Запись.Организация, Запись.Период);
	ЗначенияОпций.Вставить("ПогашениеСтоимостиСпецодеждыНУАналогичноБУ",
		СпособПогашенияСтоимостиСпецодеждыНУ = Перечисления.СпособыПогашенияСтоимостиНУ.АналогичноСпособуПринятомуДляБухгалтерскогоУчета);
	
КонецПроцедуры

Функция ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций)
	
	СтрокаОпцийИстина = ДокументСодержания.Область(НомерСтроки, 4, НомерСтроки, 4).Текст;
	ОпцииИстина       = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаОпцийИстина);
	СтрокаОпцийЛожь   = ДокументСодержания.Область(НомерСтроки, 5, НомерСтроки, 5).Текст;
	ОпцииЛожь         = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаОпцийЛожь);
	
	Для каждого ИмяОпции Из ОпцииИстина Цикл
		ЗначениеОпции = ЗначенияОпций[ИмяОпции];
		Если ЗначениеОпции = Неопределено Тогда
			Если Метаданные.ФункциональныеОпции.Найти(ИмяОпции) = Неопределено Тогда
				ВызватьИсключение ("Нет функциональной опции " + ИмяОпции);
			КонецЕсли;
			ЗначениеОпции = ПолучитьФункциональнуюОпцию(ИмяОпции, ПараметрыОпций);
			ЗначенияОпций.Вставить(ИмяОпции, ЗначениеОпции);
		КонецЕсли;
		Если НЕ ЗначениеОпции Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяОпции Из ОпцииЛожь Цикл
		ЗначениеОпции = ЗначенияОпций[ИмяОпции];
		Если ЗначениеОпции = Неопределено Тогда
			Если Метаданные.ФункциональныеОпции.Найти(ИмяОпции) = Неопределено Тогда
				ВызватьИсключение ("Нет функциональной опции " + ИмяОпции);
			КонецЕсли;
			ЗначениеОпции = ПолучитьФункциональнуюОпцию(ИмяОпции, ПараметрыОпций);
			ЗначенияОпций.Вставить(ИмяОпции, ЗначениеОпции);
		КонецЕсли;
		Если ЗначениеОпции Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции

Процедура ВывестиЗаголовок1(ТабличныйДокумент, Текст, МакетОформления)

	ОбластьЗаголовок1 = МакетОформления.ПолучитьОбласть("Заголовок1");
	ОбластьЗаголовок1.Параметры.Заголовок1 = Текст;
	ТабличныйДокумент.Вывести(ОбластьЗаголовок1);

КонецПроцедуры

Процедура ВывестиЗаголовок2(ТабличныйДокумент, Текст, НомерЗаголовка, МакетОформления)

	ОбластьЗаголовок2 = МакетОформления.ПолучитьОбласть("Заголовок2");
	ОбластьЗаголовок2.Параметры.Заголовок2 = ?(НомерЗаголовка > 0, Формат(НомерЗаголовка, "ЧГ=") + ". " + Текст, Текст);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок2);

КонецПроцедуры

Процедура ВывестиТекст(ТабличныйДокумент, Текст, МакетОформления)

	ОбластьТекст = МакетОформления.ПолучитьОбласть("Текст");
	ОбластьТекст.Параметры.Текст = Текст;
	ТабличныйДокумент.Вывести(ОбластьТекст);

КонецПроцедуры

Процедура ВывестиРазделитель(ТабличныйДокумент, МакетОформления)

	ОбластьРазделитель = МакетОформления.ПолучитьОбласть("Разделитель");
	ТабличныйДокумент.Вывести(ОбластьРазделитель);

КонецПроцедуры

Функция ПараметрыЗаполненияШапкиПечатнойФормы(ИмяМакета, Запись)
	
	ДатаПриказа = Запись.Период;
	ПараметрыШапки = Новый Структура;
	ПараметрыШапки.Вставить("НомерПриказа",     "___________");
	ПараметрыШапки.Вставить("ДатаПриказа",      Формат(ДатаПриказа, "ДЛФ=D"));
	ПараметрыШапки.Вставить("НомерПриложения",  "");
	ПараметрыШапки.Вставить("ЗаголовокШапки",   НСтр("ru='Печать учетной политики'"));
	ПараметрыШапки.Вставить("ЗаголовокПеречня", НСтр("ru='Перечень форм'"));
	ПараметрыШапки.Вставить("ЗаголовокФормы",   НСтр("ru='Печать учетной политики'"));
	
	Если ИмяМакета = "Приказ" Тогда
		ПараметрыШапки.ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Приказ об учетной политике от %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Запись.Организация, ДатаПриказа);
		ПараметрыШапки.Вставить("ПолноеНаименованиеОрганизации",    СведенияОбОрганизации.ПолноеНаименование);
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Запись.Организация, ДатаПриказа);
		ПараметрыШапки.Вставить("ДолжностьРуководителяОрганизации", Руководители.РуководительДолжностьПредставление);
		ПараметрыШапки.Вставить("РуководительОрганизации",          Руководители.РуководительПредставление);
	ИначеЕсли ИмяМакета = "УчетнаяПолитикаБУ" Тогда
		ПараметрыШапки.НомерПриложения = 1;
		ПараметрыШапки.ЗаголовокШапки  = НСтр("ru='Учетная политика по бухгалтерскому учету'");
		ПараметрыШапки.ЗаголовокФормы  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Учетная политика БУ на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	ИначеЕсли ИмяМакета = "ПланСчетов" Тогда
		ПараметрыШапки.НомерПриложения = 2;
		ПараметрыШапки.ЗаголовокШапки = НСтр("ru='Рабочий план счетов'");
		ПараметрыШапки.ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Рабочий план счетов на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	ИначеЕсли ИмяМакета = "ПервичныеДокументы" Тогда
		ПараметрыШапки.НомерПриложения  = 3;
		ПараметрыШапки.ЗаголовокШапки   = НСтр("ru='Формы первичных документов'");
		ПараметрыШапки.ЗаголовокПеречня = НСтр("ru='Перечень первичных документов'");
		ПараметрыШапки.ЗаголовокФормы   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Формы первичных документов на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	ИначеЕсли ИмяМакета = "РегистрыБУ" Тогда
		ПараметрыШапки.НомерПриложения  = 4;
		ПараметрыШапки.ЗаголовокШапки   = НСтр("ru='Регистры бухгалтерского учета'");
		ПараметрыШапки.ЗаголовокПеречня = НСтр("ru='Перечень регистров бухгалтерского учета'");
		ПараметрыШапки.ЗаголовокФормы   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Регистры БУ на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	ИначеЕсли ИмяМакета = "УчетнаяПолитикаНУ" Тогда
		ПараметрыШапки.НомерПриложения = 5;
		ПараметрыШапки.ЗаголовокШапки  = НСтр("ru='Учетная политика по налоговому учету'");
		ПараметрыШапки.ЗаголовокФормы  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Учетная политика НУ на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	ИначеЕсли ИмяМакета = "РегистрыНУ" Тогда
		ПараметрыШапки.НомерПриложения  = 6;
		ПараметрыШапки.ЗаголовокШапки   = НСтр("ru='Регистры налогового учета'");
		ПараметрыШапки.ЗаголовокПеречня = НСтр("ru='Перечень регистров налогового учета'");
		ПараметрыШапки.ЗаголовокФормы   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Регистры НУ на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	КонецЕсли;
	
	Возврат ПараметрыШапки;
	
КонецФункции

Функция ВариантБухгалтерскойОтчетностиПоУмолчанию()
	
	Результат = Перечисления.ВариантыБухгалтерскойОтчетности.ОбщиеПравила;
	
	Если НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		Результат = Перечисления.ВариантыБухгалтерскойОтчетности.ДляМалыхПредприятий;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура Подключаемый_ПередЗаписью(Запись) Экспорт
	
	УстановитьПараметрыРезервовПоСомнительнымДолгам(Запись);
	// Проверим, что на плане счетов достаточно аналитики для выбранных настроек учетной политики
	НастройкиУчета.ВключитьРасширеннуюАналитику(НеобходимыеРазрезыАналитики(Запись));
	
КонецПроцедуры

Процедура УстановитьПараметрыРезервовПоСомнительнымДолгам(Запись)
	
	Если Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Запись.Организация) Тогда
		Запись.ФормироватьРезервыПоСомнительнымДолгам = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция НеобходимыеРазрезыАналитики(Запись)
	
	РазрезыАналитики = Новый Массив;
	
	Если Запись.УчитыватьРасходыПоЭлементамЗатрат Тогда
		РазрезыАналитики.Добавить("УчитыватьРасходыПоЭлементамЗатрат");
	КонецЕсли;
	
	Если Запись.УчитыватьРасходыПоСтатьямЗатрат Тогда
		РазрезыАналитики.Добавить("УчитыватьРасходыПоСтатьямЗатрат");
	КонецЕсли;
	
	Возврат РазрезыАналитики;
	
КонецФункции

Функция РезультатЗапросаДокументыБезПлановойСебестоимости(Организация, Период, ТолькоПроверка = Ложь)
	
	// Текст ЗапросПоДокументам ниже может быть модифицирован схемой запроса.
	// В частности:
	// - может быть добавлено условие по периоду записей (если существуют более поздние записи учетной политики)
	// - если запрос выполняется для проверки, то
	//	-- выбирается максимум 1 запись
	//	-- удаляются лишние поля
	//	-- отключается упорядочивание
	ЗапросПоДокументам = Новый Запрос;
	
	ЗапросПоДокументам.УстановитьПараметр("Период",      Период);
	ЗапросПоДокументам.УстановитьПараметр("Организация", Организация);
	
	ЗапросПоДокументам.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукцииУслуг.Регистратор КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ВыпускПродукцииУслуг.Регистратор) КАК Представление,
	|	ВыпускПродукцииУслуг.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииУслуг КАК ВыпускПродукцииУслуг
	|ГДЕ
	|	ВыпускПродукцииУслуг.Период >= &Период
	|	И ВыпускПродукцииУслуг.Организация = &Организация
	|	И НЕ ВыпускПродукцииУслуг.ПрямыеРасходыРаспределятьПоКоличеству
	|	И ВыпускПродукцииУслуг.ПлановаяСтоимость = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыпускПродукцииУслуг.Период,
	|	ВыпускПродукцииУслуг.Регистратор";
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определим дату следующей записи
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(УчетнаяПолитика.Период) КАК Период
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|ГДЕ
	|	УчетнаяПолитика.Период > &Период
	|	И УчетнаяПолитика.Организация = &Организация";
	
	ВыборкаСледующаяЗапись = Запрос.Выполнить().Выбрать();
	ВыборкаСледующаяЗапись.Следующий();
	
	Если НЕ ЗначениеЗаполнено(ВыборкаСледующаяЗапись.Период) И НЕ ТолькоПроверка Тогда
		// Нет более поздних записей учетной политики по выбранной организации.
		// Модификация текста запроса не требуется.
		Возврат ЗапросПоДокументам.Выполнить();
	КонецЕсли; 
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ЗапросПоДокументам.Текст);
	ЗапросВыпускПродукцииУслуг = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	
	Если ЗначениеЗаполнено(ВыборкаСледующаяЗапись.Период) Тогда
		// Ограничим выборку "сверху" датой следующей записи
		ЗапросВыпускПродукцииУслуг.Отбор.Добавить(Новый ВыражениеСхемыЗапроса("ВыпускПродукцииУслуг.Период < &ПериодСледующейЗаписи"));
		ЗапросПоДокументам.УстановитьПараметр("ПериодСледующейЗаписи", ВыборкаСледующаяЗапись.Период);
	КонецЕсли; 
	
	Если ТолькоПроверка Тогда
		
		// Оптимизируем запрос
		ЗапросВыпускПродукцииУслуг.КоличествоПолучаемыхЗаписей = 1;
		
		ЗапросВыпускПродукцииУслуг.ВыбираемыеПоля.Удалить(2);
		ЗапросВыпускПродукцииУслуг.ВыбираемыеПоля.Удалить(1);
		
		СхемаЗапроса.ПакетЗапросов[0].Порядок.Очистить();
		
	КонецЕсли; 
	
	ЗапросПоДокументам.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();	
	
	Возврат ЗапросПоДокументам.Выполнить();

КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

Процедура УстановитьСчетУчетаЗатратПоУмолчанию() Экспорт
	
	Набор = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	Набор.Прочитать();
	
	ОсновнойСчетУчетаЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	ПустойСчетУчетаЗатрат   = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
	Для каждого Запись Из Набор Цикл
		
		Если Запись.ОсновнойСчетУчетаЗатрат = ПустойСчетУчетаЗатрат Тогда
			Запись.ОсновнойСчетУчетаЗатрат = ОсновнойСчетУчетаЗатрат;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор, Истина);
	
КонецПроцедуры

Процедура ВключитьИспользованиеБалансовогоМетодаУчетаОтложенногоНалога() Экспорт
	
	// По-умолчанию, с даты начала обязательного применения изменений, внесенных в ПБУ Приказом Минфина 236н,
	// применяется балансовый метод, а не затратный.
	// Включаем использование балансового метода только в условном будущем - т.е. только при условии,
	// что никакие периоды с начала обязательного применения не закрыты.
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// Выполнение обработчика может приводить к появлению новой записи, поэтому обработка выполняется в главном узле,
		// а ее результаты передаются обменом.
		Возврат;
	КонецЕсли;
	
	ДатаОбязательногоПрименения = НалогНаПрибыльБухгалтерскийУчетКлиентСервер.ДатаНачалаПримененияПриказа236н();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОбязательногоПрименения", ДатаОбязательногоПрименения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаНаДатуПерехода.Период КАК Период,
	|	УчетнаяПолитикаНаДатуПерехода.Организация КАК Организация
	|ПОМЕСТИТЬ ИспользуетсяЗатратныйМетод
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаОбязательногоПрименения, ) КАК УчетнаяПолитикаНаДатуПерехода
	|ГДЕ
	|	УчетнаяПолитикаНаДатуПерехода.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетнаяПолитикаПослеПерехода.Период,
	|	УчетнаяПолитикаПослеПерехода.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитикаПослеПерехода
	|ГДЕ
	|	УчетнаяПолитикаПослеПерехода.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод)
	|	И УчетнаяПолитикаПослеПерехода.Период > &ДатаОбязательногоПрименения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ЕстьРегламентныеОперации
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль)
	|	И РегламентнаяОперация.Организация В
	|			(ВЫБРАТЬ
	|				ИспользуетсяЗатратныйМетод.Организация
	|			ИЗ
	|				ИспользуетсяЗатратныйМетод)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И РегламентнаяОперация.Дата >= &ДатаОбязательногоПрименения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИспользуетсяЗатратныйМетод.Период КАК Период,
	|	ИспользуетсяЗатратныйМетод.Организация КАК Организация
	|ИЗ
	|	ИспользуетсяЗатратныйМетод КАК ИспользуетсяЗатратныйМетод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьРегламентныеОперации КАК ЕстьРегламентныеОперации
	|		ПО ИспользуетсяЗатратныйМетод.Организация = ЕстьРегламентныеОперации.Организация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ИспользуетсяЗатратныйМетод.Организация = Организации.Ссылка
	|ГДЕ
	|	ЕстьРегламентныеОперации.Организация ЕСТЬ NULL
	|	И Организации.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Прочитать();
		
		Если Выборка.Период < ДатаОбязательногоПрименения Тогда
			// Балансовый метод должен быть включен с даты начала обязательного применения.
			// Записи выбираются с даты обязательного применения.
			// То, что при этом выбрана более ранняя запись, означает, что записи на дату обязательного применения нет.
			// Поэтому скопируем предыдущую запись (такая ровно одна на организацию, так как получена из среза последних).
			НаборЗаписей.Отбор.Период.Установить(ДатаОбязательногоПрименения);
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Период = ДатаОбязательногоПрименения;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ВариантУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетод;
		КонецЦикла;
		
		Замещать             = Истина; // Может обновляться существующая запись
		ПередаватьОбменом    = Истина; // Выполнение обработчика может приводить к появлению новых записей
		ВключитьБизнесЛогику = Истина; // Следует выполнить логику, заполняющую значения полей, недоступных с определенного периода
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Замещать, ПередаватьОбменом, ВключитьБизнесЛогику);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьИспользованиеПлановойСебестоимости() Экспорт
	
	Набор = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	Набор.Прочитать();
		
	Для каждого Запись Из Набор Цикл
		Запись.ИспользоватьПлановуюСебестоимость = (Запись.ВыпускПродукции ИЛИ Запись.ОказаниеУслуг);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли