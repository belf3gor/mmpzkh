#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
Функция НастройкиПримененияТребований() Экспорт
	
	Настройки = Новый ТаблицаЗначений;
	Настройки.Колонки.Добавить("Наименование",    Новый ОписаниеТипов("Строка"));
	Настройки.Колонки.Добавить("Задача",          Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера"));
	Настройки.Колонки.Добавить("Варианты",        Новый ОписаниеТипов("ТаблицаЗначений, ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства"));
	Настройки.Колонки.Добавить("ЗаголовокВыбора", Новый ОписаниеТипов("Строка")); // Заголовок переключателя в форме выбора
	Настройки.Колонки.Добавить("ВыбиратьВСписке", Новый ОписаниеТипов("Булево"));
	Настройки.Индексы.Добавить("Задача");
	
	Условия = Перечисления.УсловияПримененияТребованийЗаконодательства;
	
	// Дополнительные страховые взносы сотрудников
	Настройка = ДобавитьНастройку(
		Настройки,
		НСтр("ru = 'Перечисление доп. страховых взносов сотрудников'"),
		"СтраховыеВзносы",
		НСтр("ru = 'Доп. взносы сотрудников'")); // Заголовок выбора
		
	Если Настройка <> Неопределено Тогда
		Вариант = Настройка.Варианты.Добавить();
		Вариант.Условие       = Условия.ПустаяСсылка();
		Вариант.Представление = НСтр("ru = 'Не перечисляются доп. взносы сотрудников'");
		Вариант.ТекстВыбора   = НСтр("ru = 'не перечисляются'");
		
		Вариант = Настройка.Варианты.Добавить();
		Вариант.Условие       = Условия.СтраховыеВзносыСотрудников;
		Вариант.Представление = НСтр("ru = 'Перечисляются доп. взносы сотрудников'");
		Вариант.ТекстВыбора   = НСтр("ru = 'перечисляются'");
	КонецЕсли;
	
	// Алкоголь  
	МетаданныеЗначенийПеречисления = Метаданные.Перечисления.УсловияПримененияТребованийЗаконодательства.ЗначенияПеречисления;
	
	УсловияАлкоголь = Новый Массив;
	УсловияАлкоголь.Добавить(Условия.РозничнаяПродажаАлкоголя);
	УсловияАлкоголь.Добавить(Условия.РозничнаяПродажаПива);
	УсловияАлкоголь.Добавить(Условия.ОптоваяТорговляАлкоголем);
	УсловияАлкоголь.Добавить(Условия.ПроизводствоАлгоколя);
	УсловияАлкоголь.Добавить(Условия.ПеревозкаАлкоголя);
	
	Для Каждого УсловиеАлкоголь Из УсловияАлкоголь Цикл
		
		Представление = "" + УсловиеАлкоголь;
		
		Настройка = ДобавитьНастройку(Настройки,
			Представление,
			"ДекларированиеАлкогольнойПродукции",
			Представление,
			Истина,           // Выбирать в списке
			УсловиеАлкоголь); // Настройка
			
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

Функция ДобавитьНастройку(Настройки, Наименование, КодЗадачи, ЗаголовокВыбора, ВыбиратьВСписке = Ложь, Варианты = Неопределено)
	
	Задача = Справочники.ЗадачиБухгалтера.НайтиПоКоду(КодЗадачи);
	
	Если Задача.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.Наименование       = Наименование;
	НоваяСтрока.Задача             = Задача;
	НоваяСтрока.ЗаголовокВыбора    = ЗаголовокВыбора;
	НоваяСтрока.ВыбиратьВСписке    = ВыбиратьВСписке;
	
	Если Варианты = Неопределено Тогда
		НоваяСтрока.Варианты = РегистрыСведений.НалогиОтчеты.НовыйВариантыДетальнойНастройки();
		НоваяСтрока.Варианты.Колонки.Добавить("Условие",       Новый ОписаниеТипов("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства"));
	Иначе
		НоваяСтрока.Варианты = Варианты;
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция УсловияИзНастроек(Организация) Экспорт
	
	ПроверенныеУсловия = Новый Соответствие;
	
	// Проверим, выполняются ли варианты по умолчанию.
	// Такие варианты выполняются, если пользователь не выбрал какой-либо вытесняющий вариант.
	ВариантыПоУмолчанию = Новый ТаблицаЗначений;
	ВариантыПоУмолчанию.Колонки.Добавить("Основной",    Новый ОписаниеТипов("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства"));
	ВариантыПоУмолчанию.Колонки.Добавить("Вытесняющий", Новый ОписаниеТипов("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства"));
	ВариантыПоУмолчанию.Индексы.Добавить("Вытесняющий");
	
	Для Каждого НаборВариантов Из НастройкиПримененияТребований() Цикл
		
		СпособОписанияВариантов = ТипЗнч(НаборВариантов.Варианты);
		Если СпособОписанияВариантов <> Тип("ТаблицаЗначений")  Тогда
			// Значений по умолчанию нет, вытеснять нечего
			Продолжить;
		КонецЕсли;
			
		КоличествоВариантов = НаборВариантов.Варианты.Количество();
		
		Если КоличествоВариантов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВариантПоУмолчанию = НаборВариантов.Варианты[0].Условие;
		
		Если Не ЗначениеЗаполнено(ВариантПоУмолчанию) Тогда
			// Этот вариант для нас бесполезен - вытеснять нечего
			Продолжить;
		КонецЕсли;
		
		ПроверенныеУсловия.Вставить(ВариантПоУмолчанию, Истина);
		
		Для Индекс = 1 По НаборВариантов.Варианты.Количество()-1 Цикл // Исключаем вариант по умолчанию
			
			НоваяСтрока = ВариантыПоУмолчанию.Добавить();
			НоваяСтрока.Основной    = ВариантПоУмолчанию;
			НоваяСтрока.Вытесняющий = НаборВариантов.Варианты[Индекс].Условие;
			
			ПроверенныеУсловия.Вставить(НоваяСтрока.Вытесняющий, Ложь);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Что выбрал пользователь в настройках списка?
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Настройки.Условие
	|ИЗ
	|	РегистрСведений.ВариантыПримененияТребованийЗаконодательства КАК Настройки
	|ГДЕ
	|	Настройки.Организация = &Организация";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Выбранное условие "включим"
		ПроверенныеУсловия.Вставить(Выборка.Условие, Истина);
		
		// Условия, вытесненные выбранным, "выключим"
		Отбор = Новый Структура;
		Отбор.Вставить("Вытесняющий", Выборка.Условие);
		Для Каждого Вытеснение Из ВариантыПоУмолчанию.НайтиСтроки(Отбор) Цикл
			ПроверенныеУсловия.Вставить(Вытеснение.Основной, Ложь);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПроверенныеУсловия;
	
КонецФункции

// Содержит перечень настроек, которые ранее хранились в этом регистре,
// но затем были перемещены в другие хранилища.
// 
// Возвращаемое значение:
//  ФиксированныйМассив - перечень элементов ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства
//
Функция УсловияПроверяемыеПоДругимНастройкам() Экспорт
	
	Условия = Перечисления.УсловияПримененияТребованийЗаконодательства;
	
	УсловияПроверяемыеПоДругимНастройкам = Новый Массив;
	
	// см. РегистрСведений.УчетнаяПолитика.Ресурсы.ВариантБухгалтерскойОтчетности
	УсловияПроверяемыеПоДругимНастройкам.Добавить(Условия.БухгалтерскаяОтчетностьМалыеПредприятия);
	УсловияПроверяемыеПоДругимНастройкам.Добавить(Условия.БухгалтерскаяОтчетностьНекоммерческиеОрганизации);
	УсловияПроверяемыеПоДругимНастройкам.Добавить(Условия.БухгалтерскаяОтчетностьОбщаяФорма);
	УсловияПроверяемыеПоДругимНастройкам.Добавить(Условия.БухгалтерскаяОтчетностьСоциальноОриентированные);
	
	// см. РегистрСведений.НастройкиУчетаНалогаНаПрибыль.Ресурсы.ПорядокУплатыАвансов
	УсловияПроверяемыеПоДругимНастройкам.Добавить(Условия.НалогНаПрибыльАвансыЕжеквартально);
	УсловияПроверяемыеПоДругимНастройкам.Добавить(Условия.НалогНаПрибыльАвансыЕжемесячно);
	УсловияПроверяемыеПоДругимНастройкам.Добавить(Условия.НалогНаПрибыльАвансыПоФактическойПрибыли);
	
	Возврат Новый ФиксированныйМассив(УсловияПроверяемыеПоДругимНастройкам);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли
