
#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура заполняет  дерево из колекции методанных.
//
&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоПоКоллекцииМетаданных(СписокМакетовДерево,
												КоллекцияМетаданных,
												знач КоллекцияМакетов,
												Фильтр = Неопределено)
	
	Если КоллекцияМакетов Тогда
		ДобавитьКоллекциюМакетов(КоллекцияМетаданных,
								СписокМакетовДерево,
								"ОбщийМакет",
								"Общие макеты",
								Фильтр);
	Иначе
		Для Каждого ЭлементОбъектМД Из КоллекцияМетаданных Цикл
			ДобавитьКоллекциюМакетов(ЭлементОбъектМД.Макеты,
									СписокМакетовДерево,
									ЭлементОбъектМД.ПолноеИмя(),
									ЭлементОбъектМД.Синоним,
									Фильтр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет макет в колекцию.
//
&НаСервереБезКонтекста
Процедура ДобавитьКоллекциюМакетов(Макеты, СписокМакетовДерево, ПолноеИмя, Представление, Фильтр)
	
	Перем ТипМакета;
	
	Если ЗначениеЗаполнено(Фильтр) И Врег(ПолноеИмя) <> ВРег(Фильтр) Тогда
		Возврат;
	КонецЕсли;
	
	ПервыйМакетПФ = Истина;
	
	Для Каждого ЭлементМакет Из Макеты Цикл
		Если ЭтоПечатнаяФорма(ЭлементМакет.Имя, ТипМакета) Тогда
			Если ПервыйМакетПФ Тогда
				НоваяСтрокаОМ = СписокМакетовДерево.Строки.Добавить();
				НоваяСтрокаОМ.ЭтоКлассификатор	= Истина;
				НоваяСтрокаОМ.ПолноеИмяОМ		= ПолноеИмя;
				НоваяСтрокаОМ.Представление		= Представление;
				НоваяСтрокаОМ.Картинка			= ПолучитьКодКартинки(ПолноеИмя);
				ПервыйМакетПФ = Ложь;
			КонецЕсли;
			НоваяСтрокаМакет = НоваяСтрокаОМ.Строки.Добавить();
			НоваяСтрокаМакет.ИмяМакета     = ЭлементМакет.Имя;
			НоваяСтрокаМакет.Представление = ЭлементМакет.Синоним;
			НоваяСтрокаМакет.ТипМакета     = ТипМакета;
			НоваяСтрокаМакет.Использование = Ложь;
			НоваяСтрокаМакет.ИспользованиеСтрока = ПолучитьТекстПоИспользованию(НоваяСтрокаМакет.Использование);
			НоваяСтрокаМакет.ЕстьПользовательскийМакет = Ложь;
			НоваяСтрокаМакет.ЭтоКлассификатор = Ложь;
			НоваяСтрокаМакет.Картинка = ПолучитьКодКартинки(ТипМакета);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет каждый объект метаданных - документ на печатные формы подсистем
// (по префиксу ПФ_<тип печатной формы>) далее заполняет список выбора на форме.
//
&НаСервере
Процедура ЗаполнитьСписокМетаданных(Фильтр = Неопределено)
	
	СписокМакетовДерево = РеквизитФормыВЗначение("СписокМакетов");
	
	ЗаполнитьДеревоПоКоллекцииМетаданных(СписокМакетовДерево, Метаданные.Документы, Ложь, Фильтр);
	// ЗаполнитьДеревоПоКоллекцииМетаданных(СписокМакетовДерево, Метаданные.Обработки, Ложь);
	ЗаполнитьДеревоПоКоллекцииМетаданных(СписокМакетовДерево, Метаданные.Отчеты,    Ложь);
	// ЗаполнитьДеревоПоКоллекцииМетаданных(СписокМакетовДерево, Метаданные.ОбщиеМакеты, Истина);
	ЗаполнитьДеревоПоКоллекцииМетаданных(СписокМакетовДерево, Метаданные.Справочники,    Ложь);
	
	Если СписокМакетовДерево.Строки.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Объект, ИмяМакета, Использование
						|ИЗ
						|	РегистрСведений.УПЖКХ_ПользовательскиеМакетыПечати";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаДерева = СписокМакетовДерево.Строки.Найти(Выборка.Объект, "ПолноеИмяОМ");
			Если СтрокаДерева = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаОписанияМакета = СтрокаДерева.Строки.Найти(Выборка.ИмяМакета, "ИмяМакета");
			Если СтрокаОписанияМакета <> Неопределено Тогда
				СтрокаОписанияМакета.ЕстьПользовательскийМакет = Истина;
				СтрокаОписанияМакета.Использование = Выборка.Использование;
				СтрокаОписанияМакета.ИспользованиеСтрока = 
									 ПолучитьТекстПоИспользованию(СтрокаОписанияМакета.Использование);
				СтрокаОписанияМакета.Картинка = ПолучитьКодКартинки(СтрокаОписанияМакета.ТипМакета)
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(СписокМакетовДерево, "СписокМакетов");
	
КонецПроцедуры // ЗаполнитьСписокМетаданных()

// Проверяет по переданному наименованию макета (из метаданных), что это печатная форма.
//
&НаСервереБезКонтекста
Функция ЭтоПечатнаяФорма(ИмяМакета, ТипМакета = "")
	
	Позиция = Найти(ИмяМакета, "ПФ_DOC");
	Позиция = ?(Позиция = 0, Найти(ИмяМакета, "ПФ_ODT"), Позиция);
	Позиция = ?(Позиция = 0, Найти(ИмяМакета, "ПФ_MXL"), Позиция);
	
	Если Позиция = 0 Тогда
		Возврат Ложь;
	Иначе
		ТипМакета = Сред(ИмяМакета, Позиция + 3, 3);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура используется для установления доступности кнопок формы,
// в зависимости от выбранных данных.
//
&НаКлиенте
Процедура ОбновитьЭлементыУправления()
	
	ВыделенныеСтроки = Элементы.СписокМакетов.ВыделенныеСтроки;
	
	ВсеНеРедактируемые			= Истина;
	ВсеРедактируемые			= Истина;
	ВсеСНеИспользуемымИНеРедактируемымПМ = Истина;
	ЕстьСНеИспользуемымПМ		= Ложь;
	ЕстьСИспользуемымПМ			= Ложь;
	ЕстьВыделенныеЭлементы		= Ложь;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		ЭлементДерева = Элементы.СписокМакетов.ДанныеСтроки(Строка);
		
		Если ЭлементДерева.ЭтоКлассификатор Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьВыделенныеЭлементы = Истина;
		
		Если ЭлементДерева.Редактируется Тогда
			ВсеНеРедактируемые = Ложь;
		Иначе
			ВсеРедактируемые = Ложь;
		КонецЕсли;
		
		Если ЭлементДерева.ЕстьПользовательскийМакет Тогда
			Если ЭлементДерева.Использование Тогда
				ЕстьСИспользуемымПМ = Истина;
				ВсеСНеИспользуемымИНеРедактируемымПМ = Ложь;
			Иначе
				ЕстьСНеИспользуемымПМ = Истина;
				Если ЭлементДерева.Редактируется Тогда
					ВсеСНеИспользуемымИНеРедактируемымПМ = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ВсеСНеИспользуемымИНеРедактируемымПМ = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьВыделенныеЭлементы Тогда
		// Запрещающая политика - закрываем доступность команды если хотя бы один выделенный объект не подходит.
		// Все не редактируемые.
		ОткрытьДляПросмотра	= ВсеНеРедактируемые;
		Редактировать		= ВсеНеРедактируемые;
		// Все редактируемые.
		ЗавершитьРедактирование = ВсеРедактируемые;
		ОтменитьРедактирование = ВсеРедактируемые;
		// У всех есть пользовательский макет, который не редактируется и не используется.
		УдалитьИЗИБ = ВсеСНеИспользуемымИНеРедактируемымПМ;
		// Разрешающая политика - открываем доступность команды если хотя бы один выделенный объект подходит
		// хотя бы один у которого есть пользовательский макет и он не используется.
		ИспользоватьПользовательскийМакет = ЕстьСНеИспользуемымПМ;
		// Хотя бы один у которого есть пользовательский макет и используется.
		ИспользоватьПоставляемыйМакет = ЕстьСИспользуемымПМ;
	Иначе
		ОткрытьДляПросмотра					= Ложь;
		Редактировать						= Ложь;
		ЗавершитьРедактирование				= Ложь;
		ОтменитьРедактирование				= Ложь;
		УдалитьИЗИБ							= Ложь;
		ИспользоватьПользовательскийМакет	= Ложь;
		ИспользоватьПоставляемыйМакет		= Ложь;
	КонецЕсли;
	
	Элементы.СписокМакетовОткрытьДляПросмотра.Доступность				= ОткрытьДляПросмотра;
	Элементы.СписокМакетовРедактировать.Доступность						= Редактировать;
	Элементы.СписокМакетовЗавершитьРедактирование.Доступность			= ЗавершитьРедактирование;
	Элементы.СписокМакетовОтменитьРедактирование.Доступность			= ОтменитьРедактирование;
	Элементы.СписокМакетовУдалитьИЗИБ.Доступность						= УдалитьИЗИБ;
	
	Элементы.СписокМакетовИспользоватьПользовательскийМакет.Доступность	= ИспользоватьПользовательскийМакет;
	Элементы.СписокМакетовИспользоватьПоставляемыйМакет.Доступность		= ИспользоватьПоставляемыйМакет;
	
	Элементы.КонтекстноеМенюСписокМакетовИспользоватьПользовательскийМакет.Доступность = 
																		   ИспользоватьПользовательскийМакет;
	Элементы.КонтекстноеМенюСписокМакетовИспользоватьПоставляемыйМакет.Доступность	   = 
																		   ИспользоватьПоставляемыйМакет;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//                 ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ УПРАВЛЕНИЯ МАКЕТАМИ                //
////////////////////////////////////////////////////////////////////////////////

// Процедура обознчает отличие макета от макета поставки.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекстПоИспользованию(знач Использование)
	
	Если Использование Тогда
		Возврат НСтр("ru = 'Измененный макет'");
	Иначе
		Возврат НСтр("ru = 'Поставляемый макет'");
	КонецЕсли;
	
КонецФункции

// Процедура переводит макет в двоичные данные.
//
&НаСервереБезКонтекста
Функция ПолучитьДвоичныеДанныеМакетов(ПутиКМакетам)
	
	СоотвДвоичныеДанные = Новый Соответствие;
	
	Для Каждого ПутьКМакету Из ПутиКМакетам Цикл
		Данные = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет(ПутьКМакету.Значение + "." + ПутьКМакету.Ключ);
		Если ТипЗнч(Данные) = Тип("ТабличныйДокумент") Тогда
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			Данные.Записать(ИмяВременногоФайла);
			Данные = Новый ДвоичныеДанные(ИмяВременногоФайла);
			// Заглушка, так как регистр в 3.0 не используется.
			//УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли;
		СоотвДвоичныеДанные.Вставить(
					ПутьКМакету.Ключ,
					Данные);
	КонецЦикла;
	
	Возврат СоотвДвоичныеДанные;
	
КонецФункции

// Процедура сохраняет макет печатной формы на диск.
//
&НаКлиенте
Функция СохранитьМакетПечатнойФормыНаДиск(ДвоичныеДанныеМакета, ТипМакета)
#Если Не ВебКлиент Тогда
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(ТипМакета);
	ДвоичныеДанныеМакета.Записать(ИмяВременногоФайла);
	
	Возврат ИмяВременногоФайла;
#КонецЕсли
КонецФункции

// Процедура фиксирует в регистре флаг спользования макета.
//
&НаСервереБезКонтекста
Процедура УстановитьИспользованиеМакета(УстанавливаемыеМакеты, Использование)
	
	Для Каждого Макет Из УстанавливаемыеМакеты Цикл
		Запись = РегистрыСведений.УПЖКХ_ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
		Запись.Объект				= Макет.ИмяОМ;
		Запись.ИмяМакета	= Макет.ИмяМакета;
		Запись.Прочитать();
		Если НЕ ПустаяСтрока(Запись.Объект) Тогда
			Запись.Использование		= Использование;
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает макет по ОМ и имени.
//
&НаСервереБезКонтекста
Функция ПолучитьМакетПечатнойФормы(знач НаименованиеОМ, знач ИмяМакета)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет(НаименованиеОМ+"."+ИмяМакета);
	
КонецФункции

// Функция возвращает макет по пути к файлу, ОМ и имени.
//
&НаСервереБезКонтекста
Функция ПолучитьМакетПечатнойФормыСДиска(знач ПутьКМакетуНаДиске, знач НаименованиеОМ, знач ИмяМакета)
	
	ТабличныйДокумент = Неопределено;
	
	Файл = Новый Файл(ПутьКМакетуНаДиске);
	
	// Заглушка, так как регистр в 3.0 не используется.
	//Если Файл.Существует() Тогда
	//	ТабличныйДокумент = Новый ТабличныйДокумент;
	//	Попытка
	//		ТабличныйДокумент.Прочитать(ПутьКМакетуНаДиске);
	//	Исключение
	ТабличныйДокумент = Неопределено;
	//	КонецПопытки;
	//КонецЕсли;
	
	Если ТабличныйДокумент = Неопределено Тогда
		ТабличныйДокумент = ПолучитьМакетПечатнойФормы(НаименованиеОМ, ИмяМакета);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура сохраняет макет в базе даннях.
//
&НаСервереБезКонтекста
Процедура СохранитьМакетыВИнформационнойБазе(знач СохраняемыеМакеты, знач ПомещенныеФайлы = Неопределено)
	
	Для Каждого СохраняемыйМакет Из СохраняемыеМакеты Цикл
		
		Запись = РегистрыСведений.УПЖКХ_ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
		
		Запись.Объект				= СохраняемыйМакет.ИмяОМ;
		Запись.ИмяМакета			= СохраняемыйМакет.ИмяМакета;
		Запись.Использование		= Истина;
		
		Если ПомещенныеФайлы <> Неопределено Тогда
			Значение = ПолучитьДвоичныеДанныеПолученногоФайлаПоИмениМакета(СохраняемыйМакет.ИмяМакета, ПомещенныеФайлы);
			Запись.Макет = Новый ХранилищеЗначения(Значение, Новый СжатиеДанных(9));
		Иначе
			Запись.Макет = Новый ХранилищеЗначения(СохраняемыйМакет.ДанныеМакета, Новый СжатиеДанных(9));
		КонецЕсли;
		
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает двоичные данные файла с диска.
//
&НаСервереБезКонтекста
Функция ПолучитьДвоичныеДанныеПолученногоФайлаПоИмениМакета(ИмяМакета, ПомещенныеФайлы)
	
	Для Каждого ОписаниеПередаваемогоФайла ИЗ ПомещенныеФайлы Цикл
		ИмяФайла = ОписаниеПередаваемогоФайла.Имя;
		ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4);
		Пока Найти(ИмяФайла, "\") <> 0 Цикл
			Позиция = Найти(ИмяФайла, "\");
			ИмяФайла = Прав(ИмяФайла, СтрДлина(ИмяФайла) - Позиция);
		КонецЦикла;
		Если ВРег(ИмяФайла) = ВРег(ИмяМакета) Тогда
			Возврат ПолучитьИзВременногоХранилища(ОписаниеПередаваемогоФайла.Хранение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Удаляет пользовательский макет из информационной базы.
//
&НаСервереБезКонтекста
Процедура УдалитьМакетИзИнформационнойБазы(УдаляемыеМакеты)
	
	Для Каждого УдаляемыйМакет Из УдаляемыеМакеты Цикл
		МенеджерЗаписи = РегистрыСведений.УПЖКХ_ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = УдаляемыйМакет.ПолноеИмяОМ;
		МенеджерЗаписи.ИмяМакета = УдаляемыйМакет.ИмяМакета;
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает тип ИБ.
Функция ИнформационнаяБазаФайловая()
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
КонецФункции

// Процедура открывает макет печатной формы.
//
&НаКлиенте
Процедура ОткрытьМакетыПечатнойФормы(знач Редактировать = Ложь)
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПродолжитьОткрытиеМакетовПечатнойФормы", ЭтотОбъект, Новый Структура("Редактировать", Редактировать)));
	
КонецПроцедуры

// Процедура показывает макет печатной формы (для макетов формата MXL).
// 
&НаКлиенте
Процедура ПоказатьМакетПечатнойФормы_MXL(ПутьКФайлуМакета, знач НаименованиеОМ, знач ИмяМакета, ТипМакета, Представление, Редактируется, Редактировать)
	
	// Заглушка, так как регистр в 3.0 не используется.
	//Если Редактируется Тогда
	//	ТабличныйДокумент = ПолучитьМакетПечатнойФормыСДиска(ПутьКФайлуМакета, НаименованиеОМ, ИмяМакета);
	//	ТабличныйДокумент.Показать(Представление, ПутьКФайлуМакета);
	//Иначе
	//	ТабличныйДокумент = ПолучитьМакетПечатнойФормы(НаименованиеОМ, ИмяМакета);
	//	Если Редактировать Тогда
	//		ПутьКФайлуМакета = ПолучитьИмяВременногоФайла(ТипМакета);
	//		ТабличныйДокумент.Показать(Представление, ПутьКФайлуМакета);
	//		Редактируется = Истина;
	//	Иначе
	//		ТабличныйДокумент.Показать(Представление);
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значение для использования макетов.
//
&НаКлиенте
Процедура УстановитьИспользованиеМакетаПоЗначению(Значение)
	
	УстанавливаемыеМакеты = Новый Массив;
	
	ВыделенныеСтроки = Элементы.СписокМакетов.ВыделенныеСтроки;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ЭлементДерева = Элементы.СписокМакетов.ДанныеСтроки(Строка);
		
		Если ЭлементДерева.ЭтоКлассификатор Тогда
			Продолжить;
		КонецЕсли;
		
		Если Значение И НЕ ЭлементДерева.ЕстьПользовательскийМакет Тогда
			Продолжить;
		КонецЕсли;
			
		УстанавливаемыеМакеты.Добавить(Новый Структура("ИмяОМ, ИмяМакета",
														ЭлементДерева.ПолучитьРодителя().ПолноеИмяОМ,
														ЭлементДерева.ИмяМакета));
		ЭлементДерева.Использование = Значение;
		ЭлементДерева.ИспользованиеСтрока = ПолучитьТекстПоИспользованию(ЭлементДерева.Использование);
		ЭлементДерева.Картинка = ПолучитьКодКартинки(ЭлементДерева.ТипМакета);
	КонецЦикла;
	
	Если УстанавливаемыеМакеты.Количество() > 0 Тогда
		УстановитьИспользованиеМакета(УстанавливаемыеМакеты, Значение);
	КонецЕсли;
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

// Получить номер картинки по типу макету и его использованию.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКодКартинки(ТипМакетаИмяОМ)
	
	Если		ВРег(ТипМакетаИмяОМ) = "DOC" Тогда
		Картинка = 0;
	ИначеЕсли	ВРег(ТипМакетаИмяОМ) = "ODT" Тогда
		Картинка = 1;
	ИначеЕсли	ВРег(ТипМакетаИмяОМ) = "MXL" Тогда
		Картинка = 2;
	Иначе
		ИмяВладельца = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТипМакетаИмяОМ, ".")[0];
		Если		ВРег(ИмяВладельца) = "ДОКУМЕНТ" Тогда
			Картинка = 4;
		ИначеЕсли	ВРег(ИмяВладельца) = "ОБРАБОТКА" Тогда
			Картинка = 3;
		ИначеЕсли	ВРег(ИмяВладельца) = "ОБЩИЕМАКЕТЫ" Тогда
			Картинка = 5;
		Иначе
			Картинка = 4;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции // ПолучитьКодКартинки()

////////////////////////////////////////////////////////////////////////////////
//                 ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ УПРАВЛЕНИЯ МАКЕТАМИ                //
////////////////////////////////////////////////////////////////////////////////

// Процедура открывает макет из файла.
//
#Если ВебКлиент Тогда

&НаКлиенте
Процедура ОткрытьФайл(ИмяОткрываемогоФайла)
	
	Попытка
		// Изначально процедура предназначена для открытия ссылок в браузере, но и в данном случае подойдет.
		УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере(ИмяОткрываемогоФайла);
	Исключение
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Описание=""%1""'"),
						ИнформацияОбОшибке().Описание));
	КонецПопытки;
	
КонецПроцедуры // ОткрытьФайл()

#КонецЕсли

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
//                      ОБРАБОТЧИКИ СОБЫТИЯ КОМАНД ФОРМЫ                      //
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиКомандФормы

// Процедура обработчуик команды "ОткрытьДляПросмотра".
//
&НаКлиенте
Процедура ОткрытьДляПросмотра(Команда)
	
	ОткрытьМакетыПечатнойФормы(Ложь);
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает ответ о предложении подключения расширения работы с файлами.
//
Процедура ПродолжитьОткрытиеМакетовПечатнойФормы(Подключено, ПараметрыСохранения) Экспорт
	
	Если Подключено = Истина Тогда
		
		Редактировать = ПараметрыСохранения.Редактировать;
		
		ВыделенныеСтроки = Элементы.СписокМакетов.ВыделенныеСтроки;
		ИБФайловая = ИнформационнаяБазаФайловая();
		
	#Если ВебКлиент Тогда
		ПутиКМакетам = Новый Соответствие;
		ТипыМакетов = Новый Соответствие;
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			
			ЭлементДерева = Элементы.СписокМакетов.ДанныеСтроки(Строка);
			
			Если ЭлементДерева.ЭтоКлассификатор Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементДерева.Редактируется Тогда
				Продолжить;
			КонецЕсли;
			
			ПутиКМакетам.Вставить(ЭлементДерева.ИмяМакета, ЭлементДерева.ПолучитьРодителя().ПолноеИмяОМ);
			ТипыМакетов.Вставить(ЭлементДерева.ИмяМакета, ЭлементДерева.ТипМакета);
		КонецЦикла;
		НаборДвоичныхДанных = ПолучитьДвоичныеДанныеМакетов(ПутиКМакетам);
		
		ПриведенныйНаборДвоичныхДанных = Новый Соответствие;
		
		Для Каждого ТипМакета Из ТипыМакетов Цикл
			ПриведенныйНаборДвоичныхДанных.Вставить(ТипМакета.Ключ+"."+ТипМакета.Значение, НаборДвоичныхДанных[ТипМакета.Ключ]);
		КонецЦикла;
		
		Результат = ПолучитьФайлыВКаталогФайловПечати(ПутьККаталогуФайловПечати, 
																					ПриведенныйНаборДвоичныхДанных);
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПутьККаталогуФайловПечати = Результат;
		
		ТекстПредупреждения = "";
		
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			ЭлементДерева = Элементы.СписокМакетов.ДанныеСтроки(Строка);
			Если ЭлементДерева.ЭтоКлассификатор Тогда
				Продолжить;
			КонецЕсли;
			
			ПутьКФайлуМакета = ПутьККаталогуФайловПечати + ЭлементДерева.ИмяМакета + "." + ЭлементДерева.ТипМакета;
			
			Если ЭлементДерева.ТипМакета = "MXL" И Редактировать Тогда
				ТекстПредупреждения = ?(ПустаяСтрока(ТекстПредупреждения),
										НСтр("ru = 'Файлы макетов табличных документов сохранены на диск.'"),
										ТекстПредупреждения);
										
				ТекстПредупреждения = ТекстПредупреждения
						+ Символы.ПС
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Макет ""%1"" сохранен на диск под именем
										|""%2"".'"),
							ЭлементДерева.ИмяМакета,
							ПутьКФайлуМакета);
			Иначе
				ОткрытьФайл(ПутьКФайлуМакета);
			КонецЕсли;
			
			Если Редактировать Тогда
				ЭлементДерева.Редактируется = Истина;
				ЭлементДерева.ПутьКФайлуМакета = ПутьКФайлуМакета;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	#Иначе
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			ЭлементДерева = Элементы.СписокМакетов.ДанныеСтроки(Строка);
			
			Если ЭлементДерева.ЭтоКлассификатор Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементДерева.Редактируется Тогда
				Если ЭлементДерева.ТипМакета = "MXL" Тогда
					Если ИБФайловая Тогда
						ПоказатьМакетПечатнойФормы_MXL(ЭлементДерева.ПутьКФайлуМакета, ЭлементДерева.ПолучитьРодителя().ПолноеИмяОМ,
													   ЭлементДерева.ИмяМакета,        ЭлементДерева.ТипМакета,
													   ЭлементДерева.Представление,    ЭлементДерева.Редактируется,
													   Редактировать);
					Иначе
						ТабличныйДокумент = ПолучитьМакетПечатнойФормыСДиска(ЭлементДерева.ПутьКФайлуМакета,
																			 ЭлементДерева.ПолучитьРодителя().ПолноеИмяОМ,
																			 ЭлементДерева.ИмяМакета);
						ТабличныйДокумент.Показать(ЭлементДерева.Представление, ЭлементДерева.ПутьКФайлуМакета);
					КонецЕсли;
				Иначе
					// Изначально процедура предназначена для открытия ссылок в браузере, но и в данном случае подойдет.
					УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере(ЭлементДерева.ПутьКФайлуМакета)
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если ЭлементДерева.ТипМакета = "MXL" Тогда
				Если ИБФайловая Тогда
					ПоказатьМакетПечатнойФормы_MXL(ЭлементДерева.ПутьКФайлуМакета, ЭлементДерева.ПолучитьРодителя().ПолноеИмяОМ,
												   ЭлементДерева.ИмяМакета,        ЭлементДерева.ТипМакета,
												   ЭлементДерева.Представление,    ЭлементДерева.Редактируется,
												   Редактировать);
				Иначе
					ТабличныйДокумент = ПолучитьМакетПечатнойФормы(ЭлементДерева.ПолучитьРодителя().ПолноеИмяОМ, ЭлементДерева.ИмяМакета);
					Если Редактировать Тогда
						ПутьКФайлуМакета = ПолучитьИмяВременногоФайла(ЭлементДерева.ТипМакета);
						ТабличныйДокумент.Показать(ЭлементДерева.Представление, ПутьКФайлуМакета);
						ЭлементДерева.ПутьКФайлуМакета = ПутьКФайлуМакета;
						ЭлементДерева.Редактируется = Истина;
					Иначе
						ТабличныйДокумент.Показать(ЭлементДерева.Представление);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ДвоичныеДанныеМакета = ПолучитьМакетПечатнойФормы(
										ЭлементДерева.ПолучитьРодителя().ПолноеИмяОМ,
										ЭлементДерева.ИмяМакета);
				
				ПутьКФайлуМакета = СохранитьМакетПечатнойФормыНаДиск(ДвоичныеДанныеМакета, ЭлементДерева.ТипМакета);
				
				// Изначально процедура предназначена для открытия ссылок в браузере, но и в данном случае подойдет.
				УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере(ПутьКФайлуМакета);
				Если Редактировать Тогда
					ЭлементДерева.Редактируется = Истина;
					ЭлементДерева.ПутьКФайлуМакета = ПутьКФайлуМакета;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
		
		ОбновитьЭлементыУправления();
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для открытия и редактирования макетов необходимо 
						| подключить расширение для работы с файлами в Веб-клиенте.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчуик команды "Редактировать".
//
&НаКлиенте
Процедура Редактировать(Команда)
	
	ОткрытьМакетыПечатнойФормы(Истина);
	
КонецПроцедуры

// Процедура обработчуик команды "ЗавершитьРедактирование".
//
&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	СохраняемыеМакеты = Новый Массив;
	
#Если ВебКлиент Тогда
	ПомещаемыеФайлы = Новый Массив;
	ПомещенныеФайлы = Новый Массив;
#КонецЕсли
	
	ВыделенныеСтроки = Элементы.СписокМакетов.ВыделенныеСтроки;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		ЭлементДерева = Элементы.СписокМакетов.ДанныеСтроки(Строка);
		Если ЭлементДерева.ЭтоКлассификатор Тогда
			Продолжить;
		КонецЕсли;
		
		Файл = Новый Файл(ЭлементДерева.ПутьКФайлуМакета);
		
		// Заглушка, так как регистр в 3.0 не используется.
//		Если Файл.Существует() Тогда
//#Если ВебКлиент Тогда
//			ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, ""));
//			СохраняемыеМакеты.Добавить(Новый Структура("ИмяОМ, ИмяМакета",
//											ЭлементДерева.ПолучитьРодителя().ПолноеИмяОМ,
//											ЭлементДерева.ИмяМакета));
//#Иначе
//			Попытка
//				ДанныеМакета = Новый ДвоичныеДанные(ЭлементДерева.ПутьКФайлуМакета)
//			Исключение
//				СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
//				СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС
//						 + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//							НСтр("ru = 'Убедитесь, что приложение работы с файлом %1 закрыто'"),
//							ЭлементДерева.Представление);
//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		Продолжить;
//			КонецПопытки;
//			
//			СохраняемыеМакеты.Добавить(Новый Структура("ИмяОМ, ИмяМакета, ДанныеМакета",
//											ЭлементДерева.ПолучитьРодителя().ПолноеИмяОМ,
//											ЭлементДерева.ИмяМакета,
//											ДанныеМакета));

//			УдалитьФайлы(ЭлементДерева.ПутьКФайлуМакета);
//			
//			ЭлементДерева.Использование = Истина;
//			ЭлементДерева.ИспользованиеСтрока = ПолучитьТекстПоИспользованию(ЭлементДерева.Использование);
//			ЭлементДерева.ЕстьПользовательскийМакет = Истина;
//			ЭлементДерева.Картинка = ПолучитьКодКартинки(ЭлементДерева.ТипМакета);
//#КонецЕсли
//		КонецЕсли;
#Если НЕ ВебКлиент Тогда
		ЭлементДерева.Редактируется = Ложь;
		ЭлементДерева.ПутьКФайлуМакета = "";
#КонецЕсли
	КонецЦикла;
	
#Если ВебКлиент Тогда
	Попытка
		// Заглушка, так как регистр в 3.0 не используется.
		//Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь) Тогда
		//	ПоказатьПредупреждение(, НСтр("ru = 'Ошибка при помещении файлов в хранилище.'"));
		Возврат;
		//КонецЕсли;
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при помещении файла в хранилище: %1. Убедитесь, что приложение работы с файлом закрыто.'"),
					 СообщениеОбОшибке));
		Возврат;
	КонецПопытки;
#КонецЕсли

#Если ВебКлиент Тогда
	СохранитьМакетыВИнформационнойБазе(СохраняемыеМакеты, ПомещенныеФайлы);
	
	ВыделенныеСтроки = Элементы.СписокМакетов.ВыделенныеСтроки;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		ЭлементДерева = Элементы.СписокМакетов.ДанныеСтроки(Строка);
		Если ЭлементДерева.ЭтоКлассификатор Тогда
			Продолжить;
		КонецЕсли;
		
		Файл = Новый Файл(ЭлементДерева.ПутьКФайлуМакета);
		
		// Заглушка, так как регистр в 3.0 не используется.
		//Если Файл.Существует() Тогда
		//	УдалитьФайлы(ЭлементДерева.ПутьКФайлуМакета);
		//КонецЕсли;
		
		ЭлементДерева.Использование = Истина;
		ЭлементДерева.ИспользованиеСтрока = ПолучитьТекстПоИспользованию(ЭлементДерева.Использование);
		ЭлементДерева.ЕстьПользовательскийМакет = Истина;
		ЭлементДерева.Картинка = ПолучитьКодКартинки(ЭлементДерева.ТипМакета);
		ЭлементДерева.Редактируется = Ложь;
		ЭлементДерева.ПутьКФайлуМакета = "";
	КонецЦикла;
#Иначе
	СохранитьМакетыВИнформационнойБазе(СохраняемыеМакеты);
#КонецЕсли

    КоличествоМакетов = ВыделенныеСтроки.Количество();
	Если КоличествоМакетов = 1 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Макет изменен'"),, 
			Элементы.СписокМакетов.ДанныеСтроки(ВыделенныеСтроки[0]).Представление);
	ИначеЕсли КоличествоМакетов > 1 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Макеты изменены'"),,
			НСтр("ru = 'Количество макетов: '") + КоличествоМакетов);
	КонецЕсли;
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

// Процедура обработчуик команды "ОтменитьРедактирование".
//
&НаКлиенте
Процедура ОтменитьРедактирование(Команда)
	
	ВыделенныеСтроки = Элементы.СписокМакетов.ВыделенныеСтроки;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		ЭлементДерева = Элементы.СписокМакетов.ДанныеСтроки(Строка);
		Если ЭлементДерева.ЭтоКлассификатор Тогда
			Продолжить;
		КонецЕсли;
		// Заглушка, так как регистр в 3.0 не используется.
		//УдалитьФайлы(ЭлементДерева.ПутьКФайлуМакета);
		ЭлементДерева.Редактируется = Ложь;
		ЭлементДерева.ПутьКФайлуМакета = "";
	КонецЦикла;
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

// Процедура обработчуик команды "УдалитьИЗИБ".
//
&НаКлиенте
Процедура УдалитьИЗИБ(Команда)
	
	УдаляемыеМакеты = Новый Массив;
	
	ВыделенныеСтроки = Элементы.СписокМакетов.ВыделенныеСтроки;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		ЭлементДерева = Элементы.СписокМакетов.ДанныеСтроки(Строка);
		Если ЭлементДерева.ЭтоКлассификатор Тогда
			Продолжить;
		КонецЕсли;
		
		УдаляемыеМакеты.Добавить(Новый Структура("ПолноеИмяОМ, ИмяМакета",
									ЭлементДерева.ПолучитьРодителя().ПолноеИмяОМ,
									ЭлементДерева.ИмяМакета));
		ЭлементДерева.ЕстьПользовательскийМакет = Ложь;
	КонецЦикла;
	
	Если УдаляемыеМакеты.Количество() > 0 Тогда
		УдалитьМакетИзИнформационнойБазы(УдаляемыеМакеты);
		ОбновитьЭлементыУправления();
	КонецЕсли;
	
    КоличествоМакетов = ВыделенныеСтроки.Количество();
	Если КоличествоМакетов = 1 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Удален пользовательский макет'"),,
			Элементы.СписокМакетов.ДанныеСтроки(ВыделенныеСтроки[0]).Представление);
	ИначеЕсли КоличествоМакетов > 1 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Удалены пользовательские макеты'"),,
			НСтр("ru = 'Количество макетов: '" + КоличествоМакетов));
	КонецЕсли;

	
КонецПроцедуры

// Процедура обработчуик команды "ИспользоватьПользовательскийМакет".
//
&НаКлиенте
Процедура ИспользоватьПользовательскийМакет(Команда)
	
	УстановитьИспользованиеМакетаПоЗначению(Истина);
	
КонецПроцедуры

// Процедура обработчуик команды "ИспользоватьПоставляемыйМакет".
//
&НаКлиенте
Процедура ИспользоватьПоставляемыйМакет(Команда)
	
	УстановитьИспользованиеМакетаПоЗначению(Ложь);
	
КонецПроцедуры

// Процедура обработчуик команды "СохранитьНастройкиРежимаОткрытияМакета".
//
&НаСервереБезКонтекста
Процедура СохранитьНастройкиРежимаОткрытияМакета(СпрашиватьРежимОткрытияМакета, РежимОткрытияМакетаПросмотр)
	
	ХранилищеОбщихНастроек.Сохранить("НастройкаОткрытияМакетов", 
									 "СпрашиватьРежимОткрытияМакета", 
									 СпрашиватьРежимОткрытияМакета);
	ХранилищеОбщихНастроек.Сохранить("НастройкаОткрытияМакетов", 
									 "РежимОткрытияМакетаПросмотр", 
									 РежимОткрытияМакетаПросмотр);
	
КонецПроцедуры

// Процедура обработчуик команды "НастройкиРежимаОткрытияМакета".
//
&НаКлиенте
Процедура НастройкиРежимаОткрытияМакета(Команда)
	
	Результат = Неопределено;
		//ОткрытьФормуМодально(
		//		"РегистрСведений.УПЖКХ_ПользовательскиеМакетыПечати.Форма.ВыбораРежимаОткрытияМакета");
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		РежимОткрытияМакетаПросмотр = Результат.РежимОткрытияПросмотр;
		СпрашиватьРежимОткрытияМакета = НЕ Результат.БольшеНеСпрашивать;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
//         ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ             //
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик создания на стороне сервера.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем Фильтр;
	
	Если Параметры.Свойство("Фильтр") Тогда
		Фильтр = Параметры.Фильтр.Метаданные().ПолноеИмя();
	КонецЕсли;
	
	ЗаполнитьСписокМетаданных(Фильтр);
	
	ПутьККаталогуФайловПечати = УПЖКХ_ТиповыеМетодыСервер.ПолучитьЛокальныйКаталогФайловПечати();
	
	Значение = ХранилищеОбщихНастроек.Загрузить("НастройкаОткрытияМакетов", "СпрашиватьРежимОткрытияМакета");
	
	Если Значение = Неопределено Тогда
		СпрашиватьРежимОткрытияМакета = Истина;
	Иначе
		СпрашиватьРежимОткрытияМакета = Значение;
	КонецЕсли;
	
	Значение = ХранилищеОбщихНастроек.Загрузить("НастройкаОткрытияМакетов", "РежимОткрытияМакетаПросмотр");
	
	Если Значение = Неопределено Тогда
		РежимОткрытияМакетаПросмотр = Ложь;
	Иначе
		РежимОткрытияМакетаПросмотр = Значение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует список макетов по строке.
//
&НаКлиенте
Процедура СписокМакетовПриАктивизацииСтроки(Элемент)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы. Данное событие
// возникает перед закрытием формы, до закрытия окна.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверкаРедактируемыхМакетов Тогда
	
		ЕстьРедактируемые = Ложь;
		
		Для Каждого ГруппаМакетов Из СписокМакетов.ПолучитьЭлементы() Цикл
			ЭлементыГруппы = ГруппаМакетов.ПолучитьЭлементы();
			Для Каждого ЭлементОМ Из ЭлементыГруппы Цикл
				Если ЭлементОМ.Редактируется Тогда
					ЕстьРедактируемые = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьРедактируемые Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьРедактируемые Тогда
			ВопросПередЗакрытиемФормы = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормыЗавершение", ЭтаФорма);
			ПоказатьВопрос(ВопросПередЗакрытиемФормы, "ru = 'Внимание, в списке остались макеты отмеченные как редактируемые. 
			|Продолжить с закрытием формы?'", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемФормыЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПроверкаРедактируемыхМакетов = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает спсок макетов для выбора.
//
&НаКлиенте
Процедура СписокМакетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.СписокМакетов.ДанныеСтроки(ВыбраннаяСтрока).ЭтоКлассификатор Тогда
		Возврат;
	КонецЕсли;
	
	Если СпрашиватьРежимОткрытияМакета Тогда
		
		Результат = Неопределено;
			 //ОткрытьФормуМодально(
			 //       "РегистрСведений.УПЖКХ_ПользовательскиеМакетыПечати.Форма.ВыбораРежимаОткрытияМакета");
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			РежимОткрытияМакетаПросмотр = Результат.РежимОткрытияПросмотр;
			СпрашиватьРежимОткрытияМакета = НЕ Результат.БольшеНеСпрашивать;
			Если Результат.БольшеНеСпрашивать Тогда
				СохранитьНастройкиРежимаОткрытияМакета(СпрашиватьРежимОткрытияМакета, РежимОткрытияМакетаПросмотр);
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьМакетыПечатнойФормы(НЕ РежимОткрытияМакетаПросмотр);
	
КонецПроцедуры

&НаКлиенте
// Функция получает файл(ы) c сервера в локальный каталог на диск и возвращает
// имя каталога, в который они были сохранены.
// Параметры:
//  ПутьККаталогу - строка - путь к каталогу, в который должны быть сохранены файлы.
//  ПолучаемыеФайлы - соответствие - 
//                         ключ  - имя файла
//                         значение - двоичные данные файла.
//
Функция ПолучитьФайлыВКаталогФайловПечати(ПутьККаталогу, ПолучаемыеФайлы)
	
	ТребуетсяУстановитьКаталогПечати = Не ЗначениеЗаполнено(ПутьККаталогу);
	Если Не ТребуетсяУстановитьКаталогПечати Тогда
		Файл = Новый Файл(ПутьККаталогу);
		// Заглушка, так как регистр в 3.0 не используется.
		//Если НЕ Файл.Существует() Тогда
		ТребуетсяУстановитьКаталогПечати = Истина;
		//КонецЕсли;
	КонецЕсли;
	
	Если ТребуетсяУстановитьКаталогПечати Тогда
		// Регистр не используется, формы в типовом механизме нет.
		//Результат = ОткрытьФормуМодально("РегистрСведений.ПользовательскиеМакетыПечати.Форма.НастройкаКаталогаФайловПечати");
		//Если ТипЗнч(Результат) <> Тип("Строка") Тогда
			Возврат Неопределено;
		//КонецЕсли;
		//ПутьККаталогу = Результат;
	КонецЕсли;
	
	ПовторятьПечать = Истина;
	
	Пока ПовторятьПечать Цикл
		ПовторятьПечать = Ложь;
		Попытка
			ФайлыВоВременномХранилище = ПолучитьАдресаФайловВоВременномХранилище(ПолучаемыеФайлы);
			
			ОписанияФайлов = Новый Массив;
			
			Для Каждого ФайлВоВременномХранилище Из ФайлыВоВременномХранилище Цикл
				ОписанияФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ФайлВоВременномХранилище.Ключ,ФайлВоВременномХранилище.Значение));
			КонецЦикла;
			
			// Заглушка, так как регистр в 3.0 не используется.
			//Если НЕ ПолучитьФайлы(ОписанияФайлов, , ПутьККаталогу, Ложь) Тогда
			Возврат Неопределено;
			//КонецЕсли;
		Исключение
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			// Регистр не используется, формы в типовом механизме нет.
			//Результат = ОткрытьФормуМодально("РегистрСведений.ПользовательскиеМакетыПечати.Форма.ДиалогПовтораПечати", Новый Структура("СообщениеОбОшибке", СообщениеОбОшибке));
			//Если ТипЗнч(Результат) = Тип("Строка") Тогда
			//	ПовторятьПечать = Истина;
			//	ПутьККаталогу = Результат;
			//Иначе
				Возврат Неопределено;
			//КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	Если Прав(ПутьККаталогу, 1) <> "\" Тогда
		ПутьККаталогу = ПутьККаталогу + "\";
	КонецЕсли;
	
	Возврат ПутьККаталогу;
	
КонецФункции

&НаКлиенте
// Помещает набор двоичных данных во временное хранилище.
// Параметры:
//  НаборЗначений - соответствие, ключ - ключ, связанный с двоичными данными
// 								  значение - ДвоичныеДанные.
// Возвращаемое значение:
//  Соответствие: ключ - ключ, связанный с адресом во временном хранилище
//               значение - адрес во временном хранилище.
//
Функция ПолучитьАдресаФайловВоВременномХранилище(НаборЗначений)
	
	Результат = Новый Соответствие;
	
	Для Каждого КлючЗначение Из НаборЗначений Цикл
		Результат.Вставить(КлючЗначение.Ключ, ПоместитьВоВременноеХранилище(КлючЗначение.Значение));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
