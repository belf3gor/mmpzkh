#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус документа
//
// Параметры:
//  Документ             - ДокументСсылка.* - документ
//  Статус               - ПеречислениеСсылка.* - новый статус документа
//  ДополнительныйСтатус - ПеречислениеСсылка.* - новый дополнительный статус документа
//
// Возвращаемое значение:
//  Булево - Истина, если статус документа изменен
//
Функция УстановитьСтатусыДокумента(Документ, Статус = Неопределено, ДополнительныйСтатус = Неопределено, СтатусСчетаФактуры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Документ) Тогда
		МассивДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ);
		СтатусИзменен = УстановитьСтатусыДокументов(МассивДокументов, Статус, ДополнительныйСтатус, СтатусСчетаФактуры);
	Иначе
		СтатусИзменен = Ложь;
	КонецЕсли;
	
	Возврат СтатусИзменен;
	
КонецФункции

// Устанавливает статус нескольких документов.
// Статус может быть измененен только у тех документов, на редактирование которых у пользователя есть права.
//
// Параметры:
//  МассивДокументов     - Массив - содержит ссылки на документы (должны быть одного вида!)
//  Статус               - ПеречислениеСсылка.* - новый статус документа, Неопределено, если статус менять не нужно
//  ДополнительныйСтатус - ПеречислениеСсылка.* - новый дополнительный статус документа, Неопределено, если статус менять не нужно
//
// Возвращаемое значение:
//  Булево - Истина, если статус хотя бы одного документа изменен
//
Функция УстановитьСтатусыДокументов(МассивДокументов, Статус = Неопределено, ДополнительныйСтатус = Неопределено, СтатусСчетаФактуры = Неопределено) Экспорт
	
	СтатусИзменен = Ложь;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат СтатусИзменен;
	КонецЕсли;
	
	ИзменитьСтатус = (Статус <> Неопределено);
	ИзменитьДополнительныйСтатус = (ДополнительныйСтатус <> Неопределено);
	ИзменитьСтатусСчетаФактуры = (СтатусСчетаФактуры <> Неопределено);
	
	Если Не ИзменитьСтатус 
		И Не ИзменитьДополнительныйСтатус 
		И Не ИзменитьСтатусСчетаФактуры Тогда
		Возврат СтатусИзменен;
	КонецЕсли;
	
	СтатусыПоУмолчанию = СтатусНовогоДокумента(МассивДокументов[0]);
	
	// Убедимся, что документ поддерживает установку статусов (должен быть определен статус по умолчанию).
	Если СтатусыПоУмолчанию.Статус = Неопределено Тогда
		Возврат СтатусИзменен;
	КонецЕсли;
	
	МетаданныеДокумента = МассивДокументов[0].Метаданные();
	ВыполнитьПроверкуПравДоступа("Редактирование", МетаданныеДокумента);
	
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	ВремяНачалаОперации = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("СтатусОплатыПоУмолчанию", СтатусыПоУмолчанию.Статус);
	Запрос.УстановитьПараметр("ДополнительныйСтатусПоУмолчанию", СтатусыПоУмолчанию.ДополнительныйСтатус);
	Запрос.УстановитьПараметр("СтатусСчетаФактурыПоУмолчанию", Перечисления.СтатусыСчетаФактуры.ПустаяСсылка());
	
	ТекстЗапроса = // Имя таблицы с документами может быть заменено ниже
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокументов.Организация КАК Организация,
	|	ТаблицаДокументов.Ссылка КАК Документ,
	|	ЕСТЬNULL(СтатусыДокументов.Статус, &СтатусОплатыПоУмолчанию) КАК Статус,
	|	ЕСТЬNULL(СтатусыДокументов.ДополнительныйСтатус, &ДополнительныйСтатусПоУмолчанию) КАК ДополнительныйСтатус,
	|	ЕСТЬNULL(СтатусыДокументов.СтатусСчетаФактуры, &СтатусСчетаФактурыПоУмолчанию) КАК СтатусСчетаФактуры
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО ТаблицаДокументов.Организация = СтатусыДокументов.Организация
	|			И ТаблицаДокументов.Ссылка = СтатусыДокументов.Документ
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "СчетНаОплатуПокупателю", ИмяДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если (Не ИзменитьСтатус Или Выборка.Статус = Статус)
			И (Не ИзменитьДополнительныйСтатус Или Выборка.ДополнительныйСтатус = ДополнительныйСтатус) 
			И (Не ИзменитьСтатусСчетаФактуры Или Выборка.СтатусСчетаФактуры = СтатусСчетаФактуры) Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если ИнтеграцияCRMПовтИсп.ИнтеграцияВИнформационнойБазеВключена()
			И (Выборка.Статус <> Статус ИЛИ Выборка.ДополнительныйСтатус <> ДополнительныйСтатус) Тогда
			РегистрыСведений.ДокументыИнтеграцииCRM.ЗарегистрироватьКОтправке(Выборка.Документ);
		КонецЕсли;
		
		// При записи набора, удаляем статусы, относящиеся к другой организации
		НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Если ИзменитьСтатус Тогда
			Запись.Статус = Статус;
		КонецЕсли;
		Если ИзменитьДополнительныйСтатус Тогда
			Запись.ДополнительныйСтатус = ДополнительныйСтатус;
		КонецЕсли;
		Если ИзменитьСтатусСчетаФактуры Тогда
			Запись.СтатусСчетаФактуры = СтатусСчетаФактуры;
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		СтатусИзменен = Истина;
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(
		"УстановкаСтатуса",
		ВремяНачалаОперации,
		МассивДокументов.Количество(),
		Строка(ТипЗнч(МассивДокументов[0])));
	
	Возврат СтатусИзменен;
	
КонецФункции

// Возвращает текущий статус документа
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация
//  Документ    - ДокументСсылка.* - документ
//
// Возвращаемое значение:
//  Структура - стуктура статусов документа со свойствами:
//    * Статус - ПеречислениеСсылка - основной статус документа
//    * ДополнительныйСтатус - ПеречислениеСсылка - дополнительный статус документа
//
Функция ПолучитьСтатусыДокумента(Документ, Организация) Экспорт
	
	Если ЗначениеЗаполнено(Документ) Тогда
		КоллекцияСтатусов = ПолучитьСтатусыДокументов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ), Организация);
		СтатусыДокумента = КоллекцияСтатусов[Документ];
	КонецЕсли;
	
	Если СтатусыДокумента = Неопределено Тогда
		СтатусыДокумента = СтатусНовогоДокумента(Документ);
	КонецЕсли;
	
	Возврат СтатусыДокумента;
	
КонецФункции

// Возвращает текущие статусы документов
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы
//  Организация- СправочникСсылка.Организации - организация
//
// Возвращаемое значение:
//  Соответствие:
//    Ключ - ссылка на документ
//    Значение - Структура статусов документа со свойствами:
//      * Статус - ПеречислениеСсылка - основной статус документа
//      * ДополнительныйСтатус - ПеречислениеСсылка - дополнительный статус документа
//
Функция ПолучитьСтатусыДокументов(МассивДокументов, Организация = Неопределено) Экспорт
	
	КоллекцияСтатусов = Новый Соответствие;
	Для Каждого Документ Из МассивДокументов Цикл
		КоллекцияСтатусов.Вставить(Документ, СтатусНовогоДокумента(Документ));
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатусыДокументов.Документ,
	|	СтатусыДокументов.Статус,
	|	СтатусыДокументов.ДополнительныйСтатус
	|ИЗ
	|	РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|ГДЕ
	|	&УсловиеПоОрганизации
	|	И СтатусыДокументов.Документ В(&МассивДокументов)";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Если Организация <> Неопределено Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
		УсловиеПоОрганизации = "СтатусыДокументов.Организация = &Организация";
	Иначе
		УсловиеПоОрганизации = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеПоОрганизации", УсловиеПоОрганизации);
	
	// Данные о статусах не считаем секретными и для производительности читаем их привилегированно,
	// так как они читаются при открытии формы.
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(КоллекцияСтатусов[Выборка.Документ], Выборка);
	КонецЦикла;
	
	Возврат КоллекцияСтатусов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает статус документа по умолчанию
//
// Параметры:
//   Документ - ДокументСсылка - ссылка на документ
//
// Возвращаемое значение:
//  Структура - стуктура статусов документа со свойствами:
//    * Статус - ПеречислениеСсылка - основной статус документа
//    * ДополнительныйСтатус - ПеречислениеСсылка - дополнительный статус документа
//
Функция СтатусНовогоДокумента(Документ)
	
	Результат = Новый Структура("Статус, ДополнительныйСтатус");
	
	ТипДокумента = ТипЗнч(Документ);
	
	Если ТипДокумента = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		Результат.Статус = Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента();
		Результат.ДополнительныйСтатус = Перечисления.СтатусыОтгрузки.СтатусНовогоДокумента();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		Результат.Статус = Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента();
		Результат.ДополнительныйСтатус = Перечисления.СтатусыПоступленияПоСчету.СтатусНовогоДокумента();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		
		Результат.Статус = Перечисления.СтатусыДокументовРеализации.СтатусНовогоДокумента();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		Результат.Статус = Перечисления.СтатусыДокументовПоступления.СтатусНовогоДокумента();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработка обновления ИБ.
// Выполняет первоначальное заполнение статусов счетов на оплату и переносит
// статусы оплаты из шапки в регистр сведений, если статусы уже использовались.
//
Процедура ЗаполнитьСтатусыОплатыСчетов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Организация КАК Организация,
	|	СчетНаОплатуПокупателю.Ссылка КАК Документ,
	|	СчетНаОплатуПокупателю.УдалитьСтатусОплаты КАК Статус
	|ПОМЕСТИТЬ ВТ_СчетНаОплатуПокупателю
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО СчетНаОплатуПокупателю.Организация = СтатусыДокументов.Организация
	|			И СчетНаОплатуПокупателю.Ссылка = СтатусыДокументов.Документ
	|ГДЕ
	|	СтатусыДокументов.Документ ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетНаОплатуПокупателю.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Организация,
	|	СчетНаОплатуПокупателю.Документ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату ЕСТЬ NULL 
	|					И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату ЕСТЬ NULL 
	|					И ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетНаОплату ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Оплачен
	|ИЗ
	|	ВТ_СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|		ПО СчетНаОплатуПокупателю.Документ = ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|		ПО СчетНаОплатуПокупателю.Документ = ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаПлатежнойКартойРасшифровкаПлатежа
	|		ПО СчетНаОплатуПокупателю.Документ = ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетНаОплату
	|ГДЕ
	|	СчетНаОплатуПокупателю.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплатуПокупателю.Организация,
	|	СчетНаОплатуПокупателю.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Организация,
	|	СчетНаОплатуПокупателю.Документ,
	|	СчетНаОплатуПокупателю.Статус
	|ИЗ
	|	ВТ_СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.ПустаяСсылка)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
	
	ПорцияЗаписи = 1000;
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Статус = ?(Выборка.Оплачен, Перечисления.СтатусОплатыСчета.Оплачен, Перечисления.СтатусОплатыСчета.Неоплачен);
		
		Если НаборЗаписей.Количество() >= ПорцияЗаписи Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			НаборЗаписей.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Выборка = Результат[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		Если НаборЗаписей.Количество() >= ПорцияЗаписи Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			НаборЗаписей.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		НаборЗаписей.Очистить();
	КонецЕсли;
	
КонецПроцедуры

// Обработка обновления ИБ.
// Заполняет новый ДополнительныйСтатус счетов на оплату покупателю.
//
Процедура ЗаполнитьДополнительныеСтатусыСчетовНаОплату() Экспорт
	
	// Чтобы не анализировать товарный состав всех старых документов,
	// считаем счет полностью отгруженным, если сумма реализаций больше
	// или равна сумме счета
	
	СтатусОплатыПоУмолчанию   = Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента();
	СтатусОтгрузкиПоУмолчанию = Перечисления.СтатусыОтгрузки.СтатусНовогоДокумента();
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("СтатусОплатыПоУмолчанию",   СтатусОплатыПоУмолчанию);
	Запрос.Параметры.Вставить("СтатусОтгрузкиПоУмолчанию", СтатусОтгрузкиПоУмолчанию);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю,
	|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю.СуммаДокумента КАК СуммаСчета,
	|	СУММА(РеализацияТоваровУслуг.СуммаДокумента) КАК СуммаРеализации
	|ПОМЕСТИТЬ ВТ_Реализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.СчетНаОплатуПокупателю <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю,
	|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю.СуммаДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетНаОплатуПокупателю
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реализации.Организация КАК Организация,
	|	Реализации.СчетНаОплатуПокупателю КАК Документ,
	|	ЕСТЬNULL(СтатусыДокументов.Статус, &СтатусОплатыПоУмолчанию) КАК Статус,
	|	ВЫБОР
	|		КОГДА Реализации.СуммаРеализации >= Реализации.СуммаСчета
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузки.Отгружен)
	|		КОГДА Реализации.СуммаРеализации > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузки.ОтгруженЧастично)
	|		ИНАЧЕ &СтатусОтгрузкиПоУмолчанию
	|	КОНЕЦ КАК ДополнительныйСтатус
	|ИЗ
	|	ВТ_Реализации КАК Реализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО Реализации.Организация = СтатусыДокументов.Организация
	|			И Реализации.СчетНаОплатуПокупателю = СтатусыДокументов.Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтатусыДокументов.Организация,
	|	СтатусыДокументов.Документ,
	|	СтатусыДокументов.Статус,
	|	&СтатусОтгрузкиПоУмолчанию
	|ИЗ
	|	РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Реализации КАК Реализации
	|		ПО СтатусыДокументов.Организация = Реализации.Организация
	|			И СтатусыДокументов.Документ = Реализации.СчетНаОплатуПокупателю
	|ГДЕ
	|	Реализации.СчетНаОплатуПокупателю ЕСТЬ NULL 
	|	И СтатусыДокументов.Статус <> &СтатусОплатыПоУмолчанию";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПорцияЗаписи = 1000;
	
	НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Статус = СтатусОплатыПоУмолчанию И Выборка.ДополнительныйСтатус = СтатусОтгрузкиПоУмолчанию Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		Если НаборЗаписей.Количество() >= ПорцияЗаписи Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Ложь);
			НаборЗаписей.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Ложь);
		НаборЗаписей.Очистить();
	КонецЕсли;
	
КонецПроцедуры

// Обработка обновления ИБ. Заполняет новый ДополнительныйСтатус счетов от поставщиков.
//
Процедура ЗаполнитьДополнительныеСтатусыСчетовОтПоставщиков(Параметры) Экспорт
	
	// Выбираем счета от поставщика, кроме тех, по которым дополнительный статус в регистре уже заполнен,
	// по которым либо есть проведенные поступления (устанавливаем дополнительный статус Получен или ПолученЧастично),
	// либо нет поступлений, но есть запись в регистре (оплаченные счета, устанавливаем дополнительный статус НеПолучен).
	// Чтобы не анализировать товарный состав всех старых документов,
	// считаем счет полностью полученным, если сумма поступлений больше или равна сумме счета.
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("СтатусНеПолучен", Перечисления.СтатусыПоступленияПоСчету.НеПолучен);
	Запрос.Параметры.Вставить("СтатусПолучен",   Перечисления.СтатусыПоступленияПоСчету.Получен);
	Запрос.Параметры.Вставить("СтатусПолученЧастично", Перечисления.СтатусыПоступленияПоСчету.ПолученЧастично);
	ДополнительныеСтатусы = Новый Массив;
	ДополнительныеСтатусы.Добавить(Перечисления.СтатусыПоступленияПоСчету.НеПолучен);
	ДополнительныеСтатусы.Добавить(Перечисления.СтатусыПоступленияПоСчету.Получен);
	ДополнительныеСтатусы.Добавить(Перечисления.СтатусыПоступленияПоСчету.ПолученЧастично);
	Запрос.Параметры.Вставить("ДополнительныеСтатусы", ДополнительныеСтатусы);
	Запрос.Параметры.Вставить("СтатусПоУмолчанию", Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента());
	Запрос.Параметры.Вставить("ПустойСчет", Документы.СчетНаОплатуПокупателю.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СчетНаОплату.Ссылка КАК Документ,
	|	СчетНаОплату.Организация КАК Организация,
	|	СчетНаОплату.Дата КАК Дата,
	|	ЕСТЬNULL(СтатусыДокументов.Статус, &СтатусПоУмолчанию) КАК Статус,
	|	ВЫБОР
	|		КОГДА СУММА(ЕСТЬNULL(ПоступлениеТоваровУслуг.СуммаДокумента, 0)) = 0
	|			ТОГДА &СтатусНеПолучен
	|		КОГДА СУММА(ЕСТЬNULL(ПоступлениеТоваровУслуг.СуммаДокумента, 0)) < СчетНаОплату.СуммаДокумента
	|			ТОГДА &СтатусПолученЧастично
	|		ИНАЧЕ &СтатусПолучен
	|	КОНЕЦ КАК ДополнительныйСтатус
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО СчетНаОплату.Ссылка = ПоступлениеТоваровУслуг.СчетНаОплатуПоставщика
	|			И (ПоступлениеТоваровУслуг.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО СчетНаОплату.Организация = СтатусыДокументов.Организация
	|			И СчетНаОплату.Ссылка = СтатусыДокументов.Документ
	|ГДЕ
	|	(ПоступлениеТоваровУслуг.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ СтатусыДокументов.Документ ЕСТЬ НЕ NULL )
	|	И НЕ(СтатусыДокументов.Документ ЕСТЬ НЕ NULL 
	|				И СтатусыДокументов.ДополнительныйСтатус В (&ДополнительныеСтатусы))
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплату.Ссылка,
	|	СчетНаОплату.Организация,
	|	ЕСТЬNULL(СтатусыДокументов.Статус, &СтатусПоУмолчанию),
	|	СчетНаОплату.Дата,
	|	СчетНаОплату.СуммаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Документ УБЫВ";
	
	НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
	
	Пока Истина Цикл
	
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		ОбработаноОбъектов = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
				ОбработаноОбъектов = ОбработаноОбъектов + 1;
				НаборЗаписей.Очистить();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось заполнить статус поступления документа %1 по причине:
						|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Выборка.Документ,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.Документы.СчетНаОплатуПоставщика, 
					Выборка.Документ, 
					ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
		
		Если ОбработаноОбъектов > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьДополнительныеСтатусыСчетовОтПоставщиков: обработано документов: %1'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				ОбработаноОбъектов);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,
				Метаданные.Документы.СчетНаОплатуПоставщика,
				,
				ТекстСообщения);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьДополнительныеСтатусыСчетовОтПоставщиков: не удалось обработать документов: %1'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				Выборка.Количество());
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры


// Обработка обновления ИБ. Заполняет статусы счетов-фактур по документам "Поступление".
//
Процедура ЗаполнитьСтатусыСчетовФактурПоДокументамПоступления(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("СтатусПоУмолчанию", Перечисления.СтатусыДокументовПоступления.СтатусНовогоДокумента());
	Запрос.Параметры.Вставить("ДополнительныйСтатусПоУмолчанию",  Перечисления.СтатусыОтгрузки.СтатусНовогоДокумента());
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.Ссылка КАК Документ,
	|	ЕСТЬNULL(СтатусыДокументов.Статус, &СтатусПоУмолчанию) КАК Статус,
	|	ЕСТЬNULL(СтатусыДокументов.ДополнительныйСтатус, &ДополнительныйСтатусПоУмолчанию) КАК ДополнительныйСтатус,
	|	СчетФактураПолученныйДокументыОснования.Ссылка КАК СчетФактура,
	|	ПоступлениеТоваровУслуг.Дата КАК Дата,
	|	ПоступлениеТоваровУслуг.НДСНеВыделять КАК НДСНеВыделять
	|ПОМЕСТИТЬ ТаблицаПоступлений
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ПО ПоступлениеТоваровУслуг.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование
	|			И (НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО ПоступлениеТоваровУслуг.Ссылка = СтатусыДокументов.Документ
	|ГДЕ
	|	ЕСТЬNULL(СтатусыДокументов.СтатусСчетаФактуры, ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОборудование.Ссылка КАК Документ,
	|	ПоступлениеТоваровУслугОборудование.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ТаблицаСуммНДС
	|ИЗ
	|	ТаблицаПоступлений КАК ТаблицаПоступлений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|		ПО ТаблицаПоступлений.Документ = ПоступлениеТоваровУслугОборудование.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка,
	|	ПоступлениеТоваровУслугОбъектыСтроительства.СуммаНДС
	|ИЗ
	|	ТаблицаПоступлений КАК ТаблицаПоступлений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК ПоступлениеТоваровУслугОбъектыСтроительства
	|		ПО ТаблицаПоступлений.Документ = ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Ссылка,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС
	|ИЗ
	|	ТаблицаПоступлений КАК ТаблицаПоступлений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО ТаблицаПоступлений.Документ = ПоступлениеТоваровУслугТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугУслуги.Ссылка,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС
	|ИЗ
	|	ТаблицаПоступлений КАК ТаблицаПоступлений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|		ПО ТаблицаПоступлений.Документ = ПоступлениеТоваровУслугУслуги.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугАгентскиеУслуги.Ссылка,
	|	ПоступлениеТоваровУслугАгентскиеУслуги.СуммаНДС
	|ИЗ
	|	ТаблицаПоступлений КАК ТаблицаПоступлений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.АгентскиеУслуги КАК ПоступлениеТоваровУслугАгентскиеУслуги
	|		ПО ТаблицаПоступлений.Документ = ПоступлениеТоваровУслугАгентскиеУслуги.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОсновныеСредства.Ссылка,
	|	ПоступлениеТоваровУслугОсновныеСредства.СуммаНДС
	|ИЗ
	|	ТаблицаПоступлений КАК ТаблицаПоступлений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.ОсновныеСредства КАК ПоступлениеТоваровУслугОсновныеСредства
	|		ПО ТаблицаПоступлений.Документ = ПоступлениеТоваровУслугОсновныеСредства.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСуммНДС.Документ КАК Документ,
	|	СУММА(ТаблицаСуммНДС.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ТаблицаНДССводная
	|ИЗ
	|	ТаблицаСуммНДС КАК ТаблицаСуммНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСуммНДС.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоступлений.Организация КАК Организация,
	|	ТаблицаПоступлений.Документ КАК Документ,
	|	ТаблицаПоступлений.Статус КАК Статус,
	|	ТаблицаПоступлений.ДополнительныйСтатус КАК ДополнительныйСтатус,
	|	ТаблицаНДССводная.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаПоступлений.СчетФактура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ТаблицаНДССводная.СуммаНДС, 0) = 0
	|							ИЛИ ДоговорыКонтрагентов.УчетАгентскогоНДС
	|							ИЛИ ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
	|							ИЛИ ТаблицаПоступлений.НДСНеВыделять
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.НеТребуется)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.Отсутствует)
	|				КОНЕЦ
	|		КОГДА ТаблицаПоступлений.СчетФактура.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.Проведен)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.НеПроведен)
	|	КОНЕЦ КАК СтатусСчетаФактуры
	|ИЗ
	|	ТаблицаПоступлений КАК ТаблицаПоступлений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНДССводная КАК ТаблицаНДССводная
	|		ПО ТаблицаПоступлений.Документ = ТаблицаНДССводная.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ТаблицаПоступлений.Документ.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПоступлений.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
	
	ОбработаноОбъектов = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			НаборЗаписей.Очистить();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить статус счета-фактуры для документа %1 по причине:
				|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Выборка.Документ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПоступлениеТоваровУслуг, 
				Выборка.Документ, 
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработаноОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура ЗаполнитьСтатусыСчетовФактур: обработано документов: %1'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), 
			ОбработаноОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ПоступлениеТоваровУслуг,
			,
			ТекстСообщения);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура ЗаполнитьДополнительныеСтатусыСчетовОтПоставщиков: не удалось обработать документов: %1'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), 
			Выборка.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Обработка обновления ИБ. Заполняет статусы счетов-фактур по документам "Реализация".
//
Процедура ЗаполнитьСтатусыСчетовФактурПоДокументамРеализация(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("СтатусПоУмолчанию", Перечисления.СтатусыДокументовРеализации.СтатусНовогоДокумента());
	Запрос.Параметры.Вставить("ДополнительныйСтатусПоУмолчанию",  Перечисления.СтатусыОтгрузки.СтатусНовогоДокумента());
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	ЕСТЬNULL(СтатусыДокументов.Статус, &СтатусПоУмолчанию) КАК Статус,
	|	ЕСТЬNULL(СтатусыДокументов.ДополнительныйСтатус, &ДополнительныйСтатусПоУмолчанию) КАК ДополнительныйСтатус,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
	|							ИЛИ РеализацияТоваровУслуг.ДокументБезНДС
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.НеТребуется)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.Отсутствует)
	|				КОНЕЦ
	|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.Проведен)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.НеПроведен)
	|	КОНЕЦ КАК СтатусСчетаФактуры
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО (РеализацияТоваровУслуг.Ссылка = СчетФактураВыданныйДокументыОснования.ДокументОснование
	|				И НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО РеализацияТоваровУслуг.Ссылка = СтатусыДокументов.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО РеализацияТоваровУслуг.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(СтатусыДокументов.СтатусСчетаФактуры, ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияТоваровУслуг.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
	
	ОбработаноОбъектов = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			НаборЗаписей.Очистить();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить статус счета-фактуры для документа %1 по причине:
				|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Выборка.Документ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РеализацияТоваровУслуг, 
				Выборка.Документ, 
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработаноОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура ЗаполнитьСтатусыСчетовФактур: обработано документов: %1'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), 
			ОбработаноОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.РеализацияТоваровУслуг,
			,
			ТекстСообщения);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура ЗаполнитьДополнительныеСтатусыСчетовОтПоставщиков: не удалось обработать документов: %1'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), 
			Выборка.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления 3.0.60.3
// Заполняет статусы счетов-фактур по документам "ПоступлениеДопРасходов".
//
Процедура ЗаполнитьСтатусыСчетовФактурПоДокументамПоступленияДопРасходов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("СтатусПоУмолчанию", Перечисления.СтатусыДокументовПоступления.СтатусНовогоДокумента());
	Запрос.Параметры.Вставить("ДополнительныйСтатусПоУмолчанию",  Перечисления.СтатусыОтгрузки.СтатусНовогоДокумента());
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПоступлениеДопРасходов.Организация КАК Организация,
	|	ПоступлениеДопРасходов.Ссылка КАК Документ,
	|	ЕСТЬNULL(СтатусыДокументов.Статус, &СтатусПоУмолчанию) КАК Статус,
	|	ЕСТЬNULL(СтатусыДокументов.ДополнительныйСтатус, &ДополнительныйСтатусПоУмолчанию) КАК ДополнительныйСтатус,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ПоступлениеДопРасходов.СуммаНДС = 0
	|							ИЛИ ДоговорыКонтрагентов.УчетАгентскогоНДС
	|							ИЛИ ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
	|							ИЛИ ПоступлениеДопРасходов.НДСНеВыделять
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.НеТребуется)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.Отсутствует)
	|				КОНЕЦ
	|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.Проведен)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.НеПроведен)
	|	КОНЕЦ КАК СтатусСчетаФактуры
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ПО ПоступлениеДопРасходов.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование
	|			И (НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО ПоступлениеДопРасходов.Ссылка = СтатусыДокументов.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ПоступлениеДопРасходов.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(СтатусыДокументов.СтатусСчетаФактуры, ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыСчетаФактуры.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеДопРасходов.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
	
	ОбработаноОбъектов = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			НаборЗаписей.Очистить();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить статус счета-фактуры для документа %1 по причине:
				|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Выборка.Документ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПоступлениеДопРасходов, 
				Выборка.Документ, 
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработаноОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура ЗаполнитьСтатусыСчетовФактурПоДокументамПоступленияДопРасходов: обработано документов: %1'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), 
			ОбработаноОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ПоступлениеДопРасходов,
			,
			ТекстСообщения);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура ЗаполнитьСтатусыСчетовФактурПоДокументамПоступленияДопРасходов: не удалось обработать документов: %1'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), 
			Выборка.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли