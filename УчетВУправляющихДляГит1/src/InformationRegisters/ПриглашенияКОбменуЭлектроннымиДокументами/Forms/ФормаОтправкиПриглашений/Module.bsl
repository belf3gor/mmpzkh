
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	МассоваяОтправка            = Ложь;
	КнопкаНазадДоступна         = Ложь;
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор;
	
	ЕстьПравоНастройкиОбмена = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
	СтатусПодключения = Перечисления.СтатусыПриглашений.ТребуетсяОтправить;
	
	// Работа из мастера подключений
	Параметры.Свойство("КнопкаНазадДоступна", КнопкаНазадДоступна);
	Элементы.НазадЗакрыть.Видимость = КнопкаНазадДоступна = Истина;
	
	ПараметрыОткрытия = Новый Структура("Получатель, СписокУчетныхЗаписей, Организация, ИНН, КПП,
		|ИдентификаторОрганизации, ИдентификаторКонтрагента, Ключ");
	
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, Параметры);
	
	ЗаполнитьПоКлючу(ПараметрыОткрытия);
	
	ПодготовитьФормуНаСервере(ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ДлительнаяОперация <> Неопределено Тогда
		Описание = Новый ОписаниеОповещения("ПолучениеИдентификаторовКонтрагентаЗавершение", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
	КонецЕсли;
	
#Если ВебКлиент Тогда
	Элементы.СкопироватьОписание.Видимость = Ложь;
#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Отбор = Новый Структура("Выбран", Истина);
	НайденныеСтроки = Приглашения.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		
		Если ПустаяСтрока(СтрокаТЧ.УчетнаяЗапись) И ПустаяСтрока(СтрокаТЧ.ЭлектроннаяПочта) Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'В строке %1 не выбрана ни учетная запись, ни адрес электронной почты.'"), Приглашения.Индекс(СтрокаТЧ) + 1);
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, , "Приглашения["+Приглашения.Индекс(СтрокаТЧ)+"].ЭлектроннаяПочта",, Отказ);
		КонецЕсли;
		
		Если СтрокаТЧ.ЭлектроннаяПочтаНеДействительна Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'В строке %1 указан недействительный адрес электронной почты'"), Приглашения.Индекс(СтрокаТЧ) + 1);
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, , "Приглашения["+Приглашения.Индекс(СтрокаТЧ)+"].ЭлектроннаяПочта",, Отказ);
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаТЧ.УчетнаяЗаписьОрганизации) Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'В строке %1 не выбрана учетная запись организации'"), Приглашения.Индекс(СтрокаТЧ) + 1);
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, , "Приглашения["+Приглашения.Индекс(СтрокаТЧ)+"].УчетнаяЗаписьОрганизации",, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не выбрана организация'");
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, , "Организация",, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьОрганизации) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не выбрана учетная запись организации'");
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, , "УчетнаяЗаписьОрганизации",, Отказ);
	КонецЕсли;
	
	Если Не МассоваяОтправка Тогда
		Если Не ЗначениеЗаполнено(ТекстПриглашения) Тогда
			ОписаниеОшибки = НСтр("ru = 'Не заполнен текст приглашения'");
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, , "ТекстПриглашения",, Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(УчетнаяЗаписьКонтрагента) И Не ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
			ОписаниеОшибки = НСтр("ru = 'Не выбрана ни учетная запись, ни адрес электронной почты контрагента'");
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, , "ЭлектроннаяПочта",, Отказ);
		ИначеЕсли Не ЗначениеЗаполнено(УчетнаяЗаписьКонтрагента) Тогда
			Если Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЭлектроннаяПочта) Тогда
				ОписаниеОшибки = НСтр("ru = 'Указан недействительный адрес электронной почты'");
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, , "ЭлектроннаяПочта",, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	КлючСохраненияПоложенияОкна = "";
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПодключенияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОрганизацииПриИзменении(Элемент)
	
	Если УчетнаяЗаписьОрганизации = "Расширенный" Тогда
		Возврат;
	КонецЕсли;
	
	Описание = Новый ОписаниеОповещения("ФормированиеСпискаПриглашенийЗавершение", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительнаяОперация = НачатьФормированиеСпискаПриглашений();
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПриИзменении(Элемент)
	ЗаполнитьДопСведенияИдентификатораКонтрагента(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		Результат = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЭлектроннаяПочта);
		ЭлектроннаяПочтаНеКорректна = Не Результат;
	Иначе
		ЭлектроннаяПочтаНеКорректна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПриИзменении(Элемент)
	
	ЗаполнитьУчетныеЗаписиОрганизации(ЭтотОбъект);
	
	ОбновитьПодсказку();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОрганизацииПриИзменении(Элемент)
	
	Если Элемент <> Неопределено И УчетнаяЗаписьОрганизации = "Новый" Тогда
		
		УчетнаяЗаписьОрганизации = "";
		Описание = Новый ОписаниеОповещения("ПослеДобавленияУчетнойЗаписи", ЭтотОбъект);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Организация"        , Организация);
		ПараметрыОткрытия.Вставить("КнопкаНазадДоступна", Истина);
		
		ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыОткрытия,
			УникальныйИдентификатор,, Окно,, Описание, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	ОбновитьПодсказку();
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Элемент = Элементы.ИдентификаторОрганизации.СписокВыбора.НайтиПоЗначению(УчетнаяЗаписьОрганизации);
	Пометка = Элемент <> Неопределено И Элемент.Пометка;
	
	Если Пометка Тогда
		ОткрытьУчетнуюЗапись(УчетнаяЗаписьОрганизации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Контрагент);
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Элементы.Идентификатор.СписокВыбора.Добавить(Текст);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПриглашения

&НаКлиенте
Процедура ПриглашенияУчетнаяЗаписьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Приглашения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПредставлениеУчетнойЗаписи(ТекущиеДанные);
	
	УстановитьОтборСтрокИОбновитьКоличествоСтрокОтбора(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриглашенияПриАктивизацииСтроки(Элемент)
	
	Элементы.ПриглашенияУчетнаяЗапись.СписокВыбора.Очистить();
	
	ТекущиеДанные = Элементы.Приглашения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Список = ПолучитьИдентификаторы(ТекущиеДанные.Контрагент);
	
	Для Каждого ЭлементСписка Из Список Цикл
		
		Элементы.ПриглашенияУчетнаяЗапись.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриглашенияЭлектроннаяПочтаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Приглашения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.ЭлектроннаяПочтаНеДействительна = Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ТекущиеДанные.ЭлектроннаяПочта);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверкаНеТребуется(Команда)
	Элементы.ПроверкаНеТребуется.Пометка = Не Элементы.ПроверкаНеТребуется.Пометка;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура РекомендуетсяПроверить(Команда)
	Элементы.РекомендуетсяПроверить.Пометка = Не Элементы.РекомендуетсяПроверить.Пометка;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура СвязьУжеНастроена(Команда)
	Элементы.СвязьУжеНастроена.Пометка = Не Элементы.СвязьУжеНастроена.Пометка;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ТребуютсяДействия(Команда)
	Элементы.ТребуютсяДействия.Пометка = Не Элементы.ТребуютсяДействия.Пометка;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Элементы.ВариантОтправки.ТекущаяСтраница = Элементы.ОдиночнаяОтправка;
	Элементы.Далее.КнопкаПоУмолчанию = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Массив = ПолучитьИдентификаторыОрганизации();
		
	Если Массив.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбраны контрагенты для отправки'"));
		Возврат;
	КонецЕсли;
	
	Элементы.КнопкаОтправить.Доступность = Ложь;
	Элементы.Отправить.Доступность       = Ложь;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОтправитьПриглашениеОповещение", ЭтотОбъект, Массив);
	ЗаполнитьМаркер(ОбработчикОповещения, Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад2(Команда)
	Элементы.ЭтапыОтправки.ТекущаяСтраница = Элементы.Подготовка;
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ВариантОтправки.ТекущаяСтраница = Элементы.МассоваяОтправка;
	Элементы.Отправить.КнопкаПоУмолчанию = Истина;
	
	ЗаполнитьИдентификаторыОрганизации();
	
	ДлительнаяОперацияФормирования = НачатьФормированиеСпискаПриглашений();
	
	Описание = Новый ОписаниеОповещения("ФормированиеСпискаПриглашенийЗавершение", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперацияФормирования, Описание, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьПриглашение(Команда)
	
	Если СтатусПодключения <> ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Принято") Тогда
		НачатьОтзывПриглашения();
	Иначе
		
		Описание = Новый ОписаниеОповещения("ПослеВопросаОРазрывеСвязи", ЭтотОбъект);
		
		ТекстСообщения = 
			НСтр("ru = 'После разрыва связи с контрагентом больше не будет возможности обмениваться электронными документами с контрагентом.
                  |Продолжить?'");
		
		ПоказатьВопрос(Описание, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Принять(Команда)
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыКонтрагента = Новый Структура;
		РеквизитыКонтрагента.Вставить("Наименование", НаименованиеКонтрагента);
		РеквизитыКонтрагента.Вставить("ИНН"         , ИНН);
		РеквизитыКонтрагента.Вставить("КПП"         , КПП);
		
		Контрагент = СоздатьНовогоКонтрагента(РеквизитыКонтрагента);
		
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			Возврат;
		КонецЕсли;
		
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	ОчиститьСообщения();
	Элементы.ГруппаКнопок.Доступность = Ложь;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ПринятьПриглашениеОповещение", ЭтотОбъект);
	
	Массив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УчетнаяЗаписьОрганизации);
	ЗаполнитьМаркер(ОбработчикОповещения, Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	Элементы.ЭтапыОтправки.ТекущаяСтраница = Элементы.Подготовка;
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОписание(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.СкопироватьВБуферОбмена(ОписаниеОшибкиСервиса, НСтр("ru = 'Текст ошибки скопирован в буфер обмена'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьАвтоматически(Команда)
	
	Для Каждого СтрокаПриглашения Из Приглашения Цикл
		
		Если Элементы.Приглашения.ПроверитьСтроку(СтрокаПриглашения.ПолучитьИдентификатор()) Тогда
			СтрокаПриглашения.Представление = СтрокаПриглашения.ПредставлениеДляПерезаполнения;
			СтрокаПриглашения.УчетнаяЗаписьОрганизации = СтрокаПриглашения.УчетнаяЗаписьОрганизацииДляПерезаполнения;
			ОбновитьПредставлениеУчетнойЗаписи(СтрокаПриглашения);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьОтборСтрокИОбновитьКоличествоСтрокОтбора(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	СнятьУстановитьЗначениеВыбран(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	СнятьУстановитьЗначениеВыбран(Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОткрытиеУчетнойЗаписи

&НаКлиенте
Процедура ОткрытьУчетнуюЗапись(ИдентификаторЭДО)
	
	ЗначениеКлюча = ПолучитьКлючЗаписи(ИдентификаторЭДО);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЗначениеКлюча);
	
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.УчетнаяЗапись", ПараметрыФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписи(ИдентификаторЭДО)
	
	ЗначениеКлюча = Новый Структура;
	ЗначениеКлюча.Вставить("ИдентификаторЭДО", ИдентификаторЭДО);
	Возврат РегистрыСведений.УчетныеЗаписиЭДО.СоздатьКлючЗаписи(ЗначениеКлюча);
	
КонецФункции

#КонецОбласти

#Область ВизуальноеПредставлениеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчетнаяЗаписьКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЭлектроннаяПочта");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлектроннаяПочтаНеКорректна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЭлектроннаяПочта");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчетнаяЗаписьОрганизации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "Расширенный";
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПриглашенияУчетнаяЗаписьОрганизации");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приглашения.Отбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПриглашенияВыбран");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приглашения.УчетнаяЗапись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПриглашенияЭлектроннаяПочта");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Все*'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приглашения.УчетнаяЗапись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПриглашенияУчетнаяЗапись");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приглашения.ЭлектроннаяПочта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приглашения.УчетнаяЗапись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПриглашенияЭлектроннаяПочта");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приглашения.ЭлектроннаяПочтаНеДействительна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПриглашенияЭлектроннаяПочта");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////

	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.МассоваяОтправка Тогда
		Элементы.ГруппаПолучатель.Видимость            = Ложь;
		Элементы.ТекстПриглашения.Видимость            = Ложь;
		Элементы.СтраницыУправления.ТекущаяСтраница    = Элементы.УправлениеМассовое;
		Элементы.Далее.КнопкаПоУмолчанию               = Истина И Форма.ЕстьПравоНастройкиОбмена;
	Иначе
		Элементы.СтраницыУправления.ТекущаяСтраница    = Элементы.УправлениеОдиночное;
		Элементы.КнопкаОтправить.КнопкаПоУмолчанию     = Истина И Форма.ЕстьПравоНастройкиОбмена;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Контрагент) Тогда
		Элементы.Получатель.Гиперссылка = Ложь;
		Если ЗначениеЗаполнено(Форма.КПП) Тогда
			Шаблон = НСтр("ru = '%1 (ИНН: %2 КПП: %3)'");
			Форма.Получатель = СтрШаблон(Шаблон, Форма.НаименованиеКонтрагента, Форма.ИНН, Форма.КПП)
		Иначе
			Шаблон = НСтр("ru = '%1 (ИНН: %2)'");
			Форма.Получатель = СтрШаблон(Шаблон, Форма.НаименованиеКонтрагента, Форма.ИНН)
		КонецЕсли;
	Иначе
		Элементы.Получатель.Гиперссылка = Истина;
		Форма.Получатель = Форма.Контрагент;
	КонецЕсли;
	
	Элементы.ГруппаОписаниеОшибки.Видимость = Не ПустаяСтрока(Форма.ОписаниеОшибкиСервиса);
	
	Элементы.ГруппаСостояние.Видимость      = Не Форма.МассоваяОтправка
		И Не Форма.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяОтправить");
		
	Если Форма.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Ошибка") Тогда
		Элементы.СтатусПодключения.ЦветТекста = WebЦвета.Красный;
	ИначеЕсли Форма.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Принято") Тогда
		Элементы.СтатусПодключения.ЦветТекста = WebЦвета.Зеленый;
	ИначеЕсли Форма.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ОжидаемСогласия")
		Или Форма.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяСогласие") Тогда
		Элементы.СтатусПодключения.ЦветТекста = WebЦвета.Оранжевый;
	КонецЕсли;
	
	ТекущийВидПоляФормы = ?(Форма.НеВыбиратьОтправителя, ВидПоляФормы.ПолеНадписи, ВидПоляФормы.ПолеВвода);
	Элементы.Отправитель.Вид                         = ТекущийВидПоляФормы;
	Элементы.ИдентификаторОрганизации.ТолькоПросмотр = Форма.НеВыбиратьОтправителя;
	Элементы.Идентификатор.ТолькоПросмотр            = Форма.НеВыбиратьОтправителя;
	
	Если ТекущийВидПоляФормы = ВидПоляФормы.ПолеНадписи Тогда
		Элементы.Отправитель.Гиперссылка = Истина;
	КонецЕсли;
	
	Элементы.ИдентификаторОрганизации.ОтображениеПодсказки =
		?(ТекущийВидПоляФормы = ВидПоляФормы.ПолеНадписи, ОтображениеПодсказки.Нет, ОтображениеПодсказки.Авто);
		
	Элементы.КнопкаОтмена1.Заголовок = НСтр("ru = 'Отмена'");
	Форма.Заголовок = НСтр("ru = 'Приглашение'");
	
	Элементы.ЭлектроннаяПочта.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Элементы.ИдентификаторОрганизации.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	
	Если Не Форма.МассоваяОтправка И (Форма.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяОтправить")
		Или Форма.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Ошибка")
		Или Форма.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяОтправить")
		Или Форма.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ПустаяСсылка")
		Или Форма.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Отклонено")) Тогда
		
		Элементы.ГруппаКнопокТребуетсяСогласие.Видимость = Ложь;
		Элементы.ЭлектроннаяПочта.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		Элементы.ИдентификаторОрганизации.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		Элементы.ОтменитьПриглашение.Видимость = Ложь;
		Элементы.КнопкаОтправить.Видимость = Истина И Форма.ЕстьПравоНастройкиОбмена;
		Форма.Заголовок = НСтр("ru = 'Отправить приглашение'");
		
	ИначеЕсли Не Форма.МассоваяОтправка И Форма.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ОжидаемСогласия") Тогда
		
		Элементы.ГруппаКнопокТребуетсяСогласие.Видимость   = Ложь;
		Элементы.ГруппаКнопокТребуетсяПригласить.Видимость = Ложь;
		Элементы.ОтменитьПриглашение.Видимость = Истина И Форма.ЕстьПравоНастройкиОбмена;
		Элементы.ТекстПриглашения.ТолькоПросмотр = Истина;
		Элементы.ЭлектроннаяПочта.ТолькоПросмотр = Истина;
		
	ИначеЕсли Не Форма.МассоваяОтправка И Форма.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяСогласие") Тогда
		
		Элементы.ЭлектроннаяПочта.Видимость = Ложь;
		Элементы.ТекстПриглашения.ТолькоПросмотр = Истина;
		Элементы.ГруппаКнопокТребуетсяПригласить.Видимость = Ложь;
		Элементы.ОтменитьПриглашение.Видимость = Ложь;
		Элементы.КнопкаПринять.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли Не Форма.МассоваяОтправка И Форма.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Принято") Тогда
		
		Элементы.ЭлектроннаяПочта.Видимость = Ложь;
		Элементы.ТекстПриглашения.ТолькоПросмотр = Истина;
		Элементы.ГруппаКнопокТребуетсяПригласить.Видимость = Ложь;
		Элементы.ГруппаКнопокТребуетсяСогласие.Видимость = Ложь;
		Элементы.ОтменитьПриглашение.Видимость = Истина И Форма.ЕстьПравоНастройкиОбмена;
		Элементы.КнопкаОтмена1.КнопкаПоУмолчанию = Истина;
		Элементы.КнопкаОтмена1.Заголовок = НСтр("ru = 'Закрыть'");
	ИначеЕсли Форма.МассоваяОтправка Тогда
		Форма.Заголовок = НСтр("ru = 'Отправить приглашения'");
	КонецЕсли;
	
	Если Не Форма.ЕстьПравоНастройкиОбмена Тогда
		Элементы.КнопкаОтмена1.КнопкаПоУмолчанию = Истина;
		Элементы.КнопкаОтмена1.Заголовок = НСтр("ru = 'Закрыть'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодсказку()
	
	Если УчетнаяЗаписьОрганизации = "Автоматически" Тогда
		ТекстПодсказки = НСтр("ru = 'Для каждого из контрагентов будет использована наиболее подходящая учетная запись организации.'");
	ИначеЕсли УчетнаяЗаписьОрганизации = "" Тогда
		ТекстПодсказки = НСтр("ru = 'Выберите учетную запись для отправки'");
	Иначе
		ТекстПодсказки = НСтр("ru = 'Для отправки будет использоваться выбранная учетная запись организации.'");
	КонецЕсли;
	
	Элементы.ИдентификаторОрганизации.Подсказка = ТекстПодсказки;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПодготовитьФормуНаСервере(ПараметрыОткрытия)
	
	ИспользуетсяНесколькоОрганизацийЭД = ЭлектронноеВзаимодействиеСлужебный.ИспользуетсяНесколькоОрганизаций();
	СписокПолучателей = Неопределено;
	ПараметрыОткрытия.Свойство("Получатель", СписокПолучателей);
	
	Если ЗначениеЗаполнено(СписокПолучателей) Тогда
		Если СписокПолучателей.Количество() = 1 Тогда
			Если ТипЗнч(СписокПолучателей[0]) = Тип("Строка") Тогда
				
				ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты",
					ПараметрыОткрытия.ИНН, ПараметрыОткрытия.КПП, Контрагент);
					
				Если ЗначениеЗаполнено(Контрагент) Тогда
					СписокПолучателей[0] = Контрагент;
				КонецЕсли;
				
			КонецЕсли;
			
			Контрагент = СписокПолучателей[0];
			ПараметрыОткрытия.Свойство("ИдентификаторОрганизации" , УчетнаяЗаписьОрганизации);
			ПараметрыОткрытия.Свойство("ИдентификаторКонтрагента" , УчетнаяЗаписьКонтрагента);
			ПараметрыОткрытия.Свойство("Организация"              , Организация);
			
			Элементы.МассоваяОтправка.Видимость = Ложь;
		Иначе
			
			МассоваяОтправка = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьОрганизации) Тогда
		НеВыбиратьОтправителя        = Истина;
		Элементы.Подробнее.Видимость = Ложь;
	КонецЕсли;
	
	Если Не МассоваяОтправка Тогда
		
		// Попытка получить адрес электронной почты контрагента
		ЭлектроннаяПочта = "";
		ОбменСКонтрагентамиПереопределяемый.АдресЭлектроннойПочтыКонтрагента(Контрагент, ЭлектроннаяПочта);
		
		Если ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
			Если ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
				Результат = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЭлектроннаяПочта);
				ЭлектроннаяПочтаНеКорректна = Не Результат;
			Иначе
				ЭлектроннаяПочтаНеКорректна = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ПрочитатьПриглашение();
	КонецЕсли;
	
	Если Не ИспользуетсяНесколькоОрганизацийЭД Тогда // Однофирменный учет
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = ЭлектронноеВзаимодействиеСлужебный.ОрганизацияПоУмолчанию();
		КонецЕсли;
		Если ЗначениеЗаполнено(Организация) Тогда
			Элементы.Отправитель.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьУчетныеЗаписиОрганизации(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(СписокПолучателей) Тогда
		ЗаполнитьУчетныеЗаписиПолучателей(СписокПолучателей);
	КонецЕсли;
	
	ЗаполнитьДопСведенияИдентификатораКонтрагента(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(СписокПолучателей) Тогда
		ЗаполнитьТаблицуПриглашений(СписокПолучателей);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция НачатьФормированиеСпискаПриглашений()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ВыполняетсяПоиск;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных по контрагенту из сервиса настроек'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне    = Истина;
	
	Таблица = Приглашения.Выгрузить();
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Приглашения"             , Таблица);
	ПараметрыПроцедуры.Вставить("Организация"             , Организация);
	ПараметрыПроцедуры.Вставить("УчетнаяЗаписьОрганизации", Неопределено);
	
	Если УчетнаяЗаписьОрганизации <> "Автоматически" Тогда
		ПараметрыПроцедуры.Вставить("УчетнаяЗаписьОрганизации", УчетнаяЗаписьОрганизации);
	КонецЕсли;
	
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
				"РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.СформироватьСписокПриглашений",
				ПараметрыПроцедуры, ПараметрыВыполнения);

КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПриглашений(СписокПолучателей)
	
	Таблица = Приглашения.Выгрузить();
	Таблица.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Таблица, СписокПолучателей, "Контрагент");
	
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	СписокКонтрагентов = Таблица.ВыгрузитьКолонку("Контрагент");
	
	РеквизитыКонтрагентов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокКонтрагентов,
		ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		Реквизиты = РеквизитыКонтрагентов.Получить(СтрокаТЧ.Контрагент);
		
		Если ЗначениеЗаполнено(Реквизиты) Тогда 
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Реквизиты);
		КонецЕсли;
		
	КонецЦикла;
	
	Приглашения.Загрузить(Таблица);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеСпискаПриглашенийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Отправить.КнопкаПоУмолчанию = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.Выполнено;
	ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ЗаполнитьПриглашения(Результат.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор()
	
	ТребуютсяДействия = Элементы.ТребуютсяДействия.Пометка;
	РекомендуетсяПроверить = Элементы.РекомендуетсяПроверить.Пометка;
	СвязьУжеНастроена = Элементы.СвязьУжеНастроена.Пометка;
	ПроверкаНеТребуется = Элементы.ПроверкаНеТребуется.Пометка;
	
	Если (ТребуютсяДействия И РекомендуетсяПроверить И СвязьУжеНастроена И ПроверкаНеТребуется)
		Или (Не ТребуютсяДействия И Не РекомендуетсяПроверить И Не СвязьУжеНастроена И Не ПроверкаНеТребуется) Тогда
		
		Элементы.Приглашения.ОтборСтрок = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Приглашения Цикл
		СтрокаТЧ.Показать = Ложь;
		
		Если СтрокаТЧ.Отбор = 0 И ТребуютсяДействия Тогда
			СтрокаТЧ.Показать = Истина;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.Отбор = 1 И РекомендуетсяПроверить Тогда
			СтрокаТЧ.Показать = Истина;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.Отбор = 2 И СвязьУжеНастроена Тогда
			СтрокаТЧ.Показать = Истина;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.Отбор = 3 И ПроверкаНеТребуется Тогда
			СтрокаТЧ.Показать = Истина;
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура("Показать", Истина);
	Элементы.Приглашения.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриглашения(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ИдентификаторыАбонентов.Загрузить(Результат.ИдентификаторыАбонентов);
	
	Таблица = Результат.Приглашения;
	
	Таблица.ЗагрузитьКолонку(Таблица.ВыгрузитьКолонку("УчетнаяЗаписьОрганизации"), "УчетнаяЗаписьОрганизацииДляПерезаполнения");
	Таблица.ЗагрузитьКолонку(Таблица.ВыгрузитьКолонку("Представление")           , "ПредставлениеДляПерезаполнения");
	
	Таблица.Индексы.Добавить("Выбран");
	Таблица.Индексы.Добавить("Отбор");
	
	Приглашения.Загрузить(Таблица);
	
	ПосчитатьКоличествоСтрокОтборов(Таблица);
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаСервере
Процедура ПосчитатьКоличествоСтрокОтборов(Знач Таблица, Знач ИзменятьФильтр = Истина)
	
	Отбор = Новый Структура("Выбран", Ложь);
	Если Таблица.НайтиСтроки(Отбор).Количество() > 0 Тогда
		ПоказатьВсе = Ложь;
	Иначе
		ПоказатьВсе = Истина;
	КонецЕсли;
	
	Отбор = Новый Структура("Отбор", 0);
	Количество = Таблица.НайтиСтроки(Отбор).Количество();
	Если ИзменятьФильтр Тогда
		Элементы.ТребуютсяДействия.Пометка = Количество > 0 Или ПоказатьВсе;
	КонецЕсли;
	Элементы.ТребуютсяДействия.Заголовок = СтрШаблон(НСтр("ru = 'Требуются действия (%1)'"), Количество);
	
	Отбор = Новый Структура("Отбор", 1);
	Количество = Таблица.НайтиСтроки(Отбор).Количество();
	Если ИзменятьФильтр Тогда
		Элементы.РекомендуетсяПроверить.Пометка = Количество > 0 Или ПоказатьВсе;
	КонецЕсли;
	Элементы.РекомендуетсяПроверить.Заголовок = СтрШаблон(НСтр("ru = 'Рекомендуется проверить (%1)'"), Количество);
	
	Отбор = Новый Структура("Отбор", 2);
	Количество = Таблица.НайтиСтроки(Отбор).Количество();
	Если ИзменятьФильтр Тогда
		Элементы.СвязьУжеНастроена.Пометка = ПоказатьВсе;
	КонецЕсли;
	Элементы.СвязьУжеНастроена.Заголовок = СтрШаблон(НСтр("ru = 'Связь уже настроена (%1)'"), Количество);
	
	Отбор = Новый Структура("Отбор", 3);
	Количество = Таблица.НайтиСтроки(Отбор).Количество();
	Если ИзменятьФильтр Тогда
		Элементы.ПроверкаНеТребуется.Пометка = ПоказатьВсе;
	КонецЕсли;
	Элементы.ПроверкаНеТребуется.Заголовок = СтрШаблон(НСтр("ru = 'Проверка не требуется (%1)'"), Количество);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьИдентификаторы(Знач Контрагент)
	
	Результат = Новый СписокЗначений;
	
	Отбор = Новый Структура("Контрагент", Контрагент);
	Строки = ИдентификаторыАбонентов.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТЧ Из Строки Цикл
		
		Результат.Добавить(СтрокаТЧ.ИдентификаторЭДО, ?(ПустаяСтрока(СтрокаТЧ.КраткоеОписание),
			СтрокаТЧ.ИдентификаторЭДО, СтрШаблон(НСтр("ru = '%1 (%2)'"), СтрокаТЧ.ИдентификаторЭДО, СтрокаТЧ.КраткоеОписание)));
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьМаркер(ОбработчикОповещения, Массив)
	
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработчикОповещения, Массив);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторыОрганизации()
	
	Если Не ЗначениеЗаполнено(Контрагент) И Не МассоваяОтправка Тогда
		РеквизитыКонтрагента = Новый Структура;
		РеквизитыКонтрагента.Вставить("Наименование", НаименованиеКонтрагента);
		РеквизитыКонтрагента.Вставить("ИНН"         , ИНН);
		РеквизитыКонтрагента.Вставить("КПП"         , КПП);
		
		Контрагент = СоздатьНовогоКонтрагента(РеквизитыКонтрагента);
		
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			Возврат Новый Массив;
		КонецЕсли;
		
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	Если Не МассоваяОтправка Тогда
		
		Приглашения.Очистить();
		НоваяСтрока = Приглашения.Добавить();
		НоваяСтрока.Контрагент = Контрагент;
		НоваяСтрока.УчетнаяЗапись = УчетнаяЗаписьКонтрагента;
		НоваяСтрока.ЭлектроннаяПочта = ЭлектроннаяПочта;
		НоваяСтрока.УчетнаяЗаписьОрганизации = УчетнаяЗаписьОрганизации;
		НоваяСтрока.Выбран = Истина;
		
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Выбран", Истина);
	УчетныеЗаписиОрганизации = Приглашения.Выгрузить(ПараметрыОтбора, "УчетнаяЗаписьОрганизации");
	УчетныеЗаписиОрганизации.Свернуть("УчетнаяЗаписьОрганизации");
	
	Возврат УчетныеЗаписиОрганизации.ВыгрузитьКолонку("УчетнаяЗаписьОрганизации");
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПриглашениеОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Массив") Тогда
		ДополнительныеПараметры = Новый Массив;
	КонецЕсли;
	
	Элементы.КнопкаОтправить.Доступность = Истина;
	Элементы.Отправить.Доступность       = Истина;
	
	Соответствие = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", Соответствие)
		И ТипЗнч(Соответствие) = Тип("Соответствие")
		И Соответствие.Количество() > 0 Тогда
		
		Для Каждого СтрокаТЧ Из ДополнительныеПараметры Цикл
			
			Если Соответствие.Получить(СтрокаТЧ) = Неопределено Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'По учетной записи организации %1 приглашения отправить не удалось.
                                                 |Ошибка связи с оператором ЭДО'"), СтрокаТЧ);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ШаблонОшибки = НСтр("ru = 'При отправке приглашения возникли ошибки.
			|Необходимо выполнить тест настроек ЭДО.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ШаблонОшибки);
		Возврат;
	КонецЕсли;
	
	Описание = Новый ОписаниеОповещения("НачатьОтправкуПриглашенийНаСервереЗавершение", ЭтотОбъект);
	
	ДлительнаяОперация = НачатьОтправкуПриглашенийНаСервере(Соответствие);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Элементы.ЭтапыОтправки.ТекущаяСтраница = Элементы.ОтправкаВыполняется;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуПриглашенийНаСервереЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.КнопкаОтправить.Доступность = Истина;
	Элементы.Отправить.Доступность       = Истина;
	
	
	Если Результат = Неопределено
		Или Результат.Статус <> "Выполнено"
		Или Не ЗначениеЗаполнено(ПолучитьИзВременногоХранилища(Результат.АдресРезультата)) Тогда
		
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'При отправке приглашений произошла ошибка.
                                                                    |Подробнее см. в журнале регистрации'"));
			
			Элементы.ЭтапыОтправки.ТекущаяСтраница = Элементы.ОтправкаОшибка;
			Элементы.Повторить.КнопкаПоУмолчанию   = Истина;
			Возврат;
		
	КонецЕсли;
	
	Элементы.ЭтапыОтправки.ТекущаяСтраница = Элементы.ОтправкаВыполнена;
	Элементы.КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
	Оповестить("ОбновитьСостояниеПриглашений");
КонецПроцедуры

&НаСервере
Функция НачатьОтправкуПриглашенийНаСервере(Маркеры)
	
	ШаблонПриглашения = ОбменСКонтрагентамиСлужебный.СтандартныйШаблонПриглашения();
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Приглашения"      , Приглашения.Выгрузить(Новый Структура("Выбран", Истина)));
	ПараметрыПроцедуры.Вставить("СписокМаркеров"   , Маркеры);
	ПараметрыПроцедуры.Вставить("Организация"      , Организация);
	ПараметрыПроцедуры.Вставить("ШаблонПриглашения", ШаблонПриглашения);
	ПараметрыПроцедуры.Вставить("ТекстПриглашения" , ТекстПриглашения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка приглашений ЭДО'");

	Возврат ДлительныеОперации.ВыполнитьВФоне(
			"РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ОтправитьСписокПриглашений", ПараметрыПроцедуры, ПараметрыВыполнения);
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);

КонецПроцедуры

#Область РаботаСУчетнымиЗаписямиКонтрагентов

&НаСервере
Процедура ЗаполнитьУчетныеЗаписиПолучателей(СписокПолучателей)
	
	Если СписокПолучателей.Количество() > 0
			И СписокПолучателей[0] = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.ПривестиЗначение() Тогда
			Возврат;
	КонецЕсли;
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных по контрагенту из сервиса настроек'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне    = Истина;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Контрагент", СписокПолучателей);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
				"ОбменСКонтрагентамиСлужебный.ПолучитьДанныеАбонентаИзСервисаНастроек", ПараметрыПроцедуры, ПараметрыВыполнения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДопСведенияИдентификатораКонтрагента(Форма)
	
	Форма.ПодробнееОператорЭДО = "";
	Форма.ПодробнееПодробноеОписание = "";
	
	Если ПустаяСтрока(Форма.УчетнаяЗаписьКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДопСведенияИдентификатораКонтрагентаНаСервере(Форма.УчетнаяЗаписьКонтрагента,
		Форма.ПодробнееОператорЭДО, Форма.ПодробнееПодробноеОписание);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДопСведенияИдентификатораКонтрагентаНаСервере(Знач ИдентификаторЭДО, ОператорЭДО, ПодробноеОписание)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АбонентыЭДО.ПодробноеОписание КАК ПодробноеОписание,
		|	ОператорыЭДО.Представление КАК ОператорЭДО
		|ИЗ
		|	РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
		|		ПО АбонентыЭДО.ОператорЭДО = ОператорыЭДО.ИдентификаторОператора
		|ГДЕ
		|	АбонентыЭДО.ИдентификаторЭДО = &ИдентификаторЭДО";
	
	Запрос.УстановитьПараметр("ИдентификаторЭДО", ИдентификаторЭДО);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОператорЭДО = ВыборкаДетальныеЗаписи.ОператорЭДО;
		ПодробноеОписание = ВыборкаДетальныеЗаписи.ПодробноеОписание;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеИдентификаторовКонтрагентаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено
		Или Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено
		Или Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	Для Каждого Строка Из Результат Цикл
		
		Если Элементы.Идентификатор.СписокВыбора.НайтиПоЗначению(Строка.Значение) = Неопределено Тогда
			Элементы.Идентификатор.СписокВыбора.Добавить(Строка.Значение, Строка.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(УчетнаяЗаписьКонтрагента) Тогда
		УчетнаяЗаписьКонтрагента = Результат[0].Значение;
	КонецЕсли;

	Если Элементы.Идентификатор.СписокВыбора.Количество() > 0 Тогда
		Элементы.ЭлектроннаяПочта.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьПодсказку();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСУчетнымиЗаписямиОрганизации

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьУчетныеЗаписиОрганизации(Форма)
	
	Список = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Форма.Организация) Тогда
		
		Результат = ПолучитьУчетныеЗаписи(Форма.Организация, Форма.Контрагент);
		
		ИдентификаторыОтправителя = Результат.ИдентификаторыОтправителя;
		ИдентификаторыПолучателя = Результат.ИдентификаторыПолучателя;
		
		Если ИдентификаторыОтправителя.Количество() > 0 И Форма.МассоваяОтправка Тогда
			ИдентификаторыОтправителя.Вставить(0,"Автоматически", НСтр("ru = 'Выбрать автоматически'"));
			Форма.УчетнаяЗаписьОрганизации = "Автоматически";
		КонецЕсли;
		
		ИдентификаторыОтправителя.Добавить("Новый", НСтр("ru = 'Создать новую учетную запись'"),, БиблиотекаКартинок.СоздатьЭлементСписка);
	Иначе
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ИдентификаторОрганизации.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(ИдентификаторыОтправителя) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИдентификаторыОтправителя, Форма.Элементы.ИдентификаторОрганизации.СписокВыбора);
		
		Если ПустаяСтрока(Форма.УчетнаяЗаписьОрганизации) Тогда
			Форма.УчетнаяЗаписьОрганизации = ИдентификаторыОтправителя[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.Идентификатор.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(ИдентификаторыПолучателя) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИдентификаторыПолучателя, Форма.Элементы.Идентификатор.СписокВыбора);
		
		Если ПустаяСтрока(Форма.УчетнаяЗаписьКонтрагента) Тогда
			Форма.УчетнаяЗаписьКонтрагента = ИдентификаторыПолучателя[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.Элементы.Идентификатор.СписокВыбора.Количество() = 0
		И ЗначениеЗаполнено(Форма.УчетнаяЗаписьКонтрагента) Тогда
		
		Форма.Элементы.Идентификатор.СписокВыбора.Добавить(Форма.УчетнаяЗаписьКонтрагента,, Истина);
		
	КонецЕсли;
	
	Если ИдентификаторыОтправителя.Количество() = 0 Тогда
		Форма.УчетнаяЗаписьОрганизации = "";
	ИначеЕсли ПустаяСтрока(Форма.УчетнаяЗаписьОрганизации) Тогда
		Если Форма.МассоваяОтправка Тогда
			Форма.УчетнаяЗаписьОрганизации = "Автоматически";
		ИначеЕсли ЗначениеЗаполнено(Список) Тогда
			Форма.УчетнаяЗаписьОрганизации = Список[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Элементы.Идентификатор.СписокВыбора.Количество() > 0 Тогда
		Форма.Элементы.ЭлектроннаяПочта.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьУчетныеЗаписи(Организация, Контрагент)
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторыОтправителя", Новый СписокЗначений);
	Результат.Вставить("ИдентификаторыПолучателя" , Новый СписокЗначений);
	
	Идентификаторы = ОбменСКонтрагентамиСлужебный.ДоступныеИдентификаторыЭДО(Организация, Контрагент);
	
	Для Каждого СтрокаТЧ Из Идентификаторы.ИдентификаторыОтправителя Цикл
		Результат.ИдентификаторыОтправителя.Добавить(СтрокаТЧ.Значение, СтрокаТЧ.Представление, Истина);
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Идентификаторы.ИдентификаторыПолучателя Цикл
		Результат.ИдентификаторыПолучателя.Добавить(СтрокаТЧ.Значение, СтрокаТЧ.Представление, Истина);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИдентификаторыОрганизации()
	
	Элементы.УчетнаяЗаписьОрганизации.СписокВыбора.Очистить();
	Элементы.ПриглашенияУчетнаяЗаписьОрганизации.СписокВыбора.Очистить();
	
	Для Каждого Запись Из Элементы.ИдентификаторОрганизации.СписокВыбора Цикл
		
		Если Запись.Пометка Тогда
			Элементы.УчетнаяЗаписьОрганизации.СписокВыбора.Добавить(
				Запись.Значение, Запись.Представление, Истина);
			
			Элементы.ПриглашенияУчетнаяЗаписьОрганизации.СписокВыбора.Добавить(
				Запись.Значение, Запись.Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.УчетнаяЗаписьОрганизации.СписокВыбора.Вставить(0, "Автоматически", НСтр("ru = 'Выбирается автоматически'"));
	Элементы.УчетнаяЗаписьОрганизации.СписокВыбора.Добавить(     "Расширенный", НСтр("ru = 'Указывается в таблице'"));
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеДобавленияУчетнойЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаполнитьУчетныеЗаписиОрганизации(ЭтотОбъект);
		УчетнаяЗаписьОрганизации = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСовместимостьУчетныхЗаписей(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено
		Или Не ЗначениеЗаполнено(ТекущиеДанные.УчетнаяЗапись)
		Или Не ЗначениеЗаполнено(ТекущиеДанные.УчетнаяЗаписьОрганизации) Тогда
			ТекущиеДанные.Выбран = Ложь;
			ТекущиеДанные.Отбор  = 0;
			Возврат;
	КонецЕсли;
		
	ДополнительныеДанные = Новый Структура;
	Результат = ПроверитьСовместимостьОператоров(ТекущиеДанные.УчетнаяЗаписьОрганизации, ТекущиеДанные.УчетнаяЗапись, ДополнительныеДанные);
	
	
	Если Результат = Истина Тогда
		ДанныеПриглашения = Неопределено;
		Если ДополнительныеДанные.Свойство("ДанныеПриглашения", ДанныеПриглашения)
			И ЗначениеЗаполнено(ДанныеПриглашения)
			И ДанныеПриглашения.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Принято") Тогда
			
			ТекущиеДанные.Выбран = Ложь;
			ТекущиеДанные.Отбор  = 2;
			
		ИначеЕсли Элементы.ПриглашенияУчетнаяЗапись.СписокВыбора.Количество() = 1 Тогда
			ТекущиеДанные.Выбран = Истина;
			ТекущиеДанные.Отбор  = 3;
		Иначе
			ТекущиеДанные.Выбран = Ложь;
			ТекущиеДанные.Отбор  = 1;
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные.Выбран = Ложь;
		ТекущиеДанные.Отбор  = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСтрокИОбновитьКоличествоСтрокОтбора(ИзменятьФильтр = Истина)

	ПосчитатьКоличествоСтрокОтборов(Приглашения, ИзменятьФильтр);
	
	УстановитьОтбор();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСовместимостьОператоров(Знач ИдентификаторОтправителя, Знач ИдентификаторПолучателя, ДополнительныеДанные)

	Возврат ОбменСКонтрагентамиСлужебный.ЕстьВозможностьРоумингаОператоровЭДО(ИдентификаторОтправителя, ИдентификаторПолучателя, ДополнительныеДанные);

КонецФункции

&НаСервере
Процедура ПрочитатьПриглашение()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус КАК СтатусПодключения,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ТекстПриглашения КАК ТекстПриглашения,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Email КАК ЭлектроннаяПочта,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИНН КАК ИНН,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.КПП КАК КПП,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Наименование КАК НаименованиеКонтрагента,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент КАК Контрагент,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ОписаниеОшибки КАК ОписаниеОшибкиСервиса
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|ГДЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации <> """"
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента <> """"";
	
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", УчетнаяЗаписьКонтрагента);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", УчетнаяЗаписьОрганизации);
	
	ТаблицаПриглашений = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаПриглашений.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТаблицаПриглашений[0]);
	КонецЕсли;
	
	Элементы.ДекорацияОписаниеОшибки.Заголовок = ОписаниеОшибкиСервиса;
	
	Если СтатусПодключения = Перечисления.СтатусыПриглашений.Ошибка
		Или СтатусПодключения = Перечисления.СтатусыПриглашений.Отклонено Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаПредупреждения;
	ИначеЕсли СтатусПодключения = Перечисления.СтатусыПриглашений.Принято Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаКорректногоКонтрагентаВДокументе;
	Иначе
		ЦветФона = ЦветаСтиля.ДосьеПанельРазделовЦвет;
	КонецЕсли;
	
	Элементы.ГруппаСостояние.ЦветФона = ЦветФона;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьНовогоКонтрагента(РеквизитыКонтрагента)
	
	Возврат ОбменСКонтрагентамиСлужебный.НовыйКонтрагентПоРеквизитам(РеквизитыКонтрагента);
	
КонецФункции

&НаКлиенте
Процедура ПринятьПриглашениеОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	КоличествоПринятыхПриглашений = 0;
	
	Соответствие = Неопределено;
	Маркер = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", Соответствие)
		И ТипЗнч(Соответствие) = Тип("Соответствие") Тогда
		
		СтСертификата = Соответствие.Получить(УчетнаяЗаписьОрганизации);
		Если ТипЗнч(СтСертификата) = Тип("Структура") Тогда
			СтСертификата.Свойство("МаркерРасшифрованный", Маркер);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Маркер) Тогда
		
		Элементы.ЭтапыОтправки.ТекущаяСтраница = Элементы.ОтправкаВыполняется;
		
		Описание = Новый ОписаниеОповещения("ПринятьПриглашениеЗавершение", ЭтотОбъект, Истина);
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("Маркер"             , Маркер);
		ПараметрыПроцедуры.Вставить("Идентификатор"      , УчетнаяЗаписьКонтрагента);
		ПараметрыПроцедуры.Вставить("ПриглашениеПринято" , Истина);
		
		ПараметрыПроцедуры.Вставить("ИдентификаторКонтрагента" , УчетнаяЗаписьКонтрагента);
		ПараметрыПроцедуры.Вставить("ИдентификаторОрганизации" , УчетнаяЗаписьОрганизации);
		ПараметрыПроцедуры.Вставить("Получатель"               , Контрагент);
		
		ДлительнаяОперация = НачатьОтветНаПриглашениеСервере(УникальныйИдентификатор, ПараметрыПроцедуры);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
		
	Иначе
		ШаблонОшибки = НСтр("ru = 'При принятии приглашения возникли ошибки.
			|Необходимо выполнить тест настроек ЭДО с контрагентом %1.'");
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Получатель);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
		Элементы.ГруппаКнопок.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат.Статус <> "Выполнено"
		Или Не ЗначениеЗаполнено(ПолучитьИзВременногоХранилища(Результат.АдресРезультата)) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'При отправке приглашений произошла ошибка.
			|Подробнее см. в журнале регистрации'"));
		
		Элементы.ЭтапыОтправки.ТекущаяСтраница = Элементы.ОтправкаОшибка;
		Элементы.Повторить.КнопкаПоУмолчанию   = Истина;
		Возврат;
		
	КонецЕсли;
	
	Текст = "";
	Если ДополнительныеПараметры = Истина Тогда
		Текст = НСтр("ru = 'Приглашение принято.
                      |Теперь можно обмениваться с контрагентом электронными документами'");
	Иначе
		Текст = НСтр("ru = 'Приглашение отклонено.
                      |Теперь прием и отправка электронных документов не возможен'");
	КонецЕсли;
	
	Оповестить("ОбновитьТекущиеДелаЭДО");
	
	Элементы.ДекорацияТекстВыполнена.Заголовок = Текст;
	Элементы.ЭтапыОтправки.ТекущаяСтраница = Элементы.ОтправкаВыполнена;
	
	Элементы.КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьОтветНаПриглашениеСервере(УникальныйИдентификатор, ПараметрыПроцедуры)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ответ на приглашение ЭДО'");
	
	ПараметрыПроцедуры.Вставить("СпособОбменаЭД" , ПолучитьСпособОбмена(ПараметрыПроцедуры.ИдентификаторОрганизации));
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
				"ОбменСКонтрагентамиСлужебный.ПринятьОтклонитьКонтактЧерезОператораЭДО", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСпособОбмена(Идентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбменаЭД
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО = &ИдентификаторЭДО";
	
	Запрос.УстановитьПараметр("ИдентификаторЭДО", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СпособОбменаЭД;
	КонецЦикла;
	
КонецФункции

#Область ОтзывПриглашения

&НаКлиенте
Процедура ПослеВопросаОРазрывеСвязи(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НачатьОтзывПриглашения();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтзывПриглашения()
	
	ОчиститьСообщения();
	Элементы.ОтменитьПриглашение.Доступность = Ложь;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОтклонитьПриглашениеОповещение", ЭтотОбъект);
	
	Массив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УчетнаяЗаписьОрганизации);
	ЗаполнитьМаркер(ОбработчикОповещения, Массив);

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашениеОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Соответствие = Неопределено;
	Маркер = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", Соответствие)
		И ТипЗнч(Соответствие) = Тип("Соответствие") Тогда
		
		СтСертификата = Соответствие.Получить(УчетнаяЗаписьОрганизации);
		Если ТипЗнч(СтСертификата) = Тип("Структура") Тогда
			СтСертификата.Свойство("МаркерРасшифрованный", Маркер);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Маркер) Тогда
		
		Элементы.ЭтапыОтправки.ТекущаяСтраница = Элементы.ОтправкаВыполняется;
		
		Описание = Новый ОписаниеОповещения("ПринятьПриглашениеЗавершение", ЭтотОбъект, Ложь);
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("Маркер"             , Маркер);
		ПараметрыПроцедуры.Вставить("Идентификатор"      , УчетнаяЗаписьКонтрагента);
		ПараметрыПроцедуры.Вставить("ПриглашениеПринято" , Ложь);
		
		ПараметрыПроцедуры.Вставить("ИдентификаторКонтрагента" , УчетнаяЗаписьКонтрагента);
		ПараметрыПроцедуры.Вставить("ИдентификаторОрганизации" , УчетнаяЗаписьОрганизации);
		ПараметрыПроцедуры.Вставить("Получатель"               , Контрагент);
		
		ДлительнаяОперация = НачатьОтветНаПриглашениеСервере(УникальныйИдентификатор, ПараметрыПроцедуры);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
		
	Иначе
		ШаблонОшибки = НСтр("ru = 'При принятии приглашения возникли ошибки.
			|Необходимо выполнить тест настроек ЭДО с контрагентом %1.'");
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Получатель);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
		Элементы.ГруппаКнопок.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПоКлючу(ПараметрыОткрытия)
	
	КлючЗаписи = Неопределено;
	Если ПараметрыОткрытия.Свойство("Ключ", КлючЗаписи) И КлючЗаписи <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент КАК Контрагент,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИНН КАК ИНН,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.КПП КАК КПП,
		|	УчетныеЗаписиЭДО.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|			И (ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации)
		|			И (ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = &ИдентификаторКонтрагента)";
		
		Запрос.УстановитьПараметр("ИдентификаторОрганизации", КлючЗаписи.ИдентификаторОрганизации);
		Запрос.УстановитьПараметр("ИдентификаторКонтрагента", КлючЗаписи.ИдентификаторКонтрагента);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПараметрыОткрытия.Организация              = ВыборкаДетальныеЗаписи.Организация;
			ПараметрыОткрытия.ИдентификаторОрганизации = ВыборкаДетальныеЗаписи.ИдентификаторОрганизации;
			ПараметрыОткрытия.ИдентификаторКонтрагента = ВыборкаДетальныеЗаписи.ИдентификаторКонтрагента;
			ПараметрыОткрытия.Получатель               = 
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыборкаДетальныеЗаписи.Контрагент);
			ПараметрыОткрытия.ИНН                      = ВыборкаДетальныеЗаписи.ИНН;
			ПараметрыОткрытия.КПП                      = ВыборкаДетальныеЗаписи.КПП;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьУстановитьЗначениеВыбран(Значение)
	
	Для Каждого СтрокаПриглашения Из Приглашения Цикл
		
		Если Элементы.Приглашения.ПроверитьСтроку(СтрокаПриглашения.ПолучитьИдентификатор())
			И СтрокаПриглашения.Выбран <> Значение
			И ЗначениеЗаполнено(СтрокаПриглашения.Отбор) Тогда
			СтрокаПриглашения.Выбран = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеУчетнойЗаписи(Знач ТекущиеДанные)
	
	СтрокиСписка = ПолучитьИдентификаторы(ТекущиеДанные.Контрагент);
	СтрокаСписка = Неопределено;
	
	Для Каждого СтрокаСпискаЗначений Из СтрокиСписка Цикл
		Если СтрокаСпискаЗначений.Представление = ТекущиеДанные.Представление Тогда
			 СтрокаСписка = СтрокаСпискаЗначений;
			 Прервать;
		КонецЕсли;
	КонецЦикла;

	Если СтрокаСписка = Неопределено Тогда
		ТекущиеДанные.УчетнаяЗапись = ТекущиеДанные.Представление;
	Иначе
		ТекущиеДанные.УчетнаяЗапись = СтрокаСписка.Значение;
		ТекущиеДанные.Представление = СтрокаСписка.Представление;
	КонецЕсли;
	
	ПроверитьСовместимостьУчетныхЗаписей(ТекущиеДанные);

КонецПроцедуры

#КонецОбласти