#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура УдалитьНастройкуЗаполненияПолей(Отправитель, Получатель, Договор, ВидЭлектронногоДокумента, Формат) Экспорт
	
	Если Не ЗначениеЗаполнено(Отправитель)
		ИЛИ Не ЗначениеЗаполнено(Получатель)
		ИЛИ Не ЗначениеЗаполнено(ВидЭлектронногоДокумента)
		ИЛИ Не ЗначениеЗаполнено(Формат) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиЗаполненияДополнительныхПолей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Отправитель.Установить(Отправитель);
	НаборЗаписей.Отбор.Получатель.Установить(Получатель);
	НаборЗаписей.Отбор.Договор.Установить(Договор);
	НаборЗаписей.Отбор.ВидЭлектронногоДокумента.Установить(ВидЭлектронногоДокумента);
	НаборЗаписей.Отбор.Формат.Установить(Формат);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Ложь;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.НастройкиЗаполненияДополнительныхПолей";
	ДополнительныеПараметры.ОтметитьВсеРегистраторы = Ложь;
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	
	// Переход на новую архитектуру настроек ЭДО.
	Данные = ДанныеКОбработке_НоваяАрхитектураНастроекЭДО();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИнициализироватьПараметрыОбработкиДляПереходаНаНовуюВерсию(Параметры);
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.НастройкиЗаполненияДополнительныхПолей;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ПараметрыОтметкиВыполнения.ЭтоДвижения = Ложь;
	ПараметрыОтметкиВыполнения.ПолноеИмяРегистра = ПолноеИмяОбъекта;
	ПараметрыОтметкиВыполнения.ОтметитьВсеРегистраторы = Ложь;
	ПараметрыОтметкиВыполнения.ЭтоНезависимыйРегистрСведений = Истина;
	
	ОбработанныхОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	ПараметрыВыборки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ПараметрыВыборки.ИмяВременнойТаблицы = "втДанныеДляОбработки";
	ПараметрыВыборки.ДополнительныеИсточникиДанных.Вставить("УдалитьНастройкаЭДО");
	
	МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
	
	РезультатСозданияТаблицы = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, МенеджерТаблиц, ПараметрыВыборки);
		
	Если Не РезультатСозданияТаблицы.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Не РезультатСозданияТаблицы.ЕстьДанныеДляОбработки;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втДанныеДляОбработки.УдалитьНастройкаЭДО КАК НастройкаЭДО,
	|	втДанныеДляОбработки.УдалитьНастройкаЭДО.Организация КАК Организация,
	|	втДанныеДляОбработки.УдалитьНастройкаЭДО.Контрагент КАК Контрагент,
	|	втДанныеДляОбработки.УдалитьНастройкаЭДО.ДоговорКонтрагента КАК Договор,
	|	втДанныеДляОбработки.УдалитьНастройкаЭДО.ИспользоватьУПД КАК ИспользоватьУПД,
	|	втДанныеДляОбработки.УдалитьНастройкаЭДО.ИспользоватьУКД КАК ИспользоватьУКД
	|ИЗ
	|	втДанныеДляОбработки КАК втДанныеДляОбработки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КонверторФорматов = КонверторФорматовЭД();
	
	Пока Выборка.Следующий() Цикл
		
		РеквизитыНастройки = Новый Структура("Организация,Контрагент,Договор,ИспользоватьУПД,ИспользоватьУКД");
		ЗаполнитьЗначенияСвойств(РеквизитыНастройки, Выборка);
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("УдалитьНастройкаЭДО", Выборка.НастройкаЭДО);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Записать = Ложь;
			
			Набор = РегистрыСведений.НастройкиЗаполненияДополнительныхПолей.СоздатьНаборЗаписей();
			Набор.Отбор.УдалитьНастройкаЭДО.Установить(Выборка.НастройкаЭДО);
			Набор.Прочитать();
			
			ОбработатьДанные_НоваяАрхитектураНастроекЭДО(Набор, РеквизитыНастройки, КонверторФорматов, Записать);
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ТекстСообщения = НСтр("ru = 'Не удалось обработать настройки заполнения дополнительных полей по причине:'") + Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые настройки заполнения дополнительных полей (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция настроек заполнения дополнительных полей: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработанныхОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов  = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обновление

Процедура ИнициализироватьПараметрыОбработкиДляПереходаНаНовуюВерсию(Параметры)
	
	// Определим общее количество объектов к обработке.
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		ПараметрыВыборки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
		ПараметрыВыборки.ВыбиратьПорциями = Ложь;
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
			Параметры.Очередь, "РегистрСведений.НастройкиЗаполненияДополнительныхПолей", ПараметрыВыборки);
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеКОбработке_НоваяАрхитектураНастроекЭДО() 
	
	// 1. Заполнение новых измерений: Отправитель, Получатель, Договор
	// 2. Конвертация идентификатора формата.
	// 3. Конвертация видов ЭД (УПД и УКД).
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиЗаполненияДополнительныхПолей.УдалитьНастройкаЭДО КАК УдалитьНастройкаЭДО
	|ИЗ
	|	РегистрСведений.НастройкиЗаполненияДополнительныхПолей КАК НастройкиЗаполненияДополнительныхПолей
	|ГДЕ
	|	НастройкиЗаполненияДополнительныхПолей.Отправитель = &ПустойОтправитель
	|	И НастройкиЗаполненияДополнительныхПолей.Получатель = &ПустойПолучатель
	|	И НастройкиЗаполненияДополнительныхПолей.Договор = &ПустойДоговор
	|	И НастройкиЗаполненияДополнительныхПолей.УдалитьНастройкаЭДО <> &ПустаяНастройка
	|	И НастройкиЗаполненияДополнительныхПолей.Формат = """"
	|	И НастройкиЗаполненияДополнительныхПолей.УдалитьФормат <> """"";
	
	Измерения = Метаданные.РегистрыСведений.НастройкиЗаполненияДополнительныхПолей.Измерения;
	
	Запрос.УстановитьПараметр("ПустойОтправитель", Измерения.Отправитель.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("ПустойПолучатель", Измерения.Получатель.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("ПустойДоговор", Измерения.Договор.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("ПустаяНастройка", Измерения.УдалитьНастройкаЭДО.Тип.ПривестиЗначение());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьДанные_НоваяАрхитектураНастроекЭДО(Набор, РеквизитыНастройки, КонверторФорматов, Записать)
	
	Для каждого Запись Из Набор Цикл
		
		Если Не ЗначениеЗаполнено(Запись.Отправитель)
			И Не ЗначениеЗаполнено(Запись.Получатель)
			И Не ЗначениеЗаполнено(Запись.Договор)
			И Не ЗначениеЗаполнено(Запись.Формат)
			И ЗначениеЗаполнено(Запись.УдалитьФормат)
			И ЗначениеЗаполнено(Запись.УдалитьНастройкаЭДО) Тогда
			
			Запись.Отправитель = РеквизитыНастройки.Организация;
			Запись.Получатель = РеквизитыНастройки.Контрагент;
			Запись.Договор = РеквизитыНастройки.Договор;
			
			КлючФормата = Строка(Запись.ВидЭлектронногоДокумента) + "_" + Запись.УдалитьФормат;
			НовыйФормат = КонверторФорматов[КлючФормата];
			Если Не ЗначениеЗаполнено(НовыйФормат) Тогда
				НовыйФормат = Запись.УдалитьФормат;
			КонецЕсли;
			Запись.Формат = НовыйФормат;
			
			Если РеквизитыНастройки.ИспользоватьУПД 
				И Запись.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СчетФактура Тогда
				Запись.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.УПД;
			КонецЕсли;
			Если РеквизитыНастройки.ИспользоватьУКД 
				И Запись.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				Запись.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.УКД;
			КонецЕсли;
			
			Записать = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КонверторФорматовЭД()
	
	СведенияОФорматах = ОбменСКонтрагентамиПовтИсп.СведенияОФорматахЭлектронныхДокументовИзМакета();
	
	Конвертор = Новый Соответствие;
	
	Для каждого СтрокаСведений Из СведенияОФорматах Цикл
		
		Если СтрокаСведений.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
			Конвертор.Вставить(СтрокаСведений.ИдентификаторФормата, СтрокаСведений.ИдентификаторФормата);
		Иначе
			Ключ = Строка(СтрокаСведений.ВидЭлектронногоДокумента) + "_" + СтрокаСведений.УдалитьИдентификаторФормата;
			Конвертор.Вставить(Ключ, СтрокаСведений.ИдентификаторФормата);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Конвертор;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли