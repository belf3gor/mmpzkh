#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьВторичныеДанныеСтатусыФизическихЛиц(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Период КАК Период,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ КАК СтатусФизическихЛицКакНалогоплательщиковНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный КАК СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный
	|		ПО СтатусФизическихЛицКакНалогоплательщиковНДФЛ.ФизическоеЛицо = СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ФизическоеЛицо
	|ГДЕ
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ФизическоеЛицо ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	Период";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ПервичныеЗаписи = РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ.СоздатьНаборЗаписей().Выгрузить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		ПервичныеЗаписи.Очистить();
		ФизическоеЛицо = Выборка.ФизическоеЛицо;

		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный", "ФизическоеЛицо", ФизическоеЛицо) Тогда
			Продолжить;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ПервичныеЗаписи.Добавить(), Выборка);
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
		ВторичныеДанные = ВторичныеДанныеФизическогоЛица(ФизическоеЛицо, ПервичныеЗаписи);
		НаборЗаписей.Загрузить(ВторичныеДанные);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьСтатусыФизическихЛицНаНачалоГода(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный КАК СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ КАК СтатусФизическихЛицКакНалогоплательщиковНДФЛ
	|		ПО СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ФизическоеЛицо = СтатусФизическихЛицКакНалогоплательщиковНДФЛ.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ФизическоеЛицо
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ДатаНачала) > НАЧАЛОПЕРИОДА(МИНИМУМ(СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ДатаНачала), ГОД)";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат[0].Количество = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Период КАК Период,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ КАК СтатусФизическихЛицКакНалогоплательщиковНДФЛ
	|ГДЕ
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛ.ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				ФизическиеЛица.ФизическоеЛицо
	|			ИЗ
	|				ВТФизическиеЛица КАК ФизическиеЛица)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	Период";
	
	ПервичныеЗаписи = РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ.СоздатьНаборЗаписей().Выгрузить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		ПервичныеЗаписи.Очистить();
		ФизическоеЛицо = Выборка.ФизическоеЛицо;
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный", "ФизическоеЛицо", ФизическоеЛицо) Тогда
			Продолжить;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ПервичныеЗаписи.Добавить(), Выборка);
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
		ВторичныеДанные = ВторичныеДанныеФизическогоЛица(ФизическоеЛицо, ПервичныеЗаписи);
		НаборЗаписей.Загрузить(ВторичныеДанные);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВторичныеДанные(ФизическоеЛицо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписываемыйНабор = РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.СоздатьНаборЗаписей();
	ЗаписываемыйНабор.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
	ЗаписываемыйНабор.ОбменДанными.Загрузка = Истина;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Период КАК Период,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ КАК СтатусФизическихЛицКакНалогоплательщиковНДФЛ
	|ГДЕ
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	Период";
	ПервичныеЗаписи = Запрос.Выполнить().Выгрузить();
	
	Если ПервичныеЗаписи.Количество() = 0 Тогда
		ЗаписываемыйНабор.Записать();
		Возврат;
	КонецЕсли;
	
	ВторичныеДанные = ВторичныеДанныеФизическогоЛица(ФизическоеЛицо, ПервичныеЗаписи);
	ЗаписываемыйНабор.Загрузить(ВторичныеДанные);
	ЗаписываемыйНабор.Записать();
	
КонецПроцедуры

Функция ВторичныеДанныеФизическогоЛица(ФизическоеЛицо, ЗаписиПервичногоРегистра)
	
	ДатаЗакона285ФЗ = УчетНДФЛ.ДатаЗакона285ФЗ();
	ДатаИзмененияИсчисленияДляИностранцев = УчетНДФЛ.ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев();
	
	ДатыИзмененияЗаконодательства = Новый ТаблицаЗначений;
	ДатыИзмененияЗаконодательства.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ДатыИзмененияЗаконодательства.Добавить().Дата = ДатаЗакона285ФЗ; 
	ДатыИзмененияЗаконодательства.Добавить().Дата = ДатаИзмененияИсчисленияДляИностранцев;
	ДатыИзмененияЗаконодательства.Сортировать("Дата");

	ВторичныеДанные = РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	Если ЗаписиПервичногоРегистра.Количество() = 0 Тогда
		Возврат ВторичныеДанные;
	КонецЕсли;
	
	ЗаписиПервичногоРегистра.Сортировать("Период");
	
	ИзмененияЗаконодательства = ДатыИзмененияЗаконодательства.Скопировать();
	УчтенныеИзмененияЗаконодательства = Новый Массив;
	ДобавляемыеПериоды = ВторичныеДанные.Скопировать();
	
	Для Каждого ЗаписьПервичногоРегистра Из ЗаписиПервичногоРегистра Цикл
		Если ВторичныеДанные.Количество() > 0 Тогда
			// выполним разбиение с учетом дат изменения законодательства
			ПоследняяЗапись = ВторичныеДанные[ВторичныеДанные.Количество() - 1];
			
			Для Каждого ДатаИзмененияЗаконодательства Из ИзмененияЗаконодательства Цикл
				Если ДатаИзмененияЗаконодательства.Дата < ЗаписьПервичногоРегистра.Период 
					И ДатаИзмененияЗаконодательства.Дата > ПоследняяЗапись.ДатаНачала Тогда
					
					Запись = ВторичныеДанные.Добавить();
					Запись.ДатаНачала = ДатаИзмененияЗаконодательства.Дата;
					Запись.ФизическоеЛицо = ЗаписьПервичногоРегистра.ФизическоеЛицо;
					Запись.Статус = ПоследняяЗапись.Статус;
					
					УчтенныеИзмененияЗаконодательства.Добавить(ДатаИзмененияЗаконодательства);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Запись = ВторичныеДанные.Добавить();
		Запись.ДатаНачала = ЗаписьПервичногоРегистра.Период;
		Запись.ФизическоеЛицо = ЗаписьПервичногоРегистра.ФизическоеЛицо;
		Запись.Статус = ЗаписьПервичногоРегистра.Статус;
		
		Для Каждого ДатаИзмененияЗаконодательства Из УчтенныеИзмененияЗаконодательства Цикл
			ИзмененияЗаконодательства.Удалить(ДатаИзмененияЗаконодательства);
		КонецЦикла;
		УчтенныеИзмененияЗаконодательства.Очистить();
	КонецЦикла;
	
	Если ВторичныеДанные.Количество() > 0 Тогда
		// выполним разбиение с учетом дат изменения законодательства
		ПоследняяЗапись = ВторичныеДанные[ВторичныеДанные.Количество() - 1];
		Для Каждого ДатаИзмененияЗаконодатлсьтва Из ИзмененияЗаконодательства Цикл
			Если ДатаИзмененияЗаконодатлсьтва.Дата > ПоследняяЗапись.ДатаНачала Тогда
				ПоследняяЗапись = ВторичныеДанные[ВторичныеДанные.Количество() - 1];
				
				Запись = ВторичныеДанные.Добавить();
				Запись.ДатаНачала = ДатаИзмененияЗаконодатлсьтва.Дата;
				Запись.ФизическоеЛицо = ФизическоеЛицо;
				Запись.Статус = ПоследняяЗапись.Статус;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ВторичныеДанные.Сортировать("ДатаНачала");
	
	Если ВторичныеДанные.Количество() > 0 Тогда 
		ПерваяЗапись = ВторичныеДанные[0];
		Если ПерваяЗапись.ДатаНачала > НачалоГода(ПерваяЗапись.ДатаНачала) Тогда
			Запись = ВторичныеДанные.Добавить();
			Запись.ДатаНачала = НачалоГода(ПерваяЗапись.ДатаНачала);
			Запись.ФизическоеЛицо = ПерваяЗапись.ФизическоеЛицо;
			Запись.Статус = Справочники.СтатусыНалогоплательщиковПоНДФЛ.Резидент;
			ВторичныеДанные.Сортировать("ДатаНачала");
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущаяЗапись = Неопределено;
	Для Каждого ЗаписьНабора Из ВторичныеДанные Цикл
		НовыйПериод = Неопределено;
		Если ПредыдущаяЗапись <> Неопределено Тогда
			Если НачалоГода(ЗаписьНабора.ДатаНачала) <> НачалоГода(ПредыдущаяЗапись.ДатаНачала)
				И НачалоГода(ЗаписьНабора.ДатаНачала) <> ЗаписьНабора.ДатаНачала Тогда
				ПредыдущаяЗапись.ДатаОкончания = НачалоГода(ЗаписьНабора.ДатаНачала) - 1;
				
				НовыйПериод = ДобавляемыеПериоды.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйПериод, ПредыдущаяЗапись);
				НовыйПериод.ДатаНачала = НачалоГода(ЗаписьНабора.ДатаНачала);
				НовыйПериод.ДатаОкончания = ЗаписьНабора.ДатаНачала - 1;
				НовыйПериод.Год = НовыйПериод.ДатаНачала;
				
				ПредыдущаяЗапись = НовыйПериод;
				
			КонецЕсли;
			
			Если ЗаписьНабора.ДатаНачала <> НачалоМесяца(ЗаписьНабора.ДатаНачала) 
				И Месяц(ЗаписьНабора.ДатаНачала) <> 1 Тогда
				ПредыдущаяЗапись.ДатаОкончания = НачалоМесяца(ЗаписьНабора.ДатаНачала) - 1;
				
				НовыйПериод = ДобавляемыеПериоды.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйПериод, ПредыдущаяЗапись);
				НовыйПериод.ДатаНачала = НачалоМесяца(ЗаписьНабора.ДатаНачала);
				НовыйПериод.ДатаОкончания = ЗаписьНабора.ДатаНачала - 1;
				НовыйПериод.Год = НачалоГода(НовыйПериод.ДатаНачала);
			Иначе
				ПредыдущаяЗапись.ДатаОкончания = ЗаписьНабора.ДатаНачала - 1;
			КонецЕсли;
		КонецЕсли;
		
		ПредыдущаяЗапись = ЗаписьНабора;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДобавляемыеПериоды, ВторичныеДанные);
	ВторичныеДанные.Сортировать("ДатаНачала");
	
	Если ВторичныеДанные.Количество() > 0  Тогда
		ВторичныеДанные[ВторичныеДанные.Количество() - 1].ДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
	КонецЕсли;
	
	// рассчитаем значения на конец отчетных периодов
	ПредыдущаяЗапись = Неопределено;
	ЗаписиЗаГод = Новый Массив;
	РесурсыРегистра = 
	"РезидентРФНаКонецКвартала1,
	|РезидентРФНаКонецКвартала2,
	|РезидентРФНаКонецКвартала3,
	|РезидентРФНаКонецГода,
	|СтатусНаКонецКвартала1,
	|СтатусНаКонецКвартала2,
	|СтатусНаКонецКвартала3,
	|СтатусНаКонецГода";
	ЗначенияРесурсов = Новый Структура(РесурсыРегистра);
	Для Каждого ЗаписьНабора Из ВторичныеДанные Цикл
		
		РезидентРФНаКонецМесяца = ЗаписьНабора.Статус <> Справочники.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент;
		Если ЗаписьНабора.ДатаНачала < ДатаЗакона285ФЗ Тогда
			РезидентРФНаКонецМесяца = Не (ЗаписьНабора.Статус = Справочники.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент Или ЗаписьНабора.Статус = Справочники.СтатусыНалогоплательщиковПоНДФЛ.Беженцы);
		КонецЕсли;
		ЗаписьНабора.РезидентРФНаКонецМесяца = РезидентРФНаКонецМесяца;
		
		ЗаписьНабора.Год = НачалоГода(ЗаписьНабора.ДатаНачала);
		
		Если ПредыдущаяЗапись <> Неопределено И ПредыдущаяЗапись.Год <> ЗаписьНабора.Год Тогда
			Для Каждого ЗаписьЗаГод Из ЗаписиЗаГод Цикл
				ЗаполнитьЗначенияСвойств(ЗаписьЗаГод, ЗначенияРесурсов, РесурсыРегистра);
			КонецЦикла;
			
			ЗначенияРесурсов = Новый Структура(РесурсыРегистра);
			ЗаписиЗаГод = Новый Массив;
		КонецЕсли;
		
		Для ОтчетныйПериод = 1 По 4 Цикл
			ИмяРесурсаСтатус = ?(ОтчетныйПериод = 4, "СтатусНаКонецГода", "СтатусНаКонецКвартала" + ОтчетныйПериод);
			ИмяРесурсаРезидент = ?(ОтчетныйПериод = 4, "РезидентРФНаКонецГода", "РезидентРФНаКонецКвартала"  + ОтчетныйПериод);
			НачалоКвартала = ДобавитьМесяц(ЗаписьНабора.Год, (ОтчетныйПериод-1) * 3);
			ОкончаниеКвартала = КонецКвартала(НачалоКвартала);
			
			Если (ЗаписьНабора.ДатаНачала >= НачалоКвартала И ЗаписьНабора.ДатаНачала <= ОкончаниеКвартала) 
				Или (ЗаписьНабора.ДатаНачала < НачалоКвартала И ЗаписьНабора.ДатаОкончания > ОкончаниеКвартала) 
				Или (ЗаписьНабора.ДатаОкончания >= НачалоКвартала И ЗаписьНабора.ДатаОкончания <= ОкончаниеКвартала) Тогда
				ЗначенияРесурсов[ИмяРесурсаРезидент] = ЗаписьНабора.РезидентРФНаКонецМесяца;
				ЗначенияРесурсов[ИмяРесурсаСтатус] = ЗаписьНабора.Статус;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписиЗаГод.Добавить(ЗаписьНабора);
		
		ПредыдущаяЗапись = ЗаписьНабора;
	КонецЦикла;
	Если ЗаписиЗаГод.Количество() > 0 Тогда
		Для Каждого ЗаписьЗаГод Из ЗаписиЗаГод Цикл
			ЗаполнитьЗначенияСвойств(ЗаписьЗаГод, ЗначенияРесурсов, РесурсыРегистра);
		КонецЦикла;
	КонецЕсли;
	
	// рассчитаем ресурс ПрименяетсяСтавкаПункта1Статьи224НК
	Для Каждого ЗаписьНабора Из ВторичныеДанные Цикл
		Если ЗаписьНабора.ДатаНачала < ДатаИзмененияИсчисленияДляИностранцев Тогда
			ЗаписьНабора.ПрименяетсяСтавкаПункта1Статьи224НК = ЗаписьНабора.РезидентРФНаКонецМесяца Или ЗаписьНабора.РезидентРФНаКонецГода;
		ИначеЕсли ЗаписьНабора.СтатусНаКонецГода = Справочники.СтатусыНалогоплательщиковПоНДФЛ.Резидент Тогда
			ЗаписьНабора.ПрименяетсяСтавкаПункта1Статьи224НК = Истина;
		ИначеЕсли ЗаписьНабора.Статус = Справочники.СтатусыНалогоплательщиковПоНДФЛ.Резидент
			Или ЗаписьНабора.Статус = Справочники.СтатусыНалогоплательщиковПоНДФЛ.ГражданинСтраныЕАЭС Тогда
			
			ЗаписьНабора.ПрименяетсяСтавкаПункта1Статьи224НК = Истина;
		Иначе
			ЗаписьНабора.ПрименяетсяСтавкаПункта1Статьи224НК = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВторичныеДанные;
	
КонецФункции

#КонецОбласти

#КонецЕсли