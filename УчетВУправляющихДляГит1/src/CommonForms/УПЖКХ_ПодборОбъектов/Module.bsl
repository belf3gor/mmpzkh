
#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура-обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТаблицуОтбораНачальнымиДанными();
	
	Параметры.Свойство("Организация", Организация);
	
	// Если организация определена, то укажем ее информативно в заголовке формы подбора.
	Если Не Организация.Пустая() Тогда
		Заголовок = "Подбор объектов (" + Организация + ")";
	КонецЕсли;
	
	ВсегоЛС = ПолучитьОбщееКоличествоЛС();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура-обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	ОбновитьИнформационнуюНадпись();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура-обработчик события "НачалоВыбора" поля формы "ТаблицаОтбораЗначениеКритерия".
//
Процедура ТаблицаОтбораЗначениеКритерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КритерийОтбора = Элементы.ТаблицаОтбора.ТекущиеДанные.КритерийОтбора;
	
	Если КритерийОтбора = "Группа л/с" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстновитьВыбранноеЗначение", ЭтотОбъект);
		
		СтандартнаяОбработка = Ложь;
		
		СписокГруппЛС = ПолучитьСписокГруппЛС();
		
		ФормаВыбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора", , Элемент);
		
		ФормаВыбора.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы;
		
		ОткрытьФорму(ФормаВыбора, , , , , , ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаОтбораЗначениеКритерияНачалоВыбора()

&НаКлиенте
// Обработка установки выбранного значения.
//
Процедура УстновитьВыбранноеЗначение(Результат, Параметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Элементы.ТаблицаОтбора.ТекущиеДанные.ЗначениеКритерия = Результат;
	КонецЕсли;
	
КонецПроцедуры // УстновитьВыбранноеЗначение()

&НаКлиенте
// Процедура-обработчик события "Выбор" таблицы формы "ТаблицаНайденныеОбъекты".
//
Процедура ТаблицаНайденныеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущийОбъект = Элементы.ТаблицаНайденныеОбъекты.ТекущаяСтрока;
	Если Не ТекущийОбъект = Неопределено Тогда
		
		ЗаполнитьТаблицуПодобранныхОбъектовВсемиОбъектами(ТекущийОбъект);
		
		ОбновитьОформлениеДинамическогоСписка();
		
		ОбновитьИнформационнуюНадпись();
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНайденныеОбъектыВыбор()

&НаКлиенте
// Процедура-обработчик события "ПередНачаломДобавления" таблицы формы "ПодобранныеОбъекты".
//
Процедура ПодобранныеОбъектыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры // ПодобранныеОбъектыПередНачаломДобавления()

&НаКлиенте
// Процедура-обработчик события "Выбор" таблицы формы "ПодобранныеОбъекты".
//
Процедура ПодобранныеОбъектыПослеУдаления(Элемент)
	
	ОбновитьОформлениеДинамическогоСписка();
	
	ОбновитьИнформационнуюНадпись();
	
КонецПроцедуры // ПодобранныеОбъектыПослеУдаления()

&НаКлиенте
// Заполняет таблицу объектов лицевыми счетами, соответствующими критериям отбора.
//
Процедура ПодобратьОбъекты(Команда)
	
	СписокЛС = СформироватьСписокЛицевыхСчетов();
		
	УстановитьОтбор(СписокЛС);
	
КонецПроцедуры // ПодобратьОбъекты()

&НаКлиенте
// Процедура-обработчик нажатия кнопки "Выбрать все объекты".
//
Процедура ВыбратьВсеОбъекты(Команда)
	
	ЗаполнитьТаблицуПодобранныхОбъектовВсемиОбъектами();
	
	ОбновитьОформлениеДинамическогоСписка();
	
	ОбновитьИнформационнуюНадпись();
	
КонецПроцедуры // ВыбратьВсеОбъекты()

&НаКлиенте
// Процедура-обработчик нажатия кнопки "Выбрать выделенные объекты".
//
Процедура ВыбратьВыделенныеОбъекты(Команда)
	
	// Определяем новый массив выделенных объектов,
	// так как свойство "ВыделенныеСтроки" нельзя просто так передавать на сервер.
	МассивВыделенныхОбъектов = Новый Массив;
	Для Каждого ТекВыбранныйОбъект Из Элементы.ТаблицаНайденныеОбъекты.ВыделенныеСтроки Цикл
		МассивВыделенныхОбъектов.Добавить(ТекВыбранныйОбъект);
	КонецЦикла;
	
	ЗаполнитьТаблицуПодобранныхОбъектовВсемиОбъектами(МассивВыделенныхОбъектов);
	
	ОбновитьОформлениеДинамическогоСписка();
	
	ОбновитьИнформационнуюНадпись();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобранныеОбъекты(Команда)
	
	АдресВХранилище = ПоместитьСписокЛСВХранилище();
	
	Оповестить("ПередачаТЗ", АдресВХранилище);
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик нажатия кнопки "Очистить".
//
Процедура ОчиститьПодобранныеОбъекты(Команда)
	
	ПодобранныеОбъекты.Очистить();
	
	ОбновитьОформлениеДинамическогоСписка();
	
	ОбновитьИнформационнуюНадпись();
	
КонецПроцедуры // ОчиститьПодобранныеОбъекты()

#КонецОбласти

#Область ФункцииПолученияДанных

&НаСервереБезКонтекста
// Формирует список со всеми группами, имеющимися в справочнике "Лицевые счета".
//
// Возвращаемое значение:
//  СписокЗначений - список групп лицевых счетов.
// 
Функция ПолучитьСписокГруппЛС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ГруппаЛС
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.ЭтоГруппа
	|	И НЕ КВП_ЛицевыеСчета.ПометкаУдаления";
	
	ТаблицаГруппЛС = Запрос.Выполнить().Выгрузить();
	
	СписокГруппЛС = Новый СписокЗначений;
	СписокГруппЛС.ЗагрузитьЗначения(ТаблицаГруппЛС.ВыгрузитьКолонку("ГруппаЛС"));
	
	Возврат СписокГруппЛС;
	
КонецФункции // ПолучитьСписокГруппЛС()

&НаСервере
// Заполняет список СписокДополнительныхСвойств данными о дополнительных свойствах, заданных
// для лицевых счетов.
//
Функция СформироватьСписокДополнительныхСвойств()
	
	// ЖКХ 2.0
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	СвойстваОбъектов.Наименование КАК Свойство,
	//|	СвойстваОбъектов.ТипЗначения
	//|ИЗ
	//|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	//|ГДЕ
	//|	СвойстваОбъектов.НазначениеСвойства = &НазначениеСправочникЛС
	//|	И НЕ СвойстваОбъектов.ПометкаУдаления";
	//Запрос.УстановитьПараметр("НазначениеСправочникЛС", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ЛицевыеСчета);
	//	
	//Таблица = Запрос.Выполнить().Выгрузить();	
	//
	//Для Каждого Строка Из Таблица Цикл
	//	СписокДополнительныхСвойств.Добавить(Строка.ТипЗначения, Строка.Свойство);
	//КонецЦикла;	
	
	// ЖКХ 3.0
	
	МассивСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КВП_ЛицевыеСчета.ДополнительныеСведения.ВыгрузитьКолонку("Свойство");
	Для Каждого ТекСвойство Из МассивСвойств Цикл
		СписокДополнительныхСвойств.Добавить(ТекСвойство.ТипЗначения, ТекСвойство);
	КонецЦикла;
	
КонецФункции // СформироватьСписокДополнительныхСвойств()

&НаСервере
// Ищет лицевые счета, соответствующие критериям, указанным в таблице формы "ТаблицаОтбора".
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица подобранных лицевых счетов.
//
Функция СформироватьСписокЛицевыхСчетов()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	
	// Для установок отборов используем временную таблицу "ТаблицаЛицевыеСчета" с основной колонкой "ЛицевойСчет".
	// Во всех дальнейших запросах последний пакет запроса именуется как "ТаблицаЛицевыеСчета".
	
	тзОтбора = ТаблицаОтбора.Выгрузить();
	
	ВыбратьЛицевыеСчетаИзСправочника(тзОтбора, Запрос);
	
	// Получим список контрагентов для взаиморасчетов и лицевых счетов по ним,
	// если установлен отбор по контрагентам или видам контрагентов.
	ЕстьОтборПоКонтрагентам = Ложь;
	СписокКонтрагентов = ПолучитьСписокКонтрагентов(тзОтбора, ЕстьОтборПоКонтрагентам);
	Если ЕстьОтборПоКонтрагентам Тогда
		ВыбратьЛицевыеСчетаПоКонтрагентам(СписокКонтрагентов, Запрос);
	КонецЕсли;
	
	СтрокаСобственности = тзОтбора.Найти("Тип собст. помещения", "КритерийОтбора");
	Если Не СтрокаСобственности = Неопределено И ЗначениеЗаполнено(СтрокаСобственности.ЗначениеКритерия) Тогда
		ВыбратьЛицевыеСчетаПоВидуСобственности(СтрокаСобственности.ЗначениеКритерия, Запрос);
	КонецЕсли;
	
	СтрокаНаличияЛьготы = тзОтбора.Найти("Наличие льготы", "КритерийОтбора");
	Если Не СтрокаНаличияЛьготы = Неопределено И ЗначениеЗаполнено(СтрокаНаличияЛьготы.ЗначениеКритерия) Тогда
		ВыбратьЛицевыеСчетаПоЛьготе(СтрокаНаличияЛьготы.ЗначениеКритерия, Запрос);
	КонецЕсли;
	
	ТаблицаДопСвойств = ПолучитьТаблицуДопСвойств(тзОтбора);
	Если Не ТаблицаДопСвойств.Количество() = 0 Тогда
		ВыбратьЛицевыеСчетаПоДополнительнымСвойствам(ТаблицаДопСвойств, Запрос);
	КонецЕсли;
	
	ДополнитьТекстЗапроса(Запрос);
	
	СписокЛС = Новый СписокЗначений;
	СписокЛС.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
	
	Возврат СписокЛС;
	
КонецФункции // СформироватьСписокЛицевыхСчетов()

&НаКлиенте
// Устанавливает отбор по л/с в динамическом списке "Найденные объекты".
//
Процедура УстановитьОтбор(СписокЛС)
	
	Отбор = НайденныеОбъекты.Отбор.Элементы;
	Отбор.Очистить();

	УсловиеОтбора = Отбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	УсловиеОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
	УсловиеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	УсловиеОтбора.ПравоеЗначение = СписокЛС;
	
КонецПроцедуры // УстановитьОтбор()

&НаСервере
// Выбирает лицевые счета из справочника "Лицевые счета" по критериям, указанным в таблице формы "ТаблицаОтбора".
//
// Параметры:
//  тзОтбора - таблица с критериями отбора.
//  Запрос - запрос поиска л/с.
//
Процедура ВыбратьЛицевыеСчетаИзСправочника(тзОтбора, Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение
	|ПОМЕСТИТЬ ТаблицаЛицевыеСчета
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	НЕ КВП_ЛицевыеСчета.ЭтоГруппа
	|	И НЕ КВП_ЛицевыеСчета.ПометкаУдаления
	|	И &УсловиеНаГруппуЛС
	|	И &УсловиеНаПомещение
	|	И &УсловиеНаПодъезд
	|	И &УсловиеНаЗдание
	|	И &УсловиеНаВидПомещения
	|	И &УсловиеНаПечатьКвитанций";
	
	УсловиеНаГруппуЛС = "ИСТИНА";
	СтрокаГруппыЛС    = тзОтбора.Найти("Группа л/с", "КритерийОтбора");	
	Если Не СтрокаГруппыЛС = Неопределено И ЗначениеЗаполнено(СтрокаГруппыЛС.ЗначениеКритерия) Тогда
		УсловиеНаГруппуЛС = "КВП_ЛицевыеСчета.Ссылка В Иерархии (&ГруппаЛС)";
		Запрос.УстановитьПараметр("ГруппаЛС", СтрокаГруппыЛС.ЗначениеКритерия);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаГруппуЛС", УсловиеНаГруппуЛС);
	
	УсловиеНаПомещение = "ИСТИНА";
	СтрокаПомещения    = тзОтбора.Найти("Помещение", "КритерийОтбора");
	Если Не СтрокаПомещения = Неопределено И ЗначениеЗаполнено(СтрокаПомещения.ЗначениеКритерия) Тогда
		УсловиеНаПомещение = "КВП_ЛицевыеСчета.Адрес = &Помещение";
		Запрос.УстановитьПараметр("Помещение", СтрокаПомещения.ЗначениеКритерия);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаПомещение", УсловиеНаПомещение);
	
	УсловиеНаПодъезд = "ИСТИНА";
	СтрокаПодъезда   = тзОтбора.Найти("Подъезд", "КритерийОтбора");
	Если Не СтрокаПодъезда = Неопределено И ЗначениеЗаполнено(СтрокаПодъезда.ЗначениеКритерия) Тогда
		УсловиеНаПодъезд = "КВП_ЛицевыеСчета.Адрес.Подъезд = &Подъезд";
		Запрос.УстановитьПараметр("Подъезд", СтрокаПодъезда.ЗначениеКритерия);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаПодъезд", УсловиеНаПодъезд);
	
	УсловиеНаЗдание = "ИСТИНА";
	СтрокаЗдания    = тзОтбора.Найти("Здание", "КритерийОтбора");
	Если Не СтрокаЗдания = Неопределено И ЗначениеЗаполнено(СтрокаЗдания.ЗначениеКритерия) Тогда
		Если СтрокаЗдания.ЗначениеКритерия.ЭтоГруппа Тогда
			УсловиеНаЗдание = "КВП_ЛицевыеСчета.Адрес.Владелец В ИЕРАРХИИ(&Здание)";
		Иначе
			УсловиеНаЗдание = "КВП_ЛицевыеСчета.Адрес.Владелец = &Здание";
		КонецЕсли;
		Запрос.УстановитьПараметр("Здание", СтрокаЗдания.ЗначениеКритерия);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаЗдание", УсловиеНаЗдание);
	
	УсловиеНаВидПомещения = "ИСТИНА";
	СтрокаВидаПомещения   = тзОтбора.Найти("Вид помещения", "КритерийОтбора");
	Если Не СтрокаВидаПомещения = Неопределено И ЗначениеЗаполнено(СтрокаВидаПомещения.ЗначениеКритерия) Тогда
		УсловиеНаВидПомещения = "КВП_ЛицевыеСчета.Адрес.ВидПомещения = &ВидПомещения";
		Запрос.УстановитьПараметр("ВидПомещения", СтрокаВидаПомещения.ЗначениеКритерия);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаВидПомещения", УсловиеНаВидПомещения);
	
	УсловиеНаПечатьКвитанций = "ИСТИНА";
	СтрокаПечататьКвитанцию  = тзОтбора.Найти("Печать квитанций на бумажном носителе", "КритерийОтбора");
	Если Не СтрокаПечататьКвитанцию = Неопределено И ЗначениеЗаполнено(СтрокаПечататьКвитанцию.ЗначениеКритерия) Тогда
		// Получим дополнительный отбор в зависимости от выбранного параметра.
		// Поскольку реквизит справочника называется НЕ печатать квитанцию, поэтому,
		// берем все счета в которых реквизит принимает значение "ложь", если в отборе указано "Нет" и
		// счета в которых реквизит принимает значение "истина", если в отборе указано "Да".
		ДопУсловиеПечати         = ?(СтрокаПечататьКвитанцию.ЗначениеКритерия = Перечисления.УПЖКХ_ДаНет.Нет, "", "НЕ ");
		УсловиеНаПечатьКвитанций = ДопУсловиеПечати + "КВП_ЛицевыеСчета.НеПечататьКвитанцииНаБумажныхНосителях";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаПечатьКвитанций", УсловиеНаПечатьКвитанций);
	
	Запрос.Выполнить();
	
КонецПроцедуры // ВыбратьЛицевыеСчетаИзСправочника()

&НаСервереБезКонтекста
// Формирует список контрагентов, соответствующих критериям, указанным в таблице формы "ТаблицаОтбора".
//
// Параметры:
//  тзОтбора - таблица отбора.
//
// Возвращаемое значение:
//  СписокЗначений - список контрагентов.
//
Функция ПолучитьСписокКонтрагентов(тзОтбора, ЕстьОтборПоКонтрагентам = Ложь)
	
	СписокКонтрагентов = Новый СписокЗначений;
	
	// Значения отбора по Контрагенту.
	КонтрагентДляОтбора = Неопределено;
	СтрокаКонтрагента = тзОтбора.Найти("Контрагент", "КритерийОтбора");
	Если Не СтрокаКонтрагента = Неопределено И ЗначениеЗаполнено(СтрокаКонтрагента.ЗначениеКритерия) Тогда
		КонтрагентДляОтбора = СтрокаКонтрагента.ЗначениеКритерия;
	КонецЕсли;
	
	// Значения отбора по Контрагенту.
	ВидКонтрагентаДляОтбора = Неопределено;
	СтрокаВидаКонтрагента = тзОтбора.Найти("Вид контрагента для взаиморасчетов", "КритерийОтбора");
	Если Не СтрокаКонтрагента = Неопределено И ЗначениеЗаполнено(СтрокаВидаКонтрагента.ЗначениеКритерия) Тогда
		ВидКонтрагентаДляОтбора = СтрокаВидаКонтрагента.ЗначениеКритерия;
	КонецЕсли;
	
	// Отбор контрагентов по контрагенту или группе и по виду контрагента.
	Если ЗначениеЗаполнено(КонтрагентДляОтбора)
	 Или ЗначениеЗаполнено(ВидКонтрагентаДляОтбора) Тогда
		
		// Для управляющей процедуры установим, что отбор по контрагентам используется.
		ЕстьОтборПоКонтрагентам = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления
		|	И НЕ Контрагенты.ЭтоГруппа
		|	И &УсловиеОтбора";
		
		// Формирование текста условия для отбора контрагентов.
		ТекстУсловияОтбора = "ИСТИНА";
		Если ЗначениеЗаполнено(КонтрагентДляОтбора) Тогда
			ТекстУсловияОтбора = ТекстУсловияОтбора + " И Контрагенты.Ссылка В ИЕРАРХИИ(&КонтрагентДляОтбора)";
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидКонтрагентаДляОтбора) Тогда
			ТекстУсловияОтбора = ТекстУсловияОтбора + " И Контрагенты.ЮридическоеФизическоеЛицо = &ВидКонтрагентаДляОтбора";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", ТекстУсловияОтбора);
		
		// Установка параметров запроса производится всегда.
		Запрос.УстановитьПараметр("КонтрагентДляОтбора",     КонтрагентДляОтбора);
		Запрос.УстановитьПараметр("ВидКонтрагентаДляОтбора", ВидКонтрагентаДляОтбора);
		
		// Получение списка контрагентов.
		ТаблицаКонтрагентов = Запрос.Выполнить().Выгрузить();
		
		СписокКонтрагентов.ЗагрузитьЗначения(ТаблицаКонтрагентов.ВыгрузитьКолонку("Контрагент"));
		
	КонецЕсли;
	
	Возврат СписокКонтрагентов;
	
КонецФункции // ПолучитьСписокКонтрагентов()

&НаСервере
// Выбирает лицевые счета, соответствующие контрагентам, указанным в таблице формы "ТаблицаОтбора", и ранее найденным 
// лицевым счетам.
//
// Параметры:
//  ТаблицаЛС - таблица с лицевыми счетами, найденных в справочнике "Лицевые счета".
//  СписокКонтрагентов - список контрагентов, указанных в таблице отбора.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с лицевыми счетами.
//
Процедура ВыбратьЛицевыеСчетаПоКонтрагентам(СписокКонтрагентов, Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ втВсеЛицевыеСчетаКонтрагентаСоСведениямиДляВзаиморасчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&Дата,
	|			&УсловиеПоОрганизации
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						ТаблицаЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						ТаблицаЛицевыеСчета КАК ТаблицаЛицевыеСчета)
	|				И Контрагент В (&СписокКонтрагентов)) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЛицевыеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ втВсеОтветственныеЛицевыхСчетовВоВзаиморасчетах
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&Дата,
	|			&УсловиеПоОрганизации
	|				И ЛицевойСчет.Адрес В
	|					(ВЫБРАТЬ
	|						втВсеЛицевыеСчетаКонтрагентаСоСведениямиДляВзаиморасчетов.Помещение КАК Помещение
	|					ИЗ
	|						втВсеЛицевыеСчетаКонтрагентаСоСведениямиДляВзаиморасчетов КАК втВсеЛицевыеСчетаКонтрагентаСоСведениямиДляВзаиморасчетов)) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеЛицевыеСчетаКонтрагентаСоСведениямиДляВзаиморасчетов.ЛицевойСчет КАК ЛицевойСчет,
	|	втВсеЛицевыеСчетаКонтрагентаСоСведениямиДляВзаиморасчетов.Помещение КАК Помещение
	|ПОМЕСТИТЬ ТаблицаЛицевыеСчета
	|ИЗ
	|	втВсеЛицевыеСчетаКонтрагентаСоСведениямиДляВзаиморасчетов КАК втВсеЛицевыеСчетаКонтрагентаСоСведениямиДляВзаиморасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВсеОтветственныеЛицевыхСчетовВоВзаиморасчетах КАК втВсеОтветственныеЛицевыхСчетовВоВзаиморасчетах
	|		ПО втВсеЛицевыеСчетаКонтрагентаСоСведениямиДляВзаиморасчетов.ЛицевойСчет = втВсеОтветственныеЛицевыхСчетовВоВзаиморасчетах.ЛицевойСчет
	|			И втВсеЛицевыеСчетаКонтрагентаСоСведениямиДляВзаиморасчетов.Контрагент = втВсеОтветственныеЛицевыхСчетовВоВзаиморасчетах.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втВсеЛицевыеСчетаКонтрагентаСоСведениямиДляВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втВсеОтветственныеЛицевыхСчетовВоВзаиморасчетах";
	
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
	
	ОтборПоОрганизации = "ИСТИНА";
	Если Не Организация.Пустая() Тогда
		ОтборПоОрганизации = "Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизации", ОтборПоОрганизации);
	
	Запрос.Выполнить();
	
КонецПроцедуры // ВыбратьЛицевыеСчетаПоКонтрагентам()

&НаСервере
// Выбирает лицевые счета, соответствующие собственности, указанной в таблице формы "ТаблицаОтбора", и ранее найденным
// лицевым счетам.
// 
// Параметры:
//  ТаблицаЛС - таблица с ранее найденными лицевыми счетами.
//  ТипСобственности - тип собственности.
//
// Возвращаемое значение:
//  СписокЗначений - список лицевых счетов.
//
Процедура ВыбратьЛицевыеСчетаПоВидуСобственности(ВидСобственности, Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение КАК Помещение
	|ПОМЕСТИТЬ втСобственность
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&Дата,
	|			Помещение В
	|					(ВЫБРАТЬ
	|						ТаблицаЛицевыеСчета.Помещение
	|					ИЗ
	|						ТаблицаЛицевыеСчета КАК ТаблицаЛицевыеСчета)
	|				И ВидСобственности = &ВидСобственности) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаЛицевыеСчета.Помещение КАК Помещение
	|ПОМЕСТИТЬ врТаблицаЛицевыеСчетаПоВидуСобственности
	|ИЗ
	|	ТаблицаЛицевыеСчета КАК ТаблицаЛицевыеСчета
	|ГДЕ
	|	ТаблицаЛицевыеСчета.Помещение В
	|			(ВЫБРАТЬ
	|				втСобственность.Помещение
	|			ИЗ
	|				втСобственность КАК втСобственность)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСобственность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЛицевыеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаЛицевыеСчетаПоВидуСобственности.ЛицевойСчет КАК ЛицевойСчет,
	|	врТаблицаЛицевыеСчетаПоВидуСобственности.Помещение КАК Помещение
	|ПОМЕСТИТЬ ТаблицаЛицевыеСчета
	|ИЗ
	|	врТаблицаЛицевыеСчетаПоВидуСобственности КАК врТаблицаЛицевыеСчетаПоВидуСобственности";
	
	Запрос.УстановитьПараметр("ВидСобственности", ВидСобственности);
	
	Запрос.Выполнить();
	
КонецПроцедуры // ВыбратьЛицевыеСчетаПоВидуСобственности()	

&НаСервере
// Выбирает лицевые счета, соответствующие признаку наличия/отсутствия льготы, указанному в таблица формы "ТаблицаОтбора", 
// и ранее найденным лицевым счетам.
// 
// Параметры:
//  ТаблицаЛС - ранее найденные лицевые счета.
//  НаличиеЛьготы - признак наличия/отсутствия льготы.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с лицевыми счетами.
//
Процедура ВыбратьЛицевыеСчетаПоЛьготе(НаличиеЛьготы, Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛССоЛьготами
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&Дата, ДатаИзменения <= &Дата) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ ТаблицаЛицевыеСчетаСОтборомПоЛьготе
	|ИЗ
	|	ТаблицаЛицевыеСчета КАК ТаблицаЛицевыеСчета
	|ГДЕ
	|	&ОтборПоЛьготе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЛССоЛьготами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЛицевыеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЛицевыеСчетаСОтборомПоЛьготе.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ ТаблицаЛицевыеСчета
	|ИЗ
	|	ТаблицаЛицевыеСчетаСОтборомПоЛьготе КАК ТаблицаЛицевыеСчетаСОтборомПоЛьготе";
	
	ОтборПоЛьготе = "ИСТИНА";
	Если НаличиеЛьготы = Перечисления.УПЖКХ_ДаНет.Да Тогда
		ОтборПоЛьготе = "ТаблицаЛицевыеСчета.ЛицевойСчет В
						|			(ВЫБРАТЬ
						|				втЛССоЛьготами.ЛицевойСчет
						|			ИЗ
						|				втЛССоЛьготами КАК втЛССоЛьготами)";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоЛьготе", ОтборПоЛьготе);
	
	Запрос.Выполнить();
	
КонецПроцедуры // ВыбратьЛицевыеСчетаПоЛьготе()

&НаСервере
// Формирует таблицу с дополнительными свойствами, по которым установлен отбор в таблице формы "ТаблицаОтбора".
// 
// Параметры:
//  тзОтбора - таблица отбора.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с дополнительными свойствами и их значениями.
//
Функция ПолучитьТаблицуДопСвойств(тзОтбора)
	
	Таблица = тзОтбора.СкопироватьКолонки();
	Таблица.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	
	Для Каждого Элемент Из СписокДополнительныхСвойств Цикл
		СтрокаОтбора = тзОтбора.Найти(Элемент.Представление, "КритерийОтбора");
		
		Если Не СтрокаОтбора = Неопределено И ЗначениеЗаполнено(СтрокаОтбора.ЗначениеКритерия) Тогда	
			ТекСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(СтрокаОтбора.КритерийОтбора);
			
			Если Не ТекСвойство = Неопределено Тогда
				НоваяСтрока = Таблица.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтбора);	
				НоваяСтрока.Свойство = ТекСвойство;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуДопСвойств()	

&НаСервере
// Выбирает лицевые счета, соответствующие установленным значениям дополнительных свойств и ранее найденным лицевым
// счетам.
//
// Параметры:
//  ТаблицаДопСвойств - таблица с допольнительными свойствами и их значениями.
//  СчетчикПакетов - счетчик пакетов в запросе.
//  Запрос - запроса поиска л/с.
//
Процедура ВыбратьЛицевыеСчетаПоДополнительнымСвойствам(ТаблицаДопСвойств, Запрос)
	
	СписокСвойств = Новый СписокЗначений;
	СписокСвойств.ЗагрузитьЗначения(ТаблицаДопСвойств.ВыгрузитьКолонку("Свойство"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.КВП_ЛицевыеСчета) КАК ЛицевойСчет
	|ПОМЕСТИТЬ ТаблицаЛицевыеСчетаПоДополнительнымСвойствам
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект В
	|			(ВЫБРАТЬ
	|				ТаблицаЛицевыеСчета.ЛицевойСчет
	|			ИЗ
	|				ТаблицаЛицевыеСчета КАК ТаблицаЛицевыеСчета)
	|	И ДополнительныеСведения.Свойство В(&СписокСвойств)
	|	И &ОтборПоДополнительнымСвойствам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЛицевыеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЛицевыеСчетаПоДополнительнымСвойствам.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ ТаблицаЛицевыеСчета
	|ИЗ
	|	ТаблицаЛицевыеСчетаПоДополнительнымСвойствам КАК ТаблицаЛицевыеСчетаПоДополнительнымСвойствам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЛицевыеСчетаПоДополнительнымСвойствам";
	
	Если ТаблицаДопСвойств.Количество() = 0 Тогда
		
		ОтборПоДополнительнымСвойствам = "ИСТИНА";
		
	Иначе
		
		ОтборПоДополнительнымСвойствам = "ВЫБОР";
		
		Счетчик = 1;
		
		Для Каждого СтрокаДопСвойства Из ТаблицаДопСвойств Цикл
			ОтборПоДополнительнымСвойствам = ОтборПоДополнительнымСвойствам +
			"
			|	КОГДА ДополнительныеСведения.Свойство = &Свойство" + Счетчик + "
			|		ТОГДА ДополнительныеСведения.Значение = &Значение" + Счетчик;
			
			Запрос.УстановитьПараметр("Свойство" + Счетчик, СтрокаДопСвойства.Свойство);
			Запрос.УстановитьПараметр("Значение" + Счетчик, ?(ТипЗнч(СтрокаДопСвойства.ЗначениеКритерия) = Тип("ПеречислениеСсылка.УПЖКХ_ДаНет"),
															?(СтрокаДопСвойства.ЗначениеКритерия = Перечисления.УПЖКХ_ДаНет.Да, Истина, Ложь), 
															СтрокаДопСвойства.ЗначениеКритерия));
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ОтборПоДополнительнымСвойствам = ОтборПоДополнительнымСвойствам +
		"
		|	КОНЕЦ";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоДополнительнымСвойствам", ОтборПоДополнительнымСвойствам);
	
	Запрос.УстановитьПараметр("СписокСвойств", СписокСвойств);
	
	Запрос.Выполнить();
	
КонецПроцедуры // ВыбратьЛицевыеСчетаПоДополнительнымСвойствам()	

&НаСервере
// Формирует фрагмент текста запроса, соответствующий итоговой выборке данных.
//
// Параметры:
//  Запрос - запрос поиска л/с.
//
Процедура ДополнитьТекстЗапроса(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛицевыеСчета.ЛицевойСчет
	|ИЗ
	|	ТаблицаЛицевыеСчета КАК ТаблицаЛицевыеСчета";
	
КонецПроцедуры // ДополнитьТекстЗапроса()

&НаСервере
// Формирует список л/с для которых необходимо установить оформление в таблице формы
// "ТаблицаНайденныеОбъекты".
//
// Возвращаемое значение:
//  СписокЗначений - список л/с.
//
Функция ПолучитьСписокЛСДляОтбора()
	
	СписокЛС = Новый СписокЗначений;
	СписокЛС.ЗагрузитьЗначения(ПодобранныеОбъекты.Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
	
	Возврат СписокЛС;
	
КонецФункции // ПолучитьСписокЛСДляОтбора()

&НаСервереБезКонтекста
// Формирует таблицу со всеми элементами справочника "Лицевые счета".
//
// Ворзвращаемое значение:
//  ТаблицаЗначений - таблица с элементами справочника л/с.
//
Функция СформироватьТаблицуЛС(ОтобранныеОбъекты = Неопределено, ВыделенныеОбъекты = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение,
	|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	НЕ КВП_ЛицевыеСчета.ПометкаУдаления
	|	И НЕ КВП_ЛицевыеСчета.ЭтоГруппа
	|	И &УсловиеОтобранныхОбъектов
	|	И &УсловиеВыделенныхОбъектов";
	
	// Условие отобранных объектов.
	ТекстУсловияОтобранныхОбъектов = "ИСТИНА";
	Если Не ОтобранныеОбъекты = Неопределено Тогда
		ТекстУсловияОтобранныхОбъектов = "КВП_ЛицевыеСчета.Ссылка В (&ОтобранныеОбъекты)";
		Запрос.УстановитьПараметр("ОтобранныеОбъекты", ОтобранныеОбъекты);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтобранныхОбъектов", ТекстУсловияОтобранныхОбъектов);
	
	// Условие выделенных объектов.
	ТекстУсловияВыделенныхОбъектов = "ИСТИНА";
	Если Не ВыделенныеОбъекты = Неопределено Тогда
		ТекстУсловияВыделенныхОбъектов = "КВП_ЛицевыеСчета.Ссылка В ИЕРАРХИИ (&ВыделенныеОбъекты)";
		Запрос.УстановитьПараметр("ВыделенныеОбъекты", ВыделенныеОбъекты);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВыделенныхОбъектов", ТекстУсловияВыделенныхОбъектов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СформироватьТаблицуЛС()

&НаСервереБезКонтекста
// Получает количество лицевых счетов, имеющихся в справочнике "Лицевые счета".
//
// Возвращаемое значение:
//  Число - количество элементов.
//
Функция ПолучитьОбщееКоличествоЛС()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Ссылка
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	НЕ КВП_ЛицевыеСчета.ЭтоГруппа
	|	И НЕ КВП_ЛицевыеСчета.ПометкаУдаления";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица.Количество();
	
КонецФункции // ПолучитьОбщееКоличествоЛС()

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаСервере
// Заполняет колонку "КритерийОтбора" таблицы отбора.
// 
Процедура ЗаполнитьТаблицуОтбораНачальнымиДанными()
	
	ДобавитьСтрокуВТаблицуОтбора("Группа л/с",                                Справочники.КВП_ЛицевыеСчета.ПустаяСсылка());
	ДобавитьСтрокуВТаблицуОтбора("Помещение",                                 Справочники.УПЖКХ_Помещения.ПустаяСсылка());
	ДобавитьСтрокуВТаблицуОтбора("Подъезд",                                   Справочники.КВП_Подъезды.ПустаяСсылка());
	ДобавитьСтрокуВТаблицуОтбора("Здание",                                    Справочники.КВП_Здания.ПустаяСсылка());
	ДобавитьСтрокуВТаблицуОтбора("Контрагент",                                Справочники.Контрагенты.ПустаяСсылка());
	//ДобавитьСтрокуВТаблицуОтбора("Группа контрагентов",                       Справочники.Контрагенты.ПустаяСсылка());
	ДобавитьСтрокуВТаблицуОтбора("Вид контрагента для взаиморасчетов",        Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	ДобавитьСтрокуВТаблицуОтбора("Тип собст. помещения",                      Перечисления.УПЖКХ_ВидыСобственности.ПустаяСсылка());
	ДобавитьСтрокуВТаблицуОтбора("Вид помещения",                             Справочники.УПЖКХ_ВидыПомещений.ПустаяСсылка());
	ДобавитьСтрокуВТаблицуОтбора("Наличие льготы",                            Перечисления.УПЖКХ_ДаНет.ПустаяСсылка());
	ДобавитьСтрокуВТаблицуОтбора("Печать квитанций на бумажном носителе",     Перечисления.УПЖКХ_ДаНет.ПустаяСсылка());
	
	// Добавляем в таблицу строки, соответствующие дополнительным свойствам л/с.
	СформироватьСписокДополнительныхСвойств();
	
	Для Каждого ДополнительноеСвойство Из СписокДополнительныхСвойств Цикл
		ТипСвойства = ДополнительноеСвойство.Значение;
		
		Если ТипСвойства = Новый ОписаниеТипов("Булево") Тогда
			ЗначениеПоУмолчанию = Перечисления.УПЖКХ_ДаНет.ПустаяСсылка();
		Иначе
			ЗначениеПоУмолчанию = ДополнительноеСвойство.Значение.ПривестиЗначение("");
		КонецЕсли;	
		ДобавитьСтрокуВТаблицуОтбора(ДополнительноеСвойство.Представление, ЗначениеПоУмолчанию);		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьТаблицуОтбораНачальнымиДанными()

&НаСервере
// Добавляет в таблицу отбора новую строку с критерием отбора и значением данного критерия по умолчанию.
//
// Параметры:
//  Критерий - критерий отбора.
//  ЗначениеПоУмолчанию - значение критерия по умолчанию.
//
Процедура ДобавитьСтрокуВТаблицуОтбора(Критерий, ЗначениеПоУмолчанию)
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	
	НоваяСтрока.КритерийОтбора   = Критерий;
	НоваяСтрока.ЗначениеКритерия = ЗначениеПоУмолчанию;
	
КонецПроцедуры // ДобавитьСтрокуВТаблицуОтбора()	

&НаКлиенте
// Устанавливает оформление для строк таблицы формы "ТаблицаНайденныеОбъекты".
//
Процедура ОбновитьОформлениеДинамическогоСписка()
	
	СписокЛС = ПолучитьСписокЛСДляОтбора();
	
	Оформление = НайденныеОбъекты.УсловноеОформление.Элементы;
	Оформление.Очистить();
	
	НовоеОформление = Оформление.Добавить();
	ЭлементОформления = НовоеОформление.Оформление;
	ЭлементОформления.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	
	ОтборОформления = НовоеОформление.Отбор.Элементы;
	ОтборОформления.Очистить();
	
	ОтборНовогоОформления = ОтборОформления.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборНовогоОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
	ОтборНовогоОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборНовогоОформления.ПравоеЗначение = СписокЛС;
	
КонецПроцедуры // ОбновитьОформлениеДинамическогоСписка()

&НаСервере
// Заполняет таблицу формы "ПодобранныеОбъекты" всеми объектами, имеющимися в таблице формы "ТаблицаНайденныеОбъекты".
//
Процедура ЗаполнитьТаблицуПодобранныхОбъектовВсемиОбъектами(ВыделенныеОбъекты = Неопределено)
	
	ОтборДС = НайденныеОбъекты.Отбор.Элементы;
	
	// Получаем список отобранных объектов, если указаны условия отбора.
	ОтобранныеОбъекты = Неопределено;
	Если ОтборДС.Количество() > 0 Тогда
		ОтобранныеОбъекты = ОтборДС[0].ПравоеЗначение;
	КонецЕсли;
	
	// Получаем список объектов, подлежащих выбору.
	тзВсеОбъекты = СформироватьТаблицуЛС(ОтобранныеОбъекты, ВыделенныеОбъекты);
	
	// Получаем текущий список выбранных объектов.
	тзПодобранныеОбъекты = ПодобранныеОбъекты.Выгрузить();
	
	// Дополняем выбранные ранее объекты вновь выбранными.
	ДополненнаяТаблица = ДополнитьТаблицуПодобранныхОбъектов(тзПодобранныеОбъекты, тзВсеОбъекты);
	
	// Заполняем таблицу подобранных объектов.
	ПодобранныеОбъекты.Загрузить(ДополненнаяТаблица);
	
КонецПроцедуры // ЗаполнитьТаблицуПодобранныхОбъектовВсемиОбъектами()

&НаСервереБезКонтекста
// Дополняет элементы таблицы тзПодобранныеОбъекты элементами из таблицы тзВсеОбъекты.
// 
// Параметры:
//  тзПодобранныеОбъекты - таблица с уже подобранными объектами.
//  тзВсеОбъекты - таблица со всеми найденными объектами.
//
// Возвращаемое значение:
//  ТаблицаЗначений - дополненная таблица значений.
//
Функция ДополнитьТаблицуПодобранныхОбъектов(тзПодобранныеОбъекты, тзНовыеОбъекты)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тзПодобранныеОбъекты.ЛицевойСчет КАК ЛицевойСчет,
	|	тзПодобранныеОбъекты.Помещение КАК Помещение,
	|	тзПодобранныеОбъекты.Здание КАК Здание
	|ПОМЕСТИТЬ врПодобранныеОбъекты
	|ИЗ
	|	&тзПодобранныеОбъекты КАК тзПодобранныеОбъекты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тзНовыеОбъекты.ЛицевойСчет КАК ЛицевойСчет,
	|	тзНовыеОбъекты.Помещение КАК Помещение,
	|	тзНовыеОбъекты.Здание КАК Здание
	|ПОМЕСТИТЬ врНовыеОбъекты
	|ИЗ
	|	&тзНовыеОбъекты КАК тзНовыеОбъекты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врПодобранныеОбъекты.ЛицевойСчет КАК ЛицевойСчет,
	|	врПодобранныеОбъекты.Помещение КАК Помещение,
	|	врПодобранныеОбъекты.Здание КАК Здание
	|ИЗ
	|	врПодобранныеОбъекты КАК врПодобранныеОбъекты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	врНовыеОбъекты.ЛицевойСчет,
	|	врНовыеОбъекты.Помещение,
	|	врНовыеОбъекты.Здание
	|ИЗ
	|	врНовыеОбъекты КАК врНовыеОбъекты";
	
	Запрос.УстановитьПараметр("тзПодобранныеОбъекты", тзПодобранныеОбъекты);
	Запрос.УстановитьПараметр("тзНовыеОбъекты",       тзНовыеОбъекты);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ДополнитьТаблицуПодобранныхОбъектов()

&НаКлиенте
// Обновляет надпись с информацией о количестве выбранных объектов.
//
Процедура ОбновитьИнформационнуюНадпись()
	
	ВсегоПодобрано = ПодобранныеОбъекты.Количество();
	
	ПоследняяЦифра = Прав(Строка(ВсегоПодобрано), 1);
	
	ОбъектовОкончание  = "";
	ПодобраноОкончание = "о";
	Если ПоследняяЦифра = "2" ИЛИ ПоследняяЦифра = "3" ИЛИ ПоследняяЦифра = "4" Тогда
		ОбъектовОкончание = "а";
	ИначеЕсли НЕ ПоследняяЦифра = "1" Тогда
		ОбъектовОкончание = "ов";
	Иначе
		ПодобраноОкончание = "";
	КонецЕсли;
	
	Элементы.НадписьВсегоОбъектов.Заголовок = "Выбран" + ПодобраноОкончание + " " + ВсегоПодобрано
											+ " объект" + ОбъектовОкончание + " из " + ВсегоЛС + ".";
	
КонецПроцедуры // ОбновитьИнформационнуюНадпись()

&НаСервере
// Помещает таблицу значений со списком подобранных л/с в хранилище.
//
Функция ПоместитьСписокЛСВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(ПодобранныеОбъекты.Выгрузить(, "ЛицевойСчет").ВыгрузитьКолонку("ЛицевойСчет"), Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьСписокЛСВХранилище()

#КонецОбласти