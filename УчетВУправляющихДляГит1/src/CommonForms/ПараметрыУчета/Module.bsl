
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
	ПараметрыУчета = ОбщегоНазначенияБПВызовСервера.ОпределитьПараметрыУчета();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыУчета);
	
	Если Не ЭлементыЗатрат.ПоддерживаетсяУчетПоЭлементамЗатрат() Тогда
		Элементы.ДетализацияУчетаРасходов.Видимость = Ложь;
	КонецЕсли;
	
	Если КадровыйУчет Тогда
		КадровыйУчетПолный = 1;
		КадровыйУчетУпрощенный = 0;
	Иначе
		КадровыйУчетПолный = 0;
		КадровыйУчетУпрощенный = 1;
	КонецЕсли;
	
	ОбновитьИсходныеЗначения(ЭтаФорма);
	
	НачалоПримененияПостановления1137 = УчетНДСБП.ПолучитьДатуНачалаДействияПостановления1137();
	ОцениватьДоходыИРасходыВНУПоКурсуАвансов = ЗначениеЗаполнено(НаборКонстант.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов);
	ВестиУчетПоСкладам = СкладскойУчет <> 0;
	
	ОтдельнаяНумерацияСчетовФактурНаАванс = Константы.ОтдельнаяНумерацияСчетовФактурНаАванс.Получить();
	
	НадписьКадровыйУчет = НСтр("ru = 'Кадровый учет:'");
	
	Если НЕ УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
		Элементы.ГруппаЗарплатаИКадры.Видимость = Ложь;
	КонецЕсли;
	
	ТолькоПросмотр = НЕ РольДоступна("ПолныеПрава");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПараметрыУчета = ПолучитьСтруктуруПараметровУчета(ЭтаФорма);
	
	СнятьПризнакУчетаПоПодразделениям = Ложь;
	Если (НаборКонстант.ВестиУчетЗатратПоПодразделениям <> ВестиУчетЗатратПоПодразделениямИсходноеЗначение) И ВестиУчетЗатратПоПодразделениямИсходноеЗначение = Истина Тогда
		СнятьПризнакУчетаПоПодразделениям = Истина;
	КонецЕсли;
	
	ТекстВопроса = ПолучитьТекстВопросаПродолжитьЗапись(ПараметрыУчета, СнятьПризнакУчетаПоПодразделениям);
	Если ПустаяСтрока(ТекстВопроса) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ПропуститьПроверку") 
		И ПараметрыЗаписи.ПропуститьПроверку Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ВопросПередЗаписьюЗавершение", ЭтотОбъект, ПараметрыЗаписи);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыУчета = ПолучитьСтруктуруПараметровУчета(ЭтаФорма);
	ОбщегоНазначенияБПВызовСервера.ПрименитьПараметрыУчета(ПараметрыУчета, ИзмененыПараметрыСубконто, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		НаборКонстант.ВестиУчетЗатратПоПодразделениям = Истина;
	КонецЕсли;
	
	ПланыСчетов.Хозрасчетный.УстановитьУчетЗатратПоПодразделениям(
		НаборКонстант.ВестиУчетЗатратПоПодразделениям,
		ОбщегоНазначенияБПВызовСервера.СобытиеЖурналаРегистрацииПараметрыУчета());
	
	Если НачалоПримененияПостановления1137 < '20120101' ИЛИ НачалоПримененияПостановления1137 > '20120401' Тогда
		НачалоПримененияПостановления1137 = '20120401';
	КонецЕсли;
	
	Если НачалоПримененияПостановления1137 <> УчетНДСБП.ПолучитьДатуНачалаДействияПостановления1137() Тогда
		УчетНДСБП.УстановитьДатуНачалаДействияПостановления1137(НачалоПримененияПостановления1137);
	КонецЕсли;
	
	Константы.ОтдельнаяНумерацияСчетовФактурНаАванс.Установить(ОтдельнаяНумерацияСчетовФактурНаАванс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзменениеНастроекПараметровУчета");
	
	Если ИзмененыПараметрыСубконто Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Изменены параметры субконто'"), 
			"e1cib/app/Обработка.ЖурналРегистрации", "Журнал регистрации");
	КонецЕсли;
	
	ОбновитьИсходныеЗначения(ЭтаФорма);	
	УправлениеФормой(ЭтаФорма);
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Установить текущую страницу
	Если ТипЗнч(ПараметрыОткрытия) = Тип("Структура") Тогда
		АктивныйЭлемент = Неопределено;
		ПараметрыОткрытия.Свойство("АктивныйЭлемент", АктивныйЭлемент);
		
		Если ТипЗнч(АктивныйЭлемент) = Тип("Строка") Тогда
			
			Если АктивныйЭлемент = "ПорядокНумерацииСчетовФактур" Тогда
				
				ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаНДС;
				
				ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.Найти("ПорядокНумерацииСчетовФактур");
				
			ИначеЕсли АктивныйЭлемент = "СрокОплатыВыставленныхСчетов" Тогда
				
				ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаРасчеты;
				
				ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.СрокОплатыСчетовПокупателю;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СрокОплатыПокупателейПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СрокОплатыПоставщикамПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОцениватьДоходыИРасходыВНУПоКурсуАвансовПриИзменении(Элемент)
	
	Элементы.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.Доступность = НЕ ТолькоПросмотр И
		(ОцениватьДоходыИРасходыВНУПоКурсуАвансов = 1);
	Если ОцениватьДоходыИРасходыВНУПоКурсуАвансов = 1 И НЕ ЗначениеЗаполнено(НаборКонстант.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов) Тогда
		НаборКонстант.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = Дата("20100101");
	Иначе
		НаборКонстант.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = '00010101';
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоСтатьямДДСПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ИспользоватьСтатьиДвиженияДенежныхСредств
		И ВедетсяУчетНФО() Тогда
		ТекстПредупреждения = НСтр("ru='Нельзя отключить аналитику по статьям движения денежных средств,
			|так как ведется учет некредитных финансовых организаций.'");
		НаборКонстант.ИспользоватьСтатьиДвиженияДенежныхСредств = Истина;
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОборотнуюНоменклатуруПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделятьПоСтавкамНДСПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиПартионныйУчетПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоСкладамПриИзменении(Элемент)
	
	СкладскойУчет = Число(ВестиУчетПоСкладам);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладскойУчетПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СкладскойУчет) Тогда
		СкладскойУчет = 1;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоРаботникамПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетЗарплатыИКадровВоВнешнейПрограммеПриИзменении(Элемент)
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме = 0 Тогда
		Элементы.СтраницыДополнительныеНастройкиУчетаЗарплаты.ТекущаяСтраница = Элементы.УчетВЭтойПрограмме;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтаФорма.Элементы, "СформироватьКадровыеДокументы", "Доступность", КадровыйУчет);		
	Иначе
		Элементы.СтраницыДополнительныеНастройкиУчетаЗарплаты.ТекущаяСтраница = Элементы.УчетВоВнешнейПрограмме;
		НаборКонстант.РасчетЗарплатыДляНебольшихОрганизаций = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КадровыйУчетУпрощенныйПриИзменении(Элемент)
	Если КадровыйУчетУпрощенный = 1 Тогда
		КадровыйУчетПолный = 0;
		КадровыйУчет = Ложь;
	КонецЕсли;	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтаФорма.Элементы, "СформироватьКадровыеДокументы", "Доступность", КадровыйУчет);
КонецПроцедуры

&НаКлиенте
Процедура КадровыйУчетПолныйПриИзменении(Элемент)
	Если КадровыйУчетПолный = 1 Тогда
		КадровыйУчетУпрощенный = 0;
		КадровыйУчет = Истина;
	КонецЕсли;	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтаФорма.Элементы, "СформироватьКадровыеДокументы", "Доступность", КадровыйУчет);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетНДСПоСпособамПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоЭлементамЗатратФлагПриИзменении(Элемент)
	УстановитьСтраницуПредупрежденияПоЭлементамЗатрат(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоСтатьямЗатратФлагПриИзменении(Элемент)
	УстановитьСтраницуПредупрежденияПоСтатьямЗатрат(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СрокОплатыВыставленныхСчетовПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если НЕ ТолькоПросмотр Тогда
		ПараметрыЗаписи = Новый Структура("Закрыть", Истина);
		Если НЕ Записать(ПараметрыЗаписи) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Окно.Основное Тогда
		ПерейтиПоНавигационнойСсылке("e1cib/navigationpoint/СправочникиИНастройкиУчета82");
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрыть(Команда)
	
	Если Окно.Основное Тогда
		ПерейтиПоНавигационнойСсылке("e1cib/navigationpoint/СправочникиИНастройкиУчета82");
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиДвиженияДенежныхСредств(Команда)

	Если Модифицированность И НЕ ТолькоПросмотр Тогда
		Если НЕ ЗаписатьНайстройкиПараметров("ИспользоватьСтатьиДвиженияДенежныхСредств") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.СтатьиДвиженияДенежныхСредств.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкиНалогаНаПрибыль(Команда)
	
	Если Модифицированность И НЕ ТолькоПросмотр Тогда
		Если НЕ ЗаписатьНайстройкиПараметров("ПрименяютсяРазныеСтавкиНалогаНаПрибыль") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.ФормаСписка");

КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаПатентыЕНВД(Команда)
	
	ОткрытьФорму("РегистрСведений.СчетаДоходовИРасходовЕНВД.ФормаСписка");

КонецПроцедуры

&НаКлиенте
Процедура СоздатьКадровыеДокументы(Команда)
	
	Если НЕ ТолькоПросмотр Тогда
		Если НЕ Записать() Тогда
			Возврат;
		Иначе
			СформироватьКадровыеПриказы();			
			ПоказатьОповещениеПользователя(НСтр("ru='Формирование кадровых документов завершено.'"), "e1cib/list/ЖурналДокументов.КадровыеДокументы", "Журнал ""Приемы, увольнения, переводы""");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ГруппыКонтрагентовФизическихЛиц(Команда)
	
	ОткрытьФорму("РегистрСведений.ГруппыКонтрагентовФизическихЛиц.Форма.Список");
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныеНомераБанков(Команда)
	
	ОткрытьФорму("РегистрСведений.РегистрационныеНомераБанков.ФормаСписка");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ЗаписатьНайстройкиПараметров(ИмяКонстанты)
	Перем Результат;
	
	ЗначениеКонстанты	= Константы[ИмяКонстанты].Получить();
	Если НЕ НаборКонстант[ИмяКонстанты] = ЗначениеКонстанты Тогда
		Результат	= Записать();
	Иначе
		// Запись не требуется, значение константы совпадает с значением набора
		Результат	= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Параметры.Свойство("ПараметрыОткрытия", ПараметрыОткрытия);
	
	Элементы.ГруппаНалогНаПрибыль.Видимость = ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО");
	Элементы.ГруппаНДС.Видимость            = ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО") ИЛИ ПолучитьФункциональнуюОпцию("ИспользуетсяНДФЛИП");
	Элементы.ГруппаПатентыЕНВД.Видимость    = ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВД") И ПолучитьФункциональнуюОпцию("ИспользуетсяУСНПатент");
	Элементы.ГруппаПатенты.Видимость        = НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВД") И ПолучитьФункциональнуюОпцию("ИспользуетсяУСНПатент");
	Элементы.ГруппаЕНВД.Видимость           = ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВД") И НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяУСНПатент");
	Элементы.ГруппаУчетЗатратПоПодразделениям.Видимость = Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруПараметровУчета(Форма)
	
	ПараметрыУчета = ОбщегоНазначенияБПКлиентСервер.СтруктураПараметровУчета();
	ЗаполнитьЗначенияСвойств(ПараметрыУчета, Форма);
	ПараметрыУчета.ВестиУчетПоСтатьямДДС = Форма.НаборКонстант.ИспользоватьСтатьиДвиженияДенежныхСредств;
	
	Возврат ПараметрыУчета;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстВопросаПродолжитьЗапись(Знач СтруктураПараметровУчета, Знач СнятьПризнакУчетаПоПодразделениям)
	
	ДействияИзмененияСубконто = ОбщегоНазначенияБПВызовСервера.ПолучитьДействияИзмененияСубконто(СтруктураПараметровУчета);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДействий", ДействияИзмененияСубконто);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Счет КАК Счет,
	|	ВЫРАЗИТЬ(Таблица.Субконто КАК ПланВидовХарактеристик.ВидыСубконтоХозрасчетные) КАК Субконто,
	|	-Таблица.Действие КАК Действие,
	|	-Таблица.Количественный КАК Количественный,
	|	-Таблица.Суммовой КАК Суммовой,
	|	Таблица.ТолькоОбороты КАК ТолькоОбороты,
	|	-Таблица.Валютный КАК Валютный
	|ПОМЕСТИТЬ СчетаСубконто
	|ИЗ
	|	&ТаблицаДействий КАК Таблица
	|ГДЕ
	|	(Таблица.Действие = -1
	|			ИЛИ Таблица.Количественный = -1
	|			ИЛИ Таблица.Суммовой = -1
	|			ИЛИ Таблица.ТолькоОбороты = 1
	|			ИЛИ Таблица.Валютный = -1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаСубконто.Субконто.Наименование КАК Субконто,
	|	МАКСИМУМ(СчетаСубконто.Действие) КАК Действие,
	|	МАКСИМУМ(СчетаСубконто.Количественный) КАК Количественный,
	|	МАКСИМУМ(СчетаСубконто.Суммовой) КАК Суммовой,
	|	МАКСИМУМ(СчетаСубконто.ТолькоОбороты) КАК ТолькоОбороты,
	|	МАКСИМУМ(СчетаСубконто.Валютный) КАК Валютный
	|ИЗ
	|	СчетаСубконто КАК СчетаСубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаСубконто.Субконто.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Субконто";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() и Не СнятьПризнакУчетаПоПодразделениям Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаДействий = РезультатЗапроса.Выгрузить();
	
	ВидыДействий = Новый Структура;
	ВидыДействий.Вставить("Действие", НСтр("ru = 'Будут удалены следующие субконто: %1'"));
	ВидыДействий.Вставить("Количественный", НСтр("ru = 'Будут очищены количественные обороты по следующим субконто: %1'"));
	ВидыДействий.Вставить("Суммовой", НСтр("ru = 'Будут очищены суммовые обороты по следующим субконто: %1'"));
	ВидыДействий.Вставить("ТолькоОбороты", НСтр("ru = 'Будут очищены остатки по следующим субконто: %1'"));
	ВидыДействий.Вставить("Валютный", НСтр("ru = 'Будут очищены валютные обороты по следующим субконто: %1'"));
	
	ТекстВопроса = "";
	Для каждого ВидДействия Из ВидыДействий Цикл
		ИзменениеПризнакаСубконто = ВидДействия.Ключ <> "Действие";
		
		СписокСубконто = "";
		СтрокиСубконто = ТаблицаДействий.НайтиСтроки(Новый Структура(ВидДействия.Ключ, 1));
		Для каждого СтрокаСубконто Из СтрокиСубконто Цикл
			Если ИзменениеПризнакаСубконто И СтрокаСубконто.Действие <> 0 Тогда
				// При добавлении / удалении субконто других сообщений выводить не нужно
				Продолжить;
			КонецЕсли;
			
			СписокСубконто = СписокСубконто + ", " + СтрокаСубконто.Субконто;
		КонецЦикла;
		
		Если ПустаяСтрока(СписокСубконто) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстВопроса) Тогда
			ТекстВопроса = ТекстВопроса + Символы.ПС;
		КонецЕсли;
		
		ТекстДействия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВидДействия.Значение,
			Сред(СписокСубконто, 3));
		ТекстВопроса = ТекстВопроса + ТекстДействия;
	КонецЦикла;
	
	Если СнятьПризнакУчетаПоПодразделениям Тогда
		Если НЕ ПустаяСтрока(ТекстВопроса) Тогда
			ТекстВопроса = ТекстВопроса + Символы.ПС;
		КонецЕсли;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Будет отключен учет по подразделениям на счетах затрат.
			|После его отключения следует проверить настройки учетной политики:
			|""Методы определения прямых расходов производства в НУ"" на закладке ""Налог на прибыль"" и 
			|""Методы распределения косвенных расходов"" на закладке ""Затраты""'");
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстВопроса) Тогда
		Возврат "";
	КонецЕсли;
	
	ШаблонТекста = НСтр("ru = '%1
		|Продолжить?'");
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ТекстВопроса);
	
	Возврат ТекстВопроса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИсходныеЗначения(Форма)

	Форма.ИспользоватьСтатьиДвиженияДенежныхСредствИсходнооеЗначение = Форма.НаборКонстант.ИспользоватьСтатьиДвиженияДенежныхСредств;
	Форма.РазделятьПоСтавкамНДСИсходноеЗначение = Форма.РазделятьПоСтавкамНДС;
	Форма.ИспользоватьОборотнуюНоменклатуруИсходноеЗначение = Форма.ИспользоватьОборотнуюНоменклатуру;
	Форма.ВестиПартионныйУчетИсходноеЗначение = Форма.ВестиПартионныйУчет;
	Форма.СкладскойУчетИсходноеЗначение = Форма.СкладскойУчет;
	Форма.ВестиУчетПоРаботникамИсходноеЗначение = Форма.ВестиУчетПоРаботникам;
	Форма.ВестиУчетНДСПоСпособамИсходноеЗначение = Форма.ВестиУчетНДСПоСпособам;
	
	Форма.УчитыватьРасходыПоСтатьямЗатратИсходноеЗначение   = Форма.УчитыватьРасходыПоСтатьямЗатрат;
	Форма.УчитыватьРасходыПоЭлементамЗатратИсходноеЗначение = Форма.УчитыватьРасходыПоЭлементамЗатрат;
	Форма.ВестиУчетЗатратПоПодразделениямИсходноеЗначение   = Форма.НаборКонстант.ВестиУчетЗатратПоПодразделениям;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДниПрописью(ЧислоДней, ЭтоРабочиеДни)
	
	Если ЭтоРабочиеДни Тогда
		ПараметрыПредметаИсчисления = НСтр("ru='рабочий день, рабочих дня, рабочих дней'");
	Иначе
		ПараметрыПредметаИсчисления = НСтр("ru='день, дня, дней'");
	КонецЕсли;
	
	ДниСЧисломПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
		ЧислоДней, ПараметрыПредметаИсчисления);
	
	Возврат СтрЗаменить(ДниСЧисломПрописью, Формат(ЧислоДней, "ЧН=0"), "");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы      = Форма.Элементы;
	НаборКонстант = Форма.НаборКонстант;
	
	Если НаборКонстант.СрокОплатыСчетовПокупателю <> 0 Тогда
		Элементы.СрокОплатыСчетовПокупателю.Заголовок = ДниПрописью(НаборКонстант.СрокОплатыСчетовПокупателю, Истина);
	Иначе
		Элементы.СрокОплатыСчетовПокупателю.Заголовок = "(" + НСтр("ru = 'не заполнять'") + ")";
	КонецЕсли;
	
	Элементы.НадписьДнейСрокОплатыПокупателей.Заголовок = ДниПрописью(НаборКонстант.СрокОплатыПокупателей, Ложь);
	Элементы.НадписьДнейСрокОплатыПоставщикам.Заголовок = ДниПрописью(НаборКонстант.СрокОплатыПоставщикам, Ложь);
	
	Форма.Элементы.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.Доступность = НЕ Форма.ТолькоПросмотр И 
		(Форма.ОцениватьДоходыИРасходыВНУПоКурсуАвансов = 1);
		
	Форма.Элементы.СтатьиДвиженияДенежныхСредств.Доступность = Форма.НаборКонстант.ИспользоватьСтатьиДвиженияДенежныхСредств;
	Форма.Элементы.ГруппаРозничнаяТорговля.Видимость = Форма.НаборКонстант.ВедетсяРозничнаяТорговля;
	Форма.Элементы.ТипЦенПлановойСебестоимостиНоменклатуры.Видимость = Форма.НаборКонстант.ВедетсяПроизводственнаяДеятельность;
	
	Если (Форма.НаборКонстант.ИспользоватьСтатьиДвиженияДенежныхСредств <> Форма.ИспользоватьСтатьиДвиженияДенежныхСредствИсходнооеЗначение) И Форма.ИспользоватьСтатьиДвиженияДенежныхСредствИсходнооеЗначение = Истина Тогда
		Форма.Элементы.ГруппаИспользоватьСтатьиДвиженияДенежныхСредствПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаИспользоватьСтатьиДвиженияДенежныхСредствПредупреждениеАктивно;
	Иначе
		Форма.Элементы.ГруппаИспользоватьСтатьиДвиженияДенежныхСредствПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаИспользоватьСтатьиДвиженияДенежныхСредствПредупреждениеОтсутствует;
	КонецЕсли;
	
	Если (Форма.ИспользоватьОборотнуюНоменклатуру <> Форма.ИспользоватьОборотнуюНоменклатуруИсходноеЗначение) И Форма.ИспользоватьОборотнуюНоменклатуруИсходноеЗначение = Истина Тогда
		Форма.Элементы.ГруппаИспользоватьОборотнуюНоменклатуруПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаИспользоватьОборотнуюНоменклатуруПредупреждениеАктивно;
	Иначе
		Форма.Элементы.ГруппаИспользоватьОборотнуюНоменклатуруПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаИспользоватьОборотнуюНоменклатуруПредупреждениеОтсутствует;
	КонецЕсли;
	
	Если (Форма.РазделятьПоСтавкамНДС <> Форма.РазделятьПоСтавкамНДСИсходноеЗначение) И Форма.РазделятьПоСтавкамНДСИсходноеЗначение = Истина Тогда
		Форма.Элементы.ГруппаРазделятьПоСтавкамНДСПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаРазделятьПоСтавкамНДСПредупреждениеАктивно;
	Иначе
		Форма.Элементы.ГруппаРазделятьПоСтавкамНДСПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаРазделятьПоСтавкамНДСПредупреждениеОтсутствует;
	КонецЕсли;
	
	Если (Форма.ВестиПартионныйУчет <> Форма.ВестиПартионныйУчетИсходноеЗначение) И Форма.ВестиПартионныйУчетИсходноеЗначение = Истина Тогда
		Форма.Элементы.ГруппаВестиПартионныйУчетПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаВестиПартионныйУчетПредупреждениеАктивно;
	Иначе
		Форма.Элементы.ГруппаВестиПартионныйУчетПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаВестиПартионныйУчетПредупреждениеОтсутствует;
	КонецЕсли;
	
	Форма.Элементы.СкладскойУчет.Доступность = Форма.ВестиУчетПоСкладам;
	
	Если Форма.СкладскойУчет < Форма.СкладскойУчетИсходноеЗначение Тогда
		Форма.Элементы.ГруппаСкладскойУчетПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаСкладскойУчетПредупреждениеАктивно;
	Иначе
		Форма.Элементы.ГруппаСкладскойУчетПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаСкладскойУчетПредупреждениеОтсутствует;
	КонецЕсли;
	
	Если (Форма.НаборКонстант.ВестиУчетЗатратПоПодразделениям <> Форма.ВестиУчетЗатратПоПодразделениямИсходноеЗначение) И Форма.ВестиУчетЗатратПоПодразделениямИсходноеЗначение = Истина Тогда
		Форма.Элементы.ГруппаУчетЗатратПоПодразделениямПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаУчетЗатратПоПодразделениямПредупреждениеАктивно;
	Иначе
		Форма.Элементы.ГруппаУчетЗатратПоПодразделениямПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаУчетЗатратПоПодразделениямПредупреждениеОтсутствует;
	КонецЕсли;
	
	Если (Форма.ВестиУчетПоРаботникам <> Форма.ВестиУчетПоРаботникамИсходноеЗначение) И Форма.ВестиУчетПоРаботникамИсходноеЗначение = 1 Тогда
		Форма.Элементы.ГруппаАналитическийУчетРасчетовСПерсоналомПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаАналитическийУчетРасчетовСПерсоналомПредупреждениеАктивно;
	Иначе
		Форма.Элементы.ГруппаАналитическийУчетРасчетовСПерсоналомПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаАналитическийУчетРасчетовСПерсоналомПредупреждениеОтсутствует;
	КонецЕсли;
	
	Если (Форма.ВестиУчетНДСПоСпособам <> Форма.ВестиУчетНДСПоСпособамИсходноеЗначение) И Форма.ВестиУчетНДСПоСпособамИсходноеЗначение = Истина Тогда
		Форма.Элементы.ГруппаПоСпособамУчетаПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаПоСпособамУчетаПредупреждениеАктивно;
	Иначе
		Форма.Элементы.ГруппаПоСпособамУчетаПредупреждение.ТекущаяСтраница = Форма.Элементы.ГруппаПоСпособамУчетаПредупреждениеОтсутствует;
	КонецЕсли;
	
	Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме = 0 Тогда
		Форма.Элементы.СтраницыДополнительныеНастройкиУчетаЗарплаты.ТекущаяСтраница = Форма.Элементы.УчетВЭтойПрограмме;		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СформироватьКадровыеДокументы", "Доступность", Форма.КадровыйУчет);		
	Иначе
		Форма.Элементы.СтраницыДополнительныеНастройкиУчетаЗарплаты.ТекущаяСтраница = Форма.Элементы.УчетВоВнешнейПрограмме;
	КонецЕсли;
	
	УстановитьСтраницуПредупрежденияПоЭлементамЗатрат(Форма);
	УстановитьСтраницуПредупрежденияПоСтатьямЗатрат(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьКадровыеПриказы()
	
	УчетЗарплаты.СформироватьКадровыеПриказы();
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаписьюЗавершение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("ПропуститьПроверку", Истина);
		Записать(ПараметрыЗаписи);
		Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
			Если Окно.Основное Тогда
				ПерейтиПоНавигационнойСсылке("e1cib/navigationpoint/СправочникиИНастройкиУчета82");
			Иначе
				Закрыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницуПредупреждения(Значение, ИсходноеЗначение, ГруппаСтраниц, СтраницаВключено, СтраницаОтключено)
	
	ПользовательИзменилЗначение = Значение <> ИсходноеЗначение;
	Предупредить                = ИсходноеЗначение И ПользовательИзменилЗначение;
	
	Если Предупредить Тогда
		ГруппаСтраниц.ТекущаяСтраница = СтраницаВключено;
	Иначе
		ГруппаСтраниц.ТекущаяСтраница = СтраницаОтключено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницуПредупрежденияПоЭлементамЗатрат(Форма)
	
	УстановитьСтраницуПредупреждения(
		Форма.УчитыватьРасходыПоЭлементамЗатрат,
		Форма.УчитыватьРасходыПоЭлементамЗатратИсходноеЗначение,
		Форма.Элементы.ПоЭлементамЗатратПредупреждение,
		Форма.Элементы.ПоЭлементамЗатратПредупреждениеВключено,
		Форма.Элементы.ПоЭлементамЗатратПредупреждениеОтключено);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницуПредупрежденияПоСтатьямЗатрат(Форма)
	
	УстановитьСтраницуПредупреждения(
		Форма.УчитыватьРасходыПоСтатьямЗатрат,
		Форма.УчитыватьРасходыПоСтатьямЗатратИсходноеЗначение, 
		Форма.Элементы.ПоСтатьямЗатратПредупреждение, 
		Форма.Элементы.ПоСтатьямЗатратПредупреждениеВключено, 
		Форма.Элементы.ПоСтатьямЗатратПредупреждениеОтключено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЗатратПоПодразделениямПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВедетсяУчетНФО()

	Возврат ПолучитьФункциональнуюОпцию("ВедетсяУчетНФО");

КонецФункции
