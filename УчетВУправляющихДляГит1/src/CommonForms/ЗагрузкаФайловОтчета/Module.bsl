#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("РасширенныеПараметры", РасширенныеПараметры);
	Если РасширенныеПараметры = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИсключаяСвойства = "СвойстваФайлов,ФайлыКомплекта,ДополнительныеФайлы";
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РасширенныеПараметры, , ИсключаяСвойства);
	
	Если НЕ КопироватьДанныеФормы(РасширенныеПараметры.СвойстваФайлов,      СвойстваФайлов)
	 ИЛИ НЕ КопироватьДанныеФормы(РасширенныеПараметры.ФайлыКомплекта,      ФайлыКомплекта)
	 ИЛИ НЕ КопироватьДанныеФормы(РасширенныеПараметры.ДополнительныеФайлы, ДополнительныеФайлы) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("УникальныйИдентификаторВладельца", УникальныйИдентификаторВладельца);
	
	ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыОтправляемыхДокументов");
	Элементы.ВидОтчета.ОграничениеТипа = ОписаниеТипа;
	ВидОтчета = ОписаниеТипа.ПривестиЗначение(ВидОтчета);
	
	Элементы.Организация.Видимость = Не РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	
	ИсточникОтчета = ВидОтчета.Источник;
	ТипДокумента = ВидОтчета.ТипДокумента;
	
	ОбновитьПредставленияФайловПриложений();
	
	ПрорисоватьФайлы();
	ПронумероватьСтрокиТаблицы(ФайлыКомплекта);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Обход ошибки платформы с выпадающим списком в веб-клиенте.
	#Если ВебКлиент Тогда
		ТекущийЭлемент = Элементы.ПредставлениеТекст;
	#КонецЕсли
	
	Наименование = ПолучитьНаименование(ВидОтчета, ДатаНачала, ДатаОкончания, Организация);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если СвойстваФайлов.Количество() > 0 Тогда
		
		Отказ = Истина;
	
		ТекстВопроса = НСтр("ru = 'Закрыть форму?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Закрыть", НСтр("ru = ' Закрыть без загрузки '"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = ' Не закрывать '"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "Закрыть" Тогда
		
		СвойстваФайлов.Очистить();
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	ВидОтчетаПриИзмененииНаСервере();
	Наименование = ПолучитьНаименование(ВидОтчета, ДатаНачала, ДатаОкончания, Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Наименование = ПолучитьНаименование(ВидОтчета, ДатаНачала, ДатаОкончания, Организация);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаНачалоВыбораЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода, Периодичность", 
		ДатаНачала, ДатаОкончания, Периодичность);
		
	ОткрытьФорму("Справочник.ЭлектронныеПредставленияРегламентированныхОтчетов.Форма.ВыборПериода",
		ПараметрыФормы, ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ДатаНачала = Результат.НачалоПериода;
		ДатаОкончания = Результат.КонецПериода;
		Периодичность = Результат.Периодичность;
		
		ПредставлениеПериода = ПолучитьПредставлениеПериода(ДатаНачала, ДатаОкончания);
		Наименование = ПолучитьНаименование(ВидОтчета, ДатаНачала, ДатаОкончания, Организация);
		
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	Если ВидДокумента = 1 Тогда
		НомерКорректировки = 1;
	Иначе
		НомерКорректировки = 0;
	КонецЕсли;
	
	Версия = ВидДокумента * НомерКорректировки;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерКорректировкиПриИзменении(Элемент)
	
	Версия = ВидДокумента * НомерКорректировки;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПояснительнойЗапискиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ФайлПояснительнойЗаписки) Тогда
		УдалитьПриложениеКБухгалтерскойОтчетностиИзТаблицыСвойствФайлов(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.ПояснительнаяЗаписка"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПояснительнойЗапискиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьФайлПриложенияОтчетности(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.ПояснительнаяЗаписка"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПояснительнойЗапискиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПриложениеКБухгалтерскойОтчетности(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.ПояснительнаяЗаписка"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлАудиторскогоЗаключенияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ФайлАудиторскогоЗаключения) Тогда
		УдалитьПриложениеКБухгалтерскойОтчетностиИзТаблицыСвойствФайлов(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.АудиторскоеЗаключение"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлАудиторскогоЗаключенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьФайлПриложенияОтчетности(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.АудиторскоеЗаключение"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлАудиторскогоЗаключенияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПриложениеКБухгалтерскойОтчетности(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.АудиторскоеЗаключение"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗаявленияРевизионногоСоюзаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ФайлЗаявленияРевизионногоСоюза) Тогда
		УдалитьПриложениеКБухгалтерскойОтчетностиИзТаблицыСвойствФайлов(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗаявленияРевизионногоСоюзаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьФайлПриложенияОтчетности(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗаявленияРевизионногоСоюзаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПриложениеКБухгалтерскойОтчетности(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыКомплектаПФР

&НаКлиенте
Процедура ФайлыКомплектаПФРПриИзменении(Элемент)
	
	ПронумероватьСтрокиТаблицы(ФайлыКомплекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаПФРВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ФайлыКомплектаСсылкаПоказать" Тогда
		ОткрытьФайл(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаПФРПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ФайлыКомплектаПередНачаломДобавления(Отказ, Копирование, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаПФРПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СохранитьКомплектВСвойствахФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаПФРПослеУдаления(Элемент)
	
	СохранитьКомплектВСвойствахФайлов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормыДополнительныеФайлыПФР

&НаКлиенте
Процедура ДополнительныеФайлыПФРДобавить(Команда)
	
	Отказ = Ложь;
	ФайлыКомплектаПередНачаломДобавления(Отказ, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйФайлПФРУдалить(Команда)
	
	НомерФайла = 0;
	ПрефиксИмениКоманды = "ДополнительныйФайлПФРУдалить";
	ДлинаПрефиксаИмениКоманды = СтрДлина(ПрефиксИмениКоманды);
	Если Лев(Команда.Имя, ДлинаПрефиксаИмениКоманды) = ПрефиксИмениКоманды Тогда
		СтрокаНомераФайла = Сред(Команда.Имя, ДлинаПрефиксаИмениКоманды + 1);
		НомерФайла = Число(СтрокаНомераФайла);
	КонецЕсли;
	
	Если НомерФайла > 0 Тогда
		ДополнительныеФайлыПФРУдалитьНаСервере(НомерФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйФайлНажатие(Элемент)
	
	НомерФайла = 0;
	ПрефиксИмениДекорации = "ДополнительныйФайлПФР";
	ДлинаПрефиксаИмениДекорации = СтрДлина(ПрефиксИмениДекорации);
	Если Лев(Элемент.Имя, ДлинаПрефиксаИмениДекорации) = ПрефиксИмениДекорации Тогда
		СтрокаНомераФайла = Сред(Элемент.Имя, ДлинаПрефиксаИмениДекорации + 1);
		НомерФайла = Число(СтрокаНомераФайла);
	КонецЕсли;
	
	Если НомерФайла > 0 Тогда
		ДополнительныйФайл = ДополнительныеФайлы[НомерФайла - 1];
		ПолучитьФайл(ДополнительныйФайл.АдресДанных, ДополнительныйФайл.Имя, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыКомплектаУведомлений

&НаКлиенте
Процедура ФайлыКомплектаУведомленийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ФайлыКомплектаУведомленийСсылкаПоказать" Тогда
		ОткрытьФайл(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаУведомленийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ФайлыКомплектаПередНачаломДобавления(Отказ, Копирование, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаУведомленийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СохранитьКомплектВСвойствахФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаУведомленийПослеУдаления(Элемент)
	
	СохранитьКомплектВСвойствахФайлов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПередатьФайлыДляЗагрузкиИЗакрытьФорму(Команда)
	
	СвойстваВидаОтчета = Неопределено;
	
	Если НЕ ВозможноПередатьФайлыДляЗагрузки(СвойстваВидаОтчета) Тогда
		Возврат;
	КонецЕсли;
	
	Версия = ВидДокумента * НомерКорректировки;
	
	ЗаполнитьЗначенияСвойств(РасширенныеПараметры, ЭтотОбъект, , "СвойстваФайлов,ФайлыКомплекта,ДополнительныеФайлы");
	
	КопироватьДанныеФормыКоллекцияНаКлиенте(СвойстваФайлов,      РасширенныеПараметры.СвойстваФайлов);
	КопироватьДанныеФормыКоллекцияНаКлиенте(ФайлыКомплекта,      РасширенныеПараметры.ФайлыКомплекта);
	КопироватьДанныеФормыКоллекцияНаКлиенте(ДополнительныеФайлы, РасширенныеПараметры.ДополнительныеФайлы);
	
	РасширенныеПараметры.Вставить("ИмяТипаПолучателя", ИмяТекущегоТипаПолучателя(ТипПолучателя));
	РасширенныеПараметры.Вставить("СвойстваВидаОтчета", СвойстваВидаОтчета);
	РасширенныеПараметры.Вставить("СвойстваОсновногоФайла", СвойстваОсновногоФайла);
	
	СвойстваФайлов.Очистить();
	
	Закрыть(РасширенныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВидОтчетаПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(ВидОтчета) Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникОтчета = ВидОтчета.Источник;
	ТипДокумента = ВидОтчета.ТипДокумента;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложениеКБухгалтерскойОтчетности(ТипФайлаБухгалтерскойОтчетности)
	
	// Получаем нужное приложение.
	АдресДанных = "";
	ИмяФайлаПриложения = "";
	Для каждого Стр Из СвойстваФайлов Цикл
		Если Стр.ТипФайлаОтчетности = ТипФайлаБухгалтерскойОтчетности Тогда
			АдресДанных = Стр.АдресДанных;
			ИмяФайлаПриложения = Стр.ИмяФайла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОперацииСФайламиЭДКОКлиент.ОткрытьФайл(АдресДанных, ИмяФайлаПриложения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПриложениеКБухгалтерскойОтчетностиИзТаблицыСвойствФайлов(ТипФайлаОтчетности)
	
	Для каждого Стр Из СвойстваФайлов Цикл
		Если Стр.ТипФайлаОтчетности = ТипФайлаОтчетности Тогда
			СвойстваФайлов.Удалить(Стр);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлПриложенияОтчетности(ТипФайлаОтчетности)
	
	АдресДанных = "";
	
	ДополнительныеПараметры = Новый Структура("ТипФайлаОтчетности", ТипФайлаОтчетности);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьФайлПриложенияОтчетностиЗавершениеПослеПомещенияФайла", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайла(ОписаниеОповещения, АдресДанных,, Истина, ВладелецФормы.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлПриложенияОтчетностиЗавершениеПослеПомещенияФайла(
		ФайлыБылиВыбраны,
		АдресДанных,
		ВыбранноеИмяФайла,
		ДополнительныеПараметры) Экспорт
	
	Если ФайлыБылиВыбраны Тогда
		
		Файл = РегламентированнаяОтчетностьЗагрузкаКлиент.СвойстваФайла(АдресДанных, ВыбранноеИмяФайла);
		
		СвойстваФайла = Новый Структура();
		СвойстваФайла.Вставить("Имя",         Файл.Имя);
		СвойстваФайла.Вставить("ПолноеИмя",   Файл.ПолноеИмя);
		СвойстваФайла.Вставить("Расширение",  Файл.Расширение);
		СвойстваФайла.Вставить("АдресДанных", Файл.АдресДанных);
		
		ОпределитьФайлВТаблицеСвойствФайлов(
			СвойстваФайла.Имя,
			ДополнительныеПараметры.ТипФайлаОтчетности,
			СвойстваФайла.АдресДанных);
		
		УправлениеФормой(ЭтаФорма);
		
		ОбновитьПредставленияФайловПриложений();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияФайловПриложений()
	
	ФайлПояснительнойЗаписки        = ИмяФайлаПриложения(Перечисления.ТипыФайловБухОтчетности.ПояснительнаяЗаписка);
	ФайлАудиторскогоЗаключения      = ИмяФайлаПриложения(Перечисления.ТипыФайловБухОтчетности.АудиторскоеЗаключение);
	ФайлЗаявленияРевизионногоСоюза  = ИмяФайлаПриложения(Перечисления.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТекущегоТипаПолучателя(ТипПолучателя)
	
	Если ЗначениеЗаполнено(ТипПолучателя) Тогда
		Если ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") Тогда
			Возврат "ФНС";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР") Тогда
			Возврат "ПФР";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
			Возврат "ФСС";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС") Тогда
			Возврат "ФСГС";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР") Тогда
			Возврат "ФСРАР";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН") Тогда
			Возврат "РПН";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФТС") Тогда
			Возврат "ФТС";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.БанкРоссии") Тогда
			Возврат "БанкРоссии";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.Минобороны") Тогда
			Возврат "Минобороны";
		КонецЕсли;
	Иначе
		Возврат "ФНС";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция КороткоеИмяФайлаПоПолному(ПолноеИмяФайла)
	
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	Возврат ОбъектФайл.Имя;
	
КонецФункции

&НаСервере
Процедура ОпределитьФайлВТаблицеСвойствФайлов(КороткоеИмяФайла, ТипФайлаОтчетности, АдресДанных, ЗамещатьПоТипу = Истина)
	
	Если ЗамещатьПоТипу Тогда
		РезультатПоиска = СвойстваФайлов.НайтиСтроки(Новый Структура("ТипФайлаОтчетности", ТипФайлаОтчетности));
		Для Каждого Стр Из РезультатПоиска Цикл
			СвойстваФайлов.Удалить(Стр);
		КонецЦикла;
	КонецЕсли;
	
	ОпределитьНовыйФайлВТаблицеСвойствФайлов(КороткоеИмяФайла, ТипФайлаОтчетности, АдресДанных);
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеВидаДокумента(Вид) Экспорт
	
	Если Вид = 0 Тогда
		Возврат "П";
	ИначеЕсли Вид = Неопределено Тогда
		Возврат "-";
	Иначе
		Возврат "К/" + Вид;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОпределитьНовыйФайлВТаблицеСвойствФайлов(ИмяФайла, ТипФайла, АдресДанных)
	
	НовСтр = СвойстваФайлов.Добавить();
	НовСтр.ИмяФайла = ИмяФайла;
	НовСтр.ТипФайлаОтчетности = ТипФайла;
	НовСтр.АдресДанных = АдресДанных;
	
КонецПроцедуры

&НаСервере
Функция ИмяФайлаПриложения(ТипПриложения)
	
	Если СвойстваФайлов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	// Пробуем найти основной файл бух. отчетности.
	Для каждого Стр Из СвойстваФайлов Цикл
		Если Стр.ТипФайлаОтчетности = ТипПриложения Тогда
			Возврат Стр.ИмяФайла;
		КонецЕсли;
	КонецЦикла;

	Возврат "";

КонецФункции

&НаСервере
Функция РасширениеФайла(стрИмяФайла)
	
	СтрДлинаИмяФайла = СтрДлина(стрИмяФайла);
	Для Инд = 1 По СтрДлинаИмяФайла Цикл
		ТекущийИндекс = СтрДлинаИмяФайла - Инд + 1;
		Если Сред(стрИмяФайла, ТекущийИндекс, 1) = "." Тогда
			Возврат Сред(стрИмяФайла, ТекущийИндекс + 1);
		КонецЕсли;
	КонецЦикла;
	Возврат "";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МаксимальноДопустимыйРазмерОтображаемогоТекста()
	
	Возврат 1024 * 1024 * 30; // 30 МБ
	
КонецФункции

&НаСервере
Процедура ПрорисоватьФайлы()
	
	// Определяем, какой файл следует прорисовать.
	Если СвойстваФайлов.Количество() = 0 Тогда
		ПредставлениеТекст = "<не удалось загрузить электронное представление из файла>";
		ФайлыКомплекта.Очистить();
	Иначе
		
		//////////////////////////////////////////////////////////////////////////////
		// Прорисовка одиночного электронного представления.
		
		ОсновнойФайл = ?(СвойстваФайлов.Количество() = 1, СвойстваФайлов[0], ПолучитьОсновнойФайл());
		
		Если НЕ (ЭтоФайлВыгрузкиУведомленияОКонтролируемыхСделках(ОсновнойФайл.ИмяФайла) И СвойстваФайлов.Количество() > 1) Тогда
			Если ОсновнойФайл <> Неопределено Тогда
				СвойстваОсновногоФайла = ДанныеОсновногоФайла(ОсновнойФайл, Истина, ПредставлениеТекст);
				
				ЭтоВыгрузкаВXML = (НРег(РасширениеФайла(ОсновнойФайл.ИмяФайла)) = "xml");
				Если ЭтоВыгрузкаВXML Тогда
					Элементы.ПредставлениеТекст.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
				Иначе
					Элементы.ПредставлениеТекст.Вид = ВидПоляФормы.ПолеВвода;
				КонецЕсли;
			Иначе
				Элементы.ПредставлениеТекст.Вид = ВидПоляФормы.ПолеВвода;
				ПредставлениеТекст = "<не удалось загрузить электронное представление из файла>";
			КонецЕсли;
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// Прорисовка комплекта.
		
		ФайлыКомплекта.Очистить();
		Для Каждого Стр Из СвойстваФайлов Цикл
			Если Стр.ТипФайлаОтчетности <> Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СведенияПриложениеПФР Тогда
				НовСтр = ФайлыКомплекта.Добавить();
				НовСтр.Имя = Стр.ИмяФайла;
				НовСтр.Тип = Стр.ТипФайлаОтчетности;
				НовСтр.АдресДанных = Стр.АдресДанных;
				НовСтр.СсылкаПоказать = НСтр("ru = 'Открыть'");
			Иначе
				НовСтр = ДополнительныеФайлы.Добавить();
				НовСтр.Имя = Стр.ИмяФайла;
				НовСтр.АдресДанных = Стр.АдресДанных;
				ДополнительныеФайлыПФРДобавитьНаСервере(ДополнительныеФайлы.Количество(), Стр.ИмяФайла);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОсновнойФайл()
	
	// Пробуем найти основной файл бухгалтерской отчетности.
	Для каждого Стр Из СвойстваФайлов Цикл
		Если Стр.ТипФайлаОтчетности = Перечисления.ТипыФайловБухОтчетности.ОсновнойФайлОтчетности Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
	// Находим первый файл с расширением xml или txt.
	ОсновнойФайл = Неопределено;
	Для Каждого Стр Из СвойстваФайлов Цикл
		НРегРасширениеФайла = НРег(РасширениеФайла(Стр.ИмяФайла));
		Если НРегРасширениеФайла = "txt" ИЛИ НРегРасширениеФайла = "xml" Тогда
			ОсновнойФайл = Стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОсновнойФайл;
	
КонецФункции

&НаСервере
Функция ДанныеОсновногоФайла(ОсновнойФайл, ВернутьТекст = Ложь, Текст = "")
	
	Если ОсновнойФайл = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстИзФайла = "";
	
	ЭтоВыгрузкаВXML = (НРег(РасширениеФайла(ОсновнойФайл.ИмяФайла)) = "xml");
	
	ФайлОсновногоПредставления = ПолучитьИмяВременногоФайла("xml");
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(ОсновнойФайл.АдресДанных);
	ДанныеФайла.Записать(ФайлОсновногоПредставления);
	
	Если ЭтоВыгрузкаВXML Тогда
		Если ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФТС") Тогда
			ТекстИзФайла = РегламентированнаяОтчетностьЗагрузка.ПрочитатьТекстИзФайла(ФайлОсновногоПредставления, "UTF-8");
		Иначе
			ТекстИзФайла = РегламентированнаяОтчетностьЗагрузка.ПрочитатьТекстИзФайла(ФайлОсновногоПредставления, , Истина);
		КонецЕсли;
	Иначе
		Если ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ОтчетФСГС Тогда
			КодировкаФайла = "UTF-8";
		Иначе
			КодировкаФайла = "cp866";
		КонецЕсли;
		ОбъектЧтениеТекста =  Новый ЧтениеТекста(ФайлОсновногоПредставления, КодировкаФайла);
		ТекстИзФайла = ОбъектЧтениеТекста.Прочитать();
		ОбъектЧтениеТекста.Закрыть();
	КонецЕсли;
	
	УдалитьФайлы(ФайлОсновногоПредставления);
	
	Если ВернутьТекст Тогда
		Текст = ТекстИзФайла;
	КонецЕсли;
	
	РазмерТекста = СтрДлина(ТекстИзФайла);
	АдресТекста = ПоместитьВоВременноеХранилище(
		Новый ХранилищеЗначения(ТекстИзФайла, Новый СжатиеДанных(3)), ?(ЗначениеЗаполнено(УникальныйИдентификаторВладельца),
			УникальныйИдентификаторВладельца, Новый УникальныйИдентификатор()));
	
	Возврат Новый Структура("ИмяФайла, ТипФайлаОтчетности, АдресДанных, АдресТекста, РазмерТекста",
		ОсновнойФайл.ИмяФайла, ОсновнойФайл.ТипФайлаОтчетности, ОсновнойФайл.АдресДанных,
		АдресТекста, РазмерТекста); 
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФайл(Элемент)
	
	ИмяФайла = Элемент.ТекущиеДанные.Имя;
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Элемент.ТекущиеДанные.АдресДанных);
	
	ДополнительныеПараметры = Новый Структура("ДвоичныеДанныеФайла, ИмяФайла", ДвоичныеДанныеФайла, ИмяФайла);
	
	#Если НЕ ВебКлиент Тогда
		РазмерФайла = ДвоичныеДанныеФайла.Размер();
		
		Если РазмерФайла > МаксимальноДопустимыйРазмерОтображаемогоТекста() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлПослеОтветаНаВопросОБольшомРазмереФайла", ЭтотОбъект, ДополнительныеПараметры);
			
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Размер файла превышает максимально допустимый (%1 Мб). 
						   |Открытие данного файла может занять длительное время или 
						   |привести к ошибкам нехватки оперативной памяти в случае, 
						   |если у вас слабый компьютер. Продолжить?'"),
				МаксимальноДопустимыйРазмерОтображаемогоТекста());
				
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Внимание!");
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	ОткрытьФайлПослеОтветаНаВопросОБольшомРазмереФайла(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПослеОтветаНаВопросОБольшомРазмереФайла(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ДвоичныеДанныеФайла = ДополнительныеПараметры.ДвоичныеДанныеФайла;
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтруктураПараметров = Новый Структура("ИмяФайла, Содержимое", ИмяФайла, ДвоичныеДанныеФайла);
		ОткрытьФорму("Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.ПросмотрТекст", СтруктураПараметров,, СтруктураПараметров.ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлыКомплектаНаСервере(МассивФайлов, ЭтоДополнительныеФайлы = Ложь)
	
	КаталогФайловДанных = ПолучитьИмяВременногоФайла("");
	КаталогФайловДанных = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогФайловДанных);
	СоздатьКаталог(КаталогФайловДанных);
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		ПолноеИмяФайла = КаталогФайловДанных + ВыбранныйФайл.Имя;
		ПолучитьИзВременногоХранилища(ВыбранныйФайл.АдресДанных).Записать(ПолноеИмяФайла);
		
		Если НЕ ЭтоДополнительныеФайлы Тогда
			Если ВидОтчета = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.НДС")
				ИЛИ ДокументооборотСКОКлиентСервер.ЭтоВидОтправляемогоДокументаРеестраНДС(ВидОтчета) Тогда
				
				Если ОпределитьТипФайлаНДС(ВыбранныйФайл.Имя) = Неопределено
					И НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоФайлВыгрузкиРеестраНДС(ВыбранныйФайл.Имя) Тогда
					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Файл ""%1"" не может быть загружен в составе реестра НДС.'"),
						ВыбранныйФайл.Имя);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли ДокументооборотСКОКлиентСервер.ЭтоВидОтправляемогоДокументаРеестраАкцизов(ВидОтчета) Тогда
				Если НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоФайлВыгрузкиРеестраАкцизов(ВыбранныйФайл.Имя) Тогда
					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Файл ""%1"" не может быть загружен в составе реестра по акцизам.'"),
						ВыбранныйФайл.Имя);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НовСтр = ФайлыКомплекта.Добавить();
			НовСтр.Имя = ВыбранныйФайл.Имя;
			НовСтр.Тип = ОпределитьТипФайлаПФРилиБО(ПолноеИмяФайла);
			НовСтр.СсылкаПоказать = НСтр("ru = 'Открыть'");
			НовСтр.АдресДанных = ВыбранныйФайл.АдресДанных;
		Иначе
			НовСтр = ДополнительныеФайлы.Добавить();
			НовСтр.Имя = ВыбранныйФайл.Имя;
			НовСтр.АдресДанных = ВыбранныйФайл.АдресДанных;
			ДополнительныеФайлыПФРДобавитьНаСервере(ДополнительныеФайлы.Количество(), ВыбранныйФайл.Имя);
		КонецЕсли;
	КонецЦикла;
	
	УдалитьФайлы(КаталогФайловДанных);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКомплектВСвойствахФайлов()
	
	СвойстваФайлов.Очистить();
	Для Каждого СтрокаТаблицы Из ФайлыКомплекта Цикл
		ОпределитьНовыйФайлВТаблицеСвойствФайлов(СтрокаТаблицы.Имя, СтрокаТаблицы.Тип, СтрокаТаблицы.АдресДанных);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из ДополнительныеФайлы Цикл
		ОпределитьНовыйФайлВТаблицеСвойствФайлов(СтрокаТаблицы.Имя, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СведенияПриложениеПФР, СтрокаТаблицы.АдресДанных);
	КонецЦикла;
	ПронумероватьСтрокиТаблицы(ФайлыКомплекта);
	
	ОсновнойФайл = ?(СвойстваФайлов.Количество() = 1, СвойстваФайлов[0], ПолучитьОсновнойФайл());
	СвойстваОсновногоФайла = ДанныеОсновногоФайла(ОсновнойФайл, Истина, ПредставлениеТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаПередНачаломДобавления(Отказ, Копирование, ЭтоДополнительныеФайлы)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Копирование запрещено!'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЭтоДополнительныеФайлы", ЭтоДополнительныеФайлы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ФайлыКомплектаПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЭтоДополнительныеФайлы", ЭтоДополнительныеФайлы);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ОписаниеОповещения);
	
	УникальныйИдентификаторХранения = ?(ЗначениеЗаполнено(УникальныйИдентификаторВладельца),
		УникальныйИдентификаторВладельца, Новый УникальныйИдентификатор());
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ПолучениеФайловДляЗагрузкиНачало(УникальныйИдентификаторХранения, , ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДобавитьФайлыКомплектаНаСервере(Результат.ФайлыДляЗагрузки, ДополнительныеПараметры.ЭтоДополнительныеФайлы);
	СохранитьКомплектВСвойствахФайлов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ЗагружаетсяНесколькоФайлов = 
		Форма.СвойстваФайлов.Количество() > 1 
		ИЛИ Форма.ВидОтчета = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.НДС")
		ИЛИ ДокументооборотСКОКлиентСервер.ЭтоВидОтправляемогоДокументаРеестраНДС(Форма.ВидОтчета)
		ИЛИ ДокументооборотСКОКлиентСервер.ЭтоВидОтправляемогоДокументаРеестраАкцизов(Форма.ВидОтчета);
	
	Если Форма.ВидОтчета = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.НДС")
		ИЛИ ДокументооборотСКОКлиентСервер.ЭтоВидОтправляемогоДокументаРеестраНДС(Форма.ВидОтчета) Тогда
		
		ИндексФайла = Форма.СвойстваФайлов.Количество() - 1;
		Пока ИндексФайла >= 0 Цикл
			СвойстваФайла = Форма.СвойстваФайлов[ИндексФайла];
			Если ОпределитьТипФайлаНДС(СвойстваФайла.ИмяФайла) = Неопределено
				И НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоФайлВыгрузкиРеестраНДС(СвойстваФайла.ИмяФайла) Тогда
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Файл ""%1"" не может быть загружен в составе реестра НДС.'"),
					СвойстваФайла.ИмяФайла);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				Форма.СвойстваФайлов.Удалить(ИндексФайла);
			КонецЕсли;
			
			ИндексФайла = ИндексФайла - 1;
		КонецЦикла;
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.ЭтоВидОтправляемогоДокументаРеестраАкцизов(Форма.ВидОтчета) Тогда
		ИндексФайла = Форма.СвойстваФайлов.Количество() - 1;
		Пока ИндексФайла >= 0 Цикл
			СвойстваФайла = Форма.СвойстваФайлов[ИндексФайла];
			Если НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоФайлВыгрузкиРеестраАкцизов(СвойстваФайла.ИмяФайла) Тогда
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Файл ""%1"" не может быть загружен в составе реестра по акцизам.'"),
					СвойстваФайла.ИмяФайла);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				Форма.СвойстваФайлов.Удалить(ИндексФайла);
			КонецЕсли;
			
			ИндексФайла = ИндексФайла - 1;
		КонецЦикла;
		
	ИначеЕсли Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ПрочаяОтчетностьФНС") Тогда
		ИндексФайла = Форма.СвойстваФайлов.Количество() - 1;
		Пока ИндексФайла >= 1 Цикл
			СвойстваФайла = Форма.СвойстваФайлов[ИндексФайла];
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Файл ""%1"" не может быть загружен в составе комплекта.'"),
				СвойстваФайла.ИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗагружаетсяНесколькоФайлов = Ложь;
			Форма.СвойстваФайлов.Удалить(ИндексФайла);
			ИндексФайла = ИндексФайла - 1;
		КонецЦикла;
		
	ИначеЕсли Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ОтчетФСГС") Тогда
		ИндексФайла = Форма.СвойстваФайлов.Количество() - 1;
		Пока ИндексФайла >= 1 Цикл
			СвойстваФайла = Форма.СвойстваФайлов[ИндексФайла];
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Файл ""%1"" не будет загружен. Загрузится только первый выбранный.'"),
				СвойстваФайла.ИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗагружаетсяНесколькоФайлов = Ложь;
			Форма.СвойстваФайлов.Удалить(ИндексФайла);
			ИндексФайла = ИндексФайла - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ЗаявлениеОВвозеТоваров")
		ИЛИ (Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ПрочаяОтчетностьПФР")
		   И Форма.ВидОтчета <> ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК")
		   И Форма.ВидОтчета <> ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СведенияОВзносахИСтраховомСтажеСПВ1")
		   И Форма.ВидОтчета <> ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СведенияОНачисленномЗаработкеСЗВ63")
		   И Форма.ВидОтчета <> ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ПачкаДокументовСЗВ61")
		   И Форма.ВидОтчета <> ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрСЗВ62")
		   И Форма.ВидОтчета <> ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СведенияСЗВ64"))
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.КомплектОтчетностиПФР")
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ОтчетФСГС")
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.РеестрСведенийФСС")
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.Отчет4аФСС")
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ИсходящееУведомлениеФНС")
		ИЛИ Форма.ВидОтчета = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеСколковоОсвобождениеОтОбязанностейНалогоплательщика") Тогда
		Элементы.ГруппаКорректировка.Видимость = Ложь;
	Иначе
		Элементы.ГруппаКорректировка.Видимость = Истина;
	КонецЕсли;
	
	Если Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.БухгалтерскаяОтчетность") Тогда 
		Элементы.ФайлПояснительнойЗаписки.Видимость = Истина;
		Элементы.ФайлАудиторскогоЗаключения.Видимость = Истина;
		Элементы.ФайлЗаявленияРевизионногоСоюза.Видимость = Истина;
	Иначе
		Элементы.ФайлПояснительнойЗаписки.Видимость = Ложь;
		Элементы.ФайлАудиторскогоЗаключения.Видимость = Ложь;
		Элементы.ФайлЗаявленияРевизионногоСоюза.Видимость = Ложь;
	КонецЕсли;
	
	Если Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.КомплектОтчетностиПФР") Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКомплектПФР;
		
	ИначеЕсли ЗагружаетсяНесколькоФайлов
		И (Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.УведомлениеОКонтролируемыхСделках")
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ПрочаяОтчетностьФНС")
		ИЛИ ДокументооборотСКОКлиентСервер.ЭтоВидОтправляемогоДокументаРеестраНДС(Форма.ВидОтчета)
		ИЛИ ДокументооборотСКОКлиентСервер.ЭтоВидОтправляемогоДокументаРеестраАкцизов(Форма.ВидОтчета)) Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКомлектаУведомлений;
		
	Иначе
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПрочаяОтчетность;
		
	КонецЕсли;
	
	Если Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.РеестрСведенийФСС")
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ИсходящееУведомлениеФНС")
		ИЛИ Форма.ВидОтчета = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеСколковоОсвобождениеОтОбязанностейНалогоплательщика") Тогда
		Элементы.ПредставлениеПериода.Видимость = Ложь;
	Иначе
		Элементы.ПредставлениеПериода.Видимость = Истина;
	КонецЕсли;
	
	Если Форма.Версия = 0 Тогда
		Форма.ВидДокумента = 0;
		Форма.НомерКорректировки = 0;
	Иначе
		Форма.ВидДокумента = 1;
		Форма.НомерКорректировки = Форма.Версия;
	КонецЕсли;
		
	Элементы.НомерКорректировки.Доступность = Форма.ВидДокумента = 1;
	
	Форма.Заголовок = Форма.Наименование;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНаименование(ВидОтчета, НачалоПериода, КонецПериода, Организация) Экспорт
	
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.РеестрСведенийФСС")
		ИЛИ ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ИсходящееУведомлениеФНС")
		ИЛИ ВидОтчета = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеСколковоОсвобождениеОтОбязанностейНалогоплательщика") Тогда
		ШаблонНаименования = НСтр("ru = '%1 %2'");
	Иначе
		ШаблонНаименования = НСтр("ru = '%1 %3 %2'");
	КонецЕсли;
	
	ПредставлениеПериодаОтчета = ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода);
	ПредставлениеПериодаОтчета = ?(ПустаяСтрока(ПредставлениеПериодаОтчета), "", "за " + ПредставлениеПериодаОтчета);
	ПредставлениеОрганизации   = ?(ПустаяСтрока(Организация), "", "(" + Организация + ")");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонНаименования, ВидОтчета, ПредставлениеОрганизации, ПредставлениеПериодаОтчета);
		
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода) Экспорт
	
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.РеестрСведенийФСС")
		ИЛИ ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ИсходящееУведомлениеФНС")
		ИЛИ ВидОтчета = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеСколковоОсвобождениеОтОбязанностейНалогоплательщика") Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		Возврат ПредставлениеПериода(НачалоПериода, КонецДня(КонецПериода), "ФП=Истина");
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПронумероватьСтрокиТаблицы(ФайлыКомплекта)

	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из ФайлыКомплекта Цикл
		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеФайлыПФРДобавитьНаСервере(Номер, ИмяФайла)
	
	СтрокаНомера = Формат(Номер, "ЧН=0; ЧГ=");
	
	ГруппаДополнительныйФайлПФР = Элементы.Добавить("ГруппаДополнительныйФайлПФР" + СтрокаНомера, Тип("ГруппаФормы"), Элементы.СтраницаКомплектПФР);
	ГруппаДополнительныйФайлПФР.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДополнительныйФайлПФР.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаДополнительныйФайлПФР.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДополнительныйФайлПФР.ОтображатьЗаголовок = Ложь;
	
	ДополнительныйФайлПФР = Элементы.Добавить("ДополнительныйФайлПФР" + СтрокаНомера, Тип("ДекорацияФормы"), ГруппаДополнительныйФайлПФР);
	ДополнительныйФайлПФР.Заголовок = ИмяФайла;
	ДополнительныйФайлПФР.Гиперссылка = Истина;
	ДополнительныйФайлПФР.УстановитьДействие("Нажатие", "ДополнительныйФайлНажатие");
	
	КомандаДополнительныйФайлПФРУдалить = Команды.Добавить("ДополнительныйФайлПФРУдалить" + СтрокаНомера);
	КомандаДополнительныйФайлПФРУдалить.Действие = "ДополнительныйФайлПФРУдалить";
	
	ДополнительныйФайлПФРУдалить = Элементы.Добавить("ДополнительныйФайлПФРУдалить" + СтрокаНомера, Тип("КнопкаФормы"), ГруппаДополнительныйФайлПФР);
	ДополнительныйФайлПФРУдалить.Заголовок = НСтр("ru = 'Удалить'");
	ДополнительныйФайлПФРУдалить.Картинка = БиблиотекаКартинок.Удалить;
	ДополнительныйФайлПФРУдалить.Отображение = ОтображениеКнопки.Картинка;
	ДополнительныйФайлПФРУдалить.ИмяКоманды = "ДополнительныйФайлПФРУдалить" + СтрокаНомера;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеФайлыПФРУдалитьНаСервере(Номер)
	
	КоличествоФайлов = ДополнительныеФайлы.Количество();
	Для НомерФайла = Номер + 1 По КоличествоФайлов Цикл
		СтрокаНомера = Формат(НомерФайла, "ЧН=0; ЧГ=");
		СтрокаПредыдущийНомера = Формат(НомерФайла - 1, "ЧН=0; ЧГ=");
		
		Элементы.Найти("ДополнительныйФайлПФР" + СтрокаПредыдущийНомера).Заголовок = Элементы.Найти("ДополнительныйФайлПФР" + СтрокаНомера).Заголовок;
	КонецЦикла;
	
	СтрокаПоследнегоНомера = Формат(КоличествоФайлов, "ЧН=0; ЧГ=");
	ДополнительныйФайлПФР = Элементы.Найти("ДополнительныйФайлПФР" + СтрокаПоследнегоНомера);
	Элементы.Удалить(ДополнительныйФайлПФР);
	ДополнительныйФайлПФРУдалить = Элементы.Найти("ДополнительныйФайлПФРУдалить" + СтрокаПоследнегоНомера);
	Элементы.Удалить(ДополнительныйФайлПФРУдалить);
	КомандаДополнительныйФайлПФРУдалить = Команды.Найти("ДополнительныйФайлПФРУдалить" + СтрокаПоследнегоНомера);
	Команды.Удалить(КомандаДополнительныйФайлПФРУдалить);
	ГруппаДополнительныйФайлПФР = Элементы.Найти("ГруппаДополнительныйФайлПФР" + СтрокаПоследнегоНомера);
	Элементы.Удалить(ГруппаДополнительныйФайлПФР);
	
	ДополнительныеФайлы.Удалить(Номер - 1);
	СохранитьКомплектВСвойствахФайлов();
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТипФайлаПФРилиБО(ПолноеИмяФайла)
	
	// Пытаемся определить, является ли файл частью БО, и если Да, то какой именно.
	ТипФайлаБО = ОпределитьТипФайлаБО(ПолноеИмяФайла);
	Если ТипФайлаБО <> Неопределено Тогда
		Возврат ТипФайлаБО;
	КонецЕсли;
	
	// Пытаемся определить, является ли файл отчетом НДС, и если Да, то каким.
	ТипФайлаОтчетностиНДС = ОпределитьТипФайлаНДС(ПолноеИмяФайла);
	Если ТипФайлаОтчетностиНДС <> Неопределено Тогда
		Возврат ТипФайлаОтчетностиНДС;
	КонецЕсли;
	
	// Пытаемся определить, является ли файл отчетом ПФР, и если Да, то каким.
	ТипФайлаОтчетностиПФР = ОпределитьТипФайлаПФР(ПолноеИмяФайла);
	Если ТипФайлаОтчетностиПФР <> Неопределено Тогда
		Возврат ТипФайлаОтчетностиПФР;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФайлВыгрузкиУведомленияОКонтролируемыхСделках(КороткоеИмяФайла)
	
	Возврат ВРег(Лев(КороткоеИмяФайла, 10)) = "UT_UVKNRSD";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТипФайлаНДС(ПолноеИмяФайла)
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла).ИмяБезРасширения;
	Если СтрНайти(ИмяФайла, "NO_NDS_") = 1 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.ОсновнойФайлОтчетности");
	ИначеЕсли СтрНайти(ИмяФайла, "NO_NDS.") = 1 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыСодержимогоТранспортногоКонтейнера.Приложение");
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОпределитьТипФайлаПФР(ПолноеИмяФайла)
	
	ДеревоXML = ДеревоXMLИзФайла(ПолноеИмяФайла);
	Если ДеревоXML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	КороткоеИмяФайла = ОбъектФайл.Имя;
	Если ВРЕГ(Лев(КороткоеИмяФайла, 4)) = "ПФР_" Тогда
		УзелПачкаВходящихДокументов = ДеревоXML;
		
	Иначе
		Если ДеревоXML.Свойства().Получить("ПачкаВходящихДокументов") = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		УзелПачкаВходящихДокументов = ДеревоXML.ПачкаВходящихДокументов;
	КонецЕсли;
	
	СвойстваУзла = УзелПачкаВходящихДокументов.Свойства();
	Если СвойстваУзла.Получить("АНКЕТА_ЗЛ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("ЗАЯВЛЕНИЕ_ОБ_ОБМЕНЕ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("ЗАЯВЛЕНИЕ_О_ДУБЛИКАТЕ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ") <> Неопределено Тогда
		
		УзелСведения = УзелПачкаВходящихДокументов.СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ;
		Если ТипЗнч(УзелСведения) = Тип("ОбъектXDTO") Тогда
			УзелСведенияОсновной = УзелСведения;
		Иначе
			Если УзелСведения.Количество() > 0 Тогда
				УзелСведенияОсновной = УзелСведения.Получить(0);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если УзелСведенияОсновной.Свойства().Получить("ВидФормы") <> Неопределено
		И СокрЛП(УзелСведенияОсновной.ВидФормы) = "СПВ-1" Тогда
			Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаСВВ;
		Иначе
			Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
		КонецЕсли;
		
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СТРАХОВОМ_СТАЖЕ_ЗЛ_ДЛЯ_УСТАНОВЛЕНИЯ_ПЕНСИИ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаСВВ;
	ИначеЕсли СвойстваУзла.Получить("ОПИСЬ_СВЕДЕНИЙ_ПЕРЕДАВАЕМЫХ_СТРАХОВАТЕЛЕМ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_ВОЗНАГРАЖДЕНИЙ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("КОНВЕРТАЦИЯ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_СВ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_НАЧИНАЯ_С_2012_ГОДА") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_СВ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_НАЧИНАЯ_С_2013_ГОДА") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_2014") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_2015") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_ПО_ПАЧКЕ_ДОКУМЕНТОВ_РАЗДЕЛА_6") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаСВВ;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаСВВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_НЕ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ГЛАВАМИ_КФХ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РСВ-2") <> Неопределено ИЛИ СвойстваУзла.Получить("РСВ_2") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_ВЗНОСАМ_НА_ДОПОЛНИТЕЛЬНОЕ_СОЦИАЛЬНОЕ_ОБЕСПЕЧЕНИЕ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РВ-3") <> Неопределено ИЛИ СвойстваУзла.Получить("РВ_3") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("ЗАЯВЛЕНИЕ_О_ДОБРОВОЛЬНОМ_ВСТУПЛЕНИИ_В_ПРАВООТНОШЕНИЯ_В_ЦЕЛЯХ_УПЛАТЫ_ДСВ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаДСВ;
	ИначеЕсли СвойстваУзла.Получить("РЕЕСТР_ДСВ_РАБОТОДАТЕЛЬ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.РеестрДСВ;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("ВЕДОМОСТЬ_УПЛАТЫ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ;
	ИначеЕсли СвойстваУзла.Получить("ИС_СЗВ-4-1") <> Неопределено ИЛИ СвойстваУзла.Получить("ИС_СЗВ_4_1") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("ИС_СЗВ-4-2") <> Неопределено ИЛИ СвойстваУзла.Получить("ИС_СЗВ_4_2") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("СТАРЫЕ_ИС_СЗВ-1") <> Неопределено ИЛИ СвойстваУзла.Получить("СТАРЫЕ_ИС_СЗВ_1") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("СТАРЫЕ_ИС_СЗВ-3") <> Неопределено ИЛИ СвойстваУзла.Получить("СТАРЫЕ_ИС_СЗВ_3") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("СЗВ-М") <> Неопределено ИЛИ СвойстваУзла.Получить("СЗВ_М") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("СЗВ-СТАЖ") <> Неопределено ИЛИ СвойстваУзла.Получить("СЗВ_СТАЖ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("СЗВ-КОРР") <> Неопределено ИЛИ СвойстваУзла.Получить("СЗВ_КОРР") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("СЗВ-ИСХ") <> Неопределено ИЛИ СвойстваУзла.Получить("СЗВ_ИСХ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("ОДВ-1") <> Неопределено ИЛИ СвойстваУзла.Получить("ОДВ_1") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	Иначе
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОпределитьТипФайлаБО(ПолноеИмяФайла)
	
	// Формируем вспомогательное соответствие.
	СоответствиеПрефиксаТипуФайлаБухОтчетности = Новый Соответствие;
	СоответствиеПрефиксаТипуФайлаБухОтчетности.Вставить("NO_BUHOTCH_", Перечисления.ТипыФайловБухОтчетности.ОсновнойФайлОтчетности);
	СоответствиеПрефиксаТипуФайлаБухОтчетности.Вставить("NO_BUHPZ_", Перечисления.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей);
	СоответствиеПрефиксаТипуФайлаБухОтчетности.Вставить("NO_BUHAZ_", Перечисления.ТипыФайловБухОтчетности.ПояснительнаяЗаписка);
	СоответствиеПрефиксаТипуФайлаБухОтчетности.Вставить("NO_BUHZSHP_", Перечисления.ТипыФайловБухОтчетности.АудиторскоеЗаключение);
	
	// Определяем короткое имя файла.
	КороткоеИмяФайла = ВРЕГ(КороткоеИмяФайлаПоПолному(ПолноеИмяФайла));
	
	// Подбираем префиксы.
	Для Каждого Эл Из СоответствиеПрефиксаТипуФайлаБухОтчетности Цикл
		Если Лев(КороткоеИмяФайла, СтрДлина(Эл.Ключ)) = Эл.Ключ Тогда
			Возврат Эл.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДеревоXMLИзФайла(ПутьКФайлу)
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
		Фабрика = Новый ФабрикаXDTO;
		ДеревоXML = Фабрика.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		Возврат ДеревоXML;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура КопироватьДанныеФормыКоллекцияНаКлиенте(Источник, Приемник)
	
	Приемник.Очистить();
	
	Для Каждого ЭлементКоллекцииИсточник Из Источник Цикл
	
		ЗаполнитьЗначенияСвойств(Приемник.Добавить(), ЭлементКоллекцииИсточник);
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВозможноПередатьФайлыДляЗагрузки(СвойстваВидаОтчета = Неопределено)
	
	Ошибка = Ложь;
	
	// Проверка количества файлов для загрузки.
	Если СвойстваФайлов.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст =
			НСтр("ru ='Не выбраны файлы электронных представлений для загрузки.'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка заполнения необходимых полей.
	Если ПустаяСтрока(ВидОтчета) Тогда
		Ошибка    = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru ='Не заполнено поле ""Вид"".'");
		Сообщение.Поле = "ВидОтчета";
		Сообщение.Сообщить();
	КонецЕсли;
	Если Элементы.ПредставлениеПериода.Видимость И ПустаяСтрока(ПредставлениеПериода) Тогда
		Ошибка    = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru ='Не заполнено поле ""Период"".'");
		Сообщение.Поле = "ПредставлениеПериода";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если Ошибка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") Тогда
		Если РегламентированнаяОтчетностьЗагрузкаКлиент.ЭтоФормаРегламентированногоОтчета(ВладелецФормы) Тогда
			ЧастиИмени = СтрРазделить(ВладелецФормы.ИмяФормы, ".");
			МаксИндекс = ЧастиИмени.ВГраница();
			Если МаксИндекс > 0 Тогда
				ИсточникФормыОтчета = ЧастиИмени[1];
				ИмяФормыОтчета = ЧастиИмени[МаксИндекс];
				
				СвойстваВидаОтчета = СвойстваВидаОтчетаПоИсточнику(ИсточникФормыОтчета);
				
				Если ВРег(ИсточникОтчета) <> ВРег(ИсточникФормыОтчета) Тогда
					Сообщение = Новый СообщениеПользователю;
					ШаблонСообщения = НСтр("ru ='Данные электронного представления ""%1"" нельзя загрузить в отчет ""%2"".'");
					Сообщение.Текст = СтрШаблон(ШаблонСообщения, ВидОтчета, ?(СвойстваВидаОтчета = Неопределено, ВладелецФормы.Заголовок, СвойстваВидаОтчета.ВидОтчета));
					Сообщение.Сообщить();
					
					Возврат Ложь;
				КонецЕсли;
				
				Если СвойстваВидаОтчета <> Неопределено И СвойстваВидаОтчета.ТипПолучателя <> ТипПолучателя Тогда
					
					Сообщение = Новый СообщениеПользователю;
					ШаблонСообщения = НСтр("ru ='Электронное представление отчета %1 не может быть загружено в форму отчета %2.'");
					Сообщение.Текст = СтрШаблон(ШаблонСообщения, ТипПолучателя, СвойстваВидаОтчета.ТипПолучателя);
					Сообщение.Сообщить();
					
					Возврат Ложь;
				КонецЕсли;
				
				Если Элементы.ПредставлениеПериода.Видимость
				 И НЕ РегламентированнаяОтчетностьВызовСервера.ФормаРеглОтчетаДействуетВОтчетномПериоде(
						ИсточникФормыОтчета, ДатаОкончания, ИмяФормыОтчета) Тогда
					
					Сообщение = Новый СообщениеПользователю;
					ШаблонСообщения = НСтр("ru ='Выбранная для загрузки форма отчета ""%2"" не поддерживает отчетный период загружаемого электронного представления ""%1"".'");
					Сообщение.Текст = СтрШаблон(ШаблонСообщения, Наименование, ВладелецФормы.Заголовок);
					Сообщение.Сообщить();
					
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СвойстваВидаОтчета = СвойстваВидаОтчетаПоИсточнику(ИсточникОтчета);
		КонецЕсли
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СвойстваВидаОтчетаПоИсточнику(Источник)
	
	СвойстваВидаОтчета = Новый Структура;
	
	НайденныйВидОтчета = Справочники.ВидыОтправляемыхДокументов.НайтиПоРеквизиту("Источник", Источник);
	
	Если НайденныйВидОтчета.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваВидаОтчета.Вставить("ВидОтчета",     НайденныйВидОтчета.Ссылка);
	СвойстваВидаОтчета.Вставить("Наименование",  НайденныйВидОтчета.Наименование);
	СвойстваВидаОтчета.Вставить("ТипДокумента",  НайденныйВидОтчета.ТипДокумента);
	СвойстваВидаОтчета.Вставить("ТипПолучателя", НайденныйВидОтчета.ТипПолучателя);
	
	Если ИсточникОтчета = "(Не требуется)" Тогда // источник отчета из файла ЭП
		
		Возврат Неопределено;
		
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
		
		Если НЕ ПустаяСтрока(ПредставлениеТекст) Тогда
			XDTOОбъект = РегламентированнаяОтчетностьЗагрузка.XDTOОбъектИзФайлаИлиСтроки(ПредставлениеТекст);
			Если ТипЗнч(XDTOОбъект) = Тип("ОбъектXDTO")
				И XDTOОбъект.Свойства().Получить("Документ") <> Неопределено Тогда
				Если ТипЗнч(XDTOОбъект.Документ) = Тип("ОбъектXDTO")
					И XDTOОбъект.Документ.Свойства().Получить("Баланс") <> Неопределено Тогда
					Если ТипЗнч(XDTOОбъект.Документ.Баланс) = Тип("ОбъектXDTO")
						И XDTOОбъект.Документ.Баланс.Свойства().Получить("Пассив") <> Неопределено Тогда
						XDTOОбъектПассивБаланса = XDTOОбъект.Документ.Баланс.Пассив;
						Если ТипЗнч(XDTOОбъектПассивБаланса) = Тип("ОбъектXDTO") Тогда
							Если XDTOОбъектПассивБаланса.Свойства().Получить("КапРез") <> Неопределено Тогда
								СвойстваВидаОтчета.Вставить("БалансНекоммерческойОрганизации", Ложь);
							ИначеЕсли ТипЗнч(XDTOОбъектПассивБаланса.Свойства().Получить("ЦелевФин")) <> Неопределено Тогда
								СвойстваВидаОтчета.Вставить("БалансНекоммерческойОрганизации", Истина);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли
		КонецЕсли;
		
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетНДС" Тогда
		
		СвойстваВидаОтчета.Вставить("ЕстьКонсолидацияОтчетностиПоНДС",
			Метаданные.Обработки.Найти("КонсолидацияОтчетностиПоНДС") <> Неопределено);
		
	ИначеЕсли НайденныйВидОтчета.ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ПрочаяОтчетностьФНС Тогда
		
		СвойстваФайлаЗагрузки = РегламентированнаяОтчетностьЗагрузка.СвойстваФайлаЗагрузки(ПредставлениеТекст, 10, Истина, , Истина);
		
		ВерсияФормата = СвойстваФайлаЗагрузки["ВерсФорм"];
		
		Если ЗначениеЗаполнено(ВерсияФормата) Тогда
			СвойстваВидаОтчета.Вставить("ВерсияФормата", ВерсияФормата);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СвойстваВидаОтчета;
	
КонецФункции

#КонецОбласти
