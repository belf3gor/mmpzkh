////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();

	АдресХранилища = "";
	Если Параметры.Свойство("АдресХранилищаЗачетАвансов", АдресХранилища) Тогда
		ЗагрузитьТаблицуЗачетАвансовИзВременногоХранилища(АдресХранилища);
	КонецЕсли;

	// Сохраним в реквизитах формы ее параметры
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,
		"Дата,ДоговорКонтрагента,Контрагент,Организация,
		|ОстаткиОбороты,РежимОтбораДокументов,
		|ТипыДокументов,СпособЗачетаАвансов,
		|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам,
		|ИспользуетсяСрокОплаты, СрокОплаты");
		
	// В некоторых документах счет расчетов устанавливается при проведении.
	// Если так, то скроем поле, относящиеся к расчетам.
	Если Параметры.СкрытьСчетРасчетов Тогда
		Элементы.СчетУчетаРасчетовСКонтрагентом.Видимость = Ложь;
	КонецЕсли;
	
	// В некоторых документах в качестве счета авансов используется счет расчетов.
	// Если так, то скроем поле, относящиеся к авансам.
	Если Параметры.СкрытьСчетАванса Тогда
		Элементы.СчетУчетаРасчетовПоАвансам.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаАвансы.Видимость = УчетВзаиморасчетов.ПравоУправленияЗачетомАвансов();
	
	// В некоторых документах нельзя изменить способ зачета авансов.
	// Если так, то снимем доступность у полей, относящиеся к способу зачету авансов.
	Если Параметры.Свойство("ДоступенВыборСпособаЗачетаАванса") И НЕ Параметры.ДоступенВыборСпособаЗачетаАванса Тогда
		Элементы.СпособЗачетаАвансов.Доступность = Ложь;
		Элементы.ЗачетАвансов.Доступность        = Ложь;
	КонецЕсли;
		
	// В некоторых видах операций в документе используется только 
	// счет расчетов, а счет авансов нет. Если так, то заблокируем поля,
	// относящиеся к авансам.
	ДоступенЗачетАвансов = Истина;
	Если Параметры.Свойство("ДоступенЗачетАвансов") Тогда
		ДоступенЗачетАвансов = Параметры.ДоступенЗачетАвансов;
	КонецЕсли;

	Если ДоступенЗачетАвансов Тогда
		ЕстьСтрокиЗачетАвансов = ЗачетАвансов.Количество() > 0;
	Иначе
		СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		ЗачетАвансов.Очистить();
		Элементы.СпособЗачетаАвансов.Доступность = Ложь;
		Элементы.ЗачетАвансов.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.СрокОплаты.Видимость = ИспользуетсяСрокОплаты;
	
	Если Не СрокиОплатыДокументов.ПравоРедактирования() Тогда
		Элементы.СрокОплаты.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Не Параметры.ВсегдаОтображатьСчетаУчета Тогда
		УстановитьВидимостьСчетовУчета();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);

	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.ОбщаяФорма.ВыборПорядкаУчетаРасчетов",
		"ВыборПорядкаУчетаРасчетов",
		НСтр("ru='Новости: Расчеты'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы 
		И (Модифицированность ИЛИ ПеренестиВДокумент) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если Модифицированность И НЕ ПеренестиВДокумент Тогда
		
		Отказ = Истина;
		
		Оповещение = Новый ОписаниеОповещения("ВопросСохраненияДанныхЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	ИначеЕсли ПеренестиВДокумент Тогда
		
		Отказ = НЕ ПроверитьЗаполнение();
		
		Если Отказ Тогда
			Модифицированность = Истина;
			ПеренестиВДокумент = Ложь;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;

	СтруктураВозврата = Новый Структура;

	Если ПеренестиВДокумент Тогда
		СтруктураВозврата.Вставить("АдресХранилищаЗачетАвансов",     АдресХранилищаЗачетАвансов);
		СтруктураВозврата.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетУчетаРасчетовСКонтрагентом);
		СтруктураВозврата.Вставить("СчетУчетаРасчетовПоАвансам",     СчетУчетаРасчетовПоАвансам);
		СтруктураВозврата.Вставить("СпособЗачетаАвансов",            СпособЗачетаАвансов);
		СтруктураВозврата.Вставить("ИспользуетсяСрокОплаты",         ИспользуетсяСрокОплаты);
		СтруктураВозврата.Вставить("СрокОплаты",                     СрокОплаты);
		ОповеститьОВыборе(СтруктураВозврата);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	НеТребуютПроверки = Новый Массив;
	
	Если Не СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		НеТребуютПроверки.Добавить("СчетУчетаРасчетовСКонтрагентом");
		НеТребуютПроверки.Добавить("СчетУчетаРасчетовПоАвансам");
	
	Иначе
		Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансам) И НЕ Параметры.СкрытьСчетАванса Тогда
			Если СпособЗачетаАвансов <> ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.НеЗачитывать") Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Заполнение", НСтр("ru = 'Счет учета расчетов по авансам'"));
				Поле = "СчетУчетаРасчетовПоАвансам";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.СкрытьСчетРасчетов Тогда
			НеТребуютПроверки.Добавить("СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
		
		Если Параметры.СкрытьСчетАванса Тогда
			НеТребуютПроверки.Добавить("СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НеТребуютПроверки);
	
	Если СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.ПоДокументу") Тогда
		
		Если ЗачетАвансов.Количество() = 0 Тогда
		
			Отказ = Истина;
			
			ТекстСообщения = НСтр("ru = 'Не введено ни одной строки с документом аванса!'");
			Поле = "ЗачетАвансов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		Иначе
		
			НомерСтроки = 0;
			Для Каждого СтрокаАванса Из ЗачетАвансов Цикл
			
				НомерСтроки = НомерСтроки + 1;
				Префикс = "ЗачетАвансов[%1].";
				Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Префикс, Формат(НомерСтроки - 1, "ЧН=0; ЧГ="));
				
				Если НЕ ЗначениеЗаполнено(СтрокаАванса.ДокументАванса) Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не заполнена колонка ""Документ аванса"" в строке %1 списка'"),
						НомерСтроки);
					Поле = Префикс + "ДокументАванса";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЕсли;
	
	КонецЕсли;

	// Чтобы дважды не вызывать сервер, сразу поместим во временное хранилище 
	// таблицу ЗачетАвансов.
	Если Не Отказ Тогда
		АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилище();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СпособЗачетаАвансовПриИзменении(Элемент)
	
	Если СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.Автоматически")
			ИЛИ СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.НеЗачитывать") Тогда
		ЗачетАвансов.Очистить();
		ЕстьСтрокиЗачетАвансов = Ложь;
	КонецЕсли;

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЗачетАвансов

&НаКлиенте
Процедура ЗачетАвансовПриИзменении(Элемент)
	
	ЕстьСтрокиЗачетАвансов = ЗачетАвансов.Количество() > 0;
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансовПослеУдаления(Элемент)

	ЕстьСтрокиЗачетАвансов = ЗачетАвансов.Количество() > 0;
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансовДокументАвансаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗачетАвансов.ТекущиеДанные;
	ТекущиеДанные.СуммаЗачета = 0;
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансовДокументАвансаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , ?(ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансам), СчетУчетаРасчетовПоАвансам, СчетУчетаРасчетовСКонтрагентом));
	ПараметрыОбъекта.Вставить("Организация"          , Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , ОстаткиОбороты);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , ТипыДокументов);
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", РежимОтбораДокументов);

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансовСуммаЗачетаПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаОК(Команда)

	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ЗачетАвансовСуммаЗачета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗачетАвансовСуммаЗачета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЗачетАвансов.СуммаЗачета", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));


	// ЗачетАвансов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗачетАвансов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособЗачетаАвансов", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыЗачетаАвансов.ПоДокументу);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьСтрокиЗачетАвансов", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);


	// СчетУчетаРасчетовПоАвансам

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаРасчетовПоАвансам");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособЗачетаАвансов", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыЗачетаАвансов.НеЗачитывать);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.ИтогСуммаЗачета = Форма.ЗачетАвансов.Итог("СуммаЗачета");

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуЗачетАвансовИзВременногоХранилища(АдресХранилища)

	ТаблицаЗачетАвансов = ПолучитьИзВременногоХранилища(АдресХранилища);
	ЗачетАвансов.Загрузить(ТаблицаЗачетАвансов);

КонецПроцедуры

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилище()

	ТаблицаЗачетАвансов = ЗачетАвансов.Выгрузить();
	
	АдресЗачетАвансовВХранилище = ПоместитьВоВременноеХранилище(ТаблицаЗачетАвансов, УникальныйИдентификатор);

	Возврат АдресЗачетАвансовВХранилище;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	СпособЗачетаАвансов = Форма.СпособЗачетаАвансов;
	Элементы = Форма.Элементы;
	
	Элементы.СчетУчетаРасчетовПоАвансам.Доступность = Форма.ДоступенЗачетАвансов;
	
	Если СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.НеЗачитывать")
		ИЛИ СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.Автоматически") Тогда
		Элементы.ЗачетАвансов.Доступность 	= Ложь;
	Иначе
		Элементы.ЗачетАвансов.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросСохраненияДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовПоАвансам");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	Если Параметры.СкрытьСчетРасчетов Тогда
		Элементы.СчетУчетаРасчетовСКонтрагентом.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.СкрытьСчетАванса Тогда
		Элементы.СчетУчетаРасчетовПоАвансам.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
