&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаСервере
Перем ЭтоПервыйРаздел;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФормаОткрытаОтдельнойЗакладкой = Параметры.ОткрыватьВНовойЗакладке;
	
	// Разрешим выбор только тех организаций, данные которых доступны на чтение.
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	ПараметрВыбораОтборПоОрганизации = Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеОрганизации);
	ПараметрыВыбораОрганизации = Новый Массив;
	ПараметрыВыбораОрганизации.Добавить(ПараметрВыбораОтборПоОрганизации);
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОрганизации);
	
	Если Параметры.Организация = Неопределено Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Если ДоступныеОрганизации.Найти(Организация) = Неопределено Тогда
			Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Организация = Параметры.Организация;
	КонецЕсли;
	ОрганизацияПредставление = Организация;
	
	ВосстановитьНастройкиФормы();
	
	Если ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда
		Заголовок = НСтр("ru='Анализ'");
		Элементы.ГруппаОтчеты.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ДекорацияЗаголовок.Видимость = НЕ ФормаОткрытаОтдельнойЗакладкой;
		
	Если ФормаОткрытаОтдельнойЗакладкой Тогда
		МониторАктуален = Ложь;
		ДлительнаяОперацияПриОткрытии = ОбновитьДанныеМонитора(Ложь, Ложь);
	Иначе
		// Показываем пользователю последние, неактульные данные.
		// Обработчик ожидания позже обновит данные.
		МониторАктуален = Истина; 
	КонецЕсли;
	ОбновитьМониторНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ФормаОткрытаОтдельнойЗакладкой Тогда
		ЖдатьЗавершенияДлительнойОперации(ДлительнаяОперацияПриОткрытии);
		ДлительнаяОперацияПриОткрытии = Неопределено;
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеРабочегоСтолаПриОткрытии", 16, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеРабочегоСтола", ИнтервалОбновления, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		
		Организация = Параметр;
		ОрганизацияПриИзмененииНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПерсонализированныеПредложенияСервисовКлиент.ПерейтиПоСсылкеБаннера(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Баннер, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииНаКлиенте()
	
	ОрганизацияПредставление = Организация;
	
	ДлительнаяОперация = ЗапуститьОбновлениеДанныхНаСервере();
	ЖдатьЗавершенияДлительнойОперации(ДлительнаяОперация);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьУведомлениеОНастройкеНажатие(Элемент)
	
	ПоказыватьУведомлениеОНастройке = Ложь;
	СохранитьНастройкуМонитора("ПоказыватьУведомлениеОНастройке", ПоказыватьУведомлениеОНастройке);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Расшифровка = Область.Расшифровка;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		ГруппировкаОтчета = ?(Расшифровка.Свойство("ГруппировкаОтчета"), Расшифровка.ГруппировкаОтчета, Неопределено);
		КлючВарианта      = ?(Расшифровка.Свойство("КлючВарианта"),      Расшифровка.КлючВарианта,      Неопределено);
		Отбор             = ?(Расшифровка.Свойство("Отбор"),             Расшифровка.Отбор,             Неопределено);
		НачалоПериода     = ?(Расшифровка.Свойство("НачалоПериода"),     Расшифровка.НачалоПериода,     Неопределено);
		КонецПериода      = ?(Расшифровка.Свойство("КонецПериода"),      Расшифровка.КонецПериода,      Неопределено);
		КлючеваяОперация  = ?(Расшифровка.Свойство("КлючеваяОперация"),  Расшифровка.КлючеваяОперация,  Неопределено);
		
		Если ЗначениеЗаполнено(КлючеваяОперация) Тогда
			ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
		КонецЕсли;
		
		ОткрытьОтчет(Расшифровка.ФормаОтчета, ГруппировкаОтчета, Отбор, , КлючВарианта, НачалоПериода, КонецПериода);
		
	ИначеЕсли Расшифровка <> Неопределено Тогда
		
		Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "МониторРасшифровкаРазделаНеоплаченныеСчетаПокупателейПоЭлементу");
		ИначеЕсли ТипЗнч(Расшифровка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "МониторРасшифровкаРазделаНеоплаченныеСчетаПоставщиковПоЭлементу");
		КонецЕсли;
		
		ПоказатьЗначение(, Расшифровка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ЗакрытьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьМонитор(Команда)
	
	МониторАктуален = Ложь; // Пользователь явно указал на то, данные монитора неактуальны
	УправлениеФормой(ЭтотОбъект);
	
	ДлительнаяОперация = ОбновитьДанныеМонитора(Ложь);
	ЖдатьЗавершенияДлительнойОперации(ДлительнаяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	ТемаПисьма = НСтр("ru='Монитор основных показателей, %1'");
	ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТемаПисьма,
		ПолучитьПредставлениеДатыПоследнегоОбновленияМонитора(ДатаПоследнегоОбновленияМонитора));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Тема", ТемаПисьма);
	ДополнительныеПараметры.Вставить("ИмяФайла", ТемаПисьма);
	ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет(ЭтотОбъект, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокРазделов",                             СписокРазделов);
	ПараметрыФормы.Вставить("ВариантОкругления",                          ВариантОкругления);
	ПараметрыФормы.Вставить("СравниватьСПрошлымПериодом",                 СравниватьСПрошлымПериодом);
	ПараметрыФормы.Вставить("ПоказыватьОборотыЗаТекущийМесяц",	          ПоказыватьОборотыЗаТекущийМесяц);
	ПараметрыФормы.Вставить("ПоказыватьОборотыЗаПрошлыйМесяц",	          ПоказыватьОборотыЗаПрошлыйМесяц);
	ПараметрыФормы.Вставить("ПоказыватьОборотыСНачалаГодаПоТекущийМесяц", ПоказыватьОборотыСНачалаГодаПоТекущийМесяц);
	ПараметрыФормы.Вставить("ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц", ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаМонитораОсновныхПоказателей" , ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтчетДоходыИРасходы(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ДоходыРасходы.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОборотныеСредства(Команда)

	ФормаОтчета = ПолучитьФорму("Отчет.ОборотныеСредства.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПродажиПоМесяцам(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ПродажиПоМесяцам.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаУведомлениеОНастройке.Видимость = Форма.ПоказыватьУведомлениеОНастройке;
	
	Если НЕ Форма.МониторАктуален Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьДанныеМонитора(СУчетомАктуальности = Истина, ОжидатьВыполненияЗадания = Истина)
	
	// Параметры обернем в структуру для их передачи через механизм ДлительныеОперации.
	ПараметрыОбновления = Новый Структура();
	ПараметрыОбновления.Вставить("Организация"          , Организация);
	ПараметрыОбновления.Вставить("РазделыМонитора"      , ВыбранныеРазделы.ВыгрузитьЗначения());
	ПараметрыОбновления.Вставить("ПолучатьПрошлыйПериод", СравниватьСПрошлымПериодом);
	
	ДлительнаяОперация = МониторРуководителя.ЗапуститьОбновлениеМонитораВФоне(
		ПараметрыОбновления, УникальныйИдентификатор, СУчетомАктуальности, ОжидатьВыполненияЗадания);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЗапуститьОбновлениеРабочегоСтолаПриОткрытии()
	
	ДлительнаяОперация = ЗапуститьОбновлениеДанныхНаСервере();
	Если ДлительнаяОперация <> Неопределено Тогда
		ЖдатьЗавершенияДлительнойОперации(ДлительнаяОперация);
	Иначе
		// Попробуем обновить позже
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеРабочегоСтолаПриОткрытии", 16, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьОбновлениеРабочегоСтола()
	
	ДлительнаяОперация = ЗапуститьОбновлениеДанныхНаСервере();
	ЖдатьЗавершенияДлительнойОперации(ДлительнаяОперация);
	
	// Интервал следующего обновления рабочего стола рассчитан в ОбновитьМониторНаСервере()
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеРабочегоСтола", ИнтервалОбновления, Истина);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьОбновлениеДанныхНаСервере()
	
	Если МонопольныйРежим() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбновитьДанныеМонитора();
	
КонецФункции

&НаКлиенте
Процедура ЖдатьЗавершенияДлительнойОперации(ДлительнаяОперация)
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ПараметрыОжидания     = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеФоновогоЗаданияЗаполнения", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеФоновогоЗаданияЗаполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		УправлениеФормой(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	МониторАктуален = Истина;
	ОбновитьМониторНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияПериодов()
	
	// Обновим заголовки периодов
	ПериодДата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'на %1'"), Формат(ТекущаяДата, "ДФ='д ММММ'"));
	
	ЗаголовокТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сегодня: %1'"),
		Формат(ТекущаяДата, "Л=ru_RU; ДФ='d MMMM, dddd'"));

	Если НЕ ФормаОткрытаОтдельнойЗакладкой Тогда
		Заголовок = ЗаголовокТекст;
	КонецЕсли;
	
КонецПроцедуры

#Область Настройки

&НаСервере
Процедура ВосстановитьНастройкиФормы()
	
	РазделыМонитораИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторРуководителя", "СписокРазделовМонитораРуководителя");
	
	Если РазделыМонитораИзНастроек = Неопределено Тогда
		СписокРазделов = МониторРуководителя.СписокРазделовМонитораРуководителяПоУмолчанию();
	Иначе
		СписокРазделов = РазделыМонитораИзНастроек;
		НеиспользуемыеРазделы = Перечисления.РазделыМонитораРуководителя.НеиспользуемыеРазделы();
		Для каждого НеиспользуемыйРаздел Из НеиспользуемыеРазделы Цикл
			НеиспользуемыйЭлемент = СписокРазделов.НайтиПоЗначению(НеиспользуемыйРаздел);
		    Если НеиспользуемыйЭлемент <> Неопределено Тогда
				СписокРазделов.Удалить(НеиспользуемыйЭлемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВыбранныеРазделы.Очистить();
	Для каждого Раздел из СписокРазделов Цикл
		Если Раздел.Пометка Тогда
			ВыбранныеРазделы.Добавить(Раздел.Значение, Раздел.Представление);
		КонецЕсли;
	КонецЦикла;
	
	ВариантОкругленияИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторРуководителя", "ВариантОкругленияМонитораРуководителя");
	
	Если ВариантОкругленияИзНастроек = Неопределено Тогда
		// По умолчанию до тысяч рублей
		ВариантОкругления = 1000;
	Иначе
		// Нельзя допустить 0
		ВариантОкругления = Макс(ВариантОкругленияИзНастроек, 1);
	КонецЕсли;
		
	СравниватьСПрошлымПериодомИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторРуководителя", "СравниватьСПрошлымПериодом");
	
	Если СравниватьСПрошлымПериодомИзНастроек = Неопределено Тогда
		СравниватьСПрошлымПериодом = Ложь;
	Иначе
		СравниватьСПрошлымПериодом = СравниватьСПрошлымПериодомИзНастроек;
	КонецЕсли;
	
	ПоказыватьОборотыЗаТекущийМесяцИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторРуководителя", "ПоказыватьОборотыЗаТекущийМесяц");
	Если ПоказыватьОборотыЗаТекущийМесяцИзНастроек = Неопределено Тогда
		ПоказыватьОборотыЗаТекущийМесяц = Истина;
	Иначе
		ПоказыватьОборотыЗаТекущийМесяц = ПоказыватьОборотыЗаТекущийМесяцИзНастроек;
	КонецЕсли;
	
	ПоказыватьОборотыСНачалаГодаПоТекущийМесяцИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторРуководителя", "ПоказыватьОборотыСНачалаГодаПоТекущийМесяц");
	Если ПоказыватьОборотыСНачалаГодаПоТекущийМесяцИзНастроек = Неопределено Тогда
		ПоказыватьОборотыСНачалаГодаПоТекущийМесяц = Истина;
	Иначе
		ПоказыватьОборотыСНачалаГодаПоТекущийМесяц = ПоказыватьОборотыСНачалаГодаПоТекущийМесяцИзНастроек;
	КонецЕсли;
	
	ПоказыватьОборотыЗаПрошлыйМесяцИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторРуководителя", "ПоказыватьОборотыЗаПрошлыйМесяц");
	Если ПоказыватьОборотыЗаПрошлыйМесяцИзНастроек = Неопределено Тогда
		ПоказыватьОборотыЗаПрошлыйМесяц = Ложь;
	Иначе
		ПоказыватьОборотыЗаПрошлыйМесяц = ПоказыватьОборотыЗаПрошлыйМесяцИзНастроек;
	КонецЕсли;
	
	ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяцИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторРуководителя", "ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц");
	Если ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяцИзНастроек = Неопределено Тогда
		ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц = Ложь;
	Иначе
		ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц = ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяцИзНастроек;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДокументыПоступления")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьДокументыРеализации") Тогда
		ПоказыватьУведомлениеОНастройкеИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторРуководителя", "ПоказыватьУведомлениеОНастройке");
	Иначе
		ПоказыватьУведомлениеОНастройкеИзНастроек = Ложь;
	КонецЕсли;
	Если ПоказыватьУведомлениеОНастройкеИзНастроек = Неопределено Тогда
		ПоказыватьУведомлениеОНастройке = Истина;
	Иначе
		ПоказыватьУведомлениеОНастройке = ПоказыватьУведомлениеОНастройкеИзНастроек;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Результат, Параметры) Экспорт
	
	// Если настройки не были изменены - ничего не делаем
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
		
	ВосстановитьНастройкиФормы();
	
	МониторАктуален = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
	ДлительнаяОперация = ОбновитьДанныеМонитора(Ложь);
	ЖдатьЗавершенияДлительнойОперации(ДлительнаяОперация);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкуМонитора(КлючНастроек, Настройки)
	
	ХранилищеОбщихНастроек.Сохранить("МониторРуководителя", КлючНастроек, Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеТабличногоДокумента

&НаСервере
Процедура ОбновитьМониторНаСервере()
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Если НачалоДня(ТекущаяДата) <> НачалоДня(ДатаСеанса) Тогда
		ИнтервалОбновления = (КонецДня(ДатаСеанса) + 1) - ДатаСеанса + 59;
		ТекущаяДата = ДатаСеанса;
		ОбновитьПредставленияПериодов();
	КонецЕсли;
	
	Если НЕ МониторАктуален Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеРазделовМонитора = МониторРуководителя.ПолучитьДанныеРазделовМонитора(Организация, ВыбранныеРазделы.ВыгрузитьЗначения(), ВариантОкругления, СравниватьСПрошлымПериодом);
	
	Макет = ПолучитьОбщийМакет("МониторРуководителя");
	
	Если ДанныеРазделовМонитора <> Неопределено Тогда
		
		Результат.Очистить();
		
		Макет = ПолучитьОбщийМакет("МониторРуководителя");
		
		Макет.Области.НаСегодня.ШиринаКолонки = ?(СравниватьСПрошлымПериодом, 18, 26);
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ОбластьОрганизация = Макет.ПолучитьОбласть("Организация");
			ОбластьОрганизация.Параметры.Организация = Строка(Организация);
			Результат.Вывести(ОбластьОрганизация);
		КонецЕсли;
		
		Если СравниватьСПрошлымПериодом Тогда
			ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокМонитора");
		Иначе
			ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокМонитора|ТекущийПериод");
		КонецЕсли;
		
		ДатаПоследнегоОбновленияМонитора = МониторРуководителя.ПолучитьДатуПоследнегоОбновленияМонитора(Организация, ВыбранныеРазделы.ВыгрузитьЗначения());
		ДатаОбновленияМонитораСтрокой = ПолучитьПредставлениеДатыПоследнегоОбновленияМонитора(ДатаПоследнегоОбновленияМонитора);
		
		ОбластьЗаголовок.Параметры.Сегодня = ДатаОбновленияМонитораСтрокой;
		
		ОбластьЗаголовок.Параметры.ЕдиницаИзмерения = ?(ВариантОкругления = 1, НСтр("ru = 'Руб'"), НСтр("ru = 'Тыс. руб'"));

		Результат.Вывести(ОбластьЗаголовок);
		
		ЭтоПервыйРаздел = Истина;
		
		Для каждого РазделМонитора Из ВыбранныеРазделы Цикл
			
			ИмяРазделаМонитора = РазделМонитора.Представление;
			Отбор = Новый Структура("РазделМонитора", РазделМонитора.Значение);
			ДанныеРаздела = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
			ВывестиРазделМонитора(РазделМонитора.Значение, ДанныеРаздела, Макет, Результат);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделМонитора(РазделМонитора, ДанныеРаздела, Макет, ТабличныйДокумент)
	
	Если РазделМонитора = Перечисления.РазделыМонитораРуководителя.ОстаткиДенежныхСредств Тогда
		
		ВывестиРаздел(РазделМонитора, ДанныеРаздела, Макет, ТабличныйДокумент, 5, Ложь);
		
	ИначеЕсли РазделМонитора = Перечисления.РазделыМонитораРуководителя.ПоступлениеДенежныхСредств
		  ИЛИ РазделМонитора = Перечисления.РазделыМонитораРуководителя.РасходДенежныхСредств
		  ИЛИ РазделМонитора = Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам
		  ИЛИ РазделМонитора = Перечисления.РазделыМонитораРуководителя.ПродажиПоНоменклатурнымГруппам Тогда
		
		ВывестиОборотныйРаздел(РазделМонитора, ДанныеРаздела, Макет, ТабличныйДокумент);
		
	Иначе
		
		ВывестиРаздел(РазделМонитора, ДанныеРаздела, Макет, ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРаздел(Раздел, ТаблицаДанных, Макет, ТабличныйДокумент, ОграничениеЧислаСтрок = 3, Знач ВыводитьТекстВТомЧисле = Истина)
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		
		ИмяОбластиЗаголовокРаздела = ПолучитьИмяОбластиЗаголовокРаздела(СравниватьСПрошлымПериодом);
		ИмяОбластиСтрокаРаздела    = ПолучитьИмяОбластиСтрокаРаздела(СравниватьСПрошлымПериодом);
		
		МакетОтступа                    = Макет.ПолучитьОбласть("ОтступРаздела");
		МакетСуммыВВалюте 				= Макет.ПолучитьОбласть("СтрокаСуммаВВалюте");
		ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		СтрокаИтого = НСтр("ru = 'Итого'");
		Счетчик = 0;
		
		Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			
			// Итоговая строка.
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеРасшифровки) И СтрокаТаблицы.Представление = СтрокаИтого Тогда
				
				СтруктураРасшифровки = Перечисления.РазделыМонитораРуководителя.СтруктураРасшифровкиРаздела(Раздел);
				
				МакетЗаголовка = Макет.ПолучитьОбласть(ИмяОбластиЗаголовокРаздела);
				
				МакетЗаголовка.Области.ПредставлениеЗаголовка.Расшифровка = СтруктураРасшифровки;
				
				МакетЗаголовка.Параметры.Заголовок = Строка(Раздел);
				МакетЗаголовка.Параметры.Период    = ПериодДата;
				МакетЗаголовка.Параметры.Сумма     = СтрокаТаблицы.Сумма;
					
				Если СравниватьСПрошлымПериодом Тогда
				
					МакетЗаголовка.Параметры.СуммаПрошлыйПериод = СтрокаТаблицы.СуммаПрошлыйПериод;
					МакетЗаголовка.Параметры.Изменение          = Изменение(СтрокаТаблицы.Отклонение);
					
					ЗаполнитьДинамику(МакетЗаголовка.Области.ИзменениеЗаголовка, 
						МакетЗаголовка.Рисунки.КартинкаИзменениеЗаголовок, 
						СтрокаТаблицы.Отклонение);
					
				КонецЕсли;
					
				Если ЭтоПервыйРаздел Тогда
					ЭтоПервыйРаздел = Ложь;
				Иначе
					ТабличныйДокумент.Вывести(МакетОтступа);
				КонецЕсли;
					
				ТабличныйДокумент.Вывести(МакетЗаголовка);
				
			Иначе
				
				Если ТипЗнч(СтрокаТаблицы.ДанныеРасшифровки) = Тип("СправочникСсылка.Контрагенты") Тогда
					
					Отбор = ОтборПоКонтрагенту(СтрокаТаблицы.ДанныеРасшифровки);
					
					Расшифровка = Перечисления.РазделыМонитораРуководителя.СтруктураРасшифровкиРаздела(Раздел);
					Расшифровка.Вставить("КлючВарианта", "ЗадолженностьПокупателейПоДоговорам");
					Расшифровка.Вставить("Отбор", Отбор);
					
					Если Раздел = Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПокупателей
					 ИЛИ Раздел = Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПоставщикам Тогда
					 
						Расшифровка.Вставить("ГруппировкаОтчета", ГруппировкаПоДоговорам());
					 
					Конецесли;
					
				ИначеЕсли ТипЗнч(СтрокаТаблицы.ДанныеРасшифровки) = Тип("СправочникСсылка.Валюты") Тогда
					
					Отбор = Новый Массив;
					
					Если СтрокаТаблицы.Представление = НСтр("ru = 'В кассе'") Тогда
						Отбор.Добавить(Новый Структура("Поле, Значение, ВидСравнения", "ВидДенежныхСредств", "Деньги в кассе", ВидСравненияКомпоновкиДанных.Равно));
					Иначе
						Отбор.Добавить(Новый Структура("Поле, Значение, ВидСравнения", "ВидДенежныхСредств", "Деньги на расчетных счетах", ВидСравненияКомпоновкиДанных.Равно));
					КонецЕсли;
					
					Если СтрокаТаблицы.ДанныеРасшифровки <> ВалютаРегламентированногоУчета Тогда
						Отбор.Добавить(Новый Структура("Поле, Значение, ВидСравнения", "Валюта", СтрокаТаблицы.ДанныеРасшифровки, ВидСравненияКомпоновкиДанных.Равно));
					КонецЕсли;
					
					Расшифровка = Перечисления.РазделыМонитораРуководителя.СтруктураРасшифровкиРаздела(Раздел);
					Расшифровка.Вставить("Отбор", Отбор);
					
				Иначе
					
					Расшифровка = СтрокаТаблицы.ДанныеРасшифровки;
					
				КонецЕсли;
				
				Если ВыводитьТекстВТомЧисле Тогда
					ВыводитьТекстВТомЧисле = Ложь;
					МакетВТомЧисле = Макет.ПолучитьОбласть("ВТомЧисле");
					ТабличныйДокумент.Вывести(МакетВТомЧисле);
				КонецЕсли;
				
				Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
					Если Расшифровка.Свойство("КлючеваяОперация") Тогда
						Расшифровка.КлючеваяОперация = Расшифровка.КлючеваяОперация + "ПоЭлементу";
					КонецЕсли;
				КонецЕсли;
				
				МакетСтроки = Макет.ПолучитьОбласть(ИмяОбластиСтрокаРаздела);
				
				МакетСтроки.Области.ПредставлениеСтроки.Расшифровка = Расшифровка;
				
				МакетСтроки.Параметры.Представление = СтрокаТаблицы.Представление;
				МакетСтроки.Параметры.Сумма         = СтрокаТаблицы.Сумма;
				
				ТабличныйДокумент.Вывести(МакетСтроки);
				
				Если СтрокаТаблицы.СуммаВВалюте <> 0  Тогда
					
					ПредставлениеВалюты = ?(ТипЗнч(СтрокаТаблицы.ДанныеРасшифровки) = Тип("СправочникСсылка.Валюты"),
						СтрокаТаблицы.Представление,
						Строка(СтрокаТаблицы.Валюта));
					
					ПредставлениеВалютнойСуммы = "" + СтрокаТаблицы.СуммаВВалюте + " " + ПредставлениеВалюты;
					
					МакетСуммыВВалюте.Параметры.ПредставлениеСуммыВВалюте = ПредставлениеВалютнойСуммы;
					ТабличныйДокумент.Вывести(МакетСуммыВВалюте);
					
				КонецЕсли;
				
				Счетчик = Счетчик + 1;
				
			КонецЕсли;
			
			// Выводится не более установленного количества строк (по умолчанию: 3).
			Если Счетчик >= ОграничениеЧислаСтрок Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиОборотныйРаздел(Раздел, ТаблицаДанных, Макет, ТабличныйДокумент)
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МакетОтступа = Макет.ПолучитьОбласть("ОтступРаздела");
	
	Если ЭтоПервыйРаздел Тогда
		ЭтоПервыйРаздел = Ложь;
	Иначе
		ТабличныйДокумент.Вывести(МакетОтступа);
	КонецЕсли;
	
	ЗаголовокРазделаОбороты = Макет.ПолучитьОбласть("ЗаголовокРазделаОбороты");
	ЗаголовокРазделаОбороты.Параметры.Заголовок = Строка(Раздел);
	ТабличныйДокумент.Вывести(ЗаголовокРазделаОбороты);
	
	ИмяОбластиСтрокаРаздела = ПолучитьИмяОбластиСтрокаРаздела(СравниватьСПрошлымПериодом);
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураРасшифровки = Перечисления.РазделыМонитораРуководителя.СтруктураРасшифровкиРаздела(Раздел);
		
		КлючеваяОперация = "МониторРасшифровкаРаздела" + СписокРазделов.НайтиПоЗначению(Раздел).Представление;
		
		ВыводитьСтроку = Ложь;
		
		Если СтрокаТаблицы.Порядок = 1 И ПоказыватьОборотыЗаТекущийМесяц Тогда
			
			ВыводитьСтроку = Истина;
			
			СтруктураРасшифровки.Вставить("НачалоПериода",    НачалоМесяца(ТекущаяДата));
			СтруктураРасшифровки.Вставить("КонецПериода",     ТекущаяДата);
			СтруктураРасшифровки.Вставить("КлючеваяОперация", КлючеваяОперация + "ТекущийМесяц");
			
		ИначеЕсли СтрокаТаблицы.Порядок = 2 И ПоказыватьОборотыСНачалаГодаПоТекущийМесяц И НЕ ЭтоПервыйМесяцГода(ТекущаяДата) Тогда
			
			ВыводитьСтроку = Истина;
			
			СтруктураРасшифровки.Вставить("НачалоПериода",    НачалоГода(ТекущаяДата));
			СтруктураРасшифровки.Вставить("КонецПериода",     ТекущаяДата);
			СтруктураРасшифровки.Вставить("КлючеваяОперация", КлючеваяОперация + "СНачалаГодаПоТекущийМесяц");
			
		ИначеЕсли СтрокаТаблицы.Порядок = 3 И ПоказыватьОборотыЗаПрошлыйМесяц Тогда
			
			ВыводитьСтроку = Истина;
			
			СтруктураРасшифровки.Вставить("НачалоПериода",    НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1)));
			СтруктураРасшифровки.Вставить("КонецПериода",     КонецМесяца(ДобавитьМесяц(ТекущаяДата, -1)));
			СтруктураРасшифровки.Вставить("КлючеваяОперация", КлючеваяОперация + "ПрошлыйМесяц");
			
		ИначеЕсли СтрокаТаблицы.Порядок = 4 И ПоказыватьОборотыСНачалаГодаПоПрошлыйМесяц Тогда
			
			ВыводитьСтроку = Истина;
			
			СтруктураРасшифровки.Вставить("НачалоПериода",    НачалоГода(ДобавитьМесяц(ТекущаяДата, -1)));
			СтруктураРасшифровки.Вставить("КонецПериода",     КонецМесяца(ДобавитьМесяц(ТекущаяДата, -1)));
			СтруктураРасшифровки.Вставить("КлючеваяОперация", КлючеваяОперация + "СНачалаГодаПоПрошлыйМесяц");
			
		КонецЕсли;	
		
		Если НЕ ВыводитьСтроку Тогда
			Продолжить;
		КонецЕсли;
		
		МакетСтроки = Макет.ПолучитьОбласть(ИмяОбластиСтрокаРаздела);
		
		МакетСтроки.Области.ПредставлениеСтроки.Расшифровка = СтруктураРасшифровки;
		
		МакетСтроки.Параметры.Представление      = СтрокаТаблицы.Представление;
		МакетСтроки.Параметры.Сумма              = СтрокаТаблицы.Сумма;
		
		Если СравниватьСПрошлымПериодом Тогда
		
			МакетСтроки.Параметры.СуммаПрошлыйПериод = СтрокаТаблицы.СуммаПрошлыйПериод;
			МакетСтроки.Параметры.Изменение          = Изменение(СтрокаТаблицы.Отклонение);
			
			ЗаполнитьДинамику(МакетСтроки.Области.ИзменениеСтроки, 
				МакетСтроки.Рисунки.КартинкаИзменениеСтрока, 
				СтрокаТаблицы.Отклонение);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(МакетСтроки);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеДатыПоследнегоОбновленияМонитора(ДатаПоследнегоОбновленияМонитора)

	Возврат Формат(ДатаПоследнегоОбновленияМонитора, "ДФ='dd MMMM yyyy ""г."" H:mm'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяОбластиЗаголовокРаздела(СравниватьСПрошлымПериодом = Ложь)
	
	Если СравниватьСПрошлымПериодом Тогда
		ИмяОбластиЗаголовокРаздела = "ЗаголовокРаздела|ТекущийПрошлыйПериод";
	Иначе
		ИмяОбластиЗаголовокРаздела = "ЗаголовокРаздела|ТекущийПериод";
	КонецЕсли;
	
	Возврат ИмяОбластиЗаголовокРаздела;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяОбластиСтрокаРаздела(СравниватьСПрошлымПериодом = Ложь)
	
	Если СравниватьСПрошлымПериодом Тогда
		ИмяОбластиСтрокаРаздела = "СтрокаРаздела|ТекущийПрошлыйПериод";
	Иначе
		ИмяОбластиСтрокаРаздела = "СтрокаРаздела|ТекущийПериод";
	КонецЕсли;
	
	Возврат ИмяОбластиСтрокаРаздела;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПервыйМесяцГода(Дата)
	
	Возврат Месяц(Дата) = 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Изменение(Отклонение)
	
	ЗначениеОтклонения 	= Окр(Отклонение, 0);
	АбсОтклонения 		= Макс(ЗначениеОтклонения, -ЗначениеОтклонения);
	Если АбсОтклонения = 0 Тогда
		Изменение = "-";
	ИначеЕсли АбсОтклонения > 1000 Тогда
		Изменение = ">1000%";
	Иначе
		Изменение = Формат(АбсОтклонения, "ЧЦ=3") + "%";
	КонецЕсли;
	
	Возврат Изменение;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДинамику(ОбластьТекста, ОбластьКартинки, Отклонение);
	
	Если Отклонение = 0 Тогда
		Динамика = 0;
	Иначе
		Динамика  = ?(Отклонение > 0, 2, 1);
	КонецЕсли;
	
	Если Динамика = 0 Тогда
		ОбластьТекста.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ИначеЕсли Динамика = 1 Тогда
		ОбластьКартинки.Картинка = БиблиотекаКартинок.ДосьеУменьшениеПоказателя;
		ОбластьТекста.ЦветТекста = ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
	ИначеЕсли Динамика = 2 Тогда
		ОбластьКартинки.Картинка = БиблиотекаКартинок.ДосьеУвеличениеПоказателя;
		ОбластьТекста.ЦветТекста = ЦветаСтиля.ДосьеХорошаяОценкаЦвет;
	КонецЕслИ;

КонецПроцедуры

&НаКлиентеНаСерверебезКонтекста
Функция ГруппировкаПоДоговорам()
	
	ГруппировкаОтчета = Новый Массив;
	ГруппировкаОтчета.Добавить(Новый Структура("Поле, Представление, Использование, ТипГруппировки", "Договор", "Договор", Истина, 0));
	Возврат ГруппировкаОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОтборПоКонтрагенту(Контрагент)

	Отборы = Новый Массив;
	
	Отборы.Добавить(Новый Структура("Поле, Значение, ВидСравнения","Контрагент", Контрагент, ВидСравненияКомпоновкиДанных.Равно));
	
	Возврат Отборы;
	
КонецФункции

&НаКлиентеНаСерверебезКонтекста
Функция ПользовательскиеНастройкиДляРасшифровки(Форма, Знач НачалоПериода = Неопределено, Знач КонецПериода = Неопределено)
	
	Если НачалоПериода = Неопределено Тогда
		НачалоПериода = НачалоМесяца(Форма.ТекущаяДата);
	КонецЕсли;
	
	Если КонецПериода = Неопределено Тогда
		КонецПериода = Форма.ТекущаяДата;
	КонецЕсли;
	
	// Инициализация пользовательских настроек
	// Добавим в настройки все параметры которые могут использоваться в отчетах руководителю
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки",	Истина);
	ДополнительныеСвойства.Вставить("Организация", 		Форма.Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода", 	НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода", 	КонецПериода);
	ДополнительныеСвойства.Вставить("Период", 			Форма.ТекущаяДата);
	
	Если Форма.ВариантОкругления = 1000 Тогда
		
		// Установим формат цифр для рублевых сумм
		УсловноеОформление = ПользовательскиеНастройки.Элементы.Добавить(Тип("УсловноеОформлениеКомпоновкиДанных"));
		УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Представление = НСтр("ru = 'Суммы в тыс.'");
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ЭлементУсловногоОформления.Оформление,"Формат", "ЧДЦ=; ЧС=3");
		ЭлементУсловногоОформления.Использование = Истина;
		
	КонецЕсли;
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчет(Отчет, ГруппировкаОтчета = Неопределено, Отборы = Неопределено, Показатели  = Неопределено, КлючВарианта = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено)

	ПользовательскиеНастройки = ПользовательскиеНастройкиДляРасшифровки(ЭтотОбъект, НачалоПериода, КонецПериода);
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	Если ГруппировкаОтчета <> Неопределено И ТипЗнч(ГруппировкаОтчета) = Тип("Массив") Тогда
		ДополнительныеСвойства.Вставить("Группировка", ГруппировкаОтчета);
	КонецЕсли;
	
	Если Отборы <> Неопределено И ТипЗнч(Отборы) = Тип("Массив") Тогда
		НастройкаОтбора = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		НастройкаОтбора.ИдентификаторПользовательскойНастройки = "Отбор";
		Для Каждого Отбор Из Отборы Цикл
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора, Отбор.Поле, Отбор.Значение, Отбор.ВидСравнения);
		КонецЦикла;
	КонецЕсли;
	
	Если Показатели <> Неопределено И ТипЗнч(Показатели) = Тип("Массив") Тогда
		
		Для Каждого Показатель Из Показатели Цикл
			ДополнительныеСвойства.Вставить(Показатель, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	Если КлючВарианта <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КлючВарианта", КлючВарианта);
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("РежимРасшифровки",          Истина);
	ПараметрыОтчета.Вставить("ВидРасшифровки",            2);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	ОткрытьФорму(Отчет, ПараметрыОтчета, ЭтотОбъект, Истина);

КонецПроцедуры

#КонецОбласти

#Область Баннер

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСледующийБаннер()
	
	// Поскольку обработчик может вызываться не только интерактивно пользователем,
	// но и автоматически по таймеру, меняем баннер при условии, что форма находится в фокусе.
	Если НЕ ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПредыдущийБаннер()
	
	УстановитьБаннер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер(ПоказатьПредыдущий = Ложь)
	
	// Чтобы на форме не было 2-х баннеров, не показываем персонализированное предложение,
	// пока пользователь не закроет баннер с предложением настроить монитор под себя.
	Если Элементы.ГруппаУведомлениеОНастройке.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ПолучитьБаннерНаСервере(ПоказатьПредыдущий);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннераВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияБаннераВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБаннерНаСервере(ПоказатьПредыдущий)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("Размещение", ПерсонализированныеПредложенияСервисов.ИмяРазмещенияМониторОсновныхПоказателей());
	СтруктураПараметров.Вставить("ПоказатьПредыдущий", ПоказатьПредыдущий);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПерсонализированныеПредложенияСервисов.ПолучитьБаннер",
		СтруктураПараметров,
		НастройкиЗапуска);
	
КонецФункции

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	ПерсонализированныеПредложенияСервисов.УстановитьБаннерНаФорме(ЭтотОбъект, АдресРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьБаннер()
	
	ПерсонализированныеПредложенияСервисов.ЗакрытьБаннер(ЭтотОбъект, Организация);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
