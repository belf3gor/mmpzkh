
#Область ВспомогательныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
// Управление элементами формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	// Если текущая ОС Linux и введено название компьютера, то могут возникнуть ошибки.
	Элементы.ПодсказакаДляОСLinux.Видимость = Форма.СерверНаLinuxПлатформе
											  И Не СЗК_ТиповыеМетодыКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(Форма.АдресСервераСЛКвСети, ".", ""));
	
	Если Форма.ОшибкаПолученияЛицензии Тогда
		Элементы.КартинкаПредупреждения.Картинка = БиблиотекаКартинок.СЗК_ПроверкаСОшибкой;
		Элементы.НадписьПредупреждения.Заголовок = Форма.ТекстСообщенияОбОшибке;
	Иначе
		Элементы.КартинкаПредупреждения.Картинка  = БиблиотекаКартинок.СЗК_ПроверкаУспешна;
		Элементы.НадписьПредупреждения.Заголовок = "Лицензия получена";
	КонецЕсли;
	
	// Для Базовой и НФР версии параметры сервера СЛК не нужны.
	Элементы.ГруппаНастройкиЛицензии.Видимость = Не Форма.ЭтоБазоваяNFRВерсия;
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает вариант связи в зависимости от значения константы СЗК_ПараметрыСвязи.
//
Процедура ПрочитатьПараметрыСвязи()
	
	СтрокаПараметровСвязи = НаборКонстант.СЗК_ПараметрыСвязи;
	
	АдресСервераСЛКвСети = ПолучитьНастройкуИзКонстанты("host=", СтрокаПараметровСвязи);
	СетевойПорт          = ПолучитьНастройкуИзКонстанты("port=", СтрокаПараметровСвязи);
	
КонецПроцедуры

&НаСервере
// Функция разбирает строковое значение константы и возвращает значение настройки.
//
// Параметры:
//  НазваниеНастройки - название настройки, значение которой нужно вернуть из строковй константы СЗК_ПараметрыСвязи.
//
Функция ПолучитьНастройкуИзКонстанты(НазваниеНастройки, СтрокаПараметровСвязи)
	
	ЗначениеНастройки = "";
	
	ПозицияНачалаНастройки = Найти(НРег(СтрокаПараметровСвязи), НазваниеНастройки);
	Если НЕ ПозицияНачалаНастройки = 0 Тогда
		СтрокаНастройки = Сред(СтрокаПараметровСвязи, ПозицияНачалаНастройки, СтрДлина(СтрокаПараметровСвязи) - ПозицияНачалаНастройки + 1);
		ПозицияКонцаНастройки = Найти(СтрокаНастройки, ";");
		ЗначениеНастройки = Сред(СтрокаНастройки, СтрДлина(НазваниеНастройки) + 1, ПозицияКонцаНастройки - СтрДлина(НазваниеНастройки) - 1);
	КонецЕсли;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

&НаСервере
// Функция выполняет проверку лицензии на сервере.
//
Процедура ПроверитьЛицензиюНаСервере()
	
	// Проверку лицензии из формы настроек выполняем с очисткой кэш
	// с помощью стандартной процедуры проверки лицензионного ключа.
	ОшибкаПолученияЛицензии = Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен(, Ложь, Истина, ТекстСообщенияОбОшибке);
	
	// Устаналиваем параметр лицензии "СЗК_ОшибкаПолученияЛицензииПриПоследнейПроверке",
	// как "Ложь", т.е. лицензия активная, при любом текущем состоянии.
	// Делается для того, чтобы каждый раз, когда лицензия неактивна, неоткрывалась форма, 
	// чтобы оповестить пользователя об этом, а открывалась,
	// когда лицензия неактивна и используемые объект требует лицензию. 
	// При использование объекта, для которого требуется лицензия, при изменениях объекта
	// после проверки лицензии по текущим параметрам (IP и порт), если возникнет ошибка,
	// то форма откроется.
	СЗК_ТиповыеМетоды.СброситьПоследнийРезультатПроверкиЛицензии();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Проверяем корректность ключа. Если ключ не корректен или возникли
	// какие-либо ошибки при проверке, то отражаем их в реквизите "ТекстСообщенияОбОшибке".
	ПроверитьЛицензиюНаСервере();
	
	ПрочитатьПараметрыСвязи();
	
	// Параметры системы, влияющие на СЛК.
	ЭтоБазоваяNFRВерсия    = СЗК_МодульЗащиты.ЭтоБазоваяNFRВерсия();
	СерверНаLinuxПлатформе = СЗК_ТиповыеМетоды.ЭтоСерверНаLinuxПлатформе();
	
	УправлениеФормой(ЭтаФорма);
	
	// Статьи на часто задаваемые вопросы по СЛК.
	СоздатьПредставлениеСсылокНаСтатьи();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	НаборКонстант.СЗК_ПараметрыСвязи = "host=" + АдресСервераСЛКвСети + ";" + "port=" + СетевойПорт + ";";
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПослеЗаписи" формы.
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "АдресСервераСЛКвСети".
Процедура АдресСервераСЛКвСетиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "ПроверитьЛицензию".
Процедура ПроверитьЛицензию(Команда)
	
	// Сбрасываем текст ошибки, дабы при повторной
	// проверке текст ошибки не дублировался.
	ТекстСообщенияОбОшибке = "";
	
	ЭтаФорма.Записать();
	
	Если Модифицированность Тогда
		СЗК_ТиповыеМетоды.СообщитьОбОшибке("Перед проверкой лицензии необходимо записать настройки!");
		Возврат;
	КонецЕсли;
	
	// Проверка лицензии.
	ПроверитьЛицензиюНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
	// Обновление состояния проверки.
	Состояние("Обновление состояния лицензии завершено.");
	
КонецПроцедуры

#КонецОбласти

#Область СтатьиНаПолезнуюИнформациюПоСЛК

&НаСервере
// Создает ссылки на статьи по СЛК на форме.
//
Процедура СоздатьПредставлениеСсылокНаСтатьи()
	
	ТаблицаСсылок = ПолучитьТаблицуСсылокНаСтатьи();
	
	НомерСсылки = 1;
	
	Для Каждого ТекСтр Из ТаблицаСсылок Цикл
		
		ИмяГруппы = "ГруппаСсылки" + НомерСсылки;
		
		ГруппаСсылкиНаСтатью = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаСсылокНаСтатьи);
		ГруппаСсылкиНаСтатью.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСсылкиНаСтатью.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаСсылкиНаСтатью.ОтображатьЗаголовок = Ложь;
		ГруппаСсылкиНаСтатью.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаСсылкиНаСтатью.РастягиватьПоВертикали = Ложь;
		
		ДекорацияМаркер = Элементы.Добавить("Маркер" + НомерСсылки, Тип("ДекорацияФормы"), Элементы[ИмяГруппы]);
		ДекорацияМаркер.Вид = ВидДекорацииФормы.Картинка;
		ДекорацияМаркер.Картинка = БиблиотекаКартинок.СЗК_МаркерСсылки;
		ДекорацияМаркер.Ширина = 2;
		ДекорацияМаркер.Высота = 1;
		
		// Добавляем гиперссылку для перехода к статье на сайте.
		НоваяСсылка = Элементы.Добавить("СсылкаНаСтатью" + НомерСсылки, Тип("ДекорацияФормы"), Элементы[ИмяГруппы]);
		НоваяСсылка.Заголовок          = ТекСтр.ИмяСтатьи;
		НоваяСсылка.Гиперссылка        = Истина;
		НоваяСсылка.УстановитьДействие("Нажатие", "ПерейтиПоСсылке");
		
		// Добавление соответствия ссылки и элемента формы в список значений.
		СоответствиеСсылокНаСтатьиИГиперссылокНаНих.Добавить("СсылкаНаСтатью" + НомерСсылки, ТекСтр.СсылкаНаСтатью);
		
		НомерСсылки = НомерСсылки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращают таблицу значений с ссылками и их наименованиями
// на статьи по СЛК из макета "СсылкиНаЧастоЗадаваемыеВопросы".
Функция ПолучитьТаблицуСсылокНаСтатьи()
	
	ТаблицаСсылок = Новый ТаблицаЗначений;
	ТаблицаСсылок.Колонки.Добавить("ИмяСтатьи",      Новый ОписаниеТипов("Строка"));
	ТаблицаСсылок.Колонки.Добавить("СсылкаНаСтатью", Новый ОписаниеТипов("Строка"));
	
	Макет = ПолучитьОбщийМакет("СЗК_СсылкиНаПолезнуюИнформациюПоСЛК");
	
	КоличествоСтрокВМакете = Макет.ВысотаТаблицы;
	НомерТекущейСтроки = 2;
	
	Пока НомерТекущейСтроки <= КоличествоСтрокВМакете Цикл
		
		// На случай того, если в макете пустая строка.
		Если ЗначениеЗаполнено(Макет.Область("R" + НомерТекущейСтроки + "C1").Текст) Тогда
			
			НоваяСтрока = ТаблицаСсылок.Добавить();
			НоваяСтрока.ИмяСтатьи      = Макет.Область("R" + НомерТекущейСтроки + "C1").Текст;
			НоваяСтрока.СсылкаНаСтатью = Макет.Область("R" + НомерТекущейСтроки + "C2").Текст;
			
		КонецЕсли;
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаСсылок;
	
КонецФункции

&НаКлиенте
// Обработчик события гиперссылки "Все статьи".
//
Процедура СсылкаВсеСтатьиНажатие(Элемент)
	
	ОткрытьСтатьюПолезнойИнформации("https://otr-soft.ru/faq/faq_common/");
	
КонецПроцедуры

&НаКлиенте
// Процедура - Обработчик события "Нажатие" на реквизиты, добавленные программно в событии "ПриСозданииНаСервере".
//
Процедура ПерейтиПоСсылке(Элемент)
	
	// Ищем ссылку на статью в соответствии элементов форм и ссылок.
	НайденноеСоответствие = СоответствиеСсылокНаСтатьиИГиперссылокНаНих.НайтиПоЗначению(Элемент.Имя);
	Если Не НайденноеСоответствие = Неопределено Тогда
		ОткрытьСтатьюПолезнойИнформации(НайденноеСоответствие.Представление);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура открывает статью часто задаваемых вопросов в браузере.
//
// Параметры:
//  ИнтернетАдрес - Строка - Интернет-адрес статьи часто задаваемых вопросов.
//
Процедура ОткрытьСтатьюПолезнойИнформации(ИнтернетАдрес)
	
	// Дополняем адрес страницы служебными параметрами.
	ДополнитьИнтернетАдресСлужебнымПараметром(ИнтернетАдрес, "utm_source=1c_programm");
	ДополнитьИнтернетАдресСлужебнымПараметром(ИнтернетАдрес, "utm_medium=special");
	ДополнитьИнтернетАдресСлужебнымПараметром(ИнтернетАдрес, "utm_campaign=1s_uchet_v_zhkh_redakciya_3.0");
	ДополнитьИнтернетАдресСлужебнымПараметром(ИнтернетАдрес, "utm_content=faq_section");
	
	Попытка
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗапускПриложенияЗавершение", ЭтотОбъект);
		НачатьЗапускПриложения(ОписаниеОповещения, ИнтернетАдрес);
		
	Исключение
		СЗК_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗапускПриложенияЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
// Процедура дополняет адрес интернет ресурса служебным параметром.
//
Процедура ДополнитьИнтернетАдресСлужебнымПараметром(ИнтернетАдрес, СлужебныйПараметр)
	
	// Добавим параметр к интернет адресу.
	ИнтернетАдрес = ИнтернетАдрес
				  + ПолучитьРазделительСледующегоПараметраИнтернетАдреса(ИнтернетАдрес) // разделитель
				  + СлужебныйПараметр; // параметр
	
КонецПроцедуры // ДополнитьИнтернетАдресСлужебнымПараметром()

&НаКлиенте
// Функция возвращает символ-разделитель следующего параметра интернет-адреса.
//   Возвращаемое значение:
//     "?" - если параметров в адресной строке еще нет;
//     "&" - если параметры в адресной строке уже есть.
//
Функция ПолучитьРазделительСледующегоПараметраИнтернетАдреса(ИнтернетАдрес)
	
	РазделительПараметра = "?";
	
	ПараметрыАдресаОпределен = (Найти(ИнтернетАдрес, "?") > 0);
	Если ПараметрыАдресаОпределен Тогда
		РазделительПараметра = "&";
	КонецЕсли;
	
	Возврат РазделительПараметра;
	
КонецФункции

#КонецОбласти
