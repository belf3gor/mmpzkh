
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Сертификат = Параметры.Сертификат;
	Свойства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сертификат,
		"ДанныеСертификата, УсиленнаяЗащитаЗакрытогоКлюча, Пользователь, Добавил, Программа");
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Свойства);
	ДанныеСертификата = ДанныеСертификата.Получить();
	
	Если УсиленнаяЗащитаЗакрытогоКлюча Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПрограммыБанков.ПрограммаБанка
			|ИЗ
			|	РегистрСведений.СведенияОСертификатахОбменСБанками КАК ПрограммыБанков
			|ГДЕ
			|	ПрограммыБанков.СертификатЭП = &СертификатЭП";
		
		Запрос.УстановитьПараметр("СертификатЭП", Сертификат);
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		ПрограммаБанка = Неопределено;
		Пока Выборка.Следующий() Цикл
			ПрограммаБанка = Выборка.ПрограммаБанка;
		КонецЦикла;
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(Программа) ИЛИ ЗначениеЗаполнено(ПрограммаБанка)) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПравоЗаписиПароля = ЕстьПравоЗаписиПароля();
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Сертификат,"ПаролиСертификатов");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТипЗнч(Данные) <> Тип("Соответствие") Тогда
		Данные = Новый Соответствие;
	КонецЕсли;
	
	Пользователь = Пользователи.ТекущийПользователь();
	Пароль = Данные.Получить(Пользователь);
	
	Если НЕ ЗначениеЗаполнено(Пароль) Тогда   
		Пользователь = Справочники.Пользователи.ПустаяСсылка();
		Пароль = Данные.Получить(Пользователь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пароль) Тогда
		ПарольУстановлен = Истина;
		Пароль = "********";
	Иначе
		Пользователь = Пользователи.ТекущийПользователь();
		ПарольУстановлен = Ложь;
	КонецЕсли;
	
	Элементы.ФормаУдалитьПароль.Доступность = ПарольУстановлен;
	УстановитьЗаголовокНадписиИПометкуКомандыДоступенВсем();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если УсиленнаяЗащитаЗакрытогоКлюча Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'У сертификата установлена усиленная защита закрытого ключа.
			           |В таком случае пароль запрашивает программа электронной подписи и шифрования,
			           |а программа 1С:Предприятия должна передать пустой пароль, чтобы не было ошибки.
			           |
			           |Запоминание и запись пароля невозможны.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(Программа) ИЛИ ЗначениеЗаполнено(ПрограммаБанка)) Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'У сертификата не указана программа для закрытого ключа.
			           |Невозможно проверить пароль перед записью.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьПравоЗаписиПароля Тогда
		ПоказатьПредупреждение(, ОписаниеОшибкиПраваДоступа());
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ПарольИзменен = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УдалитьПароль(Команда)
	
	УдалитьПарольНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПароль(Команда)
	
	Если Не ЗначениеЗаполнено(Пароль) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Поле ""Пароль"" не заполнено'"));
		Возврат; 
	КонецЕсли;
	
	ПроверитьПароль();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПарольПослеПроверки(Результат, ОписаниеОшибки)
	
	Если Результат Тогда
		ЗаписатьПарольНаСервере();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПоказатьПредупреждение(, СокрЛП(ОписаниеОшибки));
	КонецЕсли;
	
	Если Результат Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольДоступенВсем(Команда)
	
	ПарольДоступенВсемНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УдалитьПарольНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Сертификат,"ПаролиСертификатов");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Элементы.ФормаУдалитьПароль.Доступность = Ложь;
	Пользователь = Пользователи.ТекущийПользователь();
	Пароль = "";
	ПарольИзменен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПароль()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПарольПослеПолученияМенеджераКриптографии", ЭтотОбъект);
	ПроверитьНаСторонеКлиента(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПарольПослеПолученияМенеджераКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОшибки = "";
	Если ТипЗнч(Результат) = Тип("МенеджерКриптографии") Тогда
		ОбработчикПроверкиПодписания = Новый ОписаниеОповещения("ЗакончитьПроверкуПодписания", ЭтотОбъект);
		НачатьПроверкуПодписания(Результат, ОбработчикПроверкиПодписания);
		Возврат;
	Иначе
		Успех = Ложь;
		ОписаниеОшибки = Результат;
	КонецЕсли;
	
	ЗаписатьПарольПослеПроверки(Успех, ОписаниеОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуПодписания(МенеджерКриптографии, ОбработчикПроверкиПодписания)
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	ПараметрыОбработки.Вставить("Обработчик", ОбработчикПроверкиПодписания);
	
	ОбработчикЗавершенияИнициализации = Новый ОписаниеОповещения(
		"ЗакончитьИнициализациюСертификатаДляПроверкиПодписания", ЭтотОбъект, ПараметрыОбработки);
	
	СертификатДляПроверки = Новый СертификатКриптографии;
	СертификатДляПроверки.НачатьИнициализацию(ОбработчикЗавершенияИнициализации, ДанныеСертификата);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьИнициализациюСертификатаДляПроверкиПодписания(СертификатДляПроверки, ДополнительныеПараметры) Экспорт 
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("Обработчик", ДополнительныеПараметры.Обработчик);
	
	ОбработчикЗавершенияПодписывания = Новый ОписаниеОповещения(
		"ЗакончитьПроверочноеПодписывание", ЭтотОбъект, ПараметрыОбработки, "ЗакончитьПроверочноеПодписываниеОшибка", ЭтотОбъект);
	
	МенеджерКриптографии = ДополнительныеПараметры.МенеджерКриптографии;
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	МенеджерКриптографии.НачатьПодписывание(ОбработчикЗавершенияПодписывания, ДанныеСертификата, СертификатДляПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПроверочноеПодписывание(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		Если ДополнительныеПараметры.Свойство("Обработчик") Тогда
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Обработчик, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПроверочноеПодписываниеОшибка(ОписаниеОшибки, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		Если ДополнительныеПараметры.Свойство("Обработчик") Тогда
			
			СтандартнаяОбработка = Ложь;
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Обработчик, ОписаниеОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПроверкуПодписания(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ИнформацияОбОшибке") Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось пройти проверку подписания с помощью программы %1 по причине:'"), Программа)
			+ Символы.ПС + КраткоеПредставлениеОшибки(Результат);
		ЗаписатьПарольПослеПроверки(Ложь, ТекстОшибки);
	Иначе
		ЗаписатьПарольПослеПроверки(Истина, "");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПарольНаСервере()
	
	Если Не ЕстьПравоЗаписиПароля() Тогда
		ВызватьИсключение ОписаниеОшибкиПраваДоступа();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Сертификат,"ПаролиСертификатов");
		Если ТипЗнч(Данные) <> Тип("Соответствие") ИЛИ Не ЗначениеЗаполнено(Пользователь) Тогда
			Данные = Новый Соответствие;
		КонецЕсли;
		Если ПарольИзменен ИЛИ НЕ ЗначениеЗаполнено(Пароль) Тогда
			Данные.Вставить(Пользователь,Пароль);
		Иначе
			СохраненныйПароль = Данные.Получить(Пользователь);
			Если НЕ ЗначениеЗаполнено(СохраненныйПароль) Тогда
				
				ВызватьИсключение НСтр("ru = 'Введите пароль повторно.'");
			КонецЕсли;
		КонецЕсли;
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Сертификат,Данные,"ПаролиСертификатов");
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Элементы.ФормаУдалитьПароль.Доступность = Истина;
	Пароль = "********";
	ПарольИзменен = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЕстьПравоЗаписиПароля()
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Свойства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сертификат, "Пользователь, Добавил");
	Если Свойства.Добавил = Пользователи.ТекущийПользователь()
	 Или Свойства.Пользователь = Пользователи.ТекущийПользователь() Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеОшибкиПраваДоступа()
	
	Возврат
		НСтр("ru = 'Недостаточно прав для записи пароля.
		           |
		           |Запись пароля может сделать пользователь, указанный в полях
		           |сертификата ""Пользователь"" и ""Добавил"" или администратор.'");
	
КонецФункции

&НаСервере
Процедура ПарольДоступенВсемНаСервере()
	
	Если Элементы.ПользователиПароляДоступенВсем.Пометка Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	Иначе
		Пользователь = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	УстановитьЗаголовокНадписиИПометкуКомандыДоступенВсем();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокНадписиИПометкуКомандыДоступенВсем()
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Элементы.НадписьДоступенПользователю.Заголовок = НСтр("ru = 'Пароль доступен пользователю:'")
			+ " " + Пользователь;
	Иначе
		Элементы.НадписьДоступенПользователю.Заголовок = НСтр("ru = 'Пароль доступен всем пользователям.'")
	КонецЕсли;
	Элементы.ПользователиПароляДоступенВсем.Пометка = НЕ ЗначениеЗаполнено(Пользователь);
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьНаСторонеКлиента(Оповещение)
	
	Контекст = Новый Структура("Оповещение", Оповещение);
	
	НачатьПодключениеРасширенияРаботыСКриптографией(Новый ОписаниеОповещения(
		"ПроверитьНаСторонеКлиентаПослеПодключенияРасширенияРаботыСКриптографией", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПроверитьНаСторонеКлиента.
&НаКлиенте
Процедура ПроверитьНаСторонеКлиентаПослеПодключенияРасширенияРаботыСКриптографией(Подключено, Контекст) Экспорт
	
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
			"ПроверитьПарольПослеПолученияМенеджераКриптографии", ЭтотОбъект, Контекст),
		"ПроверкаСертификата", Истина, Программа);
	
КонецПроцедуры

#КонецОбласти
