#Область ОписаниеПеременных

&НаКлиенте
Перем ИсторияПолучателей;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	РезультатУспехЦвет = ЦветаСтиля.РезультатУспехЦвет;
	
	ВложенияДляПисьма = Новый Структура;
	
	Если ТипЗнч(Параметры.Вложения) = Тип("СписокЗначений") Или ТипЗнч(Параметры.Вложения) = Тип("Массив") Тогда
		Для Каждого Вложение Из Параметры.Вложения Цикл
			ОпределитьНазначениеВложенияПисьма(Вложение, ВложенияДляПисьма);
		КонецЦикла;
	КонецЕсли;
	
	ТемаПисьма = Параметры.Тема;
	ТелоПисьма.УстановитьHTML(ТекстВHTML(Параметры.Текст), ВложенияДляПисьма);
	АдресОтвета = Параметры.АдресОтвета;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Отправитель) Тогда
		// Учетная запись не передана - выбираем первую доступную.
		ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
		Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не обнаружены доступные учетные записи электронной почты, обратитесь к администратору системы.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецЕсли;
		
		УчетнаяЗапись = ДоступныеУчетныеЗаписи[0].Ссылка;
		
	ИначеЕсли ТипЗнч(Параметры.Отправитель) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		УчетнаяЗапись = Параметры.Отправитель;
	ИначеЕсли ТипЗнч(Параметры.Отправитель) = Тип("СписокЗначений") Тогда
		НаборУчетныхЗаписей = Параметры.Отправитель;
		
		Если НаборУчетныхЗаписей.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не указаны учетные записи для отправки сообщения, обратитесь к администратору системы.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;
		
		Для Каждого ЭлементУчетнаяЗапись Из НаборУчетныхЗаписей Цикл
			Элементы.УчетнаяЗапись.СписокВыбора.Добавить(
										ЭлементУчетнаяЗапись.Значение,
										ЭлементУчетнаяЗапись.Представление);
			Если ЭлементУчетнаяЗапись.Значение.ИспользоватьДляПолучения Тогда
				АдресаОтветаПоУчетнымЗаписям.Добавить(ЭлементУчетнаяЗапись.Значение,
														ПолучитьПочтовыйАдресПоУчетнойЗаписи(ЭлементУчетнаяЗапись.Значение));
			КонецЕсли;
		КонецЦикла;
		
		Элементы.УчетнаяЗапись.СписокВыбора.СортироватьПоПредставлению();
		УчетнаяЗапись = НаборУчетныхЗаписей[0].Значение;
		
		// Для переданного списка учетных записей выбираем их из списка выбора.
		Элементы.УчетнаяЗапись.КнопкаВыпадающегоСписка = Истина;
	КонецЕсли;
	
	ДобавитьАдресаПолучателей(Параметры.Получатель);
	
	АдресВременногоХранилищаПолучателейИнформационнойБазы = ПоместитьВоВременноеХранилище(Параметры.Получатель, УникальныйИдентификатор);
	
	Если ТипЗнч(Параметры.Получатель) = Тип("Массив") Тогда
		Если ТипЗнч(Параметры.Получатель) = Тип("Строка") Тогда
			ЗаполнитьТаблицуПолучателейИзСтроки(Параметры.Получатель);
		ИначеЕсли ТипЗнч(Параметры.Получатель) = Тип("СписокЗначений") Тогда
			ПолучателиСообщения = (Параметры.Получатель);
		ИначеЕсли ТипЗнч(Параметры.Получатель) = Тип("Массив") Тогда
			ЗаполнитьТаблицуПолучателейИзМассиваСтруктур(Параметры.Получатель);
		КонецЕсли;
	КонецЕсли;
	
	Если ПочтовыеАдресаПолучателей.Количество() = 0 Тогда
		НоваяСтрока                 = ПочтовыеАдресаПолучателей.Добавить();
		НоваяСтрока.ВариантОтправки = НСтр("ru='Кому:'");
		НоваяСтрока.Представление   = "";
	КонецЕсли;
	
	// Получаем список адресов, которые пользователь использовал ранее.
	СписокАдресовОтвета = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РедактированиеНовогоПисьма", "СписокАдресовОтвета");
	
	Если СписокАдресовОтвета <> Неопределено И СписокАдресовОтвета.Количество() > 0 Тогда
		Для Каждого ЭлементаАдресОтвета Из СписокАдресовОтвета Цикл
			Элементы.АдресОтвета.СписокВыбора.Добавить(ЭлементаАдресОтвета.Значение, ЭлементаАдресОтвета.Представление);
		КонецЦикла;
		
		Элементы.АдресОтвета.КнопкаВыпадающегоСписка = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресОтвета) Тогда
		АвтоматическаяПодстановкаАдресаОтвета = Ложь;
	Иначе
		Если УчетнаяЗапись.ИспользоватьДляПолучения Тогда
			// Устанавливаем почтовый адрес по умолчанию.
			Если ЗначениеЗаполнено(УчетнаяЗапись.ИмяПользователя) Тогда 
				АдресОтвета = УчетнаяЗапись.ИмяПользователя + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + ">";
			Иначе
				АдресОтвета = УчетнаяЗапись.АдресЭлектроннойПочты;
			КонецЕсли;
		КонецЕсли;
		
		АвтоматическаяПодстановкаАдресаОтвета = Истина;
	КонецЕсли;
	
	Параметры.Свойство("АдресПолучателяСкрытойКопии", АдресПолучателяСкрытойКопииИзНастроек);
	
	ЗаполнитьПараметрыФаксимилеПриСозданииНаСервере();
	
	ЗаполнитьПараметрыШаблоновПисьмаПриЗапуске();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.ОбщаяФорма.ОтправкаСообщенияБП",
		"Форма",
		НСтр("ru='Новости: Работа с электронной почтой'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// СтандартныеПодсистемы.ШаблоныСообщений
	
	Элементы.ФормаСформироватьПоШаблону.Видимость = Ложь;
	Элементы.ФормаСохранитьКакШаблон.Видимость    = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений")Тогда
		МодульШаблоныСообщенийСлужебный = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщенийСлужебный");
		
		Если МодульШаблоныСообщенийСлужебный.ИспользуютсяШаблоныСообщений() Тогда
			Элементы.ФормаСформироватьПоШаблону.Видимость = МодульШаблоныСообщенийСлужебный.ЕстьДоступныеШаблоны("Письмо");
			Элементы.ФормаСохранитьКакШаблон.Видимость    = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Конец СтандартныеПодсистемы.ШаблоныСообщений
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	ЗагрузитьВложенияИзФайлов();
	ОбновитьПредставлениеВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не ТребуетсяПодтверждениеЗакрытияФормы Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПоказатьВопросПередЗакрытиемФормы", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если Не ЗавершениеРаботы Тогда
		АдресаВложений = Новый Массив;
		Для Каждого Вложение Из Вложения Цикл
			АдресаВложений.Добавить(Вложение.АдресВоВременномХранилище);
		КонецЦикла;
		ОчиститьВложения(АдресаВложений);
		ПриЗакрытииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаВыбораПолучателейПисьма" Тогда
		ЗаполнитьАдресаПолучателей(ВыбранноеЗначение.Получатели, ВыбранноеЗначение.ОтправлятьСкрытыеКопии);
		ТекущийЭлемент = Элементы.ПочтовыеАдресаПолучателей;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборШаблонаПисьма" Тогда
		Результат = Новый Структура;
		Результат.Вставить("Тема", ВыбранноеЗначение.Представление);
		Результат.Вставить("Текст", ВыбранноеЗначение.Значение);
		Результат.Вставить("Вложения", Новый Структура);
		Результат.Вставить("Получатель", Неопределено);
		ЗаполнитьПоШаблонуПослеВыбораШаблона(Результат, Неопределено);
		ТекущийЭлемент = Элементы.ТемаПисьма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УправлениеПечатьюБПКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Подставляет адрес ответа, если флаг автоматической подстановки ответа установлен.
//
&НаКлиенте
Процедура УчетнаяЗаписьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ПустаяСтрока(АдресОтвета) Тогда
		АвтоматическаяПодстановкаАдресаОтвета = Истина;
	КонецЕсли;
	
	Если АвтоматическаяПодстановкаАдресаОтвета Тогда
		Если АдресаОтветаПоУчетнымЗаписям.НайтиПоЗначению(ВыбранноеЗначение) <> Неопределено Тогда
			АдресОтвета = АдресаОтветаПоУчетнымЗаписям.НайтиПоЗначению(ВыбранноеЗначение).Представление;
		Иначе
			АдресОтвета = ПолучитьПочтовыйАдресПоУчетнойЗаписи(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакМодифицированностиФормы(Элемент)
	ТребуетсяПодтверждениеЗакрытияФормы = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПодписьИПечатьПриИзменении(Элемент)
	
	Если ВложенияПодписьИПечать.Количество() = 0 Тогда
		ПодписьИПечатьПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПочтовыеАдресаПолучателей

&НаКлиенте
Процедура ПочтовыйАдресаПолучателейПередУдалением(Элемент, Отказ)
	
	Если ПочтовыеАдресаПолучателей.Количество() = 1 Тогда
		Отказ = Истина;
		ПочтовыеАдресаПолучателей[0].Представление = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресаПолучателейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВариантОтправки = Элементы.ПочтовыйАдресПолучателейВариантОтправки.СписокВыбора.НайтиПоЗначению("Кому:");
		Элемент.ТекущийЭлемент                = Элементы.ПочтовыйАдресПолучателейПредставление;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресПолучателейПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ПолучателиСообщения.Количество() = 0 Тогда
		ДанныеВыбора = ПохожиеПолучателиИзИстории(Текст);
	Иначе
		ДанныеВыбора = ПохожиеПолучателиИзСпискаПереданных(Текст);
	КонецЕсли;
	
	СтандартнаяОбработка = ДанныеВыбора.Количество() = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресаПолучателейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Адрес = ПочтовыйАдресИзПредставления(ДанныеСтроки.Представление);
	
	Если ПустаяСтрока(Адрес) Тогда
		Адрес = ДанныеСтроки.Представление;
	КонецЕсли;
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(Адрес, "@") = 0 ИЛИ СтрНайти(Адрес, ".") = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо ввести адрес электронной почты'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Дубли = Новый Соответствие;
	Для каждого ПолучательПисьма Из ПочтовыеАдресаПолучателей Цикл
		АдресПочты = ПочтовыйАдресИзПредставления(ПолучательПисьма.Представление);
		Если Дубли[ВРег(АдресПочты)] = Неопределено Тогда
			Дубли.Вставить(ВРег(АдресПочты), Истина);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Такой адрес электронной почты уже есть в списке.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

// Удаляет вложение из списка, а так же вызывает функцию
// обновления таблицы представления вложений.
//
&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	НаименованиеВложения = Элемент.ТекущиеДанные[Элемент.ТекущийЭлемент.Имя];
	
	Для Каждого Вложение Из Вложения Цикл
		Если Вложение.Представление = НаименованиеВложения Тогда
			Вложения.Удалить(Вложение);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПредставлениеВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьФайлВоВложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияПеретаскиваниеЗавершение", ЭтотОбъект, Новый Структура("Имя", ПараметрыПеретаскивания.Значение.Имя));
		НачатьПомещениеФайла(ОписаниеОповещения, , ПараметрыПеретаскивания.Значение.ПолноеИмя, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОтветаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	АвтоматическаяПодстановкаАдресаОтвета = Ложь;
	АдресОтвета = ПолучитьПриведенныйПочтовыйАдресВФормате(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОтветаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоматическаяПодстановкаАдресаОтвета = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОтветаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	АктуализироватьАдресОтветаВХранимомСписке(АдресОтвета, Ложь);
	
	Для Каждого ЭлементаАдресОтвета Из Элементы.АдресОтвета.СписокВыбора Цикл
		Если ЭлементаАдресОтвета.Значение = АдресОтвета
		   И ЭлементаАдресОтвета.Представление = АдресОтвета Тогда
			Элементы.АдресОтвета.СписокВыбора.Удалить(ЭлементаАдресОтвета);
		КонецЕсли;
	КонецЦикла;
	
	АдресОтвета = "";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	ОткрытьВложение();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмо()
	
	ОчиститьСообщения();
	
	Если ПоляЗаполненыКорректно() И ОтправитьПочтовоеСообщение() Тогда
		СохранитьАдресОтвета(АдресОтвета);
		ТребуетсяПодтверждениеЗакрытияФормы = Ложь;
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Сообщение отправлено:'"), ,
			?(ПустаяСтрока(ТемаПисьма), НСтр("ru = '<Без темы>'"), ТемаПисьма), БиблиотекаКартинок.Информация32);
			
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПоляЗаполненыКорректно()
	Результат = Истина;
	
	Если ПочтовыеАдресаПолучателей.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Необходимо заполнить получателя письма'"), , "ПочтовыеАдресаПолучателей");
		Результат = Ложь;
	КонецЕсли;
	Для каждого ПолучательПочты Из ПочтовыеАдресаПолучателей Цикл
		Адрес = ПочтовыйАдресИзПредставления(ПолучательПочты.Представление);
		Если ПустаяСтрока(Адрес) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Необходимо заполнить получателя письма'"),, "ПочтовыеАдресаПолучателей[" + Формат(ПочтовыеАдресаПолучателей.Индекс(ПолучательПочты), "ЧГ=0") + "].Представление");
			Результат = Ложь;
		ИначеЕсли СтрНайти(Адрес, "@") = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Неверный адрес электронной почты'"),, "ПочтовыеАдресаПолучателей[" + Формат(ПочтовыеАдресаПолучателей.Индекс(ПолучательПочты), "ЧГ=0") + "].Представление");
			Результат = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриложитьФайлВыполнить()
	
	ДобавитьФайлВоВложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПолучателей(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ВариантОтправки", ВариантОтправкиПоПолучателям());
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораПолучателейПисьма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ШаблоныСообщений

&НаКлиенте
Процедура СформироватьПоШаблону(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		МодульШаблоныСообщенийКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШаблоныСообщенийКлиент");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПослеВыбораШаблона", ЭтотОбъект);
		МодульШаблоныСообщенийКлиент.ПодготовитьСообщениеПоШаблону("Общий", "Письмо", Оповещение);
	КонецЕсли
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОтправитьПочтовоеСообщение()
	ПараметрыПисьма = СформироватьПараметрыПисьма();
	Если ПараметрыПисьма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
	ДобавитьПолучателейВИсторию(ПараметрыПисьма.Кому);
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПочтовыйАдресПоУчетнойЗаписи(Знач УчетнаяЗапись)
	
	Возврат СокрЛП(УчетнаяЗапись.ИмяПользователя)
			+ ? (ПустаяСтрока(СокрЛП(УчетнаяЗапись.ИмяПользователя)),
					УчетнаяЗапись.АдресЭлектроннойПочты,
					" <" + УчетнаяЗапись.АдресЭлектроннойПочты + ">");
	
КонецФункции

&НаКлиенте
Процедура ОткрытьВложение()
	
	ВыбранноеВложение = ВыбранноеВложение();
	Если ВыбранноеВложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ПолучитьФайл(ВыбранноеВложение.АдресВоВременномХранилище, ВыбранноеВложение.Представление, Истина);
	#Иначе
		ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ИмяВременнойПапки);
		
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ВыбранноеВложение.Представление;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранноеВложение.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		Файл = Новый Файл(ИмяВременногоФайла);
		Файл.УстановитьТолькоЧтение(Истина);
		Если Файл.Расширение = ".mxl" Тогда
			ТабличныйДокумент = ПолучитьТабличныйДокументПоДвоичнымДанным(ВыбранноеВложение.АдресВоВременномХранилище);
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ИмяДокумента", ВыбранноеВложение.Представление);
			ПараметрыОткрытия.Вставить("ТабличныйДокумент", ТабличныйДокумент);
			ПараметрыОткрытия.Вставить("ПутьКФайлу", ИмяВременногоФайла);
			ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия, ЭтотОбъект);
		Иначе
			ОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра(ИмяВременногоФайла);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранноеВложение()
	
	Результат = Неопределено;
	
	Если ПодписьИПечатьБП Тогда
		ТаблицаВложений = ВложенияПодписьИПечать;
	Иначе
		ТаблицаВложений = Вложения;
	КонецЕсли;
	
	Если Элементы.Вложения.ТекущиеДанные <> Неопределено Тогда
		
		НаименованиеВложения = Элементы.Вложения.ТекущиеДанные[Элементы.Вложения.ТекущийЭлемент.Имя];
		Для Каждого Вложение Из ТаблицаВложений Цикл
			Если Вложение.Представление = НаименованиеВложения Тогда
				Результат = Вложение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Результат = Неопределено И ПодписьИПечатьБП Тогда
			Если Элементы.Вложения.ТекущиеДанные <> Неопределено Тогда
				НаименованиеВложения = Элементы.Вложения.ТекущиеДанные[Элементы.Вложения.ТекущийЭлемент.Имя];
				Для Каждого Вложение Из Вложения Цикл
					Если Вложение.Представление = НаименованиеВложения Тогда
						Результат = Вложение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументПоДвоичнымДанным(Знач ДвоичныеДанные)
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("Строка") Тогда
		// Передан адрес двоичных данных во временном хранилище.
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДвоичныеДанные);
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяФайла);
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение табличного документа'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьФайлВоВложения()
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьФайлВоВложенияПриПомещенииФайлов", ЭтотОбъект);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(Оповещение, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлВоВложенияПриПомещенииФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДобавитьФайлыВСписок(ПомещенныеФайлы);
	ОбновитьПредставлениеВложений();
	ТребуетсяПодтверждениеЗакрытияФормы = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлыВСписок(ПомещенныеФайлы)
	
	Для Каждого ОписаниеФайла Из ПомещенныеФайлы Цикл
		Файл = Новый Файл(ОписаниеФайла.Имя);
		Вложение = Вложения.Добавить();
		Вложение.Представление = Файл.Имя;
		Вложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение), УникальныйИдентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеВложений()
	
	ПредставлениеВложений.Очистить();
	
	Индекс = 0;
	
	Для Каждого Вложение Из Вложения Цикл
		Если Индекс = 0 Тогда
			СтрокаПредставления = ПредставлениеВложений.Добавить();
		КонецЕсли;
		
		СтрокаПредставления["Вложение" + Строка(Индекс + 1)] = Вложение.Представление;
		
		Индекс = Индекс + 1;
		Если Индекс = 2 Тогда 
			Индекс = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет возможность отправления письма и если
// это возможно - формирует параметры отправки.
//
&НаСервере
Функция СформироватьПараметрыПисьма()
	
	ПараметрыПисьма = Новый Структура;
	Кому = Новый Массив;
	Копии = Новый Массив;
	СкрытыеКопии = Новый Массив;
	
	Для каждого Получатель Из ПочтовыеАдресаПолучателей Цикл
		ПочтаПолучателей = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(Получатель.Представление);
		Для каждого ПочтаПолучателя Из ПочтаПолучателей Цикл
			Если Получатель.ВариантОтправки = НСтр("ru = 'Скрытая копия:'") Тогда
				СкрытыеКопии.Добавить(Новый Структура("Адрес, Представление", ПочтаПолучателя.Адрес, ПочтаПолучателя.Псевдоним));
			ИначеЕсли Получатель.ВариантОтправки = НСтр("ru = 'Копия:'") Тогда
				Копии.Добавить(Новый Структура("Адрес, Представление", ПочтаПолучателя.Адрес, ПочтаПолучателя.Псевдоним));
			Иначе
				Кому.Добавить(Новый Структура("Адрес, Представление", ПочтаПолучателя.Адрес, ПочтаПолучателя.Псевдоним));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(АдресПолучателяСкрытойКопииИзНастроек) Тогда
		СписокПолучателейСкрытойКопии = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(
			АдресПолучателяСкрытойКопииИзНастроек);
		Для Каждого Получатель Из СписокПолучателейСкрытойКопии Цикл
			Если Не ПустаяСтрока(Получатель.ОписаниеОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Получатель.ОписаниеОшибки);
				Возврат Неопределено;
			КонецЕсли;
			СкрытыеКопии.Добавить(Новый Структура("Адрес, Представление", Получатель.Адрес, Получатель.Псевдоним));
		КонецЦикла;
	КонецЕсли;
	
	Если Кому.Количество() > 0 Тогда
		ПараметрыПисьма.Вставить("Кому", Кому);
	КонецЕсли;
	Если Копии.Количество() > 0 Тогда
		ПараметрыПисьма.Вставить("Копии", Копии);
	КонецЕсли;
	Если СкрытыеКопии.Количество() > 0 Тогда
		ПараметрыПисьма.Вставить("СкрытыеКопии", СкрытыеКопии);
	КонецЕсли;
	
	СписокПолучателей = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(АдресОтвета);
	Кому = Новый Массив;
	Для Каждого Получатель Из СписокПолучателей Цикл
		Если Не ПустаяСтрока(Получатель.ОписаниеОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Получатель.ОписаниеОшибки, , "АдресОтвета");
			Возврат Неопределено;
		КонецЕсли;
		Кому.Добавить(Новый Структура("Адрес, Представление", Получатель.Адрес, Получатель.Псевдоним));
	КонецЦикла;
	
	Если ЗначениеЗаполнено(АдресОтвета) Тогда
		ПараметрыПисьма.Вставить("АдресОтвета", АдресОтвета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТемаПисьма) Тогда
		ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресВременногоХранилищаПолучателейИнформационнойБазы) Тогда
		ПолучателиСообщенияИнформационнойБазы = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаПолучателейИнформационнойБазы);
		ПараметрыПисьма.Вставить("ПолучателиСообщения", ПолучателиСообщенияИнформационнойБазы);
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
	ПараметрыПисьма.Вставить("Вложения", Вложения());
	
	Возврат ПараметрыПисьма;
	
КонецФункции

&НаСервере
Функция ТекстВHTML(Текст)
	
	Если СтрНайти(НРег(Текст), "</html>", НаправлениеПоиска.СКонца) > 0 Тогда
		Возврат Текст;
	КонецЕсли;
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(Текст) Цикл
		Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
		
		ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
		ЭлементТело.ДобавитьДочерний(ЭлементБлок);
		
		ЭлементТекст = ДокументHTML.СоздатьТекстовыйУзел(Строка);
		ЭлементБлок.ДобавитьДочерний(ЭлементТекст);
	КонецЦикла;
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	Результат = ЗаписьHTML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Вложения()
	
	Результат = Новый Массив;
	Для Каждого Вложение Из Вложения Цикл
		
		Представление             = Вложение.Представление;
		Кодировка                 = Вложение.Кодировка;
		АдресВоВременномХранилище = Вложение.АдресВоВременномХранилище;
		Идентификатор             = Вложение.Идентификатор;
		
		Если ПодписьИПечатьБП Тогда
			Для Каждого ВложениеПодписьИПечать Из ЭтотОбъект.ВложенияПодписьИПечать Цикл
				Если ВложениеПодписьИПечать.Представление = Представление Тогда
					АдресВоВременномХранилище = ВложениеПодписьИПечать.АдресВоВременномХранилище;
					Идентификатор             = ВложениеПодписьИПечать.Идентификатор;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОписаниеВложения = Новый Структура;
		ОписаниеВложения.Вставить("Представление",             Представление);
		ОписаниеВложения.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		ОписаниеВложения.Вставить("Кодировка",                 Кодировка);
		ОписаниеВложения.Вставить("Идентификатор",             Идентификатор);
		Результат.Добавить(ОписаниеВложения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОпределитьНазначениеВложенияПисьма(Вложение, ВложенияДляПисьма)
	
	Если Вложение.Свойство("Идентификатор") И ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
		КартинкаВложение = Новый Картинка(ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище));
		ВложенияДляПисьма.Вставить(Вложение.Представление, КартинкаВложение);
	Иначе
		ОписаниеВложения = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(ОписаниеВложения, Вложение);
		Если Не ПустаяСтрока(ОписаниеВложения.АдресВоВременномХранилище) Тогда
			ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
			ПолучитьИзВременногоХранилища(ОписаниеВложения.АдресВоВременномХранилище), УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Добавляет адрес ответа в список сохраняемых значений.
//
&НаСервереБезКонтекста
Функция СохранитьАдресОтвета(Знач АдресОтвета)
	
	АктуализироватьАдресОтветаВХранимомСписке(АдресОтвета);
	
КонецФункции

// Добавляет адрес ответа в список сохраняемых значений.
//
&НаСервереБезКонтекста
Функция АктуализироватьАдресОтветаВХранимомСписке(Знач АдресОтвета,
                                                   Знач ДобавлятьАдресВСписок = Истина)
	
	// Получаем список адресов, которые пользователь использовал ранее.
	СписокАдресовОтвета = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РедактированиеНовогоПисьма",
		"СписокАдресовОтвета");
	
	Если СписокАдресовОтвета = Неопределено Тогда
		СписокАдресовОтвета = Новый СписокЗначений();
	КонецЕсли;
	
	Для Каждого ЭлементАдресОтвета Из СписокАдресовОтвета Цикл
		Если ЭлементАдресОтвета.Значение = АдресОтвета
		   И ЭлементАдресОтвета.Представление = АдресОтвета Тогда
			СписокАдресовОтвета.Удалить(ЭлементАдресОтвета);
		КонецЕсли;
	КонецЦикла;
	
	Если ДобавлятьАдресВСписок
	   И ЗначениеЗаполнено(АдресОтвета) Тогда
		СписокАдресовОтвета.Вставить(0, АдресОтвета, АдресОтвета);
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"РедактированиеНовогоПисьма",
		"СписокАдресовОтвета",
		СписокАдресовОтвета);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПриведенныйПочтовыйАдресВФормате(Текст)
	АдресаСтрокой = "";
	Адреса = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(Текст);
	
	Если Адреса.Количество() > 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Можно указывать только один адрес для ответа.'"), , "АдресОтвета");
		СтандартнаяОбработка = Ложь;
		Возврат Текст;
	КонецЕсли;
	
	Для Каждого ОписаниеАдреса Из Адреса Цикл
		Если Не ПустаяСтрока(ОписаниеАдреса.ОписаниеОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеАдреса.ОписаниеОшибки, , "АдресОтвета");
		КонецЕсли;
		
		Если Не ПустаяСтрока(АдресаСтрокой) Тогда
			АдресаСтрокой = АдресаСтрокой + "; ";
		КонецЕсли;
		АдресаСтрокой = АдресаСтрокой + АдресСтрокой(ОписаниеАдреса);
	КонецЦикла;
	
	Возврат АдресаСтрокой;
КонецФункции

&НаКлиенте
Функция АдресСтрокой(ОписаниеАдреса)
	Результат = "";
	Если ПустаяСтрока(ОписаниеАдреса.Псевдоним) Тогда
		Результат = ОписаниеАдреса.Адрес;
	Иначе
		Если ПустаяСтрока(ОписаниеАдреса.Адрес) Тогда
			Результат = ОписаниеАдреса.Псевдоним;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 <%2>", ОписаниеАдреса.Псевдоним, ОписаниеАдреса.Адрес);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВложенияПеретаскиваниеЗавершение(Результат, АдресВременногоХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	Файлы = Новый Массив;
	ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.Имя, АдресВременногоХранилища);
	Файлы.Добавить(ПередаваемыйФайл);
	ДобавитьФайлыВСписок(Файлы);
	ОбновитьПредставлениеВложений();
	ТребуетсяПодтверждениеЗакрытияФормы = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВложенияИзФайлов()
	
	Для Каждого Вложение Из Вложения Цикл
		Если Не ПустаяСтрока(Вложение.ПутьКФайлу) Тогда
			ДвоичныеДанные = Новый ДвоичныеДанные(Вложение.ПутьКФайлу);
			Вложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПередЗакрытиемФормы()
	ТекстВопроса = НСтр("ru = 'Сообщение еще не отправлено. Закрыть форму?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытиеФормыПодтверждено", ЭтотОбъект);
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Не закрывать'"));
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,
		КодВозвратаДиалога.Отмена, НСтр("ru = 'Отправка сообщения'"));
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыПодтверждено(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПодтверждениеЗакрытияФормы = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакШаблон(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		МодульШаблоныСообщенийКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ШаблоныСообщенийКлиентСервер");
		ПараметровШаблона = МодульШаблоныСообщенийКлиентСервер.ОписаниеПараметровШаблона();
		МодульШаблоныСообщенийКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШаблоныСообщенийКлиент");
		ПараметровШаблона.Тема = ТемаПисьма;
		ПараметровШаблона.Текст = ТелоПисьма.ПолучитьТекст();
		ПараметровШаблона.ТипШаблона = "Письмо";
		МодульШаблоныСообщенийКлиент.ПоказатьФормуШаблона(ПараметровШаблона);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПослеВыбораШаблона(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ТемаПисьма = Результат.Тема;
		УстановитьТекстПисьмаИВложения(Результат.Текст, Результат.Вложения);
		ОбновитьПредставлениеВложений();
		
		Если ТипЗнч(Результат.Получатель) = Тип("СписокЗначений") Тогда
			Для Каждого Получатель Из Результат.Получатель Цикл
				АдресПолучателя                 = ПочтовыеАдресаПолучателей.Добавить();
				АдресПолучателя.ВариантОтправки = НСтр("ru='Кому:'");
				АдресПолучателя.Представление   = Получатель.Представление;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПисьмаИВложения(Текст, СтруктураВложений)
	
	ВложенияHTML = Новый Структура();
	Если ТипЗнч(СтруктураВложений) = Тип("Массив") Тогда
		Для каждого Вложение Из СтруктураВложений Цикл
			ОпределитьНазначениеВложенияПисьма(Вложение, ВложенияHTML);
		КонецЦикла;
	КонецЕсли;
		
	ТелоПисьма.УстановитьHTML(ТекстВHTML(Текст), ВложенияHTML);
	
КонецПроцедуры

&НаКлиенте
Функция ПочтовыйАдресИзПредставления(Знач Представление)
	
	Адрес = Представление;
	ПозицияНачало = СтрНайти(Представление, "<");
	Если ПозицияНачало > 0 Тогда
		ПозицияОкончание = СтрНайти(Представление, ">", НаправлениеПоиска.СНачала, ПозицияНачало);
		Если ПозицияОкончание > 0 Тогда
			Адрес = Сред(Представление, ПозицияНачало + 1, ПозицияОкончание - ПозицияНачало - 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СокрЛП(Адрес);

КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПолучателейИзМассиваСтруктур(ПараметрыПолучателейСообщения)
	
	Для Каждого ПараметрыПолучателя Из ПараметрыПолучателейСообщения Цикл
		Если ЗначениеЗаполнено(ПараметрыПолучателя.Адрес) Тогда
			Адрес = СтрЗаменить(ПараметрыПолучателя.Представление, ",", " ") + " < "+ ПараметрыПолучателя.Адрес + ">";
			
			Если ПараметрыПолучателя.Свойство("ВидПочтовогоАдреса") 
				И ЗначениеЗаполнено(ПараметрыПолучателя.ВидПочтовогоАдреса) Тогда
				Представление = Адрес + " (" + ПараметрыПолучателя.ВидПочтовогоАдреса + ")";
			ИначеЕсли ПараметрыПолучателя.Свойство("ИсточникКонтактнойИнформации")
				И ЗначениеЗаполнено(ПараметрыПолучателя.ИсточникКонтактнойИнформации) Тогда
				Представление = Адрес + " (" + Строка(ПараметрыПолучателя.ИсточникКонтактнойИнформации) + ")";
			Иначе
				Представление = Адрес;
			КонецЕсли;
			ПолучателиСообщения.Добавить(Адрес, Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПолучателейИзСтроки(Знач ПараметрыПолучателейСообщения)
	
	ПараметрыПолучателейСообщения = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(ПараметрыПолучателейСообщения);
	
	Для Каждого ПараметрыПолучателя Из ПараметрыПолучателейСообщения Цикл
		Если ЗначениеЗаполнено(ПараметрыПолучателя.Адрес) Тогда
			ПолучателиСообщения.Добавить(ПараметрыПолучателя.Адрес, ПараметрыПолучателя.Псевдоним);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьВложения(АдресаВложений)
	Для Каждого АдресВложения Из АдресаВложений Цикл
		УдалитьИзВременногоХранилища(АдресВложения);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьПолучателейВИсторию(ПолучателиПисьма)
	
	ИсторияПолучателей = ИсторияПолучателей();
	Для Каждого Получатель Из ПолучателиПисьма Цикл
		ИсторияПолучателей.Вставить(Получатель.Адрес, Получатель.Представление);
	КонецЦикла;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РедактированиеНовогоПисьма", "ИсторияПолучателей", ИсторияПолучателей);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИсторияПолучателей()
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РедактированиеНовогоПисьма", "ИсторияПолучателей", Новый Соответствие);
	
КонецФункции

&НаКлиенте
Функция ПредставлениеАдреса(Адрес, ПредставлениеПолучателя)
	Результат = Адрес;
	Если Не ПустаяСтрока(ПредставлениеПолучателя) Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 <%2>", ПредставлениеПолучателя, Адрес);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПохожиеПолучателиИзИстории(Строка)
	
	Результат = Новый СписокЗначений;
	Если СтрДлина(Строка) = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ИсторияПолучателей = Неопределено Тогда
		ИсторияПолучателей = ИсторияПолучателей();
	КонецЕсли;
	
	Для Каждого Получатель Из ИсторияПолучателей Цикл
		ПредставлениеАдреса = ПредставлениеАдреса(Получатель.Ключ, Получатель.Значение);
		Позиция = СтрНайти(НРег(ПредставлениеАдреса), НРег(Строка));
		Если Позиция > 0 Тогда
			ПодстрокаДоВхождения = Лев(ПредставлениеАдреса, Позиция - 1);
			ПодстрокаВхождения = Сред(ПредставлениеАдреса, Позиция, СтрДлина(Строка));
			ПодстрокаПослеВхождения = Сред(ПредставлениеАдреса, Позиция + СтрДлина(Строка));
			СтрокаСПодсветкой = Новый ФорматированнаяСтрока(
				ПодстрокаДоВхождения,
				Новый ФорматированнаяСтрока(ПодстрокаВхождения, Новый Шрифт( , , Истина), РезультатУспехЦвет),
				ПодстрокаПослеВхождения);
			Результат.Добавить(ПредставлениеАдреса, СтрокаСПодсветкой);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПохожиеПолучателиИзСпискаПереданных(Знач Текст)
	
	Результат = Новый СписокЗначений;
	
	СписокАдресов = Новый Массив;
	Для каждого СтрокаТаблицы Из ПочтовыеАдресаПолучателей Цикл
		Адрес = ПочтовыйАдресИзПредставления(СтрокаТаблицы.Представление);
		Если ЗначениеЗаполнено(Адрес) Тогда
			СписокАдресов.Добавить(ВРег(Адрес));
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеВыбор = Новый ФорматированнаяСтрока(Текст, Новый Шрифт(,, Истина), РезультатУспехЦвет);
	ДлинаТекста = СтрДлина(Текст);
	Для Каждого Почта Из ПолучателиСообщения Цикл
		Адрес = ПочтовыйАдресИзПредставления(Почта.Значение);
		Если СписокАдресов.Найти(ВРег(Адрес)) = Неопределено Тогда
			Позиция = СтрНайти(Почта.Значение, Текст);
			Если Позиция > 0 Тогда
				Представление= Новый ФорматированнаяСтрока(Лев(Почта.Представление, Позиция - 1), ПредставлениеВыбор, Сред(Почта.Представление, Позиция + ДлинаТекста));
				Результат.Добавить(Почта.Значение, Представление);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ДобавленныеПроцедурыБП

&НаСервере
Процедура ЗаполнитьАдресаПолучателей(ПолучателиПисьма, СкрытыеКопии = Ложь)

	АдресаПолучателей = ОтправкаПочтовыхСообщений.АдресаЭлектроннойПочты(ПолучателиПисьма);
	ДобавитьАдресаПолучателей(АдресаПолучателей, СкрытыеКопии);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ШаблоныПисьма", ШаблоныПисьма);
	ПараметрыФормы.Вставить("ТемаПисьма",    ТемаПисьма);
	ОткрытьФорму("ОбщаяФорма.ВыборШаблонаПисьма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(
		ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

&НаСервере
Процедура ПодписьИПечатьПриИзмененииНаСервере();
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(АдресИсходногоВложения);
	НаборПечатныхФорм = ИсходныеДанные.НаборПечатныхФорм;
	УправлениеПечатьюБП.ДобавитьФаксимилеПриОтправке(НаборПечатныхФорм);
	
	ПечатныеФормыПоОбъектам = Новый ТаблицаЗначений;
	ПечатныеФормыПоОбъектам.Колонки.Добавить("Объект");
	ПечатныеФормыПоОбъектам.Колонки.Добавить("ПечатныеФормы");
	ПечатныеФормыПоОбъектам.Индексы.Добавить("Объект");
	
	НовыеВложения = ОтправкаПочтовыхСообщений.ПоместитьТабличныеДокументыВоВременноеХранилище(НаборПечатныхФорм,
						ПечатныеФормыПоОбъектам,
						ИсходныеДанные.ДополнительныеПараметры);
	
	Для Каждого Вложение Из НовыеВложения Цикл
		ОписаниеВложения = ВложенияПодписьИПечать.Добавить();
		ЗаполнитьЗначенияСвойств(ОписаниеВложения, Вложение);
		Если Не ПустаяСтрока(ОписаниеВложения.АдресВоВременномХранилище) Тогда
			ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
				ПолучитьИзВременногоХранилища(ОписаниеВложения.АдресВоВременномХранилище), УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	УправлениеПечатьюБП.ПечатьДокументовПриЗакрытииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ВариантОтправкиПоПолучателям()
	
	ВариантОтправки = "Кому";
	Для Каждого ПочтовыйАдрес Из ПочтовыеАдресаПолучателей Цикл
		Если ПочтовыйАдрес.ВариантОтправки = НСтр("ru = 'Скрытая копия:'") Тогда
			ВариантОтправки = "СкрытаяКопия";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВариантОтправки;
	
КонецФункции

&НаСервере
Процедура ДобавитьАдресаПолучателей(АдресаПолучателей, СкрытыеКопии = Ложь)
	
	ВариантОтправки = ?(СкрытыеКопии, НСтр("ru = 'Скрытая копия:'"), НСтр("ru='Кому:'"));
	
	Если ТипЗнч(АдресаПолучателей) = Тип("СписокЗначений") Тогда
		
		Для Каждого ЭлементПочтовыйАдрес Из АдресаПолучателей Цикл
			НовыйПолучатель = ПочтовыеАдресаПолучателей.Добавить();
			НовыйПолучатель.ВариантОтправки = ВариантОтправки;
			Если ЗначениеЗаполнено(ЭлементПочтовыйАдрес.Представление) Тогда
				НовыйПолучатель.Представление = ЭлементПочтовыйАдрес.Представление
										+ " <"
										+ ЭлементПочтовыйАдрес.Значение
										+ ">"
			Иначе
				НовыйПолучатель.Представление = ЭлементПочтовыйАдрес.Значение;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(АдресаПолучателей) = Тип("Строка") Тогда
		НовыйПолучатель                 = ПочтовыеАдресаПолучателей.Добавить();
		НовыйПолучатель.ВариантОтправки = ВариантОтправки;
		НовыйПолучатель.Представление   = АдресаПолучателей;
	ИначеЕсли ТипЗнч(АдресаПолучателей) = Тип("Массив") Тогда
		
		Для Каждого СтруктураПолучателя Из АдресаПолучателей Цикл
			ЕстьСвойствоВыбран = СтруктураПолучателя.Свойство("Выбран");
			МассивАдресов      = СтрРазделить(СтруктураПолучателя.Адрес, ";");
			Для Каждого Адрес Из МассивАдресов Цикл
				Если ПустаяСтрока(Адрес) Тогда
					Продолжить;
				КонецЕсли;
				Если (ЕстьСвойствоВыбран И СтруктураПолучателя.Выбран) ИЛИ (НЕ ЕстьСвойствоВыбран) Тогда
					
					ПредставлениеПолучателя = СтруктураПолучателя.Представление + " <" + СокрЛП(Адрес) + ">";
					Отбор = Новый Структура("Представление", ПредставлениеПолучателя);
					ПочтовыеАдресаДубли = ПочтовыеАдресаПолучателей.НайтиСтроки(Отбор);
					Если ПочтовыеАдресаДубли.Количество() = 0 Тогда
						НовыйПолучатель                 = ПочтовыеАдресаПолучателей.Добавить();
						НовыйПолучатель.ВариантОтправки = ВариантОтправки;
						НовыйПолучатель.Представление   = ПредставлениеПолучателя;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Если количество строк больше одной, то нужно очистить все пустые строки.
	Если ПочтовыеАдресаПолучателей.Количество() > 1 Тогда
		Отбор = Новый Структура("Представление", "");
		Для Каждого СтрокаПустогоАдреса Из ПочтовыеАдресаПолучателей.НайтиСтроки(Отбор) Цикл
			ПочтовыеАдресаПолучателей.Удалить(ПочтовыеАдресаПолучателей.Индекс(СтрокаПустогоАдреса));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФаксимилеПриСозданииНаСервере()
	
	ПараметрыФаксимиле = Новый Структура();
	ПараметрыФаксимиле.Вставить("ВыводитьПодписьИПечать", Ложь);
	ПараметрыФаксимиле.Вставить("ПредложитьНастроить",    Ложь);
	Если Параметры.Свойство("АдресИсходногоВложения") Тогда
		АдресИсходногоВложения = Параметры.АдресИсходногоВложения;
		Если ЗначениеЗаполнено(АдресИсходногоВложения) Тогда
			УправлениеПечатьюБП.ПолучитьПараметрыФаксимилеПриОтправке(АдресИсходногоВложения, ПараметрыФаксимиле);
			Если ПараметрыФаксимиле.Свойство("Организация") Тогда
				УправлениеПечатьюБП.ОформитьВыводРеквизитаПодписьИПечать(Элементы.ПодписьИПечатьБП, Элементы.ГруппаПодписьИПечатьБП, ПараметрыФаксимиле);
				Если ПараметрыФаксимиле.ВыводитьПодписьИПечать
					И ЗначениеЗаполнено(ПараметрыФаксимиле.Организация) Тогда
					Организация = ПараметрыФаксимиле.Организация;
				КонецЕсли;
				НастройкиВыводаФаксимиле = ХранилищеОбщихНастроек.Загрузить("УправлениеФаксимиле", "НастройкиВыводаФаксимиле");
				Если НастройкиВыводаФаксимиле <> Неопределено Тогда
					ВыводитьФаксимиле = Ложь;
					Если НастройкиВыводаФаксимиле.Свойство("ВыводитьФаксимиле") Тогда
						ВыводитьФаксимиле = НастройкиВыводаФаксимиле.ВыводитьФаксимиле;
					КонецЕсли;
					Если ВыводитьФаксимиле = Истина
						И ПараметрыФаксимиле.ВыводитьПодписьИПечать
						И НЕ ПараметрыФаксимиле.ПредложитьНастроить Тогда
						ПодписьИПечатьБП = Истина;
						ПодписьИПечатьПриИзмененииНаСервере();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Элементы.ГруппаПодписьИПечатьБП.Видимость = ПараметрыФаксимиле.ВыводитьПодписьИПечать;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыШаблоновПисьмаПриЗапуске()
	
	ШаблоныПисьма = Параметры.ШаблоныПисьма;
	
	Элементы.ФормаВыбратьПолучателей.Видимость = Параметры.ВыбиратьПолучателей;
	Элементы.ФормаЗаполнитьПоШаблону.Видимость = ШаблоныПисьма.Количество() > 0;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
