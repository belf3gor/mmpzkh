#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Документооборот = Параметры.Ссылка;
	Если Параметры.Свойство("Наименование") Тогда
		Наименование = Параметры.Наименование;
	КонецЕсли;
	
	ОпределитьСвойстваДокументооборота();
	ЗаполнитьДанныеВШапкеФормы();
	УправлениеЭУ(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодробнаяИнформацияНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Документооборот) Тогда
		ПараметрыФормы = Новый Структура("Ключ", Документооборот);
		Форма = ПолучитьФорму("Справочник.ДокументооборотыОбменаСБанками.Форма.ФормаЭлемента", ПараметрыФормы);
		Форма.ТолькоПросмотр = Истина;
		Форма.Открыть();
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Подробная информация отсутствует'"));
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьВсеФайлыИПодписи(Команда)
	
	Если ЗначениеЗаполнено(ПоследняяТранзакция) Тогда
		ВыгрузитьДокументооборот();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтправленныйПакетДокументов(Команда)
	
	ВАрхиве = Ложь;
	ИмяФайлаПакета = "";
	Адрес = ПолучитьАдресФайлаПакета(ПоследняяТранзакция, ИмяФайлаПакета, ВАрхиве);
	Если ВАрхиве Тогда 
		ПоказатьПредупреждение(, "Файл перемещен в архив. Продолжение выгрузки невозможно!");
		Возврат;
	КонецЕсли;
	ПолучитьФайл(Адрес, ИмяФайлаПакета);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОпределитьСвойстваДокументооборота()

	СведенияПоОбъекту = УниверсальныйОбменСБанками.РеквизитыДокументооборота(Документооборот);
	
	Организация					= СведенияПоОбъекту.Организация;
	Банк 						= СведенияПоОбъекту.Банк;
	
КонецПроцедуры

&НаСервере
Функция ЭлементНаименованиеЭтапа(НомерСтроки)
	Возврат Элементы["НаименованиеЭтапа" + Строка(НомерСтроки)];
КонецФункции

&НаСервере
Функция ЭлементДатаСовершенияЭтапа(НомерСтроки)
	Возврат Элементы["ДатаСовершенияЭтапа" + Строка(НомерСтроки)];
КонецФункции

&НаСервере
Функция ЭлементКомментарийЭтапа(НомерСтроки)
	Возврат Элементы["КомментарийЭтапа" + Строка(НомерСтроки)];
КонецФункции

&НаСервере
Функция ЭлементПротоколЭтапа(НомерСтроки)
	Возврат Элементы["ПротоколЭтапа" + Строка(НомерСтроки)];
КонецФункции

&НаКлиенте
Процедура ВыгрузитьДокументооборот()
	
	ТекстВопроса = НСтр("ru = 'Выгрузить все файлы и подписи?'");
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьДокументооборотПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументооборотПослеВопроса(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУ(Отказ = Ложь)
	
	Элементы.Наименование.Видимость = НЕ ПустаяСтрока(Наименование);

	ТекущееСостояниеОтправки = ОпределитьТекущееСостояние();
	
	Если ТекущееСостояниеОтправки = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОтпределитьСоставМенюВыгрузка();
	ПрорисоватьКритическиеОшибки(ТекущееСостояниеОтправки);
	ПрорисоватьНеотправленныеИзвещения(ТекущееСостояниеОтправки);
	ПрорисоватьТаблицу(ТекущееСостояниеОтправки);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТекущееСостояние()

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВозвращатьТаблицуЭтаповОтправки", Истина);
	ДополнительныеПараметры.Вставить("ПолучатьОшибкиОтправки", 			Истина);
	ДополнительныеПараметры.Вставить("ПолучатьДаты", 					Истина);
	ДополнительныеПараметры.Вставить("Отправка", 						ПоследняяТранзакция);
	ДополнительныеПараметры.Вставить("ПоказыватьПомеченныеНаУдаление", 	Истина);
	
	ТекущееСостояниеДокументооборота = УниверсальныйОбменСБанками.ТекущееСостояниеДокументооборота(Документооборот, ДополнительныеПараметры);
	
	Возврат ТекущееСостояниеДокументооборота;

КонецФункции 

&НаСервере
Процедура ПрорисоватьНеотправленныеИзвещения(ТекущееСостояниеОтправки)

	Элементы.БлокНеотправленныхСообщений.Видимость = ТекущееСостояниеОтправки.НеотправленныеИзвещения.ЕстьНеотправленныеИзвещения;

КонецПроцедуры

&НаСервере
Процедура ПрорисоватьКритическиеОшибки(ТекущееСостояниеОтправки)

	// Критические сообщения
	ЕстьКритическиеОшибки = ТекущееСостояниеОтправки.ЕстьКритическиеОшибки;
	Элементы.БлокКритическихОшибок.Видимость 	= ЕстьКритическиеОшибки;
	Элементы.ЗначокКритическойОшибки.Видимость 	= ЕстьКритическиеОшибки;

КонецПроцедуры 

&НаСервере
Процедура ПрорисоватьТаблицу(ТекущееСостояниеОтправки)

	// Таблица состояний
	ТаблицаЭтаповОтправки = ТекущееСостояниеОтправки.ТаблицаЭтаповОтправки;
	
	УдалитьСтрокиТаблицыСостоянияСоСтатусомНеОтправлено(ТаблицаЭтаповОтправки);
	ЗначениеВРеквизитФормы(ТаблицаЭтаповОтправки, "ЭтапыСостояния");
	
	ТаблицаСостояний = РеквизитФормыВЗначение("ЭтапыСостояния");
	
	СкрытьЛишниеИлиПоказатьНовыеСостоянияНаФорме(ТаблицаСостояний);
	ПрорисоватьТаблицуСостояний(ТаблицаСостояний);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДанныеВШапкеФормы()

	Период = ПредставлениеПериода;
	Если СтрНайти(Период, "0001") > 0 Тогда
		Период = "";
	КонецЕсли;
	Период = ?(ЗначениеЗаполнено(Период)," (" + Период + ")", "");
	
	ЗаголовокФормы = Наименование + Период;
	
	Элементы.Наименование.Заголовок	= ЗаголовокФормы;
	
	Получатель 	= Банк;
	Отправитель = Организация;
	
	// Отправитель
	Если ЗначениеЗаполнено(Отправитель) Тогда
		Элементы.ОтКого.Заголовок = Отправитель;
	Иначе
		Элементы.ЗаголовокОтКого.Видимость 	= Ложь;
		Элементы.ОтКого.Видимость 			= Ложь;
	КонецЕсли;
	
	// Получатель
	Если ЗначениеЗаполнено(Получатель) Тогда
		Элементы.Кому.Заголовок				= Получатель;
	Иначе
		Элементы.ЗаголовокКому.Видимость 	= Ложь;
		Элементы.Кому.Видимость 			= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиТаблицыСостоянияСоСтатусомНеОтправлено(ТаблицаСостояний)
	
	// Удаление строки со статусом "Не отправлено" (либо другим
	// значением, установленным вручную до начала процесса отправки).
	
	СтатусыОбъектов = Новый Массив;
	
	Для каждого СтрокаТаблицыСостояний Из ТаблицаСостояний Цикл
		
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1'"), СтрокаТаблицыСостояний.ТекстНадписи);
		
		Если СтатусыОбъектов.Найти(ТекстНадписи) <> Неопределено Тогда
			ТаблицаСостояний.Удалить(СтрокаТаблицыСостояний);
			Прервать;
		КонецЕсли;
		
		Если ТекстНадписи = НСтр("ru = 'Не отправлено'") Тогда
			ТаблицаСостояний.Удалить(СтрокаТаблицыСостояний);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьЛишниеИлиПоказатьНовыеСостоянияНаФорме(ТаблицаСостояний)
	
	// Скрываем лишние блоки
	ЭлементыТаблицыЭтапов = Элементы.ОбщийБлокЭтапов.ПодчиненныеЭлементы;
	Для каждого ЭлементФормы Из ЭлементыТаблицыЭтапов Цикл
		ИмяЭлемента = ЭлементФормы.Имя;
		Если СтрНайти(ИмяЭлемента, "БлокЭтапаОтправки") > 0 Тогда
			НомерБлока = Число(СтрЗаменить(ИмяЭлемента, "БлокЭтапаОтправки",""));
			ВидимостьБлока = (НомерБлока <= ТаблицаСостояний.Количество());
			Если ВидимостьБлока <> ЭлементФормы.Видимость Тогда
				ЭлементФормы.Видимость = ВидимостьБлока;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция НомерТекущегоСостоянияВТаблицеСостояний(ТаблицаСостояний)
	
	НомерТекущегоЭтапа = 0;
	Для каждого СтрокаТаблицыСостояний Из ТаблицаСостояний Цикл
		
		НомерСтроки = ТаблицаСостояний.Индекс(СтрокаТаблицыСостояний) + 1;
		Если СтрокаТаблицыСостояний.ЭтапПройден Тогда
			 НомерТекущегоЭтапа = НомерСтроки;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат НомерТекущегоЭтапа;

КонецФункции

&НаСервере
Процедура ПрорисоватьТаблицуСостояний(ТаблицаСостояний)
	
	// Определяем номер текущего этапа
	НомерТекущегоЭтапа = НомерТекущегоСостоянияВТаблицеСостояний(ТаблицаСостояний);
	
	// Заполняем данные в состояниях
	Для каждого СтрокаТаблицыСостояний Из ТаблицаСостояний Цикл
		
		НомерСтроки = ТаблицаСостояний.Индекс(СтрокаТаблицыСостояний) + 1;
		
		// Определяем текст надписей
		
		// Наименование
		ЭлементНаименованиеЭтапа(НомерСтроки).Заголовок = СтрокаТаблицыСостояний.ТекстНадписи;
		
		// Дата
		Если ЗначениеЗаполнено(СтрокаТаблицыСостояний.Дата) Тогда
			
			// Подбираем нужный формат
			Если ТипЗнч(СтрокаТаблицыСостояний.Дата) = Тип("Дата")
				И СтрокаТаблицыСостояний.Дата = НачалоДня(СтрокаТаблицыСостояний.Дата) Тогда
				ДатаНаступленияЭтапа = Формат(СтрокаТаблицыСостояний.Дата,"ДЛФ=D");
			Иначе
				ДатаНаступленияЭтапа = Строка(СтрокаТаблицыСостояний.Дата);
			КонецЕсли;
				
			ЭлементДатаСовершенияЭтапа(НомерСтроки).Заголовок = ДатаНаступленияЭтапа;
			
		Иначе
			ЭлементДатаСовершенияЭтапа(НомерСтроки).Заголовок = "";
		КонецЕсли;
		
		// Комментарий выводим только для текущего состояния
		Если ЗначениеЗаполнено(СтрокаТаблицыСостояний.КомментарийКСостоянию) И НомерСтроки = НомерТекущегоЭтапа Тогда
			ЭлементКомментарийЭтапа(НомерСтроки).Заголовок = СтрокаТаблицыСостояний.КомментарийКСостоянию;
			ЭлементКомментарийЭтапа(НомерСтроки).Видимость = Истина;
		Иначе
			ЭлементКомментарийЭтапа(НомерСтроки).Видимость = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыСостояний.КомментарийКСостоянию) И НомерСтроки = НомерТекущегоЭтапа Тогда // обход ошибки платформы
			ЭлементПротоколЭтапа(НомерСтроки).Видимость = Ложь;
		Иначе
			ЭлементПротоколЭтапа(НомерСтроки).Заголовок = "";
			ЭлементПротоколЭтапа(НомерСтроки).Видимость = Истина;
		КонецЕсли;
		
		// Определяем фон и доступность
		ЭтапПройден 				= СтрокаТаблицыСостояний.ЭтапПройден;
		ЭлементыБлокЭтапа 			= Элементы["БлокЭтапа" + Строка(НомерСтроки)];
		ЭлементыПротоколЭтапа		= Элементы["ПротоколЭтапа" + Строка(НомерСтроки)];
		ЭлементыНаименованиеЭтапа	= Элементы["НаименованиеЭтапа" + Строка(НомерСтроки)];
		
		// Элемент протокол пока не используем.
		ЭлементыПротоколЭтапа.Видимость = Ложь;
		
		Если ЭтапПройден И НомерСтроки = НомерТекущегоЭтапа Тогда
			
			// Определяем цвет фона
			
			ЦветФона = ЦветаСтиля.ЦветФонаТекущейОтправки;
			
			ЭлементыБлокЭтапа.ЦветФона = ЦветФона; 
			ЭлементыБлокЭтапа.Доступность = Истина;
			
			ЭлементыПротоколЭтапа.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБРО;
			ЭлементыНаименованиеЭтапа.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
			
		ИначеЕсли НЕ ЭтапПройден Тогда
			
			// Делаем непройденные этапы недоступными
			ЭлементыБлокЭтапа.ЦветФона 		= ЦветаСтиля.БазовыйЦветФонаЭтапаОтправки;
			ЭлементыБлокЭтапа.Доступность 	= Ложь;
			// Гиперссылки протоколов делаем серыми
			ЭлементыПротоколЭтапа.ЦветТекста = ЦветаСтиля.ЦветШрифтаНенаступившегоЭтапа;
			// Наименование этапа делаем серым
			ЭлементыНаименованиеЭтапа.ЦветТекста = ЦветаСтиля.ЦветШрифтаНенаступившегоЭтапа;
			
		ИначеЕсли ЭтапПройден Тогда
			
			// Делаем непройденные этапы недоступными
			ЭлементыБлокЭтапа.ЦветФона 		= ЦветаСтиля.БазовыйЦветФонаЭтапаОтправки;
			ЭлементыБлокЭтапа.Доступность 	= Истина;
			// Гиперссылки протоколов делаем серыми
			ЭлементыПротоколЭтапа.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБРО;
			// Наименование этапа делаем серым
			ЭлементыНаименованиеЭтапа.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОтпределитьСоставМенюВыгрузка()

	Элементы.ВыгрузитьВсеФайлыИПодписи.Видимость 				= Истина;
	Элементы.ВыгрузитьОтправленныйПакетДокументов.Видимость 	= Истина;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбъектВАрхиве(Знач ОбъектОтправки, Знач ИмяФайла)
	
	КонтекстМодуля = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстМодуля.ОбъектВАрхиве(ОбъектОтправки, ИмяФайла);
	
КонецФункции
	
&НаСервереБезКонтекста
Функция ПолучитьАдресФайлаПакета(ОтправкаСсылка, ИмяФайлаПакета, ВАрхиве = Ложь)
			
	Если ТипЗнч(ОтправкаСсылка) <> Тип("СправочникСсылка.ОтправкиФТС") Тогда
		
		ВАрхиве = ОбъектВАрхиве(ОтправкаСсылка, "ЗашифрованныйПакет");	
		Если ВАрхиве Тогда 
			Возврат "";
		КонецЕсли;
	
		ИмяФайлаПакета = ОтправкаСсылка.ИмяФайлаПакета;
		Возврат ПоместитьВоВременноеХранилище(ОтправкаСсылка.ЗашифрованныйПакет.Получить());
		
	Иначе
		
		ВАрхиве = ОбъектВАрхиве(ОтправкаСсылка, "Подпись");	
		Если ВАрхиве Тогда 
			Возврат "";
		КонецЕсли;
		
		ИмяФайлаПакета = НСтр("ru = 'Подпись'") + ОтправкаСсылка.ИмяФайлаВыгрузки;
		Возврат ПоместитьВоВременноеХранилище(ОтправкаСсылка.Подпись.Получить());
	КонецЕсли;
	
КонецФункции

#КонецОбласти