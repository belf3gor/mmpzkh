
#Область ОбъявлениеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЭтоМедленныйРежимРаботы = ОбщегоНазначенияБП.ЭтоМедленныйРежимРаботы();
	
	Если Параметры.КонтекстныйВызов Тогда
		Элементы.Организация.ТолькоПросмотр      = Истина;
		Элементы.Организация.РежимВыбораИзСписка = Ложь;
		Элементы.Организация.КнопкаВыбора        = Ложь;
	КонецЕсли;
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
	УстановитьПараметрыВыбораОрганизации(ЭтотОбъект, ДоступныеОрганизации);
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организация = Параметры.Организация;
	Иначе
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда
		ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
		ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	КонецЕсли;
	
	ТекущаяДата   = НачалоДня(ТекущаяДатаСеанса());
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	ДатаИзменения = НачалоГода(ТекущаяДата);
	
	УчетЗарплатыИКадровСредствамиБухгалтерии = Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить();
	ВедетсяУчетИмущества = Константы.ВедетсяУчетНМА.Получить() ИЛИ Константы.ВедетсяУчетОсновныхСредств.Получить();
	ВедетсяУчетЗарплаты  = УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров();
	
	ПравоРедактированияНастроек =
		ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитика)
			И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НалогиОтчеты)
			И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПорядокУплатыАкцизов)
			И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПорядокУплатыНалоговНаМестах)
			И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВариантыПримененияТребованийЗаконодательства)
			И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиСистемыНалогообложения)
			И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаУСН)
			И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаНДС);
		
		Если ЭтоЮрЛицо Тогда
			ПравоРедактированияНастроек = ПравоРедактированияНастроек
				И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаНалогаНаПрибыль)
				И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтавкиНалогаНаИмущество);
			
			ПравоРедактированияСпискаПрямыхРасходов = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ);
			
		Иначе
			ПравоРедактированияНастроек = ПравоРедактированияНастроек
				И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаНДФЛ)
				И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП);
		КонецЕсли;
		
		Если ВедетсяУчетЗарплаты Тогда
			Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
				ПравоРедактированияНастроек = ПравоРедактированияНастроек
					И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов)
					И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев)
					И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаСтраховыхВзносов);
			КонецЕсли;
		КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		УстановитьДоступностьВидимостьНастроек(Ложь);
	Иначе
		Если ДоступныеОрганизации.Найти(Организация) = Неопределено Тогда
			ОрганизацияНедоступна = Истина;
			УстановитьДоступностьВидимостьНастроек(Ложь);
			Возврат;
		Иначе
			ПодготовитьФормуНастройкиСписка();
			ПодготовитьФормуНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.ОбщаяФорма.НалогиИОтчеты",
		"ОбщаяФорма",
		НСтр("ru='Новости: Налоги и отчеты'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОрганизацияНедоступна Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатБлокировки) Тогда
		ПоказатьПредупреждение( , РезультатБлокировки);
		РезультатБлокировки = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияУСНВВашемРегионе) Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперацияУСНВВашемРегионе,
			Новый ОписаниеОповещения("ПриЗавершенииЗаданияУСНВВашемРегионе", ЭтотОбъект),
			ПараметрыОжидания);
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	Если ЭтоМедленныйРежимРаботы ИЛИ ЭтоВебКлиент Тогда
		Интервал = ?(ЭтоВебКлиент, 1, 0.5);
		ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьСписокНастройкиНалоговОтчетов", Интервал, Истина);
	Иначе
		ЗаполнитьСписокНастройкиНалоговОтчетов();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 1, Истина);
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
	Если Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница = Элементы.ОбщаяСтраницаОжидание Тогда
		ОтменитьПостроениеСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НастройкиСистемыНалогообложения"
		ИЛИ ИмяСобытия = "Запись_НастройкиУчетаНалогаНаПрибыль"
		ИЛИ ИмяСобытия = "Запись_НастройкиУчетаУСН"
		ИЛИ ИмяСобытия = "Запись_НастройкиУчетаНДС"
		ИЛИ ИмяСобытия = "Запись_НастройкиУчетаНДФЛ"
		ИЛИ ИмяСобытия = "Запись_НастройкиУчетаСтраховыхВзносовИП"
		ИЛИ ИмяСобытия = "Запись_ПрименяемыеТарифыСтраховыхВзносов"
		ИЛИ ИмяСобытия = "Запись_СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев"
		ИЛИ ИмяСобытия = "Запись_УчетнаяПолитикаПоНДФЛ"
		ИЛИ ИмяСобытия = "Запись_НастройкиУчетаСтраховыхВзносов" Тогда
		
		ИмяРаздела = СтрЗаменить(ИмяСобытия, "Запись_","");
		Если Параметр.Свойство("Организация") Тогда
			Если Параметр.Организация <> Организация Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если Параметр.Свойство("ГоловнаяОрганизация") Тогда
			Если Параметр.ГоловнаяОрганизация <> ГоловнаяОрганизация Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если Параметр.Свойство("Период") Тогда
			ПараметрыВыбора = ПараметрыВыбораПериодаНастройки(Параметр.Период, ИмяРаздела);
			Если ПараметрыВыбора.НачалоПериода < ЭтотОбъект[ИмяРаздела].Период
				Или (ПараметрыВыбора.НачалоПериода > ЭтотОбъект[ИмяРаздела].Период
					И ПараметрыВыбора.НачалоПериода >= ТекущаяДата) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяСобытия = "Запись_НастройкиСистемыНалогообложения" Тогда
			Разворачивать = ПолныйСписок;
			ПрочитатьНастройкиОрганизации();
			Разворачивать = Ложь;
		Иначе
			ПеречитатьНастройкиНаТекущуюДату(ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		
		// При записи новой организации необходимо добавить ее в список доступных организаций.
		ОбработкаОповещенияЗаписьОрганизации(Параметр, Источник);
		
	ИначеЕсли ИмяСобытия = "ИзменениеПатента" Тогда
		
		Если Организация = Параметр.Владелец Тогда
			СписокПатентов = НастройкиУчетаУСНФормыВызовСервера.СписокПатентов(Организация, НастройкиУчетаУСН.Период);
			НастройкиУчетаУСНФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененоСостояниеИнтеграцииСПлатформойСамозанятые" Тогда
		
		Если Организация = Параметр Тогда
			ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
		КонецЕсли
		
	ИначеЕсли ИмяСобытия = "ИзменениеСтавокУСННалогиИОтчеты" Тогда 
		
		ОбработатьИзменениеСтавокУСН(Параметр);
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.Страница_СистемаНалогообложения Тогда
		
		Если Не ЗначениеЗаполнено(ДатаИзменения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Применяется с'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "ДатаИзменения", Отказ);
		КонецЕсли;
		
		ДатаНачалаПрименения = Перечисления.СистемыНалогообложения.ДатаНачалаПрименения(
			НастройкиСистемыНалогообложения.СистемаНалогообложения, НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент);
		Если ДатаНачалаПрименения <> Неопределено И ДатаИзменения < ДатаНачалаПрименения Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Система налогообложения ""%1"" применяется с %2'"),
				НастройкиСистемыНалогообложения.СистемаНалогообложения,
				Формат(ДатаНачалаПрименения, "ДЛФ=D"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "ДатаИзменения", Отказ);
		КонецЕсли;
		
		НастройкиСистемыНалогообложенияФормы.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	
	Если Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.Страница_УСН Тогда
		НастройкиУчетаУСНФормы.ПроверитьЗаполнениеНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПерсонализированныеПредложенияСервисовКлиент.ПерейтиПоСсылкеБаннера(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Баннер, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередСменойОрганизации", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ПрочитатьНастройкиОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	РазблокироватьДанныеДляРедактирования(, УникальныйИдентификатор); // Все разблокируем
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	Если ПустаяСтрока(РезультатБлокировки) Тогда
		ПодготовитьФормуНастройкиСписка();
	КонецЕсли;
	
	Параметры.Организация = Организация;
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // Незачем очищать
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияПриИзменении(Элемент)
	
	ИмяРегистра = ИмяРегистра(Элемент.Имя);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПредставленияДатыИзменения(ДатаИзменения, ИмяРегистра));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРегистра = ИмяРегистра(ТекущийЭлемент.Имя);
	
	ПараметрыВыбора = ПараметрыВыбораПериодаНастройки(ДатаИзменения, ИмяРегистра);
	
	Если ПараметрыВыбора.ИмяФормы <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			СтрШаблон("ОбщаяФорма.%1", ПараметрыВыбора.ИмяФормы),
			ПараметрыВыбора,
			ЭтотОбъект, , , ,
			Новый ОписаниеОповещения("ПериодЗавершениеВыбора", ЭтотОбъект, ИмяРегистра));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияСтрокойОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияЧисломПриИзменении(Элемент)
	
	ДатаИзменения = Дата(ДатаИзмененияЧислом, 1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ЗакрытьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные.Служебный Тогда
		Элементы.Список.ОтборСтрок = Новый ФиксированнаяСтруктура("Служебный", Ложь);
		ПолныйСписок = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Идентификатор = ТекущиеДанные.Идентификатор;
	ИмяСтраницы   = "Страница_" + Идентификатор;
	
	НеиспользуемаяНастройка = СписокНеиспользуемыхНастроек.НайтиПоЗначению(Идентификатор) <> Неопределено;
	
	Если Элементы.Найти(ИмяСтраницы) = Неопределено ИЛИ НеиспользуемаяНастройка Тогда
		Заголовок_ = ?(ЗначениеЗаполнено(ТекущиеДанные.ПолноеНаименование), ТекущиеДанные.ПолноеНаименование, ТекущиеДанные.Наименование);
		Если ТекущиеДанные.ЕстьПодстроки Тогда
			ТекущаяСтраница = Элементы.Страница_Таблица;
		Иначе
			ТекущаяСтраница = Элементы.Страница_Флажок;
			Флажок = ТекущиеДанные.Включен;
			Элементы.Флажок.ТолькоПросмотр = НЕ ТекущиеДанные.ВключаетсяПользователем;
		КонецЕсли;
		Элементы.СписокПодчиненный.ОтборСтрок = Новый ФиксированнаяСтруктура("Родитель", ТекущиеДанные.Ссылка);
	Иначе
		ТекущаяСтраница = Элементы[ИмяСтраницы];
	КонецЕсли;
	
	Элементы.СтраницыНастроек.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Элементы.СписокПодчиненный.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	
	РезультатДетальнойНастройки = РезультатЗакрытия;
	
	Если ТипЗнч(РезультатДетальнойНастройки) = Тип("Массив") Тогда
		ОбработатьРезультатДетальнойНастройки(ВыбраннаяСтрока, РезультатДетальнойНастройки);
	КонецЕсли;
	
	Строка = Список.НайтиПоИдентификатору(Элементы.Список.ТекущаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьСписокНастройкиНалоговОтчетов(Строка);
	ОповеститьОбИзмененииНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПодчиненный

&НаКлиенте
Процедура Список_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Лев(Строка(Поле.Имя), 18) = "ДетальнаяНастройка" Тогда
		
		Строка = СписокПодчиненный.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если Строка = Неопределено Или Не Строка.ЕстьДетальнаяНастройка Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		Если Строка.Ключ <> "" Тогда
			Родитель = Список.НайтиСтроки(Новый Структура("Ссылка", Строка.Родитель));
			ПредметНастройки = Строка.Ключ;
			НалогОтчет = Родитель[0].Наименование + " (" + Строка.Наименование + ")";
		ИначеЕсли ТипЗнч(Строка.Ссылка) = Тип("ПеречислениеСсылка.ВидыПодакцизныхТоваров") Тогда
			ПредметНастройки = Строка.Ссылка;
			НалогОтчет       = Строка.Родитель;
		Иначе
			ПредметНастройки = Строка.Ссылка;
			НалогОтчет       = Строка.Родитель;
		КонецЕсли;
		ПараметрыФормы.Вставить("ПредметНастройки",                 ПредметНастройки);
		ПараметрыФормы.Вставить("НалогОтчет",                       НалогОтчет);
		ПараметрыФормы.Вставить("АдресЗначенияДетальнойНастройки",  АдресЗначенияДетальнойНастройки);
		ПараметрыФормы.Вставить("АдресПараметрыДетальнойНастройки", АдресПараметрыДетальнойНастройки);
		ПараметрыФормы.Вставить("ТолькоПросмотр",                   Элементы.СписокПодчиненный.ТолькоПросмотр);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыбраннаяСтрока",   ВыбраннаяСтрока);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("СписокВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("РегистрСведений.НалогиОтчеты.Форма.ДетальнаяНастройка", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПодчиненныйВключенПриИзменении(Элемент)
	
	Строка = СписокПодчиненный.НайтиПоИдентификатору(Элементы.СписокПодчиненный.ТекущаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Включен = Ложь;
	
	ОтборСтрок = Новый Структура("Родитель, Включен", Строка.Родитель, Истина);
	Строки = СписокПодчиненный.НайтиСтроки(ОтборСтрок);
	Если Строки.Количество() > 0 Тогда
		Включен = Истина
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Ссылка", Строка.Родитель);
	Строки = Список.НайтиСтроки(ОтборСтрок);
	Если Строки.Количество() > 0 Тогда
		Строки[0].Включен = Включен;
		СохранитьСписокНастройкиНалоговОтчетов(Строки[0]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПанелей

#Область ОбработчикиПанели_СистемаНалогообложения

&НаКлиенте
Процедура СистемаНалогообложенияПредставлениеПриИзменении(Элемент)
	
	НастройкиСистемыНалогообложенияФормыКлиент.СистемаНалогообложенияПредставлениеПриИзменении(ЭтотОбъект, Элемент);
	
	ИмяРаздела = "НастройкиСистемыНалогообложения";
	ОтобразитьПериоды(ИмяРаздела);
	УправлениеФормой(ЭтотОбъект, ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложенияПереходногоПериодаУСНПриИзменении(Элемент)
	
	НастройкиСистемыНалогообложенияФормыКлиент.ПоложенияПереходногоПериодаУСНПриИзменении(ЭтотОбъект, Элемент);
	ОтобразитьПериоды("НастройкиСистемыНалогообложения");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСистемыНалогообложенияПриИзменении(Элемент)
	
	ОтобразитьПериоды("НастройкиСистемыНалогообложения");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПанели_НалогНаПрибыль

&НаКлиенте
Процедура СтавкаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтобразитьПериоды("СтраховыеВзносы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяютсяРазныеСтавкиНалогаНаПрибыльПриИзменении(Элемент)
	
	НастройкиУчетаНалогаНаПрибыльФормыКлиент.ПоложенияПереходногоПериодаУСНПриИзменении(ЭтотОбъект, Элемент);
	ОтобразитьПериоды("НастройкиУчетаНалогаНаПрибыль");
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкиНалогаНаПрибыльВБюджетСубъектовРФ(Команда)
	
	НастройкиУчетаНалогаНаПрибыльФормыКлиент.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныеГруппыРеализацииПродукцииУслуг(Команда)
	
	НастройкиУчетаНалогаНаПрибыльФормыКлиент.НоменклатурныеГруппыРеализацииПродукцииУслуг(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереченьПрямыхРасходов(Команда)
	
	НастройкиУчетаНалогаНаПрибыльФормыКлиент.ПереченьПрямыхРасходов(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУчетаНалогНаПрибыльПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОтобразитьПериоды("НастройкиУчетаНалогаНаПрибыль");
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУплатыНалогаПриИзменении(Элемент)
	
	НастройкиУчетаНалогаНаПрибыль.УплачиватьНалогПоГруппамОбособленныхПодразделений = (ПорядокПодачиДекларации = 1);
	Элементы.НалоговыеОрганыГруппОбособленныхПодразделений.Доступность = НастройкиУчетаНалогаНаПрибыль.УплачиватьНалогПоГруппамОбособленныхПодразделений;
	ОтобразитьПериоды("НастройкиУчетаНалогаНаПрибыль");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыеОрганыГруппОбособленныхПодразделений(Команда)
	
	УчетОбособленныхПодразделенийКлиент.НалоговыеОрганыГруппОбособленныхПодразделений(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПанели_НДФЛ_Предприниматель

&НаКлиенте
Процедура ВестиУчетПоВидамДеятельностиПриИзменении(Элемент)
	
	НастройкиУчетаНДФЛФормыКлиент.ВестиУчетПоВидамДеятельностиПриИзменении(ЭтотОбъект, Элемент);
	ОтобразитьПериоды("НастройкиУчетаНДФЛ");
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыВключаютсяВДоходыВПериодеПолученияПриИзменении(Элемент)
	
	НастройкиУчетаНДФЛФормыКлиент.АвансыВключаютсяВДоходыВПериодеПолученияПриИзменении(ЭтотОбъект, Элемент);
	ОтобразитьПериоды("НастройкиУчетаНДФЛ");
	
КонецПроцедуры

&НаКлиенте
Процедура ДляПризнанияРасходовТребуетсяПолучениеДоходаПриИзменении(Элемент)
	
	НастройкиУчетаНДФЛФормыКлиент.ДляПризнанияРасходовТребуетсяПолучениеДоходаПриИзменении(ЭтотОбъект, Элемент);
	ОтобразитьПериоды("НастройкиУчетаНДФЛ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнаватьРасходыПоОперациямПрошлогоГодаПриИзменении(Элемент)
	
	НастройкиУчетаНДФЛФормыКлиент.ПризнаватьРасходыПоОперациямПрошлогоГода(ЭтотОбъект, Элемент);
	ОтобразитьПериоды("НастройкиУчетаНДФЛ");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУчетаНДФЛПриИзменении(Элемент)
	
	ОтобразитьПериоды("НастройкиУчетаНДФЛ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеВидыДеятельности(Команда)
	
	НастройкиУчетаНДФЛФормыКлиент.ВсеВидыДеятельности(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПанели_НДС

&НаКлиенте
Процедура СложныйУчетНДСПриИзменении(Элемент)
	
	НастройкиУчетаНДСФормыКлиент.СложныйУчетНДСПриИзменении(ЭтотОбъект, Элемент);
	ОтобразитьПериоды("НастройкиУчетаНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура УпрощенныйУчетНДСПриИзменении(Элемент)
	
	НастройкиУчетаНДСФормыКлиент.УпрощенныйУчетНДСПриИзменении(ЭтотОбъект, Элемент);
	ОтобразитьПериоды("НастройкиУчетаНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУчетаНДСПриИзменении(Элемент)
	
	ОтобразитьПериоды("НастройкиУчетаНДС");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПанели_УСН

&НаКлиенте
Процедура СтавкаНалогаУСНИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность   = Истина;
	ОтобразитьПериоды("НастройкиУчетаУСН");
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаПриИзменении(Элемент)
	
	ОтобразитьПериоды("НастройкиУчетаУСН");
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОтраженияАвансаПриИзменении(Элемент)
	
	НастройкиУчетаУСНФормыКлиент.ПорядокОтраженияАвансаПриИзменении(ЭтотОбъект);
	ОтобразитьПериоды("НастройкиУчетаУСН");
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОтраженияАвансаУСНОчистка(Элемент, СтандартнаяОбработка)
	
	НастройкиУчетаУСНФормыКлиент.ПорядокОтраженияАвансаУСНОчистка(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыеКаникулыПриИзменении(Элемент)
	
	НастройкиУчетаУСНФормыКлиент.НалоговыеКаникулыПриИзменении(ЭтотОбъект);
	ОтобразитьПериоды("НастройкиУчетаУСН");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередачаВПроизводствоПриИзменении(Элемент)
	
	НастройкиУчетаУСНФормыКлиент.ПередачаВПроизводствоПриИзменении(ЭтотОбъект);
	ОтобразитьПериоды("НастройкиУчетаУСН");
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшатьНаНЗППриИзменении(Элемент)
	
	НастройкиУчетаУСНФормыКлиент.УменьшатьНаНЗППриИзменении(ЭтотОбъект);
	ОтобразитьПериоды("НастройкиУчетаУСН");
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПриИзменении(Элемент)
	
	НастройкиУчетаУСНФормыКлиент.РеализацияПриИзменении(ЭтотОбъект);
	ОтобразитьПериоды("НастройкиУчетаУСН");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеДоходаПриИзменении(Элемент)
	
	НастройкиУчетаУСНФормыКлиент.ПолучениеДоходаПриИзменении(ЭтотОбъект);
	ОтобразитьПериоды("НастройкиУчетаУСН");
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнаниеРасходаПриИзменении(Элемент)
	
	НастройкиУчетаУСНФормыКлиент.ПризнаниеРасходаПриИзменении(ЭтотОбъект);
	ОтобразитьПериоды("НастройкиУчетаУСН");
	
КонецПроцедуры

&НаКлиенте
Процедура ДопРасходыПризнаниеРасходаПриИзменении(Элемент)
	
	НастройкиУчетаУСНФормыКлиент.ДопРасходыПризнаниеРасходаПриИзменении(ЭтотОбъект);
	ОтобразитьПериоды("НастройкиУчетаУСН");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаможенныеПлатежиПризнаниеРасходаПриИзменении(Элемент)
	
	НастройкиУчетаУСНФормыКлиент.ТаможенныеПлатежиПризнаниеРасходаПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУчетаУСНПриИзменении(Элемент)
	
	ОтобразитьПериоды("НастройкиУчетаУСН");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтавкиУСНВВашемРегионеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "УСНВВашемРегионе" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Режим", "НалогиИОтчеты");
		ПараметрыФормы.Вставить("Организация", Параметры.Организация);
		ПараметрыФормы.Вставить("ПрименяетсяУСНДоходы", ПрименяетсяУСНДоходы);
		ПараметрыФормы.Вставить("ПрименяетсяУСНДоходыРасходы", ПрименяетсяУСНДоходыМинусРасходы);
		ПараметрыФормы.Вставить("ПоказыватьПрименить", ПравоРедактированияНастроек);
		ОткрытьФорму("Отчет.УСНВВашемРегионе.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПанели_СтраховыеВзносы_Предприниматель

&НаКлиенте
Процедура УплачиватьДобровольныеВзносыВФССПриИзменении(Элемент)
	
	ОтобразитьПериоды("НастройкиУчетаСтраховыхВзносовИП");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПанели_СтраховыеВзносы

&НаКлиенте
Процедура СтраховыеВзносыПриИзменении(Элемент)
	
	Модифицированность   = Истина;
	ОтобразитьПериоды("СтраховыеВзносы");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУчетаСтраховыхВзносовПриИзменении(Элемент)
	
	Если НЕ НастройкиУчетаСтраховыхВзносов.ИспользуютсяРаботыСДосрочнойПенсией Тогда
		НастройкиУчетаСтраховыхВзносов.ПрименяютсяРезультатыСпециальнойОценкиУсловийТруда = Ложь;
	КонецЕсли;
	
	ЗаписатьИзмененияНепосредственно("НастройкиУчетаСтраховыхВзносов");
	ОбработатьИзменениеДополнительныеСтраховыеВзносы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречисляютсяДобровольныеСтраховыеВзносыПриИзменении(Элемент)
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ОбработатьИзменениеДобровольныеСтраховыеВзносы(ТекущиеДанные.Ссылка);
	СохранитьСписокНастройкиНалоговОтчетов(ТекущиеДанные);
	ОповеститьОбИзмененииНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПрименяютсяЛьготныеТарифыВПодразделенияхНажатие(Элемент)
	
	Если НЕ НастройкиУчетаСтраховыхВзносов.ПрименяютсяЛьготныеТарифыВПодразделениях Тогда
		ЗаписатьИзмененияНепосредственно("НастройкиУчетаСтраховыхВзносов");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Вид, Организация", "ЛьготныеТарифы", Организация);
	ОткрытьФорму("РегистрСведений.НастройкиУчетаЗарплаты.Форма.ФормаДополнительныхДанных", ПараметрыФормы,ЭтаФорма);

КонецПроцедуры


&НаКлиенте
Процедура ГиперссылкаДолжностиНажатие(Элемент)
	
	ПараметрыДолжностей = Новый Структура("ИспользуетсяТрудФармацевтов, ИспользуетсяТрудЧленовЛетныхЭкипажей, ИспользуетсяТрудШахтеров", 
	                                      НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудФармацевтов,
	                                      НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудЧленовЛетныхЭкипажей,
	                                      НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудШахтеров);
										  
	ПараметрыФормы = Новый Структура("Вид, ПараметрыДолжностей", "Должности", ПараметрыДолжностей);
	ОткрытьФорму("РегистрСведений.НастройкиУчетаЗарплаты.Форма.ФормаДополнительныхДанных", ПараметрыФормы,ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПанели_НалогНаИмущество

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОтобразитьПериоды("СтавкиНалогаНаИмущество");
	
КонецПроцедуры

&НаКлиенте
Процедура СнижениеСтавкиНалогаНаИмуществоПриИзменении(Элемент)
	
	СтавкиНалогаНаИмуществоФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);
	ОтобразитьПериоды("СтавкиНалогаНаИмущество");
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаДвижимоеИмуществоПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОтобразитьПериоды("СтавкиНалогаНаИмущество");
	
КонецПроцедуры

&НаКлиенте
Процедура СнижениеНалоговойСтавкиДвижимоеИмуществоПриИзменении(Элемент)
	
	СтавкиНалогаНаИмуществоФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);
	ОтобразитьПериоды("СтавкиНалогаНаИмущество");
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвобождениеОтНалогаНаИмуществоПриИзменении(Элемент)
	
	СтавкиНалогаНаИмуществоФормыКлиент.ОсвобождениеОтНалогаНаИмуществоПриИзменении(ЭтотОбъект, Элемент);
	СтавкиНалогаНаИмуществоФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);
	ОтобразитьПериоды("СтавкиНалогаНаИмущество");
	
КонецПроцедуры

&НаКлиенте
Процедура КодЛьготыОсвобождениеОтНалогаНаИмуществоПриИзменении(Элемент)
	
	ОтобразитьПериоды("СтавкиНалогаНаИмущество");
	
КонецПроцедуры

&НаКлиенте
Процедура КодЛьготыОсвобождениеОтНалогаНаИмуществоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтавкиНалогаНаИмуществоФормыКлиент.КодЛьготыОсвобождениеОтНалогаНаИмуществоНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	ОтобразитьПериоды("СтавкиНалогаНаИмущество");
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвобождениеОтНалогообложенияДвижимогоИмуществаПриИзменении(Элемент)
	
	ОтобразитьПериоды("СтавкиНалогаНаИмущество");
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеСуммыНалогаНаИмуществоВПроцентахПриИзменении(Элемент)
	
	СтавкиНалогаНаИмуществоФормыКлиент.УменьшениеСуммыНалогаНаИмуществоВПроцентахПриИзменении(ЭтотОбъект, Элемент);
	ОтобразитьПериоды("СтавкиНалогаНаИмущество");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентУменьшенияНалогаНаИмуществоПриИзменении(Элемент)
	
	СтавкиНалогаНаИмуществоФормыКлиент.ПроцентУменьшенияНалогаНаИмуществоПриИзменении(ЭтотОбъект, Элемент);
	ОтобразитьПериоды("СтавкиНалогаНаИмущество");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентУменьшенияНалогаНаИмуществоИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	ОтобразитьПериоды("СтавкиНалогаНаИмущество");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиВспомогательныхПанелей_Таблица_Флажок

&НаКлиенте
Процедура ФлажокПриИзменении(Элемент)
	
	Строка = Список.НайтиПоИдентификатору(Элементы.Список.ТекущаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка.Включен = Флажок;
	
	СохранитьСписокНастройкиНалоговОтчетов(Строка);
	ОповеститьОбИзмененииНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеВключить(Команда)
	
	Строка = Список.НайтиПоИдентификатору(Элементы.Список.ТекущаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Родитель", Строка.Ссылка);
	ПодчиненныеСтроки = СписокПодчиненный.НайтиСтроки(ОтборСтрок);
	Для Каждого ПодчиненнаяСтрока ИЗ ПодчиненныеСтроки Цикл
		ПодчиненнаяСтрока.Включен = Истина;
	КонецЦикла;
	
	Строка = СписокПодчиненный.НайтиПоИдентификатору(Элементы.СписокПодчиненный.ТекущаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Ссылка", Строка.Родитель);
	Строки = Список.НайтиСтроки(ОтборСтрок);
	Если Строки.Количество() > 0 Тогда
		Строки[0].Включен = Истина;
		СохранитьСписокНастройкиНалоговОтчетов(Строки[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеВыключить(Команда)
	
	Строка = Список.НайтиПоИдентификатору(Элементы.Список.ТекущаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Родитель", Строка.Ссылка);
	ПодчиненныеСтроки = СписокПодчиненный.НайтиСтроки(ОтборСтрок);
	Для Каждого ПодчиненнаяСтрока ИЗ ПодчиненныеСтроки Цикл
		ПодчиненнаяСтрока.Включен = Ложь;
	КонецЦикла;
	
	Строка = СписокПодчиненный.НайтиПоИдентификатору(Элементы.СписокПодчиненный.ТекущаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Ссылка", Строка.Родитель);
	Строки = Список.НайтиСтроки(ОтборСтрок);
	Если Строки.Количество() > 0 Тогда
		Строки[0].Включен = Ложь;
		СохранитьСписокНастройкиНалоговОтчетов(Строки[0]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПанели_НДФЛ

&НаКлиенте
Процедура УчетнаяПолитикаПоНДФЛПриИзменении(Элемент)
	
	ЗаписатьИзмененияНепосредственно("УчетнаяПолитикаПоНДФЛ");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбъектыСОсобымПорядкомНалогообложения(Команда)
	
	ПараметрыФормы  = Новый Структура("Отбор", Новый Структура("Организация", Организация));
	ОткрытьФорму("РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ФормаСписка",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияТранспортныхСредств(Команда)
	
	ПараметрыФормы  = Новый Структура("Отбор", Новый Структура("Организация", Организация));
	ОткрытьФорму("РегистрСведений.РегистрацияТранспортныхСредств.ФормаСписка",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура СтавкиТранспортногоНалога(Команда)
	
	ОткрытьФорму("РегистрСведений.СтавкиТранспортногоНалога.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияЗемельныхУчастков(Команда)
	
	ПараметрыФормы  = Новый Структура("Отбор", Новый Структура("Организация", Организация));
	ОткрытьФорму("РегистрСведений.РегистрацияЗемельныхУчастков.ФормаСписка",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУплатыНалоговНаМестах(Команда)
	
	Строка = Список.НайтиПоИдентификатору(Элементы.Список.ТекущаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Налог = Строка.Ссылка;
	
	ПараметрыФормы = Новый Структура("Налог, Отбор",
		Налог,
		Новый Структура("Организация", Организация));
	
	ОткрытьФорму("РегистрСведений.ПорядокУплатыНалоговНаМестах.ФормаСписка",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособыОтраженияРасходов(Команда)
		
	Строка = Список.НайтиПоИдентификатору(Элементы.Список.ТекущаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Налог = Строка.Идентификатор;
	
	ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов." + Налог);
	ПараметрыФормы = Новый Структура("ВидНалога", ВидНалога);
	
	ОткрытьФорму("РегистрСведений.СпособыОтраженияРасходовПоНалогам.ФормаСписка",
		ПараметрыФормы,
		ЭтаФорма,
		ВидНалога);
	
КонецПроцедуры

&НаКлиенте
Процедура Патенты(Команда)
	
	ПараметрыФормы  = Новый Структура("Отбор", Новый Структура("Владелец", Организация));
	ОткрытьФорму("Справочник.Патенты.ФормаСписка", 
		ПараметрыФормы, 
		ЭтаФорма, 
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДеятельностиЕНВД(Команда)
	
	ПараметрыФормы  = Новый Структура("Отбор", Новый Структура("Владелец", Организация));
	ОткрытьФорму("Справочник.ВидыДеятельностиЕНВД.ФормаСписка", 
		ПараметрыФормы, 
		ЭтаФорма, 
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыеТочки(Команда)
	
	ПараметрыФормы  = Новый Структура("Отбор", Новый Структура("Организация", Организация));
	ОткрытьФорму("Справочник.ТорговыеТочки.ФормаСписка", 
		ПараметрыФормы, 
		ЭтаФорма, 
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	
	ИмяРегистра = ИмяРегистра(ТекущийЭлемент.Имя);
	Отбор = Новый Структура("Организация", Организация);
	Если ИмяРегистра = "СтраховыеВзносы" Тогда
		Отбор.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация);
		ОткрытьФорму("РегистрСведений.НастройкиУчетаЗарплаты.Форма.ФормаСпискаСтраховыхВзносов", Новый Структура("Отбор, ВедущийОбъект, ТекущийПериод", Отбор, Организация, ТекущаяДата));
	Иначе
		ОткрытьФорму(СтрШаблон("РегистрСведений.%1.Форма.ФормаСписка", ИмяРегистра), Новый Структура("Отбор, ВедущийОбъект, ТекущийПериод", Отбор, Организация, ТекущаяДата));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура _ОК(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ТекущийЭлемент.Имя, "ОК_") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистра = ИмяРегистра(ТекущийЭлемент.Имя);
	ЗаписатьИзменения(ИмяРегистра);
	ОповеститьОбИзмененииНастроек(Истина);
	ОтобразитьИсторию(ИмяРегистра);
	
	Если ИмяРегистра = "НастройкиСистемыНалогообложения" Тогда
		Разворачивать = ПолныйСписок;
		ПрочитатьНастройкиОрганизации();
		Разворачивать = Ложь;
		
		НастройкиСистемыНалогообложенияФормыКлиент.ОбновитьИнтерфейсПослеЗаписиСистемыНалогообложения(
			Новый Структура("ИспользуемыеСистемыНалогообложенияПередЗаписью, ИспользуемыеСистемыНалогообложенияПослеЗаписи",
							ИспользуемыеСистемыНалогообложенияПередЗаписью, ИспользуемыеСистемыНалогообложенияПослеЗаписи));
		
	ИначеЕсли ИмяРегистра = "НастройкиУчетаНДС" Тогда
	
		НастройкиУчетаНДСФормыКлиент.ОбновитьИнтерфейсПослеЗаписиНастройкиУчетаНДС(
			Новый Структура("ИспользуетсяРаздельныйУчетНДСПередЗаписью, ИспользуетсяРаздельныйУчетНДСПослеЗаписи",
							ИспользуетсяРаздельныйУчетНДСПередЗаписью, ИспользуетсяРаздельныйУчетНДСПослеЗаписи));
		
	КонецЕсли;
	
	Активизировать();

	ПроведениеКлиент.ОжидатьПереключенияОтложенногоПроведения(РезультатЗаданияПереключенияОтложенногоПроведения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЧтениеНастроекУчета

&НаСервере
Процедура ОписатьНастройкиУчета()
	
	Список.Очистить();
	
	СкрытыеОтчеты = 0;
	
	// Есть у всех типов организаций
	// содержит в качестве вложений набор налогов
	// т.н. "Описание системы налогообложения"
	НоваяСтрока = Список.Добавить();
	НоваяСтрока.Наименование  = НСтр("ru = 'Система налогообложения'");
	НоваяСтрока.Идентификатор = "СистемаНалогообложения";
	НоваяСтрока.Включен      = Истина;
	НоваяСтрока.Порядок = 100;
	
	// Описание системы налогообложения
	Если ЭтоЮрЛицо Тогда
		Если НастройкиСистемыНалогообложения.ПлательщикНалогаНаПрибыль Тогда
			НоваяСтрока = Список.Добавить();
			НоваяСтрока.Наименование  = НСтр("ru = 'Налог на прибыль'");
			НоваяСтрока.Идентификатор = "НалогНаПрибыль";
			НоваяСтрока.Включен      = Истина;
			НоваяСтрока.Порядок = 101;
		ИначеЕсли СписокНедействующихНастроек.НайтиПоЗначению("ПлательщикНалогаНаПрибыль") <> Неопределено Тогда
			НоваяСтрока = Список.Добавить();
			НоваяСтрока.Наименование  = НСтр("ru = 'Налог на прибыль'");
			НоваяСтрока.Идентификатор = "НалогНаПрибыль";
			НоваяСтрока.Включен      = Истина;
			НоваяСтрока.Порядок = 101;
			НоваяСтрока.БылВключен   = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиСистемыНалогообложения.ПрименяетсяУСН Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'УСН'");
		НоваяСтрока.Идентификатор = "УСН";
		НоваяСтрока.Включен      = Истина;
		НоваяСтрока.Порядок = 102;
	ИначеЕсли СписокНедействующихНастроек.НайтиПоЗначению("ПрименяетсяУСН") <> Неопределено Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'УСН'");
		НоваяСтрока.Идентификатор = "УСН";
		НоваяСтрока.Включен      = Истина;
		НоваяСтрока.Порядок = 102;
		НоваяСтрока.БылВключен   = Истина;
	КонецЕсли;
	Если НастройкиСистемыНалогообложения.ПлательщикНДФЛ Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'НДФЛ (ИП)'");
		НоваяСтрока.Идентификатор = "НДФЛ_Предприниматель";
		НоваяСтрока.Включен      = Истина;
		НоваяСтрока.Порядок = 103;
	ИначеЕсли СписокНедействующихНастроек.НайтиПоЗначению("ПлательщикНДФЛ") <> Неопределено Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'НДФЛ (ИП)'");
		НоваяСтрока.Идентификатор = "НДФЛ_Предприниматель";
		НоваяСтрока.Включен      = Истина;
		НоваяСтрока.Порядок = 103;
		НоваяСтрока.БылВключен   = Истина;
	КонецЕсли;
	
	Если НастройкиСистемыНалогообложения.ПлательщикНДС Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'НДС'");
		НоваяСтрока.Идентификатор = "НДС";
		НоваяСтрока.Включен      = Истина;
		НоваяСтрока.Порядок = 104;
	ИначеЕсли СписокНедействующихНастроек.НайтиПоЗначению("ПлательщикНДС") <> Неопределено Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'НДС'");
		НоваяСтрока.Идентификатор = "НДС";
		НоваяСтрока.Включен      = Истина;
		НоваяСтрока.Порядок = 104;
		НоваяСтрока.БылВключен   = Истина;
	КонецЕсли;
	Если НастройкиСистемыНалогообложения.ПлательщикЕНВД Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'ЕНВД'");
		НоваяСтрока.Идентификатор = "ЕНВД";
		НоваяСтрока.Включен      = Истина;
		НоваяСтрока.Порядок = 105;
	ИначеЕсли СписокНедействующихНастроек.НайтиПоЗначению("ПлательщикЕНВД") <> Неопределено Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'ЕНВД'");
		НоваяСтрока.Идентификатор = "ЕНВД";
		НоваяСтрока.Включен      = Истина;
		НоваяСтрока.Порядок = 105;
		НоваяСтрока.БылВключен   = Истина;
	КонецЕсли;
	Если НЕ ЭтоЮрЛицо Тогда
		Если НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент Тогда
			НоваяСтрока = Список.Добавить();
			НоваяСтрока.Наименование  = НСтр("ru = 'Патенты'");
			НоваяСтрока.Идентификатор = "Патент";
			НоваяСтрока.Включен      = Истина;
			НоваяСтрока.Порядок = 106;
		ИначеЕсли СписокНедействующихНастроек.НайтиПоЗначению("ПрименяетсяУСНПатент") <> Неопределено Тогда
			НоваяСтрока = Список.Добавить();
			НоваяСтрока.Наименование  = НСтр("ru = 'Патенты'");
			НоваяСтрока.Идентификатор = "Патент";
			НоваяСтрока.Включен      = Истина;
			НоваяСтрока.Порядок = 106;
			НоваяСтрока.БылВключен   = Истина;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока = Список.Добавить();
	НоваяСтрока.Наименование  = НСтр("ru = 'Торговый сбор'");
	НоваяСтрока.Идентификатор = "ТорговыйСбор";
	НоваяСтрока.Включен      = Истина;
	НоваяСтрока.Порядок = 107;
	НоваяСтрока.БылВключен   = СписокНедействующихНастроек.НайтиПоЗначению("ТорговыйСбор") <> Неопределено;
	
	Если РегистрыСведений.НастройкиСистемыНалогообложения.ПлательщикФиксированныхВзносов(НастройкиСистемыНалогообложения) Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'Страховые взносы (ИП)'");
		НоваяСтрока.Идентификатор = "СтраховыеВзносы_Предприниматель";
		НоваяСтрока.Включен      = Истина;
		НоваяСтрока.Порядок = 108;
	ИначеЕсли СписокНедействующихНастроек.НайтиПоЗначению("ПлательщикФиксированныхВзносов") <> Неопределено Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'Страховые взносы (ИП)'");
		НоваяСтрока.Идентификатор = "СтраховыеВзносы_Предприниматель";
		НоваяСтрока.Включен      = Истина;
		НоваяСтрока.Порядок = 108;
		НоваяСтрока.БылВключен   = Истина;
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'Налог на имущество'");
		НоваяСтрока.Идентификатор = "НалогНаИмущество";
		Если НастройкиСистемыНалогообложения.ПрименяетсяУСН 
			И СписокНедействующихНастроек.НайтиПоЗначению("ПлательщикНалогаНаПрибыль") = Неопределено Тогда
			НоваяСтрока.Включен      = Ложь;
			НоваяСтрока.Порядок = 301;
		Иначе
			Если СписокНеиспользуемыхНастроек.НайтиПоЗначению("НалогНаИмущество") = Неопределено Тогда
				НоваяСтрока.Включен      = Истина;
				НоваяСтрока.Порядок = 109;
			Иначе
				НоваяСтрока.Включен      = Ложь;
				НоваяСтрока.Порядок = 301;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВедетсяУчетЗарплаты Тогда
		Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
			НоваяСтрока = Список.Добавить();
			НоваяСтрока.Наименование  = НСтр("ru = 'НДФЛ'");
			НоваяСтрока.Идентификатор = "НДФЛ_Агент";
			НоваяСтрока.Включен      = ЭтоЮрЛицо ИЛИ УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация);
			НоваяСтрока.Порядок = 201;
		КонецЕсли;
	КонецЕсли;
	
	Если ВедетсяУчетЗарплаты Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'Страховые взносы'");
		НоваяСтрока.Идентификатор = "СтраховыеВзносы";
		НоваяСтрока.Включен      = ЭтоЮрЛицо ИЛИ УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация);
		НоваяСтрока.Порядок = 202;
	КонецЕсли;
	
	// Прочие налоги, не описывающие систему налогообложения
	// однако уплачиваемые организацией, при соблюдении некоторых условий
	
	Если ЭтоЮрЛицо Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'Транспортный налог'");
		НоваяСтрока.Идентификатор = "ТранспортныйНалог";
		НоваяСтрока.Включен      = Ложь;
		НоваяСтрока.Порядок = 302;
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'Земельный налог'");
		НоваяСтрока.Идентификатор = "ЗемельныйНалог";
		НоваяСтрока.Включен      = Ложь;
		НоваяСтрока.Порядок = 303;
	КонецЕсли;
	
	НоваяСтрока = Список.Добавить();
	НоваяСтрока.Наименование  = НСтр("ru = 'Косвенные налоги (импорт)'");
	НоваяСтрока.Идентификатор = "КосвенныеНалогиТамСоюз";
	НоваяСтрока.Включен      = Ложь;
	НоваяСтрока.Порядок = 304;
	
	// Прочие не обслуживаемые налоги и отчеты
	
	Если РегистрыСведений.НастройкиСистемыНалогообложения.ВозможнаРеализацияАлкогольнойПродукции(НастройкиСистемыНалогообложения)
		Или СписокНедействующихНастроек.НайтиПоЗначению("ДекларированиеАлкогольнойПродукции") <> Неопределено Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'Декларирование алкоголя'");
		НоваяСтрока.Идентификатор = "ДекларированиеАлкогольнойПродукции";
		НоваяСтрока.Включен      = Ложь;
		НоваяСтрока.Порядок = 305;
	КонецЕсли;
	
	Если РегистрыСведений.НастройкиСистемыНалогообложения.ВозможнаРеализацияПодакцизныхТоваров(НастройкиСистемыНалогообложения)
		Или СписокНедействующихНастроек.НайтиПоЗначению("Акцизы") <> Неопределено Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'Акцизы'");
		НоваяСтрока.Идентификатор = "Акцизы";
		НоваяСтрока.Включен      = Ложь;
		НоваяСтрока.Порядок = 306;
	КонецЕсли;
	
	НоваяСтрока = Список.Добавить();
	НоваяСтрока.Наименование  = НСтр("ru = 'Водный налог'");
	НоваяСтрока.Идентификатор = "ВодныйНалог";
	НоваяСтрока.Включен      = Ложь;
	НоваяСтрока.Порядок = 307;
	
	Если ЭтоЮрЛицо Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'Налог на игорный бизнес'");
		НоваяСтрока.Идентификатор = "НалогНаИгорныйБизнес";
		НоваяСтрока.Включен      = Ложь;
		НоваяСтрока.Порядок = 308;
	КонецЕсли;
	
	Если РегистрыСведений.НастройкиСистемыНалогообложения.ВозможенЕСХН(НастройкиСистемыНалогообложения)
		Или СписокНедействующихНастроек.НайтиПоЗначению("ЕСХН") <> Неопределено Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование       = НСтр("ru = 'ЕСХН'");
		НоваяСтрока.ПолноеНаименование = НСтр("ru = 'Единый сельскохозяйственный налог (ЕСХН)'");
		НоваяСтрока.Идентификатор      = "ЕСХН";
		НоваяСтрока.Включен            = Ложь;
		НоваяСтрока.Порядок = 309;
	КонецЕсли;
	
	Если РегистрыСведений.НастройкиСистемыНалогообложения.ВозможенНДПИ(НастройкиСистемыНалогообложения)
		Или СписокНедействующихНастроек.НайтиПоЗначению("НДПИ") <> Неопределено Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование       = НСтр("ru = 'НДПИ'");
		НоваяСтрока.ПолноеНаименование = НСтр("ru = 'Налог на добычу полезных ископаемых (НДПИ)'");
		НоваяСтрока.Идентификатор      = "НДПИ";
		НоваяСтрока.Включен            = Ложь;
		НоваяСтрока.Порядок = 310;
	КонецЕсли;
	
	НоваяСтрока = Список.Добавить();
	НоваяСтрока.Наименование  = НСтр("ru = 'Статистика'");
	НоваяСтрока.Идентификатор = "СтатистическаяОтчетность";
	НоваяСтрока.Включен      = Ложь;
	НоваяСтрока.Порядок = 400;
	
	НоваяСтрока = Список.Добавить();
	НоваяСтрока.Наименование  = НСтр("ru = 'Экологические платежи'");
	НоваяСтрока.Идентификатор = "ПлатаЗаНегативноеВоздействиеНаОкружающуюСреду";
	НоваяСтрока.Включен      = Ложь;
	НоваяСтрока.Порядок = 500;
	
	НоваяСтрока = Список.Добавить();
	НоваяСтрока.Наименование  = НСтр("ru = 'Экологический сбор'");
	НоваяСтрока.Идентификатор = "ЭкологическийСбор";
	НоваяСтрока.Включен      = Ложь;
	НоваяСтрока.Порядок = 501;
	
	НоваяСтрока = Список.Добавить();
	НоваяСтрока.Наименование  = НСтр("ru = 'Прочая отчетность в Росприроднадзор'");
	НоваяСтрока.Идентификатор = "Росприроднадзор";
	НоваяСтрока.Включен      = Ложь;
	НоваяСтрока.Порядок = 502;
	
	Если РегистрыСведений.НастройкиСистемыНалогообложения.ПрименяетсяЕдинаяУпрощеннаяДекларация(НастройкиСистемыНалогообложения)
		Или СписокНедействующихНастроек.НайтиПоЗначению("ЕдинаяУпрощеннаяДекларация") <> Неопределено Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование  = НСтр("ru = 'Единая (упрощенная) декларация'");
		НоваяСтрока.Идентификатор = "ЕдинаяУпрощеннаяДекларация";
		НоваяСтрока.Включен      = Ложь;
		НоваяСтрока.Порядок = 600;
	КонецЕсли;
	
	Если Не (ЭтоЮрЛицо Или НастройкиСистемыНалогообложения.ПлательщикНДФЛ) Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Идентификатор = "НДФЛ_ФизЛицо";
		НоваяСтрока.Наименование  = НСтр("ru = 'НДФЛ'");
		НоваяСтрока.ПолноеНаименование = НСтр("ru = 'Налог на доходы физических лиц'");
		НоваяСтрока.Включен      = Ложь;
		НоваяСтрока.Порядок      = 700;
	КонецЕсли;
	
	ПрочитатьИспользуемыеНастройки();
	
	Список.Сортировать("Включен Убыв, Порядок Возр");
	
	Для Каждого СтрокаСписка ИЗ Список Цикл
		Если НЕ СтрокаСписка.Включен Тогда
			СкрытыеОтчеты = СкрытыеОтчеты + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если СкрытыеОтчеты <> 0 Тогда
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Наименование = СтрШаблон(НСтр("ru = 'Все налоги и отчеты (еще %1)'"), СкрытыеОтчеты);
		НоваяСтрока.Служебный    = Истина;
		НоваяСтрока.Включен      = Истина;
		
		Если Разворачивать Тогда
			Элементы.Список.ОтборСтрок = Новый ФиксированнаяСтруктура("Служебный", Ложь);
		Иначе
			Элементы.Список.ОтборСтрок = Новый ФиксированнаяСтруктура("Включен", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ПолныйСписок = СкрытыеОтчеты = 0 И НЕ Разворачивать;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьУчетнуюПолитику()
	
	МенеджерЗаписиПериодическогоРегистра("НастройкиСистемыНалогообложения", , Организация);

	Если ЭтоЮрЛицо Тогда
		Если НастройкиСистемыНалогообложения.ПлательщикНалогаНаПрибыль Тогда
			МенеджерЗаписиПериодическогоРегистра("НастройкиУчетаНалогаНаПрибыль", , Организация);
		Иначе
			МенеджерЗаписиПериодическогоРегистра("НастройкиУчетаНалогаНаПрибыль", , Организация, ,Ложь);
		КонецЕсли;
		МенеджерЗаписиПериодическогоРегистра("СтавкиНалогаНаИмущество", , Организация);
	Иначе
		МенеджерЗаписиПериодическогоРегистра("НастройкиУчетаСтраховыхВзносовИП", , Организация);
		Если НастройкиСистемыНалогообложения.ПлательщикНДФЛ Тогда
			МенеджерЗаписиПериодическогоРегистра("НастройкиУчетаНДФЛ", , Организация);
		Иначе
			МенеджерЗаписиПериодическогоРегистра("НастройкиУчетаНДФЛ", , Организация, , Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиСистемыНалогообложения.ПлательщикНалогаНаПрибыль
		ИЛИ НастройкиСистемыНалогообложения.ПлательщикНДФЛ Тогда
		МенеджерЗаписиПериодическогоРегистра("НастройкиУчетаНДС", , Организация);
	Иначе
		МенеджерЗаписиПериодическогоРегистра("НастройкиУчетаНДС", , Организация, , Ложь);
	КонецЕсли;
	Если НастройкиСистемыНалогообложения.ПрименяетсяУСН Тогда
		МенеджерЗаписиПериодическогоРегистра("НастройкиУчетаУСН", , Организация);
	Иначе
		МенеджерЗаписиПериодическогоРегистра("НастройкиУчетаУСН", , Организация, , Ложь);
	КонецЕсли;
	
	Если ВедетсяУчетЗарплаты Тогда
		Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
			МенеджерЗаписиПериодическогоРегистра("СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев", , Организация);
			МенеджерЗаписиПериодическогоРегистра("ПрименяемыеТарифыСтраховыхВзносов", "ГоловнаяОрганизация", ГоловнаяОрганизация);
			МенеджерЗаписиРегистра("УчетнаяПолитикаПоНДФЛ", "ГоловнаяОрганизация" , ГоловнаяОрганизация);
			МенеджерЗаписиРегистра("НастройкиУчетаСтраховыхВзносов", , Организация);
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьСвязанныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОтдельнуюНастройкуУчетнойПолитики(ИмяРегистра)
	
	ОтборОрганизация = Новый Структура("Организация",Организация);
	
	Если ИмяРегистра = "ПрименяемыеТарифыСтраховыхВзносов" 
		ИЛИ ИмяРегистра = "СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев"
		ИЛИ ИмяРегистра = "СтраховыеВзносы" Тогда
		МенеджерЗаписиПериодическогоРегистра("ПрименяемыеТарифыСтраховыхВзносов", "ГоловнаяОрганизация", ГоловнаяОрганизация);
		МенеджерЗаписиПериодическогоРегистра("СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев",           , Организация);
		МенеджерЗаписиРегистра("НастройкиУчетаСтраховыхВзносов",                                       , Организация);
	ИначеЕсли ИмяРегистра = "УчетнаяПолитикаПоНДФЛ" ИЛИ ИмяРегистра = "НастройкиУчетаСтраховыхВзносов" Тогда
		МенеджерЗаписиРегистра("УчетнаяПолитикаПоНДФЛ", "ГоловнаяОрганизация", ГоловнаяОрганизация);
		МенеджерЗаписиРегистра("НастройкиУчетаСтраховыхВзносов",             , Организация);
	Иначе
		МенеджерЗаписиПериодическогоРегистра(ИмяРегистра, , Организация);
	КонецЕсли;
	
	Если ИмяРегистра = "НастройкиСистемыНалогообложения" Тогда
		НастройкиСистемыНалогообложенияФормы.ПодготовитьФормуНаСервере(ЭтотОбъект);
	ИначеЕсли ИмяРегистра = "НастройкиУчетаНалогаНаПрибыль" Тогда
		НастройкиУчетаНалогаНаПрибыльФормы.ПодготовитьФормуНаСервере(ЭтотОбъект);
	ИначеЕсли ИмяРегистра = "НастройкиУчетаУСН" Тогда
		СписокПатентов = НастройкиУчетаУСНФормыВызовСервера.СписокПатентов(Организация, НастройкиУчетаУСН.Период);
	ИначеЕсли ИмяРегистра = "НастройкиУчетаНДС" Тогда
		НастройкиУчетаНДСФормы.ПодготовитьФормуНаСервере(ЭтотОбъект);
	ИначеЕсли ИмяРегистра = "НастройкиУчетаНДФЛ" Тогда
		НастройкиУчетаНДФЛФормы.ПодготовитьФормуНаСервере(ЭтотОбъект);
	ИначеЕсли ИмяРегистра = "СтавкиНалогаНаИмущество" Тогда
		СтавкиНалогаНаИмуществоФормы.ПодготовитьФормуНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	ЗаполнитьСвязанныеРеквизиты(ИмяРегистра);
	
КонецПроцедуры

&НаСервере
Процедура МенеджерЗаписиПериодическогоРегистра(ИмяРегистра, ИмяОтбора = "Организация", ЗначениеОтбора, ПериодЗначений = Неопределено, Создавать = Истина)
	
	Если ПериодЗначений = Неопределено Тогда
		ПериодЗначений = ТекущаяДата;
	КонецЕсли;
	
	КлючЗаписи = КлючЗаписиДействующейУчетнойПолитики(ИмяРегистра, ИмяОтбора, ЗначениеОтбора, ПериодЗначений);
	Если КлючЗаписи = Неопределено Тогда
		
		Если НЕ ПравоРедактированияНастроек Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ Создавать Тогда
			Возврат;
		КонецЕсли;
		
		Если ИмяРегистра = "СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев" ИЛИ ИмяРегистра = "ПрименяемыеТарифыСтраховыхВзносов" Тогда
			УчетЗарплаты.УстановкаНастроекПоУмолчанию(ИмяРегистра, ЭтотОбъект[ИмяРегистра], Новый Структура());
		Иначе
			РегистрыСведений[ИмяРегистра].УстановкаНастроекПоУмолчанию(ЭтотОбъект[ИмяРегистра], Новый Структура());
		КонецЕсли;
		ЭтотОбъект[ИмяРегистра].Период      = НачалоГода(ТекущаяДата);
		ЭтотОбъект[ИмяРегистра][ИмяОтбора]  = ЗначениеОтбора;
		МенеджерЗаписи = РеквизитФормыВЗначение(ИмяРегистра);
		МенеджерЗаписи.Записать(Истина);
	Иначе
		МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
		МенеджерЗаписи[ИмяОтбора] = КлючЗаписи[ИмяОтбора];
		МенеджерЗаписи.Период     = КлючЗаписи.Период;
		МенеджерЗаписи.Прочитать();
	КонецЕсли;
	ЭтаФорма.ЗначениеВРеквизитФормы(МенеджерЗаписи, ИмяРегистра);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КлючЗаписиДействующейУчетнойПолитики(ИмяРегистра, ИмяОтбора, ЗначениеОтбора, ПериодЗначений)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",  ПериодЗначений);
	Запрос.УстановитьПараметр(ИмяОтбора, ЗначениеОтбора);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УчетнаяПолитикаСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаСрезПоследних";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УчетнаяПолитика", ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Организация", ИмяОтбора);
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗначенияКлюча = Новый Структура;
		ЗначенияКлюча.Вставить(ИмяОтбора, ЗначениеОтбора);
		ЗначенияКлюча.Вставить("Период", Выборка.Период);
		
		Возврат РегистрыСведений[ИмяРегистра].СоздатьКлючЗаписи(ЗначенияКлюча);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура МенеджерЗаписиРегистра(ИмяРегистра, ИмяОтбора = "Организация", ЗначениеОтбора)
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	МенеджерЗаписи[ИмяОтбора] = ЗначениеОтбора;
	МенеджерЗаписи.Прочитать();
	ЭтаФорма.ЗначениеВРеквизитФормы(МенеджерЗаписи, ИмяРегистра);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвязанныеРеквизиты(ИмяРаздела = Неопределено)
	
	Если ИмяРаздела = Неопределено ИЛИ ИмяРаздела = "СтраховыеВзносы" ИЛИ ИмяРаздела = "СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев"
		ИЛИ ИмяРаздела = "ПрименяемыеТарифыСтраховыхВзносов" Тогда
		ВидТарифаПредставление = УчетСтраховыхВзносовКлиентСервер.ОписаниеВидаТарифа(ПрименяемыеТарифыСтраховыхВзносов.ВидТарифа);
		Если НЕ ЗначениеЗаполнено(ВидТарифаПредставление) Тогда
			ВидТарифаПредставление = НСтр("ru = 'Вид тарифа страховых взносов не указан'");
		КонецЕсли;
		Элементы.ВидТарифа.РасширеннаяПодсказка.Заголовок = ВидТарифаПредставление;
	КонецЕсли;
	
	Если ИмяРаздела = Неопределено Тогда
		// Ранее использовавшиеся настройки
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",   Организация);
		Запрос.УстановитьПараметр("ТекущаяДата",   ТекущаяДата);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ТекущаяДата));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиСистемыНалогообложения.Организация,
		|	МАКСИМУМ(НастройкиСистемыНалогообложения.ПлательщикЕНВД) КАК ПлательщикЕНВД,
		|	МАКСИМУМ(НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент) КАК ПрименяетсяУСНПатент,
		|	МАКСИМУМ(НастройкиСистемыНалогообложения.ПрименяетсяУСН) КАК ПрименяетсяУСН,
		|	МАКСИМУМ(НастройкиСистемыНалогообложения.ПлательщикНДС) КАК ПлательщикНДС,
		|	МАКСИМУМ(НастройкиСистемыНалогообложения.ПлательщикНалогаНаПрибыль) КАК ПлательщикНалогаНаПрибыль,
		|	МАКСИМУМ(НастройкиСистемыНалогообложения.ПлательщикНДФЛ) КАК ПлательщикНДФЛ
		|ИЗ
		|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
		|ГДЕ
		|	НастройкиСистемыНалогообложения.Период < &ТекущаяДата
		|	И НастройкиСистемыНалогообложения.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	НастройкиСистемыНалогообложения.Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиСистемыНалогообложенияСрезПоследних.Организация,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикЕНВД,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНПатент,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСН,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикНДС,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикНалогаНаПрибыль,
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикНДФЛ
		|ИЗ
		|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК НастройкиСистемыНалогообложенияСрезПоследних";
		
		Выборка = Запрос.Выполнить().Выбрать();
		СписокНедействующихНастроек.Очистить();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПлательщикЕНВД Тогда
				СписокНедействующихНастроек.Добавить("ПлательщикЕНВД");
			КонецЕсли;
			Если Выборка.ПрименяетсяУСНПатент Тогда
				СписокНедействующихНастроек.Добавить("ПрименяетсяУСНПатент");
			КонецЕсли;
			Если Выборка.ПрименяетсяУСН Тогда
				СписокНедействующихНастроек.Добавить("ПрименяетсяУСН");
			КонецЕсли;
			Если Выборка.ПлательщикНДС Тогда
				СписокНедействующихНастроек.Добавить("ПлательщикНДС");
			КонецЕсли;
			Если Выборка.ПлательщикНалогаНаПрибыль Тогда
				СписокНедействующихНастроек.Добавить("ПлательщикНалогаНаПрибыль");
			КонецЕсли;
			Если Выборка.ПлательщикНДФЛ Тогда
				СписокНедействующихНастроек.Добавить("ПлательщикНДФЛ");
			КонецЕсли;
			Если РегистрыСведений.НастройкиСистемыНалогообложения.ПлательщикФиксированныхВзносов(Выборка) Тогда
				СписокНедействующихНастроек.Добавить("ПлательщикФиксированныхВзносов");
			КонецЕсли;
			Если РегистрыСведений.НастройкиСистемыНалогообложения.ВозможнаРеализацияАлкогольнойПродукции(Выборка) Тогда
				СписокНедействующихНастроек.Добавить("ДекларированиеАлкогольнойПродукции");
			КонецЕсли;
			Если РегистрыСведений.НастройкиСистемыНалогообложения.ВозможнаРеализацияПодакцизныхТоваров(Выборка) Тогда
				СписокНедействующихНастроек.Добавить("Акцизы");
			КонецЕсли;
			Если РегистрыСведений.НастройкиСистемыНалогообложения.ВозможенЕСХН(Выборка) Тогда
				СписокНедействующихНастроек.Добавить("ЕСХН");
			КонецЕсли;
			Если РегистрыСведений.НастройкиСистемыНалогообложения.ВозможенНДПИ(Выборка) Тогда
				СписокНедействующихНастроек.Добавить("НДПИ");
			КонецЕсли;
			Если РегистрыСведений.НастройкиСистемыНалогообложения.ПрименяетсяЕдинаяУпрощеннаяДекларация(Выборка) Тогда
				СписокНедействующихНастроек.Добавить("ЕдинаяУпрощеннаяДекларация");
			КонецЕсли;
		КонецЦикла;
		
		// Отключенные по функциональным опциям настройки
		СписокНеиспользуемыхНастроек.Очистить();
		Если НЕ ВедетсяУчетИмущества Тогда
			СписокНеиспользуемыхНастроек.Добавить("НалогНаИмущество");
			СписокНеиспользуемыхНастроек.Добавить("ТранспортныйНалог");
			СписокНеиспользуемыхНастроек.Добавить("ЗемельныйНалог");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНастройкиСписка()
	
	Модифицированность = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Элементы.Список.ТолькоПросмотр            = Истина;
		Элементы.СписокПодчиненный.ТолькоПросмотр = Истина;
		Элементы.СтраницыНастроек.ТолькоПросмотр  = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ПравоРедактированияНастроек Тогда
		Элементы.СтраницыНастроек.ТолькоПросмотр  = Истина;
		Элементы.СписокПодчиненный.ТолькоПросмотр = Истина;
	Иначе
	
		Элементы.Список.ТолькоПросмотр            = Ложь;
		Элементы.СписокПодчиненный.ТолькоПросмотр = Ложь;
		Элементы.СтраницыНастроек.ТолькоПросмотр  = Ложь;
		
		// Так как изменяем данные разных записей в одной форме, 
		// то наложим пессимистическую объектную блокировку вручную - 
		// по специальному набору измерений, который никогда не будет записан в регистр.
		
		РезультатБлокировки = "";
		Попытка 
			ОписаниеКлюча = Новый Структура("Организация",         Организация); 
			ЗаблокироватьДанныеДляРедактирования(
				РегистрыСведений.НалогиОтчеты.СоздатьКлючЗаписи(ОписаниеКлюча),
				, // Данные не хранятся в ИБ
				УникальныйИдентификатор); 
		Исключение
			Элементы.СтраницыНастроек.ТолькоПросмотр = Истина;
			РезультатБлокировки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьСписокНастройкиНалоговОтчетов()
	
	ЗаполнитьСписокНастройкиНалоговОтчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокНастройкиНалоговОтчетов()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПриОткрытии");
	
	Результат = ВыполнитьПолучениеДанныхНаСервере();
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПриОткрытии", 0.5, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	Иначе
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьИспользуемыеНастройки()
	
	// Поверхностное чтение, только чтобы узнать что отображать
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НалогиОтчеты.НалогОтчет КАК Ссылка,
	|	НалогиОтчеты.НалогОтчет.Код КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_НалогиОтчеты
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|ГДЕ
	|	НалогиОтчеты.Организация = &Организация
	|	И НалогиОтчеты.НалогОтчет ССЫЛКА Справочник.ЗадачиБухгалтера
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НалогиОтчеты.НалогОтчет.Владелец,
	|	НалогиОтчеты.НалогОтчет.Владелец.Код
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|ГДЕ
	|	НалогиОтчеты.Организация = &Организация
	|	И НалогиОтчеты.НалогОтчет ССЫЛКА Справочник.ПравилаПредставленияОтчетовУплатыНалогов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиБухгалтера.Ссылка КАК Ссылка,
	|	ЗадачиБухгалтера.Код КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_Акцизы
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО (ЗадачиБухгалтера.Код = ""Акцизы"")
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиБухгалтера.Ссылка КАК Ссылка,
	|	ЗадачиБухгалтера.Код КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_МестныеНалоги
	|ИЗ
	|	РегистрСведений.ПорядокУплатыНалоговНаМестах.СрезПоследних(&ТекущаяДата, Организация = &Организация) КАК ПорядокУплатыНалоговНаМестахСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО ПорядокУплатыНалоговНаМестахСрезПоследних.Налог = ЗадачиБухгалтера.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Код,
	|	ЗадачиБухгалтера.Ссылка
	|ПОМЕСТИТЬ ВТ_Задачи
	|ИЗ
	|	Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	НЕ ЗадачиБухгалтера.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТ_НалогиОтчеты.Ссылка
	|				ИЗ
	|					ВТ_НалогиОтчеты)
	|	И НЕ ЗадачиБухгалтера.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТ_Акцизы.Ссылка
	|				ИЗ
	|					ВТ_Акцизы)
	|	И НЕ ЗадачиБухгалтера.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТ_МестныеНалоги.Ссылка
	|				ИЗ
	|					ВТ_МестныеНалоги)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыПримененияТребованийЗаконодательства.Организация,
	|	ВариантыПримененияТребованийЗаконодательства.Условие
	|ПОМЕСТИТЬ ВТ_Условия
	|ИЗ
	|	РегистрСведений.ВариантыПримененияТребованийЗаконодательства КАК ВариантыПримененияТребованийЗаконодательства
	|ГДЕ
	|	ВариантыПримененияТребованийЗаконодательства.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка КАК Правило,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Условие КАК Условие
	|ПОМЕСТИТЬ ВТ_ПравилаУсловия
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК ПравилаПредставленияОтчетовУплатыНалоговУсловия
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Условие В
	|			(ВЫБРАТЬ
	|				ВТ_Условия.Условие КАК ВТ_Условия
	|			ИЗ
	|				ВТ_Условия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиБухгалтера.Правило
	|ПОМЕСТИТЬ ВТ_Правила
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Правило ССЫЛКА Справочник.ПравилаПредставленияОтчетовУплатыНалогов
	|	И ЗадачиБухгалтера.Правило.Владелец В
	|			(ВЫБРАТЬ
	|				ВТ_Задачи.Ссылка
	|			ИЗ
	|				ВТ_Задачи)
	|	И ЗадачиБухгалтера.Правило В
	|			(ВЫБРАТЬ
	|				ВТ_ПравилаУсловия.Правило КАК ВТ_ПравилаУсловия
	|			ИЗ
	|				ВТ_ПравилаУсловия)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиБухгалтера.Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Задачи.Код КАК Идентификатор,
	|	ВТ_Задачи.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_СписокЗадач
	|ИЗ
	|	ВТ_Правила КАК ВТ_Правила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
	|		ПО ВТ_Правила.Правило.Владелец = ВТ_Задачи.Ссылка
	|ГДЕ
	|	(ГОД(ВТ_Правила.Правило.КонецДействия) >= ГОД(&ТекущаяДата)
	|			ИЛИ ВТ_Правила.Правило.КонецДействия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_НалогиОтчеты.Ссылка КАК Ссылка,
	|	ВТ_НалогиОтчеты.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_СписокНалоговОтчетов
	|ИЗ
	|	ВТ_НалогиОтчеты КАК ВТ_НалогиОтчеты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Акцизы.Ссылка,
	|	ВТ_Акцизы.Идентификатор
	|ИЗ
	|	ВТ_Акцизы КАК ВТ_Акцизы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_МестныеНалоги.Ссылка,
	|	ВТ_МестныеНалоги.Идентификатор
	|ИЗ
	|	ВТ_МестныеНалоги КАК ВТ_МестныеНалоги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СписокЗадач.Ссылка,
	|	ВТ_СписокЗадач.Идентификатор
	|ИЗ
	|	ВТ_СписокЗадач КАК ВТ_СписокЗадач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СписокНалоговОтчетов.Ссылка,
	|	ВТ_СписокНалоговОтчетов.Идентификатор
	|ИЗ
	|	ВТ_СписокНалоговОтчетов КАК ВТ_СписокНалоговОтчетов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивСтрок = Список.НайтиСтроки(Новый Структура("Идентификатор", Выборка.Идентификатор));
		Если МассивСтрок.Количество() <> 0 Тогда
			МассивСтрок[0].Ссылка                  = Выборка.Ссылка;
			Если НЕ МассивСтрок[0].Включен Тогда
				МассивСтрок[0].Включен = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьНастройкиОрганизации()
	
	ОткрытьСтраницуДлительнойОперации();

	ОрганизацияПриИзмененииНаСервере();
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияУСНВВашемРегионе) Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперацияУСНВВашемРегионе,
			Новый ОписаниеОповещения("ПриЗавершенииЗаданияУСНВВашемРегионе", ЭтотОбъект),
			ПараметрыОжидания);
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатБлокировки) Тогда
		ПоказатьПредупреждение( , РезультатБлокировки);
		РезультатБлокировки = "";
	Иначе
		Интервал = ?(ЭтоМедленныйРежимРаботы ИЛИ ЭтоВебКлиент, 0.5, 0.1);
		ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьСписокНастройкиНалоговОтчетов", Интервал, Истина);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьНастройкиНаТекущуюДату(ИмяРаздела)
	
	ДатаИзменения = НачалоГода(ТекущаяДата);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПредставленияДатыИзменения(ДатаИзменения, ИмяРаздела));
	
	ПрочитатьОтдельнуюНастройкуУчетнойПолитики(ИмяРаздела);
	УправлениеФормой(ЭтотОбъект, ИмяРаздела);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКоллекциямиДетальныхНастроек

&НаСервере
Процедура ОбработатьРезультатДетальнойНастройки(ИдентификаторСтроки, РезультатДетальнойНастройки)
	
	Строка = СписокПодчиненный.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Строка.Включен Тогда
		Строка.Включен     = Истина;
	КонецЕсли;
	
	ПараметрыДетальнойНастройки = ПолучитьИзВременногоХранилища(АдресПараметрыДетальнойНастройки);
	Если Строка.Ключ = "" Тогда
		ОписаниеПараметров = ПараметрыДетальнойНастройки[Строка.Ссылка];
	Иначе
		ОписаниеПараметров = ПараметрыДетальнойНастройки[Строка.Ключ];
	КонецЕсли;
	
	// Обновим описание порядка уплаты налогов на местах
	Для ИндексПараметра = 0 По ОписаниеПараметров.ВГраница() Цикл
		Если ОписаниеПараметров[ИндексПараметра] = "ПорядокУплатыНалоговНаМестах" Тогда
			НастройкиУплатыНалога = РезультатДетальнойНастройки[ИндексПараметра];
			Если ТипЗнч(НастройкиУплатыНалога) = Тип("Структура") Тогда
				НастройкиУплатыНалога.Вставить("Описание", "");
				РегистрыСведений.ПорядокУплатыНалоговНаМестах.УстановитьОписание(НастройкиУплатыНалога);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Изменим значения во временном хранилище значений.
	ЗначенияДетальнойНастройки = ПолучитьИзВременногоХранилища(АдресЗначенияДетальнойНастройки);
	Если ЗначенияДетальнойНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Строка.Ключ = "" Тогда
		ЗначенияДетальнойНастройки.Вставить(Строка.Ссылка, РезультатДетальнойНастройки);
	Иначе
		ЗначенияДетальнойНастройки.Вставить(Строка.Ключ, РезультатДетальнойНастройки);
	КонецЕсли;
	АдресЗначенияДетальнойНастройки = ПоместитьВоВременноеХранилище(ЗначенияДетальнойНастройки, УникальныйИдентификатор);
	
	// Обновим представление детальной настройки
	Строка.ДетальнаяНастройкаПредставление = РегистрыСведений.НалогиОтчеты.ПредставлениеДетальнойНастройки(
		ОписаниеПараметров,
		РезультатДетальнойНастройки);
		
КонецПроцедуры

#КонецОбласти

#Область СохранениеРезультатовРаботы

&НаКлиенте
Процедура ВопросПередСменойОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПрочитатьНастройкиОрганизации();
		УстановитьДоступностьСписка();
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
			ИмяРаздела = Элементы.Список.ТекущиеДанные.Идентификатор;
			ЗаписатьИзмененияРазделаНаКлиенте(ИмяРаздела);
		КонецЕсли;
		
		ОповеститьОбИзмененииНастроек(Истина);
		Модифицированность = Ложь;
		ПрочитатьНастройкиОрганизации();
		УстановитьДоступностьСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
			ИмяРаздела = Элементы.Список.ТекущиеДанные.Идентификатор;
			ЗаписатьИзмененияРазделаНаКлиенте(ИмяРаздела);
		КонецЕсли;
		
		Модифицированность = Ложь;
		ОповеститьОбИзмененииНастроек(Истина);
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияИзВладельца() Экспорт
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ИмяРаздела = Элементы.Список.ТекущиеДанные.Идентификатор;
		ЗаписатьИзмененияРазделаНаКлиенте(ИмяРаздела);
		ОповеститьОбИзмененииНастроек(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСписокНастройкиНалоговОтчетов(Настройка)
	
	СтруктураНастройки = Новый Структура("Наименование,Включен,
		|Ссылка,ВключаетсяПользователем,Ключ,Идентификатор,Служебный,
		|ЕстьПодстроки,Порядок,БылВключен,Недоступен");
		
	ЗаполнитьЗначенияСвойств(СтруктураНастройки, Настройка);
	
	ВыполнитьЗаписьДанныхНаСервере(СтруктураНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДобровольныеСтраховыеВзносы(Задача)
	
	РезультатДетальнойНастройки = Новый Массив;
	РезультатДетальнойНастройки.Добавить(?(ПеречисляютсяДобровольныеСтраховыеВзносы,1,0));
	
	ЗначенияДетальнойНастройки = ПолучитьИзВременногоХранилища(АдресЗначенияДетальнойНастройки);
	Если ЗначенияДетальнойНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗначенияДетальнойНастройки.Вставить(Задача, РезультатДетальнойНастройки);
	АдресЗначенияДетальнойНастройки = ПоместитьВоВременноеХранилище(ЗначенияДетальнойНастройки, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДополнительныеСтраховыеВзносы()
	
	ОтобразитьРеквизитыЗависимыеОтТекущихНастроек(ЭтотОбъект);
	
	ТребуетсяСоздатьПоставляемыеВидыНалогов = НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудЧленовЛетныхЭкипажей
												ИЛИ НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудШахтеров
												ИЛИ НастройкиУчетаСтраховыхВзносов.ИспользуютсяРаботыСДосрочнойПенсией
												ИЛИ ПеречисляютсяДобровольныеСтраховыеВзносы;
	
	Если ТребуетсяСоздатьПоставляемыеВидыНалогов Тогда
		Справочники.ВидыНалоговИПлатежейВБюджет.СоздатьПоставляемыеЭлементы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзменения(ИмяРегистра)

	ПериодыОтложенногоПроведения = ПроведениеСервер.ПериодыИспользованияОтложенногоПроведения(ГоловнаяОрганизация);
	
	Если ИмяРегистра = "НастройкиСистемыНалогообложения" Тогда
		ИспользуемыеСистемыНалогообложенияПередЗаписью = РегистрыСведений.НастройкиСистемыНалогообложения.ИспользуемыеСистемыНалогообложения();
	ИначеЕсли ИмяРегистра = "НастройкиУчетаНДС" Тогда
		ИспользуетсяРаздельныйУчетНДСПередЗаписью = РегистрыСведений.НастройкиУчетаНДС.ПолучитьИспользуетсяРаздельныйУчетНДС();
	КонецЕсли;
	
	Если ИмяРегистра = "СтраховыеВзносы" Тогда
		Если ДатаИзменения = ПрименяемыеТарифыСтраховыхВзносов.Период Тогда
			МенеджерЗаписи = РеквизитФормыВЗначение("ПрименяемыеТарифыСтраховыхВзносов");
			Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.ДатаРегистрацииИзменений) Тогда
				МенеджерЗаписи.ДатаРегистрацииИзменений = МенеджерЗаписи.Период;
			КонецЕсли;
		Иначе
			МенеджерЗаписи = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПрименяемыеТарифыСтраховыхВзносов,,"Период");
			МенеджерЗаписи.Период = ДатаИзменения;
			МенеджерЗаписи.ДатаРегистрацииИзменений = НачалоМесяца(ДатаИзменения);
		КонецЕсли;
		МенеджерЗаписи.Записать(Истина);
		
		Если ДатаИзменения = СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.Период Тогда
			МенеджерЗаписи = РеквизитФормыВЗначение("СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев");
		Иначе
			МенеджерЗаписи = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев,,"Период");
			МенеджерЗаписи.Период = ДатаИзменения;
		КонецЕсли;
		МенеджерЗаписи.Записать(Истина);
	Иначе
		ПараметрыВыбора = ПараметрыВыбораПериодаНастройки(ДатаИзменения, ИмяРегистра);
		Если ПараметрыВыбора.НачалоПериода = ЭтотОбъект[ИмяРегистра].Период Тогда
			МенеджерЗаписи = РеквизитФормыВЗначение(ИмяРегистра);
		Иначе
			МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЭтотОбъект[ИмяРегистра],,"Период");
			МенеджерЗаписи.Период = ПараметрыВыбора.НачалоПериода;
		КонецЕсли;
		Если ИмяРегистра = "НастройкиСистемыНалогообложения" Тогда
			МенеджерЗаписи.ДатаИзменения = ДатаИзменения;
		КонецЕсли;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	ПеречитатьНастройкиНаТекущуюДату(ИмяРегистра);
	
	Если ИмяРегистра = "НастройкиСистемыНалогообложения" Тогда
		ИспользуемыеСистемыНалогообложенияПослеЗаписи = РегистрыСведений.НастройкиСистемыНалогообложения.ИспользуемыеСистемыНалогообложения();
	ИначеЕсли ИмяРегистра = "НастройкиУчетаНДС" Тогда
		ИспользуетсяРаздельныйУчетНДСПослеЗаписи = РегистрыСведений.НастройкиУчетаНДС.ПолучитьИспользуетсяРаздельныйУчетНДС();
	КонецЕсли;

	РезультатЗаданияПереключенияОтложенногоПроведения = ПроведениеСервер.ПроверитьОтложенноеПроведениеПослеИзмененияНастроек(
		ПериодыОтложенногоПроведения,
		УникальныйИдентификатор,
		ГоловнаяОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияРазделаНаКлиенте(ИмяРаздела)

	ЗаписатьИзмененияРазделаНаСервере(ИмяРаздела);
	
	ПроведениеКлиент.ОжидатьПереключенияОтложенногоПроведения(РезультатЗаданияПереключенияОтложенногоПроведения);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияРазделаНаСервере(ИмяРаздела)
	
	Если ИмяРаздела = "СистемаНалогообложения" Тогда
		ИмяРегистра = "НастройкиСистемыНалогообложения";
	ИначеЕсли ИмяРаздела = "НалогНаПрибыль" Тогда
		ИмяРегистра = "НастройкиУчетаНалогаНаПрибыль";
	ИначеЕсли ИмяРаздела = "НДФЛ_Предприниматель" Тогда
		ИмяРегистра = "НастройкиУчетаНДФЛ";
	ИначеЕсли ИмяРаздела = "НДС" Тогда
		ИмяРегистра = "НастройкиУчетаНДС";
	ИначеЕсли ИмяРаздела = "УСН" Тогда
		ИмяРегистра = "НастройкиУчетаУСН";
	ИначеЕсли ИмяРаздела = "СтраховыеВзносы_Предприниматель" Тогда
		ИмяРегистра = "НастройкиУчетаСтраховыхВзносовИП";
	ИначеЕсли ИмяРаздела = "СтраховыеВзносы" Тогда
		ИмяРегистра = "СтраховыеВзносы";
	ИначеЕсли ИмяРаздела = "НалогНаИмущество" Тогда
		ИмяРегистра = "СтавкиНалогаНаИмущество";
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписатьИзменения(ИмяРегистра);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияНепосредственно(ИмяРегистра)
	
	МенеджерЗаписи = РеквизитФормыВЗначение(ИмяРегистра);
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

&НаКлиенте
Процедура ОткрытьСтраницуДлительнойОперации()
	
	Если ЭтоМедленныйРежимРаботы ИЛИ ЭтоВебКлиент Тогда
		Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница = Элементы.ОбщаяСтраницаОжидание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПолучениеДанныхНаСервере()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация",   Организация);
	ПараметрыЗаполнения.Вставить("Дерево",        СформироватьДеревоНастроек());
	ПараметрыЗаполнения.Вставить("ТекущийПериод", ТекущаяДата);
	ПараметрыЗаполнения.Вставить("ТолькоОтчеты",  Истина);
	
	НаименованиеЗадания = НСтр("ru = 'Настройка списка налогов и отчетов: получение данных'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"РегистрыСведений.НалогиОтчеты.ПодготовитьДанные", 
			ПараметрыЗаполнения, 
			НаименованиеЗадания);
			
		АдресХранилища = Результат.АдресХранилища;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьДеревоНастроек()
	
	МассивТиповЗадач = Новый Массив;
	МассивТиповЗадач.Добавить(Тип("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства"));
	МассивТиповЗадач.Добавить(Тип("ПеречислениеСсылка.ВидыПодакцизныхТоваров"));
	МассивТиповЗадач.Добавить(Тип("СправочникСсылка.ЗадачиБухгалтера"));
	МассивТиповЗадач.Добавить(Тип("СправочникСсылка.РегистрацииВНалоговомОргане"));
	МассивТиповЗадач.Добавить(Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	
	МассивТиповРегистраций = Новый Массив;
	МассивТиповРегистраций.Добавить(Тип("СправочникСсылка.РегистрацииВНалоговомОргане"));

	
	ДеревоЗадач = Новый ДеревоЗначений;
	ДеревоЗадач.Колонки.Добавить("Наименование",                    ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ДеревоЗадач.Колонки.Добавить("Включен",                         Новый ОписаниеТипов("Булево"));
	ДеревоЗадач.Колонки.Добавить("ДетальнаяНастройкаПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ДеревоЗадач.Колонки.Добавить("Ссылка",                          Новый ОписаниеТипов(МассивТиповЗадач));
	ДеревоЗадач.Колонки.Добавить("РегистрацияВНалоговомОргане",     Новый ОписаниеТипов(МассивТиповРегистраций));
	ДеревоЗадач.Колонки.Добавить("ВключаетсяПользователем",         Новый ОписаниеТипов("Булево"));
	ДеревоЗадач.Колонки.Добавить("ЕстьДетальнаяНастройка",          Новый ОписаниеТипов("Булево"));
	ДеревоЗадач.Колонки.Добавить("НалогУплачиваетсяНаМестах",       Новый ОписаниеТипов("Булево"));
	ДеревоЗадач.Колонки.Добавить("Ключ",                            ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ДеревоЗадач.Колонки.Добавить("Идентификатор",                   ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ДеревоЗадач.Колонки.Добавить("Порядок",                         ОбщегоНазначения.ОписаниеТипаЧисло(5));
	
	Возврат ДеревоЗадач;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПриОткрытии()
	
	Попытка
		Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(ФормаДлительнойОперации) = Тип("УправляемаяФорма") Тогда
			Если ФормаДлительнойОперации.Открыта() 
				И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
				Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
					ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
					ЗагрузитьРезультат();
				Иначе
					ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
					ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗаданияПриОткрытии", 
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
					Истина);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ЗагрузитьРезультат();
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияПриОткрытии", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПриЗаписи()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				Модифицированность = Ложь;
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗаданияПриЗаписи", 
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьРезультат(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьРезультат();
	
	ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
	Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница = Элементы.ОбщаяСтраницаНастройки;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультат()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗагрузитьПодчиненныеСтроки(Результат.Дерево);
		
		АдресПараметрыДетальнойНастройки = ПоместитьВоВременноеХранилище(Результат.ПараметрыДетальнойНастройки, УникальныйИдентификатор);
		АдресЗначенияДетальнойНастройки  = ПоместитьВоВременноеХранилище(Результат.ЗначенияДетальнойНастройки,  УникальныйИдентификатор);
		
		УстановитьДоступностьВидимостьНастроек(Истина);
		ПрочитатьДетальнуюНастройкуСтраховыхВзносов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодчиненныеСтроки(Дерево)
	
	СписокПодчиненный.Очистить();
	
	СкрытыеОтчеты        = 0;
	
	Для Каждого Строка ИЗ Дерево.Строки Цикл
		Родитель             = Строка.Ссылка;
		ПодчиненныеСтроки    = Строка.Строки;
		Идентификатор        = Строка.Идентификатор;
		ЕстьПодстроки        = Ложь;
		Для Каждого ПодчиненнаяСтрока ИЗ ПодчиненныеСтроки Цикл
			НоваяСтрока = СписокПодчиненный.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСтрока);
			НоваяСтрока.Родитель      = Родитель;
			НоваяСтрока.Идентификатор = Идентификатор;
			ЕстьПодстроки             = Истина;
			Если НЕ ПодчиненнаяСтрока.Включен Тогда
				СкрытыеОтчеты = СкрытыеОтчеты + 1;
			КонецЕсли;
		КонецЦикла;
		
		МассивСтрок = Список.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
		Если МассивСтрок.Количество() <> 0 Тогда
			МассивСтрок[0].ЕстьПодстроки           = ЕстьПодстроки;
			МассивСтрок[0].Ссылка                  = Строка.Ссылка;
			МассивСтрок[0].Ключ                    = Строка.Ключ;
			МассивСтрок[0].ВключаетсяПользователем = Строка.ВключаетсяПользователем;
			Если НЕ МассивСтрок[0].Включен Тогда
				МассивСтрок[0].Включен = Строка.Включен;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ПолныйСписок = СкрытыеОтчеты = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПостроениеСписка()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		МассивИдентификаторов = Новый Массив();
		МассивИдентификаторов.Добавить(ИдентификаторЗадания);
		ОтменитьВыполнениеЗаданий(МассивИдентификаторов);
		
	КонецЕсли;

	ИдентификаторЗадания = Неопределено;
	
	ЭтотОбъект.Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗаданий(Знач МассивИдентификаторовЗаданий)

	Для Каждого ИдентификаторЗадания Из МассивИдентификаторовЗаданий Цикл
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОтрисовкаФормы

&НаСервере
Процедура УстановитьДоступностьВидимостьНастроек(ДоступностьВидимость)
	
	Если ОрганизацияНедоступна Тогда
		Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница = Элементы.ОбщаяСтраницаНедоступная;
	Иначе
		Если ДоступностьВидимость Тогда
			Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница = Элементы.ОбщаяСтраницаНастройки;
		Иначе
			Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница = Элементы.ОбщаяСтраницаПустая;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ЭтотОбъект.ТолькоПросмотр = ГоловнаяОрганизация <> Организация;
	
	ПрочитатьИОписатьНастройкиУчета();
	
	НастройкиСистемыНалогообложенияФормы.ПодготовитьФормуНаСервере(ЭтотОбъект);
	
	Если НЕ ЭтоЮрЛицо Тогда
		Если НастройкиСистемыНалогообложения.ПлательщикНДФЛ
			ИЛИ СписокНедействующихНастроек.НайтиПоЗначению("ПлательщикНДФЛ") <> Неопределено Тогда
			НастройкиУчетаНДФЛФормы.ПодготовитьФормуНаСервере(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиСистемыНалогообложения.ПлательщикНДС
		ИЛИ СписокНедействующихНастроек.НайтиПоЗначению("ПлательщикНДС") <> Неопределено Тогда
		НастройкиУчетаНДСФормы.ПодготовитьФормуНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		Если НастройкиСистемыНалогообложения.ПлательщикНалогаНаПрибыль
			ИЛИ СписокНедействующихНастроек.НайтиПоЗначению("ПлательщикНалогаНаПрибыль") <> Неопределено Тогда
			НастройкиУчетаНалогаНаПрибыльФормы.ПодготовитьФормуНаСервере(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиСистемыНалогообложения.ПрименяетсяУСН
		ИЛИ СписокНедействующихНастроек.НайтиПоЗначению("ПрименяетсяУСН") <> Неопределено Тогда
		НастройкиУчетаУСНФормы.ПодготовитьФормуНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		СтавкиНалогаНаИмуществоФормы.ПодготовитьФормуНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПредставленияДатыИзменения(ДатаИзменения, "НастройкиСистемыНалогообложения"));
	
	СброситьСтраницыИсторииИзменений();
	ОтобразитьРеквизитыЗависимыеОтСистемыНалогообложения();
	ОтобразитьРеквизитыЗависимыеОтПользовательскихНастроек();
	ОтобразитьРеквизитыЗависимыеОтТекущихНастроек(ЭтотОбъект);
	УстановитьДоступностьСтарыхНастроек();
	
	ПоказатьДанныеУСНВВашемРегионе();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДетальнуюНастройкуСтраховыхВзносов()
	
	Условие = Неопределено;
	Задача  = Неопределено;
	
	МассивСтрок = Список.НайтиСтроки(Новый Структура("Идентификатор", "СтраховыеВзносы"));
	Если МассивСтрок.Количество() <> 0 Тогда
		Задача = МассивСтрок[0].Ссылка;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗначенияДетальнойНастройки  = ПолучитьИзВременногоХранилища(АдресЗначенияДетальнойНастройки);
	ПараметрыДетальнойНастройки = ПолучитьИзВременногоХранилища(АдресПараметрыДетальнойНастройки);
	ПараметрыНастройки          = ПараметрыДетальнойНастройки[Задача];
	Если ПараметрыНастройки <> Неопределено Тогда
		ЗначенияНастройки = ЗначенияДетальнойНастройки[Задача];
		Для Индекс = 0 По ПараметрыНастройки.ВГраница() Цикл
			Параметр          = ПараметрыНастройки[Индекс];
			// ВариантыПримененияТребованийЗаконодательства
			ЗначениеПараметра = ЗначенияНастройки[Индекс]; // Булево или индекс
			СпособОписанияВариантов = ТипЗнч(Параметр.Варианты);
			Если СпособОписанияВариантов = Тип("ТаблицаЗначений") Тогда
				Условие = Параметр.Варианты[ЗначениеПараметра].Условие;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПеречисляютсяДобровольныеСтраховыеВзносы = ЗначениеЗаполнено(Условие);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма, ИмяРаздела = Неопределено)
	
	Элементы = Форма.Элементы;
	
	Если ИмяРаздела = Неопределено ИЛИ ИмяРаздела = "НастройкиСистемыНалогообложения" Тогда
		НастройкиУчетаНДСФормыКлиентСервер.УправлениеФормой(Форма);
		НастройкиСистемыНалогообложения = Форма.НастройкиСистемыНалогообложения;
		ИспользоватьДатуИзменения = НастройкиСистемыНалогообложенияФормыВызовСервера.ИспользуетсяДатаИзменения(
			НастройкиСистемыНалогообложения.Организация,
			НастройкиСистемыНалогообложения.СистемаНалогообложения);
		Элементы.ДатаИзменения_НастройкиСистемыНалогообложения.Видимость = ИспользоватьДатуИзменения;
		Элементы.ДатаИзмененияСтрокой_НастройкиСистемыНалогообложения.Видимость = Не ИспользоватьДатуИзменения;
	КонецЕсли;
	
	Если ИмяРаздела = Неопределено ИЛИ ИмяРаздела = "НастройкиУчетаНалогаНаПрибыль" Тогда
		НастройкиУчетаНалогаНаПрибыльФормыКлиентСервер.УправлениеФормой(Форма);
	КонецЕсли;
	
	Если ИмяРаздела = Неопределено ИЛИ ИмяРаздела = "НастройкиУчетаНДФЛ" Тогда
		НастройкиУчетаНДФЛФормыКлиентСервер.УправлениеФормой(Форма);
	КонецЕсли;
	
	Если ИмяРаздела = Неопределено ИЛИ ИмяРаздела = "НастройкиУчетаУСН" Тогда
		НастройкиУчетаУСНФормыКлиентСервер.УправлениеФормой(Форма);
	КонецЕсли;
	
	Если ИмяРаздела = Неопределено ИЛИ ИмяРаздела = "СтавкиНалогаНаИмущество" Тогда
		СтавкиНалогаНаИмуществоФормыКлиентСервер.УправлениеФормой(Форма);
	КонецЕсли;
	
	Если ИмяРаздела = Неопределено ИЛИ ИмяРаздела = "СтраховыеВзносы" Тогда
		Элементы.СтраницыСтраховыеВзносыИстория.Видимость                          = Форма.УчетЗарплатыИКадровСредствамиБухгалтерии;
		Элементы.Группа_ПрименяемыеТарифыСтраховыхВзносов_НастройкиУчета.Видимость = Форма.УчетЗарплатыИКадровСредствамиБухгалтерии;
		Элементы.ГруппаНастройкиУчетаСтраховыхВзносов.Видимость                    = Форма.УчетЗарплатыИКадровСредствамиБухгалтерии;
		Элементы.ГруппаУчетЗарплатыВоВнешнейПрограмме.Видимость                    = НЕ Форма.УчетЗарплатыИКадровСредствамиБухгалтерии;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПериоды(ИмяРаздела)
	
	Элементы["Страницы" + ИмяРаздела + "История"].ТекущаяСтраница = Элементы["Страница" + ИмяРаздела + "Изменение"];
	
	УстановитьДоступностьСписка();
	
	УправлениеФормой(ЭтотОбъект, ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИсторию(ИмяРаздела)
	
	Элементы["Страницы" + ИмяРаздела + "История"].ТекущаяСтраница = Элементы["Страница" + ИмяРаздела + "Периоды"];
	
	Модифицированность = Ложь;
	УстановитьДоступностьСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзмененияИстории(Команда)
	
	Если СтрНайти(ТекущийЭлемент.Имя, "Отменить_") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = ИмяРегистра(ТекущийЭлемент.Имя);
	Элементы["Страницы" + ИмяРаздела + "История"].ТекущаяСтраница = Элементы["Страница" + ИмяРаздела + "Периоды"];
	
	Модифицированность = Ложь;
	УстановитьДоступностьСписка();
	
	ПеречитатьНастройкиНаТекущуюДату(ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСписка()
	
	СписокНедоступность         = Модифицированность;
	Элементы.Список.Доступность = НЕ СписокНедоступность;
	
КонецПроцедуры

&НаСервере
Процедура СброситьСтраницыИсторииИзменений()
	
	Элементы.СтраницыНастройкиСистемыНалогообложенияИстория.ТекущаяСтраница  = Элементы.СтраницаНастройкиСистемыНалогообложенияПериоды;
	Элементы.СтраницыНастройкиУчетаНалогаНаПрибыльИстория.ТекущаяСтраница    = Элементы.СтраницаНастройкиУчетаНалогаНаПрибыльПериоды;
	Элементы.СтраницыНастройкиУчетаНДФЛИстория.ТекущаяСтраница               = Элементы.СтраницаНастройкиУчетаНДФЛПериоды;
	Элементы.СтраницыНастройкиУчетаНДСИстория.ТекущаяСтраница                = Элементы.СтраницаНастройкиУчетаНДСПериоды;
	Элементы.СтраницыНастройкиУчетаУСНИстория.ТекущаяСтраница                = Элементы.СтраницаНастройкиУчетаУСНПериоды;
	Элементы.СтраницыНастройкиУчетаСтраховыхВзносовИПИстория.ТекущаяСтраница = Элементы.СтраницаНастройкиУчетаСтраховыхВзносовИППериоды;
	Элементы.СтраницыСтраховыеВзносыИстория.ТекущаяСтраница                  = Элементы.СтраницаСтраховыеВзносыПериоды;
	Элементы.СтраницыСтавкиНалогаНаИмуществоИстория.ТекущаяСтраница          = Элементы.СтраницаСтавкиНалогаНаИмуществоПериоды;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРеквизитыЗависимыеОтСистемыНалогообложения()
	
	Элементы.СтраницыСтраховыеВзносыИстория.Видимость                          = УчетЗарплатыИКадровСредствамиБухгалтерии;
	Элементы.Группа_ПрименяемыеТарифыСтраховыхВзносов_НастройкиУчета.Видимость = УчетЗарплатыИКадровСредствамиБухгалтерии;
	Элементы.ГруппаНастройкиУчетаСтраховыхВзносов.Видимость                    = УчетЗарплатыИКадровСредствамиБухгалтерии;
	Элементы.ГруппаУчетЗарплатыВоВнешнейПрограмме.Видимость                    = НЕ УчетЗарплатыИКадровСредствамиБухгалтерии;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРеквизитыЗависимыеОтПользовательскихНастроек()
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Элементы.НалогНаИмущество_СпособыОтраженияРасходов.Видимость  = ПользовательУправляетСчетамиУчета;
	Элементы.ТранспортныйНалог_СпособыОтраженияРасходов.Видимость = ПользовательУправляетСчетамиУчета;
	Элементы.ЗемельныйНалог_СпособыОтраженияРасходов.Видимость    = ПользовательУправляетСчетамиУчета;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРеквизитыЗависимыеОтТекущихНастроек(Форма)
	
	Элементы = Форма.Элементы;
	
	НастройкиУчетаСтраховыхВзносов = Форма.НастройкиУчетаСтраховыхВзносов;
	
	Элементы.ГиперссылкаДолжности.Доступность = НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудФармацевтов
		ИЛИ НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудЧленовЛетныхЭкипажей
		ИЛИ НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудШахтеров;
		
	Элементы.ПрименяютсяРезультатыСпециальнойОценкиУсловийТруда.Доступность
		= Форма.НастройкиУчетаСтраховыхВзносов.ИспользуютсяРаботыСДосрочнойПенсией;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСтарыхНастроек()
	
	Элементы.ГруппаНастройкиУчетаНалогаНаПрибыль.ТолькоПросмотр = Ложь;
	Элементы.ГруппаНастройкиУчетаУСН.ТолькоПросмотр             = Ложь;
	Элементы.ГруппаНастройкиУчетаНДС.ТолькоПросмотр             = Ложь;
	Элементы.ГруппаНастройкиУчетаНДФЛ.ТолькоПросмотр            = Ложь;
	Элементы.ГруппаСтавкиНалогаНаИмущество.ТолькоПросмотр       = Ложь;
	Элементы.ГруппаНастройкиУчетаСтраховыхВзносовИП.ТолькоПросмотр       = Ложь;
	
	Для Каждого ЗначениеНастройки ИЗ Список Цикл
		Если ЗначениеНастройки.БылВключен Тогда
			
			Идентификатор = ЗначениеНастройки.Идентификатор;
			Если Идентификатор = "НалогНаПрибыль" Тогда
				Элементы.ГруппаНастройкиУчетаНалогаНаПрибыль.ТолькоПросмотр = Истина;
			КонецЕсли;
			Если Идентификатор = "УСН" Тогда
				Элементы.ГруппаНастройкиУчетаУСН.ТолькоПросмотр = Истина;
			КонецЕсли;
			Если Идентификатор = "НДС" Тогда
				Элементы.ГруппаНастройкиУчетаНДС.ТолькоПросмотр = Истина;
			КонецЕсли;
			Если Идентификатор = "НДФЛ_Предприниматель" Тогда
				Элементы.ГруппаНастройкиУчетаНДФЛ.ТолькоПросмотр = Истина;
			КонецЕсли;
			Если Идентификатор = "НалогНаИмущество" Тогда
				Элементы.ГруппаСтавкиНалогаНаИмущество.ТолькоПросмотр = Истина;
			КонецЕсли;
			Если Идентификатор = "СтраховыеВзносы_Предприниматель" Тогда
				Элементы.ГруппаНастройкиУчетаСтраховыхВзносовИП.ТолькоПросмотр = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьДанныеУСНВВашемРегионе()
	
	ПоказыватьДанные = (ПрименяетсяУСНДоходы ИЛИ ПрименяетсяУСНДоходыМинусРасходы)
		И ПолучитьФункциональнуюОпцию("ИспользоватьСервисРегиональныеСтавкиНалогов");
		
	Элементы.ДекорацияСтавкиУСНВВашемРегионе.Видимость = ПоказыватьДанные;
	Если НЕ ПоказыватьДанные Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияУСНВВашемРегионе) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияУСНВВашемРегионе);
	КонецЕсли;
	
	ИдентификаторЗаданияУСНВВашемРегионе = Неопределено;
	
	Элементы.ДекорацияСтавкиУСНВВашемРегионе.Заголовок = НСтр("ru='Получение данных сервиса...'");
	
	ПараметрыПолученияИнформации = ПараметрыПолученияИнформацииУСНВВашемРегионе();
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Получение данных сервиса: Ставки УСН в вашем регионе'");
	ДлительнаяОперацияУСНВВашемРегионе = ДлительныеОперации.ВыполнитьВФоне(
		"РегиональныеСтавкиНалогов.ПолучитьЗаголовокДекорацииУСНВВашемРегионе",
		ПараметрыПолученияИнформации, 
		ПараметрыВыполнения);
	
	АдресХранилищаУСНВВашемРегионе = ДлительнаяОперацияУСНВВашемРегионе.АдресРезультата;
	
	Если ДлительнаяОперацияУСНВВашемРегионе.Статус = "Выполняется" Тогда
		ИдентификаторЗаданияУСНВВашемРегионе = ДлительнаяОперацияУСНВВашемРегионе.ИдентификаторЗадания;
	Иначе
		ИдентификаторЗаданияУСНВВашемРегионе = Неопределено;
		Если ДлительнаяОперацияУСНВВашемРегионе.Статус = "Выполнено" Тогда
			ПоказатьПодготовленныеДанныеУСНВВашемРегионе();
		Иначе
			Элементы.ДекорацияСтавкиУСНВВашемРегионе.Заголовок = НСтр("ru='Не удалось получить данные сервиса.'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыПолученияИнформацииУСНВВашемРегионе()

	Результат = Новый Структура;
	КодРегиона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане.КодРегиона");
	Результат.Вставить("КодРегиона", Формат(КодРегиона, "ЧЦ=2; ЧВН="));
	Результат.Вставить("ЭтоЮрЛицо", ЭтоЮрЛицо);
	Результат.Вставить("ПрименяетсяУСНДоходы", ПрименяетсяУСНДоходы);
	Результат.Вставить("ПрименяетсяУСНДоходыРасходы", ПрименяетсяУСНДоходыМинусРасходы);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПоказатьПодготовленныеДанныеУСНВВашемРегионе()
	
	Данные = ПолучитьИзВременногоХранилища(АдресХранилищаУСНВВашемРегионе);
	УдалитьИзВременногоХранилища(АдресХранилищаУСНВВашемРегионе);
	
	Если Данные = Неопределено Тогда
		Элементы.ДекорацияСтавкиУСНВВашемРегионе.Заголовок = НСтр("ru='Не удалось получить данные сервиса.'");
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияСтавкиУСНВВашемРегионе.Заголовок = Данные;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииЗаданияУСНВВашемРегионе(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗаданияУСНВВашемРегионе = Неопределено;
	
	ОбновитьОтображениеДанных(Новый Массив);
	ПоказатьПодготовленныеДанныеУСНВВашемРегионе();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПериодами

&НаКлиенте
Процедура ПериодЗавершениеВыбора(РезультатВыбора, ИмяРегистра) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		ДатаИзменения = РезультатВыбора.НачалоПериода;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПредставленияДатыИзменения(ДатаИзменения, ИмяРегистра));
		
		Если ИмяРегистра = "НастройкиУчетаУСН" Тогда
			СписокПатентов = НастройкиУчетаУСНФормыВызовСервера.СписокПатентов(Организация, ДатаИзменения);
			НастройкиУчетаУСНФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВыбораПериодаНастройки(ДатаИзменения, ИмяРегистра)
	
	Период = Новый Структура("НачалоПериода, КонецПериода, ВидПериода, ИмяФормы");
	
	Если ИмяРегистра = "СтраховыеВзносы" Тогда
		Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Месяц;
	Иначе
		Периодичность = Метаданные.РегистрыСведений[ИмяРегистра].ПериодичностьРегистраСведений;
	КонецЕсли;
	
	Если Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Год Тогда
		Период.НачалоПериода = НачалоГода(ДатаИзменения);
		Период.КонецПериода = КонецГода(ДатаИзменения);
		Период.ВидПериода = Перечисления.ДоступныеПериодыОтчета.Год;
	ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Квартал Тогда
		Период.НачалоПериода = НачалоКвартала(ДатаИзменения);
		Период.КонецПериода = КонецКвартала(ДатаИзменения);
		Период.ВидПериода = Перечисления.ДоступныеПериодыОтчета.Квартал;
		Период.ИмяФормы = "ВыборСтандартногоПериодаКвартал";
	ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Месяц Тогда
		Период.НачалоПериода = НачалоМесяца(ДатаИзменения);
		Период.КонецПериода = КонецМесяца(ДатаИзменения);
		Период.ВидПериода = Перечисления.ДоступныеПериодыОтчета.Месяц;
		Период.ИмяФормы = "ВыборСтандартногоПериодаМесяц";
	Иначе
		Период.НачалоПериода = НачалоДня(ДатаИзменения);
		Период.КонецПериода = КонецДня(ДатаИзменения);
		Период.ВидПериода = Перечисления.ДоступныеПериодыОтчета.День;
		Период.ИмяФормы = "ВыборСтандартногоПериодаДень";
	КонецЕсли;
	
	Возврат Период;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставленияДатыИзменения(ДатаИзменения, ИмяРегистра)
	
	Представления = Новый Структура;
	
	ПараметрыВыбора = ПараметрыВыбораПериодаНастройки(ДатаИзменения, ИмяРегистра);
	
	Представления.Вставить("ДатаИзмененияСтрокой", БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		ПараметрыВыбора.НачалоПериода, ПараметрыВыбора.КонецПериода, Истина));
	
	Представления.Вставить("ДатаИзмененияЧислом", Год(ДатаИзменения));
	
	Возврат Представления;
	
КонецФункции

&НаКлиенте
Функция ИмяРегистра(ИмяЭлемента)
	
	ПозицияРазделителя = СтрНайти(ИмяЭлемента, "_");
	Если ПозицияРазделителя = 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось определить имя регистра по имени элемента ""%1""'"),ИмяЭлемента );
	КонецЕсли;
	
	Возврат Сред(ИмяЭлемента, ПозицияРазделителя + 1);
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораОрганизации(Форма, ДоступныеОрганизации)
	
	Элементы = Форма.Элементы;
	
	ПараметрВыбораОтборПоОрганизации = Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеОрганизации);
	
	ПараметрыВыбораОрганизации = Новый Массив();
	ПараметрыВыбораОрганизации.Добавить(ПараметрВыбораОтборПоОрганизации);
	
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//Оформление таблицы Список
	
	// ВсеОтчеты
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Наименование");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Служебный", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Действие");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Служебный", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Действие");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Служебный", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//ЕНВД
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Наименование");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Действие");
	ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы,
		"ВидУчета",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"НастройкиСистемыНалогообложения.ПлательщикЕНВД", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"Список.Идентификатор", ВидСравненияКомпоновкиДанных.Равно, "ЕНВД");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"Список.БылВключен", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//Торговый сбор
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Наименование");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Действие");
	ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы,
		"ВидУчета",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"НастройкиСистемыНалогообложения.ПлательщикТорговогоСбора", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"Список.Идентификатор", ВидСравненияКомпоновкиДанных.Равно, "ТорговыйСбор");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//Патент
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Наименование");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Действие");
	ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы,
		"ВидУчета",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"Список.Идентификатор", ВидСравненияКомпоновкиДанных.Равно, "Патент");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//Оформление таблицы СписокПодчиненный
	
	// ДетальнаяНастройкаПредставление
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДетальнаяНастройка_СписокПодчиненный");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СписокПодчиненный.ЕстьДетальнаяНастройка", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Редактирование
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Наименование");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Действие");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СписокНедоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииНастроек(ОбновитьЗадачи = Ложь)
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.НалогиОтчеты"));
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ПорядокУплатыАкцизов"));
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ПорядокУплатыНалоговНаМестах"));
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ВариантыПримененияТребованийЗаконодательства"));
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	Оповестить("Обновить дерево отчетов", "Обновить дерево отчетов", ЭтаФорма); // На языке регламентированной отчетности
	
	Оповестить("ИзменениеУчетнойПолитики", Организация);
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	
	Если ОбновитьЗадачи Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИЗаполнитьРегулярныеЗадачи", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИОписатьНастройкиУчета()
	
	ПрочитатьУчетнуюПолитику();
	ОписатьНастройкиУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьИЗаполнитьРегулярныеЗадачи()
	
	ОбновитьИЗаполнитьРегулярныеЗадачи();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИЗаполнитьРегулярныеЗадачи()
	
	КалендарьБухгалтера.ЗапуститьЗаполнениеВФоне(УникальныйИдентификатор, Организация, Ложь, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
// Вызывается при получении оповещения о записи организации.
// Для новых организаций добавляет их ссылки в отбор параметра выбора, 
// чтобы они были доступны в списке на форме.
//
// Параметры:
//	Параметр - Неопределено, Структура - Параметр, полученный в ОбработкаОповещения().
//		Если имеет тип Структура и содержит ключ "ЭтоНовый", то такое оповещения будет обработано,
//		иначе проигнорировано.
//	Источник - СправочникСсылка.Организации - Ссылка на измененную организацию.
//
Процедура ОбработкаОповещенияЗаписьОрганизации(Параметр, Источник)
	
	Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметр.Свойство("ЭтоНовый") 
		ИЛИ НЕ Параметр.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	// При записи новой организации добавим ее в список доступных для выбора организаций на форме.
	ДоступныеОрганизации = Новый Массив;
	ДоступныеОрганизации.Добавить(Источник);
	
	Если Элементы.Организация.ПараметрыВыбора.Количество() > 0 Тогда
		// В качестве значения параметра выбора указан фиксированный массив ссылок организаций, 
		// полученный из ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю().
		// Копируем их в новый массив.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеОрганизации, Элементы.Организация.ПараметрыВыбора[0].Значение);
	КонецЕсли;
	
	ФиксированныйМассивДоступныхОрганизаций = Новый ФиксированныйМассив(ДоступныеОрганизации);
	
	УстановитьПараметрыВыбораОрганизации(ЭтотОбъект, ДоступныеОрганизации);

КонецПроцедуры

&НаКлиенте
Процедура СтавкиНалогаНаИмуществоПриНаличии1ЛьготыЗаполнять1ЛистРаздела2ПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОтобразитьПериоды("СтавкиНалогаНаИмущество");
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаписьДанныхНаСервере(Настройка)
	
	КалендарьБухгалтера.ЗапланироватьОбновлениеЗадачБухгалтера();
	
	РезультатЧтения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(РезультатЧтения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Дерево = РезультатЧтения.Дерево;
	НовоеДерево = Дерево.Скопировать();
	НовоеДерево.Строки.Очистить();
	
	СтрукутраПоиска = Новый Структура("Идентификатор", Настройка.Идентификатор);
	МассивСтрок = Дерево.Строки.НайтиСтроки(СтрукутраПоиска);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтараяСтрока = МассивСтрок[0];
	НоваяСтрока = НовоеДерево.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтараяСтрока);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Настройка);
	//Перезаполняем дерево
	ЗаполнитьЗначенияСвойств(СтараяСтрока, НоваяСтрока);
	
	Если Настройка.ЕстьПодстроки Тогда
		Для Каждого Строка ИЗ СтараяСтрока.Строки Цикл
			СтрукутраПоиска = Новый Структура("Ссылка", Строка.Ссылка);
			МассивСтрок = СписокПодчиненный.НайтиСтроки(СтрукутраПоиска);
			Если МассивСтрок.Количество() <> 0 Тогда
				ПодчиненнаяСтрока = НоваяСтрока.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрока, Строка);
				ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрока, МассивСтрок[0]);
				//Перезаполняем дерево
				ЗаполнитьЗначенияСвойств(Строка, ПодчиненнаяСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РезультатЧтения.Вставить("Дерево", Дерево);
	ПоместитьВоВременноеХранилище(РезультатЧтения, АдресХранилища);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация",                 Организация);
	ПараметрыЗаполнения.Вставить("Дерево",                      НовоеДерево);
	ПараметрыЗаполнения.Вставить("ПолноеДерево",                Дерево);
	ПараметрыЗаполнения.Вставить("ЗначенияДетальнойНастройки",  ПолучитьИзВременногоХранилища(АдресЗначенияДетальнойНастройки));
	ПараметрыЗаполнения.Вставить("ПараметрыДетальнойНастройки", ПолучитьИзВременногоХранилища(АдресПараметрыДетальнойНастройки));
	
	РегистрыСведений.НалогиОтчеты.ЗаписатьДанныеВыборочно(ПараметрыЗаполнения);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСтавокУСН(НовыеСтавки)
	
	Если ТипЗнч(НовыеСтавки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Организация <> ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеСтавки, "Организация") Тогда
		Возврат;
	КонецЕсли;
	
	Если НовыеСтавки.Свойство("НалоговыеКаникулы") Тогда
		Если НЕ ЭтоЮрЛицо Тогда
			НастройкиУчетаУСН.НалоговыеКаникулы = Истина;
			НастройкиУчетаУСН.СтавкаНалога = 0;
		КонецЕсли;
	Иначе
		НастройкиУчетаУСН.СтавкаНалога = НовыеСтавки.СтавкаНалога;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если Элементы.СтраницыНастроек.ТекущаяСтраница <> Элементы.Страница_УСН Тогда
		Для каждого СтрокаСписка Из Список Цикл
			Если СтрокаСписка.Идентификатор <> "УСН" Тогда
				Продолжить;
			КонецЕсли;
			Элементы.Список.ТекущаяСтрока = СтрокаСписка.ПолучитьИдентификатор();
			Прервать;
		КонецЦикла;
		Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.Страница_УСН;
	КонецЕсли;
	
	ОтобразитьПериоды("НастройкиУчетаУСН");
	
КонецПроцедуры

#КонецОбласти

#Область Баннер

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСледующийБаннер()
	
	// Поскольку обработчик может вызываться не только интерактивно пользователем,
	// но и автоматически по таймеру, меняем баннер при условии, что форма находится в фокусе.
	Если НЕ ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПредыдущийБаннер()
	
	УстановитьБаннер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер(ПоказатьПредыдущий = Ложь)
	
	ДлительнаяОперация = ПолучитьБаннерНаСервере(ПоказатьПредыдущий);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		НастройкиОжидания.ПолучатьРезультат = Истина;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннераВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияБаннераВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБаннерНаСервере(ПоказатьПредыдущий)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	СтруктураПараметров.Вставить("Размещение", ПерсонализированныеПредложенияСервисов.ИмяРазмещенияНалогиИОтчеты());
	СтруктураПараметров.Вставить("ПоказатьПредыдущий", ПоказатьПредыдущий);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПерсонализированныеПредложенияСервисов.ПолучитьБаннер",
		СтруктураПараметров,
		НастройкиЗапуска);
	
КонецФункции

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	ПерсонализированныеПредложенияСервисов.УстановитьБаннерНаФорме(ЭтотОбъект, АдресРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьБаннер()
	
	ПерсонализированныеПредложенияСервисов.ЗакрытьБаннер(ЭтотОбъект, Организация);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
