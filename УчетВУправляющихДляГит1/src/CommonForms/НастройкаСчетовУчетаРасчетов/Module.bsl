#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОК(Команда)
	
	НовыйСписокСчетов = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из ТаблицаСчетовРасчета Цикл
		Если Не СтрокаТаблицы.Использование Тогда
			НовыйСписокСчетов.Добавить(СтрокаТаблицы.Счет);
		КонецЕсли;
	КонецЦикла;
	
	СписокИзменен = Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(СписокСчетов, НовыйСписокСчетов);
	Если СписокИзменен Тогда
		БухгалтерскиеОтчетыВызовСервера.СохранитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(НовыйСписокСчетов, Тип);
	КонецЕсли;
		
	Закрыть(СписокИзменен);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();

	Тип = Параметры.Тип;
	ВызовИзОбработкиПланирования = Параметры.ВызовИзОбработкиПланирования;
	
	СписокСчетовИзНастроек = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип);
	Если СписокСчетовИзНастроек <> Неопределено Тогда
		СписокСчетов = СписокСчетовИзНастроек;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Хозрасчетный.Ссылка В (&СписокСчетов)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Использование,
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.ЗапретитьИспользоватьВПроводках,
	|	Хозрасчетный.Родитель
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный1
	|		ПО Хозрасчетный.Ссылка = Хозрасчетный1.Ссылка
	|ГДЕ
	|	Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	|	И НЕ Хозрасчетный.Забалансовый
	|	И НЕ Хозрасчетный1.Забалансовый
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Порядок";

	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	
	ТаблицаСчетовРасчета.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Элементы.ТаблицаСчетовРасчетаРасширеннаяПодсказка.Заголовок = ПодсказкаТаблицыСчетовРасчета(Тип, ВызовИзОбработкиПланирования);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	Для Каждого СтрокаТаблицы Из ТаблицаСчетовРасчета Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Для Каждого СтрокаТаблицы Из ТаблицаСчетовРасчета Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСчетовРасчета

&НаКлиенте
Процедура ТаблицаСчетовРасчетаИспользованиеПриИзменении(Элемент)
		
	ЗапретитьИспользоватьВПроводках = Элементы.ТаблицаСчетовРасчета.ТекущиеДанные.ЗапретитьИспользоватьВПроводках;
	Родитель                        = Элементы.ТаблицаСчетовРасчета.ТекущиеДанные.Родитель;
	Использование                   = Элементы.ТаблицаСчетовРасчета.ТекущиеДанные.Использование;
	
	Если ЗапретитьИспользоватьВПроводках Тогда
		ТаблицаСчетовРасчетаИспользованиеПриИзмененииНаСервере();
	ИначеЕсли ЗначениеЗаполнено(Родитель) И Использование Тогда
		ТаблицаСчетовРасчетаИспользованиеПриИзмененииНаСервере(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаСчетовРасчетаИспользованиеПриИзмененииНаСервере(ИзменятьРодителей = Ложь) 
	
	ТекущиеДанные = ТаблицаСчетовРасчета.НайтиПоИдентификатору(Элементы.ТаблицаСчетовРасчета.ТекущаяСтрока);
	
	Если ТекущиеДанные <> Неопределено Тогда
		Счет = ТекущиеДанные.Счет;
		
		Для Каждого СтрокаТаблицы Из ТаблицаСчетовРасчета Цикл
			Если СтрокаТаблицы.Счет = Счет Тогда
				Продолжить;
			КонецЕсли;
			Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СтрокаТаблицы.Счет, Счет) Тогда
				СтрокаТаблицы.Использование = ТекущиеДанные.Использование;
			КонецЕсли;
			Если ИзменятьРодителей
				И БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, СтрокаТаблицы.Счет) Тогда
				СтрокаТаблицы.Использование = ТекущиеДанные.Использование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПодсказкаТаблицыСчетовРасчета(Тип, ВызовИзОбработкиПланирования)
	
	Если ВызовИзОбработкиПланирования Тогда
		
		Если Тип = 1 Тогда
			ТекстПодсказки =
				НСтр("ru = 'Выбранные счета учитываются при подсчете задолженности по договорам с видом ""С покупателем"", ""С комиссионером (агентом) на продажу"", ""С комитентом (принципалом) на закупку"".'");
		ИначеЕсли Тип = 2 Тогда
			ТекстПодсказки =
				НСтр("ru = 'Выбранные счета учитываются при подсчете задолженности по договорам с видом ""С поставщиком"", ""С комитентом (принципалом) на продажу"", ""С комиссионером (агентом) на закупку"".'");
		КонецЕсли;
		
	Иначе
		
		Если Тип = 1 Тогда
			ТекстПодсказки =
				НСтр("ru = 'В таблице приведены счета учета расчетов, по которым формируется отчет.
						   |При расчете анализируется остаток по дебету по договорам с видом ""С покупателем"", ""С комиссионером (агентом) на продажу"" и ""С комитентом (принципалом) на закупку"".'");
		ИначеЕсли Тип = 2 Тогда
			ТекстПодсказки =
				НСтр("ru = 'В таблице приведены счета учета расчетов, по которым формируется отчет.
						   |При расчете анализируется остаток по кредиту по договорам с видом ""С поставщиком"", ""С комитентом (принципалом) на продажу"" и ""С комиссионером (агентом) на закупку"".'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстПодсказки;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаСчетовРасчетаИспользование");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаСчетовРасчетаСчет");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаСчетовРасчетаСчетНаименование");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТаблицаСчетовРасчета.ЗапретитьИспользоватьВПроводках", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЖелтый);

КонецПроцедуры

#КонецОбласти