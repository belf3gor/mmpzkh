#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПолучитьПараметры();
	
	ПолучитьЕдинственногоСотрудника();
	ВедомостьНаВыплатуЗарплатыФормыВнутренний.РедактированиеЗарплатыСтрокиНастроитьЭлементы(ЭтотОбъект);
	
	Заголовок = СтрШаблон(НСтр("ru='Расшифровка выплаты (%1)%2'"),
							Строка(ФизическоеЛицо),
							?(ТолькоПросмотр, НСтр("ru=' (только просмотр)'"), ""));
	
	ИтогоКВыплате = Зарплата.Итог("КВыплате");
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Зарплата, "ПериодВзаиморасчетов", "ПериодВзаиморасчетовСтрокой");
	
	Если ЗначениеЗаполнено(СпособВыплаты)
		И СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.Аванс() Тогда
		Элементы.ЗарплатаДокументОснование.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("СохранитьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для НомерСтроки = 0 По Зарплата.Количество()-1 Цикл
		
		Если НЕ ЗначениеЗаполнено(Зарплата[НомерСтроки].Сотрудник) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не указан сотрудник'"), , СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Зарплата[%1].Сотрудник", НомерСтроки));
			Отказ = Истина
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Зарплата[НомерСтроки].ПериодВзаиморасчетов) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не задан период взаиморасчетов'"), , СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Зарплата[%1].ПериодВзаиморасчетовСтрокой", НомерСтроки));
			Отказ = Истина
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗарплата

&НаКлиенте
Процедура ЗарплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, ЭтотОбъект);
		Элемент.ТекущиеДанные.ПериодВзаиморасчетов = ПериодРегистрации;
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Зарплата, "ПериодВзаиморасчетов", "ПериодВзаиморасчетовСтрокой");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ СотрудникСоответствуетФизическомуЛицу(ВыбранноеЗначение, ФизическоеЛицо) Тогда
		
		ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Недопустимое значение'"), , 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Зарплата[%1].Сотрудник", 
				Зарплата.Индекс(Элементы.Зарплата.ТекущиеДанные)));
		
	КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПериодВзаиморасчетовПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.Зарплата.ТекущиеДанные, "ПериодВзаиморасчетов", "ПериодВзаиморасчетовСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПериодВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, Элементы.Зарплата.ТекущиеДанные, "ПериодВзаиморасчетов", "ПериодВзаиморасчетовСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПериодВзаиморасчетовРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.Зарплата.ТекущиеДанные, "ПериодВзаиморасчетов", "ПериодВзаиморасчетовСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПериодВзаиморасчетовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПериодВзаиморасчетовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриИзменении(Элемент)
	
	ИтогоКВыплате = Зарплата.Итог("КВыплате");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	СохранитьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьПараметры()
	
	Параметры.Свойство("ИдентификаторСтроки",	ИдентификаторСтроки);
	Зарплата.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресВХранилищеЗарплатыПоСтроке));
	
	Зарплата.Сортировать("ПериодВзаиморасчетов, Сотрудник, Подразделение");
	
	Параметры.Свойство("ФизическоеЛицо",		ФизическоеЛицо);
	
	Параметры.Свойство("Организация",			Организация);
	Параметры.Свойство("Подразделение",			Подразделение);
	Параметры.Свойство("ПериодРегистрации",		ПериодРегистрации);
	Параметры.Свойство("СтатьяФинансирования",	СтатьяФинансирования);
	Параметры.Свойство("СтатьяРасходов",		СтатьяРасходов);
	Параметры.Свойство("СпособВыплаты",			СпособВыплаты);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СотрудникСоответствуетФизическомуЛицу(Сотрудник, ФизическоеЛицо)
	ФизическоеЛицоСотрудника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	Возврат ФизическоеЛицоСотрудника = ФизическоеЛицо
КонецФункции

&НаКлиенте
Процедура СохранитьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПроверитьЗаполнение() Тогда
		
		РезультатыРедактирования = Новый Структура;
		РезультатыРедактирования.Вставить("Модифицированность", Модифицированность);
		РезультатыРедактирования.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
		РезультатыРедактирования.Вставить("АдресВХранилищеЗарплатыПоСтроке", АдресВХранилищеЗарплатыПоСтроке());
		
		Модифицированность = Ложь;
		Закрыть(РезультатыРедактирования)
		
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция АдресВХранилищеЗарплатыПоСтроке()
	
	ЗарплатаФизлица = Зарплата.Выгрузить();
	ЗарплатаФизлица.ЗаполнитьЗначения(ИдентификаторСтроки, "ИдентификаторСтроки");
	
	Возврат ПоместитьВоВременноеХранилище(ЗарплатаФизлица, УникальныйИдентификатор);
	
КонецФункции	

&НаСервере
Процедура ПолучитьЕдинственногоСотрудника()
	
	СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("Организация",                   Организация);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("КадровыеДанные",                "");
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОтбиратьПоГоловнойОрганизации", Ложь);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("НачалоПериода",                 НачалоМесяца(ПериодРегистрации));
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОкончаниеПериода",              КонецМесяца(ПериодРегистрации));
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("СписокФизическихЛиц",           СписокФизическихЛиц);
	
	ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Если ТаблицаСотрудников.Количество() <> 1 Тогда
		Элементы.ЗарплатаСотрудник.Видимость = Истина;
	Иначе
		Элементы.ЗарплатаСотрудник.Видимость = Ложь;
		Сотрудник = ТаблицаСотрудников[0].Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
