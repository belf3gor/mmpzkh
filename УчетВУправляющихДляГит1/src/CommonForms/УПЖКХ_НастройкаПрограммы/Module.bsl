#Область ПроцедурыИФункцииУправленияВидимостью

// Процедура управляет видимостью элементов формы.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаНастройкиУникЧастиИдентификатораЛС.Доступность = Форма.СпособФормированияИдентификатораЛС = 1;
	Элементы.ГруппаНастройкиУникЧастиИдентификатораСч.Доступность = Форма.СпособФормированияИдентификатораСч = 1;
	Элементы.ГруппаНастройкиУникЧастиЛогина.Доступность           = Форма.СпособФормированияЛогинаЛС = 1;
	
	Элементы.КнопкаОткрытьНастройкиДоступаКОбъектамУчета.Доступность = Форма.НаборКонстант.УПЖКХ_ИспользоватьОграничениеДоступаПоОбъектамУчета;
	
	Элементы.КоличествоПотоков.Доступность                 = Форма.НаборКонстант.УПЖКХ_ИспользоватьМногопоточность;
	Элементы.КнопкаОпределитьКоличествоПотоков.Доступность = Форма.НаборКонстант.УПЖКХ_ИспользоватьМногопоточность;
	
КонецПроцедуры // УправлениеФормой()

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Функция выполняет анализ модифицированности константы "УПЖКХ_УпрощенныйВариантУчетаСобственников".
//
// Возвращаемое значение:
//  Булево - Истина если операция выполнена успешно, Ложь - иначе.
//
&НаСервере
Функция ПрименитьПараметры()
	
	НетОшибки = Истина;
	
	// Страница "Идентификаторы".
	
	ЗаголовокОбщий = "Запись настроек:";
	ЗаголовокРаздела = "  Раздел ""Идентификаторы/Лицевой счет"":";
	Если ЗначениеЗаполнено(ПрефиксИдЛС) ИЛИ СпособФормированияИдентификатораЛС = 1 Тогда
		ДлинаПрефиксИдЛС = СтрДлина(ПрефиксИдЛС);
		Если (ДлинаПрефиксИдЛС + ДлинаУникЧастиИдЛС) < 3 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"Длина идентификатора лицевого счета не может быть меньше 3 символов!",, ЗаголовокОбщий + ЗаголовокРаздела);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СпособФормированияИдентификатораЛС = 1 Тогда
		Если ПустаяСтрока(СоставУникальнойЧастиИдентификатораЛС) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"Не указан состав уникальной части идентификатора лицевого счета!",, ЗаголовокОбщий + ЗаголовокРаздела);
			Возврат Ложь;
		КонецЕсли;
		Если ДлинаУникЧастиИдЛС = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"Длина уникальной части идентификатора лицевого счета не может быть равна 0!",, ЗаголовокОбщий + ЗаголовокРаздела);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовокРаздела = "  Раздел ""Идентификаторы/Счетчик"":";
	Если СпособФормированияИдентификатораСч = 1 Тогда
		Если ПустаяСтрока(СоставУникальнойЧастиИдентификатораСч) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"Не указан состав уникальной части идентификатора счетчика!",, ЗаголовокОбщий + ЗаголовокРаздела);
			Возврат Ложь;
		КонецЕсли;
		Если ДлинаУникЧастиИдСч = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"Длина уникальной части идентификатора счетчика не может быть равна 0!",, ЗаголовокОбщий + ЗаголовокРаздела);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовокРаздела = "  Раздел ""Идентификаторы/Логин"":";
	Если СпособФормированияЛогинаЛС = 1 Тогда
		Если ПустаяСтрока(СоставУникальнойЧастиЛогинаЛС) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"Не указан состав уникальной части логина!",, ЗаголовокОбщий + ЗаголовокРаздела);
			Возврат Ложь;
		КонецЕсли;
		Если ДлинаУникЧастиЛогинаЛС = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"Длина уникальной части логина не может быть равна 0!",, ЗаголовокОбщий + ЗаголовокРаздела);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Страница "WEB-интеграция".
	
	ЗаголовокРаздела = "  Раздел ""WEB-интеграция"":";
	Если СоставПароляДоступаВеб = "" Тогда
		КолНаборов = 0;
	Иначе
		КолНаборов = СтрЧислоВхождений(СоставПароляДоступаВеб, ",") + 1;
	КонецЕсли;
	
	Если ДлинаПароляДоступаВеб < КолНаборов Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Длина пароля не может быть меньше количества наборов символов, входящих в его состав.",
											, ЗаголовокОбщий + ЗаголовокРаздела);
	
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НетОшибки;
	
КонецФункции // ПрименитьПараметры()

// Функция выполняет доп. действия перед записью набор констант.
//
// Возвращаемое значение:
//  Булево - Истина если операция выполнена успешно, Ложь - иначе.
//
&НаСервере
Функция ВыполнитьДополнительныеДействияПередЗаписьюНабора()
	
	Если НЕ ПрименитьПараметры() Тогда
		Возврат Ложь;
	Иначе
		СформироватьИдентификаторы(НаборКонстант.УПЖКХ_НастройкиИдентификатораЛицевогоСчета, ПрефиксИдЛС,
								   СпособФормированияИдентификатораЛС, ДлинаУникЧастиИдЛС, СоставУникальнойЧастиИдентификатораЛС);
		СформироватьИдентификаторы(НаборКонстант.УПЖКХ_НастройкиИдентификатораПриборовУчета, ПрефиксИдСч,
								   СпособФормированияИдентификатораСч, ДлинаУникЧастиИдСч, СоставУникальнойЧастиИдентификатораСч);
		СформироватьИдентификаторы(НаборКонстант.УПЖКХ_НастройкиИдентификатораЛогина, ПрефиксЛогинаЛС,
								   СпособФормированияЛогинаЛС, ДлинаУникЧастиЛогинаЛС, СоставУникальнойЧастиЛогинаЛС);
		
		СформироватьСтрокуНастроекПароляДоступаВеб(НаборКонстант.УПЖКХ_НастройкиПароляДоступаВеб);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ВыполнитьДополнительныеДействияПередЗаписьюНабора()

// Процедура получает настройки идентификаторов лицевого счета и приборов учета.
//
&НаСервере
Процедура ПолучитьНастройкиИдентификаторов(Константа,
	                                      ПрефиксИд,
	                                      СпособФормированияИдентификатора,
	                                      ДлинаУникЧастиИд,
	                                      НаименованиеСоставаУникальнойЧастиИдентификатора,
	                                      ИдентификаторСимволыВР,
	                                      ИдентификаторСимволыНР,
	                                      ИдентификаторСимволыЦифры)
	
	НастройкиИД = Константа;
	НастройкиИД = НастройкиИД + ",";
	ПрефиксИд = Лев(НастройкиИД, Найти(НастройкиИД, ";") - 1);
	
	мСтрока = Сред(НастройкиИД, Найти(НастройкиИД, ";") + 1);
	
	Если Лев(мСтрока, Найти(мСтрока, ";") - 1) = "Да" Тогда
		СпособФормированияИдентификатора = 1;
	Иначе
		СпособФормированияИдентификатора = 0;
	КонецЕсли;
	
	мСтрока = Сред(мСтрока, Найти(мСтрока, ";") + 1);
	Попытка
		ДлинаУникЧастиИд = Число(Лев(мСтрока, Найти(мСтрока, ";") - 1));
	Исключение
		ДлинаУникЧастиИд = 0;
	КонецПопытки;
	
	мСтрока = Сред(мСтрока, Найти(мСтрока, ";") + 1);
	
	Если мСтрока = "," Тогда
		ЭтаФорма[НаименованиеСоставаУникальнойЧастиИдентификатора] = "";
		Возврат;
	КонецЕсли;
	
	СоставУникальнойЧастиИдентификатора = "";
	
	Если СтрЧислоВхождений(мСтрока, "ВР") > 0 Тогда
		ИдентификаторСимволыВР = Истина;
		СоставУникальнойЧастиИдентификатора = СоставУникальнойЧастиИдентификатора + "ВР";
	КонецЕсли;
	
	Если СтрЧислоВхождений(мСтрока, "НР") > 0 Тогда
		ИдентификаторСимволыНР = Истина;
		СоставУникальнойЧастиИдентификатора = СоставУникальнойЧастиИдентификатора + ?(ПустаяСтрока(СоставУникальнойЧастиИдентификатора), "", ",") + "НР";
	КонецЕсли;
	
	Если СтрЧислоВхождений(мСтрока, "Цифры") > 0 Тогда
		ИдентификаторСимволыЦифры = Истина;
		СоставУникальнойЧастиИдентификатора = СоставУникальнойЧастиИдентификатора + ?(ПустаяСтрока(СоставУникальнойЧастиИдентификатора), "", ",") + "Цифры";
	КонецЕсли;
	
	ЭтаФорма[НаименованиеСоставаУникальнойЧастиИдентификатора] = СоставУникальнойЧастиИдентификатора;
	
	ОбновитьПримерИдентификатора(НаименованиеСоставаУникальнойЧастиИдентификатора);
	
КонецПроцедуры // ПолучитьНастройкиИденификаторов()

// Процедура формирует строку настроек идентификаторов лицевого счета и приборов учета.
//
&НаСервереБезКонтекста
Процедура СформироватьИдентификаторы(Константа,
	                                 ПрефиксИд,
	                                 СпособФормированияИдентификатораЛС,
	                                 ДлинаУникЧастиИд,
	                                 СоставУникальнойЧастиИдентификатораЛС)
	
	Константа = ПрефиксИд + ";" + ?(СпособФормированияИдентификатораЛС = 1, "Да", "Нет") + ";" + ДлинаУникЧастиИд + ";" + СоставУникальнойЧастиИдентификатораЛС;
	
КонецПроцедуры // СформироватьИдентификаторы()

// Предназначена для обновления состава наборов символов уникальной части идентификаторов.
// 
&НаСервере
Процедура ОбновитьСоставНаборовСимволовИдентификатора(Параметр, ФлажокУстановлен, НаименованиеСоставУникальнойЧастиИдентификатора)
	
	СоставУникальнойЧастиИдентификатора = ЭтаФорма[НаименованиеСоставУникальнойЧастиИдентификатора];
	
	Если ФлажокУстановлен Тогда
		
		Если СтрДлина(СоставУникальнойЧастиИдентификатора) > 0 Тогда
			СоставУникальнойЧастиИдентификатора = СоставУникальнойЧастиИдентификатора + ",";
		КонецЕсли;
		
		СоставУникальнойЧастиИдентификатора = СоставУникальнойЧастиИдентификатора + Параметр;
		
	Иначе
		
		Если СтрЧислоВхождений(СоставУникальнойЧастиИдентификатора, ",") > 0 Тогда
			Если Найти(СоставУникальнойЧастиИдентификатора, Параметр) = 1 Тогда
				СтрокаДляУдаления = Параметр + ",";
			Иначе
				СтрокаДляУдаления = "," + Параметр;
			КонецЕсли;
		Иначе
			СтрокаДляУдаления = Параметр;
		КонецЕсли;
		
		СоставУникальнойЧастиИдентификатора = СтрЗаменить(СоставУникальнойЧастиИдентификатора, СтрокаДляУдаления, "");
		
	КонецЕсли;
	
	ЭтаФорма[НаименованиеСоставУникальнойЧастиИдентификатора] = СоставУникальнойЧастиИдентификатора;
	
	ОбновитьПримерИдентификатора(НаименованиеСоставУникальнойЧастиИдентификатора);
	
КонецПроцедуры // ОбновитьСоставНаборовСимволовИдентификатора()

// Предназначена для обновления примера идентификатора.
//
&НаСервере
Процедура ОбновитьПримерИдентификатора(НаименованиеСоставУникальнойЧастиИдентификатора)
	
	СоставУникальнойЧастиИдентификатора = ЭтаФорма[НаименованиеСоставУникальнойЧастиИдентификатора];
	
	Если НаименованиеСоставУникальнойЧастиИдентификатора = "СоставУникальнойЧастиИдентификатораЛС" Тогда
		ДлинаУникЧастиИд                 = ДлинаУникЧастиИдЛС;
		ПрефиксИд                        = ПрефиксИдЛС;
		СпособФормированияИдентификатора = СпособФормированияИдентификатораЛС;
	ИначеЕсли НаименованиеСоставУникальнойЧастиИдентификатора = "СоставУникальнойЧастиИдентификатораСч" Тогда
		ДлинаУникЧастиИд                 = ДлинаУникЧастиИдСч;
		ПрефиксИд                        = ПрефиксИдСч;
		СпособФормированияИдентификатора = СпособФормированияИдентификатораСч;
	ИначеЕсли НаименованиеСоставУникальнойЧастиИдентификатора = "СоставУникальнойЧастиЛогинаЛС" Тогда
		ДлинаУникЧастиИд                 = ДлинаУникЧастиЛогинаЛС;
		ПрефиксИд                        = ПрефиксЛогинаЛС;
		СпособФормированияИдентификатора = СпособФормированияЛогинаЛС;
	КонецЕсли;
	
	// Выражение "СоставУникальнойЧастиИдентификатора = 1" означает то, что в идентификатора формируется как "Префикс + Уникальная часть"
	НастройкиИД = ПрефиксИд + ";" + ?(СпособФормированияИдентификатора = 1, "Да", "Нет") + ";" + ДлинаУникЧастиИд + ";" + СоставУникальнойЧастиИдентификатора;
	
	Если НаименованиеСоставУникальнойЧастиИдентификатора = "СоставУникальнойЧастиИдентификатораЛС" Тогда
		Элементы.ПримерИдентификатораЛС.Заголовок = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьИдентификаторЛС(НастройкиИД);
	ИначеЕсли НаименованиеСоставУникальнойЧастиИдентификатора = "СоставУникальнойЧастиИдентификатораСч" Тогда
		Элементы.ПримерИдентификатораСч.Заголовок = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьИдентификаторСчетчика(НастройкиИД);
	ИначеЕсли НаименованиеСоставУникальнойЧастиИдентификатора = "СоставУникальнойЧастиЛогинаЛС" Тогда
		Элементы.ПримерЛогинаЛС.Заголовок         = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьИдентификаторЛогина(НастройкиИД);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПримерИдентификатора()

// Обновляет заголовок клиентского приложения в зависимости от настроек программы.
//
&НаКлиенте
Процедура ОбновитьЗаголовокКлиентскогоПриложения()
	
	// Отражение в заголовке использования режима отладки.
	ЗаголовокИнформационнойБазы = ПолучитьИмяЭтойИнформационнойБазы();
	ИспользуетсяРежимОтладки    = ОпределитьИспользованиеРежимаОтладки();
	УстановитьЗаголовокКлиентскогоПриложения(ЗаголовокИнформационнойБазы + ?(ИспользуетсяРежимОтладки, " (РЕЖИМ ОТЛАДКИ)", ""));
	
КонецПроцедуры

// Функция получает имя информационной базы.
//
&НаСервере
Функция ПолучитьИмяЭтойИнформационнойБазы()
	
	Возврат ОбменДаннымиПовтИсп.ИмяЭтойИнформационнойБазы();
	
КонецФункции

// Функция определяет, используется ли режим отладки.
//
&НаСервере
Функция ОпределитьИспользованиеРежимаОтладки()
	
	Возврат НаборКонстант.УПЖКХ_ИспользоватьРежимОтладки;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПолучитьНастройкиИдентификаторов(НаборКонстант.УПЖКХ_НастройкиИдентификатораЛицевогоСчета, ПрефиксИдЛС,
	                                СпособФормированияИдентификатораЛС, ДлинаУникЧастиИдЛС, "СоставУникальнойЧастиИдентификатораЛС",
									ИдентификаторЛССимволыВР, ИдентификаторЛССимволыНР, ИдентификаторЛССимволыЦифры);
	ПолучитьНастройкиИдентификаторов(НаборКонстант.УПЖКХ_НастройкиИдентификатораПриборовУчета, ПрефиксИдСч,
	                                СпособФормированияИдентификатораСч, ДлинаУникЧастиИдСч, "СоставУникальнойЧастиИдентификатораСч",
									ИдентификаторСчСимволыВР, ИдентификаторСчСимволыНР, ИдентификаторСчСимволыЦифры);
	ПолучитьНастройкиИдентификаторов(НаборКонстант.УПЖКХ_НастройкиИдентификатораЛогина, ПрефиксЛогинаЛС,
	                                СпособФормированияЛогинаЛС, ДлинаУникЧастиЛогинаЛС, "СоставУникальнойЧастиЛогинаЛС",
									ЛогинЛССимволыВР, ЛогинЛССимволыНР, ЛогинЛССимволыЦифры);
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ПолучитьНастройкиПароляДоступаВеб();
	
	УправлениеФормой(ЭтаФорма);
	
	ЭтаФорма.КоманднаяПанель.Видимость = Ложь;
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаКомандыФормы);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПередЗаписью" формы.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если Отказ Или Не ВыполнитьДополнительныеДействияПередЗаписьюНабора() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если НеобходимоОбновитьИнтерфейс Тогда
		Оповестить("ОбновитьИнтерфейс");
		ОбновитьИнтерфейс();
		ОбновитьЗаголовокКлиентскогоПриложения();
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

//////////////////////////////////////////////
// Настройки по лицевым счетам

// Обработчик события "ПриИзменении" поля ввода длины идентификатора лицевого счета.
//
&НаКлиенте
Процедура ДлинаУникЧастиИдЛСПриИзменении(Элемент)
	
	ОбновитьПримерИдентификатора("СоставУникальнойЧастиИдентификатораЛС");
	
КонецПроцедуры // ДлинаУникЧастиИдЛСПриИзменении()

// Обработчик события "ПриИзменении" поля ввода длины идентификатора лицевого счета.
//
&НаКлиенте
Процедура ПрефиксИдЛСПриИзменении(Элемент)
	
	Если СпособФормированияИдентификатораЛС = 1 Тогда
		ОбновитьПримерИдентификатора("СоставУникальнойЧастиИдентификатораЛС");
	КонецЕсли;
	
КонецПроцедуры // ПрефиксИдЛСПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "СпособФормированияИдентификатораЛС".
//
&НаКлиенте
Процедура СпособФормированияИдентификатораЛСПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если СпособФормированияИдентификатораЛС = 1 Тогда
		ОбновитьПримерИдентификатора("СоставУникальнойЧастиИдентификатораЛС");
	Иначе
		Элементы.ПримерИдентификатораЛС.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры // СпособФормированияИдентификатораЛСПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ИдентификаторЛССимволыВР".
//
&НаКлиенте
Процедура ИдентификаторЛССимволыВРПриИзменении(Элемент)
	
	ОбновитьСоставНаборовСимволовИдентификатора("ВР", ИдентификаторЛССимволыВР, "СоставУникальнойЧастиИдентификатораЛС");
	
КонецПроцедуры // ИдентификаторЛССимволыВРПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ИдентификаторЛССимволыНР".
//
&НаКлиенте
Процедура ИдентификаторЛССимволыНРПриИзменении(Элемент)
	
	ОбновитьСоставНаборовСимволовИдентификатора("НР", ИдентификаторЛССимволыНР, "СоставУникальнойЧастиИдентификатораЛС");
	
КонецПроцедуры // ИдентификаторЛССимволыНРПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ИдентификаторЛССимволыЦифры".
//
&НаКлиенте
Процедура ИдентификаторЛССимволыЦифрыПриИзменении(Элемент)
	
	ОбновитьСоставНаборовСимволовИдентификатора("Цифры", ИдентификаторЛССимволыЦифры, "СоставУникальнойЧастиИдентификатораЛС");
	
КонецПроцедуры // ИдентификаторЛССимволыЦифрыПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "ПрефиксИдСч".
//
&НаКлиенте
Процедура ПрефиксИдСчПриИзменении(Элемент)
	
	Если СпособФормированияИдентификатораСч = 1 Тогда
		ОбновитьПримерИдентификатора("СоставУникальнойЧастиИдентификатораСч");
	КонецЕсли;
	
КонецПроцедуры // ПрефиксИдСчПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "ДлинаУникЧастиИдСч".
//
&НаКлиенте
Процедура ДлинаУникЧастиИдСчПриИзменении(Элемент)
	
	ОбновитьПримерИдентификатора("СоставУникальнойЧастиИдентификатораСч");
	
КонецПроцедуры // ДлинаУникЧастиИдСчПриИзменении()

// Обработчик события "ПриИзменении" поля ввода "СпособФормированияИдентификатораСч".
//
&НаКлиенте
Процедура СпособФормированияИдентификатораСчПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если СпособФормированияИдентификатораСч = 1 Тогда
		ОбновитьПримерИдентификатора("СоставУникальнойЧастиИдентификатораСч");
	Иначе
		Элементы.ПримерИдентификатораСч.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры // СпособФормированияИдентификатораСчПриИзменении()

// Обработчик события "ПриИзменении" флажка "ИдентификаторСчСимволыВР".
//
&НаКлиенте
Процедура ИдентификаторСчСимволыВРПриИзменении(Элемент)
	
	ОбновитьСоставНаборовСимволовИдентификатора("ВР", ИдентификаторСчСимволыВР, "СоставУникальнойЧастиИдентификатораСч");
	
КонецПроцедуры // ИдентификаторСчСимволыВРПриИзменении()

// Обработчик события "ПриИзменении" флажка "ИдентификаторСчСимволыНР".
//
&НаКлиенте
Процедура ИдентификаторСчСимволыНРПриИзменении(Элемент)
	
	ОбновитьСоставНаборовСимволовИдентификатора("НР", ИдентификаторСчСимволыНР, "СоставУникальнойЧастиИдентификатораСч");
	
КонецПроцедуры // ИдентификаторСчСимволыНРПриИзменении()

// Обработчик события "ПриИзменении" флажка "ИдентификаторСчСимволыЦифры".
//
&НаКлиенте
Процедура ИдентификаторСчСимволыЦифрыПриИзменении(Элемент)
	
	ОбновитьСоставНаборовСимволовИдентификатора("Цифры", ИдентификаторСчСимволыЦифры, "СоставУникальнойЧастиИдентификатораСч");
	
КонецПроцедуры // ИдентификаторСчСимволыЦифрыПриИзменении()

//////////////////////////////////////////////
// WEB-интеграция

//////////////////////////////////////////////
// Настройки по логинам

// Обработчик события "ПриИзменении" поля ввода префикса идентификатора логина.
//
&НаКлиенте
Процедура ПрефиксИдЛогинПриИзменении(Элемент)
	
	Если СпособФормированияЛогинаЛС = 1 Тогда
		ОбновитьПримерИдентификатора("СоставУникальнойЧастиЛогинаЛС");
	КонецЕсли;
	
КонецПроцедуры // ПрефиксИдЛогинПриИзменении()

// Обработчик события "ПриИзменении" поля ввода длины идентификатора логина.
//
&НаКлиенте
Процедура ДлинаУникЧастиИдЛогинПриИзменении(Элемент)
	
	ОбновитьПримерИдентификатора("СоставУникальнойЧастиЛогинаЛС");
	
КонецПроцедуры // ДлинаУникЧастиИдЛогинПриИзменении()

// Обработчик события "ПриИзменении" тумблера "СпособФормированияЛогина".
//
&НаКлиенте
Процедура СпособФормированияЛогинаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если СпособФормированияЛогинаЛС = 1 Тогда
		ОбновитьПримерИдентификатора("СоставУникальнойЧастиЛогинаЛС");
	Иначе
		Элементы.ПримерЛогинаЛС.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры // СпособФормированияЛогинаПриИзменении()

// Обработчик события "ПриИзменении" флажка "ЛогинЛССимволыВР".
//
&НаКлиенте
Процедура ЛогинЛССимволыВРПриИзменении(Элемент)
	
	ОбновитьСоставНаборовСимволовИдентификатора("ВР", ЛогинЛССимволыВР, "СоставУникальнойЧастиЛогинаЛС");
	
КонецПроцедуры // ЛогинЛССимволыВРПриИзменении()

// Обработчик события "ПриИзменении" флажка "ЛогинЛССимволыНР".
//
&НаКлиенте
Процедура ЛогинЛССимволыНРПриИзменении(Элемент)
	
	ОбновитьСоставНаборовСимволовИдентификатора("НР", ЛогинЛССимволыНР, "СоставУникальнойЧастиЛогинаЛС");
	
КонецПроцедуры // ЛогинЛССимволыНРПриИзменении()

// Обработчик события "ПриИзменении" флажка "ЛогинЛССимволыЦифры".
//
&НаКлиенте
Процедура ЛогинЛССимволыЦифрыПриИзменении(Элемент)
	
	ОбновитьСоставНаборовСимволовИдентификатора("Цифры", ЛогинЛССимволыЦифры, "СоставУникальнойЧастиЛогинаЛС");
	
КонецПроцедуры // ЛогинЛССимволыЦифрыПриИзменении()

//////////////////////////////////////////////
// Настройки по паролям

// Обработчик события "ПриИзменении" поля "ДлинаПароляДоступаВеб".
//
&НаКлиенте
Процедура ДлинаПароляДоступаВебПриИзменении(Элемент)
	
	ОбновитьПримерПароляДоступаВеб();
	
КонецПроцедуры // ДлинаПароляДоступаВебПриИзменении()

// Обработчик события "ПриИзменении" поля "ПарольСимволыВерхнегоРегистра".
//
&НаКлиенте
Процедура ПарольСимволыВерхнегоРегистраПриИзменении(Элемент)
	
	ОбновитьСтрокуСоставаПароляДоступаВеб("ВР", ПарольСимволыВерхнегоРегистра);
	
КонецПроцедуры // ПарольСимволыВерхнегоРегистраПриИзменении()

// Обработчик события "ПриИзменении" поля "ПарольСимволыНижнегоРегистра".
//
&НаКлиенте
Процедура ПарольСимволыНижнегоРегистраПриИзменении(Элемент)
	
	ОбновитьСтрокуСоставаПароляДоступаВеб("НР", ПарольСимволыНижнегоРегистра);
	
КонецПроцедуры // ПарольСимволыНижнегоРегистраПриИзменении()

// Обработчик события "ПриИзменении" поля "ПарольЦифры".
//
&НаКлиенте
Процедура ПарольЦифрыПриИзменении(Элемент)
	
	ОбновитьСтрокуСоставаПароляДоступаВеб("Цифры", ПарольЦифры);
	
КонецПроцедуры // ПарольЦифрыПриИзменении()

// Обработчик события "ПриИзменении" поля "ПарольЗнакиПунктуации".
//
&НаКлиенте
Процедура ПарольЗнакиПунктуацииПриИзменении(Элемент)
	
	ОбновитьСтрокуСоставаПароляДоступаВеб("ЗП", ПарольЗнакиПунктуации);
	
КонецПроцедуры // ПарольЗнакиПунктуацииПриИзменении()

// Обновляет пример идентификатора лицевого счета согласно выбранным настройкам.
//
&НаСервере
Процедура ОбновитьПримерПароляДоступаВеб()
	
	СтрокаНастроек = "";
	СформироватьСтрокуНастроекПароляДоступаВеб(СтрокаНастроек);
	
	ПримерПароляДоступаВеб = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПарольДоступаВеб(СтрокаНастроек);

КонецПроцедуры // ОбновитьПримерПароляДоступаВеб()

// Обновляет строку формата пароля доступа по таблице.
//
&НаСервере
Процедура ОбновитьСтрокуСоставаПароляДоступаВеб(Параметр, ФлажокУстановлен)

	Если ФлажокУстановлен Тогда
		Если СтрДлина(СоставПароляДоступаВеб) > 0 Тогда
			СоставПароляДоступаВеб = СоставПароляДоступаВеб + ",";
		КонецЕсли;
		СоставПароляДоступаВеб = СоставПароляДоступаВеб + Параметр;
	Иначе
		Если СтрЧислоВхождений(СоставПароляДоступаВеб, ",") > 0 Тогда
			Если Найти(СоставПароляДоступаВеб, Параметр) = 1 Тогда
				СтрокаДляУдаления = Параметр + ",";
			Иначе
				СтрокаДляУдаления = "," + Параметр;
			КонецЕсли;
		Иначе
			СтрокаДляУдаления = Параметр;
		КонецЕсли;
		СоставПароляДоступаВеб = СтрЗаменить(СоставПароляДоступаВеб, СтрокаДляУдаления, "");
	КонецЕсли;
	
	ОбновитьПримерПароляДоступаВеб();
	
КонецПроцедуры // ОбновитьСтрокуСоставаПароляДоступаВеб()

// Обновляет настройки состава пароля доступа по строке.
//
&НаСервере
Процедура ОбновитьНастройкиСоставаПароляДоступаВеб()
	
	Если ПустаяСтрока(СоставПароляДоступаВеб) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрЧислоВхождений(СоставПароляДоступаВеб, "ВР") > 0 Тогда
		ПарольСимволыВерхнегоРегистра = Истина;
	КонецЕсли;
	
	Если СтрЧислоВхождений(СоставПароляДоступаВеб, "НР") > 0 Тогда
		ПарольСимволыНижнегоРегистра = Истина;
	КонецЕсли;
	
	Если СтрЧислоВхождений(СоставПароляДоступаВеб, "Цифры") > 0 Тогда
		ПарольЦифры = Истина;
	КонецЕсли;
	
	Если СтрЧислоВхождений(СоставПароляДоступаВеб, "ЗП") > 0 Тогда
		ПарольЗнакиПунктуации = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНастройкиСоставаПароляДоступаВеб()

// Получает строку настроек формирования пароля доступа WEB.
//
// Параметры:
//  СтрокаНастроек - строка настроек пароля доступа.
//
&НаСервере
Процедура СформироватьСтрокуНастроекПароляДоступаВеб(СтрокаНастроек)
	
	СтрокаНастроек = "" + ДлинаПароляДоступаВеб + ";" + СоставПароляДоступаВеб;
	
КонецПроцедуры // СформироватьСтрокуНастроекПароляДоступаВеб()

// Получает настройки пароля доступа WEB.
//
&НаСервере
Процедура ПолучитьНастройкиПароляДоступаВеб()
	
	НастройкиПароля = НаборКонстант.УПЖКХ_НастройкиПароляДоступаВеб;
	ДлинаПароляДоступаВеб  = 0;
	СоставПароляДоступаВеб = "";
	
	Если Не НастройкиПароля = "" Тогда
		ПозицияРазделителя = Найти(НастройкиПароля, ";");
		
		Если Не ПозицияРазделителя = 0 Тогда
			ДлинаПароляДоступаВеб  = ЧИСЛО(Лев(НастройкиПароля, ПозицияРазделителя - 1));
			СоставПароляДоступаВеб = Сред(НастройкиПароля, ПозицияРазделителя + 1);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьНастройкиСоставаПароляДоступаВеб();
	ОбновитьПримерПароляДоступаВеб();
	
КонецПроцедуры // ПолучитьНастройкиПароляДоступаВеб()

//////////////////////////////////////////////
// Функциональность программы

// Обработчик события "ПриИзменении" поля "Использовать функционал ГЦЖС".
//
&НаКлиенте
Процедура УПЖКХ_ИспользоватьФункционалВыгрузкиВГЦЖСПриИзменении(Элемент)
	
	НеобходимоОбновитьИнтерфейс = Истина;
	
КонецПроцедуры // УПЖКХ_ИспользоватьФункционалВыгрузкиВГЦЖСПриИзменении()

//////////////////////////////////////////////
// Права доступа

// Обработчик события "ПриИзменении" флажка "Использовать ограничение доступа по объектам учета".
//
&НаКлиенте
Процедура УПЖКХ_ИспользоватьОграничениеДоступаПоОбъектамУчетаПриИзменении(Элемент)
	
	Если НаборКонстант.УПЖКХ_ИспользоватьОграничениеДоступаПоОбъектамУчета Тогда
		
		ТекстВопроса =
		НСтр("ru = 'Включить ограничение доступа на уровне записей по объектам учета?
		|
		|Потребуется заполнение данных, которое будет выполняться частями
		|регламентным заданием ""Заполнение данных для ограничения доступа по объектам учета""
		|(ход выполнения в журнале регистрации).
		|
		|Выполнение может сильно замедлить работу программы и выполняться
		|от нескольких секунд до многих часов (в зависимости от объема данных).'");
		
		ПоказатьВопрос(
		Новый ОписаниеОповещения(
		"ОграничиватьДоступНаУровнеЗаписейПриИзмененииЗавершение",
		ЭтотОбъект,
		Элемент),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
		
	Иначе УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // УПЖКХ_ИспользоватьОграничениеДоступаПоОбъектамУчетаПриИзменении()

// Обработчик завершения изменения настройки "Использовать ограничение доступа по объектам учета".
//
&НаКлиенте
Процедура ОграничиватьДоступНаУровнеЗаписейПриИзмененииЗавершение(Ответ, Элемент) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		НаборКонстант.УПЖКХ_ИспользоватьОграничениеДоступаПоОбъектамУчета = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ОграничиватьДоступНаУровнеЗаписейПриИзмененииЗавершение()

//////////////////////////////////////////////
// Отладка программы

// Обработчик события "ПриИзменении" флажка "Включить режим отладки".
//
&НаКлиенте
Процедура ПолеРежимОтладкиПриИзменении(Элемент)
	
	НеобходимоОбновитьИнтерфейс = Истина;
	
КонецПроцедуры

//////////////////////////////////////////////
// Производительность

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента "ИспользоватьМногопоточность".
Процедура ИспользоватьМногопоточностьПриИзменении(Элемент)
	
	Элементы.КоличествоПотоков.Доступность                 = НаборКонстант.УПЖКХ_ИспользоватьМногопоточность;
	Элементы.КнопкаОпределитьКоличествоПотоков.Доступность = НаборКонстант.УПЖКХ_ИспользоватьМногопоточность;
	
	НеобходимоОбновитьИнтерфейс = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента "КоличествоПотоков".
Процедура КоличествоПотоковПриИзменении(Элемент)
	
	НеобходимоОбновитьИнтерфейс = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "Определить количество потоков".
//
Процедура КомандаОпределитьКоличествоПотоков(Команда)
	
	Если ИнформационнаяБазаФайловая() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьОтветНаАвтоопределениеКоличестваПотоков", ЭтаФорма);
		
		ПоказатьВопрос(Оповещение, "Текущая информационная база является файловой. Не рекомендуется использовать
									|многопоточную обработку данных на файловых базах.
									|
									|Продолжить автоматическое определение количества ядер процессора?", РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОпределитьКоличествоПотоков();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Определяет, является ли база файловой.
//
Функция ИнформационнаяБазаФайловая()
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
КонецФункции

&НаКлиенте
// Обрабатывает ответ на предупреждение об использовании многопоточности на файловых базах.
//
Процедура ОбработатьОтветНаАвтоопределениеКоличестваПотоков(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьКоличествоПотоков();
	
КонецПроцедуры

&НаКлиенте
// Определяет количество потоков для использования многопоточности.
//
Процедура ОпределитьКоличествоПотоков()
	
	ИнформацияОПроцессоре = УПЖКХ_МногопоточнаяОбработкаДанных.ПолучитьИнформациюОКоличествеЯдерИПотоковПроцессора();
	
	Если ИнформацияОПроцессоре.ВыполненоУспешно Тогда
		НаборКонстант.УПЖКХ_КоличествоПотоковПриМногопоточнойОбработкеДанных = ИнформацияОПроцессоре.КоличествоЯдер;
	Иначе
		Элементы.НадписьНеудачноеОпределениеКоличестваПотоков.Видимость = Истина;
	КонецЕсли;
	
	НеобходимоОбновитьИнтерфейс = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Нажатие" надписи "Рекомендации по использованию
// количества потоков в зависимости от мощности сервера".
Процедура НадписьРекомендацияНажатие(Элемент)
	
	КВП_РаботаСДиалогамиКлиент.ПоказатьВебСтраницу(УПЖКХ_ИнформацияОРазработчикеИПрограмме.АдресСтраницыРекомендацииПоИспользованиюКоличестваПотоков(),
													"Рекомендации по использованию количества потоков", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

// Процедура - Обработчик события "нажатие" на кнопку "Настройки доступа пользователей к объектам учета".
//
&НаКлиенте
Процедура ОткрытьНастройкиДоступаКОбъектамУчета(Команда)
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_НастройкиДоступаПользователейКОбъектамУчета.ФормаСписка");
	
КонецПроцедуры // ОткрытьНастройкиДоступаКОбъектамУчета()

// Процедура - Обработчик события "Нажатие" на гиперссылку "ДекорацияПерейтиНаСайтРазработчика".
//
&НаКлиенте
Процедура ДекорацияПерейтиНаСайтРазработчикаНажатие(Элемент)
	
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере(УПЖКХ_ИнформацияОРазработчикеИПрограмме.АдресГлавнойСтраницыСайтаКомпании("~VxILM"));
	
КонецПроцедуры // ДекорацияПерейтиНаСайтРазработчикаНажатие()

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти