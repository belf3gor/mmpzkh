#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МаксимальноеКоличествоБлоков = (ИнформационнаяПанель.КоличествоСтрок() * ИнформационнаяПанель.КоличествоКолонок());
	
	РазбитьСписокБлоков(Параметры.СписокБлоков, ДоступныеБлоки, ВыбранныеБлоки, МаксимальноеКоличествоБлоков);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И Не ЗавершениеРаботы Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Настройки были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьИзменения();
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеБлоки

&НаКлиенте
Процедура ДоступныеБлокиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДобавитьБлок(ДоступныеБлоки.НайтиПоИдентификатору(ВыбраннаяСтрока));
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеБлокиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ВыбранныеБлоки.Количество() >= МаксимальноеКоличествоБлоков Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = ДоступныеБлоки.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	ПараметрыПеретаскивания.Значение = ЭлементСписка.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеБлокиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранныеБлоки.НайтиПоЗначению(ПараметрыПеретаскивания.Значение) <> Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоступныеБлокиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	// Перетаскивание из списка Выбранные блоки
	ЭлементСписка = ВыбранныеБлоки.НайтиПоЗначению(ПараметрыПеретаскивания.Значение);
	Если ЭлементСписка <> Неопределено Тогда
		УдалитьБлок(ЭлементСписка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыбранныеБлоки

&НаКлиенте
Процедура ВыбранныеБлокиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	УдалитьБлок(ВыбранныеБлоки.НайтиПоИдентификатору(ВыбраннаяСтрока));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеБлокиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ЭлементСписка = ВыбранныеБлоки.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	ПараметрыПеретаскивания.Значение = ЭлементСписка.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеБлокиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ДоступныеБлоки.НайтиПоЗначению(ПараметрыПеретаскивания.Значение) <> Неопределено
		Или ВыбранныеБлоки.НайтиПоЗначению(ПараметрыПеретаскивания.Значение) <> Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеБлокиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	// Перетаскивание из списка Доступные блоки
	ЭлементСписка = ДоступныеБлоки.НайтиПоЗначению(ПараметрыПеретаскивания.Значение);
	Если ЭлементСписка <> Неопределено Тогда
		
		Если Строка <> Неопределено Тогда
			ЭлементПриемника = ВыбранныеБлоки.НайтиПоИдентификатору(Строка);
			ПозицияВставки = ВыбранныеБлоки.Индекс(ЭлементПриемника);
		КонецЕсли;
		
		ДобавитьБлок(ЭлементСписка, ПозицияВставки);
		Возврат;
		
	КонецЕсли;
	
	// Перетаскивание внутри списка
	ЭлементСписка = ВыбранныеБлоки.НайтиПоЗначению(ПараметрыПеретаскивания.Значение);
	Если ЭлементСписка <> Неопределено Тогда
		
		ИсходнаяПозиция = ВыбранныеБлоки.Индекс(ЭлементСписка);
		
		Если Строка <> Неопределено Тогда
			ЭлементПриемника = ВыбранныеБлоки.НайтиПоИдентификатору(Строка);
			КонечнаяПозиция = ВыбранныеБлоки.Индекс(ЭлементПриемника);
		Иначе
			КонечнаяПозиция = ВыбранныеБлоки.Количество() - 1;
		КонецЕсли;
		
		ВыбранныеБлоки.Сдвинуть(ЭлементСписка, КонечнаяПозиция - ИсходнаяПозиция);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Добавить(Команда)
	
	Если Элементы.ДоступныеБлоки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = ДоступныеБлоки.НайтиПоЗначению(Элементы.ДоступныеБлоки.ТекущиеДанные.Значение);
	Если ЭлементСписка <> Неопределено Тогда
		ДобавитьБлок(ЭлементСписка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	Если Элементы.ВыбранныеБлоки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = ВыбранныеБлоки.НайтиПоЗначению(Элементы.ВыбранныеБлоки.ТекущиеДанные.Значение);
	Если ЭлементСписка <> Неопределено Тогда
		УдалитьБлок(ЭлементСписка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсе(Команда)
	
	УдалитьВсеБлоки();
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеНастройки(Команда)
	
	УстановитьНастройкиПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	СохранитьИзменения();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	СохранитьИзменения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	МаксимальноеКоличествоБлоков = Форма.МаксимальноеКоличествоБлоков;
	
	ДоступныБлоки = (Форма.ДоступныеБлоки.Количество() > 0);
	
	КоличествоВыбранных = Форма.ВыбранныеБлоки.Количество();
	ВыбраныБлоки = (КоличествоВыбранных > 0);
	
	Элементы.Добавить.Доступность   = ДоступныБлоки И (КоличествоВыбранных < МаксимальноеКоличествоБлоков);
	Элементы.Удалить.Доступность    = ВыбраныБлоки;
	Элементы.УдалитьВсе.Доступность = ВыбраныБлоки;
	
	Элементы.ПереместитьВверх.Доступность = ВыбраныБлоки;
	Элементы.ПереместитьВниз.Доступность  = ВыбраныБлоки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБлок(ЭлементСписка, ПозицияВставки = Неопределено)
	
	Если ЭлементСписка = Неопределено Или ВыбранныеБлоки.Количество() >= МаксимальноеКоличествоБлоков Тогда
		Возврат;
	КонецЕсли;
	
	Если ПозицияВставки = Неопределено Тогда
		НовыйЭлемент = ВыбранныеБлоки.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	Иначе
		НовыйЭлемент = ВыбранныеБлоки.Вставить(ПозицияВставки, ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЕсли;
	Элементы.ВыбранныеБлоки.ТекущаяСтрока = НовыйЭлемент.ПолучитьИдентификатор();
	
	ДоступныеБлоки.Удалить(ЭлементСписка);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьБлок(ЭлементСписка)
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйЭлемент = ДоступныеБлоки.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	ДоступныеБлоки.СортироватьПоПредставлению();
	Элементы.ДоступныеБлоки.ТекущаяСтрока = НовыйЭлемент.ПолучитьИдентификатор();
	
	ВыбранныеБлоки.Удалить(ЭлементСписка);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеБлоки()
	
	Для Каждого ЭлементСписка Из ВыбранныеБлоки Цикл
		ДоступныеБлоки.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	ДоступныеБлоки.СортироватьПоПредставлению();
	
	ВыбранныеБлоки.Очистить();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиПоУмолчанию()
	
	СписокБлоков = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из ВыбранныеБлоки Цикл
		СписокБлоков.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	Для Каждого ЭлементСписка Из ДоступныеБлоки Цикл
		СписокБлоков.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	СписокБлоковПоУмолчанию = НастройкаИнформационнойПанелиПоУмолчанию(СписокБлоков);
	
	РазбитьСписокБлоков(СписокБлоковПоУмолчанию, ДоступныеБлоки, ВыбранныеБлоки, МаксимальноеКоличествоБлоков);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкаИнформационнойПанелиПоУмолчанию(Знач ИсходныйСписокБлоков)
	
	СписокБлоковПоУмолчанию = Новый СписокЗначений;
	
	НастройкаИнформационнойПанели = ИнформационнаяПанель.НастройкаПоУмолчанию();
	ОграничитьКоличествоВыводимыхПоУмолчаниюБлоков(НастройкаИнформационнойПанели, ИсходныйСписокБлоков);
	
	Для Каждого Настройка Из НастройкаИнформационнойПанели Цикл
		ЭлементСписка = ИсходныйСписокБлоков.НайтиПоЗначению(Настройка.Ключ);
		Если ЭлементСписка <> Неопределено Тогда
			СписокБлоковПоУмолчанию.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, Настройка.Значение.Пометка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из ИсходныйСписокБлоков Цикл
		Если СписокБлоковПоУмолчанию.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
			СписокБлоковПоУмолчанию.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокБлоковПоУмолчанию;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОграничитьКоличествоВыводимыхПоУмолчаниюБлоков(НастройкиБлоков, КоллекцияБлоков)
	
	КоличествоОтмеченныхБлоков = 0;
	Для Каждого Настройка Из НастройкиБлоков Цикл
		Блок = КоллекцияБлоков.НайтиПоЗначению(Настройка.Ключ);
		Если Блок <> Неопределено Тогда
			КоличествоОтмеченныхБлоков = КоличествоОтмеченныхБлоков + 1;
			Если КоличествоОтмеченныхБлоков > ИнформационнаяПанель.КоличествоБлоковПоУмолчанию() Тогда
				// На панель уже выведено максимальное количество блоков по умолчанию.
				// Пометка у остальных блоков снимается.
				Настройка.Значение.Пометка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РазбитьСписокБлоков(Знач ПолныйСписокБлоков, ДоступныеБлоки, ВыбранныеБлоки, Знач МаксимальноеКоличествоБлоков)
	
	ВыбранныеБлоки.Очистить();
	ДоступныеБлоки.Очистить();
	
	КоличествоБлоков = 0;
	
	Для Каждого Блок Из ПолныйСписокБлоков Цикл
		
		Если Блок.Пометка И КоличествоБлоков < МаксимальноеКоличествоБлоков Тогда
			ВыбранныеБлоки.Добавить(Блок.Значение, Блок.Представление);
			КоличествоБлоков = КоличествоБлоков + 1;
		Иначе
			ДоступныеБлоки.Добавить(Блок.Значение, Блок.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	ДоступныеБлоки.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения()
	
	Модифицированность = Ложь;
	
	НастройкаБлоков = Новый Структура;
	
	Порядок = 0;
	Для Каждого Блок Из ВыбранныеБлоки Цикл
		
		ЗначениеНастройки = Новый Структура("Пометка, Порядок", Истина, Порядок);
		НастройкаБлоков.Вставить(Блок.Значение, ЗначениеНастройки);
		
		Порядок = Порядок + 1;
		
	КонецЦикла;
	
	Для Каждого Блок Из ДоступныеБлоки Цикл
		
		ЗначениеНастройки = Новый Структура("Пометка, Порядок", Ложь, Порядок);
		НастройкаБлоков.Вставить(Блок.Значение, ЗначениеНастройки);
		
		Порядок = Порядок + 1;
		
	КонецЦикла;
	
	СохранитьНастройкуИнформационнойПанели(НастройкаБлоков);
	
	Оповестить("ИзмененаНастройкаИнформационнойПанели");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкуИнформационнойПанели(Знач Настройка)
	
	ИнформационнаяПанель.СохранитьНастройки(Настройка);
	
КонецПроцедуры

#КонецОбласти