
////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
// Процедура открывает форму ввода для авторизации.
Процедура ПолучитьФормуВводаДляАвторизации()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидЗапроса", "authorization");
	
	ОткрытьФорму("ОбщаяФорма.смсВводPINкода", СтруктураПараметров,,,,,
					Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыВводаPINДляАвторизации", ЭтаФорма));
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает сведения о балансе смс.
//
Функция ПолучитьСведенияОБалансе(Аккаунт, Баланс, ОписаниеОшибки)
	
	// Необходимо получать данные о балансе.
	Возврат смсСервер.ПолучитьБаланс(Аккаунт, Баланс, ОписаниеОшибки);
	
КонецФункции

&НаКлиенте
// Процедура обновляет сведения о балансе.
Процедура ОбновитьСведенияОБалансе()
	
	БалансССервиса = 0;
	
	Если ЗначениеЗаполнено(Аккаунт) Тогда
		
		БалансСтрокой = "";
		ОписаниеОшибки = "";
		Если ПолучитьСведенияОБалансе(Аккаунт, БалансСтрокой, ОписаниеОшибки) Тогда
			
			// Пробуем преобразовать строковый баланс в число.
			Попытка
				БалансССервиса = Число(БалансСтрокой);
			Исключение
			КонецПопытки;
			
		Иначе
			
			смсОбщегоНазначения.СообщитьПользователю(НСтр("ru=""" + "Не удалось получить данные о балансе!" + Символы.ПС + ОписаниеОшибки + """"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим текст баланса
	ТекущийБаланс = БалансССервиса;
	
КонецПроцедуры

&НаСервере
// Определяет аккаунт по умолчанию. Выбирается аккаунт,
// если в справочнике есть только он один.
Процедура ОпределитьАккаунтПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	смсНастройкиАккаунтов.Ссылка
	|ИЗ
	|	Справочник.смсНастройкиАккаунтов КАК смсНастройкиАккаунтов
	|ГДЕ
	|	НЕ смсНастройкиАккаунтов.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Аккаунт = Выборка.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Проверяет наличие зарегистрированных аккаунтов.
Функция ЕстьДействующиеАккаунты()
	
	Возврат Справочники.смсНастройкиАккаунтов.ЕстьДействующиеАккаунты();
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////
// РАБОТА С ДИАГРАММАМИ

#Область РаботаСДиаграммами

&НаСервере
// Процедура построения диаграммы отправки смс.
//
Процедура ОбновитьДиаграммуСтатистикиОтправкиСМС()
	
	// Получаем данные для построения графика.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(смсСтатистикаОтправкиСообщенийОбороты.Период, ДЕНЬ) КАК Период,
	|	СУММА(смсСтатистикаОтправкиСообщенийОбороты.ПереданоНаСервисОборот) КАК ПереданоНаСервис,
	|	СУММА(смсСтатистикаОтправкиСообщенийОбороты.ОтправленоПолучателюОборот) КАК Отправлено,
	|	СУММА(смсСтатистикаОтправкиСообщенийОбороты.ДоставленоПолучателюОборот) КАК Доставлено
	|ИЗ
	|	РегистрНакопления.смсСтатистикаОтправкиСообщений.Обороты(&НачалоПериода, &КонецПериода, Регистратор, ) КАК смсСтатистикаОтправкиСообщенийОбороты
	|ГДЕ
	|	смсСтатистикаОтправкиСообщенийОбороты.Аккаунт = &Аккаунт
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(смсСтатистикаОтправкиСообщенийОбороты.Период, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("Аккаунт",         Аккаунт);
	Запрос.УстановитьПараметр("НачалоПериода",   НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",    КонецДня(КонецПериода));
	
	ВыборкаПериод = Запрос.Выполнить().Выбрать();
	
	Диаграмма = СтатистикаИспользования;
	Диаграмма.ТипДиаграммы = ТипДиаграммы.График;
	
	Диаграмма.Обновление = Ложь;
	
	Диаграмма.Очистить();
	СтатистикаИспользования.Очистить();
	
	// Добавляем в диаграмму серии графиков.
	Серия1 = Диаграмма.Серии.Добавить("Количество сообщений, переданных на сервис");
	Серия1.Цвет = Новый Цвет(0, 0, 0);
	
	Серия2 = Диаграмма.Серии.Добавить("Количество отправленных сообщений");
	Серия2.Цвет = Новый Цвет(0, 0, 255);
	Серия2.Маркер = ТипМаркераДиаграммы.Ромб;
	
	Серия3 = Диаграмма.Серии.Добавить("Количество доставленных сообщений");
	Серия3.Цвет = Новый Цвет(0, 255, 0);
	Серия3.Маркер = ТипМаркераДиаграммы.Ромб;
	
	Пока ВыборкаПериод.Следующий() Цикл
		
		Точка = Диаграмма.Точки.Добавить(ВыборкаПериод.Период);
		Точка.Текст = Формат(ВыборкаПериод.Период, "ДФ=dd.MM.yyyy");
		Точка.Расшифровка = Формат(ВыборкаПериод.Период, "ДФ=dd.MM.yyyy");
		
		// Установка значения графика в точке и серии.
		Диаграмма.УстановитьЗначение(Диаграмма.Точки.Количество()-1, Серия1, ВыборкаПериод.ПереданоНаСервис);
		Диаграмма.УстановитьЗначение(Диаграмма.Точки.Количество()-1, Серия2, ВыборкаПериод.Отправлено);
		Диаграмма.УстановитьЗначение(Диаграмма.Точки.Количество()-1, Серия3, ВыборкаПериод.Доставлено);
		
	КонецЦикла;
	
	Диаграмма.Обновление = Истина;
	
КонецПроцедуры // ОбновитьДиаграммуСтатистикиОтправкиСМС()

#КонецОбласти

////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ЭЛЕМЕНТАМИ ФОРМЫ.

#Область ПроцедурыУправленияЭлементамиФормы

&НаКлиенте
// Процедура управляет элементами формы.
Процедура УстановитьДоступностьЭлементовФормы()
	
	РазблокироватьИнтерфейс = ЕстьДействующиеАккаунты();
	
	// Если еще нет созданных аккаунтов, то интерфейс блокируем.
	Элементы.ГруппаОсновныеПараметры.Доступность  = РазблокироватьИнтерфейс;
	Элементы.ГруппаИнформацияОБалансе.Доступность = РазблокироватьИнтерфейс;
	Элементы.СтатистикаИспользования.Доступность  = РазблокироватьИнтерфейс;
	Элементы.ФормаНачатьИспользование.Видимость   = НЕ РазблокироватьИнтерфейс;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущаяСистемнаяДата = ТекущаяДата();
	НачалоПериода = НачалоМесяца(НачалоМесяца(ТекущаяСистемнаяДата) - 86400 * 32);
	КонецПериода = ТекущаяСистемнаяДата;
	
	ОпределитьАккаунтПоУмолчанию();
	
	ОбновитьДиаграммуСтатистикиОтправкиСМС();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьЭлементовФормы();
	
	ОбновитьСведенияОБалансе();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "Аккаунт" поля "ПриИзменении".
Процедура АккаунтПриИзменении(Элемент)
	
	ОбновитьСведенияОБалансе();
	
	ОбновитьДиаграммуСтатистикиОтправкиСМС();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПериодДиаграммыСтатистикиИспользования" поля "ПриИзменении".
Процедура ПериодДиаграммыСтатистикиИспользованияПриИзменении(Элемент)
	
	ОбновитьДиаграммуСтатистикиОтправкиСМС();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "НачатьИспользование".
Процедура НачатьИспользование(Команда)
	
	ПолучитьФормуВводаДляАвторизации();

КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДобавитьАккаунт".
Процедура ДобавитьАккаунт(Команда)
	
	ПолучитьФормуВводаДляАвторизации();
	
КонецПроцедуры

&НаКлиенте
// Обработчик окончания ввода пин-кода для авторизации.
Процедура ОбработатьЗакрытиеФормыВводаPINДляАвторизации(РезультатЗакрытия, ДопПараметры) Экспорт
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры // ОбработатьЗакрытиеФормыВводаPINДляАвторизации()

#КонецОбласти
