&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ФормаОткрытаОтдельнойЗакладкой = Параметры.ОткрыватьВНовойЗакладке;
	
	// Разрешим выбор только тех организаций, данные которых доступны на чтение.
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	УстановитьПараметрыВыбораОрганизации(ЭтотОбъект, ДоступныеОрганизации);
	
	Если Параметры.Организация = Неопределено Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Иначе
		Организация = Параметры.Организация;
	КонецЕсли;
	
	Если ДоступныеОрганизации.Найти(Организация) = Неопределено Тогда
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	ОрганизацияПредставление = Организация;
	
	Элементы.НастройкаСинхронизацииСКалендаремGoogle.Видимость =
		СинхронизацияСКалендаремGoogle.ДоступнаНастройкаСинхронизации();
		
	Если ЗначениеЗаполнено(Организация) Тогда
		ДанныеОрганизации     = ДанныеОрганизации(Организация);
		ИННОрганизации        = ДанныеОрганизации.ИНН;
		НужноИскатьСертификат = ДанныеОрганизации.НужноИскатьСертификат
	КонецЕсли;

	АдресНаИТС = ЗадачиБухгалтераКлиентСервер.СсылкаНаИТС();
	
	СписокЗадач.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(НастройкиОформленияСпискаЗадач());
	ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма, "СписокЗадач", , ОтборПоОрганизации(Организация));
	
	Если Параметры.Свойство("ТипЗадачи") И ЗначениеЗаполнено(Параметры.ТипЗадачи) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач, "ТипЗадачи", Параметры.ТипЗадачи, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
	Если Параметры.Свойство("Правило") И ЗначениеЗаполнено(Параметры.Правило) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач, "Правило", Параметры.Правило, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	ОбновитьТекущуюДатуЗаголовокФормыНаСервере();
	
	// Проверим в каком интерфейсе открыта конфигурация
	НастройкиКлиента = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	Если ТипЗнч(НастройкиКлиента) = Тип("НастройкиКлиентскогоПриложения") 
		И НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		// В интерфейсе 8.2 нужно отобразить рамку списка задач бухгалтера
		Элементы.СписокЗадач.ЦветРамки             = Новый Цвет();
	КонецЕсли;
	
	// По умолчанию считаем, что невыполненные задачи есть всегда, чтобы не тратить время на анализ.
	// Признак будет обновлен  при срабатывании обработчика ожидания 
	// Подключаемый_ЗапуститьОбновлениеСпискаЗадачПриОткрытии().
	СписокЗадачПустой   = Ложь; 
	
	ДатаАктуальности = РегистрыСведений.АктуальностьСпискаЗадачБухгалтера.ДатаАктуальности(Организация);
	СписокЗадачАктуален = (ТекущаяДата < ДатаАктуальности);
	КалендарьБухгалтера.ЗапланироватьОбновлениеЗадачБухгалтера();
	
	ИнтерфейсИнтеграцииСБанками = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	Если ИнтерфейсИнтеграцииСБанками Тогда
		ПроверкаСостоянияИнтеграцииВФонеПриОткрытии = СостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОтметкеЗадачиКакВыполненной");
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытииЗаполненнойБазы");
	
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.ОбщаяФорма.СписокЗадач",
		"СписокЗадач",
		НСтр("ru='Новости: Начальная страница'"),
		ИдентификаторыСобытийПриОткрытии
	);
	
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗадержкаПередЗапускомБаннера = 3;
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", ЗадержкаПередЗапускомБаннера, Истина);
	
	ЗадержкаПередЗапускомФоновыхЗаданий = ?(ФормаОткрытаОтдельнойЗакладкой, 0.1, 16);
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеСпискаЗадачПриОткрытии", ЗадержкаПередЗапускомФоновыхЗаданий, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеСпискаЗадач", ИнтервалОбновления, Истина);
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	
	Если ПроверкаСостоянияИнтеграцииВФонеПриОткрытии <> Неопределено Тогда
		
		ОжидатьЗавершенияФоновогоЗаданияПолученияСостоянияИнтеграцииСБанком(ПроверкаСостоянияИнтеграцииВФонеПриОткрытии);
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" Тогда
	
		// При записи новой организации необходимо добавить ее в список доступных организаций.
		ОбработкаОповещенияЗаписьОрганизации(Параметр, Источник);

	ИначеЕсли ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда

		Если Организация <> Параметр Тогда
			// В качестве основной установлена организация, отличающаяся от уже выбранной на форме задач бухгалтера.
			Организация = Параметр;
			ОрганизацияПриИзмененииНаКлиенте();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СписокЗадачБухгалтера_Изменение" Тогда
		
		// Пользователь изменил список задач
		СписокЗадачПустой = СписокЗадачПустой(Организация, ДатаПоявленияЗадач);
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "СозданПрофиль1СЭДО" Тогда
		
		Если ЗначениеЗаполнено(Параметр) И ТипЗнч(Параметр) = Тип("СправочникСсылка.Организации") Тогда
			
			ПараметрыЗадачи = Новый Структура;
			ПараметрыЗадачи.Вставить("Организация", Параметр);
			ПараметрыЗадачи.Вставить("Правило", ПредопределенноеЗначение("Перечисление.ЗадачиНачалаРаботы.Подключение1СЭДО"));
			ПараметрыЗадачи.Вставить("ПериодСобытия", Неопределено);
			ПараметрыЗадачи.Вставить("РегистрацияВНалоговомОргане", Неопределено);
			
			ВыполнениеЗадачБухгалтераКлиент.ОтметитьЗадачуКакВыполненную(ПараметрыЗадачи, ЭтаФорма);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов"
		Или ИмяСобытия = "Запись_ПлатежныйДокумент_ВыплатаЗарплаты"
		Или ИмяСобытия = "ИзменениеВыписки" Тогда
		
		Элементы.СписокЗадач.Обновить();
		
	ИначеЕсли ИмяСобытия = "ИзменилосьСостояниеДокументаИнтеграцииСБанком" Тогда
		Если ИнтерфейсИнтеграцииСБанками Тогда
			ОтключитьОбработчикОжидания("Подключаемый_ЗапуститьПроверкуСостояниеИнтеграцииВФоне");
			Результат = СостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор);
			ОжидатьЗавершенияФоновогоЗаданияПолученияСостоянияИнтеграцииСБанком(Результат);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_РегламентированныйОтчет" Тогда
		
		Элементы.СписокЗадач.Обновить();
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПерсонализированныеПредложенияСервисовКлиент.ПерейтиПоСсылкеБаннера(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Баннер, ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииНаКлиенте()
	
	ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(СписокЗадач, , ОтборПоОрганизации(Организация));
	ОрганизацияПредставление = Организация;
	
	Если ЗапуститьОбновлениеДанныхНаСервере() Тогда
		ЖдатьЗавершенияФоновогоЗадания();
	КонецЕсли;
	
	// Покажем баннер по новой организации
	ДанныеОрганизации     = ДанныеОрганизации(Организация);
	ИННОрганизации        = ДанныеОрганизации.ИНН;
	НужноИскатьСертификат = ДанныеОрганизации.НужноИскатьСертификат;
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ЗакрытьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСостояниеЗагрузкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияСБанкамиФормыКлиент.ОбработкаНавигационнойСсылкиБаннера(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗадач

&НаСервере
Процедура СписокЗадачПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБП.ВосстановитьОтборСписка(СписокЗадач, Настройки, "Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПередНачаломИзменения(Элемент, Отказ)
	
	Перем Задача;
	
	Отказ = Истина;
	
	Задача = Элементы.СписокЗадач.ТекущиеДанные;
	Если Задача = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
	ЗаполнитьЗначенияСвойств(ПараметрыКоманды, Задача);
	
	Если ЕстьПравоВыполненияЗадачи(ПараметрыКоманды.Правило) Тогда
		ОписаниеДействия = ЗадачиБухгалтераКлиентСервер.ОписаниеДействия(ПараметрыКоманды);
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СписокЗадачЗавершитьЗадачу Тогда
		СтандартнаяОбработка = Ложь;
		ЗавершитьЗадачу(Элементы.СписокЗадач.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПравоВыполненияЗадачи(Правило)
	
	Возврат КалендарьБухгалтера.ПравоВыполненияЗадачи(Правило);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗадачиВАрхиве(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Организация));
	
	ОткрытьФорму("РегистрСведений.ЗадачиБухгалтера.Форма.ЗадачиВАрхиве", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаНалоговОтчетов(Команда)
	
	ПараметрыОткрытия = ОбщегоНазначенияБПКлиентСервер.ПараметрыОткрытияФормыСОжиданием();
	ПараметрыОткрытия.Заголовок = НСтр("ru = 'Настройки налогов и отчетов'");
	ПараметрыОткрытия.ИмяФормы = "ОбщаяФорма.НалогиИОтчеты";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ОбщегоНазначенияБПКлиент.ОткрытьФормуСОжиданием(ПараметрыОткрытия, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьНаИТС(Команда)
	
	ПерейтиПоНавигационнойСсылке(АдресНаИТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадач(Команда)
	
	СписокЗадачАктуален = Ложь; // Пользователь явно указал на то, что список задач неактуален
	
	Если ЗапуститьОбновлениеДанныхНаСервере() Тогда
	
		ЖдатьЗавершенияФоновогоЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьЗадачуВАрхив(Команда)
	
	Задача = Элементы.СписокЗадач.ТекущиеДанные;
	Если Задача = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьЗадачу(Задача);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСинхронизацииСКалендаремGoogle(Команда)
	
	ОбщегоНазначенияБПКлиент.ОткрытьФормуНастройкиСинхронизацииСКалендаремGoogle();
	
КонецПроцедуры

&НаКлиенте
Процедура Открыть1СОтчетность(Команда)
	
	ПерейтиПоНавигационнойСсылке("e1cib/command/ОбщаяКоманда.ОткрытьФорму1СОтчетностьНаОтчетах");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// СписокЗадачОрганизация

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокЗадачОрганизация");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Организация", ВидСравненияКомпоновкиДанных.НеРавно, Справочники.Организации.ПустаяСсылка());

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// Необходимость использования поля "Правило" связана с некорректным определением ширины группы колонок в веб-клиенте
	// для групп с вариантом группировки "В ячейке", если последнее поле в колонке не является ссылочным.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокЗадачПравило");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораОрганизации(Форма, ДоступныеОрганизации)
	
	Элементы = Форма.Элементы;

	ПараметрВыбораОтборПоОрганизации 	= Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеОрганизации);
	ПараметрыВыбораОрганизации 			= Новый Массив();
	ПараметрыВыбораОрганизации.Добавить(ПараметрВыбораОтборПоОрганизации);
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОрганизации);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПозицияПоследнейПросроченнойЗаписи(ТекущаяДата, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	ОтборПоОрганизации = ОтборПоОрганизации(Организация);
	
	Если ОтборПоОрганизации <> Неопределено Тогда
	
		Запрос.УстановитьПараметр("Организация", ОтборПоОрганизации);
	
	Иначе
		// Если организация недоступна, или не выбрана, то устанавливаем в отбор массив организаций доступных текущему пользователю с учетом RLS
		Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь));
	
	КонецЕсли; 
	
	// Текст запроса аналогичен тому, который выполняется в динамическом списке СписокЗадач,
	// кроме неиспользуемых для позиционирования полей и таблиц.
	// Порядок полей упорядочивается также совпадает с настройками динамического списка.
	// При изменении запроса в списке необходимо вносить симметричные изменения.
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЕСТЬNULL(Организации.Наименование, """") КАК ОрганизацияНаименование,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ЗадачиБухгалтера.Правило,
	|	ЕСТЬNULL(Требования.Владелец.РеквизитДопУпорядочивания, 0) КАК РегулярнаяЗадачаПорядок,
	|	ЕСТЬNULL(Требования.Действие.Порядок, 0) КАК ДействиеПорядок,
	|	ЕСТЬNULL(Требования.РеквизитДопУпорядочивания, 0) КАК ПравилоПорядок,
	|	ЗадачиБухгалтера.Срок,
	|	ЗадачиБухгалтера.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Требования
	|		ПО ЗадачиБухгалтера.Правило = Требования.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ЗадачиБухгалтера.Организация = Организации.Ссылка
	|ГДЕ
	|	НЕ ЗадачиБухгалтера.ВАрхиве
	|	И ЗадачиБухгалтера.Срок >= &ТекущаяДата
	|	И НЕ ЗадачиБухгалтера.Правило ССЫЛКА Перечисление.ЗадачиНачалаРаботы
	|	И ЗадачиБухгалтера.Организация В(&Организация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачиБухгалтера.Срок,
	|	ДействиеПорядок,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	РегулярнаяЗадачаПорядок,
	|	ПравилоПорядок,
	|	Наименование,
	|	ОрганизацияНаименование";
	
	// Выполняем запрос в привелегированном режиме для увеличения скорости за счет отключения RLS
	// При этом ограничение доступа к данным выполняем в процессе установки параметра "Организация"
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
	
		ЗначенияКлюча = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(Результат);
		
		Возврат РегистрыСведений.ЗадачиБухгалтера.СоздатьКлючЗаписи(ЗначенияКлюча);
		
	Иначе
		
		Возврат Неопределено;
	
	КонецЕсли; 

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Не Форма.СписокЗадачАктуален Тогда
		
		// Показываем индикатор ожидания заполнения списка задач
		Элементы.ГруппаЗадачиБухгалтера.Видимость   = Ложь;
		Элементы.ГруппаВсеЗадачиВыполнены.Видимость = Ложь;
		Элементы.ГруппаОжидание.Видимость           = Истина;
		
	ИначеЕсли Форма.СписокЗадачПустой Тогда
		
		// Все задачи выполнены
		Элементы.ГруппаЗадачиБухгалтера.Видимость   = Ложь;
		Элементы.ГруппаВсеЗадачиВыполнены.Видимость = Истина;
		Элементы.ГруппаОжидание.Видимость           = Ложь;
		
		Если ЗначениеЗаполнено(Форма.ДатаПоявленияЗадач) Тогда
			Элементы.НовыеЗадачиПоявятся.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Новые задачи появятся %1.'"), Формат(Форма.ДатаПоявленияЗадач, "ДФ='dd MMMM'"));
		Иначе
			Элементы.НовыеЗадачиПоявятся.Заголовок = "";
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаЗадачиБухгалтера.Видимость   = Истина;
		Элементы.ГруппаВсеЗадачиВыполнены.Видимость = Ложь;
		Элементы.ГруппаОжидание.Видимость           = Ложь;
		
		Если НЕ Форма.ФоновоеЗаданиеЗадачБухгалтераЗапущено Тогда
			КлючЗаписи = ПозицияПоследнейПросроченнойЗаписи(Форма.ТекущаяДата, Форма.Организация);
			Если ЗначениеЗаполнено(КлючЗаписи) И НЕ КлючЗаписи.Пустой()  Тогда
			
				Элементы.СписокЗадач.ТекущаяСтрока = КлючЗаписи;
			
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьОбновлениеСпискаЗадачПриОткрытии()
	
	Если ЗапуститьОбновлениеДанныхНаСервере(Истина) Тогда
	
		ЖдатьЗавершенияФоновогоЗадания();
		
	Иначе
		
		// Попробуем обновить позже
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеСпискаЗадачПриОткрытии", 16, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьОбновлениеСпискаЗадач()
	
	Если ЗапуститьОбновлениеДанныхНаСервере(Истина) Тогда
	
		ЖдатьЗавершенияФоновогоЗадания();
		
	КонецЕсли;
	
	// Интервал следующего обновления рассчитан в ОбновитьТекущуюДатуЗаголовокФормыНаСервере()
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеСпискаЗадач", ИнтервалОбновления, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущуюДатуЗаголовокФормыНаСервере()
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	ИнтервалОбновления = (КонецДня(ДатаСеанса) + 1) - ДатаСеанса + 59;
	
	ТекущаяДата = ДатаСеанса;
	
	ЗаголовокТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сегодня: %1'"),
		Формат(ТекущаяДата, "Л=ru_RU; ДФ='d MMMM, dddd'"));

	Если НЕ ФормаОткрытаОтдельнойЗакладкой Тогда
		Заголовок = ЗаголовокТекст;
	КонецЕсли;
	
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	МассивИдентификаторов = Новый Массив;
	МассивИдентификаторов.Добавить("ПриОткрытииЗаполненнойБазы");
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, МассивИдентификаторов);

КонецПроцедуры

&НаСервере
Функция НастройкиОформленияСпискаЗадач()
	
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		Неопределено, -1, НСтр("ru = 'Просрочено'"), ЦветаСтиля.ВажноеСобытие, Ложь);
	
	// Используем пробел в качестве представления пустой строки, т.к. пустая строка в условном оформлении игнорируется
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		Неопределено, -1, " ", , Истина);
		
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		0, 0, НСтр("ru = 'Сегодня'"), ЦветаСтиля.ВажноеСобытие);
	
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		1, 1, НСтр("ru = 'Завтра'"), ЦветаСтиля.ПриближающеесяСобытие);// См. ниже исключение для ОтправкаОтчетаОграничена
	
	Шаблон = НСтр("ru = 'Осталось %1'");
	
	Для РазностьДат = 2 По 6 Цикл
		СтрокаРазностьДат = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			РазностьДат, НСтр("ru = 'день,дня,дней'"));
		ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
			РазностьДат, РазностьДат, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаРазностьДат));
	КонецЦикла;
	
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		7, 13, НСтр("ru = 'Осталась неделя'"));
	
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		14, 18, НСтр("ru = 'Осталось 2 недели'"));
	
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		19, 22, НСтр("ru = 'Осталось 3 недели'"));
	
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		23, 34, НСтр("ru = 'Остался месяц'"));
	
	ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных,
		35, Неопределено, " ");
		
	Подключена1СОтчетность = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом();
	
	ОписаниеПараметраДанных = НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Добавить();
	ОписаниеПараметраДанных.Параметр = Новый ПараметрКомпоновкиДанных("Подключена1СОтчетность");
	
	НастройкиКомпоновкиДанных.ПараметрыДанных.УстановитьЗначениеПараметра(
		ОписаниеПараметраДанных.Параметр,
		Подключена1СОтчетность);
		
	Если Подключена1СОтчетность Тогда
		
		// Отчеты, не принимаемые в электронном виде, подсвечиваем особо, когда срок уже истекает, но отчет еще не сдан.
		// Также для них выводим текст.
		ОформляемыеПоля = Новый Структура;
		ОформляемыеПоля.Вставить("ОтправкаОтчетаОграничена", НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить());
		ОформляемыеПоля.Вставить("ОсталосьДней",             НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить());
		
		// Общие для всех полей: не сданные отчеты с ограниченными способами отправки
		Для Каждого ОформляемоеПоле Из ОформляемыеПоля Цикл
			
			ЭлементУсловногоОформления = ОформляемоеПоле.Значение;
			
			ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ЭлементПоля.Использование = Истина;
			ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных(ОформляемоеПоле.Ключ);
		
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ЭлементУсловногоОформления.Отбор,
				"ОтправкаОтчетаОграничена",
				ВидСравненияКомпоновкиДанных.Равно,
				Истина);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ЭлементУсловногоОформления.Отбор,
				"Статус",
				ВидСравненияКомпоновкиДанных.Равно,
				"");
			
		КонецЦикла;
		
		// Особенности:
		// - ОтправкаОтчетаОграничена - текст
		ОформляемыеПоля.ОтправкаОтчетаОграничена.Оформление.УстановитьЗначениеПараметра(
			"Текст",
			ИнтерфейсыВзаимодействияБРОКлиентСервер.КраткоеПредставлениеОграниченияОтправкиОтчета());
			
		// - ОсталосьДней - выделяем цветом, если осталось мало времени
		ОформляемыеПоля.ОсталосьДней.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПриближающеесяСобытие);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ОформляемыеПоля.ОсталосьДней.Отбор,
			"ОсталосьДней",
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
			1);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ОформляемыеПоля.ОсталосьДней.Отбор,
			"ОсталосьДней",
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
			ЗадачиБухгалтераКлиентСервер.СрокПредупрежденияПриОграниченииСпособовОтправки());
		
	КонецЕсли;
	
	// Для плановых проверок срок указывается месяцем.
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='MMMM'");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПлановаяПроверка");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных("Срок");
	
	// Вывод статуса задачи, если он есть.
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      Новый ПолеКомпоновкиДанных("Статус"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЗеленыйЛес);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементОтбора.ПравоеЗначение = "";
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных("ОсталосьДней");
	
	Возврат НастройкиКомпоновкиДанных;
	
КонецФункции

&НаСервере
Процедура ДобавитьУсловноеОформлениеПоляОсталосьДней(НастройкиКомпоновкиДанных, НижняяГраница, ВерхняяГраница, Текст, ЦветТекста = Неопределено, ЭтоПроверка = Неопределено)
	
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Текст);
	Если ЦветТекста <> Неопределено Тогда
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
	КонецЕсли;
	
	Если НижняяГраница <> Неопределено Тогда
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОсталосьДней");
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		ЭлементОтбора.ВидСравнения   = ?(НижняяГраница = ВерхняяГраница, 
			ВидСравненияКомпоновкиДанных.Равно, 
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	КонецЕсли;
	Если ВерхняяГраница <> Неопределено 
		И НижняяГраница <> ВерхняяГраница Тогда
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОсталосьДней");
		ЭлементОтбора.ПравоеЗначение = ВерхняяГраница;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	КонецЕсли;
	Если ЭтоПроверка <> Неопределено Тогда
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Действие");
		ЭлементОтбора.ПравоеЗначение = Перечисления.ВидыДействийКалендаряБухгалтера.Проверка;
		ЭлементОтбора.ВидСравнения   = ?(ЭтоПроверка, 
			ВидСравненияКомпоновкиДанных.Равно, 
			ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных("ОсталосьДней");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтборПоОрганизации(Знач Организация)
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	Если ЗначениеЗаполнено(Организация) И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОбособленноеПодразделение") Тогда
		// Добавляем пустую ссылку для отображения общих задач, но только для головных организаций
		ОтборПоОрганизации = Новый СписокЗначений;
		Если СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
			ОтборПоОрганизации.Добавить(Организация);
		КонецЕсли;
		ОтборПоОрганизации.Добавить(Справочники.Организации.ПустаяСсылка());
	Иначе
		Если СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
			ОтборПоОрганизации = Организация;
		Иначе
			ОтборПоОрганизации = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтборПоОрганизации;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокЗадачПустой(Знач Организация, ДатаПоявленияЗадач, Знач ПоказыватьСчетаУчета = Неопределено)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = // Текст запроса может быть модифицирован ниже - добавится условие на организацию и тип задачи начала работы
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗадачиБухгалтера.Организация
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	НЕ ЗадачиБухгалтера.ВАрхиве";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ЗадачиБухгалтера.Организация В(&Организации)";
		
		Запрос.УстановитьПараметр("Организации", ОтборПоОрганизации(Организация));
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	СписокЗадачПустой = Запрос.Выполнить().Пустой();
	
	Если СписокЗадачПустой Тогда
		ДатаПоявленияЗадач = РегистрыСведений.ЗадачиБухгалтера.БлижайшаяДатаПоявленияЗадач(Организация);
	Иначе
		ДатаПоявленияЗадач = '00010101';
	КонецЕсли;
	
	Возврат СписокЗадачПустой;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокЗадачБухгалтераНаСервереЗавершение()

	Элементы.СписокЗадач.Обновить();
	СписокЗадачАктуален = Истина;
	СписокЗадачПустой   = СписокЗадачПустой(Организация, ДатаПоявленияЗадач);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаСервере
// Запускает фоновое задание обновления регистра Задачи бухгалтера.
//
Процедура ЗаполнитьСписокЗадачБухгалтераНаСервере(ОбновитьИЗаполнитьЗадачиНачалаРаботы = Ложь, ОбновитьИЗаполнитьРегулярныеПлатежи = Ложь)
	
	Если НачалоДня(ТекущаяДата) <> НачалоДня(ТекущаяДатаСеанса()) Или ПустаяСтрока(Заголовок) Тогда
		ОбновитьТекущуюДатуЗаголовокФормыНаСервере();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
		Если СписокДоступныхОрганизаций.Найти(Организация) = Неопределено Тогда
			// Все равно нет прав
			ЗаполнитьСписокЗадачБухгалтераНаСервереЗавершение();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИЗаполнитьРегулярныеЗадачи = Истина;
	
	// Измение правил регулярных платежей - основание для актуализации списка задач бухгалтера.
	// В этом случае контроль актуальности списка задач бухгалтера не производим.
	Если СписокЗадачАктуален И НЕ ОбновитьИЗаполнитьРегулярныеПлатежи Тогда
		
		// Проверим актуальность
		Упреждение = КалендарьБухгалтера.УпреждениеЗаполненияСписка() * 24 * 60 * 60;
		
		ДатаАктуальности = РегистрыСведений.АктуальностьСпискаЗадачБухгалтера.ДатаАктуальности(Организация);
		СписокЗадачАктуален = (ТекущаяДата < ДатаАктуальности);
		
		Если СписокЗадачАктуален И ТекущаяДата + Упреждение <= КонецМесяца(ДатаАктуальности) Тогда
			// Перезаполнение списка задач не требуется
			ОбновитьИЗаполнитьРегулярныеЗадачи = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбновитьИЗаполнитьЗадачиНачалаРаботы И Не ОбновитьИЗаполнитьРегулярныеЗадачи Тогда
		// Нечего обновлять
		Элементы.СписокЗадач.Обновить();
		СписокЗадачАктуален = Истина;
		СписокЗадачПустой   = СписокЗадачПустой(Организация, ДатаПоявленияЗадач);
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	// Параметры обернем в структуру для их передачи через механизм ДлительныеОперации.
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("Организация", Организация);
	ПараметрыФункции.Вставить("Упреждение",  КалендарьБухгалтера.УпреждениеЗаполненияСписка());
	ПараметрыФункции.Вставить("ОбновитьИЗаполнитьЗадачиНачалаРаботы", ОбновитьИЗаполнитьЗадачиНачалаРаботы);
	ПараметрыФункции.Вставить("ОбновитьИЗаполнитьРегулярныеЗадачи",   ОбновитьИЗаполнитьРегулярныеЗадачи);
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	// Мы можем отследить ситуацию только, если все это происходит в одной форме.
	// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
	Если ФоновоеЗаданиеЗадачБухгалтераЗапущено И ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ФоновоеЗаданиеЗадачБухгалтераИдентификатор) Тогда
		// Надо ждать
		Возврат;
	КонецЕсли;
	
	НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление списка задач бухгалтера'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"КалендарьБухгалтера.ЗаполнитьВФоне", 
		ПараметрыФункции, 
		НаименованиеФоновогоЗадания);
	
	ФоновоеЗаданиеЗадачБухгалтераИдентификатор   = Результат.ИдентификаторЗадания;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗаполнитьСписокЗадачБухгалтераНаСервереЗавершение();
	Иначе
		// Начнем ждать
		ФоновоеЗаданиеЗадачБухгалтераЗапущено = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖдатьЗавершенияФоновогоЗадания()
	
	Если ФоновоеЗаданиеЗадачБухгалтераЗапущено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеДлительнойОперации",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	Иначе
		Оповестить("СписокЗадачБухгалтера_Изменение");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеДлительнойОперации()
	
	Если ФоновоеЗаданиеЗадачБухгалтераЗапущено Тогда
		
		Если ЗаданиеВыполнено(ФоновоеЗаданиеЗадачБухгалтераИдентификатор) Тогда
			
			ФоновоеЗаданиеЗадачБухгалтераЗапущено = Ложь;
			ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
			Оповестить("СписокЗадачБухгалтера_Изменение");
			СписокЗадачАктуален = Истина;
			СписокЗадачПустой   = СписокЗадачПустой(Организация, ДатаПоявленияЗадач);
			
		Иначе
			
			// Продолжим ожидание
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьЗавершениеДлительнойОперации",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Функция ЗапуститьОбновлениеДанныхНаСервере(ОбновитьИЗаполнитьЗадачиНачалаРаботы = Ложь)
	
	Если МонопольныйРежим() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если регламентное задание отключено, то при вызове обновления из текущей формы списка задач регулярные платежи обновляем всегда.
	ОбновитьИЗаполнитьРегулярныеПлатежи = Ложь;
	СостояниеРегЗадания = ВыполнениеЗадачБухгалтераВызовСервера.СостояниеРегламентногоЗаданияОбновленияЗадачБухгалтера();
	Если НЕ СостояниеРегЗадания.Использование Тогда
		ОбновитьИЗаполнитьРегулярныеПлатежи = Истина;
	КонецЕсли;
	
	ЗаполнитьСписокЗадачБухгалтераНаСервере(ОбновитьИЗаполнитьЗадачиНачалаРаботы, ОбновитьИЗаполнитьРегулярныеПлатежи);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
// Вызывается при получении оповещения о записи организации.
// Для новых организаций добавляет их ссылки в отбор параметра выбора, 
// чтобы они были доступны в списке на форме.
//
// Параметры:
//	Параметр - Неопределено, Структура - Параметр, полученный в ОбработкаОповещения().
//		Если имеет тип Структура и содержит ключ "ЭтоНовый", то такое оповещения будет обработано,
//		иначе проигнорировано.
//	Источник - СправочникСсылка.Организации - Ссылка на измененную организацию.
//
Процедура ОбработкаОповещенияЗаписьОрганизации(Параметр, Источник)

	Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметр.Свойство("ЭтоНовый") 
		ИЛИ НЕ Параметр.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	// При записи новой организации добавим ее в список доступных для выбора организаций на форме.
	ДоступныеОрганизации = Новый Массив;
	ДоступныеОрганизации.Добавить(Источник);
	
	Если Элементы.Организация.ПараметрыВыбора.Количество() > 0 Тогда
		// В качестве значения параметра выбора указан фиксированный массив ссылок организаций, 
		// полученный из ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS().
		// Копируем их в новых массив.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеОрганизации, Элементы.Организация.ПараметрыВыбора[0].Значение);
	КонецЕсли;
	
	ФиксированныйМассивДоступныхОрганизаций = Новый ФиксированныйМассив(ДоступныеОрганизации);
	
	УстановитьПараметрыВыбораОрганизации(ЭтотОбъект, ДоступныеОрганизации);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачу(Задача)
	
	Если НЕ ЕстьПравоВыполненияЗадачи(Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
	ЗаполнитьЗначенияСвойств(ПараметрыКоманды, Задача);
	
	Если ТипЗнч(ПараметрыКоманды.Правило) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		ДополнитьПараметрамиРегулярногоПлатежа(ПараметрыКоманды);
	КонецЕсли;
	
	ВыполнениеЗадачБухгалтераКлиент.ОтметитьЗадачуКакВыполненную(ПараметрыКоманды, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрамиРегулярногоПлатежа(ПараметрыКоманды)
	
	// Проверим есть ли платеж по данному правилу.
	ШаблонПравила = РегистрыСведений.РегулярныеПлатежи.ШаблонПравила(
		ПараметрыКоманды.Организация, ПараметрыКоманды.Правило, ПараметрыКоманды.ПериодСобытия);
		
	Если ШаблонПравила <> Неопределено
		И ШаблонПравила.ПериодСобытия = ПараметрыКоманды.ПериодСобытия Тогда
		ПараметрыКоманды.Вставить("Оплачено", Истина);
	Иначе
		ПараметрыКоманды.Вставить("Оплачено", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область Баннер

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСледующийБаннер()
	
	// Поскольку обработчик может вызываться не только интерактивно пользователем,
	// но и автоматически по таймеру, меняем баннер при условии, что форма находится в фокусе.
	Если НЕ ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПредыдущийБаннер()
	
	УстановитьБаннер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер(ПоказатьПредыдущий = Ложь)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПоказатьПредыдущий", ПоказатьПредыдущий);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьБаннерЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Если НЕ НужноИскатьСертификат Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	Иначе
		ПерсонализированныеПредложенияСервисовКлиент.ОпределитьНаличиеСертификатовЭлектроннойОтчетности(
			ОписаниеОповещения, ИННОрганизации)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннерЗавершение(СторонниеСертификаты, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = ПолучитьБаннерНаСервере(СторонниеСертификаты,
		ДополнительныеПараметры.ПоказатьПредыдущий);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннераВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияБаннераВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБаннерНаСервере(СторонниеСертификаты = Неопределено, ПоказатьПредыдущий)
	
	Если НужноИскатьСертификат И СторонниеСертификаты <> Неопределено Тогда
		НужноИскатьСертификат = Ложь;
		// Сохраним информацию о сторонних сертификатах.
		ПерсонализированныеПредложенияСервисов.ЗаписатьИнформациюОСтороннихСертификатах(Организация, СторонниеСертификаты);
	КонецЕсли;
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("Размещение", ПерсонализированныеПредложенияСервисов.ИмяРазмещенияОбщее());
	СтруктураПараметров.Вставить("ПоказатьПредыдущий", ПоказатьПредыдущий);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПерсонализированныеПредложенияСервисов.ПолучитьБаннер",
		СтруктураПараметров,
		НастройкиЗапуска);
	
КонецФункции

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	ПерсонализированныеПредложенияСервисов.УстановитьБаннерНаФорме(ЭтотОбъект, АдресРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьБаннер()
	
	ПерсонализированныеПредложенияСервисов.ЗакрытьБаннер(ЭтотОбъект, Организация);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеОрганизации(Знач Организация)
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("ИНН",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН"));
	ДанныеОрганизации.Вставить("НужноИскатьСертификат",
		ПерсонализированныеПредложенияСервисов.НужноИскатьСертификат(Организация));
		
	Возврат ДанныеОрганизации;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСБанками

&НаКлиенте
Процедура Подключаемый_ЗапуститьПроверкуСостояниеИнтеграцииВФоне() Экспорт
	
	Результат = СостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор);
	ОжидатьЗавершенияФоновогоЗаданияПолученияСостоянияИнтеграцииСБанком(Результат);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка состояния интеграции с банками.'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомСпискаЗадачВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ОжидатьЗавершенияФоновогоЗаданияПолученияСостоянияИнтеграцииСБанком(Результат)
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПослеПолученияИнформацииОВнешнейКомпоненте = Новый ОписаниеОповещения(
		"ОбработатьРезультатПроверкиСостоянияИнтеграцииСБанком", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ПослеПолученияИнформацииОВнешнейКомпоненте, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиСостоянияИнтеграцииСБанком(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьБаннерСостоянияИнтеграцииСБанком(Результат);
	Если ИнтервалПроверкиСостоянияИнтеграцииСБанком > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьПроверкуСостояниеИнтеграцииВФоне", ИнтервалПроверкиСостоянияИнтеграцииСБанком, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьБаннерСостоянияИнтеграцииСБанком(Результат)
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ДанныеБаннера = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ИнтеграцияСБанкамиФормы.ПоказатьБаннерСостоянияОтправки(ЭтотОбъект, ДанныеБаннера);
	Иначе
		Элементы.ГруппаБаннерСостоянияОтправки.Видимость = Ложь;
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
