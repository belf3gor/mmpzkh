
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ПерейтиПоГиперссылке", Гиперссылка)
	   И НЕ ПустаяСтрока(Гиперссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (Параметры.Свойство("ИмяОбъекта") И НастройкиПечатиОпределены(Параметры.ИмяОбъекта)) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация")
	   И ТипЗнч(Параметры.Организация) = Тип("СправочникСсылка.Организации")
	   И НЕ Параметры.Организация.Пустая()
	   И НастройкиПечати.НастройкиЗаполнения.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
		ЗаполнитьКонтактнуюИнформациюПоОрганизации();
	КонецЕсли;
	
	Заголовок = НастройкиПечати.ЗаголовокФормыПечати;
	
	ЗаполнитьНастройкиПечати();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ПустаяСтрока(Гиперссылка) Тогда
		УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере(Гиперссылка);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(Элементы.ПанельНастроек, Элементы.ГруппаПанельНастроек.Видимость);
	
	УстановитьВидимостьНастроек();
	
	УстановитьВидимостьГруппыВариантПечати();
	
	УстановитьВидимостьТаблицыЛС();
	
	УстановитьВидимостьКнопкиСравнитьМакетСТиповым();
	
	ПодключитьОбработчикОжидания("СформироватьЛистовкиНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПередачаТЗ" Тогда
		
		АдресВХранилище = Параметр;
		МассивЛС        = ПолучитьИзВременногоХранилища(АдресВХранилище);
		
		Если МассивЛС.Количество() > 0 Тогда
			Для Каждого ТекСтрока из МассивЛС Цикл
				НоваяСтрока = ТаблицаЛС.Добавить();
				НоваяСтрока.ЛицевойСчет = ТекСтрока;
			КонецЦикла;
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ТабличныйДокумент"
			И Параметр.ИмяОбъектаМетаданныхМакета = НастройкиПечати.ИмяМакета Тогда
		
		Если НЕ Параметр.Свойство("ИспользуетсяИзмененный")
		 ИЛИ (Параметр.Свойство("ИспользуетсяИзмененный") И Параметр.ИспользуетсяИзмененный = Истина) Тогда
			ЗаписатьМакет(Параметр);
		КонецЕсли;
		
		Если НастройкиПечатиОпределены(НастройкиПечати.ИмяОбъекта) Тогда
			Отказ = Ложь;
			ЗаполнитьНастройкиПечати(Отказ);
			Если Отказ Тогда
				Активизировать();
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В макете с листовками миниатюры не найдены!");
			КонецЕсли;
		КонецЕсли;
		
		УстановитьВидимостьКнопкиСравнитьМакетСТиповым();
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_ЭЛЕМЕНТОВ_ФОРМЫ

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля формы.
Процедура МиниатюрыПриАктивизацииСтроки(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
	УстановитьНаименованиеВидаЛистовки();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля формы "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации")
	   И НЕ Организация.Пустая() Тогда
		ЗаполнитьКонтактнуюИнформациюПоОрганизации();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля формы "ЛицевойСчет".
Процедура ТаблицаЛСЛицевойСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокиДубликаты = ТаблицаЛС.НайтиСтроки(Новый Структура("ЛицевойСчет", ВыбранноеЗначение));
	
	Если НЕ СтрокиДубликаты.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Лицевой счет """ + Строка(ВыбранноеЗначение) + """ уже выбран.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля формы "ТипПечати".
Процедура ТипПечатиПриИзменении(Элемент)
	
	УстановитьВидимостьТаблицыЛС();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля формы "ТаблицаЛС".
Процедура ТаблицаЛСПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" полей формы.
Процедура ПолеЗаполненияПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля формы "ВариантПечати".
Процедура ВариантПечатиПриИзменении(Элемент)
	
	УстановитьВидимостьГруппыВариантПечати();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

#КонецОбласти // ОБРАБОТЧИКИ_СОБЫТИЙ_ЭЛЕМЕНТОВ_ФОРМЫ

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНД ФОРМЫ

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_КОМАНД_ФОРМЫ

&НаКлиенте
// Обработчик команды "Сформировать" формы.
Процедура Сформировать(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФОРМИРОВАНИЕОТЧЕТА");
	
	ПодключитьОбработчикОжидания("СформироватьЛистовкиНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьСОтбором" формы.
Процедура КомандаЗаполнитьСОтбором(Команда)
	
	Если ТаблицаЛС.Количество() = 0 Тогда
		ОткрытьФорму("ОбщаяФорма.УПЖКХ_ПодборОбъектов");
	Иначе
		ЗадатьВопросЕслиВТаблицеЛСЕстьДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаРедактироватьМакетЛистовки" формы.
Процедура КомандаРедактироватьМакетЛистовки(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяОбъектаМетаданныхМакета", НастройкиПечати.ИмяМакета);
	ПараметрыОткрытия.Вставить("РежимОткрытияОкна",          РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыОткрытия.Вставить("ИмяДокумента",               НастройкиПечати.ЗаголовокФормыПечати);
	ПараметрыОткрытия.Вставить("ТипМакета",                  "MXL");
	ПараметрыОткрытия.Вставить("Редактирование",             Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьМакетЛистовки", ЭтаФорма);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия, ЭтаФорма, Истина,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПанельНастроек" формы.
Процедура ПанельНастроек(Команда)
	
	Элементы.ГруппаПанельНастроек.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(
		Элементы.ПанельНастроек, Элементы.ГруппаПанельНастроек.Видимость);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "СравнитьМакетСТиповым".
//
Процедура СравнитьМакетСТиповым(Команда)
	
	УПЖКХ_РаботаСДиалогамиКлиент.СравнитьТиповойМакетСПользовательским(НастройкиПечати.ИмяОбъекта, НастройкиПечати.СокращенноеИмяМакета);
	
КонецПроцедуры

#КонецОбласти // ОБРАБОТЧИКИ_СОБЫТИЙ_КОМАНД_ФОРМЫ

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВСПОМОГАТЕЛЬНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

&НаСервере
// Процедура заполняет контактные данные организации на форме.
Процедура ЗаполнитьКонтактнуюИнформациюПоОрганизации()
	
	НастройкиЗаполнения = НастройкиПечати.НастройкиЗаполнения;
	ТекущаяДата         = ТекущаяДата();
	
	Если НастройкиЗаполнения.Свойство("Сайт") Тогда
		НастройкиУчетнойПолитикиТСЖОтказ = Ложь;
		НастройкиУчетнойПолитикиТСЖ      = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(ТекущаяДата,
																											Организация,
																											НастройкиУчетнойПолитикиТСЖОтказ);
		Если НЕ НастройкиУчетнойПолитикиТСЖОтказ Тогда
			Сайт = НастройкиУчетнойПолитикиТСЖ.АдресСайтаКомпании;
		КонецЕсли;
	КонецЕсли;
	
	СписокПоказателей = "";
	
	Если НастройкиЗаполнения.Свойство("Организация") Тогда
		СписокПоказателей = СписокПоказателей + ",НаимЮЛСокр";
	КонецЕсли;
	
	Если НастройкиЗаполнения.Свойство("Адрес") Тогда
		СписокПоказателей = СписокПоказателей + ",ПолныйАдрЮР";
	КонецЕсли;
	
	Если НастройкиЗаполнения.Свойство("Телефон") Тогда
		СписокПоказателей = СписокПоказателей + ",ТелОрганизации";
	КонецЕсли;
	
	Если НастройкиЗаполнения.Свойство("ЭлПочта") Тогда
		СписокПоказателей = СписокПоказателей + ",АдресЭлектроннойПочтыОрганизации";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СписокПоказателей) Тогда
		СведенияОбОрганизации = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДата, СписокПоказателей);
		СведенияОбОрганизации.Свойство("НаимЮЛСокр",                       Организация);
		СведенияОбОрганизации.Свойство("ПолныйАдрЮР",                      Адрес);
		СведенияОбОрганизации.Свойство("АдресЭлектроннойПочтыОрганизации", ЭлПочта);
		СведенияОбОрганизации.Свойство("ТелОрганизации",                   Телефон);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает видимость элементов на форме.
Процедура УстановитьВидимостьНастроек()
	
	// В группе "НастройкиЗаполнения".
	Для Каждого ТекущаяНастройка Из Элементы.НастройкиЗаполнения.ПодчиненныеЭлементы Цикл
		ТекущаяНастройка.Видимость = НастройкиПечати.НастройкиЗаполнения.Свойство(ТекущаяНастройка.Имя);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура записывает измененный макет листовки.
Процедура ЗаписатьМакет(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ТабличныйДокумент") Тогда
		МакетЛистовки = ПараметрыЗаписи.ТабличныйДокумент;
	Иначе
		МакетЛистовки = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет(НастройкиПечати.ИмяМакета);
	КонецЕсли;
	
	АдресМакетаВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетЛистовки);
	
	УправлениеПечатью.ЗаписатьМакет(ПараметрыЗаписи.ИмяОбъектаМетаданныхМакета, АдресМакетаВоВременномХранилище);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик закрытия формы редактирования макета листовки.
Процедура ОбновитьМакетЛистовки(РезультатЗакрытия, ДополнительныенПараметры) Экспорт
	
	ЗаполнитьНастройкиПечати();
	
КонецПроцедуры

&НаСервере
// Процедура заполняет настройки печати.
Процедура ЗаполнитьНастройкиПечати(Отказ = Ложь)
	
	МакетЛистовки = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет(НастройкиПечати.ИмяМакета);
	
	Таблица = ПодготовитьТаблицуЛистовок();
	
	ЗаполнитьТаблицуМиниатюрамиЛистовок(Таблица);
	
	Если Таблица.Количество() > 0 Тогда
		ЗаполнитьТаблицуОбластямиЛистовокДляПечати(Таблица);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В макете с листовками миниатюры не найдены!", , , , Отказ);
	КонецЕсли;
	
	АдресДанныхОЛистовках = ПоместитьВоВременноеХранилище(Таблица, УникальныйИдентификатор);
	
	ОбновитьМиниатюрыНаФорме(Таблица);
	
	УстановитьНаименованиеВидаЛистовкиПоУмолчанию(Таблица);
	
КонецПроцедуры

&НаСервере
// Функция заполняет настройки печати и проверяет корректность их заполнения.
Функция НастройкиПечатиОпределены(ИмяОбъекта)
	
	НастройкиПечати        = Новый Структура;
	Макет                  = ПолучитьОбщийМакет("УПЖКХ_ПечатьЛистовокЖКХ");
	НомерТекущейСтроки     = 3;
	КоличествоСтрокВМакете = Макет.ВысотаТаблицы;
	
	// Обрабатываем каждую строку макета, кроме первой, так как в ней названия колонок макета.
	Пока НомерТекущейСтроки <= КоличествоСтрокВМакете Цикл
		
		ТекущееИмяОбъекта = Макет.Область("R" + НомерТекущейСтроки + "C1").Текст;
		
		Если ТекущееИмяОбъекта = ИмяОбъекта Тогда
			НастройкиПечати.Вставить("ИмяОбъекта",           ТекущееИмяОбъекта);
			НастройкиПечати.Вставить("ПроцедураПечати",      СокрЛП(Макет.Область("R" + НомерТекущейСтроки + "C2").Текст));
			НастройкиПечати.Вставить("СокращенноеИмяМакета", СокрЛП(Макет.Область("R" + НомерТекущейСтроки + "C3").Текст));
			НастройкиПечати.Вставить("ИмяМакета",            НастройкиПечати.ИмяОбъекта + "." + НастройкиПечати.СокращенноеИмяМакета);
			
			НастройкиЗаполнения = СокрЛП(Макет.Область("R" + НомерТекущейСтроки + "C4").Текст);
			ЧастиТекста = СтрРазделить(НастройкиЗаполнения, "_", Ложь);
			НастройкиЗаполнения = Новый Структура;
			Для Каждого ТекущаяНастройка Из ЧастиТекста Цикл
				НастройкиЗаполнения.Вставить(СокрЛП(ТекущаяНастройка));
			КонецЦикла;
			НастройкиПечати.Вставить("НастройкиЗаполнения",  НастройкиЗаполнения);
			НастройкиПечати.Вставить("ЗаголовокФормыПечати", СокрЛП(Макет.Область("R" + НомерТекущейСтроки + "C5").Текст));
			Прервать;
		КонецЕсли;
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		
	КонецЦикла;
	
	Возврат (НастройкиПечати.Количество() > 0);
	
КонецФункции

&НаСервере
// Функция возвращает пустую таблицу с настройками печати из макета листовки.
Функция ПодготовитьТаблицуЛистовок()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерВарианта",      Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Цветная",            Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Миниатюра",          Новый ОписаниеТипов("Картинка"));
	Таблица.Колонки.Добавить("Листовка",           Новый ОписаниеТипов("ТабличныйДокумент"));
	Таблица.Колонки.Добавить("ПолноеИмяМиниатюры", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ПолноеИмяОбласти",   Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("КраткоеИмяВарианта", Новый ОписаниеТипов("Строка"));
	
	Возврат Таблица;
	
КонецФункции

&НаСервере
// Процедура заполняеттаблицу настроек данными о миниатюрах листовок.
Процедура ЗаполнитьТаблицуМиниатюрамиЛистовок(Таблица)
	
	// В макете с листовками картинки миниатюр должны содержать обязательные части слов:
	// "Миниатюра", "Вариант", "Цвет". Если такие части не обнаружены, то работа прекращается.
	
	// Добавим миниатюры:
	Для Каждого ТекущаяКартинка Из МакетЛистовки.Рисунки Цикл
		
		// Обходим только определенные типы рисунков.
		Если ТекущаяКартинка.ТипРисунка <> ТипРисункаТабличногоДокумента.Картинка Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиНаименования = СтрРазделить(НРег(ТекущаяКартинка.Имя), "_", Ложь);
		
		// Обходим только рисунки с именами, содержащими слово "Миниатюра".
		Если ЧастиНаименования.Найти("миниатюра") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ПолноеИмяМиниатюры = ТекущаяКартинка.Имя;
		
		// Номер варианта: в наименовании миниатюр должен присутствовать текст "Вариант" и после
		// данного текста через символ "_" должен идти номер варианта.
		НомерВарианта = ПолучитьНомерВариантаЛистовки(ЧастиНаименования);
		Если НомерВарианта = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Произошла ошибка: не определен номер варианта миниатюры с именем """
																+ ТекущаяКартинка.Имя
																+ " в макете с листовками!");
			Продолжить;
		Иначе
			НоваяСтрока.НомерВарианта = НомерВарианта;
		КонецЕсли;
		
		// Цвет:
		ЭтоЦветная = ЧастиНаименования.Найти("чернобелая") = Неопределено;
		ЭтоЧерноБелая = ЧастиНаименования.Найти("цветная") = Неопределено;
		Если ЭтоЦветная = Неопределено И ЭтоЧерноБелая = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Произошла ошибка: не определен цвет миниатюры с именем """
																+ ТекущаяКартинка.Имя
																+ " в макете с листовками!");
			Продолжить;
		Иначе
			НоваяСтрока.Цветная = ЭтоЦветная;
		КонецЕсли;
		
		НоваяСтрока.Миниатюра = ТекущаяКартинка.Картинка;
		
		// Краткое наименование для вывода на форме информативно в формате: [Цвет], Вариант [Номер варианта]
		КраткоеНаименование = "";
		Если НоваяСтрока.Цветная Тогда
			Цвет = "Цветная";
		Иначе
			Цвет = "Черно-белая";
		КонецЕсли;
		КраткоеНаименование = Цвет + ", Вариант " + НоваяСтрока.НомерВарианта;
		НоваяСтрока.КраткоеИмяВарианта = КраткоеНаименование;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет таблицу настроек данными о полной области листовок.
Процедура ЗаполнитьТаблицуОбластямиЛистовокДляПечати(Таблица)
	
	// Добавим области с листовками для печати:
	Для Каждого ТекущаяОбласть Из МакетЛистовки.Области Цикл
		
		Если ТипЗнч(ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиНаименования = СтрРазделить(НРег(ТекущаяОбласть.Имя), "_", Ложь);
		
		Если ЧастиНаименования.Найти("областьдляпечати") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// ОбластьДляПечати_Вариант_1_Цветная
		НомерВарианта   = "";
		ПозицияВарианта = ЧастиНаименования.Найти("вариант");
		Если ПозицияВарианта <> Неопределено Тогда
			НомерВарианта = ЧастиНаименования[ПозицияВарианта + 1];
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Произошла ошибка: не определен номер варианта листовки области для печати """
																+ ТекущаяОбласть.Имя
																+ " в макете с листовками!");
			Продолжить;
		КонецЕсли;
		
		ЭтоЦветная    = ЧастиНаименования.Найти("чернобелая") = Неопределено;
		ЭтоЧерноБелая = ЧастиНаименования.Найти("цветная") = Неопределено;
		Если ЭтоЦветная = Неопределено И ЭтоЧерноБелая = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Произошла ошибка: не определен цвет миниатюры с именем """
																+ ТекущаяОбласть.Имя
																+ " в макете с листовками!");
			Продолжить;
		КонецЕсли;
		
		// Область добавляем в той же строке таблицы, в которой соответствует миниатюра.
		Отбор = Новый Структура;
		Отбор.Вставить("НомерВарианта", НомерВарианта);
		Отбор.Вставить("Цветная",       ЭтоЦветная);
		
		НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущаяСтрока = НайденныеСтроки[0];
			ТекущаяСтрока.ПолноеИмяОбласти = ТекущаяОбласть.Имя;
			ТекущаяСтрока.Листовка         = МакетЛистовки.ПолучитьОбласть(ТекущаяОбласть.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет таблицы с миниатюрами на форме.
Процедура ОбновитьМиниатюрыНаФорме(Таблица)
	
	ТаблицаВидовЛистовок.Очистить();
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяМиниатюра Из Таблица Цикл
		Если ТипЗнч(ТекущаяМиниатюра.Миниатюра) <> Тип("Картинка") Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Миниатюра с наименованием """ + ТекущаяМиниатюра.ПолноеИмяМиниатюры + """ не является картинкой!");
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаВидовЛистовок.Добавить();
		НоваяСтрока.НомерВарианта    = ТекущаяМиниатюра.НомерВарианта;
		НоваяСтрока.Картинка         = ТекущаяМиниатюра.Миниатюра;
		НоваяСтрока.ПолноеИмяОбласти = ТекущаяМиниатюра.ПолноеИмяОбласти;
		НоваяСтрока.Цветная          = ТекущаяМиниатюра.Цветная;
		
		// Формируем наименование варианта в формате: [Цвет], Вариант [Номер варианта]
		НоваяСтрока.КраткоеИмя = ТекущаяМиниатюра.КраткоеИмяВарианта;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Функция возвращает номер варианта листовки.
Функция ПолучитьНомерВариантаЛистовки(ЧастиНаименования)
	
	НомерВарианта = Неопределено;
	
	ПозицияТекста = ЧастиНаименования.Найти("вариант");
	Если ПозицияТекста <> Неопределено Тогда
		ПозицияНомера = ПозицияТекста + 1;
		// Номер позиции номера не должен превышать размер самого массива.
		Если ПозицияНомера <= ЧастиНаименования.ВГраница() Тогда
			НайденныйНомерВарианта = ЧастиНаименования[ПозицияТекста + 1];
			Если НЕ ПустаяСтрока(НайденныйНомерВарианта) Тогда
				НомерВарианта = НайденныйНомерВарианта;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерВарианта;
	
КонецФункции

&НаКлиенте
// Процедура определяет имя текущей листовки.
Процедура УстановитьНаименованиеВидаЛистовки()
	
	ТекущиеДанные = Элементы.ТаблицаВидовЛистовок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейЛистовки = ТекущиеДанные.ПолноеИмяОбласти;
	
	Если НЕ ПустаяСтрока(ТекущиеДанные.КраткоеИмя) Тогда
		ЗаголовокГруппыВидЛистовки = ТекущиеДанные.КраткоеИмя;
	Иначе
		УстановитьНаименованиеВидаЛистовкиПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура определяет имя текущей листовки по умолчанию при открытии формы.
Процедура УстановитьНаименованиеВидаЛистовкиПоУмолчанию(Таблица = Неопределено)
	
	Если Таблица = Неопределено Тогда
		Таблица = ПолучитьИзВременногоХранилища(АдресДанныхОЛистовках);
	КонецЕсли;
	
	Если Таблица.Количество() > 0 Тогда
		ТекущиеДанные              = Таблица[0];
		ИмяТекущейЛистовки         = ТекущиеДанные.ПолноеИмяОбласти;
		ЗаголовокГруппыВидЛистовки = ТекущиеДанные.КраткоеИмяВарианта;
	Иначе
		ИмяТекущейЛистовки         = "";
		ЗаголовокГруппыВидЛистовки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура выводит вопрос об очистке таблицы с лицевыми счетами.
Процедура ЗадатьВопросЕслиВТаблицеЛСЕстьДанные()
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВопросОбОчисткеТаблицыЛС", ЭтаФорма);
	
	ПоказатьВопрос(Оповещение, "Перед заполнением таблица будет очищена." + Символы.ПС
				 + "Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // ЗадатьВопросЕслиНеВсеДанныеПереданы()

&НаКлиенте
// Процедура-обработчик результата вопроса об очистке таблицы выбранных лицевых счетов.
Процедура ОбработатьВопросОбОчисткеТаблицыЛС(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТаблицаЛС.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_ПодборОбъектов");
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает видимость таблицы выбранных лицевых счетов.
Процедура УстановитьВидимостьТаблицыЛС()
	
	Элементы.ТаблицаЛС.Видимость = (ВариантПечати = 1 И ТипПечати = 1);
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает видимость кнопки "СравнитьМакетСТиповым".
Процедура УстановитьВидимостьКнопкиСравнитьМакетСТиповым()
	
	Элементы.СравнитьМакетСТиповым.Видимость = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОпределитьИспользованиеПользовательскогоМакетаПечати(НастройкиПечати.ИмяОбъекта, НастройкиПечати.СокращенноеИмяМакета);
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает видимость настройки варианта печати.
Процедура УстановитьВидимостьГруппыВариантПечати()
	
	Элементы.ГруппаВыборЛицевыхСчетов.Видимость = (ВариантПечати = 1);
	
КонецПроцедуры

&НаСервере
// Функция возвращает наименование объекта метаданных.
Функция ПолучитьИмяОбъектаМетаданных()
	
	ИмяОбъекта       = НастройкиПечати.ИмяОбъекта;
	ПолноеИмяОбъекта = "";
	
	ПозицияРазделителя = СтрНайти(ИмяОбъекта, ".");
	Если ПозицияРазделителя < 1 Тогда
		Возврат "";
	КонецЕсли;
	
	врИмяОбъекта = Лев(ИмяОбъекта, ПозицияРазделителя - 1);
	Если врИмяОбъекта = "Справочник" Тогда
		ПолноеИмяОбъекта = "Справочники";
	ИначеЕсли врИмяОбъекта = "Документ" Тогда
		ПолноеИмяОбъекта = "Документы";
	ИначеЕсли врИмяОбъекта = "Обработка" Тогда
		ПолноеИмяОбъекта = "Обработки";
	ИначеЕсли врИмяОбъекта = "Отчет" Тогда
		ПолноеИмяОбъекта = "Отчеты";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПолноеИмяОбъекта) Тогда
		ПолноеИмяОбъекта = ПолноеИмяОбъекта + Сред(ИмяОбъекта, ПозицияРазделителя);
	КонецЕсли;
	
	Возврат ПолноеИмяОбъекта;
	
КонецФункции

&НаСервере
// Функция возвращает структуру параметров печати листовки.
Функция ПодготовитьПараметрыДляПечати()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИмяМакета",          НастройкиПечати.ИмяМакета);
	СтруктураПараметров.Вставить("ИмяТекущейЛистовки", ИмяТекущейЛистовки);
	
	ПараметрыЗаполнения = Новый Структура;
	
	Для Каждого ТекущаяНастройка Из НастройкиПечати.НастройкиЗаполнения Цикл
		Если ТекущаяНастройка.Ключ <> "ПерсональныеЛистовки" Тогда
			ПараметрыЗаполнения.Вставить(ТекущаяНастройка.Ключ, Этаформа[ТекущаяНастройка.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкиПечати.НастройкиЗаполнения.Свойство("ПерсональныеЛистовки")
	   И ВариантПечати = 1 Тогда
		Если ТипПечати = 1 Тогда
			ПараметрыЗаполнения.Вставить("ПечататьПерсональныеЛистовки", "По выбранным");
			
			СписокЛС = Новый СписокЗначений;
			СписокЛС.ЗагрузитьЗначения(ТаблицаЛС.Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
			ПараметрыЗаполнения.Вставить("СписокЛС", СписокЛС);
		Иначе
			ПараметрыЗаполнения.Вставить("ПечататьПерсональныеЛистовки", "По всем");
		КонецЕсли;
	Иначе
		ПараметрыЗаполнения.Вставить("ПечататьПерсональныеЛистовки", "Не печатать");
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
// Процедура вызывает общую функцию формирования листовки.
Процедура СформироватьЛистовкиНаКлиенте()
	
	РезультатВыполнения = СформироватьЛистовкиНаСервере();
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕИСПОЛЬЗОВАТЬ");
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция вызывает процедуру формирования листовки из объекта конфигурации.
Функция СформироватьЛистовкиНаСервере()
	
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Ложь);
	
	Если ПустаяСтрока(ИмяТекущейЛистовки) Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Таблица = ПолучитьИзВременногоХранилища(АдресДанныхОЛистовках);
	Если Таблица.Количество() = 0 Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ИмяОбъектаМетаданных = ПолучитьИмяОбъектаМетаданных();
	Если ПустаяСтрока(ИмяОбъектаМетаданных) Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ПараметрыПечати = ПодготовитьПараметрыДляПечати();
	
	Если ПараметрыПечати.ПараметрыЗаполнения.ПечататьПерсональныеЛистовки = "По выбранным"
	   И ПараметрыПечати.ПараметрыЗаполнения.СписокЛС.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Список выбранных лицевых счетов пуст.");
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
	
	Выполнить(ИмяОбъектаМетаданных + "." + НастройкиПечати.ПроцедураПечати + "(ПараметрыПечати, АдресРезультата)");
	
	ТабличныйДокумент = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
		Результат.Очистить();
		Результат.Вывести(ТабличныйДокумент);
		РезультатВыполнения.ЗаданиеВыполнено = Истина;
	КонецЕсли;
		
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти // ВСПОМОГАТЕЛЬНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ