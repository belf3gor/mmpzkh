#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолейСтаж;
&НаКлиенте
Перем СтруктураВозвращаемыхДанных;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТипЗаписиЗаголовок = НСтр("ru = 'Тип записи'");
	
	РазделыКонтролируемыхПолей = Новый Массив;
	РазделыКонтролируемыхПолей.Добавить("Стаж");
	
	ПерсонифицированныйУчетФормы.ДокументыСЗВДобавитьКонтрольИсправлений(КонтролируемыеПоля, РазделыКонтролируемыхПолей);
	ЗарплатаКадрыОтображениеОшибок.ХраненияОшибокВДанныхФормыДополнитьФорму(ЭтотОбъект);
	ЗарплатаКадрыОтображениеОшибок.ИндикацияОшибокДополнитьФорму(ЭтотОбъект, ОписаниеЭлементовСИндикациейОшибок());
		
	Если Не Параметры.ИспользоватьНовыйКлассификаторПараметровСтажа Тогда
		ПараметрВыбораСтажа = Новый ПараметрВыбора("Отбор.ИспользуетсяС2014Года", Ложь);
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(ПараметрВыбораСтажа);
		
		Элементы.ТретийПараметрИсчисляемогоСтажа.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	КонецЕсли;	
	
	ЗаполнитьДанныеОСтаже();
		
	// Заполним список доступных кодов особых условий труда.
	СписокПредопределенныхКодов = Новый Массив;
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_1);
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_10);
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_2);
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_3);
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_4);
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_5);
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_6);
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_7);
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_8);
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_9);
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_ОС);
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст27_ПЖ);
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТрудаПФР.Ст28_СЕВ);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
			               |	ОсобыеУсловияТруда.Код КАК Код,
			               |	ОсобыеУсловияТруда.Ссылка
			               |ИЗ
			               |	Справочник.ОсобыеУсловияТрудаПФР КАК ОсобыеУсловияТруда
			               |
			               |ГДЕ
			               |	(НЕ(ОсобыеУсловияТруда.Предопределенный))
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Код");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхКодов.Добавить(Выборка.Ссылка);
	КонецЦикла;  
	
	Элементы.ОсобыеУсловияТруда.СписокВыбора.ЗагрузитьЗначения(СписокПредопределенныхКодов);
	
	// Запомним список доступных кодов выслуги лет.
	
	СписокПредопределенныхКодов = Новый Массив;
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_14);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_15);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ПД);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ПДРК);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ГД);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_СМ);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ГДХР);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_СМХР);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.САМОЛЕТ);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.СПЕЦАВ);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.НОРМАПР);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.НОРМСП);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.РЕАКТИВН);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.ЛЕТИСП);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.ОПЫТИСП);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.ИСПКЛС1);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.ИТСИСП);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.ИТСМАВ);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.ИНСПЕКТ);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОснованияВыслугиЛет.Код КАК Код,
	               |	ОснованияВыслугиЛет.Ссылка
	               |ИЗ
	               |	Справочник.ОснованияДосрочногоНазначенияПенсии КАК ОснованияВыслугиЛет
	               |
	               |ГДЕ
	               |	(НЕ(ОснованияВыслугиЛет.Предопределенный))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхКодов.Добавить(Выборка.Ссылка);
	КонецЦикла;  
	
	Элементы.ОснованиеВыслугиЛет.СписокВыбора.ЗагрузитьЗначения(СписокПредопределенныхКодов);
		
	// Запомним список доступных кодов исчисляемого стажа.
	
	СписокПредопределенныхКодов = Новый Массив;
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияИсчисляемогоСтраховогоСтажа.УИК104);
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияИсчисляемогоСтраховогоСтажа.СЕЗОН);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОснованияИсчисляемогоТрудовогоСтажа.Код КАК Код,
	               |	ОснованияИсчисляемогоТрудовогоСтажа.Ссылка
	               |ИЗ
	               |	Справочник.ОснованияИсчисляемогоСтраховогоСтажа КАК ОснованияИсчисляемогоТрудовогоСтажа
	               |
	               |ГДЕ
	               |	(НЕ(ОснованияИсчисляемогоТрудовогоСтажа.Предопределенный))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхКодов.Добавить(Выборка.Ссылка);
	КонецЦикла;  
	Элементы.ОснованиеИсчисляемогоСтажа.СписокВыбора.ЗагрузитьЗначения(СписокПредопределенныхКодов);
	
	ЗакрыватьПриВыборе = Ложь;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Данные о стаже: %1'"), Сотрудник);
	
	УстановитьДоступностьЭлементовПорядкаЗаписи(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтруктураДанныхСтажа = СтруктураДанныхСтажа();
	
	ПерсонифицированныйУчетКлиентСервер.ДокументыСЗВУстановитьЗначенияКонтролируемыхПолей(
		СтруктураДанныхСтажа, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейСтаж);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
	Если Не Модифицированность Тогда
		ОповеститьОВыборе(СтруктураВозвращаемыхДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗаписиПриИзменении(Элемент)
	Если ТипЗаписи = 1 Тогда
		НомерОсновнойЗаписи = 0;
		НомерДополнительнойЗаписи = 0;
	Иначе
		ДатаНачалаПериода = Неопределено;
		ДатаОкончанияПериода = Неопределено;
	КонецЕсли;	
	
	УстановитьДоступностьЭлементовПорядкаЗаписи(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииОшибкиНажатие(Элемент, СтандартнаяОбработка)
	ЗарплатаКадрыОтображениеОшибокКлиент.ЭлементИндикацииОшибкиНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	ВыбратьИЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеПериодаИНумерации(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозвращаемыхДанных = СтруктураДанныхСтажа();
	
	СтруктураСПризнакамиИсправления = Новый Структура("ФиксСтаж", ФиксСтаж);
	
	ДанныеИзменены = ПерсонифицированныйУчетКлиент.ДокументыСЗВКонтрольИсправленийПриОкончанииРедактированияСтроки(
						СтруктураВозвращаемыхДанных,
						КонтролируемыеПоля,
						СтарыеЗначенияКонтролируемыхПолейСтаж,
						СтруктураСПризнакамиИсправления);
		
	СтруктураВозвращаемыхДанных.ФиксСтаж = СтруктураСПризнакамиИсправления.ФиксСтаж;
	
	СтруктураВозвращаемыхДанных.Модифицированность = ДанныеИзменены;
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовПорядкаЗаписи(Форма)
	Если Форма.ТипЗаписи = 1 Тогда
		Форма.Элементы.ДатаНачалаПериода.Доступность = Истина;	
		Форма.Элементы.ДатаОкончанияПериода.Доступность = Истина;
		
		Форма.Элементы.НомерОсновнойЗаписи.Доступность = Ложь;	
		Форма.Элементы.НомерДополнительнойЗаписи.Доступность = Ложь;	
	Иначе
		Форма.Элементы.ДатаНачалаПериода.Доступность = Ложь;	
		Форма.Элементы.ДатаОкончанияПериода.Доступность = Ложь;	
		
		Форма.Элементы.НомерОсновнойЗаписи.Доступность = Истина;	
		Форма.Элементы.НомерДополнительнойЗаписи.Доступность = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция СтруктураДанныхСтажа()
	СтруктураВозвращаемыхДанных = Новый Структура;
	
	СтруктураВозвращаемыхДанных.Вставить("Сотрудник", Сотрудник);
	СтруктураВозвращаемыхДанных.Вставить("НомерОсновнойЗаписи", НомерОсновнойЗаписи);
	СтруктураВозвращаемыхДанных.Вставить("НомерДополнительнойЗаписи", НомерДополнительнойЗаписи);
	СтруктураВозвращаемыхДанных.Вставить("ДатаНачалаПериода", ДатаНачалаПериода);
	СтруктураВозвращаемыхДанных.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериода);
	СтруктураВозвращаемыхДанных.Вставить("ОсобыеУсловияТруда", ОсобыеУсловияТруда);
	СтруктураВозвращаемыхДанных.Вставить("КодПозицииСписка", КодПозицииСписка);
	СтруктураВозвращаемыхДанных.Вставить("ОснованиеИсчисляемогоСтажа", ОснованиеИсчисляемогоСтажа);
	СтруктураВозвращаемыхДанных.Вставить("ПервыйПараметрИсчисляемогоСтажа", ПервыйПараметрИсчисляемогоСтажа);
	СтруктураВозвращаемыхДанных.Вставить("ВторойПараметрИсчисляемогоСтажа", ВторойПараметрИсчисляемогоСтажа);
	СтруктураВозвращаемыхДанных.Вставить("ТретийПараметрИсчисляемогоСтажа", ТретийПараметрИсчисляемогоСтажа);
	СтруктураВозвращаемыхДанных.Вставить("ОснованиеВыслугиЛет", ОснованиеВыслугиЛет);
	СтруктураВозвращаемыхДанных.Вставить("ПервыйПараметрВыслугиЛет", ПервыйПараметрВыслугиЛет);
	СтруктураВозвращаемыхДанных.Вставить("ВторойПараметрВыслугиЛет", ВторойПараметрВыслугиЛет);
	СтруктураВозвращаемыхДанных.Вставить("ТретийПараметрВыслугиЛет", ТретийПараметрВыслугиЛет);
	СтруктураВозвращаемыхДанных.Вставить("ТерриториальныеУсловия", ТерриториальныеУсловия);
	СтруктураВозвращаемыхДанных.Вставить("ПараметрТерриториальныхУсловий", ПараметрТерриториальныхУсловий);
	СтруктураВозвращаемыхДанных.Вставить("ИндексСтроки", ИндексСтроки);
	СтруктураВозвращаемыхДанных.Вставить("НоваяСтрока", НоваяСтрока);
	СтруктураВозвращаемыхДанных.Вставить("ИдентификаторСтрокиСтажа", ИдентификаторСтрокиСтажа);
	СтруктураВозвращаемыхДанных.Вставить("ФиксСтаж", Ложь);
	СтруктураВозвращаемыхДанных.Вставить("Отмена", Ложь);
	СтруктураВозвращаемыхДанных.Вставить("Модифицированность", Ложь);
	
	Возврат СтруктураВозвращаемыхДанных;
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеОСтаже()
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ДанныеСтажа);
	Если НоваяСтрока Тогда
		ТипЗаписи = 1;	
	ИначеЕсли ЗначениеЗаполнено(ДатаНачалаПериода)
		Или ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
		
		ТипЗаписи = 1;
	Иначе
		ТипЗаписи = 2;
	КонецЕсли;	
	
	Если Параметры.ОтображатьОшибки Тогда
		ЗарплатаКадрыОтображениеОшибок.ПоместитьСообщенияОбОшибкахВДанныеФормы(ЭтотОбъект, Параметры.ДанныеСтажа.ЗначенияРеквизитовХраненияОшибок);
		ЗарплатаКадрыОтображениеОшибок.УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(ЭтотОбъект, Параметры.ДанныеСтажа.ЗначенияРеквизитовХраненияОшибок);
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура  ПроверитьЗаполнениеПериодаИНумерации(Отказ)
	Если ТипЗаписи = 1 Тогда
		Если Не ЗначениеЗаполнено(ДатаНачалаПериода) 
			И Не ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнены даты периода.'");
			Отказ = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(ДатаНачалаПериода) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена дата начала периода.'");
			Отказ = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена дата окончания периода.'");
			Отказ = Истина;
		ИначеЕсли ДатаНачалаПериода > ДатаОкончанияПериода Тогда
			ТекстСообщения = НСтр("ru = 'Дата начала не может быть больше даты окончания периода.'");
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(НомерОсновнойЗаписи) 
			И Не ЗначениеЗаполнено(НомерДополнительнойЗаписи) Тогда	
			
			ТекстСообщения = НСтр("ru = 'Не заполнены номера основной и дополнительной записи.'");
			Отказ = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(НомерОсновнойЗаписи) Тогда	
			ТекстСообщения = НСтр("ru = 'Не заполнен номер основной записи.'");
			Отказ = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(НомерДополнительнойЗаписи) Тогда	
			ТекстСообщения = НСтр("ru = 'Не заполнен номер дополнительной записи.'");
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	

	Если Отказ Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

#Область МеханизмОтображенияОшибок

&НаКлиенте
Процедура ПоказатьОшибки(ИмяПоляИндикацииОшибки, ПоказыватьТекстОшибки) Экспорт
	ПоказыватьТекстОшибки = Истина;	
КонецПроцедуры	

&НаСервере
Функция ОписаниеЭлементовСИндикациейОшибок() 
	ОписаниеЭлементовИндикацииОшибок = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементовСИндикациейОшибок();
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "Сотрудник";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Сотрудник";
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);
		
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "НомерОсновнойЗаписи";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "НомерОсновнойЗаписи";
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "НомерДополнительнойЗаписи";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "НомерДополнительнойЗаписи";
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ДатаНачалаПериода";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ДатаНачалаПериода";
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ДатаОкончанияПериода";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ДатаОкончанияПериода";
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ТерриториальныеУсловия";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ТерриториальныеУсловия";
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ПараметрТерриториальныхУсловий";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ПараметрТерриториальныхУсловий";
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ОсобыеУсловияТруда";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ОсобыеУсловияТруда";
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "КодПозицииСписка";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "КодПозицииСписка";
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ОснованиеИсчисляемогоСтажа";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ОснованиеИсчисляемогоСтажа";
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ТретийПараметрИсчисляемогоСтажа";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ТретийПараметрИсчисляемогоСтажа";
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ОснованиеВыслугиЛет";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ОснованиеВыслугиЛет";
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ПервыйПараметрВыслугиЛет";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ПервыйПараметрВыслугиЛет";
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ВторойПараметрВыслугиЛет";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ВторойПараметрВыслугиЛет";
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ТретийПараметрВыслугиЛет";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ТретийПараметрВыслугиЛет";
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ПервыйПараметрИсчисляемогоСтажа";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ПервыйПараметрИсчисляемогоСтажа";
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	ОписаниеЭлемента.ИмяЭлемента = "ВторойПараметрИсчисляемогоСтажа";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ВторойПараметрИсчисляемогоСтажа";
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(ОписаниеЭлементовИндикацииОшибок, ОписаниеЭлемента);

	Возврат ОписаниеЭлементовИндикацииОшибок;
КонецФункции	

СтарыеЗначенияКонтролируемыхПолейСтаж = Новый Структура;
СтруктураВозвращаемыхДанных = Новый Структура("ИндексСтроки, НоваяСтрока, Отмена", ИндексСтроки, НоваяСтрока, Истина);

#КонецОбласти

#КонецОбласти
