
#Область ПроцедурыИФункцииУправленияВидимостью

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет видимостью элементов формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ФлагПечататьЧекиПриОплатеБанковскойКартой.Доступность = Форма.НаборКонстант.УПЖКХ_ПечататьЧекиИзРегистрацииОплаты;
	Элементы.ФлагПечататьЧекиСРасшифровкойПоУслугам.Доступность    = Форма.НаборКонстант.УПЖКХ_ПечататьЧекиИзРегистрацииОплаты;
	
	Элементы.УПЖКХ_ДатаНачалаУчетаСторноИндивидуальныхНачисленийПриРасчетеОДН.Видимость = Форма.УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДН;
	Элементы.ГруппаУчитыватьСторнирование.Видимость                                     = Форма.УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДН;
	
	Элементы.УчитыватьКорректировкиПриРасчетеЛьгот.Доступность = Форма.НаборКонстант.УПЖКХ_ИспользоватьНовыйАлгоритмРасчетаЛьгот;
	
	ВидимостьВидаПлощадиРаспределенияПоказанийНаПомещенияЛицевыеСчета = (Форма.СпособРаспределенияПоказанийПомещениеЛС = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПлощадямПомещений"));
	Элементы.ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета.Видимость = ВидимостьВидаПлощадиРаспределенияПоказанийНаПомещенияЛицевыеСчета;
	
	ВидимостьВидаПлощадиРаспределенияПоказанийНаЗданияПодъезды = (Форма.СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПлощадямПомещений"));
	Элементы.ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды.Видимость = ВидимостьВидаПлощадиРаспределенияПоказанийНаЗданияПодъезды;
	Элементы.ПерейтиКСпискуТиповПомещений.Видимость                                = ВидимостьВидаПлощадиРаспределенияПоказанийНаЗданияПодъезды;
	
	// Доступность настроек повышающих коэффициентов только если они используются.
	Элементы.ПерейтиКЗначениямПовышающихКоэффициентовДляНачисленияПоНормативу.Доступность       = Форма.НаборКонстант.УПЖКХ_ИспользоватьПовышающиеКоэффициентыПриОтсутствииПУ;
	Элементы.ПерейтиКСведениямОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.Доступность = Форма.НаборКонстант.УПЖКХ_ИспользоватьПовышающиеКоэффициентыПриОтсутствииПУ;
	
	Элементы.УслугаДобровольногоСтрахования.Видимость = Форма.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	
	// Доступность установки размера допустимого превышения среднего расхода прибора учета.
	Элементы.РазмерДопустимогоПревышенияСреднегоРасходаПУ.Доступность = Форма.НаборКонстант.УПЖКХ_ИспользоватьКонтрольПоказанийПриборовУчета;
	
	// Управление настройками отражения начислений в регл. учете.
	
	// Закладка "Регламентированный учет" скрыта до тех пор, пока не будет доведен до ума новый механизм отражения
	// начислений в регл. учете. Видеть ее будут только те, кто уже выполнил переход.
	Если Форма.НаборКонстант.УПЖКХ_ДатаНачалаИспользованияНовогоМеханизмаОтраженияНачисленийВРеглУчете = Дата(1,1,1) Тогда
		Элементы.РегламентированныйУчет.Видимость = Ложь;
	КонецЕсли;
	
	ТекущаяСтраницаРеглУчет = ?(Форма.НаборКонстант.УПЖКХ_ДатаНачалаИспользованияНовогоМеханизмаОтраженияНачисленийВРеглУчете = Дата(1,1,1), Элементы.СтраницаПереходНаНовыйМеханизмНеВыполнен, Элементы.СтраницаПереходНаНовыйМеханизмВыполнен);
	Элементы.ПанельРегламентированныйУчет.ТекущаяСтраница = ТекущаяСтраницаРеглУчет;
	
	//ВНИМАНИЕ:
	//Механизм временно не используется. 
	//Подробнее см. в комментариях к процедуре УПЖКХ_ПараметрыУчетаСервер.ИспользоватьОтражениеНачисленийВРеглУчетеСДеталями.
	//
	//Элементы.ГруппаИспользоватьОтражениеСДеталями.Видимость      = Форма.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете;
	
	Элементы.ГруппаСпособОпределенияСреднегоРасходаПоПУ.Видимость = НЕ Форма.НаборКонстант.УПЖКХ_РасчетСреднегоРасходаПоПУСУчетомДатыВводаПоследнихПоказаний;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаСервереБезКонтекста
// Функция получает значение константы на сервере по имени.
//
Функция ПолучитьЗначениеКонстантыНаСервере(Имя)
	
	Попытка
		ЗначениеКонстанты = Константы[Имя].Получить();
	Исключение
		ЗначениеКонстанты = Неопределено;
	КонецПопытки;
	
	Возврат ЗначениеКонстанты;
	
КонецФункции // ПолучитьЗначениеКонстантыНаСервере()

&НаСервереБезКонтекста
// Функция возвращает текст запроса по регистру сведений УПЖКХ_СобственникиПомещений.
//
Функция ПолучитьТекстЗапросаПоРСУПЖКХ_СобственникиПомещений()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещений.Период КАК Период,
	|	УПЖКХ_СобственникиПомещений.Регистратор КАК Регистратор,
	|	УПЖКХ_СобственникиПомещений.Помещение.Владелец КАК Здание,
	|	УПЖКХ_СобственникиПомещений.Помещение КАК Помещение,
	|	УПЖКХ_СобственникиПомещений.Собственник КАК Собственник,
	|	УПЖКХ_СобственникиПомещений.ДоляСобственникаЧислитель КАК ДоляСобственникаЧислитель,
	|	УПЖКХ_СобственникиПомещений.ДоляСобственникаЗнаменатель КАК ДоляСобственникаЗнаменатель,
	|	УПЖКХ_СобственникиПомещений.ОснованиеПолученияВСобственность КАК ОснованиеПолученияВСобственность,
	|	УПЖКХ_СобственникиПомещений.ВидДокумента КАК ВидДокумента,
	|	УПЖКХ_СобственникиПомещений.НомерДокумента КАК НомерДокумента,
	|	УПЖКХ_СобственникиПомещений.ДатаДокумента КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СобственникиПомещений.Действует
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоСобственников,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СобственникиПомещений.Действует
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоНеСобственников,
	|	УПЖКХ_СобственникиПомещений.Действует КАК Действует
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений КАК УПЖКХ_СобственникиПомещений
	|ГДЕ
	|	(УПЖКХ_СобственникиПомещений.Регистратор ССЫЛКА Документ.КВП_ОткрытиеЛицевогоСчета
	|			ИЛИ УПЖКХ_СобственникиПомещений.Регистратор ССЫЛКА Документ.КВП_ИзменениеЛицевогоСчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ
	|	МАКСИМУМ(Период),
	|	МАКСИМУМ(Здание),
	|	МАКСИМУМ(Помещение),
	|	СУММА(ДоляСобственникаЗнаменатель),
	|	СУММА(КоличествоСобственников),
	|	СУММА(КоличествоНеСобственников)
	|ПО
	|	Регистратор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
// Функция выполняет создание документов собственности.
//
Функция СоздатьДокументСобственности(ВыборкаРегистратор, ВыборкаДеталей, ЭтоРегистрацияПрав)
	
	ДокументОбъект = Документы.УПЖКХ_УстановкаСобственниковПомещений.СоздатьДокумент();
	ДокументОбъект.Дата      = ВыборкаРегистратор.Период - 1;
	ДокументОбъект.Здание    = ВыборкаРегистратор.Здание;
	ДокументОбъект.Помещение = ВыборкаРегистратор.Помещение;
	ДокументОбъект.ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Частная;
	
	// Выбор вида операции.
	Если ЭтоРегистрацияПрав Тогда
		ДокументОбъект.ВидОперации = Перечисления.УПЖКХ_ВидыОперацийСобственности.РегистрированиеПравСобственности;
	Иначе
		ДокументОбъект.ВидОперации = Перечисления.УПЖКХ_ВидыОперацийСобственности.АннулированиеПравСобственности;
	КонецЕсли;
	
	ДокументОбъект.Ответственный = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
	ДокументОбъект.Комментарий = "Документ создан при смене вида учета собственников помещений";
	
	КоличествоСобственников = ?(ЭтоРегистрацияПрав, ВыборкаРегистратор.КоличествоСобственников,
	                            ВыборкаРегистратор.КоличествоНеСобственников);
	ДокументОбъект.НесколькоСобственников      = КоличествоСобственников > 1;
	Если ЭтоРегистрацияПрав Тогда
		ДокументОбъект.ОпределитьДолиСобственности = ВыборкаРегистратор.ДоляСобственникаЗнаменатель > 0;
	КонецЕсли;
	
	// Добавление жильцов в табличную часть документа.
	Пока ВыборкаДеталей.Следующий() Цикл
		
		Если ВыборкаДеталей.Действует = ЭтоРегистрацияПрав Тогда
			
			НоваяСтрока = ДокументОбъект.Собственники.Добавить();
			НоваяСтрока.Собственник                      = ВыборкаДеталей.Собственник;
			НоваяСтрока.ОснованиеПолученияВСобственность = ВыборкаДеталей.ОснованиеПолученияВСобственность;
			НоваяСтрока.ВидДокумента                     = ВыборкаДеталей.ВидДокумента;
			НоваяСтрока.НомерДокумента                   = ВыборкаДеталей.НомерДокумента;
			НоваяСтрока.ДатаДокумента                    = ВыборкаДеталей.ДатаДокумента;
			Если ЭтоРегистрацияПрав Тогда
				НоваяСтрока.ДоляСобственникаЗнаменатель = ВыборкаДеталей.ДоляСобственникаЗнаменатель;
				НоваяСтрока.ДоляСобственникаЧислитель   = ВыборкаДеталей.ДоляСобственникаЧислитель;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Проведение);
	
КонецФункции

&НаСервере
// Функция выполняет анализ модифицированности константы "УПЖКХ_УпрощенныйВариантУчетаСобственников".
//
// Возвращаемое значение:
//  Булево - Истина если операция выполнена успешно, Ложь - иначе.
//
Функция ПрименитьПараметры()
	
	НетОшибки = Истина;
	
	// Страница "Учет начислений".
	
	ЗаголовокРаздела = "Раздел ""Учет начислений"":" + Символы.ПС;
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		Если УслугаДобровольногоСтрахования = Справочники.КВП_Услуги.ПустаяСсылка() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ЗаголовокРаздела + "Не указана услуга добровольного страхования.");
			Возврат Ложь;
		КонецЕсли;
		
		Если ВыбранаНевернаяУслугаСтрахования(УслугаДобровольногоСтрахования) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ЗаголовокРаздела + "В качестве услуги добровольного страхования должна быть выбрана услуга со способом расчета ""По площади"" или ""Фиксированное начисление"".");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Страница "Корректировки начислений".
	
	ЗаголовокРаздела = "Раздел ""Корректировки начислений"":" + Символы.ПС;
	Если НаборКонстант.УПЖКХ_ВариантИзмененияЗадолженностиВКорректировкахНачислений.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ЗаголовокРаздела + "Не указан вариант изменения задолженности в корректировках начислений.");
		Возврат Ложь;
	КонецЕсли;
	
	// Страница "Приборы учета".
	
	ЗаголовокРаздела = "Раздел ""Приборы учета"":" + Символы.ПС;
	Если УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДН И Не ЗначениеЗаполнено(НаборКонстант.УПЖКХ_ДатаНачалаУчетаСторноИндивидуальныхНачисленийПриРасчетеОДН) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ЗаголовокРаздела + "Не указана дата начала применения корректировки ОДН при сторнировании начислений.");
		Возврат Ложь;
	КонецЕсли;
	
	Если СпособРаспределенияПоказанийПомещениеЛС = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПлощадямПомещений 
		И НЕ ЗначениеЗаполнено(ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ЗаголовокРаздела + "Не указан вид площади для распределения показаний помещений/лицевых счетов.");
		Возврат Ложь;
	КонецЕсли;
	
	// Сбросим дату начала корректировки, если настройка сброшена.
	Если Не УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДН Тогда
		УПЖКХ_ДатаНачалаУчетаСторноИндивидуальныхНачисленийПриРасчетеОДН = Дата(1,1,1);
	КонецЕсли;
	
	Если СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПлощадямПомещений 
		И НЕ ЗначениеЗаполнено(ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ЗаголовокРаздела + "Не указан вид площади для распределения показаний подъездов/зданий.");
		Возврат Ложь;
	КонецЕсли;
	
	// Страница "Учет собственников".
	
	// Переход с упрощенного варианта на подробный.
	Если Константы.УПЖКХ_УпрощенныйВариантУчетаСобственников.Получить() = Истина
	   И НЕ НаборКонстант.УПЖКХ_УпрощенныйВариантУчетаСобственников Тогда
		
		НачатьТранзакцию();
		
		НаборЗаписейРС_СобственникиПомещений = РегистрыСведений.УПЖКХ_СобственникиПомещений.СоздатьНаборЗаписей();
		
		НаборЗаписейРС_СобственностьНаПомещения = РегистрыСведений.УПЖКХ_СобственностьНаПомещения.СоздатьНаборЗаписей();
		
		Запрос = Новый Запрос(ПолучитьТекстЗапросаПоРСУПЖКХ_СобственникиПомещений());
		ВыборкаРегистратор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Счетчик = 1;
		Пока ВыборкаРегистратор.Следующий() Цикл
			
			// Удаление записей из регистра сведений "Собственники помещений" с отбором по регистратору документов лицевого счета.
			НаборЗаписейРС_СобственникиПомещений.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
			НаборЗаписейРС_СобственникиПомещений.Записать();
			
			// Удаление записей из регистра сведений "Собственность на помещения" с отбором по регистратору документов лицевого счета.
			НаборЗаписейРС_СобственностьНаПомещения.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
			НаборЗаписейРС_СобственностьНаПомещения.Записать();
			
			// Создание документов установки прав собственности.
			ВыборкаДеталей = ВыборкаРегистратор.Выбрать();
			Если ВыборкаДеталей.Количество() > 0 И ВыборкаРегистратор.КоличествоСобственников > 0 Тогда
				Если Не СоздатьДокументСобственности(ВыборкаРегистратор, ВыборкаДеталей, Истина) Тогда
					НетОшибки = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			// Создание документов аннулирования прав собственности.
			ВыборкаДеталей.Сбросить();
			Если ВыборкаДеталей.Количество() > 0 И ВыборкаРегистратор.КоличествоНеСобственников > 0 Тогда
				Если Не СоздатьДокументСобственности(ВыборкаРегистратор, ВыборкаДеталей, Ложь) Тогда
					НетОшибки = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
		Если НЕ НетОшибки Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НетОшибки;
	
КонецФункции // ПрименитьПараметры()

&НаСервере
// Процедура получает настройки способов распределения показаний коллективных приборов учета.
//
Процедура ПолучитьНастройкиСпособовРаспределенияПоказаний()
	
	СтруктураПараметровПомещенияЛицевыесчета = УПЖКХ_ПараметрыУчетаСервер.ПолучитьСпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета();
	
	СтруктураПараметровПомещенияЛицевыесчета.Свойство("СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета",        СпособРаспределенияПоказанийПомещениеЛС);
	СтруктураПараметровПомещенияЛицевыесчета.Свойство("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета", ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета);
	
	СтруктураПараметровЗданияПодъезды = УПЖКХ_ПараметрыУчетаСервер.ПолучитьСпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды();
	
	СтруктураПараметровЗданияПодъезды.Свойство("СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды",        СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды);
	СтруктураПараметровЗданияПодъезды.Свойство("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды", ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Если пользователь выбирал услугу ручным вводом наименования, надо убедиться,
// что выбрана услуга с корректным способом расчета.
Функция ВыбранаНевернаяУслугаСтрахования(Услуга)
	
	СпособыРасчета = Справочники.КВП_Услуги.ПолучитьДоступныеСпособыРасчетаДляУслугДобровольногоСтрахования();
	
	Если СпособыРасчета.НайтиПоЗначению(Услуга.СпособРасчета) = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВыбранаНевернаяУслугаСтрахования()

&НаСервереБезКонтекста
// Возвращает перечень доступных способов расчета для услуги добровольного страхования.
Функция ПолучитьДоступныеСпособыРасчетаДляУслугДобровольногоСтрахования()
	
	Возврат Справочники.КВП_Услуги.ПолучитьДоступныеСпособыРасчетаДляУслугДобровольногоСтрахования();
	
КонецФункции // ПолучитьДоступныеСпособыРасчетаДляУслугДобровольногоСтрахования()

&НаСервере
// Получает настройки учета начислений по добровольному страхованию.
Процедура ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию()
	
	СтруктураНастроек = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	
	СтруктураНастроек.Свойство("ВестиУчетНачисленийПоДобровольномуСтрахованию", ВестиУчетНачисленийПоДобровольномуСтрахованию);
	СтруктураНастроек.Свойство("УслугаДобровольногоСтрахования",                УслугаДобровольногоСтрахования);
	
КонецПроцедуры // ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию()

&НаСервереБезКонтекста
// Определяет, были ли начисления по услуге, которая выбрана в качестве услуги добровольного страхования.
Функция ПоУслугеСтрахованияЕстьНачисления(Услуга)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.Услуга
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			,
	|			,
	|			,
	|			Услуга = &Услуга
	|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование)) КАК УПЖКХ_НачисленияОбороты";
	Запрос.УстановитьПараметр("Услуга", Услуга);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПоУслугеСтрахованияЕстьНачисления()

&НаСервереБезКонтекста
// Проверяет были ли начисления по услуге, которая ранее являлась услугой добровольного страхования.
Функция УжеЕстьНачисленияДобровольногоСтрахования(СтараяУслугаДобровольногоСтрахования)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.Услуга
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоДобровольномуСтрахованию.Обороты(, , , Услуга = &Услуга) КАК УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты";
	Запрос.УстановитьПараметр("Услуга", СтараяУслугаДобровольногоСтрахования);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Обработчик вызываемый после закрытия окна помощника перехода на новый механизм отражения начислений в регл. учете.
//
Процедура ОбработатьЗакрытиеФормыПомощника(ПереходВыполнен, ДополнительныеПараметры) Экспорт
	
	Если ПереходВыполнен = Истина Тогда
		
		ВыполненПереходНаНовыйМеханизмОтраженияНачислений = Истина;
		
		Элементы.ПанельРегламентированныйУчет.ТекущаяСтраница = Элементы.СтраницаПереходНаНовыйМеханизмВыполнен;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Если в параметрах передана начальная страница, установим ее.
	Если Параметры.Свойство("ИмяНачальнойСтраницы") И ТипЗнч(Параметры.ИмяНачальнойСтраницы) = Тип("Строка") Тогда
		
		// Основная панель.
		ЭлементОсновнойПанели = Элементы.ОсновнаяПанель;
		
		// Поиск страницы и ее установка в качестве текущей.
		СтраницаПанели = Элементы.Найти(Параметры.ИмяНачальнойСтраницы);
		Если ТипЗнч(СтраницаПанели) = Тип("ГруппаФормы") И СтраницаПанели.Родитель = ЭлементОсновнойПанели Тогда
			ЭлементОсновнойПанели.ТекущаяСтраница = СтраницаПанели;
		КонецЕсли;
		
	КонецЕсли;
	
	// Определение динамических настроек.
	УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДН = ЗначениеЗаполнено(НаборКонстант.УПЖКХ_ДатаНачалаУчетаСторноИндивидуальныхНачисленийПриРасчетеОДН);
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Установим значение переменной, которая хранит способ печати чеков в виде числа.
	Если НаборКонстант.УПЖКХ_ПечататьЧекиИзРегистрацииОплаты Тогда
		УПЖКХ_ПечататьЧекиИзРегистрацииОплаты = 1;
	КонецЕсли;
	
	// Обновим текущие настройки распределения показаний.
	ПолучитьНастройкиСпособовРаспределенияПоказаний();
	
	ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	
	СтараяУслугаДобровольногоСтрахования = УслугаДобровольногоСтрахования;
	
	Если НаборКонстант.УПЖКХ_РасчетСреднегоРасходаПоПУСУчетомДатыВводаПоследнихПоказаний Тогда
		ВариантРасчетаСреднегоРасходаПоПУ = 1;
	Иначе
		ВариантРасчетаСреднегоРасходаПоПУ = 0;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаКомандыФормы);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	// Определим списки выбора способов распределения показаний ПУ на несколько объектов.
	СписокСпособовРаспределенияПомещенийЛицевыхСчетов = Новый Массив;
	СписокСпособовРаспределенияПомещенийЛицевыхСчетов.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноЗарегистрированным"));
	СписокСпособовРаспределенияПомещенийЛицевыхСчетов.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПроживающим"));
	СписокСпособовРаспределенияПомещенийЛицевыхСчетов.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноДолямЛицевыхСчетов"));
	СписокСпособовРаспределенияПомещенийЛицевыхСчетов.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПлощадямПомещений"));
	
	Элементы.СпособРаспределенияПоказанийПомещениеЛС.СписокВыбора.ЗагрузитьЗначения(СписокСпособовРаспределенияПомещенийЛицевыхСчетов);
	
	СписокСпособовРаспределенияПодъездовЗданий = Новый Массив;
	СписокСпособовРаспределенияПодъездовЗданий.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.Поровну"));
	СписокСпособовРаспределенияПодъездовЗданий.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПлощадямПомещений"));
	
	Элементы.СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды.СписокВыбора.ЗагрузитьЗначения(СписокСпособовРаспределенияПодъездовЗданий);
	
	ВывестиОписаниеВариантаИзмененияЗадолженностиВКорректировкахНачислений();
	
	ВывестиОписаниеВариантаНачисленияЗависимыхУслуг();
	ВывестиОписаниеВариантаСторнированияНачисленийПоТарифу();
	ВывестиОписаниеСпособовРаспределенияПоказаний();
	ВывестиОписаниеСпособаОпределенияСреднегоРасходаПоПриборамУчета();
	
	Если НаборКонстант.УПЖКХ_УчитыватьСторноИндивидуальныхНачисленийПриРасчетеОДНСразу Тогда
		ВариантУчетаСторнированияИндивидуальныхНачисленийПриРасчетеОДН = 1;
	Иначе
		ВариантУчетаСторнированияИндивидуальныхНачисленийПриРасчетеОДН = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ОтключитьПроверкуНастроекПередЗаписьюИЗакрытиемФормы Тогда
		
		Отказ = Истина;
		
		Если НаборКонстант.УПЖКХ_ПечататьЧекиСРасшифровкойПоУслугам
		   И НЕ Элементы.ФлагПечататьЧекиСРасшифровкойПоУслугам.Видимость Тогда
			НаборКонстант.УПЖКХ_ПечататьЧекиСРасшифровкойПоУслугам = Ложь;
		КонецЕсли;
		
		Если НаборКонстант.УПЖКХ_УчитыватьКорректировкиПриРасчетеЛьгот 
		   И НЕ НаборКонстант.УПЖКХ_ИспользоватьНовыйАлгоритмРасчетаЛьгот Тогда
			НаборКонстант.УПЖКХ_УчитыватьКорректировкиПриРасчетеЛьгот = Ложь;
		КонецЕсли;
		
		Если Не НаборКонстант.УПЖКХ_ПечататьЧекиИзРегистрацииОплаты Тогда
			НаборКонстант.УПЖКХ_ПечататьЧекиПриОплатеБанковскойКартой = Ложь;
			НаборКонстант.УПЖКХ_ПечататьЧекиСРасшифровкойПоУслугам    = Ложь;
		КонецЕсли;
		
		// Если выполнен переход на новый механизм отражения начислений в регл. учете,
		// то должна быть включена функциоанальность "Управление зачетом авансов и погашением задолженности".
		Если ВыполненПереходНаНовыйМеханизмОтраженияНачислений
			И Не НаборКонстант.УправлениеЗачетомАвансовПогашениемЗадолженности Тогда
			НаборКонстант.УправлениеЗачетомАвансовПогашениемЗадолженности = Истина;
		КонецЕсли;
		
		// Если используются корректировки реализации при отражении начислений,
		// то должна быть включена функциональность "Использовать корректировочные документы".
		Если НаборКонстант.УПЖКХ_ИспользоватьКорректировкиРеализацииПриОтраженииКорректировокВРеглУчете
		   И Не НаборКонстант.ИспользоватьКорректировочныеДокументы Тогда
			НаборКонстант.ИспользоватьКорректировочныеДокументы = Истина;
		КонецЕсли;
		
		БудетВыполненПереходУчетаСобственности = Ложь;
		
		// Если изменились настройки учета собственников, нужно предупредить,
		// возможно потребуется перенос данных в регистры.
		ИсходноеЗначение = ПолучитьЗначениеКонстантыНаСервере("УПЖКХ_УпрощенныйВариантУчетаСобственников");
		
		НуженВопрос = Ложь;
		ДопПараметрыВопроса = Новый Структура;
		Если ИсходноеЗначение = Истина
		   И НЕ НаборКонстант.УПЖКХ_УпрощенныйВариантУчетаСобственников Тогда
			ДопПараметрыВопроса.Вставить("ОпределитьПереходУчетаСобственности", Истина);
			ТекстВопроса = "При переходе с упрощенного на полноценный вариант учета собственников будут созданы документы ""Установка собственников помещений"" на основе данных о собственниках,
						|введенных в документах ""Открытие лицевого счета"" и ""Изменение лицевого счета"".
						|При этом следует учесть, что обратный переход на упрощенный вариант не предусматривает перенос данных из документов ""Установка собственников помещений"".
						|Продолжить?";
			НуженВопрос = Истина;
		ИначеЕсли ИсходноеЗначение = Ложь
				И НаборКонстант.УПЖКХ_УпрощенныйВариантУчетаСобственников Тогда
			ТекстВопроса = "После перехода с полного на упрощенный вариант учета собственников данные о собственниках можно будет вводить в документах ""Открытие лицевого счета"" и/или ""Изменение лицевого счета"".
							|При этом автоматический перенос данных о собственниках из документа ""Установка собственников помещений"" выполнен не будет.
							|Следует учесть, что для дальнейшего ведения учета собственников необходимо будет проверить корректность данных о собственниках в документах ""Открытия лицевого счета"" и ""Изменение лицевого счета"",
							|перепровести их, а документы ""Установка собственников помещений"" пометить на удаление.
							|Продолжить?";
			НуженВопрос = Истина;
		КонецЕсли;
		
		Если НуженВопрос Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаПередЗаписьюПродолжить", ЭтаФорма, ДопПараметрыВопроса),
							   ТекстВопроса,
							   РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
		
		ЗавершитьСохранениеНастроекИЗакрытьФорму(БудетВыполненПереходУчетаСобственности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре-обработчике
// "ПередЗаписью() формы.
//
Процедура ОбработатьРезультатВопросаПередЗаписьюПродолжить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	// Определим параметр выполнения перехода учета собственности.
	БудетВыполненПереходУчетаСобственности = Ложь;
	Если ДополнительныеПараметры.Свойство("ОпределитьПереходУчетаСобственности") Тогда
		БудетВыполненПереходУчетаСобственности = ДополнительныеПараметры.ОпределитьПереходУчетаСобственности;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗавершитьСохранениеНастроекИЗакрытьФорму(БудетВыполненПереходУчетаСобственности);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаПередЗаписьюПродолжить()

&НаКлиенте
//
Процедура ЗавершитьСохранениеНастроекИЗакрытьФорму(БудетВыполненПереходУчетаСобственности)
	
	Отказ = Ложь;
	
	Если БудетВыполненПереходУчетаСобственности Тогда
		Состояние("Выполняется обработка...");
	КонецЕсли;
	
	// Если еще не отказались, тогда проверим остальные данные и выполним необходимые обработки.
	Если Отказ Или Не ПрименитьПараметры() Тогда
		Отказ = Истина;
		Если БудетВыполненПереходУчетаСобственности Тогда
			Состояние("Обработка не выполнена...");
		КонецЕсли;
	Иначе
		Оповестить("УстановкаФункционалаРасчетаНачислений");
		Оповестить("ОбновитьСведенияОСобственности", "ФормаНастроек");
		Если БудетВыполненПереходУчетаСобственности Тогда
			Состояние("Обработка завершена...");
		КонецЕсли;
	КонецЕсли;
	
	// Записать и закрыть.
	Если Не Отказ Тогда
		ОтключитьПроверкуНастроекПередЗаписьюИЗакрытиемФормы = Истина;
		Записать();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("СпособРаспределенияПоказанийПомещениеЛС",                            ЭтотОбъект.СпособРаспределенияПоказанийПомещениеЛС);
	СтруктураПараметров.Вставить("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета", ЭтотОбъект.ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета);
	
	СтруктураПараметров.Вставить("СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды",        ЭтотОбъект.СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды);
	СтруктураПараметров.Вставить("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды", ЭтотОбъект.ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды);
	
	СтруктураВХранилище = Новый ХранилищеЗначения(СтруктураПараметров);
	Константы.УПЖКХ_СпособРаспределенияПоказанийКоллективногоПрибораУчета.Установить(СтруктураВХранилище);
	
	СтруктураСтрахования = Новый Структура;
	
	СтруктураСтрахования.Вставить("ВестиУчетНачисленийПоДобровольномуСтрахованию", ЭтотОбъект.ВестиУчетНачисленийПоДобровольномуСтрахованию);
	СтруктураСтрахования.Вставить("УслугаДобровольногоСтрахования",                ЭтотОбъект.УслугаДобровольногоСтрахования);
	
	СтруктураСтрахованияВХранилище = Новый ХранилищеЗначения(СтруктураСтрахования);
	Константы.УПЖКХ_НастройкиУчетаДобровольногоСтрахования.Установить(СтруктураСтрахованияВХранилище);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если НеобходимоОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Изменение константы "Дата начала использования нового механизма отражения начислений в регл. учете"
	// выполняется после записи набора констант, потому что при ее записи выполняется проверка контрольной строки,
	// передаваемой через дополнительные свойства менеджера значения константы.
	Если ВыполненПереходНаНовыйМеханизмОтраженияНачислений Тогда
		
		Константа = Константы.УПЖКХ_ДатаНачалаИспользованияНовогоМеханизмаОтраженияНачисленийВРеглУчете.СоздатьМенеджерЗначения();
		
		КонтрольнаяСтрока = "Самостоятельное изменение константы ""Дата начала использования нового механизма отражения " +
			"начислений в регл. учете"" крайне не рекомендуется поставщиком программы, так как может повлечь серьезные " +
			"и необратимые изменения в ведении учета. За дополнительной информацией обратитесь к разработчикам программы.";
		
		Константа.ДополнительныеСвойства.Вставить("КонтрольнаяСтрока", КонтрольнаяСтрока);
		
		Константа.Значение = ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), 1);
		
		Константа.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

//////////////////////////////////////////////
// Начисления

&НаКлиенте
// Обработчик события "ПриИзменении" флага "Вести учет начислений по добровольному страхованию".
Процедура ВестиУчетНачисленийПоДобровольномуСтрахованиюПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ВестиУчетНачисленийПоДобровольномуСтрахованиюПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" услуги добровольного страхования.
Процедура УслугаДобровольногоСтрахованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СпособыРасчета = ПолучитьДоступныеСпособыРасчетаДляУслугДобровольногоСтрахования();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("СпособРасчета", СпособыРасчета);
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", 
						  Новый Структура("ТекущаяСтрока, Отбор, ЭтоГруппа, ОтображатьСписком", 
						  УслугаДобровольногоСтрахования, СтруктураОтбора, Ложь, Истина), Элемент);
	
	Форма.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	Форма.Открыть();
	
КонецПроцедуры // УслугаДобровольногоСтрахованияНачалоВыбора()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" услуги добровольного страхования.
Процедура УслугаДобровольногоСтрахованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Чтобы избежать проблем в учете, нельзя пользователям позволять выбирать услугу, по которой уже были начисления.
	Если ПоУслугеСтрахованияЕстьНачисления(ВыбранноеЗначение) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("По выбранной услуге уже есть начисления. Данные начисления не будут считаться начислениями по добровольному страхованию, что может привести к проблемам в учёте."
															 + Символы.ПС + "Необходимо выбрать услугу, по которой ещё не было начислений.");
		
		СтандартнаяОбработка = Ложь;
		ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
	КонецЕсли;
	
	Если Не ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") И ВыбранаНевернаяУслугаСтрахования(ВыбранноеЗначение) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Услугу с данным способом расчета нельзя выбрать услугой добровольного страхования. Выберите услугу со способом расчета ""По площади"" или ""Фиксированное начисление"".");
		
		СтандартнаяОбработка = Ложь;
		ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
	КонецЕсли;
	
	// Если пользователь меняет услугу добровольного страхования, надо проверить нет ли начислений по старой услуге. Если они есть, то менять услугу нельзя, т.к.
	// смена может привести к тому, что начисления по старой услуге не будут отражаться в учете.
	Если Не ВыбранноеЗначение = СтараяУслугаДобровольногоСтрахования И УжеЕстьНачисленияДобровольногоСтрахования(СтараяУслугаДобровольногоСтрахования) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("По услуге " + СтараяУслугаДобровольногоСтрахования + " уже были начисления. Её нельзя менять.");
		
		СтандартнаяОбработка = Ложь;
		ВыбранноеЗначение = СтараяУслугаДобровольногоСтрахования;
	КонецЕсли;
	
КонецПроцедуры // УслугаДобровольногоСтрахованияОбработкаВыбора()

&НаКлиенте
// Выводит описание текущего варианта начисления зависимых услуг.
//
Процедура ВывестиОписаниеВариантаНачисленияЗависимыхУслуг()
	
	Описание = "";
	Если НаборКонстант.УПЖКХ_НачислятьЗависимуюУслугуПоСобственномуНормативу = Истина Тогда
		Описание = "Если хотя бы по одной из услуг-оснований зависимой услуги нет установленного индивидуального прибора учета, "
				 + "начисление производится по собственному нормативу зависимой услуги.";
	Иначе
		Описание = "Начисление зависимых услуг выполняется в соответствии с объемами начисления услуг-оснований, "
				 + "независимо от наличия установленных индивидуальных приборов учета.";
	КонецЕсли;
	
	Элементы.НачислятьЗависимуюУслугуПоСобственномуНормативу.РасширеннаяПодсказка.Заголовок = Описание;
	
КонецПроцедуры // ВывестиОписаниеВариантаНачисленияЗависимыхУслуг()

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода.
//
Процедура НачислятьЗависимуюУслугуПоСобственномуНормативуПриИзменении(Элемент)
	ВывестиОписаниеВариантаНачисленияЗависимыхУслуг();
КонецПроцедуры

//////////////////////////////////////////////
// Корректировки начислений

&НаКлиенте
Процедура УПЖКХ_ВариантИзмененияЗадолженностиВКорректировкахНачисленийПриИзменении(Элемент)
	
	ВывестиОписаниеВариантаИзмененияЗадолженностиВКорректировкахНачислений();
	
КонецПроцедуры

&НаКлиенте
// Выводит описание текущего варианта изменения задолженности в корректировках начислений.
//
Процедура ВывестиОписаниеВариантаИзмененияЗадолженностиВКорректировкахНачислений()
	
	Описание = "";
	Если НаборКонстант.УПЖКХ_ВариантИзмененияЗадолженностиВКорректировкахНачислений = 
			ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыИзмененияЗадолженностиВКорректировкахНачислений.РасчетныйПериодЗаКоторыйПроизведенаКорректировка") Тогда
		Описание = "Корректировка начислений изменяет задолженности по взаиморасчетам того расчетного периода, за который производится корректировка.
				   |Например, если 10 октября введена корректировка начислений за март, то изменяется задолженность марта месяца.";
		
	ИначеЕсли НаборКонстант.УПЖКХ_ВариантИзмененияЗадолженностиВКорректировкахНачислений = 
			ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыИзмененияЗадолженностиВКорректировкахНачислений.ТекущийРасчетныйПериод") Тогда
		Описание = "Корректировка начислений изменяет задолженности по взаиморасчетам текущего расчетного периода.
				   |Например, если 10 октября введена корректировка начислений за март, то изменяется задолженность октября месяца.";
		
	КонецЕсли;
	
	Описание = Описание + ?(Не ПустаяСтрока(Описание), Символы.ПС + Символы.ПС, "")
			 + "Примечание:
			   |Настройка действует на все документы корректировки начислений в информационной базе за все время ведения учета.
			   |Изменение настройки повлияет на ранее введенные документы корректировки начислений при их перепроведении.";
	
	Элементы.УПЖКХ_ВариантИзмененияЗадолженностиВКорректировкахНачислений.РасширеннаяПодсказка.Заголовок = Описание;
	
КонецПроцедуры // ВывестиОписаниеВариантаРасчетаКоллективногоСчетчика()

//////////////////////////////////////////////
// Настройки приборов учета

&НаКлиенте
// Выводит описание текущего способа распределения показаний.
//
Процедура ВывестиОписаниеСпособовРаспределенияПоказаний()
	
	Описание = "";
	Если СпособРаспределенияПоказанийПомещениеЛС = 
						ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноЗарегистрированным") Тогда
		Описание = "Распределение показаний производится пропорционально количеству зарегистрированных человек.";
		
	ИначеЕсли СпособРаспределенияПоказанийПомещениеЛС = 
						ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПроживающим") Тогда
		Описание = "Распределение показаний производится пропорционально количеству проживающих человек.";
		
	ИначеЕсли СпособРаспределенияПоказанийПомещениеЛС = 
						ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноДолямЛицевыхСчетов") Тогда
		Описание = "Распределение показаний производится пропорционально долям собственности лицевых счетов. Например, когда счетчик установлен на несколько лицевых счетов одного помещения.";
	ИначеЕсли СпособРаспределенияПоказанийПомещениеЛС = 
						ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПлощадямПомещений") Тогда
		Описание = "Распределение показаний производится пропорционально размеру указанного вида площадей помещений. 
					|При этом учитываются площади всех помещений, на которые установлен прибор учета, не зависимо от типа помещения.";
	КонецЕсли;
	
	Элементы.СпособРаспределенияПоказанийПомещениеЛС.РасширеннаяПодсказка.Заголовок = Описание;
	
	Описание = "";
	Если СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды = 
						ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.Поровну") Тогда
		Описание = "Распределение показаний производится поровну между всеми подъездами или зданиями, на которые установлен коллективный прибор учета.";
		
	ИначеЕсли СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды = 
						ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПлощадямПомещений") Тогда
		Описание = "Распределение показаний производится пропорционально размеру указанного вида площадей помещений, входящих в состав каждого подъезда или здания, на которые установлен коллективный прибор учета.
					|При этом учитываются площади помещений, тип которых содержится в списке типов для распределения, определенный ниже.";
		
	КонецЕсли;
	
	Элементы.СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды.РасширеннаяПодсказка.Заголовок = Описание;
	
	Описание = "Список типов помещений (квартира, офис, автоместо и пр.), площади которых учитываются при распределении расхода коллективных приборов учета, установленных на несколько подъездов или зданий. 
				|Если список типов помещений не задан, то при распределении расхода учитываются только площади помещений с типом ""Квартира"" и ""Офис"".";
	
	Элементы.ПерейтиКСпискуТиповПомещений.РасширеннаяПодсказка.Заголовок = Описание;
	
КонецПроцедуры // ВывестиОписаниеВариантаРасчетаКоллективногоСчетчика()

&НаКлиенте
// Выводит описание текущего способа определения среднего расхода по ПУ.
//
Процедура ВывестиОписаниеСпособаОпределенияСреднегоРасходаПоПриборамУчета()
	
	Описание = "";
	Если НаборКонстант.УПЖКХ_СпособОпределенияСреднегоРасходаПоПриборамУчета = ПредопределенноеЗначение(
			"Перечисление.УПЖКХ_СпособыОпределенияСреднегоРасходаПоПриборамУчета.ПоМесяцамСНенулевымРасходом") Тогда
		Описание = "Средний расход по приборам учета для расчета начислений по среднему определяется как отношение
				   |расхода за период к количеству месяцев с ненулевым расходом в данном периоде.";
		
	ИначеЕсли НаборКонстант.УПЖКХ_СпособОпределенияСреднегоРасходаПоПриборамУчета = ПредопределенноеЗначение(
				"Перечисление.УПЖКХ_СпособыОпределенияСреднегоРасходаПоПриборамУчета.ПоМесяцамСДействующимПУ") Тогда
		Описание = "Средний расход по приборам учета для расчета начислений по среднему определяется как отношение
				   |расхода за период к количеству месяцев с действующим прибором учета в данном периоде.";
		
	КонецЕсли;
	
	Элементы.УПЖКХ_СпособОпределенияСреднегоРасходаПоПриборамУчета.РасширеннаяПодсказка.Заголовок = Описание;
	
КонецПроцедуры // ВывестиОписаниеВариантаРасчетаКоллективногоСчетчика()

&НаКлиенте
// Выводит описание текущего варианта сторнирования начислений по тарифу.
//
Процедура ВывестиОписаниеВариантаСторнированияНачисленийПоТарифу()
	
	Описание = "";
	Если НаборКонстант.УПЖКХ_СторнироватьНачисленияПоАктуальномуТарифу = Истина Тогда
		Описание = "Сторнирование начислений по услуге производится по актуальному на момент сторнирования тарифу.";
	Иначе
		Описание = "При сторнировании начислений по услуге используется тариф, действовавший в периоде начисления "
				 + "при отсутствии показаний индивидуального прибора учета.";
	КонецЕсли;
	
	Элементы.УПЖКХ_СторнироватьНачисленияПоАктуальномуТарифу.РасширеннаяПодсказка.Заголовок = Описание;
	
КонецПроцедуры // ВывестиОписаниеВариантаСторнированияНачисленийПоТарифу()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УПЖКХ_ИспользоватьПовышающиеКоэффициентыПриОтсутствииПУ".
//
Процедура УПЖКХ_ИспользоватьПовышающиеКоэффициентыПриОтсутствииПУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик перехода к списку регистра сведений "Значения повышающих коэффициентов для начисления по нормативу".
Процедура ПерейтиКЗначениямПовышающихКоэффициентовДляНачисленияПоНормативуНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_ЗначенияПовышающихКоэффициентовДляНачисленияПоНормативу.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
// Обработчик перехода к списку регистра сведений "Сведения о возможности установки приборов учета в зданиях и помещениях".
Процедура ПерейтиКСведениямОВозможностиУстановкиПриборовУчетаВЗданияхИПомещенияхНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода варианта определения среднего расхода по приборам учета.
//
Процедура УПЖКХ_СпособОпределенияСреднегоРасходаПоПриборамУчетаПриИзменении(Элемент)
	
	ВывестиОписаниеСпособаОпределенияСреднегоРасходаПоПриборамУчета();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода варианта определения
// способа распределения показаний на помещение / лицевой счет.
//
Процедура СпособРаспределенияПоказанийПомещениеЛСПриИзменении(Элемент)
	
	ВывестиОписаниеСпособовРаспределенияПоказаний();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода варианта определения способа распределения показаний на здание / подъезд.
//
Процедура СпособРаспределенияПоказанийЗданиеПриИзменении(Элемент)
	
	ВывестиОписаниеСпособовРаспределенияПоказаний();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик перехода к списку регистра сведений "Типы помещений для распределения показаний коллективных приборов учета".
Процедура ПерейтиКСпискуТиповПомещений(Элемент)
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_ТипыПомещенийДляРаспределенияРасходаКПУ.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" флажка использования контроля показаний приборов учета.
//
Процедура УПЖКХ_ИспользоватьКонтрольПоказанийПриборовУчетаПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" флажка использования корректировки ОДН.
//
Процедура УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДНПриИзменении(Элемент)
	
	// Проверим, есть ли движения по корректировке ОДН.
	// Если есть, то предупредим пользователя.
	Если Не УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДН
	   И УПЖКХ_РасчетНачисленийСервер.ОпределитьНаличиеКорректировкиОДНПриСторнированииНачислений() Тогда
		ТекстВопроса = "В информационной базе присутствуют используемые при расчете ОДН данные по учету расхождений между фактическим расходом ИПУ и начислениями по норме."
									  + Символы.ПС + "Снятие настройки может повлиять на начисления прошедших периодов! Продолжить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаПродолжить", ЭтаФорма),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДНПриИзмененииПродолжить();
	
КонецПроцедуры // УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДНПриИзменении()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре-обработчике 
// "УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДНПриИзменении()".
//
Процедура ОбработатьРезультатВопросаПродолжить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДН = Истина;
	КонецЕсли;
	
	УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДНПриИзмененииПродолжить();
	
КонецПроцедуры // ОбработатьРезультатВопросаПродолжить()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика "УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДНПриИзменении()".
//
Процедура УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДНПриИзмененииПродолжить()
	
	Если Не УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДН Тогда
		НаборКонстант.УПЖКХ_ДатаНачалаУчетаСторноИндивидуальныхНачисленийПриРасчетеОДН = Дата(1,1,1);
		НаборКонстант.УПЖКХ_УчитыватьСторноИндивидуальныхНачисленийПриРасчетеОДНСразу = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // УчитыватьСторнированиеИндивидуальныхНачисленийПриРасчетеОДНПриИзмененииПродожлить()

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода даты начала применения корректировки ОДН.
//
Процедура УПЖКХ_ДатаНачалаУчетаСторноИндивидуальныхНачисленийПриРасчетеОДНПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НаборКонстант.УПЖКХ_ДатаНачалаУчетаСторноИндивидуальныхНачисленийПриРасчетеОДН) Тогда
		НаборКонстант.УПЖКХ_ДатаНачалаУчетаСторноИндивидуальныхНачисленийПриРасчетеОДН = НачалоМесяца(НаборКонстант.УПЖКХ_ДатаНачалаУчетаСторноИндивидуальныхНачисленийПриРасчетеОДН);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элементов "УчитыватьСторнированиеВПределахОбъемаТекущегоНачисления"
// и УчитыватьСторнированиеВПолномОбъеме.
//
Процедура УчитыватьСторнированиеПриИзменении(Элемент)
	
	Если ВариантУчетаСторнированияИндивидуальныхНачисленийПриРасчетеОДН = 1 Тогда
		НаборКонстант.УПЖКХ_УчитыватьСторноИндивидуальныхНачисленийПриРасчетеОДНСразу = Истина;
	Иначе
		НаборКонстант.УПЖКХ_УчитыватьСторноИндивидуальныхНачисленийПриРасчетеОДНСразу = Ложь;
	КонецЕсли;
	
	// Если ранее использовалась настройка учета сторнирования инд. начислений при расчете ОДН,
	// настройка "Учитывать сторно индивидуальных начислений при расчете ОДН сразу" не использовала,
	// а теперь включается или наоборот, то необходимо предупредить о том, что изменение документов
	// предыдущих периодов может изменить взаиморасчеты.
	
	НастройкаСразуИспользоваласьРаньше = ПолучитьЗначениеКонстантыНаСервере("УПЖКХ_УчитыватьСторноИндивидуальныхНачисленийПриРасчетеОДНСразу");
	НастройкаСразуИспользуетсяТеперь   = НаборКонстант.УПЖКХ_УчитыватьСторноИндивидуальныхНачисленийПриРасчетеОДНСразу;
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеКонстантыНаСервере("УПЖКХ_ДатаНачалаУчетаСторноИндивидуальныхНачисленийПриРасчетеОДН")) 
	   И
	   (Не НастройкаСразуИспользоваласьРаньше И НастройкаСразуИспользуетсяТеперь
	   Или НастройкаСразуИспользоваласьРаньше И Не НастройкаСразуИспользуетсяТеперь) Тогда
		ПоказатьПредупреждение(, "Изменение настройки варианта учета сторно может повлиять на взаиморасчеты при перерасчете документов начисления услуг предыдущих периодов.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода.
//
Процедура УПЖКХ_СторнироватьНачисленияПоАктуальномуТарифуПриИзменении(Элемент)
	ВывестиОписаниеВариантаСторнированияНачисленийПоТарифу();
КонецПроцедуры

//////////////////////////////////////////////
// Расчет льгот

&НаКлиенте
// Обработчик события "ПриИзменении" флажка использования нового алгоритма расчета льгот.
//
Процедура УПЖКХ_ИспользоватьНовыйАлгоритмРасчетаЛьготПриИзменении(Элемент)
	
	// Сбросим подчиненную настройку.
	Если НЕ НаборКонстант.УПЖКХ_ИспользоватьНовыйАлгоритмРасчетаЛьгот Тогда
		НаборКонстант.УПЖКХ_УчитыватьКорректировкиПриРасчетеЛьгот = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

//////////////////////////////////////////////
// Настройки печати при оплате

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ФлагПечататьЧекиПриОплатеБанковскойКартойПриИзменении".
//
Процедура ОбработатьРезультатВопросаРазрешитьПечатьЧековДляБанковскихОпераций(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		НаборКонстант.УПЖКХ_ПечататьЧекиПриОплатеБанковскойКартой = Истина;
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		НаборКонстант.УПЖКХ_ПечататьЧекиПриОплатеБанковскойКартой = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" флажка печати чеков при оплате банковской картой.
//
Процедура ФлагПечататьЧекиПриОплатеБанковскойКартойПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если НаборКонстант.УПЖКХ_ПечататьЧекиПриОплатеБанковскойКартой Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаРазрешитьПечатьЧековДляБанковскихОпераций", ЭтаФорма);
		
		ТекстВопроса = "Внимание! Данная настройка в скором времени будет удалена. Теперь в случае оплаты услуг пластиковой картой
					   |в документе ""Регистрация оплаты"" следует использовать новый вид операции ""Оплата платежной картой"".
					   |Продолжить?";
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" переключателя печати чеков через РО.
//
Процедура ПереключательПечататьЧерезПриходныйКассовыйОрдерПриИзменении(Элемент)
	
	НаборКонстант.УПЖКХ_ПечататьЧекиИзРегистрацииОплаты = Ложь;
	
	// Сбросим настройки, подчиненные противоположному варианту.
	НаборКонстант.УПЖКХ_ПечататьЧекиПриОплатеБанковскойКартой = Ложь;
	НаборКонстант.УПЖКХ_ПечататьЧекиСРасшифровкойПоУслугам    = Ложь;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" переключателя печати чеков через РО.
//
Процедура ПереключательПечататьЧерезРегистрациюОплатыПриИзменении(Элемент)
	
	НаборКонстант.УПЖКХ_ПечататьЧекиИзРегистрацииОплаты = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

//////////////////////////////////////////////
// Перейти на главную страницу сайта "otr-soft.ru"

// Обработчик события "Нажатие" на гиперссылку "ДекорацияПерейтиНаСайтРазработчика".
//
&НаКлиенте
Процедура ДекорацияПерейтиНаСайтРазработчикаНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияПерейтиНаСайтРазработчикаНажатиеЗапускПриложения", ЭтотОбъект,,
												  "ДекорацияПерейтиНаСайтРазработчикаНажатиеОбработатьОшибку", ЭтотОбъект);
	
	НачатьЗапускПриложения(ОписаниеОповещения, УПЖКХ_ИнформацияОРазработчикеИПрограмме.АдресГлавнойСтраницыСайтаКомпании("~MLll8"));
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура ДекорацияПерейтиНаСайтРазработчикаНажатиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
// Обработчик ошибки.
Процедура ДекорацияПерейтиНаСайтРазработчикаНажатиеОбработатьОшибку(КодВозврата, ДополнительныеПараметры) Экспорт
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ИнформацияОбОшибке());
КонецПроцедуры

//////////////////////////////////////////////
// Регламентированный учет

&НаКлиенте
// Обработчик события "ПриИзменении" флажка "ИспользоватьКорректировкиРеализацииПриОтраженииКорректировокВРеглУчете".
//
Процедура УПЖКХ_ИспользоватьКорректировкиРеализацииПриОтраженииКорректировокВРеглУчетеПриИзменении(Элемент)
	
	// Если используются корректировки реализации при отражении начислений,
	// то должна быть включена функциональность "Использовать корректировочные документы".
	Если НаборКонстант.УПЖКХ_ИспользоватьКорректировкиРеализацииПриОтраженииКорректировокВРеглУчете
	   И Не НаборКонстант.ИспользоватьКорректировочныеДокументы Тогда
		
		ПоказатьПредупреждение(, "Внимание! Для использования корректировок реализаций при отражении корректировок начислений
								 |в регл. учете будет включена функциональность ""Исправительные и корректировочные документы"",
								 |которая доступна в настройках ""Главное - Функциональность - Торговля"".");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" тумблера "ВариантРасчетаСреднегоРасходаПоПУ".
//
Процедура ВариантРасчетаСреднегоРасходаПоПУПриИзменении(Элемент)
	
	Если ВариантРасчетаСреднегоРасходаПоПУ = 1 Тогда
		НаборКонстант.УПЖКХ_РасчетСреднегоРасходаПоПУСУчетомДатыВводаПоследнихПоказаний = Истина;
	Иначе
		НаборКонстант.УПЖКХ_РасчетСреднегоРасходаПоПУСУчетомДатыВводаПоследнихПоказаний = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

&НаКлиенте
// Обработчик команды формы "ВыполнитьПереходНаНовыйМеханизмОтражения".
//
Процедура ВыполнитьПереходНаНовыйМеханизмОтражения(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыПомощника", ЭтаФорма);
	
	// Форма помощника будет доступна только при переходе из настроек параметров учета,
	// Открыть ее каким-либо другим способом, например через "Все функции", будет нельзя.
	// Так будет до тех пор, пока новый механизм отражения начислений в регл. учете
	// не будет доведен до ума.
	ПараметрыФормы = Новый Структура("ПереходИзНастроекПараметровУчета", Истина);
	
	ОткрытьФорму("Обработка.УПЖКХ_ПомощникПереходаНаНовыйМеханизмОтраженияНачисленийВРеглУчете.Форма.Форма", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ПоясненияКМеханизмуУчетаДобровольногоСтрахования

// 1. В текущей реализации в качестве услуги добровольного страхования позволяем выбирать услуги
//    со способами расчета "По площади" или "Фиксированное начисление".
// 2. Если по выбранной услуге уже были начисления с разделами учета, отличными от "Добровольное страхование",
//    то не позволяем выбирать эту услугу, чтобы избежать возможных проблем в учете.
// 3. Назначение услуги и установка тарифов по добровольному страхованию осуществляется стандартным способом.
// 4. По добровольному страхованию не позволяем вводить начальное сальдо, т.к. остатки по этой услуге не учитываются.
// 5. Начисление добровольного страхования осуществляется документом "Начисление услуг" 
//    с видом операции "Начисление добровольного страхования". При этом периодические
//    показатели (размер площади, размер тарифа) берутся на начало месяца начисления.
//    Кроме того, начислять добровольное страхование можно документами "Начисление услуг в сторонней программе",
//    "Разовое начисление услуг" с видом операции "Прочие начисления", "Ввод фактических затрат на объект".
// 6. Каждый месяц добровольное страхование можно начислять только 1 раз.
//    Поэтому в каждом документе начисления находится соответствующая проверка.
// 7. Распределение оплаты на добровольное страхование имеет ряд особенностей.
//    Их подробное описание находится в функции "КВП_РаспределитьСуммуОбъекта()"
// из ОМ "КВП_УчетКоммунальныхУслуг".
// 8. Корректировать начисления по добровольному страхованию нельзя.
// 9. Начислять пени по добровольному страхованию нельзя. В целом, они и не начисляются, т.к. в силу реализации,
//    в регистрах начисления не будет неоплаченных начислений по страхованию.
// 10. Назначать льготы на добровольное страхование нельзя.
// 11. Предоставлять рассрочку на добровольное страхование нельзя.
// 12. В текущей реализации в стандартных квитанциях сумма начисления по добровольному страхованию не выводится.
//    Итоговая сумма к оплате не включает начисления по добровольному страхованию.
//    Сумма оплаты, которая в отчетном месяце пошла на добровольное страхование, выводится отдельной
//    строкой и не влияет на итоговую сумму к оплате.
// 13. В платежных документах сведения о добровольном страховании выводятся полноценно.
// 14. В остальных отчетах в текущей реализации сведения о добровольном страховании выводятся упрощенно:
//     только обороты, которые попали в регистра "Начисления".
//     Т.е. сумма начисления за следующий месяц и сумма оплаты.
// 15. Выгрузки в ОСЗН не дорабатывались. Во всех форматах выгрузки указываются конкретные услуги,
//     по которым необходимо выгрузить сведения. При этом добровольное
//     страхование не льготируется, т.е. услуга не должна быть выбрана пользователем.
// 16. Выгрузка в систему город. Сведения по добровольному страхованию выгружаются только в формате
//     выгрузки "Вариант 1", т.к. выводятся данные по начислениям в отдельности по каждой услуге.
//     Во всех остальных форматах выгрузки сведения по добровольному страхованию не учитываются.

#КонецОбласти
