
Функция SendData(УзелОбменаКод, УзелОбменаИмя, ДанныеМобильногоПриложения, СообщениеОбОшибке)
	
	Возврат МобильнаяБухгалтерия.ЗагрузитьДанныеМобильногоПриложения(УзелОбменаКод, УзелОбменаИмя, ДанныеМобильногоПриложения, СообщениеОбОшибке);
	
КонецФункции

Функция TelephoneCheckStart(СерСсылка, СообщениеОбОшибке)
	
	//Запрос на подтверждение номера телефона
	Ссылка = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаДокумент(СерСсылка, "ЗаявлениеАбонентаСпецоператораСвязи");
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.НачатьПроверкуТелефонаСМобильного(Ссылка, СообщениеОбОшибке);
	
КонецФункции

Функция TelephoneCheckFinish(Код, ИдентификаторПроверкиТелефона, СерСсылка, СообщениеОбОшибке)
	
	Ссылка = МобильнаяБухгалтерия.ДесериализоватьСсылкуНаДокумент(СерСсылка, "ЗаявлениеАбонентаСпецоператораСвязи");
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	РезультатОтправки = КонтекстЭДОСервер.ОтправитьЗаявлениеАбонентаСМобильного(Код, ИдентификаторПроверкиТелефона, Ссылка, СообщениеОбОшибке);
	
	Если РезультатОтправки Тогда
		
		//Отправка письма партнеру
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			СведенияДляПисьма    = Новый Структура;
			ИдентификаторыФайлов = Новый Массив;
			ЗначенияРеквизитов   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "КраткоеНаименование, ИНН, КПП, ТелефонМобильныйДляАвторизации");
			СведенияДляПисьма.Вставить("ИмяАбонента",     ЗначенияРеквизитов.КраткоеНаименование);
			СведенияДляПисьма.Вставить("ИНН",             ЗначенияРеквизитов.ИНН);
			СведенияДляПисьма.Вставить("КПП",             ЗначенияРеквизитов.КПП);
			СведенияДляПисьма.Вставить("ТелефонАбонента", ЗначенияРеквизитов.ТелефонМобильныйДляАвторизации);
			СведенияДляПисьма.Вставить("Тариф",           "Мобильное приложение");
			СведенияДляПисьма.Вставить("ИмяПриложения",   "ИП 6%");
			
			КодОбласти 	= ОбщегоНазначения.ЗначениеРазделителяСеанса();
			КлючОбласти = Константы["КлючОбластиДанных"].Получить();
			
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			Адрес 	= МодульРаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса() + "/ws/PrivateAPI?wsdl";
			Логин 	= МодульРаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса();
			Пароль 	= МодульРаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса();
			
			Опр = Новый WSОпределения(Адрес, Логин, Пароль,, 30);
			Прокси = Новый WSПрокси(Опр, "http://www.1c.ru/1cFresh/PrivateAPI/1.0", "PrivateAPI", "PrivateAPISoap",, 30);
			Прокси.Пользователь = Логин;
			Прокси.Пароль = Пароль;
			
			Результат = Прокси.SendLetterToPartner(КодОбласти, КлючОбласти,
				СериализаторXDTO.ЗаписатьXDTO(СведенияДляПисьма),
				СериализаторXDTO.ЗаписатьXDTO(ИдентификаторыФайлов));
		Исключение
			ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами.Ошибка обращения к методу SendLetterToPartner веб-сервису'", 
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытия , УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция GetData(УзелОбменаКод, УзелОбменаИмя, СообщениеОбОшибке)
	
	Возврат МобильнаяБухгалтерия.ВыгрузитьДанныеВМобильноеПриложение(УзелОбменаКод, УзелОбменаИмя, СообщениеОбОшибке);
	
КонецФункции

Функция ConfirmGettingFile(УзелОбменаКод, НомерСообщения, СообщениеОбОшибке)
	
	УзелОбмена = ПланыОбмена.МобильнаяБухгалтерия.НайтиПоКоду(УзелОбменаКод);
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, НомерСообщения);
	
	//Запишем дату синхронизации
	УзелОбъект = УзелОбмена.ПолучитьОбъект();
	УзелОбъект.ДатаСинхронизации = ТекущаяДата();
	УзелОбъект.Записать();
	
КонецФункции

Функция AutocompletePopulationPoint(Text, ХранилищеПараметров)
	
	Параметры = ХранилищеПараметров.Получить();
	
	Возврат МобильнаяБухгалтерия.СписокАвтоподбораНаселенногоПункта(Text, Параметры);
	
КонецФункции

Функция GetPopulationPointInfo(Adress)
	
	СведенияОбАдресе = Adress.Получить();
	
	Возврат МобильнаяБухгалтерия.СписокРеквизитовНаселенныйПункт(СведенияОбАдресе);
	
КонецФункции

Функция AutocompleteAdress(Text, ParentID, ХранилищеПараметров)
	
	Параметры = ХранилищеПараметров.Получить();
	
	Возврат МобильнаяБухгалтерия.АдресныеОбъектыУровня(Text, ParentID, Параметры);
	
КонецФункции

Функция CheckAdress(Adress)
	
	Параметры = Adress.Получить();
	
	Возврат МобильнаяБухгалтерия.РезультатПроверкиАдресовПоКлассификатору(Параметры);
	
КонецФункции

Функция GetHouseList(Text, ParentID)
	
	Возврат МобильнаяБухгалтерия.СписокДомов(Text, ParentID);
	
КонецФункции

Функция GetAdressID(ХранилищеПараметров)
	Адрес = ХранилищеПараметров.Получить();
	МобильнаяБухгалтерия.УстановитьИдентификаторыАдреса(Адрес);
	ХранилищеДляОтправки = Новый ХранилищеЗначения(Адрес, Новый СжатиеДанных(9));
	Возврат ХранилищеДляОтправки;
КонецФункции

Функция SetMunicipalData(Parameters)
	
	ПараметрыМетода = Parameters.Получить();
	Возврат МобильнаяБухгалтерия.УстановитьМуниципальныеСведения(ПараметрыМетода.Адрес, ПараметрыМетода.ОКТМО);
	
КонецФункции

//Устарела
Функция VerifyAdress(Adress)
	
	Результат = Новый Структура("Отказ", Истина);
	Результат.Вставить("Данные",Новый СписокЗначений);
	Результат.Вставить("КраткоеПредставлениеОшибки", Нстр("ru='Сервис проверки адресов временно недоступен'"));
	
	ХранилищеРезультата = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат ХранилищеРезультата;
	
КонецФункции

//Устарела
Функция GetCityDetails(CityID)
	
	Результат = Новый Структура("Отказ", Истина);
	ХранилищеРезультата = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат ХранилищеРезультата;
КонецФункции

//Устарела
Функция AutocomleteLocation(Text, ParentID, ХранилищеПараметров)
	
	Результат = Новый Структура("Отказ", Истина);
	Результат.Вставить("Данные", Неопределено);
	ХранилищеРезультата = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат ХранилищеРезультата;
	
КонецФункции

Функция GetRequisitesByINN(INN, ErrorMessage)
	
	Возврат МобильнаяБухгалтерия.ДанныеЕдиныхГосРеестровПоИНН(INN, ErrorMessage);
КонецФункции

Функция SendDeclarationToEmail(ID, ErrorMessage)
	Возврат МобильнаяБухгалтерия.ОтправитьДекларациюНаEmail(ID, ErrorMessage);
КонецФункции

Функция SendDeclarationUsing1СReportStart(СсылкаНаОтчет, ПовторнаяОтправка, СообщениеОбОшибке)
	Возврат МобильнаяБухгалтерия.НачатьОтправкуДекларацииИспользуяДокументооборотСКОВФоне(СсылкаНаОтчет, ПовторнаяОтправка, СообщениеОбОшибке);
КонецФункции

Функция SendDeclarationUsing1СReportFinish(ВременныйПароль, СсылкаНаОтчет, СообщениеОбОшибке)
	Возврат МобильнаяБухгалтерия.ЗавершитьОтправкуДекларацииИспользуяДокументооборотСКОВФоне(ВременныйПароль, СсылкаНаОтчет, СообщениеОбОшибке);
КонецФункции

Функция GetBackgroundJobState(ИдентификаторФоновогоЗадания, СообщениеОбОшибке)
	Возврат МобильнаяБухгалтерия.ПолучитьСостояниеФоновогоЗадания(ИдентификаторФоновогоЗадания, СообщениеОбОшибке);
КонецФункции

Функция CheckStatement(Статус, СтатусКомментарий)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ПроверитьСтатусЗаявленияСМобильного(Статус, СтатусКомментарий);
	
КонецФункции

Функция RegTransferConfigStart(ИдентификаторАбонента, ИдентификаторДокументооборота, ИдентификаторСертификата, СообщениеОбОшибке)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.НачатьНастройкуПодключенияСМобильного(ИдентификаторАбонента, ИдентификаторДокументооборота, ИдентификаторСертификата, СообщениеОбОшибке);
	
КонецФункции

Функция RegTransferConfigFinish(ИдентификаторАбонента, ИдентификаторДокументооборота, ИдентификаторСертификата, ВременныйПароль, СообщениеОбОшибке)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ЗавершитьНастройкуПодключенияСМобильного(ИдентификаторАбонента, ИдентификаторДокументооборота, ИдентификаторСертификата, ВременныйПароль, СообщениеОбОшибке)
	
КонецФункции

Функция CheckChanges(PeerCode, PeerName)
	Возврат МобильнаяБухгалтерия.ПрочитатьПризнакИзменений(PeerCode, PeerName);
КонецФункции

Функция CalculateSalaryByEmployee(ХранилищеПараметров, СообщениеОбОшибке)
	
	Возврат МобильнаяБухгалтерияЗарплата.РассчитатьЗарплатуПоСотруднику(ХранилищеПараметров, СообщениеОбОшибке);

КонецФункции

Функция GetSalaryData(УзелОбменаКод, УзелОбменаИмя, ХранилищеПараметров, СообщениеОбОшибке)

	Возврат МобильнаяБухгалтерияЗарплата.ВыгрузитьДанныеВМобильноеПриложениеПоЗарплате(
		УзелОбменаКод,
		УзелОбменаИмя,
		ХранилищеПараметров,
		СообщениеОбОшибке);

КонецФункции

Функция PrepareCalculateSalary(ХранилищеПараметров, СообщениеОбОшибке)

	Возврат МобильнаяБухгалтерияЗарплата.РассчитатьЗарплатуВФоне(ХранилищеПараметров, СообщениеОбОшибке);

КонецФункции

Функция PrepareReCalculateSalaryByEmployees(ХранилищеПараметров, СообщениеОбОшибке)

	Возврат МобильнаяБухгалтерияЗарплата.ПересчитатьЗарплатуПоСотрудникамВФоне(ХранилищеПараметров, СообщениеОбОшибке);

КонецФункции

Функция GetRegDoc(ВидДокумента, СерСсылка, СообщениеОбОшибке)
	
	Возврат МобильнаяБухгалтерия.ПечатьДокументаРегламентированнойОтчетности(ВидДокумента, СерСсылка, СообщениеОбОшибке);
	
КонецФункции

Функция CheckDeclarationsStatusUsing1СReport(ИдентификаторОрганизации, СообщениеОбОшибке)
	
	Возврат МобильнаяБухгалтерия.ПроверитьСтатусыОтправкиОтчетовВФоне(ИдентификаторОрганизации, СообщениеОбОшибке);

КонецФункции

Функция GetDataWithFilter(УзелОбменаКод, УзелОбменаИмя, ПараметрыОтбора, СообщениеОбОшибке)
	
	Отбор = МобильнаяБухгалтерия.ПодготовитьОтборДляВыгрузкиВМобильноеПриложение(ПараметрыОтбора, СообщениеОбОшибке);
	Если Отбор = Неопределено Тогда
		Возврат Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(9));
	Иначе
		Возврат МобильнаяБухгалтерия.ВыгрузитьДанныеВМобильноеПриложение(УзелОбменаКод, УзелОбменаИмя, СообщениеОбОшибке, Отбор);
	КонецЕсли;
	
КонецФункции

Функция TaxCalculateStart(СтруктураПараметров, СообщениеОбОшибке)
	
	Возврат МобильнаяБухгалтерия.НачатьРасчетНалогов(СтруктураПараметров, СообщениеОбОшибке);
	
КонецФункции

Функция TaxData(СтруктураПараметров, СообщениеОбОшибке)
	
	Возврат МобильнаяБухгалтерия.ДанныеПлатежаПоЗадачеБухгалтера(СтруктураПараметров, СообщениеОбОшибке);
	
КонецФункции

Функция TaxPayRegistration(Docs, Tax, ErrorMessage)
	
	МассивДокументов    = СериализаторXDTO.ПрочитатьXDTO(Docs);
	СтруктураПараметров = СериализаторXDTO.ПрочитатьXDTO(Tax);
	
	ОрганизацияСсылка   = Мобильнаябухгалтерия.ДесериализоватьСсылкуНаСправочник(СтруктураПараметров.Организация, "Организации");
	Если СтруктураПараметров.ИдПравила = "ПАТЕНТ" Тогда
		Правило = Мобильнаябухгалтерия.ДесериализоватьСсылкуНаСправочник(СтруктураПараметров.ИдЗадачи, "Патенты");
	Иначе
		Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(
											СтруктураПараметров.ИдЗадачи, 
											СтруктураПараметров.ИдПравила);
	КонецЕсли;
	
	Для Каждого ДокументОплаты Из МассивДокументов Цикл
		ДокументСсылка = Мобильнаябухгалтерия.ДесериализоватьСсылку(ДокументОплаты);
		Если ЗначениеЗаполнено(ДокументСсылка)
			И ЗначениеЗаполнено(Правило) Тогда
			Попытка
				ЗаписьИзменена = РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.ДобавитьЗаписьПравила(
					ОрганизацияСсылка, ДокументСсылка, Правило, СтруктураПараметров.ПериодСобытия);
					
				ВыполнениеЗадачБухгалтера.ЗарегистрироватьИзменениеСтатусаЗадачиПодготовкиПлатежа(ДокументСсылка);
			Исключение
				ErrorMessage = Нстр("ru='Ошибка при изменении статуса задачи бухгалтера.'");
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
		
КонецФункции

Функция AdvancedMode(УзелОбменаКод, ПроверятьАктуальностьЗакрытиеМесяца)
	
	УзелПриложения  = ПланыОбмена.МобильнаяБухгалтерия.НайтиПоКоду(УзелОбменаКод);
	РеквизитыУзла    = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелПриложения, "Организация, РасчетНалоговВБП");
	ТребуетсяРасчетНалоговВБП = МобильнаяБухгалтерия.РасширеннаяФункциональность(РеквизитыУзла.Организация, ТекущаяДата(), ПроверятьАктуальностьЗакрытиеМесяца);
	
	Если ТребуетсяРасчетНалоговВБП <> РеквизитыУзла.РасчетНалоговВБП Тогда
		УзелОбъект = УзелПриложения.ПолучитьОбъект();
		УзелОбъект.РасчетНалоговВБП = ТребуетсяРасчетНалоговВБП;
		УзелОбъект.Записать();
	КонецЕсли;
	
	Возврат ТребуетсяРасчетНалоговВБП;
	
КонецФункции

Функция RegDocOptions(ВидОтчета, ПолноеИмяПравила, КонецПериода)
	
	Если Не ЗначениеЗаполнено(ВидОтчета) 
		И ЗначениеЗаполнено(ПолноеИмяПравила) Тогда 
		ВидОтчета = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(ПолноеИмяПравила);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		ИмяФормыРеглОтчета   = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ВидОтчета, КонецПериода);
		ОперацииСРеглОтчетом = РегламентированнаяОтчетностьКлиентСервер.ОперацииСРегламентированнымОтчетом(ВидОтчета, ИмяФормыРеглОтчета);
		ПараметрыОтчета = Новый Структура(ОперацииСРеглОтчетом);
	Иначе
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("АвтоФормированиеНаСервере",         Ложь);
		ПараметрыОтчета.Вставить("ВыгрузкаНаСервере",                 Ложь);
		ПараметрыОтчета.Вставить("ПечатьСоШтрихкодомPDF417НаСервере", Ложь);
		ПараметрыОтчета.Вставить("ПечатьБезШтрихкодаPDF417НаСервере", Ложь);
	КонецЕсли;
	ПараметрыОтчета.Вставить("ВидОтчета", ВидОтчета);
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ПараметрыОтчета);
	
КонецФункции

Функция GetPrnForm(ПечатныеФормы, ТипДокумента, Ссылка, СтруктураПараметров, СообщениеОбОшибке)
	
	Возврат МобильнаяБухгалтерия.ПечатьДокумента(ПечатныеФормы, ТипДокумента, Ссылка, СтруктураПараметров, СообщениеОбОшибке)
		
КонецФункции

Функция Ping()
	Возврат Истина;
КонецФункции

Функция AllowedOrganisation()
	
	СписокОрганизаций = Новый Соответствие;
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
	ДоступныеГоловныеОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДоступныеОрганизации, "ОбособленноеПодразделение, Наименование");
	Для Каждого Организация Из ДоступныеОрганизации Цикл
		ДанныеОрганизации = ДоступныеГоловныеОрганизации.Получить(Организация);
		Если ДанныеОрганизации = Неопределено ИЛИ ДанныеОрганизации.ОбособленноеПодразделение = Истина Тогда
			Продолжить;
		КонецЕсли;
		UID = Строка(Организация.УникальныйИдентификатор());
		СписокОрганизаций.Вставить(UID, ДанныеОрганизации.Наименование);
	КонецЦикла;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(СписокОрганизаций);
	
КонецФункции

Функция CreateNode(СтруктураПараметров, СообщениеОбОшибке)
	
	ПараметрыУзла = СериализаторXDTO.ПрочитатьXDTO(СтруктураПараметров);
	МобильнаяБухгалтерия.СоздатьУзелОбмена(ПараметрыУзла, СообщениеОбОшибке);
	Возврат Истина;
	
КонецФункции

Функция GetCompanyDossier(CompanyID, ErrorMessage)
	Возврат МобильнаяБухгалтерия.ПолучитьДосьеКонтрагента(CompanyID, ErrorMessage);
КонецФункции

Функция GetCompanyInfo(CompanyID, ErrorMessage)
	Возврат МобильнаяБухгалтерия.ПолучитьСведенияОбОрганизации(CompanyID, ErrorMessage);
КонецФункции

Функция GetDocumentNumber(УзелОбменаКод, ВидДокумента, ДатаДокумента, СообщениеОбОшибке)
	
	Возврат МобильнаяБухгалтерия.ПолучитьНомерДокумента(УзелОбменаКод, ВидДокумента, ДатаДокумента, СообщениеОбОшибке);
	
КонецФункции

Функция GetReport(Parameters, ErrorMessage)
	
	Возврат МобильнаяБухгалтерияОтчеты.СформироватьОтчет(Parameters, ErrorMessage);
	
КонецФункции

Функция DataRequest(УзелОбменаКод, УзелОбменаИмя, ПараметрыОтбора, СообщениеОбОшибке)
	
	Возврат МобильнаяБухгалтерия.ЗарегистрироватьИзмененияПоЗапросу(УзелОбменаКод, УзелОбменаИмя, СообщениеОбОшибке, ПараметрыОтбора);
	
КонецФункции

Функция ConnectToNPD()
	Возврат МобильнаяБухгалтерия.ПодключитьПриложениеКСервисуИнтеграции();
КонецФункции

Функция AllowedOrganisationWithAdvancedMode()
	
	СписокОрганизаций = Новый Соответствие;
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
	ДоступныеГоловныеОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДоступныеОрганизации, "ОбособленноеПодразделение, Наименование");
	Для Каждого Организация Из ДоступныеОрганизации Цикл
		ДанныеОрганизации = ДоступныеГоловныеОрганизации.Получить(Организация);
		Если ДанныеОрганизации = Неопределено ИЛИ ДанныеОрганизации.ОбособленноеПодразделение = Истина Тогда
			Продолжить;
		КонецЕсли;
		UID = Строка(Организация.УникальныйИдентификатор());
		ТребуетсяРасчетНалоговВБП = МобильнаяБухгалтерия.РасширеннаяФункциональность(Организация, ТекущаяДата(), Ложь);
		СведенияОбОрганизации = Новый Структура("НаименованиеОрганизации, РасчетНалоговВБП", ДанныеОрганизации.Наименование, ТребуетсяРасчетНалоговВБП);
		СписокОрганизаций.Вставить(UID, СведенияОбОрганизации);
	КонецЦикла;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(СписокОрганизаций);
	
КонецФункции

Функция GetIndicatorsOfBusiness(УзелОбменаКод, УзелОбменаИмя)
	Возврат МобильнаяБухгалтерия.ОсновныеПоказатели(УзелОбменаКод, УзелОбменаИмя);
КонецФункции

#Область СинхронизацияСРазбивкойСообщенийНаБолки

Функция ПодготовитьДанныеКПолучению(УзелОбменаКод, УзелОбменаИмя, РазмерЧастиФайла, ПерваяСинхронизация, СообщениеОбОшибке)
	
	Возврат МобильнаяБухгалтерия.ПодготовитьДанныеКПолучениюВФоне(УзелОбменаКод, УзелОбменаИмя, РазмерЧастиФайла, ПерваяСинхронизация, СообщениеОбОшибке);
	
КонецФункции

Функция ВыгрузитьЧастьФайла(ИдентификаторФайла, НомерВыгружаемойЧастиФайла, ВсегоЧастей, СообщениеОбОшибке)
	
	ПолноеИмяЧастиФайла = ПолноеИмяЧастиФайла(ИдентификаторФайла, НомерВыгружаемойЧастиФайла, ВсегоЧастей);
	
	ЧастьФайла = Новый Файл(ПолноеИмяЧастиФайла);
	Если ЧастьФайла.Существует() Тогда
		ДвоичныеДанныеЧастиФайла = Новый ДвоичныеДанные(ПолноеИмяЧастиФайла);
		Возврат Новый ХранилищеЗначения(ДвоичныеДанныеЧастиФайла, Новый СжатиеДанных(9));
	Иначе
		СообщениеОбОшибке = НСтр("ru='Ошибка получения части файла'");
	КонецЕсли;
		
КонецФункции

Функция ПодтвердитьПолучениеВсехЧастейДанных(ИдентификаторФайла, ПодтверждениеПолученияФайла, СообщениеОбОшибке)
	
	Попытка
		УдалитьФайлы(ОбменДаннымиСлужебный.ВременныйКаталогВыгрузки(ИдентификаторФайла));
	Исключение
		
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
		
КонецФункции

// Возвращает полное имя файла, представляющего собой часть общего файла данных во временном хранилище с указанным идентификатором.
//
Функция ПолноеИмяЧастиФайла(ИдентификаторФайла, НомерВыгружаемойЧастиФайла, ВсегоЧастей)

	Результат = "";

	КаталогВременныхФайлов = ОбменДаннымиСлужебный.ВременныйКаталогВыгрузки(ИдентификаторФайла);

	Если ВсегоЧастей = 10 ИЛИ  ВсегоЧастей = 100 Тогда
		ВсегоРазрядов = СтрДлина(Формат(ВсегоЧастей, "ЧДЦ=0; ЧГ=0"));
		Для КоличествоРазрядов = СтрДлина(Формат(НомерВыгружаемойЧастиФайла, "ЧДЦ=0; ЧГ=0")) По ВсегоРазрядов Цикл
			ФорматнаяСтрока = СтрШаблон("ЧЦ=%1; ЧВН=; ЧГ=0", Строка(КоличествоРазрядов));
			ИмяФайла = СтрШаблон("%1.xml.%2", ИдентификаторФайла, Формат(НомерВыгружаемойЧастиФайла, ФорматнаяСтрока));
			ИменаФайлов = НайтиФайлы(КаталогВременныхФайлов, ИмяФайла);
			Если ИменаФайлов.Количество() > 0 Тогда
				Результат = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов, ИмяФайла);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		КоличествоРазрядов = СтрДлина(Формат(ВсегоЧастей, "ЧДЦ=0; ЧГ=0"));
		ФорматнаяСтрока = СтрШаблон("ЧЦ=%1; ЧВН=; ЧГ=0", Строка(КоличествоРазрядов));                                   	
		ИмяЧастиФайла = СтрШаблон("%1.xml.%2", ИдентификаторФайла, Формат(НомерВыгружаемойЧастиФайла, ФорматнаяСтрока));
		Результат = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов, ИмяЧастиФайла);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

