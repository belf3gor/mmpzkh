
// Предназначена для конвертации mxl в pdf/xls на мобильном устройстве (мобильная платформа "не умеет" этого)
Функция ПолучитьФайлПечатнойФормыВТребуемомФормате(ПечатнаяФорма, Формат)
	
	Возврат МобильноеПриложениеПредприниматель.ПолучитьФайлПечатнойФормыВТребуемомФормате(ПечатнаяФорма, Формат);
	
КонецФункции

#Область СинхронизацияСРазбивкойСообщенийНаБолки

Функция ПодготовитьДанныеКПолучению(ИмяПланаОбмена, КодУзлаПланаОбмена, ДанныеМобильногоПриложения, РазмерЧастиФайла, ИдентификаторФоновогоЗадания, СообщениеОбОшибке)
	
	СообщениеОбОшибке = "";
	
	// Запустим фоновое задание для обновления списка задач бухгалтера и сбора данных монитора руководителя.
	ИмяФоновогоЗадания = НСтр("ru='Подготовка данных монитора руководителя и задач бухгалтера для синхронизации с мобильным устройством'");
	
	ФоновоеЗаданиеЗагрузкиДанных = ФоновыеЗадания.Выполнить(
		"МобильноеПриложениеПредприниматель.АктуализироватьДанныеМонитораРуководителяИЗадачиБухгалтера", 
		,
		Строка(Новый УникальныйИдентификатор()),
		ИмяФоновогоЗадания);


	СтруктураПараметров = ОбменДаннымиСлужебный.ИнициализироватьПараметрыWebСервиса();
	СтруктураПараметров.ИмяПланаОбмена                         = ИмяПланаОбмена;
	СтруктураПараметров.КодУзлаПланаОбмена                     = КодУзлаПланаОбмена;
	СтруктураПараметров.РазмерЧастиФайла                       = РазмерЧастиФайла;
	СтруктураПараметров.ИдентификаторФайлаВоВременномХранилище = Новый УникальныйИдентификатор();
	СтруктураПараметров.ИмяWEBСервиса                          = "MobileEntrepreneur_1_0_2_1";
	
	ПараметрыСтруктура 					= ДанныеМобильногоПриложения.Получить();
	СообщениеОбменаСтрокаXML 			= ПараметрыСтруктура.СообщениеОбменаСтрокаXML;
	НомерУспешноПринятогоИзЦБСообщения	= ПараметрыСтруктура.НомерУспешноПринятогоИзЦБСообщения;
	ДатаНачалаХраненияДанных			= ПараметрыСтруктура.ДатаНачалаХраненияДанных;
	ПервичныйОбмен						= ПараметрыСтруктура.ПервичныйОбмен;
	ВерсияКонфигурации					= ПараметрыСтруктура.ВерсияКонфигурации;
	
	УзелОбмена = МобильноеПриложениеПредпринимательПереопределяемый.НайтиУзелОбмена(КодУзлаПланаОбмена);
	
	// Если поступил запрос на первичный обмен, настроим узел и зарегистрируем нужные объекты к отправке
	Если ПервичныйОбмен Тогда
		МобильноеПриложениеПредпринимательПереопределяемый.ИнициализироватьПервичныйОбмен(УзелОбмена, КодУзлаПланаОбмена, ДатаНачалаХраненияДанных, ВерсияКонфигурации);
	КонецЕсли;
	
	Если УзелОбмена.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка настройки синхронизации: не найден узел обмена данными'");
	Иначе
		// Если из мобильного приложения пришло сообщение обмена, прочитаем его и запишем данные
		Если СообщениеОбменаСтрокаXML <> Неопределено Тогда
			МобильноеПриложениеПредприниматель.ПрочитатьСообщениеОбменаИЗаписатьДанныеМобильногоПриложения(УзелОбмена, СообщениеОбменаСтрокаXML);
		КонецЕсли;
		
		// Если изменилась ДатаНачалаХраненияДанных в мобильном приложении, сохраним новое значение и,
		// если дата изменилась на более раннюю, зарегистрируем соответствующие объекты к отправке
		МобильноеПриложениеПредпринимательПереопределяемый.ПроверитьОбработатьИзменениеДатыНачалаХраненияДанных(УзелОбмена, ДатаНачалаХраненияДанных);
		
		//Если изменилась версия в мобильном приложении, сохраним новое значение и,
		//если надо, зарегистрируем новые объекты 
		МобильноеПриложениеПредпринимательПереопределяемый.ПроверитьОбработатьИзменениеВерсииМобильногоПриложения(УзелОбмена, ВерсияКонфигурации);
		
		СтруктураПараметров.Вставить("УзелОбмена", УзелОбмена);
		СтруктураПараметров.Вставить("НомерУспешноПринятогоИзЦБСообщения", НомерУспешноПринятогоИзЦБСообщения);
		
		// Подготавливаем данные к выгрузке из информационной базы
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СтруктураПараметров);
		МассивПараметров.Добавить(СообщениеОбОшибке);
		ИмяФоновогоЗадания = НСтр("ru='Синхронизация данных с мобильным устройством'");
		
		ФоновоеЗаданиеЗагрузкиДанных = ФоновыеЗадания.Выполнить("МобильноеПриложениеПредприниматель.ПодготовитьДанныеДляВыгрузки", 
					МассивПараметров, Строка(Новый УникальныйИдентификатор()), ИмяФоновогоЗадания);
		ИдентификаторФоновогоЗадания = Строка(ФоновоеЗаданиеЗагрузкиДанных.УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРезультатПодготовкиДанныхКВыгрузке(ИдентификаторФоновогоЗадания, СообщениеОбОшибке)
	
	СообщениеОбОшибке 		= "";
	КоличествоЧастейФайла 	= "";
	ИдентификаторФайла    	= "";
	СостояниеЗадания    	= СостояниеФоновогоЗадания.Отменено;
	
	УстановитьПривилегированныйРежим(Истина);
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИдентификаторФоновогоЗадания));
	
	Если ФоновоеЗадание = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка синхронизации: не найдено фоновое задание'");
	ИначеЕсли ФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
		СостояниеЗадания = ФоновоеЗадание.Состояние;
	ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		СостояниеЗадания = ФоновоеЗадание.Состояние;
		МассивСообщений  = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		МассивРезультата = СтрРазделить(МассивСообщений[0].Текст, "$", Истина);
		КоличествоЧастейФайла = МассивРезультата[0];
		ИдентификаторФайла    = МассивРезультата[1];
	Иначе
		СостояниеЗадания = ФоновоеЗадание.Состояние;
	КонецЕсли;
	
	// Подготовим структуру - шаблон ответа операции
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("СообщениеОбОшибке", 		СообщениеОбОшибке);
	ВозвращаемаяСтруктура.Вставить("ИдентификаторФайла", 		ИдентификаторФайла);
	ВозвращаемаяСтруктура.Вставить("КоличествоЧастейФайла", 	КоличествоЧастейФайла);
	ВозвращаемаяСтруктура.Вставить("СостоянияФоновогоЗадания", 	СостояниеЗадания);
	ВозвращаемаяСтруктура.Вставить("ЗаданиеЕщеВыполняется", 	СостояниеЗадания = СостояниеФоновогоЗадания.Активно);
	
	Возврат Новый ХранилищеЗначения(ВозвращаемаяСтруктура, Новый СжатиеДанных(9));
	
КонецФункции

Функция ВыгрузитьЧастьФайла(ИдентификаторФайла, НомерВыгружаемойЧастиФайла, ВсегоЧастей, СообщениеОбОшибке)
	
	ПолноеИмяЧастиФайла = ПолноеИмяЧастиФайла(ИдентификаторФайла, НомерВыгружаемойЧастиФайла, ВсегоЧастей);
	
	ЧастьФайла = Новый Файл(ПолноеИмяЧастиФайла);
	Если ЧастьФайла.Существует() Тогда
		Возврат Новый ДвоичныеДанные(ПолноеИмяЧастиФайла);
	Иначе
		СообщениеОбОшибке = НСтр("ru='Ошибка получения части файла'");
	КонецЕсли;
		
КонецФункции

Функция ВыгрузитьЧастьФайлаКакХранилищеЗначения(ИдентификаторФайла, НомерВыгружаемойЧастиФайла, ВсегоЧастей, СообщениеОбОшибке)
	
	ПолноеИмяЧастиФайла = ПолноеИмяЧастиФайла(ИдентификаторФайла, НомерВыгружаемойЧастиФайла, ВсегоЧастей);
	
	ЧастьФайла = Новый Файл(ПолноеИмяЧастиФайла);
	Если ЧастьФайла.Существует() Тогда
		ДвоичныеДанныеЧастиФайла = Новый ДвоичныеДанные(ПолноеИмяЧастиФайла);
		Возврат Новый ХранилищеЗначения(ДвоичныеДанныеЧастиФайла, Новый СжатиеДанных(9));
	Иначе
		СообщениеОбОшибке = НСтр("ru='Ошибка получения части файла'");
	КонецЕсли;
		
КонецФункции

Функция ПодтвердитьПолучениеДанных(ИдентификаторФайла, ПодтверждениеПолученияФайла, СообщениеОбОшибке)
	
	Попытка
		УдалитьФайлы(ОбменДаннымиСлужебный.ВременныйКаталогВыгрузки(ИдентификаторФайла));
	Исключение
		
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
		
КонецФункции

Функция Ping()
	Возврат "";
КонецФункции

#КонецОбласти

Функция ОпределитьНомерДокумента(ИмяПланаОбмена, КодУзлаПланаОбмена, ДанныеМобильногоПриложения, СообщениеОбОшибке)
	
	СообщениеОбОшибке = "";
	СообщениеОбменаСтрокаXML = ДанныеМобильногоПриложения.Получить();
	
	УзелОбмена = МобильноеПриложениеПредпринимательПереопределяемый.НайтиУзелОбмена(КодУзлаПланаОбмена);
	НомерБП = "";
	
	Если СообщениеОбменаСтрокаXML <> Неопределено Тогда
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СообщениеОбменаСтрокаXML);
		
		ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
		ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
		
		URIПространстваИмен = МобильноеПриложениеПредприниматель.URIПространстваИменПакетаXDTO();
		
		Пока ЧтениеXML.URIПространстваИмен = URIПространстваИмен Цикл
			
			ТипОбъектаXDTO	= ФабрикаXDTO.Тип(URIПространстваИмен, ЧтениеXML.Имя);
			ОбъектXDTO		= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
			
			Если ОбъектXDTO.Тип().Имя = "СчетНаОплатуПокупателю" Тогда
				МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьСчетНаОплатуПокупателю(ОбъектXDTO, УзелОбмена, Ложь, НомерБП);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "АктСверкиВзаиморасчетов" Тогда
				МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьАктСверкиВзаиморасчетов(ОбъектXDTO, УзелОбмена, Ложь, НомерБП);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "РеализацияТоваровУслуг" Тогда
				ДопДействие = Ложь;
				МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьРеализацияТоваровУслуг(ОбъектXDTO, УзелОбмена, Ложь, НомерБП, ДопДействие);
				ОтветСтруктура = Новый Структура("ВыписанСчетФактура", ДопДействие);
				ДанныеМобильногоПриложения = Новый ХранилищеЗначения(ОтветСтруктура, Новый СжатиеДанных(9));
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Контрагент" Тогда
				МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьКонтрагента(ОбъектXDTO, УзелОбмена);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Договор" Тогда
				МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьДоговор(ОбъектXDTO, УзелОбмена);
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Номенклатура" Тогда
				МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьНоменклатуру(ОбъектXDTO, УзелОбмена);
			КонецЕсли;
			
		КонецЦикла;
		
		ЧтениеСообщения.ЗакончитьЧтение();
		ЧтениеXML.Закрыть();
		
	КонецЕсли;
	
	Возврат НомерБП;
		
КонецФункции

Функция ПолучитьПечатнуюФорму(ИмяПечатнойФормы, ТипДокумента, Ссылка, ФорматФайла, СообщениеОбОшибке)
	
	ДокСсылка = ДесериализоватьСсылкуНаДокумент(Ссылка, ТипДокумента);
	
	ПечатныеФормыОбъекта = Неопределено;
	ЕстьОшибки = Ложь;
	
	Если ЗначениеЗаполнено(ДокСсылка) Тогда
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ДокСсылка);
		
		КомандыОтправки = ОтправкаПочтовыхСообщений.КомандыОтправки();
		КомандыОтправки.Колонки.Добавить("ОбъектыОтправки");
		Документы[ТипДокумента].ДобавитьКомандыОтправки(КомандыОтправки);
		
		ВывестиПечатьИПодпись = Ложь;
		Если ИмяПечатнойФормы = "СчетЗаказСПечатью" Тогда
			ИмяПечатнойФормы = "СчетЗаказ";
			ВывестиПечатьИПодпись = Истина;
		ИначеЕсли ИмяПечатнойФормы = "АктСверкиСПечатьюИПодписью" Тогда
			ИмяПечатнойФормы = "АктСверки";
			ВывестиПечатьИПодпись = Истина;
		КонецЕсли;
		
		ОписаниеКоманды = КомандыОтправки.Найти(ИмяПечатнойФормы, "Идентификатор");
				
		Если ОписаниеКоманды <> Неопределено Тогда
			
			ОписаниеКоманды.ОбъектыОтправки = МассивОбъектов;
			Если ПустаяСтрока(ОписаниеКоманды.МенеджерПечати) Тогда
				ОписаниеКоманды.МенеджерПечати = "Документ." + ТипДокумента;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеКоманды.Обработчик) Тогда
				ИмяОбработчика = ОписаниеКоманды.Обработчик;
				Обработчик = ИмяОбработчика + "(ОписаниеКоманды, ЕстьОшибки)";
				ПечатныеФормыОбъекта = Вычислить(Обработчик);
			ИначеЕсли ОписаниеКоманды.МенеджерПечати = "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки" Тогда
				ПечатныеФормыОбъекта = ОтправкаПочтовыхСообщений.ПечатныеФормыИзВнешнегоИсточника(ОписаниеКоманды);
			Иначе
				ПечатныеФормыОбъекта = ОтправкаПочтовыхСообщений.ПечатныеФормы(ОписаниеКоманды);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПечатныеФормыОбъекта <> Неопределено 
			И ПечатныеФормыОбъекта.ТабличныеДокументы.Количество() > 0 Тогда
			
			ТабличныйДокумент = ПечатныеФормыОбъекта.ТабличныеДокументы[0].Значение;
			Если ВывестиПечатьИПодпись Тогда
				УправлениеПечатьюБП.ДобавитьФаксимилеВФоне(ТабличныйДокумент, ДокСсылка);
			КонецЕсли;
			
			Если НРег(ФорматФайла) = "pdf" Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
				ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
			ИначеЕсли НРег(ФорматФайла) = "xls" Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла("xls");
				ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
			ИначеЕсли НРег(ФорматФайла) = "xlsx" Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
				ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
			ИначеЕсли НРег(ФорматФайла) = "mxl" Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
				ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.MXL);
			КонецЕсли;
			
			ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
			УдалитьФайлы(ИмяФайла);

			Возврат ДанныеФайла;			
		Иначе
			СообщениеОбОшибке = НСтр("ru='Не удалось сформировать печатную форму'");
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = НСтр("ru='Документ не найден'");
	КонецЕсли;
		
КонецФункции

Функция ДесериализоватьСсылкуНаДокумент(СсылкаСериализованная, ИмяОбъекта)
	
	Если СсылкаСериализованная = "" Тогда
		Ссылка = Документы[ИмяОбъекта].ПустаяСсылка();
	Иначе
		Идентификатор = Новый УникальныйИдентификатор(СсылкаСериализованная);
		Ссылка = Документы[ИмяОбъекта].ПолучитьСсылку(Идентификатор);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ПолучитьСведенияОбОрганизации(ИНН, СообщениеОбОшибке)
	
	ИНН 		= СокрП(ИНН);
	ЭтоЮрЛицо   = (СтрДлина(ИНН) = 10);
	
	РеквизитыКонтрагента = Неопределено;
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИНН, ЭтоЮрЛицо);
	
	Если РезультатПроверки.СоответствуетТребованиям Тогда
		Если РезультатПроверки.ЭтоЮрЛицо Тогда
			РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(ИНН);
		Иначе
			РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИНН);
		КонецЕсли;
		
		РеквизитыКонтрагента.Вставить("ЮридическоеФизическоеЛицо", 
			?(РезультатПроверки.ЭтоЮрЛицо, "ЮридическоеЛицо", "ФизическоеЛицо"));
		
		Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
			СообщениеОбОшибке = РеквизитыКонтрагента.ОписаниеОшибки;
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = РезультатПроверки.ОписаниеОшибки;
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(РеквизитыКонтрагента, Новый СжатиеДанных(9));
	
КонецФункции

Функция ПолучитьДосьеКонтрагента(ИНН, СообщениеОбОшибке)
	
	ИНН 		= СокрЛП(ИНН);
	ЭтоЮрЛицо   = (СтрДлина(ИНН) = 10);
	
	ДосьеКонтрагента = Новый Структура;
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИНН, ЭтоЮрЛицо);
	
	Если РезультатПроверки.СоответствуетТребованиям Тогда
		
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		АдресХранилища = ПоместитьВоВременноеХранилище("",);
		
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("ИНН"              , ИНН);
		ПараметрыОтчета.Вставить("Контрагент"       , Контрагент);
		ПараметрыОтчета.Вставить("СостояниеДосье"   , "");
		ПараметрыОтчета.Вставить("СостояниеПроверки", "");
		
		ОписаниеОшибки = "Досье слишком большое или сервер сейчас перегружен, попробуйте поднее.";
		
		Для Шаг = 1 По 128 Цикл
			
			Отчеты.ДосьеКонтрагента.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
			ДанныеОтчета   = ПолучитьИзВременногоХранилища(АдресХранилища);
			
			//Если ошибка
			Если ДанныеОтчета.СостояниеДосье = "Завершено"
				И ДанныеОтчета.СостояниеПроверки = "Завершено" Тогда
				
				ОписаниеОшибки = ДанныеОтчета.ОписаниеОшибки;
				Прервать;
			КонецЕсли;
			
			//Если отчет сформирован
			Если ДанныеОтчета.СостояниеДосье = "СформированОтчет"
				И ДанныеОтчета.СостояниеПроверки = "СформированОтчет" Тогда
				
				ОписаниеОшибки = ДанныеОтчета.ОписаниеОшибки;
				Прервать;
			КонецЕсли;
			
			ПараметрыОтчета.Вставить("СостояниеДосье"   , ДанныеОтчета.СостояниеДосье);
			ПараметрыОтчета.Вставить("СостояниеПроверки", ДанныеОтчета.СостояниеПроверки);
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			
			ТаблицаРазделов = Новый ТаблицаЗначений;
			ТаблицаРазделов.Колонки.Добавить("ИмяРаздела");
			ТаблицаРазделов.Колонки.Добавить("Заголовок");
			ТаблицаРазделов.Колонки.Добавить("ТД");
			ТаблицаРазделов.Колонки.Добавить("КоличествоСтраниц");
			ТаблицаРазделов.Колонки.Добавить("НомерСтраницы");
						
			СтрокаРаздела = ТаблицаРазделов.Добавить();
			СтрокаРаздела.ИмяРаздела 	= "РезультатГлавное";
			СтрокаРаздела.Заголовок 	= "Главное";
			
			СтрокаРаздела = ТаблицаРазделов.Добавить();
			СтрокаРаздела.ИмяРаздела 	= "РезультатДанныеГосРеестров";
			СтрокаРаздела.Заголовок 	= ?(ДанныеОтчета.ЭтоЮридическоеЛицо, "Данные ЕГРЮЛ", "Данные ЕГРИП");
			
			СтрокаРаздела = ТаблицаРазделов.Добавить();
			СтрокаРаздела.ИмяРаздела 	= "РезультатБухгалтерскаяОтчетность";
			СтрокаРаздела.Заголовок 	= "Бухгалтерская отчетность";
			
			СтрокаРаздела = ТаблицаРазделов.Добавить();
			СтрокаРаздела.ИмяРаздела 	= "РезультатАнализОтчетности";
			СтрокаРаздела.Заголовок 	= "Анализ отчетности";
			
			СтрокаРаздела = ТаблицаРазделов.Добавить();
			СтрокаРаздела.ИмяРаздела 	= "РезультатФинансовыйАнализ";
			СтрокаРаздела.Заголовок 	= "Финансовый анализ";
			
			СтрокаРаздела = ТаблицаРазделов.Добавить();
			СтрокаРаздела.ИмяРаздела 	= "РезультатПроверки";
			СтрокаРаздела.Заголовок 	= "Проверки";
			
			КоличествоСтраниц = 0;
			
			ДанныеДосье    = ДанныеОтчета.ДанныеДосье;
			ДанныеПроверки = ДанныеОтчета.ДанныеПроверки;
				
			НаименованиеКонтрагента = ДанныеДосье.НаименованиеКонтрагента;
			
			Для Каждого Раздел Из ТаблицаРазделов Цикл
				
				Если ДанныеДосье.Свойство(Раздел.ИмяРаздела)
					ИЛИ ДанныеПроверки.Свойство(Раздел.ИмяРаздела) Тогда
					
					ИсходныйТабличныйДокумент = ?(ДанныеДосье.Свойство(Раздел.ИмяРаздела) , 
						ДанныеДосье[Раздел.ИмяРаздела], ДанныеПроверки[Раздел.ИмяРаздела]);
					ИсходныйТабличныйДокумент.АвтоМасштаб = Истина;
					
					//Развернем группировки
					Отбор = Новый Структура("ИмяДокумента", Раздел.ИмяРаздела);
					СтрокиТаблицы = ?(ДанныеДосье.Свойство(Раздел.ИмяРаздела), 
						ДанныеДосье.ОбластиРасшифровки.НайтиСтроки(Отбор), ДанныеПроверки.ОбластиРасшифровки.НайтиСтроки(Отбор));
					Для Каждого СтрокаОбласти Из СтрокиТаблицы Цикл
						НомерСтрокиЕще = СтрокаОбласти.ПерваяСтрока - 1;
						ИсходныйТабличныйДокумент.Область(НомерСтрокиЕще, , НомерСтрокиЕще).Видимость = Ложь;
						ИсходныйТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока-1).Видимость = Истина;
					КонецЦикла;
					Раздел.ТД = ИсходныйТабличныйДокумент;
					Раздел.КоличествоСтраниц = ИсходныйТабличныйДокумент.КоличествоСтраниц();
					Раздел.НомерСтраницы = КоличествоСтраниц + 1;
					КоличествоСтраниц = КоличествоСтраниц + Раздел.КоличествоСтраниц;
				Иначе
					Раздел.КоличествоСтраниц = 0;
				КонецЕсли;
				
			КонецЦикла;
			
			ТабличныйДокумент = Новый ТабличныйДокумент;
			ТабличныйДокумент.АвтоМасштаб			= Истина;
			ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
			ТабличныйДокумент.ПолеСверху			= 10;
			ТабличныйДокумент.ПолеСнизу				= 10;
			ТабличныйДокумент.ПолеСлева          	= 5;
			ТабличныйДокумент.ПолеСправа         	= 5;
			
			Макет = ПланыОбмена.МобильноеПриложениеПредприниматель.ПолучитьМакет("МакетОглавление");
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.ЗаголовокОтчета = НСтр("ru='Досье контрагента '") + НаименованиеКонтрагента;
			ОбластьМакета.Параметры.ДатаОтчета		= Формат(ТекущаяДата(), "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Разделитель");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Содержание");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Для Каждого Раздел Из ТаблицаРазделов Цикл
				Если Раздел.КоличествоСтраниц = 0 Тогда
					Продолжить;
				КонецЕсли;
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Заполнить(Раздел);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Отступ");
			ТабличныйДокумент.Вывести(ОбластьМакета);
						
			Для Каждого Раздел Из ТаблицаРазделов Цикл
				Если Раздел.КоличествоСтраниц = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если Раздел.ИмяРаздела <> "РезультатГлавное" Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();					
				КонецЕсли;
				
				ОбластьМакета = Макет.ПолучитьОбласть("Разделитель");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ТабличныйДокумент.Вывести(Раздел.ТД);
			КонецЦикла;
			
			ИмяФайла = СтрШаблон(НСтр("ru='Досье контрагента %1'"), 
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, "")) 
				+ ".pdf";
			КаталогВременныхФайлов = ОбменДаннымиПовтИсп.КаталогВременногоХранилищаФайлов();
			ПолноеИмяФайла         = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов, ИмяФайла);

			ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
			
			ДосьеКонтрагента.Вставить("Файл", Новый ДвоичныеДанные(ПолноеИмяФайла));
			ДосьеКонтрагента.Вставить("ИмяФайла", ИмяФайла);
			
			УдалитьФайлы(ПолноеИмяФайла);
		
		Иначе
			СообщениеОбОшибке = ДанныеОтчета.ОписаниеОшибки;
		КонецЕсли;
		
	Иначе
		СообщениеОбОшибке = РезультатПроверки.ОписаниеОшибки;
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(ДосьеКонтрагента, Новый СжатиеДанных(9));
	
КонецФункции

Функция ПолучитьЗаполненныйАктСверки(ДанныеМобильногоПриложения)
	
	СообщениеОбменаСтрокаXML = ДанныеМобильногоПриложения.Получить();
	СтруктураПараметров = Неопределено;
	
	Результат = Новый Структура();
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ДанныеЗаполнения", Неопределено);
	Результат.Вставить("СообщениеОбОшибке","");
		
	Если СообщениеОбменаСтрокаXML <> Неопределено Тогда
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СообщениеОбменаСтрокаXML);
		URIПространстваИмен = МобильноеПриложениеПредприниматель.URIПространстваИменПакетаXDTO();
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			ТипОбъектаXDTO	= ФабрикаXDTO.Тип(URIПространстваИмен, ЧтениеXML.Имя);
			ОбъектXDTO		= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
			
			Если ОбъектXDTO.Тип().Имя = "АктСверкиВзаиморасчетов" Тогда
				
				СтруктураПараметров = МобильноеПриложениеПредпринимательПереопределяемый.ПолучитьРеквизитыАктСверкиВзаиморасчетов(ОбъектXDTO);
				
			КонецЕсли;
		КонецЦикла;
		
		ЧтениеXML.Закрыть();
	КонецЕсли;
	
	Если СтруктураПараметров = Неопределено Тогда
		
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не корректные параметры заполнения.'");
		Возврат Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
		
	КонецЕсли;
	
	АдресХранилища 		= ПоместитьВоВременноеХранилище(Неопределено);
	Документы.АктСверкиВзаиморасчетов.ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища);
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") 
		ИЛИ НЕ СтруктураДанных.Успешно Тогда
		
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось получить данные для заполнения.'");
		Возврат Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
			
	КонецЕсли;
		
	Результат.Успешно = СтруктураДанных.Успешно;
	Результат.ДанныеЗаполнения = МобильноеПриложениеПредпринимательПереопределяемый.ПодготовитьСообщениеЗаполненияАктаСверки(СтруктураДанных);
	
	Возврат Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
КонецФункции

Функция ЗаписатьНастройкиДоставляемыхУведомлений(КодУзлаПланаОбмена, ПолучаетУведомления, ИдентификаторXDTO)
	
	СообщениеОбОшибке = "";
	
	УстановитьПривилегированныйРежим(Истина);
	УзелОбмена = ПланыОбмена.МобильноеПриложениеПредприниматель.НайтиПоКоду(КодУзлаПланаОбмена);

	Если УзелОбмена.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка синхронизации: не найден узел обмена данными'");
	Иначе
		УзелОбъект     = УзелОбмена.ПолучитьОбъект();
		УзелОбъект.ПолучаетPushУведомления = ПолучаетУведомления;
		ИдентификаторПодписчика = СериализаторXDTO.ПрочитатьXDTO(ИдентификаторXDTO);
		ДанныеИдентификатора    = Новый ХранилищеЗначения(ИдентификаторПодписчика, Новый СжатиеДанных(9));
		УзелОбъект.ИдентификаторПодписчикаУведомлений = ДанныеИдентификатора;
		
		Попытка
			УзелОбъект.Записать();
		Исключение
			СообщениеОбОшибке = ОписаниеОшибки();			
		КонецПопытки;
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

// Возвращает полное имя файла, представляющего собой часть общего файла данных во временном хранилище с указанным идентификатором.
//
Функция ПолноеИмяЧастиФайла(ИдентификаторФайла, НомерВыгружаемойЧастиФайла, ВсегоЧастей)

	Результат = "";

	КаталогВременныхФайлов = ОбменДаннымиСлужебный.ВременныйКаталогВыгрузки(ИдентификаторФайла);

	Если ВсегоЧастей = 10 ИЛИ  ВсегоЧастей = 100 Тогда
		ВсегоРазрядов = СтрДлина(Формат(ВсегоЧастей, "ЧДЦ=0; ЧГ=0"));
		Для КоличествоРазрядов = СтрДлина(Формат(НомерВыгружаемойЧастиФайла, "ЧДЦ=0; ЧГ=0")) По ВсегоРазрядов Цикл
			ФорматнаяСтрока = СтрШаблон("ЧЦ=%1; ЧВН=; ЧГ=0", Строка(КоличествоРазрядов));
			ИмяФайла = СтрШаблон("%1.xml.%2", ИдентификаторФайла, Формат(НомерВыгружаемойЧастиФайла, ФорматнаяСтрока));
			ИменаФайлов = НайтиФайлы(КаталогВременныхФайлов, ИмяФайла);
			Если ИменаФайлов.Количество() > 0 Тогда
				Результат = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов, ИмяФайла);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		КоличествоРазрядов = СтрДлина(Формат(ВсегоЧастей, "ЧДЦ=0; ЧГ=0"));
		ФорматнаяСтрока = СтрШаблон("ЧЦ=%1; ЧВН=; ЧГ=0", Строка(КоличествоРазрядов));                                   	
		ИмяЧастиФайла = СтрШаблон("%1.xml.%2", ИдентификаторФайла, Формат(НомерВыгружаемойЧастиФайла, ФорматнаяСтрока));
		Результат = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов, ИмяЧастиФайла);
	КонецЕсли;

	Возврат Результат;

КонецФункции
