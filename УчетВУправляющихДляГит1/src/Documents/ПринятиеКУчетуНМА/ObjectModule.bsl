#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	ПорядокСписанияНИОКРНаРасходыНУ = ?(Дата < '20120101', Перечисления.ПорядокСписанияНИОКРНУ.Равномерно, 
	Перечисления.ПорядокСписанияНИОКРНУ.ПриПринятииКУчету);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ПринятиеКУчетуНМА.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	УчетНМА.ПроверитьВозможностьИзмененияСостоянияНМА(
		ПараметрыПроведения.СостоянияНМА,
		Отказ);
		
	ПараметрыПринятияКУчетуНМА = Документы.ПринятиеКУчетуНМА.ПодготовитьТаблицыПараметровПринятиеКУчетуНМА(
		ПараметрыПроведения.ПринятиеКУчетуНМА, ПараметрыПроведения.СпособОтраженияРасходов);
		
	// Таблица включения в расходы при принятии к учету (НУ)
	ТаблицаЗатратПоВключениюСтоимостиВСоставРасходовНУ = УчетНМА.ПодготовитьТаблицуСписаниеНаРасходыНУ(
		ПараметрыПроведения.ПервоначальныеСведенияНМАНУ,
		ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ,
		Отказ);
	
	// Учет доходов и расходов ИП
	ТаблицаПринятияКУчетуНМАИП	= УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПринятияКУчетуНМА(
		ПараметрыПроведения.ПервоначальныеСведенияНМАИП, ПараметрыПроведения.ПринятиеКУчетуНМА);
	
	ТаблицаВключенияСтоимостиНМАВСоставРасходовИП = 
		УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуВключенияСтоимостиНМАВСоставРасходовИП(
		ПараметрыПроведения.ПервоначальныеСведенияНМАИП, ПараметрыПроведения.ПринятиеКУчетуНМА);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетНМА.СформироватьДвиженияСостоянияНМАОрганизаций(ПараметрыПроведения.СостоянияНМА,
		ПараметрыПроведения.ПринятиеКУчетуНМА, Движения, Отказ);
		
	УчетНМА.СформироватьДвиженияПринятиеКУчетуНМА(
		ПараметрыПринятияКУчетуНМА.ТаблицаПринятияКУчетуНМА, ПараметрыПринятияКУчетуНМА.ТаблицаСписания,
		Движения, Отказ);

	УчетНМА.СформироватьДвиженияРегистрацияСчетовБухгалтерскогоУчетаНМА(
		ПараметрыПроведения.СчетаБухгалтерскогоУчетаНМА,
		Движения, Отказ);
		
	УчетНМА.СформироватьДвиженияИзменениеСпособовОтраженияРасходовПоАмортизацииНМАБУ(
		ПараметрыПроведения.СпособыОтраженияРасходовПоАмортизацииНМАБУ,
		Движения, Отказ);

	УчетНМА.СформироватьДвиженияРегистрацияПервоначальныхСведенийНМАБУ(
		ПараметрыПроведения.ПервоначальныеСведенияНМАБУ,
		Движения, Отказ);
		
	УчетНМА.СформироватьДвиженияРегистрацияПервоначальныхСведенийНМАНУ(
		ПараметрыПроведения.ПервоначальныеСведенияНМАНУ,
		Движения, Отказ);
		
	УчетНМА.СформироватьДвиженияРегистрацияПервоначальныхСведенийНМАУСН(
		ПараметрыПроведения.ТаблицаОплатНМАУСН,
		ПараметрыПроведения.ПервоначальныеСведенияНМАУСН,
		Движения, Отказ);
		
	УчетНМА.СформироватьДвиженияНачислениеАмортизацииНМАСпециальныйКоэффициентНУ(
		ПараметрыПроведения.НачислениеАмортизацииНМАСпециальныйКоэффициентНУ,
		Движения, Отказ);

	УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации(
		ТаблицаЗатратПоВключениюСтоимостиВСоставРасходовНУ,
		ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ,
		Движения, Отказ);

	// Учет НДС
	УчетНДСРаздельный.СформироватьДвиженияПринятиеНаУчетНМА(
		ПараметрыПроведения.НМАНДС,
		ПараметрыПроведения.СписанныеНМАНДС,
		ПараметрыПроведения.РеквизитыНДС,
		Движения, Отказ);
		
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПринятиеКУчетуНМА(
		ТаблицаПринятияКУчетуНМАИП,
		ПараметрыПроведения.ПринятиеКУчетуНМА, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияВключенияСтоимостиНМАВСоставРасходовИП(
		ТаблицаВключенияСтоимостиНМАВСоставРасходовИП,
		ПараметрыПроведения.ПринятиеКУчетуНМА, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.РегистрацияСведенийОбОплатеОСиНМА(
		ТаблицаПринятияКУчетуНМАИП,
		ПараметрыПроведения.ПринятиеКУчетуНМА, Движения, Отказ);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	ПрименениеПБУ18            = УчетнаяПолитика.ПоддержкаПБУ18(Организация, Дата);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата);
	ПлательщикНалогаНаПрибыль  = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПлательщикНДФЛ             = УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата);
	
	Если ПрименениеПБУ18 Тогда
		Если СтоимостьНУ = 0 И СтоимостьПР = 0 И СтоимостьВР = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Поля ""Стоимость (НУ)"", ""Стоимость (ПР)"", ""Стоимость (ВР)"" не заполнены.
				|Хотя бы одно из этих полей должно быть заполнено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СтоимостьНУ");
		КонецЕсли;
		МассивНепроверяемыхРеквизитов.Добавить("СтоимостьНУ");
	КонецЕсли;
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособУчетаНДС");
	КонецЕсли;
	
	Если НЕ ПрименениеПБУ18 ИЛИ ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПорядокСписанияНИОКРНаРасходыНУ");
	КонецЕсли;
	
	Если ВидОбъектаУчета <> Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетНачисленияАмортизации");
		МассивНепроверяемыхРеквизитов.Добавить("ПорядокВключенияСтоимостиВСоставРасходовНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СпособОтраженияРасходовПриВключенииВСтоимость");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяПрочихРасходов");
	КонецЕсли;
	
	Если Не НачислятьАмортизациюБУ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СпособНачисленияАмортизацииБУ");
	КонецЕсли;
	
	Если НЕ ПлательщикНалогаНаПрибыль И НЕ ПлательщикНДФЛ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПорядокВключенияСтоимостиВСоставРасходовНУ");
	КонецЕсли;
	
	Если НЕ ПлательщикНалогаНаПрибыль Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособОтраженияРасходовПриВключенииВСтоимость");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
	КонецЕсли;
	
	Если НЕ ПлательщикНДФЛ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяПрочихРасходов");
	КонецЕсли;
	
	Если НЕ ПорядокВключенияСтоимостиВСоставРасходовНУ = 
		Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СпособОтраженияРасходовПриВключенииВСтоимость");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяПрочихРасходов");
		
	КонецЕсли;
	
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив 
		И НЕ ПорядокВключенияСтоимостиВСоставРасходовНУ 
		= Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
	КонецЕсли;
	
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР 
		И НЕ ПорядокСписанияНИОКРНаРасходыНУ = Перечисления.ПорядокСписанияНИОКРНУ.Равномерно Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
	КонецЕсли;
	
	Если НЕ НачислятьАмортизациюНУ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СрокПолезногоИспользованияНУ = ?(НачислятьАмортизациюНУ, СрокПолезногоИспользованияНУ,0);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

#КонецОбласти

#КонецЕсли