#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПринятиеКУчетуНМА";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ВидОбъектаУчета) Тогда
		ВидОперацииПриИзмененииСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

// Закладка "Нематериальный актив"

&НаКлиенте
Процедура НематериальныйАктивНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеВнеоборотнымиАктивамиКлиент.ОткрытьФормуВыбораНМА(Объект.ВидОбъектаУчета, СтандартнаяОбработка, Элемент, "ПринятиеКУчетуНМА");
	
КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	Если Объект.СпособНачисленияАмортизацииБУ
			<> ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции") Тогда
		Объект.ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
	КонецЕсли;
	
	Если Объект.СпособНачисленияАмортизацииБУ
			<> ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка") Тогда
		Объект.КоэффициентБУ = 0;
	Иначе
		Объект.КоэффициентБУ = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияБУПриИзменении(Элемент)
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачислятьАмортизациюБУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

// Закладка "Налоговый учет"

&НаКлиенте
Процедура ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении(Элемент)
	
	Объект.НачислятьАмортизациюНУ = Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение(
		"Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСписанияНИОКРНаРасходыНУПриИзменении(Элемент)
	
	Объект.НачислятьАмортизациюНУ = (Объект.ПорядокСписанияНИОКРНаРасходыНУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокСписанияНИОКРНУ.Равномерно"));
		
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриобретенияИППриИзменении(Элемент)
	
	Объект.ДатаПриобретения = ДатаПриобретенияИП;
	
КонецПроцедуры

&НаКлиенте
Процедура НачислятьАмортизациюНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияНУПриИзменении(Элемент)
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(ЭтаФорма);
	
КонецПроцедуры

// Закладка "Налоговый учет УСН"

&НаКлиенте
Процедура ДатаПриобретенияУСНПриИзменении(Элемент)
	
	Объект.ДатаПриобретения = ДатаПриобретенияУСН;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияУСНПриИзменении(Элемент)
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьСуммы(Команда)
	
	СтоимостьНМА = СтоимостьНМА(Объект.СчетУчетаВнеоборотногоАктива);
	
	Объект.СтоимостьБУ = СтоимостьНМА.СтоимостьБУ;
	Объект.СтоимостьНУ = СтоимостьНМА.СтоимостьНУ;
	Объект.СтоимостьПР = СтоимостьНМА.СтоимостьПР;
	Объект.СтоимостьВР = СтоимостьНМА.СтоимостьВР;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьСчетаУчета();
	КонецЕсли;
	
	ЗаполнитьСписокВыбораДляСпособаНачисленияАмортизацииБУ(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Зависимость видимости полей от ВидОбъектаУчета
	Если Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив") Тогда

		Элементы.НематериальныйАктив.Заголовок                    = "Нематериальный актив";
		Элементы.ГруппаПараметрыНачисленияАмортизации.Заголовок   = "Параметры начисления амортизации";
		Элементы.ГруппаПараметрыНачисленияАмортизацииНУ.Заголовок = "Параметры начисления амортизации";
		Элементы.СпособОтраженияРасходов.Заголовок                = "Способ отражения расходов по амортизации";
		Элементы.СпособНачисленияАмортизацииБУ.Заголовок          = "Способ начисления амортизации";
		Элементы.СрокПолезногоИспользованияБУ.Заголовок           = "Срок полезного использования (в месяцах)";
		Элементы.НачислятьАмортизациюБУ.Заголовок                 = "Начислять амортизацию";
		Элементы.СрокПолезногоИспользованияНУ.Заголовок           = "Срок полезного использования (в месяцах)";
		
		Элементы.СпособПоступления.Видимость                          = Истина;
		Элементы.СчетНачисленияАмортизации.Видимость                  = Истина;
		
		Элементы.ПорядокВключенияСтоимостиВСоставРасходовНУ.Видимость = Истина;
		Элементы.ПорядокСписанияНИОКРНаРасходыНУ.Видимость            = Ложь;
		Элементы.НачислятьАмортизациюНУ.Видимость                     = Истина;
		Элементы.СпециальныйКоэффициентНУ.Видимость                   = Истина;
		Элементы.СпециальныйКоэффициентНУ.Доступность = Объект.НачислятьАмортизациюНУ;
		
		НачислениеАмортизации = Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ 
			= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
		ВключениеВРасходыПриПринятииКУчету = Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ 
			= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету");
		
		Элементы.ГруппаПараметрыНачисленияАмортизацииНУ.Видимость        = НачислениеАмортизации;
		Элементы.СпособОтраженияРасходовПриВключенииВСтоимость.Видимость = ВключениеВРасходыПриПринятииКУчету;
		Элементы.СтатьяПрочихРасходов.Видимость                          = ВключениеВРасходыПриПринятииКУчету;
		
		Элементы.СпособОтраженияРасходов.Подсказка  = "";
		
	Иначе

		Элементы.НематериальныйАктив.Заголовок                    = "НИОКР";
		Элементы.ГруппаПараметрыНачисленияАмортизации.Заголовок   = "Параметры списания расходов";
		Элементы.ГруппаПараметрыНачисленияАмортизацииНУ.Заголовок = "Параметры списания расходов";
		Элементы.СпособОтраженияРасходов.Заголовок                = "Способ отражения расходов в учете";
		Элементы.СпособНачисленияАмортизацииБУ.Заголовок          = "Способ списания расходов";
		Элементы.СрокПолезногоИспользованияБУ.Заголовок           = "Срок списания (в месяцах)";
		Элементы.НачислятьАмортизациюБУ.Заголовок                 = "Списывать расходы";
		Элементы.СрокПолезногоИспользованияНУ.Заголовок           = "Срок списания (в месяцах)";

		Элементы.СпособПоступления.Видимость                          = Ложь;
		Элементы.СчетНачисленияАмортизации.Видимость                  = Ложь;

		Элементы.ПорядокВключенияСтоимостиВСоставРасходовНУ.Видимость = Ложь;
		Элементы.ПорядокСписанияНИОКРНаРасходыНУ.Видимость            = Истина;
		Элементы.НачислятьАмортизациюНУ.Видимость                     = Ложь;
		Элементы.СпециальныйКоэффициентНУ.Видимость                   = Ложь;

		Равномерно = Объект.ПорядокСписанияНИОКРНаРасходыНУ 
			= ПредопределенноеЗначение("Перечисление.ПорядокСписанияНИОКРНУ.Равномерно");
			
		Элементы.ГруппаПараметрыНачисленияАмортизацииНУ.Видимость        = Равномерно;
		Элементы.СпособОтраженияРасходовПриВключенииВСтоимость.Видимость = Ложь;
		Элементы.СтатьяПрочихРасходов.Видимость                          = Ложь;
		
		Если Форма.ПлательщикНалогаНаПрибыль Тогда
			Элементы.СпособОтраженияРасходов.Подсказка =
				НСтр("ru = 'Для расходов, включаемых в состав прочих расходов НУ с коэффициентом 1.5, в способе отражения расходов указывается статья затрат с видом ""НИОКР по перечню Правительства РФ"".
				|Для прочих расходов указывается статья затрат с видом ""НИОКР"".'");
		Иначе
			Элементы.СпособОтраженияРасходов.Подсказка  = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СпособНачисленияАмортизацииБУ.АвтоОтметкаНезаполненного = Объект.НачислятьАмортизациюБУ;
	Элементы.СпособНачисленияАмортизацииБУ.ОтметкаНезаполненного = Объект.НачислятьАмортизациюБУ 
		И НЕ ЗначениеЗаполнено(Объект.СпособНачисленияАмортизацииБУ);
	Элементы.СрокПолезногоИспользованияБУ.АвтоОтметкаНезаполненного = Объект.НачислятьАмортизациюБУ;
	Элементы.СрокПолезногоИспользованияБУ.ОтметкаНезаполненного = Объект.НачислятьАмортизациюБУ 
		И Объект.СрокПолезногоИспользованияБУ = 0;
	
	// Зависимость видимости полей от СпособНачисленияАмортизацииБУ
	Элементы.КоэффициентБУ.Видимость = Объект.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка");
	Элементы.ОбъемПродукцииРаботДляВычисленияАмортизации.Видимость = Объект.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции");
	
	Элементы.ОплатаНМА.Видимость                                   = НЕ (Объект.Дата < Дата("20060101"));
	Элементы.ПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость = НЕ (Объект.Дата < Дата("20060101"));
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(Форма);
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(Форма);
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(Форма);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчета()
	
	ВидОбъектаУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.НематериальныйАктив, "ВидОбъектаУчета");
	
	Если ВидОбъектаУчета <> Объект.ВидОбъектаУчета Тогда
		Объект.НематериальныйАктив = Неопределено;
	КонецЕсли;
	
	Если Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		Объект.СчетНачисленияАмортизации    = ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов;
		Объект.СчетУчета                    = ПланыСчетов.Хозрасчетный.НематериальныеАктивыОрганизации;
		Объект.СчетУчетаВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов;
		
	Иначе
		Объект.СчетНачисленияАмортизации    = Неопределено;
		Объект.СчетУчета                    = ПланыСчетов.Хозрасчетный.РасходыНаНИОКР;
		Объект.СчетУчетаВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтоимостьНМА(СчетУчета);
	
	СтруктураСтоимость = Новый Структура;
	СтруктураСтоимость.Вставить("СтоимостьБУ", 0);
	СтруктураСтоимость.Вставить("СтоимостьНУ", 0);
	СтруктураСтоимость.Вставить("СтоимостьПР", 0);
	СтруктураСтоимость.Вставить("СтоимостьВР", 0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НМА",             Объект.НематериальныйАктив);
	Запрос.УстановитьПараметр("Счет",            СчетУчета);
	Запрос.УстановитьПараметр("Дата",            Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ДатаКонецМесяца", Новый Граница(КонецМесяца(Объект.Дата), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",     Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение",   Объект.ПодразделениеОрганизации);
	Если Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	ИначеЕсли Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
		Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);
	КонецЕсли;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СтоимостьНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СтоимостьПР,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СтоимостьВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет = &Счет,
	|			&ВидСубконто,
	|			Субконто1 = &НМА
	|				И Организация = &Организация
	|				И (Подразделение = &Подразделение
	|					ИЛИ Подразделение ЕСТЬ NULL )) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаНУОборотДт,
	|	ХозрасчетныйОбороты.СуммаПРОборотДт,
	|	ХозрасчетныйОбороты.СуммаВРОборотДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&Дата,
	|			&ДатаКонецМесяца,
	|			,
	|			Счет = &Счет,
	|			&ВидСубконто,
	|			Субконто1 = &НМА
	|				И Организация = &Организация
	|				И (Подразделение = &Подразделение
	|					ИЛИ Подразделение ЕСТЬ NULL ),
	|			,
	|			) КАК ХозрасчетныйОбороты";
				   
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда

		СтруктураСтоимость.СтоимостьБУ = ТЗ.Итог("СтоимостьБУ");
		СтруктураСтоимость.СтоимостьНУ = ТЗ.Итог("СтоимостьНУ");
		СтруктураСтоимость.СтоимостьПР = ТЗ.Итог("СтоимостьПР");
		СтруктураСтоимость.СтоимостьВР = ТЗ.Итог("СтоимостьВР");

	КонецЕсли;

	Возврат СтруктураСтоимость;
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииСервер()

	УстановитьФункциональныеОпцииФормы();
   	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	ЗаполнитьСчетаУчета();
	
	ЗаполнитьСписокВыбораДляСпособаНачисленияАмортизацииБУ(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораДляСпособаНачисленияАмортизацииБУ(Форма)
	
	Форма.Элементы.СпособНачисленияАмортизацииБУ.СписокВыбора.Очистить();
	Форма.Элементы.СпособНачисленияАмортизацииБУ.СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный"));
	Форма.Элементы.СпособНачисленияАмортизацииБУ.СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции"));

	Если Форма.Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив") Тогда
		Форма.Элементы.СпособНачисленияАмортизацииБУ.СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(Форма)
	
	Форма.РасшифровкаСрокаПолезногоИспользованияБУ = 
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(
		Форма.Объект.СрокПолезногоИспользованияБУ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(Форма)
	
	Форма.РасшифровкаСрокаПолезногоИспользованияНУ = 
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(
		Форма.Объект.СрокПолезногоИспользованияНУ);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(Форма)
	
	Форма.РасшифровкаСрокаПолезногоИспользованияУСН = 
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(
		Форма.Объект.СрокПолезногоИспользованияУСН);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти