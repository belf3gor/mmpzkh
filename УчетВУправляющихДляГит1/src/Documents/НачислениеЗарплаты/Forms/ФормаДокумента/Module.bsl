#Область ОписаниеПеременных

&НаКлиенте
Перем СтрокиКРасчету Экспорт;

&НаКлиенте
Перем ЗакрытьПослеЗаписи;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Параметры.Свойство("МесяцНачисленияНовогоДокумента")
			И ЗначениеЗаполнено(Параметры.МесяцНачисленияНовогоДокумента) Тогда
			
			Объект.МесяцНачисления = НачалоМесяца(Параметры.МесяцНачисленияНовогоДокумента);
			
		КонецЕсли; 
		
		// Создается новый документ
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("ПредыдущийМесяц", "Объект.МесяцНачисления");
		ЗначенияДляЗаполнения.Вставить("Организация",     "Объект.Организация");
		ЗначенияДляЗаполнения.Вставить("Ответственный",   "Объект.Ответственный");
		ЗначенияДляЗаполнения.Вставить("Подразделение",   "Объект.Подразделение");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		Объект.Дата = КонецМесяца(Объект.МесяцНачисления);
		
		ПодготовитьФормуНаСервере();
		
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	РассчитыватьДокументыПриРедактировании = Константы.РассчитыватьДокументыПриРедактировании.Получить();
	Если РассчитыватьДокументыПриРедактировании Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПересчитать",
			"Видимость",
			Ложь);
			
	КонецЕсли;
	
	РасчетЗарплатыДляНебольшихОрганизаций.ПриСозданииФормыДокументаНачислениеЗарплаты(ЭтаФорма);
	
	ЗаполнитьКнопкиПодменю();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗакрытьПослеЗаписи = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ТипЗнч(Источник) = Тип("УправляемаяФорма") И Источник.ВладелецФормы = ЭтотОбъект Тогда
		Если ИмяСобытия = "ИзмененыРезультатыРасчетаНДФЛ" Тогда
			ОбновитьДанныеНДФЛНаСервере(Параметр);
		ИначеЕсли ИмяСобытия = "ИзмененыРезультатыРасчетаВзносы" Тогда
			ОбновитьДанныеВзносовНаСервере(Параметр);
		ИначеЕсли ИмяСобытия = "ИзмененыРезультатыРачетаУдержания" Тогда
			ОбновитьДанныеУдержанийНаСервере(Параметр);
		ИначеЕсли ИмяСобытия = "ИзмененыРезультатыРачетаНачисления" Тогда
			ОбновитьДанныеНачисленийНаСервере(Параметр);
		ИначеЕсли ИмяСобытия = "ДобавленоНачисление" Тогда
			ДобавитьНачислениеНаСервере(Параметр);
		ИначеЕсли ИмяСобытия = "ДобавленоУдержание" Тогда
			ДобавитьУдержаниеНаСервере(Параметр);
		КонецЕсли;
	КонецЕсли;
	Если ИмяСобытия = "Запись_Отпуск" ИЛИ ИмяСобытия = "Запись_БольничныйЛист" Тогда
		ОбработатьЗаписьОтклоненийНаСервере(Источник, Параметр);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ДополнитьТаблицуНачисления();
	РасчетЗарплатыДляНебольшихОрганизаций.ПриПолученииДанных(ЭтаФорма);
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если РассчитыватьДокументыПриРедактировании Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокиКРасчету.Количество() > 0 Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюОкончание", ЭтотОбъект, ПараметрыЗаписи);
		
		ТекстВопроса = НСтр("ru='Перед записью документа необходимо рассчитать НДФЛ и взносы.
			|Продолжить?'");
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	Иначе
		
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ОценкаПроизводительностиКлиент.ЗамерВремени("ПроведениеДокументаНачислениеЗарплаты");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РасчетЗарплатыДляНебольшихОрганизаций.ПриПолученииДанных(ЭтаФорма);
	
	ДополнитьТаблицуНачисления();
	ЗаполнитьВторичныеДанныеТабличныхЧастей();
	РассчитатьИтогиПоДокументу();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_НачислениеЗарплаты", ПараметрыЗаписи, Объект.Ссылка);
	
	Если ЗакрытьПослеЗаписи Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.Дата <> ДатаПредыдущая
		И НачалоМесяца(Объект.Дата) <> НачалоМесяца(Объект.МесяцНачисления) Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Укажите дату в интервале с %1 по %2'"),
			Формат(НачалоМесяца(Объект.МесяцНачисления), "ДЛФ=D"),
			Формат(КонецМесяца(Объект.МесяцНачисления), "ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Дата", "Объект", Отказ);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизацииНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Объект.МесяцНачисления), КонецМесяца(Объект.МесяцНачисления));
	ОписаниеОповещения     = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбораПериода, Элементы.МесяцНачисленияСтрокой, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.МесяцНачисления= РезультатВыбора.НачалоПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры
	
&НаСервере
Процедура ДобавитьСотрудников(Знач СписокСотрудников)
	
	СотрудникиКДобавлению = Новый Массив;
	Для каждого ДобавляемыйСотрудник Из СписокСотрудников Цикл
		
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ДобавляемыйСотрудник)).Количество() = 0 Тогда
			СотрудникиКДобавлению.Добавить(ДобавляемыйСотрудник);
		КонецЕсли; 
		
	КонецЦикла;
	
	Модифицированность = СотрудникиКДобавлению.Количество() > 0;
	
	ДанныеСотрудников = ДанныеСотрудников(СотрудникиКДобавлению);
	Если ДанныеСотрудников <> Неопределено Тогда
		
		Для каждого ДобавляемыйСотрудник Из СотрудникиКДобавлению Цикл
			
			СтрокаСотрудники = Объект.Сотрудники.Добавить();
			СтрокаСотрудники.Сотрудник = ДобавляемыйСотрудник;
			СтрокаДанных = ДанныеСотрудников.Найти(ДобавляемыйСотрудник, "Сотрудник");
			Если СтрокаДанных <> Неопределено Тогда
				СтрокаСотрудники.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
				СтрокаСотрудники.ОтпускаБольничные = СтрокаДанных.Сумма;
			Иначе
				СтрокаСотрудники.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемыйСотрудник, "ФизическоеЛицо");
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатНачисления = РасчетЗарплаты.РезультатНачисленияРасчетаЗарплаты(
		Объект.Организация,
		Объект.МесяцНачисления,
		Объект.Ссылка,
		Объект.Подразделение,
		СотрудникиКДобавлению);
		
	Если РезультатНачисления.Количество() > 0 Тогда
		
		РезультатНачисления.Колонки.Добавить("ОтработаноДней");
		РезультатНачисления.Колонки.Добавить("ОтработаноЧасов");
		
		РасчетЗарплатыБазовый.ЗаполнитьОтработанноеВремя(РезультатНачисления, Объект.МесяцНачисления, Объект.Организация);
		
		РасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьРезультатНачисления(Объект, РезультатНачисления);
	
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатНачисления, Объект.Начисления);
		
		ОбновляемыеСотрудники = Новый ФиксированныйМассив(СотрудникиКДобавлению);
		
		ОбновитьНДФЛиВзносыСотрудников(СотрудникиКДобавлению);
		
		РасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьРезультатУдержаний(Объект, РезультатНачисления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеСотрудников(СписокСотрудников)
	
	Возврат 
		РасчетЗарплатыДляНебольшихОрганизаций.СведенияНачисленийПоОтсутствиям(
			СписокСотрудников, 
			Объект.МесяцНачисления, 
			Объект.Организация, 
			Объект.Подразделение, 
			Объект.Ссылка);;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Выплатить(Команда)
	
	Если НЕ Объект.ПометкаУдаления И НЕ Объект.Проведен ИЛИ Модифицированность Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Вставить(0, КодВозвратаДиалога.Да,     "Провести");
		Кнопки.Вставить(1, КодВозвратаДиалога.Отмена, "Отмена");
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередВыплатойСледуетПровестиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед выплатой документ следует провести'"), Кнопки,, КодВозвратаДиалога.Да);
	Иначе
		СформироватьДокументыВыплаты();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуНачисления()
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем количество дней по календарю.
	ПроизводственныйКалендарьРФ = РасчетЗарплатыДляНебольшихОрганизацийПовтИсп.ПроизводственныйКалендарьОрганизации(Объект.Организация);
	
	Если ПроизводственныйКалендарьРФ <> Неопределено Тогда
		
		// Если производственный календарь определить не удалось - оставляем число дней нулевым.
		РабочихДнейЧасов = РасчетЗарплатыБазовый.РабочихДнейЧасовВПериоде(ПроизводственныйКалендарьРФ, НачалоМесяца(Объект.МесяцНачисления), КонецМесяца(Объект.МесяцНачисления));
		
		КоличествоДней = РабочихДнейЧасов.Дней;
		КоличествоЧасов = РабочихДнейЧасов.Часов;
		
	КонецЕсли;
	
	// Формируем массив сотрудников.
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник", Истина);
	
	// Получаем кадровые данные
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц, Истина, Сотрудники, "ГоловнаяОрганизация,Организация,Подразделение,ПроцентСевернойНадбавки", Объект.МесяцНачисления);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТКадровыеДанныеСотрудников.Сотрудник,
	|	ВЫБОР
	|		КОГДА ПодразделенияОрганизаций.РайонныйКоэффициент > 1
	|			ТОГДА ПодразделенияОрганизаций.РайонныйКоэффициент
	|		КОГДА Организации.РайонныйКоэффициент > 1
	|			ТОГДА Организации.РайонныйКоэффициент
	|		КОГДА ГоловныеОрганизации.РайонныйКоэффициент > 1
	|			ТОГДА ГоловныеОрганизации.РайонныйКоэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РайонныйКоэффициент,
	|	ВТКадровыеДанныеСотрудников.ПроцентСевернойНадбавки
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО ВТКадровыеДанныеСотрудников.Подразделение = ПодразделенияОрганизаций.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ГоловныеОрганизации
	|		ПО ВТКадровыеДанныеСотрудников.ГоловнаяОрганизация = ГоловныеОрганизации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ВТКадровыеДанныеСотрудников.Организация = Организации.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ДанныеСотрудников = Запрос.Выполнить().Выгрузить();
	
	Начисления = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Начисление", Истина);
	ДанныеНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Начисления, "КатегорияНачисленияИлиНеоплаченногоВремени,ВходитВБазуРКИСН");
	
	Для Каждого СтрокаНачисления Из Объект.Начисления Цикл
		
		Если ЗначениеЗаполнено(СтрокаНачисления.Начисление) Тогда
			
			ДанныеНачисления = ДанныеНачислений[СтрокаНачисления.Начисление];
			
			КатегорияНачисления = ДанныеНачисления.КатегорияНачисленияИлиНеоплаченногоВремени;
			Если КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда
				Или КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прочее
						И ДанныеНачисления.ВходитВБазуРКИСН Тогда
				
				СтрокаНачисления.ВходитВБазуРКиСН = Истина;
				СтрокаНачисления.РабочихДней = КоличествоДней;
				СтрокаНачисления.РабочихЧасов = КоличествоЧасов;
				
			КонецЕсли;
			
			ДанныеСотрудника = ДанныеСотрудников.Найти(СтрокаНачисления.Сотрудник, "Сотрудник");
			Если ДанныеСотрудника = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			Если КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент Тогда
				СтрокаНачисления.КоэффициентПересчета = ДанныеСотрудника.РайонныйКоэффициент - 1;
			КонецЕсли; 
			
			Если КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка Тогда
				СтрокаНачисления.КоэффициентПересчета = ДанныеСотрудника.ПроцентСевернойНадбавки / 100;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПроцедурыИФункцииРедактированияПроцентаЕнвдВФормеДокумента

&НаКлиенте
Процедура ЗарегистрироватьПроцентЕНВД() Экспорт

	ЗарегистрироватьПроцентЕНВДНаСервере(Объект.Организация, Объект.МесяцНачисления, ЭтотОбъект.ПроцентЕНВД, ЭтотОбъект.ПроцентЕНВДСтрока);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьПроцентЕНВДНаСервере(Организация, Месяц, ПроцентЕНВД, ПроцентЕНВДСтрока)
	
	ОтражениеЗарплатыВБухучете.ЗарегистрироватьПроцентЕНВДПослеРедактированияВФорме(Организация, Месяц, ПроцентЕНВД, ПроцентЕНВДСтрока);
	
КонецПроцедуры

&НаСервере
Функция ТекстПредупрежденияПриРедактированииПроцентаЕНВД() Экспорт

	ОрганизацияНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "Наименование");
	МесяцНачисленияСтрокой  = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Объект.МесяцНачисления);
	
	ТекстПредупреждения = 
		НСтр("ru = 'При изменении введенного ранее процента деятельности ЕНВД будут перерассчитаны взносы текущего документа,
		|также необходимо перезаполнить все документы начисления зарплаты за'")
			+ " " + МесяцНачисленияСтрокой + " " + НСтр("ru='г'") + " "
			+ НСтр("ru='по'")+ " """ + ОрганизацияНаименование + """";
					
	Возврат ТекстПредупреждения;

КонецФункции

&НаСервере
Процедура ПроцентЕНВДСтрокаПриИзмененииНаСервере()
	
	УправлениеДолейЕНВД();
	Если РассчитыватьДокументыПриРедактировании Тогда
		ЗаполнитьНДФЛиВзносы(Истина);
	КонецЕсли; 
	ПослеЗаполненияНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеПроцентаЕНВДЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если РассчитыватьДокументыПриРедактировании Тогда
		ПроцентЕНВДСтрокаПриИзмененииНаСервере();
		ЗаполнитьНДФЛиВзносыНаКлиенте(Истина);
	Иначе
		СтрокиКРасчету.Вставить("Взносы", Новый Массив);
		СтрокиКРасчету.Вставить("НДФЛ",   Новый Массив);
		УстановитьОтображениеКнопкиПересчитать();
		УправлениеДолейЕНВД();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СотрудникиПрочееУдержано");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СотрудникиФиксРасчет_НДФЛ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СотрудникиНДФЛ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СотрудникиФиксРасчет_Взносы");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СотрудникиВзносы");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Сотрудники.Совместитель", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = 0;
	ЗарплатаКадрыПереопределяемый.СостояниеДокумента(Объект, СостояниеДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СотрудникиСотрудник" Тогда
		
		ПоказатьЗначение(, Элементы.Сотрудники.ТекущиеДанные.Сотрудник);
		
	ИначеЕсли Поле.Имя = "СотрудникиВсегоНачислено" Тогда
		
		ПерейтиКНачислениям();
		
	ИначеЕсли Поле.Имя = "СотрудникиНДФЛ" Тогда
		
		ПерейтиКНДФЛ();
		
	ИначеЕсли Поле.Имя = "СотрудникиПрочееУдержано" Тогда
		
		ПерейтиКУдержаниям();
		
	ИначеЕсли Поле.Имя = "СотрудникиВзносы" Тогда
		
		ПерейтиКВзносам();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ПодобратьСотрудников(Ложь)
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда
		ДобавляемыеСотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение);
	Иначе
		ДобавляемыеСотрудники = ВыбранноеЗначение;
	КонецЕсли;
	
	ДобавитьСотрудников(ДобавляемыеСотрудники);
	ЗаполнитьНДФЛиВзносыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	СформироватьСписокОбновляемыхРаботников(Элемент.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)
	СотрудникиПослеУдаленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура СотрудникиПослеУдаленияНаСервере()
	
	Если ОбновляемыеСотрудники <> Неопределено И ОбновляемыеСотрудники.Количество() > 0 Тогда
		
		Для каждого ОбновляемыйСотрудник Из ОбновляемыеСотрудники Цикл
			
			СтрокиНачислений = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник", ОбновляемыйСотрудник));
			Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
				Объект.Начисления.Удалить(СтрокаНачисления);
			КонецЦикла;
		
		КонецЦикла;
		
		ОбновляемыеСотрудники = Неопределено;
		
	КонецЕсли; 
	
	Если ОбновляемыеФизическиеЛица <> Неопределено И ОбновляемыеФизическиеЛица.Количество() > 0 Тогда
		
		Для каждого ОбновляемоеФизическоеЛицо Из ОбновляемыеФизическиеЛица Цикл
		
			СтрокиФизическогоЛица = Объект.Сотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо", ОбновляемоеФизическоеЛицо));
			Если СтрокиФизическогоЛица.Количество() = 0 Тогда
				
				УдаляемыеСтроки = Объект.Удержания.НайтиСтроки(Новый Структура("Сотрудник", ОбновляемоеФизическоеЛицо));
				Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
					Объект.Удержания.Удалить(УдаляемаяСтрока);
				КонецЦикла;
				
				УдаляемыеСтроки = Объект.НДФЛ.НайтиСтроки(Новый Структура("ФизическоеЛицо", ОбновляемоеФизическоеЛицо));
				Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
					
					ИдентификаторСтрокиНДФЛ = УдаляемаяСтрока.ИдентификаторСтрокиНДФЛ;
					Объект.НДФЛ.Удалить(УдаляемаяСтрока);
					
					УдаляемыеСтрокиВычетов = Объект.ПримененныеВычетыНаДетейИИмущественные.НайтиСтроки(Новый Структура("ИдентификаторСтрокиНДФЛ", ИдентификаторСтрокиНДФЛ));
					Для каждого УдаляемаяСтрокаВычетов Из УдаляемыеСтрокиВычетов Цикл
						Объект.ПримененныеВычетыНаДетейИИмущественные.Удалить(УдаляемаяСтрокаВычетов);
					КонецЦикла;
					
				КонецЦикла;
				
				УдаляемыеСтроки = Объект.Взносы.НайтиСтроки(Новый Структура("ФизическоеЛицо", ОбновляемоеФизическоеЛицо));
				Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
					Объект.Взносы.Удалить(УдаляемаяСтрока);
				КонецЦикла;
				
				УдаляемыеСтроки = Объект.КорректировкиВыплаты.НайтиСтроки(Новый Структура("ФизическоеЛицо", ОбновляемоеФизическоеЛицо));
				Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
					Объект.КорректировкиВыплаты.Удалить(УдаляемаяСтрока);
				КонецЦикла;
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ОбновляемыеФизическиеЛица = Неопределено;
		
	КонецЕсли;
	
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элементы.Сотрудники.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		ОтработаноДней  = ДанныеСтроки.ОтработаноДней;
		ОтработаноЧасов = ДанныеСтроки.ОтработаноЧасов;
	Иначе
		ОтработаноДней  = 0;
		ОтработаноЧасов = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОтработаноДнейПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Сотрудники.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		Если ОтработаноДней <> ДанныеСтроки.ОтработаноДней Тогда
			СформироватьСписокОбновляемыхРаботников(Элементы.Сотрудники.ВыделенныеСтроки);
			ПересчитатьОкладНаСервере(ДанныеСтроки.Сотрудник, ДанныеСтроки.ОтработаноДней, ДанныеСтроки.ОтработаноЧасов, Истина);
			ДополнитьСтрокиКРасчету(ДанныеСтроки.Сотрудник, "Сотрудники");
			УстановитьОтображениеКнопкиПересчитать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОтработаноЧасовПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Сотрудники.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		Если ОтработаноЧасов <> ДанныеСтроки.ОтработаноЧасов Тогда
			СформироватьСписокОбновляемыхРаботников(Элементы.Сотрудники.ВыделенныеСтроки);
			ПересчитатьОкладНаСервере(ДанныеСтроки.Сотрудник, ДанныеСтроки.ОтработаноДней, ДанныеСтроки.ОтработаноЧасов, Ложь);
			ДополнитьСтрокиКРасчету(ДанныеСтроки.Сотрудник, "Сотрудники");
			УстановитьОтображениеКнопкиПересчитать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДекорацияДоляЕНВДНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.МесяцНачисления) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеПроцентаЕНВДЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура(
		"ЗначенияКлючаЗаписи", Новый Структура(
				"Организация, Месяц", Объект.Организация, Объект.МесяцНачисления));
	
	ОткрытьФорму("РегистрСведений.ПроцентЕНВДДляУчетаЗатратНаЗарплату.Форма.ФормаЗаписи", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область Заполнение

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не ЗарплатаКадрыКлиент.ОрганизацияЗаполнена(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	ВопросЗаполнитьДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПодобратьСотрудников(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНачисление(Команда)

	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудник      = ТекущиеДанные.Сотрудник;
	ФизическоеЛицо = ТекущиеДанные.ФизическоеЛицо;
	
	ПоказатьВсе = Ложь;
	Если СтрНайти(Команда.Имя,"ДобавитьНачисление") = 0 Тогда
		ПоказатьВсе = Истина;
		Начисление  = ПредопределенноеЗначение("ПланВидовРасчета.Начисления.ПустаяСсылка");
	Иначе
		СуффиксКоманды = СтрЗаменить(Команда.Имя,"ДобавитьНачисление","");
		
		Если ЗначениеЗаполнено(СуффиксКоманды) Тогда
			НомерКоманды = Число(СуффиксКоманды);
			Начисление = СоответствиеКомандНачислений.НайтиПоИдентификатору(НомерКоманды-1).Значение;
		Иначе
			Начисление = ПредопределенноеЗначение("ПланВидовРасчета.Начисления.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Подразделение = Объект.Подразделение;
	Иначе
		Подразделение = ПодразделениеСотрудника(Сотрудник, Объект.МесяцНачисления);
	КонецЕсли;
	
	ПараметрыВвода = Новый Структура;
	ПараметрыВвода.Вставить("Ссылка",          Объект.Ссылка);
	ПараметрыВвода.Вставить("Организация",     Объект.Организация);
	ПараметрыВвода.Вставить("Подразделение",   Подразделение);
	ПараметрыВвода.Вставить("МесяцНачисления", Объект.МесяцНачисления);
	ПараметрыВвода.Вставить("Сотрудник",       Сотрудник);
	ПараметрыВвода.Вставить("ФизическоеЛицо",  ФизическоеЛицо);
	ПараметрыВвода.Вставить("Начисление",      Начисление);
	
	Если ПоказатьВсе Тогда
		ПоказатьВсеНачисления(ПараметрыВвода);
	Иначе
		ОткрытьФормуВводаНачисления(ПараметрыВвода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУдержание(Команда)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудник      = ТекущиеДанные.Сотрудник;
	ФизическоеЛицо = ТекущиеДанные.ФизическоеЛицо;
	
	ПоказатьВсе = Ложь;
	Если СтрНайти(Команда.Имя,"ДобавитьУдержание") = 0 Тогда
		ПоказатьВсе = Истина;
		Удержание   = ПредопределенноеЗначение("ПланВидовРасчета.Удержания.ПустаяСсылка");
	Иначе
		СуффиксКоманды = СтрЗаменить(Команда.Имя,"ДобавитьУдержание","");
		
		Если ЗначениеЗаполнено(СуффиксКоманды) Тогда
			НомерКоманды = Число(СуффиксКоманды);
			Удержание = СоответствиеКомандУдержаний.НайтиПоИдентификатору(НомерКоманды-1).Значение;
		Иначе
			Удержание  = ПредопределенноеЗначение("ПланВидовРасчета.Удержания.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВвода = Новый Структура();
	ПараметрыВвода.Вставить("Ссылка",          Объект.Ссылка);
	ПараметрыВвода.Вставить("Организация",     Объект.Организация);
	ПараметрыВвода.Вставить("МесяцНачисления", Объект.МесяцНачисления);
	ПараметрыВвода.Вставить("Сотрудник",       Сотрудник);
	ПараметрыВвода.Вставить("ФизическоеЛицо",  ФизическоеЛицо);
	ПараметрыВвода.Вставить("Удержание",       Удержание);
	
	Если ПоказатьВсе Тогда
		ПоказатьВсеУдержания(ПараметрыВвода);
	Иначе
		ОткрытьФормуВводаУдержания(ПараметрыВвода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокумент(Команда)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтпуск(Команда)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудник      = ТекущиеДанные.Сотрудник;
	ФизическоеЛицо = ТекущиеДанные.ФизическоеЛицо;
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("Организация",       Объект.Организация);
	ЗначенияЗаполнения.Вставить("ПериодРегистрации", Объект.МесяцНачисления);
	ЗначенияЗаполнения.Вставить("Сотрудник",         Сотрудник);
	ЗначенияЗаполнения.Вставить("ФизическоеЛицо",    ФизическоеЛицо);
	
	ОткрытьФорму("Документ.Отпуск.Форма.ФормаДокумента", 
		Новый Структура("Дата, ЗначенияЗаполнения", КонецМесяца(Объект.МесяцНачисления), ЗначенияЗаполнения),
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБольничный(Команда)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудник      = ТекущиеДанные.Сотрудник;
	ФизическоеЛицо = ТекущиеДанные.ФизическоеЛицо;
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("Организация",       Объект.Организация);
	ЗначенияЗаполнения.Вставить("ПериодРегистрации", Объект.МесяцНачисления);
	ЗначенияЗаполнения.Вставить("Сотрудник",         Сотрудник);
	ЗначенияЗаполнения.Вставить("ФизическоеЛицо",    ФизическоеЛицо);
	
	ОткрытьФорму("Документ.БольничныйЛист.Форма.ФормаДокумента", 
		Новый Структура("Дата, ЗначенияЗаполнения", КонецМесяца(Объект.МесяцНачисления), ЗначенияЗаполнения),
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

&НаКлиенте
Процедура РегистрыНалоговогоУчетаПоНДФЛ(Команда)
	
	РегистрНалоговогоУчетаПоНДФЛ = НДФЛПодробнееНаСервере();
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.РегистрНалоговогоУчетаПоНДФЛ", "РегистрНалоговогоУчетаПоНДФЛ", 
			РегистрНалоговогоУчетаПоНДФЛ, ЭтотОбъект);
			
КонецПроцедуры

&НаКлиенте
Процедура КарточкиУчетаПоСтраховымВзносам(Команда)
	
	КарточкаУчетаПоСтраховымВзносам = КарточкаУчетаПоСтраховымВзносамНаСервере();
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.КарточкаУчетаПоСтраховымВзносам", "КарточкаУчетаПоСтраховымВзносамПодробнее", 
			КарточкаУчетаПоСтраховымВзносам, ЭтотОбъект);
			
КонецПроцедуры

&НаКлиенте
Процедура РасчетныеЛистки(Команда)
	
	ВывестиРасчетныйЛисток("Сотрудники");
	
КонецПроцедуры

&НаКлиенте
Процедура АнализЗарплаты(Команда)
	
	АнализЗарплатыПодробнее = АнализЗарплатыНаСервере();
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.АнализНачисленийИУдержаний", "АнализЗарплатыПоПодразделениямИСотрудникамЗаПериод", 
			АнализЗарплатыПодробнее, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СводНачисленийИУдержаний(Команда)
	
	СводНачисленийИУдержанийПодробнее = СводНачисленийИУдержанийНаСервере();
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.АнализНачисленийИУдержаний", "ПолныйСводНачисленийУдержанийИВыплат", 
			СводНачисленийИУдержанийПодробнее, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиИВзносы(Команда)
	
	НалогиИВзносыПодробнее = НалогиИВзносыНаСервере();
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.НалогиИВзносыКратко", "НалогиИВзносыПодробнее", 
			НалогиИВзносыПодробнее, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция НДФЛПодробнееНаСервере(ФизическоеЛицо = Неопределено) Экспорт
	
	Если ФизическоеЛицо = Неопределено Тогда
		ФизическиеЛица = Новый Массив;
		Для каждого СтрокаТаблицы Из Объект.НДФЛ Цикл
			ФизическиеЛица.Добавить(СтрокаТаблицы.ФизическоеЛицо);
		КонецЦикла;
	Иначе
		ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	НДФЛПодробнее = Новый Массив;
	НДФЛПодробнее.Добавить(ДокументОбъект.Ссылка);
	НДФЛПодробнее.Добавить(УчетНДФЛФормы.РегистрНалоговогоУчетаПоНДФЛ(ДокументОбъект, Модифицированность, ФизическиеЛица, Объект.МесяцНачисления));
	
	Возврат НДФЛПодробнее;
	
КонецФункции

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ВспомогательныеОбработчикиСобытий

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	ЗаполнитьВторичныеДанныеТабличныхЧастей();
	УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	УправлениеДолейЕНВД();
	РассчитатьИтогиПоДокументу();
	УстановитьВидимостьКолонок();
	
	ДатаПредыдущая = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПересчитатьДокументНаКлиенте();
		Записать(Параметры);
		
	Иначе
		ЗакрытьПослеЗаписи = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаполненияНаСервере(ОбновитьВторичныеДанныеТабличнойЧастиНФЛ = Истина)
	
	Если ОбновитьВторичныеДанныеТабличнойЧастиНФЛ Тогда
		ЗаполнитьВторичныеДанныеТабличныхЧастей();
	КонецЕсли;
	УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	РассчитатьИтогиПоДокументу();
	УстановитьВидимостьКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокумент()
	
	ЕстьДанные = Объект.ФизическиеЛица.Количество() > 0
		ИЛИ Объект.Начисления.Количество() > 0
		ИЛИ Объект.Удержания.Количество() > 0
		ИЛИ Объект.НДФЛ.Количество() > 0
		ИЛИ Объект.Взносы.Количество() > 0
		ИЛИ Объект.КорректировкиВыплаты.Количество() > 0;
		
	Если ЕстьДанные Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличные части будут очищены. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОценкаПроизводительностиКлиент.ЗамерВремени("ЗаполнениеДокументаНачислениеЗарплаты");
		ОчиститьСообщения();
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументЗавершение(Результат, ИмяТабЧасти) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ЗаполнениеДокументаНачислениеЗарплаты");
		ОчиститьСообщения();
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ПодготовитьДокументКЗаполнениюНаСервере();
	РасчетЗарплаты.ЗаполнитьДокументНачисленияЗарплаты(Объект);
	ПослеЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДокументКЗаполнениюНаСервере()

	Объект.Начисления.Очистить();
	Объект.Удержания.Очистить();
	Объект.НДФЛ.Очистить();
	Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	Объект.Взносы.Очистить();
	Объект.ФизическиеЛица.Очистить();
	Объект.Сотрудники.Очистить();
	Объект.КорректировкиВыплаты.Очистить();
	
	Объект.КорректироватьНДФЛ = Ложь;
	Объект.КорректироватьВзносы = Ложь;

КонецПроцедуры

&НаСервере
Процедура ДозаполнитьНаСервере()
	
	СотрудникиДокумента = Объект.Начисления.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Объект.Организация;
	ПараметрыПолученияСотрудников.Подразделение = Объект.Подразделение;
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоМесяца(Объект.МесяцНачисления);
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецМесяца(Объект.МесяцНачисления);
	ПараметрыПолученияСотрудников.КадровыеДанные = "ГоловнаяОрганизация,Организация,Подразделение,ТарифнаяСтавка,ПроцентСевернойНадбавки";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.УстановитьПараметр("СотрудникиДокумента", СотрудникиДокумента);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиДокумента
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&СотрудникиДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиДокумента.Сотрудник
		|ИЗ
		|	ВТСотрудникиДокумента КАК СотрудникиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|		ПО СотрудникиДокумента.Сотрудник = СотрудникиОрганизации.Сотрудник
		|ГДЕ
		|	СотрудникиОрганизации.Сотрудник ЕСТЬ NULL";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Сотрудник", Выборка.Сотрудник);
			
			СтрокиСотрудника = Объект.Начисления.НайтиСтроки(СтруктураПоиска);
			Для каждого УдаляемаяСтрока Из СтрокиСотрудника Цикл
				Объект.Начисления.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизации.Сотрудник
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиДокумента КАК СотрудникиДокумента
		|		ПО СотрудникиОрганизации.Сотрудник = СотрудникиДокумента.Сотрудник
		|ГДЕ
		|	СотрудникиДокумента.Сотрудник ЕСТЬ NULL";
		
	СписокСотрудников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	ДобавитьСотрудников(СписокСотрудников);
	ПослеЗаполненияНаСервере(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизацииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеДолейЕНВД();
	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()

	ОбработатьИзменениеМесяцНачисленияНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	Объект.Дата = НачалоДня(КонецМесяца(Объект.МесяцНачисления));
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеДолейЕНВД();
	
	УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтотОбъект, Объект.МесяцНачисления);
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОчиститьТабличныеЧасти();
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Если ЕстьЗаполненныеТабличныеЧасти() Тогда
			ЗаполнитьНаСервере();
		КонецЕсли; 
	
	Иначе
		
		ДозаполнитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеОбработчикиКоманд

&НаКлиенте
Процедура ПоказатьВсеНачисленияОкончание(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Параметры.Вставить("Начисление", Результат);
		
		ОткрытьФормуВводаНачисления(Параметры);
			
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеНачисления(ПараметрыВвода)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВсеНачисленияОкончание", ЭтотОбъект, ПараметрыВвода);
	
	Категории = Новый Массив;
	Категории.Добавить(ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прочее"));
	Категории.Добавить(ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда"));
	
	ПараметрыОтбора = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", Категории);

	ОткрытьФорму("ПланВидовРасчета.Начисления.ФормаВыбора",
		Новый Структура("Отбор", ПараметрыОтбора),
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаНачисления(Параметры)
	
	АдресПараметровВХранилище = ПоместитьВоВременноеХранилище(Параметры, УникальныйИдентификатор);

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилище);
	
	ОткрытьФорму("Документ.НачислениеЗарплаты.Форма.ФормаДобавитьНачисление", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеУдержанияОкончание(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Параметры.Вставить("Удержание", Результат);
		
		ОткрытьФормуВводаУдержания(Параметры);
			
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеУдержания(ПараметрыВвода)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВсеУдержанияОкончание", ЭтотОбъект, ПараметрыВвода);
	
	ОткрытьФорму("ПланВидовРасчета.Удержания.ФормаВыбора",
		,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаУдержания(Параметры)
	
	АдресПараметровВХранилище = ПоместитьВоВременноеХранилище(Параметры, УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилище);
	
	ОткрытьФорму("Документ.НачислениеЗарплаты.Форма.ФормаДобавитьУдержание", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

#КонецОбласти


#Область УправлениеФормой

&НаСервере
Процедура УстановитьВидимостьКолонок()
	
	Элементы.СотрудникиПрочееУдержано.Видимость = ИтогУдержано <> 0;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКнопкиПодменю()
	
	// Начисления
	
	КатегорииНачислений = Новый Массив;
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прочее);
	
	Если НЕ ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		
		КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
		КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
		КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
		КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
		КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
		КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
		
		Элементы.СотрудникиДобавитьОтпуск.Видимость     = Ложь;
		Элементы.СотрудникиДобавитьБольничный.Видимость = Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка,
	|	Начисления.Наименование КАК Наименование
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииНачислений)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("КатегорииНачислений", КатегорииНачислений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерКонтейнера = 1;
	Пока Выборка.Следующий() Цикл
		
		ТипИсточника = ТипЗнч(Элементы.ДобавитьНачисление);
		Приемник = Элементы.Вставить(Элементы.ДобавитьНачисление.Имя + НомерКонтейнера, ТипИсточника, Элементы.ГруппаКнопокНачислить, Элементы.ДобавитьНачисление);
		ИмяКоманды = Элементы.ДобавитьНачисление.ИмяКоманды + НомерКонтейнера;
		Если Команды.Найти(ИмяКоманды) = Неопределено Тогда
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
			ЗаполнитьЗначенияСвойств(НоваяКоманда, Команды[Элементы.ДобавитьНачисление.ИмяКоманды]);
		КонецЕсли;
		Приемник.ИмяКоманды = ИмяКоманды;
		ЗаполнитьЗначенияСвойств(Приемник, Элементы.ДобавитьНачисление, , "Имя, ИмяКоманды");
		Приемник.Заголовок = Выборка.Наименование;
		
		СоответствиеКомандНачислений.Добавить(Выборка.Ссылка);
		
		НомерКонтейнера = НомерКонтейнера + 1;
		Если НомерКонтейнера = 14 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Все начисления
	Элементы.СотрудникиГруппаКнопокНачисления.Видимость = НомерКонтейнера = 14;
	
	// Удержания
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.Ссылка КАК Ссылка,
	|	Удержания.Наименование КАК Наименование
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерКонтейнера = 1;
	Пока Выборка.Следующий() Цикл
		
		ТипИсточника = ТипЗнч(Элементы.ДобавитьУдержание);
		Приемник = Элементы.Вставить(Элементы.ДобавитьУдержание.Имя + НомерКонтейнера, ТипИсточника, Элементы.ГруппаКнопокУдержать, Элементы.ДобавитьУдержание);
		ИмяКоманды = Элементы.ДобавитьУдержание.ИмяКоманды + НомерКонтейнера;
		Если Команды.Найти(ИмяКоманды) = Неопределено Тогда
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
			ЗаполнитьЗначенияСвойств(НоваяКоманда, Команды[Элементы.ДобавитьУдержание.ИмяКоманды]);
		КонецЕсли;
		Приемник.ИмяКоманды = ИмяКоманды;
		ЗаполнитьЗначенияСвойств(Приемник, Элементы.ДобавитьУдержание, , "Имя, ИмяКоманды");
		Приемник.Заголовок = Выборка.Наименование;
		
		СоответствиеКомандУдержаний.Добавить(Выборка.Ссылка);
		
		НомерКонтейнера = НомерКонтейнера + 1;
		Если НомерКонтейнера = 14 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Все удержания
	Элементы.СотрудникиГруппаКнопокУдержания.Видимость = НомерКонтейнера = 14;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("Организация", Объект.Организация);
	ПараметрыФО.Вставить("Период", НачалоДня(Объект.МесяцНачисления));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
	ОрганизацияПлательщикЕНВДЗарплатаКадры = ПолучитьФункциональнуюОпциюФормы("ПлательщикЕНВДЗарплатаКадры");
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДолейЕНВД()
	
	Элементы.ГруппаДоляЕНВД.Видимость = ОрганизацияПлательщикЕНВДЗарплатаКадры
		И НЕ ЗарплатаКадрыПереопределяемый.ПлательщикТолькоЕНВД(Объект.Организация, Объект.МесяцНачисления);
		
	Если НЕ Элементы.ГруппаДоляЕНВД.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ПроцентЕНВД = ОтражениеЗарплатыВБухучете.ПроцентЕНВД(Объект.Организация, Объект.МесяцНачисления);
	
	Элементы.ДекорацияДоляЕНВД.Заголовок = СтрШаблон(НСтр("ru='Доля ЕНВД: %1%%'"), ПроцентЕНВД);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииТаблицыФормыСотрудники

&НаСервере
Процедура СформироватьСписокОбновляемыхРаботников(Знач ИдентификаторыСтрок)
	
	СписокОбновляемыхРаботников(ИдентификаторыСтрок, "ОбновляемыеСотрудники",     "Сотрудник");
	СписокОбновляемыхРаботников(ИдентификаторыСтрок, "ОбновляемыеФизическиеЛица", "ФизическоеЛицо");
	
КонецПроцедуры

&НаСервере
Процедура СписокОбновляемыхРаботников(Знач ИдентификаторыСтрок, ИмяПриемника, ИмяРеквизита)
	
	РаботникиКОбновлению = Новый Соответствие;
	
	Если ТипЗнч(ИдентификаторыСтрок) = Тип("Массив") Тогда
		СписокИдентификаторовСтрок = ИдентификаторыСтрок;
	Иначе
		СписокИдентификаторовСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыСтрок);
	КонецЕсли;
	
	Для каждого ИдентификаторСтроки Из СписокИдентификаторовСтрок Цикл
		
		СтрокаРаботника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаРаботника <> Неопределено И ЗначениеЗаполнено(СтрокаРаботника[ИмяРеквизита]) Тогда
			РаботникиКОбновлению.Вставить(СтрокаРаботника[ИмяРеквизита], Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтотОбъект[ИмяПриемника] <> Неопределено Тогда
		
		СписокОбновляемых = Новый Массив(ЭтотОбъект[ИмяПриемника]);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокОбновляемых, ОбщегоНазначения.ВыгрузитьКолонку(РаботникиКОбновлению, "Ключ"), Истина);
		
	Иначе
		СписокОбновляемых = ОбщегоНазначения.ВыгрузитьКолонку(РаботникиКОбновлению, "Ключ");
	КонецЕсли;
	
	ЭтотОбъект[ИмяПриемника] = Новый ФиксированныйМассив(СписокОбновляемых);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСписокОбновляемыхФизическихЛиц(ФизическоеЛицоКОбновлению)
	
	ФизическиеЛицаКОбновлению = Новый Соответствие;
	ФизическиеЛицаКОбновлению.Вставить(ФизическоеЛицоКОбновлению);
	
	Если ОбновляемыеФизическиеЛица <> Неопределено Тогда
		
		СписокОбновляемых = Новый Массив(ОбновляемыеФизическиеЛица);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокОбновляемых, ОбщегоНазначения.ВыгрузитьКолонку(ФизическиеЛицаКОбновлению, "Ключ"), Истина);
		
	Иначе
		СписокОбновляемых = ОбщегоНазначения.ВыгрузитьКолонку(ФизическиеЛицаКОбновлению, "Ключ");
	КонецЕсли;
	
	ОбновляемыеФизическиеЛица = Новый ФиксированныйМассив(СписокОбновляемых);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНачислениям()
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеНачисленийЗавершение", ЭтотОбъект);
	
	Сотрудник      = Элементы.Сотрудники.ТекущиеДанные.Сотрудник;
	ФизическоеЛицо = Элементы.Сотрудники.ТекущиеДанные.ФизическоеЛицо;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилище(Сотрудник, ФизическоеЛицо, "Начисления"));
	
	ОткрытьФорму("Документ.НачислениеЗарплаты.Форма.ФормаНачисления", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНДФЛ()
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеНДФЛЗавершение", ЭтотОбъект);
	
	Сотрудник      = Элементы.Сотрудники.ТекущиеДанные.Сотрудник;
	ФизическоеЛицо = Элементы.Сотрудники.ТекущиеДанные.Сотрудник;
	
	ПараметрыФормы = Новый Структура;

	ПараметрыФормы.Вставить("ТолькоПросмотр",                           ТолькоПросмотр);
	ПараметрыФормы.Вставить("Организация",                              Объект.Организация);
	ПараметрыФормы.Вставить("СведенияОбНДФЛ",                           СведенияОбНДФЛ());
	ПараметрыФормы.Вставить("МесяцНачисления",                          Объект.МесяцНачисления);
	ПараметрыФормы.Вставить("СотрудникФизическоеЛицо",                  Сотрудник);
	ПараметрыФормы.Вставить("ДокументСсылка",                           Объект.Ссылка);
	ПараметрыФормы.Вставить("НеРаспределятьПоИсточникамФинансирования", Истина);
	
	ИндексЗначения = НайтиСтрокиКРасчету(Сотрудник, "Сотрудники");
	Если ИндексЗначения = Неопределено Тогда
		ИндексЗначения = НайтиСтрокиКРасчету(Сотрудник, "НДФЛ");
	КонецЕсли;
	Если ИндексЗначения <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТребуетсяПересчет", Истина);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ПодробнееОРасчетеНДФЛ",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКУдержаниям()
	
	Сотрудник      = Элементы.Сотрудники.ТекущиеДанные.Сотрудник;
	ФизическоеЛицо = Элементы.Сотрудники.ТекущиеДанные.ФизическоеЛицо;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилище(Сотрудник, ФизическоеЛицо, "Удержания"));
	
	ОткрытьФорму("Документ.НачислениеЗарплаты.Форма.ФормаУдержания", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВзносам()
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеВзносовЗавершение", ЭтотОбъект);
	
	Сотрудник      = Элементы.Сотрудники.ТекущиеДанные.Сотрудник;
	ФизическоеЛицо = Элементы.Сотрудники.ТекущиеДанные.ФизическоеЛицо;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилище(Сотрудник, ФизическоеЛицо, "Взносы"));
	
	ИндексЗначения = НайтиСтрокиКРасчету(Сотрудник, "Сотрудники");
	Если ИндексЗначения = Неопределено Тогда
		ИндексЗначения = НайтиСтрокиКРасчету(Сотрудник, "Взносы");
	КонецЕсли;
	Если ИндексЗначения <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ТребуетсяПересчет", Истина);
	КонецЕсли;
	
	ОткрытьФорму("Документ.НачислениеЗарплаты.Форма.ФормаВзносы", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция СведенияОбНДФЛ(ВходящиеДанные = Неопределено) Экспорт
	
	Если ВходящиеДанные = Неопределено Тогда
		Форма = ЭтотОбъект;
		ОбъектФормы    = Объект;
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		
		ТекущиеДанные  = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
		ФизическоеЛицо = ТекущиеДанные.ФизическоеЛицо;
		Сотрудник      = ТекущиеДанные.Сотрудник;
	Иначе
		Форма = ВходящиеДанные;
		ОбъектФормы    = ВходящиеДанные.Объект;
		ДокументОбъект = ВходящиеДанные.Объект;
		ФизическоеЛицо = ВходящиеДанные.ФизическоеЛицо;
		Сотрудник      = ВходящиеДанные.Сотрудник;
	КонецЕсли;
	
	ПланируемаяДатаВыплаты = КонецМесяца(ОбъектФормы.МесяцНачисления);
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "ДатаУвольнения");
	Если КадровыеДанные.Количество()>0 Тогда
		ДатаУвольнения = КадровыеДанные[0].ДатаУвольнения;
		Если ЗначениеЗаполнено(ДатаУвольнения)
			И НачалоМесяца(ДатаУвольнения) = ОбъектФормы.МесяцНачисления Тогда
			ПланируемаяДатаВыплаты = ДатаУвольнения;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеСведения = УчетНДФЛФормы.ДополнительныеДанныеДляПолученияСведенийОДоходахНДФЛДокумента();
	ДополнительныеСведения.МесяцНачисления        = ОбъектФормы.МесяцНачисления;
	ДополнительныеСведения.ПланируемаяДатаВыплаты = ПланируемаяДатаВыплаты;
	
	СведенияОДоходахНДФЛ = УчетНДФЛФормы.СведенияОДоходахНДФЛДокумента(Объект, "Начисления", ДополнительныеСведения, ФизическоеЛицо);
	АдресСведенийОбНДФЛ  = УчетНДФЛФормы.СведенияОбНДФЛ(Форма, ФизическоеЛицо);
	
	ДанныеОбНДФЛ = ПолучитьИзВременногоХранилища(АдресСведенийОбНДФЛ);
	ДанныеОбНДФЛ.Вставить("СведенияОДоходах",     СведенияОДоходахНДФЛ.СведенияОДоходах);
	ДанныеОбНДФЛ.Вставить("ВычетыКДоходам",       СведенияОДоходахНДФЛ.ВычетыКДоходам);
	ДанныеОбНДФЛ.Вставить("Сотрудник",            Сотрудник);
	ДанныеОбНДФЛ.Вставить("Объект",               ДокументОбъект);
	ДанныеОбНДФЛ.Вставить("ИмяТипа",              "НачислениеЗарплаты");
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбНДФЛ, Форма.УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПодобратьСотрудников(МножественныйВыбор)
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники,
		Объект.Организация,
		Объект.Подразделение,
		Объект.МесяцНачисления, 
		КонецМесяца(Объект.МесяцНачисления),
		МножественныйВыбор,
		АдресСпискаПодобранныхСотрудников());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуСотрудника(Очищать = Истина)
	
	Если ОбновляемыеФизическиеЛица <> Неопределено Тогда
		
		СотрудникиФизическихЛиц = Новый Соответствие;
		Для каждого ОбновляемоеФизическоеЛицо Из ОбновляемыеФизическиеЛица Цикл
			
			СтрокиПоФизическимЛицам = Объект.Сотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо, Совместитель", ОбновляемоеФизическоеЛицо, Ложь));
			Если СтрокиПоФизическимЛицам.Количество() = 0 Тогда
				СтрокиПоФизическимЛицам = Объект.Сотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо", ОбновляемоеФизическоеЛицо));
			КонецЕсли;
			
			Если СтрокиПоФизическимЛицам.Количество() > 0 Тогда
				ОбновляемыйСотрудник = СтрокиПоФизическимЛицам[0].Сотрудник;
			Иначе
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				
				КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц(
					Запрос.МенеджерВременныхТаблиц,
					Истина,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбновляемоеФизическоеЛицо),
					Объект.Организация,
					'00010101',
					КонецМесяца(Объект.МесяцНачисления));
				
				Запрос.Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ОсновныеСотрудникиФизическихЛиц.Сотрудник
					|ИЗ
					|	ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц";
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					ОбновляемыйСотрудник = Выборка.Сотрудник;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбновляемыйСотрудник) Тогда
				СотрудникиФизическихЛиц.Вставить(ОбновляемыйСотрудник, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СотрудникиФизическихЛиц.Количество() > 0 Тогда
			
			СотрудникиКОбновлению = Новый Массив;
			Если ОбновляемыеСотрудники <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиКОбновлению, ОбновляемыеСотрудники, Истина);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиКОбновлению, ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиФизическихЛиц, "Ключ"), Истина);
			
			ОбновляемыеСотрудники = Новый ФиксированныйМассив(СотрудникиКОбновлению);
			
		КонецЕсли;
		
		Если Очищать Тогда
			ОбновляемыеФизическиеЛица = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбновляемыеСотрудники <> Неопределено Тогда
		
		Для каждого ОбновляемыйСотрудник Из ОбновляемыеСотрудники Цикл
			
			СтрокиСотрудника = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ОбновляемыйСотрудник));
			Если СтрокиСотрудника.Количество() = 0 Тогда
				
				СтрокаСотрудника = Объект.Сотрудники.Добавить();
				СтрокаСотрудника.Сотрудник = ОбновляемыйСотрудник;
				СтрокаСотрудника.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбновляемыйСотрудник, "ФизическоеЛицо");
				
				ДанныеСотрудника = ДанныеСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбновляемыйСотрудник));
				Если ДанныеСотрудника.Количество() > 0 Тогда
					СтрокаСотрудника.ОтпускаБольничные = ДанныеСотрудника[0].Сумма;
				КонецЕсли; 
				
			Иначе
				СтрокаСотрудника = СтрокиСотрудника[0];
			КонецЕсли;
			
			ТаблицаНачислений           = Объект.Начисления.Выгрузить(Новый Структура("Сотрудник", СтрокаСотрудника.Сотрудник));
			ТаблицаУдержаний            = Объект.Удержания.Выгрузить(Новый Структура("Сотрудник", СтрокаСотрудника.ФизическоеЛицо));
			ТаблицаНДФЛ                 = Объект.НДФЛ.Выгрузить(Новый Структура("ФизическоеЛицо", СтрокаСотрудника.ФизическоеЛицо));
			ТаблицаВзносы               = Объект.Взносы.Выгрузить(Новый Структура("ФизическоеЛицо", СтрокаСотрудника.ФизическоеЛицо));
			ТаблицаКорректировкиВыплаты = Объект.КорректировкиВыплаты.Выгрузить(Новый Структура("ФизическоеЛицо", СтрокаСотрудника.ФизическоеЛицо));
		
			ВсегоОтработаноДней  = ТаблицаНачислений.Итог("ОтработаноДней");
			
			Для каждого СтрокаТаблицыНачислений Из ТаблицаНачислений Цикл
				
				Если ВсегоОтработаноДней = 0 Тогда
					СтрокаСотрудника.ОтработаноДней = 0;
					СтрокаСотрудника.ОтработаноЧасов = СтрокаТаблицыНачислений.ОтработаноЧасов;
					Прервать;
				Иначе
					Если ЗначениеЗаполнено(СтрокаТаблицыНачислений.ОтработаноДней) Тогда
						СтрокаСотрудника.ОтработаноДней = СтрокаТаблицыНачислений.ОтработаноДней;
						СтрокаСотрудника.ОтработаноЧасов = СтрокаТаблицыНачислений.ОтработаноЧасов;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаСотрудника.Начислено = ТаблицаНачислений.Итог("Результат");
			СтрокаСотрудника.ВсегоНачислено = СтрокаСотрудника.Начислено + СтрокаСотрудника.ОтпускаБольничные;
			
			СтрокаСотрудника.ПрочееУдержано = ТаблицаУдержаний.Итог("Результат");
			СтрокаСотрудника.НДФЛ = ТаблицаНДФЛ.Итог("Налог") + СтрокаСотрудника.НДФЛОтпускаБольничные;
			СтрокаСотрудника.ВсегоУдержано = СтрокаСотрудника.ПрочееУдержано + СтрокаСотрудника.НДФЛ;
			СтрокаСотрудника.ФиксРасчет_НДФЛ = 
				ТаблицаНДФЛ.Найти(Истина, "ФиксРасчет")<> Неопределено
				ИЛИ ТаблицаКорректировкиВыплаты.Найти(Истина, "ФиксРасчет")<> Неопределено;
			
			СуммаВзносов = 0;
			Для каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносов.РассчитываемыеВзносы(Ложь,,Истина)) Цикл
				СуммаВзносов = СуммаВзносов + ТаблицаВзносы.Итог(ИмяПоля)	
			КонецЦикла;
			СтрокаСотрудника.Взносы = СуммаВзносов;
			СтрокаСотрудника.ФиксРасчет_Взносы = ТаблицаВзносы.Найти(Истина, "ФиксРасчет")<> Неопределено;
				
		КонецЦикла;
		
		Если Очищать Тогда
			ОбновляемыеСотрудники = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьОкладНаСервере(Сотрудник, НовыеДни, НовыеЧасы, ОбновитьЧасы)
	
	НачислениеОклад =
		ПланыВидовРасчета.Начисления.НайтиПоРеквизиту("КатегорияНачисленияИлиНеоплаченногоВремени",
			Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
			
	Если НЕ ЗначениеЗаполнено(НачислениеОклад) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьРасчет = Ложь;
	
	МассивСтрок = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник, Начисление", Сотрудник, НачислениеОклад));
	Если МассивСтрок.Количество() <> 0 Тогда
		ДанныеСтроки = МассивСтрок[0];
		
		ДанныеСтроки.ОтработаноДней  = НовыеДни;
		ДанныеСтроки.ОтработаноЧасов = НовыеЧасы;
		
		Если ОбновитьЧасы Тогда
			Если ОтработаноДней <> 0
				И ДанныеСтроки.ОтработаноДней <= ДанныеСтроки.РабочихДней Тогда
				
				ОтработаноДней = ?(ОтработаноДней > ДанныеСтроки.РабочихДней, ДанныеСтроки.РабочихДней, ОтработаноДней);
				
				Если ДанныеСтроки.ОтработаноДней = ДанныеСтроки.РабочихДней Тогда
					ДанныеСтроки.ОтработаноЧасов = ДанныеСтроки.РабочихЧасов;
				Иначе
					
					ИзмененоДней = ДанныеСтроки.ОтработаноДней - ОтработаноДней;
					ИзмененоЧасов = ИзмененоДней * 8;
					
					Если ДанныеСтроки.ОтработаноЧасов + ИзмененоЧасов > 0 Тогда
						ДанныеСтроки.ОтработаноЧасов = ДанныеСтроки.ОтработаноЧасов + ИзмененоЧасов;
					Иначе
						ДанныеСтроки.ОтработаноЧасов = 0;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ДанныеСтроки.ОтработаноДней <> 0 И ОтработаноДней <> 0 Тогда
					ДанныеСтроки.Результат = ДанныеСтроки.Результат * ДанныеСтроки.ОтработаноДней / ОтработаноДней;
				КонецЕсли;
				
				ОтработаноДней  = ДанныеСтроки.ОтработаноДней;
				ОтработаноЧасов = ДанныеСтроки.ОтработаноЧасов;
				НовыеЧасы       = ОтработаноЧасов;
				
				ОбновитьРасчет = Истина;
			КонецЕсли;
		Иначе
			Если ОтработаноЧасов <> 0
				И ДанныеСтроки.ОтработаноЧасов <= ДанныеСтроки.РабочихЧасов Тогда
				
				ОтработаноЧасов = ?(ОтработаноЧасов > ДанныеСтроки.РабочихЧасов, ДанныеСтроки.РабочихЧасов, ОтработаноЧасов);
				
				Если ДанныеСтроки.ОтработаноЧасов <> 0 И ОтработаноЧасов <> 0 Тогда
					ДанныеСтроки.Результат = ДанныеСтроки.Результат * ДанныеСтроки.ОтработаноЧасов / ОтработаноЧасов;
				КонецЕсли;
				
				ОтработаноЧасов = ДанныеСтроки.ОтработаноЧасов;
				
				ОбновитьРасчет = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбновитьРасчет Тогда
			ПересчитатьНачисленияСКоэффициентом(ДанныеСтроки);
			Если РассчитыватьДокументыПриРедактировании Тогда
				ОбновитьУдержанияНДФЛиВзносыСотрудника(Сотрудник);
			КонецЕсли;
			ОбновитьСтрокуСотрудника(РассчитыватьДокументыПриРедактировании);
			РассчитатьИтогиПоДокументу();
		КонецЕсли;
		
	Иначе // не используется поставляемое начисление
		ТекущаяСтрока = Неопределено;
		МассивСтрок = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		Если МассивСтрок.Количество() = 1 Тогда
			// единственное начисление
			ТекущаяСтрока = МассивСтрок[0];
		ИначеЕсли МассивСтрок.Количество() > 1 Тогда
			Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
				МассивНачислений = Новый Массив;
				КатегорияНачисления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаМассива.Начисление, "КатегорияНачисленияИлиНеоплаченногоВремени");
				Если КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прочее Тогда
					// зарплата
					КодДоходаНДФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаМассива.Начисление, "КодДоходаНДФЛ");
					Если ЗначениеЗаполнено(КодДоходаНДФЛ)
						И КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.КодДоходаПоУмолчанию Тогда
						Если СтрокаМассива.ОтработаноДней <> 0 ИЛИ СтрокаМассива.ОтработаноЧасов <> 0 Тогда
							// время было указано
							ТекущаяСтрока = СтрокаМассива;
							Прервать;
						КонецЕсли;
						МассивНачислений.Добавить(СтрокаМассива);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ТекущаяСтрока = Неопределено Тогда
				Если МассивНачислений.Количество() <> 0 Тогда
					ТекущаяСтрока = МассивНачислений[0];
				Иначе
					ТекущаяСтрока = МассивСтрок[0];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущаяСтрока.ОтработаноДней  = НовыеДни;
			ТекущаяСтрока.ОтработаноЧасов = НовыеЧасы;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(
				Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"),
				УникальныйИдентификатор);
	
	КонецФункции

&НаСервереБезКонтекста
Функция ПодразделениеСотрудника(Сотрудник, ДатаСведений)
	
	КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), "Подразделение", ДатаСведений);
	Если КадровыеДанныеСотрудника.Количество() > 0 Тогда
		Возврат КадровыеДанныеСотрудника[0].Подразделение;
	КонецЕсли;
	
	Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ДанныеДокументаФизическихЛиц(ФизическиеЛица) Экспорт
	
	ТабличныеЧасти = ЗарплатаКадрыОтчеты.ТабличныеЧастиДляФормированияНабораДанныхДокументов();
	
	ОписаниеТаблицыНачислений = Новый Структура;
	ОписаниеТаблицыНачислений.Вставить("ИмяТаблицы", "Начисления");
	ОписаниеТаблицыНачислений.Вставить("ПутьКДанным", "Объект.Начисления");
	ОписаниеТаблицыНачислений.Вставить("ИмяПоляРезультат", "Результат");
	ОписаниеТаблицыНачислений.Вставить("ИмяРеквизитаДатаНачала", "");
	ОписаниеТаблицыНачислений.Вставить("ИмяРеквизитаДатаОкончания", "");
	ОписаниеТаблицыНачислений.Вставить("ИмяРеквизитаВидРасчета", "Начисление");
	
	ОписаниеТаблицыНачислений.Вставить("ЗаполнятьОплаченноеВремяОтработанным", Истина);
	
	ТабличныеЧасти.ТаблицыНачислений.Добавить(ОписаниеТаблицыНачислений);
	
	ОписаниеТаблицыНДФЛ = Новый Структура;
	ОписаниеТаблицыНДФЛ.Вставить("ИмяТаблицы", "НДФЛ");
	ОписаниеТаблицыНДФЛ.Вставить("ПутьКДанным", "Объект.НДФЛ");
	ОписаниеТаблицыНДФЛ.Вставить("ИмяПоляРезультат", "Налог");
	ОписаниеТаблицыНДФЛ.Вставить("ИмяРеквизитаВидРасчета", "");
	
	ТабличныеЧасти.ТаблицыУдержаний.Добавить(ОписаниеТаблицыНДФЛ);
	
	ОписаниеТаблицыУдержаний = Новый Структура;
	ОписаниеТаблицыУдержаний.Вставить("ИмяТаблицы", "Удержания");
	ОписаниеТаблицыУдержаний.Вставить("ПутьКДанным", "Объект.Удержания");
	ОписаниеТаблицыУдержаний.Вставить("ИмяПоляРезультат", "Результат");
	ОписаниеТаблицыУдержаний.Вставить("ИмяРеквизитаВидРасчета", "Удержание");
	
	ОписаниеТаблицыУдержаний.Вставить("ИмяРеквизитаФизическоеЛицо", "Сотрудник");
	
	ТабличныеЧасти.ТаблицыУдержаний.Добавить(ОписаниеТаблицыУдержаний);
	
	Возврат ЗарплатаКадрыОтчеты.ДанныеДокументаФизическихЛиц(ЭтотОбъект, ФизическиеЛица, ТабличныеЧасти);
	
КонецФункции

&НаСервере
Процедура УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов()
	
	Если ЕстьЗаполненныеТабличныеЧасти() Тогда
		ОтображениеПредупреждения = ОтображениеПредупрежденияПриРедактировании.Отображать;
	Иначе
		ОтображениеПредупреждения = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	КонецЕсли;
	
	Элементы.Организация.ОтображениеПредупрежденияПриРедактировании              = ОтображениеПредупреждения;
	Элементы.ПодразделениеОрганизации.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупреждения;
	Элементы.МесяцНачисленияСтрокой.ОтображениеПредупрежденияПриРедактировании   = ОтображениеПредупреждения;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеИОбновлениеДанных

&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	ФизическоеЛицо = Параметр.ФизическоеЛицо;
	Сотрудник      = Параметр.Сотрудник;
	
	ОтборСтрокФизическихЛиц = Новый Структура("ФизическоеЛицо",
												ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо));
	РасчетЗарплатыБазовый.ЗаменитьСтрокиНДФЛ(Объект.НДФЛ,
												Параметр.НДФЛ,
												Объект.ПримененныеВычетыНаДетейИИмущественные,
												Параметр.ПримененныеВычетыНаДетейИИмущественные,
												ОтборСтрокФизическихЛиц,
												Ложь);
	
	Для Каждого СтрокаНачислений Из Параметр.Начисления Цикл
		СтруктураПоиска = Новый Структура("Сотрудник, ФизическоеЛицо, Начисление, КодВычета, ВычетПримененныйКДоходам");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаНачислений);
		СтруктураПоиска.ВычетПримененныйКДоходам = Истина;
		НайденныеСтроки = Объект.Начисления.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].КодВычета = СтрокаНачислений.КодВычета;
			НайденныеСтроки[0].СуммаВычета = СтрокаНачислений.СуммаВычета;
		КонецЕсли; 
	КонецЦикла;
	
	РасчетЗарплатыБазовый.ЗаменитьСтрокиНаНовыеДанные(Объект.КорректировкиВыплаты, Параметр.КорректировкиВыплаты, "ФизическоеЛицо", ОтборСтрокФизическихЛиц);
	
	Модифицированность = Истина;
	
	ПриОкончанииРедактированияНаСервере(ФизическоеЛицо);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВзносовНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	ФизическоеЛицо = Параметр.ФизическоеЛицо;
	
	ОтборСтрокФизическихЛиц = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
	РасчетЗарплатыБазовый.ЗаменитьСтрокиНаНовыеДанные(Объект.Взносы, Параметр.Взносы, "ФизическоеЛицо", ОтборСтрокФизическихЛиц);
	
	Модифицированность = Истина;
	
	ПриОкончанииРедактированияНаСервере(ФизическоеЛицо);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеУдержанийНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	ФизическоеЛицо = Параметр.ФизическоеЛицо;
	
	ОтборСтрокФизическихЛиц = Новый Структура("Сотрудник", ФизическоеЛицо);
	РасчетЗарплатыБазовый.ЗаменитьСтрокиНаНовыеДанные(Объект.Удержания, Параметр.Удержания, "Сотрудник", ОтборСтрокФизическихЛиц);
	
	Модифицированность = Истина;
	
	ПриОкончанииРедактированияНаСервере(ФизическоеЛицо);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНачисленийНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Сотрудник      = Параметр.Сотрудник;
	ФизическоеЛицо = Параметр.ФизическоеЛицо;
	
	ОтборСтрокСотрудники = Новый Структура("Сотрудник", Сотрудник);
	РасчетЗарплатыБазовый.ЗаменитьСтрокиНаНовыеДанные(Объект.Начисления, Параметр.Начисления, "Сотрудник", ОтборСтрокСотрудники);
	
	Модифицированность = Истина;

	СформироватьСписокОбновляемыхРаботников(Элементы.Сотрудники.ВыделенныеСтроки);
	
	ПересчитатьСотрудника(Сотрудник);
	
	ПриОкончанииРедактированияНаСервере(ФизическоеЛицо);
	
КонецПроцедуры

&НаСервере
Процедура ПриОкончанииРедактированияНаСервере(ФизическоеЛицо)
	
	ДополнитьСписокОбновляемыхФизическихЛиц(ФизическоеЛицо);
	ОбновитьСтрокуСотрудника(РассчитыватьДокументыПриРедактировании);
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНачислениеНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Сотрудник      = Параметр.Сотрудник;
	ФизическоеЛицо = Параметр.ФизическоеЛицо;
	
	НоваяСтрока = Объект.Начисления.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметр.Начисление);
	
	Модифицированность = Истина;
	
	СформироватьСписокОбновляемыхРаботников(Элементы.Сотрудники.ВыделенныеСтроки);
	
	ПересчитатьНачисленияСКоэффициентом(НоваяСтрока);
	
	ПересчитатьСотрудника(Сотрудник);
	
	ПриОкончанииРедактированияНаСервере(ФизическоеЛицо);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдержаниеНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Сотрудник      = Параметр.Сотрудник;
	ФизическоеЛицо = Параметр.ФизическоеЛицо;
	
	ЗаполнитьЗначенияСвойств(Объект.Удержания.Добавить(), Параметр.Удержание);
	
	Модифицированность = Истина;
	
	ПриОкончанииРедактированияНаСервере(ФизическоеЛицо);

	УстановитьВидимостьКолонок();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНачисленияСКоэффициентом(СтрокаИнициаторПересчета)
	
	Документы.НачислениеЗарплаты.ПересчитатьНачисленияСКоэффициентом(СтрокаИнициаторПересчета, Объект.Начисления);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьОтклоненийНаСервере(Источник, Параметр)
	
	РеквизитыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация,ПериодРегистрации,Сотрудник,ФизическоеЛицо");
	
	Если РеквизитыИсточника.Организация <> Объект.Организация
		ИЛИ РеквизитыИсточника.ПериодРегистрации <> Объект.МесяцНачисления Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудник      = РеквизитыИсточника.Сотрудник;
	ФизическоеЛицо = РеквизитыИсточника.ФизическоеЛицо;
	
	ОтборСтрокСотрудники = Новый Структура("Сотрудник", Сотрудник);
	МассивСтрок = Объект.Сотрудники.НайтиСтроки(ОтборСтрокСотрудники);
	
	Модифицированность = Истина;
	
	РасчетЗарплатыДляНебольшихОрганизаций.ПриПолученииДанных(ЭтотОбъект);
	
	Если ОбновляемыеСотрудники <> Неопределено Тогда
		СписокОбновляемых = Новый Массив(ОбновляемыеСотрудники);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокОбновляемых, Сотрудник);
	Иначе
		СписокОбновляемых = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	КонецЕсли;
	ОбновляемыеСотрудники = Новый ФиксированныйМассив(СписокОбновляемых);
	
	Если ОбновляемыеФизическиеЛица <> Неопределено Тогда
		СписокОбновляемых = Новый Массив(ОбновляемыеФизическиеЛица);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокОбновляемых, ФизическоеЛицо);
	Иначе
		СписокОбновляемых = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	КонецЕсли;
	ОбновляемыеФизическиеЛица = Новый ФиксированныйМассив(СписокОбновляемых);
	
	ПересчитатьСотрудника(Сотрудник);
	
	ПриОкончанииРедактированияНаСервере(ФизическоеЛицо);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТабличнымиЧастями

&НаСервере
Функция ЕстьЗаполненныеТабличныеЧасти()
	
	ДанныеВТЧЕсть = Ложь;
	
	СписокТабличныхЧастей = СписокТабличныхЧастейДокумента();
	
	Для каждого ИмяТабличнойЧасти Из СписокТабличныхЧастей Цикл
		Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
			ДанныеВТЧЕсть = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ДанныеВТЧЕсть;
	
КонецФункции

&НаСервере
Функция СписокТабличныхЧастейДокумента()
	
	СписокТабличныхЧастей = Новый Массив;
	
	СписокТабличныхЧастей.Добавить("Сотрудники");
	СписокТабличныхЧастей.Добавить("Начисления");
	СписокТабличныхЧастей.Добавить("Удержания");
	СписокТабличныхЧастей.Добавить("НДФЛ");
	СписокТабличныхЧастей.Добавить("ПримененныеВычетыНаДетейИИмущественные");
	СписокТабличныхЧастей.Добавить("Взносы");
	
	Возврат СписокТабличныхЧастей;
	
КонецФункции

&НаСервере
Процедура ОчиститьТабличныеЧасти()
	
	СписокТабличныхЧастей = СписокТабличныхЧастейДокумента();
	
	Для каждого ИмяТабличнойЧасти Из СписокТабличныхЧастей Цикл
		Объект[ИмяТабличнойЧасти].Очистить();
	КонецЦикла;
	
	УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВторичныеДанныеТабличныхЧастей(ВыбранныеСотрудники = Неопределено)
	
	Если НЕ ПолучитьФункциональнуюОпциюФормы("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат;
	КонецЕсли; 
	
	Если ВыбранныеСотрудники <> Неопределено Тогда 
		
		ФизическиеЛицаСотрудников = Новый Соответствие;
		ВыбранныеФизическиеЛица = Новый Соответствие;
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ВыбранныеСотрудники", ВыбранныеСотрудники);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	Сотрудники.ФизическоеЛицо
		               |ПОМЕСТИТЬ ВТФизическиеЛица
		               |ИЗ
		               |	Справочник.Сотрудники КАК Сотрудники
		               |ГДЕ
		               |	Сотрудники.Ссылка В(&ВыбранныеСотрудники)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Сотрудники.Ссылка КАК Сотрудник,
		               |	Сотрудники.ФизическоеЛицо
		               |ИЗ
		               |	Справочник.Сотрудники КАК Сотрудники
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
		               |		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо";
					   
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл 
			ФизическиеЛицаСотрудников.Вставить(Выборка.Сотрудник, Выборка.ФизическоеЛицо);
			ВыбранныеФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	СоответствиеКодовВычетовКодамДоходов = Новый ФиксированноеСоответствие(УчетНДФЛ.ВычетыКДоходам(Год(Объект.МесяцНачисления)));
	
	ДанныеВычетовКДоходам = Объект.Начисления;
	
	Сотрудники = ДанныеВычетовКДоходам.Выгрузить(, "Сотрудник");
	Сотрудники.Свернуть("Сотрудник");
	
	Начисления = ДанныеВычетовКДоходам.Выгрузить(, "Начисление");
	Начисления.Свернуть("Начисление");
	
	УстановитьПривилегированныйРежим(Истина);
	Если ВыбранныеСотрудники = Неопределено Тогда 
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники.ВыгрузитьКолонку("Сотрудник"), "ФизическоеЛицо");
	КонецЕсли;	
	КодыДоходов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Начисления.ВыгрузитьКолонку("Начисление"), "КодДоходаНДФЛ");
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого СтрокаНачисления Из ДанныеВычетовКДоходам Цикл
		
		ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаНачисления.Сотрудник];
		Если ВыбранныеСотрудники <> Неопределено И ФизическоеЛицо = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаНачисления.Начисление)
			И ТипЗнч(СтрокаНачисления.Начисление) = Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
			
			СтрокаНачисления.ВычетПримененныйКДоходам = СоответствиеКодовВычетовКодамДоходов.Получить(КодыДоходов.Получить(СтрокаНачисления.Начисление)) <> Неопределено;
			
		КонецЕсли;
		
		Если ФизическоеЛицо <> Неопределено Тогда
			СтрокаНачисления.ФизическоеЛицо = ФизическоеЛицо;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСИтогами

&НаСервере
Процедура РассчитатьИтогУдержано()
	
	ОписанияСоставляющихУдержания = Новый Массив;
	ОписанияСоставляющихУдержания.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='удержания'")));
		
	ОписанияСоставляющих = Новый Массив;
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Удержания", ОписанияСоставляющихУдержания));
	
	ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейРассчитатьИтог(ЭтотОбъект, "ИтогУдержано", ОписанияСоставляющих);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогНДФЛ()
	
	ОписанияСоставляющихУдержания = Новый Массив;
	ОписанияСоставляющихУдержания.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("НДФЛ", НСтр("ru='НДФЛ'")));
		
	ОписанияСоставляющих = Новый Массив;
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Сотрудники", ОписанияСоставляющихУдержания));
	
	ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейРассчитатьИтог(ЭтотОбъект, "ИтогНДФЛ", ОписанияСоставляющих);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогВзносы()
	
	ПоляВзносов = УчетСтраховыхВзносовКлиентСервер.ОписаниеПолейВзносовВСоответствии(Объект.МесяцНачисления);
	
	ОписанияСоставляющихВзносы = Новый Массив;
	Для каждого ОписаниеПоля Из ПоляВзносов Цикл
		ОписанияСоставляющихВзносы.Добавить(
			ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита(ОписаниеПоля.Ключ, ОписаниеПоля.Значение));
	КонецЦикла;
	
	ОписанияСоставляющих = Новый Массив;
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Взносы", ОписанияСоставляющихВзносы));
	
	ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейРассчитатьИтог(ЭтотОбъект, "ИтогВзносы", ОписанияСоставляющих);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогНачислено()
	
	ОписанияСоставляющихНачисления = Новый Массив;
	ОписанияСоставляющихНачисления.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='начисления'")));
		
	ОписанияСоставляющих = Новый Массив;
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Начисления", ОписанияСоставляющихНачисления));
	ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейРассчитатьИтог(ЭтотОбъект, "ИтогНачислено", ОписанияСоставляющих);
	
	ИтогНачисленоОтпускаБольничные = Объект.Сотрудники.Итог("ОтпускаБольничные");
	ИтогНачислено = ИтогНачислено + Объект.Сотрудники.Итог("ОтпускаБольничные");
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиПоДокументу()
	
	РассчитатьИтогУдержано();
	РассчитатьИтогНДФЛ();
	РассчитатьИтогВзносы();
	РассчитатьИтогНачислено();
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаОтчетов

&НаСервере
Функция КарточкаУчетаПоСтраховымВзносамНаСервере(ФизическоеЛицо = Неопределено) Экспорт
	
	Если ФизическоеЛицо = Неопределено Тогда
		ФизическиеЛица = Новый Массив;
		Для каждого СтрокаТаблицы Из Объект.Взносы Цикл
			ФизическиеЛица.Добавить(СтрокаТаблицы.ФизическоеЛицо);
		КонецЦикла;
	Иначе
		ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	КарточкаУчета = Новый Массив;
	КарточкаУчета.Добавить(ДокументОбъект.Ссылка);
	КарточкаУчета.Добавить(
		УчетСтраховыхВзносов.КарточкаУчетаПоСтраховымВзносамПодробнее(
			ДокументОбъект,
			Модифицированность,
			ФизическиеЛица,
			Объект.МесяцНачисления));
	
	Возврат КарточкаУчета;
	
КонецФункции

&НаКлиенте
Процедура ВывестиРасчетныйЛисток(ИмяТабличнойЧасти)
	
	РасчетныйЛисток = РасчетныйЛистокНаСервере(ИмяТабличнойЧасти);
	
	КарточкаУчета = Новый Массив;
	КарточкаУчета.Добавить(Объект.Ссылка);
	КарточкаУчета.Добавить(РасчетныйЛисток);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Отчет.АнализНачисленийИУдержаний",
		"РасчетныйЛистокПодробнее",
		КарточкаУчета,
		ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция РасчетныйЛистокНаСервере(ИмяТабличнойЧасти, Сотрудник = Неопределено) Экспорт
	
	Если Сотрудник = Неопределено Тогда
		СписокСотрудников = Новый Массив;
		Для каждого СтрокаТаблицы Из Объект[ИмяТабличнойЧасти] Цикл
			СписокСотрудников.Добавить(СтрокаТаблицы.Сотрудник);
		КонецЦикла;
	Иначе
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Начисления" 
		ИЛИ ИмяТабличнойЧасти = "Сотрудники" Тогда
		МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(
									ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
										СписокСотрудников,
										"ФизическоеЛицо"),
									"Значение",
									Истина);
	КонецЕсли;
	
	Если Объект.Проведен И Не Модифицированность Тогда
		Возврат УчетНачисленнойЗарплаты.РасчетныйЛистокПоДаннымДокумента(Объект.Организация, МассивФизическихЛиц, Объект.МесяцНачисления);
	Иначе
		ДанныеДокумента = ДанныеДокументаФизическихЛиц(МассивФизическихЛиц);
		Возврат УчетНачисленнойЗарплаты.РасчетныйЛистокПоДаннымДокумента(Объект.Организация, МассивФизическихЛиц, Объект.МесяцНачисления, Объект.Ссылка, ДанныеДокумента);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция АнализЗарплатыНаСервере() Экспорт
	
	ФизическиеЛица = Новый Массив;
	Для каждого СтрокаТаблицы Из Объект.ФизическиеЛица Цикл
		ФизическиеЛица.Добавить(СтрокаТаблицы.ФизическоеЛицо);
	КонецЦикла;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	КарточкаУчета = Новый Массив;
	КарточкаУчета.Добавить(ДокументОбъект.Ссылка);
	КарточкаУчета.Добавить(
		РасчетЗарплатыБазовый.АнализЗарплатыПодробнее(
			ДокументОбъект,
			Модифицированность,
			ФизическиеЛица,
			Объект.МесяцНачисления));
	
	Возврат КарточкаУчета;
	
КонецФункции

&НаСервере
Функция СводНачисленийИУдержанийНаСервере() Экспорт
	
	ФизическиеЛица = Новый Массив;
	Для каждого СтрокаТаблицы Из Объект.ФизическиеЛица Цикл
		ФизическиеЛица.Добавить(СтрокаТаблицы.ФизическоеЛицо);
	КонецЦикла;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	КарточкаУчета = Новый Массив;
	КарточкаУчета.Добавить(ДокументОбъект.Ссылка);
	КарточкаУчета.Добавить(
		РасчетЗарплатыБазовый.СводНачисленийИУдержанийПодробнее(
			ДокументОбъект,
			Модифицированность,
			ФизическиеЛица,
			Объект.МесяцНачисления));
	
	Возврат КарточкаУчета;
	
КонецФункции

&НаСервере
Функция НалогиИВзносыНаСервере() Экспорт
	
	ФизическиеЛица = Новый Массив;
	Для каждого СтрокаТаблицы Из Объект.ФизическиеЛица Цикл
		ФизическиеЛица.Добавить(СтрокаТаблицы.ФизическоеЛицо);
	КонецЦикла;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	КарточкаУчета = Новый Массив;
	КарточкаУчета.Добавить(ДокументОбъект.Ссылка);
	КарточкаУчета.Добавить(
		РасчетЗарплатыБазовый.НалогиИВзносыПодробнее(
			ДокументОбъект,
			Модифицированность,
			ФизическиеЛица,
			Объект.МесяцНачисления));
	
	Возврат КарточкаУчета;
	
КонецФункции

#КонецОбласти

#Область ПерерасчетДанныхДокумента

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Если СтрокиКРасчету.Количество() > 0 Тогда
		
		МассивСотрудниковНДФЛ = СтрокиКРасчету.Получить("НДФЛ");
		ПерезаполнитьНДФЛ = МассивСотрудниковНДФЛ <> Неопределено И МассивСотрудниковНДФЛ.Количество() = 0;
		
		МассивСотрудниковВзносы = СтрокиКРасчету.Получить("Взносы");
		ПерезаполнитьВзносы = МассивСотрудниковВзносы <> Неопределено И МассивСотрудниковВзносы.Количество() = 0;
		
		МассивСотрудников = СтрокиКРасчету.Получить("Сотрудники");

		Если ПерезаполнитьНДФЛ = Истина
			ИЛИ ПерезаполнитьВзносы = Истина
			ИЛИ МассивСотрудников = Неопределено Тогда
			
			ЗаполнитьНДФЛиВзносы(ПерезаполнитьНДФЛ <> Истина);
			
		Иначе
			
			ОбновитьРасчетыСотрудников(МассивСотрудников, МассивСотрудниковНДФЛ, МассивСотрудниковВзносы);
			
		КонецЕсли;
		
		СтрокиКРасчету.Очистить();
		УстановитьОтображениеКнопкиПересчитать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСотрудника(Сотрудник)
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		
		Если РассчитыватьДокументыПриРедактировании Тогда
			ОбновитьУдержанияНДФЛиВзносыСотрудника(Сотрудник);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУдержанияНДФЛиВзносыСотрудника(Сотрудник)
	
	Если ОбновляемыеСотрудники <> Неопределено Тогда
		МассивСотрудников = Новый Массив(ОбновляемыеСотрудники);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудников, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), Истина);
	Иначе
		МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	КонецЕсли;
	
	ОбновитьУдержанияНДФЛиВзносыСотрудников(МассивСотрудников);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасчетыСотрудников(МассивСотрудников, МассивСотрудниковНДФЛ, МассивСотрудниковВзносы)
	
	Если МассивСотрудниковНДФЛ = Неопределено Тогда
		МассивСотрудниковНДФЛ = Новый Массив;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудниковНДФЛ, МассивСотрудников, Истина);
	
	Если МассивСотрудниковВзносы = Неопределено Тогда
		МассивСотрудниковВзносы = Новый Массив;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудниковВзносы, МассивСотрудников, Истина);
	
	Если МассивСотрудниковНДФЛ.Количество() <> 0 Тогда
		ОбновитьНДФЛСотрудников(МассивСотрудниковНДФЛ);
	КонецЕсли;
	
	Если МассивСотрудниковВзносы.Количество() <> 0 Тогда
		ОбновитьВзносыСотрудников(МассивСотрудниковВзносы);
	КонецЕсли;
	
	Если МассивСотрудников <> Неопределено
		И МассивСотрудников.Количество() <> 0 Тогда
		ОбновитьУдержанияСотрудников(МассивСотрудников);
	КонецЕсли;
	
	ОбновитьСтрокуСотрудника();
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУдержанияНДФЛиВзносыСотрудников(МассивСотрудников)
	
	ОбновитьНДФЛиВзносыСотрудников(МассивСотрудников);
	ОбновитьУдержанияСотрудников(МассивСотрудников);
	
	ОбновитьСтрокуСотрудника();
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУдержанияСотрудников(МассивСотрудников)
	
	РезультатНачисления = Неопределено;
	Для каждого Сотрудник Из МассивСотрудников Цикл
		
		ТаблицаНачислений = Объект.Начисления.Выгрузить(Новый Структура("Сотрудник", Сотрудник));
		Если РезультатНачисления = Неопределено Тогда
			РезультатНачисления = ТаблицаНачислений;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНачислений, РезультатНачисления);
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьРезультатУдержаний(Объект, РезультатНачисления);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНДФЛСотрудников(МассивСотрудников)
	
	Документы.НачислениеЗарплаты.ОбновитьНДФЛиВзносыСотрудников(Объект, МассивСотрудников, Истина, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВзносыСотрудников(МассивСотрудников)
	
	Документы.НачислениеЗарплаты.ОбновитьНДФЛиВзносыСотрудников(Объект, МассивСотрудников, Ложь, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНДФЛиВзносыСотрудников(Сотрудники)
	
	Документы.НачислениеЗарплаты.ОбновитьНДФЛиВзносыСотрудников(Объект, Сотрудники);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНДФЛиВзносыНаКлиенте(ПерезаполнитьТолькоВзносы = Ложь)
	
	Если Не РассчитыватьДокументыПриРедактировании Тогда
		
		СтрокиКРасчету.Вставить("Взносы", Новый Массив);
		Если Не ПерезаполнитьТолькоВзносы Тогда
			СтрокиКРасчету.Вставить("НДФЛ", Новый Массив);
		КонецЕсли;
		
		УстановитьОтображениеКнопкиПересчитать();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНДФЛиВзносы(ПерезаполнитьТолькоВзносы = Ложь)
	
	ПерезаполнитьНДФЛ = Не Объект.КорректироватьНДФЛ И Не ПерезаполнитьТолькоВзносы;
	ПерезаполнитьВзносы = Не Объект.КорректироватьВзносы;
	
	Если ПерезаполнитьНДФЛ Или ПерезаполнитьВзносы Тогда
		
		Если ПерезаполнитьНДФЛ Тогда
			ЗаполнитьВторичныеДанныеТабличныхЧастей();
		КонецЕсли;
		РасчетЗарплатыБазовый.ЗаполнитьНДФЛиВзносы(Объект, ПерезаполнитьНДФЛ, ПерезаполнитьВзносы);
		
	КонецЕсли;
	
	ОбновитьСтрокуСотрудника();
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВоВспомогательныхФормах

&НаСервере
Функция АдресПараметровВХранилище(Сотрудник, ФизическоеЛицо, ИмяТаблицы)
	
	Если ИмяТаблицы = "Начисления" Тогда
		ЗначениеОтбора = Сотрудник;
		ИмяОтбора = "Сотрудник";
	ИначеЕсли ИмяТаблицы = "Удержания" Тогда
		ЗначениеОтбора = ФизическоеЛицо;
		ИмяОтбора = "Сотрудник";
	ИначеЕсли ИмяТаблицы = "НДФЛ" Тогда
		ЗначениеОтбора = ФизическоеЛицо;
		ИмяОтбора = "ФизическоеЛицо";
	ИначеЕсли ИмяТаблицы = "Взносы" Тогда
		ЗначениеОтбора = ФизическоеЛицо;
		ИмяОтбора = "ФизическоеЛицо";
	КонецЕсли;
		
	МассивСтрок = Объект[ИмяТаблицы].НайтиСтроки(Новый Структура(ИмяОтбора, ЗначениеОтбора));
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Подразделение = Объект.Подразделение;
	Иначе
		Подразделение = ПодразделениеСотрудника(Сотрудник, Объект.МесяцНачисления);
	КонецЕсли;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("РассчитыватьДокументыПриРедактировании", РассчитыватьДокументыПриРедактировании);
	ПараметрыРасчета.Вставить("Объект",                                 РеквизитФормыВЗначение("Объект"));
	ПараметрыРасчета.Вставить("Ссылка",                                 Объект.Ссылка);
	ПараметрыРасчета.Вставить("Организация",                            Объект.Организация);
	ПараметрыРасчета.Вставить("Подразделение",                          Подразделение);
	ПараметрыРасчета.Вставить("МесяцНачисления",                        Объект.МесяцНачисления);
	ПараметрыРасчета.Вставить("Сотрудник",                              Сотрудник);
	ПараметрыРасчета.Вставить("ФизическоеЛицо",                         ФизическоеЛицо);
	ПараметрыРасчета.Вставить("Начисления",                             Объект.Начисления.Выгрузить(Объект.Начисления.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо))));
	ПараметрыРасчета.Вставить("МассивСтрок",                            Новый ФиксированныйМассив(МассивСтрок));
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчета, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура РедактированиеНачисленийЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)
		И ТипЗнч(РезультатРедактирования) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ДополнитьСтрокиКРасчету(РезультатРедактирования, "Сотрудники");
		УстановитьОтображениеКнопкиПересчитать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеНДФЛЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)
		И ТипЗнч(РезультатРедактирования) = Тип("Структура") Тогда
		
		Если РезультатРедактирования.Свойство("Сотрудник") И РезультатРедактирования.Свойство("ТребуетсяПересчет") Тогда
			
			Если РезультатРедактирования.ТребуетсяПересчет Тогда
				ДополнитьСтрокиКРасчету(РезультатРедактирования.Сотрудник, "НДФЛ")
			Иначе
				УдалитьСтрокиКРасчету(РезультатРедактирования.Сотрудник, "НДФЛ")
			КонецЕсли;
			
			УстановитьОтображениеКнопкиПересчитать();
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеВзносовЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)
		И ТипЗнч(РезультатРедактирования) = Тип("Структура") Тогда
		
		Если РезультатРедактирования.Свойство("Сотрудник") И РезультатРедактирования.Свойство("ТребуетсяПересчет") Тогда
			
			Если РезультатРедактирования.ТребуетсяПересчет Тогда
				ДополнитьСтрокиКРасчету(РезультатРедактирования.Сотрудник, "Взносы")
			Иначе
				УдалитьСтрокиКРасчету(РезультатРедактирования.Сотрудник, "Взносы")
			КонецЕсли;
			
			УстановитьОтображениеКнопкиПересчитать();
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РучнойПересчет

&НаКлиенте
Процедура ДополнитьСтрокиКРасчету(Сотрудник, ИмяКлюча)
	// ИмяКлюча - "Сотрудники", "Взносы", "НДФЛ"
	
	Если ИмяКлюча <> "Сотрудники" Тогда
		// если есть в общем списке - все равно пересчитается
		ИндексЗначения = НайтиСтрокиКРасчету(Сотрудник, "Сотрудники");
		Если ИндексЗначения <> Неопределено Тогда
			// удалим возможное дублирование
			УдалитьСтрокиКРасчету(Сотрудник, ИмяКлюча);
			Возврат;
		КонецЕсли;
	Иначе
		ИндексЗначения = НайтиСтрокиКРасчету(Сотрудник, "Взносы");
		Если ИндексЗначения <> Неопределено Тогда
			// удалим возможное дублирование
			УдалитьСтрокиКРасчету(Сотрудник, "Взносы");
		КонецЕсли;
		ИндексЗначения = НайтиСтрокиКРасчету(Сотрудник, "НДФЛ");
		Если ИндексЗначения <> Неопределено Тогда
			// удалим возможное дублирование
			УдалитьСтрокиКРасчету(Сотрудник, "НДФЛ");
		КонецЕсли;
	КонецЕсли;
	
	МассивСотрудников = СтрокиКРасчету.Получить(ИмяКлюча);
	Если МассивСотрудников = Неопределено Тогда
		МассивСотрудников = Новый Массив;
	КонецЕсли;
	МассивСотрудников.Добавить(Сотрудник);
	СтрокиКРасчету.Вставить(ИмяКлюча, МассивСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиКРасчету(Сотрудник, ИмяКлюча)
	// ИмяКлюча - "Сотрудники", "Взносы", "НДФЛ"
	
	ИндексЗначения = НайтиСтрокиКРасчету(Сотрудник, ИмяКлюча);
	Если ИндексЗначения <> Неопределено Тогда
		МассивСотрудников = СтрокиКРасчету.Получить(ИмяКлюча);
		МассивСотрудников.Удалить(ИндексЗначения);
		Если МассивСотрудников.Количество() = 0 Тогда
			СтрокиКРасчету.Удалить(ИмяКлюча);
		Иначе
			СтрокиКРасчету.Вставить(ИмяКлюча, МассивСотрудников);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокиКРасчету(Сотрудник, ИмяКлюча)
	// ИмяКлюча - "Сотрудники", "Взносы", "НДФЛ"
	
	МассивСотрудников = СтрокиКРасчету.Получить(ИмяКлюча);
	Если МассивСотрудников = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат МассивСотрудников.Найти(Сотрудник);
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтображениеКнопкиПересчитать()
	
	Если НЕ РассчитыватьДокументыПриРедактировании Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПересчитать",
			"Видимость",
			СтрокиКРасчету.Количество() > 0);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыплатаДокумента

&НаКлиенте
Процедура ВопросПередВыплатойСледуетПровестиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		Записать();
	КонецЕсли;
	
	ДокументПроведен = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Если ДокументПроведен Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ВыполненаЗаписьДокумента", Новый Структура("ДокументСсылка", Объект.Ссылка));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не удалось провести документ'"));
		Возврат;
	КонецЕсли;
	
	СформироватьДокументыВыплаты();

КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыВыплаты()
	
	Если МожноСоздатьВедомостиПоРасчетномуДокументу(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",             Объект.Организация);
		ПараметрыФормы.Вставить("РасчетныйДокумент",       Объект.Ссылка);
		ПараметрыФормы.Вставить("РежимВыплатыЗаПериод",    Истина);
		ПараметрыФормы.Вставить("ПериодСобытия",           Объект.МесяцНачисления);
		ПараметрыФормы.Вставить("ДатаВыплаты",             ТекущаяДата());
		
		ОткрытьФорму("Обработка.ПомощникУчетаЗарплаты.Форма.Форма", ПараметрыФормы, Объект.Ссылка); 
	КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МожноСоздатьВедомостиПоРасчетномуДокументу(РасчетныйДокумент)
	
	МожноСоздатьВедомости = Истина;
	ВзаиморасчетыССотрудникамиПереопределяемый.МожноСоздатьВедомостиПоРасчетномуДокументу(РасчетныйДокумент, МожноСоздатьВедомости);
	Возврат МожноСоздатьВедомости;
	
КонецФункции

#КонецОбласти

#Область Инициализация

СтрокиКРасчету = Новый Соответствие;
ЗакрытьПослеЗаписи = Ложь;

#КонецОбласти