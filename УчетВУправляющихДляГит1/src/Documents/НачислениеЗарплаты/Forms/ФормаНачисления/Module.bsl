
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Параметры.АдресПараметровВХранилище) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	// "Распаковываем" параметры
	ПараметрыРасчета = ПолучитьИзВременногоХранилища(Параметры.АдресПараметровВХранилище);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыРасчета, "Ссылка, Организация, МесяцНачисления, Сотрудник, ФизическоеЛицо");
	
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	СписокКадровыхДанных = "ФамилияИО";
	КадровыеДанныеФизЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическиеЛица, СписокКадровыхДанных, МесяцНачисления);
	
	ПредставлениеСотрудника = КадровыеДанныеФизЛиц[0].ФамилияИО;
	Заголовок = СтрШаблон(НСтр("ru='Начисления (%1)'"), ПредставлениеСотрудника);
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.Подразделение) Тогда
		Подразделение = ПараметрыРасчета.Подразделение;
	Иначе
		ЗначенияПоУмолчанию = Новый Структура("Организация, Подразделение");
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗначенияПоУмолчанию);
		Подразделение = ЗначенияПоУмолчанию.Подразделение;
	КонецЕсли;
	
	СоответствиеКодовВычетовКодамДоходов = Новый ФиксированноеСоответствие(УчетНДФЛ.ВычетыКДоходам(Год(МесяцНачисления)));
	
	ДатаВыплатыДохода = КонецМесяца(МесяцНачисления);
	КодДоходаПоУмолчанию = Справочники.ВидыДоходовНДФЛ.КодДоходаПоУмолчанию;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "ДатаУвольнения");
	Если КадровыеДанные.Количество()>0 Тогда
		ДатаУвольнения = КадровыеДанные[0].ДатаУвольнения;
		Если ЗначениеЗаполнено(ДатаУвольнения)
			И НачалоМесяца(ДатаУвольнения) = МесяцНачисления Тогда
			ДатаВыплатыДохода = ДатаУвольнения;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТаблицуНачислений(ПараметрыРасчета.МассивСтрок);
	ПеренумероватьСтроки(ЭтотОбъект);
	ПолучитьИтоги(ЭтотОбъект);
	
	Элементы.ГруппаКнопокПросмотр.Видимость       = ТолькоПросмотр;
	Элементы.ГруппаКнопокРедактирование.Видимость = НЕ ТолькоПросмотр;
	Если ТолькоПросмотр Тогда
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.ФормаОК.КнопкаПоУмолчанию      = Истина;
	КонецЕсли;
	
	УправлениеФормой();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Отпуск" ИЛИ ИмяСобытия = "Запись_Больничный" Тогда
		
		МассивСтрок =  Начисления.НайтиСтроки(Новый Структура("Ссылка", Источник));
		Если МассивСтрок.Количество() <> 0 Тогда
			
			МассивСтрок[0].Результат = Источник
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		ВопросСохранитьИзменения(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ Копирование И НоваяСтрока Тогда
		ДанныеТекущейСтроки = Элементы.Начисления.ТекущиеДанные;
		ДанныеТекущейСтроки.ФизическоеЛицо         = ФизическоеЛицо;
		ДанныеТекущейСтроки.Сотрудник              = Сотрудник;
		ДанныеТекущейСтроки.Подразделение          = Подразделение;
		ДанныеТекущейСтроки.ПланируемаяДатаВыплаты = ДатаВыплатыДохода;
		ДанныеТекущейСтроки.НомерСтроки            = Начисления.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	НачисленияПриОкончанииРедактированияНаСервере();
	ПолучитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	
	ПеренумероватьСтроки(ЭтотОбъект);
	ПолучитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияРезультатПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.СуммаВычета = 0;
	
	ОбработатьИзменениеНачислений(Элементы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "НачисленияОтпускныеБольничные" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДокументОтклонения = Элементы.Начисления.ТекущиеДанные.Ссылка;
		Если ЗначениеЗаполнено(ДокументОтклонения) Тогда
			ПоказатьЗначение(, ДокументОтклонения);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	
	НачислениеПриПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		ОтработаноДней  = ДанныеСтроки.ОтработаноДней;
		ОтработаноЧасов = ДанныеСтроки.ОтработаноЧасов;
	Иначе
		ОтработаноДней  = 0;
		ОтработаноЧасов = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияОтработаноДнейПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		Если ОтработаноДней <> ДанныеСтроки.ОтработаноДней Тогда
			ПересчитатьОкладНаСервере(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияОтработаноЧасовПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		Если ОтработаноЧасов <> ДанныеСтроки.ОтработаноЧасов Тогда
			ПересчитатьОкладНаСервере(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если ПроверитьЗаполнениеРеквизитов() Тогда
		ПеренестиИзмененияВОбъектФормыВладельца();
		Закрыть(Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛисток(Команда)
	
	Если Модифицированность Тогда
		ВопросСохранитьИзменения(Ложь);
	Иначе
		СформироватьОтчет();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуНачислений(МассивСтрок)
	
	НачислениеОклад = ПланыВидовРасчета.Начисления.НайтиПоРеквизиту(
						"КатегорияНачисленияИлиНеоплаченногоВремени",
						Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НачислениеРК    = ПланыВидовРасчета.Начисления.НайтиПоРеквизиту(
						"КатегорияНачисленияИлиНеоплаченногоВремени",
						Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	НачислениеСН    = ПланыВидовРасчета.Начисления.НайтиПоРеквизиту(
						"КатегорияНачисленияИлиНеоплаченногоВремени",
						Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	
	СписокКатегорий = Новый Массив;
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник",              Сотрудник);
	Запрос.УстановитьПараметр("МесяцНачисления",        МесяцНачисления);
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", Ссылка);
	Запрос.УстановитьПараметр("СписокКатегорий",       СписокКатегорий);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|					И ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&СписокКатегорий)
	|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтпускныеБольничные,
	|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК Начисление,
	|	ИСТИНА КАК ЭтоОтклонение,
	|	НачисленияУдержанияПоСотрудникам.Подразделение КАК Подразделение,
	|	900 КАК Порядок,
	|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.БольничныйЛист
	|				ИЛИ НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.Отпуск
	|			ТОГДА НачисленияУдержанияПоСотрудникам.Регистратор.ПланируемаяДатаВыплаты
	|		ИНАЧЕ НачисленияУдержанияПоСотрудникам.ПериодДействия
	|	КОНЕЦ КАК ПланируемаяДатаВыплаты
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.Период = &МесяцНачисления
	|	И НачисленияУдержанияПоСотрудникам.Организация = &Организация
	|	И НачисленияУдержанияПоСотрудникам.Сотрудник = &Сотрудник
	|	И НачисленияУдержанияПоСотрудникам.Регистратор <> &ИсключаемыйРегистратор
	|	И НачисленияУдержанияПоСотрудникам.Сумма <> 0
	|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание,
	|	НачисленияУдержанияПоСотрудникам.Подразделение,
	|	НачисленияУдержанияПоСотрудникам.Регистратор,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.БольничныйЛист
	|				ИЛИ НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.Отпуск
	|			ТОГДА НачисленияУдержанияПоСотрудникам.Регистратор.ПланируемаяДатаВыплаты
	|		ИНАЧЕ НачисленияУдержанияПоСотрудникам.ПериодДействия
	|	КОНЕЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Начисления.Добавить(), Выборка);
	КонецЦикла;
	
	СдвигПорядка = 1;
	
	Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
		НоваяСтрока = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
		
		НоваяСтрока.ЭтоРКСН = НоваяСтрока.Начисление = НачислениеРК
			ИЛИ НоваяСтрока.Начисление = НачислениеСН;
			
		Если НоваяСтрока.ВычетПримененныйКДоходам Тогда
			ДоступенВычет = Истина;
		КонецЕсли;
		
		КодДоходаНДФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Начисление, "КодДоходаНДФЛ");
		Если КодДоходаНДФЛ <> КодДоходаПоУмолчанию Тогда
			НоваяСтрока.ДоступнаДатаВыплаты = Истина;
			ДоступнаДатаВыплаты = Истина;
		КонецЕсли;
		
		Если СтрокаМассива.Начисление = НачислениеОклад Тогда
			НоваяСтрока.Порядок = 1;
		ИначеЕсли СтрокаМассива.ВходитВБазуРКиСН Тогда
			НоваяСтрока.Порядок = 100 + СдвигПорядка;
		ИначеЕсли СтрокаМассива.Начисление = НачислениеРК Тогда
			НоваяСтрока.Порядок = 300;
		ИначеЕсли СтрокаМассива.Начисление = НачислениеСН Тогда
			НоваяСтрока.Порядок = 400;
		Иначе
			НоваяСтрока.Порядок = 200 + СдвигПорядка;
		КонецЕсли;
		
		СдвигПорядка = СдвигПорядка + 1;
		
	КонецЦикла;
	
	Начисления.Сортировать("Порядок, Подразделение, Начисление");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьИтоги(Форма)
	
	Форма.ИтогоНачислено   = Форма.Начисления.Итог("Результат") + Форма.Начисления.Итог("ОтпускныеБольничные");
	Форма.ИтогоСуммаВычета = Форма.Начисления.Итог("СуммаВычета");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Начисления");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Начисления.ЭтоОтклонение", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияРезультат");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Начисления.ЭтоОтклонение", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияОтпускныеБольничные");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Начисления.ЭтоОтклонение", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияКодВычета");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияСуммаВычета");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Начисления.ВычетПримененныйКДоходам", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость",      Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияПланируемаяДатаВыплаты");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Начисления.ДоступнаДатаВыплаты", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияНачисление");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияПланируемаяДатаВыплаты");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Начисления.ЭтоРКСН", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияНачисление");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленияПодразделение");
	НачисленияГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НачисленияГруппаОтбора,
		"Начисления.ЭтоОтклонение", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НачисленияГруппаОтбора,
		"Начисления.ЭтоРКСН", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.НачисленияГруппаВычет.Видимость = ДоступенВычет;
	Элементы.НачисленияПланируемаяДатаВыплаты.Видимость = ДоступнаДатаВыплаты И Год(МесяцНачисления) > 2016;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренумероватьСтроки(Форма)
	
	Для Сч = 0 По Форма.Начисления.Количество() - 1 Цикл
		СтрокаТаблицы = Форма.Начисления[Сч];
		СтрокаТаблицы.НомерСтроки = Сч + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НачисленияПриОкончанииРедактированияНаСервере()
	
	ИдентификаторСтроки = Элементы.Начисления.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаНачислений = Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаНачислений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаНачислений.Сотрудник) Тогда
		СтрокаНачислений.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаНачислений.Сотрудник, "ФизическоеЛицо");
		ОбновляемыеФизическиеЛица = Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаНачислений.ФизическоеЛицо));
		
		Если НЕ ЗначениеЗаполнено(СтрокаНачислений.Подразделение) Тогда
			Если ЗначениеЗаполнено(Подразделение) Тогда
				СтрокаНачислений.Подразделение = Подразделение;
			Иначе
				ЗначенияПоУмолчанию = Новый Структура("Организация, Подразделение");
				ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗначенияПоУмолчанию);
				СтрокаНачислений.Подразделение = ЗначенияПоУмолчанию.Подразделение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаНачислений.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	ОбработатьИзменениеНачислений(ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура НачислениеПриПриИзмененииНаСервере()
	
	ИдентификаторСтроки = Элементы.Начисления.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаНачислений = Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаНачислений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаНачислений.Начисление) Тогда
		СтрокаНачислений.ВычетПримененныйКДоходам = Ложь;
		СтрокаНачислений.ДоступнаДатаВыплаты = Ложь;
	Иначе
		
		ДанныеНачисления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
												СтрокаНачислений.Начисление,
												"КодДоходаНДФЛ,КатегорияНачисленияИлиНеоплаченногоВремени,ВходитВБазуРКИСН");
												
		КодДоходаНДФЛ = ДанныеНачисления.КодДоходаНДФЛ;
		Если КодДоходаНДФЛ <> КодДоходаПоУмолчанию Тогда
			СтрокаНачислений.ДоступнаДатаВыплаты = Истина;
		КонецЕсли;
		
		
		КатегорияНачисленияИлиНеоплаченногоВремени = ДанныеНачисления.КатегорияНачисленияИлиНеоплаченногоВремени;
		Если КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда
			Или КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прочее
			И ДанныеНачисления.ВходитВБазуРКИСН Тогда
			СтрокаНачислений.ВходитВБазуРКиСН = Истина;
		КонецЕсли;
		
		КодДоходаНДФЛ = ДанныеНачисления.КодДоходаНДФЛ;
		Если ЗначениеЗаполнено(КодДоходаНДФЛ) Тогда
			СтрокаНачислений.ВычетПримененныйКДоходам =
				СоответствиеКодовВычетовКодамДоходов.Получить(КодДоходаНДФЛ) <> Неопределено
		КонецЕсли;
		
		Если СтрокаНачислений.ВычетПримененныйКДоходам Тогда
			КодВычета = УчетНДФЛ.КодВычетаПоКодуДоходаНДФЛ(КодДоходаНДФЛ);
			Если Не ЗначениеЗаполнено(СтрокаНачислений.КодВычета) Тогда
				СтрокаНачислений.КодВычета = УчетНДФЛ.КодВычетаПоКодуДоходаНДФЛ(КодДоходаНДФЛ);
			КонецЕсли; 
		Иначе
			СтрокаНачислений.КодВычета = Справочники.ВидыВычетовНДФЛ.ПустаяСсылка();
			СтрокаНачислений.СуммаВычета = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступнаДатаВыплаты = Начисления.НайтиСтроки(Новый Структура("ДоступнаДатаВыплаты", Истина)).Количество() <> 0;
	ДоступенВычет       = Начисления.НайтиСтроки(Новый Структура("ВычетПримененныйКДоходам", Истина)).Количество() <> 0;
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНачислений(ИдентификаторСтроки)
	
	СтрокаНачисления = Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ЗначениеЗаполнено(СтрокаНачисления.Начисление) Тогда
		
		ДанныеНачисления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаНачисления.Начисление, "КодДоходаНДФЛ,КатегорияНачисленияИлиНеоплаченногоВремени,ВходитВБазуРКИСН");
		КодДоходаНДФЛ = ДанныеНачисления.КодДоходаНДФЛ;
		
		Если СтрокаНачисления.ВычетПримененныйКДоходам Тогда
			КодВычета = УчетНДФЛ.КодВычетаПоКодуДоходаНДФЛ(КодДоходаНДФЛ);
			Если Не ЗначениеЗаполнено(СтрокаНачисления.КодВычета) Тогда
				СтрокаНачисления.КодВычета = УчетНДФЛ.КодВычетаПоКодуДоходаНДФЛ(КодДоходаНДФЛ);
			КонецЕсли; 
		Иначе
			СтрокаНачисления.КодВычета = Справочники.ВидыВычетовНДФЛ.ПустаяСсылка();
			СтрокаНачисления.СуммаВычета = 0;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СтрокаНачисления.КодВычета) И СтрокаНачисления.СуммаВычета = 0 Тогда
			СтрокаНачисления.СуммаВычета = УчетНДФЛ.ВычетКДоходуСотрудника(
				Ссылка,
				Организация,
				МесяцНачисления,
				СтрокаНачисления.Сотрудник,
				КодДоходаНДФЛ,
				СтрокаНачисления.КодВычета,
				СтрокаНачисления.Результат,
				1);
		КонецЕсли; 
	КонецЕсли; 
	
	ПересчитатьНачисленияСКоэффициентом(ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНачисленияСКоэффициентом(ИдентификаторСтроки)
	
	СтрокаИнициаторПересчета = Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Документы.НачислениеЗарплаты.ПересчитатьНачисленияСКоэффициентом(СтрокаИнициаторПересчета, Начисления);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьОкладНаСервере(ОбновитьЧасы)
	
	НачислениеОклад =
		ПланыВидовРасчета.Начисления.НайтиПоРеквизиту("КатегорияНачисленияИлиНеоплаченногоВремени",
			Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
			
	Если НЕ ЗначениеЗаполнено(НачислениеОклад) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = Элементы.Начисления.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеСтроки = Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Начисление <> НачислениеОклад Тогда
		Возврат;
	КонецЕсли;
	
	НовыеДни  = ДанныеСтроки.ОтработаноДней;
	НовыеЧасы = ДанныеСтроки.ОтработаноЧасов;
	
	ОбновитьРасчет = Ложь;
	
	Если ОбновитьЧасы Тогда
		Если ОтработаноДней <> 0
			И ДанныеСтроки.ОтработаноДней <= ДанныеСтроки.РабочихДней Тогда
			
			ОтработаноДней = ?(ОтработаноДней > ДанныеСтроки.РабочихДней, ДанныеСтроки.РабочихДней, ОтработаноДней);
			
			Если ДанныеСтроки.ОтработаноДней = ДанныеСтроки.РабочихДней Тогда
				ДанныеСтроки.ОтработаноЧасов = ДанныеСтроки.РабочихЧасов;
			Иначе
				
				ИзмененоДней = ДанныеСтроки.ОтработаноДней - ОтработаноДней;
				ИзмененоЧасов = ИзмененоДней * 8;
				
				Если ДанныеСтроки.ОтработаноЧасов + ИзмененоЧасов > 0 Тогда
					ДанныеСтроки.ОтработаноЧасов = ДанныеСтроки.ОтработаноЧасов + ИзмененоЧасов;
				Иначе
					ДанныеСтроки.ОтработаноЧасов = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДанныеСтроки.ОтработаноДней <> 0 И ОтработаноДней <> 0 Тогда
				ДанныеСтроки.Результат = ДанныеСтроки.Результат * ДанныеСтроки.ОтработаноДней / ОтработаноДней;
			КонецЕсли;
			
			ОтработаноДней  = ДанныеСтроки.ОтработаноДней;
			ОтработаноЧасов = ДанныеСтроки.ОтработаноЧасов;
			НовыеЧасы       = ОтработаноЧасов;
			
			ОбновитьРасчет = Истина;
		КонецЕсли;
	Иначе
		Если ОтработаноЧасов <> 0
			И ДанныеСтроки.ОтработаноЧасов <= ДанныеСтроки.РабочихЧасов Тогда
			
			ОтработаноЧасов = ?(ОтработаноЧасов > ДанныеСтроки.РабочихЧасов, ДанныеСтроки.РабочихЧасов, ОтработаноЧасов);
			
			Если ДанныеСтроки.ОтработаноЧасов <> 0 И ОтработаноЧасов <> 0 Тогда
				ДанныеСтроки.Результат = ДанныеСтроки.Результат * ДанныеСтроки.ОтработаноЧасов / ОтработаноЧасов;
			КонецЕсли;
			
			ОтработаноЧасов = ДанныеСтроки.ОтработаноЧасов;
			
			ОбновитьРасчет = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьРасчет Тогда
		ОбработатьИзменениеНачислений(ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьИзмененияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнениеРеквизитов() Тогда
			ПеренестиИзмененияВОбъектФормыВладельца();
			Если ДополнительныеПараметры.Закрытие Тогда
				Закрыть(Сотрудник);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Если ДополнительныеПараметры.Закрытие Тогда
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Закрытие
		И НЕ Результат = КодВозвратаДиалога.Отмена Тогда
		СформироватьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитов()
	
	ПроверкаПройдена = Истина;
	Для Каждого СтрокаТаблицы ИЗ Начисления Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Начисление) Тогда
			ИндексСтроки = Начисления.Индекс(СтрокаТаблицы);
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",
				"Заполнение",
				"Начисление",
				ИндексСтроки + 1,
				"Начисления");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Начисления[" + ИндексСтроки + "].Начисление");
			ПроверкаПройдена = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПроверкаПройдена;
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчет()
	
	РасчетныйЛисток = ВладелецФормы.РасчетныйЛистокНаСервере("Начисления", Сотрудник);
	
	КарточкаУчета = Новый Массив;
	КарточкаУчета.Добавить(Ссылка);
	КарточкаУчета.Добавить(РасчетныйЛисток);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Отчет.АнализНачисленийИУдержаний",
		"РасчетныйЛистокПодробнее",
		КарточкаУчета,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьИзменения(Закрытие)
	
	ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?'");
	Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершение", ЭтотОбъект, Новый Структура("Закрытие", Закрытие));
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

#Область ПереносВОсновнуюФорму

&НаКлиенте
Процедура ПеренестиИзмененияВОбъектФормыВладельца()
	
	Если Модифицированность Тогда
		Оповестить("ИзмененыРезультатыРачетаНачисления", ПоместитьИзмененныеДанныеВоВременноеХранилище(), ЭтотОбъект);
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьИзмененныеДанныеВоВременноеХранилище()
	
	ВозвращаемыеСведения = Новый Структура;
	
	ДанныеНачислений = Начисления.Выгрузить();
	УдаляемыеСтроки = ДанныеНачислений.НайтиСтроки(Новый Структура("ЭтоОтклонение", Истина));
	Для Каждого УдаляемаяСтрока ИЗ УдаляемыеСтроки Цикл
		ДанныеНачислений.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	ДанныеНачислений.ЗаполнитьЗначения(Сотрудник,      "Сотрудник");
	ДанныеНачислений.ЗаполнитьЗначения(ФизическоеЛицо, "ФизическоеЛицо");
	
	ВозвращаемыеСведения.Вставить("Начисления",     ДанныеНачислений);
	ВозвращаемыеСведения.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	ВозвращаемыеСведения.Вставить("Сотрудник",      Сотрудник);
	
	Возврат ПоместитьВоВременноеХранилище(ВозвращаемыеСведения, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#КонецОбласти
