#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Если ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		ИмяТабличнойЧасти = "Сотрудники";
	Иначе
		ИмяТабличнойЧасти = "Начисления";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ТЧСотрудники", ЭтотОбъект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Сотрудник"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачислениеЗарплатыСотрудники.НомерСтроки,
		|	НачислениеЗарплатыСотрудники.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиДокумента
		|ИЗ
		|	&ТЧСотрудники КАК НачислениеЗарплатыСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(СотрудникиДокумента.НомерСтроки) КАК НомерСтроки,
		|	СотрудникиДокумента.Сотрудник
		|ИЗ
		|	ВТСотрудникиДокумента КАК СотрудникиДокумента
		|ГДЕ
		|	ВЫРАЗИТЬ(СотрудникиДокумента.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация <> &ГоловнаяОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиДокумента.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Сотрудник %1 не работает в организации %2'"),
					Выборка.Сотрудник,
					Организация),
				,
				ИмяТабличнойЧасти + "[" + (Выборка.НомерСтроки - 1) + "]Сотрудник",
				"Объект",
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого СтрокаНачислений Из Начисления Цикл
		
		ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, СтрокаНачислений.ПланируемаяДатаВыплаты, "Объект.Начисления[" + Формат(СтрокаНачислений.НомерСтроки - 1, "ЧГ=") + "].ПланируемаяДатаВыплаты",
			Отказ, НСтр("ru='Дата выплаты'"), МесяцНачисления, НСтр("ru='месяца начисления'"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;		
	
	ЗаполнитьНачисленоУдержано();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	
	// НДФЛ
	ДатаОперацииПоНалогомИВзносам = Мин(Дата, КонецМесяца(МесяцНачисления));
	
	УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениямСПланируемойДатойВыплаты(Движения, Отказ, Организация, ДатаОперацииПоНалогомИВзносам, ДанныеДляПроведения.МенеджерВременныхТаблиц, МесяцНачисления, Истина, , , Ссылка);
	
	УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, Организация, ДатаОперацииПоНалогомИВзносам, ДанныеДляПроведения.НДФЛ);
	УчетНДФЛ.СформироватьСоциальныеВычетыПоУдержаниям(Ссылка, Движения, Отказ, Организация, ДатаОперацииПоНалогомИВзносам, МесяцНачисления, ДанныеДляПроведения.УдержанияПоСотрудникам);
	УчетНДФЛ.СформироватьДокументыУчтенныеПриРасчетеДляМежрасчетногоДокументаПоВременнойТаблице(Движения, Отказ, Организация, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ссылка);
	
	
	// Заполним описание данных для проведения в учете начисленной зарплаты.
	ДанныеДляПроведенияУчетЗарплаты = ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения();
	ДанныеДляПроведенияУчетЗарплаты.Движения 				= Движения;
	ДанныеДляПроведенияУчетЗарплаты.Организация 			= Организация;
	ДанныеДляПроведенияУчетЗарплаты.ПериодРегистрации 		= МесяцНачисления;
	ДанныеДляПроведенияУчетЗарплаты.ПорядокВыплаты 			= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	ДанныеДляПроведенияУчетЗарплаты.ОкончательныйРасчет 	= Истина;
	ДанныеДляПроведенияУчетЗарплаты.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	
	УчетНачисленнойЗарплаты.ЗарегистрироватьНачисления(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.НачисленияПоСотрудникам, Неопределено);
	УчетНачисленнойЗарплатыБазовый.СформироватьДвиженияУдержаний(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.УдержанияПоСотрудникам);
	УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Истина);
	
	УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НДФЛ, Организация, ДатаОперацииПоНалогомИВзносам);
	УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛИКорректировкиВыплаты(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.НДФЛ, ДанныеДляПроведения.КорректировкиВыплаты);
	
	// Страховые взносы
	ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВД(Организация, МесяцНачисления, ДанныеДляПроведения.МенеджерВременныхТаблиц, ДанныеДляПроведения.НачисленияПоСотрудникам);
	УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(Движения, Отказ, Организация, МесяцНачисления, ДанныеДляПроведения.МенеджерВременныхТаблиц, , Истина);
	
	УчетСтраховыхВзносов.СформироватьИсчисленныеВзносы(Движения, Отказ, Организация, КонецМесяца(МесяцНачисления), ДанныеДляПроведения.СтраховыеВзносы);
	УчетСтраховыхВзносов.СформироватьСтраховыеВзносыПоФизическимЛицам(Движения, Отказ, Организация, МесяцНачисления, Ссылка, ДанныеДляПроведения.СтраховыеВзносы);
	
	Если Не Отказ Тогда
		
		// формирование проводок
		ДанныеДляПроведения = ОтражениеЗарплатыВУчете.НоваяСтруктураРезультатыРасчетаЗарплаты();
		ДанныеДляПроведения.НачисленияУдержания = Движения.НачисленияУдержанияПоСотрудникам.Выгрузить();
		ДанныеДляПроведения.СтраховыеВзносы = Движения.СтраховыеВзносыПоФизическимЛицам.Выгрузить();
		СтрокаСписокТаблиц = "НачисленнаяЗарплатаИВзносы, НачисленныйНДФЛ, УдержаннаяЗарплата";
		ОтражениеЗарплатыВБухучете.СформироватьДвиженияПоДокументу(Движения, Отказ, Организация, МесяцНачисления, ДанныеДляПроведения, СтрокаСписокТаблиц);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляПроведения()
	
	ДанныеДляПроведенияНачисленияЗарплаты = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	СписокФизическихЛиц = Неопределено;
	Если ДополнительныеСвойства.Свойство("ФизическиеЛица")
		И ДополнительныеСвойства.ФизическиеЛица.Количество() > 0 Тогда
		
		СписокФизическихЛиц = ДополнительныеСвойства.ФизическиеЛица
		
	КонецЕсли;
	
	РасчетЗарплаты.ЗаполнитьНачисления(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, , , , , СписокФизическихЛиц);
	РасчетЗарплаты.ЗаполнитьУдержания(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, , СписокФизическихЛиц);
	РасчетЗарплаты.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, , СписокФизическихЛиц);
	
	РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, СписокФизическихЛиц);
	РасчетЗарплаты.ЗаполнитьДанныеКорректировкиВыплаты(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, СписокФизическихЛиц);
	РасчетЗарплаты.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, СписокФизическихЛиц);
	
	Возврат ДанныеДляПроведенияНачисленияЗарплаты;
	
КонецФункции

Процедура ЗаполнитьНачисленоУдержано() Экспорт
	
	Начислено = Начисления.Итог("Результат");
	
	Удержано = Удержания.Итог("Результат");
	Удержано = Удержано + НДФЛ.Итог("Налог");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
