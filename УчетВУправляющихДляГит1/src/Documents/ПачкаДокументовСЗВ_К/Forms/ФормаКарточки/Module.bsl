#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолейВзносы;

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолейСтаж;

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолейЗаработок;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РедактируемыйДокументСсылка = Параметры.РедактируемыйДокументСсылка;
	Сотрудник = Параметры.Сотрудник;
	
	ИменаДополняемыхТаблиц = Новый Массив;
	ИменаДополняемыхТаблиц.Добавить("ЗаписиОСтаже");
	ПерсонифицированныйУчетФормы.ДобавитьЗаголовкиКПолямТаблицФормы(ЭтаФорма, ИменаДополняемыхТаблиц, ОписаниеКолонокЗаголовковТаблицФормы(ЭтотОбъект));
	
	ДанныеИзВременногоХранилищаВДанныеФормы(Параметры.АдресВоВременномХранилище);
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОтмененаИсправления" Тогда
		ДанныеИзВременногоХранилищаВДанныеФормы(Параметр.АдресХранилища);
		Активизировать();
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица" И Не ТолькоПросмотр Тогда 
		ЗаполнитьИзменившиесяДанныеФизическогоЛица(Параметр);	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Ок(Команда)
	ВыбратьИЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДанныеФизическогоЛица(Команда)
	ПараметрыФормы = Новый Структура("Ключ, АктивнаяСтраница, РедактируемоеПоле", Сотрудник, "ЛичныеДанные");
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура РасположитьЗаписиСтажа(Команда)
	РасположитьЗаписиСтажаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИтоговыйСтаж(Команда)
	
	ЗаполнитьИтоговыйСтажНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИтоговыйСтажНаСервере()
	СведенияДляОценкиПенсионныхПрав.Очистить();
	
	ТаблицаЗаписейОСтажеПоСотруднику = ЗаписиОСтаже.Выгрузить();
	
	ТаблицаИтоговогоСтажаПоСотруднику = ПерсонифицированныйУчет.ПолучитьТаблицуИтоговСтажаПоСотруднику(ТаблицаЗаписейОСтажеПоСотруднику, Сотрудник);
			
	Для Каждого СтрокаИтоговогоСтажа Из ТаблицаИтоговогоСтажаПоСотруднику Цикл
		НоваяСтрока = СведенияДляОценкиПенсионныхПрав.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИтоговогоСтажа);
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	АдресВоВременномХранилище = ДанныеСотрудникаВоВременноеХранилище();
	
	ПараметрыОповещения = Новый Структура("РедактируемыйДокументСсылка, Сотрудник, АдресВоВременномХранилище, Модифицированность");
	ПараметрыОповещения.РедактируемыйДокументСсылка = РедактируемыйДокументСсылка;
	ПараметрыОповещения.Сотрудник = Сотрудник;
	ПараметрыОповещения.АдресВоВременномХранилище = АдресВоВременномХранилище;	
	
	Оповестить("РедактированиеДанныхСЗВ6ПоСотруднику", ПараметрыОповещения);
	
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	Если ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1") Тогда
		Заголовок = НСтр("ru = 'Сведения о страховых взносах и стаже ЗЛ (СВЗ-6-1)'");
	ИначеЕсли ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.РеестрСЗВ_6_2") Тогда
		Заголовок = НСтр("ru = 'Сведения о страховых взносах и стаже ЗЛ (СВЗ-6-2)'");
	ИначеЕсли ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") Тогда
		Заголовок = НСтр("ru = 'Сведения о сумме выплат и вознаграждений (СВЗ-6-3)'");	
	ИначеЕсли ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
		Заголовок = НСтр("ru = 'Сведения о сумме выплат, страховых взносах и стаже ЗЛ (СЗВ-6-4)'");	
	КонецЕсли;	
	
	ИнфонадписьЗаголовокКарточки = НСтр("ru = 'Данные застрахованного лица'");
КонецПроцедуры	

&НаСервере
Процедура ДанныеИзВременногоХранилищаВДанныеФормы(АдресВоВременномХранилище)
	Модифицированность = Ложь;
		
	ДанныеДокументаПоСотруднику = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ДанныеДокументаПоСотруднику = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить редактируемые данные.'");	
	КонецЕсли;
	
	Сотрудник = ДанныеДокументаПоСотруднику.Сотрудник;
	Фамилия = ДанныеДокументаПоСотруднику.Фамилия;
	Имя = ДанныеДокументаПоСотруднику.Имя;
	Отчество = ДанныеДокументаПоСотруднику.Отчество;
	СтраховойНомерПФР = ДанныеДокументаПоСотруднику.СтраховойНомерПФР;
	ТерриториальныеУсловияНа31_12_2001 = ДанныеДокументаПоСотруднику.ТерриториальныеУсловияНа31_12_2001;
	РайонныйКоэффициентНа31_12_2001 = ДанныеДокументаПоСотруднику.РайонныйКоэффициентНа31_12_2001;
	
	ЗаписиОСтаже.Очистить();
	
	Для Каждого СтрокаТаблицы Из ДанныеДокументаПоСотруднику.ЗаписиОСтаже Цикл
		СтрокаТаблицыФормы = ЗаписиОСтаже.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыФормы, СтрокаТаблицы);
	КонецЦикла;	
		
	ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВТаблице(ЭтаФорма, ЗаписиОСтаже, ОписаниеКолонокЗаголовковТаблицы(ЭтотОбъект, "ЗаписиОСтаже"));

	СведенияДляОценкиПенсионныхПрав.Очистить();
	
	Для Каждого СтрокаИтоговСтажа Из ДанныеДокументаПоСотруднику.СведенияДляОценкиПенсионныхПрав Цикл
		СтрокаТаблицыФормы = СведенияДляОценкиПенсионныхПрав.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыФормы, СтрокаИтоговСтажа);
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере 
Функция ДанныеСотрудникаВоВременноеХранилище()		
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник", Сотрудник);
	ДанныеСотрудника.Вставить("ТерриториальныеУсловияНа31_12_2001", ТерриториальныеУсловияНа31_12_2001);
	ДанныеСотрудника.Вставить("РайонныйКоэффициентНа31_12_2001", РайонныйКоэффициентНа31_12_2001);
	ДанныеСотрудника.Вставить("Фамилия", Фамилия);
	ДанныеСотрудника.Вставить("Имя", Имя);
	ДанныеСотрудника.Вставить("Отчество", Отчество);
	ДанныеСотрудника.Вставить("СтраховойНомерПФР", СтраховойНомерПФР);
	ДанныеСотрудника.Вставить("Модифицированность", Модифицированность);
	
	ДанныеСотрудника.Вставить("ЗаписиОСтаже", Новый Массив);
	ДанныеСотрудника.Вставить("СведенияДляОценкиПенсионныхПрав", Новый Массив);
	
	Для Каждого СтрокаЗаписиОСтаже Из ЗаписиОСтаже Цикл
		СтруктураПолейЗаписиОСтаже = СтруктураПолейЗаписиОСтаже();
		ЗаполнитьЗначенияСвойств(СтруктураПолейЗаписиОСтаже, СтрокаЗаписиОСтаже);
		
		ДанныеСотрудника.ЗаписиОСтаже.Добавить(СтруктураПолейЗаписиОСтаже);
	КонецЦикла;	
	
	Для Каждого СтрокаИтоговСтажа Из СведенияДляОценкиПенсионныхПрав Цикл
		СтруктураПолей = СтруктураПолейСведенияДляОценкиПенсионныхПрав();
		ЗаполнитьЗначенияСвойств(СтруктураПолей, СтрокаИтоговСтажа);
		
		ДанныеСотрудника.СведенияДляОценкиПенсионныхПрав.Добавить(СтруктураПолей);
	КонецЦикла;	

	Возврат ПоместитьВоВременноеХранилище(ДанныеСотрудника);		
КонецФункции	

&НаСервере
Функция СтруктураПолейЗаписиОСтаже()
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("НомерПериодаТрудовойДеятельности");
	СтруктураПолей.Вставить("НомерОсновнойЗаписи");
	СтруктураПолей.Вставить("НомерДополнительнойЗаписи");
	СтруктураПолей.Вставить("ОрганизацияТрудовойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельности");
	СтруктураПолей.Вставить("ДатаНачалаПериода");
	СтруктураПолей.Вставить("ДатаОкончанияПериода");
	СтруктураПолей.Вставить("ОсобыеУсловияТруда");
	СтруктураПолей.Вставить("КодПозицииСписка");
	СтруктураПолей.Вставить("ОснованиеИсчисляемогоСтажа");
	СтруктураПолей.Вставить("НулевойПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ПервыйПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ВторойПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ТретийПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ОснованиеВыслугиЛет");
	СтруктураПолей.Вставить("ПервыйПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ВторойПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТретийПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТерриториальныеУсловия");
	СтруктураПолей.Вставить("РайонныйКоэффициент");
	СтруктураПолей.Вставить("Должность");
	
	Возврат СтруктураПолей;
КонецФункции	

&НаСервере
Функция СтруктураПолейСведенияДляОценкиПенсионныхПрав()
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ВидСтажа");
	СтруктураПолей.Вставить("НомерЗаписи");
	СтруктураПолей.Вставить("КодСтажа");
	СтруктураПолей.Вставить("ОрганизацияТрудаЛетнойДеятельности");
	СтруктураПолей.Вставить("Месяцев");
	СтруктураПолей.Вставить("Дней");
	СтруктураПолей.Вставить("Лет");
		
	Возврат СтруктураПолей;
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьИзменившиесяДанныеФизическогоЛица(ДанныеФизическогоЛица)	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеФизическогоЛица);
	ИзменилисьДанныеФизическогоЛица = Истина;
КонецПроцедуры	

&НаСервере
Процедура ВыполнитьНумерациюЗаписейОСтаже()
	НомерПериода = 0;
	ТекущаяОрганизация = "";
	ТекущийВидДеятельности = "";
	
	ЗаписиОСтажеПоСотруднику = ЗаписиОСтаже;
	
	НомерСтроки = 0;
	Для Каждого СтрокаСтажа Из ЗаписиОСтажеПоСотруднику Цикл
		НомерСтроки = НомерСтроки + 1;

		// Контролируем смену периода (организации или вида деятельности).
		Если (СтрокаСтажа.ОрганизацияТрудовойДеятельности <> ТекущаяОрганизация) ИЛИ (СтрокаСтажа.ВидДеятельности <> ТекущийВидДеятельности) Тогда
			НомерПериода = НомерПериода + 1;
			НомерОсновнойЗаписи = 0; 
			ТекущаяОрганизация = СтрокаСтажа.ОрганизацияТрудовойДеятельности;
			ТекущийВидДеятельности = СтрокаСтажа.ВидДеятельности;
		КонецЕсли;	 

		Если ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) Тогда
			// Встретили основную запись
			НомерОсновнойЗаписи = НомерОсновнойЗаписи + 1; 
			НомерДополнительнойЗаписи = 0; 
		Иначе	
			Если НомерОсновнойЗаписи <> 0 Тогда
				НомерДополнительнойЗаписи = НомерДополнительнойЗаписи + 1; 
			КонецЕсли;	 
		КонецЕсли;	

		СтрокаСтажа.НомерПериодаТрудовойДеятельности = НомерПериода;
		СтрокаСтажа.НомерОсновнойЗаписи = НомерОсновнойЗаписи;
		СтрокаСтажа.НомерДополнительнойЗаписи = НомерДополнительнойЗаписи;
	КонецЦикла;	
 		
КонецПроцедуры

&НаСервере
Процедура СортироватьЗаписиСтажаНаСервере()
	ТаблицаЗаписейОСтаже = ЗаписиОСтаже.Выгрузить();	
	// Дополнительным записям проставим даты начала и окончания периода.
	
	ТекущаяОсновнаяЗапись = Неопределено;
	Для Каждого Запись Из ТаблицаЗаписейОСтаже Цикл

		Если Запись.НомерДополнительнойЗаписи = 0 Тогда
			ТекущаяОсновнаяЗапись = Запись;
		Иначе
			Запись.ДатаНачалаПериода = ТекущаяОсновнаяЗапись.ДатаНачалаПериода;
			Запись.ДатаОкончанияПериода = ТекущаяОсновнаяЗапись.ДатаОкончанияПериода;
		КонецЕсли;	 
	КонецЦикла;

	// Отсортируем таблицу по датам и номерам записей.
	ТаблицаЗаписейОСтаже.Сортировать("ДатаНачалаПериода,НомерДополнительнойЗаписи");

	// Уберем даты у дополнительных записей.
	Для Каждого Запись Из ТаблицаЗаписейОСтаже Цикл
		Если Запись.НомерДополнительнойЗаписи <> 0 Тогда
			Запись.ДатаНачалаПериода = "";
			Запись.ДатаОкончанияПериода = "";
		КонецЕсли;	 
	КонецЦикла;

	ЗаписиОСтаже.Загрузить(ТаблицаЗаписейОСтаже);
КонецПроцедуры	

&НаСервере
Процедура РасположитьЗаписиСтажаНаСервере()
	ВыполнитьНумерациюЗаписейОСтаже();
	СортироватьЗаписиСтажаНаСервере();
	ВыполнитьНумерациюЗаписейОСтаже();	
КонецПроцедуры

// Добавление полей заголовков.

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицФормы(Форма)
	ОписаниеКолонокЗаголовковТаблиц = Новый Соответствие;
		ОписаниеКолонокЗаголовковТаблиц.Вставить("ЗаписиОСтаже", ОписаниеКолонокЗаголовковТаблицы(Форма, "ЗаписиОСтаже")); 
	
	Возврат ОписаниеКолонокЗаголовковТаблиц;
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже(Форма)
	ОписаниеЗаголовковКолонок = Новый Массив;
		
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеНулевойПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеТерриториальныеУсловия";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеПараметрТерриториальныхУсловий";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеОснованиеИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеТретийПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеОснованиеВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеПервыйПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеВторойПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеТретийПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеПервыйПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеВторойПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	Возврат ОписаниеЗаголовковКолонок;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицы(Форма, ИмяТаблицы)
	Если ИмяТаблицы = "ЗаписиОСтаже" Тогда
		ОписаниеКолонок = ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже(Форма);
	КонецЕсли;	
		
	Возврат ОписаниеКолонок;
КонецФункции	

&НаКлиенте
Процедура ЗаписиОСтажеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда 
		ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВСтрокеТаблицы(ЭтотОбъект, Элементы.ЗаписиОСтаже.ТекущиеДанные, ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже(ЭтотОбъект));
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда 
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда 
		РасположитьЗаписиСтажаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
