#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ПодчиненныеСчетаФактуры; // таблица счетов-фактур, основанием которых является этот документ
	
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьДокумент() Экспорт

	ЗаполнитьСтрокиДокумента();

КонецПроцедуры

Процедура ЗаполнитьСтрокиДокумента() Экспорт

	ТаблицаРезультата = Состав.ВыгрузитьКолонки();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("СостояниеПредположения0", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	
	ТекстПостановление1137 = 
	"ВЫБРАТЬ
	|	НДСРеализация0Остатки.СчетФактура КАК ДокументОтгрузки,
	|	НДСРеализация0Остатки.ВидЦенности,
	|	НДСРеализация0Остатки.СтавкаНДС,
	|	НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток КАК ПродажиСНДС0,
	|	НДСРеализация0Остатки.КурсоваяРазницаОстаток КАК КурсоваяРазница,
	|	НДСРеализация0Остатки.Покупатель,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ПодтвержденаСтавка0) КАК Событие
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Состояние = &СостояниеПредположения0) КАК НДСРеализация0Остатки";

	ТекстПостановление735 = 
	"ВЫБРАТЬ
	|	НДСРеализация0Остатки.СчетФактура КАК ДокументОтгрузки,
	|	НДСРеализация0Остатки.СуммаБезНДСОстаток КАК ПродажиСНДС0,
	|	НДСРеализация0Остатки.Покупатель,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ПодтвержденаСтавка0) КАК Событие
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Состояние = &СостояниеПредположения0) КАК НДСРеализация0Остатки";
	
	Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Дата) >= 3 Тогда
		Запрос.Текст = ТекстПостановление735;
	Иначе
		Запрос.Текст = ТекстПостановление1137;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(РезультатЗапроса, ТаблицаРезультата);

	Состав.Загрузить(ТаблицаРезультата);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект, Ложь);
	// Далее вызов ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей() не требуется,
	// т.к. был передан параметр ВыборочноОчищатьРегистры = Ложь, и все действия уже выполнены.
	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ПодтверждениеНулевойСтавкиНДС.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИБ

	СтруктураТаблицСтавкаПодтверждена = УчетНДС.ПодготовитьТаблицуНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(
		ПараметрыПроведения.ТаблицаРеквизиты,
		ПараметрыПроведения.ТаблицаСтавкаПодтверждена, Движения);

	ТаблицаСтавкаПодтвержденаСнятиеБлокировкиВычета = СтруктураТаблицСтавкаПодтверждена.НДСПредъявленныйРеализация0СнятиеБлокировкиВычета;
	ТаблицаСтавкаПодтвержденаРеализация0 = СтруктураТаблицСтавкаПодтверждена.ТаблицаРеализация0;
		
	СтруктураТаблицСтавкаНеПодтверждена = УчетНДС.ПодготовитьТаблицуНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(
		ПараметрыПроведения.ТаблицаРеквизиты,
		ПараметрыПроведения.ТаблицаСтавкаНеПодтверждена, Движения);
		
	ТаблицаСтавкаНеПодтвержденаСнятиеБлокировкиВычета = СтруктураТаблицСтавкаНеПодтверждена.НДСПредъявленныйРеализация0СнятиеБлокировкиВычета;
	ТаблицаСтавкаНеПодтвержденаРеализация0 = СтруктураТаблицСтавкаНеПодтверждена.ТаблицаРеализация0;

	ТаблицаНДСНачисленныйСторно	= УчетНДС.ПодготовитьТаблицуНДСНачисленныйСторно(
		ПараметрыПроведения.ТаблицаРеквизиты,
		ПараметрыПроведения.ТаблицаСтавкаНеПодтверждена, Движения);

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	УчетНДС.СформироватьДвиженияСтавка0Подтверждена(
		ПараметрыПроведения.ТаблицаРеквизиты,
		ПараметрыПроведения.ТаблицаСтавкаПодтверждена,
		ПараметрыПроведения.ТаблицаСтавкаПодтвержденаРеализация0,
		ТаблицаСтавкаПодтвержденаСнятиеБлокировкиВычета,
		ТаблицаСтавкаПодтвержденаРеализация0,
		Движения, Отказ);

	УчетНДС.СформироватьДвиженияСтавка0НеПодтверждена(
		ПараметрыПроведения.ТаблицаРеквизиты,
		ПараметрыПроведения.ТаблицаСтавкаНеПодтверждена,
		ПараметрыПроведения.ТаблицаСтавкаНеПодтвержденаРеализация0,
		ТаблицаСтавкаНеПодтвержденаСнятиеБлокировкиВычета,
		ТаблицаНДСНачисленныйСторно,
		ТаблицаСтавкаНеПодтвержденаРеализация0,
		Движения, Отказ);
		
	Если НЕ Отказ И Движения.НДСЗаписиКнигиПродаж.Количество() > 0 Тогда
		Движения.НДСЗаписиКнигиПродаж.Записать(Истина);
		Движения.НДСЗаписиКнигиПродаж.Записывать = Ложь;
		ДополнитьДвиженияНДСДокументамиОплаты(Отказ);
	КонецЕсли;
	
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СформироватьДвиженияФактВыполненияРегламентнойОперации(
		ПараметрыПроведения.ДанныеРегламентнойОперации, Отказ);
		
	Движения.Записать();
	
	ОбновитьСчетаФактуры(РежимЗаписиДокумента.Проведение);

КонецПроцедуры

Процедура ДополнитьДвиженияНДСДокументамиОплаты(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактураДокумент,
	|	ПодтверждениеНулевойСтавкиНДССостав.ДокументОтгрузки КАК ДокументОтгрузки
	|ПОМЕСТИТЬ СчетаФактурыПоДокументамОтгрузки
	|ИЗ
	|	Документ.ПодтверждениеНулевойСтавкиНДС.Состав КАК ПодтверждениеНулевойСтавкиНДССостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО ПодтверждениеНулевойСтавкиНДССостав.ДокументОтгрузки = СчетФактураВыданныйДокументыОснования.ДокументОснование
	|ГДЕ
	|	ПодтверждениеНулевойСтавкиНДССостав.Ссылка = &Ссылка
	|	И ПодтверждениеНулевойСтавкиНДССостав.СчетФактураВыданный = ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодтверждениеНулевойСтавкиНДССостав.ДокументОтгрузки,
	|	ПодтверждениеНулевойСтавкиНДССостав.ДокументОтгрузки
	|ИЗ
	|	Документ.ПодтверждениеНулевойСтавкиНДС.Состав КАК ПодтверждениеНулевойСтавкиНДССостав
	|ГДЕ
	|	ПодтверждениеНулевойСтавкиНДССостав.Ссылка = &Ссылка
	|	И ПодтверждениеНулевойСтавкиНДССостав.ДокументОтгрузки ССЫЛКА Документ.СчетФактураВыданный
	|	И ПодтверждениеНулевойСтавкиНДССостав.СчетФактураВыданный = ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МАКСИМУМ(НДСЗаписиКнигиПродаж.Период) КАК Период,
	|	МАКСИМУМ(НДСЗаписиКнигиПродаж.Организация) КАК Организация,
	|	МАКСИМУМ(НДСЗаписиКнигиПродаж.Покупатель) КАК Покупатель,
	|	МАКСИМУМ(НДСЗаписиКнигиПродаж.СчетФактура) КАК СчетФактура,
	|	МАКСИМУМ(НДСЗаписиКнигиПродаж.ВидЦенности) КАК ВидЦенности,
	|	МАКСИМУМ(НДСЗаписиКнигиПродаж.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(НДСЗаписиКнигиПродаж.ДатаОплаты) КАК ДатаОплаты,
	|	МАКСИМУМ(НДСЗаписиКнигиПродаж.ДокументОплаты) КАК ДокументОплаты,
	|	МАКСИМУМ(НДСЗаписиКнигиПродаж.Событие) КАК Событие,
	|	МАКСИМУМ(НДСЗаписиКнигиПродаж.ДатаСобытия) КАК ДатаСобытия,
	|	МАКСИМУМ(НДСЗаписиКнигиПродаж.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	|	СчетаФактурыПоДокументамОтгрузкиПредварительная.СчетФактураДокумент КАК СчетФактураДокумент,
	|	МАКСИМУМ(НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста) КАК ЗаписьДополнительногоЛиста,
	|	МАКСИМУМ(НДСЗаписиКнигиПродаж.КорректируемыйПериод) КАК КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|ПОМЕСТИТЬ ДвиженияПоСчетамФактурам
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаФактурыПоДокументамОтгрузки КАК СчетаФактурыПоДокументамОтгрузкиПредварительная
	|		ПО НДСЗаписиКнигиПродаж.СчетФактура = СчетаФактурыПоДокументамОтгрузкиПредварительная.ДокументОтгрузки
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаФактурыПоДокументамОтгрузкиПредварительная.СчетФактураДокумент,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактураДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияПоСчетамФактурам.Период,
	|	ДвиженияПоСчетамФактурам.Организация,
	|	ДвиженияПоСчетамФактурам.Покупатель,
	|	ДвиженияПоСчетамФактурам.СчетФактура,
	|	ДвиженияПоСчетамФактурам.ВидЦенности,
	|	ДвиженияПоСчетамФактурам.СтавкаНДС,
	|	ДвиженияПоСчетамФактурам.ДатаОплаты,
	|	ДвиженияПоСчетамФактурам.ДокументОплаты,
	|	ДвиженияПоСчетамФактурам.Событие,
	|	ДвиженияПоСчетамФактурам.ДатаСобытия,
	|	ДвиженияПоСчетамФактурам.ДоговорКонтрагента,
	|	СчетФактураВыданныйПлатежноРасчетныеДокументы.НомерДокумента КАК НомерДокументаОплаты,
	|	СчетФактураВыданныйПлатежноРасчетныеДокументы.ДатаДокумента КАК ДатаДокументаОплаты,
	|	ДвиженияПоСчетамФактурам.ЗаписьДополнительногоЛиста,
	|	ДвиженияПоСчетамФактурам.КорректируемыйПериод
	|ИЗ
	|	ДвиженияПоСчетамФактурам КАК ДвиженияПоСчетамФактурам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ПлатежноРасчетныеДокументы КАК СчетФактураВыданныйПлатежноРасчетныеДокументы
	|		ПО ДвиженияПоСчетамФактурам.СчетФактураДокумент = СчетФактураВыданныйПлатежноРасчетныеДокументы.Ссылка";
	
	ТаблицаНомеровДокументовОплаты = Запрос.Выполнить().Выгрузить();
	УчетНДС.СформироватьДвиженияНДСНомераДокументовОплаты(ТаблицаНомеровДокументовОплаты, Движения, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СброситьФактВыполненияОперации(Ссылка);
		
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	ОбновитьСчетаФактуры(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	СформироватьСчетаФактуры(Отказ);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись
		И НЕ РучнаяКорректировка Тогда
		ОбновитьСчетаФактуры(РежимЗаписиДокумента.Запись);
	КонецЕсли; 

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

	Для каждого СтрокаТЧ Из Состав Цикл
		СтрокаТЧ.СчетФактураВыданный = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ВерсияПостановления1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Дата);
	
	Если ВерсияПостановления1137 >= 3 Тогда
	
		// Проверим, что в табличной части нет дублей документов отгрузки
		
		ТаблицаСостав = ЭтотОбъект.Состав;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаСостав", ТаблицаСостав);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСостав.ДокументОтгрузки КАК ДокументОтгрузки
		|ПОМЕСТИТЬ КоличествоДокументов
		|ИЗ
		|	&ТаблицаСостав КАК ТаблицаСостав
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоДокументов.ДокументОтгрузки) КАК КоличествоРазличныхДокументов
		|ИЗ
		|	КоличествоДокументов КАК КоличествоДокументов";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Если Выборка.КоличествоРазличныхДокументов <> ТаблицаСостав.Количество() Тогда
			
				ИмяСписка = НСтр("ru = 'Документы реализации'");
				ТекстСообщенияДублиДокументов = НСтр("ru = 'Не допускается повторное указание документа отгрузки.'");
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "Корректность",
					, , ИмяСписка, ТекстСообщенияДублиДокументов);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Состав", "Объект", Отказ);
			
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	ТребуетсяСтатьяПрочихРасходов = Ложь;
	
	// Проверка табличной части
	Для Каждого СтрокаТаблицы Из Состав Цикл

		Префикс = "Состав[" + (СтрокаТаблицы.НомерСтроки - 1) + "].";
		ИмяСписка = НСтр("ru = 'Документы реализации'");

		Если СтрокаТаблицы.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",,
							НСтр("ru = 'Сумма НДС'"),
							СтрокаТаблицы.НомерСтроки, ИмяСписка);
			Поле = Префикс + "СуммаНДС";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ВерсияПостановления1137 < 3
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидЦенности) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",,
							НСтр("ru = 'Вид ценности'"),
							СтрокаТаблицы.НомерСтроки, ИмяСписка);
			Поле = Префикс + "ВидЦенности";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если СтрокаТаблицы.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0 Тогда
			ТребуетсяСтатьяПрочихРасходов = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если НЕ ТребуетсяСтатьяПрочихРасходов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяПрочихРасходов");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбновитьСчетаФактуры(РежимЗаписи)

	Перем РегистрыТребующиеОчисткиПоДокументам;
	
	Если Не УчетНДСБП.УстановитьУправляемуюБлокировку("СчетФактураВыданный", ПодчиненныеСчетаФактуры) Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект);
	ДополнительныеСвойства.Свойство("РегистрыТребующиеОчисткиПоДокументам", РегистрыТребующиеОчисткиПоДокументам);
	
	ОтборПоДокументуОснованию = Новый Структура("ДокументОснование", Ссылка);
	Для каждого СтрокаСФ Из ПодчиненныеСчетаФактуры Цикл
		
		СФНеНужен = (ПометкаУдаления Или Не СтрокаСФ.Использован);
		
		Если СФНеНужен И СтрокаСФ.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
		ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ГрупповоеПерепроведение);
		Если РегистрыТребующиеОчисткиПоДокументам <> Неопределено Тогда
			ДокументСФ.ДополнительныеСвойства.Вставить("РегистрыТребующиеОчисткиПоДокументам",
				РегистрыТребующиеОчисткиПоДокументам);
		КонецЕсли;
		
		Если СФНеНужен И ДокументСФ.ДокументыОснования.Количество() <= 1 Тогда
			ДокументСФ.УстановитьПометкуУдаления(Истина);
			Продолжить;
		КонецЕсли;
			
		Если СФНеНужен Тогда
			
			СтрокиТекОснования = ДокументСФ.ДокументыОснования.НайтиСтроки(ОтборПоДокументуОснованию);
			Для каждого СтрокаТекОснования Из СтрокиТекОснования Цикл
				ДокументСФ.ДокументыОснования.Удалить(СтрокаТекОснования);
			КонецЦикла;
			РежимЗаписиСФ = ?(ДокументСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			
		Иначе
			
			Если ДокументСФ.ПометкаУдаления Тогда
				ДокументСФ.ПометкаУдаления = Ложь;
			КонецЕсли;
			РежимЗаписиСФ = РежимЗаписи;
			Если ДокументСФ.Проведен И РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.ОтменаПроведения;
			ИначеЕсли НЕ ДокументСФ.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.Проведение;
			КонецЕсли;

		КонецЕсли;
		ДокументСФ.Записать(РежимЗаписиСФ);
	
	КонецЦикла;

КонецПроцедуры

Процедура СформироватьСчетаФактуры(Отказ)
	
	ДанныеСчетовФактур = ДанныеСчетовФактурПоДокументу();
	
	Если ЭтоНовый() Тогда
		ДокументСсылка = ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
			ДокументСсылка = Документы.ПодтверждениеНулевойСтавкиНДС.ПолучитьСсылку();
			УстановитьСсылкуНового(ДокументСсылка);
		КонецЕсли;
	Иначе
		ДокументСсылка = Ссылка;
	КонецЕсли;
	
	ПодчиненныеСчетаФактуры = НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур);
	
	ЗаполнитьСчетаФактурыВДокументе();
	
КонецПроцедуры

Функция ДанныеСчетовФактурПоДокументу()

	ДанныеСчетовФактур = ЭтотОбъект.Состав.ВыгрузитьКолонки("Покупатель,ДокументОтгрузки,СчетФактураВыданный,ПродажиСНДС0,СуммаНДС");
	
	НеобходимоСоставитьСчетФактуру = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Дата) >= 3;
	
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Состав Цикл
		Если СтрокаТабличнойЧасти.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0
			И НеобходимоСоставитьСчетФактуру Тогда
			НоваяСтрока = ДанныеСчетовФактур.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактураВыданный) Тогда
			СтрокаТабличнойЧасти.СчетФактураВыданный = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеСчетовФактур.Свернуть("Покупатель,ДокументОтгрузки,СчетФактураВыданный", "ПродажиСНДС0,СуммаНДС");
	
	Возврат ДанныеСчетовФактур;

КонецФункции

Функция НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур)

	ТаблицаПодчиненныеСчетаФактуры = ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументСсылка);
	
	Для каждого СтрокаТаблицы Из ДанныеСчетовФактур Цикл
		
		РанееСозданныйСчетФактура = НайтиСчетФактуруВТаблице(ТаблицаПодчиненныеСчетаФактуры, СтрокаТаблицы);
		
		Если РанееСозданныйСчетФактура = Неопределено Тогда
			
			Если НЕ УчетНДС.ФорматныйКонтрольИННиКППКонтрагентаПройден(СтрокаТаблицы.Покупатель, "Выданный", Ложь) Тогда 
				Продолжить;
			КонецЕсли;
			
			НовыйСчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
			
			НовыйСчетФактура.Дата                  = ЭтотОбъект.Дата;
			НовыйСчетФактура.Организация           = ЭтотОбъект.Организация;
			НовыйСчетФактура.Ответственный         = Пользователи.ТекущийПользователь();
			НовыйСчетФактура.Контрагент            = СтрокаТаблицы.Покупатель;
			НовыйСчетФактура.ВидСчетаФактуры       = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			НовыйСчетФактура.КодВидаОперации       = "01";
			НовыйСчетФактура.Сумма                 = СтрокаТаблицы.ПродажиСНДС0 + СтрокаТаблицы.СуммаНДС;
			НовыйСчетФактура.СуммаНДС              = СтрокаТаблицы.СуммаНДС;
			НовыйСчетФактура.Выставлен             = Истина;
			НовыйСчетФактура.КодСпособаВыставления = 1;
			НовыйСчетФактура.ДатаВыставления       = ЭтотОбъект.Дата;
			
			НовыйСчетФактура.Комментарий = НСтр("ru = 'Создан автоматически на основании документа подтверждение нулевой ставки НДС'");
			
			ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(НовыйСчетФактура);
			
			НовыйСчетФактура.ДокументыОснования.Добавить().ДокументОснование = ДокументСсылка;
			
			НовыйСчетФактура.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
			НовыйСчетФактура.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
			Если ДополнительныеСвойства.Свойство("РегистрыТребующиеОчисткиПоДокументам") Тогда
				НовыйСчетФактура.ДополнительныеСвойства.Вставить("РегистрыТребующиеОчисткиПоДокументам",
					ДополнительныеСвойства.РегистрыТребующиеОчисткиПоДокументам);
			КонецЕсли;
			НовыйСчетФактура.Записать();
			
			// Этот новый счет-фактуру нужно зафиксировать в таблице счетов-фактур
			НоваяСтрока = ТаблицаПодчиненныеСчетаФактуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйСчетФактура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПодчиненныеСчетаФактуры;

КонецФункции

Процедура ЗаполнитьСчетаФактурыВДокументе()

	НеобходимоСоставитьСчетФактуру = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Дата) >= 3;
	
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Состав Цикл
		Если СтрокаТабличнойЧасти.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0
			И НеобходимоСоставитьСчетФактуру Тогда
			РанееСозданныйСчетФактура = НайтиСчетФактуруВТаблице(ПодчиненныеСчетаФактуры, СтрокаТабличнойЧасти);
			Если РанееСозданныйСчетФактура <> Неопределено Тогда
				СтрокаТабличнойЧасти.СчетФактураВыданный = РанееСозданныйСчетФактура.Ссылка;
				РанееСозданныйСчетФактура.Использован = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументСсылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактура.Ссылка КАК Ссылка,
	|	СчетФактура.Контрагент КАК Контрагент,
	|	СчетФактура.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СчетФактура.Проведен,
	|	СчетФактура.ПометкаУдаления КАК ПометкаУдаления,
	|	ПодтверждениеНулевойСтавкиНДССостав.ДокументОтгрузки
	|ИЗ
	|	Документ.ПодтверждениеНулевойСтавкиНДС.Состав КАК ПодтверждениеНулевойСтавкиНДССостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактура
	|		ПО ПодтверждениеНулевойСтавкиНДССостав.СчетФактураВыданный = СчетФактура.Ссылка
	|ГДЕ
	|	ПодтверждениеНулевойСтавкиНДССостав.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактура.Дата,
	|	ПометкаУдаления УБЫВ,
	|	Ссылка";

	ТаблицаПодчиненныеСчетаФактуры = Запрос.Выполнить().Выгрузить();
	ТаблицаПодчиненныеСчетаФактуры.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаПодчиненныеСчетаФактуры;

КонецФункции

Функция НайтиСчетФактуруВТаблице(ТаблицаПодчиненныеСчетаФактуры, СтрокаДокумента)
	
	СтруктураПоиска = Новый Структура("Ссылка", СтрокаДокумента.СчетФактураВыданный);
	НайденныеСтроки = ТаблицаПодчиненныеСчетаФактуры.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Контрагент = СтрокаДокумента.Покупатель ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Контрагент) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;

	Для Каждого НайденнаяСтрока Из ТаблицаПодчиненныеСчетаФактуры Цикл
		Если (НайденнаяСтрока.Контрагент = СтрокаДокумента.Покупатель ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Контрагент))
			И НайденнаяСтрока.ДокументОтгрузки = СтрокаДокумента.ДокументОтгрузки Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

#КонецЕсли

