
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ИнициализацияПеременныхМодуля

Перем мУдалятьДвижения Экспорт; // Хранит признак новый ли это документ.

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Заполняет табличную часть документа всеми членами ТСЖ.
Процедура ЗаполнитьТабличнуюЧасть() Экспорт
	
	МассивЧленовТСЖ = Документы.КВП_ВступлениеВТСЖ.ПолучитьМассивЧленовТСЖ(Дата, Организация);
	
	Для Каждого ЧленТСЖ ИЗ МассивЧленовТСЖ Цикл
		НоваяСтрока = СоставПравления.Добавить();
		НоваяСтрока.ЧленТСЖ = ЧленТСЖ;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

// Не может быть более 1 председателя правления. Выполним проверку на их количество.
Процедура ПроверитьКоличествоПредседателей(РольЧленаТСЖ, Отказ)
	
	СтрокиПредседатели = СоставПравления.НайтиСтроки(Новый Структура("Роль, ИзбранПредседателем", РольЧленаТСЖ, Истина));
	
	Если СтрокиПредседатели.Количество() > 1 Тогда
		СрокиПредседателейПересекаются = Ложь;
		ПроверитьСрокиПредседателей(СтрокиПредседатели, СрокиПредседателейПересекаются);
		
		Если СрокиПредседателейПересекаются Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В один момент не может быть более одного председателя "
															 + ?(РольЧленаТСЖ = Перечисления.УПЖКХ_РолиЧленовТСЖ.ВСоставеПравленияТСЖ, "правления ТСЖ", "ревизионной комиссии") + ".",
															 Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКоличествоПредседателей()

// Проверяет: не пересекаются ли сроки правления председателей.
Процедура ПроверитьСрокиПредседателей(СтрокиПредседатели, СрокиПредседателейПересекаются)
	
	Если СтрокиПредседатели.Количество() > 0 Тогда
		ТекущийПредседатель = СтрокиПредседатели.Получить(0);
		
		СтрокиПредседатели.Удалить(0);
		Для Каждого СтрокаПредседателя Из СтрокиПредседатели Цикл
			Если (ТекущийПредседатель.ДатаНачала >= СтрокаПредседателя.ДатаНачала И ТекущийПредседатель.ДатаНачала <= СтрокаПредседателя.ДатаОкончания)
			 ИЛИ (ТекущийПредседатель.ДатаОкончания >= СтрокаПредседателя.ДатаНачала И ТекущийПредседатель.ДатаОкончания <= СтрокаПредседателя.ДатаОкончания)
			 ИЛИ (ТекущийПредседатель.ДатаОкончания <= СтрокаПредседателя.ДатаНачала И ТекущийПредседатель.ДатаОкончания >= СтрокаПредседателя.ДатаОкончания) Тогда
				СрокиПредседателейПересекаются = Истина;
				Возврат;
			Иначе
				ПроверитьСрокиПредседателей(СтрокиПредседатели, СрокиПредседателейПересекаются);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСрокиПредседателей()

#КонецОбласти

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события "Проведение" документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если мУдалятьДвижения Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	КонецЕсли;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.УПЖКХ_СоставПравленияТСЖИРевизионнойКомиссии.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Обработчик проверки заполнения документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если СоставПравления.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан состав правления.", Отказ);
	КонецЕсли;
	
	Для Каждого Строка Из СоставПравления Цикл
		Если Строка.ДатаНачала > Строка.ДатаОкончания Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке " + Строка.НомерСтроки + " дата окончания меньше даты начала.", Отказ);
		КонецЕсли;
	КонецЦикла;
	
	ПроверитьКоличествоПредседателей(Перечисления.УПЖКХ_РолиЧленовТСЖ.ВСоставеПравленияТСЖ, Отказ);
	ПроверитьКоличествоПредседателей(Перечисления.УПЖКХ_РолиЧленовТСЖ.ВСоставеРевизионнойКомиссии, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Формирует движения документа по регистрам.
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Для Каждого Строка Из СоставПравления Цикл
		Движение = Движения.УПЖКХ_СоставПравленияТСЖИРевизионнойКомиссии.Добавить();
		Движение.Период                = СтруктураШапкиДокумента.Дата;
		Движение.Организация           = СтруктураШапкиДокумента.Организация;
		Движение.ЧленТСЖ               = Строка.ЧленТСЖ;
		Движение.Роль                  = Строка.Роль;
		Движение.ВходитВСостав         = Истина;
		Движение.ЯвляетсяПредседателем = Строка.ИзбранПредседателем;
		Движение.ДатаОперации          = Строка.ДатаНачала;
		
		Движение = Движения.УПЖКХ_СоставПравленияТСЖИРевизионнойКомиссии.Добавить();
		Движение.Период                = СтруктураШапкиДокумента.Дата + 1;
		Движение.Организация           = СтруктураШапкиДокумента.Организация;
		Движение.ЧленТСЖ               = Строка.ЧленТСЖ;
		Движение.Роль                  = Строка.Роль;
		Движение.ВходитВСостав         = Ложь;
		Движение.ЯвляетсяПредседателем = Строка.ИзбранПредседателем;
		Движение.ДатаОперации          = Строка.ДатаОкончания;
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти


#КонецЕсли