#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 14, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетКасса", "НаличныеДеньги");
	
	// Табличная часть Товары
	
	//   Запасы (кроме оборудования, розницы в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",           "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Услуги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	
	//   Выручка (кроме оборудования, розницы в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетДоходов", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетЗапасов", "СчетУчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СобственныеЗапасы");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",                 "ВидДеятельности");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",  "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов",             "Расходы");
	
	// Запасы (розница в ценах продажи АТТ)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",           "ЗапасыВЦенахПродажи");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Услуги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТоварыВЦенахПродажиАТТ");
	
	//   Выручка (розница в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетДоходов", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетЗапасов", "СчетУчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Услуги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СобственныеЗапасы");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",                 "ВидДеятельности");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",  "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов",             "Расходы");
	
	// Запасы (розница в ценах продажи НТТ)
	// В НТТ в продажных ценах документом отражается только комиссия
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",           "ТоварыПринятыеНаКомиссию");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Услуги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТоварыВЦенахПродажиНТТ");
	
	// Услуги
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетДоходов", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Услуги");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",                 "ВидДеятельности");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",  "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов",             "Расходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ТребуетсяСчетРасходовПоОказаниюУслуг");
	
	#Область Возвраты
	
	//   Запасы (кроме оборудования, розницы в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Возвраты", "СчетУчета",           "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Услуги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	
	//   Выручка (кроме оборудования, розницы в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетДоходов", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетЗапасов", "СчетУчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СобственныеЗапасы");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",                 "ВидДеятельности");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",  "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов",             "Расходы");
	
	// Запасы (розница в ценах продажи АТТ)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Возвраты", "СчетУчета",           "ЗапасыВЦенахПродажи");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Услуги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТоварыВЦенахПродажиАТТ");
	
	//   Выручка (розница в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетДоходов", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетЗапасов", "СчетУчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Услуги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СобственныеЗапасы");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",                 "ВидДеятельности");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",  "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов",             "Расходы");
	
	// Запасы (розница в ценах продажи НТТ)
	// В НТТ в продажных ценах документом отражается только комиссия
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Возвраты", "СчетУчета",           "ТоварыПринятыеНаКомиссию");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Услуги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТоварыВЦенахПродажиНТТ");
	
	#КонецОбласти
	
	// Табличная часть Агентские услуги
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "АгентскиеУслуги", "СчетРасчетов", "РасчетыСКомитентом");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент",         "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДеятельностьНаПатенте");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт 
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьРеквизитыПриИзменении(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью


Процедура ЗаполнитьСчетРасчетовВСтрокеАгентскойУслуги(Объект, СтрокаТаблицы) Экспорт

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация,  СтрокаТаблицы.Контрагент,  СтрокаТаблицы.ДоговорКонтрагента);

	СтрокаТаблицы.СчетРасчетов = СчетаУчета.СчетРасчетовСКомитентом;

КонецПроцедуры

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, ДеятельностьНаПатенте, Склад, Реализация, АТТПоПродажнойСтоимости, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	ДанныеОбъекта.АТТПоПродажнойСтоимости = 
		ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах
		И (УчетнаяПолитика.СпособОценкиТоваровВРознице(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)
		И НЕ  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.Склад, "ТипСклада") = Перечисления.ТипыСкладов.ОптовыйСклад;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхПродажахТовары.Номенклатура КАК Номенклатура,
	|	ОтчетОРозничныхПродажахТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|ГДЕ
	|	ОтчетОРозничныхПродажахТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхПродажахАгентскиеУслуги.Номенклатура,
	|	ОтчетОРозничныхПродажахАгентскиеУслуги.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК ОтчетОРозничныхПродажахАгентскиеУслуги
	|ГДЕ
	|	ОтчетОРозничныхПродажахАгентскиеУслуги.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Вызывается документом СчетФактураВыданный на аванс при вводе на основании
//
Функция ТекстЗапросаСчетФактураВыданныйНаАвансРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ВидыОплат.Контрагент КАК Контрагент,
	|	ВидыОплат.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	ВидыОплат.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс КАК Номенклатура,
	|	ВидыОплат.СчетУчетаРасчетов КАК СчетАвансов,
	|	ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка) КАК СчетНаОплату,
	|	ВЫБОР
	|		КОГДА &ПлательщикНДС
	|			ТОГДА &РасчетнаяСтавкаНДСПоУмолчанию
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	КОНЕЦ КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.ПустаяСсылка) КАК СпособПогашенияЗадолженности
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплат
	|		ПО ТаблицаДокумента.ВидОплаты = ВидыОплат.Ссылка
	|			И (ВидыОплат.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный))
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыОплат.ДоговорКонтрагента,
	|	ТаблицаДокумента.Ссылка,
	|	ВидыОплат.СчетУчетаРасчетов,
	|	ВидыОплат.Контрагент,
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ВидыОплат.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс"
	;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// При вводе на основании счета на оплату и поступления товаров и услуг, 
	// открывается форма, содержащая только ТЧ Товары или только ТЧ Услуги, если
	// у документа-основания заполнена только соответствующая таблица.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидОперации) И ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда
		ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ФормыДокумента = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыДокумента[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыДокумента = Новый Соответствие;
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах, "ФормаДокументаОбщая");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах, "ФормаДокументаОбщая");
	
	Возврат ФормыДокумента;

КонецФункции

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Основание);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИнвентаризацияТоваровНаСкладе.Склад.ТипСклада КАК ТипСклада
			|ИЗ
			|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
			|ГДЕ
			|	ИнвентаризацияТоваровНаСкладе.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И Выборка.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидОперации;

КонецФункции

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчета") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		Если ДанныеОбъекта.АТТПоПродажнойСтоимости И НЕ СчетаУчета.СчетУчетаЯвляетсяЗабалансовым Тогда
			СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		ИначеЕсли ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда 
			СтрокаТабличнойЧасти.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетДоходов) Тогда
			СтрокаТабличнойЧасти.СчетДоходов = СчетаУчета.СчетДоходов;
		КонецЕсли;
		
		Если СведенияОНоменклатуре.Свойство("Субконто")
			И ЗначениеЗаполнено(СведенияОНоменклатуре.Субконто) Тогда
			
			СтрокаТабличнойЧасти.Субконто = СведенияОНоменклатуре.Субконто;
			
		ИначеЕсли СведенияОНоменклатуре.Свойство("ВидСубконтоТипЗначения")
			И ЗначениеЗаполнено(СведенияОНоменклатуре.ВидСубконтоТипЗначения) Тогда
			
			СтрокаТабличнойЧасти.Субконто =
				СведенияОНоменклатуре.ВидСубконтоТипЗначения.ПривестиЗначение(СтрокаТабличнойЧасти.Субконто);
			
		Иначе
			СтрокаТабличнойЧасти.Субконто = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетРасходов) Тогда
			СтрокаТабличнойЧасти.СчетРасходов = СчетаУчета.СчетРасходов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПродажи) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Заполнение табличной части проданными товарами по инвентаризации товаров на розничном складе
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОбъект, ДокументОснование) Экспорт

	РеквизитыИнвентаризацииТоваров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументОснование, "Склад");
	
	Если ЗначениеЗаполнено(РеквизитыИнвентаризацииТоваров.Склад) Тогда
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыИнвентаризацииТоваров.Склад, "ТипСклада");
	Иначе
		РеквизитыСклада = Новый Структура;
		РеквизитыСклада.Вставить("ТипСклада");
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка"         , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТипСклада"			   , РеквизитыСклада.ТипСклада);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокСписание.Номенклатура КАК Номенклатура,
	|	ДокСписание.СчетУчета КАК СчетУчета,
	|	ДокСписание.Ссылка.Склад КАК Склад,
	|	ДокСписание.Количество КАК Количество,
	|	ДокСписание.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_ВложенныйЗапрос
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК ДокСписание
	|ГДЕ
	|	ДокСписание.Ссылка.Проведен
	|	И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокОтчетККМ.Номенклатура,
	|	ДокОтчетККМ.СчетУчета,
	|	ДокОтчетККМ.Ссылка.Склад,
	|	ДокОтчетККМ.Количество,
	|	ДокОтчетККМ.Цена
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ДокОтчетККМ
	|ГДЕ
	|	ДокОтчетККМ.Ссылка <> &ДокументСсылка
	|	И ДокОтчетККМ.Ссылка.Проведен
	|	И ДокОтчетККМ.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СчетУчета,
	|	Склад,
	|	Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.СчетУчета КАК СчетУчета,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	ЕСТЬNULL(СУММА(ВТ_ВложенныйЗапрос.Количество), 0) КАК КоличествоСписанное,
	|	Док.ЦенаВРознице КАК Цена
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВложенныйЗапрос КАК ВТ_ВложенныйЗапрос
	|		ПО Док.Номенклатура = ВТ_ВложенныйЗапрос.Номенклатура
	|			И Док.СчетУчета = ВТ_ВложенныйЗапрос.СчетУчета
	|			И Док.Ссылка.Склад = ВТ_ВложенныйЗапрос.Склад
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.КоличествоУчет - Док.Количество > 0
	|	И &ТипСклада <> ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	Док.ЦенаВРознице
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество),
	|	МИНИМУМ(Док.НомерСтроки),
	|	ЕСТЬNULL(СУММА(ВТ_ВложенныйЗапрос.Количество), 0),
	|	Док.ЦенаВРознице
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВложенныйЗапрос КАК ВТ_ВложенныйЗапрос
	|		ПО Док.Номенклатура = ВТ_ВложенныйЗапрос.Номенклатура
	|			И Док.СчетУчета = ВТ_ВложенныйЗапрос.СчетУчета
	|			И Док.Ссылка.Склад = ВТ_ВложенныйЗапрос.Склад
	|			И Док.ЦенаВРознице = ВТ_ВложенныйЗапрос.Цена
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.КоличествоУчет - Док.Количество > 0
	|	И &ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	Док.ЦенаВРознице
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В документе ""%1"" № %2 отсутствуют товары, учетное количество которых превышает фактическое.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			ДокументОснование.Метаданные().Представление(),
			ДокументОснование.Номер);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(ДокументОбъект.Организация, ДокументОбъект.Дата);
	Комиссия = (ДокументОбъект.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
		И (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	ТипСклада	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Склад, "ТипСклада");
	СпособОценкиТоваровВРознице	= УчетнаяПолитика.СпособОценкиТоваровВРознице(ДокументОбъект.Организация, ДокументОбъект.Дата);
	
	АТТПоПродажнойСтоимости	= (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)
		И ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах
		И НЕ ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
	
	ТаблицаТоваров	= РезультатЗапроса.Выгрузить();
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ДеятельностьНаПатенте, Склад,
		|ТипЦен, ВалютаДокумента, КурсДокумента, КратностьДокумента,
		|СуммаВключаетНДС, Реализация, АТТПоПродажнойСтоимости, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументОбъект);
	ДанныеОбъекта.АТТПоПродажнойСтоимости = АТТПоПродажнойСтоимости;
	ДанныеОбъекта.Реализация = Истина;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		КоличествоСписать = СтрокаТоваров.КоличествоОтклонение - СтрокаТоваров.КоличествоСписанное;
		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = ДокументОбъект.Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура	= СтрокаТоваров.Номенклатура;
		СтрокаТабличнойЧасти.Количество		= КоличествоСписать;
		
		СведенияОНоменклатуре	= СоответствиеСведенийОНоменклатуре.Получить(СтрокаТоваров.Номенклатура);
		
		Если СведенияОНоменклатуре <> Неопределено Тогда
			
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
			
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			
		КонецЕсли;
		
		Если РеквизитыСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТоваров.Цена;
		ИначеЕсли СведенияОНоменклатуре <> Неопределено Тогда
			СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект.СуммаВключаетНДС);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет реквизит "ДеятельностьНаТорговомСборе" по данным учета и данным документа.
//
Процедура УстановитьДеятельностьНаТорговомСборе(Объект) Экспорт
	
	СпособОценкиТоваров = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	НТТВПродажныхЦенах = (Объект.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах)
		И (СпособОценкиТоваров = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	Если Не Объект.ДеятельностьНаПатенте И Не НТТВПродажныхЦенах Тогда
		Объект.ДеятельностьНаТорговомСборе =
			ТорговыйСбор.ДеятельностьНаТорговомСбореПриУСНДоходы(Объект.Организация, Объект.Склад, Объект.Дата);
	ИначеЕсли Объект.ДеятельностьНаТорговомСборе Тогда
		Объект.ДеятельностьНаТорговомСборе = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	
	Возврат МассивРеквизитов;
	
КонецФункции

Функция ЕстьОплатаПлатежнойКартойНТТ(Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		Возврат Ложь;
	КонецЕсли; 

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Склад", Реквизиты.Склад);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	Если Реквизиты.УчетПоПродажнойСтоимости Тогда
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
						|	ОплатаПлатежнойКартой.Ссылка
						|ИЗ
						|	Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
						|ГДЕ
						|	ОплатаПлатежнойКартой.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И &Период
						|	И ОплатаПлатежнойКартой.Организация = &Организация
						|	И ЕСТЬNULL(ОплатаПлатежнойКартой.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &ПодразделениеОрганизации
						|	И ОплатаПлатежнойКартой.Контрагент = &Склад
						|	И ОплатаПлатежнойКартой.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка)";
	
	Иначе
	
		Запрос.Текст = "ВЫБРАТЬ
						|	ХозрасчетныйОстатки.СуммаОстаток
						|ИЗ
						|	РегистрБухгалтерии.Хозрасчетный.Остатки(
						|			&Период,
						|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручкаБН),
						|			&ВидыСубконто,
						|			Организация = &Организация
						|				И ЕСТЬNULL(Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &ПодразделениеОрганизации
						|				И Субконто1 = &Склад) КАК ХозрасчетныйОстатки
						|ГДЕ
						|	ХозрасчетныйОстатки.СуммаОстаток > 0";
						
	КонецЕсли;
					
	Возврат НЕ Запрос.Выполнить().Пустой();	

КонецФункции 

Функция ПодготовитьТаблицуНДСДокументаСторноВыручки(ТаблицаСторноВыручки, ТаблицаРеквизиты, ДокументСсылка) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаСторноВыручки) 
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ ПлательщикНДС
		И НЕ УчетНДС.ВедетсяУчетНДСПоФЗ134(Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаНДС = Новый ТаблицаЗначений;
	ТаблицаНДС.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов("ДокументСсылка.ОтчетОРозничныхПродажах"));
	ТаблицаНДС.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаНДС.Колонки.Добавить("Организация", 	 Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаНДС.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаНДС.Колонки.Добавить("СчетДоходов", 	 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаНДС.Колонки.Добавить("СтавкаНДС", 	 Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаНДС.Колонки.Добавить("СчетУчетаНДС",  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаНДС.Колонки.Добавить("Содержание", 	 ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаНДС.Колонки.Добавить("Субконто", 	 Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаНДС.Колонки.Добавить("СуммаБезНДС", 	 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаНДС.Колонки.Добавить("НДС", 			 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для Каждого СтрокаСторноВыручки ИЗ ТаблицаСторноВыручки Цикл
		
		Если НЕ ПлательщикНДС Тогда
			Если СтрокаСторноВыручки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС
				ИЛИ СтрокаСторноВыручки.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		НоваяСтрокаНДС = ТаблицаНДС.Добавить();
		НоваяСтрокаНДС.СчетДоходов 	= СтрокаСторноВыручки.СчетДоходов;
		НоваяСтрокаНДС.СтавкаНДС 	= СтрокаСторноВыручки.СтавкаНДС;
		НоваяСтрокаНДС.СуммаБезНДС 	= СтрокаСторноВыручки.СуммаРуб - СтрокаСторноВыручки.СуммаНДСРуб;
		НоваяСтрокаНДС.НДС 			= СтрокаСторноВыручки.СуммаНДСРуб;
	КонецЦикла;
	
	ТаблицаНДС.Свернуть("ДокументОснование, Период, Организация, Подразделение, СчетДоходов, СтавкаНДС,
		|СчетУчетаНДС, Содержание, Субконто", "СуммаБезНДС, НДС");
	
	ТаблицаНДС.ЗаполнитьЗначения(Реквизиты.Регистратор,					"ДокументОснование");
	ТаблицаНДС.ЗаполнитьЗначения(Реквизиты.Период, 						"Период");
	ТаблицаНДС.ЗаполнитьЗначения(Реквизиты.Организация, 				"Организация");
	ТаблицаНДС.ЗаполнитьЗначения(Реквизиты.Подразделение, 				"Подразделение");
	ТаблицаНДС.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.Продажи_НДС, 	"СчетУчетаНДС");
	ТаблицаНДС.ЗаполнитьЗначения("Реализация товаров в розницу", 		"Содержание");
	ТаблицаНДС.ЗаполнитьЗначения(Реквизиты.НоменклатурнаяГруппаВыручки, "Субконто");
	
	Возврат ТаблицаНДС;
	
КонецФункции

Функция ПодготовитьСтруктуруТаблицИП(ТаблицаВыручка, ТаблицаБезналичныеОплаты, ТаблицаПроданныеСертификаты, ТаблицаРеквизиты, ТаблицаВыручкиЗаМесяц) Экспорт
	
	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат НоваяСтруктураВзаиморасчетовИП();
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат НоваяСтруктураВзаиморасчетовИП();
	КонецЕсли;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
		СтруктураВзаиморасчетовИП = ПодготовитьСтруктуруТаблицИПвНТТ(ТаблицаВыручка, ТаблицаБезналичныеОплаты, ТаблицаПроданныеСертификаты, Реквизиты, ТаблицаВыручкиЗаМесяц);
	Иначе // АТТ
		СтруктураВзаиморасчетовИП =ПодготовитьСтруктуруТаблицИПвАТТ(ТаблицаВыручка, ТаблицаБезналичныеОплаты, ТаблицаПроданныеСертификаты, Реквизиты);
	КонецЕсли;
	
	СтруктураВзаиморасчетовИП.ТаблицаВзаиморасчетовИП.Свернуть("Контрагент, ДокументРасчетов, ДатаДокументаРасчетов", "СуммаРуб");
	СтруктураВзаиморасчетовИП.ТаблицаВзаиморасчетовИП.Сортировать("ДатаДокументаРасчетов, ДокументРасчетов", Новый СравнениеЗначений);
	
	Возврат СтруктураВзаиморасчетовИП;
	
КонецФункции

Функция НоваяСтруктураВзаиморасчетовИП()
	
	ТаблицаПрочихРасчетовИП = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	// таблица оплат МПЗ, реализованных текущим документом
	ТаблицаВзаиморасчетовИП = Новый ТаблицаЗначений;
	ТаблицаВзаиморасчетовИП.Колонки.Добавить("Контрагент",            Справочники.ТипВсеСсылки());
	ТаблицаВзаиморасчетовИП.Колонки.Добавить("ДокументРасчетов",      Документы.ТипВсеСсылки());
	ТаблицаВзаиморасчетовИП.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаВзаиморасчетовИП.Колонки.Добавить("СуммаРуб",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	// Таблица зачтенных оплат МПЗ, реализованных и оплаченных ранее подарочными сертификатами, проданными в этом документе
	ТаблицаЗачтенныхОплатИП = Новый ТаблицаЗначений;
	ТаблицаЗачтенныхОплатИП.Колонки.Добавить("ДокументРасчетов", Документы.ТипВсеСсылки());
	ТаблицаЗачтенныхОплатИП.Колонки.Добавить("СуммаБУ",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	СтруктураВзаиморасчетовИП = Новый Структура("ТаблицаПрочихРасчетовИП, ТаблицаВзаиморасчетовИП, ТаблицаЗачтенныхОплатИП",
		ТаблицаПрочихРасчетовИП, ТаблицаВзаиморасчетовИП, ТаблицаЗачтенныхОплатИП);
	
	Возврат СтруктураВзаиморасчетовИП;
	
КонецФункции

Функция ПодготовитьСтруктуруТаблицИПвНТТ(ТаблицаВыручка, ТаблицаБезналичныеОплаты, ТаблицаПроданныеСертификаты, Реквизиты, ТаблицаВыручкиЗаМесяц)
	
	СтруктураВзаиморасчетов = НоваяСтруктураВзаиморасчетовИП();
	
	СуммаДокумента = ?(ТаблицаВыручка = Неопределено, 0, ТаблицаВыручка.Итог("СуммаРуб"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецПериода",  Реквизиты.Период);
	Запрос.УстановитьПараметр("Склад",         Реквизиты.Склад);
	Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
	Запрос.Текст = ТекстЗапросаПоДокументамОплатаПлатежнойКартой();
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДокументовОплатаПлатежнойКартой = Результат[1].Выгрузить();
	
	// Установка управляемой блокировки РегистрНакопления.ПрочиеРасчеты
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
	ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.ИсточникДанных = ТаблицаДокументовОплатаПлатежнойКартой;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент",         "Эквайер");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетУчета",          "СчетКасса");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДоговорКонтрагента", "ДоговорЭквайринга");
		
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
	ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Контрагент",  Реквизиты.Склад);
	
	Блокировка.Заблокировать();
	
	Контрагенты = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("Эквайер");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Контрагенты);
	
	ДоговорыКонтрагентов = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("ДоговорЭквайринга");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДоговорыКонтрагентов);
	
	СписокДокументовПоПлатежнымКартам = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("Ссылка");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовПоПлатежнымКартам);
	
	Запрос.УстановитьПараметр("Контрагенты",                       Контрагенты);
	Запрос.УстановитьПараметр("ДоговорыКонтрагентов",              ДоговорыКонтрагентов);
	Запрос.УстановитьПараметр("СписокДокументовПоПлатежнымКартам", СписокДокументовПоПлатежнымКартам);
	Запрос.УстановитьПараметр("ДатаОстатка", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.Текст = ТекстЗапросаДляСтруктурыТаблицИП();
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаНеоплаченнойБезналичнойВыручки = ТаблицаРезультатаЗапроса.Скопировать(Новый Структура("ВзаиморасчетыИП", Ложь));
	
	СуммаБезналичнойВыручки = ТаблицаНеоплаченнойБезналичнойВыручки.Итог("СуммаРуб") + ТаблицаБезналичныеОплаты.Итог("СуммаРуб");
	СуммаНаличнойВыручки    = Макс(?(ТаблицаВыручка = Неопределено, 0, ТаблицаВыручка.Итог("СуммаРуб")) - СуммаБезналичнойВыручки, 0);
	
	Если СуммаНаличнойВыручки > 0 Тогда
		
		Для Каждого СтрокаРезультата Из ТаблицаРезультатаЗапроса Цикл
			
			Если Не СтрокаРезультата.ВзаиморасчетыИП Или СтрокаРезультата.СуммаРуб = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаРуб = Мин(СуммаНаличнойВыручки, СтрокаРезультата.СуммаРуб);
			
			Платеж = СтруктураВзаиморасчетов.ТаблицаВзаиморасчетовИП.Добавить();
			ЗаполнитьЗначенияСвойств(Платеж, СтрокаРезультата);
			Платеж.СуммаРуб =  СуммаРуб;
			
			СуммаНаличнойВыручки =  СуммаНаличнойВыручки - СуммаРуб;
			Если СуммаНаличнойВыручки = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаНеоплаченнойБезналичнойВыручки.Количество() > 0 Тогда
		
		ТаблицаНеоплаченнойБезналичнойВыручки.Колонки["ДокументРасчетов"].Имя = "РасчетныйДокумент";
		ТаблицаНеоплаченнойБезналичнойВыручки.Колонки["СуммаРуб"].Имя         = "СуммаОстаток";
		
		ПодготовитьТаблицуПрочихРасчетовНТТ(Реквизиты, СуммаДокумента, ТаблицаНеоплаченнойБезналичнойВыручки, ТаблицаВыручкиЗаМесяц, СтруктураВзаиморасчетов.ТаблицаПрочихРасчетовИП);
		
	КонецЕсли;
	
	ЗаполнитьПрочиеРасчетыПоБезналичнымОплатамИП(ТаблицаБезналичныеОплаты, , , Реквизиты, СтруктураВзаиморасчетов);
	
	Возврат СтруктураВзаиморасчетов;
	
КонецФункции

Функция ПодготовитьСтруктуруТаблицИПвАТТ(ТаблицаВыручка, ТаблицаБезналичныеОплаты, ТаблицаПроданныеСертификаты, Реквизиты)
	
	СтруктураВзаиморасчетов = НоваяСтруктураВзаиморасчетовИП();
	
	СуммаВыручкиВсего          = ?(ТаблицаВыручка = Неопределено, 0, ТаблицаВыручка.Итог("СуммаРуб"));
	СуммаБезналичнойВыручки    = ТаблицаБезналичныеОплаты.Итог("СуммаРуб");
	СуммаПроданныхСертификатов = ?(ТаблицаПроданныеСертификаты = Неопределено, 0, ТаблицаПроданныеСертификаты.Итог("СуммаРуб"));
	СуммаНаличнойВыручки       = Макс(СуммаВыручкиВсего - СуммаБезналичнойВыручки, 0);
	
	// наличными в первую очередь оплачиваются реализованные товары и услуги,
	// затем проданные сертификаты, ранее принимавшиеся в оплату, затем - впервые проданные сертификаты
	ВыручкаПоТоварамУслугам         = СуммаВыручкиВсего - СуммаПроданныхСертификатов;
	СуммаНаличнойОплатыМПЗ          = Мин(ВыручкаПоТоварамУслугам, СуммаНаличнойВыручки);
	СуммаНаличнойОплатыСертификатов = Макс(0, СуммаНаличнойВыручки - СуммаНаличнойОплатыМПЗ);
	
	Если СуммаНаличнойОплатыМПЗ > 0 Тогда
		Платеж = СтруктураВзаиморасчетов.ТаблицаВзаиморасчетовИП.Добавить();
		Платеж.Контрагент            = Реквизиты.Склад;
		Платеж.ДокументРасчетов      = Реквизиты.Регистратор;
		Платеж.ДатаДокументаРасчетов = Реквизиты.Период;
		Платеж.СуммаРуб              = СуммаНаличнойОплатыМПЗ;
	КонецЕсли;
	
	// Таблица взаимозачета подарочных сертификатов (принятые и проданные в текущем документе)
	ТаблицаВзаимозачетСертификатов = ТаблицаВзаимозачетаПоСертификатамИП(ТаблицаБезналичныеОплаты,
		ТаблицаПроданныеСертификаты, Реквизиты);
	
	// Таблица зачета ранее принятых в оплату сертификатов проданными
	ТаблицаЗачетОплатПроданнымиСертификатами = ТаблицаЗачитываемыхСертификатамиОплатИП(
		ТаблицаПроданныеСертификаты, Реквизиты);
	
	// Таблица остатков расчетов по оплатам, отраженным ранее как аванс,
	// и по проданным сертификатам, ранее принятым в оплату
	ИменаОтборов = Новый Структура("ДокументРасчетов", "РасчетныйДокумент");
	
	// Неоплаченные остатки хранятся в регистре "Прочие расчеты", ограничим отбор документов допустимыми для регистра типами.
	ОграничениеТипаДокументов = Метаданные.РегистрыНакопления.ПрочиеРасчеты.Измерения.РасчетныйДокумент.Тип;
	
	ДанныеДляОтбораОстатков = ТаблицаБезналичныеОплаты.СкопироватьКолонки("ДокументРасчетов");
	Для каждого СтрокаИсточник Из ТаблицаБезналичныеОплаты Цикл
		Если СтрокаИсточник.ДокументРасчетов <> Реквизиты.Регистратор
			И ОграничениеТипаДокументов.СодержитТип(ТипЗнч(СтрокаИсточник.ДокументРасчетов)) Тогда
			НоваяСтрока = ДанныеДляОтбораОстатков.Добавить();
			НоваяСтрока.ДокументРасчетов = СтрокаИсточник.ДокументРасчетов;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТаблицаЗачетОплатПроданнымиСертификатами) Тогда
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаЗачетОплатПроданнымиСертификатами, ДанныеДляОтбораОстатков);
	КонецЕсли;
	
	НеоплаченныеОстатки = УчетВзаиморасчетов.ПолучитьОстаткиПрочихРасчетов(ДанныеДляОтбораОстатков, ИменаОтборов, Реквизиты, Истина);
	НеоплаченныеОстатки.Индексы.Добавить("РасчетныйДокумент");
	
	ЗаполнитьПрочиеРасчетыПоБезналичнымОплатамИП(ТаблицаБезналичныеОплаты, НеоплаченныеОстатки, ТаблицаВзаимозачетСертификатов, Реквизиты, СтруктураВзаиморасчетов);
	
	ЗаполнитьПрочиеРасчетыПоПроданнымСертификатамВАТТИП(ТаблицаЗачетОплатПроданнымиСертификатами, НеоплаченныеОстатки, СуммаНаличнойОплатыСертификатов, Реквизиты, СтруктураВзаиморасчетов);
	
	Возврат СтруктураВзаиморасчетов;
	
КонецФункции

Процедура ЗаполнитьПрочиеРасчетыПоБезналичнымОплатамИП(ТаблицаБезналичныеОплаты, НеоплаченныеОстатки = Неопределено, ТаблицаВзаимозачетСертификатов = Неопределено, Реквизиты, СтруктураВзаиморасчетов)
	
	Если Не ЗначениеЗаполнено(ТаблицаБезналичныеОплаты) Тогда
		Возврат;
	КонецЕсли;
	
	// Движения по безналичным оплатам
	Для Каждого СтрокаТаблицы Из ТаблицаБезналичныеОплаты Цикл
		
		Если СтрокаТаблицы.ДокументРасчетов = Реквизиты.Регистратор Тогда
			
			Если СтрокаТаблицы.ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСобственный Тогда
				// Принятие в оплату собственного подарочного сертификата, ранее не продававшегося,
				// является учетной ошибкой и не обрабатывается в налоговом учете ИП
				Продолжить;
			КонецЕсли;
			
			СуммаРасчетов = СтрокаТаблицы.СуммаРуб;
			
			// принятые и проданные в одном документе не отражаются в расчетах
			Если ЗначениеЗаполнено(ТаблицаВзаимозачетСертификатов) Тогда
				Поиск = Новый Структура("Контрагент, ДоговорКонтрагента, ДокументРасчетов, ТипОплаты");
				ЗаполнитьЗначенияСвойств(Поиск, СтрокаТаблицы);
				СтрокиВзаимозачета = ТаблицаВзаимозачетСертификатов.НайтиСтроки(Поиск);
				Для каждого СтрокаВзаимозачета Из СтрокиВзаимозачета Цикл
					СуммаРасчетов = СуммаРасчетов - СтрокаВзаимозачета.СуммаРуб;
				КонецЦикла;
			КонецЕсли;
			
			Если СуммаРасчетов > 0 Тогда
				
				НоваяСтрока = СтруктураВзаиморасчетов.ТаблицаПрочихРасчетовИП.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				НоваяСтрока.ВидДвижения       = ВидДвиженияНакопления.Приход;
				НоваяСтрока.РасчетныйДокумент = Реквизиты.Регистратор;
				НоваяСтрока.Сумма             = СтрокаТаблицы.СуммаРуб;
				НоваяСтрока.СчетУчета         = СтрокаТаблицы.СчетРасчетов;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(НеоплаченныеОстатки) Тогда
			
			// Принятые в оплату и проданные ранее сертификаты могут быть еще не оплачены
			// (например, при оплате банковской картой, если деньги от эквайера еще не получены);
			// в этом случае неоплаченные расчеты за сертификаты, отраженные в остатках регистра "ПрочиеРасчеты",
			// необходимо перенести на текущий документ.
			//
			// Если же сертификаты оплачены - можно признать доход по реализованным в текущем документе МПЗ
			// (добавить сумму оплаты в ТаблицаВзаиморасчетовИП)
			
			СуммаРаспределенияОплаты = СтрокаТаблицы.СуммаРуб;
			
			Поиск = Новый Структура("РасчетныйДокумент", СтрокаТаблицы.ДокументРасчетов);
			СтрокиНеоплаченнойВыручки = НеоплаченныеОстатки.НайтиСтроки(Поиск);
			
			Для каждого СтрокаНеоплаченнногоОстатка Из СтрокиНеоплаченнойВыручки Цикл
				
				Если СуммаРаспределенияОплаты <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаНеоплаченнногоОстатка.СуммаОстаток <=0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаПереносаРасчетов = Мин(СуммаРаспределенияОплаты, СтрокаНеоплаченнногоОстатка.СуммаОстаток);
				
				// расход
				СтрокаРасход = СтруктураВзаиморасчетов.ТаблицаПрочихРасчетовИП.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасход, Реквизиты);
				ЗаполнитьЗначенияСвойств(СтрокаРасход, СтрокаНеоплаченнногоОстатка);
				
				СтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
				СтрокаРасход.Сумма       = СуммаПереносаРасчетов;
				
				// приход
				СтрокаПриход = СтруктураВзаиморасчетов.ТаблицаПрочихРасчетовИП.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПриход, СтрокаРасход);
				
				СтрокаПриход.ВидДвижения       = ВидДвиженияНакопления.Приход;
				СтрокаПриход.РасчетныйДокумент = Реквизиты.Регистратор;
				СтрокаПриход.Сумма             = СуммаПереносаРасчетов;
				
				// учтем распределенную сумму в исходных данных
				СуммаРаспределенияОплаты                 = СуммаРаспределенияОплаты - СуммаПереносаРасчетов;
				СтрокаНеоплаченнногоОстатка.СуммаОстаток = СтрокаНеоплаченнногоОстатка.СуммаОстаток - СуммаПереносаРасчетов;
				
			КонецЦикла;
			
			КоличествоСтрок = НеоплаченныеОстатки.Количество();
			Для Счетчик = 1 По КоличествоСтрок Цикл
				ТекущаяСтрока = НеоплаченныеОстатки[КоличествоСтрок - Счетчик];
				Если ТекущаяСтрока.СуммаОстаток <= 0 Тогда
					НеоплаченныеОстатки.Удалить(ТекущаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
			// Сумма аванса, не найденная в остатках "Прочих расчетов", оплачена. Можно признать доход.
			Если СуммаРаспределенияОплаты > 0 Тогда
				Платеж = СтруктураВзаиморасчетов.ТаблицаВзаиморасчетовИП.Добавить();
				Платеж.Контрагент            = Реквизиты.Склад;
				Платеж.ДокументРасчетов      = Реквизиты.Регистратор;
				Платеж.ДатаДокументаРасчетов = Реквизиты.Период;
				Платеж.СуммаРуб              = СуммаРаспределенияОплаты;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПрочиеРасчетыПоПроданнымСертификатамВАТТИП(ТаблицаЗачетОплатПроданнымиСертификатами, НеоплаченныеОстатки, СуммаНаличнойОплатыСертификатов, Реквизиты, СтруктураВзаиморасчетов)
	
	Если Не ЗначениеЗаполнено(ТаблицаЗачетОплатПроданнымиСертификатами) Тогда
		Возврат;
	КонецЕсли;
	
	// Учтем проданные сертификаты, ранее принимавшиеся в оплату
	// Такие сертификаты учитываются следующим образом:
	//     оплаченные наличными - как оплата покупателем реализации по документу, в котором сертификат был принят в оплату;
	//     оплаченные безналичными - переносят движения "Прочих расчетов" по безналичным оплатам с текущего документа
	//                               на документ принятия в оплату сертификата.
	
	Отбор = Новый Структура("ВидДвижения, РасчетныйДокумент", ВидДвиженияНакопления.Приход, Реквизиты.Регистратор);
	ПолученныеБезналичныеОплаты = СтруктураВзаиморасчетов.ТаблицаПрочихРасчетовИП.Скопировать(Отбор);
	
	Для каждого ПроданныйСертификат Из ТаблицаЗачетОплатПроданнымиСертификатами Цикл
		
		СуммаЗачетаОплаты = ПроданныйСертификат.СуммаБУ;
		
		Поиск = Новый Структура("Контрагент, ДоговорКонтрагента, СчетУчета, РасчетныйДокумент",
			ПроданныйСертификат.Контрагент,
			ПроданныйСертификат.ДоговорКонтрагента,
			ПроданныйСертификат.СчетРасчетов,
			ПроданныйСертификат.ДокументРасчетов);
		
		ОстаткиОплатСертификатом = НеоплаченныеОстатки.НайтиСтроки(Поиск);
		
		Для каждого СтрокаОстаткаОплаты Из ОстаткиОплатСертификатом Цикл
			
			Если СуммаЗачетаОплаты <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаОстаткаОплаты.СуммаОстаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗачитываемаяСумма = Мин(СуммаЗачетаОплаты, СтрокаОстаткаОплаты.СуммаОстаток);
			
			// Остаток по зачтенной оплате проданным сертификатом списываем из Прочих расчетов
			СтрокаРасход = СтруктураВзаиморасчетов.ТаблицаПрочихРасчетовИП.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасход, Реквизиты);
			ЗаполнитьЗначенияСвойств(СтрокаРасход, СтрокаОстаткаОплаты);
			
			СтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаРасход.Сумма       = ЗачитываемаяСумма;
			
			// распределим на оплаченный наличными и безналом
			ЗачтеноОплаченоНаличными = Мин(СуммаНаличнойОплатыСертификатов, ЗачитываемаяСумма);
			ЗачтеноОплаченоБезналом  = ЗачитываемаяСумма - ЗачтеноОплаченоНаличными;
			
			// оплаченный наличными - включаем в доходы
			Если ЗачтеноОплаченоНаличными > 0 Тогда
				СтрокаОплачено = СтруктураВзаиморасчетов.ТаблицаЗачтенныхОплатИП.Добавить();
				СтрокаОплачено.ДокументРасчетов = СтрокаОстаткаОплаты.РасчетныйДокумент;
				СтрокаОплачено.СуммаБУ          = ЗачтеноОплаченоНаличными;
			КонецЕсли;
			
			// оплаченный безналичными - учитываем в Прочих расчетах
			Если ЗачтеноОплаченоБезналом > 0 Тогда
				
				Для каждого СтрокаБезналичнойОплаты Из ПолученныеБезналичныеОплаты Цикл
					
					Если ЗачтеноОплаченоБезналом <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаБезналичнойОплаты.Сумма <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СуммаПереносаБезналичнойОплаты = Мин(ЗачтеноОплаченоБезналом, СтрокаБезналичнойОплаты.Сумма);
					
					СтрокаРасход = СтруктураВзаиморасчетов.ТаблицаПрочихРасчетовИП.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРасход, Реквизиты);
					ЗаполнитьЗначенияСвойств(СтрокаРасход, СтрокаБезналичнойОплаты);
					
					СтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
					СтрокаРасход.Сумма       = СуммаПереносаБезналичнойОплаты;
					
					СтрокаПриход = СтруктураВзаиморасчетов.ТаблицаПрочихРасчетовИП.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПриход, СтрокаРасход);
					
					СтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					СтрокаПриход.РасчетныйДокумент = СтрокаОстаткаОплаты.РасчетныйДокумент;
					
					// учтем перенесенные суммы расчетов в исходных данных
					ЗачтеноОплаченоБезналом          = ЗачтеноОплаченоБезналом - СуммаПереносаБезналичнойОплаты;
					СтрокаБезналичнойОплаты.Сумма = СтрокаБезналичнойОплаты.Сумма - СуммаПереносаБезналичнойОплаты;
					
				КонецЦикла;
				
				КоличествоСтрок = ПолученныеБезналичныеОплаты.Количество();
				Для Счетчик = 1 По КоличествоСтрок Цикл
					ТекущаяСтрока = ПолученныеБезналичныеОплаты[КоличествоСтрок - Счетчик];
					Если ТекущаяСтрока.Сумма <= 0 Тогда
						ПолученныеБезналичныеОплаты.Удалить(ТекущаяСтрока);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			// учтем распределенные суммы в исходных данных
			СуммаНаличнойОплатыСертификатов  = СуммаНаличнойОплатыСертификатов - ЗачтеноОплаченоНаличными;
			СуммаЗачетаОплаты                = СуммаЗачетаОплаты - ЗачитываемаяСумма;
			СтрокаОстаткаОплаты.СуммаОстаток = СтрокаОстаткаОплаты.СуммаОстаток - ЗачитываемаяСумма;
			
		КонецЦикла;
		
		КоличествоСтрок = НеоплаченныеОстатки.Количество();
		Для Счетчик = 1 По КоличествоСтрок Цикл
			ТекущаяСтрока = НеоплаченныеОстатки[КоличествоСтрок - Счетчик];
			Если ТекущаяСтрока.СуммаОстаток <= 0 Тогда
				НеоплаченныеОстатки.Удалить(ТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаДляСтруктурыТаблицИП()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Организация КАК Организация,
	|	ПрочиеРасчетыОстатки.Контрагент КАК Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ПрочиеРасчетыОстатки.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ТаблицаПрочихРасчетовПоПлатежнымКартам
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Контрагент В (&Контрагенты)
	|				И ДоговорКонтрагента В (&ДоговорыКонтрагентов)
	|				И РасчетныйДокумент В (&СписокДокументовПоПлатежнымКартам)) КАК ПрочиеРасчетыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК ВзаиморасчетыИП,
	|	ПрочиеРасчетыОстатки.Организация КАК Организация,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	NULL КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток,
	|	NULL КАК СчетУчета
	|ПОМЕСТИТЬ ВТПрочиеРасчетыОстатки
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Контрагент = &Склад) КАК ПрочиеРасчетыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.Организация,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.Контрагент,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.РасчетныйДокумент,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.ДоговорКонтрагента,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.СуммаОстаток,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.СчетУчета
	|ИЗ
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам КАК ТаблицаПрочихРасчетовПоПлатежнымКартам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПрочиеРасчетыОстатки.ВзаиморасчетыИП,
	|	ВТПрочиеРасчетыОстатки.Организация,
	|	ВТПрочиеРасчетыОстатки.Контрагент КАК Контрагент,
	|	ВТПрочиеРасчетыОстатки.РасчетныйДокумент КАК ДокументРасчетов,
	|	РеквизитыДокументовРасчетов.Дата КАК ДатаПервичногоДокумента,
	|	РеквизитыДокументовРасчетов.ДатаРегистратора КАК ДатаДокументаРасчетов,
	|	ВТПрочиеРасчетыОстатки.ДоговорКонтрагента,
	|	ВТПрочиеРасчетыОстатки.СуммаОстаток КАК СуммаРуб,
	|	ВТПрочиеРасчетыОстатки.СчетУчета
	|ИЗ
	|	ВТПрочиеРасчетыОстатки КАК ВТПрочиеРасчетыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО ВТПрочиеРасчетыОстатки.Организация = РеквизитыДокументовРасчетов.Организация
	|			И ВТПрочиеРасчетыОстатки.РасчетныйДокумент = РеквизитыДокументовРасчетов.Документ
	|ГДЕ
	|	РеквизитыДокументовРасчетов.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПервичногоДокумента";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаВзаимозачетаПоСертификатамИП(ТаблицаБезналичныеОплаты, ТаблицаПроданныеСертификаты, Реквизиты)
	
	Если Не ЗначениеЗаполнено(ТаблицаБезналичныеОплаты) Или Не ЗначениеЗаполнено(ТаблицаПроданныеСертификаты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаВзаимозачетСертификатов = ТаблицаБезналичныеОплаты.СкопироватьКолонки(
	"Контрагент, ДоговорКонтрагента, ДокументРасчетов, ТипОплаты, СуммаРуб");
	
	Для каждого СтрокаОплаты Из ТаблицаБезналичныеОплаты Цикл
		
		Если СтрокаОплаты.ДокументРасчетов <> Реквизиты.Регистратор
			Или (СтрокаОплаты.ТипОплаты <> Перечисления.ТипыОплат.ПодарочныйСертификатСобственный
			И СтрокаОплаты.ТипОплаты <> Перечисления.ТипыОплат.ПодарочныйСертификатСторонний) Тогда
			Продолжить;
		КонецЕсли;
		
		Поиск = Новый Структура("Контрагент, ДоговорКонтрагента, ДокументРасчетов");
		ЗаполнитьЗначенияСвойств(Поиск, СтрокаОплаты);
		
		СтрокиПроданных = ТаблицаПроданныеСертификаты.НайтиСтроки(Поиск);
		
		СуммаРаспределения = СтрокаОплаты.СуммаРуб;
		
		Для каждого ПроданныйИПолученный Из СтрокиПроданных Цикл
			
			СуммаВзаимозачета  = Мин(СуммаРаспределения, ПроданныйИПолученный.СуммаРуб);
			
			СтрокаВзаимозачета = ТаблицаВзаимозачетСертификатов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаОплаты);
			
			СтрокаВзаимозачета.СуммаРуб = СуммаВзаимозачета;
			
			СуммаРаспределения = СуммаРаспределения - СуммаВзаимозачета;
			Если СуммаРаспределения = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаВзаимозачетСертификатов;
	
КонецФункции

Функция ТаблицаЗачитываемыхСертификатамиОплатИП(ТаблицаПроданныеСертификаты, Реквизиты)

	Если Не ЗначениеЗаполнено(ТаблицаПроданныеСертификаты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Впервые проданные сертификаты образуют аванс и в прочих расчетах ИП не отражаются.
	//
	// Принятие в оплату раньше продажи может быть только для сторонних сертификатов.
	// Отберем проданные сторонние сертификаты, ранее принятые в оплату
	ТаблицаЗачитываемыхСертификатов = ТаблицаПроданныеСертификаты.СкопироватьКолонки(
		"Контрагент, ДоговорКонтрагента, ДокументРасчетов, СчетРасчетов, СуммаБУ");
	
	ВидыДоговоров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПроданныеСертификаты, "ДоговорКонтрагента", Истина),
		"ВидДоговора");
		
	Для каждого ПроданныйСертификат Из ТаблицаПроданныеСертификаты Цикл
		Если ПроданныйСертификат.ДокументРасчетов <> Реквизиты.Регистратор
			И ВидыДоговоров[ПроданныйСертификат.ДоговорКонтрагента] = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			И БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяРеализацией(ПроданныйСертификат.ДокументРасчетов) Тогда
			
			ЗачитываемыйСертификат = ТаблицаЗачитываемыхСертификатов.Добавить();
			ЗаполнитьЗначенияСвойств(ЗачитываемыйСертификат, ПроданныйСертификат);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗачитываемыхСертификатов;

КонецФункции

Процедура СформироватьДвиженияПоСчетамУСН(ТаблицаРеквизиты, ТаблицаВыручки, ТаблицаПоПрочимРасчетам, Движения, Отказ) Экспорт
	
	Перем СуммаОплатыНаличными;
	
	Если ТаблицаПоПрочимРасчетам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаВыручки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуммаОплатыНаличными = ТаблицаВыручки.Итог("СуммаРуб");
	
	Реквизиты = ТаблицаРеквизиты[0];
	Организация                     = Реквизиты.Организация;
	Период                          = Реквизиты.Период;
	Регистратор                     = Реквизиты.Регистратор;
	Подразделение                   = Реквизиты.Подразделение;
	УчитыватьЗадолженностьУСН       = Реквизиты.УчитыватьЗадолженностьУСН;
	УчитыватьЗадолженностьУСНПатент = Реквизиты.УчитыватьЗадолженностьУСНПатент;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период);
	
	СвойстваСчетаРасчетыСКомитентомУСН =
		БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
			ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент);
	
	СвойстваСчетаРасчетыПатентУСН =
		БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
			ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент);
	
	СвойстваСчетаРасчетыЕНВДУСН =
		БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
			ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД);
	
	СвойстваСчетаРасчетыТорговыйСборУСН =
		БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
			ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор);
	
	Если СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		
		Отбор = Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход);
		
		ТаблицаТолькоРасходаПоПрочимРасчетам = ТаблицаПоПрочимРасчетам.Скопировать(Отбор); 
		
		СуммаПодлежащаяПоследующейОплате = ТаблицаТолькоРасходаПоПрочимРасчетам.Итог("Сумма");
		
		Если ТаблицаТолькоРасходаПоПрочимРасчетам.Количество() > 0 Тогда
			
			ВсегоКомитенту    = ТаблицаТолькоРасходаПоПрочимРасчетам.Итог("СуммаРубКомитент");
			ВсегоЕНВД         = ТаблицаТолькоРасходаПоПрочимРасчетам.Итог("СуммаРубЕНВД");
			ВсегоПатент       = ТаблицаТолькоРасходаПоПрочимРасчетам.Итог("СуммаРубПатент");
			ВсегоТорговыйСбор = ТаблицаТолькоРасходаПоПрочимРасчетам.Итог("СуммаРубТорговыйСбор");
			
			Если (СуммаПодлежащаяПоследующейОплате - ВсегоКомитенту - ВсегоЕНВД - ВсегоПатент) > 0 Тогда
			
				СтрокаТаблицы = ТаблицаТолькоРасходаПоПрочимРасчетам[0];
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность за товары и услуги комитента";
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Проводка.Сумма        = СуммаПодлежащаяПоследующейОплате - ВсегоКомитенту - ВсегоЕНВД - ВсегоПатент;
				
				Проводка.СубконтоДт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоДт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Регистратор;
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаТолькоРасходаПоПрочимРасчетам Цикл
			
			Если СтрокаТаблицы.СуммаРубКомитент <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность за товары и услуги комитента";
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Проводка.Сумма        = СтрокаТаблицы.СуммаРубКомитент;
				
				Проводка.СубконтоДт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоДт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Регистратор;
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				
				Проводка.СубконтоКт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоКт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаТаблицы.РасчетныйДокумент;
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаРубЕНВД <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность за товары и услуги комитента";
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Проводка.Сумма        = СтрокаТаблицы.СуммаРубЕНВД;
				
				Проводка.СубконтоДт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоДт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Регистратор;
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				
				Проводка.СубконтоКт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоКт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаТаблицы.РасчетныйДокумент;
				Если СвойстваСчетаРасчетыЕНВДУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаРубПатент <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности на патенте";
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Проводка.Сумма        = СтрокаТаблицы.СуммаРубПатент;
				
				Проводка.СубконтоДт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоДт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Регистратор;
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
				
				Проводка.СубконтоКт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоКт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаТаблицы.РасчетныйДокумент;
				Если СвойстваСчетаРасчетыПатентУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаРубТорговыйСбор <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности на торговом сборе";
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Проводка.Сумма        = СтрокаТаблицы.СуммаРубТорговыйСбор;
				
				Проводка.СубконтоДт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоДт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Регистратор;
				Если СвойстваСчетаРасчетыТорговыйСборУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор;
				
				Проводка.СубконтоКт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоКт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаТаблицы.РасчетныйДокумент;
				Если СвойстваСчетаРасчетыТорговыйСборУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Отбор = Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход);
		
		ТаблицаБезналичнойОплаты = ТаблицаПоПрочимРасчетам.Скопировать(Отбор);
		
		СуммаБезналичнойОплаты = ТаблицаБезналичнойОплаты.Итог("Сумма");
		
		УчитыватьЗадолженностьУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, Период);
		
		Если УчитыватьЗадолженностьУСН Тогда
			КоэффициентБезналичнойОплаты = ?(СуммаОплатыНаличными = 0, 0, СуммаБезналичнойОплаты / СуммаОплатыНаличными);
			ТаблицаБезналичнойОплаты.Колонки.Добавить("СуммаРубЕНВДДебет",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			ТаблицаБезналичнойОплаты.Колонки.Добавить("СуммаРубКомитентДебет",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			ТаблицаБезналичнойОплаты.Колонки.Добавить("СуммаРубТорговыйСборДебет", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				Окр(ТаблицаВыручки.Итог("СуммаРубЕНВД") * КоэффициентБезналичнойОплаты, 2),
				ТаблицаБезналичнойОплаты,
				"СуммаРубЕНВДДебет",
				"Сумма");
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				Окр(ТаблицаВыручки.Итог("СуммаРубКомитента") * КоэффициентБезналичнойОплаты, 2),
				ТаблицаБезналичнойОплаты,
				"СуммаРубКомитентДебет",
				"Сумма");
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				Окр(ТаблицаВыручки.Итог("СуммаРубТорговыйСбор") * КоэффициентБезналичнойОплаты, 2),
				ТаблицаБезналичнойОплаты,
				"СуммаРубТорговыйСборДебет",
				"Сумма");
		КонецЕсли;
		Если УчитыватьЗадолженностьУСНПатент Тогда
			КоэффициентБезналичнойОплаты = ?(СуммаОплатыНаличными = 0, 0, СуммаБезналичнойОплаты / СуммаОплатыНаличными);
			ТаблицаБезналичнойОплаты.Колонки.Добавить("СуммаРубПатентДебет",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				Окр(ТаблицаВыручки.Итог("СуммаРубПатент") * КоэффициентБезналичнойОплаты, 2),
				ТаблицаБезналичнойОплаты,
				"СуммаРубПатентДебет",
				"Сумма");
		КонецЕсли;
		
		Для каждого СтрокаБезналичнойОплаты Из ТаблицаБезналичнойОплаты Цикл
			
			// Проводка Кт УСН.01
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубЕНВД <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности ЕНВД";
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"ДокументыРасчетовСКонтрагентами", СтрокаБезналичнойОплаты.РасчетныйДокумент);
				
				Если СвойстваСчетаРасчетыЕНВДУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубЕНВД;
				
			КонецЕсли;
			
			// Проводка Дт УСН.01
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубЕНВДДебет <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности ЕНВД";
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"ДокументыРасчетовСКонтрагентами", Регистратор);
				
				Если СвойстваСчетаРасчетыЕНВДУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубЕНВДДебет;
				
			КонецЕсли;
			
			// Проводка Кт УСН.02
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубКомитент <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность за товары и услуги комитента";
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"ДокументыРасчетовСКонтрагентами", СтрокаБезналичнойОплаты.РасчетныйДокумент);
				
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубКомитент;
				
			КонецЕсли;
			
			// Проводка Дт УСН.02
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубКомитентДебет <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность за товары и услуги комитента";
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"ДокументыРасчетовСКонтрагентами", Регистратор);
				
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубКомитентДебет;
				
			КонецЕсли;
			
			// Проводка Кт УСН.03
			Если УчитыватьЗадолженностьУСНПатент И СтрокаБезналичнойОплаты.СуммаРубПатент <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности на патенте";
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"ДокументыРасчетовСКонтрагентами", СтрокаБезналичнойОплаты.РасчетныйДокумент);
				
				Если СвойстваСчетаРасчетыПатентУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубПатент;
				
			КонецЕсли;
			
			// Проводка Дт УСН.03
			Если УчитыватьЗадолженностьУСНПатент И СтрокаБезналичнойОплаты.СуммаРубПатентДебет <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности на патенте";
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"ДокументыРасчетовСКонтрагентами", Регистратор);
				
				Если СвойстваСчетаРасчетыПатентУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубПатентДебет;
				
			КонецЕсли;
			
			// Проводка Кт УСН.04
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубТорговыйСбор <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности на торговом сборе";
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
					"ДокументыРасчетовСКонтрагентами", СтрокаБезналичнойОплаты.РасчетныйДокумент);
				
				Если СвойстваСчетаРасчетыТорговыйСборУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубТорговыйСбор;
				
			КонецЕсли;
			
			// Проводка Дт УСН.04
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубТорговыйСборДебет <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности на торговом сборе";
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					"ДокументыРасчетовСКонтрагентами", Регистратор);
				
				Если СвойстваСчетаРасчетыТорговыйСборУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубТорговыйСборДебет;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьСтруктуруТаблицБезналичнойВыручкиНТТ(ТаблицаРеквизиты, ТаблицаВыручкиЗаМесяц, Отказ) Экспорт
	
	Перем ТаблицаНеоплаченнойБезналичнойВыручки;
	
	ТаблицаПрочихРасчетов = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	СтруктураВозврата = Новый Структура("ТаблицаПрочихРасчетовНТТ, ТаблицаНеоплаченнойБезналичнойВыручки",
										 ТаблицаПрочихРасчетов,    ТаблицаНеоплаченнойБезналичнойВыручки);
	
	Если Не ЗначениеЗаполнено(ТаблицаВыручкиЗаМесяц)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Не Реквизиты.ПрименяетсяУСН Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Организация   = Реквизиты.Организация;
	Период        = Реквизиты.Период;
	Регистратор   = Реквизиты.Регистратор;
	Подразделение = Реквизиты.Подразделение;
	
	СуммаДокумента = Реквизиты.СуммаОплатыНаличными;
	
	ГраницаОстатка = Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор);
	
	СчетаГруппы = Новый Массив;
	СчетаГруппы.Добавить(ПланыСчетов.Хозрасчетный.УСНВспомогательныеСчета);
	
	УсловияОтбора = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.ИспользоватьВПроводках = Истина;
	УсловияОтбора.Забалансовый = Истина;
	
	СчетаУСН = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаГруппы, УсловияОтбора);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  Период);
	Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
	Запрос.УстановитьПараметр("Склад",         Реквизиты.Склад);
	
	Запрос.Текст = ТекстЗапросаПоДокументамОплатаПлатежнойКартой();
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДокументовОплатаПлатежнойКартой = Результат[1].Выгрузить();
	
	Блокировка = Новый БлокировкаДанных;
		
	// Установка управляемой блокировки РегистрНакопления.ПрочиеРасчеты
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных = ТаблицаДокументовОплатаПлатежнойКартой;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент", "Эквайер");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДоговорКонтрагента", "ДоговорЭквайринга");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетУчета", "СчетКасса");
	
	// Дополнительные блокировки по вспомогательным счетам задолженности УСН
	Для каждого СчетУСН Из СчетаУСН Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Период));
		ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
		ЭлементБлокировки.УстановитьЗначение("Счет",        СчетУСН);
		ЭлементБлокировки.ИсточникДанных = ТаблицаДокументовОплатаПлатежнойКартой;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Эквайер");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "ДоговорЭквайринга");
	КонецЦикла;
		
	Блокировка.Заблокировать();
	
	Контрагенты = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("Эквайер");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Контрагенты);
	
	ДоговорыКонтрагентов = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("ДоговорЭквайринга");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДоговорыКонтрагентов);
	
	СписокДокументовПоПлатежнымКартам = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("Ссылка");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовПоПлатежнымКартам);
	
	Запрос.УстановитьПараметр("ДатаОстатка", ГраницаОстатка);
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	Запрос.УстановитьПараметр("ДоговорыКонтрагентов", ДоговорыКонтрагентов);
	Запрос.УстановитьПараметр("СписокДокументовПоПлатежнымКартам", СписокДокументовПоПлатежнымКартам);
	Запрос.УстановитьПараметр("СписокСчетовУСН", СчетаУСН);
	
	ВидыСубконто = Новый Массив;
	
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.Текст = ТекстЗапросаДляСтруктурыТаблицУСН();
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаНеоплаченнойБезналичнойВыручки = РезультатЗапроса[1].Выгрузить();
	ОстаткиПоСчетамУСН                    = РезультатЗапроса[2].Выгрузить();
	
	Если ТаблицаНеоплаченнойБезналичнойВыручки.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТаблицаПрочихРасчетов.Колонки.Добавить("СуммаРубЕНВД",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПрочихРасчетов.Колонки.Добавить("СуммаРубКомитент",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПрочихРасчетов.Колонки.Добавить("СуммаРубТорговыйСбор",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПрочихРасчетов.Колонки.Добавить("СуммаРубПатент",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
		
	СтруктураВозврата.ТаблицаНеоплаченнойБезналичнойВыручки = ТаблицаНеоплаченнойБезналичнойВыручки;
	СтруктураВозврата.ТаблицаПрочихРасчетовНТТ = ПодготовитьТаблицуПрочихРасчетовНТТ(
													Реквизиты,
													СуммаДокумента,
													ТаблицаНеоплаченнойБезналичнойВыручки,
													ТаблицаВыручкиЗаМесяц,
													ТаблицаПрочихРасчетов,
													ОстаткиПоСчетамУСН);
		
	Возврат СтруктураВозврата;
	
КонецФункции

функция ТекстЗапросаПоДокументамОплатаПлатежнойКартой()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОплатаПлатежнойКартой.Ссылка КАК Ссылка,
	|	ОплатаПлатежнойКартой.Эквайер КАК Эквайер,
	|	ОплатаПлатежнойКартой.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	ОплатаПлатежнойКартой.СчетКасса
	|ПОМЕСТИТЬ ТаблицаДокументовОплатаПлатежнойКартой
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
	|ГДЕ
	|	ОплатаПлатежнойКартой.Организация = &Организация
	|	И ОплатаПлатежнойКартой.Контрагент = &Склад
	|	И ОплатаПлатежнойКартой.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка)
	|	И ОплатаПлатежнойКартой.Дата >= &НачалоПериода
	|	И ОплатаПлатежнойКартой.Дата <= &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументовОплатаПлатежнойКартой.Ссылка,
	|	ТаблицаДокументовОплатаПлатежнойКартой.Эквайер,
	|	ТаблицаДокументовОплатаПлатежнойКартой.ДоговорЭквайринга,
	|	ТаблицаДокументовОплатаПлатежнойКартой.СчетКасса
	|ИЗ
	|	ТаблицаДокументовОплатаПлатежнойКартой КАК ТаблицаДокументовОплатаПлатежнойКартой";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДляСтруктурыТаблицУСН()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Организация КАК Организация,
	|	ПрочиеРасчетыОстатки.Контрагент КАК Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ПрочиеРасчетыОстатки.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ВТОстаткиПрочихРасчетов
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И Контрагент В (&Контрагенты)
	|				И ДоговорКонтрагента В (&ДоговорыКонтрагентов)
	|				И РасчетныйДокумент В (&СписокДокументовПоПлатежнымКартам)) КАК ПрочиеРасчетыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОстаткиПрочихРасчетов.Контрагент,
	|	ВТОстаткиПрочихРасчетов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВТОстаткиПрочихРасчетов.ДоговорКонтрагента,
	|	ВТОстаткиПрочихРасчетов.СуммаОстаток,
	|	ВТОстаткиПрочихРасчетов.СчетУчета,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПервичногоДокумента
	|ИЗ
	|	ВТОстаткиПрочихРасчетов КАК ВТОстаткиПрочихРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ВТОстаткиПрочихРасчетов.РасчетныйДокумент = ДанныеПервичныхДокументов.Документ
	|			И ВТОстаткиПрочихРасчетов.Организация = ДанныеПервичныхДокументов.Организация
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПервичногоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
	|	ХозрасчетныйОстатки.Субконто3 КАК РасчетныйДокумент,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД)
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент)
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовКомитент,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор)
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовТорговыйСбор,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент)
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовПатент,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД)
	|					ИЛИ ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД)
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБУ_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент)
	|					ИЛИ ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент)
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБУ_Комитент,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор)
	|					ИЛИ ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор)
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБУ_ТорговыйСбор,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент)
	|					ИЛИ ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент)
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБУ_Патент
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатка,
	|			Счет В (&СписокСчетовУСН),
	|			&ВидыСубконто,
	|			Субконто1 В (&Контрагенты)
	|				И Субконто2 В (&ДоговорыКонтрагентов)
	|				И Субконто3 В (&СписокДокументовПоПлатежнымКартам)
	|				И Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныйДокумент";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьПараметрыФормированияПрочиеРасчеты(ТаблицаРеквизиты, ТаблицаВзаиморасчеты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Взаиморасчеты
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"					// <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"			// <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетов,"			// <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СуммаОплатыРуб"		// <Число, 15, 2> - сумма выручки с НДС в рублях
	;
	Параметры.Вставить("ТаблицаВзаиморасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Взаиморасчеты
	СписокОбязательныхКолонок = ""
	+ "Организация,"				// <СправочникСсылка.Организации>
	+ "Период,"						// <Дата>
	+ "Регистратор"				// <ДокументСсылка>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции 

Функция ПодготовитьТаблицуПрочиеРасчетыВозвратБезналичныхОплат(ТаблицаРеквизиты, ТаблицаВзаиморасчеты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыФормированияПрочиеРасчеты(ТаблицаРеквизиты, ТаблицаВзаиморасчеты);
	
	ТаблицаВзаиморасчетов = Параметры.ТаблицаВзаиморасчетов;
	
	Результат = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ПрименяетсяУСН             = УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период);
	ПрименяетсяТолькоУСНПатент = УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Реквизиты.Организация, Реквизиты.Период);
	
	Если Не ПрименяетсяУСН И Не ПрименяетсяТолькоУСНПатент Тогда
		Возврат Результат;
	КонецЕсли;
	
	
	Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		
		НоваяСтрока = Результат.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
		
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		НоваяСтрока.Контрагент         = СтрокаВзаиморасчетов.Контрагент;
		НоваяСтрока.ДоговорКонтрагента = СтрокаВзаиморасчетов.ДоговорКонтрагента;
		НоваяСтрока.СчетУчета          = СтрокаВзаиморасчетов.СчетУчетаРасчетов;
		НоваяСтрока.Сумма              = СтрокаВзаиморасчетов.СуммаОплатыРуб;
		
		НоваяСтрока.РасчетныйДокумент  = Реквизиты.Регистратор;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьТаблицуПрочихРасчетовНТТ(Реквизиты, СуммаДокумента, ТаблицаНеоплаченнойБезналичнойВыручки, ТаблицаВыручкиЗаМесяц, ТаблицаПрочихРасчетов, ОстаткиПоСчетамУСН = Неопределено)
	
	Регистратор = Реквизиты.Регистратор;
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("НаличнаяВыручка", Ложь);
	
	ТаблицаБезналичнойВыручки = ТаблицаВыручкиЗаМесяц.Скопировать(Отбор);
	
	СуммаВыручкиВсегоБезналичная = ТаблицаБезналичнойВыручки.Итог("СуммаРуб");
	
	СуммаНеоплаченнойВыручки = ТаблицаНеоплаченнойБезналичнойВыручки.Итог("СуммаОстаток");
	
	СуммаОплаченнойВыручки = СуммаВыручкиВсегоБезналичная - СуммаНеоплаченнойВыручки;
	
	СуммаПодлежащаяПроведениюПоПрочимРасчетам = Мин(СуммаДокумента, СуммаВыручкиВсегоБезналичная - СуммаОплаченнойВыручки);
	СуммаДляОтраженияВОплаченнойВыручке       = Макс(СуммаДокумента - СуммаПодлежащаяПроведениюПоПрочимРасчетам, 0);
	
	ЕстьОстаткиПоСчетамУСН = НЕ ОстаткиПоСчетамУСН = Неопределено;
	
	Если ЕстьОстаткиПоСчетамУСН Тогда
		ОстаткиПоСчетамУСН.Индексы.Добавить("РасчетныйДокумент");
	КонецЕсли;
	
	Если СуммаПодлежащаяПроведениюПоПрочимРасчетам > 0 Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаНеоплаченнойБезналичнойВыручки Цикл
			
			СуммаДвижения = Мин(СтрокаТаблицы.СуммаОстаток, СуммаПодлежащаяПроведениюПоПрочимРасчетам);
			
			НоваяСтрока = ТаблицаПрочихРасчетов.Добавить();
			
			//Свойства
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			//Измерения и ресурсы
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Сумма = СуммаДвижения;
			
			Если ЕстьОстаткиПоСчетамУСН Тогда
			
				СтрокаПоСчетамУСН = ОстаткиПоСчетамУСН.Найти(СтрокаТаблицы.РасчетныйДокумент, "РасчетныйДокумент");
				
				Если НЕ СтрокаПоСчетамУСН = Неопределено Тогда
					
					СуммаБУ_УСН = СтрокаПоСчетамУСН.СуммаБУ_ЕНВД
								+ СтрокаПоСчетамУСН.СуммаБУ_Комитент
								+ СтрокаПоСчетамУСН.СуммаБУ_ТорговыйСбор
								+ СтрокаПоСчетамУСН.СуммаБУ_Патент;
					
					КоэффициентБУ_ЕНВД         = ?(СуммаБУ_УСН = 0, 0, СтрокаПоСчетамУСН.СуммаБУ_ЕНВД/СуммаБУ_УСН);
					КоэффициентБУ_Комитента    = ?(СуммаБУ_УСН = 0, 0, СтрокаПоСчетамУСН.СуммаБУ_Комитент/СуммаБУ_УСН);
					КоэффициентБУ_ТорговыйСбор = ?(СуммаБУ_УСН = 0, 0, СтрокаПоСчетамУСН.СуммаБУ_ТорговыйСбор/СуммаБУ_УСН);
					КоэффициентБУ_Патент       = ?(СуммаБУ_УСН = 0, 0, СтрокаПоСчетамУСН.СуммаБУ_Патент/СуммаБУ_УСН);
					
					НоваяСтрока.СуммаРубЕНВД         = Мин(СтрокаПоСчетамУСН.СуммаБУ_ЕНВД, СуммаДвижения)*КоэффициентБУ_ЕНВД;
					НоваяСтрока.СуммаРубКомитент     = Мин(СтрокаПоСчетамУСН.СуммаБУ_Комитент, СуммаДвижения)*КоэффициентБУ_Комитента;
					НоваяСтрока.СуммаРубТорговыйСбор = Мин(СтрокаПоСчетамУСН.СуммаБУ_ТорговыйСбор, СуммаДвижения)*КоэффициентБУ_ТорговыйСбор;
					НоваяСтрока.СуммаРубПатент       = Мин(СтрокаПоСчетамУСН.СуммаБУ_Патент, СуммаДвижения)*КоэффициентБУ_Патент;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПрочихРасчетов.Добавить();
			
			//Свойства
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			//Измерения и ресурсы
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.РасчетныйДокумент = Регистратор;
			
			НоваяСтрока.Сумма = СуммаДвижения;
			
			СуммаПодлежащаяПроведениюПоПрочимРасчетам = СуммаПодлежащаяПроведениюПоПрочимРасчетам - СуммаДвижения;
			
			Если СуммаПодлежащаяПроведениюПоПрочимРасчетам <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаПрочихРасчетов;
	
КонецФункции

Функция ПодготовитьТаблицуПрочихРасчетовАТТ(ТаблицаБезналичныеОплаты, ТаблицаРеквизиты) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаБезналичныеОплаты)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Реквизиты.ПлательщикНДФЛ
	 Или (Не Реквизиты.УчитыватьЗадолженностьУСН И Не Реквизиты.УчитыватьЗадолженностьУСНПатент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаПрочихРасчетов = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	Для каждого СтрокаОплаты Из ТаблицаБезналичныеОплаты Цикл
	
		Если СтрокаОплаты.ДокументРасчетов = Реквизиты.Регистратор
			И (СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта
				Или СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплат.БанковскийКредит) Тогда
			
			НоваяСтрока = ТаблицаПрочихРасчетов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
			
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрока.РасчетныйДокумент = Реквизиты.Регистратор;
			НоваяСтрока.СчетУчета = СтрокаОплаты.СчетРасчетов;
			
			НоваяСтрока.Сумма = СтрокаОплаты.СуммаРуб;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаПрочихРасчетов;

КонецФункции

Функция ПодготовитьТаблицыРаспределенияВыручкиПоОплатам(ВыручкаДляРаспределенияОплатыУСН, БезналичныеОплатыВзаиморасчеты, ПроданныеСертификатыВзаиморасчеты, ТаблицаРеквизиты, Отказ, ЭтоОтложенноеПроведение = Ложь) Экспорт

	Параметры = ПодготовитьПараметрыРаспределенияВыручкиПоОплатам(ВыручкаДляРаспределенияОплатыУСН, БезналичныеОплатыВзаиморасчеты, ПроданныеСертификатыВзаиморасчеты, ТаблицаРеквизиты);
	
	СтруктураТаблиц = Новый Структура("ТаблицаВыручка, БезналичныеОплаты, ПроданныеСертификаты, ТаблицаНаличнаяОплата",
		Параметры.ТаблицаВыручка,
		Параметры.БезналичныеОплаты,
		Параметры.ПроданныеСертификаты,
		Неопределено);
	
	Если Параметры.БезналичныеОплаты.Количество() = 0
		ИЛИ Параметры.ТаблицаВыручка.Количество() = 0 Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Организация               = Реквизиты.Организация;
	Период                    = Реквизиты.Период;
	Регистратор               = Реквизиты.Регистратор;
	ДеятельностьНаПатенте     = Реквизиты.ДеятельностьНаПатенте;
	УчитыватьЗадолженностьУСН = Реквизиты.УчитыватьЗадолженностьУСН;
	УчитыватьЗадолженностьУСНПатент = Реквизиты.УчитыватьЗадолженностьУСНПатент;
	ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(
		Реквизиты.Организация, Реквизиты.Период);
	
	Выручка = Параметры.ТаблицаВыручка;
	
	БезналичныеОплаты    = Параметры.БезналичныеОплаты;
	ПроданныеСертификаты = Параметры.ПроданныеСертификаты;
	
	// Учтем "взаимозачет" по подарочным сертификатам, проданным и принятым в оплату за одну торговую смену
	
	Если БезналичныеОплаты.Количество() > 0 И ПроданныеСертификаты.Количество() > 0 Тогда
		
		УдалитьПринятыеСертификаты  = Новый Массив;
		УдалитьПроданныеСертификаты = Новый Массив;
		
		Отбор = Новый Структура("ТипОплаты, ДокументРасчетов",
			Перечисления.ТипыОплат.ПодарочныйСертификатСобственный,
			Реквизиты.Регистратор);
		ПринятыеСертификаты = БезналичныеОплаты.НайтиСтроки(Отбор);
		
		Для каждого ПринятыйСертификат Из ПринятыеСертификаты Цикл

			ИтогоЗачтено = 0;

			СуммаДляЗачета = ПринятыйСертификат.СуммаВзаиморасчетов;
			
			Если СуммаДляЗачета <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИспользуетсяОтложенноеПроведение И НЕ ЭтоОтложенноеПроведение Тогда
				// При отложенном проведении до момента актуализации документ расчетов не определен.
				Отбор = Новый Структура("Контрагент, ДоговорКонтрагента");
			Иначе
				Отбор = Новый Структура("Контрагент, ДоговорКонтрагента, ДокументРасчетов");
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Отбор, ПринятыйСертификат);
			
			СтрокиПроданныхСертификатов = ПроданныеСертификаты.НайтиСтроки(Отбор);
			
			Для каждого ПроданныйСертификат Из СтрокиПроданныхСертификатов Цикл
				
				Если СуммаДляЗачета <= 0 Тогда
					Прервать;
				КонецЕсли;
				Если ПроданныйСертификат.СуммаВзаиморасчетов <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Зачтено = Макс(0, Мин(СуммаДляЗачета, ПроданныйСертификат.СуммаВзаиморасчетов));
				
				// Уменьшаем расчеты по проданным сертификатам на зачтенную сумму; полностью зачтенные строки удаляем.
				
				НоваяСуммаВзаиморасчетов = ПроданныйСертификат.СуммаВзаиморасчетов - Зачтено;
				Если НоваяСуммаВзаиморасчетов = 0 Тогда
					ПроданныйСертификат.СуммаВзаиморасчетов = 0;
					УдалитьПроданныеСертификаты.Добавить(ПроданныйСертификат);
				Иначе
					КоэффЗачета = НоваяСуммаВзаиморасчетов / ПроданныйСертификат.СуммаВзаиморасчетов;
					
					ПроданныйСертификат.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
					
					ПроданныйСертификат.СуммаБУ                         = Окр(КоэффЗачета * ПроданныйСертификат.СуммаБУ, 2);
					ПроданныйСертификат.СуммаНУ                         = Окр(КоэффЗачета * ПроданныйСертификат.СуммаНУ, 2);
					ПроданныйСертификат.СуммаВзаиморасчетовЕНВД         = Окр(КоэффЗачета * ПроданныйСертификат.СуммаВзаиморасчетовЕНВД, 2);
					ПроданныйСертификат.СуммаБУ_ЕНВД                    = Окр(КоэффЗачета * ПроданныйСертификат.СуммаБУ_ЕНВД, 2);
					ПроданныйСертификат.СуммаВзаиморасчетовКомитента    = Окр(КоэффЗачета * ПроданныйСертификат.СуммаВзаиморасчетовКомитента, 2);
					ПроданныйСертификат.СуммаБУ_Комитента               = Окр(КоэффЗачета * ПроданныйСертификат.СуммаБУ_Комитента, 2);
					ПроданныйСертификат.СуммаВзаиморасчетовПатент       = Окр(КоэффЗачета * ПроданныйСертификат.СуммаВзаиморасчетовПатент, 2);
					ПроданныйСертификат.СуммаБУ_Патент                  = Окр(КоэффЗачета * ПроданныйСертификат.СуммаБУ_Патент, 2);
					ПроданныйСертификат.СуммаВзаиморасчетовТорговыйСбор = Окр(КоэффЗачета * ПроданныйСертификат.СуммаВзаиморасчетовТорговыйСбор, 2);
					ПроданныйСертификат.СуммаБУ_ТорговыйСбор            = Окр(КоэффЗачета * ПроданныйСертификат.СуммаБУ_ТорговыйСбор, 2);
				КонецЕсли;
				
				СуммаДляЗачета = СуммаДляЗачета - Зачтено;
				ИтогоЗачтено   = ИтогоЗачтено   + Зачтено;
				
			КонецЦикла;
			
			КоличествоСтрок = УдалитьПроданныеСертификаты.Количество();
			Для Проход = 1 По КоличествоСтрок Цикл
				ПроданныеСертификаты.Удалить(УдалитьПроданныеСертификаты[КоличествоСтрок - Проход]);
			КонецЦикла;
			УдалитьПроданныеСертификаты.Очистить();
			
			// Уменьшаем расчеты по принятым сертификатам на зачтенную сумму; полностью зачтенные строки удалим из БезналичныеОплаты.
			Если СуммаДляЗачета < ПринятыйСертификат.СуммаВзаиморасчетов Тогда
				
				// Незачтенная сумма остается в расчетах по принятым сертификатам
				
				Если СуммаДляЗачета = 0 Тогда
					ПринятыйСертификат.СуммаВзаиморасчетов = 0;
					УдалитьПринятыеСертификаты.Добавить(ПринятыйСертификат);
				Иначе
					КоэффЗачета = СуммаДляЗачета / ПринятыйСертификат.СуммаВзаиморасчетов;
					
					ПринятыйСертификат.СуммаВзаиморасчетов = СуммаДляЗачета;
					
					ПринятыйСертификат.СуммаРуб                        = Окр(КоэффЗачета * ПринятыйСертификат.СуммаРуб, 2);
					ПринятыйСертификат.СуммаРубПоКурсуАванса           = Окр(КоэффЗачета * ПринятыйСертификат.СуммаРубПоКурсуАванса, 2);
					ПринятыйСертификат.СуммаВзаиморасчетовЕНВД         = Окр(КоэффЗачета * ПринятыйСертификат.СуммаВзаиморасчетовЕНВД, 2);
					ПринятыйСертификат.СуммаРуб_ЕНВД                   = Окр(КоэффЗачета * ПринятыйСертификат.СуммаРуб_ЕНВД, 2);
					ПринятыйСертификат.СуммаВзаиморасчетовКомитента    = Окр(КоэффЗачета * ПринятыйСертификат.СуммаВзаиморасчетовКомитента, 2);
					ПринятыйСертификат.СуммаРуб_Комитента              = Окр(КоэффЗачета * ПринятыйСертификат.СуммаРуб_Комитента, 2);
					ПринятыйСертификат.СуммаВзаиморасчетовПатент       = Окр(КоэффЗачета * ПринятыйСертификат.СуммаВзаиморасчетовПатент, 2);
					ПринятыйСертификат.СуммаРуб_Патент                 = Окр(КоэффЗачета * ПринятыйСертификат.СуммаРуб_Патент, 2);
					ПринятыйСертификат.СуммаВзаиморасчетовТорговыйСбор = Окр(КоэффЗачета * ПринятыйСертификат.СуммаВзаиморасчетовТорговыйСбор, 2);
					ПринятыйСертификат.СуммаРуб_ТорговыйСбор           = Окр(КоэффЗачета * ПринятыйСертификат.СуммаРуб_ТорговыйСбор, 2);
				КонецЕсли;
			КонецЕсли;
			
			// Скорректируем выручку на сумму зачета.
			Если ИтогоЗачтено > 0 Тогда

				ОтборВыручки = Новый Структура("Контрагент, ДоговорКонтрагента");
				ЗаполнитьЗначенияСвойств(ОтборВыручки, ПринятыйСертификат);

				НайденныеСтрокиВыручки = Выручка.НайтиСтроки(ОтборВыручки);

				Если НайденныеСтрокиВыручки.Количество() > 0 Тогда
					СтрокаВыручки = НайденныеСтрокиВыручки[0];
					СтрокаВыручки.СуммаРуб = СтрокаВыручки.СуммаРуб - ИтогоЗачтено;

					Если Реквизиты.УчитыватьЗадолженностьУСНПатент И Реквизиты.ДеятельностьНаПатенте
						И Не Реквизиты.УчитыватьЗадолженностьУСН Тогда
						// Деятельность только на патенте - выручка от продажи сертификатов отражается по патенту.
						// Нужно учесть взаимозачет.
						СтрокаВыручки.СуммаРубПатент = СтрокаВыручки.СуммаРубПатент - ИтогоЗачтено;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоСтрок = УдалитьПринятыеСертификаты.Количество();
		Для Проход = 1 По КоличествоСтрок Цикл
			БезналичныеОплаты.Удалить(УдалитьПринятыеСертификаты[КоличествоСтрок - Проход]);
		КонецЦикла;
		УдалитьПринятыеСертификаты.Очистить();
		
	КонецЕсли;
	
	// Выделим наличную оплату
	
	ОбщаяСуммаВыручки      = Выручка.Итог("СуммаРуб");
	СуммаБезналичнойОплаты = БезналичныеОплаты.Итог("СуммаРуб");
	СуммаОплатыНаличными   = ОбщаяСуммаВыручки - СуммаБезналичнойОплаты;
	
	// Таблица наличной оплаты
	Если СуммаОплатыНаличными > 0 Тогда
	
		ТаблицаНаличнаяОплата = ПустаяТаблицаНаличнаяОплата();
		СтрокаОплаты = ТаблицаНаличнаяОплата.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаОплаты, Реквизиты);
		
		СтрокаОплаты.СчетУчетаРасчетовСРозничнымПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
		СтрокаОплаты.СчетУчетаДенежныхСредств               = Реквизиты.СчетКасса;
		СтрокаОплаты.СуммаВзаиморасчетов                    = СуммаОплатыНаличными;
		СтрокаОплаты.СуммаРуб                               = СуммаОплатыНаличными;
		
		СтруктураТаблиц.Вставить("ТаблицаНаличнаяОплата", ТаблицаНаличнаяОплата);
		
	КонецЕсли;
	
	Если ОбщаяСуммаВыручки = 0 И (УчитыватьЗадолженностьУСН Или УчитыватьЗадолженностьУСНПатент) Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	// Распределим выручку по строкам безналичных оплат в разрезе специальных налоговых режимов, исключая зачтенные авансы.
	Если УчитыватьЗадолженностьУСН И СуммаБезналичнойОплаты > 0 Тогда
		
		КоэффициентБезналичнойОплаты = СуммаБезналичнойОплаты / ОбщаяСуммаВыручки;
		
		БазаРаспределения = БезналичныеОплаты.ВыгрузитьКолонку("СуммаВзаиморасчетов");
		
		СуммыЕНВД = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			Выручка.Итог("СуммаРубЕНВД") * КоэффициентБезналичнойОплаты,
			БазаРаспределения,
			2);
		
		СуммыКомитент = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			Выручка.Итог("СуммаРубКомитента") * КоэффициентБезналичнойОплаты,
			БазаРаспределения,
			2);
		
		СуммыТорговыйСбор = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			Выручка.Итог("СуммаРубТорговыйСбор") * КоэффициентБезналичнойОплаты,
			БазаРаспределения,
			2);
		
		Индекс = 0;
		Для каждого СтрокаОплаты Из БезналичныеОплаты Цикл
			Если СтрокаОплаты.ДокументРасчетов = Реквизиты.Регистратор Тогда
				// Не зачтенный аванс - отражение расчетов определяется выручкой
				СтрокаОплаты.СуммаВзаиморасчетовЕНВД         = ?(ЗначениеЗаполнено(СуммыЕНВД),         СуммыЕНВД[Индекс], 0);
				СтрокаОплаты.СуммаВзаиморасчетовКомитента    = ?(ЗначениеЗаполнено(СуммыКомитент),     СуммыКомитент[Индекс], 0);
				СтрокаОплаты.СуммаВзаиморасчетовТорговыйСбор = ?(ЗначениеЗаполнено(СуммыТорговыйСбор), СуммыТорговыйСбор[Индекс], 0);
				
				СтрокаОплаты.СуммаРуб_ЕНВД         = СтрокаОплаты.СуммаВзаиморасчетовЕНВД;
				СтрокаОплаты.СуммаРуб_Комитента    = СтрокаОплаты.СуммаВзаиморасчетовКомитента;
				СтрокаОплаты.СуммаРуб_ТорговыйСбор = СтрокаОплаты.СуммаВзаиморасчетовТорговыйСбор;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Если УчитыватьЗадолженностьУСНПатент И СуммаБезналичнойОплаты > 0 Тогда
		
		КоэффициентБезналичнойОплаты = СуммаБезналичнойОплаты / ОбщаяСуммаВыручки;
		
		БазаРаспределения = БезналичныеОплаты.ВыгрузитьКолонку("СуммаВзаиморасчетов");
		
		СуммыПатент = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			Выручка.Итог("СуммаРубПатент") * КоэффициентБезналичнойОплаты,
			БазаРаспределения,
			2);
		
		Индекс = 0;
		Для каждого СтрокаОплаты Из БезналичныеОплаты Цикл
			Если СтрокаОплаты.ДокументРасчетов = Реквизиты.Регистратор Тогда
				// Не зачтенный аванс - отражение расчетов определяется выручкой
				СтрокаОплаты.СуммаВзаиморасчетовПатент = ?(ЗначениеЗаполнено(СуммыПатент), СуммыПатент[Индекс], 0);
				СтрокаОплаты.СуммаРуб_Патент           = СтрокаОплаты.СуммаВзаиморасчетовПатент;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Функция ПодготовитьПараметрыРаспределенияВыручкиПоОплатам(ВыручкаДляРаспределенияОплатыУСН, БезналичныеОплаты, ПроданныеСертификаты, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаВыручки

	СписокОбязательныхКолонок = ""
	+ "Контрагент,"           // <Справочник.Контрагенты> - контрагент-покупатель
	+ "ДоговорКонтрагента,"   // <Справочник.ДоговорКонтрагентов> - договор контрагента-покупателя
	+ "ТипОплаты,"   		  // <ПеречислениеСсылка.ТипыОплат> - тип оплаты (плат. карта, кредит, сертификат и т.п.)
	+ "СуммаРуб,"             // <Число,15,2> - сумма выручки всего
	+ "СуммаРубЕНВД,"         // <Число,15,2> - сумма выручки по деятельности ЕНВД
	+ "СуммаРубКомитента,"    // <Число,15,2> - сумма выручки комитента
	+ "СуммаРубТорговыйСбор," // <Число,15,2> - сумма выручки по деятельности, облагаемой торговым сбором
	+ "СуммаРубПатент";       // <Число,15,2> - сумма выручки по патенту
	
	Параметры.Вставить("ТаблицаВыручка", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ВыручкаДляРаспределенияОплатыУСН, СписокОбязательныхКолонок));	
	
	// Подготовка таблицы Параметры.БезналичныеОплаты
	
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"                      // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"                // <ДокументСсылка>
	+ "ДатаДокументаРасчетов,"           // <Дата>
	+ "ВидДоговора,"                     //
	+ "ТипОплаты,"                       // <ПеречислениеСсылка.ТипыОплат> - тип оплаты (плат. карта, кредит, сертификат и т.п.)
	+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "РасчетыВУсловныхЕдиницах,"        // <Булево> - флаг расчетов в условных единицах
	+ "УчетАгентскогоНДС,"                // <Булево> - флаг расчетов по НДС налогового агента
	+ "СчетРасчетов,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
	+ "СчетАвансов,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов по авансам
	+ "СчетАвансов_ОтгрузкаВУЕ,"         // <ПланСчетовСсылка.Хозрасчетный> - счет авансов, для переквалификации в аванс для отгрузки
	+ "Подразделение,"                   // <Ссылка на справочник подразделений> - подразделение по счету авансов
	+ "ПодразделениеРасчетов,"           // <Ссылка на справочник подразделений> - подразделение по счету расчетов
	+ "РасчетыВВалюте,"                  // <Булево>  - флаг расчетов в валюте (в т.ч. и в условных единицах)
	+ "СуммаВзаиморасчетов,"             // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "ОстатокВзаиморасчетов,"           // <Число,15,2> - остаток взаиморасчетов в валюте взаиморасчетов
	+ "СуммаРубПоКурсуАванса,"           // <Число,15,2> - сумма в рублях по курсу на дату аванса
	+ "СуммаРуб,"                        // <Число,15,2> - сумма в рублях (для валютных расчетов - по курсу на дату документа)
	+ "СуммаВзаиморасчетовЕНВД,"         // <Число,15,2> - сумма в валюте расчетов по деятельности ЕНВД
	+ "СуммаРуб_ЕНВД,"                   // <Число,15,2> - сумма в рублях по деятельности ЕНВД
	+ "СуммаВзаиморасчетовПатент,"       // <Число,15,2> - сумма в валюте расчетов по деятельности на патенте
	+ "СуммаРуб_Патент,"                 // <Число,15,2> - сумма в рублях по деятельности на патенте
	+ "СуммаВзаиморасчетовТорговыйСбор," // <Число,15,2> - сумма в валюте расчетов по деятельности на торговом сборе
	+ "СуммаРуб_ТорговыйСбор,"           // <Число,15,2> - сумма в рублях по деятельности на торговом сборе
	+ "СуммаВзаиморасчетовКомитента,"    // <Число,15,2> - сумма в валюте расчетов при реализации товаров и услуг комитентов
	+ "СуммаРуб_Комитента,"              // <Число,15,2> - сумма в рублях при реализации товаров и услуг комитентов
	+ "СуммаБУ_ОтгрузкаВУЕ";             // <Число,15,2> - сумма по курсу остатка отгрузки в УЕ

	Параметры.Вставить("БезналичныеОплаты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		БезналичныеОплаты, СписокОбязательныхКолонок));
	
	
	// Подготовка таблицы Параметры.ПроданныеСертификаты
	
	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                   // <Ссылка на справочник подразделений> - подразделение расчетов
	+ "Контрагент,"                      // <СправочникСсылка.Контрагенты> - контрагент, покупатель подарочного сертификата
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов> - договор с покупателем сертификата
	+ "ДокументРасчетов,"                // <ДокументСсылка> - документ расчетов
	+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "ТипОплаты,"            			 // <ПеречислениеСсылка.ТипыОплат> - тип оплаты (плат. карта, кредит, сертификат и т.п.)
	+ "СчетРасчетов,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет расчетов по сертификатам
	+ "СчетАвансов_ОтгрузкаВУЕ,"         // <ПланСчетовСсылка.Хозрасчетный> - счет авансов, для переквалификации в аванс для отгрузки
	+ "КорСчет,"                         // <ПланСчетовСсылка.Хозрасчетный> - счет, корреспондирующий со счетом расчетов
	+ "КорСубконто1,"                    // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто2,"                    // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто3,"                    // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорПодразделение,"                // <Ссылка на справочник подразделений> - подразделение по корсчету
	+ "СуммаВзаиморасчетов,"             // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаБУ,"                         // <Число,15,2> - сумма в рублях в оценке для бух.учета
	+ "СуммаНУ,"                         // <Число,15,2> - сумма в рублях в оценке для налогового учета
	+ "СуммаВзаиморасчетовЕНВД,"         // <Число,15,2> - сумма по деятельности ЕНВД в валюте взаиморасчетов
	+ "СуммаБУ_ЕНВД,"                    // <Число,15,2> - сумма по деятельности ЕНВД в рублях
	+ "СуммаВзаиморасчетовПатент,"       // <Число,15,2> - сумма по деятельности на патенте в валюте взаиморасчетов
	+ "СуммаБУ_Патент,"                  // <Число,15,2> - сумма по деятельности на патенте в рублях
	+ "СуммаВзаиморасчетовТорговыйСбор," // <Число,15,2> - сумма по деятельности на торговом сборе в валюте взаиморасчетов
	+ "СуммаБУ_ТорговыйСбор,"            // <Число,15,2> - сумма по деятельности на торговом сборе в рублях
	+ "СуммаВзаиморасчетовКомитента,"    // <Число,15,2> - сумма за товары и услуги комитентов в валюте взаиморасчетов
	+ "СуммаБУ_Комитента,"               // <Число,15,2> - сумма за товары и услуги комитентов в рублях
	+ "СуммаБУ_ОтгрузкаВУЕ,"             // <Число,15,2> - сумма по курсу остатка отгрузки в УЕ
	+ "Содержание";                      // <Строка,150>

	Параметры.Вставить("ПроданныеСертификаты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ПроданныеСертификаты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"                // <СправочникСсылка.Валюты>
	+ "Склад,"                          // <СправочникСсылка.Склады>
	+ "ПодразделениеОрганизации,"       //
	+ "СчетКасса,"                      //
	+ "СтатьяДвиженияДенежныхСредств,"  //
	+ "ДеятельностьНаПатенте,"          // <Булево>
	+ "УчитыватьЗадолженностьУСН,"      // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент" // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Подготавливаем таблицы для формирования движений КуДиР по возвратам
Функция ПодготовитьТаблицуВозвратаВыручки(ВыручкаДляРаспределенияОплатыУСН, БезналичныеОплатыВзаиморасчеты, ТаблицаРеквизиты, Отказ, ЭтоОтложенноеПроведение = Ложь) Экспорт

	СтруктураТаблиц = Новый Структура("ТаблицаНаличнаяОплата, ТаблицаБезналичнаяОплата");
	
	Параметры = ПодготовитьПараметрыРаспределенияВыручкиПоВозвратам(ВыручкаДляРаспределенияОплатыУСН, БезналичныеОплатыВзаиморасчеты, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаВыручка.Количество() = 0 Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПустаяТаблицаВзаиморасчетовПогашениеЗадолженности();
	
	Реквизиты = Параметры.Реквизиты[0];
	Организация               = Реквизиты.Организация;
	Период                    = Реквизиты.Период;
	Регистратор               = Реквизиты.Регистратор;
	ДеятельностьНаПатенте     = Реквизиты.ДеятельностьНаПатенте;
	УчитыватьЗадолженностьУСН = Реквизиты.УчитыватьЗадолженностьУСН;
	УчитыватьЗадолженностьУСНПатент = Реквизиты.УчитыватьЗадолженностьУСНПатент;
	ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(
		Реквизиты.Организация, Реквизиты.Период);
		
	Выручка           = Параметры.ТаблицаВыручка;
	БезналичныеОплаты = Параметры.БезналичныеОплаты;
	
	// Выделим наличную оплату
	ОбщаяСуммаВыручки      = Выручка.Итог("СуммаБУ");
	СуммаБезналичнойОплаты = БезналичныеОплаты.Итог("СуммаРуб");
	СуммаОплатыНаличными   = ОбщаяСуммаВыручки - СуммаБезналичнойОплаты;
	
	// Таблица наличной оплаты
	Если СуммаОплатыНаличными > 0 Тогда
	
		ТаблицаНаличнаяОплата = ПустаяТаблицаНаличнаяОплата();
		СтрокаОплаты = ТаблицаНаличнаяОплата.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаОплаты, Реквизиты);
		
		СтрокаОплаты.СчетУчетаРасчетовСРозничнымПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
		СтрокаОплаты.СчетУчетаДенежныхСредств               = Реквизиты.СчетКасса;
		СтрокаОплаты.СуммаВзаиморасчетов                    = СуммаОплатыНаличными;
		СтрокаОплаты.СуммаРуб                               = СуммаОплатыНаличными;
		
		СтруктураТаблиц.Вставить("ТаблицаНаличнаяОплата", ТаблицаНаличнаяОплата);
		
	КонецЕсли;
	
	Если ОбщаяСуммаВыручки = 0 И (УчитыватьЗадолженностьУСН Или УчитыватьЗадолженностьУСНПатент) Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	// Распределим выручку по строкам безналичных оплат в разрезе специальных налоговых режимов, исключая зачтенные авансы.
	Если УчитыватьЗадолженностьУСН И СуммаБезналичнойОплаты > 0 Тогда
		
		КоэффициентБезналичнойОплаты = СуммаБезналичнойОплаты / ОбщаяСуммаВыручки;
		
		БазаРаспределения = БезналичныеОплаты.ВыгрузитьКолонку("СуммаВзаиморасчетов");
		
		СуммыЕНВД = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			Выручка.Итог("СуммаБУ_ЕНВД") * КоэффициентБезналичнойОплаты,
			БазаРаспределения,
			2);
		
		СуммыКомитент = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			Выручка.Итог("СуммаБУ_Комитента") * КоэффициентБезналичнойОплаты,
			БазаРаспределения,
			2);
		
		СуммыТорговыйСбор = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			Выручка.Итог("СуммаБУ_ТорговыйСбор") * КоэффициентБезналичнойОплаты,
			БазаРаспределения,
			2);
		
		Индекс = 0;
		Для каждого СтрокаОплаты Из БезналичныеОплаты Цикл
			Если СтрокаОплаты.ДокументРасчетов = Реквизиты.Регистратор Тогда
				// Не зачтенный аванс - отражение расчетов определяется выручкой
				СтрокаОплаты.СуммаВзаиморасчетовЕНВД         = ?(ЗначениеЗаполнено(СуммыЕНВД),         СуммыЕНВД[Индекс], 0);
				СтрокаОплаты.СуммаВзаиморасчетовКомитента    = ?(ЗначениеЗаполнено(СуммыКомитент),     СуммыКомитент[Индекс], 0);
				СтрокаОплаты.СуммаВзаиморасчетовТорговыйСбор = ?(ЗначениеЗаполнено(СуммыТорговыйСбор), СуммыТорговыйСбор[Индекс], 0);
				
				СтрокаОплаты.СуммаРуб_ЕНВД         = СтрокаОплаты.СуммаВзаиморасчетовЕНВД;
				СтрокаОплаты.СуммаРуб_Комитента    = СтрокаОплаты.СуммаВзаиморасчетовКомитента;
				СтрокаОплаты.СуммаРуб_ТорговыйСбор = СтрокаОплаты.СуммаВзаиморасчетовТорговыйСбор;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Если УчитыватьЗадолженностьУСНПатент И СуммаБезналичнойОплаты > 0 Тогда
		
		КоэффициентБезналичнойОплаты = СуммаБезналичнойОплаты / ОбщаяСуммаВыручки;
		
		БазаРаспределения = БезналичныеОплаты.ВыгрузитьКолонку("СуммаВзаиморасчетов");
		
		СуммыПатент = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			Выручка.Итог("СуммаБУ_Патент") * КоэффициентБезналичнойОплаты,
			БазаРаспределения,
			2);
		
		Индекс = 0;
		Для каждого СтрокаОплаты Из БезналичныеОплаты Цикл
			Если СтрокаОплаты.ДокументРасчетов = Реквизиты.Регистратор Тогда
				// Не зачтенный аванс - отражение расчетов определяется выручкой
				СтрокаОплаты.СуммаВзаиморасчетовПатент = ?(ЗначениеЗаполнено(СуммыПатент), СуммыПатент[Индекс], 0);
				СтрокаОплаты.СуммаРуб_Патент           = СтрокаОплаты.СуммаВзаиморасчетовПатент;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураТаблиц.Вставить("ТаблицаБезналичнаяОплата", БезналичныеОплаты);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Функция ПодготовитьПараметрыРаспределенияВыручкиПоВозвратам(ВыручкаДляРаспределенияОплатыУСН, БезналичныеОплаты, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаВыручки

	СписокОбязательныхКолонок = ""
	+ "СуммаБУ,"             // <Число,15,2> - сумма выручки всего
	+ "СуммаБУ_ЕНВД,"         // <Число,15,2> - сумма выручки по деятельности ЕНВД
	+ "СуммаБУ_Комитента,"    // <Число,15,2> - сумма выручки комитента
	+ "СуммаБУ_ТорговыйСбор," // <Число,15,2> - сумма выручки по деятельности, облагаемой торговым сбором
	+ "СуммаБУ_Патент";       // <Число,15,2> - сумма выручки по патенту
	
	Параметры.Вставить("ТаблицаВыручка", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ВыручкаДляРаспределенияОплатыУСН, СписокОбязательныхКолонок));	
	
	// Подготовка таблицы Параметры.БезналичныеОплаты
	
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"                      // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"                // <ДокументСсылка>
	+ "ДатаДокументаРасчетов,"           // <Дата>
	+ "ВидДоговора,"                     //
	+ "ТипОплаты,"                       // <ПеречислениеСсылка.ТипыОплат> - тип оплаты (плат. карта, кредит, сертификат и т.п.)
	+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "РасчетыВУсловныхЕдиницах,"        // <Булево> - флаг расчетов в условных единицах
	+ "УчетАгентскогоНДС,"                // <Булево> - флаг расчетов по НДС налогового агента
	+ "СчетРасчетов,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
	+ "СчетАвансов,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов по авансам
	+ "СчетАвансов_ОтгрузкаВУЕ,"         // <ПланСчетовСсылка.Хозрасчетный> - счет авансов, для переквалификации в аванс для отгрузки
	+ "Подразделение,"                   // <Ссылка на справочник подразделений> - подразделение по счету авансов
	+ "ПодразделениеРасчетов,"           // <Ссылка на справочник подразделений> - подразделение по счету расчетов
	+ "РасчетыВВалюте,"                  // <Булево>  - флаг расчетов в валюте (в т.ч. и в условных единицах)
	+ "СуммаВзаиморасчетов,"             // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "ОстатокВзаиморасчетов,"           // <Число,15,2> - остаток взаиморасчетов в валюте взаиморасчетов
	+ "СуммаРубПоКурсуАванса,"           // <Число,15,2> - сумма в рублях по курсу на дату аванса
	+ "СуммаРуб,"                        // <Число,15,2> - сумма в рублях (для валютных расчетов - по курсу на дату документа)
	+ "СуммаВзаиморасчетовЕНВД,"         // <Число,15,2> - сумма в валюте расчетов по деятельности ЕНВД
	+ "СуммаРуб_ЕНВД,"                   // <Число,15,2> - сумма в рублях по деятельности ЕНВД
	+ "СуммаВзаиморасчетовПатент,"       // <Число,15,2> - сумма в валюте расчетов по деятельности на патенте
	+ "СуммаРуб_Патент,"                 // <Число,15,2> - сумма в рублях по деятельности на патенте
	+ "СуммаВзаиморасчетовТорговыйСбор," // <Число,15,2> - сумма в валюте расчетов по деятельности на торговом сборе
	+ "СуммаРуб_ТорговыйСбор,"           // <Число,15,2> - сумма в рублях по деятельности на торговом сборе
	+ "СуммаВзаиморасчетовКомитента,"    // <Число,15,2> - сумма в валюте расчетов при реализации товаров и услуг комитентов
	+ "СуммаРуб_Комитента,"              // <Число,15,2> - сумма в рублях при реализации товаров и услуг комитентов
	+ "СуммаБУ_ОтгрузкаВУЕ";             // <Число,15,2> - сумма по курсу остатка отгрузки в УЕ

	Параметры.Вставить("БезналичныеОплаты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		БезналичныеОплаты, СписокОбязательныхКолонок));
	
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"                // <СправочникСсылка.Валюты>
	+ "Склад,"                          // <СправочникСсылка.Склады>
	+ "ПодразделениеОрганизации,"       //
	+ "СчетКасса,"                      //
	+ "СтатьяДвиженияДенежныхСредств,"  //
	+ "ДеятельностьНаПатенте,"          // <Булево>
	+ "УчитыватьЗадолженностьУСН,"      // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент" // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицыВозвратаМПЗВРозницу(ТаблицаВыручки, ТаблицаСписанныеТовары, ТаблицаРеквизиты) Экспорт
	ТаблицыВозвратаМПЗОтПокупателя = Новый Структура("СписокМПЗ,СписокМПЗОтгруженные,СписокДоходов");
	
	Если Не ЗначениеЗаполнено(ТаблицаВыручки)
		И Не ЗначениеЗаполнено(ТаблицаСписанныеТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат ТаблицыВозвратаМПЗОтПокупателя;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицыВозвратаМПЗОтПокупателя;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицВозвратаМПЗВРозницу(ТаблицаВыручки, ТаблицаСписанныеТовары, ТаблицаРеквизиты);
	Параметры.СписокВыручки.Индексы.Добавить("Сделка");
	Параметры.СписокПартий.Индексы.Добавить("Сделка");
	
	ПустаяТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПустаяТаблицаВзаиморасчетовБезналичнаяРозничнаяВыручка();
	
	ПараметрыПоСделке = Новый Структура("СписокВыручки, СписокПартий, СписокВзаиморасчетов, Реквизиты");
	
	Для каждого РеквизитыПоСделке Из Параметры.Реквизиты Цикл
		
		Отбор = Новый Структура("Сделка", РеквизитыПоСделке.Сделка);
		
		ПараметрыПоСделке.Вставить("СписокВыручки", 		Параметры.СписокВыручки.Скопировать(Отбор));
		ПараметрыПоСделке.Вставить("СписокПартий", 			Параметры.СписокПартий.Скопировать(Отбор));
		ПараметрыПоСделке.Вставить("СписокВзаиморасчетов",	ПустаяТаблицаВзаиморасчетов);
		
		ПараметрыПоСделке.Вставить("Реквизиты", 			Параметры.Реквизиты.Скопировать(Отбор));
		
		ТаблицыВозвратаМПЗПоСделке = УчетДоходовИРасходовПредпринимателя.ПолучитьТаблицыВозвратаМПЗ(ПараметрыПоСделке);
		
		Для каждого КлючИЗначение Из ТаблицыВозвратаМПЗОтПокупателя Цикл
			
			ИмяТаблицы = КлючИЗначение.Ключ;
			
			Если  ЗначениеЗаполнено(ТаблицыВозвратаМПЗОтПокупателя[ИмяТаблицы]) 
				И ЗначениеЗаполнено(ТаблицыВозвратаМПЗПоСделке[ИмяТаблицы]) Тогда
			
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицыВозвратаМПЗПоСделке[ИмяТаблицы], ТаблицыВозвратаМПЗОтПокупателя[ИмяТаблицы]);
			
			Иначе
			
				ТаблицыВозвратаМПЗОтПокупателя[ИмяТаблицы] = ТаблицыВозвратаМПЗПоСделке[ИмяТаблицы];
			
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицыВозвратаМПЗОтПокупателя;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицВозвратаМПЗВРозницу(ТаблицаВыручки, ТаблицаСписанныеТовары,  ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
		+ "ИмяСписка,"								// <Строка> - имя списка документа
		+ "НомерСтроки,"							// <Число> - номер строки документа
		+ "Номенклатура,"							// <СправочникСсылка.*> - списываемая номенклатура
		+ "Сделка,"									// <ДокументСсылка.ОтчетОРозничныхПродажах> - документ по которому производится возврат
		+ "СчетУчета,"								// <ПланСчетовСсылка.Хозрасчетный> - счет учета номенклатуры
		+ "СчетДоходов,"							// <ПланСчетовСсылка.Хозрасчетный> - счет доходов
		+ "НоменклатурнаяГруппа,"					// <СправочникСсылка.НоменклатурныеГруппы>  - номенклатурная группа
		+ "СтатьяЗатрат,"							// <Справочник.СтатьиЗатрат,Справочник.ПрочиеДоходыИРасходы,Справочник.РасходыБудущихПериодов> - статья затрат
		+ "ВидРасходовНУ,"							// <Перечисления.ВидыРасходовНУ> - вид расхода статьи затрат
		+ "ВидДеятельностиДляНалоговогоУчетаЗатрат,"// <Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат> - вид деятельности
		+ "ПринятиеКналоговомуУчету,"				// <Булево> - признак принятия к НУ прочих расходов
		+ "Количество,"								// <Число,15,3> 
		+ "Сумма,"									// <Число,15,2> - сумма выручки
		+ "НДС";									// <Число,15,2> - сумма НДС начисленного
		
	Параметры.Вставить("СписокВыручки", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыручки, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
		+ "ИмяСписка,"				// <Строка> - имя списка документа
		+ "НомерСтроки,"			// <Число> - номер строки документа
		+ "Номенклатура,"			// <СправочникСсылка.*> - списываемая номенклатура
		+ "СчетУчета,"				// <ПланСчетовСсылка.Хозрасчетный> - счет учета номенклатуры
		+ "Партия,"					// <ДокументСсылка.*> - партия возвращаемых МПЗ
		+ "Сделка,"					// <ДокументСсылка.ОтчетОРозничныхПродажах> - документ по которому производится возврат
		+ "Количество,"				// <Число,15,3>
		+ "СуммаСписания";			// <Число,15,2>
		
	Параметры.Вставить("СписокПартий", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"			// <СправочникСсылка.Организации>
		+ "ДеятельностьНаПатенте,"	// <Булево> - признак деятельности на патенте
		+ "ВидОперации,"			// <ПеречислениеСсылка.*> - вид операции
		+ "ТипСклада,"				// <ПеречислениеСсылка.ТипыСкладов> - тип склада
		+ "Партия,"					// <ДокументСсылка.ОтчетОРозничныхПродажах> - документ по которому производится возврат
		+ "ПартияДата,"				// <Дата> - дата документа по которому производится возврат
		+ "УказанДокументОтгрузки,"	// <Булево> - отгрузка производится по документу
		+ "Сделка";					// <ДокументСсылка.ОтчетОРозничныхПродажах> - документ по которому производится возврат
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Функция ПустаяТаблицаНаличнаяОплата()

	ТаблицаОплата = Новый ТаблицаЗначений;
	
	ТаблицаОплата.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаОплата.Колонки.Добавить("СчетУчетаРасчетовСРозничнымПокупателем", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОплата.Колонки.Добавить("СчетУчетаДенежныхСредств",Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОплата.Колонки.Добавить("СтатьяДвиженияДенежныхСредств", Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	ТаблицаОплата.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОплата.Колонки.Добавить("СуммаРуб", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаОплата;

КонецФункции

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт

	ПараметрыПроведения = Новый Структура;

	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;

	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Реквизиты.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	Реквизиты.Вставить("РасчетыВВалюте",  Реквизиты.ВалютаДокумента <> Реквизиты.ВалютаРеглУчета);

	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период);
	ПрименяетсяУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация, Реквизиты.Период);

	Если ПрименяетсяУСН ИЛИ ПрименяетсяУСНПатент Тогда
		// Для УСН необходимо получать все данные из документа для распределения выручки.
		// Фильтрация по актуализируемому договору выполняется в процедурах модуля НалоговыйУчетУСН
		// при формировании движений.
		ЭтоОтложенноеПроведение = Ложь;

	ИначеЕсли ЭтоОтложенноеПроведение Тогда
		// Для общей системы налогообложения в момент актуализации отложенных расчетов получение данных 
		// из табличных частей документа не требуется.
		Реквизиты.ЕстьТовары = Ложь;
		Реквизиты.ЕстьАгентскиеУслуги = Ложь;
	КонецЕсли;

	Реквизиты.Вставить("ЭтоОтложенноеПроведение", ЭтоОтложенноеПроведение);
	Запрос.УстановитьПараметр("ЭтоОтложенноеПроведение", ЭтоОтложенноеПроведение);
	Запрос.УстановитьПараметр("ДоговорДляОтложенногоПроведения", ДоговорДляОтложенногоПроведения);
	Запрос.УстановитьПараметр("СодержаниеВозврат", НСтр("ru = 'Возврат товаров от покупателя'"));
	Запрос.УстановитьПараметр("СодержаниеВозвратВыручки", НСтр("ru = 'Выдача из кассы: возврат денежных средств розничному покупателю.'"));
	
	Запрос.УстановитьПараметр("СчетаТоваровКомитентов", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию));

	Если Реквизиты.РасчетыВВалюте Тогда
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Период);
		КоэффициентРуб = СтруктураКурсаВзаиморасчетов.Курс / СтруктураКурсаВзаиморасчетов.Кратность;
		Реквизиты.Вставить("КурсВзаиморасчетов", 		СтруктураКурсаВзаиморасчетов.Курс);
		Реквизиты.Вставить("КратностьВзаиморасчетов",	СтруктураКурсаВзаиморасчетов.Кратность);
	Иначе
		КоэффициентРуб = 1;
		Реквизиты.Вставить("КурсВзаиморасчетов", 		1);
		Реквизиты.Вставить("КратностьВзаиморасчетов",	1);
	КонецЕсли;

	Запрос.УстановитьПараметр("РасчетыВВалюте", Реквизиты.РасчетыВВалюте);
	Запрос.УстановитьПараметр("КоэффициентРуб", КоэффициентРуб);
	
	Реквизиты.Вставить("ПрименяетсяУСН",
		УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПрименяетсяУСНДоходыМинусРасходы",
		УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПрименяетсяУСНПатент",
		УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация, Реквизиты.Период));
		
	Запрос.УстановитьПараметр("Субсчета10",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Материалы));
		
	Запрос.УстановитьПараметр("МассивСчетовДляГТД", УчетНДСВызовСервераПовтИсп.СчетаУчетаДляГТД());
		
	Реквизиты.Вставить("ПрименяетсяУСН", ПрименяетсяУСН);
	Реквизиты.Вставить("ПрименяетсяУСНПатент", ПрименяетсяУСНПатент);
	Реквизиты.Вставить("ПлательщикНДС", УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("РаздельныйУчетНДСНаСчете19", УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПлательщикНДФЛ", УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ВедетсяУчетНДСПоФЗ134", УчетНДС.ВедетсяУчетНДСПоФЗ134(Реквизиты.Период));
	Реквизиты.Вставить("РозничнаяТорговляОблагаетсяЕНВД",
		УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Реквизиты.Организация, Реквизиты.Период));
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период);
	Реквизиты.Вставить("УчетПоПродажнойСтоимости",
		СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	ТаблицаРеквизиты[0].УчитыватьЗадолженностьУСН       = Реквизиты.ПрименяетсяУСН;
	ТаблицаРеквизиты[0].УчитыватьЗадолженностьУСНПатент = Реквизиты.ПрименяетсяУСНПатент;
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Запрос.УстановитьПараметр("СинонимТовары",            НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("Период",                   Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",              Реквизиты.Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Реквизиты.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Склад",                    Реквизиты.Склад);
	Запрос.УстановитьПараметр("Счета9102",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеРасходы));
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	Запрос.УстановитьПараметр("ДеятельностьНаПатенте",           Реквизиты.ДеятельностьНаПатенте);
	Запрос.УстановитьПараметр("ДеятельностьНаТорговомСборе",     Реквизиты.ДеятельностьНаТорговомСборе);
	Запрос.УстановитьПараметр("РозничнаяТорговляОблагаетсяЕНВД", Реквизиты.РозничнаяТорговляОблагаетсяЕНВД);
	Запрос.УстановитьПараметр("ПрименяетсяУСНПатент",            Реквизиты.ПрименяетсяУСНПатент);
	Запрос.УстановитьПараметр("ПрименяетсяУСН",                  Реквизиты.ПрименяетсяУСН);
	Запрос.УстановитьПараметр("ПлательщикНДФЛ",                  Реквизиты.ПлательщикНДФЛ);
	Запрос.УстановитьПараметр("УчетПоПродажнойСтоимости",        Реквизиты.УчетПоПродажнойСтоимости);

	Запрос.УстановитьПараметр("ЕстьОплатаПлатежнойКартойНТТ", ЕстьОплатаПлатежнойКартойНТТ(Реквизиты));
	Запрос.УстановитьПараметр("ЕстьБезналичнаяОплатаАТТ",     Реквизиты.ЕстьБезналичнаяОплатаАТТ);
	
	НомераТаблиц = Новый Структура;
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРеализацияУслуг(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПереоценкаТоваровВРознице(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаТоварыНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРаспределениеВыручки(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаБезналичнаяОплата(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПодарочныеСертификаты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозвратыТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаНДСВозвраты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРасходыУСНВозвраты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВозвратыОплаты(НомераТаблиц, ПараметрыПроведения, Реквизиты);

	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого КлючИЗначение Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(КлючИЗначение.Ключ, Результат[КлючИЗначение.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;

	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", 		 НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты",						 НомераТаблиц.Количество());
	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьТоварыКомитентов) КАК ЕстьТоварыКомитентов,
	|	МАКСИМУМ(СоставДокумента.ЕстьАгентскиеУслуги) КАК ЕстьАгентскиеУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьБезналичнаяОплатаАТТ) КАК ЕстьБезналичнаяОплатаАТТ,
	|	МАКСИМУМ(СоставДокумента.ЕстьВозвраты) КАК ЕстьВозвраты,
	|	МАКСИМУМ(СоставДокумента.ЕстьВозвраты) КАК ЕстьБезналичныеВозвратыОплаты,
	|	МАКСИМУМ(СоставДокумента.ЕстьПодарочныеСертификаты) КАК ЕстьПодарочныеСертификаты
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьТоварыКомитентов,
	|		ЛОЖЬ КАК ЕстьАгентскиеУслуги,
	|		ЛОЖЬ КАК ЕстьБезналичнаяОплатаАТТ,
	|		ЛОЖЬ КАК ЕстьПодарочныеСертификаты,
	|		ЛОЖЬ КАК ЕстьВозвраты,
	|		ЛОЖЬ КАК ЕстьБезналичныеВозвраты
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|		И ЕСТЬNULL(ТаблицаДокумента.СчетУчета.Забалансовый, ЛОЖЬ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Оплата КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|		И ТаблицаДокумента.СуммаОплаты > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.ВозвратОплаты КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|		И ТаблицаДокумента.СуммаОплаты > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Возвраты КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	Реквизиты.Склад.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаВыручки,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.Патент КАК Патент,
	|	Реквизиты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	Реквизиты.ДеятельностьНаТорговомСборе КАК ДеятельностьНаТорговомСборе,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ТипСклада КАК ТипСклада,
	|	Реквизиты.НоменклатурнаяГруппаВыручки КАК НоменклатурнаяГруппаВыручки,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.Патент КАК Патент,
	|	Реквизиты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	Реквизиты.ДеятельностьНаТорговомСборе КАК ДеятельностьНаТорговомСборе,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Ложь КАК ПредъявленНДСКВычету0,
	|	""Реализация"" КАК ТипСписания,
	|	Реквизиты.Ссылка КАК ДокументРеализации,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	ВЫРАЗИТЬ(""Реализация товаров в розницу"" КАК СТРОКА(150)) КАК Содержание,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьВозвраты, ЛОЖЬ) КАК ЕстьВозвраты,
	|	ЕСТЬNULL(СоставДокумента.ЕстьБезналичныеВозвратыОплаты, ЛОЖЬ) КАК ЕстьБезналичныеВозвратыОплаты,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТоварыКомитентов, ЛОЖЬ) КАК ЕстьТоварыКомитентов,
	|	ЕСТЬNULL(СоставДокумента.ЕстьАгентскиеУслуги, ЛОЖЬ) КАК ЕстьАгентскиеУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьБезналичнаяОплатаАТТ, ЛОЖЬ) КАК ЕстьБезналичнаяОплатаАТТ,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПодарочныеСертификаты, ЛОЖЬ) КАК ЕстьПодарочныеСертификаты,
	|	ЗНАЧЕНИЕ(Справочник.КодыОперацийРаздела7ДекларацииПоНДС.ПустаяСсылка) КАК КодОперацииПоСделке,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ) КАК СчетУчетаНДС,
	|	ЛОЖЬ КАК НДСИсчисляетсяНалоговымАгентом
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары",              НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаАгентскиеУслуги",     НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаОплата",              НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаПродажаСертификатов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.Услуга, ЛОЖЬ) КАК ЭтоУслуга,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА ТаблицаТовары.Сумма
	|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА ТаблицаТовары.Сумма
	|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаРуб,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДСРуб,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.СчетУчета КАК СчетУчета,
	|	ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	ТаблицаТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	ТаблицаТовары.СчетДоходов КАК СчетДоходов,
	|	ВЫБОР
	|		КОГДА СчетаЕНВД.Счет ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЕНВД,
	|	ТаблицаТовары.СчетРасходов КАК СчетРасходов,
	|	ТаблицаТовары.Субконто КАК Субконто,
	|	ТаблицаТовары.ДокументОприходования КАК ДокументОприходования,
	|	ТаблицаТовары.Себестоимость КАК Себестоимость,
	|	СправочникНоменклатура.КодРаздел7ДекларацииНДС КАК КодРаздел7ДекларацииНДС,
	|	ЕСТЬNULL(КодыОперацийРаздела7ДекларацииПоНДС.ОперацияНеПодлежитНалогообложению, ЛОЖЬ) КАК КодСоответствуетСт149НКРФ,
	|	ЕСТЬNULL(КодыОперацийРаздела7ДекларацииПоНДС.ВключаетсяВРеестрПодтверждающихДокументов, ЛОЖЬ) КАК КодВключаетсяВРеестр
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаЕНВД
	|		ПО ТаблицаТовары.СчетДоходов = СчетаЕНВД.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КодыОперацийРаздела7ДекларацииПоНДС КАК КодыОперацийРаздела7ДекларацииПоНДС
	|			ПО СправочникНоменклатура.КодРаздел7ДекларацииНДС = КодыОперацийРаздела7ДекларацииПоНДС.Ссылка
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &ЭтоОтложенноеПроведение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАгентскиеУслуги.Ссылка КАК Ссылка,
	|	ТаблицаАгентскиеУслуги.НомерСтроки КАК НомерСтроки,
	|	ТаблицаАгентскиеУслуги.Номенклатура КАК Номенклатура,
	|	ТаблицаАгентскиеУслуги.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаАгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА ТаблицаАгентскиеУслуги.Сумма
	|		ИНАЧЕ ТаблицаАгентскиеУслуги.Сумма + ТаблицаАгентскиеУслуги.СуммаНДС
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ТаблицаАгентскиеУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаАгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА ТаблицаАгентскиеУслуги.Сумма
	|		ИНАЧЕ ТаблицаАгентскиеУслуги.Сумма + ТаблицаАгентскиеУслуги.СуммаНДС
	|	КОНЕЦ КАК СуммаРуб,
	|	ТаблицаАгентскиеУслуги.СуммаНДС КАК СуммаНДСРуб,
	|	ТаблицаАгентскиеУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаАгентскиеУслуги.Контрагент КАК Контрагент,
	|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаАгентскиеУслуги.СчетРасчетов КАК СчетРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КодыОперацийРаздела7ДекларацииПоНДС.ПустаяСсылка) КАК КодРаздел7ДекларацииНДС,
	|	ЛОЖЬ КАК КодСоответствуетСт149НКРФ,
	|	ЛОЖЬ КАК КодВключаетсяВРеестр
	|ПОМЕСТИТЬ ТаблицаАгентскиеУслуги
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК ТаблицаАгентскиеУслуги
	|ГДЕ
	|	ТаблицаАгентскиеУслуги.Ссылка = &Ссылка
	|	И НЕ &ЭтоОтложенноеПроведение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплата.Ссылка КАК Ссылка,
	|	ТаблицаОплата.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ТаблицаОплата.СуммаОплаты КАК СуммаОплаты,
	|	ВЫРАЗИТЬ(ТаблицаОплата.СуммаОплаты * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаОплатыРуб,
	|	ТаблицаОплата.ВидОплаты.Контрагент КАК Контрагент,
	|	ТаблицаОплата.ВидОплаты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаОплата.ВидОплаты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаОплата.ВидОплаты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаОплата.ВидОплаты.СчетУчетаРасчетов КАК СчетУчетаРасчетов
	|ПОМЕСТИТЬ ТаблицаОплата
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.Ссылка = &Ссылка
	|	И (НЕ &ЭтоОтложенноеПроведение
	|			ИЛИ ТаблицаОплата.ВидОплаты.ДоговорКонтрагента = &ДоговорДляОтложенногоПроведения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодарочныеСертификаты.Ссылка КАК Ссылка,
	|	МИНИМУМ(ТаблицаПодарочныеСертификаты.НомерСтроки) КАК НомерСтроки,
	|	СУММА(ВЫРАЗИТЬ(ТаблицаПодарочныеСертификаты.Сумма * &КоэффициентРуб КАК ЧИСЛО(15, 2))) КАК СуммаРуб,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.Контрагент КАК Контрагент,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.СчетУчетаРасчетов КАК СчетУчетаРасчетов,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.СчетУчетаРасчетов КАК СчетУчетаАвансов
	|ПОМЕСТИТЬ ТаблицаПродажаСертификатов
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты КАК ТаблицаПодарочныеСертификаты
	|ГДЕ
	|	ТаблицаПодарочныеСертификаты.Ссылка = &Ссылка
	|	И (НЕ &ЭтоОтложенноеПроведение
	|			ИЛИ ТаблицаПодарочныеСертификаты.ВидОплаты.ДоговорКонтрагента = &ДоговорДляОтложенногоПроведения)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПодарочныеСертификаты.Ссылка,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ТипОплаты,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.Контрагент,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ДоговорКонтрагента,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.СчетУчетаРасчетов,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ДоговорКонтрагента.ВидДоговора,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.СчетУчетаРасчетов" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если Реквизиты.ЕстьВозвраты Тогда
		НомераТаблиц.Вставить("ВТВозвратыРанееОтраженныеСделки", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВременнаяТаблицаВозвратыСделки", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВременнаяТаблицаВозвратОплаты", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВременнаяТаблицаВозвраты", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РанееОтраженныеОтчетыОРозничныхПродажах.Ссылка КАК СделкаСсылка,
		|	ТаблицаВозвраты.Номенклатура КАК Номенклатура,
		|	ТаблицаВозвраты.ДатаРеализации КАК ДатаРеализации
		|ПОМЕСТИТЬ ВТ_ТаблицаВозвратыРанееОтраженныеСделки
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Возвраты КАК ТаблицаВозвраты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК РанееОтраженныеОтчетыОРозничныхПродажах
		|		ПО (РанееОтраженныеОтчетыОРозничныхПродажах.Организация = &Организация)
		|			И (РанееОтраженныеОтчетыОРозничныхПродажах.Склад = &Склад)
		|			И (РанееОтраженныеОтчетыОРозничныхПродажах.ПодразделениеОрганизации = &ПодразделениеОрганизации)
		|			И (РанееОтраженныеОтчетыОРозничныхПродажах.Дата МЕЖДУ НАЧАЛОПЕРИОДА(ТаблицаВозвраты.ДатаРеализации, ДЕНЬ) И КОНЕЦПЕРИОДА(ТаблицаВозвраты.ДатаРеализации, ДЕНЬ))
		|			И (РанееОтраженныеОтчетыОРозничныхПродажах.Проведен)
		|ГДЕ
		|	ТаблицаВозвраты.Ссылка = &Ссылка
		|	И НЕ РанееОтраженныеОтчетыОРозничныхПродажах.Ссылка ЕСТЬ NULL
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	СделкаСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Сделка.Ссылка) КАК СделкаСсылка,
		|	ВТ_ТаблицаВозвратыРанееОтраженныеСделки.Номенклатура КАК Номенклатура,
		|	ВТ_ТаблицаВозвратыРанееОтраженныеСделки.ДатаРеализации КАК ДатаРеализации
		|ПОМЕСТИТЬ ВТ_ТаблицаВозвратыСделки
		|ИЗ
		|	ВТ_ТаблицаВозвратыРанееОтраженныеСделки КАК ВТ_ТаблицаВозвратыРанееОтраженныеСделки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК Сделка
		|		ПО ВТ_ТаблицаВозвратыРанееОтраженныеСделки.СделкаСсылка = Сделка.Ссылка
		|			И ВТ_ТаблицаВозвратыРанееОтраженныеСделки.Номенклатура = Сделка.Номенклатура
		|ГДЕ
		|	НЕ Сделка.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТаблицаВозвратыРанееОтраженныеСделки.Номенклатура,
		|	ВТ_ТаблицаВозвратыРанееОтраженныеСделки.ДатаРеализации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ДатаРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОплата.Ссылка КАК Ссылка,
		|	ТаблицаОплата.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
		|	ТаблицаОплата.СуммаОплаты КАК СуммаОплаты,
		|	ВЫРАЗИТЬ(ТаблицаОплата.СуммаОплаты * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаОплатыРуб,
		|	ТаблицаОплата.ВидОплаты.Контрагент КАК Контрагент,
		|	ТаблицаОплата.ВидОплаты.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаОплата.ВидОплаты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
		|	ТаблицаОплата.ВидОплаты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаОплата.ВидОплаты.СчетУчетаРасчетов КАК СчетУчетаРасчетов
		|ПОМЕСТИТЬ ТаблицаВозвратыОплаты
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.ВозвратОплаты КАК ТаблицаОплата
		|ГДЕ
		|	ТаблицаОплата.Ссылка = &Ссылка
		|	И (НЕ &ЭтоОтложенноеПроведение
		|			ИЛИ ТаблицаОплата.ВидОплаты.ДоговорКонтрагента = &ДоговорДляОтложенногоПроведения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВозвращенныеТовары.Ссылка КАК Ссылка,
		|	ТаблицаВозвращенныеТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаВозвращенныеТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаВозвращенныеТовары.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаВозвращенныеТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА ТаблицаВозвращенныеТовары.Сумма
		|		ИНАЧЕ ТаблицаВозвращенныеТовары.Сумма + ТаблицаВозвращенныеТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаВозвращенныеТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА ТаблицаВозвращенныеТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА ТаблицаВозвращенныеТовары.Сумма
		|		ИНАЧЕ ТаблицаВозвращенныеТовары.Сумма + ТаблицаВозвращенныеТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаРуб,
		|	ВЫРАЗИТЬ(ТаблицаВозвращенныеТовары.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДСРуб,
		|	ТаблицаВозвращенныеТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаВозвращенныеТовары.НомерГТД КАК НомерГТД,
		|	ТаблицаВозвращенныеТовары.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ТаблицаВозвращенныеТовары.СчетУчета КАК СчетУчета,
		|	ВЫБОР
		|		КОГДА ТаблицаВозвращенныеТовары.СчетУчета В (&СчетаТоваровКомитентов)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоКомиссия,
		|	ТаблицаВозвращенныеТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
		|	ТаблицаВозвращенныеТовары.СчетДоходов КАК СчетДоходов,
		|	ВЫБОР
		|		КОГДА СчетаЕНВД.Счет ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДоходЕНВД,
		|	ТаблицаВозвращенныеТовары.СчетРасходов КАК СчетРасходов,
		|	ТаблицаВозвращенныеТовары.Субконто КАК Субконто,
		|	ТаблицаВозвращенныеТовары.ДатаРеализации КАК ДатаРеализации,
		|	НЕ ВТ_Сделка.СделкаСсылка ЕСТЬ NULL КАК УказанДокументОтгрузки,
		|	ТаблицаВозвращенныеТовары.СчетУчета.Забалансовый КАК СчетУчетаЗабалансовый,
		|	ЕСТЬNULL(ВТ_Сделка.СделкаСсылка = &Ссылка, ЛОЖЬ) КАК ВозвратТекущейСмены,
		|	ВТ_Сделка.СделкаСсылка КАК Сделка,
		|	ТаблицаВозвращенныеТовары.НомерФискальногоЧека КАК НомерФискальногоЧека
		|ПОМЕСТИТЬ ТаблицаВозвраты
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Возвраты КАК ТаблицаВозвращенныеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаЕНВД
		|		ПО ТаблицаВозвращенныеТовары.СчетДоходов = СчетаЕНВД.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаВозвратыСделки КАК ВТ_Сделка
		|		ПО ТаблицаВозвращенныеТовары.ДатаРеализации = ВТ_Сделка.ДатаРеализации
		|			И ТаблицаВозвращенныеТовары.Номенклатура = ВТ_Сделка.Номенклатура
		|ГДЕ
		|	ТаблицаВозвращенныеТовары.Ссылка = &Ссылка";
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	
	Возврат ТекстЗапроса;
КонецФункции

#Область ЗапросыВозврат

Функция ТекстЗапросаВозвратыТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьВозвраты Тогда
		ПараметрыПроведения.Вставить("ВозвратыТоваровРеквизиты",			Неопределено);
		ПараметрыПроведения.Вставить("ВозвратыТоваровТаблицаТовары",		Неопределено);
		ПараметрыПроведения.Вставить("ВозвратыТоваровСчетаУчета",			Неопределено);
		ПараметрыПроведения.Вставить("ВозвратыТоваровНоменклатура",			Неопределено);
		ПараметрыПроведения.Вставить("ВозвратыТоваровТаблицаДокумента",		Неопределено);
		ПараметрыПроведения.Вставить("ВозвратыТоваровОплатаКартой",		Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВозвратыТоваровРеквизиты", 			НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВозвратыТоваровТаблицаТовары", 		НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВозвратыТоваровСчетаУчета", 			НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВозвратыТоваровНоменклатура",		НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВозвратыТоваровТаблицаДокумента",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВозвратыТоваровОплатаКартой",		НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	ТаблицаВозвраты.Сделка КАК Сделка,
	|	ТаблицаВозвраты.ВозвратТекущейСмены КАК ВозвратТекущейСмены,
	|	ТаблицаВозвраты.Сделка КАК Партия,
	|	ТаблицаВозвраты.ДатаРеализации КАК ПартияДата,
	|	""ОтчетОРозничныхПродажах"" КАК ВидОперации,
	|	ИСТИНА КАК ЭтоВозврат,
	|	НЕОПРЕДЕЛЕНО КАК ТипСклада,
	|	Реквизиты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	ТаблицаВозвраты.УказанДокументОтгрузки КАК УказанДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА ТаблицаВозвраты.УказанДокументОтгрузки
	|			ТОГДА ТаблицаВозвраты.ДатаРеализации
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаДокументаРеализации,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	&СодержаниеВозврат КАК Содержание,
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах
	|ИЗ
	|	ТаблицаВозвраты КАК ТаблицаВозвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Возвраты"" КАК ИмяСписка,
	|	""Товары возвращенные"" КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ТаблицаВозвраты.НомерСтроки КАК НомерСтроки,
	|	Реквизиты.Склад КАК Склад,
	|	ТаблицаВозвраты.СчетУчета КАК СчетУчета,
	|	ТаблицаВозвраты.СчетУчетаЗабалансовый КАК СчетУчетаЗабалансовый,
	|	ТаблицаВозвраты.СчетУчетаЗабалансовый КАК Комиссионный,
	|	ТаблицаВозвраты.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаВозвраты.УказанДокументОтгрузки
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Реквизиты.Ссылка
	|	КОНЕЦ КАК Партия,
	|	ТаблицаВозвраты.Сделка КАК Сделка,
	|	0 КАК Себестоимость,
	|	ТаблицаВозвраты.Количество КАК Количество,
	|	ТаблицаВозвраты.СчетРасходов КАК КорСчетСписания,
	|	ТаблицаВозвраты.Субконто КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	1 КАК ВидКорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	0 КАК СуммаСписания,
	|	0 КАК СуммаСписанияНУ,
	|	0 КАК СуммаСписанияПР,
	|	0 КАК СуммаСписанияВР,
	|	0 КАК СуммаКорСписания,
	|	0 КАК СуммаКорСписанияНУ,
	|	0 КАК СуммаКорСписанияПР,
	|	0 КАК СуммаКорСписанияВР,
	|	ТаблицаВозвраты.УказанДокументОтгрузки КАК УказанДокументОтгрузки
	|ИЗ
	|	ТаблицаВозвраты КАК ТаблицаВозвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВозвраты.СчетУчета КАК СчетУчета,
	|	ТаблицаВозвраты.Сделка КАК Сделка,
	|	ТаблицаВозвраты.СчетУчетаЗабалансовый КАК Комиссионный
	|ИЗ
	|	ТаблицаВозвраты КАК ТаблицаВозвраты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВозвраты.Номенклатура КАК Номенклатура,
	|	ТаблицаВозвраты.Сделка КАК Сделка
	|ИЗ
	|	ТаблицаВозвраты КАК ТаблицаВозвраты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерСписка,
	|	""Возвраты"" КАК ИмяСписка,
	|	ТаблицаВозвраты.ДатаРеализации КАК ДатаРеализации,
	|	ТаблицаВозвраты.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВозвраты.Номенклатура КАК Номенклатура,
	|	ТаблицаВозвраты.Количество КАК Количество,
	|	ТаблицаВозвраты.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаВозвраты.СуммаРуб КАК СуммаРуб,
	|	ТаблицаВозвраты.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ТаблицаВозвраты.СуммаРуб - ТаблицаВозвраты.СуммаНДСРуб КАК СуммаБезНДСРуб,
	|	ТаблицаВозвраты.СуммаРуб КАК СуммаБУ,
	|	ТаблицаВозвраты.СуммаРуб КАК СуммаНУ,
	|	ТаблицаВозвраты.СчетУчета КАК СчетУчета,
	|	ТаблицаВозвраты.СчетДоходов КАК СчетДоходов,
	|	ТаблицаВозвраты.Субконто КАК Субконто,
	|	ТаблицаВозвраты.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаВозвраты.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	ТаблицаВозвраты.ЭтоКомиссия КАК ЭтоКомиссия,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Комитент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаРасчетовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями) КАК КорСчет,
	|	Реквизиты.Склад КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Покупатель,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.Ссылка КАК ДокументРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	0 КАК СуммаПоступленияОтКомитента,
	|	ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка) КАК СчетФактура,
	|	ЛОЖЬ КАК ВыставленСФ,
	|	ТаблицаВозвраты.НомерФискальногоЧека КАК НомерДокументаОплаты,
	|	Реквизиты.Дата КАК ДатаДокументаОплаты,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСФ,
	|	ТаблицаВозвраты.Сделка КАК Сделка
	|ИЗ
	|	ТаблицаВозвраты КАК ТаблицаВозвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВозвратыОплаты.Контрагент КАК Контрагент,
	|	ТаблицаВозвратыОплаты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаВозвратыОплаты.СчетУчетаРасчетов КАК СчетУчетаРасчетов,
	|	ТаблицаВозвратыОплаты.СуммаОплатыРуб КАК СуммаОплатыРуб
	|ИЗ
	|	ТаблицаВозвратыОплаты КАК ТаблицаВозвратыОплаты
	|ГДЕ
	|	ТаблицаВозвратыОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВозвратыОплаты(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ (Реквизиты.ЕстьВозвраты И (Реквизиты.ПрименяетсяУСН ИЛИ Реквизиты.ПрименяетсяУСНПатент)) Тогда
		ПараметрыПроведения.Вставить("ВыручкаДляРаспределенияВозвратовУСН", Неопределено);
		ПараметрыПроведения.Вставить("ДвиженияВозвратКУДиР",                Неопределено);
		ПараметрыПроведения.Вставить("ДвиженияВозвратКУДиРПатент",          Неопределено);
	Иначе
		НомераТаблиц.Вставить("ВыручкаДляРаспределенияВозвратовУСН", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ДвиженияВозвратКУДиР",                НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ДвиженияВозвратКУДиРПатент",          НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК ДокументРасчетов,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями) КАК СчетРасчетов,
		|	НЕОПРЕДЕЛЕНО КАК Субконто1,
		|	НЕОПРЕДЕЛЕНО КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
		|	СУММА(ТаблицаВозвраты.СуммаРуб) КАК СуммаВзаиморасчетов,
		|	СУММА(ТаблицаВозвраты.СуммаРуб) КАК СуммаБУ,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТаблицаВозвраты.ЭтоКомиссия
		|					И НЕ &ДеятельностьНаПатенте
		|					И НЕ &ДеятельностьНаТорговомСборе
		|					И ТаблицаВозвраты.ДоходЕНВД
		|				ТОГДА ТаблицаВозвраты.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБУ_ЕНВД,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТаблицаВозвраты.ЭтоКомиссия
		|					И &ДеятельностьНаПатенте
		|					И НЕ &ДеятельностьНаТорговомСборе
		|				ТОГДА ТаблицаВозвраты.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБУ_Патент,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаВозвраты.ЭтоКомиссия
		|				ТОГДА ТаблицаВозвраты.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБУ_Комитента,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТаблицаВозвраты.ЭтоКомиссия
		|					И НЕ &ДеятельностьНаПатенте
		|					И &ДеятельностьНаТорговомСборе
		|				ТОГДА ТаблицаВозвраты.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБУ_ТорговыйСбор
		|ИЗ
		|	ТаблицаВозвраты КАК ТаблицаВозвраты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	Реквизиты.Ссылка,
		|	Реквизиты.ВалютаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(-ТаблицаВозвраты.СуммаРуб) КАК Графа4,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТаблицаВозвраты.ЭтоКомиссия
		|					И НЕ &ДеятельностьНаПатенте
		|					И НЕ &ДеятельностьНаТорговомСборе
		|					И НЕ ТаблицаВозвраты.ДоходЕНВД
		|				ТОГДА -ТаблицаВозвраты.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Графа5,
		|	0 КАК Графа6,
		|	0 КАК Графа7,
		|	СУММА(-ТаблицаВозвраты.СуммаНДСРуб) КАК НДС,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТаблицаВозвраты.ЭтоКомиссия
		|					И (&ДеятельностьНаПатенте
		|						ИЛИ ТаблицаВозвраты.ДоходЕНВД)
		|					И НЕ &ДеятельностьНаТорговомСборе
		|				ТОГДА -ТаблицаВозвраты.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДоходЕНВД,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТаблицаВозвраты.ЭтоКомиссия
		|					И НЕ &ДеятельностьНаПатенте
		|					И &ДеятельностьНаТорговомСборе
		|					И НЕ ТаблицаВозвраты.ДоходЕНВД
		|				ТОГДА -ТаблицаВозвраты.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДоходТорговыйСбор,
		|	&СодержаниеВозвратВыручки КАК Содержание,
		|	ТаблицаВозвраты.НомерФискальногоЧека КАК НомерФискальногоЧека
		|ИЗ
		|	ТаблицаВозвраты КАК ТаблицаВозвраты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаВозвраты.НомерФискальногоЧека <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаВозвраты.НомерФискальногоЧека
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТаблицаВозвраты.ЭтоКомиссия
		|					И &ДеятельностьНаПатенте
		|					И НЕ &ДеятельностьНаТорговомСборе
		|					И ТаблицаВозвраты.ДоходЕНВД
		|				ТОГДА -ТаблицаВозвраты.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Графа4,
		|	&СодержаниеВозвратВыручки КАК Содержание,
		|	ТаблицаВозвраты.НомерФискальногоЧека КАК НомерФискальногоЧека
		|ИЗ
		|	ТаблицаВозвраты КАК ТаблицаВозвраты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаВозвраты.НомерФискальногоЧека <> """" И &ДеятельностьНаПатенте
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаВозвраты.НомерФискальногоЧека" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Не Реквизиты.ЕстьБезналичныеВозвратыОплаты Тогда
		ПараметрыПроведения.Вставить("ВозвратБезналичныхОплат", Неопределено);
		ПараметрыПроведения.Вставить("ВозвратОплатыНаличные",   Неопределено);
	Иначе
		НомераТаблиц.Вставить("ВозвратОплатыНаличные",   НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВозвратБезналичныхОплат", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	СУММА(ВложенныйЗапрос.СуммаРуб) КАК СуммаРуб
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ТаблицаВозвраты.СуммаРуб) КАК СуммаРуб
		|	ИЗ
		|		ТаблицаВозвраты КАК ТаблицаВозвраты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СУММА(-ТаблицаВозвратыОплаты.СуммаОплатыРуб)
		|	ИЗ
		|		ТаблицаВозвратыОплаты КАК ТаблицаВозвратыОплаты) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ТаблицаВозвратыОплаты.НомерСтроки) КАК НомерСтроки,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеРасчетов,
		|	ТаблицаВозвратыОплаты.Контрагент КАК Контрагент,
		|	ТаблицаВозвратыОплаты.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВЫРАЗИТЬ(ТаблицаВозвратыОплаты.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).ВидДоговора КАК ВидДоговора,
		|	ТаблицаВозвратыОплаты.ТипОплаты КАК ТипОплаты,
		|	&ВалютаРеглУчета КАК ВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
		|	ЛОЖЬ КАК РасчетыВВалюте,
		|	ЛОЖЬ КАК УчетАгентскогоНДС,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
		|	ТаблицаВозвратыОплаты.Ссылка КАК ДокументРасчетов,
		|	ТаблицаВозвратыОплаты.Ссылка.Дата КАК ДатаДокументаРасчетов,
		|	ТаблицаВозвратыОплаты.СчетУчетаРасчетов КАК СчетРасчетов,
		|	ТаблицаВозвратыОплаты.СчетУчетаРасчетов КАК СчетАвансов,
		|	ТаблицаВозвратыОплаты.СчетУчетаРасчетов КАК СчетАвансов_ОтгрузкаВУЕ,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
		|	СУММА(ТаблицаВозвратыОплаты.СуммаОплатыРуб) КАК СуммаВзаиморасчетов,
		|	СУММА(ТаблицаВозвратыОплаты.СуммаОплатыРуб) КАК СуммаРуб,
		|	0 КАК СуммаВзаиморасчетовКомитента,
		|	0 КАК СуммаРуб_Комитента,
		|	0 КАК СуммаВзаиморасчетовПатент,
		|	0 КАК СуммаРуб_Патент,
		|	0 КАК СуммаВзаиморасчетовТорговыйСбор,
		|	0 КАК СуммаРуб_ТорговыйСбор,
		|	0 КАК СуммаВзаиморасчетовЕНВД,
		|	0 КАК СуммаРуб_ЕНВД,
		|	0 КАК СуммаБУ_ОтгрузкаВУЕ,
		|	ВЫРАЗИТЬ(""Возврат безналичной оплаты"" КАК СТРОКА(150)) КАК Содержание,
		|	0 КАК ОстатокВзаиморасчетов,
		|	ТаблицаВозвратыОплаты.СуммаОплатыРуб КАК СуммаРубПоКурсуАванса
		|ИЗ
		|	ТаблицаВозвратыОплаты КАК ТаблицаВозвратыОплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	Реквизиты.ПодразделениеОрганизации,
		|	ТаблицаВозвратыОплаты.Контрагент,
		|	ТаблицаВозвратыОплаты.ДоговорКонтрагента,
		|	ВЫРАЗИТЬ(ТаблицаВозвратыОплаты.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).ВидДоговора,
		|	ТаблицаВозвратыОплаты.ТипОплаты,
		|	ТаблицаВозвратыОплаты.Ссылка,
		|	ТаблицаВозвратыОплаты.Ссылка.Дата,
		|	ТаблицаВозвратыОплаты.СчетУчетаРасчетов,
		|	ТаблицаВозвратыОплаты.СуммаОплатыРуб,
		|	Реквизиты.ПодразделениеОрганизации,
		|	ТаблицаВозвратыОплаты.СчетУчетаРасчетов,
		|	ТаблицаВозвратыОплаты.СчетУчетаРасчетов
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаНДСВозвраты(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьВозвраты Тогда
		ПараметрыПроведения.Вставить("ВозвратыСГТД",                      Неопределено);
		ПараметрыПроведения.Вставить("ВозвратыНДС",                       Неопределено);
		ПараметрыПроведения.Вставить("ВозвратыТоваровТаблицаДвиженийНДС", Неопределено);
		ПараметрыПроведения.Вставить("ВозвратТоваровРаздельныйУчетНДС",   Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВозвратыСГТД", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ТоварыВозврат"" КАК ИмяСписка,
	|	""Товары"" КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	&СодержаниеВозврат КАК Содержание
	|ИЗ
	|	ТаблицаВозвраты КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ТаблицаТовары.СчетУчета В (&МассивСчетовДляГТД)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если НЕ Реквизиты.ПлательщикНДС Тогда
		ПараметрыПроведения.Вставить("ВозвратыНДС",                       Неопределено);
		ПараметрыПроведения.Вставить("ВозвратыТоваровТаблицаДвиженийНДС", Неопределено);
		ПараметрыПроведения.Вставить("ВозвратТоваровРаздельныйУчетНДС",   Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	
	НомераТаблиц.Вставить("ВозвратыНДС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВозвратыТоваровТаблицаДвиженийНДС",	НомераТаблиц.Количество());
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	""ТоварыВозвращенные"" КАК ИмяСписка,
	|	ТаблицаВозвраты.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.Распределен) КАК СпособУчетаНДС,
	|	ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка) КАК СчетФактура
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Возвраты КАК ТаблицаВозвраты
	|ГДЕ
	|	ТаблицаВозвраты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаВозвраты.Сделка, Реквизиты.Ссылка) КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Поставщик,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
	|	СУММА(ТаблицаВозвраты.СуммаНДСРуб) КАК НДС,
	|	СУММА(ТаблицаВозвраты.СуммаРуб - ТаблицаВозвраты.СуммаНДСРуб) КАК СуммаБезНДС,
	|	ТаблицаВозвраты.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаВозвраты.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОтгрузки,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОплаты,
	|	НЕОПРЕДЕЛЕНО КАК Состояние,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	Реквизиты.Дата КАК ДатаСобытия,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОплаты,
	|	ТаблицаВозвраты.НомерФискальногоЧека КАК НомерДокументаОплаты,
	|	Реквизиты.Дата КАК ДатаДокументаОплаты,
	|	""17"" КАК КодВидаОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат) КАК ВидЦенности,
	|	НЕОПРЕДЕЛЕНО КАК ЗаписьДополнительногоЛиста,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК КорректируемыйПериод,
	|	ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка) КАК ИсправленныйСчетФактура,
	|	""Возврат от покупателя"" КАК Содержание,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Организация КАК Организация
	|ИЗ
	|	ТаблицаВозвраты КАК ТаблицаВозвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(ТаблицаВозвраты.НомерФискальногоЧека <> """"
	|			ИЛИ Реквизиты.Дата >= ДАТАВРЕМЯ(2019, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВозвраты.НомерФискальногоЧека,
	|	Реквизиты.Организация,
	|	Реквизиты.Ссылка,
	|	ЕСТЬNULL(ТаблицаВозвраты.Сделка, Реквизиты.Ссылка),
	|	ТаблицаВозвраты.СтавкаНДС,
	|	ТаблицаВозвраты.СчетУчетаНДСПоРеализации,
	|	Реквизиты.Дата,
	|	Реквизиты.Дата,
	|	Реквизиты.Дата" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если НЕ Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		ПараметрыПроведения.Вставить("ВозвратТоваровРаздельныйУчетНДС",   Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВТ_ТаблицаДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_Сделки", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ДвиженияПоНДСРаздельныйУчет", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_НДСПоПриобретеннымЦенностям", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВозвратТоваровРаздельныйУчетНДС", НомераТаблиц.Количество());
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ТаблицаВозвраты.Сделка КАК Сделка,
	|	ТаблицаВозвраты.Номенклатура КАК Номенклатура,
	|	ТаблицаВозвраты.СчетУчета КАК СчетУчета,
	|	СУММА(ТаблицаВозвраты.Количество) КАК Количество,
	|	ТаблицаВозвраты.Ссылка.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	ТаблицаВозвраты КАК ТаблицаВозвраты
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВозвраты.Сделка,
	|	ТаблицаВозвраты.Номенклатура,
	|	ТаблицаВозвраты.СчетУчета,
	|	ТаблицаВозвраты.Ссылка.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СчетУчета,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВозвраты.Сделка КАК Сделка,
	|	Реквизиты.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаСделки
	|ИЗ
	|	ТаблицаВозвраты КАК ТаблицаВозвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСделки.Сделка КАК Сделка,
	|	НДСРаздельныйУчет.Организация КАК Организация,
	|	НДСРаздельныйУчет.Партия КАК Партия,
	|	СУММА(НДСРаздельныйУчет.Количество) КАК Количество,
	|	СУММА(НДСРаздельныйУчет.НДС) КАК НДС,
	|	СУММА(НДСРаздельныйУчет.СуммаБезНДС) КАК СуммаБезНДС,
	|	НДСРаздельныйУчет.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|	НДСРаздельныйУчет.АналитикаУчетаНДС КАК АналитикаУчетаНДС,
	|	НДСРаздельныйУчет.СпособУчетаНДС КАК СпособУчетаНДС,
	|	Аналитика.СчетЗатрат КАК СчетУчета,
	|	Аналитика.Субконто1 КАК Номенклатура,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартии,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовСчФ.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСчетаФактуры
	|ПОМЕСТИТЬ ДвиженияПоНДСРаздельныйУчет
	|ИЗ
	|	РегистрНакопления.НДСРаздельныйУчет КАК НДСРаздельныйУчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК Аналитика
	|		ПО НДСРаздельныйУчет.АналитикаУчетаЗатрат = Аналитика.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Документ = НДСРаздельныйУчет.Партия)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНДС КАК АналитикаНДС
	|		ПО НДСРаздельныйУчет.АналитикаУчетаНДС = АналитикаНДС.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчФ
	|		ПО (АналитикаНДС.СчетФактура = ДанныеПервичныхДокументовСчФ.Документ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСделки КАК ТаблицаСделки
	|		ПО НДСРаздельныйУчет.Регистратор = ТаблицаСделки.Сделка
	|			И НДСРаздельныйУчет.Организация = ТаблицаСделки.Организация
	|ГДЕ
	|	НДСРаздельныйУчет.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСРаздельныйУчет.Организация,
	|	НДСРаздельныйУчет.Партия,
	|	НДСРаздельныйУчет.АналитикаУчетаЗатрат,
	|	НДСРаздельныйУчет.АналитикаУчетаНДС,
	|	НДСРаздельныйУчет.СпособУчетаНДС,
	|	Аналитика.СчетЗатрат,
	|	Аналитика.Субконто1,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ДанныеПервичныхДокументовСчФ.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ТаблицаСделки.Сделка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СчетУчета,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСделки.Сделка КАК Сделка,
	|	НДСПоПриобретеннымЦенностям.Организация КАК Организация,
	|	НДСПоПриобретеннымЦенностям.СчетУчета КАК СчетУчета,
	|	НДСПоПриобретеннымЦенностям.Номенклатура КАК Номенклатура,
	|	НДСПоПриобретеннымЦенностям.Склад КАК Склад,
	|	НДСПоПриобретеннымЦенностям.Партия КАК Партия,
	|	НДСПоПриобретеннымЦенностям.СчетФактура КАК СчетФактура,
	|	НДСПоПриобретеннымЦенностям.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	НДСПоПриобретеннымЦенностям.ВидЦенности КАК ВидЦенности,
	|	НДСПоПриобретеннымЦенностям.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСПоПриобретеннымЦенностям.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(НДСПоПриобретеннымЦенностям.Количество) КАК Количество,
	|	СУММА(НДСПоПриобретеннымЦенностям.Стоимость) КАК Стоимость,
	|	СУММА(НДСПоПриобретеннымЦенностям.НДС) КАК НДС
	|ПОМЕСТИТЬ НДСПоПриобретеннымЦенностям
	|ИЗ
	|	РегистрНакопления.НДСПоПриобретеннымЦенностям КАК НДСПоПриобретеннымЦенностям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСделки КАК ТаблицаСделки
	|		ПО НДСПоПриобретеннымЦенностям.Регистратор = ТаблицаСделки.Сделка
	|			И НДСПоПриобретеннымЦенностям.Организация = ТаблицаСделки.Организация
	|ГДЕ
	|	НДСПоПриобретеннымЦенностям.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПоПриобретеннымЦенностям.СчетУчета,
	|	НДСПоПриобретеннымЦенностям.Организация,
	|	НДСПоПриобретеннымЦенностям.Номенклатура,
	|	НДСПоПриобретеннымЦенностям.Склад,
	|	НДСПоПриобретеннымЦенностям.ВидЦенности,
	|	НДСПоПриобретеннымЦенностям.НДСВключенВСтоимость,
	|	НДСПоПриобретеннымЦенностям.СчетФактура,
	|	НДСПоПриобретеннымЦенностям.Партия,
	|	НДСПоПриобретеннымЦенностям.СчетУчетаНДС,
	|	НДСПоПриобретеннымЦенностям.СтавкаНДС,
	|	ТаблицаСделки.Сделка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСПоПриобретеннымЦенностям.Номенклатура,
	|	НДСПоПриобретеннымЦенностям.СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	NULL КАК Сделка,
	|	""НДСРаздельныйУчет"" КАК Регистр,
	|	НДСРаздельныйУчет.Организация КАК Организация,
	|	НДСРаздельныйУчет.Партия КАК Партия,
	|	НДСРаздельныйУчет.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|	НДСРаздельныйУчет.АналитикаУчетаНДС КАК АналитикаУчетаНДС,
	|	НДСРаздельныйУчет.СпособУчетаНДС КАК СпособУчетаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСРаздельныйУчет.Количество, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьКоличество,
	|	ЕСТЬNULL(НДСРаздельныйУчет.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(НДСРаздельныйУчет.НДС, 0) КАК НДС,
	|	ЕСТЬNULL(НДСРаздельныйУчет.СуммаБезНДС, 0) КАК СуммаБезНДС,
	|	ТаблицаДокумента.Количество КАК КоличествоСписать,
	|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	НДСРаздельныйУчет.ДатаПартии КАК ДатаПартии,
	|	НДСРаздельныйУчет.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК СчетФактура,
	|	НЕОПРЕДЕЛЕНО КАК ВидЦенности,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчетаНДС,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияПоНДСРаздельныйУчет КАК НДСРаздельныйУчет
	|		ПО ТаблицаДокумента.Номенклатура = НДСРаздельныйУчет.Номенклатура
	|			И ТаблицаДокумента.СчетУчета = НДСРаздельныйУчет.СчетУчета
	|			И ТаблицаДокумента.Организация = НДСРаздельныйУчет.Организация
	|			И ТаблицаДокумента.Сделка = НДСРаздельныйУчет.Сделка
	|ГДЕ
	|	НЕ НДСРаздельныйУчет.Организация ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Сделка,
	|	""НДСПоПриобретеннымЦенностям"",
	|	НДСПоПриобретеннымЦенностям.Организация,
	|	НДСПоПриобретеннымЦенностям.Партия,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаЗатрат.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНДС.ПустаяСсылка),
	|	ВЫБОР
	|		КОГДА НДСПоПриобретеннымЦенностям.НДСВключенВСтоимость
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.УчитываетсяВCтоимости)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПринимаетсяКВычету)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСПоПриобретеннымЦенностям.Количество, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЕСТЬNULL(НДСПоПриобретеннымЦенностям.Количество, 0),
	|	ЕСТЬNULL(НДСПоПриобретеннымЦенностям.НДС, 0),
	|	ЕСТЬNULL(НДСПоПриобретеннымЦенностям.Стоимость, 0) - ЕСТЬNULL(НДСПоПриобретеннымЦенностям.НДС, 0),
	|	ТаблицаДокумента.Количество,
	|	НДСПоПриобретеннымЦенностям.СчетУчета,
	|	НДСПоПриобретеннымЦенностям.Номенклатура,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовПартия.Дата, НДСПоПриобретеннымЦенностям.Партия.Дата),
	|	ЕСТЬNULL(ДанныеПервичныхДокументовСчетФактура.Дата, НДСПоПриобретеннымЦенностям.СчетФактура.Дата),
	|	НДСПоПриобретеннымЦенностям.Склад,
	|	НДСПоПриобретеннымЦенностям.СчетФактура,
	|	НДСПоПриобретеннымЦенностям.ВидЦенности,
	|	НДСПоПриобретеннымЦенностям.СчетУчетаНДС,
	|	НДСПоПриобретеннымЦенностям.СтавкаНДС
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ НДСПоПриобретеннымЦенностям КАК НДСПоПриобретеннымЦенностям
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовПартия
	|			ПО НДСПоПриобретеннымЦенностям.Партия = ДанныеПервичныхДокументовПартия.Документ
	|				И НДСПоПриобретеннымЦенностям.Организация = ДанныеПервичныхДокументовПартия.Организация
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактура
	|			ПО НДСПоПриобретеннымЦенностям.СчетФактура = ДанныеПервичныхДокументовСчетФактура.Документ
	|				И НДСПоПриобретеннымЦенностям.Организация = ДанныеПервичныхДокументовСчетФактура.Организация
	|		ПО ТаблицаДокумента.Номенклатура = НДСПоПриобретеннымЦенностям.Номенклатура
	|			И ТаблицаДокумента.СчетУчета = НДСПоПриобретеннымЦенностям.СчетУчета
	|			И ТаблицаДокумента.Сделка = НДСПоПриобретеннымЦенностям.Сделка
	|ГДЕ
	|	НЕ НДСПоПриобретеннымЦенностям.Организация ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДСРаздельныйУчет.ДатаПартии УБЫВ,
	|	ДатаСчетаФактуры УБЫВ";
	
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРасходыУСНВозвраты(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ПрименяетсяУСНДоходыМинусРасходы
		ИЛИ НЕ Реквизиты.ЕстьВозвраты Тогда
		ПараметрыПроведения.Вставить("УСНТаблицаРасходов", Неопределено);
		ПараметрыПроведения.Вставить("УСНТаблицаСделки", Неопределено);
		Возврат "";
	КонецЕсли;
	
		// таблицы, когда партия не указана
		НомераТаблиц.Вставить("УСНТаблицаРасходов", НомераТаблиц.Количество());
		// таблица с указанными партиями возврата
		НомераТаблиц.Вставить("УСНТаблицаСделки", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура) КАК ВидРасхода,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.НаРеализации) КАК СтатусыПартийУСН,
		|	ТаблицаВозвраты.Номенклатура КАК ЭлементРасхода,
		|	ВЫБОР
		|		КОГДА ТаблицаВозвраты.СчетУчета В (&Субсчета10)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоТовар,
		|	ВЫБОР
		|		КОГДА ТаблицаВозвраты.СчетУчета В (&Субсчета10)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоМатериал,
		|	ТаблицаВозвраты.СчетУчета КАК СчетУчета,
		|	ТаблицаВозвраты.Ссылка КАК Партия,
		|	ТаблицаВозвраты.Количество КАК Количество,
		|	0 КАК Себестоимость,
		|	0 КАК Сумма,
		|	0 КАК НДС
		|ИЗ
		|	ТаблицаВозвраты КАК ТаблицаВозвраты
		|ГДЕ
		|	НЕ ТаблицаВозвраты.УказанДокументОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаВозвратыСделки.ДатаРеализации КАК ДатаДокументаОтгрузки,
		|	ТаблицаВозвратыСделки.СделкаСсылка КАК Ссылка,
		|	Реквизиты.Организация КАК Организация
		|ИЗ
		|	ВТ_ТаблицаВозвратыСделки КАК ТаблицаВозвратыСделки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)";
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

#КонецОбласти

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Результат    = Запрос.ВыполнитьПакет();
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары();
	КонецЕсли;
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		СуммыТаблицыАгентскиеУслуги = Результат[НомераТаблиц["СуммыТаблицыАгентскиеУслуги"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыАгентскиеУслуги, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыАгентскиеУслуги", СуммыТаблицыАгентскиеУслуги);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеАгентскиеУслуги();
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
		Запрос.Текст = ТекстЗапроса;
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты));
	
	Для каждого ПакетЗапросов Из СхемаЗапроса.ПакетЗапросов Цикл
		Если Реквизиты.ЕстьТовары 
			И ПакетЗапросов.ТаблицаДляПомещения = "ТаблицаТовары"  Тогда
			
			ПакетЗапросов.ТаблицаДляПомещения = "ВременнаяТаблицаТовары";
			ПакетЗапросов.Индекс.Добавить("НомерСтроки");
			
		ИначеЕсли Реквизиты.ЕстьАгентскиеУслуги 
			И ПакетЗапросов.ТаблицаДляПомещения = "ТаблицаАгентскиеУслуги" Тогда
			
			ПакетЗапросов.ТаблицаДляПомещения = "ВременнаяТаблицаАгентскиеУслуги";
			ПакетЗапросов.Индекс.Добавить("НомерСтроки");
			
		КонецЕсли;
	КонецЦикла;
	
	Если Реквизиты.ЕстьТовары Тогда
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		
		ЗапросВыбора = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		ЗапросВыбора.УстановитьТекстЗапроса(
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаРуб,
		|	ВременнаяТаблицаТовары.СуммаНДСРуб,
		|	ВременнаяТаблицаТовары.КодРаздел7ДекларацииНДС,
		|	ВременнаяТаблицаТовары.КодСоответствуетСт149НКРФ,
		|	ВременнаяТаблицаТовары.КодВключаетсяВРеестр
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары");
	КонецЕсли;
	
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		НомераТаблиц.Вставить("СуммыТаблицыАгентскиеУслуги", НомераТаблиц.Количество());
		
		ЗапросВыбора = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		ЗапросВыбора.УстановитьТекстЗапроса(
		"ВЫБРАТЬ
		|	ВременнаяТаблицаАгентскиеУслуги.НомерСтроки,
		|	ВременнаяТаблицаАгентскиеУслуги.СтавкаНДС,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаРуб,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаНДСРуб,
		|	ВременнаяТаблицаАгентскиеУслуги.КодРаздел7ДекларацииНДС,
		|	ВременнаяТаблицаАгентскиеУслуги.КодСоответствуетСт149НКРФ,
		|	ВременнаяТаблицаАгентскиеУслуги.КодВключаетсяВРеестр
		|ИЗ
		|	ВременнаяТаблицаАгентскиеУслуги КАК ВременнаяТаблицаАгентскиеУслуги");
	КонецЕсли; 
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеТовары()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.ЭтоУслуга,
	|	ВременнаяТаблицаТовары.Количество,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб,
	|	ВременнаяТаблицаТовары.СтавкаНДС,
	|	ВременнаяТаблицаТовары.НомерГТД,
	|	ВременнаяТаблицаТовары.СтранаПроисхождения,
	|	ВременнаяТаблицаТовары.СчетУчета,
	|	ВременнаяТаблицаТовары.ЭтоКомиссия,
	|	ВременнаяТаблицаТовары.СчетУчетаНДСПоРеализации,
	|	ВременнаяТаблицаТовары.СчетДоходов,
	|	ВременнаяТаблицаТовары.ЭтоЕНВД,
	|	ВременнаяТаблицаТовары.СчетРасходов,
	|	ВременнаяТаблицаТовары.Субконто,
	|	ВременнаяТаблицаТовары.ДокументОприходования,
	|	ВременнаяТаблицаТовары.Себестоимость,
	|	ВременнаяТаблицаТовары.КодРаздел7ДекларацииНДС,
	|	ВременнаяТаблицаТовары.КодСоответствуетСт149НКРФ,
	|	ВременнаяТаблицаТовары.КодВключаетсяВРеестр
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеАгентскиеУслуги()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыАгентскиеУслуги.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыАгентскиеУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаРуб,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыАгентскиеУслуги
	|ИЗ
	|	&СуммыТаблицыАгентскиеУслуги КАК СуммыТаблицыАгентскиеУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаАгентскиеУслуги.Ссылка,
	|	ВременнаяТаблицаАгентскиеУслуги.НомерСтроки,
	|	ВременнаяТаблицаАгентскиеУслуги.Номенклатура,
	|	ВременнаяТаблицаАгентскиеУслуги.Количество,
	|	СуммыТаблицыАгентскиеУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаРуб,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСРуб,
	|	ВременнаяТаблицаАгентскиеУслуги.СтавкаНДС,
	|	ВременнаяТаблицаАгентскиеУслуги.Контрагент,
	|	ВременнаяТаблицаАгентскиеУслуги.ДоговорКонтрагента,
	|	ВременнаяТаблицаАгентскиеУслуги.ВалютаВзаиморасчетов,
	|	ВременнаяТаблицаАгентскиеУслуги.СчетРасчетов,
	|	ВременнаяТаблицаАгентскиеУслуги.КодРаздел7ДекларацииНДС,
	|	ВременнаяТаблицаАгентскиеУслуги.КодСоответствуетСт149НКРФ,
	|	ВременнаяТаблицаАгентскиеУслуги.КодВключаетсяВРеестр
	|ПОМЕСТИТЬ ТаблицаАгентскиеУслуги
	|ИЗ
	|	ВременнаяТаблицаАгентскиеУслуги КАК ВременнаяТаблицаАгентскиеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыАгентскиеУслуги КАК СуммыТаблицыАгентскиеУслуги
	|		ПО ВременнаяТаблицаАгентскиеУслуги.НомерСтроки = СуммыТаблицыАгентскиеУслуги.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("Товары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	// Товары для списания партий
	НомераТаблиц.Вставить("Товары", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|	ТаблицаТовары.ДокументОприходования КАК ДокументОприходования,
	|	ТаблицаТовары.Себестоимость,
	|	ТаблицаТовары.Количество,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	ТаблицаТовары.СчетРасходов КАК КорСчетСписания,
	|	ТаблицаТовары.Субконто КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	1 КАК ВидКорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ТаблицаТовары.ЭтоУслуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции
 
Функция ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары И НЕ Реквизиты.ЕстьАгентскиеУслуги Тогда
		ПараметрыПроведения.Вставить("Реализация", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("Реализация", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	ТаблицаТовары.СуммаРуб КАК СуммаРуб,
	|	ТаблицаТовары.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ТаблицаТовары.СуммаРуб КАК СуммаБУ,
	|	ТаблицаТовары.СуммаРуб КАК СуммаНУ,
	|	ТаблицаТовары.СчетДоходов КАК СчетДоходов,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ЭтоУслуга
	|			ТОГДА ТаблицаТовары.СчетРасходов
	|		ИНАЧЕ ТаблицаТовары.СчетУчета
	|	КОНЕЦ КАК СчетУчета,
	|	ТаблицаТовары.Субконто КАК Субконто,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Покупатель,
	|	ВЫБОР
	|		КОГДА &ЕстьБезналичнаяОплатаАТТ ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)
	|		ИНАЧЕ Реквизиты.СчетКасса
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА &ЕстьБезналичнаяОплатаАТТ ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
	|			ТОГДА Реквизиты.Склад
	|		ИНАЧЕ Реквизиты.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ТаблицаТовары.ЭтоКомиссия КАК ЭтоКомиссия,
	|	ТаблицаТовары.ЭтоУслуга КАК ЭтоУслуга,
	|	ИСТИНА КАК ЭтоНесырьевойТовар,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	Реквизиты.Ссылка КАК ДокументРасчетовСКомитентом,
	|	Реквизиты.Дата КАК ДатаРеализации,
	|	НЕОПРЕДЕЛЕНО КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК СчетАвансовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	0 КАК СуммаПоступленияОтКомитента,
	|	ВЫБОР КОГДА ТаблицаТовары.ЭтоЕНВД ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийРаздела7ДекларацииПоНДС.ПустаяСсылка) ИНАЧЕ ТаблицаТовары.КодРаздел7ДекларацииНДС КОНЕЦ КАК КодРаздел7ДекларацииНДС,
	|	ВЫБОР КОГДА ТаблицаТовары.ЭтоЕНВД ТОГДА ЛОЖЬ ИНАЧЕ ТаблицаТовары.КодСоответствуетСт149НКРФ КОНЕЦ КАК КодСоответствуетСт149НКРФ,
	|	ВЫБОР КОГДА ТаблицаТовары.ЭтоЕНВД ТОГДА ЛОЖЬ ИНАЧЕ ТаблицаТовары.КодВключаетсяВРеестр КОНЕЦ КАК КодВключаетсяВРеестр,
	|	ЛОЖЬ КАК УслугиЗаРубежом
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""АгентскиеУслуги"",
	|	ТаблицаАгентскиеУслуги.НомерСтроки,
	|	ТаблицаАгентскиеУслуги.Номенклатура,
	|	ТаблицаАгентскиеУслуги.Количество,
	|	ТаблицаАгентскиеУслуги.СуммаВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	ТаблицаАгентскиеУслуги.СуммаРуб,
	|	ТаблицаАгентскиеУслуги.СуммаНДСРуб,
	|	ТаблицаАгентскиеУслуги.СуммаРуб,
	|	ТаблицаАгентскиеУслуги.СуммаРуб,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаАгентскиеУслуги.СтавкаНДС,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	Реквизиты.ПодразделениеОрганизации,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	ВЫБОР
	|		КОГДА &ЕстьБезналичнаяОплатаАТТ ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)
	|		ИНАЧЕ Реквизиты.СчетКасса
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ЕстьБезналичнаяОплатаАТТ ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
	|			ТОГДА Реквизиты.Склад
	|		ИНАЧЕ Реквизиты.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ИСТИНА,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ТаблицаАгентскиеУслуги.Контрагент,
	|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента,
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	ТаблицаАгентскиеУслуги.СчетРасчетов,
	|	ТаблицаАгентскиеУслуги.СчетРасчетов,
	|	ТаблицаАгентскиеУслуги.ВалютаВзаиморасчетов,
	|	0,
	|	0,
	|	ТаблицаАгентскиеУслуги.КодРаздел7ДекларацииНДС КАК КодРаздел7ДекларацииНДС,
	|	ТаблицаАгентскиеУслуги.КодСоответствуетСт149НКРФ КАК КодСоответствуетСт149НКРФ,
	|	ТаблицаАгентскиеУслуги.КодВключаетсяВРеестр КАК КодВключаетсяВРеестр,
	|	ЛОЖЬ КАК УслугиЗаРубежом
	|ИЗ
	|	ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРеализацияУслуг(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("ТаблицаРеализацияУслуг", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаРеализацияУслуг", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаУслуги.СчетРасходов КАК СчетРасходов,
	|	ТаблицаУслуги.Субконто КАК НоменклатурнаяГруппа,
	|	СУММА(ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаНДСРуб) КАК Сумма
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаУслуги
	|ГДЕ
	|	ТаблицаУслуги.ЭтоУслуга
	|	И НЕ ТаблицаУслуги.СчетРасходов В (&Счета9102)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУслуги.СчетРасходов,
	|	ТаблицаУслуги.Субконто";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПереоценкаТоваровВРознице(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары
		ИЛИ НЕ Реквизиты.УчетПоПродажнойСтоимости Тогда
		ПараметрыПроведения.Вставить("Переоценка", Неопределено);
		Возврат "";
	КонецЕсли;
	
	// Товары для переоценки при учете по продажным ценам
	НомераТаблиц.Вставить("Переоценка", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад,
	|	Реквизиты.ТипСклада,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СчетРасходов КАК КорСчетСписания,
	|	ТаблицаТовары.Субконто КАК КорСубконтоСписания1,
	|	ТаблицаТовары.СуммаРуб КАК Сумма
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ТаблицаТовары.ЭтоУслуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТоварыНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьТовары
	 ИЛИ (НЕ Реквизиты.ПлательщикНДС
	 И НЕ Реквизиты.ВедетсяУчетНДСПоФЗ134) Тогда
		ПараметрыПроведения.Вставить("ТоварыНДС", Неопределено);
	Иначе
		НомераТаблиц.Вставить("ТоварыНДС", НомераТаблиц.Количество());
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.СтранаПроисхождения,
		|	ТаблицаТовары.Количество
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	НЕ ТаблицаТовары.ЭтоКомиссия
		|	И НЕ ТаблицаТовары.ЭтоУслуга
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиДокумента"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если НЕ Реквизиты.ЕстьТоварыКомитентов Тогда
		ПараметрыПроведения.Вставить("НДСТоварыНаКомиссииРеализация", Неопределено);
	Иначе
		НомераТаблиц.Вставить("НДСТоварыНаКомиссииРеализация", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.СтранаПроисхождения,
		|	ТаблицаТовары.Количество
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.ЭтоКомиссия
		|	И НЕ ТаблицаТовары.ЭтоУслуга
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиДокумента"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРаспределениеВыручки(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если (Реквизиты.ВидОперации <> Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах
		Или (Не Реквизиты.ЕстьТовары И Не Реквизиты.ЕстьАгентскиеУслуги И Не Реквизиты.ЕстьПодарочныеСертификаты))
			И Не Реквизиты.ЕстьБезналичнаяОплатаАТТ Тогда
		ПараметрыПроведения.Вставить("РеквизитыВыручки", Неопределено);
		ПараметрыПроведения.Вставить("Выручка",          Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаВыручки", 			НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаСчетаУчетаВНТТ", 	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаОплатаНаличными", 	НомераТаблиц.Количество());

	НомераТаблиц.Вставить("РеквизитыВыручки", 	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Выручка", 			НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицыДокумента.Ссылка,
	|	ТаблицыДокумента.СтавкаНДС,
	|	СУММА(ТаблицыДокумента.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ТаблицыДокумента.СуммаНДСРуб) КАК СуммаНДСРуб
	|ПОМЕСТИТЬ ТаблицаВыручки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Реквизиты.Ссылка КАК Ссылка,
	|		ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|		ТаблицаТовары.СуммаРуб КАК СуммаРуб,
	|		ТаблицаТовары.СуммаНДСРуб КАК СуммаНДСРуб
	|	ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Реквизиты.Ссылка,
	|		ТаблицаАгентскиеУслуги.СтавкаНДС,
	|		ТаблицаАгентскиеУслуги.СуммаРуб,
	|		ТаблицаАгентскиеУслуги.СуммаНДСРуб
	|	ИЗ
	|		ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги
	|			ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах)) КАК ТаблицыДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицыДокумента.Ссылка,
	|	ТаблицыДокумента.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокНалогообложенияТорговыхТочек.Склад КАК ТорговаяТочка,
	|	ВЫБОР
	|		КОГДА ПорядокНалогообложенияТорговыхТочек.ОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаЕНВД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД)
	|	КОНЕЦ КАК СчетДоходовОтРеализации,
	|	ВЫБОР
	|		КОГДА ПорядокНалогообложенияТорговыхТочек.ОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
	|	КОНЕЦ КАК СчетРасходовОтРеализации
	|ПОМЕСТИТЬ ТаблицаСчетаУчетаВНТТ
	|ИЗ
	|	РегистрСведений.ПорядокНалогообложенияТорговыхТочек.СрезПоследних(&Период, Склад = &Склад) КАК ПорядокНалогообложенияТорговыхТочек
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПорядокНалогообложенияТорговыхТочек.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплатаНаличными.Ссылка,
	|	СУММА(ТаблицаОплатаНаличными.СуммаРуб) КАК СуммаРуб
	|ПОМЕСТИТЬ ТаблицаОплатаНаличными
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаВыручки.Ссылка КАК Ссылка,
	|		ТаблицаВыручки.СуммаРуб КАК СуммаРуб
	|	ИЗ
	|		ТаблицаВыручки КАК ТаблицаВыручки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаОплата.Ссылка,
	|		-1 * ТаблицаОплата.СуммаОплатыРуб
	|	ИЗ
	|		ТаблицаОплата КАК ТаблицаОплата) КАК ТаблицаОплатаНаличными
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплатаНаличными.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаОплатаНаличными.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &ЕстьОплатаПлатежнойКартойНТТ
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)
	|		ИНАЧЕ Реквизиты.СчетКасса
	|	КОНЕЦ КАК СчетУчетаДенежныхСредств,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.НоменклатурнаяГруппаВыручки,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаУчетаВНТТ.СчетДоходовОтРеализации ЕСТЬ НЕ NULL 
	|				И ТаблицаСчетаУчетаВНТТ.СчетДоходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ТаблицаСчетаУчетаВНТТ.СчетДоходовОтРеализации
	|		КОГДА &РозничнаяТорговляОблагаетсяЕНВД
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаЕНВД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД)
	|	КОНЕЦ КАК СчетДоходов,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаУчетаВНТТ.СчетРасходовОтРеализации ЕСТЬ НЕ NULL 
	|				И ТаблицаСчетаУчетаВНТТ.СчетРасходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ТаблицаСчетаУчетаВНТТ.СчетРасходовОтРеализации
	|		КОГДА &РозничнаяТорговляОблагаетсяЕНВД
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
	|	КОНЕЦ КАК СчетРасходов,
	|	ТаблицаОплатаНаличными.СуммаРуб КАК СуммаОплатыНаличными,
	|	&ПрименяетсяУСН,
	|	&ПрименяетсяУСНПатент
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаВНТТ КАК ТаблицаСчетаУчетаВНТТ
	|		ПО Реквизиты.Склад = ТаблицаСчетаУчетаВНТТ.ТорговаяТочка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОплатаНаличными КАК ТаблицаОплатаНаличными
	|		ПО Реквизиты.Ссылка = ТаблицаОплатаНаличными.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВыручки.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаВыручки.СуммаРуб КАК СуммаРуб,
	|	ТаблицаВыручки.СуммаНДСРуб КАК СуммаНДСРуб
	|ИЗ
	|	ТаблицаВыручки КАК ТаблицаВыручки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаБезналичнаяОплата(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если Не Реквизиты.ЕстьТовары И Не Реквизиты.ЕстьАгентскиеУслуги И Не Реквизиты.ЕстьПодарочныеСертификаты Тогда
		ПараметрыПроведения.Вставить("ВыручкаДляРаспределенияОплаты", 		Неопределено);
		ПараметрыПроведения.Вставить("ВыручкаДляРаспределенияОплатыУСН", 	Неопределено);
		ПараметрыПроведения.Вставить("ВыручкаДляРаспределенияОплатыИП", 	Неопределено);
	Иначе
		НомераТаблиц.Вставить("ВТ_ВыручкаДляРаспределенияОплаты", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВыручкаДляРаспределенияОплатыУСН", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВыручкаДляРаспределенияОплатыИП", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицыДокумента.Контрагент КАК Контрагент,
		|	ТаблицыДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицыДокумента.ТипОплаты КАК ТипОплаты,
		|	СУММА(ТаблицыДокумента.СуммаРуб) КАК СуммаРуб,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТаблицыДокумента.ЭтоКомиссия
		|					И НЕ &ДеятельностьНаПатенте
		|					И (НЕ ТаблицыДокумента.ЭтоТовар
		|						ИЛИ НЕ &ДеятельностьНаТорговомСборе)
		|					И ТаблицыДокумента.ЭтоЕНВД
		|				ТОГДА ТаблицыДокумента.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаРубЕНВД,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТаблицыДокумента.ЭтоСертификат
		|					И НЕ ТаблицыДокумента.ЭтоКомиссия
		|					И &ДеятельностьНаПатенте
		|					И НЕ &ДеятельностьНаТорговомСборе
		|				ТОГДА ТаблицыДокумента.СуммаРуб
		|			КОГДА ТаблицыДокумента.ЭтоСертификат
		|					И НЕ ТаблицыДокумента.ЭтоКомиссия
		|					И &ПрименяетсяУСНПатент
		|					И НЕ &ПрименяетсяУСН
		|					И &ДеятельностьНаПатенте
		|				ТОГДА ТаблицыДокумента.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаРубПатент,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицыДокумента.ЭтоКомиссия
		|				ТОГДА ТаблицыДокумента.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаРубКомитента,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТаблицыДокумента.ЭтоКомиссия
		|					И (ТаблицыДокумента.ЭтоТовар
		|						ИЛИ ТаблицыДокумента.ЭтоСертификат)
		|					И НЕ &ДеятельностьНаПатенте
		|					И &ДеятельностьНаТорговомСборе
		|				ТОГДА ТаблицыДокумента.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаРубТорговыйСбор
		|ПОМЕСТИТЬ ВТ_ВыручкаДляРаспределенияОплаты
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		|		ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПустаяСсылка) КАК ТипОплаты,
		|		ТаблицаТовары.ЭтоЕНВД КАК ЭтоЕНВД,
		|		ТаблицаТовары.ЭтоКомиссия КАК ЭтоКомиссия,
		|		НЕ ТаблицаТовары.ЭтоУслуга КАК ЭтоТовар,
		|		ЛОЖЬ КАК ЭтоСертификат,
		|		ТаблицаТовары.СуммаРуб КАК СуммаРуб
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		|		ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПустаяСсылка) КАК ТипОплаты,
		|		ЛОЖЬ,
		|		ИСТИНА,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ТаблицаАгентскиеУслуги.СуммаРуб
		|	ИЗ
		|		ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ТаблицаПродажаСертификатов.ТипОплаты <> ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
		|				ТОГДА ТаблицаПродажаСертификатов.Контрагент
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаПродажаСертификатов.ТипОплаты <> ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
		|				ТОГДА ТаблицаПродажаСертификатов.ДоговорКонтрагента
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|		КОНЕЦ,
		|		ТаблицаПродажаСертификатов.ТипОплаты,
		|		ЛОЖЬ,
		|		ВЫБОР
		|			КОГДА ТаблицаПродажаСертификатов.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ЛОЖЬ,
		|		ИСТИНА,
		|		ТаблицаПродажаСертификатов.СуммаРуб
		|	ИЗ
		|		ТаблицаПродажаСертификатов КАК ТаблицаПродажаСертификатов) КАК ТаблицыДокумента
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицыДокумента.Контрагент,
		|	ТаблицыДокумента.ДоговорКонтрагента,
		|	ТаблицыДокумента.ТипОплаты
		|;
		|
		|ВЫБРАТЬ
		|	ВТ_ВыручкаДляРаспределенияОплаты.Контрагент,
		|	ВТ_ВыручкаДляРаспределенияОплаты.ДоговорКонтрагента,
		|	ВТ_ВыручкаДляРаспределенияОплаты.ТипОплаты,
		|	ВТ_ВыручкаДляРаспределенияОплаты.СуммаРуб,
		|	ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубЕНВД,
		|	ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубПатент,
		|	ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубКомитента,
		|	ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубТорговыйСбор
		|ИЗ
		|	ВТ_ВыручкаДляРаспределенияОплаты
		|;
		|
		|ВЫБРАТЬ
		|	СУММА(ВТ_ВыручкаДляРаспределенияОплаты.СуммаРуб) КАК СуммаРуб,
		|	СУММА(ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубЕНВД) КАК СуммаРубЕНВД,
		|	СУММА(ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубПатент) КАК СуммаРубПатент,
		|	СУММА(ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубКомитента) КАК СуммаРубКомитента,
		|	СУММА(ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубТорговыйСбор) КАК СуммаРубТорговыйСбор
		|ИЗ
		|	ВТ_ВыручкаДляРаспределенияОплаты
		|"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Не Реквизиты.ЕстьБезналичнаяОплатаАТТ Тогда
		ПараметрыПроведения.Вставить("БезналичныеОплаты", Неопределено);
		ПараметрыПроведения.Вставить("РеквизитыБезналичныхОплат", Неопределено);
	Иначе
		НомераТаблиц.Вставить("БезналичныеОплаты", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	МИНИМУМ(ТаблицаОплата.НомерСтроки) КАК НомерСтроки,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
		|	ТаблицаОплата.Контрагент КАК Контрагент,
		|	ТаблицаОплата.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВЫРАЗИТЬ(ТаблицаОплата.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).ВидДоговора КАК ВидДоговора,
		|	ТаблицаОплата.ТипОплаты КАК ТипОплаты,
		|	&ВалютаРеглУчета КАК ВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
		|	ЛОЖЬ КАК РасчетыВВалюте,
		|	ЛОЖЬ КАК УчетАгентскогоНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаОплата.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный), ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать)
		|	КОНЕЦ КАК СпособЗачетаАвансов,
		|	ТаблицаОплата.Ссылка КАК ДокументРасчетов,
		|	ТаблицаОплата.СчетУчетаРасчетов КАК СчетРасчетов,
		|	ТаблицаОплата.СчетУчетаРасчетов КАК СчетАвансов,
		|	ТаблицаОплата.СчетУчетаРасчетов КАК СчетАвансов_ОтгрузкаВУЕ,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
		|	СУММА(ТаблицаОплата.СуммаОплатыРуб) КАК СуммаВзаиморасчетов,
		|	СУММА(ТаблицаОплата.СуммаОплатыРуб) КАК СуммаРуб,
		|	0 КАК СуммаВзаиморасчетовКомитента,
		|	0 КАК СуммаВзаиморасчетовПатент,
		|	0 КАК СуммаВзаиморасчетовТорговыйСбор,
		|	0 КАК СуммаВзаиморасчетовЕНВД,
		|	0 КАК СуммаБУ_ОтгрузкаВУЕ,
		|	ВЫРАЗИТЬ(""Поступление безналичной оплаты"" КАК СТРОКА(150)) КАК Содержание
		|ИЗ
		|	ТаблицаОплата КАК ТаблицаОплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	Реквизиты.ПодразделениеОрганизации,
		|	ТаблицаОплата.Контрагент,
		|	ТаблицаОплата.ДоговорКонтрагента,
		|	ВЫРАЗИТЬ(ТаблицаОплата.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).ВидДоговора,
		|	ТаблицаОплата.ТипОплаты,
		|	ТаблицаОплата.Ссылка,
		|	ТаблицаОплата.СчетУчетаРасчетов,
		|	ТаблицаОплата.СчетУчетаРасчетов
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("РеквизитыБезналичныхОплат", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.ВидОперации,
		|	Реквизиты.Организация,
		|	Реквизиты.ВалютаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
		|	""Выбытие"" КАК НаправлениеДвижения,
		|	ЛОЖЬ КАК ЭтоВозврат,
		|	&ПлательщикНДФЛ КАК ПлательщикНДФЛ,
		|	&ПрименяетсяУСН КАК УчитыватьЗадолженностьУСН,
		|	&ПрименяетсяУСНПатент КАК УчитыватьЗадолженностьУСНПатент
		|ИЗ
		|	Реквизиты КАК Реквизиты"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаПодарочныеСертификаты(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьПодарочныеСертификаты Тогда
		
		ПараметрыПроведения.Вставить("ВыручкаПоПодарочнымСертификатам", Неопределено);
		
	Иначе
		
		НомераТаблиц.Вставить("ВыручкаПоПодарочнымСертификатам", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	МИНИМУМ(ТаблицаПродажаСертификатов.НомерСтроки) КАК НомерСтроки,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
		|	ТаблицаПродажаСертификатов.Контрагент КАК Контрагент,
		|	ТаблицаПродажаСертификатов.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаПродажаСертификатов.ВидДоговора КАК ВидДоговора,
		|	ТаблицаПродажаСертификатов.ТипОплаты,
		|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
		|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК РасчетыВВалюте,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически) КАК СпособПогашенияЗадолженности,
		|	ТаблицаПродажаСертификатов.Ссылка КАК ДокументРасчетов,
		|	ТаблицаПродажаСертификатов.СчетУчетаРасчетов КАК СчетРасчетов,
		|	ТаблицаПродажаСертификатов.СчетУчетаАвансов КАК СчетАвансов,
		|	ВЫБОР
		|		КОГДА &ПрименяетсяУСН
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаПродажаСертификатов.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходКомитента)
		|					ИНАЧЕ ВЫБОР
		|							КОГДА &ДеятельностьНаТорговомСборе
		|								ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходТорговыйСбор)
		|							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходУСН)
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОГДА &ПрименяетсяУСНПатент
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаПродажаСертификатов.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходКомитента)
		|					ИНАЧЕ Реквизиты.Патент
		|				КОНЕЦ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПорядокОтраженияАванса,
		|	ВЫБОР
		|		КОГДА &ЕстьБезналичнаяОплатаАТТ
		|				ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)
		|		ИНАЧЕ Реквизиты.СчетКасса
		|	КОНЕЦ КАК КорСчет,
		|	ВЫБОР
		|		КОГДА &ЕстьБезналичнаяОплатаАТТ
		|				ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
		|			ТОГДА Реквизиты.Склад
		|		ИНАЧЕ Реквизиты.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
		|	СУММА(ТаблицаПродажаСертификатов.СуммаРуб) КАК СуммаВзаиморасчетов,
		|	СУММА(ТаблицаПродажаСертификатов.СуммаРуб) КАК СуммаРуб,
		|	""Начислен аванс по подарочным сертификатам"" КАК Содержание
		|ИЗ
		|	ТаблицаПродажаСертификатов КАК ТаблицаПродажаСертификатов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаПродажаСертификатов.Ссылка = Реквизиты.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Реквизиты.ПодразделениеОрганизации,
		|	ТаблицаПродажаСертификатов.Контрагент,
		|	ТаблицаПродажаСертификатов.ДоговорКонтрагента,
		|	ТаблицаПродажаСертификатов.ВидДоговора,
		|	Реквизиты.ВалютаДокумента,
		|	ТаблицаПродажаСертификатов.Ссылка,
		|	ТаблицаПродажаСертификатов.СчетУчетаРасчетов,
		|	ТаблицаПродажаСертификатов.СчетУчетаАвансов,
		|	Реквизиты.Склад,
		|	ТаблицаПродажаСертификатов.ТипОплаты,
		|	ВЫБОР
		|		КОГДА &ЕстьБезналичнаяОплатаАТТ
		|				ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)
		|		ИНАЧЕ Реквизиты.СчетКасса
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ЕстьБезналичнаяОплатаАТТ
		|				ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
		|			ТОГДА Реквизиты.Склад
		|		ИНАЧЕ Реквизиты.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ПрименяетсяУСН
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаПродажаСертификатов.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходКомитента)
		|					ИНАЧЕ ВЫБОР
		|							КОГДА &ДеятельностьНаТорговомСборе
		|								ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходТорговыйСбор)
		|							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходУСН)
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОГДА &ПрименяетсяУСНПатент
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаПродажаСертификатов.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходКомитента)
		|					ИНАЧЕ Реквизиты.Патент
		|				КОНЕЦ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	Реквизиты.ПодразделениеОрганизации
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

// ОТЛОЖЕННОЕ ПРОВЕДЕНИЕ

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ЕстьРасчетыСКонтрагентами = Реквизиты.ЕстьАгентскиеУслуги
		ИЛИ Реквизиты.ЕстьБезналичнаяОплатаАТТ
		ИЛИ Реквизиты.ЕстьПодарочныеСертификаты;

	Если НЕ ЕстьРасчетыСКонтрагентами
		ИЛИ Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());

	ТекстЗапроса = "";

	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаАгентскиеУслуги.Контрагент КАК Контрагент,
		|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаАгентскиеУслуги.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаАгентскиеУслуги.ВидДоговора КАК ВидДоговора,
		|	Реквизиты.Дата КАК Дата
		|ИЗ
		|	ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги
		|	ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ИСТИНА";
	КонецЕсли;
	
	Если Реквизиты.ЕстьБезналичнаяОплатаАТТ Тогда
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|"
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОплата.Контрагент КАК Контрагент,
		|	ТаблицаОплата.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаОплата.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаОплата.ВидДоговора КАК ВидДоговора,
		|	Реквизиты.Дата КАК Дата
		|ИЗ
		|	ТаблицаОплата КАК ТаблицаОплата
		|	ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ИСТИНА";
	КонецЕсли;

	Если Реквизиты.ЕстьПодарочныеСертификаты Тогда
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|"
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаПродажаСертификатов.Контрагент КАК Контрагент,
		|	ТаблицаПродажаСертификатов.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаПродажаСертификатов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаПродажаСертификатов.ВидДоговора КАК ВидДоговора,
		|	Реквизиты.Дата КАК Дата
		|ИЗ
		|	ТаблицаПродажаСертификатов КАК ТаблицаПродажаСертификатов
		|	ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ИСТИНА";
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		ПараметрыПроведения.Вставить("РеквизитыРегистрацияВПоследовательности", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РеквизитыРегистрацияВПоследовательности", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.ВидОперации
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ЗарегистрироватьОтложенныеРасчетыВПоследовательности(Объект, ПараметрыПроведения, ТаблицаСписанныеТовары, Отказ) Экспорт

	// Отчет о розничных продажах в НТТ используется данные об остатках забалансовых счетов РВ, 
	// поэтому всегда проводится в хронологической последовательности.
	
	ОбязательноРегистрироватьВПоследовательности = Истина;
	
	Параметры = ПодготовитьПараметрыЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ПараметрыПроведения.РеквизитыРегистрацияВПоследовательности);
	
	Если Параметры.Реквизиты.Количество() > 0 Тогда

		// Если параметры проведения для регистрации в последовательности заполнены, то анализируем их, 
		// иначе безусловно регистрируем в последовательности.
		Реквизиты = Параметры.Реквизиты[0];
		
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
			ОбязательноРегистрироватьВПоследовательности = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если ОбязательноРегистрироватьВПоследовательности Тогда
		РаботаСПоследовательностями.ЗарегистрироватьВПоследовательности(Объект, Отказ, Ложь);
	Иначе
		РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
			Объект,
			Отказ,
			ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение,
			ТаблицаСписанныеТовары,
			Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыЗарегистрироватьОтложенныеРасчетыВПоследовательности(ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "ВидОперации"                   // <Перечисление.ВидыОперацийОтчетОРозничныхПродажах> - вид операции документа
	;

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ОбработкаОтложенногоПроведения(Параметры, Отказ) Экспорт
	
	// Отложенное проведение отчета о розничных продажах поддерживается при одновременном выполнении следующих условий:
	//	- способ оценки товаров в рознице по стоимости приобретения
	//	- склад типа АТТ
	//	- для УСН дополнительно не поддерживаются эквайринговые операции
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведения(
		Параметры.Регистратор,
		Отказ,
		Параметры.ДоговорКонтрагента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	// Таблица проданных подарочных сертификатов с зачетом принятых ранее в оплату
	ПроданныеСертификатыВзаиморасчеты = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		Параметры,
		ПараметрыПроведения.ВыручкаПоПодарочнымСертификатам,
		ПараметрыПроведения.Реквизиты,
		Отказ);
	
	// В безналичной оплате учтем взаиморасчеты по проданным ранее подарочным сертификатам
	БезналичныеОплатыВзаиморасчеты = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовБезналичнаяРозничнаяВыручка(
		Параметры,	
		ПараметрыПроведения.БезналичныеОплаты,
		ПараметрыПроведения.РеквизитыБезналичныхОплат,
		Отказ);

	ТаблицыРаспределеннойВыручки = ПодготовитьТаблицыРаспределенияВыручкиПоОплатам(
		ПараметрыПроведения.ВыручкаДляРаспределенияОплатыУСН,
		БезналичныеОплатыВзаиморасчеты,
		ПроданныеСертификатыВзаиморасчеты,
		ПараметрыПроведения.Реквизиты,
		Отказ,
		Истина);
	
	ТаблицаБезналичныеОплаты    = ТаблицыРаспределеннойВыручки.БезналичныеОплаты;
	ТаблицаПроданныеСертификаты = ТаблицыРаспределеннойВыручки.ПроданныеСертификаты;
	ТаблицаВыручкаУСН           = ТаблицыРаспределеннойВыручки.ТаблицаВыручка;

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура();
	СтруктураТаблицУСН.Вставить("ПроданныеСертификаты",     ТаблицаПроданныеСертификаты); // АТТ
	СтруктураТаблицУСН.Вставить("БезналичныеОплаты",        ТаблицаБезналичныеОплаты);    // АТТ
	СтруктураТаблицУСН.Вставить("ТаблицаВыручка",           ТаблицаВыручкаУСН);           // АТТ

	// Для движений по Хозрасчетному используем таблицы, отобранные только по актуализируемому договору.
	// Для движений по УСН используем полные данные, отбор по актуализируемому договору
	// будет выполнен в процедурах модуля НалоговыйУчетУСН.
	// При этом наличная оплата в ходе отложенного проведения не изменяется, поэтому ее не передаем.
	ТаблицаПроданныеСертификатыХозрасчетный = УчетВзаиморасчетовОтложенноеПроведение.СкопироватьСтрокиТаблицыПоДоговору(
		ТаблицаПроданныеСертификаты,
		Параметры.ДоговорКонтрагента);
		
	ТаблицаБезналичныеОплатыХозрасчетный = УчетВзаиморасчетовОтложенноеПроведение.СкопироватьСтрокиТаблицыПоДоговору(
		ТаблицаБезналичныеОплаты,
		Параметры.ДоговорКонтрагента);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияПогашениеЗадолженности(
		Параметры,
		ТаблицаПроданныеСертификатыХозрасчетный,
		ПараметрыПроведения.Реквизиты,
		Отказ);

	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияПоступленияОтРозничныхПокупателей(
		Параметры,
		ТаблицаБезналичныеОплатыХозрасчетный,
		Неопределено,
		ПараметрыПроведения.Реквизиты, 
		Отказ);

	СформироватьДвиженияУСНОтложенноеПроведение(Параметры, СтруктураТаблицУСН);

КонецПроцедуры

Процедура СформироватьДвиженияУСНОтложенноеПроведение(Параметры, СтруктураТаблицУСН)

	// Если в документе используется одновременно и продажа и оплата собственных подарочных сертификатов,
	// то движения УСН необходимо переформировывать полностью, т.к. возможно изменение выручки
	// на величину "зачета" между такими сертификатами, операции по которым проведены одним днем.
	// Эта информация становится известна после получения остатков взаиморасчетов.
	
	Если НЕ УчетВзаиморасчетовОтложенноеПроведение.ПрименяетсяУСН(Параметры)
		И НЕ УчетВзаиморасчетовОтложенноеПроведение.ПрименяетсяУСНПатент(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ОтборПроданныеСертификаты = Новый Структура();
	ОтборПроданныеСертификаты.Вставить("Контрагент", 			Параметры.Контрагент);
	ОтборПроданныеСертификаты.Вставить("ДоговорКонтрагента", 	Параметры.ДоговорКонтрагента);
	
	ОтборБезналичныеОплаты = Новый Структура();
	ОтборБезналичныеОплаты.Вставить("ТипОплаты", 			Перечисления.ТипыОплат.ПодарочныйСертификатСобственный);
	ОтборБезналичныеОплаты.Вставить("Контрагент", 			Параметры.Контрагент);
	ОтборБезналичныеОплаты.Вставить("ДоговорКонтрагента", 	Параметры.ДоговорКонтрагента);
	
	НайденныеСтрокиПроданныеСертификаты = СтруктураТаблицУСН.ПроданныеСертификаты.НайтиСтроки(ОтборПроданныеСертификаты);
	НайденныеСтрокиБезналичныеОплаты	= СтруктураТаблицУСН.БезналичныеОплаты.НайтиСтроки(ОтборБезналичныеОплаты);
	
	Если НайденныеСтрокиПроданныеСертификаты.Количество() > 0
		И НайденныеСтрокиБезналичныеОплаты.Количество() > 0 Тогда
		
		УчетВзаиморасчетовОтложенноеПроведение.ОчиститьДвиженияУСН(Параметры);
		
		ДокументОбъектУСН = УчетВзаиморасчетовОтложенноеПроведение.ДокументОбъектУСН(Параметры);
		
		НалоговыйУчетУСН.СформироватьДвиженияУСН(ДокументОбъектУСН, СтруктураТаблицУСН, Ложь);
		
	Иначе

		УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияУСН(Параметры, СтруктураТаблицУСН);

	КонецЕсли;

КонецПроцедуры

#Область Возвраты
 

// Подготавливаем таблицу партий на которые будет возвращен ранее реализованный товар
Функция ПодготовитьТаблицуСписанныеТоварыОтПокупателя(ТаблицаВозвращенныеСписанныеТовары, СписаниеТоваровСчетаУчета, СписаниеТоваровНоменклатура,ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаСписанныеТоварыОтПокупателя = УчетТоваров.ПолучитьПустуюТаблицуСписанныеТовары();
	ТаблицаСписанныеТоварыОтПокупателя.Колонки.Добавить("Сделка");
	ТаблицаСписанныеТоварыОтПокупателя.Колонки.Добавить("ВозвратТекущейСмены");
	
	Если ТаблицаРеквизиты <> Неопределено Тогда
		// таблица реквизиты содержит строки в разрезе документов списания
		Для каждого СтрокаРеквизиты Из ТаблицаРеквизиты Цикл
			// подбираем партии по каждому документу списания
			ОтборПоДокументуРеализации = Новый Структура("Сделка", СтрокаРеквизиты.Сделка);
			
			РеквизитыВозвраты 				= ТаблицаРеквизиты.Скопировать(ОтборПоДокументуРеализации);
			ТаблицаТоваровПоСделке 			= ТаблицаВозвращенныеСписанныеТовары.Скопировать(ОтборПоДокументуРеализации);
			ТаблицаСчетаУчетаПоСделке 		= СписаниеТоваровСчетаУчета.Скопировать(ОтборПоДокументуРеализации);
			ТаблицаНоменклатураПоСделке 	= СписаниеТоваровНоменклатура.Скопировать(ОтборПоДокументуРеализации);
			
			Если СтрокаРеквизиты.ВозвратТекущейСмены Тогда
				ТаблицаСписанныеТоварыОтПокупателяПоСделке = УчетТоваров.ПолучитьПустуюТаблицуСписанныеТовары();
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаТоваровПоСделке, ТаблицаСписанныеТоварыОтПокупателяПоСделке);
			Иначе
				ТаблицаСписанныеТоварыОтПокупателяПоСделке = УчетТоваров.ПодготовитьТаблицуВозвращенныеСписанныеТовары(
					ТаблицаТоваровПоСделке, 
					ТаблицаСчетаУчетаПоСделке,
					ТаблицаНоменклатураПоСделке, 
					РеквизитыВозвраты, Отказ);
			КонецЕсли;
			
			// в результирующей таблице заполняем построчно сделку к которой относится возврат
			ТаблицаСписанныеТоварыОтПокупателяПоСделке.Колонки.Добавить("Сделка");
			ТаблицаСписанныеТоварыОтПокупателяПоСделке.ЗаполнитьЗначения(СтрокаРеквизиты.Сделка, "Сделка");
			
			ТаблицаСписанныеТоварыОтПокупателяПоСделке.Колонки.Добавить("ВозвратТекущейСмены");
			ТаблицаСписанныеТоварыОтПокупателяПоСделке.ЗаполнитьЗначения(СтрокаРеквизиты.ВозвратТекущейСмены, "ВозвратТекущейСмены");
			
			// загружаем подобранные партии по сделке в результирующую таблицу
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаСписанныеТоварыОтПокупателяПоСделке, ТаблицаСписанныеТоварыОтПокупателя);
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат ТаблицаСписанныеТоварыОтПокупателя;
КонецФункции 

Процедура ПроставитьСторноТаблиц(ТаблицаСписанныеТовары, ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов) Экспорт

	
	СтруктураПолейДляСторно = Новый Структура("Количество, Себестоимость, СуммаСписания, СуммаСписанияНУ,
		|СуммаСписанияВР, СуммаСписанияПР, СуммаКорСписанияНУ, СуммаКорСписанияВР, СуммаКорСписанияПР");
	
	Если ТаблицаСписанныеТовары <> Неопределено Тогда
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаСписанныеТовары, СтруктураПолейДляСторно, -1);
	КонецЕсли;
	
	СтруктураПолейДляСторно = Новый Структура("Количество, СуммаВзаиморасчетов, СуммаРуб, СуммаНДСРуб,
		|СуммаБУ, СуммаНУ, СуммаРасчетовСКомитентом, СуммаПоступленияОтКомитента");
		
	Если ТаблицаСобственныеТоварыУслуги <> Неопределено Тогда
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаСобственныеТоварыУслуги, СтруктураПолейДляСторно, -1);
	КонецЕсли;
	
	Если ТаблицаТоварыУслугиКомитентов <> Неопределено Тогда
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаТоварыУслугиКомитентов, СтруктураПолейДляСторно, -1);
	КонецЕсли;
	
	СтруктураПолейДляСторно = Новый Структура("Количество, Выручка, СуммаПоступления, СуммаНДС");
	
	Если ТаблицаРеализованныеТоварыКомитентов <> Неопределено Тогда
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаРеализованныеТоварыКомитентов, СтруктураПолейДляСторно, -1);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияВозвратОплаты(ВозвратОплатыНаличные, ВозвратБезналичныхОплат , ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыВозвратОплаты(ВозвратОплатыНаличные, ВозвратБезналичныхОплат, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	Для каждого СтрокаВыручки Из Параметры.ВозвратОплатыНаличные Цикл
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаВыручки.СуммаРуб;
		Проводка.Содержание  = НСтр("ru = 'Возврат денежных средств розничному покупателю.'");
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Склады", Реквизиты.Склад);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетКасса;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СтатьиДвиженияДенежныхСредств", Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСтатьюДДСПоВидуОперации(Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю));
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

	КонецЦикла;
	
	Для каждого СтрокаБезналичнойВыручки Из Параметры.ВозвратОплатыБезналичнаяВыручка Цикл
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаБезналичнойВыручки.СуммаРуб;
		Проводка.Содержание  = НСтр("ru = 'Возврат денежных средств розничному покупателю.'");
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Склады", Реквизиты.Склад);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = СтрокаБезналичнойВыручки.СчетРасчетов;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаБезналичнойВыручки.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Договоры", СтрокаБезналичнойВыручки.ДоговорКонтрагента);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПодготовитьПараметрыВозвратОплаты(ВозвратОплатыНаличные, ВозвратОплатыБезналичнаяВыручка, ТаблицаРеквизиты)
	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Склад,"                          // <СправочникСсылка.Склады>
	+ "СчетКасса,"                   // <ПланСчетовСсылка.Хозрасчетный>
	+ "Регистратор,"               // <ДокументСсылка>
	+ "УчитыватьЗадолженностьУСН," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения,"       // <Строка> - "Поступление" при зачете авансов, выданных поставщикам (при поступлении материальных ценностей)
	                               //          - "Выбытие" при зачете авансов, полученных от покупателей (при выбытии материальных ценностей)
	+ "ЭтоВозврат";                // <Булево> - Истина при возврате материальных ценностей (от покупателя или поставщику)
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	// Изменим значение исходного документа
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "ЭтоВозврат");
	
	СписокОбязательныхКолонок = ""
	+ "СуммаРуб"                         // <Дата>
	;
	Параметры.Вставить("ВозвратОплатыНаличные", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ВозвратОплатыНаличные, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "СчетРасчетов,"                         // <ПланСчетовСсылка.Хозрасчетный>
	+ "Контрагент,"                      // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"                // <ДокументСсылка>
	+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "Подразделение,"                   // <Ссылка на справочник подразделений> - подразделение по счету авансов
	+ "РасчетыВВалюте,"                  // <Булево>  - флаг расчетов в валюте (в т.ч. и в условных единицах)
	+ "СуммаРуб,"                         // <Число,15,2> - сумма в валюте расчетов 
	+ "СуммаВзаиморасчетов,"             // <Число,15,2> - сумма в валюте расчетов по договору
	+ "СуммаВзаиморасчетовЕНВД,"         // <Число,15,2> - сумма в валюте расчетов по договору по деятельности ЕНВД
	+ "СуммаРуб_ЕНВД,"                   // <Число,15,2> - сумма в рублях по деятельности ЕНВД
	+ "СуммаВзаиморасчетовПатент,"       // <Число,15,2> - сумма в валюте расчетов по договору по деятельности на патенте
	+ "СуммаРуб_Патент,"                 // <Число,15,2> - сумма в рублях по деятельности на патенте
	+ "СуммаВзаиморасчетовТорговыйСбор," // <Число,15,2> - сумма в валюте расчетов по договору по деятельности на торговом сборе
	+ "СуммаРуб_ТорговыйСбор,"           // <Число,15,2> - сумма в рублях по деятельности на торговом сборе
	+ "СуммаВзаиморасчетовКомитента,"    // <Число,15,2> - сумма в валюте расчетов по договору при реализации товаров и услуг комитентов
	+ "СуммаРуб_Комитента";              // <Число,15,2> - сумма в рублях при реализации товаров и услуг комитентов
	;
	Параметры.Вставить("ВозвратОплатыБезналичнаяВыручка", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ВозвратОплатыБезналичнаяВыручка, СписокОбязательныхКолонок));
		
	Возврат Параметры;
КонецФункции

// Возвраты УСН
Функция РасходыПоСделкамУСН(СписокСделок)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокСделок", СписокСделок);
	Запрос.УстановитьПараметр("Субсчета10",   БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Материалы));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыПриУСН.Период КАК Период,
	|	РасходыПриУСН.Регистратор КАК Регистратор,
	|	РасходыПриУСН.НомерСтроки КАК НомерСтроки,
	|	РасходыПриУСН.Активность КАК Активность,
	|	РасходыПриУСН.ВидДвижения КАК ВидДвижения,
	|	РасходыПриУСН.Организация КАК Организация,
	|	РасходыПриУСН.СтатусыОплатыРасходовУСН КАК СтатусыОплатыРасходовУСН,
	|	РасходыПриУСН.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасходыПриУСН.Партия КАК Партия,
	|	РасходыПриУСН.ВидРасхода КАК ВидРасхода,
	|	РасходыПриУСН.ЭлементРасхода КАК ЭлементРасхода,
	|	РасходыПриУСН.СтатусыПартийУСН КАК СтатусыПартийУСН,
	|	РасходыПриУСН.ОтражениеВУСН КАК ОтражениеВУСН,
	|	РасходыПриУСН.СчетУчета КАК СчетУчета,
	|	РасходыПриУСН.Валюта КАК Валюта,
	|	РасходыПриУСН.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасходыПриУСН.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РасходыПриУСН.РеквизитыДокументаОплаты КАК РеквизитыДокументаОплаты,
	|	РасходыПриУСН.Количество КАК Количество,
	|	РасходыПриУСН.Сумма КАК Сумма,
	|	РасходыПриУСН.НДС КАК НДС,
	|	0 КАК ЭтапПроведения,
	|	РасходыПриУСН.СтатусСписания КАК СтатусСписания,
	|	ВЫБОР
	|		КОГДА РасходыПриУСН.СчетУчета В (&Субсчета10)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоТовар,
	|	ВЫБОР
	|		КОГДА РасходыПриУСН.СчетУчета В (&Субсчета10)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоМатериал,
	|	РасходыПриУСН.МоментВремени КАК МоментВремени
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
	|ГДЕ
	|	РасходыПриУСН.Регистратор В(&СписокСделок)
	|	И РасходыПриУСН.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПартииПоСделкамУСН(Реквизиты, МассивСделок, МассивНоменклатуры)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("МассивСделок",       МассивСделок);
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка КАК Сделка,
	|	ОтчетОРозничныхПродажах.Ссылка КАК ДокументСделки,
	|	ИСТИНА КАК НепосредственнаяСделка
	|ПОМЕСТИТЬ ВременнаяТаблицаСделки
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка В(&МассивСделок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахПродажи.Ссылка,
	|	ОтчетОРозничныхПродажахВозвраты.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Возвраты КАК ОтчетОРозничныхПродажахВозвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахПродажи
	|		ПО ОтчетОРозничныхПродажахВозвраты.Ссылка = ОтчетОРозничныхПродажахПродажи.Ссылка
	|			И ОтчетОРозничныхПродажахВозвраты.Номенклатура = ОтчетОРозничныхПродажахПродажи.Номенклатура
	|			И (НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажахВозвраты.ДатаРеализации, ДЕНЬ) = НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажахПродажи.Ссылка.Дата, ДЕНЬ))
	|ГДЕ
	|	ОтчетОРозничныхПродажахВозвраты.Ссылка В(&МассивСделок)
	|	И ОтчетОРозничныхПродажахПродажи.Ссылка.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументСделки,
	|	Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСделки.Сделка КАК Сделка,
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.СубконтоКт1 КАК Номенклатура,
	|	Партии.СубконтоКт2 КАК ДокументОприходования,
	|	Партии.КоличествоОборотКт КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаПартии
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			,
	|			&Период,
	|			Регистратор,
	|			,
	|			,
	|			,
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И СубконтоКт1 В (&МассивНоменклатуры)) КАК Партии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСделки КАК ВременнаяТаблицаСделки
	|		ПО Партии.Регистратор = ВременнаяТаблицаСделки.ДокументСделки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партии.Сделка КАК Сделка,
	|	Партии.Номенклатура КАК Номенклатура,
	|	Партии.ДокументОприходования КАК ДокументОприходования,
	|	Партии.Количество КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаПартииСВозвратом
	|ИЗ
	|	ВременнаяТаблицаПартии КАК Партии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСделки КАК Сделки
	|		ПО Партии.Регистратор = Сделки.ДокументСделки
	|			И (Сделки.НепосредственнаяСделка)
	|			И Партии.Сделка = Сделки.Сделка
	|ГДЕ
	|	Партии.Количество > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Партии.Сделка,
	|	Партии.Номенклатура,
	|	Партии.ДокументОприходования,
	|	Партии.Количество
	|ИЗ
	|	ВременнаяТаблицаПартии КАК Партии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСделки КАК Сделки
	|		ПО Партии.Регистратор = Сделки.ДокументСделки
	|			И (НЕ Сделки.НепосредственнаяСделка)
	|			И Партии.Сделка = Сделки.Сделка
	|ГДЕ
	|	Партии.Количество < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаПартииСВозвратом.Сделка КАК Сделка,
	|	ВременнаяТаблицаПартииСВозвратом.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаПартииСВозвратом.ДокументОприходования КАК ДокументОприходования,
	|	СУММА(ВременнаяТаблицаПартииСВозвратом.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПартииСВозвратом КАК ВременнаяТаблицаПартииСВозвратом
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаПартииСВозвратом.Номенклатура,
	|	ВременнаяТаблицаПартииСВозвратом.ДокументОприходования,
	|	ВременнаяТаблицаПартииСВозвратом.Сделка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПодготовитьТаблицуВозвратаРасходовУСН(
			ТаблицаВозвращенныеТовары,
			ТаблицаДокументыРеализации,
			ТаблицаРеквизиты,
			СуммаСторноРасходов, // Рассчитывается и возвращается
			СуммаСторноНДС, // Рассчитывается и возвращается
			СуммаПризнанияНДС, // Рассчитывается и возвращается
			Отказ) Экспорт

	Если НЕ ЗначениеЗаполнено(ТаблицаВозвращенныеТовары)
	 ИЛИ НЕ ЗначениеЗаполнено(ТаблицаРеквизиты)
	 ИЛИ НЕ ЗначениеЗаполнено(ТаблицаДокументыРеализации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПорядокПризнанияРасходовПоНДС        = УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(Реквизиты.Организация, Реквизиты.Период);
	ПорядокПризнанияРасходовПоТоварам    = УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(Реквизиты.Организация, Реквизиты.Период);
	ПорядокПризнанияМатериальныхРасходов = УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(Реквизиты.Организация, Реквизиты.Период);
	
	ВыделятьНДСУСН           = (ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	
	ТоварыПоОплате    = (ПорядокПризнанияРасходовПоТоварам    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
	ТоварыПоОтгрузке  = (ПорядокПризнанияРасходовПоТоварам    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
	МатериалыПоОплате = (ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
	
	МассивСделок = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДокументыРеализации,"Ссылка", Истина);
	
	// 1. Подготовить пустую таблицу для формирования движений
	НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Реквизиты.Регистратор);
	НаборЗаписей.Прочитать();
	ТаблицаДвиженийРасходов = НаборЗаписей.ВыгрузитьКолонки();
	// Добавить обязательные колонки
	ТаблицаДвиженийРасходов.Колонки.Добавить("ЭтоТовар", Новый ОписаниеТипов("Булево"));
	ТаблицаДвиженийРасходов.Колонки.Добавить("ЭтоМатериал", Новый ОписаниеТипов("Булево"));
	
	ТаблицаРасходыУСНПоСделкам = РасходыПоСделкамУСН(МассивСделок);
	
	// Формирование остатков расходов по возвращаемым партиям на текущий документ
	
	// Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "ВидРасхода";
	Фильтр.ЗначениеПоля = Перечисления.ВидыРасходовУСН.Номенклатура;
	Фильтр.Условие      = "=";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "СтатусыПартийУСН";
	Фильтр.ЗначениеПоля = Перечисления.СтатусыПартийУСН.Списанные;
	Фильтр.Условие      = "=";
	
	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаВозвращенныеТовары, "Номенклатура", Истина);
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "ЭлементРасхода";
	Фильтр.ЗначениеПоля = МассивНоменклатуры;
	Фильтр.Условие      = "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "Партия";
	Фильтр.ЗначениеПоля = МассивСделок;
	Фильтр.Условие      = "В";
	
	ТаблицаОстатковРасходовПоСделкам = НалоговыйУчетУСН.ВыполнитьЗапросПоРасходам(
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая),
		Реквизиты.Организация,
		ТаблицаФильтров);
	
	ТаблицаПартииСделок = ПартииПоСделкамУСН(Реквизиты, МассивСделок, МассивНоменклатуры);
	
	СписокВалютУчетаРасходов = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаОстатковРасходовПоСделкам, "Валюта", Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СписокВалютУчетаРасходов,
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасходыУСНПоСделкам, "Валюта", Истина),
		Истина);
		
	КурсыВалют = Новый Соответствие;
	Для каждого ВалютаУчетаРасходов Из СписокВалютУчетаРасходов Цикл
		КурсыВалют[ВалютаУчетаРасходов] = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУчетаРасходов, Реквизиты.Период);
	КонецЦикла;
		
	КурсВалютыРегламентированногоУчета = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), 
		Реквизиты.Период);
		
	СуммаСторноНДС    = 0;
	СуммаПризнанияНДС = 0;
	СуммаСторноРасходов = 0;
	
	Для каждого РеквизитыСделки Из ТаблицаДокументыРеализации Цикл 
		
		ОтборПоСделке = Новый Структура("Сделка", РеквизитыСделки.Ссылка);
		
		ТаблицаДвиженийРасходовПоСделке = ТаблицаДвиженийРасходов.СкопироватьКолонки();
		ТаблицаТоварыПоСделке = ТаблицаВозвращенныеТовары.Скопировать(ОтборПоСделке);
		
		ТаблицаПартииСделки = ТаблицаПартииСделок.Скопировать(ОтборПоСделке);
		ТаблицаПартииСделки.Сортировать("Количество УБЫВ");
		
		// 2. Добавим в партии информацию об изменении ОтражениеВУСН
		НалоговыйУчетУСН.ЗаполнитьОтражениеВНУпоСписанию(РеквизитыСделки, ТаблицаПартииСделки, "Реализация");
		
		// 3. Из движений по регистру РасходыПриУСН, выбираем расходы сделанные текущим документом сделки
		ТаблицаРасходыУСНПоСделке = ТаблицаРасходыУСНПоСделкам.Скопировать(Новый Структура("Регистратор", РеквизитыСделки.Ссылка));
		ТаблицаРасходыУСНПоСделке.Сортировать("Количество УБЫВ");
		
		// 4. Из таблицы расходов выбираем соответствующие партии и элементы расходов
		ОтборПоТекущейСделке    = Новый Структура("Партия", РеквизитыСделки.Ссылка);
		ТаблицаОстатковРасходов = ТаблицаОстатковРасходовПоСделкам.Скопировать(ОтборПоТекущейСделке);
		ТаблицаОстатковРасходов.Сортировать(
			"СтатусыОплатыРасходовУСНПорядок, ПартияДата, Партия, РасчетныйДокументДата, РасчетныйДокумент, НомерСтрокиДокумента",
			Новый СравнениеЗначений);
		
		ПорядокПризнанияРасходовПоНДСРеализация = УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(
			Реквизиты.Организация, РеквизитыСделки.ДатаДокументаОтгрузки);
		
		ВыделятьНДСУСНРеализация = (ПорядокПризнанияРасходовПоНДСРеализация = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
		
		ТаблицаПартииСделки.Индексы.Добавить("Номенклатура");
		ТаблицаРасходыУСНПоСделке.Индексы.Добавить("ЭлементРасхода,Партия");
		ТаблицаОстатковРасходов.Индексы.Добавить("ЭлементРасхода");
		
		
		// 5 .Цикл по товарам, ...
		Для Каждого Строка Из ТаблицаТоварыПоСделке Цикл
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);
			
			НайденныеСтроки = ТаблицаПартииСделки.НайтиСтроки(СтруктураОтбора);
			
			СтатусСписания = Перечисления.ОтражениеВУСН.ПустаяСсылка();
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтатусСписания = НайденныеСтроки[0].СтатусСписания;
			КонецЕсли;
			
			//Добавить строки поступления по партиям
			КоличествоОсталосьСписать = Строка.Количество;
			Для Каждого СтрокаПартии Из НайденныеСтроки Цикл
				Если НЕ КоличествоОсталосьСписать > 0 Тогда
					Прервать;
				КонецЕсли;
				Если НЕ СтрокаПартии.Количество > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоСписать         = Мин(КоличествоОсталосьСписать, СтрокаПартии.Количество);
				КоличествоОсталосьСписать = КоличествоОсталосьСписать - КоличествоСписать;
				СтрокаПартии.Количество   = СтрокаПартии.Количество - КоличествоСписать;
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ЭлементРасхода", Строка.Номенклатура);
				
				СтруктураОтбораПоПартиям = Новый Структура;
				СтруктураОтбораПоПартиям.Вставить("ЭлементРасхода", Строка.Номенклатура);
				СтруктураОтбораПоПартиям.Вставить("Партия",         СтрокаПартии.ДокументОприходования);
				
				НайденныеСтрокиСписано = ТаблицаРасходыУСНПоСделке.НайтиСтроки(СтруктураОтбораПоПартиям);
				НайденныеСтрокиОстаток = ТаблицаОстатковРасходов.НайтиСтроки(СтруктураОтбора);
				
				Для Каждого СтрокаСписания Из НайденныеСтрокиСписано Цикл
					Если НЕ СтрокаСписания.Количество > 0 Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого СтрокаОстатка Из НайденныеСтрокиОстаток Цикл
						Если НЕ СтрокаСписания.Количество > 0 Тогда
							Продолжить;
						КонецЕсли;
						Если НЕ КоличествоСписать > 0 Тогда
							Прервать;
						КонецЕсли;
						Если НЕ СтрокаОстатка.Количество > 0 Тогда
							Продолжить;
						КонецЕсли;
						
						КоличествоСписатьРасход = Мин(КоличествоСписать, СтрокаСписания.Количество, СтрокаОстатка.Количество);
						Коэфф = ?(СтрокаОстатка.Количество = 0, 0, КоличествоСписатьРасход/СтрокаОстатка.Количество);
						//Добавить строки поступления по расходам
						НоваяСтрокаРасход = ТаблицаДвиженийРасходовПоСделке.Добавить();
						НоваяСтрокаПриход = ТаблицаДвиженийРасходовПоСделке.Добавить();
						
						ЗаполнитьЗначенияСвойств(НоваяСтрокаРасход, СтрокаОстатка);
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПриход, СтрокаОстатка);
						
						НоваяСтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
						НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
						НоваяСтрокаПриход.СтатусыПартийУСН  = СтрокаСписания.СтатусыПартийУСН;
						НоваяСтрокаПриход.Партия            = СтрокаСписания.Партия;
						Если (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем)
							ИЛИ (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН  = Перечисления.СтатусыРасходовУСН.НеРаспределено) Тогда
							НоваяСтрокаПриход.СтатусыОплатыРасходовУСН   = Перечисления.СтатусыРасходовУСН.НеСписано;
						Иначе
							НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
						КонецЕсли;
						//Движение расход
						НоваяСтрокаРасход.Сумма      = Коэфф*СтрокаОстатка.Сумма;
						НоваяСтрокаРасход.НДС        = Коэфф*СтрокаОстатка.НДС;
						НоваяСтрокаРасход.Количество = КоличествоСписатьРасход;
						//Движение приход
						НоваяСтрокаПриход.Сумма      = Коэфф * СтрокаОстатка.Сумма;
						НоваяСтрокаПриход.НДС        = Коэфф * СтрокаОстатка.НДС;
						НоваяСтрокаПриход.Количество = КоличествоСписатьРасход;
						
						КоличествоСписать               = КоличествоСписать - КоличествоСписатьРасход;
						СтрокаСписания.Количество       = СтрокаСписания.Количество - НоваяСтрокаПриход.Количество;
						СтрокаСписания.Сумма            = СтрокаСписания.Сумма - НоваяСтрокаПриход.Сумма;
						СтрокаСписания.НДС              = СтрокаСписания.НДС - НоваяСтрокаПриход.НДС;
						
						СтрокаОстатка.Количество = СтрокаОстатка.Количество - НоваяСтрокаПриход.Количество;
						СтрокаОстатка.Сумма      = СтрокаОстатка.Сумма - НоваяСтрокаПриход.Сумма;
						СтрокаОстатка.НДС        = СтрокаОстатка.НДС - НоваяСтрокаПриход.НДС;
						
						Если (Реквизиты.Период >= Дата("20060101"))
							И (ТоварыПоОтгрузке)
							И (НоваяСтрокаРасход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем)
							И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
							И (СтатусСписания <> Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
							
							СуммаСторноРасходов = СуммаСторноРасходов
								+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
									НоваяСтрокаПриход.Сумма,
									КурсыВалют[НоваяСтрокаПриход.Валюта],
									КурсВалютыРегламентированногоУчета);
									
							СуммаСторноНДС = СуммаСторноНДС
								+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
									НоваяСтрокаПриход.НДС,
									КурсыВалют[НоваяСтрокаПриход.Валюта],
									КурсВалютыРегламентированногоУчета);
							
						ИначеЕсли (ВыделятьНДСУСН)
							И (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано)
							И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
							И (СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
							
							СуммаПризнанияНДС = СуммаПризнанияНДС
								+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
									НоваяСтрокаПриход.НДС,
									КурсыВалют[НоваяСтрокаПриход.Валюта],
									КурсВалютыРегламентированногоУчета);
									
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
				Если КоличествоСписать > 0 Тогда
					Для Каждого СтрокаСписания Из НайденныеСтрокиСписано Цикл
						
						КоличествоСписатьРасход = Мин(КоличествоСписать, СтрокаСписания.Количество);
						Коэфф = ?(СтрокаСписания.Количество = 0, 0, КоличествоСписатьРасход/СтрокаСписания.Количество);
						
						Если НЕ КоличествоСписатьРасход > 0 Тогда
							Продолжить;
						КонецЕсли;
						
						//Добавить строки поступления по расходам
						НоваяСтрокаПриход = ТаблицаДвиженийРасходовПоСделке.Добавить();
						
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПриход, СтрокаСписания);
						НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
						
						//Определим сумму сторнируемых расходов
						ЭтоТовар    = БухгалтерскийУчетПовтИсп.СчетВИерархии(Строка.СчетУчета, ПланыСчетов.Хозрасчетный.ТоварыОтгруженные)
							ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Строка.СчетУчета, ПланыСчетов.Хозрасчетный.Товары);
						ЭтоМатериал = БухгалтерскийУчетПовтИсп.СчетВИерархии(Строка.СчетУчета, ПланыСчетов.Хозрасчетный.Материалы);
						
						РасходыПоОплате = ((ТоварыПоОплате И ЭтоТовар) ИЛИ (МатериалыПоОплате И ЭтоМатериал));
						
						Если (РасходыПоОплате) И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда
							НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
						Иначе
							НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
						КонецЕсли;
						
						//Движение приход
						НоваяСтрокаПриход.Сумма      = Коэфф*СтрокаСписания.Сумма;
						НоваяСтрокаПриход.НДС        = Коэфф*СтрокаСписания.НДС;
						НоваяСтрокаПриход.Количество = КоличествоСписатьРасход;
						
						КоличествоСписать            = КоличествоСписать - КоличествоСписатьРасход;
						СтрокаСписания.Количество    = СтрокаСписания.Количество - НоваяСтрокаПриход.Количество;
						СтрокаСписания.Сумма         = СтрокаСписания.Сумма - НоваяСтрокаПриход.Сумма;
						СтрокаСписания.НДС           = СтрокаСписания.НДС - НоваяСтрокаПриход.НДС;
						
						Если (НЕ ВыделятьНДСУСНРеализация) И (ВыделятьНДСУСН) Тогда
							НоваяСтрокаПриход.Сумма = НоваяСтрокаПриход.Сумма - НоваяСтрокаПриход.НДС;
						КонецЕсли;
						
						Если (НЕ РасходыПоОплате) И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
							И (НЕ СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
							
							СуммаСторноРасходов = СуммаСторноРасходов
								+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
									НоваяСтрокаПриход.Сумма,
									КурсыВалют[НоваяСтрокаПриход.Валюта],
									КурсВалютыРегламентированногоУчета);
									
							СуммаСторноНДС = СуммаСторноНДС
								+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
									НоваяСтрокаПриход.НДС,
									КурсыВалют[НоваяСтрокаПриход.Валюта],
									КурсВалютыРегламентированногоУчета);
							
						ИначеЕсли (ВыделятьНДСУСН)
							И (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано)
							И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
							И (СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
							
							СуммаПризнанияНДС = СуммаПризнанияНДС
								+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
									НоваяСтрокаПриход.НДС,
									КурсыВалют[НоваяСтрокаПриход.Валюта],
									КурсВалютыРегламентированногоУчета);
							
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоОсталосьСписать > 0 Тогда
				//Оприходовать по документу возврата
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийРасходовПоСделке, ТаблицаДвиженийРасходов);
		
	КонецЦикла;
	
	//Недостающие поля.
	ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Реквизиты.Период, "Период");
	ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Реквизиты.Регистратор, "Регистратор");
	ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Истина, "Активность");
	
	
	Возврат ТаблицаДвиженийРасходов;
	
КонецФункции

// Возвраты ИП
Функция ПодготовитьТаблицуВыручкиОтРеализацииИП(ТаблицаВыручки, ТаблицаРеквизиты) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаВыручки)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаМПЗ	= ТаблицаВыручки.Скопировать();
	ТаблицаМПЗ.Колонки.Добавить("НоменклатурнаяГруппа",		Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаМПЗ.Колонки.Добавить("Продукция",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМПЗ.Колонки.Добавить("СчетЗатрат",				Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаМПЗ.Колонки.Добавить("ПринятиеКналоговомуУчету",	Новый ОписаниеТипов("Булево"));
	ТаблицаМПЗ.Колонки.Добавить("СтатьяЗатрат",				Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТаблицаМПЗ.Колонки.Добавить("ВидРасходовНУ",			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасходовНУ"));
	ТаблицаМПЗ.Колонки.Добавить("Партия",					Документы.ТипВсеСсылки());
	ТаблицаМПЗ.Колонки.Добавить("ВидДеятельностиДляНалоговогоУчетаЗатрат",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиДляНалоговогоУчетаЗатрат"));
	
	ТаблицаМПЗ.Колонки.СуммаРуб.Имя		= "Сумма";
	ТаблицаМПЗ.Колонки.СуммаНДСРуб.Имя	= "НДС";
	
	ВестиУчетПоВидамДеятельностиИП	= УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Реквизиты.Организация, Реквизиты.Период);
	Если ВестиУчетПоВидамДеятельностиИП Тогда
		ТаблицаМПЗ.ЗагрузитьКолонку(ТаблицаМПЗ.ВыгрузитьКолонку("Субконто"), "НоменклатурнаяГруппа");
	Иначе
		ОсновнаяНоменклатурнаяГруппа	= УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Реквизиты.Организация, Реквизиты.Период);
		ТаблицаМПЗ.ЗаполнитьЗначения(ОсновнаяНоменклатурнаяГруппа, "НоменклатурнаяГруппа");
	КонецЕсли;
	
	ТаблицаМПЗ.ЗаполнитьЗначения(Истина, "ПринятиеКналоговомуУчету");
	
	Возврат ТаблицаМПЗ;

КонецФункции

// Формирование движений НДС при возврате товаров в рознице
Процедура СформироватьДвиженияНДСВозвратТоваровВРознице(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаДвижений, ТаблицаНомераГТД, ТаблицаПартииВозвратовРаздельныйУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыНДСВозвратТоваровВРознице(
		ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаДвижений, ТаблицаНомераГТД, ТаблицаРеквизиты);
		
	Реквизиты = Параметры.Реквизиты[0];
	
	УчетНДСПереопределяемый.СформироватьПроводкиПоступлениеГТД(Параметры.НомераГТД, Реквизиты, Движения, Отказ);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСПартиями = ПодготовитьТаблицуСписанныхПартийНДСВозвратТоваровВРознице(Реквизиты, Параметры);
	
	Если ТаблицаСПартиями.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	УчетНДС.ЗаполнитьВидыЦенностей(
		ТаблицаСПартиями, 
		Перечисления.ВидыЦенностей.Возврат, 
		"СчетУчета");

	ШаблонСодержания = НСтр("ru = 'Возврат %1 от покупателя'");
	
	Для каждого СтрокаТаблицы Из ТаблицаСПартиями Цикл
		СтрокаТаблицы.Содержание  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
			БухгалтерскийУчетПовтИсп.НазваниеОбъектаПоСчетуУчета(СтрокаТаблицы.СчетУчета));
		
		// СуммаРуб не должна включать НДС - как в других документах поступления
		СтрокаТаблицы.СуммаРуб = СтрокаТаблицы.СуммаРуб - СтрокаТаблицы.СуммаНДСРуб;
	КонецЦикла;
	
	// Бухгалтерские проводки
	Если ТаблицаСПартиями.Итог("СуммаНДСРуб") <> 0 Тогда
		СформироватьПроводкиНДСВозвратТоваровВРознице(ТаблицаСПартиями, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
	// Движения по начислению НДС
	// НДС предъявленный.
	Если Параметры.ТаблицаДвижений.Итог("НДС") <> 0 Тогда 
		Если Не РаздельныйУчетНДСНаСчете19
			Или Не Реквизиты.ПредъявленНДСКВычету0 Тогда
			
			СформироватьДвиженияНДСПредъявленныйВычетНДС(Параметры.ТаблицаДвижений, Движения, Истина, Отказ);
			СформироватьДвиженияНДСПредъявленныйВычетНДС(Параметры.ТаблицаДвижений, Движения, Ложь, Отказ);
			
			Движения.НДСПредъявленный.Записывать = Истина;
			
		КонецЕсли;
		
		// НДС записи книги покупок.
		СформироватьДвиженияНДСЗаписиКнигиПокупок(Параметры.ТаблицаДвижений, Движения, Отказ);
	КонецЕсли;
	
	// Движения по партионному учету НДС
	Если РаздельныйУчетНДСНаСчете19 Тогда
		УчетНДСПереопределяемый.СформироватьДвиженияВозвратТоваровВРознице(ТаблицаСПартиями, ТаблицаПартииВозвратовРаздельныйУчет, Реквизиты, Движения, Отказ);
	ИначеЕсли РаздельныйУчетНДС Тогда
		УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(
			ТаблицаСПартиями, Реквизиты, Движения, Отказ);
	КонецЕсли;
		
	// Запишем движения, чтобы при реализации возвращенных товаров правильно определились партии
	Движения.НДСРаздельныйУчет.Записать();
	Движения.НДСПоПриобретеннымЦенностям.Записать();
	
	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыНДСВозвратТоваровВРознице(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаДвижений, ТаблицаНомераГТД, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Склад,"                          // <СправочникСсылка.Склады>
	+ "СчетУчетаНДС,"                   // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов,"           // <СправочникСсылка.Валюты>
	+ "ПредъявленНДСКВычету0,"           // Булево
	+ "ТипСклада"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// При возврате не может быть агентского НДС (всегда УчетАгентскогоНДС = Ложь)
	Параметры.Реквизиты.Колонки.Добавить("УчетАгентскогоНДС", Новый ОписаниеТипов("Булево"));
	// При возврате нет возможности включить НДС в стоимость (всегда НДСВключенВСтоимость = Ложь)
	Параметры.Реквизиты.Колонки.Добавить("НДСВключенВСтоимость", Новый ОписаниеТипов("Булево"));
	
	Реквизиты = Параметры.Реквизиты[0];

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"             // <СправочникСсылка.Номенклатура>
	+ "СуммаРуб,"                 // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"           // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"              // <Число,15,2> - сумма НДС в рублях
	+ "СчетУчета,"                // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетДоходов,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДСпоРеализации," // <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто,"                 // <Характеристика.ВидыСубконтоХозрасчетные> - субконто по счету учета НДС по реализации
	+ "Подразделение,"            // <Ссылка на справочник подразделений>
	+ "СтавкаНДС,"                // <ПеречислениеСсылка.СтавкиНДС>
	+ "СпособУчетаНДС,"           // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "Количество,"               // <Число,15,3>
	+ "Сделка"                    // <ДокументСсылка> - документ, которым были отгружены возвращаемые товары
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Товары

	// Реквизиты табличной части
	СписокОбязательныхКолонок = ""
		+ "СчетФактура,"                // <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
		+ "Поставщик,"                  // <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
		+ "ДоговорКонтрагента,"
		+ "НДС,"                        // <Число> - сумма НДС;
		+ "СуммаБезНДС,"                // <Число> - сумма без НДС по определенной ставке НДС;
		+ "СтавкаНДС,"                  // <ПеречислениеСсылка.СтавкаНДС> - ставка НДС;
		+ "СчетУчетаНДС,"               // <ПланСчетовСсылка.Хозрасчетный> - счет, на котором учитывается НДС
		+ "ДокументОтгрузки,"
		+ "ДокументОплаты,"
		+ "Состояние,"
		+ "Событие,"
		+ "ДатаСобытия,"
		+ "ДатаОплаты,"
		+ "НомерДокументаОплаты,"
		+ "ДатаДокументаОплаты,"
		+ "КодВидаОперации,"
		+ "ВидЦенности,"
		+ "ЗаписьДополнительногоЛиста,"
		+ "КорректируемыйПериод,"
		+ "ИсправленныйСчетФактура,"
		+ "Содержание,"
		+ "Период,"                     // <Дата> формирования движений (период)
		+ "Регистратор,"                // <ДокументСсылка.СчетФактураПолученный> - проводимый документ
		+ "Организация";                // <СправочникСсылка.Организации>
	
	
	Параметры.Вставить("ТаблицаДвижений", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДвижений, СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"				// <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"					// <ПланСчетовСсылка.Хозрасчетный>
	+ "Партия," 					// 
	+ "Сделка,"						// <ДокументСсылка> - документ, которым были отгружены возвращаемые товары
	+ "Количество"					// <Число,15,3>
	;	
	
	Параметры.Вставить("СписанныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
		
	
	Параметры.Товары.Свернуть(
		"Сделка,Номенклатура,СчетУчета,СчетДоходов,СчетУчетаНДСпоРеализации,Субконто,Подразделение,СтавкаНДС,СпособУчетаНДС", 
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,Количество");

	Параметры.Товары.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	// Документом-основанием счета-фактуры может быть или сам документ возврата,
	// или документ отгрузки (если он указан и покупателем не выставляется счет-фактура на возврат)
	Параметры.Товары.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Товары.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
	Для каждого СтрокаТовары Из Параметры.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.Сделка) Тогда
			СтрокаТовары.СчетФактура = СтрокаТовары.Сделка;
		Иначе
			СтрокаТовары.СчетФактура = Реквизиты.Регистратор;
		КонецЕсли;
	КонецЦикла; 
	// Склад берем из шапки документа возврата
	Параметры.Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Склад, "Склад");
	// Счет учета НДС по приобретенным ценностям берем из шапки документа возврата
	Параметры.Товары.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.СчетУчетаНДС, "СчетУчетаНДС");
	
	// Подготовка таблицы НомераГТД

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество,"	          // <Число,15,3>
	+ "Содержание"	          // <Строка,150>
	;
	Параметры.Вставить("НомераГТД", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНомераГТД, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуСписанныхПартийНДСВозвратТоваровВРознице(Реквизиты, Параметры)
	
	// В списанных товарах храним бухгалтерскую аналитику на которую возвращают товар.
	ТаблицаСписанныеТовары = Параметры.СписанныеТовары.Скопировать(,"СчетУчета,Номенклатура,Партия, Сделка, Количество");
	ТаблицаСписанныеТовары.Свернуть("СчетУчета,Номенклатура,Партия, Сделка", "Количество");
	ТаблицаСписанныеТовары.Индексы.Добавить("Сделка");
	
	УчетТоваров.ПроставитьСторноТаблицы(ТаблицаСписанныеТовары, Новый Структура("Количество"), -1);

	ТаблицаСПартиями = Параметры.Товары.СкопироватьКолонки();
	
	// Таблица содержит данные табличной части "Возвраты" документа.
	Для каждого СтрокаВозврата Из Параметры.Товары Цикл
	
		СтруктураОтбора = Новый Структура("Номенклатура, СчетУчета, Сделка");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаВозврата);
		НайденныеСтроки = ТаблицаСписанныеТовары.НайтиСтроки(СтруктураОтбора);
		
		ТаблицаСТекущейПартией = Параметры.Товары.СкопироватьКолонки();
		
		// В случае партионного учета - один товар может возвращаться на несколько партий БУ. 
		Для каждого СтрокаСписания Из НайденныеСтроки Цикл
			
			Если СтрокаСписания.Количество <> 0 Тогда
				КоличествоПоПартии = Мин(СтрокаСписания.Количество, СтрокаВозврата.Количество);
			
				НоваяСтрока = ТаблицаСТекущейПартией.Добавить();
				
				// Реквизиты Количество,СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб заполним позже данными из таблицы возвратов.
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВозврата, ,"Количество,СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб");
				
				// Партия возврата должна совпадать с партией из проводок по БУ.
				НоваяСтрока.Партия     = СтрокаСписания.Партия;
				НоваяСтрока.Количество = КоличествоПоПартии;
				
				СтрокаСписания.Количество = СтрокаСписания.Количество - НоваяСтрока.Количество;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		// Если возвращаем товар по нескольким партиям из БУ, распределим суммы возврата пропорционально количеству.
		Если ТаблицаСТекущейПартией.Количество() <> 0 Тогда
			
			МассивРаспределенияСуммаРуб = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаВозврата.СуммаРуб, ТаблицаСТекущейПартией.ВыгрузитьКолонку("Количество"));
			
			Если МассивРаспределенияСуммаРуб <> Неопределено Тогда
				ТаблицаСТекущейПартией.ЗагрузитьКолонку(МассивРаспределенияСуммаРуб ,"СуммаРуб");
			Иначе	
				ТаблицаСТекущейПартией.ЗаполнитьЗначения(0, "СуммаРуб");
			КонецЕсли;
			
			МассивРаспределенияСуммаБезНДСРуб = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаВозврата.СуммаБезНДСРуб, ТаблицаСТекущейПартией.ВыгрузитьКолонку("Количество"));
				
			Если МассивРаспределенияСуммаБезНДСРуб <> Неопределено Тогда
				ТаблицаСТекущейПартией.ЗагрузитьКолонку(МассивРаспределенияСуммаБезНДСРуб ,"СуммаБезНДСРуб");
			Иначе	
				ТаблицаСТекущейПартией.ЗаполнитьЗначения(0, "СуммаБезНДСРуб");
			КонецЕсли;
				
			МассивРаспределенияСуммаНДСРуб = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаВозврата.СуммаНДСРуб, ТаблицаСТекущейПартией.ВыгрузитьКолонку("Количество"));
			
			Если МассивРаспределенияСуммаНДСРуб <> Неопределено Тогда
				ТаблицаСТекущейПартией.ЗагрузитьКолонку(МассивРаспределенияСуммаНДСРуб, "СуммаНДСРуб");
			Иначе
				ТаблицаСТекущейПартией.ЗаполнитьЗначения(0, "СуммаНДСРуб");
			КонецЕсли; 
			
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаСТекущейПартией, ТаблицаСПартиями);
	
		КонецЕсли; 
	
	КонецЦикла; 
	
	ТаблицаСПартиями.Свернуть(
		"Номенклатура,СчетУчета,СчетДоходов,СчетУчетаНДСпоРеализации,Субконто,Подразделение,СтавкаНДС,Партия,
		|Содержание,СчетФактура,Склад,СчетУчетаНДС,СпособУчетаНДС, Сделка", 
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,Количество");
	
	Возврат ТаблицаСПартиями;

КонецФункции

Процедура СформироватьПроводкиНДСВозвратТоваровВРознице(Товары, Реквизиты, Движения, Отказ)

	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Проводки по НДС восстанавливаемом при возврате
	// или Дт 68.02 Кт 90.03

	ТаблицаВыручки = Товары.Скопировать(,
		"Сделка, Номенклатура,Содержание,СчетУчетаНДСПоРеализации,СтавкаНДС,Субконто,Подразделение,СуммаНДСРуб,СпособУчетаНДС");

	// Оставляем номенклатуру только для проводок по 91 счету
	ВидСубконтоРеализуемыеАктивы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы;
	Для каждого СтрокаТаблицы Из ТаблицаВыручки Цикл
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчетаНДСПоРеализации);
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто2 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто3 <> ВидСубконтоРеализуемыеАктивы Тогда
			СтрокаТаблицы.Номенклатура = Неопределено;
		КонецЕсли;
	КонецЦикла;

	ТаблицаВыручки.Свернуть(
		"Сделка, Номенклатура,Содержание,СчетУчетаНДСПоРеализации,СтавкаНДС,Субконто,Подразделение,СтавкаНДС,СпособУчетаНДС", "СуммаНДСРуб");
		
	Для каждого СтрокаВыручки Из ТаблицаВыручки Цикл

		Если СтрокаВыручки.СуммаНДСРуб = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаВыручки.СуммаНДСРуб;
		Проводка.Содержание  = СтрокаВыручки.Содержание;
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог); // Для счета 68.02
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаВыручки.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", Реквизиты.Регистратор); // Для счета 19.03
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаВыручки.Подразделение;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = -СтрокаВыручки.СуммаНДСРуб;
		Проводка.Содержание  = СтрокаВыручки.Содержание;
		
		Проводка.СчетДт = СтрокаВыручки.СчетУчетаНДСПоРеализации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			1, СтрокаВыручки.Субконто);                       // Для счетов 90.03 и 91.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СтавкиНДС", СтрокаВыручки.СтавкаНДС);            // Для счета 90.03
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"РеализуемыеАктивы", СтрокаВыручки.Номенклатура); // Для счета 91.02
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаВыручки.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", Реквизиты.Регистратор); // Для счета 19.03
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаВыручки.Подразделение;
		КонецЕсли;
		
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйВычетНДС(ТаблицаДвижений, Движения, Списание = Ложь, Отказ)

	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Если Списание Тогда 
			Запись = Движения.НДСПредъявленный.ДобавитьПриход();
		Иначе
			Запись = Движения.НДСПредъявленный.ДобавитьРасход();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		
		Запись.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС;
		Запись.НДС         = СтрокаТаблицы.НДС;
		
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПокупок(ДанныеДвижений, Движения, Отказ)

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Запись = Движения.НДСЗаписиКнигиПокупок.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);

	КонецЦикла;


КонецПроцедуры

Функция ПодготовитьТаблицуСобственныеТоварыУслугиНДСВозврат(СобственныеТоварыУслугиНДС, ТоварыНДС) Экспорт
	
	Параметры = ПодготовитьПараметрыТаблицыСобственныеТоварыУслугиНДСВозврат(СобственныеТоварыУслугиНДС, ТоварыНДС);
	
	Параметры.СобственныеТоварыУслугиНДС.Колонки.Добавить("СпособУчетаНДС",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
		
	Параметры.СобственныеТоварыУслугиНДС.Колонки.Добавить("СчетФактура",
		Документы.ТипВсеСсылки());
		
	Параметры.ТоварыНДС.Индексы.Добавить("ИмяСписка,НомерСтроки");
	
	Для Каждого СтрокаТаблицы Из Параметры.СобственныеТоварыУслугиНДС Цикл
		
		СтруктураОтбора = Новый Структура("ИмяСписка, НомерСтроки");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
		НайденныеСтроки = Параметры.ТоварыНДС.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, НайденныеСтроки[0],"СпособУчетаНДС, СчетФактура");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Параметры.СобственныеТоварыУслугиНДС;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСобственныеТоварыУслугиНДСВозврат(ТаблицаСобственныеТоварыУслугиНДС, ТаблицаТоварыНДС)

	Параметры = Новый Структура;

	// Подготовка таблицы СобственныеТоварыУслугиНДС

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Сделка,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаНДСРуб,"
	+ "СуммаБУ,"
	+ "СуммаНУ,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "Контрагент,"
	+ "Покупатель,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение,"
	+ "ЭтоКомиссия,"
	+ "ЭтоУслуга,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "ДокументРасчетовСКомитентом,"
	+ "ДатаРеализации,"
	+ "СчетРасчетовСКомитентом,"
	+ "СчетАвансовСКомитентом,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "СуммаРасчетовСКомитентом,"
	+ "СуммаПоступленияОтКомитента,"
	+ "СуммаБезНДСРуб"
	;
	Параметры.Вставить("СобственныеТоварыУслугиНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСобственныеТоварыУслугиНДС, СписокОбязательныхКолонок));

	// Подготовка таблицы ТоварыНДС 
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка," 
	+ "НомерСтроки," 
	+ "СпособУчетаНДС," 
	+ "СчетФактура" 
	;
	Параметры.Вставить("ТоварыНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыНДС, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияВозвратПоРегистрамУСН(
				ТаблицаРасходовДляУСН,
				ТаблицаРеквизиты,
				СуммаСторноРасходов,
				СуммаСторноНДС,
				СуммаПризнанияНДС,
				Движения, Отказ) Экспорт

	Если НЕ ЗначениеЗаполнено(ТаблицаРеквизиты) 
		ИЛИ НЕ ЗначениеЗаполнено(ТаблицаРасходовДляУСН) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПроведенияВозвратПоРегистрамУСН(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Если НЕ УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;

	Если ТаблицаРасходовДляУСН <> Неопределено И ТаблицаРасходовДляУСН.Количество() > 0 Тогда
		// По регистру РасходыПриУСН
		СформироватьДвиженияВозвратПоДокументуСоСделкойУСН(ТаблицаРасходовДляУСН, Движения, Отказ);
		// По регистру КУДиР
		СформироватьДвиженияКУДиР(ТаблицаРеквизиты, СуммаСторноРасходов, СуммаПризнанияНДС, СуммаСторноНДС, Движения, Отказ);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыПроведенияВозвратПоРегистрамУСН(ТаблицаРеквизиты)
	Параметры = Новый Структура;
	
	// Подготовка таблицы реквизитов
	СписокОбязательныхКолонок = ""
	+ "Организация,"		 // <Справочник.Организации>
	+ "Регистратор,"		 // <ДокументСсылка.ОтчетОРозничныхПродажах>
	+ "Период"		 // <Дата>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;
КонецФункции

Процедура СформироватьДвиженияВозвратПоДокументуСоСделкойУСН(ТаблицаРасходовДляУСН, Движения, Отказ)

	Если Не ЗначениеЗаполнено(ТаблицаРасходовДляУСН) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущаяЗапись Из ТаблицаРасходовДляУСН Цикл
		НоваяЗапись = Движения.РасходыПриУСН.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекущаяЗапись);
	КонецЦикла;
	
	Движения.РасходыПриУСН.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияКУДиР(ТаблицаРеквизиты, СуммаСторноРасходов, СуммаПризнанияНДС = 0, СуммаСторноНДС = 0, Движения, Отказ)

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];

	ДвиженияКУДиР = Движения.КнигаУчетаДоходовИРасходов;

	ДвиженияКУДиР.Очистить();

	Если СуммаПризнанияНДС <> 0 Тогда
		СтрокаКниги  = ДвиженияКУДиР.Добавить();
		СтрокаКниги.Организация     = Реквизиты.Организация;
		СтрокаКниги.СтрокаДокумента = 0;
		СтрокаКниги.Период          = Реквизиты.Период;
		СтрокаКниги.Содержание      = НСтр("ru = 'При возврате от покупателя признаны расходы, сторнированные не основании реализации (признаны расходы на уплату НДС).'");
		СтрокаКниги.Графа7          = СуммаПризнанияНДС;
		СтрокаКниги.НДС             = 0;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(
			Реквизиты.Регистратор, Реквизиты.Организация);
	КонецЕсли;

	Если СуммаСторноРасходов <> 0 Тогда
		СтрокаКниги  = ДвиженияКУДиР.Добавить();
		СтрокаКниги.Организация     = Реквизиты.Организация;
		СтрокаКниги.СтрокаДокумента = 0;
		СтрокаКниги.Период          = Реквизиты.Период;
		СтрокаКниги.Содержание      = НСтр("ru = 'Расходы уменьшены на стоимость товаров, возвращенных покупателем.'");
		СтрокаКниги.Графа7          = - СуммаСторноРасходов;
		СтрокаКниги.НДС             = - СуммаСторноНДС;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(
			Реквизиты.Регистратор, Реквизиты.Организация);
	КонецЕсли;

	ДвиженияКУДиР.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияКУДИРВозвратПокупателя(ТаблицаДвижений, ТаблицаДвиженийПатент, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТаблицаРеквизиты)
		ИЛИ (НЕ ЗначениеЗаполнено(ТаблицаДвижений)
		И НЕ ЗначениеЗаполнено(ТаблицаДвиженийПатент)) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыКнигаУчетаДоходовИРасходов(ТаблицаДвижений, ТаблицаДвиженийПатент, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Не УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;

	Для каждого Движение Из Параметры.ТаблицаДвижений Цикл
		СтрокаКниги = Движения.КнигаУчетаДоходовИРасходов.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаКниги, Реквизиты);
		ЗаполнитьЗначенияСвойств(СтрокаКниги, Движение);
		
		СтрокаКниги.РеквизитыПервичногоДокумента = УчетУСН.РеквизитыПервичногоДокументаДляКУДиР(
			Реквизиты.Период, Движение.НомерФискальногоЧека, Реквизиты.Период);
	КонецЦикла;
		
	Для каждого Движение Из Параметры.ТаблицаДвиженийПатент Цикл
		СтрокаКниги = Движения.КнигаУчетаДоходовПатент.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаКниги, Реквизиты);
		ЗаполнитьЗначенияСвойств(СтрокаКниги, Движение);
		
		СтрокаКниги.РеквизитыПервичногоДокумента = УчетУСН.РеквизитыПервичногоДокументаДляКУДиР(
			Реквизиты.Период, Движение.НомерФискальногоЧека, Реквизиты.Период);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Параметры.ТаблицаДвижений) Тогда
		Движения.КнигаУчетаДоходовИРасходов.Записывать = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ТаблицаДвиженийПатент) Тогда
		Движения.КнигаУчетаДоходовПатент.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыКнигаУчетаДоходовИРасходов(ТаблицаДвижений, ТаблицаДвиженийПатент, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Графа4,"		 // <Число,15,2>
	+ "Графа5,"		 // <Число,15,2>
	+ "Графа6,"		 // <Число,15,2>
	+ "Графа7,"		 // <Число,15,2>
	+ "Содержание,"  // <Строка>
	+ "НДС,"			 // <Число,15,2>
	+ "ДоходЕНВД,"		 // <Дата> - дата документа
	+ "ДоходТорговыйСбор," // <ДокументСсылка> - документ-регистратор движений
	+ "НомерФискальногоЧека" // <СправочникСсылка.Организации> - из документа
	;
	Параметры.Вставить("ТаблицаДвижений", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДвижений, СписокОбязательныхКолонок));
		
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Графа4,"		 // <Число,15,2>
	+ "НомерФискальногоЧека," // <СправочникСсылка.Организации> - из документа
	+ "Содержание"  // <Строка>
	;
	Параметры.Вставить("ТаблицаДвиженийПатент", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДвиженийПатент, СписокОбязательныхКолонок));

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"		 // <Дата> - дата документа
	+ "Регистратор," // <ДокументСсылка> - документ-регистратор движений
	+ "Организация," // <СправочникСсылка.Организации> - из документа
	+ "Патент"		 // <Число,15,2>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ЗаполнитьПартииВозвратаТекущейСмены(ТаблицаВозвраты, ТаблицаРеализации, Отказ) Экспорт
	ТаблицаРезультата = ТаблицаВозвраты.Скопировать(Новый Структура("ВозвратТекущейСмены", Ложь));
	
	ТаблицаОтгрузок      = ТаблицаРеализации.Скопировать();
	
	ВозвратыТекущейСмены = ТаблицаВозвраты.НайтиСтроки(Новый Структура("ВозвратТекущейСмены", Истина));
	Для каждого СтрокаВозврата Из ВозвратыТекущейСмены Цикл

		КоличествоНеПодобраноПартии = СтрокаВозврата.Количество;

		ОтгруженныеПартии = ТаблицаОтгрузок.НайтиСтроки(Новый Структура("Номенклатура, СчетУчета", СтрокаВозврата.Номенклатура, СтрокаВозврата.СчетУчета));
		Для каждого СтрокаОтгрузки Из ОтгруженныеПартии Цикл
			
			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВозврата);
			НоваяСтрока.Партия = СтрокаОтгрузки.Партия;
			
			КоличествоВозвращено = Мин(КоличествоНеПодобраноПартии, СтрокаОтгрузки.Количество);

			Если СтрокаОтгрузки.Количество = КоличествоВозвращено Тогда
				// Текущий возврат в совокупности с предыдущими привел к полному возврату всей партии.
				НоваяСтрока.Количество         = КоличествоВозвращено;
				НоваяСтрока.СуммаСписания      = СтрокаОтгрузки.СуммаСписания;
				НоваяСтрока.СуммаСписанияНУ    = СтрокаОтгрузки.СуммаСписанияНУ;
				НоваяСтрока.СуммаСписанияПР    = СтрокаОтгрузки.СуммаСписанияПР;
				НоваяСтрока.СуммаСписанияВР    = СтрокаОтгрузки.СуммаСписанияВР;
				НоваяСтрока.СуммаКорСписанияНУ = НоваяСтрока.СуммаСписанияНУ;
				НоваяСтрока.СуммаКорСписанияПР = НоваяСтрока.СуммаСписанияПР;
				НоваяСтрока.СуммаКорСписанияВР = НоваяСтрока.СуммаСписанияВР;
				
			ИначеЕсли КоличествоВозвращено > СтрокаОтгрузки.Количество Тогда
				// Текущий возврат больше, чем очередная партия, т.е. фактически возвращают несколько разных партий.
				НоваяСтрока.Количество         = СтрокаОтгрузки.Количество;
				НоваяСтрока.СуммаСписания      = СтрокаОтгрузки.СуммаСписания;
				НоваяСтрока.СуммаСписанияНУ    = СтрокаОтгрузки.СуммаСписанияНУ;
				НоваяСтрока.СуммаСписанияПР    = СтрокаОтгрузки.СуммаСписанияПР;
				НоваяСтрока.СуммаСписанияВР    = СтрокаОтгрузки.СуммаСписанияВР;
				НоваяСтрока.СуммаКорСписанияНУ = СтрокаОтгрузки.СуммаСписанияНУ;
				НоваяСтрока.СуммаКорСписанияПР = СтрокаОтгрузки.СуммаСписанияПР;
				НоваяСтрока.СуммаКорСписанияВР = СтрокаОтгрузки.СуммаСписанияВР;
			Иначе
				// Частичный возврат партии.
				НоваяСтрока.Количество         = КоличествоВозвращено;
				Коэфф                          = КоличествоВозвращено / СтрокаОтгрузки.Количество;
				НоваяСтрока.СуммаСписания      = Окр(СтрокаОтгрузки.СуммаСписания   * Коэфф, 2);
				НоваяСтрока.СуммаСписанияНУ    = Окр(СтрокаОтгрузки.СуммаСписанияНУ * Коэфф, 2);
				НоваяСтрока.СуммаСписанияПР    = Окр(СтрокаОтгрузки.СуммаСписанияПР * Коэфф, 2);
				НоваяСтрока.СуммаСписанияВР    = Окр(СтрокаОтгрузки.СуммаСписанияВР * Коэфф, 2);
				НоваяСтрока.СуммаКорСписанияНУ = НоваяСтрока.СуммаСписанияНУ;
				НоваяСтрока.СуммаКорСписанияПР = НоваяСтрока.СуммаСписанияПР;
				НоваяСтрока.СуммаКорСписанияВР = НоваяСтрока.СуммаСписанияВР;
			КонецЕсли;
			
			КоличествоНеПодобраноПартии = КоличествоНеПодобраноПартии - НоваяСтрока.Количество;
			
			СтрокаОтгрузки.Количество       = СтрокаОтгрузки.Количество - НоваяСтрока.Количество;
			СтрокаОтгрузки.СуммаСписания    = СтрокаОтгрузки.СуммаСписания - НоваяСтрока.СуммаСписания;
			СтрокаОтгрузки.СуммаСписанияНУ  = СтрокаОтгрузки.СуммаСписанияНУ - НоваяСтрока.СуммаСписанияНУ;
			СтрокаОтгрузки.СуммаСписанияПР  = СтрокаОтгрузки.СуммаСписанияПР - НоваяСтрока.СуммаСписанияПР;
			СтрокаОтгрузки.СуммаСписанияВР  = СтрокаОтгрузки.СуммаСписанияВР - НоваяСтрока.СуммаСписанияВР;

			Если КоличествоНеПодобраноПартии = 0 Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;

		// Если в документе указан документ реализации по которому было отгружено больше,
		// чем возвращается, то эту разницу отнесем на пустую партию.
		Если КоличествоНеПодобраноПартии > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Документом ""%1"" было реализовано ""%2"" на ""%3"" ед. меньше, чем возвращается.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				СокрЛП(СтрокаВозврата.Сделка),
				СтрокаВозврата.Номенклатура,
				КоличествоНеПодобраноПартии);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				СтрокаВозврата.Сделка,
				"Возвраты"+"[" + Формат(СтрокаВозврата.НомерСтроки - 1, "ЧН=0; ЧГ=")+"].Количество",
				"Объект",
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаВозвраты = ТаблицаРезультата;
КонецПроцедуры

#КонецОбласти

//ИнтеграцияГИСМ
#Область ДействияПриОбменеГИСМ

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	НовыйСтатус        = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	ИспользоватьАвтоматическийОбмен = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхГИСМ");
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.КПередаче;
		Если ИспользоватьАвтоматическийОбмен Тогда
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием;
		Иначе
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен;
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(
		ДокументСсылка,
		НовыйСтатус,
		ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	НовыйСтатус     = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.Передано;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ПринятоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(ДокументСсылка, НовыйСтатус, ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

#КонецОбласти

#Область СообщенияГИСМ

Функция СообщениеКПередачеXML(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		Возврат ОтчетОРозничныхПродажахXML(ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		Возврат ИнтеграцияГИСМВызовСервера.ЗапросКвитанцииОФиксацииПоСсылкеXML(ДокументСсылка, Перечисления.ОперацииОбменаГИСМ.ПередачаДанных);
	КонецЕсли;
	
КонецФункции

Функция ОтчетОРозничныхПродажахXML(ДокументСсылка) Экспорт
	
	Если ИнтеграцияГИСМ.ИспользоватьВозможностиВерсии("2.41") Тогда
		Возврат ОтчетОРозничныхПродажахXML2_41(ДокументСсылка);
	Иначе
		Возврат ОтчетОРозничныхПродажахXML2_40(ДокументСсылка);
	КонецЕсли;
	
КонецФункции

Функция ОтчетОРозничныхПродажахXML2_40(ДокументСсылка) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Дата КАК Дата,
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	ОтчетОРозничныхПродажах.Организация КАК Организация,
	|	ОтчетОРозничныхПродажах.ПодразделениеОрганизации КАК Подразделение,
	|	ОтчетОРозничныхПродажах.Номер КАК Номер
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО ОтчетОРозничныхПродажах.Ссылка = ВременнаяТаблица.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.СуммаВключаетНДС
	|			ТОГДА Товары.Сумма
	|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
	|	КОНЕЦ КАК Стоимость,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	КонтрольныезнакиГИСМ.Код КАК НомерКиЗ
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрольныеЗнакиГИСМ КАК КонтрольныезнакиГИСМ
	|		ПО (КонтрольныезнакиГИСМ.Ссылка = Товары.КиЗ_ГИСМ)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка = Результат[1].Выбрать();
	Товары = Результат[2].Выгрузить();
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = СтрШаблон(НСтр("ru = 'Документ %1'"), ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОгранизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Шапка.Подразделение);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка, НомерВерсии);
	
	ИмяТипа   = "query";
	ИмяПакета = "retail_sale";
	
	ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	ОтчетОРозничныхПродажах = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
	ОтчетОРозничныхПродажах.action_id  = ОтчетОРозничныхПродажах.action_id;
	
	Попытка
		ОтчетОРозничныхПродажах.sender_gln = РеквизитыОгранизации.GLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка);
	КонецПопытки;
	
	ОтчетОРозничныхПродажах.sales = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах, "sales");
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах.sales, "detail");
		НоваяСтрока.sign_num = СтрокаТЧ.НомерКиЗ;
		НоваяСтрока.cost     = СтрокаТЧ.Стоимость;
		Если ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			НоваяСтрока.vat_value = СтрокаТЧ.СуммаНДС;
		КонецЕсли;
		
		НоваяСтрока.doc_type   = 4;
		НоваяСтрока.doc_name   = НСтр("ru = 'Отчет о розничных продажах'");
		НоваяСтрока.doc_number = Шапка.Номер;
		
		ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
			НоваяСтрока,
			"sale_time",
			Шапка.Дата,
			ХранилищеВременныхДат);
		
		ОтчетОРозничныхПродажах.sales.detail.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ПередачаДанных.version    = ПередачаДанных.version;
	ПередачаДанных[ИмяПакета] = ОтчетОРозничныхПродажах;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
	ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Шапка.Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
	СообщениеXML.Документ     = ДокументСсылка;
	СообщениеXML.Версия       = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ОтчетОРозничныхПродажахXML2_41(ДокументСсылка) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Дата КАК Дата,
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	ОтчетОРозничныхПродажах.Организация КАК Организация,
	|	ОтчетОРозничныхПродажах.ПодразделениеОрганизации КАК Подразделение,
	|	ОтчетОРозничныхПродажах.Номер КАК Номер
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО ОтчетОРозничныхПродажах.Ссылка = ВременнаяТаблица.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.СуммаВключаетНДС
	|			ТОГДА Товары.Сумма
	|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
	|	КОНЕЦ КАК Стоимость,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	КонтрольныезнакиГИСМ.Код КАК НомерКиЗ
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрольныеЗнакиГИСМ КАК КонтрольныезнакиГИСМ
	|		ПО (КонтрольныезнакиГИСМ.Ссылка = Товары.КиЗ_ГИСМ)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка = Результат[1].Выбрать();
	Товары = Результат[2].Выгрузить();
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОгранизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Шапка.Подразделение);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка, НомерВерсии);
	
	ИмяТипа   = "query";
	ИмяПакета = "retail_sale";
	
	ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	ОтчетОРозничныхПродажах = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
	ОтчетОРозничныхПродажах.action_id  = ОтчетОРозничныхПродажах.action_id;
	
	Попытка
		ОтчетОРозничныхПродажах.sender_gln = РеквизитыОгранизации.GLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка);
	КонецПопытки;
	
	ОтчетОРозничныхПродажах.sales = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах, "sales");
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах.sales, "detail");
		
		НоваяСтрока.sign_num   = СтрокаТЧ.НомерКиЗ;
		НоваяСтрока.cost       = СтрокаТЧ.Стоимость;
		Если ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			НоваяСтрока.vat_value = СтрокаТЧ.СуммаНДС;
		КонецЕсли;
		НоваяСтрока.sale_time  = Шапка.Дата;
		
		НоваяСтрока.sale_docs = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(НоваяСтрока, "sale_docs");
		doc = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(НоваяСтрока.sale_docs, "doc");
		doc.doc_type   = 1;
		doc.doc_name   = НСтр("ru = 'Чек'");
		doc.doc_number = НСтр("ru = 'б/н'");
		doc.doc_date   = Шапка.Дата;
		НоваяСтрока.sale_docs.doc.Добавить(doc);
		
		ОтчетОРозничныхПродажах.sales.detail.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ПередачаДанных.version    = ПередачаДанных.version;
	ПередачаДанных[ИмяПакета] = ОтчетОРозничныхПродажах;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
	ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Шапка.Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
	СообщениеXML.Документ     = ДокументСсылка;
	СообщениеXML.Версия       = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти
//Конец ИнтеграцияГИСМ 

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Справка-отчет кассира (КМ-6)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОтчетККМ";
	КомандаПечати.Представление = НСтр("ru = 'Справка-отчет кассира (КМ-6)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	Если ПравоДоступа("Использование", Метаданные.Отчеты.РеестрДокументов) Тогда
		// Реестр документов
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Реестр";
		КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
		КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Отчет о розничных продажах""'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
		КомандаПечати.СписокФорм    = "ФормаСписка";
		КомандаПечати.Порядок       = 100;
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой КМ-6 "Справка-отчет кассира операциониста"
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьОтчетаОПродажахККМ(МассивОбъектов, ОбъектыПечати)
	
	Перем ПодразделениеОтветственныхЛиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетККМОПродажах_ОтчетККМ";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Номер КАК НомерДокумента,
	|	ОтчетОРозничныхПродажах.Дата КАК ДатаДокумента,
	|	ОтчетОРозничныхПродажах.Организация КАК Руководители,
	|	ОтчетОРозничныхПродажах.Организация,
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажах.СуммаДокумента,
	|	ОтчетОРозничныхПродажах.ВалютаДокумента,
	|	ОтчетОРозничныхПродажах.ПодразделениеОрганизации,
	|	ОтчетОРозничныхПродажах.ПодразделениеОрганизации.НаименованиеПолное КАК ПодразделениеПредставление,
	|	ОтчетОРозничныхПродажах.Оплата.(
	|		ЕСТЬNULL(СУММА(ВЫБОР
	|					КОГДА ОтчетОРозничныхПродажах.Оплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта)
	|						ТОГДА ОтчетОРозничныхПродажах.Оплата.СуммаОплаты
	|					ИНАЧЕ 0
	|				КОНЕЦ), 0) КАК ПлатежныеКарты,
	|		ЕСТЬNULL(СУММА(ВЫБОР
	|					КОГДА ОтчетОРозничныхПродажах.Оплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.БанковскийКредит)
	|						ТОГДА ОтчетОРозничныхПродажах.Оплата.СуммаОплаты
	|					ИНАЧЕ 0
	|				КОНЕЦ), 0) КАК Кредиты,
	|		ЕСТЬNULL(СУММА(ВЫБОР
	|					КОГДА ОтчетОРозничныхПродажах.Оплата.ВидОплаты.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный), ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний))
	|						ТОГДА ОтчетОРозничныхПродажах.Оплата.СуммаОплаты
	|					ИНАЧЕ 0
	|				КОНЕЦ), 0) КАК ПодарочныеСертификаты
	|	)
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		ВыборкаОплата = Шапка.Оплата.Выбрать();
		Если ВыборкаОплата.Следующий() Тогда
			ПлатежныеКарты        = ВыборкаОплата.ПлатежныеКарты;
			Кредиты               = ВыборкаОплата.Кредиты;
			ПодарочныеСертификаты = ВыборкаОплата.ПодарочныеСертификаты;
		Иначе
			ПлатежныеКарты        = 0;
			Кредиты               = 0;
			ПодарочныеСертификаты = 0;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетОРозничныхПродажах.ПФ_MXL_ОтчетККМ");
		
		// Выводим шапку накладной
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация,Шапка.ДатаДокумента);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ОрганизацияПредставление = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе);
		ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакета.Параметры.ОрганизацияИНН    = СведенияОПокупателе.ИНН;
		ОбластьМакета.Параметры.ПрограммаУчета    = "1С:Предприятие 8";
		ОбластьМакета.Параметры.НомерДокумента    = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента, Истина, Ложь);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Итого = Шапка.СуммаДокумента - Кредиты - ПлатежныеКарты - ПодарочныеСертификаты;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета.Параметры.Итого = ПлатежныеКарты;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета.Параметры.Итого = ПодарочныеСертификаты;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итог");
		СуммаИтого    = Шапка.СуммаДокумента - Кредиты;
		ОбластьМакета.Параметры.Итого = СуммаИтого;
		
		ОбластьМакета.Параметры.СуммаВыручкиПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(
			СуммаИтого - ПлатежныеКарты - ПодарочныеСертификаты,
			Шапка.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Оборот");
		
		ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
		Руководитель = Руководители.РуководительПредставление;
		
		ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
		ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжностьПредставление;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	// Проверяем, нужно ли для макета ОтчетККМ формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетККМ") Тогда

		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОтчетККМ", "Справка-отчет кассира (КМ-6)", 
			ПечатьОтчетаОПродажахККМ(МассивОбъектов, ОбъектыПечати), , "Документ.ОтчетОРозничныхПродажах.ПФ_MXL_ОтчетККМ");

	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	

КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОбновления

Процедура ОбработатьУдалениеРеквизитовТабличнойЧастиОплата() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В подчиненных узлах РИБ не выполняется, добавленные виды оплаты во всех узлах должны иметь одинаковые ссылки
		Возврат;
	КонецЕсли;
	
	// Найдем строки ТЧ "Оплата" с реквизитами, не совпадающими с данными "Вида оплаты",
	// и попробуем подобрать для них подходящие виды оплаты из существующих.
	// Если среди существующих видов оплат подходящих значений нет - создадим новые и подставим в документы
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыОплатОрганизаций.Ссылка КАК Ссылка,
	|	ВидыОплатОрганизаций.Организация,
	|	ВидыОплатОрганизаций.ТипОплаты,
	|	ВидыОплатОрганизаций.Контрагент,
	|	ВидыОплатОрганизаций.ДоговорКонтрагента,
	|	ВидыОплатОрганизаций.СчетУчетаРасчетов,
	|	ВидыОплатОрганизаций.ПроцентБанковскойКомиссии
	|ПОМЕСТИТЬ ВТ_ВидыОплаты
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	НЕ ВидыОплатОрганизаций.ЭтоГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахОплата.Ссылка КАК ДокументСсылка,
	|	ОтчетОРозничныхПродажахОплата.Ссылка.Дата КАК ДокументДата,
	|	ОтчетОРозничныхПродажахОплата.ВидОплаты КАК ДокументВидОплаты,
	|	ОтчетОРозничныхПродажахОплата.УдалитьКонтрагент КАК ДокументКонтрагент,
	|	ОтчетОРозничныхПродажахОплата.УдалитьДоговорКонтрагента КАК ДокументДоговорКонтрагента,
	|	ОтчетОРозничныхПродажахОплата.УдалитьСчетУчетаРасчетов КАК ДокументСчетУчетаРасчетов,
	|	ОтчетОРозничныхПродажахОплата.НомерСтроки КАК ДокументНомерСтроки,
	|	ОтчетОРозничныхПродажахОплата.Ссылка.Организация КАК ДокументОрганизация,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахОплата.УдалитьКонтрагент <> ВидыОплатыДокумента.Контрагент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтличаетсяКонтрагент,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахОплата.УдалитьДоговорКонтрагента <> ВидыОплатыДокумента.ДоговорКонтрагента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтличаетсяДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахОплата.УдалитьСчетУчетаРасчетов <> ВидыОплатыДокумента.СчетУчетаРасчетов
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтличаетсяСчетРасчетов,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахОплата.Ссылка.Организация <> ВидыОплатыДокумента.Организация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтличаетсяОрганизация
	|ПОМЕСТИТЬ ВТ_СтрокиСИзмененнойАналитикой
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВидыОплаты КАК ВидыОплатыДокумента
	|		ПО ОтчетОРозничныхПродажахОплата.ВидОплаты = ВидыОплатыДокумента.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплата.Ссылка.Проведен
	|	И (ОтчетОРозничныхПродажахОплата.УдалитьКонтрагент <> ВидыОплатыДокумента.Контрагент
	|				И ОтчетОРозничныхПродажахОплата.УдалитьКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ ОтчетОРозничныхПродажахОплата.УдалитьДоговорКонтрагента <> ВидыОплатыДокумента.ДоговорКонтрагента
	|				И ОтчетОРозничныхПродажахОплата.УдалитьДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ИЛИ ОтчетОРозничныхПродажахОплата.УдалитьСчетУчетаРасчетов <> ВидыОплатыДокумента.СчетУчетаРасчетов
	|				И ОтчетОРозничныхПродажахОплата.УдалитьСчетУчетаРасчетов <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ИЛИ ОтчетОРозничныхПродажахОплата.Ссылка.Организация <> ВидыОплатыДокумента.Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументСсылка КАК ДокументСсылка,
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументДата КАК ДокументДата,
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументОрганизация,
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументНомерСтроки,
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументВидОплаты,
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументКонтрагент,
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументДоговорКонтрагента,
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументСчетУчетаРасчетов,
	|	ВТ_СтрокиСИзмененнойАналитикой.ОтличаетсяКонтрагент,
	|	ВТ_СтрокиСИзмененнойАналитикой.ОтличаетсяДоговорКонтрагента,
	|	ВТ_СтрокиСИзмененнойАналитикой.ОтличаетсяСчетРасчетов,
	|	ВТ_СтрокиСИзмененнойАналитикой.ОтличаетсяОрганизация,
	|	ЕСТЬNULL(ВидыОплатыДляПоиска.Ссылка, НЕОПРЕДЕЛЕНО) КАК ВидОплатыЗамена
	|ИЗ
	|	ВТ_СтрокиСИзмененнойАналитикой КАК ВТ_СтрокиСИзмененнойАналитикой
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВидыОплаты КАК ВидыОплатыДляПоиска
	|		ПО ВТ_СтрокиСИзмененнойАналитикой.ДокументОрганизация = ВидыОплатыДляПоиска.Организация
	|			И ВТ_СтрокиСИзмененнойАналитикой.ДокументКонтрагент = ВидыОплатыДляПоиска.Контрагент
	|			И ВТ_СтрокиСИзмененнойАналитикой.ДокументДоговорКонтрагента = ВидыОплатыДляПоиска.ДоговорКонтрагента
	|			И ВТ_СтрокиСИзмененнойАналитикой.ДокументСчетУчетаРасчетов = ВидыОплатыДляПоиска.СчетУчетаРасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата УБЫВ,
	|	ДокументСсылка УБЫВ
	|ИТОГИ ПО
	|	ДокументСсылка"
	;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НовыеВидыОплаты = Новый ТаблицаЗначений;
	НовыеВидыОплаты.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ВидыОплатОрганизаций"));
	НовыеВидыОплаты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	НовыеВидыОплаты.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	НовыеВидыОплаты.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	НовыеВидыОплаты.Колонки.Добавить("СчетУчетаРасчетов", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	СчетчикКопий = Новый Соответствие;
	
	ВыборкаДокументы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		НачатьТранзакцию();
		
		ДокументОбъект = ВыборкаДокументы.ДокументСсылка.ПолучитьОбъект();
		
		ВыборкаСтроки = ВыборкаДокументы.Выбрать();
		
		Пока ВыборкаСтроки.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаСтроки.ВидОплатыЗамена) Тогда
				ДокументОбъект.Оплата[ВыборкаСтроки.ДокументНомерСтроки - 1].ВидОплаты = ВыборкаСтроки.ВидОплатыЗамена;
			Иначе
				// подбираем вид оплаты из уже созданных; если не найден - создаем новый
				Поиск = Новый Структура;
				Поиск.Вставить("Организация",        ВыборкаСтроки.ДокументОрганизация);
				Поиск.Вставить("Контрагент",         ВыборкаСтроки.ДокументКонтрагент);
				Поиск.Вставить("ДоговорКонтрагента", ВыборкаСтроки.ДокументДоговорКонтрагента);
				Поиск.Вставить("СчетУчетаРасчетов",  ВыборкаСтроки.ДокументСчетУчетаРасчетов);
				
				НайденныеСтроки = НовыеВидыОплаты.НайтиСтроки(Поиск);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					ДокументОбъект.Оплата[ВыборкаСтроки.ДокументНомерСтроки - 1].ВидОплаты = НайденныеСтроки[0].Ссылка;
				Иначе
					
					НовыйВидОплаты = ВыборкаСтроки.ДокументВидОплаты.Скопировать();
					
					Если ВыборкаСтроки.ОтличаетсяКонтрагент Тогда
						НовыйВидОплаты.Контрагент = ВыборкаСтроки.ДокументКонтрагент;
					КонецЕсли;
					Если ВыборкаСтроки.ОтличаетсяДоговорКонтрагента Тогда
						НовыйВидОплаты.ДоговорКонтрагента = ВыборкаСтроки.ДокументДоговорКонтрагента;
					КонецЕсли;
					Если ВыборкаСтроки.ОтличаетсяСчетРасчетов Тогда
						НовыйВидОплаты.СчетУчетаРасчетов = ВыборкаСтроки.ДокументСчетУчетаРасчетов;
					КонецЕсли;
					Если ВыборкаСтроки.ОтличаетсяОрганизация Тогда
						НовыйВидОплаты.Организация = ВыборкаСтроки.ДокументОрганизация;
					КонецЕсли;
					
					НовыйВидОплаты.УстановитьНовыйКод();
					
					КоличествоКопий = СчетчикКопий[ВыборкаСтроки.ДокументВидОплаты];
					Если КоличествоКопий = Неопределено Тогда
						КоличествоКопий = 1;
					Иначе
						КоличествоКопий = КоличествоКопий + 1;
					КонецЕсли;
					
					СчетчикКопий.Вставить(ВыборкаСтроки.ДокументВидОплаты, КоличествоКопий);
					
					НовыйВидОплаты.Наименование = СокрЛП(НовыйВидОплаты.Наименование)
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' (копия %1)'"), КоличествоКопий);
					
					// запишем новый вид оплаты
					Попытка
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйВидОплаты, Истина);
					Исключение
						ТекстСообщения = СтрШаблон(
							НСтр("ru = 'Не удалось создать новый вид оплаты для строки №%1 табличной части ""БезналичныеОплаты""
								|%2'"),
							ВыборкаСтроки.ДокументНомерСтроки,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ЗаписьЖурналаРегистрации(
							ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
							УровеньЖурналаРегистрации.Ошибка, 
							Метаданные.Документы.ОтчетОРозничныхПродажах,
							ВыборкаСтроки.ДокументСсылка, 
							ТекстСообщения);
						ОтменитьТранзакцию();
						ВызватьИсключение;
					КонецПопытки;
					
					ДокументОбъект.Оплата[ВыборкаСтроки.ДокументНомерСтроки - 1].ВидОплаты = НовыйВидОплаты.Ссылка;
					
					// Сохраняем сведения о добавленном виде оплаты для поиска в последующих документах
					НоваяСтрока = НовыеВидыОплаты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйВидОплаты);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		
		// записываем измененный документ
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект, Истина);
		Исключение
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось записать документ при обновлении данных о видах оплаты
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Документы.ОтчетОРозничныхПродажах,
				ВыборкаДокументы.ДокументСсылка, 
				ТекстСообщения);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаРасчетовАгентскихУслуг(Объект) Экспорт

	Для Каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
		Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетРасчетовВСтрокеАгентскойУслуги(Объект, СтрокаТаблицы);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти 


#КонецЕсли