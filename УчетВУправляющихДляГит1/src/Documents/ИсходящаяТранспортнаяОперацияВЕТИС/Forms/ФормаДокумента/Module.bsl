
&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапрещеннойЯчейкиЦвет = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыВЕТИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	ИнтеграцияВЕТИСПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект,	"ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "ТоварыСерия");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ИспользуетсяКомиссияИлиПереработка = ИнтеграцияВЕТИС.ИспользуетсяКомиссияПриЗакупкахИлиПереработкаДавальческогоСырья();
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Элементы.ТоварыПродукция.СписокВыбора.Добавить(Справочники.ПродукцияВЕТИС.ПустаяСсылка(), НСтр("ru='<Произвольная>'"));
	
	ОтборСтрок = "Все";

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ЗаписиСкладскогоЖурналаВЕТИС")Тогда 
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("ЗаписьСкладскогоЖурнала", ВыбранноеЗначение));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.ЗаписьСкладскогоЖурнала = ВыбранноеЗначение;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИмяОперации", "ТоварыЗаписьСкладскогоЖурналаДобавление");
			ДополнительныеПараметры.Вставить("ИзменяемаяСтрока", НоваяСтрока);
			ОбновитьДанные(ВыбранноеЗначение, ДополнительныеПараметры);
		КонецЕсли;
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореНоменклатуры", ЭтотОбъект);
		СобытияФормВЕТИСКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(ОписаниеОповещения, ВыбранноеЗначение,ИсточникВыбора);
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект);
		СобытияФормИСКлиентПереопределяемый.ОбработкаВыбораПодборНоменклатуры(ОписаниеОповещения, ВыбранноеЗначение,ИсточникВыбора);
		
		Если ПараметрыУказанияСерий <> Неопределено Тогда
			СобытияФормВЕТИСКлиентПереопределяемый.ОбработкаВыбораСерии(
				ЭтотОбъект, 
				ПараметрыУказанияСерий, 
				ВыбранноеЗначение,
				ИсточникВыбора);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы())
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВЕТИСВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ХозяйствующиеСубъектыВЕТИС" Тогда
		
		СписокРеквизитовОбновления = "ГрузоотправительХозяйствующийСубъект,
									 |ГрузоотправительПредприятие,
									 |ГрузополучательХозяйствующийСубъект,
									 |ГрузополучательПредприятие";
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, ,СписокРеквизитовОбновления);
		
	КонецЕсли;

	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.ВЕТИСПрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;

	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореНоменклатуры", ЭтотОбъект);
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(ОписаниеОповещения, НовыйОбъект, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Для Каждого СтрокаТЧТекущийОбъект Из ТекущийОбъект.Маршрут Цикл
		СтрокаТЧОбъект = Объект.Маршрут[ТекущийОбъект.Маршрут.Индекс(СтрокаТЧТекущийОбъект)];
		СтрокаТЧОбъект.ДанныеАдресаСтруктура = СтрокаТЧТекущийОбъект.ДанныеАдреса.Получить();
	КонецЦикла;
	
	ПриСозданииЧтенииНаСервере(Ложь);
	
	СобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Маршрут.Очистить();
	
	Для Каждого СтрокаТЧОбъект Из Объект.Маршрут Цикл
		
		СтрокаТЧТекущийОбъект = ТекущийОбъект.Маршрут.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТекущийОбъект, СтрокаТЧОбъект);
		СтрокаТЧТекущийОбъект.ДанныеАдреса = Новый ХранилищеЗначения(СтрокаТЧОбъект.ДанныеАдресаСтруктура);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого СтрокаТЧТекущийОбъект Из ТекущийОбъект.Маршрут Цикл
		СтрокаТЧОбъект = Объект.Маршрут[ТекущийОбъект.Маршрут.Индекс(СтрокаТЧТекущийОбъект)];
		СтрокаТЧОбъект.ДанныеАдресаСтруктура = СтрокаТЧТекущийОбъект.ДанныеАдреса.Получить();
	КонецЦикла;
	
	ПриСозданииЧтенииНаСервере();
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	ИнтеграцияВЕТИСПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьОбщуюФорму") Тогда
		СтандартнаяОбработка = Ложь;
		ИмяТабличнойЧасти = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьОбщуюФорму", "");
		ОбработкаОповещения = Новый ОписаниеОповещения("ОбновитьДанные", ЭтотОбъект, ИмяТабличнойЧасти);
		
		Если ИмяТабличнойЧасти = "СвязанныеДокументы" Тогда
			ПараметрыФормы = ИнтеграцияВЕТИСКлиентСервер.ПараметрыФормыРедактированияСвязанныхДокументов(ТипЗнч(Объект.Ссылка));
			ПараметрыФормы.ТаблицаСвязанныхДокументов = Объект.СвязанныеДокументы;
			ИмяОбщейФормы = "СвязанныеДокументыВЕТИС";
		ИначеЕсли ИмяТабличнойЧасти = "ТранспортноеСредство" Тогда
			ПараметрыФормы = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныхПунктаМаршрута();
			Если Объект.Маршрут.Количество() Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект.Маршрут[0]);
			КонецЕсли;
			РежимРаботыФормы = Новый Структура("ВидПунктаМаршрута");
			РежимРаботыФормы.ВидПунктаМаршрута = Новый Структура("Видимость", Ложь);
			ПараметрыФормы.Вставить("РежимРаботыФормы", РежимРаботыФормы);
			ПараметрыФормы.Вставить("УказываетсяТранспортноеСредствоПредприятия", Истина);
			ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр или РедактированиеФормыНедоступно);
			ПараметрыФормы.Вставить("ОбязательностьНомераТранспортногоСредства", Истина);
			ИмяОбщейФормы = "ПунктМаршрутаВЕТИС";
		КонецЕсли;
		ОткрытьФорму("ОбщаяФорма." + ИмяОбщейФормы, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, ОбработкаОповещения);
		Возврат;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "УпаковкиВЕТИС" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ОписаниеОповещения = Новый ОписаниеОповещения("НадписьУпаковкиШтрихкодыНажатиеЗавершение",ЭтотОбъект);
		ИнтеграцияВЕТИСКлиент.ОткрытьФормуРедактированияУпаковокШтрихкодовПоСтроке(ЭтотОбъект, Объект, ТекущаяСтрока, ОписаниеОповещения, РедактированиеФормыНедоступно);
		Возврат;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Производители" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ПроизводителиМассив = Новый Массив;
		Для Каждого ДанныеСтроки Из Производители.НайтиСтроки(Новый Структура("ЗаписьСкладскогоЖурнала", ТекущаяСтрока.ЗаписьСкладскогоЖурнала)) Цикл
			ПроизводителиМассив.Добавить(Новый Структура("Производитель, НомераПредприятий", 
				ДанныеСтроки.Производитель, ДанныеСтроки.НомераПредприятий));
		КонецЦикла;
		ПараметрыФормы = Новый Структура("Производители, ТолькоПросмотр", ПроизводителиМассив, Истина);
		ОткрытьФорму("ОбщаяФорма.ПроизводителиВЕТИС", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, ОбработкаОповещения);
	КонецЕсли;
	
	ИнтеграцияВЕТИСКлиент.ОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	УстановитьПризнакИсключенияПродукцииТретьегоУровня(Объект.Дата);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительХозяйствующийСубъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	Если ЗначениеЗаполнено(ГрузоотправительИзОснованияДляОтбораХС)
		И Не ЗначениеЗаполнено(Объект.ГрузоотправительХозяйствующийСубъект) Тогда
		
		ПараметрыОткрытия.Вставить("Контрагент", ГрузоотправительИзОснованияДляОтбораХС);
		
	Иначе
		
		ПараметрыОткрытия.Вставить("НастроеноПодключение", Истина);
		
		Если НЕ ИспользуетсяКомиссияИлиПереработка Тогда
			ПараметрыОткрытия.Вставить("Соответствует", "Организации");
		КонецЕсли;
		
	КонецЕсли;
	ОткрытьФорму("Справочник.ХозяйствующиеСубъектыВЕТИС.ФормаСписка",
		ПараметрыОткрытия,
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательХозяйствующийСубъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	Если ЗначениеЗаполнено(ГрузополучательИзОснованияДляОтбораХС)
		И Не ЗначениеЗаполнено(Объект.ГрузополучательХозяйствующийСубъект) Тогда
		
		ПараметрыОткрытия.Вставить("Контрагент", ГрузополучательИзОснованияДляОтбораХС);
		
	Иначе
		
		ПараметрыОткрытия.Вставить("Соответствует", "Контрагенту");
		
	КонецЕсли;
	ОткрытьФорму("Справочник.ХозяйствующиеСубъектыВЕТИС.ФормаСписка",
		ПараметрыОткрытия,
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ХозяйствующийСубъектГрузоотправительПриИзменении(Элемент)
	
	ПриИзмененииГрузоотправителя();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ГрузоотправительХозяйствующийСубъект,Маршрут");
	ДействияНаСервере = ДействияПриИзмененииГрузоотправителя(Объект.ГрузоотправительПредприятие <> ГрузоотправительПредприятиеПредыдущееЗначение);
	ХозяйствующийСубъектГрузоотправительПриИзмененииНаСервере(ДействияНаСервере);
	ГрузоотправительПредприятиеПредыдущееЗначение = Объект.ГрузоотправительПредприятие;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйствующийСубъектГрузополучательПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ГрузополучательХозяйствующийСубъект,Маршрут");
	
	Если Объект.ГрузополучательПредприятие <> ГрузополучательПредприятиеПредыдущееЗначение Тогда
		ОтменитьРезультатыПроверкиРегионализации();
		ГрузополучательПредприятиеПредыдущееЗначение = Объект.ГрузополучательПредприятие;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеГрузоотправительПриИзменении(Элемент)
	
	ПриИзмененииГрузоотправителя();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ГрузоотправительПредприятие,Маршрут");
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	Если Объект.ГрузоотправительПредприятие <> ГрузоотправительПредприятиеПредыдущееЗначение Тогда
		ОтменитьРезультатыПроверкиРегионализации();
		ГрузоотправительПредприятиеПредыдущееЗначение = Объект.ГрузоотправительПредприятие;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеГрузополучательПриИзменении(Элемент)
	
	ПриИзмененииГрузоотправителя();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ГрузополучательПредприятие,Маршрут");
	Если Объект.ГрузополучательПредприятие <> ГрузополучательПредприятиеПредыдущееЗначение Тогда
		ОтменитьРезультатыПроверкиРегионализации();
	КонецЕсли;
	ГрузополучательПредприятиеПредыдущееЗначение = Объект.ГрузополучательПредприятие;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательТТНПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, Элементы.Товары.ТекущаяСтрока, "ТТНУказан");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусВЕТИСПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусВЕТИСОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность
		И НажатиеНавигационнойСсылкиТребуетЗаписиДокумента(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусВЕТИСОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйствующийСубъектПеревозчикПриИзменении(Элемент)
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ПеревозчикХозяйствующийСубъект");
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда 
		ЗаполнитьСписокВыбораДопустимыхЦелейНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПунктыМаршрутаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуРедактированияПунктовМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПриОчисткеДокументаОснования();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительПредприятиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыполнитьКонтрольЗаписейСкладскихЖурналов(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительХозяйствующийСубъектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыполнитьКонтрольЗаписейСкладскихЖурналов(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтрокиПриИзменении(Элемент)
	УстановитьОтборСтрок(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыПродукция Тогда
		
		ЗаполнитьСписокВыбораПродукции(ТекущиеДанные);
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатура Тогда
		
		ЗаполнитьСпискиВыбораНоменклатуры(ТекущиеДанные);
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыХарактеристика Тогда
		
		ЗаполнитьСпискиВыбораХарактеристика(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Поле.Имя = "ТоварыИндексКартинкиРегионализации"
		ИЛИ Поле.Имя = "ТоварыРезультатПроверкиПравилРегионализации" Тогда
		СтандартнаяОбработка = Ложь;
		Если ТекущиеДанные.РезультатПроверкиПравилРегионализации =
			ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий") Тогда
			ОткрытьФормуРегионализации(Новый Структура("ВидПродукцииВЕТИС", ТекущиеДанные.ВидПродукцииВЕТИС));
		КонецЕсли;
	КонецЕсли;
	
	Если РедактированиеФормыНедоступно Тогда
		СобытияФормВЕТИСКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если НеобходимоОтменитьРезультатыПроверкиРегионализации(ЭтотОбъект) Тогда
		ОтменитьРезультатыПроверкиРегионализации();
	Иначе
		ОбновитьСтатусИПараметрыДополнения();
	КонецЕсли;
	
	НеобходимоОбновитьСтатусыСерий = Ложь;
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		НеобходимоОбновитьСтатусыСерий = 
			ИнтеграцияИСКлиент.НеобходимоОбновитьСтатусыСерий(
				ЭтотОбъект,
				Элемент,
				КэшированныеЗначения,,
				Истина);
	КонецЕсли;
	
	Если НеобходимоОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			Неопределено,
			КэшированныеЗначения);
		
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПродукцияПриИзменении(Элемент)
	
	ОбновитьДанные(Элементы.Товары.ТекущиеДанные.Продукция, "ТоварыПродукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПродукцияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение.Пустая() Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтрокаТабличнойЧасти", СтрокаТабличнойЧасти);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
					"ОткрытьФормуПроизвольнаяПродукцияЗавершение",
					ЭтотОбъект,
					ДополнительныеПараметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", СтрокаТабличнойЧасти.Продукция);
		
		ОткрытьФорму("Справочник.ПродукцияВЕТИС.Форма.ПроизвольнаяПродукция",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения);
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ОбновитьДанные(Элементы.Товары.ТекущиеДанные.Номенклатура, "ТоварыНоменклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ОбновитьДанные(Элементы.Товары.ТекущиеДанные.Характеристика, "ТоварыХарактеристика");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормВЕТИСКлиентПереопределяемый.НачалоВыбораХарактеристики(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	СобытияФормВЕТИСКлиентПереопределяемый.ХарактеристикаСоздание(ЭтотОбъект, Элементы.Товары.ТекущиеДанные, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыНоменклатуры = ИнтеграцияВЕТИСВызовСервера.ПараметрыСозданияНоменклатуры(
		ТекущиеДанные.Продукция,
		ТекущиеДанные.ЕдиницаИзмеренияВЕТИС);
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОткрытьФормуВыбораНоменклатуры(ЭтотОбъект, ПараметрыНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыНоменклатуры = ИнтеграцияВЕТИСВызовСервера.ПараметрыСозданияНоменклатуры(
		ТекущиеДанные.Продукция,
		ТекущиеДанные.ЕдиницаИзмеренияВЕТИС);
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОткрытьФормуСозданияНоменклатуры(ЭтотОбъект, ПараметрыНоменклатуры,
		ТекущиеДанные.ЕдиницаИзмеренияВЕТИС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС            = ТекущиеДанные.ЕдиницаИзмеренияВЕТИС;
	
	Если РедактированиеФормыНедоступно Тогда
		ВведенноеЗначение = ТекущиеДанные.Количество;
		
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
		
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличестваВЕТИС(ЭтотОбъект, ТекущиеДанные,
			КэшированныеЗначения, ПараметрыЗаполнения);
			
		Если НЕ ВведенноеЗначение = ТекущиеДанные.Количество Тогда
			ТекстСообщения = НСтр( "ru = 'Документ был передан в информационную систему ВетИС.
				|Количество номенклатуры должно соответствовать количеству ВетИС с учетом коэффициентов пересчета.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
		
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличества(ЭтотОбъект, ТекущиеДанные,
			КэшированныеЗначения, ПараметрыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоВЕТИСПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС              = ТекущиеДанные.ЕдиницаИзмеренияВЕТИС;
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличестваВЕТИС(ЭтотОбъект, ТекущиеДанные,
		КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияВЕТИСПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС            = ТекущиеДанные.ЕдиницаИзмеренияВЕТИС;
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииЕдиницыИзмеренияВЕТИС(ЭтотОбъект, ТекущиеДанные,
		КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Продукция = Элементы.Товары.ТекущиеДанные.Продукция;
	
	Элементы.ТоварыЕдиницаИзмеренияВЕТИС.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Продукция) Тогда
		Элементы.ТоварыЕдиницаИзмеренияВЕТИС.СписокВыбора.ЗагрузитьЗначения(ДоступныеЕдиницыИзменения(Продукция));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦельНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПродукции = Новый Массив;
	МассивПродукции.Добавить(ТекущиеДанные.Продукция);
	МассивДопустимыхЦелей = ПересечениеДопустимыхЦелейПоПродукциям(МассивПродукции, ТекущиеДанные.НизкокачественнаяПродукция);
	
	ПараметрыОтбора = Новый Структура("Идентификатор", МассивДопустимыхЦелей);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыОткрытияФормы.Вставить("ОписаниеОтбора", ОписаниеОтбораЦелейВЕТИС());
	ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина);

	ОткрытьФорму("Справочник.ЦелиВЕТИС.ФормаСписка", ПараметрыОткрытияФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораДопустимыхЦелейНаКлиенте();
	
	Идентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,Идентификатор,"Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		
		РассчитатьРеквизитыРегионализации(Элементы.Товары.ТекущиеДанные, "Товары");
		Если НеобходимоОтменитьРезультатыПроверкиРегионализации(ЭтотОбъект) Тогда
			ОтменитьРезультатыПроверкиРегионализации();
		Иначе
			ОбновитьСтатусИПараметрыДополнения();
		КонецЕсли;
	КонецЕсли;
	
	НеобходимоОбновитьСтатусыСерий = Ложь;
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		НеобходимоОбновитьСтатусыСерий = 
			ИнтеграцияИСКлиент.НеобходимоОбновитьСтатусыСерий(
				ЭтотОбъект,
				Элемент,
				КэшированныеЗначения);
	КонецЕсли;
	
	Если НеобходимоОбновитьСтатусыСерий Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			ТекущаяСтрокаИдентификатор,
			КэшированныеЗначения);
		
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ОбновитьДанные(Элементы.Товары.ТекущиеДанные.Серия, "ТоварыСерия");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьПодборСерий(Элемент.ТекстРедактирования, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаписьСкладскогоЖурналаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыФормы.Вставить("Продукция", ТекущиеДанные.Продукция);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ХозяйствующийСубъект", Объект.ГрузоотправительХозяйствующийСубъект);
	СтруктураОтбора.Вставить("Предприятие", Объект.ГрузоотправительПредприятие);
	
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.ОстаткиПродукцииВЕТИС.ФормаСписка",
		ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаписьСкладскогоЖурналаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если (Элементы.Товары.ТекущиеДанные = Неопределено) Тогда
		Возврат;
	ИначеЕсли ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Товары.ТекущиеДанные.ЗаписьСкладскогоЖурнала = ВыбранноеЗначение;
	ОбновитьДанные(ВыбранноеЗначение,"ТоварыЗаписьСкладскогоЖурнала");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьРеквизитыПоУмолчаниюНовойСтрокиТовары(Элементы.Товары.ТекущиеДанные, Элементы.ТоварыПанельБлагополучиеМестности.СписокВыбора[0].Значение, Копирование);
		ЗаполнитьСлужебныеРеквизитыТоваров(Элементы.Товары.ТекущиеДанные,,Новый Структура("Объект,ТекстЗапрещеннойЯчейкиЦвет",Объект,ТекстЗапрещеннойЯчейкиЦвет));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьДанные(ВыбранноеЗначение,"ТоварыНоменклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИнтеграцияВЕТИСКлиентСервер.ОчиститьДанныеУпаковокШтрихкодовПоСтроке(Объект, Элементы.Товары.ТекущиеДанные.ИдентификаторСтроки);
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНахожденияЖивотныхНаТерриторииТСПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор(), "ПериодНахожденияТС");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаписьСкладскогоЖурналаПриИзменении(Элемент)
	
	ОбновитьДанные(Элементы.Товары.ТекущиеДанные.ЗаписьСкладскогоЖурнала, "ТоварыЗаписьСкладскогоЖурнала");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНизкокачественнаяПродукцияПриИзменении(Элемент)
	
	ОбновитьДанные(Элементы.Товары.ТекущиеДанные.НизкокачественнаяПродукция, "ТоварыНизкокачественнаяПродукция");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Форма.ФормаДокумента.Записать");
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Форма.ФормаДокумента.Провести");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Форма.ФормаДокумента.ПровестиИЗакрыть");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыВЕТИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаписиСкладскогоЖурнала(Команда)
	
	ВыполнитьКомандуЗаполнитьЗаписиСкладскогоЖурнала();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанель(Команда)
	ПанельВСДСвернута = Не ПанельВСДСвернута;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ПанельВСДСвернута");
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	
	ОбработатьПерезаполнениеДокумента(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦельВыделенныхСтрок(Команда)
	
	ВыделенныеСтрокиПродукции = Элементы.Товары.ВыделенныеСтроки;
	
	Если ВыделенныеСтрокиПродукции.Количество() = 0 Тогда 
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Нет данных для заполнения'"),,
			НСтр("ru = 'Нет выделенных строк в табличной части ""Товары""'"));
		Возврат;
	КонецЕсли;
	
	МассивПродукции = Новый Массив;
	НизкокачественнаяПродукция = Неопределено;
	Для Каждого Стр Из ВыделенныеСтрокиПродукции Цикл
		
		МассивПродукции.Добавить(Объект.Товары.НайтиПоИдентификатору(Стр).Продукция);
		
		Если НизкокачественнаяПродукция = Неопределено Тогда
			НизкокачественнаяПродукция = Объект.Товары.НайтиПоИдентификатору(Стр).НизкокачественнаяПродукция;
		ИначеЕсли НизкокачественнаяПродукция <> Объект.Товары.НайтиПоИдентификатору(Стр).НизкокачественнаяПродукция Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Заполнение невозможно'"),,
				НСтр("ru = 'Нельзя заполнить цели для товаров с разным качеством'"));
				
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	ДопустимыеЦели = ПересечениеДопустимыхЦелейПоПродукциям(МассивПродукции, НизкокачественнаяПродукция);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаВыбораЦели", 
		ЭтаФорма, 
		Новый Структура("ВыделенныеСтрокиПродукции", ВыделенныеСтрокиПродукции));
		
	ПараметрыОтбора = Новый Структура("Идентификатор", ДопустимыеЦели);
	ПараметрыФормы = Новый Структура("Отбор, ОписаниеОтбора, РежимВыбора",
		ПараметрыОтбора,
		ОписаниеОтбораЦелейВЕТИС(Истина),
		Истина);
		
	ОткрытьФорму(
		"Справочник.ЦелиВЕТИС.ФормаСписка", 
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборЗаписейЖурнала(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ХозяйствующийСубъект", Объект.ГрузоотправительХозяйствующийСубъект);
	СтруктураОтбора.Вставить("Предприятие", Объект.ГрузоотправительПредприятие);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.ОстаткиПродукцииВЕТИС.ФормаСписка",
		ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваров(Команда)
	
	ПараметрыПодбора = ИнтеграцияВЕТИСКлиентСервер.ПараметрыФормыПодбораТоваров(ЭтаФорма, ПараметрыУказанияСерий);
	СобытияФормВЕТИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, Неопределено, ПараметрыПодбора);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрок(Форма)

	Если Форма.ОтборСтрок = "ТолькоОшибки" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ЕстьОшибки", 1);
		Форма.Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Форма.Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗапрещенаПродукцияТретьегоУровня(ЗаписьСкладскогоЖурнала)
	Возврат ИсключитьПродукциюТретьегоУровня
		И ЗначениеЗаполнено(ЗаписьСкладскогоЖурнала)
		И Не ПродукцияВЕТИСВызовСервера.ЗаписьЖурналаСодержитПродукциюЧетвертогоУровня(ЗаписьСкладскогоЖурнала);
КонецФункции

&НаСервере
Процедура УстановитьПризнакИсключенияПродукцииТретьегоУровня(ДатаДокумента)
	ИсключитьПродукциюТретьегоУровня = ИнтеграцияВЕТИСВызовСервера.ИспользуетсяОграничениеВыбораПродукцииТретьегоУровня(ДатаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияВЕТИСКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение") Тогда
		ОбработатьПерезаполнениеДокумента();
	Иначе
		ОбработатьВыборДокументаОснования();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПерезаполнениеДокумента(ОбработатьШапку = Истина)
	Если ЗначениеЗаполнено(Объект.ДокументОснование)Тогда
		ПерезаполнитьПоОснованиюНаСервере(Истина, ОбработатьШапку);
	Иначе 
		ПриОчисткеДокументаОснования();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДокументаОснования()
	Если ЗначениеЗаполнено(Объект.ДокументОснование)Тогда
		ПерезаполнитьПоОснованиюНаСервере(Ложь);
	Иначе 
		ПриОчисткеДокументаОснования();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОчисткеДокументаОснования()
	
	Объект.ДокументОснование = Неопределено;
	ЗаполнитьОтборыПоОснованию(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОтбораЦелейВЕТИС(ГруппаСтрок = Ложь)
	
	Если ГруппаСтрок Тогда
		Массив = Новый Массив;
		Для Каждого СтрокаПродукция Из Элементы.Товары.ВыделенныеСтроки Цикл
			Продукция = Объект.Товары.НайтиПоИдентификатору(СтрокаПродукция).Продукция;
			Если Массив.Найти(Продукция) = Неопределено Тогда 
				Массив.Добавить(Продукция);
			КонецЕсли;
		КонецЦикла;
		Продукция = СтрСоединить(Массив,", ");
	Иначе
		Продукция = Элементы.Товары.ТекущиеДанные.Продукция;
	КонецЕсли;
	
	Возврат НСтр(СтрШаблон("ru = 'Наложен отбор по продукции: %1'",Продукция));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветТекстаПоля(УсловиеДляОсобогоТекста, ВозвращатьЦветПоля = Ложь)
	
	Если Не УсловиеДляОсобогоТекста Тогда
		Если ВозвращатьЦветПоля Тогда
			Возврат Новый Цвет();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ЦветаСтиля.ЦветОсобогоТекста;
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ЦветСтиля("ЦветОсобогоТекста");
	#КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДействияПриОбновленииРеквизитаТабличнойЧастиТовары()
	
	Действия = Новый Структура;
	Действия.Вставить("ОбновитьВидПродукцииВЕТИС", Ложь);
	Действия.Вставить("ОбновитьТипЖивыеЖивотные", Ложь);
	Действия.Вставить("ОбновитьЕдиницуИзмеренияВЕТИС", Ложь);
	Действия.Вставить("ОбновитьТребованиеТипаПроисхождения", Ложь);
	Действия.Вставить("ЗаполнитьСписокВыбораДопустимыхЦелей", Ложь);
	
	Возврат Действия;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеСтрокиТабличнойЧастиТовары(СтрокаТабличнойЧасти)
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Продукция");
	ДанныеСтроки.Вставить("ЕдиницаИзмеренияВЕТИС");
	ДанныеСтроки.Вставить("ВидПродукцииВЕТИС");
	ДанныеСтроки.Вставить("ТипЖивыеЖивотные");
	ДанныеСтроки.Вставить("РезультатПроверкиПравилРегионализации");
	ДанныеСтроки.Вставить("УсловияРегионализацииВыполнены");
	ДанныеСтроки.Вставить("ИндексКартинкиРегионализации");
	ДанныеСтроки.Вставить("РегионализацияЗапрещено");
	ДанныеСтроки.Вставить("РегионализацияРазрешено");
	ДанныеСтроки.Вставить("РегионализацияРазрешеноСВыполненнымиУсловиями");
	ДанныеСтроки.Вставить("РегионализацияРазрешеноСНеВыполненнымиУсловиями");
	ДанныеСтроки.Вставить("РегионализацияНеЗаполнено");
	ДанныеСтроки.Вставить("ТребуетсяТипПроисхождения");
	ДанныеСтроки.Вставить("ТипПроисхождения");
	ДанныеСтроки.Вставить("НизкокачественнаяПродукция");
	
	Если НЕ(СтрокаТабличнойЧасти = Неопределено) Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Возврат ДанныеСтроки;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НеобходимоОтменитьРезультатыПроверкиРегионализации(Форма)
	Объект = Форма.Объект;
	
	ТоварыРегионализацияЗапрещено  = Объект.Товары.Итог("РегионализацияЗапрещено") <> 0;
	МаршрутРегионализацияЗапрещено = Объект.Маршрут.Итог("РегионализацияЗапрещено") <> 0;
	
	ТоварыРегионализацияРазрешеноСНеВыполненнымиУсловиями  = Объект.Товары.Итог("РегионализацияРазрешеноСНеВыполненнымиУсловиями") <> 0;
	МаршрутРегионализацияРазрешеноСНеВыполненнымиУсловиями = Объект.Товары.Итог("РегионализацияРазрешеноСНеВыполненнымиУсловиями") <> 0;
	
	ТоварыРегионализацияРазрешеноСВыполненнымиУсловиями  = Объект.Товары.Итог("РегионализацияРазрешеноСВыполненнымиУсловиями") <> 0;
	МаршрутРегионализацияРазрешеноСВыполненнымиУсловиями = Объект.Маршрут.Итог("РегионализацияРазрешеноСВыполненнымиУсловиями") <> 0;
	
	ТоварыРегионализацияРазрешено  = Объект.Товары.Итог("РегионализацияРазрешено") <> 0;
	МаршрутРегионализацияРазрешено = Объект.Маршрут.Итог("РегионализацияРазрешено") <> 0;
	
	Результат = Ложь;
	Если ТоварыРегионализацияЗапрещено
		ИЛИ МаршрутРегионализацияЗапрещено Тогда
		Результат = ТоварыРегионализацияЗапрещено <> МаршрутРегионализацияЗапрещено;
	ИначеЕсли ТоварыРегионализацияРазрешеноСНеВыполненнымиУсловиями
		ИЛИ МаршрутРегионализацияРазрешеноСНеВыполненнымиУсловиями Тогда
		Результат = ТоварыРегионализацияРазрешеноСНеВыполненнымиУсловиями <> МаршрутРегионализацияРазрешеноСНеВыполненнымиУсловиями;
	ИначеЕсли ТоварыРегионализацияРазрешеноСВыполненнымиУсловиями
		ИЛИ МаршрутРегионализацияРазрешеноСВыполненнымиУсловиями Тогда
		Результат = ТоварыРегионализацияРазрешеноСВыполненнымиУсловиями <> МаршрутРегионализацияРазрешеноСВыполненнымиУсловиями;
	ИначеЕсли ТоварыРегионализацияРазрешено
		ИЛИ МаршрутРегионализацияРазрешено Тогда
		Результат = ТоварыРегионализацияРазрешено <> МаршрутРегионализацияРазрешено;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьРеквизитыРегионализации(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешено") Тогда
		Если ИмяТабличнойЧасти = "Товары" Тогда
			СтрокаТабличнойЧасти.ИндексКартинкиРегионализации = 0;
		КонецЕсли;
		СтрокаТабличнойЧасти.РегионализацияЗапрещено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешено = 1;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСНеВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияНеЗаполнено = 0;
	ИначеЕсли СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеЗапрещено") Тогда
		Если ИмяТабличнойЧасти = "Товары" Тогда
			СтрокаТабличнойЧасти.ИндексКартинкиРегионализации = 2;
		КонецЕсли;
		СтрокаТабличнойЧасти.РегионализацияЗапрещено = 1;
		СтрокаТабличнойЧасти.РегионализацияРазрешено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСНеВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияНеЗаполнено = 0;
	ИначеЕсли СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий")
		И СтрокаТабличнойЧасти.УсловияРегионализацииВыполнены Тогда
		Если ИмяТабличнойЧасти = "Товары" Тогда
			СтрокаТабличнойЧасти.ИндексКартинкиРегионализации = 0;
		КонецЕсли;
		СтрокаТабличнойЧасти.РегионализацияЗапрещено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСВыполненнымиУсловиями = 1;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСНеВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияНеЗаполнено = 0;
	ИначеЕсли СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = ПредопределенноеЗначение("Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий")
		И НЕ СтрокаТабличнойЧасти.УсловияРегионализацииВыполнены Тогда
		Если ИмяТабличнойЧасти = "Товары" Тогда
			СтрокаТабличнойЧасти.ИндексКартинкиРегионализации = 1;
		КонецЕсли;
		СтрокаТабличнойЧасти.РегионализацияЗапрещено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСНеВыполненнымиУсловиями = 1;
		СтрокаТабличнойЧасти.РегионализацияНеЗаполнено = 0;
	Иначе
		Если ИмяТабличнойЧасти = "Товары" Тогда
			СтрокаТабличнойЧасти.ИндексКартинкиРегионализации = 3;
		КонецЕсли;
		СтрокаТабличнойЧасти.РегионализацияЗапрещено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешено = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияРазрешеноСНеВыполненнымиУсловиями = 0;
		СтрокаТабличнойЧасти.РегионализацияНеЗаполнено = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеУпаковокПоСтроке(Объект, Строка)
	
	ИмяТЧ = "УпаковкиВЕТИС";
	
	ОтборУпаковок         = Новый Структура("ИдентификаторСтрокиТовары", Строка.ИдентификаторСтроки);
	УпаковкиТекущейСтроки = Объект[ИмяТЧ].НайтиСтроки(ОтборУпаковок);
	
	ТекстНадписи = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
		УпаковкиТекущейСтроки,
		ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиУпаковок(2));
	
	Строка.ПредставлениеУпаковкиШтрихкоды = Новый ФорматированнаяСтрока(ТекстНадписи, , , , ИмяТЧ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеВСДПоСтроке(Строка, ТекстЗапрещеннойЯчейкиЦвет)
	
	Если ЗначениеЗаполнено(Строка.ВетеринарноСопроводительныйДокумент) Тогда
		Строка.ПредставлениеВетеринарноСопроводительныйДокумент = Новый ФорматированнаяСтрока(
			Строка(Строка.ВетеринарноСопроводительныйДокумент),,,,
			ПолучитьНавигационнуюСсылку(Строка.ВетеринарноСопроводительныйДокумент));
	Иначе 
		Строка.ПредставлениеВетеринарноСопроводительныйДокумент = Новый ФорматированнаяСтрока(
			НСтр("ru = '<будет создан автоматически>'"),,
			ТекстЗапрещеннойЯчейкиЦвет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект)
	
	Если ПараметрыОбновленияСтатуса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ТекущийОбъект.Ссылка,
		ПараметрыОбновленияСтатуса);
	
	ПараметрыОбновленияСтатуса = Неопределено;
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыТабличныхЧастей()
	
	#Область Товары
	
	ДанныеТЧТовары = Объект.Товары.Выгрузить(, "НомерСтроки, Продукция, РезультатПроверкиПравилРегионализации, УсловияРегионализацииВыполнены");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЧТовары", ДанныеТЧТовары);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.Продукция КАК Справочник.ПродукцияВЕТИС) КАК Продукция,
	|	Товары.РезультатПроверкиПравилРегионализации КАК РезультатПроверкиПравилРегионализации,
	|	Товары.УсловияРегионализацииВыполнены КАК УсловияРегионализацииВыполнены
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТЧТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Продукция.ТипПродукции КАК ТипПродукцииВЕТИС,
	|	Товары.Продукция.ВидПродукции КАК ВидПродукцииВЕТИС,
	|	ВЫБОР
	|		КОГДА Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешено)
	|			ТОГДА 0
	|		КОГДА Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеЗапрещено)
	|			ТОГДА 2
	|		КОГДА Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий)
	|				И Товары.УсловияРегионализацииВыполнены
	|			ТОГДА 0
	|		КОГДА Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий)
	|				И НЕ Товары.УсловияРегионализацииВыполнены
	|			ТОГДА 1
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ИндексКартинкиРегионализации,
	|	ВЫБОР
	|		КОГДА Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеЗапрещено)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РегионализацияЗапрещено,
	|	ВЫБОР
	|		КОГДА Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешено)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РегионализацияРазрешено,
	|	ВЫБОР
	|		КОГДА Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий)
	|				И Товары.УсловияРегионализацииВыполнены
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РегионализацияРазрешеноСВыполненнымиУсловиями,
	|	ВЫБОР
	|		КОГДА Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий)
	|				И НЕ Товары.УсловияРегионализацииВыполнены
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РегионализацияРазрешеноСНеВыполненнымиУсловиями,
	|	ВЫБОР
	|		КОГДА Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РегионализацияНеЗаполнено
	|ИЗ
	|	Товары КАК Товары";
	
	ПродукцияЖивыеЖивотные = ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(Объект.Товары.Выгрузить(,"Продукция").ВыгрузитьКолонку("Продукция"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.Товары[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка,, "НомерСтроки");
		СтрокаТЧ.ТипЖивыеЖивотные = ПродукцияЖивыеЖивотные.Получить(СтрокаТЧ.Продукция);
		СтрокаТЧ.ТребуетсяТипПроисхождения = ПродукцияВЕТИСВызовСервера.ТребованиеТипаПроисхожденияПоТипуПродукции(Выборка.ТипПродукцииВЕТИС);
		ОчиститьТипПроисхожденияПриНеобходимости(СтрокаТЧ);
	КонецЦикла;
	
	#КонецОбласти
	
	#Область Упаковки
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ТекстНадписи = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
			Объект.УпаковкиВЕТИС.Выгрузить(Новый Структура("ИдентификаторСтрокиТовары",СтрокаТЧ.ИдентификаторСтроки)),
			ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиУпаковок(2));
		СтрокаТЧ.ПредставлениеУпаковкиШтрихкоды = Новый ФорматированнаяСтрока(ТекстНадписи,,,,"УпаковкиВЕТИС");
	КонецЦикла;
	
	#КонецОбласти
	
	#Область Маршрут
	
	ДанныеТЧМаршрут = Объект.Маршрут.Выгрузить(, "НомерСтроки, РезультатПроверкиПравилРегионализации, УсловияРегионализацииВыполнены");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЧМаршрут", ДанныеТЧМаршрут);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Маршрут.НомерСтроки КАК НомерСтроки,
	|	Маршрут.РезультатПроверкиПравилРегионализации КАК РезультатПроверкиПравилРегионализации,
	|	Маршрут.УсловияРегионализацииВыполнены КАК УсловияРегионализацииВыполнены
	|ПОМЕСТИТЬ Маршрут
	|ИЗ
	|	&ТЧМаршрут КАК Маршрут
	|;
	|
	|ВЫБРАТЬ
	|	Маршрут.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Маршрут.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеЗапрещено)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РегионализацияЗапрещено,
	|	ВЫБОР
	|		КОГДА Маршрут.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешено)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РегионализацияРазрешено,
	|	ВЫБОР
	|		КОГДА Маршрут.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий)
	|		И Маршрут.УсловияРегионализацииВыполнены
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РегионализацияРазрешеноСВыполненнымиУсловиями,
	|	ВЫБОР
	|		КОГДА Маршрут.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий)
	|		И НЕ Маршрут.УсловияРегионализацииВыполнены
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РегионализацияРазрешеноСНеВыполненнымиУсловиями,
	|	ВЫБОР
	|		КОГДА Маршрут.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РегионализацияНеЗаполнено
	|ИЗ
	|	Маршрут КАК Маршрут";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.Маршрут[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка,, "НомерСтроки");
	КонецЦикла;
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура РасчетСтрокиТоварыНаСервере(ДанныеСтроки, Действия, ДополнительныеПараметры = Неопределено)
	
	Перем ПараметрыРегионализацииПоВидамНоменклатуры, ЭтоНоваяСтрока, 
		ИменаРеквизитовПродукцииВЕТИС, Значение;
	
	ЭтоНоваяСтрока = Ложь;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
	   И ДополнительныеПараметры.Свойство("ДополнительныеПараметры") Тогда
		ЭтоНоваяСтрока = ДополнительныеПараметры.ЭтоНоваяСтрока;
	КонецЕсли;
	
	ПараметрыРегионализацииПоВидамНоменклатуры = Новый Соответствие;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
	   И ДополнительныеПараметры.Свойство("КэшируемыеПараметрыРегионализации") Тогда
		ПараметрыРегионализацииПоВидамНоменклатуры = ДополнительныеПараметры.КэшируемыеПараметрыРегионализации.ПараметрыРегионализацииПоВидамНоменклатуры;
	КонецЕсли;
	
	ПредыдущиеЗначенияДляРегионализации = Новый Структура("ВидПродукцииВЕТИС");
	ЗаполнитьЗначенияСвойств(ПредыдущиеЗначенияДляРегионализации, ДанныеСтроки);
	
	ИменаРеквизитовПродукцииВЕТИС = "";
	Если Действия.ОбновитьТипЖивыеЖивотные
	 ИЛИ Действия.ОбновитьТребованиеТипаПроисхождения Тогда
		ИменаРеквизитовПродукцииВЕТИС = ИменаРеквизитовПродукцииВЕТИС + ?(ИменаРеквизитовПродукцииВЕТИС = "", "", ", ") + "ТипПродукции";
	КонецЕсли;
	Если Действия.ОбновитьВидПродукцииВЕТИС Тогда
		ИменаРеквизитовПродукцииВЕТИС = ИменаРеквизитовПродукцииВЕТИС + ?(ИменаРеквизитовПродукцииВЕТИС = "", "", ", ") + "ВидПродукции";
	КонецЕсли;
	Если Действия.ОбновитьЕдиницуИзмеренияВЕТИС Тогда
		ИменаРеквизитовПродукцииВЕТИС = ИменаРеквизитовПродукцииВЕТИС + ?(ИменаРеквизитовПродукцииВЕТИС = "", "", ", ") + "ФасовкаЕдиницаИзмерения";
	КонецЕсли;
	Если НЕ ИменаРеквизитовПродукцииВЕТИС = "" Тогда
		РеквизитыПродукцииВЕТИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.Продукция, ИменаРеквизитовПродукцииВЕТИС);
		ДанныеСтроки.ВидПродукцииВЕТИС = РеквизитыПродукцииВЕТИС.ВидПродукции;
	КонецЕсли;
	Если Действия.ОбновитьТипЖивыеЖивотные Тогда
		ДанныеСтроки.ТипЖивыеЖивотные = ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(ДанныеСтроки.Продукция);
	КонецЕсли;
	Если Действия.ОбновитьТребованиеТипаПроисхождения Тогда
		ДанныеСтроки.ТребуетсяТипПроисхождения = ПродукцияВЕТИСВызовСервера.ТребованиеТипаПроисхожденияПоТипуПродукции(РеквизитыПродукцииВЕТИС.ТипПродукции);
		ОчиститьТипПроисхожденияПриНеобходимости(ДанныеСтроки);
	КонецЕсли;
	Если ЭтоНоваяСтрока
	 ИЛИ Действия.ОбновитьВидПродукцииВЕТИС Тогда
		Значение = ПараметрыРегионализацииПоВидамНоменклатуры.Получить(ДанныеСтроки.ВидПродукцииВЕТИС);
		Если Значение = Неопределено Тогда
			ДанныеСтроки.РезультатПроверкиПравилРегионализации = Перечисления.РезультатыПроверкиПравилРегионализации.ПустаяСсылка();
			ДанныеСтроки.УсловияРегионализацииВыполнены = Ложь;
		Иначе
			ДанныеСтроки.РезультатПроверкиПравилРегионализации = Значение.РезультатПроверкиПравилРегионализации;
			ДанныеСтроки.УсловияРегионализацииВыполнены = Значение.УсловияРегионализацииВыполнены;
		КонецЕсли;
		РассчитатьРеквизитыРегионализации(ДанныеСтроки, "Товары");
		Если НеобходимоОтменитьРезультатыПроверкиРегионализации(ЭтотОбъект) Тогда
			ОтменитьРезультатыПроверкиРегионализации();
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоНоваяСтрока
		Или Действия.ЗаполнитьСписокВыбораДопустимыхЦелей Тогда
		
		ЗаполнитьСписокВыбораДопустимыхЦелейНаСервереОбновитьКэш(ДанныеСтроки.Продукция, ДанныеСтроки.НизкокачественнаяПродукция);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТипПроисхожденияПриНеобходимости(СтрокаТабличнойЧасти)
	
	Если Не СтрокаТабличнойЧасти.ТребуетсяТипПроисхождения И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТипПроисхождения) Тогда
		СтрокаТабличнойЧасти.ТипПроисхождения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере(ОбновитьКомандыОснования = Истина)
	
	ИнтеграцияВЕТИС.УстановитьДоступностьПоляСтатус(ЭтотОбъект);
	
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеИсходящаяТранспортнаяОперацияВЕТИС.Тип;
	
	ЗаполнитьОтборыПоОснованию(Объект.ДокументОснование, ЭтотОбъект, ОбновитьКомандыОснования);
	
	ГрузоотправительПредприятиеПредыдущееЗначение = Объект.ГрузоотправительПредприятие;
	ГрузополучательПредприятиеПредыдущееЗначение  = Объект.ГрузополучательПредприятие;
	ОбновитьРеквизитыТабличныхЧастей();
	
	ОбновитьКэшируемыеПараметрыРегионализации();
	
	ПараметрыОбновленияСтатуса = Неопределено;
	
	ОбновитьСтатусВЕТИС();
	
	ЗаполнитьСлужебныеРеквизитыТовары();
	
	ЗаполнитьПроизводителейПоЗаписямЖурнала();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока);
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
	ЗаполнитьКэшДопустимыхЦелейПоОбъекту();

	УстановитьПризнакИсключенияПродукцииТретьегоУровня(ТекущаяДатаСеанса());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроизводителейПоЗаписямЖурнала(ЗаписьЖурнала = Неопределено)
	
	ЗаписиЖурнала = Новый Массив;
	Если ЗаписьЖурнала = Неопределено Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовары.ЗаписьСкладскогоЖурнала) Тогда
				ЗаписиЖурнала.Добавить(СтрокаТовары.ЗаписьСкладскогоЖурнала);
			КонецЕсли;
		КонецЦикла;
		Производители.Очистить();
	Иначе
		Если Производители.НайтиСтроки(Новый Структура("ЗаписьСкладскогоЖурнала", ЗаписьЖурнала)).Количество() Тогда
			Возврат;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЗаписьЖурнала) Тогда
			СтрокиТовары = Объект.Товары.НайтиСтроки(Новый Структура("ЗаписьСкладскогоЖурнала", ЗаписьЖурнала));
			Для Каждого СтрокаТовары Из СтрокиТовары Цикл
				СтрокаТовары.НадписьПроизводители = Неопределено;
			КонецЦикла;
			Возврат;
		КонецЕсли;
		ЗаписиЖурнала.Добавить(ЗаписьЖурнала);
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Ссылка КАК ЗаписьСкладскогоЖурнала,
	|	Производитель КАК Производитель
	|ИЗ
	|	Справочник.ЗаписиСкладскогоЖурналаВЕТИС.Производители КАК ЗаписиСкладскогоЖурналаВЕТИС
	|ГДЕ
	|	Ссылка В (&ЗаписиЖурнала)");
	Запрос.УстановитьПараметр("ЗаписиЖурнала", ЗаписиЖурнала);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Производители.Добавить(), Выборка);
	КонецЦикла;
	
	Справочники.ПредприятияВЕТИС.ЗаполнитьНомера(Производители);
	
	Для Каждого ЗаписьЖурнала Из ЗаписиЖурнала Цикл
		
		Строки = Производители.НайтиСтроки(Новый Структура("ЗаписьСкладскогоЖурнала", ЗаписьЖурнала));
		ТекстНадписи = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
			Строки,
			ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиПроизводителей(НСтр("ru = '<не указаны>'")));
		
		СтрокиТовары = Объект.Товары.НайтиСтроки(Новый Структура("ЗаписьСкладскогоЖурнала", ЗаписьЖурнала));
		Для Каждого СтрокаТовары Из СтрокиТовары Цикл
			Если Строки.Количество() Тогда
				СтрокаТовары.НадписьПроизводители = Новый ФорматированнаяСтрока(ТекстНадписи,,,,"Производители");
			Иначе
				СтрокаТовары.НадписьПроизводители = Новый ФорматированнаяСтрока(ТекстНадписи,,ЦветаСтиля.ЦветОсобогоТекста);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТовары()
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьПредставлениеУпаковокПоСтроке(Объект, Строка);
		ЗаполнитьПредставлениеВСДПоСтроке(Строка, ТекстЗапрещеннойЯчейкиЦвет);
	КонецЦикла;
	
	ИнтеграцияВЕТИС.ЗаполнитьСопоставленнуюПродукциюВДокументе(Объект.Товары);
	ИнтеграцияВЕТИС.ЗаполнитьСопоставленныеТовары(Объект.Товары, НоменклатураДляВыбора,,,Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)
	
	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусВЕТИС();
	КонецЕсли;
	
КонецПроцедуры

#Область ЕдиницыИзмерения

&НаСервереБезКонтекста
Функция ДоступныеЕдиницыИзменения(Продукция)
	
	Возврат Новый Массив(ИнтеграцияВЕТИСПовтИсп.ДоступныеЕдиницыИзменения(Продукция));
	
КонецФункции

#КонецОбласти

#Область Статус

&НаСервере
Процедура ОбновитьКэшируемыеПараметрыРегионализации()
	
	Если КэшируемыеПараметрыРегионализации = Неопределено Тогда
		
		КэшируемыеПараметрыРегионализации = Новый Структура;
		КэшируемыеПараметрыРегионализации.Вставить("ПараметрыРегионализацииПоВидамНоменклатуры", Новый Соответствие);
		
	КонецЕсли;
	
	КэшируемыеПараметрыРегионализации.ПараметрыРегионализацииПоВидамНоменклатуры.Очистить();
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		ПараметрыРегионализацииПоВидуПродукции = Новый Структура("РезультатПроверкиПравилРегионализации, УсловияРегионализацииВыполнены");
		ЗаполнитьЗначенияСвойств(ПараметрыРегионализацииПоВидуПродукции, СтрокаТабличнойЧасти);
		КэшируемыеПараметрыРегионализации.ПараметрыРегионализацииПоВидамНоменклатуры.Вставить(
			СтрокаТабличнойЧасти.ВидПродукцииВЕТИС, ПараметрыРегионализацииПоВидуПродукции);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыСтатусаДокумента(ДокументОбъект, ПараметрыОбновленияСтатуса, ПараметрыДополненияСтатусаВЕТИС, ХозяйствующийСубъект)
	
	Ссылка = ДокументОбъект.Ссылка;
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусВЕТИС");
	Результат.Вставить("СтатусВЕТИСПредставление");
	Результат.Вставить("СтатусВЕТИСПредставлениеВысота");
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	
	СтатусВЕТИС                = МенеджерОбъекта.СтатусПоУмолчанию();
	ДальнейшееДействие         = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию(ПараметрыДополненияСтатусаВЕТИС.ПроверятьНаРегионализацию);
	ОперацииДопустимыхДействий = МенеджерОбъекта.ОперацииДопустимыхДействий();
	
	Если ЗначениеЗаполнено(Ссылка)
		И ПараметрыОбновленияСтатуса = Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовВЕТИС КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияВЕТИС.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусВЕТИС = Выборка.Статус;
			
			ДальнейшееДействие = Новый Массив;
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбновленияСтатуса <> Неопределено Тогда
		
		СтатусВЕТИС = ПараметрыОбновленияСтатуса.НовыйСтатус;
		
		ДальнейшееДействие = Новый Массив;
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие1);
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие2);
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие3);
		
	КонецЕсли;
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеУсловияПеремещения);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.Оформите);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОтменитеПередачуДанных);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ИзменитеПродукциюИлиМаршрут);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);

	НедоступныеДействия = ПользователиВЕТИС.НедоступныеДальнейшиеДействия(ДокументОбъект, ДопустимыеДействия, ОперацииДопустимыхДействий, ХозяйствующийСубъект);
	
	СтатусВЕТИСПредставление = ИнтеграцияВЕТИС.ПредставлениеСтатусаВЕТИС(
		СтатусВЕТИС,
		ДальнейшееДействие,
		ДопустимыеДействия,
		НедоступныеДействия);
	
	Результат.СтатусВЕТИС                    = СтатусВЕТИС;
	Результат.СтатусВЕТИСПредставление       = СтатусВЕТИСПредставление;
	Результат.СтатусВЕТИСПредставлениеВысота = 1;
	
	ДополнитьСтрокуПредставленияСтатусаВЕТИС(Результат, ПараметрыДополненияСтатусаВЕТИС);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСтрокуПредставленияСтатусаВЕТИС(ПараметрыСтатуса, ПараметрыДополненияСтатусаВЕТИС)
	
	СтатусВЕТИСПредставление = ПараметрыСтатуса.СтатусВЕТИСПредставление;
	СтатусВЕТИС = ПараметрыСтатуса.СтатусВЕТИС;
	
	ДополнитьСтрокуСтатуса = (СтатусыПослеПринятияОтветаРегионализации().Найти(СтатусВЕТИС) <> Неопределено)
	                       И ПараметрыДополненияСтатусаВЕТИС.ПроверятьНаРегионализацию;
	
	Если СтатусВЕТИС = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ВСДОформленыЧерезWeb
	   И НЕ ПараметрыДополненияСтатусаВЕТИС.ПравилаРегионализацииЗаполнены Тогда
		ДополнитьСтрокуСтатуса = Ложь;
	КонецЕсли;
	
	Если Не ДополнитьСтрокуСтатуса Тогда
		
		ПараметрыСтатуса.СтатусВЕТИСПредставлениеВысота = 1;
		
	Иначе
		
		ДополнительныеСтрокиСтатуса = Новый Массив;
		ДополнительныеСтрокиСтатуса.Добавить(СтатусВЕТИСПредставление);
		
		//выводим самое строгое условие и отдельно сообщаем о необходимости проверить условия регионализации
		ЕстьНеПроверенныеПозиции = Ложь;
		ЕстьДополнительнаяСтрока = Ложь;
		ЕстьГиперссылка = Ложь;
		Если НЕ ПараметрыДополненияСтатусаВЕТИС.ПравилаРегионализацииЗаполнены Тогда
			
			ЕстьНеПроверенныеПозиции = Истина;
			
		ИначеЕсли ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСЗапретом > 0
			ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовСЗапретом > 0 Тогда
			
			ПредставлениеСтрокиУсловий = НСтр("ru = 'Отгрузка запрещена по'");
			ПозицийМаршрутов = ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовСЗапретом;
			ПозицийТоваров   = ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСЗапретом;
			
			ЕстьДополнительнаяСтрока = Истина;
			
		ИначеЕсли ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСНеВыполненнымиУсловиями > 0
			ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовСНеВыполненнымиУсловиями > 0 Тогда
			
			ПредставлениеСтрокиУсловий = НСтр("ru = 'Требуется подтверждение условий по'");
			ПозицийМаршрутов = ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовСНеВыполненнымиУсловиями;
			ПозицийТоваров   = ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСНеВыполненнымиУсловиями;
			
			ЕстьДополнительнаяСтрока = Истина;
			ЕстьГиперссылка = Истина;
			
		ИначеЕсли ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСВыполненнымиУсловиями > 0
			ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовСВыполненнымиУсловиями > 0 Тогда
			
			ПредставлениеСтрокиУсловий = НСтр("ru = 'Указано подтверждение условий по'");
			ПозицийМаршрутов = ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовСВыполненнымиУсловиями;
			ПозицийТоваров   = ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСВыполненнымиУсловиями;
			
			ЕстьДополнительнаяСтрока = Истина;
			ЕстьГиперссылка = Истина;
			
		КонецЕсли;
		
		Если ЕстьДополнительнаяСтрока Тогда
			
			ПараметрыСтатуса.СтатусВЕТИСПредставлениеВысота = 2;
			
			Если ЕстьНеПроверенныеПозиции Тогда
				
				СтрокаДополненияСтатуса = Новый ФорматированнаяСтрока(
					Символы.ПС + НСтр("ru = '<Необходимо проверить>'"),,
					Новый Цвет(255,0,0));
				
				ДополнительныеСтрокиСтатуса.Добавить(СтрокаДополненияСтатуса);
				
			Иначе
				
				СтрокаДополненияСтатуса = Новый ФорматированнаяСтрока(
					Символы.ПС + ПредставлениеСтрокиУсловий + " ");
				ДополнительныеСтрокиСтатуса.Добавить(СтрокаДополненияСтатуса);
				
				ПредставлениеСтрокиУсловий     = НСтр("ru = '%1 %2 и %3 %4'");
				
				ФорматнаяСтрока = "Л = ru_RU;НП=Истина";
				ПараметрПредметаИсчисленияПродукции = НСтр("ru = '|позиции,|позициям,|позициям,ж,,,,,0'");
				ПараметрПредметаИсчисленияМаршрута = НСтр("ru = '|пункту маршрута,|пунктам маршрута,|пунктам маршрута,м,,,,,0'");
				
				ПредставлениеПредметаПродукции = ЧислоПрописью(ПозицийТоваров,   ФорматнаяСтрока, ПараметрПредметаИсчисленияПродукции);
				ПредставлениеПредметаМаршрута  = ЧислоПрописью(ПозицийМаршрутов, ФорматнаяСтрока, ПараметрПредметаИсчисленияМаршрута);
				
				ПредставлениеПредметаПродукции = Сред(ПредставлениеПредметаПродукции, Найти(ПредставлениеПредметаПродукции, "|") + 1);
				ПредставлениеПредметаМаршрута  = Сред(ПредставлениеПредметаМаршрута, Найти(ПредставлениеПредметаМаршрута, "|") + 1);
				
				ПредставлениеСтрокиУсловий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ПредставлениеСтрокиУсловий,
					Формат(ПозицийТоваров, "ЧН=0; ЧГ=0"),
					ПредставлениеПредметаПродукции,
					Формат(ПозицийМаршрутов, "ЧН=0; ЧГ=0"),
					ПредставлениеПредметаМаршрута);
					
				Если ЕстьГиперссылка Тогда
					СтрокаДополненияСтатуса = Новый ФорматированнаяСтрока(
						ПредставлениеСтрокиУсловий,
						Новый Шрифт(,,,,Истина),
						ЦветаСтиля.ЦветГиперссылкиГосИС,,
						"ОткрытьФормуРегионализации");
				Иначе
					СтрокаДополненияСтатуса = Новый ФорматированнаяСтрока(ПредставлениеСтрокиУсловий,,,,);
				КонецЕсли;
				
				ДополнительныеСтрокиСтатуса.Добавить(СтрокаДополненияСтатуса);
				
			КонецЕсли;
			
			ПараметрыСтатуса.СтатусВЕТИСПредставление = Новый ФорматированнаяСтрока(ДополнительныеСтрокиСтатуса);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусИПараметрыДополнения(УстановитьПараметрыОбновленияСтатуса = Истина)
	
	Если УстановитьПараметрыОбновленияСтатуса Тогда
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса(ПараметрыДополненияСтатусаВЕТИС(ЭтотОбъект));
	КонецЕсли;
	
	ОбновитьСтатусВЕТИС();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПеремещениеМеждуРегионамиСервер(Маршрут)
	Возврат РегионализацияВЕТИС.ЕстьПеремещениеМеждуРегионами(Маршрут);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьПеремещениеМеждуРегионами(Форма)
	
	МассивСтрок = Новый Массив;
	
	// В табличной части Маршрут возврата предполагается небольшое количество строк.
	Для каждого СтрокаТЧ Из Форма.Объект.Маршрут Цикл
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("Предприятие", СтрокаТЧ.Предприятие);
		ДанныеСтроки.Вставить("ДанныеАдреса", СтрокаТЧ.ДанныеАдресаСтруктура);
		МассивСтрок.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Предприятие", Форма.Объект.ГрузополучательПредприятие);
	ДанныеСтроки.Вставить("ДанныеАдреса", Неопределено);
	МассивСтрок.Добавить(ДанныеСтроки);
	
	Если МассивСтрок.Количество() < 2 Тогда
		Возврат Ложь;
	Иначе
		Возврат ЕстьПеремещениеМеждуРегионамиСервер(МассивСтрок);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыДополненияСтатусаВЕТИС(Форма)
	
	Объект = Форма.Объект;
	НетПеревозки = Объект.ГрузоотправительПредприятие = Объект.ГрузополучательПредприятие И ЗначениеЗаполнено(Объект.ГрузоотправительПредприятие);
	Если НетПеревозки Тогда
		ЕстьПеремещениеМеждуРегионами = Ложь;
	Иначе
		ЕстьПеремещениеМеждуРегионами = ЕстьПеремещениеМеждуРегионами(Форма);
	КонецЕсли;
	
	ПараметрыДополнения = Новый Структура;
	ПараметрыДополнения.Вставить("ПозицийТоваровСЗапретом",                  Объект.Товары.Итог("РегионализацияЗапрещено"));
	ПараметрыДополнения.Вставить("ПозицийТоваровСРазрешением",               Объект.Товары.Итог("РегионализацияРазрешено"));
	ПараметрыДополнения.Вставить("ПозицийТоваровСВыполненнымиУсловиями",     Объект.Товары.Итог("РегионализацияРазрешеноСВыполненнымиУсловиями"));
	ПараметрыДополнения.Вставить("ПозицийТоваровСНеВыполненнымиУсловиями",   Объект.Товары.Итог("РегионализацияРазрешеноСНеВыполненнымиУсловиями"));
	ПараметрыДополнения.Вставить("ПозицийТоваровНаПроверку",                 Объект.Товары.Итог("РегионализацияНеЗаполнено"));
	
	ПараметрыДополнения.Вставить("ПозицийМаршрутовСЗапретом",                Объект.Маршрут.Итог("РегионализацияЗапрещено"));
	ПараметрыДополнения.Вставить("ПозицийМаршрутовСРазрешением",             Объект.Маршрут.Итог("РегионализацияРазрешено"));
	ПараметрыДополнения.Вставить("ПозицийМаршрутовСВыполненнымиУсловиями",   Объект.Маршрут.Итог("РегионализацияРазрешеноСВыполненнымиУсловиями"));
	ПараметрыДополнения.Вставить("ПозицийМаршрутовСНеВыполненнымиУсловиями", Объект.Маршрут.Итог("РегионализацияРазрешеноСНеВыполненнымиУсловиями"));
	ПараметрыДополнения.Вставить("ПозицийМаршрутовНаПроверку",               Объект.Маршрут.Итог("РегионализацияНеЗаполнено"));
	
	ПараметрыДополнения.Вставить("ПроверятьНаРегионализацию",                ЕстьПеремещениеМеждуРегионами);
	
	ПараметрыДополнения.Вставить("УсловияВыполнены", (ПараметрыДополнения.ПозицийТоваровСНеВыполненнымиУсловиями = 0
	                                                И ПараметрыДополнения.ПозицийМаршрутовСНеВыполненнымиУсловиями = 0));
	
	ПараметрыДополнения.Вставить("ПравилаРегионализацииЗаполнены", (ПараметрыДополнения.ПозицийТоваровНаПроверку = 0
	                                                              И ПараметрыДополнения.ПозицийМаршрутовНаПроверку = 0));
	
	Возврат ПараметрыДополнения;
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыОбновленияСтатуса(ПараметрыДополненияСтатусаВЕТИС)
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ПроверятьНаРегионализацию", ПараметрыДополненияСтатусаВЕТИС.ПроверятьНаРегионализацию);
	ДанныеДокумента.Вставить("ЕстьНеПроверенныеСтроки", НЕ ПараметрыДополненияСтатусаВЕТИС.ПравилаРегионализацииЗаполнены);
	ДанныеДокумента.Вставить("ПеремещениеЗапрещено",
		ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСЗапретом <> 0
		ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовСЗапретом <> 0);
	ДанныеДокумента.Вставить("ПеремещениеРазрешеноПриВыполненииУсловий", 
		ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСВыполненнымиУсловиями <> 0
		ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСНеВыполненнымиУсловиями <> 0
		ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовСВыполненнымиУсловиями <> 0
		ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовСНеВыполненнымиУсловиями <> 0);
	ДанныеДокумента.Вставить("ПеремещениеРазрешено", 
		ПараметрыДополненияСтатусаВЕТИС.ПозицийТоваровСРазрешением <> 0
		ИЛИ ПараметрыДополненияСтатусаВЕТИС.ПозицийМаршрутовСРазрешением <> 0);
	ДанныеДокумента.Вставить("УсловияВыполнены", ПараметрыДополненияСтатусаВЕТИС.УсловияВыполнены);
	
	СтатусИДальнейшиеДействия = Документы.ИсходящаяТранспортнаяОперацияВЕТИС.СтатусИДальнейшиеДейстияВозможностиПеремещения(
		ДанныеДокумента);
	
	Возврат РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
		СтатусИДальнейшиеДействия.Статус,
		СтатусИДальнейшиеДействия.ДальнейшиеДействия)
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьНадписьПунктыМаршрутаСтатусомРегионализации(Форма)
	
	Если Форма.Объект.ГрузоотправительПредприятие = Форма.Объект.ГрузополучательПредприятие Тогда
		Форма.НадписьПунктыМаршрутаФорматированная = "";
	Иначе
		Если Форма.Объект.Маршрут.Итог("РегионализацияНеЗаполнено") > 0
		 ИЛИ Форма.Объект.Маршрут.Количество() = 0 Тогда
			Форма.НадписьПунктыМаршрутаФорматированная = Новый ФорматированнаяСтрока(Форма.НадписьПунктыМаршрута);
		ИначеЕсли Форма.Объект.Маршрут.Итог("РегионализацияЗапрещено") > 0 Тогда
			Форма.НадписьПунктыМаршрутаФорматированная = Новый ФорматированнаяСтрока(Форма.НадписьПунктыМаршрута, БиблиотекаКартинок.ОтгрузкаЗапрещена);
		ИначеЕсли Форма.Объект.Маршрут.Итог("РегионализацияРазрешеноСНеВыполненнымиУсловиями") > 0 Тогда
			Форма.НадписьПунктыМаршрутаФорматированная = Новый ФорматированнаяСтрока(Форма.НадписьПунктыМаршрута, БиблиотекаКартинок.Предупреждение);
		Иначе
			Форма.НадписьПунктыМаршрутаФорматированная = Новый ФорматированнаяСтрока(Форма.НадписьПунктыМаршрута, БиблиотекаКартинок.ОтгрузкаРазрешена);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусВЕТИС()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ПараметрыДополненияСтатусаВЕТИС = ПараметрыДополненияСтатусаВЕТИС(ЭтотОбъект);
	ПараметрыСтатуса = ПараметрыСтатусаДокумента(ДокументОбъект,
	                                             ПараметрыОбновленияСтатуса,
	                                             ПараметрыДополненияСтатусаВЕТИС,
	                                             Объект.ГрузоотправительХозяйствующийСубъект);
	
	ДополнитьНадписьПунктыМаршрутаСтатусомРегионализации(ЭтотОбъект);
	
	СтатусВЕТИС = ПараметрыСтатуса.СтатусВЕТИС;
	СтатусВЕТИСПредставление = ПараметрыСтатуса.СтатусВЕТИСПредставление;
	Элементы.СтатусВЕТИС.Высота = ПараметрыСтатуса.СтатусВЕТИСПредставлениеВысота;
	
	#Область БлокировкаРеквизитовВЗависимостиОтСтатуса
	
	РедактированиеФормыНеДоступно = СтатусВЕТИС <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Черновик")
	                                    И СтатусВЕТИС <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияОшибка")
	                                    И СтатусВЕТИС <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Ошибка")
	                                    И СтатусВЕТИС <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеРазрешено")
	                                    И СтатусВЕТИС <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеРазрешеноСУсловиями")
	                                    И СтатусВЕТИС <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеЗапрещено");
	
	Элементы.ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное.ТолькоПросмотр = РедактированиеФормыНеДоступно;
	
	Элементы.СтраницаДополнительно.ТолькоПросмотр = РедактированиеФормыНеДоступно;
	
	Исключения = "ТоварыНайти, ТоварыОтменитьПоиск, ТоварыСгенерироватьСерии, ТоварыКонтекстноеМенюКопированиеИВыделение, СвернутьПанель"
		+ ", РазвернутьПанель, ТоварыГруппаНоменклатура, ТоварыКоличество";
	
	ИнтеграцияВЕТИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(Элементы.СтраницаТовары,
		НЕ РедактированиеФормыНеДоступно, Исключения);
	
	#КонецОбласти

	#Область ОшибкиВетИС
	Если СтатусВЕТИС = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Ошибка Тогда
		ТаблицаОшибок = ИнтеграцияВЕТИСВызовСервера.ПолучитьТаблицуОшибок(ДокументОбъект.Ссылка);
		Если ТаблицаОшибок <> Неопределено Тогда
			Для Каждого Ошибка Из ТаблицаОшибок Цикл
				СтрокиТоваровПоНомеру = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", Ошибка.НомерСтрокиСОшибкой));
				Для Каждого СтрокаТоваров Из СтрокиТоваровПоНомеру Цикл
					СтрокаТоваров.ЕстьОшибки = 1;
					СтрокаТоваров.Ошибка     = Ошибка.КодОшибки+": "+Ошибка.ОписаниеОшибки;
				КонецЦикла;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТоваров Из Объект.Товары Цикл
				СтрокаТоваров.ЕстьОшибки = 0;
				СтрокаТоваров.Ошибка     = "";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти

КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусыПослеПринятияОтветаРегионализации()
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеЗапрещено);
	Массив.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеРазрешено);
	Массив.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеРазрешеноСУсловиями);
	Массив.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияОшибка);
	Массив.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.КОформлению);
	Массив.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Обрабатывается);
	Массив.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Ошибка);
	Массив.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ВСДОформлены);
	Массив.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ВСДОформленыЧерезWeb);
	
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Оформить" Тогда
		
		ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи();
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.Оформите");
		
		ИнтеграцияВЕТИСКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи);

	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПроверитьКорректностьДанных" Тогда

		ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи();
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных");

		ИнтеграцияВЕТИСКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПроверитьВозможностьПеремещения" Тогда
		
		ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи();
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения");
		
		ИнтеграцияВЕТИСКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуРегионализации"
		ИЛИ НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитеУсловияПеремещения" Тогда
		
		ОткрытьФормуРегионализации();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияВЕТИСКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачу" Тогда
		
		ИнтеграцияВЕТИСКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ВЕТИСПрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьКорректностьДокументаСозданногоЧерезWeb" Тогда
		
		ИнтеграцияВЕТИСКлиент.ПодтвердитьКорректностьДокументаСозданногоЧерезWeb(Объект.Ссылка);
		
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "НетДоступа") Тогда
		
		УточнениеГиперссылки = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки,"НетДоступа","");
		ИнтеграцияВЕТИСКлиент.ПредупредитьОбОтсутствииДоступа(УточнениеГиперссылки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусВЕТИСОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьКомандуЗаполнитьЗаписиСкладскогоЖурнала()
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ГрузоотправительХозяйствующийСубъект) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Хозяйствующий субъект (грузоотправитель)""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка, 
			"Объект.ГрузоотправительХозяйствующийСубъект",,
			Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ГрузоотправительПредприятие) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Предприятие (грузоотправитель)""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка, 
			"Объект.ГрузоотправительПредприятие",,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеПользователю = ЗаполнитьЗаписиСкладскогоЖурналаНаСервере();
	
	ПоказатьОповещениеПользователя(
		СообщениеПользователю.ЗаголовокСообщения,,
		СообщениеПользователю.ТекстСообщения,
		СообщениеПользователю.КартинкаСообщения);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЗаписиСкладскогоЖурналаНаСервере()
	
	СписокСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		СписокСтрок.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	РезультатЗаполнения = Документы.ИсходящаяТранспортнаяОперацияВЕТИС.ЗаполнитьЗаписиСкладскогоЖурнала(Объект, СписокСтрок);
	ЗаполнитьПроизводителейПоЗаписямЖурнала();
	
	Возврат РезультатЗаполнения.СообщениеПользователю;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, ИдентификаторСтроки = Неопределено, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	Иначе 
		ТекущиеДанные = Неопределено;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПанельВСДСвернута")
		Или Инициализация Тогда
		
		Элементы.ГруппаТоварыПанель.Видимость = Не Форма.ПанельВСДСвернута;
		Элементы.ГруппаТоварыПанельСвернута.Видимость = Форма.ПанельВСДСвернута;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ГрузоотправительХозяйствующийСубъект")
		Или СтруктураРеквизитов.Свойство("ГрузоотправительПредприятие")
		Или Инициализация Тогда
		
		ДанныеПредставлений = ПолучитьПредставленияСопоставленийИБлагополучиеМестности(
			Объект.ГрузоотправительХозяйствующийСубъект,
			Объект.ГрузоотправительПредприятие);
		
		ИнформацияГрузоотправителя = ДанныеПредставлений.ИнформацияГрузоотправителя;
		
		Форма.ГрузоотправительСопоставлениеХСДляОтбораОснований                = ИнформацияГрузоотправителя.КонтрагентХозяйствующегоСубъекта.Ссылка;
		Форма.ПредставлениеСопоставленияХозяйствующегоСубъектаГрузоотправителя = ИнформацияГрузоотправителя.КонтрагентХозяйствующегоСубъекта.Представление;
		
		Если Форма.ГрузоотправительСопоставлениеХСДляОтбораОснований.Количество() = 0
			И Не ЗначениеЗаполнено(Объект.ГрузоотправительХозяйствующийСубъект)
			И ЗначениеЗаполнено(Форма.ГрузоотправительИзОснованияДляОтбораХС) Тогда
			Форма.ПредставлениеСопоставленияХозяйствующегоСубъектаГрузоотправителя = Новый ФорматированнаяСтрока(
				Строка(Форма.ГрузоотправительИзОснованияДляОтбораХС),,,,
				ПолучитьНавигационнуюСсылку(Форма.ГрузоотправительИзОснованияДляОтбораХС));
		ИначеЕсли Форма.ГрузоотправительСопоставлениеХСДляОтбораОснований.Количество() = 0
			И ЗначениеЗаполнено(Объект.ГрузоотправительХозяйствующийСубъект)
			И ЗначениеЗаполнено(Форма.ГрузоотправительИзОснованияДляОтбораХС) Тогда
			
			ПредставлениеСопоставленияХозяйствующегоСубъектаГрузоотправителя = Новый ФорматированнаяСтрока(
				Строка(Форма.ГрузоотправительИзОснованияДляОтбораХС),,,,
				ПолучитьНавигационнуюСсылку(Форма.ГрузоотправительИзОснованияДляОтбораХС));
			ТекстНеСопоставлено = Новый ФорматированнаяСтрока(
				НСтр("ru = '<не сопоставлено>'"),,
				WebЦвета.Красный);
			Форма.ПредставлениеСопоставленияХозяйствующегоСубъектаГрузоотправителя = Новый ФорматированнаяСтрока(
				ПредставлениеСопоставленияХозяйствующегоСубъектаГрузоотправителя, " ", ТекстНеСопоставлено);
			
		КонецЕсли;
		
		Форма.ГрузоотправительСопоставлениеПредприятияДляОтбораОснований = ИнформацияГрузоотправителя.ТорговыйОбъект.Ссылка;
		Форма.ПредставлениеСопоставленияПредприятияГрузоотправителя      = ИнформацияГрузоотправителя.ТорговыйОбъект.Представление;
		
		Если (Не ЗначениеЗаполнено(Объект.ГрузоотправительПредприятие)
			И ЗначениеЗаполнено(Форма.ГрузоотправительИзОснованияДляОтбораПредприятий))
			Или Форма.ГрузоотправительСопоставлениеПредприятияДляОтбораОснований.НайтиПоЗначению(Форма.ГрузоотправительИзОснованияДляОтбораПредприятий) <> Неопределено Тогда
			Форма.ПредставлениеСопоставленияПредприятияГрузоотправителя = Новый ФорматированнаяСтрока(
				Строка(Форма.ГрузоотправительИзОснованияДляОтбораПредприятий),,,,
				ПолучитьНавигационнуюСсылку(Форма.ГрузоотправительИзОснованияДляОтбораПредприятий));
		ИначеЕсли ЗначениеЗаполнено(Объект.ГрузоотправительПредприятие)
			И ЗначениеЗаполнено(Форма.ГрузоотправительИзОснованияДляОтбораПредприятий)
			И Форма.ГрузоотправительСопоставлениеПредприятияДляОтбораОснований.НайтиПоЗначению(Форма.ГрузоотправительИзОснованияДляОтбораПредприятий) = Неопределено Тогда
			
			ПредставлениеСопоставленияПредприятияГрузоотправителя = Новый ФорматированнаяСтрока(
				Строка(Форма.ГрузоотправительИзОснованияДляОтбораПредприятий),,,,
				ПолучитьНавигационнуюСсылку(Форма.ГрузоотправительИзОснованияДляОтбораПредприятий));
			ТекстНеСопоставлено = Новый ФорматированнаяСтрока(
				НСтр("ru = '<не сопоставлено>'"),,
				WebЦвета.Красный);
			Форма.ПредставлениеСопоставленияПредприятияГрузоотправителя = Новый ФорматированнаяСтрока(
				ПредставлениеСопоставленияПредприятияГрузоотправителя, " ", ТекстНеСопоставлено);
			
		КонецЕсли;
		
		СопоставленныйОбъект = ИнформацияГрузоотправителя.ТорговыйОбъект.Ссылка;
		Если ЗначениеЗаполнено(Форма.ГрузоотправительИзОснованияДляОтбораПредприятий) Тогда
			Объект.ТорговыйОбъект = Форма.ГрузоотправительИзОснованияДляОтбораПредприятий;
		ИначеЕсли СопоставленныйОбъект <> Неопределено И СопоставленныйОбъект.Количество() > 0 Тогда
			Объект.ТорговыйОбъект = СопоставленныйОбъект.Получить(0).Значение;
		Иначе
			Объект.ТорговыйОбъект = Неопределено;
		КонецЕсли;
		
		УстановитьВидимостьЭлементовСерий(Элементы, Форма.ПараметрыУказанияСерий);
		
		Элементы.ТоварыПанельБлагополучиеМестности.СписокВыбора.ЗагрузитьЗначения(ДанныеПредставлений.БлагополучиеМестности);
		
		Элементы.ГрузоотправительПредприятие.Доступность = ЗначениеЗаполнено(Объект.ГрузоотправительХозяйствующийСубъект);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ГрузополучательХозяйствующийСубъект")
		Или СтруктураРеквизитов.Свойство("ГрузополучательПредприятие")
		Или Инициализация Тогда
		
		ИнформацияГрузополучателя = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Объект.ГрузополучательХозяйствующийСубъект,
			Объект.ГрузополучательПредприятие,
			"Грузополучатель");
		
		Форма.ГрузополучательСопоставлениеХСДляОтбораОснований                = ИнформацияГрузополучателя.КонтрагентХозяйствующегоСубъекта.Ссылка;
		Форма.ПредставлениеСопоставленияХозяйствующегоСубъектаГрузополучателя = ИнформацияГрузополучателя.КонтрагентХозяйствующегоСубъекта.Представление;
		
		Если Форма.ГрузополучательСопоставлениеХСДляОтбораОснований.Количество() = 0
			И Не ЗначениеЗаполнено(Объект.ГрузополучательХозяйствующийСубъект)
			И ЗначениеЗаполнено(Форма.ГрузополучательИзОснованияДляОтбораХС) Тогда
			Форма.ПредставлениеСопоставленияХозяйствующегоСубъектаГрузополучателя = Новый ФорматированнаяСтрока(
				Строка(Форма.ГрузополучательИзОснованияДляОтбораХС),,,,
				ПолучитьНавигационнуюСсылку(Форма.ГрузополучательИзОснованияДляОтбораХС));
		ИначеЕсли Форма.ГрузополучательСопоставлениеХСДляОтбораОснований.Количество() = 0
			И ЗначениеЗаполнено(Объект.ГрузополучательХозяйствующийСубъект)
			И ЗначениеЗаполнено(Форма.ГрузополучательИзОснованияДляОтбораХС) Тогда
			
			ПредставлениеСопоставленияХозяйствующегоСубъектаГрузополучателя = Новый ФорматированнаяСтрока(
				Строка(Форма.ГрузополучательИзОснованияДляОтбораХС),,,,
				ПолучитьНавигационнуюСсылку(Форма.ГрузополучательИзОснованияДляОтбораХС));
			ТекстНеСопоставлено = Новый ФорматированнаяСтрока(
				НСтр("ru = '<не сопоставлено>'"),,
				WebЦвета.Красный);
			Форма.ПредставлениеСопоставленияХозяйствующегоСубъектаГрузополучателя = Новый ФорматированнаяСтрока(
				ПредставлениеСопоставленияХозяйствующегоСубъектаГрузополучателя, " ", ТекстНеСопоставлено);
			
		КонецЕсли;
		
		Форма.ГрузополучательСопоставлениеПредприятияДляОтбораОснований = ИнформацияГрузополучателя.ТорговыйОбъект.Ссылка;
		Форма.ПредставлениеСопоставленияПредприятияГрузополучателя      = ИнформацияГрузополучателя.ТорговыйОбъект.Представление;
		
		Если (Не ЗначениеЗаполнено(Объект.ГрузополучательПредприятие)
			И ЗначениеЗаполнено(Форма.ГрузополучательИзОснованияДляОтбораПредприятий))
			Или Форма.ГрузополучательСопоставлениеПредприятияДляОтбораОснований.НайтиПоЗначению(Форма.ГрузополучательИзОснованияДляОтбораПредприятий) <> Неопределено Тогда
			Форма.ПредставлениеСопоставленияПредприятияГрузополучателя = Новый ФорматированнаяСтрока(
				Строка(Форма.ГрузополучательИзОснованияДляОтбораПредприятий),,,,
				ПолучитьНавигационнуюСсылку(Форма.ГрузополучательИзОснованияДляОтбораПредприятий));
		ИначеЕсли ЗначениеЗаполнено(Объект.ГрузополучательПредприятие)
			И ЗначениеЗаполнено(Форма.ГрузополучательИзОснованияДляОтбораПредприятий)
			И Форма.ГрузополучательСопоставлениеПредприятияДляОтбораОснований.НайтиПоЗначению(Форма.ГрузополучательИзОснованияДляОтбораПредприятий) = Неопределено Тогда
			
			ПредставлениеСопоставленияПредприятияГрузополучателя = Новый ФорматированнаяСтрока(
				Строка(Форма.ГрузополучательИзОснованияДляОтбораПредприятий),,,,
				ПолучитьНавигационнуюСсылку(Форма.ГрузополучательИзОснованияДляОтбораПредприятий));
			ТекстНеСопоставлено = Новый ФорматированнаяСтрока(
				НСтр("ru = '<не сопоставлено>'"),,
				WebЦвета.Красный);
			Форма.ПредставлениеСопоставленияПредприятияГрузополучателя = Новый ФорматированнаяСтрока(
				ПредставлениеСопоставленияПредприятияГрузополучателя, " ", ТекстНеСопоставлено);
			
		КонецЕсли;
		
		Элементы.ГрузополучательПредприятие.Доступность = ЗначениеЗаполнено(Объект.ГрузополучательХозяйствующийСубъект);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ГрузоотправительПредприятие")
		Или СтруктураРеквизитов.Свойство("ГрузополучательПредприятие")
		Или СтруктураРеквизитов.Свойство("ДокументОснование")
		Или Инициализация Тогда
		
		ТранспортнаяОперацияБезПеревозки = (Форма.Объект.ГрузоотправительПредприятие = Форма.Объект.ГрузополучательПредприятие);
		Если ТранспортнаяОперацияБезПеревозки Тогда
			Форма.Объект.ТТНУказан = Ложь;
		КонецЕсли;
		
		Форма.Элементы.ГруппаТТН.Видимость = НЕ ТранспортнаяОперацияБезПеревозки;
		СтруктураРеквизитов.Вставить("ТТНУказан");
		
		Форма.Элементы.ГруппаПеревозка.Видимость = НЕ ТранспортнаяОперацияБезПеревозки;
		Форма.Элементы.ТоварыГруппаОтображениеРегионализации.Видимость = НЕ ТранспортнаяОперацияБезПеревозки;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ТТНУказан")
		Или Инициализация Тогда
		
		Форма.Элементы.ГруппаСерияНомерТТН.Видимость = Форма.Объект.ТТНУказан;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СвязанныеДокументы")
		Или Инициализация Тогда
		
		ПредставлениеСвязанныхДокументов = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
			Объект.СвязанныеДокументы,
			ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиСвязанныхДокументов());
		Форма.ПредставлениеСвязанныхДокументов = 
			Новый ФорматированнаяСтрока(ПредставлениеСвязанныхДокументов,,,, "ОткрытьОбщуюФормуСвязанныеДокументы");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПеревозчикХозяйствующийСубъект")
		Или Инициализация Тогда
		
		ИнформацияПеревозчика = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Объект.ПеревозчикХозяйствующийСубъект,, "Перевозчик");
		Форма.ПредставлениеСопоставленияХозяйствующегоСубъектаПеревозчика = 
			ИнформацияПеревозчика.КонтрагентХозяйствующегоСубъекта.Представление;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ГрузоотправительХозяйствующийСубъект")
		Или СтруктураРеквизитов.Свойство("ГрузоотправительПредприятие")
		Или СтруктураРеквизитов.Свойство("ГрузополучательХозяйствующийСубъект")
		Или СтруктураРеквизитов.Свойство("ДокументОснование")
		Или СтруктураРеквизитов.Свойство("ГрузополучательПредприятие") Тогда 
		ПодключаемыеКомандыВЕТИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма,Объект);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ТранспортноеСредство")
		Или Инициализация Тогда
		
		Если Объект.Маршрут.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(Объект.Маршрут[0].ТипТранспорта) Тогда
			Цвет = ЦветТекстаПоля(Истина);
			НадписьТранспортноеСредство = НСтр("ru = '<не указано>'");
		Иначе
			Цвет = Неопределено;
			СтрокаТабЧасти = Объект.Маршрут[0];
			ПредставлениеДанныхТранспортногоСредства = ИнтеграцияВЕТИСКлиентСервер.ПредставлениеДанныхТранспортногоСредства(
				СтрокаТабЧасти, Ложь);
			НадписьТранспортноеСредство = СтрШаблон(
				?(ПустаяСтрока(ПредставлениеДанныхТранспортногоСредства), "%1%2", "%1 (%2)"),
				СтрокаТабЧасти.ТипТранспорта,
				ПредставлениеДанныхТранспортногоСредства);
		КонецЕсли;
		Форма.ПредставлениеТранспортногоСредства = Новый ФорматированнаяСтрока(НадписьТранспортноеСредство,,Цвет,,"ОткрытьОбщуюФормуТранспортноеСредство");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Маршрут")
		Или Инициализация Тогда
		
		Форма.НадписьПунктыМаршрута = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
			Объект.Маршрут,
			ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиМаршрута());
			
		Если ЗначениеЗаполнено(Объект.ГрузополучательПредприятие) Тогда
			Форма.НадписьПунктыМаршрута = СтрШаблон("%1 - %2", 
				Форма.НадписьПунктыМаршрута,
				Объект.ГрузополучательПредприятие);
		КонецЕсли;
			
		ДополнитьНадписьПунктыМаршрутаСтатусомРегионализации(Форма);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Товары") И ТекущиеДанные <> Неопределено Тогда
		Элементы.ТоварыПанельГруппаЖивотныеНаТерриторииТС.Видимость   = ТекущиеДанные.ТипЖивыеЖивотные;
		Элементы.ТоварыПанельПредставлениеУпаковкиШтрихкоды.Видимость = Не ТекущиеДанные.ТипЖивыеЖивотные;
		Элементы.ТоварыПанельТипПроисхождения.Видимость               = ТекущиеДанные.ТребуетсяТипПроисхождения;
		Элементы.ТоварыПанельГруппаОшибка.Видимость                   = ТекущиеДанные.ЕстьОшибки;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПериодНахожденияТС")
		ИЛИ (СтруктураРеквизитов.Свойство("Товары") И ТекущиеДанные<> Неопределено) Тогда
		
		Элементы.ТоварыПанельКоличествоПериодовНахожденияЖивотныхНаТерриторииТС.АвтоОтметкаНезаполненного = 
			ТекущиеДанные.ПериодНахожденияЖивотныхНаТерриторииТС = ПредопределенноеЗначение("Перечисление.ПериодыНахожденияЖивотныхНаТерриторииТСВЕТИС.ЗначениеВМесяцах");
		Элементы.ТоварыПанельКоличествоПериодовНахожденияЖивотныхНаТерриторииТС.Доступность = 
			ТекущиеДанные.ПериодНахожденияЖивотныхНаТерриторииТС = ПредопределенноеЗначение("Перечисление.ПериодыНахожденияЖивотныхНаТерриторииТСВЕТИС.ЗначениеВМесяцах");
		
	КонецЕсли;
	
	КоличествоМаршрутов = Объект.Маршрут.Количество();
	Если КоличествоМаршрутов Тогда
		
		ОтборПерегонов = Новый Структура("ТипТранспорта", ПредопределенноеЗначение("Перечисление.ТипыТранспортаВЕТИС.ПерегонСкота"));
		Элементы.СпособХранения.Видимость = Не Объект.Маршрут.НайтиСтроки(ОтборПерегонов).Количество() = КоличествоМаршрутов;
		
	Иначе
		Элементы.СпособХранения.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредставленияСопоставленийИБлагополучиеМестности(ГрузоотправительХозяйствующийСубъект, ГрузоотправительПредприятие)
	
	Результат = Новый Структура;
	Результат.Вставить("ИнформацияГрузоотправителя",
		ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			ГрузоотправительХозяйствующийСубъект,
			ГрузоотправительПредприятие,
			"Грузоотправитель"));
	Результат.Вставить("БлагополучиеМестности",
		ЗаполнениеОбъектовПоСтатистикеВЕТИС.БлагополучиеМестностиПоПредприятию(
			ГрузоотправительПредприятие));
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ТоварыПродукцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                             СтрокаТабличнойЧасти.Продукция);
	ПараметрыФормы.Вставить("РежимВыбора",                      Истина);
	ПараметрыФормы.Вставить("ИсключитьПродукциюТретьегоУровня", ИсключитьПродукциюТретьегоУровня);
	ПараметрыФормы.Вставить("ЗаписьСкладскогоЖурнала",          СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурнала);
	
	ОткрытьФорму("Справочник.ПродукцияВЕТИС.Форма.ФормаСписка", ПараметрыФормы, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОтборыПоОснованию(ДокументОснование, Форма, НастроитьЗависимыеЭлементыФормы = Истина)
	
	ОтборыПоОснованию = Неопределено;
	Если ДокументОснование <> Неопределено Тогда 
		ОтборыПоОснованию = ИнтеграцияВЕТИСВызовСервера.ОтборыДляРеквизитовДокументаПоОснованию(Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС"), ДокументОснование);
	КонецЕсли;
	
	Если ОтборыПоОснованию <> Неопределено Тогда
		Форма.ГрузоотправительИзОснованияДляОтбораХС = ОтборыПоОснованию.ГрузоотправительХозяйствующийСубъект;
		Форма.ГрузоотправительИзОснованияДляОтбораПредприятий = ОтборыПоОснованию.ГрузоотправительПредприятие;
		Форма.ГрузополучательИзОснованияДляОтбораХС = ОтборыПоОснованию.ГрузополучательХозяйствующийСубъект;
		Форма.ГрузополучательИзОснованияДляОтбораПредприятий = ОтборыПоОснованию.ГрузополучательПредприятие;
	Иначе 
		Форма.ГрузоотправительИзОснованияДляОтбораХС = Неопределено;
		Форма.ГрузоотправительИзОснованияДляОтбораПредприятий = Неопределено;
		Форма.ГрузополучательИзОснованияДляОтбораХС = Неопределено;
		Форма.ГрузополучательИзОснованияДляОтбораПредприятий = Неопределено;
	КонецЕсли;
	
	Если НастроитьЗависимыеЭлементыФормы Тогда
		НастроитьЗависимыеЭлементыФормы(Форма,,"ДокументОснование");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьУсловияРегионализацииСервер()
	
	// Передаем только выполненные условия для сокращения объема данных
	ВыполненныеУсловия = Объект.Регионализация.Выгрузить(Новый Структура("УсловиеВыполняется", Истина));
	Возврат ПоместитьВоВременноеХранилище(ВыполненныеУсловия, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРегионализации(ДополнительныйОтбор = Неопределено)
	
	ПараметрыДополнения = ПараметрыДополненияСтатусаВЕТИС(ЭтотОбъект);
	Если ПараметрыДополнения.ПозицийТоваровСВыполненнымиУсловиями = 0
	   И ПараметрыДополнения.ПозицийТоваровСНеВыполненнымиУсловиями = 0
	   И ПараметрыДополнения.ПозицийМаршрутовСВыполненнымиУсловиями = 0
	   И ПараметрыДополнения.ПозицийМаршрутовСНеВыполненнымиУсловиями = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыОткрываемойФормы = Новый Структура;
	ПараметрыОткрываемойФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыОткрываемойФормы.Вставить("АдресХраненияУсловияРегионализации", ПоместитьУсловияРегионализацииСервер());
	Если НЕ ДополнительныйОтбор = Неопределено Тогда
		Для каждого КлючИЗначение Из ДополнительныйОтбор Цикл
			ПараметрыОткрываемойФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	ПараметрыОткрываемойФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр или РедактированиеФормыНедоступно);
	
	ОткрытьФорму("Обработка.УсловияРегионализацииВЕТИС.Форма.УсловияРегионализации",
		ПараметрыОткрываемойФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("ОбработкаИзмененияУсловийРегионализации", ЭтотОбъект, ДополнительныйОтбор),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияУсловийРегионализации(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьПараметрыРегионализацииСервер(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПараметрыРегионализацииСервер(Результат)
	
	Модифицированность = Истина;
	
	Изменения = ПолучитьИзВременногоХранилища(Результат.РезультатАдрес);
	
	Объект.Регионализация.Загрузить(Изменения.Регионализация);
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		Если СтрокаТЧ.РезультатПроверкиПравилРегионализации = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий Тогда
			СтрокаТЧ.УсловияРегионализацииВыполнены = Изменения.ВыполнениеУсловийПоВидамПродукции.Получить(СтрокаТЧ.ВидПродукцииВЕТИС);
			РассчитатьРеквизитыРегионализации(СтрокаТЧ, "Товары");
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из Объект.Маршрут Цикл
		Если СтрокаТЧ.РезультатПроверкиПравилРегионализации = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий Тогда
			СтрокаТЧ.УсловияРегионализацииВыполнены = Изменения.ВыполнениеУсловийПоНомерамМаршрутов.Получить(СтрокаТЧ.НомерСтроки);
			РассчитатьРеквизитыРегионализации(СтрокаТЧ, "Маршрут");
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСтатусИПараметрыДополнения();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере(Результат, ДополнительныеПараметры, КэшированныеЗначения, ИдентификаторСтрокиТовары)
	
	Если ИдентификаторСтрокиТовары <> Неопределено Тогда
		ИзменяемаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтрокиТовары);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ТоварыЗаписьСкладскогоЖурналаДобавление")
		Или ДополнительныеПараметры.Свойство("ТоварыЗаписьСкладскогоЖурнала") Тогда
		
		НоваяСтрока = ДополнительныеПараметры.Свойство("ТоварыЗаписьСкладскогоЖурналаДобавление");
		Если НоваяСтрока Тогда
			ЗаполнитьРеквизитыПоУмолчаниюНовойСтрокиТовары(ИзменяемаяСтрока, Элементы.ТоварыПанельБлагополучиеМестности.СписокВыбора[0].Значение);
		Иначе
			ИнтеграцияВЕТИСКлиентСервер.ОчиститьДанныеУпаковокШтрихкодовПоСтроке(Объект, ИзменяемаяСтрока.ИдентификаторСтроки);
		КонецЕсли;
		ЗаполнитьСтрокуПоДаннымЗаписиСкладскогоЖурнала(ИзменяемаяСтрока);
		ИнтеграцияВЕТИС.ЗаполнитьСопоставленныеТовары(
			Объект.Товары,
			НоменклатураДляВыбора,
			ИзменяемаяСтрока.Продукция,
			ИзменяемаяСтрока.ЗаписьСкладскогоЖурнала,
			Истина);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
		ЗаполнитьСтатусыУказанияСерийСервер();
		ЗаполнитьПроизводителейПоЗаписямЖурнала(ИзменяемаяСтрока.ЗаписьСкладскогоЖурнала);
		ЗаполнитьПредставлениеВСДПоСтроке(ИзменяемаяСтрока, ЭтаФорма.ТекстЗапрещеннойЯчейкиЦвет);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ТоварыПродукция")
		Или ДополнительныеПараметры.Свойство("ТоварыЗаписьСкладскогоЖурналаДобавление")
		Или ДополнительныеПараметры.Свойство("ТоварыЗаписьСкладскогоЖурнала") Тогда
		
		Действия = ДействияПриОбновленииРеквизитаТабличнойЧастиТовары();
		Действия.ОбновитьТипЖивыеЖивотные = Истина;
		Действия.ОбновитьВидПродукцииВЕТИС = Истина;
		Действия.ОбновитьТребованиеТипаПроисхождения = Истина;
		Действия.ЗаполнитьСписокВыбораДопустимыхЦелей = Истина;
		ИнтеграцияВЕТИС.ПроверитьОчиститьЕдиницуИзмеренияВЕТИС(ИзменяемаяСтрока);
		ДанныеСтроки = ДанныеСтрокиТабличнойЧастиТовары(ИзменяемаяСтрока);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КэшируемыеПараметрыРегионализации", КэшируемыеПараметрыРегионализации);
		РасчетСтрокиТоварыНаСервере(ДанныеСтроки, Действия, ДополнительныеПараметры);
		ЗаполнитьЗначенияСвойств(ИзменяемаяСтрока, ДанныеСтроки);
		
		ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС              = ИзменяемаяСтрока.ЕдиницаИзмеренияВЕТИС;
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
		
		СобытияФормВЕТИСПереопределяемый.ПриИзмененииКоличестваВЕТИС(ЭтотОбъект, ИзменяемаяСтрока,
			КэшированныеЗначения, ПараметрыЗаполнения);
		
		ОбновитьСтатусИПараметрыДополнения();
		ЗаполнитьСлужебныеРеквизитыТоваров(ИзменяемаяСтрока, "Продукция", Новый Структура("Объект", Объект));
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ТоварыЗаписьСкладскогоЖурналаДобавление")
		Или ДополнительныеПараметры.Свойство("ТоварыЗаписьСкладскогоЖурнала") Тогда
		
		ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС              = ИзменяемаяСтрока.ЕдиницаИзмеренияВЕТИС;
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
		
		СобытияФормВЕТИСПереопределяемый.ПриИзмененииКоличестваВЕТИС(ЭтотОбъект, ИзменяемаяСтрока, Неопределено, ПараметрыЗаполнения);
		
		ЗаполнитьСлужебныеРеквизитыТоваров(ИзменяемаяСтрока, ?(НоваяСтрока,"","ТоварыЗаписьСкладскогоЖурнала"), Новый Структура("Объект,ТекстЗапрещеннойЯчейкиЦвет", Объект,ТекстЗапрещеннойЯчейкиЦвет));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяОперации = "";
	ИзменяемаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("ИмяОперации", ИмяОперации);
		Если ДополнительныеПараметры.Свойство("ИзменяемаяСтрока") Тогда
			ИзменяемаяСтрока = ДополнительныеПараметры.ИзменяемаяСтрока;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Строка") Тогда
		ИмяОперации = ДополнительныеПараметры;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзменяемаяСтрока = Неопределено Тогда
		ИдентификаторСтроки = Неопределено;
	Иначе 
		ИдентификаторСтроки = ИзменяемаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если СтруктураРеквизитовИзменяемыхНаСервере().Свойство(ИмяОперации) Тогда
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить(ИмяОперации, Неопределено);
		ОбновитьДанныеНаСервере(Результат, ПараметрыОперации, КэшированныеЗначения, ИдентификаторСтроки);
		Возврат;
	КонецЕсли;
	
	Если ИмяОперации = "ТоварыНоменклатура" Тогда
		ОбновитьДанныеПриИзмененииНоменклатуры(ИдентификаторСтроки, Результат, КэшированныеЗначения);
		Возврат;
	КонецЕсли;
	
	Если ИмяОперации = "ТоварыХарактеристика" Тогда
		ОбновитьДанныеПриИзмененииХарактеристики(ИдентификаторСтроки, Результат, КэшированныеЗначения);
		Возврат;
	КонецЕсли;
	
	Если ИмяОперации = "ТоварыСерия" И ПараметрыУказанияСерий <> Неопределено Тогда
		
		ИзменяемаяСтрока.Серия = Результат;
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект, ПараметрыУказанияСерий, ИзменяемаяСтрока);
		ЗаполнитьСлужебныеРеквизитыТоваров(ИзменяемаяСтрока, "Серия");
		Модифицированность = Истина;
		
	КонецЕсли;

	Если ИмяОперации = "СвязанныеДокументы"
		И Результат <> Неопределено 
		И ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		Объект.СвязанныеДокументы.Очистить();
		Для каждого СтрокаЗаполнения Из Результат Цикл
			НоваяСтрокаСвязанныхДокументов = Объект.СвязанныеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСвязанныхДокументов, СтрокаЗаполнения);
		КонецЦикла;
		Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			НайденныйДокументОснование = ПоискДокументаОснованияПоНомеруИДате(Объект.СвязанныеДокументы);
			Если ЗначениеЗаполнено(НайденныйДокументОснование) Тогда
				Объект.ДокументОснование = НайденныйДокументОснование;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяОперации = "ТранспортноеСредство" И Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Объект.Маршрут.Количество() = 0 Тогда
			СтрокаТабЧасти = Объект.Маршрут.Добавить();
		Иначе
			СтрокаТабЧасти = Объект.Маршрут[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабЧасти,
			Результат,
			"ТранспортноеСредство,ТипТранспорта,НомерТранспортногоСредства,НомерАвтомобильногоПрицепа,НомерАвтомобильногоКонтейнера");
		
		Если Не ЗначениеЗаполнено(Объект.СпособХранения) Тогда
			
			Результат.Вставить("СпособХранения");
			Результат.Вставить("ПеревозчикХозяйствующийСубъект");
			ЗаполнитьРеквизитыПеревозкиПоСтатистике(Результат);
			ЗаполнитьЗначенияСвойств(Объект, Результат, "СпособХранения,ПеревозчикХозяйствующийСубъект");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяОперации = "ТоварыНизкокачественнаяПродукция" Тогда
		
		ИзменяемаяСтрока.Цель = Неопределено;
		ЗаполнитьСписокВыбораДопустимыхЦелейНаСервереОбновитьКэш(ИзменяемаяСтрока.Продукция, ИзменяемаяСтрока.НизкокачественнаяПродукция);
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, ?(ИзменяемаяСтрока = Неопределено, Неопределено, ИзменяемаяСтрока.ПолучитьИдентификатор()), ИмяОперации);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПеревозкиПоСтатистике(Реквизиты)
	
	ДанныеПеревозки = ЗаполнениеОбъектовПоСтатистикеВЕТИС.РеквизитыПеревозкиПоТранспортномуСредству(Реквизиты);
	ЗаполнитьЗначенияСвойств(Реквизиты, ДанныеПеревозки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПриИзмененииНоменклатуры(ИдентификаторСтроки, Номенклатура, КэшированныеЗначения)
	
	ИзменяемаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ИзменяемаяСтрока.Номенклатура = Номенклатура;
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС = ИзменяемаяСтрока.ЕдиницаИзмеренияВЕТИС;
	
	Если РедактированиеФормыНедоступно Тогда
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
	Иначе
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
		ПараметрыЗаполнения.ЗаполнитьПродукциюВЕТИС = Не ЗначениеЗаполнено(ИзменяемаяСтрока.ЗаписьСкладскогоЖурнала);
	КонецЕсли;
	
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = ПараметрыУказанияСерий <> Неопределено;
	ПараметрыЗаполнения.ИсключатьПродукциюТретьегоУровня = ИсключитьПродукциюТретьегоУровня
		И ЗначениеЗаполнено(ИзменяемаяСтрока.ЗаписьСкладскогоЖурнала)
		И Не ПродукцияВЕТИСВызовСервера.ЗаписьЖурналаСодержитПродукциюЧетвертогоУровня(ИзменяемаяСтрока.ЗаписьСкладскогоЖурнала);
	
	ПродукцияДоИзменения = ИзменяемаяСтрока.Продукция;
	СобытияФормВЕТИСПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект,
		ИзменяемаяСтрока,
		КэшированныеЗначения,
		ПараметрыЗаполнения,
		ПараметрыУказанияСерий);
	
	Если ПродукцияДоИзменения <> ИзменяемаяСтрока.Продукция Тогда
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("ТоварыПродукция", Неопределено);
		ОбновитьДанныеНаСервере(ИзменяемаяСтрока.Продукция, ПараметрыОперации, КэшированныеЗначения, ИдентификаторСтроки);
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, ИдентификаторСтроки, "Товары");
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыТоваров(ИзменяемаяСтрока, "Номенклатура");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПриИзмененииХарактеристики(ИдентификаторСтроки, Характеристика, КэшированныеЗначения)
	
	ИзменяемаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ИзменяемаяСтрока.Характеристика = Характеристика;
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЗаполнитьПродукциюВЕТИС = НЕ РедактированиеФормыНедоступно И Не ЗначениеЗаполнено(ИзменяемаяСтрока.ЗаписьСкладскогоЖурнала);
	
	ПродукцияДоИзменения = ИзменяемаяСтрока.Продукция;
	СобытияФормВЕТИСПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ИзменяемаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	Если ПродукцияДоИзменения <> ИзменяемаяСтрока.Продукция Тогда
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("ТоварыПродукция", Неопределено);
		ОбновитьДанныеНаСервере(ИзменяемаяСтрока.Продукция, ПараметрыОперации, КэшированныеЗначения, ИдентификаторСтроки);
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, ИдентификаторСтроки, "Товары");
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыТоваров(ИзменяемаяСтрока, "Характеристика");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоискДокументаОснованияПоНомеруИДате(Знач СвязанныеДокументы)
	Возврат ЗаполнениеДокументовВЕТИС.ДокументОснованиеПоДаннымСвязанныхДокументов(СвязанныеДокументы.Выгрузить());
КонецФункции

&НаСервереБезКонтекста
Функция ПересечениеДопустимыхЦелейПоПродукциям(Знач МассивПродукции, НизкокачественнаяПродукция)
	
	Возврат ДопустимыеЦелиВЕТИС.ПересечениеДопустимыхЦелейПоПродукциям(МассивПродукции, НизкокачественнаяПродукция);

КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораЦели(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из ДополнительныеПараметры.ВыделенныеСтрокиПродукции Цикл
		Объект.Товары.НайтиПоИдентификатору(Стр).Цель = Результат;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораДопустимыхЦелейНаСервереОбновитьКэш(Продукция, НизкокачественнаяПродукция)
	
	ДеревоКэш = РеквизитФормыВЗначение("ДеревоДопустимыхЦелейКэш");
	МассивДопустимыхЦелей = ДопустимыеЦелиВЕТИС.ДопустимыеЦелиПоПродукции(Продукция, ДеревоКэш);
	ЗначениеВРеквизитФормы(ДеревоКэш, "ДеревоДопустимыхЦелейКэш");

	Элементы.ТоварыПанельЦель.СписокВыбора.Очистить();
	Элементы.ТоварыЦель.СписокВыбора.Очистить();
	Для Каждого ЭлементПродукция Из ДеревоКэш.Строки Цикл
		
		Если ЭлементПродукция.Продукция = Продукция И ЭлементПродукция.НизкокачественнаяПродукция = НизкокачественнаяПродукция Тогда
			
			Для Каждого ЭлементЦель Из ЭлементПродукция.Строки Цикл
				МассивДопустимыхЦелей.Добавить(ЭлементЦель.Цель);
			КонецЦикла;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ТоварыПанельЦель.СписокВыбора.ЗагрузитьЗначения(МассивДопустимыхЦелей);
	Элементы.ТоварыЦель.СписокВыбора.ЗагрузитьЗначения(МассивДопустимыхЦелей);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшДопустимыхЦелейПоОбъекту()
	
	ДеревоКэш = ДопустимыеЦелиВЕТИС.ДопустимыеЦелиПоПродукциям(Объект.Товары.Выгрузить().ВыгрузитьКолонку("Продукция"));
	ЗначениеВРеквизитФормы(ДеревоКэш, "ДеревоДопустимыхЦелейКэш");
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьСписокВыбораДопустимыхЦелейНаКлиенте()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивДопустимыхЦелей = Новый Массив;
	Продукция = ТекущиеДанные.Продукция;
	
	ЭлементПродукцииНайден = Ложь;
	Для Каждого ЭлементПродукция Из ДеревоДопустимыхЦелейКэш.ПолучитьЭлементы() Цикл
		Если ЭлементПродукция.Продукция = Продукция Тогда
			ЭлементПродукцииНайден = Истина;
			Для Каждого ЭлементЦель Из ЭлементПродукция.ПолучитьЭлементы() Цикл
				Если ЭлементЦель.НизкокачественнаяПродукция = ТекущиеДанные.НизкокачественнаяПродукция Тогда
					МассивДопустимыхЦелей.Добавить(ЭлементЦель.Цель);
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ТоварыПанельЦель.СписокВыбора.ЗагрузитьЗначения(МассивДопустимыхЦелей);
	Элементы.ТоварыЦель.СписокВыбора.ЗагрузитьЗначения(МассивДопустимыхЦелей);
	
	Возврат ЭлементПродукцииНайден;
	
КонецФункции

&НаСервере
Процедура ОтменитьРезультатыПроверкиРегионализации()
	
	// При изменении одной из строк маршрутов, косвенно меняются и другие строки,
	// поэтому отменяем результаты проверки регионализации.
	// Отмену флагов выполнения условий регионализации в ТЧ Регионализация не выполняем.
	ИменаТабличныхЧастей = Новый Массив;
	ИменаТабличныхЧастей.Добавить("Товары");
	ИменаТабличныхЧастей.Добавить("Маршрут");
	
	Для каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
		Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
			СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = Перечисления.РезультатыПроверкиПравилРегионализации.ПустаяСсылка();
			СтрокаТабличнойЧасти.УсловияРегионализацииВыполнены = Ложь;
			РассчитатьРеквизитыРегионализации(СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьСтатусИПараметрыДополнения();
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореНоменклатуры(Номенклатура, ДополнительныеПараметры) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		Возврат;
	ИначеЕсли Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Товары.ТекущиеДанные.Номенклатура = Номенклатура;
	ОбновитьДанные(Номенклатура, "ТоварыНоменклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораПродукции(ТекущаяСтрока)
	
	СписокВыбораНоменклатура = Элементы.ТоварыПродукция.СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	СписокВыбораНоменклатура.ЗагрузитьЗначения(ТекущаяСтрока.НоменклатураДляВыбора.ВыгрузитьЗначения());

	Если Не ЗапрещенаПродукцияТретьегоУровня(ТекущаяСтрока.ЗаписьСкладскогоЖурнала) Тогда
		СписокВыбораНоменклатура.Вставить(
			0,
			ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.ПустаяСсылка"),
			НСтр("ru='<Произвольный>'"));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораНоменклатуры(ТекущаяСтрока)
	
	СписокВыбораНоменклатура = Элементы.ТоварыНоменклатура.СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	НайденныеСтроки = НоменклатураДляВыбора.НайтиСтроки(Новый Структура("Продукция, ЗаписьСкладскогоЖурнала",
		ТекущаяСтрока.Продукция,
		ТекущаяСтрока.ЗаписьСкладскогоЖурнала));
	НоменклатураКэш = Неопределено;
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		Если СтрокаТЧ.Номенклатура <> НоменклатураКэш Тогда
			СписокВыбораНоменклатура.Добавить(СтрокаТЧ.Номенклатура);
			НоменклатураКэш = СтрокаТЧ.Номенклатура;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораХарактеристика(ТекущаяСтрока)
	
	СписокВыбораХарактеристика = Элементы.ТоварыХарактеристика.СписокВыбора;
	СписокВыбораХарактеристика.Очистить();
	
	НайденныеСтроки = НоменклатураДляВыбора.НайтиСтроки(Новый Структура("Продукция, Номенклатура, ЗаписьСкладскогоЖурнала",
		ТекущаяСтрока.Продукция,
		ТекущаяСтрока.Номенклатура,
		ТекущаяСтрока.ЗаписьСкладскогоЖурнала));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		СписокВыбораХарактеристика.Добавить(СтрокаТЧ.Характеристика);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииГрузоотправителя()
	
	Если Объект.Маршрут.Количество() = 0 Тогда
		СтрокаОтправитель = Объект.Маршрут.Добавить();
	Иначе
		СтрокаОтправитель = Объект.Маршрут[0];
	КонецЕсли;
	СтрокаОтправитель.СПерегрузкой  = Истина;
	СтрокаОтправитель.Предприятие = Объект.ГрузоотправительПредприятие;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ИнтеграцияВЕТИС.УстановитьУсловноеОформлениеПоляПродукция(
		ЭтаФорма,
		Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ВСДОформленыЧерезWeb);
	
	ИнтеграцияВЕТИС.УстановитьУсловноеОформлениеПоляНоменклатура(ЭтаФорма);
	
	ИнтеграцияВЕТИС.УстановитьУсловноеОформлениеПоляХарактеристика(ЭтаФорма);
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
	ИнтеграцияВЕТИС.УстановитьУсловноеОформлениеПоляКоличество(ЭтаФорма);

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВетеринарноСопроводительныйДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Для каждого Поле Из Элементы.Товары.ПодчиненныеЭлементы Цикл
		Если Поле.Имя = "ТоварыГруппаНоменклатура"
			Или Поле.Имя = "ТоварыНоменклатураЕдиницаИзмерения" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Поле) = Тип("ПолеФормы") Тогда
			ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Поле.Имя);
		Иначе
			Для каждого ПодчиненноеПоле Из Поле.ПодчиненныеЭлементы Цикл
				ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПодчиненноеПоле.Имя);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Регионализация.
	Если Не СтатусВЕТИС = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ВСДОформленыЧерезWeb Тогда
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРезультатПроверкиПравилРегионализации.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.РезультатПроверкиПравилРегионализации");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<Необходимо проверить>'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255,0,0));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьУпаковкиШтрихкодыНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		ИдентификаторСтроки = Элементы.Товары.ТекущиеДанные.ИдентификаторСтроки;
		
		ИнтеграцияВЕТИСКлиентСервер.ЗаполнитьДанныеУпаковокШтрихкодовПоСтроке(Объект, ИдентификаторСтроки, РезультатЗакрытия);
		ЗаполнитьПредставлениеУпаковокПоСтроке(Объект,Элементы.Товары.ТекущиеДанные);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПоУмолчаниюНовойСтрокиТовары(СтрокаТабличнойЧасти, БлагополучиеМестности, Копирование = Ложь)
	
	СтрокаТабличнойЧасти.ИдентификаторСтроки                 = Новый УникальныйИдентификатор;
	СтрокаТабличнойЧасти.ВетеринарноСопроводительныйДокумент = Неопределено;
	СтрокаТабличнойЧасти.БлагополучиеМестности               = НСтр("ru = 'Местность благополучна по заразным болезням животных'");
	СтрокаТабличнойЧасти.ЭкспертизаРезультат                 = ПредопределенноеЗначение("Перечисление.РезультатыЛабораторныхИсследованийВЕТИС.НеПодвергнутаВСЭ");
	Если Копирование Тогда
		СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурнала         = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюНаСервере(ОбработатьТабличнуюЧасть = Истина, ОбработатьШапку = Истина)
	
	Если ОбработатьТабличнуюЧасть Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.Заполнить(ДокументОбъект.ДокументОснование);
		ЗначениеВДанныеФормы(ДокументОбъект,Объект);
		ПриЧтенииНаСервере(ДокументОбъект);
	КонецЕсли;
	
	Если ОбработатьШапку Тогда
		
		ЗаполнитьОтборыПоОснованию(Объект.ДокументОснование, ЭтотОбъект);
		
		Если Не Объект.ТТНУказан
			Или ЗначениеЗаполнено(Объект.НомерТТН)
			Или ЗначениеЗаполнено(Объект.ДатаТТН)
			Или ЗначениеЗаполнено(Объект.ТипТТН) Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеТТН = Новый Структура("Дата, Номер");
		ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьДанныеТТНДляТранспортнойОперацииПоОснованию(ДанныеТТН, Объект.ДокументОснование);
		Если ЗначениеЗаполнено(ДанныеТТН.Номер) Тогда
			Объект.ДатаТТН = ДанныеТТН.Дата;
			Объект.НомерТТН = ДанныеТТН.Номер;
			Объект.ТипТТН = Перечисления.ТипыДокументовВЕТИС.ТТН;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуПоДаннымЗаписиСкладскогоЖурнала(СтрокаТабличнойЧасти)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурнала);
	Запрос.Текст = Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ТекстЗапросаДанныеЗаписейСкладскогоЖурнала();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		РеквизитыДляЗаполнения = "НизкокачественнаяПродукция, ПериодНахожденияЖивотныхНаТерриторииТС,
		                         |КоличествоПериодовНахожденияЖивотныхНаТерриторииТС, ТипПроисхождения";
		Если Не(ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоличествоВЕТИС)
			И(СтрокаТабличнойЧасти.Продукция = Выборка.Продукция ИЛИ НЕ ЗначениеЗаполнено(Выборка.Продукция))) Тогда
			РеквизитыДляЗаполнения = РеквизитыДляЗаполнения + "," + "Продукция, КоличествоВЕТИС";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка, РеквизитыДляЗаполнения);
		
		Документы.ИсходящаяТранспортнаяОперацияВЕТИС.ЗаполнитьЦелиВЕТИС(СтрокаТабличнойЧасти, Объект.ГрузополучательХозяйствующийСубъект);
		
		Для каждого СтрокаУпаковки Из Выборка.УпаковкиВЕТИС.Выгрузить() Цикл
			НоваяСтрокаУпаковки = Объект.УпаковкиВЕТИС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУпаковки, СтрокаУпаковки);
			НоваяСтрокаУпаковки.ИдентификаторСтрокиТовары = СтрокаТабличнойЧасти.ИдентификаторСтроки;
			Для каждого СтрокаШтрихкода Из Выборка.ШтрихкодыУпаковок.Выгрузить() Цикл
				ЗаполнитьЗначенияСвойств(Объект.ШтрихкодыУпаковок.Добавить(), СтрокаШтрихкода);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаРезультатаПодбораНоменклатурыНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатурыНаСервере(ВыбранноеЗначение, ДополнительныеПараметры)
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЗаполнитьПродукциюВЕТИС = Истина;
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
	ПараметрыЗаполнения.УстановитьУникальныйИдентификаторСтроки = Истина;
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = ПараметрыУказанияСерий <> Неопределено;
	ПараметрыЗаполнения.ДанныеЗаполнения.Вставить("ЭкспертизаРезультат",Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.НеПодвергнутаВСЭ);
	ПараметрыЗаполнения.ДанныеЗаполнения.Вставить("БлагополучиеМестности",Элементы.ТоварыПанельБлагополучиеМестности.СписокВыбора[0].Значение);
	
	СобытияФормВЕТИСПереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект,
		ВыбранноеЗначение,
		ПараметрыЗаполнения,
		ПараметрыУказанияСерий);
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", СтандартнаяОбработка)
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		
		ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтаФорма,, Текст, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗаполнитьУстановитьВидимостьСерий()
	
	ПараметрыУказанияСерий = 
		ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(
			Объект, Документы.ИсходящаяТранспортнаяОперацияВЕТИС);
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	УстановитьВидимостьЭлементовСерий(Элементы, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовСерий(Элементы, ПараметрыУказанияСерий)
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИспользоватьСерииНоменклатуры = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Иначе
		ИспользоватьСерииНоменклатуры = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыСерия.Видимость = ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
	ТекущаяСтрокаИдентификатор,
	КэшированныеЗначения)
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
		ЭтотОбъект,, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция СтруктураРеквизитовИзменяемыхНаСервере()
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТоварыПродукция");
	СтруктураВозврата.Вставить("ТоварыЗаписьСкладскогоЖурнала");
	СтруктураВозврата.Вставить("ТоварыЗаписьСкладскогоЖурналаДобавление");
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыТоваров(ТекущаяСтрока, ОбновляемыеПоля = Неопределено, ДополнительныеПараметры = Неопределено)
	
	Инициализация = Ложь;
	СтруктураПолей = Новый Структура;
	Если ОбновляемыеПоля = Неопределено Тогда
		Инициализация = Истина;
	Иначе
		СтруктураПолей = Новый Структура(ОбновляемыеПоля);
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("ЗаписьСкладскогоЖурнала") Тогда
		
		Если Не Инициализация Тогда
			СтруктураПолей.Вставить("СрокГодности");
			СтруктураПолей.Вставить("УпаковкиВЕТИС");
		КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ Инициализация И СтруктураПолей.Свойство("Продукция") Тогда
		СтруктураПолей.Вставить("Номенклатура");
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("УпаковкиВЕТИС") Тогда
		
		ЗаполнитьПредставлениеУпаковокПоСтроке(ДополнительныеПараметры.Объект, ТекущаяСтрока);
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("Регионализация") Тогда
		РассчитатьРеквизитыРегионализации(ТекущаяСтрока, "Товары");
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("Номенклатура") Тогда
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ТекущаяСтрока.Характеристика = Неопределено;
			ТекущаяСтрока.Серия = Неопределено;
		КонецЕсли;
		
		СопоставленоКоличество = ТекущаяСтрока.НоменклатураДляВыбора.Количество();
		Если СопоставленоКоличество > 1 Тогда
			ТекущаяСтрока.СопоставлениеНоменклатура   = СтрШаблон(НСтр("ru = '<Несколько позиций (%1)>'"), СопоставленоКоличество);
		ИначеЕсли СопоставленоКоличество = 1 Тогда
			ТекущаяСтрока.СопоставлениеНоменклатура = Неопределено;
		Иначе
			ТекущаяСтрока.СопоставлениеНоменклатура   = НСтр("ru = '<Не сопоставлено>'");
		КонецЕсли;
		
		СтруктураПолей.Вставить("Характеристика");
		СтруктураПолей.Вставить("Серия");
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("Характеристика") Тогда
		
			ТекущаяСтрока.СопоставлениеХарактеристика = НСтр("ru = '<Не сопоставлено>'");
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("Серия") Тогда
				
	КонецЕсли;
	
	Если Инициализация Или СтруктураПолей.Свойство("ЗаписьСкладскогоЖурнала") Тогда
		
		ЗаполнитьПредставлениеУпаковокПоСтроке(ДополнительныеПараметры.Объект, ТекущаяСтрока);
		
	КонецЕсли;
	
	Если Инициализация Тогда
		ЗаполнитьПредставлениеВСДПоСтроке(ТекущаяСтрока, ДополнительныеПараметры.ТекстЗапрещеннойЯчейкиЦвет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НажатиеНавигационнойСсылкиТребуетЗаписиДокумента(НавигационнаяСсылкаФорматированнойСтроки)
	
	Результат = Истина;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуРегионализации"
		ИЛИ НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитеУсловияПеремещения" Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция АдресаТабличныхЧастейДляФормыРедактированияМаршрута()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Маршрут = ДокументОбъект.Маршрут.Выгрузить();
	Маршрут.Очистить();
	
	Для Каждого СтрокаТЧОбъект Из Объект.Маршрут Цикл
		
		СтрокаТЧ = Маршрут.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЧОбъект);
		СтрокаТЧ.ДанныеАдреса = Новый ХранилищеЗначения(СтрокаТЧОбъект.ДанныеАдресаСтруктура);
		
	КонецЦикла;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
		Маршрут,
		УникальныйИдентификатор);
	
	АдресВоВременномХранилищеТовары = ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	АдресВоВременномХранилищеРегионализация = ПоместитьВоВременноеХранилище(Объект.Регионализация.Выгрузить(), УникальныйИдентификатор);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	Результат.Вставить("АдресВоВременномХранилищеТовары", АдресВоВременномХранилищеТовары);
	Результат.Вставить("АдресВоВременномХранилищеРегионализация", АдресВоВременномХранилищеРегионализация);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияПунктовМаршрута()
	
	РезультатВыгрузкиТабличныхЧастей = АдресаТабличныхЧастейДляФормыРедактированияМаршрута();
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр",            ТолькоПросмотр или РедактированиеФормыНедоступно);
	ПараметрыОткрытияФормы.Вставить("АдресВоВременномХранилище", РезультатВыгрузкиТабличныхЧастей.АдресВоВременномХранилище);
	ПараметрыОткрытияФормы.Вставить("АдресВоВременномХранилищеТовары", РезультатВыгрузкиТабличныхЧастей.АдресВоВременномХранилищеТовары);
	ПараметрыОткрытияФормы.Вставить("АдресВоВременномХранилищеРегионализация", РезультатВыгрузкиТабличныхЧастей.АдресВоВременномХранилищеРегионализация);
	ПараметрыОткрытияФормы.Вставить("УказываетсяРегионализация", Истина);
	ПараметрыОткрытияФормы.Вставить("УказываетсяТранспортноеСредствоПредприятия", Истина);
	ПараметрыОткрытияФормы.Вставить("БлокироватьПервуюСтроку",   Истина);
	ПараметрыОткрытияФормы.Вставить("ВладелецСсылка",            Объект.Ссылка);
	ПараметрыОткрытияФормы.Вставить("ХозяйствующийСубъект",      Объект.ГрузоотправительХозяйствующийСубъект);
	ПараметрыОткрытияФормы.Вставить("ОбязательностьНомераТранспортногоСредства", Истина);
	
	ОткрытьФорму(
		"ОбщаяФорма.ПунктыМаршрутаВЕТИС",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ОбработатьРезультатРедактированияПунктовМаршрута", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатРедактированияПунктовМаршрута(АдресВоВременномХранилище, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(АдресВоВременномХранилище) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьПунктыМаршрута(АдресВоВременномХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПунктыМаршрута(АдресВоВременномХранилище)
	
	Модифицированность = Истина;
	Данные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Объект.Маршрут.Очистить();
	Для Каждого СтрокаТЧ Из Данные.Маршрут Цикл
		
		НоваяСтрока = Объект.Маршрут.Добавить();
		
		НоваяСтрока.Идентификатор         = СтрокаТЧ.Идентификатор;
		НоваяСтрока.Предприятие           = СтрокаТЧ.Предприятие;
		НоваяСтрока.Адрес                 = СтрокаТЧ.Адрес;
		НоваяСтрока.АдресПредставление    = СтрокаТЧ.АдресПредставление;
		НоваяСтрока.ДанныеАдресаСтруктура = СтрокаТЧ.ДанныеАдреса;
		НоваяСтрока.СПерегрузкой          = СтрокаТЧ.СПерегрузкой;
		
		НоваяСтрока.ТранспортноеСредство          = СтрокаТЧ.ТранспортноеСредство;
		НоваяСтрока.ТипТранспорта                 = СтрокаТЧ.ТипТранспорта;
		НоваяСтрока.НомерТранспортногоСредства    = СтрокаТЧ.НомерТранспортногоСредства;
		НоваяСтрока.НомерАвтомобильногоПрицепа    = СтрокаТЧ.НомерАвтомобильногоПрицепа;
		НоваяСтрока.НомерАвтомобильногоКонтейнера = СтрокаТЧ.НомерАвтомобильногоКонтейнера;
		
		НоваяСтрока.РезультатПроверкиПравилРегионализации = СтрокаТЧ.РезультатПроверкиПравилРегионализации;
		НоваяСтрока.УсловияРегионализацииВыполнены = СтрокаТЧ.УсловияРегионализацииВыполнены;
		
		РассчитатьРеквизитыРегионализации(НоваяСтрока, "Маршрут");
		
	КонецЦикла;
	
	ИндексСтрокиТовары = 0;
	Для каждого СтрокаТовара Из Данные.Товары Цикл
		СтрокаДокумента = Объект.Товары[ИндексСтрокиТовары];
		СтрокаДокумента.РезультатПроверкиПравилРегионализации = СтрокаТовара.РезультатПроверкиПравилРегионализации;
		СтрокаДокумента.УсловияРегионализацииВыполнены = СтрокаТовара.УсловияРегионализацииВыполнены;
		РассчитатьРеквизитыРегионализации(СтрокаДокумента, "Товары");
		
		ИндексСтрокиТовары = ИндексСтрокиТовары + 1;
	КонецЦикла;
	Объект.Регионализация.Загрузить(Данные.Регионализация);
	
	ПараметрыОбновленияСтатуса = Неопределено;
	
	Если НеобходимоОтменитьРезультатыПроверкиРегионализации(ЭтотОбъект) Тогда
		ОтменитьРезультатыПроверкиРегионализации();
	Иначе
		ОбновитьСтатусИПараметрыДополнения();
	КонецЕсли;
	ИнтеграцияВЕТИС.ЗаполнитьСопоставленнуюПродукциюВДокументе(Объект.Товары);
	ИнтеграцияВЕТИС.ЗаполнитьСопоставленныеТовары(Объект.Товары, НоменклатураДляВыбора,,,Истина);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДействияПриИзмененииГрузоотправителя(ИзмененоПредприятие)
	
	Результат = Новый Структура;
	Результат.Вставить("ПодготовитьЗаполнитьУстановитьВидимостьСерий", Истина);
	Результат.Вставить("ОтменитьРезультатыПроверкиРегионализации",     ИзмененоПредприятие);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ХозяйствующийСубъектГрузоотправительПриИзмененииНаСервере(ДействияНаСервере)
	
	Если ДействияНаСервере.ПодготовитьЗаполнитьУстановитьВидимостьСерий Тогда
		ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	КонецЕсли;
	Если ДействияНаСервере.ОтменитьРезультатыПроверкиРегионализации Тогда
		ОтменитьРезультатыПроверкиРегионализации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПроизвольнаяПродукцияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		
		СтрокаТабличнойЧасти = ДополнительныеПараметры.СтрокаТабличнойЧасти;
		
		СтрокаТабличнойЧасти.Продукция = РезультатЗакрытия;
		
		ОбновитьДанные(РезультатЗакрытия,Новый Структура("ИзменяемаяСтрока,ТоварыПродукция",СтрокаТабличнойЧасти));
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКонтрольЗаписейСкладскихЖурналов(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Элемент = Элементы.ГрузоотправительХозяйствующийСубъект Тогда
		ХозяйствующийСубъект = ВыбранноеЗначение;
		Предприятие          = Неопределено;
		ИмяРеквизита         = "ГрузоотправительХозяйствующийСубъект";
	Иначе 
		ХозяйствующийСубъект = Объект.ГрузоотправительХозяйствующийСубъект;
		Предприятие          = ВыбранноеЗначение;
		ИмяРеквизита         = "ГрузоотправительПредприятие";
	КонецЕсли;
	
	МассивЗаписей = Новый Массив;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если МассивЗаписей.Найти(СтрокаТовары.ЗаписьСкладскогоЖурнала) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовары.ЗаписьСкладскогоЖурнала) Тогда
			МассивЗаписей.Добавить(СтрокаТовары.ЗаписьСкладскогоЖурнала);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписиЗаполненыКорректно = ЗаписиСкладскихЖурналовЗаполненыКорректно(МассивЗаписей, ХозяйствующийСубъект, Предприятие);
	Если ЗаписиЗаполненыКорректно Тогда 
		Возврат;
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	ДополнительныеПараметры.Вставить("ИмяРеквизита", ИмяРеквизита);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораХозяйствующегоСубъектаПредприятияЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	ТекстВопроса = НСтр("ru = 'В табличной части ""Товары"" будут очищены подобранные записи складского журнала. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписиСкладскихЖурналовЗаполненыКорректно(МассивЗаписей, ХозяйствующийСубъект, Предприятие = Неопределено)
	
	ЗаписиСкладскихЖурналовЗаполненыКорректно = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗаписей",        МассивЗаписей);
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект);
	Запрос.УстановитьПараметр("Предприятие",          Предприятие);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаписиСкладскогоЖурналаВЕТИС.Ссылка) КАК КоличествоЭлементов
	|ИЗ
	|	Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	|ГДЕ
	|	ЗаписиСкладскогоЖурналаВЕТИС.Ссылка В(&МассивЗаписей)
	|	И ЗаписиСкладскогоЖурналаВЕТИС.ХозяйствующийСубъект = &ХозяйствующийСубъект";
	
	Если ЗначениеЗаполнено(Предприятие) Тогда
		ТекстЗапроса = ТекстЗапроса + " И ЗаписиСкладскогоЖурналаВЕТИС.Предприятие = &Предприятие";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ЗаписиСкладскихЖурналовЗаполненыКорректно;
	КонецЕсли;
	
	Выборка = Результат.Выбрать(); 
	Выборка.Следующий();
	Если Выборка.КоличествоЭлементов = МассивЗаписей.Количество() Тогда
		ЗаписиСкладскихЖурналовЗаполненыКорректно = Истина;
	КонецЕсли;
	
	Возврат ЗаписиСкладскихЖурналовЗаполненыКорректно;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораХозяйствующегоСубъектаПредприятияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Или РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.ЗаписьСкладскогоЖурнала = ПредопределенноеЗначение("Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка");
	КонецЦикла;
	
	Объект[ДополнительныеПараметры.ИмяРеквизита] = ДополнительныеПараметры.ВыбранноеЗначение;
	
	Если ДополнительныеПараметры.ИмяРеквизита = "ГрузоотправительХозяйствующийСубъект" Тогда
		Объект.ГрузоотправительПредприятие = ПредопределенноеЗначение("Справочник.ПредприятияВЕТИС.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
