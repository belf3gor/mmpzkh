&НаКлиенте
Перем ИдентификаторСтрокиПроводки;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента("НезаписанныйДокумент");
		ПодготовитьФормуНаСервере(Параметры.ЗначениеКопирования);
		ЗаполнитьДвижения(Параметры.ЗначенияЗаполнения);
	КонецЕсли;

	//При открытии из журнала проводок активизируем выбранную строку
	Если ЗначениеЗаполнено(Параметры.ПараметрТекущаяСтрока) Тогда
		Элементы.Хозрасчетный.ТекущаяСтрока  = Параметры.ПараметрТекущаяСтрока-1;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере(ТекущийОбъект.Ссылка);
	УстановитьСостояниеДокумента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Запись") Тогда
		КлючеваяОперация = "ЗаписьОперацияБух";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит Тогда
			НаборЗаписей = РеквизитФормыВЗначение(СтрокаРегистра.Имя + "НаборЗаписей");
			ТаблицаДвижений = НаборЗаписей.Выгрузить();
			ТекущийОбъект.Движения[СтрокаРегистра.Имя].Загрузить(ТаблицаДвижений);
			СтрокаРегистра.Записывать = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Очистим значения параметров типовой операции
	НаборЗаписей = РегистрыСведений.ЗначенияПараметровТиповойОперации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Операция.Установить(ТекущийОбъект.Ссылка);
	
	Если ТекущийОбъект.СпособЗаполнения = "ТиповаяОперация" Тогда
		// Заполнить значения параметров типовой операции
		Для Каждого СтрокаПараметров Из ПараметрыТиповойОперации Цикл
			Запись				 = НаборЗаписей.Добавить();
			Запись.Организация	 = ТекущийОбъект.Организация;
			Запись.Операция		 = ТекущийОбъект.Ссылка;
			Запись.Параметр		 = СтрокаПараметров.Параметр;
			Запись.Значение		 = ЭтотОбъект[СтрокаПараметров.ИмяРеквизита];
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписей.Записать();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ИзменениеОперацииБух");

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ХозрасчетныйНаборЗаписей.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Указанные в проводках расчетные счета, договоры, подразделения, документы будут очищены. 
			|Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПриИзменииОрганизацииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ПриИзменииОрганизацииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	 
КонецПроцедуры

&НаКлиенте
Процедура СторнируемыйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выберите организацию.'"));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СторнируемыйДокументПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьДвижения() Тогда
		ТекстВопроса = НСтр("ru = 'Существующие проводки и движения регистров будут очищены.
			|Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("СторнируемыйДокументПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Иначе
		СформироватьДвиженияСторноНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыХозрасчетный

&НаКлиенте
Процедура ХозрасчетныйПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Хозрасчетный.ТекущиеДанные;
	ИдСтроки      = Элементы.Хозрасчетный.ТекущаяСтрока;
	
	Если ИдСтроки <> ИдентификаторСтрокиПроводки Тогда
	
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"ХозрасчетныйСубконтоДт1", "ХозрасчетныйСубконтоДт2", "ХозрасчетныйСубконтоДт3");
		БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетДт, ЭтотОбъект, ПоляФормы, Неопределено, Истина, Ложь);
	
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"ХозрасчетныйСубконтоКт1", "ХозрасчетныйСубконтоКт2", "ХозрасчетныйСубконтоКт3");
		БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетКт, ЭтотОбъект, ПоляФормы, Неопределено, Истина, Ложь);
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "", Ложь);
		
		ИдентификаторСтрокиПроводки = ИдСтроки;
	
	КонецЕсли;
	
	// Сначала выполняем общие действия для всех регистров
	Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование);
	
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВПроводке(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ПересчитатьСуммуОперации(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйПослеУдаления(Элемент)

	ПересчитатьСуммуОперации(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетДтПриИзменении(Элемент)

	ОбработатьИзменениеСчета(ЭтотОбъект, "Дт");

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетКтПриИзменении(Элемент)

	ОбработатьИзменениеСчета(ЭтотОбъект, "Кт");

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйВалютаДтПриИзменении(Элемент)

	РасчетСуммы(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйВалютнаяСуммаДтПриИзменении(Элемент)
	
	РасчетСуммы(Истина);
	ПересчитатьСуммуОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйВалютаКтПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Хозрасчетный.ТекущиеДанные;

	Если ЗначениеЗаполнено(ТекущиеДанные.СчетДт) Тогда
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетДт);
		Если СвойстваСчета.Валютный Тогда
			Возврат; // Если оба счета валютные, сумма пересчитывается при изменении счета Дт
		КонецЕсли;
	КонецЕсли;

	РасчетСуммы(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйВалютнаяСуммаКтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Хозрасчетный.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетДт) Тогда
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетДт);
		Если СвойстваСчета.Валютный Тогда
			Возврат; // Если оба счета валютные, сумма пересчитывается при изменении счета Дт
		КонецЕсли;
	КонецЕсли;
	
	РасчетСуммы(Ложь);
	ПересчитатьСуммуОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСуммаПриИзменении(Элемент)
	
	РасчетСуммы();
	ПересчитатьСуммуОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУниверсальные

// Общая процедура для всех регистров. Устанавливает период и организацию в добавляемых строках.
//
&НаКлиенте
Процедура Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Свойство("Период") Тогда
		Элемент.ТекущиеДанные.Период = Объект.Дата;
	КонецЕсли;
	
	Если НоваяСтрока
			И НЕ Копирование
			И Элемент.ТекущиеДанные.Свойство("Организация")
			И ЗначениеЗаполнено(Объект.Организация) Тогда
		Элемент.ТекущиеДанные.Организация = Объект.Организация;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Свойство("НоменклатурнаяГруппа") И Элемент.ТекущиеДанные.Свойство("ХарактерДеятельности") Тогда
		Элемент.ТекущиеДанные.НоменклатурнаяГруппа = ИПОсновнаяНоменклатурнаяГруппа;
		Элемент.ТекущиеДанные.ХарактерДеятельности = ИПОсновнойХарактерДеятельности;
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование
		И Элемент.ТекущиеДанные.Свойство("Валюта")
		И Элемент.ТекущиеДанные.Свойство("ОтражениеВУСН") Тогда // Регистр накопления "Расходы при УСН".
		
		Элемент.ТекущиеДанные.Валюта        = ВалютаРегламентированногоУчета;
		Элемент.ТекущиеДанные.ОтражениеВУСН = ПредопределенноеЗначение("Перечисление.ОтражениеВУСН.Принимаются");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьСоставРегистров(Команда)

	АдресСпискаРегистров = ПодготовитьСписокРегистровДляНастройки();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресСпискаРегистров", АдресСпискаРегистров);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьСоставРегистровЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ОперацияБух.Форма.ФормаНастройки", СтруктураПараметров, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьАктивностьДвижений(Команда)

	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение( , 
			НСтр("ru = 'Операция помечена на удаление, поэтому переключить активность нельзя.
        	|Снимите пометку удаления.'"));
		Возврат;
	КонецЕсли;
	
	ПереключитьАктивностьДвиженийНаСервере();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ИзменениеРеквизитов

&НаСервере
Процедура ПриИзменииОрганизацииНаСервере()
	
	ТипыСвязанныеСОрганизацией = БухгалтерскийУчетПереопределяемый.ТипыСвязанныеСОрганизацией();
	
	Для каждого Проводка Из ХозрасчетныйНаборЗаписей Цикл
		
		Для Инд = 1 по 3 Цикл
			ЗначениеСубконто = Проводка["СубконтоДт" + Инд];
			Если ЗначениеЗаполнено(ЗначениеСубконто)
				И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТипЗнч(ЗначениеСубконто));
				ОписаниеТипаСубконто = Новый ОписаниеТипов(МассивТипов);
				Проводка["СубконтоДт" + Инд] = ОписаниеТипаСубконто.ПривестиЗначение(Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		Для Инд = 1 по 3 Цикл
			ЗначениеСубконто = Проводка["СубконтоКт" + Инд];
			Если ЗначениеЗаполнено(ЗначениеСубконто)
				И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТипЗнч(ЗначениеСубконто));
				ОписаниеТипаСубконто = Новый ОписаниеТипов(МассивТипов);
				Проводка["СубконтоКт" + Инд] = ОписаниеТипаСубконто.ПривестиЗначение(Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Проводка.ПодразделениеДт) Тогда
			Проводка.ПодразделениеДт = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Проводка.ПодразделениеКт) Тогда
			Проводка.ПодразделениеКт = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущаяОрганизация = Объект.Организация;
	УстановитьПараметрыФункциональныхОпцийФормыОбъектаОперация();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета)

	СписокПараметров = Новый Структура("Организация,СчетУчета,ОстаткиОбороты",
		Форма.Объект.Организация, ТекущиеДанные[ИмяПоляСчетУчета], "Кт");
	ТипыДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().Типы();
	Для Индекс = 1 По 3 Цикл
		ИмяПоля    = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ДанныеПоля = ТекущиеДанные[ИмяПоля];
		ТипПоля    = ТипЗнч(ДанныеПоля);
		Если ТипПоля = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ДанныеПоля);
		ИначеЕсли ТипыДоговора.Найти(ТипПоля) <> Неопределено Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ДанныеПоля);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт = "", ОчищатьСвязанныеСубконто = Истина)
	
	ИдСтроки = Форма.Элементы.Хозрасчетный.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Форма.ХозрасчетныйНаборЗаписей.НайтиПоИдентификатору(ИдСтроки);
	
	Если ДтКт <> "Кт" Тогда
		
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "СчетДт");
		
		Если ОчищатьСвязанныеСубконто Тогда
			ЗначенияСубконтоСтрокиТаблицы = СтрокаТаблицы;
		Иначе
			ЗначенияСубконтоСтрокиТаблицы = Новый Структура("СубконтоДт1,СубконтоДт2,СубконтоДт3");
			ЗаполнитьЗначенияСвойств(ЗначенияСубконтоСтрокиТаблицы, СтрокаТаблицы);
		КонецЕсли;
		
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, ЗначенияСубконтоСтрокиТаблицы, "СубконтоДт%Индекс%", "ХозрасчетныйСубконтоДт%Индекс%", ПараметрыДокумента);
			
	КонецЕсли;
	Если ДтКт <> "Дт" Тогда
		
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "СчетКт");
		
		Если ОчищатьСвязанныеСубконто Тогда
			ЗначенияСубконтоСтрокиТаблицы = СтрокаТаблицы;
		Иначе
			ЗначенияСубконтоСтрокиТаблицы = Новый Структура("СубконтоКт1,СубконтоКт2,СубконтоКт3");
			ЗаполнитьЗначенияСвойств(ЗначенияСубконтоСтрокиТаблицы, СтрокаТаблицы);
		КонецЕсли;
		
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, ЗначенияСубконтоСтрокиТаблицы, "СубконтоКт%Индекс%", "ХозрасчетныйСубконтоКт%Индекс%", ПараметрыДокумента);
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(ДтКт, Элемент, СтандартнаяОбработка)

	ТекущиеДанные      = Элементы.Хозрасчетный.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтотОбъект, ТекущиеДанные, "Субконто" + ДтКт + "%Индекс%", "Счет" + ДтКт);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеСчета(Форма, ДтКт)

	ИдСтроки = Форма.Элементы.Хозрасчетный.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Форма.ХозрасчетныйНаборЗаписей.НайтиПоИдентификатору(ИдСтроки);
	
	ПоляФормы = Новый Структура("Субконто1,Субконто2,Субконто3");
	ПоляФормы.Субконто1 = "ХозрасчетныйСубконто" + ДтКт + "1";
	ПоляФормы.Субконто2 = "ХозрасчетныйСубконто" + ДтКт + "2";
	ПоляФормы.Субконто3 = "ХозрасчетныйСубконто" + ДтКт + "3";
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(СтрокаТаблицы["Счет" + ДтКт], Форма, ПоляФормы, Неопределено, Истина, Ложь);
	
	ПоляОбъекта = Новый Структура("Субконто1,Субконто2,Субконто3,Подразделение,Валютный,Количественный,Организация");
	ПоляОбъекта.Субконто1      = "Субконто" + ДтКт + "1";
	ПоляОбъекта.Субконто2      = "Субконто" + ДтКт + "2";
	ПоляОбъекта.Субконто3      = "Субконто" + ДтКт + "3";
	ПоляОбъекта.Подразделение  = "Подразделение" + ДтКт;
	ПоляОбъекта.Валютный       = "Валютный" + ДтКт;
	ПоляОбъекта.Количественный = "Количественный" + ДтКт;
	ПоляОбъекта.Организация    = Форма.Объект.Организация;
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы["Счет" + ДтКт], СтрокаТаблицы, ПоляОбъекта, Истина, , Ложь);
	
	ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт);
	
	ЗаполнитьНадписиВПроводке(СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипРесурсовПроводки(Форма, ДтКт)

	ИдСтроки = Форма.Элементы.Хозрасчетный.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Форма.ХозрасчетныйНаборЗаписей.НайтиПоИдентификатору(ИдСтроки);
		
	ОписаниеСуммы      = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ОписаниеКоличества = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы["Счет"+ДтКт]);
	
	Если ДанныеСчета.Количественный Тогда
		СтрокаТаблицы["Количество"+ДтКт] = ОписаниеКоличества.ПривестиЗначение(СтрокаТаблицы["Количество"+ДтКт]);
	Иначе
		СтрокаТаблицы["Количество"+ДтКт] = NULL;
	КонецЕсли;
	Если ДанныеСчета.Валютный Тогда
		СтрокаТаблицы["ВалютнаяСумма"+ДтКт] = ОписаниеСуммы.ПривестиЗначение(СтрокаТаблицы["ВалютнаяСумма"+ДтКт]);
	Иначе
		СтрокаТаблицы["ВалютнаяСумма"+ДтКт] = NULL;
	КонецЕсли;
	Если ДанныеСчета.НалоговыйУчет Тогда
		СтрокаТаблицы["СуммаНУ"+ДтКт] = ОписаниеСуммы.ПривестиЗначение(СтрокаТаблицы["СуммаНУ"+ДтКт]);
		СтрокаТаблицы["СуммаПР"+ДтКт] = ОписаниеСуммы.ПривестиЗначение(СтрокаТаблицы["СуммаПР"+ДтКт]);
		СтрокаТаблицы["СуммаВР"+ДтКт] = ОписаниеСуммы.ПривестиЗначение(СтрокаТаблицы["СуммаВР"+ДтКт]);
	Иначе
		СтрокаТаблицы["СуммаНУ"+ДтКт] = NULL;
		СтрокаТаблицы["СуммаПР"+ДтКт] = NULL;
		СтрокаТаблицы["СуммаВР"+ДтКт] = NULL;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	ПоляОбъектаДт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Подразделение, Валютный, Количественный",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3", "ПодразделениеДт", "ВалютныйДт", "КоличественныйДт");
	ПоляОбъектаКт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Подразделение, Валютный, Количественный",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3", "ПодразделениеКт", "ВалютныйКт", "КоличественныйКт");

	Для каждого Проводка Из ХозрасчетныйНаборЗаписей Цикл
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетДт, Проводка, ПоляОбъектаДт, Ложь);
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетКт, Проводка, ПоляОбъектаКт, Ложь);
		ЗаполнитьНадписиВПроводке(Проводка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьПараметрыФункциональныхОпцийФормыОбъектаОперация();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДвижений

&НаСервере
Функция ЕстьДвижения()

	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит
			И ЭтотОбъект[СтрокаРегистра.Имя + "НаборЗаписей"].Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура НастроитьСоставРегистровЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатДействийПользователя = РезультатЗакрытия;
	
	// Обработаем результат действий пользователя
	Если ТипЗнч(РезультатДействийПользователя) = Тип("СписокЗначений")
	   И РезультатДействийПользователя.Количество() <> 0 Тогда
	   
		Модифицированность = Истина;
		ПрименитьНастройкуСоставаРегистров(РезультатДействийПользователя);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтрисовкаФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();


	// Субконто
	Для Сч = 1 По 3 Цикл

		// Видимость СубконтоДт

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоДт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


		// Выделение не заполненного СубконтоДт

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоДт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоДт" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		

		// Видимость СубконтоКт

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоКт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		

		// Выделение не заполненного СубконтоКт
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоКт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоКт" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;

	// ПодразделениеДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеДт", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));


	// ХозрасчетныйПодразделениеДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ПодразделениеКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеКт", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));


	// ХозрасчетныйПодразделениеКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Количество и валюта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйКоличествоДт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйНадписьКоличествоДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.КоличественныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ВалютныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ХозрасчетныйКоличествоКт, ХозрасчетныйНадписьКоличествоКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйКоличествоКт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйНадписьКоличествоКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.КоличественныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ВалютныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ХозрасчетныйВалютаДт, ХозрасчетныйВалютнаяСуммаДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютаДт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютнаяСуммаДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ВалютныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ХозрасчетныйВалютаКт, ХозрасчетныйВалютнаяСуммаКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютаКт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютнаяСуммаКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ВалютныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере(ДокументДвижений)

	УстановитьПараметрыФункциональныхОпцийФормыОбъектаОперация();
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущаяОрганизация = Объект.Организация;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	МетаданныеОперации = Объект.Ссылка.Метаданные();
	ЗаполнитьТаблицуРегистров(МетаданныеОперации);
	Если ЗначениеЗаполнено(ДокументДвижений) Тогда
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСДвижениями = ПроведениеСервер.ПолучитьМассивИспользуемыхРегистров(
			ДокументДвижений, ДокументДвижений.Метаданные().Движения);
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		РегистрыСДвижениями = Новый Массив;
	КонецЕсли;
	
	// Восстановим доп реквизиты и их значения
	Если (Объект.СпособЗаполнения = "ТиповаяОперация") И ЗначениеЗаполнено(Объект.ТиповаяОперация) Тогда
		
		// Нарисуем реквизиты на форме
		ДобавитьЭлементыПараметрыТиповойОперации();
		
		// Заполним параметры
		Если НЕ Объект.Ссылка.Пустая() Тогда
			ВосстановитьЗначенияПараметровТиповойОперации(Объект.Ссылка);
		ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВосстановитьЗначенияПараметровТиповойОперации(Параметры.ЗначениеКопирования);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями);
	СоздатьРеквизитыФормы();
	ПрочитатьДвиженияДокумента(ДокументДвижений);
	СоздатьЭлементыФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЭтоСторно = Найти(Объект.СпособЗаполнения, "Сторно") > 0;
	Элементы.СторнируемыйДокумент.Видимость = ЭтоСторно;
	Элементы.ГруппаТиповаяОперация.Видимость = (Объект.СпособЗаполнения = "ТиповаяОперация");
	
	Если ЭтоСторно Тогда
		ОграничитьТипыСторнируемогоДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента(СтрокаУказаниеСтатуса = Неопределено)
	
	Если СтрокаУказаниеСтатуса = "НезаписанныйДокумент" Тогда
		СостояниеДокумента = 0;	
	ИначеЕсли Объект.ПометкаУдаления Тогда
		СостояниеДокумента = 2;
	ИначеЕсли НЕ АктивностьДвижений Тогда
		СостояниеДокумента = 11;
	Иначе
		СостояниеДокумента = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента)

	Регистры.Очистить();
	Для каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл
		
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРегистра     = Регистры.Добавить();
		СтрокаРегистра.Имя = МетаданныеРегистра.Имя;
		
		ПолноеИмя    = МетаданныеРегистра.ПолноеИмя();
		ПозицияТочки = Найти(ПолноеИмя, ".");
		ТипРегистра  = Лев(ПолноеИмя, ПозицияТочки - 1);

		СтрокаРегистра.ТипРегистра = ТипРегистра;
		СтрокаРегистра.Синоним     = МетаданныеРегистра.Синоним;
		
	КонецЦикла;
	
	// Сначала показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями)

	Для каждого СтрокаРегистра Из Регистры Цикл
		
		Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			СтрокаРегистра.Отображение = Истина;
		Иначе
			Отбор = Новый Структура("Имя", СтрокаРегистра.Имя);
			ДобавленПользователем = Объект.ТаблицаРегистровНакопления.НайтиСтроки(Отбор).Количество() > 0
				ИЛИ Объект.ТаблицаРегистровСведений.НайтиСтроки(Отбор).Количество() > 0;
			СтрокаРегистра.Отображение = РегистрыСДвижениями.Найти(СтрокаРегистра.Имя) <> Неопределено
				ИЛИ ДобавленПользователем;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормы()
	
	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из ПолучитьРеквизиты() Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты   = Новый Массив;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			СтрокаРегистра.ЕстьРеквизит = Истина;
			Продолжить;
		КонецЕсли;
		ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
		Если (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
			ТипРеквизита  = Новый ОписаниеТипов(СтрокаРегистра.ТипРегистра + "НаборЗаписей." + СтрокаРегистра.Имя);
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , , Истина);
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		ИначеЕсли НЕ (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) <> Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
		СтрокаРегистра.ЕстьРеквизит = СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать;
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 
		ИЛИ УдаляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ПрочитатьДвиженияДокумента(ДокументДвижений)
	
	АктивностьДвижений = Истина;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.Отображение Тогда
			ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
			НаборЗаписей = РеквизитФормыВЗначение(ИмяРеквизита);
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижений);
			НаборЗаписей.Прочитать();
			ЗначениеВРеквизитФормы(НаборЗаписей, ИмяРеквизита);
			Если ДокументДвижений = Объект.Ссылка Тогда
				СтрокаРегистра.Записывать = ЭтотОбъект[ИмяРеквизита].Количество() > 0;
				Если СтрокаРегистра.Записывать Тогда
					АктивностьДвижений = АктивностьДвижений И ЭтотОбъект[ИмяРеквизита][0].Активность;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура СоздатьЭлементыФормы()
	
	Элементы.ФормаПереключитьАктивностьДвижений.Заголовок = ?(АктивностьДвижений, 
		НСтр("ru='Выключить активность движений'"), НСтр("ru='Включить активность движений'"));
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		
		Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			Элементы.ГруппаХозрасчетный.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено 
			И СтрокаРегистра.Отображение Тогда

			//Найдем группу, перед которой будем вставлять новую группу
			СледующаяГруппа = Неопределено;
			Для каждого Строка Из Регистры Цикл
				Если Строка.ТипРегистра >= СтрокаРегистра.ТипРегистра
					И Строка.Синоним > СтрокаРегистра.Синоним
					И Строка.Отрисован Тогда
					СледующаяГруппа = Элементы["Группа" + Строка.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ТекГруппа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ПанельРегистров, СледующаяГруппа);
			
			ТекГруппа.Заголовок      = СтрокаРегистра.Синоним;
			СтрокаРегистра.Отрисован = Истина;

			// На странице регистра создаем таблицу
			ИмяТаблицы = СтрокаРегистра.Имя;
			ТекТаблица = Элементы.Найти(ИмяТаблицы);
			Если ТекТаблица <> Неопределено Тогда
				Элементы.Удалить(ТекТаблица);
			КонецЕсли;
			ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
			ПутьКДаннымТаблицы = СтрокаРегистра.Имя + "НаборЗаписей";
			ТекТаблица.ПутьКДанным = ПутьКДаннымТаблицы;
			ТекГруппа.ПутьКДаннымЗаголовка = ПутьКДаннымТаблицы + ".КоличествоСтрок";
			// Назначаем общий обработчик
			ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаРегистраПриНачалеРедактирования");
			
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			КонецЕсли;

			РеквизитыНабораЗаписей = ЭтотОбъект[ПутьКДаннымТаблицы].Выгрузить(Новый Массив);

			// Некоторые колонки не показываем
			РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
			РеквизитыНабораЗаписей.Колонки.Удалить("Активность");

			Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Период") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Период");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Организация") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Организация");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("ИсходныйНомерСтроки") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("ИсходныйНомерСтроки");
			КонецЕсли;
			
			// Создаем колонки таблицы
			Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
				ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
				ТекКолонка = Элементы.Найти(ИмяКолонки);
				Если ТекКолонка = Неопределено Тогда
					ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
				КонецЕсли;
				ТекКолонка.ПутьКДанным = ТекТаблица.ПутьКДанным + "." + КолонкаРеквизита.Имя;
				ТекКолонка.Заголовок   = КолонкаРеквизита.Заголовок;
				ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
				Если КолонкаРеквизита.Имя = "НомерСтроки" Тогда
					ТекКолонка.Ширина = 2;
				ИначеЕсли КолонкаРеквизита.Имя = "ВидДвижения" Тогда
					ТекКолонка.Ширина = 15;
				КонецЕсли;
				
				Если СтрокаРегистра.Имя = "НДСРаздельныйУчет"
					И КолонкаРеквизита.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС") Тогда
					
					НовыйПараметр = Новый ПараметрВыбора("ОграничениеСпискаВыбора", "НеОграничивать");
					НовыйМассив = Новый Массив();
					НовыйМассив.Добавить(НовыйПараметр);
					НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив); 
					ТекКолонка.ПараметрыВыбора = НовыеПараметры;
					
				КонецЕсли; 
				
			КонецЦикла;

			УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(СтрокаРегистра.Имя);
			
		ИначеЕсли ТекГруппа <> Неопределено И НЕ СтрокаРегистра.Отображение Тогда
			
			Элементы.Удалить(ТекГруппа);
			СтрокаРегистра.Отрисован = Ложь;
			
		ИначеЕсли ТекГруппа <> Неопределено И СтрокаРегистра.Отображение Тогда
			
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	//Если отображается не более одного регистра - прячем заголовок у панели регистров
	Если Регистры.НайтиСтроки(Новый Структура("Отображение", Истина)).Количество() <= 1 И НЕ Объект.СпособЗаполнения = "ТиповаяОперация" Тогда
		Элементы.ПанельРегистров.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.ПанельРегистров.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьДвижения()

	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит Тогда
			ЭтотОбъект[СтрокаРегистра.Имя + "НаборЗаписей"].Очистить();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДвижения(ЗначенияЗаполнения)
	
	Если НЕ ЗначенияЗаполнения.Свойство("Хозрасчетный") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураПроводки Из ЗначенияЗаполнения.Хозрасчетный Цикл
		
		НоваяПроводка = ХозрасчетныйНаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, СтруктураПроводки);
		Если НЕ СтруктураПроводки.Свойство("Активность") Тогда
			НоваяПроводка.Активность = Истина;
		КонецЕсли;
		
		Элементы.Хозрасчетный.ТекущаяСтрока = НоваяПроводка.ПолучитьИдентификатор();
		ОбработатьИзменениеСчета(ЭтотОбъект, "Дт");
		ОбработатьИзменениеСчета(ЭтотОбъект, "Кт");
		УстановитьТипРесурсовПроводки(ЭтотОбъект, "Дт");
		УстановитьТипРесурсовПроводки(ЭтотОбъект, "Кт");
		
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

#Область Сторнирование

&НаСервере
Процедура СформироватьДвиженияСторноНаСервере()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьДвижения();
	Объект.ТаблицаРегистровНакопления.Очистить();
	Объект.ТаблицаРегистровСведений.Очистить();
	
	РегистрыИсключения = Новый Структура;
	Для каждого Регистр Из Метаданные.РегистрыСведений Цикл
		РегистрыИсключения.Вставить(Регистр.Имя); // Регистры сведений не сторнируются
	КонецЦикла;
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСДвижениями = ПроведениеСервер.ПолучитьМассивИспользуемыхРегистров(
		Объект.СторнируемыйДокумент, Объект.СторнируемыйДокумент.Метаданные().Движения, РегистрыИсключения);
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями);
	СоздатьРеквизитыФормы();
	ПрочитатьДвиженияДокумента(Объект.СторнируемыйДокумент);
	СторнироватьДвижения();
	СоздатьЭлементыФормы();
	
	ПересчитатьСуммуОперации(ЭтотОбъект);
	Объект.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Сторно документа ""%1""'"),
		Строка(Объект.СторнируемыйДокумент));

    ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура СторнироватьДвижения()
	
	Для каждого СтрокаРегистра Из Регистры Цикл

		Если НЕ СтрокаРегистра.ЕстьРеквизит Тогда
			Продолжить;
		КонецЕсли;

		ИмяРеквизита       = СтрокаРегистра.Имя + "НаборЗаписей";
		МетаданныеРегистра = РеквизитФормыВЗначение(ИмяРеквизита).Метаданные();

		Для каждого Движение Из ЭтотОбъект[ИмяРеквизита] Цикл

			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
					Если Ресурс.ПризнакУчета = Неопределено Тогда
						Движение[Ресурс.Имя] = - Движение[Ресурс.Имя];
					Иначе
						Если ЗначениеЗаполнено(Движение[Ресурс.Имя + "Дт"]) Тогда
							Движение[Ресурс.Имя + "Дт"] = - Движение[Ресурс.Имя + "Дт"];
						КонецЕсли;
						Если ЗначениеЗаполнено(Движение[Ресурс.Имя + "Кт"]) Тогда
							Движение[Ресурс.Имя + "Кт"] = - Движение[Ресурс.Имя + "Кт"];
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
					Движение[Ресурс.Имя] = - Движение[Ресурс.Имя];
				КонецЦикла;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СторнируемыйДокументПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьДвиженияСторноНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьТипыСторнируемогоДокумента()
	
	// Сторнировать можно только документы, которые делают движения по регистрам накопления или бухгалтерии.
	МассивТипов = Новый Массив;
	ВсеРегистрыНакопления  = Метаданные.РегистрыНакопления;
	ВсеРегистрыБухгалтерии = Метаданные.РегистрыБухгалтерии;
	Для каждого ОбъектМетаданных Из Метаданные.Документы Цикл
		ВключитьТип = Ложь;
		Для каждого ДвижениеДокумента Из ОбъектМетаданных.Движения Цикл
			Если ВсеРегистрыНакопления.Содержит(ДвижениеДокумента)
				ИЛИ ВсеРегистрыБухгалтерии.Содержит(ДвижениеДокумента) Тогда
				ВключитьТип = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ВключитьТип Тогда
			МассивТипов.Добавить(Тип("ДокументСсылка." + ОбъектМетаданных.Имя));
		КонецЕсли;
	КонецЦикла;
	Элементы.СторнируемыйДокумент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);

КонецПроцедуры

#КонецОбласти

#Область РаботаСПроводками

&НаКлиенте
Функция СтруктураДанныхПроводки(ТекущиеДанные)

	СтруктураПроводки = Новый Структура("НомерСтроки,СчетДт,ПодразделениеДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,
		|КоличествоДт,ВалютаДт,ВалютнаяСуммаДт,
		|СчетКт,ПодразделениеКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,
		|КоличествоКт,ВалютаКт,ВалютнаяСуммаКт,
		|Сумма,Содержание,СуммаНУДт,СуммаПРДт,СуммаВРДт,СуммаНУКт,СуммаПРКт,СуммаВРКт");
	ЗаполнитьЗначенияСвойств(СтруктураПроводки, ТекущиеДанные);

	Возврат СтруктураПроводки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуОперации(Форма)
	
	Форма.Объект.СуммаОперации = Форма.ХозрасчетныйНаборЗаписей.Итог("Сумма");

КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыПоСтрокеНаСервере(Проводка, Знач Дата, Знач ПересчетСуммыПоКурсуДт = Неопределено)
	
	Если ПересчетСуммыПоКурсуДт = Истина Тогда
		Проводка.Сумма = ПересчетСуммыПоКурсу(Проводка.ВалютнаяСуммаДт, Проводка.ВалютаДт, Дата);
	ИначеЕсли ПересчетСуммыПоКурсуДт = Ложь Тогда
		Проводка.Сумма = ПересчетСуммыПоКурсу(Проводка.ВалютнаяСуммаКт, Проводка.ВалютаКт, Дата);
	КонецЕсли;
	
	ВедетсяНалоговыйУчетДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт).НалоговыйУчет;
	ВедетсяНалоговыйУчетКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).НалоговыйУчет;
	ОтразитьНепринимаемыеДоходыИРасходы(Проводка, ВедетсяНалоговыйУчетДт, ВедетсяНалоговыйУчетКт);
	
	Если ВедетсяНалоговыйУчетДт Тогда
		Проводка.СуммаНУДт = Проводка.Сумма - Проводка.СуммаПРДт - Проводка.СуммаВРДт;
	КонецЕсли;
	
	Если ВедетсяНалоговыйУчетКт Тогда
		Проводка.СуммаНУКт = Проводка.Сумма - Проводка.СуммаПРКт - Проводка.СуммаВРКт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммы(ПересчетСуммыПоКурсуДт = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные     = Элементы.Хозрасчетный.ТекущиеДанные;
	СтруктураПроводки = СтруктураДанныхПроводки(ТекущиеДанные);
	
	ПересчитатьСуммыПоСтрокеНаСервере(СтруктураПроводки, Объект.Дата, ПересчетСуммыПоКурсуДт);
	
	ЗаполнитьЗначенияСвойств(Элементы.Хозрасчетный.ТекущиеДанные, СтруктураПроводки);
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьНепринимаемыеДоходыИРасходы(СтруктураПроводки, ВедетсяНалоговыйУчетДт, ВедетсяНалоговыйУчетКт)

	ОтразитьНеПринимаемыеДоходы = ВедетсяНалоговыйУчетКт И ОпределитьНеПринимаемыеДоходы(СтруктураПроводки);
	Если ОтразитьНеПринимаемыеДоходы Тогда
		СтруктураПроводки.СуммаПРКт = СтруктураПроводки.Сумма;
	КонецЕсли;

	ОтразитьНеПринимаемыеРасходы = ВедетсяНалоговыйУчетДт И ОпределитьНеПринимаемыеРасходы(СтруктураПроводки);
	Если ОтразитьНеПринимаемыеРасходы Тогда
		СтруктураПроводки.СуммаПРДт = СтруктураПроводки.Сумма;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОпределитьНеПринимаемыеДоходы(СтруктураПроводки)

	Если Не ЗначениеЗаполнено(СтруктураПроводки.СчетКт) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураПроводки.СчетКт <> ПланыСчетов.Хозрасчетный.ПустаяСсылка()
		И БухгалтерскийУчетПовтИсп.СчетВИерархии(СтруктураПроводки.СчетКт, ПланыСчетов.Хозрасчетный.ПрочиеДоходы) Тогда
		Для С=1 По 3 Цикл
			Субконто = СтруктураПроводки["СубконтоКт" + С];
			Если ТипЗнч(Субконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				РеквизитыСубконто = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Субконто, "ЭтоГруппа,ПринятиеКналоговомуУчету");
				Если РеквизитыСубконто.ПринятиеКналоговомуУчету = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ РеквизитыСубконто.ЭтоГруппа
					И Субконто <> Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() И 
					НЕ РеквизитыСубконто.ПринятиеКналоговомуУчету Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаСервере
Функция ОпределитьНеПринимаемыеРасходы(СтруктураПроводки)

	Если Не ЗначениеЗаполнено(СтруктураПроводки.СчетДт) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для С=1 По 3 Цикл
		Субконто = СтруктураПроводки["СубконтоДт" + С];
		Если ТипЗнч(Субконто) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		
			РеквизитыСубконто = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Субконто, 
				"ЭтоГруппа, ВидРасходовНУ, ВидДеятельностиДляНалоговогоУчетаЗатрат, Представление");
			
			Если РеквизитыСубконто.ВидДеятельностиДляНалоговогоУчетаЗатрат = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если РеквизитыСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
		
			Если РеквизитыСубконто.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
				// Расходы на строительство объектов основных средств, не относятся к расходам по производству и реализации
				Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СтруктураПроводки.СчетДт, ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) Тогда
					Возврат Ложь;
				КонецЕсли;
				ОтнесениеКЕНВД = РеквизитыСубконто.ВидДеятельностиДляНалоговогоУчетаЗатрат;
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения Тогда
					Отказ = Истина;
					ШаблонСообщения = НСтр("ru='%1 - неправильно указана: для непринимаемых расходов (%2).
						|Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым - это не имеет смысла для расчета налоговой базы и не поддерживается программой.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения,
						РеквизитыСубконто.Представление,
						ОтнесениеКЕНВД);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, "Хозрасчетный[" + Формат(СтруктураПроводки.НомерСтроки, "ЧГ=0") + "].СчетКт", "Объект", Отказ);
					Возврат Ложь;
				КонецЕсли;
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты Тогда
					Отказ = Истина;
					ШаблонСообщения = НСтр("ru='%1 - неправильно указана: для непринимаемых расходов (%2).
						|Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым - это не имеет смысла для расчета налоговой базы и не поддерживается программой.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения,
						РеквизитыСубконто.Представление,
						ОтнесениеКЕНВД);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, "Хозрасчетный[" + Формат(СтруктураПроводки.НомерСтроки, "ЧГ=0") + "].СчетКт", "Объект", Отказ);
					Возврат Ложь;
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		
			РеквизитыСубконто = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Субконто,
				"ЭтоГруппа, ПринятиеКналоговомуУчету, ВидДеятельностиДляНалоговогоУчетаЗатрат, Представление");
				
			Если РеквизитыСубконто.ВидДеятельностиДляНалоговогоУчетаЗатрат = Неопределено Тогда
				Продолжить;
			КонецЕсли;
				
			Если РеквизитыСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
		
			Если Субконто <> Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка()
					И НЕ РеквизитыСубконто.ПринятиеКналоговомуУчету Тогда
				ОтнесениеКЕНВД = РеквизитыСубконто.ВидДеятельностиДляНалоговогоУчетаЗатрат;
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения Тогда
					Отказ = Истина;
					ШаблонСообщения = НСтр("ru='СтруктураПроводки %1: неправильно указана статья затрат для непринимаемых расходов (%2).
						|Расходы, не учитываемые для целей налогообложения, не следует относить к деятельности, облагаемой ЕНВД, - это не имеет смысла для расчета налоговой базы и не поддерживается программой.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения,
						СтруктураПроводки.Содержание,
						ОтнесениеКЕНВД);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, "Хозрасчетный[" + Формат(СтруктураПроводки.НомерСтроки, "ЧГ=0") + "].СчетКт", "Объект", Отказ);
					Возврат Ложь;
				КонецЕсли;
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты Тогда
					Отказ = Истина;
					ШаблонСообщения = НСтр("ru='СтруктураПроводки %1: неправильно указана статья затрат для непринимаемых расходов (%2).
						|Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым - это не имеет смысла для расчета налоговой базы и не поддерживается программой.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения,
						СтруктураПроводки.Содержание,
						ОтнесениеКЕНВД);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, "Хозрасчетный[" + Формат(СтруктураПроводки.НомерСтроки, "ЧГ=0") + "].СчетКт", "Объект", Отказ);
					Возврат Ложь;
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция ПересчетСуммыПоКурсу(Знач ВалютнаяСумма, Знач Валюта, Знач Дата)

	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);

	Сумма = ?(СтруктураКурса.Кратность = 0, 0, Окр(ВалютнаяСумма * СтруктураКурса.Курс / СтруктураКурса.Кратность, 2));
	Возврат Сумма;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВПроводке(Проводка)
	
	Проводка.НадписьНУ = НСтр("ru = 'НУ:'");
	Проводка.НадписьПР = НСтр("ru = 'ПР:'");
	Проводка.НадписьВР = НСтр("ru = 'ВР:'");
	Проводка.НадписьКоличествоДт = ?(Проводка.КоличественныйДтДоступность, НСтр("ru = 'Кол.:'"), "");
	Проводка.НадписьКоличествоКт = ?(Проводка.КоличественныйКтДоступность, НСтр("ru = 'Кол.:'"), "");

КонецПроцедуры

#КонецОбласти

#Область НастройкаСоставаРегистров

&НаСервере
Функция ПодготовитьСписокРегистровДляНастройки()

	// Актуализируем информацию о наличии движений
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит Тогда 
			СтрокаРегистра.ЕстьДвижения = ЭтотОбъект[СтрокаРегистра.Имя + "НаборЗаписей"].Количество() > 0;
		КонецЕсли;
	КонецЦикла;
	
	// Поместим таблицу Регистры во временное хранилище
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Регистры"), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ПрименитьНастройкуСоставаРегистров(РезультатДействийПользователя)
	
	Для каждого ИзмененныйРегистр Из РезультатДействийПользователя Цикл
		
		ИмяРегистра = ИзмененныйРегистр.Значение;
		
		РезультатПоиска = Регистры.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
		Если РезультатПоиска.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРегистра = РезультатПоиска[0];
		
		СтрокаРегистра.Отображение = ИзмененныйРегистр.Пометка;
		
		Если НЕ СтрокаРегистра.Отображение Тогда
			Если СтрокаРегистра.ЕстьРеквизит Тогда
				ЭтотОбъект[ИмяРегистра + "НаборЗаписей"].Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			ОбновляемаяТаблица = Объект.ТаблицаРегистровНакопления;
		Иначе
			ОбновляемаяТаблица = Объект.ТаблицаРегистровСведений;
		КонецЕсли;
		
		СтрокиТаблицы = ОбновляемаяТаблица.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
		
		ЕстьВТаблице = СтрокиТаблицы.Количество() > 0;
		
		Если СтрокаРегистра.Отображение И НЕ ЕстьВТаблице Тогда
			НоваяСтрока     = ОбновляемаяТаблица.Добавить();
			НоваяСтрока.Имя = ИмяРегистра;
		ИначеЕсли НЕ СтрокаРегистра.Отображение И ЕстьВТаблице Тогда
			Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				ОбновляемаяТаблица.Удалить(СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
		
	СоздатьРеквизитыФормы();
	СоздатьЭлементыФормы();

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПереключитьАктивностьДвиженийНаСервере()
	
	НоваяАктивность = НЕ АктивностьДвижений;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если НЕ СтрокаРегистра.ЕстьРеквизит Тогда
			Продолжить;
		КонецЕсли;
		ПутьКДаннымТаблицы = СтрокаРегистра.Имя + "НаборЗаписей";
		
		НаборЗаписей = РеквизитФормыВЗначение(ПутьКДаннымТаблицы);
		НаборЗаписей.УстановитьАктивность(НоваяАктивность);
		ЗначениеВРеквизитФормы(НаборЗаписей, ПутьКДаннымТаблицы);
		
		ТекГруппа = Элементы["Группа" + СтрокаРегистра.Имя];
		Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			ТекГруппа.Картинка = ?(НоваяАктивность, 
				БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			ТекГруппа.Картинка = ?(НоваяАктивность, 
				БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			ТекГруппа.Картинка = ?(НоваяАктивность, 
				БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Элементы.ФормаПереключитьАктивностьДвижений.Заголовок = ?(НоваяАктивность, 
		НСтр("ru='Выключить активность движений'"), НСтр("ru='Включить активность движений'"));
	
	АктивностьДвижений = НоваяАктивность;
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыФункциональныхОпцийФормыОбъектаОперация()
	
	ПериодДок   = Объект.Дата;
	ПериодФО    = Объект.Дата;
	Организация = Объект.Организация;
	
	// При переходе с ОСН на УСН в "Операциях (БУ и НУ)", введенных первым днем периода применения УСН,
	// требуется показывать суммы налогового учета по налогу на прибыль для просмотра и редактирования пользователем
	// результатов операции "Очистка остатков НУ" Помощника по переходу на УСН
	Если УчетУСН.ЭтоПервыйДеньПримененияУСНПослеУплатыНалогаНаПрибыль(Организация, ПериодДок) Тогда
		ПериодФО = НачалоДня(ПериодДок) - 1;
	КонецЕсли;
	
	Если УчетнаяПолитика.ПлательщикНДФЛ(Организация, ПериодДок)
		И НЕ УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Организация, ПериодДок) Тогда
		
		ИПОсновнаяНоменклатурнаяГруппа = УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Организация, ПериодДок);
		ИПОсновнойХарактерДеятельности = УчетнаяПолитика.ОсновнойХарактерДеятельности(Организация, ПериодДок);
		
	КонецЕсли;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтотОбъект, Организация, ПериодФО);
	
	Если ПолучитьФункциональнуюОпциюФормы("ПоддержкаПБУ18") Тогда
		Элементы.ХозрасчетныйГруппаНалоговыйУчетДт.Заголовок = НСтр("ru='Сумма Дт'");
		Элементы.ХозрасчетныйГруппаНалоговыйУчетКт.Заголовок = НСтр("ru='Сумма Кт'");
	Иначе
		Элементы.ХозрасчетныйГруппаНалоговыйУчетДт.Заголовок = НСтр("ru='Сумма НУ Дт'");
		Элементы.ХозрасчетныйГруппаНалоговыйУчетКт.Заголовок = НСтр("ru='Сумма НУ Кт'");
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(ИмяРегистра)
	
	ЭлементКонтрагент         = Элементы.Найти(ИмяРегистра + "Контрагент");
	ЭлементДоговорКонтрагента = Элементы.Найти(ИмяРегистра + "ДоговорКонтрагента");
	ЭлементПатент             = Элементы.Найти(ИмяРегистра + "Патент");
	
	Если ЭлементДоговорКонтрагента <> Неопределено Тогда
		СвязиПараметровДоговор = Новый Массив;
		СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));		
		Если ЭлементКонтрагент <> Неопределено Тогда			
			СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы."+ИмяРегистра+".ТекущиеДанные.Контрагент"));
		КонецЕсли; 
		ЭлементДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровДоговор);
	КонецЕсли; 

	Если ЭлементПатент <> Неопределено Тогда
		СвязиПараметровПатент = Новый Массив;
		СвязиПараметровПатент.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		ЭлементПатент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровПатент);
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСвязиПараметровВыбораКолонокСпискаРегистра()

&НаКлиенте
Процедура ВопросПриИзменииОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПриИзменииОрганизацииНаСервере();
	Иначе
		Объект.Организация = ТекущаяОрганизация;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ТиповыеОперации

&НаКлиенте
Процедура ТиповаяОперацияПриИзменении(Элемент)

	ДобавитьЭлементыПараметрыТиповойОперации();

КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыПараметрыТиповойОперации()

	ТиповаяОперация = Объект.ТиповаяОперация;
	ТипыСвязанныеСОрганизацией = БухгалтерскийУчетПереопределяемый.ТипыСвязанныеСОрганизацией();
	
	//Служебные массивы для процедуры ИзменитьРеквизиты
	УдаляемыеРеквизиты	 = Новый Массив;
	ДобавляемыеРеквизиты = Новый Массив;
	
	// Удалим предыдущие реквизиты и элементы
	Для Каждого Параметр Из ПараметрыТиповойОперации Цикл
		Элементы.Удалить(Элементы["Поле"+Параметр.ИмяРеквизита]);
		УдаляемыеРеквизиты.Добавить(Параметр.ИмяРеквизита);
	КонецЦикла;
	
	ПараметрыТиповойОперации.Очистить();
	
	// Подготовим параметры, которые используются для текущей операции.
	ТаблицаПараметровТиповойОперации = ПараметрыТиповойОперации(ТиповаяОперация);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПараметровТиповойОперации Цикл
		// Добавляем новый Параметр в форму
		ИмяРеквизита = "ПараметрТиповойОперации" + СтрокаТаблицы.ПорядокПараметра;
		ТипРеквизита = СтрокаТаблицы.ОписаниеТипаРеквизита.Получить();
		Реквизит	 = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , СтрокаТаблицы.Наименование, Истина);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		// Добавляем связь параметра и реквизита формы
		СтрокаПараметров				 = ПараметрыТиповойОперации.Добавить();
		СтрокаПараметров.Параметр		 = СтрокаТаблицы.Ссылка;
		СтрокаПараметров.ИмяРеквизита	 = "ПараметрТиповойОперации"+СтрокаТаблицы.ПорядокПараметра;
	КонецЦикла;
	
	// Добавляем новые реквизиты и удаляем старые.
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	//Отрисуем новые поля ввода на форме
	Для Каждого СтрокаТаблицы Из ТаблицаПараметровТиповойОперации Цикл
		
		РодительПоля		 = Элементы.ГруппаПараметрыТиповойОперации;
		ИмяРеквизита		 = "ПараметрТиповойОперации"+СтрокаТаблицы.ПорядокПараметра;
		ТипРеквизита		 = СтрокаТаблицы.ОписаниеТипаРеквизита.Получить();
		// Добавляем новый элемент
		Элемент				 = Элементы.Добавить("Поле"+ИмяРеквизита, Тип("ПолеФормы"), РодительПоля);
		Элемент.Вид			 = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным	 = ИмяРеквизита;
		// Установим расширенную подсказку или подсказку ввода
		РасширеннаяПодсказка = СтрокаТаблицы.Подсказка;
		Если НЕ ПустаяСтрока(РасширеннаяПодсказка) Тогда
			МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РасширеннаяПодсказка, " ");
			Если МассивСлов.Количество() > 5 ИЛИ ТипРеквизита.СодержитТип(Тип("Число")) ИЛИ ТипРеквизита.СодержитТип(Тип("Дата")) Тогда
				Элемент.РасширеннаяПодсказка.Заголовок	 = РасширеннаяПодсказка;
				Элемент.ОтображениеПодсказки			 = ОтображениеПодсказки.Кнопка;
			Иначе
				Элемент.ПодсказкаВвода					 = РасширеннаяПодсказка;
			КонецЕсли;
		КонецЕсли;
		// Установить связь параметров выбора
		МассивСвязейПараметровВыбора = Новый Массив;
		
		// Связь по владельцу
		Если СтрокаТаблицы.ПорядокВладельца <> 0 Тогда
			ИмяПараметраВладельца = "ПараметрТиповойОперации"+СтрокаТаблицы.ПорядокВладельца;
			// Проверим есть ли такой реквизит на форме.
			СтруктураПоиска = Новый Структура("ИмяРеквизита", ИмяПараметраВладельца);
			МассивСтрок = ПараметрыТиповойОперации.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() <> 0 Тогда
				НоваяСвязь	 = Новый СвязьПараметраВыбора("Отбор.Владелец", ИмяПараметраВладельца);
				МассивСвязейПараметровВыбора.Добавить(НоваяСвязь);
			КонецЕсли;
		КонецЕсли;
		// Связь по организации
		Для Каждого ТипЭлемента Из ТипРеквизита.Типы() Цикл
			Если ТипыСвязанныеСОрганизацией.СодержитТип(ТипЭлемента) Тогда
				Если ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") ИЛИ ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") ИЛИ ТипЭлемента = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
					НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация");
				Иначе
					НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");
				КонецЕсли;
				МассивСвязейПараметровВыбора.Добавить(НоваяСвязь);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязейПараметровВыбора);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьЗначенияПараметровТиповойоперации(ДокументОперация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПараметров", ПараметрыТиповойОперации.Выгрузить());
	Запрос.УстановитьПараметр("Операция", ДокументОперация);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПараметров.Параметр,
		|	ТаблицаПараметров.ИмяРеквизита
		|ПОМЕСТИТЬ ВТ_ТаблицаПараметров
		|ИЗ
		|	&ТаблицаПараметров КАК ТаблицаПараметров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаПараметров.ИмяРеквизита,
		|	ЗначенияПараметровТиповойОперации.Значение КАК Значение
		|ИЗ
		|	ВТ_ТаблицаПараметров КАК ВТ_ТаблицаПараметров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПараметровТиповойОперации КАК ЗначенияПараметровТиповойОперации
		|		ПО ВТ_ТаблицаПараметров.Параметр = ЗначенияПараметровТиповойОперации.Параметр
		|ГДЕ
		|	ЗначенияПараметровТиповойОперации.Операция = &Операция";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭтотОбъект[Выборка.ИмяРеквизита] = Выборка.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыТиповойОперации(Владелец)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыТиповойОперации.Ссылка,
	|	ПараметрыТиповойОперации.Наименование КАК Наименование,
	|	ПараметрыТиповойОперации.ОписаниеТипаРеквизита,
	|	ПараметрыТиповойОперации.ПорядокПараметра,
	|	ПараметрыТиповойОперации.Подсказка,
	|	ВЫБОР
	|		КОГДА ПараметрыТиповойОперации.СвязьПоВладельцу <> ЗНАЧЕНИЕ(Справочник.ПараметрыТиповойОперации.ПустаяСсылка)
	|			ТОГДА ПараметрыТиповойОперации.СвязьПоВладельцу.ПорядокПараметра
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокВладельца
	|ИЗ
	|	Справочник.ПараметрыТиповойОперации КАК ПараметрыТиповойОперации
	|ГДЕ
	|	ПараметрыТиповойОперации.Владелец = &Владелец
	|	И ПараметрыТиповойОперации.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПараметрыТиповойОперации.ПорядокПараметра";
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Функция ЭтоПараметр(Значение)

	Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ПараметрыТиповойОперации");

КонецФункции

&НаСервере
Функция ЭтоПериодическийОстаточныйРегистр(ТипРегистра, ИмяРегистра)
	
	Если ТипРегистра = Перечисления.ТипыРегистров.РегистрНакопления Тогда
		МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
		ПериодическийОстаточныйРегистр = МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;
	Иначе
		МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
		ПериодическийОстаточныйРегистр = (МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
	КонецЕсли;
	
	Возврат ПериодическийОстаточныйРегистр;
	
КонецФункции

&НаСервере
Функция ПредыдущиеЗначенияРесурсов(ИмяРегистра, ТаблицаАналитикиДвижения);
	
	СтруктураОтбораИзмерений = Новый Структура;
	СтруктураОтбораИзмерений.Вставить("ТипПоляРегистра", Перечисления.ТипыПолейРегистра.Измерение);
	СтрокиИзмерений = ТаблицаАналитикиДвижения.НайтиСтроки(СтруктураОтбораИзмерений);
	
	// Получим структуру измерений
	СтруктураИзмерений = Новый Структура;
	Для Каждого Измерение Из СтрокиИзмерений Цикл;
		Значение = Измерение.Значение;
		Если ЭтоПараметр(Значение) Тогда
			Если НЕ Значение.ПометкаУдаления Тогда
				Значение = ЭтотОбъект["ПараметрТиповойОперации"+Значение.ПорядокПараметра];
			КонецЕсли;
		КонецЕсли;
		СтруктураИзмерений.Вставить(Измерение.Аналитика, Значение);
	КонецЦикла;
	
	// Добавим организацию в структуру измерений
	Если Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("Организация") <> Неопределено Тогда
		СтруктураИзмерений.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	СтруктураОтбораРесурсов = Новый Структура;
	СтруктураОтбораРесурсов.Вставить("ТипПоляРегистра", Перечисления.ТипыПолейРегистра.Ресурс);
	СтруктураОтбораРесурсов.Вставить("НеИзменятьЗначение", Истина);
	СтрокиРесурсов = ТаблицаАналитикиДвижения.Скопировать(СтруктураОтбораРесурсов);
	
	// Получим Структуру ресурсов
	СтруктураРесурсов = Новый Структура;
	
	Для Каждого Поле Из СтрокиРесурсов Цикл
		СтруктураРесурсов.Вставить(Поле.Аналитика);
	КонецЦикла;
	
	Если СтруктураРесурсов.Количество() > 0 Тогда
		ТаблицаСрезПоследних = РегистрыСведений[ИмяРегистра].СрезПоследних(Объект.Дата, СтруктураИзмерений);
		// Заполним структуру значениями
		Если ТаблицаСрезПоследних.Количество()>0 Тогда
			СтрокаТаблицы = ТаблицаСрезПоследних[0];
			ЗаполнитьЗначенияСвойств(СтруктураРесурсов, СтрокаТаблицы);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРесурсов;
	
КонецФункции

&НаСервере
Процедура СформироватьДвиженияПоТиповойОперацииСервер()

	ТиповаяОперация = Объект.ТиповаяОперация;
	// Очистим движения
	ОчиститьДвижения();
	Объект.ТаблицаРегистровНакопления.Очистить();
	Объект.ТаблицаРегистровСведений.Очистить();
	
	Объект.Содержание = ТиповаяОперация.Наименование;
	
	// Заполним список регистров накопления и сведений
	СписокРегистров = ТиповаяОперация.ДвиженияРегистров.Выгрузить(,"ИмяРегистра, ТипРегистра");
	СписокРегистров.Свернуть("ИмяРегистра, ТипРегистра");
	
	ОбновимОтображениеРегистров(СписокРегистров);
	
	// Заполним регистр бухгалтерии
	Проводки = ХозрасчетныйНаборЗаписей;
	
	// Получим колонки аналитики регистра бухгалтерия
	КолонкиХозрасчетный = ТиповаяОперация.Хозрасчетный.ВыгрузитьКолонки();
	КолонкиХозрасчетный.Колонки.Удалить("НомерСтроки");
	
	Для Каждого СтрокаТаблицыХозрасчетный ИЗ ТиповаяОперация.Хозрасчетный Цикл
		Проводка = Проводки.Добавить();
		Проводка.Активность = Истина;
		Для Каждого Колонка из КолонкиХозрасчетный.Колонки Цикл
			ИмяКолонки	 = Колонка.Имя;
			Значение	 = СтрокаТаблицыХозрасчетный[ИмяКолонки];
			// Если это параметр, то берем значение из формы
			Если ЭтоПараметр(Значение) Тогда
				ИмяПараметра = "ПараметрТиповойОперации" + Значение.ПорядокПараметра;
				Если НЕ Значение.ПометкаУдаления Тогда
					Значение	 = ЭтотОбъект[ИмяПараметра];
				КонецЕсли;
			// Проверим значение, выбранное в типовой операции, на соответствие организации
			Иначе
				ТипЭлемента = ТипЗнч(Значение);
				Если ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") ИЛИ ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") ИЛИ ТипЭлемента = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
					Если Значение.Владелец <> Объект.Организация Тогда
						Значение = Неопределено;
					КонецЕсли;
				ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					Если Значение.Организация <> Объект.Организация Тогда
						Значение = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Установим значение
			Проводка[ИмяКолонки] = Значение;
		КонецЦикла;
	КонецЦикла;
	ЗаполнитьДобавленныеКолонкиТаблиц();

	// Заполним регистры накопления и сведений
	Для Каждого СтрокаСписокРегистров Из СписокРегистров Цикл
		
		// Если на форме нет этого элемента, то не заполняем движение
		Если Элементы.Найти(СтрокаСписокРегистров.ИмяРегистра) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Подготовим структуру отбора
		СтруктураРегистра = Новый Структура;
		СтруктураРегистра.Вставить("ИмяРегистра", СтрокаСписокРегистров.ИмяРегистра);
		СтруктураРегистра.Вставить("ТипРегистра", СтрокаСписокРегистров.ТипРегистра);
		
		ПериодическийОстаточныйРегистр = ЭтоПериодическийОстаточныйРегистр(СтруктураРегистра.ТипРегистра, СтруктураРегистра.ИмяРегистра);
		
		Движение		 = РеквизитФормыВЗначение(СтруктураРегистра.ИмяРегистра+"НаборЗаписей");
		СтрокиДвижения	 = ТиповаяОперация.ДвиженияРегистров.Выгрузить(СтруктураРегистра);
		
		СтрокиОтбораДвижения = СтрокиДвижения.Скопировать(,"НомерДвижения, ВидДвиженияРегистраНакопления");
		СтрокиОтбораДвижения.Свернуть("НомерДвижения, ВидДвиженияРегистраНакопления");
		Для Каждого СтрокаОтбора Из СтрокиОтбораДвижения Цикл
			НоваяЗапись = Движение.Добавить();
			// Установим актуальность и вид движения у регистра накопления
			Если СтруктураРегистра.ТипРегистра = Перечисления.ТипыРегистров.РегистрНакопления Тогда
				НоваяЗапись.Активность = Истина;
				Если ПериодическийОстаточныйРегистр Тогда
					Если СтрокаОтбора.ВидДвиженияРегистраНакопления Тогда
						ВидДвижения = ВидДвиженияНакопления.Приход;
					Иначе
						ВидДвижения = ВидДвиженияНакопления.Расход;
					КонецЕсли;
					НоваяЗапись.ВидДвижения = ВидДвижения;
				КонецЕсли;
			КонецЕсли;
			
			// Скопируем таблицу с требуемым номером движения
			ТаблицаАналитикиДвижения = СтрокиДвижения.Скопировать(Новый Структура("НомерДвижения", СтрокаОтбора.НомерДвижения));
			
			// Получим структуру предыдущих значений по срезу последних у периодического регистра сведений
			Если СтруктураРегистра.ТипРегистра = Перечисления.ТипыРегистров.РегистрСведений И ПериодическийОстаточныйРегистр Тогда
				ПредыдущиеЗначенияРесурсов = ПредыдущиеЗначенияРесурсов(СтруктураРегистра.ИмяРегистра, ТаблицаАналитикиДвижения);
			КонецЕсли;
			
			Для Каждого АналитикаДвижения Из ТаблицаАналитикиДвижения Цикл
				Значение = АналитикаДвижения.Значение;
				Если АналитикаДвижения.НеИзменятьЗначение Тогда
					Значение = ПредыдущиеЗначенияРесурсов[АналитикаДвижения.Аналитика];
				ИначеЕсли ЭтоПараметр(Значение) Тогда
					ИмяПараметра = "ПараметрТиповойОперации"+Значение.ПорядокПараметра;
					Если НЕ Значение.ПометкаУдаления Тогда
						Значение = ЭтотОбъект[ИмяПараметра];
					КонецЕсли;
				Иначе
					
					ТипЭлемента = ТипЗнч(Значение);
					
					Если ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") ИЛИ ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") ИЛИ ТипЭлемента = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
						Если Значение.Владелец <> Объект.Организация Тогда
							Значение = Неопределено;
						КонецЕсли;
					ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
						Если Значение.Организация <> Объект.Организация Тогда
							Значение = Неопределено;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				НоваяЗапись[АналитикаДвижения.Аналитика] = Значение;
			КонецЦикла;
		КонецЦикла;
		ЗначениеВРеквизитФормы(Движение, СтруктураРегистра.ИмяРегистра+"НаборЗаписей");
	КонецЦикла;
	
	ПересчитатьСуммуОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновимОтображениеРегистров(СписокРегистров)
	
	Для Каждого СтрокаРегистра Из Регистры Цикл
		
		ИмяРегистра = СтрокаРегистра.Имя;
		
		РезультатПоиска = СписокРегистров.НайтиСтроки(Новый Структура("ИмяРегистра", ИмяРегистра));
		Если РезультатПоиска.Количество() = 0 Тогда
			Пометка = Ложь;
		Иначе
			Пометка = Истина;
		КонецЕсли;
		
		СтрокаРегистра.Отображение = Пометка;
		
		Если НЕ СтрокаРегистра.Отображение Тогда
			Если СтрокаРегистра.ЕстьРеквизит Тогда
				ЭтотОбъект[ИмяРегистра + "НаборЗаписей"].Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			ОбновляемаяТаблица = Объект.ТаблицаРегистровНакопления;
		Иначе
			ОбновляемаяТаблица = Объект.ТаблицаРегистровСведений;
		КонецЕсли;
		
		СтрокиТаблицы = ОбновляемаяТаблица.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
		
		ЕстьВТаблице = СтрокиТаблицы.Количество() > 0;
		
		Если СтрокаРегистра.Отображение И НЕ ЕстьВТаблице Тогда
			НоваяСтрока     = ОбновляемаяТаблица.Добавить();
			НоваяСтрока.Имя = ИмяРегистра;
		ИначеЕсли НЕ СтрокаРегистра.Отображение И ЕстьВТаблице Тогда
			Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				ОбновляемаяТаблица.Удалить(СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	СоздатьРеквизитыФормы();
	СоздатьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТиповойОперации(Команда)
	
	СформироватьДвиженияПоТиповойОперацииСервер();
	Элементы.ПанельРегистров.ТекущаяСтраница = Элементы.ГруппаХозрасчетный;
	
КонецПроцедуры

#КонецОбласти