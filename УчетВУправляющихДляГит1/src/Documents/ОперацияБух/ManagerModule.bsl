#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 20, 0);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Бухгалтерская справка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "БухгалтерскаяСправка";
	КомандаПечати.Представление = НСтр("ru = 'Бухгалтерская справка'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
КонецПроцедуры

Функция ПечатьБухгалтерскаяСправка(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.КлючПараметровПечати    = "ПАРАМЕТРЫ_ПЕЧАТИ_ОперацияБух_БухгалтерскаяСправка";
	
	ПечатьТорговыхДокументов.УстановитьМинимальныеПоляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОперацияБух.ПФ_MXL_БухгалтерскаяСправка");
	
	// Для корректного использования областей с учетом ПБУ18, проверим их наличие в макете.
	Если Макет.Области.Найти("ЗаголовокТаблицыПБУ18") <> Неопределено 
		 И Макет.Области.Найти("СтрокаТаблицыПБУ18")    <> Неопределено Тогда
		ЕстьОбластиПБУ18 = Истина;
	Иначе
		ЕстьОбластиПБУ18 = Ложь;
	КонецЕсли;
	
	// Существование некоторых полей в запросе зависит от типа счета и его характеристик,
	// поэтому некоторые поля, как КоличествоДт, иногда будут иметь тип null.
	// Эта особенность учитывается в макете "ПФ_MXL_БухгалтерскаяСправка"
	// В ячейке отображается "-", если значение равно нулю.
	// В ячейке отображается "", когда характеристики не должно быть (тип равен null)
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	|	ХозрасчетныйДвиженияССубконто.ПодразделениеДт КАК ПодразделениеДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
	|	ХозрасчетныйДвиженияССубконто.ПодразделениеКт КАК ПодразделениеКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Организация КАК Организация,
	|	ХозрасчетныйДвиженияССубконто.ВалютаДт КАК ВалютаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютаКт КАК ВалютаКт,
	|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоДт КАК КоличествоДт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт КАК КоличествоКт,
	|	ХозрасчетныйДвиженияССубконто.Содержание КАК Содержание,
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СуммаНУДт КАК СуммаНУДт,
	|	ХозрасчетныйДвиженияССубконто.СуммаНУКт КАК СуммаНУКт,
	|	ХозрасчетныйДвиженияССубконто.СуммаПРДт КАК СуммаПРДт,
	|	ХозрасчетныйДвиженияССубконто.СуммаПРКт КАК СуммаПРКт,
	|	ХозрасчетныйДвиженияССубконто.СуммаВРДт КАК СуммаВРДт,
	|	ХозрасчетныйДвиженияССубконто.СуммаВРКт КАК СуммаВРКт
	|ПОМЕСТИТЬ Проводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор В (&МассивОбъектов), , ) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОперацияБух.Ссылка КАК Ссылка,
	|	ОперацияБух.Номер КАК Номер,
	|	ОперацияБух.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	ОперацияБух.Дата КАК Дата,
	|	ОперацияБух.Содержание КАК СодержаниеОперации,
	|	ОперацияБух.Организация КАК ОрганизацияДокумента,
	|	Проводки.НомерСтроки КАК НомерСтроки,
	|	Проводки.СчетДт КАК СчетДт,
	|	Проводки.ПодразделениеДт КАК ПодразделениеДт,
	|	Проводки.СубконтоДт1 КАК СубконтоДт1,
	|	Проводки.СубконтоДт2 КАК СубконтоДт2,
	|	Проводки.СубконтоДт3 КАК СубконтоДт3,
	|	Проводки.СчетКт КАК СчетКт,
	|	Проводки.ПодразделениеКт КАК ПодразделениеКт,
	|	Проводки.СубконтоКт1 КАК СубконтоКт1,
	|	Проводки.СубконтоКт2 КАК СубконтоКт2,
	|	Проводки.СубконтоКт3 КАК СубконтоКт3,
	|	Проводки.ВалютаДт КАК ВалютаДт,
	|	Проводки.ВалютаКт КАК ВалютаКт,
	|	Проводки.Сумма КАК Сумма,
	|	Проводки.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	Проводки.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	Проводки.КоличествоДт КАК КоличествоДт,
	|	Проводки.КоличествоКт КАК КоличествоКт,
	|	Проводки.Содержание КАК Содержание,
	|	Проводки.СуммаНУДт КАК СуммаНУДт,
	|	Проводки.СуммаНУКт КАК СуммаНУКт,
	|	Проводки.СуммаПРДт КАК СуммаПРДт,
	|	Проводки.СуммаПРКт КАК СуммаПРКт,
	|	Проводки.СуммаВРДт КАК СуммаВРДт,
	|	Проводки.СуммаВРКт КАК СуммаВРКт,
	|	ЕСТЬNULL(Проводки.СуммаПРДт, 0) <> 0 КАК НаличиеПРДт,
	|	ЕСТЬNULL(Проводки.СуммаПРКт, 0) <> 0 КАК НаличиеПРКт,
	|	ЕСТЬNULL(Проводки.СуммаВРДт, 0) <> 0 КАК НаличиеВРДт,
	|	ЕСТЬNULL(Проводки.СуммаВРКт, 0) <> 0 КАК НаличиеВРКт
	|ИЗ
	|	Документ.ОперацияБух КАК ОперацияБух
	|		ЛЕВОЕ СОЕДИНЕНИЕ Проводки КАК Проводки
	|		ПО ОперацияБух.Ссылка = Проводки.Регистратор
	|ГДЕ
	|	ОперацияБух.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОперацияБух.Дата,
	|	ОперацияБух.Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(НаличиеПРДт),
	|	МАКСИМУМ(НаличиеПРКт),
	|	МАКСИМУМ(НаличиеВРДт),
	|	МАКСИМУМ(НаличиеВРКт)
	|ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// Получаем области макета для вывода в табличный документ.
		ШапкаДокумента       = Макет.ПолучитьОбласть("Шапка");
		ПодвалТаблицы        = Макет.ПолучитьОбласть("ПодвалТаблицы");
		ПодвалДокумента      = Макет.ПолучитьОбласть("Подвал");
		
		// Есть два типа областей в макете "ПФ_MXL_БухгалтерскаяСправка":
		// области с отображением БУ, НУ, ПР и ВР для учета ПБУ18 ("ЗаголовокТаблицыПБУ18", "СтрокаТаблицыПБУ18");
		// области с отображением только БУ ("ЗаголовокТаблицы", "СтрокаТаблицы").
		// Если ПР и ВР указаны в проводках, будем использовать области с учетом ПБУ18.
		
		// Для выбора областей макета есть две группы условий:
		// 1) Если есть проводки с отличными от нуля значениями ПР и ВР, то используем области с учетом ПБУ18.
		// 2) Для использования областей с учетом ПБУ18, проверим их наличие в макете.
		Если (Выборка.НаличиеПРДт ИЛИ Выборка.НаличиеПРКт ИЛИ Выборка.НаличиеВРДт ИЛИ Выборка.НаличиеВРКт)
			И ЕстьОбластиПБУ18 Тогда
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыПБУ18");
			СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицыПБУ18");
		Иначе
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
		КонецЕсли;
		
		ДанныеФизлица = УчетЗарплаты.ДанныеФизическихЛиц(Выборка.ОрганизацияДокумента, Выборка.Ответственный, Выборка.Дата);
		
		СтруктураПодвала = Новый Структура("РасшифровкаПодписиИсполнителя", ДанныеФизлица.Представление);
		
		ПодвалДокумента.Параметры.Заполнить(СтруктураПодвала);
		
		// Выведем шапку документа.
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.ОрганизацияДокумента, Выборка.Дата);
		
		СтруктураШапки = Новый Структура;
		СтруктураШапки.Вставить("Организация",    ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации));
		СтруктураШапки.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Ложь));
		СтруктураШапки.Вставить("ДатаДокумента",  Формат(Выборка.Дата, "ДЛФ=D"));
		СтруктураШапки.Вставить("Содержание",     Выборка.СодержаниеОперации);
		
		ШапкаДокумента.Параметры.Заполнить(СтруктураШапки);
		ТабДокумент.Вывести(ШапкаДокумента);
		
		// Выведем заголовок таблицы.
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		ВыборкаСсылка = Выборка.Выбрать();
		
		// Выведем строки документа.
		Пока ВыборкаСсылка.Следующий() Цикл
			
			СтрокаТаблицы.Параметры.Заполнить(ВыборкаСсылка);
			
			АналитикаДт = ?(ЗначениеЗаполнено(ВыборкаСсылка.ПодразделениеДт), Строка(ВыборкаСсылка.ПодразделениеДт) + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(ВыборкаСсылка.СубконтоДт1), Строка(ВыборкаСсылка.СубконтоДт1) + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(ВыборкаСсылка.СубконтоДт2), Строка(ВыборкаСсылка.СубконтоДт2) + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(ВыборкаСсылка.СубконтоДт3), Строка(ВыборкаСсылка.СубконтоДт3), "");
			
			АналитикаКт = ?(ЗначениеЗаполнено(ВыборкаСсылка.ПодразделениеКт), Строка(ВыборкаСсылка.ПодразделениеКт) + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(ВыборкаСсылка.СубконтоКт1), Строка(ВыборкаСсылка.СубконтоКт1) + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(ВыборкаСсылка.СубконтоКт2), Строка(ВыборкаСсылка.СубконтоКт2) + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(ВыборкаСсылка.СубконтоКт3), Строка(ВыборкаСсылка.СубконтоКт3), "");
				
			СтруктураАналитики = Новый Структура("АналитикаДт,АналитикаКт", АналитикаДт, АналитикаКт);
			СтрокаТаблицы.Параметры.Заполнить(СтруктураАналитики);
			
			// Проверим, помещается ли строка с подвалом.
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(СтрокаТаблицы);
			СтрокаСПодвалом.Добавить(ПодвалТаблицы);
			СтрокаСПодвалом.Добавить(ПодвалДокумента);
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
				
				// Выведем подвал таблицы.
				ТабДокумент.Вывести(ПодвалТаблицы);
				
				// Выведем разрыв страницы.
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				// Выведем заголовок таблицы.
				ТабДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;
			
			ТабДокумент.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		// Выведем подвал таблицы.
		ТабДокумент.Вывести(ПодвалТаблицы);
		
		// Выведем подвал документа.
		ТабДокумент.Вывести(ПодвалДокумента);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
	
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм,
	ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Проверяем, нужно ли для макета ПлатежноеПоручение формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "БухгалтерскаяСправка") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "БухгалтерскаяСправка", "Бухгалтерская справка", 
			ПечатьБухгалтерскаяСправка(МассивОбъектов, ОбъектыПечати), , "Документ.ОперацияБух.ПФ_MXL_БухгалтерскаяСправка");
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьИзмененныйМакетПФ_MXL_БухгалтерскаяСправка() Экспорт
	
	ПроверяемыеОбъекты = Новый Массив;
	ПроверяемыеОбъекты.Добавить("Документ.ОперацияБух");
	
	ПроверяемыеМакеты = Новый Массив;
	ПроверяемыеМакеты.Добавить("ПФ_MXL_БухгалтерскаяСправка");
	
	ИменаНовыхОбластей = Новый Массив;
	ИменаНовыхОбластей.Добавить("ЗаголовокТаблицыПБУ18");
	ИменаНовыхОбластей.Добавить("СтрокаТаблицыПБУ18");
	
	Возврат УправлениеПечатьюБП.ИспользуютсяИзмененныеМакеты(ПроверяемыеМакеты, ПроверяемыеОбъекты, ИменаНовыхОбластей);
	
КонецФункции

#КонецЕсли