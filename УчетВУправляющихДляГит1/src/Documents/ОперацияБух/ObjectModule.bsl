#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Устанавливает/снимает признак активности движений документа в зависимости от пометки удаления.
// Следует вызывать перед записью измененной пометки удаления.
// Помеченный на удаление документ не должен иметь активных движений.
// Не помеченный на удаление документ может иметь неактивные движения.
Процедура СинхронизироватьАктивностьДвиженийСПометкойУдаления()
	
	Если НЕ ПометкаУдаления Тогда
		// Не помеченный на удаление документ может иметь неактивные движения.
		// Однако, при снятии пометки удаления все движения становятся активными.
		Если ЭтоНовый() Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления") = ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Данные движений будут читаться только при неинтерактивной работе (например, при пометке на удаление документа
	// из списка). Поэтому чтение без контроля прав будет безопасным.
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСДвижениями = Новый Массив;
	Для Каждого Движение Из Движения Цикл
		
		Если Движение.Записывать = Ложь Тогда // При работе формы набор может быть уже "потроган" (прочитан, модифицирован)
			// Набор никто не трогал
			Движение.Прочитать();
		КонецЕсли;
		
		Если Движение.Количество() > 0 Тогда
			РегистрыСДвижениями.Добавить(Движение);
		КонецЕсли;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Активность = НЕ ПометкаУдаления;
	Для Каждого Движение Из РегистрыСДвижениями Цикл
		
		Для Каждого Строка Из Движение Цикл
			
			Если Строка.Активность = Активность Тогда
				Продолжить;
			КонецЕсли;
			
			Строка.Активность   = Активность;
			Движение.Записывать = Истина; // На случай, если набор был прочитан выше
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРегистрНакопления(ИмяРегистра)
	
	Если ТаблицаРегистровНакопления.Найти(ИмяРегистра, "Имя") = Неопределено Тогда
		ТаблицаРегистровНакопления.Добавить().Имя = ИмяРегистра;
	КонецЕсли;
	
КонецПроцедуры
		
Процедура ДобавитьРегистрСведений(ИмяРегистра)
	
	Если ТаблицаРегистровСведений.Найти(ИмяРегистра, "Имя") = Неопределено Тогда
		ТаблицаРегистровСведений.Добавить().Имя = ИмяРегистра;
	КонецЕсли;
	
КонецПроцедуры
		
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ТиповыеОперации") Тогда
		ЭтотОбъект.СпособЗаполнения	 = "ТиповаяОперация";
		ЭтотОбъект.ТиповаяОперация	 = ДанныеЗаполнения.Ссылка;
	Иначе
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособЗаполнения = "Вручную" Тогда
		ТиповаяОперация      = Неопределено;
		СторнируемыйДокумент = Неопределено;
	ИначеЕсли СтрНайти(СпособЗаполнения, "Сторно") > 0 Тогда
		ТиповаяОперация = Неопределено;
				
		//При сторнировании документа прошлого месяца необходимо отметить проводки, не полежащие 
		//корректировке при расчете себестоимости
		Если ЗначениеЗаполнено(СторнируемыйДокумент) И (НачалоМесяца(СторнируемыйДокумент.Дата) <> НачалоМесяца(Дата)) Тогда
			МассивСчетов 			= УчетЗатрат.ПредопределенныеСчетаЗапасов();
		    МассивСчетовРасходов 	= УчетЗатрат.ПредопределенныеСчетаРасходов(); 
			
			Для Каждого СчетРасходов Из МассивСчетовРасходов Цикл
				МассивСчетов.Добавить(СчетРасходов);
			КонецЦикла;	
			
			МассивСубсчетов = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов);
			
			Для Каждого Проводка Из Движения.Хозрасчетный Цикл
				Проводка.НеКорректироватьСтоимостьАвтоматически = (МассивСубсчетов.Найти(Проводка.СчетКт) <> Неопределено)
					ИЛИ (МассивСубсчетов.Найти(Проводка.СчетДт) <> Неопределено);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли СпособЗаполнения = "ТиповаяОперация" Тогда
		СторнируемыйДокумент = Неопределено;
	КонецЕсли;
	
	// Заполнение даты документа и реквизитов регистров Период и Организация.
	ФиксированноеВремяДокументов.УстановитьВремяНовогоДокумента(ЭтотОбъект, Отказ);
	Для каждого НаборЗаписей Из Движения Цикл
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПустаяТаблица   = НаборЗаписей.ВыгрузитьКолонки();
		ЕстьОрганизация = ПустаяТаблица.Колонки.Найти("Организация") <> Неопределено;
		ЕстьПериод      = ПустаяТаблица.Колонки.Найти("Период") <> Неопределено;
		
		Если НЕ (ЕстьОрганизация ИЛИ ЕстьПериод) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		Если ЕстьОрганизация Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		КонецЕсли;
		Если ЕстьПериод Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
		КонецЕсли;
		НаборЗаписей.Загрузить(ТаблицаДвижений);
		
		// Актуализируем списки регистров
		ИмяРегистра = НаборЗаписей.Метаданные().Имя;
		Если Метаданные.РегистрыНакопления.Содержит(НаборЗаписей.Метаданные()) Тогда
			ДобавитьРегистрНакопления(ИмяРегистра);
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(НаборЗаписей.Метаданные()) Тогда
			ДобавитьРегистрСведений(ИмяРегистра);
		КонецЕсли;
		
		// В первый день применения УСН после перехода с уплаты налога на прибыль
		// не требуется очищать суммы НУ, ВР, ПР в операциях, сформированных "Помощником по переходу на УСН"
		Если Метаданные.РегистрыБухгалтерии.Содержит(НаборЗаписей.Метаданные()) Тогда
			Если УчетУСН.ЭтоПервыйДеньПримененияУСНПослеУплатыНалогаНаПрибыль(Организация, Дата) Тогда
				НаборЗаписей.ДополнительныеСвойства.Вставить("СменаНалоговогоУчета", Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СинхронизироватьАктивностьДвиженийСПометкойУдаления();
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	Если СтрНайти(СпособЗаполнения, "Сторно") = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СторнируемыйДокумент");
	КонецЕсли;
	Если СтрНайти(СпособЗаполнения, "ТиповаяОперация") = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ТиповаяОперация");
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецЕсли
