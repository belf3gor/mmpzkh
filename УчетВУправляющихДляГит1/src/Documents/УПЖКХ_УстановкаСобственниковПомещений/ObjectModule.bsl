
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

#Область ПеременныеМодуля

Перем мУпрощенныйВариантУчетаСобственников Экспорт; // Хранит значение константы "Упрощенный вариант учета собственников".

#КонецОбласти

///////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

// Определяет подвид частной собственности.
//
// Параметры:
//  Нет
//
Функция ОпределитьПодвидЧастнойСобственности() Экспорт
	
	Если ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Частная Тогда
		Если НЕ НесколькоСобственников Тогда
			// один собственник
			ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Индивидуальная;
		ИначеЕсли НЕ ОпределитьДолиСобственности Тогда
			// несколько собственников без учета долей
			ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Совместная;
		Иначе
			// несколько собственников и указаны доли
			ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Долевая;
		КонецЕсли;
	Иначе
		ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПодвидЧастнойСобственности;

КонецФункции

// Определяет были ли уже записи по данному помещению по собственникам, не указанным в данном документе.
Функция ОпределитьСменуСобственников(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ВидДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.НомерДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДатаДокумента
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&Дата,
	|			(НЕ Собственник В (&СписокСобственников))
	|				И Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует";
	
	СписокСобственников = Новый СписокЗначений();
	СписокСобственников.ЗагрузитьЗначения(Собственники.ВыгрузитьКолонку("Собственник"));
	
	Запрос.УстановитьПараметр("Дата",                Новый Граница(ЭтотОбъект.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("СписокСобственников", СписокСобственников);
	Запрос.УстановитьПараметр("Помещение",           СтруктураШапкиДокумента.Помещение);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// По результату запроса по шапке документа формируем движения по регистрам.
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ВидОперации = Перечисления.УПЖКХ_ВидыОперацийСобственности.АннулированиеПравСобственности Тогда
		// Аннулируем право собственности.
		ДвижениеПоРегиструСобственностьНаПомещения(СтруктураШапкиДокумента, Отказ, Заголовок, Ложь);
		ДвижениеПоРегиструСобственникиПомещений(Собственники, СтруктураШапкиДокумента, Отказ, Заголовок, Ложь);
	Иначе
		// Регистрируем право собственности.
		
		ДвижениеПоРегиструСобственностьНаПомещения(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		// Отменяем действие записей по данному помещению по собственникам, 
		// не указанным в данном документе. 
		ТаблицаНеСобственников = ОпределитьСменуСобственников(СтруктураШапкиДокумента);
		Если ТаблицаНеСобственников.Количество() > 0 Тогда
			ДвижениеПоРегиструСобственникиПомещений(ТаблицаНеСобственников, СтруктураШапкиДокумента, Отказ, Заголовок, Ложь);
		КонецЕсли;
		
		ДвижениеПоРегиструСобственникиПомещений(Собственники, СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;

КонецПроцедуры

// Формирует движения по регистру "Собственность на помещения".
Процедура ДвижениеПоРегиструСобственностьНаПомещения(СтруктураШапкиДокумента, Отказ, Заголовок, 
														ПризнакДействия = Истина)

	НаборДвижений = Движения.УПЖКХ_СобственностьНаПомещения;

	Движение = НаборДвижений.Добавить();
	Движение.Период                     = СтруктураШапкиДокумента.Дата;
	Движение.Помещение                  = СтруктураШапкиДокумента.Помещение;
	Движение.ВидСобственности           = СтруктураШапкиДокумента.ВидСобственности;
	Движение.ПодвидЧастнойСобственности = СтруктураШапкиДокумента.ПодвидЧастнойСобственности;
	Движение.Действует                  = ПризнакДействия;
	
КонецПроцедуры // ДвижениеПоРегиструСобственностьНаПомещения()

// Формирует движения по регистру "Собственники помещений".
Процедура ДвижениеПоРегиструСобственникиПомещений(ТаблицаСобственников, СтруктураШапкиДокумента, Отказ, 
													Заголовок, ПризнакДействия = Истина)

	НаборДвижений = Движения.УПЖКХ_СобственникиПомещений;

	Для Каждого ТекСтрокаСобственники Из ТаблицаСобственников Цикл
		
		Движение = НаборДвижений.Добавить();
		Движение.Период                           = СтруктураШапкиДокумента.Дата;
		Движение.Помещение                        = СтруктураШапкиДокумента.Помещение;
		Движение.Собственник                      = ТекСтрокаСобственники.Собственник;
		Движение.ОснованиеПолученияВСобственность = ТекСтрокаСобственники.ОснованиеПолученияВСобственность;
		Движение.ВидДокумента                     = ТекСтрокаСобственники.ВидДокумента;
		Движение.НомерДокумента                   = ТекСтрокаСобственники.НомерДокумента;
		Движение.ДатаДокумента                    = ТекСтрокаСобственники.ДатаДокумента;
		Движение.Действует                        = ПризнакДействия;
		
		Если СтруктураШапкиДокумента.ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Долевая 
		   И ПризнакДействия Тогда
			Движение.ДоляСобственникаЧислитель    = ТекСтрокаСобственники.ДоляСобственникаЧислитель;
			Движение.ДоляСобственникаЗнаменатель  = ТекСтрокаСобственники.ДоляСобственникаЗнаменатель;
		Иначе
			Движение.ДоляСобственникаЧислитель    = 0;
			Движение.ДоляСобственникаЗнаменатель  = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвижениеПоРегиструСобственникиПомещений()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТА

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура проведения документа.
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.УПЖКХ_УстановкаСобственниковПомещений.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	СтруктураШапкиДокумента.Вставить("ПодвидЧастнойСобственности", ОпределитьПодвидЧастнойСобственности());
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("ВидОперации");
	ПроверяемыеРеквизиты.Добавить("Помещение");
	ПроверяемыеРеквизиты.Добавить("ВидСобственности");
	
	Если НесколькоСобственников И ОпределитьДолиСобственности Тогда
		
		// Для проверки долей собственников необходимо подготовить таблицу определенной структуры.
		врТаблицаСобственников = Собственники.Выгрузить();
		
		// В таблице должно быть поле "Проживающий",содержащее собственников, а также поля с числителем и знаменателем доли.
		врТаблицаСобственников.Колонки.Добавить("Проживающий");
		врТаблицаСобственников.Колонки.Добавить("ДоляСобственностиЧислитель");
		врТаблицаСобственников.Колонки.Добавить("ДоляСобственностиЗнаменатель");
		
		// Заполняем новые поля таблицы собственников.
		Для Каждого ТекСтрокаСобственника Из врТаблицаСобственников Цикл
			ТекСтрокаСобственника.Проживающий                  = ТекСтрокаСобственника.Собственник;
			ТекСтрокаСобственника.ДоляСобственностиЧислитель   = ТекСтрокаСобственника.ДоляСобственникаЧислитель;
			ТекСтрокаСобственника.ДоляСобственностиЗнаменатель = ТекСтрокаСобственника.ДоляСобственникаЗнаменатель;
		КонецЦикла;
		
		// В поле "Собственник" должен содержаться признак, является ли жилец или физ. лицо собственником.
		// Поэтому удаляем исходную, добавляем новую колонку и заполняем ее.
		врТаблицаСобственников.Колонки.Удалить("Собственник");
		врТаблицаСобственников.Колонки.Добавить("Собственник");
		врТаблицаСобственников.ЗаполнитьЗначения(Истина, "Собственник");
		
		// Выполняем непосредственную проверку долей собственников.
		УПЖКХ_УчетСобственностиСервер.ПроверитьЗаполнениеДолейСобственностиНаПомещение(врТаблицаСобственников, Отказ);
		
	КонецЕсли;
	
	// Не даём провести документ, когда в совместной собственности указано менее двух собственников.
	Если НесколькоСобственников И Собственники.Количество() < 2 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Указано, что собственников должно быть несколько, но в таблице выбран только один собственник.", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияПеременных

мУпрощенныйВариантУчетаСобственников = ИспользуетсяУпрощенныйВариантУчетаСобственников();

#КонецОбласти

#КонецЕсли