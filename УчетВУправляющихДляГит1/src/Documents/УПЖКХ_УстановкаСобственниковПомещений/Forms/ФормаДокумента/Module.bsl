
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью и доступностью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Если вид собственности «Частная», то появляется флажок «Несколько собственников».
	Элементы.НесколькоСобственников.Видимость = 
		(Объект.ВидСобственности = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыСобственности.Частная"));
	
	// При установке данного флажка поля собственника, документов и основание исчезают,
	// и появляется таблица с такими же колонками, а также флажок «Определить доли собственности».
	Если Объект.НесколькоСобственников Тогда
		Элементы.ПанельСобственники.ТекущаяСтраница = Элементы.СписокСобственников;
	Иначе
		Элементы.ПанельСобственники.ТекущаяСтраница = Элементы.ОдинСобственник;
	КонецЕсли;
	
	// При установке флажка "Определить доли собственности" в таблице появляется колонка «Доля».
	Элементы.СобственникиДоляСобственности.Видимость = Объект.ОпределитьДолиСобственности;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийСобственности.АннулированиеПравСобственности") Тогда
		Элементы.ВидСобственности.ТолькоПросмотр       = Истина;
		Элементы.НесколькоСобственников.ТолькоПросмотр = Истина;
		Элементы.ГруппаСобственники.ТолькоПросмотр     = Истина;
	Иначе
		Элементы.ВидСобственности.ТолькоПросмотр       = Ложь;
		Элементы.НесколькоСобственников.ТолькоПросмотр = Ложь;
		Элементы.ГруппаСобственники.ТолькоПросмотр     = Ложь;
	КонецЕсли;
	
	Элементы.СсылкаПроверкаЧленовТСЖ.Видимость = (Не Форма.СписокДокументовТСЖ.Количество() = 0);
	
КонецПроцедуры

&НаКлиенте
// Обновляет информацию о виде частной собственности.
Процедура ОбновитьВидЧастнойСобственности()
	
	ПодвидЧастнойСобственности = "";
	
	Если Объект.ВидСобственности = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыСобственности.Частная") Тогда
		ПодвидЧастнойСобственности = ОпределитьПодвидЧастнойСобственностиНаСервере();
	КонецЕсли;
	
	ВидЧастнойСобственности = ПодвидЧастнойСобственности;
	
КонецПроцедуры

&НаСервере
// Заполняет данные о собственности и собственниках.
Процедура ПерезаполнитьДанныеСобственности()
	
	Объект.Собственники.Очистить();
	
	ДанныеОСобственности = 
		ПолучитьДанныеОСобственностиПомещения(Объект.Помещение, Новый Граница(Объект.Дата, ВидГраницы.Исключая));
	Если ДанныеОСобственности.Количество() > 0 Тогда
		Объект.ВидСобственности    = ДанныеОСобственности[0].ВидСобственности;
		ПодвидЧастнойСобственности = ДанныеОСобственности[0].ПодвидЧастнойСобственности;
	Иначе
		СтрокаСобственник = Объект.Собственники.Добавить();
		Элементы.Собственники.ТекущаяСтрока = Объект.Собственники[0].ПолучитьИдентификатор();
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Данных о собственности не обнаружено!");
		Возврат;
	КонецЕсли;

	Для Каждого ТекСтр Из ДанныеОСобственности Цикл
		СтрТаб = Объект.Собственники.Добавить();
		СтрТаб.Собственник                      = ТекСтр.Собственник;
		СтрТаб.ОснованиеПолученияВСобственность = ТекСтр.ОснованиеПолученияВСобственность;
		СтрТаб.ВидДокумента                     = ТекСтр.ВидДокумента;
		СтрТаб.НомерДокумента                   = ТекСтр.НомерДокумента;
		СтрТаб.ДатаДокумента                    = ТекСтр.ДатаДокумента;
		СтрТаб.ДоляСобственникаЧислитель        = ТекСтр.ДоляСобственникаЧислитель;
		СтрТаб.ДоляСобственникаЗнаменатель      = ТекСтр.ДоляСобственникаЗнаменатель;
		СтрТаб.ДоляСобственности = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(
				СтрТаб.ДоляСобственникаЧислитель, СтрТаб.ДоляСобственникаЗнаменатель);
	КонецЦикла;
	
	Элементы.Собственники.ТекущаяСтрока = Объект.Собственники[0].ПолучитьИдентификатор();
	
	Если ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Совместная Тогда
		Объект.НесколькоСобственников = Истина;
	ИначеЕсли ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Долевая Тогда
		Объект.НесколькоСобственников      = Истина;
		Объект.ОпределитьДолиСобственности = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Получает значение константы "УПЖКХ_УпрощенныйВариантУчетаСобственников".
Функция ПолучитьВариантУчетаСобственности()
	
	Возврат Константы.УПЖКХ_УпрощенныйВариантУчетаСобственников.Получить();
	
КонецФункции

&НаСервере
// Формирует список документов "Вступление в ТСЖ", "Выход из ТСЖ", в которых имеются собственники, по
// которым аннулируем права собственности.
Процедура ЗаполнитьСписокСоответствующихДокументовТСЖ()
	
	СписокДокументовТСЖ.Очистить();
	
	Если Не Объект.ВидОперации = Перечисления.УПЖКХ_ВидыОперацийСобственности.АннулированиеПравСобственности
	 Или Не Константы.УПЖКХ_ИспользоватьФункционалТСЖ.Получить()
	 Или Объект.Собственники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЧленыТСЖ.Регистратор
	|ИЗ
	|	РегистрСведений.КВП_ЧленыТСЖ КАК КВП_ЧленыТСЖ
	|ГДЕ
	|	КВП_ЧленыТСЖ.ЧленТСЖ В(&МассивСобственников)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ЧленыТСЖ.Регистратор";
	Запрос.УстановитьПараметр("МассивСобственников", Объект.Собственники.Выгрузить(, "Собственник").ВыгрузитьКолонку("Собственник"));
	
	СписокДокументовТСЖ.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"));
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРОЦЕДУРАМИ И ФУНКЦИЯМИ МОДУЛЯ ОБЪЕКТА

#Область РаботаСПроцедурамиИФункциямиМодуляОбъекта

&НаСервере
// Определяет вид частной собственности.
Функция ОпределитьПодвидЧастнойСобственностиНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.УПЖКХ_УстановкаСобственниковПомещений"));
	Возврат ДокументОбъект.ОпределитьПодвидЧастнойСобственности();
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура-обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() И ИспользуетсяУпрощенныйВариантУчетаСобственников() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
			"Установлен упрощенный вариант учета собственников! Создание документа невозможно!", Отказ);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	КонецЕсли;
	
	Если Объект.Собственники.Количество() = 0 Тогда
		НоваяСтрока = Объект.Собственники.Добавить();
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.Собственники Цикл
		Если ПустаяСтрока(ТекСтрока.ДоляСобственности) Тогда
			ТекСтрока.ДоляСобственности = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(
											ТекСтрока.ДоляСобственникаЧислитель, ТекСтрока.ДоляСобственникаЗнаменатель);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСписокСоответствующихДокументовТСЖ();
	
	УправлениеФормой(ЭтаФорма);
	
	Элементы.Собственники.ТекущаяСтрока = Объект.Собственники[0].ПолучитьИдентификатор();
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура-обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОбновитьВидЧастнойСобственности();
	
КонецПроцедуры

&НаСервере
// Процедура-обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПослеЗаписи" формы.
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если НЕ ПолучитьВариантУчетаСобственности() И Объект.Проведен Тогда
		Оповестить("ОбновитьСведенияОСобственности");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПриОткрытии" поля "ВидСобственности".
Процедура ВидСобственностиПриИзменении(Элемент)
	
	Если (Объект.ВидСобственности = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыСобственности.Государственная")
		ИЛИ Объект.ВидСобственности = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыСобственности.Муниципальная")
		ИЛИ Объект.ВидСобственности = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыСобственности.Ведомственная"))
		И Объект.НесколькоСобственников Тогда
		
		Если Объект.Собственники.Количество() > 1 Тогда
			
			ТекстВопроса = "Все строки собственники из списка, кроме первого, будут удалены.
						   |Продолжить?";
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаОбУдалении", ЭтаФорма),
						   ТекстВопроса,
						   РежимДиалогаВопрос.ДаНет,,
						   КодВозвратаДиалога.Да);
			Возврат;
		КонецЕсли;
		
		ИзменитьПараметрыДокумента();
		
	КонецЕсли;
	
	ВидСобственностиПриИзмененииФрагмент();
	
КонецПроцедуры // ВидСобственностиПриИзменении()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ВидСобственностиПриИзменении()".
Процедура ОбработатьРезультатВопросаОбУдалении(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.ВидСобственности = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыСобственности.Частная");
		Возврат;
	КонецЕсли;
	
	Пока Объект.Собственники.Количество() > 1 Цикл
		СтрокаУдаления = Объект.Собственники[1];
		Объект.Собственники.Удалить(Объект.Собственники.Индекс(СтрокаУдаления));
	КонецЦикла;
	
	Элементы.Собственники.ТекущаяСтрока = Объект.Собственники[0].ПолучитьИдентификатор();
	
	ИзменитьПараметрыДокумента();
	ВидСобственностиПриИзмененииФрагмент();
	
КонецПроцедуры // ОбработатьРезультатВопросаОбУдалении()

&НаКлиенте
// Процедура-продолжение процедуры "ВидСобственностиПриИзмененииФрагмент()".
Процедура ИзменитьПараметрыДокумента()
	
	Объект.НесколькоСобственников      = Ложь;
	Объект.ОпределитьДолиСобственности = Ложь;
	
КонецПроцедуры // ИзменитьПараметрыДокумента()

&НаКлиенте
// Процедура-обработчик окончания выбора вида собственности.
//
Процедура ВидСобственностиПриИзмененииФрагмент()
	
	ОбновитьВидЧастнойСобственности();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ВидСобственностиПриИзмененииФрагмент()

&НаКлиенте
// Процедура-обработчик события "ПриОткрытии" поля "Помещение".
Процедура ПомещениеПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийСобственности.РегистрированиеПравСобственности") Тогда
		ТекстВопроса       = "Перезаполнить данные о собственности?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаПомещениеПриИзменении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийСобственности.АннулированиеПравСобственности") Тогда
		ПерезаполнитьДанныеСобственности();
		ЗаполнитьСписокСоответствующихДокументовТСЖ();
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ПомещениеПриИзменении()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ПомещениеПриИзменении()".
Процедура ОбработатьРезультатВопросаПомещениеПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПерезаполнитьДанныеСобственности();
	КонецЕсли;

КонецПроцедуры // ОбработатьРезультатВопросаПомещениеПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПриОткрытии" поля "НесколькоСобственников".
Процедура НесколькоСобственниковПриИзменении(Элемент)
	
	Если НЕ Объект.НесколькоСобственников И Объект.Собственники.Количество() > 1 Тогда
		
		ТекстВопроса       = "Все строки собственники из списка, кроме первого, будут удалены. Продолжить?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаНесколькоСобственниковПриИзменении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	НесколькоСобственниковПриИзмененииПродолжение();
	
КонецПроцедуры // НесколькоСобственниковПриИзменении()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "НесколькоСобственниковПриИзменении()".
Процедура ОбработатьРезультатВопросаНесколькоСобственниковПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Объект.НесколькоСобственников = Истина;
		Возврат;
	КонецЕсли;
	
	Пока Объект.Собственники.Количество() > 1 Цикл
		СтрокаУдаления = Объект.Собственники[1];
		Объект.Собственники.Удалить(Объект.Собственники.Индекс(СтрокаУдаления));
	КонецЦикла;
	
	НесколькоСобственниковПриИзмененииПродолжение();

КонецПроцедуры // ОбработатьРезультатВопросаНесколькоСобственниковПриИзменении()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика "НесколькоСобственниковПриИзменении()".
Процедура НесколькоСобственниковПриИзмененииПродолжение()
	
	Элементы.Собственники.ТекущаяСтрока = Объект.Собственники[0].ПолучитьИдентификатор();
	
	УправлениеФормой(ЭтаФорма);
	
	ОбновитьВидЧастнойСобственности();

КонецПроцедуры // НесколькоСобственниковПриИзмененииПродолжение()

&НаКлиенте
// Процедура-обработчик события "НачалоВыбора" поля "ОснованиеПолученияВСобственность".
Процедура ОснованиеПолученияВСобственностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Собственники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущееОснование = Неопределено;
	Иначе
		ТекущееОснование = ТекущиеДанные.ОснованиеПолученияВСобственность;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Справочник.УПЖКХ_ОснованияПолученияВСобственностьПомещений.ФормаВыбора",
							Новый Структура("ТекущаяСтрока, ВидСобственности", ТекущееОснование, Объект.ВидСобственности), Элемент);
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "ОпределитьДолиСобственности".
Процедура ОпределитьДолиСобственностиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	ОбновитьВидЧастнойСобственности();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПередНачаломИзменения" поля "Собственники".
Процедура СобственникиПередНачаломИзменения(Элемент, Отказ)
	
	ТекИмяКолонки = Элемент.ТекущийЭлемент.Имя;
	
	Если ТекИмяКолонки = "СобственникиДоляСобственности" Тогда
		
		Отказ = Истина;
		
		ТекСтрока = Элементы.Собственники.ТекущиеДанные;
		
		// Вызов формы для редактирования доли собственности.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Заголовок",       "Доля собственности");
		СтруктураПараметров.Вставить("Объект",          ТекСтрока.Собственник);
		СтруктураПараметров.Вставить("ДоляЧислитель",   ТекСтрока.ДоляСобственникаЧислитель);
		СтруктураПараметров.Вставить("ДоляЗнаменатель", ТекСтрока.ДоляСобственникаЗнаменатель);
		
		ОткрытьФорму("ОбщаяФорма.УПЖКХ_УстановкаДоли",
					 СтруктураПараметров,
					 ЭтаФорма,,,,
					 Новый ОписаниеОповещения("ОбработатьВыборДолиСобственности", ЭтаФорма, Новый Структура("ТекСтрока", ТекСтрока)),
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры // СобственникиПередНачаломИзменения()

&НаКлиенте
// Процедура-обработчик выбора доли, вызванного в процедуре-обработчике "СобственникиПередНачаломИзменения()".
Процедура ОбработатьВыборДолиСобственности(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	
	Если НЕ РезультатВыбора = Неопределено И ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		ТекСтрока.ДоляСобственникаЧислитель   = РезультатВыбора.ДоляЧислитель;
		ТекСтрока.ДоляСобственникаЗнаменатель = РезультатВыбора.ДоляЗнаменатель;
		ТекСтрока.ДоляСобственности           = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(
													ТекСтрока.ДоляСобственникаЧислитель, ТекСтрока.ДоляСобственникаЗнаменатель);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборДолиСобственности()

&НаКлиенте
// Процедура-обработчик события "НачалоВыбора" поля "СобственникиОснованиеПолученияВСобственность".
Процедура СобственникиОснованиеПолученияВСобственностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Собственники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущееОснование = Неопределено;
	Иначе
		ТекущееОснование = ТекущиеДанные.ОснованиеПолученияВСобственность;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Справочник.УПЖКХ_ОснованияПолученияВСобственностьПомещений.ФормаВыбора",
							Новый Структура("ТекущаяСтрока, ВидСобственности", ТекущееОснование, Объект.ВидСобственности), Элемент);
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПередУдалением" поля "Собственники".
Процедура СобственникиПередУдалением(Элемент, Отказ)
	
	Если Объект.Собственники.Количество()=1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПриНачалеРедактирования" поля "Собственники".
Процедура СобственникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Собственники.ТекущиеДанные;
	
	Если НоваяСтрока И Не ТекущиеДанные = Неопределено Тогда
		
		ТекущиеДанные.ДоляСобственности = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(
			ТекущиеДанные.ДоляСобственникаЧислитель, ТекущиеДанные.ДоляСобственникаЗнаменатель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "ВидОперации".
Процедура ВидОперацииПриИзменении(Элемент)
	
	ЗаполнитьСписокСоответствующихДокументовТСЖ();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "Нажатие" надписи "СсылкаПроверкаЧленовТСЖ".
Процедура СсылкаПроверкаЧленовТСЖНажатие(Элемент)
	
	ФормаСписка = ПолучитьФорму("ЖурналДокументов.УПЖКХ_ВступлениеИВыходИзТСЖ.ФормаСписка", , ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаСписка.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокДокументовТСЖ,
															ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	ФормаСписка.Открыть();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	ПерезаполнитьДанныеСобственности();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти