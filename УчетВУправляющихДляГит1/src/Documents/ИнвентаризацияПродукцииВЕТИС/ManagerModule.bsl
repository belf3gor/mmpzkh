
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка"
		И Параметры.Свойство("ТекущаяСтрока") Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСпискаДокументов";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбменеВЕТИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИнвентаризацияПродукцииВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиИнвентаризацийПродукцииВЕТИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеРезультатовИнвентаризации Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.КПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала
		Или Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД Тогда
		// Попытка восстановления
	Иначе
		ВызватьИсключение ИнтеграцияВЕТИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИнвентаризацияПродукцииВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийВЕТИС - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиИнвентаризацийПродукцииВЕТИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеРезультатовИнвентаризации Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеЗавершенияОбработкиДанныхВЕТИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ОшибкаПередачи;
		
		Если ДополнительныеПараметры <> Неопределено
			И ДополнительныеПараметры.ЕстьОшибкиСервиса Тогда
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		Иначе
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала
		Или Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД Тогда
		// Попытка восстановления
	Иначе
		ВызватьИсключение ИнтеграцияВЕТИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ВЕТИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИнвентаризацияПродукцииВЕТИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиИнвентаризацийПродукцииВЕТИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияРезультатовИнвентаризации Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.Выполнен;
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ОтклоненВЕТИС;
		
		Если ДополнительныеПараметры.ЕстьОшибкиСервиса Тогда
			СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		Иначе
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД Тогда
		// Подготовка данных к восстановлению
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала Тогда
		
		// Выполнена проверка корректности оформления.
		// Из ВетИС получен пустой ответ на запрос измененных записей складского журнала. 
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
			Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
			Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ИнтеграцияВЕТИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИнвентаризацияПродукцииВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиИнвентаризацийПродукцииВЕТИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИнвентаризацияПродукцииВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиИнвентаризацийПродукцииВЕТИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления,
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ВЕТИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИнвентаризацияПродукцииВЕТИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиИнвентаризацийПродукцииВЕТИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, 
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции


// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияВЕТИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица   = ИнтеграцияВЕТИС.ПустаяТаблицаПоследовательностьОпераций();
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	Входящий  = Перечисления.ТипыЗапросовИС.Входящий;
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, 0,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеРезультатовИнвентаризации);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, 0,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияРезультатовИнвентаризации);
	
	// Запросы восстановления
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД);
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала);
	
	// Повторный запрос после проверки корректности оформления
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеРезультатовИнвентаризации);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияРезультатовИнвентаризации);
	
	Возврат Таблица;
	
КонецФункции


// Опеределить необходимость перезаписи движений.
//
// Параметры:
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиИнвентаризацийПродукцииВЕТИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиИнвентаризацийПродукцииВЕТИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перезаписи движений.
//
Функция ОбновлятьДвижения(ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Опеределить необходимость перерасчета статуса оформления документов и выполнить перерасчет статуса.
//
// Параметры:
//  ДокументСсылка   - ДокументСсылка.ИнвентаризацияПродукцииВЕТИС - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиИнвентаризацийТоваровВЕТИС - Предыдущий статус.
//  НовыйСтатус      - ПеречислениеСсылка.СтатусыОбработкиИнвентаризацийТоваровВЕТИС - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Процедура РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Если КонечныеСтатусы().Найти(НовыйСтатус) <> Неопределено Тогда
		РасчетСтатусовОформленияВЕТИС.РассчитатьСтатусОформленияДокументаВЕТИС(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИнвентаризацияПродукцииВЕТИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиИнвентаризацийПродукцииВЕТИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиИнвентаризацийПродукцииВЕТИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
	ОбновитьДвижения = ИнтеграцияВЕТИС.СтатусТребуетОбновленияДвижений(СтатусыДвиженийРезерв(), ПредыдущийСтатус, НовыйСтатус);
	
	Если ПараметрыОбновленияСтатуса.ОбновлятьДвижения
		И ОбновитьДвижения Тогда
		
		ИмяРегистра = "ЗаписиСкладскогоЖурналаВРезервеВЕТИС";
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		
		ДополнительныеСвойстваДляПроведения = Новый Структура;
		ИнтеграцияИС.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойстваДляПроведения);
		
		ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойстваДляПроведения, ИмяРегистра);
		НаборЗаписей.Загрузить(ДополнительныеСвойстваДляПроведения.ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	ИнтеграцияВЕТИСПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
КонецПроцедуры

Функция ОперацииДопустимыхДействий() Экспорт
	
	СоответствиеОпераций = Новый Соответствие;
	СоответствиеОпераций.Вставить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеРезультатовИнвентаризации);
		
	Возврат СоответствиеОпераций
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ОтклоненВЕТИС);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы() Экспорт
	
	Статусы = Новый Массив;
	
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменСВЕТИС

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ЗаполнитеАктНесоответствия);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
	
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхВЕТИС") Тогда
		МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВыполнитеОбмен);
	КонецЕсли;
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеЗавершенияОбработкиДанныхВЕТИС);
	
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхВЕТИС") Тогда
		МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область СообщенияВЕТИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПараметрыПередачи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные Тогда
		
		Возврат ЗапросНаОформлениеРезультатовИнвентаризацииXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры);
		
	ИначеЕсли ПараметрыПередачи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных Тогда
		
		Возврат ИнтеграцияВЕТИС.ЗапросДляПроверкиКорректностиОформленияXML(ДокументСсылка);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий.
//
// Возвращаемое значение:
//	Строка - Имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ТипДокумента = ТипДокумента();
	ИменаРеквизитов = ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ТипДокумента);
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//	Объект - Структура - Значения реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  (см. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - параметры указания серий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ТипДокумента = ТипДокумента();
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерий(ТипДокумента, Объект);
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//   ПараметрыУказанияСерий - (см. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - параметры указания серий
//
// Возвращаемое значение:
//   Строка - Текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТипДокумента = ТипДокумента();
	ТекстЗапроса = ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ТипДокумента, ПараметрыУказанияСерий);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СообщенияВЕТИС

// Операция предназначена для устранения возможных несоответствий сведений об объёмах в складском журнале продукции 
//  и фактических объёмов продукции на складе предприятия, выявленных по результатам проведенной инвентаризации. 
//
// В ходе проведения инвентаризации доступны следующие действия:
//	- добавление одной, либо нескольких записей в складской журнал продукции (пересортица при инвентаризации);
//	- изменение объемов существующей записи журнала;
//	- списание всех остатков по записи журнала (удаление).
//
// На вход системы при этом передаются следующие сведения:
//	- данные хозяйствующего субъекта и его предприятия, где проводится инвентаризация;
//	- для объёмов продукции, которые не были ранее отражены в журнале, передается полностью информация о записи журнала;
//	- для каждой изменяемой записи журнала должен быть указан её идентификатор в журнале продукции ИС «Меркурий», а также фактические сведения для этой записи;
//	- при наличии "Акта о пересортице", оформляемого в ИС предприятия, должны быть переданы реквизиты данного документа, 
//    в случае отсутствия документа, он будет создан в ИС «Меркурий», а реквизиты будут назначены автоматически.
//
//Результатом выполнения данной операции является:
//	- добавленные или измененные записи складского журнала продукции.
//	- акт о пересортице.
//
Функция ЗапросНаОформлениеРезультатовИнвентаризацииXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры)
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеРезультатовИнвентаризации;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1);
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	
	ДанныеДокумента = ДанныеИнвентаризации(ДокументСсылка, Операция);
	Шапка = ДанныеДокумента.Шапка[0];
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	
	Если ДанныеДокумента.Шапка.Количество() = 0
		ИЛИ ДанныеДокумента.Товары.Количество() = 0 Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНетДанныхДляВыгрузки(СообщенияXML, СообщениеXML);
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("НастройкаОбмена") Тогда
		НастройкаОбмена = ДополнительныеПараметры.НастройкаОбмена;
	Иначе
		НастройкиОбменаВЕТИС = ИнтеграцияВЕТИС.НастройкиОбменаВЕТИС(Шапка.ХозяйствующийСубъект);
		НастройкаОбмена = НастройкиОбменаВЕТИС.ОбменНаСервере.Получить(Шапка.ХозяйствующийСубъект);
	КонецЕсли;
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключения(
			СообщенияXML, СообщениеXML,
			Шапка.ХозяйствующийСубъект,
			НастройкиОбменаВЕТИС);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, ДокументСсылка, , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	ВспомогательныеДанные = Новый Структура;
	ВспомогательныеДанные.Вставить("СтраныМира",             ПрочиеКлассификаторыВЕТИСВызовСервера.СтраныМира());
	ВспомогательныеДанные.Вставить("Производители",          ДанныеДокумента.Производители);
	ВспомогательныеДанные.Вставить("ПроизводственныеПартии", ДанныеДокумента.ПроизводственныеПартии);
	ВспомогательныеДанные.Вставить("Упаковки",               ДанныеДокумента.Упаковки);
	ВспомогательныеДанные.Вставить("ХранилищеВременныхДат",  Новый Соответствие);
	
	#Область ФормированиеСообщения
	ДокументXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "localTransactionId", Шапка.Идентификатор, СообщениеXML);
	
	// Пользователь, зарегистрированный в системе Меркурий, инициирующий запрос к шлюзу.
	ПользовательВЕТИС = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ПользовательВЕТИС, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	// Площадка на которой осуществляется инвентаризация.
	Предприятие = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "enterprise");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Предприятие, "guid", Шапка.Предприятие_Идентификатор, СообщениеXML);
	
	// Дата проведения инвентаризации.
	ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(
		ДокументXDTO,
		"inventoryDate",
		Шапка.Дата,
		ВспомогательныеДанные.ХранилищеВременныхДат);
	
	// Ответственный за инвентаризацию.
	Ответственный = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "responsible");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Ответственный, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	// Сведения о результате инвентаризации (по одному факту расхождения).
	#Область stockDiscrepancy
	
	// Сведения о результате инвентаризации (по одному факту расхождения).
	РезультатИнвентаризации = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "stockDiscrepancy");
	
	// Список записей журнала.
	Записи = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(РезультатИнвентаризации, "resultingList");
	
	// Одна или несколько записей складского журнала продукции, полученная, либо измененная в результате инвентаризации.
	Для каждого ДанныеСтроки Из ДанныеДокумента.Товары Цикл
		
		ЗаписьСкладскогоЖурнала = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Записи, "stockEntry");
		
		// Идентификатор версии записи складского журнала продукции.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЗаписьСкладскогоЖурнала, "uuid", ДанныеСтроки.ЗаписьСкладскогоЖурнала_ИдентификаторВерсии, СообщениеXML);
		
		// Сведения о партии продукции.
		СведенияОПартииПродукции = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ЗаписьСкладскогоЖурнала, "batch");
		
		ДопДанные = Новый Структура;
		ДопДанные.Вставить("СтраныМира", ВспомогательныеДанные.СтраныМира);
		
		СтруктураПоиска = Новый Структура("ИдентификаторСтрокиТовары", ДанныеСтроки.ИдентификаторСтроки);
		ПроизводителиНайденныеСтроки = ВспомогательныеДанные.Производители.НайтиСтроки(СтруктураПоиска);
		ДопДанные.Вставить("Производители", ПроизводителиНайденныеСтроки);
		
		СтруктураПоиска = Новый Структура("ИдентификаторСтрокиТовары", ДанныеСтроки.ИдентификаторСтроки);
		ПроизводственныеПартииНайденныеСтроки = ВспомогательныеДанные.ПроизводственныеПартии.НайтиСтроки(СтруктураПоиска);
		ДопДанные.Вставить("ПроизводственныеПартии", ПроизводственныеПартииНайденныеСтроки);
		
		СтруктураПоиска = Новый Структура("ИдентификаторСтрокиТовары", ДанныеСтроки.ИдентификаторСтроки);
		УпаковкиНайденныеСтроки = ВспомогательныеДанные.Упаковки.НайтиСтроки(СтруктураПоиска);
		ДопДанные.Вставить("Упаковки",          УпаковкиНайденныеСтроки);
		ДопДанные.Вставить("ШтрихкодыУпаковок", ДанныеДокумента.ШтрихкодыУпаковок);
		
		ОбменДаннымиВЕТИС.ЗаполнитьОбъект_Batch(ДанныеСтроки, "КоличествоВЕТИС", ДопДанные, СведенияОПартииПродукции, СообщениеXML);
		
		Записи.stockEntry.Добавить(ЗаписьСкладскогоЖурнала);
		
		// Заполнение сведений о записи журнала.
		ОбменДаннымиВЕТИС.ДобавитьЗаписьСкладскогоЖурналаВСообщениеXML(ДанныеСтроки, СообщениеXML);
		
	КонецЦикла;
	
	ДокументXDTO.stockDiscrepancy.Добавить(РезультатИнвентаризации);
	
	#КонецОбласти
	
	// Сведения об акте несоответствия.
	#Область discrepancyReport
	
	Если ЗначениеЗаполнено(Шапка.СерияАктаНесоответствия)
		ИЛИ ЗначениеЗаполнено(Шапка.НомерАктаНесоответствия) Тогда
		
		АктОНесоответствии = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "discrepancyReport");
		
		// Серия акта несоответствия.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(АктОНесоответствии, "issueSeries", Шапка.СерияАктаНесоответствия, СообщениеXML);
		
		// Номер акта несоответствия.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(АктОНесоответствии, "issueNumber", Шапка.НомерАктаНесоответствия, СообщениеXML);
		
		// Дата акта несоответствия.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(АктОНесоответствии, "issueDate", Шапка.ДатаАктаНесоответствия, СообщениеXML);
		
		// Причина составления акта несоответствия.
		ПричинаНесоответствия = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктОНесоответствии, "reason");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ПричинаНесоответствия, "name", Шапка.ПричинаНесоответствия, СообщениеXML);

		ДокументXDTO.discrepancyReport.Добавить(АктОНесоответствии);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#КонецОбласти
	
	ТекстСообщенияXML = ЗаявкиВЕТИС.ЗаявкаXML(ДокументXDTO, НастройкаОбмена, ВспомогательныеДанные.ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ВспомогательныеДанные.ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML       = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения            = ПараметрыЗапросаВЕТИС.ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект    = Шапка.ХозяйствующийСубъект;
	СообщениеXML.Предприятие             = Шапка.Предприятие;
	СообщениеXML.Операция                = Операция;
	СообщениеXML.Документ                = ДокументСсылка;
	СообщениеXML.ДокументОснование       = Неопределено;
	СообщениеXML.ФорматОбмена            = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	СообщениеXML.Версия                  = НомерВерсии;
	СообщениеXML.ИдентификаторТранзакции = Шапка.Идентификатор;
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ДанныеИнвентаризации(ДокументСсылка, Операция)

	СписокЗапросов = Новый СписокЗначений;
	
	#Область Версии
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВЕТИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ВЕТИСПрисоединенныеФайлы
	|ГДЕ
	|	ВЕТИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ВЕТИСПрисоединенныеФайлы.Операция = &Операция
	|	И ВЕТИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Версии");
	
	#КонецОбласти
	
	#Область Шапка
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Шапка.Номер                         КАК Номер,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.Идентификатор                 КАК Идентификатор,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)  КАК ПоследнийНомерВерсии,
	|	
	|	&Операция                           КАК Операция,
	|	
	|	Шапка.ХозяйствующийСубъект                    КАК ХозяйствующийСубъект,
	|	Шапка.ХозяйствующийСубъект.Идентификатор      КАК ХозяйствующийСубъект_Идентификатор,
	|	Шапка.ХозяйствующийСубъект.НаименованиеПолное КАК ХозяйствующийСубъектНаименование,
	|	
	|	Шапка.Предприятие               КАК Предприятие,
	|	Шапка.Предприятие.Идентификатор КАК Предприятие_Идентификатор,
	|	Шапка.Предприятие.Наименование  КАК ПредприятиеНаименование,
	|	
	|	Шапка.Ответственный             КАК Ответственный,
	|
	|	Шапка.СерияАктаНесоответствия   КАК СерияАктаНесоответствия,
	|	Шапка.НомерАктаНесоответствия   КАК НомерАктаНесоответствия,
	|	Шапка.ДатаАктаНесоответствия    КАК ДатаАктаНесоответствия,
	|	Шапка.ПричинаНесоответствия     КАК ПричинаНесоответствия,
	
	|	Шапка.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ИнвентаризацияПродукцииВЕТИС КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО (Истина)
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Шапка");
	
	#КонецОбласти
	
	#Область Товары
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки         КАК НомерСтроки,
	|	Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	
	|	Товары.ЗаписьСкладскогоЖурнала                     КАК ЗаписьСкладскогоЖурнала,
	|	Товары.ЗаписьСкладскогоЖурнала.ИдентификаторВерсии КАК ЗаписьСкладскогоЖурнала_ИдентификаторВерсии,
	|	
	|	Товары.Продукция.ТипПродукции               КАК ТипПродукции,
	|	Товары.Продукция.Продукция.Идентификатор    КАК ПродукцияПродукция_Идентификатор,
	|	Товары.Продукция.Продукция.Наименование     КАК ПродукцияПродукция_Наименование,
	|	
	|	Товары.Продукция.ВидПродукции               КАК ВидПродукции,
	|	Товары.Продукция.ВидПродукции.Идентификатор КАК ВидПродукции_Идентификатор,
	|	Товары.Продукция.ВидПродукции.Наименование  КАК ВидПродукции_Наименование,
	|	
	|	Товары.Продукция                            КАК Продукция,
	|	Товары.Продукция.Идентификатор              КАК Продукция_Идентификатор,
	|	Товары.Продукция.Наименование               КАК Продукция_Наименование,
	|	
	|	// Для работы с произвольной продукцией
	|	Товары.Продукция.GTIN                                  КАК Продукция_GTIN,
	|	Товары.Продукция.Артикул                               КАК Продукция_Артикул,
	|	
	|	Товары.Продукция.ФасовкаУпаковка                       КАК Продукция_ФасовкаУпаковка,
	|	Товары.Продукция.ФасовкаУпаковка.Идентификатор         КАК Продукция_ФасовкаУпаковка_Идентификатор,
	|	Товары.Продукция.ФасовкаУпаковка.Наименование          КАК Продукция_ФасовкаУпаковка_Наименование,
	|	
	|	Товары.Продукция.ФасовкаЕдиницаИзмерения               КАК Продукция_ФасовкаЕдиницаИзмерения,
	|	Товары.Продукция.ФасовкаЕдиницаИзмерения.Идентификатор КАК Продукция_ФасовкаЕдиницаИзмерения_Идентификатор,
	|	Товары.Продукция.ФасовкаЕдиницаИзмерения.Наименование  КАК Продукция_ФасовкаЕдиницаИзмерения_Наименование,
	|	
	|	Товары.Продукция.ФасовкаКоличествоУпаковок             КАК Продукция_ФасовкаКоличествоУпаковок,
	|	Товары.Продукция.ФасовкаКоличествоЕдиницВУпаковке      КАК Продукция_ФасовкаКоличествоЕдиницВУпаковке,
	|	
	|	ВЫБОР
	|		КОГДА Товары.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление)
	|			ТОГДА Товары.КоличествоИзменениеВЕТИС
	|		КОГДА Товары.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(Товары.ЗаписьСкладскогоЖурнала.ЕдиницаИзмеренияВЕТИС.Коэффициент, 0) <> ЕСТЬNULL(Товары.ЕдиницаИзмеренияВЕТИС.Коэффициент, 0)
	|						И ЕСТЬNULL(Товары.ЕдиницаИзмеренияВЕТИС.Коэффициент, 0) <> 0
	|					ТОГДА ЕСТЬNULL(Товары.ЗаписьСкладскогоЖурнала.КоличествоВЕТИС, 0) 
	|							* ЕСТЬNULL(Товары.ЗаписьСкладскогоЖурнала.ЕдиницаИзмеренияВЕТИС.Коэффициент, 0) 
	|							/ ЕСТЬNULL(Товары.ЕдиницаИзмеренияВЕТИС.Коэффициент, 0)
	|				ИНАЧЕ ЕСТЬNULL(Товары.ЗаписьСкладскогоЖурнала.КоличествоВЕТИС, 0)
	|			КОНЕЦ + Товары.КоличествоИзменениеВЕТИС
	|	КОНЕЦ КАК КоличествоВЕТИС,
	|	
	|	Товары.ЕдиницаИзмеренияВЕТИС               КАК ЕдиницаИзмеренияВЕТИС,
	|	Товары.ЕдиницаИзмеренияВЕТИС.Идентификатор КАК ЕдиницаИзмеренияВЕТИС_Идентификатор,
	|	Товары.ЕдиницаИзмеренияВЕТИС.Наименование  КАК ЕдиницаИзмеренияВЕТИСНаименование,
	|	
	|	Товары.СкоропортящаясяПродукция            КАК СкоропортящаясяПродукция,
	|	Товары.НизкокачественнаяПродукция          КАК НизкокачественнаяПродукция,
	|	
	|	Товары.СтранаПроизводства                  КАК СтранаПроизводства,
	|	Товары.ДатаПроизводстваСтрока              КАК ДатаПроизводстваСтрока,
	|	Товары.ДатаПроизводстваТочностьЗаполнения  КАК ДатаПроизводстваТочностьЗаполнения,
	|	Товары.ДатаПроизводстваНачалоПериода       КАК ДатаПроизводстваНачалоПериода,
	|	Товары.ДатаПроизводстваКонецПериода        КАК ДатаПроизводстваКонецПериода,
	|	
	|	Товары.СрокГодностиСтрока                  КАК СрокГодностиСтрока,
	|	Товары.СрокГодностиТочностьЗаполнения      КАК СрокГодностиТочностьЗаполнения,
	|	Товары.СрокГодностиНачалоПериода           КАК СрокГодностиНачалоПериода,
	|	Товары.СрокГодностиКонецПериода            КАК СрокГодностиКонецПериода
	|	
	|ИЗ
	|	Документ.ИнвентаризацияПродукцииВЕТИС.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Товары");
	
	#КонецОбласти
	
	#Область Производители
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Производители.ИдентификаторСтрокиТовары   КАК ИдентификаторСтрокиТовары,
	|	Производители.Производитель               КАК Производитель,
	|	Производители.Производитель.Идентификатор КАК Производитель_Идентификатор,
	|	Производители.Производитель.Наименование  КАК ПроизводительНаименование,
	|	Производители.РольПредприятия             КАК РольПредприятия
	|ИЗ
	|	Документ.ИнвентаризацияПродукцииВЕТИС.Производители КАК Производители
	|ГДЕ
	|	Производители.Ссылка = &Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Производители");
	
	#КонецОбласти
	
	#Область ПроизводственныеПартии
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПроизводственныеПартии.ИдентификаторСтрокиТовары КАК ИдентификаторСтрокиТовары,
	|	ПроизводственныеПартии.ИдентификаторПартии       КАК ИдентификаторПартии
	|ИЗ
	|	Документ.ИнвентаризацияПродукцииВЕТИС.ПроизводственныеПартии КАК ПроизводственныеПартии
	|ГДЕ
	|	ПроизводственныеПартии.Ссылка = &Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ПроизводственныеПартии");
	
	#КонецОбласти
	
	#Область Упаковки
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	УпаковкиВЕТИС.ИдентификаторСтрокиТовары   КАК ИдентификаторСтрокиТовары,
	|	УпаковкиВЕТИС.ИдентификаторСтроки         КАК ИдентификаторСтроки,
	|	УпаковкиВЕТИС.УровеньУпаковки             КАК УровеньУпаковки,
	|	УпаковкиВЕТИС.УпаковкаВЕТИС               КАК УпаковкаВЕТИС,
	|	УпаковкиВЕТИС.КоличествоУпаковокВЕТИС     КАК КоличествоУпаковокВЕТИС,
	|	УпаковкиВЕТИС.УпаковкаВЕТИС.КодЕЭК        КАК УпаковкаВЕТИС_КодЕЭК
	|ИЗ
	|	Документ.ИнвентаризацияПродукцииВЕТИС.УпаковкиВЕТИС КАК УпаковкиВЕТИС
	|ГДЕ
	|	УпаковкиВЕТИС.Ссылка = &Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Упаковки");
	
	#КонецОбласти
	
	#Область ШтрихкодыУпаковок
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ИдентификаторСтроки КАК ИдентификаторСтрокиУпаковки,
	|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод,
	|	ШтрихкодыУпаковок.ТипМаркировки КАК ТипМаркировки
	|ИЗ
	|	Документ.ИнвентаризацияПродукцииВЕТИС.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ШтрихкодыУпаковок");
	
	#КонецОбласти
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Результат = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Истина);
	
	Возврат Результат;
	
КонецФункции
 
#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	ИнтеграцияВЕТИСПереопределяемый.ДобавитьКомандуАнализРасхожденийПриИнвентаризацииПродукцииВЕТИС(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт о несоответствии
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ЗаполнениеАктаОНесоответствииВЕТИС";
	КомандаПечати.Идентификатор = "АктОНесоответствииВЕТИС";
	КомандаПечати.Представление = НСтр("ru='Акт о несоответствии ВетИС'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати,"НомерАктаНесоответствия","",ВидСравнения.НеРавно);
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Возврат;
КонецПроцедуры

// Функция - Получить данные для печатной формы акта о несоответствии
//
// Параметры:
//  ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//  МассивОбъектов  - ДокументСсылка.ИнвентаризацияПродукцииВЕТИС, Массив - ссылка или массив ссылок на объекты которые нужно распечатать.
// 
// Возвращаемое значение:
//   - Структура - результат пакетного запроса, номера таблиц с данными для печати, вариант вывода расхождений
//
Функция ПолучитьДанныеДляПечатнойФормыАктаОНесоответствии(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ИнвентаризацияПродукцииВЕТИСТовары.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)
	|		КОГДА ИнвентаризацияПродукцииВЕТИСТовары.ЗаписьСкладскогоЖурналаАрхив = ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)
	|			ТОГДА ИнвентаризацияПродукцииВЕТИСТовары.ЗаписьСкладскогоЖурнала
	|		ИНАЧЕ ИнвентаризацияПродукцииВЕТИСТовары.ЗаписьСкладскогоЖурналаАрхив
	|	КОНЕЦ                                                  КАК ЗаписьСкладскогоЖурнала,
	|	ИнвентаризацияПродукцииВЕТИСТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ИнвентаризацияПродукцииВЕТИСТовары.Ссылка              КАК Ссылка
	|ПОМЕСТИТЬ ИсходныеЗаписи
	|ИЗ
	|	Документ.ИнвентаризацияПродукцииВЕТИС.Товары КАК ИнвентаризацияПродукцииВЕТИСТовары
	|ГДЕ
	|	ИнвентаризацияПродукцииВЕТИСТовары.Ссылка В(&Ссылка)
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ИдентификаторСтроки,
	|	ЗаписьСкладскогоЖурнала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияПродукцииВЕТИС.Ссылка                       КАК Ссылка,
	|	ИнвентаризацияПродукцииВЕТИС.СерияАктаНесоответствия      КАК СерияАктаНесоответствия,
	|	ИнвентаризацияПродукцииВЕТИС.НомерАктаНесоответствия      КАК НомерАктаНесоответствия,
	|	ИнвентаризацияПродукцииВЕТИС.ДатаАктаНесоответствия       КАК ДатаАктаНесоответствия,
	|	ИнвентаризацияПродукцииВЕТИС.ПричинаНесоответствия        КАК ПричинаНесоответствия,
	|	ПРЕДСТАВЛЕНИЕ(ИнвентаризацияПродукцииВЕТИС.Предприятие)   КАК Предприятие,
	|	ПРЕДСТАВЛЕНИЕ(ИнвентаризацияПродукцииВЕТИС.Ответственный) КАК Ответственный
	|ИЗ
	|	Документ.ИнвентаризацияПродукцииВЕТИС КАК ИнвентаризацияПродукцииВЕТИС
	|ГДЕ
	|	ИнвентаризацияПродукцииВЕТИС.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеЗаписи.Ссылка                                                       КАК Ссылка,
	|	ИсходныеЗаписи.ИдентификаторСтроки                                          КАК ИдентификаторСтроки,
	|	ВЫБОР КОГДА ИнвентаризацияПродукцииВЕТИСТовары.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление)
	|		ТОГДА -ИнвентаризацияПродукцииВЕТИСТовары.КоличествоИзменениеВЕТИС
	|	ИНАЧЕ
	|		ЕСТЬNULL(ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.КоличествоВЕТИС, 0) 
	|	КОНЕЦ                                                                       КАК КоличествоПлан,
	|	ИнвентаризацияПродукцииВЕТИСТовары.КоличествоИзменениеВЕТИС                 КАК КоличествоФакт,
	|	ПРЕДСТАВЛЕНИЕ(ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.Продукция)             КАК ПродукцияПланПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ИнвентаризацияПродукцииВЕТИСТовары.Продукция)                 КАК ПродукцияФактПредставление,
	|	ИнвентаризацияПродукцииВЕТИСТовары.ЕдиницаИзмеренияВЕТИС                    КАК ЕдиницаИзмеренияФакт,
	|	ПРЕДСТАВЛЕНИЕ(ИнвентаризацияПродукцииВЕТИСТовары.ЕдиницаИзмеренияВЕТИС)     КАК ЕдиницаИзмеренияФактПредставление,
	|	ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.ЕдиницаИзмеренияВЕТИС                КАК ЕдиницаИзмеренияПлан,
	|	ПРЕДСТАВЛЕНИЕ(ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.ЕдиницаИзмеренияВЕТИС) КАК ЕдиницаИзмеренияПланПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ИсходныеЗаписи.Ссылка.ХозяйствующийСубъект)                   КАК ВладелецГруза,
	|	ИсходныеЗаписи.Ссылка.ХозяйствующийСубъект.ИНН                              КАК ВладелецГрузаИНН,
	|	ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.Продукция                            КАК ПродукцияПлан,
	|	ИнвентаризацияПродукцииВЕТИСТовары.Продукция                                КАК ПродукцияФакт,
	|	ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.СрокГодностиСтрока                   КАК СрокГодностиСтрокаПлан,
	|	ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.СрокГодностиТочностьЗаполнения       КАК СрокГодностиТочностьЗаполненияПлан,
	|	ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.СрокГодностиНачалоПериода            КАК СрокГодностиНачалоПериодаПлан,
	|	ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.СрокГодностиКонецПериода             КАК СрокГодностиКонецПериодаПлан,
	|	ИнвентаризацияПродукцииВЕТИСТовары.СрокГодностиСтрока                       КАК СрокГодностиСтрокаФакт,
	|	ИнвентаризацияПродукцииВЕТИСТовары.СрокГодностиТочностьЗаполнения           КАК СрокГодностиТочностьЗаполненияФакт,
	|	ИнвентаризацияПродукцииВЕТИСТовары.СрокГодностиНачалоПериода                КАК СрокГодностиНачалоПериодаФакт,
	|	ИнвентаризацияПродукцииВЕТИСТовары.СрокГодностиКонецПериода                 КАК СрокГодностиКонецПериодаФакт,
	|	ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.ДатаПроизводстваСтрока               КАК ДатаПроизводстваСтрокаПлан,
	|	ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.ДатаПроизводстваТочностьЗаполнения   КАК ДатаПроизводстваТочностьЗаполненияПлан,
	|	ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.ДатаПроизводстваНачалоПериода        КАК ДатаПроизводстваНачалоПериодаПлан,
	|	ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.ДатаПроизводстваКонецПериода         КАК ДатаПроизводстваКонецПериодаПлан,
	|	ИнвентаризацияПродукцииВЕТИСТовары.ДатаПроизводстваСтрока                   КАК ДатаПроизводстваСтрокаФакт,
	|	ИнвентаризацияПродукцииВЕТИСТовары.ДатаПроизводстваТочностьЗаполнения       КАК ДатаПроизводстваТочностьЗаполненияФакт,
	|	ИнвентаризацияПродукцииВЕТИСТовары.ДатаПроизводстваНачалоПериода            КАК ДатаПроизводстваНачалоПериодаФакт,
	|	ИнвентаризацияПродукцииВЕТИСТовары.ДатаПроизводстваКонецПериода             КАК ДатаПроизводстваКонецПериодаФакт,
	|	ИнвентаризацияПродукцииВЕТИСТовары.СтранаПроизводства                       КАК СтранаПроизводстваФакт,
	|	ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.СтранаПроизводства                   КАК СтранаПроизводстваПлан,
	|	ПРЕДСТАВЛЕНИЕ(ИнвентаризацияПродукцииВЕТИСТовары.СтранаПроизводства)        КАК СтранаПроизводстваФактПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.СтранаПроизводства)    КАК СтранаПроизводстваПланПредставление,
	|	ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.СкоропортящаясяПродукция             КАК СкоропортящаясяПродукцияПлан,
	|	ИсходныеЗаписи.ЗаписьСкладскогоЖурнала.НизкокачественнаяПродукция           КАК НизкокачественнаяПродукцияПлан,
	|	ИнвентаризацияПродукцииВЕТИСТовары.СкоропортящаясяПродукция                 КАК СкоропортящаясяПродукцияФакт,
	|	ИнвентаризацияПродукцииВЕТИСТовары.НизкокачественнаяПродукция               КАК НизкокачественнаяПродукцияФакт
	|ИЗ
	|	ИсходныеЗаписи КАК ИсходныеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияПродукцииВЕТИС.Товары КАК ИнвентаризацияПродукцииВЕТИСТовары
	|		ПО ИсходныеЗаписи.Ссылка = ИнвентаризацияПродукцииВЕТИСТовары.Ссылка
	|			И ИсходныеЗаписи.ИдентификаторСтроки = ИнвентаризацияПродукцииВЕТИСТовары.ИдентификаторСтроки
	|ГДЕ
	|	ИнвентаризацияПродукцииВЕТИСТовары.Ссылка В(&Ссылка)
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеЗаписи.Ссылка                                                    КАК Ссылка,
	|	ИсходныеЗаписи.ИдентификаторСтроки                                       КАК ИдентификаторСтроки,
	|	ИнвентаризацияПродукцииВЕТИСУпаковкиВЕТИС.УровеньУпаковки                КАК УровеньУпаковки,
	|	ИнвентаризацияПродукцииВЕТИСУпаковкиВЕТИС.УпаковкаВЕТИС                  КАК УпаковкаВЕТИС,
	|	ПРЕДСТАВЛЕНИЕ(ИнвентаризацияПродукцииВЕТИСУпаковкиВЕТИС.УровеньУпаковки) КАК УровеньУпаковкиПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ИнвентаризацияПродукцииВЕТИСУпаковкиВЕТИС.УпаковкаВЕТИС)   КАК УпаковкаВЕТИСПредставление,
	|	ИнвентаризацияПродукцииВЕТИСУпаковкиВЕТИС.КоличествоУпаковокВЕТИС        КАК КоличествоУпаковокВЕТИС,
	|	ИСТИНА КАК Факт
	|ИЗ
	|	ИсходныеЗаписи КАК ИсходныеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияПродукцииВЕТИС.УпаковкиВЕТИС КАК ИнвентаризацияПродукцииВЕТИСУпаковкиВЕТИС
	|		ПО ИсходныеЗаписи.ИдентификаторСтроки = ИнвентаризацияПродукцииВЕТИСУпаковкиВЕТИС.ИдентификаторСтрокиТовары
	|			И ИсходныеЗаписи.Ссылка = ИнвентаризацияПродукцииВЕТИСУпаковкиВЕТИС.Ссылка
	|ГДЕ
	|	ИнвентаризацияПродукцииВЕТИСУпаковкиВЕТИС.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсходныеЗаписи.Ссылка,
	|	ИсходныеЗаписи.ИдентификаторСтроки,
	|	ЕСТЬNULL(ЗаписиСкладскогоЖурналаВЕТИСУпаковкиВЕТИС.УровеньУпаковки, """"),
	|	ЕСТЬNULL(ЗаписиСкладскогоЖурналаВЕТИСУпаковкиВЕТИС.УпаковкаВЕТИС, ЗНАЧЕНИЕ(Справочник.УпаковкиВЕТИС.ПустаяСсылка)),
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ЗаписиСкладскогоЖурналаВЕТИСУпаковкиВЕТИС.УровеньУпаковки, """")),
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ЗаписиСкладскогоЖурналаВЕТИСУпаковкиВЕТИС.УпаковкаВЕТИС, """")),
	|	ЕСТЬNULL(ЗаписиСкладскогоЖурналаВЕТИСУпаковкиВЕТИС.КоличествоУпаковокВЕТИС, 0),
	|	ЛОЖЬ
	|ИЗ
	|	ИсходныеЗаписи КАК ИсходныеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС.УпаковкиВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИСУпаковкиВЕТИС
	|		ПО ИсходныеЗаписи.ЗаписьСкладскогоЖурнала = ЗаписиСкладскогоЖурналаВЕТИСУпаковкиВЕТИС.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ИдентификаторСтроки,
	|	УровеньУпаковки,
	|	УпаковкаВЕТИС,
	|	КоличествоУпаковокВЕТИС,
	|	Факт
	|ИТОГИ ПО
	|	Ссылка,
	|	ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеЗаписи.Ссылка                                                  КАК Ссылка,
	|	ИсходныеЗаписи.ИдентификаторСтроки                                     КАК ИдентификаторСтроки,
	|	ЗаписиСкладскогоЖурналаВЕТИСПроизводственныеПартии.ИдентификаторПартии КАК ИдентификаторПартии,
	|	ЛОЖЬ                                                                   КАК Факт
	|ИЗ
	|	ИсходныеЗаписи КАК ИсходныеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПроизводственныеПартии КАК ЗаписиСкладскогоЖурналаВЕТИСПроизводственныеПартии
	|		ПО ИсходныеЗаписи.ЗаписьСкладскогоЖурнала = ЗаписиСкладскогоЖурналаВЕТИСПроизводственныеПартии.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсходныеЗаписи.Ссылка,
	|	ИсходныеЗаписи.ИдентификаторСтроки,
	|	ЕСТЬNULL(ИнвентаризацияПродукцииВЕТИСПроизводственныеПартии.ИдентификаторПартии, """"),
	|	ИСТИНА
	|ИЗ
	|	ИсходныеЗаписи КАК ИсходныеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияПродукцииВЕТИС.ПроизводственныеПартии КАК ИнвентаризацияПродукцииВЕТИСПроизводственныеПартии
	|		ПО ИсходныеЗаписи.Ссылка = ИнвентаризацияПродукцииВЕТИСПроизводственныеПартии.Ссылка
	|			И ИсходныеЗаписи.ИдентификаторСтроки = ИнвентаризацияПродукцииВЕТИСПроизводственныеПартии.ИдентификаторСтрокиТовары
	|ГДЕ
	|	ИнвентаризацияПродукцииВЕТИСПроизводственныеПартии.Ссылка В(&Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ИдентификаторСтроки,
	|	ИдентификаторПартии,
	|	Факт
	|ИТОГИ ПО
	|	Ссылка,
	|	ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеЗаписи.Ссылка                                                  КАК Ссылка,
	|	ИсходныеЗаписи.ИдентификаторСтроки                                     КАК ИдентификаторСтроки,
	|	ЗаписиСкладскогоЖурналаВЕТИСПроизводители.Производитель                КАК Производитель,
	|	ПРЕДСТАВЛЕНИЕ(ЗаписиСкладскогоЖурналаВЕТИСПроизводители.Производитель) КАК ПроизводительПредставление,
	|	ЛОЖЬ                                                                   КАК Факт
	|ИЗ
	|	ИсходныеЗаписи КАК ИсходныеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС.Производители КАК ЗаписиСкладскогоЖурналаВЕТИСПроизводители
	|		ПО ИсходныеЗаписи.ЗаписьСкладскогоЖурнала = ЗаписиСкладскогоЖурналаВЕТИСПроизводители.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсходныеЗаписи.Ссылка,
	|	ИсходныеЗаписи.ИдентификаторСтроки,
	|	ЕСТЬNULL(ИнвентаризацияПродукцииВЕТИСПроизводители.Производитель, ЗНАЧЕНИЕ(Справочник.ПредприятияВЕТИС.ПустаяСсылка)),
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ИнвентаризацияПродукцииВЕТИСПроизводители.Производитель, """")),
	|	ИСТИНА
	|ИЗ
	|	ИсходныеЗаписи КАК ИсходныеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияПродукцииВЕТИС.Производители КАК ИнвентаризацияПродукцииВЕТИСПроизводители
	|		ПО ИсходныеЗаписи.Ссылка = ИнвентаризацияПродукцииВЕТИСПроизводители.Ссылка
	|			И ИсходныеЗаписи.ИдентификаторСтроки = ИнвентаризацияПродукцииВЕТИСПроизводители.ИдентификаторСтрокиТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ИдентификаторСтроки,
	|	Производитель,
	|	Факт
	|ИТОГИ ПО
	|	Ссылка,
	|	ИдентификаторСтроки";
	Результат = Запрос.ВыполнитьПакет();
	
	ДанныеПечатнойФормы = Новый Структура;
	ДанныеПечатнойФормы.Вставить("РезультатЗапроса",   Результат);
	ДанныеПечатнойФормы.Вставить("Шапка",              1);
	ДанныеПечатнойФормы.Вставить("Товары",             2);
	ДанныеПечатнойФормы.Вставить("Упаковки",           3);
	ДанныеПечатнойФормы.Вставить("Партии",             4);
	ДанныеПечатнойФормы.Вставить("Производители",      5);
	ДанныеПечатнойФормы.Вставить("ВариантРасхождений", "ДляИнвентаризации");
	
	Возврат ДанныеПечатнойФормы;
	
КонецФункции

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаДвиженияСерийТоваров(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗаписиСкладскогоЖурналаВРезервеВЕТИС(Запрос, ТекстыЗапроса, Регистры);
	
	ИнтеграцияВЕТИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата КАК Период,
	|	ДанныеШапки.Ссылка КАК Ссылка,
	|	ДанныеШапки.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	ДанныеШапки.Предприятие КАК Предприятие,
	|	ЕСТЬNULL(СтатусыДокументовВЕТИС.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.Черновик)) КАК Статус
	|ИЗ
	|	Документ.ИнвентаризацияПродукцииВЕТИС КАК ДанныеШапки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО (СтатусыДокументовВЕТИС.Документ = ДанныеШапки.Ссылка)
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СтатусыДвиженийРезерв", СтатусыДвиженийРезерв());
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаДвиженияСерийТоваров(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если Не ИнтеграцияВЕТИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = ИнтеграцияВЕТИС.ТекстЗапросаДвижениеСерийТоваров(Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаписиСкладскогоЖурналаВРезервеВЕТИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаписиСкладскогоЖурналаВРезервеВЕТИС";
	
	Если Не ИнтеграцияВЕТИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Регистратор,
	|	&Ссылка КАК Документ,
	|	&ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	&Предприятие КАК Предприятие,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС КАК ЕдиницаИзмеренияВЕТИС,
	|	СУММА(ВЫБОР ТаблицаДокумента.Операция
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение)
	|				ТОГДА -ТаблицаДокумента.КоличествоИзменениеВЕТИС
	|			ИНАЧЕ ТаблицаДокумента.ЗаписьСкладскогоЖурнала.КоличествоВЕТИС
	|		КОНЕЦ) КАК КоличествоВЕТИС
	|ИЗ
	|	Документ.ИнвентаризацияПродукцииВЕТИС.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И &Статус В (&СтатусыДвиженийРезерв)
	|	И (ТаблицаДокумента.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление)
	|			ИЛИ ТаблицаДокумента.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение)
	|					И ТаблицаДокумента.КоличествоИзменениеВЕТИС < 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала,
	|	ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтатусыДвиженийРезерв()

	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.Черновик);
	Результат.Добавить(Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.КПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.Обрабатывается);
	Результат.Добавить(Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ОшибкаПередачи);
	Результат.Добавить(Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ОтклоненВЕТИС);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Функция ЗаполнитьЗаписиСкладскогоЖурнала(Объект, СписокСтрок = Неопределено) Экспорт

	ПараметрыЗаполнения = ЗаполнениеДокументовВЕТИС.ПараметрыЗаполненияЗаписейСкладскогоЖурнала();
	ПараметрыЗаполнения.ЭтоИнвентаризация = Истина;
	ПараметрыЗаполнения.ИмяПоляКоличество = "КоличествоИзменение";
	ПараметрыЗаполнения.ИмяПоляКоличествоВЕТИС = "КоличествоИзменениеВЕТИС";
	
	РезультатЗаполнения = ЗаполнениеДокументовВЕТИС.ЗаполнитьЗаписиСкладскогоЖурнала(
								Объект.Товары,
								Объект.ХозяйствующийСубъект,
								Объект.Предприятие,
								СписокСтрок,
								ПараметрыЗаполнения);

	Возврат РезультатЗаполнения;
	
КонецФункции

Функция ТипДокумента()
	
	Возврат Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли