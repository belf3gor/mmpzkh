#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыВЕТИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,"ДокументОснование");
	
	ИнтеграцияВЕТИСПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, "ТоварыСерия");
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Элементы.ТоварыПродукция.СписокВыбора.Добавить(Справочники.ПродукцияВЕТИС.ПустаяСсылка(), НСтр("ru='<Произвольная>'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ЗаписиСкладскогоЖурналаВЕТИС") Тогда
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("ЗаписьСкладскогоЖурнала", ВыбранноеЗначение));
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			НоваяСтрока.Операция = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение");
			
			НоваяСтрока.ЗаписьСкладскогоЖурнала = ВыбранноеЗначение;
			
			ПриИзмененииЗаписиСкладскогоЖурнала(НоваяСтрока, Истина);
			
			Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущиеДанные.ПолучитьИдентификатор());
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработкаВыбораНоменклатурыЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		СобытияФормВЕТИСКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(
			ОписаниеОповещения,
			ВыбранноеЗначение,
			ИсточникВыбора);
		
	КонецЕсли;
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаВыбораПодборНоменклатуры(
		Новый ОписаниеОповещения("ОбработкаПодбораНоменклатурыЗавершение", ЭтотОбъект),
		ВыбранноеЗначение,
		ИсточникВыбора);
	
	Если ПараметрыУказанияСерий <> Неопределено
		И ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ИмяТЧ") Тогда
		
		ПараметрыЗаполнения = Новый Структура;
		Если ВыбранноеЗначение.ИмяТЧ = Элементы.Товары.Имя Тогда
			ДополнительныеПараметры = Новый Структура("ИдентификаторТекущейСтроки", ВыбранноеЗначение.ИдентификаторТекущейСтроки);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореТоварыСерия", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыЗаполнения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		КонецЕсли;
		
		СобытияФормВЕТИСКлиентПереопределяемый.ОбработкаВыбораСерии(ЭтотОбъект, ПараметрыУказанияСерий, ВыбранноеЗначение,
			ИсточникВыбора, ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы())
		И (Параметр = Неопределено
			Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВЕТИСВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ХозяйствующиеСубъектыВЕТИС" Тогда
		
		СписокРеквизитовОбновления = "ХозяйствующийСубъект, Предприятие";
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, СписокРеквизитовОбновления);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки"
		И Источник = "Справочник.ВЕТИСПрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
		ПриИзмененииДокументаОснования();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореНоменклатуры", ЭтотОбъект);
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(ОписаниеОповещения, НовыйОбъект, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере(Ложь);
	
	СобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	ОбновитьСтатусВЕТИС();
	
	НастроитьЭлементыФормы();
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	ИнтеграцияВЕТИСПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""Товары""'");
	
	Для каждого ТекущаяСтрока Из Объект.Товары Цикл
		
		Если ТекущаяСтрока.Операция <> Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Количество) Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Количество");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ШаблонСообщения, НСтр("ru = 'Количество новое'"), ТекущаяСтрока.НомерСтроки),,
				Поле,,
				Отказ);
			
		КонецЕсли;
		
		Если ТекущаяСтрока.Операция <> Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.КоличествоВЕТИС) Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "КоличествоВЕТИС");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ШаблонСообщения, НСтр("ru='Количество новое ВетИС'"), ТекущаяСтрока.НомерСтроки),,
				Поле,,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияВЕТИСКлиент.ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьПризнакИсключенияПродукцииТретьегоУровня(Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусВЕТИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусВЕТИСОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусВЕТИСОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйствующийСубъектПриИзменении(Элемент)
	
	ХозяйствующийСубъектПриИзмененииНаСервере(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйствующийСубъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	Если ЗначениеЗаполнено(ВладелецСкладаИзОснованияДляОтбораХС)
		И Не ЗначениеЗаполнено(Объект.ХозяйствующийСубъект) Тогда
		
		ПараметрыОткрытия.Вставить("Контрагент", ВладелецСкладаИзОснованияДляОтбораХС);
		
	Иначе
		
		ПараметрыОткрытия.Вставить("НастроеноПодключение", Истина);
		
	КонецЕсли;
	ОткрытьФорму("Справочник.ХозяйствующиеСубъектыВЕТИС.ФормаСписка",
		ПараметрыОткрытия,
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	
	ПредприятиеПриИзмененииНаСервере(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.ДокументОснование = Неопределено;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,"ДокументОснование");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПродукцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СтрокаТабличнойЧасти.Продукция);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если СтрокаТабличнойЧасти.Операция = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление")
		Или СтрокаТабличнойЧасти.Операция = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение") Тогда
			
		ПараметрыФормы.Вставить("ИсключитьПродукциюТретьегоУровня", ИсключитьПродукциюТретьегоУровня);
		ПараметрыФормы.Вставить("ЗаписьСкладскогоЖурнала",          СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурнала);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ПродукцияВЕТИС.Форма.ФормаСписка", ПараметрыФормы, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ХарактеристикаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормВЕТИСКлиентПереопределяемый.НачалоВыбораХарактеристики(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	СобытияФормВЕТИСКлиентПереопределяемый.ХарактеристикаСоздание(ЭтотОбъект, Элементы.Товары.ТекущиеДанные, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыНоменклатуры = ИнтеграцияВЕТИСВызовСервера.ПараметрыСозданияНоменклатуры(
		ТекущиеДанные.Продукция,
		ТекущиеДанные.ЕдиницаИзмеренияВЕТИС);
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОткрытьФормуВыбораНоменклатуры(ЭтотОбъект, ПараметрыНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыНоменклатуры = ИнтеграцияВЕТИСВызовСервера.ПараметрыСозданияНоменклатуры(
		ТекущиеДанные.Продукция,
		ТекущиеДанные.ЕдиницаИзмеренияВЕТИС);
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОткрытьФормуСозданияНоменклатуры(
		ЭтотОбъект, ПараметрыНоменклатуры,
		ТекущиеДанные.ЕдиницаИзмеренияВЕТИС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНадписьСрокГодностиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьВводПериода(НавигационнаяСсылкаФорматированнойСтроки, Элемент.ТолькоПросмотр ИЛИ РедактированиеФормыНедоступно);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНадписьДатаПроизводстваОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьВводПериода(НавигационнаяСсылкаФорматированнойСтроки, Элемент.ТолькоПросмотр ИЛИ РедактированиеФормыНедоступно);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНадписьУпаковкиШтрихкодыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаТабличнойЧасти", СтрокаТабличнойЧасти);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НадписьУпаковкиШтрихкодыНажатиеЗавершение",ЭтотОбъект, ДополнительныеПараметры);
	
	ИнтеграцияВЕТИСКлиент.ОткрытьФормуРедактированияУпаковокШтрихкодовПоСтроке(ЭтаФорма,
		Объект,
		СтрокаТабличнойЧасти,
		ОписаниеОповещения,
		Элемент.ТолькоПросмотр ИЛИ РедактированиеФормыНедоступно);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНадписьПроизводителиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОткрытьФормуРедактированияТабличнойЧастиПоСтроке("ОбщаяФорма.ПроизводителиВЕТИС",
		"Производители",
		СтрокаТабличнойЧасти,
		Элемент.ТолькоПросмотр ИЛИ РедактированиеФормыНедоступно);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНадписьПроизводственныеПартииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОткрытьФормуРедактированияТабличнойЧастиПоСтроке("ОбщаяФорма.ПроизводственныеПартииВЕТИС",
		"ПроизводственныеПартии",
		СтрокаТабличнойЧасти,
		Элемент.ТолькоПросмотр ИЛИ РедактированиеФормыНедоступно);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПродукцияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если ВыбранноеЗначение.Пустая() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтрокаТабличнойЧасти", СтрокаТабличнойЧасти);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьФормуПроизвольнаяПродукцияЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", СтрокаТабличнойЧасти.Продукция);
		
		ОткрытьФорму("Справочник.ПродукцияВЕТИС.Форма.ПроизвольнаяПродукция",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения);
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПродукцияПриИзменении(Элемент)
	
	ПриИзмененииПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		НастроитьВидимостьДоступностьЭлементовПоСтроке(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыПродукция Тогда
		
		ЗаполнитьСписокВыбораПродукции(ТекущиеДанные);
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатура Тогда
		
		ЗаполнитьСпискиВыбораНоменклатуры(ТекущиеДанные);
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыХарактеристика Тогда
		
		ЗаполнитьСпискиВыбораХарактеристика(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОперацияПриИзменении(Элемент)
	
	ПриИзмененииОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаписьСкладскогоЖурналаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ПараметрыФормы.Вставить("Продукция", ТекущиеДанные.Продукция);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ХозяйствующийСубъект", Объект.ХозяйствующийСубъект);
	СтруктураОтбора.Вставить("Предприятие", Объект.Предприятие);
	
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.ОстаткиПродукцииВЕТИС.ФормаСписка",
		ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если Копирование Тогда
			ИдентификторСтрокиИсточника = ТекущиеДанные.ИдентификаторСтроки;
		КонецЕсли;
		
		ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
		Если Копирование Тогда
			СкопироватьДанныеТабличныхЧастейПоСтроке(ТекущиеДанные, ИдентификторСтрокиИсточника);
			НастроитьВидимостьДоступностьЭлементовПоСтроке(ТекущиеДанные);
		Иначе
			УстановитьЗначенияПоУмолчаниюПоСтроке(ТекущиеДанные);
			ТекущиеДанные.Операция =
				ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление");
		КонецЕсли;
		
		ЗаполнитьПредставлениеПериодовПоСтроке(ЭтаФорма, ТекущиеДанные);
		ЗаполнитьПредставленияТабличныхЧастейПоСтроке(ЭтаФорма, ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОчиститьДанныеТабличныхЧастейПоСтроке(ЭтаФорма, ТекущиеДанные);
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	НеобходимоОбновитьСтатусыСерий = Ложь;
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		НеобходимоОбновитьСтатусыСерий = ИнтеграцияИСКлиент.НеобходимоОбновитьСтатусыСерий(
			ЭтотОбъект,
			Элемент,
			КэшированныеЗначения,,
			Истина);
	КонецЕсли;
	
	Если НеобходимоОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			Неопределено,
			КэшированныеЗначения);
		
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	НеобходимоОбновитьСтатусыСерий = Ложь;
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		НеобходимоОбновитьСтатусыСерий = ИнтеграцияИСКлиент.НеобходимоОбновитьСтатусыСерий(
			ЭтотОбъект,
			Элемент,
			КэшированныеЗначения);
	КонецЕсли;
	
	Если НеобходимоОбновитьСтатусыСерий Тогда
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			ТекущаяСтрокаИдентификатор,
			КэшированныеЗначения);
		
		ИнтеграцияИСКлиентПереопределяемый.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,"ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииСерии(
			ЭтотОбъект,
			ПараметрыУказанияСерий,
			Элементы.Товары.ТекущиеДанные);
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.Серия) Тогда
			
			СтрокиИдентификаторовПартий = 
				Объект.ПроизводственныеПартии.НайтиСтроки(Новый Структура("ИдентификаторСтрокиТовары", ТекущиеДанные.ИдентификаторСтроки));
			
			Если СтрокиИдентификаторовПартий.Количество() = 0 Тогда
				ТоварыСерияПриИзмененииНаСервере(ТекущиеДанные.ИдентификаторСтроки, ТекущиеДанные.Серия);
			КонецЕсли;
			
			ЗаполнитьПредставлениеТабличнойЧастиПоСтроке(ЭтаФорма, "ПроизводственныеПартии", ТекущиеДанные);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьПодборСерий(Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкоропортящаясяПродукцияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные.СкоропортящаясяПродукция Тогда
		ТочностьЗаполнение = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГЧЧ");
	Иначе
		ТочностьЗаполнение = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ");
	КонецЕсли;
	
	ТекущиеДанные.ДатаПроизводстваТочностьЗаполнения = ТочностьЗаполнение;
	ТекущиеДанные.СрокГодностиТочностьЗаполнения     = ТочностьЗаполнение;
	
	ЗаполнитьПредставлениеПериодовПоСтроке(ЭтаФорма, ТекущиеДанные);
	
	ОбновитьКонтрольныеРеквизитыСравненияПоСтроке(ТекущиеДанные, "СкоропортящаясяПродукция,ДатаПроизводства,СрокГодности");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНизкокачественнаяПродукцияПриИзменении(Элемент)
	
	ОбновитьКонтрольныеРеквизитыСравненияПоСтроке(Элементы.Товары.ТекущиеДанные, "НизкокачественнаяПродукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоличествоПриИзменении(ТекущиеДанные);
	
	ОбновитьКонтрольныеРеквизитыСравненияПоСтроке(ТекущиеДанные, "КоличествоВЕТИС");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоВЕТИСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоличествоВЕТИСПриИзменении(ТекущиеДанные);
	
	ОбновитьКонтрольныеРеквизитыСравненияПоСтроке(ТекущиеДанные, "КоличествоВЕТИС");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоИзменениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоличествоИзменениеПриИзменении(ТекущиеДанные);
	
	ОбновитьКонтрольныеРеквизитыСравненияПоСтроке(ТекущиеДанные, "КоличествоВЕТИС");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоИзменениеВЕТИСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоличествоИзменениеВЕТИСПриИзменении(ТекущиеДанные);
	
	ОбновитьКонтрольныеРеквизитыСравненияПоСтроке(ТекущиеДанные, "КоличествоВЕТИС");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияВЕТИСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ЕдиницаИзмеренияВЕТИСПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Продукция = Элементы.Товары.ТекущиеДанные.Продукция;
	
	Элементы.ТоварыЕдиницаИзмеренияВЕТИС.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Продукция) Тогда
		Элементы.ТоварыЕдиницаИзмеренияВЕТИС.СписокВыбора.ЗагрузитьЗначения(ДоступныеЕдиницыИзменения(Продукция));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаписьСкладскогоЖурналаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		ДанныеВыбора = ЗаписьСкладскогоЖурналаДанныеВыбора(Текст, ПараметрыПолученияДанных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаписьСкладскогоЖурналаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииЗаписиСкладскогоЖурнала(ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно Тогда
		СобытияФормВЕТИСКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыВЕТИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность = Истина;
		ПриИзмененииДокументаОснования();
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение") Тогда
		ПерезаполнитьПоОснованию(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ИнвентаризацияПродукцииВЕТИС.Форма.ФормаДокумента.Записать");
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ИнвентаризацияПродукцииВЕТИС.Форма.ФормаДокумента.Провести");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ИнвентаризацияПродукцииВЕТИС.Форма.ФормаДокумента.ПровестиИЗакрыть");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПанель(Команда)
	ПанельТоварыСвернута = Истина;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "СкрытьРаскрытьПанельТовары");
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьПанель(Команда)
	ПанельТоварыСвернута = Ложь;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "СкрытьРаскрытьПанельТовары");
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПродукциюПоОстаткам(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ХозяйствующийСубъект", Объект.ХозяйствующийСубъект);
	СтруктураОтбора.Вставить("Предприятие", Объект.Предприятие);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.ОстаткиПродукцииВЕТИС.ФормаСписка",
		ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаписиСкладскогоЖурнала(Команда)
	
	ВыполнитьКомандуЗаполнитьЗаписиСкладскогоЖурнала();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуЗаполнитьЗаписиСкладскогоЖурнала()

	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ХозяйствующийСубъект) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Хозяйствующий субъект""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"Объект.ХозяйствующийСубъект",,
			Отказ);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Объект.Предприятие) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Предприятие""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"Объект.Предприятие",,
			Отказ);
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СообщениеПользователю = ЗаполнитьЗаписиСкладскогоЖурналаНаСервере();
	
	ПоказатьОповещениеПользователя(
		СообщениеПользователю.ЗаголовокСообщения,,
		СообщениеПользователю.ТекстСообщения,
		СообщениеПользователю.КартинкаСообщения);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьЗаписиСкладскогоЖурналаНаСервере()

	СписокСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		СписокСтрок.Добавить(ДанныеСтроки);
	КонецЦикла; 
	
	РезультатЗаполнения = Документы.ИнвентаризацияПродукцииВЕТИС.ЗаполнитьЗаписиСкладскогоЖурнала(Объект, СписокСтрок);
	
	Если РезультатЗаполнения.ИзмененныеСтроки.Количество() Тогда
		
		ДанныеЗаписейСкладскогоЖурнала = ОбновитьДанныеЗаписейСкладскогоЖурнала();
		
		Для каждого Строка Из РезультатЗаполнения.ИзмененныеСтроки Цикл
			ДанныеЗаписиЖурнала = ДанныеЗаписейСкладскогоЖурнала[Строка.ЗаписьСкладскогоЖурнала];
			
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			
			ОчиститьДанныеТабличныхЧастейПоСтроке(ЭтаФорма, Строка);
			
			ЗаполнитьЗначенияСвойств(Строка, ДанныеЗаписиЖурнала,,"КоличествоВЕТИС");
			ЗаполнитьСтрокуТабличнымиЧастямиЗаписиСкладскогоЖурнала(Строка, ДанныеЗаписиЖурнала);
			ЗаполнитьКоличествоСтароеВЕТИСПоСтроке(ИдентификаторСтроки);
			
			ЗаполнитьПредставлениеПериодовПоСтроке(ЭтаФорма, Строка);
			ЗаполнитьПредставленияТабличныхЧастейПоСтроке(ЭтаФорма, Строка);
			
			ПересчитатьЗависимуюГруппуКоличественныхРеквизитов(Строка, "КоличествоИзменение");
			ОбновитьКонтрольныеРеквизитыСравненияПоСтрокеНаСервере(ИдентификаторСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатЗаполнения.СообщениеПользователю;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПодборНоменклатуры(Команда)
	
	ПараметрыПодбора = ИнтеграцияВЕТИСКлиентСервер.ПараметрыФормыПодбораТоваров(ЭтаФорма, ПараметрыУказанияСерий);
	СобытияФормВЕТИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, Неопределено, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьСерии(Команда)
	
	ОчиститьСообщения();
	
	СтрокиСМинусом = Новый Массив;
	СтрокиБезИдентификатораПартии = Новый Массив;
	СтрокиСНесколькимиИдентификаторамиПартии = Новый Массив;
	СтрокиДляГенерацииСерий = Новый Массив;
	
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(Строка);
		ИдентификаторыПартий = Объект.ПроизводственныеПартии.НайтиСтроки(
			Новый Структура("ИдентификаторСтрокиТовары", ДанныеСтроки.ИдентификаторСтроки));
			
		ИндексСтроки = Объект.Товары.Индекс(ДанныеСтроки);
		
		Если ДанныеСтроки.КоличествоИзменение <= 0 Тогда
			СтрокиСМинусом.Добавить(ИндексСтроки);
		ИначеЕсли ИдентификаторыПартий.Количество() = 0 И ТребуетсяУказаниеИдентификатораПартии(Строка) Тогда
			СтрокиБезИдентификатораПартии.Добавить(ИндексСтроки);
		ИначеЕсли ИдентификаторыПартий.Количество() > 1 Тогда
			СтрокиСНесколькимиИдентификаторамиПартии.Добавить(ИндексСтроки);
		Иначе
			СтрокиДляГенерацииСерий.Добавить(ИндексСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиСМинусом Цикл
		ТекстСообщения = НСтр("ru = 'Генерация серий возможна только для строк на увеличение количества'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", Стр + 1, "НомерСтроки"));
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиБезИдентификатораПартии Цикл
		СтрокиСообщения = Новый Массив();
		СтрокиСообщения.Добавить(НСтр("ru = 'Для строки %1 не указан идентификатор производственной партии.'"));
		СтрокиСообщения.Добавить(НСтр("ru = 'Генерация серий без идентификатора партии невозможна.'"));
		СтрокиСообщения.Добавить(НСтр("ru = 'Вы можете указать серию вручную.'"));
		ТекстСообщения = СтрШаблон(СтрСоединить(СтрокиСообщения, " "), Стр + 1);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", Стр + 1, "НомерСтроки"));
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиСНесколькимиИдентификаторамиПартии Цикл
		СтрокиСообщения = Новый Массив();
		СтрокиСообщения.Добавить(НСтр("ru = 'Для строки %1 указано несколько идентификаторов производственных партий.'"));
		СтрокиСообщения.Добавить(НСтр("ru = 'Генерация серий возможна только для строк с одним идентификатором партии.'"));
		СтрокиСообщения.Добавить(НСтр("ru = 'Вы можете указать серию вручную.'"));
		ТекстСообщения = СтрШаблон(СтрСоединить(СтрокиСообщения, " "), Стр + 1);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", Стр + 1, "НомерСтроки"));
	КонецЦикла;
	
	Если СтрокиДляГенерацииСерий.Количество() Тогда
		Результат = СгенерироватьСерииНаСервере(СтрокиДляГенерацииСерий);
		ИнтеграцияВЕТИСКлиент.ОповеститьОбОкончанииЗаполненияСерийВДокументе(
			Результат.ЗаполнениеЗавершено,
			Результат.СписокОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗапрещенаПродукцияТретьегоУровня(ЗаписьСкладскогоЖурнала, Операция)
	Возврат ИсключитьПродукциюТретьегоУровня
		И (Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление
			Или Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение)
		И ЗначениеЗаполнено(ЗаписьСкладскогоЖурнала)
		И Не ПродукцияВЕТИСВызовСервера.ЗаписьЖурналаСодержитПродукциюЧетвертогоУровня(ЗаписьСкладскогоЖурнала);
КонецФункции

&НаСервере
Процедура УстановитьПризнакИсключенияПродукцииТретьегоУровня(ДатаДокумента)
	
	ИсключитьПродукциюТретьегоУровня = ИнтеграцияВЕТИСВызовСервера.ИспользуетсяОграничениеВыбораПродукцииТретьегоУровня(ДатаДокумента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// добавление
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоСтароеВЕТИС.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоСтарое.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.Операция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаписьСкладскогоЖурнала");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаписьСкладскогоЖурнала.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.Операция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаписьСкладскогоЖурнала");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<будет загружено из ВетИС>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаписьСкладскогоЖурнала.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Операция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// удаление
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличество.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоВЕТИС.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоСтароеВЕТИС.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоСтарое.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.Операция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаписьСкладскогоЖурнала");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не выбрана запись>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличество.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоВЕТИС.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоИзменение.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоИзменениеВЕТИС.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЕдиницаИзмеренияВЕТИС.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.Операция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоИзменение.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.Операция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.КоличествоИзменение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличество.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоВЕТИС.Имя);
	
	ОтборЭлемента =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.Операция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// количество изменение, количество изменение ветис
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоИзменение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КоличествоИзменение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255,0,0));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоИзменениеВЕТИС.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КоличествоИзменениеВЕТИС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255,0,0));
	
	// продукция, номенклатура, характеристика
	
	ИнтеграцияВЕТИС.УстановитьУсловноеОформлениеПоляПродукция(
		ЭтаФорма,
		Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ВыполненЧерезWeb);
	
	ИнтеграцияВЕТИС.УстановитьУсловноеОформлениеПоляНоменклатура(ЭтаФорма);
	
	ИнтеграцияВЕТИС.УстановитьУсловноеОформлениеПоляХарактеристика(ЭтаФорма);
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере(ОбновитьКомандыОснования = Истина)
	
	ИнтеграцияИСПереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	ИнтеграцияВЕТИС.УстановитьДоступностьПоляСтатус(ЭтотОбъект);
	
	ПараметрыОбновленияСтатуса = Неопределено;
	
	ЗаполнитьОтборыПоОснованию(ОбновитьКомандыОснования);
	
	ОбновитьСтатусВЕТИС();
	
	УстановитьПараметрыВыбораХозяйствующегоСубъекта();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	НастроитьЭлементыФормы();
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
	УстановитьПризнакИсключенияПродукцииТретьегоУровня(ТекущаяДатаСеанса());
	
	
	
	ИнтеграцияВЕТИСКлиентСервер.ОбновитьТочностьДатПродукцииВСвязаннойТаблице(Объект.Товары.Выгрузить(, "Продукция"), ТочностьДатПродукции);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораХозяйствующегоСубъекта()

	ИспользуетсяКомиссияИлиПереработка = ИнтеграцияВЕТИС.ИспользуетсяКомиссияПриЗакупкахИлиПереработкаДавальческогоСырья();
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("НастроеноПодключение", Истина));
	
	Если Не ИспользуетсяКомиссияИлиПереработка Тогда
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Соответствует", "Организации"));
	КонецЕсли;
	
	Элементы.ХозяйствующийСубъект.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ИнтеграцияВЕТИС.ЗаполнитьСопоставленнуюПродукциюВДокументе(Объект.Товары);
	ИнтеграцияВЕТИС.ЗаполнитьСопоставленныеТовары(Объект.Товары, НоменклатураДляВыбора,,,Истина);
	Справочники.ПредприятияВЕТИС.ЗаполнитьНомера(Объект.Производители);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ЦветГиперссылкиОбычный     = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветГиперссылкиОсобыйТекст = ЦветаСтиля.ЦветОсобогоТекста;
	
	ОбновитьДанныеЗаписейСкладскогоЖурнала();
	
	Для каждого Строка Из Объект.Товары Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		ЗаполнитьПредставлениеПериодовПоСтроке(ЭтаФорма, Строка);
		ЗаполнитьПредставленияТабличныхЧастейПоСтроке(ЭтаФорма, Строка);
		ЗаполнитьКоличествоСтароеВЕТИСПоСтроке(ИдентификаторСтроки);
		ПересчитатьЗависимуюГруппуКоличественныхРеквизитов(Строка, "КоличествоИзменение");
		ОбновитьКонтрольныеРеквизитыСравненияПоСтрокеНаСервере(ИдентификаторСтроки);
	КонецЦикла;
	
	ЗаполнитьПризнакТипЖивыеЖивотные();
	
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеИнвентаризацияПродукцииВЕТИС.Тип;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ХозяйствующийСубъектПриИзмененииНаСервере(ИмяЭлемента)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, ИмяЭлемента);
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
КонецПроцедуры

&НаСервере
Процедура ПредприятиеПриИзмененииНаСервере(ИмяЭлемента)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, ИмяЭлемента);
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДокументаОснования()
	
	ЗаполнитьОтборыПоОснованию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПродукции()
	
	ОчиститьСообщения();
	
	ПриИзмененииПродукцииНаСервере(Элементы.Товары.ТекущаяСтрока);
	
	НастроитьВидимостьДоступностьЭлементовПоСтроке(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПродукцииНаСервере(ИдентификаторСтроки, Пересчет = Истина)
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ИнтеграцияВЕТИС.ЗаполнитьСопоставленныеТовары(
		Объект.Товары,
		НоменклатураДляВыбора,
		СтрокаТабличнойЧасти.Продукция,
		СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурнала,
		Истина);
	
	Если СтрокаТабличнойЧасти.Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление Тогда
		СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурнала = Неопределено;
	КонецЕсли;
	
	ИнтеграцияВЕТИСКлиентСервер.УстановитьПризнакТипЖивыеЖивотныеПоСтроке(
		СтрокаТабличнойЧасти,
		ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(СтрокаТабличнойЧасти.Продукция));
	
	Если Пересчет Тогда
	
		ИнтеграцияВЕТИС.ПроверитьОчиститьЕдиницуИзмеренияВЕТИС(СтрокаТабличнойЧасти);
		
		ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		ПараметрыЗаполнения.Суффикс                          = "Изменение";
		ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС            = СтрокаТабличнойЧасти.ЕдиницаИзмеренияВЕТИС;
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
		
		СобытияФормВЕТИСПереопределяемый.ПриИзмененииКоличества(
			ЭтотОбъект,
			СтрокаТабличнойЧасти,
			Неопределено,
			ПараметрыЗаполнения);
			
		ЕдиницаИзмеренияВЕТИСПриИзмененииНаСервере(ИдентификаторСтроки);
	
	КонецЕсли;
	
	ИнтеграцияВЕТИСКлиентСервер.ОбновитьТочностьДатПродукцииВСвязаннойТаблице(Объект.Товары, ТочностьДатПродукции);
	
	ДатаПроизводстваДоступнаяТочностьЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ТочностьДатПродукцииИзСвязаннойТаблицы(
		СтрокаТабличнойЧасти.Продукция, ТочностьДатПродукции, "ДатаПроизводства");
		
	ТекущаяТочностьДоступна = ДатаПроизводстваДоступнаяТочностьЗаполнения.НайтиПоЗначению(
		СтрокаТабличнойЧасти.ДатаПроизводстваТочностьЗаполнения);
		
	Если ТекущаяТочностьДоступна = Неопределено Тогда
		СтрокаТабличнойЧасти.ДатаПроизводстваСтрока             = "";
		СтрокаТабличнойЧасти.ДатаПроизводстваТочностьЗаполнения = 
			?(ДатаПроизводстваДоступнаяТочностьЗаполнения.Количество(),
			ДатаПроизводстваДоступнаяТочностьЗаполнения[0].Значение,
			Неопределено);
			
		СтрокаТабличнойЧасти.ДатаПроизводстваНачалоПериода      = Неопределено;
		СтрокаТабличнойЧасти.ДатаПроизводстваКонецПериода       = Неопределено;
	КонецЕсли;

	СрокГодностиДоступнаяТочностьЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ТочностьДатПродукцииИзСвязаннойТаблицы(
		СтрокаТабличнойЧасти.Продукция, ТочностьДатПродукции, "СрокГодности");
		
	ТекущаяТочностьДоступна = СрокГодностиДоступнаяТочностьЗаполнения.НайтиПоЗначению(
		СтрокаТабличнойЧасти.СрокГодностиТочностьЗаполнения);
		
	Если ТекущаяТочностьДоступна = Неопределено Тогда
		СтрокаТабличнойЧасти.СрокГодностиСтрока             = "";
		СтрокаТабличнойЧасти.СрокГодностиТочностьЗаполнения =
			?(СрокГодностиДоступнаяТочностьЗаполнения.Количество(),
			СрокГодностиДоступнаяТочностьЗаполнения[0].Значение,
			Неопределено);
			
		СтрокаТабличнойЧасти.СрокГодностиНачалоПериода      = Неопределено;
		СтрокаТабличнойЧасти.СрокГодностиКонецПериода       = Неопределено;
	КонецЕсли;

	Если ДатаПроизводстваДоступнаяТочностьЗаполнения.Количество() = 1
		И ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(ДатаПроизводстваДоступнаяТочностьЗаполнения[0].Значение) Тогда
		
		СтрокаТабличнойЧасти.ДатаПроизводстваТочностьЗаполнения = ДатаПроизводстваДоступнаяТочностьЗаполнения[0].Значение;
	КонецЕсли;
	
	Если ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(СтрокаТабличнойЧасти.ДатаПроизводстваТочностьЗаполнения) Тогда
		СтрокаТабличнойЧасти.ДатаПроизводстваСтрока             = "";
		СтрокаТабличнойЧасти.ДатаПроизводстваНачалоПериода      = Неопределено;
		СтрокаТабличнойЧасти.ДатаПроизводстваКонецПериода       = Неопределено;
	КонецЕсли;

	Если СрокГодностиДоступнаяТочностьЗаполнения.Количество() = 1
		И ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(СрокГодностиДоступнаяТочностьЗаполнения[0].Значение) Тогда
		
		СтрокаТабличнойЧасти.СрокГодностиТочностьЗаполнения = СрокГодностиДоступнаяТочностьЗаполнения[0].Значение;
	КонецЕсли;
	
	Если ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(СтрокаТабличнойЧасти.СрокГодностиТочностьЗаполнения) Тогда
		СтрокаТабличнойЧасти.СрокГодностиСтрока             = "";
		СтрокаТабличнойЧасти.СрокГодностиНачалоПериода      = Неопределено;
		СтрокаТабличнойЧасти.СрокГодностиКонецПериода       = Неопределено;
	КонецЕсли;
	
	ЗаполнитьПредставлениеПериодовПоСтроке(ЭтаФорма, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОперации()
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОчиститьКонтрольныеРеквизитыСравненияПоСтроке(ТекущиеДанные);
	
	Если ТекущиеДанные.Операция = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление") Тогда
		ТекущиеДанные.ЗаписьСкладскогоЖурнала = Неопределено;
	ИначеЕсли ТекущиеДанные.Операция = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление") Тогда
		ТекущиеДанные.Количество               = 0;
		ТекущиеДанные.КоличествоВЕТИС          = 0;
		ТекущиеДанные.КоличествоИзменение      = 0;
		ТекущиеДанные.КоличествоИзменениеВЕТИС = 0;
	КонецЕсли;
	
	ПриИзмененииЗаписиСкладскогоЖурнала(ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЗаписиСкладскогоЖурнала(СтрокаТабличнойЧасти, ПерезаполнитьСтроку = Ложь)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурнала) Тогда
		
		ПриИзмененииЗаписиСкладскогоЖурналаНаСервере(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), ПерезаполнитьСтроку);
		
		Если СтрокаТабличнойЧасти.КоличествоИзменение <> 0 Тогда
			КоличествоИзменениеВЕТИСПриИзменении(СтрокаТабличнойЧасти);
		Иначе
			КоличествоВЕТИСПриИзменении(СтрокаТабличнойЧасти);
		КонецЕсли;

	Иначе
		
		УстановитьЗначенияПоУмолчаниюПоСтроке(СтрокаТабличнойЧасти, "Количество,КоличествоВЕТИС,КоличествоИзменение,КоличествоИзменениеВЕТИС");
		
		ОчиститьДанныеТабличныхЧастейПоСтроке(ЭтаФорма, СтрокаТабличнойЧасти);
		
		ЗаполнитьПредставлениеПериодовПоСтроке(ЭтаФорма, СтрокаТабличнойЧасти);
		ЗаполнитьПредставленияТабличныхЧастейПоСтроке(ЭтаФорма, СтрокаТабличнойЧасти);
		
		ПересчитатьЗависимуюГруппуКоличественныхРеквизитов(СтрокаТабличнойЧасти, "КоличествоИзменение");
		
	КонецЕсли;
	
	НастроитьВидимостьДоступностьЭлементовПоСтроке(СтрокаТабличнойЧасти);
	
	ОбновитьКонтрольныеРеквизитыСравненияПоСтроке(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗаписиСкладскогоЖурналаНаСервере(ИдентификаторСтроки, ПерезаполнитьСтроку = Ложь)
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ОбновитьДанныеЗаписейСкладскогоЖурнала();
	
	ДанныеЗаписейСкладскогоЖурнала = ПолучитьИзВременногоХранилища(АдресДанныхЗаписейСкладскогоЖурнала);
	ДанныеЗаписиЖурнала = ДанныеЗаписейСкладскогоЖурнала[СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурнала];
	
	Если ДанныеЗаписиЖурнала = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПерезаполнитьСтроку Тогда
	
		ОчиститьДанныеТабличныхЧастейПоСтроке(ЭтаФорма, СтрокаТабличнойЧасти);
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаписиЖурнала);
		
		Если СтрокаТабличнойЧасти.Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление Тогда
			СтрокаТабличнойЧасти.КоличествоВЕТИС = 0;
		КонецЕсли;
		
		ЗаполнитьСтрокуТабличнымиЧастямиЗаписиСкладскогоЖурнала(СтрокаТабличнойЧасти, ДанныеЗаписиЖурнала);
		Справочники.ПредприятияВЕТИС.ЗаполнитьНомера(Объект.Производители);
		
		ЗаполнитьПредставлениеПериодовПоСтроке(ЭтаФорма, СтрокаТабличнойЧасти);
		ЗаполнитьПредставленияТабличныхЧастейПоСтроке(ЭтаФорма, СтрокаТабличнойЧасти);
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
			Или Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Серия) Тогда
			
			ИнтеграцияВЕТИС.ЗаполнитьСопоставленныеТовары(Объект.Товары,
														НоменклатураДляВыбора,
														СтрокаТабличнойЧасти.Продукция,
														СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурнала,
														Истина);
			ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект,
																										Объект.Товары);
			ЗаполнитьСтатусыУказанияСерийСервер();
			
		КонецЕсли;
		
		ИнтеграцияВЕТИСКлиентСервер.УстановитьПризнакТипЖивыеЖивотныеПоСтроке(
			СтрокаТабличнойЧасти,
			ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(СтрокаТабличнойЧасти.Продукция));
		
	КонецЕсли;
	
	ЗаполнитьКоличествоСтароеВЕТИСПоСтроке(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), ДанныеЗаписиЖурнала);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуТабличнымиЧастямиЗаписиСкладскогоЖурнала(СтрокаТабличнойЧасти, ДанныеЗаписиЖурнала)
	
	Для каждого СтрокаУпаковки Из ДанныеЗаписиЖурнала.УпаковкиВЕТИС Цикл
		НоваяСтрокаУпаковки = Объект.УпаковкиВЕТИС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУпаковки, СтрокаУпаковки);
		НоваяСтрокаУпаковки.ИдентификаторСтрокиТовары = СтрокаТабличнойЧасти.ИдентификаторСтроки;
		Для каждого СтрокаШтрихкода Из ДанныеЗаписиЖурнала.ШтрихкодыУпаковок Цикл
			ЗаполнитьЗначенияСвойств(Объект.ШтрихкодыУпаковок.Добавить(), СтрокаШтрихкода);
		КонецЦикла;
	КонецЦикла;
	
	Для каждого Строка Из ДанныеЗаписиЖурнала.Производители Цикл
		НоваяСтрока = Объект.Производители.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Новаястрока.ИдентификаторСтрокиТовары = СтрокаТабличнойЧасти.ИдентификаторСтроки;
	КонецЦикла;
	
	Для каждого Строка Из ДанныеЗаписиЖурнала.ПроизводственныеПартии Цикл
		НоваяСтрока = Объект.ПроизводственныеПартии.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Новаястрока.ИдентификаторСтрокиТовары = СтрокаТабличнойЧасти.ИдентификаторСтроки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ХозяйствующийСубъект")
		ИЛИ СтруктураРеквизитов.Свойство("Предприятие")
		ИЛИ Инициализация Тогда
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Объект.ХозяйствующийСубъект,
			Объект.Предприятие);
		
		Форма.ХозяйствующийСубъектСоответствие = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Ссылка;
		Форма.НадписьХозяйствующийСубъект      = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Представление;
		
		Если Форма.ХозяйствующийСубъектСоответствие.Количество() = 0
			И Не ЗначениеЗаполнено(Объект.ХозяйствующийСубъект)
			И ЗначениеЗаполнено(Форма.ВладелецСкладаИзОснованияДляОтбораХС) Тогда
			Форма.НадписьХозяйствующийСубъект = Новый ФорматированнаяСтрока(
				Строка(Форма.ВладелецСкладаИзОснованияДляОтбораХС),,,,
				ПолучитьНавигационнуюСсылку(Форма.ВладелецСкладаИзОснованияДляОтбораХС));
		ИначеЕсли Форма.ХозяйствующийСубъектСоответствие.Количество() = 0
			И ЗначениеЗаполнено(Объект.ХозяйствующийСубъект)
			И ЗначениеЗаполнено(Форма.ВладелецСкладаИзОснованияДляОтбораХС) Тогда
			НадписьХозяйствующийСубъект = Новый ФорматированнаяСтрока(
				Строка(Форма.ВладелецСкладаИзОснованияДляОтбораХС),,,,
				ПолучитьНавигационнуюСсылку(Форма.ВладелецСкладаИзОснованияДляОтбораХС));
			ТекстНеСопоставлено = Новый ФорматированнаяСтрока(
				НСтр("ru = '<не сопоставлено>'"),,
				WebЦвета.Красный);
			Форма.НадписьХозяйствующийСубъект = Новый ФорматированнаяСтрока(
				НадписьХозяйствующийСубъект, " ", ТекстНеСопоставлено);
		КонецЕсли;
		
		Форма.НадписьПредприятие      = ПредставленияСопоставлений.ТорговыйОбъект.Представление;
		Форма.ПредприятиеСоответствие = ПредставленияСопоставлений.ТорговыйОбъект.Ссылка;
		
		Если (Не ЗначениеЗаполнено(Объект.Предприятие)
			И ЗначениеЗаполнено(Форма.ВладелецСкладИзОснованияДляОтбораПредприятий))
			Или Форма.ПредприятиеСоответствие.НайтиПоЗначению(Форма.ВладелецСкладИзОснованияДляОтбораПредприятий) <> Неопределено Тогда
			Форма.НадписьПредприятие = Новый ФорматированнаяСтрока(
				Строка(Форма.ВладелецСкладИзОснованияДляОтбораПредприятий),,,,
				ПолучитьНавигационнуюСсылку(Форма.ВладелецСкладИзОснованияДляОтбораПредприятий));
		ИначеЕсли ЗначениеЗаполнено(Объект.Предприятие)
			И ЗначениеЗаполнено(Форма.ВладелецСкладИзОснованияДляОтбораПредприятий)
			И Форма.ПредприятиеСоответствие.НайтиПоЗначению(Форма.ВладелецСкладИзОснованияДляОтбораПредприятий) = Неопределено Тогда
			
			НадписьПредприятие = Новый ФорматированнаяСтрока(
				Строка(Форма.ВладелецСкладИзОснованияДляОтбораПредприятий),,,,
				ПолучитьНавигационнуюСсылку(Форма.ВладелецСкладИзОснованияДляОтбораПредприятий));
			ТекстНеСопоставлено = Новый ФорматированнаяСтрока(
				НСтр("ru = '<не сопоставлено>'"),,
				WebЦвета.Красный);
			Форма.НадписьПредприятие = Новый ФорматированнаяСтрока(
				НадписьПредприятие, " ", ТекстНеСопоставлено);
			
		КонецЕсли;
		
		СопоставленныйОбъект = ПредставленияСопоставлений.ТорговыйОбъект.Ссылка;
		Если ЗначениеЗаполнено(Форма.ВладелецСкладИзОснованияДляОтбораПредприятий) Тогда
			Объект.ТорговыйОбъект = Форма.ВладелецСкладИзОснованияДляОтбораПредприятий;
		ИначеЕсли СопоставленныйОбъект <> Неопределено И СопоставленныйОбъект.Количество() > 0 Тогда
			Объект.ТорговыйОбъект = СопоставленныйОбъект.Получить(0).Значение;
		Иначе
			Объект.ТорговыйОбъект = Неопределено;
		КонецЕсли;
		
		Элементы.Предприятие.Доступность = ЗначениеЗаполнено(Объект.ХозяйствующийСубъект);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ДокументОснование") Тогда
		ПодключаемыеКомандыВЕТИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма, Объект);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СкрытьРаскрытьПанельТовары") 
		ИЛИ Инициализация Тогда
		
		Элементы.СвернутьПанель.Видимость = НЕ Форма.ПанельТоварыСвернута;
		Элементы.РазвернутьПанель.Видимость = Форма.ПанельТоварыСвернута;
		
		Элементы.ГруппаТоварыПанель.Видимость = НЕ Форма.ПанельТоварыСвернута;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставленияТабличныхЧастейПоСтроке(Форма, СтрокаТабличнойЧасти, СписокТЧ = "")
	
	МассивТЧ = МассивТабличныхЧастейДокумента(СписокТЧ);
		
	Для каждого ИмяТЧ Из МассивТЧ Цикл
		ЗаполнитьПредставлениеТабличнойЧастиПоСтроке(Форма, ИмяТЧ, СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеПериодовПоСтроке(Форма, СтрокаТабличнойЧасти)
	
	Для каждого ВидПериода Из СтрРазделить("ДатаПроизводства,СрокГодности",",") Цикл
		
		ПредставлениеПериода = ИнтеграцияВЕТИСКлиентСервер.ПредставлениеПериодаВЕТИС(
			СтрокаТабличнойЧасти[ВидПериода+"ТочностьЗаполнения"],
			СтрокаТабличнойЧасти[ВидПериода+"НачалоПериода"],
			СтрокаТабличнойЧасти[ВидПериода+"КонецПериода"],
			СтрокаТабличнойЧасти[ВидПериода+"Строка"]);
			
			Если СтрокаТабличнойЧасти.Операция = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление") Тогда
				ТекстНезаполненного = НСтр("ru = 'не заполнено'");
				ЦветНезаполненного = Форма.ЦветГиперссылкиОбычный;
			Иначе
				ТекстНезаполненного = НСтр("ru = 'указать'");
				ЦветНезаполненного = Форма.ЦветГиперссылкиОсобыйТекст;
			КонецЕсли;
			
		Если ПустаяСтрока(ПредставлениеПериода) Тогда
			СтрокаТабличнойЧасти["Надпись"+ВидПериода] =
				Новый ФорматированнаяСтрока(ТекстНезаполненного,,ЦветНезаполненного,,ВидПериода);
		Иначе
			СтрокаТабличнойЧасти["Надпись"+ВидПериода] =
				Новый ФорматированнаяСтрока(ПредставлениеПериода,,Форма.ЦветГиперссылкиОбычный,,ВидПериода);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеТабличнойЧастиПоСтроке(Форма, ИмяТЧ, СтрокаТабличнойЧасти)
	
	Объект = Форма.Объект;
	
	Строки =
		Объект[ИмяТЧ].НайтиСтроки(Новый Структура("ИдентификаторСтрокиТовары", СтрокаТабличнойЧасти.ИдентификаторСтроки));
	
	Если ИмяТЧ = "Производители" Тогда
		
		ТекстНадписи = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
			Строки,
			ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиПроизводителей(НСтр("ru = 'указать'")));
		Если Строки.Количество() Тогда
			СтрокаТабличнойЧасти.НадписьПроизводители = Новый ФорматированнаяСтрока(ТекстНадписи,,,,ИмяТЧ);
		Иначе
			СтрокаТабличнойЧасти.НадписьПроизводители = Новый ФорматированнаяСтрока(ТекстНадписи,,Форма.ЦветГиперссылкиОсобыйТекст,,ИмяТЧ);
		КонецЕсли;
			
	ИначеЕсли ИмяТЧ = "ПроизводственныеПартии" Тогда
		
		ТекстНадписи = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
			Строки,
			ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиПартий());
		СтрокаТабличнойЧасти.НадписьПроизводственныеПартии = Новый ФорматированнаяСтрока(ТекстНадписи,,,,ИмяТЧ);
		
	ИначеЕсли ИмяТЧ = "УпаковкиВЕТИС" Тогда
		
		ТекстНадписи = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
			Строки,
			ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиУпаковок());
		СтрокаТабличнойЧасти.НадписьУпаковкиШтрихкоды = Новый ФорматированнаяСтрока(ТекстНадписи,,,,ИмяТЧ);
			
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакТипЖивыеЖивотные(МассивСтрок = Неопределено)
	
	МассивПродукции = Объект.Товары.Выгрузить(,"Продукция").ВыгрузитьКолонку("Продукция");
	
	СоответствиеТипЖивыеЖивотные = ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(МассивПродукции);
	
	Если МассивСтрок = Неопределено Тогда
		МассивСтрок = Объект.Товары;
	КонецЕсли;
	
	Для каждого Строка Из МассивСтрок Цикл
		ИнтеграцияВЕТИСКлиентСервер.УстановитьПризнакТипЖивыеЖивотныеПоСтроке(
			Строка,
			СоответствиеТипЖивыеЖивотные[Строка.Продукция],
			Объект.Ссылка.Пустая());
		Если Строка.ТипЖивыеЖивотные Тогда
			Строка.НадписьСрокГодности = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьДанныеЗаписейСкладскогоЖурнала()
	
	ИмяКолонки = "ЗаписьСкладскогоЖурнала";
	Если СтатусВЕТИС = Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.Выполнен
		ИЛИ СтатусВЕТИС = Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ВыполненЧерезWeb Тогда
		ИмяКолонки = "ЗаписьСкладскогоЖурналаАрхив";
	КонецЕсли;
	
	ЗаписиСкладскогоЖурнала = Объект.Товары.Выгрузить(,ИмяКолонки).ВыгрузитьКолонку(ИмяКолонки);
	
	ДанныеЗаписей = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресДанныхЗаписейСкладскогоЖурнала) Тогда
		ДанныеЗаписей = ПолучитьИзВременногоХранилища(АдресДанныхЗаписейСкладскогоЖурнала);
		Для каждого Запись Из ЗаписиСкладскогоЖурнала Цикл
			Если ДанныеЗаписей.Получить(Запись) = Неопределено Тогда
				ДанныеЗаписей = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеЗаписей = Неопределено Тогда
		ДанныеЗаписей = СтруктураДанныхЗаписейСкладскогоЖурнала(ЗаписиСкладскогоЖурнала);
	КонецЕсли;
	
	АдресДанныхЗаписейСкладскогоЖурнала = ПоместитьВоВременноеХранилище(ДанныеЗаписей, УникальныйИдентификатор);
	
	Возврат ДанныеЗаписей;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьКонтрольныеРеквизитыСравненияПоСтроке(СтрокаТабличнойЧасти, ИзменяемыеПоля = "")
	
	Если НЕ ПустаяСтрока(ИзменяемыеПоля) Тогда
		ПоляПроверки = СтрРазделить(ИзменяемыеПоля, ",");
	Иначе
		ПоляПроверки = МассивКонтролируемыхПолей();
	КонецЕсли;
	
	Для каждого Поле Из ПоляПроверки Цикл
		
		КонтрольныйРеквизит = Поле+"НеСовпадает";
		
		СтрокаТабличнойЧасти[КонтрольныйРеквизит] = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонтрольныеРеквизитыСравненияПоСтроке(СтрокаТабличнойЧасти, ИзменяемыеПоля = "")
	
	Если СтрокаТабличнойЧасти.Операция = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение") Тогда
		
		ОбновитьКонтрольныеРеквизитыСравненияПоСтрокеНаСервере(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), ИзменяемыеПоля);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтрольныеРеквизитыСравненияПоСтрокеНаСервере(ИдентификаторСтроки, ИзменяемыеПоля = "")
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ДанныеЗаписейСкладскогоЖурнала = ПолучитьИзВременногоХранилища(АдресДанныхЗаписейСкладскогоЖурнала);
	
	ЗаписьСкладскогоЖурнала = ЗаписьСкладскогоЖурналаПоСтроке(ЭтаФорма, СтрокаТабличнойЧасти);
	
	ДанныеЗаписиЖурнала = ДанныеЗаписейСкладскогоЖурнала[ЗаписьСкладскогоЖурнала];
	
	Если НЕ ПустаяСтрока(ИзменяемыеПоля) Тогда
		ПоляПроверки = СтрРазделить(ИзменяемыеПоля, ",");
	Иначе
		ПоляПроверки = МассивКонтролируемыхПолей();
	КонецЕсли;
	
	Для каждого Поле Из ПоляПроверки Цикл
		
		КонтрольныйРеквизит = Поле+"НеСовпадает";
		
		СтрокаТабличнойЧасти[КонтрольныйРеквизит] = Ложь;
		
		Если ДанныеЗаписиЖурнала = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.Операция <> Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение Тогда
			Продолжить;
		КонецЕсли;
		
		Если Поле = "ДатаПроизводства" ИЛИ Поле = "СрокГодности" Тогда
			
			Для каждого Постфикс Из СтрРазделить("Строка,ТочностьЗаполнения,НачалоПериода,КонецПериода",",") Цикл
				СтрокаТабличнойЧасти[КонтрольныйРеквизит] = Макс(СтрокаТабличнойЧасти[КонтрольныйРеквизит],
																	СтрокаТабличнойЧасти[Поле+Постфикс] <> ДанныеЗаписиЖурнала[Поле+Постфикс]);
			КонецЦикла;
			
		ИначеЕсли Поле = "УпаковкиШтрихкоды" Тогда
			
			Отбор = Новый Структура("ИдентификаторСтрокиТовары", СтрокаТабличнойЧасти.ИдентификаторСтроки);
			
			ТаблицаУпаковки = Объект["УпаковкиВЕТИС"].Выгрузить(Отбор);
			ТаблицаУпаковки.Сортировать("НомерСтроки");
			
			Если ТаблицаУпаковки.Количество() <> ДанныеЗаписиЖурнала["УпаковкиВЕТИС"].Количество() Тогда
				СтрокаТабличнойЧасти[КонтрольныйРеквизит] = Истина;
				Продолжить;
			КонецЕсли;
			
			СтруктураРеквизитовУпаковки  = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныеУпаковкиВЕТИС();
			СтруктураРеквизитовУпаковки.Удалить("ИдентификаторСтроки");
			СтруктураРеквизитовШтрихкоды = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныхШтрихкодыУпаковок();
			СтруктураРеквизитовШтрихкоды.Удалить("ИдентификаторСтроки");
			
			Для Ит = 0 По ТаблицаУпаковки.Количество()-1 Цикл
				
				Если НЕ СравнитьСтрокиКоллекцииПоСтруктуреКлючевыхПолей(
							ТаблицаУпаковки[Ит],
							ДанныеЗаписиЖурнала["УпаковкиВЕТИС"][Ит],
							СтруктураРеквизитовУпаковки) Тогда
						
					СтрокаТабличнойЧасти[КонтрольныйРеквизит] = Истина;
					Прервать;
					
				КонецЕсли;
				
				Отбор = Новый Структура("ИдентификаторСтроки", ТаблицаУпаковки[Ит].ИдентификаторСтроки);
				
				ТаблицаШтрихкоды = Объект["ШтрихкодыУпаковок"].Выгрузить(Отбор);
				ТаблицаШтрихкоды.Сортировать("НомерСтроки");
				
				Если ТаблицаШтрихкоды.Количество() <> ДанныеЗаписиЖурнала["ШтрихкодыУпаковок"].Количество() Тогда
					СтрокаТабличнойЧасти[КонтрольныйРеквизит] = Истина;
					Прервать;
				КонецЕсли;
				
				Для Кт = 0 По ТаблицаШтрихкоды.Количество()-1 Цикл
					Если НЕ СравнитьСтрокиКоллекцииПоСтруктуреКлючевыхПолей(
								ТаблицаШтрихкоды[Кт],
								ДанныеЗаписиЖурнала["ШтрихкодыУпаковок"][Кт],
								СтруктураРеквизитовШтрихкоды) Тогда
								
						СтрокаТабличнойЧасти[КонтрольныйРеквизит] = Истина;
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли Поле = "Производители" ИЛИ Поле = "ПроизводственныеПартии" Тогда
			
			Отбор = Новый Структура("ИдентификаторСтрокиТовары", СтрокаТабличнойЧасти.ИдентификаторСтроки);
			
			ТаблицаДокумента = Объект[Поле].Выгрузить(Отбор);
			ТаблицаДокумента.Сортировать("НомерСтроки");
			
			Если ТаблицаДокумента.Количество() <> ДанныеЗаписиЖурнала[Поле].Количество() Тогда
				СтрокаТабличнойЧасти[КонтрольныйРеквизит] = Истина;
				Продолжить;
			КонецЕсли;
			
			СтруктураРеквизитовТЧ = СтруктураДанныхТабличнойЧасти(Поле);
			
			Если Поле = "Производители" Тогда
				СтруктураРеквизитовТЧ.Удалить("НомераПредприятий");
			КонецЕсли;
			
			Для Ит = 0 По ТаблицаДокумента.Количество()-1 Цикл
				Если НЕ СравнитьСтрокиКоллекцииПоСтруктуреКлючевыхПолей(
							ТаблицаДокумента[Ит],
							ДанныеЗаписиЖурнала[Поле][Ит],
							СтруктураРеквизитовТЧ) Тогда
						
					СтрокаТабличнойЧасти[КонтрольныйРеквизит] = Истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			СтрокаТабличнойЧасти[КонтрольныйРеквизит] = СтрокаТабличнойЧасти[Поле] <> ДанныеЗаписиЖурнала[Поле];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанныеТабличныхЧастейПоСтроке(Форма, СтрокаТабличнойЧасти, СписокТЧ = "")
	
	Объект = Форма.Объект;
	
	МассивТЧ = МассивТабличныхЧастейДокумента(СписокТЧ);
	
	Для каждого ИмяТЧ Из МассивТЧ Цикл
		
		Если ИмяТЧ = "УпаковкиВЕТИС" Тогда
			ИнтеграцияВЕТИСКлиентСервер.ОчиститьДанныеУпаковокШтрихкодовПоСтроке(Объект, СтрокаТабличнойЧасти.ИдентификаторСтроки);
		Иначе
			ОчиститьДанныеТабличнойЧастиПоСтроке(Форма, СтрокаТабличнойЧасти, ИмяТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанныеТабличнойЧастиПоСтроке(Форма, СтрокаТабличнойЧасти, ИмяТЧ)
	
	Объект = Форма.Объект;
	
	СтруктураПоиска = Новый Структура("ИдентификаторСтрокиТовары", СтрокаТабличнойЧасти.ИдентификаторСтроки);
	
	НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		Объект[ИмяТЧ].Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДанныеТабличныхЧастейПоСтроке(СтрокаТабличнойЧасти, ИдентификторСтрокиИсточника, СписокТЧ = "")

	МассивТЧ = МассивТабличныхЧастейДокумента(СписокТЧ);
	
	Для каждого ИмяТЧ Из МассивТЧ Цикл
		
		Если ИмяТЧ = "УпаковкиВЕТИС" Тогда
			ИнтеграцияВЕТИСКлиентСервер.СкопироватьДанныеУпаковокШтрихкодовПоСтроке(
				Объект,
				СтрокаТабличнойЧасти.ИдентификаторСтроки,
				ИдентификторСтрокиИсточника);
		Иначе
			СкопироватьДанныеТабличнойЧастиПоСтроке(СтрокаТабличнойЧасти, ИдентификторСтрокиИсточника, ИмяТЧ);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДанныеТабличнойЧастиПоСтроке(СтрокаТабличнойЧасти, ИдентификторСтрокиИсточника, ИмяТЧ)
	
	СтруктураПоиска = Новый Структура("ИдентификаторСтрокиТовары", ИдентификторСтрокиИсточника);
	
	НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		НоваяСтрока = Объект[ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ИдентификаторСтрокиТовары = СтрокаТабличнойЧасти.ИдентификаторСтроки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивТабличныхЧастейДокумента(СписокТЧ)
	
	Возврат СтрРазделить(?(ПустаяСтрока(СписокТЧ),"УпаковкиВЕТИС,Производители,ПроизводственныеПартии",СписокТЧ),",");
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВводПериода(ВидПериода, РежимТолькоПросмотр = Ложь)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаТабличнойЧасти", СтрокаТабличнойЧасти);
	ДополнительныеПараметры.Вставить("ВидПериода", ВидПериода);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьВводПериодаЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	СписокДоступнойТочности = ИнтеграцияВЕТИСКлиентСервер.ТочностьДатПродукцииИзСвязаннойТаблицы(
		СтрокаТабличнойЧасти.Продукция,
		ТочностьДатПродукции,
		ВидПериода);
	
	Если ВидПериода = "СрокГодности" Тогда
		ИнтеграцияВЕТИСКлиент.ОткрытьФормуРедактированияСрокаГодности(ЭтаФорма,
			СтрокаТабличнойЧасти,
			ОбработчикОповещения,
			РежимТолькоПросмотр,
			СписокДоступнойТочности);
	Иначе
		ИнтеграцияВЕТИСКлиент.ОткрытьФормуРедактированияДатыПроизводства(ЭтаФорма,
			СтрокаТабличнойЧасти,
			ОбработчикОповещения,
			РежимТолькоПросмотр, 
			СписокДоступнойТочности);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводПериодаЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		СтрокаТабличнойЧасти = ДополнительныеПараметры.СтрокаТабличнойЧасти;
		ВидПериода = ДополнительныеПараметры.ВидПериода;
		
		Если (ДополнительныеПараметры.ВидПериода = "ДатаПроизводства"
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаПроизводстваНачалоПериода)
			И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СрокГодностиНачалоПериода))
		Или (ДополнительныеПараметры.ВидПериода = "СрокГодности"
			И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаПроизводстваНачалоПериода)
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СрокГодностиНачалоПериода))Тогда
			
			РеквизитыСтрокиТовары = Новый Структура("Продукция, ДатаПроизводстваНачалоПериода, СрокГодностиНачалоПериода, СрокГодностиТочностьЗаполнения, ДатаПроизводстваТочностьЗаполнения");
			ЗаполнитьЗначенияСвойств(РеквизитыСтрокиТовары, СтрокаТабличнойЧасти);
			ЗаполнитьДатыПоСтатистикеНаСервереБезКонтекста(РеквизитыСтрокиТовары);
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, РеквизитыСтрокиТовары);
			
		КонецЕсли;
		
		ЗаполнитьПредставлениеПериодовПоСтроке(ЭтаФорма, СтрокаТабличнойЧасти);
		
		ОбновитьКонтрольныеРеквизитыСравненияПоСтроке(СтрокаТабличнойЧасти, ВидПериода);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДатыПоСтатистикеНаСервереБезКонтекста(РеквизитыСтрокиТовары)
	
	ДанныеПоСрокамГодности = ЗаполнениеОбъектовПоСтатистикеВЕТИС.СрокГодностиПоЗаписиЖурнала(РеквизитыСтрокиТовары.Продукция);
	
	ЗаполнениеДокументовВЕТИС.ЗаполнитьДатыПоСтатистике(РеквизитыСтрокиТовары, ДанныеПоСрокамГодности);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьУпаковкиШтрихкодыНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		СтрокаТабличнойЧасти = ДополнительныеПараметры.СтрокаТабличнойЧасти;
		
		ИнтеграцияВЕТИСКлиентСервер.ЗаполнитьДанныеУпаковокШтрихкодовПоСтроке(Объект, СтрокаТабличнойЧасти.ИдентификаторСтроки, РезультатЗакрытия);
		
		ЗаполнитьПредставлениеТабличнойЧастиПоСтроке(ЭтаФорма, "УпаковкиВЕТИС", СтрокаТабличнойЧасти);
		
		ОбновитьКонтрольныеРеквизитыСравненияПоСтроке(СтрокаТабличнойЧасти, "УпаковкиШтрихкоды");
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияТабличнойЧастиПоСтроке(ИмяФормы, ИмяТЧ, СтрокаТабличнойЧасти, РежимТолькоПросмотр = Ложь)
	
	Строки = Новый Массив;
	НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("ИдентификаторСтрокиТовары", СтрокаТабличнойЧасти.ИдентификаторСтроки));
	Для каждого Строка Из НайденныеСтроки Цикл
		ДанныеСтроки = СтруктураДанныхТабличнойЧасти(ИмяТЧ);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Строка);
		Строки.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(ИмяТЧ, Строки);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Макс(ТолькоПросмотр, РежимТолькоПросмотр));
	
	Если СтрокаТабличнойЧасти.Операция = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление")
		Или СтрокаТабличнойЧасти.Операция = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение") Тогда
		ПараметрыФормы.Вставить("СтранаПроизводства", СтрокаТабличнойЧасти.СтранаПроизводства);
		ПараметрыФормы.Вставить("Продукция", СтрокаТабличнойЧасти.Продукция);
		ПараметрыФормы.Вставить("МаксимальноеКоличествоПартий", 1);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТЧ",         ИмяТЧ);
	ДополнительныеПараметры.Вставить("СтрокаТабличнойЧасти", СтрокаТабличнойЧасти);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
				"ОткрытьФормуРедактированияТабличнойЧастиПоСтрокеЗавершение",
				ЭтотОбъект,
				ДополнительныеПараметры);
	
	ОткрытьФорму(
			ИмяФормы,
			ПараметрыФормы,
			ЭтотОбъект,,,, 
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияТабличнойЧастиПоСтрокеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
		СтрокаТабличнойЧасти = ДополнительныеПараметры.СтрокаТабличнойЧасти;
		
		ОчиститьДанныеТабличнойЧастиПоСтроке(ЭтаФорма, СтрокаТабличнойЧасти, ИмяТЧ);
		
		Для каждого Строка Из РезультатЗакрытия Цикл
			НоваяСтрока = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ИдентификаторСтрокиТовары = СтрокаТабличнойЧасти.ИдентификаторСтроки;
		КонецЦикла;
		
		ЗаполнитьПредставлениеТабличнойЧастиПоСтроке(ЭтаФорма, ИмяТЧ, СтрокаТабличнойЧасти);
		
		ОбновитьКонтрольныеРеквизитыСравненияПоСтроке(СтрокаТабличнойЧасти, ИмяТЧ);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДанныхТабличнойЧасти(ИмяТЧ)
	
	Результат = Новый Структура;
	
	Если ИмяТЧ = "Производители" Тогда
		
		Результат = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныхПроизводители();
		
	ИначеЕсли ИмяТЧ = "ПроизводственныеПартии" Тогда
		
		Результат = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныхПроизводственныеПартии();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПроизвольнаяПродукцияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		
		СтрокаТабличнойЧасти = ДополнительныеПараметры.СтрокаТабличнойЧасти;
		
		СтрокаТабличнойЧасти.Продукция = РезультатЗакрытия;
		
		НастроитьВидимостьДоступностьЭлементовПоСтроке(СтрокаТабличнойЧасти);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьДоступностьЭлементовПоСтроке(ТекущиеДанные)
	
	Добавление = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление");
	Удаление = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление");
	
	ЭлементыТолькоПросмотр = (ТекущиеДанные.Операция = Удаление)
		ИЛИ (НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗаписьСкладскогоЖурнала) И ТекущиеДанные.Операция <> Добавление)
		ИЛИ СтатусВЕТИС = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.Выполнен")
		ИЛИ СтатусВЕТИС = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ВыполненЧерезWeb");
	
	ТипЖивыеЖивотные = ТекущиеДанные.ТипЖивыеЖивотные;
	
	Элементы.ТоварыПанельСкоропортящаясяПродукция.ТолькоПросмотр   = ЭлементыТолькоПросмотр ИЛИ ТипЖивыеЖивотные;
	Элементы.ТоварыСкоропортящаясяПродукция.ТолькоПросмотр         = ЭлементыТолькоПросмотр ИЛИ ТипЖивыеЖивотные;
	Элементы.ТоварыПанельНизкокачественнаяПродукция.ТолькоПросмотр = Истина;
	Элементы.ТоварыНизкокачественнаяПродукция.ТолькоПросмотр       = Истина;
	
	Элементы.ТоварыПанельНадписьДатаПроизводства.ТолькоПросмотр       = ЭлементыТолькоПросмотр;
	Элементы.ТоварыПанельНадписьСрокГодности.ТолькоПросмотр           = ЭлементыТолькоПросмотр;
	Элементы.ТоварыПанельНадписьУпаковкиШтрихкоды.ТолькоПросмотр      = ЭлементыТолькоПросмотр;
	Элементы.ТоварыПанельНадписьПроизводители.ТолькоПросмотр          = ЭлементыТолькоПросмотр;
	Элементы.ТоварыПанельНадписьПроизводственныеПартии.ТолькоПросмотр = ЭлементыТолькоПросмотр;
	
	Элементы.ТоварыНадписьДатаПроизводства.ТолькоПросмотр  = ЭлементыТолькоПросмотр;
	Элементы.ТоварыНадписьСрокГодности.ТолькоПросмотр      = ЭлементыТолькоПросмотр;
	Элементы.ТоварыНадписьУпаковкиШтрихкоды.ТолькоПросмотр = ЭлементыТолькоПросмотр;
	
	ОтображатьСрокГодностиПоТочностиДаты = Истина;
	СписокДоступнойТочности = ИнтеграцияВЕТИСКлиентСервер.ТочностьДатПродукцииИзСвязаннойТаблицы(ТекущиеДанные.Продукция, ТочностьДатПродукции, "СрокГодности");
	Если СписокДоступнойТочности.Количество() = 1
		И ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(СписокДоступнойТочности[0].Значение) Тогда
		
		ОтображатьСрокГодностиПоТочностиДаты = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаТоварыПанельСрокГодности.Видимость      = Не ТипЖивыеЖивотные И ОтображатьСрокГодностиПоТочностиДаты;
	Элементы.ТоварыПанельНадписьДатаПроизводства.Заголовок = ИнтеграцияВЕТИСКлиентСервер.ПредставлениеПоляДатаПроизводства(ТипЖивыеЖивотные);
	
	Элементы.ТоварыСтранаПроизводства.ТолькоПросмотр = ЭлементыТолькоПросмотр
		ИЛИ ТекущиеДанные.Операция = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение");
	Элементы.ТоварыПанельСтранаПроизводства.ТолькоПросмотр = ЭлементыТолькоПросмотр
		ИЛИ ТекущиеДанные.Операция = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение");
	
	Элементы.ГруппаТоварыПанельУпаковкиШтрихкоды.Видимость = Не ТипЖивыеЖивотные;
	
	Элементы.ТоварыПанельГруппаОшибка.Видимость = ТекущиеДанные.ЕстьОшибки;
	
КонецПроцедуры

&НаСервере
Функция СтруктураДанныхЗаписейСкладскогоЖурнала(Ссылки)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	Запрос.Текст = Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ТекстЗапросаДанныеЗаписейСкладскогоЖурнала();
	
	СписокТЧ = "УпаковкиВЕТИС,ШтрихкодыУпаковок,Производители,ПроизводственныеПартии";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДанных = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныхЗаписиСкладскогоЖурнала();
		
		СтруктураДанных.Вставить("КоличествоВЕТИС");
		СтруктураДанных.Вставить("ЕдиницаИзмеренияВЕТИС");
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка, ,СписокТЧ);
		
		СтруктураДанных.КоличествоВЕТИС = Выборка.КоличествоВЕТИС;
		
		Для каждого ИмяТЧ Из СтрРазделить(СписокТЧ,",") Цикл
			СтруктураДанных.Вставить(ИмяТЧ, Выборка[ИмяТЧ].Выгрузить());
		КонецЦикла;
		
		Результат.Вставить(Выборка.Ссылка, СтруктураДанных);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивКонтролируемыхПолей()
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Продукция");
	Реквизиты.Добавить("КоличествоВЕТИС");
	Реквизиты.Добавить("ЕдиницаИзмеренияВЕТИС");
	Реквизиты.Добавить("СкоропортящаясяПродукция");
	Реквизиты.Добавить("НизкокачественнаяПродукция");
	
	Реквизиты.Добавить("ДатаПроизводства");
	Реквизиты.Добавить("СрокГодности");
	
	Реквизиты.Добавить("УпаковкиШтрихкоды");
	Реквизиты.Добавить("Производители");
	Реквизиты.Добавить("ПроизводственныеПартии");
	
	Возврат Реквизиты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СравнитьСтрокиКоллекцииПоСтруктуреКлючевыхПолей(Строка1, Строка2, СтруктураПолей)
	
	Для каждого КлючИЗначение Из СтруктураПолей Цикл
		Если Строка1[КлючИЗначение.Ключ] <> Строка2[КлючИЗначение.Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораПродукции(ТекущаяСтрока)
	
	СписокВыбораНоменклатура = Элементы.ТоварыПродукция.СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	СписокВыбораНоменклатура.ЗагрузитьЗначения(ТекущаяСтрока.НоменклатураДляВыбора.ВыгрузитьЗначения());
	
	Если Не ЗапрещенаПродукцияТретьегоУровня(ТекущаяСтрока.ЗаписьСкладскогоЖурнала, ТекущаяСтрока.Операция) Тогда
		
		СписокВыбораНоменклатура.Вставить(
			0,
			ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.ПустаяСсылка"),
			НСтр("ru='<Произвольный>'"));
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораНоменклатуры(ТекущаяСтрока)
	
	СписокВыбораНоменклатура = Элементы.ТоварыНоменклатура.СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	НайденныеСтроки = НоменклатураДляВыбора.НайтиСтроки(Новый Структура("Продукция, ЗаписьСкладскогоЖурнала",
		ТекущаяСтрока.Продукция,
		ТекущаяСтрока.ЗаписьСкладскогоЖурнала));
		
	НоменклатураКэш = Неопределено;
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		Если СтрокаТЧ.Номенклатура <> НоменклатураКэш Тогда
			СписокВыбораНоменклатура.Добавить(СтрокаТЧ.Номенклатура);
			НоменклатураКэш = СтрокаТЧ.Номенклатура;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораХарактеристика(ТекущаяСтрока)
	
	СписокВыбораХарактеристика = Элементы.ТоварыХарактеристика.СписокВыбора;
	СписокВыбораХарактеристика.Очистить();
	
	НайденныеСтроки = НоменклатураДляВыбора.НайтиСтроки(Новый Структура("Продукция, Номенклатура, ЗаписьСкладскогоЖурнала",
		ТекущаяСтрока.Продукция,
		ТекущаяСтрока.Номенклатура,
		ТекущаяСтрока.ЗаписьСкладскогоЖурнала));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		СписокВыбораХарактеристика.Добавить(СтрокаТЧ.Характеристика);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ТекущаяСтрока);
	
	СтрокаТабличнойЧасти.Номенклатура = Результат;
	
	НоменклатураПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОбработкаПодбораНоменклатурыЗавершениеНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораНоменклатурыЗавершениеНаСервере(ВыбранноеЗначение)
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЗаполнитьПродукциюВЕТИС          = Истина;
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус   = ПараметрыУказанияСерий <> Неопределено;
	
	ПараметрыЗаполнения.Вставить("ДобавленныеСтроки", Новый Массив);
	
	СобытияФормВЕТИСПереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект,
		ВыбранноеЗначение,
		ПараметрыЗаполнения,
		ПараметрыУказанияСерий);
		
	ЗаполнитьПризнакТипЖивыеЖивотные(ПараметрыЗаполнения.ДобавленныеСтроки);
		
	Для каждого Строка Из ПараметрыЗаполнения.ДобавленныеСтроки Цикл
		УстановитьЗначенияПоУмолчаниюПоСтроке(Строка,"Количество,КоличествоВЕТИС");
		Строка.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		Строка.Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление;
		Строка.КоличествоИзменение = Строка.Количество;
		Строка.КоличествоИзменениеВЕТИС = Строка.КоличествоВЕТИС;
		ЗаполнитьПредставлениеПериодовПоСтроке(ЭтаФорма, Строка);
		ЗаполнитьПредставленияТабличныхЧастейПоСтроке(ЭтаФорма, Строка);
	КонецЦикла;
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(ТекущиеДанные)
	
	ОчиститьСообщения();
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС            = ТекущиеДанные.ЕдиницаИзмеренияВЕТИС;
	Если РедактированиеФормыНедоступно Тогда
		ВведенноеЗначение = ТекущиеДанные.Количество;
		
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
		
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличестваВЕТИС(ЭтотОбъект, ТекущиеДанные,
			КэшированныеЗначения, ПараметрыЗаполнения);
			
		Если НЕ ВведенноеЗначение = ТекущиеДанные.Количество Тогда
			ТекстСообщения = НСтр( "ru = 'Документ был передан в информационную систему ВетИС.
				|Количество номенклатуры должно соответствовать количеству ВетИС с учетом коэффициентов пересчета.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
		
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличества(ЭтотОбъект, ТекущиеДанные,
			КэшированныеЗначения, ПараметрыЗаполнения);
	КонецЕсли;
		
	ПересчитатьЗависимуюГруппуКоличественныхРеквизитов(ТекущиеДанные, "Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоВЕТИСПриИзменении(ТекущиеДанные)
	
	ОчиститьСообщения();
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС              = ТекущиеДанные.ЕдиницаИзмеренияВЕТИС;
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличестваВЕТИС(ЭтотОбъект, ТекущиеДанные,
		КэшированныеЗначения, ПараметрыЗаполнения);
		
	ПересчитатьЗависимуюГруппуКоличественныхРеквизитов(ТекущиеДанные, "Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоИзменениеПриИзменении(ТекущиеДанные)
	
	ОчиститьСообщения();
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС            = ТекущиеДанные.ЕдиницаИзмеренияВЕТИС;
	ПараметрыЗаполнения.Суффикс                          = "Изменение";
	
	Если РедактированиеФормыНедоступно Тогда
		ВведенноеЗначение = ТекущиеДанные.КоличествоИзменение;
		
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
		
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличестваВЕТИС(ЭтотОбъект, ТекущиеДанные,
			КэшированныеЗначения, ПараметрыЗаполнения);
			
		Если НЕ ВведенноеЗначение = ТекущиеДанные.КоличествоИзменение Тогда
			ТекстСообщения = НСтр( "ru = 'Документ был передан в информационную систему ВетИС.
				|Количество номенклатуры должно соответствовать количеству ВетИС с учетом коэффициентов пересчета.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
		
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличества(ЭтотОбъект, ТекущиеДанные,
			КэшированныеЗначения, ПараметрыЗаполнения);
	КонецЕсли;
		
	ПересчитатьЗависимуюГруппуКоличественныхРеквизитов(ТекущиеДанные, "КоличествоИзменение");
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоИзменениеВЕТИСПриИзменении(ТекущиеДанные)
	
	ОчиститьСообщения();
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС              = ТекущиеДанные.ЕдиницаИзмеренияВЕТИС;
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
	ПараметрыЗаполнения.Суффикс                            = "Изменение";
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличестваВЕТИС(ЭтотОбъект, ТекущиеДанные,
		КэшированныеЗначения, ПараметрыЗаполнения);
		
	ПересчитатьЗависимуюГруппуКоличественныхРеквизитов(ТекущиеДанные, "КоличествоИзменение");
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияВЕТИСПриИзменении(ТекущиеДанные)
	
	ОчиститьСообщения();
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
	ПараметрыЗаполнения.Суффикс = "Изменение";
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииЕдиницыИзмеренияВЕТИС(ЭтотОбъект, ТекущиеДанные,
		КэшированныеЗначения, ПараметрыЗаполнения);
	
	ЕдиницаИзмеренияВЕТИСПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ЕдиницаИзмеренияВЕТИСПриИзмененииНаСервере(ИдентификаторСтроки)
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ЗаполнитьКоличествоСтароеВЕТИСПоСтроке(ИдентификаторСтроки);
	
	ПересчитатьЗависимуюГруппуКоличественныхРеквизитов(СтрокаТабличнойЧасти, "КоличествоИзменение");
	
	ОбновитьКонтрольныеРеквизитыСравненияПоСтрокеНаСервере(ИдентификаторСтроки, "Продукция,КоличествоВЕТИС,ЕдиницаИзмеренияВЕТИС");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоСтароеВЕТИСПоСтроке(ИдентификаторСтроки, Знач ДанныеЗаписиЖурнала = Неопределено)
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ДанныеЗаписиЖурнала = Неопределено Тогда
		ДанныеЗаписейСкладскогоЖурнала = ПолучитьИзВременногоХранилища(АдресДанныхЗаписейСкладскогоЖурнала);
		ЗаписьСкладскогоЖурнала        = ЗаписьСкладскогоЖурналаПоСтроке(ЭтаФорма, СтрокаТабличнойЧасти);
		ДанныеЗаписиЖурнала            = ДанныеЗаписейСкладскогоЖурнала[ЗаписьСкладскогоЖурнала];
		Если ДанныеЗаписиЖурнала = Неопределено Тогда
			СтрокаТабличнойЧасти.КоличествоСтарое      = 0;
			СтрокаТабличнойЧасти.КоличествоСтароеВЕТИС = 0;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если КоэффициентыПересчета = Неопределено Тогда
		КоэффициентыПересчета = Новый Структура("Коэффициенты", Новый Соответствие);
	КонецЕсли;
	
	Коэффициенты     = КоэффициентыПересчета.Коэффициенты;
	КлючКоэффициента = КлючКэшаУпаковки(СтрокаТабличнойЧасти.ЕдиницаИзмеренияВЕТИС, ДанныеЗаписиЖурнала.ЕдиницаИзмеренияВЕТИС);
	Коэффициент      = Коэффициенты[КлючКоэффициента];
	
	Если Коэффициент = Неопределено Тогда
		
		Коэффициент = ИнтеграцияВЕТИС.КоэффициентЕдиницыИзмеренияВЕТИС(
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияВЕТИС,
			ДанныеЗаписиЖурнала.ЕдиницаИзмеренияВЕТИС);
			
		Коэффициенты.Вставить(КлючКоэффициента, Коэффициент);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.КоличествоСтароеВЕТИС = ДанныеЗаписиЖурнала.КоличествоВЕТИС * Коэффициент;
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС              = СтрокаТабличнойЧасти.ЕдиницаИзмеренияВЕТИС;
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
	ПараметрыЗаполнения.Суффикс                            = "Старое";
	
	СобытияФормВЕТИСПереопределяемый.ПриИзмененииКоличестваВЕТИС(
		ЭтотОбъект,
		СтрокаТабличнойЧасти,
		Неопределено,
		ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияПоУмолчаниюПоСтроке(СтрокаТабличнойЧасти, ИсключаяРеквизиты = "")
	
	Если ЗначениеЗаполнено(ИсключаяРеквизиты) Тогда
		ИсключаемыеРеквизиты = Новый Структура(ИсключаяРеквизиты);
		ЗаполнитьЗначенияСвойств(ИсключаемыеРеквизиты, СтрокаТабличнойЧасти, ИсключаяРеквизиты);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Количество               = 0;
	СтрокаТабличнойЧасти.КоличествоВЕТИС          = 0;
	СтрокаТабличнойЧасти.КоличествоИзменение      = 0;
	СтрокаТабличнойЧасти.КоличествоИзменениеВЕТИС = 0;
	СтрокаТабличнойЧасти.КоличествоСтарое         = 0;
	СтрокаТабличнойЧасти.КоличествоСтароеВЕТИС    = 0;
	
	СтрокаТабличнойЧасти.ДатаПроизводстваСтрока             = Неопределено;
	СтрокаТабличнойЧасти.ДатаПроизводстваТочностьЗаполнения = Неопределено;
	СтрокаТабличнойЧасти.ДатаПроизводстваНачалоПериода      = Неопределено;
	СтрокаТабличнойЧасти.ДатаПроизводстваКонецПериода       = Неопределено;
	
	СтрокаТабличнойЧасти.СрокГодностиСтрока                 = Неопределено;
	СтрокаТабличнойЧасти.СрокГодностиТочностьЗаполнения     = Неопределено;
	СтрокаТабличнойЧасти.СрокГодностиНачалоПериода          = Неопределено;
	СтрокаТабличнойЧасти.СрокГодностиКонецПериода           = Неопределено;
	
	СтрокаТабличнойЧасти.СкоропортящаясяПродукция           = Неопределено;
	СтрокаТабличнойЧасти.НизкокачественнаяПродукция         = Неопределено;
	
	СтрокаТабличнойЧасти.СтранаПроизводства = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	
	СтрокаТабличнойЧасти.ДатаПроизводстваТочностьЗаполнения =
		ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ");
	СтрокаТабличнойЧасти.СрокГодностиТочностьЗаполнения =
		ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ");
		
	Если ЗначениеЗаполнено(ИсключаяРеквизиты) Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ИсключаемыеРеквизиты, ИсключаяРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписьСкладскогоЖурналаДанныеВыбора(Знач Текст, Знач ПараметрыПолученияДанных)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 51
	|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.Ссылка КАК Ссылка,
	|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.ОстаткиПродукцииВЕТИС КАК ОстаткиПродукцииВЕТИС
	|ГДЕ
	|	ОстаткиПродукцииВЕТИС.КоличествоВЕТИС > 0
	|	И ОстаткиПродукцииВЕТИС.ХозяйствующийСубъект = &ХозяйствующийСубъект
	|	И ОстаткиПродукцииВЕТИС.Предприятие = &Предприятие
	|	И ОстаткиПродукцииВЕТИС.Продукция = &Продукция
	|	И ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.НомерЗаписи ПОДОБНО &СтрокаПоиска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.Представление";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", Текст + "%");
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", ПараметрыПолученияДанных.Отбор.ХозяйствующийСубъект);
	Запрос.УстановитьПараметр("Предприятие", ПараметрыПолученияДанных.Отбор.Предприятие);
	Запрос.УстановитьПараметр("Продукция", ПараметрыПолученияДанных.Отбор.Продукция);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
	
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
	
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаписьСкладскогоЖурналаПоСтроке(Форма, СтрокаТабличнойЧасти)
	
	Результат = СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурнала;
	
	Если Форма.СтатусВЕТИС = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.Выполнен")
		ИЛИ Форма.СтатусВЕТИС = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ВыполненЧерезWeb") Тогда
		
		Результат = СтрокаТабличнойЧасти.ЗаписьСкладскогоЖурналаАрхив;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ЕдиницыИзмерения

&НаСервереБезКонтекста
Функция ДоступныеЕдиницыИзменения(Продукция)
	
	Возврат Новый Массив(ИнтеграцияВЕТИСПовтИсп.ДоступныеЕдиницыИзменения(Продукция));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючКэшаУпаковки(ЕдиницаИзмеренияБазовая, ЕдиницаИзмерения)
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияБазовая) Тогда
		КлючЕдиницаИзмеренияБазовая = Строка(ЕдиницаИзмеренияБазовая.УникальныйИдентификатор());
	Иначе
		КлючЕдиницаИзмеренияБазовая = "ПустоеЗначение";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		КлючЕдиницаИзмерения = Строка(ЕдиницаИзмерения.УникальныйИдентификатор());
	Иначе
		КлючЕдиницаИзмерения = "ПустоеЗначение";
	КонецЕсли;
	
	Возврат КлючЕдиницаИзмеренияБазовая + КлючЕдиницаИзмерения;
	
КонецФункции

#КонецОбласти

#Область Статус

&НаСервере
Процедура ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект)
	
	Если ПараметрыОбновленияСтатуса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ТекущийОбъект.Ссылка,
		ПараметрыОбновленияСтатуса);
	
	ПараметрыОбновленияСтатуса = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусВЕТИС()
	
	МенеджерОбъекта            = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ОперацииДопустимыхДействий = МенеджерОбъекта.ОперацииДопустимыхДействий();
	
	СтатусВЕТИС = МенеджерОбъекта.СтатусПоУмолчанию();
	
	ДальнейшееДействие = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию());
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И ПараметрыОбновленияСтатуса = Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовВЕТИС КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияВЕТИС.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусВЕТИС = Выборка.Статус;
			
			ДальнейшееДействие = Новый Массив;
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбновленияСтатуса <> Неопределено Тогда
		
		СтатусВЕТИС = ПараметрыОбновленияСтатуса.НовыйСтатус;
		
		ДальнейшееДействие = Новый Массив;
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие1);
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие2);
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие3);
		
	КонецЕсли;
	
	АктНесоответствия = "НеТребуется";
	Если СтатусВЕТИС <> Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ВыполненЧерезWeb Тогда
		Если ЗначениеЗаполнено(Объект.НомерАктаНесоответствия) Тогда
			АктНесоответствия = "Оформлен";
		Иначе
			АктНесоответствия = "Требуется";
			ДальнейшееДействие = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ЗаполнитеАктНесоответствия);
		КонецЕсли;
		
		Если АктНесоответствия = "Оформлен"
			И ДальнейшееДействие.Найти(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ЗаполнитеАктНесоответствия) <> Неопределено Тогда
				ДальнейшееДействие = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
					МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию());
		КонецЕсли;
	КонецЕсли;

	ПараметрыОбновленияСтатуса = РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
		СтатусВЕТИС,
		ДальнейшееДействие);
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ЗаполнитеАктНесоответствия);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОтменитеПередачуДанных);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
	
	НедоступныеДействия = ПользователиВЕТИС.НедоступныеДальнейшиеДействия(Объект.Ссылка, ДопустимыеДействия, ОперацииДопустимыхДействий, Объект.ХозяйствующийСубъект);
	
	СтатусВЕТИСПредставление = ИнтеграцияВЕТИС.ПредставлениеСтатусаВЕТИС(
		СтатусВЕТИС,
		ДальнейшееДействие,
		ДопустимыеДействия,
		НедоступныеДействия);
		
	Если СтатусВЕТИС <> Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ВыполненЧерезWeb Тогда
		Если АктНесоответствия = "Оформлен" Тогда
			АктНесоответствияПредставление = НСтр("ru = 'акте несоответствия №%1 от %2%3'");
			АктНесоответствияПредставление = СтрШаблон(АктНесоответствияПредставление,
				Объект.НомерАктаНесоответствия,
				Формат(Объект.ДатаАктаНесоответствия, "ДЛФ=D"),
				?(ЗначениеЗаполнено(Объект.СерияАктаНесоответствия),
					НСтр("ru = ', серия'") + " " + Объект.СерияАктаНесоответствия, ""));
			АктНесоответствияПредставление = Новый ФорматированнаяСтрока(АктНесоответствияПредставление,,,,"ОткрытьАктОНесоответствии");
			
			СтатусВЕТИСПредставление = Новый ФорматированнаяСтрока(
				СтатусВЕТИСПредставление,
				Символы.ПС + НСтр("ru = 'Расхождения оформлены в'"),
				" ",
				АктНесоответствияПредставление);
				
			Элементы.СтатусВЕТИС.Высота = 2;
		Иначе
			Элементы.СтатусВЕТИС.Высота = 1;
		КонецЕсли;
	КонецЕсли;
	
	#Область БлокировкаРеквизитовВЗависимостиОтСтатуса
	
	РедактированиеФормыНеДоступно = СтатусВЕТИС <> Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.Черновик
	                              И СтатусВЕТИС <> Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ОтклоненВЕТИС
	                              И СтатусВЕТИС <> Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ОшибкаПередачи;
	
	Элементы.ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное.ТолькоПросмотр = РедактированиеФормыНеДоступно;
	
	Элементы.Ответственный.ТолькоПросмотр                                       = РедактированиеФормыНедоступно;
	
	// Товары.
	Исключения = "ТоварыНайти, ТоварыОтменитьПоиск, ТоварыСгенерироватьСерии, ТоварыКонтекстноеМенюКопированиеИВыделение, "
		+ "ГруппаСвернутьРазвернуть, ТоварыГруппаНоменклатура, ТоварыГруппаНоменклатураКоличество, ТоварыКоличествоСтароеВЕТИС";
	
	ИнтеграцияВЕТИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(Элементы.СтраницаТовары,
		НЕ РедактированиеФормыНеДоступно, Исключения);
	
	#КонецОбласти
	
	#Область ОшибкиВетИС
	Если СтатусВЕТИС = Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ОтклоненВЕТИС Тогда
		ТаблицаОшибок = ИнтеграцияВЕТИСВызовСервера.ПолучитьТаблицуОшибок(Объект.Ссылка);
		Если ТаблицаОшибок <> Неопределено Тогда
			Для Каждого Ошибка Из ТаблицаОшибок Цикл
				СтрокиТоваровПоНомеру = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", Ошибка.НомерСтрокиСОшибкой));
				Для Каждого СтрокаТоваров Из СтрокиТоваровПоНомеру Цикл
					СтрокаТоваров.ЕстьОшибки = 1;
					СтрокаТоваров.Ошибка     = Ошибка.КодОшибки+": "+Ошибка.ОписаниеОшибки;
				КонецЦикла;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТоваров Из Объект.Товары Цикл
				СтрокаТоваров.ЕстьОшибки = 0;
				СтрокаТоваров.Ошибка     = "";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи();
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные");
		
		ИнтеграцияВЕТИСКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПроверитьКорректностьДанных" Тогда
		
		ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи();
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных");
		
		ИнтеграцияВЕТИСКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияВЕТИСКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачу" Тогда
		
		ИнтеграцияВЕТИСКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		ОткрытьФорму("Справочник.ВЕТИСПрисоединенныеФайлы.Форма.ФормаОшибки", ПараметрыОткрытияФормы, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьАктОНесоответствии" Тогда
		
		ПараметрыОткрытияФормы = ИнтеграцияВЕТИСКлиентСервер.ПараметрыФормыАктаОНесоответствииВЕТИС();
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытияФормы,Объект);
		ПараметрыОткрытияФормы.Основание = Объект.Ссылка;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьАктОНесоответствииЗавершение", ЭтотОбъект);
		
		ПараметрыОбработчика = Новый Структура("Форма,ОповещениеПриЗавершении",ЭтотОбъект,ОписаниеОповещения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыАктаОНесоответствии",
			ИнтеграцияВЕТИССлужебныйКлиент,
			ПараметрыОбработчика);
			
		ОткрытьФорму("Обработка.ЗаполнениеАктаОНесоответствииВЕТИС.Форма.Форма",
			ПараметрыОткрытияФормы,
			ЭтаФорма,
			ЭтаФорма.УникальныйИдентификатор,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьКорректностьДокументаСозданногоЧерезWeb" Тогда
		
		ИнтеграцияВЕТИСКлиент.ПодтвердитьКорректностьДокументаСозданногоЧерезWeb(Объект.Ссылка);
		
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "НетДоступа") Тогда
		
		УточнениеГиперссылки = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки,"НетДоступа","");
		ИнтеграцияВЕТИСКлиент.ПредупредитьОбОтсутствииДоступа(УточнениеГиперссылки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАктОНесоответствииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОбновитьСтатусВЕТИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияВЕТИСКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусВЕТИСОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеИЗаписатьДокумент();
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", СтандартнаяОбработка)
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		
		ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтаФорма,, Текст, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗаполнитьУстановитьВидимостьСерий()
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(
								Объект, Документы.ИнвентаризацияПродукцииВЕТИС);
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	УстановитьВидимостьЭлементовСерий();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИспользоватьСерииНоменклатуры = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Иначе
		ИспользоватьСерииНоменклатуры = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыСгенерироватьСерии.Видимость = ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыСерия.Видимость              = ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор,
																		КэшированныеЗначения)
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
		ЭтотОбъект,, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореТоварыСерия(Серия, ДополнительныеПараметры) Экспорт
	
	Если Серия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторТекущейСтроки = ДополнительныеПараметры.ИдентификаторТекущейСтроки;
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	СтрокиИдентификаторовПартий = 
		Объект.ПроизводственныеПартии.НайтиСтроки(Новый Структура("ИдентификаторСтрокиТовары", ТекущиеДанные.ИдентификаторСтроки));
		
	Если СтрокиИдентификаторовПартий.Количество() = 0 Тогда
		ТоварыСерияПриИзмененииНаСервере(ТекущиеДанные.ИдентификаторСтроки, ТекущиеДанные.Серия);
	КонецЕсли;
	
	ЗаполнитьПредставлениеТабличнойЧастиПоСтроке(ЭтаФорма, "ПроизводственныеПартии", ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСерияПриИзмененииНаСервере(ИдентификаторСтроки, Серия)
	
	Стр = Объект.ПроизводственныеПартии.Добавить();
	Стр.ИдентификаторСтрокиТовары = ИдентификаторСтроки;
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьИдентификаторПартии(Стр, Серия);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)
	
	Если Прочитать Тогда
		Прочитать();
	Иначе
		ПараметрыОбновленияСтатуса = Неопределено;
		ОбновитьСтатусВЕТИС();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеИЗаписатьДокумент()
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореНоменклатуры(Номенклатура, ДополнительныеПараметры) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Номенклатура = Номенклатура;
	
	НоменклатураПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении()
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.Суффикс                 = "Изменение";
	ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС   = ТекущиеДанные.ЕдиницаИзмеренияВЕТИС;
	
	Если РедактированиеФормыНедоступно или ЗначениеЗаполнено(ТекущиеДанные.ЗаписьСкладскогоЖурнала) Тогда
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
	Иначе
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС = Истина;
		ПараметрыЗаполнения.ЗаполнитьПродукциюВЕТИС = Истина;
	КонецЕсли;
	
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = ПараметрыУказанияСерий <> Неопределено;
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения,
		ПараметрыЗаполнения, ПараметрыУказанияСерий);
		
	Если ПараметрыЗаполнения.ЗаполнитьПродукциюВЕТИС И ЗначениеЗаполнено(ТекущиеДанные.Продукция) Тогда
		ПриИзмененииПродукцииНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), Ложь);
	Иначе
		ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС = Истина;
		ПараметрыЗаполнения.Суффикс = "Старое";
		
		СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииКоличестваВЕТИС(
			ЭтотОбъект,
			ТекущиеДанные,
			КэшированныеЗначения,
			ПараметрыЗаполнения);
	КонецЕсли;
		
	ПересчитатьЗависимуюГруппуКоличественныхРеквизитов(ТекущиеДанные, "КоличествоИзменение");
	
	ОбновитьКонтрольныеРеквизитыСравненияПоСтроке(ТекущиеДанные, "Продукция,КоличествоВЕТИС,ЕдиницаИзмеренияВЕТИС");
	
	НастроитьВидимостьДоступностьЭлементовПоСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьЗависимуюГруппуКоличественныхРеквизитов(ТекущиеДанные, Знач Источник)
	
	Если ПустаяСтрока(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Операция = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление") Тогда
		
		Если Источник = "Количество" Тогда
			ТекущиеДанные.КоличествоИзменение = ТекущиеДанные.Количество;
			ТекущиеДанные.КоличествоИзменениеВЕТИС = ТекущиеДанные.КоличествоВЕТИС;
		КонецЕсли;
		
		Если Источник = "КоличествоИзменение" Тогда
			ТекущиеДанные.Количество = ТекущиеДанные.КоличествоИзменение;
			ТекущиеДанные.КоличествоВЕТИС = ТекущиеДанные.КоличествоИзменениеВЕТИС;
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.Операция = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение") 
		ИЛИ ТекущиеДанные.Операция = ПредопределенноеЗначение("Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление") Тогда
		
		Если Источник = "Количество" Тогда
			ТекущиеДанные.КоличествоИзменение = ТекущиеДанные.Количество - ТекущиеДанные.КоличествоСтарое;
			ТекущиеДанные.КоличествоИзменениеВЕТИС = ТекущиеДанные.КоличествоВЕТИС - ТекущиеДанные.КоличествоСтароеВЕТИС;
		КонецЕсли;
		
		Если Источник = "КоличествоИзменение" Тогда
			ТекущиеДанные.Количество = ТекущиеДанные.КоличествоСтарое + ТекущиеДанные.КоличествоИзменение;
			ТекущиеДанные.КоличествоВЕТИС = ТекущиеДанные.КоличествоСтароеВЕТИС + ТекущиеДанные.КоличествоИзменениеВЕТИС;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении()
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЗаполнитьПродукциюВЕТИС = Не РедактированиеФормыНедоступно И Не ЗначениеЗаполнено(ТекущиеДанные.ЗаписьСкладскогоЖурнала);
	
	СобытияФормВЕТИСКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения,
		ПараметрыЗаполнения);
		
	Если ПараметрыЗаполнения.ЗаполнитьПродукциюВЕТИС Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Продукция) Тогда
			ПриИзмененииПродукцииНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), Ложь);
		Иначе
			ИнтеграцияВЕТИСКлиентСервер.УстановитьПризнакТипЖивыеЖивотныеПоСтроке(
			ТекущиеДанные,
			Ложь);
			
			ИнтеграцияВЕТИСКлиентСервер.ОбновитьТочностьДатПродукцииВСвязаннойТаблице(Объект.Товары, ТочностьДатПродукции);
			
		КонецЕсли;
		
		НастроитьВидимостьДоступностьЭлементовПоСтроке(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяУказаниеИдентификатораПартии(ИдентификаторСтроки)
	
	ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
		Возврат ИнтеграцияВЕТИС.ТребуетсяУказаниеИдентификатораПартииНоменклатуры(ДанныеСтроки.Номенклатура);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СгенерироватьСерииНаСервере(ВыделенныеСтроки)
	
	Товары = Объект.Товары.Выгрузить();
	Товары.Колонки.Добавить(
		"ИдентификаторПартии", 
		Новый ОписаниеТипов("Строка",,
			Новый КвалификаторыСтроки(
				Метаданные.ОпределяемыеТипы.СтрокаВЕТИС.Тип.КвалификаторыСтроки.Длина, 
				Метаданные.ОпределяемыеТипы.СтрокаВЕТИС.Тип.КвалификаторыСтроки.ДопустимаяДлина)));
				
	Для Каждого Стр Из ВыделенныеСтроки Цикл
		СтрокиПроизводственныеПартии = Объект.ПроизводственныеПартии.НайтиСтроки(
			Новый Структура("ИдентификаторСтрокиТовары", Товары[Стр].ИдентификаторСтроки));
			
		Если СтрокиПроизводственныеПартии.Количество() > 0 Тогда
			Товары[Стр].ИдентификаторПартии = СтрокиПроизводственныеПартии[0].ИдентификаторПартии;
		КонецЕсли;
	КонецЦикла;
	
	Результат = ИнтеграцияВЕТИС.СгенерироватьСерии(
		Объект,
		Товары, 
		ВыделенныеСтроки, 
		ПараметрыУказанияСерий);
		
	Объект.Товары.Загрузить(Товары);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОтборыПоОснованию(ОбновитьКомандыОснования = Истина)
	
	ОтборыПоОснованию = ИнтеграцияВЕТИСВызовСервера.ОтборыДляРеквизитовДокументаПоОснованию(
		Тип("ДокументСсылка.ИнвентаризацияПродукцииВЕТИС"), 
		Объект.ДокументОснование);
	
	Если НЕ(ОтборыПоОснованию = Неопределено)Тогда
		ВладелецСкладаИзОснованияДляОтбораХС          = ОтборыПоОснованию.ХозяйствующийСубъект;
		ВладелецСкладИзОснованияДляОтбораПредприятий  = ОтборыПоОснованию.Предприятие;
	Иначе 
		ВладелецСкладаИзОснованияДляОтбораХС          = Неопределено;
		ВладелецСкладИзОснованияДляОтбораПредприятий  = Неопределено;
	КонецЕсли;
	
	Если ОбновитьКомандыОснования Тогда 
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти