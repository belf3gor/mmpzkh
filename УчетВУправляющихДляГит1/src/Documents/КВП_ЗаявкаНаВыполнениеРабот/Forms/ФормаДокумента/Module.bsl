
////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет видимостью и доступностью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ПервичноеОбращение.Видимость = Форма.ЭтоПовторноеОбращение;
	
	// Колонки налога показываем только тогда, когда его учитываем.
	Элементы.НарядЗаказСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.НарядЗаказСуммаНДС.Видимость  = Объект.УчитыватьНДС;
	
	ЗаявкаВыполнена = (Объект.СтатусВыполнения = ПредопределенноеЗначение("Перечисление.КВП_ВидыСтатусовВыполненияРабот.Выполнено"));
	
	Элементы.ВремяФактическогоОкончанияРабот.Доступность = ЗаявкаВыполнена;
	Элементы.ОценкаВыполнения.Доступность                = ЗаявкаВыполнена;
	Элементы.КомментарийПоВыполнению.Доступность         = ЗаявкаВыполнена;
	
	// Реквизит оставлен для совместимости. Показываем его только в случае заполненности.
	Элементы.КонтактноеЛицоСтрокой.Видимость = Не ПустаяСтрока(Объект.Удалить_КонтактноеЛицо);
	
	ОбновитьИтоги(Форма);
	
	СформироватьНадписьЦеныИВалюта(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет видимостью и доступностью элементов формы.
Процедура УправлениеВидимостьюЭлементовФормы(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоДому") Тогда
	
		Элементы.ЛицевойСчет.Видимость        = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.ГруппаДолгПоЛС.Видимость     = Ложь;
		Элементы.Помещение.Видимость          = Ложь;
		Элементы.КонтактноеЛицо.Видимость     = Ложь;
		
		Элементы.ГруппаТелефон.Видимость        = Ложь;
		Элементы.ОткрытьПримечанияКЛС.Видимость = Ложь;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету") Тогда
		
		Элементы.ЛицевойСчет.Видимость        = Истина;
		Элементы.ДоговорКонтрагента.Видимость = Истина;
		Элементы.ГруппаДолгПоЛС.Видимость     = Истина;
		Элементы.Помещение.Видимость          = Истина;
		Элементы.КонтактноеЛицо.Видимость     = Истина;
		
		Элементы.ГруппаТелефон.Видимость        = Истина;
		Элементы.ОткрытьПримечанияКЛС.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
// Формирует текст про требование-накладную для показа в форме документа
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Текстовая строка про требование-накладную.
//
Функция ПолучитьТекстТребованияНакладной()

	Если ЗначениеЗаполнено(Объект.ТребованиеНакладная) Тогда
		Возврат Строка(Объект.ТребованиеНакладная)+ ?(Объект.ТребованиеНакладная.ПометкаУдаления,"; помечен на удаление","");
	Иначе
		Возврат "Ввести требование-накладную";
	КонецЕсли;

КонецФункции // ПолучитьТекстТребованияНакладной()

&НаСервере
// Заполняет текст про требование-накладную в форме документа.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроТребованиеНакладную()
	
	ГиперссылкаТребованиеНакладная = ПолучитьТекстТребованияНакладной();
	
КонецПроцедуры // ЗаполнитьТекстПроТребованиеНакладную()

&НаСервере
// Формирует текст про РеализациюТоваровУслуг для показа в форме документа
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Текстовая строка про требование-накладную.
//
Функция ПолучитьТекстРеализацииТоваровУслуг()

	Если ЗначениеЗаполнено(Объект.РеализацияТоваровУслуг) Тогда
		Возврат Строка(Объект.РеализацияТоваровУслуг)
				+ ?(Объект.РеализацияТоваровУслуг.ПометкаУдаления, "; помечен на удаление", "");
	Иначе
		Возврат "Ввести реализацию товаров и услуг";
	КонецЕсли;

КонецФункции // ПолучитьТекстРеализацииТоваровУслуг()

&НаСервере
// Заполняет текст про РеализациюТоваровУслуг в форме документа.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроРеализациюТоваровУслуг()
	
	ГиперссылкаРеализацияТоваровУслуг = ПолучитьТекстРеализацииТоваровУслуг();
	
КонецПроцедуры // ЗаполнитьТекстПроРеализациюТоваровУслуг()

&НаСервереБезКонтекста
// Возвращает контактное лицо по лицевому счету.
//
Функция ПолучитьКонтактноеЛицоПоЛицевомуСчетуНаСервере(ЛицевойСчет, Период)
	
	ОтветственныйСобственникЛС = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ЛицевойСчет, Период);
	Если ТипЗнч(ОтветственныйСобственникЛС) = Тип("СправочникСсылка.Контрагенты") Тогда
		КонтактноеЛицоЛицевогоСчета = Справочники.КонтактныеЛица.КонтактноеЛицоПоУмолчанию(ОтветственныйСобственникЛС);
	Иначе
		КонтактноеЛицоЛицевогоСчета = ОтветственныйСобственникЛС;
	КонецЕсли;
	
	Возврат КонтактноеЛицоЛицевогоСчета;
	
КонецФункции  //ПолучитьАдресПомещенияНаСервере()

&НаСервереБезКонтекста
// Возвращает адрес здания на сервере.
//
Функция ПолучитьАдресЗданияНаСервере(Здание, ВидАдреса)
	
	Возврат ПолучитьАдрес(Здание, ВидАдреса);
	
КонецФункции //ПолучитьАдресЗданияНаСервере

&НаСервереБезКонтекста
// Определяет адрес квартиры, включающий адрес дома.
//
// Параметры
//  Квартира  – СправочникСсылка.УПЖКХ_Помещения – квартира, для которой определяется адрес.
//
// Возвращаемое значение:
//  Строка – адрес квартиры, включающий адрес дома.
//
Функция ПолучитьАдресПомещенияНаСервере(АдресДома, Помещение)
	
	Возврат ПолучитьАдресПомещения(АдресДома, Помещение);
	
КонецФункции  //ПолучитьАдресПомещенияНаСервере()

&НаКлиенте
// Процедура заполняет поля адреса последними данными из регистра сведений.
Процедура ОбновитьАдресЗаявки()
	
	// Заполнение адреса по заявке.
	СтруктАдрес = Неопределено;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоДому") Тогда
		
		Если ЗначениеЗаполнено(Объект.Здание) Тогда
			СтруктАдрес = ПолучитьАдресЗданияНаСервере(Объект.Здание, ПредопределенноеЗначение("Перечисление.КВП_ВидыАдресов.Здание"));
			АдресДома   = "";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СформироватьПредставлениеАдреса(СтруктАдрес, АдресДома);
			Подъезд     = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подъезд, "Наименование");
			тмАдрес     = АдресДома + ?(ЗначениеЗаполнено(Подъезд), ", " + НРег(Подъезд), "");
			Если НЕ Объект.Адрес = тмАдрес Тогда
				Объект.Адрес = тмАдрес;
			КонецЕсли;
		Иначе
			Объект.Адрес = "";
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету") Тогда
		
		Если ЗначениеЗаполнено(Объект.ЛицевойСчет) Тогда
			ПомещениеПоЛС = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ЛицевойСчет, "Адрес");
			ЗданиеПоПомещению = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПомещениеПоЛС, "Владелец");
			СтруктАдрес = ПолучитьАдресЗданияНаСервере(ЗданиеПоПомещению, ПредопределенноеЗначение("Перечисление.КВП_ВидыАдресов.Здание"));
		ИначеЕсли ЗначениеЗаполнено(Объект.Здание) Тогда
			СтруктАдрес = ПолучитьАдресЗданияНаСервере(Объект.Здание, ПредопределенноеЗначение("Перечисление.КВП_ВидыАдресов.Здание"));
		Иначе
			Объект.Адрес = "";
		КонецЕсли;
		
		Если Не СтруктАдрес = Неопределено Тогда
			АдресДома   = "";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СформироватьПредставлениеАдреса(СтруктАдрес, АдресДома);
			Подъезд     = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подъезд, "Наименование");
			тмАдрес     = АдресДома + ?(ЗначениеЗаполнено(Подъезд), ", " + НРег(Подъезд), "");
			тмАдрес     = ПолучитьАдресПомещенияНаСервере(тмАдрес, ?(ЗначениеЗаполнено(Объект.ЛицевойСчет), УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ЛицевойСчет, "Адрес"), Объект.Помещение));
			Если НЕ Объект.Адрес = тмАдрес Тогда
				Объект.Адрес = тмАдрес;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьАдресЗаявки()

&НаСервереБезКонтекста
// Функция возвращает массив номеров телефонов из табличной части "КонтактнаяИнформация" элемента справочника "Контактные лица".
Функция ПолучитьСписокНомеровТелефоновКонтактногоЛица(ЛицевойСчет, КонтактноеЛицо)
	
	МассивВидовКИ = Новый Массив;
	Если ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
		МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
		ОтборПоКонтактномуЛицу = КонтактноеЛицо.ФизЛицо;
		ТипСправочника = "Справочник.ФизическиеЛица";
	ИначеЕсли ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица);
		МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица);
		ОтборПоКонтактномуЛицу = КонтактноеЛицо;
		ТипСправочника = "Справочник.КонтактныеЛица";
	КонецЕсли;
	
	ЗапросТелефонов = Новый Запрос;
	ЗапросТелефонов.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Вид
	|ИЗ
	|	&ТипСправочника.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Отбор
	|	И КонтактнаяИнформация.Тип = &ТипКИ
	|	И КонтактнаяИнформация.Вид В(&ВидКИ)";
	
	ЗапросТелефонов.УстановитьПараметр("ВидКИ", МассивВидовКИ);
	ЗапросТелефонов.УстановитьПараметр("Отбор", ОтборПоКонтактномуЛицу);
	ЗапросТелефонов.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.Телефон);
	ЗапросТелефонов.Текст = СтрЗаменить(ЗапросТелефонов.Текст, "&ТипСправочника", ТипСправочника);
	
	СписокНомеров = Новый СписокЗначений;
	
	ВыборкаНомеров = ЗапросТелефонов.Выполнить().Выбрать();
	
	Пока ВыборкаНомеров.Следующий() Цикл
		Если ВыборкаНомеров.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица Или 
			ВыборкаНомеров.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица Тогда
			ПредставлениеНомера = СокрЛП(ВыборкаНомеров.Представление) + " (раб.)";
		ИначеЕсли ВыборкаНомеров.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица Тогда
			ПредставлениеНомера = СокрЛП(ВыборкаНомеров.Представление) + " (дом.)";
		ИначеЕсли ВыборкаНомеров.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица Тогда
			ПредставлениеНомера = СокрЛП(ВыборкаНомеров.Представление) + " (моб.)";
		Иначе
			ПредставлениеНомера =  СокрЛП(ВыборкаНомеров.Представление);
		КонецЕсли;
		СписокНомеров.Добавить(ВыборкаНомеров.Представление, ПредставлениеНомера);
	КонецЦикла;
	
	Если СписокНомеров.Количество() = 0 Тогда
		СписокНомеров.Добавить(ЛицевойСчет.Телефон, ЛицевойСчет.Телефон);
	КонецЕсли;
	
	Возврат СписокНомеров;
	
КонецФункции // ПолучитьМассивНомеровТелефоновКонтактногоЛица()

&НаСервереБезКонтекста
// Выводит сумму долга по лицевому счету.
Функция РассчитатьСуммуДолгаПоЛС(Организация, ЛицевойСчет, Дата)
	
	// Определим сумму долга по начислениям для текущего лицевого счета.
	Долг   = 0;
	Валюта = "";
	
	Если НЕ ЛицевойСчет.Пустая() Тогда
		СтруктураДолгВалюта = Документы.КВП_ЗаявкаНаВыполнениеРабот.ПолучитьСтруктуруДолгВалюта(Организация, ЛицевойСчет, Дата);
		
		Долг   = СтруктураДолгВалюта.Долг;
		Валюта = СтруктураДолгВалюта.Валюта;
		
	КонецЕсли;
	
	Если Долг > 0 Тогда
		ИнфСтрока = "Долг = " + Строка(Долг);
		ЦветНадписи = Новый Цвет(255, 0, 0); // красный
	ИначеЕсли Долг < 0 Тогда
		ИнфСтрока = "Переплата = " + Строка(-Долг);
		ЦветНадписи = Новый Цвет(0, 0, 128); // синий
	Иначе
		ИнфСтрока = "";
		ЦветНадписи = Новый Цвет(0, 0, 0);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("СтрокаДолга", ИнфСтрока);
	СтруктураВозврата.Вставить("ЦветНадписи", ЦветНадписи);
	СтруктураВозврата.Вставить("Валюта",      Валюта);
	
	Возврат СтруктураВозврата;
	
КонецФункции //РассчитатьСуммуДолгаПоЛС()

&НаКлиенте
// Процедура выводит сумму долга по лицевому счету.
Процедура ВывестиСуммуДолгаПоЛС()
	
	ДолгПоЛС = РассчитатьСуммуДолгаПоЛС(Объект.Организация, Объект.ЛицевойСчет, Объект.Дата);
	Если ЗначениеЗаполнено(ДолгПоЛС.Валюта) Тогда
		ДолгПоТекущемуЛС = ДолгПоЛС.СтрокаДолга + " " +  ДолгПоЛС.Валюта;
	Иначе
		ДолгПоТекущемуЛС = ДолгПоЛС.СтрокаДолга;
	КонецЕсли;
	
	Элементы.ДолгПоТекущемуЛС.ЦветТекста = ДолгПоЛС.ЦветНадписи;
	
КонецПроцедуры // ВывестиСуммуДолга()

&НаКлиенте
// Процедура заполняет телефон из контактного лица.
Процедура ОбновитьТелефонКонтактногоЛица()
	
	Объект.Телефон = "";
	
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицоЛицевогоСчета) Тогда
		
		СписокНомеровТелефоновКонтактногоЛица = ПолучитьСписокНомеровТелефоновКонтактногоЛица(Объект.ЛицевойСчет, Объект.КонтактноеЛицоЛицевогоСчета);
		
		Если СписокНомеровТелефоновКонтактногоЛица.Количество() > 0 Тогда
			Объект.Телефон = СписокНомеровТелефоновКонтактногоЛица.Получить(0).Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьТелефонКонтактногоЛица()

&НаКлиенте
// Процедура рассчитывает поля табличной части "Работы".
Процедура РассчитатьСтрокуТабЧастиРаботы(СтрокаТабЧасти)
	СтрокаТабЧасти.ВремяПлан = СтрокаТабЧасти.ОбъемПлан * СтрокаТабЧасти.НормаТруда;
	СтрокаТабЧасти.ВремяФакт = СтрокаТабЧасти.ОбъемФакт * СтрокаТабЧасти.НормаТруда;
КонецПроцедуры

&НаКлиенте
// Процедура рассчитывает поля табличной части "НарядЗаказ".
Процедура РассчитатьСтрокуТабЧастиНарядЗаказ(СтрокаТабЧасти)
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабЧасти);
	
	//Если СтрокаТабЧасти.Свойство("СуммаНДС") Тогда
	//	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабЧасти, Объект.СуммаВключаетНДС);
	//КонецЕсли;
	СтрокаТабЧасти.ЕдиницаИзмерения = ПолучитьЕдИЗМ(СтрокаТабЧасти.Номенклатура);
	СтрокаТабЧасти.СуммаПлан = СтрокаТабЧасти.Цена * СтрокаТабЧасти.КоличествоПлан ;
    СтрокаТабЧасти.Сумма     = СтрокаТабЧасти.Цена * СтрокаТабЧасти.Количество;
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаСервере
// Процедура заполнения состава заказ-наряда на сервере.
Процедура ЗаполнитьСоставЗаказНарядаНаСервере()
	
	  	
	КонецПроцедуры

&НаКлиенте
// Обработка изменения цен и валюты.
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ТипЦен, ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",    ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("ТипЦен",               ТипЦен);
	
	// 2. Открываем форму "Цены и Валюта".
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
// Процедура обновляет значения сумм и цен на основе выбранных параметров.
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = РезультатЗакрытия;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") Тогда 
		
		НаборОбязательныхСвойств = Новый Массив;
		НаборОбязательныхСвойств.Добавить("ТипЦен");
		НаборОбязательныхСвойств.Добавить("ВалютаДокумента");
		НаборОбязательныхСвойств.Добавить("СуммаВключаетНДС");
		НаборОбязательныхСвойств.Добавить("ПересчитатьНДС");
		
		Для Каждого Ключ Из НаборОбязательныхСвойств Цикл
			Если СтруктураЦеныИВалюта.Свойство(Ключ) = Неопределено Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Внимание! Пересчет НДС не может быть выполнен по причине отсутствия в общей форме ""ФормаЦеныИВалюта"" свойства """ 
				+ Ключ + """.");
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения      = 1;
		КратностьДоИзменения = 1;
		
		Объект.ТипЦен           = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента  = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		
		Модифицированность = Истина;
		
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения,
			КурсДоИзменения,
			КратностьДоИзменения,
			СтруктураЦеныИВалюта.ПересчитатьНДС);
			
		Для Каждого ТекСтрока Из Объект.НарядЗаказ Цикл
			РассчитатьСтрокуТабЧастиНарядЗаказ(ТекСтрока);
		КонецЦикла;
		
		ОбновитьИтоги(ЭтаФорма);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура получает цены номенклатуры, учитывая курс валюты.
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьНДС = Ложь)
	
	Перем ТаблицаЦенНоменклатуры;
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда	
		ТаблицаЦенНоменклатуры	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.НарядЗаказ, "Номенклатура", Истина),
			Объект.ТипЦен,
			Объект.Дата);
	Иначе
		ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатурыДокументов(
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.НарядЗаказ, "Номенклатура", Истина),
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.Дата);	
	КонецЕсли;
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
	
	Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
		СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
	Иначе
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
	КонецЕсли;
		
	Для Каждого Строка Из Объект.НарядЗаказ Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПересчитатьНДС, Истина, 1);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет строки поля "НарядЗаказ".
Процедура ЗаполнитьРассчитатьСуммыВСтроке(
	Строка,
	ТаблицаЦенНоменклатуры,
	ВалютаПередИзменением,
	СтруктураКурса,
	ПересчитатьНДС,
	ЕстьНДС,
	ЗначениеПустогоКоличества)

	НайденнаяСтрока = ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
	Если НайденнаяСтрока <> Неопределено Тогда
		Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
			1, НайденнаяСтрока.Кратность, 1);
		ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
	Иначе
		Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
			1, СтруктураКурса.Кратность, 1);
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	Если ЕстьНДС Тогда
		ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС);
		Строка.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, ЗначениеСтавкиНДС);
		Строка.Сумма    = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС, ЗначениеСтавкиНДС);
	Иначе
		Строка.Цена  = Цена;
		Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Формирует надпись цен и валюты.
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ТипЦен, ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС",
		Объект.ТипЦен,
		Объект.ВалютаДокумента,
		1,
		1,
		Объект.СуммаВключаетНДС);
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Обновляет итоги табличной части.
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
		
	Форма.ИтогиВсего    = Объект.НарядЗаказ.Итог("Сумма")+ Объект.СоставЗвена.Итог("Сумма") +  Объект.МашиныИМеханизмы.Итог("Сумма");
	Форма.ИтогиВсегоНДС = Объект.НарядЗаказ.Итог("СуммаНДС");
	
КонецПроцедуры

&НаСервере
// Включает отборы при выборе помещения.
//
Процедура ПомещениеНачалоВыбораНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Здание) Тогда
		
		СвязьПоЗданию = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Здание");
		
		МассивСвязи = Новый Массив();
		МассивСвязи.Добавить(СвязьПоЗданию);
		
		Если ЗначениеЗаполнено(Объект.Подъезд) Тогда
			СвязьПоПодъезду = Новый СвязьПараметраВыбора("Отбор.Подъезд", "Объект.Подъезд");
			МассивСвязи.Добавить(СвязьПоПодъезду);
		КонецЕсли;
		
		ОтборПоЗданиюИПодъезду = Новый ФиксированныйМассив(МассивСвязи);
		Элементы.Помещение.СвязиПараметровВыбора = ОтборПоЗданиюИПодъезду;
	Иначе
		Элементы.Помещение.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры // ПомещениеНачалоВыбораНаСервере()

&НаСервере
// Устанавливает параметры связи поля выбора лицевого счета.
//
Процедура УстановитьПараметрыСвязиПоляВыбораЛицевогоСчетаНаСервере()
	
	Элементы.КонтактноеЛицо.ВыбиратьТип = Ложь;
	
	ОтветственныйСобственникЛС = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Объект.ЛицевойСчет, Объект.Дата);
	
	// Установка ограничения типа.
	МассивТипов = Новый Массив;
	Если ТипЗнч(ОтветственныйСобственникЛС) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.УПЖКХ_Жильцы"));
		Элементы.КонтактноеЛицо.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	ИначеЕсли ТипЗнч(ОтветственныйСобственникЛС) = Тип("СправочникСсылка.Контрагенты") Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.КонтактныеЛица"));
		Элементы.КонтактноеЛицо.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	// Установка связей параметров выбора.
	МассивСвязей = Новый Массив;
	Если ТипЗнч(ОтветственныйСобственникЛС) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ЛицевойСчет"));
		
	ИначеЕсли ТипЗнч(ОтветственныйСобственникЛС) = Тип("СправочникСсылка.Контрагенты") Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.ОбъектВладелец", "ОтветственныйСобственникЛС"));
		
	КонецЕсли;
	
	Элементы.КонтактноеЛицо.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
КонецПроцедуры

&НаСервере
// Включает отборы при выборе лицевого счета.
//
Процедура ЛицевойСчетНачалоВыбораНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Помещение) Тогда
		СвязьПоПомещению = Новый СвязьПараметраВыбора("Отбор.Адрес", "Объект.Помещение");
		МассивСвязи = Новый Массив();
		МассивСвязи.Добавить(СвязьПоПомещению);
		
		ОтборПоПомещению = Новый ФиксированныйМассив(МассивСвязи);
		Элементы.ЛицевойСчет.СвязиПараметровВыбора = ОтборПоПомещению;
	Иначе
		Элементы.ЛицевойСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры // ЛицевойСчетНачалоВыбораНаСервере()

&НаСервереБезКонтекста
// Получает массив лицевых счетов в помещении, здании или подъезде.
//
Функция ПолучитьМассивЛС(Параметр, Период, НаименованиеОтбора)
	
	СписокПараметров = Новый СписокЗначений;
	СписокПараметров.Добавить(Параметр);
	
	Если НаименованиеОтбора = "Помещение" Тогда
		СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоПомещениям(СписокПараметров, Период);
	ИначеЕсли НаименованиеОтбора = "Подъезд" Тогда
		СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоПодъездам(СписокПараметров, Период);
	ИначеЕсли НаименованиеОтбора = "Здание" Тогда
		СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(СписокПараметров, Период);
	КонецЕсли;
	
	Возврат СписокЛС.ВыгрузитьЗначения();
	
КонецФункции // ПолучитьМассивЛС()

&НаКлиенте
// Заполняет строку "Трудозатраты по заявке".
//
Процедура ЗаполнитьСтрокуСводныхТрудозатрат()
	
	ВремяНачала    = Объект.ВремяФактическогоНачалаРабот;
	ВремяОкончания = Объект.ВремяФактическогоОкончанияРабот;
	
	СтрокаТрудозатрат = "";
	
	Если Не ЗначениеЗаполнено(ВремяНачала) Или Не ЗначениеЗаполнено(ВремяОкончания) Тогда
		Трудозатраты = СтрокаТрудозатрат;
		Возврат;
	КонецЕсли;
	
	РазницаВМинутах = Окр((ВремяОкончания - ВремяНачала) / 60);
	ПолныхДней   = Цел(РазницаВМинутах / (60 * 24));
	ПолныхЧасов  = Цел((РазницаВМинутах - ПолныхДней * 60 * 24) / 60);
	ОстатокМинут = Цел(РазницаВМинутах - ПолныхДней * 60 * 24 - ПолныхЧасов * 60);
	
	Если ПолныхДней > 0 Тогда
		СтрокаТрудозатрат = Строка(ПолныхДней) + " дн. ";
	КонецЕсли;
	
	Если ПолныхЧасов > 0 Тогда
		СтрокаТрудозатрат = СтрокаТрудозатрат + Строка(ПолныхЧасов) + " ч. ";
	КонецЕсли;
	
	СтрокаТрудозатрат = СтрокаТрудозатрат + Строка(ОстатокМинут) + " мин.";
	
	Трудозатраты = "(" + СтрокаТрудозатрат + ")";
	
КонецПроцедуры // ЗаполнитьСтрокуСводныхТрудозатрат()

&НаКлиенте
// Обработчик завершения процедуры заполнения видов работ и материалов по признаку неисправности.
//
Процедура ЗаполнитьТЧПоПризнакуНеисправностиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Работы.Очистить();
		Объект.НарядЗаказ.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТабличныеЧастиПоПризнакуНеисправности();
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ТипЦен);
	
КонецПроцедуры

&НаСервере
// Процедура заполнения видов работ и материалов по признаку неисправности.
//
Процедура ЗаполнитьТабличныеЧастиПоПризнакуНеисправности()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПризнакНеисправности", Объект.ПризнакНеисправности);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ПризнакиНеисправностейВидыРабот.ВидРабот КАК ВидРабот,
	|	УПЖКХ_ПризнакиНеисправностейВидыРабот.ВидРабот.НормаТрудаРабочих КАК НормаТруда
	|ИЗ
	|	Справочник.УПЖКХ_ПризнакиНеисправностей.ВидыРабот КАК УПЖКХ_ПризнакиНеисправностейВидыРабот
	|ГДЕ
	|	УПЖКХ_ПризнакиНеисправностейВидыРабот.Ссылка = &ПризнакНеисправности";
	
	Объект.Работы.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ЗаполнитьСоставЗаказНарядаНаСервере();
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДОКУМЕНТОВ

&НаКлиентеНаСервереБезКонтекста
// Возвращает массив видов договоров реализации.
Функция ПолучитьМассивВидовДоговоровРеализации(ВидОперации, ДеятельностьНаПатенте)

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	Если НЕ ВидОперации = 
				ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности")
		И НЕ ДеятельностьНаПатенте Тогда
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	КонецЕсли;

	Возврат СписокВидовДоговоров;

КонецФункции

&НаСервереБезКонтекста
// Устанавливает договор контрагента реализации.
Процедура УстановитьДоговорКонтрагентаРеализации(ДоговорКонтрагента, Контрагент,
													Организация, ВидОперации, ДеятельностьНаПатенте)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьДоговорКонтрагента(ДоговорКонтрагента,
			Контрагент, Организация, ПолучитьМассивВидовДоговоровРеализации(ВидОперации, ДеятельностьНаПатенте));
	
КонецПроцедуры

&НаСервереБезКонтекста
// Устанавливает банковский счет организации.
Процедура УстановитьБанковскийСчетРеализации(БанковскийСчетОрганизации, Организация, ВалютаДокумента)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьБанковскийСчет(БанковскийСчетОрганизации, 
														Организация, 
														ВалютаДокумента);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Заполняет счета учетов реализации.
Процедура ЗаполнитьСчетаУчетаРасчетов(Организация, Контрагент, ДоговорКонтрагента, ВидОперации,
				СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СпособЗачетаАвансов,
				СчетУчетаРасчетовПоТаре) Экспорт //, СчетУчетаРасходовПоТаре, СчетУчетаДоходовПоТаре
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Организация, Контрагент, ДоговорКонтрагента);
	
	Если (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
		СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Иначе
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		Если (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически)
			ИЛИ (СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
			СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
		Иначе
			СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	СчетУчетаРасчетовПоТаре      = СчетаУчета.СчетУчетаТарыПокупателя;
	//СчетУчетаРасходовПоТаре      = СчетаУчета.СчетУчетаРасходовПоТаре;
	//СчетУчетаДоходовПоТаре       = СчетаУчета.СчетУчетаДоходовПоТаре;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает счета учета номенклатуры на сервере.
Функция ПолучитьСчетаУчетаНоменклатурыНаСервере(Организация, Номенклатура)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура);
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает виды субконто счета.
Функция ТипСубконтоСчетаДоходовНоменклатурнаяГруппа(СчетУчета)
	
	Если Не СчетУчета.Пустая() Тогда
		
		ВидыСубконтоСчета = СчетУчета.ВидыСубконто;
		
		Если ВидыСубконтоСчета.Количество() > 0 Тогда
			
			Если ТипЗнч(Новый(ВидыСубконтоСчета[0].ВидСубконто.ТипЗначения.Типы()[0])) =
					Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
// Заполняет форму нового документа реализации.
Процедура ВвестиРеализациюТоваровУслуг()
	
	//Вводим новый документ на основании нашего
	Если Модифицированность Тогда
		ПоказатьПредупреждение(Неопределено, "Документ был изменен. Сначала следует записать документ.");
		Возврат;
	КонецЕсли;
	
	ФормаДокумента = ПолучитьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаОбщая", , ЭтаФорма);
	
	ОбъектДокумента = ФормаДокумента.Объект;
	
	ОбъектДокумента.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия");
	ОбъектДокумента.Организация = Объект.Организация;
	
	Если Объект.ВидОперации = 
			ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету")Тогда
		ОбъектДокумента.Контрагент = 
			УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(Объект.ЛицевойСчет,
																							Объект.Дата, "Контрагент");
		УстановитьДоговорКонтрагентаРеализации(ОбъектДокумента.ДоговорКонтрагента, ОбъектДокумента.Контрагент,
												ОбъектДокумента.Организация, ОбъектДокумента.ВидОперации, ОбъектДокумента.ДеятельностьНаПатенте);
	КонецЕсли;

	ОбъектДокумента.Склад = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	
	ОбъектДокумента.ВалютаДокумента         = Объект.ВалютаДокумента;
	ОбъектДокумента.КурсВзаиморасчетов      = 1;
	ОбъектДокумента.КратностьВзаиморасчетов = 1;
	
	ОбъектДокумента.ТипЦен           = Объект.ТипЦен;
	ОбъектДокумента.СуммаВключаетНДС = Объект.СуммаВключаетНДС;
	ОбъектДокумента.ДокументБезНДС   = Ложь;
	РеализацияТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(ФормаДокумента);
	
	ОбъектДокумента.Комментарий   = "Введен на основании документа " + Строка(Объект.Ссылка);
	
	УстановитьБанковскийСчетРеализации(ОбъектДокумента.БанковскийСчетОрганизации, 
										Объект.Организация, 
										Объект.ВалютаДокумента);
	
	ЗаполнитьСчетаУчетаРасчетов(ОбъектДокумента.Организация, ОбъектДокумента.Контрагент,
								ОбъектДокумента.ДоговорКонтрагента, ОбъектДокумента.ВидОперации,
								ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом, ОбъектДокумента.СчетУчетаРасчетовПоАвансам,
								ОбъектДокумента.СпособЗачетаАвансов, ОбъектДокумента.СчетУчетаРасчетовПоТаре);
	

	// Табличная часть документа.
	Для Каждого ТекСтрока Из Объект.НарядЗаказ Цикл
		
		ЭтоУслуга = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "Услуга");
		Если ЭтоУслуга = Истина Тогда
			НоваяСтрока                = ОбъектДокумента.Услуги.Добавить();
			
			ПолноеНаименованиеНоменклатуры = 
				УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "НаименованиеПолное");
			
			Если ПустаяСтрока(ПолноеНаименованиеНоменклатуры) Тогда
				НоваяСтрока.Содержание = ТекСтрока.Номенклатура.Наименование;
			Иначе
				НоваяСтрока.Содержание = ПолноеНаименованиеНоменклатуры;
			КонецЕсли;
			ИмяТабличнойЧасти = "Услуги";
			
		Иначе
			
			НоваяСтрока                  = ОбъектДокумента.Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
			ИмяТабличнойЧасти = "Товары";
		КонецЕсли;
		
		НоваяСтрока.Номенклатура         = ТекСтрока.Номенклатура;
		НоваяСтрока.СтавкаНДС            = ТекСтрока.СтавкаНДС;
		НоваяСтрока.Количество           = ТекСтрока.Количество;
		НоваяСтрока.Цена                 = ТекСтрока.Цена;
		НоваяСтрока.Сумма                = ТекСтрока.Сумма;
		НоваяСтрока.СуммаНДС             = УПЖКХ_ТиповыеМетодыКлиентСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма,
										  Объект.СуммаВключаетНДС, 
										  УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		НоваяСтрока.Всего                = НоваяСтрока.Сумма + ?(ОбъектДокумента.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
		
		// счета учета номенклатуры
		СчетаУчета = ПолучитьСчетаУчетаНоменклатурыНаСервере(Объект.Организация, НоваяСтрока.Номенклатура);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СчетаУчета);
		НоваяСтрока.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСпродажи;
		
		Если ТипСубконтоСчетаДоходовНоменклатурнаяГруппа(НоваяСтрока.СчетДоходов) Тогда
			
			НоваяСтрока.Субконто = 
				УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НоваяСтрока.Номенклатура, "НоменклатурнаяГруппа");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ФормаДокумента.ИтогиВсего    = ОбъектДокумента.Товары.Итог("Всего");
	ФормаДокумента.ИтогиВсегоНДС = ОбъектДокумента.Товары.Итог("СуммаНДС");
	
	Если НЕ ФормаДокумента.ЭтоОтгрузка Тогда
		ФормаДокумента.ИтогиВсего = ФормаДокумента.ИтогиВсего
			+ ОбъектДокумента.Услуги.Итог("Всего");
		ФормаДокумента.ИтогиВсегоНДС = ФормаДокумента.ИтогиВсегоНДС
			+ ОбъектДокумента.Услуги.Итог("СуммаНДС");
	КонецЕсли;
	
	// Откроем форму для редактирования
	ФормаДокумента.Модифицированность = Истина;
	ФормаДокумента.ОткрытьМодально();
	
	Если Не ОбъектДокумента.Ссылка.Пустая() Тогда
		Объект.РеализацияТоваровУслуг = ОбъектДокумента.Ссылка;
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		ЗаполнитьТекстПроРеализациюТоваровУслуг();
	КонецЕсли;
	
КонецПроцедуры // ВвестиРеализациюТоваровУслуг()

&НаКлиенте
// Заполняет форму нового документа требования-накладной.
Процедура ВвестиТребованиеНакладную()
	
	//Вводим новый документ на основании нашего
	Если Модифицированность Тогда
		ПоказатьПредупреждение(Неопределено, "Документ был изменен. Сначала следует записать документ.");
		Возврат;
	КонецЕсли;
	
	ФормаДокумента = ПолучитьФорму("Документ.ТребованиеНакладная.ФормаОбъекта", , ЭтаФорма);
	
	ОбъектДокумента = ФормаДокумента.Объект;
	
	// Заполнение шапки
	ОбъектДокумента.Комментарий   = "Введен на основании документа "+Строка(Объект.Ссылка);
	ОбъектДокумента.Организация   = Объект.Организация;
	ОбъектДокумента.Ответственный = Объект.Ответственный;
	ОбъектДокумента.ПодразделениеЗатрат = 
		УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");

	Для Каждого ТекСтрокаМатериалыЗаказчика Из Объект.НарядЗаказ Цикл
		НоваяСтрока                  = ОбъектДокумента.Материалы.Добавить();
		НоваяСтрока.Количество       = ТекСтрокаМатериалыЗаказчика.Количество;
		НоваяСтрока.Номенклатура     = ТекСтрокаМатериалыЗаказчика.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаМатериалыЗаказчика.ЕдиницаИзмерения;
		
		СчетаУчета = ПолучитьСчетаУчетаНоменклатурыНаСервере(ОбъектДокумента.Организация, НоваяСтрока.Номенклатура);
		НоваяСтрока.Счет = СчетаУчета.СчетУчета;
		
	КонецЦикла;
	
	// Откроем форму для редактирования
	ФормаДокумента.ОткрытьМодально();
	Если НЕ ОбъектДокумента.Ссылка.Пустая() Тогда
		Объект.ТребованиеНакладная = ОбъектДокумента.Ссылка;
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		ЗаполнитьТекстПроТребованиеНакладную();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
//	Если Объект.Дата = '20150930' Тогда 
//	Объект.Дата = ТекущаяДата();
//КонецЕсли; 

	Если НЕ значениеЗаполнено(Объект.Склад) тогда
		Объект.Склад = Справочники.Склады.НайтиПоНаименованию("Центральный склад") ;
	КОнецЕсли;

	//объект.ПоСкладам = Истина;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ФормаКоманднаяПанель);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																		УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
			Объект.Приоритет                 = Перечисления.КВП_ВидыПриоритетовВыполненияРабот.Средний;
			Объект.КатегорияВыполняемыхРабот = Справочники.УПЖКХ_КатегорииРабот.ТекущийРемонт;
			Объект.ВремяУдобноеДляЗаказчика  = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
		Иначе
			Если Не Объект.ТребованиеНакладная.Пустая() Тогда
				Объект.ТребованиеНакладная = Документы.ТребованиеНакладная.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		Объект.СтатусВыполнения = Перечисления.КВП_ВидыСтатусовВыполненияРабот.НоваяЗаявка;
		
		Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		
	КонецЕсли;
	
	ЗаполнитьТекстПроТребованиеНакладную();
	ЗаполнитьТекстПроРеализациюТоваровУслуг();
	
	ЭтоПовторноеОбращение = Не Объект.ПервичноеОбращение.Пустая();
	
	// Установить видимость реквизитов и заголовков колонок.
	УправлениеФормой(ЭтаФорма);
	УправлениеВидимостьюЭлементовФормы(ЭтаФорма);
	
	// Установим свойства поля выбора лицевого счета.
	УстановитьПараметрыСвязиПоляВыбораЛицевогоСчетаНаСервере();
	
	мОтбиратьПоВидуРабот = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ЗаявкаНаВыполнениеРабот",
																							"ОтборЗаявокПоВидуРабот");
	Если мОтбиратьПоВидуРабот = Неопределено Тогда
		мОтбиратьПоВидуРабот = Ложь;
	КонецЕсли;
	Элементы.НарядЗаказКнопкаОтборПоВидуРабот.Пометка = мОтбиратьПоВидуРабот;
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ВывестиСуммуДолгаПоЛС();
	ЗаполнитьСтрокуСводныхТрудозатрат();
	
	
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	КонтактноеЛицоЗаполнено = ЗначениеЗаполнено(Объект.КонтактноеЛицоЛицевогоСчета) ИЛИ Не ПустаяСтрока(Объект.Удалить_КонтактноеЛицо);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету") И Не КонтактноеЛицоЗаполнено Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указано контактное лицо!", Отказ);
	КонецЕсли;
	
	Если ЭтоПовторноеОбращение И Объект.ПервичноеОбращение.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указано первичное обращение!", Отказ);
	КонецЕсли;
	
	Если Объект.СтатусВыполнения = ПредопределенноеЗначение("Перечисление.КВП_ВидыСтатусовВыполненияРабот.Выполнено")
	 И Объект.ВремяФактическогоОкончанияРабот > Объект.ВремяУдобноеДляЗаказчика Тогда
		Объект.Просрочена = Истина;
	Иначе
		Объект.Просрочена = Ложь;
	КонецЕсли;
	
	Если Объект.ВидОперации = 
	  ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоДому") 
	  И ЗначениеЗаполнено(Объект.ЛицевойСчет) Тогда
		Объект.ЛицевойСчет                 = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка");
		Объект.Помещение                   = ПредопределенноеЗначение("Справочник.УПЖКХ_Помещения.ПустаяСсылка");
		Объект.Телефон                     = "";
		Объект.ДоговорКонтрагента          = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		Объект.КонтактноеЛицоЛицевогоСчета = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
	КонецЕсли;
	
	
	
	
	
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПослеЗаписи" формы.
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("КВП_ЗаявкаНаВыполнениеРабот",
																		"ОтборЗаявокПоВидуРабот", мОтбиратьПоВидуРабот);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
	ВывестиСуммуДолгаПоЛС();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОперации".
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоДому") Тогда
		Объект.Помещение          = "";
		Объект.ЛицевойСчет        = "";
		Объект.ДоговорКонтрагента = "";
	КонецЕсли;
	
	УправлениеВидимостьюЭлементовФормы(ЭтаФорма);
	ОбновитьАдресЗаявки();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВывестиСуммуДолгаПоЛС();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Здание".
Процедура ЗданиеПриИзменении(Элемент)
	
	Если Не Объект.Здание.Пустая() И Не Объект.Здание = мЗдание Тогда
		Объект.Подъезд            = "";
		Объект.Помещение          = "";
		Объект.ЛицевойСчет        = "";
		Объект.ДоговорКонтрагента = "";
	КонецЕсли;
	
	ОбновитьАдресЗаявки();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Здание".
Процедура ЗданиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мЗдание = Объект.Здание;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "При изменении" реквизита "Подъезд"
//
Процедура ПодъездПриИзменении(Элемент)
	
	Если Не Объект.Подъезд.Пустая() И Не Объект.Подъезд = мПодъезд Тогда
		Объект.Помещение          = "";
		Объект.ЛицевойСчет        = "";
		Объект.ДоговорКонтрагента = "";
	КонецЕсли;
	
	ОбновитьАдресЗаявки();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" реквизита "Подъезд"
//
Процедура ПодъездНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мПодъезд = Объект.Подъезд;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "При изменении" реквизита "Помещение."
//
Процедура ПомещениеПриИзменении(Элемент)
	
	Если Не Объект.Помещение.Пустая() И Не Объект.Помещение = мПомещение Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Здание) Тогда
			Объект.Здание = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Помещение, "Владелец")
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Подъезд) Тогда
			Объект.Подъезд = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Помещение, "Подъезд");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ЛицевойСчет) Тогда
			Объект.ЛицевойСчет        = "";
			Объект.ДоговорКонтрагента = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Объект.Помещение.Пустая() Тогда
		
		МассивЛицевыхСчетов = ПолучитьМассивЛС(Объект.Помещение, Объект.Дата, "Помещение");
		Если МассивЛицевыхСчетов.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В выбранном помещении нет открытых лицевых счетов.");
		ИначеЕсли МассивЛицевыхСчетов.Количество() = 1 Тогда
			Элементы.ЛицевойСчет.РежимВыбораИзСписка = Ложь;
			Элементы.ЛицевойСчет.КнопкаВыбора        = Истина;
			Объект.ЛицевойСчет = МассивЛицевыхСчетов[0];
			ЛицевойСчетПриИзменении(Элементы.ЛицевойСчет);
		Иначе
			Элементы.ЛицевойСчет.СписокВыбора.Очистить();
			Элементы.ЛицевойСчет.РежимВыбораИзСписка = Истина;
			Элементы.ЛицевойСчет.КнопкаВыбора        = Ложь;
			Для Каждого ЛицевойСчет Из МассивЛицевыхСчетов Цикл
				Элементы.ЛицевойСчет.СписокВыбора.Добавить(ЛицевойСчет);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьАдресЗаявки();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" реквизита "Помещение".
//
Процедура ПомещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мПомещение = Объект.Помещение;
	
	ПомещениеНачалоВыбораНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ЛицевойСчет".
Процедура ЛицевойСчетПриИзменении(Элемент)
	
	Если Не Объект.ЛицевойСчет.Пустая() И Не Объект.ЛицевойСчет = мЛицевойСчет Тогда
		
		Помещение = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ЛицевойСчет, "Адрес");
		
		Если Не ЗначениеЗаполнено(Объект.Помещение) Тогда
			Объект.Помещение = Помещение;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Здание) Тогда
			Объект.Здание = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Помещение, "Владелец")
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Подъезд) Тогда
			Объект.Подъезд = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Помещение, "Подъезд");
		КонецЕсли;
		
		// Заполнение договора взаиморасчетов.
		Объект.ДоговорКонтрагента = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(Объект.ЛицевойСчет, Объект.Дата, "Договор");
		
		// Заполнение контактного лица.
		Объект.КонтактноеЛицоЛицевогоСчета = ПолучитьКонтактноеЛицоПоЛицевомуСчетуНаСервере(Объект.ЛицевойСчет, Объект.Дата);
		
	КонецЕсли;
	
	ОбновитьАдресЗаявки();
	ОбновитьТелефонКонтактногоЛица();
	
	ВывестиСуммуДолгаПоЛС();
	
	УстановитьПараметрыСвязиПоляВыбораЛицевогоСчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" реквизита "ЛицевойСчет".
Процедура ЛицевойСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мЛицевойСчет = Объект.ЛицевойСчет;
	
	ЛицевойСчетНачалоВыбораНаСервере();
	
	Если Не ЗначениеЗаполнено(Объект.Помещение) Тогда
		
		Если ЗначениеЗаполнено(Объект.Подъезд) Тогда
			МассивЛицевыхСчетов = ПолучитьМассивЛС(Объект.Подъезд, Объект.Дата, "Подъезд");
		ИначеЕсли ЗначениеЗаполнено(Объект.Здание) Тогда
			МассивЛицевыхСчетов = ПолучитьМассивЛС(Объект.Здание, Объект.Дата, "Здание");
		КонецЕсли;
		
		Если Не МассивЛицевыхСчетов = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			
			ЗначениеОтбора = Новый Структура("Ссылка", МассивЛицевыхСчетов);
			ПараметрыОткрытия = Новый Структура("РежимВыбора, ВыборГруппИЭлементов, ИерархическийПросмотр, Отбор", Истина, Ложь, Ложь, ЗначениеОтбора);
			
			ОткрытьФорму("Справочник.КВП_ЛицевыеСчета.Форма.ФормаВыбора", ПараметрыОткрытия, Элемент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" реквизитов формы.
Процедура РеквизитОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ЛицевойСчет                 = "";
	Объект.КонтактноеЛицоЛицевогоСчета = "";
	ДолгПоТекущемуЛС                   = "";
	Объект.ДоговорКонтрагента          = "";
	
	Если Элемент.Имя = "Подъезд" Тогда
		Объект.Помещение = "";
	ИначеЕсли Элемент.Имя = "Здание" Тогда
		Объект.Помещение = "";
		Объект.Подъезд   = "";
	КонецЕсли;
	
	ОбновитьАдресЗаявки();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" поля "ГиперссылкаРеализацияТоваровУслуг".
Процедура ГиперссылкаРеализацияТоваровУслугНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если (Объект.ПометкаУдаления) И Не ЗначениеЗаполнено(Объект.РеализацияТоваровУслуг) Тогда
		ПоказатьПредупреждение(Неопределено, "Реализацию товаров и услуг нельзя вводить на основании документа, помеченного на удаление.");
		Возврат;
	КонецЕсли;
	
	Если Объект.РеализацияТоваровУслуг.Пустая() Тогда
		ВвестиРеализациюТоваровУслуг();
	Иначе
		ПоказатьЗначение(Неопределено, Объект.РеализацияТоваровУслуг);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" поля "ГиперссылкаТребованиеНакладная".
Процедура ГиперссылкаТребованиеНакладнаяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если (Объект.ПометкаУдаления) И Не ЗначениеЗаполнено(Объект.ТребованиеНакладная) Тогда
		ПоказатьПредупреждение(Неопределено, "Требование-накладную нельзя вводить на основании документа, помеченного на удаление");
		Возврат;
	КонецЕсли;

	Если Объект.ТребованиеНакладная.Пустая() Тогда
		ВвестиТребованиеНакладную();
	Иначе
		ПоказатьЗначение(Неопределено, Объект.ТребованиеНакладная);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КонтактноеЛицо".
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	ОбновитьТелефонКонтактногоЛица();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// Закладка "Основные сведения".

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОтветственныйЗаВыполнение".
Процедура ОтветственныйЗаВыполнениеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОтветственныйЗаВыполнение) Тогда
		
		Объект.СтатусВыполнения = ПредопределенноеЗначение("Перечисление.КВП_ВидыСтатусовВыполненияРабот.Принята");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ЭтоПовторноеОбращение".
Процедура ЭтоПовторноеОбращениеПриИзменении(Элемент)
	
	Если Не ЭтоПовторноеОбращение Тогда
		Объект.ПервичноеОбращение = ПредопределенноеЗначение("Документ.КВП_ЗаявкаНаВыполнениеРабот.ПустаяСсылка");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПервичноеОбращение".
Процедура ПервичноеОбращениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Создаем массив наименований всех возможных отборов.
	МассивПараметровОтбора = Новый Массив;
	МассивПараметровОтбора.Добавить("ВидОперации");
	МассивПараметровОтбора.Добавить("КатегорияВыполняемыхРабот");
	МассивПараметровОтбора.Добавить("Здание");
	МассивПараметровОтбора.Добавить("Подъезд");
	МассивПараметровОтбора.Добавить("Помещение");
	МассивПараметровОтбора.Добавить("ЛицевойСчет");
	
	// Записываем в структуру только те отборы, которые заполнены.
	СтруктураПараметровОтбора = Новый Структура;
	
	Для Каждого ЭлементОтбора Из МассивПараметровОтбора Цикл
		Если ЗначениеЗаполнено(Объект[ЭлементОтбора]) Тогда
			СтруктураПараметровОтбора.Вставить(ЭлементОтбора, Объект[ЭлементОтбора]);
		КонецЕсли;
	КонецЦикла;
	
	// Получаем форму, устанавливаем отборы и открываем.
	ПараметрыОткрытия = Новый Структура("РежимВыбора, Отбор", Истина, СтруктураПараметровОтбора);
	ФормаВыбора = ПолучитьФорму("ЖурналДокументов.КВП_ЗаявкиНаВыполнениеРабот.Форма.ФормаСписка", ПараметрыОткрытия, Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПервичноеОбращение".
Процедура ПервичноеОбращениеПриИзменении(Элемент)
	
	Если Объект.ПервичноеОбращение = Объект.Ссылка Тогда
		
		Объект.ПервичноеОбращение = ПредопределенноеЗначение("Документ.КВП_ЗаявкаНаВыполнениеРабот.ПустаяСсылка");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В качестве первичного обращения нельзя указывать текущий документ!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КонтактноеЛицо".
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ЛицевойСчет) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен лицевой счет!");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Телефон".
Процедура ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокНомеровТелефоновКонтактногоЛица = ПолучитьСписокНомеровТелефоновКонтактногоЛица(Объект.ЛицевойСчет, Объект.КонтактноеЛицоЛицевогоСчета);
	НачальноеЗначение = СписокНомеровТелефоновКонтактногоЛица.НайтиПоЗначению(Объект.Телефон);
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработатьВыборТелефона", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзСписка(ОповещениеОВыборе, СписокНомеровТелефоновКонтактногоЛица, Элемент, НачальноеЗначение);
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет заполнение реквизита "Телефон" выбранным из списка значением.
//
Процедура ОбработатьВыборТелефона(РезультатВыбора, ДопПараметры) Экспорт
	
	Если Не РезультатВыбора = Неопределено Тогда
		Объект.Телефон = РезультатВыбора.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборТелефона()

//////////////////////////////////////////////////////////////////////////////
// Закладка "Наряд-заказ".

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "Работы".
Процедура РаботыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если мОтбиратьПоВидуРабот И Не ТекущиеДанные = Неопределено Тогда
		Элементы.НарядЗаказ.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидРабот", ТекущиеДанные.ВидРабот);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РаботыВидРабот".
Процедура РаботыВидРаботПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.Работы.ТекущиеДанные;
	ТекСтрокаТабЧасти.НормаТруда = 
		УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекСтрокаТабЧасти.ВидРабот, "НормаТрудаРабочих");
	ТекСтрокаТабЧасти.ОбъемПлан = 1;
	РассчитатьСтрокуТабЧастиРаботы(ТекСтрокаТабЧасти);
	
	Если мОтбиратьПоВидуРабот И Не Элементы.Работы.ТекущиеДанные = Неопределено Тогда
		Элементы.НарядЗаказ.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидРабот", Элементы.Работы.ТекущиеДанные.ВидРабот);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РаботыОбъемПлан".
Процедура РаботыОбъемПланПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.Работы.ТекущиеДанные;
	РассчитатьСтрокуТабЧастиРаботы(ТекСтрокаТабЧасти);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РаботыОбъемФакт".
Процедура РаботыОбъемФактПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.Работы.ТекущиеДанные;
	РассчитатьСтрокуТабЧастиРаботы(ТекСтрокаТабЧасти);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РаботыОбъемФакт".
Процедура РаботыВремяПланПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.Работы.ТекущиеДанные;
	Если Не ТекСтрокаТабЧасти.НормаТруда = 0 Тогда
		ТекСтрокаТабЧасти.ОбъемПлан = ТекСтрокаТабЧасти.ВремяПлан / ТекСтрокаТабЧасти.НормаТруда;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РаботыВремяФакт".
Процедура РаботыВремяФактПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.Работы.ТекущиеДанные;
	Если Не ТекСтрокаТабЧасти.НормаТруда = 0 Тогда
		ТекСтрокаТабЧасти.ОбъемФакт = ТекСтрокаТабЧасти.ВремяФакт / ТекСтрокаТабЧасти.НормаТруда;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НарядЗаказ".
Процедура НарядЗаказПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.НарядЗаказ.ТекущиеДанные;
	РассчитатьСтрокуТабЧастиНарядЗаказ(ТекСтрокаТабЧасти);

	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НарядЗаказКоличествоПлан".
Процедура НарядЗаказКоличествоПланПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.НарядЗаказ.ТекущиеДанные;
	РассчитатьСтрокуТабЧастиНарядЗаказ(ТекСтрокаТабЧасти);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НарядЗаказКоличество".
Процедура НарядЗаказКоличествоПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.НарядЗаказ.ТекущиеДанные;
	РассчитатьСтрокуТабЧастиНарядЗаказ(ТекСтрокаТабЧасти);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НарядЗаказЦена".
Процедура НарядЗаказЦенаПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.НарядЗаказ.ТекущиеДанные;
	РассчитатьСтрокуТабЧастиНарядЗаказ(ТекСтрокаТабЧасти);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НарядЗаказСтавкаНДС".
Процедура НарядЗаказСтавкаНДСПриИзменении(Элемент)
	
	ТекСтрокаТабЧасти = Элементы.НарядЗаказ.ТекущиеДанные;
	РассчитатьСтрокуТабЧастиНарядЗаказ(ТекСтрокаТабЧасти);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "НарядЗаказ".
Процедура НарядЗаказПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущаяСтрока = Элементы.Работы.ТекущаяСтрока;
	Если Не Копирование И Не ТекущаяСтрока = Неопределено Тогда
		ЗаполнитьПолеВидРаботНовойСтрокиНарядЗаказ(Отказ, ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры // НарядЗаказПередНачаломДобавления

&НаСервере
// Процедура заполняет поле "ВидРабот" таблицы "НарядЗаказ" текущим значением 
// соответствующего поля таблицы "Работы".
//
Процедура ЗаполнитьПолеВидРаботНовойСтрокиНарядЗаказ(Отказ, НомерСтроки)
	
	ТекСтрока            = Объект.Работы.Получить(НомерСтроки);
	НоваяСтрока          = Объект.НарядЗаказ.Добавить();
	НоваяСтрока.ВидРабот = ТекСтрока.ВидРабот;
	Отказ                = Истина;
	
КонецПроцедуры // ЗаполнитьПолеВидРаботНовойСтрокиНарядЗаказ()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НарядЗаказНоменклатура".
Процедура НарядЗаказНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НарядЗаказ.ТекущиеДанные;
	ВидРабот      = ТекущиеДанные.ВидРабот;
	Номенклатура  = ТекущиеДанные.Номенклатура;
	

	//Склад = ТекущиеДанные.Склад.ПустаяСсылка(); 
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Склад)  тогда
		ТекущиеДанные.Склад = Объект.Склад;
	КонецЕсли;
	ТекущиеДанные.Цена  = ТЗЦеныНоменклатуры(ТекущиеДанные.Номенклатура,ТекущиеДанные.Склад);
		Если ТекущиеДанные.Цена = 0 Тогда
				  НомСтроки = ТекущиеДанные.НомерСтроки - 1;
				  Сообщение = Новый СообщениеПользователю();
			      Сообщение.Текст = "нету товара на этом складе! Цена заполняеться в ручную";
			      Сообщение.Поле  =  "НарядЗаказ[" + НомСтроки + "].Цена";
			      Сообщение.ПутьКДанным = "Объект";
				  //Сообщение.КлючДаных = ЭтотОбъект;
			      Сообщение.сообщить();
               КонецЕсли;

	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
		//Если Не Номенклатура = Неопределено И Не Номенклатура.Пустая() Тогда
	//	ЗаполнитьДанныеНоменклатурыНарядЗаказа(ВидРабот, Номенклатура);
		//ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ТипЦен);
	//Иначе
		//ТекущиеДанные.ЕдиницаИзмерения = "";
		//ТекущиеДанные.Количество       = 0;
		////ТекущиеДанные.КоличествоПлан   = 0;
		//ТекущиеДанные.СтавкаНДС        = "";
		////ТекущиеДанные.Сумма            = 0;
		//ТекущиеДанные.СуммаНДС         = 0;
		//ТекущиеДанные.СуммаПлан        = 0;
		//ТекущиеДанные.Цена             = ТекущиеДанные.КоличествоПлан * ТекущиеДанные.Сумма;
		//
	//КонецЕсли;
	ОбновитьИтоги(ЭтаФорма);


	
КонецПроцедуры // НарядЗаказНоменклатураПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПризнакНеисправности".
//
Процедура ПризнакНеисправностиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПризнакНеисправности) Тогда
		
		Если Объект.Работы.Количество() > 0 Тогда 
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьТЧПоПризнакуНеисправностиЗавершение", ЭтотОбъект),
				   "Табличные части будут заполнены по признаку неисправности. Очистить?", 
				   РежимДиалогаВопрос.ДаНет, , 
				   КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьТабличныеЧастиПоПризнакуНеисправности();
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ТипЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет строку поля "НарядЗаказ" данными быбранного элемента "Номенклатура".
Процедура ЗаполнитьДанныеНоменклатурыНарядЗаказа(ВидРабот, Номенклатура)
	
	ПараметрыОтбора                = Новый Структура("ВидРабот, Номенклатура");
	ПараметрыОтбора.ВидРабот       = ВидРабот;
	ПараметрыОтбора.Номенклатура   = Номенклатура;
	НайденныеСтроки                = Объект.НарядЗаказ.НайтиСтроки(ПараметрыОтбора);
	
	Если Не НайденныеСтроки.Количество() = 0 Тогда
		
		Для Каждого ТекущиеДанные Из НайденныеСтроки Цикл
			
			Номенклатура                   = ТекущиеДанные.Номенклатура;
			ТекущийВидРаботНарядЗаказ      = ТекущиеДанные.ВидРабот;
			ТекущиеДанные.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
			ТекущиеДанные.СтавкаНДС        = Номенклатура.СтавкаНДС;
			
			СтрокаТаблицыРаботыПоВидуРабот = Объект.Работы.Выгрузить().Найти(ТекущийВидРаботНарядЗаказ, "ВидРабот");
			Если Не СтрокаТаблицыРаботыПоВидуРабот = Неопределено Тогда
				ОбъемПлан = СтрокаТаблицыРаботыПоВидуРабот.ОбъемПлан;
				ОбъемФакт = СтрокаТаблицыРаботыПоВидуРабот.ОбъемФакт;
			Иначе
				ОбъемПлан = 0;
				ОбъемФакт = 0;
			КонецЕсли;
			
			СтрокаПоиска = ТекущийВидРаботНарядЗаказ.СоставРабот.Найти(Номенклатура, "Номенклатура");
			Если Не СтрокаПоиска = Неопределено Тогда
				// Если объем выполняемых работ равен 0
				Если СтрокаПоиска.Коэффициент = 0 Тогда
					ТекущиеДанные.КоличествоПлан = 0;
					ТекущиеДанные.Количество     = 0;
				Иначе
					ТекущиеДанные.КоличествоПлан = СтрокаПоиска.Количество 
												   / СтрокаПоиска.Коэффициент 
												   * ОбъемПлан;
					ТекущиеДанные.Количество     = СтрокаПоиска.Количество 
												   / СтрокаПоиска.Коэффициент 
												   * ОбъемФакт;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДанныеНоменклатурыНарядЗаказа()

//////////////////////////////////////////////////////////////////////////////
// Закладка "Выполнение".

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СтатусВыполнения".
Процедура СтатусВыполненияПриИзменении(Элемент)
	
	Объект.ВремяФактическогоОкончанияРабот = Объект.ВремяУдобноеДляЗаказчика;
	
	УправлениеФормой(ЭтаФорма);
	
	Если Объект.СтатусВыполнения = ПредопределенноеЗначение("Перечисление.КВП_ВидыСтатусовВыполненияРабот.Выполнено")Тогда
		Объект.ОценкаВыполнения = ?(ЗначениеЗаполнено(Объект.ОценкаВыполнения), 
									Объект.ОценкаВыполнения, 
									ПредопределенноеЗначение("Перечисление.КВП_ВидыОценокВыполненияРабот.Хорошо"));
		Объект.ФлагВыполнения = Истина;
	Иначе
		Объект.ФлагВыполнения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" элементов дат начала и окончания работ.
Процедура ВремяНачалаОкончанияРаботПриИзменении(Элемент)
	
	Если Не Объект.ВремяФактическогоОкончанияРабот = Дата(1,1,1)
	   И Объект.ВремяФактическогоНачалаРабот > Объект.ВремяФактическогоОкончанияРабот Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Время начала работ не может быть больше времени окончания работ!");
			Объект.ВремяФактическогоНачалаРабот = Объект.ВремяФактическогоОкончанияРабот;
			
	КонецЕсли;
	
	ЗаполнитьСтрокуСводныхТрудозатрат();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КнопкаФактПоПлану".
Процедура КнопкаФактПоПлану(Команда)
	
	Для Каждого ТекСтрока Из Объект.Работы Цикл
		ТекСтрока.ОбъемФакт = ТекСтрока.ОбъемПлан;
		РассчитатьСтрокуТабЧастиРаботы(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КнопкаОтборПоВидуРабот".
Процедура КнопкаОтборПоВидуРабот(Команда)
	
	мОтбиратьПоВидуРабот = Не мОтбиратьПоВидуРабот;
	Элементы.НарядЗаказКнопкаОтборПоВидуРабот.Пометка = мОтбиратьПоВидуРабот;
	Если мОтбиратьПоВидуРабот И Не Элементы.Работы.ТекущиеДанные = Неопределено Тогда
		Элементы.НарядЗаказ.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидРабот", Элементы.Работы.ТекущиеДанные.ВидРабот);
	Иначе
		Элементы.НарядЗаказ.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.НарядЗаказ.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект),
					   "Табличная часть """"Наряд-Заказ"""" содержит строки! Очистить?", 
					   РежимДиалогаВопрос.ДаНет, , 
					   КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьФрагмент();
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "КомандаЗаполнить()".
Процедура КомандаЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.НарядЗаказ.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьФрагмент();
	
КонецПроцедуры // КомандаЗаполнитьЗавершение()

&НаКлиенте
// Процедура заполняет таблицу "НарядЗаказ".
Процедура КомандаЗаполнитьФрагмент()
	
	ЗаполнитьСоставЗаказНарядаНаСервере();
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ТипЦен);
	
КонецПроцедуры // КомандаЗаполнитьФрагмент()

&НаКлиенте
// Обработчик команды "ОткрытьПримечанияКЛС".
Процедура ОткрытьПримечанияКЛС(Команда)
	
	ФормаПримечаний = 
		ПолучитьФорму("РегистрСведений.КВП_ПримечанияКЛицевымСчетам.ФормаСписка", 
						Новый Структура("Отбор", Новый Структура("ЛицевойСчет", Объект.ЛицевойСчет)), ЭтаФорма);
	ФормаПримечаний.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЦеныИВалютаНажатие".
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ТипЦен);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик кнопки печати.
//
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

//++егор. заполнение таблиц из данных по виду работ
&НаКлиенте
Процедура РаботыПриИзменении(Элемент)
	//РаботыПриИзмененииНаСервере();
КонецПроцедуры


Функция ТЗЦеныНоменклатуры(Товар,Склад)
	
	Запрос = Новый Запрос;
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК СуммаОборот,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборот) КАК КоличествоОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(, &дата,,, ,Субконто1 = &Товар и Субконто2 = &Склад, )  КАК ХозрасчетныйОбороты	 
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Счет"; 
	
	//Месяц = Месяц(Объект.Дата); 
	//Год = Год(Объект.Дата);
	//Если Месяц = 2 Тогда
	//	Дата = Дата(Год,Месяц,28, 5, 0,0);
	//Иначе
	//	Дата = Дата(Год,Месяц,30, 5, 0,0);
	//КонецЕсли;	
	
	Дата = КонецМесяца(Объект.Дата)-(19*60*60-1); 
	Запрос.УстановитьПараметр("Товар", Товар);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("дата", дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Запрос.Выполнить().Пустой() Тогда

				  цена = 0;
	КонецЕсли;

	Пока Выборка.Следующий() Цикл
		Если Выборка.Субконто1 = Товар тогда
				  цена = Выборка.СуммаОборот  / Выборка.КоличествоОборот ;
		КонецЕсли;
	КонецЦикла; 
   возврат Цена;
   
КонецФункции

//кнопка заполнение таблиц
&НаСервере
Процедура ЗаполнитьТаблицыНаСервере()
	
	
		  //ТЗ = ТЗЦеныНоменклатуры();

	
	
	Для Каждого ТекСтрокаРаботы Из Объект.Работы Цикл
		ТекВидРабот = ТекСтрокаРаботы.ВидРабот;
		Для Каждого ТекСтрокаСоставаРабот Из ТекВидРабот.СоставРабот Цикл
			
			НоваяСтрока = Объект.НарядЗаказ.Добавить();
			
			НоваяСтрока.ВидРабот         = ТекСтрокаРаботы.ВидРабот;
			НоваяСтрока.Номенклатура     = ТекСтрокаСоставаРабот.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаСоставаРабот.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.СтавкаНДС        = ТекСтрокаСоставаРабот.Номенклатура.СтавкаНДС;
			НоваяСтрока.Цена             = ТЗЦеныНоменклатуры(ТекСтрокаСоставаРабот.Номенклатура,объект.Склад);
			Если НоваяСтрока.Цена = 0 Тогда
				  НомСтроки = НоваяСтрока.НомерСтроки - 1;
				  Сообщение = Новый СообщениеПользователю();
			      Сообщение.Текст = "нету товара на этом складе! Цена заполняеться в ручную";
			      Сообщение.Поле  =  "НарядЗаказ[" + НомСтроки + "].Цена";
			      Сообщение.ПутьКДанным = "Объект";
				  //Сообщение.КлючДаных = ЭтотОбъект;
			      Сообщение.сообщить();
               КонецЕсли;
				 
           			
			// Если объем выполняемых работ равен 0
			Если ТекСтрокаСоставаРабот.Коэффициент = 0 Тогда
				НоваяСтрока.КоличествоПлан = 0;
				НоваяСтрока.Количество	   = 0;
			Иначе
				НоваяСтрока.КоличествоПлан   = ТекСтрокаСоставаРабот.Количество 
											 / ТекСтрокаСоставаРабот.Коэффициент 
											 * ТекСтрокаРаботы.ОбъемПлан;
				НоваяСтрока.Количество       = ТекСтрокаСоставаРабот.Количество 
											 / ТекСтрокаСоставаРабот.Коэффициент 
											 * ТекСтрокаРаботы.ОбъемФакт;
			КонецЕсли;
			НоваяСтрока.СуммаПлан        = НоваяСтрока.Цена * НоваяСтрока.КоличествоПлан;
			НоваяСтрока.Сумма            = НоваяСтрока.Цена * НоваяСтрока.Количество;
		КонецЦикла;
	КонецЦикла;
	
		
		
		
	  Для Каждого ТекСтрокаРаботы Из Объект.Работы Цикл
		ТекВидРабот = ТекСтрокаРаботы.ВидРабот;		
		//заполнение состава работников
		Для Каждого ТекСтрокаСоставаЗвена Из ТекВидРабот.СоставЗвена Цикл
		      НоваяСтрока = Объект.СоставЗвена.Добавить();
			  
			  НоваяСтрока.Должность   =  ТекСтрокаСоставаЗвена.Должность;
			  НоваяСтрока.ВидРабот    = ТекСтрокаРаботы.ВидРабот;
			  НоваяСтрока.Тариф       =  ТекСотр(НоваяСтрока.Должность);

			  НоваяСтрока.ВремяРаботы =  ТекСтрокаСоставаЗвена.ВремяПлан;
			  НоваяСтрока.Сумма       =  НоваяСтрока.Тариф * ТекСтрокаСоставаЗвена.ВремяПлан;
        
		  КонецЦикла;
		    //заполнение таблицы механизмы
	     Для Каждого ТекСтрокаМашиныИМеханизмы Из ТекВидРабот.СоставМеханизмы Цикл
		      НоваяСтрока = Объект.МашиныИМеханизмы.Добавить();
			  
			  
			  Если ТекСтрокаМашиныИМеханизмы.Механизмы.Наименование = "Лифт" Тогда
	   		 Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("адрес", Объект.Адрес);
				Запрос.Текст = 
						"ВЫБРАТЬ
						|	КВП_ЗданияТехническиеХарактеристики.Элемент,
						|	СУММА(КВП_ЗданияТехническиеХарактеристики.Количество) КАК Количество,
						|	КВП_ЗданияТехническиеХарактеристики.ЕдиницыИзмерения,
						|	КВП_Здания.Наименование
						|ИЗ
						|	Справочник.КВП_Здания.ТехническиеХарактеристики КАК КВП_ЗданияТехническиеХарактеристики
						|
						|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Здания КАК КВП_Здания
						|		ПО КВП_ЗданияТехническиеХарактеристики.Ссылка = КВП_Здания.Ссылка
						|ГДЕ КВП_Здания.Наименование=&адрес 	  	
						|СГРУППИРОВАТЬ ПО
						|	КВП_ЗданияТехническиеХарактеристики.Элемент,
						|	КВП_Здания.Наименование,
						|	КВП_ЗданияТехническиеХарактеристики.ЕдиницыИзмерения";
	
				Выборка = Запрос.Выполнить().Выбрать();

	
				Пока Выборка.Следующий() Цикл
						Если Выборка.Элемент.Наименование = "Лифтовые кабины"  тогда
						 НоваяСтрока.Время  = Выборка.Количество;
						 НоваяСтрока.Цена   = 0;
				 
					КонецЕсли;
				КонецЦикла;
 
			  Иначе
				 НоваяСтрока.Цена          =  ТекСтрокаМашиныИМеханизмы.Цена;
				 НоваяСтрока.Время         =  ТекСтрокаМашиныИМеханизмы.Время;
			  КонецЕсли;
			  
			  НоваяСтрока.ВидРабот         =  ТекСтрокаРаботы.ВидРабот;
			  НоваяСтрока.ВидТехники       =  ТекСтрокаМашиныИМеханизмы.Механизмы;  
			  НоваяСтрока.Сумма            =  ТекСтрокаМашиныИМеханизмы.Время * ТекСтрокаМашиныИМеханизмы.Цена;
			  
			  
			  
					  
					  
			  
		
		




	КонецЦикла;
	 КонецЦикла;
	//ЗаполнитьСоставЗаказНарядаНаСервере();
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицы(Команда)
	
	
    Если Объект.СоставЗвена.Количество() > 0 Тогда
		           Режим = РежимДиалогаВопрос.ДаНет;
Текст = "ru = ""Табличные части содержат строки! Очистить?"";"
     + " en = ""Do you want to continue?""";
Ответ = Вопрос(НСтр(Текст), Режим, 0);
Если Ответ = КодВозвратаДиалога.Нет Тогда
       ЗаполнитьТаблицыНаСервере();
 иначе
	   объект.СоставЗвена.Очистить();
	   объект.НарядЗаказ.Очистить();
       объект.МашиныИМеханизмы.Очистить();

	   ЗаполнитьТаблицыНаСервере();


КонецЕсли;              
иначе
 ЗаполнитьТаблицыНаСервере();


	КонецЕсли;

	КонецПроцедуры
 
&НаСервере
	Функция ТекСотр(сотрудник)
		СпрСотр = Справочники.ШтатноеРасписание;
		НайтиСотр = СпрСотр.НайтиПоНаименованию(сотрудник);
		ТекСотр =  НайтиСотр.ТарифнаяСтавкаСДоплатой;
		возврат ТекСотр;

	КонецФункции

&НаКлиенте
	Процедура СоставЗвенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СоставЗвена.ТекущиеДанные;
	сотрудник = СтрокаТабличнойЧасти.Должность;
	//СтрокаТабличнойЧасти.Тариф = ТекСотр(сотрудник);
	
    СтрокаТабличнойЧасти.Сумма =  СтрокаТабличнойЧасти.Тариф * СтрокаТабличнойЧасти.ВремяРаботы;
	ОбновитьИтоги(ЭтаФорма);
		//СоставЗвенаМастерПриИзмененииНаСервере();

	КонецПроцедуры


&НаКлиенте
	Процедура МашиныИМеханизмыПриИзменении(Элемент)
		
	СтрокаТабличнойЧасти = Элементы.МашиныИМеханизмы.ТекущиеДанные;
    СтрокаТабличнойЧасти.Сумма =  СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Время;
	ОбновитьИтоги(ЭтаФорма);

	КонецПроцедуры

&НаСервере
	Процедура НарядЗаказПриИзмененииНаСервере()
 
		
	КонецПроцедуры

&НаКлиенте
	Процедура ПоВсемСкладамПриИзменении(Элемент)
		//Если Объект.ПоВсемСкладам = Истина тогда
		 ЭтаФорма.Элементы.Склад.Доступность = НЕ Объект.ПоСкладам;
		//Складтолькопросмотр ();
		//КонецЕсли;
	КонецПроцедуры

&НаКлиенте
	Процедура МестоПроведенияРаботПриИзменении(Элемент)
			Если      Объект.МестоПроведенияРабот = "Подъезд" или Объект.МестоПроведенияРабот = "Лифт"  Тогда
			   ЭтаФорма.Элементы.Подъезд.Видимость = истина;
			   Этаформа.Элементы.Помещение.Видимость = ложь;
		   ИначеЕсли Объект.МестоПроведенияРабот = "Помещение"  тогда
			   ЭтаФорма.Элементы.Подъезд.Видимость = истина;
			   Этаформа.Элементы.Помещение.Видимость = истина;
		   
		   Иначе 
			   ЭтаФорма.Элементы.Подъезд.Видимость = ложь;
			   Этаформа.Элементы.Помещение.Видимость = ложь;
		КонецЕсли;
	КонецПроцедуры

&НаСервере
Функция ПолучитьЕдИЗМ(Номенклатура)
	     ТекНом = Справочники.Номенклатура.НайтиПоНаименованию(Номенклатура);
		ЕдИзм = ТекНом.ЕдиницаИзмерения;
		Возврат ЕдИзм;
КонецФункции

&НаКлиенте
Процедура МашиныИМеханизмыВидТехникиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.МашиныИМеханизмы.ТекущиеДанные;
	СтрокаТабличнойЧасти.цена = ЦенаНаМех(СтрокаТабличнойЧасти.ВидТехники, Объект.Дата);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
	Функция ЦенаНаМех(Мех,Дата)
		СпрЦена = Справочники.ПереченьТарифовНаАвтотранспорт;
		НайтиЦену = СпрЦена.НайтиПоНаименованию(Мех);
		//поменять на производственый календарь
		Если ДеньНедели(Дата) > 5 тогда 
			ТекЦена =  НайтиЦену.РаботаВВыходнойДень;
		Иначе
			ТекЦена =  НайтиЦену.РаботаВБуднийДень;	
		конецЕсли;
		
		возврат ТекЦена;

	КонецФункции


&НаКлиенте
Процедура СоставЗвенаДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрТабЧ = Элементы.СоставЗвена.ТекущиеДанные;
	СтрТабЧ.Тариф = НайтиТариф(ВыбранноеЗначение);
	СтрТабЧ.Должность = ВыбранноеЗначение;
КонецПроцедуры

функция НайтиТариф(ВыбранноеЗначение)
	Возврат ВыбранноеЗначение.ТарифнаяСтавкаСДоплатой;
КонецФункции


&НаКлиенте
Процедура НарядЗаказСкладПриИзменении(Элемент)
		СтрокаТабЧасти = Элементы.НарядЗаказ.ТекущиеДанные;
	//Товар = ;
	//Склад = ;
	//СтрокаТабЧасти.Цена = 0;
	СтрокаТабЧасти.Цена = ТЗЦеныНоменклатуры(СтрокаТабЧасти.Номенклатура,СтрокаТабЧасти.Склад);
			Если СтрокаТабЧасти.Цена = 0 Тогда
				  НомСтроки = СтрокаТабЧасти.НомерСтроки - 1;
				  Сообщение = Новый СообщениеПользователю();
			      Сообщение.Текст = "нету товара на этом складе! Цена заполняеться в ручную";
			      Сообщение.Поле  =  "НарядЗаказ[" + НомСтроки + "].Цена";
			      Сообщение.ПутьКДанным = "Объект";
				  //Сообщение.КлючДаных = ЭтотОбъект;
			      Сообщение.сообщить();
               КонецЕсли;

КонецПроцедуры

