
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета Экспорт; //Хранит валюту регламентного учета.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура выполняет движения по регистрам.
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ДвиженияРасходМатериалов = Движения.КВП_РасходМатериаловПоВыполненнымРаботам;
	
	Для Каждого ТекСтрокаРаботы Из Работы Цикл
		
		ВидРабот        = ТекСтрокаРаботы.ВидРабот;
		КоличествоРабот = ТекСтрокаРаботы.ОбъемФакт;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ВидРабот", ТекСтрокаРаботы.ВидРабот);
		
		СтрокиРасхода = НарядЗаказ.НайтиСтроки(ПараметрыПоиска);
		
		Для Каждого ТекСтрока Из СтрокиРасхода Цикл
		
			НовоеДвижение = ДвиженияРасходМатериалов.Добавить();
			НовоеДвижение.Период = СтруктураШапкиДокумента.Дата;
			НовоеДвижение.Организация     = СтруктураШапкиДокумента.Организация;
			Если ВидОперации = Перечисления.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету Тогда
				НовоеДвижение.Объект      = СтруктураШапкиДокумента.ЛицевойСчет;
			Иначе
				НовоеДвижение.Объект      = СтруктураШапкиДокумента.Здание;
			КонецЕсли;
			
			НовоеДвижение.КатегорияВыполняемыхРабот = СтруктураШапкиДокумента.КатегорияВыполняемыхРабот;
			НовоеДвижение.Номенклатура    = ТекСтрока.Номенклатура;
			НовоеДвижение.ВидРабот        = ТекСтрокаРаботы.ВидРабот;
			
			НовоеДвижение.КоличествоРабот = ТекСтрокаРаботы.ОбъемФакт;
			НовоеДвижение.КоличествоПлан  = ТекСтрока.КоличествоПлан;
			НовоеДвижение.СуммаПлан       = ТекСтрока.СуммаПлан;
			
			Если СтруктураШапкиДокумента.СтатусВыполнения = Перечисления.КВП_ВидыСтатусовВыполненияРабот.Выполнено Тогда
				НовоеДвижение.КоличествоФакт  = ТекСтрока.Количество;
				НовоеДвижение.СуммаФакт       = ТекСтрока.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТА

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("ОтветственныйЗаВыполнение");
	
	// Укажем, что надо проверить:
	Если ВидОперации = Перечисления.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету Тогда
		ПроверяемыеРеквизиты.Добавить("ЛицевойСчет");
	Иначе
		ПроверяемыеРеквизиты.Добавить("Здание");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтактноеЛицоЛицевогоСчета) И Не ПустаяСтрока(Удалить_КонтактноеЛицо) Тогда
		Удалить_КонтактноеЛицо = "";
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
Процедура ОбработкаПроведения(Отказ, РежимЗаписи, РежимПроведения)
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр РасходМатериалов
	сч=0;

	Для Каждого ТекСтрокаНарядЗаказ Из НарядЗаказ Цикл
				
		Движение = Движения.РасходМатериалов.Добавить();
		Движение.Период = Дата+сч;
		Движение.Склад = ТекСтрокаНарядЗаказ.Склад;
		Движение.Подразделение = Подразделение;
		Движение.Здание = Здание;
		Движение.КатегорияВыполняемыхРабот = КатегорияВыполняемыхРабот;
		Движение.ВидРаботы = ТекСтрокаНарядЗаказ.ВидРабот;
		Движение.Номенклатура = ТекСтрокаНарядЗаказ.Номенклатура;
		Движение.Цена = ТекСтрокаНарядЗаказ.Цена;
		Движение.Сумма = ТекСтрокаНарядЗаказ.Сумма;
		Движение.Количество = ТекСтрокаНарядЗаказ.Количество;
		Движение.ЕдиницаИзмерения = ТекСтрокаНарядЗаказ.ЕдиницаИзмерения;
		Движение.ОтветственныйЗаВыполнение = ОтветственныйЗаВыполнение;
		Движение.СтатусВыполнения = СтатусВыполнения;
		Движение.ФлагВыполнения = ФлагВыполнения;
		Движение.МестоПроведенияРабот = МестоПроведенияРабот;
		Движение.Ответственный = Ответственный;
		  для каждого текстрока из работы цикл
		Движение.ВидРаботы = текстрока.ВидРабот;
		КонецЦикла;
		сч=сч+1;
	КонецЦикла;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецЕсли