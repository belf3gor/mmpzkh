#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение

// Функция возвращает параметры проведения.
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	Реквизиты.Организация,
	|	Реквизиты.Здание,
	|	Реквизиты.ЛицевойСчет,
	|	Реквизиты.КатегорияВыполняемыхРабот,
	|	Реквизиты.СтатусВыполнения
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Реквизиты = Новый Структура("Ссылка,Дата,Организация,Здание,ЛицевойСчет,КатегорияВыполняемыхРабот,СтатусВыполнения");
	
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	
	Возврат ПараметрыПроведения;
	
КонецФункции

// Функция получает структуру задолженность/валюта по текущему лицевому счету.
//
Функция ПолучитьСтруктуруДолгВалюта(Организация, ЛицевойСчет, Дата) Экспорт
	
	ЗапросПоНачислениям = Новый Запрос;
	ЗапросПоНачислениям.УстановитьПараметр("Организация",   Организация);
	ЗапросПоНачислениям.УстановитьПараметр("ДатаДокумента", Дата);
	ЗапросПоНачислениям.УстановитьПараметр("ЛицевойСчет",   ЛицевойСчет);
	
	ЗапросПоНачислениям.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаДолга
	|ПОМЕСТИТЬ втОстаток
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.ВалютаВзаиморасчетов.Ссылка КАК Валюта,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ втВалютаДляВзаиморасчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаДокумента, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|ГДЕ
	|	НЕ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстаток.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(втОстаток.СуммаДолга) КАК СуммаДолга,
	|	втВалютаДляВзаиморасчетов.Валюта
	|ИЗ
	|	втОстаток КАК втОстаток
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВалютаДляВзаиморасчетов КАК втВалютаДляВзаиморасчетов
	|		ПО втОстаток.ЛицевойСчет = втВалютаДляВзаиморасчетов.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втОстаток.ЛицевойСчет,
	|	втВалютаДляВзаиморасчетов.Валюта";
	Выборка = ЗапросПоНачислениям.Выполнить().Выбрать();
	
	СтруктураДолгВалюта = Новый Структура;
	СтруктураДолгВалюта.Вставить("Долг",   0);
	СтруктураДолгВалюта.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	
	Если Выборка.Следующий() Тогда
		СтруктураДолгВалюта.Вставить("Долг",   Выборка.СуммаДолга);
		СтруктураДолгВалюта.Вставить("Валюта", Выборка.Валюта);
	КонецЕсли;
	
	Возврат СтруктураДолгВалюта;
	
КонецФункции // ПолучитьСтруктуруДолгВалюта()

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ

// Функция формирует табличный документ заявки.
Функция ПечатьНарядЗаказ(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
//	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НарядЗаказ";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекОбъект Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекОбъект);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КВП_ЗаявкаНаВыполнениеРабот.Номер,
		|	КВП_ЗаявкаНаВыполнениеРабот.Дата,
		|	КВП_ЗаявкаНаВыполнениеРабот.Организация,
		|	КВП_ЗаявкаНаВыполнениеРабот.КатегорияВыполняемыхРабот,
		|	КВП_ЗаявкаНаВыполнениеРабот.ЛицевойСчет,
		|	КВП_ЗаявкаНаВыполнениеРабот.МестоПроведенияРабот,
		|	КВП_ЗаявкаНаВыполнениеРабот.Здание,
		|	КВП_ЗаявкаНаВыполнениеРабот.ТекстЗаявки,
		|	КВП_ЗаявкаНаВыполнениеРабот.Телефон,
		|	ПРЕДСТАВЛЕНИЕ(КВП_ЗаявкаНаВыполнениеРабот.ДоговорКонтрагента) КАК ДоговорКонтрагентаПредставление,
		|	КВП_ЗаявкаНаВыполнениеРабот.ОтветственныйЗаВыполнение,
		|	КВП_ЗаявкаНаВыполнениеРабот.Ответственный,
		|	КВП_ЗаявкаНаВыполнениеРабот.Адрес,
		|	ПРЕДСТАВЛЕНИЕ(КВП_ЗаявкаНаВыполнениеРабот.КонтактноеЛицоЛицевогоСчета) КАК КонтактноеЛицо,
		|	КВП_ЗаявкаНаВыполнениеРабот.ПервичноеОбращение,
		|	ЕСТЬNULL(КВП_ЗаявкаНаВыполнениеРабот.Подъезд.КодДомофона, """") КАК КодДомофона,
		|	КВП_ЗаявкаНаВыполнениеРабот.ВремяУдобноеДляЗаказчика КАК ВремяУдобноеДляЗаказчика,
		|	КВП_ЗаявкаНаВыполнениеРабот.ВремяФактическогоНачалаРабот,
		|	КВП_ЗаявкаНаВыполнениеРабот.ВремяФактическогоОкончанияРабот,
		|	КВП_ЗаявкаНаВыполнениеРабот.ПризнакНеисправности
		|ИЗ
		|	Документ.КВП_ЗаявкаНаВыполнениеРабот КАК КВП_ЗаявкаНаВыполнениеРабот
		|ГДЕ
		|	КВП_ЗаявкаНаВыполнениеРабот.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работы.ВидРабот,
		|   Работы.ВидРабот.Родитель КАК участок,
		|	Работы.НомерСтроки
		|ИЗ
		|	Документ.КВП_ЗаявкаНаВыполнениеРабот.Работы КАК Работы
		|ГДЕ
		|	Работы.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Работы.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НарядЗаказ.Номенклатура.Код КАК Код,
		|	НарядЗаказ.Номенклатура КАК Материал,
		|	НарядЗаказ.ЕдиницаИзмерения КАК ЕдИзм,
		|	НарядЗаказ.Цена КАК Цена,
		|	СУММА(НарядЗаказ.КоличествоПлан) КАК КолвоПлан,
		|	СУММА(НарядЗаказ.Количество) КАК КолвоФакт,
		|	СУММА(НарядЗаказ.СуммаПлан) КАК СуммаПлан,
		|	СУММА(НарядЗаказ.Сумма) КАК СуммаФакт
		|ИЗ
		|	Документ.КВП_ЗаявкаНаВыполнениеРабот.НарядЗаказ КАК НарядЗаказ
		|ГДЕ
		|	НарядЗаказ.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	НарядЗаказ.Номенклатура.Код,
		|	НарядЗаказ.Номенклатура,
		|	НарядЗаказ.ЕдиницаИзмерения,
		|	НарядЗаказ.Цена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоставЗвена.Мастер КАК ФИОМастера,
		|    СоставЗвена.Должность КАК Должность,
		|    СоставЗвена.ВремяРаботы КАК ВремяРаботы,
		|    СоставЗвена.Тариф КАК Тариф,
		|    СоставЗвена.Сумма КАК Сумма
		|ИЗ
		|	Документ.КВП_ЗаявкаНаВыполнениеРабот.СоставЗвена КАК СоставЗвена
		|ГДЕ
		|	СоставЗвена.Ссылка = &ТекущийДокумент";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаПоВидамРабот   = РезультатЗапроса[0].Выбрать();
		ВыборкаПоНоменклатуре = РезультатЗапроса[1].Выбрать();
		ВыборкаИсполнителей   = РезультатЗапроса[2].Выбрать();
		
		// Вывод заголовка
		Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Документ.КВП_ЗаявкаНаВыполнениеРабот.ПФ_MXL_НарядЗаказ");
		ОблШапка = Макет.ПолучитьОбласть("ШапкаЗаказчик");
		
		ПараметрыШапки = Новый Структура;
		ПараметрыШапки.Вставить("НомерДокумента", ВРег(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНомерНаПечать(ТекОбъект.Номер, Истина, Истина)));
		ПараметрыШапки.Вставить("ДатаДокумента",  ВРег(Формат(Шапка.Дата, "ДЛФ=Д")));
		ПараметрыШапки.Вставить("Организация",    Шапка.Организация);
		
		Если ТекОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету Тогда
			
			СтрокаДолга = "";
			
			ТекущийДолгПоЛС = ПолучитьСтруктуруДолгВалюта(Шапка.Организация, Шапка.ЛицевойСчет, Шапка.Дата);
			Если ТекущийДолгПоЛС.Долг > 0 Тогда
				СтрокаДолга = "задолженность - " + ТекущийДолгПоЛС.Долг + " " + ТекущийДолгПоЛС.Валюта;
			ИначеЕсли ТекущийДолгПоЛС.Долг < 0 Тогда
				СтрокаДолга = "переплата - " + (-ТекущийДолгПоЛС.Долг) + " " + ТекущийДолгПоЛС.Валюта;
			КонецЕсли;
			
			СтрокаЗаказчика = Строка(Шапка.ЛицевойСчет)
							+ "; адрес - " + Шапка.Адрес
							+ ?(ЗначениеЗаполнено(Шапка.ДоговорКонтрагентаПредставление), "; договор - " + Шапка.ДоговорКонтрагентаПредставление, "")
							+ ?(Не ПустаяСтрока(СтрокаДолга), "; " + СтрокаДолга, "");
		Иначе
			СтрокаЗаказчика = Строка(Шапка.Адрес);
		КонецЕсли;
		
		Если Не Шапка.КодДомофона = "" Тогда
			СтрокаЗаказчика = СтрокаЗаказчика + " (домофон " + Шапка.КодДомофона + ")";
		КонецЕсли;
		
		ПараметрыШапки.Вставить("Заказчик", СтрокаЗаказчика);
		
		ОблШапка.Параметры.Заполнить(ПараметрыШапки);
		ТабличныйДокумент.Вывести(ОблШапка);
		
		// Выводим строку контактных данных только для работ по лицевому счету.
		Если ТекОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету Тогда
			
			ОблШапка = Макет.ПолучитьОбласть("ШапкаКонтактныеДанные");
			КонтактныеДанные = Шапка.КонтактноеЛицо;
			Если ЗначениеЗаполнено(Шапка.Телефон) Тогда
				КонтактныеДанные = КонтактныеДанные + ", тел. " + Шапка.Телефон;
			КонецЕсли;
			
			ПараметрыШапки = Новый Структура;
			ПараметрыШапки.Вставить("МестоПроведенияРабот", Шапка.МестоПроведенияРабот);
			
			ОблШапка.Параметры.Заполнить(ПараметрыШапки);
			ТабличныйДокумент.Вывести(ОблШапка);
			
		КонецЕсли;
		
		ОблШапка = Макет.ПолучитьОбласть("ШапкаПрочаяИнформация");
		ОблШапка.Параметры.Заполнить(Шапка);
		
		ПараметрыШапки = Новый Структура;
		ПараметрыШапки.Вставить("ТекстЗаявки", СтрЗаменить(Шапка.ТекстЗаявки, Символы.ПС, " "));
		
		МассивСтрокИсполнителей = Новый Массив;
		Пока ВыборкаИсполнителей.Следующий() Цикл
			МассивСтрокИсполнителей.Добавить(ВыборкаИсполнителей.ФИОМастера);
		КонецЦикла;
		
		МассивСтрокУчасток = Новый Массив;
		Пока ВыборкаПоВидамРабот.Следующий() Цикл
			МассивСтрокУчасток.Добавить(ВыборкаПоВидамРабот.участок);
		КонецЦикла;

		
		ПараметрыШапки.Вставить("СоставЗвена", УПЖКХ_ТиповыеМетодыКлиентСервер.СтрокаИзМассиваПодстрок(МассивСтрокИсполнителей, "; ", Истина));
		
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
						|	КВП_ВидыРабот.Ссылка КАК Ссылка,
						|	КВП_ВидыРабот.Представление КАК Представление
						|ИЗ
						|	Справочник.КВП_ВидыРабот КАК КВП_ВидыРабот
						|ГДЕ
						|   КВП_ВидыРабот.Ссылка = &видработ	
						|ИТОГИ ПО
						|
						|   Ссылка ТОЛЬКО ИЕРАРХИЯ ";
						
		Запрос.УстановитьПараметр("видработ", МассивСтрокУчасток[0] );
		РезЗапрос = Запрос.Выполнить();
		выборка = РезЗапрос.Выбрать();
		//МассивВерхнийУровень = Новый Массив;
		Пока выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(выборка.ссылка) тогда
			ПараметрыШапки.Вставить("участок", выборка.ссылка);
			Прервать;
			КонецЕсли;
		КонецЦикла;

		
		
		ОблШапка.Параметры.Заполнить(ПараметрыШапки);
		ТабличныйДокумент.Вывести(ОблШапка);
		
		Если ЗначениеЗаполнено(Шапка.ПризнакНеисправности) Тогда
			ОблШапка = Макет.ПолучитьОбласть("ШапкаПризнакНеисправности");
			ОблШапка.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОблШапка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ПервичноеОбращение) Тогда
			ОблПовторноеОбращение = Макет.ПолучитьОбласть("ПовторнаяЗаявка");
			ОблПовторноеОбращение.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОблПовторноеОбращение);
		КонецЕсли;
		
		ОблШапкаВидыРабот = Макет.ПолучитьОбласть("ШапкаВидыРабот");
		ТабличныйДокумент.Вывести(ОблШапкаВидыРабот);
		
		Пока ВыборкаПоВидамРабот.Следующий() Цикл
		
			Область = Макет.ПолучитьОбласть("ВидРабот");
			Область.Параметры.Заполнить(ВыборкаПоВидамРабот);
			ТабличныйДокумент.Вывести(Область);
			
		КонецЦикла;
		
		// Вывод шапки таблицы
		ОблШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОблШапкаТаблицы);
		
		ИтогоСуммаПлан = 0;
		ИтогоСуммаФакт = 0;
		
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Заполнить(ВыборкаПоНоменклатуре);
			ТабличныйДокумент.Вывести(Область);
			ИтогоСуммаПлан = ИтогоСуммаПлан + ВыборкаПоНоменклатуре.СуммаПлан;
			ИтогоСуммаФакт = ИтогоСуммаФакт + ВыборкаПоНоменклатуре.СуммаФакт;
		КонецЦикла;	
		
			// Вывод итогов
		ОблИтогТаблицы = Макет.ПолучитьОбласть("Итог");
		
		СтруктураИтогов = Новый Структура;
		СтруктураИтогов.Вставить("ИтогоСуммаПлан", ИтогоСуммаПлан);
		СтруктураИтогов.Вставить("ИтогоСуммаФакт", ИтогоСуммаФакт);
		
		ОблИтогТаблицы.Параметры.Заполнить(СтруктураИтогов);
		ТабличныйДокумент.Вывести(ОблИтогТаблицы);
		
		// Вывод Таблицы рабочие
		ОблШапкаТаблицыР = Макет.ПолучитьОбласть("ШапкаТаблицыРабочие");
		ТабличныйДокумент.Вывести(ОблШапкаТаблицыР);
		
		ИтогоСуммаР = 0;
		//ИтогоСуммаФакт = 0;
		
		ВыборкаР   = РезультатЗапроса[2].Выбрать();
		Пока ВыборкаР.Следующий() Цикл
		
			ОбластьВ = Макет.ПолучитьОбласть("СтрокаРабочие");
			ОбластьВ.Параметры.Заполнить(ВыборкаР);
			ТабличныйДокумент.Вывести(ОбластьВ);
			ИтогоСуммаР = ИтогоСуммаР + ВыборкаР.Сумма;
			

			
		КонецЦикла;
		
			ОблИтогТаблицыР = Макет.ПолучитьОбласть("ИтогР");
		
		СтруктураИтоговР = Новый Структура;
		СтруктураИтоговР.Вставить("ИтогоСуммаР", ИтогоСуммаР);
		//СтруктураИтогов.Вставить("ИтогоСуммаФакт", ИтогоСуммаФакт);
		
		ОблИтогТаблицыР.Параметры.Заполнить(СтруктураИтоговР);
		ТабличныйДокумент.Вывести(ОблИтогТаблицыР);

		
	
		
		
		ОблИтогТаблицыВ = Макет.ПолучитьОбласть("ИтогоВсего");
		ИтогиВ =  ИтогоСуммаР + ИтогоСуммаФакт;
		СтруктураИтоговВ = Новый Структура;
		СтруктураИтоговВ.Вставить("ИтогиВ", ИтогиВ);
		ОблИтогТаблицыВ.Параметры.Заполнить(СтруктураИтоговВ);
		ТабличныйДокумент.Вывести(ОблИтогТаблицыВ);

		// Вывод подвала
		Область = Макет.ПолучитьОбласть("Подвал");
		Область.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(Область);
		
	КонецЦикла;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб    = Истина;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьСписаниеТоваров()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НарядЗаказ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НарядЗаказ", "Наряд-заказ", ПечатьНарядЗаказ(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецЕсли
Процедура ПечатьНаряд(ТабДок, Ссылка) Экспорт
	//{{_КОНСТРУКТОР_ПЕЧАТИ(ПечатьНаряд)
	Макет = Документы.ЗаявкаНаВыполнениеРаботТЭУ.ПолучитьМакет("Печать наряд-задание");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЗаявкаНаВыполнениеРабот.Дата,
	|	КВП_ЗаявкаНаВыполнениеРабот.Номер,
	|	КВП_ЗаявкаНаВыполнениеРабот.Организация,
	|	КВП_ЗаявкаНаВыполнениеРабот.Подразделение,
	|	КВП_ЗаявкаНаВыполнениеРабот.Работы.(
	|		НомерСтроки,
	|		ВидРабот,
	|		ВремяФакт,
	|		ОбъемФакт
	|	),
	|	КВП_ЗаявкаНаВыполнениеРабот.НарядЗаказ.(
	|		Номенклатура,
	|		Количество,
	|		ЕдиницаИзмерения,
	|		Склад
	|	),
	|	КВП_ЗаявкаНаВыполнениеРабот.СоставЗвена.(
	|		Мастер,
	|		Должность,
	|		ВремяРаботы
	|	)
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот КАК КВП_ЗаявкаНаВыполнениеРабот
	|ГДЕ
	|	КВП_ЗаявкаНаВыполнениеРабот.Ссылка В(&Ссылка)";
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.Мастер КАК Мастер,
	|	КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.Должность КАК Должность,
	|	КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.Ссылка КАК Ссылка,
	|	СУММА(КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.ВремяРаботы) КАК ВремяРаботы
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот.СоставЗвена КАК КВП_ЗаявкаНаВыполнениеРаботСоставЗвена
	|ГДЕ
	|	КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.Ссылка В(&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.Должность,
	|	КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.Мастер,
	|	КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.Ссылка
	|ИТОГИ
	|	СУММА(ВремяРаботы)
	|ПО
	|	Должность";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСоставЗвена = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	

	//ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьРаботыШапка = Макет.ПолучитьОбласть("РаботыШапка");
	ОбластьРаботы = Макет.ПолучитьОбласть("Работы");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьЗаголовокМатериалы = Макет.ПолучитьОбласть("ЗаголовокМатериалы");
	ОбластьШапкаМатериалы = Макет.ПолучитьОбласть("ШапкаМатериалы");
	ОбластьМатериалы = Макет.ПолучитьОбласть("Материалы");
	ОбластьПодвалМатериалы = Макет.ПолучитьОбласть("ПодвалМатериалы"); 
	ТабДок.Очистить();
		ТабДок.АвтоМасштаб = Истина;
	ТабДок.ПолеСверху = 7;
	ТабДок.ПолеСлева = 2;
	ТабДок.ПолеСнизу = 5;
	ТабДок.ПолеСправа = 2;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	 ТабДок.ОтображатьЗаголовки = истина;
	
	 Спецальность = "";
	 ФИО = "";
	 выборкаКол = 0;
	Пока Выборка.Следующий() Цикл

		

				ВыборкаРаботы = Выборка.Работы.Выбрать();
		

	
		//ВыборкаСоставЗвена = Выборка.СоставЗвена.Выбрать();
		Пока ВыборкаСоставЗвена.Следующий() Цикл
			выборкаКол =  ВыборкаСоставЗвена.Выбрать();
			    Кол = выборкаКол.Количество();

				Спецальность = Спецальность + ВыборкаСоставЗвена.Должность.Наименование + "(" + Кол + "), " ;
						КонецЦикла;
		       ВыборкаСоставЗвена = Выборка.СоставЗвена.Выбрать();
			   
			   Пока ВыборкаСоставЗвена.Следующий() цикл
				   ФИО = ФИО +  ВыборкаСоставЗвена.Мастер.Наименование + ", ";

				КонецЦикла;
		Шапка.Параметры.Заполнить(Выборка);
		Шапка.Параметры.Спецальность = Спецальность;
		Шапка.параметры.ФИО = ФИО;
		ТабДок.Вывести(Шапка, Выборка.Уровень());
		ТабДок.Вывести(ОбластьРаботыШапка);
		
		стр = 0;
		Пока стр < 20 Цикл
			Если ВыборкаРаботы.Следующий() тогда
				
				//Если ЗначениеЗаполнено(Выборка.ТеплоУзел2) тогда
				//	ОбластьРаботы.Параметры.Участок =  "От " + Выборка.ТеплоУзел + " до " + Выборка.ТеплоУзел2 + " " +Выборка.АдресПроведенияРаботы  ;
				//Иначе
				//	ОбластьРаботы.Параметры.Участок =  Выборка.ТеплоУзел.наименование + " " +Выборка.АдресПроведенияРаботы    ;
				//КонецЕсли;

			ОбластьРаботы.Параметры.Заполнить(ВыборкаРаботы);
			 ОбластьРаботы.Параметры.Дата = Выборка.Дата;
		 Иначе
			 ОбластьРаботы.Параметры.Дата = "";
			 ОбластьРаботы.Параметры.ВидРабот = "";
			 ОбластьРаботы.Параметры.НомерСтроки = "";
			 ОбластьРаботы.Параметры.Участок = "";

			КонецЕсли;
			ТабДок.Вывести(ОбластьРаботы, ВыборкаРаботы.Уровень());
			стр = стр +1;
		КонецЦикла;
		   ТабДок.Вывести(ОбластьПодвал);
		   
		   ТабДок.Вывести(ОбластьЗаголовокМатериалы);
		   ТабДок.Вывести(ОбластьШапкаМатериалы);

		  	ВыборкаНарядЗаказ = Выборка.НарядЗаказ.Выбрать();
			стр = 0;
			Пока стр < 20 Цикл
			Если	ВыборкаНарядЗаказ.Следующий()  тогда
			ОбластьМатериалы.Параметры.Заполнить(ВыборкаНарядЗаказ);
			Иначе
			  ОбластьМатериалы.Параметры.Номенклатура ="";
			  ОбластьМатериалы.Параметры.ЕдиницаИзмерения = "";
			  ОбластьМатериалы.Параметры.Количество = "";
			КонецЕсли;
			ТабДок.Вывести(ОбластьМатериалы);
			стр = стр+1;

		КонецЦикла;

		    ТабДок.вывести(ОбластьПодвалМатериалы);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПечатьАкт(ТабДок, Ссылка) Экспорт
		Макет = Документы.ЗаявкаНаВыполнениеРаботТЭУ.ПолучитьМакет("ПечатьАкт");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЗаявкаНаВыполнениеРабот.Дата,
	|	КВП_ЗаявкаНаВыполнениеРабот.Комментарий,
	|	КВП_ЗаявкаНаВыполнениеРабот.Номер,
	|	КВП_ЗаявкаНаВыполнениеРабот.Организация,
	|	КВП_ЗаявкаНаВыполнениеРабот.Ответственный,
	|	КВП_ЗаявкаНаВыполнениеРабот.ОценкаВыполнения,
	|	КВП_ЗаявкаНаВыполнениеРабот.Подразделение,
	|	КВП_ЗаявкаНаВыполнениеРабот.Склад,
	|	КВП_ЗаявкаНаВыполнениеРабот.Работы.(
	|		ВидРабот
	|	),
	|	КВП_ЗаявкаНаВыполнениеРабот.НарядЗаказ.(
	|		Номенклатура,
	|		ВидМатериала,
	|		Количество,
	|		ЕдиницаИзмерения,
	|		Склад
	|	),
	|	КВП_ЗаявкаНаВыполнениеРабот.СоставЗвена.(
	|		Мастер,
	|		Должность,
	|		ВремяРаботы
	|	),
	|	КВП_ЗаявкаНаВыполнениеРабот.МашиныИМеханизмы.(
	|		Время,
	|		ВидТехники
	|	)
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот КАК КВП_ЗаявкаНаВыполнениеРабот
	|ГДЕ
	|	КВП_ЗаявкаНаВыполнениеРабот.Ссылка В(&Ссылка)";
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	
	    		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.Мастер КАК Мастер,
	|	КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.Должность КАК Должность,
	|	КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.Ссылка КАК Ссылка,
	|	СУММА(КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.ВремяРаботы) КАК ВремяРаботы
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот.СоставЗвена КАК КВП_ЗаявкаНаВыполнениеРаботСоставЗвена
	|ГДЕ
	|	КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.Ссылка В(&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.Должность,
	|	КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.Мастер,
	|	КВП_ЗаявкаНаВыполнениеРаботСоставЗвена.Ссылка
	|ИТОГИ
	|	СУММА(ВремяРаботы)
	|ПО
	|	Должность";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСоставЗвена = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
		
	
	//ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьРаботыШапка = Макет.ПолучитьОбласть("РаботыШапка");
	ОбластьРаботы = Макет.ПолучитьОбласть("Работы");
	ОбластьНаименованиеРабот = Макет.ПолучитьОбласть("Работы | НаименованиеРабот");
	ОбластьНаименованиеДолжность = Макет.ПолучитьОбласть("Работы | НаименованиеДолжность");
	ОбластьНаименованиеМатериалов= Макет.ПолучитьОбласть("Работы | НаименованиеМатериалов");
	ОбластьНаименованиеАвто = Макет.ПолучитьОбласть("Работы | НаименованиеАвто");
	//ОбластьМашиныИМеханизмыШапка = Макет.ПолучитьОбласть("МашиныИМеханизмыШапка");
	//ОбластьМашиныИМеханизмы = Макет.ПолучитьОбласть("МашиныИМеханизмы");
	Подвал = Макет.ПолучитьОбласть("Подвал");

	ТабДок.Очистить();
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ПолеСверху = 7;
	ТабДок.ПолеСлева = 2;
	ТабДок.ПолеСнизу = 5;
	ТабДок.ПолеСправа = 2;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл

		Шапка.Параметры.Заполнить(Выборка);
	//	Если ЗначениеЗаполнено(Выборка.ТеплоУзел2) тогда
	//	Шапка.Параметры.Участок =  "От " + Выборка.ТеплоУзел + " до " + Выборка.ТеплоУзел2 + " " + Выборка.АдресПроведенияРаботы ;
	//Иначе
	//	Шапка.Параметры.Участок =  Выборка.ТеплоУзел.наименование + " " + Выборка.АдресПроведенияРаботы     ;
	//	КонецЕсли;
		ТабДок.Вывести(Шапка, Выборка.Уровень());

		ТабДок.Вывести(ОбластьРаботыШапка);
		ВыборкаРаботы = Выборка.Работы.Выбрать();
		ВыборкаНарядЗаказ = Выборка.НарядЗаказ.Выбрать();
		//ВыборкаСоставЗвена = Выборка.СоставЗвена.Выбрать();
		ВыборкаМашиныИМеханизмы = Выборка.МашиныИМеханизмы.Выбрать();



		номерСтр=1;
		стр = 0;
		Пока стр  < 28 Цикл
			
			ОбластьРаботы.Параметры.ВидРабот ="";
			ОбластьРаботы.Параметры.Номенклатура = "";
			ОбластьРаботы.Параметры.Должность = "";
			ОбластьРаботы.Параметры.ВидТехники = "";
			ОбластьРаботы.Параметры.НомерСтр = "";
			ОбластьРаботы.Параметры.Время = "";
			ОбластьРаботы.Параметры.ВремяРаботы = "";
			ОбластьРаботы.Параметры.Количество = "";
			ОбластьРаботы.Параметры.ЕдиницаИзмерения = "";
			ОбластьРаботы.Параметры.Разряд = "";
			ОбластьРаботы.Параметры.кол = "";
			
			Если ВыборкаРаботы.Следующий() тогда
			ОбластьРаботы.Параметры.ВидРабот = ВыборкаРаботы.ВидРабот ;
			ОбластьРаботы.Параметры.НомерСтр = номерСтр;
		КонецЕсли;
		
			Если ВыборкаНарядЗаказ.Следующий() тогда 
			ОбластьРаботы.Параметры.Номенклатура = ВыборкаНарядЗаказ.Номенклатура;
			ОбластьРаботы.Параметры.ЕдиницаИзмерения = ВыборкаНарядЗаказ.ЕдиницаИзмерения;
			ОбластьРаботы.Параметры.Количество = ВыборкаНарядЗаказ.Количество;
			 КонецЕсли;
			
		Если ВыборкаСоставЗвена.Следующий() тогда
			ОбластьРаботы.Параметры.Должность = ВыборкаСоставЗвена.Должность;
			ОбластьРаботы.Параметры.Разряд = ВыборкаСоставЗвена.Должность.Разряд;
			 выборкаКол =  ВыборкаСоставЗвена.Выбрать();
			ОбластьРаботы.Параметры.кол = выборкаКол.Количество();
			ОбластьРаботы.Параметры.ВремяРаботы = ВыборкаСоставЗвена.ВремяРаботы;
		КонецЕсли;
		
			Если ВыборкаМашиныИМеханизмы.Следующий() тогда
			ОбластьРаботы.Параметры.ВидТехники = ВыборкаМашиныИМеханизмы.ВидТехники;
			ОбластьРаботы.Параметры.Время = ВыборкаМашиныИМеханизмы.Время;
			 КонецЕсли;
			ТабДок.Вывести(ОбластьРаботы, ВыборкаРаботы.Уровень());
			номерСтр = номерСтр +1;
			стр=стр+1;
		КонецЦикла;

		//
		////ВыборкаНарядЗаказ = Выборка.НарядЗаказ.Выбрать();
		//Пока ВыборкаНарядЗаказ.Следующий() Цикл
		//	ОбластьРаботы.Параметры.Заполнить(ВыборкаНарядЗаказ);
		//	ТабДок.Вывести(ОбластьРаботы, ВыборкаНарядЗаказ.Уровень());
		//КонецЦикла;
		//
		//////ТабДок.Вывести(ОбластьСоставЗвенаШапка);
		////ВыборкаСоставЗвена = Выборка.СоставЗвена.Выбрать();
		//Пока ВыборкаСоставЗвена.Следующий() Цикл
		//	ОбластьРаботы.Параметры.Заполнить(ВыборкаСоставЗвена);
		//	ТабДок.Вывести(ОбластьРаботы, ВыборкаСоставЗвена.Уровень());
		//КонецЦикла;

		//////ТабДок.Вывести(ОбластьМашиныИМеханизмыШапка);
		////ВыборкаМашиныИМеханизмы = Выборка.МашиныИМеханизмы.Выбрать();
		//Пока ВыборкаМашиныИМеханизмы.Следующий() Цикл
		//	ОбластьРаботы.Параметры.Заполнить(ВыборкаМашиныИМеханизмы);
		//	ТабДок.Вывести(ОбластьРаботы, ВыборкаМашиныИМеханизмы.Уровень());
		//КонецЦикла;

		Подвал.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Подвал);

		КонецЦикла;

КонецПроцедуры
