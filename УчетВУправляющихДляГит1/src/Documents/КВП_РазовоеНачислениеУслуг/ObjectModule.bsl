
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мУдалятьДвижения Экспорт;                      // Хранит признак новый ли это документ.
Перем ВестиУчетНачисленийПоДобровольномуСтрахованию; // Хранит признак учета начислений по добровольному страхованию.
Перем УслугаДобровольногоСтрахования;                // Хранит ссылку на услугу добровольного страхования.

#Область ЭкспортныеПроцедурыИФункцииДокумента

// Пересчитывает сумму начисления по количеству и тарифу.
//
// Параметры:
//  СтрокаТЧ     - строка табличной части документа.
//
Процедура ПересчитатьСуммуСтрокиТЧ(СтрокаТЧ) Экспорт

	СтрокаТЧ.СуммаНачисления = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
	
КонецПроцедуры // ПересчитатьСуммуСтрокиТЧ()

#КонецОбласти 

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// По результату запроса по шапке документа формируем движения по регистрам.
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаНачислений, Отказ, Заголовок)

	Если Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТаблицуНачислений(СтруктураШапкиДокумента, ТаблицаНачислений);
	
	УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.СформироватьДвиженияПоВзаиморасчетам(ЭтотОбъект, 
	                                                                        Новый Структура("Приход", ТаблицаНачислений));
	
	// Движения для отражения начислений в регл. учете.
	СформироватьДвиженияДляОтраженияНачисленийВРеглУчете(ЭтотОбъект);
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		ДвиженияВРегистреНачисленияДобровольногоСтрахования();
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу начислений на лицевые счета.
Процедура ЗаполнитьТаблицуНачислений(СтруктураШапкиДокумента, ТаблицаНачислений)
	
	ТаблицаПоУслугам = Услуги.Выгрузить();
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует новый механизм отражения
	// начислений в регл. учете договор в проводках не заполняется. Для тех, кто использует старый механизм договор
	// по-прежнему заполняется в проводках.
	ЗаполнятьДоговорВПроводках = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
	
	Для Каждого ТекСтрокаУслуги Из ТаблицаПоУслугам Цикл
		
		// Начисления по услуге добровольного страхования не записываем в основные регистры начисления.
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию И ТекСтрокаУслуги.Услуга = УслугаДобровольногоСтрахования Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрокаУслуги.СуммаНачисления = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = ТаблицаНачислений.Добавить();
		Движение.Период                      = СтруктураШапкиДокумента.Дата;
		Движение.Организация                 = СтруктураШапкиДокумента.Организация;
		Движение.ЛицевойСчет                 = ТекСтрокаУслуги.ЛицевойСчет;
		
		Если ЗаполнятьДоговорВПроводках Тогда
			Движение.Договор                 = ТекСтрокаУслуги.ДоговорКонтрагента;
		КонецЕсли;
		
		Движение.Услуга                      = ТекСтрокаУслуги.Услуга;
		Движение.РазделУчета                 = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг;
		Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.СервисныеУслуги;
		Движение.ВидТарифа                   = Перечисления.КВП_ВидыТарифов.Общий;
		Движение.Тариф                       = ТекСтрокаУслуги.Цена;
		Движение.Количество                  = ТекСтрокаУслуги.Количество;
		Движение.СуммаНачисления             = ТекСтрокаУслуги.СуммаНачисления;
		Движение.ДнейНачислено               = День(КонецМесяца(СтруктураШапкиДокумента.Дата));
		Движение.Начало                      = НачалоМесяца(СтруктураШапкиДокумента.Дата);
		Движение.Окончание                   = КонецМесяца(СтруктураШапкиДокумента.Дата);
		
	КонецЦикла;
	
КонецПроцедуры // ДвижениеПоРегиструНачислений()

// Формирует движения по регистру "Начисления по добровольному страхованию".
Процедура ДвиженияВРегистреНачисленияДобровольногоСтрахования()
	
	СтрокиСтрахования = Услуги.НайтиСтроки(Новый Структура("Услуга", УслугаДобровольногоСтрахования));
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует старый механизм
	// отражения начислений в регл. учете, договор заполняется в проводках. Для тех, кто использует новый
	// механизм отражения, договор в проводках не заполняется.
	ЗаполнятьДоговорВПроводках = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
	
	Для Каждого СтрокаНачисления Из СтрокиСтрахования Цикл
		Движение = Движения.УПЖКХ_НачисленияПоДобровольномуСтрахованию.Добавить();
		
		Движение.Период          = Дата;
		Движение.Организация     = Организация;
		Движение.ЛицевойСчет     = СтрокаНачисления.ЛицевойСчет;
		Движение.Услуга          = СтрокаНачисления.Услуга;
		Движение.МесяцНачисления = КонецМесяца(ДобавитьМесяц(Дата, 2));
		Движение.Тариф           = СтрокаНачисления.Цена;
		Движение.Количество      = СтрокаНачисления.Количество;
		Движение.СуммаНачисления = СтрокаНачисления.СуммаНачисления;
		
		Если ЗаполнятьДоговорВПроводках Тогда
			Движение.Договор = СтрокаНачисления.ДоговорКонтрагента;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ДвиженияВРегистреНачисленияДобровольногоСтрахования()

#КонецОбласти 


#Область ПроцедурыИФункцииРасчета

// Заполняет табличную часть.
//
// Параметры:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьУслуги(СписокОбъектов, ПоОтборуЛС) Экспорт
	
	мНастройкиУчетнойПолитикиТСЖОтказ = Ложь;
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата,
														Организация, мНастройкиУчетнойПолитикиТСЖОтказ, Истина);
	Если мНастройкиУчетнойПолитикиТСЖОтказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СписокОбъектов) = Тип("СписокЗначений") Тогда
		СписокЛС = СписокОбъектов;
	Иначе
		СписокЛС = ПолучитьСписокЛСПоОбъекту(СписокОбъектов);
	КонецЕсли;
	
	// Начисления на л/с
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийРазовоеНачислениеУслуг.ТехОбслуживаниеПУ") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Дата, ЛицевойСчет В (&ЛицевыеСчета)) КАК КВП_ЛицевыеСчетаСрезПоследних
		|ГДЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК ЛицевойСчет,
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес КАК Помещение,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик) КАК КоличествоСчетчиков
		|ПОМЕСТИТЬ втЛССдействующимиПУ
		|ИЗ
		|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
		|			&Дата,
		|			Объект В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчета.ЛицевойСчет
		|					ИЗ
		|						втЛицевыеСчета КАК втЛицевыеСчета)
		|				И Счетчик.ВидУслуги = &УслугаПУ
		|				И ДатаИзменения <= &Дата) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
		|ГДЕ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка),
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик)
		|ИЗ
		|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
		|			&Дата,
		|			Объект В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчета.ЛицевойСчет.Адрес
		|					ИЗ
		|						втЛицевыеСчета КАК втЛицевыеСчета)
		|				И Счетчик.ВидУслуги = &УслугаПУ
		|				И ДатаИзменения <= &Дата) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втЛицевыеСчета.ЛицевойСчет,
		|	СУММА(ЕСТЬNULL(втЛССдействующимиПУ.КоличествоСчетчиков, 0)) КАК КоличествоСчетчиков,
		|	ЕСТЬNULL(втЛицевыеСчета.ЛицевойСчет.Адрес.Код, втЛССдействующимиПУ.ЛицевойСчет.Адрес.Код) КАК НомерПомещения
		|ПОМЕСТИТЬ втОсновная
		|ИЗ
		|	втЛицевыеСчета КАК втЛицевыеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛССдействующимиПУ КАК втЛССдействующимиПУ
		|		ПО (втЛицевыеСчета.ЛицевойСчет = втЛССдействующимиПУ.ЛицевойСчет
		|				ИЛИ втЛицевыеСчета.ЛицевойСчет.Адрес = втЛССдействующимиПУ.Помещение)
		|
		|СГРУППИРОВАТЬ ПО
		|	втЛицевыеСчета.ЛицевойСчет,
		|	ЕСТЬNULL(втЛицевыеСчета.ЛицевойСчет.Адрес.Код, втЛССдействующимиПУ.ЛицевойСчет.Адрес.Код)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор
		|ПОМЕСТИТЬ втОсновнойДоговорКонтрагента
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
		|			&Дата,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втОсновная.ЛицевойСчет
		|				ИЗ
		|					втОсновная КАК втОсновная)) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОсновная.ЛицевойСчет,
		|	втОсновная.КоличествоСчетчиков,
		|	втОсновнойДоговорКонтрагента.Договор
		|ИЗ
		|	втОсновная КАК втОсновная
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОсновнойДоговорКонтрагента КАК втОсновнойДоговорКонтрагента
		|		ПО втОсновная.ЛицевойСчет = втОсновнойДоговорКонтрагента.ЛицевойСчет
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерПомещения";
		
		Запрос.УстановитьПараметр("Дата",             Дата);
		Запрос.УстановитьПараметр("Организация",      Организация);
		Запрос.УстановитьПараметр("УслугаПУ",         УслугаДляАнализаПУ);
		Запрос.УстановитьПараметр("УслугаНачисления", УслугаДляНачисления);
		Запрос.УстановитьПараметр("ЛицевыеСчета",     СписокЛС);
		
		ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.ЛицевойСчет        = ВыборкаИзРезультатаЗапроса.ЛицевойСчет;
			НоваяСтрока.ДоговорКонтрагента = ВыборкаИзРезультатаЗапроса.Договор;
			НоваяСтрока.Услуга             = УслугаДляНачисления;
			НоваяСтрока.Количество         = ВыборкаИзРезультатаЗапроса.КоличествоСчетчиков;
			НоваяСтрока.Цена               = ПолучитьТарифПоЛицевомуСчету(Дата, Организация, УслугаДляНачисления, ВыборкаИзРезультатаЗапроса.ЛицевойСчет);
			НоваяСтрока.СуммаНачисления    = НоваяСтрока.Количество * НоваяСтрока.Цена;
			
		КонецЦикла;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийРазовоеНачислениеУслуг.УстановкаПУ") Тогда
		
		НачалоПериода = НачалоМесяца(Дата);
		КонецПериода  = НачалоДня(Дата);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
		|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&КонецПериода, ЛицевойСчет В (&ЛицевыеСчета)) КАК КВП_ЛицевыеСчетаСрезПоследних
		|ГДЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ЗакрепленныеСчетчики.Объект КАК ЛицевойСчет,
		|	КВП_ЗакрепленныеСчетчики.Объект.Адрес КАК Помещение,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КВП_ЗакрепленныеСчетчики.Счетчик) КАК КоличествоСчетчиков
		|ПОМЕСТИТЬ втЛССдействующимиПУ
		|ИЗ
		|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
		|ГДЕ
		|	КВП_ЗакрепленныеСчетчики.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &НачалоПериода И &КонецПериода
		|	И КВП_ЗакрепленныеСчетчики.Действует
		|	И КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги = &УслугаПУ
		|	И КВП_ЗакрепленныеСчетчики.Объект В
		|			(ВЫБРАТЬ
		|				втЛицевыеСчета.ЛицевойСчет
		|			ИЗ
		|				втЛицевыеСчета КАК втЛицевыеСчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ЗакрепленныеСчетчики.Объект,
		|	КВП_ЗакрепленныеСчетчики.Объект.Адрес
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка),
		|	КВП_ЗакрепленныеСчетчики.Объект,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КВП_ЗакрепленныеСчетчики.Счетчик)
		|ИЗ
		|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
		|ГДЕ
		|	КВП_ЗакрепленныеСчетчики.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &НачалоПериода И &КонецПериода
		|	И КВП_ЗакрепленныеСчетчики.Действует
		|	И КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги = &УслугаПУ
		|	И КВП_ЗакрепленныеСчетчики.Объект В
		|			(ВЫБРАТЬ
		|				втЛицевыеСчета.Помещение
		|			ИЗ
		|				втЛицевыеСчета КАК втЛицевыеСчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ЗакрепленныеСчетчики.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втЛицевыеСчета.ЛицевойСчет,
		|	СУММА(ЕСТЬNULL(втЛССдействующимиПУ.КоличествоСчетчиков, 0)) КАК КоличествоСчетчиков,
		|	ЕСТЬNULL(втЛицевыеСчета.ЛицевойСчет.Адрес.Код, втЛССдействующимиПУ.ЛицевойСчет.Адрес.Код) КАК НомерПомещения
		|ПОМЕСТИТЬ втОсновная
		|ИЗ
		|	втЛицевыеСчета КАК втЛицевыеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛССдействующимиПУ КАК втЛССдействующимиПУ
		|		ПО (втЛицевыеСчета.ЛицевойСчет = втЛССдействующимиПУ.ЛицевойСчет
		|				ИЛИ втЛицевыеСчета.Помещение = втЛССдействующимиПУ.Помещение)
		|
		|СГРУППИРОВАТЬ ПО
		|	втЛицевыеСчета.ЛицевойСчет,
		|	ЕСТЬNULL(втЛицевыеСчета.ЛицевойСчет.Адрес.Код, втЛССдействующимиПУ.ЛицевойСчет.Адрес.Код)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор
		|ПОМЕСТИТЬ втОсновнойДоговорКонтрагента
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
		|			&КонецПериода,
		|			ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втОсновная.ЛицевойСчет
		|					ИЗ
		|						втОсновная КАК втОсновная)
		|				И Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОсновная.ЛицевойСчет,
		|	втОсновная.КоличествоСчетчиков,
		|	втОсновнойДоговорКонтрагента.Договор,
		|	втОсновная.НомерПомещения КАК НомерПомещения
		|ИЗ
		|	втОсновная КАК втОсновная
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОсновнойДоговорКонтрагента КАК втОсновнойДоговорКонтрагента
		|		ПО втОсновная.ЛицевойСчет = втОсновнойДоговорКонтрагента.ЛицевойСчет
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерПомещения";
		
		Запрос.УстановитьПараметр("Дата",             Дата);
		Запрос.УстановитьПараметр("НачалоПериода",    НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода",     КонецПериода);
		Запрос.УстановитьПараметр("Организация",      Организация);
		Запрос.УстановитьПараметр("УслугаПУ",         УслугаДляАнализаПУ);
		Запрос.УстановитьПараметр("УслугаНачисления", УслугаДляНачисления);
		Запрос.УстановитьПараметр("ЛицевыеСчета",     СписокЛС);
		
		ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.ЛицевойСчет        = ВыборкаИзРезультатаЗапроса.ЛицевойСчет;
			НоваяСтрока.ДоговорКонтрагента = ВыборкаИзРезультатаЗапроса.Договор;
			НоваяСтрока.Услуга             = УслугаДляНачисления;
			НоваяСтрока.Количество         = ВыборкаИзРезультатаЗапроса.КоличествоСчетчиков;
			НоваяСтрока.Цена               = ПолучитьТарифПоЛицевомуСчету(Дата, Организация, УслугаДляНачисления, ВыборкаИзРезультатаЗапроса.ЛицевойСчет);
			НоваяСтрока.СуммаНачисления    = НоваяСтрока.Количество * НоваяСтрока.Цена;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьУслуги()

// Получает таблицу лицевых счетов в здании, для которых назначена выбранная услуга.
//
// Параметры
//  СписокОбъектов - список объектов для получения списка лицевых счетов.
//
Функция ПолучитьСписокЛСПоОбъекту(СписокОбъектов) Экспорт
	
	ОбъектыНачисления = КВП_СформироватьТаблицуОбъектовНачисления(НачалоМесяца(Дата), СписокОбъектов, КонецМесяца(Дата));
	СписокЛицевыхСчетов = Новый СписокЗначений();
	Для Каждого ТекОбъект Из ОбъектыНачисления Цикл
		Если ТекОбъект.ТипОбъекта = "ЛицевыеСчета" Тогда
			СписокЛицевыхСчетов = ТекОбъект.СписокОбъектов.Скопировать();
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокЛицевыхСчетов;
	
КонецФункции // ПолучитьСписокЛСПоОбъекту()

#КонецОбласти 

#Область ОбработчикиСобытийДокумента

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах.
	СуммаДокумента = КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "Услуги", "СуммаНачисления");
	
КонецПроцедуры

// Процедура проведения документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если мУдалятьДвижения Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	КонецЕсли;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.КВП_РазовоеНачислениеУслуг.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	
	Если НЕ Отказ Тогда
		
		ТаблицаДвижений = УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.КВП_СформироватьТаблицуДвижений();
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДвижений, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

// Отменяет движения документа по регистрам.
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УПЖКХ_Иск") Тогда
		
		ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийРазовоеНачислениеУслуг.ПрочиеНачисления");
		
		// Заполняем реквизиты формы данными из документа "Исковое заявление".
		Дата           = ДанныеЗаполнения.Дата;
		Организация    = ДанныеЗаполнения.Организация;
		Ответственный  = ДанныеЗаполнения.Ответственный;
		Комментарий    = ДанныеЗаполнения.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка реквизитов документа.
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("ВидОперации");
	ПроверяемыеРеквизиты.Добавить("Услуги.ЛицевойСчет");
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует новый механизм отражения
	// начислений в регл. учете договор в проводках не заполняется. Для тех, кто использует старый механизм договор
	// по-прежнему заполняется в проводках. Поэтому при использовании нового механизма отражения не будем проверять
	// заполненность договора.
	Если Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата) Тогда
		ПроверяемыеРеквизиты.Добавить("Услуги.ДоговорКонтрагента");
	КонецЕсли;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийРазовоеНачислениеУслуг.ПрочиеНачисления") Тогда
		ПроверяемыеРеквизиты.Добавить("Услуги.Услуга");
	Иначе
		ПроверяемыеРеквизиты.Добавить("Объект");
		ПроверяемыеРеквизиты.Добавить("УслугаДляАнализаПУ");
		ПроверяемыеРеквизиты.Добавить("УслугаДляНачисления");
	КонецЕсли;
	
	Если Услуги.Количество() > 0 Тогда
		// Проверка лицевых счетов на действие.
		ТаблицаЛС = Услуги.Выгрузить().Скопировать(, "НомерСтроки, ЛицевойСчет");
		ТаблицаЛС.Колонки.ЛицевойСчет.Имя = "Объект";
		ТаблицаЛС.Колонки.Добавить("ДатаПроверки", Новый ОписаниеТипов("Дата"));
		ТаблицаЛС.ЗаполнитьЗначения(Дата, "ДатаПроверки");
		
		УПЖКХ_РаботаСЛицевымиСчетами.ПроверитьТаблицуНаНаличиеЗакрытыхЛицевыхСчетов(ТаблицаЛС, Дата, , Истина);
		
		// Добровольное страхование можно начислять только 1 раз в месяц.
		// Выполним проверку.
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
			ПроверитьНачислениеДобровольногоСтрахования(Отказ);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроверкиЗаполнения

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Проверяет: были ли уже начисления по добровольному страхованию.
Процедура ПроверитьНачислениеДобровольногоСтрахования(Отказ)
	
	СтрокиСтрахования  = Услуги.НайтиСтроки(Новый Структура("Услуга", УслугаДобровольногоСтрахования));
	ТаблицаСтрахования = Услуги.Выгрузить(СтрокиСтрахования);
	
	СписокЛицевыхСчетов = ТаблицаСтрахования.ВыгрузитьКолонку("ЛицевойСчет");
	
	Документы.КВП_НачислениеУслуг.ПроверитьНаличиеНачисленийПоДобровольномуСтрахованию(Ссылка, Дата, Организация, СписокЛицевыхСчетов, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияПеременныхМодуля

НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;

#КонецОбласти

#КонецЕсли