
#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение(
					"Перечисление.УПЖКХ_ВидыОперацийРазовоеНачислениеУслуг.ПрочиеНачисления") Тогда
		Элементы.ГруппаОбъект.Видимость     = Истина;
		Элементы.ГруппаУслуги.Видимость     = Истина;
		Элементы.ПодменюЗаполнить.Видимость = Истина;
		Элементы.УслугиУслуга.Видимость     = Ложь;
	Иначе
		Элементы.ГруппаОбъект.Видимость     = Ложь;
		Элементы.ГруппаУслуги.Видимость     = Ложь;
		Элементы.ПодменюЗаполнить.Видимость = Ложь;
		Элементы.УслугиУслуга.Видимость     = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормой()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ (НА КЛИЕНТЕ)

// Пересчитывает сумму начисления в строке табличной части "Услуги".
//
&НаКлиенте
Процедура ПересчитатьСуммуСтрокиТЧКлиент()
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.СуммаНачисления = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
	
КонецПроцедуры // ПересчитатьСуммуСтрокиТЧКлиент()

// Процедура устанавливает точность для колонки "Количество" таблицы "Услуги"
// в соответствии с выбранной пользователем точностью в настройках программы.
&НаСервере
Процедура УстановитьТочностьОбъемовНачислений()
	Элементы.УслугиКоличество.ФорматРедактирования = "ЧДЦ=" + Строка(Константы.УПЖКХ_ТочностьОбъемаНачислений.Получить()) + "";
КонецПроцедуры

&НаКлиенте
// Обработчик результата выбора значения, вызванного в процедуре "ПриОткрытии".
Процедура ПриОткрытииЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	Если Не Значение = Неопределено Тогда
		
		НоваяЗапись = Объект.Услуги.Добавить();
		НоваяЗапись.ЛицевойСчет = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ОснованиеИсковоеЗаявление, "ЛицевойСчет");
		
		ДоговорКонтрагентаЛС = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(
								УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ОснованиеИсковоеЗаявление, "ЛицевойСчет"), Объект.Организация,
								УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ОснованиеИсковоеЗаявление, "Дата"), "Договор");
		Если НЕ ДоговорКонтрагентаЛС.Пустая() Тогда
			НоваяЗапись.ДоговорКонтрагента = ДоговорКонтрагентаЛС;
		КонецЕсли;

		НоваяЗапись.Услуга          = Значение;
		НоваяЗапись.Количество      = 1;
		
		Госпошлина = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ОснованиеИсковоеЗаявление, "Госпошлина");
		НоваяЗапись.Цена            = Госпошлина;
		НоваяЗапись.СуммаНачисления = Госпошлина;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытииЗавершение()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике "ВидОперацииПриИзменении()".
Процедура ВидОперацииПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Объект.ВидОперации = ПредыдущийВидОперации;
		Возврат;
	КонецЕсли;
	
	Объект.Услуги.Очистить();
	
	ВидОперацииПриИзмененииФрагмент();
	
КонецПроцедуры // ВидОперацииПриИзмененииЗавершение()

&НаКлиенте
// Процедура вызывает процедуру кправления формой.
Процедура ВидОперацииПриИзмененииФрагмент()
	
	ПредыдущийВидОперации = Объект.ВидОперации;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ВидОперацииПриИзмененииФрагмент()

&НаКлиенте
// Устанавливает отбор услуг в справочнике "Услуги" в зависимости от вида операции документа.
Процедура УстановитьОтборУслуг(Элемент)
	
	Если НЕ Объект.ВидОперации = 
				ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийРазовоеНачислениеУслуг.ПрочиеНачисления") Тогда
		
		ССпРасчета = Новый СписокЗначений;
		
		ИмяРеквизита = Элемент.Имя;
		
		Если ИмяРеквизита = "УслугаДляНачисления" Тогда
			
			ССпРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ФиксированноеНачисление"));
			
		ИначеЕсли ИмяРеквизита = "УслугаДляАнализаПУ" Тогда
			
			ССпРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика"));
			ССпРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме"));
			
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СпособРасчета", ССпРасчета);
		
		Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", 
								Новый Структура("ТекущаяСтрока, Отбор, ЭтоГруппа, ОтображатьСписком", 
												Объект[ИмяРеквизита], СтруктураОтбора, Ложь, Истина), Элемент);
												
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", УслугаДобровольногоСтрахования,
																	ВидСравненияКомпоновкиДанных.НеРавно, , Истина,
																	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		КонецЕсли;
												
		Форма.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборУслуг()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваного в процедуре "ТаблицаУслугЗаполнить()".
Процедура ТаблицаУслугЗаполнитьОбработатьРезультатВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Объект.Услуги.Очистить();
	
	УслугиКомандаЗаполнитьПродолжение();
	
КонецПроцедуры // ТаблицаУслугЗаполнитьОбработатьРезультатВопроса()

&НаКлиенте
// Процедура заполняет таблицу услуг.
Процедура УслугиКомандаЗаполнитьПродолжение()
	
	ЗаполнитьТабличнуюЧастьУслугиНаСервере(Объект.Объект);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // УслугиКомандаЗаполнитьПродолжение()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "УслугиКомандаЗаполнитьСОтбором()".
Процедура ОбработатьРезультатВопросаУслугиКомандаЗаполнитьСОтбором(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Объект.Услуги.Очистить();
	
	УслугиКомандаЗаполнитьСОтборомПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаУслугиКомандаЗаполнитьСОтбором()

&НаКлиенте
// Порцедура-продолжение процедуры обработчика команды "УслугиКомандаЗаполнитьСОтбором()".
Процедура УслугиКомандаЗаполнитьСОтборомПродолжение()
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляЗаполненияСОтбором();
	
	ОписаниеЗавершенияВыбора = Новый ОписаниеОповещения("УслугиКомандаЗаполнитьСОтборомОкончаниеВыбораПолучателейУслуг", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеЗавершенияВыбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // УслугиКомандаЗаполнитьСОтборомПродолжение()

&НаКлиенте
// Возвращает структуру параметров для заполнения начислений с отбором.
//
Функция ПолучитьСтруктуруПараметровДляЗаполненияСОтбором()
	
	СтруктураПараметров = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	
	// Параметры запросов.
	СтруктураПараметров.Вставить("НачПериодЛС"           , НачалоМесяца(Объект.Дата));
	СтруктураПараметров.Вставить("КонПериодЛС"           , Объект.Дата);
	СтруктураПараметров.Вставить("Организация"           , Объект.Организация);
	
	Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.КВП_Здания") 
	   И УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Объект, "ТипСооружения") = 
							ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипСооружения.Паркинг") Тогда
		
		СтруктураПараметров.Вставить("ТипОбъекта"                , "ПарковочныеМеста");
		СтруктураПараметров.Вставить("ТипЗначОбъекта"            , "ПарковочныеМеста");
		СтруктураПараметров.Вставить("ВладелецПарковочногоМеста" , Объект.Объект);
		
	Иначе
		
		СтруктураПараметров.Вставить("ТипОбъекта",     "ЛицевыеСчета");
		СтруктураПараметров.Вставить("ТипЗначОбъекта", "ЛицевыеСчета");
		СтруктураПараметров.Вставить("ОбъектЛС",       Объект.Объект);
		СтруктураПараметров.Вставить("ЗданияКвартиры", Объект.Объект);
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "УслугиКомандаЗаполнитьСОтборомПродолжение()".
Процедура УслугиКомандаЗаполнитьСОтборомОкончаниеВыбораПолучателейУслуг(СписокДляВозврата, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьТабличнуюЧастьУслугиНаСервере(СписокДляВозврата, Истина);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // УслугиКомандаЗаполнитьСОтборомОкончаниеВыбораПолучателейУслуг()

&НаКлиенте
// Проверяет заполнение данных.
Функция ДанныеЗаполнены()
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Организация не выбрана.", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Объект) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Объект не выбран.", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.УслугаДляНачисления) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбрана услуга для начисления.", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.УслугаДляАнализаПУ) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбрана услуга для анализа.", Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции // ДанныеЗаполнены()

#КонецОбласти 

#Область РаботаСПроцедурамиИФункциямиМодуляОбъекта

&НаСервере
// Процедура заполнения табличной части "Услуги" на сервере.
Процедура ЗаполнитьТабличнуюЧастьУслугиНаСервере(СписокОбъектов, ПоОтборуЛС = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_РазовоеНачислениеУслуг"));
	ДокументОбъект.ЗаполнитьТабличнуюЧастьУслуги(СписокОбъектов, ПоОтборуЛС);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьУслугиНаСервере()

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

// Процедура-обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																 УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийРазовоеНачислениеУслуг.ПрочиеНачисления");
		
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	КонецЕсли;
	
	Если Объект.ВидОперации.Пустая() Тогда
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийРазовоеНачислениеУслуг.ПрочиеНачисления");
	КонецЕсли;
	
	ПредыдущийВидОперации = Объект.ВидОперации;
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	УстановитьТочностьОбъемовНачислений();
	
	ОснованиеИсковоеЗаявление = Параметры.Основание;
	
	УправлениеФормой(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует новый механизм отражения
	// начислений в регл. учете договор в проводках не заполняется. Для тех, кто использует старый механизм договор
	// по-прежнему заполняется в проводках.
	// При использовании нового механизма отражения колонку с договором выводить не будем. Видимость устанавливается
	// только при открытии формы, так как новый механизм использует только один клиент и он скорее всего не будет
	// создавать документы в периоде до начала использования нового механизма.
	Если УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Объект.Дата) Тогда
		Элементы.УслугиДоговорКонтрагента.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура-обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Если ТипЗнч(ОснованиеИсковоеЗаявление) = Тип("ДокументСсылка.УПЖКХ_Иск")
	   И НЕ ОснованиеИсковоеЗаявление.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
		
		ПоказатьВводЗначения(ОписаниеОповещения,
							 ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка"),
							 "Выберите услугу, на которую необходимо отнести долг по госпошлине");
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
// Процедура-обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "ЛицевойСчет".
//
Процедура УслугиЛицевойСчетПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено И ТекущаяСтрока.ЛицевойСчет.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.ДоговорКонтрагента = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(
									ТекущаяСтрока.ЛицевойСчет, Объект.Организация, Объект.Дата, "Договор");
	
КонецПроцедуры // УслугиЛицевойСчетПриИзменении()

&НаКлиенте
// Процедура-обработчик события "НачалоВыбора" поля "ДоговорКонтрагента".
//
Процедура УслугиДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(ТекущаяСтрока.ЛицевойСчет) Тогда
		СтруктураОтбора.Вставить("Владелец", УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(
											ТекущаяСтрока.ЛицевойСчет, Объект.Организация, Объект.Дата, "Контрагент"));
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор",         СтруктураОтбора);
	СтруктураПараметров.Вставить("ТекущаяСтрока", ТекущаяСтрока.ДоговорКонтрагента);
	
	Форма = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", СтруктураПараметров, Элемент);
	Форма.Открыть();
	
КонецПроцедуры // УслугиДоговорКонтрагентаНачалоВыбора()

// Процедура-обработчик события "ПриИзменении" поля "Количество" ТЧ "Услуги".
//
&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПересчитатьСуммуСтрокиТЧКлиент();
	
КонецПроцедуры // УслугиКоличествоПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "Цена" ТЧ "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ПересчитатьСуммуСтрокиТЧКлиент();
	
КонецПроцедуры // УслугиЦенаПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "Вид операции".
//
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Не ПредыдущийВидОперации = Объект.ВидОперации
	   И Объект.Услуги.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВидОперацииПриИзмененииЗавершение", ЭтотОбъект),
					   "Перед изменением вида операции табличная часть будет очищена!",
					   РежимДиалогаВопрос.ОКОтмена, ,
					   КодВозвратаДиалога.Отмена);
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииФрагмент();
	
КонецПроцедуры // ВидОперацииПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "УслугаДляНачисления".
Процедура УслугаДляНачисленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьОтборУслуг(Элемент);
	
КонецПроцедуры // УслугаДляНачисленияНачалоВыбора()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УслугаДляНачисления".
Процедура УслугаДляАнализаПУПриИзменении(Элемент)
	
	СписокСпособРасчета = Новый СписокЗначений;
	СписокСпособРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика"));
	СписокСпособРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме"));
	
	Если НЕ Объект.УслугаДляАнализаПУ.Пустая() Тогда
		СпособРасчета = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.УслугаДляАнализаПУ, "СпособРасчета");
		Если СписокСпособРасчета.НайтиПоЗначению(СпособРасчета) = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо выбрать услугу со способом расчета ""По показаниям счетчика"" или ""По показаниям счетчика и норме потребления"".");
			Объект.УслугаДляАнализаПУ = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УслугаДляАнализаПУПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УслугаДляНачисления".
Процедура УслугаДляНачисленияПриИзменении(Элемент)
	
	Если НЕ Объект.УслугаДляНачисления.Пустая() Тогда
		СпособРасчета = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.УслугаДляНачисления, "СпособРасчета");
		Если НЕ СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ФиксированноеНачисление") Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо выбрать услугу со способом расчета ""Фиксированное начисление"".");
			Объект.УслугаДляНачисления = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
		КонецЕсли;
		
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию И Объект.УслугаДляНачисления = УслугаДобровольногоСтрахования Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Услуга добровольного страхования не может быть выбрана в качестве услуги для начисления.");
			Объект.УслугаДляНачисления = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УслугаДляНачисленияПриИзменении()

#КонецОбласти 

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
// Обработчик команды "ДеревоУслугЗаполнить".
Процедура ТаблицаУслугЗаполнить(Команда)
	
	Если НЕ ДанныеЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ТаблицаУслугЗаполнитьОбработатьРезультатВопроса", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	УслугиКомандаЗаполнитьПродолжение();
	
КонецПроцедуры // ТаблицаУслугЗаполнить()

&НаКлиенте
Процедура УслугиЗаполнитьСОтбором(Команда)
	
	Если НЕ ДанныеЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Услуги.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаУслугиКомандаЗаполнитьСОтбором", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	УслугиКомандаЗаполнитьСОтборомПродолжение();
	
КонецПроцедуры // УслугиЗаполнитьСОтбором()

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти 
