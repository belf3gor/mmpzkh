
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСВызовСервера.ПриПолученииФормыДокумента(
		"ТТНИсходящаяЕГАИС",
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подбирает справки Б в табличную часть товары документа по остаткам.
// 
// Параметры:
//   Объект - ДокументОбъект.ТТНИсходящаяЕГАИС - Документ-объект.
//
// Возвращаемое значение:
//  Булево - Истина, если в табличной части все справки заполнены.
//
Функция ПодобратьСправки2(Объект) Экспорт
	
	СтруктураПересчетаСуммы = ИнтеграцияЕГАИСКлиентСервер.СтруктураПересчетаСуммы("Сумма, КоличествоУпаковок, КоличествоФакт");
	
	ИнтеграцияЕГАИС.ПодобратьСправки2ДляСписанияИзРегистра1(
		Объект.Товары,
		Объект.Грузоотправитель,
		Неопределено,
		СтруктураПересчетаСуммы);
	
	Возврат ИнтеграцияЕГАИС.Справки2ЗаполненыВТабличнойЧасти(Объект.Товары);
	
КонецФункции

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиТТНИсходящейЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.КПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказКПередаче);
		
	Иначе
		ВызватьИсключение ИнтеграцияЕГАИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиТТНИсходящейЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеУведомленияОРегистрацииДвижения);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ИнтеграцияЕГАИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиТТНИсходящейЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыБазовыйПроцесс.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяКлиентом;
	СтатусыБазовыйПроцесс.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяЕГАИС;
	СтатусыБазовыйПроцесс.ОтменаПроведения = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОтмененКлиентом;
	СтатусыБазовыйПроцесс.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаПроведения = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолученияПодтверждения);
	СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
	СтатусыБазовыйПроцесс.УведомлениеОРегистрацииДвижения = Истина;
	
	СтатусыАктТТНОтказ = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыАктТТНОтказ.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен;
	СтатусыАктТТНОтказ.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС;
	СтатусыАктТТНОтказ.ОтменаПроведения = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен;
	СтатусыАктТТНОтказ.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОшибка;
	СтатусыАктТТНОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
	СтатусыАктТТНОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыАктТТНОтказ.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыКвитанцияАктаРасхожденийПодтверждение = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыКвитанцияАктаРасхожденийПодтверждение.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПодтвержденСРасхождениями;
	СтатусыКвитанцияАктаРасхожденийПодтверждение.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОбрабатываетсяЕГАИС;
	СтатусыКвитанцияАктаРасхожденийПодтверждение.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОшибка;
	СтатусыКвитанцияАктаРасхожденийПодтверждение.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях);
	СтатусыКвитанцияАктаРасхожденийПодтверждение.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыКвитанцияАктаРасхожденийПодтверждение.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыКвитанцияАктаРасхожденийОтказ = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыКвитанцияАктаРасхожденийОтказ.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен;
	СтатусыКвитанцияАктаРасхожденийОтказ.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОбрабатываетсяЕГАИС;
	СтатусыКвитанцияАктаРасхожденийОтказ.ОтменаПроведения = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен;
	СтатусыКвитанцияАктаРасхожденийОтказ.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОшибка;
	СтатусыКвитанцияАктаРасхожденийОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях);
	СтатусыКвитанцияАктаРасхожденийОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыКвитанцияАктаРасхожденийОтказ.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяКлиентом;
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОбрабатываетсяЕГАИС;
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.ОтменаПроведения = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяКлиентом;
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОшибка;
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения);
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолученияПодтверждения);
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.ОтменаПроведенияДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолученияПодтверждения);
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыЗапросНаОтменуПроведенияТТНОтказ = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден;
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОбрабатываетсяЕГАИС;
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОшибка;
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения);
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.УведомлениеОРегистрацииДвижения = Ложь;
	
	ВыполнитьРасчетТекущегоСостояния = Истина;
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ТекущееСостояние")
		И ДополнительныеПараметры.ТекущееСостояние <> Неопределено Тогда
		ВыполнитьРасчетТекущегоСостояния = ДополнительныеПараметры.ТекущееСостояние;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОтмененКлиентом;
		
		Если ДополнительныеПараметры.Свойство("ТекущееСостояние")
			И ДополнительныеПараметры.ТекущееСостояние <> Неопределено Тогда
			ТекущееСостояние = ДополнительныеПараметры.ТекущееСостояние;
		Иначе
			ТекущееСостояние = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ДокументСсылка);
		КонецЕсли;
		
		Если ТекущееСостояние.Статус <> Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен Тогда
			
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
				ДокументСсылка,
				Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
				Статусы);
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПринят;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПринят;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияТТН Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"УведомлениеОРегистрацииДвижения", Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			СтатусыБазовыйПроцесс, ВыполнитьРасчетТекущегоСостояния);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС Тогда
		
		Статусы = Неопределено;
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
			
			Статусы = СтатусыБазовыйПроцесс;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ Тогда
			
			Статусы = СтатусыАктТТНОтказ;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение Тогда
			
			Статусы = СтатусыКвитанцияАктаРасхожденийПодтверждение;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ Тогда
			
			Статусы = СтатусыКвитанцияАктаРасхожденийОтказ;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведенияТТНПодтверждение;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведенияТТНОтказ;
			
		Иначе
			ВызватьИсключение ИнтеграцияЕГАИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
				ДокументСсылка,
				"КвитанцияПолученЕГАИС", ДополнительныеПараметры.СтатусОбработки,
				Статусы, ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС Тогда
		
		Статусы = Неопределено;
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
			
			Если ДополнительныеПараметры.Свойство("ТекущееСостояние")
				И ДополнительныеПараметры.ТекущееСостояние <> Неопределено Тогда
				ТекущееСостояние = ДополнительныеПараметры.ТекущееСостояние;
			Иначе
				ТекущееСостояние = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ДокументСсылка);
			КонецЕсли;
			
			Если ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОбрабатываетсяЕГАИС Тогда
				Статусы = СтатусыКвитанцияАктаРасхожденийПодтверждение;
			ИначеЕсли ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОбрабатываетсяЕГАИС Тогда
				Статусы = СтатусыКвитанцияАктаРасхожденийОтказ;
			ИначеЕсли ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС Тогда
				Статусы = СтатусыАктТТНОтказ;
			ИначеЕсли ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОбрабатываетсяЕГАИС Тогда
				Статусы = СтатусыЗапросНаОтменуПроведенияТТНПодтверждение;
			ИначеЕсли ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОбрабатываетсяЕГАИС Тогда
				Статусы = СтатусыЗапросНаОтменуПроведенияТТНОтказ;
			Иначе
				Статусы = СтатусыБазовыйПроцесс;
			КонецЕсли;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ Тогда
			
			Статусы = СтатусыАктТТНОтказ;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение Тогда
			
			// Приходит квитанция по операции ТТН (см. выше)
			Статусы = СтатусыКвитанцияАктаРасхожденийПодтверждение;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ Тогда
			
			Статусы = СтатусыКвитанцияАктаРасхожденийОтказ;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведенияТТНПодтверждение;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведенияТТНОтказ;
			
		Иначе
			ВызватьИсключение ИнтеграцияЕГАИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
				ДокументСсылка,
				"КвитанцияПроведенЕГАИС", ДополнительныеПараметры.СтатусОбработки,
				Статусы, ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	Иначе
		ВызватьИсключение ИнтеграцияЕГАИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции


// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции


// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	Входящий  = Перечисления.ТипыЗапросовИС.Входящий;
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица,  0,   Исходящий, Перечисления.ВидыДокументовЕГАИС.ТТН, ДокументСсылка);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица,  0,   Входящий,  Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияТТН);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -1,   Исходящий, Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ, ДокументСсылка, Истина, Ложь);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица,  0,   Входящий,  Перечисления.ВидыДокументовЕГАИС.АктТТН);
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -2,   Входящий,  Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ);
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -3,   Входящий,  Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -31,  Входящий,  Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -31,  Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТН,              ДокументСсылка);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -311, Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ,         ДокументСсылка);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -312, Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение, ДокументСсылка);
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -4,   Входящий,  Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -4,   Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхождений, ДокументСсылка);
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -41,  Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение, ДокументСсылка);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -41,  Входящий,  Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -41,  Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТН,              ДокументСсылка);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -411, Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ,         ДокументСсылка);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -412, Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение, ДокументСсылка);
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, -42,  Исходящий, Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ, ДокументСсылка, Истина, Ложь);
	
	Возврат Таблица;
	
КонецФункции

// Перерасчитать статус оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС - Предыдущий статус.
// 
Процедура РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Если КонечныеСтатусы().Найти(НовыйСтатус) <> Неопределено Тогда
		ИнтеграцияЕГАИСПереопределяемый.РассчитатьСтатусОформленияТТНИсходящаяЕГАИС(ДокументСсылка, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	СтатусыДвиженийСвободныйОстаток = СтатусыДвиженийСвободныйОстаток();
	СтатусыДвиженийКоличество       = СтатусыДвиженийКоличество();
	
	ОбновитьДвижения = ИнтеграцияЕГАИС.СтатусТребуетОбновленияДвижений(СтатусыДвиженийСвободныйОстаток, ПредыдущийСтатус, НовыйСтатус)
	               Или ИнтеграцияЕГАИС.СтатусТребуетОбновленияДвижений(СтатусыДвиженийКоличество, ПредыдущийСтатус, НовыйСтатус);
	
	Если ПараметрыОбновленияСтатуса.ОбновлятьДвижения
		И ОбновитьДвижения Тогда
		
		ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
		
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		
		ДополнительныеСвойстваДляПроведения = Новый Структура;
		ИнтеграцияИС.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойстваДляПроведения);
		
		ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойстваДляПроведения, ИмяРегистра);
		НаборЗаписей.Загрузить(ДополнительныеСвойстваДляПроведения.ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	// Резервирование при отгрузке
	Если ИнтеграцияЕГАИС.СтатусТребуетДобавленияДвижений(СтатусыДвиженийСвободныйОстаток, ПредыдущийСтатус, НовыйСтатус)
		И ИнтеграцияЕГАИС.НетДвижений(СтатусыДвиженийКоличество, ПредыдущийСтатус, НовыйСтатус) Тогда
		
		Если ПараметрыОбновленияСтатуса.ДокументОбъект = Неопределено Тогда
			Товары = ИнтеграцияЕГАИС.Справки2ПоДокументу(ДокументСсылка);
		Иначе
			Товары = ПараметрыОбновленияСтатуса.ДокументОбъект.Товары;
		КонецЕсли;
		
		ШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка);
		Для Каждого СтрокаТЧ Из ШтрихкодыУпаковок.МаркированныеТовары Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Справка2)
				И СтрокаТЧ.Статус = Перечисления.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса Тогда
				АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЧтенияСтатуса(СтрокаТЧ.ШтрихкодУпаковки);
				Продолжить;
			КонецЕсли;
			
			СтрокаТовара = Неопределено;
			
			ДанныеЗаписиСтатуса = Справочники.ШтрихкодыУпаковокТоваров.СтруктураЗаписиСтатусаУпаковки();
			ДанныеЗаписиСтатуса.ОрганизацияЕГАИС     = СтрокаТЧ.ОрганизацияЕГАИС;
			ДанныеЗаписиСтатуса.АкцизнаяМарка        = СтрокаТЧ.ШтрихкодУпаковки;
			ДанныеЗаписиСтатуса.Статус               = Перечисления.СтатусыАкцизныхМарок.ВРезерве;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Справка2) Тогда
				ДанныеЗаписиСтатуса.Справка2 = СтрокаТЧ.Справка2;
			Иначе
				Если СтрокаТовара = Неопределено Тогда
					СтрокаТовара = Товары.Найти(СтрокаТЧ.ИдентификаторСтроки);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТовара) Тогда
					ДанныеЗаписиСтатуса.Справка2 = СтрокаТовара.Справка2;
				Иначе
					АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЗаполненияСправки2(СтрокаТЧ.ШтрихкодУпаковки);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.АлкогольнаяПродукция) Тогда
				ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
			Иначе
				Если СтрокаТовара = Неопределено Тогда
					СтрокаТовара = Товары.Найти(СтрокаТЧ.ИдентификаторСтроки);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТовара) Тогда
					ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаТовара.АлкогольнаяПродукция;
				Иначе
					АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЗаполненияСправки2(СтрокаТЧ.ШтрихкодУпаковки);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеЗаписиСтатуса.Основание = ДокументСсылка;
			РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписиСтатуса);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Отгрузка проведена (или подтвержден акт о расхождениях)
	Если ИнтеграцияЕГАИС.СтатусТребуетДобавленияДвижений(СтатусыДвиженийКоличество, ПредыдущийСтатус, НовыйСтатус) Тогда
		
		Если ПараметрыОбновленияСтатуса.ДокументОбъект = Неопределено Тогда
			Товары = ИнтеграцияЕГАИС.Справки2ПоДокументу(ДокументСсылка);
			ЕстьРасхождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ЕстьРасхождения");
		Иначе
			Товары = ПараметрыОбновленияСтатуса.ДокументОбъект.Товары;
			ЕстьРасхождения = ПараметрыОбновленияСтатуса.ДокументОбъект.ЕстьРасхождения;
		КонецЕсли;
		
		Если ЕстьРасхождения Тогда
			НеподтвержденныеАкцизныеМарки = НеподтвержденныеАкцизныеМарки(ДокументСсылка);
		КонецЕсли;
		
		ШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка);
		Для Каждого СтрокаТЧ Из ШтрихкодыУпаковок.МаркированныеТовары Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Справка2)
				И СтрокаТЧ.Статус = Перечисления.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса Тогда
				АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЧтенияСтатуса(СтрокаТЧ.ШтрихкодУпаковки);
				Продолжить;
			КонецЕсли;
			
			СтрокаТовара = Неопределено;
			
			ДанныеЗаписиСтатуса = Справочники.ШтрихкодыУпаковокТоваров.СтруктураЗаписиСтатусаУпаковки();
			ДанныеЗаписиСтатуса.ОрганизацияЕГАИС     = СтрокаТЧ.ОрганизацияЕГАИС;
			ДанныеЗаписиСтатуса.АкцизнаяМарка        = СтрокаТЧ.ШтрихкодУпаковки;
			Если ЕстьРасхождения Тогда
				Если НеподтвержденныеАкцизныеМарки.Получить(СтрокаТЧ.Штрихкод) <> Неопределено Тогда
					ДанныеЗаписиСтатуса.Статус = Перечисления.СтатусыАкцизныхМарок.ВНаличии;
				Иначе
					ДанныеЗаписиСтатуса.Статус = Перечисления.СтатусыАкцизныхМарок.Реализована;
				КонецЕсли;
			Иначе
				ДанныеЗаписиСтатуса.Статус = Перечисления.СтатусыАкцизныхМарок.Реализована;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Справка2) Тогда
				ДанныеЗаписиСтатуса.Справка2 = СтрокаТЧ.Справка2;
			Иначе
				Если СтрокаТовара = Неопределено Тогда
					СтрокаТовара = Товары.Найти(СтрокаТЧ.ИдентификаторСтроки);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТовара) Тогда
					ДанныеЗаписиСтатуса.Справка2 = СтрокаТовара.Справка2;
				Иначе
					АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЗаполненияСправки2(СтрокаТЧ.ШтрихкодУпаковки);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.АлкогольнаяПродукция) Тогда
				ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
			Иначе
				Если СтрокаТовара = Неопределено Тогда
					СтрокаТовара = Товары.Найти(СтрокаТЧ.ИдентификаторСтроки);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТовара) Тогда
					ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаТовара.АлкогольнаяПродукция;
				Иначе
					АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЗаполненияСправки2(СтрокаТЧ.ШтрихкодУпаковки);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеЗаписиСтатуса.Основание = ДокументСсылка;
			РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписиСтатуса);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Отмена резервирования при ошибке или отказе от накладной
	Если ИнтеграцияЕГАИС.СтатусТребуетУдаленияДвижений(СтатусыДвиженийСвободныйОстаток, ПредыдущийСтатус, НовыйСтатус)
		И ИнтеграцияЕГАИС.НетДвижений(СтатусыДвиженийКоличество, ПредыдущийСтатус, НовыйСтатус) Тогда
		
		Если ПараметрыОбновленияСтатуса.ДокументОбъект = Неопределено Тогда
			Товары = ИнтеграцияЕГАИС.Справки2ПоДокументу(ДокументСсылка);
		Иначе
			Товары = ПараметрыОбновленияСтатуса.ДокументОбъект.Товары;
		КонецЕсли;
		
		ШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка);
		Для Каждого СтрокаТЧ Из ШтрихкодыУпаковок.МаркированныеТовары Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Справка2)
				И СтрокаТЧ.Статус = Перечисления.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса Тогда
				АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЧтенияСтатуса(СтрокаТЧ.ШтрихкодУпаковки);
				Продолжить;
			КонецЕсли;
			
			СтрокаТовара = Неопределено;
			
			ДанныеЗаписиСтатуса = Справочники.ШтрихкодыУпаковокТоваров.СтруктураЗаписиСтатусаУпаковки();
			ДанныеЗаписиСтатуса.ОрганизацияЕГАИС     = СтрокаТЧ.ОрганизацияЕГАИС;
			ДанныеЗаписиСтатуса.АкцизнаяМарка        = СтрокаТЧ.ШтрихкодУпаковки;
			ДанныеЗаписиСтатуса.Статус               = Перечисления.СтатусыАкцизныхМарок.ВНаличии;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Справка2) Тогда
				ДанныеЗаписиСтатуса.Справка2 = СтрокаТЧ.Справка2;
			Иначе
				Если СтрокаТовара = Неопределено Тогда
					СтрокаТовара = Товары.Найти(СтрокаТЧ.ИдентификаторСтроки);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТовара) Тогда
					ДанныеЗаписиСтатуса.Справка2 = СтрокаТовара.Справка2;
				Иначе
					АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЗаполненияСправки2(СтрокаТЧ.ШтрихкодУпаковки);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.АлкогольнаяПродукция) Тогда
				ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
			Иначе
				Если СтрокаТовара = Неопределено Тогда
					СтрокаТовара = Товары.Найти(СтрокаТЧ.ИдентификаторСтроки);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТовара) Тогда
					ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаТовара.АлкогольнаяПродукция;
				Иначе
					АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЗаполненияСправки2(СтрокаТЧ.ШтрихкодУпаковки);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеЗаписиСтатуса.Основание = ДокументСсылка;
			РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписиСтатуса);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Отмена акта подтверждения
	Если ИнтеграцияЕГАИС.СтатусТребуетУдаленияДвижений(СтатусыДвиженийКоличество, ПредыдущийСтатус, НовыйСтатус)
		И ИнтеграцияЕГАИС.ЕстьДвижения(СтатусыДвиженийСвободныйОстаток, ПредыдущийСтатус, НовыйСтатус) Тогда
		
		Если ПараметрыОбновленияСтатуса.ДокументОбъект = Неопределено Тогда
			Товары = ИнтеграцияЕГАИС.Справки2ПоДокументу(ДокументСсылка);
		Иначе
			Товары = ПараметрыОбновленияСтатуса.ДокументОбъект.Товары;
		КонецЕсли;
		
		ШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка);
		Для Каждого СтрокаТЧ Из ШтрихкодыУпаковок.МаркированныеТовары Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Справка2)
				И СтрокаТЧ.Статус = Перечисления.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса Тогда
				АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЧтенияСтатуса(СтрокаТЧ.ШтрихкодУпаковки);
				Продолжить;
			КонецЕсли;
			
			СтрокаТовара = Неопределено;
			
			ДанныеЗаписиСтатуса = Справочники.ШтрихкодыУпаковокТоваров.СтруктураЗаписиСтатусаУпаковки();
			ДанныеЗаписиСтатуса.ОрганизацияЕГАИС     = СтрокаТЧ.ОрганизацияЕГАИС;
			ДанныеЗаписиСтатуса.АкцизнаяМарка        = СтрокаТЧ.ШтрихкодУпаковки;
			ДанныеЗаписиСтатуса.Статус               = Перечисления.СтатусыАкцизныхМарок.ВРезерве;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Справка2) Тогда
				ДанныеЗаписиСтатуса.Справка2 = СтрокаТЧ.Справка2;
			Иначе
				Если СтрокаТовара = Неопределено Тогда
					СтрокаТовара = Товары.Найти(СтрокаТЧ.ИдентификаторСтроки);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТовара) Тогда
					ДанныеЗаписиСтатуса.Справка2 = СтрокаТовара.Справка2;
				Иначе
					АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЗаполненияСправки2(СтрокаТЧ.ШтрихкодУпаковки);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.АлкогольнаяПродукция) Тогда
				ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
			Иначе
				Если СтрокаТовара = Неопределено Тогда
					СтрокаТовара = Товары.Найти(СтрокаТЧ.ИдентификаторСтроки);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТовара) Тогда
					ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаТовара.АлкогольнаяПродукция;
				Иначе
					АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЗаполненияСправки2(СтрокаТЧ.ШтрихкодУпаковки);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеЗаписиСтатуса.Основание = ДокументСсылка;
			РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписиСтатуса);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИнтеграцияЕГАИСПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОшибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОтмененКлиентом);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияЕГАИС.ЗапросСтатусаОформленияДействияНеОпределены();
	ИнтеграцияЕГАИСПереопределяемый.ЗапросСтатусаОформленияТТНИсходящаяЕГАИС(Запрос, ДокументОснование);
	
	Запрос.УстановитьПараметр("КонечныеСтатусыТТНИсходящаяЕГАИС", КонечныеСтатусы());
	Запрос.УстановитьПараметр("КонечныеСтатусыЧекЕГАИС", Документы.ЧекЕГАИС.КонечныеСтатусы());
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменСЕГАИС

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения);
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхЕГАИС") Тогда
		МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеОбмен);
	КонецЕсли;
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	МассивДействий = Новый Массив;
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхЕГАИС") Тогда
		МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеУведомленияОРегистрацииДвижения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолученияПодтверждения);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОформите() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	 0 КАК КоличествоДокументов
	|";
	ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаТТНИсходящаяЕГАИСОформите(ТекстЗапроса);
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОтработайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ПО
	|	СтатусыДокументовЕГАИС.Документ = ТТНИсходящаяЕГАИС.Ссылка
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ ТТНИсходящаяЕГАИС.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
	|	И (ТТНИсходящаяЕГАИС.Грузоотправитель В(&ОрганизацияЕГАИС)
	|		ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (ТТНИсходящаяЕГАИС.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|";
	ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаТТНИсходящаяЕГАИСОтработайте(ТекстЗапроса);
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОжидайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ПО
	|	СтатусыДокументовЕГАИС.Документ = ТТНИсходящаяЕГАИС.Ссылка
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ ТТНИсходящаяЕГАИС.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (ТТНИсходящаяЕГАИС.Грузоотправитель В(&ОрганизацияЕГАИС)
	|		ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (ТТНИсходящаяЕГАИС.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|";
	ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаТТНИсходящаяЕГАИСОжидайте(ТекстЗапроса);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат ТТНИсходящаяЕГАИСXML(ДокументСсылка);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной Тогда
		
		Возврат АктОтказаXML(ДокументСсылка);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях Тогда
		
		Возврат КвитанцияПодтвержденияАктаРасхожденийXML(ДокументСсылка);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях Тогда
		
		Возврат КвитанцияОтказаОтАктаРасхожденийXML(ДокументСсылка);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения Тогда
		
		Возврат КвитанцияПодтверждениеЗапросаНаОтменуПроведенияXML(ДокументСсылка);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения Тогда
		
		Возврат КвитанцияОтказаОтЗапросаНаОтменуПроведенияXML(ДокументСсылка);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СообщенияЕГАИС

Функция ТТНИсходящаяЕГАИСXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.ТТН;
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                        КАК Номер,
		|	Шапка.Дата                         КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
		|	Шапка.Идентификатор                КАК Идентификатор,
		|	Шапка.ДокументОснование            КАК ДокументОснование,
		|	
		|	Шапка.ВидОперации     КАК ВидОперации,
		|	Шапка.Упакована       КАК Упакована,
		|	Шапка.НомерТТН        КАК НомерТТН,
		|	Шапка.ДатаТТН         КАК ДатаТТН,
		|	Шапка.ДатаОтгрузки    КАК ДатаОтгрузки,
		|	Шапка.ТипДоставки     КАК ТипДоставки,
		|	Шапка.Перевозчик      КАК Перевозчик,
		|	Шапка.Автомобиль      КАК Автомобиль,
		|	Шапка.Прицеп          КАК Прицеп,
		|	Шапка.Заказчик        КАК Заказчик,
		|	Шапка.Водитель        КАК Водитель,
		|	Шапка.ПунктПогрузки   КАК ПунктПогрузки,
		|	Шапка.ПунктРазгрузки  КАК ПунктРазгрузки,
		|	Шапка.Перенаправление КАК Перенаправление,
		|	Шапка.Экспедитор      КАК Экспедитор,
		|	
		|	Грузоотправители.Ссылка                                         КАК ГрузоотправительСсылка,
		|	Грузоотправители.Код                                            КАК ГрузоотправительКод,
		|	ВЫРАЗИТЬ(Грузоотправители.Наименование КАК Строка(64))          КАК ГрузоотправительНаименование,
		|	ВЫРАЗИТЬ(Грузоотправители.НаименованиеПолное КАК Строка(255))   КАК ГрузоотправительНаименованиеПолное,
		|	Грузоотправители.ИНН                                            КАК ГрузоотправительИНН,
		|	Грузоотправители.КПП                                            КАК ГрузоотправительКПП,
		|	Грузоотправители.КодСтраны                                      КАК ГрузоотправительКодСтраны,
		|	Грузоотправители.КодРегиона                                     КАК ГрузоотправительКодРегиона,
		|	Грузоотправители.ПочтовыйИндекс                                 КАК ГрузоотправительПочтовыйИндекс,
		|	ВЫРАЗИТЬ(Грузоотправители.ПредставлениеАдреса КАК Строка(1000)) КАК ГрузоотправительПредставлениеАдреса,
		|	Грузоотправители.ТипОрганизации                                 КАК ГрузоотправительТипОрганизации,
		|	Грузоотправители.ИдентификаторОрганизацииТС                     КАК ГрузоотправительИдентификаторОрганизацииТС,
		|	
		|	Грузополучатели.Ссылка                                          КАК ГрузополучательСсылка,
		|	Грузополучатели.Код                                             КАК ГрузополучательКод,
		|	ВЫРАЗИТЬ(Грузополучатели.Наименование КАК Строка(64))           КАК ГрузополучательНаименование,
		|	ВЫРАЗИТЬ(Грузополучатели.НаименованиеПолное КАК Строка(255))    КАК ГрузополучательНаименованиеПолное,
		|	Грузополучатели.ИНН                                             КАК ГрузополучательИНН,
		|	Грузополучатели.КПП                                             КАК ГрузополучательКПП,
		|	Грузополучатели.КодСтраны                                       КАК ГрузополучательКодСтраны,
		|	Грузополучатели.КодРегиона                                      КАК ГрузополучательКодРегиона,
		|	Грузополучатели.ПочтовыйИндекс                                  КАК ГрузополучательПочтовыйИндекс,
		|	ВЫРАЗИТЬ(Грузополучатели.ПредставлениеАдреса КАК Строка(1000))  КАК ГрузополучательПредставлениеАдреса,
		|	Грузополучатели.ТипОрганизации                                  КАК ГрузополучательТипОрганизации,
		|	Грузополучатели.ИдентификаторОрганизацииТС                      КАК ГрузополучательИдентификаторОрганизацииТС,
		|	
		|	Поставщики.Ссылка                                               КАК ПоставщикСсылка,
		|	Поставщики.Код                                                  КАК ПоставщикКод,
		|	ВЫРАЗИТЬ(Поставщики.Наименование КАК Строка(64))                КАК ПоставщикНаименование,
		|	ВЫРАЗИТЬ(Поставщики.НаименованиеПолное КАК Строка(255))         КАК ПоставщикНаименованиеПолное,
		|	Поставщики.ИНН                                                  КАК ПоставщикИНН,
		|	Поставщики.КПП                                                  КАК ПоставщикКПП,
		|	Поставщики.КодСтраны                                            КАК ПоставщикКодСтраны,
		|	Поставщики.КодРегиона                                           КАК ПоставщикКодРегиона,
		|	Поставщики.ПочтовыйИндекс                                       КАК ПоставщикПочтовыйИндекс,
		|	ВЫРАЗИТЬ(Поставщики.ПредставлениеАдреса КАК Строка(1000))       КАК ПоставщикПредставлениеАдреса,
		|	Поставщики.ТипОрганизации                                       КАК ПоставщикТипОрганизации,
		|	Поставщики.ИдентификаторОрганизацииТС                           КАК ПоставщикИдентификаторОрганизацииТС,
		|	
		|	ВЫРАЗИТЬ(Шапка.Комментарий КАК Строка(200)) КАК Комментарий,
		|	ВЫРАЗИТЬ(Шапка.Основание КАК Строка(200))   КАК Основание,
		|	
		|	Шапка.Грузоотправитель              КАК ОрганизацияЕГАИС,
		|	Шапка.Грузоотправитель.Код          КАК ИдентификаторФСРАР,
		|	Шапка.Грузоотправитель.ФорматОбмена КАК ФорматОбменаГрузоотправителя,
		|	Шапка.Грузополучатель.ФорматОбмена  КАК ФорматОбменаГрузополучателя,
		|	Шапка.Ответственный                 КАК Ответственный
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС КАК Шапка,
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Грузополучатели
		|		ПО Грузополучатели.Ссылка = Шапка.Грузополучатель
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Поставщики
		|		ПО Поставщики.Ссылка = Шапка.Поставщик
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Грузоотправители
		|		ПО Грузоотправители.Ссылка = Шапка.Грузоотправитель
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	Товары.Номенклатура         КАК Номенклатура,
		|	Товары.Характеристика       КАК Характеристика,
		|	Товары.Серия                КАК Серия,
		|	Товары.Справка2             КАК Справка2
		|ПОМЕСТИТЬ ВТТовары
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка");
	
	ТекстыЗапроса.Добавить(
		ИнтеграцияЕГАИС.ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(
			"ВТТовары",
			"ВТКоэффициентыПересчетаВЕдиницыЕГАИС"));
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Справка2 КАК Ссылка
		|ПОМЕСТИТЬ Справки2
		|ИЗ
		|	ВТТовары КАК Товары
		|ИНДЕКСИРОВАТЬ ПО
		|	Товары.Справка2
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Диапазоны.Ссылка         КАК Справка2,
		|	Диапазоны.ТипМарки       КАК ТипМарки,
		|	Диапазоны.СерияМарки     КАК СерияМарки,
		|	Диапазоны.НачальныйНомер КАК НачальныйНомер,
		|	Диапазоны.КонечныйНомер  КАК КонечныйНомер
		|ИЗ
		|	Справочник.Справки2ЕГАИС.ДиапазоныНомеровАкцизныхМарок КАК Диапазоны
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справки2 КАК Справки2
		|		ПО Справки2.Ссылка = Диапазоны.Ссылка
		|ИТОГИ ПО
		|	Справка2,
		|	ТипМарки
		|",
		"Справки2");
	
	ТекстЗапросаАлкогольнаяПродукция = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	ВТТовары КАК Товары
	|;
	|
	|//#РезультатЗапроса#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	
	|	Продукция.Код                                   КАК ПродукцияКод,
	|	ВЫРАЗИТЬ(Продукция.Наименование КАК Строка(64)) КАК ПродукцияНаименование,
	|	Продукция.Объем                                 КАК ПродукцияОбъем,
	|	Продукция.Крепость                              КАК ПродукцияКрепость,
	|	Продукция.НаименованиеПолное                    КАК ПродукцияНаименованиеПолное,
	|	ЕСТЬNULL(ВидыПродукции.Код, """")               КАК ПродукцияКодВидаПродукции,
	|	Продукция.ТипПродукции                          КАК ПродукцияТипПродукции,
	|	ЕСТЬNULL(ВидыПродукции.ВидЛицензии, ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.ПустаяСсылка)) КАК ПродукцияВидЛицензии,
	|	
	|	Производители.Ссылка                                         КАК ПроизводительСсылка,
	|	Производители.Код                                            КАК ПроизводительКод,
	|	ВЫРАЗИТЬ(Производители.Наименование КАК Строка(64))          КАК ПроизводительНаименование,
	|	ВЫРАЗИТЬ(Производители.НаименованиеПолное КАК Строка(255))   КАК ПроизводительНаименованиеПолное,
	|	Производители.ИНН                                            КАК ПроизводительИНН,
	|	Производители.КПП                                            КАК ПроизводительКПП,
	|	Производители.КодСтраны                                      КАК ПроизводительКодСтраны,
	|	Производители.КодРегиона                                     КАК ПроизводительКодРегиона,
	|	Производители.ПочтовыйИндекс                                 КАК ПроизводительПочтовыйИндекс,
	|	ВЫРАЗИТЬ(Производители.ПредставлениеАдреса КАК Строка(1000)) КАК ПроизводительПредставлениеАдреса,
	|	Производители.ТипОрганизации                                 КАК ПроизводительТипОрганизации,
	|	Производители.ИдентификаторОрганизацииТС                     КАК ПроизводительИдентификаторОрганизацииТС,
	|	
	|	Импортеры.Ссылка                                         КАК ИмпортерСсылка,
	|	Импортеры.Код                                            КАК ИмпортерКод,
	|	ВЫРАЗИТЬ(Импортеры.Наименование КАК Строка(64))          КАК ИмпортерНаименование,
	|	ВЫРАЗИТЬ(Импортеры.НаименованиеПолное КАК Строка(255))   КАК ИмпортерНаименованиеПолное,
	|	Импортеры.ИНН                                            КАК ИмпортерИНН,
	|	Импортеры.КПП                                            КАК ИмпортерКПП,
	|	Импортеры.КодСтраны                                      КАК ИмпортерКодСтраны,
	|	Импортеры.КодРегиона                                     КАК ИмпортерКодРегиона,
	|	Импортеры.ПочтовыйИндекс                                 КАК ИмпортерПочтовыйИндекс,
	|	ВЫРАЗИТЬ(Импортеры.ПредставлениеАдреса КАК Строка(1000)) КАК ИмпортерПредставлениеАдреса,
	|	Импортеры.ТипОрганизации                                 КАК ИмпортерТипОрганизации,
	|	Импортеры.ИдентификаторОрганизацииТС                     КАК ИмпортерИдентификаторОрганизацииТС
	|ИЗ
	|	АлкогольнаяПродукция КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК Продукция
	|		ПО Продукция.Ссылка = Товары.АлкогольнаяПродукция
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыПродукции
	|		ПО Продукция.ВидПродукции = ВидыПродукции.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Производители
	|		ПО Производители.Ссылка = Продукция.Производитель
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Импортеры
	|		ПО Импортеры.Ссылка = Продукция.Импортер
	|";
	
	ТекстыЗапроса.Добавить(
		ТекстЗапросаАлкогольнаяПродукция,
		"АлкогольнаяПродукция");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.НомерСтроки                      КАК НомерСтроки,
		|	Товары.АлкогольнаяПродукция             КАК АлкогольнаяПродукция,
		|	Товары.ИдентификаторУпаковки            КАК ИдентификаторУпаковки,
		|	Товары.Количество
		|	* ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1) КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1) <> 0
		|			ТОГДА Товары.Цена / ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1)
		|		ИНАЧЕ Товары.Цена
		|	КОНЕЦ КАК Цена,
		|	Товары.НомерПартии                      КАК НомерПартии,
		|	Товары.Справка2                         КАК Справка2,
		|	Товары.Справка2.НомерСправки1           КАК НомерСправки1,
		|	Товары.Справка2.РегистрационныйНомер    КАК НомерСправки2,
		|	
		|	ЕСТЬNULL(ЕдиницыЕГАИС.ПроверятьОбъемДАЛ, ЛОЖЬ) КАК ПроверятьОбъемДАЛ,
		|	ЕСТЬNULL(ЕдиницыЕГАИС.ОбъемДАЛ, 0)             КАК ОбъемДАЛ
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыПересчетаВЕдиницыЕГАИС КАК ЕдиницыЕГАИС
		|		ПО ЕдиницыЕГАИС.АлкогольнаяПродукция = Товары.АлкогольнаяПродукция
		|		 И ЕдиницыЕГАИС.Номенклатура = Товары.Номенклатура
		|		 И ЕдиницыЕГАИС.Характеристика = Товары.Характеристика
		|		 И ЕдиницыЕГАИС.Серия = Товары.Серия
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|",
		"Товары");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = ДокументСсылка;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляОрганизацияЕГАИС         = "Грузоотправитель";
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Шапка                = РезультатыЗапроса["Шапка"].Выбрать();
	ВыборкаПоСправкам2   = РезультатыЗапроса["Справки2"].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	АлкогольнаяПродукция = РезультатыЗапроса["АлкогольнаяПродукция"].Выгрузить();
	Товары               = РезультатыЗапроса["Товары"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ФорматОбмена(Шапка);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область ПодготовкаДанных
	
	ТоварыИтоги = Новый ТаблицаЗначений;
	ТоварыИтоги.Колонки.Добавить("АлкогольнаяПродукция");
	ТоварыИтоги.Колонки.Добавить("ИдентификаторУпаковки");
	ТоварыИтоги.Колонки.Добавить("НомерПартии");
	ТоварыИтоги.Колонки.Добавить("НомерСправки1");
	ТоварыИтоги.Колонки.Добавить("НомерСправки2");
	ТоварыИтоги.Колонки.Добавить("Справка2");
	ТоварыИтоги.Колонки.Добавить("Количество");
	ТоварыИтоги.Колонки.Добавить("Цена");
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Если СтрокаТЧ.ПроверятьОбъемДАЛ
			И Не ЗначениеЗаполнено(СтрокаТЧ.ОбъемДАЛ) Тогда
			ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.'"), СтрокаТЧ.НомерСтроки));
		КонецЕсли;
		
		НоваяСтрока = ТоварыИтоги.Добавить();
		НоваяСтрока.АлкогольнаяПродукция  = СтрокаТЧ.АлкогольнаяПродукция;
		НоваяСтрока.ИдентификаторУпаковки = СтрокаТЧ.ИдентификаторУпаковки;
		НоваяСтрока.НомерПартии           = СтрокаТЧ.НомерПартии;
		НоваяСтрока.НомерСправки1         = СтрокаТЧ.НомерСправки1;
		НоваяСтрока.НомерСправки2         = СтрокаТЧ.НомерСправки2;
		НоваяСтрока.Справка2              = СтрокаТЧ.Справка2;
		НоваяСтрока.Количество            = СтрокаТЧ.Количество;
		НоваяСтрока.Цена                  = СтрокаТЧ.Цена;
		
	КонецЦикла;
	
	ТоварыИтоги.Свернуть(
		"АлкогольнаяПродукция,
		|ИдентификаторУпаковки,
		|НомерПартии,
		|НомерСправки1,
		|НомерСправки2,
		|Справка2,
		|Цена",
		"Количество");
	
	#КонецОбласти
	
	#Область ТТН
	
	ТипыТТН = Новый Соответствие;
	ТипыТТН.Вставить(Перечисления.ВидыОперацийТТНИсходящейЕГАИС.РасходнаяНакладная, "WBInvoiceFromMe");
	ТипыТТН.Вставить(Перечисления.ВидыОперацийТТНИсходящейЕГАИС.ВозвратПоставщику, "WBReturnFromMe");
	
	Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
		
		#Область ФорматОбмена_V1
		
		ДокументXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillType");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "Identity", Шапка.Идентификатор, СообщениеXML, 3);
		
		ДокументXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Type",         ТипыТТН[Шапка.ВидОперации],               СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "UnitType",     ?(Шапка.Упакована, "Packed", "Unpacked"), СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "NUMBER",       СокрЛП(Шапка.НомерТТН),                   СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Date",         Шапка.ДатаТТН,                            СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "ShippingDate", Шапка.ДатаОтгрузки,                       СообщениеXML);
		
		ДокументXDTO.Header.Transport = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO.Header, "Transport");
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOТранспортныйРазделТТН(ДокументXDTO.Header.Transport, Шапка, СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v1(ДокументXDTO.Header, "Shipper",   Шапка, "Грузоотправитель", СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v1(ДокументXDTO.Header, "Consignee", Шапка, "Грузополучатель",  СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v1(ДокументXDTO.Header, "Supplier",  Шапка, "Поставщик",        СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Base", Шапка.Основание,   СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Note", Шапка.Комментарий, СообщениеXML);
		
		ДокументXDTO.Content = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Content");
		
		Для Каждого СтрокаТЧ Из ТоварыИтоги Цикл
			
			НомерСтроки = Формат(ТоварыИтоги.Индекс(СтрокаТЧ) + 1, "ЧГ=0");
			
			Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "PositionType");
			
			Position.Product = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "Product");
			
			ИнтеграцияЕГАИС.ЗаполнитьВXDTOАлкогольнуюПродукцию_v1(
				Position.Product,
				АлкогольнаяПродукция.Найти(СтрокаТЧ.АлкогольнаяПродукция, "АлкогольнаяПродукция"),
				"Продукция", СообщениеXML);
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Pack_ID",  СтрокаТЧ.ИдентификаторУпаковки, СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Quantity", СтрокаТЧ.Количество,            СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Price"   , СтрокаТЧ.Цена,                  СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Party",    СтрокаТЧ.НомерПартии,           СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity", НомерСтроки,                    СообщениеXML, 5);
			
			Position.InformA = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "InformA");
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformA, "RegId", СтрокаТЧ.НомерСправки1, СообщениеXML);
			
			Position.InformB = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "InformB");
			Position.InformB.InformBItem = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformB, "InformBItem");
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformB.InformBItem, "BRegId", СтрокаТЧ.НомерСправки2, СообщениеXML);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Справка2", СтрокаТЧ.Справка2);
			ВыборкаПоСправкам2.Сбросить();
			Если ВыборкаПоСправкам2.НайтиСледующий(СтруктураПоиска) Тогда
				
				ВыборкаПоТипам = ВыборкаПоСправкам2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоТипам.Следующий() Цикл
					
					Position.InformB.InformBItem.MarkInfo = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformB.InformBItem, "MarkInfo");
					ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformB.InformBItem.MarkInfo, "Type", ВыборкаПоТипам.ТипМарки, СообщениеXML);
					Position.InformB.InformBItem.MarkInfo.Ranges = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformB.InformBItem.MarkInfo, "Ranges");
					
					ВыборкаПоДиапазонам = ВыборкаПоТипам.Выбрать();
					Пока ВыборкаПоДиапазонам.Следующий() Цикл
						
						Range = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformB.InformBItem.MarkInfo.Ranges, "Range");
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Rank",  ВыборкаПоДиапазонам.СерияМарки,             СообщениеXML);
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Start", СокрЛП(ВыборкаПоДиапазонам.НачальныйНомер), СообщениеXML);
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Last",  СокрЛП(ВыборкаПоДиапазонам.КонечныйНомер),  СообщениеXML);
						Position.InformB.InformBItem.MarkInfo.Ranges.Range.Добавить(Range);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДокументXDTO.Content.Position.Добавить(Position);
			
		КонецЦикла;
		
		#КонецОбласти
		
	ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
		
		#Область ФорматОбмена_V2
		
		ДокументXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillType_v2");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "Identity", Шапка.Идентификатор, СообщениеXML, 3);
		
		ДокументXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Type",         ТипыТТН[Шапка.ВидОперации], СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "NUMBER",       СокрЛП(Шапка.НомерТТН),     СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Date",         Шапка.ДатаТТН,              СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "ShippingDate", Шапка.ДатаОтгрузки,         СообщениеXML);
		
		ДокументXDTO.Header.Transport = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO.Header, "Transport");
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOТранспортныйРазделТТН(ДокументXDTO.Header.Transport, Шапка, СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v2(ДокументXDTO.Header, "Shipper",   Шапка, "Грузоотправитель", СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v2(ДокументXDTO.Header, "Consignee", Шапка, "Грузополучатель",  СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Base", Шапка.Основание,   СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Note", Шапка.Комментарий, СообщениеXML);
		
		ДокументXDTO.Content = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Content");
		
		Для Каждого СтрокаТЧ Из ТоварыИтоги Цикл
			
			НомерСтроки = Формат(ТоварыИтоги.Индекс(СтрокаТЧ) + 1, "ЧГ=0");
			
			Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "PositionType");
			
			Position.Product = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "Product");
			
			ИнтеграцияЕГАИС.ЗаполнитьВXDTOАлкогольнуюПродукцию_v2(
				Position.Product,
				АлкогольнаяПродукция.Найти(СтрокаТЧ.АлкогольнаяПродукция, "АлкогольнаяПродукция"),
				"Продукция", СообщениеXML);
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Pack_ID",  СтрокаТЧ.ИдентификаторУпаковки, СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Quantity", СтрокаТЧ.Количество,            СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Price"   , СтрокаТЧ.Цена,                  СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Party",    СтрокаТЧ.НомерПартии,           СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity", НомерСтроки,                    СообщениеXML, 5);
			
			Position.InformF1 = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "InformF1");
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformF1, "RegId", СтрокаТЧ.НомерСправки1, СообщениеXML);
			
			Position.InformF2 = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "InformF2");
			Position.InformF2.InformF2Item = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformF2, "InformF2Item");
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformF2.InformF2Item, "F2RegId", СтрокаТЧ.НомерСправки2, СообщениеXML);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Справка2", СтрокаТЧ.Справка2);
			ВыборкаПоСправкам2.Сбросить();
			Если ВыборкаПоСправкам2.НайтиСледующий(СтруктураПоиска) Тогда
				
				ВыборкаПоТипам = ВыборкаПоСправкам2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоТипам.Следующий() Цикл
					
					Position.InformF2.InformF2Item.MarkInfo = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformF2.InformF2Item, "MarkInfo");
					ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformF2.InformF2Item.MarkInfo, "Type", ВыборкаПоТипам.ТипМарки, СообщениеXML);
					Position.InformF2.InformF2Item.MarkInfo.Ranges = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformF2.InformF2Item.MarkInfo, "Ranges");
					
					ВыборкаПоДиапазонам = ВыборкаПоТипам.Выбрать();
					Пока ВыборкаПоДиапазонам.Следующий() Цикл
						
						Range = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformF2.InformF2Item.MarkInfo.Ranges, "Range");
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Rank",  ВыборкаПоДиапазонам.СерияМарки,             СообщениеXML);
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Start", СокрЛП(ВыборкаПоДиапазонам.НачальныйНомер), СообщениеXML);
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Last",  СокрЛП(ВыборкаПоДиапазонам.КонечныйНомер),  СообщениеXML);
						Position.InformF2.InformF2Item.MarkInfo.Ranges.Range.Добавить(Range);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДокументXDTO.Content.Position.Добавить(Position);
			
		КонецЦикла;
		
		#КонецОбласти
		
	ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3 Тогда
		
		#Область ПодготовкаДанных
		
		АкцизныеМарки = Новый ТаблицаЗначений;
		АкцизныеМарки.Колонки.Добавить("Справка2");
		АкцизныеМарки.Колонки.Добавить("ШтрихкодУпаковки");
		АкцизныеМарки.Колонки.Добавить("КодАкцизнойМарки");
		АкцизныеМарки.Колонки.Добавить("Родитель");
		
		Выборка = РезультатыЗапроса["ВложенныеШтрихкоды"].Выбрать();
		ВложенныеШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(
									Выборка, МенеджерВременныхТаблиц);
		
		Для Каждого СтрокаТЧ Из ВложенныеШтрихкодыУпаковок.МаркированныеТовары Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Статус) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Справка2) Тогда
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML,
					СтрШаблон(НСтр("ru = 'Для акцизной марки %1 не определена справка 2.'"), СтрокаТЧ.Штрихкод));
				Продолжить;
			ИначеЕсли СтрокаТЧ.Статус <> Перечисления.СтатусыАкцизныхМарок.ВНаличии Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Акцизная марка %1 со статусом %2 не может быть отгружена.'"),
					СтрокаТЧ.Штрихкод, 
					?(ЗначениеЗаполнено(СтрокаТЧ.Статус), СтрокаТЧ.Статус, НСтр("ru = '<статус отсутствует>'")));
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML, ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = АкцизныеМарки.Добавить();
			НоваяСтрока.Справка2 = СтрокаТЧ.Справка2;
			Если СтрокаТЧ.СтрокаДерева.Родитель = Неопределено Тогда
				НоваяСтрока.ШтрихкодУпаковки = "";
			Иначе
				НоваяСтрока.ШтрихкодУпаковки = СтрокаТЧ.СтрокаДерева.Родитель.Штрихкод;
			КонецЕсли;
			НоваяСтрока.КодАкцизнойМарки = СтрокаТЧ.Штрихкод;
			НоваяСтрока.Родитель         = СтрокаТЧ.СтрокаДерева.Родитель;
			
		КонецЦикла;
		
		АкцизныеМарки.Сортировать("Справка2, ШтрихкодУпаковки");
		
		#КонецОбласти
		
		#Область ФорматОбмена_V3
		
		ДокументXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillType_v3");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "Identity", Шапка.Идентификатор, СообщениеXML, 3);
		
		ДокументXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Type",         ТипыТТН[Шапка.ВидОперации], СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "NUMBER",       СокрЛП(Шапка.НомерТТН),     СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Date",         Шапка.ДатаТТН,              СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "ShippingDate", Шапка.ДатаОтгрузки,         СообщениеXML);
		
		ДокументXDTO.Header.Transport = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO.Header, "Transport");
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOТранспортныйРазделТТН(ДокументXDTO.Header.Transport, Шапка, СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v2(ДокументXDTO.Header, "Shipper",   Шапка, "Грузоотправитель", СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v2(ДокументXDTO.Header, "Consignee", Шапка, "Грузополучатель",  СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Base", Шапка.Основание,   СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Note", Шапка.Комментарий, СообщениеXML);
		
		ДокументXDTO.Content = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Content");
		
		Для Каждого СтрокаТЧ Из ТоварыИтоги Цикл
			
			НомерСтроки = Формат(ТоварыИтоги.Индекс(СтрокаТЧ) + 1, "ЧГ=0");
			
			Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "PositionType");
			
			Position.Product = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "Product");
			
			ИнтеграцияЕГАИС.ЗаполнитьВXDTOАлкогольнуюПродукцию_v2(
				Position.Product,
				АлкогольнаяПродукция.Найти(СтрокаТЧ.АлкогольнаяПродукция, "АлкогольнаяПродукция"),
				"Продукция", СообщениеXML);
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Pack_ID",  СтрокаТЧ.ИдентификаторУпаковки, СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Quantity", СтрокаТЧ.Количество,            СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Price"   , СтрокаТЧ.Цена,                  СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Party",    СтрокаТЧ.НомерПартии,           СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity", НомерСтроки,                    СообщениеXML, 5);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "FARegId",  СтрокаТЧ.НомерСправки1,         СообщениеXML);
			
			Position.InformF2 = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "InformF2");
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformF2, "F2RegId", СтрокаТЧ.НомерСправки2, СообщениеXML);
			
			#Область АкцизныеМарки
			
			ИспользованныеУзлыДереваУпаковок = Новый Соответствие;
			
			НайденныеАкцизныеМарки  = АкцизныеМарки.НайтиСтроки(Новый Структура("Справка2", СтрокаТЧ.Справка2));
			ТекущийШтрихкодУпаковки = Неопределено;
			boxpos                  = Неопределено;
			
			Если НайденныеАкцизныеМарки.Количество() > 0 Тогда
				
				Если НайденныеАкцизныеМарки.Количество() > СтрокаТЧ.Количество Тогда
					ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеXML,
						СтрШаблон(
							НСтр("ru = 'По алкогольной продукции %1 (номер справки 2: %2) количество акцизных марок (%3) превышает количество в ТТН (%4).'"),
							СтрокаТЧ.АлкогольнаяПродукция,
							СтрокаТЧ.НомерСправки2,
							НайденныеАкцизныеМарки.Количество(),
							СтрокаТЧ.Количество));
				КонецЕсли;
				
				Position.InformF2.MarkInfo = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformF2, "MarkInfo");
				
				Для Каждого НайденнаяАкцизнаяМарка Из НайденныеАкцизныеМарки Цикл
					
					Если ТекущийШтрихкодУпаковки = Неопределено
						Или ТекущийШтрихкодУпаковки <> НайденнаяАкцизнаяМарка.ШтрихкодУпаковки Тогда
						
						ТекущийШтрихкодУпаковки = НайденнаяАкцизнаяМарка.ШтрихкодУпаковки;
						
						Если boxpos <> Неопределено Тогда
							Position.InformF2.MarkInfo.boxpos.Добавить(boxpos);
						КонецЕсли;
						
						boxpos = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformF2.MarkInfo, "boxpos");
						boxpos.amclist = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(boxpos, "amclist");
						
						Если Не ПустаяСтрока(НайденнаяАкцизнаяМарка.ШтрихкодУпаковки) Тогда
							
							ТекущийРодитель = НайденнаяАкцизнаяМарка.Родитель;
							ИспользованныеУзлыДереваУпаковок.Вставить(ТекущийРодитель, Истина);
							
							Пока ТекущийРодитель <> Неопределено Цикл
								
								Если ТекущийРодитель.Родитель <> Неопределено Тогда
									ИспользованныеУзлыДереваУпаковок.Вставить(ТекущийРодитель.Родитель, Истина);
								КонецЕсли;
								ТекущийРодитель = ТекущийРодитель.Родитель;
								
							КонецЦикла;
							
							ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(boxpos, "boxnumber", НайденнаяАкцизнаяМарка.ШтрихкодУпаковки, СообщениеXML);
							
						КонецЕсли;
						
					КонецЕсли;
					
					boxpos.amclist.amc.Добавить(НайденнаяАкцизнаяМарка.КодАкцизнойМарки);
					
				КонецЦикла;
				
				Если boxpos <> Неопределено Тогда
					Position.InformF2.MarkInfo.boxpos.Добавить(boxpos);
				КонецЕсли;
				
				Если ИспользованныеУзлыДереваУпаковок.Количество() > 0 Тогда
					
					boxInfo = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "boxInfo");
					
					ТребуетсяОписаниеИерархииУпаковок = Ложь;
					Для Каждого СтрокаДерева Из ВложенныеШтрихкодыУпаковок.ДеревоУпаковок.Строки Цикл
						
						Если ИспользованныеУзлыДереваУпаковок.Получить(СтрокаДерева) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						boxtree = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(boxInfo, "boxtree");
						boxtree.boxnum.Добавить(СтрокаДерева.Штрихкод);
						
						ЕстьВложенныеШтрихкодыУпаковок = ПостроитьBoxInfo(СтрокаДерева, ИспользованныеУзлыДереваУпаковок, boxtree);
						Если ЕстьВложенныеШтрихкодыУпаковок Тогда
							ТребуетсяОписаниеИерархииУпаковок = Истина;
						КонецЕсли;
						
						boxInfo.boxtree.Добавить(boxtree);
						
					КонецЦикла;
					
					Если ТребуетсяОписаниеИерархииУпаковок Тогда
						Position.boxInfo = boxInfo;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			#КонецОбласти
			
			ДокументXDTO.Content.Position.Добавить(Position);
			
		КонецЦикла;
		
		#КонецОбласти
		
	КонецЕсли;
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(ДокументXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция АктОтказаXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                        КАК Номер,
	|	Шапка.Дата                         КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование            КАК ДокументОснование,
	|	
	|	Шапка.ИдентификаторЕГАИС   КАК ИдентификаторЕГАИС,
	|	ВЫРАЗИТЬ(Шапка.Комментарий КАК Строка(500)) КАК Комментарий,
	|	
	|	Шапка.Грузоотправитель              КАК ОрганизацияЕГАИС,
	|	Шапка.Грузоотправитель.Код          КАК ИдентификаторФСРАР,
	|	Шапка.Грузоотправитель.ФорматОбмена КАК ФорматОбменаГрузоотправителя,
	|	Шапка.Грузополучатель.ФорматОбмена  КАК ФорматОбменаГрузополучателя,
	|	Шапка.Ответственный                 КАК Ответственный
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК Шапка,
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ФорматОбмена(Шапка);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область АктТТНОтказ
	
	Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
		
		#Область ФорматОбмена_V1
		
		АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillActType");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "cwb"), СообщениеXML, 3);
		
		АктXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "IsAccept",  "Rejected",               СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ACTNUMBER", СокрЛП(Шапка.Номер),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate",   ТекущаяДатаСеанса(),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "WBRegId",   Шапка.ИдентификаторЕГАИС, СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",      Шапка.Комментарий,        СообщениеXML);
		
		#КонецОбласти
		
	ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
		
		#Область ФорматОбмена_V2
		
		АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillActType_v2");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "cwb"), СообщениеXML, 3);
		
		АктXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "IsAccept",  "Rejected",               СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ACTNUMBER", СокрЛП(Шапка.Номер),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate",   ТекущаяДатаСеанса(),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "WBRegId",   Шапка.ИдентификаторЕГАИС, СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",      Шапка.Комментарий,        СообщениеXML);
		
		#КонецОбласти
		
	Иначе
		
		#Область ФорматОбмена_V3
		
		АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillActType_v3");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "cwb"), СообщениеXML, 3);
		
		АктXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "IsAccept",  "Rejected",               СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ACTNUMBER", СокрЛП(Шапка.Номер),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate",   ТекущаяДатаСеанса(),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "WBRegId",   Шапка.ИдентификаторЕГАИС, СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",      Шапка.Комментарий,        СообщениеXML);
		
		#КонецОбласти
		
	КонецЕсли;
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(АктXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция КвитанцияПодтвержденияАктаРасхожденийXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                         КАК Номер,
	|	Шапка.Дата                          КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)  КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование             КАК ДокументОснование,
	|	
	|	Шапка.ИдентификаторЕГАИС            КАК ИдентификаторЕГАИС,
	|	Шапка.Грузоотправитель              КАК ОрганизацияЕГАИС,
	|	Шапка.Грузоотправитель.Код          КАК ИдентификаторФСРАР,
	|	Шапка.Грузоотправитель.ФорматОбмена КАК ФорматОбменаГрузоотправителя,
	|	Шапка.Грузополучатель.ФорматОбмена  КАК ФорматОбменаГрузополучателя,
	|	Шапка.Комментарий                   КАК Комментарий,
	|	Шапка.Ответственный                 КАК Ответственный
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК Шапка,
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ФорматОбмена(Шапка);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область КвитанцияАктаРасхожденийПодтверждение
	
	КвитанцияXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ConfirmTicketType");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "cct"), СообщениеXML, 3);
	
	КвитанцияXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(КвитанцияXDTO, "Header");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "IsConfirm",    "Accepted",               СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "TicketNumber", СокрЛП(Шапка.Номер),      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "TicketDate",   ТекущаяДатаСеанса(),      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "WBRegId",      Шапка.ИдентификаторЕГАИС, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "Note",         Шапка.Комментарий,        СообщениеXML);
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(КвитанцияXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция КвитанцияОтказаОтАктаРасхожденийXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                         КАК Номер,
	|	Шапка.Дата                          КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)  КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование             КАК ДокументОснование,
	|	
	|	Шапка.ИдентификаторЕГАИС            КАК ИдентификаторЕГАИС,
	|	Шапка.Грузоотправитель              КАК ОрганизацияЕГАИС,
	|	Шапка.Грузоотправитель.Код          КАК ИдентификаторФСРАР,
	|	Шапка.Грузоотправитель.ФорматОбмена КАК ФорматОбменаГрузоотправителя,
	|	Шапка.Грузополучатель.ФорматОбмена  КАК ФорматОбменаГрузополучателя,
	|	Шапка.Комментарий                   КАК Комментарий,
	|	Шапка.Ответственный                 КАК Ответственный
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК Шапка,
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ФорматОбмена(Шапка);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область КвитанцияАктаРасхожденийОтказ
	
	КвитанцияXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ConfirmTicketType");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "rct"), СообщениеXML, 3);
	
	КвитанцияXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(КвитанцияXDTO, "Header");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "IsConfirm",    "Rejected",               СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "TicketNumber", СокрЛП(Шапка.Номер),      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "TicketDate",   ТекущаяДатаСеанса(),      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "WBRegId",      Шапка.ИдентификаторЕГАИС, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "Note",         Шапка.Комментарий,        СообщениеXML);
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(КвитанцияXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция КвитанцияПодтверждениеЗапросаНаОтменуПроведенияXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                         КАК Номер,
	|	Шапка.Дата                          КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)  КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование             КАК ДокументОснование,
	|	
	|	Шапка.ИдентификаторЕГАИС            КАК ИдентификаторЕГАИС,
	|	Шапка.Грузоотправитель              КАК ОрганизацияЕГАИС,
	|	Шапка.Грузоотправитель.Код          КАК ИдентификаторФСРАР,
	|	Шапка.Грузоотправитель.ФорматОбмена КАК ФорматОбменаГрузоотправителя,
	|	Шапка.Грузополучатель.ФорматОбмена  КАК ФорматОбменаГрузополучателя,
	|	Шапка.Комментарий                   КАК Комментарий,
	|	Шапка.Ответственный                 КАК Ответственный
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК Шапка,
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ФорматОбмена(Шапка);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение
	
	КвитанцияXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ConfirmRepealWB");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "acr"), СообщениеXML, 3);
	
	КвитанцияXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(КвитанцияXDTO, "Header");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "IsConfirm",     "Accepted",               СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "ConfirmNumber", СокрЛП(Шапка.Номер),      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "ConfirmDate",   ТекущаяДатаСеанса(),      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "WBRegId",       Шапка.ИдентификаторЕГАИС, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "Note",          Шапка.Комментарий,        СообщениеXML);
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(КвитанцияXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция КвитанцияОтказаОтЗапросаНаОтменуПроведенияXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                         КАК Номер,
	|	Шапка.Дата                          КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)  КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование             КАК ДокументОснование,
	|	
	|	Шапка.ИдентификаторЕГАИС            КАК ИдентификаторЕГАИС,
	|	Шапка.Грузоотправитель              КАК ОрганизацияЕГАИС,
	|	Шапка.Грузоотправитель.Код          КАК ИдентификаторФСРАР,
	|	Шапка.Грузоотправитель.ФорматОбмена КАК ФорматОбменаГрузоотправителя,
	|	Шапка.Грузополучатель.ФорматОбмена  КАК ФорматОбменаГрузополучателя,
	|	Шапка.Комментарий                   КАК Комментарий,
	|	Шапка.Ответственный                 КАК Ответственный
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК Шапка,
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ФорматОбмена(Шапка);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область КвитанцияЗапросаНаОтменуПроведенияТТНОтказ
	
	КвитанцияXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ConfirmRepealWB");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "rcr"), СообщениеXML, 3);
	
	КвитанцияXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(КвитанцияXDTO, "Header");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "IsConfirm",     "Rejected",               СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "ConfirmNumber", СокрЛП(Шапка.Номер),      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "ConfirmDate",   ТекущаяДатаСеанса(),      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "WBRegId",       Шапка.ИдентификаторЕГАИС, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(КвитанцияXDTO.Header, "Note",          Шапка.Комментарий,        СообщениеXML);
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(КвитанцияXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#Область СканированиеАлкогольнойПродукции

Функция ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
	|	ТТНИсходящаяЕГАИСТовары.Номенклатура                 КАК Номенклатура,
	|	ТТНИсходящаяЕГАИСТовары.Характеристика               КАК Характеристика,
	|	ТТНИсходящаяЕГАИСТовары.Серия                        КАК Серия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|		ИНАЧЕ ТТНИсходящаяЕГАИСТовары.Справка2
	|	КОНЕЦ                                                КАК Справка2,
	|	СУММА(ТТНИсходящаяЕГАИСТовары.Количество)            КАК Количество,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ) КАК Маркируемая
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО (КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка)
	|ГДЕ
	|	ТТНИсходящаяЕГАИСТовары.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТТНИсходящаяЕГАИСТовары.Номенклатура,
	|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция,
	|	ТТНИсходящаяЕГАИСТовары.Характеристика,
	|	ТТНИсходящаяЕГАИСТовары.Серия,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|		ИНАЧЕ ТТНИсходящаяЕГАИСТовары.Справка2
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НаличиеМаркируемойПродукции(Ссылка) Экспорт 
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьМаркируемая", Ложь);
	СтруктураВозврата.Вставить("ЕстьНеМаркируемая", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ВидыАлкогольнойПродукции.Маркируемый КАК Маркируемый
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка
	|ГДЕ
	|	ТТНИсходящаяЕГАИСТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Маркируемый Тогда
			СтруктураВозврата.ЕстьМаркируемая = Истина;
		Иначе
			СтруктураВозврата.ЕстьНеМаркируемая = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата; 
	
КонецФункции

Функция ШтрихкодыУпаковок(ДокументСсылка, ЗаполнитьСправки2ИзРегистра = Ложь) Экспорт
	
	Возврат ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, ЗаполнитьСправки2ИзРегистра);
	
//	ПараметрыФормированияТекстаЗапроса = Справочники.ШтрихкодыУпаковокТоваров.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
//	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = ДокументСсылка;
//	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
//	ПараметрыФормированияТекстаЗапроса.ИмяПоляОрганизацияЕГАИС         = "Грузоотправитель";
//	ПараметрыФормированияТекстаЗапроса.ЗаполнитьСправки2ИзРегистра     = ЗаполнитьСправки2ИзРегистра;
//	
//	Возврат Справочники.ШтрихкодыУпаковокТоваров.ШтрихкодыУпаковокПоДокументу(ПараметрыФормированияТекстаЗапроса);
	
КонецФункции

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
		
		Возврат ОбработатьДанныеШтрихкодаУпаковки(Форма, ДанныеШтрихкода, ВложенныеШтрихкоды, ПараметрыСканирования);
		
	ИначеЕсли ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		Возврат ОбработатьДанныеШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
		
		Возврат ОбработатьДанныеШтрихкодаСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция предназначена для обработки считанного штрихкода акцизной марки старого (PDF417) и нового (Data Matrix) образцов
//
Функция ОбработатьДанныеШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканирования);
	Если Форма.Элементы.Товары.ТекущаяСтрока <> Неопределено Тогда
		ПараметрыЗаполнения.ТекущаяСтрока = Форма.Объект.Товары.НайтиПоИдентификатору(Форма.Элементы.Товары.ТекущаяСтрока);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
	ПараметрыОтбора.Вставить("Серия",          ДанныеШтрихкода.Серия);
	
	РезультатПоиска = АкцизныеМаркиЕГАИС.НайтиСтрокиТоваров(
		Форма.Объект.Товары, ПараметрыОтбора,
		ДанныеШтрихкода.Справка2, ДанныеШтрихкода.АлкогольнаяПродукция, ПараметрыЗаполнения);
	
	СтрокаТЧ                        = РезультатПоиска.ПолноеСоответствие;
	СтрокиТЧДляУменьшенияКоличества = РезультатПоиска.КЗаполнению;
	
	Если СтрокиТЧДляУменьшенияКоличества = Неопределено
		И СтрокаТЧ = Неопределено Тогда
		
		СтрокаТЧ = Форма.Объект.Товары.Добавить();
		СтрокаТЧ.Номенклатура         = ДанныеШтрихкода.Номенклатура;
		СтрокаТЧ.Характеристика       = ДанныеШтрихкода.Характеристика;
		СтрокаТЧ.Серия                = ДанныеШтрихкода.Серия;
		
		СтрокаТЧ.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
		СтрокаТЧ.Справка2             = ДанныеШтрихкода.Справка2;
		
		АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
		
	ИначеЕсли СтрокиТЧДляУменьшенияКоличества = Неопределено
		И СтрокаТЧ <> Неопределено Тогда
		
		АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
		
	Иначе
		
		Для Каждого СтрокаТЧДляУменьшенияКоличества Из СтрокиТЧДляУменьшенияКоличества Цикл
			
			Если СтрокаТЧДляУменьшенияКоличества.Количество <= 1 Тогда
				
				Если СтрокаТЧ = Неопределено Тогда
					
					СтрокаТЧ = СтрокаТЧДляУменьшенияКоличества;
					
					СтрокаТЧ.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
					СтрокаТЧ.Справка2             = ДанныеШтрихкода.Справка2;
					
				Иначе
					
					Форма.Объект.Товары.Удалить(СтрокаТЧДляУменьшенияКоличества);
					
					Индекс = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧДляУменьшенияКоличества);
					Если Индекс <> Неопределено Тогда
						ПараметрыЗаполнения.ИзмененныеСтроки.Удалить(Индекс);
					КонецЕсли;
					
				КонецЕсли;
				
				АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
				
			Иначе
				
				СтрокаТЧДляУменьшенияКоличества.Количество = СтрокаТЧДляУменьшенияКоличества.Количество - 1;
				ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧДляУменьшенияКоличества);
				
				Если СтрокаТЧ = Неопределено Тогда
					
					СтрокаТЧ = Форма.Объект.Товары.Вставить(Форма.Объект.Товары.Индекс(СтрокаТЧДляУменьшенияКоличества) + 1);
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЧДляУменьшенияКоличества,,"Количество, КоличествоУпаковок, ИдентификаторСтроки");
					
					СтрокаТЧ.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
					СтрокаТЧ.Справка2             = ДанныеШтрихкода.Справка2;
					
					АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
					
				Иначе
					
					АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.ИдентификаторСтроки) Тогда
		СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	АкцизныеМаркиСтрокаТЧ = Форма.Объект.АкцизныеМарки.Добавить();
	АкцизныеМаркиСтрокаТЧ.АкцизнаяМарка = ДанныеШтрихкода.ШтрихкодУпаковки;
	АкцизныеМаркиСтрокаТЧ.Количество    = 1;
	Если ЗначениеЗаполнено(ДанныеШтрихкода.Справка2) Тогда
		АкцизныеМаркиСтрокаТЧ.Справка2 = ДанныеШтрихкода.Справка2;
	Иначе
		АкцизныеМаркиСтрокаТЧ.ИдентификаторСтроки = СтрокаТЧ.ИдентификаторСтроки;
	КонецЕсли;
	
	Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаУпаковки(Форма, ДанныеШтрихкода, ВложенныеШтрихкоды, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	Если Результат.ЕстьОшибкиВДеревеУпаковок Тогда
		Результат.АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ВложенныеШтрихкоды.ДеревоУпаковок, Форма.УникальныйИдентификатор);
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканирования);
	Если Форма.Элементы.Товары.ТекущаяСтрока <> Неопределено Тогда
		ПараметрыЗаполнения.ТекущаяСтрока = Форма.Объект.Товары.НайтиПоИдентификатору(Форма.Элементы.Товары.ТекущаяСтрока);
	КонецЕсли;
	
	АкцизныеМаркиЕГАИС.ЗаполнитьТоварыИАкцизныеМарки(Форма.Объект, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат Результат;
	
КонецФункции

// Функция предназначена для обработки считанного малого штрихкода акцизной марки старого (PDF417) образца
//
Функция ОбработатьДанныеШтрихкодаСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура",         ДанныеШтрихкода.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика",       ДанныеШтрихкода.Характеристика);
	ПараметрыОтбора.Вставить("АлкогольнаяПродукция", ДанныеШтрихкода.АлкогольнаяПродукция);
	ПараметрыОтбора.Вставить("Серия",                ДанныеШтрихкода.Серия);
	ПараметрыОтбора.Вставить("Справка2",             ДанныеШтрихкода.Справка2);
	
	МассивСтрок = Форма.Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаТЧ = МассивСтрок[0];
	Иначе
		СтрокаТЧ = Неопределено;
	КонецЕсли;
	
	Если СтрокаТЧ <> Неопределено Тогда
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество + 1;
		
		Результат.ИзмененныеСтроки.Добавить(СтрокаТЧ);
		
	Иначе
		
		СтрокаТЧ = Форма.Объект.Товары.Добавить();
		СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
		СтрокаТЧ.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
		СтрокаТЧ.Номенклатура         = ДанныеШтрихкода.Номенклатура;
		СтрокаТЧ.Характеристика       = ДанныеШтрихкода.Характеристика;
		СтрокаТЧ.Серия                = ДанныеШтрихкода.Серия;
		СтрокаТЧ.Справка2             = ДанныеШтрихкода.Справка2;
		
		СтрокаТЧ.КоличествоУпаковок = 1;
		
		Результат.ДобавленныеСтроки.Добавить(СтрокаТЧ);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	
	ИнтеграцияЕГАИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата                    КАК Период,
	|	ДанныеШапки.Ссылка                  КАК Ссылка,
	|	ДанныеШапки.Грузоотправитель        КАК Грузоотправитель,
	|	ДанныеШапки.ДатаРегистрацииДвижений КАК ДатаРегистрацииДвижений,
	|	ДанныеШапки.ЕстьРасхождения         КАК ЕстьРасхождения,
	|	СтатусыДокументовЕГАИС.Статус       КАК СтатусОбработки
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ДанныеШапки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ДанныеШапки.Ссылка
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                  Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",                  Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("УдалитьСтатусОбработки",  Реквизиты.СтатусОбработки);
	Запрос.УстановитьПараметр("Грузоотправитель",        Реквизиты.Грузоотправитель);
	Запрос.УстановитьПараметр("ДатаРегистрацииДвижений", Реквизиты.ДатаРегистрацииДвижений);
	Запрос.УстановитьПараметр("ЕстьРасхождения",         Реквизиты.ЕстьРасхождения);
	
	Запрос.УстановитьПараметр("СтатусыДвиженийСвободныйОстаток", СтатусыДвиженийСвободныйОстаток());
	Запрос.УстановитьПараметр("СтатусыДвиженийКоличество",       СтатусыДвиженийКоличество());
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
	
	Если НЕ ИнтеграцияЕГАИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ИнтеграцияЕГАИС.ЕстьТаблицаЗапроса("ВТТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ИнтеграцияЕГАИС.ЕстьТаблицаЗапроса("ВТКоэффициентыПересчетаВЕдиницыЕГАИС", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(Запрос, ТекстыЗапроса);
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	&Грузоотправитель                       КАК ОрганизацияЕГАИС,
	|	ТаблицаТовары.АлкогольнаяПродукция      КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Справка2                  КАК Справка2,
	|	ВЫБОР КОГДА &ЕстьРасхождения ТОГДА
	|		ТаблицаТовары.КоличествоФакт
	|	ИНАЧЕ
	|		ТаблицаТовары.Количество * ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1)
	|	КОНЕЦ КАК СвободныйОстаток,
	|	0                                       КАК Количество,
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки
	|ИЗ
	|	ВТТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыПересчетаВЕдиницыЕГАИС КАК ЕдиницыЕГАИС
	|		ПО ЕдиницыЕГАИС.АлкогольнаяПродукция = ТаблицаТовары.АлкогольнаяПродукция
	|		 И ЕдиницыЕГАИС.Номенклатура = ТаблицаТовары.Номенклатура
	|		 И ЕдиницыЕГАИС.Характеристика = ТаблицаТовары.Характеристика
	|		 И ЕдиницыЕГАИС.Серия = ТаблицаТовары.Серия
	|ГДЕ
	|	&УдалитьСтатусОбработки В(&СтатусыДвиженийСвободныйОстаток)
	|	И ВЫБОР КОГДА &ЕстьРасхождения ТОГДА
	|		ТаблицаТовары.КоличествоФакт
	|	ИНАЧЕ
	|		ТаблицаТовары.Количество
	|	КОНЕЦ <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&ДатаРегистрацииДвижений                КАК ДатаРегистрацииДвижений,
	|	&Грузоотправитель                       КАК ОрганизацияЕГАИС,
	|	ТаблицаТовары.АлкогольнаяПродукция      КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Справка2                  КАК Справка2,
	|	0                                       КАК СвободныйОстаток,
	|	ВЫБОР КОГДА &ЕстьРасхождения ТОГДА
	|		ТаблицаТовары.КоличествоФакт
	|	ИНАЧЕ
	|		ТаблицаТовары.Количество * ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1) 
	|	КОНЕЦ КАК Количество,
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки
	|ИЗ
	|	ВТТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыПересчетаВЕдиницыЕГАИС КАК ЕдиницыЕГАИС
	|		ПО ЕдиницыЕГАИС.АлкогольнаяПродукция = ТаблицаТовары.АлкогольнаяПродукция
	|		 И ЕдиницыЕГАИС.Номенклатура = ТаблицаТовары.Номенклатура
	|		 И ЕдиницыЕГАИС.Характеристика = ТаблицаТовары.Характеристика
	|		 И ЕдиницыЕГАИС.Серия = ТаблицаТовары.Серия
	|ГДЕ
	|	&УдалитьСтатусОбработки В(&СтатусыДвиженийКоличество)
	|	И ВЫБОР КОГДА &ЕстьРасхождения ТОГДА
	|		ТаблицаТовары.КоличествоФакт
	|	ИНАЧЕ
	|		ТаблицаТовары.Количество
	|	КОНЕЦ <> 0
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТТовары";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка               КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки          КАК НомерСтроки,
	|	ТаблицаТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Характеристика       КАК Характеристика,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.Количество           КАК Количество,
	|	ТаблицаТовары.КоличествоФакт       КАК КоличествоФакт,
	|	ТаблицаТовары.Справка2             КАК Справка2
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТКоэффициентыПересчетаВЕдиницыЕГАИС";
	
	ТекстЗапроса = ИнтеграцияЕГАИС.ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС("ВТТовары", ИмяРегистра);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтатусыДвиженийСвободныйОстаток()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.КПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяЕГАИС);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяКлиентом);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаКПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОшибка);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПринят);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеКПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОбрабатываетсяЕГАИС);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОшибка);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказКПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОбрабатываетсяЕГАИС);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОшибка);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПринят);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеКПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОбрабатываетсяЕГАИС);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОшибка);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказКПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОбрабатываетсяЕГАИС);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОшибка);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПодтвержденСРасхождениями);
	
	Возврат Результат;
	
КонецФункции

Функция СтатусыДвиженийКоличество()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПодтвержденСРасхождениями);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПринят);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеКПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОбрабатываетсяЕГАИС);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОшибка);
	
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказКПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказПереданВУТМ);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОбрабатываетсяЕГАИС);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОшибка);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если Не ИнтеграцияЕГАИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "";
	ИнтеграцияЕГАИСПереопределяемый.ПриЗаполненииТекстаЗапросаДвижениеСерийТоваров(ТекстЗапроса, Метаданные.Документы.ТТНИсходящаяЕГАИС.Имя);
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ТТНИсходящаяЕГАИС);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект	 - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  (см. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - параметры указания серий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ТТНИсходящаяЕГАИС, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - (см. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - параметры указания серий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ТТНИсходящаяЕГАИС, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Раздел "Б" справки к ТТН
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ИнтеграцияЕГАИСКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьРазделаБСправкиТТН";
	КомандаПечати.Идентификатор = "ТТНСправкаРазделБ";
	КомандаПечати.Представление = НСтр("ru = 'Раздел ""Б"" справки к ТТН'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений();
	ТекстыЗапросаВременныхТаблиц = Новый Массив;
	ПолноеИмяДокумента = "Документ.ТТНИсходящаяЕГАИС";
	
	Если ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Добавить(Новый Структура("Ключ, Значение", "ВТКоэффициентыПересчетаВЕдиницыЕГАИС", ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(Запрос, ТекстыЗапроса)));
		ТекстыЗапросаВременныхТаблиц.Добавить(Новый Структура("Ключ, Значение", "ВТТовары", ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса)));
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	
	Результат = ОбновлениеИнформационнойБазыЕГАИС.РезультатАдаптацииЗапроса();
	
	Результат.ЗначенияПараметров.Вставить("СтатусыДвиженийСвободныйОстаток", СтатусыДвиженийСвободныйОстаток());
	Результат.ЗначенияПараметров.Вставить("СтатусыДвиженийКоличество",       СтатусыДвиженийКоличество());
	
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыЕГАИС.АдаптироватьЗапросМеханизмаПроведения(
		ТекстЗапроса,
		ПолноеИмяДокумента,
		СинонимТаблицыДокумента,
		ПереопределениеРасчетаПараметров,
		ТекстыЗапросаВременныхТаблиц);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ФорматОбмена(Шапка)
	
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена();
	Если Шапка.ФорматОбменаГрузоотправителя = Перечисления.ФорматыОбменаЕГАИС.V1
		Или Шапка.ФорматОбменаГрузополучателя = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
		ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1;
	ИначеЕсли Шапка.ФорматОбменаГрузоотправителя = Перечисления.ФорматыОбменаЕГАИС.V3
		И Шапка.ФорматОбменаГрузополучателя = Перечисления.ФорматыОбменаЕГАИС.V3 Тогда
		ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3;
	КонецЕсли;
	
	Возврат ФорматОбмена;
	
КонецФункции

Функция ПостроитьBoxInfo(СтрокаДереваРодитель, ИспользованныеУзлыДереваУпаковок, boxtree)
	
	ЕстьВложенныеШтрихкодыУпаковок = Ложь;
	Для Каждого СтрокаДерева Из СтрокаДереваРодитель.Строки Цикл
		
		Если ИспользованныеУзлыДереваУпаковок.Получить(СтрокаДерева) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		bl = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(boxtree, "bl");
		
		ЕстьВложенныеШтрихкодыУпаковок = Истина;
		bl.boxnum.Добавить(СтрокаДерева.Штрихкод);
		
		ПостроитьBoxInfo(СтрокаДерева, ИспользованныеУзлыДереваУпаковок, bl);
		
		boxtree.bl.Добавить(bl);
		
	КонецЦикла;
	
	Возврат ЕстьВложенныеШтрихкодыУпаковок;
	
КонецФункции

Функция ВходящееСообщениеАктРасхождений(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕГАИСПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Документ
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Входящий)
	|	И ЕГАИСПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.АктТТНРасхождения)
	|УПОРЯДОЧИТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.ДатаСоздания УБЫВ
	|");
	
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НеподтвержденныеАкцизныеМарки(ДокументСсылка) Экспорт
	
	АкцизныеМарки = Новый Соответствие;
	
	ВходящееСообщениеАктРасхождений = ВходящееСообщениеАктРасхождений(ДокументСсылка);
	
	Если ВходящееСообщениеАктРасхождений = Неопределено Тогда
		Возврат АкцизныеМарки;
	КонецЕсли;
	
	ТекстСообщенияXML = ИнтеграцияИС.ТекстСообщенияXMLИзПротокола(ВходящееСообщениеАктРасхождений);
	
	ТекстОшибки = "";
	ОбъектXDTO  = Неопределено;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	Попытка
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
			ИнтеграцияЕГАИС.КорневоеПространствоИмен(), "Documents").Тип());
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Попытка
			ОбъектXDTO = ИнтеграцияЕГАИС.ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
				ИнтеграцияИС.ПроизвольныйОбъектXDTOПоТекстуСообщенияXML(ТекстСообщенияXML),
				ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ИнтеграцияЕГАИС.КорневоеПространствоИмен(), "Documents", Неопределено));
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки;
		КонецПопытки;
	КонецПопытки;
	
	ДанныеДокументаТТН = Неопределено;
	
	Если ОбъектXDTO <> Неопределено Тогда
		
		ТипЕГАИС           = Неопределено;
		ДанныеДокументаТТН = Неопределено;
		
		Если ОбъектXDTO <> Неопределено Тогда
			Попытка
				ДокументыПоТипамЕГАИС = ИнтеграцияИС.ОбъектXDTOВСтруктуру(ОбъектXDTO.Document);
				Для Каждого КлючИЗначение Из ДокументыПоТипамЕГАИС Цикл
					Если КлючИЗначение.Значение <> Неопределено Тогда
						ТипЕГАИС           = КлючИЗначение.Ключ;
						ДанныеДокументаТТН = ДокументыПоТипамЕГАИС[ТипЕГАИС];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Или ДанныеДокументаТТН = Неопределено Тогда
		Возврат АкцизныеМарки;
	КонецЕсли;
	
	Если ДанныеДокументаТТН.Content <> Неопределено Тогда
		
		Для Каждого СтрокаРасхожденияXDTO Из ДанныеДокументаТТН.Content.Position Цикл
			
			Если СтрокаРасхожденияXDTO.MarkInfo = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Штрихкод Из СтрокаРасхожденияXDTO.MarkInfo.amc Цикл
				АкцизныеМарки.Вставить(Штрихкод, Истина);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат АкцизныеМарки;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ВЫБОР КОГДА Грузоотправитель.Сопоставлено И Грузоотправитель.СоответствуетОрганизации Тогда ЗначениеРазрешено(Грузоотправитель.Контрагент)
	|	КОГДА Грузоотправитель.Сопоставлено И НЕ Грузоотправитель.СоответствуетОрганизации Тогда ЗначениеРазрешено(Грузоотправитель.ТорговыйОбъект)
	|	ИНАЧЕ ИСТИНА КОНЕЦ  И ВЫБОР КОГДА Грузополучатель.Сопоставлено И Грузополучатель.СоответствуетОрганизации ТОГДА ЗначениеРазрешено(Грузополучатель.Контрагент)
	|	КОГДА Грузополучатель.Сопоставлено И НЕ Грузополучатель.СоответствуетОрганизации ТОГДА ЗначениеРазрешено(Грузополучатель.ТорговыйОбъект)
	|	ИНАЧЕ ИСТИНА КОНЕЦ ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти


