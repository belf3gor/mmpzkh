&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ДанныеУдаляемыхСтрок; // Для удаления акцизных марок

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДокумента = ИнтеграцияЕГАИС.ПредставлениеВалютыРегламентированногоУчета();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФормЕГАИСПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыУпаковка");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект, "ТоварыСерия");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииПриЧтенииНаСервере();
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	КонецЕсли;
	
	// Режим отладки
	РежимОтладки = ОбщегоНазначенияКлиентСервер.РежимОтладки()
	             И Пользователи.ЭтоПолноправныйПользователь();
	
	Элементы.СтраницаАкцизныеМарки.Видимость = РежимОтладки;
	Элементы.Идентификатор.Видимость         = РежимОтладки;
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Не РедактированиеФормыНедоступно
		И Не ОграничениеРедактированияПоСтатусуПроверкиИПодбора Тогда
		СобытияФормИСКлиентПереопределяемый.ОбработкаОповещенияПодборНоменклатуры(
			Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект),
			ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменЕГАИС"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусЕГАИСВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	// Обновление гиперссылки на создание документа Возврат из регистра №2
	Если ИмяСобытия = "Запись_ВозвратИзРегистра2ЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПредварительноеСохранениеРезультатовСканированияАлкогольнойПродукции"
		И ТипЗнч(Параметр) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС")
		И Объект.Ссылка = Параметр Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииПриЧтенииНаСервере();
	
	СобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ОбновитьСтатусЕГАИС();
	СформироватьТекстДокументаЕГАИС();
	ОбновитьИнформациюОткрытияФормыСканирования();
	УправлениеДоступностьюЭлементовФормы(ЭтотОбъект);
	
	УправлениеДоступностьюЭлементовФормы(ЭтотОбъект);
	
	ИнтеграцияЕГАИС.ЗаполнитьАлкогольнуюПродукцию(Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	ОпределитьРасхожденияКоличествТоваров();
	
	ОбновитьПредставленияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Основание", Объект.ДокументОснование);
	Оповестить("Запись_ТТНИсходящаяЕГАИС", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию = Истина;
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаВыбораПодборНоменклатуры(
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект),
		ВыбранноеЗначение, ИсточникВыбора);
	СобытияФормЕГАИСКлиентПереопределяемый.ОбработкаВыбораСерии(
		ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора,ПараметрыЗаполнения);
	СобытияФормЕГАИСКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(
		Новый ОписаниеОповещения("Подключаемый_ОбработкаВыбораНоменклатуры", ЭтотОбъект), ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если РедактированиеФормыНедоступно
		Или ОграничениеРедактированияПоСтатусуПроверкиИПодбора Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСКлиент.ВнешнееСобытиеОбработатьВводШтрихкода(ЭтотОбъект, Источник, Событие, Данные, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ШтрихкодированиеИС.СохранитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента.Записать");
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСправки2(Команда)
	
	ВыполнитьКомандуПодобратьСправки2();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента.Провести");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента.ПровестиИЗакрыть");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
		"Документ.ТТНИсходящаяЕГАИС.ФормаДокумента.Команда.ОткрытьПодбор");
	
	СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	
	ШтрихкодированиеИСКлиентПереопределяемый.ПоказатьВводШтрихкода(
		Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ОчиститьСообщения();
	
	СобытияФормЕГАИСКлиентПереопределяемый.ВыгрузитьДанныеВТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсканироватьИПроверитьАлкогольнуюПродукцию(Команда)
		
		ТребуетсяВопрос = Ложь;
		
		Если Объект.Ссылка.Пустая() Тогда
			
			ТекстВопроса = НСтр("ru = 'Сканирование алкогольной продукции возможно только в записанной ""Товарно-транспортной накладной ЕГАИС (исходящая)"". Записать?'");
			ТребуетсяВопрос = Истина;
			
		ИначеЕсли Модифицированность Тогда
			
			ТекстПровестиЗаписать = ?(Объект.Проведен, НСтр("ru = 'Провести'"), НСтр("ru = 'Записать'"));
			
			ТекстВопроса = СтрШаблон(НСтр("ru = '""Товарно-транспортная накладная ЕГАИС (исходящая)"" был изменена. %1?'"), ТекстПровестиЗаписать);
			ТребуетсяВопрос = Истина;
			
		КонецЕсли;
		
		Если ТребуетсяВопрос Тогда
			
			ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВопросПриОткрытииФормыСканированияИПроверкиАлкогольнойПродукцииЗавершение", ЭтотОбъект);
			
			ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОткрытьФормуСканированияАлкогольнойПродукции();
			
		КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтсканироватьИПроверитьАлкогольнуюПродукциюВозврат(Команда)
	
	ОткрытьФормуСканированияАлкогольнойПродукцииВозврат();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	
	ГрузоотправительПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокПриИзменении(Элемент)
	
	УстановитьОтборСтрок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСправка2ПокупателяПриИзменении(Элемент)
	
	СформироватьТекстДокументаЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Товарно-транспортная накладная ЕГАИС (исходящая)"" не проведена. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Товарно-транспортная накладная ЕГАИС (исходящая)"" была изменена. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСКлиент.ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АкцизныеМаркиЕГАИСКлиент.ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыАлкогольнаяПродукция Тогда
		
		ЗаполнитьСписокВыбораАлкогольнойПродукции(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
			ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		ТекущиеДанные.КоличествоАкцизныхМарок = 0;
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если РедактированиеФормыНедоступно
		Или ОграничениеРедактированияПоСтатусуПроверкиИПодбора Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
	ДанныеУдаляемыхСтрок = Новый Структура;
	ДанныеУдаляемыхСтрок.Вставить("ИдентификаторыСтрок", Новый Массив);
	ДанныеУдаляемыхСтрок.Вставить("Справки2", Новый Массив);
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ИдентификаторСтроки) Тогда
			ДанныеУдаляемыхСтрок.ИдентификаторыСтрок.Добавить(СтрокаТЧ.ИдентификаторСтроки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Справка2) Тогда
			ДанныеУдаляемыхСтрок.Справки2.Добавить(СтрокаТЧ.Справка2);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если ДанныеУдаляемыхСтрок <> Неопределено Тогда
		УдалитьАкцизныеМарки(ДанныеУдаляемыхСтрок);
	КонецЕсли;
	
	ДанныеУдаляемыхСтрок = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьСумму = Истина;
	
	СобытияФормЕГАИСКлиентПереопределяемый.ПриИзмененииЦены(
		ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения,
		ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьЦенуПоСумме = Истина;
	
	СобытияФормЕГАИСКлиентПереопределяемый.ПриИзмененииСуммы(
		ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения,
		ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	Идентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииНоменклатуры(Идентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуВыбораНоменклатуры(
		ЭтотОбъект,
		ИнтеграцияЕГАИСВызовСервера.РеквизитыАлкогольнойПродукцииДляСозданияНоменклатуры(ТекущиеДанные.АлкогольнаяПродукция));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуСозданияНоменклатуры(
		ЭтотОбъект,
		ИнтеграцияЕГАИСВызовСервера.РеквизитыАлкогольнойПродукцииДляСозданияНоменклатуры(ТекущиеДанные.АлкогольнаяПродукция));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	Идентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииХарактеристики(Идентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию = Истина;
	
	СобытияФормЕГАИСКлиентПереопределяемый.ПриИзмененииСерии(ЭтаФорма, 
		Элементы.Товары.ТекущиеДанные,
		КэшированныеЗначения,
		ПараметрыЗаполнения)
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьПодборСерий(Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормЕГАИСКлиентПереопределяемый.НачалоВыбораХарактеристики(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	СобытияФормЕГАИСКлиентПереопределяемый.ХарактеристикаСоздание(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц = Истина;
	
	СобытияФормЕГАИСКлиентПереопределяемый.ПриИзмененииУпаковки(
		ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения,
		ПараметрыЗаполнения);
		
	АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормЕГАИСКлиентПереопределяемый.НачалоВыбораУпаковки(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАлкогольнаяПродукцияПриИзменении(Элемент)
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПриИзмененииАлкогольнойПродукции(ТекущиеДанныеИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииКоличестваУпаковок(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСправка2ПриИзменении(Элемент)
	
	СформироватьТекстДокументаЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСправка2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Отбор.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ОграничениеРедактированияПоСтатусуПроверкиИПодбора
		Или РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно Тогда
		СобытияФормЕГАИСКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыАлкогольнаяПродукцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормЕГАИСКлиент.ОткрытьФормуВыбораАлкогольнойПродукции(
		Элемент,
		ИнтеграцияЕГАИСКлиент.РеквизитыНоменклатурыДляВыбораАлкогольнойПродукции(ТекущиеДанные.Номенклатура),
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтаФорма,, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	ЗначениеВозврата = Результат;
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийНаСервере(ПараметрыФормыУказанияСерий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийНаСервере(ПараметрыФормыУказанияСерий, КэшированныеЗначения)
	
	ИнтеграцияИСПереопределяемый.ОбработатьУказаниеСерий(ЭтотОбъект, ПараметрыФормыУказанияСерий, КэшированныеЗначения);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыАлкогольнаяПродукция.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.АлкогольнаяПродукция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СопоставлениеАлкогольнаяПродукция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",            ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",                 Новый ПолеКомпоновкиДанных("Объект.Товары.СопоставлениеАлкогольнаяПродукция"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыАлкогольнаяПродукция.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере()
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ТТНИсходящаяЕГАИС);
	
	ЗаполнитьОтборСтрок();
	
	ИнтеграцияИСПереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(ЭтотОбъект);
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
	ОпределитьРасхожденияКоличествТоваров();
	
	ОбновитьПредставленияНаФорме();
	
	УстановитьВидимостьИнформацииОСканированииDataMatrix();
	
	ИнтеграцияЕГАИС.ЗаполнитьАлкогольнуюПродукцию(Объект.Товары);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.ТТНИсходящаяЕГАИС);
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаКлиенте
Процедура ЗаполнитьСписокВыбораАлкогольнойПродукции(ТекущаяСтрока)
	
	СписокВыбораНоменклатура = Элементы.ТоварыАлкогольнаяПродукция.СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	СписокВыбораНоменклатура.ЗагрузитьЗначения(ТекущаяСтрока.НоменклатураДляВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.Номенклатура = Результат;
	
	Идентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииНоменклатуры(Идентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНоменклатуры(Идентификатор, КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц        = Истина;
	ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ            = Истина;
	ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию      = Истина;
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус     = Истина;
	ПараметрыЗаполнения.ЗаполнитьАртикул                   = Истина;
	ПараметрыЗаполнения.ЗаполнитьКод                       = Истина;
	
	СобытияФормЕГАИСПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения,
		ПараметрыЗаполнения, ПараметрыУказанияСерий);
	
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХарактеристики(Идентификатор, КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию = Истина;
	
	СобытияФормЕГАИСПереопределяемый.ПриИзмененииХарактеристики(
		ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения,
		ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииАлкогольнойПродукции(ИдентификаторСтроки)
	
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	ОбработатьСвязанныеРеквизитыПриИзмененииАлкогольнойПродукции(ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСвязанныеРеквизитыПриИзмененииАлкогольнойПродукции(ИдентификаторСтроки)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ЗначениеЗаполнено(ТекущаяСтрока.Справка2) Тогда
		АлкогольнаяПродукцияСправки2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Справка2, "АлкогольнаяПродукция");
		Если АлкогольнаяПродукцияСправки2 <> ТекущаяСтрока.АлкогольнаяПродукция Тогда
			ТекущаяСтрока.Справка2 = Справочники.Справки2ЕГАИС.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваУпаковок(ТекущаяСтрока)
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьСумму            = Истина;
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц = Истина;
	
	СобытияФормЕГАИСКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(
		ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения,
		ПараметрыЗаполнения);
	
	АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока);
	
	ОпределитьРасхождениеКоличества();
	
КонецПроцедуры

&НаСервере
Процедура ГрузоотправительПриИзмененииНаСервере()
	
	СформироватьТекстДокументаЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьРасхождениеКоличества()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТекущиеДанные.РасхождениеКоличества = (ТекущиеДанные.КоличествоУпаковок <> ТекущиеДанные.КоличествоФакт);
	
	Если НЕ ТекущиеДанные.РасхождениеКоличества И (ОтборСтрок = "ТолькоРасхождения") Тогда
		УстановитьОтборСтрок(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьРасхожденияКоличествТоваров()
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.РасхождениеКоличества = СтрокаТовары.КоличествоУпаковок <> СтрокаТовары.КоличествоФакт;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Статус

&НаСервере
Процедура ОбновитьСтатусЕГАИС()
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	СтатусЕГАИС = МенеджерОбъекта.СтатусПоУмолчанию();
	
	Если Объект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		ДальнейшееДействие = Новый Массив;
		
	Иначе
		
		ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияЕГАИС.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусЕГАИС = Выборка.Статус;
			
			Если Объект.СтатусПроверкиИПодбора <> Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
			
				ДальнейшееДействие = Новый Массив;
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеПередачуДанных);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
	СтатусЕГАИСПредставление = ИнтеграцияЕГАИС.ПредставлениеСтатусаЕГАИС(
		СтатусЕГАИС,
		ДальнейшееДействие,
		ДопустимыеДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
			ЭтотОбъект.УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьАктОРасхождениях" Тогда
		
		ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях"),
			ЭтотОбъект.УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтАктаОРасхождениях" Тогда
		
		ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях"),
			ЭтотОбъект.УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьЗапросНаОтменуПроведения" Тогда
		
		ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения"),
			ЭтотОбъект.УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтЗапросаНаОтменуПроведения" Тогда
		
		ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения"),
			ЭтотОбъект.УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтНакладной" Тогда
		
		ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной"),
			ЭтотОбъект.УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		ОткрытьФорму("Справочник.ЕГАИСПрисоединенныеФайлы.Форма.ФормаОшибки", ПараметрыОткрытияФормы, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияЕГАИСКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачу" Тогда
		
		ИнтеграцияЕГАИСКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтборСтрок

&НаСервере
Процедура ЗаполнитьОтборСтрок()
	
	ОтборСтрокСписокВыбора = Элементы.ОтборСтрок.СписокВыбора;
	ОтборСтрокСписокВыбора.Очистить();
	ОтборСтрокСписокВыбора.Добавить("Все", НСтр("ru='Все товары'"));
	
	ДобавитьОтборСтрокТолькоРасхождения();
	
	ОтборСтрок = "Все";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборСтрокТолькоРасхождения(ИндексПозиции = Неопределено)
	
	ОтборСтрокСписокВыбора = Элементы.ОтборСтрок.СписокВыбора;
	
	ЭлементТолькоРасхождения = ОтборСтрокСписокВыбора.НайтиПоЗначению("ТолькоРасхождения");
	
	Если ЭлементТолькоРасхождения = Неопределено Тогда
		Если ИндексПозиции = Неопределено Тогда
			ОтборСтрокСписокВыбора.Добавить("ТолькоРасхождения", НСтр("ru='Только расхождения'"));
		Иначе
			ОтборСтрокСписокВыбора.Вставить(ИндексПозиции, "ТолькоРасхождения", НСтр("ru='Только расхождения'"));
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьОтборСтрокТолькоРасхождения()
	
	ОтборСтрокСписокВыбора = Элементы.ОтборСтрок.СписокВыбора;
	
	ЭлементТолькоРасхождения = ОтборСтрокСписокВыбора.НайтиПоЗначению("ТолькоРасхождения");
	
	Если ЭлементТолькоРасхождения <> Неопределено Тогда
		ОтборСтрокСписокВыбора.Удалить(ЭлементТолькоРасхождения);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция  ЕстьОтборСтрокТолькоРасхождения()
	
	ОтборСтрокСписокВыбора = Элементы.ОтборСтрок.СписокВыбора;
	
	Возврат ОтборСтрокСписокВыбора.НайтиПоЗначению("ТолькоРасхождения") <> Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрок(Форма)
	
	Если Форма.ОтборСтрок = "ТолькоРасхождения" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("РасхождениеКоличества", Истина);
		Форма.Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Форма.Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьОтбораСтрок()
	
	ОтборСтрокКоличествоБыло = Элементы.ОтборСтрок.СписокВыбора.Количество();
	
	Если Объект.ЕстьРасхождения Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("РасхождениеКоличества", Истина);
		
		КоличествоСтрокСРасхождением = Объект.Товары.НайтиСтроки(ПараметрыПоиска).Количество();
		
		Если КоличествоСтрокСРасхождением = 0 Тогда
			УдалитьОтборСтрокТолькоРасхождения();
		Иначе
			ДобавитьОтборСтрокТолькоРасхождения();
		КонецЕсли;
	Иначе
		УдалитьОтборСтрокТолькоРасхождения();
	КонецЕсли;
	
	ОтборСтрокКоличествоСтало = Элементы.ОтборСтрок.СписокВыбора.Количество();
	
	Если ОтборСтрокКоличествоБыло <> ОтборСтрокКоличествоСтало Тогда
		ОтборСтрок = "Все";
		УстановитьОтборСтрок(ЭтотОбъект);
	КонецЕсли;
	
	Элементы.ОтборСтрок.Видимость = (ОтборСтрокКоличествоСтало <> 1);

КонецПроцедуры

#КонецОбласти

#Область ПодборСправок2

// Подобрать справки 2 в табличной части Товары.
// 
// Возвращаемое значение:
//  Булево - Истина, если требуется задать пользователю вопрос о вводе на основании документа на возврат из регистра №2.
//
&НаСервере
Функция ПодобратьСправки2НаСервере()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("СправкиЗаполнены", Ложь);
	ВозвращаемоеЗначение.Вставить("ЗадатьВопросОВводеНаОсновании", Ложь);
	
	СправкиЗаполнены = Документы.ТТНИсходящаяЕГАИС.ПодобратьСправки2(Объект);
	
	СформироватьТекстДокументаЕГАИС();
	
	Если СправкиЗаполнены Тогда
		
		ВозвращаемоеЗначение.СправкиЗаполнены              = СправкиЗаполнены;
		ВозвращаемоеЗначение.ЗадатьВопросОВводеНаОсновании = Ложь;
		
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		
		СтруктураПересчетаСуммы = ИнтеграцияЕГАИСКлиентСервер.СтруктураПересчетаСуммы("КоличествоУпаковок");
		
		ПараметрыОтбора = Новый Структура("Справка2", Справочники.Справки2ЕГАИС.ПустаяСсылка());
		ТоварыБезСерий = Объект.Товары.Выгрузить(ПараметрыОтбора);
		УдалосьЗаполнитьСправки = ИнтеграцияЕГАИС.ПодобратьСправки2ДляВозвратаИзРегистра2(
			ТоварыБезСерий,
			Объект.Грузоотправитель,
			Неопределено,
			СтруктураПересчетаСуммы);
		
		ЗадатьВопросОВводеНаОсновании = УдалосьЗаполнитьСправки
		                              И ИнтеграцияЕГАИС.ИспользоватьРегистр2(Объект.Грузоотправитель);
		
		ВозвращаемоеЗначение.СправкиЗаполнены              = СправкиЗаполнены;
		ВозвращаемоеЗначение.ЗадатьВопросОВводеНаОсновании = ЗадатьВопросОВводеНаОсновании;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
КонецФункции

// Обработчик оповещения при закрытии формы ПредложениеНаВозвратИзРегистра2.
//
// Параметры:
//  Результат - Структура - Параметры, переданные из формы ПредложениеНаВозвратИзРегистра2.
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры.
//
&НаКлиенте
Процедура ПриЗакрытииФормыПредложениеНаВозвратИзРегистра2(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		
		ВыполнитьКомандуПодобратьСправки2();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуПодобратьСправки2()
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Грузоотправитель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Грузоотправитель""'"),
			Объект.Ссылка, "Объект.Грузоотправитель");
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для подбора справок 2'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Товары", "Объект");
		Возврат;
	КонецЕсли;
	
	РезультатЗаполнения = ПодобратьСправки2НаСервере();
	
	ИнтеграцияЕГАИСКлиент.СообщитьОЗавершенииЗаполненияСправок(РезультатЗаполнения.СправкиЗаполнены);
	
	Если РезультатЗаполнения.ЗадатьВопросОВводеНаОсновании Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗакрытииФормыПредложениеНаВозвратИзРегистра2", ЭтотОбъект);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДокументОснование", Объект.Ссылка);
		
		ОткрытьФорму(
			"Документ.ТТНИсходящаяЕГАИС.Форма.ПредложениеНаВозвратИзРегистра2",
			ПараметрыОткрытия,
			ЭтотОбъект,,,,
			ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)
	
	Если Прочитать Тогда
		Прочитать();
	КонецЕсли;
	
	ОбновитьСтатусЕГАИС();
	ОбновитьВидимостьОтбораСтрок();
	СформироватьТекстДокументаЕГАИС();
	ОбновитьИнформациюОткрытияФормыСканирования();
	УправлениеДоступностьюЭлементовФормы(ЭтотОбъект);
	УстановитьВидимостьКоличестваФакт();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстДокументаЕГАИС()
	
	ТекстДокументаЕГАИС = "";
	
	ИспользоватьРегистр2 = ИнтеграцияЕГАИС.ИспользоватьРегистр2(Объект.Грузоотправитель);
	
	ПараметрыОтбора = Новый Структура("Справка2", Справочники.Справки2ЕГАИС.ПустаяСсылка());
	НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	
	Если Не (ИспользоватьРегистр2 И НайденныеСтроки.Количество() > 0) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовЕГАИС.Документ,
	|	СтатусыОформленияДокументовЕГАИС.СтатусОформления КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Основание = &Основание
	|");
	
	Запрос.УстановитьПараметр("Основание", Объект.Ссылка);
	ДанныеПоСтатусам = Запрос.Выполнить().Выгрузить();
	
	СтатусыОформления = Новый Структура;
	Для Каждого СтрокаТЧ Из ДанныеПоСтатусам Цикл
		СтатусыОформления.Вставить(СтрокаТЧ.Документ.Метаданные().Имя, СтрокаТЧ.Статус);
	КонецЦикла;
	
	ДокументыПоОснованию = ИнтеграцияЕГАИСВызовСервера.ДокументыПоОснованию(Объект.Ссылка);
	Данные = ИнтеграцияЕГАИС.ДанныеДокументаЕГАИС(Метаданные.Документы.ВозвратИзРегистра2ЕГАИС, ДокументыПоОснованию, СтатусыОформления);
	
	Если Данные = Неопределено Тогда
		ТекстДокументаЕГАИС = Новый ФорматированнаяСтрока("");
	Иначе
		ТекстДокументаЕГАИС = Данные.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИнформацииОСканированииDataMatrix()
	
	ВидимостьИнформации = АкцизныеМаркиЕГАИС.ВидимостьИнформацииОСканированииDataMatrix(Истина);
	
	Элементы.ГруппаИнформацияDataMatrix.Видимость = НЕ Элементы.СтраницаТовары.ТолькоПросмотр И ВидимостьИнформации;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностьюЭлементовФормы(Форма)

	ОграничениеПоСтатусуЕГАИС = (Форма.СтатусЕГАИС <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНИсходящейЕГАИС.Черновик")
	                             И Форма.СтатусЕГАИС <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи"));
	
	ОграничениеПоСтатусуПроверкиИПодбора = Форма.Объект.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Выполняется");
	
	ЗависимыеОтСтатусаЕГАИС = Новый Массив;
	ЗависимыеОтСтатусаЕГАИС.Добавить("ГруппаЛевоПравоОсновное");
	ЗависимыеОтСтатусаЕГАИС.Добавить("ГруппаСканированиеИПроверкаАлкогольнойПродукции");
	ЗависимыеОтСтатусаЕГАИС.Добавить("ТоварыГруппаДополнительныеКоманды");
	ЗависимыеОтСтатусаЕГАИС.Добавить("ТоварыГруппаСтандартныеКоманды");
	ЗависимыеОтСтатусаЕГАИС.Добавить("Товары");
	ЗависимыеОтСтатусаЕГАИС.Добавить("ГруппаИнформацияDataMatrix");
	ЗависимыеОтСтатусаЕГАИС.Добавить("СтраницаДоставка");
	ЗависимыеОтСтатусаЕГАИС.Добавить("ТоварыПодобратьСправки2");
	
	ИнтеграцияЕГАИСКлиентСервер.УправлениеДоступностьюЭлементовФормы(Форма, ЗависимыеОтСтатусаЕГАИС, Не ОграничениеПоСтатусуЕГАИС);
	
	ЗависимыеОтСтатусаПроверкиИПодбора = Новый Массив;
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("Грузоотправитель");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ВидОперации");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("Грузополучатель");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ГруппаТорговоеОборудование");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыОткрытьПодбор");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыПоискПоШтрихкоду");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыВыгрузитьДанныеВТСД");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыПодобратьСправки2");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюДобавить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюСкопировать");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюУдалить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыДобавитьДополнительная");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыДобавить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСкопировать");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыИзменить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыУдалить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыЗакончитьРедактирование");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыНоменклатура");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыХарактеристика");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСерия");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыУпаковкаЕдиницаИзмерения");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыАлкогольнаяПродукция");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКоличествоУпаковок");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСправка2");
	
	ИнтеграцияЕГАИСКлиентСервер.УправлениеДоступностьюЭлементовФормы(
		Форма, 
		ЗависимыеОтСтатусаПроверкиИПодбора, 
		Не (ОграничениеПоСтатусуЕГАИС Или ОграничениеПоСтатусуПроверкиИПодбора));
	
	Форма.РедактированиеФормыНеДоступно = ОграничениеПоСтатусуЕГАИС;
	Форма.ОграничениеРедактированияПоСтатусуПроверкиИПодбора = ОграничениеПоСтатусуПроверкиИПодбора;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКоличестваФакт()
	
	ЕстьОтборСтрокТолькоРасхождения = ЕстьОтборСтрокТолькоРасхождения();
	
	Элементы.ТоварыКоличествоФакт.Видимость = ЕстьОтборСтрокТолькоРасхождения;
	
КонецПроцедуры


#КонецОбласти

#Область СканированиеАлкогольнойПродукции

&НаКлиенте
Процедура СканированиеАлкогольнойПродукцииПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СканированиеАлкогольнойПродукцииПослеЗакрытияНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура СканированиеАлкогольнойПродукцииПослеЗакрытияНаСервере(АдресВременногоХранилища)
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	УдалитьИзВременногоХранилища(АдресВременногоХранилища);
	
	ТаблицаНеМаркируемойПродукции = РезультатПроверки.ТаблицаНеМаркируемойПродукции;
	ДеревоМаркируемойПродукции    = РезультатПроверки.ДеревоМаркируемойПродукции;
	
	НачатьТранзакцию();
	
	Попытка
		
		Если Объект.СтатусПроверкиИПодбора <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "СтатусПроверкиИПодбора") Тогда
			Прочитать();
		КонецЕсли;
		
		ОчиститьДанныеПередЗаполнением();
		
		ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(ЭтотОбъект, Ложь);
		
		АкцизныеМаркиЕГАИС.ЗаполнитьТоварыИАкцизныеМарки(
			Объект, ДеревоМаркируемойПродукции, ПараметрыЗаполнения);
			
		АкцизныеМаркиЕГАИС.ЗаполнитьНеМаркируемыеТовары(
			Объект, ТаблицаНеМаркируемойПродукции, ПараметрыЗаполнения);
		
		ОбработатьСтрокиТЧ(
			ПараметрыЗаполнения.ДобавленныеСтроки,
			ПараметрыЗаполнения.ИзмененныеСтроки);
		
		СтруктураПоискаПустыхСтрок = Новый Структура();
		СтруктураПоискаПустыхСтрок.Вставить("Количество", 0);
		СтруктураПоискаПустыхСтрок.Вставить("КоличествоУпаковок", 0);
		СтруктураПоискаПустыхСтрок.Вставить("КоличествоАкцизныхМарок", 0);
		
		ПустыеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоискаПустыхСтрок);
		
		Для Каждого ПустаяСтрока Из ПустыеСтроки Цикл
			Объект.Товары.Удалить(ПустаяСтрока);
		КонецЦикла;
		
		Объект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено;
		
		Если Объект.Проведен Тогда
			Если ПроверитьЗаполнение() Тогда
				Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			Иначе
				Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
			КонецЕсли;
		Иначе
			Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнтеграцияЕГАИСВызовСервера.ИнформироватьОбОшибкеВДокументе(
			"ru = 'Не удалось сохранить результаты сканирования и проверки в документе: %1 по причине: %2'",
			Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ОпределитьРасхожденияКоличествТоваров();
	
	ОбновитьПредставленияНаФорме();
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	ШтрихкодированиеИС.СформироватьКэшМаркируемойПродукции(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСканированияАлкогольнойПродукции()
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина,
		"Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента.ОткрытьФормуСканированияАлкогольнойПродукции");
	
	Параметрыоткрытия = ИнтеграцияЕГАИСКлиент.ПараметрыПроверкиИПодбораАлкогольнойПродукции(Объект.Грузоотправитель, Объект.Ссылка);
	ПараметрыОткрытия.КонтролироватьСканируемуюПродукциюПоДокументуОснованию = ЗначениеЗаполнено(Объект.ДокументОснование);
	ПараметрыОткрытия.РедактированиеФормыНедоступно                          = РедактированиеФормыНедоступно;
	
	Если Объект.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Выполняется") Тогда
		ПараметрыОткрытия.АдресПредварительноСохраненныхРезультатовПроверки = АдресДанныхПроверки();
	ИначеЕсли Объект.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Завершено") Тогда
		ПараметрыОткрытия.НачальныйСтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	КонецЕсли;
	
	Если РедактированиеФормыНедоступно Или Не ПравоИзменения Тогда
		ПараметрыОткрытия.РежимПросмотра = Истина;
		ПараметрыОткрытия.ПроверятьНеобходимостьПеремаркировки = Ложь;
	КонецЕсли;

	ОткрытьФорму(
		"Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор",
		ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("СканированиеАлкогольнойПродукцииПослеЗакрытия", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОткрытияФормыСканирования()
	
	Элементы.ГруппаСканированиеИПроверкаАлкогольнойПродукции.Видимость = Истина;
	Элементы.ОтсканироватьИПроверитьАлкогольнуюПродукциюВозврат.Видимость = Ложь;
	
	ТекстНадписи = "";
	
	Если Объект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		Если ПравоИзменения Тогда
			
			ТекстНадписи = НСтр("ru = 'Продолжить подбор и проверку алкогольной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Истина;
			
		Иначе
			
			ТекстНадписи = НСтр("ru = 'Промежуточные результаты подбора алкогольной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли (СтатусЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Черновик
	      Или СтатусЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи) Тогда
		
		Если ПравоИзменения Тогда
			
			ТекстНадписи = НСтр("ru = 'Подобрать и проверить алкогольную продукцию'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		ИначеЕсли Объект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено Тогда
			
			ТекстНадписи = НСтр("ru = 'Результаты подбора алкогольной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		Иначе
			
			Элементы.ГруппаСканированиеИПроверкаАлкогольнойПродукции.Видимость = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли Объект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.ПустаяСсылка() Тогда
		
		Элементы.ГруппаСканированиеИПроверкаАлкогольнойПродукции.Видимость = Ложь;
		
	Иначе
		
		ТекстНадписи = НСтр("ru = 'Результаты подбора алкогольной продукции'");
		Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Элементы.ГруппаСканированиеИПроверкаАлкогольнойПродукции.Видимость Тогда
		Элементы.ОтсканироватьИПроверитьАлкогольнуюПродукцию.Заголовок = ТекстНадписи;
	КонецЕсли;
	
	Если Объект.СтатусПроверкиИПодбораАктРасхождений = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		Элементы.ОтсканироватьИПроверитьАлкогольнуюПродукциюВозврат.Видимость = Истина;
		ТекстНадписи = НСтр("ru = 'Продолжить проверку расхождений'");
	ИначеЕсли Объект.СтатусПроверкиИПодбораАктРасхождений = Перечисления.СтатусыПроверкиИПодбораИС.Завершено Тогда
		Элементы.ОтсканироватьИПроверитьАлкогольнуюПродукциюВозврат.Видимость = Истина;
		ТекстНадписи = НСтр("ru = 'Результат проверки расхождений'");
	ИначеЕсли (СтатусЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПринят) Тогда
		Элементы.ОтсканироватьИПроверитьАлкогольнуюПродукциюВозврат.Видимость = Истина;
		ТекстНадписи = НСтр("ru = 'Проверить акт расхождений'");
	КонецЕсли;
	
	Если Элементы.ОтсканироватьИПроверитьАлкогольнуюПродукциюВозврат.Видимость Тогда
		Элементы.ОтсканироватьИПроверитьАлкогольнуюПродукциюВозврат.Заголовок = ТекстНадписи;
		Элементы.КомандыСканирования.Вид = ВидГруппыФормы.Подменю;
	Иначе 
		Элементы.КомандыСканирования.Вид = ВидГруппыФормы.ГруппаКнопок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриОткрытииФормыСканированияИПроверкиАлкогольнойПродукцииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	ЗаписаноУспешно = Ложь;
	
	Если Объект.Проведен Тогда
		Если ПроверитьЗаполнение() Тогда
			ЗаписаноУспешно = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		КонецЕсли;
	Иначе
		ЗаписаноУспешно = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;

	Если ЗаписаноУспешно Тогда
		ОткрытьФормуСканированияАлкогольнойПродукции();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСканированияАлкогольнойПродукцииВозврат()
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина,
		"Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента.ОткрытьФормуСканированияАлкогольнойПродукцииВозврат");
	
	ПараметрыОткрытия = ИнтеграцияЕГАИСКлиент.ПараметрыПроверкиИПодбораАлкогольнойПродукции(Объект.Грузоотправитель, Объект.Ссылка);	
	ПараметрыОткрытия.АдресДанныхПроверяемойАлкогольнойПродукции = АлкогольнаяПродукцияАктаРасхождений();
	ПараметрыОткрытия.РедактированиеФормыНедоступно = РедактированиеФормыНедоступно;
	ПараметрыОткрытия.РежимПодбораСуществующихУпаковок = Ложь;
	ПараметрыОткрытия.ПостфиксСохранения = "АктРасхождений";
	
	Если Объект.СтатусПроверкиИПодбораАктРасхождений = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Выполняется") Тогда
		ПараметрыОткрытия.АдресПредварительноСохраненныхРезультатовПроверки = АдресДанныхПроверки("АктРасхождений");
	ИначеЕсли Объект.СтатусПроверкиИПодбораАктРасхождений = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Завершено") Тогда
		ПараметрыОткрытия.АдресПредварительноСохраненныхРезультатовПроверки = АдресДанныхПроверки("АктРасхождений");
		ПараметрыОткрытия.НачальныйСтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	КонецЕсли;
	
	Если Не ПравоИзменения Тогда
		ПараметрыОткрытия.РежимПросмотра = Истина;
		ПараметрыОткрытия.ПроверятьНеобходимостьПеремаркировки = Ложь;
	КонецЕсли;
	
	ОткрытьФорму(
		"Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор",
		ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("СканированиеАлкогольнойПродукцииАктаРасхожденийПослеЗакрытия", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Функция АлкогольнаяПродукцияАктаРасхождений()
	Возврат АлкогольнаяПродукцияАктаРасхожденийСервер();
КонецФункции

&НаСервере
Процедура ОбновитьУдалитьСтроку(ДеревоУпаковок, Строка, УдалитьГруппы, НовыйРодитель, МаркированныеТовары)

	Если УдалитьГруппы.Найти(Строка) <> Неопределено Тогда
		НоваяСтрока = ДеревоУпаковок;
	ИначеЕсли Строка.Родитель = НовыйРодитель ИЛИ(Строка.Родитель = Неопределено И НовыйРодитель = ДеревоУпаковок) Тогда 
		Возврат;
	Иначе 
		НоваяСтрока = НовыйРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		СтрокиМаркированныйТовар = МаркированныеТовары.НайтиСтроки(Новый Структура("ШтрихкодУпаковки",Строка.ШтрихкодУпаковки));
		Если СтрокиМаркированныйТовар.Количество() Тогда
			СтрокиМаркированныйТовар[0].СтрокаДерева = НоваяСтрока;
		КонецЕсли; 
	КонецЕсли;
	
	Для Каждого ПодчиненныйЭлемент Из Строка.Строки Цикл 
		ОбновитьУдалитьСтроку(ДеревоУпаковок, ПодчиненныйЭлемент, УдалитьГруппы, НоваяСтрока, МаркированныеТовары);
	КонецЦикла;
	Если Строка.Родитель = Неопределено Тогда
		ДеревоУпаковок.Строки.Удалить(Строка);
	Иначе 
		Строка.Родитель.Строки.Удалить(Строка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АлкогольнаяПродукцияАктаРасхожденийСервер()
	
	ДанныеПроверяемогоДокумента = Документы.ТТНИсходящаяЕГАИС.ШтрихкодыУпаковок(Объект.Ссылка, Ложь);
	МаркиОставить = Документы.ТТНИсходящаяЕГАИС.НеподтвержденныеАкцизныеМарки(Объект.Ссылка);
	ДанныеПроверяемогоДокумента.Вставить("ТаблицаАлкогольнойПродукцииКОпределениюСправок2", Новый Массив);
	
	МассивСтрокУдалить = Новый Массив;
	ГруппыКУдалению = Новый Массив;
	Для Каждого СтрокаТЧ Из ДанныеПроверяемогоДокумента.МаркированныеТовары Цикл
		Если МаркиОставить.Получить(СтрокаТЧ.Штрихкод)=Неопределено Тогда
			МассивСтрокУдалить.Добавить(СтрокаТЧ);
			Группа = СтрокаТЧ.СтрокаДерева.Родитель;
			Пока Группа<>Неопределено И ГруппыКУдалению.Найти(Группа) = Неопределено Цикл
				ГруппыКУдалению.Добавить(Группа);
				Группа = Группа.Родитель;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из МассивСтрокУдалить Цикл
		Группа = СтрокаТЧ.СтрокаДерева.Родитель;
		Если Группа = Неопределено Тогда
			ДанныеПроверяемогоДокумента.ДеревоУпаковок.Строки.Удалить(СтрокаТЧ.СтрокаДерева)
		Иначе
			Группа.Строки.Удалить(СтрокаТЧ.СтрокаДерева);
		КонецЕсли;
		ДанныеПроверяемогоДокумента.МаркированныеТовары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из ДанныеПроверяемогоДокумента.ДеревоУпаковок.Строки Цикл 
		ОбновитьУдалитьСтроку(
			ДанныеПроверяемогоДокумента.ДеревоУпаковок, 
			СтрокаДерева, 
			ГруппыКУдалению, 
			ДанныеПроверяемогоДокумента.ДеревоУпаковок,
			ДанныеПроверяемогоДокумента.МаркированныеТовары);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеПроверяемогоДокумента,УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция АдресДанныхПроверки(Постфикс = "")
	
	РедактируемыйОбъект = РеквизитФормыВЗначение("Объект");
	ДанныеХранилища = РедактируемыйОбъект["ДанныеПроверкиИПодбора"+Постфикс].Получить();
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеХранилища, УникальныйИдентификатор);

КонецФункции 

&НаКлиенте
Процедура СканированиеАлкогольнойПродукцииАктаРасхожденийПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СканированиеАлкогольнойПродукцииАктаРасхожденийПослеЗакрытияНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура СканированиеАлкогольнойПродукцииАктаРасхожденийПослеЗакрытияНаСервере(АдресВременногоХранилища)
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	УдалитьИзВременногоХранилища(АдресВременногоХранилища);
	
	НачатьТранзакцию();
	
	Попытка
		
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ДокументОбъект.СтатусПроверкиИПодбораАктРасхождений = Перечисления.СтатусыПроверкиИПодбораИС.Завершено;
		РезультатПроверки.Вставить("ДеревоМаркированнойПродукции", РезультатПроверки.ДеревоМаркируемойПродукции);
		РезультатПроверки.Удалить("ДеревоМаркируемойПродукции");
		ДокументОбъект.ДанныеПроверкиИПодбораАктРасхождений = Новый ХранилищеЗначения(РезультатПроверки);
		
		Если ДокументОбъект.Проведен Тогда
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнтеграцияЕГАИСВызовСервера.ИнформироватьОбОшибкеВДокументе(
			"ru = 'Не удалось сохранить результаты сканирования и проверки в документе: %1 по причине: %2'",
			Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

	Прочитать();
	
	ОбновитьПредставленияНаФорме();
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкоды

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	ШтрихкодированиеИСКлиент.ОбработатьВводШтрихкода(
		ЭтотОбъект,
		ДанныеШтрихкода,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Функция Подключаемый_ВыполнитьДействие(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодов(
		РезультатОбработкиШтрихкода,
		КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеОбработкиШтрихкодов()
	
	ШтрихкодированиеИСКлиентПереопределяемый.ПослеОбработкиШтрихкодов(
		ЭтотОбъект,
		ДанныеДляОбработки,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеПередЗаполнением()
	
	Объект.АкцизныеМарки.Очистить();
	
	ИменаКолонокДляОчистки = Новый Массив();
	ИменаКолонокДляОчистки.Добавить("Количество");
	ИменаКолонокДляОчистки.Добавить("КоличествоУпаковок");
	ИменаКолонокДляОчистки.Добавить("КоличествоАкцизныхМарок");
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Для Каждого ИмяКолонки Из ИменаКолонокДляОчистки Цикл
			СтрокаТовары[ИмяКолонки] = 0;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиТЧ(ДобавленныеСтроки, ИзмененныеСтроки, КэшированныеЗначения = Неопределено)
	
	Для Каждого СтрокаТЧ Из ДобавленныеСтроки Цикл
		
		ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		ПараметрыЗаполнения.ПересчитатьСумму                   = Истина;
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц        = Истина;
		ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ            = Истина;
		ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию      = Истина;
		ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус     = Истина;
		ПараметрыЗаполнения.ЗаполнитьАртикул                   = Истина;
		ПараметрыЗаполнения.ЗаполнитьКод                       = Истина;
		
		СобытияФормЕГАИСПереопределяемый.ПриИзмененииНоменклатуры(
			ЭтотОбъект, СтрокаТЧ, КэшированныеЗначения,
			ПараметрыЗаполнения, ПараметрыУказанияСерий);
		
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(СтрокаТЧ);
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ИзмененныеСтроки Цикл
		
		ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		ПараметрыЗаполнения.ПересчитатьСумму              = Истина;
		ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок = Истина;
		
		СобытияФормЕГАИСПереопределяемый.ПриИзмененииКоличестваУпаковок(
			ЭтотОбъект, СтрокаТЧ, КэшированныеЗначения,
			ПараметрыЗаполнения);
		
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(СтрокаТЧ);
		
	КонецЦикла;
	
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		Элементы.Товары.ТекущаяСтрока = ДобавленныеСтроки[ДобавленныеСтроки.Количество() - 1].ПолучитьИдентификатор();
	ИначеЕсли ИзмененныеСтроки.Количество() > 0 Тогда
		Элементы.Товары.ТекущаяСтрока = ИзмененныеСтроки[ИзмененныеСтроки.Количество() - 1].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	Если РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		
		ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц        = Истина;
		ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ = Истина;
		ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию      = Истина;
		
		Если ТипЗнч(РезультатОбработкиШтрихкода.ИсходныеДанные) = Тип("Структура") Тогда
			ДанныеШтрихкодов = Новый Массив;
			ДанныеШтрихкодов.Добавить(РезультатОбработкиШтрихкода.ИсходныеДанные);
		Иначе
			ДанныеШтрихкодов = РезультатОбработкиШтрихкода.ИсходныеДанные;
		КонецЕсли;
		
		ДанныеДляОбработки = Неопределено;
		ШтрихкодированиеИСПереопределяемый.ПодготовитьДанныеДляОбработкиШтрихкодов(
			ЭтотОбъект, ДанныеШтрихкодов, ПараметрыЗаполнения, ДанныеДляОбработки);
		
		ШтрихкодированиеИСПереопределяемый.ОбработатьШтрихкоды(
			ЭтотОбъект, ДанныеДляОбработки, КэшированныеЗначения);
		
		ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
		АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
		
	Иначе
		
		ОбработатьСтрокиТЧ(
			РезультатОбработкиШтрихкода.ДобавленныеСтроки,
			РезультатОбработкиШтрихкода.ИзмененныеСтроки,
			КэшированныеЗначения);
		
	КонецЕсли;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции


&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормЕГАИСКлиентПереопределяемый.ПриПолученииДанныхИзТСД(
		Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект),
		ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьАкцизныеМарки(Данные)
	
	АкцизныеМаркиЕГАИС.УдалитьАкцизныеМаркиЧека(
		ЭтотОбъект,
		Данные.ИдентификаторыСтрок);
	
	АкцизныеМаркиЕГАИС.УдалитьАкцизныеМаркиПоСправкам2(
		ЭтотОбъект,
		Данные.Справки2);
	
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Подбор

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, ПараметрыЗаполнения)
	
	СобытияФормЕГАИСПереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки = Истина;
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц  = Истина;
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТСД

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(ТаблицаТоваров, ДополнительныеПараметры) Экспорт
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		Возврат;
		
	КонецЕсли;
	
	ЗагрузкаДанныхТСД = РезультатПроверкиДанныхТСД(ТаблицаТоваров);
	
	Если ЗагрузкаДанныхТСД.ЕстьОшибкиВДеревеУпаковок Тогда
		
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ЗагрузкаДанныхТСД.АдресДереваУпаковок);
		
	ИначеЕсли ЗагрузкаДанныхТСД.ЕстьОшибки Тогда
		
		ПоказатьПредупреждение(, ЗагрузкаДанныхТСД.ТекстОшибки);
		
	Иначе
		
		ШтрихкодированиеИСКлиент.ОповеститьОНачалеОбработкиДанныхТСД();
		
		ОбработатьПолученныеДанныеТСД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовленныеДанныеПартионнойПродукцииТСД()
	
	Если ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц        = Истина;
	ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ = Истина;
	ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию      = Истина;
	
	СтруктураДействий = Неопределено;
	ШтрихкодированиеНоменклатурыЕГАИСКлиентПереопределяемый.ПодготовитьДанныеДляОбработкиТаблицыТоваровПолученнойИзТСД(
		ЭтотОбъект,
		ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция,
		КэшированныеЗначения,
		ПараметрыЗаполнения,
		СтруктураДействий);
	
	Возврат СтруктураДействий;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД()
	
	Если ЗагрузкаДанныхТСД.Упаковки.Количество() > 0
		Или ЗагрузкаДанныхТСД.МаркируемаяПродукция.Количество() > 0 
		Или ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() > 0 Тогда
		
		ДанныеПартионнойПродукции = ПодготовленныеДанныеПартионнойПродукцииТСД();
		
		ОбработатьДанныеТСДНаСервере(ДанныеПартионнойПродукции, КэшированныеЗначения);
		
		Если ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() > 0 Тогда
			
			ШтрихкодированиеИСКлиентПереопределяемый.ПослеОбработкиТаблицыТоваровПолученнойИзТСД(
				ЭтотОбъект,
				ДанныеПартионнойПродукции,
				КэшированныеЗначения);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.МаркируемаяАлкогольнаяПродукцияДопУказание.Количество() > 0 Тогда
		
		Подключаемый_ПослеОбработкиШтрихкодаТСД();
		
	Иначе
		
		ШтрихкодированиеИСКлиент.ОповеститьОбОкончанииОбработкиДанныхТСД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеТСДНаСервере(ДанныеПартионнойПродукции, КэшированныеЗначения)

	ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования(ЭтотОбъект);
	ВложенныеШтрихкоды = ПолучитьИзВременногоХранилища(ЗагрузкаДанныхТСД.АдресВложенныеШтрихКоды);
	
	Для Каждого МаркируемаяПродукция Из ЗагрузкаДанныхТСД.МаркируемаяПродукция Цикл
		
		Если ВложенныеШтрихкоды <> Неопределено Тогда
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Штрихкод", МаркируемаяПродукция.ДанныеШтрихкода.Штрихкод);
			
			НайденныеСтроки = ВложенныеШтрихкоды.МаркированныеТовары.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() > 0 
				И ЗначениеЗаполнено(НайденныеСтроки[0].ШтрихкодУпаковки) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатОбработкиШтрихкода = Документы.ТТНИсходящаяЕГАИС.ОбработатьДанныеШтрихкодаМаркируемойПродукции(ЭтотОбъект, 
		                                                                                   МаркируемаяПродукция.ДанныеШтрихкода, 
		                                                                                   ПараметрыСканирования);
		
		ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
	КонецЦикла;
	
	Если ЗагрузкаДанныхТСД.Упаковки.Количество() > 0 Тогда
		
		Если ЗагрузкаДанныхТСД.Упаковки.Количество() = 1 Тогда
			
			ДанныеШтрихкода = ЗагрузкаДанныхТСД.Упаковки[0].ДанныеШтрихкода;
			
		Иначе
			
			ДанныеШтрихкода = Неопределено;
			
		КонецЕсли;
		
		РезультатОбработкиШтрихкода = Документы.ТТНИсходящаяЕГАИС.ОбработатьДанныеШтрихкодаУпаковки(ЭтотОбъект,
		                                                                                     ДанныеШтрихкода, 
		                                                                                     ВложенныеШтрихкоды, 
		                                                                                     ПараметрыСканирования);
		
		ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() > 0 Тогда
		
		ШтрихкодированиеНоменклатурыЕГАИСПереопределяемый.ОбработатьДанныеИзТСД(
			ЭтотОбъект, ДанныеПартионнойПродукции, КэшированныеЗначения);
		
		АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеОбработкиШтрихкодаТСД()
	
	Если ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента <> ЗагрузкаДанныхТСД.МаркируемаяАлкогольнаяПродукцияДопУказание.Количество() Тогда
		
		ДанныеШтрихкода = ЗагрузкаДанныхТСД.МаркируемаяАлкогольнаяПродукцияДопУказание[ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента].ДанныеШтрихКода;
		
		ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента + 1;
		
		РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкодаДопУказаниеТСД(ДанныеШтрихКода, КэшированныеЗначения);
		
		ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиВводаШтрихкода();
		ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода;
		ПараметрыЗавершенияВводаШтрихкода.КэшированныеЗначения        = КэшированныеЗначения;
		ПараметрыЗавершенияВводаШтрихкода.Форма                       = ЭтотОбъект;
		ШтрихкодированиеИСКлиент.ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
		//ШтрихкодированиеИСКлиент.ЗавершитьОбработкуВводаШтрихкода(ЭтотОбъект, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
	Иначе
		
		ШтрихкодированиеИСКлиент.ОповеститьОбОкончанииОбработкиДанныхТСД();
		
		ЗагрузкаДанныхТСД = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатПроверкиДанныхТСД(ТаблицаТоваров)

	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ЭтоФормаДокумента", Истина);
	ПараметрыПроверки.Вставить("Форма",             ЭтотОбъект);
	ПараметрыПроверки.Вставить("ОрганизацияЕГАИС",  Объект.Грузоотправитель);
	
	Возврат ИнтеграцияЕГАИС.РезультатПроверкиДанныхТСД(ТаблицаТоваров, ПараметрыПроверки);

КонецФункции

&НаСервере
Функция РезультатОбработкиШтрихкодаДопУказаниеТСД(ДанныеШтрихКода, КэшированныеЗначения)
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования(ЭтотОбъект);
	АкцизныеМаркиЕГАИС.АкцизныеМаркиВДокументе(ЭтотОбъект, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.РезультатОбработкиШтрихкодаМаркируемойПродукции(ЭтотОбъект,
	                                                                                          ДанныеШтрихкода, 
	                                                                                          ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции


#КонецОбласти

#КонецОбласти
