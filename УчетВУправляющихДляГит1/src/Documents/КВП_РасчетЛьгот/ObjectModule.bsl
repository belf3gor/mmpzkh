
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ ПЕРЕМЕННЫХ МОДУЛЯ

Перем мНастройкиУчетнойПолитикиТСЖ Экспорт;                   // Хранит настройки учетной политики по ТСЖ.
Перем мНастройкиРасчетаЛьгот Экспорт;                         // Хранит настройки предоставления и расчета льгот в разерзе услуг.
Перем мКоэффициентКоличестваДней;                             // Хранит рассчитанный коэффициент количества дней, за которые дается льгота.
Перем мУдалятьДвижения Экспорт;                               // Хранит признак новый ли это документ.
Перем УказыватьЖильцовЧислами;                                // Хранит значение константы "УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами".
Перем УчитыватьКорректировкиПриРасчете;                       // Хранит значение константы "УПЖКХ_УчитыватьКорректировкиПриРасчетеЛьгот".
Перем ТаблицаТарифов;                                         // Хранит таблицу значений тарифов по лицевым счетам.
Перем мТочностьОбъемаНачислений Экспорт;                      // Хранит точность объема начислений.
Перем ФорматнаяСтрокаОбъема;                                  // Хранит параметр форматирования объема.
Перем ТаблицаРасшифровкиРасчетаЛьгот Экспорт;                 // Хранит таблицу значений с расшифровками расчета льгот по лицевым счетам и услугам.
Перем ВестиУчетНачисленийПоДобровольномуСтрахованию;          // Хранит признак того, что ведется учет по добровольному страхованию.
Перем УслугаДобровольногоСтрахования;                         // Хранит ссылку на услугу добровольного страхования.
Перем мЛьготуПредоставлятьЗарегистрированнымЖильцам Экспорт;  // Признак расчета льгот по зарегистрированным жильцам.
Перем мЛьготуПредоставлятьПроживающимЖильцам Экспорт;         // Признак расчета льгот по проживающим жильцам.
Перем мЛьготуПредоставлятьСобственникам Экспорт;              // Признак расчета льгот по собственникам.
Перем ИспользоватьФункционалВыгрузкиВГЦЖС;                    // ПРизнак использования функционала выгрузки в ГЦЖС

#Область ПодсистемыЖКХ_ОтладкаРасчетов

// ПодсистемыЖКХ.ОтладкаРасчетов

// Процедура добавляет информацию в таблицу расшифровки расчета льгот.
Процедура ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ЛицевойСчет, Услуга, ОписаниеРасчета)
	
	// Попробуем найти в таблице расшифровок строку с переданным лицевым счетом и услугой.
	Отбор = Новый Структура();
	Отбор.Вставить("ЛицевойСчет", ЛицевойСчет);
	Отбор.Вставить("Услуга",      Услуга);
	
	СтрокиСРасшифровкамиПоЛСИУслуге = ТаблицаРасшифровкиРасчетаЛьгот.НайтиСтроки(Отбор);
	
	Если СтрокиСРасшифровкамиПоЛСИУслуге.Количество() = 0 Тогда
		
		// Добавим новую запись в таблицу расшифровки расчета льгот.
		НоваяСтрокаТаблицыРасшифровкиЛьгот = ТаблицаРасшифровкиРасчетаЛьгот.Добавить();
		НоваяСтрокаТаблицыРасшифровкиЛьгот.ЛицевойСчет     = ЛицевойСчет;
		НоваяСтрокаТаблицыРасшифровкиЛьгот.Услуга          = Услуга;
		НоваяСтрокаТаблицыРасшифровкиЛьгот.ОписаниеРасчета = ОписаниеРасчета;
		
	Иначе
		
		// Обновим информацию по расчету льгот для лицевого счета и услуги.
		// Строка по связке "лицевой счет - услуга" будет всегда одна, поэтому можно сразу брать первый элемент массива.
		СтрокиСРасшифровкамиПоЛСИУслуге[0].ОписаниеРасчета = СтрокиСРасшифровкамиПоЛСИУслуге[0].ОписаниеРасчета + Символы.ПС
															 + ОписаниеРасчета;
		
	КонецЕсли;
	
КонецПроцедуры

// Конец ПодсистемыЖКХ.ОтладкаРасчетов

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункцииДокумента

// Заполняет табличную часть.
//
// Параметры:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьУслуги() Экспорт
	
	УслугаПараметр = ПолучитьЭлементыСправочникаПоГруппе(Услуга);
	
	//-----------------------------------------------------------------------------
	Если ВидОперации = Перечисления.КВП_ВидыОперацийРасчетаЛьгот.НачислениеНаЛицевыеСчета Тогда
		
		// условие на услугу
		ТекстУсловияНаУслугу = "ИСТИНА";
		Если НЕ Услуга.Пустая() Тогда
			Если Услуга.ЭтоГруппа Тогда
				ТекстУсловияНаУслугу = "Услуга В ИЕРАРХИИ (&Услуга)";
			Иначе
				ТекстУсловияНаУслугу = "Услуга = &Услуга";
			КонецЕсли;
		КонецЕсли;
		
		// условие на объекты
		ТекстУсловияНаОбъект = "ИСТИНА";
		
		СписокЛицевыхСчетов = Новый СписокЗначений;
		Если ЗначениеЗаполнено(Объект) Тогда
			
			ОбъектыНачисления = КВП_СформироватьТаблицуОбъектовНачисления(Дата, Объект);
			
			Для Каждого ТекОбъект Из ОбъектыНачисления Цикл
				Если ТекОбъект.ТипОбъекта = "ЛицевыеСчета" Тогда
					СписокЛицевыхСчетов = ТекОбъект.СписокОбъектов.Скопировать();
				КонецЕсли;
			КонецЦикла;
			
			ТекстУсловияНаОбъект = "ЛицевойСчет В (&СписокОбъектов)";
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНач",        НачалоМесяца(Дата));
		Запрос.УстановитьПараметр("ДатаКон",        КонецМесяца(Дата));
		Запрос.УстановитьПараметр("Услуга",         Услуга);
		Запрос.УстановитьПараметр("Организация",    Организация);
		Запрос.УстановитьПараметр("СписокОбъектов", СписокЛицевыхСчетов);
		
		Запрос.Текст = ПолучитьТекстЗапросаНачислений();
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловияНаОбъект", ТекстУсловияНаОбъект);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловияНаУслугу", ТекстУсловияНаУслугу);
		
		// Формирование списка услуг.
		Выборка = Запрос.Выполнить().Выбрать();
		
		// Заполним табличную часть документа.
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Льготы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
	//-----------------------------------------------------------------------------
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийРасчетаЛьгот.НачисленияНаПарковочныеМеста Тогда
		
		// Общая таблица парковочных мест по услуге и объекту.
		ТаблицаПарковочныхМест = КВП_СформироватьТаблицуПарковочныхМест(КонецДня(Дата), Объект, УслугаПараметр);
		
		// Заполним табличную часть документа.
		Для Каждого Строка Из ТаблицаПарковочныхМест Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ЛицевойСчет) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТЧ = Льготы.Добавить();
			СтрокаТЧ.ЛицевыеСчета = Строка.ПарковочноеМесто;
			СтрокаТЧ.Услуга       = Строка.Услуга;
			СтрокаТЧ.СуммаУслуги  = ПолучитьТарифПоПарковочномуМесту(Дата, Организация, Строка.Услуга, Строка.ПарковочноеМесто);
		КонецЦикла;
		
	//-----------------------------------------------------------------------------
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьУслуги()

// Осуществляет расчет сумм льгот. Используется старый алгоритм расчета.
//
Процедура РассчитатьЛьготы() Экспорт
	
	мКоэффициентКоличестваДней = КоличествоДнейНачисления / День(КонецМесяца(Дата));
	
	РассчитатьЛьготыСтарыйАлгоритм();
	
КонецПроцедуры // РассчитатьЛьготы()

// Заполняет табличную часть и рассчитывает льготы. Используется новый алгоритм расчета.
Процедура ЗаполнитьТабличнуюЧастьНовыйАлгоритм() Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	РасчетЛьгот.Очистить();
	
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	ЛьготныйТариф = мНастройкиУчетнойПолитикиТСЖ.ИспользоватьЛьготныйТариф;
	
	// отбор объектов, формирование списка лицевых счетов
	СписокЛицевыхСчетов = Новый СписокЗначений;
	ОбъектыНачисления = КВП_СформироватьТаблицуОбъектовНачисления(НачалоМесяца(Период), ?(ЗначениеЗаполнено(Объект),
																						  Объект,
																						  Неопределено));
	
	Для Каждого ТекОбъект Из ОбъектыНачисления Цикл
		Если ТекОбъект.ТипОбъекта = "ЛицевыеСчета" Тогда
			СписокЛицевыхСчетов = ТекОбъект.СписокОбъектов.Скопировать();
		КонецЕсли;
	КонецЦикла;
	
	// 1.	Получаем льготников по каждому лицевому счету:
	// 1.1.	Получаем льготников на начало периода;
	// 1.2.	Получаем жильцов, которые стали льготниками в периоде.
	ТаблицаЛьготников = ПолучитьТаблицуЛьготников(СписокЛицевыхСчетов);
	
	Льготники           = ТаблицаЛьготников.ВыгрузитьКолонку("Льготник");
	ЛьготныеКатегории   = ТаблицаЛьготников.ВыгрузитьКолонку("ЛьготнаяКатегория");
	СписокЛицевыхСчетов = ТаблицаЛьготников.ВыгрузитьКолонку("ЛицевойСчет");
	
	// 2.	Получаем таблицу начислений из регистра «Начисления».
	ТаблицаНачислений    = ПолучитьТаблицуНачисленийПоДаннымИзРегистраНачисления(, СписокЛицевыхСчетов, Истина);
	ТаблицаКорректировок = ПолучитьТаблицуКорректировокПоДаннымИзРегистраНачисления(, СписокЛицевыхСчетов, Истина);
	
	// Для услуг могут быть заданы льготные тарифы, поэтому необходимо пересчитать сумму начисления по каждой услуге.
	ДополнитьТаблицаНачисленийДаннымиПоЛьготномуТарифу(ТаблицаНачислений, ТаблицаКорректировок, ЛьготныйТариф);
	
	// сформируем список услуг для получения скидок
	СписокУслуг = ТаблицаНачислений.ВыгрузитьКолонку("Услуга");
	СписокЛицевыхСчетов = ТаблицаНачислений.ВыгрузитьКолонку("ЛицевыеСчета");
	
	// 3.	Получаем таблицы изменения данных:
	// 3.1.	Таблица изменений состава жильцов – по лицевому счету за период.
	// По данным регистра сведения о проживающих / зарегистрированных
	// (в данной таблице содержатся не только льготники, но и жильцы).
	ТаблицаИзмененийЖильцов = ПолучитьТаблицуИзмененийСоставаЖильцов(СписокЛицевыхСчетов);
	ТаблицаЖильцов = ТаблицаИзмененийЖильцов.Скопировать(, "ЛицевойСчет, Жилец");
	ТаблицаЖильцов.Свернуть("ЛицевойСчет, Жилец");
	
	// 3.2.	Таблица близких родственников (по данным регистра сведения о проживающих / зарегистрированных
	// (зависит от настройки учетной политики) и сведений о степенях родства физических лиц).
	ТаблицаБлизкихРодственниковОбщая = ПолучитьТаблицуБлизкихРодственников(ТаблицаЛьготников, ТаблицаИзмененийЖильцов);
	
	// Получим таблицу скидок для льготных категорий по необходимым услугам.
	ТаблицаСкидок = ПолучитьТаблицуСкидок(ЛьготныеКатегории, СписокУслуг);
	
	// ОПИСАНИЕ ИЗМЕНЕНИЙ В НАСТРОЙКАХ РАСЧЕТА ЛЬГОТ от 09.2016:
	//
	// Решено настройки расчета льгот перенести на уровень услуг.
	// Теперь сразу отсечь близких родственников по признаку зарегистрирован / проживает / собственник
	// не можем, т.к. для каждой отдельной услуги настройки могут быть разными.
	//
	// Поэтому:
	// 4.	Получаем настройки услуг:
	// 4.1.	Получаем список всех услуг, по которым считаем льготы.
	// 4.2.	Сразу для каждой услуги определяем настройки расчета льгот.
	// 4.3.	При расчете обращаемся к настройкам расчета льгот по конкретной услуге.
	// 4.4.	Отсекаем лишние варианты согласно полученным настройкам.
	
	// Получим список услуг.
	врТаблицаУслуг = ТаблицаСкидок.Скопировать(, "Услуга");
	врТаблицаУслуг.Свернуть("Услуга");
	МассивУслуг    = врТаблицаУслуг.ВыгрузитьКолонку("Услуга");
	врТаблицаУслуг = Неопределено;
	
	// Получим настройки расчета льгот в разрезе услуг.
	мНастройкиРасчетаЛьгот = ПолучитьНастройкиРасчетаЛьгот(МассивУслуг);
	
	// ОПИСАНИЕ ИЗМЕНЕНИЙ В АЛГОРИТМЕ РАСЧЕТА ЛЬГОТ ПРИ УЧЕТЕ ЖИЛЬЦОВ ГОТОВЫМИ ЧИСЛАМИ:
	// 
	// При учете жильцов готовыми числами в общем случае необязательно вводить информацию обо всех жильцах.
	// Т.е. количество жильцов, указанное "готовым числом" может быть больше, чем количество жильцов, реально
	// введенных по лицевому счету. Для расчета льгот в данном случае необходимо лишь наличие информации
	// о жильцах-льготниках. Ранее для расчета льгот при учете жильцов готовыми числами использовался отдельный
	// алгоритм, т.к. считалось, что при отсутствии полной информации о каждом жильце невозможно однозначно
	// определить, как определять зависимость влияния семейной льготы таким образом, чтобы при одновременном
	// наличии индивидуальных льгот выбрать наиболее выгодный набор льгот для лицевого счета вцелом. Поэтому
	// в старом алгоритме для готовых чисел при наличии семейных льгот индивидуальные льготы просто игнорировались.
	// Это приводило к тому, что в некоторых случаях семейная льгота оказывалась менее выгодной, чем другой
	// возможный набор льгот лицевого счета с использованием индивидуальных льгот или же льгот на близких родственников.
	// При обращениях клиентах и жалобах на "неоптимальный" выбор набора льгот при учете жильцов готовыми числами
	// ранее рекомендавалось клиенту переходить на полный учет жильцов, что не всегда устраивает клиентов,
	// т.к. не всегда жильцы предоставляют полную информацию, для чего, собственно, учет готовыми числами и реализован.
	// Анализ показал, что даже при отсутствии данных обо всех жильцах ВОЗМОЖНО использовать общий "расширенный"
	// алгоритм расчета льгот, при котором строится "Таблица влияния" каждого льготника на всех жильцов
	// с учетом всех возможных имеющихся видов льгот (на себя, на близких родственников и на семью).
	// Для использования "расширенного" алгоритма при построении "Таблицы влияния" необходимо добавлять "псевдожильцов".
	// При этом количество "псевдожильцов" должно равняться разнице между количеством жильцов, указанным "готовым числом"
	// и количеством реально введенных жильцов по лицевому счету с учетом настройки учетной политики ЖКХ
	// "Льготу предоставлять Проживающим/Зарегистрированным". "Псевдожилец" по умолчанию считается НЕльготником.
	// "Псевдожильцы" формируются в виде "Жилец1", "Жилец2", "Жилец3" и т.д. в зависимости от требуемого количества.
	// Добавляемые "псевдожильцы" нигде более не используются и не отображаются в программе - они нужны лишь для
	// технической реализации механизмов в случае неполной информации о жильцах.
	// 
	// По умолчанию всегда теперь будет использоваться новый "расширенный" алгоритм расчета льгот
	// при учете жильцов готовыми числами, в котором добавляются "псевдожильцы", т.к. Функция проверки условия
	// "ИспользоватьРасширенныйАлгоритмРасчетаЛьготГотовымиЧислами()" всегда возвращает значение "Истина".
	// Старый механизм расчета льгот для готовых чисел оставляем на случай, если кто-либо из клиентов
	// захочет вернуть расчет льгот в том виде, как он выполнялся до внесения изменений.
	// Для этого потребуется индивидуально для таких клиентов включать возможность изменения конфигурации
	// и изменить возвращаемое значение функции "ИспользоватьРасширенныйАлгоритмРасчетаЛьготГотовымиЧислами()"
	// на значение "Ложь".
	
	
	Если УказыватьЖильцовЧислами И НЕ ИспользоватьРасширенныйАлгоритмРасчетаЛьготГотовымиЧислами() Тогда
		
		// В старом алгоритме расчета льгот при учете жильцов готовыми числами таблица влияния не строится.
		// Так как в общем случае при отсутствии данных обо всех жильцах старый алгоритм не может однозначно
		// определить на кого из жильцов какая льгота распространяется, поэтому в нем при наличии
		// льготы на семью индивидуальные льготы не рассчитываются.
		
		// Алгоритм начисления в случае установки настройки "УказыватьКоличествоПрожИЗарегЧислами".
		ПроизвестиРасчетЛьготДляГотовыхЧисел(ТаблицаНачислений, ТаблицаЛьготников, ТаблицаИзмененийЖильцов,
		                                     ТаблицаСкидок, ТаблицаБлизкихРодственниковОбщая);
		
	Иначе
		
		// Получим список лицевых счетов
		врТаблицаЛС = ТаблицаЛьготников.Скопировать(, "ЛицевойСчет");
		врТаблицаЛС.Свернуть("ЛицевойСчет");
		МассивЛС = врТаблицаЛС.ВыгрузитьКолонку("ЛицевойСчет");
		врТаблицаЛС = Неопределено;
		
		// Решено обходить лицевые счета и услуги по каждому лицевому счету.
		// Для каждой комбинации "Лицевой счет" - "Услуга" получаем периоды изменения
		// данных о жильцах, начислениях и льготниках.
		//
		// Бежим по периодам и для каждого периода получаем таблицу наилучших вариантов.
		// Далее идем по таблице наилучшего варианта и рассчитываем суммы льгот для начислений
		// с учетом ограничений по объему и по сумме.
		
		Для Каждого ТекЛицевойСчет Из МассивЛС Цикл
			
			// Получим список льготных категорий.
			НайденныеСтроки = ТаблицаЛьготников.НайтиСтроки(Новый Структура("ЛицевойСчет", ТекЛицевойСчет));
			врТаблицаЛьготников = ТаблицаЛьготников.Скопировать(НайденныеСтроки, "ЛьготнаяКатегория");
			врТаблицаЛьготников.Свернуть("ЛьготнаяКатегория");
			МассивЛьготныхКатегорий = врТаблицаЛьготников.ВыгрузитьКолонку("ЛьготнаяКатегория");
			врТаблицаЛьготников = Неопределено;
			
			Для Каждого ТекУслуга Из МассивУслуг Цикл
				
				ВидПлощадиИзменения = Неопределено;
				ИзмененияПоПроживающим        = Ложь;
				ИзмененияПоЗарегистрированным = Ложь;
				
				// Получим настройки расчета льгот по услуге.
				НастройкиРасчетаЛьготПоУслуге = мНастройкиРасчетаЛьгот.НайтиСтроки(Новый Структура("Услуга", ТекУслуга));
				Если НастройкиРасчетаЛьготПоУслуге.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НастройкиРасчетаЛьготПоУслуге = НастройкиРасчетаЛьготПоУслуге[0];
				ОпределитьПризнакиРасчетаЛьготПоВидамЖильцовПоУслуге(НастройкиРасчетаЛьготПоУслуге);
				
				// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА +
				
				Если НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги
							= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой Тогда
					ТекстПротокола = "всех жильцов, пользующихся льготой, т.е. по следующей формуле: [Объем потребления услуги] * " +
									 "[Количество получателей текущей льготы] / [Количество всех получателей льготы]";
				ИначеЕсли НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги
							= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчета Тогда
					ТекстПротокола = "всех жильцов, т.е. по следующей формуле: [Объем потребления услуги] * " +
									 "[Количество получателей текущей льготы] / [Количество всех жильцов]";
				Иначе // ВсеЛьготникиПолучающиеЛьготуПоУслуге
					ТекстПротокола = "всех льготников, получающих льготу по услуге, т.е. по следующей формуле: [Объем потребления услуги] / " +
									 "[Количество льготников]";
				КонецЕсли;
				
				ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛицевойСчет, ТекУслуга, "Расчет льготного объема - исходя из количества " + ТекстПротокола);
				
				Если НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
							= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой Тогда
					ТекстПротокола = "всех жильцов, пользующихся льготой, т.е. по следующей формуле: [Размер ограничения по норме] * " +
									 "[Количество получателей текущей льготы] / [Количество всех получателей льготы]";
				ИначеЕсли НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
							= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ВсеЖильцыЛицевогоСчета Тогда
					ТекстПротокола = "всех жильцов, т.е. по следующей формуле: [Размер ограничения по норме] * " +
									 "[Количество получателей текущей льготы] / [Количество всех жильцов]";
				Иначе // ЖильцыПользующиесяЛьготойЛьготника
					ТекстПротокола = "всех жильцов, пользующихся льготой текущего льготника, т.е. по следующей формуле: [Размер ограничения по норме]";
				КонецЕсли;
				
				ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛицевойСчет, ТекУслуга, "Расчет ограничения услуги - исходя из количества " + ТекстПротокола);
				
				// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА -
				
				// Отбираем данные из таблицы ТаблицаБлизкихРодственниковОбщая с учетом настройки 
				// "ВидЖильцовКоторымПредоставляютсяЛьготы" текущей услуги.
				//
				// Для информации: 
				// Сразу отсечь близких родственников по признаку зарегистрирован / проживает / собственник
				// не можем, т.к. настройки расчета льгот перенесены на уровень услуг.
				// Т.е. для каждой отдельной услуги настройки могут быть разными.
				// Ранее отбор производился на этапе подготовки таблицы близких родственников с учетом единой 
				// для всех услуг настройки учетной политики "РасчетЛьготПоЗарегистрированным".
				ПараметрОтбора = ?(мЛьготуПредоставлятьЗарегистрированнымЖильцам, "Зарегистрирован", 
									?(мЛьготуПредоставлятьПроживающимЖильцам,     "Проживает",
																				  "Собственник"));
				МассивСтрок    = ТаблицаБлизкихРодственниковОбщая.НайтиСтроки(Новый Структура(ПараметрОтбора, Истина));
				ТаблицаБлизкихРодственников = ТаблицаБлизкихРодственниковОбщая.Скопировать(МассивСтрок);
				
				Для Каждого ТекЛьготнаяКатегория Из МассивЛьготныхКатегорий Цикл 
					
					// получим параметры скидки
					ПараметрыСкидки = 
						ТаблицаСкидок.НайтиСтроки(Новый Структура("Услуга, ЛьготнаяКатегория", ТекУслуга, ТекЛьготнаяКатегория));
					
					Если Не ПараметрыСкидки.Количество() = 0 Тогда
						
						ПараметрыСкидки = ПараметрыСкидки.Получить(0);
						
						ОграничениеПоОбъемуУслугиЛС = УПЖКХ_РасчетЛьгот.ПолучитьИндивидуальноеОграничениеУслугиПоОбъемуНаЛицевойСчет(ТекЛицевойСчет, ТекУслуга, ТекЛьготнаяКатегория);
						Если ОграничениеПоОбъемуУслугиЛС = Неопределено Тогда
							ОграничениеПоОбъемуУслугиЛС = ПараметрыСкидки.ОграничениеПоОбъемуУслуги;
						КонецЕсли;
						
						// При наличии ограничения по объему, рассчитаем норму ограничения
						// и с учетом данного ограничения рассчитаем сумму начисления.
						Если ЗначениеЗаполнено(ОграничениеПоОбъемуУслугиЛС) Тогда
							
							Если ОграничениеПоОбъемуУслугиЛС.Основание = Перечисления.КВП_ОснованияНормПотребления.ОдинЧеловек Тогда
								
								Если ОграничениеПоОбъемуУслугиЛС.ВидЖильцов = Перечисления.УПЖКХ_ВидыЖильцов.Зарегистрированные Тогда
									ИзмененияПоЗарегистрированным = Истина;
									
								ИначеЕсли ОграничениеПоОбъемуУслугиЛС.ВидЖильцов = Перечисления.УПЖКХ_ВидыЖильцов.Проживающие Тогда
									ИзмененияПоПроживающим = Истина;
									
								КонецЕсли;
								
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ПараметрыСкидки.ПлощадьДляРасчетаОграничения) Тогда
								ВидПлощадиИзменения = ПараметрыСкидки.ПлощадьДляРасчетаОграничения;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("ВидПлощадиИзменения",           ВидПлощадиИзменения);
				ДопПараметры.Вставить("ИзмененияПоПроживающим",        ИзмененияПоПроживающим);
				ДопПараметры.Вставить("ИзмененияПоЗарегистрированным", ИзмененияПоЗарегистрированным);
				
				// 0 - для услуг по ПУ, 1 - для прочих услуг.
				СпособУчетаКоэффициентаПериода = ПолучитьСпособУчетаКоэффициентаПериода(ТекУслуга);
				
				// Получим периоды изменения данных по проживающим и изменениям по действию льгот.
				Периоды = ПолучитьПодпериодыРасчета(ТаблицаЛьготников, ТаблицаИзмененийЖильцов, ТаблицаНачислений,
													ТекЛицевойСчет, ТекУслуга, , , ДопПараметры);
				
				РазбитьНачисленияПоПериодамРасчета(ТаблицаНачислений, Периоды, ТекЛицевойСчет, ТекУслуга, СпособУчетаКоэффициентаПериода);
				
				Для Индекс = 0 По Периоды.Количество() - 1 Цикл
					
					НачалоПериода = Периоды[Индекс].Период;
					КонецПериода  = ?(Индекс = Периоды.Количество() - 1, КонецМесяца(Период),
					                  Периоды[Индекс + 1].Период - 1);
					
					ТаблицаЖильцовЛицевогоСчетаВПодпериоде = ИсключитьЖильцовКоторымСкидкаНеПоложенаВПодпериоде(ТаблицаЖильцов, 
																												ТаблицаИзмененийЖильцов, 
																												ТекЛицевойСчет, 
																												НачалоПериода);
					
					Если УказыватьЖильцовЧислами Тогда
						КоличествоЖильцовНаЛС = ПолучитьКоличествоЖильцов(ТаблицаИзмененийЖильцов, ТекЛицевойСчет, 
																			Периоды[Индекс].Период);
						// При учете жильцов готовыми числами и отсутствии информации обо всех жильцах
						// для корректного выполнения расчета льгот будем вводить "псевдожильцов" в виде "Жилец1", "Жилец2" и т.д.
						// Добавляемые "псевдожильцы" не будут нигде отображаться - они нужны лишь для
						// заполнения отсутствующей информации о некоторых жильцах для целей технической реализации
						// механизма построения таблицы влияния и последующего выбора наилучшего варианта льгот.
						
						// Если количество жильцов подпериода меньше количества жильцов указанного готовыми числами,
						// то будем вводить "псевдожильцов", чтобы правильно заполнить "Таблицу влияния".
						КоличествоПсевдоЖильцов = КоличествоЖильцовНаЛС - ТаблицаЖильцовЛицевогоСчетаВПодпериоде.Количество();
						Пока КоличествоПсевдоЖильцов > 0 Цикл
							НоваяСтрока = ТаблицаЖильцовЛицевогоСчетаВПодпериоде.Добавить();
							НоваяСтрока.ЛицевойСчет = ТекЛицевойСчет;
							НоваяСтрока.Жилец = "Жилец" + КоличествоПсевдоЖильцов;
							КоличествоПсевдоЖильцов = КоличествоПсевдоЖильцов - 1;
						КонецЦикла;
					КонецЕсли;
					
					// 4.	По таблицам из п.1, п.3 составляем таблицу «влияния» льготников на жильцов (на кого может распространяться
					// каждая льгота каждого льготника).
					ТаблицаВлияния = ПолучитьТаблицуВлиянияЛьготников(ТаблицаЛьготников, ТаблицаЖильцовЛицевогоСчетаВПодпериоде, 
																		ТаблицаИзмененийЖильцов, ТаблицаСкидок, ТаблицаБлизкихРодственников, 
																		ТекЛицевойСчет, ТекУслуга, НачалоПериода, КонецПериода);
					
					// 5.	По таблице из п.4 строим таблицу возможных вариантов.
					ТаблицаВариантов = ПолучитьТаблицуНаилучшихВариантовРасчетаЛьгот(ТаблицаВлияния, ТаблицаЖильцовЛицевогоСчетаВПодпериоде,
																						ТаблицаСкидок, ТаблицаБлизкихРодственников, ТаблицаНачислений,
																						ТаблицаИзмененийЖильцов, НачалоПериода, КонецПериода,
																						НастройкиРасчетаЛьготПоУслуге);
					
					// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
					Если ТаблицаВариантов.Количество() > 0 Тогда
						
						ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛицевойСчет, ТекУслуга, "");
						ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛицевойСчет, ТекУслуга, "Расчет за период " +
																			  Формат(НачалоПериода, "ДФ=dd.MM.yyyy") + " - " +
																			  Формат(КонецПериода, "ДФ=dd.MM.yyyy") + ":");
						
					КонецЕсли;
					
					// 6.	Бегая по таблице из п.2 выбираем записи из таблиц п.1. и п3.1, удовлетворяющие условию
					// Лицевой счет = Лицевой счет и Дата изменения между Начало периода и Конец периода.
					// Дробим период из таблицы п.2 периодами таблиц из п.1 и п.3.1. Для каждого такого подпериода
					// производим расчет льготы по наилучшему варианту из п.5.
					РассчитатьИтоговыеВариантыЛьгот(ТаблицаНачислений, ТаблицаЛьготников, ТаблицаИзмененийЖильцов,
													ТаблицаВариантов, ТаблицаВлияния, ТаблицаСкидок, ТаблицаБлизкихРодственников, 
													НачалоПериода, КонецПериода, СпособУчетаКоэффициентаПериода, НастройкиРасчетаЛьготПоУслуге);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РасчетЛьгот.Свернуть("ЛицевыеСчета, Услуга, СоставнаяУслуга, ЛьготнаяКатегория, Льготник, НачалоПериода,
	   |КонецПериода, Тариф, ВидТарифа, ТарифЛьгота, ВидТарифаЛьгота, Договор, РазмерСкидки, ЛьготнаяПлощадь", "Количество, СуммаУслуги, Начислено, КоличествоЛьгота");
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ОценкаПроизводительности.ЗакончитьЗамерВремени("РасчетЛьготНовыйМеханизмЖкх", ВремяНачала);
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
КонецПроцедуры

#КонецОбласти

#Область СтарыйАлгоритм

// Осуществляет расчет сумм льгот.
//
Процедура РассчитатьЛьготыСтарыйАлгоритм()
	
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	
	РасшифровкаЛьгот.Очистить();
	
	// формирование результирующей таблицы
	ТаблицаНачислений = Новый ТаблицаЗначений();
	ТаблицаНачислений.Колонки.Добавить("Услуга",         Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаНачислений.Колонки.Добавить("СоставнаяУслуга",Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаНачислений.Колонки.Добавить("ЛицевыеСчета",   Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаНачислений.Колонки.Добавить("Тариф",          Новый ОписаниеТипов("Число"));
	ТаблицаНачислений.Колонки.Добавить("Количество",     Новый ОписаниеТипов("Число"));
	ТаблицаНачислений.Колонки.Добавить("Начислено",      Новый ОписаниеТипов("Число"));
	ТаблицаНачислений.Колонки.Добавить("ДнейНачислено",  Новый ОписаниеТипов("Число"));
	ТаблицаНачислений.Колонки.Добавить("Договор",        Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	ТаблицаЛС = Льготы.Выгрузить(, "ЛицевыеСчета");
	ТаблицаЛС.Свернуть("ЛицевыеСчета", "");
	СписокЛицевыхСчетов = ТаблицаЛС.ВыгрузитьКолонку("ЛицевыеСчета");
	
	// Получим список услуг.
	// Необходим для получения настроек предоставления и расчета льгот по каждой из услуг.
	врТаблицаУслуг = Льготы.Выгрузить(, "Услуга");
	врТаблицаУслуг.Свернуть("Услуга");
	МассивУслуг = врТаблицаУслуг.ВыгрузитьКолонку("Услуга");
	врТаблицаУслуг = Неопределено;
	
	Запрос = Новый Запрос();
	ДополнитьЗапросКоличествомЖильцов(Запрос, Дата, СписокЛицевыхСчетов);
	УПЖКХ_РасчетЛьгот.ДополнитьЗапросНастройкамиПредоставленияИРасчетаЛьготДляСпискаУслуг(Запрос, Дата, Организация, МассивУслуг);
	
	// Получим текст запроса для расчета сумм льгот.
	Запрос.Текст = ПолучитьТекстЗапроса();
	
	// В результате выполнения запроса получим всю информацию по льготникам указанных л/с,
	// способе расчета льгот по указанным услугам, формулы расчет льгот для услуг.
	// Результатом выполнения запроса будет дерево с узлами:
	// НомерСтроки - строка табличной части документа;
	//     Льготник - льготник указанного л/с, получающий льготу;
	//         детали - перечень льготных категорий данного льготника, способ расчета
	//         льгот по данной категории для данной услуги.
	
	Запрос.УстановитьПараметр("Дата",                             Дата);
	Запрос.УстановитьПараметр("ТекущийДокумент",                  Ссылка);
	Запрос.УстановитьПараметр("ЛицевыеСчета",                     СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("УчитыватьОтсутствующихЛьготников",
																  мНастройкиУчетнойПолитикиТСЖ.РассчитыватьЛьготуПоВременноОтсутствующим);
	
	ЛьготныйТариф = мНастройкиУчетнойПолитикиТСЖ.ИспользоватьЛьготныйТариф;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСтрок = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСтрок.Следующий() Цикл
		
		СтрокаЛьготы = Льготы.Получить(ВыборкаСтрок.НомерСтроки - 1);
		
		СуммаУслуги   = СтрокаЛьготы.СуммаУслуги;    // начисленная сумма
		ТекущийЛС     = СтрокаЛьготы.ЛицевыеСчета;   // лицевой счет
		ТекущаяУслуга = СтрокаЛьготы.Услуга;         // начисленная услуга
		СпособРасчета = ТекущаяУслуга.СпособРасчета; // способ расчета текущей услуги
		
		// заполним основные параметры для расчета льгот.
		ЕстьПоНорме                = Ложь;
		ЕстьЛьготаНаСемью          = Ложь;
		РасчетЛьготПоСоставнойУслуге = (ТекущаяУслуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.СОграничениемПоНормам);
		
		КоличествоПроживающих                = 0;
		КоличествоЗарегистрированных         = 0;
		КоличествоСобственников              = 0;
		НормаПотребления                     = Неопределено; // норма потребления текущей услуги текущим л/с
		КоличествоУслуги                     = 0;            // количество услуги для расчета льготы
		КоличествоЛьготниковНаСемью          = 0;
		КоличествоОтсутствующихЛьготников    = ВыборкаСтрок.ЛьготникОтсутствует;
		
		ВыборкаЛьготников = ВыборкаСтрок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		КоличествоЛьготников = ВыборкаЛьготников.Количество();
		
		ПервыйОбход = Истина;
		Пока ВыборкаЛьготников.Следующий() Цикл
			
			ВыборкаЛьгот = ВыборкаЛьготников.Выбрать();
			Пока ВыборкаЛьгот.Следующий() Цикл
				
				Если ПервыйОбход Тогда
					НормаПотребления             = ВыборкаЛьгот.НормаПотребления;
					КоличествоПроживающих        = ВыборкаЛьгот.КоличествоПроживающих;
					КоличествоЗарегистрированных = ВыборкаЛьгот.КоличествоЗарегистрированных;
					КоличествоСобственников      = ВыборкаЛьгот.КоличествоСобственников;
					ПервыйОбход = Ложь;
				КонецЕсли;
				
				Если НЕ ЕстьПоНорме
					И ЗначениеЗаполнено(ВыборкаЛьгот.ОграничениеПоОбъемуУслуги) Тогда
					ЕстьПоНорме = Истина;
				КонецЕсли;
				
				Если ВыборкаЛьгот.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.Семья Тогда
					КоличествоЛьготниковНаСемью = КоличествоЛьготниковНаСемью + 1;
				КонецЕсли;
				
			КонецЦикла; // льготы
			
		КонецЦикла; // льготники
		
		ЕстьЛьготаНаСемью = (КоличествоЛьготниковНаСемью > 0);
		
		// произведем расчет количества начисленной услуги.
		Если СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика 
		 ИЛИ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
			
			РасходПоВидамТарифов = ПолучитьКоличествоНачисленияНаОбъектПоУслугеСчетчикПоДаннымРегистраНачислений(Дата,
											Организация, ТекущийЛС, ТекущаяУслуга);
			РасходПоВидамТарифов.Свернуть("Услуга", "РасходДневной, РасходНочной, РасходПиковый, РасходОбщий,
			                                        |ТарифДневной, ТарифНочной, ТарифПиковый, ТарифОбщий, РасходВсего");
			// получим общее количество расхода по услуге
			КоличествоУслуги = РасходПоВидамТарифов.Итог("РасходВсего");
			
			Если РасходПоВидамТарифов.Количество() > 0 Тогда
				СтрокаРасходов = РасходПоВидамТарифов.Получить(0);
			КонецЕсли;
			
			Если ЛьготныйТариф Тогда
				Тариф = 0;
				Тариф = ПолучитьТарифУслугиДляРасчетаЛьгот(ТекущийЛС, ТекущаяУслуга, Тариф);
				Если Тариф > 0 И РасходПоВидамТарифов.Количество() > 0 Тогда
					СтрокаРасходов.ТарифДневной = Тариф;
					СтрокаРасходов.ТарифНочной  = Тариф;
					СтрокаРасходов.ТарифПиковый = Тариф;
					СтрокаРасходов.ТарифОбщий   = Тариф;
				КонецЕсли;
			КонецЕсли;
			
			Если РасходПоВидамТарифов.Количество() > 0 Тогда
				СуммаУслуги = СтрокаРасходов.РасходДневной * СтрокаРасходов.ТарифДневной
				            + СтрокаРасходов.РасходНочной * СтрокаРасходов.ТарифНочной
				            + СтрокаРасходов.РасходПиковый * СтрокаРасходов.ТарифПиковый
				            + СтрокаРасходов.РасходОбщий * СтрокаРасходов.ТарифОбщий;
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПлощади Тогда
			КоличествоУслуги = КВП_ПолучитьНачислениеНаОбъектПоУслугеПлощадь(Дата, ТекущийЛС, ТекущаяУслуга.ВидПлощади, Ложь);
			
		ИначеЕсли СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоКоличествуЖильцов Тогда
			
			// До 09.2016 в старом алгоритме весь расчет выполнялся только от количества проживающих жильцов, 
			// не принимая во внимание настройку учетной политики вида жильцов, которым предоставляются льготы.
			Если ТекущаяУслуга.ВидыЖильцов = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцов.Зарегистрированные") Тогда
				КоличествоУслуги = КоличествоЗарегистрированных;
			Иначе
				КоличествоУслуги = КоличествоПроживающих;
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоНормамПотребления Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Период",           Дата);
			СтруктураПараметров.Вставить("Объект",           ТекущийЛС);
			СтруктураПараметров.Вставить("Услуга",           Услуга);
			СтруктураПараметров.Вставить("Организация",      Организация);
			СтруктураПараметров.Вставить("НормаПотребления", НормаПотребления);
			
			КоличествоУслуги = КВП_ПолучитьКоличествоНормыПотребленияПоОбъекту(СтруктураПараметров);
			
		ИначеЕсли СпособРасчета = Перечисления.КВП_СпособыРасчета.ФиксированноеНачисление Тогда
			КоличествоУслуги = 1;
			
		ИначеЕсли РасчетЛьготПоСоставнойУслуге Тогда
			// способ расчета составной услуги
			СоставнаяУслуга = ТекущаяУслуга.СоставныеУслуги[0].Услуга;
			СпособРасчетаСоставнойУслуги = СоставнаяУслуга.СпособРасчета;
			
			Если СпособРасчетаСоставнойУслуги = Перечисления.КВП_СпособыРасчета.ПоПлощади Тогда
				КоличествоУслуги = КВП_ПолучитьНачислениеНаОбъектПоУслугеПлощадь(Дата, ТекущийЛС, СоставнаяУслуга.ВидПлощади, Ложь);
			
			ИначеЕсли СпособРасчетаСоставнойУслуги = Перечисления.КВП_СпособыРасчета.ПоКоличествуЖильцов Тогда
				
				// До 09.2016 в старом алгоритме весь расчет выполнялся только от количества проживающих жильцов, 
				// не принимая во внимание настройку учетной политики вида жильцов, которым предоставляются льготы.
				Если СоставнаяУслуга.ВидыЖильцов = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцов.Зарегистрированные") Тогда
					КоличествоУслуги = КоличествоЗарегистрированных;
				Иначе
					КоличествоУслуги = КоличествоПроживающих;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не(СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика 
		 ИЛИ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме) Тогда
			
			Тариф = ПолучитьТарифПоЛицевомуСчету(Дата, Организация, ТекущаяУслуга, ТекущийЛС);
			
			Если ЛьготныйТариф Тогда
				Тариф = ПолучитьТарифУслугиДляРасчетаЛьгот(ТекущийЛС, ТекущаяУслуга, Тариф);
				СуммаУслуги = КоличествоУслуги * Тариф;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьПоНорме Тогда
			
			Если СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
			 ИЛИ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
				
				// Для услуг, рассчитываемых по показаниям приборов учета (и норме), коэффициент всегда 1.
				КоэффициентНачисленияУслуги = 1;
				
			Иначе
				
				ТаблицаНачислений = ПолучитьТаблицуНачисленийПоДаннымИзРегистраНачисления(ТекущаяУслуга, ТекущийЛС);
				
				// Скорректируем тариф по услугам, если указан вид тарифа в регистре КВП_УслугиДляРасчетаЛьготПоДругимТарифам.
				Если ЛьготныйТариф Тогда
					Для Каждого ТекСтрока Из ТаблицаНачислений Цикл
						ТекСтрока.Тариф = ПолучитьТарифУслугиДляРасчетаЛьгот(ТекСтрока.ЛицевыеСчета, ТекСтрока.Услуга,
						                                                     ТекСтрока.Тариф, ТекСтрока.СоставнаяУслуга);
						ТекСтрока.Начислено = ТекСтрока.Тариф * ТекСтрока.Количество;
					КонецЦикла;
				КонецЕсли;
				
				СуммаКНачислению = ТаблицаНачислений.Итог("Начислено");
				
				Если Окр(СуммаКНачислению, 2) = Окр(СуммаУслуги, 2) Тогда
					КоэффициентНачисленияУслуги = 1;
				Иначе
					КоэффициентНачисленияУслуги = ?(СуммаКНачислению = 0, 1, СуммаУслуги / СуммаКНачислению);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			КоэффициентНачисленияУслуги = 1;
		КонецЕсли;
		
		КоличествоНачисленныхЛьгот = 0; // количество услуги, на которое уже дали льготу
		Начислено = 0;                  // сумма льготы
		
		// Для запоминания наиболее выгодной льготы по лицевому счету.
		КоличествоПоЛьготникуЛС = 0;
		НачислениеПоЛьготникуЛС = 0;
		ЛьготнаяКатегорияПоЛьготникуЛС = Неопределено;
		
		ВыборкаЛьготников = ВыборкаСтрок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЛьготников.Следующий() Цикл
			
			// Для запоминания наиболее выгодной льготы.
			КоличествоПоЛьготнику = 0;
			НачислениеПоЛьготнику = 0;
			ЛьготнаяКатегорияПоЛьготнику = Неопределено;
			
			// Пройдем по льготным категориям данного льготника и выберем наиболее выгодную.
			ВыборкаЛьгот = ВыборкаЛьготников.Выбрать();
			Пока ВыборкаЛьгот.Следующий() Цикл
				
				Если ЕстьЛьготаНаСемью
				   И НЕ ВыборкаЛьгот.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.Семья Тогда
					Продолжить;
				КонецЕсли;
				
				РазмерСкидки              = ВыборкаЛьгот.РазмерСкидки;
				ЛицаПользующиесяЛьготами  = ВыборкаЛьгот.ЛицаПользующиесяЛьготами;
				ОграничениеПоОбъемуУслуги = ВыборкаЛьгот.ОграничениеПоОбъемуУслуги;
				ПлощадьДляОграничения     = ВыборкаЛьгот.ПлощадьДляРасчетаОграничения;
				ОграничениеПоСуммеЛьготы  = ВыборкаЛьгот.ОграничениеПоСуммеЛьготы;
				ЛьготникОтсутствует       = ВыборкаЛьгот.ЛьготникОтсутствует;
				
				КоличествоУслугиДляРасчетаЛьготы = КоличествоУслуги;
				
				// До 09.2016 в старом алгоритме весь расчет выполнялся только от количества проживающих жильцов, 
				// не принимая во внимание настройку учетной политики вида жильцов, которым предоставляются льготы.
				Если ВыборкаЛьгот.ВидЖильцовКоторымПредоставляютсяЛьготы = 
						ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Зарегистрированные") Тогда
						
					КоличествоПроживающихДляРасчетаЛьготы = КоличествоЗарегистрированных;
					
				ИначеЕсли ВыборкаЛьгот.ВидЖильцовКоторымПредоставляютсяЛьготы = 
						ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Проживающие") Тогда
						
					КоличествоПроживающихДляРасчетаЛьготы = КоличествоПроживающих;
					
				Иначе
					
					КоличествоПроживающихДляРасчетаЛьготы = КоличествоСобственников;
					
				КонецЕсли;
				
				// Проверим, возможно ли представить скидку временно отсутствующим льготникам.
				// Расчет льготы возможен при условии, что указана соответствующая настройка в настройках учетной политики ТСЖ,
				// и у текущей услуги указан один из следующих способов расчета:
				//  - по площади;
				//  - по показаниям счетчика;
				//  - с ограничением по норме (при этом у составных услуг должен быть указан способ расчета "По площади").
				НачислятьПоОтсутствующему = НачислятьПоОтсутствующимЛьготникам(ТекущаяУслуга);
				Если НачислятьПоОтсутствующему.ВыполнятьРасчет Тогда
					
					Если ЛьготникОтсутствует Тогда
						
						// Для услуг со способом расчета "По показаниям счетчика" отсутствующим льготникам 
						// скидка предоставляется только на расход по приборам учета.
						Если СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
						 ИЛИ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
							
							КоличествоУслугиДляРасчетаЛьготы = 0;
							Для Каждого СтрокаРасхода ИЗ РасходПоВидамТарифов Цикл
								КоличествоУслугиДляРасчетаЛьготы = КоличествоУслугиДляРасчетаЛьготы
								                                 + СтрокаРасхода.РасходДневной
								                                 + СтрокаРасхода.РасходНочной
								                                 + СтрокаРасхода.РасходПиковый;
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					Если ЛьготникОтсутствует Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				// Рассчитаем долю получателей льготы.
				ДоляПолучателейЛьготы       = 0;
				КоличествоПолучателейЛьготы = 1;
				Если ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.Семья Тогда
					КоличествоПолучателейЛьготы = КоличествоПроживающихДляРасчетаЛьготы;
					ДоляПолучателейЛьготы       = 1;
				ИначеЕсли ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.БлизкиеРодственники Тогда
					КоличествоПолучателейЛьготы = ВыборкаЛьгот.КоличествоБлизкихРодственников;
				КонецЕсли;
				
				Если ДоляПолучателейЛьготы = 0 Тогда
					Если ВыборкаЛьгот.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги
								= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой
					 ИЛИ ВыборкаЛьгот.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги
							= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЛьготникиПолучающиеЛьготуПоУслуге Тогда
						КоличествоЖильцов = КоличествоПолучателейЛьготы;
					Иначе //ВсеЖильцыЛицевогоСчета
						КоличествоЖильцов = КоличествоПроживающихДляРасчетаЛьготы;
					КонецЕсли;
					
					ДоляПолучателейЛьготы = ?(КоличествоЖильцов = 0, 0, КоличествоПолучателейЛьготы / КоличествоЖильцов);
				КонецЕсли;
				
				// Сумма и количество льготы по текущей категории.
				ТекНачисление = 0;
				ТекКоличество = 0;
				
				// Расчет количества льготы.
				Если НЕ ЗначениеЗаполнено(ОграничениеПоОбъемуУслуги) Тогда
					
					ТекКоличество = КоличествоУслугиДляРасчетаЛьготы * ДоляПолучателейЛьготы;
					
				ИначеЕсли ЗначениеЗаполнено(ОграничениеПоОбъемуУслуги) Тогда
					
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("Период",           Дата);
					СтруктураПараметров.Вставить("Объект",           ТекущийЛС);
					СтруктураПараметров.Вставить("Проживающий",      ВыборкаЛьготников.Льготник);
					СтруктураПараметров.Вставить("Услуга",           ТекущаяУслуга);
					СтруктураПараметров.Вставить("Организация",      Организация);
					СтруктураПараметров.Вставить("НормаПотребления", ОграничениеПоОбъемуУслуги);
					ТекКоличество = КВП_ПолучитьКоличествоНормыПотребленияПоОбъекту(СтруктураПараметров);
					
					Если ВыборкаЛьгот.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
							= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой 
					 ИЛИ ВыборкаЛьгот.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
							= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ЖильцыПользующиесяЛьготойЛьготника Тогда
						КоличествоЖильцов = КоличествоПолучателейЛьготы;
					Иначе //ВсеЖильцыЛицевогоСчета
						КоличествоЖильцов = КоличествоПроживающихДляРасчетаЛьготы;
					КонецЕсли;
					
					// Получение площади квартиры. Необходимо при преобразовании количества услуги к соцнорме площади.
					Если ЗначениеЗаполнено(ПлощадьДляОграничения) Тогда
						ТекПлощадь = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(ТекущийЛС.Адрес, ПлощадьДляОграничения,
																							ТекущийЛС, КонецМесяца(Дата));
						ТекПлощадь = ?(ТекПлощадь = 0, 1, ТекПлощадь);
						КоличествоУслугиДляРасчетаЛьготы = (КоличествоУслугиДляРасчетаЛьготы / ТекПлощадь) * ТекКоличество;
					КонецЕсли;
					
					ДоляПолучателейЛьготыОграничение = ?(КоличествоЖильцов = 0, 0, КоличествоПолучателейЛьготы / КоличествоЖильцов);
					// найдем минимум из нормы и количества, на которое уже дали льготу
					ТекКоличество = Мин(ТекКоличество * ДоляПолучателейЛьготыОграничение,
										Мин(КоличествоУслугиДляРасчетаЛьготы * ДоляПолучателейЛьготы,
											КоличествоУслугиДляРасчетаЛьготы - КоличествоНачисленныхЛьгот));
					
				КонецЕсли;
				
				// Произведем расчет суммы льготы
				Если ЗначениеЗаполнено(ОграничениеПоОбъемуУслуги) Тогда
					
					Если РасчетЛьготПоСоставнойУслуге Тогда
						
						// Расчет составной услуги.
						Индекс = 0;
						РасчетноеКоличество = ТекКоличество;
						Пока РасчетноеКоличество > 0 Цикл
							Если Индекс >= ТаблицаНачислений.Количество() Тогда
								Прервать;
							КонецЕсли;
							СтрокаНачислений = ТаблицаНачислений.Получить(Индекс);
							КоличествоСоставнойУслуги = Мин(СтрокаНачислений.Количество, РасчетноеКоличество);
							ТекНачисление = ТекНачисление + (КоличествоСоставнойУслуги * СтрокаНачислений.Тариф) * РазмерСкидки / 100;
							РасчетноеКоличество = РасчетноеКоличество - КоличествоСоставнойУслуги;
							Индекс = Индекс + 1;
						КонецЦикла;
						
						РасчетноеКоличество = ТекКоличество;
						
						// Обработаем таблицу начислений составной услуги с учетом уже начисленных льгот.
						Индекс = 0;
						Пока РасчетноеКоличество > 0 Цикл
							Если Индекс >= ТаблицаНачислений.Количество() Тогда
								Прервать;
							КонецЕсли;
							СтрокаНачислений = ТаблицаНачислений.Получить(Индекс);
							
							КорректируемоеКоличество = Мин(СтрокаНачислений.Количество, РасчетноеКоличество);
							СтрокаНачислений.Количество = СтрокаНачислений.Количество - КорректируемоеКоличество;
							РасчетноеКоличество = РасчетноеКоличество - КорректируемоеКоличество;
							
							Индекс = Индекс + 1;
						КонецЦикла;
						
					ИначеЕсли СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
						  ИЛИ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
						
						РасчетноеКоличество = ТекКоличество;
						
						Для Каждого СтрокаРасхода ИЗ РасходПоВидамТарифов Цикл
							
							КоличествоТекущейУслуги = Макс(Мин(РасчетноеКоличество, КоличествоУслугиДляРасчетаЛьготы), 0);
							
							МассивПоказаний = Новый Массив;
							МассивПоказаний.Добавить(СтрокаРасхода.РасходДневной);   // дневной расход
							МассивПоказаний.Добавить(СтрокаРасхода.РасходНочной);    // ночной расход
							МассивПоказаний.Добавить(СтрокаРасхода.РасходПиковый);   // пиковый расход
							
							Если НЕ ЛьготникОтсутствует Тогда
								МассивПоказаний.Добавить(СтрокаРасхода.РасходОбщий); // расход по общему тарифу
							КонецЕсли;
							
							// Решили, что в старом алгоритме расчета льгот распределение ограничения
							// по объему услуги оставить пропорционально расходам по тарифам.
							//
							// Для информации:
							// В новом алгоритме ограничение по объему услуги выполняется в порядке 
							// уменьшения размера тарифа.
							// Актуально для Москвы и Московской области.
							// Более подробно см. в процедуре ПолучитьТаблицуНачисленийПоДаннымИзРегистраНачисления.
							
							// распределим количество расхода в разрезе тарифов
							КоличествоЛьготы = УПЖКХ_ТиповыеМетодыКлиентСервер.РаспределитьПропорционально(КоличествоТекущейУслуги, МассивПоказаний, 6);
							
							Если ЗначениеЗаполнено(КоличествоЛьготы) Тогда
								
								СуммаНачисления = КоличествоЛьготы[0] * СтрокаРасхода.ТарифДневной
								                + КоличествоЛьготы[1] * СтрокаРасхода.ТарифНочной
								                + КоличествоЛьготы[2] * СтрокаРасхода.ТарифПиковый
								                + ?(НЕ ЛьготникОтсутствует, КоличествоЛьготы[3] * СтрокаРасхода.ТарифОбщий, 0);
								
								ТекНачисление = ТекНачисление + Окр(СуммаНачисления * РазмерСкидки / 100, 2);
								РасчетноеКоличество = РасчетноеКоличество - КоличествоТекущейУслуги;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						ТекНачисление = (ТекКоличество * Тариф) * РазмерСкидки / 100;
					КонецЕсли;
						
				Иначе
					ТекНачисление = СуммаУслуги * ДоляПолучателейЛьготы * РазмерСкидки / 100;
				КонецЕсли;
				
				// Ограничение по сумме льготы для текущей льготной категории.
				Если ЗначениеЗаполнено(ОграничениеПоСуммеЛьготы) Тогда
					ТекНачисление = МИН(ТекНачисление, ОграничениеПоСуммеЛьготы);
				КонецЕсли;
				
				// Запомним наиболее выгодную льготу.
				Если ТекНачисление > НачислениеПоЛьготнику Тогда
					НачислениеПоЛьготнику = Окр(ТекНачисление, 2);
					КоличествоПоЛьготнику = ТекКоличество;
					ЛьготнаяКатегорияПоЛьготнику = ВыборкаЛьгот.ЛьготнаяКатегория;
				КонецЕсли;
				
			КонецЦикла; // цикл по льготам текущего льготника
			
			// Запомним наиболее выгодную льготу.
			Если НачислениеПоЛьготнику > НачислениеПоЛьготникуЛС Тогда
				НачислениеПоЛьготникуЛС = НачислениеПоЛьготнику;
				КоличествоПоЛьготникуЛС = КоличествоПоЛьготнику;
				ЛьготнаяКатегорияПоЛьготникуЛС = ЛьготнаяКатегорияПоЛьготнику;
			КонецЕсли;
			
			Если Не ЕстьЛьготаНаСемью Тогда
				Если НачислениеПоЛьготникуЛС > 0 Тогда
					Начислено = Начислено + НачислениеПоЛьготнику;
					ДобавитьСтрокуРасшифровкиЛьготы(СтрокаЛьготы, НачислениеПоЛьготнику * КоэффициентНачисленияУслуги,
					ЛьготнаяКатегорияПоЛьготнику, УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(КоличествоПоЛьготнику, мТочностьОбъемаНачислений));
					КоличествоНачисленныхЛьгот = КоличествоНачисленныхЛьгот + УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(КоличествоПоЛьготнику, мТочностьОбъемаНачислений);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла; // цикл по льготникам текущего л/с
		
		Если ЕстьЛьготаНаСемью Тогда
			Если НачислениеПоЛьготникуЛС > 0 Тогда
				Начислено = Начислено + НачислениеПоЛьготникуЛС;
				ДобавитьСтрокуРасшифровкиЛьготы(СтрокаЛьготы, НачислениеПоЛьготникуЛС * КоэффициентНачисленияУслуги,
				ЛьготнаяКатегорияПоЛьготникуЛС, УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(КоличествоПоЛьготникуЛС, мТочностьОбъемаНачислений));
				КоличествоНачисленныхЛьгот = КоличествоНачисленныхЛьгот + УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(КоличествоПоЛьготникуЛС, мТочностьОбъемаНачислений);
			КонецЕсли;
		КонецЕсли;
		
		// Для составной услуги пересчет на количество дней начисления
		// выполняется при расчете составной услуги.
		Если РасчетЛьготПоСоставнойУслуге Тогда
			СтрокаЛьготы.Начислено = Начислено * КоэффициентНачисленияУслуги;
		Иначе
			СтрокаЛьготы.Начислено = Начислено * мКоэффициентКоличестваДней * КоэффициентНачисленияУслуги;
		КонецЕсли;
		
	КонецЦикла; // цикл по строкам ТЧ
	
	РасшифровкаЛьгот.Свернуть("ЛицевыеСчета, Услуга, ЛьготнаяКатегория, Количество", "Начислено");
	
КонецПроцедуры // РассчитатьЛьготыСтарыйАлгоритм()

// Возвращает текст запроса для расчета льгот по старому алгоритму.
//
Функция ПолучитьТекстЗапроса()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Проживающий,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец.Адрес КАК Помещение,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория КАК ЛьготнаяКатегория
	|ПОМЕСТИТЬ врСписокЛьготников
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&Дата,
	|			Проживающий.Владелец В (&ЛицевыеСчета)
	|				И ДатаИзменения <= &Дата) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение КАК Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует КАК Действует
	|ПОМЕСТИТЬ врСписокСобственников
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&Дата,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					ДействующиеЛС.ЛицевойСчет.Адрес
	|				ИЗ
	|					ДействующиеЛС КАК ДействующиеЛС)) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Жильцы.Владелец КАК ЛицевойСчет,
	|	Жильцы.Ссылка КАК Жилец
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК Жильцы
	|ГДЕ
	|	Жильцы.Владелец В
	|			(ВЫБРАТЬ
	|				ДействующиеЛС.ЛицевойСчет
	|			ИЗ
	|				ДействующиеЛС КАК ДействующиеЛС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Жильцы.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Жильцы.Жилец) КАК КоличествоСобственников
	|ПОМЕСТИТЬ врТаблицаКоличествСобственников
	|ИЗ
	|	втЖильцы КАК Жильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врСписокСобственников КАК врСписокСобственников
	|		ПО Жильцы.ЛицевойСчет.Адрес = врСписокСобственников.Помещение
	|			И Жильцы.Жилец.ФизЛицо = врСписокСобственников.Собственник
	|
	|СГРУППИРОВАТЬ ПО
	|	Жильцы.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	врСписокЛьготников.Проживающий КАК Проживающий,
	|	врСписокЛьготников.ЛицевойСчет КАК ЛицевойСчет,
	|	врСписокЛьготников.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	ЕСТЬNULL(УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает, ЛОЖЬ) КАК Проживает,
	|	ЕСТЬNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован, ЛОЖЬ) КАК Зарегистрирован,
	|	ЕСТЬNULL(врСписокСобственников.Действует, ЛОЖЬ) КАК Собственник
	|ПОМЕСТИТЬ СписокЛьготников
	|ИЗ
	|	врСписокЛьготников КАК врСписокЛьготников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|				,
	|				ЛицевойСчет В (&ЛицевыеСчета)
	|					И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|		ПО врСписокЛьготников.Проживающий = УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|				,
	|				ЛицевойСчет В (&ЛицевыеСчета)
	|					И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПО врСписокЛьготников.Проживающий = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСписокСобственников КАК врСписокСобственников
	|		ПО врСписокЛьготников.Помещение = врСписокСобственников.Помещение
	|			И врСписокЛьготников.Проживающий.ФизЛицо = врСписокСобственников.Собственник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЖильцы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врСписокЛьготников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врСписокСобственников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(врТаблицаКоличеств.ЛицевойСчет, врТаблицаКоличествСобственников.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(врТаблицаКоличеств.КоличествоПроживающих, 0) КАК КоличествоПроживающих,
	|	ЕСТЬNULL(врТаблицаКоличеств.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных,
	|	ЕСТЬNULL(врТаблицаКоличествСобственников.КоличествоСобственников, 0) КАК КоличествоСобственников
	|ПОМЕСТИТЬ СписокПроживающих
	|ИЗ
	|	врТаблицаКоличеств КАК врТаблицаКоличеств
	|		ПОЛНОЕ СОЕДИНЕНИЕ врТаблицаКоличествСобственников КАК врТаблицаКоличествСобственников
	|		ПО врТаблицаКоличеств.ЛицевойСчет = врТаблицаКоличествСобственников.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоОсновное КАК Льготник,
	|	КОЛИЧЕСТВО(УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное) КАК КоличествоБлизкихРодственников
	|ПОМЕСТИТЬ СписокБлизкихРодственников
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(&Дата, ) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|				,
	|				ЛицевойСчет В (&ЛицевыеСчета)
	|					И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|		ПО (УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства.БлизкоеРодство)
	|			И УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное = УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец.ФизЛицо
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоОсновное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РасчетЛьготЛьготы.Услуга КАК Услуга,
	|	КВП_РасчетЛьготЛьготы.ЛицевыеСчета КАК ЛицевыеСчета,
	|	КВП_РасчетЛьготЛьготы.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВрЛьготы
	|ИЗ
	|	Документ.КВП_РасчетЛьгот.Льготы КАК КВП_РасчетЛьготЛьготы
	|ГДЕ
	|	КВП_РасчетЛьготЛьготы.Ссылка = &ТекущийДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрЛьготы.Услуга КАК Услуга,
	|	ВрЛьготы.ЛицевыеСчета КАК ЛицевыеСчета,
	|	ВрЛьготы.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(НастройкиРасчетаЛьготПоУслугам.ВидЖильцовКоторымПредоставляютсяЛьготы, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Зарегистрированные)) КАК ВидЖильцовКоторымПредоставляютсяЛьготы,
	|	ЕСТЬNULL(НастройкиРасчетаЛьготПоУслугам.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой)) КАК ТипЖильцовДляДеленияОбъемаНачисленнойУслуги,
	|	ЕСТЬNULL(НастройкиРасчетаЛьготПоУслугам.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой)) КАК ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
	|ПОМЕСТИТЬ Льготы
	|ИЗ
	|	ВрЛьготы КАК ВрЛьготы
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиРасчетаЛьготПоУслугам КАК НастройкиРасчетаЛьготПоУслугам
	|		ПО ВрЛьготы.Услуга = НастройкиРасчетаЛьготПоУслугам.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛьготы.НомерСтроки КАК НомерСтроки,
	|	втЛьготы.ЛицевыеСчета КАК ЛицевыеСчета,
	|	втЛьготы.Услуга КАК Услуга,
	|	втЛьготы.ВидЖильцовКоторымПредоставляютсяЛьготы КАК ВидЖильцовКоторымПредоставляютсяЛьготы,
	|	втЛьготы.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги КАК ТипЖильцовДляДеленияОбъемаНачисленнойУслуги,
	|	втЛьготы.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы КАК ТипЖильцовДляДеленияОбъемаОграниченияЛьготы,
	|	СписокЛьготников.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	СписокЛьготников.Проживающий КАК Льготник,
	|	ВЫБОР
	|		КОГДА втЛьготы.ВидЖильцовКоторымПредоставляютсяЛьготы = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Зарегистрированные)
	|			ТОГДА &УчитыватьОтсутствующихЛьготников
	|					И СписокЛьготников.Зарегистрирован
	|					И НЕ СписокЛьготников.Проживает
	|		КОГДА втЛьготы.ВидЖильцовКоторымПредоставляютсяЛьготы = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Проживающие)
	|			ТОГДА &УчитыватьОтсутствующихЛьготников
	|					И СписокЛьготников.Проживает
	|					И НЕ СписокЛьготников.Зарегистрирован
	|		ИНАЧЕ &УчитыватьОтсутствующихЛьготников
	|				И НЕ СписокЛьготников.Проживает
	|				И НЕ СписокЛьготников.Зарегистрирован
	|	КОНЕЦ КАК ЛьготникОтсутствует,
	|	СписокПроживающих.КоличествоПроживающих КАК КоличествоПроживающих,
	|	СписокПроживающих.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	СписокПроживающих.КоличествоСобственников КАК КоличествоСобственников,
	|	ЕСТЬNULL(СписокБлизкихРодственников.КоличествоБлизкихРодственников, 0) + 1 КАК КоличествоБлизкихРодственников
	|ПОМЕСТИТЬ ТаблицаРасчета
	|ИЗ
	|	Льготы КАК втЛьготы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокПроживающих КАК СписокПроживающих
	|		ПО втЛьготы.ЛицевыеСчета = СписокПроживающих.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокЛьготников КАК СписокЛьготников
	|			ЛЕВОЕ СОЕДИНЕНИЕ СписокБлизкихРодственников КАК СписокБлизкихРодственников
	|			ПО СписокЛьготников.Проживающий.ФизЛицо = СписокБлизкихРодственников.Льготник
	|		ПО втЛьготы.ЛицевыеСчета = СписокЛьготников.ЛицевойСчет
	|			И (ВЫБОР
	|				КОГДА втЛьготы.ВидЖильцовКоторымПредоставляютсяЛьготы = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Зарегистрированные)
	|					ТОГДА СписокЛьготников.Зарегистрирован
	|				КОГДА втЛьготы.ВидЖильцовКоторымПредоставляютсяЛьготы = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Проживающие)
	|					ТОГДА СписокЛьготников.Проживает
	|				ИНАЧЕ СписокЛьготников.Собственник
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врТаблицаКоличествСобственников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВрЛьготы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Льготы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокЛьготников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокПроживающих
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокБлизкихРодственников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_СкидкиСрезПоследних.Услуга КАК Услуга,
	|	КВП_СкидкиСрезПоследних.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	КВП_СкидкиСрезПоследних.РазмерСкидки КАК РазмерСкидки,
	|	КВП_СкидкиСрезПоследних.ЛицаПользующиесяЛьготами КАК ЛицаПользующиесяЛьготами,
	|	КВП_СкидкиСрезПоследних.ОграничениеПоОбъемуУслуги КАК ОграничениеПоОбъемуУслуги,
	|	КВП_СкидкиСрезПоследних.ОграничениеПоСуммеЛьготы КАК ОграничениеПоСуммеЛьготы,
	|	КВП_СкидкиСрезПоследних.ПлощадьДляРасчетаОграничения КАК ПлощадьДляРасчетаОграничения
	|ПОМЕСТИТЬ РазмерыСкидок
	|ИЗ
	|	РегистрСведений.КВП_Скидки.СрезПоследних(
	|			&Дата,
	|			ЛьготнаяКатегория В
	|				(ВЫБРАТЬ
	|					ТаблицаРасчета.ЛьготнаяКатегория
	|				ИЗ
	|					ТаблицаРасчета)) КАК КВП_СкидкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.Услуга КАК Услуга,
	|	УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.ОграничениеПоОбъемуУслуги КАК ОграничениеПоОбъемуУслуги
	|ПОМЕСТИТЬ ТаблицаИндивидуальныхСкидок
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот КАК УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот
	|ГДЕ
	|	УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.ЛицевойСчет В(&ЛицевыеСчета)
	|	И УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.ЛьготнаяКатегория В
	|			(ВЫБРАТЬ
	|				ТаблицаРасчета.ЛьготнаяКатегория
	|			ИЗ
	|				ТаблицаРасчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасчета.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасчета.ЛицевыеСчета КАК ЛицевыеСчета,
	|	ТаблицаРасчета.Услуга КАК Услуга,
	|	ТаблицаРасчета.ВидЖильцовКоторымПредоставляютсяЛьготы КАК ВидЖильцовКоторымПредоставляютсяЛьготы,
	|	ТаблицаРасчета.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги КАК ТипЖильцовДляДеленияОбъемаНачисленнойУслуги,
	|	ТаблицаРасчета.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы КАК ТипЖильцовДляДеленияОбъемаОграниченияЛьготы,
	|	ТаблицаРасчета.Льготник КАК Льготник,
	|	ТаблицаРасчета.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	ТаблицаРасчета.ЛьготникОтсутствует КАК ЛьготникОтсутствует,
	|	ТаблицаРасчета.КоличествоПроживающих КАК КоличествоПроживающих,
	|	ТаблицаРасчета.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	ТаблицаРасчета.КоличествоСобственников КАК КоличествоСобственников,
	|	ТаблицаРасчета.КоличествоБлизкихРодственников КАК КоличествоБлизкихРодственников,
	|	РазмерыСкидок.РазмерСкидки КАК РазмерСкидки,
	|	РазмерыСкидок.ЛицаПользующиесяЛьготами КАК ЛицаПользующиесяЛьготами,
	|	РазмерыСкидок.ОграничениеПоОбъемуУслуги КАК ОграничениеПоОбъемуУслуги,
	|	РазмерыСкидок.ОграничениеПоСуммеЛьготы КАК ОграничениеПоСуммеЛьготы,
	|	РазмерыСкидок.ПлощадьДляРасчетаОграничения КАК ПлощадьДляРасчетаОграничения
	|ПОМЕСТИТЬ ВремТаблицаРасчетаИСкидок
	|ИЗ
	|	ТаблицаРасчета КАК ТаблицаРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазмерыСкидок КАК РазмерыСкидок
	|		ПО ТаблицаРасчета.Услуга = РазмерыСкидок.Услуга
	|			И ТаблицаРасчета.ЛьготнаяКатегория = РазмерыСкидок.ЛьготнаяКатегория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасчета.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасчета.ЛицевыеСчета КАК ЛицевыеСчета,
	|	ТаблицаРасчета.Услуга КАК Услуга,
	|	ТаблицаРасчета.ВидЖильцовКоторымПредоставляютсяЛьготы КАК ВидЖильцовКоторымПредоставляютсяЛьготы,
	|	ТаблицаРасчета.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги КАК ТипЖильцовДляДеленияОбъемаНачисленнойУслуги,
	|	ТаблицаРасчета.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы КАК ТипЖильцовДляДеленияОбъемаОграниченияЛьготы,
	|	ТаблицаРасчета.Льготник КАК Льготник,
	|	ТаблицаРасчета.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	ТаблицаРасчета.ЛьготникОтсутствует КАК ЛьготникОтсутствует,
	|	ТаблицаРасчета.КоличествоПроживающих КАК КоличествоПроживающих,
	|	ТаблицаРасчета.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	ТаблицаРасчета.КоличествоСобственников КАК КоличествоСобственников,
	|	ТаблицаРасчета.КоличествоБлизкихРодственников КАК КоличествоБлизкихРодственников,
	|	ТаблицаРасчета.РазмерСкидки КАК РазмерСкидки,
	|	ТаблицаРасчета.ЛицаПользующиесяЛьготами КАК ЛицаПользующиесяЛьготами,
	|	ЕСТЬNULL(ТаблицаИндивидуальныхСкидок.ОграничениеПоОбъемуУслуги, ТаблицаРасчета.ОграничениеПоОбъемуУслуги) КАК ОграничениеПоОбъемуУслуги,
	|	ТаблицаРасчета.ОграничениеПоСуммеЛьготы КАК ОграничениеПоСуммеЛьготы,
	|	ТаблицаРасчета.ПлощадьДляРасчетаОграничения КАК ПлощадьДляРасчетаОграничения
	|ПОМЕСТИТЬ ТаблицаРасчетаИСкидок
	|ИЗ
	|	ВремТаблицаРасчетаИСкидок КАК ТаблицаРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндивидуальныхСкидок КАК ТаблицаИндивидуальныхСкидок
	|		ПО ТаблицаРасчета.Услуга = ТаблицаИндивидуальныхСкидок.Услуга
	|			И ТаблицаРасчета.ЛьготнаяКатегория = ТаблицаИндивидуальныхСкидок.ЛьготнаяКатегория
	|			И ТаблицаРасчета.ЛицевыеСчета = ТаблицаИндивидуальныхСкидок.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РазмерыСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТаблицаРасчетаИСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаИндивидуальныхСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаРасчетаИСкидок.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасчетаИСкидок.ЛицевыеСчета КАК ЛицевыеСчета,
	|	ТаблицаРасчетаИСкидок.Услуга КАК Услуга,
	|	ТаблицаРасчетаИСкидок.ВидЖильцовКоторымПредоставляютсяЛьготы КАК ВидЖильцовКоторымПредоставляютсяЛьготы,
	|	ТаблицаРасчетаИСкидок.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги КАК ТипЖильцовДляДеленияОбъемаНачисленнойУслуги,
	|	ТаблицаРасчетаИСкидок.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы КАК ТипЖильцовДляДеленияОбъемаОграниченияЛьготы,
	|	ТаблицаРасчетаИСкидок.Льготник КАК Льготник,
	|	ТаблицаРасчетаИСкидок.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	ТаблицаРасчетаИСкидок.ЛьготникОтсутствует КАК ЛьготникОтсутствует,
	|	ТаблицаРасчетаИСкидок.КоличествоПроживающих КАК КоличествоПроживающих,
	|	ТаблицаРасчетаИСкидок.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	ТаблицаРасчетаИСкидок.КоличествоСобственников КАК КоличествоСобственников,
	|	ТаблицаРасчетаИСкидок.КоличествоБлизкихРодственников КАК КоличествоБлизкихРодственников,
	|	ТаблицаРасчетаИСкидок.РазмерСкидки КАК РазмерСкидки,
	|	ТаблицаРасчетаИСкидок.ЛицаПользующиесяЛьготами КАК ЛицаПользующиесяЛьготами,
	|	ТаблицаРасчетаИСкидок.ОграничениеПоОбъемуУслуги КАК ОграничениеПоОбъемуУслуги,
	|	ТаблицаРасчетаИСкидок.ОграничениеПоСуммеЛьготы КАК ОграничениеПоСуммеЛьготы,
	|	ТаблицаРасчетаИСкидок.ПлощадьДляРасчетаОграничения КАК ПлощадьДляРасчетаОграничения,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК НормаПотребления
	|ИЗ
	|	ТаблицаРасчетаИСкидок КАК ТаблицаРасчетаИСкидок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|				&Дата,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						ТаблицаРасчетаИСкидок.ЛицевыеСчета
	|					ИЗ
	|						ТаблицаРасчетаИСкидок)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|		ПО ТаблицаРасчетаИСкидок.Услуга = КВП_НормыПотребленияУслугЛССрезПоследних.Услуга
	|			И ТаблицаРасчетаИСкидок.ЛицевыеСчета = КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ЛьготникОтсутствует
	|				ТОГДА Льготник
	|		КОНЕЦ) КАК ЛьготникОтсутствует
	|ПО
	|	НомерСтроки,
	|	Льготник";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса()

// Возвращает текст запроса для заполнения табличной части по старому алгоритму.
//
Функция ПолучитьТекстЗапросаНачислений()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Жильцы.Владелец КАК ЛицевойСчет,
	|	Жильцы.Ссылка.ФизЛицо КАК ФизЛицо,
	|	Жильцы.Ссылка КАК Жилец
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК Жильцы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцы.ЛицевойСчет,
	|	втЖильцы.ФизЛицо,
	|	втЖильцы.Жилец
	|ПОМЕСТИТЬ втЖильцыСОтбором
	|ИЗ
	|	втЖильцы КАК втЖильцы
	|ГДЕ
	|	&ТекстУсловияНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник
	|ПОМЕСТИТЬ втСобственники
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&ДатаНач,
	|			Собственник В
	|				(ВЫБРАТЬ
	|					втЖильцыСОтбором.ФизЛицо
	|				ИЗ
	|					втЖильцыСОтбором)) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещений.Помещение,
	|	УПЖКХ_СобственникиПомещений.Собственник
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений КАК УПЖКХ_СобственникиПомещений
	|ГДЕ
	|	УПЖКХ_СобственникиПомещений.Собственник В
	|			(ВЫБРАТЬ
	|				втЖильцыСОтбором.ФизЛицо
	|			ИЗ
	|				втЖильцыСОтбором)
	|	И УПЖКХ_СобственникиПомещений.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И УПЖКХ_СобственникиПомещений.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Жилец
	|ПОМЕСТИТЬ врЖильцыДляОтбораЛьгот
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаНач,
	|			&ТекстУсловияНаОбъект
	|				И ДатаИзменения <= &ДатаНач) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных КАК УПЖКХ_СведенияОЗарегистрированных
	|ГДЕ
	|	&ТекстУсловияНаОбъект
	|	И УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И УПЖКХ_СведенияОЗарегистрированных.Зарегистрирован
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ДатаНач,
	|			&ТекстУсловияНаОбъект
	|				И ДатаИзменения <= &ДатаНач) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОПроживающих.Жилец
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих КАК УПЖКХ_СведенияОПроживающих
	|ГДЕ
	|	&ТекстУсловияНаОбъект
	|	И УПЖКХ_СведенияОПроживающих.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И УПЖКХ_СведенияОПроживающих.Проживает
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Жильцы.Жилец
	|ИЗ
	|	втЖильцыСОтбором КАК Жильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСобственники КАК СобственникиПомещений
	|		ПО Жильцы.ЛицевойСчет.Адрес = СобственникиПомещений.Помещение
	|			И Жильцы.Жилец.ФизЛицо = СобственникиПомещений.Собственник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет
	|ПОМЕСТИТЬ врЛицевыеСчетаСЛьготами
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&ДатаНач,
	|			Проживающий В
	|					(ВЫБРАТЬ
	|						врЖильцыДляОтбораЛьгот.Жилец
	|					ИЗ
	|						врЖильцыДляОтбораЛьгот)
	|				И ДатаИзменения <= &ДатаНач) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_НазначенныеЛьготы.Проживающий.Владелец
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
	|ГДЕ
	|	КВП_НазначенныеЛьготы.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_НазначенныеЛьготы.Проживающий В
	|			(ВЫБРАТЬ
	|				врЖильцыДляОтбораЛьгот.Жилец
	|			ИЗ
	|				врЖильцыДляОтбораЛьгот)
	|	И КВП_НазначенныеЛьготы.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевыеСчета,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК СуммаУслуги
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Период,
	|			Организация = &Организация
	|				И РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка))
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						врЛицевыеСчетаСЛьготами.ЛицевойСчет
	|					ИЗ
	|						врЛицевыеСчетаСЛьготами)
	|				И &ТекстУсловияНаУслугу) КАК УПЖКХ_НачисленияОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевыеСчета,
	|	Услуга";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаНачислений()

#КонецОбласти

#Область ПроцедурыИФункцииСтарогоМеханизмаРасчетаЛьготГотовымиЧислами

// Функция возвращает признак того, нужно ли использовать "новый" 
// расширенный алгоритм расчета льгот готовыми числами с введением "псевдожильцов".
// Функция добавлена для возможности индивидуального оперативного возврата клиентов
// к старому алгоритму расчета для готовых чисел - для этого нужно изменить
// возвращаемое значение функции на значение "Ложь".
// 
Функция ИспользоватьРасширенныйАлгоритмРасчетаЛьготГотовымиЧислами()
	
	Возврат Истина;
	
КонецФункции // ИспользоватьРасширенныйАлгоритмРасчетаЛьготГотовымиЧислами()

// Процедура выполняет расчет льгот для случая, когда установлена настройка УказыватьКоличествоПрожИЗарегЧислами.
Процедура ПроизвестиРасчетЛьготДляГотовыхЧисел(ТаблицаНачислений, ТаблицаЛьготников, ТаблицаИзмененийЖильцов,
	                                           ТаблицаСкидок, ТаблицаБлизкихРодственниковОбщая)
	
	// ДЛЯ РАСЧЕТА СВЕРХОБЪЕМНЫХ ЛЬГОТ +
	
	// Вспомогательная таблица, которая хранить сведения об уже предоставленных льготах
	ТаблицаПредоставленныхЛьгот = Новый ТаблицаЗначений;
	ТаблицаПредоставленныхЛьгот.Колонки.Добавить("Льготник");
	ТаблицаПредоставленныхЛьгот.Колонки.Добавить("ЛьготнаяКатегория");
	
	// ДЛЯ РАСЧЕТА СВЕРХОБЪЕМНЫХ ЛЬГОТ -
	
	// Вспомогательная таблица, которая хранит объемы льгот,
	// предоставленные близким родственникам льготников для расчета СВЕРХОБЪЕМНЫХ ЛЬГОТ.
	// В качестве тарифа объемов льгот берется именно льготный тариф, соответственно
	// поиск предоставленных льгот для расчета сверхобъема выполняется по льготному тарифу.
	ТаблицаОбъемовЛьготПоПолучателям = Новый ТаблицаЗначений;
	ТаблицаОбъемовЛьготПоПолучателям.Колонки.Добавить("ПользующийсяЛьготой");
	ТаблицаОбъемовЛьготПоПолучателям.Колонки.Добавить("Тариф");
	ТаблицаОбъемовЛьготПоПолучателям.Колонки.Добавить("КоличествоЛьготы");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДляГотовыхЧисел();
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("ТаблицаЛьготников", ТаблицаЛьготников);
	Запрос.УстановитьПараметр("ТаблицаСкидок",     ТаблицаСкидок);
	
	ВыборкаЛС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Определим пустую структуру для дальнейшего определения площади, с которой рассчитана льгота.
	СтруктураДляОпределенияЛьготнойПлощади = Новый Структура;
	
	Пока ВыборкаЛС.Следующий() Цикл
		
		ВыборкаУслуг = ВыборкаЛС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаУслуг.Следующий() Цикл
			
			// Получим настройки расчета льгот по услуге.
			НастройкиРасчетаЛьготПоУслуге = мНастройкиРасчетаЛьгот.НайтиСтроки(Новый Структура("Услуга", ВыборкаУслуг.Услуга));
			Если НастройкиРасчетаЛьготПоУслуге.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НастройкиРасчетаЛьготПоУслуге = НастройкиРасчетаЛьготПоУслуге[0];
			ОпределитьПризнакиРасчетаЛьготПоВидамЖильцовПоУслуге(НастройкиРасчетаЛьготПоУслуге);
			
			// Отбираем данные из таблицы ТаблицаБлизкихРодственниковОбщая с учетом настройки 
			// "ВидЖильцовКоторымПредоставляютсяЛьготы" текущей услуги.
			//
			// Для информации: 
			// Сразу отсечь близких родственников по признаку зарегистрирован / проживает / собственник
			// не можем, т.к. настройки расчета льгот перенесены на уровень услуг.
			// Т.е. для каждой отдельной услуги настройки могут быть разными.
			// Ранее отбор производился на этапе подготовки таблицы близких родственников с учетом единой 
			// для всех услуг настройки учетной политики "РасчетЛьготПоЗарегистрированным".
			ПараметрОтбора = ?(мЛьготуПредоставлятьЗарегистрированнымЖильцам, "Зарегистрирован", 
								?(мЛьготуПредоставлятьПроживающимЖильцам,     "Проживает",
																			  "Собственник"));
			МассивСтрок    = ТаблицаБлизкихРодственниковОбщая.НайтиСтроки(Новый Структура(ПараметрОтбора, Истина));
			ТаблицаБлизкихРодственников = ТаблицаБлизкихРодственниковОбщая.Скопировать(МассивСтрок);
			
			// проверим, имеется ли льгота на семью
			ИмеетсяЛьготаНаСемью = ИмеетсяЛьготаНаСемью(ВыборкаЛС.ЛицевойСчет, ВыборкаУслуг.Услуга,
														ТаблицаЛьготников, ТаблицаСкидок);
			
			// проверим, можем ли мы начислять льготу по данной услуге исходя из настройки в УП
			НачислятьПоОтсутствующему = НачислятьПоОтсутствующимЛьготникам(ВыборкаУслуг.Услуга);
			
			// 0 - для услуг по ПУ, 1 - для прочих услуг.
			СпособУчетаКоэффициентаПериода = ПолучитьСпособУчетаКоэффициентаПериода(ВыборкаУслуг.Услуга);
			
			// Для каждого льготника получим периоды изменения в периоде расчета исходя из данных
			// таблицы изменения жильцов, льготников, начислений.
			Периоды = ПолучитьПодпериодыРасчета(ТаблицаЛьготников, ТаблицаИзмененийЖильцов, ТаблицаНачислений,
			                                    ВыборкаЛС.ЛицевойСчет, ВыборкаУслуг.Услуга);
			
			РазбитьНачисленияПоПериодамРасчета(ТаблицаНачислений, Периоды, ВыборкаЛС.ЛицевойСчет, ВыборкаУслуг.Услуга, СпособУчетаКоэффициентаПериода);
			
			Для Индекс = 0 По Периоды.Количество() - 1 Цикл
				
				// Для запоминания наиболее выгодной льготы по лицевому счету.
				НачислениеПоЛС = 0;
				ТаблицаПоЛС = РасчетЛьгот.ВыгрузитьКолонки();
				
				// Добавим в таблицу значений "ТаблицаПоЛС" числовые колонки "ИсходнаяСуммаЛьготы" и "ИсходныйОбъемЛьготы".
				// Данные колонки нужны для того, чтобы равномерно распределять между льготниками сумму и объем льготы в случае,
				// когда по разным льготникам возможна одинаковая скидка на семью. В этом случае необходимо распределить
				// сумму и объем льготы пропорционально между льготниками (ранее весь объем и сумма "семейной" льготы
				// распределялись на одного из льготников случайным образом).
				ТаблицаПоЛС.Колонки.Добавить("ИсходнаяСуммаЛьготы",     Новый ОписаниеТипов("Число"));
				ТаблицаПоЛС.Колонки.Добавить("ИсходныйОбъемЛьготы",     Новый ОписаниеТипов("Число"));
				
				ТаблицаПредоставленныхЛьгот.Очистить();
				ТаблицаОбъемовЛьготПоПолучателям.Очистить();
				
				КоличествоЖильцовНаЛС = ПолучитьКоличествоЖильцов(ТаблицаИзмененийЖильцов, ВыборкаЛС.ЛицевойСчет, 
																  Периоды[Индекс].Период);
				
				// Для случая, когда объем льготы делится на количество получателей и все льготники имеют льготу только на себя
				// в качестве количества получателей льготы возьмем количество льготников.
				// Для случая, когда есть льгота на семью или на близких родственников количество получателей льготы будет
				// рассчитываться только в рамках льготника и его категории, а значит расчет будет потенциально неверным,
				// в таких случаях необходимо переходить на полный учет количества жильцов.
				ПолучателямиЛьготЯвляютсяСамиЛьготники = Ложь;
				КоличествоПолучателейЛьготНаСебя = 0;
				
				// Если нет льготы на семью тогда определяем, все ли льготники получают льготу на себя.
				Если Не ИмеетсяЛьготаНаСемью Тогда
					
					УВсехЛьготниковЛьготаНаСебя = Истина;
					
					// Обход льгтников.
					ВыборкаЛьготниковДляОпределенияКоличестваПолучателей = ВыборкаУслуг.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаЛьготниковДляОпределенияКоличестваПолучателей.Следующий() Цикл
						
						ЛьготникПолучитЛьготуНаСебя = Ложь;
						
						// Обход льгот.
						ВыборкаДеталейДляОпределенияКоличестваПолучателей = ВыборкаЛьготниковДляОпределенияКоличестваПолучателей.Выбрать();
						Пока ВыборкаДеталейДляОпределенияКоличестваПолучателей.Следующий() Цикл
							
							// Если льгота не действует, то ее можно не рассматривать.
							Если ЛьготаДействует(ТаблицаЛьготников, ВыборкаЛС.ЛицевойСчет, ВыборкаДеталейДляОпределенияКоличестваПолучателей.Льготник,
							                 ВыборкаДеталейДляОпределенияКоличестваПолучателей.ЛьготнаяКатегория, Периоды[Индекс].Период) Тогда
								
								Если ВыборкаДеталейДляОпределенияКоличестваПолучателей.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.ОдинЧеловек Тогда
									ЛьготникПолучитЛьготуНаСебя = Истина;
								Иначе
									УВсехЛьготниковЛьготаНаСебя = Ложь;
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
						// Считаем количество получателей льготы на себя.
						Если ЛьготникПолучитЛьготуНаСебя Тогда
							КоличествоПолучателейЛьготНаСебя = КоличествоПолучателейЛьготНаСебя + 1;
						КонецЕсли;
						
					КонецЦикла;
					
					// Определяем, все ли льготники получают только льготу на себя.
					ПолучателямиЛьготЯвляютсяСамиЛьготники = УВсехЛьготниковЛьготаНаСебя;
					
				КонецЕсли;
				
				ВыборкаЛьготников = ВыборкаУслуг.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				КоличествоЛьгот = ВыборкаЛьготников.Количество();
				
				Пока ВыборкаЛьготников.Следующий() Цикл
					
					// Для запоминания наиболее выгодной льготы по льготнику.
					НачислениеПоЛьготнику = 0;
					ТаблицаПоЛьготнику = ТаблицаПоЛС.СкопироватьКолонки();
					
					ТекущийЛьготник = ВыборкаЛьготников.Льготник;
					
					ВыборкаДеталей = ВыборкаЛьготников.Выбрать();
					Пока ВыборкаДеталей.Следующий() Цикл
						
						Если ИмеетсяЛьготаНаСемью
						   И НЕ ВыборкаДеталей.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.Семья Тогда
							Продолжить;
						КонецЕсли;
						
						// для запоминания текущего результата расчета льготы за все периоды
						ТекТаблицаНачислений = ТаблицаПоЛьготнику.СкопироватьКолонки();
						
						// 1. Получим количество и сумму ограничения за весь месяц.
						
						// получим параметры скидки
						ПараметрыСкидки = ТаблицаСкидок.НайтиСтроки(Новый Структура("Услуга, ЛьготнаяКатегория", ВыборкаУслуг.Услуга, ВыборкаДеталей.ЛьготнаяКатегория));
						
						// заполним структуру для определения площади, с которой рассчитана льгота.
						СтруктураДляОпределенияЛьготнойПлощади.Вставить("ЛицевойСчет",                        ВыборкаЛС.ЛицевойСчет);
						СтруктураДляОпределенияЛьготнойПлощади.Вставить("Период",                             Периоды[Индекс].Период);
						СтруктураДляОпределенияЛьготнойПлощади.Вставить("ОграничениеПоОбъемуУслугиЛС",        0);
						СтруктураДляОпределенияЛьготнойПлощади.Вставить("КоличествоОграниченияМесяц",         0);
						СтруктураДляОпределенияЛьготнойПлощади.Вставить("РазмерПлощадиДляРасчетаОграничения", 0);
						
						// нет скидки - нет льготы
						КоличествоОграниченияМесяц = 0;
						СуммаОграниченияМесяц      = 0;
						Если Не ПараметрыСкидки.Количество() = 0 Тогда
							
							ПараметрыСкидки = ПараметрыСкидки.Получить(0);
							
							ОграничениеПоОбъемуУслугиЛС = УПЖКХ_РасчетЛьгот.ПолучитьИндивидуальноеОграничениеУслугиПоОбъемуНаЛицевойСчет(ВыборкаЛС.ЛицевойСчет, ВыборкаУслуг.Услуга, ВыборкаДеталей.ЛьготнаяКатегория);
							Если ОграничениеПоОбъемуУслугиЛС = Неопределено Тогда
								ОграничениеПоОбъемуУслугиЛС = ПараметрыСкидки.ОграничениеПоОбъемуУслуги;
							КонецЕсли;
							
							СтруктураДляОпределенияЛьготнойПлощади.ОграничениеПоОбъемуУслугиЛС = ОграничениеПоОбъемуУслугиЛС;
							
							// При наличии ограничения по объему, рассчитаем норму ограничения
							// и с учетом данного ограничения рассчитаем сумму начисления.
							Если ЗначениеЗаполнено(ОграничениеПоОбъемуУслугиЛС) Тогда
								
								ПараметрыОтбораДляРасчетЛьгот = Новый Структура;
								ПараметрыОтбораДляРасчетЛьгот.Вставить("ОтборПоВидуЖильцов", НастройкиРасчетаЛьготПоУслуге.ВидЖильцовКоторымПредоставляютсяЛьготы);
								
								Если НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
											= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ЖильцыПользующиесяЛьготойЛьготника Тогда
									// ОСОБЕННОСТЬ:
									// Если объем ограничения рассчитывается по кол-ву близких родственников/льготников,
									// то близкие/льготники определяются только среди получателей текущей льготы.
									
									// !!! Нужно проанализировать, как идет расчет норм ограничений по близким при готовых числах.
									//ПараметрыОтбораДляРасчетЛьгот.Вставить("ОтборСредиПолучателейЛьготы", ТаблицаПользующихсяЛьготой.ВыгрузитьКолонку("ПользующийсяЛьготой"));
									
								КонецЕсли;
								
								СтруктураПараметров = Новый Структура;
								СтруктураПараметров.Вставить("Период",           КонецМесяца(Период));
								СтруктураПараметров.Вставить("Объект",           ВыборкаЛС.ЛицевойСчет);
								СтруктураПараметров.Вставить("Проживающий",      ВыборкаДеталей.Льготник);
								СтруктураПараметров.Вставить("Услуга",           ВыборкаУслуг.Услуга);
								СтруктураПараметров.Вставить("Организация",      Организация);
								СтруктураПараметров.Вставить("НормаПотребления", ОграничениеПоОбъемуУслугиЛС);
								СтруктураПараметров.Вставить("ПараметрыОтбораДляРасчетЛьгот", ПараметрыОтбораДляРасчетЛьгот);
								
								КоличествоОграниченияМесяц = КВП_ПолучитьКоличествоНормыПотребленияПоОбъекту(СтруктураПараметров);
								
								СтруктураДляОпределенияЛьготнойПлощади.КоличествоОграниченияМесяц = КоличествоОграниченияМесяц;
								
							КонецЕсли;
							
							Если ПараметрыСкидки.ОграничениеПоСуммеЛьготы > 0 Тогда
								СуммаОграниченияМесяц = ПараметрыСкидки.ОграничениеПоСуммеЛьготы;
							КонецЕсли;
							
						КонецЕсли;
							
						// Проверим, действовала ли льгота в текущем под периоде.
						// Если льгота не действовала, то льготу начислять не будем.
						Если ЛьготаДействует(ТаблицаЛьготников, ВыборкаЛС.ЛицевойСчет, ВыборкаДеталей.Льготник,
							                 ВыборкаДеталей.ЛьготнаяКатегория, Периоды[Индекс].Период) Тогда
							
							// Проверим, присутствует ли льготник.
							// Начислить льготу сможем тогда, когда льготник зарегистрирован или проживает(зависит от настройки УП).
							// Так же существует еще одно дополнительное условие(на примере):
							// В УП стоит начислять льготу по проживающим. Льготник проживает, но не зарегистрирован.
							// Тогда необходимо проанализировать настройку "Способ учета льгот по временно отсутствующим".
							// Если данная настройка позволяет произвести расчет по услуге, то производим.
							СтруктураПрисутствия = ЛьготникПрисутствует(ТаблицаИзмененийЖильцов, ВыборкаЛС.ЛицевойСчет,
							                                            ВыборкаДеталей.Льготник, Периоды[Индекс].Период, 
																		НачислятьПоОтсутствующему);
							
							ЛьготникПрисутствует = СтруктураПрисутствия.Основное;
							Если ЛьготникПрисутствует
							   И (СтруктураПрисутствия.ДляНастройки ИЛИ НачислятьПоОтсутствующему.ВыполнятьРасчет) Тогда
								
								// Получим начало и окончание периода начисления льготы.
								НачалоПериода = Периоды[Индекс].Период;
								КонецПериода  = ?(Индекс = Периоды.Количество() - 1, КонецМесяца(Период),
								                  Периоды[Индекс + 1].Период - 1);
								
								// Коэффициент необходим для распределения сумм, пропорционально количеству дней в под периоде.
								ДнейВПериоде = ((НачалоДня(КонецПериода) - НачалоПериода) / (24 * 60 * 60) + 1);
								
								// Получим данные по начислениям для текущего под периода.
								ДанныеПоНачислениям = ПолучитьДанныеПоНачислениям(ТаблицаНачислений, ВыборкаЛС.ЛицевойСчет,
								                                                  ВыборкаУслуг.Услуга, Периоды[Индекс].Период);
								
								// Получим количество жильцов, пользующиеся льготой.
								Если ВыборкаДеталей.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.ОдинЧеловек Тогда
									ПользующиесяЛьготой = 1;
								ИначеЕсли ВыборкаДеталей.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.БлизкиеРодственники Тогда
									ПользующиесяЛьготой = ПолучитьКоличествоБлизкихРодственниковЛьготника(ТаблицаБлизкихРодственников,
									                              ВыборкаЛС.ЛицевойСчет, ВыборкаДеталей.Льготник, Периоды[Индекс].Период);
								Иначе
									ПользующиесяЛьготой = КоличествоЖильцовНаЛС;
								КонецЕсли;
								
								// Временная переменная, позволяет менять числитель при расчете 
								// доли объема начисленной услуги, приходящейся на льготника с его получателями.
								// Зависит от настроек учетной политики.
								КоличествоПолучателейЛьготыДляРасчетаОбъемаНачисления = ПользующиесяЛьготой;
								
								// Получим количество жильцов, которые имеются в текущем подпериоде.
								Если НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги
											= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой Тогда
									// В случае, если все льготники получают льготы только на себя,
									// в качестве количества получателей льготы берем количество льготников.
									Если ПолучателямиЛьготЯвляютсяСамиЛьготники Тогда
										КоличествоЖильцов = КоличествоПолучателейЛьготНаСебя;
									Иначе
										КоличествоЖильцов = ПользующиесяЛьготой;
									КонецЕсли;
								ИначеЕсли НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги
										= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчета Тогда
									КоличествоЖильцов = КоличествоЖильцовНаЛС;
								Иначе //ВсеЛьготникиПолучающиеЛьготуПоУслуге
									КоличествоПолучателейЛьготыДляРасчетаОбъемаНачисления = 1;
									КоличествоЖильцов = КоличествоЛьгот;
								КонецЕсли;
								
								// Получим количество жильцов, которые имеются в текущем подпериоде для ограничения.
								Если НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
										= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой
								ИЛИ НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
										= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ЖильцыПользующиесяЛьготойЛьготника Тогда
									КоличествоЖильцовДляОграничения = ПользующиесяЛьготой;
								Иначе // ВсеЖильцыЛицевогоСчета
									КоличествоЖильцовДляОграничения = КоличествоЖильцовНаЛС;
								КонецЕсли;
								
								///////////////////////////////////////////////////////////////////////
								
								// 2. Определим ограничения, приходящиеся на текущий период.
								Если ДанныеПоНачислениям.Количество() > 0 Тогда
									ПерваяСтрокаНачислений = ДанныеПоНачислениям[0];
								Иначе
									Продолжить;
								КонецЕсли;
								
								КоличествоОграниченияПериод = Неопределено;
								
								Если ЗначениеЗаполнено(КоличествоОграниченияМесяц) Тогда
									
									// Объем ограничения на текущей подпериод нужно брать с учетом длины периода
									// независимо от типа услуги (ПУ, не ПУ), так как объем ограничения на месяц
									// мы получаем всегда полный, поэтому в общем случае учитываем длину подпериода.
									КоэффициентПериода = ДнейВПериоде / ПерваяСтрокаНачислений.ВсегоДнейНачислено;
									КоличествоОграниченияПериод = КоличествоОграниченияМесяц * КоэффициентПериода;
									
									// Учитываем количество получателей льготы на подпериоде.
									КоличествоОграниченияПериод = КоличествоОграниченияПериод * (ПользующиесяЛьготой / ?(КоличествоЖильцовДляОграничения = 0, 1, КоличествоЖильцовДляОграничения));
									
									СтруктураДляОпределенияЛьготнойПлощади.КоличествоОграниченияМесяц = КоличествоОграниченияПериод;
									
									Если ЗначениеЗаполнено(ПараметрыСкидки.ПлощадьДляРасчетаОграничения) Тогда
										
										// Если установлена площадь для расчета ограничения, то объем ограничения на подпериоде
										// нужно пересчитать исходя из объема начисления за месяц и площади помещения.
										//
										// Например:
										// - начисление по услуге "Отопление" за месяц составило 100 гКалл;
										// - площадь помещения - 50 кв.м.;
										// - льгота в 50% действует на одного человека с 11 числа месяца
										//   на протяжении 21 дня из 31 дней в месяце с ограничением в 33 кв.м.;
										// - тогда ограничение за 21 день составит: (33 * 21 / 31) * 100 / 50 = 44,71.
										//
										// Примечание:
										// Для того, чтобы получить полным объем начисления за месяц анализируем способ
										// учета коэффициента, и если это услуга по ПУ, то заново берем все начисления за месяц,
										// в противном случае используем данные начислений на текущем подпериоде.
										
										// Получение площади помещения с учетом количества пользующихся льготой.
										ТекПлощадь = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(ВыборкаЛС.ЛицевойСчет.Адрес, ПараметрыСкидки.ПлощадьДляРасчетаОграничения, ВыборкаЛС.ЛицевойСчет, КонецМесяца(Период));
										
										ТекКоэффициент = (ДнейВПериоде / ПерваяСтрокаНачислений.ДнейНачислено);
										ТекПлощадь = ?(ТекПлощадь = 0, 1, ТекПлощадь) * (КоличествоПолучателейЛьготыДляРасчетаОбъемаНачисления / ?(КоличествоЖильцов = 0, 1, КоличествоЖильцов)) * ТекКоэффициент;
										
										СтруктураДляОпределенияЛьготнойПлощади.РазмерПлощадиДляРасчетаОграничения = МИН(ТекПлощадь, КоличествоОграниченияМесяц);
										
										// Получим полный объем начисления услуги за весь месяц,
										// приходящийся на текущих получателей льготы.
										врОбъемНачисленияЗаМесяц = 0;
										
										// А) Если способ учета коэффициента периода по ПУ, то объем начисления за весь месяц
										// нужно получить заново без отбора по текущему подпериоду. Если НЕ по ПУ, то объем начисления
										// за весь месяц уже содержится в данных начисления текущего подпериода.
										// 0 - для услуг по ПУ, 1 - для прочих услуг.
										Если СпособУчетаКоэффициентаПериода = 0 Тогда
											врДанныеПоНачислениямЗаМесяц = ПолучитьДанныеПоНачислениям(ТаблицаНачислений, ВыборкаЛС.ЛицевойСчет, ВыборкаУслуг.Услуга);
										Иначе
											врДанныеПоНачислениямЗаМесяц = ДанныеПоНачислениям;
										КонецЕсли;
										
										// Получим суммарный объем начисления за месяц.
										Для Каждого врТекСтрокаНачисления Из врДанныеПоНачислениямЗаМесяц Цикл
											врОбъемНачисленияЗаМесяц = врОбъемНачисленияЗаМесяц + врТекСтрокаНачисления.Количество * (КоличествоПолучателейЛьготыДляРасчетаОбъемаНачисления / ?(КоличествоЖильцов = 0, 1, КоличествоЖильцов)) * ТекКоэффициент;
										КонецЦикла;
										
										// Вычислим итоговый объем ограничения по формуле: [Ограничение на подпериоде] * [Объем начисления за месяц] / [Площадь помещения].
										КоличествоОграниченияПериод = КоличествоОграниченияПериод * (врОбъемНачисленияЗаМесяц / ?(ТекПлощадь = 0, 1, ТекПлощадь));
										
										// Если способ учета коэффициента периода НЕ по ПУ, то только тогда записываем количество ограничения,
										// иначе не записываем т.к. для услуг по ПУ объем не будет считаться от площади помещения,
										// а считается от показаний счетчика.
										Если СпособУчетаКоэффициентаПериода = 1 Тогда
											СтруктураДляОпределенияЛьготнойПлощади.КоличествоОграниченияМесяц = КоличествоОграниченияПериод;
										КонецЕсли;
										
										КоличествоОграниченияПериод = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(КоличествоОграниченияПериод, мТочностьОбъемаНачислений);
										
									КонецЕсли;
									
								КонецЕсли;
								
								Если ПараметрыСкидки.ОграничениеПоСуммеЛьготы > 0 Тогда
									СуммаОграниченияПериод = СуммаОграниченияМесяц * (ДнейВПериоде / ПерваяСтрокаНачислений.ВсегоДнейНачислено);
								КонецЕсли;
								
								// ДЛЯ РАСЧЕТА СВЕРХОБЪЕМНЫХ ЛЬГОТ +
								
								// Сформируем массив родственников, чтобы определить, какой объем льготы
								// предоставлен каждому из льготников.
								Если ВыборкаДеталей.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.БлизкиеРодственники
								 Или ВыборкаДеталей.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.Семья Тогда
									МассивРодственников = ПолучитьКоличествоБлизкихРодственниковЛьготника(ТаблицаБлизкихРодственников,
									                              ВыборкаЛС.ЛицевойСчет, ВыборкаДеталей.Льготник, Периоды[Индекс].Период, Истина);
								КонецЕсли;
								
								// ДЛЯ РАСЧЕТА СВЕРХОБЪЕМНЫХ ЛЬГОТ -
								
								Для Каждого ТекДанные Из ДанныеПоНачислениям Цикл
									
									// Если способ учета коэффициента периода НЕ по ПУ, то при вычислении суммы льготы учтем коэффициент периода.
									// 0 - для услуг по ПУ, 1 - для прочих услуг.
									Если СпособУчетаКоэффициентаПериода = 1 Тогда
										КоэффициентПериода = (ДнейВПериоде / ТекДанные.ВсегоДнейНачислено);
									Иначе
										КоэффициентПериода = 1;
									КонецЕсли;
									
									// получим сумму льготы, тариф и количество услуги
									СтруктураЛьготы = ПолучитьСуммуНачисленияЛьготы(ВыборкаЛС.ЛицевойСчет, ВыборкаДеталей.Льготник,
									                                                ВыборкаДеталей.ЛьготнаяКатегория, ВыборкаУслуг.Услуга,
									                                                ВыборкаДеталей, ТекДанные, КоличествоПолучателейЛьготыДляРасчетаОбъемаНачисления,
									                                                КоличествоЖильцов, КоэффициентПериода,
									                                                КоличествоОграниченияПериод, СуммаОграниченияПериод,
																					СтруктураДляОпределенияЛьготнойПлощади);
									
									Коэффициент = (ДнейВПериоде / ТекДанные.ДнейНачислено);
									
									// добавим результат вычислений в табличную часть
									ДобавитьСтрокуВТабличнуюЧасть(ВыборкаДеталей, ТекДанные, ВыборкаДеталей, Коэффициент, НачалоПериода,
									                              КонецПериода, СтруктураЛьготы, ТекТаблицаНачислений);
									
									// ДЛЯ РАСЧЕТА СВЕРХОБЪЕМНЫХ ЛЬГОТ +
									
									// Заполняем таблицу предоставленных льгот
									НоваяСтрока = ТаблицаПредоставленныхЛьгот.Добавить();
									НоваяСтрока.Льготник          = ВыборкаДеталей.Льготник;
									НоваяСтрока.ЛьготнаяКатегория = ВыборкаДеталей.ЛьготнаяКатегория;
									
									// Заполняем таблицу объемов предоставленных льгот с получателями
									Если ВыборкаДеталей.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.ОдинЧеловек
									 Или ВыборкаДеталей.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.Семья Тогда
										
										НоваяСтрока = ТаблицаОбъемовЛьготПоПолучателям.Добавить();
										НоваяСтрока.ПользующийсяЛьготой = ВыборкаДеталей.Льготник;
										НоваяСтрока.Тариф               = СтруктураЛьготы.Тариф;
										НоваяСтрока.КоличествоЛьготы    = СтруктураЛьготы.Количество;
										
									ИначеЕсли ВыборкаДеталей.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.БлизкиеРодственники Тогда
										
										Для Каждого ТекРодственник Из МассивРодственников Цикл
											
											НоваяСтрока = ТаблицаОбъемовЛьготПоПолучателям.Добавить();
											НоваяСтрока.ПользующийсяЛьготой = ТекРодственник;
											НоваяСтрока.Тариф               = СтруктураЛьготы.Тариф;
											НоваяСтрока.КоличествоЛьготы    = СтруктураЛьготы.Количество / МассивРодственников.Количество();
											
										КонецЦикла;
										
									КонецЕсли;
									
									// ДЛЯ РАСЧЕТА СВЕРХОБЪЕМНЫХ ЛЬГОТ -
									
								КонецЦикла; // цикл по данным начислений
								
							КонецЕсли;
							
						КонецЕсли;
						
						ТекНачисление = ТекТаблицаНачислений.Итог("Начислено");
						
						// Запомним наиболее выгодную льготу.
						Если ТекНачисление > НачислениеПоЛьготнику Тогда
							НачислениеПоЛьготнику = Окр(ТекНачисление, 2);
							ТаблицаПоЛьготнику = ТекТаблицаНачислений.Скопировать();
						КонецЕсли;
						
					КонецЦикла; // цикл по деталям
					
					НачислениеПоЛьготнику = ТаблицаПоЛьготнику.Итог("Начислено");
					
					// Запомним наиболее выгодную льготу.
					Если НачислениеПоЛьготнику > НачислениеПоЛС Тогда
						НачислениеПоЛС = НачислениеПоЛьготнику;
						ТаблицаПоЛС = ТаблицаПоЛьготнику.Скопировать();
						
						// Для всех строк таблицы заполним добавленные колонки исходных суммы и объема льготы,
						// чтобы потом распределить сумму и объем льготы между льготниками с одинаковыми скидками на семью.
						Для Каждого СтрокаТаблицыПоЛС Из ТаблицаПоЛС Цикл
							СтрокаТаблицыПоЛС.ИсходнаяСуммаЛьготы = СтрокаТаблицыПоЛС.Начислено;
							СтрокаТаблицыПоЛС.ИсходныйОбъемЛьготы = СтрокаТаблицыПоЛС.КоличествоЛьгота;
						КонецЦикла;
						
					ИначеЕсли НачислениеПоЛС > 0 И НачислениеПоЛьготнику = НачислениеПоЛС И ИмеетсяЛьготаНаСемью Тогда
						
						// Проверим, имеются ли по другим льготникам по какой-либо льготной категории аналогичные суммы льготы
						// для равномерного распределения объема и суммы между льготниками.
						// По текущему льготнику нас не интересуют совпадения, потому что льготник не может
						// одновременно пользоваться более одной льготой.
						врНайденныеСтроки = ТаблицаПоЛС.НайтиСтроки(Новый Структура("Льготник", ТекущийЛьготник));
						
						Если врНайденныеСтроки.Количество() = 0 Тогда
							
							// Если в таблице еще нет строки по текущему льготнику (с аналогичной суммой льготы на семью),
							// то добавим строку по текущему льготнику, заполнив при этом значения исходных суммы и объема льготы.
							НоваяСтрокаТаблицыПоЛС = ТаблицаПоЛС.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыПоЛС, ТаблицаПоЛьготнику[0]);
							НоваяСтрокаТаблицыПоЛС.ИсходнаяСуммаЛьготы = НоваяСтрокаТаблицыПоЛС.Начислено;
							НоваяСтрокаТаблицыПоЛС.ИсходныйОбъемЛьготы = НоваяСтрокаТаблицыПоЛС.КоличествоЛьгота;
							
							// Разделим льготный объем услуги и сумму начисления во всех строках на количество таких строк.
							// При этом необходимо учесть "остатки", которые могли возникнуть в результате округления объема льготы
							// и суммы льготы.
							ИсходныйОбъемЛьготы = ТаблицаПоЛС[0].ИсходныйОбъемЛьготы;
							ИсходнаяСуммаЛьготы = ТаблицаПоЛС[0].ИсходнаяСуммаЛьготы;
							
							СуммаНачислено = 0;
							СуммаКоличествоЛьгота = 0;
							
							Для Каждого ТекСтрока Из ТаблицаПоЛС Цикл
								
								ТекСтрока.Начислено = Окр(ТекСтрока.ИсходнаяСуммаЛьготы / ТаблицаПоЛС.Количество(), 2);
								ТекСтрока.КоличествоЛьгота = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ТекСтрока.ИсходныйОбъемЛьготы / ТаблицаПоЛС.Количество(), мТочностьОбъемаНачислений);
								
								СуммаНачислено = СуммаНачислено + ТекСтрока.Начислено;
								СуммаКоличествоЛьгота = СуммаКоличествоЛьгота + ТекСтрока.КоличествоЛьгота;
								
							КонецЦикла;
							
							// Распределим "остатки", которые могли возникнуть в результате округления,
							// на первую строки таблиц значений "ТаблицаПоЛС".
							Если НЕ ИсходнаяСуммаЛьготы = СуммаНачислено ИЛИ НЕ ИсходныйОбъемЛьготы = СуммаКоличествоЛьгота Тогда
								ТаблицаПоЛС[0].Начислено        = ТаблицаПоЛС[0].Начислено        + (ИсходнаяСуммаЛьготы - СуммаНачислено);
								ТаблицаПоЛС[0].КоличествоЛьгота = ТаблицаПоЛС[0].КоличествоЛьгота + (ИсходныйОбъемЛьготы - СуммаКоличествоЛьгота);
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не ИмеетсяЛьготаНаСемью Тогда
						Если НачислениеПоЛьготнику > 0 Тогда
							// добавим в табличную часть наилучший вариант расчета льгот
							Для Каждого ТекСтрока Из ТаблицаПоЛьготнику Цикл
								ЗаполнитьЗначенияСвойств(РасчетЛьгот.Добавить(), ТекСтрока);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла; // цикл по льготникам
				
				Если ИмеетсяЛьготаНаСемью Тогда
					Если НачислениеПоЛС > 0 Тогда
						// добавим в табличную часть наилучший вариант расчета льгот
						Для Каждого ТекСтрока Из ТаблицаПоЛС Цикл
							ЗаполнитьЗначенияСвойств(РасчетЛьгот.Добавить(), ТекСтрока);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				/////////////////////////////////////////////////////////////////////////////////
				// РАСЧЕТ СВЕРХОБЪЕМНЫХ ЛЬГОТНЫХ КАТЕГОРИЙ
				
				// Если установлены сверхобъемные льготы, то рассчитаем остаток объема для них.
				// Возможны два варианта расчета льготы по сверхобъемной услуге:
				//
				// (1) - если сверхобъемная льгота предоставляется на ВСЮ СЕМЬЮ, тогда объем услуги,
				//       на который дается льгота определяется как:
				//       [объем начисления услуги] – [объем услуги, на который предоставлена скидка
				//                                    по категориям, в том числе парным и не парным].
				//
				// (2) - если сверхобъемная льгота предоставляется на БЛИЗКИХ РОДСТВЕННИКОВ, тогда объем услуги,
				//       на который дается льгота определяется как:
				//       [объем начисленной услуги] * [Количество близких родственников среди получателей льготы]
				//                                  / [Количество получателей льготы всего на лицевом счете]
				//        – [объем услуги, на который предоставлена скидка близким родственникам по не сверхобъемным категориям].
				//
				// (3) - если сверхобъемная льгота предоставляется на ОДНОГО ЧЕЛОВЕКА, тогда объем услуги,
				//       на который дается льгота определяется как:
				//       [объем начисленной услуги] / [Количество получателей льготы всего на лицевом счете]
				//        - [объем услуги, на который предоставлена скидка самому льготнику].
				
				ТаблицаОбъемовЛьготПоПолучателям.Свернуть("ПользующийсяЛьготой, Тариф", "КоличествоЛьготы");
				
				ТаблицаПредоставленныхЛьгот.Свернуть("Льготник,ЛьготнаяКатегория");
				
				Для Каждого ТекСтрокаПредоставленнойЛьготы Из ТаблицаПредоставленныхЛьгот Цикл
					
					ТекущийЛьготник = ТекСтрокаПредоставленнойЛьготы.Льготник;
					
					// Находим сверобъемную категорию для основной категории льготника
					СтрокиЛьготнойКатегории = ТаблицаСкидок.НайтиСтроки(Новый Структура("ЛьготнаяКатегория,Услуга", ТекСтрокаПредоставленнойЛьготы.ЛьготнаяКатегория, ВыборкаУслуг.Услуга));
					
					Если СтрокиЛьготнойКатегории.Количество() > 0 Тогда
						
						СверхобъемнаяЛьготнаяКатегория = СтрокиЛьготнойКатегории[0].ЛьготнаяКатегорияДляСверхобъема;
						
						Если ЗначениеЗаполнено(СверхобъемнаяЛьготнаяКатегория) Тогда
							
							// Если установлена сверхобъемная льготная категория, найдем по ней скидку.
							
							СтрокиЛьготнойКатегорииСверхобъема = ТаблицаСкидок.НайтиСтроки(Новый Структура("ЛьготнаяКатегория,Услуга", СверхобъемнаяЛьготнаяКатегория, ВыборкаУслуг.Услуга));
							
							Если СтрокиЛьготнойКатегорииСверхобъема.Количество() > 0 Тогда
								
								УсловияПредоставленияСкидкиСверхобъемнойЛК = СтрокиЛьготнойКатегорииСверхобъема[0];
								
								СтруктураЛьготника = Новый Структура("Льготник, ЛьготнаяКатегория", ТекущийЛьготник, СверхобъемнаяЛьготнаяКатегория);
								
								// Обходим начисления по услуге.
								Для Каждого ТекДанные Из ДанныеПоНачислениям Цикл
									
									// Если способ учета коэффициента периода НЕ по ПУ, то при вычислении суммы льготы учтем коэффициент периода.
									// 0 - для услуг по ПУ, 1 - для прочих услуг.
									Если СпособУчетаКоэффициентаПериода = 1 Тогда
										КоэффициентПериода = (ДнейВПериоде / ТекДанные.ВсегоДнейНачислено);
									Иначе
										КоэффициентПериода = 1;
									КонецЕсли;
									
									ОбъемУслуги = ТекДанные.Количество * КоэффициентПериода;
									
									КоличествоСверхобъема = 0;
									КоличествоЛьготы = 0;
									
									// (1)
									Если УсловияПредоставленияСкидкиСверхобъемнойЛК.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.Семья Тогда
										
										СтрокиОбъемов = ТаблицаОбъемовЛьготПоПолучателям.НайтиСтроки(Новый Структура("Тариф", ТекДанные.ТарифЛьгота));
										Для Каждого ТекСтрокаОбъемаЛьготы Из СтрокиОбъемов Цикл
											КоличествоЛьготы = КоличествоЛьготы + ТекСтрокаОбъемаЛьготы.КоличествоЛьготы;
										КонецЦикла;
										
										КоличествоСверхобъема = Макс(0, ОбъемУслуги - КоличествоЛьготы);
										
									// (2)
									ИначеЕсли УсловияПредоставленияСкидкиСверхобъемнойЛК.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.БлизкиеРодственники Тогда
										
										КоличествоБлизкихСредиПолучателей = 0;
										
										МассивРодственников = ПолучитьКоличествоБлизкихРодственниковЛьготника(ТаблицаБлизкихРодственников,
																											  ВыборкаЛС.ЛицевойСчет, ТекущийЛьготник, Периоды[Индекс].Период, Истина);
										
										Для Каждого ТекБлизкийПользующийся Из МассивРодственников Цикл
											СтрокиОбъемов = ТаблицаОбъемовЛьготПоПолучателям.НайтиСтроки(Новый Структура("Тариф, ПользующийсяЛьготой", ТекДанные.ТарифЛьгота, ТекБлизкийПользующийся));
											Для Каждого ТекСтрокаОбъемаЛьготы Из СтрокиОбъемов Цикл
												КоличествоЛьготы = КоличествоЛьготы + ТекСтрокаОбъемаЛьготы.КоличествоЛьготы;
												КоличествоБлизкихСредиПолучателей = КоличествоБлизкихСредиПолучателей + 1;
											КонецЦикла;
										КонецЦикла;
										
										КоличествоСверхобъема = Макс(0, ОбъемУслуги * КоличествоБлизкихСредиПолучателей / ?(КоличествоЖильцовНаЛС = 0, 1, КоличествоЖильцовНаЛС) - КоличествоЛьготы);
										
									// (3)
									ИначеЕсли УсловияПредоставленияСкидкиСверхобъемнойЛК.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.ОдинЧеловек Тогда
										
										СтрокиОбъемов = ТаблицаОбъемовЛьготПоПолучателям.НайтиСтроки(Новый Структура("Тариф, ПользующийсяЛьготой", ТекДанные.ТарифЛьгота, ТекущийЛьготник));
										Для Каждого ТекСтрокаОбъемаЛьготы Из СтрокиОбъемов Цикл
											КоличествоЛьготы = КоличествоЛьготы + ТекСтрокаОбъемаЛьготы.КоличествоЛьготы;
										КонецЦикла;
										
										КоличествоСверхобъема = Макс(0, ОбъемУслуги / ?(КоличествоЖильцовНаЛС = 0, 1, КоличествоЖильцовНаЛС) - КоличествоЛьготы);
										
									КонецЕсли;
									
									// Для расчета льгот по сверхобъему используем тариф для льготы, а не тариф начисления услуги.
									СтруктураДанных = Новый Структура("НачисленоЛьгота, Количество, ТарифЛьгота, ВидТарифаЛьгота", ТекДанные.НачисленоЛьгота, КоличествоСверхобъема, ТекДанные.ТарифЛьгота, ТекДанные.ВидТарифаЛьгота);
									
									// получим сумму льготы, тариф и количество услуги
									СтруктураЛьготы = ПолучитьСуммуНачисленияЛьготы(ВыборкаЛС.ЛицевойСчет, ТекущийЛьготник, СверхобъемнаяЛьготнаяКатегория,
																					ВыборкаУслуг.Услуга, УсловияПредоставленияСкидкиСверхобъемнойЛК, СтруктураДанных,,,,,
																					УсловияПредоставленияСкидкиСверхобъемнойЛК.ОграничениеПоСуммеЛьготы);
									
									Коэффициент = (ДнейВПериоде / ТекДанные.ДнейНачислено);
									
									// Начисление льготы производим только на положительный сверхобъем.
									Если СтруктураЛьготы.Количество > 0 Тогда
										
										// добавим результат вычислений в табличную часть
										ДобавитьСтрокуВТабличнуюЧасть(ВыборкаУслуг, ТекДанные, СтруктураЛьготника, Коэффициент,
																	  НачалоПериода, КонецПериода, СтруктураЛьготы);
										
									КонецЕсли;
									
								КонецЦикла;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла; // Цикл по периодам
			
		КонецЦикла; // цикл по услугам
		
	КонецЦикла; // цикл по лс
	
КонецПроцедуры // ПроизвестиРасчетЛьготДляГотовыхЧисел()

// Функция проверяет, имеется ли на лицевом счете льготник с льготой на всю семью.
Функция ИмеетсяЛьготаНаСемью(ЛицевойСчет, Услуга, ТаблицаЛьготников, ТаблицаСкидок)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛьготников.ЛицевойСчет,
	|	ТаблицаЛьготников.Льготник,
	|	ТаблицаЛьготников.Действие,
	|	ТаблицаЛьготников.ЛьготнаяКатегория
	|ПОМЕСТИТЬ втЛьготников
	|ИЗ
	|	&ТаблицаЛьготников КАК ТаблицаЛьготников
	|ГДЕ
	|	ТаблицаЛьготников.Действие
	|	И ТаблицаЛьготников.ЛицевойСчет = &ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСкидок.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	ТаблицаСкидок.Услуга КАК Услуга,
	|	ТаблицаСкидок.ЛицаПользующиесяЛьготами
	|ПОМЕСТИТЬ втСкидок
	|ИЗ
	|	&ТаблицаСкидок КАК ТаблицаСкидок
	|ГДЕ
	|	ТаблицаСкидок.Услуга = &Услуга
	|	И ТаблицаСкидок.ЛицаПользующиесяЛьготами = ЗНАЧЕНИЕ(Перечисление.КВП_ЛицаПользующиесяЛьготами.Семья)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Льготники.Льготник
	|ИЗ
	|	втЛьготников КАК Льготники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСкидок КАК Скидки
	|		ПО Льготники.ЛьготнаяКатегория = Скидки.ЛьготнаяКатегория";
	
	Запрос.УстановитьПараметр("ЛицевойСчет",       ЛицевойСчет);
	Запрос.УстановитьПараметр("Услуга",            Услуга);
	Запрос.УстановитьПараметр("ТаблицаЛьготников", ТаблицаЛьготников);
	Запрос.УстановитьПараметр("ТаблицаСкидок",     ТаблицаСкидок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции // ИмеетсяЛьготаНаСемью()

// Функция возвращает текст запроса для расчета льгот в случае установленной
// настройки "УказыватьКоличествоПрожИЗарегЧислами".
//
Функция ПолучитьТекстЗапросаДляГотовыхЧисел()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНачислений.ЛицевыеСчета,
	|	ТаблицаНачислений.Услуга
	|ПОМЕСТИТЬ втНачислений
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЛьготников.ЛицевойСчет,
	|	ТаблицаЛьготников.Льготник,
	|	ТаблицаЛьготников.ЛьготнаяКатегория
	|ПОМЕСТИТЬ втЛьготников
	|ИЗ
	|	&ТаблицаЛьготников КАК ТаблицаЛьготников
	|ГДЕ
	|	ТаблицаЛьготников.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСкидок.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	ТаблицаСкидок.Услуга КАК Услуга,
	|	ТаблицаСкидок.ЛицаПользующиесяЛьготами,
	|	ТаблицаСкидок.РазмерСкидки,
	|	ТаблицаСкидок.ОграничениеПоОбъемуУслуги,
	|	ТаблицаСкидок.ОграничениеПоСуммеЛьготы,
	|	ТаблицаСкидок.ПлощадьДляРасчетаОграничения
	|ПОМЕСТИТЬ втСкидок
	|ИЗ
	|	&ТаблицаСкидок КАК ТаблицаСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ЛицевыеСчета КАК ЛицевыеСчета,
	|	Начисления.Услуга КАК Услуга,
	|	Льготники.Льготник,
	|	Льготники.ЛьготнаяКатегория
	|ПОМЕСТИТЬ ТаблицаНачисленийИЛьготников
	|ИЗ
	|	втНачислений КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛьготников КАК Льготники
	|		ПО Начисления.ЛицевыеСчета = Льготники.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УслугиЛьготники.ЛицевыеСчета КАК ЛицевойСчет,
	|	УслугиЛьготники.Услуга КАК Услуга,
	|	УслугиЛьготники.Льготник КАК Льготник,
	|	УслугиЛьготники.ЛьготнаяКатегория,
	|	Скидки.ЛицаПользующиесяЛьготами,
	|	Скидки.РазмерСкидки,
	|	Скидки.ОграничениеПоОбъемуУслуги,
	|	Скидки.ОграничениеПоСуммеЛьготы,
	|	Скидки.ПлощадьДляРасчетаОграничения
	|ИЗ
	|	ТаблицаНачисленийИЛьготников КАК УслугиЛьготники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСкидок КАК Скидки
	|		ПО УслугиЛьготники.Услуга = Скидки.Услуга
	|			И УслугиЛьготники.ЛьготнаяКатегория = Скидки.ЛьготнаяКатегория
	|ИТОГИ ПО
	|	ЛицевойСчет,
	|	Услуга,
	|	Льготник";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаДляГотовыхЧисел()

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Добавляет расшифровку льгот.
//
// Параметры:
//  СтрокаЛьготы - строка ТЧ "Льготы", для которой нужно добавить расшифровку.
//  СуммаЛьготы  - Число - сумма выданной льготы.
//  ЛьготнаяКатегория - льготная категория, по которой выдана льгота.
//
Процедура ДобавитьСтрокуРасшифровкиЛьготы(СтрокаЛьготы, СуммаЛьготы, ЛьготнаяКатегория, Количество)
	
	Если СуммаЛьготы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = РасшифровкаЛьгот.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЛьготы);
	
	// Для составной услуги пересчет на количество дней начисления
	// выполняется при расчете составной услуги.
	
	Если СтрокаЛьготы.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.СОграничениемПоНормам Тогда
		НоваяСтрока.Начислено = СуммаЛьготы;
	Иначе
		НоваяСтрока.Начислено = СуммаЛьготы * мКоэффициентКоличестваДней;
	КонецЕсли;
	
	НоваяСтрока.ЛьготнаяКатегория = ЛьготнаяКатегория;
	НоваяСтрока.Количество        = Количество;
	
КонецПроцедуры // ДобавитьСтрокуРасшифровкиЛьготы()

// Проверяет, возможно ли рассчитать льготу по текущей услуге.
//
Функция НачислятьПоОтсутствующимЛьготникам(Услуга)
	
	// Для информации по расчету льгот по временно отсутствующим:
	// До момента доработки расчета льгот по собственникам отдельно не анализировалось 
	// по какому виду жильцов рассчитывается услуга: по проживающим или зарегистрированным.
	// По площади и показаниям рассчитывалось всегда, а в остальных случаях анализировался 
	// только признак регистрации / проживания, а именно:
	// - если расчет льгот выполнялся по зарегистрированным, при этом жилец не проживал и 
	//   это не услуга по площади/показаниям, то расчет не выполняется;
	// - если расчет льгот выполнялся по проживающим, при этом жилец не зарегистрирован и 
	//   это не услуга по площади/показаниям, то расчет не выполняется.
	
	СтруктураНастроекРасчетаПоОтсутствующим = Новый Структура;
	СтруктураНастроекРасчетаПоОтсутствующим.Вставить("ВыполнятьРасчет",                   Истина);
	СтруктураНастроекРасчетаПоОтсутствующим.Вставить("УслугаЗависитОтПроживающих",        Ложь);
	СтруктураНастроекРасчетаПоОтсутствующим.Вставить("УслугаЗависитОтЗарегистрированных", Ложь);
	
	СпособРасчета = Услуга.СпособРасчета;
	
	Если мНастройкиУчетнойПолитикиТСЖ.РассчитыватьЛьготуПоВременноОтсутствующим Тогда
		
		Если СпособРасчета = Перечисления.КВП_СпособыРасчета.СОграничениемПоНормам Тогда
			
			Для Каждого СтрокаСоставнойУслуги ИЗ Услуга.СоставныеУслуги Цикл
				
				Если НЕ СтрокаСоставнойУслуги.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПлощади Тогда
					
					СтруктураНастроекРасчетаПоОтсутствующим.Вставить("ВыполнятьРасчет", Ложь);
					
					Если СтрокаСоставнойУслуги.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоКоличествуЖильцов Тогда
						Если Услуга.ВидыЖильцов = Перечисления.УПЖКХ_ВидыЖильцов.Проживающие Тогда
							СтруктураНастроекРасчетаПоОтсутствующим.Вставить("УслугаЗависитОтПроживающих",        Истина);
						Иначе
							СтруктураНастроекРасчетаПоОтсутствующим.Вставить("УслугаЗависитОтЗарегистрированных", Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если НЕ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПлощади
			   И НЕ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика 
			   И НЕ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
				СтруктураНастроекРасчетаПоОтсутствующим.Вставить("ВыполнятьРасчет", Ложь);
				
				Если СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоКоличествуЖильцов Тогда
					Если Услуга.ВидыЖильцов = Перечисления.УПЖКХ_ВидыЖильцов.Проживающие Тогда
						СтруктураНастроекРасчетаПоОтсутствующим.Вставить("УслугаЗависитОтПроживающих",        Истина);
					Иначе
						СтруктураНастроекРасчетаПоОтсутствующим.Вставить("УслугаЗависитОтЗарегистрированных", Истина);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураНастроекРасчетаПоОтсутствующим;
	
КонецФункции // НачислятьПоОтсутствующимЛьготникам()

// Функция получает тариф услуги для расчета льгот.
//
Функция ПолучитьТарифУслугиДляРасчетаЛьгот(ЛицевойСчет, мУслуга, Тариф, СоставнаяУслуга = Неопределено, ВидТарифаЛьгота = Неопределено)

	
	// расчет льготы по тарифу, отличному от тарифа услуги
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Услуга",      мУслуга);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_УслугиДляРасчетаЛьготПоДругимТарифам.Услуга
	|ИЗ
	|	РегистрСведений.КВП_УслугиДляРасчетаЛьготПоДругимТарифам КАК КВП_УслугиДляРасчетаЛьготПоДругимТарифам
	|ГДЕ
	|	КВП_УслугиДляРасчетаЛьготПоДругимТарифам.Услуга = &Услуга
	|	И КВП_УслугиДляРасчетаЛьготПоДругимТарифам.Организация = &Организация";
	
	мТариф = 0;
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		тмпУслуга = мУслуга;
		Если ЗначениеЗаполнено(СоставнаяУслуга) Тогда
			тмпУслуга = СоставнаяУслуга;
		КонецЕсли;
		мТариф = ПолучитьТарифПоЛицевомуСчету(Дата, Организация, тмпУслуга, 
											  ЛицевойСчет, Перечисления.КВП_ВидыТарифов.Льготный);
	КонецЕсли;
	
	Если мТариф > 0 И ИспользоватьФункционалВыгрузкиВГЦЖС Тогда
		
		ВидТарифаЛьгота = Перечисления.КВП_ВидыТарифов.Льготный;
		
	КонецЕсли;
	
	Возврат ?(мТариф = 0, Тариф, мТариф);
	
КонецФункции

// Функция заполняет таблицу начислений по данным регистра накоплений "Начисления".
Функция ПолучитьТаблицуНачисленийПоДаннымИзРегистраНачисления(мУслуга = Неопределено, ЛицевойСчет, ДатаИзПериода = Ложь)
	
	мПериод = ?(ДатаИзПериода, Период, Дата);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Начисления.Услуга КАК Услуга,
	|	УПЖКХ_Начисления.Услуга.СпособРасчета КАК СпособРасчета,
	|	УПЖКХ_Начисления.СоставнаяУслуга КАК СоставнаяУслуга,
	|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевыеСчета,
	|	УПЖКХ_Начисления.Тариф КАК Тариф,
	|	ВЫБОР
	|		КОГДА &ИспользоватьФункционалВыгрузкиВГЦЖС
	|			ТОГДА УПЖКХ_Начисления.ВидТарифа
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|	КОНЕЦ КАК ВидТарифа,
	|	УПЖКХ_Начисления.Количество КАК Количество,
	|	УПЖКХ_Начисления.Договор КАК Договор,
	|	УПЖКХ_Начисления.СуммаНачисления КАК Начислено,
	|	УПЖКХ_Начисления.ДнейНачислено КАК ДнейНачислено,
	|	УПЖКХ_Начисления.Начало КАК НачалоПериода,
	|	УПЖКХ_Начисления.Окончание КАК КонецПериода,
	|	КВП_УслугиСоставныеУслуги.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Услуги.СоставныеУслуги КАК КВП_УслугиСоставныеУслуги
	|		ПО УПЖКХ_Начисления.Услуга = КВП_УслугиСоставныеУслуги.Ссылка
	|			И УПЖКХ_Начисления.СоставнаяУслуга = КВП_УслугиСоставныеУслуги.Услуга
	|ГДЕ
	|	УПЖКХ_Начисления.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И УПЖКХ_Начисления.Организация = &Организация
	|	И УПЖКХ_Начисления.ЛицевойСчет = &ЛицевойСчет
	|	И УПЖКХ_Начисления.Услуга = &Услуга";
	
	Запрос.УстановитьПараметр("ДатаНач",          НачалоМесяца(мПериод));
	Запрос.УстановитьПараметр("ДатаКон",          КонецМесяца(мПериод));
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ЛицевойСчет",      ЛицевойСчет);
	Запрос.УстановитьПараметр("ИспользоватьФункционалВыгрузкиВГЦЖС", ИспользоватьФункционалВыгрузкиВГЦЖС);
	
	Если Не мУслуга = Неопределено Тогда
		
		Запрос.УстановитьПараметр("Услуга", мУслуга);
		
		Если ТипЗнч(мУслуга) = Тип("Массив") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПЖКХ_Начисления.Услуга = &Услуга", "УПЖКХ_Начисления.Услуга В (&Услуга)");
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	И УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
		|	И УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)";
		
	Иначе
		
		// условие на услугу
		Если НЕ Услуга.Пустая() Тогда
			Если Услуга.ЭтоГруппа Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И УПЖКХ_Начисления.Услуга = &Услуга",
				                           "И УПЖКХ_Начисления.Услуга В ИЕРАРХИИ (&Услуга)");
			КонецЕсли;
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И УПЖКХ_Начисления.Услуга = &Услуга", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Услуга", Услуга);
		
		Запрос.Текст = Запрос.Текст + "
		|	И ((УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
		|	И (УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
		|	ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ФактическиеЗатраты)
		|	ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.СервисныеУслуги)))
		|	ИЛИ (УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
		|	И (УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
		|	ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|	ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
		|	ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПосреднему)
		|	ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
		|	ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
		|	ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПосреднему))))";
		
	КонецЕсли;
	
	Если ТипЗнч(ЛицевойСчет) = Тип("Массив") Тогда
		Если ЛицевойСчет.Количество() = 0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПЖКХ_Начисления.ЛицевойСчет = &ЛицевойСчет", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПЖКХ_Начисления.ЛицевойСчет = &ЛицевойСчет",
			                                         "УПЖКХ_Начисления.ЛицевойСчет В (&ЛицевойСчет)");
		КонецЕсли;
	КонецЕсли;
	
	// Добавим упорядочивание по необходимым полям.
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Услуга,
	|	ЛицевыеСчета,
	// Номер строки необходим для корректного порядка строк по ограничениям.
	// Если услуга составная, то упорядочим услуги согласно порядку их учета.
	|	НомерСтроки, 
	// Тариф необходим для корректного расчета с учетом ограничения по объему, чтобы
	// при ограничении по объему услуги расчет льготы выполнялся по максимальному тарифу.
	|	Тариф УБЫВ";
	
	// Для информации:
	// Решили, что расчет должен выполняться в порядке уменьшения размера тарифа.
	// Актуально для Москвы и Московской области.
	// В случае если необходим будет другой порядок, который может меняться в зависимости
	// от каких-либо причин, тогда необходимо добавить доп.настройку.
	// Как вариант, такую настройку можно добавить в виде гиперссылки, например, "Порядок 
	// распределения ограничений по видам тарифа" в окне "Настроек предоставления и расчета
	// льгот", доступном из учетной политики на закладке "Льготы".
	// При переходе по гиперссылке можно открывать небольшую форму, в которой будет выбор 
	// варианта сортировки: «Автоматически» - в порядке уменьшения тарифа, «Вручную», где 
	// пользователь сортирует виды тарифов в списке как ему надо.
	// Эти настройки можно хранить в двух ресурсах регистра сведений: булево – для варианта,
	// хранилище значений – для списка видов тарифов.
	//
	// При этом учесть, что в старом алгоритме расчета льгот ограничение по объему выполняется
	// пропорционально тарифам.
	
	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	
	ТаблицаНачислений.Свернуть("ДнейНачислено,Договор,НачалоПериода,
								|КонецПериода,ЛицевыеСчета,СоставнаяУслуга,
								|СпособРасчета,Тариф, ВидТарифа, Услуга, НомерСтроки",
								"Количество,Начислено");
	
	Возврат ТаблицаНачислений;
	
КонецФункции

// Функция заполняет таблицу начислений по данным регистра накоплений "Начисления".
Функция ПолучитьТаблицуКорректировокПоДаннымИзРегистраНачисления(мУслуга = Неопределено, ЛицевойСчет, ДатаИзПериода = Ложь)
	
	мПериод = ?(ДатаИзПериода, Период, Дата);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевыеСчета,
	|	УПЖКХ_Начисления.Услуга КАК Услуга,
	|	УПЖКХ_Начисления.СоставнаяУслуга КАК СоставнаяУслуга,
	|	УПЖКХ_Начисления.Договор КАК Договор,
	|	СУММА(-УПЖКХ_Начисления.СуммаНачисленияОборот) КАК Перерасчет,
	|	СУММА(УПЖКХ_Начисления.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСторнировка
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И Услуга = &Услуга) КАК УПЖКХ_Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга,
	|	УПЖКХ_Начисления.СоставнаяУслуга,
	|	УПЖКХ_Начисления.Договор,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ДатаНач",          НачалоМесяца(мПериод));
	Запрос.УстановитьПараметр("ДатаКон",          КонецМесяца(мПериод));
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ЛицевойСчет",      ЛицевойСчет);
	
	Если Не мУслуга = Неопределено Тогда
		
		Запрос.УстановитьПараметр("Услуга", мУслуга);
		
		Если ТипЗнч(мУслуга) = Тип("Массив") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Услуга = &Услуга", "И Услуга В (&Услуга)");
		КонецЕсли;
		
	Иначе
		
		// условие на услугу
		Если НЕ Услуга.Пустая() Тогда
			Если Услуга.ЭтоГруппа Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Услуга = &Услуга", "И Услуга В ИЕРАРХИИ (&Услуга)");
			КонецЕсли;
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Услуга = &Услуга", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Услуга", Услуга);
		
	КонецЕсли;
	
	Если ТипЗнч(ЛицевойСчет) = Тип("Массив") Тогда
		Если ЛицевойСчет.Количество() = 0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЛицевойСчет = &ЛицевойСчет", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЛицевойСчет = &ЛицевойСчет", "ЛицевойСчет В (&ЛицевойСчет)");
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНачислений;
	
КонецФункции // ПолучитьТаблицуКорректировокПоДаннымИзРегистраНачисления()

// Функция получает таблицу настроек предоставления и расчета льгот в разрезе услуг.
Функция ПолучитьНастройкиРасчетаЛьгот(СписокУслуг)
	
	Запрос = Новый Запрос;
	УПЖКХ_РасчетЛьгот.ДополнитьЗапросНастройкамиПредоставленияИРасчетаЛьготДляСпискаУслуг(Запрос, Дата, Организация, СписокУслуг);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиРасчетаЛьготПоУслугам.Услуга,
	|	НастройкиРасчетаЛьготПоУслугам.ВидЖильцовКоторымПредоставляютсяЛьготы,
	|	НастройкиРасчетаЛьготПоУслугам.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги,
	|	НастройкиРасчетаЛьготПоУслугам.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
	|ИЗ
	|	НастройкиРасчетаЛьготПоУслугам КАК НастройкиРасчетаЛьготПоУслугам";
	
	НастройкиРасчетаЛьгот = Запрос.Выполнить().Выгрузить();
	НастройкиРасчетаЛьгот.Индексы.Добавить("Услуга");
	
	Возврат НастройкиРасчетаЛьгот;
	
КонецФункции // ПолучитьНастройкиРасчетаЛьгот()

// Заполняет признаки расчета льгот по видам жильцов согласно выбранному виду жильцов.
Процедура ОпределитьПризнакиРасчетаЛьготПоВидамЖильцовПоУслуге(НастройкиРасчетаЛьготПоУслуге)
	
	мЛьготуПредоставлятьЗарегистрированнымЖильцам = НастройкиРасчетаЛьготПоУслуге.ВидЖильцовКоторымПредоставляютсяЛьготы = 
														ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Зарегистрированные");
	мЛьготуПредоставлятьПроживающимЖильцам        = НастройкиРасчетаЛьготПоУслуге.ВидЖильцовКоторымПредоставляютсяЛьготы = 
														ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Проживающие");
	мЛьготуПредоставлятьСобственникам             = НастройкиРасчетаЛьготПоУслуге.ВидЖильцовКоторымПредоставляютсяЛьготы = 
														ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Собственники");
	
КонецПроцедуры // ОпределитьПризнакиРасчетаЛьготПоВидамЖильцовПоУслуге()

#КонецОбласти

#Область НовыйАлгоритм

// Функция возвращает способ учета коэффициента периода по способу расчета услуги.
// 0 - для услуг по ПУ, 1 - для прочих услуг.
//
Функция ПолучитьСпособУчетаКоэффициентаПериода(ТекУслуга)
	
	// 0 - для услуг по ПУ, 1 - для прочих услуг.
	
	// Учет коэффициента периода на этапах расчета:
	// А) При дроблении таблицы начислений.
	// Б) При определении объема ограничения на подпериоде.
	// В) При определении количества льготы.
	
	СпособРасчетаУслуги = ТекУслуга.СпособРасчета;
	
	Если СпособРасчетаУслуги = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
	 Или СпособРасчетаУслуги = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
		СпособУчетаКоэффициента = 0;
	Иначе
		СпособУчетаКоэффициента = 1;
	КонецЕсли;
	
	Возврат СпособУчетаКоэффициента;
	
КонецФункции

// Функция возвращает таблицу с жильцами, которые являлись льготниками на начало периода
// и ставшие льготниками в периоде.
//
Функция ПолучитьТаблицуЛьготников(ЛицевыеСчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	// Получим таблицу с жильцами, которые являлись льготниками на начало периода с изменениями по льготниам в периоде.
	//
	// АЛГОРИТМ ВЫПОЛНЕНИЯ ЗАПРОСА:
	// 1. Получаем данные по действующим льготникам на начало месяца.
	// 2. Получаем данные об изменениях назначения льгот в течение месяца.
	// 3. Объединяем результаты п.1 и п.2.
	// 4. Сворачиваем их по максимуму Периода, тем самым получая наиболее актуальные данные по датам изменения.
	// 5. Дополняем актуальные данные недостающими сведениями.
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЛьготникиНаНачалоПериода.Период КАК Период,
	|	НАЧАЛОПЕРИОДА(&ДатаНач, ДЕНЬ) КАК ДатаИзменения,
	|	ЛьготникиНаНачалоПериода.Проживающий КАК Льготник,
	|	ЛьготникиНаНачалоПериода.ЛьготнаяКатегория,
	|	ЛьготникиНаНачалоПериода.Действие
	|ПОМЕСТИТЬ втДанныеПоЛьготам
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&ДатаДок,
	|			Проживающий.Владелец В (&ЛицевыеСчета)
	|				И ДатаИзменения <= &ДатаНач) КАК ЛьготникиНаНачалоПериода
	|ГДЕ
	|	ЛьготникиНаНачалоПериода.Действие
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЛьготникиВПериоде.Период,
	|	НАЧАЛОПЕРИОДА(ЛьготникиВПериоде.ДатаИзменения, ДЕНЬ),
	|	ЛьготникиВПериоде.Проживающий,
	|	ЛьготникиВПериоде.ЛьготнаяКатегория,
	|	ЛьготникиВПериоде.Действие
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы КАК ЛьготникиВПериоде
	|ГДЕ
	|	ЛьготникиВПериоде.Проживающий.Владелец В(&ЛицевыеСчета)
	|	И ЛьготникиВПериоде.Период <= &ДатаДок
	|	И ЛьготникиВПериоде.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеПоЛьготам.Период) КАК Период,
	|	ДанныеПоЛьготам.ДатаИзменения,
	|	ДанныеПоЛьготам.Льготник,
	|	ДанныеПоЛьготам.ЛьготнаяКатегория
	|ПОМЕСТИТЬ втПериоды
	|ИЗ
	|	втДанныеПоЛьготам КАК ДанныеПоЛьготам
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПоЛьготам.Льготник,
	|	ДанныеПоЛьготам.ЛьготнаяКатегория,
	|	ДанныеПоЛьготам.ДатаИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоЛьготам.Льготник,
	|	ДанныеПоЛьготам.ЛьготнаяКатегория,
	|	ДанныеПоЛьготам.ДатаИзменения,
	|	ДанныеПоЛьготам.Действие
	|ПОМЕСТИТЬ втАктуальныеДанныеПоЛьготам
	|ИЗ
	|	втПериоды КАК втПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеПоЛьготам КАК ДанныеПоЛьготам
	|		ПО втПериоды.Период = ДанныеПоЛьготам.Период
	|			И втПериоды.Льготник = ДанныеПоЛьготам.Льготник
	|			И втПериоды.ЛьготнаяКатегория = ДанныеПоЛьготам.ЛьготнаяКатегория
	|			И втПериоды.ДатаИзменения = ДанныеПоЛьготам.ДатаИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктуальныеДанныеПоЛьготам.ДатаИзменения КАК НачалоПериода,
	|	АктуальныеДанныеПоЛьготам.Льготник.Владелец КАК ЛицевойСчет,
	|	АктуальныеДанныеПоЛьготам.Льготник КАК Льготник,
	|	АктуальныеДанныеПоЛьготам.Льготник.ФизЛицо КАК ФизЛицо,
	|	АктуальныеДанныеПоЛьготам.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	АктуальныеДанныеПоЛьготам.Действие КАК Действие
	|ИЗ
	|	втАктуальныеДанныеПоЛьготам КАК АктуальныеДанныеПоЛьготам";
	
	Запрос.УстановитьПараметр("ЛицевыеСчета", ЛицевыеСчета);
	Запрос.УстановитьПараметр("ДатаДок",      Дата);
	Запрос.УстановитьПараметр("ДатаНач",      НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",      КонецМесяца(Период));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуЛьготников()

// Функция возвращает таблицу изменений состава жильцов в периоде расчета льгот.
Функция ПолучитьТаблицуИзмененийСоставаЖильцов(ЛицевыеСчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЛицевыеСчета.ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	&ЛицевыеСчета КАК ЛицевыеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Жильцы.Владелец КАК ЛицевойСчет,
	|	Жильцы.Ссылка КАК Жилец
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК Жильцы
	|ГДЕ
	|	Жильцы.Владелец В
	|			(ВЫБРАТЬ
	|				ЛицевыеСчета.ЛицевойСчет
	|			ИЗ
	|				втЛицевыеСчета КАК ЛицевыеСчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&НачалоПериода КАК Период,
	|	Жильцы.ЛицевойСчет КАК ЛицевойСчет,
	|	Жильцы.Жилец КАК Жилец,
	|	ИСТИНА КАК ИзменениеЗарегистрированных,
	|	ИСТИНА КАК ИзменениеПроживающих,
	|	ИСТИНА КАК ИзменениеСобственников
	|ПОМЕСТИТЬ втПериоды
	|ИЗ
	|	втЖильцы КАК Жильцы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения, ДЕНЬ),
	|	УПЖКХ_СведенияОЗарегистрированных.ЛицевойСчет,
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных КАК УПЖКХ_СведенияОЗарегистрированных
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения МЕЖДУ &НачалоПериода И &КонецПериода
	|	И УПЖКХ_СведенияОЗарегистрированных.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				ЛицевыеСчета.ЛицевойСчет
	|			ИЗ
	|				втЛицевыеСчета КАК ЛицевыеСчета)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(УПЖКХ_СведенияОПроживающих.ДатаИзменения, ДЕНЬ),
	|	УПЖКХ_СведенияОПроживающих.ЛицевойСчет,
	|	УПЖКХ_СведенияОПроживающих.Жилец,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих КАК УПЖКХ_СведенияОПроживающих
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающих.ДатаИзменения МЕЖДУ &НачалоПериода И &КонецПериода
	|	И УПЖКХ_СведенияОПроживающих.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				ЛицевыеСчета.ЛицевойСчет
	|			ИЗ
	|				втЛицевыеСчета КАК ЛицевыеСчета)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(УПЖКХ_СобственникиПомещений.Период, ДЕНЬ),
	|	Жильцы.ЛицевойСчет,
	|	Жильцы.Жилец,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	втЖильцы КАК Жильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственникиПомещений КАК УПЖКХ_СобственникиПомещений
	|		ПО Жильцы.ЛицевойСчет.Адрес = УПЖКХ_СобственникиПомещений.Помещение
	|			И Жильцы.Жилец.ФизЛицо = УПЖКХ_СобственникиПомещений.Собственник
	|			И УПЖКХ_СобственникиПомещений.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период,
	|	Периоды.ЛицевойСчет,
	|	Жильцы.Жилец,
	|	МАКСИМУМ(Периоды.ИзменениеЗарегистрированных) КАК ИзменениеЗарегистрированных,
	|	МАКСИМУМ(Периоды.ИзменениеПроживающих) КАК ИзменениеПроживающих,
	|	МАКСИМУМ(Периоды.ИзменениеСобственников) КАК ИзменениеСобственников
	|ПОМЕСТИТЬ Периоды
	|ИЗ
	|	втПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЖильцы КАК Жильцы
	|		ПО Периоды.ЛицевойСчет = Жильцы.ЛицевойСчет
	|			И Периоды.Жилец = Жильцы.Жилец
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.ЛицевойСчет,
	|	Жильцы.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Если УказыватьЖильцовЧислами Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.Период,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоПроживающих,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных
		|ПОМЕСТИТЬ КоличествоЖильцовПоЛицевымСчетамСОтбором
		|ИЗ
		|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
		|ГДЕ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет В
		|			(ВЫБРАТЬ
		|				ЛицевыеСчета.ЛицевойСчет
		|			ИЗ
		|				втЛицевыеСчета КАК ЛицевыеСчета)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.Период,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПериоды.ЛицевойСчет КАК ЛицевойСчет,
		|	втПериоды.Период КАК Период,
		|	МАКСИМУМ(КоличествоЖильцовПоЛицевымСчетамСОтбором.Период) КАК ПериодКоличества
		|ПОМЕСТИТЬ втКоличествСМаксимальнымПериодом
		|ИЗ
		|	втПериоды КАК втПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоЖильцовПоЛицевымСчетамСОтбором КАК КоличествоЖильцовПоЛицевымСчетамСОтбором
		|		ПО (НАЧАЛОПЕРИОДА(КоличествоЖильцовПоЛицевымСчетамСОтбором.Период, ДЕНЬ) <= втПериоды.Период)
		|			И (КоличествоЖильцовПоЛицевымСчетамСОтбором.ЛицевойСчет = втПериоды.ЛицевойСчет)
		|
		|СГРУППИРОВАТЬ ПО
		|	втПериоды.ЛицевойСчет,
		|	втПериоды.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втКоличествСМаксимальнымПериодом.ЛицевойСчет,
		|	втКоличествСМаксимальнымПериодом.Период,
		|	ЕСТЬNULL(КоличествоЖильцовПоЛицевымСчетамСОтбором.КоличествоПроживающих, 0) КАК КоличествоПроживающих,
		|	ЕСТЬNULL(КоличествоЖильцовПоЛицевымСчетамСОтбором.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных
		|ПОМЕСТИТЬ втКоличеств
		|ИЗ
		|	втКоличествСМаксимальнымПериодом КАК втКоличествСМаксимальнымПериодом
		|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоЖильцовПоЛицевымСчетамСОтбором КАК КоличествоЖильцовПоЛицевымСчетамСОтбором
		|		ПО втКоличествСМаксимальнымПериодом.ПериодКоличества = КоличествоЖильцовПоЛицевымСчетамСОтбором.Период
		|			И втКоличествСМаксимальнымПериодом.ЛицевойСчет = КоличествоЖильцовПоЛицевымСчетамСОтбором.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированных.Период КАК ПериодЗаписиРС,
	|	УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения КАК Период,
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец КАК Жилец,
	|	УПЖКХ_СведенияОЗарегистрированных.Зарегистрирован КАК Зарегистрирован,
	|	УПЖКХ_СведенияОЗарегистрированных.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втСведенияОЗарегистрированных
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных КАК УПЖКХ_СведенияОЗарегистрированных
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированных.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				ЛицевыеСчета.ЛицевойСчет
	|			ИЗ
	|				втЛицевыеСчета КАК ЛицевыеСчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втСведенияОЗарегистрированных.ПериодЗаписиРС) КАК ПериодЗаписиРС,
	|	втСведенияОЗарегистрированных.Период КАК Период,
	|	втСведенияОЗарегистрированных.Жилец КАК Жилец,
	|	втСведенияОЗарегистрированных.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втСведенияОЗарегистрированныхГруппировка
	|ИЗ
	|	втСведенияОЗарегистрированных КАК втСведенияОЗарегистрированных
	|
	|СГРУППИРОВАТЬ ПО
	|	втСведенияОЗарегистрированных.Период,
	|	втСведенияОЗарегистрированных.Жилец,
	|	втСведенияОЗарегистрированных.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияОЗарегистрированных.Период КАК Период,
	|	втСведенияОЗарегистрированных.Жилец КАК Жилец,
	|	втСведенияОЗарегистрированных.Зарегистрирован КАК Зарегистрирован,
	|	втСведенияОЗарегистрированных.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втСведенияОЗарегистрированныхСрезПоследних
	|ИЗ
	|	втСведенияОЗарегистрированных КАК втСведенияОЗарегистрированных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСведенияОЗарегистрированныхГруппировка КАК втСведенияОЗарегистрированныхГруппировка
	|		ПО втСведенияОЗарегистрированных.ПериодЗаписиРС = втСведенияОЗарегистрированныхГруппировка.ПериодЗаписиРС
	|			И втСведенияОЗарегистрированных.Период = втСведенияОЗарегистрированныхГруппировка.Период
	|			И втСведенияОЗарегистрированных.ЛицевойСчет = втСведенияОЗарегистрированныхГруппировка.ЛицевойСчет
	|			И втСведенияОЗарегистрированных.Жилец = втСведенияОЗарегистрированныхГруппировка.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающих.Период КАК ПериодЗаписиРС,
	|	УПЖКХ_СведенияОПроживающих.ДатаИзменения КАК Период,
	|	УПЖКХ_СведенияОПроживающих.Жилец КАК Жилец,
	|	УПЖКХ_СведенияОПроживающих.Проживает КАК Проживает,
	|	УПЖКХ_СведенияОПроживающих.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втСведенияОПроживающих
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих КАК УПЖКХ_СведенияОПроживающих
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающих.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				ЛицевыеСчета.ЛицевойСчет
	|			ИЗ
	|				втЛицевыеСчета КАК ЛицевыеСчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втСведенияОПроживающих.ПериодЗаписиРС) КАК ПериодЗаписиРС,
	|	втСведенияОПроживающих.Период КАК Период,
	|	втСведенияОПроживающих.Жилец КАК Жилец,
	|	втСведенияОПроживающих.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втСведенияОПроживающихГруппировка
	|ИЗ
	|	втСведенияОПроживающих КАК втСведенияОПроживающих
	|
	|СГРУППИРОВАТЬ ПО
	|	втСведенияОПроживающих.Период,
	|	втСведенияОПроживающих.Жилец,
	|	втСведенияОПроживающих.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияОПроживающих.Период КАК Период,
	|	втСведенияОПроживающих.Жилец КАК Жилец,
	|	втСведенияОПроживающих.Проживает КАК Проживает,
	|	втСведенияОПроживающих.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втСведенияОПроживающихСрезПоследних
	|ИЗ
	|	втСведенияОПроживающих КАК втСведенияОПроживающих
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСведенияОПроживающихГруппировка КАК втСведенияОПроживающихГруппировка
	|		ПО втСведенияОПроживающих.ПериодЗаписиРС = втСведенияОПроживающихГруппировка.ПериодЗаписиРС
	|			И втСведенияОПроживающих.Период = втСведенияОПроживающихГруппировка.Период
	|			И втСведенияОПроживающих.ЛицевойСчет = втСведенияОПроживающихГруппировка.ЛицевойСчет
	|			И втСведенияОПроживающих.Жилец = втСведенияОПроживающихГруппировка.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещений.Период КАК Период,
	|	Жильцы.Жилец КАК Жилец,
	|	УПЖКХ_СобственникиПомещений.Действует КАК Собственник,
	|	Жильцы.ЛицевойСчет
	|ПОМЕСТИТЬ втСведенияОСобственниках
	|ИЗ
	|	втЖильцы КАК Жильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственникиПомещений КАК УПЖКХ_СобственникиПомещений
	|		ПО Жильцы.ЛицевойСчет.Адрес = УПЖКХ_СобственникиПомещений.Помещение
	|			И Жильцы.Жилец.ФизЛицо = УПЖКХ_СобственникиПомещений.Собственник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.Период,
	|	Периоды.ЛицевойСчет,
	|	Периоды.Жилец,
	|	Периоды.Жилец.ФизЛицо КАК ФизЛицо,
	|	Периоды.ИзменениеЗарегистрированных,
	|	Периоды.ИзменениеПроживающих,
	|	Периоды.ИзменениеСобственников,"
	+ ?(УказыватьЖильцовЧислами, "
	|	МАКСИМУМ(Количества.Период) КАК ПериодКоличества,", "") + "
	|	МАКСИМУМ(втСведенияОЗарегистрированных.Период) КАК ПериодСведенияОЗарегистрированных,
	|	МАКСИМУМ(втСведенияОПроживающих.Период) КАК ПериодСведенияОПроживающих,
	|	МАКСИМУМ(втСведенияОСобственниках.Период) КАК ПериодСведенияОСобственниках
	|ПОМЕСТИТЬ врПериодыСМаксимальнымиДатами
	|ИЗ
	|	Периоды КАК Периоды"
	+ ?(УказыватьЖильцовЧислами, "
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличеств КАК Количества
	|		ПО Периоды.ЛицевойСчет = Количества.ЛицевойСчет
	|			И (Количества.Период <= КОНЕЦПЕРИОДА(Периоды.Период, ДЕНЬ))", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЗарегистрированныхСрезПоследних КАК втСведенияОЗарегистрированных
	|		ПО Периоды.ЛицевойСчет = втСведенияОЗарегистрированных.ЛицевойСчет
	|			И (втСведенияОЗарегистрированных.Период <= КОНЕЦПЕРИОДА(Периоды.Период, ДЕНЬ))
	|			И Периоды.Жилец = втСведенияОЗарегистрированных.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОПроживающихСрезПоследних КАК втСведенияОПроживающих
	|		ПО Периоды.ЛицевойСчет = втСведенияОПроживающих.ЛицевойСчет
	|			И (втСведенияОПроживающих.Период <= КОНЕЦПЕРИОДА(Периоды.Период, ДЕНЬ))
	|			И Периоды.Жилец = втСведенияОПроживающих.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОСобственниках КАК втСведенияОСобственниках
	|		ПО Периоды.ЛицевойСчет = втСведенияОСобственниках.ЛицевойСчет
	|			И (втСведенияОСобственниках.Период <= КОНЕЦПЕРИОДА(Периоды.Период, ДЕНЬ))
	|			И Периоды.Жилец = втСведенияОСобственниках.Жилец
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.ЛицевойСчет,
	|	Периоды.Жилец,
	|	Периоды.ИзменениеЗарегистрированных,
	|	Периоды.ИзменениеПроживающих,
	|	Периоды.ИзменениеСобственников,
	|	Периоды.Жилец.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врПериодыСМаксимальнымиДатами.Период,
	|	врПериодыСМаксимальнымиДатами.ЛицевойСчет,
	|	врПериодыСМаксимальнымиДатами.Жилец,
	|	врПериодыСМаксимальнымиДатами.ФизЛицо,
	|	врПериодыСМаксимальнымиДатами.ИзменениеЗарегистрированных,
	|	врПериодыСМаксимальнымиДатами.ИзменениеПроживающих,
	|	врПериодыСМаксимальнымиДатами.ИзменениеСобственников,";
	
	Если УказыватьЖильцовЧислами Тогда
		Запрос.Текст = Запрос.Текст + "
		|	втКоличеств.КоличествоПроживающих,
		|	втКоличеств.КоличествоЗарегистрированных,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ЕСТЬNULL(втСведенияОЗарегистрированных.Зарегистрирован, ЛОЖЬ) КАК Зарегистрирован,
	|	ЕСТЬNULL(втСведенияОПроживающих.Проживает, ЛОЖЬ) КАК Проживает,
	|	ЕСТЬNULL(втСведенияОСобственниках.Собственник, ЛОЖЬ) КАК Собственник
	|ИЗ
	|	врПериодыСМаксимальнымиДатами КАК врПериодыСМаксимальнымиДатами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЗарегистрированныхСрезПоследних КАК втСведенияОЗарегистрированных
	|		ПО врПериодыСМаксимальнымиДатами.ПериодСведенияОЗарегистрированных = втСведенияОЗарегистрированных.Период
	|			И врПериодыСМаксимальнымиДатами.ЛицевойСчет = втСведенияОЗарегистрированных.ЛицевойСчет
	|			И врПериодыСМаксимальнымиДатами.Жилец = втСведенияОЗарегистрированных.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОПроживающихСрезПоследних КАК втСведенияОПроживающих
	|		ПО врПериодыСМаксимальнымиДатами.ЛицевойСчет = втСведенияОПроживающих.ЛицевойСчет
	|			И врПериодыСМаксимальнымиДатами.Жилец = втСведенияОПроживающих.Жилец
	|			И врПериодыСМаксимальнымиДатами.ПериодСведенияОПроживающих = втСведенияОПроживающих.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОСобственниках КАК втСведенияОСобственниках
	|		ПО врПериодыСМаксимальнымиДатами.ЛицевойСчет = втСведенияОСобственниках.ЛицевойСчет
	|			И врПериодыСМаксимальнымиДатами.Жилец = втСведенияОСобственниках.Жилец
	|			И врПериодыСМаксимальнымиДатами.ПериодСведенияОСобственниках = втСведенияОСобственниках.Период";
	
	Если УказыватьЖильцовЧислами Тогда
		Запрос.Текст = Запрос.Текст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличеств КАК втКоличеств
		|		ПО врПериодыСМаксимальнымиДатами.ПериодКоличества = втКоличеств.Период
		|			И врПериодыСМаксимальнымиДатами.ЛицевойСчет = втКоличеств.ЛицевойСчет";
	КонецЕсли;
	
	// по списку лицевых счетов сформируем таблицу значений с лицевыми счетами
	ТаблицаЛС = Новый ТаблицаЗначений;
	ТаблицаЛС.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	Для Каждого ТекЛС Из ЛицевыеСчета Цикл
		ТаблицаЛС.Добавить().ЛицевойСчет = ТекЛС;
	КонецЦикла;
	Запрос.УстановитьПараметр("ЛицевыеСчета",  ТаблицаЛС);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуИзмененийСоставаЖильцов()

// Функция возвращает таблицу изменений скидок в периоде расчета льгот.
Функция ПолучитьТаблицуСкидок(СписокЛьгот, СписокУслуг)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Скидки.Услуга КАК Услуга,
	|	КВП_Скидки.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	КВП_Скидки.РазмерСкидки КАК РазмерСкидки,
	|	КВП_Скидки.ЛицаПользующиесяЛьготами КАК ЛицаПользующиесяЛьготами,
	|	КВП_Скидки.ОграничениеПоОбъемуУслуги КАК ОграничениеПоОбъемуУслуги,
	|	КВП_Скидки.ОграничениеПоСуммеЛьготы КАК ОграничениеПоСуммеЛьготы,
	|	КВП_Скидки.ПлощадьДляРасчетаОграничения,
	|	КВП_Скидки.ЛьготнаяКатегорияДляСверхобъема
	|ПОМЕСТИТЬ врТаблицаСкидок
	|ИЗ
	|	РегистрСведений.КВП_Скидки.СрезПоследних(
	|			&НачалоПериода,
	|			Услуга В (&СписокУслуг)
	|				И ЛьготнаяКатегория В (&СписокЛьгот)) КАК КВП_Скидки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_СкидкиСрезПоследних.Услуга,
	|	КВП_СкидкиСрезПоследних.ЛьготнаяКатегория,
	|	КВП_СкидкиСрезПоследних.РазмерСкидки,
	|	КВП_СкидкиСрезПоследних.ЛицаПользующиесяЛьготами,
	|	КВП_СкидкиСрезПоследних.ОграничениеПоОбъемуУслуги,
	|	КВП_СкидкиСрезПоследних.ОграничениеПоСуммеЛьготы,
	|	КВП_СкидкиСрезПоследних.ПлощадьДляРасчетаОграничения
	|ПОМЕСТИТЬ врТаблицаСкидокСверхобъемные
	|ИЗ
	|	врТаблицаСкидок КАК врТаблицаСкидок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_Скидки.СрезПоследних(&НачалоПериода, Услуга В (&СписокУслуг)) 
	|			КАК КВП_СкидкиСрезПоследних
	|		ПО врТаблицаСкидок.Услуга = КВП_СкидкиСрезПоследних.Услуга
	|			И врТаблицаСкидок.ЛьготнаяКатегорияДляСверхобъема = КВП_СкидкиСрезПоследних.ЛьготнаяКатегория
	|			И (НЕ врТаблицаСкидок.ЛьготнаяКатегорияДляСверхобъема = ЗНАЧЕНИЕ(Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаСкидок.Услуга,
	|	врТаблицаСкидок.ЛьготнаяКатегория,
	|	врТаблицаСкидок.РазмерСкидки,
	|	врТаблицаСкидок.ЛицаПользующиесяЛьготами,
	|	врТаблицаСкидок.ОграничениеПоОбъемуУслуги,
	|	врТаблицаСкидок.ОграничениеПоСуммеЛьготы,
	|	врТаблицаСкидок.ПлощадьДляРасчетаОграничения,
	|	врТаблицаСкидок.ЛьготнаяКатегорияДляСверхобъема
	|ИЗ
	|	врТаблицаСкидок КАК врТаблицаСкидок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врТаблицаСкидокСверхобъемные.Услуга,
	|	врТаблицаСкидокСверхобъемные.ЛьготнаяКатегория,
	|	врТаблицаСкидокСверхобъемные.РазмерСкидки,
	|	врТаблицаСкидокСверхобъемные.ЛицаПользующиесяЛьготами,
	|	врТаблицаСкидокСверхобъемные.ОграничениеПоОбъемуУслуги,
	|	врТаблицаСкидокСверхобъемные.ОграничениеПоСуммеЛьготы,
	|	врТаблицаСкидокСверхобъемные.ПлощадьДляРасчетаОграничения,
	|	NULL
	|ИЗ
	|	врТаблицаСкидокСверхобъемные КАК врТаблицаСкидокСверхобъемные";
	
	Запрос.УстановитьПараметр("СписокЛьгот",       СписокЛьгот);
	Запрос.УстановитьПараметр("СписокУслуг",       СписокУслуг);
	Запрос.УстановитьПараметр("НачалоПериода",     КонецМесяца(Период));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуСкидок()

// Функция возвращает таблицу близких родственников жильцов.
Функция ПолучитьТаблицуБлизкихРодственников(ТаблицаЛьготников, ТаблицаЖильцов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛьготников.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаЛьготников.Льготник КАК Льготник,
	|	ТаблицаЛьготников.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ втЛьготников
	|ИЗ
	|	&ТаблицаЛьготников КАК ТаблицаЛьготников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЖильцов.Период КАК Период,
	|	ТаблицаЖильцов.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаЖильцов.Жилец КАК Жилец,
	|	ТаблицаЖильцов.ФизЛицо КАК ФизЛицо,
	|	ТаблицаЖильцов.Зарегистрирован КАК Зарегистрирован,
	|	ТаблицаЖильцов.Проживает КАК Проживает,
	|	ТаблицаЖильцов.Собственник КАК Собственник
	|ПОМЕСТИТЬ втЖильцов
	|ИЗ
	|	&ТаблицаЖильцов КАК ТаблицаЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Жильцы.Период КАК Период,
	|	Жильцы.ЛицевойСчет КАК ЛицевойСчет,
	|	Льготники.Льготник КАК Льготник,
	|	Льготники.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ втПериоды
	|ИЗ
	|	втЖильцов КАК Жильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛьготников КАК Льготники
	|		ПО Жильцы.ЛицевойСчет = Льготники.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СтепеньРодстваФизЛиц.ФизическоеЛицоОсновное КАК ФизическоеЛицоОсновное,
	|	УПЖКХ_СтепеньРодстваФизЛиц.ФизическоеЛицоСвязанное КАК ФизическоеЛицоСвязанное,
	|	УПЖКХ_СтепеньРодстваФизЛиц.Период КАК Период
	|ПОМЕСТИТЬ врТаблицаБлизкихРодственников
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(
	|			&ДатаКон,
	|			ФизическоеЛицоОсновное В
	|				(ВЫБРАТЬ
	|					Льготники.ФизЛицо
	|				ИЗ
	|					втЛьготников КАК Льготники)) КАК УПЖКХ_СтепеньРодстваФизЛиц
	|ГДЕ
	|	УПЖКХ_СтепеньРодстваФизЛиц.СтепеньРодства.БлизкоеРодство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЖильцов.Период КАК Период,
	|	ТаблицаЖильцов.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаЖильцов.Льготник КАК Льготник,
	|	ТаблицаБлизкихРодственников.ФизическоеЛицоСвязанное КАК Родственник
	|ПОМЕСТИТЬ втРодственников
	|ИЗ
	|	втПериоды КАК ТаблицаЖильцов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТаблицаБлизкихРодственников КАК ТаблицаБлизкихРодственников
	|		ПО ТаблицаЖильцов.ФизЛицо = ТаблицаБлизкихРодственников.ФизическоеЛицоОсновное
	|			И (ТаблицаБлизкихРодственников.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(ТаблицаБлизкихРодственников.Период) КАК Период
	|				ИЗ
	|					врТаблицаБлизкихРодственников КАК ТаблицаБлизкихРодственников
	|				ГДЕ
	|					ТаблицаБлизкихРодственников.Период <= КОНЕЦПЕРИОДА(ТаблицаЖильцов.Период, ДЕНЬ)
	|				СГРУППИРОВАТЬ ПО
	|					ТаблицаБлизкихРодственников.ФизическоеЛицоСвязанное))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Родственники.Период КАК Период,
	|	Родственники.ЛицевойСчет КАК ЛицевойСчет,
	|	Родственники.Льготник КАК Льготник,
	|	Сведения.Жилец КАК Родственник,
	|	Сведения.Зарегистрирован КАК Зарегистрирован,
	|	Сведения.Проживает КАК Проживает,
	|	Сведения.Собственник КАК Собственник
	|ИЗ
	|	втРодственников КАК Родственники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УПЖКХ_СведенияОЖильцах.Период КАК Период,
	|			УПЖКХ_СведенияОЖильцах.ЛицевойСчет КАК ЛицевойСчет,
	|			УПЖКХ_СведенияОЖильцах.Жилец КАК Жилец,
	|			УПЖКХ_СведенияОЖильцах.ФизЛицо КАК ФизЛицо,
	|			УПЖКХ_СведенияОЖильцах.Зарегистрирован КАК Зарегистрирован,
	|			УПЖКХ_СведенияОЖильцах.Проживает КАК Проживает,
	|			УПЖКХ_СведенияОЖильцах.Собственник КАК Собственник
	|		ИЗ
	|			втЖильцов КАК УПЖКХ_СведенияОЖильцах) КАК Сведения
	|		ПО Родственники.Родственник = Сведения.ФизЛицо
	|			И Родственники.ЛицевойСчет = Сведения.ЛицевойСчет
	|			И (Сведения.Период В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					УПЖКХ_СведенияОЖильцах.Период
	|				ИЗ
	|					втЖильцов КАК УПЖКХ_СведенияОЖильцах
	|				ГДЕ
	|					УПЖКХ_СведенияОЖильцах.Период <= КОНЕЦПЕРИОДА(Родственники.Период, ДЕНЬ)
	|					И УПЖКХ_СведенияОЖильцах.ЛицевойСчет = Родственники.ЛицевойСчет
	|					И УПЖКХ_СведенияОЖильцах.ФизЛицо = Родственники.Родственник
	|				УПОРЯДОЧИТЬ ПО
	|					УПЖКХ_СведенияОЖильцах.Период УБЫВ))";
	
	// Сразу отсечь близких родственников по признаку зарегистрирован / проживает / собственник
	// не можем, т.к. настройки расчета льгот перенесены на уровень услуг.
	// Т.е. для каждой отдельной услуги настройки могут быть разными.
	
	Запрос.УстановитьПараметр("ТаблицаЖильцов",    ТаблицаЖильцов);
	Запрос.УстановитьПараметр("ТаблицаЛьготников", ТаблицаЛьготников);
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Период));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуБлизкихРодственников()

// Функция возвращает таблицу влияния льготников на других льготников и жильцов.
Функция ПолучитьТаблицуВлиянияЛьготников(ТаблицаЛьготников, ТаблицаЖильцов, ТаблицаИзмененийЖильцов, ТаблицаСкидок, 
											ТаблицаРодственников, ЛицевойСчет, Услуга, НачалоПериода, КонецПериода)
	
	// подготовим таблицу влияния
	ТаблицаВлияния = Новый ТаблицаЗначений;
	ТаблицаВлияния.Колонки.Добавить("НомерСтроки",             Новый ОписаниеТипов("Число"));
	ТаблицаВлияния.Колонки.Добавить("ЛицевойСчет",             Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаВлияния.Колонки.Добавить("Льготник",                Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Жильцы"));
	ТаблицаВлияния.Колонки.Добавить("ЛьготнаяКатегория",       Новый ОписаниеТипов("СправочникСсылка.КВП_ЛьготныеКатегории"));
	ТаблицаВлияния.Колонки.Добавить("Услуга",                  Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	
	// Т.к. в расширенном алгоритме расчета льгот для готовых чисел вводятся "псевдожильцы",
	// реальных ссылок на которых в базе данных нет, то расширяем тип колонки "ПользующийсяЛьготой",
	// добавив в него строковое значение. В дальнейшем псевдожильцы будут нумероваться в следующем виде:
	// "Жилец1", "Жилец2" и т.д.
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("СправочникСсылка.УПЖКХ_Жильцы"));
	ТаблицаВлияния.Колонки.Добавить("ПользующийсяЛьготой",     Новый ОписаниеТипов(МассивТипов));
	ТаблицаВлияния.Колонки.Добавить("ПользующийсяЭтоЛьготник", Новый ОписаниеТипов("Булево"));
	
	мТаблицаРодственников = ТаблицаРодственников.Скопировать(, "ЛицевойСчет, Льготник, Родственник");
	мТаблицаРодственников.Свернуть("ЛицевойСчет, Льготник, Родственник");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЛьготников.ЛицевойСчет,
	|	ТаблицаЛьготников.Льготник,
	|	ТаблицаЛьготников.ЛьготнаяКатегория,
	|	ТаблицаЛьготников.Действие,
	|	ТаблицаЛьготников.НачалоПериода
	|ПОМЕСТИТЬ втЛьготниковБезОтбора
	|ИЗ
	|	&ТаблицаЛьготников КАК ТаблицаЛьготников
	|ГДЕ
	|	ТаблицаЛьготников.ЛицевойСчет = &ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Льготники.ЛицевойСчет КАК ЛицевойСчет,
	|	Льготники.Льготник,
	|	Льготники.ЛьготнаяКатегория,
	|	МАКСИМУМ(Льготники.НачалоПериода) КАК НачалоПериода
	|ПОМЕСТИТЬ втЛьготниковНаНачалоПериода
	|ИЗ
	|	втЛьготниковБезОтбора КАК Льготники
	|ГДЕ
	|	Льготники.НачалоПериода <= &НачалоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Льготники.ЛицевойСчет,
	|	Льготники.Льготник,
	|	Льготники.ЛьготнаяКатегория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛьготниковБезОтбора.ЛицевойСчет,
	|	втЛьготниковБезОтбора.Льготник,
	|	втЛьготниковБезОтбора.ЛьготнаяКатегория
	|ПОМЕСТИТЬ втЛьготников
	|ИЗ
	|	втЛьготниковБезОтбора КАК втЛьготниковБезОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛьготниковНаНачалоПериода КАК ЛьготникиНаНачало
	|		ПО втЛьготниковБезОтбора.НачалоПериода = ЛьготникиНаНачало.НачалоПериода
	|			И втЛьготниковБезОтбора.ЛицевойСчет = ЛьготникиНаНачало.ЛицевойСчет
	|			И втЛьготниковБезОтбора.Льготник = ЛьготникиНаНачало.Льготник
	|			И втЛьготниковБезОтбора.ЛьготнаяКатегория = ЛьготникиНаНачало.ЛьготнаяКатегория
	|ГДЕ
	|	втЛьготниковБезОтбора.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСкидок.ЛицаПользующиесяЛьготами,
	|	ТаблицаСкидок.Услуга,
	|	ТаблицаСкидок.ЛьготнаяКатегория
	|ПОМЕСТИТЬ втСкидок
	|ИЗ
	|	&ТаблицаСкидок КАК ТаблицаСкидок
	|ГДЕ
	|	ТаблицаСкидок.Услуга = &Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Льготники.ЛицевойСчет КАК ЛицевойСчет,
	|	Льготники.Льготник,
	|	Льготники.ЛьготнаяКатегория,
	|	Скидки.Услуга КАК Услуга,
	|	Скидки.ЛицаПользующиесяЛьготами
	|ИЗ
	|	втЛьготников КАК Льготники
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСкидок КАК Скидки
	|		ПО Льготники.ЛьготнаяКатегория = Скидки.ЛьготнаяКатегория
	|ГДЕ
	|	Скидки.Услуга = &Услуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Услуга
	|ИТОГИ ПО
	|	ЛицевойСчет,
	|	Услуга";
	
	Запрос.УстановитьПараметр("ТаблицаЛьготников", ТаблицаЛьготников);
	Запрос.УстановитьПараметр("ТаблицаСкидок",     ТаблицаСкидок);
	Запрос.УстановитьПараметр("ЛицевойСчет",       ЛицевойСчет);
	Запрос.УстановитьПараметр("Услуга",            Услуга);
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      КонецПериода);
	
	ВыборкаЛС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НомерСтроки = 0;
	
	Пока ВыборкаЛС.Следующий() Цикл
		
		ВыборкаУслуг = ВыборкаЛС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУслуг.Следующий() Цикл
			
			НачислятьПоОтсутствующему = НачислятьПоОтсутствующимЛьготникам(ВыборкаУслуг.Услуга);
			
			ВыборкаЛьгот = ВыборкаУслуг.Выбрать();
			Пока ВыборкаЛьгот.Следующий() Цикл
				
				СтруктураПрисутствия = ЛьготникПрисутствует(ТаблицаИзмененийЖильцов, ЛицевойСчет, ВыборкаЛьгот.Льготник, 
															НачалоПериода, НачислятьПоОтсутствующему);
				
				ЛьготникПрисутствует = СтруктураПрисутствия.Основное;
				Если НЕ (ЛьготникПрисутствует 
						 И (СтруктураПрисутствия.ДляНастройки ИЛИ НачислятьПоОтсутствующему.ВыполнятьРасчет)) Тогда
					Продолжить;
				КонецЕсли;
				
				// добавление записей в таблицу влияния
				Если ВыборкаЛьгот.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.ОдинЧеловек Тогда
					
					// добавление самого льготника
					НоваяСтрока = ТаблицаВлияния.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЛьгот);
					НоваяСтрока.ПользующийсяЛьготой = ВыборкаЛьгот.Льготник;
					НоваяСтрока.ПользующийсяЭтоЛьготник = Истина;
					НоваяСтрока.НомерСтроки = НомерСтроки;
					НомерСтроки = НомерСтроки + 1;
					
				ИначеЕсли ВыборкаЛьгот.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.Семья Тогда
					
					// добавление семьи
					Семья = ТаблицаЖильцов.НайтиСтроки(Новый Структура("ЛицевойСчет", ВыборкаЛьгот.ЛицевойСчет));
					Если Семья.Количество() > 0 Тогда
						
						Для Каждого ТекЖилец Из Семья Цикл
							
							// В целях оптимизации, а именно для того, чтобы уменьшить количество рассматриваемых вариантов
							// будем формировать не полную таблицу влияния. Т.е. при формировании таблицы влияния в ней не будет
							// строк, которые будут формировать заведомо дублирующие друг друга варианты.
							// Общий смысл данной оптимизации в следующем:
							// Если проживающий имеет льготу "ЛК_Х", то влиянием других проживающих на него по этой же "ЛК_Х"
							// можно пренебречь.
							// Уменьшая таблицу влияния мы тем самым уменьшаем количество рассматриваемых далее
							// (фактически дублирующих друг друга) вариантов.
							// 
							// Пример построения таблицы влияния:
							#Область ПримерПостроения
							// Пусть на л/с есть 3 проживающих. Два из них льготника.
							// Льготник1 имеет ЛК1 на себя и ЛК2 на семью.
							// Льготник2 имеет аналогичную ЛК2 на семью.
							// Без предлагаемых изменений полная Таблица влияния приняла бы следующий вид:
							// ____________________________________
							// |№|Льготник |Категория|Пользующийся|
							// ------------------------------------
							// |0|Льготник1|   ЛК1   |Льготник1   |
							// |1|Льготник1|   ЛК2   |Льготник1   |
							// |2|Льготник1|   ЛК2   |Льготник2   |
							// |3|Льготник1|   ЛК2   |Жилец3      |
							// |4|Льготник2|   ЛК2   |Льготник1   |
							// |5|Льготник2|   ЛК2   |Льготник2   |
							// |6|Льготник2|   ЛК2   |Жилец3      |
							// ------------------------------------
							// Предлагаемые изменения приведут к тому, что строки (2) и (4)
							// на этапе формирования таблицы влияния не будут добавлены или же будут удалены.
							// Т.к. Льготник1 имеет сам льготу ЛК2, то строка (4), в которой Льготник2 влияет на него по ЛК2, лишняя.
							// Аналогично, т.к. Льготник2 сам имеет льготу ЛК2, то строка (2), в которой Льготник1 влияет на него по ЛК2, также лишняя.
							// Таким образом Таблица влияния примет следующий конечный вид (после перенумерации строк):
							// ____________________________________
							// |№|Льготник |Категория|Пользующийся|
							// ------------------------------------
							// |0|Льготник1|   ЛК1   |Льготник1   |
							// |1|Льготник1|   ЛК2   |Льготник1   |
							// |2|Льготник1|   ЛК2   |Жилец3      |
							// |3|Льготник2|   ЛК2   |Льготник2   |
							// |4|Льготник2|   ЛК2   |Жилец3      |
							// ------------------------------------
							#КонецОбласти
							
							ТекЛицевойСчет         = ВыборкаЛьгот.ЛицевойСчет;
							ТекЛьготник            = ВыборкаЛьгот.Льготник;
							ТекЛьготнаяКатегория   = ВыборкаЛьгот.ЛьготнаяКатегория;
							ТекУслуга              = ВыборкаЛьгот.Услуга;
							ТекПользующийсяЛьготой = ТекЖилец.Жилец;
							
							// Проверим на кого влияет текущий льготник на себя или на кого-то другого.
							ЛьготникВлияетНаСебя = Ложь;
							Если ТекЛьготник = ТекПользующийсяЛьготой Тогда
								ЛьготникВлияетНаСебя = Истина;
							КонецЕсли;
							
							Отбор = Новый Структура();
							Отбор.Вставить("ЛицевойСчет",         ТекЛицевойСчет);
							Отбор.Вставить("Услуга",              ТекУслуга);
							Отбор.Вставить("ЛьготнаяКатегория",   ТекЛьготнаяКатегория);
							Отбор.Вставить("ПользующийсяЛьготой", ТекПользующийсяЛьготой);
							
							// 1. Если текущий льготник влияет НЕ на себя (на "Проживающий_Х"), то будем искать в таблице влияния строки,
							// в которых по такой же категории Проживающий_Х влияет сам на себя.
							// Если такие строки будут найдены, то в таблицу влияния новую строку добавлять не нужно,
							// т.к. она, фактически, будет формировать дублирующие варианты.
							// 2. Если же текущий льготник влияет сам на себя, то будем искать в таблице влияния строки,
							// в которых какой-угодно проживающий по такой же категории влияет на текущего льготника.
							// Если такие строки будут найдены, то их необходимо удалить из таблицы влияния,
							// т.к. льготник все равно не может одновременно использовать льготную категорию свою и от кого-то другого.
							Если НЕ ЛьготникВлияетНаСебя Тогда
								Отбор.Вставить("Льготник", ТекПользующийсяЛьготой);
							КонецЕсли;
							
							НайденныеСтроки = ТаблицаВлияния.НайтиСтроки(Отбор);
							
							Если НайденныеСтроки.Количество() = 0 ИЛИ ЛьготникВлияетНаСебя Тогда
							
								НоваяСтрока = ТаблицаВлияния.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЛьгот);
								НоваяСтрока.ПользующийсяЛьготой = ТекЖилец.Жилец;
								НоваяСтрока.НомерСтроки = НомерСтроки;
								НомерСтроки = НомерСтроки + 1;
								
								Если ЛьготникВлияетНаСебя Тогда
									Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
										ТаблицаВлияния.Удалить(НайденнаяСтрока);
									КонецЦикла;
								КонецЕсли;
								
								// Проверим, является ли пользующийся льготником.
								// Если является, то установим флаг "ПользующийсяЭтоЛьготник" в значение "ИСТИНА".
								НайденныеСтроки = ТаблицаЛьготников.НайтиСтроки(Новый Структура("ЛицевойСчет, Льготник, Действие", ТекЛицевойСчет, НоваяСтрока.ПользующийсяЛьготой, Истина));
								Если НайденныеСтроки.Количество() > 0 Тогда
									НоваяСтрока.ПользующийсяЭтоЛьготник = Истина;
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				ИначеЕсли ВыборкаЛьгот.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.БлизкиеРодственники Тогда
					
					// добавление родственников
					Родственники = мТаблицаРодственников.НайтиСтроки(Новый Структура("ЛицевойСчет, Льготник",
					                                                ВыборкаЛьгот.ЛицевойСчет, ВыборкаЛьгот.Льготник));
				
					Для Каждого ТекРодственник Из Родственники Цикл
						
						ТекЛицевойСчет         = ВыборкаЛьгот.ЛицевойСчет;
						ТекЛьготник            = ВыборкаЛьгот.Льготник;
						ТекЛьготнаяКатегория   = ВыборкаЛьгот.ЛьготнаяКатегория;
						ТекУслуга              = ВыборкаЛьгот.Услуга;
						ТекПользующийсяЛьготой = ТекРодственник.Родственник;
						
						// Проверим на кого влияет текущий льготник на себя или на кого-то другого.
						ЛьготникВлияетНаСебя = Ложь;
						Если ТекЛьготник = ТекПользующийсяЛьготой Тогда
							ЛьготникВлияетНаСебя = Истина;
						КонецЕсли;
						
						Отбор = Новый Структура();
						Отбор.Вставить("ЛицевойСчет",         ТекЛицевойСчет);
						Отбор.Вставить("Услуга",              ТекУслуга);
						Отбор.Вставить("ЛьготнаяКатегория",   ТекЛьготнаяКатегория);
						Отбор.Вставить("ПользующийсяЛьготой", ТекПользующийсяЛьготой);
						
						// 1. Если текущий льготник влияет НЕ на себя (на "Проживающий_Х"), то будем искать в таблице влияния строки,
						// в которых по такой же категории Проживающий_Х влияет сам на себя.
						// Если такие строки будут найдены, то в таблицу влияния новую строку добавлять не нужно,
						// т.к. она, фактически, будет формировать дублирующие варианты.
						// 2. Если же текущий льготник влияет сам на себя, то будем искать в таблице влияния строки,
						// в которых какой-угодно проживающий по такой же категории влияет на текущего льготника.
						// Если такие строки будут найдены, то их необходимо удалить из таблицы влияния,
						// т.к. льготник все равно не может одновременно использовать льготную категорию свою и от кого-то другого.
						Если НЕ ЛьготникВлияетНаСебя Тогда
							Отбор.Вставить("Льготник", ТекПользующийсяЛьготой);
						КонецЕсли;
						
						НайденныеСтроки = ТаблицаВлияния.НайтиСтроки(Отбор);
						
						Если НайденныеСтроки.Количество() = 0 ИЛИ ЛьготникВлияетНаСебя Тогда
							
							НоваяСтрока = ТаблицаВлияния.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЛьгот);
							НоваяСтрока.ПользующийсяЛьготой = ТекРодственник.Родственник;
							НоваяСтрока.НомерСтроки = НомерСтроки;
							НомерСтроки = НомерСтроки + 1;
							
							Если ЛьготникВлияетНаСебя Тогда
								Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
									ТаблицаВлияния.Удалить(НайденнаяСтрока);
								КонецЦикла;
							КонецЕсли;
							
							// Проверим, является ли пользующийся льготником.
							// Если является, то установим флаг "ПользующийсяЭтоЛьготник" в значение "ИСТИНА".
							НайденныеСтроки = ТаблицаЛьготников.НайтиСтроки(Новый Структура("ЛицевойСчет, Льготник, Действие", ТекЛицевойСчет, НоваяСтрока.ПользующийсяЛьготой, Истина));
							Если НайденныеСтроки.Количество() > 0 Тогда
								НоваяСтрока.ПользующийсяЭтоЛьготник = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					НоваяСтрока = ТаблицаВлияния.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЛьгот);
					НоваяСтрока.ПользующийсяЛьготой = ВыборкаЛьгот.Льготник;
					НоваяСтрока.ПользующийсяЭтоЛьготник = Истина;
					НоваяСтрока.НомерСтроки = НомерСтроки;
					НомерСтроки = НомерСтроки + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Отсортируем таблицу влияния - сперва будут строки с льготниками, а потом уже строки с жильцами, не имеющими льгот.
	ТаблицаВлияния.Сортировать("ПользующийсяЭтоЛьготник Убыв");
	
	// Необходимо заново расставить номера строк таблицы влияния, т.к. возможно, что какие-то строки были удалены в процессе формирования
	// и нумерация идет не по порядку, а нам нужна нумерация по порядку, т.к. в дальнейшем она будет использоваться.
	ПорядковыйНомер = 0;
	Для Каждого СтрокаТаблицыВлияния Из ТаблицаВлияния Цикл
		СтрокаТаблицыВлияния.НомерСтроки = ПорядковыйНомер;
		ПорядковыйНомер = ПорядковыйНомер + 1;
	КонецЦикла;
	
	Возврат ТаблицаВлияния;
	
КонецФункции // ПолучитьТаблицуВлиянияЛьготников()

// Функция возвращает таблицу наилучших вариантов расчета льгот для определенных лицевых счетов и услуг.
Функция ПолучитьТаблицуНаилучшихВариантовРасчетаЛьгот(ТаблицаВлияния, ТаблицаЖильцов, ТаблицаСкидок,
														ТаблицаБлизкихРодственников, ТаблицаНачислений, ТаблицаИзмененийЖильцов,
														НачалоПериода, КонецПериода, НастройкиРасчетаЛьготПоУслуге)
	
	// Сформируем таблицу льготников, действующих в текущем цикле.
	врТаблицаЛьготников = Новый ТаблицаЗначений;
	врТаблицаЛьготников.Колонки.Добавить("Льготник");
	врТаблицаЛьготников.Колонки.Добавить("ЛьготнаяКатегория");
	
	Для Каждого ТекСтрокаВлияния Из ТаблицаВлияния Цикл
		Если ЗначениеЗаполнено(ТекСтрокаВлияния.Льготник) Тогда
			НоваяСтрока = врТаблицаЛьготников.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаВлияния);
		КонецЕсли;
	КонецЦикла;
	
	врТаблицаЛьготников.Свернуть("Льготник,ЛьготнаяКатегория");
	
	ТаблицаВариантов = Новый ТаблицаЗначений;
	ТаблицаВариантов.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаВариантов.Колонки.Добавить("Услуга",      Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаВариантов.Колонки.Добавить("Вариант");
	ТаблицаВариантов.Колонки.Добавить("КоличествоЛьгот", Новый ОписаниеТипов("Число"));
	
	МассивВариаций = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВлияния.НомерСтроки,
	|	ТаблицаВлияния.ЛицевойСчет,
	|	ТаблицаВлияния.Услуга,
	|	ТаблицаВлияния.Льготник,
	|	ТаблицаВлияния.ЛьготнаяКатегория,
	|	ТаблицаВлияния.ПользующийсяЛьготой
	|ПОМЕСТИТЬ Льготники
	|ИЗ
	|	&ТаблицаВлияния КАК ТаблицаВлияния
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Льготники.НомерСтроки,
	|	Льготники.ЛицевойСчет КАК ЛицевойСчет,
	|	Льготники.Услуга КАК Услуга,
	|	Льготники.Льготник,
	|	Льготники.ЛьготнаяКатегория,
	|	Льготники.ПользующийсяЛьготой
	|ИЗ
	|	Льготники КАК Льготники
	|ИТОГИ ПО
	|	ЛицевойСчет,
	|	Услуга";
	
	Запрос.УстановитьПараметр("ТаблицаВлияния", ТаблицаВлияния);
	
	ВыборкаЛС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЛС.Следующий() Цикл
		
		Жильцы = ТаблицаЖильцов.НайтиСтроки(Новый Структура("ЛицевойСчет", ВыборкаЛС.ЛицевойСчет));
		КоличествоЖильцов = Жильцы.Количество();
		Если КоличествоЖильцов > 0 Тогда
			
			ВыборкаУслуг = ВыборкаЛС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаУслуг.Следующий() Цикл
				
				// Создадим массив, в который поместим всех жильцов, но льготники будут располагаться выше жильцов-нельготников.
				// Это необходимо для того, чтобы в дальнейшем корректно сформировался МассивВариаций.
				врМассивЖильцов = Новый Массив;
				Для Каждого ТекЖилец Из Жильцы Цикл
					
					НайденныеСтроки = ТаблицаВлияния.НайтиСтроки(Новый Структура("ПользующийсяЛьготой, ПользующийсяЭтоЛьготник", ТекЖилец.Жилец, Истина));
					Если НайденныеСтроки.Количество() = 0 Тогда
						врМассивЖильцов.Добавить(ТекЖилец);
					Иначе
						врМассивЖильцов.Вставить(0, ТекЖилец);
					КонецЕсли;
					
				КонецЦикла;
				
				// Формирование массива вариантов.
				// Для каждого жильца найдем строки из таблицы влияния, где жилец встречается в колонке "ПользующийсяЛьготой".
				Для Каждого ТекЖилец Из врМассивЖильцов Цикл
					
					ТекМассивСтрок = Новый Массив;
					ВыборкаДеталей = ВыборкаУслуг.Выбрать();
					Пока ВыборкаДеталей.Следующий() Цикл
						
						Если ТекЖилец.Жилец = ВыборкаДеталей.ПользующийсяЛьготой Тогда
							
							ТекМассивСтрок.Добавить(ТаблицаВлияния.Получить(ВыборкаДеталей.НомерСтроки));
							
						КонецЕсли;
						
					КонецЦикла; // цикл по деталям
					
					Если ТекМассивСтрок.Количество() > 0 Тогда
						МассивВариаций.Добавить(ТекМассивСтрок);
					КонецЕсли;
					
				КонецЦикла; // цикл по жильцам
				
				// Сформируем и переберем таблицу возможных вариантов и найдем лучший.
				ЛучшийВариант = ПолучитьЛучшийВариантРасчетаЛьготы(ТаблицаВлияния, врТаблицаЛьготников, МассивВариаций, ТаблицаСкидок,
																	ТаблицаБлизкихРодственников, ВыборкаУслуг.Услуга, ВыборкаЛС.ЛицевойСчет,
																	КоличествоЖильцов, ТаблицаНачислений, ТаблицаИзмененийЖильцов, 
																	НачалоПериода, КонецПериода, НастройкиРасчетаЛьготПоУслуге);
				Если Не ЛучшийВариант.Вариант = Неопределено Тогда
					НоваяСтрока = ТаблицаВариантов.Добавить();
					НоваяСтрока.ЛицевойСчет     = ВыборкаЛС.ЛицевойСчет;
					НоваяСтрока.Услуга          = ВыборкаУслуг.Услуга;
					НоваяСтрока.Вариант         = ЛучшийВариант.Вариант;
					НоваяСтрока.КоличествоЛьгот = ЛучшийВариант.КоличествоЛьгот;
				КонецЕсли;
				
				МассивВариаций.Очистить();
				
			КонецЦикла; // цикл по услугам
			
		КонецЕсли;
		
	КонецЦикла; // цикл по лицевым счетам
	
	Возврат ТаблицаВариантов;
	
КонецФункции // ПолучитьТаблицуНаилучшихВариантовРасчетаЛьгот()

// Функция формирует возможные варианты расчета льготы и выбирает из них лучший.
Функция ПолучитьЛучшийВариантРасчетаЛьготы(ТаблицаВлияния, врТаблицаЛьготников, МассивВариаций, ТаблицаСкидок,
											ТаблицаБлизкихРодственников, мУслуга, ЛицевойСчет, КоличествоЖильцов,
											ТаблицаНачислений, ТаблицаИзмененийЖильцов, НачалоПериода, КонецПериода,
											НастройкиРасчетаЛьготПоУслуге)
	
	ТаблицаВсехВозможныхВариантов = Новый ТаблицаЗначений;
	ТаблицаВсехВозможныхВариантов.Колонки.Добавить("Вариант");
	
	// Создадим массив, который будет содержать комбинацию строк из массива вариантов.
	МассивВариантов = Новый Массив;
	КоличествоРазрядов = МассивВариаций.Количество() - 1;
	Для Индекс = 0 По КоличествоРазрядов Цикл
		МассивВариантов.Добавить(0);
	КонецЦикла;
	
	// Сформируем таблицу со всеми возможными вариантами комбинаций строк из массива вариантов.
	ПеребратьВсеВарианты(ТаблицаВлияния, МассивВариантов, МассивВариаций, ТаблицаВсехВозможныхВариантов);
	
	ТаблицаВарианта = Новый ТаблицаЗначений;
	ТаблицаВарианта.Колонки.Добавить("Льготник",            Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Жильцы"));
	ТаблицаВарианта.Колонки.Добавить("ЛьготнаяКатегория",   Новый ОписаниеТипов("СправочникСсылка.КВП_ЛьготныеКатегории"));
	ТаблицаВарианта.Колонки.Добавить("ПользующийсяЛьготой", Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Жильцы"));
	
	// Выбираем лучший вариант. При сравнении вариантов выбираем лучший, исходя из правил:
	// Вариант считается лучшим, если сумма льготы больше по абсолютному значению (модулю);
	// Если суммы льгот равны, то лучшим будет считаться тот, у которого использовано больше льгот.
	// Для запоминания наилучшего варианта.
	НаилучшаяСумма         = 0;
	КоличествоЛьгот        = 0;
	КоличествоПользующихся = 0;
	НаилучшийВариант       = Неопределено;
	
	// получим данные по начислениям для текущего под периода
	ДанныеПоНачислениям = ПолучитьДанныеПоНачислениям(ТаблицаНачислений, ЛицевойСчет,
	                                                  мУслуга, НачалоПериода);
	КоличествоЖильцовНаЛС = ПолучитьКоличествоЖильцов(ТаблицаИзмененийЖильцов, ЛицевойСчет, НачалоПериода);
	
	// Для каждого варианта рассчитаем сумму льготы.
	Для Каждого ТекВариант Из ТаблицаВсехВозможныхВариантов Цикл
		
		ТаблицаВарианта.Очистить();
		Для Каждого ТекСтрока Из ТекВариант.Вариант Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаВарианта.Добавить(), ТекСтрока);
		КонецЦикла;
		
		// запомним количество используемых льгот
		мТаблицаЛьгот = ТаблицаВарианта.Скопировать(, "ЛьготнаяКатегория");
		мТаблицаЛьгот.Свернуть("ЛьготнаяКатегория");
		
		ТекКоличествоЛьгот = мТаблицаЛьгот.Количество();
		
		// Получим количество пользующихся льготой:
		// В текущей реализации нет необходимости получать количество пользующихся льготой функцией,
		// т.к. количество строк в текущем варианте и является количеством пользующихся.
		ТекКоличествоПользующихся = ТаблицаВарианта.Количество();
		
		// Получим количество жильцов, которые имеются в текущем подпериоде.
		Если НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги
					= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой Тогда
			КоличествоЖильцов = ТекКоличествоПользующихся;
		ИначеЕсли НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги
					= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчета Тогда
			КоличествоЖильцов = КоличествоЖильцовНаЛС;
		Иначе
			КоличествоЖильцов = ТекКоличествоЛьгот;
		КонецЕсли;
		
		// рассчитаем сумму по текущей льготе
		ТекСумма = ПроизвестиРасчетЛьготы(ТаблицаВарианта, ТаблицаСкидок, ТаблицаНачислений, ЛицевойСчет, мУслуга,
											ТекКоличествоЛьгот, ТекКоличествоПользующихся, КоличествоЖильцовНаЛС,
											КоличествоЖильцов, , ТаблицаИзмененийЖильцов, НачалоПериода, КонецПериода, 
											ДанныеПоНачислениям, НастройкиРасчетаЛьготПоУслуге);
		
		// Сравнение наилучшей и текущей суммы будем производить следующим образом:
		// 1. Если итоговая сумма начислений меньше или равна нулю, то и рассчитанные суммы льгот по различным вариантам
		//    тоже будут меньше или равны нулю. В таком случае нам нужно рассчитать льготу таким образом, что бы вернуть большую льготу.
		//    (льгота со знаком "-" - это увеличение итоговой суммы к оплате на сумму льготы).
		//    При сравнении таких сумм наилучшей суммой будет наибольшая сумма по модулю.
		//    Т.е., например:
		//    наилучшая сумма: НаилучшаяСумма = -40;
		//    текущая сумма: ТекСумма = -90.
		//    В таком случае при сравнении нужно взять модули этих чисел (т.е. их значения со знаком "+")
		//    врНаилучшаяСумма = |-40| = 40;
		//    врТекСумма = |-90| = 90.
		//    И сравнение уже производим среди чисел врНаилучшаяСумма и врТекСумма. В итоге получаем что (врНаилучшаяСумма < врТекСумма) = (40 < 90)
		//    Выражение принимает значение ИСТИНА, и поэтому в наилучшую сумму уже берется значение ТекСумма = -90 и наилучшей суммой становиться значение = -90.
		//
		// 2. Если итоговая сумма начислений больше нуля, то и рассчитанные суммы льгот по различным вариантам
		//    тоже будут больше нуля. В таком случае нам нужно рассчитать льготу таким образом, что бы начислить большую льготу.
		//    (льгота со знаком "+" - это уменьшение итоговой суммы к оплате на сумму льготы).
		//    Сравнение таких сумм будем производить обычным образом.
		//    Т.е., например:
		//    наилучшая сумма: НаилучшаяСумма = 40;
		//    текущая сумма: ТекСумма = 90.
		//    врНаилучшаяСумма = 40;
		//    врТекСумма = 90.
		//    Сравнение производим обычным образом (врНаилучшаяСумма < врТекСумма) = (40 < 90)
		//    Выражение принимает значение ИСТИНА, и поэтому в наилучшую сумму берется значение ТекСумма = 90 и наилучшей суммой становиться значение = 90.
		врНаилучшаяСумма = НаилучшаяСумма;
		врТекСумма       = ТекСумма;
		// Если наилучшая сумма меньше или равна нулю и текущая сумма меньше или равна нулю,
		// то необходимо для сравнения во временные переменные брать модули этих значений.
		Если НаилучшаяСумма <= 0 И ТекСумма <= 0 Тогда
			врНаилучшаяСумма = -врНаилучшаяСумма;
			врТекСумма       = -врТекСумма;
		КонецЕсли;
		
		// Сравним временную переменную текущего варианта с временной переменной наилучшего варианта.
		Если врНаилучшаяСумма < врТекСумма
		Или (врНаилучшаяСумма = врТекСумма И КоличествоЛьгот < ТекКоличествоЛьгот)
		Или (врНаилучшаяСумма = врТекСумма И КоличествоПользующихся < ТекКоличествоПользующихся) Тогда
		
			// Переопределение наилучшего вариант производим уже с изначальными значениями.
			НаилучшаяСумма         = ТекСумма;
			КоличествоЛьгот        = ТекКоличествоЛьгот;
			КоличествоПользующихся = ТекКоличествоПользующихся;
			НаилучшийВариант       = ТекВариант.Вариант;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Структура = Новый Структура;
	Структура.Вставить("Вариант",         НаилучшийВариант);
	Структура.Вставить("КоличествоЛьгот", КоличествоЛьгот);
	Возврат Структура;
	
КонецФункции // ПолучитьЛучшийВариантРасчетаЛьготы()

// Процедура получает таблицу всех возможных вариантов расчета льготы.
// При этом заведомо неверные варианты отсекаются на этапе формирования каждого отдельного варианта.
Процедура ПеребратьВсеВарианты(ТаблицаВлияния, МассивВариантов, МассивВариаций, Таблица)
	
	// Рассмотрим на примере формирование Таблицы всех возможных вариантов:
	#Область ОписаниеАлгоритма
	// Пусть на л/с есть 3 проживающих. Два из них льготника.
	// Льготник1 имеет ЛК1 на семью и ЛК2 на себя.
	// Льготник2 имеет ЛК3 на семью.
	// Таблица вариантов в данном случае будет иметь следующий вид:
	// ____________________________________
	// |№|Льготник |Категория|Пользующийся|
	// ------------------------------------
	// |0|Льготник1|   ЛК1   |Льготник1   | 1
	// |1|Льготник1|   ЛК1   |Льготник2   |     1
	// |2|Льготник1|   ЛК1   |Жилец3      |         1
	// |3|Льготник1|   ЛК2   |Льготник1   | 2
	// |4|Льготник2|   ЛК3   |Льготник1   | 3
	// |5|Льготник2|   ЛК3   |Льготник2   |     2
	// |6|Льготник2|   ЛК3   |Жилец3      |         2
	// ------------------------------------
	// Справа от таблицы влияния указаны по порядку цифры, означающие что в данной строке происходит влияние на проживающего.
	// Т.е. 
	//		на Льготника1 влияние оказано в строках (0), (3) и (4).
	//		на Льготника2 влияние оказано в строках (1) и (5).
	//		на Жильца3 влияние оказано в строках (2) и (6).
	// Алгоритм формирования таблицы всех возможных вариантов:
	// Вариант №1:
	//		1. Берем первое встречающееся значение по Льготнику1 - Строка (0). Добавляем в текущий вариант и в соответствие.
	//		2. Берем первое встречающееся значение по Льготнику2 - Строка (1).
	//		2.1. В варианте уже что-то добавлено.
	//		2.2. На текущего проживающего (Льготник2) влияет другой льготник (Льготник1) по категории ЛК1.
	//		2.3. Проверяем по соответствию, использует ли в текущем варианте Льготник1 ЛК1. Это действительно так - добавляем строку в текущий вариант.
	//		3. Берем первое встречающееся значение по Жильцу3 - Строка (2).
	//		3.1. В варианте уже что-то добавлено.
	//		3.2. На текущего проживающего (Жилец3) влияет другой льготник (Льготник1) по категории ЛК1.
	//		3.3. Проверяем по соответствию, использует ли в текущем варианте Льготник1 ЛК1. Это действительно так - добавляем строку в текущий вариант.
	// Проживающие закончились - первый вариант сформирован. Он верный, т.к. ничему не противоречит.
	// Добавляем Вариант №1 в таблицу всех возможных вариантов.
	// Увеличиваем значение самого последнего разряда, т.е. ищем следующую строку, в которой оказано влияние на Жильца3.
	//
	// Вариант №2:
	//		1. и 2. Аналогичны Варианту №1.
	//		3. Берем второе значение по Жильцу3 - Строка (6).
	//		3.1. В варианте уже что-то добавлено.
	//		3.2. На текущего проживающего (Жилец3) влияет другой льготник (Льготник2) по категории ЛК3.
	//		3.3. Проверяем по соответствию, использует ли в текущем варианте Льготник2 ЛК3. 
	//			 Это не так, т.к. Льготник2 использует категорию ЛК1.
	//		3.4. Проверяем, является ли текущий проживающий льготником - не является.
	//		3.5. Проверяем, мог бы текущий проживающий получать льготу одного из уже добавленных в вариант льготников - мог бы (от Льготника1).
	//			 Значит текущий проживающий недополучает льготу и данный вариант неверный.
	// Вариант №2 определился как неверным на третьем разряде (в нашем случае он последний). В таблицу всех возможных вариантов он добавлен не будет.
	// Пытаемся увеличить третий разряд.
	// Т.к. третий разряд уже некуда увеличивать, то обнуляем его и увеличиваем предыдущий (второй) разряд.
	//
	// Вариант №3:
	//		1. Аналогичен Варианту №1.
	//		2. Берем второе встречающееся значение по Льготнику2 - Строка (5).
	//		2.1. В варианте уже что-то добавлено.
	//		2.2. Текущий проживающий (Льготник2) влияет сам на себя по категории ЛК3. Добавляем в текущий вариант и в соответствие.
	//		3. Берем первое встречающееся значение по Жильцу3 - Строка (2).
	//		3.1. В варианте уже что-то добавлено.
	//		3.2. На текущего проживающего (Жилец3) влияет другой льготник (Льготник1) по категории ЛК1.
	//		3.3. Проверяем по соответствию, использует ли в текущем варианте Льготник1 ЛК1. Это действительно так - добавляем строку в текущий вариант.
	// Проживающие закончились - вариант сформирован. Он верный, т.к. ничему не противоречит.
	// Добавляем Вариант №3 в таблицу всех возможных вариантов.
	// Увеличиваем значение самого последнего разряда.
	//
	// Вариант №4:
	//		1. и 2. Аналогичны Варианту №3.
	//		3. Берем второе значение по Жильцу3 - Строка (6).
	//		3.1. В варианте уже что-то добавлено.
	//		3.2. На текущего проживающего (Жилец3) влияет другой льготник (Льготник2) по категории ЛК3.
	//		3.3. Проверяем по соответствию, использует ли в текущем варианте Льготник2 ЛК3. Это действительно так - добавляем строку в текущий вариант.
	// Проживающие закончились - вариант сформирован. Он верный, т.к. ничему не противоречит.
	// Добавляем Вариант №4 в таблицу всех возможных вариантов.
	// Увеличиваем значение самого последнего разряда.
	// Последний (третий) разряд уже увеличивать некуда, обнуляем его и увеличиваем предыдущий (второй) разряд.
	// Предыдущий (второй) разряд уже увеличивать некуда, обнуляем его и увеличиваем предыдущий (первый) разряд.
	//
	// Вариант №5:
	//		1. Берем второе значение по Льготнику1 - Строка (3). Добавляем в текущий вариант и в соответствие.
	//		2. Берем первое встречающееся значение по Льготнику2 - Строка (1).
	//		2.1. В варианте уже что-то добавлено.
	//		2.2. На текущего проживающего (Льготник2) влияет другой льготник (Льготник1) по категории ЛК1.
	//		2.3. Проверяем по соответствию, использует ли в текущем варианте Льготник1 ЛК1.
	//			 Это не так, т.к. Льготник1 использует категорию ЛК2.
	//		2.4. Проверяем является ли текущий проживающий льготником - является,
	//			 но при этом получает неиспользуемую льготную категорию и данный вариант неверный - рассматривать дальнейшие разряды нет смысла.
	// Вариант №5 определился как неверный на втором разряде. В таблицу всех возможных вариантов он добавлен не будет.
	// Увеличиваем значение второго разряда.
	//
	// Вариант №6:
	//		1. Аналогичнен Варианту №5.
	//		2. Берем второе встречающееся значение по Льготнику2 - Строка (5).
	//		2.1. В варианте уже что-то добавлено.
	//		2.2. Текущий проживающий (Льготник2) влияет сам на себя по категории ЛК3. Добавляем в текущий вариант и в соответствие.
	//		3. Берем первое встречающееся значение по Жильцу3 - Строка (2).
	//		3.1. В варианте уже что-то добавлено.
	//		3.2. На текущего проживающего (Жилец3) влияет другой льготник (Льготник1) по категории ЛК1.
	//		3.3. Проверяем по соответствию, использует ли в текущем варианте Льготник1 ЛК1.
	//			 Это не так, т.к. Льготник1 использует категорию ЛК2.
	//		3.4. Проверяем, является ли текущий проживающий льготником - не является.
	//		3.5. Проверяем, мог бы текущий проживающий получать льготу одного из уже добавленных в вариант льготников - мог бы (от Льготника2).
	//			 Значит текущий проживающий недополучает льготу и данный вариант неверный.
	// Вариант №6 определился как неверным на третьем разряде. В таблицу всех возможных вариантов он добавлен не будет.
	// Увеличиваем значение третьего разряда.
	//
	// Вариант №7:
	//		1. и 2. Аналогичны Варианту №6.
	//		3. Берем второе значение по Жильцу3 - Строка (6).
	//		3.1. В варианте уже что-то добавлено.
	//		3.2. На текущего проживающего (Жилец3) влияет другой льготник (Льготник2) по категории ЛК3.
	//		3.3. Проверяем по соответствию, использует ли в текущем варианте Льготник2 ЛК3. Это действительно так - добавляем строку в текущий вариант.
	// Проживающие закончились - вариант сформирован. Он верный, т.к. ничему не противоречит.
	// Добавляем Вариант №7 в таблицу всех возможных вариантов.
	// Увеличиваем значение самого последнего разряда.
	// Последний (третий) разряд уже увеличивать некуда, обнуляем его и увеличиваем предыдущий (второй) разряд.
	// Предыдущий (второй) разряд уже увеличивать некуда, обнуляем его и увеличиваем предыдущий (первый) разряд.
	//
	// Вариант №8:
	//		1. Берем третье значение по Льготнику1 - Строка (4). Добавляем в текущий вариант и в соответствие.
	//		2. Берем первое встречающееся значение по Льготнику2 - Строка (1).
	//		2.1. В варианте уже что-то добавлено.
	//		2.2. На текущего проживающего (Льготник2) влияет другой льготник (Льготник1) по категории ЛК1.
	//		2.3. Проверяем по соответствию, использует ли в текущем варианте Льготник1 ЛК1.
	//			 Это не так, т.к. Льготник1 использует категорию ЛК3.
	//		2.4. Проверяем является ли текущий проживающий льготником - является,
	//			 но при этом получает неиспользуемую льготную категорию и данный вариант неверный - рассматривать дальнейшие разряды нет смысла.
	// Вариант №8 определился как неверный на втором разряде. В таблицу всех возможных вариантов он добавлен не будет.
	// Увеличиваем значение второго разряда.
	//
	// Вариант №9:
	//		1. Аналогичнен Варианту №8.
	//		2. Берем второе встречающееся значение по Льготнику2 - Строка (5).
	//		2.1. В варианте уже что-то добавлено.
	//		2.2. Текущий проживающий (Льготник2) влияет сам на себя по категории ЛК3. Добавляем в текущий вариант и в соответствие.
	//		3. Берем первое встречающееся значение по Жильцу3 - Строка (2).
	//		3.1. В варианте уже что-то добавлено.
	//		3.2. На текущего проживающего (Жилец3) влияет другой льготник (Льготник1) по категории ЛК1.
	//		3.3. Проверяем по соответствию, использует ли в текущем варианте Льготник1 ЛК1.
	//			 Это не так, т.к. Льготник1 использует категорию ЛК3.
	//		3.4. Проверяем, является ли текущий проживающий льготником - не является.
	//		3.5. Проверяем, мог бы текущий проживающий получать льготу одного из уже добавленных в вариант льготников - мог бы (от Льготника2).
	//			 Значит текущий проживающий недополучает льготу и данный вариант неверный.
	// Вариант №9 определился как неверным на третьем разряде. В таблицу всех возможных вариантов он добавлен не будет.
	// Увеличиваем значение третьего разряда.
	//
	// Вариант №10:
	//		1. и 2. Аналогичны Варианту №9.
	//		3. Берем второе значение по Жильцу3 - Строка (6).
	//		3.1. В варианте уже что-то добавлено.
	//		3.2. На текущего проживающего (Жилец3) влияет другой льготник (Льготник2) по категории ЛК3.
	//		3.3. Проверяем по соответствию, использует ли в текущем варианте Льготник2 ЛК3. Это действительно так - добавляем строку в текущий вариант.
	// Проживающие закончились - вариант сформирован. Он верный, т.к. ничему не противоречит.
	// Добавляем Вариант №10 в таблицу всех возможных вариантов.
	//
	// Т.к. все разряды максимальны, то перебор вариантов завершен.
	// В итоге были выбраны 5 вариантов. В нашем примере это варианты:
	//		№1  или (0)(1)(2)
	//		№3  или (0)(5)(2)
	//		№4  или (0)(5)(6)
	//		№7  или (3)(5)(6)
	//		№10 или (4)(5)(6).
	#КонецОбласти
	
	// Будем перебирать варианты до тех пор пока определена переменная МассивВариантов.
	Пока Не МассивВариантов = Неопределено Цикл
		
		// Будем сохранять текущий элемент варианта в соответствие,
		// где в качестве ключа будет текущий "ПользующийсяЛьготой",
		// а в качестве значения его "ЛьготнаяКатегория".
		СоответствиеЛьготников = Новый Соответствие;
		
		// Заполним массив из строк.
		ТекМассив = Новый Массив;
		Для Счетчик = 0 По МассивВариантов.Количество() - 1 Цикл
			ТекСтрока = МассивВариаций[Счетчик][МассивВариантов[Счетчик]];
			
			Разряд = Неопределено;
			
			Если СоответствиеЛьготников.Количество() = 0 Тогда
				
				// Если вариант только начинает формироваться, то добавляем текущий элемент.
				СоответствиеЛьготников.Вставить(ТекСтрока.ПользующийсяЛьготой, ТекСтрока.ЛьготнаяКатегория);
				ТекМассив.Добавить(ТекСтрока);
				
			Иначе
				
				// В вариант уже что-то добавлено.
				
				Если ТекСтрока.Льготник = ТекСтрока.ПользующийсяЛьготой Тогда
					
					// Льготник влияет сам на себя.
					СоответствиеЛьготников.Вставить(ТекСтрока.ПользующийсяЛьготой, ТекСтрока.ЛьготнаяКатегория);
					ТекМассив.Добавить(ТекСтрока);
					
				Иначе
					
					// На проживающего влияет другой проживающий-льготник.
					
					Если СоответствиеЛьготников.Получить(ТекСтрока.Льготник) = ТекСтрока.ЛьготнаяКатегория Тогда
						
						// Льготник, влияющий на проживающего использует текущую льготную категорию.
						СоответствиеЛьготников.Вставить(ТекСтрока.ПользующийсяЛьготой, ТекСтрока.ЛьготнаяКатегория);
						ТекМассив.Добавить(ТекСтрока);
						
					Иначе
						
						// Льготник, влияющий на проживающего использует другую льготную категорию.
						
						Если НЕ ТаблицаВлияния.Найти(ТекСтрока.ПользующийсяЛьготой, "Льготник") = Неопределено Тогда
							
							// Проживающий является льготником и получает "неиспользуемую" льготную категорию
							ТекМассив.Очистить();
							
							// Увеличиваем текущий разряд, т.к. все прочие варианты,
							// содержащие в начале такую же комбинацию будут также "неверными".
							Разряд = Счетчик;
							Прервать;
							
						Иначе
							
							// Проживающий не является льготником.
							// Проверяем, может ли проживающий получить хоть какую-то льготу из уже используемых.
							НайденоВлияниеНаЖильца = Ложь;
							Для Каждого СтрокаСоответствия Из СоответствиеЛьготников Цикл
								СтруктураОтбора = Новый Структура;
								СтруктураОтбора.Вставить("ЛицевойСчет",         ТекСтрока.ЛицевойСчет);
								СтруктураОтбора.Вставить("Услуга",              ТекСтрока.Услуга);
								СтруктураОтбора.Вставить("Льготник",            СтрокаСоответствия.Ключ);
								СтруктураОтбора.Вставить("ЛьготнаяКатегория",   СтрокаСоответствия.Значение);
								СтруктураОтбора.Вставить("ПользующийсяЛьготой", ТекСтрока.ПользующийсяЛьготой);
								
								НайденныеСтроки = ТаблицаВлияния.НайтиСтроки(СтруктураОтбора);
								Если НайденныеСтроки.Количество() > 0 Тогда
									НайденоВлияниеНаЖильца = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
							Если НайденоВлияниеНаЖильца Тогда
								// Проживающий недополучает льготу одного из льготников.
								ТекМассив.Очистить();
								// Увеличиваем текущий разряд, т.к. все прочие варианты,
								// содержащие в начале такую же комбинацию будут также "неверными".
								Разряд = Счетчик;
								Прервать;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Увеличим разряд.
		МассивВариантов = НайтиСледующийВариант(МассивВариаций, МассивВариантов, Разряд);
		
		// Проверим текущий вариант на корректность:
		// В варианте не должно быть следующей ситуации: один из жильцов пользуется льготной категорией другого льготника,
		// но сам льготник при этом пользуется другой льготной категорией.
		ВариантОшибочен = Ложь;
		
		// 1. Проверяем каждую строку текущего варианта.
		Для Каждого СтрокаВарианта Из ТекМассив Цикл
			
			// При этом интересуют только строки, в которых жилец берет чью-то льготу (не свою).
			Если НЕ СтрокаВарианта.Льготник = СтрокаВарианта.ПользующийсяЛьготой Тогда
				
				// 2. Среди строк текущего варианта ищем строку льготника, дающего данную льготу жильцу, и если
				// сам льготник пользуется другой льготой, значит вариант неверный.
				Для Каждого ТекСтрока Из ТекМассив Цикл
					Если ТекСтрока.Льготник = СтрокаВарианта.Льготник И НЕ ТекСтрока.ЛьготнаяКатегория = СтрокаВарианта.ЛьготнаяКатегория Тогда
						ВариантОшибочен = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
				
		КонецЦикла;
		
		Если НЕ ВариантОшибочен Тогда
			// Добавим вновь созданный массив в таблицу вариантов.
			Если ТекМассив.Количество() > 0 Тогда
				НоваяСтрока = Таблица.Добавить();
				НоваяСтрока.Вариант = ТекМассив;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПеребратьВсеВарианты()

// Функция находит следующий вариант.
// Если индекс разряда не указан, то это будет следующий по порядку вариант - т.е. увеличиваем самый последний разряд
// Если индекс разряда указан, то увеличиваем указанный разряд.
Функция НайтиСледующийВариант(МассивВариаций, МассивВариантов, ИндексРазряда = Неопределено)
	
	Если ИндексРазряда = Неопределено Тогда
		// Если разряд не указан, то увеличиваем самый последний разряд массива вариантов.
		ИндексРазряда = МассивВариаций.Количество() - 1;
	КонецЕсли;
	
	ВариантНайден = Ложь;
	Пока Не ВариантНайден И ИндексРазряда >= 0 Цикл
		Если МассивВариантов[ИндексРазряда] < МассивВариаций[ИндексРазряда].Количество() - 1 Тогда
			// Если есть возможность увеличить разряд, то увеличиваем его на 1.
			МассивВариантов[ИндексРазряда] = МассивВариантов[ИндексРазряда] + 1;
			ВариантНайден = Истина;
		Иначе
			// Текущий разряд уже максимален, поэтому обнуляем его и переходим к старшему разряду.
			МассивВариантов[ИндексРазряда] = 0;
			ИндексРазряда = ИндексРазряда - 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ВариантНайден Тогда
		Возврат МассивВариантов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура дополняет таблицу начислений информацией по льготным тарифам
Процедура ДополнитьТаблицаНачисленийДаннымиПоЛьготномуТарифу(ТаблицаНачислений, ТаблицаКорректировок, ЛьготныйТариф)
	
	ТаблицаДнейНачислений = ТаблицаНачислений.Скопировать(, "ЛицевыеСчета, Услуга, ДнейНачислено");
	ТаблицаДнейНачислений.Свернуть("ЛицевыеСчета, Услуга, ДнейНачислено");
	ТаблицаДнейНачислений.Свернуть("ЛицевыеСчета, Услуга", "ДнейНачислено");
		
	ТаблицаСуммНачислений = ТаблицаНачислений.Скопировать(, "ЛицевыеСчета, Услуга, СоставнаяУслуга, Начислено, НачалоПериода");
	ТаблицаСуммНачислений.Свернуть("ЛицевыеСчета, Услуга, СоставнаяУслуга, НачалоПериода", "Начислено");
	
	ТаблицаНачислений.Колонки.Добавить("ТарифЛьгота",
										УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 4));
	
	ТаблицаНачислений.Колонки.Добавить("ВидТарифаЛьгота",Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
	
	ТаблицаНачислений.Колонки.Добавить("НачисленоЛьгота",
										УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаНачислений.Колонки.Добавить("ВсегоДнейНачислено",
										УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(10));
	
	Для Каждого ТекСтрока Из ТаблицаНачислений Цикл
		
		// найдем количество дней начислений в месяце
		ТекСтрока.ВсегоДнейНачислено = День(КонецМесяца(Период));
		ТекСтрока.ТарифЛьгота     = ТекСтрока.Тариф;
		ТекСтрока.ВидТарифаЛьгота = ТекСтрока.ВидТарифа;
		ТекСтрока.НачисленоЛьгота = ТекСтрока.Начислено;
		
		Если ЛьготныйТариф Тогда
			
			// найдем льготный тариф
			ТекСтрока.ТарифЛьгота = ПолучитьТарифУслугиДляРасчетаЛьгот(ТекСтрока.ЛицевыеСчета, ТекСтрока.Услуга,
																	   ТекСтрока.Тариф, ТекСтрока.СоставнаяУслуга, ТекСтрока.ВидТарифаЛьгота);
			
			// пересчитаем сумму начисления с учетом льготного тарифа
			ТекСтрока.НачисленоЛьгота = ТекСтрока.ТарифЛьгота * ТекСтрока.Количество;
			
		КонецЕсли;
		
		Если УчитыватьКорректировкиПриРасчете Тогда
			
			// Для разных услуг расчет выполняется по разному:
			// 1. Для услуг, рассчитываемых по площади, по кол-ву жильцов, с ограничением по нормам или по фиксированному кол-ву,
			// пересчитывается тариф с учетом данных корректировки.
			// 2. Для услуг, рассчитываемых по приборам учета или норме потребления,
			// пересчитывается объем с учетом данных корректировки.
			// 3. Для услуг, рассчитываемых по норме потребления или комиссия банка,
			// пересчитывается объем с учетом данных корректировки.
			//
			// ПРИ ЭТОМ учитывается, что
			// 1). Для услуг, рассчитываемых по приборам учета, объем услуги в начислениях уже разбит
			// на подпериоды, поэтому объем перерасчета определяем для подпериода,
			// а сумму вычисляем уже без учета дней в периоде.
			// 2). Для услуг, рассчитываемых по площади, по кол-ву жильцов, по фиксированному кол-ву или норме потребления,
			// объем услуги в начислениях указан за весь месяц, а сумма начисления рассчитана на подпериоде,
			// поэтому тариф/объем перерасчета считаем также за весь месяц, а сумму вычисляем уже с учетом дней в периоде.
			
			ДанныеПерерасчета = ТаблицаКорректировок.НайтиСтроки(Новый Структура("ЛицевыеСчета, Услуга, СоставнаяУслуга, Договор",
																	ТекСтрока.ЛицевыеСчета, 
																	ТекСтрока.Услуга, 
																	ТекСтрока.СоставнаяУслуга, 
																	ТекСтрока.Договор));
			Если ДанныеПерерасчета.Количество() > 0 Тогда
				
				СуммаПерерасчета   = ДанныеПерерасчета[0].Перерасчет;
				КоэффициентПериода = ТекСтрока.ДнейНачислено / ТекСтрока.ВсегоДнейНачислено;
				
				// 1. Для услуг, рассчитываемых по площади, по кол-ву жильцов, с ограничением по нормам или по фиксированному кол-ву,
				// пересчитывается тариф с учетом данных корректировки.
				Если ТекСтрока.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПлощади
				 ИЛИ ТекСтрока.СпособРасчета = Перечисления.КВП_СпособыРасчета.ФиксированноеНачисление
				 ИЛИ ТекСтрока.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоКоличествуЖильцов
				 ИЛИ ТекСтрока.СпособРасчета = Перечисления.КВП_СпособыРасчета.СОграничениемПоНормам Тогда
					
					// Найдем тариф для расчета льготы с учетом суммы перерасчета.
					// 1) Для этого считаем из расчета на весь месяц, а не на подпериоде.
					ТарифПерерасчета      = ?(ТекСтрока.Количество = 0, 0, ((ТекСтрока.Тариф*ТекСтрока.Количество - СуммаПерерасчета) / ТекСтрока.Количество));
					ТекСтрока.Тариф       = ТарифПерерасчета;
					// 2) Сумму пересчитываем уже для подпериода.
					ТекСтрока.Начислено   = ТарифПерерасчета * ТекСтрока.Количество * КоэффициентПериода;
					
					ТекСтрока.ТарифЛьгота = ?(ЛьготныйТариф, Мин(ТарифПерерасчета, ТекСтрока.ТарифЛьгота), ТарифПерерасчета);
					// 3) Пересчитаем сумму начисления с учетом льготного тарифа.
					ТекСтрока.НачисленоЛьгота = ТекСтрока.ТарифЛьгота * ТекСтрока.Количество * КоэффициентПериода;
					
				ИначеЕсли ТекСтрока.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
				 ИЛИ ТекСтрока.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
					// 2. Для услуг, рассчитываемых по приборам учета или норме потребления,
					// пересчитывается объем с учетом данных корректировки.
					// Расчет по прибору может быть выполнен по нескольким видам тарифа.
					// Сумму перерасчета определяем для каждого вида тарифа пропорционально
					// суммам начислений по видам тарифа на подпериоде.
					ДанныеСуммНачислений = ТаблицаСуммНачислений.НайтиСтроки(Новый Структура("ЛицевыеСчета, Услуга, СоставнаяУслуга, НачалоПериода", 
																			ТекСтрока.ЛицевыеСчета, 
																			ТекСтрока.Услуга, 
																			ТекСтрока.СоставнаяУслуга, 
																			ТекСтрока.НачалоПериода));
					
					// Определяем общую сумму начислений по всем видам тарифа на данном подпериоде
					ВсегоНачислений = ДанныеСуммНачислений[0].Начислено;
					// Распределяем с учетом кол-ва тарифов.
					Коэффициент = ?(ВсегоНачислений = 0, 0, ТекСтрока.Начислено / ВсегоНачислений);
					
					Для Каждого ТекСтрокаПерерасчета ИЗ ДанныеПерерасчета Цикл
						
						СуммаПерерасчета = ТекСтрокаПерерасчета.Перерасчет;
						
						// Найдем объем перерасчета.
						// 1) Для услуг по норме объем считаем из расчета на весь месяц, а для услуг по ПУ - на подпериоде.
						ОбъемПерерасчета = ?(ТекСтрока.Тариф = 0, 0, (СуммаПерерасчета * Коэффициент * КоэффициентПериода / ТекСтрока.Тариф));
						ТекСтрока.Количество = ТекСтрока.Количество - ОбъемПерерасчета; 
						// 2) Сумму для услуг по норме пересчитываем уже для подпериода, а для услуг по ПУ - без учета дней в периоде.
						ТекСтрока.Начислено = ТекСтрока.Начислено - СуммаПерерасчета * Коэффициент * КоэффициентПериода;
						
					КонецЦикла;
					
					// 3) Пересчитаем сумму начисления с учетом льготного тарифа.
					ТекСтрока.НачисленоЛьгота = ТекСтрока.ТарифЛьгота * ТекСтрока.Количество;
					
				Иначе
					// 3. Для остальных услуг пересчитывается объем с учетом данных корректировки.
					
					// Найдем объем перерасчета.
					ОбъемПерерасчета = ?(ТекСтрока.Тариф = 0, 0, (СуммаПерерасчета * КоэффициентПериода / ТекСтрока.Тариф));
					ТекСтрока.Количество = ТекСтрока.Количество - ОбъемПерерасчета;
					
					ТекСтрока.Начислено  = ТекСтрока.Начислено  - СуммаПерерасчета * КоэффициентПериода;
					
					// Пересчитаем сумму начисления с учетом льготного тарифа.
					ТекСтрока.НачисленоЛьгота = ТекСтрока.ТарифЛьгота * ТекСтрока.Количество;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла; // Цикл по таблице начислений
	
КонецПроцедуры // ДополнитьТаблицаНачисленийДаннымиПоЛьготномуТарифу()

// Функция рассчитывает льготу и возвращает сумму льготы.
Функция ПроизвестиРасчетЛьготы(ТаблицаВарианта, ТаблицаСкидок, ТаблицаНачислений,
	                           ЛицевойСчет, мУслуга, ТекКоличествоЛьгот, ТекКоличествоПользующихся, КоличествоЖильцовНаЛС, 
							   Знач КоличествоЖильцов, Коэффициент = 1, ТаблицаИзмененийЖильцов, НачалоПериода, КонецПериода, 
							   ДанныеПоНачислениям, НастройкиРасчетаЛьготПоУслуге)
	
	СуммаЛьготы = 0;
	ТекКоличествоЛьгот = 0;
	
	// Определим ограничения, приходящиеся на текущий период.
	Если ДанныеПоНачислениям.Количество() > 0 Тогда
		ПерваяСтрокаНачислений = ДанныеПоНачислениям[0];
	Иначе
		ПерваяСтрокаНачислений = Неопределено;
	КонецЕсли;
	
	// Коэффициент необходим для распределения сумм, пропорционально количеству дней в подпериоде.
	ДнейВПериоде = ((НачалоДня(КонецПериода) - НачалоПериода) / (24 * 60 * 60) + 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаВарианта.Льготник,
	|	ТаблицаВарианта.ЛьготнаяКатегория,
	|	ТаблицаВарианта.ПользующийсяЛьготой
	|ПОМЕСТИТЬ втЛьготников
	|ИЗ
	|	&ТаблицаВарианта КАК ТаблицаВарианта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСкидок.Услуга,
	|	ТаблицаСкидок.ЛьготнаяКатегория,
	|	ТаблицаСкидок.РазмерСкидки,
	|	ТаблицаСкидок.ОграничениеПоОбъемуУслуги,
	|	ТаблицаСкидок.ОграничениеПоСуммеЛьготы,
	|	ТаблицаСкидок.ПлощадьДляРасчетаОграничения
	|ПОМЕСТИТЬ втСкидок
	|ИЗ
	|	&ТаблицаСкидок КАК ТаблицаСкидок
	|ГДЕ
	|	ТаблицаСкидок.Услуга = &Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Льготники.Льготник КАК Льготник,
	|	Льготники.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	Льготники.ПользующийсяЛьготой КАК ПользующийсяЛьготой,
	|	втСкидок.РазмерСкидки КАК РазмерСкидки,
	|	втСкидок.Услуга КАК Услуга,
	|	втСкидок.ОграничениеПоОбъемуУслуги КАК ОграничениеПоОбъемуУслуги,
	|	втСкидок.ПлощадьДляРасчетаОграничения КАК ПлощадьДляРасчетаОграничения,
	|	ЕСТЬNULL(втСкидок.ОграничениеПоСуммеЛьготы, 0) КАК ОграничениеПоСуммеЛьготы
	|ПОМЕСТИТЬ врТаблицаЛьгот
	|ИЗ
	|	втЛьготников КАК Льготники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСкидок КАК втСкидок
	|		ПО Льготники.ЛьготнаяКатегория = втСкидок.ЛьготнаяКатегория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	врТаблицаЛьгот.Льготник КАК Льготник,
	|	врТаблицаЛьгот.ЛьготнаяКатегория,
	|	врТаблицаЛьгот.ПользующийсяЛьготой КАК ПользующийсяЛьготой,
	|	врТаблицаЛьгот.РазмерСкидки КАК РазмерСкидки,
	|	врТаблицаЛьгот.Услуга КАК Услуга,
	|	ЕСТЬNULL(УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.ОграничениеПоОбъемуУслуги, врТаблицаЛьгот.ОграничениеПоОбъемуУслуги) КАК ОграничениеПоОбъемуУслуги,
	|	врТаблицаЛьгот.ПлощадьДляРасчетаОграничения КАК ПлощадьДляРасчетаОграничения,
	|	врТаблицаЛьгот.ОграничениеПоСуммеЛьготы КАК ОграничениеПоСуммеЛьготы
	|ИЗ
	|	врТаблицаЛьгот КАК врТаблицаЛьгот
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот КАК УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот
	|		ПО врТаблицаЛьгот.ЛьготнаяКатегория = УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.ЛьготнаяКатегория
	|			И врТаблицаЛьгот.Услуга = УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.Услуга
	|			И (УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.ЛицевойСчет = &ЛицевойСчет)
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПользующийсяЛьготой),
	|	МАКСИМУМ(РазмерСкидки),
	|	МАКСИМУМ(Услуга),
	|	МАКСИМУМ(ОграничениеПоОбъемуУслуги),
	|	МАКСИМУМ(ПлощадьДляРасчетаОграничения),
	|	МАКСИМУМ(ОграничениеПоСуммеЛьготы)
	|ПО
	|	Льготник";
	
	Запрос.УстановитьПараметр("ТаблицаВарианта",   ТаблицаВарианта);
	Запрос.УстановитьПараметр("ТаблицаСкидок",     ТаблицаСкидок);
	Запрос.УстановитьПараметр("ЛицевойСчет",       ЛицевойСчет);
	Запрос.УстановитьПараметр("Услуга",            мУслуга);
	
	ВыборкаЛьготников = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЛьготников.Следующий() Цикл
		
		// Получим количество пользующихся льготой:
		// В текущей реализации нет необходимости получать количество пользующихся льготой функцией,
		// т.к. количество строк в текущем варианте и является количеством пользующихся.
		СтрокиЛьготника = ТаблицаВарианта.НайтиСтроки(Новый Структура("Льготник", ВыборкаЛьготников.Льготник));
		КоличествоПользующихся = СтрокиЛьготника.Количество();
		
		КоличествоОграничения = 0;
		ТекПлощадь = 1;
		ОграничениеПоПлощади = Ложь;
		
		// заполним ограничение объема услуги
		Если ЗначениеЗаполнено(ВыборкаЛьготников.ОграничениеПоОбъемуУслуги) Тогда
			
			ПараметрыОтбораДляРасчетЛьгот = Новый Структура;
			ПараметрыОтбораДляРасчетЛьгот.Вставить("ОтборПоВидуЖильцов", НастройкиРасчетаЛьготПоУслуге.ВидЖильцовКоторымПредоставляютсяЛьготы);
			
			Если НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
						= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ЖильцыПользующиесяЛьготойЛьготника Тогда
				// ОСОБЕННОСТЬ:
				// Если объем ограничения рассчитывается по кол-ву близких родственников/льготников,
				// то близкие/льготники определяются только среди получателей текущей льготы.
				
				ПараметрыОтбораДляРасчетЛьгот.Вставить("ОтборСредиПолучателейЛьготы", ТаблицаВарианта.Скопировать(СтрокиЛьготника).ВыгрузитьКолонку("ПользующийсяЛьготой"));
				
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Период",           КонецМесяца(Период));
			СтруктураПараметров.Вставить("Объект",           ЛицевойСчет);
			СтруктураПараметров.Вставить("Проживающий",      ВыборкаЛьготников.Льготник);
			СтруктураПараметров.Вставить("Услуга",           мУслуга);
			СтруктураПараметров.Вставить("Организация",      Организация);
			СтруктураПараметров.Вставить("НормаПотребления", ВыборкаЛьготников.ОграничениеПоОбъемуУслуги);
			СтруктураПараметров.Вставить("ПараметрыОтбораДляРасчетЛьгот", ПараметрыОтбораДляРасчетЛьгот);
			
			КоличествоЛьготников  = ВыборкаЛьготников.Количество();
			КоличествоОграничения = КВП_ПолучитьКоличествоНормыПотребленияПоОбъекту(СтруктураПараметров);
			
			// Определим ограничения, приходящиеся на текущий период.
			Если Не ПерваяСтрокаНачислений = Неопределено Тогда
				КоличествоОграничения = КоличествоОграничения * (ДнейВПериоде / ПерваяСтрокаНачислений.ВсегоДнейНачислено);
			КонецЕсли;
			
			Если НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
						= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой Тогда
				КоличествоЖильцовДляОграничения = ТекКоличествоПользующихся;
			ИначеЕсли НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
						= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ВсеЖильцыЛицевогоСчета Тогда
				КоличествоЖильцовДляОграничения = КоличествоЖильцовНаЛС;
			Иначе
				КоличествоЖильцовДляОграничения = КоличествоПользующихся;
			КонецЕсли;
			
			КоличествоОграничения = КоличествоОграничения * (КоличествоПользующихся / ?(КоличествоЖильцовДляОграничения = 0, 1, КоличествоЖильцовДляОграничения));
			
			// Получение площади квартиры. Необходимо при преобразовании количества услуги к соцнорме площади.
			Если ЗначениеЗаполнено(ВыборкаЛьготников.ПлощадьДляРасчетаОграничения) Тогда
				ТекПлощадь = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(ЛицевойСчет.Адрес, ВыборкаЛьготников.ПлощадьДляРасчетаОграничения,
													 ЛицевойСчет, КонецМесяца(Период));
				ТекПлощадь = ?(ТекПлощадь = 0, 1, ТекПлощадь);
				ОграничениеПоПлощади = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		СуммаОграниченияПериод = 0;
		Если ВыборкаЛьготников.ОграничениеПоСуммеЛьготы > 0 И Не ПерваяСтрокаНачислений = Неопределено Тогда
			СуммаОграниченияПериод = ВыборкаЛьготников.ОграничениеПоСуммеЛьготы * (ДнейВПериоде / ПерваяСтрокаНачислений.ВсегоДнейНачислено);
		КонецЕсли;
		
		// Определяем временную таблицу начислений по лицевому счету и услуге.
		СтрокиНачислений = ТаблицаНачислений.НайтиСтроки(Новый Структура("ЛицевыеСчета, Услуга", ЛицевойСчет, мУслуга));
		втНачислений = ТаблицаНачислений.Скопировать(СтрокиНачислений);
		
		// Для того, чтобы применить округление к уже рассчитанной льготе, а не к исходным начислениям,
		// поместим суммы начислений для расчета льгот в колонку без округления, и будем использовать ее как временное хранилище.
		втНачислений.Колонки.Добавить("НачисленоЛьготаБезОкругления");
		Для Каждого врСтрокаНачислений Из втНачислений Цикл
			врСтрокаНачислений.НачисленоЛьготаБезОкругления = врСтрокаНачислений.НачисленоЛьгота;
		КонецЦикла;
		
		// Далее определяем сумму начисления, от которой можем предоставить льготу.
		СуммаНачисления = 0;
		
		// По умолчанию берем суммы всех начислений.
		Если Не ПерваяСтрокаНачислений = Неопределено Тогда
			СуммаНачисления = втНачислений.Итог("НачисленоЛьготаБезОкругления") * (ДнейВПериоде / ПерваяСтрокаНачислений.ВсегоДнейНачислено) * (КоличествоПользующихся / ?(КоличествоЖильцов = 0, 1, КоличествоЖильцов));
		КонецЕсли;
		
		// Если имеется ограничение по объему услуги, то пересчитаем сумму начисления с учетом ограничения.
		Если КоличествоОграничения > 0 Тогда
			
			// Учтем преобразование количества услуги при расчете услуг, зависящих от площади (например, отопление).
			Если ОграничениеПоПлощади Тогда
				КоличествоОграничения = втНачислений.Итог("Количество") / ТекПлощадь * КоличествоОграничения;
			КонецЕсли;
			
			Для Каждого ТекСтрока Из втНачислений Цикл
				
				Если КоличествоОграничения <= 0 Тогда
					ТекСтрока.НачисленоЛьготаБезОкругления = 0;
					Продолжить;
				КонецЕсли;
				
				ТекКоличествоСКоэффициентами = ТекСтрока.Количество * КоличествоПользующихся / ?(КоличествоЖильцов = 0, 1, КоличествоЖильцов) * (ДнейВПериоде / ТекСтрока.ДнейНачислено);
				
				// Переопределяем сумму начисления, причем результат пишем во временную колонку без округления.
				ТекСтрока.НачисленоЛьготаБезОкругления = Мин(ТекКоличествоСКоэффициентами, КоличествоОграничения * (ТекСтрока.ДнейНачислено / ТекСтрока.ВсегоДнейНачислено)) * ТекСтрока.ТарифЛьгота;
				
				КоличествоОграничения = КоличествоОграничения - ТекКоличествоСКоэффициентами;
				
			КонецЦикла;
			
			СуммаНачисления = втНачислений.Итог("НачисленоЛьготаБезОкругления");
			
		КонецЕсли;
		
		// Расчет суммы льготы текущего льготника.
		ТекСуммаЛьготы = СуммаНачисления * (ВыборкаЛьготников.РазмерСкидки / 100);
		
		// Если имеется, ограничим сумму льготы.
		Если ВыборкаЛьготников.ОграничениеПоСуммеЛьготы > 0 Тогда
			ТекСуммаЛьготы = Мин(ТекСуммаЛьготы, СуммаОграниченияПериод);
		КонецЕсли;
		
		// Округленим получившуюся сумму льготы по текущему льготнику до 2 знаков,
		// так как фактический алгоритм расчета льгот округляет расчитанную льготу
		// при помещении суммы льготы в реквизит табличной части "Начислено", а не исходное начисление.
		// Т.е. здесь при расчете максимальной льготы округление работает аналогично непосредственному расчету.
		ТекСуммаЛьготы = Окр(ТекСуммаЛьготы, 2);
		
		Если ТекСуммаЛьготы > 0 Тогда
			ТекКоличествоЛьгот = ТекКоличествоЛьгот + 1;
		КонецЕсли;
		
		СуммаЛьготы = СуммаЛьготы + ТекСуммаЛьготы;
		
	КонецЦикла; // цикл по льготникам
	
	Возврат СуммаЛьготы * Коэффициент;
	
КонецФункции // ПроизвестиРасчетЛьготы()

// Процедура производит расчет льгот по наилучшим вариантам в разрезе подпериодов и заполняет табличную часть.
Процедура РассчитатьИтоговыеВариантыЛьгот(ТаблицаНачислений, ТаблицаЛьготников, ТаблицаИзмененийЖильцов,
	                                      ТаблицаВариантов, ТаблицаВлияния, ТаблицаСкидок, ТаблицаБлизкихРодственников, 
										  НачалоПериода, КонецПериода, СпособУчетаКоэффициентаПериода, НастройкиРасчетаЛьготПоУслуге)
	
	// ДЛЯ РАСЧЕТА СВЕРХОБЪЕМНЫХ ЛЬГОТ +
	
	// Вспомогательная таблица, которая хранит объемы льгот,
	// предоставленные близким родственникам льготников для расчета СВЕРХОБЪЕМНЫХ ЛЬГОТ.
	// В качестве тарифа объемов льгот берется именно льготный тариф, соответственно
	// поиск предоставленных льгот для расчета сверхобъема выполняется по льготному тарифу.
	ТаблицаОбъемовЛьготПоПолучателям = Новый ТаблицаЗначений;
	ТаблицаОбъемовЛьготПоПолучателям.Колонки.Добавить("ПользующийсяЛьготой");
	ТаблицаОбъемовЛьготПоПолучателям.Колонки.Добавить("Тариф");
	ТаблицаОбъемовЛьготПоПолучателям.Колонки.Добавить("КоличествоЛьготы");
	
	// ДЛЯ РАСЧЕТА СВЕРХОБЪЕМНЫХ ЛЬГОТ -
	
	// Определим структуру для дальнейшего определения площади, с которой рассчитана льгота.
	СтруктураДляОпределенияЛьготнойПлощади = Новый Структура;
	
	Для Каждого ТекЛС Из ТаблицаВариантов Цикл
		
		ТаблицаОбъемовЛьготПоПолучателям.Очистить();
		
		// сформируем таблицу варианта расчета льготы
		ТекТаблицаВарианта = ТаблицаВлияния.Скопировать(ТекЛС.Вариант);
		ТекТаблицаВариантаОригинал = ТекТаблицаВарианта.Скопировать();
		ТекТаблицаВарианта.Свернуть("Льготник, ЛьготнаяКатегория");
		
		// проверим, можем ли мы начислять льготу по данной услуге исходя из настройки в УП
		НачислятьПоОтсутствующему = НачислятьПоОтсутствующимЛьготникам(ТекЛС.Услуга);
		
		// получим данные по начислениям для текущего подпериода
		ДанныеПоНачислениям = ПолучитьДанныеПоНачислениям(ТаблицаНачислений, ТекЛС.ЛицевойСчет,
														  ТекЛС.Услуга, НачалоПериода);
		
		КоличествоЖильцовНаЛС = ПолучитьКоличествоЖильцов(ТаблицаИзмененийЖильцов, ТекЛС.ЛицевойСчет, НачалоПериода);
		
		// В текущей реализации нет необходимости получать количество пользующихся льготой функцией,
		// т.к. количество строк в текущем варианте и является количеством пользующихся.
		КоличествоПользующихсяЛьготойВсего = ТекТаблицаВариантаОригинал.Количество();
		
		Для Каждого ТекСтрока Из ТекТаблицаВарианта Цикл
			
			// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
			ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛС.ЛицевойСчет, ТекЛС.Услуга, "");
			ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛС.ЛицевойСчет, ТекЛС.Услуга, "Льготник: " + ТекСтрока.Льготник);
			ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛС.ЛицевойСчет, ТекЛС.Услуга, "Льготная категория: """ + ТекСтрока.ЛьготнаяКатегория + """");
			
			// 1. Получим количество и сумму ограничения за весь месяц.
			
			// получим параметры скидки
			ПараметрыСкидки = ТаблицаСкидок.НайтиСтроки(Новый Структура("Услуга, ЛьготнаяКатегория", ТекЛС.Услуга, ТекСтрока.ЛьготнаяКатегория));
			
			// нет скидки - нет льготы
			КоличествоОграниченияМесяц = 0;
			СуммаОграниченияМесяц      = 0;
			
			// заполним структуру для определения площади, с которой рассчитана льгота.
			СтруктураДляОпределенияЛьготнойПлощади.Вставить("ЛицевойСчет",                        ТекЛС.ЛицевойСчет);
			СтруктураДляОпределенияЛьготнойПлощади.Вставить("Период",                             КонецПериода);
			СтруктураДляОпределенияЛьготнойПлощади.Вставить("ОграничениеПоОбъемуУслугиЛС",        0);
			СтруктураДляОпределенияЛьготнойПлощади.Вставить("КоличествоОграниченияМесяц",         0);
			СтруктураДляОпределенияЛьготнойПлощади.Вставить("РазмерПлощадиДляРасчетаОграничения", 0);
			
			// Получим количество пользующихся льготой:
			// В текущей реализации нет необходимости получать количество пользующихся льготой функцией,
			// т.к. количество строк в текущем варианте и является количеством пользующихся.
			ТаблицаПользующихсяЛьготой = ТекТаблицаВариантаОригинал.Скопировать(ТекТаблицаВариантаОригинал.НайтиСтроки(Новый Структура("ЛицевойСчет, Льготник,
																																		|Услуга, ЛьготнаяКатегория",
																																		ТекЛС.ЛицевойСчет, ТекСтрока.Льготник, ТекЛС.Услуга, ТекСтрока.ЛьготнаяКатегория)));
			ПользующиесяЛьготой = ТаблицаПользующихсяЛьготой.Количество();
				
			Если Не ПараметрыСкидки.Количество() = 0 Тогда
				
				ПараметрыСкидки = ПараметрыСкидки.Получить(0);
				
				ОграничениеПоОбъемуУслугиЛС = УПЖКХ_РасчетЛьгот.ПолучитьИндивидуальноеОграничениеУслугиПоОбъемуНаЛицевойСчет(ТекЛС.ЛицевойСчет, ТекЛС.Услуга, ТекСтрока.ЛьготнаяКатегория);
				Если ОграничениеПоОбъемуУслугиЛС = Неопределено Тогда
					ОграничениеПоОбъемуУслугиЛС = ПараметрыСкидки.ОграничениеПоОбъемуУслуги;
				КонецЕсли;
				
				СтруктураДляОпределенияЛьготнойПлощади.ОграничениеПоОбъемуУслугиЛС = ОграничениеПоОбъемуУслугиЛС;
				
				// При наличии ограничения по объему, рассчитаем норму ограничения
				// и с учетом данного ограничения рассчитаем сумму начисления.
				Если ЗначениеЗаполнено(ОграничениеПоОбъемуУслугиЛС) Тогда
					
					ПараметрыОтбораДляРасчетЛьгот = Новый Структура;
					ПараметрыОтбораДляРасчетЛьгот.Вставить("ОтборПоВидуЖильцов", НастройкиРасчетаЛьготПоУслуге.ВидЖильцовКоторымПредоставляютсяЛьготы);
					
					Если НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
								= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ЖильцыПользующиесяЛьготойЛьготника Тогда
						// ОСОБЕННОСТЬ:
						// Если объем ограничения рассчитывается по кол-ву близких родственников/льготников,
						// то близкие/льготники определяются только среди получателей текущей льготы.
						ПараметрыОтбораДляРасчетЛьгот.Вставить("ОтборСредиПолучателейЛьготы", ТаблицаПользующихсяЛьготой.ВыгрузитьКолонку("ПользующийсяЛьготой"));
						
					КонецЕсли;
					
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("Период",           КонецПериода);
					СтруктураПараметров.Вставить("Объект",           ТекЛС.ЛицевойСчет);
					СтруктураПараметров.Вставить("Проживающий",      ТекСтрока.Льготник);
					СтруктураПараметров.Вставить("Услуга",           ТекЛС.Услуга);
					СтруктураПараметров.Вставить("Организация",      Организация);
					СтруктураПараметров.Вставить("НормаПотребления", ОграничениеПоОбъемуУслугиЛС);
					СтруктураПараметров.Вставить("ПараметрыОтбораДляРасчетЛьгот", ПараметрыОтбораДляРасчетЛьгот);
					
					КоличествоОграниченияМесяц = КВП_ПолучитьКоличествоНормыПотребленияПоОбъекту(СтруктураПараметров);
					
					СтруктураДляОпределенияЛьготнойПлощади.КоличествоОграниченияМесяц = КоличествоОграниченияМесяц;
					
				КонецЕсли;
				
				Если ПараметрыСкидки.ОграничениеПоСуммеЛьготы > 0 Тогда
					СуммаОграниченияМесяц = ПараметрыСкидки.ОграничениеПоСуммеЛьготы;
				КонецЕсли;
				
			КонецЕсли;
			
			// Проверим, действовала ли льгота в текущем под периоде.
			// Если льгота не действовала, то льготу начислять не будем.
			Если ЛьготаДействует(ТаблицаЛьготников, ТекЛС.ЛицевойСчет, ТекСтрока.Льготник,
				                 ТекСтрока.ЛьготнаяКатегория, НачалоПериода) Тогда
				
				// Проверим, присутствует ли льготник.
				// Начислить льготу сможем тогда, когда льготник зарегистрирован или проживает(зависит от настройки УП).
				// Так же существует еще одно дополнительное условие(на примере):
				// В УП стоит начислять льготу по проживающим. Льготник проживает, но не зарегистрирован.
				// Тогда необходимо проанализировать настройку "Способ учета льгот по временно отсутствующим".
				// Если данная настройка позволяет произвести расчет по услуге, то производим.
				СтруктураПрисутствия = ЛьготникПрисутствует(ТаблицаИзмененийЖильцов, ТекЛС.ЛицевойСчет,
															ТекСтрока.Льготник, НачалоПериода, НачислятьПоОтсутствующему);
				ЛьготникПрисутствует = СтруктураПрисутствия.Основное;
				Если ЛьготникПрисутствует
				   И (СтруктураПрисутствия.ДляНастройки ИЛИ НачислятьПоОтсутствующему.ВыполнятьРасчет) Тогда
					
					// Коэффициент необходим для распределения сумм, пропорционально количеству дней в под периоде.
					ДнейВПериоде = ((НачалоДня(КонецПериода) - НачалоПериода) / (24 * 60 * 60) + 1);
					
					// Временная переменная, позволяет менять числитель при расчете 
					// доли объема начисленной услуги, приходящейся на льготника с его получателями.
					// Зависит от настроек учетной политики.
					КоличествоПолучателейЛьготыДляРасчетаОбъемаНачисления = ПользующиесяЛьготой;
					
					// Получим количество жильцов, которые имеются в текущем подпериоде.
					Если НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги
								= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой Тогда
						КоличествоЖильцов = КоличествоПользующихсяЛьготойВсего;
					ИначеЕсли НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги
								= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчета Тогда
						КоличествоЖильцов = КоличествоЖильцовНаЛС;
					Иначе
						КоличествоЖильцов = ТекЛС.КоличествоЛьгот;
						КоличествоПолучателейЛьготыДляРасчетаОбъемаНачисления = 1;
					КонецЕсли;
					
					Если НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
								= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой Тогда
						КоличествоЖильцовДляОграничения = КоличествоПользующихсяЛьготойВсего;
					ИначеЕсли НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы
								= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ВсеЖильцыЛицевогоСчета Тогда
						КоличествоЖильцовДляОграничения = КоличествоЖильцовНаЛС;
					Иначе
						КоличествоЖильцовДляОграничения = ПользующиесяЛьготой;
					КонецЕсли;
					
					// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
					ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛС.ЛицевойСчет, ТекЛС.Услуга, "Количество жильцов: "            + КоличествоЖильцов);
					ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛС.ЛицевойСчет, ТекЛС.Услуга, "Количество получателей льготы: " + ПользующиесяЛьготой);
					
					///////////////////////////////////////////////////////////////////////
					
					// 2. Определим ограничения, приходящиеся на текущий период.
					Если ДанныеПоНачислениям.Количество() > 0 Тогда
						ПерваяСтрокаНачислений = ДанныеПоНачислениям[0];
					Иначе
						Продолжить;
					КонецЕсли;
					
					КоличествоОграниченияПериод = Неопределено;
					
					Если ЗначениеЗаполнено(КоличествоОграниченияМесяц) Тогда
						
						// Объем ограничения на текущей подпериод нужно брать с учетом длины периода
						// независимо от типа услуги (ПУ, не ПУ), так как объем ограничения на месяц
						// мы получаем всегда полный, поэтому в общем случае учитываем длину подпериода.
						КоэффициентПериода = ДнейВПериоде / ПерваяСтрокаНачислений.ВсегоДнейНачислено;
						КоличествоОграниченияПериод = КоличествоОграниченияМесяц * КоэффициентПериода;
						
						// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
						ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛС.ЛицевойСчет, ТекЛС.Услуга, 
																			  "Размер ограничения по норме: " + Формат(КоличествоОграниченияПериод, ФорматнаяСтрокаОбъема));
						
						// Учитываем количество получателей льготы на подпериоде.
						ВрКоличествоОграниченияПериод = КоличествоОграниченияПериод * (ПользующиесяЛьготой / ?(КоличествоЖильцовДляОграничения = 0, 1, КоличествоЖильцовДляОграничения));
						
						СтруктураДляОпределенияЛьготнойПлощади.КоличествоОграниченияМесяц = ВрКоличествоОграниченияПериод;
						
						// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
						ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛС.ЛицевойСчет, ТекЛС.Услуга, 
																			  "Размер ограничения: " + Формат(КоличествоОграниченияПериод, ФорматнаяСтрокаОбъема) 
																			  + " * " + ПользующиесяЛьготой 
																			  + " / " + КоличествоЖильцовДляОграничения
																			  + " = " + Формат(ВрКоличествоОграниченияПериод, ФорматнаяСтрокаОбъема));
																			  
						КоличествоОграниченияПериод = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ВрКоличествоОграниченияПериод, мТочностьОбъемаНачислений);
						
						Если ЗначениеЗаполнено(ПараметрыСкидки.ПлощадьДляРасчетаОграничения) Тогда
							
							// Если установлена площадь для расчета ограничения, то объем ограничения на подпериоде
							// нужно пересчитать исходя из объема начисления за месяц и площади помещения.
							//
							// Например:
							// - начисление по услуге "Отопление" за месяц составило 100 гКалл;
							// - площадь помещения - 50 кв.м.;
							// - льгота в 50% действует на одного человека с 11 числа месяца
							//   на протяжении 21 дня из 31 дней в месяце с ограничением в 33 кв.м.;
							// - тогда ограничение за 21 день составит: (33 * 21 / 31) * 100 / 50 = 44,71.
							//
							// Примечание:
							// Для того, чтобы получить полный объем начисления за месяц анализируем способ
							// учета коэффициента, и если это услуга по ПУ, то заново берем все начисления за месяц,
							// в противном случае используем данные начислений на текущем подпериоде.
							
							// Получение площади помещения с учетом количества пользующихся льготой.
							ТекПлощадь = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(ТекЛС.ЛицевойСчет.Адрес, ПараметрыСкидки.ПлощадьДляРасчетаОграничения, ТекЛС.ЛицевойСчет, КонецМесяца(Период));
							
							// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
							ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛС.ЛицевойСчет, ТекЛС.Услуга, "Площадь для расчета ограничения: " + ТекПлощадь);
							
							ТекКоэффициент = (ДнейВПериоде / ПерваяСтрокаНачислений.ДнейНачислено);
							ТекПлощадь = ?(ТекПлощадь = 0, 1, ТекПлощадь) * (КоличествоПолучателейЛьготыДляРасчетаОбъемаНачисления / ?(КоличествоЖильцов = 0, 1, КоличествоЖильцов)) * ТекКоэффициент;
							
							СтруктураДляОпределенияЛьготнойПлощади.РазмерПлощадиДляРасчетаОграничения = МИН(ТекПлощадь, КоличествоОграниченияМесяц);
							
							// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
							ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛС.ЛицевойСчет, ТекЛС.Услуга, "Площадь, на которую распространяется льгота: " + Формат(ТекПлощадь, "ЧДЦ=2"));
							
							// Получим полный объем начисления услуги за весь месяц,
							// приходящийся на текущих получателей льготы.
							врОбъемНачисленияЗаМесяц = 0;
							
							// А) Если способ учета коэффициента периода по ПУ, то объем начисления за весь месяц
							// нужно получить заново без отбора по текущему подпериоду. Если НЕ по ПУ, то объем начисления
							// за весь месяц уже содержится в данных начисления текущего подпериода.
							// 0 - для услуг по ПУ, 1 - для прочих услуг.
							Если СпособУчетаКоэффициентаПериода = 0 Тогда
								врДанныеПоНачислениямЗаМесяц = ПолучитьДанныеПоНачислениям(ТаблицаНачислений, ТекЛС.ЛицевойСчет, ТекЛС.Услуга);
							Иначе
								врДанныеПоНачислениямЗаМесяц = ДанныеПоНачислениям;
							КонецЕсли;
							
							// Получим суммарный объем начисления за месяц.
							Для Каждого врТекСтрокаНачисления Из врДанныеПоНачислениямЗаМесяц Цикл
								врОбъемНачисленияЗаМесяц = врОбъемНачисленияЗаМесяц + врТекСтрокаНачисления.Количество * (КоличествоПолучателейЛьготыДляРасчетаОбъемаНачисления / ?(КоличествоЖильцов = 0, 1, КоличествоЖильцов)) * ТекКоэффициент;
							КонецЦикла;
							
							// Вычислим итоговый объем ограничения по формуле: [Ограничение на подпериоде] * [Объем начисления за месяц] / [Площадь помещения].
							ВрКоличествоОграниченияПериод = КоличествоОграниченияПериод * (врОбъемНачисленияЗаМесяц / ?(ТекПлощадь = 0, 1, ТекПлощадь));
							
							// Если способ учета коэффициента периода НЕ по ПУ, то только тогда записываем количество ограничения,
							// иначе не записываем т.к. для услуг по ПУ объем не будет считаться от площади помещения,
							// а считается от показаний счетчика.
							Если СпособУчетаКоэффициентаПериода = 1 Тогда
								СтруктураДляОпределенияЛьготнойПлощади.КоличествоОграниченияМесяц = ВрКоличествоОграниченияПериод;
							КонецЕсли;
							
							// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
							ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛС.ЛицевойСчет, ТекЛС.Услуга, 
																					"Итоговый объем ограничения: " + Формат(врОбъемНачисленияЗаМесяц, ФорматнаяСтрокаОбъема) 
																					+ " * " + Формат(КоличествоОграниченияПериод, ФорматнаяСтрокаОбъема) 
																					+ " / " + Формат(ТекПлощадь, "ЧДЦ=2") 
																					+ " = " + Формат(ВрКоличествоОграниченияПериод, ФорматнаяСтрокаОбъема));
							
							КоличествоОграниченияПериод = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ВрКоличествоОграниченияПериод, мТочностьОбъемаНачислений);
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если ПараметрыСкидки.ОграничениеПоСуммеЛьготы > 0 Тогда
						
						СуммаОграниченияПериод = СуммаОграниченияМесяц * (ДнейВПериоде / ПерваяСтрокаНачислений.ВсегоДнейНачислено);
						
						// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
						ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛС.ЛицевойСчет, ТекЛС.Услуга, "Ограничение по сумме льготы: " + Формат(СуммаОграниченияПериод, "ЧДЦ=2"));
						
					КонецЕсли;
					
					///////////////////////////////////////////////////////////////////////
					
					СуммаПогрешностейОкругления = 0;
					
					Для Каждого ТекДанные Из ДанныеПоНачислениям Цикл
						
						// Если способ учета коэффициента периода НЕ по ПУ, то при вычислении суммы льготы учтем коэффициент периода.
						// 0 - для услуг по ПУ, 1 - для прочих услуг.
						Если СпособУчетаКоэффициентаПериода = 1 Тогда
							КоэффициентПериода = (ДнейВПериоде / ТекДанные.ВсегоДнейНачислено);
						Иначе
							КоэффициентПериода = 1;
						КонецЕсли;
						
						// получим сумму льготы, тариф и количество услуги
						СтруктураЛьготы = ПолучитьСуммуНачисленияЛьготы(ТекЛС.ЛицевойСчет, ТекСтрока.Льготник, ТекСтрока.ЛьготнаяКатегория,
																		ТекЛС.Услуга, ТаблицаСкидок, ТекДанные,
																		КоличествоПолучателейЛьготыДляРасчетаОбъемаНачисления, КоличествоЖильцов, КоэффициентПериода,
																		КоличествоОграниченияПериод, СуммаОграниченияПериод,
																		СтруктураДляОпределенияЛьготнойПлощади);
						
						Коэффициент = (ДнейВПериоде / ТекДанные.ДнейНачислено);
						
						// добавим результат вычислений в табличную часть
						ДобавитьСтрокуВТабличнуюЧасть(ТекЛС, ТекДанные, ТекСтрока, Коэффициент,
													  НачалоПериода, КонецПериода, СтруктураЛьготы, , СуммаПогрешностейОкругления);
						
						// ДЛЯ РАСЧЕТА СВЕРХОБЪЕМНЫХ ЛЬГОТ +
						
						// Отнесем объем, относящийся к получателям льготы.
						Для Каждого ТекСтрокаПользующийся Из ТаблицаПользующихсяЛьготой Цикл
							НоваяСтрока = ТаблицаОбъемовЛьготПоПолучателям.Добавить();
							НоваяСтрока.ПользующийсяЛьготой = ТекСтрокаПользующийся.ПользующийсяЛьготой;
							НоваяСтрока.Тариф               = СтруктураЛьготы.Тариф;
							НоваяСтрока.КоличествоЛьготы    = СтруктураЛьготы.Количество / ?(ПользующиесяЛьготой = 0, 1, ПользующиесяЛьготой);
						КонецЦикла;
						
						// ДЛЯ РАСЧЕТА СВЕРХОБЪЕМНЫХ ЛЬГОТ -
						
					КонецЦикла; // цикл по данным начислений
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; // цикл по строкам таблицы влияния
		
		/////////////////////////////////////////////////////////////////////////////////
		// РАСЧЕТ СВЕРХОБЪЕМНЫХ ЛЬГОТНЫХ КАТЕГОРИЙ
		
		// Если установлены сверхобъемные льготы, то рассчитаем остаток объема для них.
		// Возможны два варианта расчета льготы по сверхобъемной услуге:
		//
		// (1) - если сверхобъемная льгота предоставляется на ВСЮ СЕМЬЮ, тогда объем услуги,
		//       на который дается льгота определяется как:
		//       [объем начисления услуги] – [объем услуги, на который предоставлена скидка
		//                                    по категориям, в том числе парным и не парным].
		//
		// (2) - если сверхобъемная льгота предоставляется на БЛИЗКИХ РОДСТВЕННИКОВ, тогда объем услуги,
		//       на который дается льгота определяется как:
		//       [объем начисленной услуги] * [Количество близких родственников среди получателей льготы]
		//                                  / [Количество получателей льготы всего на лицевом счете]
		//        – [объем услуги, на который предоставлена скидка близким родственникам по не сверхобъемным категориям].
		//
		// (3) - если сверхобъемная льгота предоставляется на ОДНОГО ЧЕЛОВЕКА, тогда объем услуги,
		//       на который дается льгота определяется как:
		//       [объем начисленной услуги] / [Количество получателей льготы всего на лицевом счете]
		//        - [объем услуги, на который предоставлена скидка самому льготнику].
		
		Для Каждого ТекСтрокаВарианта Из ТекТаблицаВарианта Цикл
			
			ТекущийЛьготник = ТекСтрокаВарианта.Льготник;
			
			// Находим сверобъемную категорию для основной категории льготника
			СтрокиЛьготнойКатегории = ТаблицаСкидок.НайтиСтроки(Новый Структура("ЛьготнаяКатегория,Услуга", ТекСтрокаВарианта.ЛьготнаяКатегория, ТекЛС.Услуга));
			
			Если СтрокиЛьготнойКатегории.Количество() > 0 Тогда
				
				СверхобъемнаяЛьготнаяКатегория = СтрокиЛьготнойКатегории[0].ЛьготнаяКатегорияДляСверхобъема;
				
				Если ЗначениеЗаполнено(СверхобъемнаяЛьготнаяКатегория) Тогда
					
					ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ТекЛС.ЛицевойСчет, ТекЛС.Услуга, "Сверхобъемная льготная категория: """ + СверхобъемнаяЛьготнаяКатегория + """");
					
					// Если установлена сверхобъемная льготная категория, найдем по ней скидку.
					
					СтрокиЛьготнойКатегорииСверхобъема = ТаблицаСкидок.НайтиСтроки(Новый Структура("ЛьготнаяКатегория,Услуга", СверхобъемнаяЛьготнаяКатегория, ТекЛС.Услуга));
					
					Если СтрокиЛьготнойКатегорииСверхобъема.Количество() > 0 Тогда
						
						УсловияПредоставленияСкидкиСверхобъемнойЛК = СтрокиЛьготнойКатегорииСверхобъема[0];
						
						СтруктураЛьготника = Новый Структура("Льготник, ЛьготнаяКатегория", ТекущийЛьготник, СверхобъемнаяЛьготнаяКатегория);
						
						// Если сверхобъемная категория дает льготу на близких родственников (2),
						// то необходимо определить дополнительные параметры для расчета.
						Если УсловияПредоставленияСкидкиСверхобъемнойЛК.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.БлизкиеРодственники Тогда
							
							// ОСОБЕННОСТЬ:
							// Для расчета сверхобъемной льготы по близким родственникам нужно получать всех близких 
							// родственников, включая самого льготника, а не ориентироваться на пользующихся льготой
							// (парная льгота может быть на одного человека, в этом случае кол-во пользующихся = 1).
							// Даже не смотря на то что, у одного из близких может быть своя индивидуальная льгота.
							// При расчете сверхобъема из объема услуги вычитаются объемы услуги, на которые уже
							// предоставлена скидка близким родственникам по всем не сверхобъемным льготным категориям.
							
							// Определим количество близких родственников среди получателей льготы.
							МассивБлизкихПользующихся = ПолучитьКоличествоБлизкихРодственниковЛьготника(ТаблицаБлизкихРодственников,
																										ТекЛС.ЛицевойСчет, ТекущийЛьготник, НачалоПериода, Истина);
							
							// В текущей реализации нет необходимости получать количество близких родственников среди 
							// получателей функцией, т.к. количество строк в массиве близких пользующихся и является 
							// требуемым количеством.
							// При этом отдельно отбирать по признакам зарегистрирован/проживает/собственник не нужно
							// (в массиве уже данные с отбором).
							КоличествоБлизкихСредиПолучателей = МассивБлизкихПользующихся.Количество();
							
							Если НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги
									= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой Тогда
								КоличествоЖильцовДляСверхобъема = КоличествоБлизкихСредиПолучателей;
							ИначеЕсли НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги
									= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчета Тогда
								КоличествоЖильцовДляСверхобъема = КоличествоЖильцовНаЛС;
							Иначе
								КоличествоБлизкихСредиПолучателей = 1;
								КоличествоЖильцовДляСверхобъема   = ТекЛС.КоличествоЛьгот;
							КонецЕсли;
							
						ИначеЕсли УсловияПредоставленияСкидкиСверхобъемнойЛК.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.ОдинЧеловек Тогда
							
							Если НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги
									= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой Тогда
								КоличествоЖильцовДляСверхобъема = КоличествоПользующихсяЛьготойВсего;
							ИначеЕсли НастройкиРасчетаЛьготПоУслуге.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги
									= Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчета Тогда
								КоличествоЖильцовДляСверхобъема = КоличествоЖильцовНаЛС;
							Иначе
								КоличествоЖильцовДляСверхобъема = ТекЛС.КоличествоЛьгот;
							КонецЕсли;
							
						КонецЕсли;
						
						// Обходим начисления по услуге.
						Для Каждого ТекДанные Из ДанныеПоНачислениям Цикл
							
							// Если способ учета коэффициента периода НЕ по ПУ, то при вычислении суммы льготы учтем коэффициент периода.
							// 0 - для услуг по ПУ, 1 - для прочих услуг.
							Если СпособУчетаКоэффициентаПериода = 1 Тогда
								КоэффициентПериода = (ДнейВПериоде / ТекДанные.ВсегоДнейНачислено);
							Иначе
								КоэффициентПериода = 1;
							КонецЕсли;
							
							ОбъемУслуги = ТекДанные.Количество * КоэффициентПериода;
							
							КоличествоСверхобъема = 0;
							КоличествоЛьготы = 0;
							
							// (1)
							Если УсловияПредоставленияСкидкиСверхобъемнойЛК.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.Семья Тогда
								
								СтрокиОбъемов = ТаблицаОбъемовЛьготПоПолучателям.НайтиСтроки(Новый Структура("Тариф", ТекДанные.ТарифЛьгота));
								Для Каждого ТекСтрокаОбъемаЛьготы Из СтрокиОбъемов Цикл
									КоличествоЛьготы = КоличествоЛьготы + ТекСтрокаОбъемаЛьготы.КоличествоЛьготы;
								КонецЦикла;
								
								КоличествоСверхобъема = Макс(0, ОбъемУслуги - КоличествоЛьготы);
								
							// (2)
							ИначеЕсли УсловияПредоставленияСкидкиСверхобъемнойЛК.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.БлизкиеРодственники Тогда
								
								Для Каждого ТекБлизкийПользующийся Из МассивБлизкихПользующихся Цикл
									СтрокиОбъемов = ТаблицаОбъемовЛьготПоПолучателям.НайтиСтроки(Новый Структура("Тариф, ПользующийсяЛьготой", ТекДанные.ТарифЛьгота, ТекБлизкийПользующийся));
									Для Каждого ТекСтрокаОбъемаЛьготы Из СтрокиОбъемов Цикл
										КоличествоЛьготы = КоличествоЛьготы + ТекСтрокаОбъемаЛьготы.КоличествоЛьготы;
									КонецЦикла;
								КонецЦикла;
								
								КоличествоСверхобъема = Макс(0, ОбъемУслуги * КоличествоБлизкихСредиПолучателей / ?(КоличествоЖильцовДляСверхобъема = 0, 1, КоличествоЖильцовДляСверхобъема) - КоличествоЛьготы);
								
							// (3)
							ИначеЕсли УсловияПредоставленияСкидкиСверхобъемнойЛК.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.ОдинЧеловек Тогда
								
								СтрокиОбъемов = ТаблицаОбъемовЛьготПоПолучателям.НайтиСтроки(Новый Структура("Тариф, ПользующийсяЛьготой", ТекДанные.ТарифЛьгота, ТекущийЛьготник));
								Для Каждого ТекСтрокаОбъемаЛьготы Из СтрокиОбъемов Цикл
									КоличествоЛьготы = КоличествоЛьготы + ТекСтрокаОбъемаЛьготы.КоличествоЛьготы;
								КонецЦикла;
								
								КоличествоСверхобъема = Макс(0, ОбъемУслуги / ?(КоличествоЖильцовДляСверхобъема = 0, 1, КоличествоЖильцовДляСверхобъема) - КоличествоЛьготы);
								
							КонецЕсли;
							
							// Для расчета льгот по сверхобъему используем тариф для льготы, а не тариф начисления услуги.
							СтруктураДанных = Новый Структура("НачисленоЛьгота, Количество, ТарифЛьгота, ВидТарифаЛьгота", ТекДанные.НачисленоЛьгота, КоличествоСверхобъема, ТекДанные.ТарифЛьгота, ТекДанные.ВидТарифаЛьгота);
							// получим сумму льготы, тариф и количество услуги
							СтруктураЛьготы = ПолучитьСуммуНачисленияЛьготы(ТекЛС.ЛицевойСчет, ТекущийЛьготник, СверхобъемнаяЛьготнаяКатегория,
																			ТекЛС.Услуга, ТаблицаСкидок, СтруктураДанных,,,,,
																			УсловияПредоставленияСкидкиСверхобъемнойЛК.ОграничениеПоСуммеЛьготы);
							
							Коэффициент = (ДнейВПериоде / ТекДанные.ДнейНачислено);
							
							// Начисление льготы производим только на положительный сверхобъем.
							Если СтруктураЛьготы.Количество > 0 Тогда
								
								// добавим результат вычислений в табличную часть
								ДобавитьСтрокуВТабличнуюЧасть(ТекЛС, ТекДанные, СтруктураЛьготника, Коэффициент,
															  НачалоПериода, КонецПериода, СтруктураЛьготы);
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла; // цикл по лицевым счетам
	
КонецПроцедуры // РассчитатьИтоговыеВариантыЛьгот()

// Функция получает периоды изменения для лицевого счета.
Функция ПолучитьПодпериодыРасчета(ТаблицаЛьготников, ТаблицаИзмененийЖильцов, ТаблицаНачислений,
	                              ЛицевойСчет, Услуга = Неопределено, Льготник = Неопределено, 
								  ЛьготнаяКатегория = Неопределено, ДопПараметры = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЛьготников.НачалоПериода КАК Период,
	|	ТаблицаЛьготников.ЛицевойСчет,
	|	ТаблицаЛьготников.Действие,
	|	ТаблицаЛьготников.Льготник,
	|	ТаблицаЛьготников.ЛьготнаяКатегория
	|ПОМЕСТИТЬ втПериодовЛьготников
	|ИЗ
	|	&ТаблицаЛьготников КАК ТаблицаЛьготников
	|ГДЕ
	|	ТаблицаЛьготников.ЛицевойСчет = &ЛицевойСчет"
	+ ?(Льготник = Неопределено,          "", "	И ТаблицаЛьготников.Льготник = &Льготник")
	+ ?(ЛьготнаяКатегория = Неопределено, "", "	И ТаблицаЛьготников.ЛьготнаяКатегория = &ЛьготнаяКатегория")
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЖильцов.Период,
	|	ТаблицаЖильцов.ЛицевойСчет,
	|	ТаблицаЖильцов.Жилец,
	|	ТаблицаЖильцов.Зарегистрирован,
	|	ТаблицаЖильцов.Проживает,
	|	ТаблицаЖильцов.Собственник
	|ПОМЕСТИТЬ втПериодовЖильцов
	|ИЗ
	|	&ТаблицаЖильцов КАК ТаблицаЖильцов
	|ГДЕ
	|	ТаблицаЖильцов.ЛицевойСчет = &ЛицевойСчет И &УсловиеЖильца
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлощадьПомещения.Период,
	|	&ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения КАК ПлощадьПомещения
	|ГДЕ
	|	&ВидПлощадиЗадан
	|		И ПлощадьПомещения.Объект = &Помещение
	|		И ПлощадьПомещения.ВидПлощади = &ВидПлощади
	|		И ПлощадьПомещения.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаНачислений.НачалоПериода КАК НачалоПериода,
	|	ДОБАВИТЬКДАТЕ(ТаблицаНачислений.КонецПериода, ДЕНЬ, 1) КАК КонецПериода,
	|	ТаблицаНачислений.Услуга,
	|	ТаблицаНачислений.СоставнаяУслуга,
	|	ТаблицаНачислений.ЛицевыеСчета,
	|	ТаблицаНачислений.Тариф,
	|	ТаблицаНачислений.Количество,
	|	ТаблицаНачислений.Договор,
	|	ТаблицаНачислений.Начислено,
	|	ТаблицаНачислений.ДнейНачислено,
	|	ТаблицаНачислений.ВсегоДнейНачислено
	|ПОМЕСТИТЬ втПериодовНачислений
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.ЛицевыеСчета = &ЛицевойСчет"
	+ ?(Услуга = Неопределено, "", "	И ТаблицаНачислений.Услуга = &Услуга")
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЛьготников.Период
	|ИЗ
	|	втПериодовЛьготников КАК ТаблицаЛьготников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЖильцов.Период
	|ИЗ
	|	втПериодовЖильцов КАК ТаблицаЖильцов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыНачислений.НачалоПериода
	|ИЗ
	|	втПериодовНачислений КАК ПериодыНачислений
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыНачислений.КонецПериода
	|ИЗ
	|	втПериодовНачислений КАК ПериодыНачислений
	|ГДЕ
	|	ПериодыНачислений.КонецПериода МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлощадьПомещения.Период
	|ИЗ
	|	втПлощадиПомещений КАК ПлощадьПомещения";
	
	ВидПлощадиИзменения           = Неопределено;
	ИзмененияПоПроживающим        = Ложь;
	ИзмененияПоЗарегистрированным = Ложь;
	
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		
		Если ДопПараметры.Свойство("ВидПлощадиИзменения") Тогда
			ВидПлощадиИзменения = ДопПараметры.ВидПлощадиИзменения;
		КонецЕсли;
		
		Если ДопПараметры.Свойство("ИзмененияПоПроживающим") Тогда
			ИзмененияПоПроживающим = ДопПараметры.ИзмененияПоПроживающим;
		КонецЕсли;
		
		Если ДопПараметры.Свойство("ИзмененияПоЗарегистрированным") Тогда
			ИзмененияПоЗарегистрированным = ДопПараметры.ИзмененияПоЗарегистрированным;
		КонецЕсли;
		
	КонецЕсли;
	
	УсловиеЖильца = "(";
	УсловиеЖильца = УсловиеЖильца + ?(мЛьготуПредоставлятьЗарегистрированнымЖильцам, "ТаблицаЖильцов.ИзменениеЗарегистрированных", 
										?(мЛьготуПредоставлятьПроживающимЖильцам,    "ТаблицаЖильцов.ИзменениеПроживающих",
																					 "ТаблицаЖильцов.ИзменениеСобственников"));
	// Дополнительно учитываем изменения по проживающим / зарегистрированным при наличии 
	// ограничения по объему, когда размер ограничения (норма) зависит от кол-ва соответствующего вида жильцов.
	Если (мЛьготуПредоставлятьЗарегистрированнымЖильцам ИЛИ мЛьготуПредоставлятьСобственникам)
	   И ИзмененияПоПроживающим Тогда
		УсловиеЖильца = УсловиеЖильца + " ИЛИ ТаблицаЖильцов.ИзменениеПроживающих";
	КонецЕсли;
	Если (мЛьготуПредоставлятьПроживающимЖильцам ИЛИ мЛьготуПредоставлятьСобственникам)
	   И ИзмененияПоЗарегистрированным Тогда
		УсловиеЖильца = УсловиеЖильца + " ИЛИ ТаблицаЖильцов.ИзменениеЗарегистрированных";
	КонецЕсли;
	УсловиеЖильца = УсловиеЖильца + ")";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЖильца", УсловиеЖильца);
	
	Запрос.УстановитьПараметр("ТаблицаЛьготников", ТаблицаЛьготников);
	Запрос.УстановитьПараметр("ТаблицаЖильцов",    ТаблицаИзмененийЖильцов);
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("ЛицевойСчет",       ЛицевойСчет);
	Запрос.УстановитьПараметр("Помещение",         ЛицевойСчет.Адрес);
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",      КонецМесяца(Период));
	Запрос.УстановитьПараметр("ВидПлощади",        ВидПлощадиИзменения);
	Запрос.УстановитьПараметр("ВидПлощадиЗадан",   ЗначениеЗаполнено(ВидПлощадиИзменения));
	Запрос.УстановитьПараметр("Услуга",            Услуга);
	Запрос.УстановитьПараметр("Льготник",          Льготник);
	Запрос.УстановитьПараметр("ЛьготнаяКатегория", ЛьготнаяКатегория);
	
	ТаблицаПериодов = Запрос.Выполнить().Выгрузить();
	ТаблицаПериодов.Сортировать("Период");
	
	Возврат ТаблицаПериодов;
	
КонецФункции // ПолучитьПодпериодыРасчета()

// Функция возвращает актуальные данные по начислениям на дату.
Функция ПолучитьДанныеПоНачислениям(ТаблицаНачислений, ЛицевойСчет, мУслуга, мПериод = Неопределено)
	
	// Данные по начислениям можно получать как за определенный подпериод, так и полностью за весяц месяц.
	// При этом запрос будем выполнять либо с отбором по периоду, либо без него.
	БезОтбораПоПериоду = Ложь;
	
	// Если период не передан, то запрос выполним без отбора по периоду.
	Если мПериод = Неопределено Тогда
		мПериод = Дата(1,1,1);
		БезОтбораПоПериоду = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНачислений.НачалоПериода КАК Период,
	|	ТаблицаНачислений.Услуга,
	|	ТаблицаНачислений.СоставнаяУслуга,
	|	ТаблицаНачислений.ЛицевыеСчета,
	|	ТаблицаНачислений.Тариф,
	|	ТаблицаНачислений.ВидТарифа,
	|	ТаблицаНачислений.Количество,
	|	ТаблицаНачислений.Договор,
	|	ТаблицаНачислений.Начислено,
	|	ТаблицаНачислений.ДнейНачислено,
	|	ТаблицаНачислений.ВсегоДнейНачислено,
	|	ТаблицаНачислений.ТарифЛьгота,
	|	ТаблицаНачислений.ВидТарифаЛьгота,
	|	ТаблицаНачислений.НачисленоЛьгота
	|ПОМЕСТИТЬ втПериодовНачислений
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.ЛицевыеСчета = &ЛицевойСчет
	|	И ТаблицаНачислений.Услуга = &Услуга
	|	И (&БезОтбораПоПериоду
	|			ИЛИ ТаблицаНачислений.НачалоПериода <= &Период
	|				И КОНЕЦПЕРИОДА(ТаблицаНачислений.КонецПериода, ДЕНЬ) >= &Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаНачислений.Период) КАК Период,
	|	ТаблицаНачислений.Услуга,
	|	ТаблицаНачислений.СоставнаяУслуга,
	|	ТаблицаНачислений.ЛицевыеСчета
	|ПОМЕСТИТЬ втМаксПериодов
	|ИЗ
	|	втПериодовНачислений КАК ТаблицаНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНачислений.Услуга,
	|	ТаблицаНачислений.СоставнаяУслуга,
	|	ТаблицаНачислений.ЛицевыеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Период,
	|	Начисления.Услуга,
	|	Начисления.СоставнаяУслуга,
	|	Начисления.ЛицевыеСчета,
	|	Начисления.Тариф,
	|	Начисления.ВидТарифа,
	|	Начисления.Количество,
	|	Начисления.Договор,
	|	Начисления.Начислено,
	|	Начисления.ДнейНачислено,
	|	Начисления.ВсегоДнейНачислено,
	|	Начисления.ТарифЛьгота,
	|	Начисления.ВидТарифаЛьгота,
	|	Начисления.НачисленоЛьгота
	|ИЗ
	|	втПериодовНачислений КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксПериодов КАК МаксПериоды
	|		ПО Начисления.ЛицевыеСчета = МаксПериоды.ЛицевыеСчета
	|			И Начисления.Услуга = МаксПериоды.Услуга
	|			И Начисления.СоставнаяУслуга = МаксПериоды.СоставнаяУслуга
	|			И (&БезОтбораПоПериоду
	|				ИЛИ Начисления.Период = МаксПериоды.Период)";
	
	Запрос.УстановитьПараметр("ТаблицаНачислений",  ТаблицаНачислений);
	Запрос.УстановитьПараметр("ЛицевойСчет",        ЛицевойСчет);
	Запрос.УстановитьПараметр("Услуга",             мУслуга);
	Запрос.УстановитьПараметр("Период",             КонецДня(мПериод));
	Запрос.УстановитьПараметр("БезОтбораПоПериоду", БезОтбораПоПериоду);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеПоНачислениям()

// Процедура выполняет деление данных по начислениям с учетом периодов изменений параметров расчета льгот.
// Это нужно, чтобы при дроблении на подпериоды начисления на конкретном
// подпериоде брались верными.
Процедура РазбитьНачисленияПоПериодамРасчета(ТаблицаНачислений, Периоды, ЛицевойСчет, Услуга, СпособУчетаКоэффициентаПериода)
	
	ДлинаСуток = 24 * 60 * 60;
	
	МассивПериодов = Периоды.ВыгрузитьКолонку("Период");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЛицевыеСчета", ЛицевойСчет);
	СтруктураПоиска.Вставить("Услуга",       Услуга);
	
	// Определим строки начислений по текущему л/с и услуге.
	СтрокиНачислений = ТаблицаНачислений.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиНачислений.Количество() > 0 Тогда
		
		// Скопируем строки начислений во временную таблицу, которую и будем делить.
		врТаблицаНачислений = ТаблицаНачислений.Скопировать(СтрокиНачислений);
		
		БылиДробленияНачислений = Ложь;
		
		Для Каждого ТекПериод Из МассивПериодов Цикл
			
			МассивСтрокДляУдаления = Новый Массив;
			
			ТекИндекс = врТаблицаНачислений.Количество() - 1;
			Пока ТекИндекс >= 0 Цикл
				
				ТекСтрокаНачислений = врТаблицаНачислений[ТекИндекс];
				
				// Если текущий период входит в интервал, то будем дробить интервал.
				Если ТекСтрокаНачислений.НачалоПериода < ТекПериод И ТекПериод <= ТекСтрокаНачислений.КонецПериода Тогда
					
					БылиДробленияНачислений = Истина;
					
					// Необходимо пометить на удаление имеющуюся строку и добавить две новые строки
					// распределив на них данные.
					
					// 1. Пометим на удаление строку, которую дробим.
					МассивСтрокДляУдаления.Добавить(ТекСтрокаНачислений);
					
					// 2. Создадим новые строки.
					
					// Строка интервала слева.
					СтрокаИнтервалаСлева = врТаблицаНачислений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаИнтервалаСлева, ТекСтрокаНачислений);
					
					// Примечание: поле "ВсегоДнейНачислено" не дробится для того, чтобы ограничения срабатывали корректно.
					
					СтрокаИнтервалаСлева.НачалоПериода = ТекСтрокаНачислений.НачалоПериода;
					СтрокаИнтервалаСлева.КонецПериода  = ТекПериод - ДлинаСуток;
					СтрокаИнтервалаСлева.ДнейНачислено = (СтрокаИнтервалаСлева.КонецПериода - СтрокаИнтервалаСлева.НачалоПериода) / ДлинаСуток + 1;
					
					// Строка интервала справа.
					СтрокаИнтервалаСправа = врТаблицаНачислений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаИнтервалаСправа, ТекСтрокаНачислений);
					
					СтрокаИнтервалаСправа.НачалоПериода = ТекПериод;
					СтрокаИнтервалаСправа.КонецПериода  = ТекСтрокаНачислений.КонецПериода;
					СтрокаИнтервалаСправа.ДнейНачислено = ТекСтрокаНачислений.ДнейНачислено - СтрокаИнтервалаСлева.ДнейНачислено;
					
					// Разнесем суммы и объемы начислений по интервалам.
					// На интервал слева относим исходя из количества дней интервала и общего количества дней.
					// На интервал справа относим остатки после отнесения на интервал слева.
					
					КоэффициентИнтервалаСлева = ?(ТекСтрокаНачислений.ДнейНачислено = 0, 0, СтрокаИнтервалаСлева.ДнейНачислено / ТекСтрокаНачислений.ДнейНачислено);
					
					// А) Дробим объем услуги, если только способ учета коэффициента по ПУ.
					// 0 - для услуг по ПУ, 1 - для прочих услуг.
					Если СпособУчетаКоэффициентаПериода = 0 Тогда
						Количество = ТекСтрокаНачислений.Количество;
						СтрокаИнтервалаСлева.Количество  = Количество * КоэффициентИнтервалаСлева;
						СтрокаИнтервалаСправа.Количество = Количество - СтрокаИнтервалаСлева.Количество;
					КонецЕсли;
					
					Начислено = ТекСтрокаНачислений.Начислено;
					СтрокаИнтервалаСлева.Начислено  = Начислено * КоэффициентИнтервалаСлева;
					СтрокаИнтервалаСправа.Начислено = Начислено - СтрокаИнтервалаСлева.Начислено;
					
					НачисленоЛьгота = ТекСтрокаНачислений.НачисленоЛьгота;
					СтрокаИнтервалаСлева.НачисленоЛьгота  = НачисленоЛьгота * КоэффициентИнтервалаСлева;
					СтрокаИнтервалаСправа.НачисленоЛьгота = НачисленоЛьгота - СтрокаИнтервалаСлева.НачисленоЛьгота;
					
				КонецЕсли;
				
				ТекИндекс = ТекИндекс - 1;
				
			КонецЦикла;
			
			// Удаляем строки, которые были разделены и помечены на удаление.
			Для Каждого ТекСтрокаУдаления Из МассивСтрокДляУдаления Цикл
				врТаблицаНачислений.Удалить(ТекСтрокаУдаления);
			КонецЦикла;
			
		КонецЦикла;
		
		// Если были дробления, заменим строки начислений разделенными строками.
		Если БылиДробленияНачислений Тогда
			
			// Удаляем исходные строки.
			Для Каждого ТекСтрокаУдаления Из СтрокиНачислений Цикл
				ТаблицаНачислений.Удалить(ТекСтрокаУдаления);
			КонецЦикла;
			
			// Добавляем разделенные строки.
			// Предварительно нужно отсортировать разделенные строки начислений по номеру строки,
			// чтобы учет ограничений по составным строкам проходил согласно номерам строк услуг
			// составной услуги, так как при дроблении начислений сортировка путается.
			// При этом сортировать по объекту и услуге не нужно, как это делается при получении таблицы начислений,
			// так как дробление и так происходит в рамках одной услуги и объекта.
			
			// Также добавляем сортировку по тарифу, чтобы при ограничении по объему услуги 
			// расчет льготы выполнялся по максимальному тарифу.
			
			// Для информации:
			// Решили, что расчет должен выполняться в порядке уменьшения размера тарифа.
			// Актуально для Москвы и Московской области.
			// В случае если необходим будет другой порядок, нужна настройка.
			// Более подробно см. в процедуре ПолучитьТаблицуНачисленийПоДаннымИзРегистраНачисления.
			
			врТаблицаНачислений.Сортировать("НомерСтроки, Тариф УБЫВ");
			Для Каждого ТекРазделеннаяСтрока Из врТаблицаНачислений Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаНачислений.Добавить(), ТекРазделеннаяСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает актуальные данные по начислениям на дату.
Функция ПолучитьКоличествоЖильцов(ТаблицаИзмененийЖильцов, ЛицевойСчет, мПериод, МассивЖильцов = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЖильцов.Период,
	|	ТаблицаЖильцов.ЛицевойСчет,
	|	ТаблицаЖильцов.Жилец,";
	
	Если УказыватьЖильцовЧислами Тогда
		Запрос.Текст = Запрос.Текст + "
		|ТаблицаЖильцов.КоличествоЗарегистрированных,
		|ТаблицаЖильцов.КоличествоПроживающих,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ТаблицаЖильцов.Зарегистрирован,
	|	ТаблицаЖильцов.Проживает,
	|	ТаблицаЖильцов.Собственник
	|ПОМЕСТИТЬ втПериодовЖильцов
	|ИЗ
	|	&ТаблицаЖильцов КАК ТаблицаЖильцов
	|ГДЕ
	|	ТаблицаЖильцов.ЛицевойСчет = &ЛицевойСчет"
	 + ?(МассивЖильцов = Неопределено, "", " И ТаблицаЖильцов.Жилец В (&МассивЖильцов)")
	+ "	И ТаблицаЖильцов.Период < &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаЖильцов.Период) КАК Период,
	|	ТаблицаЖильцов.ЛицевойСчет,
	|	ТаблицаЖильцов.Жилец
	|ПОМЕСТИТЬ втМаксПериодов
	|ИЗ
	|	втПериодовЖильцов КАК ТаблицаЖильцов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЖильцов.ЛицевойСчет,
	|	ТаблицаЖильцов.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Если УказыватьЖильцовЧислами И НЕ мЛьготуПредоставлятьСобственникам Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Жильцы.КоличествоЗарегистрированных КАК Количество
		|ИЗ
		|	втПериодовЖильцов КАК Жильцы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксПериодов КАК МаксПериоды
		|		ПО Жильцы.ЛицевойСчет = МаксПериоды.ЛицевойСчет
		|			И Жильцы.Жилец = МаксПериоды.Жилец
		|			И Жильцы.Период = МаксПериоды.Период";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Жильцы.КоличествоЗарегистрированных",
		                           ?(мЛьготуПредоставлятьЗарегистрированнымЖильцам,
		                             "Жильцы.КоличествоЗарегистрированных", "Жильцы.КоличествоПроживающих"));
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Жильцы.Жилец) КАК Количество
		|ИЗ
		|	втПериодовЖильцов КАК Жильцы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксПериодов КАК МаксПериоды
		|		ПО Жильцы.ЛицевойСчет = МаксПериоды.ЛицевойСчет
		|			И Жильцы.Жилец = МаксПериоды.Жилец
		|			И Жильцы.Период = МаксПериоды.Период";
		
		Запрос.Текст = Запрос.Текст + ?(мЛьготуПредоставлятьЗарегистрированнымЖильцам, " ГДЕ Жильцы.Зарегистрирован",
										?(мЛьготуПредоставлятьПроживающимЖильцам,      " ГДЕ Жильцы.Проживает",
																					   " ГДЕ Жильцы.Собственник"));
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаЖильцов", ТаблицаИзмененийЖильцов);
	Запрос.УстановитьПараметр("ЛицевойСчет",    ЛицевойСчет);
	Запрос.УстановитьПараметр("Период",         КонецДня(мПериод));
	Запрос.УстановитьПараметр("МассивЖильцов",  МассивЖильцов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьКоличествоЖильцов()

// Функция возвращает таблицу жильцов с исключением из нее жильцов,
// которым сидка не положена в данном подпериоде.
Функция ИсключитьЖильцовКоторымСкидкаНеПоложенаВПодпериоде(Знач ТаблицаЖильцов, ТаблицаИзмененийЖильцов, ЛицевойСчет, мПериод)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЖильцов.ЛицевойСчет,
	|	ТаблицаЖильцов.Жилец
	|ПОМЕСТИТЬ втТаблицаЖильцов
	|ИЗ
	|	&ТаблицаЖильцов КАК ТаблицаЖильцов
	|ГДЕ
	|	ТаблицаЖильцов.ЛицевойСчет = &ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзмененийЖильцов.Период,
	|	ТаблицаИзмененийЖильцов.ЛицевойСчет,
	|	ТаблицаИзмененийЖильцов.Жилец,
	|	ТаблицаИзмененийЖильцов.Зарегистрирован,
	|	ТаблицаИзмененийЖильцов.Проживает,
	|	ТаблицаИзмененийЖильцов.Собственник
	|ПОМЕСТИТЬ втПериодовЖильцов
	|ИЗ
	|	&ТаблицаИзмененийЖильцов КАК ТаблицаИзмененийЖильцов
	|ГДЕ
	|	ТаблицаИзмененийЖильцов.Период < &Период
	|	И ТаблицаИзмененийЖильцов.ЛицевойСчет = &ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаЖильцов.Период) КАК Период,
	|	ТаблицаЖильцов.ЛицевойСчет,
	|	ТаблицаЖильцов.Жилец
	|ПОМЕСТИТЬ втМаксПериодов
	|ИЗ
	|	втПериодовЖильцов КАК ТаблицаЖильцов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЖильцов.ЛицевойСчет,
	|	ТаблицаЖильцов.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Жильцы.ЛицевойСчет,
	|	Жильцы.Жилец
	|ПОМЕСТИТЬ втПодходящиеЖильцы
	|ИЗ
	|	втПериодовЖильцов КАК Жильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксПериодов КАК МаксПериоды
	|		ПО Жильцы.ЛицевойСчет = МаксПериоды.ЛицевойСчет
	|			И Жильцы.Жилец = МаксПериоды.Жилец
	|			И Жильцы.Период = МаксПериоды.Период
	|ГДЕ
	|	&ДопУсловие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаЖильцов.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА ИСТИНА
	|			ТОГДА втТаблицаЖильцов.Жилец
	|		ИНАЧЕ ""Жилец9999""
	|	КОНЕЦ КАК Жилец
	// Условие ВЫБОРа добавлено в запрос с той целью, чтобы при выгрузке таблицы значений из результата запроса
	// тип колонки был расширен строковым типом, причем длины такой, чтобы можно было добавить 9999 "псевдожильцов".
	|ИЗ
	|	втТаблицаЖильцов КАК втТаблицаЖильцов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПодходящиеЖильцы КАК втПодходящиеЖильцы
	|		ПО втТаблицаЖильцов.ЛицевойСчет = втПодходящиеЖильцы.ЛицевойСчет
	|			И втТаблицаЖильцов.Жилец = втПодходящиеЖильцы.Жилец";
	
	ТекстДопУсловия = ?(мЛьготуПредоставлятьЗарегистрированнымЖильцам, "Жильцы.Зарегистрирован", 
							?(мЛьготуПредоставлятьПроживающимЖильцам,  "Жильцы.Проживает",
																	   "Жильцы.Собственник"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловие", ТекстДопУсловия);
	
	Запрос.УстановитьПараметр("ТаблицаЖильцов",          ТаблицаЖильцов);
	Запрос.УстановитьПараметр("ТаблицаИзмененийЖильцов", ТаблицаИзмененийЖильцов);
	Запрос.УстановитьПараметр("ЛицевойСчет",             ЛицевойСчет);
	Запрос.УстановитьПараметр("Период",                  КонецДня(мПериод));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ИсключитьЖильцовКоторымСкидкаНеПоложенаВПодпериоде()

// Процедура добавляет строку в табличную часть "Расчет льгот".
Процедура ДобавитьСтрокуВТабличнуюЧасть(ТекЛС, ТекДанные, ТекСтрока, Коэффициент, НачалоПериода, КонецПериода,
	                                    СтруктураЛьготы, врТаблица = Неопределено, СуммаПогрешностейОкругления = 0)
	
	НоваяСтрока = ?(врТаблица = Неопределено, РасчетЛьгот.Добавить(), врТаблица.Добавить());
	НоваяСтрока.ЛицевыеСчета      = ТекЛС.ЛицевойСчет;
	НоваяСтрока.Услуга            = ТекЛС.Услуга;
	НоваяСтрока.СоставнаяУслуга   = ТекДанные.СоставнаяУслуга;
	НоваяСтрока.ЛьготнаяКатегория = ТекСтрока.ЛьготнаяКатегория;
	НоваяСтрока.Льготник          = ТекСтрока.Льготник;
	НоваяСтрока.НачалоПериода     = НачалоПериода;
	НоваяСтрока.КонецПериода      = КонецПериода;
	НоваяСтрока.Тариф             = ТекДанные.Тариф;
	НоваяСтрока.ВидТарифа         = ТекДанные.ВидТарифа;
	НоваяСтрока.Количество        = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ТекДанные.Количество * Коэффициент, мТочностьОбъемаНачислений);
	НоваяСтрока.СуммаУслуги       = ТекДанные.Начислено * Коэффициент;
	НоваяСтрока.Начислено         = СтруктураЛьготы.СуммаЛьготы;
	НоваяСтрока.Договор           = ТекДанные.Договор;
	НоваяСтрока.ТарифЛьгота       = СтруктураЛьготы.Тариф;
	НоваяСтрока.ВидТарифаЛьгота   = СтруктураЛьготы.ВидТарифа;
	НоваяСтрока.КоличествоЛьгота  = СтруктураЛьготы.Количество;
	НоваяСтрока.РазмерСкидки      = СтруктураЛьготы.РазмерСкидки;
	НоваяСтрока.ЛьготнаяПлощадь   = СтруктураЛьготы.ЛьготнаяПлощадь;
	
	// Из-за округления суммы льготы до 2-х знаков после запятой возможно появление "лишних" копеек при расчете.
	// Необходимо отслеживать и накапливать сумму погрешностей при округлении. Когда сумма погрешностей
	// превысит значение в "1 копейку", нужно уменьшить (увеличить) итоговую сумму льготы.
	СкорректироватьПогрешностьОкругленияСуммыНачисления(НоваяСтрока.Начислено, СтруктураЛьготы.СуммаЛьготы, СуммаПогрешностейОкругления);
	
КонецПроцедуры // ДобавитьСтрокуВТабличнуюЧасть()

// Процедура выполняет корректировку суммы начисляемой льготы при возникновении погрешности округления.
// 
Процедура СкорректироватьПогрешностьОкругленияСуммыНачисления(ОкругленнаяСуммаЛьготы, ПолнаяСуммаЛьготы, СуммаПогрешностейОкругления)
	
	Если ОкругленнаяСуммаЛьготы <> ПолнаяСуммаЛьготы Тогда
		
		СуммаПогрешностейОкругления = СуммаПогрешностейОкругления + ОкругленнаяСуммаЛьготы - ПолнаяСуммаЛьготы;
		
		Если Макс(СуммаПогрешностейОкругления, -СуммаПогрешностейОкругления) >= 0.01 Тогда
			Если СуммаПогрешностейОкругления > 0 Тогда
				ОкругленнаяСуммаЛьготы = ОкругленнаяСуммаЛьготы - 0.01;
				СуммаПогрешностейОкругления = СуммаПогрешностейОкругления - 0.01;
			Иначе
				ОкругленнаяСуммаЛьготы = ОкругленнаяСуммаЛьготы + 0.01;
				СуммаПогрешностейОкругления = СуммаПогрешностейОкругления + 0.01;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СкорректироватьПогрешностьОкругленияСуммыНачисления()

// Функция проверяет действие льготы на дату.
Функция ЛьготаДействует(ТаблицаЛьготников, ЛицевойСчет, Льготник, ЛьготнаяКатегория, мПериод)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛьготников.НачалоПериода КАК Период,
	|	ТаблицаЛьготников.ЛицевойСчет,
	|	ТаблицаЛьготников.Действие,
	|	ТаблицаЛьготников.Льготник,
	|	ТаблицаЛьготников.ЛьготнаяКатегория
	|ПОМЕСТИТЬ втПериодовЛьготников
	|ИЗ
	|	&ТаблицаЛьготников КАК ТаблицаЛьготников
	|ГДЕ
	|	ТаблицаЛьготников.ЛицевойСчет = &ЛицевойСчет
	|	И ТаблицаЛьготников.Льготник = &Льготник
	|	И ТаблицаЛьготников.ЛьготнаяКатегория = &ЛьготнаяКатегория
	|	И ТаблицаЛьготников.НачалоПериода < &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаЛьготников.Период) КАК Период,
	|	ТаблицаЛьготников.ЛицевойСчет,
	|	ТаблицаЛьготников.Льготник,
	|	ТаблицаЛьготников.ЛьготнаяКатегория
	|ПОМЕСТИТЬ втМаксПериодов
	|ИЗ
	|	втПериодовЛьготников КАК ТаблицаЛьготников
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЛьготников.ЛицевойСчет,
	|	ТаблицаЛьготников.Льготник,
	|	ТаблицаЛьготников.ЛьготнаяКатегория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЛьготников.Действие КАК Действие
	|ИЗ
	|	втПериодовЛьготников КАК ТаблицаЛьготников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксПериодов КАК МаксПериоды
	|		ПО ТаблицаЛьготников.Период = МаксПериоды.Период
	|			И ТаблицаЛьготников.ЛицевойСчет = МаксПериоды.ЛицевойСчет
	|			И ТаблицаЛьготников.Льготник = МаксПериоды.Льготник
	|			И ТаблицаЛьготников.ЛьготнаяКатегория = МаксПериоды.ЛьготнаяКатегория";
	
	Запрос.УстановитьПараметр("ТаблицаЛьготников", ТаблицаЛьготников);
	Запрос.УстановитьПараметр("ЛицевойСчет",       ЛицевойСчет);
	Запрос.УстановитьПараметр("Льготник",          Льготник);
	Запрос.УстановитьПараметр("ЛьготнаяКатегория", ЛьготнаяКатегория);
	Запрос.УстановитьПараметр("Период",            КонецДня(мПериод));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Действие;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЛьготаДействует()

// Функция возвращает сумму начисления льготы, тариф и объем по указанному льготнику, по указанной льготной категории,
// по указанной услуге, за указанный период.
//
Функция ПолучитьСуммуНачисленияЛьготы(ЛицевойСчет, Льготник, ЛьготнаяКатегория, мУслуга,
	                                  ТаблицаСкидок, ДанныеНачислений, Числитель = 1, Знаменатель = 1, КоэффициентПериода = 1,
	                                  КоличествоОграничения = Неопределено, СуммаОграничения = 0, СтруктураДляОпределенияЛьготнойПлощади = Неопределено)
	
	СтруктураЛьгот = Новый Структура;
	СтруктураЛьгот.Вставить("СуммаЛьготы",     0);
	СтруктураЛьгот.Вставить("Тариф",           0);
	СтруктураЛьгот.Вставить("ВидТарифа",       Перечисления.КВП_ВидыТарифов.ПустаяСсылка());
	СтруктураЛьгот.Вставить("Количество",      0);
	СтруктураЛьгот.Вставить("РазмерСкидки",    0);
	СтруктураЛьгот.Вставить("ЛьготнаяПлощадь", 0);
	
	СуммаЛьготы = 0;
	
	// Запомним необходимые данные по начислениям.
	СуммаНачислений  = ДанныеНачислений.НачисленоЛьгота;
	
	// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
	ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ЛицевойСчет, мУслуга, "Объем потребления услуги: " + Формат(ДанныеНачислений.Количество, ФорматнаяСтрокаОбъема));
	
	// В) Определим объем льготы, причем здесь учитывается коэффициент периода,
	// так как в итоге мы должны сравнить объем льготы, приходящейся на подпериод
	// объем ограничения, также приходящийся на подпериод.
	КоличествоУслуги = ДанныеНачислений.Количество * (Числитель / ?(Знаменатель = 0, 1, Знаменатель)) * КоэффициентПериода;
	КоличествоУслуги = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(КоличествоУслуги, мТочностьОбъемаНачислений);
	
	// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
	ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ЛицевойСчет, мУслуга, 
														  "Льготный объем: " + Формат(ДанныеНачислений.Количество, ФорматнаяСтрокаОбъема) 
														  + " * " + Числитель 
														  + " / " + Знаменатель 
														  + " = " + Формат(КоличествоУслуги, ФорматнаяСтрокаОбъема));
	
	// Тариф льготы.
	Тариф = ДанныеНачислений.ТарифЛьгота;
	ВидТарифа = ДанныеНачислений.ВидТарифаЛьгота;
	
	// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
	ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ЛицевойСчет, мУслуга, "Тариф: " + Тариф);
	
	// Нет начислений - нет льготы.
	Если СуммаНачислений = 0
	 ИЛИ КоличествоУслуги = 0 Тогда
		
		// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
		ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ЛицевойСчет, мУслуга, "Сумма льготы: 0,00");
		
		Возврат СтруктураЛьгот;
		
	КонецЕсли;
	
	// Итоговая сумма или объем начислений отрицательны - отрицательную льготу не рассчитываем.
	Если СуммаНачислений < 0
	 ИЛИ КоличествоУслуги < 0 Тогда
		
		// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
		ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ЛицевойСчет, мУслуга, "Льгота на отрицательный объем начисления НЕ рассчитывается.");
		ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ЛицевойСчет, мУслуга, "Сумма льготы: 0,00");
		
		Возврат СтруктураЛьгот;
		
	КонецЕсли;
	
	Если УказыватьЖильцовЧислами И НЕ ИспользоватьРасширенныйАлгоритмРасчетаЛьготГотовымиЧислами() Тогда
		
		ПараметрыСкидки = ТаблицаСкидок;
		
	Иначе
		// Получим параметры скидки.
		ПараметрыСкидки = ТаблицаСкидок.НайтиСтроки(Новый Структура("Услуга, ЛьготнаяКатегория", мУслуга, ЛьготнаяКатегория));
		
		// Нет скидки - нет льготы.
		Если ПараметрыСкидки.Количество() = 0 Тогда
			Возврат СтруктураЛьгот;
		КонецЕсли;
		
		ПараметрыСкидки = ПараметрыСкидки.Получить(0);
		
	КонецЕсли;
	
	// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
	ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ЛицевойСчет, мУслуга, "Размер скидки: " + ПараметрыСкидки.РазмерСкидки + "%");
	
	// При наличии ограничения по объему, рассчитаем норму ограничения
	// и с учетом данного ограничения рассчитаем сумму начисления.
	Если Не КоличествоОграничения = Неопределено Тогда
		
		Если КоличествоУслуги >= КоличествоОграничения Тогда
			
			КоличествоУслуги = КоличествоОграничения;
			КоличествоОграничения = 0;
			
		Иначе
			КоличествоОграничения = КоличествоОграничения - КоличествоУслуги;
		КонецЕсли;
		
		// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
		ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ЛицевойСчет, мУслуга, "Льготный объем с учетом ограничения: " + Формат(КоличествоУслуги, ФорматнаяСтрокаОбъема));
		
	КонецЕсли;
	
	// Расчет суммы льготы.
	// Определим сумму льготы, причем здесь коэффициент периода не учитывается,
	// так как итоговый объем льготы уже посчитан с учетом периода, а тут считаем только сумму льготы.
	СуммаЛьготы = Тариф * КоличествоУслуги * (ПараметрыСкидки.РазмерСкидки / 100);
	
	// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
	ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ЛицевойСчет, мУслуга, "Сумма льготы: [Льготный объем] * [Тариф услуги] * ([Размер скидки] / 100) = " +
																				 Формат(КоличествоУслуги, ФорматнаяСтрокаОбъема) + " * " + Тариф + " * (" +
																				 ПараметрыСкидки.РазмерСкидки + " / 100) = " + Формат(СуммаЛьготы, "ЧДЦ=2"));
	
	// Если указана сумма ограничения льготы, то выберем минимум из ограничения и полученной суммы льготы.
	Если ПараметрыСкидки.ОграничениеПоСуммеЛьготы > 0 Тогда
		
		Если СуммаЛьготы >= СуммаОграничения Тогда
			СуммаЛьготы = СуммаОграничения;
			СуммаОграничения = 0;
		Иначе
			СуммаОграничения = СуммаОграничения - СуммаЛьготы;
		КонецЕсли;
		
		// ПРОТОКОЛИРОВАНИЕ РАСЧЕТА
		ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ЛицевойСчет, мУслуга, "");
		ОтладкаРасчетов_ДобавитьИнформациюВТаблицуРасшифровки(ЛицевойСчет, мУслуга, "Сумма льготы с учетом ограничения по сумме: " + Формат(СуммаЛьготы, "ЧДЦ=2"));
		
	КонецЕсли;
	
	СтруктураЛьгот.Вставить("СуммаЛьготы",  СуммаЛьготы);
	СтруктураЛьгот.Вставить("Тариф",        Тариф);
	СтруктураЛьгот.Вставить("ВидТарифа",    ВидТарифа);
	СтруктураЛьгот.Вставить("Количество",   КоличествоУслуги);
	СтруктураЛьгот.Вставить("РазмерСкидки", ПараметрыСкидки.РазмерСкидки / 100);
	
	// Если сумма начисленной льготы не равна нулю и структура для определения площади, с которой рассчитана льгота, заполнена,
	// то необходимо определить размер этой площади.
	Если НЕ СуммаЛьготы = 0 И Не СтруктураДляОпределенияЛьготнойПлощади = Неопределено Тогда
		СтруктураДляОпределенияЛьготнойПлощади.Вставить("Числитель",          Числитель);
		СтруктураДляОпределенияЛьготнойПлощади.Вставить("Знаменатель",        Знаменатель);
		СтруктураДляОпределенияЛьготнойПлощади.Вставить("КоэффициентПериода", КоэффициентПериода);
		ОпределитьРазмерЛьготнойПлощадиПоУслуге(мУслуга, СтруктураДляОпределенияЛьготнойПлощади, СтруктураЛьгот);
	КонецЕсли;
	
	Возврат СтруктураЛьгот;
	
КонецФункции // ПолучитьСуммуНачисленияЛьготы()

// Функция проверяет присутствует ли льготник на указанную дату.
Функция ЛьготникПрисутствует(ТаблицаЖильцов, ЛицевойСчет, Льготник, мПериод, НачислятьПоОтсутствующему)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЖильцов.Период,
	|	ТаблицаЖильцов.ЛицевойСчет,
	|	ТаблицаЖильцов.Жилец,
	|	ТаблицаЖильцов.Зарегистрирован,
	|	ТаблицаЖильцов.Проживает,
	|	ТаблицаЖильцов.Собственник
	|ПОМЕСТИТЬ втПериодовЖильцов
	|ИЗ
	|	&ТаблицаЖильцов КАК ТаблицаЖильцов
	|ГДЕ
	|	ТаблицаЖильцов.ЛицевойСчет = &ЛицевойСчет
	|	И ТаблицаЖильцов.Жилец = &Жилец
	|	И ТаблицаЖильцов.Период < &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаЖильцов.Период) КАК Период,
	|	ТаблицаЖильцов.ЛицевойСчет,
	|	ТаблицаЖильцов.Жилец
	|ПОМЕСТИТЬ втМаксПериодов
	|ИЗ
	|	втПериодовЖильцов КАК ТаблицаЖильцов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЖильцов.ЛицевойСчет,
	|	ТаблицаЖильцов.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Жильцы.Зарегистрирован,
	|	Жильцы.Проживает,
	|	Жильцы.Собственник
	|ИЗ
	|	втПериодовЖильцов КАК Жильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксПериодов КАК МаксПериоды
	|		ПО Жильцы.ЛицевойСчет = МаксПериоды.ЛицевойСчет
	|			И Жильцы.Жилец = МаксПериоды.Жилец
	|			И Жильцы.Период = МаксПериоды.Период";
	
	Запрос.УстановитьПараметр("ТаблицаЖильцов", ТаблицаЖильцов);
	Запрос.УстановитьПараметр("ЛицевойСчет",    ЛицевойСчет);
	Запрос.УстановитьПараметр("Жилец",          Льготник);
	Запрос.УстановитьПараметр("Период",         КонецДня(мПериод));
	
	Структура = Новый Структура;
	Структура.Вставить("Основное",     Ложь);
	Структура.Вставить("ДляНастройки", Ложь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Структура.Вставить("Основное",     ?(мЛьготуПредоставлятьЗарегистрированнымЖильцам, Выборка.Зарегистрирован, 
												?(мЛьготуПредоставлятьПроживающимЖильцам,   Выборка.Проживает,
																							Выборка.Собственник)));
		Структура.Вставить("ДляНастройки", ?((мЛьготуПредоставлятьЗарегистрированнымЖильцам ИЛИ мЛьготуПредоставлятьСобственникам) 
											  И НачислятьПоОтсутствующему.УслугаЗависитОтПроживающих, Выборка.Проживает, 
													?((мЛьготуПредоставлятьПроживающимЖильцам ИЛИ мЛьготуПредоставлятьСобственникам) 
													   И НачислятьПоОтсутствующему.УслугаЗависитОтЗарегистрированных, Выборка.Зарегистрирован,
														Ложь)));
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // ЛьготникПрисутствует()

// Функция возвращает количество близких родственников льготника на указанную дату.
Функция ПолучитьКоличествоБлизкихРодственниковЛьготника(ТаблицаБлизкихРодственников, ЛицевойСчет, Льготник, мПериод,
															ПолучатьСписок = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаБлизкихРодственников.Период КАК Период,
	|	ТаблицаБлизкихРодственников.ЛицевойСчет,
	|	ТаблицаБлизкихРодственников.Льготник,
	|	ТаблицаБлизкихРодственников.Родственник
	|ПОМЕСТИТЬ втПериодовРодственников
	|ИЗ
	|	&ТаблицаБлизкихРодственников КАК ТаблицаБлизкихРодственников
	|ГДЕ
	|	ТаблицаБлизкихРодственников.ЛицевойСчет = &ЛицевойСчет
	|	И ТаблицаБлизкихРодственников.Льготник = &Льготник
	|	И ТаблицаБлизкихРодственников.Период < &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаРодственников.Период) КАК Период,
	|	ТаблицаРодственников.ЛицевойСчет,
	|	ТаблицаРодственников.Льготник
	|ПОМЕСТИТЬ втМаксПериодов
	|ИЗ
	|	втПериодовРодственников КАК ТаблицаРодственников
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРодственников.ЛицевойСчет,
	|	ТаблицаРодственников.Льготник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПолеВыборки
	|ИЗ
	|	втПериодовРодственников КАК ТаблицаРодственников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксПериодов КАК МаксПериоды
	|		ПО ТаблицаРодственников.Период = МаксПериоды.Период
	|			И ТаблицаРодственников.ЛицевойСчет = МаксПериоды.ЛицевойСчет
	|			И ТаблицаРодственников.Льготник = МаксПериоды.Льготник";
	
	Если ПолучатьСписок Тогда
		ТекстПоляВыборки = "РАЗЛИЧНЫЕ ТаблицаРодственников.Родственник"
	Иначе
		ТекстПоляВыборки = "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаРодственников.Родственник) КАК Количество"
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеВыборки", ТекстПоляВыборки);
	
	Запрос.УстановитьПараметр("ТаблицаБлизкихРодственников", ТаблицаБлизкихРодственников);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Запрос.УстановитьПараметр("Льготник",    Льготник);
	Запрос.УстановитьПараметр("Период",      КонецДня(мПериод));
	
	Если ПолучатьСписок Тогда
		МассивРодственников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Родственник");
		МассивРодственников.Добавить(Льготник);
		Возврат МассивРодственников;
	Иначе
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Количество + 1;
		Иначе
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьКоличествоБлизкихРодственниковЛьготника()

// Процедура определяет размер площади, с которой рассчитана льгота, в зависимости от способа расчета услуги
// и помещает данную площадь в структуру льгот.
//
Процедура ОпределитьРазмерЛьготнойПлощадиПоУслуге(мУслуга, СтруктураЛьготнойПлощади, СтруктураЛьгот)
	
	СпособРасчета = мУслуга.СпособРасчета;
	
	// Если способ расчета услуги - по площади.
	Если СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПлощади Тогда
		
		СтруктураЛьгот.ЛьготнаяПлощадь = СтруктураЛьгот.Количество;
		
	// Если способ расчета услуги - по нормам потребления или с ограничением по норме.
	ИначеЕсли СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоНормамПотребления
	 ИЛИ СпособРасчета = Перечисления.КВП_СпособыРасчета.СОграничениемПоНормам Тогда
		
		НормаПотребленияНаЛС = ПолучитьНормуПотребления(СтруктураЛьготнойПлощади.ЛицевойСчет, мУслуга, СтруктураЛьготнойПлощади.Период);
		ПлощадьЛСПоНорме     = 0;
		ПлощадьОграничения   = 0;
		
		Если Не НормаПотребленияНаЛС.Пустая() Тогда
			
			Если НормаПотребленияНаЛС.Основание = Перечисления.КВП_ОснованияНормПотребления.Площадь Тогда
				
				// Определяем размер площади помещения
				ПлощадьЛСПоНорме = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(СтруктураЛьготнойПлощади.ЛицевойСчет.Адрес, НормаПотребленияНаЛС.ВидПлощади,
														   СтруктураЛьготнойПлощади.ЛицевойСчет, СтруктураЛьготнойПлощади.Период);
				
				// Переопределим данную площадь помещения в зависимости от подпериода и количества распределения льготы.
				ПлощадьЛСПоНорме = ПлощадьЛСПоНорме * (СтруктураЛьготнойПлощади.Числитель / ?(СтруктураЛьготнойПлощади.Знаменатель = 0, 1, СтруктураЛьготнойПлощади.Знаменатель)) * СтруктураЛьготнойПлощади.КоэффициентПериода;
				
			КонецЕсли;
			
			Если Не СтруктураЛьготнойПлощади.ОграничениеПоОбъемуУслугиЛС = Неопределено Тогда
				
				Если УПЖКХ_ОбщегоНазначенияСервер.ЕдиницаИзмеренияЯвляетсяЕдиницейПлощади(СтруктураЛьготнойПлощади.ОграничениеПоОбъемуУслугиЛС, Истина) Тогда
					Если СтруктураЛьготнойПлощади.РазмерПлощадиДляРасчетаОграничения > 0 Тогда
						
						ПлощадьОграничения = СтруктураЛьготнойПлощади.РазмерПлощадиДляРасчетаОграничения;
						
					ИначеЕсли СтруктураЛьготнойПлощади.КоличествоОграниченияМесяц > 0 Тогда
						
						ПлощадьОграничения = СтруктураЛьготнойПлощади.КоличествоОграниченияМесяц;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПлощадьЛСПоНорме > 0 И ПлощадьОграничения > 0 Тогда
				
				СтруктураЛьгот.ЛьготнаяПлощадь = Мин(ПлощадьЛСПоНорме, ПлощадьОграничения);
				
			ИначеЕсли ПлощадьЛСПоНорме > 0 Тогда
				
				СтруктураЛьгот.ЛьготнаяПлощадь = ПлощадьЛСПоНорме;
				
			ИначеЕсли ПлощадьОграничения > 0 Тогда
				
				СтруктураЛьгот.ЛьготнаяПлощадь = ПлощадьОграничения;
				
			КонецЕсли;
			
		КонецЕсли;
		
	// Если способ расчета услуги - по показаниям счетчиков.
	ИначеЕсли СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика Тогда
		
		Если Не СтруктураЛьготнойПлощади.ОграничениеПоОбъемуУслугиЛС = Неопределено Тогда
			
			Если СтруктураЛьготнойПлощади.РазмерПлощадиДляРасчетаОграничения > 0 Тогда
				
				СтруктураЛьгот.ЛьготнаяПлощадь = Мин(СтруктураЛьготнойПлощади.КоличествоОграниченияМесяц, СтруктураЛьготнойПлощади.РазмерПлощадиДляРасчетаОграничения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьРазмерЛьготнойПлощадиПоУслуге()

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Процедура формирует движения для "старого" документа по регистру накоплений "Начисленные льготы".
Процедура СформироватьДвиженияДляСтарогоДокумента(СтруктураШапкиДокумента, ТаблицаЛьгот)
	
	НаборДвижений = Движения.КВП_НачисленныеЛьготы;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_РасчетЛьготРасшифровкаЛьгот.Услуга,
	|	КВП_РасчетЛьготРасшифровкаЛьгот.ЛьготнаяКатегория,
	|	КВП_РасчетЛьготРасшифровкаЛьгот.ЛицевыеСчета,
	|	НазначенныеЛьготы.Проживающий,
	|	КВП_РасчетЛьготРасшифровкаЛьгот.Начислено,
	|	КВП_РасчетЛьготРасшифровкаЛьгот.НомерСтроки КАК НомерСтроки,
	|	КВП_РасчетЛьготРасшифровкаЛьгот.Количество
	|ИЗ
	|	Документ.КВП_РасчетЛьгот.РасшифровкаЛьгот КАК КВП_РасчетЛьготРасшифровкаЛьгот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НазначенныеЛьготы.Проживающий КАК Проживающий,
	|			НазначенныеЛьготы.Проживающий.Владелец КАК ЛицевойСчет,
	|			НазначенныеЛьготы.ЛьготнаяКатегория КАК ЛьготнаяКатегория
	|		ИЗ
	|			РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|					&Дата,
	|					Проживающий.Владелец В (&СписокЛС)
	|						И ДатаИзменения <= &Дата) КАК НазначенныеЛьготы
	|		ГДЕ
	|			НазначенныеЛьготы.Действие) КАК НазначенныеЛьготы
	|		ПО КВП_РасчетЛьготРасшифровкаЛьгот.ЛицевыеСчета = НазначенныеЛьготы.ЛицевойСчет
	|			И КВП_РасчетЛьготРасшифровкаЛьгот.ЛьготнаяКатегория = НазначенныеЛьготы.ЛьготнаяКатегория
	|ГДЕ
	|	КВП_РасчетЛьготРасшифровкаЛьгот.Ссылка = &ТекущийДокумент
	|ИТОГИ ПО
	|	НомерСтроки";
	
	ТаблицаЛС = РасшифровкаЛьгот.Выгрузить(, "ЛицевыеСчета");
	ТаблицаЛС.Свернуть("ЛицевыеСчета", "");
	Запрос.УстановитьПараметр("Дата",            Дата);
	Запрос.УстановитьПараметр("СписокЛС",        ТаблицаЛС.ВыгрузитьКолонку("ЛицевыеСчета"));
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	ВыборкаПоСтрокам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтрокам.Следующий() Цикл
		ВыборкаПроживающих = ВыборкаПоСтрокам.Выбрать();
		Пока ВыборкаПроживающих.Следующий() Цикл
			Движение = НаборДвижений.Добавить();
			Движение.Период            = Дата;
			Движение.Организация       = Организация;
			Движение.ЛьготнаяКатегория = ВыборкаПроживающих.ЛьготнаяКатегория;
			Движение.Услуга            = ВыборкаПроживающих.Услуга;
			Движение.ЛицевойСчет       = ВыборкаПроживающих.ЛицевыеСчета;
			Движение.Проживающий       = ВыборкаПроживающих.Проживающий;
			Движение.СуммаНачисления   = ВыборкаПроживающих.Начислено / ?(ВыборкаПроживающих.Количество() = 0, 1, ВыборкаПроживающих.Количество());
			Движение.Количество        = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОкруглитьОбъемНачисления(ВыборкаПроживающих.Количество / ?(ВыборкаПроживающих.Количество() = 0, 1, ВыборкаПроживающих.Количество()), мТочностьОбъемаНачислений);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует движения для "нового" документа по регистру накоплений "Начисленные льготы".
Процедура СформироватьДвиженияДляНовогоДокумента(СтруктураШапкиДокумента, ТаблицаЛьгот)
	
	НаборДвижений = Движения.КВП_НачисленныеЛьготы;
	
	тмТаблицаЛьгот = ТаблицаЛьгот.Скопировать();
	тмТаблицаЛьгот.Свернуть("ЛьготнаяКатегория, Услуга, СоставнаяУслуга, ЛицевыеСчета, Льготник, ТарифЛьгота, ВидТарифаЛьгота, ЛьготнаяПлощадь",
	                        "Начислено, КоличествоЛьгота");
	
	Для Каждого ТекСтрока Из тмТаблицаЛьгот Цикл
		
		Если ТекСтрока.Начислено = 0
		   И ТекСтрока.КоличествоЛьгота = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = НаборДвижений.Добавить();
		Движение.Период            = СтруктураШапкиДокумента.Дата;
		Движение.Организация       = СтруктураШапкиДокумента.Организация;
		Движение.ЛьготнаяКатегория = ТекСтрока.ЛьготнаяКатегория;
		Движение.Услуга            = ТекСтрока.Услуга;
		Движение.СоставнаяУслуга   = ТекСтрока.СоставнаяУслуга;
		Движение.ЛицевойСчет       = ТекСтрока.ЛицевыеСчета;
		Движение.Проживающий       = ТекСтрока.Льготник;
		Движение.Тариф             = ТекСтрока.ТарифЛьгота;
		Движение.ВидТарифа         = ТекСтрока.ВидТарифаЛьгота;
		Движение.МесяцНачисления   = НачалоМесяца(Период);
		Движение.СуммаНачисления   = ТекСтрока.Начислено;
		Движение.Количество        = ТекСтрока.КоличествоЛьгота;
		Движение.ЛьготнаяПлощадь   = ТекСтрока.ЛьготнаяПлощадь;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует движения документа по регистрам начислений.
Процедура ВыполнитьДвиженияПоРегистрамНачислений(СтруктураШапкиДокумента, ТаблицаЛьгот)
	
	ТаблицаНачислений = УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.КВП_СформироватьТаблицуДвижений();
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует старый механизм
	// отражения начислений в регл. учете, договор заполняется в проводках. Для тех, кто использует новый
	// механизм отражения, договор в проводках не заполняется.
	ЗаполнятьДоговорВПроводках = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(НачалоДня(Период));
	
	Если СтарыйДокумент Тогда
		
		Для Каждого СтрокаРасшифровки Из ТаблицаЛьгот Цикл
			
			Движение = ТаблицаНачислений.Добавить();
			Движение.Период                      = СтруктураШапкиДокумента.Дата;
			Движение.Организация                 = СтруктураШапкиДокумента.Организация;
			Движение.ЛицевойСчет                 = СтрокаРасшифровки.ЛицевыеСчета;
			
			Если ЗаполнятьДоговорВПроводках Тогда
				Движение.Договор                     = 
					УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(СтрокаРасшифровки.ЛицевыеСчета,
																								  СтруктураШапкиДокумента.Организация,
																								  СтруктураШапкиДокумента.Дата,
																								  "Договор");
			КонецЕсли;
			
			Движение.Услуга                      = СтрокаРасшифровки.Услуга;
			Движение.ЛьготнаяКатегория           = СтрокаРасшифровки.ЛьготнаяКатегория;
			Движение.РазделУчета                 = Перечисления.УПЖКХ_РазделыУчета.Льготы;
			Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.Начисление;
			Движение.СуммаНачисления             = -СтрокаРасшифровки.Начислено;
			
		КонецЦикла;
		
		ТабличнаяЧасть = Льготы.Выгрузить();
		СтрокиНаУдаление = ТабличнаяЧасть.НайтиСтроки(Новый Структура("Начислено", 0));
		Для Каждого ТекСтрока Из СтрокиНаУдаление Цикл
			ТабличнаяЧасть.Удалить(ТекСтрока);
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаРасшифровки Из ТаблицаЛьгот Цикл
			
			Движение = ТаблицаНачислений.Добавить();
			Движение.Период                      = СтруктураШапкиДокумента.Дата;
			Движение.Организация                 = СтруктураШапкиДокумента.Организация;
			Движение.ЛицевойСчет                 = СтрокаРасшифровки.ЛицевыеСчета;
			
			Если ЗаполнятьДоговорВПроводках Тогда
				Движение.Договор                 = СтрокаРасшифровки.Договор;
			КонецЕсли;
			
			Движение.Услуга                      = СтрокаРасшифровки.Услуга;
			Движение.СоставнаяУслуга             = СтрокаРасшифровки.СоставнаяУслуга;
			Движение.ЛьготнаяКатегория           = СтрокаРасшифровки.ЛьготнаяКатегория;
			Движение.РазделУчета                 = Перечисления.УПЖКХ_РазделыУчета.Льготы;
			Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.Начисление;
			Движение.СуммаНачисления             = -СтрокаРасшифровки.Начислено;
			//Движение.Тариф                       = СтрокаРасшифровки.ТарифЛьгота;
			//Движение.Количество                  = СтрокаРасшифровки.КоличествоЛьгота;
			Движение.Начало                      = СтрокаРасшифровки.НачалоПериода;
			Движение.Окончание                   = СтрокаРасшифровки.КонецПериода;
			Движение.ДнейНачислено               = ((НачалоДня(СтрокаРасшифровки.КонецПериода)
			                                       - НачалоДня(СтрокаРасшифровки.НачалоПериода)) / (24 * 60 * 60) + 1);
			Движение.МесяцНачисления             = КонецМесяца(СтруктураШапкиДокумента.Период);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.СформироватьДвиженияПоВзаиморасчетам(ЭтотОбъект, 
	                                                                        Новый Структура("Расход", ТаблицаНачислений));
	
	// Движения для отражения начислений в регл. учете.
	СформироватьДвиженияДляОтраженияНачисленийВРеглУчете(ЭтотОбъект);
	
КонецПроцедуры

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах.
	Если СтарыйДокумент Тогда 
		СуммаДокумента = КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "Льготы", "Начислено");
	Иначе
		КоличествоДнейНачисления = День(КонецМесяца(Период));
		СуммаДокумента           = КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "РасчетЛьгот", "Начислено");
	КонецЕсли;
	
КонецПроцедуры

// Процедура проведения документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если мУдалятьДвижения Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	КонецЕсли;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.КВП_РасчетЛьгот.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	ТаблицаЛьгот            = ПараметрыПроведения.ТаблицаЛьгот;
		
	Если СтарыйДокумент Тогда
		СформироватьДвиженияДляСтарогоДокумента(СтруктураШапкиДокумента, ТаблицаЛьгот);
	Иначе
		СформироватьДвиженияДляНовогоДокумента(СтруктураШапкиДокумента, ТаблицаЛьгот);
	КонецЕсли;
	
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата,
																										  Организация, Отказ);
	
	Если мНастройкиУчетнойПолитикиТСЖ.НеУчитыватьЛьготыВоВзаиморасчетах = Ложь Тогда
		ВыполнитьДвиженияПоРегистрамНачислений(СтруктураШапкиДокумента, ТаблицаЛьгот);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ПроведениеДокументаРасчетЛьготЖкх", ВремяНачала);
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
КонецПроцедуры

// Отменяет движения документа по регистрам.
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка реквизитов документа.
	ПроверяемыеРеквизиты.Добавить("Организация");
	Если СтарыйДокумент Тогда
		ПроверяемыеРеквизиты.Добавить("ВидОперации");
	КонецЕсли;
	Если Не СтарыйДокумент Тогда
		ПроверяемыеРеквизиты.Добавить("Период");
	КонецЕсли;
	
	Если Не СтарыйДокумент Тогда
		ПроверяемыеРеквизиты.Добавить("РасчетЛьгот.ЛицевыеСчета");
		ПроверяемыеРеквизиты.Добавить("РасчетЛьгот.Услуга");
		ПроверяемыеРеквизиты.Добавить("РасчетЛьгот.Льготник");
		ПроверяемыеРеквизиты.Добавить("РасчетЛьгот.ЛьготнаяКатегория");
	КонецЕсли;
	
	// Проверим, нет ли льгот по добровольному страхованию.
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		ТабличнаяЧасть    = ?(СтарыйДокумент, Льготы, РасчетЛьгот);
		СтрокиСтрахования = ТабличнаяЧасть.НайтиСтроки(Новый Структура("Услуга", УслугаДобровольногоСтрахования));
		
		Если Не СтрокиСтрахования.Количество() = 0 Тогда
			Отказ = Истина;
			
			Для Каждого СтрокаСтрахования Из СтрокиСтрахования Цикл
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке " + СтрокаСтрахования.НомерСтроки + " указана услуга добровольного страхования, льготы по которой нельзя начислять.");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ МОДУЛЯ

#Область ИнициализацияПеременныхМодуля

УказыватьЖильцовЧислами          = Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить();
УчитыватьКорректировкиПриРасчете = Константы.УПЖКХ_УчитыватьКорректировкиПриРасчетеЛьгот.Получить();

ТаблицаТарифов = Новый ТаблицаЗначений;
ТаблицаТарифов.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
ТаблицаТарифов.Колонки.Добавить("Услуга",      Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
ТаблицаТарифов.Колонки.Добавить("СостУслуга",  Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
ТаблицаТарифов.Колонки.Добавить("Тариф",       Новый ОписаниеТипов("Число"));

мТочностьОбъемаНачислений = Константы.УПЖКХ_ТочностьОбъемаНачислений.Получить();
ФорматнаяСтрокаОбъема     = "ЧДЦ=" + Строка(мТочностьОбъемаНачислений) + "; ЧН=0";

ТаблицаРасшифровкиРасчетаЛьгот = Новый ТаблицаЗначений;
ТаблицаРасшифровкиРасчетаЛьгот.Колонки.Добавить("ЛицевойСчет",     Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
ТаблицаРасшифровкиРасчетаЛьгот.Колонки.Добавить("Услуга",          Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
ТаблицаРасшифровкиРасчетаЛьгот.Колонки.Добавить("ОписаниеРасчета", Новый ОписаниеТипов("Строка"));

НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
ИспользоватьФункционалВыгрузкиВГЦЖС           = Константы.УПЖКХ_ИспользоватьФункционалВыгрузкиВГЦЖС.Получить();
#КонецОбласти

#КонецЕсли