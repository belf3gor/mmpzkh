
////////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ ПЕРЕМЕННЫХ МОДУЛЯ

&НаКлиенте
Перем мСтруктураРедСтроки;               // Хранит данные строки дерева при изменении.
&НаКлиенте
Перем мИдентификаторКорняУдаляемойСтроки;// Хранит идентификатор корневой строки для строки удаляемой.
&НаКлиенте
Перем СоответствиеСпособовРасчета;       // Хранит способы расчета услуг.

#Область ПрочиеПроцедурыИФункции

&НаСервере
// Заполняет табличную часть.
Процедура ЗаполнитьТабличнуюЧасть()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТабличнуюЧастьНовыйАлгоритм();
	
	// Заполним таблицу расшифровки расчета льгот.
	ТаблицаРасшифровкиРасчетаЛьгот.Загрузить(ДокументОбъект.ТаблицаРасшифровкиРасчетаЛьгот);
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ЗаполнитьДеревоЛьготПоТабличнойЧасти();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
// Устанавливает уровень в строке дерева.
Процедура УстановитьУровеньСтроки(Ветка, ИмяВетки = "")
	
	УровеньСтроки = 0;
	
	Если ИмяВетки = "ЛицевойСчет" Тогда
		УровеньСтроки = 0;
	ИначеЕсли ИмяВетки = "Услуга" Тогда
		УровеньСтроки = 1;
	ИначеЕсли ИмяВетки = "СоставнаяУслуга" Тогда
		УровеньСтроки = 2;
	ИначеЕсли ИмяВетки = "Льготник" Тогда
		УровеньСтроки = 3;
	ИначеЕсли ИмяВетки = "Период" Тогда
		УровеньСтроки = 4;
	КонецЕсли;
	
	Ветка.УровеньСтроки = УровеньСтроки;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет дерево значений по табличной части "Расчет льгот".
Процедура ЗаполнитьДеревоЛьготПоТабличнойЧасти(СортироватьПоНомеруСтрокиВТЧ = Ложь)
	
	МассивПолейСортировки = Новый Массив;
	МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.Владелец");
	МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.ВидПомещения");
	МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.Код");
	МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.Суффикс");
	МассивПолейСортировки.Добавить("Услуга");
	МассивПолейСортировки.Добавить("СоставнаяУслуга");
	МассивПолейСортировки.Добавить("Льготник");
	МассивПолейСортировки.Добавить("ЛьготнаяКатегория");
	МассивПолейСортировки.Добавить("НачалоПериода");
	МассивПолейСортировки.Добавить("КонецПериода");
	
	ТаблицаПоТЧ = УПЖКХ_ОбщегоНазначенияСервер.СформироватьЗапросПоТабличнойЧасти(Объект, "РасчетЛьгот", МассивПолейСортировки);
	
	// Сортировать строки таблицы начислений по исходному номеру строки в табличной части
	// документа можно только при открытии формы, так как при заполнении документа
	// номер строки в ТЧ тоже будет заполнен, но он не будет соответствовать необходимым
	// правилам сортировки для корректного заполнения дерева начислений.
	Если СортироватьПоНомеруСтрокиВТЧ И Объект.РасчетЛьгот.Количество() > 0 Тогда
		ТаблицаПоТЧ.Сортировать("ИсходныйНомерСтроки");
	КонецЕсли;
	
	ТаблицаЛьгот.ПолучитьЭлементы().Очистить();
	
	ПервыйОбходРезультата = Истина;
	Ном = 1;
	ВсегоНачисленоПоДокументу = 0;
	
	// Для каждой строки заполняем поле "Уровень строки":
	// Лицевой счет - 0;
	// Услуга - 1;
	// Составная услуга - 2;
	// Льготник - 3;
	// Период - 4;
	
	Для Каждого ТекЗначение Из ТаблицаПоТЧ Цикл
		
		ТекущееНачало     = Формат(ТекЗначение.НачалоПериода, "ДЛФ=Д");
		ТекущийКонец      = Формат(ТекЗначение.КонецПериода, "ДЛФ=Д");
		
		Если ПервыйОбходРезультата Тогда
			
			ТекущийЛС         = ТекЗначение.ЛицевыеСчета;
			ТекущаяУслуга     = ТекЗначение.Услуга;
			ТекСостУслуга     = ТекЗначение.СоставнаяУслуга;
			ТекущийЛьготник   = ТекЗначение.Льготник;
			ТекущаяКатегория  = ТекЗначение.ЛьготнаяКатегория;
			
			ВеткаЛС              = ТаблицаЛьгот.ПолучитьЭлементы().Добавить();
			ВеткаЛС.НомерСтроки  = Ном;
			ВеткаЛС.ЛицевыеСчета = ТекЗначение.ЛицевыеСчета;
			УстановитьУровеньСтроки(ВеткаЛС, "ЛицевойСчет");
			
			ВеткаУслуг               = ВеткаЛС.ПолучитьЭлементы().Добавить();
			ВеткаУслуг.ЛицевыеСчета  = ТекЗначение.Услуга;
			УстановитьУровеньСтроки(ВеткаУслуг, "Услуга");
			
			Если ЗначениеЗаполнено(ТекЗначение.СоставнаяУслуга) Тогда
				ВеткаСостУслуги = ВеткаУслуг.ПолучитьЭлементы().Добавить();
				ВеткаСостУслуги.ЛицевыеСчета = ТекЗначение.СоставнаяУслуга;
				УстановитьУровеньСтроки(ВеткаСостУслуги, "СоставнаяУслуга");
				ВеткаЛьготник = ВеткаСостУслуги.ПолучитьЭлементы().Добавить();
			Иначе
				ВеткаЛьготник = ВеткаУслуг.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			УстановитьУровеньСтроки(ВеткаЛьготник, "Льготник");
			
			ВеткаЛьготник.ЛицевыеСчета      = ТекЗначение.Льготник;
			ВеткаЛьготник.ЛьготнаяКатегория = ТекЗначение.ЛьготнаяКатегория;
			
			ВеткаПериод = ВеткаЛьготник.ПолучитьЭлементы().Добавить();
			УстановитьУровеньСтроки(ВеткаПериод, "Период");
			ВеткаПериод.ЛицевыеСчета     = ТекущееНачало + " - " + ТекущийКонец;
			ВеткаПериод.НачалоПериода    = ТекЗначение.НачалоПериода;
			ВеткаПериод.КонецПериода     = ТекЗначение.КонецПериода;
			ВеткаПериод.СуммаУслуги      = ТекЗначение.СуммаУслуги;
			ВеткаПериод.Тариф            = ТекЗначение.Тариф;
			ВеткаПериод.Количество       = ТекЗначение.Количество;
			ВеткаПериод.Начислено        = ТекЗначение.Начислено;
			ВеткаПериод.Договор          = ТекЗначение.Договор;
			ВеткаПериод.ТарифЛьгота      = ТекЗначение.ТарифЛьгота;
			ВеткаПериод.КоличествоЛьгота = ТекЗначение.КоличествоЛьгота;
			ВеткаПериод.РазмерСкидки     = ТекЗначение.РазмерСкидки;
			ВеткаПериод.ЛьготнаяПлощадь  = ТекЗначение.ЛьготнаяПлощадь;
			
			ПервыйОбходРезультата = Ложь;
			Ном = Ном + 1;
			
		Иначе
			
			Если ТекЗначение.ЛицевыеСчета = ТекущийЛС Тогда
				
				Если ТекущаяУслуга = ТекЗначение.Услуга Тогда
					
					Если ЗначениеЗаполнено(ТекЗначение.СоставнаяУслуга) Тогда
						
						Если ТекСостУслуга = ТекЗначение.СоставнаяУслуга Тогда
							
							Если ТекущийЛьготник = ТекЗначение.Льготник
							   И ТекущаяКатегория = ТекЗначение.ЛьготнаяКатегория Тогда
								
								ВеткаПериод = ВеткаЛьготник.ПолучитьЭлементы().Добавить();
								УстановитьУровеньСтроки(ВеткаПериод, "Период");
								ВеткаПериод.ЛицевыеСчета     = ТекущееНачало + " - " + ТекущийКонец;
								ВеткаПериод.НачалоПериода    = ТекЗначение.НачалоПериода;
								ВеткаПериод.КонецПериода     = ТекЗначение.КонецПериода;
								ВеткаПериод.СуммаУслуги      = ТекЗначение.СуммаУслуги;
								ВеткаПериод.Тариф            = ТекЗначение.Тариф;
								ВеткаПериод.Количество       = ТекЗначение.Количество;
								ВеткаПериод.Начислено        = ТекЗначение.Начислено;
								ВеткаПериод.Договор          = ТекЗначение.Договор;
								ВеткаПериод.ТарифЛьгота      = ТекЗначение.ТарифЛьгота;
								ВеткаПериод.КоличествоЛьгота = ТекЗначение.КоличествоЛьгота;
								ВеткаПериод.РазмерСкидки     = ТекЗначение.РазмерСкидки;
								ВеткаПериод.ЛьготнаяПлощадь  = ТекЗначение.ЛьготнаяПлощадь;
								
							Иначе
								
								ВеткаЛьготник = ВеткаСостУслуги.ПолучитьЭлементы().Добавить();
								УстановитьУровеньСтроки(ВеткаЛьготник, "Льготник");
								ВеткаЛьготник.ЛицевыеСчета      = ТекЗначение.Льготник;
								ВеткаЛьготник.ЛьготнаяКатегория = ТекЗначение.ЛьготнаяКатегория;
								
								ВеткаПериод = ВеткаЛьготник.ПолучитьЭлементы().Добавить();
								УстановитьУровеньСтроки(ВеткаПериод, "Период");
								ВеткаПериод.ЛицевыеСчета     = ТекущееНачало + " - " + ТекущийКонец;
								ВеткаПериод.НачалоПериода    = ТекЗначение.НачалоПериода;
								ВеткаПериод.КонецПериода     = ТекЗначение.КонецПериода;
								ВеткаПериод.СуммаУслуги      = ТекЗначение.СуммаУслуги;
								ВеткаПериод.Тариф            = ТекЗначение.Тариф;
								ВеткаПериод.Количество       = ТекЗначение.Количество;
								ВеткаПериод.Начислено        = ТекЗначение.Начислено;
								ВеткаПериод.Договор          = ТекЗначение.Договор;
								ВеткаПериод.ТарифЛьгота      = ТекЗначение.ТарифЛьгота;
								ВеткаПериод.КоличествоЛьгота = ТекЗначение.КоличествоЛьгота;
								ВеткаПериод.РазмерСкидки     = ТекЗначение.РазмерСкидки;
								ВеткаПериод.ЛьготнаяПлощадь  = ТекЗначение.ЛьготнаяПлощадь;
								
							КонецЕсли;
							
						Иначе
							
							ВеткаСостУслуги = ВеткаУслуг.ПолучитьЭлементы().Добавить();
							УстановитьУровеньСтроки(ВеткаСостУслуги, "СоставнаяУслуга");
							ВеткаСостУслуги.ЛицевыеСчета = ТекЗначение.СоставнаяУслуга;
							ВеткаЛьготник = ВеткаСостУслуги.ПолучитьЭлементы().Добавить();
							УстановитьУровеньСтроки(ВеткаЛьготник, "Льготник");
							
							ВеткаЛьготник.ЛицевыеСчета      = ТекЗначение.Льготник;
							ВеткаЛьготник.ЛьготнаяКатегория = ТекЗначение.ЛьготнаяКатегория;
							
							ВеткаПериод = ВеткаЛьготник.ПолучитьЭлементы().Добавить();
							УстановитьУровеньСтроки(ВеткаПериод, "Период");
							ВеткаПериод.ЛицевыеСчета     = ТекущееНачало + " - " + ТекущийКонец;
							ВеткаПериод.НачалоПериода    = ТекЗначение.НачалоПериода;
							ВеткаПериод.КонецПериода     = ТекЗначение.КонецПериода;
							ВеткаПериод.СуммаУслуги      = ТекЗначение.СуммаУслуги;
							ВеткаПериод.Тариф            = ТекЗначение.Тариф;
							ВеткаПериод.Количество       = ТекЗначение.Количество;
							ВеткаПериод.Начислено        = ТекЗначение.Начислено;
							ВеткаПериод.Договор          = ТекЗначение.Договор;
							ВеткаПериод.ТарифЛьгота      = ТекЗначение.ТарифЛьгота;
							ВеткаПериод.КоличествоЛьгота = ТекЗначение.КоличествоЛьгота;
							ВеткаПериод.РазмерСкидки     = ТекЗначение.РазмерСкидки;
							ВеткаПериод.ЛьготнаяПлощадь  = ТекЗначение.ЛьготнаяПлощадь;
							
						КонецЕсли;
						
					Иначе
						
						Если ТекущийЛьготник = ТекЗначение.Льготник
						   И ТекущаяКатегория = ТекЗначение.ЛьготнаяКатегория Тогда
							
							ВеткаПериод = ВеткаЛьготник.ПолучитьЭлементы().Добавить();
							УстановитьУровеньСтроки(ВеткаПериод, "Период");
							ВеткаПериод.ЛицевыеСчета     = ТекущееНачало + " - " + ТекущийКонец;
							ВеткаПериод.НачалоПериода    = ТекЗначение.НачалоПериода;
							ВеткаПериод.КонецПериода     = ТекЗначение.КонецПериода;
							ВеткаПериод.СуммаУслуги      = ТекЗначение.СуммаУслуги;
							ВеткаПериод.Тариф            = ТекЗначение.Тариф;
							ВеткаПериод.Количество       = ТекЗначение.Количество;
							ВеткаПериод.Начислено        = ТекЗначение.Начислено;
							ВеткаПериод.Договор          = ТекЗначение.Договор;
							ВеткаПериод.ТарифЛьгота      = ТекЗначение.ТарифЛьгота;
							ВеткаПериод.КоличествоЛьгота = ТекЗначение.КоличествоЛьгота;
							ВеткаПериод.РазмерСкидки     = ТекЗначение.РазмерСкидки;
							ВеткаПериод.ЛьготнаяПлощадь  = ТекЗначение.ЛьготнаяПлощадь;
							
						Иначе
							
							ВеткаЛьготник = ВеткаУслуг.ПолучитьЭлементы().Добавить();
							УстановитьУровеньСтроки(ВеткаЛьготник, "Льготник");
							ВеткаЛьготник.ЛицевыеСчета      = ТекЗначение.Льготник;
							ВеткаЛьготник.ЛьготнаяКатегория = ТекЗначение.ЛьготнаяКатегория;
							
							ВеткаПериод = ВеткаЛьготник.ПолучитьЭлементы().Добавить();
							УстановитьУровеньСтроки(ВеткаПериод, "Период");
							ВеткаПериод.ЛицевыеСчета     = ТекущееНачало + " - " + ТекущийКонец;
							ВеткаПериод.НачалоПериода    = ТекЗначение.НачалоПериода;
							ВеткаПериод.КонецПериода     = ТекЗначение.КонецПериода;
							ВеткаПериод.СуммаУслуги      = ТекЗначение.СуммаУслуги;
							ВеткаПериод.Тариф            = ТекЗначение.Тариф;
							ВеткаПериод.Количество       = ТекЗначение.Количество;
							ВеткаПериод.Начислено        = ТекЗначение.Начислено;
							ВеткаПериод.Договор          = ТекЗначение.Договор;
							ВеткаПериод.ТарифЛьгота      = ТекЗначение.ТарифЛьгота;
							ВеткаПериод.КоличествоЛьгота = ТекЗначение.КоличествоЛьгота;
							ВеткаПериод.РазмерСкидки     = ТекЗначение.РазмерСкидки;
							ВеткаПериод.ЛьготнаяПлощадь  = ТекЗначение.ЛьготнаяПлощадь;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					ВеткаУслуг               = ВеткаЛС.ПолучитьЭлементы().Добавить();
					УстановитьУровеньСтроки(ВеткаУслуг, "Услуга");
					ВеткаУслуг.ЛицевыеСчета  = ТекЗначение.Услуга;
					
					Если ЗначениеЗаполнено(ТекЗначение.СоставнаяУслуга) Тогда
						ВеткаСостУслуги = ВеткаУслуг.ПолучитьЭлементы().Добавить();
						УстановитьУровеньСтроки(ВеткаСостУслуги, "СоставнаяУслуга");
						ВеткаСостУслуги.ЛицевыеСчета = ТекЗначение.СоставнаяУслуга;
						ВеткаЛьготник = ВеткаСостУслуги.ПолучитьЭлементы().Добавить();
					Иначе
						ВеткаЛьготник = ВеткаУслуг.ПолучитьЭлементы().Добавить();
					КонецЕсли;
					УстановитьУровеньСтроки(ВеткаЛьготник, "Льготник");
					
					ВеткаЛьготник.ЛицевыеСчета      = ТекЗначение.Льготник;
					ВеткаЛьготник.ЛьготнаяКатегория = ТекЗначение.ЛьготнаяКатегория;
					
					ВеткаПериод = ВеткаЛьготник.ПолучитьЭлементы().Добавить();
					УстановитьУровеньСтроки(ВеткаПериод, "Период");
					ВеткаПериод.ЛицевыеСчета     = ТекущееНачало + " - " + ТекущийКонец;
					ВеткаПериод.НачалоПериода    = ТекЗначение.НачалоПериода;
					ВеткаПериод.КонецПериода     = ТекЗначение.КонецПериода;
					ВеткаПериод.СуммаУслуги      = ТекЗначение.СуммаУслуги;
					ВеткаПериод.Тариф            = ТекЗначение.Тариф;
					ВеткаПериод.Количество       = ТекЗначение.Количество;
					ВеткаПериод.Начислено        = ТекЗначение.Начислено;
					ВеткаПериод.Договор          = ТекЗначение.Договор;
					ВеткаПериод.ТарифЛьгота      = ТекЗначение.ТарифЛьгота;
					ВеткаПериод.КоличествоЛьгота = ТекЗначение.КоличествоЛьгота;
					ВеткаПериод.РазмерСкидки     = ТекЗначение.РазмерСкидки;
					ВеткаПериод.ЛьготнаяПлощадь  = ТекЗначение.ЛьготнаяПлощадь;
					
				КонецЕсли;
				
			Иначе
				
				ВеткаЛС              = ТаблицаЛьгот.ПолучитьЭлементы().Добавить();
				УстановитьУровеньСтроки(ВеткаЛС, "ЛицевойСчет");
				ВеткаЛС.НомерСтроки  = Ном;
				ВеткаЛС.ЛицевыеСчета = ТекЗначение.ЛицевыеСчета;
			
				ВеткаУслуг               = ВеткаЛС.ПолучитьЭлементы().Добавить();
				УстановитьУровеньСтроки(ВеткаУслуг, "Услуга");
				ВеткаУслуг.ЛицевыеСчета  = ТекЗначение.Услуга;
				
				Если ЗначениеЗаполнено(ТекЗначение.СоставнаяУслуга) Тогда
					ВеткаСостУслуги = ВеткаУслуг.ПолучитьЭлементы().Добавить();
					УстановитьУровеньСтроки(ВеткаСостУслуги, "СоставнаяУслуга");
					ВеткаСостУслуги.ЛицевыеСчета = ТекЗначение.СоставнаяУслуга;
					ВеткаЛьготник = ВеткаСостУслуги.ПолучитьЭлементы().Добавить();
				Иначе
					ВеткаЛьготник = ВеткаУслуг.ПолучитьЭлементы().Добавить();
				КонецЕсли;
				УстановитьУровеньСтроки(ВеткаЛьготник, "Льготник");
				
				ВеткаЛьготник.ЛицевыеСчета      = ТекЗначение.Льготник;
				ВеткаЛьготник.ЛьготнаяКатегория = ТекЗначение.ЛьготнаяКатегория;
				
				ВеткаПериод = ВеткаЛьготник.ПолучитьЭлементы().Добавить();
				УстановитьУровеньСтроки(ВеткаПериод, "Период");
				ВеткаПериод.ЛицевыеСчета     = ТекущееНачало + " - " + ТекущийКонец;
				ВеткаПериод.НачалоПериода    = ТекЗначение.НачалоПериода;
				ВеткаПериод.КонецПериода     = ТекЗначение.КонецПериода;
				ВеткаПериод.СуммаУслуги      = ТекЗначение.СуммаУслуги;
				ВеткаПериод.Тариф            = ТекЗначение.Тариф;
				ВеткаПериод.Количество       = ТекЗначение.Количество;
				ВеткаПериод.Начислено        = ТекЗначение.Начислено;
				ВеткаПериод.Договор          = ТекЗначение.Договор;
				ВеткаПериод.ТарифЛьгота      = ТекЗначение.ТарифЛьгота;
				ВеткаПериод.КоличествоЛьгота = ТекЗначение.КоличествоЛьгота;
				ВеткаПериод.РазмерСкидки     = ТекЗначение.РазмерСкидки;
				ВеткаПериод.ЛьготнаяПлощадь  = ТекЗначение.ЛьготнаяПлощадь;
				
				Ном = Ном + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущийЛС         = ТекЗначение.ЛицевыеСчета;
		ТекущаяУслуга     = ТекЗначение.Услуга;
		ТекСостУслуга     = ТекЗначение.СоставнаяУслуга;
		ТекущийЛьготник   = ТекЗначение.Льготник;
		ТекущаяКатегория  = ТекЗначение.ЛьготнаяКатегория;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает массив с периодами, по которым есть дубли строк.
Функция ПолучитьТаблицуДублейПериодов(врМассивЛьготПоПериодам)
	
	врМассивДублей = Новый Массив;
	
	Для Каждого СтрокаМассиваЛьготПоПериодам Из врМассивЛьготПоПериодам Цикл
		
		// Берем каждую строку временного массива льгот по периодам и ищем такой же период в массиве дублей.
		ПериодУжеДобавлен = Ложь;
		Для Каждого СтрокаМассиваТаблицыДублей Из врМассивДублей Цикл
			
			// В качестве дубля определяем период, объем и сумму услуги, так как за один период
			// могут быть произведены начисления по разным видам тарифов.
			Если СтрокаМассиваТаблицыДублей.НачалоПериода = СтрокаМассиваЛьготПоПериодам.НачалоПериода
			   И СтрокаМассиваТаблицыДублей.КонецПериода  = СтрокаМассиваЛьготПоПериодам.КонецПериода
			   И СтрокаМассиваТаблицыДублей.Количество    = СтрокаМассиваЛьготПоПериодам.Количество
			   И СтрокаМассиваТаблицыДублей.СуммаУслуги   = СтрокаМассиваЛьготПоПериодам.СуммаУслуги Тогда
				ПериодУжеДобавлен = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Если период уже есть во временном массиве дублей, то переходим к следующей строке.
		Если ПериодУжеДобавлен Тогда
			Продолжить;
		КонецЕсли;
		
		// Текущего периода нет в массиве дублей. Нужно проверить требуется ли его добавить.
		Для Каждого СравниваемаяСтрокаМассива Из врМассивЛьготПоПериодам Цикл
			
			// Если сравниваемые строки удовлетворяют условиям, то нужно добавить строку в массив дублей.
			Если СравниваемаяСтрокаМассива.НачалоПериода           =  СтрокаМассиваЛьготПоПериодам.НачалоПериода
				И СравниваемаяСтрокаМассива.КонецПериода           =  СтрокаМассиваЛьготПоПериодам.КонецПериода
				И СравниваемаяСтрокаМассива.Количество             =  СтрокаМассиваЛьготПоПериодам.Количество
				И СравниваемаяСтрокаМассива.СуммаУслуги            =  СтрокаМассиваЛьготПоПериодам.СуммаУслуги
				И СравниваемаяСтрокаМассива.НомерСтроки            <> СтрокаМассиваЛьготПоПериодам.НомерСтроки
				И (СравниваемаяСтрокаМассива.Льготник              <> СтрокаМассиваЛьготПоПериодам.Льготник
				   ИЛИ СравниваемаяСтрокаМассива.ЛьготнаяКатегория <> СтрокаМассиваЛьготПоПериодам.ЛьготнаяКатегория) Тогда
				
				// В качестве дубля определяем период, объем и сумму услуги, так как за один период
				// могут быть произведены начисления по разным видам тарифов.
				СтруктураМассиваДублей = Новый Структура("НачалоПериода, КонецПериода, Количество, СуммаУслуги");
				СтруктураМассиваДублей.НачалоПериода = СтрокаМассиваЛьготПоПериодам.НачалоПериода;
				СтруктураМассиваДублей.КонецПериода  = СтрокаМассиваЛьготПоПериодам.КонецПериода;
				СтруктураМассиваДублей.Количество    = СтрокаМассиваЛьготПоПериодам.Количество;
				СтруктураМассиваДублей.СуммаУслуги   = СтрокаМассиваЛьготПоПериодам.СуммаУслуги;
				
				врМассивДублей.Добавить(СтруктураМассиваДублей);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат врМассивДублей;
	
КонецФункции

&НаСервере
// Процедура заполняет табличную часть "Расчет льгот" по дереву льгот.
Процедура ЗаполнитьТабличнуюЧастьПоДеревуЛьгот()
	
	Объект.РасчетЛьгот.Очистить();
	
	// Перенесем данные из дерева в табличную часть документа.
	Для Каждого ВеткаЛС Из ТаблицаЛьгот.ПолучитьЭлементы() Цикл
		
		Для Каждого ВеткаУслуги Из ВеткаЛС.ПолучитьЭлементы() Цикл
			
			Для Каждого ВеткаПодУслуги Из ВеткаУслуги.ПолучитьЭлементы() Цикл
				
				Если ТипЗнч(ВеткаПодУслуги.ЛицевыеСчета) = Тип("СправочникСсылка.КВП_Услуги") Тогда
					
					Для Каждого ВеткаЛьготника Из ВеткаПодУслуги.ПолучитьЭлементы() Цикл
						
						Для Каждого ВеткаДеталей Из ВеткаЛьготника.ПолучитьЭлементы() Цикл
							НовСтр                   = Объект.РасчетЛьгот.Добавить();
							НовСтр.Услуга            = ВеткаУслуги.ЛицевыеСчета;
							НовСтр.СоставнаяУслуга   = ВеткаПодУслуги.ЛицевыеСчета;
							НовСтр.ЛицевыеСчета      = ВеткаЛС.ЛицевыеСчета;
							НовСтр.Льготник          = ВеткаЛьготника.ЛицевыеСчета;
							НовСтр.ЛьготнаяКатегория = ВеткаЛьготника.ЛьготнаяКатегория;
							НовСтр.Количество        = ВеткаДеталей.Количество;
							НовСтр.Тариф             = ВеткаДеталей.Тариф;
							НовСтр.Начислено         = ВеткаДеталей.Начислено;
							НовСтр.СуммаУслуги       = ВеткаДеталей.СуммаУслуги;
							НовСтр.Договор           = ВеткаДеталей.Договор;
							НовСтр.НачалоПериода     = ВеткаДеталей.НачалоПериода;
							НовСтр.КонецПериода      = ВеткаДеталей.КонецПериода;
							НовСтр.КоличествоЛьгота  = ВеткаДеталей.КоличествоЛьгота;
							НовСтр.ТарифЛьгота       = ВеткаДеталей.ТарифЛьгота;
							НовСтр.РазмерСкидки      = ВеткаДеталей.РазмерСкидки;
							НовСтр.ЛьготнаяПлощадь   = ВеткаДеталей.ЛьготнаяПлощадь;
						КонецЦикла;
						
					КонецЦикла;
					
				Иначе
					
					Для Каждого ВеткаДеталей Из ВеткаПодУслуги.ПолучитьЭлементы() Цикл
						НовСтр                   = Объект.РасчетЛьгот.Добавить();
						НовСтр.Услуга            = ВеткаУслуги.ЛицевыеСчета;
						НовСтр.ЛицевыеСчета      = ВеткаЛС.ЛицевыеСчета;
						НовСтр.Льготник          = ВеткаПодУслуги.ЛицевыеСчета;
						НовСтр.ЛьготнаяКатегория = ВеткаПодУслуги.ЛьготнаяКатегория;
						НовСтр.Количество        = ВеткаДеталей.Количество;
						НовСтр.Тариф             = ВеткаДеталей.Тариф;
						НовСтр.Начислено         = ВеткаДеталей.Начислено;
						НовСтр.СуммаУслуги       = ВеткаДеталей.СуммаУслуги;
						НовСтр.Договор           = ВеткаДеталей.Договор;
						НовСтр.НачалоПериода     = ВеткаДеталей.НачалоПериода;
						НовСтр.КонецПериода      = ВеткаДеталей.КонецПериода;
						НовСтр.КоличествоЛьгота  = ВеткаДеталей.КоличествоЛьгота;
						НовСтр.ТарифЛьгота       = ВеткаДеталей.ТарифЛьгота;
						НовСтр.РазмерСкидки      = ВеткаДеталей.РазмерСкидки;
						НовСтр.ЛьготнаяПлощадь   = ВеткаДеталей.ЛьготнаяПлощадь;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Функция разбивает месяц начисления на подпериоды при добавлении нового периода в дерево значений.
Функция ВыполнитьРазбивкуНаПодпериоды(Строки, ВыбранныйПериод)
	
	Индекс = 1;
	Для Каждого ТекСтрока Из Строки Цикл
		Если НачалоДня(ТекСтрока.НачалоПериода) < НачалоДня(ВыбранныйПериод)
		   И НачалоДня(ТекСтрока.КонецПериода) >= НачалоДня(ВыбранныйПериод) Тогда
			
			КонецПериода = ТекСтрока.КонецПериода;
			
			ТекСтрока.КонецПериода = НачалоДня(ВыбранныйПериод) - 1;
			ТекСтрока.ЛицевыеСчета  = Формат(ТекСтрока.НачалоПериода, "ДЛФ=Д") + " - " + Формат(ТекСтрока.КонецПериода, "ДЛФ=Д");
			НоваяВетка = Строки.Добавить();
			НоваяВетка.ЛицевыеСчета  = Формат(ВыбранныйПериод, "ДЛФ=Д") + " - " + Формат(КонецПериода, "ДЛФ=Д");
			НоваяВетка.НачалоПериода = ВыбранныйПериод;
			НоваяВетка.КонецПериода  = КонецПериода;
			
			ИндексНовойСтроки = НоваяВетка.ПолучитьИдентификатор();
			
			Прервать;
			
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	// сместим новую строку в порядке возрастания периодов
	Если Не ИндексНовойСтроки = Неопределено И НЕ Индекс = Строки.Количество() - 1 Тогда
		Строки.Сдвинуть(Строки.Количество() - 1, - (Строки.Количество() - 1 - Индекс));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Функция возвращает способ расчета указанной услуги из соответствия или,
// если не находит в соответствие, вызывает фунцию на сервере.
Функция ПолучитьСпособРасчетаУслуги(мУслуга)
	
	СпособРасчета = СоответствиеСпособовРасчета.Получить(мУслуга);
	Если СпособРасчета = Неопределено Тогда
		СпособРасчета = ПолучитьСпособРасчетаУслугиНаСервере(мУслуга);
		Если НЕ СпособРасчета = Неопределено Тогда
			СоответствиеСпособовРасчета.Вставить(мУслуга, СпособРасчета);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СпособРасчета;
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает способ расчета указанной услуги.
Функция ПолучитьСпособРасчетаУслугиНаСервере(мУслуга)
	
	Возврат Справочники.КВП_Услуги.ПолучитьСпособРасчетаУслуги(мУслуга);
	
КонецФункции

&НаКлиенте
// Процедура заполняет данные всех дочерних строк у текущей строки.
Процедура ЗаполнитьДанныеДочернихСтрок(Строка, ШаблонСтроки)
	
	КоллекцияЭлементов = Строка.ПолучитьЭлементы();
	
	Для Каждого ТекСтрока Из ШаблонСтроки Цикл
		
		НоваяСтрока = КоллекцияЭлементов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		Если ТекСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
			ЗаполнитьДанныеДочернихСтрок(НоваяСтрока, ТекСтрока.ПолучитьЭлементы());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает максимальный номер строки дерева значений.
Функция ПолучитьМаксимальныйНомерСтроки()
	
	НомСтрокиДерева = 0;
	Для Каждого ТекСтр Из ТаблицаЛьгот.ПолучитьЭлементы() Цикл
		Если ТекСтр.НомерСтроки > НомСтрокиДерева Тогда
			НомСтрокиДерева = ТекСтр.НомерСтроки
		КонецЕсли;
	КонецЦикла;
	
	Возврат НомСтрокиДерева;
	
КонецФункции

&НаКлиенте
// Процедура выполняет действия при активации строки дерева значений.
Процедура ВыполнитьДействияПриАктивацииСтроки(Элемент)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	// Выведем расшифровку расчета льгот.
	Если Элементы.РасшифровкаРасчетаЛьготПоЛС.Видимость Тогда
		
		ИдентификаторТекСтроки = Элемент.ТекущаяСтрока;
		
		ВывестиРасшифровку(ИдентификаторТекСтроки);
		
	КонецЕсли;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекТип = ТипЗнч(ТекСтрока.ЛицевыеСчета);
	
	ТолькоПросмотрЛицевыеСчета      = Ложь;
	ТолькоПросмотрЛьготнаяКатегория = Ложь;
	ТолькоПросмотрНачислено         = Ложь;
	ТолькоПросмотрТарифЛьгота       = Ложь;
	ТолькоПросмотрКоличествоЛьгота  = Ложь;
	
	// !Возможность добавления новых строк в ТЧ "ТаблицаЛьгот" ИСКЛЮЧЕНА по следующим причинам:
	// 1. Сложное редактирование для пользователей, т.к. необходимо добавлять строки в многоуровневое дерево.
	//    Большой риск того, что при заполнении что-то будет упущено.
	// 2. При добавлении новой ветки с лицевым счетом могут заполняться не все вспомогательные поля.
	
	//Если ТекТип = Тип("СправочникСсылка.КВП_Услуги")
	//   И ЗначениеЗаполнено(ТекСтрока.ЛицевыеСчета) Тогда
	//	СпособРасчета = ПолучитьСпособРасчетаУслуги(ТекСтрока.ЛицевыеСчета);
	//	Если СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам")
	//	 ИЛИ СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
	//		Элементы.РасчетЛьготДобавить.Доступность = Ложь;
	//	Иначе
	//		Элементы.РасчетЛьготДобавить.Доступность = Истина;
	//	КонецЕсли;
	//ИначеЕсли ТекТип = Тип("Строка") Тогда
	//	Элементы.РасчетЛьготДобавить.Доступность = Ложь;
	//Иначе
	//	Элементы.РасчетЛьготДобавить.Доступность = Истина;
	//КонецЕсли;
	
	Если ТекТип = Тип("СправочникСсылка.КВП_ЛицевыеСчета")
	 ИЛИ ТекТип = Тип("СправочникСсылка.КВП_Услуги")
	 ИЛИ ТекТип = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		
		Если ТекТип = Тип("СправочникСсылка.КВП_ЛицевыеСчета")
		 ИЛИ ТекТип = Тип("СправочникСсылка.КВП_Услуги") Тогда
			ТолькоПросмотрЛьготнаяКатегория = Истина;
		КонецЕсли;
		
		ТолькоПросмотрНачислено        = Истина;
		ТолькоПросмотрТарифЛьгота      = Истина;
		ТолькоПросмотрКоличествоЛьгота = Истина;
		
		Если ТекТип = Тип("СправочникСсылка.КВП_Услуги")
		   И ТипЗнч(ТекСтрока.ПолучитьРодителя().ЛицевыеСчета) = Тип("СправочникСсылка.КВП_Услуги") Тогда
			ТолькоПросмотрЛицевыеСчета = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекТип = Тип("Строка") Тогда
		
		ТолькоПросмотрЛицевыеСчета       = Истина;
		ТолькоПросмотрЛьготнаяКатегория  = Истина;
		
	КонецЕсли;
		
	Если НЕ Элементы.РасчетЛьготЛицевыеСчета.ТолькоПросмотр = ТолькоПросмотрЛицевыеСчета Тогда
		Элементы.РасчетЛьготЛицевыеСчета.ТолькоПросмотр = ТолькоПросмотрЛицевыеСчета;
	КонецЕсли;
	Если НЕ Элементы.РасчетЛьготЛьготнаяКатегория.ТолькоПросмотр = ТолькоПросмотрЛьготнаяКатегория Тогда
		Элементы.РасчетЛьготЛьготнаяКатегория.ТолькоПросмотр = ТолькоПросмотрЛьготнаяКатегория;
	КонецЕсли;
	Если НЕ Элементы.РасчетЛьготНачислено.ТолькоПросмотр = ТолькоПросмотрНачислено Тогда
		Элементы.РасчетЛьготНачислено.ТолькоПросмотр = ТолькоПросмотрНачислено;
	КонецЕсли;
	Если НЕ Элементы.РасчетЛьготТарифЛьгота.ТолькоПросмотр = ТолькоПросмотрТарифЛьгота Тогда
		Элементы.РасчетЛьготТарифЛьгота.ТолькоПросмотр = ТолькоПросмотрТарифЛьгота;
	КонецЕсли;
	Если НЕ Элементы.РасчетЛьготКоличествоЛьгота.ТолькоПросмотр = ТолькоПросмотрКоличествоЛьгота Тогда
		Элементы.РасчетЛьготКоличествоЛьгота.ТолькоПросмотр = ТолькоПросмотрКоличествоЛьгота;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет добавление новой строки в дерево значений.
Процедура ВыполнитьДобавлениеСтроки(Элемент, Копирование, Отказ)
	
	Отказ = Истина;
	Модифицированность = Истина;
	
	ТекСтрока = Элемент.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекРодитель = ТекСтрока.ПолучитьРодителя();
	ТекТип = ТипЗнч(ТекСтрока.ЛицевыеСчета);
	
	Если Копирование Тогда
		
		Если ТекРодитель = Неопределено Тогда
			НоваяСтрока = ТаблицаЛьгот.ПолучитьЭлементы().Добавить();
			НоваяСтрока.НомерСтроки = ПолучитьМаксимальныйНомерСтроки() + 1;
		Иначе
			НоваяСтрока = ТекРодитель.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		Если ТекТип = Тип("Строка") Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока, "ЛицевыеСчета, ЛьготнаяКатегория");
		КонецЕсли;
		Элемент.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьДанныеДочернихСтрок(НоваяСтрока, ТекСтрока.ПолучитьЭлементы());
		
		ПересчитатьИтогиСтрокиЛС(ТаблицаЛьгот.НайтиПоИдентификатору(ПолучитьИдентификаторКорневойСтроки(НоваяСтрока)));
		ПересчитатьОбщийИтогНачислено();
		
	Иначе
		
		Если ТекТип = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			ФормаВыбора = "Справочник.КВП_Услуги.ФормаВыбора";
		ИначеЕсли ТекТип = Тип("СправочникСсылка.КВП_Услуги")
			И ЗначениеЗаполнено(ТекСтрока.ЛицевыеСчета) Тогда
			
			СпособРасчета = ПолучитьСпособРасчетаУслуги(ТекСтрока.ЛицевыеСчета);
			Если СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам")
			 ИЛИ СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
				Возврат;
			КонецЕсли;
			ФормаВыбора = "Справочник.УПЖКХ_Жильцы.ФормаВыбора";
		ИначеЕсли ТекТип = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
			ВыбранныйПериод    = НачалоМесяца(Объект.Период);
			ДопПараметры       = Новый Структура("ТекСтрока, ВыбранныйПериод", ТекСтрока, ВыбранныйПериод);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьДобавлениеСтрокиЗавершение", ЭтотОбъект, ДопПараметры);
			ПоказатьВводЗначения(ОписаниеОповещения, ВыбранныйПериод, "Укажите дату для установки");
			Возврат;
		Иначе
			Возврат;
		КонецЕсли;
		
		// Добавим в дерево новую строку.
		Форма = ПолучитьФорму(ФормаВыбора, , Элементы.РасчетЛьгот);
		Форма.ВладелецФормы = ЭтаФорма;
		
		ДопПараметры = Новый Структура("ТекСтрока", ТекСтрока);
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию И ФормаВыбора = "Справочник.КВП_Услуги.ФормаВыбора" Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка",
																	УслугаДобровольногоСтрахования,
																	ВидСравненияКомпоновкиДанных.НеРавно, , Истина,
																	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		КонецЕсли;
		
		Форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьРезультатЗакрытияФормыВыбораЖильцаУслуги", ЭтаФорма, ДопПараметры);
		
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДобавлениеСтроки()

&НаКлиенте
// Обработчик результата выбора жильца или услуги, вызванного в процедуре "ВыполнитьДобавлениеСтроки()".
Процедура ОбработатьРезультатЗакрытияФормыВыбораЖильцаУслуги(Результат, ДопПараметры) Экспорт
	
	ТекСтрока = ДопПараметры.ТекСтрока;
	
	Если НЕ Результат = Неопределено Тогда
			
		Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Результат, "ЭтоГруппа") Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Результат) = Тип("СправочникСсылка.КВП_Услуги") Тогда
			
			НоваяВеткаУслуги              = ТекСтрока.ПолучитьЭлементы().Добавить();
			НоваяВеткаУслуги.ЛицевыеСчета = Результат;
			
			СпособРасчета = ПолучитьСпособРасчетаУслуги(Результат);
			
			Если СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам")
			 ИЛИ СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
				
				Для Каждого ТекУслуга Из Результат.СоставныеУслуги Цикл
					НоваяВетка              = НоваяВеткаУслуги.ПолучитьЭлементы().Добавить();
					НоваяВетка.ЛицевыеСчета = ТекУслуга.Услуга;
				КонецЦикла;
				
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(Результат) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
			НоваяВетка              = ТекСтрока.ПолучитьЭлементы().Добавить();
			НоваяВетка.ЛицевыеСчета = Результат;
			НоваяВетка              = НоваяВетка.ПолучитьЭлементы().Добавить();
			НоваяВетка.ЛицевыеСчета = Формат(НачалоМесяца(Объект.Период), "ДЛФ=Д") + " - "
			                        + Формат(КонецМесяца(Объект.Период), "ДЛФ=Д");
			НоваяВетка.НачалоПериода = НачалоМесяца(Объект.Период);
			НоваяВетка.КонецПериода  = КонецМесяца(Объект.Период);
		Иначе
			НоваяВетка              = ТекСтрока.ПолучитьЭлементы().Добавить();
			НоваяВетка.ЛицевыеСчета = Результат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатЗакрытияФормыВыбораЖильцаУслуги()

&НаКлиенте
// Обработчик выбора значения, вызванного в процедуре "ВыполнитьДобавлениеСтроки()".
Процедура ВыполнитьДобавлениеСтрокиЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	Если (Значение <> Неопределено) Тогда
		ТекСтрока = ДополнительныеПараметры.ТекСтрока;
		ВыбранныйПериод = ?(Значение = Неопределено, ДополнительныеПараметры.ВыбранныйПериод, Значение);
		
		Периоды = ВыполнитьРазбивкуНаПодпериоды(ТекСтрока.ПолучитьЭлементы(), ВыбранныйПериод);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДобавлениеСтрокиЗавершение()

&НаКлиенте
// Процедура выполняет пересчет данных строки дерева значений.
Процедура ПересчитатьДанныеСтроки(Элемент)
	
	ТекВетка = Элемент.ТекущиеДанные;
	
	ТекСкидка = ?(ТекВетка.РазмерСкидки = 0, 1, ТекВетка.РазмерСкидки);
	
	Если (ТекВетка.КоличествоЛьгота <> мСтруктураРедСтроки.Количество
	  ИЛИ ТекВетка.ТарифЛьгота      <> мСтруктураРедСтроки.Тариф
	  ИЛИ ТекВетка.ЛицевыеСчета     <> мСтруктураРедСтроки.ЛицевыеСчета)
	   И НЕ Элемент.ТекущийЭлемент.Имя = "РасчетЛьготНачислено" Тогда
		// Изменили значение количества или тарифа.
		ТекВетка.Начислено = ТекВетка.КоличествоЛьгота * ТекВетка.ТарифЛьгота * ТекСкидка;
		
		ПересчитатьИтогиСтрокиЛС(ТаблицаЛьгот.НайтиПоИдентификатору(ПолучитьИдентификаторКорневойСтроки(ТекВетка)));
		ПересчитатьОбщийИтогНачислено();
		
	КонецЕсли;
	
	Если ТекВетка.Начислено <> мСтруктураРедСтроки.Начислено
	   И Элемент.ТекущийЭлемент.Имя = "РасчетЛьготНачислено" Тогда
		// Изменили значение суммы начисления.
		ТекВетка.КоличествоЛьгота = ТекВетка.Начислено / ТекСкидка
		                                               / ?(ТекВетка.ТарифЛьгота = 0, 1,
		                                                   ТекВетка.ТарифЛьгота);
		
		ПересчитатьИтогиСтрокиЛС(ТаблицаЛьгот.НайтиПоИдентификатору(ПолучитьИдентификаторКорневойСтроки(ТекВетка)));
		ПересчитатьОбщийИтогНачислено();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура пересчитывает итоги всех строк дерева значений.
Процедура ПересчитатьИтогиВсехСтрок()
	
	Для Каждого СтрокаЛС Из ТаблицаЛьгот.ПолучитьЭлементы() Цикл
		
		ПересчитатьИтогиСтрокиЛС(СтрокаЛС);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура пересчитывает итоговые данные строки лицевого счета.
Процедура ПересчитатьИтогиСтрокиЛС(СтрокаЛС)
	
	ВсегоНачисленоПоЛС  = 0;
	ВсегоЛьготПоЛС      = 0;
	ВсегоКоличествоПоЛС = 0;
	ВсегоКоличествоЛьготПоЛС = 0;
	
	// Услуги.
	Для Каждого СтрокаУслуги Из СтрокаЛС.ПолучитьЭлементы() Цикл
		
		ВсегоНачисленоПоУслуге  = 0;
		ВсегоЛьготПоУслуге      = 0;
		ВсегоКоличествоПоУслуге = 0;
		ВсегоКоличествоЛьготПоУслуге = 0;
		
		Если ЗначениеЗаполнено(СтрокаУслуги.ЛицевыеСчета) Тогда
			СпособРасчета = ПолучитьСпособРасчетаУслуги(СтрокаУслуги.ЛицевыеСчета);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаУслуги.ЛицевыеСчета)
			И (СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам")
			ИЛИ СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме")) Тогда
			
			Для Каждого СтрокаСостУслуги Из СтрокаУслуги.ПолучитьЭлементы() Цикл
				
				ВсегоНачисленоПоСостУслуге  = 0;
				ВсегоЛьготПоСостУслуге      = 0;
				ВсегоКоличествоПоСостУслуге = 0;
				ВсегоКоличествоЛьготПоСостУслуге = 0;
				
				врМассивЛьготПоПериодам = Новый Массив;
				
				врНомерСтроки = 0;
				
				Для Каждого СтрокаЛьготника Из СтрокаСостУслуги.ПолучитьЭлементы() Цикл
					
					ВсегоНачисленоПоЛьготнику  = 0;
					ВсегоЛьготПоЛьготнику      = 0;
					ВсегоКоличествоПоЛьготнику = 0;
					ВсегоКоличествоЛьготПоЛьготнику = 0;
					
					Для Каждого СтрокаПериода Из СтрокаЛьготника.ПолучитьЭлементы() Цикл
						
						ВсегоНачисленоПоЛьготнику  = ВсегоНачисленоПоЛьготнику  + СтрокаПериода.СуммаУслуги;
						ВсегоЛьготПоЛьготнику      = ВсегоЛьготПоЛьготнику      + СтрокаПериода.Начислено;
						ВсегоКоличествоПоЛьготнику = ВсегоКоличествоПоЛьготнику + СтрокаПериода.Количество;
						ВсегоКоличествоЛьготПоЛьготнику = ВсегоКоличествоЛьготПоЛьготнику + СтрокаПериода.КоличествоЛьгота;
						
						СтруктураЛьготПоПериодам = Новый Структура("Льготник, ЛьготнаяКатегория, НомерСтроки, НачалоПериода, КонецПериода, СуммаУслуги, Количество");
						ЗаполнитьЗначенияСвойств(СтруктураЛьготПоПериодам, СтрокаПериода);
						СтруктураЛьготПоПериодам.Льготник          = СтрокаЛьготника.ЛицевыеСчета;
						СтруктураЛьготПоПериодам.ЛьготнаяКатегория = СтрокаЛьготника.ЛьготнаяКатегория;
						СтруктураЛьготПоПериодам.НомерСтроки       = врНомерСтроки;
						врМассивЛьготПоПериодам.Добавить(СтруктураЛьготПоПериодам);
						
						врНомерСтроки = врНомерСтроки + 1;
						
					КонецЦикла;
					
					СтрокаЛьготника.СуммаУслуги = ВсегоНачисленоПоЛьготнику;
					СтрокаЛьготника.Начислено   = ВсегоЛьготПоЛьготнику;
					СтрокаЛьготника.Количество  = ВсегоКоличествоПоЛьготнику;
					СтрокаЛьготника.КоличествоЛьгота = ВсегоКоличествоЛьготПоЛьготнику;
					ВсегоНачисленоПоСостУслуге  = ВсегоНачисленоПоСостУслуге  + СтрокаЛьготника.СуммаУслуги;
					ВсегоЛьготПоСостУслуге      = ВсегоЛьготПоСостУслуге      + СтрокаЛьготника.Начислено;
					ВсегоКоличествоПоСостУслуге = ВсегоКоличествоПоСостУслуге + СтрокаЛьготника.Количество;
					ВсегоКоличествоЛьготПоСостУслуге = ВсегоКоличествоЛьготПоСостУслуге + СтрокаЛьготника.КоличествоЛьгота;
					
				КонецЦикла;
				
				врМассивДублей = Новый Массив;
				врМассивДублей = ПолучитьТаблицуДублейПериодов(врМассивЛьготПоПериодам);
				
				// Для каждой строки массива дублей ищем количество строк с таким же периодом в массиве льгот по периодам.
				Для Каждого СтрокаМассиваДублей Из врМассивДублей Цикл
					
					КоличествоСтрокДублей = 0;
					Для Каждого СтрокаМассиваЛьготПоПериодам Из врМассивЛьготПоПериодам Цикл
						
						// Строка относится к дублю, если ее период, количество и сумма начисления совпадают
						// с данными дубля, так как за один период могут быть произведены начисления по разным видам тарифов.
						Если СтрокаМассиваЛьготПоПериодам.НачалоПериода = СтрокаМассиваДублей.НачалоПериода
						   И СтрокаМассиваЛьготПоПериодам.КонецПериода  = СтрокаМассиваДублей.КонецПериода
						   И СтрокаМассиваЛьготПоПериодам.Количество    = СтрокаМассиваДублей.Количество
						   И СтрокаМассиваЛьготПоПериодам.СуммаУслуги   = СтрокаМассиваДублей.СуммаУслуги Тогда
							
							КоличествоСтрокДублей = КоличествоСтрокДублей + 1;
							СтрокаСуммаУслуги = СтрокаМассиваЛьготПоПериодам.СуммаУслуги;
							СтрокаКоличество  = СтрокаМассиваЛьготПоПериодам.Количество;
							
						КонецЕсли;
						
					КонецЦикла;
					
					// Если количество строк во временном массиве льгот по периодам с данным периодом больше 1,
					// то уменьшаем значения переменных "ВсегоНачисленоПоУслуге" и "ВсегоКоличествоПоУслуге"
					// на необходимое рассчитываемое значение в зависимости от количества дублей.
					Если КоличествоСтрокДублей > 1 Тогда
						ВсегоНачисленоПоСостУслуге  = ВсегоНачисленоПоСостУслуге  - СтрокаСуммаУслуги * (КоличествоСтрокДублей - 1);
						ВсегоКоличествоПоСостУслуге = ВсегоКоличествоПоСостУслуге - СтрокаКоличество  * (КоличествоСтрокДублей - 1);
					КонецЕсли;
					
				КонецЦикла;
				
				// !!!
				//СтрокаСостУслуги.СуммаУслуги = ВсегоНачисленоПоСостУслуге / СтрокаСостУслуги.ПолучитьЭлементы().Количество();
				//СтрокаСостУслуги.Начислено   = ВсегоЛьготПоСостУслуге;
				//СтрокаСостУслуги.Количество  = ВсегоКоличествоПоСостУслуге / СтрокаСостУслуги.ПолучитьЭлементы().Количество();
				СтрокаСостУслуги.СуммаУслуги = ВсегоНачисленоПоСостУслуге;
				СтрокаСостУслуги.Начислено   = ВсегоЛьготПоСостУслуге;
				СтрокаСостУслуги.Количество  = ВсегоКоличествоПоСостУслуге;
				
				СтрокаСостУслуги.КоличествоЛьгота = ВсегоКоличествоЛьготПоСостУслуге;
				ВсегоНачисленоПоУслуге  = ВсегоНачисленоПоУслуге  + СтрокаСостУслуги.СуммаУслуги;
				ВсегоЛьготПоУслуге      = ВсегоЛьготПоУслуге      + СтрокаСостУслуги.Начислено;
				ВсегоКоличествоПоУслуге = ВсегоКоличествоПоУслуге + СтрокаСостУслуги.Количество;
				ВсегоКоличествоЛьготПоУслуге = ВсегоКоличествоЛьготПоУслуге + СтрокаСостУслуги.КоличествоЛьгота;
				
			КонецЦикла;
			
		Иначе
			
			врМассивЛьготПоПериодам = Новый Массив;
			
			врНомерСтроки = 0;
			
			// Льготники.
			Для Каждого СтрокаЛьготника Из СтрокаУслуги.ПолучитьЭлементы() Цикл
				
				ВсегоНачисленоПоСостУслуге  = 0;
				ВсегоЛьготПоСостУслуге      = 0;
				ВсегоКоличествоПоСостУслуге = 0;
				ВсегоКоличествоЛьготПоСостУслуге = 0;
				
				// Периоды льготников.
				Для Каждого СтрокаПериода Из СтрокаЛьготника.ПолучитьЭлементы() Цикл
					
					ВсегоНачисленоПоСостУслуге  = ВсегоНачисленоПоСостУслуге  + СтрокаПериода.СуммаУслуги;
					ВсегоЛьготПоСостУслуге      = ВсегоЛьготПоСостУслуге      + СтрокаПериода.Начислено;
					ВсегоКоличествоПоСостУслуге = ВсегоКоличествоПоСостУслуге + СтрокаПериода.Количество;
					ВсегоКоличествоЛьготПоСостУслуге = ВсегоКоличествоЛьготПоСостУслуге + СтрокаПериода.КоличествоЛьгота;
					
					СтруктураЛьготПоПериодам = Новый Структура("Льготник, ЛьготнаяКатегория, НомерСтроки, НачалоПериода, КонецПериода, СуммаУслуги, Количество");
					ЗаполнитьЗначенияСвойств(СтруктураЛьготПоПериодам, СтрокаПериода);
					СтруктураЛьготПоПериодам.Льготник          = СтрокаЛьготника.ЛицевыеСчета;
					СтруктураЛьготПоПериодам.ЛьготнаяКатегория = СтрокаЛьготника.ЛьготнаяКатегория;
					СтруктураЛьготПоПериодам.НомерСтроки       = врНомерСтроки;
					врМассивЛьготПоПериодам.Добавить(СтруктураЛьготПоПериодам);
					
					врНомерСтроки = врНомерСтроки + 1;
					
				КонецЦикла;
				
				СтрокаЛьготника.СуммаУслуги = ВсегоНачисленоПоСостУслуге;
				СтрокаЛьготника.Начислено   = ВсегоЛьготПоСостУслуге;
				СтрокаЛьготника.Количество  = ВсегоКоличествоПоСостУслуге;
				СтрокаЛьготника.КоличествоЛьгота = ВсегоКоличествоЛьготПоСостУслуге;
				ВсегоНачисленоПоУслуге  = ВсегоНачисленоПоУслуге  + СтрокаЛьготника.СуммаУслуги;
				ВсегоЛьготПоУслуге      = ВсегоЛьготПоУслуге      + СтрокаЛьготника.Начислено;
				ВсегоКоличествоПоУслуге = ВсегоКоличествоПоУслуге + СтрокаЛьготника.Количество;
				ВсегоКоличествоЛьготПоУслуге = ВсегоКоличествоЛьготПоУслуге + СтрокаЛьготника.КоличествоЛьгота;
				
			КонецЦикла;
			
			врМассивДублей = Новый Массив;
			врМассивДублей = ПолучитьТаблицуДублейПериодов(врМассивЛьготПоПериодам);
			
			// Для каждой строки массива дублей ищем количество строк с таким же периодом в массиве льгот по периодам.
			Для Каждого СтрокаМассиваДублей Из врМассивДублей Цикл
				
				КоличествоСтрокДублей = 0;
				Для Каждого СтрокаМассиваЛьготПоПериодам Из врМассивЛьготПоПериодам Цикл
					
					// Строка относится к дублю, если ее период, количество и сумма начисления совпадают
					// с данными дубля, так как за один период могут быть произведены начисления по разным видам тарифов.
					Если СтрокаМассиваЛьготПоПериодам.НачалоПериода = СтрокаМассиваДублей.НачалоПериода
					   И СтрокаМассиваЛьготПоПериодам.КонецПериода  = СтрокаМассиваДублей.КонецПериода
					   И СтрокаМассиваЛьготПоПериодам.Количество    = СтрокаМассиваДублей.Количество
					   И СтрокаМассиваЛьготПоПериодам.СуммаУслуги   = СтрокаМассиваДублей.СуммаУслуги Тогда
						
						КоличествоСтрокДублей = КоличествоСтрокДублей + 1;
						СтрокаСуммаУслуги = СтрокаМассиваЛьготПоПериодам.СуммаУслуги;
						СтрокаКоличество  = СтрокаМассиваЛьготПоПериодам.Количество;
						
					КонецЕсли;
					
				КонецЦикла;
				
				// Если количество строк во временном массиве льгот по периодам с данным периодом больше 1,
				// то уменьшаем значения переменных "ВсегоНачисленоПоУслуге" и "ВсегоКоличествоПоУслуге"
				// на необходимое рассчитываемое значение в зависимости от количества дублей.
				Если КоличествоСтрокДублей > 1 Тогда
					ВсегоНачисленоПоУслуге  = ВсегоНачисленоПоУслуге  - СтрокаСуммаУслуги * (КоличествоСтрокДублей - 1);
					ВсегоКоличествоПоУслуге = ВсегоКоличествоПоУслуге - СтрокаКоличество  * (КоличествоСтрокДублей - 1);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// !!!
		//Если ЗначениеЗаполнено(СтрокаУслуги.ЛицевыеСчета)
		//   И (СтрокаУслуги.ЛицевыеСчета.СпособРасчета = Перечисления.КВП_СпособыРасчета.СОграничениемПоНормам
		// ИЛИ СтрокаУслуги.ЛицевыеСчета.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме) Тогда
		//	СтрокаУслуги.СуммаУслуги = ВсегоНачисленоПоУслуге;
		//	СтрокаУслуги.Количество  = ВсегоКоличествоПоУслуге;
		//Иначе
		//	СтрокаУслуги.СуммаУслуги = ВсегоНачисленоПоУслуге / СтрокаУслуги.ПолучитьЭлементы().Количество();
		//	СтрокаУслуги.Количество  = ВсегоКоличествоПоУслуге / СтрокаУслуги.ПолучитьЭлементы().Количество();
		//КонецЕсли;
		СтрокаУслуги.СуммаУслуги = ВсегоНачисленоПоУслуге;
		СтрокаУслуги.Количество  = ВсегоКоличествоПоУслуге;
		
		СтрокаУслуги.Начислено   = ВсегоЛьготПоУслуге;
		СтрокаУслуги.КоличествоЛьгота = ВсегоКоличествоЛьготПоУслуге;
		ВсегоНачисленоПоЛС  = ВсегоНачисленоПоЛС  + СтрокаУслуги.СуммаУслуги;
		ВсегоЛьготПоЛС      = ВсегоЛьготПоЛС      + СтрокаУслуги.Начислено;
		ВсегоКоличествоПоЛС = ВсегоКоличествоПоЛС + СтрокаУслуги.Количество;
		ВсегоКоличествоЛьготПоЛС = ВсегоКоличествоЛьготПоЛС + СтрокаУслуги.КоличествоЛьгота;
		
	КонецЦикла;
	
	СтрокаЛС.СуммаУслуги = ВсегоНачисленоПоЛС;
	СтрокаЛС.Начислено   = ВсегоЛьготПоЛС;
	СтрокаЛС.Количество  = ВсегоКоличествоПоЛС;
	СтрокаЛС.КоличествоЛьгота = ВсегоКоличествоЛьготПоЛС;
	
КонецПроцедуры //ПересчитатьИтогиСтрокиЛС()

&НаКлиенте
// Пересчитывает сумму начисления всего по документу.
Процедура ПересчитатьОбщийИтогНачислено()
	
	НачисленоОбщийИтог = 0;
	
	Для Каждого СтрокаЛС Из ТаблицаЛьгот.ПолучитьЭлементы() Цикл
		
		НачисленоОбщийИтог = НачисленоОбщийИтог + СтрокаЛС.Начислено;
		
	КонецЦикла;
	
КонецПроцедуры //ПересчитатьОбщийИтогНачислено()

&НаКлиенте
// Функция возвращает идентификатор корневой строки для текущей строки.
Функция ПолучитьИдентификаторКорневойСтроки(ТекущаяСтрока)
	
	СтрокаРодитель = ТекущаяСтрока;
	
	Пока НЕ СтрокаРодитель.ПолучитьРодителя() = Неопределено Цикл
		СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат СтрокаРодитель.ПолучитьИдентификатор();
	
КонецФункции

&НаКлиенте
// Процедура заполняет структуру мСтруктураРедСтроки данными текущей строки дерева значений.
Процедура ЗаполнитьСтруктуруСтроки(Элемент)
	
	мСтруктураРедСтроки = Новый Структура;
	мСтруктураРедСтроки.Вставить("Количество",   Элемент.ТекущиеДанные.КоличествоЛьгота);
	мСтруктураРедСтроки.Вставить("Тариф",        Элемент.ТекущиеДанные.ТарифЛьгота);
	мСтруктураРедСтроки.Вставить("Начислено",    Элемент.ТекущиеДанные.Начислено);
	мСтруктураРедСтроки.Вставить("ЛицевыеСчета", Элемент.ТекущиеДанные.ЛицевыеСчета);
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает точность для колонки "Количество" таблицы "Услуги"
// в соответствии с выбранной пользователем точностью в настройках программы.
Процедура УстановитьТочностьОбъемовНачислений()
	
	СтрокаФормата = "ЧДЦ=" + Строка(Константы.УПЖКХ_ТочностьОбъемаНачислений.Получить()) + "";
	
	Элементы.РасчетЛьготКоличество.Формат                     = СтрокаФормата;
	Элементы.РасчетЛьготКоличествоЛьгота.Формат               = СтрокаФормата;
	
	Элементы.РасчетЛьготКоличество.ФорматРедактирования       = СтрокаФормата;
	Элементы.РасчетЛьготКоличествоЛьгота.ФорматРедактирования = СтрокаФормата;
	
КонецПроцедуры

&НаСервере
// Процедура выводит расшифровку расчета льгот в табличный документ.
//
Процедура ВывестиРасшифровку(ИдентификаторТекСтроки)
	
	РасшифровкаРасчетаЛьготПоЛС.Очистить();
	
	Макет = Документы.КВП_РасчетЛьгот.ПолучитьМакет("РасшифровкаРасчетаЛьгот");
	
	ОбластьЛС = Макет.ПолучитьОбласть("ОбластьЛС");
	
	// Если в табличной части "Расчет льгот" нет активной строки или таблица с расшифровками
	// расчета льгот пустая, то сообщим о том, что расшифровка расчета льгот не сформирована.
	Если ИдентификаторТекСтроки = Неопределено ИЛИ ТаблицаРасшифровкиРасчетаЛьгот.Количество() = 0 Тогда
		
		ОбластьЛС.Параметры.ЛицевойСчет = "Расшифровка расчета льгот не сформирована.";
		РасшифровкаРасчетаЛьготПоЛС.Вывести(ОбластьЛС);
		
		Возврат;
		
	КонецЕсли;
	
	// Находим текущую активную строку в таблице льгот по идентификатору.
	ТекСтрока = ТаблицаЛьгот.НайтиПоИдентификатору(ИдентификаторТекСтроки);
	
	// Запоминаем строку таблицы льгот с лицевым счетом.
	СтрокаЛС = ТекСтрока;
	
	// При активной строке с услугой расшифровка расчета будет выводиться для связки
	// "лицевой счет - услуга", поэтому получаем услугу, а также строку с лицевым счетом.
	Если ТипЗнч(ТекСтрока.ЛицевыеСчета) = Тип("СправочникСсылка.КВП_Услуги") Тогда
		
		СтрокаЛС = ТекСтрока.ПолучитьРодителя();
		ТекущаяУслуга = ТекСтрока.ЛицевыеСчета;
		
	// При активной строке со льготником или периодом расшифровка расчета будет выводиться для связки
	// "лицевой счет - услуга", поэтому просматриваем ветки верхнего уровня, пока не получим услугу, а
	// затем поднимаемся еще на один уровень выше и получаем строку с лицевым счетом.
	ИначеЕсли Не ТипЗнч(ТекСтрока.ЛицевыеСчета) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		
		РодительТекущейВетки = ТекСтрока.ПолучитьРодителя();
		
		Пока Не ТипЗнч(РодительТекущейВетки.ЛицевыеСчета) = Тип("СправочникСсылка.КВП_Услуги") Цикл
			РодительТекущейВетки = РодительТекущейВетки.ПолучитьРодителя();
		КонецЦикла;
		
		СтрокаЛС = РодительТекущейВетки.ПолучитьРодителя();
		ТекущаяУслуга = РодительТекущейВетки.ЛицевыеСчета;
		
	КонецЕсли;
	
	ОбластьРазделитель     = Макет.ПолучитьОбласть("ОбластьРазделитель");
	ОбластьУслуга          = Макет.ПолучитьОбласть("ОбластьУслуга");
	ОбластьОписаниеРасчета = Макет.ПолучитьОбласть("ОбластьОписаниеРасчета");
	
	РасшифровкаРасчетаЛьготПоЛС.НачатьАвтогруппировкуСтрок();
	
	Отбор = Новый Структура();
	Отбор.Вставить("ЛицевойСчет", СтрокаЛС.ЛицевыеСчета);
	
	Если ТекущаяУслуга = Неопределено Тогда
		
		// В данный момент активна строка с лицевым счетом, в расшифровке будут выводиться все услуги по лицевому счету.
		ОбластьЛС.Параметры.ЛицевойСчет = "Расчет льгот по " + СтрокаЛС.ЛицевыеСчета + ": начислено - " + Формат(СтрокаЛС.СуммаУслуги, "ЧДЦ=2; ЧН=0,00")
																					 + ", льгота - " + Формат(СтрокаЛС.Начислено, "ЧДЦ=2; ЧН=0,00");
		
	Иначе
		
		// В данный момент активна строка либо с услугой, либо со льготником, либо с периодом.
		// В расшифровке будет выводиться текущая услуга для лицевого счета.
		Отбор.Вставить("Услуга", ТекущаяУслуга);
		ОбластьЛС.Параметры.ЛицевойСчет = "Расчет льгот по " + СтрокаЛС.ЛицевыеСчета;
		
	КонецЕсли;
	
	РасшифровкаРасчетаЛьготПоЛС.Вывести(ОбластьЛС, 1);
	РасшифровкаРасчетаЛьготПоЛС.Вывести(ОбластьРазделитель, 1);
	
	// Найдем в таблице расшифровки расчета льгот строки по лицевому счету или по связке лицевой счет - услуга.
	СтрокиСРасшифровкамиПоЛС = ТаблицаРасшифровкиРасчетаЛьгот.НайтиСтроки(Отбор);
	
	Если СтрокиСРасшифровкамиПоЛС.Количество() > 0 Тогда
		
		// Получим дочерние элементы для ветки с лицевым счетом. Они нужны для того, чтобы
		// в расшифровке в заголовках услуг вывести данные по сумме начислений и сумме льготы.
		СтрокиДереваСУслугамиДляЛС = СтрокаЛС.ПолучитьЭлементы();
		
		// Если активна строка с лицевым счетом и расчет льгот производился только по одной услуге
		// или активна строка с услугой, льготником, периодом, то группировка по услуге будет развернута.
		Если СтрокиСРасшифровкамиПоЛС.Количество() = 1 ИЛИ СтрокиДереваСУслугамиДляЛС.Количество() = 1 Тогда
			РазвернутьГруппу = Истина;
		Иначе
			РазвернутьГруппу = Ложь;
		КонецЕсли;
		
		// Выведем расшифровку расчета льготы по услугам для лицевого счета.
		Для Каждого Строка Из СтрокиСРасшифровкамиПоЛС Цикл
			
			// Если в расшифровке расчета по услуге нет строки "Сумма льготы", значит расчет льготы не производился.
			// Поэтому данную услугу в расшифровку расчета выводить не будем.
			Если Не Найти(Строка.ОписаниеРасчета, "Сумма льготы") = 0 Тогда
				
				СуммаУслуги = 0;
				СуммаЛьготы = 0;
				
				// Среди строк дерева с услугами по л/с находим нужную услугу.
				Для Каждого ТекУслуга Из СтрокиДереваСУслугамиДляЛС Цикл
					Если ТекУслуга.ЛицевыеСчета = Строка.Услуга Тогда
						СуммаУслуги = ТекУслуга.СуммаУслуги;
						СуммаЛьготы = ТекУслуга.Начислено;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ОбластьУслуга.Параметры.Услуга = "" + Строка.Услуга + ": начислено - " + Формат(СуммаУслуги, "ЧДЦ=2; ЧН=0,00")
																	+ ", льгота - " + Формат(СуммаЛьготы, "ЧДЦ=2; ЧН=0,00");
				
				РасшифровкаРасчетаЛьготПоЛС.Вывести(ОбластьУслуга, 1);
				РасшифровкаРасчетаЛьготПоЛС.Вывести(ОбластьРазделитель, 2, , РазвернутьГруппу);
				
				МассивСтрокРасшифровки = СтрРазделить(Строка.ОписаниеРасчета, Символы.ПС, Истина);
				Для Каждого ТекущаяСтрока Из МассивСтрокРасшифровки Цикл
					
					ОбластьОписаниеРасчета.Параметры.ОписаниеРасчета = ТекущаяСтрока;
					РасшифровкаРасчетаЛьготПоЛС.Вывести(ОбластьОписаниеРасчета, 2, , РазвернутьГруппу);
					
				КонецЦикла;
				
				РасшифровкаРасчетаЛьготПоЛС.Вывести(ОбластьРазделитель, 2, , РазвернутьГруппу);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РасшифровкаРасчетаЛьготПоЛС.ЗакончитьАвтогруппировкуСтрок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
			
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	КонецЕсли;
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	ЗаполнитьДеревоЛьготПоТабличнойЧасти(Истина);
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	УстановитьТочностьОбъемовНачислений();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Период = Объект.Дата;
	КонецЕсли;
	МесяцСтрока = Формат(Объект.Период, "ДФ='MMMM yyyy'");
	мПериодДокумента = Объект.Период;
	мОрганизация     = Объект.Организация;
	ПересчитатьИтогиВсехСтрок();
	ПересчитатьОбщийИтогНачислено();
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаполнитьТабличнуюЧастьПоДеревуЛьгот();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик команды "Заполнить".
Процедура Заполнить(Команда)
	
	Если ТаблицаЛьгот.ПолучитьЭлементы().Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьФрагмент();
	
КонецПроцедуры // Заполнить()

&НаКлиенте
// Обработчик результат вопроса, вызванного в процедуре-обработчике команды "Заполнить()".
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЛьгот.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьФрагмент();
	
КонецПроцедуры // ЗаполнитьЗавершение()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "Заполнить()".
Процедура ЗаполнитьФрагмент()
	
	ЗаполнитьТабличнуюЧасть();
	ПересчитатьИтогиВсехСтрок();
	ПересчитатьОбщийИтогНачислено();
	
КонецПроцедуры // ЗаполнитьФрагмент()

&НаКлиенте
// Процедура - обработчик команды "Развернуть".
Процедура Развернуть(Команда)
	
	Для Каждого ТекущаяВетка Из ТаблицаЛьгот.ПолучитьЭлементы() Цикл
		Элементы.РасчетЛьгот.Развернуть(ТекущаяВетка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "Свернуть".
Процедура Свернуть(Команда)
	
	Для Каждого ТекущаяВетка Из ТаблицаЛьгот.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяСтрока Из ТекущаяВетка.ПолучитьЭлементы() Цикл
			Для Каждого ТекСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				Элементы.РасчетЛьгот.Свернуть(ТекСтрока.ПолучитьИдентификатор());
			КонецЦикла;
			Элементы.РасчетЛьгот.Свернуть(ТекущаяСтрока.ПолучитьИдентификатор());
		КонецЦикла;
		Элементы.РасчетЛьгот.Свернуть(ТекущаяВетка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "ДобавитьУзел".
Процедура ДобавитьУзел(Команда)
	
	// !Возможность добавления новых строк в ТЧ "ТаблицаЛьгот" ИСКЛЮЧЕНА по следующим причинам:
	// 1. Сложное редактирование для пользователей, т.к. необходимо добавлять строки в многоуровневое дерево.
	//    Большой риск того, что при заполнении что-то будет упущено.
	// 2. При добавлении новой ветки с лицевым счетом могут заполняться не все вспомогательные поля.
	
	//ТекСтрока = Элементы.РасчетЛьгот.ТекущиеДанные;
	//
	//// Получим максимальный номер строки.
	//НомСтрокиДерева = ПолучитьМаксимальныйНомерСтроки();
	//
	//// Добавим в дерево новую строку.
	//Форма = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора", , Элементы.РасчетЛьгот);
	//
	//Форма.ВладелецФормы = ЭтаФорма;
	//
	//ДопПараметры = Новый Структура("НомСтрокиДерева", НомСтрокиДерева);
	//Форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораЛС", ЭтаФорма, ДопПараметры);
	//
	//Форма.Открыть();
	
КонецПроцедуры // ДобавитьУзел()

&НаКлиенте
// Обработчик результата выбора жильца или услуги, вызванного в процедуре "ДобавитьУзел()".
Процедура ОбработатьРезультатВыбораЛС(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		НоваяВетка              = ТаблицаЛьгот.ПолучитьЭлементы().Добавить();
		НоваяВетка.НомерСтроки  = ДопПараметры.НомСтрокиДерева + 1;
		НоваяВетка.ЛицевыеСчета = Результат;
		Элементы.РасчетЛьгот.ТекущаяСтрока = НоваяВетка.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораЛС()

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

&НаКлиенте
// Процедура - обработчик команды "Расшифровка расчета льгот".
Процедура ПоказатьРасшифровкуРасчетаЛьгот(Команда)
	
	Если Элементы.РасшифровкаРасчетаЛьготПоЛС.Видимость Тогда
		
		Элементы.РасчетЛьготПоказатьРасшифровкуРасчетаЛьгот.Пометка = Ложь;
		
		Элементы.РасшифровкаРасчетаЛьготПоЛС.Видимость = Ложь;
		
	Иначе
		
		Элементы.РасчетЛьготПоказатьРасшифровкуРасчетаЛьгот.Пометка = Истина;
		
		Элементы.РасшифровкаРасчетаЛьготПоЛС.Видимость = Истина;
		
		// Проинформируем пользователя о том, что расшифровка расчета льгот не сформирована.
		Если ТаблицаРасшифровкиРасчетаЛьгот.Количество() = 0 Тогда
			ПоказатьПредупреждение( , "Для получения расшифровки расчета льгот необходимо перезаполнить документ с помощью команды ""Заполнить и рассчитать"".
									  |Внимание, при перезаполнении табличная часть документа будет очищена!");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "Открыть настройки льгот по организации".
Процедура ОткрытьНастройкиЛьготПоОрганизации(Команда)
	
	КлючНастроекУП = УПЖКХ_ПараметрыУчетаСервер.ПолучитьКлючЗаписиУчетнойПолитикиЖКХПоОрганизацииНаДату(Объект.Дата, Объект.Организация);
	
	Если Не КлючНастроекУП = Неопределено Тогда
		// При открытии формы записи УП передадим в нее ключ записи и имя начальной страницы.
		ОткрытьФорму("РегистрСведений.КВП_УчетнаяПолитикаТСЖ.ФормаЗаписи", Новый Структура("Ключ, ИмяНачальнойСтраницы", КлючНастроекУП, "ГруппаЛьготы"));
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось получить Учетную политику (ЖКХ) по указанным организации и дате документа!");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработкаИзмененияПериодаОрганизации("Организация");
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличной части "РасчетЛьгот".
Процедура РасчетЛьготПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// !Возможность добавления новых строк в ТЧ "ТаблицаЛьгот" ИСКЛЮЧЕНА по следующим причинам:
	// 1. Сложное редактирование для пользователей, т.к. необходимо добавлять строки в многоуровневое дерево.
	//    Большой риск того, что при заполнении что-то будет упущено.
	// 2. При добавлении новой ветки с лицевым счетом могут заполняться не все вспомогательные поля.
	
	//ВыполнитьДобавлениеСтроки(Элемент, Копирование, Отказ);
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части "РасчетЛьгот".
Процедура РасчетЛьготПриАктивизацииСтроки(Элемент)
	
	ВыполнитьДействияПриАктивацииСтроки(Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" табличной части "РасчетЛьгот".
Процедура РасчетЛьготПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" табличной части "РасчетЛьгот".
Процедура РасчетЛьготПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьДанныеСтроки(Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "РасчетЛьгот".
Процедура РасчетЛьготПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьСтруктуруСтроки(Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличной части "РасчетЛьгот".
Процедура РасчетЛьготПередУдалением(Элемент, Отказ)
	
	мИдентификаторКорняУдаляемойСтроки = ПолучитьИдентификаторКорневойСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "РасчетЛьгот".
Процедура РасчетЛьготПослеУдаления(Элемент)
	
	КорневаяСтрока = ТаблицаЛьгот.НайтиПоИдентификатору(мИдентификаторКорняУдаляемойСтроки);
	Если НЕ КорневаяСтрока = Неопределено Тогда
		ПересчитатьИтогиСтрокиЛС(КорневаяСтрока);
	КонецЕсли;
	ПересчитатьОбщийИтогНачислено();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" колонки "ЛицевыеСчета" табличной части "РасчетЛьгот".
Процедура РасчетЛьготЛицевыеСчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", , Элемент);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка",
																УслугаДобровольногоСтрахования,
																ВидСравненияКомпоновкиДанных.НеРавно, , Истина,
																РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
																
		Форма.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" колонки "ЛицевыеСчета" табличной части "РасчетЛьгот".
Процедура РасчетЛьготЛицевыеСчетаПриИзменении(Элемент)
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
	
		ТекущиеДанные = Элементы.РасчетЛьгот.ТекущиеДанные;
	
		Если ТекущиеДанные.ЛицевыеСчета = УслугаДобровольногоСтрахования Тогда
			ТекущиеДанные.ЛицевыеСчета = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("По услуге добровольного страхования нельзя начислять льготы.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МесяцСтрокой

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" реквизита "Период".
Процедура ПериодПриИзменении(Элемент)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииПриИзменении(ЭтаФорма, "Объект.Период", "МесяцСтрока", Элемент);
	
	ОбработкаИзмененияПериодаОрганизации();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик изменения полей "Период" и "Организация".
//
// Параметры:
//  ИзменяемыйРеквизит	 - Строка - содержит наименование изменяемого поля
//                                  "Период" или "Организация".
//
Процедура ОбработкаИзмененияПериодаОрганизации(ИзменяемыйРеквизит = "Период")
	
	ЕстьДанныеВТаблицеЛьгот = ТаблицаЛьгот.ПолучитьЭлементы().Количество() > 0;
	ДополнительныеПараметры = Новый Структура("Событие");
	
	Если ИзменяемыйРеквизит = "Период" Тогда
		
		Если Не НачалоМесяца(мПериодДокумента) = НачалоМесяца(Объект.Период) И ЕстьДанныеВТаблицеЛьгот Тогда
			ДополнительныеПараметры.Событие = "ИзменениеПериода";
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаИзмененияПериодаЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			"При изменении периода расчета табличная часть документа будет очищена. Продолжить?",
			РежимДиалогаВопрос.ДаНет, ,
			КодВозвратаДиалога.Нет);
		Иначе
			мПериодДокумента = Объект.Период;
		КонецЕсли;
		
	ИначеЕсли ИзменяемыйРеквизит = "Организация" Тогда
		
		Если Не Объект.Организация = мОрганизация И
			ЕстьДанныеВТаблицеЛьгот Тогда
			ДополнительныеПараметры.Событие = "ИзменениеОрганизации";
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаИзмененияПериодаЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			"При изменении организации табличная часть документа будет очищена. Продолжить?",
			РежимДиалогаВопрос.ДаНет, ,
			КодВозвратаДиалога.Нет);
		Иначе
			мОрганизация = Объект.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработки завершения вопроса об очистке таблицы льгот.
Процедура ОбработкаИзмененияПериодаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// Очистка табличной части.
		ТаблицаЛьгот.ПолучитьЭлементы().Очистить();
		Если ДополнительныеПараметры.Событие = "ИзменениеПериода" Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "МесяцСтрока");
			мПериодДокумента = Объект.Период;
		ИначеЕсли ДополнительныеПараметры.Событие = "ИзменениеОрганизации" Тогда
			мОрганизация = Объект.Организация;
		КонецЕсли;
		
	Иначе
		
		Если ДополнительныеПараметры.Событие = "ИзменениеПериода" Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "мПериодДокумента", "МесяцСтрока");
			Объект.Период = мПериодДокумента;
		ИначеЕсли ДополнительныеПараметры.Событие = "ИзменениеОрганизации" Тогда
			Объект.Организация = мОрганизация;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбораИзСписка" реквизита "Период".
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "МесяцСтрока", ,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение обработчика "МесяцСтрокаНачНачалоВыбора()"
Процедура ПериодНачалоВыбораЗавершение (СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	ОбработкаИзмененияПериодаОрганизации();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Регулирование" реквизита "Период".
Процедура ПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииРегулирование(ЭтаФорма, "Объект.Период", "МесяцСтрока",
														Элемент, Направление, СтандартнаяОбработка);
	ОбработкаИзмененияПериодаОрганизации();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" реквизита "Период".
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииАвтоПодборТекста(ЭтаФорма, "Объект.Период", "МесяцСтрока", Элемент,
															Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" реквизита "Период".
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииОкончаниеВводаТекста(ЭтаФорма, "Объект.Период", "МесяцСтрока",
																Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ МОДУЛЯ

#Область ИнициализацияПеременныхМодуля

СоответствиеСпособовРасчета = Новый Соответствие;

#КонецОбласти
