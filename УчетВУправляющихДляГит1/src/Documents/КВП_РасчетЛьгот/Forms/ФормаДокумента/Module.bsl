
#Область ОбщиеПроцедурыИФункции

&НаСервере
// Устанавливает количество дней начисления по текущей дате.
Процедура ЗаполнитьКоличествоДнейНачисления()
	
	ДнейВМесяце = УПЖКХ_ОбщегоНазначенияКлиентСервер.ВсегоДнейВМесяце(Объект.Дата);
	
	Элементы.КоличествоДнейНачисления.МаксимальноеЗначение = ДнейВМесяце;
	
	Если мКоличествоДнейЗаданоВручную Тогда
		// Проверим, не было ли введено больше, чем теперь стало.
		Объект.КоличествоДнейНачисления = Мин(Объект.КоличествоДнейНачисления, ДнейВМесяце);
	Иначе
		Объект.КоличествоДнейНачисления = ДнейВМесяце;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКоличествоДнейНачисления()

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийРасчетаЛьгот.НачислениеНаЛицевыеСчета") Тогда
		Элементы.ЛьготыЛицевыеСчета.Заголовок = "Лицевой счет";
		Элементы.ЛьготыКвартира.Видимость = Истина;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийРасчетаЛьгот.НачисленияНаПарковочныеМеста") Тогда
		Элементы.ЛьготыЛицевыеСчета.Заголовок = "Парковочное место";
		Элементы.ЛьготыКвартира.Видимость = Ложь;
	Иначе
		Элементы.ЛьготыЛицевыеСчета.ВыбиратьТип = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Функция задает вопрос о записи документа.
Процедура ЗадатьВопросЗаписатьДокумент(ИзменитьМодифицированность)
	
	Если Модифицированность Тогда
		ПоказатьВопрос( Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаписатьДокумент", ЭтаФорма, ИзменитьМодифицированность),
						"Перед расчетом льгот необходимо записать документ. Продолжить?",
						РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры // ЗадатьВопросЗаписатьДокумент()

&НаКлиенте
// Обработчик результата вопроса о записи документа.
Процедура ОбработатьРезультатВопросаЗаписатьДокумент(РезультатВопроса, ИзменитьМодифицированность) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да
	   И Записать() Тогда
		РассчитатьЛьготыНаСервере();
		Модифицированность = ИзменитьМодифицированность;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаЗаписатьДокумент()

&НаСервере
// Функция помещает строки расшифровки на сервере.
Функция ПоместитьРасшифровкуСтрокиВХранилищеНаСервере(ТекущаяСтрока)
	
	ДанныеСтроки = Объект.Льготы.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если Не ДанныеСтроки = Неопределено Тогда
		
		СтруктураОтбора = Новый Структура("ЛицевыеСчета,Услуга", ДанныеСтроки.ЛицевыеСчета, ДанныеСтроки.Услуга);
		ТаблицаРасшифровки = Объект.РасшифровкаЛьгот.Выгрузить(
			Объект.РасшифровкаЛьгот.НайтиСтроки(СтруктураОтбора), "ЛьготнаяКатегория,Начислено,Количество");
		АдресХранилищаРасшифровкиСтроки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, Новый УникальныйИдентификатор);
		
		Возврат АдресХранилищаРасшифровкиСтроки;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция получает строки расшифровки на сервере.
Функция ВосстановитьРасшифровкуСтрокиИзХранилищаНаСервере(ТекущаяСтрока, АдресХранилищаРасшифровкиСтроки)
	
	ДанныеСтроки = Объект.Льготы.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если Не ДанныеСтроки = Неопределено Тогда
		
		СтруктураОтбора = Новый Структура("ЛицевыеСчета,Услуга", ДанныеСтроки.ЛицевыеСчета, ДанныеСтроки.Услуга);
		СтрокиТаблицыЛьгот = Объект.РасшифровкаЛьгот.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТекСтрокаУдаления Из СтрокиТаблицыЛьгот Цикл
			Объект.РасшифровкаЛьгот.Удалить(Объект.РасшифровкаЛьгот.Индекс(ТекСтрокаУдаления));
		КонецЦикла;
		
		ТаблицаЛьгот = ПолучитьИзВременногоХранилища(АдресХранилищаРасшифровкиСтроки);
		
		ВсегоНачислено = 0;
		Для Каждого НоваяСтрока Из ТаблицаЛьгот Цикл
			СтрокаРасшифровки = Объект.РасшифровкаЛьгот.Добавить();
			СтрокаРасшифровки.ЛицевыеСчета      = ДанныеСтроки.ЛицевыеСчета;
			СтрокаРасшифровки.Услуга            = ДанныеСтроки.Услуга;
			СтрокаРасшифровки.ЛьготнаяКатегория = НоваяСтрока.ЛьготнаяКатегория;
			СтрокаРасшифровки.Начислено         = НоваяСтрока.Начислено;
			СтрокаРасшифровки.Количество        = НоваяСтрока.Количество;
			ВсегоНачислено = ВсегоНачислено + СтрокаРасшифровки.Начислено;
		КонецЦикла;
		
		ДанныеСтроки.Начислено = ВсегоНачислено;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполнения дополнительных данных
// в строках дерева.
Процедура ЗаполнитьДопДанныеВТаблице()
	
	СписокЛС = Объект.Льготы.Выгрузить().ВыгрузитьКолонку("ЛицевыеСчета");
	
	мТаблицаДанныхЛС = ПолучитьПараметрыЛицевыхСчетовДляВыводаВТаблицах(СписокЛС, Объект.Дата);
	
	Для Каждого ТекСтрока Из мТаблицаДанныхЛС Цикл
		
		СтрокиТаблицы = Объект.Льготы.НайтиСтроки(Новый Структура("ЛицевыеСчета", ТекСтрока.ЛицевойСчет));
		
		Для Каждого ТекСтрокаТаблицы Из СтрокиТаблицы Цикл
			ТекСтрокаТаблицы.Квартира = ТекСтрока.Помещение;
			ТекСтрокаТаблицы.Владелец  = ТекСтрока.Владелец;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура пересчета итогов на клиенте.
Процедура ПересчитатьИтогиНаКлиенте();
	
	ИтогоСуммаУслуги = Объект.Льготы.Итог("СуммаУслуги");
	ИтогоНачислено   = Объект.Льготы.Итог("Начислено");
	
КонецПроцедуры

&НаСервере
// Процедура выполняет сортировку табличных частей.
//
Процедура СортироватьТЧНаСервере(ИмяТЧ, ИмяКолонкиИсх, ЭтоДерево, ПоВозрастанию)
	
	ИмяКолонки = Прав(ИмяКолонкиИсх, СтрДлина(ИмяКолонкиИсх) - СтрДлина(ИмяТЧ));
	
	ДанныеФормы = Объект[ИмяТЧ].Выгрузить();
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	УПЖКХ_ОбщегоНазначенияСервер.СортироватьТабличнуюЧасть(ДокОбъект, ИмяТЧ, ДанныеФормы, ИмяКолонки, ПоВозрастанию, ЭтоДерево);
	
	ЗначениеВДанныеФормы(ДанныеФормы, Объект[ИмяТЧ]);
	
КонецПроцедуры // СортироватьТЧНаСервере()

#КонецОбласти

#Область РаботаСПроцедурамиИФункциямиМодуляОбъекта

&НаСервере
// Процедура заполняет табличную часть на сервере.
Процедура РассчитатьЛьготыНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_РасчетЛьгот"));
	ДокументОбъект.РассчитатьЛьготы();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьДопДанныеВТаблице();
	
КонецПроцедуры

&НаСервере
// Процедура заполняет табличную часть на сервере.
Процедура ЗаполнитьТабличнуюЧастьУслугиНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_РасчетЛьгот"));
	ДокументОбъект.ЗаполнитьТабличнуюЧастьУслуги();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьДопДанныеВТаблице();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		Объект.СтарыйДокумент = Не Константы.УПЖКХ_ИспользоватьНовыйАлгоритмРасчетаЛьгот.Получить();
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	КонецЕсли;
	
	// Заполнение оперативных параметров.
	мДатаДокумента               = Объект.Дата;
	мОрганизация                 = Объект.Организация;
	
	Если Объект.Ссылка.Пустая() Тогда
		мКоличествоДнейЗаданоВручную = Ложь;
		ЗаполнитьКоличествоДнейНачисления();
	КонецЕсли;
	
	ЗаполнитьДопДанныеВТаблице();
	
	ИтогоСуммаУслуги = Объект.Льготы.Итог("СуммаУслуги");
	ИтогоНачислено   = Объект.Льготы.Итог("Начислено");
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	// Установить видимость реквизитов и заголовков колонок.
	УправлениеФормой(ЭтаФорма);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Если Не Объект.СтарыйДокумент Тогда
		ФормаДокумента = ПолучитьФорму("Документ.КВП_РасчетЛьгот.Форма.ФормаДокументаНовыйАлгоритм",
										Новый Структура("Ключ", Объект.Ссылка));
		ФормаДокумента.Открыть();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДопДанныеВТаблице();
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	ЕстьДанныеВТаблицеЛьгот = Объект.Льготы.Количество() > 0;
	
	Если Не НачалоМесяца(мДатаДокумента) = НачалоМесяца(Объект.Дата) И ЕстьДанныеВТаблицеЛьгот Тогда
		
		ДопПараметры = Новый Структура("Событие", "ИзменениеДаты");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДатаОрганизацияПриИзмененииЗавершение", ЭтотОбъект, ДопПараметры),
		"При изменении даты документа табличная часть документа будет очищена. Продолжить?",
		РежимДиалогаВопрос.ДаНет, ,
		КодВозвратаДиалога.Нет);
		
	Иначе
		
		// В случае, если изменяем месяц в дате документа, тогда будем перезаполнять поле Количество дней начисления.
		Если Не НачалоМесяца(мДатаДокумента) = НачалоМесяца(Объект.Дата) Тогда
			мКоличествоДнейЗаданоВручную = Ложь;
		КонецЕсли;
		
		// Обработаем изменение даты документа.
		УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
		мДатаДокумента = Объект.Дата;
		ЗаполнитьКоличествоДнейНачисления();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЕстьДанныеВТаблицеЛьгот = Объект.Льготы.Количество() > 0;
	
	Если Не мОрганизация = Объект.Организация И ЕстьДанныеВТаблицеЛьгот Тогда
		ДопПараметры = Новый Структура("Событие", "ИзменениеОрганизации");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДатаОрганизацияПриИзмененииЗавершение", ЭтотОбъект, ДопПараметры),
					   "При изменении организации табличная часть документа будет очищена. Продолжить?",
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Нет);
	Иначе
		// Обработаем изменение организации
		мОрганизация = Объект.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработки завершения вопроса об очистке таблицы расчета льгот.
Процедура ДатаОрганизацияПриИзмененииЗавершение(Ответ, ДопПараметры) Экспорт
	
	Событие = ДопПараметры.Событие;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// Очистка табличной части.
		Объект.Льготы.Очистить();
		
		// Установка новых значений временных переменных.
		Если Событие = "ИзменениеДаты" Тогда
			
			мКоличествоДнейЗаданоВручную = Ложь;
			мДатаДокумента               = Объект.Дата;
			
			// Обработаем изменение даты документа.
			УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
			ЗаполнитьКоличествоДнейНачисления();
			
		ИначеЕсли Событие = "ИзменениеОрганизации" Тогда
			// Обработаем изменение организации.
			мОрганизация = Объект.Организация;
		КонецЕсли;
		
	Иначе
		
		// Возврат исходных значений.
		Если Событие = "ИзменениеДаты" Тогда
			Объект.Дата = мДатаДокумента;
		ИначеЕсли Событие = "ИзменениеОрганизации" Тогда
			Объект.Организация = мОрганизация;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОперации".
Процедура ВидОперацииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КоличествоДнейНачисления".
Процедура КоличествоДнейНачисленияПриИзменении(Элемент)
	
	Если Объект.КоличествоДнейНачисления = 0 Тогда
		мКоличествоДнейЗаданоВручную = Ложь;
		ЗаполнитьКоличествоДнейНачисления();
	Иначе
		мКоличествоДнейЗаданоВручную = Истина;
	КонецЕсли;
	
	// Предлагаем перезаполнение.
	Если Объект.Льготы.Количество() > 0 Тогда
		ТекстВопроса       = "Пересчитать льготы?";
		ОписаниеОповещения = Новый ОписаниеОповещения("КоличествоДнейНачисленияПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры // КоличествоДнейНачисленияПриИзменении()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "КоличествоДнейНачисленияПриИзменении()".
Процедура КоличествоДнейНачисленияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗадатьВопросЗаписатьДокумент(Истина);
	КонецЕсли;
	
КонецПроцедуры // КоличествоДнейНачисленияПриИзмененииЗавершение()

&НаКлиенте
// Обработчик события "Выбор" поля "Льготы".
Процедура ЛьготыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЛьготыНачислено" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		АдресХранилищаРасшифровкиСтроки = ПоместитьРасшифровкуСтрокиВХранилищеНаСервере(ВыбраннаяСтрока);
		
		Если Не АдресХранилищаРасшифровкиСтроки = Неопределено Тогда
			ФормаРедактирования = ПолучитьФорму("Документ.КВП_РасчетЛьгот.Форма.ФормаРедактированияЛьготы",
													Новый Структура("АдресХранилищаРасшифровкиСтроки", АдресХранилищаРасшифровкиСтроки));
			ФормаРедактирования.ВладелецФормы     = ЭтаФорма;
			ФормаРедактирования.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			
			ДопПараметры = Новый Структура("ВыбраннаяСтрока", ВыбраннаяСтрока);
			ФормаРедактирования.ОписаниеОповещенияОЗакрытии = 
							Новый ОписаниеОповещения("ОбработатьРезультатЗакрытияФормыРедактированияЛьготы", ЭтаФорма, ДопПараметры);
			ФормаРедактирования.Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЛьготыВыбор()

&НаКлиенте
// Обработчик результата закрытия формы редактирования льготы.
Процедура ОбработатьРезультатЗакрытияФормыРедактированияЛьготы(АдресХранилищаРасшифровкиСтроки, ДопПараметры) Экспорт
	
	Если Не АдресХранилищаРасшифровкиСтроки = Неопределено Тогда
		ВосстановитьРасшифровкуСтрокиИзХранилищаНаСервере(ДопПараметры.ВыбраннаяСтрока, АдресХранилищаРасшифровкиСтроки);
		ПересчитатьИтогиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатЗакрытияФормыРедактированияЛьготы()

&НаКлиенте
// Обработчик события "ПередУдалением" поля "Льготы".
Процедура ЛьготыПередУдалением(Элемент, Отказ)
	
	СтрукОтбор = Новый Структура();
	СтрукОтбор.Вставить("ЛицевыеСчета", Элемент.ТекущиеДанные.ЛицевыеСчета);
	СтрукОтбор.Вставить("Услуга",       Элемент.ТекущиеДанные.Услуга);
	
	СтрокиРасшифровки = Объект.РасшифровкаЛьгот.НайтиСтроки(СтрукОтбор);
	Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
		Объект.РасшифровкаЛьгот.Удалить(Объект.РасшифровкаЛьгот.Индекс(СтрокаРасшифровки));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередОкончаниемРедактирования" поля "Льготы".
Процедура ЛьготыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		// Проверим, возможно строка с таким ЛС и услугой уже введена,
		// если да, то запретим второй.
		ТекЛицевойСчет = Элемент.ТекущиеДанные.ЛицевыеСчета;
		ТекУслуга      = Элемент.ТекущиеДанные.Услуга;
		
		СтрукОтбор = Новый Структура();
		СтрукОтбор.Вставить("ЛицевыеСчета", ТекЛицевойСчет);
		СтрукОтбор.Вставить("Услуга",       ТекУслуга);
		
		СтрокиЛьготы = Объект.Льготы.НайтиСтроки(СтрукОтбор);
		
		НомерТекущейСтроки = Элемент.ТекущиеДанные.НомерСтроки;
		
		Для Каждого ТекСтрока Из СтрокиЛьготы Цикл
			Если Не ТекСтрока.НомерСтроки = НомерТекущейСтроки Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("По услуге " 
												  + ТекУслуга 
												  + " и лицевому счету " 
												  + ТекЛицевойСчет 
												  + " уже введена строка льготы!", 
												  Отказ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля "Льготы".
Процедура ЛьготыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьИтогиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" поля "Льготы".
Процедура ЛьготыПослеУдаления(Элемент)
	
	ПересчитатьИтогиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛьготыКвартира".
Процедура ЛьготыКвартираНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛьготыВладелец".
Процедура ЛьготыВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ЛьготыЛицевыеСчета".
Процедура ЛьготыЛицевыеСчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Льготы.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ТекущиеДанные.Квартира = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.ЛицевыеСчета, "Адрес");
		ТекущиеДанные.Владелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(
									ТекущиеДанные.ЛицевыеСчета, Объект.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛьготыЛицевыеСчета".
Процедура ЛьготыЛицевыеСчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Льготы.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущийЛицевойСчет = ТекущиеДанные.ЛицевыеСчета;
	Иначе
		ТекущийЛицевойСчет = Неопределено;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийРасчетаЛьгот.НачислениеНаЛицевыеСчета") Тогда
		
		СтруктураПараметров = Новый Структура;
		
		ФормаВыбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора",
									Новый Структура("ТекущаяСтрока", ТекущийЛицевойСчет), Элемент);
		ФормаВыбора.Открыть();
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийРасчетаЛьгот.НачисленияНаПарковочныеМеста") Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТекущаяСтрока", ТекущийЛицевойСчет);
		СтруктураПараметров.Вставить("ПараметрОтборТипПомещения",
										ПредопределенноеЗначение("Перечисление.КВП_ТипыПомещений.Автоместо"));
		
		Если Не Объект.Объект.Пустая() И ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.КВП_Здания") Тогда
			СтруктураПараметров.Вставить("ПараметрВладелец",          Объект.Объект);
		КонецЕсли;
		
		ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Помещения.ФормаВыбора", СтруктураПараметров, Элемент);
		
		ФормаВыбора.Открыть();
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" колонки "Услуга" табличной части.
Процедура ЛьготыУслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", , Элемент);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка",
																УслугаДобровольногоСтрахования,
																ВидСравненияКомпоновкиДанных.НеРавно, , Истина,
																РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
																
		Форма.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" колонки "Услуга" табличной части.
Процедура ЛьготыУслугаПриИзменении(Элемент)
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
	
		ТекущиеДанные = Элементы.Льготы.ТекущиеДанные;
	
		Если ТекущиеДанные.Услуга = УслугаДобровольногоСтрахования Тогда
			ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("По услуге добровольного страхования нельзя начислять льготы.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.Льготы.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьФрагмент();
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "КомандаЗаполнить()".
Процедура КомандаЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Льготы.Очистить();
	Объект.РасшифровкаЛьгот.Очистить();
	
	КомандаЗаполнитьФрагмент();
	
КонецПроцедуры // КомандаЗаполнитьЗавершение()

&НаКлиенте
// Продолжение процедуры "КомандаЗаполнить()".
Процедура КомандаЗаполнитьФрагмент()
	
	ЗаполнитьТабличнуюЧастьУслугиНаСервере();
	
КонецПроцедуры // КомандаЗаполнитьФрагмент()

&НаКлиенте
// Обработчик команды "КомандаРассчитать".
Процедура КомандаРассчитать(Команда)
	
	ЗадатьВопросЗаписатьДокумент(Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЛьготыСортироватьПоВозрастанию".
Процедура ЛьготыСортироватьПоВозрастанию(Команда)
	
	СортироватьТЧНаСервере("Льготы", Элементы.Льготы.ТекущийЭлемент.Имя, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЛьготыСортироватьПоУбыванию".
Процедура ЛьготыСортироватьПоУбыванию(Команда)
	
	СортироватьТЧНаСервере("Льготы", Элементы.Льготы.ТекущийЭлемент.Имя, Ложь, Ложь);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

#КонецОбласти