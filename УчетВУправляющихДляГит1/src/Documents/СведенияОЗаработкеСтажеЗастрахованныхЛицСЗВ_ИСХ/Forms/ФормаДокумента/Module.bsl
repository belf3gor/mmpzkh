#Область ОписаниеПеременных

&НаКлиенте
Перем НомерТекущейСтроиЗаписиОСтаже;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаписиОСтажеТекст = НСтр("ru = 'Записи о стаже'");
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Не ЗначениеЗаполнено(Объект.ОтчетныйПериод) Тогда 
			Объект.ОтчетныйПериод = '20160101';
		КонецЕсли;
		Объект.ОкончаниеОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(Объект.ОтчетныйПериод);
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначенияПервоначальногоЗаполнения());
		Если ЗначениеЗаполнено(Объект.Организация) Тогда 
			ОрганизацияПриИзмененииНаСервере();
		КонецЕсли;
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыДанныеСотрудникаСЗВ_ИСХ" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбработатьИзменениеДанныхСотрудника(Параметр.АдресВоВременномХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ"));
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда 
		Отказ = Истина;
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПроверяемыеРеквизиты, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтчетныйПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ПерсонифицированныйУчетКлиент.ОтчетныйПериодРегулирование(Объект.ОтчетныйПериод, ПериодСтрока, Направление, '19960101', '20161001');
	Объект.ОкончаниеОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(Объект.ОтчетныйПериод);
	ОтчетныйПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
    ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерПФРПриИзменении(Элемент)
	
	ПерсонифицированныйУчетКлиентСервер.УстановитьФорматРегистрационногоНомераПФР(Объект.РегистрационныйНомерПФР);
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагБлокировкиДокументаПриИзменении(Элемент)
	
	ФлагБлокировкиДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

// Обработчик подсистемы "ПодписиДокументов".
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент) 
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент)
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец Обработчик подсистемы "ПодписиДокументов".

#КонецОбласти

#Область ОбработчикиСобытийТаблицыСотрудники

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияКарточкиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	СотрудникиПередУдалениемНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Тогда 
		Возврат;
	КонецЕсли;
	
	МаксимальныйИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтрокиСотрудника + 1;
	Элемент.ТекущиеДанные.ИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтрокиСотрудника;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда 
		Возврат;
	КонецЕсли;
	
	СотрудникиПриОкончанииРедактированияНаСервере(ТекущиеДанные.Сотрудник, ТекущиеДанные.ИдентификаторСтрокиСотрудника);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеСотрудников(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтаФорма, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
	СотрудникиСотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыНачисленныеУплаченныеВзносы

&НаКлиенте
Процедура НачисленныеУплаченныеВзносыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленныеУплаченныеВзносыПослеУдаления(Элемент)
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтаФорма, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыУплаченныеВзносыРасшифровка

&НаКлиенте
Процедура УплаченныеВзносыРасшифровкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УплаченныеВзносыРасшифровкаПослеУдаления(Элемент)
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтаФорма, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	
КонецПроцедуры

&НаКлиенте
Процедура УплаченныеВзносыРасшифровкаГодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УплаченныеВзносыРасшифровка.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Год <= 2013 Тогда 
		ТекущиеДанные.ПоТарифуСтраховыхВзносов = 0;
	КонецЕсли;
	
	Если ТекущиеДанные.Год <= 2001 Или ТекущиеДанные.Год >= 2014 Тогда 
		ТекущиеДанные.НаСтраховуюПенсию = 0;
		ТекущиеДанные.НаНакопительнуюПенсию = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыДосрочноеНазначениеПенсии

&НаКлиенте
Процедура ДосрочноеНазначениеПенсииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДосрочноеНазначениеПенсии.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда 
		ТекущиеДанные.ОсобыеУсловияТруда = ?(Объект.ОтчетныйПериод >= '20020101', 
			ПредопределенноеЗначение("Справочник.ОсобыеУсловияТрудаПФР.ПустаяСсылка"),
			ПредопределенноеЗначение("Справочник.ОсобыеУсловияТрудаДляСЗВКПФР.ПустаяСсылка"));
		ТекущиеДанные.ОснованиеДосрочногоНазначенияПенсии = ?(Объект.ОтчетныйПериод >= '20020101', 
			ПредопределенноеЗначение("Справочник.ОснованияДосрочногоНазначенияПенсии.ПустаяСсылка"),
			ПредопределенноеЗначение("Справочник.ОснованияДосрочногоНазначенияПенсииДляСЗВК.ПустаяСсылка"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДосрочноеНазначениеПенсииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДосрочноеНазначениеПенсииПослеУдаления(Элемент)
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтаФорма, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	
КонецПроцедуры

&НаКлиенте
Процедура ДосрочноеНазначениеПенсииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ОснованиеВыслугиЛет") Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.ДосрочноеНазначениеПенсии.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуЗавершение", ЭтотОбъект, Команда);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуЗавершение(Результат, Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Проверить(Команда)
	
	ОчиститьСообщения();

	Отказ = Ложь;
	ПроверкаЗаполненияДокумента(Отказ);
	ПроверкаСтороннимиПрограммами(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПерсонифицированныйУчетКлиент.ПодобратьФизическихЛиц(Элементы.Сотрудники, Объект.Организация, АдресСпискаПодобранныхСотрудников());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);			
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, Параметры) Экспорт
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	ПрисоединенныеФайлыКлиент.СохранитьФайлКак(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ПФР");	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВПФР(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, Параметры) Экспорт
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ФлагБлокировкиДокумента = Объект.ДокументПринятВПФР;	
	
	ПериодСтрока = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(Объект.ОтчетныйПериод);
	МаксимальныйИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтроки();
	
	УстановитьСвойстваЭлементовФормы();
	УстановитьДоступностьДанныхФормы();
	УстановитьСписокВыбораВидаВзносов(ЭтаФорма);
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма, КлючевыеРеквизитыОписаниеКлючевыхРеквизитов());
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма, , КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(), КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	
	ПерсонифицированныйУчет.УстановитьСвязиПараметровВыбораСотрудников(Элементы.СотрудникиСотрудник);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДанныхФормы()
	
	Если Объект.ДокументПринятВПФР Тогда  
		ТолькоПросмотр = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтчетныйПериодПриИзмененииНаСервере()
	
	УстановитьСписокВыбораВидаВзносов(ЭтаФорма);
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Период", Объект.ОкончаниеОтчетногоПериода);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&Организация КАК Организация,
	               |	&Период КАК Период
	               |ПОМЕСТИТЬ ВТОрганизации";
	
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Истина);
	ПерсонифицированныйУчет.СоздатьВТСведенияОбОрганизацияхПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц);	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОбОрганизациях.РегистрационныйНомерПФР,
	               |	СведенияОбОрганизациях.ИНН,
	               |	СведенияОбОрганизациях.КПП
	               |ИЗ
	               |	ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда  
		ЗаполнитьЗначенияСвойств(Объект, Выборка);
	КонецЕсли;
	
	ЗаполнитьПодписиДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодписиДокумента()
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиСотрудникПриИзмененииНаСервере()
	
	ДанныеСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСотрудника.Сотрудник);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(Объект.ОтчетныйПериод);
	Документы.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.СоздатьВТПерсональныеДанныеСотрудников(
		МенеджерВременныхТаблиц, Объект.Организация, Объект.ОтчетныйПериод, ОкончаниеПериода, СписокСотрудников);
		
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка КАК Сотрудник,
	               |	ФизическиеЛица.Фамилия,
	               |	ФизическиеЛица.Имя,
	               |	ФизическиеЛица.Отчество
	               |ПОМЕСТИТЬ ВТФизическиеЛица
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |ГДЕ
	               |	ФизическиеЛица.Ссылка В(&СписокСотрудников)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФизическиеЛица.Сотрудник,
	               |	ЕСТЬNULL(ПерсональныеДанныеСотрудников.Фамилия, ФизическиеЛица.Фамилия) КАК Фамилия,
	               |	ЕСТЬNULL(ПерсональныеДанныеСотрудников.Имя, ФизическиеЛица.Имя) КАК Имя,
	               |	ЕСТЬNULL(ПерсональныеДанныеСотрудников.Отчество, ФизическиеЛица.Отчество) КАК Отчество,
	               |	ПерсональныеДанныеСотрудников.*
	               |ИЗ
	               |	ВТФизическиеЛица КАК ФизическиеЛица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПерсональныеДанныеСотрудников КАК ПерсональныеДанныеСотрудников
	               |		ПО ФизическиеЛица.Сотрудник = ПерсональныеДанныеСотрудников.Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда  
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, Выборка);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ФлагБлокировкиДокументаПриИзмененииНаСервере()
	
	Модифицированность = Истина;
	Объект.ДокументПринятВПФР = ФлагБлокировкиДокумента;
	Если Не ФлагБлокировкиДокумента Тогда
		ТолькоПросмотр = Ложь;
	КонецЕсли;	
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиПередУдалениемНаСервере()
	
	УдаляемыеСтроки = Элементы.Сотрудники.ВыделенныеСтроки;
	Для Каждого Идентификатор Из УдаляемыеСтроки Цикл
		СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(Идентификатор);
		ОчиститьСведенияОСотруднике(СтрокаСотрудника.ИдентификаторСтрокиСотрудника);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиПриОкончанииРедактированияНаСервере(Сотрудник, ИдентификаторСтрокиСотрудника)
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	ИдентификаторыСотрудников = Новый Соответствие;
	ИдентификаторыСотрудников.Вставить(Сотрудник, ИдентификаторСтрокиСотрудника);
	
	ЗаполнитьДанныеОСтажеСотрудников(ИдентификаторыСотрудников);
	ЗаполнитьДанныеОЗаработкеСотрудников(ИдентификаторыСотрудников);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапрашиваемыеЗначенияПервоначальногоЗаполнения()
	
	ЗапрашиваемыеЗначения = ЗапрашиваемыеЗначенияЗаполненияПоОрганизации();
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	ЗапрашиваемыеЗначения.Вставить("Ответственный", "Объект.Ответственный");
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапрашиваемыеЗначенияЗаполненияПоОрганизации()
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции 	

&НаКлиенте
Процедура ОткрытьФормуРедактированияКарточкиДокумента()
	
	ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда	
		
		ДанныеТекущегоДокументаПоСотрудникуВоВременноеХранилище();
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("АдресВоВременномХранилище", АдресДанныхТекущегоДокументаВХранилище);
		ПараметрыОткрытияФормы.Вставить("РедактируемыйДокументСсылка", Объект.Ссылка);
		ПараметрыОткрытияФормы.Вставить("Сотрудник", ДанныеТекущейСтроки.Сотрудник);
		ПараметрыОткрытияФормы.Вставить("Организация", Объект.Организация);
		ПараметрыОткрытияФормы.Вставить("Период", Объект.ОтчетныйПериод);
		ПараметрыОткрытияФормы.Вставить("ИсходныйНомерСтроки", 0);
		ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		ПараметрыОткрытияФормы.Вставить("НеОтображатьОшибки", Истина);
		
		ОткрытьФорму("Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Форма.ФормаРедактированияДанныхСотрудника", ПараметрыОткрытияФормы, ЭтаФорма);	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ДанныеТекущегоДокументаПоСотрудникуВоВременноеХранилище()
	
	Если Элементы.Сотрудники.ТекущаяСтрока = Неопределено Тогда
		АдресДанныхТекущегоДокументаВХранилище = "";
		Возврат;
	КонецЕсли;	
	
	ДанныеТекущейСтрокиПоСотруднику = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	Если ДанныеТекущейСтрокиПоСотруднику = Неопределено Тогда
		АдресДанныхТекущегоДокументаВХранилище = "";
		Возврат;
	КонецЕсли;
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	ДанныеСотрудника.Вставить("СтраховойНомерПФР", ДанныеТекущейСтрокиПоСотруднику.СтраховойНомерПФР);
	ДанныеСотрудника.Вставить("Фамилия", ДанныеТекущейСтрокиПоСотруднику.Фамилия);
	ДанныеСотрудника.Вставить("Имя", ДанныеТекущейСтрокиПоСотруднику.Имя);
	ДанныеСотрудника.Вставить("Отчество", ДанныеТекущейСтрокиПоСотруднику.Отчество);
	ДанныеСотрудника.Вставить("СотрудникУволен", ДанныеТекущейСтрокиПоСотруднику.СотрудникУволен);
	ДанныеСотрудника.Вставить("Заработок", ДанныеТекущейСтрокиПоСотруднику.Заработок);
	ДанныеСотрудника.Вставить("Начислено", ДанныеТекущейСтрокиПоСотруднику.Начислено);
	ДанныеСотрудника.Вставить("Уплачено", ДанныеТекущейСтрокиПоСотруднику.Уплачено);
	ДанныеСотрудника.Вставить("ТипДоговора", ДанныеТекущейСтрокиПоСотруднику.ТипДоговора);
	ДанныеСотрудника.Вставить("НомерДоговора", ДанныеТекущейСтрокиПоСотруднику.НомерДоговора);
	ДанныеСотрудника.Вставить("ДатаДоговора", ДанныеТекущейСтрокиПоСотруднику.ДатаДоговора);
	ДанныеСотрудника.Вставить("ДополнительныйТариф", ДанныеТекущейСтрокиПоСотруднику.ДополнительныйТариф);
	ДанныеСотрудника.Вставить("ФиксНачисленныеВзносы", ДанныеТекущейСтрокиПоСотруднику.ФиксНачисленныеВзносы);
	ДанныеСотрудника.Вставить("ФиксУплаченныеВзносы", Ложь);
	ДанныеСотрудника.Вставить("ФиксСтаж", ДанныеТекущейСтрокиПоСотруднику.ФиксСтаж);
	ДанныеСотрудника.Вставить("ФиксЗаработок", ДанныеТекущейСтрокиПоСотруднику.ФиксЗаработок);
	ДанныеСотрудника.Вставить("СведенияОЗаработке", Новый Массив);
	ДанныеСотрудника.Вставить("СведенияОЗаработкеНаВредныхИТяжелыхРаботах", Новый Массив);
    ДанныеСотрудника.Вставить("ЗаписиОСтаже", Новый Массив);
	ДанныеСотрудника.Вставить("ИсходныйНомерСтроки", ДанныеТекущейСтрокиПоСотруднику.ИсходныйНомерСтроки);
	ДанныеСотрудника.Вставить("ИдентификаторСтрокиСотрудника", ДанныеТекущейСтрокиПоСотруднику.ИдентификаторСтрокиСотрудника);
	ДанныеСотрудника.Вставить("НачисленныеВзносы", Новый Массив);
	ДанныеСотрудника.Вставить("СведенияОбУплаченныхВзносах", Новый Массив);
	
	ЗначенияРеквизитовХраненияОшибок = ПерсонифицированныйУчетКлиентСервер.ЗначенияРеквизитовХраненияОшибокВСтруктуру(
											ЭтаФорма, 
											ДанныеТекущейСтрокиПоСотруднику,
											"Объект.Сотрудники");
											
	ДанныеСотрудника.Вставить("ЗначенияРеквизитовХраненияОшибок", ЗначенияРеквизитовХраненияОшибок);	
	
	СтруктураПоиска = Новый Структура("ИдентификаторСтрокиСотрудника", ДанныеТекущейСтрокиПоСотруднику.ИдентификаторСтрокиСотрудника);
	
	СтрокиСведенияОЗаработке = Объект.СведенияОЗаработке.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаЗаработок Из СтрокиСведенияОЗаработке Цикл
		СтруктураПолейСведенияОЗаработке = СтруктураПолейСведенияОЗаработке();
		ЗаполнитьЗначенияСвойств(СтруктураПолейСведенияОЗаработке, СтрокаЗаработок);
		ЗначенияРеквизитовХраненияОшибок = ПерсонифицированныйУчетКлиентСервер.ЗначенияРеквизитовХраненияОшибокВСтруктуру(
												ЭтаФорма, 
												СтрокаЗаработок,
												"Объект.СведенияОЗаработке");	
		ДанныеСотрудника.СведенияОЗаработке.Добавить(СтруктураПолейСведенияОЗаработке);
	КонецЦикла;	
	
	СтрокиСведенияОЗаработкеПоКлассамУсловий = Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаЗаработок Из СтрокиСведенияОЗаработкеПоКлассамУсловий Цикл
		СтруктураПолейСведенияОЗаработке = СтруктураПолейСведенияОЗаработкеНаВредныхИТяжелыхРаботах();
		ЗаполнитьЗначенияСвойств(СтруктураПолейСведенияОЗаработке, СтрокаЗаработок);
		ЗначенияРеквизитовХраненияОшибок = ПерсонифицированныйУчетКлиентСервер.ЗначенияРеквизитовХраненияОшибокВСтруктуру(
												ЭтаФорма, 
												СтрокаЗаработок,
												"Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах");	
		ДанныеСотрудника.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Добавить(СтруктураПолейСведенияОЗаработке);
	КонецЦикла;	
	
	СтрокиЗаписиОСтаже = Объект.ЗаписиОСтаже.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаСтаж Из СтрокиЗаписиОСтаже Цикл
		СтруктураПолейЗаписиОСтаже = СтруктураПолейЗаписиОСтаже();
		ЗаполнитьЗначенияСвойств(СтруктураПолейЗаписиОСтаже, СтрокаСтаж);
		ЗначенияРеквизитовХраненияОшибок = ПерсонифицированныйУчетКлиентСервер.ЗначенияРеквизитовХраненияОшибокВСтруктуру(
												ЭтаФорма, 
												СтрокаСтаж,
												"Объект.ЗаписиОСтаже");	
		ДанныеСотрудника.ЗаписиОСтаже.Добавить(СтруктураПолейЗаписиОСтаже);
	КонецЦикла;	
	
	СтрокиНачисленныхВзносов = Объект.НачисленныеВзносы.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаНачисленныхВзносов Из СтрокиНачисленныхВзносов Цикл
		СтруктураПолейНачисленныхВзносов = СтруктураПолейНачисленныхВзносов();
		ЗаполнитьЗначенияСвойств(СтруктураПолейНачисленныхВзносов, СтрокаНачисленныхВзносов);
		ДанныеСотрудника.НачисленныеВзносы.Добавить(СтруктураПолейНачисленныхВзносов);
	КонецЦикла;	
	
	СтрокиСведенияОбУплаченныхВзносах = Объект.СведенияОбУплаченныхВзносах.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаУплаченныеВзносы Из СтрокиСведенияОбУплаченныхВзносах Цикл 
		СтруктураПолейСведенияОбУплаченныхВзносах = СтруктураПолейСведенияОбУплаченныхВзносах();
		ЗаполнитьЗначенияСвойств(СтруктураПолейСведенияОбУплаченныхВзносах, СтрокаУплаченныеВзносы);
		ДанныеСотрудника.СведенияОбУплаченныхВзносах.Добавить(СтруктураПолейСведенияОбУплаченныхВзносах);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(АдресДанныхТекущегоДокументаВХранилище) Тогда
		ПоместитьВоВременноеХранилище(ДанныеСотрудника, АдресДанныхТекущегоДокументаВХранилище);	
	Иначе	
		АдресДанныхТекущегоДокументаВХранилище = ПоместитьВоВременноеХранилище(ДанныеСотрудника, УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция СтруктураПолейСведенияОЗаработке()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("КодМесяца");
	СтруктураПолей.Вставить("КатегорияЗастрахованныхЛиц");
	СтруктураПолей.Вставить("Заработок");
	СтруктураПолей.Вставить("ОблагаетсяВзносами");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиДоПредельнойВеличины");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиСвышеПредельнойВеличины");
	СтруктураПолей.Вставить("ПоДоговорамГПХДоПредельнойВеличины");
	СтруктураПолей.Вставить("ПоДоговорамГПХСвышеПредельнойВеличины");
	
	Возврат СтруктураПолей;
	
КонецФункции

&НаСервере
Функция СтруктураПолейСведенияОЗаработкеНаВредныхИТяжелыхРаботах()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("КодМесяца");
	СтруктураПолей.Вставить("КлассУсловийТруда");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах");
	
	Возврат СтруктураПолей;
	
КонецФункции

&НаСервере
Функция СтруктураПолейЗаписиОСтаже()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерОсновнойЗаписи");
	СтруктураПолей.Вставить("НомерДополнительнойЗаписи");
	СтруктураПолей.Вставить("ДатаНачалаПериода");
	СтруктураПолей.Вставить("ДатаОкончанияПериода");
	СтруктураПолей.Вставить("ОсобыеУсловияТруда");
	СтруктураПолей.Вставить("КодПозицииСписка");
	СтруктураПолей.Вставить("ОснованиеИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ПервыйПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ВторойПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ТретийПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ОснованиеВыслугиЛет");
	СтруктураПолей.Вставить("ПервыйПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ВторойПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТретийПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТерриториальныеУсловия");
	СтруктураПолей.Вставить("ПараметрТерриториальныхУсловий");

	Возврат СтруктураПолей;
	
КонецФункции

&НаСервере
Функция СтруктураПолейНачисленныхВзносов()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СВпоТарифуНеПревышающие");
	СтруктураПолей.Вставить("Страховая");
	СтруктураПолей.Вставить("Накопительная");
	СтруктураПолей.Вставить("СВпоТарифу");
	СтруктураПолей.Вставить("СВпоДопТарифу");
	СтруктураПолей.Вставить("СВстрахователя");
	СтруктураПолей.Вставить("СВизЗаработка");
	
	Возврат СтруктураПолей;
	
КонецФункции

&НаСервере
Функция СтруктураПолейСведенияОбУплаченныхВзносах()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("УплаченоСтраховая");
	СтруктураПолей.Вставить("УплаченоНакопительная");
	
	Возврат СтруктураПолей;
	
КонецФункции

&НаСервере
Процедура  УстановитьСвойстваЭлементовФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиУплачено", "Видимость",
		Объект.ОтчетныйПериод < '20140101' И Объект.ОтчетныйПериод >= '20100101');
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиЗаработок", "Видимость",
		Объект.ОтчетныйПериод < '20020101' Или Объект.ОтчетныйПериод >= '20100101');
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеПоСтрахователюСтраница", "Доступность",
		Объект.ОтчетныйПериод >= '20020101');
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаТребуетсяПерезаполнение", "Видимость", 
		Не ФлагБлокировкиДокумента И Не Объект.АктуальныйФорматФайла);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСписокВыбораВидаВзносов(Форма)
	
	СписокВыбора = Форма.Элементы.НачисленныеУплаченныеВзносыВидСтраховыхВзносов.СписокВыбора;
	СписокВыбора.Очистить();
	
	ОтчетныйГод = Год(Форма.Объект.ОтчетныйПериод);
	Если ОтчетныйГод >=2014 Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыСтраховыхВзносовПФР.ПоТарифуСтраховыхВзносов"));
	ИначеЕсли ОтчетныйГод >=2002 Тогда 
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыСтраховыхВзносовПФР.НаСтраховуюПенсию"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыСтраховыхВзносовПФР.НаНакопительнуюПенсию"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДанныхСотрудника(АдресВоВременномХранилище)
	
	ДанныеШапкиДокумента = Объект;
	
	ДанныеТекущегоДокумента = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ДанныеТекущегоДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтрокиПоСотруднику = Неопределено;
	
	НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("ИдентификаторСтрокиСотрудника", ДанныеТекущегоДокумента.ИдентификаторСтрокиСотрудника));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеТекущейСтрокиПоСотруднику = НайденныеСтроки[0];
	КонецЕсли;
	
	Если ДанныеТекущейСтрокиПоСотруднику = Неопределено  Тогда
		ВызватьИсключение НСтр("ru = 'В текущем документе не найдены данные по редактируемому сотруднику.'");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеТекущейСтрокиПоСотруднику, ДанныеТекущегоДокумента);
	
	Заработок = 0;
	Начислено = 0;
	Уплачено = 0;
	
	ОчиститьСведенияОСотруднике(ДанныеТекущейСтрокиПоСотруднику.ИдентификаторСтрокиСотрудника);
	
	Для Каждого СтрокаЗаработок Из ДанныеТекущегоДокумента.СведенияОЗаработке Цикл
		СтрокаЗаработокОбъекта = Объект.СведенияОЗаработке.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаработокОбъекта, СтрокаЗаработок);
		СтрокаЗаработокОбъекта.Сотрудник = ДанныеТекущейСтрокиПоСотруднику.Сотрудник;
		СтрокаЗаработокОбъекта.ИдентификаторСтрокиСотрудника = ДанныеТекущейСтрокиПоСотруднику.ИдентификаторСтрокиСотрудника;
		Заработок = Заработок + СтрокаЗаработок.Заработок;
	КонецЦикла;
		
	СтрокиСтажаПоСотруднику = Новый Массив;
	Для Каждого СтрокаСтаж Из ДанныеТекущегоДокумента.ЗаписиОСтаже Цикл
		СтрокаСтажОбъекта = Объект.ЗаписиОСтаже.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСтажОбъекта, СтрокаСтаж);
		СтрокаСтажОбъекта.Сотрудник = ДанныеТекущейСтрокиПоСотруднику.Сотрудник;
		СтрокаСтажОбъекта.ИдентификаторСтрокиСотрудника = ДанныеТекущейСтрокиПоСотруднику.ИдентификаторСтрокиСотрудника;
		СтрокиСтажаПоСотруднику.Добавить(СтрокаСтажОбъекта);
	КонецЦикла;
	
	ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(СтрокиСтажаПоСотруднику);
		
	Для Каждого СтрокаВредныйЗаработок Из ДанныеТекущегоДокумента.СведенияОЗаработкеНаВредныхИТяжелыхРаботах Цикл
		СтрокаВредныйЗаработокОбъекта = Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВредныйЗаработокОбъекта, СтрокаВредныйЗаработок);
		СтрокаВредныйЗаработокОбъекта.Сотрудник = ДанныеТекущейСтрокиПоСотруднику.Сотрудник;
		СтрокаВредныйЗаработокОбъекта.ИдентификаторСтрокиСотрудника = ДанныеТекущейСтрокиПоСотруднику.ИдентификаторСтрокиСотрудника;
	КонецЦикла;
	
	Для Каждого СтрокаНачисленныхВзносов Из ДанныеТекущегоДокумента.НачисленныеВзносы Цикл
		СтрокаНачисленныхВзносовОбъекта = Объект.НачисленныеВзносы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисленныхВзносовОбъекта, СтрокаНачисленныхВзносов);
		СтрокаНачисленныхВзносовОбъекта.Сотрудник = ДанныеТекущейСтрокиПоСотруднику.Сотрудник;
		СтрокаНачисленныхВзносовОбъекта.ИдентификаторСтрокиСотрудника = ДанныеТекущейСтрокиПоСотруднику.ИдентификаторСтрокиСотрудника;
		Начислено = Начислено + СтрокаНачисленныхВзносов.СВпоТарифуНеПревышающие
			+ СтрокаНачисленныхВзносов.Страховая + СтрокаНачисленныхВзносов.Накопительная
			+ СтрокаНачисленныхВзносов.СВстрахователя + СтрокаНачисленныхВзносов.СВизЗаработка
			+ СтрокаНачисленныхВзносов.СВпоТарифу + СтрокаНачисленныхВзносов.СВпоТарифу;
	КонецЦикла;
	
	Для Каждого СтрокаУплаченныхВзносов Из ДанныеТекущегоДокумента.СведенияОбУплаченныхВзносах Цикл
		СтрокаУплаченныхВзносовОбъекта = Объект.СведенияОбУплаченныхВзносах.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУплаченныхВзносовОбъекта, СтрокаУплаченныхВзносов);
		СтрокаУплаченныхВзносовОбъекта.Сотрудник = ДанныеТекущейСтрокиПоСотруднику.Сотрудник;
		СтрокаУплаченныхВзносовОбъекта.ИдентификаторСтрокиСотрудника = ДанныеТекущейСтрокиПоСотруднику.ИдентификаторСтрокиСотрудника;
		Уплачено = Уплачено + СтрокаУплаченныхВзносов.УплаченоСтраховая + СтрокаУплаченныхВзносов.УплаченоНакопительная;
	КонецЦикла;
	
	ДанныеТекущейСтрокиПоСотруднику.Заработок = Заработок;
	ДанныеТекущейСтрокиПоСотруднику.Начислено = Начислено;
	ДанныеТекущейСтрокиПоСотруднику.Уплачено = Уплачено;
	
	Если ДанныеТекущегоДокумента.Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьСведенияОСотруднике(ИдентификаторСтрокиСотрудника)
	
	СтруктураПоиска = Новый Структура("ИдентификаторСтрокиСотрудника", ИдентификаторСтрокиСотрудника);
	
	СтрокиЗаработка = Объект.СведенияОЗаработке.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаЗаработокСотрудника Из СтрокиЗаработка Цикл
		Объект.СведенияОЗаработке.Удалить(СтрокаЗаработокСотрудника);
	КонецЦикла;
	
	СтрокиСтажа = Объект.ЗаписиОСтаже.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаСтажСотрудника Из СтрокиСтажа Цикл
		Объект.ЗаписиОСтаже.Удалить(СтрокаСтажСотрудника);
	КонецЦикла;
	
	СтрокиВредногоЗаработка = Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаВредныйЗаработокСотрудника Из СтрокиВредногоЗаработка Цикл
		Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Удалить(СтрокаВредныйЗаработокСотрудника);
	КонецЦикла;
	
	СтрокиНачисленныхВзносов = Объект.НачисленныеВзносы.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаНачисленныхВзносов Из СтрокиНачисленныхВзносов Цикл
		Объект.НачисленныеВзносы.Удалить(СтрокаНачисленныхВзносов);
	КонецЦикла;
	
	СтрокиУплаченныхВзносов = Объект.СведенияОбУплаченныхВзносах.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаУплаченныхВзносов Из СтрокиУплаченныхВзносов Цикл
		Объект.СведенияОбУплаченныхВзносах.Удалить(СтрокаУплаченныхВзносов);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЗаполненияДокумента(Отказ = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ПроверитьДанныеДокумента(Отказ);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияПродолжение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверкаЗаполненияДокумента(Отказ);	
	
	Если Отказ Тогда 
		ТекстВопроса = НСтр("ru = 'В комплекте обнаружены ошибки.
							|Продолжить (не рекомендуется)?'");
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.'"));
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);				
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаСтороннимиПрограммами(Отказ)
	
	Если Отказ Тогда
		ТекстВопроса = НСтр("ru = 'При проверке встроенной проверкой обнаружены ошибки.
		|Выполнить проверку сторонними программами?'")
	Иначе	
		ТекстВопроса = НСтр("ru = 'При проверке встроенной проверкой ошибок не обнаружено.
		|Выполнить проверку сторонними программами?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверкаСтороннимиПрограммамиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннимиПрограммамиЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		ПроверитьСтороннимиПрограммами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтороннимиПрограммами()
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	
	ПроверяемыеОбъекты = Новый Массив;
	ПроверяемыеОбъекты.Добавить(Объект.Ссылка);
	
	ПараметрыОткрытия.Вставить("СсылкиНаПроверяемыеОбъекты", ПроверяемыеОбъекты);
	
	ОткрытьФорму("ОбщаяФорма.ПроверкаФайловОтчетностиПерсУчетаПФР", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(Ссылка, УникальныйИдентификатор)
	
	Возврат ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСотрудников(СписокСотрудников)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(Объект.ОтчетныйПериод);
	Документы.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.СоздатьВТПерсональныеДанныеСотрудников(
		МенеджерВременныхТаблиц, Объект.Организация, Объект.ОтчетныйПериод, ОкончаниеПериода, СписокСотрудников);
		
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка КАК Сотрудник,
	               |	ФизическиеЛица.Фамилия,
	               |	ФизическиеЛица.Имя,
	               |	ФизическиеЛица.Отчество
	               |ПОМЕСТИТЬ ВТФизическиеЛица
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |ГДЕ
	               |	ФизическиеЛица.Ссылка В(&СписокСотрудников)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФизическиеЛица.Сотрудник,
	               |	ЕСТЬNULL(ПерсональныеДанныеСотрудников.Фамилия, ФизическиеЛица.Фамилия) КАК Фамилия,
	               |	ЕСТЬNULL(ПерсональныеДанныеСотрудников.Имя, ФизическиеЛица.Имя) КАК Имя,
	               |	ЕСТЬNULL(ПерсональныеДанныеСотрудников.Отчество, ФизическиеЛица.Отчество) КАК Отчество,
	               |	ПерсональныеДанныеСотрудников.*
	               |ИЗ
	               |	ВТФизическиеЛица КАК ФизическиеЛица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПерсональныеДанныеСотрудников КАК ПерсональныеДанныеСотрудников
	               |		ПО ФизическиеЛица.Сотрудник = ПерсональныеДанныеСотрудников.Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИдентификаторыСотрудников = Новый Соответствие;
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = Объект.Сотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		МаксимальныйИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтрокиСотрудника + 1;
		НоваяСтрока.ИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтрокиСотрудника;
		ИдентификаторыСотрудников.Вставить(НоваяСтрока.Сотрудник, НоваяСтрока.ИдентификаторСтрокиСотрудника);
	КонецЦикла;
	
	ЗаполнитьДанныеОСтажеСотрудников(ИдентификаторыСотрудников);
	ЗаполнитьДанныеОЗаработкеСотрудников(ИдентификаторыСотрудников);
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОСтажеСотрудников(ИдентификаторыСотрудников)
	
	СписокСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ИдентификаторыСотрудников, "Ключ");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.СоздатьВТДанныеСтажаПФР(
		МенеджерВременныхТаблиц, Объект.Организация,  Объект.ОтчетныйПериод, СписокСотрудников, Объект.Ссылка);
		
	ДоговорыГПХ = Новый Массив;
	ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР);
	ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛДОГ);
	ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛАВТ);
		
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеСтажаСотрудников.ФизическоеЛицо КАК Сотрудник,
	               |	ВЫБОР
	               |		КОГДА ДанныеСтажаСотрудников.ТретийПараметрИсчисляемогоСтажа В (&ДоговорыГПХ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДоговорГПХ,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ДанныеСтажаСотрудников.ОснованиеВыслугиЛет) = ТИП(Справочник.ОснованияДосрочногоНазначенияПенсии)
	               |			ТОГДА ДанныеСтажаСотрудников.ОснованиеВыслугиЛет
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОснованияДосрочногоНазначенияПенсии.ПустаяСсылка)
	               |	КОНЕЦ КАК ОснованиеВыслугиЛет,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ДанныеСтажаСотрудников.ОсобыеУсловияТруда) = ТИП(Справочник.ОсобыеУсловияТрудаПФР)
	               |			ТОГДА ДанныеСтажаСотрудников.ОсобыеУсловияТруда
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТрудаПФР.ПустаяСсылка)
	               |	КОНЕЦ КАК ОсобыеУсловияТруда,
	               |	ДанныеСтажаСотрудников.*
	               |ИЗ
	               |	ВТДанныеСтажаСотрудников КАК ДанныеСтажаСотрудников
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник,
	               |	ДоговорГПХ УБЫВ,
	               |	ДанныеСтажаСотрудников.ДатаНачалаПериода";
	
	Если Объект.ОтчетныйПериод < '20020101' Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ОснованияДосрочногоНазначенияПенсии", "Справочник.ОснованияДосрочногоНазначенияПенсииДляСЗВК");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ОсобыеУсловияТрудаПФР", "Справочник.ОсобыеУсловияТрудаДляСЗВКПФР");
	КонецЕсли;
	
	РеквизитыСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Сотрудник,КодПозицииСписка,ОснованиеИсчисляемогоСтажа,ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа,
		|ОснованиеВыслугиЛет,ПервыйПараметрВыслугиЛет,ВторойПараметрВыслугиЛет,ТретийПараметрВыслугиЛет,ОсобыеУсловияТруда,
		|ТерриториальныеУсловия,ПараметрТерриториальныхУсловий,ТерриториальныеУсловияДополнительные,ТретийПараметрИсчисляемогоСтажа", , Истина, Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл 
		СтрокиСтажаПоСотруднику = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ПредыдущаяЗапись = ПредыдущаяОсновнаяЗапись();
			Если ПредыдущаяЗапись <> Неопределено И ПерсонифицированныйУчет.ДанныеСтрокСовпадают(ПредыдущаяЗапись, Выборка, РеквизитыСтроки) Тогда 
				ПредыдущаяЗапись.ДатаОкончанияПериода = Выборка.ДатаОкончанияПериода;
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Объект.ЗаписиОСтаже.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников[НоваяСтрока.Сотрудник];
		    СтрокиСтажаПоСотруднику.Добавить(НоваяСтрока);
		КонецЦикла;
		ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(СтрокиСтажаПоСотруднику);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПредыдущаяОсновнаяЗапись()
	
	КоличествоСтрок = Объект.ЗаписиОСтаже.Количество();
	Если КоличествоСтрок = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСтрок Цикл 
		Если ЗначениеЗаполнено(Объект.ЗаписиОСтаже[КоличествоСтрок-Сч].ДатаНачалаПериода) Тогда 
			Возврат Объект.ЗаписиОСтаже[КоличествоСтрок-Сч];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеОЗаработкеСотрудников(ИдентификаторыСотрудников)
	
	Если Год(Объект.ОтчетныйПериод) < 2014 Тогда 
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ИдентификаторыСотрудников, "Ключ");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыФормированияДокументов = ПерсонифицированныйУчет.ПараметрыФормированияДокументовКвартальнойОтчетности();
	ПараметрыФормированияДокументов.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ;
	
	ПараметрыПолученияДанных = ПерсонифицированныйУчет.ПараметрыДляСоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ();
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанных, ПараметрыФормированияДокументов);
	
	ПараметрыОтбора = ПерсонифицированныйУчет.СтруктураОтбораДанныхДляКвартальнойОтчетности();
	ПараметрыОтбора.СписокФизическихЛиц = СписокСотрудников;
	
	ПараметрыПолученияЗаработка = ПерсонифицированныйУчет.ПараметрыДляСоздатьВТСведенияОЗаработке();
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияЗаработка, ПараметрыПолученияДанных);
	ПерсонифицированныйУчет.СоздатьВТСведенияОЗаработке2014(МенеджерВременныхТаблиц, Объект.Организация, Объект.ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора);
	
	ПараметрыПолученияВзносов = ПерсонифицированныйУчет.ПараметрыДляСоздатьВТВзносыВПФР();
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияВзносов, ПараметрыПолученияДанных);
	ПерсонифицированныйУчет.СоздатьВТВзносыВПФР(МенеджерВременныхТаблиц, Объект.Организация, Объект.ОтчетныйПериод, ПараметрыПолученияВзносов, ПараметрыОтбора);
	
	КодыМесяцев = ПерсонифицированныйУчетКлиентСервер.КодыМесяцевСЗВ_КОРР();	
	ДанныеСотрудников = Новый Соответствие;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОЗаработке.ФизическоеЛицо КАК Сотрудник,
	               |	СведенияОЗаработке.Месяц КАК Месяц,
	               |	СведенияОЗаработке.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	               |	СУММА(СведенияОЗаработке.Заработок) КАК Заработок,
	               |	СУММА(СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины) КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	               |	СУММА(СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины) КАК ПоДоговорамГПХДоПредельнойВеличины,
	               |	СУММА(СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины) КАК ОблагаетсяВзносамиСвышеПредельнойВеличины
	               |ИЗ
	               |	ВТСведенияОЗаработке КАК СведенияОЗаработке
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СведенияОЗаработке.ФизическоеЛицо,
	               |	СведенияОЗаработке.Месяц,
	               |	СведенияОЗаработке.КатегорияЗастрахованныхЛиц
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник,
	               |	Месяц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников[Выборка.Сотрудник];
		ДанныеСотрудника = ДанныеСотрудников[ИдентификаторСтрокиСотрудника];
		Если ДанныеСотрудника = Неопределено Тогда 
			ДанныеСотрудника = СведенияОЗаработкеВзносах();
			ДанныеСотрудников.Вставить(ИдентификаторСтрокиСотрудника, ДанныеСотрудника);
		КонецЕсли;
		Пока Выборка.Следующий() Цикл 
			Если Не ЗначениеЗаполнено(Выборка.Месяц) Тогда 
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Объект.СведенияОЗаработке.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.КодМесяца = КодыМесяцев[Выборка.Месяц];
			НоваяСтрока.ИдентификаторСтрокиСотрудника = ИдентификаторСтрокиСотрудника;
			ДанныеСотрудника.Заработок = ДанныеСотрудника.Заработок + Выборка.Заработок;
		КонецЦикла;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо КАК Сотрудник,
	               |	СведенияОЗаработкеПоКлассамУсловийТруда.Месяц КАК Месяц,
	               |	СведенияОЗаработкеПоКлассамУсловийТруда.КлассУсловийТруда КАК КлассУсловийТруда,
	               |	СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	               |	СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах
	               |ИЗ
	               |	ВТСведенияОЗаработкеПоКлассамУсловийТруда КАК СведенияОЗаработкеПоКлассамУсловийТруда
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо,
	               |	СведенияОЗаработкеПоКлассамУсловийТруда.КлассУсловийТруда,
	               |	СведенияОЗаработкеПоКлассамУсловийТруда.Месяц
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник,
	               |	Месяц,
	               |	КлассУсловийТруда";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.КодМесяца = КодыМесяцев[Выборка.Месяц];
		НоваяСтрока.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников[НоваяСтрока.Сотрудник];
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВзносыВПФР.ФизическоеЛицо КАК Сотрудник,
	               |	ВзносыВПФР.НачисленоСтраховая КАК СВпоТарифуНеПревышающие
	               |ИЗ
	               |	ВТВзносыВПФР КАК ВзносыВПФР
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = Объект.НачисленныеВзносы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников[НоваяСтрока.Сотрудник];
	КонецЦикла;
	
	Для Каждого СтрокаСотрудника Из Объект.Сотрудники Цикл 
		ДанныеСотрудника = ДанныеСотрудников[СтрокаСотрудника.ИдентификаторСтрокиСотрудника];
		Если ДанныеСотрудника <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(СтрокаСотрудника, ДанныеСотрудника);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СведенияОЗаработкеВзносах()
	
	Возврат Новый Структура("Заработок, Начислено, Уплачено", 0, 0, 0);
	
КонецФункции

&НаСервере
Функция МаксимальныйИдентификаторСтроки() Экспорт
	
	МаксимальныйИдентификатор = 0;
	Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		Если МаксимальныйИдентификатор < СтрокаСотрудника.ИдентификаторСтрокиСотрудника Тогда
			МаксимальныйИдентификатор = СтрокаСотрудника.ИдентификаторСтрокиСотрудника;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат МаксимальныйИдентификатор;
	
КонецФункции

&НаСервере
Функция ОписаниеЭлементовСИндикациейОшибок() Экспорт
	
	ОписаниеЭлементовИндикацииОшибок = Новый Соответствие;	
	Возврат ОписаниеЭлементовИндикацииОшибок;
	
КонецФункции	

&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении();
	Возврат Массив;
	
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = КлючевыеРеквизитыОписаниеКлючевыхРеквизитов();
	Возврат Массив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении() 
	
	Массив = Новый Массив;
	Массив.Добавить("Объект.Сотрудники");
	Массив.Добавить("Объект.СведенияОЗаработке");
	Массив.Добавить("Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах");
	Массив.Добавить("Объект.ЗаписиОСтаже");
	Массив.Добавить("Объект.НачисленныеВзносы");
	Массив.Добавить("Объект.СведенияОбУплаченныхВзносах");
	Массив.Добавить("Объект.НачисленныеУплаченныеВзносы");
	Массив.Добавить("Объект.УплаченныеВзносыРасшифровка");
	Массив.Добавить("Объект.ДосрочноеНазначениеПенсии");
	
	Возврат Массив;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыОписаниеКлючевыхРеквизитов() 
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",			НСтр("ru = 'организации'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "ОтчетныйПериод", 	НСтр("ru = 'периода'")));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти
