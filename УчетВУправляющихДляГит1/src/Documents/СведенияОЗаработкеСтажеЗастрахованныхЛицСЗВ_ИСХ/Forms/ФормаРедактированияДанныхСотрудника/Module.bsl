#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолейВзносы;

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолейСтаж;

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолейЗаработок;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗарплатаКадрыОтображениеОшибок.ХраненияОшибокВДанныхФормыДополнитьФорму(ЭтотОбъект);
	ЗарплатаКадрыОтображениеОшибок.ИндикацияОшибокДополнитьФорму(ЭтотОбъект, ОписаниеЭлементовСИндикациейОшибок());
		
	ПерсонифицированныйУчетФормы.УстановитьКраткоеОтображениеКатегорииВТаблицах(ЭтотОбъект, "СведенияОЗаработке.КатегорияЗастрахованныхЛиц", "СведенияОЗаработкеКатегорияЗастрахованныхЛиц");
	
	РедактируемыйДокументСсылка = Параметры.РедактируемыйДокументСсылка;
	Организация = Параметры.Организация;
	Период = Параметры.Период;
	ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(Период);
	Сотрудник = Параметры.Сотрудник;
	ОтменаИсправленийДоступна = Параметры.ОтменаИсправленийДоступна;
	
	ДобавитьКонтрольИсправлений();
	УстановитьСписокВыбораМесяцев();
	
	ИменаДополняемыхТаблиц = Новый Массив;
	ИменаДополняемыхТаблиц.Добавить("СведенияОЗаработке");
	ИменаДополняемыхТаблиц.Добавить("ЗаписиОСтаже");
	ПерсонифицированныйУчетФормы.ДобавитьЗаголовкиКПолямТаблицФормы(ЭтаФорма, ИменаДополняемыхТаблиц, ОписаниеКолонокЗаголовковТаблицФормы());
	
	ДанныеИзВременногоХранилищаВДанныеФормы(Параметры.АдресВоВременномХранилище);
	
	УстановитьЗаголовокКарточки();
	
	УстановитьСвойстваЭлементовФормы();
	УстановитьПараметрыВыбораТерриториальныхУсловий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);	
	
	ПерсонифицированныйУчетКлиентСервер.ДокументыСЗВУстановитьЗначенияКонтролируемыхПолей(
		СтруктураДанныхПоСотруднику, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейВзносы);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОтмененаИсправления" Тогда
		ДанныеИзВременногоХранилищаВДанныеФормы(Параметр.АдресХранилища);
		Активизировать();
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица" И Не ТолькоПросмотр Тогда 
		ЗаполнитьИзменившиесяДанныеФизическогоЛица(Параметр);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Фамилия");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Имя");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраховойНомерПФРПриИзменении(Элемент)
	
	ПерсонифицированныйУчетКлиентСервер.УстановитьФорматСтраховогоНомераПФР(СтраховойНомерПФР);
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "СтраховойНомерПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Отчество");
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаписиОСтаже

&НаКлиенте
Процедура ЗаписиОСтажеПриАктивизацииСтроки(Элемент)
	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
	
	ПерсонифицированныйУчетКлиент.ДокументыСЗВЗаписиОСтажеПриАктивацииСтроки(
		Элементы.ЗаписиОСтаже.ТекущиеДанные, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейСтаж, 
		СтруктураДанныхПоСотруднику);	
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ЗаписиОСтаже.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВСтрокеТаблицы(
			ЭтотОбъект, 
			ТекущиеДанные,
			ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже(),
			Истина);
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда 
		ТекущиеДанные.ОснованиеВыслугиЛет = ?(Период >= '20020101', 
			ПредопределенноеЗначение("Справочник.ОснованияДосрочногоНазначенияПенсии.ПустаяСсылка"),
			ПредопределенноеЗначение("Справочник.ОснованияДосрочногоНазначенияПенсииДляСЗВК.ПустаяСсылка"));
		ТекущиеДанные.ОсобыеУсловияТруда = ?(Период >= '20020101', 
			ПредопределенноеЗначение("Справочник.ОсобыеУсловияТрудаПФР.ПустаяСсылка"),
			ПредопределенноеЗначение("Справочник.ОсобыеУсловияТрудаДляСЗВКПФР.ПустаяСсылка"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
	
	ПерсонифицированныйУчетКлиент.ДокументыСЗВЗаписиОСтажеПриОкончанииРедактирования(
		Элементы.ЗаписиОСтаже.ТекущиеДанные, 
		НоваяСтрока, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейСтаж, 
		СтруктураДанныхПоСотруднику);
			
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанныхПоСотруднику);	
	
	Если НоваяСтрока Тогда
		ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(ЗаписиОСтаже);
	КонецЕсли;
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		"ЗаписиОСтаже");
		
КонецПроцедуры
	
&НаКлиенте
Процедура ЗаписиОСтажеПередУдалением(Элемент, Отказ)
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПередУдалениемСтрокиТаблицыСИндикациейОшибок(ЭтотОбъект, Элемент, "ЗаписиОСтаже");
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаписиОСтажеПослеУдаления(Элемент)
	
	ФиксСтаж = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСведенияОЗаработке

&НаКлиенте
Процедура СведенияОЗаработкеПриАктивизацииСтроки(Элемент)
	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
			
	ДанныеТекущейСтроки = Элементы.СведенияОЗаработке.ТекущиеДанные;	
		
	Если ДанныеТекущейСтроки <> Неопределено И КонтролируемыеПоля <> Неопределено Тогда
		ПерсонифицированныйУчетКлиент.ДокументыСЗВКонтрольИсправленийПриАктивацииСтроки(
			ДанныеТекущейСтроки, 
			КонтролируемыеПоля, 
			СтарыеЗначенияКонтролируемыхПолейЗаработок, 
			СтруктураДанныхПоСотруднику);													 
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СведенияОЗаработкеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВСтрокеТаблицы(ЭтаФорма, Элемент.ТекущиеДанные, ОписаниеКолонокЗаголовковТаблицы("СведенияОЗаработке"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОЗаработкеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
		
	ДанныеТекущейСтроки = Элементы.СведенияОЗаработке.ТекущиеДанные;	
	
	ПерсонифицированныйУчетКлиент.ДокументыСЗВКонтрольИсправленийПриОкончанииРедактированияСтроки(
		ДанныеТекущейСтроки, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейЗаработок,
		СтруктураДанныхПоСотруднику);	
		
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанныхПоСотруднику);
	
	СпозиционироватьСтроку(СведенияОЗаработке, ДанныеТекущейСтроки);
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		"СведенияОЗаработке");
		
КонецПроцедуры
	
&НаКлиенте
Процедура СведенияОЗаработкеПередУдалением(Элемент, Отказ)
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПередУдалениемСтрокиТаблицыСИндикациейОшибок(ЭтотОбъект, Элемент, "СведенияОЗаработке");
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСведенияОЗаработкеНаВредныхИТяжелыхРаботах

&НаКлиенте
Процедура СведенияОЗаработкеНаВредныхИТяжелыхРаботахПриАктивизацииСтроки(Элемент)
	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
			
	ДанныеТекущейСтроки = Элементы.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.ТекущиеДанные;	
		
	Если ДанныеТекущейСтроки <> Неопределено И КонтролируемыеПоля <> Неопределено Тогда
		ПерсонифицированныйУчетКлиент.ДокументыСЗВКонтрольИсправленийПриАктивацииСтроки(
			ДанныеТекущейСтроки, 
			КонтролируемыеПоля, 
			СтарыеЗначенияКонтролируемыхПолейЗаработок, 
			СтруктураДанныхПоСотруднику);													 
	КонецЕсли;		
				
КонецПроцедуры

&НаКлиенте
Процедура СведенияОЗаработкеНаВредныхИТяжелыхРаботахПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
	
	ДанныеТекущейСтроки = Элементы.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.ТекущиеДанные;	
		
	ПерсонифицированныйУчетКлиент.ДокументыСЗВКонтрольИсправленийПриОкончанииРедактированияСтроки(
		ДанныеТекущейСтроки, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейЗаработок,
		СтруктураДанныхПоСотруднику);	
		
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанныхПоСотруднику);

	СпозиционироватьСтроку(СведенияОЗаработкеНаВредныхИТяжелыхРаботах, ДанныеТекущейСтроки, "КлассУсловийТруда");
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОЗаработкеНаВредныхИТяжелыхРаботахПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтроки = Элементы.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.ТекущиеДанные;	
	СпозиционироватьСтроку(СведенияОЗаработкеНаВредныхИТяжелыхРаботах, ДанныеТекущейСтроки);
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		"СведенияОЗаработкеНаВредныхИТяжелыхРаботах");
		
КонецПроцедуры
	
&НаКлиенте
Процедура СведенияОЗаработкеНаВредныхИТяжелыхРаботахПередУдалением(Элемент, Отказ)
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПередУдалениемСтрокиТаблицыСИндикациейОшибок(ЭтотОбъект, Элемент, "СведенияОЗаработкеНаВредныхИТяжелыхРаботах");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ВыбратьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияПоВзносам(Команда)
	
	ФиксНачисленныеВзносы = Ложь;
	ФиксЗаработок = Ложь;
	Модифицированность = Истина;
	
	АдресВоВременномХранилище = ДанныеСотрудникаВоВременноеХранилище();
	ВладелецФормы.ОтменитьИсправленияПоВзносам(АдресВоВременномХранилище, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияПоСтажу(Команда)
	
	ФиксСтаж = Ложь;
	ЗаписиОСтаже.Очистить();
	
	Модифицированность = Истина;
	АдресВоВременномХранилище = ДанныеСотрудникаВоВременноеХранилище();
	ВладелецФормы.ОтменитьИсправленияПоСтажу(АдресВоВременномХранилище, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДанныеФизическогоЛица(Команда)
	
	ПараметрыФормы = Новый Структура("Ключ, АктивнаяСтраница, РедактируемоеПоле", Сотрудник, "ЛичныеДанные");
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция  СоответствиеДанныхОбъектаДаннымФормы()
	
	ОписаниеСвязиДанных = ЗарплатаКадрыОтображениеОшибок.ОписаниеСвязиДанных();
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиДанныхСтрокТаблиц(
		ОписаниеСвязиДанных,
		"ЗаписиОСтаже",
		"*",
		"ЗаписиОСтаже",
		"");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиДанныхСтрокТаблиц(
		ОписаниеСвязиДанных,
		"СведенияОЗаработке",
		"*",
		"СведенияОЗаработке",
		"");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиДанныхСтрокТаблиц(
		ОписаниеСвязиДанных,
		"СведенияОЗаработкеНаВредныхИТяжелыхРаботах",
		"*",
		"СведенияОЗаработкеНаВредныхИТяжелыхРаботах",
		"");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(ОписаниеСвязиДанных, "", "Сотрудник");	
	
	Возврат ОписаниеСвязиДанных;
	
КонецФункции	

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	АдресВоВременномХранилище = ДанныеСотрудникаВоВременноеХранилище();
	
	ПараметрыОповещения = Новый Структура("РедактируемыйДокументСсылка, Сотрудник, АдресВоВременномХранилище");
	ПараметрыОповещения.РедактируемыйДокументСсылка = РедактируемыйДокументСсылка;
	ПараметрыОповещения.Сотрудник = Сотрудник;
	ПараметрыОповещения.АдресВоВременномХранилище = АдресВоВременномХранилище;	
	
	Оповестить("ИзмененыДанныеСотрудникаСЗВ_ИСХ", ПараметрыОповещения, ЭтаФорма);
	
	Модифицированность = Ложь;

	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	ДоступностьИсправленийВзносов = ФиксНачисленныеВзносы Или ФиксЗаработок;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаписиОСтажеОтменитьИсправленияПоСтажу", "Доступность", ФиксСтаж);
	
	ПерсонифицированныйУчетФормы.УстановитьВидимостьКолонокЗаголовков(ЭтаФорма, "СведенияОЗаработке", ОписаниеКолонокЗаголовковТаблицы("СведенияОЗаработке"));
	
	Если Не ОтменаИсправленийДоступна Тогда
		Элементы.ЗаписиОСтажеОтменитьИсправленияПоСтажу.Видимость = Ложь;	
	КонецЕсли;	
	
	ОтчетныйГод = Год(Период);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомерДоговора", "Видимость", ОтчетныйГод <= 2001);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаДоговора", "Видимость", ОтчетныйГод <= 2001);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДополнительныйТариф", "Видимость", ОтчетныйГод >= 2000);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СведенияОЗаработкеЗаработок", "Видимость", ОтчетныйГод < 2002 Или ОтчетныйГод > 2009);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СведенияОЗаработкеОблагаетсяВзносамиДоПредельнойВеличины", "Видимость", ОтчетныйГод < 2002 Или ОтчетныйГод > 2009);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СведенияОЗаработкеОблагаетсяВзносамиДоПредельнойВеличиныЗаголовок", "Видимость", ОтчетныйГод < 2002 Или ОтчетныйГод > 2009);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СведенияОЗаработкеПоДоговорамГПХДоПредельнойВеличины", "Видимость", ОтчетныйГод > 2009);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СведенияОЗаработкеПоДоговорамГПХДоПредельнойВеличиныЗаголовок", "Видимость", ОтчетныйГод > 2009);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СведенияОЗаработкеОблагаетсяВзносамиСвышеПредельнойВеличины", "Видимость", ОтчетныйГод > 2009);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СведенияОЗаработкеОблагаетсяВзносамиСвышеПредельнойВеличиныЗаголовок", "Видимость", ОтчетныйГод > 2009);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СведенияОЗаработкеПоДоговорамГПХСвышеПредельнойВеличины", "Видимость", ОтчетныйГод > 2009);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СведенияОЗаработкеПоДоговорамГПХСвышеПредельнойВеличиныЗаголовок", "Видимость", ОтчетныйГод > 2009);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СВстрахователя", "Видимость", ОтчетныйГод <= 2000);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СВизЗаработка", "Видимость", ОтчетныйГод <= 2000);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СВпоТарифу", "Видимость", ОтчетныйГод = 2001);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СВпоДопТарифу", "Видимость", ОтчетныйГод = 2001);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Страховая", "Видимость", ОтчетныйГод >= 2002 И ОтчетныйГод <= 2013);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Накопительная", "Видимость", ОтчетныйГод >= 2002 И ОтчетныйГод <= 2013);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СВпоТарифуНеПревышающие", "Видимость", ОтчетныйГод >= 2014);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаУплачено", "Видимость", ОтчетныйГод >= 2010 И ОтчетныйГод <= 2013);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаработокВредныеУсловияСтраница", "Видимость", ОтчетныйГод >= 2013);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СведенияОЗаработкеОблагаетсяВзносамиГруппа",  
		"Заголовок", ?(ОтчетныйГод > 2009, НСтр("ru = 'Облагается взносами до пред. величины'"), НСтр("ru = 'Облагается взносами'")));
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьЗаголовокКарточки()
	
	ИнфонадписьЗаголовокКарточки = НСтр("ru = 'Данные застрахованного лица'");
	
КонецПроцедуры	

&НаСервере
Процедура ДанныеИзВременногоХранилищаВДанныеФормы(АдресВоВременномХранилище)
	
	Модифицированность = Ложь;
	
	ДанныеДокументаПоСотруднику = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ДанныеДокументаПоСотруднику = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить редактируемые данные.'");	
	КонецЕсли;
	
	Сотрудник = ДанныеДокументаПоСотруднику.Сотрудник;
	Фамилия = ДанныеДокументаПоСотруднику.Фамилия;
	Имя = ДанныеДокументаПоСотруднику.Имя;
	Отчество = ДанныеДокументаПоСотруднику.Отчество;
	СотрудникУволен = ДанныеДокументаПоСотруднику.СотрудникУволен;
	СтраховойНомерПФР = ДанныеДокументаПоСотруднику.СтраховойНомерПФР;
	ИдентификаторСтрокиСотрудника = ДанныеДокументаПоСотруднику.ИдентификаторСтрокиСотрудника;
	Заработок = ДанныеДокументаПоСотруднику.Заработок;
	Начислено = ДанныеДокументаПоСотруднику.Начислено;
	Уплачено = ДанныеДокументаПоСотруднику.Уплачено;
	ТипДоговора = ДанныеДокументаПоСотруднику.ТипДоговора;
	НомерДоговора = ДанныеДокументаПоСотруднику.НомерДоговора;
	ДатаДоговора = ДанныеДокументаПоСотруднику.ДатаДоговора;
	ДополнительныйТариф = ДанныеДокументаПоСотруднику.ДополнительныйТариф;
	ФиксНачисленныеВзносы = ДанныеДокументаПоСотруднику.ФиксНачисленныеВзносы;
	ФиксСтаж = ДанныеДокументаПоСотруднику.ФиксСтаж;
	ФиксЗаработок = ДанныеДокументаПоСотруднику.ФиксЗаработок;
	
	ЗаписиОСтаже.Очистить();
	Для Каждого СтрокаТаблицы Из ДанныеДокументаПоСотруднику.ЗаписиОСтаже Цикл
		СтрокаТаблицыФормы = ЗаписиОСтаже.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыФормы, СтрокаТаблицы);
	КонецЦикла;	
	
	Для Каждого СтрокаТаблицы Из ДанныеДокументаПоСотруднику.НачисленныеВзносы Цикл
		ЗаполнитьЗначенияСвойств(ЭтаФорма, СтрокаТаблицы);
	КонецЦикла;	

	СведенияОЗаработке.Очистить();
	Для Каждого СтрокаЗаработок Из ДанныеДокументаПоСотруднику.СведенияОЗаработке Цикл
		СтрокаТаблицы = СведенияОЗаработке.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗаработок);
		СпозиционироватьСтроку(СведенияОЗаработке, СтрокаТаблицы);
	КонецЦикла;
	
	СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Очистить();
	Для Каждого СтрокаЗаработок Из ДанныеДокументаПоСотруднику.СведенияОЗаработкеНаВредныхИТяжелыхРаботах Цикл
		СтрокаТаблицы = СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗаработок);
		СпозиционироватьСтроку(СведенияОЗаработкеНаВредныхИТяжелыхРаботах, СтрокаТаблицы, "КлассУсловийТруда");
	КонецЦикла;	
	
	Для Каждого СтрокаТаблицы Из ДанныеДокументаПоСотруднику.СведенияОбУплаченныхВзносах Цикл
		ЗаполнитьЗначенияСвойств(ЭтаФорма, СтрокаТаблицы);
	КонецЦикла;	
	
	ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВТаблице(ЭтаФорма, СведенияОЗаработке, ОписаниеКолонокЗаголовковТаблицы("СведенияОЗаработке"));
	ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВТаблице(ЭтаФорма, ЗаписиОСтаже, ОписаниеКолонокЗаголовковТаблицы("ЗаписиОСтаже"));
	
	Ошибки = Неопределено;
	ДанныеДокументаПоСотруднику.Свойство("Ошибки", Ошибки);
	
	Если Ошибки <> Неопределено Тогда 
		ЗарплатаКадрыОтображениеОшибок.ПреобразоватьПутиКДаннымВСообщенияхПользователю(
			ЭтотОбъект,
			ЭтотОбъект,
			Ошибки,
			СоответствиеДанныхОбъектаДаннымФормы());
		ЗарплатаКадрыОтображениеОшибок.ПоместитьСообщенияОбОшибкахВДанныеФормы(ЭтотОбъект, Ошибки);	
		ЗарплатаКадрыОтображениеОшибок.УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(ЭтотОбъект, Ошибки, , Истина);	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере 
Функция ДанныеСотрудникаВоВременноеХранилище()	
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник", Сотрудник);
	ДанныеСотрудника.Вставить("СтраховойНомерПФР", СтраховойНомерПФР);
	ДанныеСотрудника.Вставить("Фамилия", Фамилия);
	ДанныеСотрудника.Вставить("Имя", Имя);
	ДанныеСотрудника.Вставить("Отчество", Отчество);
	ДанныеСотрудника.Вставить("ТипДоговора", ТипДоговора);
	ДанныеСотрудника.Вставить("НомерДоговора", НомерДоговора);
	ДанныеСотрудника.Вставить("ДатаДоговора", ДатаДоговора);
	ДанныеСотрудника.Вставить("ДополнительныйТариф", ДополнительныйТариф);
	ДанныеСотрудника.Вставить("ФиксНачисленныеВзносы", ФиксНачисленныеВзносы);
	ДанныеСотрудника.Вставить("ФиксСтаж", ФиксСтаж);
	ДанныеСотрудника.Вставить("ФиксЗаработок", ФиксЗаработок);
	ДанныеСотрудника.Вставить("Модифицированность", Модифицированность);
	ДанныеСотрудника.Вставить("ИсходныйНомерСтроки", ИсходныйНомерСтроки);
	ДанныеСотрудника.Вставить("ИдентификаторСтрокиСотрудника", ИдентификаторСтрокиСотрудника);
	ДанныеСотрудника.Вставить("РедактируемыйДокументСсылка", РедактируемыйДокументСсылка);
	ДанныеСотрудника.Вставить("ИзменилисьДанныеФизическогоЛица", ИзменилисьДанныеФизическогоЛица);
	ДанныеСотрудника.Вставить("СотрудникУволен", СотрудникУволен);
	
	СведенияОЗаработкеСотрудника = Новый Массив;
	ДанныеСотрудника.Вставить("СведенияОЗаработке", СведенияОЗаработкеСотрудника);
	
	Для Каждого СтрокаСведенийОЗаработке Из СведенияОЗаработке Цикл
		СтруктураПолейСведенияОЗаработке = СтруктураПолейСведенияОЗаработке();
		ЗаполнитьЗначенияСвойств(СтруктураПолейСведенияОЗаработке, СтрокаСведенийОЗаработке);
		СведенияОЗаработкеСотрудника.Добавить(СтруктураПолейСведенияОЗаработке);
	КонецЦикла;	
	
	СведенияОЗаработкеНаВредныхИТяжелыхРаботахСотрудника = Новый Массив;
	ДанныеСотрудника.Вставить("СведенияОЗаработкеНаВредныхИТяжелыхРаботах", СведенияОЗаработкеНаВредныхИТяжелыхРаботахСотрудника);
	
	Для Каждого СтрокаСведенийОЗаработке Из СведенияОЗаработкеНаВредныхИТяжелыхРаботах Цикл
		СтруктураПолейСведенияОЗаработке = СтруктураПолейСведенияОЗаработкеНаВредныхИТяжелыхРаботах();
		ЗаполнитьЗначенияСвойств(СтруктураПолейСведенияОЗаработке, СтрокаСведенийОЗаработке);
		СведенияОЗаработкеНаВредныхИТяжелыхРаботахСотрудника.Добавить(СтруктураПолейСведенияОЗаработке);
	КонецЦикла;	
		
	ЗаписиОСтажеСотрудника = Новый Массив;	
	ДанныеСотрудника.Вставить("ЗаписиОСтаже", ЗаписиОСтажеСотрудника);
	
	ПорядокЗаписей = ПорядокЗаписейСтажа();
	
	Для Каждого ЭлементПорядка Из ПорядокЗаписей Цикл
		СтруктураПолейЗаписиОСтаже = СтруктураПолейЗаписиОСтаже();
		СтрокаЗаписиОСтаже = ЗаписиОСтаже[ЭлементПорядка.ИндексСтроки];
		ЗаполнитьЗначенияСвойств(СтруктураПолейЗаписиОСтаже, СтрокаЗаписиОСтаже);
		ЗаписиОСтажеСотрудника.Добавить(СтруктураПолейЗаписиОСтаже);
	КонецЦикла;	
	
	СтруктураПолейНачисленныхВзносов = СтруктураПолейНачисленныхВзносов();
	ЗаполнитьЗначенияСвойств(СтруктураПолейНачисленныхВзносов, ЭтаФорма);
	ДанныеСотрудника.Вставить("НачисленныеВзносы", Новый Массив);
	ДанныеСотрудника.НачисленныеВзносы.Добавить(СтруктураПолейНачисленныхВзносов);
	
	СтруктураПолейСведенияОбУплаченныхВзносах = СтруктураПолейСведенияОбУплаченныхВзносах();
	ЗаполнитьЗначенияСвойств(СтруктураПолейСведенияОбУплаченныхВзносах, ЭтаФорма);
	ДанныеСотрудника.Вставить("СведенияОбУплаченныхВзносах", Новый Массив);
	ДанныеСотрудника.СведенияОбУплаченныхВзносах.Добавить(СтруктураПолейСведенияОбУплаченныхВзносах);
	
	Ошибки = ЗарплатаКадрыОтображениеОшибок.СообщенияОбОшибкахИзДанныхФормы(ЭтотОбъект);
	
	ДанныеСотрудника.Вставить("Ошибки", Ошибки);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеСотрудника);
	
КонецФункции	

&НаСервере
Функция СтруктураПолейСведенияОЗаработке()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("КодМесяца");
	СтруктураПолей.Вставить("КатегорияЗастрахованныхЛиц");
	СтруктураПолей.Вставить("Заработок");
	СтруктураПолей.Вставить("ОблагаетсяВзносами");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиДоПредельнойВеличины");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиСвышеПредельнойВеличины");
	СтруктураПолей.Вставить("ПоДоговорамГПХДоПредельнойВеличины");
	СтруктураПолей.Вставить("ПоДоговорамГПХСвышеПредельнойВеличины");
	
	Возврат СтруктураПолей;
	
КонецФункции

&НаСервере
Функция СтруктураПолейСведенияОЗаработкеНаВредныхИТяжелыхРаботах()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("КодМесяца");
	СтруктураПолей.Вставить("КлассУсловийТруда");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах");
	
	Возврат СтруктураПолей;
	
КонецФункции

&НаСервере
Функция СтруктураПолейЗаписиОСтаже()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерОсновнойЗаписи");
	СтруктураПолей.Вставить("НомерДополнительнойЗаписи");
	СтруктураПолей.Вставить("ДатаНачалаПериода");
	СтруктураПолей.Вставить("ДатаОкончанияПериода");
	СтруктураПолей.Вставить("ОсобыеУсловияТруда");
	СтруктураПолей.Вставить("КодПозицииСписка");
	СтруктураПолей.Вставить("ОснованиеИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ПервыйПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ВторойПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ТретийПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ОснованиеВыслугиЛет");
	СтруктураПолей.Вставить("ПервыйПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ВторойПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТретийПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТерриториальныеУсловия");
	СтруктураПолей.Вставить("ПараметрТерриториальныхУсловий");

	Возврат СтруктураПолей;
	
КонецФункции

&НаСервере
Функция СтруктураПолейНачисленныхВзносов()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СВпоТарифуНеПревышающие");
	СтруктураПолей.Вставить("Страховая");
	СтруктураПолей.Вставить("Накопительная");
	СтруктураПолей.Вставить("СВстрахователя");
	СтруктураПолей.Вставить("СВизЗаработка");
	СтруктураПолей.Вставить("СВпоТарифу");
	СтруктураПолей.Вставить("СВпоДопТарифу");
	
	Возврат СтруктураПолей;
	
КонецФункции

&НаСервере
Функция СтруктураПолейСведенияОбУплаченныхВзносах()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("УплаченоСтраховая");
	СтруктураПолей.Вставить("УплаченоНакопительная");
	
	Возврат СтруктураПолей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДанныхПоСотруднику(Форма)
	
	СтруктураДанныхПоСотруднику = Новый Структура;
	
	СтруктураДанныхПоСотруднику.Вставить("ФиксНачисленныеВзносы", Форма.ФиксНачисленныеВзносы);
	СтруктураДанныхПоСотруднику.Вставить("ФиксСтаж", Форма.ФиксСтаж);
	СтруктураДанныхПоСотруднику.Вставить("ФиксЗаработок", Форма.ФиксЗаработок);

	ЗаполнитьЗначенияСвойств(СтруктураДанныхПоСотруднику, Форма);
	
	Возврат СтруктураДанныхПоСотруднику;
	
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьИзменившиесяДанныеФизическогоЛица(ДанныеФизическогоЛица)	
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеФизическогоЛица);
	ИзменилисьДанныеФизическогоЛица = Истина;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура СпозиционироватьСтроку(СведенияОЗаработке, СтрокаТаблицы, ИмяПоляГруппировкиСтрок = Неопределено)
	
	СтрокиГруппы = ?(ИмяПоляГруппировкиСтрок = Неопределено, СведенияОЗаработке,
		СведенияОЗаработке.НайтиСтроки(Новый Структура(ИмяПоляГруппировкиСтрок, СтрокаТаблицы[ИмяПоляГруппировкиСтрок])));
		
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.КодМесяца) Тогда 
		Возврат;
	КонецЕсли;
	
	ПорядокМесяцев = ПерсонифицированныйУчетКлиентСервер.ПорядокМесяцевСЗВ_КОРР();
	НомерМесяца = ПорядокМесяцев[СтрокаТаблицы.КодМесяца];
	
	Если НомерМесяца = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НовыйИндексСтроки = СведенияОЗаработке.Индекс(СтрокаТаблицы);
	Для Каждого ОбрабатываемаяСтрока Из СтрокиГруппы Цикл
		НомерМесяцаСтроки = ПорядокМесяцев[ОбрабатываемаяСтрока.КодМесяца];
		Если НомерМесяцаСтроки = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		Если НомерМесяца < НомерМесяцаСтроки И НовыйИндексСтроки > СведенияОЗаработке.Индекс(ОбрабатываемаяСтрока) Тогда
			НовыйИндексСтроки = СведенияОЗаработке.Индекс(ОбрабатываемаяСтрока);
		КонецЕсли;			
	КонецЦикла;	
	
	Если НовыйИндексСтроки <> СведенияОЗаработке.Индекс(СтрокаТаблицы) Тогда
		Сдвиг = НовыйИндексСтроки - СведенияОЗаработке.Индекс(СтрокаТаблицы);	
		СведенияОЗаработке.Сдвинуть(СведенияОЗаработке.Индекс(СтрокаТаблицы), Сдвиг);		
	КонецЕсли;
	
КонецПроцедуры	

#Область МеханизмОтображенияОшибок

&НаКлиенте
Процедура ПоказатьОшибки(ИмяПоляИндикацииОшибки, ПоказыватьТекстОшибки) Экспорт
	ПоказыватьТекстОшибки = Истина;	
КонецПроцедуры	

&НаСервере
Функция ОписаниеЭлементовСИндикациейОшибок() Экспорт
	
	КоллекцияОписанийЭлементов = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементовСИндикациейОшибок();
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ИнфонадписьЗаголовокКарточки";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ОтображатьНепривязанныеОшибки = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Сотрудник";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
			
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Фамилия";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Фамилия";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Имя";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Имя";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
		
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Отчество";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Отчество";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "СтраховойНомерПФР";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "СтраховойНомерПФР";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();	
	ОписаниеЭлемента.ИмяЭлемента = "ЗаписиОСтаже";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "ЗаписиОСтаже";	
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ЗаписиОСтаже";	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();	
	ОписаниеЭлемента.ИмяЭлемента = "СведенияОЗаработке";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "СведенияОЗаработке";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "СведенияОЗаработке";	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();	
	ОписаниеЭлемента.ИмяЭлемента = "СведенияОЗаработкеНаВредныхИТяжелыхРаботах";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "СведенияОЗаработкеНаВредныхИТяжелыхРаботах";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "СведенияОЗаработкеНаВредныхИТяжелыхРаботах";	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	Возврат КоллекцияОписанийЭлементов;
	
КонецФункции	

// Добавление полей заголовков.

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицФормы()
	
	ОписаниеКолонокЗаголовковТаблиц = Новый Соответствие;
	ОписаниеКолонокЗаголовковТаблиц.Вставить("СведенияОЗаработке", ОписаниеКолонокЗаголовковТаблицы("СведенияОЗаработке")); 
	ОписаниеКолонокЗаголовковТаблиц.Вставить("ЗаписиОСтаже", ОписаниеКолонокЗаголовковТаблицы("ЗаписиОСтаже")); 
	
	Возврат ОписаниеКолонокЗаголовковТаблиц;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицыСведенияОЗаработке()
	
	ОписаниеЗаголовковКолонок = Новый Массив;
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СведенияОЗаработкеОблагаетсяВзносамиДоПредельнойВеличины";
	ОписаниеЗаголовка.Заголовок = "";
	ОписаниеЗаголовка.Ширина = 7;
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
		
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СведенияОЗаработкеПоДоговорамГПХДоПредельнойВеличины";
	ОписаниеЗаголовка.Заголовок = "";
	ОписаниеЗаголовка.Ширина = 18;
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СведенияОЗаработкеОблагаетсяВзносамиСвышеПредельнойВеличины";
	ОписаниеЗаголовка.Заголовок = "";
	ОписаниеЗаголовка.Ширина = 7;
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
		
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СведенияОЗаработкеПоДоговорамГПХСвышеПредельнойВеличины";
	ОписаниеЗаголовка.Заголовок = "";
	ОписаниеЗаголовка.Ширина = 18;
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	Возврат ОписаниеЗаголовковКолонок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже()
	
	ОписаниеЗаголовковКолонок = Новый Массив;
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеТерриториальныеУсловия";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеПараметрТерриториальныхУсловий";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеОснованиеИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеТретийПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеОснованиеВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеПервыйПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеВторойПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеТретийПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеПервыйПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеВторойПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	Возврат ОписаниеЗаголовковКолонок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицы(ИмяТаблицы)
	
	Если ИмяТаблицы = "СведенияОЗаработке" Тогда
		ОписаниеКолонок = ОписаниеКолонокЗаголовковТаблицыСведенияОЗаработке();
	ИначеЕсли ИмяТаблицы = "ЗаписиОСтаже" Тогда
		ОписаниеКолонок = ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже();
	КонецЕсли;	
		
	Возврат ОписаниеКолонок;
	
КонецФункции	

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииОшибкиНажатие(Элемент, СтандартнаяОбработка)
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ЭлементИндикацииОшибкиНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииПриАктивизацииЯчейки(Элемент)
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ЭлементИндикацииПриАктивизацииЯчейки(ЭтотОбъект, Элемент);
	
КонецПроцедуры	

&НаСервере
Функция ПорядокЗаписейСтажа()
	
	ВидыСтажаГПХ = Новый Массив;
	
	ВидыСтажаГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР);
	ВидыСтажаГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛАВТ);
	ВидыСтажаГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛДОГ);
	
	ПорядокЗаписейСтажа = Новый ТаблицаЗначений;
	ПорядокЗаписейСтажа.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	ПорядокЗаписейСтажа.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	ОбычныеЗаписиСтажа = Новый Массив;
	
	Для Каждого СтрокаСтажа Из ЗаписиОСтаже Цикл
		Если ВидыСтажаГПХ.Найти(СтрокаСтажа.ТретийПараметрИсчисляемогоСтажа) <> Неопределено Тогда
			ЭлементПорядка = ПорядокЗаписейСтажа.Добавить();
			ЭлементПорядка.ДатаНачала = СтрокаСтажа.ДатаНачалаПериода;
			ЭлементПорядка.ИндексСтроки = ЗаписиОСтаже.Индекс(СтрокаСтажа);
		Иначе
			ОбычныеЗаписиСтажа.Добавить(СтрокаСтажа);	
		КонецЕсли;	
	КонецЦикла;	
	
	ПорядокЗаписейСтажа.Сортировать("ДатаНачала");
	
	Для Каждого СтрокаСтажа Из ОбычныеЗаписиСтажа Цикл
		ЭлементПорядка = ПорядокЗаписейСтажа.Добавить();
		ЭлементПорядка.ИндексСтроки = ЗаписиОСтаже.Индекс(СтрокаСтажа);	
	КонецЦикла;
	
	Возврат ПорядокЗаписейСтажа;
	
КонецФункции	

&НаСервере
Процедура УстановитьСписокВыбораМесяцев()
	
	ПервыйМесяц = Месяц(Период);
	ПоследнийМесяц  = Месяц(ОкончаниеПериода);
	
	Элементы.СведенияОЗаработкеКодМесяца.СписокВыбора.Очистить();
	Элементы.СведенияОЗаработкеНаВредныхИТяжелыхРаботахКодМесяца.СписокВыбора.Очистить();
	
	КодыМесяцев = ПерсонифицированныйУчетКлиентСервер.КодыМесяцевСЗВ_КОРР();
	
	Для Сч = ПервыйМесяц По ПоследнийМесяц Цикл 
		Элементы.СведенияОЗаработкеКодМесяца.СписокВыбора.Добавить(КодыМесяцев[Сч]);
		Элементы.СведенияОЗаработкеНаВредныхИТяжелыхРаботахКодМесяца.СписокВыбора.Добавить(КодыМесяцев[Сч]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораТерриториальныхУсловий()
	
	ПерсонифицированныйУчет.УстановитьПараметрыВыбораТерриториальныхУсловий(Элементы, "ЗаписиОСтажеТерриториальныеУсловия"); 

КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтрольИсправлений() Экспорт
	
	КонтролируемыеПоляСтаж = Новый Массив;
	КонтролируемыеПоляСтаж.Добавить("НомерОсновнойЗаписи");
	КонтролируемыеПоляСтаж.Добавить("НомерДополнительнойЗаписи");
	КонтролируемыеПоляСтаж.Добавить("ДатаНачалаПериода");
	КонтролируемыеПоляСтаж.Добавить("ДатаОкончанияПериода");
	КонтролируемыеПоляСтаж.Добавить("ОсобыеУсловияТруда");
	КонтролируемыеПоляСтаж.Добавить("КодПозицииСписка");
	КонтролируемыеПоляСтаж.Добавить("ОснованиеИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ПервыйПараметрИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ВторойПараметрИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ТретийПараметрИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ОснованиеВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ПервыйПараметрВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ВторойПараметрВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ТретийПараметрВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ТерриториальныеУсловия");
	КонтролируемыеПоляСтаж.Добавить("ПараметрТерриториальныхУсловий");
	
	КонтролируемыеПоляЗаработок = Новый Массив;
	КонтролируемыеПоляЗаработок.Добавить("КодМесяца");
	КонтролируемыеПоляЗаработок.Добавить("Заработок");
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносамиДоПредельнойВеличины");
	КонтролируемыеПоляЗаработок.Добавить("ПоДоговорамГПХДоПредельнойВеличины");
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносамиСвышеПредельнойВеличины");
	КонтролируемыеПоляЗаработок.Добавить("ПоДоговорамГПХСвышеПредельнойВеличины");
	
	КонтролируемыеПоляЗаработокВредный = Новый Массив;
	КонтролируемыеПоляЗаработокВредный.Добавить("КодМесяца");
	КонтролируемыеПоляЗаработокВредный.Добавить("КлассУсловийТруда");
	КонтролируемыеПоляЗаработокВредный.Добавить("ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах");
	КонтролируемыеПоляЗаработокВредный.Добавить("ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах");

	СведенияОКонтролируемыхПолях = Новый Структура;
	
	ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксСтаж", Новый ФиксированныйМассив(КонтролируемыеПоляСтаж));
	СведенияОКонтролируемыхПолях.Вставить("Стаж",  Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));	
	
	ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксЗаработок", Новый ФиксированныйМассив(КонтролируемыеПоляЗаработок));
	СведенияОКонтролируемыхПолях.Вставить("Заработок", Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));
	
	ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксЗаработок", Новый ФиксированныйМассив(КонтролируемыеПоляЗаработокВредный));
	СведенияОКонтролируемыхПолях.Вставить("ФиксЗаработокВредный", Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));
			
	КонтролируемыеПоля = Новый ФиксированнаяСтруктура(СведенияОКонтролируемыхПолях);

КонецПроцедуры	

СтарыеЗначенияКонтролируемыхПолейВзносы = Новый Структура;

СтарыеЗначенияКонтролируемыхПолейСтаж = Новый Структура;

СтарыеЗначенияКонтролируемыхПолейЗаработок = Новый Структура;

#КонецОбласти

#КонецОбласти
