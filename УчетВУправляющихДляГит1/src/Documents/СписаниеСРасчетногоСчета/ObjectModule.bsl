#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ВводНаОсновании        = Ложь;
	ЗаполнитьСодержаниеУСН = Ложь;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("Массив") Тогда
		Если ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк")
			ИЛИ ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
			ЗаполнитьПоВедомостям(ДанныеЗаполнения);
			ВводНаОсновании = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		ВводНаОсновании = Истина;
	ИначеЕсли ЗагрузкаВыпискиПоБанковскомуСчету.ЭтоДанныеБанка(ДанныеЗаполнения) Тогда
		Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ПлатежноеПоручение) Тогда
			ЗаполнитьДаннымиБанка(ДанныеЗаполнения);
			ЗаполнитьСодержаниеУСН = Истина;
		Иначе
			ЗагрузкаВыпискиПоБанковскомуСчету.ЗаполнитьДаннымиБанкаОперация(ЭтотОбъект, ДанныеЗаполнения);
			НеизменяемыеДанные = Новый Структура("СуммаДокумента, НазначениеПлатежа");
			ЗаполнитьЗначенияСвойств(НеизменяемыеДанные, ЭтотОбъект);
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения.ПлатежноеПоручение, СуммаДокумента);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, НеизменяемыеДанные);
			
			// Запомним сумму из платежного поручения на случай, если оплачено частично.
			СуммаПлатежногоПоручения = РасшифровкаПлатежа.Итог("СуммаПлатежа");
			Если СуммаПлатежногоПоручения = 0 Тогда
				СуммаПлатежногоПоручения = СуммаДокумента;
			КонецЕсли;
			
			ЗаполнитьСуммыЧастичноеИсполнение(СуммаПлатежногоПоручения);
			
			ДанныеЗаполнения = ДанныеЗаполнения.ПлатежноеПоручение;
			ВводНаОсновании  = Истина;
			
		КонецЕсли;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И Не ДанныеЗаполнения.Свойство("ДанныеЗаполнения") Тогда
		ЗаполнитьПоСтруктуре(ДанныеЗаполнения);
		ВводНаОсновании = Истина;
	КонецЕсли;
	
	// Заполнение счетов учета вызываем самостоятельно в конце текущей процедуры,
	// когда будут окончательно определены все реквизиты (договор и прочие).
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Ложь);
	
	БезЗакрывающихДокументов = УчетДенежныхСредствБП.БезЗакрывающихДокументов(Организация, Дата, ВидОперации);
	
	Если НЕ Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	//определяем счет банка по валюте
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ОплатаВВалюте = ЗначениеЗаполнено(ВалютаДокумента) И ВалютаДокумента <> ВалютаРегламентированногоУчета;
	
	Если ОплатаВВалюте И НЕ ЗначениеЗаполнено(СчетОрганизации)
		И НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		СтандартнаяОбработка = Ложь;
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Нельзя выполнить оплату в валюте %1, т.к. у организации %2 не задан банковский счет в указанной валюте.'"),
			ВалютаДокумента,
			Организация);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если СтрокаПлатеж.СпособПогашенияЗадолженности.Пустая() Тогда
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
	КонецЦикла;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
	УчетДенежныхСредствБП.ЗаполнитьДоговорКонтрагента(ЭтотОбъект, ДанныеЗаполнения, ОплатаВВалюте);
	
	// Заполняем счета учета по текущим данным объекта.
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ЭтотОбъект);
	
	УчетУСН.ЗаполнитьСписаниеСРасчетногоСчета(ЭтотОбъект, ЗаполнитьСодержаниеУСН);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата                    = ОбщегоНазначения.ТекущаяДатаПользователя();
	Ответственный           = Пользователи.ТекущийПользователь();
	ДокументОснование       = Неопределено;
	НомерВходящегоДокумента = "";
	ДатаВходящегоДокумента  = '00010101';
	НомерЧекаККМ            = 0;
	
	УстановитьСчетПриСнятииНаличных();
	
	УстановитьСчетПриПереводеНаДругойСчет();
	
	ПроверитьОбновитьРеквизитыПлатежаВБюджет(ОбъектКопирования);
	
	НалоговыйУчетУСН.ПриКопированииДокумента(ЭтотОбъект, ОбъектКопирования);
	
	Если ОбъектКопирования.БезЗакрывающихДокументов Тогда
		БезЗакрывающихДокументов = УчетДенежныхСредствБП.БезЗакрывающихДокументов(Организация, Дата, ВидОперации);
	КонецЕсли;
	
	// Все документы по счетам интеграции загружаются из банка.
	// Вручную можно создавать документы только по счетам, для которых не включена интеграция.
	// Поэтому счет интеграции очистим, а интерактивно в документе можно выбрать только счет без интеграции.
	Если ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена()
		И Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияВключена(СчетОрганизации) Тогда
		СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Отключаем проверку реквизитов шапки.
	
	Если НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизации");
		ПроверкаРеквизитовОрганизации.ОбработкаПроверкиЗаполнения(Организация, СчетОрганизации, Ложь, Отказ);
	КонецЕсли;
	
	Если НЕ Документы.СписаниеСРасчетногоСчета.КонтрагентДолженБытьЗаполнен(ВидОперации) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		
		ВалютаСчетаОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетОрганизации, "ВалютаДенежныхСредств");
		ВалютаСчетаКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетКонтрагента, "ВалютаДенежныхСредств");
		
		Если ВалютаСчетаОрганизации <> ВалютаСчетаКонтрагента Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Валюта счета получателя ""%1"" не совпадает с валютой документа ""%2""'"), ВалютаСчетаКонтрагента, ВалютаСчетаОрганизации);
			ТекстОшибкиЗаполнения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Счет получателя'"),,, ТекстСообщения);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиЗаполнения, ЭтотОбъект, "СчетКонтрагента", "Объект", Отказ);
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетКонтрагента");
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		Если Не Справочники.ВидыНалоговИПлатежейВБюджет.ОрганизацияМожетУплачиватьНалог(Налог, Организация) Тогда
			
			ДопустимыйВидОрганизации = ?(ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация),
				НСтр("ru = 'физическими лицами'"),
				НСтр("ru = 'организациями'"));
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выбранный налог (взнос) уплачивается %1'"), ДопустимыйВидОрганизации);
			
			ТекстОшибкиЗаполнения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Налог'"),,, ТекстСообщения);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиЗаполнения, ЭтотОбъект, "Налог", "Объект", Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Налог)
			И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(Налог.ВидНалога)
			И Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить()
			И ПеречислениеНДФЛ.Количество() > 0 
			И ПеречислениеНДФЛ.Итог("Сумма") <> СуммаДокумента Тогда
			
			ШаблонСообщения = НСтр("ru = 'Не совпадают сумма документа и ее расшифровка по сотрудникам'");
			ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "НадписьСуммаДокумента",, Отказ);
			
		КонецЕсли;
		
		Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента
		   И НалоговыйАгентНДС.Количество() = 0 Тогда
		
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Список", "Заполнение",,, НСтр("ru = 'Расшифровка платежа'"),); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, Ссылка, "ПорядокОтраженияБУ",, Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НалоговыйПериод) Тогда
			КорректныйПериод = ОбщегоНазначенияБПСобытия.КорректныйПериодВводаДокументов();
			Если НалоговыйПериод < КорректныйПериод.НачалоКорректногоПериода
				Или НалоговыйПериод > КорректныйПериод.КонецКорректногоПериода Тогда
				ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", НСтр("ru = 'Период'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НалоговыйПериод", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Налог");
		МассивНепроверяемыхРеквизитов.Добавить("ВидНалоговогоОбязательства");
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Налогоплательщик");
	КонецЕсли;
	
	// Заполнение регистрации проверяется при необходимости только в форме документа.
	МассивНепроверяемыхРеквизитов.Добавить("РегистрацияВНалоговомОргане");
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам");
	КонецЕсли;
	
	СообщенияПроверки = Документы.СписаниеСРасчетногоСчета.ПодготовитьСообщенияПроверкиЗаполненияРасшифровкаПлатежа(
		ЭтотОбъект,, Отказ, ПроверяемыеРеквизиты, Ложь); // Счета учета ТЧ РасшифровкиПлатежа проверяются ниже вместе с другими реквизитам документа.
	Документы.СписаниеСРасчетногоСчета.ОбработкаПроверкиЗаполненияПеречислениеЗаработнойПлаты(
		ЭтотОбъект,, Отказ, ПроверяемыеРеквизиты);
	Документы.СписаниеСРасчетногоСчета.ОбработкаПроверкиЗаполненияПеречислениеДепонентов(ЭтотОбъект,, Отказ, ПроверяемыеРеквизиты);
	
	// Отключаем проверку реквизитов, связанных с перечислением заработной платы.
	// Если установлен флаг ручная корректировка - то заполненность полей по заработной плате не проверяем.
	
	Если (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП)
		И НЕ РучнаяКорректировка Тогда
		
		ПроверятьСоответствиеСуммыДокументаИВедомости = Документы.СписаниеСРасчетногоСчета.ПроверятьСоответствиеСуммыДокументаИВедомостиПоЗарплате();
		
		Если НЕ ПроверятьСоответствиеСуммыДокументаИВедомости
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
		ПроверятьСоответствиеСуммыДокументаИВедомости = Ложь;
		
	КонецЕсли;
	
	// Проверка соответствия суммы документа расшифровке платежа.
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		
		Если РасшифровкаПлатежа.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ТекстСообщения = НСтр("ru = 'Не совпадают сумма документа и ее расшифровка'");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ТекстСообщения);
			Если РасшифровкаПлатежа.Количество() > 1 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "НадписьСуммаДокумента",, Отказ);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка соответствия суммы документа и ведомостей на выплату зарплаты.
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		И ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
		
		Если ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадают сумма документа и общая сумма по платежным ведомостям'");
			ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения);
			Если ПеречислениеЗаработнойПлаты.Количество() > 1 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "НадписьСуммаДокумента",, Отказ);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка соответствия суммы документа и ведомости на выплату зарплаты.
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		
		Если ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
			Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(Контрагент) Тогда
				
				Ведомости = Новый Массив;
				Ведомости.Добавить(ПлатежнаяВедомость);
				
				ТаблицаНеоплаченныхВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, Контрагент, Ложь);
				ТаблицаОплаченныхВедомостей   = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, Контрагент, Истина);
				
				Если ТаблицаНеоплаченныхВедомостей.Количество() = 0 И ТаблицаОплаченныхВедомостей.Количество() = 0 Тогда
					
					ШаблонСообщения = НСтр("ru = 'В выбранной ведомости отсутствуют сведения о заработной плате сотрудника %1.'");
					ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Контрагент);
					ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Поле", "Корректность", НСтр("ru = 'Ведомость'"),,, ШаблонСообщения);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПлатежнаяВедомость", "Объект", Отказ);
					
				Иначе
					
					Если ТаблицаОплаченныхВедомостей.Количество() <> 0 Тогда
							ШаблонСообщения = НСтр("ru = 'По текущей ведомости заработная плата сотрудника %1 выплачена ранее.'");
							ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Контрагент);
							
							ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
								"Поле", "Корректность", НСтр("ru = 'Ведомость'"),,, ШаблонСообщения);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПлатежнаяВедомость", "Объект", Отказ);
					Иначе
						СтрокаВедомости = ТаблицаНеоплаченныхВедомостей[0];
						СуммаПоВедомости = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
						
						Если СуммаПоВедомости <> СуммаДокумента Тогда
							ШаблонСообщения = НСтр("ru = 'Не совпадают сумма документа (%1 руб.) и сумма по платежной ведомости (%2 руб.).'");
							ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СуммаДокумента, СуммаПоВедомости);
							
							ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
								"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов
		И (ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно")
		И НЕ ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, , СообщенияПроверки, Ложь);
	
	Документы.СписаниеСРасчетногоСчета.СообщитьРезультатПроверки(
		ЭтотОбъект,
		Отказ,
		СообщенияПроверки,
		Метаданные.Документы.СписаниеСРасчетногоСчета.ТабличныеЧасти.РасшифровкаПлатежа);
	
	// Для отдельных видов операций некоторые счета проверяются вне зависимости от настроек пользователя,
	// кроме режима Интеграции с банком
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		И Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		ПроверяемыеРеквизиты.Добавить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	// Переопределим представление сообщения об ошибке для случая,
	// когда имя и синоним реквизита не соответствуют его роли.
	Сообщили = Новый Массив;
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		Если ПроверяемыеРеквизиты.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено
			И НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет затрат'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "СчетУчетаРасчетовСКонтрагентом", "Объект", Отказ);
			Сообщили.Добавить("СчетУчетаРасчетовСКонтрагентом");
			
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, Сообщили);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.СписаниеСРасчетногоСчета.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаВзаиморасчеты  = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.РасшифровкаПлатежа, ПараметрыПроведения.Реквизиты, Отказ);
	
	ТаблицаСуммовыхРазниц = УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.Реквизиты, Отказ);
	
	// Структура таблиц для отражения в налоговом учете УСН
	ТаблицаВыплатаЗарплаты   = УчетЗарплаты.ПолучитьТаблицуВыплатыЗарплатыДляУСН(ПараметрыПроведения.ПеречислениеЗарплаты);
	ТаблицаВыплатаДепонентов = УчетЗарплаты.ПолучитьТаблицуВыплатыЗарплатыДляУСН(ПараметрыПроведения.ПеречислениеДепонентов);
	
	СтруктураТаблицУСН = Новый Структура;
	СтруктураТаблицУСН.Вставить("ТаблицаРасчетов",          ТаблицаВзаиморасчеты);
	СтруктураТаблицУСН.Вставить("ТаблицаВыплатаЗарплаты",   ТаблицаВыплатаЗарплаты);
	СтруктураТаблицУСН.Вставить("ТаблицаПеречислениеНДФЛ",  ПараметрыПроведения.ПеречислениеНДФЛ);
	СтруктураТаблицУСН.Вставить("ТаблицаВыплатаДепонентов", ТаблицаВыплатаДепонентов);
	
	ТаблицаУплатаТорговогоСбораУСН = УчетУСН.ПодготовитьТаблицуУплатыТорговогоСбораДляРаздела5КУДиР(
		ПараметрыПроведения.РасшифровкаПлатежаПрочее, ПараметрыПроведения.Реквизиты);
	
	// Учет доходов и расходов ИП
	ТаблицыОплатыПоставщикуИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыОплатыПоставщику(
		ТаблицаВзаиморасчеты,
		ПараметрыПроведения.Реквизиты);
	
	ТаблицаОплатыОСиНМА = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОплатыОСиНМА(
		ТаблицыОплатыПоставщикуИП, 
		ПараметрыПроведения.Реквизиты);
	
	ТаблицаУслугИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаУслуг,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты);
	
	СтруктураТаблицМПЗ = Новый Структура("ТаблицаУслуг", ТаблицаУслугИП);
	
	ТаблицыУплатыВзносовФОТИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыУплатыВзносовФОТ(
		ПараметрыПроведения.ПеречислениеНалогаИПТаблица, ПараметрыПроведения.Реквизиты);
	
	ТаблицыВыплатыЗарплатыИП   = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыВыплатыЗарплаты(
		ПараметрыПроведения.ПеречислениеЗарплаты, ПараметрыПроведения.Реквизиты);
	
	ТаблицыВыплатыДепонентовИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыВыплатыЗарплаты(
		ПараметрыПроведения.ПеречислениеДепонентов, ПараметрыПроведения.Реквизиты);
	
	ТаблицыПрочихУдержанийИП   = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыПеречислениеПрочихУдержаний(
		ПараметрыПроведения.РасшифровкаПлатежаПрочее, ПараметрыПроведения.Реквизиты);
		
	ТаблицыУплатаНалогов = Новый Структура("ПеречислениеНалогов, ПеречислениеНДФЛ",
		ПараметрыПроведения.РасшифровкаПлатежаПрочее, ПараметрыПроведения.ПеречислениеНДФЛ);
		
	ТаблицыВыплатаДивидендовФизическомуЛицу = УчетЗарплаты.ПодготовитьТаблицуВыплатаДивидендов(
		ПараметрыПроведения.ВыплатаДивидендов);
		
	Если Не ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОплатыСчетов(
			ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетВзаиморасчетов.СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(ТаблицаСуммовыхРазниц,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияПеречислениеВыплатаЗарплаты(ЭтотОбъект, ПараметрыПроведения.ПеречислениеЗарплаты,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияОплатаПоДоговорамПодряда(ЭтотОбъект, ПараметрыПроведения.ОплатаПоДоговорамПодряда,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияВыплатаДепонентов(ПараметрыПроведения.ПеречислениеДепонентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УставныйКапитал.СформироватьДвиженияВыплатаДивидендов(ПараметрыПроведения.ВыплатаДивидендов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияВыплатаДивидендов(ТаблицыВыплатаДивидендовФизическомуЛицу,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДенежныхСредств.СформироватьДвиженияПрочееСписание(ПараметрыПроведения.РасшифровкаПлатежаПрочее,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияПоНалогамИВзносамСФОТ(ПараметрыПроведения.Реквизиты,
		ТаблицыУплатаНалогов, Движения, Отказ);
	
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчеты, Движения, Отказ);
	
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчеты, Движения, Отказ);
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	УчетУСН.СформироватьДвиженияКУДиРРаздел5(ТаблицаУплатаТорговогоСбораУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	СтатусыДокументов.СформироватьДвиженияОплатаСчетов(
		ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОплатаПоставщику(
		ТаблицыОплатыПоставщикуИП, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеМПЗ(СтруктураТаблицМПЗ,
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаВзаиморасчетов,,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаНДФЛ(
		ПараметрыПроведения.ПеречислениеНалогаИПТаблица,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаВзносовФОТ(
		ТаблицыУплатыВзносовФОТИП.СписокВзносов, ТаблицыУплатыВзносовФОТИП.СписокПереплат,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияВыплатаЗарплаты(
		ТаблицыВыплатыЗарплатыИП.СписокВыплат, ТаблицыВыплатыЗарплатыИП.СписокПереплат,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияВыплатаЗарплаты(
		ТаблицыВыплатыДепонентовИП.СписокВыплат, ТаблицыВыплатыДепонентовИП.СписокПереплат,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПеречислениеПрочихУдержаний(
		ТаблицыПрочихУдержанийИП.СписокОплаченныхРасчетов, ТаблицыПрочихУдержанийИП.СписокОплаченныхУдержаний,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.РегистрацияСведенийОбОплатеОСиНМА(
		ТаблицаОплатыОСиНМА, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкиДвиженийДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Если НЕ ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
			ТаблицаСтатусовСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
	
	// Регистрация в последовательности
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнениеЗадачБухгалтера.ПриЗаписиПлатежа(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Все документы по счетам интеграции загружаются из банка.
	// Удалять интерактивно такие документы запещено.
	Если ПометкаУдаления
		И ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена()
		И Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияВключена(СчетОрганизации) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НеПодтвержденоВыпискойБанка И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимЗаписи    = ?(Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
		ТекстСообщения =
			НСтр("ru = 'Проведение документа возможно только после установки флага ""Подтверждено выпиской банка"". Документ записан без движений'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "НеПодтвержденоВыпискойБанка", "Объект", Ложь);
	КонецЕсли;
	
	// Обновление реквизитов УСН выполняем всегда для учета возможных изменений в учетной политике.
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ЭтотОбъект);
	Если НЕ УчетУСН.СодержаниеУСНРедактируетсяПользователем(ЭтотОбъект) Тогда
		Содержание_УСН = НалоговыйУчетУСН.СодержаниеОперацииДляКУДиР(ПараметрыУСН);
	КонецЕсли;
	НалоговыйУчетУСН.ЗаполнитьДоходыРасходыВсего(ЭтотОбъект, ПараметрыУСН);
	
	// Обновление счета для вида операции СнятиеНаличных выполняем всегда для учета
	// возможных изменений в учетной политике
	УстановитьСчетПриСнятииНаличных();
	
	// Обновление счета для вида операции ПереводНаДругойСчет выполняем всегда для учета
	// возможных изменений в учетной политике
	УстановитьСчетПриПереводеНаДругойСчет();
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		// "Снятие наличных" не может вводится на основании платежного поручения.
		// Если основание платежное поручение, нужно его очистить.
		ДокументОснование = Неопределено;
	КонецЕсли;
	
	ПлатежноеПоручениеОснование = Документы.СписаниеСРасчетногоСчета.НайтиДокументПлатежноеПоручение(
		Ссылка, ДокументОснование, ВидОперации, Проведен);
	Если ЗначениеЗаполнено(ПлатежноеПоручениеОснование) И ТипЗнч(ПлатежноеПоручениеОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		
		ВыпискаПроведена = РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если ВыпискаПроведена Тогда
			
			РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(
				ПлатежноеПоручениеОснование, Перечисления.СостоянияБанковскихДокументов.Оплачено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ВидОперации) И РасшифровкаПлатежа.Количество() > 0 Тогда
		РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(РасшифровкаПлатежа, ЭтотОбъект);
		ДоговорКонтрагента            = РасшифровкаПлатежа[0].ДоговорКонтрагента;
		СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	Иначе
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) И Не ЗначениеЗаполнено(СчетОрганизации)
		И Не Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация)
		И Не ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			СчетОрганизации, Организация,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), Истина);
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	ЗагрузкаВыпискиПоБанковскомуСчету.ПроверитьИзменениеДанныхАвтозаполненияСписание(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет установленные курсы валют документа перед пересчетом сумм.
// Нулевые курсы устанавливаются в 1.
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж)
	
	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);
	
	Если СтрокаПлатеж <> Неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ на основании массива ведомостей на выплату зарплаты.
//
Процедура ЗаполнитьПоВедомостям(ПлатежныеВедомости)
	
	ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
	
	ПлатежнаяВедомость = ПлатежныеВедомости[0];
	ДокументОснование  = ПлатежнаяВедомость;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежнаяВедомость, "Организация");
	Если ПлатежныеВедомости.Количество() = 1 Тогда
		Если ТипЗнч(ПлатежнаяВедомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
			ПодразделениеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежнаяВедомость, "ПодразделениеОрганизации");
		Иначе
			ПодразделениеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежнаяВедомость, "Подразделение");
		КонецЕсли;
	КонецЕсли;
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	
	ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, ПлатежныеВедомости,, Ложь);
	
	ТаблицаВедомостей.Свернуть("Ведомость", "СуммаКВыплате, КомпенсацияЗаЗадержкуЗарплаты");
	Если ТаблицаВедомостей.Количество() = 0 Тогда
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			Если ПлатежныеВедомости.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'По выбранным документам нет сумм к выплате!'");
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 нет сумм к выплате!'"), ПлатежнаяВедомость);
			КонецЕсли;
		Иначе
			Если ПлатежныеВедомости.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Выбранные документы полностью оплачены!'");
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ %1 полностью оплачен!'"), ПлатежнаяВедомость);
			КонецЕсли;
		КонецЕсли;
		
		ВызватьИсключение ТекстСообщения;
	Иначе
		Для каждого СтрокаВедомости Из ТаблицаВедомостей Цикл
			Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
				Если СтрокаВедомости.Ведомость.ВидМестаВыплаты <> Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет
					И СтрокаВедомости.Ведомость.ВидМестаВыплаты <> Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документ %1 оплачивается через кассу!'"), СтрокаВедомости.Ведомость);
					ВызватьИсключение ТекстСообщения;
					
				КонецЕсли;
			КонецЕсли;
			
			ПеречислениеЗаработнойПлаты.Очистить();
			
			СтрокаВедомость = ПеречислениеЗаработнойПлаты.Добавить();
			СтрокаВедомость.Ведомость = СтрокаВедомости.Ведомость;
			СуммаКВыплате = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
			СтрокаВедомость.СуммаПлатежа = СуммаКВыплате;
		КонецЦикла;
	КонецЕсли;
	
	СуммаДокумента = ТаблицаВедомостей.Итог("СуммаКВыплате") + ТаблицаВедомостей.Итог("КомпенсацияЗаЗадержкуЗарплаты");
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание, СуммаКОплате = Неопределено, ДанныеПлПоручение = Неопределено)
	
	// Заполнение реквизитов из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	
	// Валюта документа должна соответствовать валюте банковского счета!
	Если ЗначениеЗаполнено(СчетОрганизации) Тогда
		ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетОрганизации, "ВалютаДенежныхСредств");
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДокументОснование = Основание;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		КурсДокумента      = 1;
		КратностьДокумента = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	ТипЗначенияОснования = ТипЗнч(Основание);
	
	Если ТипЗначенияОснования    = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеНМА")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ВыкупПредметовЛизинга")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
		КонецЕсли;
		
		ВидРасчетовПоДоговору = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента);
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов, УчетАгентскогоНДС");
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента = ДанныеДоговора.ВалютаВзаиморасчетов;
		Иначе
			ВалютаДокумента = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
			И НЕ ЗначениеЗаполнено(ДанныеПлПоручение) И ЗначениеЗаполнено(Основание.БанковскийСчетКонтрагента) Тогда
			СчетКонтрагента = Основание.БанковскийСчетКонтрагента;
		КонецЕсли;
		
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеДоговора.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ТаблицаСуммОснования = Новый ТаблицаЗначений();
			ТаблицаСуммОснования.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
			ТаблицаСуммОснования.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаСуммОснования.Колонки.Добавить("СуммаНДС",     ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
			
			СтрокаТаблицыСумм = ТаблицаСуммОснования.Добавить();
			
			СтрокаТаблицыСумм.СуммаПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаВознаграждения");
			СтрокаТаблицыСумм.СтавкаНДС    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СтавкаНДСВознаграждения");
			СтрокаТаблицыСумм.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения") + Основание.Услуги.Итог("СуммаНДСВознаграждения");
		ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			ТаблицаСуммОснования = СтатусыДокументов.ТаблицаСуммКОплатеВРазрезеСтавокНДС(
				Новый Структура("Основание, ДатаОснования, Организация", Основание, Основание.Дата, Основание.Организация),
				УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание));
			ТаблицаСуммОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		Иначе
			ТаблицаСуммОснования = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			ТаблицаСуммОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			
			Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				
				Если Основание.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах Тогда
					ТаблицаСуммОснования.ЗаполнитьЗначения(0, "СуммаНДС");
					ТаблицаСуммОснования.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), "СтавкаНДС");
					Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "УдержатьВознаграждение") Тогда
						СуммаКоррПлатежа = ТаблицаСуммОснования.Итог("СуммаПлатежа")
							- ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаВознаграждения");
						НоваяКолонкаСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
							СуммаКоррПлатежа, ТаблицаСуммОснования.ВыгрузитьКолонку("СуммаПлатежа"));
						Если НоваяКолонкаСумм <> Неопределено Тогда
							ТаблицаСуммОснования.ЗагрузитьКолонку(НоваяКолонкаСумм, "СуммаПлатежа");
						КонецЕсли;
					КонецЕсли;
					
					Если ДанныеДоговора.УчетАгентскогоНДС Тогда
						СуммаКоррНДС    = ТаблицаСуммОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДС");
						НоваяКолонкаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
							СуммаКоррНДС, ТаблицаСуммОснования.ВыгрузитьКолонку("СуммаПлатежа"));
						Если НоваяКолонкаНДС <> Неопределено Тогда
							ТаблицаСуммОснования.ЗагрузитьКолонку(НоваяКолонкаНДС, "СуммаПлатежа");
						КонецЕсли;
					КонецЕсли;
				Иначе
					ТаблицаСуммОснования.Очистить();
				КонецЕсли;
				
			ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				
				ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Сумма, СуммаНДС, СтавкаНДС, СуммаВключаетНДС");
				
				Если ДанныеОснования.Сумма > 0 ИЛИ ДанныеОснования.СуммаНДС > 0 Тогда
					Если ТаблицаСуммОснования.Количество() = 0 Тогда
						СтрокаТаблицыСумм = ТаблицаСуммОснования.Добавить();
					Иначе
						СтрокаТаблицыСумм = ТаблицаСуммОснования[0];
					КонецЕсли;
					
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + ДанныеОснования.Сумма;
					СтрокаТаблицыСумм.СуммаНДС     = СтрокаТаблицыСумм.СуммаНДС + ДанныеОснования.СуммаНДС;
					Если НЕ ДанныеОснования.СуммаВключаетНДС Тогда
						СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + ДанныеОснования.СуммаНДС;
					КонецЕсли;
				КонецЕсли;
				
				ТаблицаСуммОснования.ЗаполнитьЗначения(ДанныеОснования.СтавкаНДС, "СтавкаНДС");
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Сумма платежа может не совпадать с итогом ТаблицаСуммОснования.
		СуммаПоОснованиям = ТаблицаСуммОснования.Итог("СуммаПлатежа");
		Если ЗначениеЗаполнено(СуммаКОплате) И СуммаКОплате <> СуммаПоОснованиям Тогда
			Если ТаблицаСуммОснования.Количество() = 0 И ЗначениеЗаполнено(ДанныеПлПоручение) Тогда
				// Это ввод на основании платежного поручения, сумма должна быть заполнена.
				СтрокаТаблицы = ТаблицаСуммОснования.Добавить();
				СтрокаТаблицы.СтавкаНДС    = ДанныеПлПоручение.СтавкаНДС;
				СтрокаТаблицы.СуммаНДС     = Окр(СуммаКОплате * ДанныеПлПоручение.СуммаНДС / ДанныеПлПоручение.СуммаДокумента, 2, 1);
				СтрокаТаблицы.СуммаПлатежа = СуммаКОплате;
			ИначеЕсли ТаблицаСуммОснования.Количество() = 1 Тогда
				Если ЗначениеЗаполнено(ДанныеПлПоручение) Тогда
					ТаблицаСуммОснования[0].СуммаНДС     = Окр(СуммаКОплате * ДанныеПлПоручение.СуммаНДС / ДанныеПлПоручение.СуммаДокумента, 2, 1);
					ТаблицаСуммОснования[0].СуммаПлатежа = СуммаКОплате;
				Иначе
					ТаблицаСуммОснования[0].СуммаНДС = Окр(СуммаКОплате * ТаблицаСуммОснования[0].СуммаНДС / ТаблицаСуммОснования[0].СуммаПлатежа, 2, 1);
					ТаблицаСуммОснования[0].СуммаПлатежа = СуммаКОплате;
				КонецЕсли;
			Иначе
				МассивСуммОснований = ТаблицаСуммОснования.ВыгрузитьКолонку("СуммаПлатежа");
				МассивСуммКОплате = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКОплате, МассивСуммОснований);
				Счетчик = 0;
				Для каждого СтрокаОснования Из ТаблицаСуммОснования Цикл
					СтрокаОснования.СуммаНДС = Окр(МассивСуммКОплате[Счетчик] * СтрокаОснования.СуммаНДС / СтрокаОснования.СуммаПлатежа, 2, 1);
					СтрокаОснования.СуммаПлатежа = МассивСуммКОплате[Счетчик];
					Счетчик = Счетчик + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаСуммОснования.Количество() > 0 И ТаблицаПлатежей.Количество() > 0 Тогда
			ТаблицаПлатежей.Очистить();
		КонецЕсли;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаСуммОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,                     "ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,      "КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность, "КратностьВзаиморасчетов");
		
		// При вводе на основании устанавливаем режим распределения оплаты "По документу",
		// кроме ввода на основании отчета комитенту - задолженность перед комитентом образуется другими документами
		// и ввода на основании счета поставщика - данный документ не формирует задолженности перед поставщиком.
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
			ИЛИ НЕ ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.Автоматически, "СпособПогашенияЗадолженности");
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.ПоДокументу,   "СпособПогашенияЗадолженности");
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание, "Сделка");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
				"УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
		Иначе
			ДанныеДоговора = Новый Структура("УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов",
				Ложь, Ложь, Ложь);
		КонецЕсли;
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
			"КурсВзаиморасчетов, КратностьВзаиморасчетов, ВалютаДокумента");
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			Если ДанныеДоговора.УчетАгентскогоНДС Тогда
				СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаПлатежа - СтрокаПлатеж.СуммаНДС;
				СтрокаПлатеж.СуммаНДС     = 0;
				СтрокаПлатеж.СтавкаНДС    = Перечисления.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			СчетНаОплатуПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетНаОплатуПоставщика");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетНаОплатуПоставщика, "СчетНаОплату");
		КонецЕсли;
		
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"), "СуммаВзаиморасчетов");
		
		КурсДокументаОснования      = ДанныеОснования.КурсВзаиморасчетов;
		КратностьДокументаОснования = ДанныеОснования.КратностьВзаиморасчетов;
		
		// Если Списание с расчетного счета вводится на основании Платежного поручения,
		// которое введено на основании Счета (или реализации) в условных единицах,
		// то курс и кратность нужно брать на дату Платежного поручения
		СложныйВводНаОснованииВУЕ = Ложь;
		Если ДанныеДоговора.РасчетыВУсловныхЕдиницах И ДанныеОснования.ВалютаДокумента <> ВалютаРегламентированногоУчета
			И СуммаКОплате <> Неопределено И ЗначениеЗаполнено(ДанныеПлПоручение) Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеОснования.ВалютаДокумента, ДанныеПлПоручение.Дата);
			КурсДокументаОснования      = СтруктураКурса.Курс;
			КратностьДокументаОснования = СтруктураКурса.Кратность;
			СложныйВводНаОснованииВУЕ   = Истина;
		КонецЕсли;
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
			Если ДанныеДоговора.РасчетыВУсловныхЕдиницах Тогда
				КурсВзаиморасчетов      = СтрокаПлатеж.КурсВзаиморасчетов;
				КратностьВзаиморасчетов = СтрокаПлатеж.КратностьВзаиморасчетов;
				Если ДанныеОснования.ВалютаДокумента = ВалютаРегламентированногоУчета ИЛИ СложныйВводНаОснованииВУЕ Тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаПлатеж.СуммаПлатежа,
						ВалютаРегламентированногоУчета, ДанныеДоговора.ВалютаВзаиморасчетов,
						1, КурсДокументаОснования,
						1, КратностьДокументаОснования);
					
					Если СложныйВводНаОснованииВУЕ Тогда
						КурсВзаиморасчетов      = КурсДокументаОснования;
						КратностьВзаиморасчетов = КратностьДокументаОснования;
						СтрокаПлатеж.КурсВзаиморасчетов      = КурсВзаиморасчетов;
						СтрокаПлатеж.КратностьВзаиморасчетов = КратностьВзаиморасчетов;
					Иначе
						СтрокаПлатеж.СуммаНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
							СтрокаПлатеж.СуммаНДС,
							ВалютаРегламентированногоУчета, ДанныеДоговора.ВалютаВзаиморасчетов,
							1, КурсДокументаОснования,
							1, КратностьДокументаОснования);
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ СложныйВводНаОснованииВУЕ Тогда // Сумма платежа уже правильная, пересчитывать не нужно.
					СтрокаПлатеж.СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаПлатеж.СуммаВзаиморасчетов,
						ДанныеДоговора.ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
						КурсВзаиморасчетов, 1,
						КратностьВзаиморасчетов, 1);
					
					// Если счет в валюте, а договор в у.е., то сумму НДС вычисляем заново по ставке НДС из суммы рублевого покрытия.
					// Т.к. если пересчитывать рублевый НДС из его валютного значения получается большая погрешность.
					ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
					СтрокаПлатеж.СуммаНДС = Окр(УчетНДСКлиентСервер.РассчитатьСуммуНДС(
						СтрокаПлатеж.СуммаПлатежа, Истина, ЗначениеСтавкиНДС), 2);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовЗаПосредническиеУслуги"), "СчетУчетаРасчетовСКонтрагентом");
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансамВыданным"), "СчетУчетаРасчетовПоАвансам");
		ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "УдержатьВознаграждение") Тогда
				ТаблицаПлатежей.ЗаполнитьЗначения(
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансам"), "СчетУчетаРасчетовСКонтрагентом");
			КонецЕсли;
			
			ТаблицаПлатежей.ЗагрузитьКолонку(
				ТаблицаПлатежей.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"), "СчетУчетаРасчетовПоАвансам");
		ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание, "СчетНаОплату");
		ИначеЕсли ТипЗначенияОснования <> Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			СчетУчетаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетУчетаРасчетов.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетУчетаРасчетов.СчетУчетаРасчетовПоАвансам,     "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
		НазначениеПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(ЭтотОбъект);
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
			"ВидОперации, Налог, ВидНалоговогоОбязательства, Налогоплательщик, Контрагент, Дата, Номер, СчетКонтрагента, ПоказательПериода, НачислениеДивидендов,
			|НазначениеПлатежа, ДокументОснование, ПеречислениеВБюджет, ПлатежнаяВедомость, СуммаДокумента, ВидПеречисленияВБюджет, ДоговорКонтрагента,
			|КодОКАТО, КодБК, ПоказательОснования, ПоказательТипа, КПППлательщика, СтатьяДвиженияДенежныхСредств, СтавкаНДС, СуммаНДС, СуммаПроцентов");
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		
		ВидОперации             = ДанныеОснования.ВидОперации;
		ДатаВходящегоДокумента  = ДанныеОснования.Дата;
		НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеОснования.Номер, Истина, Истина);
		СчетКонтрагента         = ДанныеОснования.СчетКонтрагента;
		
		Если ЗначениеЗаполнено(ДанныеОснования.ДокументОснование) И НЕ ДанныеОснования.ПеречислениеВБюджет
			И ТипЗнч(ДанныеОснования.ДокументОснование) <> Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			Если ТипЗнч(ДанныеОснования.ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк")
				ИЛИ ТипЗнч(ДанныеОснования.ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
				Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
					ДанныеЗаполнения = Новый Массив;
					ДанныеЗаполнения.Добавить(ДанныеОснования.ДокументОснование);
					ЗаполнитьПоВедомостям(ДанныеЗаполнения);
				Иначе
					ЗаполнитьПоДокументуОснованию(ДанныеОснования.ДокументОснование, ДанныеОснования.СуммаДокумента);
					ПлатежнаяВедомость = ДанныеОснования.ПлатежнаяВедомость;
					СуммаДокумента     = ДанныеОснования.СуммаДокумента;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СуммаКОплате) Тогда
					ЗаполнитьПоДокументуОснованию(ДанныеОснования.ДокументОснование, СуммаКОплате, ДанныеОснования);
				Иначе
					ЗаполнитьПоДокументуОснованию(ДанныеОснования.ДокументОснование, ДанныеОснования.СуммаДокумента, ДанныеОснования);
				КонецЕсли;
			КонецЕсли;
			
			ДокументОснование = Основание;
			
			// установим Назначение платежа и СтатьюДДС из Платежного поручения
			НазначениеПлатежа = СтрЗаменить(ДанныеОснования.НазначениеПлатежа, Символы.ПС, " ");
			СтатьяДвиженияДенежныхСредств = ДанныеОснования.СтатьяДвиженияДенежныхСредств;
			КоличествоСтрокРасшифровки = РасшифровкаПлатежа.Количество();
			Если КоличествоСтрокРасшифровки > 0 Тогда
				МассивДДС = Новый Массив;
				Для сч = 1 По КоличествоСтрокРасшифровки Цикл
					МассивДДС.Добавить(СтатьяДвиженияДенежныхСредств);
				КонецЦикла;
				
				РасшифровкаПлатежа.ЗагрузитьКолонку(МассивДДС, "СтатьяДвиженияДенежныхСредств");
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		Если ДанныеОснования.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
			Налогоплательщик = ДанныеОснования.Налогоплательщик;
		КонецЕсли;
		
		НазначениеПлатежа             = СтрЗаменить(ДанныеОснования.НазначениеПлатежа, Символы.ПС, " ");
		СтатьяДвиженияДенежныхСредств = ДанныеОснования.СтатьяДвиженияДенежныхСредств;
		
		РасшифровкаПлатежа.Очистить();
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
			
			СуммаДокумента     = ДанныеОснования.СуммаДокумента;
			ПлатежнаяВедомость = ДанныеОснования.ПлатежнаяВедомость;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
			
			СуммаДокумента = ДанныеОснования.СуммаДокумента;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			
			Налог = ДанныеОснования.Налог;
			ВидНалоговогоОбязательства = ДанныеОснования.ВидНалоговогоОбязательства;
			
			СчетУчетаРасчетовСКонтрагентом = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ДанныеОснования.Дата);
			
			АналитикаРасчетов = Документы.СписаниеСРасчетногоСчета.ДанныеЗаполненияАналитикиНаСчетеРасчетовСБюджетом(
				СчетУчетаРасчетовСКонтрагентом,
				Организация,
				Контрагент,
				ДанныеОснования.КодОКАТО, // КодТерритории (ОКАТО/ОКТМО)
				ДанныеОснования.КПППлательщика,
				ДанныеОснования.КодБК,
				ДанныеОснования.ПоказательОснования,
				ДанныеОснования.ПоказательТипа,
				ДанныеОснования.ВидНалоговогоОбязательства);
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, АналитикаРасчетов);
			
			Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НДФЛ
				И БухгалтерскийУчетПереопределяемый.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций() Тогда
				Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
					Если Справочники.Организации.КППНаДату(Организация, ДанныеОснования.Дата) <> ДанныеОснования.КПППлательщика Тогда
						РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиПоКПП(
							Организация, ДанныеОснования.КПППлательщика);
					КонецЕсли;
				Иначе
					Если Справочники.Организации.КодПоОКТМОНаДату(Организация, ДанныеОснования.Дата) <> ДанныеОснования.КодОКАТО Тогда
						РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиПоКодуТерритории(
							Организация, ДанныеОснования.КодОКАТО);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(ДанныеОснования.ПоказательПериода);
			Если ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() Тогда
				НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(ДанныеОснования.Дата, -1));
			Иначе
				НалоговыйПериод = ОписаниеПериода.Дата;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Налог) Тогда
				ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
				Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ВидНалога) Тогда
					НалоговыйПериод = НачалоГода(НалоговыйПериод);
				ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНалогУСН(ВидНалога) Тогда
					НалоговыйПериод = УчетУСН.НалоговыйПериодПоДаннымПлатежногоДокумента(
						ОписаниеПериода,
						ДанныеОснования.Дата,
						Организация);
				КонецЕсли;
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")
				И ЗначениеЗаполнено(ДанныеОснования.НачислениеДивидендов)
				И ЗначениеЗаполнено(Налог)
				И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога")) Тогда
				
				НачислениеДивидендов = ДанныеОснования.НачислениеДивидендов;
				
				РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НачислениеДивидендов, "Дата, Учредитель, СуммаНалога");
				ТекущаяСтрока = ПеречислениеНДФЛ.Добавить();
				ТекущаяСтрока.ФизическоеЛицо        = РеквизитыДокумента.Учредитель;
				ТекущаяСтрока.Сумма                 = РеквизитыДокумента.СуммаНалога;
				ТекущаяСтрока.ИсчисленоПоДивидендам = Истина;
				ТекущаяСтрока.Ставка                = УчетЗарплаты.СтавкаНДФЛДивиденды(РеквизитыДокумента.Дата);
			КонецЕсли;
			
			СуммаДокумента  = ДанныеОснования.СуммаДокумента;
			
		Иначе
			
			ВалютаДокумента = ВалютаРегламентированногоУчета;
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				Если ДанныеДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета И НЕ ДанныеДоговора.РасчетыВУсловныхЕдиницах Тогда
					ВалютаДокумента = ДанныеДоговора.ВалютаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ДанныеОснования.СтатьяДвиженияДенежныхСредств;
			СтрокаПлатеж.СуммаПлатежа = ДанныеОснования.СуммаДокумента;
			СтрокаПлатеж.СтавкаНДС    = ДанныеОснования.СтавкаНДС;
			СтрокаПлатеж.СуммаНДС     = ДанныеОснования.СуммаНДС;
			
			СписокВидовДоговора = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
			ПараметрыПлатежа = Новый Структура("ОплатаВВалюте", Новый Структура("ЗначениеОтбора", Ложь));
			Если ДанныеОснования.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
				РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
					ДоговорКонтрагента, Налогоплательщик, Организация, СписокВидовДоговора, ПараметрыПлатежа);
			Иначе
				РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
					ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговора, ПараметрыПлатежа);
			КонецЕсли;
			
			СтрокаПлатеж.ДоговорКонтрагента      = ДоговорКонтрагента;
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			СтруктураКурсаВзаиморасчетов         = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				?(ЗначениеЗаполнено(ДанныеДоговора.ВалютаВзаиморасчетов), ДанныеДоговора.ВалютаВзаиморасчетов, ВалютаДокумента), Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
				И ДанныеОснования.ПеречислениеВБюджет Тогда
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчетаРасчетовПоКБК(
					ДанныеОснования.КодБК);
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
				ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита Тогда
				СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
				СтрокаПлатеж.СуммаНДС  = 0;
				
				Если ДанныеОснования.СуммаПроцентов = 0 Тогда
					СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;
					СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию("ПогашениеДолга");
				ИначеЕсли ДанныеОснования.СуммаДокумента = ДанныеОснования.СуммаПроцентов Тогда
					СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов;
					СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию("УплатаПроцентов");
				Иначе
					СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;
					СтрокаПлатеж.СуммаПлатежа = ДанныеОснования.СуммаДокумента - ДанныеОснования.СуммаПроцентов;
					СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию("ПогашениеДолга");
					
					СтрокаПроцентов = РасшифровкаПлатежа.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПроцентов, СтрокаПлатеж);
					СтрокаПроцентов.СуммаПлатежа = ДанныеОснования.СуммаПроцентов;
					СтрокаПроцентов.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов;
					СтрокаПроцентов.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию("УплатаПроцентов");
					
					СтрокаПроцентов.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаПроцентов.СуммаПлатежа,
						ВалютаДокумента, ДанныеДоговора.ВалютаВзаиморасчетов,
						КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
						КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
				КонецЕсли;
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
				
				СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
					Организация, Налогоплательщик, СтрокаПлатеж.ДоговорКонтрагента);
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
				
			КонецЕсли;
			
			СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаПлатеж.СуммаПлатежа,
				ВалютаДокумента, ДанныеДоговора.ВалютаВзаиморасчетов,
				КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
				КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
			
		КонецЕсли;
		
		Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
			Если ЗначениеЗаполнено(ДанныеОснования.СчетКонтрагента) Тогда
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОснования.СчетКонтрагента, "Владелец") <> ДанныеОснования.Контрагент Тогда
					СчетКонтрагента = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу;
		Контрагент  = Основание.ФизЛицо;
		
		ШаблонНазначенияПлатежа = НСтр("ru = 'Перечисление перерасхода по авансовому отчету %1 от %2'");
		НазначениеПлатежа       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНазначенияПлатежа,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Основание.Номер, Истина, Ложь),
			Формат(Основание.Дата, "ДЛФ=D"));
		
		СуммаАванса      = Документы.АвансовыйОтчет.ПолучитьСуммуВыданныхАвансов(Основание);
		ПерерасходАванса = Макс(0, Основание.СуммаДокумента - СуммаАванса);
		СуммаДокумента   = ПерерасходАванса;
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетОператораСистемыПлатон") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		
		СчетУчетаРасчетовСКонтрагентом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовСКонтрагентом");
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
		НоваяСтрока.СуммаПлатежа = Основание.ТранспортныеСредства.Итог("Сумма");
		НоваяСтрока.КурсВзаиморасчетов = 1;
		НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.СуммаПлатежа;
		НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
		НоваяСтрока.КратностьВзаиморасчетов = 1;
		
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		НазначениеПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(ЭтотОбъект);
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.НачислениеДивидендов") Тогда
		
		ВалютаДокумента      = ВалютаРегламентированногоУчета;
		ВидОперации          = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов;
		Контрагент           = Основание.Учредитель;
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетКонтрагента, Контрагент, ВалютаДокумента);
		СуммаДокумента       = Основание.СуммаДохода - Основание.СуммаНалога;
		НачислениеДивидендов = Основание;
		НазначениеПлатежа    = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(ЭтотОбъект);
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		ЗаполнитьПоПоступлениюНаРасчетныйСчет();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюНаРасчетныйСчет()
	
	ВидОперацииДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ВидОперации");
	Если ВидОперацииДокументаОснования = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "ВалютаДокумента, Дата, Контрагент,РасшифровкаПлатежа");
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеОснования.ВалютаДокумента, Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаОснования = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеОснования.ВалютаДокумента, ДанныеОснования.Дата);
		КурсОснования      = СтруктураКурсаОснования.Курс;
		КратностьОснования = СтруктураКурсаОснования.Кратность;
		
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
		Контрагент  = ДанныеОснования.Контрагент;
		
		Если ПолучитьФункциональнуюОпцию("ИспользуетсяНалогНаПрофессиональныйДоход") Тогда
		
			СведенияОЧекеНПД = РегистрыСведений.ЧекиНПД.СведенияОЧеке(ДокументОснование);
		
			Если ЗначениеЗаполнено(СведенияОЧекеНПД) Тогда
				НомерЧекаНПД = СведенияОЧекеНПД.НомерЧека;
			КонецЕсли;
		
		КонецЕсли;
		
		РасшифровкаПлатежаДокументаОснования = ДанныеОснования.РасшифровкаПлатежа.Выгрузить();
		
		Для каждого СтрокаОснование Из РасшифровкаПлатежаДокументаОснования Цикл
			
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.ДоговорКонтрагента      = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов"), Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			СтрокаПлатеж.СуммаПлатежа = СтрокаОснование.СуммаПлатежа;
			
			// При вводе на основании устанавливаем режим распределения оплаты "По документу"
			Если ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
				СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу;
				СтрокаПлатеж.Сделка = ДокументОснование;
			Иначе
				СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			КонецЕсли;
			
			СтрокаПлатеж.СтавкаНДС = СтрокаОснование.СтавкаНДС;
			
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СтрокаОснование.СчетУчетаРасчетовПоАвансам;
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СтрокаОснование.СчетУчетаРасчетовСКонтрагентом;
			
		КонецЦикла;
		
		Для Индекс = 0 По РасшифровкаПлатежаДокументаОснования.Количество() - 1 Цикл
			СтрокаПлатеж    = РасшифровкаПлатежа[Индекс];
			СтрокаОснование = РасшифровкаПлатежаДокументаОснования[Индекс];
			ВалютаВзаиморасчетовДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОснование.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
			Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
				И СтрокаПлатеж.ДоговорКонтрагента = СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания
				
				СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа,
					ДанныеОснования.ВалютаДокумента, ВалютаВзаиморасчетовДоговора,
					КурсОснования, СтрокаОснование.КурсВзаиморасчетов,
					КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);
				
				СтрокаПлатеж.СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
					ВалютаВзаиморасчетовДоговора, ВалютаДокумента,
					СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
					СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
			Иначе
				Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовДоговора) Тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов  = 1;
					СтрокаПлатеж.КратностьВзаиморасчетов = 1;
				Иначе
					СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
						ВалютаДокумента, ВалютаВзаиморасчетовДоговора,
						КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
						КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
				КонецЕсли;
			КонецЕсли;
			
			ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
			СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
		КонецЦикла;
		
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Иначе
		// Документ НЕ вводится на основании поступления на расчетный счет с другими видами операций
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСчетПриСнятииНаличных()
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
		ИспользоватьПереводыВПути = УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Организация, Дата);
		ТребуетсяЗаполнение = Ложь;
		Если ИспользоватьПереводыВПути Тогда
			Если СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПереводыВПути
				И СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПереводыВПутиВал Тогда
				ТребуетсяЗаполнение = Истина;
			КонецЕсли;
		Иначе
			Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчетаРасчетовСКонтрагентом, ПланыСчетов.Хозрасчетный.Касса) Тогда
				ТребуетсяЗаполнение = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ТребуетсяЗаполнение Тогда
			Отбор = Новый Структура("РеквизитыПолноеИмя", Новый Соответствие);
			Отбор.РеквизитыПолноеИмя.Вставить("СчетУчетаРасчетовСКонтрагентом", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("СубконтоДт1", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("СубконтоДт2", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("СубконтоДт3", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("ПодразделениеДт", Истина);
			СчетаУчетаВДокументах.Заполнить(ЭтотОбъект, Отбор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСчетПриПереводеНаДругойСчет()
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		ИспользоватьПереводыВПути = УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Организация, Дата);
		ТребуетсяЗаполнение = Ложь;
		Если ИспользоватьПереводыВПути Тогда
			Если СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПереводыВПути
				И СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПереводыВПутиВал Тогда
				ТребуетсяЗаполнение = Истина;
			КонецЕсли;
		Иначе
			СчетаБанка = СписаниеСРасчетногоСчетаФормы.СчетаБанка(ЭтотОбъект);
			Если СчетаБанка.Найти(СчетУчетаРасчетовСКонтрагентом) = Неопределено Тогда
				ТребуетсяЗаполнение = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ТребуетсяЗаполнение Тогда
			Отбор = Новый Структура("РеквизитыПолноеИмя", Новый Соответствие);
			Отбор.РеквизитыПолноеИмя.Вставить("СчетУчетаРасчетовСКонтрагентом", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("СубконтоДт1", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("СубконтоДт2", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("СубконтоДт3", Истина);
			СчетаУчетаВДокументах.Заполнить(ЭтотОбъект, Отбор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиБанка(ДанныеЗаполнения)
	
	НеПодтвержденоВыпискойБанка = Ложь;
	
	ЗагрузкаВыпискиПоБанковскомуСчету.НачатьЗаполнениеДаннымиБанка(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация <> Неопределено Тогда
		
		// Реквизиты, заполнение которых зависит от вида операции.
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			ЗагрузкаВыпискиПоБанковскомуСчету.ЗаполнитьРеквизит(ЭтотОбъект, "Налог", ДанныеЗаполнения.ХозяйственнаяОперация);
			ЗагрузкаВыпискиПоБанковскомуСчету.ЗаполнитьРеквизит(ЭтотОбъект, "ВидНалоговогоОбязательства", ДанныеЗаполнения.ХозяйственнаяОперация);
			ЗагрузкаВыпискиПоБанковскомуСчету.ЗаполнитьРеквизит(ЭтотОбъект, "НалоговыйПериод", ДанныеЗаполнения.ХозяйственнаяОперация);
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
			ЗагрузкаВыпискиПоБанковскомуСчету.ЗаполнитьРеквизит(ЭтотОбъект, "СчетУчетаРасчетовСКонтрагентом", ДанныеЗаполнения.ХозяйственнаяОперация, "СчетДт");
			ЗагрузкаВыпискиПоБанковскомуСчету.ЗаполнитьРеквизит(ЭтотОбъект, "ПодразделениеДт",                ДанныеЗаполнения.ХозяйственнаяОперация);
			
			// СубконтоДт1, СубконтоДт2, СубконтоДт3.
			Если ДанныеЗаполнения.ХозяйственнаяОперация <> Неопределено 
				И ДанныеЗаполнения.ХозяйственнаяОперация.Свойство("СубконтоДт")
				И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
				
				Для Каждого ОписаниеВидаСубконто Из СчетУчетаРасчетовСКонтрагентом.ВидыСубконто Цикл
					НомерСубконто    = СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Индекс(ОписаниеВидаСубконто) + 1;
					ЗначениеСубконто = ДанныеЗаполнения.ХозяйственнаяОперация.СубконтоДт[ОписаниеВидаСубконто.ВидСубконто];
					ЭтотОбъект["СубконтоДт" + НомерСубконто] = ЗначениеСубконто;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗагрузкаВыпискиПоБанковскомуСчету.ЗавершитьЗаполнениеДаннымиБанка(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьСуммыЧастичноеИсполнение(СуммаПлатежногоПоручения)
	
	Если СуммаДокумента = СуммаПлатежногоПоручения Или СуммаПлатежногоПоручения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Платежное поручение может быть оплачено частично.
	// В этом случае пересчитаем сумму в табличной части.
	// Это возможно, только когда в расшифровке только одна запись.
	Если РасшифровкаПлатежа.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициент = СуммаДокумента / СуммаПлатежногоПоручения;
	
	РасшифровкаПлатежа[0].СуммаПлатежа        = СуммаДокумента;
	РасшифровкаПлатежа[0].СуммаВзаиморасчетов = РасшифровкаПлатежа[0].СуммаВзаиморасчетов * Коэффициент;
	РасшифровкаПлатежа[0].СуммаНДС            = РасшифровкаПлатежа[0].СуммаНДС            * Коэффициент;
	
КонецПроцедуры

Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		Если ДанныеЗаполнения.Свойство("СчетУчета")
			И ДанныеЗаполнения.Свойство("Субконто1")
			И ДанныеЗаполнения.Свойство("Субконто2")
			И ДанныеЗаполнения.Свойство("Субконто3") Тогда
			
			СчетУчетаРасчетовСКонтрагентом = ДанныеЗаполнения.СчетУчета;
			СубконтоДт1 = ДанныеЗаполнения.Субконто1;
			СубконтоДт2 = ДанныеЗаполнения.Субконто2;
			СубконтоДт3 = ДанныеЗаполнения.Субконто3;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			
			ВидИКодГосударственногоОргана = ДанныеГосударственныхОрганов.ВидИКодГосударственногоОрганаПоНалогу(
				Налог, Организация, Дата);
			ПолучательПлатежа = Документы.ПлатежноеПоручение.ПолучательДляПлатежаГосударственномуОргану(
				ВидИКодГосударственногоОргана.Вид, ВидИКодГосударственногоОргана.Код);
			
			Контрагент      = ПолучательПлатежа.Контрагент;
			СчетКонтрагента = ПолучательПлатежа.БанковскийСчет;
			
		КонецЕсли;
		
		// Если в данных заполнения передан Налоговый период, то задаем период платежа.
		Если ДанныеЗаполнения.Свойство("НалоговыйПериод") И ЗначениеЗаполнено(ДанныеЗаполнения.НалоговыйПериод) Тогда
			НалоговыйПериод = ДанныеЗаполнения.НалоговыйПериод;
		ИначеЕсли ДанныеЗаполнения.Свойство("ВидНалога") Тогда
			Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ДанныеЗаполнения.ВидНалога) Тогда
				НалоговыйПериод = НачалоГода(Дата);
			ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНалогУСН(ДанныеЗаполнения.ВидНалога) Тогда
				НалоговыйПериод = УчетУСН.РелевантныйПериодНалоговогоПлатежа(Дата, Организация);
			КонецЕсли;
		Иначе
			НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(Дата, -1));
		КонецЕсли;
		
		ИсточникДанныхКонтекста
			= Документы.СписаниеСРасчетногоСчета.ИсточникДанныхКонтекстаПлатежногоДокумента(ЭтотОбъект);
		
		ДанныеЗаполнения.Свойство("ВидНалоговогоОбязательства", ИсточникДанныхКонтекста.ВидНалоговогоОбязательства);
		Если Не ЗначениеЗаполнено(ИсточникДанныхКонтекста.ВидНалоговогоОбязательства) Тогда
			ИсточникДанныхКонтекста.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		КонецЕсли;
		
		РеквизитыОбъекта = ПлатежиВБюджетКлиентСерверПереопределяемый.НовыеРеквизитыПлатежаВБюджет(ЭтотОбъект);
		Документы.СписаниеСРасчетногоСчета.ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(
			РеквизитыОбъекта, ИсточникДанныхКонтекста, ДанныеЗаполнения);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьОбновитьРеквизитыПлатежаВБюджет(ОбъектКопирования)
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ НЕ ЗначениеЗаполнено(Налог) ИЛИ Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(Дата) Тогда
		Возврат;
	КонецЕсли;
	
	НеактуальныеНалоги = ПлатежиВБюджетКлиентСерверПереопределяемый.НеактуальныеНалоги(Дата);
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
	Если НеактуальныеНалоги[ВидНалога] <> Неопределено Тогда
		Если НеактуальныеНалоги[ВидНалога].Свойство("АктуальныйНалог") Тогда
			АктуальныйНалог = НеактуальныеНалоги[ВидНалога].АктуальныйНалог;
			Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(АктуальныйНалог);
		Иначе
			Если НЕ Справочники.ВидыНалоговИПлатежейВБюджет.РеквизитыАктуальны(Налог, Дата) Тогда
				Справочники.ВидыНалоговИПлатежейВБюджет.ОбновитьПоставляемыеДанныеИзКлассификатора();
			КонецЕсли;
			
			Получатель = ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(Налог, Организация, Дата);
			Если Контрагент <> Получатель Тогда
				Контрагент = Получатель;
				УчетДенежныхСредствБП.УстановитьБанковскийСчет(
					СчетКонтрагента, Контрагент, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли