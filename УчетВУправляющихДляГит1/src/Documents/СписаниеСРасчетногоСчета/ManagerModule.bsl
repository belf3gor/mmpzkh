#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 18, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// учет безналичных денег
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетБанк", "БезналичныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетОрганизации", "СчетОрганизации");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "БезналичныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПереводНаДругойСчет");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ИспользоватьПереводыВПути");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СчетБанк");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "БанковскийСчет", "СчетКонтрагента");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеДт", "ПодразделениеБанковскогоСчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "БанковскийСчет", "СчетКонтрагента");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "ПереводыВПути");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПереводНаДругойСчет");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ИспользоватьПереводыВПути");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеДт", "ПодразделениеБанковскогоСчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "БанковскийСчет", "СчетКонтрагента");
	
	// учет расчетов
	// - оплата задолженности 
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаПоставщику");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПогашатьЗадолженность");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику", Ложь);
	
	// - только аванс
	// -- расчеты с обычным поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику", Ложь);
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПогашатьЗадолженность");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаПоставщику");
	
	// - расчеты с покупателем
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратПокупателю");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя", Ложь);
	
	// - возврат займа
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "ПолученныеЗаймы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",         "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВидПлатежаПоКредитамЗаймам", "ВидПлатежаПоКредитамЗаймам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратЗайма");
	
	// - возврат кредита
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "ПолученныеКредиты");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",         "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВидПлатежаПоКредитамЗаймам", "ВидПлатежаПоКредитамЗаймам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратКредита");
	
	// - выдача займа контрагенту
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "ПредоставленныеЗаймы");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВыдачаЗаймаКонтрагенту");
	
	// - снятие наличных
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "НаличныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "СнятиеНаличных");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ИспользоватьПереводыВПути");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "ПереводыВПути");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "СнятиеНаличных");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ИспользоватьПереводыВПути");
	
	// - прочие расчеты
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПрочиеРасчетыСКонтрагентами");
	
	// - перечисление налога за третьих лиц
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыДругие");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхЗаполнения(Правила,      "Контрагент",         "Налогоплательщик");   // Из шапки
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента"); // Из списка
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПеречислениеНалогаЗаТретьихЛиц");
	
	// компенсация за задержку зарплаты
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПеречислениеЗаработнойПлатыРаботнику");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт1",     "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт2",     "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт3",     "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеДт", "ПодразделениеЗатрат");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПеречислениеЗП");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт1",     "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт2",     "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт3",     "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеДт", "ПодразделениеЗатрат");
	
	// уплата налога
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "Налоги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПеречислениеНалога");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Налог", "Налог");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВидНалоговогоОбязательства", "ВидНалоговогоОбязательства");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент", "Контрагент");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт1", "СубконтоНалогов1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт2", "СубконтоНалогов2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт3", "СубконтоНалогов3");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт1", "СубконтоРегистрацияВНалоговомОргане1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт2", "СубконтоРегистрацияВНалоговомОргане2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт3", "СубконтоРегистрацияВНалоговомОргане3");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "КПППлательщика", "РеквизитыКонтрагента");
	
	// комиссия банка
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасходыУслугиБанка");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "КомиссияБанка");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт1", "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт2", "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт3", "СубконтоЗатрат3");
	
	// общие
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Налогоплательщик");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СчетОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СчетКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ВалютаДокумента");
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, ИмяВидаОперации, "ВидОперации");
	КонецЦикла;
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(
		Правила,
		"ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты",
		"ВидОперации, Организация, Ссылка, ПеречислениеЗаработнойПлаты, ПлатежнаяВедомость, Контрагент");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		Если ДанныеЗаполнения.Свойство(ИмяВидаОперации) Тогда
			ДанныеЗаполнения[ИмяВидаОперации] = ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств[ИмяВидаОперации];
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.Свойство("ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты") Тогда
		
		Ведомости      = Неопределено;
		ФизическоеЛицо = Неопределено;
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ПлатежнаяВедомость) Тогда
				Ведомости  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаполнения.ПлатежнаяВедомость);
			КонецЕсли;
			ФизическоеЛицо = ДанныеЗаполнения.Контрагент;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
			Ведомости      = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеЗаполнения.ПеречислениеЗаработнойПлаты, "Ведомость");
		КонецЕсли;
		
		Если Ведомости = Неопределено Или Ведомости.Количество() = 0 Тогда
			ВыплачиватьКомпенсацию = Ложь;
		Иначе
			ВыплачиватьКомпенсацию = УчетЗарплаты.ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты(
				ДанныеЗаполнения.Организация,
				ДанныеЗаполнения.Ссылка,
				Ведомости,
				ФизическоеЛицо);
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты", ВыплачиватьКомпенсацию);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("КПППлательщика") И ДанныеЗаполнения.РеквизитыКонтрагента <> Неопределено Тогда
		Для каждого СтрокаРеквизитов Из ДанныеЗаполнения.РеквизитыКонтрагента Цикл
			Если СтрокаРеквизитов.Реквизит = "КПППлательщика" Тогда
				ДанныеЗаполнения.КПППлательщика = СтрокаРеквизитов.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыОперацийСчетаУчета()
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить("ОплатаПоставщику");                    // счет расчетов и счет авансов в списке
	ВидыОпераций.Добавить("ВозвратПокупателю");                   // счет расчетов и счет авансов в списке
	ВидыОпераций.Добавить("ПрочиеРасчетыСКонтрагентами");         // один счет в списке
	ВидыОпераций.Добавить("ПеречислениеНалогаЗаТретьихЛиц");      // один счет в списке
	ВидыОпераций.Добавить("ПереводНаДругойСчет");                 // один счет в шапке
	ВидыОпераций.Добавить("СнятиеНаличных");                      // один счет в шапке
	ВидыОпераций.Добавить("ПеречислениеЗП");                      // счет и аналитика затрат
	ВидыОпераций.Добавить("ПеречислениеЗаработнойПлатыРаботнику");// счет и аналитика затрат
	ВидыОпераций.Добавить("ПеречислениеНалога");                  // счет учета и аналитика
	
	ВидыОпераций.Добавить("ВозвратЗайма");
	ВидыОпераций.Добавить("ВозвратКредита");
	ВидыОпераций.Добавить("ВыдачаЗаймаКонтрагенту");
	
	ВидыОпераций.Добавить("ПрочееСписание");
	ВидыОпераций.Добавить("КомиссияБанка");
	
	Возврат Новый ФиксированныйМассив(ВидыОпераций);
	
КонецФункции

#КонецОбласти

// Вызывается документом СчетФактураВыданный (налоговый агент) при вводе на основании
//
Функция ТекстЗапросаСчетФактураВыданныйНалоговыйАгентРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДокумента.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс КАК Номенклатура,
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	СУММА(ТаблицаДокумента.СуммаПлатежа) КАК СуммаБезНДС
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// Вызывается документом СчетФактураВыданный на аванс при вводе на основании
//
Функция ТекстЗапросаСчетФактураПолученныйНаАвансРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.СуммаПлатежа) КАК Сумма,
	|	СУММА(ТаблицаДокумента.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам,
	|	ТаблицаДокумента.СтавкаНДС";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция НайтиДокументПлатежноеПоручение(ДокументСсылка, ДокументОснование, ВидОперации, Проведен = Ложь, НаименованиеДокумента = "") Экспорт
	Перем НайденныйДокумент;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		НаименованиеДокумента = НСтр("ru = 'Платежное поручение не требуется'");
		Возврат Документы.ПлатежноеПоручение.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Номер, Дата");
		СтрокаДокумент = УчетДенежныхСредствКлиентСервер.НомерОбъектаБезПрефикса(ПараметрыДокумента.Номер);
		НаименованиеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Платежное поручение № %1 от %2'"),
			СтрокаДокумент,
			Формат(ПараметрыДокумента.Дата, "ДЛФ=D"));
		
		Возврат ДокументОснование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		НаименованиеДокумента = НСтр("ru = 'Ввести платежное поручение'");
		Возврат НайденныйДокумент;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПлатежноеПоручение.Ссылка КАК Ссылка,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.Дата КАК Дата
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.ДокументОснование = &ДокументСсылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НайденныйДокумент = Выборка.Ссылка;
		СтрокаДокумент = УчетДенежныхСредствКлиентСервер.НомерОбъектаБезПрефикса(Выборка.Номер);
		НаименованиеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Платежное поручение № %1 от %2'"),
			СтрокаДокумент,
			Формат(Выборка.Дата, "ДЛФ=D"));
	ИначеЕсли Проведен Тогда
		НаименованиеДокумента = НСтр("ru = 'Платежное поручение не требуется (документ исполнен банком)'");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		НаименованиеДокумента = "";
	Иначе
		НаименованиеДокумента = НСтр("ru = 'Ввести платежное поручение'");
	КонецЕсли;
	
	Возврат НайденныйДокумент;
	
КонецФункции

Функция ПолучитьНазначениеПлатежа(Объект, ТолькоСумму = Ложь, ПолучитьСгенерированноеНазначение = Ложь, ФормаДокумента = Неопределено) Экспорт
	
	ЭтоПеречислениеНалога  = Ложь;
	ТекстНазначение        = Объект.НазначениеПлатежа;
	ЭтоРасчетыСРаботниками = Ложь;
	ЭтоЛичныеСредства      = Ложь;
	ЭтоКомиссияБанка       = Ложь;
	ЭтоВыплатаДивидендов   = Ложь;
	
	Если Объект.ВидОперации    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
		
		Если ПолучитьСгенерированноеНазначение Тогда
			Возврат "";
		Иначе
			Возврат ТекстНазначение;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		
		ТекстНазначение = НСтр("ru = 'Перечисление депонированной заработной платы'");
		ЭтоРасчетыСРаботниками = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		
		ТекстНазначение = НСтр("ru = 'Заработная плата'");
		ЭтоРасчетыСРаботниками = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
		
		ТекстНазначение = НСтр("ru = 'Перечисление подотчетной суммы'");
		ЭтоРасчетыСРаботниками = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику Тогда
		
		ТекстНазначение = НСтр("ru = 'Выдача займа'");
		ЭтоРасчетыСРаботниками = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		
		ТекстНазначение = НСтр("ru = 'Оплата работ по договору подряда'");
		ЭтоРасчетыСРаботниками = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		
		ТекстНазначение = НСтр("ru = 'Перевод собственных денежных средств'");
		ЭтоЛичныеСредства = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		
		ТекстНазначение = НСтр("ru = 'Комиссия банка'");
		ЭтоКомиссияБанка = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов Тогда
		
		Если ЗначениеЗаполнено(Объект.НачислениеДивидендов) Тогда
			ПараметрыРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.НачислениеДивидендов, "РасчетныйПериод");
			ПериодНачисленияСтрокой = ПредставлениеПериода(НачалоГода(ПараметрыРасчета.РасчетныйПериод),
										КонецКвартала(ПараметрыРасчета.РасчетныйПериод),
										"ФП = Истина");
			ТекстНазначение = СтрШаблон(НСтр("ru = 'Перечисление дивидендов за %1'"), ПериодНачисленияСтрокой);
		Иначе
			ТекстНазначение = НСтр("ru = 'Перечисление дивидендов'");
		КонецЕсли;
		
		ЭтоВыплатаДивидендов = Истина;
		
	КонецЕсли;
	
	Если ЭтоРасчетыСРаботниками Тогда
		ТекстПолучатель = "";
		ТекстФИО        = "";
		ТекстПериод     = "";
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
			
			Если ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
				МесяцУплаты = Формат(Объект.ПлатежнаяВедомость.ПериодРегистрации, "ДФ=ММММ");
				ГодУплаты   = Формат(Объект.ПлатежнаяВедомость.ПериодРегистрации, "ДФ=гггг");
			Иначе
				МесяцУплаты = Формат(Объект.Дата, "ДФ=ММММ");
				ГодУплаты   = Формат(Объект.Дата, "ДФ=гггг");
			КонецЕсли;
			
			ТекстПериод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' за %1 %2 г.'"),
			МесяцУплаты, ГодУплаты);
			
			ТекстНазначение = ТекстНазначение + ТекстПериод;
		КонецЕсли;
		
		Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
			
			ТекстПолучатель = НСтр("ru = 'Для зачисления на счет %1'");
			
			Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") И ЗначениеЗаполнено(Объект.Контрагент) Тогда
				ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(Объект.Организация, 
				Объект.Контрагент, Объект.Дата, Ложь);
				
				Если НЕ УчетЗарплаты.Просклонять(ДанныеФизЛица.Представление, 2, ТекстФИО, ДанныеФизЛица.Пол) Тогда
					ТекстФИО = "";
				КонецЕсли;
				
			КонецЕсли;
			
			ТекстПолучатель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПолучатель, ТекстФИО) + Символы.ПС;
			
		КонецЕсли;
		
		ТекстНазначение = ТекстПолучатель + ТекстНазначение;
	КонецЕсли;
	
	ТекстНазначенияИзСчетаКонтрагента = "";
	Если НЕ Объект.СчетКонтрагента.Пустая() Тогда
		ТекстНазначенияИзСчетаКонтрагента = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.СчетКонтрагента, "ТекстНазначения"));
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		Если ПустаяСтрока(ТекстНазначение) И ТекстНазначенияИзСчетаКонтрагента <> "" Тогда
			ТекстНазначение = ТекстНазначенияИзСчетаКонтрагента;
		КонецЕсли;
		
		ЭтоПеречислениеНалога = Истина;
	КонецЕсли;
	
	Если НЕ ТолькоСумму Тогда
		Если ТекстНазначенияИзСчетаКонтрагента <> "" Тогда
			ТекстНазначение = ТекстНазначенияИзСчетаКонтрагента;
		Иначе
			Если ЭтоПеречислениеНалога Тогда
				
				Если ЗначениеЗаполнено(Объект.Налог) Тогда
					РеквизитыНалога = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Налог, "ВидНалога, КодБК");
					Если ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяНалоговымиОрганами(РеквизитыНалога.КодБК) Тогда
						
						ИсточникДанныхКонтекста = ИсточникДанныхКонтекстаПлатежногоДокумента(Объект, ФормаДокумента);
						КонтекстДокумента = ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(ИсточникДанныхКонтекста);
						
						ТекстНазначение = КонтекстДокумента.НазначениеПлатежа;
					Иначе
						ТекстНазначение = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
							Объект.Налог,
							Объект.ВидНалоговогоОбязательства,
							Объект.Организация,
							Объект.Дата);
					КонецЕсли;
				Иначе
					ТекстНазначение = "";
				КонецЕсли;
				
			ИначеЕсли НЕ ЭтоРасчетыСРаботниками И НЕ ЭтоЛичныеСредства И НЕ ЭтоКомиссияБанка И НЕ ЭтоВыплатаДивидендов Тогда
				МассивДоговоров = Новый Массив;
				
				Если ФормаДокумента <> Неопределено
					И СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(ФормаДокумента)
					И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
					// Текст назначения платежа формируется из однострочной формы документа,
					// в котором одна строка, актуальные данные получаем из реквизитов формы.
					Если ЗначениеЗаполнено(ФормаДокумента.РасшифровкаПлатежаДоговорКонтрагента) ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
						МассивДоговоров.Добавить(ФормаДокумента.РасшифровкаПлатежаДоговорКонтрагента);
					КонецЕсли;
				Иначе
					// Текст назначения платежа формируется либо не из формы документа,
					// либо документ содержит более 1 строки, актуальные данные содержатся в ТЧ РасшифровкаПлатежа.
					Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
						Если ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)
							И МассивДоговоров.Найти(СтрокаРасшифровки.ДоговорКонтрагента) = Неопределено Тогда
							
							МассивДоговоров.Добавить(СтрокаРасшифровки.ДоговорКонтрагента);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
					ТекстОплата = "Возврат оплаты ";
				Иначе
					ТекстОплата = "Оплата ";
				КонецЕсли;
				
				Если МассивДоговоров.Количество() = 0 Тогда
					ТекстНазначение = ТекстОплата + "по договору ";
					Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
						ТекстНазначение = ТекстНазначение + "Основной договор ";
					КонецЕсли;
				ИначеЕсли МассивДоговоров.Количество() = 1 Тогда
					ТекстНазначение = ТекстОплата + "по договору " + МассивДоговоров[0];
				Иначе
					ТекстНазначение = ТекстОплата + "по договорам: ";
					Для каждого ЭлементМассива Из МассивДоговоров Цикл
						ТекстНазначение = ТекстНазначение + ЭлементМассива + ", ";
					КонецЦикла;
					ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 2);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПозицияСуммы = СтрНайти(Объект.НазначениеПлатежа, "Сумма ");
		Если ПозицияСуммы = 0 Тогда
			ТекстНазначение = Объект.НазначениеПлатежа;
		Иначе
			ТекстНазначение = Лев(Объект.НазначениеПлатежа, ПозицияСуммы - 1);
		КонецЕсли;
		
		Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
			ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПеречислениеНалога Тогда
		Возврат ТекстНазначение;
	КонецЕсли;
	
	ТекстСумма = "Сумма " + Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	
	Если ЭтоЛичныеСредства Тогда
		Если ТолькоСумму Тогда
			Возврат ТекстНазначение;
		Иначе
			ТекстСумма = "";
			ТекстНДС   = "НДС не облагается";
		КонецЕсли;
	ИначеЕсли ЭтоРасчетыСРаботниками ИЛИ ЭтоВыплатаДивидендов Тогда
		ТекстНДС = "Без налога (НДС)";
	Иначе
		ТекстНДС = "";
		Если НЕ ЭтоПеречислениеНалога И НЕ ЭтоКомиссияБанка Тогда
			
			Если ФормаДокумента <> Неопределено 
				И СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(ФормаДокумента)
				И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
				// Текст назначения платежа формируется из однострочной формы документа,
				// в котором одна строка, актуальные данные получаем из реквизитов формы.
				ТабНДС = Новый ТаблицаЗначений;
				ТабНДС.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				ТабНДС.Колонки.Добавить("СуммаНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				
				НоваяСтрока = ТабНДС.Добавить();
				НоваяСтрока.СтавкаНДС = ФормаДокумента.РасшифровкаПлатежаСтавкаНДС;
				НоваяСтрока.СуммаНДС  = ФормаДокумента.РасшифровкаПлатежаСуммаНДС;
			Иначе
				// Текст назначения платежа формируется либо не из формы документа,
				// либо документ содержит более 1 строки, актуальные данные содержатся в ТЧ РасшифровкаПлатежа.
				ТабНДС = Объект.РасшифровкаПлатежа.Выгрузить();
				ТабНДС.Свернуть("СтавкаНДС", "СуммаНДС");
			КонецЕсли;
			
			Для каждого СтрокаНДС Из ТабНДС цикл
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), "", ", ");
				Если СтрокаНДС.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					ТекстНДС = ТекстНДС + "Без налога (НДС)";
				ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС) Тогда
					ТекстНДС = "";
				Иначе
					ТекстНДС = ТекстНДС + "НДС(" + СтрокаНДС.СтавкаНДС + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ТекстНДС = ?(ПустаяСтрока(ТекстНДС), "", "В т.ч. ") + ТекстНДС;
		
	КонецЕсли;
	
	ТекстСуммаНазначения = ТекстСумма + ?(ТекстСумма = "" ИЛИ ТекстНДС = "", "", Символы.ПС) + ТекстНДС;
	
	Возврат ТекстНазначение
		+ ?(ПустаяСтрока(ТекстСуммаНазначения), "", Символы.ПС + ТекстСуммаНазначения);
	
КонецФункции

// Определяет вид налогового обязательства по аналитике платежа
//
// Параметры:
//   Объект - ДокументОбъект.СписаниеСРасчетногоСчета
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ВидыПлатежейВГосБюджет
//
Функция ВидНалоговогоОбязательстваПоАналитикеПлатежа(Объект) Экспорт
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(Объект.СчетУчетаРасчетовСКонтрагентом,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
		Если НомерСубконто <> 0 Тогда
			ВидНалоговогоОбязательства = Объект["СубконтоДт" + НомерСубконто]
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
			ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		КонецЕсли;
		
	Иначе
		ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВидНалоговогоОбязательства;
	
КонецФункции

// Заполняет субконто вида ВидыПлатежейВГосБюджет по реквизиту ВидНалоговогоОбязательства
//
Процедура ВидНалоговогоОбязательстваПриИзменении(Объект) Экспорт
	
	НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(Объект.СчетУчетаРасчетовСКонтрагентом,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	Если НомерСубконто <> 0 Тогда
		Объект["СубконтоДт" + НомерСубконто] = Объект.ВидНалоговогоОбязательства;
	КонецЕсли;
	
КонецПроцедуры

// Определяет регистрацию в налоговом органие по аналитике платежа
//
// Параметры:
//   Объект - ДокументОбъектСписаниеСРасчетногоСчета
//
// Возвращаемое значение:
//   СправочникСсылка.РегистрацииВНалоговомОргане
//
Функция ПолучитьРегистрациюВНалоговомОргане(Объект) Экспорт
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) И НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
		
		НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
			Объект.СчетУчетаРасчетовСКонтрагентом, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["РегистрацияВНалоговомОргане"]);
		
		Если НомерСубконто <> 0 Тогда
			РегистрацияВНалоговомОргане = Объект["СубконтоДт" + НомерСубконто];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РегистрацияВНалоговомОргане;
	
КонецФункции

Функция ПолучитьСписокВидовОперацийСРасшифровкойПлатежа() Экспорт
	
	СписокОпераций = Новый СписокЗначений();
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту);
	
	Возврат(СписокОпераций);
	
КонецФункции

Функция ЕстьРасшифровкаПлатежа(Знач ВидОперации, ТолькоРасчеты = Истина) Экспорт
	
	// Параметр ТолькоРасчеты в этой функции не обрабатывается,
	// но нужен для унификации с документом ПоступлениеНаРасчетныйСчет
	
	СписокВидовСРасшифровкойПлатежа = ПолучитьСписокВидовОперацийСРасшифровкойПлатежа();
	
	Возврат СписокВидовСРасшифровкойПлатежа.НайтиПоЗначению(ВидОперации) <> Неопределено;
	
КонецФункции

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("ВидОперации");
	МассивРеквизитов.Добавить("Организация");
	
	Возврат МассивРеквизитов;
	
КонецФункции

Функция КонтрагентДолженБытьЗаполнен(ВидОперации) Экспорт
	
	Возврат ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда;
	
КонецФункции

Функция ДанныеЗаполненияАналитикиНаСчетеРасчетовСБюджетом(СчетРасчетов, Организация, Контрагент, КодТерритории, КПП, КБК, ОснованиеПлатежа, ТипПлатежа, ВидНалоговогоОбязательства) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СубконтоДт1");
	Результат.Вставить("СубконтоДт2");
	Результат.Вставить("СубконтоДт3");
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиРегистрациюВНалоговомОргане(Организация, Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодТерритории) И НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиПоКодуТерритории(Организация, КодТерритории);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КПП) Тогда
		Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
			РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиПоКПП(Организация, КПП);
		ИначеЕсли РегистрацияВНалоговомОргане.КПП <> КПП Тогда
			РегистрацияПоКПП = Справочники.РегистрацииВНалоговомОргане.НайтиПоКПП(Организация, КПП);
			Если ЗначениеЗаполнено(РегистрацияПоКПП) Тогда
				РегистрацияВНалоговомОргане = РегистрацияПоКПП;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	АналитикаРасчетов = РасчетыСБюджетом.АналитикаНаСчетеРасчетовСБюджетом(
		СчетРасчетов,
		Организация,
		РегистрацияВНалоговомОргане,
		ВидНалоговогоОбязательства,
		КБК,
		ОснованиеПлатежа,
		ТипПлатежа);
	
	ВидыСубконто = СчетРасчетов.ВидыСубконто;
	Для НомерСубконто = 1 По ВидыСубконто.Количество() Цикл
		
		ОписаниеАналитики = АналитикаРасчетов.Найти(НомерСубконто, "НомерНаСчете");
		
		Если ОписаниеАналитики <> Неопределено Тогда
			ЗначениеСубконто = ОписаниеАналитики.Значение;
		Иначе
			// Если не составной тип, то инициализируем значением по умолчанию
			ТипыСубконто = ВидыСубконто[НомерСубконто - 1].ВидСубконто.ТипЗначения.Типы();
			Если ТипыСубконто.Количество() = 1 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеСубконто = Новый(ТипыСубконто[0]);
		КонецЕсли;
		
		Результат["СубконтоДт" + НомерСубконто] = ЗначениеСубконто;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеОбъектаДляОбмена(СсылкаНаОбъект) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("БанковскийСчетКонтрагента");
	Результат.Вставить("БанковскийСчетОрганизации");
	Результат.Вставить("КонтрагентФизЛицо");
	Результат.Вставить("ТипПлатежногоДокумента");
	Результат.Вставить("ВидПлатежа");
	Результат.Вставить("СтатусСоставителя");
	Результат.Вставить("ОчередностьПлатежа");
	Результат.Вставить("ВидПеречисленияВБюджет");
	Результат.Вставить("ПоказательОснования");
	Результат.Вставить("ПоказательНомера");
	Результат.Вставить("ПоказательДаты");
	Результат.Вставить("ПоказательТипа");
	Результат.Вставить("ИдентификаторПлатежа");
	Результат.Вставить("КодБК");
	Результат.Вставить("ПеречислениеВБюджет");
	Результат.Вставить("ПоказательПериода");
	Результат.Вставить("КодОКАТО");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СписаниеСРасчетногоСчета.СчетКонтрагента = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(ПлатежноеПоручение.СчетКонтрагента, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка))
		|		ИНАЧЕ СписаниеСРасчетногоСчета.СчетКонтрагента
		|	КОНЕЦ КАК БанковскийСчетКонтрагента,
		|	ВЫБОР
		|		КОГДА СписаниеСРасчетногоСчета.СчетОрганизации = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(ПлатежноеПоручение.СчетОрганизации, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка))
		|		ИНАЧЕ СписаниеСРасчетногоСчета.СчетОрганизации
		|	КОНЕЦ КАК БанковскийСчетОрганизации,
		|	ВЫБОР
		|		КОГДА СписаниеСРасчетногоСчета.Контрагент ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КонтрагентФизЛицо,
		|	""ПлатежноеПоручение"" КАК ТипПлатежногоДокумента,
		|	ВЫБОР КОГДА ПлатежноеПоручение.Ссылка ЕСТЬ NULL ТОГДА
		|		ВЫБОР КОГДА СписаниеСРасчетногоСчета.Дата > ДАТАВРЕМЯ(2013, 07, 09) ТОГДА
		|			""""
		|		ИНАЧЕ
		|			""Электронно""
		|		КОНЕЦ
		|	ИНАЧЕ
		|		ПлатежноеПоручение.ВидПлатежа
		|	КОНЕЦ КАК ВидПлатежа,
		|	ЕСТЬNULL(ПлатежноеПоручение.СтатусСоставителя, ""01"") КАК СтатусСоставителя,
		|	ВЫБОР КОГДА ПлатежноеПоручение.Ссылка ЕСТЬ NULL ТОГДА
		|		ВЫБОР КОГДА СписаниеСРасчетногоСчета.Дата > ДАТАВРЕМЯ(2013, 12, 14) ТОГДА
		|			""5""
		|		ИНАЧЕ
		|			""6""
		|		КОНЕЦ
		|	ИНАЧЕ
		|		ПлатежноеПоручение.ОчередностьПлатежа
		|	КОНЕЦ КАК ОчередностьПлатежа,
		|	ЕСТЬNULL(ПлатежноеПоручение.ВидПеречисленияВБюджет, ЗНАЧЕНИЕ(Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж)) КАК ВидПеречисленияВБюджет,
		|	ЕСТЬNULL(ПлатежноеПоручение.ПоказательОснования, ""ТП"") КАК ПоказательОснования,
		|	ЕСТЬNULL(ПлатежноеПоручение.ПоказательНомера, ""0"") КАК ПоказательНомера,
		|	ЕСТЬNULL(ПлатежноеПоручение.ПоказательДаты, ""0"") КАК ПоказательДаты,
		|	ВЫБОР КОГДА ПлатежноеПоручение.Ссылка ЕСТЬ NULL ТОГДА
		|		ВЫБОР КОГДА СписаниеСРасчетногоСчета.Дата > ДАТАВРЕМЯ(2014, 02, 04) ТОГДА
		|			""0""
		|		ИНАЧЕ
		|			""НС""
		|		КОНЕЦ
		|	ИНАЧЕ
		|		ПлатежноеПоручение.ПоказательТипа
		|	КОНЕЦ КАК ПоказательТипа,
		|	ЕСТЬNULL(ПлатежноеПоручение.ИдентификаторПлатежа, """") КАК ИдентификаторПлатежа,
		|	ЕСТЬNULL(ПлатежноеПоручение.КодБК, """") КАК КодБК,
		|	ЕСТЬNULL(ПлатежноеПоручение.ПеречислениеВБюджет, Ложь) КАК ПеречислениеВБюджет,
		|	ЕСТЬNULL(ПлатежноеПоручение.ПоказательПериода, """") КАК ПоказательПериода,
		|	ЕСТЬNULL(ПлатежноеПоручение.КодОКАТО, """") КАК КодОКАТО
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|		ПО (СписаниеСРасчетногоСчета.ДокументОснование = ПлатежноеПоручение.Ссылка
		|				ИЛИ СписаниеСРасчетногоСчета.Ссылка = ПлатежноеПоручение.ДокументОснование)
		|ГДЕ
		|	СписаниеСРасчетногоСчета.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ПроверкаЗаполнения

Процедура ОбработкаПроверкиЗаполненияРасшифровкаПлатежа(Объект, ФормаРасшифровкаПлатежа = Неопределено, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СообщенияПроверки = ПодготовитьСообщенияПроверкиЗаполненияРасшифровкаПлатежа(
		Объект,
		ФормаРасшифровкаПлатежа,
		Отказ,
		ПроверяемыеРеквизиты,
		Истина);
	
	// Вывод сообщений проверки.
	СообщитьРезультатПроверки(
		Объект,
		Отказ,
		СообщенияПроверки,
		Метаданные.Документы.СписаниеСРасчетногоСчета.ТабличныеЧасти.РасшифровкаПлатежа,
		ФормаРасшифровкаПлатежа);
	
КонецПроцедуры

Функция ПодготовитьСообщенияПроверкиЗаполненияРасшифровкаПлатежа(Объект, ФормаРасшифровкаПлатежа = Неопределено, Отказ, ПроверяемыеРеквизиты, ПроверятьСчетаУчета = Истина) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ИспользоватьТабличныеФормыБанковскихДокументов = Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить();
	
	ВидОперации         = Объект.ВидОперации;
	РасшифровкаПлатежа	= ДанныеТабличнойЧасти(Объект, ФормаРасшифровкаПлатежа, "РасшифровкаПлатежа");
	ЭтоПроверкаВТаблице = ДанныеОтображаютсяВТаблицеНаФорме(Объект, ФормаРасшифровкаПлатежа, ИспользоватьТабличныеФормыБанковскихДокументов);
	
	// Отключаем стандартную проверку реквизитов ТЧ РасшифровкаПлатежа,
	// выполняем ее в зависимости от того, из какой формы она вызвана.
	Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		Если СтрНайти(Реквизит, "РасшифровкаПлатежа") = 1 Тогда
			
			Если НЕ ПроверятьСчетаУчета Тогда
				Если СтрНайти(Реквизит, "СчетУчетаРасчетовСКонтрагентом") > 0
					ИЛИ СтрНайти(Реквизит, "СчетУчетаРасчетовПоАвансам") > 0 Тогда
					// Счета проверять будем не в этой процедуре, поэтому их не исключаем из проверяемых реквизитов.
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			МассивНепроверяемыхРеквизитов.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	
	СообщенияПроверки = ПроверкаЗаполненияДокументов.НовыйРезультатПроверки();
	
	Если ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		
		ИспользоватьВалютныйУчет = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
		
		Для Каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
			
			// ДоговорКонтрагента
			Если ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") 
				И НЕ Объект.БезЗакрывающихДокументов
				И НЕ ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента) Тогда
				Сообщение = СообщенияПроверки.Добавить();
				Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.ДоговорКонтрагента";
				Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
			КонецЕсли;
			
			// СпособПогашенияЗадолженности И Сделка
			Если (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
				ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю)
				И НЕ Объект.БезЗакрывающихДокументов Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.СпособПогашенияЗадолженности) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.СпособПогашенияЗадолженности";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
				
				// Сделка
				Если СтрокаПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу
					И НЕ ЗначениеЗаполнено(СтрокаПлатежа.Сделка) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.Сделка";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
				
			КонецЕсли;
			
			// СуммаПлатежа
			Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.СуммаПлатежа) Тогда
				// Проверку суммы платежа не в таблице не осуществляем,
				// т.к. в этом случае она совпадает с реквизитом шапки СуммаДокумента,
				// и будет проверяться он.
				Если ЭтоПроверкаВТаблице Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.СуммаПлатежа";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
			Если ИспользоватьВалютныйУчет
				И (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
				ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю) 
				И НЕ Объект.БезЗакрывающихДокументов Тогда
				
				// КурсВзаиморасчетов
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.КурсВзаиморасчетов) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.КурсВзаиморасчетов";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
				
				// СуммаВзаиморасчетов
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.СуммаВзаиморасчетов) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.СуммаВзаиморасчетов";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
				
			КонецЕсли;
			
			// Вид платежа по кредитам и займам 
			Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
				ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.ВидПлатежаПоКредитамЗаймам) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
			// Для отдельных видов операций некоторые счета проверяются вне зависимости от настроек пользователя 
			Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентом) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Счета учета в строках проверяем с помощью общего механизма для всех счетов.
		Если ПроверятьСчетаУчета 
			И НЕ Объект.БезЗакрывающихДокументов Тогда
			ПроверяемыеРеквизитыРасшифровкаПлатежа = Новый Массив;
			Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
				ПроверяемыеРеквизитыРасшифровкаПлатежа.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
			КонецЕсли;
			ПроверяемыеРеквизитыРасшифровкаПлатежа.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
			
			Если ФормаРасшифровкаПлатежа <> Неопределено Тогда
				// Общие механизмы проверки счетов учета обращаются к табличной части внутри самого объекта.
				Объект.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
			КонецЕсли;
			
			СчетаУчетаВДокументах.ПроверитьЗаполнение(Объект, Отказ, ПроверяемыеРеквизитыРасшифровкаПлатежа,, СообщенияПроверки, Ложь);
			
			Если ФормаРасшифровкаПлатежа <> Неопределено Тогда
				// Более табличная часть внутри Объекта не требуется.
				Объект.Удалить("РасшифровкаПлатежа");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Возврат СообщенияПроверки;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполненияПеречислениеЗаработнойПлаты(Объект, ФормаПеречислениеЗаработнойПлаты = Неопределено, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СообщенияПроверки = ПодготовитьСообщенияПроверкиЗаполненияПеречислениеЗаработнойПлаты(
		Объект,
		ФормаПеречислениеЗаработнойПлаты,
		Отказ,
		ПроверяемыеРеквизиты);
	
	СообщитьРезультатПроверки(
		Объект,
		Отказ,
		СообщенияПроверки,
		Метаданные.Документы.СписаниеСРасчетногоСчета.ТабличныеЧасти.ПеречислениеЗаработнойПлаты,
		ФормаПеречислениеЗаработнойПлаты);
	
КонецПроцедуры

Функция ПодготовитьСообщенияПроверкиЗаполненияПеречислениеЗаработнойПлаты(Объект, ФормаПеречислениеЗаработнойПлаты = Неопределено, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ВидОперации         = Объект.ВидОперации;
	ИспользоватьТабличныеФормыБанковскихДокументов = Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить();
	ЭтоПроверкаВТаблице = ДанныеОтображаютсяВТаблицеНаФорме(Объект, ФормаПеречислениеЗаработнойПлаты, ИспользоватьТабличныеФормыБанковскихДокументов);
	ПеречислениеЗаработнойПлаты = ДанныеТабличнойЧасти(Объект, ФормаПеречислениеЗаработнойПлаты, "ПеречислениеЗаработнойПлаты");
	
	Если ФормаПеречислениеЗаработнойПлаты <> Неопределено Тогда
		РучнаяКорректировка = Ложь;
	Иначе
		РучнаяКорректировка = Объект.РучнаяКорректировка;
	КонецЕсли;
	
	// Отключаем стандартную проверку реквизитов ТЧ ПеречислениеЗаработнойПлаты, 
	// выполняем ее в зависимости от того, из какой формы она вызвана.
	Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		Если СтрНайти(Реквизит, "ПеречислениеЗаработнойПлаты") = 1 Тогда
			МассивНепроверяемыхРеквизитов.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	
	СообщенияПроверки = ПроверкаЗаполненияДокументов.НовыйРезультатПроверки();
	
	// Отключаем проверку реквизитов, связанных с перечислением заработной платы
	// Если установлен флаг ручная корректировка - то заполненность полей по заработной плате не проверяем
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		И НЕ РучнаяКорректировка Тогда
		
		ПроверятьСоответствиеСуммыДокументаИВедомости = ПроверятьСоответствиеСуммыДокументаИВедомостиПоЗарплате();
		
		// Табличная часть ПеречислениеЗаработнойПлаты используется, если учет зарплаты
		// ведется в Бухгалтерии Предприятия или на 70-м счете задействовано субконто "Работники".
		Если ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
			
			ПеречислениеЗаработнойПлатыЗаполнена = Ложь;
			Для Каждого СтрокаПлатежа Из ПеречислениеЗаработнойПлаты Цикл
				// Ведомость
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.Ведомость) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "ПеречислениеЗаработнойПлаты.Ведомость";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
				
				// СуммаПлатежа
				Если ЭтоПроверкаВТаблице
					И НЕ ЗначениеЗаполнено(СтрокаПлатежа.СуммаПлатежа) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "ПеречислениеЗаработнойПлаты.СуммаПлатежа";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
				
				ПеречислениеЗаработнойПлатыЗаполнена = Истина;
			КонецЦикла;
			
			Если НЕ ПеречислениеЗаработнойПлатыЗаполнена Тогда
				Сообщение = СообщенияПроверки.Добавить();
				Сообщение.ПолноеИмяРеквизита = "ПеречислениеЗаработнойПлаты.Ведомость";
				Сообщение.НомерСтроки        = 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Возврат СообщенияПроверки;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполненияПеречислениеДепонентов(Объект, ФормаПеречислениеДепонентов = Неопределено, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СообщенияПроверки = ПодготовитьСообщенияПроверкиЗаполненияПеречислениеДепонентов(
		Объект,
		ФормаПеречислениеДепонентов,
		Отказ,
		ПроверяемыеРеквизиты);
	
	СообщитьРезультатПроверки(
		Объект,
		Отказ,
		СообщенияПроверки,
		Метаданные.Документы.СписаниеСРасчетногоСчета.ТабличныеЧасти.ПеречислениеДепонентов,
		ФормаПеречислениеДепонентов);
	
КонецПроцедуры

Функция ПодготовитьСообщенияПроверкиЗаполненияПеречислениеДепонентов(Объект, ФормаПеречислениеДепонентов = Неопределено, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПеречислениеДепонентов = ДанныеТабличнойЧасти(Объект, ФормаПеречислениеДепонентов, "ПеречислениеДепонентов");
	
	// Отключаем стандартную проверку реквизитов ТЧ ПеречислениеДепонентов,
	// выполняем ее в зависимости от того, из какой формы она вызвана.
	Для каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		Если СтрНайти(Реквизит, "ПеречислениеДепонентов") = 1 Тогда
			МассивНепроверяемыхРеквизитов.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	
	СообщенияПроверки = ПроверкаЗаполненияДокументов.НовыйРезультатПроверки();
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Возврат СообщенияПроверки;
	
КонецФункции

Функция ДанныеТабличнойЧасти(Объект, ФормаСТаблицей, ИмяТабличнойЧасти)
	
	Если ФормаСТаблицей <> Неопределено Тогда
		ТабличнаяЧасть = ФормаСТаблицей[ИмяТабличнойЧасти];
	Иначе
		ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	КонецЕсли;
	
	Возврат ТабличнаяЧасть;
	
КонецФункции

Функция ДанныеОтображаютсяВТаблицеНаФорме(Объект, ФормаСТаблицей, ИспользоватьТабличныеФормыБанковскихДокументов)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		ТабличнаяЧасть = ДанныеТабличнойЧасти(Объект, ФормаСТаблицей, "ПеречислениеЗаработнойПлаты");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		ТабличнаяЧасть = ДанныеТабличнойЧасти(Объект, ФормаСТаблицей, "ПеречислениеДепонентов");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ТабличнаяЧасть = ДанныеТабличнойЧасти(Объект, ФормаСТаблицей, "ПеречислениеНДФЛ");
	Иначе
		ТабличнаяЧасть = ДанныеТабличнойЧасти(Объект, ФормаСТаблицей, "РасшифровкаПлатежа");
	КонецЕсли;
	
	Если ФормаСТаблицей <> Неопределено Тогда
		Результат = Истина;
	Иначе
		// Если в табличной части 1 строка, то сообщение о проверках ее полей
		// выводятся как для полей ввода на основной форме документа.
		Результат = ИспользоватьТабличныеФормыБанковскихДокументов ИЛИ ТабличнаяЧасть.Количество() > 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидФормыДокумента(Объект, ФормаСТаблицей, ИспользоватьТабличныеФормыБанковскихДокументов)
	
	Результат     = "Многострочная";
	Если ФормаСТаблицей <> Неопределено Тогда
		Результат = "ДопФорма";
	Иначе
		// Если в табличной части 1 строка, то сообщение о проверках ее полей
		// выводятся как для полей ввода на основной форме документа.
		Если НЕ Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить() Тогда
			Результат = "Однострочная";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверятьСоответствиеСуммыДокументаИВедомостиПоЗарплате() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
		ИЛИ ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ВидыСубконто.Найти(
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") <> Неопределено;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполненияПеречислениеНДФЛ(Объект, ФормаПеречислениеНДФЛ = Неопределено, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СообщенияПроверки = ПодготовитьСообщенияПроверкиЗаполненияПеречислениеНДФЛ(
		Объект,
		ФормаПеречислениеНДФЛ,
		Отказ,
		ПроверяемыеРеквизиты);
	
	СообщитьРезультатПроверки(
		Объект,
		Отказ,
		СообщенияПроверки,
		Метаданные.Документы.СписаниеСРасчетногоСчета.ТабличныеЧасти.ПеречислениеНДФЛ,
		ФормаПеречислениеНДФЛ);
	
КонецПроцедуры

Функция ПодготовитьСообщенияПроверкиЗаполненияПеречислениеНДФЛ(Объект, ФормаПеречислениеНДФЛ = Неопределено, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПеречислениеНДФЛ = ДанныеТабличнойЧасти(Объект, ФормаПеречислениеНДФЛ, "ПеречислениеНДФЛ");
	
	// Отключаем стандартную проверку реквизитов ТЧ ПеречислениеНДФЛ, 
	// выполняем ее в зависимости от того, из какой формы она вызвана.
	Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		Если СтрНайти(Реквизит, "ПеречислениеНДФЛ") = 1 Тогда
			МассивНепроверяемыхРеквизитов.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	
	СообщенияПроверки = ПроверкаЗаполненияДокументов.НовыйРезультатПроверки();
	
	Для Каждого СтрокаПлатежа Из ПеречислениеНДФЛ Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.ФизическоеЛицо) Тогда
			Сообщение = СообщенияПроверки.Добавить();
			Сообщение.ПолноеИмяРеквизита = "ПеречислениеНДФЛ.ФизическоеЛицо";
			Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.Сумма) Тогда
			Сообщение = СообщенияПроверки.Добавить();
			Сообщение.ПолноеИмяРеквизита = "ПеречислениеНДФЛ.Сумма";
			Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.Ставка) Тогда
			Сообщение = СообщенияПроверки.Добавить();
			Сообщение.ПолноеИмяРеквизита = "ПеречислениеНДФЛ.Ставка";
			Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Возврат СообщенияПроверки;
	
КонецФункции

Процедура СообщитьРезультатПроверки(Объект, Отказ, СообщенияПроверки, МетаданныеТабличнойЧасти, ФормаСТаблицей = Неопределено) Экспорт
	
	Если СообщенияПроверки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СообщенияПроверки.Колонки.Добавить("НомерППДляСортировки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	// Для сохранения порядка сортировки пронумеруем строки.
	НомерПП = 1;
	Для Каждого СтрокаСообщения Из СообщенияПроверки Цикл
		СтрокаСообщения.НомерППДляСортировки = НомерПП;
		НомерПП = НомерПП + 1;
	КонецЦикла;
	
	ИспользоватьТабличныеФормыБанковскихДокументов = Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить();
	
	ВидФормы = ВидФормыДокумента(Объект, ФормаСТаблицей, ИспользоватьТабличныеФормыБанковскихДокументов);
	ЭтоПроверкаВТаблице = ДанныеОтображаютсяВТаблицеНаФорме(Объект, ФормаСТаблицей, ИспользоватьТабличныеФормыБанковскихДокументов);
	
	СообщенияПроверки.Сортировать("НомерСтроки, НомерППДляСортировки");
	
	ШаблонТекстаСообщенияКолонка = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
		"Колонка", "Заполнение", "%1", "%2", МетаданныеТабличнойЧасти.Синоним);
	
	ШаблонТекстаСообщенияПоле = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", "%1");
	
	КэшСинонимовРеквизитов = Новый Соответствие;
	
	Для Каждого СтрокаСообщения Из СообщенияПроверки Цикл
		ИмяРеквизитаДетально = ОбщегоНазначенияБПКлиентСервер.РазложитьПолноеИмяРеквизита(СтрокаСообщения.ПолноеИмяРеквизита);
		
		СинонимРеквизита = КэшСинонимовРеквизитов[ИмяРеквизитаДетально.Реквизит];
		Если СинонимРеквизита = Неопределено Тогда
			СинонимРеквизита = МетаданныеТабличнойЧасти.Реквизиты[ИмяРеквизитаДетально.Реквизит].Синоним;
			КэшСинонимовРеквизитов.Вставить(ИмяРеквизитаДетально.Реквизит, СинонимРеквизита);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаСообщения.Ошибка) Тогда
			ТекстСообщения = СокрЛП(СтрокаСообщения.Ошибка);
		ИначеЕсли ЭтоПроверкаВТаблице Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаСообщенияКолонка, СинонимРеквизита, СтрокаСообщения.НомерСтроки);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаСообщенияПоле, СинонимРеквизита);
		КонецЕсли;
		
		Если ВидФормы = "Многострочная" Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				ИмяРеквизитаДетально.ТабличнаяЧасть,
				СтрокаСообщения.НомерСтроки,
				ИмяРеквизитаДетально.Реквизит);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект", Отказ);
			
		ИначеЕсли ВидФормы = "Однострочная" Тогда
			
			Если ЭтоПроверкаВТаблице Тогда
				// При проверке в таблице в момент вызова из однострочной формы документа
				// сообщение показываем возле гиперссылки.
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "НадписьСуммаДокумента",, Отказ);
			Иначе
				// Сообщения показываем возле полей ввода на однострочной форме,
				// связанных с первой строкой табличной части.
				Поле = СтрЗаменить(СтрокаСообщения.ПолноеИмяРеквизита, ".", "");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле,, Отказ);
			КонецЕсли;
			
		ИначеЕсли ВидФормы = "ДопФорма" Тогда
			
			// При вызове из доп. формы не указываем КлючДанных,
			// иначе при двойном щелчке по сообщению будет переход в основную форму документа.
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				ИмяРеквизитаДетально.ТабличнаяЧасть, 
				СтрокаСообщения.НомерСтроки, 
				ИмяРеквизитаДетально.Реквизит);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КорректировкаДвижений

Функция ИнформацияОПроведенииДокумента(СписаниеСРасчетногоСчета) Экспорт
	
	Если ТипЗнч(СписаниеСРасчетногоСчета) <> Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		Возврат "";
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СписаниеСРасчетногоСчета, "ВидОперации, Организация, Дата");
	
	Использовать57Счет = УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(РеквизитыДокумента.Организация, РеквизитыДокумента.Дата);
	Если РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных
		И НЕ Использовать57Счет Тогда
		Возврат НСтр("ru = 'Документ не формирует движений.
			|Проводки по списанию средств с расчетного счета отражаются документом ""Поступление наличных"" с видом операции ""Получение наличных в банке"".'");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(РеквизитыОбъекта, ИсточникДанных, ИсходныеДанныеЗаполнения = Неопределено) Экспорт
	
	Если НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() И ИсточникДанных.РегистрацияВНалоговомОргане = Неопределено Тогда
		ИсточникДанных.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиРегистрациюВНалоговомОргане(
			ИсточникДанных.Организация, ИсточникДанных.Получатель);
	КонецЕсли;
	
	ИсходныеДанныеПереданы = (ИсходныеДанныеЗаполнения <> Неопределено);
	Если ИсходныеДанныеПереданы Тогда
		РеквизитыОбъекта.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	Иначе
		// Если настройка не выбрана явно, попробуем определить по налогу.
		НастройкаЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.КлючНастройкиУплатыНалога(
			ИсточникДанных.Налог, ИсточникДанных.Организация, ИсточникДанных.РегистрацияВНалоговомОргане);
		Если НастройкаЗаполнения <> Неопределено Тогда
			ИсходныеДанныеПереданы   = Истина;
			ИсходныеДанныеЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ДанныеЗаполнения(
				НастройкаЗаполнения, ИсточникДанных.Период, ИсточникДанных.Организация, ИсточникДанных.ВидНалоговогоОбязательства);
		КонецЕсли;
	КонецЕсли;
	
	// Эмулируем работу формы документа, как если бы то, что в данных заполнения, вводил пользователь.
	РеквизитыДокумента = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_СписаниеСРасчетногоСчета();
	
	// Перейдем на терминологию модуля ПлатежиВБюджетКлиентСервер.
	ДанныеЗаполнения = Новый Структура;
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	Для каждого Реквизит Из РеквизитыДокумента Цикл
		РеквизитыПлатежаВБюджет[Реквизит.Ключ] = РеквизитыОбъекта[Реквизит.Значение];
		Если ЗначениеЗаполнено(ИсходныеДанныеЗаполнения) Тогда
			// ДанныеЗаполнения
			Если ТипЗнч(ИсходныеДанныеЗаполнения) = Тип("Структура") Тогда
				// Считаем изменениями то, что в данных заполнения.
				Если НЕ ИсходныеДанныеЗаполнения.Свойство(Реквизит.Значение) Тогда
					Продолжить;
				КонецЕсли;
				Значение = ИсходныеДанныеЗаполнения[Реквизит.Значение];
				Если Значение = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				// Считаем изменениями все, что заполнено.
				Значение = РеквизитыОбъекта[Реквизит.Значение];
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ДанныеЗаполнения.Вставить(Реквизит.Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Эмулируем работу пользователя.
	Контекст = ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(ИсточникДанных);
	ЗначенияПоУмолчанию = ПлатежиВБюджетКлиентСервер.ЗначенияПоУмолчанию(Контекст);
	ЗаполнитьЗначенияСвойств(РеквизитыПлатежаВБюджет, ЗначенияПоУмолчанию);
	ПлатежиВБюджетКлиентСервер.ЗаполнитьДопустимымиЗначениями(РеквизитыПлатежаВБюджет, ДанныеЗаполнения, Контекст);
	
	// Перейдем на терминологию документа.
	Для каждого Реквизит Из РеквизитыДокумента Цикл
		РеквизитыОбъекта[Реквизит.Значение] = РеквизитыПлатежаВБюджет[Реквизит.Ключ];
	КонецЦикла;
	
	Если ТипЗнч(ИсходныеДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "Контрагент", "Получатель", ИсходныеДанныеПереданы) Тогда
			ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "СчетКонтрагента", "СчетПолучателя", ИсходныеДанныеПереданы);
		КонецЕсли;
		
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "Налог", "Налог", ИсходныеДанныеПереданы);
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "СтатьяДвиженияДенежныхСредств", "СтатьяДвиженияДенежныхСредств", ИсходныеДанныеПереданы);
		
		ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, "НазначениеПлатежа", "НазначениеПлатежа", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьИсходнымиДанными(ИсходныеДанныеЗаполнения, ИсточникДанных, РеквизитыОбъекта, ИмяРеквизита, ИмяИсточника, ИсходныеДанныеПереданы)
	
	РеквизитОбъектЗаполненИсходнымиДанными = Ложь;
	Если ИсходныеДанныеЗаполнения.Свойство(ИмяРеквизита) И ЗначениеЗаполнено(ИсходныеДанныеЗаполнения[ИмяРеквизита]) Тогда
		Если ИсходныеДанныеПереданы
			ИЛИ (НЕ РеквизитыОбъекта.Свойство(ИмяРеквизита) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыОбъекта[ИмяРеквизита]))
			И (НЕ ИсточникДанных.Свойство(ИмяИсточника) ИЛИ НЕ ЗначениеЗаполнено(ИсточникДанных[ИмяИсточника])) Тогда
			РеквизитыОбъекта.Вставить(ИмяРеквизита, ИсходныеДанныеЗаполнения[ИмяРеквизита]);
			РеквизитОбъектЗаполненИсходнымиДанными = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РеквизитОбъектЗаполненИсходнымиДанными;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Функция ИсточникДанныхКонтекстаПлатежногоДокумента(Объект, ФормаДокумента = Неопределено) Экспорт
	
	ИсточникДанныхКонтекста = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
	
	ИсточникДанныхКонтекста.Период                      = Объект.Дата;
	ИсточникДанныхКонтекста.Организация                 = Объект.Организация;
	ИсточникДанныхКонтекста.РегистрацияВНалоговомОргане = ПолучитьРегистрациюВНалоговомОргане(Объект);
	ИсточникДанныхКонтекста.Получатель                  = Объект.Контрагент;
	ИсточникДанныхКонтекста.СчетПолучателя              = Объект.СчетКонтрагента;
	ИсточникДанныхКонтекста.Налог                       = Объект.Налог;
	ИсточникДанныхКонтекста.ВидНалоговогоОбязательства  = Объект.ВидНалоговогоОбязательства;
	
	ПрименениеУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	
	Если ФормаДокумента <> Неопределено Тогда
		ВидНалога = ФормаДокумента.ВидНалога;
	Иначе
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
	КонецЕсли;
	
	Если ПлатежиВБюджетКлиентСерверПереопределяемый.ПериодУплатыНалогаВыбираетПользователь(ВидНалога, ПрименениеУСНДоходы) Тогда
		ИсточникДанныхКонтекста.ПериодПлатежа = Объект.НалоговыйПериод;
	КонецЕсли;
	
	Возврат ИсточникДанныхКонтекста;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		СтандартнаяОбработка = Ложь;
		Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
			ВыбраннаяФорма = "ФормаДокументаОднострочнаяИнтеграцияСБанком";
		ИначеЕсли Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить() Тогда
			ВыбраннаяФорма = "ФормаДокумента";
		Иначе
			ВыбраннаяФорма = "ФормаДокументаОднострочная";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаПараметровПроведенияДокумента

Процедура ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.БезЗакрывающихДокументов КАК БезЗакрывающихДокументов,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц)
	|			ТОГДА Реквизиты.Налогоплательщик
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	Реквизиты.СчетКонтрагента КАК СчетКонтрагента,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	Реквизиты.СубконтоДт1 КАК СубконтоДт1,
	|	Реквизиты.СубконтоДт2 КАК СубконтоДт2,
	|	Реквизиты.СубконтоДт3 КАК СубконтоДт3,
	|	Реквизиты.ПодразделениеДт КАК ПодразделениеДт,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.НалоговыйПериод КАК НалоговыйПериод,
	|	Реквизиты.Контрагент КАК ФизЛицо,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.СуммаДокумента КАК СуммаРуб,
	|	Реквизиты.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Реквизиты.ПлатежнаяВедомость КАК ПлатежнаяВедомость,
	|	Реквизиты.НачислениеДивидендов КАК НачислениеДивидендов,
	|	Реквизиты.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетРасчетовСПодотчетнымиЛицами,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоРеализации,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП)
	|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВыплатаЗарплаты
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.БезЗакрывающихДокументов КАК БезЗакрывающихДокументов,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СчетКонтрагента КАК СчетКонтрагента,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.ЭтоВыплатаЗарплаты КАК ЭтоВыплатаЗарплаты,
	|	Реквизиты.РасчетыПоРеализации КАК РасчетыПоРеализации,
	|	1 КАК КоэффициентРуб,
	|	Реквизиты.НазначениеПлатежа КАК Содержание,
	|	&ЭтоОтложенноеПроведение КАК ЭтоОтложенноеПроведение
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	ТаблицаРеквизиты = Запрос.Выполнить().Выгрузить();
	Реквизиты        = ТаблицаРеквизиты[0];
	
	// Коэффициент пересчета сумм из валюты документа в рубли
	Если Реквизиты.ВалютаДокумента = ПараметрыПроведения.ВалютаРеглУчета Тогда
		КоэффициентРуб = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Дата);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ           = Истина;
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Реквизиты.Ссылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Дата, "ДФ=dd.MM.yy"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ПараметрыПроведения.ДокументСсылка);
			ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
			
			Возврат;
		КонецЕсли;
		
		КоэффициентРуб           = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
		Реквизиты.КоэффициентРуб = КоэффициентРуб;
	КонецЕсли;
	
	ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	
КонецПроцедуры

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);
	
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	ПараметрыПроведения.Вставить("ДокументСсылка",  ДокументСсылка);
	ПараметрыПроведения.Вставить("ЭтоОтложенноеПроведение", ЭтоОтложенноеПроведение);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",          ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ЭтоОтложенноеПроведение",         ЭтоОтложенноеПроведение);
	Запрос.УстановитьПараметр("ДоговорДляОтложенногоПроведения", ДоговорДляОтложенногоПроведения);
	
	ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ);
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	Если Отказ ИЛИ НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Дата, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Дата);
	
	ПараметрыПроведения.Вставить("ПлательщикНДФЛ", ПлательщикНДФЛ);
	
	Запрос.УстановитьПараметр("ПлательщикНДФЛ",                 ПлательщикНДФЛ);
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСН",        УчетнаяПолитика.ПрименяетсяУСН(
		Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСНПатент",  УчетнаяПолитика.ПрименяетсяУСНПатент(
		Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("ВестиУчетПоВидамДеятельностиИП", УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(
		Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("ОсновнаяНоменклатурнаяГруппа",   УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(
		Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("ДокументВВалюте",                Реквизиты.ВалютаДокумента <> ВалютаРеглУчета);
	Запрос.УстановитьПараметр("РасходыНаУслугиБанков",          ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(
		"Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков"));
	Запрос.УстановитьПараметр("ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств", УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(
		Реквизиты.Организация, Реквизиты.Дата));
	Если Реквизиты.БезЗакрывающихДокументов Тогда
		Запрос.УстановитьПараметр("ОсновнойСчетУчетаЗатрат", УчетнаяПолитика.ОсновнойСчетУчетаЗатрат(
			Реквизиты.Организация, Реквизиты.Дата));
		Запрос.УстановитьПараметр("ОсновнаяСтатьяЗатрат", Справочники.СтатьиЗатрат.ОсновнаяСтатьяЗатрат());
		Запрос.УстановитьПараметр("ОсновноеПодразделение", 
			БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации"));
		Запрос.УстановитьПараметр("ПрочиеВнереализационныеДоходыРасходы",
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	КонецЕсли;
	
	Для каждого Колонка Из ПараметрыПроведения.ТаблицаРеквизиты.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаТаблицыДокумента(НомераТаблиц,         ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц,   ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПрочееСписание(НомераТаблиц,           ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц,         ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеНалогаИП(НомераТаблиц,     ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеЗарплаты(НомераТаблиц,     ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеДепонентов(НомераТаблиц,   ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаОплатаСчетов(НомераТаблиц,             ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаОплатаПоДоговорамПодряда(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеНДФЛ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеДивидендов(НомераТаблиц,   ПараметрыПроведения, Реквизиты)
		;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Если Реквизиты.ЭтоВыплатаЗарплаты Тогда
		ТаблицыОплатыТруда = ПолучитьТаблицыОплатыТруда(ПараметрыПроведения, ДокументСсылка);
		Если ТаблицыОплатыТруда <> Неопределено Тогда
			ПараметрыПроведения.Вставить("ПеречислениеЗарплаты", ТаблицыОплатыТруда);
		КонецЕсли;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	Реквизиты.Содержание = ТекстСодержанияПроводокДокумента(Реквизиты);
	Если ПараметрыПроведения.РасшифровкаПлатежа <> Неопределено Тогда
		ПараметрыПроведения.РасшифровкаПлатежа.ЗаполнитьЗначения(Реквизиты.Содержание, "Содержание");
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
	|	Реквизиты.НалоговыйПериод КАК НалоговыйПериод,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.НомерВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента,
	|	&ОрганизацияПрименяетУСН КАК УчитыватьЗадолженностьУСН,
	|	&ОрганизацияПрименяетУСНПатент КАК УчитыватьЗадолженностьУСНПатент,
	|	Реквизиты.НаправлениеДвижения КАК НаправлениеДвижения,
	|	Реквизиты.РасчетыПоРеализации КАК РасчетыПоРеализации,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	ВЫРАЗИТЬ(Реквизиты.НазначениеПлатежа КАК СТРОКА(150)) КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ ЕстьРасшифровкаПлатежа(Реквизиты.ВидОперации) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	&Дата КАК РеквизитыДата,
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки,
	|	&Контрагент КАК РеквизитыКонтрагент,
	|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности,
	|	ТаблицаРасшифровкаПлатежа.СчетНаОплату,
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.Сделка,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам,
	|	&ПодразделениеОрганизации КАК РеквизитыПодразделениеОрганизации,
	|	&СчетБанк КАК РеквизитыСчетБанк,
	|	&СчетОрганизации КАК РеквизитыСчетОрганизации,
	|	&СтатьяДвиженияДенежныхСредств КАК РеквизитыСтатьяДвиженияДенежныхСредств,
	|	ВЫРАЗИТЬ(&Содержание КАК СТРОКА(150)) КАК РеквизитыСодержание,
	|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа,
	|	ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаПлатежа * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
	|	ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаНДС * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаНДСРуб,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте
	|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|ГДЕ
	|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И (НЕ &ЭтоОтложенноеПроведение
	|			ИЛИ ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента = &ДоговорДляОтложенногоПроведения)";
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура погашения задолженности вызывается для операций:
	// - ОплатаПоставщику (в режиме БезЗакрывающихДокументов = Ложь)
	// - ВозвратПокупателю (в режиме БезЗакрывающихДокументов = Ложь)
	// - ПрочиеРасчетыСКонтрагентами
	// - ПеречислениеНалогаЗаТретьихЛиц
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику 
		И НЕ Реквизиты.БезЗакрывающихДокументов Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
		И НЕ Реквизиты.БезЗакрывающихДокументов Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически) КАК СпособПогашенияЗадолженности,
		|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежа", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ?(ТекстЗапроса = "", "", ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());
	
КонецФункции

Функция ТекстЗапросаПрочееСписание(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура прочего списания вызывается для операций:
	// - ОплатаПоставщику (в режиме БезЗакрывающихДокументов = Истина)
	// - ВозвратПокупателю (в режиме БезЗакрывающихДокументов = Истина)
	// - ПрочееСписание
	// - ПеречислениеНалога
	// - ЛичныеСредстваПредпринимателя
	// - РасчетыПоКредитамИЗаймам
	// - ПеречислениеПодотчетномуЛицу
	// - ПереводНаДругойСчет
	// - ВыдачаЗаймаРаботнику
	// - СнятиеНаличных
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		И Реквизиты.БезЗакрывающихДокументов Тогда 
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	&ОсновнойСчетУчетаЗатрат КАК СчетДт,
		|	&ОсновнаяСтатьяЗатрат КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат) КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	&ОсновноеПодразделение КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоКт1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыДата КАК Период
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
		И Реквизиты.БезЗакрывающихДокументов Тогда 
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы) КАК СчетДт,
		|	&ПрочиеВнереализационныеДоходыРасходы КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы) КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	&ОсновноеПодразделение КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоКт1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыДата КАК Период
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда 
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
		|	Реквизиты.СубконтоДт1 КАК СубконтоДт1,
		|	Реквизиты.СубконтоДт2 КАК СубконтоДт2,
		|	Реквизиты.СубконтоДт3 КАК СубконтоДт3,
		|	Реквизиты.ПодразделениеДт КАК ПодразделениеДт,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ИСТИНА КАК ИспользоватьНомераСубконто,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению) КАК СчетДт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
		|	Реквизиты.СубконтоДт1 КАК СубконтоДт1,
		|	Реквизиты.СубконтоДт2 КАК СубконтоДт2,
		|	Реквизиты.СубконтоДт3 КАК СубконтоДт3,
		|	ИСТИНА КАК ИспользоватьНомераСубконто,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	Реквизиты.ПодразделениеДт КАК ПодразделениеДт,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	Реквизиты.НалоговыйПериод КАК НалоговыйПериод,
		|	Реквизиты.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|ГДЕ
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НалоговыйАгентНДС.НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
		|	НалоговыйАгентНДС.Контрагент,
		|	НалоговыйАгентНДС.Договор,
		|	НалоговыйАгентНДС.ДокументРасчетов,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры),
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами),
		|	Реквизиты.ПодразделениеДт,
		|	Реквизиты.СчетБанк,
		|	Реквизиты.СчетОрганизации,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств,
		|	НЕОПРЕДЕЛЕНО,
		|	Реквизиты.ПодразделениеОрганизации,
		|	НалоговыйАгентНДС.Сумма,
		|	НалоговыйАгентНДС.Сумма,
		|	Реквизиты.НалоговыйПериод,
		|	Реквизиты.РегистрацияВНалоговомОргане,
		|	Реквизиты.Дата
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета.НалоговыйАгентНДС КАК НалоговыйАгентНДС
		|		ПО Реквизиты.Ссылка = НалоговыйАгентНДС.Ссылка
		|ГДЕ
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента)";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты) КАК ВидСубконтоДт1,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры) КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоКт1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыДата КАК Период
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	Реквизиты.СчетРасчетовСПодотчетнымиЛицами КАК СчетДт,
		|	Реквизиты.ФизЛицо КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций) КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
		|	Реквизиты.СчетКонтрагента КАК СубконтоДт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета) КАК ВидСубконтоДт1,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств) КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	Реквизиты.ПодразделениеДт КАК ПодразделениеДт,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|ГДЕ
		|	НЕ &ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1,
		|	ВЫБОР
		|		КОГДА &ДокументВВалюте
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПутиВал)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути)
		|	КОНЕЦ,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	Реквизиты.ПодразделениеДт,
		|	Реквизиты.СчетБанк,
		|	Реквизиты.СчетОрганизации,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств,
		|	НЕОПРЕДЕЛЕНО,
		|	Реквизиты.ПодразделениеОрганизации,
		|	Реквизиты.СуммаДокумента,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)),
		|	NULL,
		|	НЕОПРЕДЕЛЕНО,
		|	Реквизиты.Дата
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|ГДЕ
		|	&ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам) КАК СчетДт,
		|	Реквизиты.ФизЛицо КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций) КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА &ДокументВВалюте
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПутиВал)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути)
		|	КОНЕЦ КАК СчетДт,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств) КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|ГДЕ
		|	&ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы) КАК СчетДт,
		|	&РасходыНаУслугиБанков КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ЛОЖЬ КАК ИспользоватьНомераСубконто,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы) КАК ВидСубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК ВидСубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	НЕОПРЕДЕЛЕНО КАК РегистрацияВНалоговомОргане,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежаПрочее", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежаПрочее", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ?(ТекстЗапроса = "", "", ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());
	
КонецФункции

Функция ТекстЗапросаПеречислениеЗарплаты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура перечисления зарплаты вызывается для операций:
	// - ПеречислениеЗП
	// - ПеречислениеЗаработнойПлатыРаботнику
	
	Если Не Реквизиты.ЭтоВыплатаЗарплаты Или Не УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
		ПараметрыПроведения.Вставить("ПеречислениеЗарплаты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПеречислениеЗарплаты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.СуммаДокумента КАК СуммаКВыплате,
	|	Реквизиты.Контрагент КАК ФизическоеЛицо,
	|	0 КАК КомпенсацияЗаЗадержкуЗарплаты,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СчетОрганизации КАК БанковскийСчет,
	|	Реквизиты.СчетБанк КАК СчетУчета,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаКомпенсации,
	|	Реквизиты.СубконтоДт1 КАК СубконтоУчетаКомпенсации1,
	|	Реквизиты.СубконтоДт2 КАК СубконтоУчетаКомпенсации2,
	|	Реквизиты.СубконтоДт3 КАК СубконтоУчетаКомпенсации3,
	|	Реквизиты.ПодразделениеДт КАК ПодразделениеУчетаКомпенсации,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ЛОЖЬ КАК ИспользуетсяЭлектронныйОбмен,
	|	НЕОПРЕДЕЛЕНО КАК Ведомость,
	|	Реквизиты.ПлатежнаяВедомость КАК ПлатежнаяВедомость
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаОплатаПоДоговорамПодряда(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		ПараметрыПроведения.Вставить("ОплатаПоДоговорамПодряда", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.СуммаДокумента КАК СуммаКВыплате,
	|	Реквизиты.Контрагент КАК ФизическоеЛицо,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СчетОрганизации КАК БанковскийСчет,
	|	Реквизиты.СчетБанк КАК СчетУчета,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	НомераТаблиц.Вставить("ОплатаПоДоговорамПодряда", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПеречислениеДепонентов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		ПараметрыПроведения.Вставить("ПеречислениеДепонентов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
		И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Ведомость,
		|	Реквизиты.ФизЛицо КАК ФизическоеЛицо,
		|	Реквизиты.СуммаДокумента КАК СуммаКВыплате,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Реквизиты.СчетОрганизации КАК БанковскийСчет,
		|	Реквизиты.СчетБанк КАК СчетУчета,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение
		|ИЗ
		|	Реквизиты КАК Реквизиты";
		
	Иначе
		
		НомераТаблиц.Вставить("ВТ_Документ", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ_Ведомости", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Ведомость,
		|	Реквизиты.ФизЛицо КАК ФизическоеЛицо,
		|	Реквизиты.СуммаДокумента КАК СуммаКВыплате,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Реквизиты.СчетОрганизации КАК БанковскийСчет,
		|	Реквизиты.СчетБанк КАК СчетУчета,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Документ
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПеречислениеДепонентов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПеречислениеДепонентов.Ведомость КАК Ведомость,
		|	Реквизиты.ФизЛицо КАК ФизическоеЛицо,
		|	ТаблицаПеречислениеДепонентов.СуммаПлатежа КАК СуммаКВыплате
		|ПОМЕСТИТЬ ВТ_Ведомости
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета.ПеречислениеДепонентов КАК ТаблицаПеречислениеДепонентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаПеречислениеДепонентов.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ТаблицаПеречислениеДепонентов.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_Ведомости.НомерСтроки, 1) КАК НомерСтроки,
		|	ВТ_Документ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ВТ_Ведомости.Ведомость, НЕОПРЕДЕЛЕНО) КАК Ведомость,
		|	ВТ_Документ.БанковскийСчет КАК БанковскийСчет,
		|	ВТ_Документ.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ВТ_Документ.СчетУчета КАК СчетУчета,
		|	ВТ_Документ.Подразделение КАК Подразделение,
		|	ЕСТЬNULL(ВТ_Ведомости.СуммаКВыплате, ВТ_Документ.СуммаКВыплате) КАК СуммаКВыплате
		|ИЗ
		|	ВТ_Документ КАК ВТ_Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Ведомости КАК ВТ_Ведомости
		|		ПО ВТ_Документ.ФизическоеЛицо = ВТ_Ведомости.ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПеречислениеДепонентов", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ПоступлениеМПЗИПРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ПоступлениеТоваровУслуг"" КАК ТипПоступления,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	НЕОПРЕДЕЛЕНО КАК ТипСклада,
	|	ИСТИНА КАК НДСВключенВСтоимость,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	Реквизиты.ВидОперации КАК ВидОперации
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Если НЕ ПараметрыПроведения.ПлательщикНДФЛ
		ИЛИ Реквизиты.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
			И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаУслуг", Неопределено);
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", Неопределено);
		Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
	"ВЫБРАТЬ
	|	"""" КАК ИмяСписка,
	|	"""" КАК СинонимСписка,
	|	1 КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	0 КАК НДС,
	|	0 КАК Количество,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ВестиУчетПоВидамДеятельностиИП
	|			ТОГДА &ОсновнаяНоменклатурнаяГруппа
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.СубконтоДт1
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.СубконтоДт2
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.СубконтоДт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ Реквизиты.СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ Реквизиты.СубконтоДт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА Реквизиты.СубконтоДт1
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ Реквизиты.СубконтоДт2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ Реквизиты.СубконтоДт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА Реквизиты.СубконтоДт2
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ Реквизиты.СубконтоДт3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ Реквизиты.СубконтоДт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА Реквизиты.СубконтоДт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидРасходовНУ,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПринятиеКналоговомуУчету,
	|	НЕОПРЕДЕЛЕНО КАК Партия
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаУслуг",          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПеречислениеНалогаИП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ПараметрыПроведения.Вставить("ПеречислениеНалогаИПТаблица", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	"""" КАК ИмяСписка,
	|	"""" КАК СинонимСписка,
	|	1 КАК НомерСтроки,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
	|	Реквизиты.СубконтоДт1 КАК СубконтоДт1,
	|	Реквизиты.СубконтоДт2 КАК СубконтоДт2,
	|	Реквизиты.СубконтоДт3 КАК СубконтоДт3,
	|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	НомераТаблиц.Вставить("ПеречислениеНалогаИПТаблица", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ПолучитьТаблицыОплатыТруда(ПараметрыПроведения, ДокументСсылка)
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	
	ПроверятьСоответствиеСуммыДокументаИВедомости = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
		ИЛИ УчетЗарплатыИКадровВоВнешнейПрограмме И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам");
		
	Если НЕ ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
		Возврат Неопределено;
	Иначе
		ПараметрыПроведения.Вставить("ПеречислениеЗарплатыПроведение", ПараметрыПроведения.ПеречислениеЗарплаты);
		ПараметрыПроведения.Вставить("ПеречислениеЗарплаты", Неопределено);
	КонецЕсли;
	
	ПараметрыОплаты = Ложь;
	
	ДанныеДокумента = Новый Структура("СтатьяДвиженияДенежныхСредств,
		|Подразделение, СчетУчета, БанковскийСчет, СчетУчетаКомпенсации,
		|СубконтоУчетаКомпенсации1, СубконтоУчетаКомпенсации2, СубконтоУчетаКомпенсации3, ПодразделениеУчетаКомпенсации, ВидОперации,
		|ФизическоеЛицо, ПлатежнаяВедомость");
	
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, ПараметрыПроведения.ПеречислениеЗарплатыПроведение[0]);
	Если ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ДанныеДокумента.ПлатежнаяВедомость);
		
		ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(
			ДокументСсылка, Ведомости, ДанныеДокумента.ФизическоеЛицо, Неопределено);
		
	Иначе
		
		Ведомости = ДокументСсылка.ПеречислениеЗаработнойПлаты.ВыгрузитьКолонку("Ведомость");
		
		Если Ведомости.Количество() <> 0 Тогда
			ПлатежнаяВедомость = Ведомости[0];
		КонецЕсли;
		
		ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(
			ДокументСсылка, Ведомости,, Ложь);
		
	КонецЕсли;
	
	УчетЗарплаты.ПодготовитьТаблицуВыплатыЗарплаты(ТаблицаВедомостей);
	
	Если ПараметрыОплаты Тогда
		ИспользуетсяЭлектронныйОбмен = Истина;
	Иначе
		ИспользуетсяЭлектронныйОбмен = Ложь;
	КонецЕсли;
	
	Если ТаблицаВедомостей.Количество() > 0 Тогда
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.Подразделение,                 "Подразделение");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СтатьяДвиженияДенежныхСредств, "СтатьяДвиженияДенежныхСредств");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СчетУчета,                     "СчетУчета");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.БанковскийСчет,                "БанковскийСчет");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СчетУчетаКомпенсации,          "СчетУчетаКомпенсации");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СубконтоУчетаКомпенсации1,     "СубконтоУчетаКомпенсации1");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СубконтоУчетаКомпенсации2,     "СубконтоУчетаКомпенсации2");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СубконтоУчетаКомпенсации3,     "СубконтоУчетаКомпенсации3");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.ПодразделениеУчетаКомпенсации, "ПодразделениеУчетаКомпенсации");
		ТаблицаВедомостей.ЗаполнитьЗначения(ИспользуетсяЭлектронныйОбмен,                  "ИспользуетсяЭлектронныйОбмен");
	Иначе
		Возврат ТаблицаВедомостей;
	КонецЕсли;
	
	Возврат ТаблицаВедомостей;
	
КонецФункции

Функция ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРуб
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДСРуб
		|		КОГДА СчетНаОплатуПоставщика.ВалютаДокумента = &ВалютаДокумента
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаНДСРуб * ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК СуммаНДС,
		|	СчетНаОплатуПоставщика.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПоставщика.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ОплатаСчетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ОплатаСчетов", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПеречислениеНДФЛ(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ПараметрыПроведения.Вставить("ПеречислениеНДФЛ", Неопределено);
		Возврат "";
	КонецЕсли;
		
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаПеречислениеНДФЛ.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПеречислениеНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаПеречислениеНДФЛ.Сумма КАК Сумма,
		|	ТаблицаПеречислениеНДФЛ.Ставка КАК Ставка,
		|	ТаблицаПеречислениеНДФЛ.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
		|	ТаблицаПеречислениеНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
		|	ТаблицаПеречислениеНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета.ПеречислениеНДФЛ КАК ТаблицаПеречислениеНДФЛ
		|ГДЕ
		|	ТаблицаПеречислениеНДФЛ.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаПеречислениеНДФЛ.НомерСтроки";
	
	НомераТаблиц.Вставить("ПеречислениеНДФЛ", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстСодержанияПроводокДокумента(Реквизиты)
	
	ПозицияСуммы = СтрНайти(Реквизиты.Содержание, "Сумма ");
	Если ПозицияСуммы = 0 Тогда
		ТекстНазначение = Реквизиты.Содержание;
	Иначе
		ТекстНазначение = Лев(Реквизиты.Содержание, ПозицияСуммы - 1);
	КонецЕсли;
	
	Содержание = СокрЛП(СтрЗаменить(ТекстНазначение, Символы.ПС, " "))
		+ " по вх.д. " + Реквизиты.НомерВходящегоДокумента
		+ " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
	
	Возврат Содержание;
	
КонецФункции

Функция ТекстЗапросаПеречислениеДивидендов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов Тогда
		ПараметрыПроведения.Вставить("ВыплатаДивидендов", Неопределено);
		Возврат "";
	КонецЕсли;
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.СуммаДокумента КАК СуммаКВыплате,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СчетОрганизации КАК БанковскийСчет,
	|	Реквизиты.СчетБанк КАК СчетУчета,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.НачислениеДивидендов КАК НачислениеДивидендов,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизическоеЛицо
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	НомераТаблиц.Вставить("ВыплатаДивидендов", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

#КонецОбласти

#Область ОтложенноеПроведение

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Дата) Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;

	Если (Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц)
		И НЕ Реквизиты.БезЗакрывающихДокументов Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыДата КАК Дата
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа";
	Иначе
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ОбработкаОтложенногоПроведения(Параметры, Отказ) Экспорт
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведения(
		Параметры.Регистратор,
		Отказ,
		Параметры.ДоговорКонтрагента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	ТаблицаВзаиморасчетов = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		Параметры, 
		ПараметрыПроведения.РасшифровкаПлатежа,
		ПараметрыПроведения.Реквизиты,
		Отказ);

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов",	ТаблицаВзаиморасчетов);

	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияПогашениеЗадолженности(
		Параметры,
		ТаблицаВзаиморасчетов,
		ПараметрыПроведения.Реквизиты,
		Отказ);

	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияУСН(
		Параметры,
		СтруктураТаблицУСН);

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Списание с расчетного счета""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;
	
	ПолеЗапросаНазначениеПлатежа =
	"ВЫБОР
	|		КОГДА Таб.НазначениеПлатежа = """"
	|			ТОГДА Таб.Контрагент
	|		КОГДА Таб.Контрагент = НЕОПРЕДЕЛЕНО
	|			ТОГДА Таб.НазначениеПлатежа
	|		КОГДА Таб.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Таб.НазначениеПлатежа
	|		ИНАЧЕ ПОДСТРОКА(Таб.Контрагент.Наименование, 1, 100) + "" / "" + ПОДСТРОКА(Таб.НазначениеПлатежа, 1, 210)
	|	КОНЕЦ";
	
	Результат.Вставить("Информация", ПолеЗапросаНазначениеПлатежа);
	
	Возврат Результат;
	
КонецФункции

// Формирует печатные формы
//
// Параметры:
//  (входные)
//    МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати - Структура - дополнительные настройки печати;
//  (выходные)
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы
//   ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                             представление - имя области в которой был выведен объект;
//   ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрПеречисленныхСумм") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПФ_MXL_РеестрПеречисленныхСумм", "Реестр перечисленных сумм", ПечатьРеестра(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьРеестра(МассивОбъектов, ОбъектыПечати)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов",
		МассивОбъектов);
	Запрос.УстановитьПараметр("РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций",
		БухгалтерскийУчетПереопределяемый.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций());
	Запрос.УстановитьПараметр("ПустаяРегистрацияВНалоговомОргане",
		Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеСРасчетногоСчета.Организация КАК Организация,
	|	СписаниеСРасчетногоСчета.НалоговыйПериод КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА &РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций
	|			ТОГДА СписаниеСРасчетногоСчета.РегистрацияВНалоговомОргане
	|		КОГДА ТИПЗНАЧЕНИЯ(ЕСТЬNULL(СписаниеСРасчетногоСчета.СубконтоДт2, &ПустаяРегистрацияВНалоговомОргане)) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА СписаниеСРасчетногоСчета.СубконтоДт2
	|		ИНАЧЕ &ПустаяРегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	НАЧАЛОПЕРИОДА(СписаниеСРасчетногоСчета.Дата, ДЕНЬ) КАК ДатаПлатежа,
	|	СписаниеСРасчетногоСчета.НомерВходящегоДокумента КАК ПлатежноеПоручениеНомер,
	|	СписаниеСРасчетногоСчета.ДатаВходящегоДокумента КАК ПлатежноеПоручениеДата
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Ссылка В(&МассивОбъектов)
	|	И СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Колонки.Найти("ГлавныйБухгалтер") = Неопределено Тогда
		РезультатЗапроса.Колонки.Добавить("ГлавныйБухгалтер", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		Если РезультатЗапроса.Колонки.Найти("Бухгалтер") = Неопределено Тогда
			РезультатЗапроса.Колонки.Добавить("Бухгалтер", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы ИЗ РезультатЗапроса Цикл
		ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаТаблицы.Организация, СтрокаТаблицы.ДатаПлатежа);
		СтрокаТаблицы.ГлавныйБухгалтер = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
	КонецЦикла;
	
	ТабличныйДокумент = УчетНДФЛ.РеестрПеречисленныхСуммНалога(РезультатЗапроса);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, МассивОбъектов);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

Процедура ЗаполнитьРеквизитыНастройкиУСНДляАктуальныхДокументов() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГраницаАктуальногоПериода",
		УчетУСН.ДатаНачалаАктуальногоПериодаДляПереходаНаУпрощеннуюНастройкуКУДиР());
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	ВидыОперацийРасчетыУСН = Новый Массив;
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц);
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	Запрос.УстановитьПараметр("ВидыОперацийРасчетыУСН", ВидыОперацийРасчетыУСН);
	
	ВидыОперацийПрочиеСписания = Новый Массив;
	ВидыОперацийПрочиеСписания.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	ВидыОперацийПрочиеСписания.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных);
	ВидыОперацийПрочиеСписания.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	Запрос.УстановитьПараметр("ВидыОперацийПрочиеСписания", ВидыОперацийПрочиеСписания);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.ДатаДокумента КАК ДатаДокумента,
	|	ВложенныйЗапрос.ВидОбработкиОбновления
	|ИЗ
	|	(ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|		СписаниеСРасчетногоСчета.Дата КАК ДатаДокумента,
	|		""ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходы"" КАК ВидОбработкиОбновления
	|	ИЗ
	|		Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО СписаниеСРасчетногоСчета.Организация = ВТ_УчетнаяПолитика.Организация
	|				И СписаниеСРасчетногоСчета.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|				И СписаниеСРасчетногоСчета.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.УдалитьРучнаяНастройка_УСН
	|		И СписаниеСРасчетногоСчета.Дата >= &ГраницаАктуальногоПериода
	|		И ВТ_УчетнаяПолитика.ПрименяетсяУСНДоходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка,
	|		СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата,
	|		""ЗаполнитьРасходыУСНПрочиеРасчеты""
	|	ИЗ
	|		Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Организация = ВТ_УчетнаяПолитика.Организация
	|				И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|				И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|	ГДЕ
	|		СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОперацийРасчетыУСН)
	|		И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата >= &ГраницаАктуальногоПериода
	|		И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Графа7_УСН <> 0
	|		И ВТ_УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка,
	|		СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(СписаниеСРасчетногоСчетаРасшифровкаПлатежа.РасходыУСН) = 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.Дата,
	|		""ОбработатьРучнуюНастройкуУСНПрочиеСписания""
	|	ИЗ
	|		Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО СписаниеСРасчетногоСчета.Организация = ВТ_УчетнаяПолитика.Организация
	|				И СписаниеСРасчетногоСчета.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|				И СписаниеСРасчетногоСчета.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.ВидОперации В(&ВидыОперацийПрочиеСписания)
	|		И СписаниеСРасчетногоСчета.Дата >= &ГраницаАктуальногоПериода
	|		И СписаниеСРасчетногоСчета.УдалитьРучнаяНастройка_УСН
	|		И ВТ_УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаПоДокументу Из РезультатЗапроса Цикл
		
		Попытка
			
			Если СтрокаПоДокументу.ВидОбработкиОбновления = "ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходы" Тогда
				ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходы(СтрокаПоДокументу);
			ИначеЕсли СтрокаПоДокументу.ВидОбработкиОбновления = "ЗаполнитьРасходыУСНПрочиеРасчеты" Тогда
				ЗаполнитьРасходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаПоДокументу);
			ИначеЕсли СтрокаПоДокументу.ВидОбработкиОбновления = "ОбработатьРучнуюНастройкуУСНПрочиеСписания" Тогда
				ОбработатьРучнуюНастройкуУСНПрочиеСписания(СтрокаПоДокументу);
			КонецЕсли;
			
		Исключение
			// Если не удалось обработать какой-либо документ, пропускаем и обрабатываем позднее (отложенно).
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать списание с расчетного счета: %1 по причине:
					|%2'"),
					СтрокаПоДокументу.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СписаниеСРасчетногоСчета, СтрокаПоДокументу.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходыОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСНДоходы
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчета.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО СписаниеСРасчетногоСчета.Организация = ВТ_УчетнаяПолитика.Организация
	|			И СписаниеСРасчетногоСчета.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И СписаниеСРасчетногоСчета.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	СписаниеСРасчетногоСчета.УдалитьРучнаяНастройка_УСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходы(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать списание с расчетного счета: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СписаниеСРасчетногоСчета, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходыОтложенно
				|не удалось обработать некоторые списания с расчетного счета (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.СписаниеСРасчетногоСчета,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходыОтложенно
					|обработала очередную порцию списаний с расчетного счета: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасходыУСНПрочиеРасчетыОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	ВидыОперацийРасчетыУСН = Новый Массив;
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц);
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	Запрос.УстановитьПараметр("ВидыОперацийРасчетыУСН", ВидыОперацийРасчетыУСН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСНДоходыМинусРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Организация = ВТ_УчетнаяПолитика.Организация
	|			И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОперацийРасчетыУСН)
	|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Графа7_УСН <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка,
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата
	|
	|ИМЕЮЩИЕ
	|	СУММА(СписаниеСРасчетногоСчетаРасшифровкаПлатежа.РасходыУСН) = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ЗаполнитьРасходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать списание с расчетного счета: %1 по причине:
					|%2'"), 
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СписаниеСРасчетногоСчета, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьРасходыУСНПрочиеРасчетыОтложенно
				|не удалось обработать некоторые списания с расчетного счета (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.СписаниеСРасчетногоСчета,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьРасходыУСНПрочиеРасчетыОтложенно
					|обработала очередную порцию списаний с расчетного счета: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРучнуюНастройкуУСНПрочиеСписанияОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	ВидыОперацийПрочиеСписания = Новый Массив;
	ВидыОперацийПрочиеСписания.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных);
	ВидыОперацийПрочиеСписания.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	ВидыОперацийПрочиеСписания.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	Запрос.УстановитьПараметр("ВидыОперацийПрочиеСписания", ВидыОперацийПрочиеСписания);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСНДоходыМинусРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчета.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО СписаниеСРасчетногоСчета.Организация = ВТ_УчетнаяПолитика.Организация
	|			И СписаниеСРасчетногоСчета.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И СписаниеСРасчетногоСчета.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ВидОперации В(&ВидыОперацийПрочиеСписания)
	|	И СписаниеСРасчетногоСчета.УдалитьРучнаяНастройка_УСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ОбработатьРучнуюНастройкуУСНПрочиеСписания(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать списание с расчетного счета: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СписаниеСРасчетногоСчета, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ОбработатьРучнуюНастройкуУСНПрочиеСписанияОтложенно
				|не удалось обработать некоторые списания с расчетного счета (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.СписаниеСРасчетногоСчета,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОбработатьРучнуюНастройкуУСНПрочиеСписанияОтложенно
					|обработала очередную порцию списаний с расчетного счета: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

// Для списаний денежных средств, оформленных по организациям, применяющим УСН с объектом налогообложения "Доходы",
// в которых настройка УСН отредактирована пользователем вручную, устанавливается признак ручной корректировки движений
Процедура ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходы(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СписаниеСРасчетногоСчета");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Обработка объекта
		ДокументОбъект.РучнаяКорректировка = Истина;
		ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет новые реквизиты "РасходыУСН" и "НДСУСН" в ТЧ "РасшифровкаПлатежа" у переданного документа
//
Процедура ЗаполнитьРасходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СписаниеСРасчетногоСчета");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если ДокументОбъект.Графа7_УСН = ДокументОбъект.РасшифровкаПлатежа.Итог("РасходыУСН")
			И НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Обработка объекта.
		КоэффициентыРаспределения = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("СуммаПлатежа");
		
		МассивРаспределенныхРасходов = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ДокументОбъект.Графа7_УСН, КоэффициентыРаспределения);
		Если МассивРаспределенныхРасходов <> Неопределено Тогда	
			ДокументОбъект.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивРаспределенныхРасходов, "РасходыУСН");
		КонецЕсли;
		
		МассивРаспределенногоНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ДокументОбъект.НДС_УСН, КоэффициентыРаспределения);
		Если МассивРаспределенногоНДС <> Неопределено Тогда	
			ДокументОбъект.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивРаспределенногоНДС, "НДСУСН"); 
		КонецЕсли;
		
		Для каждого СтрокаТЧ Из ДокументОбъект.РасшифровкаПлатежа Цикл
			СтрокаТЧ.РаспределятьРасходыУСН = ДокументОбъект.РасходыЕНВД_УСН;
		КонецЦикла;
		
		Если ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			Если ДокументОбъект.Графа4_УСН <> 0 ИЛИ ДокументОбъект.Графа5_УСН <> 0 ИЛИ ДокументОбъект.ДоходыЕНВД_УСН Тогда
				ДокументОбъект.РучнаяКорректировка = Истина;
				ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для прочих списаний, в которых настройка УСН отредактирована пользователем вручную:
//    если отредактированы только расходы УСН, НДС по расходами и признак распределения расходов - ручная настройка УСН сбрасывается;
//    для остальных случаев - выставляется признак ручной корректировки движений.
Процедура ОбработатьРучнуюНастройкуУСНПрочиеСписания(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СписаниеСРасчетногоСчета");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если НЕ ДокументОбъект.РучнаяКорректировка
			И (ДокументОбъект.Графа4_УСН <> 0 ИЛИ ДокументОбъект.Графа5_УСН <> 0 ИЛИ ДокументОбъект.ДоходыЕНВД_УСН) Тогда
			ДокументОбъект.РучнаяКорректировка = Истина;
			// Иначе: если заданы только расходы УСН (Графа 7, НДС, распределение расходов) - признак ручной корректировки не изменяем
		КонецЕсли;
		
		ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьНалоговыйПериодПриУплатеСтраховыхВзносовИП() Экспорт
	
	СчетаУчетаСтраховыхВзносовИП = Новый Массив;
	СчетаУчетаСтраховыхВзносовИП.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП);
	СчетаУчетаСтраховыхВзносовИП.Добавить(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод);
	СчетаУчетаСтраховыхВзносовИП.Добавить(ПланыСчетов.Хозрасчетный.ФСС_СтраховойГод);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаУчетаСтраховыхВзносовИП", СчетаУчетаСтраховыхВзносовИП);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И СписаниеСРасчетногоСчета.СчетУчетаРасчетовСКонтрагентом В(&СчетаУчетаСтраховыхВзносовИП)
	|	И СписаниеСРасчетногоСчета.НалоговыйПериод = ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.НалоговыйПериод = НачалоГода(Объект.Дата);
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		Исключение
			ТекстШаблона = НСтр("ru = 'Не удалось обработать документ. 
				|%1'");
			ТекстСообщения = СтрШаблон(ТекстШаблона, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.СписаниеСРасчетногоСчета, Выборка.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьКонтрагентаНаФизическоеЛицо(Параметры) Экспорт
	
	// Обработчик обновления заменен на монопольный ЗаменитьКонтрагентаНаФизическоеЛицоМонопольно()
	
	ЗаменитьКонтрагентаНаФизическоеЛицоМонопольно();
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

//Производится перенос значения реквизита ФизическоеЛицо в реквизит Контрагент
//если сведений о физическом лице нет - оно создается на основании контрагента
//
Процедура ЗаменитьКонтрагентаНаФизическоеЛицоМонопольно() Экспорт
	
	Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() И Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Получить() Тогда
		// Нет сведений о сотрудниках
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу)
	|	И НЕ СписаниеСРасчетногоСчета.Контрагент ССЫЛКА Справочник.ФизическиеЛица
	|	И СписаниеСРасчетногоСчета.УдалитьФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Контрагент = ДокументОбъект.УдалитьФизЛицо;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет новый реквизиты "Налог"
//
Процедура ЗаполнитьРеквизитНалог() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеСРасчетногоСчета.Ссылка,
	|	СписаниеСРасчетногоСчета.Организация,
	|	СписаниеСРасчетногоСчета.Дата,
	|	СписаниеСРасчетногоСчета.СчетУчетаРасчетовСКонтрагентом,
	|	СписаниеСРасчетногоСчета.СубконтоДт1,
	|	СписаниеСРасчетногоСчета.СубконтоДт2,
	|	СписаниеСРасчетногоСчета.СубконтоДт3,
	|	ЕСТЬNULL(ЕСТЬNULL(ПлатежноеПоручение1.Налог, ПлатежноеПоручение2.Налог), НЕОПРЕДЕЛЕНО) КАК Налог,
	|	ЕСТЬNULL(ЕСТЬNULL(ПлатежноеПоручение1.Ссылка, ПлатежноеПоручение2.Ссылка), НЕОПРЕДЕЛЕНО) КАК ПлатежноеПоручение
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение1
	|		ПО СписаниеСРасчетногоСчета.ДокументОснование = ПлатежноеПоручение1.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение2
	|		ПО СписаниеСРасчетногоСчета.Ссылка = ПлатежноеПоручение2.ДокументОснование
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И СписаниеСРасчетногоСчета.Налог = ЗНАЧЕНИЕ(Справочник.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Налог  = Выборка.Налог;
		
		Если ЗначениеЗаполнено(Налог) И (Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы) Тогда
			
			// Заполняем налог из платежного поручения
			Если Справочники.ВидыНалоговИПлатежейВБюджет.ОрганизацияМожетУплачиватьНалог(Налог, Объект.Организация) Тогда
				Объект.Налог = Налог;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.СчетУчетаРасчетовСКонтрагентом) Тогда
			
			// Попытаемся подобрать налог по счету учета и аналитике
			НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
				Выборка.СчетУчетаРасчетовСКонтрагентом, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
			УровеньБюджета = ?(НомерСубконто <> 0, Выборка["СубконтоДт" + НомерСубконто], Неопределено);
			
			ВидНалога = РасчетыСБюджетом.ВидНалогаПоСчетуУчета(Выборка.СчетУчетаРасчетовСКонтрагентом, Выборка.Организация, Выборка.Дата, УровеньБюджета);
			
			Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
			
			Если Справочники.ВидыНалоговИПлатежейВБюджет.ОрганизацияМожетУплачиватьНалог(Налог, Объект.Организация) Тогда
				Объект.Налог = Налог;
				Если ЗначениеЗаполнено(Объект.Налог) И Объект.Налог <> Выборка.Налог И ЗначениеЗаполнено(Выборка.ПлатежноеПоручение) Тогда
					ОбъектПлатежноеПоручение = Выборка.ПлатежноеПоручение.ПолучитьОбъект();
					ОбъектПлатежноеПоручение.Налог = Объект.Налог;
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектПлатежноеПоручение, Ложь);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Налог) Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьКредитыИЗаймы(Параметры) Экспорт
	
	СчетаРасчетовПоВыданнымЗаймам = Новый Массив();
	СчетаРасчетовПоВыданнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ПредоставленныеЗаймы);
	
	СчетаРасчетовПоПолученнымЗаймам = Новый Массив();
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймыВал);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал);
	
	СчетаРасчетовПоПолученнымКредитам = Новый Массив();
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредитыВал);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредитыВал);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВыданныеЗаймы", 		СчетаРасчетовПоВыданнымЗаймам); 
	Запрос.УстановитьПараметр("ПолученныеЗаймы", 	СчетаРасчетовПоПолученнымЗаймам);
	Запрос.УстановитьПараметр("ПолученныеКредиты", 	СчетаРасчетовПоПолученнымКредитам);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка КАК СписаниеСРасчетногоСчета,
	|	СРЕДНЕЕ(ВЫБОР
	|			КОГДА СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ВыданныеЗаймы)
	|				ТОГДА 1
	|			КОГДА СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ПолученныеЗаймы)
	|				ТОГДА 2
	|			КОГДА СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ПолученныеКредиты)
	|				ТОГДА 3
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КодВидаОперации,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ВыданныеЗаймы)
	|				ТОГДА 1
	|			КОГДА СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ПолученныеЗаймы)
	|				ТОГДА 2
	|			КОГДА СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ПолученныеКредиты)
	|				ТОГДА 3
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КодВидаОперацииМинимум
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	|ГДЕ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			Если Не ЗначениеЗаполнено(Выборка.СписаниеСРасчетногоСчета) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = Выборка.СписаниеСРасчетногоСчета.ПолучитьОбъект();
			
			Если Выборка.КодВидаОперации <> Выборка.КодВидаОперацииМинимум 
				ИЛИ Выборка.КодВидаОперации = 0 Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
			ИначеЕсли Выборка.КодВидаОперации = 1 Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту;
			ИначеЕсли Выборка.КодВидаОперации = 2 Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма;
				Для Каждого СтрокаПлатеж Из ДокументОбъект.РасшифровкаПлатежа Цикл
					Если СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам
						ИЛИ СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал
						ИЛИ СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам
						ИЛИ СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал Тогда
						СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов;
					Иначе
						СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;
					КонецЕсли;		
				КонецЦикла;
			ИначеЕсли Выборка.КодВидаОперации = 3 Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита;
				Для Каждого СтрокаПлатеж Из ДокументОбъект.РасшифровкаПлатежа Цикл
					Если СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам
						ИЛИ СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал
						ИЛИ СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам
						ИЛИ СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал Тогда
						СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов;
					Иначе
						СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;
					КонецЕсли;					
				КонецЦикла;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось опеределить вид расчетов по кредитам и займам в Списание с расчетного счета ""%1"" по причине:
				|%2'"), 
				Выборка.СписаниеСРасчетногоСчета,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.СписаниеСРасчетногоСчета, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре СписаниеСРасчетногоСчета.ОбработатьКредитыИЗаймы
				|не удалось опеределить вид расчетов по кредитам и займам в %1 документах Списание с расчетного счета.'"), 
				ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура СписаниеСРасчетногоСчета.ОбработатьКредитыИЗаймы
				|обработала очередную порцию документов Списание с расчетного счета: %1 элементов'"), 
				ОбъектовОбработано));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет новый реквизит "ВидНалоговогоОбязательства"
//
Процедура ЗаполнитьРеквизитВидНалоговогоОбязательства() Экспорт
	
	ФиксированныеВзносыПФР = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть;
	
	МассивВзносов = Новый Массив;
	МассивВзносов.Добавить(Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ФиксированныеВзносыПФР));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоДействияПриказа90н", ПлатежиВБюджетКлиентСервер.НачалоДействияПриказа90н());
	Запрос.УстановитьПараметр("МассивВзносов",            МассивВзносов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка,
	|	СписаниеСРасчетногоСчета.Дата КАК Период,
	|	СписаниеСРасчетногоСчета.Налог.ВидНалога КАК ВидНалога,
	|	ЕСТЬNULL(ЕСТЬNULL(ПлатежноеПоручение1.ВидНалоговогоОбязательства, ПлатежноеПоручение2.ВидНалоговогоОбязательства), НЕОПРЕДЕЛЕНО) КАК ВидНалоговогоОбязательства
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение1
	|		ПО СписаниеСРасчетногоСчета.ДокументОснование = ПлатежноеПоручение1.Ссылка
	|			И (СписаниеСРасчетногоСчета.Дата >= &НачалоДействияПриказа90н)
	|			И (СписаниеСРасчетногоСчета.Налог В (&МассивВзносов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение2
	|		ПО СписаниеСРасчетногоСчета.Ссылка = ПлатежноеПоручение2.ДокументОснование
	|			И (СписаниеСРасчетногоСчета.Дата >= &НачалоДействияПриказа90н)
	|			И (СписаниеСРасчетногоСчета.Налог В (&МассивВзносов))
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И СписаниеСРасчетногоСчета.ВидНалоговогоОбязательства = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Выборка.ВидНалоговогоОбязательства) Тогда
			// Уточняем вид обязательства по взносам в соответствии с Приказом Минфина №90н от 08.06.2015
			Объект.ВидНалоговогоОбязательства = Выборка.ВидНалоговогоОбязательства;
			Если Объект.ВидНалоговогоОбязательства <> ВидНалоговогоОбязательстваПоАналитикеПлатежа(Объект) Тогда
				ВидНалоговогоОбязательстваПриИзменении(Объект);
			КонецЕсли;
		Иначе
			Объект.ВидНалоговогоОбязательства = ВидНалоговогоОбязательстваПоАналитикеПлатежа(Объект);
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСчетПФР_ОПС_ИП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетУчетаУдаленный", ПланыСчетов.Хозрасчетный.УдалитьПФР_ОПС_ИП);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.СчетУчетаРасчетовСКонтрагентом = &СчетУчетаУдаленный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		ПланыСчетов.Хозрасчетный.ЗаменитьСчетПФР_ОПС_ИПвДокументе(Объект, "СчетУчетаРасчетовСКонтрагентом", "СубконтоДт");
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления версии 3.0.51
// Заполняет новую табличную часть "НалоговыйАгентНДС" для документов с видом операции "Перечисление налога"
// и счетом расчетов 68.32.
Процедура ЗаполнитьТаблицуНалоговыйАгентНДСОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчета.Дата КАК ДокументДата,
	|	СписаниеСРасчетногоСчета.СубконтоДт1 КАК Контрагент,
	|	СписаниеСРасчетногоСчета.СубконтоДт2 КАК Договор,
	|	СписаниеСРасчетногоСчета.СубконтоДт3 КАК ДокументРасчетов,
	|	СписаниеСРасчетногоСчета.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета.НалоговыйАгентНДС КАК ТаблицаНалоговыйАгентНДС
	|		ПО СписаниеСРасчетногоСчета.Ссылка = ТаблицаНалоговыйАгентНДС.Ссылка
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И СписаниеСРасчетногоСчета.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента)
	|	И ТаблицаНалоговыйАгентНДС.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ЗаполнитьТабличнуюЧастьНалоговыйАгентНДС(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СписаниеСРасчетногоСчета, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьТаблицуНалоговыйАгентНДСОтложенно
				|не удалось обработать некоторые документы Списание с расчетного счета (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.СписаниеСРасчетногоСчета,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьТаблицуНалоговыйАгентНДСОтложенно
					|обработала очередную порцию документов Списание с расчетного счета: %1'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьНалоговыйАгентНДС(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СписаниеСРасчетногоСчета");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если ДокументОбъект.НалоговыйАгентНДС.Количество() > 0 Тогда
			// Документ уже обработан.
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = ДокументОбъект.НалоговыйАгентНДС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоДокументу);
		
		ДокументОбъект.СубконтоДт1 = Неопределено;
		ДокументОбъект.СубконтоДт2 = Неопределено;
		ДокументОбъект.СубконтоДт3 = Неопределено;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик обновления версии 3.0.52
// Заполняет реквизит "Документ расчетов" в табличной части "НалоговыйАгентНДС" для документов 
// с видом операции "Перечисление налога" и счетом расчетов 68.32, по которым отражена оплата 
// налога за комитента-нерезидента.
// Т.к. в 3.0.51 реквизит "Документ расчетов" не содержал тип "ДокументСсылка.РеализацияТоваровУслуг" 
// процедура "ЗаполнитьТабличнуюЧастьНалоговыйАгентНДС" не смогла отработать верно.
// Информацию о документе расчетов заполняем на основании движений документа.
Процедура ОбработатьОплатуНДСНалоговогоАгентаЗаКомитента() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНалоговыйАгентНДС.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОплатаНалогаЗаКомитента
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета.НалоговыйАгентНДС КАК ТаблицаНалоговыйАгентНДС
	|		ПО СписаниеСРасчетногоСчета.Ссылка = ТаблицаНалоговыйАгентНДС.Ссылка
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И СписаниеСРасчетногоСчета.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента)
	|	И СписаниеСРасчетногоСчета.Проведен
	|	И ТаблицаНалоговыйАгентНДС.ДокументРасчетов = НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаНалоговыйАгентНДС.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйСубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйСубконто.Значение КАК Значение,
	|	ХозрасчетныйСубконто.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ЗначенияСубконто
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОплатаНалогаЗаКомитента КАК ОплатаНалогаЗаКомитента
	|		ПО (ОплатаНалогаЗаКомитента.Ссылка = ХозрасчетныйСубконто.Регистратор)
	|ГДЕ
	|	ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|	И ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйСубконто.Регистратор,
	|	ХозрасчетныйСубконто.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыРасчетов.Значение КАК ДокументРасчетов,
	|	Хозрасчетный.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияСубконто КАК ДокументыРасчетов
	|		ПО Хозрасчетный.Регистратор = ДокументыРасчетов.Регистратор
	|			И Хозрасчетный.НомерСтроки = ДокументыРасчетов.НомерСтроки
	|ГДЕ
	|	Хозрасчетный.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента)
	|	И Хозрасчетный.Активность";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		
		ТаблицаНалоговыйАгент = ДокументОбъект.НалоговыйАгентНДС;
		
		Если ТаблицаНалоговыйАгент.Количество() <> 1 Тогда
			// Строки в документе добавлены вручную.
			Продолжить;
		КонецЕсли;
		
		ТаблицаНалоговыйАгент[0].ДокументРасчетов = Выборка.ДокументРасчетов;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьПериодНалоговыхПлатежейУСН() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыНалоговУСН", ПлатежиВБюджетКлиентСерверПереопределяемый.ВидыНалоговУСН());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчета.Дата КАК Дата,
	|	СписаниеСРасчетногоСчета.Организация КАК Организация,
	|	СписаниеСРасчетногоСчета.НалоговыйПериод КАК НалоговыйПериод,
	|	СписаниеСРасчетногоСчета.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_СписанияСРасчетногоСчета
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
	|		ПО СписаниеСРасчетногоСчета.Налог = ВидыНалоговИПлатежейВБюджет.Ссылка
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И ВидыНалоговИПлатежейВБюджет.ВидНалога В(&ВидыНалоговУСН)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчета.Организация КАК Организация,
	|	ЕСТЬNULL(ЕСТЬNULL(ПлатежноеПоручение1.Дата, ПлатежноеПоручение2.Дата), СписаниеСРасчетногоСчета.Дата) КАК ДатаПлатежа,
	|	ЕСТЬNULL(ЕСТЬNULL(ПлатежноеПоручение1.ПоказательПериода, ПлатежноеПоручение2.ПоказательПериода), """") КАК ПоказательПериода,
	|	СписаниеСРасчетногоСчета.НалоговыйПериод КАК НалоговыйПериод
	|ИЗ
	|	ВТ_СписанияСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение1
	|		ПО СписаниеСРасчетногоСчета.ДокументОснование = ПлатежноеПоручение1.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение2
	|		ПО СписаниеСРасчетногоСчета.Ссылка = ПлатежноеПоручение2.ДокументОснование"
	;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(Выборка.ПоказательПериода);
		
		КорректныйНалоговыйПериод = УчетУСН.НалоговыйПериодПоДаннымПлатежногоДокумента(
			ОписаниеПериода,
			Выборка.ДатаПлатежа,
			Выборка.Организация);
		
		Если Выборка.НалоговыйПериод <> КорректныйНалоговыйПериод Тогда
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.НалоговыйПериод = КорректныйНалоговыйПериод;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьЧека

// Текст запроса таблиц расшировки платежа
// при возврате по документу "Возврат товаров от покупателя"
Функция ТекстЗапросаРеквизитыПечатиЧека(ИменаТаблиц)
	ИменаТаблиц.Добавить("ВТ_ДоговораПлатежногоАгента");
	ИменаТаблиц.Добавить("ВТ_ДоговораПлатежногоАгентаСводно");
	ИменаТаблиц.Добавить("ВТ_РеквизитыШапки");
	ИменаТаблиц.Добавить("РеквизитыПечатиЧека");
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорПлатежногоАгента,
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.ДоговорКонтрагента.Владелец КАК ПлатежныйАгент,
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДоговораПлатежногоАгента
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	|ГДЕ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка = &ДокументСсылка
	|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.ДоговорКонтрагента.ПлатежныйАгент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДоговораПлатежногоАгента.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВТ_ДоговораПлатежногоАгента.ДоговорПлатежногоАгента) КАК ДоговорПлатежногоАгента,
	|	ВТ_ДоговораПлатежногоАгента.ПлатежныйАгент КАК ПлатежныйАгент,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ДоговораПлатежногоАгента.ДоговорПлатежногоАгента) КАК КоличествоДоговоров
	|ПОМЕСТИТЬ ВТ_ДоговораПлатежногоАгентаСводно
	|ИЗ
	|	ВТ_ДоговораПлатежногоАгента КАК ВТ_ДоговораПлатежногоАгента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДоговораПлатежногоАгента.Ссылка,
	|	ВТ_ДоговораПлатежногоАгента.ПлатежныйАгент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчета.Организация КАК Организация,
	|	СписаниеСРасчетногоСчета.ДокументОснование КАК ДокументОснование,
	|	СписаниеСРасчетногоСчета.СуммаДокумента КАК СуммаДокумента,
	|	СписаниеСРасчетногоСчета.Контрагент КАК Контрагент,
	|	СписаниеСРасчетногоСчета.Дата КАК Дата,
	|	СписаниеСРасчетногоСчета.Номер КАК Номер,
	|	СписаниеСРасчетногоСчета.ВидОперации КАК ВидОперации,
	|	СписаниеСРасчетногоСчета.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,
	|	СписаниеСРасчетногоСчета.Контрагент КАК Выдать,
	|	СписаниеСРасчетногоСчета.НазначениеПлатежа КАК Основание,
	|	СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратПокупателю) КАК ЭтоВозврат,
	|	ЕСТЬNULL(ВТ_ДоговораПлатежногоАгента.ДоговорПлатежногоАгента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорПлатежногоАгента,
	|	ЕСТЬNULL(ВТ_ДоговораПлатежногоАгента.ПлатежныйАгент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ПлатежныйАгент,
	|	ЕСТЬNULL(ВТ_ДоговораПлатежногоАгента.КоличествоДоговоров, 0) > 1 КАК НесколькоДоговоровПлатежногоАгента,
	|	ВЫБОР
	|		КОГДА НЕ ПоступлениеНаРасчетныйСчет.Патент ЕСТЬ NULL
	|			ТОГДА ПоступлениеНаРасчетныйСчет.Патент
	|		КОГДА НЕ ВозвратТоваровОтПокупателя.Патент ЕСТЬ NULL
	|			ТОГДА ВозвратТоваровОтПокупателя.Патент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
	|	КОНЕЦ КАК Патент
	|ПОМЕСТИТЬ ВТ_РеквизитыШапки
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|		ПО СписаниеСРасчетногоСчета.ДокументОснование = ПоступлениеНаРасчетныйСчет.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО СписаниеСРасчетногоСчета.ДокументОснование = ВозвратТоваровОтПокупателя.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговораПлатежногоАгентаСводно КАК ВТ_ДоговораПлатежногоАгента
	|		ПО (ПоступлениеНаРасчетныйСчет.Ссылка = ВТ_ДоговораПлатежногоАгента.Ссылка)
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РеквизитыШапки.Ссылка КАК Ссылка,
	|	ВТ_РеквизитыШапки.Дата КАК Дата,
	|	ВТ_РеквизитыШапки.Номер КАК Номер,
	|	ВТ_РеквизитыШапки.Организация КАК Организация,
	|	ВТ_РеквизитыШапки.Контрагент КАК Контрагент,
	|	ЛОЖЬ КАК ВыводитьКонтрагентаВЧеке,
	|	ВТ_РеквизитыШапки.ВидОперации КАК ВидОперации,
	|	ВТ_РеквизитыШапки.Выдать КАК Выдать,
	|	ВТ_РеквизитыШапки.Основание КАК Основание,
	|	ВТ_РеквизитыШапки.Патент КАК Патент,
	|	ВЫБОР
	|		КОГДА ВТ_РеквизитыШапки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю)
	|				ИЛИ ВТ_РеквизитыШапки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику)
	|			ТОГДА ВТ_РеквизитыШапки.СтавкаНДС
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВТ_РеквизитыШапки.СуммаДокумента КАК СуммаДокумента,
	|	ВТ_РеквизитыШапки.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_РеквизитыШапки.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ВТ_РеквизитыШапки.ПлатежныйАгент КАК ПлатежныйАгент,
	|	ВТ_РеквизитыШапки.НесколькоДоговоровПлатежногоАгента КАК НесколькоДоговоровПлатежногоАгента,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно) КАК ТипОплаты,
	|	ВЫБОР ВТ_РеквизитыШапки.ВидОперации
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств)
	|	КОНЕЦ КАК ТипРасчета
	|ИЗ
	|	ВТ_РеквизитыШапки КАК ВТ_РеквизитыШапки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

Функция ТекстЗапросаДанныеРасшифровкаПлатежаПоступленияПоСчету(ИменаТаблиц)
	ИменаТаблиц.Добавить("ВТ_РасшифровкаПлатежа");
	ИменаТаблиц.Добавить("ВТ_ПоступленияПоСчету");
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	РасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	РасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	|	РасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежа.Сделка КАК Сделка
	|ПОМЕСТИТЬ ВТ_РасшифровкаПлатежа
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ПоступлениеТоваров,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.СчетНаОплатуПоставщика, ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)) КАК СчетНаОплату
	|ПОМЕСТИТЬ ВТ_ПоступленияПоСчету
	|ИЗ
	|	ВТ_РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО РасшифровкаПлатежа.Сделка = ПоступлениеТоваровУслуг.Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

// Текст запроса таблиц расшифровки платежа для печати чека 
// при возврате по документу "Возврат товаров от покупателя"
Функция ТекстЗапросаДанныеРасшифровкаПлатежаВозвратОтПокупателя(ИменаТаблиц)
	ИменаТаблиц.Добавить("ВТ_РасшифровкаПлатежа");
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	РасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	РасшифровкаПлатежа.СчетНаОплату КАК Сделка,
	|	РасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТ_РасшифровкаПлатежа
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &ДокументСсылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

// Текст запроса таблиц расшировки платежа
// при возврате по документу "Поступление наличных" с указанным счетом покупателю
Функция ТекстЗапросаДанныеРасшифровкаПлатежаВозвратПоСчету(ИменаТаблиц)
	
	ИменаТаблиц.Добавить("ВТ_СуммыВозвратаПоСтавкамНДС");
	ИменаТаблиц.Добавить("ВТ_РеализацииПоСчету");
	ИменаТаблиц.Добавить("ВТ_РасшифровкаПлатежа");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	|	СУММА(СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СписаниеСРасчетногоСчета.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_СуммыВозвратаПоСтавкамНДС
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	|		ПО (СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка = СписаниеСРасчетногоСчета.Ссылка)
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтавкаНДС,
	|	СписаниеСРасчетногоСчета.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваров,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
	|ПОМЕСТИТЬ ВТ_РеализацииПоСчету
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|		ПО СписаниеСРасчетногоСчета.ДокументОснование = ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО (ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату = РеализацияТоваровУслуг.СчетНаОплатуПокупателю)
	|ГДЕ
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Проведен, ЛОЖЬ)
	|	И СписаниеСРасчетногоСчета.Ссылка = &ДокументСсылка
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_СуммыВозвратаПоСтавкамНДС.СуммаПлатежа КАК СуммаПлатежа,
	|	ВТ_СуммыВозвратаПоСтавкамНДС.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату КАК Сделка,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_РасшифровкаПлатежа
	|ИЗ
	|	ВТ_СуммыВозвратаПоСтавкамНДС КАК ВТ_СуммыВозвратаПоСтавкамНДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|		ПО ВТ_СуммыВозвратаПоСтавкамНДС.ДокументОснование = ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка
	|			И ВТ_СуммыВозвратаПоСтавкамНДС.СтавкаНДС = ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтавкаНДС";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

Функция НаименованиеВСтрокеЧека(СтруктураШапки) Экспорт
	
	Если СтруктураШапки.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		ШаблонНаименования = НСтр("ru = 'Оплата %1 по договору подряда'");
		
		ТекстФИО = "";
		Если ТипЗнч(СтруктураШапки.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") И ЗначениеЗаполнено(СтруктураШапки.Контрагент) Тогда
			ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(СтруктураШапки.Организация, 
			СтруктураШапки.Контрагент, СтруктураШапки.Дата, Ложь);
			
			Если НЕ УчетЗарплаты.Просклонять(ДанныеФизЛица.Представление, 3, ТекстФИО, ДанныеФизЛица.Пол) Тогда
				ТекстФИО = "";
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, ТекстФИО);
	ИначеЕсли ЗначениеЗаполнено(СтруктураШапки.Выдать) Тогда
		
		ШаблонНаименования = НСтр("ru = 'Выдать: %1%2Основание: %3'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, СтруктураШапки.Выдать, " ", СтруктураШапки.Основание);
	Иначе
		
		ШаблонНаименования = НСтр("ru = 'Основание: %1'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, СтруктураШапки.Основание);
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапросаПараметрыПечатиЧека(ДокументСсылка, ИменаТаблиц) Экспорт
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ВидОперации, ДокументОснование");
	
	ТекстЗапроса = ТекстЗапросаРеквизитыПечатиЧека(ИменаТаблиц);
	
	Если РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
		ТекстЗапроса = ТекстЗапроса
			+ ТекстЗапросаДанныеРасшифровкаПлатежаПоступленияПоСчету(ИменаТаблиц)
			+ Документы.ПоступлениеТоваровУслуг.ТекстЗапросаПоступившаяНоменклатура(ИменаТаблиц)
			+ Документы.ПоступлениеТоваровУслуг.ТекстЗапросаДанныеДляПечатиЧека(ИменаТаблиц);
	ИначеЕсли ТипЗнч(РеквизитыДокумента.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		ТекстЗапроса = ТекстЗапроса
			+ ТекстЗапросаДанныеРасшифровкаПлатежаВозвратПоСчету(ИменаТаблиц)
			+ Документы.РеализацияТоваровУслуг.ТекстЗапросаРеализацииПоСчету(ИменаТаблиц)
			+ Документы.СчетНаОплатуПокупателю.ТекстЗапросаДанныеДляПечатиЧека(ИменаТаблиц);
	Иначе
		ТекстЗапроса = ТекстЗапроса
			+ ТекстЗапросаДанныеРасшифровкаПлатежаВозвратОтПокупателя(ИменаТаблиц) 
			+ Документы.ВозвратТоваровОтПокупателя.ТекстЗапросаДанныеДляПечатиЧека(ИменаТаблиц);
	КонецЕсли;
		
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДанныеВыбораИзРегистраСведенийНПД(СтрокаПоиска, Организация) Экспорт

	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 20
		|	ЧекиНПД.НомерЧека КАК НомерЧека,
		|	ЧекиНПД.Состояние КАК Состояние,
		|	ЧекиНПД.ДатаЧека КАК ДатаЧека,
		|	ЧекиНПД.ДокументОснование.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	РегистрСведений.ЧекиНПД КАК ЧекиНПД
		|ГДЕ
		|	ЧекиНПД.НомерЧека ПОДОБНО &ТекстСтроки
		|	И ЧекиНПД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЧековНПД.Зарегистрирован)
		|	И ЧекиНПД.ДокументОснование ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет
		|	И ЧекиНПД.Организация = &Организация
		|	И НЕ ЧекиНПД.ПроизведенВозвратПоЧеку";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 5
		|	ЧекиНПД.НомерЧека КАК НомерЧека,
		|	ЧекиНПД.Состояние КАК Состояние,
		|	ЧекиНПД.ДатаЧека КАК ДатаЧека,
		|	ЧекиНПД.ДокументОснование.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	РегистрСведений.ЧекиНПД КАК ЧекиНПД
		|ГДЕ
		|	ЧекиНПД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЧековНПД.Зарегистрирован)
		|	И ЧекиНПД.ДокументОснование ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет
		|	И ЧекиНПД.Организация = &Организация
		|	И НЕ ЧекиНПД.ПроизведенВозвратПоЧеку";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекстСтроки", СтрокаПоиска + "%");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ШрифтВыделения = Новый Шрифт(,,Истина);
	ЦветВыделения  = ЦветаСтиля.ЦветУспешногоПоиска;
	
	СписокВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ШаблонСтроки = НСтр("ru='%1 от %2 на сумму %3'");
		СтрокаПредставление = СтрШаблон(ШаблонСтроки, Выборка.НомерЧека,
			Формат(Выборка.ДатаЧека, "ДФ=dd.MM.yyyy"), Формат(Выборка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2"));
	
		// Для каждой строки результата формируем представление, аналогично платформенному.
		ПредставлениеСтроки = Новый Массив;
		ИсходнаяСтрока = СокрЛП(СтрокаПредставление);
		ВыделяемаяЧасть = СтрокаПоиска;
		
		// Находим и выделяем цветом часть строки, которая была введена пользователем.
		Поз = СтрНайти(ВРег(ИсходнаяСтрока), ВРег(СтрокаПоиска),, 1);
		ВыделяемаяПодстрока = Сред(ИсходнаяСтрока, Поз, СтрДлина(ВыделяемаяЧасть));
		ФорматВыделяемаяСтрока = Новый ФорматированнаяСтрока(ВыделяемаяПодстрока, ШрифтВыделения, ЦветВыделения);
		
		// Находим оставшуюся часть строки и формируем массив из введенной пользователем строки и оставшейся части.
		Если Поз = 1 Тогда
			// Часть введенной пользователем строки находится в начале, значит оставшуюся строку нужно искать с конца.
			ПредставлениеСтроки.Добавить(ФорматВыделяемаяСтрока);
			ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Прав(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - СтрДлина(ВыделяемаяЧасть))));
		ИначеЕсли Поз = СтрДлина(ИсходнаяСтрока) Тогда
			// Часть введенной пользователем строки находится в конце, значит оставшуюся строку  искать с начала.
			ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Лев(ИсходнаяСтрока, Поз-1)));
			ПредставлениеСтроки.Добавить(ФорматВыделяемаяСтрока);
		КонецЕсли;
	
		СписокВыбора.Добавить(Выборка.НомерЧека, Новый ФорматированнаяСтрока(ПредставлениеСтроки));
		
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

Процедура ЗаполнитьПоПоступлениюНаРасчетныйСчет(ДокументВыбора, Форма) Экспорт
	
	Объект = Форма.Объект;

	Объект.ДокументОснование = ДокументВыбора;
	
	ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументВыбора, "Дата, Контрагент,РасшифровкаПлатежа");
	
	Объект.Контрагент  = ДанныеОснования.Контрагент;
	
	СведенияОЧекеНПД = РегистрыСведений.ЧекиНПД.СведенияОЧеке(ДокументВыбора);
	
	Если ЗначениеЗаполнено(СведенияОЧекеНПД) Тогда
		Объект.НомерЧекаНПД = СведенияОЧекеНПД.НомерЧека;
	КонецЕсли;
	
	РасшифровкаПлатежаДокументаОснования = ДанныеОснования.РасшифровкаПлатежа.Выгрузить();

	Объект.РасшифровкаПлатежа.Очистить();
	
	Для каждого СтрокаОснование Из РасшифровкаПлатежаДокументаОснования Цикл
		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		
		СтрокаПлатеж.ДоговорКонтрагента      = СтрокаОснование.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов"), Объект.Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		СтрокаПлатеж.СуммаПлатежа = СтрокаОснование.СуммаПлатежа;
		
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаОснование.СуммаВзаиморасчетов;
		
		// При вводе на основании устанавливаем режим распределения оплаты "По документу".
		Если ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу;
			СтрокаПлатеж.Сделка = ДокументВыбора;
		Иначе
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
		
		СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СтрокаОснование.СчетУчетаРасчетовПоАвансам;
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СтрокаОснование.СчетУчетаРасчетовСКонтрагентом;
		
		СтрокаПлатеж.СуммаНДС = 0;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры

#КонецОбласти

#КонецЕсли

