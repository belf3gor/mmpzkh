&НаКлиенте
Перем СтрокаПоискаПоКБК;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда // проверка только для новых объектов (перечитать форму нельзя)
		ПроверитьТолькоОдинСчетВрежимеИнтеграции();
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормы.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	СохранитьЗначенияИзменяемыхДанных();
	ВключитьВозможностьРедактированияНезаполненныхРеквизитов();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.СписаниеСРасчетногоСчета",
		"ФормаДокументаОднострочнаяИнтеграцияСБанком",
		НСтр("ru='Новости: Списание с расчетного счета'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СписаниеСРасчетногоСчетаФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СписаниеСРасчетногоСчетаФормы.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	Оповестить("ОбновитьПоказателиРасчетаУСН", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если Не Отказ Тогда
		Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ЕстьРасшифровкаПлатежа(ЭтотОбъект) Тогда
			СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьРасшифровкаПлатежаИзРеквизитовФормы(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Объект.ПометкаУдаления И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И (СчетВРежимеИнтеграции Или Параметры.Ключ.Пустая())
		И Не ЗначениеЗаполнено(ТекущийОбъект.СчетОрганизации)
		И Не Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(ТекущийОбъект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Реквизиты банковского счета не заполнены'"),, "НетСчетаВДругомБанке",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененБанковскийСчет" Тогда
		Если Параметр.Владелец = Объект.Организация Тогда
			ОбработатьИзменениеБанковскогоСчета(Параметр.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	СписаниеСРасчетногоСчетаФормы.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	Если ЗначениеЗаполнено(Параметры.ПериодПомощника) Тогда
		
		Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНалогУСН(ВидНалога) Тогда
			
			Если (Объект.НалоговыйПериод < НачалоГода(Параметры.ПериодПомощника)
				ИЛИ КонецКвартала(Параметры.ПериодПомощника) < Объект.НалоговыйПериод) Тогда
			
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Укажите период в интервале с %1 по %2'"),
					Формат(НачалоГода(Параметры.ПериодПомощника), "ДЛФ=D"),
					Формат(КонецКвартала(Параметры.ПериодПомощника), "ДЛФ=D"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НалоговыйПериодСтрока",, Отказ);
				
			КонецЕсли;
			
		Иначе
			
			Если (Объект.Дата < НачалоГода(Параметры.ПериодПомощника)
				ИЛИ КонецКвартала(Параметры.ПериодПомощника) < Объект.Дата) Тогда
			
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Укажите дату в интервале с %1 по %2'"),
					Формат(НачалоГода(Параметры.ПериодПомощника), "ДЛФ=D"),
					Формат(КонецКвартала(Параметры.ПериодПомощника), "ДЛФ=D"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Дата", "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		ВидОперацииПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ВидОперацииАвтоПодбор(Объект.ВидОперации, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
		НалогПриИзмененииНаСервере(Новый Массив, СтрокаПоискаПоКБК);
	Иначе
		ЭтоУплатаНДФЛ = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.НалогАвтоПодбор(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.НалогОкончаниеВводаТекста(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНалоговогоОбязательстваПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидНалоговогоОбязательства) Тогда
		ВидНалоговогоОбязательстваПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		СчетОрганизацииПриИзмененииСервер(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеБанковскогоСчета(СчетОрганизации)
	
	УстановитьСписокВыбораСчетовОрганизации();
	УстановитьФункциональныеОпцииФормы();
	
	Если Не ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Объект.СчетОрганизации = СчетОрганизации;
		СчетОрганизацииПриИзмененииСервер(Новый Массив);
		
		ПроверитьТолькоОдинСчетВрежимеИнтеграции();
		ВключитьВозможностьРедактированияНезаполненныхРеквизитов();
		
		СчетВРежимеИнтеграции = Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияВключена(Объект.СчетОрганизации);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	СчетКонтрагентаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	УдалитьПредупреждениеПриЗагрузкеВыпискиИСпрятатьБаннер();
	СписаниеСРасчетногоСчетаФормыКлиент.ОповеститьОбИзмененииПредупрежденияПриЗагрузкеВыписки(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодПриИзменении(Элемент)
	
	НалоговыйПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.НалоговыйПериодНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.НалоговыйПериодРегулирование(ЭтотОбъект, Элемент, Направление, СтандартнаяОбработка);
	
	НалоговыйПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.НалоговыйПериодОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВидПлатежаПоКредитамЗаймамПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.РасшифровкаПлатежаВидПлатежаПоКредитамЗаймамПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПроверитьТолькоОдинСчетВрежимеИнтеграции()
	
	ИспользуетсяНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	Если ИспользуетсяНесколькоБанковскихСчетовОрганизации Тогда
		// Если у организации несколько счетов, то доступно поле с счетом организации.
		// Дополнительные проверки и оповещения не требуются, т.к. пользователь может добавлять и выбирать счета.
		Возврат;
	КонецЕсли;
	
	СловаПредупреждения = Новый Массив;
	СловаПредупреждения.Добавить(НСтр("ru = 'Для ввода операций по счету в другом банке укажите его в'"));
	СловаПредупреждения.Добавить(" ");
	СловаПредупреждения.Добавить(НСтр("ru = 'разделе'"));
	СловаПредупреждения.Добавить(" ");
	СловаПредупреждения.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Настройки'"),,,,
		"e1cib/command/Обработка.ПанелиПростойИнтерфейс.Команда.Настройки"));
	
	НетСчетаВДругомБанке = Новый ФорматированнаяСтрока(СловаПредупреждения);
	
	Элементы.ПредупреждениеОСчетахВДругихБанках.Видимость = Не ИспользуетсяНесколькоБанковскихСчетовОрганизации;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Форма.УменьшаетДоход = ТекстУменьшаетДоход(Объект.ВидОперации);
	
	// Реквизиты платежа можно редактировать только в операциях банковскому счету, не подключенному к интеграции
	// Свойство реквизитов "ТолькоПросмотр" может быть сброшено в процедуре ВключитьВозможностьРедактированияНезаполненныхРеквизитов().
	Элементы.Организация.ТолькоПросмотр = Форма.СчетВРежимеИнтеграции;
	Элементы.СчетОрганизации.ТолькоПросмотр = Форма.СчетВРежимеИнтеграции;
	Элементы.Дата.ТолькоПросмотр = Форма.СчетВРежимеИнтеграции;
	Элементы.НомерВходящегоДокумента.ТолькоПросмотр = Форма.СчетВРежимеИнтеграции;
	Элементы.ДатаВходящегоДокумента.ТолькоПросмотр = Форма.СчетВРежимеИнтеграции;
	Элементы.Контрагент.ТолькоПросмотр = Форма.СчетВРежимеИнтеграции;
	Элементы.СчетКонтрагента.ТолькоПросмотр = Форма.СчетВРежимеИнтеграции;
	Элементы.СуммаДокумента.ТолькоПросмотр = Форма.СчетВРежимеИнтеграции;
	Элементы.НазначениеПлатежа.ТолькоПросмотр = Форма.СчетВРежимеИнтеграции;
	
	Элементы.РасшифровкаПлатежаВидПлатежаПоКредитамЗаймам.Видимость =
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстУменьшаетДоход(ВидОперации)
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю") Тогда
		Возврат НСтр("ru = 'Уменьшает доход'");
	Иначе
		Возврат НСтр("ru = 'Не уменьшает доход'");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	СчетВРежимеИнтеграции = Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияВключена(Объект.СчетОрганизации);
	
	СписаниеСРасчетногоСчетаФормы.ПодготовитьФормуНаСервере(ЭтотОбъект);
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(
				ЭтотОбъект, Объект.РасшифровкаПлатежа[0],, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		УстановитьПараметрыВыбораНалога();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		УстановитьСписокВыбораСчетовОрганизации();
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	СписаниеСРасчетногоСчетаФормы.УстановитьФункциональныеОпцииФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.Ссылка.Пустая() Тогда
		Форма.Заголовок = НСтр("ru = 'Списание с расчетного счета (создание)'");
	Иначе
		Форма.Заголовок = СтрШаблон(НСтр("ru='Списание с расчетного счета %1 от %2'"),
			Объект.НомерВходящегоДокумента, Формат(Объект.Дата, "ДЛФ=D"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораНалога()
	
	Если ЗначениеЗаполнено(Параметры.ВидыНалогов) Тогда
		
		ОтборПоВидуНалога = Новый ПараметрВыбора(
			"Отбор.ВидНалога",
			Параметры.ВидыНалогов);
		
		Элементы.Налог.ПараметрыВыбора = Новый ФиксированныйМассив(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборПоВидуНалога));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораСчетовОрганизации()
	
	МассивПараметровВыбора = Новый Массив;
	
	// По счетам в банке, с которым настроена интеграция, операции вручную не вводятся,
	// поэтому удалим такие счета из массива доступных счетов.
	БанковскиеСчетаБезИнтеграции = Справочники.НастройкиИнтеграцииСБанками.БанковскиеСчетаОрганизацииБезИнтеграции(Объект.Организация);
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", БанковскиеСчетаБезИнтеграции));
	
	Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

// При изменении вида операции реквизиты могут очищаться. Например для "Снятие наличных" очищается Контрагент и СчетКонтрагента.
// Если изменить операцию ОплатаПоставщику -> СнятиеНаличных -> ОплатаПоставщику, то значение Контрагент будет утеряно.
// Процедуры СохранитьЗначенияИзменяемыхДанных() и ВосстановитьЗначенияИзменяемыхДанных() зашищают от потери данных при
// изменении вида операции.
//
&НаСервере
Процедура СохранитьЗначенияИзменяемыхДанных()
	
	ЗначенияИзменяемыхДанных = Новый Структура;
	ЗначенияИзменяемыхДанных.Вставить("Контрагент", Новый Структура("Контрагент", Объект.Контрагент));
	ЗначенияИзменяемыхДанных.Вставить("СчетКонтрагента", Новый Структура("СчетКонтрагента", Объект.СчетКонтрагента));
	
	Если Не СчетВРежимеИнтеграции Или Параметры.Ключ.Пустая() Тогда
		ЗначенияИзменяемыхДанных.Вставить("СчетОрганизации", Новый Структура("СчетОрганизации", Объект.СчетОрганизации));
		ЗначенияИзменяемыхДанных.Вставить("Дата", Новый Структура("Дата", Объект.Дата));
		ЗначенияИзменяемыхДанных.Вставить("ДатаВходящегоДокумента", Новый Структура("ДатаВходящегоДокумента", Объект.ДатаВходящегоДокумента));
		ЗначенияИзменяемыхДанных.Вставить("НомерВходящегоДокумента", Новый Структура("НомерВходящегоДокумента", Объект.НомерВходящегоДокумента));
		ЗначенияИзменяемыхДанных.Вставить("СуммаДокумента", Новый Структура("СуммаДокумента", Объект.СуммаДокумента));
		ЗначенияИзменяемыхДанных.Вставить("НазначениеПлатежа", Новый Структура("НазначениеПлатежа", Объект.НазначениеПлатежа));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьЗначенияИзменяемыхДанных()
	
	Для Каждого КлючЗначение Из ЗначенияИзменяемыхДанных Цикл
		Для Каждого СохраненноеЗначение Из КлючЗначение.Значение Цикл
			Если Не ЗначениеЗаполнено(Объект[СохраненноеЗначение.Ключ]) Тогда
				Объект[СохраненноеЗначение.Ключ] = СохраненноеЗначение.Значение;
				Если СохраненноеЗначение.Ключ = "Контрагент" Тогда
					КонтрагентПриИзмененииСервер();
				ИначеЕсли СохраненноеЗначение.Ключ = "СчетКонтрагента" Тогда
					СчетКонтрагентаПриИзмененииСервер();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВключитьВозможностьРедактированияНезаполненныхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьВозможностьРедактированияНезаполненныхРеквизитов()
	
	Для Каждого КлючЗначение Из ЗначенияИзменяемыхДанных Цикл
		Для Каждого СохраненноеЗначение Из КлючЗначение.Значение Цикл
			Если СчетВРежимеИнтеграции Тогда
				РеквизитДоступенДляРедактирования = Не ЗначениеЗаполнено(Объект[СохраненноеЗначение.Ключ]);
			Иначе
				РеквизитДоступенДляРедактирования = Истина;
			КонецЕсли;
			
			Элементы[КлючЗначение.Ключ].ТолькоПросмотр = Не РеквизитДоступенДляРедактирования;
			
			ТипРеквизита = ТипЗнч(Объект[СохраненноеЗначение.Ключ]);
			Если ТипРеквизита <> Тип("Булево") И ТипРеквизита <> Тип("Строка") Тогда
				Элементы[КлючЗначение.Ключ].КнопкаВыбора = РеквизитДоступенДляРедактирования;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#Область ОбработкаРеквизитовШапки

&НаКлиенте
Процедура ВидОперацииЗавершениеВыбора(Результат) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ВидОперации = Результат;
	
	Модифицированность = Истина;
	
	ВидОперацииПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	СписаниеСРасчетногоСчетаФормы.ВидОперацииПриИзмененииСервер(ЭтотОбъект);
	
	ВосстановитьЗначенияИзменяемыхДанных();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НалогПриИзмененииНаСервере(ПричиныИзменения, СтрокаПоискаПоКБК)
	
	СписаниеСРасчетногоСчетаФормы.НалогПриИзмененииНаСервере(ЭтотОбъект, ПричиныИзменения, СтрокаПоискаПоКБК);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВидНалоговогоОбязательстваПриИзмененииНаСервере()
	
	СписаниеСРасчетногоСчетаФормы.ВидНалоговогоОбязательстваПриИзмененииНаСервере(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	СписаниеСРасчетногоСчетаФормы.ДатаПриИзмененииСервер(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	СписаниеСРасчетногоСчетаФормы.ОрганизацияПриИзмененииСервер(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		УстановитьСписокВыбораСчетовОрганизации();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетОрганизацииПриИзмененииСервер(ПричиныИзменения)
	
	СписаниеСРасчетногоСчетаФормы.СчетОрганизацииПриИзмененииСервер(ЭтотОбъект, ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	СписаниеСРасчетногоСчетаФормы.КонтрагентПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетКонтрагентаПриИзмененииСервер()
	
	СписаниеСРасчетногоСчетаФормы.СчетКонтрагентаПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НалоговыйПериодПриИзмененииНаСервере()
	
	СписаниеСРасчетногоСчетаФормы.НалоговыйПериодПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПредупрежденияПриЗагрузкеВыписки

&НаСервере
Процедура УдалитьПредупреждениеПриЗагрузкеВыпискиИСпрятатьБаннер()
	
	СписаниеСРасчетногоСчетаФормы.УдалитьПредупреждениеПриЗагрузкеВыпискиИСпрятатьБаннер(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
