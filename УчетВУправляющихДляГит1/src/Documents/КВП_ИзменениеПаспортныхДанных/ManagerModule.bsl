
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной.
//
Функция ПечатьФормаЗП(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_КВП_ОткрытиеЛицевогоСчета_ФормаЗП";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекОбъект Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
		Макет = ПолучитьОбщийМакет("КВП_ФормаЗП");
		
		ТабличныйДокумент = Новый ТабличныйДокумент();
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КВП_ИзменениеПаспортныхДанных_ФормаЗП";
		
		// Вывод шапки документа.
		ОбластьМакета = Макет.ПолучитьОбласть("Страница1_1");
		ДокументКемВыдан_1 = "";
		ДокументКемВыдан_2 = "";
		РазделитьТекстНаДвеСтроки(ТекОбъект.КемВыданДокумент, 50, ДокументКемВыдан_1, ДокументКемВыдан_2);
		ОбластьМакета.Параметры.ДокументКемВыдан_1 = ДокументКемВыдан_1;
		ОбластьМакета.Параметры.ДокументКемВыдан_2 = ДокументКемВыдан_2;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Подготовка данных по проживающему.
		ДанныеПроживающего = ПолучитьДанныеПоФизЛицу(ТекОбъект.ФизическоеЛицо, ТекОбъект.Дата - 60*60*24);
		ПроживающийФИО = "";
		ПроживающийФИО = ПроживающийФИО + ?(ПустаяСтрока(ПроживающийФИО), "", Символы.ПС) + ДанныеПроживающего.Фамилия;
		ПроживающийФИО = ПроживающийФИО + ?(ПустаяСтрока(ПроживающийФИО), "", Символы.ПС) + ДанныеПроживающего.Имя;
		ПроживающийФИО = ПроживающийФИО + ?(ПустаяСтрока(ПроживающийФИО), "", Символы.ПС) + ДанныеПроживающего.Отчество;
		СерияНомерНовые = "" + ТекОбъект.СерияДокумента + Символы.ПС + ТекОбъект.НомерДокумента;
		СерияНомерСтарые = "" + ДанныеПроживающего.СерияДокумента + Символы.ПС + ДанныеПроживающего.НомерДокумента;
		ПолПроживающего = "";
		Если      ДанныеПроживающего.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
			ПолПроживающего = "М";
		ИначеЕсли ДанныеПроживающего.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
			ПолПроживающего = "Ж";
		КонецЕсли;
		
		МестоРождения = ТекОбъект.ФизическоеЛицо.МестоРождения;
		
		СведенияОРегистрации = ПолучитьАдресИзРегистраСведений(ТекОбъект.ФизическоеЛицо);
		
		// Вывод строки таблицы.
		ОбластьМакета = Макет.ПолучитьОбласть("Страница1_Строка");
		ОбластьМакета.Параметры.НомерСтроки       = 1;
		ОбластьМакета.Параметры.ФИО               = ПроживающийФИО;
		ОбластьМакета.Параметры.СерияНомерНовые   = СерияНомерНовые;
		ОбластьМакета.Параметры.ДатаВыдачиНовая   = ФорматДатыФормаЗП(ТекОбъект.ДатаВыдачиДокумента);
		ОбластьМакета.Параметры.СерияНомерСтарые  = СерияНомерСтарые;
		ОбластьМакета.Параметры.ДатаВыдачиСтарая  = ФорматДатыФормаЗП(ДанныеПроживающего.ДатаВыдачиДокументаДатой);
		ОбластьМакета.Параметры.ПолПроживающего   = ПолПроживающего;
		ОбластьМакета.Параметры.ДатаРождения      = ФорматДатыФормаЗП(ДанныеПроживающего.ДатаРожденияДатой);
		ОбластьМакета.Параметры.МестоРождения     = МестоРождения;
		ОбластьМакета.Параметры.СведенияОРегистрации = СведенияОРегистрации;
		ОбластьМакета.Параметры.КодПричиныЗамены  = ТекОбъект.ПричинаИзменения.КодПричины;
		ОбластьМакета.Параметры.ДатаВыдачиФакт    = "";
		ОбластьМакета.Параметры.ПрежниеПерсДанные = "";
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Страница1_2");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывод второй страницы.
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ОбластьМакета = Макет.ПолучитьОбласть("Страница2");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	// Зададим параметры макета.
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСлева  = 0;
	ТабличныйДокумент.ПолеСнизу  = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьФормаЗП()

// Формирует строковое представление указанной даты для формы ЗП.
//
// Параметры
//  ЗначениеДаты – дата для представления.
//
// Возвращаемое значение:
//  Строка – описание даты.
//
Функция ФорматДатыФормаЗП(ЗначениеДаты)
	
	ФорматДаты = Формат(ЗначениеДаты, "ДФ=dd.MMMM.yyyy");
	ДлинаДаты = СтрДлина(ФорматДаты);
	
	ФорматДаты = Лев(ФорматДаты, 2) + Символы.ПС
	           + Сред(ФорматДаты, 4, ДлинаДаты - 3 - 5) + Символы.ПС
	           + Прав(ФорматДаты, 4);
	
	Возврат ФорматДаты;
	
КонецФункции // ФорматДатыФормаЗП()

// Получает список документов по указанному человеку.
//
// Параметры:
//  ФизическоеЛицо - физическое лицо, для которого ищется документ.
//  Дата           - дата, на которую документ должен быть актуален.
//
// Возвращаемое значение:
//  Таблица значений со списком документов.
//
Функция ПолучитьСписокДокументовФизЛица(ФизическоеЛицо, Дата) Экспорт

	СписокДокументов = РегистрыСведений.ДокументыФизическихЛиц.СрезПоследних(Дата, 
																			 Новый Структура("ФизЛицо", ФизическоеЛицо));

	Если СписокДокументов.Количество() = 0 Тогда
		СписокДокументов.Добавить();
	КонецЕсли;

	СписокДокументов = СписокДокументов.Скопировать(СписокДокументов.НайтиСтроки(Новый Структура("ЯвляетсяДокументомУдостоверяющимЛичность", Истина)));
	
	Возврат СписокДокументов;

КонецФункции // ПолучитьСписокДокументовФизЛица()

// Получает паспортные данные указанного человека.
//
// Параметры:
//  ФизическоеЛицо - физическое лицо, для которого ищется документ.
//  Дата           - дата, на которую документ должен быть актуален.
//
// Возвращаемое значение:
//  Структура с данными по документу.
//
Функция ПолучитьПаспортныеДанныеФизЛица(ФизическоеЛицо, Дата) Экспорт
	
	СписокДокументов = ПолучитьСписокДокументовФизЛица(ФизическоеЛицо, Дата);
	
	Результат = Новый Структура();
	Результат.Вставить("ВыданДокумент", "");

	СтрокаПаспорта = СписокДокументов.Найти(Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ, "ВидДокумента");
	Если СтрокаПаспорта = Неопределено Тогда
		Если СписокДокументов.Количество() > 0 Тогда
			СтрокаПаспорта = СписокДокументов[0];
		Иначе
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("ВидДокумента",    СтрокаПаспорта.ВидДокумента);
	Результат.Вставить("СерияДокумента",  СтрокаПаспорта.Серия);
	Результат.Вставить("НомерДокумента",  СтрокаПаспорта.Номер);
	Результат.Вставить("ВыданДокумент",   СтрокаПаспорта.КемВыдан);
	Результат.Вставить("ДатаВыдачиДокумента",
	                   ПолучитьДатуВФорматеОтчета(СтрокаПаспорта.ДатаВыдачи));
	Результат.Вставить("ДатаВыдачиДокументаДатой", СтрокаПаспорта.ДатаВыдачи);
	Результат.Вставить("КодДокумента",   СтрокаПаспорта.КодПодразделения);
	
	Возврат Результат;

КонецФункции // ПолучитьПаспортныеДанныеФизЛица()

// Собирает данные по физическому лицу.
//
// Параметры
//  ФизическоеЛицо – СправочникСсылка.ФизическиеЛица – физическое лицо, по которому
//                   нужно собрать информацию.
//  Дата           - дата, на которую получаются данные.
//
// Возвращаемое значение:
//  Структура – собранные данные: ФИО (строкой и раздельно), ДатаРождения (строкой),
//  Пол (перечисление), СписокДетей (таблица значений), ТекущаяДата (дата),
//  ДатаСоставления (строкой), паспортные данные, адрес рождения, адрес регистрации.
//
Функция ПолучитьДанныеПоФизЛицу(ФизическоеЛицо, Дата = Неопределено) Экспорт
	
	ДанныеПоФизЛицу = Новый Структура();
	ДанныеПоФизЛицу.Вставить("ФИО", СокрЛП(ФизическоеЛицо.Наименование));

	// Получение фамилии, имени, отчества.
	РазделеннаяФИО = РазделитьФИО(ДанныеПоФизЛицу.ФИО);

	// Получение даты составления листка.
	Если Дата = Неопределено Тогда
		ДатаСостЛистка = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Иначе
		ДатаСостЛистка = Дата;
	КонецЕсли;

	// Получение документа, удостоверяющего личность.
	ВыданДокумент_1 = "";
	ВыданДокумент_2 = "";
	ПаспортныеДанные = ПолучитьПаспортныеДанныеФизЛица(ФизическоеЛицо, ДатаСостЛистка);
	РазделитьТекстНаДвеСтроки(ПаспортныеДанные.ВыданДокумент, 35, ВыданДокумент_1, ВыданДокумент_2);
	ПаспортныеДанные.Вставить("ВыданДокумент_1", ВыданДокумент_1);
	ПаспортныеДанные.Вставить("ВыданДокумент_2", ВыданДокумент_2);

	// Получение сведений о гражданстве.
	Гражданство = "";
	СведОГражданстве = РегистрыСведений.ГражданствоФизическихЛиц.СрезПоследних(ДатаСостЛистка,
																		Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
	Если СведОГражданстве.Количество() > 0 Тогда
		Гражданство = СведОГражданстве[0].Страна;
	Иначе
		Гражданство = Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	ДатаСоставления = Формат(ДатаСостЛистка, "ДФ=dd.MMMM.yy");
	ДатаСоставленияДень  = Лев(ДатаСоставления, 2);
	ДатаСоставленияМесяц = Сред(ДатаСоставления, 4, СтрДлина(ДатаСоставления) - 3 - 3);
	ДатаСоставленияДата  = "" + ДатаСоставленияДень + " " + ДатаСоставленияМесяц;
	ДатаСоставленияГод   = Прав(ДатаСоставления, 2);

	// Формирование структуры параметров.
	Для Каждого Параметр Из РазделеннаяФИО Цикл
		ДанныеПоФизЛицу.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	ДанныеПоФизЛицу.Вставить("ДатаРождения",        ПолучитьДатуВФорматеОтчета(ФизическоеЛицо.ДатаРождения));
	ДанныеПоФизЛицу.Вставить("ДатаРожденияДатой",   ФизическоеЛицо.ДатаРождения);
	ДанныеПоФизЛицу.Вставить("Пол",                 ФизическоеЛицо.Пол);
	Для Каждого Параметр Из ПаспортныеДанные Цикл
		ДанныеПоФизЛицу.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	ДанныеПоФизЛицу.Вставить("ТекущаяДата",         ДатаСостЛистка);
	ДанныеПоФизЛицу.Вставить("ДатаСоставления",     ПолучитьДатуВФорматеОтчета(ДатаСостЛистка));
	ДанныеПоФизЛицу.Вставить("ДатаСоставленияДата", ДатаСоставленияДата);
	ДанныеПоФизЛицу.Вставить("ДатаСоставленияГод",  ДатаСоставленияГод);
	ДанныеПоФизЛицу.Вставить("Гражданство",         Гражданство);
	
	Возврат ДанныеПоФизЛицу;

КонецФункции // ПолучитьДанныеПоФизЛицу()

// Получает сведения о регистрации физ лица для печатной формы.
// Данные берутся из регистра сведений "КонтактнаяИнформация".
// Параметры:
//		ФизическоеЛицо - физическое лицо, для которого нужно получить сведения.
// Возвращаемое значение:
//		Адрес - строка с данными о регистрации.
Функция ПолучитьАдресИзРегистраСведений(ФизическоеЛицо)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ПолучитьКонтактнуюИнформацияОбъекта(ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	
КонецФункции // ПолучитьАдресИзРегистраСведений()

// Процедура печати документа.
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УПЖКХ_ТиповыеМетодыСервер.НужноПечататьМакет(КоллекцияПечатныхФорм, "ФормаЗП") Тогда
		УПЖКХ_ТиповыеМетодыСервер.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ФормаЗП", "Сведения о документах, удостоверяющих личность",  ПечатьФормаЗП(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли