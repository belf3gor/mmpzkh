#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Определяет коэффициенты для распределения показаний приборов учета в случае их установки на несколько объектов
// и заполняет температурный коэффициент и коэффициент трансформации приборов учета.
//
// Параметры:
//  ТаблицаСчетчиков - таблица приборов учета и объектов, на которые они установлены.
//  СписокОбъектов   - список значений, содержащий лицевые счета.
//
Процедура УстановитьКоэффициентыОбъектов(ТаблицаСчетчиков, Дата, СписокЛС = Неопределено) Экспорт
	
	// Для информации:
	// В данной процедуре определяются доли для распределения показаний приборов учета (ПУ)
	// по объектам учета (в случае установки ПУ на несколько объектов).
	// Но возможны случаи, когда прибор учета установлен на помещение, при этом на помещение
	// открыто несколько л/с. В результате разделение расхода по л/с будет выполняться не 
	// при вводе показаний, а на этапе начисления по показаниям ПУ.
	// Для этого в документе "Начисление услуг" имеется функция ОпределитьДолиЛС. 
	// Поэтому, при внесении изменений в способы распределения показаний важно убедиться,
	// что это также будет учтено и при начислении.
	// _____________________________________________________________________________________
	
	Запрос = Новый Запрос();
	
	СтруктураСпособовРаспределенияНаПомещенияЛицевыеСчета = УПЖКХ_ПараметрыУчетаСервер.ПолучитьСпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета();
	СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета        = СтруктураСпособовРаспределенияНаПомещенияЛицевыеСчета.СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета;
	ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета = СтруктураСпособовРаспределенияНаПомещенияЛицевыеСчета.ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета;
	
	СтруктураСпособовРаспределенияНаЗданияПодъезды = УПЖКХ_ПараметрыУчетаСервер.ПолучитьСпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды();
	СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды        = СтруктураСпособовРаспределенияНаЗданияПодъезды.СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды;
	ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды = СтруктураСпособовРаспределенияНаЗданияПодъезды.ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды;
	
	Если СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноЗарегистрированным Тогда
		
		ПоляВыборкиКоэффициентаЛС = "
		|	СУММА(ЕСТЬNULL(врТаблицаКоличеств.КоличествоЗарегистрированных, 0)) КАК КоэффициентЧислитель,
		|	1 КАК КоэффициентЗнаменатель";
		ТаблицаСоединенияЛС = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаКоличеств КАК врТаблицаКоличеств
		|		ПО ТаблицаСчетчиков.Объект = врТаблицаКоличеств.ЛицевойСчет";
		
		ПоляВыборкиКоэффициентаПомещения = "
		|	СУММА(ЕСТЬNULL(врТаблицаКоличеств.КоличествоЗарегистрированных, 0)) КАК КоэффициентЧислитель,
		|	1 КАК КоэффициентЗнаменатель";
		ТаблицаСоединенияПомещение = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаКоличеств КАК врТаблицаКоличеств
		|		ПО ТаблицаСчетчиков.Объект = врТаблицаКоличеств.ЛицевойСчет.Адрес";
		
	ИначеЕсли СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПроживающим Тогда
		
		ПоляВыборкиКоэффициентаЛС = "
		|	СУММА(ЕСТЬNULL(врТаблицаКоличеств.КоличествоПроживающих, 0)) КАК КоэффициентЧислитель,
		|	1 КАК КоэффициентЗнаменатель";
		ТаблицаСоединенияЛС = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаКоличеств КАК врТаблицаКоличеств
		|		ПО ТаблицаСчетчиков.Объект = врТаблицаКоличеств.ЛицевойСчет";
		
		ПоляВыборкиКоэффициентаПомещения = "
		|	СУММА(ЕСТЬNULL(врТаблицаКоличеств.КоличествоПроживающих, 0)) КАК КоэффициентЧислитель,
		|	1 КАК КоэффициентЗнаменатель";
		ТаблицаСоединенияПомещение = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаКоличеств КАК врТаблицаКоличеств
		|		ПО ТаблицаСчетчиков.Объект = врТаблицаКоличеств.ЛицевойСчет.Адрес";
		
	ИначеЕсли СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПлощадямПомещений Тогда
		
		// Для информации:
		// Решили пока не усложнять расчет и при распределении по площадям не учитывать доли л/с в помещении 
		// в случаях, когда ПУ установлен на несколько л/с.
		// В аналогичной ситуации, когда ПУ установлен на помещение, при этом в помещении открыто более 1-го л/с,
		// в документе "Начисление услуг" расход между л/с делится всегда поровну.
		// Поэтому, если необходимо будет учесть доли л/с в площади помещения при распределении во вводе показаний, 
		// важно убедиться, что это также будет учтено и при начислении.
		
		
		// При распределении показаний индивидуальных приборов учета (ИПУ) по площади помещений теперь не анализируется типы помещений.
		// Ранее всегда показания ИПУ распределялись только между помещениями с типами "Квартира" и "Офис".
		// Если на какое-то помещение (например, автоместо) не требуется распределять показания, то и прибор учета на это помещение 
		// устанавливать не нужно.
		
		ПоляВыборкиКоэффициентаЛС = "
		|	СУММА(ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0)) КАК КоэффициентЧислитель,
		|	1 КАК КоэффициентЗнаменатель";
		ТаблицаСоединенияЛС       = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Период, 
		|					ВидПлощади = &ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета
		|					И Объект.Родитель = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)) КАК КВП_ПлощадьПомещенияСрезПоследних
		|		ПО КВП_ПлощадьПомещенияСрезПоследних.Объект = ТаблицаСчетчиков.Объект.Адрес";
		
		ПоляВыборкиКоэффициентаПомещения = "
		|	СУММА(ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0)) КАК КоэффициентЧислитель,
		|	1 КАК КоэффициентЗнаменатель";
		ТаблицаСоединенияПомещение = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Период, 
		|					ВидПлощади = &ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета
		|					И Объект.Родитель = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)) КАК КВП_ПлощадьПомещенияСрезПоследних
		|		ПО КВП_ПлощадьПомещенияСрезПоследних.Объект = ТаблицаСчетчиков.Объект";
		
	Иначе // Если СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноДолямЛицевыхСчетов Тогда
		  // или настройка не заполнена (для исключения ошибки)
		
		ПоляВыборкиКоэффициентаЛС = "
		|	СУММА(ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0)) КАК КоэффициентЧислитель,
		|	СУММА(ВЫБОР
		|		КОГДА ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
		|	КОНЕЦ) КАК КоэффициентЗнаменатель";
		ТаблицаСоединенияЛС = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(&Период, ЛицевойСчет В (&СписокЛС)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
		|		ПО ТаблицаСчетчиков.Объект = КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет";
		
		ПоляВыборкиКоэффициентаПомещения = "
		|	СУММА(ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0)) КАК КоэффициентЧислитель,
		|	СУММА(ВЫБОР
		|		КОГДА ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
		|	КОНЕЦ) КАК КоэффициентЗнаменатель";
		ТаблицаСоединенияПомещение = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(&Период,
		|											ЛицевойСчет В (&СписокЛС)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
		|		ПО ТаблицаСчетчиков.Объект = КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет.Адрес";
		
	КонецЕсли;
	
	Если СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПлощадямПомещений Тогда
		
		// Ранее всегда показания КПУ распределялись только по площадям помещений с типами "Квартира" и "Офис".
		// Теперь при распределении показаний коллективных приборов учета (КПУ) по площади учитыватся типы помещений,
		// указанные в настройках параметра учета ЖКХ (например, для возможности распределения расхода по КПУ в т.ч. на паркинг).
		
		ПоляВыборкиКоэффициентаПодъездаЗдания = "
		|	СУММА(ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0)) КАК КоэффициентЧислитель,
		|	1 КАК КоэффициентЗнаменатель";
		ТаблицаСоединенияПодъезд = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Период, 
		|					ВидПлощади = &ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды
		|					И Объект.Родитель = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
		|					И Объект.ВидПомещения.ТипПомещения В (&СписокТиповПомещений)) КАК КВП_ПлощадьПомещенияСрезПоследних
		|		ПО КВП_ПлощадьПомещенияСрезПоследних.Объект.Подъезд = ТаблицаСчетчиков.Объект";
		ТаблицаСоединенияЗдание = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Период, 
		|					ВидПлощади = &ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды
		|					И Объект.Родитель = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
		|					И Объект.ВидПомещения.ТипПомещения В (&СписокТиповПомещений)) КАК КВП_ПлощадьПомещенияСрезПоследних
		|		ПО КВП_ПлощадьПомещенияСрезПоследних.Объект.Владелец = ТаблицаСчетчиков.Объект";
		
		Запрос.УстановитьПараметр("СписокТиповПомещений", РегистрыСведений.УПЖКХ_ТипыПомещенийДляРаспределенияРасходаКПУ.ПолучитьСписокТиповПомещенийДляРаспределенияРасходаКПУ());
		
	Иначе
		
		ПоляВыборкиКоэффициентаПодъездаЗдания = "1 КАК КоэффициентЧислитель,
												|1 КАК КоэффициентЗнаменатель";
		
	КонецЕсли;
	
	ПоляГруппировки = "
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаСчетчиков.Счетчик,
	|		ТаблицаСчетчиков.СпособРегистрацииПоказаний,
	|		ТаблицаСчетчиков.Тарифность,
	|		ТаблицаСчетчиков.Разрядность,
	|		ТаблицаСчетчиков.Объект,
	|		ТаблицаСчетчиков.Помещение,
	|		ТаблицаСчетчиков.ВидОбъекта,
	|		ТаблицаСчетчиков.Услуга,
	|		ТаблицаСчетчиков.ДатаПоказания,
	|		ТаблицаСчетчиков.ДневноеПоказание,
	|		ТаблицаСчетчиков.НочноеПоказание,
	|		ТаблицаСчетчиков.ПиковоеПоказание,
	|		ТаблицаСчетчиков.ДатаПредыдущегоПоказания,
	|		ТаблицаСчетчиков.ПредыдущееПоказаниеНачальное,
	|		ТаблицаСчетчиков.ДневноеПоказаниеПредыдущее,
	|		ТаблицаСчетчиков.НочноеПоказаниеПредыдущее,
	|		ТаблицаСчетчиков.ПиковоеПоказаниеПредыдущее";
	
	МассивТиповПоказаний = Новый Массив;
	МассивТиповПоказаний.Добавить(Тип("Булево"));
	МассивТиповПоказаний.Добавить(Тип("Число"));
	
	Если ТаблицаСчетчиков.Колонки.Найти("ДневноеПоказание") = Неопределено Тогда
		ТаблицаСчетчиков.Колонки.Добавить("ДневноеПоказание", Новый ОписаниеТипов(МассивТиповПоказаний));
	КонецЕсли;
	Если ТаблицаСчетчиков.Колонки.Найти("НочноеПоказание") = Неопределено Тогда
		ТаблицаСчетчиков.Колонки.Добавить("НочноеПоказание", Новый ОписаниеТипов(МассивТиповПоказаний));
	КонецЕсли;
	Если ТаблицаСчетчиков.Колонки.Найти("ПиковоеПоказание") = Неопределено Тогда
		ТаблицаСчетчиков.Колонки.Добавить("ПиковоеПоказание", Новый ОписаниеТипов(МассивТиповПоказаний));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаСчетчиков", ТаблицаСчетчиков);
	Запрос.УстановитьПараметр("СписокЛС",         СписокЛС);
	Запрос.УстановитьПараметр("Период",           КонецДня(Дата));
	
	Запрос.УстановитьПараметр("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета", ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета);
	Запрос.УстановитьПараметр("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды",        ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды);
	
	// Если коэффициенты определяем для лицевых счетов или помещений,
	// то необходимо получить данные о количестве жильцов.
	Если СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноЗарегистрированным
	 ИЛИ СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПроживающим Тогда
		ДополнитьЗапросКоличествомЖильцов(Запрос, Дата, СписокЛС);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСчетчиков.Счетчик,
	|	ТаблицаСчетчиков.СпособРегистрацииПоказаний,
	|	ТаблицаСчетчиков.Тарифность,
	|	ТаблицаСчетчиков.Разрядность,
	|	ТаблицаСчетчиков.Объект,
	|	ТаблицаСчетчиков.Помещение,
	|	ТаблицаСчетчиков.ВидОбъекта,
	|	ТаблицаСчетчиков.Услуга,
	|	ТаблицаСчетчиков.ДатаПоказания,
	|	ТаблицаСчетчиков.ДневноеПоказание,
	|	ТаблицаСчетчиков.НочноеПоказание,
	|	ТаблицаСчетчиков.ПиковоеПоказание,
	|	ТаблицаСчетчиков.ДатаПредыдущегоПоказания,
	|	ТаблицаСчетчиков.ПредыдущееПоказаниеНачальное,
	|	ТаблицаСчетчиков.ДневноеПоказаниеПредыдущее,
	|	ТаблицаСчетчиков.НочноеПоказаниеПредыдущее,
	|	ТаблицаСчетчиков.ПиковоеПоказаниеПредыдущее
	|ПОМЕСТИТЬ ТаблицаСчетчиков
	|ИЗ
	|	&ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаСчетчиков.ВидОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСчетчиков.Счетчик КАК Счетчик,
	|	ТаблицаСчетчиков.СпособРегистрацииПоказаний,
	|	ТаблицаСчетчиков.Тарифность,
	|	ТаблицаСчетчиков.Разрядность,
	|	ТаблицаСчетчиков.Объект,
	|	ТаблицаСчетчиков.ВидОбъекта,
	|	ТаблицаСчетчиков.Помещение,
	|	ТаблицаСчетчиков.Услуга,
	|	ТаблицаСчетчиков.Объект.Адрес.Владелец.Участок КАК Участок,
	|	ТаблицаСчетчиков.Счетчик.ВидУслуги.ВидУслуги КАК ВидУслуги,
	|	ТаблицаСчетчиков.Счетчик.ИспользоватьТемпературныйКоэффициент КАК ИспользоватьТемпературныйКоэффициент,
	|	ТаблицаСчетчиков.Счетчик.Коэффициент КАК КоэффициентТрансформации,
	|	1 КАК ТемпературныйКоэффициент,
	|	ТаблицаСчетчиков.ДатаПоказания,
	|	ТаблицаСчетчиков.ДневноеПоказание,
	|	ТаблицаСчетчиков.НочноеПоказание,
	|	ТаблицаСчетчиков.ПиковоеПоказание,
	|	ТаблицаСчетчиков.ДатаПредыдущегоПоказания,
	|	ТаблицаСчетчиков.ПредыдущееПоказаниеНачальное,
	|	ТаблицаСчетчиков.ДневноеПоказаниеПредыдущее,
	|	ТаблицаСчетчиков.НочноеПоказаниеПредыдущее,
	|	ТаблицаСчетчиков.ПиковоеПоказаниеПредыдущее,
	|	" + ПоляВыборкиКоэффициентаЛС + "
	|ПОМЕСТИТЬ ТаблицаЛС
	|ИЗ
	|	ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|		" + ТаблицаСоединенияЛС + "
	|ГДЕ
	|	ТаблицаСчетчиков.ВидОбъекта = 1
	|		" + ПоляГруппировки + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСчетчиков.Счетчик КАК Счетчик,
	|	ТаблицаСчетчиков.СпособРегистрацииПоказаний,
	|	ТаблицаСчетчиков.Тарифность,
	|	ТаблицаСчетчиков.Разрядность,
	|	ТаблицаСчетчиков.Объект,
	|	ТаблицаСчетчиков.ВидОбъекта,
	|	ТаблицаСчетчиков.Помещение,
	|	ТаблицаСчетчиков.Услуга,
	|	ТаблицаСчетчиков.Объект.Владелец.Участок КАК Участок,
	|	ТаблицаСчетчиков.Счетчик.ВидУслуги.ВидУслуги КАК ВидУслуги,
	|	ТаблицаСчетчиков.Счетчик.ИспользоватьТемпературныйКоэффициент КАК ИспользоватьТемпературныйКоэффициент,
	|	ТаблицаСчетчиков.Счетчик.Коэффициент КАК КоэффициентТрансформации,
	|	1 КАК ТемпературныйКоэффициент,
	|	ТаблицаСчетчиков.ДатаПоказания,
	|	ТаблицаСчетчиков.ДневноеПоказание,
	|	ТаблицаСчетчиков.НочноеПоказание,
	|	ТаблицаСчетчиков.ПиковоеПоказание,
	|	ТаблицаСчетчиков.ДатаПредыдущегоПоказания,
	|	ТаблицаСчетчиков.ПредыдущееПоказаниеНачальное,
	|	ТаблицаСчетчиков.ДневноеПоказаниеПредыдущее,
	|	ТаблицаСчетчиков.НочноеПоказаниеПредыдущее,
	|	ТаблицаСчетчиков.ПиковоеПоказаниеПредыдущее,
	|	" + ПоляВыборкиКоэффициентаПомещения + "
	|ПОМЕСТИТЬ ТаблицаПомещений
	|ИЗ
	|	ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|		" + ТаблицаСоединенияПомещение + "
	|ГДЕ
	|	ТаблицаСчетчиков.ВидОбъекта = 2
	|		" + ПоляГруппировки + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетчиков.Счетчик КАК Счетчик,
	|	ТаблицаСчетчиков.СпособРегистрацииПоказаний,
	|	ТаблицаСчетчиков.Тарифность,
	|	ТаблицаСчетчиков.Разрядность,
	|	ТаблицаСчетчиков.Объект,
	|	ТаблицаСчетчиков.ВидОбъекта,
	|	ТаблицаСчетчиков.Помещение,
	|	ТаблицаСчетчиков.Услуга,
	|	ТаблицаСчетчиков.Объект.Владелец.Участок КАК Участок,
	|	ТаблицаСчетчиков.Счетчик.ВидУслуги.ВидУслуги КАК ВидУслуги,
	|	ТаблицаСчетчиков.Счетчик.ИспользоватьТемпературныйКоэффициент КАК ИспользоватьТемпературныйКоэффициент,
	|	ТаблицаСчетчиков.Счетчик.Коэффициент КАК КоэффициентТрансформации,
	|	1 КАК ТемпературныйКоэффициент,
	|	ТаблицаСчетчиков.ДатаПоказания,
	|	ТаблицаСчетчиков.ДневноеПоказание,
	|	ТаблицаСчетчиков.НочноеПоказание,
	|	ТаблицаСчетчиков.ПиковоеПоказание,
	|	ТаблицаСчетчиков.ДатаПредыдущегоПоказания,
	|	ТаблицаСчетчиков.ПредыдущееПоказаниеНачальное,
	|	ТаблицаСчетчиков.ДневноеПоказаниеПредыдущее,
	|	ТаблицаСчетчиков.НочноеПоказаниеПредыдущее,
	|	ТаблицаСчетчиков.ПиковоеПоказаниеПредыдущее,
	|	" + ПоляВыборкиКоэффициентаПодъездаЗдания + "
	|ПОМЕСТИТЬ ТаблицаПодъездов
	|ИЗ
	|	ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|		" + ТаблицаСоединенияПодъезд + "
	|ГДЕ
	|	ТаблицаСчетчиков.ВидОбъекта = 3
	|		" + ПоляГруппировки + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетчиков.Счетчик КАК Счетчик,
	|	ТаблицаСчетчиков.СпособРегистрацииПоказаний,
	|	ТаблицаСчетчиков.Тарифность,
	|	ТаблицаСчетчиков.Разрядность,
	|	ТаблицаСчетчиков.Объект,
	|	ТаблицаСчетчиков.ВидОбъекта,
	|	ТаблицаСчетчиков.Помещение,
	|	ТаблицаСчетчиков.Услуга,
	|	ТаблицаСчетчиков.Объект.Участок КАК Участок,
	|	ТаблицаСчетчиков.Счетчик.ВидУслуги.ВидУслуги КАК ВидУслуги,
	|	ТаблицаСчетчиков.Счетчик.ИспользоватьТемпературныйКоэффициент КАК ИспользоватьТемпературныйКоэффициент,
	|	ТаблицаСчетчиков.Счетчик.Коэффициент КАК КоэффициентТрансформации,
	|	1 КАК ТемпературныйКоэффициент,
	|	ТаблицаСчетчиков.ДатаПоказания,
	|	ТаблицаСчетчиков.ДневноеПоказание,
	|	ТаблицаСчетчиков.НочноеПоказание,
	|	ТаблицаСчетчиков.ПиковоеПоказание,
	|	ТаблицаСчетчиков.ДатаПредыдущегоПоказания,
	|	ТаблицаСчетчиков.ПредыдущееПоказаниеНачальное,
	|	ТаблицаСчетчиков.ДневноеПоказаниеПредыдущее,
	|	ТаблицаСчетчиков.НочноеПоказаниеПредыдущее,
	|	ТаблицаСчетчиков.ПиковоеПоказаниеПредыдущее,
	|	" + ПоляВыборкиКоэффициентаПодъездаЗдания + "
	|ПОМЕСТИТЬ ТаблицаЗданий
	|ИЗ
	|	ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|		" + ТаблицаСоединенияЗдание + "
	|ГДЕ
	|	ТаблицаСчетчиков.ВидОбъекта = 4
	|		" + ПоляГруппировки + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЛС.Счетчик,
	|	ТаблицаЛС.СпособРегистрацииПоказаний,
	|	ТаблицаЛС.Тарифность,
	|	ТаблицаЛС.Разрядность,
	|	ТаблицаЛС.Объект,
	|	ТаблицаЛС.ВидОбъекта,
	|	ТаблицаЛС.Помещение,
	|	ТаблицаЛС.Услуга,
	|	ТаблицаЛС.Участок,
	|	ТаблицаЛС.ВидУслуги,
	|	ТаблицаЛС.ИспользоватьТемпературныйКоэффициент,
	|	ТаблицаЛС.КоэффициентТрансформации,
	|	ТаблицаЛС.ТемпературныйКоэффициент,
	|	ТаблицаЛС.ДатаПоказания,
	|	ТаблицаЛС.ДневноеПоказание,
	|	ТаблицаЛС.НочноеПоказание,
	|	ТаблицаЛС.ПиковоеПоказание,
	|	ТаблицаЛС.ДатаПредыдущегоПоказания,
	|	ТаблицаЛС.ПредыдущееПоказаниеНачальное,
	|	ТаблицаЛС.ДневноеПоказаниеПредыдущее,
	|	ТаблицаЛС.НочноеПоказаниеПредыдущее,
	|	ТаблицаЛС.ПиковоеПоказаниеПредыдущее,
	|	ТаблицаЛС.КоэффициентЧислитель,
	|	ТаблицаЛС.КоэффициентЗнаменатель,
	|	1 КАК КоличествоОбъектов
	|ИЗ
	|	ТаблицаЛС КАК ТаблицаЛС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаПомещений.Счетчик,
	|	ТаблицаПомещений.СпособРегистрацииПоказаний,
	|	ТаблицаПомещений.Тарифность,
	|	ТаблицаПомещений.Разрядность,
	|	ТаблицаПомещений.Объект,
	|	ТаблицаПомещений.ВидОбъекта,
	|	ТаблицаПомещений.Помещение,
	|	ТаблицаПомещений.Услуга,
	|	ТаблицаПомещений.Участок,
	|	ТаблицаПомещений.ВидУслуги,
	|	ТаблицаПомещений.ИспользоватьТемпературныйКоэффициент,
	|	ТаблицаПомещений.КоэффициентТрансформации,
	|	ТаблицаПомещений.ТемпературныйКоэффициент,
	|	ТаблицаПомещений.ДатаПоказания,
	|	ТаблицаПомещений.ДневноеПоказание,
	|	ТаблицаПомещений.НочноеПоказание,
	|	ТаблицаПомещений.ПиковоеПоказание,
	|	ТаблицаПомещений.ДатаПредыдущегоПоказания,
	|	ТаблицаПомещений.ПредыдущееПоказаниеНачальное,
	|	ТаблицаПомещений.ДневноеПоказаниеПредыдущее,
	|	ТаблицаПомещений.НочноеПоказаниеПредыдущее,
	|	ТаблицаПомещений.ПиковоеПоказаниеПредыдущее,
	|	ТаблицаПомещений.КоэффициентЧислитель,
	|	ТаблицаПомещений.КоэффициентЗнаменатель,
	|	1
	|ИЗ
	|	ТаблицаПомещений КАК ТаблицаПомещений
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаПодъездов.Счетчик,
	|	ТаблицаПодъездов.СпособРегистрацииПоказаний,
	|	ТаблицаПодъездов.Тарифность,
	|	ТаблицаПодъездов.Разрядность,
	|	ТаблицаПодъездов.Объект,
	|	ТаблицаПодъездов.ВидОбъекта,
	|	ТаблицаПодъездов.Помещение,
	|	ТаблицаПодъездов.Услуга,
	|	ТаблицаПодъездов.Участок,
	|	ТаблицаПодъездов.ВидУслуги,
	|	ТаблицаПодъездов.ИспользоватьТемпературныйКоэффициент,
	|	ТаблицаПодъездов.КоэффициентТрансформации,
	|	ТаблицаПодъездов.ТемпературныйКоэффициент,
	|	ТаблицаПодъездов.ДатаПоказания,
	|	ТаблицаПодъездов.ДневноеПоказание,
	|	ТаблицаПодъездов.НочноеПоказание,
	|	ТаблицаПодъездов.ПиковоеПоказание,
	|	ТаблицаПодъездов.ДатаПредыдущегоПоказания,
	|	ТаблицаПодъездов.ПредыдущееПоказаниеНачальное,
	|	ТаблицаПодъездов.ДневноеПоказаниеПредыдущее,
	|	ТаблицаПодъездов.НочноеПоказаниеПредыдущее,
	|	ТаблицаПодъездов.ПиковоеПоказаниеПредыдущее,
	|	ТаблицаПодъездов.КоэффициентЧислитель,
	|	ТаблицаПодъездов.КоэффициентЗнаменатель,
	|	1
	|ИЗ
	|	ТаблицаПодъездов КАК ТаблицаПодъездов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗданий.Счетчик,
	|	ТаблицаЗданий.СпособРегистрацииПоказаний,
	|	ТаблицаЗданий.Тарифность,
	|	ТаблицаЗданий.Разрядность,
	|	ТаблицаЗданий.Объект,
	|	ТаблицаЗданий.ВидОбъекта,
	|	ТаблицаЗданий.Помещение,
	|	ТаблицаЗданий.Услуга,
	|	ТаблицаЗданий.Участок,
	|	ТаблицаЗданий.ВидУслуги,
	|	ТаблицаЗданий.ИспользоватьТемпературныйКоэффициент,
	|	ТаблицаЗданий.КоэффициентТрансформации,
	|	ТаблицаЗданий.ТемпературныйКоэффициент,
	|	ТаблицаЗданий.ДатаПоказания,
	|	ТаблицаЗданий.ДневноеПоказание,
	|	ТаблицаЗданий.НочноеПоказание,
	|	ТаблицаЗданий.ПиковоеПоказание,
	|	ТаблицаЗданий.ДатаПредыдущегоПоказания,
	|	ТаблицаЗданий.ПредыдущееПоказаниеНачальное,
	|	ТаблицаЗданий.ДневноеПоказаниеПредыдущее,
	|	ТаблицаЗданий.НочноеПоказаниеПредыдущее,
	|	ТаблицаЗданий.ПиковоеПоказаниеПредыдущее,
	|	ТаблицаЗданий.КоэффициентЧислитель,
	|	ТаблицаЗданий.КоэффициентЗнаменатель,
	|	1
	|ИЗ
	|	ТаблицаЗданий КАК ТаблицаЗданий";
	
	ТаблицаСчетчиков = Запрос.Выполнить().Выгрузить();
	мТаблицаКоэффициентовПоСчетчикам = ТаблицаСчетчиков.Скопировать(, "Счетчик, ВидОбъекта, КоэффициентЧислитель, КоэффициентЗнаменатель, КоличествоОбъектов");
	
	// Свернем таблицу коэффициентов по счетчикам, при этом суммировать будем только значения
	// с одинаковым "КоэффициентЗнаменатель", т.к. необходимо математически сложить дроби с разными знаменателями.
	мТаблицаКоэффициентовПоСчетчикам.Свернуть("Счетчик, ВидОбъекта, КоэффициентЗнаменатель", "КоэффициентЧислитель, КоличествоОбъектов");
	
	мТаблицаКоэффициентовПоСчетчикам.Индексы.Добавить("Счетчик");
	Для Каждого СтрокаТаблицыСчетчиков Из ТаблицаСчетчиков Цикл
		
		// Для счетчика производим расчет температурного коэффициента, если для него
		// используются температурные коэффициенты.
		Если СтрокаТаблицыСчетчиков.ИспользоватьТемпературныйКоэффициент Тогда
			СтрокаТаблицыСчетчиков.ТемпературныйКоэффициент = 
					РегистрыСведений.УПЖКХ_ЗначенияТемпературныхКоэффициентов.ПолучитьТемпературныйКоэффициентУслугиНаУчастке(
										Дата,
										СтрокаТаблицыСчетчиков.ВидУслуги,
										СтрокаТаблицыСчетчиков.Участок);
		КонецЕсли;
		
		НайденныеСтроки = мТаблицаКоэффициентовПоСчетчикам.НайтиСтроки(Новый Структура("Счетчик", СтрокаТаблицыСчетчиков.Счетчик));
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			// Найдена одна строка:
			Если НайденныеСтроки.Количество() = 1 Тогда
				
				Если НайденныеСтроки[0].КоличествоОбъектов = 1 Тогда
					СтрокаТаблицыСчетчиков.КоэффициентЧислитель   = 1;
					СтрокаТаблицыСчетчиков.КоэффициентЗнаменатель = 1;
					Продолжить;
				КонецЕсли;
				
				СуммаДробиЧислитель     = НайденныеСтроки[0].КоэффициентЧислитель;
				СуммаДробиЗнаменатель   = НайденныеСтроки[0].КоэффициентЗнаменатель;
				СуммаКоличествоОбъектов = НайденныеСтроки[0].КоличествоОбъектов;
				
			Иначе // Найдено более одной строки:
				// Необходимо просуммировать дроби, содержащие размеры долей:
				СуммаДробиЧислитель     = 0;
				СуммаДробиЗнаменатель   = 1;
				СуммаКоличествоОбъектов = 0;
				Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
					
					СложитьДроби(СуммаДробиЧислитель,
								 СуммаДробиЗнаменатель,
								 ТекущаяСтрока.КоэффициентЧислитель,
								 ТекущаяСтрока.КоэффициентЗнаменатель,
								 СуммаДробиЧислитель,
								 СуммаДробиЗнаменатель);
					
					СуммаКоличествоОбъектов = СуммаКоличествоОбъектов + ТекущаяСтрока.КоличествоОбъектов;
					
				КонецЦикла;
				
			КонецЕсли;
				
			Если СтрокаТаблицыСчетчиков.ВидОбъекта = 1 ИЛИ СтрокаТаблицыСчетчиков.ВидОбъекта = 2 Тогда
				СпособРаспределения = СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета;
			ИначеЕсли СтрокаТаблицыСчетчиков.ВидОбъекта = 3 ИЛИ СтрокаТаблицыСчетчиков.ВидОбъекта = 4 Тогда
				СпособРаспределения = СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды;
			КонецЕсли;
			
			СтруктураКоэффициентов = ОпределитьРазмерДоли(СпособРаспределения,
														  СтрокаТаблицыСчетчиков.КоэффициентЧислитель,
														  СтрокаТаблицыСчетчиков.КоэффициентЗнаменатель,
														  СуммаДробиЧислитель,
														  СуммаДробиЗнаменатель,
														  СуммаКоличествоОбъектов);
			
			СтрокаТаблицыСчетчиков.КоэффициентЧислитель   = СтруктураКоэффициентов.ДоляЧислитель;
			СтрокаТаблицыСчетчиков.КоэффициентЗнаменатель = СтруктураКоэффициентов.ДоляЗнаменатель;
			
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры // УстановитьКоэффициентыОбъектов()

// Рассчитывает долю в зависимости от настройки программы ЖКХ.
// Используется единый механизм и в документе "Ввод показаний приборов учета", и при расчете в документе "Начисление услуг".
//
// Параметры:
//  СпособРаспределения          - перечисление - значение соответствующего ключа структуры из константы
//                               УПЖКХ_СпособРаспределенияПоказанийКоллективногоПрибораУчета.
//  КоэффициентЧислитель         - число - числитель дроби доли, определенный с учетом Способа распределения.
//  КоэффициентЗнаменатель       - число - знаменатель дроби доли, определенный с учетом Способа распределения.
//  СуммаКоэффициентовЧислитель  - число - числитель суммы долей объектов, определенный с учетом Способа распределения.
//  СуммаКоэффициентовЗнаменатель- число - числитель суммы долей объектов, определенный с учетом Способа распределения.
//  КоличествоОбъектов           - число - количество объектов, между которыми нужно распределить показания.
//
Функция ОпределитьРазмерДоли(СпособРаспределения, КоэффициентЧислитель, КоэффициентЗнаменатель, СуммаКоэффициентЧислитель, СуммаКоэффициентЗнаменатель, КоличествоОбъектов) Экспорт
	
	ДоляЧислитель   = 0;
	ДоляЗнаменатель = 1;
	
	// Если есть данные для определения долей распределения расхода приборов учета по лицевым счетам, то берем их; 
	// если нет данных, то:
	//  - когда не установлено долей лицевых счетов, то - доли будут нулевыми,
	//  - когда нет данных о количестве проживающих или зарегистрированных - то поровну.
	
	// Для приборов учета, установленных на подъезды/здания:
	//  - Если установлена настройка "Поровну", то доля определяется в зависимости от количества объектов,
	//       на которые установлен прибор учета.
	//          (Доля определяется аналогично определению долей лицевых счетов/помещений
	//           при настройках "Пропорционально зарегистрированным" или "Пропорционально проживающим").
	//
	//  - Если установлена настройка "Пропорционально площадям помещений", то доля определяется как отношение
	//       суммы площадей помещений (квартир и офисов) текущего объекта (здания или подъезда) к общей площади
	//       помещений, входящих в состав всех объектов (зданий или подъездов), на которые установлен прибор учета.
	//         (Доля определяется аналогично определению долей лицевых счетов/помещений
	//          при настройке "Пропорционально долям лицевых счетов").
	
	Если СпособРаспределения = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноЗарегистрированным
	 ИЛИ СпособРаспределения = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПроживающим
	 ИЛИ СпособРаспределения = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.Поровну Тогда
		
		Если СуммаКоэффициентЧислитель = 0 Тогда
			ДоляЧислитель   = 1;
			ДоляЗнаменатель = КоличествоОбъектов;
		Иначе
			ДоляЧислитель   = КоэффициентЧислитель   * СуммаКоэффициентЗнаменатель;
			ДоляЗнаменатель = КоэффициентЗнаменатель * СуммаКоэффициентЧислитель;
		КонецЕсли;
		
		
	ИначеЕсли СпособРаспределения = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноДолямЛицевыхСчетов
	 ИЛИ СпособРаспределения = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноПлощадямПомещений Тогда
		
		Если СуммаКоэффициентЧислитель = 0 Тогда
			ДоляЧислитель   = 0;
			ДоляЗнаменатель = 1;
		Иначе
			ДоляЧислитель   = КоэффициентЧислитель   * СуммаКоэффициентЗнаменатель;
			ДоляЗнаменатель = КоэффициентЗнаменатель * СуммаКоэффициентЧислитель;
		КонецЕсли;
		
	КонецЕсли;
	
	УпроститьДробь(ДоляЧислитель, ДоляЗнаменатель);
	СтруктураКоэффициентов = Новый Структура();
	СтруктураКоэффициентов.Вставить("ДоляЧислитель",   ДоляЧислитель);
	СтруктураКоэффициентов.Вставить("ДоляЗнаменатель", ДоляЗнаменатель);
	
	Возврат СтруктураКоэффициентов;
	
КонецФункции // ОпределитьРазмерДоли()

////////////////////////////////////////////////////////////////////////////////
// Проведение

// Функция возвращает параметры проведения.
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.ВводНачальныхПоказаний,
	|	Реквизиты.Услуга,
	|	Реквизиты.Комментарий,
	|	Реквизиты.Ответственный,
	|	Реквизиты.КраткийСоставДокумента,
	|	Реквизиты.Объект
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Реквизиты = Новый Структура("Ссылка,Номер,Дата,ВидОперации,ВводНачальныхПоказаний,Услуга,
								|Комментарий,Ответственный,КраткийСоставДокумента,Объект");
	
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	
	// Подготовим таблицу из ТЧ "Главная".
	
	Если ДокументСсылка.ВводНачальныхПоказаний Тогда
		УсловиеПоСпособуРегистрацииПоказаний = 
		" И НЕ Счетчик.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета)";
	Иначе
		УсловиеПоСпособуРегистрацииПоказаний = "";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Главная.Ссылка КАК Ссылка,
	|	Главная.Услуга КАК Услуга,
	|	Главная.Счетчик КАК Счетчик,
	|	Главная.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний,
	|	Главная.Тарифность КАК Тарифность,
	|	Главная.Разрядность КАК Разрядность,
	|	Главная.Помещение КАК Помещение,
	|	Главная.ДатаПредыдущегоПоказания КАК ДатаПредыдущегоПоказания,
	|	Главная.ПредыдущееПоказаниеНачальное КАК ПредыдущееПоказаниеНачальное,
	|	Главная.Объект КАК Объект,
	|	Главная.ДатаПоказания КАК ДатаПоказания,
	|	Главная.ПоказанияКорректны КАК ПоказанияКорректны,
	|	Главная.ДневноеПоказание КАК ДневноеПоказание,
	|	Главная.НочноеПоказание КАК НочноеПоказание,
	|	Главная.ПиковоеПоказание КАК ПиковоеПоказание,
	|	Главная.ДневноеПоказаниеПредыдущее КАК ДневноеПоказаниеПредыдущее,
	|	Главная.НочноеПоказаниеПредыдущее КАК НочноеПоказаниеПредыдущее,
	|	Главная.ПиковоеПоказаниеПредыдущее КАК ПиковоеПоказаниеПредыдущее,
	|	Главная.СреднийРасходДневной КАК СреднийРасходДневной,
	|	Главная.СреднийРасходНочной КАК СреднийРасходНочной,
	|	Главная.СреднийРасходПиковый КАК СреднийРасходПиковый,
	|	Главная.КоэффициентЧислитель КАК КоэффициентЧислитель,
	|	Главная.КоэффициентЗнаменатель КАК КоэффициентЗнаменатель,
	|	Главная.КоэффициентТрансформации КАК КоэффициентТрансформации,
	|	Главная.ТемпературныйКоэффициент КАК ТемпературныйКоэффициент
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика.Главная КАК Главная
	|ГДЕ
	|	Главная.Ссылка = &Ссылка" + УсловиеПоСпособуРегистрацииПоказаний;
	
	ТаблицаГлавная = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПроведения.Вставить("ТаблицаГлавная", ТаблицаГлавная);
	
	Возврат ПараметрыПроведения;
	
КонецФункции

#КонецОбласти 

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыИФункцииЗаполненияПриемникаДаннымиИзИсточника

// Выполняет заполнение структуры-приемника данными мз структуры-источника.
//
Процедура ЗаполнитьСтруктуруЗначениямиИзДругойСтруктуры(СтруктураПриемник, СтруктураИсточник)
	
	Для каждого ТекСвойство из СтруктураИсточник Цикл
		НаименованиеСвойства = ТекСвойство.Ключ;
		ЗаполнитьСвойствоСтруктуры(НаименованиеСвойства, СтруктураПриемник, СтруктураИсточник)
	КонецЦикла;
	
КонецПроцедуры

// Выполняет заполнение свойства структуры-приемника данными из аналогичного свойства структуры-источника.
//
Процедура ЗаполнитьСвойствоСтруктуры(НаименованиеСвойства, СтруктураПриемник, СтруктураИсточник)
	
	СвойствоПоказание = (НаименованиеСвойства = "ДневноеПоказание" ИЛИ НаименованиеСвойства = "НочноеПоказание" ИЛИ НаименованиеСвойства = "ПиковоеПоказание");
	
	Если СтруктураПриемник.Свойство(НаименованиеСвойства)
	   И СтруктураИсточник.Свойство(НаименованиеСвойства)
	   И (СвойствоПоказание ИЛИ ЗначениеЗаполнено(СтруктураИсточник[НаименованиеСвойства])) Тогда
		
		НовоеЗначение      = СтруктураИсточник[НаименованиеСвойства];
		ТипСтарогоЗначения = ТипЗнч(СтруктураПриемник[НаименованиеСвойства]);
		ТипНовогоЗначения  = ТипЗнч(НовоеЗначение);
		
		Если ТипНовогоЗначения = Тип("ТаблицаЗначений") И ТипНовогоЗначения = ТипСтарогоЗначения Тогда
			
			ЗаполнитьТаблицуЗначениямиИзДругойТаблицы(СтруктураПриемник[НаименованиеСвойства], НовоеЗначение);
			
		ИначеЕсли ТипНовогоЗначения = Тип("Структура") И ТипНовогоЗначения = ТипСтарогоЗначения Тогда
			
			ЗаполнитьСтруктуруЗначениямиИзДругойСтруктуры(СтруктураПриемник[НаименованиеСвойства], НовоеЗначение);
			
		Иначе
			
			СтруктураПриемник[НаименованиеСвойства] = НовоеЗначение;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет заполнение таблицы-приемника данными из таблицы-источника.
//
Процедура ЗаполнитьТаблицуЗначениямиИзДругойТаблицы(ТаблицаПриемник, ТаблицаИсточник)
	
	// На основании состава колонок таблицы-приемника и таблицы-источника формируем
	// структуры с теми же полями.
	//
	// Это нужно для того, чтобы использовать имеющийся механизм заполнения
	// структуры-приемника из структуры-источника, а не создавать дополнительный механизм
	// для строк таблиц значений.
	//
	// Также использование строк таблиц значений напрямую осложнено тем, что непосредственно
	// из строки невозможно определить наличие определенных колонок. При этом для структур
	// такая возможность имеется.
	СтруктураПриемник = СформироватьСтруктуруПоКолонкамТаблицыЗначений(ТаблицаПриемник);
	СтруктураИсточник = СформироватьСтруктуруПоКолонкамТаблицыЗначений(ТаблицаИсточник);
	
	Для каждого ТекСтрока из ТаблицаИсточник Цикл
		
		НоваяСтрокаПриемника = ТаблицаПриемник.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтруктураИсточник, ТекСтрока);
		ЗаполнитьЗначенияСвойств(СтруктураПриемник, НоваяСтрокаПриемника);
		
		ЗаполнитьСтруктуруЗначениямиИзДругойСтруктуры(СтруктураПриемник, СтруктураИсточник);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемника, СтруктураПриемник);
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразует строку таблицы в структуру для ее дальнейшей обработки.
//
Функция СформироватьСтруктуруПоКолонкамТаблицыЗначений(Таблица)
	
	ПереченьКолонок = "";
	
	Для каждого ТекКолонка из Таблица.Колонки Цикл
		ПереченьКолонок = ПереченьКолонок + ТекКолонка.Имя + ",";
	КонецЦикла;
	
	ПереченьКолонок = Лев(ПереченьКолонок, СтрДлина(ПереченьКолонок) - 1);
	
	Возврат Новый Структура(ПереченьКолонок);
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокумента

// Подготавливает структуру-основание для заполнения документа на основании принятого основания.
//
Функция ПодготовитьСтруктуруОснованияЗаполненияДокумента(ОснованиеЗаполненияВходящее) Экспорт
	
	ОснованияЗаполненияДокумента = ПодготовитьСтруктуруОснованияЗаполненияДокументаПоУмолчанию();
	
	// Заполняем структуру-основание данными из входящей структуры.
	Если ТипЗнч(ОснованияЗаполненияДокумента) = Тип("Структура") И ТипЗнч(ОснованиеЗаполненияВходящее) = Тип("Структура") Тогда
		ЗаполнитьСтруктуруЗначениямиИзДругойСтруктуры(ОснованияЗаполненияДокумента, ОснованиеЗаполненияВходящее);
	// В данном случае следующее условие никогда не сработает, но оно оставлено на случай, если
	// механизм заполнения будет вынесен в общий модуль для использования другими документами.
	ИначеЕсли ТипЗнч(ОснованияЗаполненияДокумента) = Тип("ТаблицаЗначений") И ТипЗнч(ОснованиеЗаполненияВходящее) = Тип("ТаблицаЗначений") Тогда
		ЗаполнитьТаблицуЗначениямиИзДругойТаблицы(ОснованияЗаполненияДокумента, ОснованиеЗаполненияВходящее);
	КонецЕсли;
	
	// Выполняет дозаполнение таблицы показаний данными об услугах счетчиков, объектах, за которыми
	// закреплены счетчики, и о видах операции, соответствующих им.
	ДозаполнитьТаблицуПоказаний(ОснованияЗаполненияДокумента);
	
	Возврат ОснованияЗаполненияДокумента;
	
КонецФункции

// Формирует структуру-основание для заполнения документов по умолчанию.
//
Функция ПодготовитьСтруктуруОснованияЗаполненияДокументаПоУмолчанию()
	
	СтруктураОснованияЗаполненияДокумента = Новый Структура("ВидОперации, Дата, Услуга, Объект, Комментарий, ВводНачальныхПоказаний, ЗагружатьНулевыеПоказания,
															|ТаблицаПоказаний, Ответственный, ФормироватьДокументыВРазрезеЗданий, ФормироватьДокументыВРазрезеУслуг,
															|ПроводитьСформированныеДокументы, ВыполняетсяМассовоеФормированиеДокументов");
	
	// Значения по умолчанию.
	СтруктураОснованияЗаполненияДокумента.ВидОперации                      = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет;
	СтруктураОснованияЗаполненияДокумента.Дата                             = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	СтруктураОснованияЗаполненияДокумента.Услуга                           = Справочники.КВП_Услуги.ПустаяСсылка();
	СтруктураОснованияЗаполненияДокумента.Объект                           = Неопределено;
	СтруктураОснованияЗаполненияДокумента.Комментарий                      = "";
	СтруктураОснованияЗаполненияДокумента.ВводНачальныхПоказаний           = Ложь;
	СтруктураОснованияЗаполненияДокумента.ЗагружатьНулевыеПоказания        = Ложь;
	СтруктураОснованияЗаполненияДокумента.ТаблицаПоказаний                 = Новый ТаблицаЗначений;
	СтруктураОснованияЗаполненияДокумента.Ответственный                    = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
	СтруктураОснованияЗаполненияДокумента.ПроводитьСформированныеДокументы = Истина;
	
	// Настройки массового формирования документов.
	СтруктураОснованияЗаполненияДокумента.ФормироватьДокументыВРазрезеЗданий = Ложь;
	СтруктураОснованияЗаполненияДокумента.ФормироватьДокументыВРазрезеУслуг  = Ложь;
	
	// Указывает на то, что выполняется массовое формирование документов.
	// Нужно для того, чтобы не выполнять повторную обработку данных структуры-основания при заполнении документов.
	СтруктураОснованияЗаполненияДокумента.ВыполняетсяМассовоеФормированиеДокументов = Ложь;
	
	// Подготовка таблицы показаний.
	МассивТиповОбъектов = Новый Массив;
	МассивТиповОбъектов.Добавить(Тип("СправочникСсылка.КВП_Здания"));
	МассивТиповОбъектов.Добавить(Тип("СправочникСсылка.КВП_Подъезды"));
	МассивТиповОбъектов.Добавить(Тип("СправочникСсылка.УПЖКХ_Помещения"));
	МассивТиповОбъектов.Добавить(Тип("СправочникСсылка.КВП_ЛицевыеСчета"));
	
	МассивТиповПоказаний = Новый Массив;
	МассивТиповПоказаний.Добавить(Тип("Булево"));
	МассивТиповПоказаний.Добавить(Тип("Число"));
	
	СтруктураОснованияЗаполненияДокумента.ТаблицаПоказаний.Колонки.Добавить("Счетчик",              Новый ОписаниеТипов("СправочникСсылка.КВП_Счетчики"));
	СтруктураОснованияЗаполненияДокумента.ТаблицаПоказаний.Колонки.Добавить("Услуга",               Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	СтруктураОснованияЗаполненияДокумента.ТаблицаПоказаний.Колонки.Добавить("ДатаПоказания",        Новый ОписаниеТипов("Дата"));
	СтруктураОснованияЗаполненияДокумента.ТаблицаПоказаний.Колонки.Добавить("ДневноеПоказание",     Новый ОписаниеТипов(МассивТиповПоказаний));
	СтруктураОснованияЗаполненияДокумента.ТаблицаПоказаний.Колонки.Добавить("НочноеПоказание",      Новый ОписаниеТипов(МассивТиповПоказаний));
	СтруктураОснованияЗаполненияДокумента.ТаблицаПоказаний.Колонки.Добавить("ПиковоеПоказание",     Новый ОписаниеТипов(МассивТиповПоказаний));
	СтруктураОснованияЗаполненияДокумента.ТаблицаПоказаний.Колонки.Добавить("Объект",               Новый ОписаниеТипов(МассивТиповОбъектов));
	СтруктураОснованияЗаполненияДокумента.ТаблицаПоказаний.Колонки.Добавить("ПоказанияКорректны",   Новый ОписаниеТипов("Булево"));
	СтруктураОснованияЗаполненияДокумента.ТаблицаПоказаний.Колонки.Добавить("СреднийРасходДневной", Новый ОписаниеТипов("Число"));
	СтруктураОснованияЗаполненияДокумента.ТаблицаПоказаний.Колонки.Добавить("СреднийРасходНочной",  Новый ОписаниеТипов("Число"));
	СтруктураОснованияЗаполненияДокумента.ТаблицаПоказаний.Колонки.Добавить("СреднийРасходПиковый", Новый ОписаниеТипов("Число"));
	
	Возврат СтруктураОснованияЗаполненияДокумента;
	
КонецФункции

// Обрабатывает исходную таблицу показаний и дополняет ее необходимыми для формирования документов данными.
//
Процедура ДозаполнитьТаблицуПоказаний(ОснованиеЗаполнения)
	
	Если ОпределитьНеобходимостьДозаполненияТаблицыПоказанийСчетчиков(ОснованиеЗаполнения) Тогда
		
		Если ОснованиеЗаполнения.ТаблицаПоказаний.Количество() = 0 Тогда
			
			ОснованиеЗаполнения.ТаблицаПоказаний.Колонки.Добавить("ВидОперации");
			ОснованиеЗаполнения.ТаблицаПоказаний.Колонки.Добавить("Здание");
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаПоказаний.Счетчик КАК Счетчик,
			|	ТаблицаПоказаний.Услуга,
			|	ТаблицаПоказаний.Объект,
			|	ТаблицаПоказаний.ДатаПоказания,
			|	ТаблицаПоказаний.ДневноеПоказание КАК ДневноеПоказание,
			|	ТаблицаПоказаний.НочноеПоказание КАК НочноеПоказание,
			|	ТаблицаПоказаний.ПиковоеПоказание КАК ПиковоеПоказание,
			|	ТаблицаПоказаний.ПоказанияКорректны,
			|	ТаблицаПоказаний.СреднийРасходДневной КАК СреднийРасходДневной,
			|	ТаблицаПоказаний.СреднийРасходНочной КАК СреднийРасходНочной,
			|	ТаблицаПоказаний.СреднийРасходПиковый КАК СреднийРасходПиковый
			|ПОМЕСТИТЬ втТаблицаПоказаний
			|ИЗ
			|	&ТаблицаПоказаний КАК ТаблицаПоказаний
			|ГДЕ
			|	НЕ ТаблицаПоказаний.Счетчик = ЗНАЧЕНИЕ(Справочник.КВП_Счетчики.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПоказаний.Счетчик КАК Счетчик,
			|	ВЫБОР
			|		КОГДА ТаблицаПоказаний.Услуга = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
			|			ТОГДА ТаблицаПоказаний.Счетчик.ВидУслуги
			|		ИНАЧЕ ТаблицаПоказаний.Услуга
			|	КОНЕЦ КАК Услуга,
			|	ТаблицаПоказаний.Объект,
			|	ВЫБОР
			|		КОГДА ТаблицаПоказаний.ДатаПоказания = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА &ДатаДокумента
			|		ИНАЧЕ ТаблицаПоказаний.ДатаПоказания
			|	КОНЕЦ КАК ДатаПоказания,
			|	ТаблицаПоказаний.ДневноеПоказание КАК ДневноеПоказание,
			|	ТаблицаПоказаний.НочноеПоказание КАК НочноеПоказание,
			|	ТаблицаПоказаний.ПиковоеПоказание КАК ПиковоеПоказание,
			|	ВЫБОР
			|		КОГДА ТаблицаПоказаний.ПоказанияКорректны = НЕОПРЕДЕЛЕНО
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ТаблицаПоказаний.ПоказанияКорректны
			|	КОНЕЦ КАК ПоказанияКорректны,
			|	ТаблицаПоказаний.СреднийРасходДневной КАК СреднийРасходДневной,
			|	ТаблицаПоказаний.СреднийРасходНочной КАК СреднийРасходНочной,
			|	ТаблицаПоказаний.СреднийРасходПиковый КАК СреднийРасходПиковый
			|ПОМЕСТИТЬ втТаблицаПоказанийВходящая
			|ИЗ
			|	втТаблицаПоказаний КАК ТаблицаПоказаний
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втТаблицаПоказанийВходящая.Счетчик КАК Счетчик,
			|	втТаблицаПоказанийВходящая.Услуга КАК Услуга,
			|	втТаблицаПоказанийВходящая.Объект КАК Объект,
			|	втТаблицаПоказанийВходящая.ДатаПоказания КАК ДатаПоказания,
			|	втТаблицаПоказанийВходящая.ДневноеПоказание КАК ДневноеПоказание,
			|	втТаблицаПоказанийВходящая.НочноеПоказание КАК НочноеПоказание,
			|	втТаблицаПоказанийВходящая.ПиковоеПоказание КАК ПиковоеПоказание,
			|	втТаблицаПоказанийВходящая.ПоказанияКорректны КАК ПоказанияКорректны,
			|	втТаблицаПоказанийВходящая.СреднийРасходДневной КАК СреднийРасходДневной,
			|	втТаблицаПоказанийВходящая.СреднийРасходНочной КАК СреднийРасходНочной,
			|	втТаблицаПоказанийВходящая.СреднийРасходПиковый КАК СреднийРасходПиковый
			|ПОМЕСТИТЬ втТаблицаПоказанийБезОбъектов
			|ИЗ
			|	втТаблицаПоказанийВходящая КАК втТаблицаПоказанийВходящая
			|ГДЕ
			|	втТаблицаПоказанийВходящая.Объект = НЕОПРЕДЕЛЕНО
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
			|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект
			|ПОМЕСТИТЬ втОбъектыСчетчиков
			|ИЗ
			|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
			|			&ДатаДокумента,
			|			Счетчик В
			|					(ВЫБРАТЬ
			|						втТаблицаПоказанийБезОбъектов.Счетчик КАК Счетчик
			|					ИЗ
			|						втТаблицаПоказанийБезОбъектов КАК втТаблицаПоказанийБезОбъектов)
			|				И ДатаИзменения <= &ДатаДокумента) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
			|ГДЕ
			|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втОбъектыСчетчиков.Счетчик КАК Счетчик,
			|	втОбъектыСчетчиков.Объект КАК Объект,
			|	втТаблицаПоказанийБезОбъектов.Услуга КАК Услуга,
			|	втТаблицаПоказанийБезОбъектов.ДатаПоказания КАК ДатаПоказания,
			|	втТаблицаПоказанийБезОбъектов.ДневноеПоказание КАК ДневноеПоказание,
			|	втТаблицаПоказанийБезОбъектов.НочноеПоказание КАК НочноеПоказание,
			|	втТаблицаПоказанийБезОбъектов.ПиковоеПоказание КАК ПиковоеПоказание,
			|	втТаблицаПоказанийБезОбъектов.ПоказанияКорректны КАК ПоказанияКорректны,
			|	втТаблицаПоказанийБезОбъектов.СреднийРасходДневной КАК СреднийРасходДневной,
			|	втТаблицаПоказанийБезОбъектов.СреднийРасходНочной КАК СреднийРасходНочной,
			|	втТаблицаПоказанийБезОбъектов.СреднийРасходПиковый КАК СреднийРасходПиковый
			|ПОМЕСТИТЬ втТаблицаПоказанийСДополненнымиОбъектами
			|ИЗ
			|	втОбъектыСчетчиков КАК втОбъектыСчетчиков
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаПоказанийБезОбъектов КАК втТаблицаПоказанийБезОбъектов
			|		ПО втОбъектыСчетчиков.Счетчик = втТаблицаПоказанийБезОбъектов.Счетчик
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втТаблицаПоказанийВходящая.Счетчик КАК Счетчик,
			|	втТаблицаПоказанийВходящая.Объект КАК Объект,
			|	втТаблицаПоказанийВходящая.Услуга КАК Услуга,
			|	втТаблицаПоказанийВходящая.ДатаПоказания КАК ДатаПоказания,
			|	втТаблицаПоказанийВходящая.ДневноеПоказание КАК ДневноеПоказание,
			|	втТаблицаПоказанийВходящая.НочноеПоказание КАК НочноеПоказание,
			|	втТаблицаПоказанийВходящая.ПиковоеПоказание КАК ПиковоеПоказание,
			|	втТаблицаПоказанийВходящая.ПоказанияКорректны КАК ПоказанияКорректны,
			|	втТаблицаПоказанийВходящая.СреднийРасходДневной КАК СреднийРасходДневной,
			|	втТаблицаПоказанийВходящая.СреднийРасходНочной КАК СреднийРасходНочной,
			|	втТаблицаПоказанийВходящая.СреднийРасходПиковый КАК СреднийРасходПиковый,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаПоказанийВходящая.Объект) = ТИП(Справочник.КВП_ЛицевыеСчета)
			|			ТОГДА втТаблицаПоказанийВходящая.Объект.Адрес.Владелец
			|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаПоказанийВходящая.Объект) = ТИП(Справочник.УПЖКХ_Помещения)
			|				ИЛИ ТИПЗНАЧЕНИЯ(втТаблицаПоказанийВходящая.Объект) = ТИП(Справочник.КВП_Подъезды)
			|			ТОГДА втТаблицаПоказанийВходящая.Объект.Владелец
			|		ИНАЧЕ втТаблицаПоказанийВходящая.Объект
			|	КОНЕЦ КАК Здание,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаПоказанийВходящая.Объект) = ТИП(Справочник.КВП_ЛицевыеСчета)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет)
			|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаПоказанийВходящая.Объект) = ТИП(Справочник.УПЖКХ_Помещения)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение)
			|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаПоказанийВходящая.Объект) = ТИП(Справочник.КВП_Подъезды)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаПодъезд)
			|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаПоказанийВходящая.Объект) = ТИП(Справочник.КВП_Здания)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаЗдание)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет)
			|	КОНЕЦ КАК ВидОперации
			|ИЗ
			|	втТаблицаПоказанийВходящая КАК втТаблицаПоказанийВходящая
			|ГДЕ
			|	НЕ втТаблицаПоказанийВходящая.Объект = НЕОПРЕДЕЛЕНО
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	втТаблицаПоказанийСДополненнымиОбъектами.Счетчик,
			|	втТаблицаПоказанийСДополненнымиОбъектами.Объект,
			|	втТаблицаПоказанийСДополненнымиОбъектами.Услуга,
			|	втТаблицаПоказанийСДополненнымиОбъектами.ДатаПоказания,
			|	втТаблицаПоказанийСДополненнымиОбъектами.ДневноеПоказание,
			|	втТаблицаПоказанийСДополненнымиОбъектами.НочноеПоказание,
			|	втТаблицаПоказанийСДополненнымиОбъектами.ПиковоеПоказание,
			|	втТаблицаПоказанийСДополненнымиОбъектами.ПоказанияКорректны,
			|	втТаблицаПоказанийСДополненнымиОбъектами.СреднийРасходДневной,
			|	втТаблицаПоказанийСДополненнымиОбъектами.СреднийРасходНочной,
			|	втТаблицаПоказанийСДополненнымиОбъектами.СреднийРасходПиковый,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаПоказанийСДополненнымиОбъектами.Объект) = ТИП(Справочник.КВП_ЛицевыеСчета)
			|			ТОГДА втТаблицаПоказанийСДополненнымиОбъектами.Объект.Адрес.Владелец
			|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаПоказанийСДополненнымиОбъектами.Объект) = ТИП(Справочник.УПЖКХ_Помещения)
			|				ИЛИ ТИПЗНАЧЕНИЯ(втТаблицаПоказанийСДополненнымиОбъектами.Объект) = ТИП(Справочник.КВП_Подъезды)
			|			ТОГДА втТаблицаПоказанийСДополненнымиОбъектами.Объект.Владелец
			|		ИНАЧЕ втТаблицаПоказанийСДополненнымиОбъектами.Объект
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаПоказанийСДополненнымиОбъектами.Объект) = ТИП(Справочник.КВП_ЛицевыеСчета)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет)
			|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаПоказанийСДополненнымиОбъектами.Объект) = ТИП(Справочник.УПЖКХ_Помещения)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение)
			|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаПоказанийСДополненнымиОбъектами.Объект) = ТИП(Справочник.КВП_Подъезды)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаПодъезд)
			|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаПоказанийСДополненнымиОбъектами.Объект) = ТИП(Справочник.КВП_Здания)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаЗдание)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет)
			|	КОНЕЦ
			|ИЗ
			|	втТаблицаПоказанийСДополненнымиОбъектами КАК втТаблицаПоказанийСДополненнымиОбъектами";
			
			Запрос.УстановитьПараметр("ТаблицаПоказаний", ОснованиеЗаполнения.ТаблицаПоказаний);
			Запрос.УстановитьПараметр("ДатаДокумента",    ОснованиеЗаполнения.Дата);
			
			ОснованиеЗаполнения.ТаблицаПоказаний = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет, нужно ли дозаполнять таблицу показаний счетчиков.
//
Функция ОпределитьНеобходимостьДозаполненияТаблицыПоказанийСчетчиков(ОснованиеЗаполнения)
	
	// Если документы сформированы массово, то дополнение таблицы показаний уже должно быть произведено ранее,
	// поэтому ничего не дополняем.
	// Определяем это по наличию добавляемых колонок.
	Возврат (ОснованиеЗаполнения.ТаблицаПоказаний.Колонки.Найти("ВидОперации") = Неопределено ИЛИ
			ОснованиеЗаполнения.ТаблицаПоказаний.Колонки.Найти("Здание") = Неопределено);
	
КонецФункции

#КонецОбласти

#Область МассовоеФормированиеДокументов

// Выполняет массовое формирование документов ввода показаний на основании структуры-основания.
// Структура-основание полностью аналогична используемой для заполнения одного документа.
// Описание принимаемой структуры-основания описано в комментарии к обработке заполнения 
// документа.
//
Процедура МассовоеФормированиеДокументов(ОснованиеЗаполненияВходящее) Экспорт
	
	ОснованиеЗаполненияОбщее = ПодготовитьСтруктуруОснованияЗаполненияДокумента(ОснованиеЗаполненияВходящее);
	
	ОснованиеЗаполненияОбщее.ВыполняетсяМассовоеФормированиеДокументов = Истина;
	
	СформироватьДокументыВводаПоказаний(ОснованиеЗаполненияОбщее);
	
КонецПроцедуры

// Управляет процессом формирования документов ввода показаний.
//
Процедура СформироватьДокументыВводаПоказаний(ОснованиеЗаполненияОбщее)
	
	// Определяем состав данных, в разрезе которых нужно формировать документы.
	СтруктураОтбора        = ПодготовитьСтруктуруОтбора(ОснованиеЗаполненияОбщее);
	ТаблицаДанныхДляОтбора = ПодготовитьТаблицуДанныхДляОтбора(ОснованиеЗаполненияОбщее);
	
	// Для каждого набора данных формируем отдельный документ.
	Для каждого ТекСтрокаДанныхДляОтбора из ТаблицаДанныхДляОтбора Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекСтрокаДанныхДляОтбора);
		
		СтруктураЗаполненияДокумента = ПодготовитьСтруктуруЗаполненияДокумента(ОснованиеЗаполненияОбщее, СтруктураОтбора);
		
		СформироватьДокументВводаПоказаний(СтруктураЗаполненияДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает структуру, предназначенную для отбора данных для формирования каждого документа.
//
Функция ПодготовитьСтруктуруОтбора(ОснованиеЗаполненияОбщее)
	
	СтруктураОтбора = Новый Структура("ВидОперации");
	
	Если ОснованиеЗаполненияОбщее.ФормироватьДокументыВРазрезеЗданий Тогда
		СтруктураОтбора.Вставить("Здание");
	КонецЕсли;
	
	Если ОснованиеЗаполненияОбщее.ФормироватьДокументыВРазрезеУслуг Тогда
		СтруктураОтбора.Вставить("Услуга");
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

// Подготавливает таблицу, содержащую данные, необходимые для отбора данных для формирования документов. При этом:
// 1. Каждая запись таблицы содержит данные для заполнения структуры отбора.
// 2. Выполняет индексирование колонок отбора для таблицы, содержащей данные для документов.
//
Функция ПодготовитьТаблицуДанныхДляОтбора(ОснованиеЗаполненияОбщее)
	
	КолонкиОтбора = "ВидОперации";
	
	Если ОснованиеЗаполненияОбщее.ФормироватьДокументыВРазрезеЗданий Тогда
		КолонкиОтбора = КолонкиОтбора + ",Здание";
	КонецЕсли;
	
	Если ОснованиеЗаполненияОбщее.ФормироватьДокументыВРазрезеУслуг Тогда
		КолонкиОтбора = КолонкиОтбора + ",Услуга";
	КонецЕсли;
	
	ТаблицаДанныхДляОтбора = ОснованиеЗаполненияОбщее.ТаблицаПоказаний.Скопировать(, КолонкиОтбора);
	ТаблицаДанныхДляОтбора.Свернуть(КолонкиОтбора);
	
	ОснованиеЗаполненияОбщее.ТаблицаПоказаний.Индексы.Добавить(КолонкиОтбора);
	
	Возврат ТаблицаДанныхДляОтбора;
	
КонецФункции

// Подготавливает структуру-основание для заполнения одного документа на основании указанного отбора.
//
Функция ПодготовитьСтруктуруЗаполненияДокумента(ОснованиеЗаполненияОбщее, СтруктураОтбора)
	
	// Подготавливаем структуру-основание для дальнейшей передачи в обработку заполнения.
	СтрокиДляФормированияДокумента = ОснованиеЗаполненияОбщее.ТаблицаПоказаний.НайтиСтроки(СтруктураОтбора);
	
	ОснованиеЗаполненияТекущегоДокумента = ПодготовитьСтруктуруОснованияЗаполненияДокументаПоУмолчанию();
	ЗаполнитьЗначенияСвойств(ОснованиеЗаполненияТекущегоДокумента, ОснованиеЗаполненияОбщее);
	
	ОснованиеЗаполненияТекущегоДокумента.ВидОперации = СтруктураОтбора.ВидОперации;
	
	Если ОснованиеЗаполненияОбщее.ФормироватьДокументыВРазрезеЗданий И СтруктураОтбора.Свойство("Здание") Тогда
		ОснованиеЗаполненияТекущегоДокумента.Объект = СтруктураОтбора.Здание;
	Иначе
		ОснованиеЗаполненияТекущегоДокумента.Объект = Неопределено;
	КонецЕсли;
	
	ОснованиеЗаполненияТекущегоДокумента.ТаблицаПоказаний = ОснованиеЗаполненияОбщее.ТаблицаПоказаний.Скопировать(СтрокиДляФормированияДокумента);
	
	Возврат ОснованиеЗаполненияТекущегоДокумента;
	
КонецФункции

// Выполняет создание, заполнение, запись и проведение документа.
//
Процедура СформироватьДокументВводаПоказаний(СтруктураЗаполненияДокумента)
	
	Попытка
		
		ДокументВводаПоказаний = Документы.УПЖКХ_ВводПоказанийСчетчика.СоздатьДокумент();
		
		ДокументВводаПоказаний.Заполнить(СтруктураЗаполненияДокумента);
		
		Если ДокументВводаПоказаний.Главная.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если СтруктураЗаполненияДокумента.ПроводитьСформированныеДокументы Тогда
			РежимЗаписиСформированногоДокумента = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписиСформированногоДокумента = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		
		Если НЕ КВП_ЗаписатьОбъект(ДокументВводаПоказаний, РежимЗаписиСформированногоДокумента) И РежимЗаписиСформированногоДокумента = РежимЗаписиДокумента.Проведение Тогда
			КВП_ЗаписатьОбъект(ДокументВводаПоказаний, РежимЗаписиДокумента.Запись);
		КонецЕсли;
			
	Исключение
		
		СведенияОбОшибке = СведенияОбОшибке + "Не удалось сформировать документ ввода показаний:" + Строка(ДокументВводаПоказаний) + "." + Символы.ПС;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
