
#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

#КонецОбласти 

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
// Возвращает список документов по лицевому счету.
Функция ПолучитьСписокДокументов(ЛицевойСчет)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка,
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Счетчик,
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика.Главная КАК УПЖКХ_ВводПоказанийСчетчикаГлавная
	|ГДЕ
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Объект = &ЛицевойСчет
	|	И НЕ УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	СписокДокументов = ТаблицаРезультат.ВыгрузитьКолонку("Ссылка");
	СписокСчетчиков  = ТаблицаРезультат.ВыгрузитьКолонку("Счетчик");
	
	Возврат Новый Структура("СписокДокументов, СписокСчетчиков", СписокДокументов, СписокСчетчиков);
	
КонецФункции

&НаСервере
// Возвращает список документов по лицевому счету.
Функция ПолучитьПоследнийДокументПоказаний(СписокДокументов, Счетчик)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("Счетчик",          Счетчик);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка,
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика.Главная КАК УПЖКХ_ВводПоказанийСчетчикаГлавная
	|ГДЕ
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка В(&СписокДокументов)
	|	И УПЖКХ_ВводПоказанийСчетчикаГлавная.Счетчик = &Счетчик
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает список документов по лицевому счету.
Функция НайтиСтрокуПоказанийВДеревеДокумента(Знач ДеревоПоказаний, Знач Счетчик)
	
	ДеревоЗначений = ДанныеФормыВЗначение(ДеревоПоказаний, Тип("ДеревоЗначений"));
	СтрокаДерева = ДеревоЗначений.Строки.Найти(Счетчик, "Счетчик");
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДеревоЗначений.Строки.Индекс(СтрокаДерева);
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
// Команда поиска лицйевого счета
Процедура НайтиЛицевойСчет(Команда)
	
	ОписаниеОповещенияВыбораЛС = Новый ОписаниеОповещения("УстановитьВыбранноеЗначениеЛицевогоСчета", ЭтаФорма);
	
	// Выбираем лицевой счет из справочника "Лицевые счета".
	ОткрытьФорму("Справочник.КВП_ЛицевыеСчета.Форма.ФормаВыбора", , , , , , ОписаниеОповещенияВыбораЛС, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДействияФормыНайтиЛицевойСчет()

&НаКлиенте
// Обработка установки выбранного значения лицевого счета.
//
Процедура УстановитьВыбранноеЗначениеЛицевогоСчета(ВыбранныйЛицевойСчет, Параметры) Экспорт
	
	Если Не ВыбранныйЛицевойСчет = Неопределено Тогда
		
		СтруктураРезультата = ПолучитьСписокДокументов(ВыбранныйЛицевойСчет);
		СписокДокументов = СтруктураРезультата.СписокДокументов;
		СписокСчетчиков  = СтруктураРезультата.СписокСчетчиков;
		
		Если СписокДокументов.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документы ввода показаний не найдены.");
			Возврат;
		КонецЕсли;
		
		СписокДокументовОтбора = Новый СписокЗначений;
		СписокДокументовОтбора.ЗагрузитьЗначения(СписокДокументов);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокДокументовОтбора, ВидСравненияКомпоновкиДанных.ВСписке, , , РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
		СписокСчетчиковОтбора  = Новый СписокЗначений;
		СписокСчетчиковОтбора.ЗагрузитьЗначения(СписокСчетчиков);
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СписокДокументов", СписокДокументов);
		ОписаниеОповещенияВыбораСчетчика = Новый ОписаниеОповещения("УстановитьВыбранноеЗначениеСчетчика", ЭтаФорма, ДопПараметры);
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Отбор", Новый Структура("Ссылка", СписокСчетчиковОтбора));
		
		// Выбираем один из счетчиков, установленных на выбранный лицевой счет.
		ОткрытьФорму("Справочник.КВП_Счетчики.Форма.ФормаВыбора", ПараметрыОткрытияФормы, , , , , ОписаниеОповещенияВыбораСчетчика, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры // УстновитьВыбранноеЗначение()

&НаКлиенте
// Обработка установки выбранного значения счетчика.
//
Процедура УстановитьВыбранноеЗначениеСчетчика(ВыбранныйСчетчик, Параметры) Экспорт
	
	Если Не ВыбранныйСчетчик = Неопределено Тогда
		
		СсылкаДокумента = ПолучитьПоследнийДокументПоказаний(Параметры.СписокДокументов, ВыбранныйСчетчик);
		
		Если НЕ СсылкаДокумента = Неопределено Тогда
			
			СтруктураСсылки = Новый Структура("Ключ", СсылкаДокумента);
			ФормаДокумента  = ПолучитьФорму("Документ.УПЖКХ_ВводПоказанийСчетчика.Форма.ФормаДокумента", СтруктураСсылки);
			
			// Открываем форму и позиционируем курсор на записи с найденным счетчиком.
			ФормаДокумента.Открыть();
			
			ИндексСтроки = НайтиСтрокуПоказанийВДеревеДокумента(ФормаДокумента.ДеревоПоказаний, ВыбранныйСчетчик);
			
			Если Не ИндексСтроки = Неопределено Тогда
				
				ФормаДокумента.Элементы.ДеревоПоказаний.ТекущаяСтрока = ИндексСтроки;
				
			КонецЕсли;
			
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документы ввода показаний счетчика не найден.");
			УПЖКХ_ТиповыеМетодыКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Ссылка");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстновитьВыбранноеЗначение()

&НаКлиенте
// Обработчик события "Нажатие" кнопки "ОтменитьПоиск" командной панели "Действия формы".
Процедура ОтменитьПоиск(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка");
	
КонецПроцедуры

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 
