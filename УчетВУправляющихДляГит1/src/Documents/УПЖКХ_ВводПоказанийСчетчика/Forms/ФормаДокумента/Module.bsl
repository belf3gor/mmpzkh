
#Область УправлениеВнешнимВидомФормы

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов формы.
//
// Параметры
//  нет
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	Элементы.ДеревоПоказанийУслуга.Видимость = Не ЗначениеЗаполнено(Объект.Услуга);
	Элементы.ДеревоПоказанийПомещение.Видимость = 
		(Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет"));
	
	ОтображатьПриведенныйРасход = ПроверитьКоэффициентыПриборовУчета(Форма);
	Элементы.ДеревоПоказанийДневноеПоказаниеРасходПриведенный.Видимость = ОтображатьПриведенныйРасход;
	Элементы.ДеревоПоказанийНочноеПоказаниеРасходПриведенный.Видимость  = ОтображатьПриведенныйРасход;
	Элементы.ДеревоПоказанийПиковоеПоказаниеРасходПриведенный.Видимость = ОтображатьПриведенныйРасход;
	
	МассивТипов = Новый Массив();
	
	// Массив для установки ограничения типа поля "Объект" в зависимости от вида операции документа.
	МассивТиповДляОтбора = Новый Массив();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаЗдание") Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.КВП_Здания"));
		
		// Для вида операции "Ввод показаний счетчика на здание" тип поля "Объект"
		// ограничим только справочником "Здания, сооружения".
		МассивТиповДляОтбора.Добавить(Тип("СправочникСсылка.КВП_Здания"));
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаПодъезд") Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.КВП_Подъезды"));
		
		// Для вида операции "Ввод показаний счетчика на подъезд" тип поля "Объект"
		// ограничим справочниками "Здания, сооружения" и "Подъезды".
		МассивТиповДляОтбора.Добавить(Тип("СправочникСсылка.КВП_Здания"));
		МассивТиповДляОтбора.Добавить(Тип("СправочникСсылка.КВП_Подъезды"));
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение") Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.УПЖКХ_Помещения"));
		
		// Для вида операции "Ввод показаний счетчика на помещение" тип поля "Объект"
		// ограничим справочниками "Здания, сооружения", "Подъезды" и "Помещения".
		МассивТиповДляОтбора.Добавить(Тип("СправочникСсылка.КВП_Здания"));
		МассивТиповДляОтбора.Добавить(Тип("СправочникСсылка.КВП_Подъезды"));
		МассивТиповДляОтбора.Добавить(Тип("СправочникСсылка.УПЖКХ_Помещения"));
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет") Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.КВП_ЛицевыеСчета"));
		
		// Для вида операции "Ввод показаний счетчика на лицевой счет"
		// оставим все типы - не будем устанавливать ограничения.
		
	КонецЕсли;
	
	Элементы.ДеревоПоказанийОбъект.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	// Установка ограничение типа поля "Объект":
	Элементы.Объект.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповДляОтбора);
	
	Если Объект.ВводНачальныхПоказаний Тогда
		
		Элементы.ДеревоПоказанийГруппаДневноеПоказание.Видимость   = Ложь;
		Элементы.ДеревоПоказанийГруппаНочноеПоказание.Видимость    = Ложь;
		Элементы.ДеревоПоказанийГруппаПиковоеПоказание.Видимость   = Ложь;
		Элементы.ДеревоПоказанийДатаПредыдущегоПоказания.Видимость = Ложь;
		
		Элементы.ДеревоПоказанийДневноеПоказаниеВводНачальных.Видимость = Истина;
		Элементы.ДеревоПоказанийНочноеПоказаниеВводНачальных.Видимость  = Истина;
		Элементы.ДеревоПоказанийПиковоеПоказаниеВводНачальных.Видимость = Истина;
		
	Иначе
		
		Элементы.ДеревоПоказанийДневноеПоказаниеВводНачальных.Видимость = Ложь;
		Элементы.ДеревоПоказанийНочноеПоказаниеВводНачальных.Видимость  = Ложь;
		Элементы.ДеревоПоказанийПиковоеПоказаниеВводНачальных.Видимость = Ложь;
		
		Элементы.ДеревоПоказанийГруппаДневноеПоказание.Видимость   = Истина;
		Элементы.ДеревоПоказанийГруппаНочноеПоказание.Видимость    = Истина;
		Элементы.ДеревоПоказанийГруппаПиковоеПоказание.Видимость   = Истина;
		Элементы.ДеревоПоказанийДатаПредыдущегоПоказания.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормой()

&НаКлиенте
// Процедура устанавливает в качестве текущей строки дерева первую строку
// с ошибкой. Используется в случае, если в дереве отобраны только строки с ошибками.
//
Процедура СпозиционироватьКурсорНаПервуюСтрокуСОшибкойПоказаний()
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.СпозиционироватьКурсорНаПервуюСтрокуСОшибкойПоказаний(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
	УстановитьСостояниеДокументаКорректировкаНачислений(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Получение параметра использования контроля введенных показаний ПУ.
	ИспользуетсяКонтрольПоказанийПриборовУчета = УПЖКХ_ПараметрыУчетаСервер.ИспользоватьКонтрольПоказанийПриборовУчета();
	
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	КонецЕсли;
	
	ПредыдущийВидОперации = Объект.ВидОперации;
	
	// Обновление значений показаний при копировании документа.
	Если Параметры.Свойство("ЗначениеКопирования") И Не Параметры.ЗначениеКопирования.Пустая() Тогда
		
		// Если документ копируется, то показания уже не начальные.
		Объект.ВводНачальныхПоказаний = Ложь;
		
		// Обновим дату ввода показаний и текущие показания.
		Для Каждого ТекСтрокаПоказания Из Объект.Главная Цикл
			ТекСтрокаПоказания.ДатаПоказания = Объект.Дата;
			ТекСтрокаПоказания.ДневноеПоказание = Неопределено;
			ТекСтрокаПоказания.НочноеПоказание  = Неопределено;
			ТекСтрокаПоказания.ПиковоеПоказание = Неопределено;
		КонецЦикла;
		
		ОбновитьТабличнуюЧастьНаСервере();
		
	КонецЕсли;
	
	ЗаполнитьДеревоПоказаний();
	
	ДокументКорректировкаНачислений = УПЖКХ_ВводПоказанийПриборовУчетаСервер.НайтиПодчиненныйДокументКорректировкаНачислений(Объект.Ссылка);
	
	// Заполнение представления ссылки на корректировку начислений, если она сформирована.
	ЗаполнитьПредставлениеСсылкиНаКорректировкуНачислений(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	// Установка условного оформления формы, вместо настройки оформления через свойства формы.
	// Это реализовано для обслуживания условного оформления.
	УПЖКХ_ВводПоказанийПриборовУчетаСервер.УстановитьУсловноеОформление(ЭтаФорма);
	
	// Установить доступность формы с учетом ключа СЛК.
	//СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ПроверитьПоказания(ЭтаФорма);
	
	// Управление элементами контроля показаний.
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма, Истина);
	
	// Вывод итогов в подвал.
	ВывестиИтогиВПодвале();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не Объект.ВводНачальныхПоказаний Тогда
		
		УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ПроверитьПоказания(ЭтаФорма);
		
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		   И КоличествоСтрокПереходаЧерезНоль > 0
		   И Не ЗаписатьДокументПриПереходеЧерезНоль Тогда
			Отказ = Истина;
			ТекстВопроса = "В таблице начислений есть переходы показаний через ноль!
						   |Провести документ?";
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаПередЗаписью", ЭтаФорма),
						   ТекстВопроса, 
						   РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	
	КонецЕсли;
	
	ЗаполнитьТЧПоДереву();
	
КонецПроцедуры // ПередЗаписью()

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	УстановитьСостояниеДокументаКорректировкаНачислений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПослеЗаписи" формы.
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Оповещение формы документа "Установка счетчика".
	Оповестить("Запись_ВводПоказанийСчетчика", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеДокументаКорректировки" Тогда
		
		Прочитать();
		УстановитьСостояниеДокументаКорректировкаНачислений(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ПередЗаписью()".
Процедура ОбработатьРезультатВопросаПередЗаписью(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьДокументПриПереходеЧерезНоль = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаПередЗаписью()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
	СброситьКэшСчетчиков();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "ВидОперации".
Процедура ВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПредыдущийВидОперации = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим отбор по полю "Объект" при смене вида операции:
	Объект.Объект = Неопределено;
	
	Объект.ВидОперации = ВыбранноеЗначение;
	ПредыдущийВидОперации = Объект.ВидОперации;
	ОчиститьТЧ();
	ВывестиИтогиВПодвале();
	УправлениеФормой(ЭтаФорма);
	
	// Так как очистили табличную часть, можно очистить вспомогательные реквизиты контроля вводимых показаний.
	КоличествоСтрокСОшибками              = 0;
	КоличествоСтрокПереходаЧерезНоль      = 0;
	КоличествоСтрокСОтрицательнымРасходом = 0;
	
	// Управление элементами контроля показаний.
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма, Истина);
	
	ЭтаФорма.Модифицированность = Истина;
	
	СброситьКэшСчетчиков();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" флажка "Ввод начальных показаний".
Процедура ВводНачальныхПоказанийПриИзменении(Элемент)
	
	Если Объект.ВводНачальныхПоказаний Тогда
		
		СписокСчетчиков = ПолучитьСчетчикиИзДереваСОтборомПоСпособуРегистрацииПоказаний();
		
		Если СписокСчетчиков.Количество() > 0 Тогда
			ТекстВопроса = "Из таблицы будут удалены счетчики со способом регистрации показаний ""Расход за период расчета"". Продолжить?";
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаПриИзмененииФлагаВводНачальныхПоказаний", ЭтаФорма, СписокСчетчиков);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	// Управление элементами контроля показаний.
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Услуга".
Процедура УслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФормуВыбораУслуг(Элемент);
	ФормаВыбора.ВладелецФормы = ЭтаФорма;
	
	ДопПараметры = Новый Структура("Элемент", Элемент);
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборУслуги", ЭтаФорма, ДопПараметры);
	ФормаВыбора.Открыть();
	
КонецПроцедуры // УслугаНачалоВыбора()

&НаКлиенте
// Обработчик результата выбора услуги.
Процедура ОбработатьВыборУслуги(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Объект.Услуга = ВыбранноеЗначение;
		УслугаПриИзменении(ДопПараметры.Элемент);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборУслуги()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Услуга".
Процедура УслугаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ПроверитьПоказания(ЭтаФорма);
	
	СброситьКэшСчетчиков();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Объект".
Процедура ОбъектПриИзменении(Элемент)
	
	СброситьКэшСчетчиков();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДереваЗначений

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" дерева значений "ДеревоПоказаний".
Процедура ДеревоПоказанийПриАктивизацииСтроки(Элемент)
	
	// Реквизит формы "НомерТекущейСтроки" используется в условном оформлении дерева значений "ДеревоПоказаний".
	Если НЕ Элемент.ТекущаяСтрока = Неопределено Тогда
		НомерТекущейСтроки = Элемент.ТекущаяСтрока;
		ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиДеревоПоказаний", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры // ДеревоПоказанийПриАктивизацииСтроки()

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "ДеревоПоказаний".
Процедура ДеревоПоказанийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	ДобавитьСтроку = Ложь;
	Если ТекСтрока = Неопределено Тогда
		ДобавитьСтроку = Истина;
	Иначе
		Если ТекСтрока.ПолучитьРодителя() = Неопределено Тогда
			// Т.к. интерактивно добавлять в дерево одинаковые счетчики запрещено,
			// поэтому копирование строк тоже запрещаем.
			Если Копирование Тогда
				Отказ = Истина;
			Иначе
				ДобавитьСтроку = Истина;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавитьСтроку Тогда
		Отказ = Истина;
		
		Форма = ПолучитьФормуВыбораСчетчикаИзСправочника();
		Форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораСчетчикаВДеревеПоказанийПередДобавлением", ЭтаФорма);
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ДеревоПоказанийПередНачаломДобавления()

&НаКлиенте
// Обработчик результата выбора счетчика, вызванного в процедуре "ДеревоПоказанийПередНачаломДобавления()".
Процедура ОбработатьРезультатВыбораСчетчикаВДеревеПоказанийПередДобавлением(ВыбранноеЗначение, ДополнительныеПарметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = ДобавитьСтрокуСчетчика(ВыбранноеЗначение);
	Если НомерСтроки >= 0 Тогда
		
		Элементы.ДеревоПоказаний.ТекущаяСтрока = НомерСтроки;
		ЭтаФорма.Модифицированность = Истина;
		
		НеобходимоПереместитьКурсор = Ложь;
		
		УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ПроверитьПоказания(ЭтаФорма, НеобходимоПереместитьКурсор, Истина);
		
		Если НеобходимоПереместитьКурсор Тогда
			ПодключитьОбработчикОжидания("СпозиционироватьКурсорНаПервуюСтрокуСОшибкойПоказаний", 0.1, Истина);
		КонецЕсли;
		
		ВывестиИтогиВПодвале();
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораСчетчикаВДеревеПоказанийПередДобавлением()

&НаКлиенте
// Обработчик события "ПередУдалением" дерева значений "ДеревоПоказаний"
Процедура ДеревоПоказанийПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		// Если в текущей строке были ошибки, то после ее удаления
		// количество строк с ошибками уменьшится на одну.
		Если Не ПустаяСтрока(ТекСтрока.ТипОшибкиДневной)
		 Или Не ПустаяСтрока(ТекСтрока.ТипОшибкиНочной)
		 Или Не ПустаяСтрока(ТекСтрока.ТипОшибкиПиковый) Тогда
			КоличествоСтрокСОшибками = КоличествоСтрокСОшибками - 1;
		КонецЕсли;
		
		Если (ТекСтрока.ПереходЧерезНольДневное Или ТекСтрока.ПереходЧерезНольНочное Или ТекСтрока.ПереходЧерезНольПиковое) Тогда
			КоличествоСтрокПереходаЧерезНоль = КоличествоСтрокПереходаЧерезНоль - 1;
		КонецЕсли;
		
		Если ТекСтрока.ТипОшибкиДневной = "Отрицательный расход" ИЛИ ТекСтрока.ТипОшибкиНочной = "Отрицательный расход"
			ИЛИ ТекСтрока.ТипОшибкиПиковый = "Отрицательный расход" Тогда
			КоличествоСтрокСОтрицательнымРасходом = КоличествоСтрокСОтрицательнымРасходом - 1;
		КонецЕсли;
		
	КонецЕсли;
	
	// После удаления нужно будет спозиционироваться на следующей строке с ошибкой или первой, если следующей нет.
	Если ОтображатьТолькоСтрокиСОшибками Тогда
		АдресХранилищаИдентификатораИсходнойСтрокиДляОтбораСтрокСОшибками = ПоместитьВоВременноеХранилище(ТекСтрока.ПолучитьИдентификатор(), Новый УникальныйИдентификатор);
	КонецЕсли;
	
	// Управление элементами контроля показаний.
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма, Истина);
	
	// Вывод итогов в подвал.
	ВывестиИтогиВПодвале();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" дерева значений "ДеревоПоказаний"
Процедура ДеревоПоказанийПослеУдаления(Элемент)
	
	ПересчитатьНомераСтрок();
	
	СпозиционироватьКурсорНаПервуюСтрокуСОшибкойПоказаний();
	
	ВывестиИтогиВПодвале();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" дерева значений "ДеревоПоказаний"
Процедура ДеревоПоказанийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.Номер = ДеревоПоказаний.ПолучитьЭлементы().Количество();
	КонецЕсли;
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ПоместитьДанныеОТекущейСтрокеВХранилище(ТекущиеДанные, АдресХранилищаДанныхСтроки);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" дерева значений "ДеревоПоказаний".
Процедура ДеревоПоказанийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ИзмениласьСтрокаДерева(ТекущиеДанные.Счетчик, АдресХранилищаДанныхСтроки) Тогда //изменили счетчик
		ТекущиеДанные.ДневноеПоказание = Неопределено;
		ТекущиеДанные.НочноеПоказание  = Неопределено;
		ТекущиеДанные.ПиковоеПоказание = Неопределено;
	КонецЕсли;
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ОбработатьОкончаниеРедактированияДерева(ТекущиеДанные, НоваяСтрока, АдресХранилищаДанныхСтроки, ДеревоПоказаний, Истина);
	
	НеобходимоПереместитьКурсор = Ложь;
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ПроверитьПоказания(ЭтаФорма, НеобходимоПереместитьКурсор, Истина);
	
	Если НеобходимоПереместитьКурсор Тогда
		ПодключитьОбработчикОжидания("СпозиционироватьКурсорНаПервуюСтрокуСОшибкойПоказаний", 0.1, Истина);
	КонецЕсли;
	
	// Управление элементами контроля показаний.
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма, Истина, Истина);
	
	// Вывод итогов в подвал.
	ВывестиИтогиВПодвале();
	
	ПересчитатьНомераСтрок();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" дерева значений "ДеревоПоказаний"
Процедура ДеревоПоказанийВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоПоказанийКоэффициент" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекСтрока = Элемент.ТекущиеДанные;
		
		// Редактирование долей разрешаем только для веток дерева, не являющихся корневыми, и для корневых веток без подветок.
		Если НЕ (ТекСтрока.ПолучитьРодителя() = Неопределено И ТекСтрока.ПолучитьЭлементы().Количество() > 0) Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Заголовок",       "Доля расхода прибора учета");
			СтруктураПараметров.Вставить("Объект",          ТекСтрока.Объект);
			СтруктураПараметров.Вставить("ДоляЧислитель",   ТекСтрока.КоэффициентЧислитель);
			СтруктураПараметров.Вставить("ДоляЗнаменатель", ТекСтрока.КоэффициентЗнаменатель);
			
			ОткрытьФорму("ОбщаяФорма.УПЖКХ_УстановкаДоли", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ДеревоПоказанийВыборЗавершение", ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура завершения обработки события "Выбор" дерева "ДеревоПоказаний".
//
Процедура ДеревоПоказанийВыборЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		ТекСтрока.КоэффициентЧислитель   = ВыбранноеЗначение.ДоляЧислитель;
		ТекСтрока.КоэффициентЗнаменатель = ВыбранноеЗначение.ДоляЗнаменатель;
		ТекСтрока.КоэффициентСтр         = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(ТекСтрока.КоэффициентЧислитель, ТекСтрока.КоэффициентЗнаменатель);
	КонецЕсли;
	
КонецПроцедуры // ДеревоПоказанийВыборЗавершение()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" счетчика дерева показаний.
Процедура ДеревоПоказанийСчетчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Форма = ПолучитьФормуВыбораСчетчикаИзСправочника();
	Форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораСчетчикаВДеревеПоказаний", ЭтаФорма);
	Форма.Открыть();
	
КонецПроцедуры // ДеревоПоказанийСчетчикНачалоВыбора()

&НаКлиенте
// Обработчик результата выбора счетчика, вызванного в процедуре "ДеревоПоказанийСчетчикНачалоВыбора()".
Процедура ОбработатьРезультатВыбораСчетчикаВДеревеПоказаний(ВыбранноеЗначение, ДополнительныеПарметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ДеревоПоказаний.ТекущиеДанные;
	Если ТекДанные.Счетчик = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПроверитьНаличиеСчетчикаВТаблице(ВыбранноеЗначение, ДеревоПоказаний);
	Если Индекс >= 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Счетчик """ + ВыбранноеЗначение + """ уже есть в таблице.");
		Возврат;
	КонецЕсли;
	
	// При смене счетчика в строке дерева вызываем функцию "ДобавитьСтрокуСчетчика()", которая очистит в текущей строке
	// необходимые колонки, а также при необходимости добавит дочерние строки в строку дерева в случае,
	// если прибор учета установлен на несколько объектов учета.
	НомерСтроки = ДобавитьСтрокуСчетчика(ВыбранноеЗначение, ТекДанные.Номер);
	Если НомерСтроки >= 0 Тогда
		Элементы.ДеревоПоказаний.ТекущаяСтрока = НомерСтроки;
		ЭтаФорма.Модифицированность = Истина;
		
		ВывестиИтогиВПодвале();
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораСчетчикаВДеревеПоказаний()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "Услуга" дерева показаний.
Процедура ДеревоПоказанийУслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ДеревоПоказанийУслугаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Очистка" поля "Услуга" дерева показаний.
Процедура ДеревоПоказанийУслугаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ДеревоПоказанийУслугаОчистка()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "Объект" дерева показаний.
Процедура ДеревоПоказанийОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ДеревоПоказанийОбъектНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Очистка" поля "Объект" дерева показаний.
Процедура ДеревоПоказанийОбъектОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ДеревоПоказанийОбъектОчистка()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "Помещение" дерева показаний.
Процедура ДеревоПоказанийПомещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ДеревоПоказанийПомещениеНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Очистка" поля "Помещение" дерева показаний.
Процедура ДеревоПоказанийПомещениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ДеревоПоказанийПомещениеОчистка()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ДневноеПоказание" дерева показаний.
Процедура ДеревоПоказанийДневноеПоказаниеПриИзменении(Элемент)
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ОбработатьИзменениеДневногоПоказания(АдресХранилищаДанныхСтроки, Элементы.ДеревоПоказаний.ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" полей показаний дерева показаний.
Процедура ДеревоПоказанийДневноеПоказаниеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ОбработатьОчисткуДневногоПоказания(Элементы.ДеревоПоказаний.ТекущиеДанные, Истина);
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "НочноеПоказание" дерева показаний.
Процедура ДеревоПоказанийНочноеПоказаниеПриИзменении(Элемент)
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ОбработатьИзменениеНочногоПоказания(АдресХранилищаДанныхСтроки, Элементы.ДеревоПоказаний.ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" полей показаний дерева показаний.
Процедура ДеревоПоказанийНочноеПоказаниеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ОбработатьОчисткуНочногоПоказания(Элементы.ДеревоПоказаний.ТекущиеДанные, Истина);
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ПиковоеПоказание" дерева показаний.
Процедура ДеревоПоказанийПиковоеПоказаниеПриИзменении(Элемент)
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ОбработатьИзменениеПиковогоПоказания(АдресХранилищаДанныхСтроки, Элементы.ДеревоПоказаний.ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" полей показаний дерева показаний.
Процедура ДеревоПоказанийПиковоеПоказаниеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ОбработатьОчисткуПиковогоПоказания(Элементы.ДеревоПоказаний.ТекущиеДанные, Истина);
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДатаПоказания" дерева показаний.
Процедура ДеревоПоказанийДатаПоказанияПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.ДеревоПоказаний.ТекущиеДанные;
	ИдентификаторСтроки = ДанныеТекущейСтроки.ПолучитьИдентификатор();
	СтрокаДерева        = ДеревоПоказаний.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если НЕ СтрокаДерева = Неопределено Тогда
		
		// 1. Заполняем новую строку таблицы и временную структуру показаний значениями по умолчанию.
		СтруктураПоказаний = Новый Структура("Счетчик, Объект, Услуга, ДатаПоказания, ДатаПредыдущегоПоказания,
											 |ПредыдущееПоказаниеНачальное, ДневноеПоказаниеПредыдущее, НочноеПоказаниеПредыдущее,
											 |ПиковоеПоказаниеПредыдущее, СреднийРасходДневной, СреднийРасходНочной,
											 |СреднийРасходПиковый, КоэффициентЧислитель, КоэффициентЗнаменатель,
											 |КоэффициентТрансформации, ТемпературныйКоэффициент");
		
		ЗаполнитьЗначенияСвойств(СтруктураПоказаний, СтрокаДерева);
		
		// 2. Заполняем временную структуру сведениями о предыдущих показаниях счетчиков.
		СтруктураПоказаний = ПолучитьСтруктуруПредыдущихПоказанийСчетчика(СтруктураПоказаний);
		
		// 3. Заполняем исходную строку дерева полученными сведениями.
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтруктураПоказаний);
		
		// 4. Заполняем строки "Главной" счетчика полученными сведениями.
		СтрокиСчетчикаВГлавной = Объект.Главная.НайтиСтроки(Новый Структура("Счетчик", СтрокаДерева.Счетчик));
		
		Для каждого ТекСтрока из СтрокиСчетчикаВГлавной Цикл
			ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураПоказаний);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	ЗаполнитьТЧПоДереву();
	
	ВыполнятьОчисткуТабличнойЧасти = Истина;
	
	Если Не Объект.Главная.Количество() = 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВыбораВариантаЗаполнения", ЭтаФорма);
		ОткрытьФорму("ОбщаяФорма.УПЖКХ_ВыборВариантаДобавленияДиалог",,,,,,ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьПродолжение();
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Процедура-обработчик результата выбора в общей форме "УПЖКХ_ВыборВариантаДобавленияДиалог".
//
Процедура ОбработатьРезультатВыбораВариантаЗаполнения(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыЗаполненияТабличнойЧасти.Дозаполнение") Тогда
		ВыполнятьОчисткуТабличнойЧасти = Ложь;
		ОчиститьТЧ();
	ИначеЕсли РезультатВыбора = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыЗаполненияТабличнойЧасти.ЗаполнениеСОчисткой") Тогда
		ОчиститьТЧ();
	Иначе
		Возврат;
	КонецЕсли;
	
	ВывестиИтогиВПодвале();
	КомандаЗаполнитьПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВыбораВариантаЗаполнения()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнить()".
Процедура КомандаЗаполнитьПродолжение()
	
	// Определяет признак сортировки записей в ТЧ формы. Вызов функции необходимо выполнять до
	// заполнения ТЧ, т.к. устанавливать вид заполнения нужно непосредственно после выбора пользователем
	// варианта заполнения таблицы: очистить и заполнить, либо дополнить имеющиеся записи.
	
	СортироватьПоИсходномуНомеруСтроки = ОпределитьНеобходимостьСортировкиТабличнойЧастиПоИсходномуНомеруСтроки();
	
	ЗаполнитьТабличнуюЧастьНаСервере(Неопределено, Истина);
	
	ЗаполнитьДеревоПоказаний(СортироватьПоИсходномуНомеруСтроки);
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ПроверитьПоказания(ЭтаФорма);
	
	// Управление элементами контроля показаний.
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма, Истина);
	
	// Вывод итогов в подвал.
	ВывестиИтогиВПодвале();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // КомандаЗаполнитьПродолжение()

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьИспользоватьОтбор".
Процедура КомандаЗаполнитьИспользоватьОтбор(Команда)
	
	Если Не Объект.Главная.Количество() = 0 Тогда
		
		ТекстВопроса       = "Перед заполнением табличная часть будет очищена. Продолжить?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаКомандаЗаполнитьИспользоватьОтбор", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	КомандаЗаполнитьИспользоватьОтборПродолжение();
	
КонецПроцедуры // КомандаЗаполнитьИспользоватьОтбор()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "КомандаЗаполнитьИспользоватьОтбор()".
Процедура ОбработатьРезультатВопросаКомандаЗаполнитьИспользоватьОтбор(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьТЧ();
	ВывестиИтогиВПодвале();
	КомандаЗаполнитьИспользоватьОтборПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаКомандаЗаполнитьИспользоватьОтбор()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнитьИспользоватьОтбор()".
Процедура КомандаЗаполнитьИспользоватьОтборПродолжение()
	
	СтруктураПараметров = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаЗдание") Тогда
		СтруктураПараметров.Вставить("ТипОбъекта"           , "Здания");
		СтруктураПараметров.Вставить("ТипЗначОбъекта"       , "Здания");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаПодъезд") Тогда
		СтруктураПараметров.Вставить("ТипОбъекта"           , "Подъезды");
		СтруктураПараметров.Вставить("ТипЗначОбъекта"       , "Подъезды");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет") Тогда
		СтруктураПараметров.Вставить("ТипОбъекта"           , "ЛицевыеСчета");
		СтруктураПараметров.Вставить("ТипЗначОбъекта"       , "ЛицевыеСчета");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение") Тогда
		СтруктураПараметров.Вставить("ТипОбъекта"           , "Квартиры");
		СтруктураПараметров.Вставить("ТипЗначОбъекта"       , "Квартиры");
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЗданияКвартиры",   Объект.Объект);
	СтруктураПараметров.Вставить("НачПериодЛС",      НачалоМесяца(Объект.Дата));
	СтруктураПараметров.Вставить("КонПериодЛС",      Объект.Дата);
	СтруктураПараметров.Вставить("ОбъектЛС",         Объект.Объект);
	
	ОписаниеЗавершенияВыбора = Новый ОписаниеОповещения("ЗаполнитьСписокОбъектовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеЗавершенияВыбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // КомандаЗаполнитьИспользоватьОтборПродолжение()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнитьИспользоватьОтборПродолжение()".
Процедура ЗаполнитьСписокОбъектовЗавершение(СписокОбъектов, ДополнительныеПараметры) Экспорт
	
	// При заполнении с отбором во всех случаях очищается ТЧ, меняется набор рассматриваемых объектов.
	// Поэтому при сортировке строк всегда используется стандартная сортировка.
	СортироватьПоИсходномуНомеруСтроки = Ложь;
	
	// Заполнять табличную часть имеет смысл только в том случае, если форма заполнения получателями услуг
	// возвращает не пустой список значений.
	Если ТипЗнч(СписокОбъектов) = Тип("СписокЗначений") И СписокОбъектов.Количество() > 0 Тогда
		
		ЗаполнитьТабличнуюЧастьНаСервере(СписокОбъектов, Истина);
		
		ЗаполнитьДеревоПоказаний(СортироватьПоИсходномуНомеруСтроки);
		
		УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ПроверитьПоказания(ЭтаФорма);
		
		// Управление элементами контроля показаний.
		УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма, Истина);
		
		// Вывод итогов в подвал.
		ВывестиИтогиВПодвале();
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаУстановитьДату".
Процедура КомандаУстановитьДату(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаУстановитьДатуЗавершение", ЭтотОбъект);
	ПоказатьВводЗначения(ОписаниеОповещения, Объект.Дата, "Укажите дату показания");
	
КонецПроцедуры // КомандаУстановитьДату()

&НаКлиенте
// Процедура-обработчик результата выбора значения, вызванного в процедуре "КомандаУстановитьДату()".
Процедура КомандаУстановитьДатуЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	ДатаИзменена = Ложь;
	
	Если Не Значение = Неопределено Тогда
		ЭлементыДерева = ДеревоПоказаний.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Если ЭлементДерева.ДатаПоказания <> Значение Тогда
				ЭлементДерева.ДатаПоказания = Значение;
				ДатаИзменена = Истина;
			КонецЕсли;
			ВложенныеЭлементы = ЭлементДерева.ПолучитьЭлементы();
			Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
				Если ВложенныйЭлемент.ДатаПоказания <> Значение Тогда
					ВложенныйЭлемент.ДатаПоказания = Значение;
					ДатаИзменена = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Если ДатаИзменена Тогда
		КомандаОбновитьПоказания(Неопределено);
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // КомандаУстановитьДатуЗавершение()

&НаКлиенте
// Обработчик команды "КомандаОбновитьПоказания"
Процедура КомандаОбновитьПоказания(Команда)
	
	// Заполнение ТЧ "Главная" данными из дерева показаний формы.
	ЗаполнитьТЧПоДереву();
	
	// Обновление показаний в ТЧ "Главная".
	ОбновитьТабличнуюЧастьНаСервере();
	
	// Заполнение дерева показаний формы.
	ЗаполнитьДеревоПоказаний(, Истина);
	
	// Выполнение проверки показаний.
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ПроверитьПоказания(ЭтаФорма);
	
	// Управление элементами контроля показаний.
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма, Истина);
	
	// Вывод итогов в подвал.
	ВывестиИтогиВПодвале();

КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДеревоПоказанийСортироватьПоВозрастанию"
Процедура ДеревоПоказанийСортироватьПоВозрастанию(Команда)
	
	Если Не Элементы.ДеревоПоказаний.ТекущийЭлемент.Имя = "ДеревоПоказанийКоэффициент" Тогда
		СортироватьТЧНаСервере("ДеревоПоказаний", Элементы.ДеревоПоказаний.ТекущийЭлемент.Имя, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДеревоПоказанийСортироватьПоУбыванию"
Процедура ДеревоПоказанийСортироватьПоУбыванию(Команда)
	
	Если Не Элементы.ДеревоПоказаний.ТекущийЭлемент.Имя = "ДеревоПоказанийКоэффициент" Тогда
		СортироватьТЧНаСервере("ДеревоПоказаний", Элементы.ДеревоПоказаний.ТекущийЭлемент.Имя, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОтображатьТолькоСтрокиСОшибками".
Процедура ОтображатьТолькоСтрокиСОшибками(Команда)
	
	// Изменим признак отбора строк с ошибками.
	// Непосредственное управление отбором осуществляется с помощью условного оформления,
	// так как дерево значений не поддерживает платформенные методы отбора строк.
	ОтображатьТолькоСтрокиСОшибками = Не ОтображатьТолькоСтрокиСОшибками;
	
	// Управление пометкой кнопки отбора только строк с ошибками.
	Элементы.ДеревоПоказанийКомандаОтображатьТолькоСтрокиСОшибками.Пометка = ОтображатьТолькоСтрокиСОшибками;
	
	// Для того, чтобы всегда корректно отображалась шапка дерева,
	// нужно в качестве текущей строки установить первую строку с ошибкой.
	Если ОтображатьТолькоСтрокиСОшибками Тогда
		
		СпозиционироватьКурсорНаПервуюСтрокуСОшибкойПоказаний();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СформироватьДокументКорректировкиНачислений".
Процедура СформироватьДокументКорректировкиНачислений(Команда)
	
	Если Объект.Ссылка.Пустая() Или Не Объект.Проведен Или Модифицированность Тогда
		
		ТекстВопроса = "Перед формированием документа ""Корректировка начислений"" текущий документ будет проведен." + Символы.ПС + "Продолжить?";
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОПроведенииДокумента", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	СформироватьДокументКорректировкиНаСервере();
	
	// Заполнение представления ссылки на корректировку начислений, если она сформирована.
	ЗаполнитьПредставлениеСсылкиНаКорректировкуНачислений(ЭтаФорма);
	
	// Управление элементами контроля показаний.
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
// В процедуре обрабатывается ответ пользователя о необходимости проведения текущего документа.
//
Процедура ОбработатьОтветНаВопросОПроведенииДокумента(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если Объект.Проведен И Не Модифицированность Тогда
			СформироватьДокументКорректировкиНаСервере();
			
			// Заполнение представления ссылки на корректировку начислений, если она сформирована.
			ЗаполнитьПредставлениеСсылкиНаКорректировкуНачислений(ЭтаФорма);
			
			// Управление элементами контроля показаний.
			УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтветНаВопросОПроведенииДокумента()

&НаКлиенте
// Обработчик события "Нажатие" поля "НадписьКорректировкаНачислений".
//
Процедура НадписьКорректировкаНачисленийНажатие(Элемент, СтандартнаяОбработка)
	
	// Открываем документ корректировки начислений по ссылке.
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, ДокументКорректировкаНачислений);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Устанавливает значение для иконки состояния документа "Корректировка начислений".
//
Процедура УстановитьСостояниеДокументаКорректировкаНачислений(Форма)
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.УстановитьСостояниеДокументаКорректировкаНачислений(Форма);
	
КонецПроцедуры // УстановитьСостояниеДокументаКорректировкаНачислений()
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
// Обработчик результата вопроса, вызванного при изменении флага "ВводНачальныхПоказаний".
Процедура ОбработатьРезультатВопросаПриИзмененииФлагаВводНачальныхПоказаний(Ответ, СписокСчетчиков) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СтрокиДерева           = ДеревоПоказаний.ПолучитьЭлементы();
		МассивСтрокДляУдаления = Новый Массив;
		
		Для Каждого ТекущаяСтрока Из СтрокиДерева Цикл
			Если СписокСчетчиков.НайтиПоЗначению(ТекущаяСтрока.Счетчик) <> Неопределено Тогда
				МассивСтрокДляУдаления.Добавить(ТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрокаДляУдаления из МассивСтрокДляУдаления Цикл
			
			СтрокиДерева.Удалить(ТекСтрокаДляУдаления);
			
		КонецЦикла;
		
		ПересчитатьНомераСтрок();
		
	Иначе
		Объект.ВводНачальныхПоказаний = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ОбработатьРезультатВопросаПриИзмененииФлагаВводНачальныхПоказаний()

&НаКлиенте
// Процедура пересчитывает номера строк в дереве.
Процедура ПересчитатьНомераСтрок()
	
	НомерСтрокиДерева = 1;
	ЭлементыДерева = ДеревоПоказаний.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		ЭлементДерева.Номер = НомерСтрокиДерева;
		НомерСтрокиДерева = НомерСтрокиДерева + 1;
	КонецЦикла;
	
КонецПроцедуры //ПересчитатьНомераСтрок()

&НаКлиенте
// Открывает справочник с отбором закрепленных счетчиков по выбранной услуге
//
// Параметры
//  нет
//
Функция ПолучитьФормуВыбораСчетчикаИзСправочника()
	
	СпСчетчиков = Новый СписокЗначений;
	СпСчетчиков.ЗагрузитьЗначения(ПолучитьЗакрепленныеСчетчикиДляВыбора());
	
	ПараметрыОтбор = Новый Структура("Ссылка", СпСчетчиков);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбор);
	ФормаВыбора = ПолучитьФорму("Справочник.КВП_Счетчики.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Возврат ФормаВыбора;

КонецФункции // ПолучитьФормуВыбораСчетчикаИзСправочника()

&НаСервере
// Добавляет строку с данными по указанному счетчику в дерево показаний.
// Возвращает номер добавленной строки.
//
// Параметры
//  Счетчик           - счетчик для добавления строки с данными.
//  НомерСтрокиДерева - число, определяющее номер строки счетчика в дереве значений.
//
Функция ДобавитьСтрокуСчетчика(Счетчик, НомерСтрокиДерева = Неопределено)
	
	НомерДобавленнойСтроки = -1;
	Если Счетчик = Неопределено Тогда
		Возврат НомерДобавленнойСтроки;
	КонецЕсли;
	
	ЭлементыДерева = ДеревоПоказаний.ПолучитьЭлементы();
	НомСтрокиДерева = ЭлементыДерева.Количество();
	
	Индекс = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПроверитьНаличиеСчетчикаВТаблице(Счетчик, ДеревоПоказаний);
	Если Индекс >= 0  Тогда
		Возврат НомерДобавленнойСтроки;
	КонецЕсли;
	
	ТаблицаСчетчиков = ПолучитьПоказанияСчетчика(Счетчик);
	
	МассивСтрок = ТаблицаСчетчиков.НайтиСтроки(Новый Структура("Счетчик", Счетчик));
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		// Если номера строки дерева нет, значит добавляется новая строка счетчика.
		Если НомерСтрокиДерева = Неопределено Тогда
			
			СтрокаДерева = ЭлементыДерева.Добавить();
			СтрокаДерева.Номер = НомСтрокиДерева + 1;
			
			СтрокаДерева.ДатаПоказания = Объект.Дата;
			СтрокаДерева.ДневноеПоказание = Неопределено;
			СтрокаДерева.НочноеПоказание  = Неопределено;
			СтрокаДерева.ПиковоеПоказание = Неопределено;
			СтрокаДерева.ПустоеДневноеПоказание = Истина;
			СтрокаДерева.ПустоеНочноеПоказание  = Истина;
			СтрокаДерева.ПустоеПиковоеПоказание = Истина;
			СтрокаДерева.Счетчик = Счетчик;
			СтрокаДерева.Объект  = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
			
			// Т.к. счетчик может быть установлен на несколько объектов, то реальный номер строки в дереве значений
			// может не совпадать с номером строки по порядку, т.к. будут подстроки у корневых строк дерева.
			// Аналогично при перезаполнении строк в уже созданном документе реальные номера строк также не будут
			// соответствовать номеру строки по порядку. Поэтому ориентироваться будем на реквизит формы
			// "МаксимальныйНомерСтрокиДерева", заполняемый при добавлении новой строки вручную, и
			// при заполнении дерева значений по табличной части.
			НомерДобавленнойСтроки = МаксимальныйНомерСтрокиДерева;
			
			// Реквизит дерева "РеальныйНомерСтрокиДерева" используется в условном оформлении формы для вывода
			// текста в текущей активной строке дерева. Т.к. типовой механизм выделения строк не позволяет увидеть
			// цветовую раскраску ячеек в текущей строке, то решили в текущей строке выводить текст "<Ввести>"
			// в полях ввода показаний в случае, когда документ не проведен.
			СтрокаДерева.РеальныйНомерСтрокиДерева = НомерДобавленнойСтроки;
			МаксимальныйНомерСтрокиДерева          = МаксимальныйНомерСтрокиДерева + 1;
			
		// Если номер строки дерева передан, значит произошло изменение счетчика в строке дерева.
		// Очищаем все требуемые колонки в строке и удаляем подчиненные строки, если таковые имеются.
		Иначе
			
			// Индексы строк дерева начинаются с "0", а номера строк с "1". Т.к. строку дерева получаем по индексу,
			// значит нужно брать значение меньшее на единицу, чем номер строки дерева.
			СтрокаДерева = ЭлементыДерева.Получить(НомерСтрокиДерева - 1);
			Если НЕ Счетчик = СтрокаДерева.Счетчик Тогда
				СтрокаДерева.Объект = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
				СтрокаДерева.ДневноеПоказание = Неопределено;
				СтрокаДерева.НочноеПоказание  = Неопределено;
				СтрокаДерева.ПиковоеПоказание = Неопределено;
				СтрокаДерева.ПустоеДневноеПоказание = Истина;
				СтрокаДерева.ПустоеНочноеПоказание  = Истина;
				СтрокаДерева.ПустоеПиковоеПоказание = Истина;
				
				СтрокаДерева.ДневноеПоказаниеРасход = Неопределено;
				СтрокаДерева.НочноеПоказаниеРасход  = Неопределено;
				СтрокаДерева.ПиковоеПоказаниеРасход = Неопределено;
				
				СтрокаДерева.ДневноеПоказаниеРасходПриведенный = Неопределено;
				СтрокаДерева.НочноеПоказаниеРасходПриведенный  = Неопределено;
				СтрокаДерева.ПиковоеПоказаниеРасходПриведенный = Неопределено;
				
				СтрокаДерева.ПолучитьЭлементы().Очистить();
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, МассивСтрок[0], , "Объект");
		
		// Если прибор учета установлен на один объект, то будет только 1 строка в массиве строк.
		Если МассивСтрок.Количество() = 1 Тогда
			
			СтрокаДерева.Объект         = МассивСтрок[0].Объект;
			СтрокаДерева.КоэффициентСтр = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(СтрокаДерева.КоэффициентЧислитель, СтрокаДерева.КоэффициентЗнаменатель);
			
		// Если прибор учета установлен на несколько объектов, то будет столько подчиненных строк,
		// на сколько объектов учета установлен данный прибор учета.
		Иначе
			
			ЭлементыСтроки = СтрокаДерева.ПолучитьЭлементы();
			Для Каждого ТекСчетчик Из МассивСтрок Цикл
				
				НоваяСтрока                        = ЭлементыСтроки.Добавить();
				НоваяСтрока.Объект                 = ТекСчетчик.Объект;
				НоваяСтрока.КоэффициентЧислитель   = ТекСчетчик.КоэффициентЧислитель;
				НоваяСтрока.КоэффициентЗнаменатель = ТекСчетчик.КоэффициентЗнаменатель;
				НоваяСтрока.КоэффициентСтр         = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(НоваяСтрока.КоэффициентЧислитель, НоваяСтрока.КоэффициентЗнаменатель);
				
				МаксимальныйНомерСтрокиДерева      = МаксимальныйНомерСтрокиДерева + 1;
				
			КонецЦикла;
			
			// Когда прибор учета установлен на несколько объектов учета, выводить доли в строку дерева не нужно,
			// т.к. доли будут выводиться в дочерних строках текущей ветки дерева.
			СтрокаДерева.КоэффициентЧислитель   = 0;
			СтрокаДерева.КоэффициентЗнаменатель = 0;
			СтрокаДерева.КоэффициентСтр = "";
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерДобавленнойСтроки;
	
КонецФункции // ДобавитьСтрокуСчетчика()

&НаСервереБезКонтекста
// Процедура проверяет, изменилась ли строка дерева.
Функция ИзмениласьСтрокаДерева(Счетчик, АдресХранилищаДанныхСтроки)
	
	мСтруктураРедСтроки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныхСтроки);
	
	Возврат (Счетчик <> мСтруктураРедСтроки.Счетчик);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Процедура выполняет проверку отображаемых коэффициентов приборов учета.
Функция ПроверитьКоэффициентыПриборовУчета(Форма)
	
	// Обход целого дерева показаний.
	Для Каждого ТекСтрока Из Форма.ДеревоПоказаний.ПолучитьЭлементы() Цикл
		
		Если НЕ ТекСтрока.КоэффициентТрансформации = 1
		 ИЛИ НЕ ТекСтрока.ТемпературныйКоэффициент = 1 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ПроверитьКоэффициентыПриборовУчета()

&НаКлиенте
// Возникает при активизации строки дерева показаний.
Процедура ПриАктивизацииСтрокиДеревоПоказаний()
	
	// Управление элементами контроля показаний.
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма, Истина, Истина);
	
КонецПроцедуры

&НаСервере
// Заполняет дерево значений данными из табличной части документа.
//
// Параметры:
//  СортироватьПоИсходномуНомеруСтроки - булево - параметр, определеющий вид сортировки записей в ТЧ формы.
//
//  ОбновлениеДанных - параметр, характеризующий необходимость обновить данные в табличной части Главная.
Процедура ЗаполнитьДеревоПоказаний(СортироватьПоИсходномуНомеруСтроки = Истина, ОбновлениеДанных = Ложь)
	
	МассивПолейСортировки = Новый Массив;
	
	// Если выполняется обновление данных, то используем данные из ТЧ "Главная"
	//  в том виде, в каком они представлены в настоящий момент.
	// Это нужно для того, чтобы сохранить порядок строк дерева показаний
	//  при обновлении показаний.
	Если ОбновлениеДанных Тогда
		ТаблицаСчетчиков = Объект.Главная.Выгрузить();
		
		// Условие сортироки, если не ОбновлениеДанных.
	Иначе
		// Сохраняем первоначальную сортировку дерева, если в ТЧ "Главная" уже имелись строки.
		Если СортироватьПоИсходномуНомеруСтроки Тогда
			МассивПолейСортировки.Добавить("ИсходныйНомерСтроки");
			
			// Применяем сортировку в зависимости от вида операции (и, соответственно, вида объекта),
			// если ТЧ "Главная" полностью обновляется.
		Иначе
			Если Объект.ВидОперации = ПредопределенноеЗначение(
				"Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаЗдание") Тогда
				МассивПолейСортировки.Добавить("Объект.ВидСооружения");
				МассивПолейСортировки.Добавить("Объект");
			ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
				"Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаПодъезд") Тогда
				МассивПолейСортировки.Добавить("Объект.Владелец");
				МассивПолейСортировки.Добавить("Объект");
			ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
				"Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет") Тогда
				МассивПолейСортировки.Добавить("Объект.Адрес.Владелец");
				МассивПолейСортировки.Добавить("Объект.Адрес.ВидПомещения");
				МассивПолейСортировки.Добавить("Объект.Адрес.Код");
			ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
				"Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение") Тогда
				МассивПолейСортировки.Добавить("Объект.Владелец");
				МассивПолейСортировки.Добавить("Объект.ВидПомещения");
				МассивПолейСортировки.Добавить("Объект.Код");
			КонецЕсли;
			
			МассивПолейСортировки.Добавить("Услуга");
			МассивПолейСортировки.Добавить("Счетчик");
			
		КонецЕсли;
		
		ТаблицаСчетчиков = УПЖКХ_ОбщегоНазначенияСервер.СформироватьЗапросПоТабличнойЧасти(Объект, "Главная", МассивПолейСортировки);
		
	КонецЕсли;
	
	ТаблицаСчетчиков.Индексы.Добавить("Счетчик");
	
	ТЗДеревоПоказаний = РеквизитФормыВЗначение("ДеревоПоказаний", Тип("ДеревоЗначений"));
	
	ТЗДеревоПоказаний.Строки.Очистить();
	
	Ном = 1;
	ПервыйОбходРезультата = Истина;
	
	Для Каждого ТекЗначение Из ТаблицаСчетчиков Цикл
		
		ОбщаяСтруктураПоказаний = Новый Структура;
		
		УПЖКХ_ВводПоказанийПриборовУчетаСервер.ЗаполнитьОбщуюСтруктуруПоказаний(ОбщаяСтруктураПоказаний, ТекЗначение);
		
		Если ПервыйОбходРезультата Тогда
			ТекущийСч          = ТекЗначение.Счетчик;
			НоваяВетка         = ТЗДеревоПоказаний.Строки.Добавить();
			НоваяВетка.Номер   = Ном;
			НоваяВетка.Счетчик = ТекЗначение.Счетчик;
			
			Если ЗначениеЗаполнено(ТекЗначение.СпособРегистрацииПоказаний) Тогда
				НоваяВетка.СпособРегистрацииПоказаний = ТекЗначение.СпособРегистрацииПоказаний;
			Иначе
				НоваяВетка.СпособРегистрацииПоказаний = ТекЗначение.Счетчик.СпособРегистрацииПоказаний;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекЗначение.Тарифность) Тогда
				НоваяВетка.Тарифность = ТекЗначение.Тарифность;
			Иначе
				НоваяВетка.Тарифность = ТекЗначение.Счетчик.Тарифность;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекЗначение.Разрядность) Тогда
				НоваяВетка.Разрядность = ТекЗначение.Разрядность;
			Иначе
				НоваяВетка.Разрядность = ТекЗначение.Счетчик.Разрядность;
			КонецЕсли;
			
			НоваяВетка.Услуга        = ТекЗначение.Услуга;
			НоваяВетка.ДатаПоказания = ТекЗначение.ДатаПоказания;
			Если Не ЗначениеЗаполнено(НоваяВетка.ДатаПоказания) Тогда
				НоваяВетка.ДатаПоказания = Объект.Дата;
			КонецЕсли;
			НоваяВетка.ПоказанияКорректны           = ТекЗначение.ПоказанияКорректны;
			НоваяВетка.ДневноеПоказание             = ТекЗначение.ДневноеПоказание;
			НоваяВетка.НочноеПоказание              = ТекЗначение.НочноеПоказание;
			НоваяВетка.ПиковоеПоказание             = ТекЗначение.ПиковоеПоказание;
			НоваяВетка.ДатаПредыдущегоПоказания     = ТекЗначение.ДатаПредыдущегоПоказания;
			НоваяВетка.ПредыдущееПоказаниеНачальное = ТекЗначение.ПредыдущееПоказаниеНачальное;
			НоваяВетка.ДневноеПоказаниеПредыдущее   = ТекЗначение.ДневноеПоказаниеПредыдущее;
			НоваяВетка.НочноеПоказаниеПредыдущее    = ТекЗначение.НочноеПоказаниеПредыдущее;
			НоваяВетка.ПиковоеПоказаниеПредыдущее   = ТекЗначение.ПиковоеПоказаниеПредыдущее;
			НоваяВетка.СреднийРасходДневной         = ТекЗначение.СреднийРасходДневной;
			НоваяВетка.СреднийРасходНочной          = ТекЗначение.СреднийРасходНочной;
			НоваяВетка.СреднийРасходПиковый         = ТекЗначение.СреднийРасходПиковый;
			НоваяВетка.КоэффициентТрансформации     = ТекЗначение.КоэффициентТрансформации;
			НоваяВетка.ТемпературныйКоэффициент     = ТекЗначение.ТемпературныйКоэффициент;
			
			// Реквизит дерева "РеальныйНомерСтрокиДерева" используется в условном оформлении формы для вывода
			// текста в текущей активной строке дерева. Т.к. типовой механизм выделения строк не позволяет увидеть
			// цветовую раскраску ячеек в текущей строке, то решили в текущей строке выводить текст "<Ввести>"
			// в полях ввода показаний в случае, когда документ не проведен.
			НоваяВетка.РеальныйНомерСтрокиДерева  = МаксимальныйНомерСтрокиДерева;
			МаксимальныйНомерСтрокиДерева         = МаксимальныйНомерСтрокиДерева + 1;
			
			Если Не ТекЗначение.ДневноеПоказание = Неопределено Тогда
				НоваяВетка.ДневноеПоказаниеРасход = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(ОбщаяСтруктураПоказаний, "ДневноеПоказание");
				НоваяВетка.ПустоеДневноеПоказание = Ложь;
				НоваяВетка.ДневноеПоказаниеРасходПриведенный = НоваяВетка.ДневноеПоказаниеРасход
															 * ТекЗначение.КоэффициентТрансформации 
															 * ТекЗначение.ТемпературныйКоэффициент;
			Иначе 
				НоваяВетка.ПустоеДневноеПоказание = Истина;
			КонецЕсли;
			Если Не ТекЗначение.НочноеПоказание = Неопределено Тогда
				НоваяВетка.НочноеПоказаниеРасход  = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(ОбщаяСтруктураПоказаний, "НочноеПоказание");
				НоваяВетка.ПустоеНочноеПоказание = Ложь;
				НоваяВетка.НочноеПоказаниеРасходПриведенный = НоваяВетка.НочноеПоказаниеРасход
															 * ТекЗначение.КоэффициентТрансформации 
															 * ТекЗначение.ТемпературныйКоэффициент;
			Иначе 
				НоваяВетка.ПустоеНочноеПоказание = Истина;
			КонецЕсли;
			Если Не ТекЗначение.ПиковоеПоказание = Неопределено Тогда
				НоваяВетка.ПиковоеПоказаниеРасход = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(ОбщаяСтруктураПоказаний, "ПиковоеПоказание");
				НоваяВетка.ПустоеПиковоеПоказание = Ложь;
				НоваяВетка.ПиковоеПоказаниеРасходПриведенный = НоваяВетка.ПиковоеПоказаниеРасход
															 * ТекЗначение.КоэффициентТрансформации 
															 * ТекЗначение.ТемпературныйКоэффициент;
			Иначе 
				НоваяВетка.ПустоеПиковоеПоказание = Истина;
			КонецЕсли;
			
			СтрокиСчетчика = ТаблицаСчетчиков.НайтиСтроки(Новый Структура("Счетчик", ТекЗначение.Счетчик));
			Если СтрокиСчетчика.Количество() > 1 Тогда
				НоваяСтрока = НоваяВетка.Строки.Добавить();
				НоваяСтрока.Объект                 = ТекЗначение.Объект;
				НоваяСтрока.Помещение              = ТекЗначение.Помещение;
				НоваяСтрока.КоэффициентЧислитель   = ТекЗначение.КоэффициентЧислитель;
				НоваяСтрока.КоэффициентЗнаменатель = ТекЗначение.КоэффициентЗнаменатель;
				НоваяСтрока.КоэффициентСтр         = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(НоваяСтрока.КоэффициентЧислитель, НоваяСтрока.КоэффициентЗнаменатель);
				МаксимальныйНомерСтрокиДерева      = МаксимальныйНомерСтрокиДерева + 1;
				СгруппироватьСтрокиСОднимСчетчикомВТаблицеСчетчиков(ТаблицаСчетчиков, ТекЗначение, СтрокиСчетчика);
			Иначе
				НоваяВетка.Объект                 = ТекЗначение.Объект;
				НоваяВетка.Помещение              = ТекЗначение.Помещение;
				НоваяВетка.КоэффициентЧислитель   = ТекЗначение.КоэффициентЧислитель;
				НоваяВетка.КоэффициентЗнаменатель = ТекЗначение.КоэффициентЗнаменатель;
				НоваяВетка.КоэффициентСтр         = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(НоваяВетка.КоэффициентЧислитель, НоваяВетка.КоэффициентЗнаменатель);
			КонецЕсли;
			
			ПервыйОбходРезультата = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если ТекЗначение.Счетчик = ТекущийСч Тогда
			НоваяСтрока = НоваяВетка.Строки.Добавить();
			НоваяСтрока.Объект                 = ТекЗначение.Объект;
			НоваяСтрока.Помещение              = ТекЗначение.Помещение;
			НоваяСтрока.КоэффициентЧислитель   = ТекЗначение.КоэффициентЧислитель;
			НоваяСтрока.КоэффициентЗнаменатель = ТекЗначение.КоэффициентЗнаменатель;
			НоваяСтрока.КоэффициентСтр         = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(НоваяСтрока.КоэффициентЧислитель, НоваяСтрока.КоэффициентЗнаменатель);
			МаксимальныйНомерСтрокиДерева      = МаксимальныйНомерСтрокиДерева + 1;
		Иначе
			НоваяВетка = ТЗДеревоПоказаний.Строки.Добавить();
			Ном                = Ном + 1;
			НоваяВетка.Номер   = Ном;
			НоваяВетка.Счетчик = ТекЗначение.Счетчик;
			
			Если ЗначениеЗаполнено(ТекЗначение.СпособРегистрацииПоказаний) Тогда
				НоваяВетка.СпособРегистрацииПоказаний = ТекЗначение.СпособРегистрацииПоказаний;
			Иначе
				НоваяВетка.СпособРегистрацииПоказаний = ТекЗначение.Счетчик.СпособРегистрацииПоказаний;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекЗначение.Тарифность) Тогда
				НоваяВетка.Тарифность = ТекЗначение.Тарифность;
			Иначе
				НоваяВетка.Тарифность = ТекЗначение.Счетчик.Тарифность;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекЗначение.Разрядность) Тогда
				НоваяВетка.Разрядность = ТекЗначение.Разрядность;
			Иначе
				НоваяВетка.Разрядность = ТекЗначение.Счетчик.Разрядность;
			КонецЕсли;
			
			НоваяВетка.Услуга        = ТекЗначение.Услуга;
			НоваяВетка.ДатаПоказания = ТекЗначение.ДатаПоказания;
			Если Не ЗначениеЗаполнено(НоваяВетка.ДатаПоказания) Тогда
				НоваяВетка.ДатаПоказания = Объект.Дата;
			КонецЕсли;
			НоваяВетка.ПоказанияКорректны           = ТекЗначение.ПоказанияКорректны;
			НоваяВетка.ДневноеПоказание             = ТекЗначение.ДневноеПоказание;
			НоваяВетка.НочноеПоказание              = ТекЗначение.НочноеПоказание;
			НоваяВетка.ПиковоеПоказание             = ТекЗначение.ПиковоеПоказание;
			НоваяВетка.ДатаПредыдущегоПоказания     = ТекЗначение.ДатаПредыдущегоПоказания;
			НоваяВетка.ПредыдущееПоказаниеНачальное = ТекЗначение.ПредыдущееПоказаниеНачальное;
			НоваяВетка.ДневноеПоказаниеПредыдущее   = ТекЗначение.ДневноеПоказаниеПредыдущее;
			НоваяВетка.НочноеПоказаниеПредыдущее    = ТекЗначение.НочноеПоказаниеПредыдущее;
			НоваяВетка.ПиковоеПоказаниеПредыдущее   = ТекЗначение.ПиковоеПоказаниеПредыдущее;
			НоваяВетка.СреднийРасходДневной         = ТекЗначение.СреднийРасходДневной;
			НоваяВетка.СреднийРасходНочной          = ТекЗначение.СреднийРасходНочной;
			НоваяВетка.СреднийРасходПиковый         = ТекЗначение.СреднийРасходПиковый;
			НоваяВетка.КоэффициентТрансформации     = ТекЗначение.КоэффициентТрансформации;
			НоваяВетка.ТемпературныйКоэффициент     = ТекЗначение.ТемпературныйКоэффициент;
			НоваяВетка.РеальныйНомерСтрокиДерева    = МаксимальныйНомерСтрокиДерева;
			МаксимальныйНомерСтрокиДерева           = МаксимальныйНомерСтрокиДерева + 1;
			
			Если Не ТекЗначение.ДневноеПоказание = Неопределено Тогда
				НоваяВетка.ДневноеПоказаниеРасход = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(ОбщаяСтруктураПоказаний, "ДневноеПоказание");
				НоваяВетка.ПустоеДневноеПоказание = Ложь;
				НоваяВетка.ДневноеПоказаниеРасходПриведенный = НоваяВетка.ДневноеПоказаниеРасход
															 * ТекЗначение.КоэффициентТрансформации 
															 * ТекЗначение.ТемпературныйКоэффициент;
			Иначе 
				НоваяВетка.ПустоеДневноеПоказание = Истина;
			КонецЕсли;
			Если Не ТекЗначение.НочноеПоказание = Неопределено Тогда
				НоваяВетка.НочноеПоказаниеРасход = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(ОбщаяСтруктураПоказаний, "НочноеПоказание");
				НоваяВетка.ПустоеНочноеПоказание = Ложь;
				НоваяВетка.НочноеПоказаниеРасходПриведенный = НоваяВетка.НочноеПоказаниеРасход
															 * ТекЗначение.КоэффициентТрансформации 
															 * ТекЗначение.ТемпературныйКоэффициент;
			Иначе 
				НоваяВетка.ПустоеНочноеПоказание = Истина;
			КонецЕсли;
			Если Не ТекЗначение.ПиковоеПоказание = Неопределено Тогда
				НоваяВетка.ПиковоеПоказаниеРасход = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(ОбщаяСтруктураПоказаний, "ПиковоеПоказание");
				НоваяВетка.ПустоеПиковоеПоказание = Ложь;
				НоваяВетка.ПиковоеПоказаниеРасходПриведенный = НоваяВетка.ПиковоеПоказаниеРасход
															 * ТекЗначение.КоэффициентТрансформации 
															 * ТекЗначение.ТемпературныйКоэффициент;
			Иначе 
				НоваяВетка.ПустоеПиковоеПоказание = Истина;
			КонецЕсли;
			
			СтрокиСчетчика = ТаблицаСчетчиков.НайтиСтроки(Новый Структура("Счетчик", ТекЗначение.Счетчик));
			Если СтрокиСчетчика.Количество() > 1 Тогда
				НоваяСтрока = НоваяВетка.Строки.Добавить();
				НоваяСтрока.Объект                 = ТекЗначение.Объект;
				НоваяСтрока.Помещение              = ТекЗначение.Помещение;
				НоваяСтрока.КоэффициентЧислитель   = ТекЗначение.КоэффициентЧислитель;
				НоваяСтрока.КоэффициентЗнаменатель = ТекЗначение.КоэффициентЗнаменатель;
				НоваяСтрока.КоэффициентСтр         = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(НоваяСтрока.КоэффициентЧислитель, НоваяСтрока.КоэффициентЗнаменатель);
				МаксимальныйНомерСтрокиДерева      = МаксимальныйНомерСтрокиДерева + 1;
				СгруппироватьСтрокиСОднимСчетчикомВТаблицеСчетчиков(ТаблицаСчетчиков, ТекЗначение, СтрокиСчетчика);
			Иначе
				НоваяВетка.Объект                 = ТекЗначение.Объект;
				НоваяВетка.Помещение              = ТекЗначение.Помещение;
				НоваяВетка.КоэффициентЧислитель   = ТекЗначение.КоэффициентЧислитель;
				НоваяВетка.КоэффициентЗнаменатель = ТекЗначение.КоэффициентЗнаменатель;
				НоваяВетка.КоэффициентСтр         = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(НоваяВетка.КоэффициентЧислитель, НоваяВетка.КоэффициентЗнаменатель);
			КонецЕсли;
			ТекущийСч = ТекЗначение.Счетчик;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТЗДеревоПоказаний, "ДеревоПоказаний");
	
КонецПроцедуры  //ЗаполнитьДеревоПоказаний()

&НаСервере
// Заполняет табличную часть документа данными из дерева.
Процедура ЗаполнитьТЧПоДереву()
	
	Объект.Главная.Очистить();
	
	ТЗДеревоПоказаний = РеквизитФормыВЗначение("ДеревоПоказаний", Тип("ДеревоЗначений"));
	
	// перенесем данные из дерева в табличную часть документа
	Для Каждого ТекВетка Из ТЗДеревоПоказаний.Строки Цикл
		Если ТекВетка.Строки.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из ТекВетка.Строки Цикл
				НовСтр                              = Объект.Главная.Добавить();
				НовСтр.Счетчик                      = ТекВетка.Счетчик;
				НовСтр.СпособРегистрацииПоказаний   = ТекВетка.СпособРегистрацииПоказаний;
				НовСтр.Тарифность                   = ТекВетка.Тарифность;
				НовСтр.Разрядность                  = ТекВетка.Разрядность;
				НовСтр.Услуга                       = ТекВетка.Услуга;
				НовСтр.Объект                       = ТекСтрока.Объект;
				НовСтр.Помещение                    = ТекСтрока.Помещение;
				НовСтр.ДатаПоказания                = ТекВетка.ДатаПоказания;
				НовСтр.ПоказанияКорректны           = ТекВетка.ПоказанияКорректны;
				НовСтр.ДневноеПоказание             = ТекВетка.ДневноеПоказание;
				НовСтр.НочноеПоказание              = ТекВетка.НочноеПоказание;
				НовСтр.ПиковоеПоказание             = ТекВетка.ПиковоеПоказание;
				НовСтр.КоэффициентЧислитель         = ТекСтрока.КоэффициентЧислитель;
				НовСтр.КоэффициентЗнаменатель       = ТекСтрока.КоэффициентЗнаменатель;
				НовСтр.ДатаПредыдущегоПоказания     = ТекВетка.ДатаПредыдущегоПоказания;
				НовСтр.ПредыдущееПоказаниеНачальное = ТекВетка.ПредыдущееПоказаниеНачальное;
				НовСтр.ДневноеПоказаниеПредыдущее   = ТекВетка.ДневноеПоказаниеПредыдущее;
				НовСтр.НочноеПоказаниеПредыдущее    = ТекВетка.НочноеПоказаниеПредыдущее;
				НовСтр.ПиковоеПоказаниеПредыдущее   = ТекВетка.ПиковоеПоказаниеПредыдущее;
				НовСтр.СреднийРасходДневной         = ТекВетка.СреднийРасходДневной;
				НовСтр.СреднийРасходНочной          = ТекВетка.СреднийРасходНочной;
				НовСтр.СреднийРасходПиковый         = ТекВетка.СреднийРасходПиковый;
				НовСтр.КоэффициентТрансформации     = ТекВетка.КоэффициентТрансформации;
				НовСтр.ТемпературныйКоэффициент     = ТекВетка.ТемпературныйКоэффициент;
			КонецЦикла;
		Иначе
			НовСтр                              = Объект.Главная.Добавить();
			НовСтр.Счетчик                      = ТекВетка.Счетчик;
			НовСтр.СпособРегистрацииПоказаний   = ТекВетка.СпособРегистрацииПоказаний;
			НовСтр.Тарифность                   = ТекВетка.Тарифность;
			НовСтр.Разрядность                  = ТекВетка.Разрядность;
			НовСтр.Услуга                       = ТекВетка.Услуга;
			НовСтр.Объект                       = ТекВетка.Объект;
			НовСтр.Помещение                    = ТекВетка.Помещение;
			НовСтр.ДатаПоказания                = ТекВетка.ДатаПоказания;
			НовСтр.ПоказанияКорректны           = ТекВетка.ПоказанияКорректны;
			НовСтр.ДневноеПоказание             = ТекВетка.ДневноеПоказание;
			НовСтр.НочноеПоказание              = ТекВетка.НочноеПоказание;
			НовСтр.ПиковоеПоказание             = ТекВетка.ПиковоеПоказание;
			НовСтр.КоэффициентЧислитель         = ТекВетка.КоэффициентЧислитель;
			НовСтр.КоэффициентЗнаменатель       = ТекВетка.КоэффициентЗнаменатель;
			НовСтр.ДатаПредыдущегоПоказания     = ТекВетка.ДатаПредыдущегоПоказания;
			НовСтр.ПредыдущееПоказаниеНачальное = ТекВетка.ПредыдущееПоказаниеНачальное;
			НовСтр.ДневноеПоказаниеПредыдущее   = ТекВетка.ДневноеПоказаниеПредыдущее;
			НовСтр.НочноеПоказаниеПредыдущее    = ТекВетка.НочноеПоказаниеПредыдущее;
			НовСтр.ПиковоеПоказаниеПредыдущее   = ТекВетка.ПиковоеПоказаниеПредыдущее;
			НовСтр.СреднийРасходДневной         = ТекВетка.СреднийРасходДневной;
			НовСтр.СреднийРасходНочной          = ТекВетка.СреднийРасходНочной;
			НовСтр.СреднийРасходПиковый         = ТекВетка.СреднийРасходПиковый;
			НовСтр.КоэффициентТрансформации     = ТекВетка.КоэффициентТрансформации;
			НовСтр.ТемпературныйКоэффициент     = ТекВетка.ТемпературныйКоэффициент;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры  //ЗаполнитьТЧПоДереву()

&НаСервере
// Очищает дерево значений и ТЧ документа.
Процедура ОчиститьТЧ()
	
	ТЗДеревоПоказаний = РеквизитФормыВЗначение("ДеревоПоказаний", Тип("ДеревоЗначений"));
	ТЗДеревоПоказаний.Строки.Очистить();
	ЗначениеВРеквизитФормы(ТЗДеревоПоказаний, "ДеревоПоказаний");
	
	// Рчистку табличной части 
	Если ВыполнятьОчисткуТабличнойЧасти Тогда
		Объект.Главная.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Устанавливает отбор услуг в справочнике "Услуги".
Функция ПолучитьФормуВыбораУслуг(Элемент)
	
	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме"));
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора",
							Новый Структура("ТекущаяСтрока, ОтображатьСписком", Объект.Услуга, Истина), Элемент);
	Форма.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, "ЭтоГруппа", Ложь,
										 ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "СпособРасчета", Список,
										 					ВидСравненияКомпоновкиДанных.ВСписке, , Истина,
															РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	Возврат Форма;

КонецФункции // ПолучитьФормуВыбораУслуг()

&НаСервере
// Процедура выполняет сортировку табличных частей.
//
Процедура СортироватьТЧНаСервере(ИмяТЧ, ИмяКолонкиИсх, ЭтоДерево, ПоВозрастанию)
	
	ИмяКолонки = Прав(ИмяКолонкиИсх, СтрДлина(ИмяКолонкиИсх) - СтрДлина(ИмяТЧ));
	Если Найти(ИмяКолонки, "ВводНачальных") > 0 Тогда
		ИмяКолонки = СтрЗаменить(ИмяКолонки, "ВводНачальных", "");
	КонецЕсли;
	
	ДанныеФормы = ДанныеФормыВЗначение(ЭтотОбъект[ИмяТЧ], Тип("ДеревоЗначений"));
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	УПЖКХ_ОбщегоНазначенияСервер.СортироватьТабличнуюЧасть(ДокОбъект, ИмяТЧ, ДанныеФормы, ИмяКолонки, ПоВозрастанию, ЭтоДерево);
	
	ЗначениеВДанныеФормы(ДанныеФормы, ЭтотОбъект[ИмяТЧ]);
	
КонецПроцедуры // СортироватьТЧНаСервере()

&НаСервере
// Процедура удаляет строки дерева, в которых имеются счетчики со способом регистрации
// показаний "За период расчета".
Функция ПолучитьСчетчикиИзДереваСОтборомПоСпособуРегистрацииПоказаний()
	
	Если ДеревоПоказаний.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ДеревоПоказаний");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДеревоПоказаний", Дерево);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДеревоПоказаний.Счетчик
	|ПОМЕСТИТЬ втСчетчики
	|ИЗ
	|	&ДеревоПоказаний КАК ДеревоПоказаний
	|;
	|ВЫБРАТЬ
	|	втСчетчики.Счетчик
	|ИЗ
	|	втСчетчики КАК втСчетчики
	|ГДЕ
	|	Счетчик.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	СписокСчетчиков = Новый СписокЗначений;
	СписокСчетчиков.ЗагрузитьЗначения(Результат.ВыгрузитьКолонку("Счетчик"));
	
	Возврат СписокСчетчиков;
	
КонецФункции // ПолучитьСчетчикиИзДереваСОтборомПоСпособуРегистрацииПоказаний()
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
// Процедура формирования документа "Корректировка начислений" по отрицательным показаниям приборов учета.
//
Процедура СформироватьДокументКорректировкиНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.СформироватьДокументКорректировки(ДокументКорректировкаНачислений);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры // СформироватьДокументКорректировкиНаСервере()

&НаКлиентеНаСервереБезКонтекста
// Процедура заполняет представление ссылки на корректировку реализации, если она сформирована.
//
Процедура ЗаполнитьПредставлениеСсылкиНаКорректировкуНачислений(Форма)
	
	Если Не Форма.ДокументКорректировкаНачислений.Пустая() Тогда
		Форма.НадписьКорректировкаНачислений = ПолучитьПредставлениеКорректировкиНачислений(Форма.ДокументКорректировкаНачислений);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает представление документа "Корректировка начислений".
//
Функция ПолучитьПредставлениеКорректировкиНачислений(ДокументКорректировкиНачислений)
	
	Возврат "" + ДокументКорректировкиНачислений.Номер
		  + " от " + Формат(ДокументКорректировкиНачислений.Дата, "ДФ=dd.MM.yyyy");
	
КонецФункции

&НаКлиенте
// Определяет значение переменной СортироватьПоИсходномуНомеруСтроки,
// устанавливающей вид сортировки ТЧ Главная.
//
Функция ОпределитьНеобходимостьСортировкиТабличнойЧастиПоИсходномуНомеруСтроки()
	
	// Если количество записей в ТЧ "Главная" после выполнения команды больше 0,
	// тогда в процедуре "ЗаполнитьДеревоПоказаний" производится сортировка
	// по исходному номеру строки.
	Если Объект.Главная.Количество() Тогда
		СортироватьПоИсходномуНомеруСтроки = Истина;
	Иначе
		СортироватьПоИсходномуНомеруСтроки = Ложь;
	КонецЕсли;
	
	Возврат СортироватьПоИсходномуНомеруСтроки;
	
КонецФункции

&НаСервере
// Изменяет порядок строк в "Таблице счетчиков": меняется расположение строк с одинаковыми счетчикам.
// Такие строки располагаются в таблице друг за другом.
// 
// Параметры:
//  ТаблицаСчетчиков      - Таблица значений        - содержит данные о установленном счетчике, его показаниях,
//							и соответствующем ему объекте для формирования дерева показаний.
//  ТекущаяСтрокаСчетчика - Строка таблицы значений - содержит информацию о текущей строке таблицы значений "ТаблицаСчетчиков".
//  ВсеСтрокиСчетчика     - Массив                  - массив строк таблицы значений "Таблица счетчиков",
//							включающий строки, в которых указан тот же счетчик, что и в строке "ТекущаяСтрокаСчетчика".
Процедура СгруппироватьСтрокиСОднимСчетчикомВТаблицеСчетчиков(ТаблицаСчетчиков, ТекущаяСтрокаСчетчика, ВсеСтрокиСчетчика)
	
		// В массиве ВсеСтрокиСчетчика строки с повторяющимися счетчиками расположены в порядке, аналогичном Таблице счетчиков,
		// поэтому в данном алгоритме изменение порядка строк производится следующим образом: последовательно сдвигаются строки,
		// следующие в массиве "ВсеСтрокиСчетчика" и в таблице значений "ТаблицаСчетчиков" за текущей строкой таким образом, чтобы
		// в "Таблице счетчиков" такие строки распологались одна за другой в таком же порядке, что и в массиве "ВсеСтрокиСчетчика".
		Для Итератор = (ВсеСтрокиСчетчика.Найти(ТекущаяСтрокаСчетчика) + 1) По (ВсеСтрокиСчетчика.Количество() - 1) Цикл
			
			ТаблицаСчетчиков.Сдвинуть(ВсеСтрокиСчетчика[Итератор],
										(ТаблицаСчетчиков.Индекс(ВсеСтрокиСчетчика[0]) - ТаблицаСчетчиков.Индекс(ВсеСтрокиСчетчика[Итератор]) + Итератор));
			
		КонецЦикла;
		
		Итератор = 0;
	
КонецПроцедуры  // СгруппироватьСтрокиСОднимСчетчикомВТаблицеСчетчиков()

&НаСервере
// Получает сведения о закрепленных счетчиках, заполняет ими временную таблицу и возвращает их массив.
//
Функция ПолучитьЗакрепленныеСчетчикиДляВыбора()
	
	МассивСчетчиковДляВыбора = Новый Массив;
	
	// Проверяем наличия списка счетчиков в кэше. Если кэша нет или он пуст, то получаем счетчики заново.
	Если ПустаяСтрока(АдресХранилищаКэшаСчетчиков) Тогда
		
		МассивСчетчиковДляВыбора = ПолучитьВсеЗакрепленныеСчетчики();
		
	Иначе
		
		МассивКэшированныхСчетчиков = ПолучитьИзВременногоХранилища(АдресХранилищаКэшаСчетчиков);
		
		Если ТипЗнч(МассивКэшированныхСчетчиков) = Тип("Массив") Тогда
			
			МассивСчетчиковДляВыбора = МассивКэшированныхСчетчиков;
			
		Иначе
			
			МассивСчетчиковДляВыбора = ПолучитьВсеЗакрепленныеСчетчики();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивСчетчиковДляВыбора;
	
КонецФункции

&НаСервере
// Получает сведения обо всех закрепленных счетчиках, заполняет ими временную таблицу и возвращает их массив.
//
Функция ПолучитьВсеЗакрепленныеСчетчики()
	
	ТаблицаЗакрепленныхСчетчиков = ПолучитьСчетчикиНаСервере();
	
	МассивСчетчиков = ТаблицаЗакрепленныхСчетчиков.ВыгрузитьКолонку("Счетчик");
	
	ПоместитьДанныеВКэшСчетчиков(МассивСчетчиков);
	
	Возврат МассивСчетчиков;
	
КонецФункции

&НаСервере
// Помещает данные в кэш данных о счетчиках.
//
Процедура ПоместитьДанныеВКэшСчетчиков(Данные)
	
	АдресХранилищаКэшаСчетчиков = ПоместитьВоВременноеХранилище(Данные, ?(ПустаяСтрока(АдресХранилищаКэшаСчетчиков), УникальныйИдентификатор, АдресХранилищаКэшаСчетчиков));
	
КонецПроцедуры

&НаСервере
// Очищает кэш счетчиков.
//
Процедура СброситьКэшСчетчиков()
	
	ПоместитьДанныеВКэшСчетчиков(Неопределено);
	
КонецПроцедуры

&НаСервере
// Получает структуру со сведениями о предыдущих показаниях счетчиков на основании входящей структуры.
//
Функция ПолучитьСтруктуруПредыдущихПоказанийСчетчика(СтруктураПоказаний)
	
	// 1. Получаем таблицу предыдущих показаний по счетчику.
	ТаблицаОснованиеДляПолученияПредыдущихПоказаний = ПодготовитьТаблицуТекущегоСчетчикаДляОбновленияПредыдущихПоказаний(СтруктураПоказаний);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ТаблицаСчетчика = ДокументОбъект.ПолучитьТаблицуПредыдущихПоказанийСчетчиков(ТаблицаОснованиеДляПолученияПредыдущихПоказаний,,, Ложь);
	
	// 2. Заполняем структуру показаний, если удалось что-то найти.
	Если НЕ ТаблицаСчетчика.Количество() = 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПоказаний, ТаблицаСчетчика[0]);
	КонецЕсли;
	
	Возврат СтруктураПоказаний;
	
КонецФункции

&НаСервере
// Подготавливает таблицу текущего счетчика, предназначенную для обновления его предыдущих показаний.
//
Функция ПодготовитьТаблицуТекущегоСчетчикаДляОбновленияПредыдущихПоказаний(СтруктураПоказаний)
	
	МассивТиповОбъекта = Новый Массив;
	МассивТиповОбъекта.Добавить(Тип("СправочникСсылка.КВП_ЛицевыеСчета"));
	МассивТиповОбъекта.Добавить(Тип("СправочникСсылка.КВП_Здания"));
	МассивТиповОбъекта.Добавить(Тип("СправочникСсылка.КВП_Подъезды"));
	МассивТиповОбъекта.Добавить(Тип("СправочникСсылка.УПЖКХ_Помещения"));
	
	ТаблицаОснованиеДляПолученияПредыдущихПоказаний = Новый ТаблицаЗначений;
	ТаблицаОснованиеДляПолученияПредыдущихПоказаний.Колонки.Добавить("Счетчик",       Новый ОписаниеТипов("СправочникСсылка.КВП_Счетчики"));
	ТаблицаОснованиеДляПолученияПредыдущихПоказаний.Колонки.Добавить("Услуга",        Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаОснованиеДляПолученияПредыдущихПоказаний.Колонки.Добавить("Объект",        Новый ОписаниеТипов(МассивТиповОбъекта));
	ТаблицаОснованиеДляПолученияПредыдущихПоказаний.Колонки.Добавить("ДатаПоказания", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = ТаблицаОснованиеДляПолученияПредыдущихПоказаний.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоказаний);
	
	Возврат ТаблицаОснованиеДляПолученияПредыдущихПоказаний;
	
КонецФункции
// Конец ОпределитьНеобходимостьСортировкиТабличнойЧастиПоИсходномуНомеруСтроки

#КонецОбласти

#Область РаботаСПроцедурамиИФункциямиМодуляОбъекта

&НаСервере
// Процедура заполняет табличную часть на сервере.
Процедура ЗаполнитьТабличнуюЧастьНаСервере(СписокОбъектов, ЗаполнятьТЧ = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ТаблицаЗакрепленныхСчетчиков = ДокументОбъект.ПолучитьЗакрепленныеСчетчики(СписокОбъектов);
	ДокументОбъект.ПолучитьТаблицуПредыдущихПоказанийСчетчиков(ТаблицаЗакрепленныхСчетчиков,,,ЗаполнятьТЧ, ВыполнятьОчисткуТабличнойЧасти);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
// Процедура обновляет табличную часть на сервере.
Процедура ОбновитьТабличнуюЧастьНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ПолучитьТаблицуПредыдущихПоказанийСчетчиков(Объект.Главная.Выгрузить(),, Истина);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
// Возвращает массив счетчиков.
Функция ПолучитьСчетчикиНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат ДокументОбъект.ПолучитьЗакрепленныеСчетчики();
	
КонецФункции

&НаСервере
// Возвращает таблицу счетчиков.
Функция ПолучитьПоказанияСчетчика(Счетчик)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ТаблицаВыбранногоСчетчика = ДокументОбъект.ПолучитьЗакрепленныеСчетчики(, Счетчик);
	
	Возврат ДокументОбъект.ПолучитьТаблицуПредыдущихПоказанийСчетчиков(ТаблицаВыбранногоСчетчика,,, Ложь);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОтраженияИтогов

&НаКлиенте
// Процедура, формирует итогаи по объемам потребления услуг и заполняет ими подвал.
Процедура ВывестиИтогиВПодвале()
	
	// Получаем элементы дерева показаний.
	ЭлементыДереваПоказаний = ДеревоПоказаний.ПолучитьЭлементы();
	
	// Если ввод показаний осуществляется по одной услуге.
	Если ПоказанияПоОднойУслуге(ЭлементыДереваПоказаний) Тогда
		
		// Получаем итоги
		ИтогДн = 0;      ИтогПриведДн = 0;
		ИтогНч = 0;      ИтогПриведНч = 0;
		ИтогПк = 0;      ИтогПриведПк = 0;
		
		Для каждого ТекСтрока из ЭлементыДереваПоказаний Цикл
			
			ИтогДн = ИтогДн + ТекСтрока.ДневноеПоказаниеРасход;
			ИтогНч = ИтогНч + ТекСтрока.НочноеПоказаниеРасход;
			ИтогПк = ИтогПк + ТекСтрока.ПиковоеПоказаниеРасход;
			
			ИтогПриведДн = ИтогПриведДн + ТекСтрока.ДневноеПоказаниеРасходПриведенный;
			ИтогПриведНч = ИтогПриведНч + ТекСтрока.НочноеПоказаниеРасходПриведенный;
			ИтогПриведПк = ИтогПриведПк + ТекСтрока.ПиковоеПоказаниеРасходПриведенный;
			
		КонецЦикла;
		
		// Сравниваем полученные итоги с имеющимися данными.
		// Если они не совпадают, то обновляем значение в подвале.
		Если НЕ ИтоговыйРасходДн = ИтогДн
		 ИЛИ НЕ ИтоговыйРасходНч = ИтогНч
		 ИЛИ НЕ ИтоговыйРасходПк = ИтогПк 
		 ИЛИ НЕ ИтоговыйРасходПриведДн = ИтогПриведДн
		 ИЛИ НЕ ИтоговыйРасходПриведНч = ИтогПриведНч
		 ИЛИ НЕ ИтоговыйРасходПриведПк = ИтогПриведПк Тогда
			
			ИтоговыйРасходДн = ИтогДн;
			ИтоговыйРасходНч = ИтогНч;
			ИтоговыйРасходПк = ИтогПк;
			
			ИтоговыйРасходПриведДн = ИтогПриведДн;
			ИтоговыйРасходПриведНч = ИтогПриведНч;
			ИтоговыйРасходПриведПк = ИтогПриведПк;
			
		КонецЕсли;
		
	Иначе
		// Если ввод показаний осуществляется по нескольким услугам,
		// то обнуляем данные итогов.
		ИтоговыйРасходДн = 0;
		ИтоговыйРасходНч = 0;
		ИтоговыйРасходПк = 0;
		
		ИтоговыйРасходПриведДн = 0;
		ИтоговыйРасходПриведНч = 0;
		ИтоговыйРасходПриведПк = 0;
		
	КонецЕсли;
	
КонецПроцедуры // ВывестиИтогиВПодвале()

&НаКлиенте
// Функция, проверяет, ввод показаний в документе осуществляется по одной услуге или по нескольким.
//
// Возвращаемое значение:
//  - булево - Истина - ввод показаний осуществляется по одной услуге.
//           - Ложь   - ввод показаний осуществляется по нескольким услугам.
//
Функция ПоказанияПоОднойУслуге(ЭлементыДереваПоказаний)
	
	Если ЭлементыДереваПоказаний.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ТекУслуга = Неопределено;
		
		Для каждого ТекСтрока из ЭлементыДереваПоказаний Цикл
			Если ТекУслуга = Неопределено Тогда
				ТекУслуга = ТекСтрока.Услуга;
			ИначеЕсли НЕ ТекУслуга = ТекСтрока.Услуга Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПоказанияПоОднойУслуге()

#КонецОбласти

