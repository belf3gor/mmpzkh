
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЭкспортныеПроцедурыИФункцииДокумента

// Процедура формирования документа "Корректировка начислений" по отрицательным показаниям приборов учета.
//
// Параметры:
//  ДокументКорректировкиСсылка - Показатель того, что корректировка сформирована, а также
//                                для информирования пользователя о созданном документе.
//
Процедура СформироватьДокументКорректировки(ДокументКорректировкиСсылка = Неопределено, Отказ = Ложь) Экспорт
	
	// Из табличной части "Главная" выгрузим только счетчики, в которых установлена корректность показаний.
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПоказанияКорректны", Истина);
	
	ТаблицаСчетчиковИсходная = Главная.Выгрузить(ПараметрыОтбора);
	
	ТаблицаСчетчиковИсходная.Колонки.Добавить("ТекДневноеПоказание");
	ТаблицаСчетчиковИсходная.Колонки.Добавить("ТекНочноеПоказание");
	ТаблицаСчетчиковИсходная.Колонки.Добавить("ТекПиковоеПоказание");
	
	// Основная таблица счетчиков, с которой будем работать. В ней будут находиться только счетчики с отрицательным расходом.
	ТаблицаСчетчиков = ТаблицаСчетчиковИсходная.СкопироватьКолонки();
	
	Для Каждого СтрокаСчетчика Из ТаблицаСчетчиковИсходная Цикл
		
		СтрокаСчетчика.ТекДневноеПоказание = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(СтрокаСчетчика, "ДневноеПоказание", Ложь);
		СтрокаСчетчика.ТекНочноеПоказание  = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(СтрокаСчетчика, "НочноеПоказание",  Ложь);
		СтрокаСчетчика.ТекПиковоеПоказание = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(СтрокаСчетчика, "ПиковоеПоказание", Ложь);
		
		// Среди всех ошибочных строк оставим только строки с отрицательным расходом.
		Если СтрокаСчетчика.ТекДневноеПоказание < 0 Или СтрокаСчетчика.ТекНочноеПоказание < 0
			Или СтрокаСчетчика.ТекПиковоеПоказание < 0 Тогда
			
			СтрокаСОтрицательнымРасходом = ТаблицаСчетчиков.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСОтрицательнымРасходом, СтрокаСчетчика);
			
			// Обнулим показания с положительным расходом.
			Если СтрокаСОтрицательнымРасходом.ТекДневноеПоказание > 0 Тогда
				СтрокаСОтрицательнымРасходом.ТекДневноеПоказание = 0;
			КонецЕсли;
			
			Если СтрокаСОтрицательнымРасходом.ТекНочноеПоказание > 0 Тогда
				СтрокаСОтрицательнымРасходом.ТекНочноеПоказание = 0;
			КонецЕсли;
			
			Если СтрокаСОтрицательнымРасходом.ТекПиковоеПоказание > 0 Тогда
				СтрокаСОтрицательнымРасходом.ТекПиковоеПоказание = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивТиповОбъекта = Новый Массив;
	МассивТиповОбъекта.Добавить(Тип("СправочникСсылка.КВП_ЛицевыеСчета"));
	МассивТиповОбъекта.Добавить(Тип("СправочникСсылка.УПЖКХ_Помещения"));
	
	// Создадим пустую таблицу значений - таблицу расчета. В ней рассчитаем показания с учетом всех коэффициентов и долей
	// показаний, в случае, если счетчик установлен на несколько объектов. Алгоритм заполнения данной таблицы аналогичен
	// алгоритму получения таблицы расчета при проведении документа с одним отличием: данные заполняем без учета разреза
	// видов показаний.
	
	ТаблицаРасчета = Новый ТаблицаЗначений;
	ТаблицаРасчета.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаРасчета.Колонки.Добавить("Объект",      Новый ОписаниеТипов(МассивТиповОбъекта));
	ТаблицаРасчета.Колонки.Добавить("Счетчик",     Новый ОписаниеТипов("СправочникСсылка.КВП_Счетчики"));
	ТаблицаРасчета.Колонки.Добавить("Услуга",      Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаРасчета.Колонки.Добавить("Объем",       УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(18, 6));
	ТаблицаРасчета.Колонки.Добавить("Период",      УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаРасчета.Колонки.Добавить("ВидТарифа",   Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
	
	Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
		
		Если (СтрокаСчетчика.ТекДневноеПоказание = 0 И СтрокаСчетчика.ТекНочноеПоказание = 0 
		   И СтрокаСчетчика.ТекПиковоеПоказание = 0) ИЛИ СтрокаСчетчика.КоэффициентЧислитель = 0 ИЛИ СтрокаСчетчика.КоэффициентЗнаменатель = 0
		 ИЛИ СтрокаСчетчика.КоэффициентТрансформации = 0  ИЛИ СтрокаСчетчика.ТемпературныйКоэффициент = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПриведенныйКоэффициент  = СтрокаСчетчика.КоэффициентТрансформации
								* СтрокаСчетчика.ТемпературныйКоэффициент
								* СтрокаСчетчика.КоэффициентЧислитель
								/ СтрокаСчетчика.КоэффициентЗнаменатель;
		
								
		ПоказаниеДн  = СтрокаСчетчика.ТекДневноеПоказание * ПриведенныйКоэффициент;
		ПоказаниеНч  = СтрокаСчетчика.ТекНочноеПоказание  * ПриведенныйКоэффициент;
		ПоказаниеПик = СтрокаСчетчика.ТекПиковоеПоказание * ПриведенныйКоэффициент;
		
		Если ПоказаниеДн < 0 Тогда
			НоваяСтрока           = ТаблицаРасчета.Добавить();
			НоваяСтрока.Объект    = СтрокаСчетчика.Объект;
			НоваяСтрока.Услуга    = СтрокаСчетчика.Услуга;
			НоваяСтрока.Счетчик   = СтрокаСчетчика.Счетчик;
			НоваяСтрока.ВидТарифа = Перечисления.КВП_ВидыТарифов.Дневной;
			НоваяСтрока.Объем     = ПоказаниеДн;
			НоваяСтрока.Период    = СтрокаСчетчика.ДатаПоказания;
		КонецЕсли;
		
		Если ПоказаниеНч < 0 Тогда
			НоваяСтрока           = ТаблицаРасчета.Добавить();
			НоваяСтрока.Объект    = СтрокаСчетчика.Объект;
			НоваяСтрока.Услуга    = СтрокаСчетчика.Услуга;
			НоваяСтрока.Счетчик   = СтрокаСчетчика.Счетчик;
			НоваяСтрока.ВидТарифа = Перечисления.КВП_ВидыТарифов.Ночной;
			НоваяСтрока.Объем     = ПоказаниеНч;
			НоваяСтрока.Период    = СтрокаСчетчика.ДатаПоказания;
		КонецЕсли;
		
		Если ПоказаниеПик < 0 Тогда
			НоваяСтрока           = ТаблицаРасчета.Добавить();
			НоваяСтрока.Объект    = СтрокаСчетчика.Объект;
			НоваяСтрока.Услуга    = СтрокаСчетчика.Услуга;
			НоваяСтрока.Счетчик   = СтрокаСчетчика.Счетчик;
			НоваяСтрока.ВидТарифа = Перечисления.КВП_ВидыТарифов.Пиковый;
			НоваяСтрока.Объем     = ПоказаниеПик;
			НоваяСтрока.Период    = СтрокаСчетчика.ДатаПоказания;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если показаний с отрицательным расходом нет, то корректировку начислений не формируем.
	Если ТаблицаРасчета.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документ ""Корректировка начислений"" не сформирован: нет показаний с отрицательным расходом!", Отказ);
		Возврат;
	КонецЕсли;
	
	// Заканчиваем формирование исходной таблицы - для счетчиков,
	// установленных на помещения, получаем соответствующие лицевые счета.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРасчета.Объект,
	|	ТаблицаРасчета.Услуга,
	|	ТаблицаРасчета.Счетчик,
	|	ТаблицаРасчета.Период,
	|	ТаблицаРасчета.ВидТарифа,
	|	ТаблицаРасчета.Объем
	|ПОМЕСТИТЬ втТаблицаРасчета
	|ИЗ
	|	&ТаблицаРасчета КАК ТаблицаРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение
	|ПОМЕСТИТЬ втЛицевыеСчетаПоПомещениям
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Адрес В
	|			(ВЫБРАТЬ
	|				втТаблицаРасчета.Объект
	|			ИЗ
	|				втТаблицаРасчета КАК втТаблицаРасчета
	|			ГДЕ
	|				втТаблицаРасчета.Объект ССЫЛКА Справочник.УПЖКХ_Помещения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втТаблицаРасчета.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА втТаблицаРасчета.Объект
	|		КОГДА втТаблицаРасчета.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА втЛицевыеСчетаПоПомещениям.ЛицевойСчет
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
	|	КОНЕЦ КАК ЛицевойСчет,
	|	втТаблицаРасчета.Услуга,
	|	втТаблицаРасчета.Счетчик,
	|	втТаблицаРасчета.ВидТарифа,
	|	втТаблицаРасчета.Период КАК ПериодПоказания,
	|	-втТаблицаРасчета.Объем КАК Объем
	|ИЗ
	|	втТаблицаРасчета КАК втТаблицаРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчетаПоПомещениям КАК втЛицевыеСчетаПоПомещениям
	|		ПО втТаблицаРасчета.Объект = втЛицевыеСчетаПоПомещениям.Помещение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодПоказания УБЫВ";
	
	Запрос.УстановитьПараметр("ТаблицаРасчета", ТаблицаРасчета);
	
	// Исходная таблица, которую будем использовать для получения объемов и сумм корректируемых начислений.
	ТаблицаКорректируемогоРасхода = Запрос.Выполнить().Выгрузить();
	
	// Получим дату самого раннего и самого позднего корректируемого показания.
	// Дата самого позднего показания будет датой, ДО которой будем получать обороты из регистра "Начисления".
	// От даты самого раннего показания отсчитаем 1 год, это будет дата, С которой будем получать обороты.
	
	// Допущение 1 (по отсутствию начислений):
	// Считаем, что если начислений по показаниям приборов учета не было более года, то значит их не было совсем.
	// Обороты за более ранние периоды не получаем.
	// В этом случае корректировку относим к текущему месяцу, в котором введены показания.
	
	// Допущение 2 (по оптимальности):
	// Поскольку по каждому счетчику может быть установлена своя дата показания, возможно получение "лишних" оборотов
	// по некоторым счетчикам, так как дату начала и дату конца периода мы берем единую для всех счетчиков, чтобы
	// выполнить запрос по получению оборотов только 1 раз.
	// Например, в одном документе введены показания по счетчику 1 - за январь 2017г., по счетчику 2 - за апрель 2017г.,
	// по счетчику 3 - за июнь 2017г. В таком случае обороты будем получать с января 2016 года (на год раньше даты самого раннего
	// показания) по июнь 2017 года (дата самого позднего показания).
	
	ТаблицаПериодов = ТаблицаКорректируемогоРасхода.Скопировать();
	ТаблицаПериодов.Свернуть("ПериодПоказания");
	КонецПериода = ТаблицаПериодов[0].ПериодПоказания;
	Если ТаблицаПериодов.Количество() = 1 Тогда
		НачалоПериода = ДобавитьМесяц(КонецПериода, -12);
	Иначе
		КоличествоПериодов = ТаблицаПериодов.Количество();
		ПоследнийПериод = ТаблицаПериодов[КоличествоПериодов - 1].ПериодПоказания;
		НачалоПериода = ДобавитьМесяц(ПоследнийПериод, -12);
	КонецЕсли;
	
	МассивРазделовУчета = Новый Массив;
	МассивРазделовУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ);
	
	МассивВидовНачисления = Новый Массив;
	МассивВидовНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоИПУ);
	
	// Получим организацию по действию услуги на лицевых счетах, к которым относятся счетчики.
	МассивЛицевыхСчетов = ТаблицаКорректируемогоРасхода.ВыгрузитьКолонку("ЛицевойСчет");
	МассивУслуг = ТаблицаКорректируемогоРасхода.ВыгрузитьКолонку("Услуга");
	
	// Получаем организацию корректировки начислений по действующим на лицевых счетах услугам приборов учета.
	// Если организацию не получили, то формирование документа корректировки начислений прекращаем.
	ОрганизацияКорректировкиНачислений = ПолучитьОрганизациюДляДокументаКорректировкиПоказаний(Дата, МассивЛицевыхСчетов, МассивУслуг, Отказ);
	Если Отказ Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документ ""Корректировка начислений"" не сформирован: не удалось получить организацию для корректировки начислений!");
		Возврат;
	КонецЕсли;
	
	// Алгоритм получения данных для корректировки.
	// 1. В качестве входящей таблицы используем подготовленную таблицу "ТаблицаКорректируемогоРасхода".
	// 2. Так как по лицевому счету по одной услуге может быть установлено несколько счетчиков, сгруппируем
	// данные для получения суммарного объема к корректировке по лицевому счету, услуге и виду тарифа.
	// Считаем, что даты показания таких счетчиков если и могут отличаться, то только в рамках одного месяца.
	// Поэтому при группировке дату показания берем максимальную, так как корректировка выполняется в разрезе месяцев.
	// 3. Получаем обороты по регистру "Начисления" с периодичностью "Месяц" в разрезе лицевого счета и услуги
	// из таблицы с сгруппированными данными.
	// 4. Соединяем таблицу с сгруппированными данными и таблицу начислений по услуге и лицевому счету.
	// В таблице должны быть все лицевые счета из исходной таблицы, поэтому используем ЛЕВОЕ соединение.
	// При этом, начислений по этим л/с теоретически может не быть.
	// 5. Отсекаем периоды начислений, которые больше или равны дате показания, так как корректировки должны производиться
	// за более ранние месяцы.
	// 6. Используется сортировка по месяцу начисления по убыванию (метод LIFO - сначала списываем более поздние
	// начисления, постепенно "спускаясь" к более ранним).
	// 7 Конечную таблицу берем с итогами по лицевому счету для удобства дальнейшего обхода.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКорректируемогоРасхода",      ТаблицаКорректируемогоРасхода);
	Запрос.УстановитьПараметр("ОрганизацияКорректировкиНачислений", ОрганизацияКорректировкиНачислений);
	Запрос.УстановитьПараметр("РазделыУчета",                       МассивРазделовУчета);
	Запрос.УстановитьПараметр("ВидыНачисления",                     МассивВидовНачисления);
	Запрос.УстановитьПараметр("НачалоПериода",                      НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",                       КонецМесяца(КонецПериода));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаКорректируемогоРасхода.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаКорректируемогоРасхода.Услуга КАК Услуга,
	|	ТаблицаКорректируемогоРасхода.ПериодПоказания КАК ПериодПоказания,
	|	ТаблицаКорректируемогоРасхода.ВидТарифа КАК ВидТарифа,
	|	ТаблицаКорректируемогоРасхода.Объем КАК Объем
	|ПОМЕСТИТЬ втТаблицаКорректируемогоРасхода
	|ИЗ
	|	&ТаблицаКорректируемогоРасхода КАК ТаблицаКорректируемогоРасхода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаКорректируемогоРасхода.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаКорректируемогоРасхода.Услуга КАК Услуга,
	|	МАКСИМУМ(втТаблицаКорректируемогоРасхода.ПериодПоказания) КАК ПериодПоказания,
	|	втТаблицаКорректируемогоРасхода.ВидТарифа КАК ВидТарифа,
	|	СУММА(втТаблицаКорректируемогоРасхода.Объем) КАК Объем
	|ПОМЕСТИТЬ втТаблицаКорректируемогоРасходаГруппировка
	|ИЗ
	|	втТаблицаКорректируемогоРасхода КАК втТаблицаКорректируемогоРасхода
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаКорректируемогоРасхода.ЛицевойСчет,
	|	втТаблицаКорректируемогоРасхода.ВидТарифа,
	|	втТаблицаКорректируемогоРасхода.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа КАК ВидТарифа,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК Количество,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаНачисленияОборот,
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления КАК МесяцНачисления
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Месяц,
	|			РазделУчета В (&РазделыУчета)
	|				И ВидНачисления В (&ВидыНачисления)
	|				И Организация = &ОрганизацияКорректировкиНачислений
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втТаблицаКорректируемогоРасходаГруппировка.ЛицевойСчет КАК ЛицевойСчет,
	|						втТаблицаКорректируемогоРасходаГруппировка.Услуга КАК Услуга
	|					ИЗ
	|						втТаблицаКорректируемогоРасходаГруппировка КАК втТаблицаКорректируемогоРасходаГруппировка)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаКорректируемогоРасходаГруппировка.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаКорректируемогоРасходаГруппировка.Услуга КАК Услуга,
	|	втТаблицаКорректируемогоРасходаГруппировка.ВидТарифа КАК ВидТарифа,
	|	втТаблицаКорректируемогоРасходаГруппировка.Объем КАК ОбъемККорректировке,
	|	втТаблицаКорректируемогоРасходаГруппировка.ПериодПоказания КАК ПериодПоказания,
	|	ЕСТЬNULL(втНачисления.МесяцНачисления, ДАТАВРЕМЯ(1, 1, 1)) КАК МесяцНачисления,
	|	ЕСТЬNULL(втНачисления.Количество, 0) КАК ОбъемНачисления,
	|	ЕСТЬNULL(втНачисления.СуммаНачисленияОборот, 0) КАК СуммаНачисления
	|ПОМЕСТИТЬ втНачисленияСКорректировками
	|ИЗ
	|	втТаблицаКорректируемогоРасходаГруппировка КАК втТаблицаКорректируемогоРасходаГруппировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
	|		ПО (втНачисления.ЛицевойСчет = втТаблицаКорректируемогоРасходаГруппировка.ЛицевойСчет)
	|			И (втНачисления.Услуга = втТаблицаКорректируемогоРасходаГруппировка.Услуга)
	|			И втТаблицаКорректируемогоРасходаГруппировка.ВидТарифа = втНачисления.ВидТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияСКорректировками.ЛицевойСчет КАК ЛицевойСчет,
	|	втНачисленияСКорректировками.Услуга КАК Услуга,
	|	втНачисленияСКорректировками.ОбъемККорректировке КАК ОбъемККорректировке,
	|	втНачисленияСКорректировками.ПериодПоказания КАК ПериодПоказания,
	|	втНачисленияСКорректировками.ВидТарифа КАК ВидТарифа,
	|	втНачисленияСКорректировками.МесяцНачисления КАК МесяцНачисления,
	|	втНачисленияСКорректировками.ОбъемНачисления КАК ОбъемНачисления,
	|	втНачисленияСКорректировками.СуммаНачисления КАК СуммаНачисления
	|ИЗ
	|	втНачисленияСКорректировками КАК втНачисленияСКорректировками
	|ГДЕ
	|	КОНЕЦПЕРИОДА(втНачисленияСКорректировками.МесяцНачисления, МЕСЯЦ) <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(втНачисленияСКорректировками.ПериодПоказания, МЕСЯЦ, -1), МЕСЯЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	МесяцНачисления УБЫВ
	|ИТОГИ ПО
	|	ЛицевойСчет,
	|	ВидТарифа,
	|	Услуга";
	
	ВыборкаУровеньЛС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Сделаем заготовку таблицы корректировки, которую будем использовать для заполнения документа.
	ТаблицаКорректировки = Новый ТаблицаЗначений;
	ТаблицаКорректировки.Колонки.Добавить("ЛицевойСчет",      Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаКорректировки.Колонки.Добавить("Услуга",           Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаКорректировки.Колонки.Добавить("МесяцНачисления",  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаКорректировки.Колонки.Добавить("СуммаНачисления",  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(9, 2));
	
	Пока ВыборкаУровеньЛС.Следующий() Цикл
		
		ВыборкаУровеньВидовТарифов = ВыборкаУровеньЛС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУровеньВидовТарифов.Следующий() Цикл
			
			ВыборкаУровеньУслуг = ВыборкаУровеньВидовТарифов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаУровеньУслуг.Следующий() Цикл
				
				ОстатокОбъемаКСписанию = 0;
				
				ВыборкаУровеньНачислений = ВыборкаУровеньУслуг.Выбрать();
				Пока ВыборкаУровеньНачислений.Следующий() Цикл
					
					Если ОстатокОбъемаКСписанию = 0 Тогда
						// Это уменьшаемый остаток корректируемого объема начислений
						ОстатокОбъемаКСписанию = ВыборкаУровеньНачислений.ОбъемККорректировке;
					КонецЕсли;
					
					Если ВыборкаУровеньНачислений.ОбъемНачисления = 0 И ВыборкаУровеньНачислений.СуммаНачисления = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// Если объем к корректировке превышает текущий объем, берем полную сумму начисления, а остаток объема уменьшаем
					// на списываемый объем.
					Если ОстатокОбъемаКСписанию > ВыборкаУровеньНачислений.ОбъемНачисления Тогда
						
						НоваяСтрока = ТаблицаКорректировки.Добавить();
						НоваяСтрока.ЛицевойСчет     = ВыборкаУровеньЛС.ЛицевойСчет;
						НоваяСтрока.Услуга          = ВыборкаУровеньНачислений.Услуга;
						НоваяСтрока.МесяцНачисления = ВыборкаУровеньНачислений.МесяцНачисления;
						НоваяСтрока.СуммаНачисления = ВыборкаУровеньНачислений.СуммаНачисления;
						
						ОстатокОбъемаКСписанию = ОстатокОбъемаКСписанию - ВыборкаУровеньНачислений.ОбъемНачисления;
						
					Иначе
						
						НоваяСтрока = ТаблицаКорректировки.Добавить();
						НоваяСтрока.ЛицевойСчет     = ВыборкаУровеньЛС.ЛицевойСчет;
						НоваяСтрока.Услуга          = ВыборкаУровеньНачислений.Услуга;
						НоваяСтрока.МесяцНачисления = ВыборкаУровеньНачислений.МесяцНачисления;
						
						// Сумму начисления корректируем пропорционально оставшемуся объему.
						// Например, объем начисления 12, сумма 1200. Осталось откорректировать 4 единицы.
						// Тогда корректируемая сумма начисления будет 4 * 1200 / 12 = 400.
						НоваяСтрока.СуммаНачисления = ОстатокОбъемаКСписанию * ВыборкаУровеньНачислений.СуммаНачисления / ВыборкаУровеньНачислений.ОбъемНачисления;
						
						// Весь объем откорректировали полностью, можно обнулить остаток и выйти из внутреннего цикла.
						ОстатокОбъемаКСписанию = 0;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				// Если не весь объем удалось скорректировать за счет начислений прошлых периодов, тогда
				// оставшийся объем отнесем на текущий период. Данные о периоде и услуге возьмем из исходной
				// таблицы расчета показаний.
				Если ОстатокОбъемаКСписанию > 0 Тогда
					
					Отбор = Новый Структура;
					Отбор.Вставить("ЛицевойСчет", ВыборкаУровеньЛС.ЛицевойСчет);
					Отбор.Вставить("ВидТарифа",   ВыборкаУровеньВидовТарифов.ВидТарифа);
					
					НайденныеСтроки = ТаблицаКорректируемогоРасхода.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						Период = НайденныеСтроки[0].ПериодПоказания;
						Услуга = НайденныеСтроки[0].Услуга;
						
						// Сумму рассчитаем исходя из тарифа на текущую дату показания.
						Тариф = ПолучитьТарифПоЛицевомуСчету(Период, ОрганизацияКорректировкиНачислений, Услуга, ВыборкаУровеньЛС.ЛицевойСчет, ВыборкаУровеньВидовТарифов.ВидТарифа);
						Если ТипЗнч(Тариф) = Тип("Число") И Тариф > 0 Тогда
						
							НоваяСтрока = ТаблицаКорректировки.Добавить();
							НоваяСтрока.ЛицевойСчет     = ВыборкаУровеньЛС.ЛицевойСчет;
							НоваяСтрока.Услуга          = Услуга;
							НоваяСтрока.МесяцНачисления = Период;
							НоваяСтрока.СуммаНачисления = ОстатокОбъемаКСписанию * Тариф;
							
						Иначе
							УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документ ""Корректировка начислений"" не сформирован: не удалось получить организацию для корректировки начислений!", Отказ);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Если в процессе заполнения документа возникли ошибки, то прекращаем формирование.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Разрез видов тарифов при корректировке не учитываем, поэтому свернем таблицу корректировки по месяцу начисления.
	ТаблицаКорректировки.Свернуть("ЛицевойСчет, Услуга, МесяцНачисления", "СуммаНачисления");
	
	// Подготовили таблицу корректировки, теперь можно заполнять документ корректировки.
	// Если ссылка на документ уже заполнена, то перезаполняем документ. В противном случае создаем новый.
	СсылкаКорректировка = УПЖКХ_ВводПоказанийПриборовУчетаСервер.НайтиПодчиненныйДокументКорректировкаНачислений(Ссылка);
	Если СсылкаКорректировка.Пустая()Тогда
		ДокументКорректировкаНачислений = Документы.КВП_КорректировкаНачислений.СоздатьДокумент();
	Иначе
		
		
		ДокументКорректировкаНачислений = СсылкаКорректировка.ПолучитьОбъект();
		ДокументКорректировкаНачислений.Корректировки.Очистить();
		
	КонецЕсли;
	
	ДокументКорректировкаНачислений.ДокументОснование    = Ссылка;
	ДокументКорректировкаНачислений.Дата                 = Дата;
	ДокументКорректировкаНачислений.ВидОперации          = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений;
	
	// Закомментировано до тех пор, пока не будут перенесены доработки по Донстрою по новому механизму отражения в регл. учете.
	//ДокументКорректировкаНачислений.ВидКорректировки     = Перечисления.УПЖКХ_ВидыКорректировокДляОтраженияВРеглУчете.Перерасчет;
	
	ДокументКорректировкаНачислений.Организация          = ОрганизацияКорректировкиНачислений;
	ДокументКорректировкаНачислений.ВариантНачисления    = Перечисления.УПЖКХ_ВариантыНачисленийДляПерерасчета.ВсеНачисления;
	ДокументКорректировкаНачислений.Услуга               = Услуга;
	ДокументКорректировкаНачислений.ОснованиеПерерасчета = "Корректировка";
	
	ДокументКорректировкаНачислений.Комментарий   = "#Документ сформирован автоматически из документа ""Ввод показаний счетчиков"" при корректировке отрицательного расхода приборов учета.";
	ДокументКорректировкаНачислений.Ответственный = Ответственный;
	
	Для Каждого ТекСтрокаКорректировки Из ТаблицаКорректировки Цикл
		
		СтрокаТЧ = ДокументКорректировкаНачислений.Корректировки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТекСтрокаКорректировки);
		
		// Сумма корректировки должна быть отрицательная.
		СтрокаТЧ.СуммаНачисления = - ТекСтрокаКорректировки.СуммаНачисления;
		
	КонецЦикла;
	
	ДокументКорректировкаНачислений.Корректировки.Сортировать("ЛицевойСчет, МесяцНачисления");
	
	// Алгоритм записи следующий:
	// 1. Запись производим в транзакции.
	// 2. Сначала записываем и проводим документ корректировки начислений (сформированный или перезаполненный).
	// 3. Если запись произошла удачно, записываем ссылку на документ корректировки в соответствующий реквизит. Если неудачно,
	// то откатываем транзакцию.
	// 4. Перепроводим текущий документ ввода показаний. Перепроведение необходимо для формирования новых движений по регистру
	// расчета показаний ПУ - при сформированном документе корректировки в движения не должны попадать счетчики с отрицательным расходом.
	// 5. Если всё записалось удачно, то фиксируем транзакцию, в противном случае откатываем.
	ДокументКорректировкаНачислений.ДополнительныеСвойства.Вставить("ОбработкаСвязанныхДокументов", Истина);
	
	// Используется для принятия решения об отменене транзакции.
	ОбнаруженыОшибки = Истина;
	
	НачатьТранзакцию();
	
	// Если у существующего документа установлена пометка удаления,
	// то снимем ее для перезаполнения корректировки.
	Если ДокументКорректировкаНачислений.ПометкаУдаления Тогда
		ДокументКорректировкаНачислений.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	// Проверка заполненности обязательных реквизитов документа.
	Если ДокументКорректировкаНачислений.ПроверитьЗаполнение() Тогда
		
		// Попытка проведения документа в транзакции.
		Если КВП_ЗаписатьОбъект(ДокументКорректировкаНачислений, РежимЗаписиДокумента.Проведение) Тогда
			
			ДокументКорректировкиСсылка = ДокументКорректировкаНачислений.Ссылка;
			
		Иначе
			
			// Не удалось провести корректировку начислений.
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документ ""Корректировка начислений"" не сформирован: при проверке заполнения документа возникли ошибки!", Отказ);
		
	КонецЕсли;
	
	// Фиксация или откат транзакции.
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры // СформироватьДокументКорректировки()

// Получает таблицу закрепленных счетчиков.
//
// Параметры
//  СписокОбъектов  - массив, содержащий объект учета для отбора.
//  СписокСчетчиков - массив, содержащий счетчики для отбора.
//
Функция ПолучитьЗакрепленныеСчетчики(СписокОбъектов = Неопределено, СписокСчетчиков = Неопределено) Экспорт
	
	// Запрос содержит 2 блока (пакета), получающие данные из регистра сведений "Закрепленные счетчики".
	// В первом пакете получаются данные о счетчиках и объектах учета согласно критериям отбора по параметрам запроса.
	// Но т.к. прибор учета может быть установлен одновременно на несколько объектов учета (например, общий счетчик
	// на несколько квартир), то нужно получить данные и по другим объектам учета, на которые установлены полученные
	// счетчики, даже если они не входят в условия отбора по полю "Объект" для корректного распределения показаний.
	// По этой причине во втором пакете снова выполняется получение данных из регистра сведений "Закрепленные счетчики",
	// но уже с отбором по счетчикам, входящих в результат первого пакета.
	
	// АЛГОРИТМ ВЫПОЛНЕНИЯ ЗАПРОСА:
	// Первый пакет:
	// 1. Получаем данные по приборам учета, у которых дата установки и дата включения (дата изменения) меньше даты начала текущего месяца.
	// 2. Получаем данные по приборам учета, у которых дата включения (дата изменения) в текущем месяце,
	//    и дата установки прибора учета (период) меньше даты документа ввода показаний.
	// 3. Получаем данные по приборам учета, у которых дата включения (дата изменения) меньше даты установки прибора учета (период).
	// Второй пакет:
	// 1. Т.к. прибор учета может быть установлен одновременно на несколько объектов учета (например, общий счетчик
	//    на несколько квартир), получаем данные по другим объектам, на которые установлены полученные счетчики.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик
	|ПОМЕСТИТЬ СчетчикиЗакрепленныеНаОбъекты
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаНачМесяца,
	|			(НЕ &ОтбиратьПоОбъектам
	|				ИЛИ Объект В (&Объект))
	|				И (НЕ &ОтбиратьПоСчетчикам
	|					ИЛИ Счетчик В (&СписокСчетчиков))
	|				И (НЕ &ОтбиратьПоТипуОбъекта
	|					ИЛИ ТИПЗНАЧЕНИЯ(Объект) В (&ТипОбъекта))
	|				И (НЕ &ОтбиратьПоУслуге
	|					ИЛИ Счетчик.ВидУслуги = &Услуга)
	|				И (НЕ &ВводНачальныхПоказаний
	|					ИЛИ НЕ Счетчик.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета))
	|				И ДатаИзменения <= &ДатаНачМесяца) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчики.Счетчик
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	(НЕ &ОтбиратьПоОбъектам
	|			ИЛИ КВП_ЗакрепленныеСчетчики.Объект В (&Объект))
	|	И (НЕ &ОтбиратьПоСчетчикам
	|			ИЛИ КВП_ЗакрепленныеСчетчики.Счетчик В (&СписокСчетчиков))
	|	И (НЕ &ОтбиратьПоУслуге
	|			ИЛИ КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги = &Услуга)
	|	И (НЕ &ОтбиратьПоТипуОбъекта
	|			ИЛИ ТИПЗНАЧЕНИЯ(КВП_ЗакрепленныеСчетчики.Объект) В (&ТипОбъекта))
	|	И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНачМесяца И &ДатаКонМесяца
	|	И КВП_ЗакрепленныеСчетчики.Период <= &ДатаДокумента
	|	И КВП_ЗакрепленныеСчетчики.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчики.Счетчик
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	(НЕ &ОтбиратьПоОбъектам
	|			ИЛИ КВП_ЗакрепленныеСчетчики.Объект В (&Объект))
	|	И (НЕ &ОтбиратьПоСчетчикам
	|			ИЛИ КВП_ЗакрепленныеСчетчики.Счетчик В (&СписокСчетчиков))
	|	И (НЕ &ОтбиратьПоУслуге
	|			ИЛИ КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги = &Услуга)
	|	И (НЕ &ОтбиратьПоТипуОбъекта
	|			ИЛИ ТИПЗНАЧЕНИЯ(КВП_ЗакрепленныеСчетчики.Объект) В (&ТипОбъекта))
	|	И КВП_ЗакрепленныеСчетчики.Период МЕЖДУ &ДатаНачМесяца И &ДатаДокумента
	|	И КВП_ЗакрепленныеСчетчики.ДатаИзменения <= &ДатаКонМесяца
	|	И КВП_ЗакрепленныеСчетчики.Действует
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	&ДатаДокумента КАК ДатаПоказания
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаНачМесяца,
	|			(НЕ &ОтбиратьПоТипуОбъекта
	|				ИЛИ ТИПЗНАЧЕНИЯ(Объект) В (&ТипОбъекта))
	|				И Счетчик В
	|					(ВЫБРАТЬ
	|						СчетчикиЗакрепленныеНаОбъекты.Счетчик
	|					ИЗ
	|						СчетчикиЗакрепленныеНаОбъекты)
	|				И ДатаИзменения <= &ДатаНачМесяца) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчики.Счетчик,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги,
	|	КВП_ЗакрепленныеСчетчики.Объект,
	|	&ДатаДокумента
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.Счетчик В
	|			(ВЫБРАТЬ
	|				СчетчикиЗакрепленныеНаОбъекты.Счетчик
	|			ИЗ
	|				СчетчикиЗакрепленныеНаОбъекты)
	|	И (НЕ &ОтбиратьПоТипуОбъекта
	|			ИЛИ ТИПЗНАЧЕНИЯ(КВП_ЗакрепленныеСчетчики.Объект) В (&ТипОбъекта))
	|	И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНачМесяца И &ДатаКонМесяца
	|	И КВП_ЗакрепленныеСчетчики.Период <= &ДатаДокумента
	|	И КВП_ЗакрепленныеСчетчики.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчики.Счетчик,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги,
	|	КВП_ЗакрепленныеСчетчики.Объект,
	|	&ДатаДокумента
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.Счетчик В
	|			(ВЫБРАТЬ
	|				СчетчикиЗакрепленныеНаОбъекты.Счетчик
	|			ИЗ
	|				СчетчикиЗакрепленныеНаОбъекты)
	|	И (НЕ &ОтбиратьПоТипуОбъекта
	|			ИЛИ ТИПЗНАЧЕНИЯ(КВП_ЗакрепленныеСчетчики.Объект) В (&ТипОбъекта))
	|	И КВП_ЗакрепленныеСчетчики.Период МЕЖДУ &ДатаНачМесяца И &ДатаДокумента
	|	И КВП_ЗакрепленныеСчетчики.ДатаИзменения <= &ДатаКонМесяца
	|	И КВП_ЗакрепленныеСчетчики.Действует";
	
	СтруктураНастроек = ПолучитьНастройкиПолученияЗакрепленныхСчетчиков(СписокОбъектов, СписокСчетчиков);
	
	Запрос.УстановитьПараметр("ДатаДокумента",          Дата);
	Запрос.УстановитьПараметр("ДатаНачМесяца",          СтруктураНастроек.ДатаНачалоМесяца);
	Запрос.УстановитьПараметр("ДатаКонМесяца",          СтруктураНастроек.ДатаКонецМесяца);
	Запрос.УстановитьПараметр("Услуга",                 Услуга);
	Запрос.УстановитьПараметр("ОтбиратьПоТипуОбъекта",  СтруктураНастроек.ОтбиратьПоТипуОбъекта);
	Запрос.УстановитьПараметр("ОтбиратьПоСчетчикам",    СтруктураНастроек.ОтбиратьПоСчетчикам);
	Запрос.УстановитьПараметр("ОтбиратьПоОбъектам",     СтруктураНастроек.ОтбиратьПоОбъектам);
	Запрос.УстановитьПараметр("ОтбиратьПоУслуге",       НЕ Услуга.Пустая());
	Запрос.УстановитьПараметр("СписокСчетчиков",        СтруктураНастроек.СписокСчетчиков);
	Запрос.УстановитьПараметр("Объект",                 СтруктураНастроек.СписокОбъектов);
	Запрос.УстановитьПараметр("ТипОбъекта",             СтруктураНастроек.ТипОбъекта);
	Запрос.УстановитьПараметр("ВводНачальныхПоказаний", ВводНачальныхПоказаний);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает таблицу предыдущих показаний счетчиков.
//
// Параметры
//  ТаблицаДляЗаполнения      - таблица, содержащая сведения о счетчиках, по которым необходимо получить предыдущие показания.
//  УстанавливатьКоэффициенты - флаг, определяющий нужно ли рассчитывать коэффициенты счетчиков.
//  ОбновитьПоказания         - флаг, определяющий необходимость обновить показания счетчиков.
//  ЗагружатьТЧ               - флаг, определяющий нужно ли заполнять ТЧ документа полученными данными по счетчикам.
//  ПерезаполнятьТЧ           - флаг, определяющий нужно ли перезаполнить ТЧ документа полностью полученными данными.
//
Функция ПолучитьТаблицуПредыдущихПоказанийСчетчиков(ТаблицаДляЗаполнения, УстанавливатьКоэффициенты = Истина, ОбновитьПоказания = Ложь, ЗагружатьТЧ = Истина, ПерезаполнятьТЧ = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСчетчиковИзТЧ.Счетчик КАК Счетчик,
	|	ТаблицаСчетчиковИзТЧ.Услуга КАК Услуга,
	|	ТаблицаСчетчиковИзТЧ.Объект КАК Объект,
	|	ТаблицаСчетчиковИзТЧ.ДатаПоказания КАК ДатаПоказания
	|ПОМЕСТИТЬ втТаблицаСчетчиковИзТЧ
	|ИЗ
	|	&ТаблицаСчетчиковИзТЧ КАК ТаблицаСчетчиковИзТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик КАК Счетчик,
	|	КВП_ПоказанияСчетчиковСрезПоследних.Период КАК Период,
	|	КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание КАК ДневноеПоказаниеПредыдущее,
	|	КВП_ПоказанияСчетчиковСрезПоследних.НочноеПоказание КАК НочноеПоказаниеПредыдущее,
	|	КВП_ПоказанияСчетчиковСрезПоследних.ПиковоеПоказание КАК ПиковоеПоказаниеПредыдущее,
	|	КВП_ПоказанияСчетчиковСрезПоследних.НачальноеПоказание КАК НачальноеПоказание
	|ПОМЕСТИТЬ втПоказанияСчетчиковПредыдущие
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(
	|			&ДатаНач,
	|			(НЕ &ЭтотДокументЗаписан
	|				ИЛИ НЕ Регистратор = &Ссылка)
	|				И Счетчик В
	|					(ВЫБРАТЬ
	|						втТаблицаСчетчиковИзТЧ.Счетчик
	|					ИЗ
	|						втТаблицаСчетчиковИзТЧ)) КАК КВП_ПоказанияСчетчиковСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ПоказанияСчетчиков.Счетчик,
	|	КВП_ПоказанияСчетчиков.Период,
	|	КВП_ПоказанияСчетчиков.ДневноеПоказание,
	|	КВП_ПоказанияСчетчиков.НочноеПоказание,
	|	КВП_ПоказанияСчетчиков.ПиковоеПоказание,
	|	КВП_ПоказанияСчетчиков.НачальноеПоказание КАК НачальноеПоказание
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков КАК КВП_ПоказанияСчетчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСчетчиковИзТЧ КАК втТаблицаСчетчиковИзТЧ
	|		ПО КВП_ПоказанияСчетчиков.Счетчик = втТаблицаСчетчиковИзТЧ.Счетчик
	|ГДЕ
	|	КВП_ПоказанияСчетчиков.Период > &ДатаНач
	|	И КВП_ПоказанияСчетчиков.Счетчик В
	|			(ВЫБРАТЬ
	|				втТаблицаСчетчиковИзТЧ.Счетчик
	|			ИЗ
	|				втТаблицаСчетчиковИзТЧ)
	|	И (втТаблицаСчетчиковИзТЧ.Счетчик ЕСТЬ NULL
	|				И КВП_ПоказанияСчетчиков.Период < &ДатаДокумента
	|			ИЛИ втТаблицаСчетчиковИзТЧ.Счетчик = втТаблицаСчетчиковИзТЧ.Счетчик
	|				И КВП_ПоказанияСчетчиков.Период < втТаблицаСчетчиковИзТЧ.ДатаПоказания)
	|	И (НЕ &ЭтотДокументЗаписан
	|			ИЛИ НЕ КВП_ПоказанияСчетчиков.Регистратор = &Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоказанияСчетчиковПредыдущие.Счетчик КАК Счетчик,
	|	МАКСИМУМ(втПоказанияСчетчиковПредыдущие.Период) КАК ДатаПоказания
	|ПОМЕСТИТЬ втДатыПоследнихПредыдущихПоказаний
	|ИЗ
	|	втПоказанияСчетчиковПредыдущие КАК втПоказанияСчетчиковПредыдущие
	|
	|СГРУППИРОВАТЬ ПО
	|	втПоказанияСчетчиковПредыдущие.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаСчетчиковИзТЧ.Счетчик КАК Счетчик,
	|	втТаблицаСчетчиковИзТЧ.ДатаПоказания КАК ДатаПоказания,
	|	втТаблицаСчетчиковИзТЧ.Счетчик.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний,
	|	втТаблицаСчетчиковИзТЧ.Счетчик.Тарифность КАК Тарифность,
	|	втТаблицаСчетчиковИзТЧ.Счетчик.Разрядность КАК Разрядность,
	|	втТаблицаСчетчиковИзТЧ.Услуга КАК Услуга,
	|	втТаблицаСчетчиковИзТЧ.Объект КАК Объект,
	|	втТаблицаСчетчиковИзТЧ.Объект.Адрес КАК Помещение,
	|	ВЫБОР
	|		КОГДА втТаблицаСчетчиковИзТЧ.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА 1
	|		КОГДА втТаблицаСчетчиковИзТЧ.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА 2
	|		КОГДА втТаблицаСчетчиковИзТЧ.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА 3
	|		КОГДА втТаблицаСчетчиковИзТЧ.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА 4
	|	КОНЕЦ КАК ВидОбъекта,
	|	ЕСТЬNULL(втДатыПоследнихПредыдущихПоказаний.ДатаПоказания, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПредыдущегоПоказания,
	|	ЕСТЬNULL(втПоказанияСчетчиковПредыдущие.НачальноеПоказание, ИСТИНА) КАК ПредыдущееПоказаниеНачальное,
	|	ВЫБОР
	|		КОГДА втТаблицаСчетчиковИзТЧ.Счетчик.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом)
	|			ТОГДА ЕСТЬNULL(втПоказанияСчетчиковПредыдущие.ДневноеПоказаниеПредыдущее, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДневноеПоказаниеПредыдущее,
	|	ВЫБОР
	|		КОГДА втТаблицаСчетчиковИзТЧ.Счетчик.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом)
	|			ТОГДА ЕСТЬNULL(втПоказанияСчетчиковПредыдущие.НочноеПоказаниеПредыдущее, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НочноеПоказаниеПредыдущее,
	|	ВЫБОР
	|		КОГДА втТаблицаСчетчиковИзТЧ.Счетчик.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом)
	|			ТОГДА ЕСТЬNULL(втПоказанияСчетчиковПредыдущие.ПиковоеПоказаниеПредыдущее, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПиковоеПоказаниеПредыдущее
	|ИЗ
	|	втТаблицаСчетчиковИзТЧ КАК втТаблицаСчетчиковИзТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыПоследнихПредыдущихПоказаний КАК втДатыПоследнихПредыдущихПоказаний
	|			ЛЕВОЕ СОЕДИНЕНИЕ втПоказанияСчетчиковПредыдущие КАК втПоказанияСчетчиковПредыдущие
	|			ПО втДатыПоследнихПредыдущихПоказаний.Счетчик = втПоказанияСчетчиковПредыдущие.Счетчик
	|				И втДатыПоследнихПредыдущихПоказаний.ДатаПоказания = втПоказанияСчетчиковПредыдущие.Период
	|		ПО втТаблицаСчетчиковИзТЧ.Счетчик = втДатыПоследнихПредыдущихПоказаний.Счетчик";
	
	НастройкиПолученияПредыдущихПоказаний = ПолучитьНастройкиПолученияПредыдущихПоказаний(ТаблицаДляЗаполнения);
	
	Запрос.УстановитьПараметр("ДатаДокумента",        Дата);
	Запрос.УстановитьПараметр("ТаблицаСчетчиковИзТЧ", ТаблицаДляЗаполнения);
	Запрос.УстановитьПараметр("ДатаНач",              НастройкиПолученияПредыдущихПоказаний.МинимальнаяДатаПоказания);
	Запрос.УстановитьПараметр("Ссылка",               Ссылка);
	Запрос.УстановитьПараметр("ЭтотДокументЗаписан",  НЕ Ссылка.Пустая());
	
	ТаблицаСчетчиков = Запрос.Выполнить().Выгрузить();
	
	// Обрабатываем полученную таблицу счетчиков в соответствии с переданными параметрами.
	ОбработатьТаблицуСчетчиков(ТаблицаСчетчиков, УстанавливатьКоэффициенты, ОбновитьПоказания, ЗагружатьТЧ, ПерезаполнятьТЧ);
	
	Возврат ТаблицаСчетчиков;
	
КонецФункции

#КонецОбласти 

#Область ПрочиеПроцедурыИФункции

// Процедура определяет организацию по действию услуг на лицевых счетах.
//
Функция ПолучитьОрганизациюДляДокументаКорректировкиПоказаний(Период, МассивЛицевыхСчетов, МассивУслуг, Отказ = Ложь)
	
	// По умолчанию используем пустую организация. Если организация пустая,
	// то формирование корректировки начислений невозможно.
	ОрганизацияКорректировкиНачислений = Справочники.Организации.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период",       КонецМесяца(Период));
	Запрос.УстановитьПараметр("ЛицевыеСчета", МассивЛицевыхСчетов);
	Запрос.УстановитьПараметр("Услуги",       МассивУслуг);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Организация КАК ОрганизацияКорректировкиНачислений
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&Период,
	|			Объект В (&ЛицевыеСчета)
	|				И Услуга В (&Услуги)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует";
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОрганизаций.Количество() = 1 Тогда
		
		// Получаем организацию только если она одна, в противном случае непонятно,
		// по какой организации необходимо корректировать начисления того или иного л/с.
		// В будущем можно будет доработать, группируя корректировки по организациям
		// действующих начислений лицевых счетов.
		
		ВыборкаОрганизаций.Следующий();
		ОрганизацияКорректировкиНачислений = ВыборкаОрганизаций.ОрганизацияКорректировкиНачислений;
		
	ИначеЕсли ВыборкаОрганизаций.Количество() > 1 Тогда
		
		// Если организаций несколько (несколько услуг, которые начисляются разными организациями),
		// то сообщим об ошибке, так как в идеале нужно разделять корректировки по организациям.
		// Можно будет доработать при необходимости, см. комментарий выше.
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Услуги приборов учета с отрицательным расходом назначены на различные организации!
														 |Корректировка начислений может быть сформирована только по одной организации.", Отказ);
		
	Иначе
		
		// Если действующих начислений вообще нет, то сообщим об ошибке и не сформируем начисления.
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось получить организацию для корректировки начислений!
														 |Возможно, по услугам приборов учета с отрицательным расходом нет назначенных начислений.
														 |Назначение услуг производится документом ""Назначение услуг"" в разделе ""Начисления услуг"".", Отказ);
		
	КонецЕсли;
	
	Возврат ОрганизацияКорректировкиНачислений;
	
КонецФункции // ПолучитьОрганизациюДляДокументаКорректировкиПоказаний()

// Функция подготавливает настройки, используемые при получении таблицы закрепленных счетчиков.
//
Функция ПолучитьНастройкиПолученияЗакрепленныхСчетчиков(СписокОбъектов = Неопределено, СписокСчетчиков = Неопределено)
	
	// 1. Определяем даты начала и окончания месяца.
	ДатаНачалоМесяца = НачалоМесяца(Дата);
	ДатаКонецМесяца  = КонецМесяца(Дата);
	
	// 2. Определяем тип объекта на основании вида операции.
	ОтбиратьПоТипуОбъекта = Истина;
	
	Если ЭтотОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаЗдание Тогда
		ТипОбъекта       = Тип("СправочникСсылка.КВП_Здания");
		ТипОбъектаСтрока = "Здания";
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаПодъезд Тогда
		ТипОбъекта       = Тип("СправочникСсылка.КВП_Подъезды");
		ТипОбъектаСтрока = "Подъезды";
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение Тогда
		ТипОбъекта       = Тип("СправочникСсылка.УПЖКХ_Помещения");
		ТипОбъектаСтрока = "Помещения";
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет Тогда
		ТипОбъекта       = Тип("СправочникСсылка.КВП_ЛицевыеСчета");
		ТипОбъектаСтрока = "ЛицевыеСчета";
	Иначе
		ТипОбъекта = Новый Массив;
		ТипОбъекта.Добавить(Тип("СправочникСсылка.КВП_Здания"));
		ТипОбъекта.Добавить(Тип("СправочникСсылка.КВП_Подъезды"));
		ТипОбъекта.Добавить(Тип("СправочникСсылка.УПЖКХ_Помещения"));
		ТипОбъекта.Добавить(Тип("СправочникСсылка.КВП_ЛицевыеСчета"));
		
		ТипОбъектаСтрока      = "";
		ОтбиратьПоТипуОбъекта = Ложь;
	КонецЕсли;
	
	// 3. Готовим списки для отбора.
	ОтбиратьПоСчетчикам = Ложь;
	ОтбиратьПоОбъектам  = Ложь;
	
	// Если переменная "СписокСчетчиков" не пустая, то установим отбор по ее содержимому.
	Если ЗначениеЗаполнено(СписокСчетчиков) Тогда
		
		ОтбиратьПоСчетчикам = Истина;
		
	// Если переменная "СписокОбъектов" не пустая, то установим отбор по ее содержимому.
	ИначеЕсли ЗначениеЗаполнено(СписокОбъектов) Тогда
		
		ОтбиратьПоОбъектам = Истина;
		
	// Если параметры "СписокСчетчиков" и "СписокОбъектов" пустые, тогда будем ориентироваться только на отбор
	// по полю "Объект", заполняя переменную "СписокОбъектов" для последующей передачи ее в параметры запроса.
	ИначеЕсли ЗначениеЗаполнено(Объект) Тогда
		
		ОтбиратьПоОбъектам = Истина;
		ОбъектыНачисления  = КВП_СформироватьТаблицуОбъектовНачисления(Дата, Объект);
		
		// Для случаев, когда текущий список объектов представляет собой список значений с одной пустой записью,
		// будем очищать его для того, чтобы далее в список объектов (список лицевых счетов) не добавлялись строки с пустыми значениями.
		// Данная ситуация будет в том случае, если тип объекта учета в поле "Объект" указан, но объект не выбран.
		
		СтрокаСписка = ОбъектыНачисления.Найти(ТипОбъектаСтрока, "ТипОбъекта");
		
		Если НЕ СтрокаСписка = Неопределено Тогда
			
			СписокОбъектов = СтрокаСписка.СписокОбъектов;
			
			ПустаяСсылкаНаОбъект = Новый(ТипЗнч(Объект));
			НайденнаяПустаяСсылка = СписокОбъектов.НайтиПоЗначению(ПустаяСсылкаНаОбъект);
			Если НЕ НайденнаяПустаяСсылка = Неопределено Тогда
				СписокОбъектов.Удалить(НайденнаяПустаяСсылка);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("ДатаНачалоМесяца, ДатаКонецМесяца, ОтбиратьПоТипуОбъекта, ОтбиратьПоСчетчикам, ОтбиратьПоОбъектам, СписокСчетчиков,
							|СписокОбъектов, ТипОбъекта",
							ДатаНачалоМесяца, ДатаКонецМесяца, ОтбиратьПоТипуОбъекта, ОтбиратьПоСчетчикам, ОтбиратьПоОбъектам, СписокСчетчиков,
							СписокОбъектов, ТипОбъекта);
	
КонецФункции

// Функция подготавливает настройки, используемые при получении таблицы предыдущих показаний счетчиков.
//
Функция ПолучитьНастройкиПолученияПредыдущихПоказаний(ТаблицаДляЗаполнения)
	
	// Устанавливаем минимальные и максимальные даты показаний. Данные даты будут использоваться в
	// качестве границ срезов для получения предыдущих показаний. При обновлении показаний в ТЧ
	// документа данные даты будут заменены на минимальные и максимальные дат показаний из ТЧ.
	МинимальнаяДатаПоказания  = НачалоМесяца(Дата);
	МаксимальнаяДатаПоказания = КонецМесяца(Дата);
	
	тмКоличествоСтрокТЧ = ТаблицаДляЗаполнения.Количество();
	
	Если НЕ тмКоличествоСтрокТЧ = 0 Тогда
		
		ТаблицаДатПоказанийИзТЧ = ТаблицаДляЗаполнения.Скопировать(, "ДатаПоказания");
		ТаблицаДатПоказанийИзТЧ.Сортировать("ДатаПоказания Возр");
		
		// При обновлении предыдущих показаний переопределяем границы срезов минимальными и максимальными
		// датами показаний из ТЧ, так как в слишком широком срезе нет смысла.
		МинимальнаяДатаПоказания  = ТаблицаДатПоказанийИзТЧ[0].ДатаПоказания;
		МаксимальнаяДатаПоказания = ТаблицаДатПоказанийИзТЧ[тмКоличествоСтрокТЧ - 1].ДатаПоказания;
		
	КонецЕсли;
	
	Возврат Новый Структура("МинимальнаяДатаПоказания, МаксимальнаяДатаПоказания",
							 МинимальнаяДатаПоказания, МаксимальнаяДатаПоказания);
	
КонецФункции

// Выполняет постобработку сформированной таблицы счетчиков.
//
Процедура ОбработатьТаблицуСчетчиков(ТаблицаСчетчиков, УстанавливатьКоэффициенты, ОбновитьПоказания, ЗагружатьТЧ, ПерезаполнятьТЧ)
	
	// Установка коэффициентов достаточно трудозатратная операция. Поэтому при использовании данной функции
	// для нужд установки отборов в форме справочника "Счетчики" рассчитывать коэффициенты не нужно.
	Если УстанавливатьКоэффициенты Тогда
		
		СписокОбъектовДляКоэффициентов = Неопределено;
		
		// Для вида операции "Ввод показаний на помещение" коэффициенты счетчиков устанавливаются на основании
		// данных о списке лицевых счетов. Поэтому нужно получить список лицевых счетов по помещениям и уже
		// список лицевых счетов передавать в процедуру установки коэффициентов.
		Если ВидОперации = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение Тогда
			
			врСписокОбъектов = ТаблицаСчетчиков.ВыгрузитьКолонку("Объект");
			СписокЛС         = КВП_ПолучитьСписокЛицевыхСчетовПоПомещениям(врСписокОбъектов, Дата);
			
			// Если список лицевых счетов не содержит ни одной записи, будем сбрасывать его значение в "Неопределено".
			// Это сделано для того, чтобы в дальнейшем при получении количества жильцов лицевого счета не добавлялось условие отбора
			// на вхождение в список лицевых счетов в текст запроса.
			Если НЕ СписокЛС.Количество() = 0 Тогда
				СписокОбъектовДляКоэффициентов = СписокЛС;
			КонецЕсли;
			
		ИначеЕсли НЕ ТаблицаСчетчиков.Количество() = 0 Тогда
			
			СписокОбъектовДляКоэффициентов = ТаблицаСчетчиков.ВыгрузитьКолонку("Объект");
			
		КонецЕсли;
		
		Документы.УПЖКХ_ВводПоказанийСчетчика.УстановитьКоэффициентыОбъектов(ТаблицаСчетчиков, Дата, СписокОбъектовДляКоэффициентов);
		
	КонецЕсли;
	
	Если ОбновитьПоказания Тогда
		
		// Добавляем индекс для ускорения поиска в таблице.
		ТаблицаСчетчиков.Индексы.Добавить("Счетчик");
		
		Для Каждого СтрокаТаблицы Из Главная Цикл
			СтрокаСчетчика = ТаблицаСчетчиков.Найти(СтрокаТаблицы.Счетчик, "Счетчик");
			Если СтрокаСчетчика = Неопределено Тогда
				СтрокаТаблицы.Тарифность                   = СтрокаТаблицы.Счетчик.Тарифность;
				СтрокаТаблицы.Разрядность                  = СтрокаТаблицы.Счетчик.Разрядность;
				СтрокаТаблицы.СпособРегистрацииПоказаний   = СтрокаТаблицы.Счетчик.СпособРегистрацииПоказаний;
				СтрокаТаблицы.ДатаПоказания                = Дата;
				СтрокаТаблицы.ДатаПредыдущегоПоказания     = Дата(1, 1, 1);
				СтрокаТаблицы.ПредыдущееПоказаниеНачальное = Истина;
				СтрокаТаблицы.ДневноеПоказаниеПредыдущее   = 0;
				СтрокаТаблицы.НочноеПоказаниеПредыдущее    = 0;
				СтрокаТаблицы.ПиковоеПоказаниеПредыдущее   = 0;
			Иначе
				СтрокаТаблицы.Тарифность                   = СтрокаСчетчика.Тарифность;
				СтрокаТаблицы.Разрядность                  = СтрокаСчетчика.Разрядность;
				СтрокаТаблицы.СпособРегистрацииПоказаний   = СтрокаСчетчика.СпособРегистрацииПоказаний;
				СтрокаТаблицы.ДатаПоказания                = СтрокаСчетчика.ДатаПоказания;
				СтрокаТаблицы.ДатаПредыдущегоПоказания     = СтрокаСчетчика.ДатаПредыдущегоПоказания;
				СтрокаТаблицы.ПредыдущееПоказаниеНачальное = СтрокаСчетчика.ПредыдущееПоказаниеНачальное;
				СтрокаТаблицы.ДневноеПоказаниеПредыдущее   = СтрокаСчетчика.ДневноеПоказаниеПредыдущее;
				СтрокаТаблицы.НочноеПоказаниеПредыдущее    = СтрокаСчетчика.НочноеПоказаниеПредыдущее;
				СтрокаТаблицы.ПиковоеПоказаниеПредыдущее   = СтрокаСчетчика.ПиковоеПоказаниеПредыдущее;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ЗагружатьТЧ Тогда
		Если ПерезаполнятьТЧ Тогда
			Главная.Загрузить(ТаблицаСчетчиков);
		Иначе
			ДополнитьТаблицуОбъектами(ТаблицаСчетчиков);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Заполняет таблицу изменений по счетчикам.
//
Процедура ЗаполнитьТаблицуИзмененияСчетчиков(ТаблицаИзмененияСчетчиков, Отказ)
	
	ТаблицаИзмененияСчетчиков.Колонки.Добавить("ТекДневноеПоказание");
	ТаблицаИзмененияСчетчиков.Колонки.Добавить("ТекНочноеПоказание");
	ТаблицаИзмененияСчетчиков.Колонки.Добавить("ТекПиковоеПоказание");
	
	Для Каждого СтрокаСчетчика Из ТаблицаИзмененияСчетчиков Цикл
		
		СтрокаСчетчика.ТекДневноеПоказание = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(СтрокаСчетчика, "ДневноеПоказание", Отказ);
		СтрокаСчетчика.ТекНочноеПоказание  = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(СтрокаСчетчика, "НочноеПоказание",  Отказ);
		СтрокаСчетчика.ТекПиковоеПоказание = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(СтрокаСчетчика, "ПиковоеПоказание", Отказ);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуИзмененияСчетчиков()

// Движения по регистру КВП_ПоказанияСчетчиков.
Процедура ДвижениеПоРегиструПоказанийСчетчиков(СтруктураШапкиДокумента, ТаблицаИзмененияСчетчиков)
	
	// Сначала заполним поля текущих показаний если они не заполнены, а предыдущие показания есть. 
	// Также, если все текущие показания равны 0, то показания по счетчику не вводим.
	
	МассивСтрокДляУдаления = Новый Массив;
	
	ТаблицаПоказаний = ТаблицаИзмененияСчетчиков.Скопировать(, "Счетчик, ДатаПоказания,
											|ДневноеПоказание, НочноеПоказание, ПиковоеПоказание,
											|ДневноеПоказаниеПредыдущее, НочноеПоказаниеПредыдущее, ПиковоеПоказаниеПредыдущее,
											|КоэффициентТрансформации, ТемпературныйКоэффициент");
	
	Для Каждого ТекСтрокаИзменения Из ТаблицаПоказаний Цикл
		
		Если ТекСтрокаИзменения.ДневноеПоказание = Неопределено
		   И ТекСтрокаИзменения.НочноеПоказание = Неопределено
		   И ТекСтрокаИзменения.ПиковоеПоказание = Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(ТекСтрокаИзменения);
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрокаИзменения.ДневноеПоказание = Неопределено
		   И НЕ ТекСтрокаИзменения.ДневноеПоказаниеПредыдущее = 0 Тогда
			ТекСтрокаИзменения.ДневноеПоказание = ТекСтрокаИзменения.ДневноеПоказаниеПредыдущее;
		КонецЕсли;
		
		Если ТекСтрокаИзменения.НочноеПоказание = Неопределено
		   И НЕ ТекСтрокаИзменения.НочноеПоказаниеПредыдущее = 0 Тогда
			ТекСтрокаИзменения.НочноеПоказание = ТекСтрокаИзменения.НочноеПоказаниеПредыдущее;
		КонецЕсли;
		
		Если ТекСтрокаИзменения.ПиковоеПоказание = Неопределено
		   И НЕ ТекСтрокаИзменения.ПиковоеПоказаниеПредыдущее = 0 Тогда
			ТекСтрокаИзменения.ПиковоеПоказание = ТекСтрокаИзменения.ПиковоеПоказаниеПредыдущее;
		КонецЕсли;
	КонецЦикла;
	
	// Удалим ненужные строки.
	Для Каждого ТекСтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		ТаблицаПоказаний.Удалить(ТекСтрокаДляУдаления);
	КонецЦикла;
	
	// Теперь свернем таблицу по полям, которые необходимы для показаний.
	ТаблицаПоказаний.Свернуть("Счетчик, ДатаПоказания, ДневноеПоказание, НочноеПоказание, ПиковоеПоказание, 
							  |КоэффициентТрансформации, ТемпературныйКоэффициент");
	
	ТаблицаДатПоверкиПУ = ПолучитьТаблицуДатПоверкиОтключенныхВТекущемМесяцеПриборовУчета(СтруктураШапкиДокумента);
	
	// регистр КВП_ПоказанияСчетчиков
	Для Каждого СтрокаСчетчика Из ТаблицаПоказаний Цикл
		
		Если СтрокаСчетчика.ДневноеПоказание = 0 
		   И СтрокаСчетчика.НочноеПоказание  = 0 
		   И СтрокаСчетчика.ПиковоеПоказание = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДвижениеПериод          = СтрокаСчетчика.ДатаПоказания;
		ДатаОкончанияДействияПУ = Дата(1,1,1);
		
		// Анализируем дату поверки прибора учета.
		// Если прибор учета отключен на поверку в текущем месяце, то информируем об этом.
		// При этом если показания вводятся позже даты отключения, то ввод показаний осуществляется
		// на дату отключения - поверки.
		
		НайденныйПУ = ТаблицаДатПоверкиПУ.Найти(СтрокаСчетчика.Счетчик, "Счетчик");
		Если НЕ НайденныйПУ = Неопределено Тогда
			ДатаОкончанияДействияПУ = НайденныйПУ.ДатаПоверки;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаОкончанияДействияПУ) Тогда
			ТекстПредупреждения = "";
			Если ДатаОкончанияДействияПУ > СтрокаСчетчика.ДатаПоказания Тогда
				ТекстПредупреждения = "Близится дата поверки прибора учета """ + Строка(СтрокаСчетчика.Счетчик) 
									 + """ - " + Строка(Формат(ДатаОкончанияДействияПУ,"ДЛФ=Д")) + " г.";
			Иначе // показания вводятся позже даты отключения 
				
				// Для информации:
				// Никаких комментариев зачем нужно переносить дату показания нет.
				// Полагаем: 
				//  1) для порядка, раз прибор учета уже фактически не действует (на поверке),то показания относим к периоду действия;
				//  2) чтобы при начислении "не вылезало" лишних дат (разбивки по периодам);
				//  3) удобно как информирование, что до даты отключения будет выполнен расчет по показаниям, а далее по нормативу.
				
				ДвижениеПериод = ДатаОкончанияДействияПУ;
				ТекстПредупреждения = "Прибор учета """ + Строка(СтрокаСчетчика.Счетчик) 
									+ """ отключен на поверку - " + Строка(Формат(ДатаОкончанияДействияПУ,"ДЛФ=Д")) + " г. "
									+ "Показания прибора учета введены на дату окончания его действия.";
			КонецЕсли;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстПредупреждения);
		КонецЕсли;
		
		Движение = Движения.КВП_ПоказанияСчетчиков.Добавить();
		Движение.Период                   = ДвижениеПериод;
		Движение.Счетчик                  = СтрокаСчетчика.Счетчик;
		Движение.ДневноеПоказание         = СтрокаСчетчика.ДневноеПоказание;
		Движение.НочноеПоказание          = СтрокаСчетчика.НочноеПоказание;
		Движение.ПиковоеПоказание         = СтрокаСчетчика.ПиковоеПоказание;
		Движение.НачальноеПоказание       = ВводНачальныхПоказаний;
		Движение.КоэффициентТрансформации = СтрокаСчетчика.КоэффициентТрансформации;
		Движение.ТемпературныйКоэффициент = СтрокаСчетчика.ТемпературныйКоэффициент;
		
	КонецЦикла;
	
КонецПроцедуры //ДвижениеПоРегиструПоказанийСчетчиков()

// Поцедура формирует движения по регистру "Сведения о наличии показаний приборов учета".
//
Процедура ДвижениеПоРегиструСведенийНаличияПоказанийПУ(СтруктураШапкиДокумента, ТаблицаИзмененияСчетчиков)
	
	Если ЭтотОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаЗдание
	 Или ЭтотОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаПодъезд Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСчетчика Из ТаблицаИзмененияСчетчиков Цикл
		
		Если СтрокаСчетчика.ДневноеПоказание = Неопределено
			И СтрокаСчетчика.НочноеПоказание = Неопределено
			И СтрокаСчетчика.ПиковоеПоказание = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Движения.УПЖКХ_СведенияОНаличииПоказанийПриборовУчета.Добавить();
		НоваяСтрока.Объект  = СтрокаСчетчика.Объект;
		НоваяСтрока.Услуга  = СтрокаСчетчика.Услуга;
		НоваяСтрока.Счетчик = СтрокаСчетчика.Счетчик;
		НоваяСтрока.Дата    = СтрокаСчетчика.ДатаПоказания;
		
	КонецЦикла;
	
КонецПроцедуры //ДвижениеПоРегиструСведенийНаличияПоказанийПУ()

// Движения по регистру накопления УПЖКХ_РасчетПриборовУчета.
Процедура ДвижениеПоРегиструРасчетПриборовУчета(СтруктураШапкиДокумента, ТаблицаИзмененияСчетчиков)
	
	Если СтруктураШапкиДокумента.ВводНачальныхПоказаний Тогда
		Возврат;
	КонецЕсли;
	
	// При использовании контроля введенных показаний в случае, если заполнена ссылка на документ "Корректировка начислений"
	// и данный документ проведен, для записей с отрицательным расходом будем дополнительно формировать движения с видом движения "Расход".
	ИспользуетсяКонтрольПоказанийПриборовУчета  = УПЖКХ_ПараметрыУчетаСервер.ИспользоватьКонтрольПоказанийПриборовУчета();
	
	СсылкаКорректировка = УПЖКХ_ВводПоказанийПриборовУчетаСервер.НайтиПодчиненныйДокументКорректировкаНачислений(Ссылка);
	ЕстьКорректировкаПриОтрицательномРасходе = ИспользуетсяКонтрольПоказанийПриборовУчета
											   И Не СсылкаКорректировка.Пустая()
											   И СсылкаКорректировка.Проведен;
	
	НаборДвижений  = Движения.УПЖКХ_РасчетПриборовУчета;
	ТаблицаРасчета = НаборДвижений.ВыгрузитьКолонки();
	
	Для Каждого СтрокаСчетчика Из ТаблицаИзмененияСчетчиков Цикл
		
		Если (СтрокаСчетчика.ТекДневноеПоказание = 0 И СтрокаСчетчика.ТекНочноеПоказание = 0 
		   И СтрокаСчетчика.ТекПиковоеПоказание = 0) ИЛИ СтрокаСчетчика.КоэффициентЧислитель = 0 ИЛИ СтрокаСчетчика.КоэффициентЗнаменатель = 0
		 ИЛИ СтрокаСчетчика.КоэффициентТрансформации = 0  ИЛИ СтрокаСчетчика.ТемпературныйКоэффициент = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПриведенныйКоэффициент  = СтрокаСчетчика.КоэффициентТрансформации
								* СтрокаСчетчика.ТемпературныйКоэффициент
								* СтрокаСчетчика.КоэффициентЧислитель
								/ СтрокаСчетчика.КоэффициентЗнаменатель;
		
		ПоказаниеДн  = СтрокаСчетчика.ТекДневноеПоказание * ПриведенныйКоэффициент;
		ПоказаниеНч  = СтрокаСчетчика.ТекНочноеПоказание  * ПриведенныйКоэффициент;
		ПоказаниеПик = СтрокаСчетчика.ТекПиковоеПоказание * ПриведенныйКоэффициент;
		
		Если НЕ ПоказаниеДн = 0 Тогда
			НоваяСтрока              = ТаблицаРасчета.Добавить();
			НоваяСтрока.Объект       = СтрокаСчетчика.Объект;
			НоваяСтрока.Услуга       = СтрокаСчетчика.Услуга;
			НоваяСтрока.Счетчик      = СтрокаСчетчика.Счетчик;
			НоваяСтрока.ВидПоказания = Перечисления.КВП_ВидыТарифов.Дневной;
			НоваяСтрока.Показание    = ПоказаниеДн;
			НоваяСтрока.Период       = СтрокаСчетчика.ДатаПоказания;
			НоваяСтрока.ВидДвижения  = ВидДвиженияНакопления.Приход;
		КонецЕсли;
		
		Если НЕ ПоказаниеНч = 0 Тогда
			НоваяСтрока              = ТаблицаРасчета.Добавить();
			НоваяСтрока.Объект       = СтрокаСчетчика.Объект;
			НоваяСтрока.Услуга       = СтрокаСчетчика.Услуга;
			НоваяСтрока.Счетчик      = СтрокаСчетчика.Счетчик;
			НоваяСтрока.ВидПоказания = Перечисления.КВП_ВидыТарифов.Ночной;
			НоваяСтрока.Показание    = ПоказаниеНч;
			НоваяСтрока.Период       = СтрокаСчетчика.ДатаПоказания;
			НоваяСтрока.ВидДвижения  = ВидДвиженияНакопления.Приход;
		КонецЕсли;
		
		Если НЕ ПоказаниеПик = 0 Тогда
			НоваяСтрока              = ТаблицаРасчета.Добавить();
			НоваяСтрока.Объект       = СтрокаСчетчика.Объект;
			НоваяСтрока.Услуга       = СтрокаСчетчика.Услуга;
			НоваяСтрока.Счетчик      = СтрокаСчетчика.Счетчик;
			НоваяСтрока.ВидПоказания = Перечисления.КВП_ВидыТарифов.Пиковый;
			НоваяСтрока.Показание    = ПоказаниеПик;
			НоваяСтрока.Период       = СтрокаСчетчика.ДатаПоказания;
			НоваяСтрока.ВидДвижения  = ВидДвиженияНакопления.Приход;
		КонецЕсли;
		
		// Если заполнена ссылка на документ корректировки начислений, то для записей с отрицательным расходом
		// дополнительно сформируем движения с видом движения "Расход". При этом показания возьмем со знаком минус.
		// В данном случае записи с отрицательным расходом не будут влиять при начислении услуг, так как оприходованный
		// отрицательный расход сразу же списывается.
		// Это нужно для того, чтобы отрицательный расход учитывался при расчете среднего значения расхода за 6 месяцев.
		Если ЕстьКорректировкаПриОтрицательномРасходе Тогда
			
			Если ПоказаниеДн < 0 Тогда
				НоваяСтрока              = ТаблицаРасчета.Добавить();
				НоваяСтрока.Объект       = СтрокаСчетчика.Объект;
				НоваяСтрока.Услуга       = СтрокаСчетчика.Услуга;
				НоваяСтрока.Счетчик      = СтрокаСчетчика.Счетчик;
				НоваяСтрока.ВидПоказания = Перечисления.КВП_ВидыТарифов.Дневной;
				НоваяСтрока.Показание    = ПоказаниеДн;
				НоваяСтрока.Период       = СтрокаСчетчика.ДатаПоказания;
				НоваяСтрока.ВидДвижения  = ВидДвиженияНакопления.Расход;
			КонецЕсли;
			
			Если ПоказаниеНч < 0 Тогда
				НоваяСтрока              = ТаблицаРасчета.Добавить();
				НоваяСтрока.Объект       = СтрокаСчетчика.Объект;
				НоваяСтрока.Услуга       = СтрокаСчетчика.Услуга;
				НоваяСтрока.Счетчик      = СтрокаСчетчика.Счетчик;
				НоваяСтрока.ВидПоказания = Перечисления.КВП_ВидыТарифов.Ночной;
				НоваяСтрока.Показание    = ПоказаниеНч;
				НоваяСтрока.Период       = СтрокаСчетчика.ДатаПоказания;
				НоваяСтрока.ВидДвижения  = ВидДвиженияНакопления.Расход;
			КонецЕсли;
			
			Если ПоказаниеПик < 0 Тогда
				НоваяСтрока              = ТаблицаРасчета.Добавить();
				НоваяСтрока.Объект       = СтрокаСчетчика.Объект;
				НоваяСтрока.Услуга       = СтрокаСчетчика.Услуга;
				НоваяСтрока.Счетчик      = СтрокаСчетчика.Счетчик;
				НоваяСтрока.ВидПоказания = Перечисления.КВП_ВидыТарифов.Пиковый;
				НоваяСтрока.Показание    = ПоказаниеПик;
				НоваяСтрока.Период       = СтрокаСчетчика.ДатаПоказания;
				НоваяСтрока.ВидДвижения  = ВидДвиженияНакопления.Расход;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРасчета.Свернуть("Активность,
							|ВидДвижения,
							|Период,
							|Услуга,
							|Объект,
							|Счетчик,
							|ВидПоказания",
							"Показание");
		
	ТаблицаРасчета.ЗаполнитьЗначения(Истина, "Активность");
	
	// Корректируем таблицу расхода приборов учета. Для этого:
	// 1) Добавляем в таблицу расход с "-" для "входных" приборов учета (с учетом зависимостей приборов учета).
	// 2) Убираем из таблицы расход по "выходным" приборам учета (для счетчика установлен признак
	//    "Используется в качестве "выходного" прибора учета").
	ДвижениеПоРегиструРасчетПриборовУчетаЗависимыхПриборовУчета(ТаблицаРасчета);
	
	НаборДвижений.Загрузить(ТаблицаРасчета);
	
КонецПроцедуры //ДвижениеПоРегиструРасчетПриборовУчета()

// Процедура дополняет таблицу приборов данными по зависимым приборам учета.
//
Процедура ДвижениеПоРегиструРасчетПриборовУчетаЗависимыхПриборовУчета(ТаблицаРасчета)
	
	// Алгоритм:
	// 1. Берем готовую таблицу с расходом по приборам учета. 
	//    В таблице всегда объекты одного типа (т.к. документ разделен на виды операций по типам объектов).
	// 2. Дополняем ее зависимыми приборами учета (по данным РС "Зависимые приборы учета").
	// 3. Определяем объекты, за которыми закреплены полученные зависимые приборы учета.
	//      Это могут быть объекты разных типов (дома, подъезды, помещения, л/с).
	//      Кроме этого возможны ситуации, когда прибор может быть закреплен сразу за несколькими объектами.
	// 4. Определяем доли расхода прибора учета для каждого из объектов.
	//    Для этого используем тот же механизм, что используется для определения долей на этапе работы с 
	//    табличной частью документа.
	//    Для оптимальной работы механизма разделяем объекты по типам, а также получаем список лицевых счетов 
	//    для отбора (берутся л/с, за которыми закреплены приборы учета + определяются открытые лицевые 
	//    счета на помещения, за которыми закреплены приборы учета).
	// 5. Из готовой таблицы исключаем расход по "выходным" приборам учета, т.к. начисления по ним не должны 
	//    выполняться (исключаем только на последнем этапе, т.к. расход по ним нужен для уменьшения расхода 
	//    "входных" приборов учета). Дополняем данными зависимых приборов учета: расход зависимых приборов 
	//    определяется с учетом полученных долей и записывается с "-" по услуге входного прибора учета.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаРасчета", ТаблицаРасчета);
	Запрос.УстановитьПараметр("ДатаНач",        НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон",        КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Дата",           Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРасчета.ВидДвижения,
	|	ТаблицаРасчета.ВидПоказания,
	|	ТаблицаРасчета.Объект,
	|	ТаблицаРасчета.Активность,
	|	ТаблицаРасчета.Период,
	|	ТаблицаРасчета.Показание,
	|	ТаблицаРасчета.Счетчик,
	|	ТаблицаРасчета.Услуга
	|ПОМЕСТИТЬ врТаблицаРасчета
	|{ВЫБРАТЬ
	|	Счетчик}
	|ИЗ
	|	&ТаблицаРасчета КАК ТаблицаРасчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаРасчета.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_ЗависимыеСчетчики.ВходнойПриборУчета КАК УменьшаемыйПУ,
	|	КВП_ЗависимыеСчетчики.ВыходнойПриборУчета КАК ПУ
	|ПОМЕСТИТЬ врТаблицаЗависимыхПУ
	|ИЗ
	|	РегистрСведений.КВП_ЗависимыеСчетчики КАК КВП_ЗависимыеСчетчики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТаблицаРасчета КАК врТаблицаРасчета
	|		ПО КВП_ЗависимыеСчетчики.ВыходнойПриборУчета = врТаблицаРасчета.Счетчик
	|ГДЕ
	|	НЕ КВП_ЗависимыеСчетчики.ВходнойПриборУчета.ПризнакВыходногоСчетчика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КВП_ЗависимыеСчетчики.ВходнойПриборУчета,
	|	КВП_ЗависимыеСчетчики.ВыходнойПриборУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗакрепленныеСчетчики.Счетчик,
	|	ЗакрепленныеСчетчики.Счетчик.ВидУслуги КАК Услуга,
	|	ЗакрепленныеСчетчики.Объект,
	|	ВЫБОР
	|		КОГДА ЗакрепленныеСчетчики.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА 1
	|		КОГДА ЗакрепленныеСчетчики.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА 2
	|		КОГДА ЗакрепленныеСчетчики.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА 3
	|		КОГДА ЗакрепленныеСчетчики.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА 4
	|	КОНЕЦ КАК ВидОбъекта
	|ПОМЕСТИТЬ врТаблицаУстановленныхУменьшаемыхПУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект
	|	ИЗ
	|		РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|				&ДатаНач,
	|				Счетчик В
	|					(ВЫБРАТЬ
	|						ТаблицаЗависимыхПУ.УменьшаемыйПУ
	|					ИЗ
	|						врТаблицаЗависимыхПУ КАК ТаблицаЗависимыхПУ)
	|				И ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|	ГДЕ
	|		КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		КВП_ЗакрепленныеСчетчики.Счетчик,
	|		КВП_ЗакрепленныеСчетчики.Объект
	|	ИЗ
	|		РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|	ГДЕ
	|		КВП_ЗакрепленныеСчетчики.Счетчик В
	|				(ВЫБРАТЬ
	|					ТаблицаЗависимыхПУ.УменьшаемыйПУ
	|				ИЗ
	|					врТаблицаЗависимыхПУ КАК ТаблицаЗависимыхПУ)
	|		И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|		И КВП_ЗакрепленныеСчетчики.Действует) КАК ЗакрепленныеСчетчики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ врСписокОткрытыхЛСНаПомещения
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаНач,
	|			Объект В
	|				(ВЫБРАТЬ
	|					ТаблицаУстановленныхУменьшаемыхПУ.Объект
	|				ИЗ
	|					врТаблицаУстановленныхУменьшаемыхПУ КАК ТаблицаУстановленныхУменьшаемыхПУ
	|				ГДЕ
	|					ТаблицаУстановленныхУменьшаемыхПУ.ВидОбъекта = 2)) КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_ЛицевыеСчета.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_ЛицевыеСчета.Объект В
	|			(ВЫБРАТЬ
	|				ТаблицаУстановленныхУменьшаемыхПУ.Объект
	|			ИЗ
	|				врТаблицаУстановленныхУменьшаемыхПУ КАК ТаблицаУстановленныхУменьшаемыхПУ
	|			ГДЕ
	|				ТаблицаУстановленныхУменьшаемыхПУ.ВидОбъекта = 2)
	|	И КВП_ЛицевыеСчета.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУстановленныхУменьшаемыхПУ.Объект КАК ЛицевойСчет
	|ИЗ
	|	врТаблицаУстановленныхУменьшаемыхПУ КАК ТаблицаУстановленныхУменьшаемыхПУ
	|ГДЕ
	|	ТаблицаУстановленныхУменьшаемыхПУ.ВидОбъекта = 1
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СписокОткрытыхЛСНаПомещения.ЛицевойСчет
	|ИЗ
	|	врСписокОткрытыхЛСНаПомещения КАК СписокОткрытыхЛСНаПомещения";
	СписокЛС = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаУстановленныхУменьшаемыхПУ.Счетчик КАК Счетчик,
	|	ТаблицаУстановленныхУменьшаемыхПУ.Объект КАК Объект,
	|	ТаблицаУстановленныхУменьшаемыхПУ.ВидОбъекта КАК ВидОбъекта,
	|	ТаблицаУстановленныхУменьшаемыхПУ.Услуга,
	|	0 КАК ДневноеПоказаниеПредыдущее,
	|	0 КАК НочноеПоказаниеПредыдущее,
	|	0 КАК ПиковоеПоказаниеПредыдущее,
	|	ТаблицаУстановленныхУменьшаемыхПУ.Счетчик.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний,
	|	ТаблицаУстановленныхУменьшаемыхПУ.Счетчик.Тарифность КАК Тарифность,
	|	ТаблицаУстановленныхУменьшаемыхПУ.Счетчик.Разрядность КАК Разрядность,
	|	ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка) КАК Помещение,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПоказания,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПредыдущегоПоказания,
	|	ЛОЖЬ КАК ПредыдущееПоказаниеНачальное
	|ИЗ
	|	врТаблицаУстановленныхУменьшаемыхПУ КАК ТаблицаУстановленныхУменьшаемыхПУ";
	ТаблицаСчетчиков = Запрос.Выполнить().Выгрузить();
	
	Документы.УПЖКХ_ВводПоказанийСчетчика.УстановитьКоэффициентыОбъектов(ТаблицаСчетчиков, Дата, СписокЛС);
	
	Запрос.УстановитьПараметр("ТаблицаСчетчиков", ТаблицаСчетчиков);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСчетчиков.Объект,
	|	ТаблицаСчетчиков.Счетчик,
	|	ТаблицаСчетчиков.Услуга,
	|	ТаблицаСчетчиков.КоэффициентЧислитель,
	|	ТаблицаСчетчиков.КоэффициентЗнаменатель
	|ПОМЕСТИТЬ врТаблицаСчетчиковСКоэффициентами
	|ИЗ
	|	&ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаСчетчиков.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаСчетчиковСКоэффициентами.Объект,
	|	врТаблицаСчетчиковСКоэффициентами.Счетчик,
	|	врТаблицаСчетчиковСКоэффициентами.Услуга,
	|	врТаблицаСчетчиковСКоэффициентами.КоэффициентЧислитель,
	|	врТаблицаСчетчиковСКоэффициентами.КоэффициентЗнаменатель,
	|	ЕСТЬNULL(врТаблицаЗависимыхПУ.ПУ, ЗНАЧЕНИЕ(Справочник.КВП_Счетчики.ПустаяСсылка)) КАК ВыходнойПУ
	|ПОМЕСТИТЬ втСчетчикиСВыходнымиПУ
	|ИЗ
	|	врТаблицаСчетчиковСКоэффициентами КАК врТаблицаСчетчиковСКоэффициентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаЗависимыхПУ КАК врТаблицаЗависимыхПУ
	|		ПО врТаблицаСчетчиковСКоэффициентами.Счетчик = врТаблицаЗависимыхПУ.УменьшаемыйПУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасчета.ВидДвижения,
	|	ТаблицаРасчета.ВидПоказания,
	|	ТаблицаРасчета.Активность,
	|	ТаблицаРасчета.Период,
	|	ТаблицаРасчета.Объект,
	|	ТаблицаРасчета.Счетчик КАК Счетчик,
	|	ТаблицаРасчета.Услуга,
	|	ТаблицаРасчета.Показание
	|ИЗ
	|	врТаблицаРасчета КАК ТаблицаРасчета
	|ГДЕ
	|	НЕ ТаблицаРасчета.Счетчик.ПризнакВыходногоСчетчика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРасчета.ВидДвижения,
	|	ТаблицаРасчета.ВидПоказания,
	|	ТаблицаРасчета.Активность,
	|	ТаблицаРасчета.Период,
	|	втСчетчикиСВыходнымиПУ.Объект,
	|	втСчетчикиСВыходнымиПУ.Счетчик,
	|	втСчетчикиСВыходнымиПУ.Услуга,
	|	ВЫБОР
	|		КОГДА НЕ втСчетчикиСВыходнымиПУ.КоэффициентЗнаменатель = 0
	|			ТОГДА -ТаблицаРасчета.Показание * втСчетчикиСВыходнымиПУ.КоэффициентЧислитель / втСчетчикиСВыходнымиПУ.КоэффициентЗнаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	врТаблицаРасчета КАК ТаблицаРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСчетчикиСВыходнымиПУ КАК втСчетчикиСВыходнымиПУ
	|		ПО ТаблицаРасчета.Счетчик = втСчетчикиСВыходнымиПУ.ВыходнойПУ
	|ГДЕ
	|	НЕ втСчетчикиСВыходнымиПУ.КоэффициентЗнаменатель = 0";
	
	ТаблицаРасчета = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры // ДвижениеПоРегиструРасчетПриборовУчетаЗависимыхПриборовУчета()

// По результату запроса по шапке документа формируем движения по регистрам.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаИзмененияСчетчиков)

	ДвижениеПоРегиструПоказанийСчетчиков(СтруктураШапкиДокумента, ТаблицаИзмененияСчетчиков);
	ДвижениеПоРегиструСведенийНаличияПоказанийПУ(СтруктураШапкиДокумента, ТаблицаИзмененияСчетчиков);
	ДвижениеПоРегиструРасчетПриборовУчета(СтруктураШапкиДокумента, ТаблицаИзмененияСчетчиков);
	
КонецПроцедуры

// Формирует запрос по таблице счетчиков.
//
Функция СформироватьЗапросПоТаблицеСчетчиков(МассивСтрокДляПроверки)
	
	ТаблицаСчетчиков = Главная.Выгрузить(МассивСтрокДляПроверки);
	ТаблицаСчетчиков.Свернуть("Счетчик, ДатаПоказания, НомерСтроки");
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСчетчиков.НомерСтроки,
	|	ТаблицаСчетчиков.Счетчик,
	|	ТаблицаСчетчиков.ДатаПоказания
	|ПОМЕСТИТЬ ТаблицаСчетчиков
	|ИЗ
	|	&ТаблицаСчетчиков КАК ТаблицаСчетчиков";
	Запрос.УстановитьПараметр("ТаблицаСчетчиков", ТаблицаСчетчиков);
	Запрос.Выполнить();
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоТаблицеСчетчиков()

// Дополняет таблицу "Главная" реквизитами счетчиков.
//
Процедура ДополнитьТаблицуГлавнаяРеквизитамиСчетчиков()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Главная.Счетчик КАК Счетчик,
	|	Главная.Объект КАК Объект
	|ПОМЕСТИТЬ втНезаполненные
	|ИЗ
	|	&Главная КАК Главная
	|ГДЕ
	|	(Главная.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.ПустаяСсылка)
	|			ИЛИ Главная.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.ПустаяСсылка)
	|			ИЛИ Главная.Разрядность = 0
	|			ИЛИ Главная.Помещение = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|				И (ТИПЗНАЧЕНИЯ(Главная.Объект) = ТИП(Справочник.КВП_ЛицевыеСчета)
	|					ИЛИ ТИПЗНАЧЕНИЯ(Главная.Объект) = ТИП(Справочник.УПЖКХ_Помещения)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНезаполненные.Счетчик КАК Счетчик,
	|	втНезаполненные.Счетчик.Тарифность КАК Тарифность,
	|	втНезаполненные.Счетчик.Разрядность КАК Разрядность,
	|	втНезаполненные.Счетчик.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втНезаполненные.Объект) = ТИП(Справочник.КВП_ЛицевыеСчета)
	|			ТОГДА втНезаполненные.Объект.Адрес
	|		КОГДА ТИПЗНАЧЕНИЯ(втНезаполненные.Объект) = ТИП(Справочник.УПЖКХ_Помещения)
	|			ТОГДА втНезаполненные.Объект
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|	КОНЕЦ КАК Помещение
	|ИЗ
	|	втНезаполненные КАК втНезаполненные";
	
	Запрос.УстановитьПараметр("Главная", Главная);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураОтбора = Новый Структура("Счетчик");
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураОтбора.Счетчик = Выборка.Счетчик;
		
		СтрокиСчетчика = Главная.НайтиСтроки(СтруктураОтбора);
		
		Для каждого ТекСтрокаСчетчика из СтрокиСчетчика Цикл
			ЗаполнитьЗначенияСвойств(ТекСтрокаСчетчика, Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыИФункцииДляЗаполненияДокументаИзВнешнихИсточников

// Дополняет таблицу показаний данными из базы.
//
Процедура ДополнитьТаблицуПоказаний(Основание)
	
	// Формируем таблицу показаний на основании таблицы "Главная" структуры.
	ТаблицаГлавная = Главная.ВыгрузитьКолонки();
	
	Для каждого ТекСтрока из Основание.ТаблицаПоказаний Цикл
		НоваяСтрока = ТаблицаГлавная.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	// Получаем список ЛС и вид объекта (аналог вида операции. нужен для процедуры определения коэффициентов).
	СписокЛС = Неопределено;
	СписокСчетчиков = ТаблицаГлавная.ВыгрузитьКолонку("Счетчик");
	ВидОперацииЗаполнения = Основание.ВидОперации;
	
	Если ВидОперацииЗаполнения = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет Тогда
		СписокЛС   = ТаблицаГлавная.ВыгрузитьКолонку("Объект");
		ВидОбъекта = 1;
	ИначеЕсли ВидОперацииЗаполнения = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаГлавная.Объект
		|ПОМЕСТИТЬ втОбъекты
		|ИЗ
		|	&ТаблицаГлавная КАК ТаблицаГлавная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
		|			,
		|			Объект В
		|				(ВЫБРАТЬ
		|					втОбъекты.Объект
		|				ИЗ
		|					втОбъекты КАК втОбъекты)) КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Действует";
		
		Запрос.УстановитьПараметр("ТаблицаГлавная", ТаблицаГлавная);
		
		СписокЛС   = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет");
		ВидОбъекта = 2;
	ИначеЕсли ВидОперацииЗаполнения = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаПодъезд Тогда
		ВидОбъекта = 3;
	ИначеЕсли ВидОперацииЗаполнения = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаЗдание Тогда
		ВидОбъекта = 4;
	КонецЕсли;
	
	// Получаем таблицу для передачи в процедуру определения коэффициентов.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаГлавная.Объект,
	|	ТаблицаГлавная.Счетчик КАК Счетчик,
	|	ТаблицаГлавная.Услуга,
	|	ТаблицаГлавная.ДатаПоказания,
	|	ТаблицаГлавная.ДатаПредыдущегоПоказания,
	|	ТаблицаГлавная.ПредыдущееПоказаниеНачальное,
	|	ТаблицаГлавная.Помещение
	|ПОМЕСТИТЬ втДанныеВходящейТаблицы
	|ИЗ
	|	&ТаблицаГлавная КАК ТаблицаГлавная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеВходящейТаблицы.Объект,
	|	ВЫРАЗИТЬ(втДанныеВходящейТаблицы.Счетчик КАК Справочник.КВП_Счетчики) КАК Счетчик,
	|	втДанныеВходящейТаблицы.Счетчик.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний,
	|	втДанныеВходящейТаблицы.Счетчик.Тарифность КАК Тарифность,
	|	втДанныеВходящейТаблицы.Счетчик.Разрядность КАК Разрядность,
	|	втДанныеВходящейТаблицы.Услуга,
	|	&ВидОбъекта КАК ВидОбъекта,
	|	втДанныеВходящейТаблицы.ДатаПоказания,
	|	втДанныеВходящейТаблицы.ДатаПредыдущегоПоказания,
	|	втДанныеВходящейТаблицы.ПредыдущееПоказаниеНачальное,
	|	втДанныеВходящейТаблицы.Помещение,
	|	0 КАК ДневноеПоказаниеПредыдущее,
	|	0 КАК НочноеПоказаниеПредыдущее,
	|	0 КАК ПиковоеПоказаниеПредыдущее
	|ИЗ
	|	втДанныеВходящейТаблицы КАК втДанныеВходящейТаблицы";
	
	Запрос.УстановитьПараметр("ТаблицаГлавная", ТаблицаГлавная);
	Запрос.УстановитьПараметр("ВидОбъекта",     ВидОбъекта);
	
	ТаблицаКоэффициентов = Запрос.Выполнить().Выгрузить();
	
	Документы.УПЖКХ_ВводПоказанийСчетчика.УстановитьКоэффициентыОбъектов(ТаблицаКоэффициентов, Дата, СписокЛС);
	
	Запрос.УстановитьПараметр("ТаблицаКоэффициентов",      ТаблицаКоэффициентов);
	Запрос.УстановитьПараметр("СписокСчетчиков",           СписокСчетчиков);
	Запрос.УстановитьПараметр("ЗагружатьНулевыеПоказания", Основание.ЗагружатьНулевыеПоказания);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаГлавная.Услуга,
	|	ТаблицаГлавная.Счетчик,
	|	ТаблицаГлавная.Объект,
	|	ТаблицаГлавная.ДатаПоказания,
	|	ТаблицаГлавная.ДневноеПоказание,
	|	ТаблицаГлавная.НочноеПоказание,
	|	ТаблицаГлавная.ПиковоеПоказание,
	|	ТаблицаГлавная.ПоказанияКорректны,
	|	ТаблицаГлавная.СреднийРасходДневной,
	|	ТаблицаГлавная.СреднийРасходНочной,
	|	ТаблицаГлавная.СреднийРасходПиковый
	|ПОМЕСТИТЬ втДанныеВходящейТаблицы
	|ИЗ
	|	&ТаблицаГлавная КАК ТаблицаГлавная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаКоэффициентов.Объект,
	|	ТаблицаКоэффициентов.Счетчик,
	|	ТаблицаКоэффициентов.КоэффициентЧислитель,
	|	ТаблицаКоэффициентов.КоэффициентЗнаменатель,
	|	ТаблицаКоэффициентов.КоэффициентТрансформации,
	|	ТаблицаКоэффициентов.ТемпературныйКоэффициент
	|ПОМЕСТИТЬ втТаблицаКоэффициентов
	|ИЗ
	|	&ТаблицаКоэффициентов КАК ТаблицаКоэффициентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик,
	|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик.Тарифность КАК Тарифность,
	|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний,
	|	КВП_ПоказанияСчетчиковСрезПоследних.Период,
	|	КВП_ПоказанияСчетчиковСрезПоследних.НачальноеПоказание КАК НачальноеПоказание,
	|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание, 0) КАК ДневноеПоказаниеПредыдущее,
	|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.НочноеПоказание, 0) КАК НочноеПоказаниеПредыдущее,
	|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.ПиковоеПоказание, 0) КАК ПиковоеПоказаниеПредыдущее
	|ПОМЕСТИТЬ втПредыдущиеПоказанияСчетчиков
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(, Счетчик В (&СписокСчетчиков)) КАК КВП_ПоказанияСчетчиковСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДанныеВходящейТаблицы.Услуга,
	|	втДанныеВходящейТаблицы.Счетчик,
	|	втДанныеВходящейТаблицы.Счетчик.Наименование КАК НаименованиеСчетчика,
	|	втДанныеВходящейТаблицы.Счетчик.СпособРегистрацииПоказаний,
	|	втДанныеВходящейТаблицы.Счетчик.Тарифность КАК Тарифность,
	|	втДанныеВходящейТаблицы.Счетчик.Разрядность КАК Разрядность,
	|	втДанныеВходящейТаблицы.Объект КАК Объект,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втДанныеВходящейТаблицы.Объект) = ТИП(Справочник.КВП_ЛицевыеСчета)
	|			ТОГДА втДанныеВходящейТаблицы.Объект.Адрес
	|		КОГДА ТИПЗНАЧЕНИЯ(втДанныеВходящейТаблицы.Объект) = ТИП(Справочник.УПЖКХ_Помещения)
	|			ТОГДА втДанныеВходящейТаблицы.Объект
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|	КОНЕЦ КАК Помещение,
	|	втДанныеВходящейТаблицы.ДатаПоказания,
	|	втДанныеВходящейТаблицы.ПоказанияКорректны,
	|	втПредыдущиеПоказанияСчетчиков.Период,
	|	ВЫБОР КОГДА НЕ &ЗагружатьНулевыеПоказания И втДанныеВходящейТаблицы.ДневноеПоказание = 0
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ втДанныеВходящейТаблицы.ДневноеПоказание
	|	КОНЕЦ КАК ДневноеПоказание,
	|	ВЫБОР КОГДА (НЕ &ЗагружатьНулевыеПоказания И втДанныеВходящейТаблицы.НочноеПоказание = 0) ИЛИ втДанныеВходящейТаблицы.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Однотарифный)
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ втДанныеВходящейТаблицы.НочноеПоказание
	|	КОНЕЦ КАК НочноеПоказание,
	|	ВЫБОР КОГДА (НЕ &ЗагружатьНулевыеПоказания И втДанныеВходящейТаблицы.ПиковоеПоказание = 0) ИЛИ НЕ втДанныеВходящейТаблицы.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Трехтарифный)
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ втДанныеВходящейТаблицы.ПиковоеПоказание
	|	КОНЕЦ КАК ПиковоеПоказание,
	|	ВЫБОР КОГДА ((НЕ втДанныеВходящейТаблицы.НочноеПоказание = 0 И НЕ втДанныеВходящейТаблицы.НочноеПоказание = НЕОПРЕДЕЛЕНО) И втДанныеВходящейТаблицы.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Однотарифный)) ИЛИ ((НЕ втДанныеВходящейТаблицы.ПиковоеПоказание = 0 И НЕ втДанныеВходящейТаблицы.ПиковоеПоказание = НЕОПРЕДЕЛЕНО) И НЕ втДанныеВходящейТаблицы.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Трехтарифный))
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НекорректнаяТарифностьСчетчика,
	|	втДанныеВходящейТаблицы.СреднийРасходДневной,
	|	втДанныеВходящейТаблицы.СреднийРасходНочной,
	|	втДанныеВходящейТаблицы.СреднийРасходПиковый,
	|	ЕСТЬNULL(втПредыдущиеПоказанияСчетчиков.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПредыдущегоПоказания,
	|	ЕСТЬNULL(втПредыдущиеПоказанияСчетчиков.НачальноеПоказание, ИСТИНА) КАК ПредыдущееПоказаниеНачальное,
	|	ВЫБОР КОГДА втПредыдущиеПоказанияСчетчиков.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом)
	|			ТОГДА ЕСТЬNULL(втПредыдущиеПоказанияСчетчиков.ДневноеПоказаниеПредыдущее, 0)
	|			ИНАЧЕ 0
	|	КОНЕЦ КАК ДневноеПоказаниеПредыдущее,
	|	ВЫБОР КОГДА втПредыдущиеПоказанияСчетчиков.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом)
	|			ТОГДА ЕСТЬNULL(втПредыдущиеПоказанияСчетчиков.НочноеПоказаниеПредыдущее, 0)
	|			ИНАЧЕ 0
	|	КОНЕЦ КАК НочноеПоказаниеПредыдущее,
	|	ВЫБОР КОГДА втПредыдущиеПоказанияСчетчиков.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом)
	|			ТОГДА ЕСТЬNULL(втПредыдущиеПоказанияСчетчиков.ПиковоеПоказаниеПредыдущее, 0)
	|			ИНАЧЕ 0
	|	КОНЕЦ КАК ПиковоеПоказаниеПредыдущее,
	|	втТаблицаКоэффициентов.КоэффициентЧислитель,
	|	втТаблицаКоэффициентов.КоэффициентЗнаменатель,
	|	втТаблицаКоэффициентов.КоэффициентТрансформации,
	|	втТаблицаКоэффициентов.ТемпературныйКоэффициент
	|ИЗ
	|	втДанныеВходящейТаблицы КАК втДанныеВходящейТаблицы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаКоэффициентов КАК втТаблицаКоэффициентов
	|		ПО втДанныеВходящейТаблицы.Объект = втТаблицаКоэффициентов.Объект
	|			И втДанныеВходящейТаблицы.Счетчик = втТаблицаКоэффициентов.Счетчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПредыдущиеПоказанияСчетчиков КАК втПредыдущиеПоказанияСчетчиков
	|		ПО втДанныеВходящейТаблицы.Счетчик = втПредыдущиеПоказанияСчетчиков.Счетчик
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(втДанныеВходящейТаблицы.ДатаПоказания, День) > ЕСТЬNULL(втПредыдущиеПоказанияСчетчиков.Период, ДАТАВРЕМЯ(1, 1, 1))";
	
	ТаблицаПоказаний = Запрос.Выполнить().Выгрузить();
	
	// Отфильтровываем счетчики с некорректной тарифностью.
	СтрокиСНекорректнойТарифностью = ТаблицаПоказаний.НайтиСтроки(Новый Структура("НекорректнаяТарифностьСчетчика", Истина));
	
	Для каждого ТекСтрокаСНекорректнойТарифностью из СтрокиСНекорректнойТарифностью Цикл
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Показания счетчика """ + ТекСтрокаСНекорректнойТарифностью.НаименованиеСчетчика + """ не соответствуют его тарифности.");
		
		ТаблицаПоказаний.Удалить(ТекСтрокаСНекорректнойТарифностью);
		
	КонецЦикла;
	
	Основание.ТаблицаПоказаний = ТаблицаПоказаний;
	
КонецПроцедуры // ДополнитьТаблицуПоказаний()

// Дополняет ТЧ "Главная" недостающими объектами из ТЗ "тмТаблицаСчетчиков".
//
// Параметры:
//  тмТаблицаСчетчиков - ТаблицаЗначений - таблица со всеми выбарнными пользователем счетчиками.
//
Процедура ДополнитьТаблицуОбъектами(тмТаблицаСчетчиков)
	
	ГлавнаяБуфер = Главная.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГлавнаяБуффер.Услуга КАК Услуга,
	|	ГлавнаяБуффер.Счетчик КАК Счетчик,
	|	ГлавнаяБуффер.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний,
	|	ГлавнаяБуффер.Тарифность КАК Тарифность,
	|	ГлавнаяБуффер.Разрядность КАК Разрядность,
	|	ГлавнаяБуффер.Объект КАК Объект,
	|	ГлавнаяБуффер.Помещение КАК Помещение,
	|	ГлавнаяБуффер.ДатаПоказания КАК ДатаПоказания,
	|	ГлавнаяБуффер.ДневноеПоказание КАК ДневноеПоказание,
	|	ГлавнаяБуффер.НочноеПоказание КАК НочноеПоказание,
	|	ГлавнаяБуффер.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ГлавнаяБуффер.ДатаПредыдущегоПоказания КАК ДатаПредыдущегоПоказания,
	|	ГлавнаяБуффер.ПредыдущееПоказаниеНачальное КАК ПредыдущееПоказаниеНачальное,
	|	ГлавнаяБуффер.ДневноеПоказаниеПредыдущее КАК ДневноеПоказаниеПредыдущее,
	|	ГлавнаяБуффер.НочноеПоказаниеПредыдущее КАК НочноеПоказаниеПредыдущее,
	|	ГлавнаяБуффер.ПиковоеПоказаниеПредыдущее КАК ПиковоеПоказаниеПредыдущее,
	|	ГлавнаяБуффер.КоэффициентЧислитель КАК КоэффициентЧислитель,
	|	ГлавнаяБуффер.КоэффициентЗнаменатель КАК КоэффициентЗнаменатель,
	|	ГлавнаяБуффер.КоэффициентТрансформации КАК КоэффициентТрансформации,
	|	ГлавнаяБуффер.ТемпературныйКоэффициент КАК ТемпературныйКоэффициент
	|ПОМЕСТИТЬ втГлавная
	|ИЗ
	|	&ГлавнаяБуффер КАК ГлавнаяБуффер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетчиков.Счетчик КАК Счетчик,
	|	ТаблицаСчетчиков.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний,
	|	ТаблицаСчетчиков.Тарифность КАК Тарифность,
	|	ТаблицаСчетчиков.Разрядность КАК Разрядность,
	|	ТаблицаСчетчиков.Объект КАК Объект,
	|	ТаблицаСчетчиков.Помещение КАК Помещение,
	|	ТаблицаСчетчиков.Услуга КАК Услуга,
	|	ТаблицаСчетчиков.ДатаПредыдущегоПоказания КАК ДатаПредыдущегоПоказания,
	|	ТаблицаСчетчиков.ПредыдущееПоказаниеНачальное КАК ПредыдущееПоказаниеНачальное,
	|	ТаблицаСчетчиков.ДневноеПоказаниеПредыдущее КАК ДневноеПоказаниеПредыдущее,
	|	ТаблицаСчетчиков.НочноеПоказаниеПредыдущее КАК НочноеПоказаниеПредыдущее,
	|	ТаблицаСчетчиков.ПиковоеПоказаниеПредыдущее КАК ПиковоеПоказаниеПредыдущее,
	|	ТаблицаСчетчиков.КоэффициентЧислитель КАК КоэффициентЧислитель,
	|	ТаблицаСчетчиков.КоэффициентЗнаменатель КАК КоэффициентЗнаменатель,
	|	ТаблицаСчетчиков.КоэффициентТрансформации КАК КоэффициентТрансформации,
	|	ТаблицаСчетчиков.ТемпературныйКоэффициент КАК ТемпературныйКоэффициент
	|ПОМЕСТИТЬ втТаблицаСчетчиков
	|ИЗ
	|	&ТаблицаСчетчиков КАК ТаблицаСчетчиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втГлавная.Услуга, втТаблицаСчетчиков.Услуга) КАК Услуга,
	|	ЕСТЬNULL(втГлавная.Счетчик, втТаблицаСчетчиков.Счетчик) КАК Счетчик,
	|	ЕСТЬNULL(втГлавная.СпособРегистрацииПоказаний, втТаблицаСчетчиков.СпособРегистрацииПоказаний) КАК СпособРегистрацииПоказаний,
	|	ЕСТЬNULL(втГлавная.Тарифность, втТаблицаСчетчиков.Тарифность) КАК Тарифность,
	|	ЕСТЬNULL(втГлавная.Разрядность, втТаблицаСчетчиков.Разрядность) КАК Разрядность,
	|	ЕСТЬNULL(втГлавная.Объект, втТаблицаСчетчиков.Объект) КАК Объект,
	|	ЕСТЬNULL(втГлавная.Помещение, втТаблицаСчетчиков.Помещение) КАК Помещение,
	|	ЕСТЬNULL(втГлавная.КоэффициентЧислитель, втТаблицаСчетчиков.КоэффициентЧислитель) КАК КоэффициентЧислитель,
	|	ЕСТЬNULL(втГлавная.КоэффициентЗнаменатель, втТаблицаСчетчиков.КоэффициентЗнаменатель) КАК КоэффициентЗнаменатель,
	|	ЕСТЬNULL(втГлавная.ДневноеПоказаниеПредыдущее, втТаблицаСчетчиков.ДневноеПоказаниеПредыдущее) КАК ДневноеПоказаниеПредыдущее,
	|	ЕСТЬNULL(втГлавная.НочноеПоказаниеПредыдущее, втТаблицаСчетчиков.НочноеПоказаниеПредыдущее) КАК НочноеПоказаниеПредыдущее,
	|	ЕСТЬNULL(втГлавная.ПиковоеПоказаниеПредыдущее, втТаблицаСчетчиков.ПиковоеПоказаниеПредыдущее) КАК ПиковоеПоказаниеПредыдущее,
	|	ЕСТЬNULL(втГлавная.ДневноеПоказание, НЕОПРЕДЕЛЕНО) КАК ДневноеПоказание,
	|	ЕСТЬNULL(втГлавная.НочноеПоказание, НЕОПРЕДЕЛЕНО) КАК НочноеПоказание,
	|	ЕСТЬNULL(втГлавная.ПиковоеПоказание, НЕОПРЕДЕЛЕНО) КАК ПиковоеПоказание,
	|	ЕСТЬNULL(втГлавная.ДатаПоказания, &ДатаДокумента) КАК ДатаПоказания,
	|	ЕСТЬNULL(втГлавная.ДатаПредыдущегоПоказания, ЕСТЬNULL(втТаблицаСчетчиков.ДатаПредыдущегоПоказания, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаПредыдущегоПоказания,
	|	ЕСТЬNULL(втГлавная.ПредыдущееПоказаниеНачальное, ЕСТЬNULL(втТаблицаСчетчиков.ПредыдущееПоказаниеНачальное, ИСТИНА)) КАК ПредыдущееПоказаниеНачальное,
	|	ЕСТЬNULL(втГлавная.КоэффициентТрансформации, втТаблицаСчетчиков.КоэффициентТрансформации) КАК КоэффициентТрансформации,
	|	ЕСТЬNULL(втГлавная.ТемпературныйКоэффициент, втТаблицаСчетчиков.ТемпературныйКоэффициент) КАК ТемпературныйКоэффициент
	|ИЗ
	|	втГлавная КАК втГлавная
	|		ПОЛНОЕ СОЕДИНЕНИЕ втТаблицаСчетчиков КАК втТаблицаСчетчиков
	|		ПО втГлавная.Счетчик = втТаблицаСчетчиков.Счетчик
	|			И втГлавная.Объект = втТаблицаСчетчиков.Объект";
	
	Запрос.УстановитьПараметр("ГлавнаяБуффер",    ГлавнаяБуфер);
	Запрос.УстановитьПараметр("ТаблицаСчетчиков", тмТаблицаСчетчиков);
	Запрос.УстановитьПараметр("ДатаДокумента",    Дата);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Главная.Загрузить(Таблица);
	
КонецПроцедуры // ДополнитьТаблицуОбъектами()

#КонецОбласти 

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Дополняем ТЧ "Главная" ревизитами счетчиков, если они еще не заполнены.
	ДополнитьТаблицуГлавнаяРеквизитамиСчетчиков();
	
	// Проверка реквизитов документа.
	ПроверяемыеРеквизиты.Добавить("Главная.Счетчик");
	ПроверяемыеРеквизиты.Добавить("Главная.Услуга");
	ПроверяемыеРеквизиты.Добавить("Главная.Объект");
	ПроверяемыеРеквизиты.Добавить("Главная.ДатаПоказания");
	
	// Проверим корректность ввода показаний.
	// Если не введены показания ни по одному прибору учета, то предупреждаем и не даем проводить документ.
	МассивСтрокДляПроверки = Новый Массив;
	Для Каждого ТекСтрока Из Главная Цикл
		
		Если Не ТекСтрока.ДневноеПоказание = Неопределено
		 Или Не ТекСтрока.НочноеПоказание  = Неопределено
		 Или Не ТекСтрока.ПиковоеПоказание = Неопределено Тогда
			МассивСтрокДляПроверки.Добавить(ТекСтрока);
		КонецЕсли;
		
		СтруктураПоказаний = Новый Структура("Счетчик, НомерСтроки, Разрядность, Тарифность, СпособРегистрацииПоказаний, Помещение, ДатаПредыдущегоПоказания",
											  ТекСтрока.Счетчик, ТекСтрока.НомерСтроки, ТекСтрока.Разрядность, ТекСтрока.Тарифность,
											  ТекСтрока.СпособРегистрацииПоказаний, ТекСтрока.Помещение, ТекСтрока.ДатаПредыдущегоПоказания);
		
		СтруктураПоказаний.Вставить("ДневноеПоказание",
										?(ТекСтрока.ДневноеПоказание = Неопределено, 0, ТекСтрока.ДневноеПоказание));
		СтруктураПоказаний.Вставить("НочноеПоказание",
										?(ТекСтрока.НочноеПоказание = Неопределено, 0, ТекСтрока.НочноеПоказание));
		СтруктураПоказаний.Вставить("ПиковоеПоказание",
										?(ТекСтрока.ПиковоеПоказание = Неопределено, 0, ТекСтрока.ПиковоеПоказание));
		
		Отказ = Отказ Или Не УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПроверитьКорректностьПоказанийСчетчика(СтруктураПоказаний, Истина);
		
	КонецЦикла;
	
	Если МассивСтрокДляПроверки.Количество() = 0 Тогда
		ТекстОшибки = "Не введены показания ни по одному прибору учета.";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
	КонецЕсли;
	
	// Если документ не вводит начальные показания и настройка контроля показаний включена,
	// тогда перед проведением осуществим проверку на корректность введенных показаний.
	ИспользуетсяКонтрольПоказанийПриборовУчета = УПЖКХ_ПараметрыУчетаСервер.ИспользоватьКонтрольПоказанийПриборовУчета();
	Если Не ВводНачальныхПоказаний И ИспользуетсяКонтрольПоказанийПриборовУчета Тогда
		
		Для Каждого СтрокаСчетчика Из Главная Цикл
			
			СтруктураПоказаний = Новый Структура ("Счетчик, Разрядность, СпособРегистрацииПоказаний, ДатаПоказания,
												  |ПереходЧерезНольДневное, ПереходЧерезНольНочное, ПереходЧерезНольПиковое,
												  |ТипОшибкиДневной, ТипОшибкиНочной, ТипОшибкиПиковый, ДатаПредыдущегоПоказания,
												  |ПредыдущееПоказаниеНачальное, ДневноеПоказание, НочноеПоказание, ПиковоеПоказание,
												  |ДневноеПоказаниеПредыдущее, НочноеПоказаниеПредыдущее, ПиковоеПоказаниеПредыдущее,
												  |СреднийРасходДневной, СреднийРасходНочной, СреднийРасходПиковый");
			
			ЗаполнитьЗначенияСвойств(СтруктураПоказаний, СтрокаСчетчика);
			
			УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ЗаполнитьПризнакиОшибокВПоказаниях(СтруктураПоказаний, УПЖКХ_ПараметрыУчетаСервер.РазмерДопустимогоПревышенияСреднегоРасходаПрибораУчета(), ИспользуетсяКонтрольПоказанийПриборовУчета);
			
			// Если заполнен тип ошибки хотя бы по одному виду тарифа, то ошибки есть.
			ЕстьОшибкиВСтроке = Не ПустаяСтрока(СтруктураПоказаний.ТипОшибкиДневной)
							Или Не ПустаяСтрока(СтруктураПоказаний.ТипОшибкиНочной)
							Или Не ПустаяСтрока(СтруктураПоказаний.ТипОшибкиПиковый);
			
			// Если есть ошибки в строке, и они не подтверждены пользователем,
			// то прекращаем проверку, уходим в отказ и информируем пользователя.
			Если ЕстьОшибкиВСтроке И Не СтрокаСчетчика.ПоказанияКорректны Тогда
				
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Обнаружены строки с некорректными показаниями! Проведение документа невозможно." + Символы.ПС 
																+ "Укажите корректные показания либо подтвердите их корректность установкой флажка в соответствующей строке.", Отказ);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Неопределено;
	
	// Проверим корректность ввода дат показаний.
	// Если дата показания указана более ранняя, чем начало месяца, то предупреждаем и не даем проводить документ.
	
	// Для информации:
	// Давать в текущем периоде вводить показания за прошлый период не имеет смысла,
	// т.к. в текущем периоде нет возможности перерасчета по показаниям за прошлые периоды.
	
	Если НЕ Отказ И НЕ ВводНачальныхПоказаний Тогда
		
		Запрос = СформироватьЗапросПоТаблицеСчетчиков(МассивСтрокДляПроверки);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаСчетчиков.НомерСтроки,
		|	ТаблицаСчетчиков.Счетчик,
		|	ТаблицаСчетчиков.ДатаПоказания
		|ИЗ
		|	ТаблицаСчетчиков КАК ТаблицаСчетчиков
		|ГДЕ
		|	ТаблицаСчетчиков.ДатаПоказания < &ДатаНач";
		
		Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Дата));
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока РезультатЗапроса.Следующий() Цикл
			
			ТекстОшибки = "дата показания не может быть раньше начала месяца от даты текущего документа ввода показаний";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке номер """ + РезультатЗапроса.НомерСтроки 
															+ """ табличной части: " + ТекстОшибки + "!", Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверим, не введены ли показания за более поздний период.
	// Если введены, то просто информируем и даем провести документ.
	Если НЕ Отказ Тогда
		
		Если Запрос = Неопределено Тогда
			Запрос = СформироватьЗапросПоТаблицеСчетчиков(МассивСтрокДляПроверки);
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаСчетчиков.НомерСтроки,
		|	ТаблицаСчетчиков.Счетчик,
		|	ТаблицаСчетчиков.ДатаПоказания,
		|	КВП_ПоказанияСчетчиковСрезПоследних.Период КАК ДатаПоследПоказания,
		|	КВП_ПоказанияСчетчиковСрезПоследних.Регистратор
		|ИЗ
		|	ТаблицаСчетчиков КАК ТаблицаСчетчиков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(
		|				,
		|				Счетчик В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ТаблицаСчетчиков.Счетчик
		|					ИЗ
		|						ТаблицаСчетчиков)
		|				И НЕ Регистратор = &Регистратор) КАК КВП_ПоказанияСчетчиковСрезПоследних
		|		ПО ТаблицаСчетчиков.Счетчик = КВП_ПоказанияСчетчиковСрезПоследних.Счетчик
		|ГДЕ
		|	ТаблицаСчетчиков.ДатаПоказания <= КВП_ПоказанияСчетчиковСрезПоследних.Период";
		
		Запрос.УстановитьПараметр("Регистратор", ЭтотОбъект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока РезультатЗапроса.Следующий() Цикл
			
			ТекстОшибки = "показания по прибору учета уже введены за более позднюю дату документом """
						 + РезультатЗапроса.Регистратор + """";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке номер """ + РезультатЗапроса.НомерСтроки 
															+ """ табличной части: " + ТекстОшибки + "!");
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработка события объекта "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.Свойство("ОбработкаСвязанныхДокументов") Тогда
		УПЖКХ_ОбщегоНазначенияСервер.ОбработатьСвязьДокументовВводаПоказанийИКорректировкиНачисленийПриЗаписи(ЭтотОбъект, Отказ, РежимЗаписи);
	КонецЕсли;
	
	КраткийСоставДокумента = ЗаполнитьКраткийСоставДокументаПоТЧ(Главная,"Услуга");
	
КонецПроцедуры

// Процедура проведения документа.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.УПЖКХ_ВводПоказанийСчетчика.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	ТаблицаГлавная          = ПараметрыПроведения.ТаблицаГлавная;
	
	ЗаполнитьТаблицуИзмененияСчетчиков(ТаблицаГлавная, Отказ);
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаГлавная);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ПроведениеДокументаВводПоказанийСчетчикаЖкх", ВремяНачала);
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
КонецПроцедуры

// Обработчик события "ОбработкаЗаполнения" документа.
//
// Данные заполнения представляют собой структуру со следующими полями:
//     - ВидОперации - перечисление "КВП_ВидыОперацийВводаПоказанийСчетчика" - вид операции документа.
//     - Дата - дата - дата документа.
//     - Услуга - справочник "Услуги" - услуга документа.
//     - Объект - лицевой счет, помещение, подъезд, здание - объект документа.
//     - Комментарий - Строка - комментарий к документу.
//     - ВводНачальныхПоказаний - булево - указывает, являются ли показания начальными.
//     - Ответственный - справочник "Пользователи" - ответственный за проведение документа.
//     - ПроводитьСформированныеДокументы - булево - указывает, нужно ли проводить документ
//       или достаточно только записать.
//     - ФормироватьДокументыВРазрезеЗданий - булево - указывает, что для каждого здания нужно
//       формировать отдельный документ показаний.
//        Используется только при массовом формировании документов.
//     - ФормироватьДокументыВРазрезеУслуг - булево - указывает, что для каждой услуги нужно
//       формировать отдельный документ показаний.
//        Используется только при массовом формировании документов.
//     - ТаблицаПоказаний - таблица значений с показаниями счетчиков. Содержит следующие колонки:
//          - Счетчик.
//          - Услуга.
//          - ДатаПоказания.
//          - ДневноеПоказание.
//          - НочноеПоказание.
//          - ПиковоеПоказание.
//          - Объект.
//          - ПоказанияКорректны.
//          - СреднийРасходДневной.
//          - СреднийРасходНочной.
//          - СреднийРасходПиковый.
//
// Механизм заполнения не требует обязательного наличия всех полей структуры.
// При отсутствии каких-либо данных, будет выполнена попытка их дозаполнения
// данными из базы или значениями по умолчанию.
// Если данных для формирования документа не хватит, документ сформирован не будет.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// При массовом формировании документов обработка данных заполнения выполняется до их передачу в обработку заполнения,
	// поэтому повторно их обрабатывать не нужно.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ВыполняетсяМассовоеФормированиеДокументов") И ДанныеЗаполнения.ВыполняетсяМассовоеФормированиеДокументов = Истина Тогда
		ОснованиеЗаполнения = ДанныеЗаполнения;
	Иначе
		ОснованиеЗаполнения = Документы.УПЖКХ_ВводПоказанийСчетчика.ПодготовитьСтруктуруОснованияЗаполненияДокумента(ДанныеЗаполнения);
	КонецЕсли;
	
	Если ПроверитьВозможностьФормированияДокумента(ОснованиеЗаполнения, ДанныеЗаполнения) Тогда
		
		Главная.Очистить();
		
		// Заполняем реквизиты.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОснованиеЗаполнения);
		
		ДополнитьТаблицуПоказаний(ОснованиеЗаполнения);
		
		// Формируем документ.
		// Заполняем табличную часть "Главная".
		Для каждого ТекСтрока из ОснованиеЗаполнения.ТаблицаПоказаний Цикл
			НоваяСтрока = Главная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
	Иначе
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ОснованиеЗаполнения);
	
КонецПроцедуры

// Проверка возможности формирования документа.
//
Функция ПроверитьВозможностьФормированияДокумента(ОснованиеЗаполнения, ОснованиеЗаполненияВходящее)
	
	// Инициализация переменных.
	ДокументМожетБытьСформирован = Истина;
	СообщениеОбОшибке            = "";
	
	// Получаем все виды операций объектов.
	Если ОснованиеЗаполнения.ТаблицаПоказаний.Колонки.Найти("ВидОперации") = Неопределено Тогда
		ТаблицаВидовОпераций = Новый ТаблицаЗначений;
	Иначе
		ТаблицаВидовОпераций = ОснованиеЗаполнения.ТаблицаПоказаний.Скопировать(, "ВидОперации");
		ТаблицаВидовОпераций.Свернуть("ВидОперации");
	КонецЕсли;
	
	КоличествоВидовОперацийВТаблицеПоказаний = ТаблицаВидовОпераций.Количество();
	
	// Если строк нет, то документ не формируем.
	Если КоличествоВидовОперацийВТаблицеПоказаний = 0 Тогда
		
		ДокументМожетБытьСформирован = Ложь;
		
	// Если видов операций более одной, то не формируем.
	ИначеЕсли КоличествоВидовОперацийВТаблицеПоказаний > 1 Тогда
		
		ДокументМожетБытьСформирован = Ложь;
		
	// Если вид операции один, то проверяем дальше.
	Иначе
		
		ВидОперацииОбъектов = ТаблицаВидовОпераций[0].ВидОперации;
		
		// Если вид операции получен извне, то сравниваем вид операции в основании заполнения.
		Если ТипЗнч(ОснованиеЗаполненияВходящее) = Тип("Структура")
		   И ОснованиеЗаполненияВходящее.Свойство("ВидОперации")
		   И ТипЗнч(ОснованиеЗаполненияВходящее.ВидОперации) = Тип("ПеречислениеСсылка.КВП_ВидыОперацийВводаПоказанийСчетчика") Тогда
			
			ДокументМожетБытьСформирован = ОснованиеЗаполнения.ВидОперации = ВидОперацииОбъектов;
			
		// Если вид операции не был передан извне, то используем вид операции объектов.
		Иначе
			
			ОснованиеЗаполнения.ВидОперации = ВидОперацииОбъектов;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументМожетБытьСформирован;
	
КонецФункции

// Обработчик события "ПриКопировании" документа.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	
КонецПроцедуры

// Возвращает таблицу дат поверки по отключенным приборам учета.
Функция ПолучитьТаблицуДатПоверкиОтключенныхВТекущемМесяцеПриборовУчета(СтруктураШапкиДокумента)
	
	// В данной функции среди приборов учета (ПУ), по которым вводятся показания текущим документом, 
	// отбираются только те ПУ, которые отключены на поверку в текущем месяце.
	// Если для таких ПУ показания вводятся позже даты отключения, то ввод показаний
	// осуществляется на дату отключения - поверки.
	
	// Для информации:
	// Ранее в рамках данной процедуры выполнялось получение всегда последних дат поверки,
	// что в ситуациях, когда ПУ был отключен на поверку, затем повторно установлен без даты поверки, 
	// приводило к ошибке, т.к. показания продолжали относится на старую (фактически неактуальную) дату поверки.
	
	ЗапросДатыПоверкиСчетчиков = Новый Запрос;
	ЗапросДатыПоверкиСчетчиков.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОДатеПоверки.Счетчик КАК Счетчик,
	|	СведенияОДатеПоверки.ДатаИзменения КАК ДатаПоверки
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			,
	|			Счетчик В (&СписокПУ)
	|				И Объект В (&СписокОбъектов)
	|				И ПричинаОтключения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПричиныОтключенияПриборовУчета.Поверка)
	|				И (ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон)) КАК СведенияОДатеПоверки";
	
	ЗапросДатыПоверкиСчетчиков.УстановитьПараметр("ДатаНач",        НачалоМесяца(СтруктураШапкиДокумента.Дата));
	ЗапросДатыПоверкиСчетчиков.УстановитьПараметр("ДатаКон",        КонецМесяца(СтруктураШапкиДокумента.Дата));
	ЗапросДатыПоверкиСчетчиков.УстановитьПараметр("СписокПУ",       Главная.ВыгрузитьКолонку("Счетчик"));
	ЗапросДатыПоверкиСчетчиков.УстановитьПараметр("СписокОбъектов", Главная.ВыгрузитьКолонку("Объект"));
	
	Возврат ЗапросДатыПоверкиСчетчиков.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуДатПоверкиОтключенныхВТекущемМесяцеПриборовУчета()

#КонецОбласти 

#КонецЕсли