
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мУдалятьДвижения Экспорт;                      // Хранит признак новый ли это документ.
Перем мНастройкиУчетнойПолитикиТСЖ Экспорт;          // Хранит настройки учетной политики по ТСЖ.
Перем ВестиУчетНачисленийПоДобровольномуСтрахованию; // Хранит признак того, что ведется учет по добровольному страхованию.
Перем УслугаДобровольногоСтрахования;                // Хранит ссылку на услугу добровольного страхования.
Перем мСтруктураНастроекКапРемонта;                  // Хранит настройки капитального ремонта по организации.

#Область ПроцедурыИФункцииПроведенияДокумента

// Процедура выполняет движение регистра накоплений "Взаиморасчеты по лицевым счетам".
//
Процедура ПроизвестиДвижениеВзаиморасчетов(ВидДвижения, ЛицевойСчет, Договор, стр, Сумма, ИспользуетсяНовыйМеханизмОтражения)
	
	Движение = Движения.КВП_ВзаиморасчетыПоЛицевымСчетам.Добавить();
	Движение.Период          = Дата;
	Движение.Активность      = Истина;
	Движение.Организация     = Организация;
	Движение.ВидДвижения     = ВидДвижения;
	Движение.ЛицевойСчет     = ЛицевойСчет;
	
	Если Не ИспользуетсяНовыйМеханизмОтражения Тогда
		Движение.Договор     = Договор;
	КонецЕсли;
	
	Движение.Услуга          = стр.Услуга;
	Движение.ВидНачисления   = стр.ВидНачисления;
	Движение.МесяцНачисления = КонецМесяца(стр.МесяцНачисления);
	Движение.СуммаНачисления = Сумма;
	
КонецПроцедуры

// Процедура выполняет движение регистра накоплений "Начисления".
//
Процедура ПроизвестиДвижениеНачислений(ЛицевойСчет, Договор, стр, Сумма, ИспользуетсяНовыйМеханизмОтражения)
	
	Движение = Движения.УПЖКХ_Начисления.Добавить();
	Движение.Период      = Дата;
	Движение.Активность  = Истина;
	Движение.Организация = Организация;
	Движение.ЛицевойСчет = ЛицевойСчет;
	
	Если Не ИспользуетсяНовыйМеханизмОтражения Тогда
		Движение.Договор = Договор;
	КонецЕсли;
	
	Движение.Услуга      = стр.Услуга;
	
	Если стр.ВидНачисления = Перечисления.КВП_ВидыНачисленияОстатки.Начисление Тогда
		Движение.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг;
	ИначеЕсли стр.ВидНачисления = Перечисления.КВП_ВидыНачисленияОстатки.Рассрочка Тогда
		Движение.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.Рассрочка;
	ИначеЕсли стр.ВидНачисления = Перечисления.КВП_ВидыНачисленияОстатки.Пени Тогда
		Движение.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.Пени;
	КонецЕсли;
	
	Движение.ВидНачисления   = Перечисления.УПЖКХ_ВидыНачислений.Корректировка;
	Движение.МесяцНачисления = КонецМесяца(стр.МесяцНачисления);
	Движение.СуммаНачисления = Сумма;
	
КонецПроцедуры

// Процедура выполняет движения по отражению начислений в регл. учете.
//
Процедура ПроизвестиДвижениеОтражений(ВидДвижения, ЛицевойСчет, Договор, стр, Сумма, ИспользуетсяНовыйМеханизмОтражения)
	
	Если ИспользуетсяНовыйМеханизмОтражения Тогда
		// Если используется новый механизм отражения начислений,
		// то формируем движения в новом регистре остатков в разрезе месяцев отражения.
		ПроизвестиДвиженияПоРегиструДанныеДляОтраженияНачисленийВРеглУчете(ВидДвижения, ЛицевойСчет, стр);
	Иначе
		// Если используется старый механизм отражения, то отражение начислений производим по-старому.
		ПроизвестиДвиженияПоРегиструНачислениеДляОтраженияВРеглУчете(ВидДвижения, ЛицевойСчет, Договор, стр, Сумма);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение регистров для операции "Перенос задолженности".
Процедура ПереносЗадолженности(ИспользуетсяНовыйМеханизмОтражения)
	
	Движения.КВП_ВзаиморасчетыПоЛицевымСчетам.Записывать     = Истина;
	Движения.КВП_НачислениеДляОтраженияВРеглУчете.Записывать = Истина;
	
	Для Каждого стр Из СуммыДолга Цикл
		
		// Движения по РН КВП_ВзаиморасчетыПоЛицевымСчетам.
		Сумма = ?(стр.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, 1, -1) * стр.СуммаНачисления;
		ПроизвестиДвижениеВзаиморасчетов(ВидДвиженияНакопления.Расход, ЛицевойСчет, стр.Договор, стр, Сумма, ИспользуетсяНовыйМеханизмОтражения);
		ПроизвестиДвижениеВзаиморасчетов(ВидДвиженияНакопления.Приход, ЛицевойСчетПолучатель, ДоговорПолучатель, стр, Сумма, ИспользуетсяНовыйМеханизмОтражения);
		
		// Движения по РН Начисления.
		Сумма = ?(стр.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,
		         -стр.СуммаНачисления, стр.СуммаНачисления);
		
		ПроизвестиДвижениеНачислений(ЛицевойСчет, стр.Договор, стр, Сумма, ИспользуетсяНовыйМеханизмОтражения);
		
		Сумма = ?(стр.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,
		         стр.СуммаНачисления, -стр.СуммаНачисления);
		
		ПроизвестиДвижениеНачислений(ЛицевойСчетПолучатель, ДоговорПолучатель, стр, Сумма, ИспользуетсяНовыйМеханизмОтражения);
		
		// Движения по РН КВП_НачислениеДляОтраженияВРеглУчете.
		Если КорректироватьНачисления Тогда
			Сумма = ?(стр.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,
			          стр.СуммаНачисления, -стр.СуммаНачисления);
			ПроизвестиДвижениеОтражений(ВидДвиженияНакопления.Расход, ЛицевойСчет, стр.Договор, стр, Сумма, ИспользуетсяНовыйМеханизмОтражения);
			ПроизвестиДвижениеОтражений(ВидДвиженияНакопления.Приход, ЛицевойСчетПолучатель, ДоговорПолучатель, стр, Сумма, ИспользуетсяНовыйМеханизмОтражения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение регистров для операции "проведение взаимозачета".
Процедура ПроведениеВзаимозачета(ИспользуетсяНовыйМеханизмОтражения)
	
	Движения.КВП_ВзаиморасчетыПоЛицевымСчетам.Записывать = Истина;
	
	Для Каждого стр Из СуммыДолга Цикл
		
		// Движения по РН КВП_ВзаиморасчетыПоЛицевымСчетам.
		Сумма = ?(стр.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, 1, -1) * стр.СуммаНачисления;
		ПроизвестиДвижениеВзаиморасчетов(ВидДвиженияНакопления.Расход, стр.ЛицевойСчет, стр.Договор, стр, Сумма, ИспользуетсяНовыйМеханизмОтражения);
		
		// Движения по РН Начисления.
		Сумма = ?(стр.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, -1, 1) * стр.СуммаНачисления;
		ПроизвестиДвижениеНачислений(стр.ЛицевойСчет, стр.Договор, стр, Сумма, ИспользуетсяНовыйМеханизмОтражения);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение регистров для операции "списание задолженности".
Процедура СписаниеЗадолженности(ИспользуетсяНовыйМеханизмОтражения)
	
	Движения.КВП_ВзаиморасчетыПоЛицевымСчетам.Записывать     = Истина;
	Движения.КВП_НачислениеДляОтраженияВРеглУчете.Записывать = Истина;
	
	Для Каждого стр Из СуммыДолга Цикл
		
		// Движения по РН КВП_ВзаиморасчетыПоЛицевымСчетам.
		Сумма = ?(стр.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, 1, -1) * стр.СуммаНачисления;
		ПроизвестиДвижениеВзаиморасчетов(ВидДвиженияНакопления.Расход, стр.ЛицевойСчет, стр.Договор, стр, Сумма, ИспользуетсяНовыйМеханизмОтражения);
		
		// Движения по РН Начисления.
		Сумма = ?(стр.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, -1, 1) * стр.СуммаНачисления;
		ПроизвестиДвижениеНачислений(стр.ЛицевойСчет, стр.Договор, стр, Сумма, ИспользуетсяНовыйМеханизмОтражения);
		
		// Движения по РН КВП_НачислениеДляОтраженияВРеглУчете.
		Если КорректироватьНачисления Тогда
			Сумма = ?(стр.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,
			          стр.СуммаНачисления, -стр.СуммаНачисления);
			ПроизвестиДвижениеОтражений(ВидДвиженияНакопления.Расход, ЛицевойСчет, стр.Договор, стр, Сумма, ИспользуетсяНовыйМеханизмОтражения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

// Проведение документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если мУдалятьДвижения Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	КонецЕсли;
	
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата,
																										  Организация, Отказ);
	
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
	
	ПараметрыПроведения = Документы.КВП_КорректировкаВзаиморасчетовЖКХ.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует новый механизм отражения
	// начислений в регл. учете договор в проводках не заполняется. Для тех, кто использует старый механизм договор
	// по-прежнему заполняется в проводках.
	ИспользуетсяНовыйМеханизмОтражения = УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
	
	// Движения по документу.
	Если Не Отказ Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			ПереносЗадолженности(ИспользуетсяНовыйМеханизмОтражения);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
			ПроведениеВзаимозачета(ИспользуетсяНовыйМеханизмОтражения);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
			СписаниеЗадолженности(ИспользуетсяНовыйМеханизмОтражения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует движения по отражению начислений в регл. учете
// в регистре накопления "УПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчете".
Процедура ПроизвестиДвиженияПоРегиструДанныеДляОтраженияНачисленийВРеглУчете(ВидДвижения, ЛицевойСчет, стр)
	
	Движение                         = Движения.УПЖКХ_ДанныеДляОтраженияНачисленийВРеглУчете.Добавить();
	Движение.Период                  = Дата;
	Движение.Активность              = Истина;
	Движение.ВидДвижения             = ВидДвиженияНакопления.Приход;
	Движение.Организация             = Организация;
	
	// В качестве месяца отражения берем период, в котором произведена корректировка начислений.
	Движение.МесяцОтражения          = НачалоМесяца(Дата);
	Движение.Услуга                  = стр.Услуга;
	Движение.ЛицевойСчет             = ЛицевойСчет;
	
	// Меняем знаки. Необходимо для совместимости старого и нового алгоритма отражения.
	Если ВидДвижения = ВидДвиженияНакопления.Расход Тогда
		Знак = ?(стр.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, -1, 1);
	Иначе
		Знак = ?(стр.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, 1, -1);
	КонецЕсли;
	
	Движение.Сумма                   = Знак * стр.СуммаНачисления;
	
	Если стр.ВидНачисления = Перечисления.КВП_ВидыНачисленияОстатки.Пени Тогда
		// Это пени, если пени отражаются отдельно от начислений.
		Движение.РазделУчета      = Перечисления.УПЖКХ_РазделыУчета.Пени;
	Иначе
		// В остальных случаях это корректировка.
		Движение.РазделУчета      = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг;
		Движение.ЭтоКорректировка = Истина;
		Движение.ВидКорректировки = Перечисления.УПЖКХ_ВидыКорректировокДляОтраженияВРеглУчете.Перерасчет;
		
		// В качестве периода корректировки берем месяц, за который произведена 
		// корректировка начисления в текущем месяце отражения.
		Движение.ПериодКорректировки = НачалоМесяца(стр.МесяцНачисления);
	КонецЕсли;
	
	// Поля Номенклатура, НоменклатурнаяГруппа, ДоговорКонтрагента, ВариантПоставкиУслуг, ДоговорПоставщикаУслуг 
	// теперь определяются непосредственно в документе отражения начислений.
	
КонецПроцедуры // ПроизвестиДвиженияПоРегиструДанныеДляОтраженияНачисленийВРеглУчете()

// Процедура формирует движения в регистре накоплений "Начисление для отражения в регламентированном учете".
//
Процедура ПроизвестиДвиженияПоРегиструНачислениеДляОтраженияВРеглУчете(ВидДвижения, ЛицевойСчет, Договор, стр, Сумма)
	
	Движение                        = Движения.КВП_НачислениеДляОтраженияВРеглУчете.Добавить();
	Движение.Период                 = Дата;
	Движение.Активность             = Истина;
	Движение.ВидДвижения            = ВидДвижения;
	Движение.Организация            = Организация;
	Движение.ДоговорКонтрагента     = Договор;
	Движение.Номенклатура           = стр.Услуга.Услуга;
	Движение.НоменклатурнаяГруппа   = ПолучитьНоменклатурнуюГруппуДляОбъектаУчета(ЛицевойСчет, стр.Услуга.Услуга);
	
	ДанныеОПоставщикеУслуги         = ПолучитьДанныеОПоставщикеУслуги(Организация,
																	  стр.Услуга, ЛицевойСчет, Дата);
	Движение.ВариантПоставкиУслуг   = ?(ДанныеОПоставщикеУслуги.ВариантПоставкиУслуг = Неопределено, 
											Перечисления.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.КупляПродажаУслуг, 
											ДанныеОПоставщикеУслуги.ВариантПоставкиУслуг);
	Движение.ДоговорПоставщикаУслуг = ДанныеОПоставщикеУслуги.ДоговорПоставщикаУслуг;
	Движение.Сумма                  = Сумма;
	
	Если стр.ВидНачисления = Перечисления.КВП_ВидыНачисленияОстатки.Пени Тогда
		
		// Для пени по капремонту в УП есть своя настройка отдельного/совместного отражения от начислений.
		Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет
			 И Не мСтруктураНастроекКапРемонта.СписокУслуг.НайтиПоЗначению(стр.Услуга) = Неопределено Тогда
			
			Движение.ЭтоПени = (мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПениКапремонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета")
								Или мНастройкиУчетнойПолитикиТСЖ.СтавкаНДСДляОтраженияПени = Перечисления.УПЖКХ_СтавкиНДСДляПениПриОтраженииВРеглУчете.БезНДС);
			
		Иначе
			
			Движение.ЭтоПени = (мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПени = ПредопределенноеЗначение("Перечисление.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета")
								Или мНастройкиУчетнойПолитикиТСЖ.СтавкаНДСДляОтраженияПени = Перечисления.УПЖКХ_СтавкиНДСДляПениПриОтраженииВРеглУчете.БезНДС);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроизвестиДвиженияПоРегиструНачислениеДляОтраженияВРеглУчете()

#КонецОбласти

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("ЛицевойСчет");
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует новый механизм отражения
	// начислений в регл. учете договор в проводках не заполняется. Для тех, кто использует старый механизм договор
	// по-прежнему заполняется в проводках. Поэтому при использовании нового механизма отражения не будем проверять
	// заполненность договора.
	ПроверятьЗаполнениеДоговора = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
		 И ПроверятьЗаполнениеДоговора Тогда
		ПроверяемыеРеквизиты.Добавить("ДоговорПолучатель");
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		ПроверяемыеРеквизиты.Добавить("ЛицевойСчетПолучатель");
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("СуммыДолга.СуммаНачисления");
	ПроверяемыеРеквизиты.Добавить("СуммыДолга.Услуга");
	
	Если ПроверятьЗаполнениеДоговора Тогда
		ПроверяемыеРеквизиты.Добавить("СуммыДолга.Договор");
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("СуммыДолга.МесяцНачисления");
	ПроверяемыеРеквизиты.Добавить("СуммыДолга.ВидНачисления");
	
	// Проверим, нет ли корректировок добровольного страхования.
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		СтрокиСтрахования = СуммыДолга.НайтиСтроки(Новый Структура("Услуга", УслугаДобровольногоСтрахования));
		
		Если Не СтрокиСтрахования.Количество() = 0 Тогда
			Отказ = Истина;
			
			Для Каждого СтрокаСтрахования Из СтрокиСтрахования Цикл
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке " + СтрокаСтрахования.НомерСтроки + " указана услуга добровольного страхования, взаиморасчеты по которой нельзя корректировать.");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Если проведение взаимозачета - проверим на совпадение суммы дебиторской и кредиторской задолженности. 
	// Взаимозачет проводится только при полном совпадении сумм.
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
		
		СуммаКред = 0;
		СтрокиКред = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности",Перечисления.ВидыЗадолженности.Кредиторская));
		Для Каждого ТекСтрока Из СтрокиКред Цикл
			СуммаКред = СуммаКред + ТекСтрока.СуммаНачисления;
		КонецЦикла;
		
		СуммаДеб = 0;
		СтрокиДеб = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская));
		Для Каждого ТекСтрока Из СтрокиДеб Цикл
			СуммаДеб = СуммаДеб + ТекСтрока.СуммаНачисления;
		КонецЦикла;
		
		Разница = СуммаДеб - СуммаКред;
		
		Если Разница <> 0  Тогда
			ТекстСообщения = "Не совпадают суммы дебиторской и кредиторской задолженности при проведении взаимозачета. 
							 |Взаимозачет не может быть проведен.";
			ТекстСообщения = ТекстСообщения + Символы.ПС 
						   + "Дебиторская задолженность: "  + Формат(СуммаДеб, "ЧЦ=15; ЧДЦ=2");
			ТекстСообщения = ТекстСообщения + Символы.ПС 
						   + "Кредиторская задолженность: " + Формат(СуммаКред, "ЧЦ=15; ЧДЦ=2");
			ТекстСообщения = ТекстСообщения + Символы.ПС 
						   + "Разница: " + Формат(Разница, "ЧЦ=15; ЧДЦ=2");
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияПеременных

НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;

#КонецОбласти

#КонецЕсли