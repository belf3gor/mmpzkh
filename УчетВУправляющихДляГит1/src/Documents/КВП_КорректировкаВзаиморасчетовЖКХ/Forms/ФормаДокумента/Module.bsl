
#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.ВидыОперацийКорректировкаДолга.Прочее") Тогда
		
		Элементы.ДоговорПолучатель.Видимость            = Ложь;
		Элементы.ЛицевойСчетПолучатель.Видимость        = Истина;
		
		Элементы.УменьшениеДолга.Видимость    = Ложь;
		Элементы.Взаиморасчеты.Заголовок      = "Взаиморасчеты";
		
		Элементы.СуммыДолга.ОтборСтрок = Неопределено;
		
		Элементы.СуммыДолгаВидЗадолженности.Видимость = Истина;
		Элементы.КорректироватьНачисления.Видимость   = Ложь;
		Элементы.НадписьКорректировки.Видимость       = Ложь;
		
	Иначе
		
		Если Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности") Тогда
			Элементы.ЛицевойСчетПолучатель.Видимость = Истина;
			Элементы.ДоговорПолучатель.Видимость     = Истина;
		Иначе
			Элементы.ЛицевойСчетПолучатель.Видимость = Ложь;
			Элементы.ДоговорПолучатель.Видимость     = Ложь;
		КонецЕсли;
		
		Элементы.УменьшениеДолга.Видимость    = Истина;
		Элементы.Взаиморасчеты.Заголовок      = "Увеличение долга";
		
		Элементы.СуммыДолгаУменьшение.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидЗадолженности", ПредопределенноеЗначение(
																										"Перечисление.ВидыЗадолженности.Дебиторская"));
		Элементы.СуммыДолга.ОтборСтрок           = Новый ФиксированнаяСтруктура("ВидЗадолженности", ПредопределенноеЗначение(
																										"Перечисление.ВидыЗадолженности.Кредиторская"));
		
		Элементы.СуммыДолгаВидЗадолженности.Видимость = Ложь;
		Элементы.КорректироватьНачисления.Видимость   = Истина;
		Элементы.НадписьКорректировки.Видимость       = Истина;
		
	КонецЕсли;
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует новый механизм отражения
	// начислений в регл. учете договор в проводках не заполняется. Для тех, кто использует старый механизм договор
	// по-прежнему заполняется в проводках.
	// При использовании нового механизма отражения поля и колонки для заполнения договора выводить не будем.
	Если УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Объект.Дата) Тогда
		
		Элементы.ДоговорПолучатель.Видимость           = Ложь;
		Элементы.СуммыДолгаДоговор.Видимость           = Ложь;
		Элементы.СуммыДолгаУменьшениеДоговор.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьЭлементов()

&НаСервере
// Процедура - вывод надписи на форму.
Процедура ВывестиНадписи()
	
	ТабСумм         = Объект.СуммыДолга.Выгрузить();
	ТабКредиторская = ТабСумм.Скопировать();
	Сч = 0;
	Пока Сч < ТабКредиторская.Количество() Цикл
		СтрокаТаблицы = ТабКредиторская.Получить(Сч);
		Если СтрокаТаблицы.ВидЗадолженности <> Перечисления.ВидыЗадолженности.Кредиторская Тогда
			ТабКредиторская.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТабДебиторская = ТабСумм.Скопировать();
	Сч = 0;
	Пока Сч < ТабДебиторская.Количество() Цикл
		СтрокаТаблицы = ТабДебиторская.Получить(Сч);
		Если СтрокаТаблицы.ВидЗадолженности <> Перечисления.ВидыЗадолженности.Дебиторская Тогда
			ТабДебиторская.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	СуммаКред = ТабКредиторская.Итог("СуммаНачисления");
	СуммаДеб  = ТабДебиторская.Итог("СуммаНачисления");
	
	Разница = СуммаДеб - СуммаКред;
	
	НадписьДебиторскаяЗадолженность  = "Дебиторская задолженность: " + Формат(СуммаДеб, "ЧЦ=15;ЧДЦ=2");
	НадписьКредиторскаяЗадолженность = "Кредиторская задолженность: " + Формат(СуммаКред, "ЧЦ=15;ЧДЦ=2");
		
	Если Разница = 0 И Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
		НадписьВзаимозачет = "ВЗАИМОЗАЧЕТ";
	Иначе
		НадписьВзаимозачет = "Разница: " + Формат(Разница, "ЧЦ=15;ЧДЦ=2");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
		Элементы.ЛицевойСчет.Заголовок           = "Дебитор";
		Элементы.ЛицевойСчетПолучатель.Заголовок = "Кредитор";
	Иначе
		Элементы.ЛицевойСчет.Заголовок           = "Лицевой счет";
		Элементы.ЛицевойСчетПолучатель.Заголовок = "Получатель";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура вызывает форму для выбора договора контрагента.
//
// Параметры:
// ТекДанные            - Текущие данные строки табличной части.
// Элемент              - <Поле ввода>
//                      - Текущий элемент строки табличной части.
// СтандартнаяОбработка - <Булево>
//                      - Значение определяющее выполнение стандартной обработки элемента формы.
//
Процедура ОткрытиеФормыВыбораДоговораКонтрагента(ДатаДокумента = Неопределено, ТекДанные = Неопределено,
													ТекЛицевойСчет = Неопределено, Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТекДанные = Неопределено Тогда
		ЛицевойСчетКонтрагента = ?(ЗначениеЗаполнено(ТекЛицевойСчет),
									ТекЛицевойСчет, ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка"));
	Иначе
		ЛицевойСчетКонтрагента = ?(ЗначениеЗаполнено(ТекДанные.ЛицевойСчет),
									ТекДанные.ЛицевойСчет, ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка"));
	КонецЕсли;
	СписокКонтрагентов = 
		ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчетуБезУчетаДаты(ДатаДокумента, ЛицевойСчетКонтрагента, "Контрагент");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	
	Если СписокКонтрагентов.Количество() > 0 Тогда
		СтруктураОтбора.Вставить("Владелец",    СписокКонтрагентов);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТекущаяСтрока", Объект.ДоговорПолучатель);
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	
	ФормаВыбора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", СтруктураПараметров, Элемент);
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры // ОткрытиеФормыВыбораДоговораКонтрагента()

&НаСервере
// Функция возвращает контрагетов по лицевому счету не учитывая дату.
//
// Параметры:
//  ЛицевойСчет - <Ссылка>
//              - Ссылка на лицевой счет, по которому производится поиск контрагентов.
Функция ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчетуБезУчетаДаты(ДатаДокумента = Неопределено,
																		ЛицевойСчет, ПолучаемыеДанные)
	
	СписокКонтрагентов = Новый СписокЗначений;
	
	ТипЗначОбъекта = ТипЗнч(ЛицевойСчет);
	Если Не ТипЗначОбъекта = Тип("СправочникСсылка.КВП_ЛицевыеСчета")
		И НЕ ТипЗначОбъекта = Тип("СправочникОбъект.КВП_ЛицевыеСчета") Тогда
		Возврат СписокКонтрагентов;
	Конецесли;
	
	ЗапросОсновнойДоговор = Новый Запрос();
	ЗапросОсновнойДоговор.УстановитьПараметр("Организация", Объект.Организация);
	Если ЗначениеЗаполнено(ДатаДокумента) Тогда
		
		ЗапросОсновнойДоговор.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Контрагент,
		|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Договор
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
		|			&Дата,
		|			ЛицевойСчет = &ЛицевойСчет
		|				И Организация = &Организация) КАК КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних";
		
		ЗапросОсновнойДоговор.УстановитьПараметр("Дата", ДатаДокумента);
		
	Иначе
		ЗапросОсновнойДоговор.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Контрагент,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Договор
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
		|ГДЕ
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет = &ЛицевойСчет
		|	И УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация = &Организация";
	КонецЕсли;
	
	ЗапросОсновнойДоговор.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	
	Выборка = ЗапросОсновнойДоговор.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокКонтрагентов.Добавить(Выборка[ПолучаемыеДанные]);
	КонецЦикла;
	
	Возврат СписокКонтрагентов;
	
КонецФункции // ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчетуБезУчетаДаты()

&НаКлиенте
// Проверка реквизитов формы, необходимых для заполнения табличных частей.
//
Функция ПроверитьРеквизитыФормыДляЗаполнения()
	
	ЕстьОшибка = Ложь;
	
	НадписьЛицевойСчет = "лицевой счет";
	НадписьПолучатель = "получатель";
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.ВидыОперацийКорректировкаДолга.Прочее") Тогда
		НадписьЛицевойСчет = "дебитор";
		НадписьПолучатель  = "кредитор";
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.ВидыОперацийКорректировкаДолга.Прочее") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ЛицевойСчетПолучатель) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан " + НадписьПолучатель);
			ЕстьОшибка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьОшибка;
	
КонецФункции // ПроверитьРеквизитыФормыДляЗаполнения()

&НаСервере
// Заполнение табличной части документа.
Процедура ЗаполнитьТабличнуюЧастьСуммыДолга()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Договор,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток < 0
	|			ТОГДА -КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
	|		ИНАЧЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
	|	КОНЕЦ КАК СуммаНачисления,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Дебиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Кредиторская)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ВидНачисления,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Договор.Владелец КАК Контрагент,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|ПОМЕСТИТЬ врОстатки
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&Дата,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА (НЕ &ЭтоВзаимозачет)
	|						ТОГДА ЛицевойСчет = &ЛицевойСчет
	|					ИНАЧЕ ЛицевойСчет = &ЛицевойСчет
	|							ИЛИ ЛицевойСчет = &ЛицевойСчетПолучатель
	|				КОНЕЦ) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врОстатки.Договор,
	|	врОстатки.Услуга,
	|	врОстатки.МесяцНачисления,
	|	врОстатки.СуммаНачисления,
	|	врОстатки.ВидЗадолженности,
	|	врОстатки.ВидНачисления,
	|	врОстатки.Контрагент,
	|	врОстатки.ЛицевойСчет
	|ИЗ
	|	врОстатки КАК врОстатки
	|ГДЕ
	|	((НЕ &ЭтоВзаимозачет)
	|			ИЛИ (врОстатки.ЛицевойСчет = &ЛицевойСчет
	|					И врОстатки.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Дебиторская)
	|				ИЛИ врОстатки.ЛицевойСчет = &ЛицевойСчетПолучатель
	|					И врОстатки.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Кредиторская)))";
	
	Запрос.УстановитьПараметр("Дата",                  Новый Граница(Объект.Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",           Объект.Организация);
	Запрос.УстановитьПараметр("ЛицевойСчет",           Объект.ЛицевойСчет);
	Запрос.УстановитьПараметр("ЛицевойСчетПолучатель", Объект.ЛицевойСчетПолучатель);
	Запрос.УстановитьПараметр("ЭтоВзаимозачет",        (Объект.ВидОперации = 
															Перечисления.ВидыОперацийКорректировкаДолга.Прочее));
	
	Объект.СуммыДолга.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	КонецЕсли;
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	УправлениеФормой(ЭтаФорма);
	
	ВывестиНадписи();
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Для Каждого ТекСтрока Из Объект.СуммыДолга Цикл
		ТекСтрока.МесяцНачисленияСтрокой = УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(ТекСтрока.МесяцНачисления)
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
	Для Каждого ТекСтрока Из Объект.СуммыДолга Цикл
		ТекСтрока.МесяцНачисленияСтрокой = УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(ТекСтрока.МесяцНачисления)
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОперации".
Процедура ВидОперацииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ДоговорПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытиеФормыВыбораДоговораКонтрагента(Объект.Дата, , Объект.ЛицевойСчетПолучатель, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЧНОЙ ЧАСТИ "СУММЫ ДОЛГА"

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "СуммыДолга".
Процедура СуммыДолгаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Если Объект.ЛицевойСчет.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Поле ""Лицевой счет"" не заполнено.", Отказ);
		КонецЕсли;
		Если Не Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности") И Объект.ЛицевойСчетПолучатель.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Поле ""Лицевой счет получатель"" не заполнено.", Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" поля "СуммыДолга".
Процедура СуммыДолгаПослеУдаления(Элемент)
	
	ВывестиНадписи();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" поля "СуммыДолга".
Процедура СуммыДолгаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если НЕ Объект.ВидОперации = ПредопределенноеЗначение(
										"Перечисление.ВидыОперацийКорректировкаДолга.Прочее") Тогда
			Элемент.ТекущиеДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская");
			Элемент.ТекущиеДанные.ЛицевойСчет      = Объект.ЛицевойСчет;
		КонецЕсли;
		
		Период                                        = КонецМесяца(ДобавитьМесяц(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату(), -1));
		Элемент.ТекущиеДанные.МесяцНачисления         = Период;
		Элемент.ТекущиеДанные.МесяцНачисленияСтрокой  = УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Период);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля "СуммыДолга".
Процедура СуммыДолгаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.МесяцНачисленияСтрокой = КВП_РаботаСДиалогами.ПолучитьПредставлениеМесяца(ТекущиеДанные.МесяцНачисления);
	
	ВывестиНадписи();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СуммыДолгаВидЗадолженности".
Процедура СуммыДолгаВидЗадолженностиПриИзменении(Элемент)
	
	ТекДанные = Элементы.СуммыДолга.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.ВидыОперацийКорректировкаДолга.Прочее") Тогда
		
		Если ТекДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская") Тогда
			ЛицевойСчетДоговора = Объект.ЛицевойСчет;
		ИначеЕсли ТекДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская") Тогда
			ЛицевойСчетДоговора = Объект.ЛицевойСчетПолучатель;
		КонецЕсли;
		
		Договор = ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчетуБезУчетаДаты(Объект.Дата, ЛицевойСчетДоговора, "Договор");
		Договор = ?(НЕ Договор.Количество() = 0, Договор.Получить(0).Значение, Неопределено);
		
		ТекДанные.ЛицевойСчет     = ЛицевойСчетДоговора;
		ТекДанные.Договор         = Договор;
		ТекДанные.СуммаНачисления = Неопределено;
		ТекДанные.МесяцНачисления = Неопределено;
		ТекДанные.Услуга          = Неопределено;
		ТекДанные.ВидНачисления   = ПредопределенноеЗначение("Перечисление.КВП_ВидыНачисленияОстатки.Начисление");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "СуммыДолгаДоговор".
Процедура СуммыДолгаДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СуммыДолга.ТекущиеДанные;
	ОткрытиеФормыВыбораДоговораКонтрагента(, ТекДанные,, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "СуммыДолгаУслуга".
Процедура СуммыДолгаУслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", , Элемент);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка",
																УслугаДобровольногоСтрахования,
																ВидСравненияКомпоновкиДанных.НеРавно, , Истина,
																РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
																
		Форма.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СуммыДолгаУслуга".
Процедура СуммыДолгаУслугаПриИзменении(Элемент)
	
	ВыбраннаяУслуга = Элементы.СуммыДолга.ТекущиеДанные.Услуга;
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию И ВыбраннаяУслуга = УслугаДобровольногоСтрахования Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("По услуге добровольного страхования нельзя корректировать взаиморасчеты.");
		
		Элементы.СуммыДолга.ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЧНОЙ ЧАСТИ "СУММЫ ДОЛГА УМЕНЬШЕНИЕ"

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "СуммыДолгаУменьшение".
Процедура СуммыДолгаУменьшениеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Если Объект.ЛицевойСчет.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Поле ""Лицевой счет"" не заполнено.", Отказ);
		КонецЕсли;
		Если Не Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности") И Объект.ЛицевойСчетПолучатель.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Поле ""Лицевой счет получатель"" не заполнено.", Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" поля "СуммыДолгаУменьшение".
Процедура СуммыДолгаУменьшениеПослеУдаления(Элемент)
	
	ВывестиНадписи();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" поля "СуммыДолгаУменьшение".
Процедура СуммыДолгаУменьшениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВидЗадолженности        = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская");
		Элемент.ТекущиеДанные.ЛицевойСчет             = Объект.ЛицевойСчет;
		Период                                        = КонецМесяца(ДобавитьМесяц(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату(), -1));
		Элемент.ТекущиеДанные.МесяцНачисления         = Период;
		Элемент.ТекущиеДанные.МесяцНачисленияСтрокой  = УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Период);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля "СуммыДолгаУменьшение".
Процедура СуммыДолгаУменьшениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ВывестиНадписи();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "СуммыДолгаУменьшениеДоговор".
Процедура СуммыДолгаУменьшениеДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СуммыДолгаУменьшение.ТекущиеДанные;
	ОткрытиеФормыВыбораДоговораКонтрагента(, ТекДанные,, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "СуммыДолгаУменьшениеУслуга".
Процедура СуммыДолгаУменьшениеУслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", , Элемент);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка",
																УслугаДобровольногоСтрахования,
																ВидСравненияКомпоновкиДанных.НеРавно, , Истина,
																РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
																
		Форма.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СуммыДолгаУменьшениеУслуга".
Процедура СуммыДолгаУменьшениеУслугаПриИзменении(Элемент)
	
	ВыбраннаяУслуга = Элементы.СуммыДолгаУменьшение.ТекущиеДанные.Услуга;
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию И ВыбраннаяУслуга = УслугаДобровольногоСтрахования Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("По услуге добровольного страхования нельзя корректировать взаиморасчеты.");
		
		Элементы.СуммыДолгаУменьшение.ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ МЕСЯЦ СТРОКОЙ
//

&НаКлиенте
// Процедура - обработчик события "Регулирование" поля "МесяцНачисленияСтрокой" таблицы "СуммыДолга".
//
Процедура СуммыДолгаМесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы[Элемент.Родитель.Имя].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ДобавитьМесяц(КонецМесяца(ТекущиеДанные.МесяцНачисления), Направление);
	
	ТекущиеДанные.МесяцНачисления        = Значение;
	ТекущиеДанные.МесяцНачисленияСтрокой = КВП_РаботаСДиалогами.ПолучитьПредставлениеМесяца(ТекущиеДанные.МесяцНачисления);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "МесяцНачисленияСтрокой" таблицы "СуммыДолга".
//
Процедура СуммыДолгаМесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы[Элемент.Родитель.Имя].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ТекущиеДанные.МесяцНачисления;
	
	ПараметрыФормы     = Новый Структура("Значение, РежимВыбораПериода, ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("СуммыДолгаМесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные));
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
				 ПараметрыФормы,
				 ЭтаФорма,,,,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // СуммыДолгаМесяцНачисленияСтрокойНачалоВыбора()

&НаКлиенте
// Обработчик результата выбора, вызванного в процедуре "ДеревоУслугМесяцСтрокойНачалоВыбора()".
Процедура СуммыДолгаМесяцНачисленияСтрокойНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		
		ТекущиеДанные.МесяцНачисления        = ВыбранноеЗначение;
		ТекущиеДанные.МесяцНачисленияСтрокой = КВП_РаботаСДиалогами.ПолучитьПредставлениеМесяца(ТекущиеДанные.МесяцНачисления);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // СуммыДолгаМесяцНачисленияСтрокойНачалоВыбораЗавершение()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "МесяцНачисленияСтрокой" таблицы "СуммыДолга".
//
Процедура СуммыДолгаМесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы[Элемент.Родитель.Имя].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.МесяцНачисления) Тогда
		ТекущиеДанные.МесяцНачисления = КонецМесяца(ТекущиеДанные.МесяцНачисления);
	КонецЕсли;
	
КонецПроцедуры // СуммыДолгаМесяцНачисленияСтрокойПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "Заполнить".
Процедура Заполнить(Команда)
	
	Если ПроверитьРеквизитыФормыДляЗаполнения() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СуммыДолга.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьФрагмент();
	
КонецПроцедуры // Заполнить()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "Заполнить()".
Процедура ЗаполнитьФрагмент()
	
	ЗаполнитьТабличнуюЧастьСуммыДолга();
	
	Для Каждого ТекСтрока Из Объект.СуммыДолга Цикл
		ТекСтрока.МесяцНачисленияСтрокой = УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(ТекСтрока.МесяцНачисления)
	КонецЦикла;

КонецПроцедуры // ЗаполнитьФрагмент()

&НаКлиенте
// Обработчик результата вопроса, вызваннго в процедуре-обработчике команды "Заполнить()".
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СуммыДолга.Очистить();
	
	ЗаполнитьФрагмент();
	
КонецПроцедуры // ЗаполнитьЗавершение()

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти