#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		ПеревыставлениеСФНалоговогоАгента = Ложь;
		Если ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
			СсылкаНаДокументОснование = ДанныеЗаполнения;
		ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
			
			Если ДанныеЗаполнения.Свойство("Основание")
				И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Основание.Метаданные()) Тогда
				СсылкаНаДокументОснование = ДанныеЗаполнения.Основание;
				Если ДанныеЗаполнения.Свойство("ПеревыставлениеСФНалоговогоАгента") Тогда 
					ПеревыставлениеСФНалоговогоАгента = ДанныеЗаполнения.ПеревыставлениеСФНалоговогоАгента;
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("ИсправляемыйСчетФактура")
				И ДанныеЗаполнения.Свойство("ВидСчетаФактуры")
				И ДанныеЗаполнения.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочнаяСправка Тогда
				ИсправляемыйСчетФактура = ДанныеЗаполнения.ИсправляемыйСчетФактура;
				РеквизитыИсправляемогоСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсправляемыйСчетФактура, "Номер, Дата");
				НомерИсходногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					РеквизитыИсправляемогоСФ.Номер, Истина, Ложь);
				ДатаИсходногоДокумента = РеквизитыИсправляемогоСФ.Дата;
			КонецЕсли;
		КонецЕсли;
		
		Если СсылкаНаДокументОснование <> Неопределено Тогда
			ЗаполнитьПоДокументуОснованию(СсылкаНаДокументОснование, ПеревыставлениеСФНалоговогоАгента);
		КонецЕсли;
		
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		И НЕ УчетНДС.ВедетсяУчетНДСПоФЗ81(Дата)Тогда
		Руководитель     = "";
		ГлавныйБухгалтер = "";
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипДанныхЗаполнения = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Руководитель     = ДанныеЗаполнения.Руководитель;
		ГлавныйБухгалтер = ДанныеЗаполнения.ГлавныйБухгалтер;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидСчетаФактуры) Тогда
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	КонецЕсли;
		
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		ВалютаДокумента	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
		
	СтруктураПараметров = Новый Структура("СчетФактураНеВыставляется,ДокументОснование,ВидСчетаФактуры,Дата");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
	
	ПараметрыВыставления = Документы.СчетФактураВыданный.ОпределитьПорядокВыставленияСчетаФактуры(СтруктураПараметров);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыВыставления);
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
		И ТипДанныхЗаполнения <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Если Дата < '20150101' Тогда
			Дата = '20150101';
		КонецЕсли;
		СводныйКомиссионный = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата          = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	НомерСчетаФактурыПродавца = "";

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		Если Дата < '20150101' Тогда
			Дата = '20150101';
		КонецЕсли;
		СводныйКомиссионный = Истина;
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.СводнаяСправка
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочнаяСправка Тогда 
		ДокументыОснования.Очистить();
		СуммаДокумента    = 0;
		СуммаНДСДокумента = 0;
	КонецЕсли;
	
	РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(Авансы, Дата);
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив();

	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Дата);
	
	ВидДоговораКонтрагента	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	
	Если НЕ ЗначениеЗаполнено(ВидСчетаФактуры) Тогда
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	КонецЕсли;
	
	Если ЭтоНовый() И НЕ УчетНДС.ФорматныйКонтрольИННиКПППоСчетуФактуреПройден(ЭтотОбъект) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не УчетНДСКлиентСервер.ФорматныйКонтрольКодаВидаОперацииПройден(КодВидаОперации) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Корректность", НСтр("ru = 'Код вида операции'"), , ,
			НСтр("ru='Код вида операции может содержать только цифры и символ "";""'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "КодВидаОперации", , Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодВидаОперацииНаУменьшение)
		И УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Дата) > 1
		И Не УчетНДСКлиентСервер.ФорматныйКонтрольКодаВидаОперацииПройден(КодВидаОперацииНаУменьшение) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Корректность", НСтр("ru = 'Код вида операции'"), , ,
			НСтр("ru='Код вида операции может содержать только цифры и символ "";""'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "КодВидаОперацииНаУменьшение", , Отказ);
	КонецЕсли;
	
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда

		МассивНепроверяемыхРеквизитов.Добавить("ДокументОснование");
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("Комитент");
		МассивНепроверяемыхРеквизитов.Добавить("Продавец");

		Если Дата < '20111001' И ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда

			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Дата документа'"), , ,
				НСтр("ru = 'Корректировочные счета-фактуры не выписываются до 01.10.2011 г.'"));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Дата", "Объект", Отказ);

		КонецЕсли;

		Если ДокументыОснования.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Документы-основания счета-фактуры""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьВыбор",, Отказ);			
		КонецЕсли;
		
		Для каждого СтрокаТЧ Из ДокументыОснования Цикл

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование)
				ИЛИ ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
				Продолжить;
			КонецЕсли;

			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.ДокументОснование, "Проведен") <> Истина Тогда

				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
					НСтр("ru = 'Документ-основание'"),
					СтрокаТЧ.НомерСтроки, НСтр("ru = 'Документы-основания'"),
					НСтр("ru = 'Счет-фактуру можно провести только на основании проведенного документа.'"));

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НадписьДокументыОснования", , Отказ);
			
			КонецЕсли;

		КонецЦикла;
		
		ДокументыОснованияПроверка	= Новый ТаблицаЗначений;
		ДокументыОснованияПроверка.Колонки.Добавить("ДокументОснование");
		ДокументыОснованияПроверка.Колонки.Добавить("Количество");
		
		Для Каждого СтрокаДокументОснование Из ДокументыОснования Цикл
			
			Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда 
				
				Если ИспользуетсяПостановлениеНДС1137 И СтрокаДокументОснование.УчитыватьИсправлениеИсходногоДокумента Тогда
					
					Если НЕ ЗначениеЗаполнено(СтрокаДокументОснование.НомерИсправленияИсходногоДокумента)
						ИЛИ НЕ ЗначениеЗаполнено(СтрокаДокументОснование.ДатаИсправленияИсходногоДокумента) Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте исходный счет-фактуру для документа-основания в строке %1 списка ""Документы-основания счета-фактуры""'"), СтрокаДокументОснование.НомерСтроки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьДокументыОснования",, Отказ);
					КонецЕсли;
					
				КонецЕсли;
				
				Если Дата > '20111001' И НЕ СформированПриВводеНачальныхОстатковНДС Тогда
					
					Если НЕ ЗначениеЗаполнено(СтрокаДокументОснование.НомерИсходногоДокумента)
						ИЛИ НЕ ЗначениеЗаполнено(СтрокаДокументОснование.ДатаИсходногоДокумента) Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте исходный счет-фактуру для документа-основания в строке %1 списка ""Документы-основания счета-фактуры""'"), СтрокаДокументОснование.НомерСтроки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьДокументыОснования",, Отказ);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			СтрокаПроверки = ДокументыОснованияПроверка.Добавить();
			СтрокаПроверки.ДокументОснование = СтрокаДокументОснование.ДокументОснование;
			СтрокаПроверки.Количество = 1;
			
		КонецЦикла;
		
		ДокументыОснованияПроверка.Свернуть("ДокументОснование", "Количество");
		
		Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда 
		
			Для Каждого СтрокаПроверки Из ДокументыОснованияПроверка Цикл
				
				Если ЗначениеЗаполнено(СтрокаПроверки.ДокументОснование)
					И СтрокаПроверки.Количество > 1 Тогда
					
					Отбор	= Новый Структура("ДокументОснование", СтрокаПроверки.ДокументОснование);
					
					СтрокиТЧ	= ДокументыОснования.НайтиСтроки(Отбор);
					Если СтрокиТЧ.Количество() < 2 Тогда 
						Продолжить;
					КонецЕсли;
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документ %1 уже выбран в строке %2. Повторный выбор не допускается.'"),
						СтрокаПроверки.ДокументОснование,
						СтрокиТЧ[0].НомерСтроки);
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", 
						"Корректность", 
						"Документ - основание для выписки счета-фактуры", 
						СтрокиТЧ[1].НомерСтроки, 
						"Документы-основания счета-фактуры", 
						ТекстСообщения);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,, "НадписьДокументыОснования",, Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		КонецЕсли;
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.СводнаяСправка 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочнаяСправка Тогда

		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДокументОснование");
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("Комитент");
		МассивНепроверяемыхРеквизитов.Добавить("Продавец");

		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.СводнаяСправка
			И УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Дата) <= 3 Тогда

			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Дата документа'"), , ,
				НСтр("ru = 'Сводная справка по розничным продажам за данный период не оформляется'"));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Дата", "Объект", Отказ);

		КонецЕсли;
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочнаяСправка 
			И Дата < '20190101' Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Дата документа'"), , ,
				НСтр("ru = 'Корректировочная справка по розничным продажам за данный период не оформляется'"));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Дата", "Объект", Отказ);
			
		КонецЕсли;

		Если ДокументыОснования.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Документы-основания""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьВыбор",, Отказ);			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураВыданныйДокументыОснования.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
			|ГДЕ
			|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка
			|	И СчетФактураВыданныйДокументыОснования.ДокументОснование <> НЕОПРЕДЕЛЕНО
			|	И НЕ СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
			|	И НЕ СчетФактураВыданныйДокументыОснования.ДокументОснование.Проведен";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ТекстПроверкиПроведения = ?(ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.СводнаяСправка,
					НСтр("ru = 'Сводную справку можно провести только на основании проведенного документа.'"),
					НСтр("ru = 'Корректировочную справку можно провести только на основании проведенного документа.'"));
					
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
					НСтр("ru = 'Документ-основание'"),
					Выборка.НомерСтроки, НСтр("ru = 'Документы-основания'"),
					ТекстПроверкиПроведения);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НадписьДокументыОснования", , Отказ);
				
			КонецЦикла;
		КонецЕсли;
		
		ДокументыОснованияПроверка	= Новый ТаблицаЗначений;
		ДокументыОснованияПроверка.Колонки.Добавить("ДокументОснование");
		ДокументыОснованияПроверка.Колонки.Добавить("Количество");
		
		Для Каждого СтрокаДокументОснование Из ДокументыОснования Цикл
			
			СтрокаПроверки = ДокументыОснованияПроверка.Добавить();
			СтрокаПроверки.ДокументОснование = СтрокаДокументОснование.ДокументОснование;
			СтрокаПроверки.Количество = 1;
			
		КонецЦикла;
		
		ДокументыОснованияПроверка.Свернуть("ДокументОснование", "Количество");
		
		Для Каждого СтрокаПроверки Из ДокументыОснованияПроверка Цикл
			
			Если ЗначениеЗаполнено(СтрокаПроверки.ДокументОснование)
				И СтрокаПроверки.Количество > 1 Тогда
				
				Отбор	= Новый Структура("ДокументОснование", СтрокаПроверки.ДокументОснование);
				
				СтрокиТЧ	= ДокументыОснования.НайтиСтроки(Отбор);
				Если СтрокиТЧ.Количество() < 2 Тогда 
					Продолжить;
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ %1 уже выбран в строке %2. Повторный выбор не допускается.'"),
					СтрокаПроверки.ДокументОснование,
					СтрокиТЧ[0].НомерСтроки);
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", 
					"Корректность", 
					"Документ - основание для формирования сводной справки", 
					СтрокиТЧ[1].НомерСтроки, 
					"Документы-основания", 
					ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,, "НадписьДокументыОснования",, Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе

		МассивНепроверяемыхРеквизитов.Добавить("ДокументыОснования");
		МассивНепроверяемыхРеквизитов.Добавить("ДокументыОснования.ДокументОснование");

		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДС");
		КонецЕсли;

		Если ЗначениеЗаполнено(ДокументОснование)
			И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда

			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Проведен") <> Истина Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Корректность", НСтр("ru = 'Документ-основание'"), , , НСтр("ru = 'Счет-фактуру можно провести только на основании проведенного документа.'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументОснование", "Объект", Отказ);
			КонецЕсли;

		КонецЕсли;
		
		Если НЕ СчетФактураКомитенту() Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Комитент");
		КонецЕсли;

		Если НЕ ИспользуетсяПостановлениеНДС1137
			ИЛИ ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Продавец");
			МассивНепроверяемыхРеквизитов.Добавить("Авансы.ДокументОснование");
		КонецЕсли;
		
		Если СводныйКомиссионный Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Продавец");
			МассивНепроверяемыхРеквизитов.Добавить("Комитент");
			Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
				МассивНепроверяемыхРеквизитов.Добавить("ДокументОснование");
			КонецЕсли;
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("Авансы.Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("Авансы.ДокументОснование");
		КонецЕсли;

	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	КонецЕсли;	
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		
		Для Каждого СтрокаАвансы Из Авансы Цикл
			Префикс = "Авансы[" + Формат(СтрокаАвансы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			ИмяСписка = НСтр("ru = 'Аванс'");
			Если СтрокаАвансы.СуммаДоКорректировки > СтрокаАвансы.Сумма Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
					НСтр("ru = 'Сумма'"), 
					СтрокаАвансы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "Сумма"; 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			Если СтрокаАвансы.СуммаНДСДоКорректировки > СтрокаАвансы.СуммаНДС Тогда
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
					НСтр("ru = 'Сумма НДС'"), 
					СтрокаАвансы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "СуммаНДС"; 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Авансы.СуммаДоКорректировки");
		МассивНепроверяемыхРеквизитов.Добавить("Авансы.СтавкаНДСДоКорректировки");
		МассивНепроверяемыхРеквизитов.Добавить("Авансы.СуммаНДСДоКорректировки");
		МассивНепроверяемыхРеквизитов.Добавить("Авансы.КорректируемыйСчетФактура");
	КонецЕсли;
	
	Если НЕ СчетФактураКомитенту() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКомитента");
		МассивНепроверяемыхРеквизитов.Добавить("СчетРасчетов");
	ИначеЕсли ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		// Счет расчетов проверяется только для счета-фактуры налогового агента, перевыставленный комитенту.
		МассивНепроверяемыхРеквизитов.Добавить("СчетРасчетов");
		// Договор комитента не проверяется для счета-фактуры с видом "На аванс комитента"
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ДоговорКомитента");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИспользуетсяПостановлениеНДС1137 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КодВидаОперации");
	КонецЕсли;

	Если НЕ ИспользуетсяПостановлениеНДС1137 ИЛИ (НЕ Исправление) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
	КонецЕсли;

	Если НЕ ИспользуетсяПостановлениеНДС1137 ИЛИ СформированПриВводеНачальныхОстатковНДС
	 ИЛИ ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
	 ИЛИ НЕ Исправление Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправляемогоКорректировочногоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаИсправляемогоКорректировочногоДокумента");
	КонецЕсли;

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсходногоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаИсходногоДокумента");
		
	Иначе
		
		Если Дата < '20111001' ИЛИ СформированПриВводеНачальныхОстатковНДС ИЛИ НЕ Исправление Тогда
			МассивНепроверяемыхРеквизитов.Добавить("НомерИсходногоДокумента");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаИсходногоДокумента");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ИспользуетсяПостановлениеНДС1137 ИЛИ (НЕ Выставлен) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВыставления");
		МассивНепроверяемыхРеквизитов.Добавить("КодСпособаВыставления");
	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)

	Если Исправление Тогда
		Префикс = "И";
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.СводнаяСправка Тогда
		Префикс = "Р";
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочнаяСправка Тогда
		Префикс = "К";
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		Если Константы.ОтдельнаяНумерацияСчетовФактурНаАванс.Получить() Тогда
			Префикс = "А";
		Иначе
			Префикс = "0";
		КонецЕсли;	
	Иначе
		Префикс = "0";
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	УстановитьПредставлениеНомера();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЕстьДублиСчетаФактуры() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не УчетНДС.ПравоРегистрироватьВидСчетаФактуры(ВидСчетаФактуры) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() 
		И НЕ СформированПриВводеНачальныхОстатковНДС 
		И НЕ УчетНДС.ФорматныйКонтрольИННиКПППоСчетуФактуреПройден(ЭтотОбъект) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ОбновитьРеквизитыСвязанныхСчетовФактур(ЭтотОбъект, "СчетФактураВыданный", Отказ);
	
	ОбновлятьРеквизитыПриЗаписи = ?(ДополнительныеСвойства.Свойство("ОбновлятьРеквизитыПриЗаписи"), ДополнительныеСвойства.ОбновлятьРеквизитыПриЗаписи, Истина);
	Если НЕ ОбновлятьРеквизитыПриЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаРеквизитовСчетаФактурыПоВиду();
	
	РассчитатьСуммуДокумента();
	
	Если (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда 
		// Если покупатель исполняет обязанности налогового агента, то очистим сумму НДС.
		ВедетсяУчетНДСПоФЗ335         = УчетНДС.ВедетсяУчетНДСПоФЗ335(Дата);
		ПокупательНалоговыйАгентПоНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем");
		Если ПокупательНалоговыйАгентПоНДС = Истина
		   И ВедетсяУчетНДСПоФЗ335 Тогда 
			Для Каждого СтрокаТаблицы Из Авансы Цикл
				СтрокаТаблицы.СтавкаНДС                = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(Дата);
				СтрокаТаблицы.СтавкаНДСДоКорректировки = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(Дата);
				СтрокаТаблицы.СуммаНДС                 = 0;
				СтрокаТаблицы.СуммаНДСДоКорректировки  = 0;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Документы.КорректировкаРеализации.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка ИЛИ СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.СчетФактураВыданный.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	ТаблицаСторноНачисленияНДС = Документы.СчетФактураВыданный.ПодготовитьТаблицуСторноНачисленияНДС(
		ПараметрыПроведения.РеквизитыШапки);

	ЗаписьЖурналаУчетаСчетовФактур = УчетНДС.ПодготовитьЗаписьЖурналаУчетаСчетовФактур(
		ПараметрыПроведения.ЗаписьЖурналаУчетаСчетовФактур);
		
	СторнирующаяЗаписьЖурнала = УчетНДС.ПодготовитьЗаписьЖурналаУчетаСчетовФактур(
		ПараметрыПроведения.СторнирующаяЗаписьЖурнала);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ДОКУМЕНТА

	Документы.СчетФактураВыданный.СформироватьДвиженияСторноНачисленияНДС(
		ПараметрыПроведения.РеквизитыШапки, 
		ТаблицаСторноНачисленияНДС, 
		Движения, 
		Отказ);

	УчетНДС.СформироватьДвиженияВыписанСчетФактураНаПолученныйАванс(
		ПараметрыПроведения.РеквизитыШапки, ПараметрыПроведения.ТаблицаАвансов, Движения, Отказ);

	УчетНДС.СформироватьДвиженияВыписанСчетФактураНалоговогоАгента(
		ПараметрыПроведения.РеквизитыШапки, ПараметрыПроведения.ТаблицаАвансов, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияПеревыставленныйСчетФактураНалоговогоАгента(
		ПараметрыПроведения.ЗачетАвансовРеквизиты, 
		ПараметрыПроведения.ТаблицаПеревыставленныйСчетФактура, 
		ПараметрыПроведения.ЗачетАвансовТаблицаАвансов,
		Движения, 
		Отказ);
		
	УчетНДС.СформироватьДвиженияСчетФактураВыданныйКорректировочныйНаАванс(
		ПараметрыПроведения.РеквизитыШапки, ПараметрыПроведения.ТаблицаКорректировочныйНаАванс, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияНДСНомераДокументовОплаты(
		ПараметрыПроведения.ТаблицаНомеровДокументовОплаты, Движения, Отказ);
	
	// Запись журнала счетов-фактур
	УчетНДС.СформироватьДвиженияЖурналУчетаСчетовФактурРегистрация(
		ЗаписьЖурналаУчетаСчетовФактур, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияЖурналУчетаСчетовФактурРегистрация(
		СторнирующаяЗаписьЖурнала, Движения, Отказ);
		
	// Факт создания сводной справки по розничным реализациям.
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СформироватьДвиженияФактВыполненияРегламентнойОперации(
		ПараметрыПроведения.ДанныеРегламентнойОперации, Отказ);
		
	ПомощникРасчетаНДС.СброситьАктуальностьРасчета(Ссылка);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПомощникРасчетаНДС.СброситьАктуальностьРасчета(Ссылка);
	
	// Отмена проведения сводной справки по розничным реализациям.
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СброситьФактВыполненияОперации(Ссылка);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО") 
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользуетсяНДФЛИП")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ВыписыватьСчетаФактурыСпецРежимы")) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.ВыписыватьСчетаФактурыСпецРежимы.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	// Для счетов-фактур "На реализацию" необходимо установить статус счета-фатуры по документам-основаниям.
	УстановитьСтатусДокумента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьСтатусДокумента()
	
	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда 
		Возврат;
	КонецЕсли;
	
	ДокументыОснованияДляУстановкиСтатуса = Новый Массив;
	ДокументСУстановленнымСтатусом = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	ДополнительныеСвойства.Свойство("ДокументСУстановленнымСтатусом", ДокументСУстановленнымСтатусом);
	
	Для Каждого СтрокаТЧ Из ДокументыОснования Цикл
		Если ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И СтрокаТЧ.ДокументОснование <> ДокументСУстановленнымСтатусом Тогда 
			ДокументыОснованияДляУстановкиСтатуса.Добавить(СтрокаТЧ.ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументыОснованияДляУстановкиСтатуса.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		ИЛИ (ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись 
		И Проведен) Тогда 
		СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Проведен;
	ИначеЕсли ПометкаУдаления Тогда
		// Очистим статус
		СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Отсутствует;
	Иначе
		СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеПроведен;
	КонецЕсли;
	
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокументов(ДокументыОснованияДляУстановкиСтатуса,,,СтатусСчетаФактуры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснованию(Основание, ПеревыставлениеСФНалоговогоАгента = Ложь)

	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		РеквизитыОснования	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, Организация, ВидОперации");
		Если РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности
			И НЕ УчетнаяПолитика.НачислятьНДСПоОтгрузке(РеквизитыОснования.Организация, РеквизитыОснования.Дата) Тогда
			
			ВызватьИсключение НСтр("ru = 'При отгрузке без перехода права собственности выписка счета-фактуры не требуется'");
			
		Иначе
			ВидДоговораСКонтрагентом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание.ДоговорКонтрагента, "ВидДоговора");
			Если ВидДоговораСКонтрагентом = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ВызватьИсключение НСтр("ru = 'При передаче на комиссию выписка счета-фактуры не требуется'");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		РеквизитОснованияВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидОперации");
		Если РеквизитОснованияВидОперации <> Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача Тогда
			ВызватьИсключение НСтр("ru = 'Выписывать счет-фактуру можно только с видом операции: Безвозмездная передача!'");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ЗаполнитьНаОснованииСчетаФактуры(Основание.Ссылка, ПеревыставлениеСФНалоговогоАгента);
		Возврат;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ЗаполнитьНаОснованииСчетаФактурыПолученного(Основание.Ссылка);
		Возврат;
	ИначеЕсли НЕ ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		Возврат;
	КонецЕсли;

	СписокТиповНаАванс = УчетНДСПереопределяемый.ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(
		Перечисления.ВидСчетаФактурыВыставленного.НаАванс);

	СписокТиповНалоговыйАгент = УчетНДСПереопределяемый.ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(
		Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);

	СписокТиповКорректировочный = УчетНДСПереопределяемый.ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(
		Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);

	Если СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено 
		И ТипЗнч(Основание) <> Тип("ДокументСсылка.КорректировкаРеализации")
		И ТипЗнч(Основание) <> Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда 
		// СФ на аванс по корректировкам создаются обработкой "Регистрация счетов-фактур на аванс"
		ЗаполнитьСчетФактуруНаАванс(Основание);
	ИначеЕсли СписокТиповНалоговыйАгент.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
		ЗаполнитьСчетФактуруНалоговыйАгент(Основание);
	ИначеЕсли СписокТиповКорректировочный.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
		ЗаполнитьСчетФактуруКорректировочный(Основание);
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		И Основание.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		ВызватьИсключение НСтр("ru = 'При возврате из переработки выписка счета-фактуры не требуется'");	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		ЗаполнитьСчетФактуруНаПередачу(Основание);
	Иначе
		ЗаполнитьСчетФактуруНаРеализацию(Основание);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьНаОснованииСчетаФактуры(Основание, ПеревыставлениеСФНалоговогоАгента = Ложь)
	
	// Перевыставление счета-фактура налогового агента комитенту при закупке товаров у нерезидента
	Если ПеревыставлениеСФНалоговогоАгента Тогда 
		
		// Дата перевыставленного счета-фактуры комитенту должна совпадать с датой 
		// счета-фактуры выставленного при исполнении обязанностей налогового агента.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, , 
			"Номер, СформированПриВводеНачальныхОстатковНДС, Проведен, ПометкаУдаления, ДокументОснование");
		ДокументОснование = Основание;
		НомерСчетаФактурыПродавца = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Основание.Номер, Истина, Ложь);
		
	Иначе // Исправленные счета-фактуры
		
		Если Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
			ИЛИ Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Исправленные счета-фактуры с видом ""%1"" вводятся на основании документа ""Корректировка реализации"".'"),
				Основание.ВидСчетаФактуры);
				ВызватьИсключение ТекстСообщения;
		ИначеЕсли Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
			ТекстСообщения = НСтр("ru='Исправленные счета-фактуры с видом ""На суммовую разницу"" не поддерживаются.'");
				ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, , "Номер, Дата, СформированПриВводеНачальныхОстатковНДС, Проведен, ПометкаУдаления");
		
		Исправление      = Истина;
		НомерИсправления = НомерИсправления + 1;
		Выставлен        = Ложь;
		ДатаВыставления  = '00010101';
		
		Если Основание.Исправление Тогда
			ИсправляемыйСчетФактура = Основание.ИсправляемыйСчетФактура;
		Иначе
			ИсправляемыйСчетФактура = Основание;
			НомерИсходногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Основание.Номер, Истина, Ложь);
			ДатаИсходногоДокумента  = Основание.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаОснования = ДокументыОснования.Добавить();
	СтрокаОснования.ДокументОснование = ДокументОснование;
	
	Для Каждого СтрокаАванса Из Основание.Авансы Цикл
		НоваяСтрока = Авансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАванса);
	КонецЦикла;
	
	Если Основание.ПлатежноРасчетныеДокументы.Количество() > 0 Тогда
		НоваяСтрока = ПлатежноРасчетныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Основание.ПлатежноРасчетныеДокументы[0]);
	КонецЕсли;

	КодВидаОперации = ПолучитьКодВидаОперации();

КонецПроцедуры

Процедура ЗаполнитьНаОснованииСчетаФактурыПолученного(Основание)
	
	Если НЕ Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
		ТекстСообщения = НСтр("ru='Счет-фактура выданный создается только на основании 
			|счета-фактуры полученного с видом ""На аванс комитента на закупку"".'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Основание.ДоговорКомитента)
		ИЛИ НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание.ДоговорКомитента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Счета-фактуры на аванс комитента на закупку вводятся только по договорам ""%1"".'"),
			Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
		ВызватьИсключение ТекстСообщения;
			
	КонецЕсли;
	
	ВидСчетаФактуры    = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку;
	Организация        = Основание.Организация;
	Дата               = ?(Основание.Исправление, Основание.ДатаИсправления, Основание.ДатаВходящегоДокумента);
	ДокументОснование  = Основание.ДокументОснование;
	Контрагент         = Основание.Комитент;
	ДоговорКонтрагента = Основание.ДоговорКомитента;
	Продавец           = Основание.Контрагент;
	ВалютаДокумента    = Основание.ВалютаДокумента;
	СуммаДокумента     = Основание.СуммаДокумента;
	СуммаНДСДокумента  = Основание.СуммаНДСДокумента;
	НомерСчетаФактурыПродавца = Основание.НомерВходящегоДокумента;
	СуммаДокументаКомиссия    = ?(Дата >= '20150101', Основание.СуммаДокумента, 0);
	СуммаНДСДокументаКомиссия = ?(Дата >= '20150101', Основание.СуммаНДСДокумента, 0);
	
	Для каждого СтрокаАванса Из Основание.Авансы Цикл 
		НоваяСтрока = Авансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАванса);
	КонецЦикла;
	
	Если Основание.ДокументыОснования.Количество() > 0 Тогда
		
		НоваяСтрокаОснования = ДокументыОснования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОснования, Основание.ДокументыОснования[0]);
		
		Если ТипЗнч(НоваяСтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			
			СвойстваДокументаОснования	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрокаОснования.ДокументОснование, "НомерВходящегоДокумента, ДатаВходящегоДокумента");
			
			СтрокаПРД = ПлатежноРасчетныеДокументы.Добавить();
			СтрокаПРД.НомерДокумента	= СвойстваДокументаОснования.НомерВходящегоДокумента;
			СтрокаПРД.ДатаДокумента		= СвойстваДокументаОснования.ДатаВходящегоДокумента;
			
			НомерПлатежноРасчетногоДокумента	= СтрокаПРД.НомерДокумента;
			ДатаПлатежноРасчетногоДокумента		= СтрокаПРД.ДатаДокумента;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрокаОснования.ДокументОснование) Тогда
			
			СвойстваДокументаОснования	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрокаОснования.ДокументОснование, "Номер, Дата");
			
			СтрокаПРД = ПлатежноРасчетныеДокументы.Добавить();
			СтрокаПРД.НомерДокумента	= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СвойстваДокументаОснования.Номер, Истина, Ложь);
			СтрокаПРД.ДатаДокумента		= СвойстваДокументаОснования.Дата;
			
			НомерПлатежноРасчетногоДокумента	= СтрокаПРД.НомерДокумента;
			ДатаПлатежноРасчетногоДокумента		= СтрокаПРД.ДатаДокумента;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КодВидаОперации = ПолучитьКодВидаОперации();
	
КонецПроцедуры

Процедура ЗаполнитьСчетФактуруНаРеализацию(Основание)

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Продавец", Справочники.Контрагенты.ПустаяСсылка());

	СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Основание, Ложь, , СтруктураОтбора);
	Если ЗначениеЗаполнено(СуществующийСФ) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='На основании документа %1 был введен %2'"),
			Основание,
			СуществующийСФ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Дата = Основание.Дата;
	ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	ДокументыОснования.Добавить().ДокументОснование = Основание;

	ПлатежноРасчетныеДокументы.Очистить();
	ДатыНомераПРД = Документы.СчетФактураВыданный.ДатыНомераПлатежноРасчетныхДокументов(
		ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	Для каждого СтрокаТаблицы Из ДатыНомераПРД Цикл
		НоваяСтрока = ПлатежноРасчетныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;

	ОпределениеПараметровСчетаФактурыНаРеализацию();
	
КонецПроцедуры

Процедура ЗаполнитьСчетФактуруНаПередачу(Основание)

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Продавец", Справочники.Контрагенты.ПустаяСсылка());

	СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Основание, Ложь, , СтруктураОтбора);
	Если ЗначениеЗаполнено(СуществующийСФ) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='На основании документа %1 был введен %2'"),
			Основание,
			СуществующийСФ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Дата = Основание.Дата;
	ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	ДокументыОснования.Добавить().ДокументОснование = Основание;
	ДокументОснование = Основание;
	
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Дата);
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСФ = УчетНДСПереопределяемый.ПараметрыСчетаФактуры(ЭтотОбъект);
	УстановитьПривилегированныйРежим(Ложь);
	
	СинхронизируемыеРеквизиты = "Организация,Контрагент,ДоговорКонтрагента,ВалютаДокумента"
		+ ",СуммаДокумента,Продавец,НомерСчетаФактурыПродавца,КПППродавца";
		
	Если ИспользуетсяПостановлениеНДС1137 Тогда
		
		СинхронизируемыеРеквизиты = СинхронизируемыеРеквизиты 
			+ ",СчетФактураБезНДС,СуммаНДСДокумента,СуммаНДСУвеличение,СуммаНДСУменьшение";
		
		Если ДатаВыставления >= '20150101' Тогда
			СинхронизируемыеРеквизиты = СинхронизируемыеРеквизиты 
				+ ",СуммаДокументаКомиссия,СуммаУвеличениеКомиссия,СуммаУменьшениеКомиссия"
				+ ",СуммаНДСДокументаКомиссия,СуммаНДСУвеличениеКомиссия,СуммаНДСУменьшениеКомиссия";
		КонецЕсли;
		
	КонецЕсли;
	
	СинхронизироватьРеквизитыОбъекта(ПараметрыСФ, СинхронизируемыеРеквизиты);
	
	Если ИспользуетсяПостановлениеНДС1137 И НЕ ЗначениеЗаполнено(КодВидаОперации) Тогда
		КодВидаОперации = "10";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетФактуруНаАванс(Основание, СчетФактура = Неопределено, ДоговорКонтрагента = Неопределено) Экспорт
	
	Если Не УчетНДС.ПравоРегистрироватьВидСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.НаАванс) Тогда
		ВызватьИсключение НСтр("ru='Недостаточно прав для регистрации счета-фактуры на аванс'");
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		
		ПараметрыЗаполнения = Документы.СчетФактураВыданный.ПодготовитьПараметрыЗаполненияСуммовыеРазницы(Основание, СчетФактура, Отказ);
		
		ТекстСообщения = НСтр("ru='Нет данных для счета-фактуры на суммовую разницу.'");
		
		Если Отказ Тогда
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ЗаполнитьСчетФактуруНасуммовуюРазницу(Основание, ПараметрыЗаполнения);
		
	Иначе
		
		ПараметрыЗаполнения = Документы.СчетФактураВыданный.ПодготовитьПараметрыЗаполненияАванс(
			Основание, СчетФактура, ДоговорКонтрагента, Отказ);
		
		Если Отказ Тогда
			
			Отказ = Ложь;
			ПараметрыЗаполненияСуммоваяРазница = Документы.СчетФактураВыданный.ПодготовитьПараметрыЗаполненияСуммовыеРазницы(
				Основание,
				СчетФактура,
				Отказ);	
			
			ТекстСообщения = НСтр("ru='Нет данных для счета-фактуры на аванс или на суммовую разницу.'");
			Если ТипЗнч(ПараметрыЗаполнения) = Тип("Структура")
				И ПараметрыЗаполнения.Свойство("МоментАктуальностиОтложенныхРасчетов") Тогда
				// При отложенном проведении сообщим, что расчеты неактуальны.
				ТекстСообщения = ТекстСообщения + Символы.ПС
					+ СтрШаблон(НСтр("ru = 'Рекомендуется актуализировать расчеты с контрагентами с %1.'"),
						Формат(ПараметрыЗаполнения.МоментАктуальностиОтложенныхРасчетов.Дата, "ДЛФ=D"));
			КонецЕсли;
			
			Если Отказ Тогда
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;

			ЗаполнитьСчетФактуруНасуммовуюРазницу(Основание, ПараметрыЗаполненияСуммоваяРазница);
			
		Иначе
			
			Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
				И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
				
				РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Организация, Дата");
				ПлательщикНДС      = УчетнаяПолитика.ПлательщикНДС(РеквизитыОснования.Организация, РеквизитыОснования.Дата);
				УчетПо84ФЗ         = УчетНДС.ВедетсяУчетНДСНеплательщиковПоФЗ84(РеквизитыОснования.Дата);
				
				Если Не ПлательщикНДС И УчетПо84ФЗ Тогда
					ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
				Иначе
					ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаполнения.Реквизиты);
			
			Авансы.Очистить();
			
			Для каждого СтрокаСФ Из ПараметрыЗаполнения.Авансы Цикл
				НоваяСтрока = Авансы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСФ);
			КонецЦикла;
			
			Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
				И Дата >= '20150101' Тогда  
				СуммаДокументаКомиссия 		= Авансы.Итог("Сумма");
				СуммаНДСДокументаКомиссия 	= Авансы.Итог("СуммаНДС");
			Иначе
				СуммаДокументаКомиссия 		= 0;
				СуммаНДСДокументаКомиссия 	= 0;
			КонецЕсли;

			ДатаНомер = УчетНДСПереопределяемый.ДатаНомерПлатежноРасчетногоДокумента(Основание);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДатаНомер);
			ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда

		Отказ = Ложь;
		ПараметрыЗаполнения = Документы.СчетФактураВыданный.ПодготовитьПараметрыЗаполненияСуммовыеРазницы(Основание, СчетФактура, Отказ);
				
		ТекстСообщения = НСтр("ru='Нет данных для счета-фактуры на аванс или на суммовую разницу.'");
		
		Если Отказ Тогда
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу;

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаполнения.Реквизиты);

		Авансы.Очистить();

		Для каждого СтрокаСФ Из ПараметрыЗаполнения.СуммовыеРазницы Цикл
			НоваяСтрока = Авансы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСФ);
		КонецЦикла;

		ДатаНомер = УчетНДСПереопределяемый.ДатаНомерПлатежноРасчетногоДокумента(Основание);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДатаНомер);
		ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		
		СчетФактураНеВыставляется = Истина;

		КодВидаОперации	= ПолучитьКодВидаОперации();
    
	Иначе

		Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		
			ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
			
		КонецЕсли;	

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаполнения.Реквизиты);

		Авансы.Очистить();

		Для каждого СтрокаСФ Из ПараметрыЗаполнения.Авансы Цикл
			НоваяСтрока = Авансы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСФ);
		КонецЦикла;

		ДатаНомер = УчетНДСПереопределяемый.ДатаНомерПлатежноРасчетногоДокумента(Основание);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДатаНомер);
		ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();

	КонецЕсли;

	КодВидаОперации = ПолучитьКодВидаОперации();

КонецПроцедуры

Процедура ЗаполнитьСчетФактуруНаСуммовуюРазницу(Основание, ПараметрыЗаполнения)
	
	Если Не УчетНДС.ПравоРегистрироватьВидСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу) Тогда
		ВызватьИсключение НСтр("ru='Недостаточно прав для регистрации счета-фактуры на суммовые разницы'");
	КонецЕсли;
	
	ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаполнения.Реквизиты);
	
	Авансы.Очистить();
	
	Для каждого СтрокаСФ Из ПараметрыЗаполнения.СуммовыеРазницы Цикл
		НоваяСтрока = Авансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСФ);
	КонецЦикла;
	
	ДатаНомер = УчетНДСПереопределяемый.ДатаНомерПлатежноРасчетногоДокумента(Основание);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДатаНомер);
	ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СчетФактураНеВыставляется = Истина;
	
	КодВидаОперации	= ПолучитьКодВидаОперации();
	
КонецПроцедуры

Процедура ЗаполнитьСчетФактуруНалоговыйАгент(Основание, СчетФактура = Неопределено, ДоговорКонтрагента = Неопределено) Экспорт
	
	Если Не УчетНДС.ПравоРегистрироватьВидСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент) Тогда
		ВызватьИсключение НСтр("ru='Недостаточно прав для регистрации счета-фактуры налогового агента'");
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗаполнения = Документы.СчетФактураВыданный.ПодготовитьПараметрыЗаполненияНалоговыйАгент(
		Основание, СчетФактура, ДоговорКонтрагента, Отказ);
		
	Если Отказ Тогда
		ТекстСообщения = ?(ТипЗнч(ПараметрыЗаполнения) = Тип("Строка"),
			ПараметрыЗаполнения,
			НСтр("ru='Нет данных для счета-фактуры налогового агента.'"));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;
	
	РеквизитыОснования = ПараметрыЗаполнения.Реквизиты;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОснования);
	
	Авансы.Очистить();
	
	Для каждого СтрокаСФ Из ПараметрыЗаполнения.ТаблицаОплат Цикл
		НоваяСтрока = Авансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСФ);
	КонецЦикла;
	
	Если НЕ Перечисления.ВидыАгентскихДоговоров.НалогУплачиваетсяПриНачислении(
		РеквизитыОснования.ВидАгентскогоДоговора) Тогда
		ДатаНомер = УчетНДСПереопределяемый.ДатаНомерПлатежноРасчетногоДокумента(Основание);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДатаНомер);
	КонецЕсли;
	
	ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	СчетФактураНеВыставляется = Истина;
	
	КодВидаОперации	= ПолучитьКодВидаОперации();
	
КонецПроцедуры

Процедура ЗаполнитьСчетФактуруКорректировочный(Основание, Перезаполнить = Ложь)
	
	Если Не УчетНДС.ПравоРегистрироватьВидСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный) Тогда
		ВызватьИсключение НСтр("ru='Недостаточно прав для регистрации корректировочного счета-фактуры'");
	КонецЕсли;
	
	СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Основание, Ложь);
	
	Если ЗначениеЗаполнено(СуществующийСФ) И Не Перезаполнить Тогда
		
		ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='На основании документа %1 был введен %2'"),
			Основание,
			СуществующийСФ);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ДокументРеализации, ВидОперации");
		Если ТипЗнч(РеквизитыОснования.ДокументРеализации) <> Тип("ДокументСсылка.СчетФактураВыданный")
			И Не ЗначениеЗаполнено(УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(РеквизитыОснования.ДокументРеализации)) Тогда 
			Если РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
				ВызватьИсключение НСтр("ru = 'Перед добавлением исправления счета-фактуры создайте счет-фактуру у документа-основания'");
			Иначе
				ВызватьИсключение НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте счет-фактуру у документа-основания'");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда 
		
		РеквизитОснованияСделка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Сделка");

		Если НЕ ЗначениеЗаполнено(РеквизитОснованияСделка) Тогда
			ВызватьИсключение НСтр("ru = 'Перед добавлением корректировочного счета-фактуры укажите документ-основание'");
		КонецЕсли;
		
		СписокИсправляемыхДокументовДокументовБезСчетФактур = СписокИсправляемыхДокументовБезСчетовФактур(Основание);

		Если СписокИсправляемыхДокументовДокументовБезСчетФактур.Количество() > 0 Тогда
			Отказ = Ложь;
		
			Для каждого ТекСтрока Из СписокИсправляемыхДокументовДокументовБезСчетФактур Цикл
			
				Если ТекСтрока.СчетФактураОтсутствует Тогда
					
					СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте счет-фактуру у исправляемого документа: %1'"),
						ТекСтрока.ПредставлениеДокумента);
						
				Иначе

					СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Перед добавлением корректировочного счета-фактуры проведите счет-фактуру у исправляемого документа: %1'"),
						ТекСтрока.ПредставлениеДокумента);

				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрокаОшибки,
					ТекСтрока.ИсправляемыйДокумент,
					,,
					Отказ);
			
			КонецЦикла;
		
			Если Отказ Тогда
				ВызватьИсключение НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте счет-фактуры у исправляемых документов'");
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	ТаблицаПараметрыЗаполнения = Документы.СчетФактураВыданный.ПодготовитьПараметрыЗаполненияКорректировочный(Основание, Отказ);
	КодВидаОперацииОснованияУменьшение = "";
	
	Если Отказ Тогда
		
		ТекстСообщения = ?(ТипЗнч(ТаблицаПараметрыЗаполнения) = Тип("Строка"),
			ТаблицаПараметрыЗаполнения,
			НСтр("ru='Нет данных для заполнения счета-фактуры.'"));
			
			ВызватьИсключение ТекстСообщения;
		
	ИначеЕсли ТаблицаПараметрыЗаполнения.Количество() > 0 Тогда
		
		СтрокаПараметров = ТаблицаПараметрыЗаполнения[0];
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаПараметров);
		
		КодВидаОперации = ПолучитьКодВидаОперации(СтрокаПараметров.КодВидаОперацииОснования);
		КодВидаОперацииОснованияУменьшение = СтрокаПараметров.КодВидаОперацииОснованияУменьшение;
		
	КонецЕсли;
	
	ДокументыОснования.Очистить();

	Для каждого ПараметрыЗаполнения Из ТаблицаПараметрыЗаполнения Цикл 
	
		НоваяСтрока = ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = ПараметрыЗаполнения.ДокументОснование;
		НоваяСтрока.ИсходныйДокумент = ПараметрыЗаполнения.ИсправляемыйСчетФактура;
		
		Если ПустаяСтрока(КППКонтрагента) Тогда
			КППКонтрагента = УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(ДокументыОснования[0].ДокументОснование, "Грузополучатель");
		КонецЕсли;
		
		ПлатежноРасчетныеДокументы.Очистить();
		ДатыНомераПРД = Документы.СчетФактураВыданный.ДатыНомераПлатежноРасчетныхДокументов(
			ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
		Для Каждого СтрокаТаблицы Из ДатыНомераПРД Цикл
			НоваяСтрока = ПлатежноРасчетныеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
			Для Каждого ДанныеПРД Из ИсправляемыйСчетФактура.ПлатежноРасчетныеДокументы Цикл
				НоваяСтрока = ПлатежноРасчетныеДокументы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПРД);
			КонецЦикла;
		КонецЕсли;
	
	КонецЦикла;

	ПлатежноРасчетныеДокументы.Свернуть("ДатаДокумента,НомерДокумента");
	ПлатежноРасчетныеДокументы.Сортировать("ДатаДокумента,НомерДокумента");
	
	ОпределениеПараметровСчетаФактурыНаРеализацию();
	
	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Дата);
	Если ВерсияКодовВидовОпераций > 1 Тогда
		Если КодВидаОперацииОснованияУменьшение <> "" Тогда 
			КодВидаОперацииНаУменьшение = КодВидаОперацииОснованияУменьшение;
		Иначе
			Если ЗначениеЗаполнено(ДоговорКонтрагента)
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем") Тогда 
				КодВидаОперацииНаУменьшение = "34";
			Иначе
				КодВидаОперацииНаУменьшение = "18";
			КонецЕсли;
		КонецЕсли;
	Иначе
		КодВидаОперацииНаУменьшение = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределениеПараметровСчетаФактурыНаРеализацию() Экспорт
	
	Если ДокументыОснования.Количество() = 0
		ИЛИ НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Дата);
	ДатаДляФЗ56 = ?(Исправление, ДатаИсходногоДокумента, Дата);
	ВедетсяУчетНДСПоФЗ56 = УчетНДС.ВедетсяУчетНДСПоФЗ56(ДатаДляФЗ56); 
	
	Если ДокументОснование <> ДокументыОснования[0].ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	ВидСчетаФактурыПоОснованию = УчетНДСПереопределяемый.ОпределитьВидСчетаФактурыВыданногоПоТипуОснования(ДокументОснование);
	
	Если ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		ИЛИ ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		
		Перезаполнить = Ложь;
		Если НЕ ВидСчетаФактуры = ВидСчетаФактурыПоОснованию Тогда
			ВидСчетаФактуры = ВидСчетаФактурыПоОснованию;
			Перезаполнить   = Истина;
		КонецЕсли;

		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
			ИсправлениеОснования = ДокументОснование.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
			СменаПризнакаИсправление = Исправление <> ИсправлениеОснования;
			Если Перезаполнить ИЛИ СменаПризнакаИсправление Тогда
				Если СменаПризнакаИсправление Тогда
					Номер = "";
				КонецЕсли;
				ЗаполнитьСчетФактуруКорректировочный(ДокументОснование, Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСФ = УчетНДСПереопределяемый.ПараметрыСчетаФактуры(ЭтотОбъект);
	УстановитьПривилегированныйРежим(Ложь);
	
	СинхронизируемыеРеквизиты = "Организация,Контрагент,ДоговорКонтрагента,ВалютаДокумента"
		+ ",СуммаДокумента,СуммаУвеличение,СуммаУменьшение,Продавец,НомерСчетаФактурыПродавца,КПППродавца";
		
	Если ИспользуетсяПостановлениеНДС1137 Тогда
		
		СинхронизируемыеРеквизиты = СинхронизируемыеРеквизиты 
			+ ",СчетФактураБезНДС,СуммаНДСДокумента,СуммаНДСУвеличение,СуммаНДСУменьшение";
		
		Если ДатаВыставления >= '20150101' Тогда
			СинхронизируемыеРеквизиты = СинхронизируемыеРеквизиты 
				+ ",СуммаДокументаКомиссия,СуммаУвеличениеКомиссия,СуммаУменьшениеКомиссия"
				+ ",СуммаНДСДокументаКомиссия,СуммаНДСУвеличениеКомиссия,СуммаНДСУменьшениеКомиссия";
		КонецЕсли;
		
		// Идентификатор государственного контракта заполняется автоматически только для КОРП версии.
		Если ВедетсяУчетНДСПоФЗ56 
			И ПолучитьФункциональнуюОпцию("ИспользуетсяГособоронзаказ") 
			И НЕ ЗначениеЗаполнено(ИдентификаторГосКонтракта) Тогда
			СинхронизируемыеРеквизиты = СинхронизируемыеРеквизиты + ",ИдентификаторГосКонтракта";
		КонецЕсли;
		
	КонецЕсли;
	
	СинхронизироватьРеквизитыОбъекта(ПараметрыСФ, СинхронизируемыеРеквизиты);
	
	Если ИспользуетсяПостановлениеНДС1137 И НЕ ЗначениеЗаполнено(КодВидаОперации) Тогда
		Если ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			КодВидаОперации = ПолучитьКодВидаОперации();
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ИсправляемыйДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДокументОснование, "ИсправляемыйДокументРеализации");
		
		Если ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			СтруктураОтбора = Новый Структура("Продавец", Справочники.Контрагенты.ПустаяСсылка());
			РезультатПоискаИсправляемыйСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(
				ИсправляемыйДокументРеализации,,,
				СтруктураОтбора);
				
		ИначеЕсли ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
			РезультатПоискаИсправляемыйСчетФактура = ИсправляемыйДокументРеализации;
		Иначе
			РезультатПоискаИсправляемыйСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(
				ИсправляемыйДокументРеализации);
		КонецЕсли;
		
		Если РезультатПоискаИсправляемыйСчетФактура = Неопределено Тогда
			РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда 

		РезультатПоискаИсправляемыйСчетФактура = ИсправляемыйСчетФактура;
		
	Иначе
		РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;

	Если ИсправляемыйСчетФактура <> РезультатПоискаИсправляемыйСчетФактура Тогда
		
		ИсправляемыйСчетФактура = РезультатПоискаИсправляемыйСчетФактура;
		РеквизитыИсправляемогоСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсправляемыйСчетФактура, "Дата, Номер");
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный И Исправление Тогда
			НомерИсправляемогоКорректировочногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыИсправляемогоСчетаФактуры.Номер, Истина, Ложь);
			ДатаИсправляемогоКорректировочногоДокумента  = РеквизитыИсправляемогоСчетаФактуры.Дата;
			НомерИсходногоДокумента = "";
			ДатаИсходногоДокумента  = '00010101';
		ИначеЕсли Исправление Тогда
			НомерИсходногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыИсправляемогоСчетаФактуры.Номер, Истина, Ложь);
			ДатаИсходногоДокумента  = РеквизитыИсправляемогоСчетаФактуры.Дата;
			НомерИсправляемогоКорректировочногоДокумента = "";
			ДатаИсправляемогоКорректировочногоДокумента  = '00010101';
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") 
		И ИспользуетсяПостановлениеНДС1137 Тогда
		
		СчетФактураНеВыставляется = Истина;
		
	КонецЕсли;
	
	Если ПустаяСтрока(КППКонтрагента) Тогда
		КППКонтрагента = УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(ДокументОснование, "Грузополучатель");
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный 
		И ПараметрыСФ.РеквизитыОснований.Количество() <> 0 Тогда
		
		ДокументыОснования.Очистить();
		
		Для Каждого СтрокаСРеквизитами Из ПараметрыСФ.РеквизитыОснований Цикл
			
			Основание = ДокументыОснования.Добавить();
			Если СтрокаСРеквизитами <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Основание, СтрокаСРеквизитами);
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаОснований = ПараметрыСФ.РеквизитыОснований;
		ТаблицаОснований.Свернуть("НомерИсходногоДокумента, ДатаИсходногоДокумента");
		
		Если ТаблицаОснований.Количество() > 1 Тогда
			ПараметрСводныйКорректировочный = Истина;
		Иначе
			ПараметрСводныйКорректировочный = Ложь;
		КонецЕсли; 
	Иначе
		ПараметрСводныйКорректировочный = Ложь;
	КонецЕсли;
	
	Если СводныйКорректировочный <> ПараметрСводныйКорректировочный Тогда
		СводныйКорректировочный = ПараметрСводныйКорректировочный;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКодВидаОперации(КодВидаОперацииОснования = Неопределено)

	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Дата",						Дата);
	СтруктураПараметров.Вставить("ВидСчетаФактуры",				ВидСчетаФактуры);
	СтруктураПараметров.Вставить("Исправление",					Исправление);
	СтруктураПараметров.Вставить("Контрагент",					Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",			ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Продавец",					Продавец);
	СтруктураПараметров.Вставить("СчетФактураНеВыставляется",	СчетФактураНеВыставляется);
	СтруктураПараметров.Вставить("СчетФактураБезНДС",			СчетФактураБезНДС);
	СтруктураПараметров.Вставить("КодВидаОперации",				КодВидаОперации);
	СтруктураПараметров.Вставить("ДокументыОснования",			ДокументыОснования.Выгрузить(,"ДокументОснование"));
	СтруктураПараметров.Вставить("ДокументОснование",			ДокументОснование);

	Возврат Документы.СчетФактураВыданный.ПолучитьКодВидаОперации(СтруктураПараметров, КодВидаОперацииОснования);

КонецФункции

Процедура ПроверкаРеквизитовСчетаФактурыПоВиду()

	Если СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;

	// Проверка табличной части ДокументыОснования, ПлатежноРасчетныеДокументы

	Если НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
		И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.СводнаяСправка
		И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочнаяСправка Тогда

		Если ЗначениеЗаполнено(ДокументОснование)
			И ДокументыОснования.Количество() = 0 Тогда

			НоваяСтрока	= ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование	= ДокументОснование;

		ИначеЕсли ЗначениеЗаполнено(ДокументОснование)
			И ДокументыОснования.Количество() = 1 Тогда
			
			Если ДокументОснование <> ДокументыОснования[0].ДокументОснование Тогда 
				ДокументыОснования[0].ДокументОснование = ДокументОснование;	
			КонецЕсли;	
			
		ИначеЕсли ДокументыОснования.Количество() > 1 Тогда

			ДокументОснованиеПервый = ДокументыОснования[0].ДокументОснование;

			ДокументыОснования.Очистить();
			НоваяСтрока	= ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = ДокументОснованиеПервый;

		КонецЕсли;

		Если ЗначениеЗаполнено(ДатаПлатежноРасчетногоДокумента) 
			ИЛИ ЗначениеЗаполнено(НомерПлатежноРасчетногоДокумента) Тогда
			
			Если ПлатежноРасчетныеДокументы.Количество() = 0 Тогда
				НоваяСтрока	= ПлатежноРасчетныеДокументы.Добавить();
				НоваяСтрока.ДатаДокумента	= ДатаПлатежноРасчетногоДокумента;
				НоваяСтрока.НомерДокумента	= НомерПлатежноРасчетногоДокумента;
			Иначе
				ДатаДокументаПервый		= ПлатежноРасчетныеДокументы[0].ДатаДокумента;
				НомерДокументаПервый	= ПлатежноРасчетныеДокументы[0].НомерДокумента;
				
				Если ПлатежноРасчетныеДокументы.Количество() > 1  
					ИЛИ ДатаПлатежноРасчетногоДокумента <> ДатаДокументаПервый 
					ИЛИ НомерПлатежноРасчетногоДокумента <> НомерДокументаПервый Тогда 
					ПлатежноРасчетныеДокументы.Очистить();
					НоваяСтрока	= ПлатежноРасчетныеДокументы.Добавить();
					НоваяСтрока.ДатаДокумента 	= ДатаПлатежноРасчетногоДокумента;
					НоваяСтрока.НомерДокумента	= НомерПлатежноРасчетногоДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ПлатежноРасчетныеДокументы.Очистить(); 		
		КонецЕсли;

	КонецЕсли;

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда

		ДатаПлатежноРасчетногоДокумента		= '00010101';
		НомерПлатежноРасчетногоДокумента	= "";
		ПлатежноРасчетныеДокументы.Очистить();

	КонецЕсли;

	// Проверка табличной части Авансы

	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
		И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс
		И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		Авансы.Очистить();
	Иначе
		Если НЕ СводныйКомиссионный Тогда
			РеквизитыДляОчистки = "Контрагент,ДокументОснование,ДатаПлатежноРасчетногоДокумента,НомерПлатежноРасчетногоДокумента";
		ИначеЕсли ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
			РеквизитыДляОчистки = "ДокументОснование,ДатаПлатежноРасчетногоДокумента,НомерПлатежноРасчетногоДокумента";
		Иначе
			РеквизитыДляОчистки = "";
		КонецЕсли;
		Если НЕ ПустаяСтрока(РеквизитыДляОчистки) Тогда
			ТаблицаАвансы = Авансы.Выгрузить();
			ТаблицаАвансы.ЗаполнитьЗначения(Неопределено, РеквизитыДляОчистки);
			Авансы.Загрузить(ТаблицаАвансы);
		КонецЕсли;
	КонецЕсли;

	// Проверка реквизитов шапки

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.СводнаяСправка
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочнаяСправка Тогда
		СчетФактураНеВыставляется = Истина;
		Выставлен		= Ложь;
		ДатаВыставления	= '00010101';
	КонецЕсли;
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		СчетФактураНеВыставляется = Ложь;
	ИначеЕсли НЕ (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		И ДокументыОснования.Количество() > 0
		И ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование)
		И (ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"))
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументыОснования[0].ДокументОснование, "ВыписыватьСчетаФактурыСводно")) Тогда
		СводныйКомиссионный = Ложь;
	КонецЕсли;

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда

		ВалютаРегламентированногоУчета	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Если НЕ ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			ВалютаДокумента = ВалютаРегламентированногоУчета;
		КонецЕсли;

		ДоговорКонтрагента = Неопределено;

		Исправление	= Ложь;

	КонецЕсли;

	Если НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный 
		И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочнаяСправка Тогда

		НомерИсправляемогоКорректировочногоДокумента = "";
		ДатаИсправляемогоКорректировочногоДокумента  = '00010101';

		Если НЕ Исправление Тогда
			НомерИсходногоДокумента = "";
			ДатаИсходногоДокумента  = '00010101';
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьСуммуДокумента()

	Если СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
	 ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда

		ОпределениеПараметровСчетаФактурыНаРеализацию();

	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
	      ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
	      ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
	      ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		
		Сумма             = Авансы.Итог("Сумма");
		СуммаНДС          = Авансы.Итог("СуммаНДС");
		СуммаДокумента    = Сумма;
		СуммаНДСДокумента = СуммаНДС;

		Если (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
			ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента)
			И Дата >= '20150101' Тогда
			СуммаДокументаКомиссия    = СуммаДокумента;
			СуммаНДСДокументаКомиссия = СуммаНДСДокумента;
		Иначе
			СуммаДокументаКомиссия    = 0;
			СуммаНДСДокументаКомиссия = 0;
		КонецЕсли;
		
		Если СводныйКорректировочный Тогда
			СводныйКорректировочный = Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
		
		СводныйКорректировочный = Ложь;
		СуммаДокументаКомиссия    = 0;
		СуммаНДСДокументаКомиссия = 0;
		
		Сумма             = Авансы.Итог("Сумма") - Авансы.Итог("СуммаДоКорректировки");
		СуммаНДС          = Авансы.Итог("СуммаНДС") - Авансы.Итог("СуммаНДСДоКорректировки");
		СуммаДокумента    = Сумма;
		СуммаНДСДокумента = СуммаНДС;
		
		ИсходныеДокументы = Авансы.ВыгрузитьКолонку("КорректируемыйСчетФактура");
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИсходныеДокументы);
		СводныйКорректировочный = ИсходныеДокументы.Количество() > 1;
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		
		СуммаДокумента    = Сумма;
		СуммаНДСДокумента = СуммаНДС;
		
		Если СводныйКорректировочный Тогда
			СводныйКорректировочный = Ложь;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ЕстьДублиСчетаФактуры()
	
	ЕстьДубли = Ложь;
	
	// Комитентам может быть перевыставленно несколько счетов-фактур по одному основанию.
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
		Возврат ЕстьДубли;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию 
	 ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный 
	 ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.СводнаяСправка 
	 ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочнаяСправка Тогда
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Продавец", Справочники.Контрагенты.ПустаяСсылка());
		// По одному основанию к одной исходной справке может быть выписана только одна корректировочная справка.
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочнаяСправка Тогда 
			СтруктураОтбора.Вставить("ИсправляемыйСчетФактура", ИсправляемыйСчетФактура);
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.СводнаяСправка Тогда
			СтруктураОтбора.Вставить("ВидСчетаФактуры", Перечисления.ВидСчетаФактурыВыставленного.СводнаяСправка);
		КонецЕсли;
		
		МассивДокументовОснований = Новый Массив;
		
		Для Каждого СтрокаОснования Из ДокументыОснования Цикл
			
			Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОказаниеУслуг")
				ИЛИ ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
				ИЛИ ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ПодтверждениеНулевойСтавкиНДС")
				ИЛИ (ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
					И ЗначениеЗаполнено(Продавец)) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивДокументовОснований.Добавить(СтрокаОснования.ДокументОснование);
			
		КонецЦикла;
			
		СуществующиеСФ = УчетНДСПереопределяемый.НайтиПодчиненныеСчетаФактурыВыданныеНаРеализацию(
			МассивДокументовОснований, Ссылка, , СтруктураОтбора);
		Для Каждого СуществующийСФ Из СуществующиеСФ Цикл
			Если ЗначениеЗаполнено(СуществующийСФ.Значение) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='На основании документа %1 был введен %2'"),
					СуществующийСФ.Ключ,
					СуществующийСФ.Значение);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
				ЕстьДубли = Истина;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОказаниеУслуг")
		 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПодтверждениеНулевойСтавкиНДС") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СуществующийСФ = Неопределено;
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		 ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента 
		 ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
			СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаАванс(
				ДокументОснование, Ссылка, Контрагент, ДоговорКонтрагента, НомерИсправления);
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
			СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНалоговыйАгент(
				ДокументОснование, Ссылка, ДоговорКонтрагента, НомерИсправления);
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
			СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаСуммовуюРазницу(
				ДокументОснование, Ссылка, ДоговорКонтрагента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СуществующийСФ) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='На основании документа %1 был введен %2'"),
				ДокументОснование,
				СуществующийСФ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
			ЕстьДубли = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьДубли;

КонецФункции

Процедура УстановитьПредставлениеНомера()
	
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		ЭтотОбъект.УстановитьНовыйНомер();	
	КонецЕсли;
	
	Если Исправление Тогда
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			ПредставлениеНомера = НомерИсправляемогоКорректировочногоДокумента + " (испр. "+ НомерИсправления+")";
		Иначе
			ПредставлениеНомера = НомерИсходногоДокумента + " (испр. "+ НомерИсправления+")";
		КонецЕсли;
	Иначе
		ПредставлениеНомера = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Истина, Ложь);		
	КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизироватьРеквизитыОбъекта(ПараметрыСФ, СтрокаРеквизиты)
	
	Реквизиты = СтрРазделить(СтрокаРеквизиты, ",", Ложь);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		Если ПараметрыСФ[Реквизит] <> Неопределено
			И ПараметрыСФ[Реквизит] <> ЭтотОбъект[Реквизит] Тогда
			
			ЭтотОбъект[Реквизит] = ПараметрыСФ[Реквизит];
			
			Если Реквизит = "Организация" Тогда
				Номер = "";
			ИначеЕсли Реквизит = "Контрагент" Тогда
				КППКонтрагента = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОпределениеПараметровСводнойИКорректировочнойСправки() Экспорт
	
	Если ДокументыОснования.Количество() = 0
		ИЛИ НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		ПараметрыСФ = Новый Структура("СуммаДокумента,СуммаНДСДокумента", 0, 0);
		СинхронизируемыеРеквизиты = "СуммаДокумента,СуммаНДСДокумента";
		СинхронизироватьРеквизитыОбъекта(ПараметрыСФ, СинхронизируемыеРеквизиты);
		Возврат;
	КонецЕсли;
	
	Если ДокументОснование <> ДокументыОснования[0].ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСФ = УчетНДСПереопределяемый.ПараметрыСчетаФактуры(ЭтотОбъект);
	УстановитьПривилегированныйРежим(Ложь);
	
	СинхронизируемыеРеквизиты = "Организация,СуммаДокумента,СуммаНДСДокумента";
		
	СинхронизироватьРеквизитыОбъекта(ПараметрыСФ, СинхронизируемыеРеквизиты);
	
КонецПроцедуры

Функция СчетФактураКомитенту()
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента 
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция СписокИсправляемыхДокументовБезСчетовФактур(Основание)

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.ИсправляемыйДокумент КАК ИсправляемыйДокумент,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Проведен КАК СтатусСчетаФактуры,
	|	СчетФактураВыданныйДокументыОснования.Ссылка ЕСТЬ NULL КАК СчетФактураОтсутствует
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО ВозвратТоваровОтПокупателяТовары.ИсправляемыйДокумент = СчетФактураВыданныйДокументыОснования.ДокументОснование
	|			И (НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления)
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Основание
	|	И ВозвратТоваровОтПокупателяТовары.ИсправляемыйДокумент <> Неопределено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|ПОМЕСТИТЬ ДокументыСПроведеннымиСчетамиФактурами
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.СтатусСчетаФактуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ИсправляемыйДокумент КАК ИсправляемыйДокумент,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.ИсправляемыйДокумент) КАК ПредставлениеДокумента,
	|	ТаблицаДокументов.СчетФактураОтсутствует КАК СчетФактураОтсутствует
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыСПроведеннымиСчетамиФактурами КАК ДокументыСПроведеннымиСчетамиФактурами
	|		ПО ТаблицаДокументов.ИсправляемыйДокумент = ДокументыСПроведеннымиСчетамиФактурами.ИсправляемыйДокумент
	|ГДЕ
	|	ДокументыСПроведеннымиСчетамиФактурами.ИсправляемыйДокумент ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.ИсправляемыйДокумент,
	|	ТаблицаДокументов.СчетФактураОтсутствует";
	
	Запрос.УстановитьПараметр("Основание", Основание);
	СписокИсправляемыхДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат СписокИсправляемыхДокументов;

КонецФункции

#КонецЕсли