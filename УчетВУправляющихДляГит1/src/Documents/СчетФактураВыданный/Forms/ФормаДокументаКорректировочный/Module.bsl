
#Область ОписаниеПеременны

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОтправкаПочтовыхСообщений.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.СчетФактураВыданный",
		"ФормаДокументаКорректировочный",
		НСтр("ru='Новости: Счет-фактура выданный'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаВыбораКПП" Тогда
		Модифицированность	= Истина;
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокументыОснования" Тогда
		Модифицированность	= Истина;
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
   	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеСчетФактураВыданныйКорректировочный";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
		
	ЗагрузитьСписокИсходныхСчетовФактур();
	
	ПредставлениеДокумента = Документы.СчетФактураВыданный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	УчетНДСКлиентСервер.ДополнитьПараметрыСобытияЗаписьСчетаФактуры(ПараметрыЗаписи);
	ПараметрыЗаписи.ДокументыОснования = ОбщегоНазначения.ВыгрузитьКолонку(ТекущийОбъект.ДокументыОснования, "ДокументОснование", Истина);
	ПараметрыЗаписи.РеквизитыСФ        = УчетНДСВызовСервера.РеквизитыДляНадписиОСчетеФактуреВыданном(ТекущийОбъект.Ссылка);
	
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УчетНДСКлиентСервер.ДополнитьПараметрыСобытияЗаписьСчетаФактуры(ПараметрыЗаписи); // На 8.2 в web-клиенте ПараметрыЗаписи могут быть не инициализированы
	
	// Обновляем информацию о счете-фактуре в открытых формах документов-оснований
	Оповестить("Запись_СчетФактураВыданныйКорректировочный", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.Дата < '20111001' Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'До 01.10.2011 нельзя создавать корректировочные счета-фактуры.'"));
		Объект.Дата	= '20111001';
	КонецЕсли;

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Проверка на изменение ответственных лиц.
	Если НЕ ТребуетсяВызовСервера Тогда
		Если ТипЗнч(ДатыИзмененияОтветственныхЛиц) = Тип("ФиксированныйМассив") Тогда
		 	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиентСервер.ДатыПринадлежатРазнымИнтервалам(Объект.Дата, 
		 		ТекущаяДатаДокумента, ДатыИзмененияОтветственныхЛиц);
		КонецЕсли;
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	КонтрагентПриИзмененииНаСервере();
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКППКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров	= Новый Структура("Контрагент, КППКонтрагента, РольКонтрагента");
	СтруктураПараметров.РольКонтрагента	= "Покупатель";
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКПП", СтруктураПараметров, ЭтаФорма)
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленПриИзменении(Элемент)
	
	ПриИзмененииПризнакаВыставления();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПризнакаВыставления()
	
	Если НЕ Объект.Выставлен Тогда
		Объект.ДатаВыставления	= '00010101';
	Иначе
		Объект.ДатаВыставления	= Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураНеВыставляетсяПриИзменении(Элемент)

	СчетФактураНеВыставляетсяПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Уменьшение", Ложь);
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура КодСпособаВыставленияПриИзменении(Элемент)
	
	Если Объект.КодСпособаВыставления = 2 Тогда
		Объект.Выставлен = Ложь;
		Объект.ДатаВыставления = '00010101';
	Иначе
		Объект.Выставлен = Истина;
		ПриИзмененииПризнакаВыставления();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОтветственныйПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ДекорацияСостояниеЭДОНажатие(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПродавецПриИзменении(Элемент)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНаУменьшениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Уменьшение", Истина);
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНаУменьшениеПриИзменении(Элемент)
	
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперацииНаУменьшение);
	Если ТекущийКод <> Неопределено Тогда
		НадписьВидОперацииУменьшение = Сред(ТекущийКод.Представление, 5);
	Иначе
		НадписьВидОперацииУменьшение = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторГосКонтрактаРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВключитьИспользованиеГособоронзаказа" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.ФункциональностьПрограммы.Форма.ФормаФункциональностьПрограммы",
			Новый Структура("ТекущаяСтраница", "ГруппаРасчеты"));
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьОснование(Команда)
	
	ВыбратьОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПолучитьРежимЗаписи();
	Если ЭтаФорма.Записать(Новый Структура("РежимЗаписи", РежимЗаписи)) Тогда 
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// Руководитель, ГлавныйБухгалтер

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Руководитель");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГлавныйБухгалтер");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИспользуетсяПостановлениеНДС1137", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента          = Объект.Дата;
	ДатыИзмененияОтветственныхЛиц = ОтветственныеЛицаБППовтИсп.ДатыИзмененияОтветственныхЛицОрганизаций(Объект.Организация);
	
	ЗагрузитьСписокИсходныхСчетовФактур();
		
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КППКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "КПП");
	Иначе
		КППКонтрагента = "";
	КонецЕсли;
	
	ЗаполнитьСписокКодовОпераций();
	
	КорректировкаПриЗакупкеПоКомиссии = Ложь;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
		ДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ДокументРеализации");
		
		ИсходныйДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
		Если ТипЗнч(ИсходныйДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный")
			И ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку Тогда
			
			КорректировкаПриЗакупкеПоКомиссии = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоОснований = КоличествоОснований(Объект.ДокументыОснования);
	
	УстановитьВидимость();
	
	ПредставлениеДокумента = Документы.СчетФактураВыданный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	УправлениеФормой(ЭтаФорма);
	
	Если Обработки.ФункциональностьПрограммы.ДоступнаФункциональностьГособоронзаказ() Тогда
		Элементы.ИдентификаторГосКонтракта.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокИсходныхСчетовФактур()
	
	ИсходныеСчетаФактуры.Очистить();
		
	Для Каждого Основание Из Объект.ДокументыОснования Цикл
		
		СчетФактура = ИсходныеСчетаФактуры.Добавить();
		ЗаполнитьЗначенияСвойств(СчетФактура, Основание); 
		
		РеквизитыИсходногоСчетаФактуры = Документы.СчетФактураВыданный.ПолучитьРеквизитыИсходногоСчетаФактурыДляКорректировки(
			Основание.ДокументОснование, Объект.Ссылка, Истина,, Основание.ИсходныйДокумент);
			
		Если РеквизитыИсходногоСчетаФактуры <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(СчетФактура, РеквизитыИсходногоСчетаФактуры); 
		Иначе
			СчетФактура.СчетФактураКраткоеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"), ?(Основание.УчитыватьИсправлениеИсходногодокумента,
				Основание.НомерИсходногоДокумента + " (испр. " + Основание.НомерИсправленияИсходногоДокумента +")", Основание.НомерИсходногоДокумента), Формат(Основание.ДатаИсходногоДокумента, "ДЛФ=Д"));
		КонецЕсли;
		
	КонецЦикла;
	
	ТЗ = ИсходныеСчетаФактуры.Выгрузить();
	ТЗ.Свернуть("СчетФактура, СчетФактураПредставление, СчетФактураКраткоеПредставление", 
		"СуммаУвеличение, СуммаУменьшение, СуммаНДСУвеличение, СуммаНДСУменьшение");
	ИсходныеСчетаФактуры.Загрузить(ТЗ);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	Если Объект.Исправление Тогда 
		ДатаДляФункциональныхОпций = Объект.ДатаИсправляемогоКорректировочногоДокумента;
	Иначе
		ДатаДляФункциональныхОпций = Объект.Дата;
	КонецЕсли;
	
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(ДатаДляФункциональныхОпций);
	ВедетсяУчетНДСПоФЗ81 = УчетНДС.ВедетсяУчетНДСПоФЗ81(ДатаДляФункциональныхОпций);
	ВедетсяУчетНДСПоФЗ56 = УчетНДС.ВедетсяУчетНДСПоФЗ56(ДатаДляФункциональныхОпций);
	
	ОтражатьСуммыВЖурнале = Объект.ДатаВыставления >= '20150101' И (ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов"));
	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(ДатаДляФункциональныхОпций);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СчетаФактурыОтИмениОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "СчетаФактурыОтИмениОрганизации");
	Иначе
		СчетаФактурыОтИмениОрганизации = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаИтоги.Видимость = ИспользуетсяПостановлениеНДС1137;
	
	Элементы.ГруппаКомиссияПоЗакупке.Видимость = КорректировкаПриЗакупкеПоКомиссии;
	Элементы.ГруппаПродавец.Видимость = ЗначениеЗаполнено(Объект.Продавец)
		И НЕ КорректировкаПриЗакупкеПоКомиссии;
	
	Элементы.ГруппаУвеличениеКомиссия.Видимость = ОтражатьСуммыВЖурнале;
	Элементы.ГруппаУменьшениеКомиссия.Видимость = ОтражатьСуммыВЖурнале;
	
	Элементы.ПредставлениеКППКонтрагента.Видимость = 
		ИспользуетсяПостановлениеНДС1137 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮридическоеФизическоеЛицо") 
		<> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Элементы.ГруппаВидаОперацииНаУменьшение.Видимость = ВерсияКодовВидовОпераций > 1;
	
	Элементы.ДатаСчетаФактурыПродавца.Видимость = СчетаФактурыОтИмениОрганизации;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(ЭтотОбъект)
	
	Элементы = ЭтотОбъект.Элементы;
	Объект   = ЭтотОбъект.Объект;
	
	Если Объект.СформированПриВводеНачальныхОстатковНДС Тогда
		ЭтотОбъект.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЭтоИсправлениеПоПостановлению1137 = ЭтотОбъект.ИспользуетсяПостановлениеНДС1137 И Объект.Исправление;
	Элементы.НомерИсправленияСистемный.Доступность                    = ЭтоИсправлениеПоПостановлению1137;
	Элементы.НомерИсправляемогоКорректировочногоДокумента.Доступность = ЭтоИсправлениеПоПостановлению1137;
	Элементы.ДатаИсправляемогоКорректировочногоДокумента.Доступность  = ЭтоИсправлениеПоПостановлению1137;
	
	Если ЭтотОбъект.СчетаФактурыОтИмениОрганизации Тогда 
		Элементы.ПродавецЗакупка.Заголовок = НСтр("ru = 'Продавец'");
	Иначе
		Элементы.ПродавецЗакупка.Заголовок = НСтр("ru = 'Составлен от имени'");
	КонецЕсли;
	
	Если ЭтоИсправлениеПоПостановлению1137 Тогда
		ЭтотОбъект.РеквизитыИсправляемыйСФНадпись = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"),
			Объект.НомерИсправляемогоКорректировочногоДокумента, Формат(Объект.ДатаИсправляемогоКорректировочногоДокумента,"ДЛФ=Д"));
	КонецЕсли;
	
	Элементы.РеквизитыТекущийСФ.Видимость             = НЕ ЭтоИсправлениеПоПостановлению1137;
	Элементы.РеквизитыИсправляемыйСФНадпись.Видимость = ЭтоИсправлениеПоПостановлению1137;
	Элементы.ГруппаРеквизитыИсправления.Видимость     = ЭтоИсправлениеПоПостановлению1137;
	Элементы.ИдентификаторГосКонтракта.Видимость      = ЭтотОбъект.ВедетсяУчетНДСПоФЗ56;
		
	КоличествоОснований = ЭтотОбъект.КоличествоОснований;
	
	Если КоличествоОснований = 0 Тогда
		ЭтотОбъект.НадписьВыбор = НСтр("ru = 'Выбор'");
	ИначеЕсли КоличествоОснований > 1 Тогда
		Предмет = "документ,документа,документов,м,,,,0";
		ЭтотОбъект.НадписьДокументыОснования = ОбщегоНазначенияБПКлиентСервер.ПредставлениеСсылкиПредмета(
			Предмет, "док", Объект.ДокументыОснования[0].ДокументОснование, КоличествоОснований);
	КонецЕсли;
	
	Элементы.НадписьВыбор.Видимость               = КоличествоОснований = 0;
	Элементы.ГруппаНадписьОдноОснование.Видимость = КоличествоОснований = 1;
	Элементы.НадписьДокументыОснования.Видимость  = КоличествоОснований > 1;
	
	КоличествоКорректируемыхСчетовФактур = ЭтотОбъект.ИсходныеСчетаФактуры.Количество();
	
	Если КоличествоКорректируемыхСчетовФактур <> 0 Тогда 
		ТекстКорректируемыйСчетФактура = ЭтотОбъект.ИсходныеСчетаФактуры[0].СчетФактураКраткоеПредставление;
	Иначе
		ТекстКорректируемыйСчетФактура = "";
	КонецЕсли;
	
	Если КоличествоКорректируемыхСчетовФактур > 1 Тогда
		Элементы.НадписьСчетФактураКорректируемый.Заголовок =  НСтр("ru = 'К счетам-фактурам'");
		ЭтотОбъект.НадписьСчетФактураКорректируемый = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 и еще %2 с/ф'"),
			ТекстКорректируемыйСчетФактура, КоличествоКорректируемыхСчетовФактур-1);
	Иначе
		Элементы.НадписьСчетФактураКорректируемый.Заголовок =  НСтр("ru = 'К счету-фактуре'");
		ЭтотОбъект.НадписьСчетФактураКорректируемый = ТекстКорректируемыйСчетФактура;
	КонецЕсли;
	
	ЭтотОбъект.НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сумма документа после корректировки %1 %2, в т.ч. НДС %3'"),
		Объект.СуммаДокумента, Объект.ВалютаДокумента, Объект.СуммаНДСДокумента);

	ВерсияУчетаНДС	= УчетНДСКлиентСервер.Версия(Объект.Дата);
	
	Элементы.ГруппаВидаОперации.Видимость			= ЭтотОбъект.ИспользуетсяПостановлениеНДС1137;
	Элементы.СчетФактураНеВыставляется.Доступность	= ЭтотОбъект.ИспользуетсяПостановлениеНДС1137;
	
	ТекущийКод = Элементы.КодВидаОперации.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда 
		ЭтотОбъект.НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		ЭтотОбъект.НадписьВидОперации = "";
	КонецЕсли;
	
	Если ЭтотОбъект.ВерсияКодовВидовОпераций > 1 Тогда 
		ТекущийКод = Элементы.КодВидаОперацииНаУменьшение.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперацииНаУменьшение);
		Если ТекущийКод <> Неопределено Тогда 
			ЭтотОбъект.НадписьВидОперацииУменьшение = Сред(ТекущийКод.Представление, 5);
		Иначе
			ЭтотОбъект.НадписьВидОперацииУменьшение = "";
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Выставлен.Доступность						= ЭтотОбъект.ИспользуетсяПостановлениеНДС1137 И НЕ Объект.СчетФактураНеВыставляется;
	Элементы.ДатаВыставления.Доступность				= ЭтотОбъект.ИспользуетсяПостановлениеНДС1137 И НЕ Объект.СчетФактураНеВыставляется И Объект.Выставлен;
	Элементы.КодСпособаВыставления.Видимость		= ЭтотОбъект.ИспользуетсяПостановлениеНДС1137;
	Элементы.КодСпособаВыставления.Доступность	= НЕ Объект.СчетФактураНеВыставляется;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если НЕ ПустаяСтрока(Объект.КППКонтрагента) Тогда
			ЗначениеКППКонтрагента = Объект.КППКонтрагента;
		Иначе
			ЗначениеКППКонтрагента = ЭтотОбъект.КППКонтрагента;
		КонецЕсли;
		
		ЭтотОбъект.ПредставлениеКППКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'КПП %1'"), ?(ПустаяСтрока(ЗначениеКППКонтрагента), "<не задан>", ЗначениеКППКонтрагента));
	Иначе
		ЭтотОбъект.ПредставлениеКППКонтрагента = "";
	КонецЕсли;
	
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация);
	Элементы.Руководитель.Видимость = Истина;
	Если ЭтоЮрЛицо Тогда
		Элементы.Руководитель.Заголовок = НСтр("ru = 'Руководитель'");
		Элементы.ГлавныйБухгалтер.Видимость = Истина;
	ИначеЕсли ЭтотОбъект.ВедетсяУчетНДСПоФЗ81 Тогда
		Элементы.Руководитель.Заголовок = НСтр("ru = 'Предприниматель'");
		Элементы.ГлавныйБухгалтер.Видимость = Ложь;
	Иначе
		Элементы.Руководитель.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьКодВидаОперацииНаСервере();
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
	Если НЕ ИспользуетсяПостановлениеНДС1137 Тогда
		Объект.Исправление      = Ложь;
		Объект.НомерИсправления = 0;
		Объект.НомерИсправляемогоКорректировочногоДокумента = "";
		Объект.ДатаИсправляемогоКорректировочногоДокумента  = '00010101';
	ИначеЕсли Объект.Выставлен Тогда
		Объект.ДатаВыставления = Объект.Дата;
	КонецЕсли;
	
	ЗаполнитьСписокКодовОпераций();
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКодовОпераций()
	
	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
		Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры,
		Элементы.КодВидаОперации.СписокВыбора,
		Объект.Дата);
		
	Если ВерсияКодовВидовОпераций > 1 Тогда 
		УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
			Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры,
			Элементы.КодВидаОперацииНаУменьшение.СписокВыбора,
			Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.ДокументОснование	= Неопределено;
	Объект.ДокументыОснования.Очистить();
	Объект.ПлатежноРасчетныеДокументы.Очистить();
	
	УстановитьФункциональныеОпцииФормы();
	
	ПараметрыДокумента = Новый Структура(
		"Организация,Контрагент,ДоговорКонтрагента,СчетФактураНеВыставляется,ДокументОснование,ВидСчетаФактуры,Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыДокумента, Объект);
	
	НовыеПараметры = ПолучитьДанныеОрганизацияПриИзменении(ПараметрыДокумента);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры);
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	ДатыИзмененияОтветственныхЛиц = ОтветственныеЛицаБППовтИсп.ДатыИзмененияОтветственныхЛицОрганизаций(Объект.Организация);
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура СчетФактураНеВыставляетсяПриИзмененииНаСервере()

	Если Объект.СчетФактураНеВыставляется Тогда
		Объект.Выставлен             = Ложь;
		Объект.ДатаВыставления       = '00010101';
		Объект.КодСпособаВыставления = 1;
	КонецЕсли;
	
	УстановитьКодВидаОперацииНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменениеНаСервере();
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()
	
	Объект.ДокументОснование	= Неопределено;
	Объект.ДоговорКонтрагента	= Неопределено;
	Объект.ДокументыОснования.Очистить();
	Объект.ПлатежноРасчетныеДокументы.Очистить();
	
	ПараметрыДокумента = Новый Структура(
		"Организация,Контрагент,ДоговорКонтрагента,СчетФактураНеВыставляется,ДокументОснование,ВидСчетаФактуры,Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыДокумента, Объект);
		
	НовыеПараметры = ПолучитьДанныеКонтрагентПриИзменении(ПараметрыДокумента);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры);
	
	КППКонтрагента	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "КПП");
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		Объект.КППКонтрагента	= УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(Объект.ДокументыОснования[0].ДокументОснование, "Грузоотправитель");
	Иначе
		Объект.КППКонтрагента	= "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоговорКонтрагента(ПараметрыДокумента)
	
	ВидыДоговоров = Новый Массив;
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	
	ДанныеДоговора = ЗаполнениеДокументов.ПолучитьДанныеКонтрагентПриИзменении(ПараметрыДокумента, ВидыДоговоров);
	
	Возврат ДанныеДоговора.ДоговорКонтрагента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыДоговораКонтрагента(ДоговорКонтрагента)
	
	ПараметрыДоговора = Новый Структура;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ПараметрыДоговора.Вставить("ВалютаВзаиморасчетов", 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов"));
	Иначе
		ПараметрыДоговора.Вставить("ВалютаВзаиморасчетов", Справочники.Валюты.ПустаяСсылка());
	КонецЕсли;
	
	Возврат ПараметрыДоговора;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Знач ПараметрыДокумента)
	
	НовыеПараметры = Новый Структура;
	
	НовыйДоговор = ПолучитьДоговорКонтрагента(ПараметрыДокумента);
	НовыеПараметры.Вставить("ДоговорКонтрагента", НовыйДоговор);
	
	ПараметрыДоговора = ПолучитьПараметрыДоговораКонтрагента(НовыйДоговор);
	НовыеПараметры.Вставить("ВалютаДокумента", ПараметрыДоговора.ВалютаВзаиморасчетов);
	
	НовыеПараметры.Вставить("СуммаДокумента",  0);
	
	НовыеПараметры.Вставить("Выставлен");
	НовыеПараметры.Вставить("КодСпособаВыставления");
	НовыеПараметры.Вставить("ДатаВыставления");
		
	ПараметрыВыставления = Документы.СчетФактураВыданный.ОпределитьПорядокВыставленияСчетаФактуры(ПараметрыДокумента);
	ЗаполнитьЗначенияСвойств(НовыеПараметры, ПараметрыВыставления);
    			
	Возврат НовыеПараметры;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеКонтрагентПриИзменении(Знач ПараметрыДокумента)
	
	НовыеПараметры = Новый Структура;
	
	НовыеПараметры.Вставить("СуммаДокумента", 		0);
	НовыеПараметры.Вставить("СуммаНДСДокумента",  	0);
	НовыеПараметры.Вставить("СуммаНДСУвеличение",  	0);
	НовыеПараметры.Вставить("СуммаНДСУменьшение",  	0);
	НовыеПараметры.Вставить("СуммаУвеличение",  	0);
	НовыеПараметры.Вставить("СуммаУменьшение",  	0);
		
	НовыеПараметры.Вставить("Выставлен");
	НовыеПараметры.Вставить("КодСпособаВыставления");
	НовыеПараметры.Вставить("ДатаВыставления");
		
	ПараметрыВыставления = Документы.СчетФактураВыданный.ОпределитьПорядокВыставленияСчетаФактуры(ПараметрыДокумента);
	ЗаполнитьЗначенияСвойств(НовыеПараметры, ПараметрыВыставления);
			
	Возврат НовыеПараметры;
		
КонецФункции

&НаСервере
Процедура ПриИзмененииДокументаОснованияНаСервере()

	ОпределениеПараметровСчетаФактурыНаРеализациюСервер();
	ЗагрузитьСписокИсходныхСчетовФактур();
	
	ТаблицаОснований = Объект.ДокументыОснования.Выгрузить(, "НомерИсходногоДокумента, ДатаИсходногоДокумента");
	ТаблицаОснований.Свернуть("НомерИсходногоДокумента, ДатаИсходногоДокумента");
	
	Если ТаблицаОснований.Количество() > 1 Тогда
		СводныйКорректировочный = Истина;
	Иначе
		СводныйКорректировочный = Ложь;
	КонецЕсли;
	
	Если СводныйКорректировочный 
		И УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Объект.Дата) >= 3 Тогда
		// Выставление единого корректировочного счета-фактуры
		Объект.КодВидаОперации             = "01";
		Объект.КодВидаОперацииНаУменьшение = "01";
	Иначе
		Объект.КодВидаОперации             = "01";
		Объект.КодВидаОперацииНаУменьшение = "18";
	КонецЕсли;
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОпределениеПараметровСчетаФактурыНаРеализациюСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ОпределениеПараметровСчетаФактурыНаРеализацию();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма, ПредставлениеДокумента)
	
	Форма.Заголовок = ПредставлениеДокумента.СчетФактураПредставление;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодВидаОперацииНаСервере(КодВидаОперацииОснования = Неопределено)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата",                      Объект.Дата);
	СтруктураПараметров.Вставить("ВидСчетаФактуры",           Объект.ВидСчетаФактуры);
	СтруктураПараметров.Вставить("Исправление",               Объект.Исправление);
	СтруктураПараметров.Вставить("Контрагент",                Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",        Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Продавец",                  Объект.Продавец);
	СтруктураПараметров.Вставить("СчетФактураНеВыставляется", Объект.СчетФактураНеВыставляется);
	СтруктураПараметров.Вставить("СчетФактураБезНДС",         Объект.СчетФактураБезНДС);
	СтруктураПараметров.Вставить("КодВидаОперации",           Объект.КодВидаОперации);
	СтруктураПараметров.Вставить("ДокументыОснования",        Объект.ДокументыОснования.Выгрузить(,"ДокументОснование"));
	
	Объект.КодВидаОперации = Документы.СчетФактураВыданный.ПолучитьКодВидаОперации(
		СтруктураПараметров, КодВидаОперацииОснования);
		
	Если ВерсияКодовВидовОпераций > 1 
		И НЕ ЗначениеЗаполнено(Объект.КодВидаОперацииНаУменьшение) Тогда 
		Объект.КодВидаОперацииНаУменьшение = "18";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение( , Объект.ИсправляемыйСчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураКорректируемыйНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтаФорма.ИсходныеСчетаФактуры.Количество() = 1 Тогда
		ПоказатьЗначение( , ИсходныеСчетаФактуры[0].СчетФактура);
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СчетаФактуры", ИсходныеСчетаФактуры);
			
		ОткрытьФорму("ОбщаяФорма.ФормаПросмотраСчетовФактурОснований", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснование()
	
	ЕстьОшибкиЗаполнения = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьСтруктуруПараметровФормы();
		
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаДокументыОснования",
			ПараметрыФормы,
			ЭтаФорма);
						
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормы()
	
	СтруктураПараметров = Новый Структура();
	ЗначенияЗаполнения 	= Новый Структура();
	ЗначениеОтбора 		= Новый Структура();
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда 
		ЗначенияЗаполнения.Вставить("СписокДокументовОснований", Новый СписокЗначений);
		Для Каждого СтрокаТаблицы Из Объект.ДокументыОснования Цикл
			ЗначенияЗаполнения.СписокДокументовОснований.Добавить(СтрокаТаблицы.ДокументОснование)
		КонецЦикла;
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("ТипСчетаФактуры", "Выданный");
	ЗначенияЗаполнения.Вставить("ВидСчетаФактуры", Объект.ВидСчетаФактуры);
	ЗначенияЗаполнения.Вставить("Исправление", Объект.Исправление);
	ЗначенияЗаполнения.Вставить("СчетФактура", Объект.Ссылка);
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения); 
	
	ЗначениеОтбора.Вставить("Организация", Объект.Организация);
	ЗначениеОтбора.Вставить("Контрагент", Объект.Контрагент);
	ЗначениеОтбора.Вставить("Договор", Объект.ДоговорКонтрагента);
	ЗначениеОтбора.Вставить("Валюта", Объект.ВалютаДокумента);
	
	СтруктураПараметров.Вставить("Отбор", ЗначениеОтбора);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	Объект.ДокументыОснования.Очистить();
	
	Если ВыбранноеЗначение.Количество() = 0 Тогда 
		
		Объект.ДоговорКонтрагента 	= Неопределено;
		Объект.СуммаДокумента 		= 0;
		Объект.СуммаНДСДокумента 	= 0;
		Объект.СуммаУвеличение		= 0;
		Объект.СуммаНДСУвеличение	= 0;
		Объект.СуммаУменьшение		= 0;
		Объект.СуммаНДСУменьшение	= 0;
		
		Объект.ПлатежноРасчетныеДокументы.Очистить();
		
	Иначе
		Для Каждого СтрокаСписка Из ВыбранноеЗначение Цикл
			Если СтрокаСписка.Значение.Пустая() Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТаблицы = Объект.ДокументыОснования.Добавить();
			СтрокаТаблицы.ДокументОснование = СтрокаСписка.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ВидДоговораКонтрагента	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	Если НЕ ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку Тогда
		Объект.Продавец	= Неопределено;
	КонецЕсли;
	
	ПриИзмененииДокументаОснованияНаСервере();
	
	КоличествоОснований = КоличествоОснований(Объект.ДокументыОснования);

	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументыОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьОснование();
		
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииПриИзменении(Элемент)
	
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда
		НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		НадписьВидОперации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРежимЗаписи()
	
	Проводить = Истина;
	
	Для Каждого Стр из Объект.ДокументыОснования Цикл
		Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ДокументОснование, "Проведен") Тогда
			Проводить = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Проводить Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДатаВыставленияПриИзменении(Элемент)
	
	Если Объект.ДатаВыставления < Объект.Дата Тогда 
		Объект.ДатаВыставления = Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

 &НаКлиенте
Процедура НадписьВыборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьОснование();

КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйКод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйКод <> Неопределено Тогда
		Модифицированность = Истина;
		Если ДополнительныеПараметры.Уменьшение Тогда
			Объект.КодВидаОперацииНаУменьшение = ВыбранныйКод.Значение;
			НадписьВидОперацииУменьшение = Сред(ВыбранныйКод.Представление, 5);
		Иначе
			Объект.КодВидаОперации = ВыбранныйКод.Значение;
			НадписьВидОперации = Сред(ВыбранныйКод.Представление, 5);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

&НаСервереБезКонтекста
Функция КоличествоОснований(ТаблицаДокументовОснования)

	ТаблицаДокументовОснованийСводно = ТаблицаДокументовОснования.Выгрузить();
	ТаблицаДокументовОснованийСводно.Свернуть("ДокументОснование");
	КоличествоОснований = ТаблицаДокументовОснованийСводно.Количество();
	
	Возврат КоличествоОснований;

КонецФункции

#КонецОбласти
