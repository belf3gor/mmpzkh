
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОтправкаПочтовыхСообщений.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Параметры.Свойство("ДатаБольшеИлиРавно") Тогда
		Элементы.Список.Период.ДатаНачала = Параметры.ДатаБольшеИлиРавно;
	КонецЕсли;
	
	Если Параметры.Свойство("ДатаМеньшеИлиРавно") Тогда 
		Элементы.Список.Период.ДатаОкончания = Параметры.ДатаМеньшеИлиРавно;
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрыОтбораСписка") Тогда
		
		ПараметрыОтбораСписка = Параметры.ПараметрыОтбораСписка;
		Если ПараметрыОтбораСписка.Свойство("Организация") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ЭтаФорма.Список, "Организация", ПараметрыОтбораСписка.Организация, ВидСравненияКомпоновкиДанных.Равно, , Истина, 
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		КонецЕсли; 
		
		Если ПараметрыОтбораСписка.Свойство("ТолькоАвансовыеСчетаФактуры") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ЭтаФорма.Список, "ВидСчетаФактуры", 
				Перечисления.ВидСчетаФактурыВыставленного.СчетаФактурыНаАванс(),
				ВидСравненияКомпоновкиДанных.ВСписке, , Истина, 
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);
		ИначеЕсли ПараметрыОтбораСписка.Свойство("ВидСчетаФактуры") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ЭтаФорма.Список, "ВидСчетаФактуры", ПараметрыОтбораСписка.ВидСчетаФактуры, ВидСравненияКомпоновкиДанных.Равно, , Истина, 
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);
		КонецЕсли;
			
		Если ПараметрыОтбораСписка.Свойство("ИдентификаторГосКонтрактаЗаполнен") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ЭтаФорма.Список, "ИдентификаторГосКонтракта", , ВидСравненияКомпоновкиДанных.Заполнено, , Истина, 
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);
		КонецЕсли;
			
	Иначе
		ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма);
	КонецЕсли;
	
	МожноРедактировать = ПравоДоступа("Изменение", Метаданные.Документы.СчетФактураВыданный);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	УстановитьВидимостьКнопокСоздатьСчетФактуру();
	Элементы.ОткрытьЖурналСчетовФактур.Видимость = ПравоДоступа("Просмотр", Метаданные.Отчеты.ЖурналУчетаСчетовФактур);
	Элементы.ОткрытьКнигуПродаж.Видимость        = ПравоДоступа("Просмотр", Метаданные.Отчеты.КнигаПродаж);
	
	ОбщегоНазначенияБП.УстановитьВидимостьКолонокДополнительнойИнформации(ЭтотОбъект);
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаСписка(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.СчетФактураВыданный",
		"ФормаСписка",
		НСтр("ru='Новости: Счета-фактуры выданные'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	ТарификацияБП.РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(ЭтотОбъект);
	
	АдресХранилищаНастройкиДинСпискаДляРеестра = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	Если ОтображатьСтатусыДокументов Тогда
		
		// Подсистема "ОбменСКонтрагентами"
		ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
		// Конец Подсистема "ОбменСКонтрагентами"
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(Список, ,Параметр);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	ПрисоединенныеФайлыБПКлиент.ОбновитьСписокПослеДобавленияФайла(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("Запись_СчетФактураВыданный", , Элемент.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)

	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДанныеСтроки.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию") Тогда
		КлючеваяОперация = "ОткрытиеФормыСчетФактураВыданныйНаРеализацию";
	ИначеЕсли ДанныеСтроки.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАванс")
		ИЛИ ДанныеСтроки.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитента")
		ИЛИ ДанныеСтроки.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку") Тогда
		КлючеваяОперация = "ОткрытиеФормыСчетФактураВыданныйНаАванс";
	ИначеЕсли ДанныеСтроки.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент") Тогда
		КлючеваяОперация = "ОткрытиеФормыСчетФактураВыданныйНалоговыйАгент";
	ИначеЕсли ДанныеСтроки.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.Корректировочный") Тогда
		КлючеваяОперация = "ОткрытиеФормыСчетФактураВыданныйКорректировочный";
	ИначеЕсли ДанныеСтроки.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу") Тогда
		КлючеваяОперация = "ОткрытиеФормыСчетФактураВыданныйНаСуммовуюРазницу";
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);

КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБП.ВосстановитьОтборСписка(Список, Настройки, "Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		
		Если ПрисоединенныеФайлыБПКлиент.ПараметрыПеретаскиванияСодержатФайлы(ПараметрыПеретаскивания) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Ссылка"                 , Строка);
			ДополнительныеПараметры.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПеретаскиваниеФайловОтветПолучен",
				ПрисоединенныеФайлыБПКлиент,
				ДополнительныеПараметры);
			ШаблонВопроса = НСтр("ru='Присоединить файлы к документу %1?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, Строка);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетФактуруРеализация(Команда)
	
	КлючеваяОперация = "СозданиеФормыСчетФактураВыданныйНаРеализацию";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию"));
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаДокументаНаРеализацию",СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетФактураАванс(Команда)

	КлючеваяОперация = "СозданиеФормыСчетФактураВыданныйНаАванс";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАванс"));
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаДокументаНаАванс",СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетФактуруАвансКомитента(Команда)
	
	КлючеваяОперация = "СозданиеФормыСчетФактураВыданныйНаАванс";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитента"));
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаДокументаНаАванс",СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетФактуруНаАвансКомитентаНаЗакупку(Команда)
	
	КлючеваяОперация = "СозданиеФормыСчетФактураВыданныйНаАванс";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку"));
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаДокументаНаАванс",СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетФактураСуммоваяРазница(Команда)
	
	КлючеваяОперация = "СозданиеФормыСчетФактураВыданныйНаСуммовуюРазницу";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);

	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу"));
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаДокументаНаСуммовуюРазницу",СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетФактураНалоговыйАгент(Команда)
	
	КлючеваяОперация = "СозданиеФормыСчетФактураВыданныйНалоговыйАгент";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент"));
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаДокументаНалоговыйАгент",СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетФактураКорректировочный(Команда)
	
	// Для корректировочного счета-фактуры показывается сначала форма подбора исходного документа,
	// поэтому счетчик для него здесь не включаем.
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.Корректировочный"));
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаПодбора",СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировочнуюСправку(Команда)
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.КорректировочнаяСправка"));
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаПодбора",СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетФактураИсправление(Команда)
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.ПустаяСсылка"));
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаПодбора",СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСводнуюСправку(Команда)
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.СводнаяСправка"));
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаДокументаСводнаяСправка",СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналСчетовФактур(Команда)
	
	СтруктураПараметров = Новый Структура;
	ОтборПоОрганизации  = ВернутьПолеПользовательскогоОтбораКомпоновки(ЭтаФорма,, "Организация");
	
	Если ОтборПоОрганизации <> Неопределено И ОтборПоОрганизации.Использование Тогда
		СтруктураПараметров.Вставить("Организация", ОтборПоОрганизации.ПравоеЗначение);
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ЖурналУчетаСчетовФактур.Форма", СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКнигуПродаж(Команда)
	
	СтруктураПараметров = Новый Структура;
	ОтборПоОрганизации  = ВернутьПолеПользовательскогоОтбораКомпоновки(ЭтаФорма,, "Организация");
	
	Если ОтборПоОрганизации <> Неопределено И ОтборПоОрганизации.Использование Тогда
		СтруктураПараметров.Вставить("Организация", ОтборПоОрганизации.ПравоеЗначение);
	КонецЕсли;
	
	ОткрытьФорму("Отчет.КнигаПродаж.Форма", СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормы(ВидСчетаФактуры)
	
	СтруктураПараметров = Новый Структура;
	
	ОтборПоОрганизации = ВернутьПолеПользовательскогоОтбораКомпоновки(ЭтаФорма,, "Организация");
	ОтборПоКонтрагенту = ВернутьПолеПользовательскогоОтбораКомпоновки(ЭтаФорма,, "Контрагент");
	
	ЗначенияЗаполнения = Новый Структура();
	
	Если ОтборПоОрганизации <> Неопределено И ОтборПоОрганизации.Использование И ЗначениеЗаполнено(ОтборПоОрганизации.ПравоеЗначение) Тогда
		ЗначенияЗаполнения.Вставить("Организация", ОтборПоОрганизации.ПравоеЗначение);
	КонецЕсли;
	
	Если ОтборПоКонтрагенту <> Неопределено И ОтборПоКонтрагенту.Использование И ЗначениеЗаполнено(ОтборПоКонтрагенту.ПравоеЗначение) Тогда
		ЗначенияЗаполнения.Вставить("Контрагент", ОтборПоКонтрагенту.ПравоеЗначение);
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("ВидСчетаФактуры", ВидСчетаФактуры);
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);  
	
	Если ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.Корректировочный")
		ИЛИ ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.ПустаяСсылка") 
		ИЛИ ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.КорректировочнаяСправка") Тогда
		
		ЗначениеОтбора = Новый Структура();
		ЗначениеОтбора.Вставить("Исправление", Ложь);
		
		Если ОтборПоОрганизации <> Неопределено Тогда
			ЗначениеОтбора.Вставить("Организация", ОтборПоОрганизации.ПравоеЗначение);
			ЗначениеОтбора.Вставить("ОрганизацияИспользование", ОтборПоОрганизации.Использование);
		КонецЕсли;
		
		Если ОтборПоКонтрагенту <> Неопределено Тогда
			ЗначениеОтбора.Вставить("Контрагент", ОтборПоКонтрагенту.ПравоеЗначение);
			ЗначениеОтбора.Вставить("КонтрагентИспользование", ОтборПоКонтрагенту.Использование);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Отбор", ЗначениеОтбора); 
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВернутьПолеПользовательскогоОтбораКомпоновки(Форма, Настройки = Неопределено, Знач ИмяПоля)
	
	Если Настройки = Неопределено Тогда
		Настройки = Форма.Список.КомпоновщикНастроек.ПользовательскиеНастройки;
	КонецЕсли;
	
	ПолеОтбораКомпоновки = Неопределено;
	ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для каждого ЭлементОтбора Из Форма.Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение Тогда
			ПолеОтбораКомпоновки = Настройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолеОтбораКомпоновки;
	
КонецФункции

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если Команда.Имя = "ПодменюПечатьОбычное_Реестр" Тогда
		НастройкиДинамическогоСписка();
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьКнопокСоздатьСчетФактуру()
	
	СвязьКнопокСВидомСФ = СвязьКнопокСВидомСФ();
	КнопкиСВключеннойВидимостью = Новый Массив;
	
	Для Каждого КлючЗначение Из СвязьКнопокСВидомСФ Цикл
		Если Элементы.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы[КлючЗначение.Ключ].Видимость = УчетНДС.ПравоРегистрироватьВидСчетаФактуры(КлючЗначение.Значение);
		
		Если Элементы[КлючЗначение.Ключ].Видимость Тогда
			КнопкиСВключеннойВидимостью.Добавить(Элементы[КлючЗначение.Ключ]);
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоВидимыхКнопок = КнопкиСВключеннойВидимостью.Количество();
	
	Элементы.ПодменюСоздать.Видимость = КоличествоВидимыхКнопок > 1;
	Элементы.ФормаСоздатьСчетФактуру.Видимость = КоличествоВидимыхКнопок = 1;
	
	Если Элементы.ФормаСоздатьСчетФактуру.Видимость Тогда
		Элементы.ФормаСоздатьСчетФактуру.ИмяКоманды = КнопкиСВключеннойВидимостью[0].ИмяКоманды;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СвязьКнопокСВидомСФ()
	
	ВидыСФ = Перечисления.ВидСчетаФактурыВыставленного;
	
	Результат = Новый Структура;
	Результат.Вставить("ФормаСоздатьСчетФактуруНаРеализацию"             , ВидыСФ.НаРеализацию);
	Результат.Вставить("ФормаСоздатьСчетФактуруНаАванс"                  , ВидыСФ.НаАванс);
	Результат.Вставить("ФормаСоздатьСчетФактуруАвансКомитента"           , ВидыСФ.НаАвансКомитента);
	Результат.Вставить("ФормаСоздатьСчетФактуруНаАвансКомитентаНаЗакупку", ВидыСФ.НаАвансКомитентаНаЗакупку);
	Результат.Вставить("ФормаСоздатьСчетФактураНалоговогоАгента"         , ВидыСФ.НалоговыйАгент);
	Результат.Вставить("ФормаСоздатьСчетФактураНаСуммовуюРазницу"        , ВидыСФ.НаСуммовуюРазницу);
	Результат.Вставить("ФормаСоздатьСчетФактураКорректировочный"         , ВидыСФ.Корректировочный);
	Результат.Вставить("ФормаСоздатьСчетФактураИсправление"              , ВидыСФ.Корректировочный);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастройкиДинамическогоСписка()
	
	Отчеты.РеестрДокументов.НастройкиДинамическогоСписка(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти