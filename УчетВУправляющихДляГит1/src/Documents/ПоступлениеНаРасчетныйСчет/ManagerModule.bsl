#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		СтандартнаяОбработка = Ложь;
		Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
			ВыбраннаяФорма = "ФормаДокументаОднострочнаяИнтеграцияСБанком";
		ИначеЕсли Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить() Тогда
			ВыбраннаяФорма = "ФормаДокумента";
		Иначе
			ВыбраннаяФорма = "ФормаДокументаОднострочная";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 17, 0);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Для следующих операций правила заполнения пока не используются (кроме режима Интеграции с банком):
	// ПрочееПоступление
	
	// учет денег
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетБанк", "БезналичныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетОрганизации", "СчетОрганизации");
	
	// учет расчетов
	// - расчеты с покупателем (разрешено погашать задолженность)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Сделка",                       "Сделка");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаПокупателя");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПогашатьЗадолженность");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "РасчетыПоПеням");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя", Ложь);
	
	// - расчеты по пеням
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыПоПретензиям");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Сделка",                       "Сделка");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаПокупателя");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПогашатьЗадолженность");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "РасчетыПоПеням");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя", Ложь);
	
	// - аванс покупателя
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя", Ложь);
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаПокупателя");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПогашатьЗадолженность");
	
	// - расчеты с поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратОтПоставщика");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику", Ложь);
	
	// - прочие расчеты с контрагентами
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПрочиеРасчетыСКонтрагентами");
	
	// - оплата от факторинговой компании
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыПоФакторингу");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаОтФакторинговойКомпании");
	
	// - получение займа
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "ПолученныеЗаймы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПолучениеЗайма");
	
	// - получение кредита
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "ПолученныеКредиты");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПолучениеКредита");
	
	// - возврат займа контрагентом
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "ПредоставленныеЗаймы");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратЗаймаКонтрагентом");
	
	// - перевод с другого счета организации
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "БезналичныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПереводСДругогоСчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ИспользоватьПереводыВПути");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "ПереводыВПути");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПереводСДругогоСчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ИспользоватьПереводыВПути");
	
	// - взнос наличными
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "НаличныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВзносНаличными");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ИспользоватьПереводыВПути");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "ПереводыВПути");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВзносНаличными");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ИспользоватьПереводыВПути");
	
	// - другие операции
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "ПриобретениеИностраннойВалюты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПриобретениеИностраннойВалюты");
	// Так как счет не зависит от данных табличной части, то в новых сроках будем заполнять счет из шапки
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "ПриобретениеИностраннойВалюты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПриобретениеИностраннойВалюты");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РеализацияИностраннойВалюты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПоступленияОтПродажиИностраннойВалюты");
	// Так как счет не зависит от данных табличной части, то в новых сроках будем заполнять счет из шапки
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РеализацияИностраннойВалюты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПоступленияОтПродажиИностраннойВалюты");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "ПродажиПоПлатежнымКартам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам");
	// Счет шапки используется для учета затрат (см. ниже). Поэтому не можем его использовать для заполнения новых строк.
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "Инкассация");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Инкассация");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтатьяДвиженияДенежныхСредств", "СтатьяДвиженияДенежныхСредств");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКт1",     "СубконтоСтатьяДвиженияДенежныхСредств1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКт2",     "СубконтоСтатьяДвиженияДенежныхСредств2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКт3",     "СубконтоСтатьяДвиженияДенежныхСредств3");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеКт", "ОбособленноеПодразделение");
	
	// Так как счет не зависит от данных табличной части, то в новых сроках будем заполнять счет из шапки
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "Инкассация");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Инкассация");
	
	// учет затрат (расходов по услугам банков)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасходыУслугиБанка");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ЗаполненаСуммаУслуг");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКт1",    "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКт2",    "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКт3",    "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеКт", "ПодразделениеЗатрат");
	
	// прочие доходы
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "ПрочиеДоходы");
		// Вызов с параметром "СубконтоЗатрат1" используется в виде исключения.
		СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКт1", "СубконтоЗатрат1");
	КонецЕсли;
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ВалютаДокумента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Подразделение", "ПодразделениеОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ОтражатьРазницуВКурсеВСоставеОперационныхРасходов");
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, ИмяВидаОперации, "ВидОперации");
	КонецЦикла;
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЗаполненаСуммаУслуг", "СуммаУслуг");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		Если ДанныеЗаполнения.Свойство(ИмяВидаОперации) Тогда
			ДанныеЗаполнения[ИмяВидаОперации] = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств[ИмяВидаОперации]);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.Свойство("ЗаполненаСуммаУслуг") Тогда
		ДанныеЗаполнения.ЗаполненаСуммаУслуг = (ДанныеЗаполнения.СуммаУслуг <> 0);
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыОперацийСчетаУчета() Экспорт
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить("ОплатаПокупателя");
	ВидыОпераций.Добавить("ПолучениеЗайма");
	ВидыОпераций.Добавить("ПолучениеКредита");
	ВидыОпераций.Добавить("ВозвратЗаймаКонтрагентом");
	ВидыОпераций.Добавить("ВозвратОтПоставщика");
	ВидыОпераций.Добавить("ПрочиеРасчетыСКонтрагентами");
	ВидыОпераций.Добавить("ОплатаОтФакторинговойКомпании");
	ВидыОпераций.Добавить("Инкассация");
	ВидыОпераций.Добавить("ПереводСДругогоСчета");
	ВидыОпераций.Добавить("ВзносНаличными");
	ВидыОпераций.Добавить("ПриобретениеИностраннойВалюты");
	ВидыОпераций.Добавить("ПоступленияОтПродажиИностраннойВалюты");
	ВидыОпераций.Добавить("ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам");
	ВидыОпераций.Добавить("ПрочееПоступление");
	
	Возврат Новый ФиксированныйМассив(ВидыОпераций);
	
КонецФункции

#КонецОбласти

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеНаРасчетныйСчет.УслугаНПД КАК Номенклатура,
	|	ПоступлениеНаРасчетныйСчет.СуммаДокумента КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены КАК СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.Ссылка = &Ссылка";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ПроверкаЗаполнения

Процедура ОбработкаПроверкиЗаполненияРасшифровкаПлатежа(Объект, ФормаРасшифровкаПлатежа = Неопределено, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СообщенияПроверки = ПодготовитьСообщенияПроверкиЗаполненияРасшифровкаПлатежа(
		Объект,
		ФормаРасшифровкаПлатежа,
		Отказ,
		ПроверяемыеРеквизиты);
		
	// Вывод сообщений проверки.
	СообщитьРезультатПроверки(
		Объект,
		Отказ,
		СообщенияПроверки,
		Метаданные.Документы.ПоступлениеНаРасчетныйСчет.ТабличныеЧасти.РасшифровкаПлатежа,
		ФормаРасшифровкаПлатежа);
	
КонецПроцедуры

Функция ПодготовитьСообщенияПроверкиЗаполненияРасшифровкаПлатежа(Объект, ФормаРасшифровкаПлатежа = Неопределено, Отказ, ПроверяемыеРеквизиты, ПроверятьСчетаУчета = Истина) Экспорт

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ВидОперации 		= Объект.ВидОперации;
	РасшифровкаПлатежа 	= ДанныеРасшифровкиПлатежа(Объект, ФормаРасшифровкаПлатежа);
	ЭтоПроверкаВТаблице = ДанныеОтображаютсяВТаблицеНаФорме(Объект, ФормаРасшифровкаПлатежа);
	
	// Отключаем стандартную проверку реквизитов ТЧ РасшифровкаПлатежа,
	// выполняем ее в зависимости от того, из какой формы она вызвана.
	Для каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		Если СтрНайти(Реквизит, "РасшифровкаПлатежа") = 1 Тогда

			Если НЕ ПроверятьСчетаУчета Тогда
				Если СтрНайти(Реквизит, "СчетУчетаРасчетовСКонтрагентом") > 0
					ИЛИ СтрНайти(Реквизит, "СчетУчетаРасчетовПоАвансам") > 0 Тогда
					// Счета проверять будем не в этой процедуре, поэтому их не исключаем из проверяемых реквизитов.
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			МассивНепроверяемыхРеквизитов.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	
	// Построчная проверка заполнения отдельных реквизитов ТЧ РасшифровкаПлатежа
	ШаблонТекстаСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
		"Колонка", "Заполнение", "%1", "%2", НСтр("ru = 'Расшифровка платежа'"));

	СообщенияПроверки = ПроверкаЗаполненияДокументов.НовыйРезультатПроверки();
	
	Если ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		
		ИспользоватьВалютныйУчет = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
		ПрименяетсяУСН           = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
		ПрименяетсяУСНПатент     = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
		ЕстьАвансыУСН            = УчетУСН.ЕстьАвансыПокупателей(Объект.ВидОперации);
		ПредыдущийПатент         = Неопределено;
		ВестиУчетПоДоговорам     = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам")
			И НЕ Объект.БезЗакрывающихДокументов;
		
		Для каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
			
			// ДоговорКонтрагента
			Если ВестиУчетПоДоговорам И НЕ ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента) Тогда
				Сообщение = СообщенияПроверки.Добавить();
				Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.ДоговорКонтрагента";
				Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
			КонецЕсли;
			
			// СпособПогашенияЗадолженности И Сделка
			Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
				ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика)
				И НЕ Объект.БезЗакрывающихДокументов Тогда
				
				Если ВестиУчетПоДоговорам И НЕ ЗначениеЗаполнено(СтрокаПлатежа.СпособПогашенияЗадолженности) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.СпособПогашенияЗадолженности";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
				
				// Сделка
				Если СтрокаПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу
					И НЕ ЗначениеЗаполнено(СтрокаПлатежа.Сделка) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.Сделка";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
				
			КонецЕсли;
			
			// СуммаПлатежа
			Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.СуммаПлатежа) Тогда
				// Проверку суммы платежа не в таблице не осуществляем,
				// т.к. в этом случае она совпадает с реквизитом шапки СуммаДокумента,
				// и будет проверяться он.
				// Допускается пустая сумма платежа при отражении удержанной банком-эквайером комиссии.
				ЭтоКомиссияЭквайера = ЗначениеЗаполнено(СтрокаПлатежа.СуммаУслуг)
					И ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
				Если ЭтоПроверкаВТаблице И Не ЭтоКомиссияЭквайера Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.СуммаПлатежа";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
			Если ИспользоватьВалютныйУчет
				И (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
					ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
					ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
					ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты) 
				И НЕ Объект.БезЗакрывающихДокументов Тогда
				
				// КурсВзаиморасчетов
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.КурсВзаиморасчетов) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.КурсВзаиморасчетов";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
				
				// СуммаВзаиморасчетов
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.СуммаВзаиморасчетов) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.СуммаВзаиморасчетов";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
				
			КонецЕсли;
			
			// Для отдельных видов операций некоторые счета проверяются вне зависимости от настроек пользователя
			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентом) Тогда
					Сообщение = СообщенияПроверки.Добавить();
					Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом";
					Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьАвансыУСН И (ПрименяетсяУСН ИЛИ ПрименяетсяУСНПатент) Тогда
				// допустимо отражение аванса только по одному патенту
				Если ПрименяетсяУСНПатент И ТипЗнч(СтрокаПлатежа.ПорядокОтраженияАванса) = Тип("СправочникСсылка.Патенты") Тогда
					Если НЕ ЗначениеЗаполнено(ПредыдущийПатент) Тогда
						ПредыдущийПатент = СтрокаПлатежа.ПорядокОтраженияАванса;
					Иначе
						Если СтрокаПлатежа.ПорядокОтраженияАванса <> ПредыдущийПатент Тогда
							Сообщение = СообщенияПроверки.Добавить();
							Сообщение.ПолноеИмяРеквизита = "РасшифровкаПлатежа.ПолеОтражениеАванса";
							Сообщение.НомерСтроки        = СтрокаПлатежа.НомерСтроки;
							Сообщение.Ошибка			 = НСтр("ru = 'Отражение аванса в НУ допустимо не более чем по одному патенту'");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Счета учета в строках проверяем с помощью общего механизма для всех счетов.
		Если ПроверятьСчетаУчета 
			И НЕ Объект.БезЗакрывающихДокументов Тогда
			ПроверяемыеРеквизитыРасшифровкаПлатежа = Новый Массив;
			Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
				ПроверяемыеРеквизитыРасшифровкаПлатежа.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
			КонецЕсли;
			
			ПроверяемыеРеквизитыРасшифровкаПлатежа.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
			
			Если ФормаРасшифровкаПлатежа <> Неопределено Тогда
				// Общие механизмы проверки счетов учета обращаются к табличной части внутри самого объекта.
				Объект.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
			КонецЕсли;
			
			СчетаУчетаВДокументах.ПроверитьЗаполнение(Объект, Отказ, ПроверяемыеРеквизитыРасшифровкаПлатежа,, СообщенияПроверки, Ложь);
			
			Если ФормаРасшифровкаПлатежа <> Неопределено Тогда
				// Более табличная часть внутри Объекта не требуется.
				Объект.Удалить("РасшифровкаПлатежа");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Возврат СообщенияПроверки;

КонецФункции

Процедура СообщитьРезультатПроверки(Объект, Отказ, СообщенияПроверки, МетаданныеТабличнойЧасти, ФормаСТаблицей = Неопределено) Экспорт
	
	Если СообщенияПроверки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Для сохранения порядка сортировки пронумеруем строки.
	СообщенияПроверки.Колонки.Добавить("НомерППДляСортировки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	НомерПП = 1;
	Для каждого СтрокаСообщения Из СообщенияПроверки Цикл
		СтрокаСообщения.НомерППДляСортировки = НомерПП;
		НомерПП = НомерПП + 1;
	КонецЦикла;
	
	СообщенияПроверки.Сортировать("НомерСтроки, НомерППДляСортировки");

	КэшСинонимовРеквизитов = Новый Соответствие;
	
	ИспользоватьТабличныеФормыБанковскихДокументов = Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить();
	ЭтоПроверкаВТаблице = ДанныеОтображаютсяВТаблицеНаФорме(Объект, ФормаСТаблицей);
	
	Для каждого СтрокаСообщения Из СообщенияПроверки Цикл
		ИмяРеквизитаДетально = ОбщегоНазначенияБПКлиентСервер.РазложитьПолноеИмяРеквизита(СтрокаСообщения.ПолноеИмяРеквизита);
		СинонимРеквизита     = КэшСинонимовРеквизитов[ИмяРеквизитаДетально.Реквизит];
		Если СинонимРеквизита = Неопределено Тогда
			Если ИмяРеквизитаДетально.Реквизит = "ПолеОтражениеАванса" Тогда
				СинонимРеквизита = НСтр("ru = 'Поле отражения аванса'");
				КэшСинонимовРеквизитов.Вставить(ИмяРеквизитаДетально.Реквизит, СинонимРеквизита);
			Иначе
				СинонимРеквизита = МетаданныеТабличнойЧасти.Реквизиты.Найти(ИмяРеквизитаДетально.Реквизит).Синоним;
				КэшСинонимовРеквизитов.Вставить(ИмяРеквизитаДетально.Реквизит, СинонимРеквизита);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоПроверкаВТаблице Тогда
			Если ПустаяСтрока(СтрокаСообщения.Ошибка) Тогда
				ШаблонТекстаСообщенияКолонка = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка",
					?(ЗначениеЗаполнено(СтрокаСообщения.Ошибка), "Корректность", "Заполнение"),
					"%1",
					"%2",
					МетаданныеТабличнойЧасти.Синоним,
					СтрокаСообщения.Ошибка);
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаСообщенияКолонка, СинонимРеквизита, СтрокаСообщения.НомерСтроки);
			Иначе
				ТекстСообщения = СокрЛП(СтрокаСообщения.Ошибка);
			КонецЕсли;
			
			Если ИспользоватьТабличныеФормыБанковскихДокументов Тогда
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ИмяРеквизитаДетально.ТабличнаяЧасть,
					СтрокаСообщения.НомерСтроки,
					ИмяРеквизитаДетально.Реквизит);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект", Отказ);
			ИначеЕсли ФормаСТаблицей <> Неопределено Тогда
				// При вызове из доп. формы не указываем КлючДанных,
				// иначе при двойном щелчке по сообщению будет переход в основную форму документа.
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ИмяРеквизитаДетально.ТабличнаяЧасть,
					СтрокаСообщения.НомерСтроки,
					ИмяРеквизитаДетально.Реквизит);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "", Отказ);
			Иначе
				// При проверке в таблице в момент вызова из основной формы документа
				// сообщение показываем возле гиперссылки.
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "НадписьСуммаДокумента",, Отказ);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(СтрокаСообщения.Ошибка) Тогда
				ШаблонТекстаСообщенияПоле = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле",
					?(ЗначениеЗаполнено(СтрокаСообщения.Ошибка), "Корректность", "Заполнение"),
					"%1",
					СтрокаСообщения.Ошибка);
				
				// Сообщения показываем возле полей ввода на основной форме,
				// связанных с первой строкой табличной части.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаСообщенияПоле, СинонимРеквизита);
			Иначе
				ТекстСообщения = СокрЛП(СтрокаСообщения.Ошибка);
			КонецЕсли;
			
			Поле = СтрЗаменить(СтрокаСообщения.ПолноеИмяРеквизита, ".", "");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле,, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КорректировкаДвижений

Функция ИнформацияОПроведенииДокумента(ПоступлениеНаРасчетныйСчет) Экспорт
	
	Если ТипЗнч(ПоступлениеНаРасчетныйСчет) <> Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		Возврат "";
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПоступлениеНаРасчетныйСчет, "ВидОперации, Организация, Дата");
	
	Использовать57Счет = УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(РеквизитыДокумента.Организация, РеквизитыДокумента.Дата);
	
	Если РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными
		И НЕ Использовать57Счет Тогда
		Возврат НСтр("ru='Документ не формирует движений.
					|Проводки по поступлению средств на расчетный счет отражаются документом ""Выдача наличных"" с видом операции ""Взнос наличными в банк"".'");
	ИначеЕсли РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета
		И НЕ Использовать57Счет Тогда
		Возврат НСтр("ru='Документ не формирует движений.
					|Проводки по поступлению средств на расчетный счет отражаются документом ""Списание с расчетного счета"" с видом операции ""Перевод на другой счет организации"".'");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаПараметровПроведенияДокумента

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт
	
	ВалютаРеглУчета     = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);
	
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	ПараметрыПроведения.Вставить("ДокументСсылка",  ДокументСсылка);
	ПараметрыПроведения.Вставить("ЭтоОтложенноеПроведение",  ЭтоОтложенноеПроведение);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ЭтоОтложенноеПроведение", 			ЭтоОтложенноеПроведение);
	Запрос.УстановитьПараметр("ДоговорДляОтложенногоПроведения", 	ДоговорДляОтложенногоПроведения);
	
	ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ);
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	Если Отказ ИЛИ НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Дата, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Дата);
	
	ПараметрыПроведения.Вставить("ПлательщикНДФЛ", ПлательщикНДФЛ);
	ПараметрыПроведения.Вставить("ОрганизацияПрименяетУСН", УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Дата));

	Запрос.УстановитьПараметр("ДокументВВалюте",                Реквизиты.ВалютаДокумента <> ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента",                Реквизиты.ВалютаДокумента);
	Запрос.УстановитьПараметр("ПлательщикНДФЛ",                 ПлательщикНДФЛ);
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСН",        УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация,                 Реквизиты.Дата));
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСНПатент",  УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация,           Реквизиты.Дата));
	Запрос.УстановитьПараметр("ВестиУчетПоВидамДеятельностиИП", УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("ОсновнаяНоменклатурнаяГруппа",   УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Реквизиты.Организация,   Реквизиты.Дата));
	Запрос.УстановитьПараметр("ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств", УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Реквизиты.Организация, Реквизиты.Дата));
	Если Реквизиты.БезЗакрывающихДокументов Тогда
		Запрос.УстановитьПараметр("ПрочиеВнереализационныеДоходыРасходы", 
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	КонецЕсли;
	
	Для каждого Колонка Из ПараметрыПроведения.ТаблицаРеквизиты.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаТаблицыДокумента(НомераТаблиц)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПриобретениеВалюты(НомераТаблиц,     ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПродажаВалюты(НомераТаблиц,          ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПрочееПоступление(НомераТаблиц,      ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц,       ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаОплатаСчетов(НомераТаблиц,           ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПокупкаПродажаВалютыУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	Реквизиты.Содержание = ТекстСодержанияПроводокДокумента(Реквизиты);
	Если ПараметрыПроведения.РасшифровкаПлатежа <> Неопределено Тогда
		ПараметрыПроведения.РасшифровкаПлатежа.ЗаполнитьЗначения(Реквизиты.Содержание, "Содержание");
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ПодготовитьТаблицуВзаиморасчетовУслугиИП(РасшифровкаПлатежа) Экспорт
	Перем ТаблицаВзаиморасчетов;
	
	ТаблицаВзаиморасчетов	= Новый ТаблицаЗначений;
	ТаблицаВзаиморасчетов.Колонки.Добавить("ДокументРасчетов",      Документы.ТипВсеСсылки());
	ТаблицаВзаиморасчетов.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаРуб",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаВзаиморасчетов;
	
КонецФункции

Функция ПодготовитьТаблицыРасчетовДляУСН(ТаблицаРеквизиты, ТаблицаВзаиморасчетов, Отказ) Экспорт
	
	ПодготовленныеТаблицы = Новый Структура("КУДиРПереквалификация, КУДиРПатент, ТаблицаВзаиморасчетыУСН, ТаблицаВозвратыПоВзаиморасчетамУСН, ТаблицаПрочихРасчетовУСН",
		НовыйСтруктураКУДиР(), НовыйТаблицаКУДиРПатент());
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		ПодготовленныеТаблицы.ТаблицаВзаиморасчетыУСН = ПодготовитьПараметрыТаблицРасчетовДляУСН_Взаиморасчеты(ТаблицаВзаиморасчетов);
		Возврат ПодготовленныеТаблицы;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
		Или Не (Реквизиты.УчитыватьЗадолженностьУСН Или Реквизиты.УчитыватьЗадолженностьУСНПатент)
		Или Реквизиты.БезЗакрывающихДокументов Тогда
		ПодготовленныеТаблицы.ТаблицаВзаиморасчетыУСН = ПодготовитьПараметрыТаблицРасчетовДляУСН_Взаиморасчеты(ТаблицаВзаиморасчетов);
		Возврат ПодготовленныеТаблицы;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыТаблицРасчетовДляУСН(ТаблицаРеквизиты, ТаблицаВзаиморасчетов);
	Реквизиты = Параметры.Реквизиты[0];
	Взаиморасчеты = Параметры.Взаиморасчеты;
	ПодготовленныеТаблицы.ТаблицаВзаиморасчетыУСН = Взаиморасчеты;
	
	ТаблицаВзаиморасчетыУСН       = Взаиморасчеты.СкопироватьКолонки(); // Результирующая таблица распределения по расчетным документам и остаткам УСН.хх
	НераспределенныеВзаиморасчеты = Взаиморасчеты.СкопироватьКолонки(); // Взаиморасчеты, требующие распределения
	
	СтрокиИсключаемыеИзРаспределения = Новый Массив;
	
	Для каждого СтрокаТаблицы Из Взаиморасчеты Цикл
		Если СтрокаТаблицы.ДокументРасчетов = Реквизиты.Регистратор Тогда // аванс
			НоваяСтрока = ТаблицаВзаиморасчетыУСН.Добавить();
			СтрокиИсключаемыеИзРаспределения.Добавить(СтрокаТаблицы);
		Иначе // задолженность, требующая распределения
			НоваяСтрока = НераспределенныеВзаиморасчеты.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	ПодготовленныеТаблицы.ТаблицаВзаиморасчетыУСН = ТаблицаВзаиморасчетыУСН;
	ПодготовленныеТаблицы.ТаблицаВозвратыПоВзаиморасчетамУСН = ПодготовитьТаблицуВозвратыПоВзаиморасчетамУСН(Взаиморасчеты);
	
	Если НераспределенныеВзаиморасчеты.Количество() = 0 Тогда // все поступление - аванс, распределять нечего
		Возврат ПодготовленныеТаблицы;
	КонецЕсли;
	
	УдалитьСтрокиИзТаблицы(Взаиморасчеты, СтрокиИсключаемыеИзРаспределения);
	
	ТаблицаПрочихРасчетовУСН    = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам(); // таблица движений по "Прочим расчетам"
	
	РаспределениеВзаиморасчетов = Взаиморасчеты.СкопироватьКолонки(); // Распределение по расчетным документам из "Прочих расчетов" и остаткам УСН.ХХ
	РаспределениеВзаиморасчетов.Колонки.Добавить("ЕстьИсходныйДокументРасчетов", Новый ОписаниеТипов("Булево"));
	
	НераспределенныеВзаиморасчеты.Свернуть("Контрагент, ДоговорКонтрагента, СчетРасчетов, ДокументРасчетов, ВалютаВзаиморасчетов, Подразделение",
		"ОстатокВзаиморасчетов, СуммаВзаиморасчетов, СуммаВзаиморасчетовЕНВД, СуммаВзаиморасчетовКомитента, СуммаВзаиморасчетовПатент, СуммаВзаиморасчетовТорговыйСбор,
		|СуммаРуб, СуммаБУ_ЕНВД, СуммаБУ_Комитента, СуммаБУ_Патент, СуммаБУ_ТорговыйСбор");
	
	// Получим остатки "Прочих расчетов" для определения расчетных документов
	
	Контрагент = НераспределенныеВзаиморасчеты[0].Контрагент;
	
	// Установка управляемой блокировки РегистрНакопления.ПрочиеРасчеты
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("Контрагент",  Контрагент);
	ЭлементБлокировки.ИсточникДанных = НераспределенныеВзаиморасчеты;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДоговорКонтрагента", "ДоговорКонтрагента");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетУчета", "СчетРасчетов");
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент",  Контрагент);
	Запрос.УстановитьПараметр("ДатаОстатка", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("СчетаРасчетов",
		ОбщегоНазначения.ВыгрузитьКолонку(НераспределенныеВзаиморасчеты, "СчетРасчетов", Истина));
	Запрос.УстановитьПараметр("ДоговораКонтрагента",
		ОбщегоНазначения.ВыгрузитьКолонку(НераспределенныеВзаиморасчеты, "ДоговорКонтрагента", Истина));
		
	ПодразделенияВзаиморасчетов = ОбщегоНазначения.ВыгрузитьКолонку(НераспределенныеВзаиморасчеты, "Подразделение", Истина);
	ПодразделенияВзаиморасчетов.Добавить(Неопределено);
	Запрос.УстановитьПараметр("Подразделения", ПодразделенияВзаиморасчетов);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Текст = ТекстЗапросаОстаткиПрочихРасчетов();
	Результат    = Запрос.ВыполнитьПакет();
	
	ОстаткиПрочихРасчетовРеализация = Результат[2].Выгрузить();
	ОстаткиПрочихРасчетовВозврат    = Результат[3].Выгрузить();
	ТаблицаИсточникДанных           = Результат[7].Выгрузить();
	
	// Получим остатки по счетам УСН.хх для определения расчетов с особым налогообложением
	
	// Дополнительные блокировки по вспомогательным счетам задолженности УСН
	Блокировка = Новый БлокировкаДанных;
	
	УсловияОтбораСубсчетов = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбораСубсчетов.ИспользоватьВПроводках = Истина;
	УсловияОтбораСубсчетов.Забалансовый = Истина;
	УсловияОтбораСубсчетов.Валютный = Ложь;
	
	СчетаРасчетовУСН  = Новый Массив;
	СчетаРасчетовУСН.Добавить(ПланыСчетов.Хозрасчетный.УСНВспомогательныеСчета);
	СчетаРасчетовУСН = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаРасчетовУСН, УсловияОтбораСубсчетов);
	
	Для каждого СчетУСН Из СчетаРасчетовУСН Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Счет",        СчетУСН);
		ЭлементБлокировки.ИсточникДанных = ТаблицаИсточникДанных;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Контрагент");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "ДоговорКонтрагента");
	КонецЦикла;
	
	Блокировка.Заблокировать();
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("СчетаУСН",     СчетаРасчетовУСН);
	
	Запрос.Текст = ТекстЗапросаОстаткиПоСчетамУСН();
	
	Результат = Запрос.ВыполнитьПакет();
	Запрос.МенеджерВременныхТаблиц = Неопределено;
	
	ОстаткиСчетовУСНРеализация = Результат[2].Выгрузить();
	ОстаткиСчетовУСНВозврат    = Результат[3].Выгрузить();
	
	ОстаткиПрочихРасчетовРеализация.Индексы.Добавить("Контрагент, ДоговорКонтрагента, СчетУчета, Подразделение");
	ОстаткиСчетовУСНРеализация.Индексы.Добавить("Контрагент, Договор, РасчетныйДокумент, Подразделение");
	ОстаткиПрочихРасчетовВозврат.Индексы.Добавить("Контрагент, ДоговорКонтрагента, СчетУчета, Подразделение");
	ОстаткиСчетовУСНВозврат.Индексы.Добавить("РасчетныйДокумент, Подразделение");
	
	СчетаУСН = Новый Структура;
	СчетаУСН.Вставить("ЕНВД",
		БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(
			ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД, УсловияОтбораСубсчетов));
	СчетаУСН.Вставить("Комитент",
		БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(
			ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент, УсловияОтбораСубсчетов));
	СчетаУСН.Вставить("Патент",
		БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(
			ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент, УсловияОтбораСубсчетов));
	СчетаУСН.Вставить("ТорговыйСбор",
		БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(
			ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор, УсловияОтбораСубсчетов));
		
	// Подготовим структуры таблиц для обработки возвратов по платежным картам.
	ТаблицыВозвратов = Новый Структура;
	ТаблицыВозвратов.Вставить("ОстаткиПрочихРасчетовВозврат", ОстаткиПрочихРасчетовВозврат);
	ТаблицыВозвратов.Вставить("ОстаткиСчетовУСНВозврат",      ОстаткиСчетовУСНВозврат);
	
	ТаблицыРеализаций = Новый Структура;
	ТаблицыРеализаций.Вставить("ОстаткиПрочихРасчетовРеализация", ОстаткиПрочихРасчетовРеализация);
	ТаблицыРеализаций.Вставить("ОстаткиСчетовУСНРеализация",      ОстаткиСчетовУСНРеализация);
	ТаблицыРеализаций.Вставить("ТаблицаПрочихРасчетовУСН",        ТаблицаПрочихРасчетовУСН);
	
	// Обработаем возвраты по прочим расчетам.
	ЗачестьВозвратыПоПрочимРасчетам(Реквизиты, ТаблицыВозвратов, ТаблицыРеализаций, ПодготовленныеТаблицы, СчетаУСН);
	
	// Вернем обработанные таблицы для дальнейших действий.
	ОстаткиПрочихРасчетовРеализация = ТаблицыРеализаций.ОстаткиПрочихРасчетовРеализация;
	ОстаткиСчетовУСНРеализация      = ТаблицыРеализаций.ОстаткиСчетовУСНРеализация;
	ТаблицаПрочихРасчетовУСН        = ТаблицыРеализаций.ТаблицаПрочихРасчетовУСН;
	
	// Распределяем расчеты с эквайером по расчетным документам и остаткам УСН.хх в разрезе документов.
	ВсегоСуммаВзаиморасчетов   = НераспределенныеВзаиморасчеты.Итог("СуммаВзаиморасчетов");
	ВсегоОстатокВзаиморасчетов = НераспределенныеВзаиморасчеты.Итог("ОстатокВзаиморасчетов");
	
	Для каждого СтрокаТаблицыВзаиморасчеты Из НераспределенныеВзаиморасчеты Цикл
		
		НераспределеннаяСумма = СтрокаТаблицыВзаиморасчеты.СуммаРуб;
		
		КурсВзаиморасчетов = ?(СтрокаТаблицыВзаиморасчеты.СуммаВзаиморасчетов = 0, 0,
			СтрокаТаблицыВзаиморасчеты.СуммаРуб / СтрокаТаблицыВзаиморасчеты.СуммаВзаиморасчетов);
		
		ОтборПрочихРасчетов = Новый Структура;
		ОтборПрочихРасчетов.Вставить("Контрагент",         СтрокаТаблицыВзаиморасчеты.Контрагент);
		ОтборПрочихРасчетов.Вставить("ДоговорКонтрагента", СтрокаТаблицыВзаиморасчеты.ДоговорКонтрагента);
		ОтборПрочихРасчетов.Вставить("СчетУчета",          СтрокаТаблицыВзаиморасчеты.СчетРасчетов);
		ОтборПрочихРасчетов.Вставить("Подразделение",      СтрокаТаблицыВзаиморасчеты.Подразделение);
		
		ЕстьИсходныйДокументРасчетов = Ложь;
		Если СтрокаТаблицыВзаиморасчеты.ДокументРасчетов <> Неопределено Тогда
			ЕстьИсходныйДокументРасчетов = Истина;
			ОтборПрочихРасчетов.Вставить("РасчетныйДокумент", СтрокаТаблицыВзаиморасчеты.ДокументРасчетов);
		КонецЕсли;
		
		НайденныеСтрокиПрочихРасчетов = ОстаткиПрочихРасчетовРеализация.НайтиСтроки(ОтборПрочихРасчетов);
		
		Для каждого СтрокаПрочихРасчетов Из НайденныеСтрокиПрочихРасчетов Цикл
			
			Если СтрокаПрочихРасчетов.СуммаОстаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РаспределеннаяСумма = Мин(НераспределеннаяСумма, СтрокаПрочихРасчетов.СуммаОстаток);
			
			НоваяСтрока = РаспределениеВзаиморасчетов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыВзаиморасчеты);
			
			НоваяСтрока.ДокументРасчетов             = СтрокаПрочихРасчетов.РасчетныйДокумент;
			НоваяСтрока.ЕстьИсходныйДокументРасчетов = ЕстьИсходныйДокументРасчетов;
			
			НоваяСтрока.СуммаРуб            = РаспределеннаяСумма;
			НоваяСтрока.СуммаВзаиморасчетов = ?(КурсВзаиморасчетов = 0, 0, РаспределеннаяСумма / КурсВзаиморасчетов);
			
			КоэффициентПоСуммеВзаиморасчетов = ?(ВсегоСуммаВзаиморасчетов = 0, 0,
				НоваяСтрока.СуммаВзаиморасчетов / ВсегоСуммаВзаиморасчетов);
			
			НоваяСтрока.ОстатокВзаиморасчетов = ВсегоОстатокВзаиморасчетов * КоэффициентПоСуммеВзаиморасчетов;
			
			// Расчеты по необлагаемым доходам могут быть с только с банком-эквайером.
			ОтборОстатковПоСчетамУСН = Новый Структура("Контрагент, Договор, РасчетныйДокумент, Подразделение",
				СтрокаПрочихРасчетов.Контрагент, СтрокаПрочихРасчетов.ДоговорКонтрагента, СтрокаПрочихРасчетов.РасчетныйДокумент, СтрокаПрочихРасчетов.Подразделение);
			ОстаткиСчетовУСНПоДокументу = ОстаткиСчетовУСНРеализация.Скопировать(ОтборОстатковПоСчетамУСН);
			
			Если ОстаткиСчетовУСНПоДокументу.Количество() <> 0 Тогда
				
				ОстаткиСчетовУСНПоДокументу.Сортировать("РасчетныйДокументДата, РасчетныйДокумент, Счет", Новый СравнениеЗначений);
				
				КоэффициентСписанияПрочихРасчетов = ?(СтрокаПрочихРасчетов.СуммаОстаток = 0, 0, РаспределеннаяСумма / СтрокаПрочихРасчетов.СуммаОстаток);
				
				Для каждого ОстатокПоСчетамУСН Из ОстаткиСчетовУСНПоДокументу Цикл
					
					Суффикс = "";
					
					Если СчетаУСН.ЕНВД.Найти(ОстатокПоСчетамУСН.Счет) <> Неопределено Тогда
						Суффикс = "ЕНВД";
					ИначеЕсли СчетаУСН.Комитент.Найти(ОстатокПоСчетамУСН.Счет) <> Неопределено Тогда
						Суффикс = "Комитента";
					ИначеЕсли СчетаУСН.ТорговыйСбор.Найти(ОстатокПоСчетамУСН.Счет) <> Неопределено Тогда
						Суффикс = "ТорговыйСбор";
					ИначеЕсли СчетаУСН.Патент.Найти(ОстатокПоСчетамУСН.Счет) <> Неопределено Тогда
						Суффикс = "Патент";
					Иначе
						Продолжить;
					КонецЕсли;
					
					СуммаВзаиморасчетовПоСчетамУСН = Окр(ОстатокПоСчетамУСН.СуммаВзаиморасчетов * КоэффициентСписанияПрочихРасчетов, 2);
					СуммаРубПоСчетамУСН            = Окр(ОстатокПоСчетамУСН.СуммаРуб * КоэффициентСписанияПрочихРасчетов, 2);
					
					НоваяСтрока["СуммаВзаиморасчетов" + Суффикс] = СуммаВзаиморасчетовПоСчетамУСН;
					НоваяСтрока["СуммаБУ_" + Суффикс]            = СуммаРубПоСчетамУСН;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Не Реквизиты.ПлательщикНДФЛ
				Или ЭтоРозничнаяВыручкаНТТВПродажныхЦенахНаПатенте(Реквизиты, СтрокаПрочихРасчетов) Тогда
				
				// При совмещении у ИП ОСН и ПСН "Прочие расчеты" по оплатам покупателей списываются при подготовке таблиц ИП
				НоваяСтрокаПрочихРасчетов = ТаблицаПрочихРасчетовУСН.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПрочихРасчетов, Реквизиты);
				ЗаполнитьЗначениясвойств(НоваяСтрокаПрочихРасчетов, СтрокаПрочихРасчетов);
				
				НоваяСтрокаПрочихРасчетов.ВидДвижения = ВидДвиженияНакопления.Расход;
				НоваяСтрокаПрочихРасчетов.Сумма       = РаспределеннаяСумма;
				
			КонецЕсли;
			
			НераспределеннаяСумма = НераспределеннаяСумма - РаспределеннаяСумма;
			
			СтрокаПрочихРасчетов.СуммаОстаток = СтрокаПрочихРасчетов.СуммаОстаток - РаспределеннаяСумма;
			
			Если НераспределеннаяСумма <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НераспределеннаяСумма > 0 Тогда // Нет остатков в "Прочих расчетах", учитываем в УСН как есть.
			
			НоваяСтрока = РаспределениеВзаиморасчетов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыВзаиморасчеты);
			
			НоваяСтрока.СуммаРуб            = НераспределеннаяСумма;
			НоваяСтрока.СуммаВзаиморасчетов = ?(КурсВзаиморасчетов = 0, 0, НераспределеннаяСумма / КурсВзаиморасчетов);
			
			КоэффициентВзаиморасчетов = ?(СтрокаТаблицыВзаиморасчеты.СуммаВзаиморасчетов = 0, 0,
				НоваяСтрока.СуммаВзаиморасчетов / СтрокаТаблицыВзаиморасчеты.СуммаВзаиморасчетов);
			
			НоваяСтрока.СуммаВзаиморасчетовЕНВД      = СтрокаТаблицыВзаиморасчеты.СуммаВзаиморасчетовЕНВД      * КоэффициентВзаиморасчетов;
			НоваяСтрока.СуммаВзаиморасчетовКомитента = СтрокаТаблицыВзаиморасчеты.СуммаВзаиморасчетовКомитента * КоэффициентВзаиморасчетов;
			НоваяСтрока.СуммаВзаиморасчетовПатент    = СтрокаТаблицыВзаиморасчеты.СуммаВзаиморасчетовПатент    * КоэффициентВзаиморасчетов;
			НоваяСтрока.СуммаВзаиморасчетовТорговыйСбор = СтрокаТаблицыВзаиморасчеты.СуммаВзаиморасчетовТорговыйСбор * КоэффициентВзаиморасчетов;
			
			КоэффициентРуб = ?(СтрокаТаблицыВзаиморасчеты.СуммаРуб = 0, 0, НераспределеннаяСумма / СтрокаТаблицыВзаиморасчеты.СуммаРуб);
			
			НоваяСтрока.СуммаБУ_ЕНВД      = СтрокаТаблицыВзаиморасчеты.СуммаБУ_ЕНВД      * КоэффициентРуб;
			НоваяСтрока.СуммаБУ_Комитента = СтрокаТаблицыВзаиморасчеты.СуммаБУ_Комитента * КоэффициентРуб;
			НоваяСтрока.СуммаБУ_Патент    = СтрокаТаблицыВзаиморасчеты.СуммаБУ_Патент    * КоэффициентРуб;
			НоваяСтрока.СуммаБУ_ТорговыйСбор = СтрокаТаблицыВзаиморасчеты.СуммаБУ_ТорговыйСбор * КоэффициентРуб;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПодготовленныеТаблицы.ТаблицаПрочихРасчетовУСН = ТаблицаПрочихРасчетовУСН;
	
	// Перемножаем исходную таблицу взаиморасчетов с результатом распределения по документам
	
	Взаиморасчеты.Индексы.Добавить("Контрагент, ДоговорКонтрагента, СчетРасчетов, Подразделение");
	
	Для каждого РезультатРаспределения Из РаспределениеВзаиморасчетов Цикл
	
		Отбор = Новый Структура("Контрагент, ДоговорКонтрагента, СчетРасчетов, Подразделение"
			+ ?(РезультатРаспределения.ЕстьИсходныйДокументРасчетов, ", ДокументРасчетов", ""));
		ЗаполнитьЗначенияСвойств(Отбор, РезультатРаспределения);
		
		ВзаиморасчетыДляРаспределения = Взаиморасчеты.Скопировать(Отбор);
		
		КоэффициентыВзаиморасчеты = ВзаиморасчетыДляРаспределения.ВыгрузитьКолонку("СуммаВзаиморасчетов");
		КоэффициентыРуб           = ВзаиморасчетыДляРаспределения.ВыгрузитьКолонку("СуммаРуб");
		
		СуммыВзаиморасчетов = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			РезультатРаспределения.СуммаВзаиморасчетов, КоэффициентыВзаиморасчеты);
		СуммыВзаиморасчетовЕНВД = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			РезультатРаспределения.СуммаВзаиморасчетовЕНВД, КоэффициентыВзаиморасчеты);
		СуммыВзаиморасчетовКомитента = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			РезультатРаспределения.СуммаВзаиморасчетовКомитента, КоэффициентыВзаиморасчеты);
		СуммыВзаиморасчетовПатент = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			РезультатРаспределения.СуммаВзаиморасчетовПатент, КоэффициентыВзаиморасчеты);
		СуммыВзаиморасчетовТорговыйСбор = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			РезультатРаспределения.СуммаВзаиморасчетовТорговыйСбор, КоэффициентыВзаиморасчеты);
			
		СуммыОстатокВзаиморасчетов = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			РезультатРаспределения.ОстатокВзаиморасчетов, КоэффициентыВзаиморасчеты);
			
		СуммыРуб = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			РезультатРаспределения.СуммаРуб, КоэффициентыРуб);
		СуммыБУ_ЕНВД = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			РезультатРаспределения.СуммаБУ_ЕНВД, КоэффициентыРуб);
		СуммыБУ_Комитента = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			РезультатРаспределения.СуммаБУ_Комитента, КоэффициентыРуб);
		СуммыБУ_Патент = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			РезультатРаспределения.СуммаБУ_Патент, КоэффициентыРуб);
		СуммыБУ_ТорговыйСбор = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			РезультатРаспределения.СуммаБУ_ТорговыйСбор, КоэффициентыРуб);
		
		Индекс = 0;
		Для каждого СтрокаДляРаспределения Из ВзаиморасчетыДляРаспределения Цикл
			
			НоваяСтрока = ТаблицаВзаиморасчетыУСН.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляРаспределения);
			
			НоваяСтрока.ДокументРасчетов = РезультатРаспределения.ДокументРасчетов;
			
			НоваяСтрока.СуммаВзаиморасчетов             = ?(ЗначениеЗаполнено(СуммыВзаиморасчетов), СуммыВзаиморасчетов[Индекс], 0);
			НоваяСтрока.СуммаВзаиморасчетовЕНВД         = ?(ЗначениеЗаполнено(СуммыВзаиморасчетовЕНВД), СуммыВзаиморасчетовЕНВД[Индекс], 0);
			НоваяСтрока.СуммаВзаиморасчетовКомитента    = ?(ЗначениеЗаполнено(СуммыВзаиморасчетовКомитента), СуммыВзаиморасчетовКомитента[Индекс], 0);
			НоваяСтрока.СуммаВзаиморасчетовПатент       = ?(ЗначениеЗаполнено(СуммыВзаиморасчетовПатент), СуммыВзаиморасчетовПатент[Индекс], 0);
			НоваяСтрока.СуммаВзаиморасчетовТорговыйСбор = ?(ЗначениеЗаполнено(СуммыВзаиморасчетовТорговыйСбор), СуммыВзаиморасчетовТорговыйСбор[Индекс], 0);
			НоваяСтрока.ОстатокВзаиморасчетов           = ?(ЗначениеЗаполнено(СуммыОстатокВзаиморасчетов), СуммыОстатокВзаиморасчетов[Индекс], 0);
			
			НоваяСтрока.СуммаРуб             = ?(ЗначениеЗаполнено(СуммыРуб), СуммыРуб[Индекс], 0);
			НоваяСтрока.СуммаБУ_ЕНВД         = ?(ЗначениеЗаполнено(СуммыБУ_ЕНВД), СуммыБУ_ЕНВД[Индекс], 0);
			НоваяСтрока.СуммаБУ_Комитента    = ?(ЗначениеЗаполнено(СуммыБУ_Комитента), СуммыБУ_Комитента[Индекс], 0);
			НоваяСтрока.СуммаБУ_Патент       = ?(ЗначениеЗаполнено(СуммыБУ_Патент), СуммыБУ_Патент[Индекс], 0);
			НоваяСтрока.СуммаБУ_ТорговыйСбор = ?(ЗначениеЗаполнено(СуммыБУ_ТорговыйСбор), СуммыБУ_ТорговыйСбор[Индекс], 0);
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПодготовленныеТаблицы;
	
КонецФункции

#КонецОбласти

// Вызывается документом СчетФактураВыданный на аванс при вводе на основании
//
Функция ТекстЗапросаСчетФактураВыданныйНаАвансРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДокумента.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс КАК Номенклатура,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ТаблицаДокумента.СчетНаОплату КАК СчетНаОплату,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.СуммаПлатежа) КАК Сумма,
	|	ТаблицаДокумента.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	ЕСТЬNULL(БанковскиеСчета.ГосударственныйКонтракт.Код, """") КАК ИдентификаторГосКонтракта
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ТаблицаДокумента.Ссылка.СчетОрганизации = БанковскиеСчета.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам,
	|	ТаблицаДокумента.СчетНаОплату,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СпособПогашенияЗадолженности,
	|	ТаблицаДокумента.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс,
	|	ЕСТЬNULL(БанковскиеСчета.ГосударственныйКонтракт.Код, """")";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// В указанном списке операций Расшифровка платежа используется явно       (отображается на форме)
// в остальных Видах операций добавляется 1 "пустая" строка в данную ТЧ (не отображается на форме)
Функция ПолучитьСписокВидовОперацийСРасшифровкойПлатежа() Экспорт
	
	СписокОпераций = Новый СписокЗначений();
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
	
	Возврат(СписокОпераций);
	
КонецФункции

Функция ЕстьРасшифровкаПлатежа(Знач ВидОперации, ТолькоРасчеты = Истина) Экспорт
	
	СписокВидовСРасшифровкойПлатежа = ПолучитьСписокВидовОперацийСРасшифровкойПлатежа();
	
	Если Не ТолькоРасчеты Тогда
		СписокВидовСРасшифровкойПлатежа.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация);
	КонецЕсли;
	
	Возврат СписокВидовСРасшифровкойПлатежа.НайтиПоЗначению(ВидОперации) <> Неопределено;
	
КонецФункции

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("ВидОперации");
	МассивРеквизитов.Добавить("Организация");
	
	Возврат МассивРеквизитов;
	
КонецФункции

Функция КонтрагентДолженБытьЗаполнен(ВидОперации) Экспорт
	
	Возврат ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником;
	
	КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Эквайринг

Функция ЭквайрингПроцентУслугБанкаПоВидуОплаты(ВидОплаты, СуммаДокумента) Экспорт
	
	ПроцентБанковскойКомиссии = 0;
	
	Если СуммаДокумента = 0 ИЛИ НЕ ЗначениеЗаполнено(ВидОплаты) Тогда
		Возврат ПроцентБанковскойКомиссии;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОплаты",       ВидОплаты);
	Запрос.УстановитьПараметр("СуммаОперацийОт", СуммаДокумента);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплатОрганизацийКомиссияБанка.Ссылка КАК Ссылка,
	|	ВидыОплатОрганизацийКомиссияБанка.СуммаОперацийОт КАК СуммаОперацийОт,
	|	ВидыОплатОрганизацийКомиссияБанка.ПроцентБанковскойКомиссии КАК ПроцентБанковскойКомиссии
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций.КомиссияБанка КАК ВидыОплатОрганизацийКомиссияБанка
	|ГДЕ
	|	ВидыОплатОрганизацийКомиссияБанка.Ссылка = &ВидОплаты
	|	И НЕ ВидыОплатОрганизацийКомиссияБанка.Ссылка.ПометкаУдаления
	|	И ВидыОплатОрганизацийКомиссияБанка.ПроцентБанковскойКомиссии > 0
	|	И ВидыОплатОрганизацийКомиссияБанка.ПроцентБанковскойКомиссии < 100
	|	И 100 * &СуммаОперацийОт / (100 - ВидыОплатОрганизацийКомиссияБанка.ПроцентБанковскойКомиссии) > ВидыОплатОрганизацийКомиссияБанка.СуммаОперацийОт
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ,
	|	СуммаОперацийОт УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроцентБанковскойКомиссии = Выборка.ПроцентБанковскойКомиссии;
	КонецЕсли;
	
	Возврат ПроцентБанковскойКомиссии;
	
КонецФункции

Функция ЭквайрингСуммаУслугБанкаПоДоговору(Организация, ДоговорКонтрагента, СуммаДокумента) Экспорт
	
	СуммаУслуг = 0;
	
	Если СуммаДокумента = 0 ИЛИ НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат СуммаУслуг;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СуммаОперацийОт",    СуммаДокумента);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплатОрганизацийКомиссияБанка.Ссылка КАК Ссылка,
	|	ВидыОплатОрганизацийКомиссияБанка.СуммаОперацийОт КАК СуммаОперацийОт,
	|	ВидыОплатОрганизацийКомиссияБанка.ПроцентБанковскойКомиссии КАК ПроцентБанковскойКомиссии
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций.КомиссияБанка КАК ВидыОплатОрганизацийКомиссияБанка
	|ГДЕ
	|	ВидыОплатОрганизацийКомиссияБанка.Ссылка.Организация = &Организация
	|	И ВидыОплатОрганизацийКомиссияБанка.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И НЕ ВидыОплатОрганизацийКомиссияБанка.Ссылка.ПометкаУдаления
	|	И ВидыОплатОрганизацийКомиссияБанка.ПроцентБанковскойКомиссии > 0
	|	И ВидыОплатОрганизацийКомиссияБанка.ПроцентБанковскойКомиссии < 100
	|	И 100 * &СуммаОперацийОт / (100 - ВидыОплатОрганизацийКомиссияБанка.ПроцентБанковскойКомиссии) > ВидыОплатОрганизацийКомиссияБанка.СуммаОперацийОт
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ,
	|	СуммаОперацийОт УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаУслуг = ЭквайрингСуммаУслугБанка(Выборка.ПроцентБанковскойКомиссии, СуммаДокумента);
	КонецЕсли;
	
	Возврат СуммаУслуг;
	
КонецФункции

Функция ЭквайрингСуммаУслугБанка(ПроцентБанковскойКомиссии, СуммаДокумента) Экспорт
	
	Возврат Окр(ПроцентБанковскойКомиссии * СуммаДокумента / (100 - ПроцентБанковскойКомиссии), 2);
	
КонецФункции

#КонецОбласти

#Область ОтложенноеПроведение

Процедура ОбработкаОтложенногоПроведения(Параметры, Отказ) Экспорт
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведения(
		Параметры.Регистратор,
		Отказ,
		Параметры.ДоговорКонтрагента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВзаиморасчетов = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		Параметры,
		ПараметрыПроведения.РасшифровкаПлатежа,
		ПараметрыПроведения.Реквизиты,
		Отказ);
	
	ТаблицаНДСПоРеализациямНеплательщика = УчетУСН.ПодготовитьТаблицуНДСПоРеализацииНеплательщиком(ТаблицаВзаиморасчетов,
		ПараметрыПроведения.Реквизиты);
	
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов, ТаблицаНДСПродажи",
		ТаблицаВзаиморасчетов, ТаблицаНДСПоРеализациямНеплательщика);
	
	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияПогашениеЗадолженности(
		Параметры,
		ТаблицаВзаиморасчетов,
		ПараметрыПроведения.Реквизиты,
		Отказ);
	
	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияУСН(
		Параметры,
		СтруктураТаблицУСН);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИБ

#Область ВнешнийИнтерфейсОбновленияИБ

Процедура ЗаполнитьРеквизитыНастройкиУСНДляАктуальныхДокументов() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГраницаАктуальногоПериода",
		УчетУСН.ДатаНачалаАктуальногоПериодаДляПереходаНаУпрощеннуюНастройкуКУДиР());
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	ВидыОперацийАвансаУСН = Новый Массив;
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
	Запрос.УстановитьПараметр("ВидыОперацийАванса", ВидыОперацийАвансаУСН);
	
	ВидыОперацийРасчетыУСН = Новый Массив;
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	Запрос.УстановитьПараметр("ВидыОперацийРасчетыУСН", ВидыОперацийРасчетыУСН);
	
	ВидыОперацийПрочиеПоступления = Новый Массив;
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление);
	Запрос.УстановитьПараметр("ВидыОперацийПрочиеПоступления", ВидыОперацийПрочиеПоступления);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	(РегУПО1.ПрименяетсяУСН
	|			ИЛИ РегУПО1.ПрименяетсяУСНПатент)
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	(НастройкиСистемыНалогообложения.ПрименяетсяУСН
	|			ИЛИ НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.ДатаДокумента КАК ДатаДокумента,
	|	ВложенныйЗапрос.ВидОбработкиОбновления
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата КАК ДатаДокумента,
	|		""ЗаполнитьПорядокОтраженияАванса"" КАК ВидОбработкиОбновления
	|	ИЗ
	|		ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|			ПО ВТ_УчетнаяПолитика.Организация = ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Организация
	|				И (ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон)
	|				И (ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач)
	|	ГДЕ
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ПорядокОтраженияАванса В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка))
	|		И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата >= &ГраницаАктуальногоПериода
	|		И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОперацийАванса)
	|		И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.УдалитьПорядокОтраженияАванса <> ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка,
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата,
	|		""ЗаполнитьДоходыУСНПрочиеРасчеты""
	|	ИЗ
	|		ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|			ПО ВТ_УчетнаяПолитика.Организация = ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Организация
	|				И (ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон)
	|				И (ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач)
	|	ГДЕ
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата >= &ГраницаАктуальногоПериода
	|		И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОперацийРасчетыУСН)
	|		И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Графа5_УСН > 0
	|		И НЕ ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.УдалитьРучнаяНастройка_УСН
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка,
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоходыУСН) = 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоступлениеНаРасчетныйСчет.Ссылка,
	|		ПоступлениеНаРасчетныйСчет.Ссылка.Дата,
	|		""ОбработатьРучнуюНастройкуУСНПрочиеРасчеты""
	|	ИЗ
	|		Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО ПоступлениеНаРасчетныйСчет.Организация = ВТ_УчетнаяПолитика.Организация
	|				И ПоступлениеНаРасчетныйСчет.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|				И ПоступлениеНаРасчетныйСчет.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|	ГДЕ
	|		ПоступлениеНаРасчетныйСчет.Дата >= &ГраницаАктуальногоПериода
	|		И ПоступлениеНаРасчетныйСчет.ВидОперации В(&ВидыОперацийРасчетыУСН)
	|		И ПоступлениеНаРасчетныйСчет.УдалитьРучнаяНастройка_УСН
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПоступлениеНаРасчетныйСчет.Ссылка,
	|		ПоступлениеНаРасчетныйСчет.Ссылка.Дата,
	|		""ОбработатьРучнуюНастройкуУСНПрочиеПоступления""
	|	ИЗ
	|		Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО ПоступлениеНаРасчетныйСчет.Организация = ВТ_УчетнаяПолитика.Организация
	|				И ПоступлениеНаРасчетныйСчет.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|				И ПоступлениеНаРасчетныйСчет.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|	ГДЕ
	|		ПоступлениеНаРасчетныйСчет.Дата >= &ГраницаАктуальногоПериода
	|		И ПоступлениеНаРасчетныйСчет.ВидОперации В(&ВидыОперацийПрочиеПоступления)
	|		И ПоступлениеНаРасчетныйСчет.УдалитьРучнаяНастройка_УСН) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаПоДокументу Из РезультатЗапроса Цикл
		
		Попытка
			
			Если СтрокаПоДокументу.ВидОбработкиОбновления = "ЗаполнитьПорядокОтраженияАванса" Тогда
				ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежа(СтрокаПоДокументу);
			ИначеЕсли СтрокаПоДокументу.ВидОбработкиОбновления = "ЗаполнитьДоходыУСНПрочиеРасчеты" Тогда
				ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаПоДокументу);
			ИначеЕсли СтрокаПоДокументу.ВидОбработкиОбновления = "ОбработатьРучнуюНастройкуУСНПрочиеРасчеты" Тогда
				ОбработатьРучнуюНастройкуУСНПрочиеРасчеты(СтрокаПоДокументу);
			ИначеЕсли СтрокаПоДокументу.ВидОбработкиОбновления = "ОбработатьРучнуюНастройкуУСНПрочиеПоступления" Тогда
				ОбработатьРучнуюНастройкуУСНПрочиеПоступления(СтрокаПоДокументу);
			КонецЕсли;
			
		Исключение
			// Если не удалось обработать какой-либо документ, пропускаем и обрабатываем позднее (отложенно).
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать поступление на расчетный счет: %1 по причине:
					|%2'"),
					СтрокаПоДокументу.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПоступлениеНаРасчетныйСчет, СтрокаПоДокументу.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежаОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	ВидыОперацийАвансаУСН = Новый Массив;
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
	Запрос.УстановитьПараметр("ВидыОперацийАванса", ВидыОперацийАвансаУСН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	(РегУПО1.ПрименяетсяУСН
	|			ИЛИ РегУПО1.ПрименяетсяУСНПатент)
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	(НастройкиСистемыНалогообложения.ПрименяетсяУСН
	|			ИЛИ НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Организация = ВТ_УчетнаяПолитика.Организация
	|			И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ПорядокОтраженияАванса В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка))
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОперацийАванса)
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.УдалитьПорядокОтраженияАванса <> ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежа(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать поступление на расчетный счет: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПоступлениеНаРасчетныйСчет, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежаОтложенно
				|не удалось обработать некоторые поступления на расчетный счет (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ПоступлениеНаРасчетныйСчет,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежаОтложенно
					|обработала очередную порцию поступлений на расчетный счет: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежаОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	ВидыОперацийРасчетыУСН = Новый Массив;
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	Запрос.УстановитьПараметр("ВидыОперацийРасчетыУСН", ВидыОперацийРасчетыУСН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Организация = ВТ_УчетнаяПолитика.Организация
	|			И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОперацийРасчетыУСН)
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Графа5_УСН > 0
	|	И НЕ ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.УдалитьРучнаяНастройка_УСН
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоходыУСН) = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать поступление на расчетный счет: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПоступлениеНаРасчетныйСчет, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежаОтложенно
				|не удалось обработать некоторые поступления на расчетный счет (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ПоступлениеНаРасчетныйСчет,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежаОтложенно
					|обработала очередную порцию поступлений на расчетный счет: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРучнуюНастройкуУСНПрочиеРасчетыОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	ВидыОперацийРасчетыУСН = Новый Массив;
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	Запрос.УстановитьПараметр("ВидыОперацийРасчетыУСН", ВидыОперацийРасчетыУСН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчет.Ссылка.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО ПоступлениеНаРасчетныйСчет.Организация = ВТ_УчетнаяПолитика.Организация
	|			И ПоступлениеНаРасчетныйСчет.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И ПоступлениеНаРасчетныйСчет.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.ВидОперации В(&ВидыОперацийРасчетыУСН)
	|	И ПоступлениеНаРасчетныйСчет.УдалитьРучнаяНастройка_УСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ОбработатьРучнуюНастройкуУСНПрочиеРасчеты(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать поступление на расчетный счет: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПоступлениеНаРасчетныйСчет, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ОбработатьРучнуюНастройкуУСНПрочиеРасчетыОтложенно
				|не удалось обработать некоторые поступления на расчетный счет (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ПоступлениеНаРасчетныйСчет,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОбработатьРучнуюНастройкуУСНПрочиеРасчетыОтложенно
					|обработала очередную порцию поступлений на расчетный счет: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРучнуюНастройкуУСНПрочиеПоступленияОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	ВидыОперацийПрочиеПоступления = Новый Массив;
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление);
	Запрос.УстановитьПараметр("ВидыОперацийПрочиеПоступления", ВидыОперацийПрочиеПоступления);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	НастройкиСистемыНалогообложения.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И НастройкиСистемыНалогообложения.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(НастройкиСистемыНалогообложения.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО НастройкиСистемыНалогообложения.Организация = ПериодыУчетнойПолитики.Организация
	|			И НастройкиСистемыНалогообложения.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчет.Ссылка.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО ПоступлениеНаРасчетныйСчет.Организация = ВТ_УчетнаяПолитика.Организация
	|			И ПоступлениеНаРасчетныйСчет.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И ПоступлениеНаРасчетныйСчет.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.ВидОперации В(&ВидыОперацийПрочиеПоступления)
	|	И ПоступлениеНаРасчетныйСчет.УдалитьРучнаяНастройка_УСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ОбработатьРучнуюНастройкуУСНПрочиеПоступления(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать поступление на расчетный счет: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПоступлениеНаРасчетныйСчет, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ОбработатьРучнуюНастройкуУСНПрочиеПоступленияОтложенно
				|не удалось обработать некоторые поступления на расчетный счет (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ПоступлениеНаРасчетныйСчет,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОбработатьРучнуюНастройкуУСНПрочиеПоступленияОтложенно
					|обработала очередную порцию поступлений на расчетный счет: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

//Производится перенос значения реквизита ФизическоеЛицо в реквизит Контрагент
//если сведений о физическом лице нет - оно создается на основании контрагента
//
Процедура ЗаменитьКонтрагентаНаФизическоеЛицо() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником)
	|	И НЕ ПоступлениеНаРасчетныйСчет.Контрагент ССЫЛКА Справочник.ФизическиеЛица";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Контрагент      = ДокументОбъект.УдалитьФизЛицо;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьКредитыИЗаймы(Параметры) Экспорт
	
	СчетаРасчетовПоВыданнымЗаймам = Новый Массив();
	СчетаРасчетовПоВыданнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ПредоставленныеЗаймы);
	
	СчетаРасчетовПоПолученнымЗаймам = Новый Массив();
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймыВал);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам);
	СчетаРасчетовПоПолученнымЗаймам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал);
	
	СчетаРасчетовПоПолученнымКредитам = Новый Массив();
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредитыВал);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредитыВал);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам);
	СчетаРасчетовПоПолученнымКредитам.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВыданныеЗаймы", 		СчетаРасчетовПоВыданнымЗаймам); 
	Запрос.УстановитьПараметр("ПолученныеЗаймы", 	СчетаРасчетовПоПолученнымЗаймам);
	Запрос.УстановитьПараметр("ПолученныеКредиты", 	СчетаРасчетовПоПолученнымКредитам);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК ПоступлениеНаРасчетныйСчет,
	|	СРЕДНЕЕ(ВЫБОР
	|			КОГДА ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ВыданныеЗаймы)
	|				ТОГДА 1
	|			КОГДА ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ПолученныеЗаймы)
	|				ТОГДА 2
	|			КОГДА ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ПолученныеКредиты)
	|				ТОГДА 3
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КодВидаОперации,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ВыданныеЗаймы)
	|				ТОГДА 1
	|			КОГДА ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ПолученныеЗаймы)
	|				ТОГДА 2
	|			КОГДА ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом В (&ПолученныеКредиты)
	|				ТОГДА 3
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КодВидаОперацииМинимум
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			Если Не ЗначениеЗаполнено(Выборка.ПоступлениеНаРасчетныйСчет) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = Выборка.ПоступлениеНаРасчетныйСчет.ПолучитьОбъект();
			
			Если Выборка.КодВидаОперации <> Выборка.КодВидаОперацииМинимум 
				ИЛИ Выборка.КодВидаОперации = 0 Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
				
			ИначеЕсли Выборка.КодВидаОперации = 1 Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом;
			ИначеЕсли Выборка.КодВидаОперации = 2 Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма;
			ИначеЕсли Выборка.КодВидаОперации = 3 Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось опеределить вид расчетов по кредитам и займам в Поступление на расчетный счет ""%1"" по причине:
				|%2'"), 
				Выборка.ПоступлениеНаРасчетныйСчет,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.ПоступлениеНаРасчетныйСчет, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре ПоступлениеНаРасчетныйСчет.ОбработатьКредитыИЗаймы
				|не удалось опеределить вид расчетов по кредитам и займам в %1 документах Поступление на расчетный счет.'"), 
				ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ПоступлениеНаРасчетныйСчет.ОбработатьКредитыИЗаймы
				|обработала очередную порцию документов Поступление на расчетный счет: %1 элементов'"), 
				ОбъектовОбработано));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОбработчикиОбновленияИБ

// Заполняет новый реквизит "ПорядокОтраженияАванса" в ТЧ "РасшифровкаПлатежа" у переданного документа.
//
Процедура ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежа(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПоступлениеНаРасчетныйСчет");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.УдалитьПорядокОтраженияАванса) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Обработка объекта.
		// 1. Переносим порядок отражения авансов из шапки в ТЧ
		ПорядокОтраженияАвансаДляТЧ = Неопределено;
		Если ДокументОбъект.УдалитьПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходПатент Тогда
			ПорядокОтраженияАвансаДляТЧ = ДокументОбъект.Патент;
		Иначе
			ПорядокОтраженияАвансаДляТЧ = ДокументОбъект.УдалитьПорядокОтраженияАванса;
		КонецЕсли;
		
		Для каждого СтрокаПлатеж Из ДокументОбъект.РасшифровкаПлатежа Цикл
			СтрокаПлатеж.ПорядокОтраженияАванса = ПорядокОтраженияАвансаДляТЧ;
		КонецЦикла;
		
		ДокументОбъект.УдалитьПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ПустаяСсылка();
		
		// 2. Если отражение в КУДиР настроено вручную (допускалось при УСН-доходы) - установим признак ручной корректировки движений
		Если ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			ДокументОбъект.РучнаяКорректировка = Истина;
			ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
		КонецЕсли;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет новый реквизит "ДоходыУСН" в ТЧ "РасшифровкаПлатежа" у переданного документа
// (для ситуации, когда настройка УСН не редактировалась пользователем).
//
Процедура ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПоступлениеНаРасчетныйСчет");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если ДокументОбъект.Графа5_УСН = ДокументОбъект.РасшифровкаПлатежа.Итог("ДоходыУСН")
			И НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Обработка объекта.
		КоэффициентыРаспределения = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("СуммаПлатежа");
		МассивРаспределенныхДоходов = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ДокументОбъект.Графа5_УСН, КоэффициентыРаспределения);
		Если МассивРаспределенныхДоходов <> Неопределено Тогда
			ДокументОбъект.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивРаспределенныхДоходов, "ДоходыУСН");
		КонецЕсли;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для поступлений по прочим расчетам, в которых настройка УСН отредактирована пользователем вручную:
//    если отредактированы только доходы УСН - распределяет сумму доходов по строкам ТЧ "РасшифровкаПлатежа";
//    если иные настройки КУДиР отличаются от умолчаний - выставляется признак ручной корректировки движений
Процедура ОбработатьРучнуюНастройкуУСНПрочиеРасчеты(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПоступлениеНаРасчетныйСчет");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Обработка объекта.
		Если ДокументОбъект.Графа5_УСН <> 0 И ДокументОбъект.РасшифровкаПлатежа.Количество() <> 0 Тогда
			КоэффициентыРаспределения = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("СуммаПлатежа");
			МассивРаспределенныхДоходов = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ДокументОбъект.Графа5_УСН, КоэффициентыРаспределения);
			ДокументОбъект.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивРаспределенныхДоходов, "ДоходыУСН");
		КонецЕсли;
		
		Если ДокументОбъект.Графа6_УСН <> 0 ИЛИ ДокументОбъект.Графа7_УСН <> 0 ИЛИ ДокументОбъект.НДС_УСН <> 0
			ИЛИ ДокументОбъект.ДоходыЕНВД_УСН ИЛИ ДокументОбъект.РасходыЕНВД_УСН Тогда
			ДокументОбъект.РучнаяКорректировка = Истина;
		КонецЕсли;
		
		ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для прочих поступлений, в которых настройка УСН отредактирована пользователем вручную:
//    если отредактированы только доходы УСН, и вид операции "ПрочееПоступление" - ручная настройка УСН сбрасывается;
//    для остальных видов операций - выставляется признак ручной корректировки движений.
Процедура ОбработатьРучнуюНастройкуУСНПрочиеПоступления(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПоступлениеНаРасчетныйСчет");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
			Если НЕ ДокументОбъект.РучнаяКорректировка И (ДокументОбъект.Графа6_УСН <> 0 ИЛИ ДокументОбъект.Графа7_УСН <> 0 ИЛИ ДокументОбъект.НДС_УСН <> 0
				ИЛИ ДокументОбъект.ДоходыЕНВД_УСН ИЛИ ДокументОбъект.РасходыЕНВД_УСН) Тогда
				ДокументОбъект.РучнаяКорректировка = Истина;
			КонецЕсли;
			// если заданы только ДоходыУСН (Графа 5) - признак ручной корректировки не изменяем
		Иначе
			ДокументОбъект.РучнаяКорректировка = Истина;
		КонецЕсли;
		
		ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииПечати

#Область ПечатьЧека

Функция НаименованиеВСтрокеЧека(СтруктураШапки) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураШапки.ПринятоОт) Тогда
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтруктураШапки.ПринятоОт);
		ТекстКонтрагент = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
		
		ШаблонНаименования = НСтр("ru = 'Оплата от: %1'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, ТекстКонтрагент);
		
	Иначе
		
		ШаблонНаименования = НСтр("ru = 'Основание: %1'");
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, СтруктураШапки.Основание);
		
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапросаПараметрыПечатиЧека(ДокументСсылка, ИменаТаблиц) Экспорт
	
	ТекстЗапроса = ТекстЗапросаРеквизитыПечатиЧека(ИменаТаблиц) 
		+ Документы.РеализацияТоваровУслуг.ТекстЗапросаРеализацииПоСчету(ИменаТаблиц)
		+ Документы.СчетНаОплатуПокупателю.ТекстЗапросаДанныеДляПечатиЧека(ИменаТаблиц)
		+ Документы.РеализацияТоваровУслуг.ТекстЗапросаДанныеДляПечатиЧека(ИменаТаблиц);
		
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРеквизитыПечатиЧека(ИменаТаблиц)
	
	ИменаТаблиц.Добавить("ВТ_РасшифровкаПлатежа");
	ИменаТаблиц.Добавить("ВТ_СтавкиНДС");
	ИменаТаблиц.Добавить("ВТ_ДоговораПлатежногоАгента");
	ИменаТаблиц.Добавить("ВТ_ДоговораПлатежногоАгентаСводная");
	ИменаТаблиц.Добавить("ВТ_РеквизитыШапки");
	ИменаТаблиц.Добавить("ВТ_РеализацииПоСчету");
	ИменаТаблиц.Добавить("РеквизитыПечатиЧека");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Сделка КАК Документ.РеализацияТоваровУслуг)) <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	|			ТОГДА ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Сделка
	|		ИНАЧЕ ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату
	|	КОНЕЦ КАК Сделка,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоговорКонтрагента.Владелец КАК Контрагент
	|ПОМЕСТИТЬ ВТ_РасшифровкаПлатежа
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоговорКонтрагента,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Сделка КАК Документ.РеализацияТоваровУслуг)) <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	|			ТОГДА ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Сделка
	|		ИНАЧЕ ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВТ_РасшифровкаПлатежа.СтавкаНДС) КАК СтавкаНДС
	|ПОМЕСТИТЬ ВТ_СтавкиНДС
	|ИЗ
	|	ВТ_РасшифровкаПлатежа КАК ВТ_РасшифровкаПлатежа
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РасшифровкаПлатежа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорПлатежногоАгента,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Контрагент КАК ПлатежныйАгент,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДоговораПлатежногоАгента
	|ИЗ
	|	ВТ_РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоговорКонтрагента.ПлатежныйАгент
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоговорКонтрагента,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчет.СубконтоКт2,
	|	ПоступлениеНаРасчетныйСчет.СубконтоКт1,
	|	ПоступлениеНаРасчетныйСчет.Ссылка
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ПоступлениеНаРасчетныйСчет.СубконтоКт2 КАК Справочник.ДоговорыКонтрагентов).ПлатежныйАгент, ЛОЖЬ)
	|	И ПоступлениеНаРасчетныйСчет.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДоговораПлатежногоАгента.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВТ_ДоговораПлатежногоАгента.ДоговорПлатежногоАгента) КАК ДоговорПлатежногоАгента,
	|	ВТ_ДоговораПлатежногоАгента.ПлатежныйАгент КАК ПлатежныйАгент,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ДоговораПлатежногоАгента.ДоговорПлатежногоАгента) КАК КоличествоДоговоров
	|ПОМЕСТИТЬ ВТ_ДоговораПлатежногоАгентаСводная
	|ИЗ
	|	ВТ_ДоговораПлатежногоАгента КАК ВТ_ДоговораПлатежногоАгента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДоговораПлатежногоАгента.Ссылка,
	|	ВТ_ДоговораПлатежногоАгента.ПлатежныйАгент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчет.Дата КАК Дата,
	|	ПоступлениеНаРасчетныйСчет.Номер КАК Номер,
	|	ПоступлениеНаРасчетныйСчет.Организация КАК Организация,
	|	ПоступлениеНаРасчетныйСчет.Патент КАК Патент,
	|	ПоступлениеНаРасчетныйСчет.НазначениеПлатежа КАК Основание,
	|	ПоступлениеНаРасчетныйСчет.ВидОперации КАК ВидОперации,
	|	ПоступлениеНаРасчетныйСчет.Контрагент КАК Контрагент,
	|	ПоступлениеНаРасчетныйСчет.Контрагент КАК ПринятоОт,
	|	ВТ_СтавкиНДС.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеНаРасчетныйСчет.СуммаДокумента КАК СуммаДокумента,
	|	ПоступлениеНаРасчетныйСчет.ВалютаДокумента КАК ВалютаДокумента,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ЕСТЬNULL(ВТ_ДоговораПлатежногоАгента.ДоговорПлатежногоАгента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорПлатежногоАгента,
	|	ЕСТЬNULL(ВТ_ДоговораПлатежногоАгента.ПлатежныйАгент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ПлатежныйАгент,
	|	ЕСТЬNULL(ВТ_ДоговораПлатежногоАгента.КоличествоДоговоров, 0) > 1 КАК НесколькоДоговоровПлатежногоАгента
	|ПОМЕСТИТЬ ВТ_РеквизитыШапки
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговораПлатежногоАгентаСводная КАК ВТ_ДоговораПлатежногоАгента
	|		ПО ПоступлениеНаРасчетныйСчет.Ссылка = ВТ_ДоговораПлатежногоАгента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиНДС КАК ВТ_СтавкиНДС
	|		ПО ПоступлениеНаРасчетныйСчет.Ссылка = ВТ_СтавкиНДС.Ссылка
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваров,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Сделка КАК СчетНаОплату
	|ПОМЕСТИТЬ ВТ_РеализацииПоСчету
	|ИЗ
	|	ВТ_РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Сделка = РеализацияТоваровУслуг.СчетНаОплатуПокупателю
	|ГДЕ
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Проведен, ЛОЖЬ)
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Сделка <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РеквизитыШапки.Ссылка КАК Ссылка,
	|	ВТ_РеквизитыШапки.Организация КАК Организация,
	|	ВТ_РеквизитыШапки.СуммаДокумента КАК СуммаДокумента,
	|	ВТ_РеквизитыШапки.Контрагент КАК Контрагент,
	|	ЛОЖЬ КАК ВыводитьКонтрагентаВЧеке,
	|	ВТ_РеквизитыШапки.ПринятоОт КАК ПринятоОт,
	|	ВТ_РеквизитыШапки.Основание КАК Основание,
	|	ВТ_РеквизитыШапки.Дата КАК Дата,
	|	ВТ_РеквизитыШапки.Номер КАК Номер,
	|	ВТ_РеквизитыШапки.ВидОперации КАК ВидОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно) КАК ТипОплаты,
	|	ВЫБОР ВТ_РеквизитыШапки.ВидОперации
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств)
	|	КОНЕЦ КАК ТипРасчета,
	|	ВТ_РеквизитыШапки.Патент КАК Патент,
	|	ВЫБОР
	|		КОГДА ВТ_РеквизитыШапки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика)
	|				ИЛИ ВТ_РеквизитыШапки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
	|			ТОГДА ВТ_РеквизитыШапки.СтавкаНДС
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВТ_РеквизитыШапки.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ВТ_РеквизитыШапки.ПлатежныйАгент КАК ПлатежныйАгент,
	|	ВТ_РеквизитыШапки.НесколькоДоговоровПлатежногоАгента КАК НесколькоДоговоровПлатежногоАгента,
	|	ВТ_РеквизитыШапки.ВалютаДокумента КАК ВалютаДокумента
	|ИЗ
	|	ВТ_РеквизитыШапки КАК ВТ_РеквизитыШапки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

#КонецОбласти

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Поступление на расчетный счет""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;
	
	ПолеЗапросаНазначениеПлатежа =
	"ВЫБОР
	|		КОГДА Таб.НазначениеПлатежа = """"
	|			ТОГДА Таб.Контрагент
	|		КОГДА Таб.Контрагент = НЕОПРЕДЕЛЕНО
	|			ТОГДА Таб.НазначениеПлатежа
	|		КОГДА Таб.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Таб.НазначениеПлатежа
	|		ИНАЧЕ ПОДСТРОКА(Таб.Контрагент.Наименование, 1, 100) + "" / "" + ПОДСТРОКА(Таб.НазначениеПлатежа, 1, 210)
	|	КОНЕЦ";
	
	Результат.Вставить("Информация", ПолеЗапросаНазначениеПлатежа);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросовПодготовкаПараметровПроведенияДокумента

Процедура ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.БезЗакрывающихДокументов КАК БезЗакрывающихДокументов,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов КАК ОтражатьРазницуВКурсеВСоставеОперационныхРасходов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.Контрагент КАК ФизЛицо,
	|	Реквизиты.СчетКонтрагента КАК СчетКонтрагента,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	Реквизиты.СубконтоКт1 КАК СубконтоКт1,
	|	Реквизиты.СубконтоКт2 КАК СубконтоКт2,
	|	Реквизиты.СубконтоКт3 КАК СубконтоКт3,
	|	Реквизиты.ПодразделениеКт КАК ПодразделениеКт,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.СуммаУслуг КАК СуммаУслуг,
	|	Реквизиты.НазначениеПлатежа КАК НазначениеПлатежа,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ВЫРАЗИТЬ(""Поступление на р/с"" КАК СТРОКА(150)) КАК Содержание,
	|	Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика)
	|		И НЕ Реквизиты.БезЗакрывающихДокументов КАК ЭтоВозврат,
	|	Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
	|		И НЕ Реквизиты.БезЗакрывающихДокументов КАК РасчетыПоРеализации,
	|	Реквизиты.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсНаДатуПриобретенияРеализацииВалюты
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.БезЗакрывающихДокументов КАК БезЗакрывающихДокументов,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ФизЛицо КАК ФизЛицо,
	|	Реквизиты.СчетКонтрагента КАК СчетКонтрагента,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	Реквизиты.СубконтоКт1 КАК СубконтоКт1,
	|	Реквизиты.СубконтоКт2 КАК СубконтоКт2,
	|	Реквизиты.СубконтоКт3 КАК СубконтоКт3,
	|	Реквизиты.ПодразделениеКт КАК ПодразделениеКт,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.РасчетыПоРеализации КАК РасчетыПоРеализации,
	|	1 КАК КоэффициентРуб,
	|	Реквизиты.СуммаУслуг КАК СуммаУслуг,
	|	Реквизиты.Содержание КАК Содержание,
	|	Реквизиты.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсНаДатуПриобретенияРеализацииВалюты,
	|	&ЭтоОтложенноеПроведение КАК ЭтоОтложенноеПроведение
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	ТаблицаРеквизиты = Запрос.Выполнить().Выгрузить();
	Реквизиты        = ТаблицаРеквизиты[0];
	
	// Коэффициент пересчета сумм из валюты документа в рубли
	Если Реквизиты.ВалютаДокумента = ПараметрыПроведения.ВалютаРеглУчета Тогда
		КоэффициентРуб = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Дата);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ           = Истина;
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Реквизиты.Ссылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Дата, "ДФ=dd.MM.yy"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ПараметрыПроведения.ДокументСсылка);
			ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
			
			Возврат;
		КонецЕсли;
		
		КоэффициентРуб           = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
		Реквизиты.КоэффициентРуб = КоэффициентРуб;
	КонецЕсли;
	
	ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	
КонецПроцедуры

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.БезЗакрывающихДокументов КАК БезЗакрывающихДокументов,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.НомерВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов КАК ОтражатьРазницуВКурсе,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	&ОрганизацияПрименяетУСН КАК УчитыватьЗадолженностьУСН,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам))
	|			ТОГДА &ОрганизацияПрименяетУСНПатент
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьЗадолженностьУСНПатент,
	|	&ПлательщикНДФЛ КАК ПлательщикНДФЛ,
	|	Реквизиты.НаправлениеДвижения КАК НаправлениеДвижения,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.РасчетыПоРеализации КАК РасчетыПоРеализации,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ВЫРАЗИТЬ(Реквизиты.НазначениеПлатежа КАК СТРОКА(150)) КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса  + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	&Контрагент КАК РеквизитыКонтрагент,
	|	&ФизЛицо КАК РеквизитыФизЛицо,
	|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсНаДатуПриобретенияРеализацииВалюты,
	|	&КурсНаДатуПриобретенияРеализацииВалюты КАК РеквизитыКурсНаДатуПриобретенияРеализацииВалюты,
	|	ТаблицаРасшифровкаПлатежа.Сделка КАК Сделка,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса КАК ПорядокОтраженияАванса,
	|	ТаблицаРасшифровкаПлатежа.СубконтоКт1 КАК СубконтоКт1,
	|	ТаблицаРасшифровкаПлатежа.СубконтоКт2 КАК СубконтоКт2,
	|	ТаблицаРасшифровкаПлатежа.СубконтоКт3 КАК СубконтоКт3,
	|	ТаблицаРасшифровкаПлатежа.ПодразделениеКт КАК ПодразделениеКт,
	|	&СчетУчетаРасчетовСКонтрагентом КАК РеквизитыСчетУчетаРасчетовСКонтрагентом,
	|	&СубконтоКт1 КАК РеквизитыСубконтоКт1,
	|	&СубконтоКт2 КАК РеквизитыСубконтоКт2,
	|	&СубконтоКт3 КАК РеквизитыСубконтоКт3,
	|	&ПодразделениеКт КАК РеквизитыПодразделениеКт,
	|	&ПодразделениеОрганизации КАК РеквизитыПодразделениеОрганизации,
	|	&СчетБанк КАК РеквизитыСчетБанк,
	|	&СчетОрганизации КАК РеквизитыСчетОрганизации,
	|	&СтатьяДвиженияДенежныхСредств КАК РеквизитыСтатьяДвиженияДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаУслуг КАК СуммаУслуг,
	|	&СуммаУслуг КАК РеквизитыСуммаУслуг,
	|	ВЫБОР
	|		КОГДА ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты)
	|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
	|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * &КоэффициентРуб
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
	|	ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаНДС * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаНДСРуб,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты)
	|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
	|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ВЫРАЗИТЬ(&Содержание КАК СТРОКА(150)) КАК РеквизитыСодержание,
	|	&НазначениеПлатежа КАК Содержание
	|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|ГДЕ
	|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И (НЕ &ЭтоОтложенноеПроведение
	|			ИЛИ ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента = &ДоговорДляОтложенногоПроведения)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура погашения задолженности выполняется для операций:
	// - ОплатаПокупателя (в режиме БезЗакрывающихДокументов = Ложь)
	// - ВозвратОтПоставщика (в режиме БезЗакрывающихДокументов = Ложь)
	// - ПрочиеРасчетыСКонтрагентами
	// - ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя 
		И НЕ Реквизиты.БезЗакрывающихДокументов Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
		|	ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика 
		И НЕ Реквизиты.БезЗакрывающихДокументов Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически) КАК СпособПогашенияЗадолженности,
		|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически) КАК СпособПогашенияЗадолженности,
		|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетов,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСФакторинговымиКомпаниями) КАК СчетРасчетов,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСФакторинговымиКомпаниями) КАК СчетАвансов,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеКт КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически) КАК СпособПогашенияЗадолженности,
		|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	99999,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
		|	ЛОЖЬ,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически),
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетУчетаРасчетовСКонтрагентом,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСубконтоКт1,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСубконтоКт2,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.СуммаУслуг,
		|	ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаУслуг * &КоэффициентРуб КАК ЧИСЛО(15, 2)),
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСуммаУслуг > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежа", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПриобретениеВалюты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетУчетаДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК БанковскийСчет,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|				ТОГДА 0
		|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов * ТаблицаРасшифровкаПлатежа.РеквизитыКурсНаДатуПриобретенияРеализацииВалюты / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРубПоКурсуЦБ,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ПриобретениеВалюты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПриобретениеВалюты", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаПродажаВалюты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетУчетаДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК БанковскийСчет,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|				ТОГДА 0
		|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов * ТаблицаРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРубПоКурсуЦБ,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ПродажаВалюты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПродажаВалюты", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПрочееПоступление(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура прочего поступления вызывается для операций:
	// - ОплатаПокупателя (в режиме БезЗакрывающихДокументов = Истина)
	// - ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам (в режиме БезЗакрывающихДокументов = Истина)
	// - ВозвратОтПоставщика (в режиме БезЗакрывающихДокументов = Истина)
	// - ПрочееПоступление
	// - ЛичныеСредстваПредпринимателя
	// - Инкассация
	// - ПереводСДругогоСчета
	// - ВзносНаличными
	// - РасчетыПоКредитамИЗаймам
	// - ВозвратЗаймаРаботником
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		И Реквизиты.БезЗакрывающихДокументов Тогда 
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса = ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходЕНВД)
		|			ИЛИ ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса ССЫЛКА Справочник.Патенты
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаЕНВД)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД)
		|	КОНЕЦ КАК СчетКт,
		|	&ОсновнаяНоменклатурнаяГруппа КАК СубконтоКт1,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеКт КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
		И Реквизиты.БезЗакрывающихДокументов Тогда 
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса = ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходЕНВД)
		|			ИЛИ ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса ССЫЛКА Справочник.Патенты
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаЕНВД)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД)
		|	КОНЕЦ КАК СчетКт,
		|	&ОсновнаяНоменклатурнаяГруппа КАК СубконтоКт1,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеКт КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа + ТаблицаРасшифровкаПлатежа.СуммаУслуг КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб + ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаУслуг * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
		И Реквизиты.БезЗакрывающихДокументов Тогда 
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы) КАК СчетКт,
		|	&ПрочиеВнереализационныеДоходыРасходы КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеКт КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетУчетаРасчетовСКонтрагентом КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСубконтоКт1 КАК СубконтоКт1,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСубконтоКт2 КАК СубконтоКт2,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСубконтоКт3 КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеКт КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению) КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.СубконтоКт1 КАК СубконтоКт1,
		|	ТаблицаРасшифровкаПлатежа.СубконтоКт2 КАК СубконтоКт2,
		|	ТаблицаРасшифровкаПлатежа.СубконтоКт3 КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.ПодразделениеКт КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом 
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма 
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК СубконтоКт1,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам) КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыФизЛицо КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА &ДокументВВалюте
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПутиВал)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути)
		|	КОНЕЦ КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСтатьяДвиженияДенежныхСредств КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|ГДЕ
		|	&ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежаПрочее", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежаПрочее", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ПоступлениеМПЗИПРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ПоступлениеТоваровУслуг"" КАК ТипПоступления,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	НЕОПРЕДЕЛЕНО КАК ТипСклада,
	|	ИСТИНА КАК НДСВключенВСтоимость,
	|	ЛОЖЬ КАК УчетАгентскогоНДС
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	Если НЕ ПараметрыПроведения.ПлательщикНДФЛ
		ИЛИ Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаУслуг",          Неопределено);
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	""РасшифровкаПлатежа"" КАК ИмяСписка,
	|	""Расшифровка платежа"" КАК СинонимСписка,
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	ВЫРАЗИТЬ(Реквизиты.СуммаУслуг * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	0 КАК НДС,
	|	0 КАК Количество,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ВестиУчетПоВидамДеятельностиИП
	|			ТОГДА &ОсновнаяНоменклатурнаяГруппа
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.НоменклатурныеГруппы)
	|			ТОГДА Реквизиты.СубконтоКт1
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.НоменклатурныеГруппы)
	|			ТОГДА Реквизиты.СубконтоКт2
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.НоменклатурныеГруппы)
	|			ТОГДА Реквизиты.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.СтатьиЗатрат)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.РасходыБудущихПериодов)
	|			ТОГДА Реквизиты.СубконтоКт1
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.СтатьиЗатрат)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.РасходыБудущихПериодов)
	|			ТОГДА Реквизиты.СубконтоКт2
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.СтатьиЗатрат)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.РасходыБудущихПериодов)
	|			ТОГДА Реквизиты.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.СтатьиЗатрат)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.СтатьиЗатрат)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт2 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.СтатьиЗатрат)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт3 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидРасходовНУ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт1 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт2 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт3 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПринятиеКналоговомуУчету,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.СтатьиЗатрат)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.СтатьиЗатрат)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт2 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.СтатьиЗатрат)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт3 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	НЕОПРЕДЕЛЕНО КАК Партия
	|ИЗ
	|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Реквизиты.СуммаУслуг > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.Дата КАК ДатаДокументаРасчетов,
	|	ВЫРАЗИТЬ(Реквизиты.СуммаУслуг * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|ГДЕ
	|	&ПлательщикНДФЛ
	|	И Реквизиты.СуммаУслуг > 0";
	
	НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаУслуг",          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПокупкаПродажаВалютыУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ ПараметрыПроведения.ОрганизацияПрименяетУСН Тогда
		ПараметрыПроведения.Вставить("ПокупкаПродажаВалюты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|				ТОГДА 0
		|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов * ТаблицаРасшифровкаПлатежа.РеквизитыКурсНаДатуПриобретенияРеализацииВалюты / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРубПоКурсуЦБ,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|				ТОГДА 0
		|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов * ТаблицаРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРубПоКурсуЦБ,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ПокупкаПродажаВалюты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПокупкаПродажаВалюты", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		И НЕ Реквизиты.ЭтоОтложенноеПроведение Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРуб
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДСРуб
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаДокумента
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаНДСРуб * ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК СуммаНДС,
		|	СчетНаОплатуПокупателю.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПокупателю.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ОплатаСчетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ОплатаСчетов", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстСодержанияПроводокДокумента(Реквизиты)
	
	ПозицияСуммы = СтрНайти(Реквизиты.Содержание, "Сумма ");
	Если ПозицияСуммы = 0 Тогда
		ТекстНазначение = Реквизиты.Содержание;
	Иначе
		ТекстНазначение = Лев(Реквизиты.Содержание, ПозицияСуммы - 1);
	КонецЕсли;
	
	Содержание = СокрЛП(СтрЗаменить(ТекстНазначение, Символы.ПС, " "))
		+ " по вх.д. " + Реквизиты.НомерВходящегоДокумента 
		+ " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
	
	Возврат Содержание;
	
КонецФункции

#КонецОбласти

#Область ВозвратПоПлатежнойКарте

Функция ИменаКолонокТаблицы(Таблица)
	
	МассивКолонок = Новый Массив;
	
	Для Каждого Колонка Из Таблица.Колонки Цикл
		МассивКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Возврат СтрСоединить(МассивКолонок, ",");
	
КонецФункции

Процедура ЗачестьВозвратыПоПрочимРасчетам(Реквизиты, ТаблицыВозвратов, ТаблицыРеализаций, ПодготовленныеТаблицы, СчетаУСН)
	
	// Если возвратов нет, то ничего не делаем.
	Если ТаблицыВозвратов.ОстаткиПрочихРасчетовВозврат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим таблицы
	ОстаткиПрочихРасчетовВозврат    = ТаблицыВозвратов.ОстаткиПрочихРасчетовВозврат;
	ОстаткиСчетовУСНВозврат         = ТаблицыВозвратов.ОстаткиСчетовУСНВозврат;
	ОстаткиПрочихРасчетовРеализация = ТаблицыРеализаций.ОстаткиПрочихРасчетовРеализация;
	ОстаткиСчетовУСНРеализация      = ТаблицыРеализаций.ОстаткиСчетовУСНРеализация;
	ТаблицаПрочихРасчетовУСН        = ТаблицыРеализаций.ТаблицаПрочихРасчетовУСН;
	
	// Для зачета возвратов нужен счет УСН и Патент. Дополним таблицы.
	ПрименяетсяПатент = (УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация, Реквизиты.Период));
	ДополнитьТаблицуСчетамиУСНиПатентами(ОстаткиПрочихРасчетовВозврат, ОстаткиСчетовУСНВозврат, ПрименяетсяПатент, СчетаУСН);
	ДополнитьТаблицуСчетамиУСНиПатентами(ОстаткиПрочихРасчетовРеализация, ОстаткиСчетовУСНРеализация, ПрименяетсяПатент, СчетаУСН);
	ОстаткиСчетовУСНВозврат = Неопределено; // Вся информация в таблице ОстаткиСчетовУСНВозврат
	
	// Зачет возвратов и оплаченных реализаций происходит в два этапа:
	// 1. Зачет возвратов в рамках одного налогового режима (с одинаковыми счетами УСН и патентами).
	// Возвраты зачитываются в счет оплаченных доходов от реализации по тому же счету УСН и патенту.
	// 2. Зачет оставшихся возвратов и реализаций без учета налогового режима (по разным счетам УСН и/или патентам).
	// В этом случае происходит переквалификация доходов по разным видам деятельности:
	// уменьшаются (сторнируются) доходы по налоговому режиму возврата и признаются доходы по налоговому режиму оплаченной реализации
	// на сумму удержанного возврата.
	// Этот этап не выполняется, если все возвраты зачлись реализациями в рамках одного налогового режима на первом этапе.
	
	// По мере выполнения процедуры информация в таблицах ОстаткиПрочихРасчетовРеализация, ОстаткиСчетовУСНРеализация и ТаблицаПрочихРасчетовУСН меняется.
	// В конце процедуры будут удалены строки, которые полностью зачлись возвратами.
	
	// 1. Зачет возвратов в разрезе счетов УСН и патентов
	Для Каждого СтрокаВозврата Из ОстаткиПрочихРасчетовВозврат Цикл
		
		ОтборСтрокРеализации = Новый Структура;
		ОтборСтрокРеализации.Вставить("Подразделение",      СтрокаВозврата.Подразделение);
		ОтборСтрокРеализации.Вставить("Контрагент",         СтрокаВозврата.Контрагент);
		ОтборСтрокРеализации.Вставить("ДоговорКонтрагента", СтрокаВозврата.ДоговорКонтрагента);
		ОтборСтрокРеализации.Вставить("СчетУчета",          СтрокаВозврата.СчетУчета);
		ОтборСтрокРеализации.Вставить("СчетУСН",            СтрокаВозврата.СчетУСН);
		ОтборСтрокРеализации.Вставить("Патент",             СтрокаВозврата.Патент);
		
		НайденныеОстаткиРеализации = ОстаткиПрочихРасчетовРеализация.НайтиСтроки(ОтборСтрокРеализации);
		Для Каждого СтрокаРеализации Из НайденныеОстаткиРеализации Цикл
			
			// Если зачли весь возврат, то выходим из цикла по остаткам.
			Если СтрокаВозврата.СуммаОстаток = 0 Тогда
				Прервать;
			КонецЕсли;
			
			// Если зачли этот остаток, то переходим к следующему.
			// Удаление зачтенных остатков выполняется в конце процедуры.
			Если СтрокаРеализации.СуммаОстаток = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаЗачета                   = Мин(СтрокаВозврата.СуммаОстаток, СтрокаРеализации.СуммаОстаток);
			СтрокаРеализации.СуммаОстаток = СтрокаРеализации.СуммаОстаток - СуммаЗачета;
			СтрокаВозврата.СуммаОстаток   = СтрокаВозврата.СуммаОстаток - СуммаЗачета;
			
			// Добавим записи в таблицу прочих расчетов для формирования движений по зачету возврата.
			ДобавитьЗачетВозвратаПоПрочимРасчетам(ТаблицаПрочихРасчетовУСН, Реквизиты, СтрокаВозврата, СтрокаРеализации, СуммаЗачета);
			
			// Если зачитывается возврат по счетам УСН, то:
			// 1. Уменьшаем суммы в таблице ОстаткиСчетовУСНРеализация.
			// На основании этой таблицы формируются проводки и записи КУДиР.
			// 2. Подготовим таблицу для проводок по счетам УСН.
			Если ЗначениеЗаполнено(ОтборСтрокРеализации.СчетУСН) Тогда
				
				// 1. Уменьшаем суммы в таблице ОстаткиСчетовУСНРеализация.
				УменьшитьОстаткиПоСчетамУСН(СтрокаРеализации, ОстаткиСчетовУСНРеализация, СуммаЗачета);
				
				// 2. Готовим таблицу для проводок по счетам УСН.
				НоваяСтрокаВозвратыПоУСН = ПодготовленныеТаблицы.ТаблицаВозвратыПоВзаиморасчетамУСН.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВозвратыПоУСН, Реквизиты);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВозвратыПоУСН, СтрокаВозврата);
				НоваяСтрокаВозвратыПоУСН.СуммаВзаиморасчетов = СуммаЗачета;
				НоваяСтрокаВозвратыПоУСН.СуммаРуб            = СуммаЗачета;
				// Аналитика возврата
				НоваяСтрокаВозвратыПоУСН.СчетРасчетов        = СтрокаВозврата.СчетУСН;
				НоваяСтрокаВозвратыПоУСН.ДокументРасчетов    = СтрокаВозврата.РасчетныйДокумент; // Документ возврата.
				// Корреспондирующая аналитика
				НоваяСтрокаВозвратыПоУСН.КорСчет             = СтрокаВозврата.СчетУСН;
				НоваяСтрокаВозвратыПоУСН.КорПодразделение    = СтрокаРеализации.Подразделение;
				НоваяСтрокаВозвратыПоУСН.КорСубконто1        = НоваяСтрокаВозвратыПоУСН.Контрагент;
				НоваяСтрокаВозвратыПоУСН.КорСубконто2        = НоваяСтрокаВозвратыПоУСН.ДоговорКонтрагента;
				НоваяСтрокаВозвратыПоУСН.КорСубконто3        = СтрокаРеализации.РасчетныйДокумент; // Документ реализации.
				НоваяСтрокаВозвратыПоУСН.Содержание          = НСтр("ru='Удержание суммы возврата из выручки к зачислению'",
					ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// 2. Зачет оставшихся возвратов без учета счетов УСН.
	Если ОстаткиПрочихРасчетовВозврат.Итог("СуммаОстаток") > 0
		И ОстаткиПрочихРасчетовРеализация.Итог("СуммаОстаток") > 0 Тогда
		
		Для Каждого СтрокаВозврата Из ОстаткиПрочихРасчетовВозврат Цикл
		
			ОтборСтрокРеализации = Новый Структура;
			ОтборСтрокРеализации.Вставить("Подразделение",      СтрокаВозврата.Подразделение);
			ОтборСтрокРеализации.Вставить("Контрагент",         СтрокаВозврата.Контрагент);
			ОтборСтрокРеализации.Вставить("ДоговорКонтрагента", СтрокаВозврата.ДоговорКонтрагента);
			ОтборСтрокРеализации.Вставить("СчетУчета",          СтрокаВозврата.СчетУчета);
			
			// Распределяем оставшиеся остатки в прочих расчетах
			НайденныеОстаткиРеализации = ОстаткиПрочихРасчетовРеализация.НайтиСтроки(ОтборСтрокРеализации);
			Для Каждого СтрокаРеализации Из НайденныеОстаткиРеализации Цикл
				
				// Если зачли весь возврат, то выходим из цикла по остаткам.
				Если СтрокаВозврата.СуммаОстаток = 0 Тогда
					Прервать;
				КонецЕсли;
				
				// Если зачли этот остаток, то переходим к следующему.
				// Удаление зачтенных остатков выполняется в конце процедуры.
				Если СтрокаРеализации.СуммаОстаток = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаЗачета                   = Мин(СтрокаВозврата.СуммаОстаток, СтрокаРеализации.СуммаОстаток);
				СтрокаВозврата.СуммаОстаток   = СтрокаВозврата.СуммаОстаток - СуммаЗачета;
				СтрокаРеализации.СуммаОстаток = СтрокаРеализации.СуммаОстаток - СуммаЗачета;
				
				// Добавим записи в таблицу прочих расчетов для формирования движений по зачету возврата.
				ДобавитьЗачетВозвратаПоПрочимРасчетам(ТаблицаПрочихРасчетовУСН, Реквизиты, СтрокаВозврата, СтрокаРеализации, СуммаЗачета);
				
				// Зачитываем возвраты по счетам УСН.
				// Готовим проводку по зачету возврату.
				// Счет Дт и Кт будут определены ниже.
				НоваяСтрокаВозвратыПоУСН = ПодготовленныеТаблицы.ТаблицаВозвратыПоВзаиморасчетамУСН.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВозвратыПоУСН, Реквизиты);
				НоваяСтрокаВозвратыПоУСН.СуммаВзаиморасчетов = СуммаЗачета;
				НоваяСтрокаВозвратыПоУСН.СуммаРуб            = СуммаЗачета;
				НоваяСтрокаВозвратыПоУСН.Содержание          = НСтр("ru='Удержание суммы возврата из выручки к зачислению'",
					ОбщегоНазначения.КодОсновногоЯзыка());
				
				Если ЗначениеЗаполнено(СтрокаРеализации.СчетУСН) Тогда
					
					// 1. Заполним аналитику Кт проводки.
					НоваяСтрокаВозвратыПоУСН.КорСчет          = СтрокаРеализации.СчетУСН;
					НоваяСтрокаВозвратыПоУСН.КорПодразделение = СтрокаРеализации.Подразделение;
					НоваяСтрокаВозвратыПоУСН.КорСубконто1     = СтрокаРеализации.Контрагент;
					НоваяСтрокаВозвратыПоУСН.КорСубконто2     = СтрокаРеализации.ДоговорКонтрагента;
					НоваяСтрокаВозвратыПоУСН.КорСубконто3     = СтрокаРеализации.РасчетныйДокумент;
					
					// 2. Уменьшим остатки по счетам УСН в таблице ОстаткиСчетовУСНРеализация
					УменьшитьОстаткиПоСчетамУСН(СтрокаРеализации, ОстаткиСчетовУСНРеализация, СуммаЗачета);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаВозврата.СчетУСН) Тогда
					// Заполним аналитику Дт Проводки.
					ЗаполнитьЗначенияСвойств(НоваяСтрокаВозвратыПоУСН, СтрокаВозврата);
					НоваяСтрокаВозвратыПоУСН.СчетРасчетов     = СтрокаВозврата.СчетУСН;
					НоваяСтрокаВозвратыПоУСН.ДокументРасчетов = СтрокаВозврата.РасчетныйДокумент;
				КонецЕсли;
				
				// Переквалифакация доходов
				ДобавитьДанныеВПереквалификациюДоходов(ПодготовленныеТаблицы.КУДиРПереквалификация, СтрокаВозврата, -СуммаЗачета, СчетаУСН);
				ДобавитьДанныеВПереквалификациюДоходов(ПодготовленныеТаблицы.КУДиРПереквалификация, СтрокаРеализации, СуммаЗачета, СчетаУСН);
				
				Если ПрименяетсяПатент И СтрокаВозврата.Патент <> СтрокаРеализации.Патент Тогда
					// Если патенты в строках не совпадают, то выполним переквалификацию доходов.
					ДобавитьДанныеВПереквалификациюПоПатенту(ПодготовленныеТаблицы.КУДиРПатент, СтрокаВозврата, -СуммаЗачета);
					ДобавитьДанныеВПереквалификациюПоПатенту(ПодготовленныеТаблицы.КУДиРПатент, СтрокаРеализации, СуммаЗачета);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		ПодготовитьСодержаниеПереквалификацииКУДиР(ПодготовленныеТаблицы.КУДиРПереквалификация);
		ПодготовитьКУДиРПатент(ПодготовленныеТаблицы.КУДиРПатент);
	КонецЕсли;
	
	// Удаляем из таблицы прочих расчетов строки, которые были зачтены на возвраты.
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ОстаткиПрочихРасчетовРеализация Цикл
		Если СтрокаТаблицы.СуммаОстаток = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	УдалитьСтрокиИзТаблицы(ОстаткиПрочихРасчетовРеализация, СтрокиКУдалению);
	
	// Свернем таблицу, чтобы убрать добавленные колонки СчетУСН, Подразделение и Патент.
	КолонкиГруппировки = "ДатаПервичногоДокумента,ДоговорКонтрагента,Контрагент,Организация,"
		+ "Подразделение,РасчетныйДокумент,СчетУчета,ЭтоПриемРозничнойВыручкиНТТ";
	ОстаткиПрочихРасчетовРеализация.Свернуть(КолонкиГруппировки, "СуммаОстаток");
	ОстаткиПрочихРасчетовРеализация.Сортировать("ДатаПервичногоДокумента, РасчетныйДокумент, СчетУчета", Новый СравнениеЗначений);
	
	// Свернем таблицу, чтобы сложить операции по разным видам деятельности
	КолонкиГруппировки = "ВидДвижения,ДоговорКонтрагента,Контрагент,МоментВремени,НомерСтроки,Организация,"
		+ "Период,РасчетныйДокумент,Регистратор,СчетУчета,ЭтапПроведения";
	ТаблицаПрочихРасчетовУСН.Свернуть(КолонкиГруппировки, "Сумма");
	ТаблицаПрочихРасчетовУСН.Сортировать("РасчетныйДокумент, СчетУчета", Новый СравнениеЗначений);
	
	// Подготовим структуру
	ТаблицыРеализаций.ОстаткиПрочихРасчетовРеализация = ОстаткиПрочихРасчетовРеализация;
	ТаблицыРеализаций.ОстаткиСчетовУСНРеализация      = ОстаткиСчетовУСНРеализация;
	ТаблицыРеализаций.ТаблицаПрочихРасчетовУСН        = ТаблицаПрочихРасчетовУСН
	
КонецПроцедуры

Процедура ДобавитьЗачетВозвратаПоПрочимРасчетам(ТаблицаПрочихРасчетов, Реквизиты, СтрокаВозврата, СтрокаОстатка, Сумма)
	
	// 1. Списываем возврат из прочих расчетов.
	НоваяСтрока = ТаблицаПрочихРасчетов.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВозврата);
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Сумма       = Сумма;
	
	// 2. Зачитываем сумму возврата в прочих расчетах.
	НоваяСтрока = ТаблицаПрочихРасчетов.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
	НоваяСтрока.Сумма       = Сумма;
	
КонецПроцедуры

Процедура УменьшитьОстаткиПоСчетамУСН(СтрокаОстатка, ОстаткиСчетовУСНРеализация, СуммаЗачета)
	
	ОтборПоОстаткамУСН = Новый Структура("РасчетныйДокумент, Счет", 
		СтрокаОстатка.РасчетныйДокумент, СтрокаОстатка.СчетУСН);
	
	СтрокиОстатковПоСчетамУСН = ОстаткиСчетовУСНРеализация.НайтиСтроки(ОтборПоОстаткамУСН);
	Для Каждого СтрокаОстатков Из СтрокиОстатковПоСчетамУСН Цикл
		СтрокаОстатков.СуммаВзаиморасчетов = СтрокаОстатков.СуммаВзаиморасчетов - СуммаЗачета;
		СтрокаОстатков.СуммаРуб            = СтрокаОстатков.СуммаРуб - СуммаЗачета;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСтрокиИзТаблицы(Таблица, СтрокиКУдалению)
	
	КоличествоЭлементов = СтрокиКУдалению.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		Таблица.Удалить(СтрокиКУдалению[КоличествоЭлементов - Индекс]);
	КонецЦикла;
	СтрокиКУдалению = Неопределено;
	
КонецПроцедуры

Процедура ДополнитьТаблицуСчетамиУСНиПатентами(ТаблицаПрочихРасчетов, ТаблицаОстатковПоСчетамУСН, ПрименяетсяПатент, СчетаУСН)
	
	ТаблицаПрочихРасчетов.Колонки.Добавить("СчетУСН", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаПрочихРасчетов.Колонки.Добавить("Патент",  Новый ОписаниеТипов("СправочникСсылка.Патенты"));
	
	СтрокиКУдалению   = Новый Массив;
	СтрокиКДобавлению = Новый Массив;
	ИменаКолонок      = ИменаКолонокТаблицы(ТаблицаПрочихРасчетов);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПрочихРасчетов Цикл
		ОтборПрочихРасчетов = Новый Структура("РасчетныйДокумент, Подразделение",
			СтрокаТаблицы.РасчетныйДокумент, СтрокаТаблицы.Подразделение);
		
		СтрокиОстатковПоУСН = ТаблицаОстатковПоСчетамУСН.НайтиСтроки(ОтборПрочихРасчетов);
		Если СтрокиОстатковПоУСН.Количество() = 1 Тогда
			СтрокаОстатковПоУСН = СтрокиОстатковПоУСН[0];
			Если СтрокаТаблицы.СуммаОстаток > СтрокаОстатковПоУСН.СуммаРуб Тогда
				// Уменьшим остаток по прочим расчетам.
				СтрокаТаблицы.СуммаОстаток = СтрокаТаблицы.СуммаОстаток - СтрокаОстатковПоУСН.СуммаРуб;
				
				// Добавим новую строку со счетом УСН.
				НоваяСтрока = Новый Структура(ИменаКолонок);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.СчетУСН       = СтрокаОстатковПоУСН.Счет;
				НоваяСтрока.СуммаОстаток  = СтрокаОстатковПоУСН.СуммаРуб;
				СтрокиКДобавлению.Добавить(НоваяСтрока);
			Иначе
				// Если нашлась только строка одна, то заполним счет и подразделение в текущей строке
				СтрокаТаблицы.СчетУСН       = СтрокаОстатковПоУСН.Счет;
			КонецЕсли;
		ИначеЕсли СтрокиОстатковПоУСН.Количество() > 1 Тогда
			// Если строк несколько, то будем клонировать строки.
			РаспределяемаяСумма = СтрокаТаблицы.СуммаОстаток;
			Для Каждого СтрокаОстатковПоУСН Из СтрокиОстатковПоУСН Цикл
				
				Если РаспределяемаяСумма = 0 Тогда // Распределили всю сумму.
					Прервать;
				КонецЕсли;
				
				НоваяСтрока = Новый Структура(ИменаКолонок);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.СчетУСН       = СтрокаОстатковПоУСН.Счет;
				НоваяСтрока.СуммаОстаток  = Мин(СтрокаОстатковПоУСН.СуммаРуб, РаспределяемаяСумма);
				РаспределяемаяСумма       = РаспределяемаяСумма - НоваяСтрока.СуммаОстаток;
				
				СтрокиКДобавлению.Добавить(НоваяСтрока);
			КонецЦикла;
			Если РаспределяемаяСумма = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы); // Удалим исходную строку, потому что разбили ее на несколько строк.
			Иначе
				СтрокаТаблицы.СуммаОстаток = РаспределяемаяСумма;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УдалитьСтрокиИзТаблицы(ТаблицаПрочихРасчетов, СтрокиКУдалению);
	
	// Добавим новые строки к таблице.
	Для Каждого Строка Из СтрокиКДобавлению Цикл
		НоваяСтрокаТаблицы = ТаблицаПрочихРасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, Строка);
	КонецЦикла;
	
	// Заполним патенты в таблице
	Если ПрименяетсяПатент Тогда
		СтрокиПоПатенту = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТаблицаПрочихРасчетов Цикл
			Если СчетаУСН.Патент.Найти(СтрокаТаблицы.СчетУСН) <> Неопределено Тогда
				СтрокиПоПатенту.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		НалоговыйУчетУСН.ЗаполнитьПатентыВТаблицеРасчетов(СтрокиПоПатенту, "РасчетныйДокумент", "Патент");
	КонецЕсли;
	
	ТаблицаПрочихРасчетов.Сортировать("ДатаПервичногоДокумента, РасчетныйДокумент, СчетУчета", Новый СравнениеЗначений);
	
КонецПроцедуры

#Область ПереквалификацияИДвижения

Функция ПодготовитьТаблицуВозвратыПоВзаиморасчетамУСН(Взаиморасчеты)

	// Подготовка таблицы ТаблицаВозвратыПоВзаиморасчетамУСН
	СписокКолонок = ""
	+ "СчетРасчетов,"					// <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
	+ "ВалютаВзаиморасчетов,"			// <СправочникСсылка.Валюты>
	+ "Подразделение,"					// <СправочникСсылка.ПодразделенияОрганизации> 
	+ "Контрагент,"						// <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"				// <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"				// <ДокументСсылка>
	+ "СуммаВзаиморасчетов,"			// <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаРуб,"						// <Число,15,2>
	+ "РасчетыВУсловныхЕдиницах,"		// <Булево>
	+ "КорСчет,"						// <ПланСчетовСсылка.Хозрасчетный>
	+ "КорПодразделение,"				// <СправочникСсылка.ПодразделенияОрганизации>
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "Содержание"						// <Строка> - содержание проводки
	;
	
	Возврат Взаиморасчеты.СкопироватьКолонки(СписокКолонок);
	
КонецФункции

Функция НовыйТаблицаКУДиРПатент()
	
	ТаблицаКУДиРПатент = Новый ТаблицаЗначений;
	ТаблицаКУДиРПатент.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаКУДиРПатент.Колонки.Добавить("Патент", Новый ОписаниеТипов("СправочникСсылка.Патенты"));
	ТаблицаКУДиРПатент.Колонки.Добавить("Графа4", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаКУДиРПатент.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаКУДиРПатент.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Возврат ТаблицаКУДиРПатент;
	
КонецФункции

Функция НовыйСтруктураКУДиР()
	
	СтруктураКУДиР = Новый Структура;
	СтруктураКУДиР.Вставить("ЧастиСодержания", Новый Структура("Событие, Пояснение"));
	СтруктураКУДиР.Вставить("Графа5", 0);
	СтруктураКУДиР.Вставить("ДоходЕНВД", 0);
	СтруктураКУДиР.Вставить("ДоходКомитент", 0);
	СтруктураКУДиР.Вставить("ДоходТорговыйСбор", 0);
	СтруктураКУДиР.Вставить("ДоходПатент", 0);
	
	Возврат СтруктураКУДиР;
	
КонецФункции

Процедура ПодготовитьКУДиРПатент(КУДиРПатент)
	
	КУДиРПатент.Свернуть("Патент,Содержание,ДоговорКонтрагента,Контрагент", "Графа4");
	
	Для Каждого СтрокаКУДиР Из КУДиРПатент Цикл
		Если СтрокаКУДиР.Графа4 < 0 Тогда
			СтрокаКУДиР.Содержание = СтрШаблон(
				НСтр("ru='Исключена из доходов по деятельности на патенте %1 сумма, удержанная банком-эквайером в счет возвратов покупателям'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				СтрокаКУДиР.Патент);
		ИначеЕсли СтрокаКУДиР.Графа4 > 0 Тогда
			СтрокаКУДиР.Содержание = СтрШаблон(
				НСтр("ru='Отнесена к доходам по деятельности на патенте %1 сумма, удержанная банком-эквайером в счет возвратов покупателям'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				СтрокаКУДиР.Патент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьСодержаниеПереквалификацииКУДиР(КУДиР)
	
	ШаблонСообщения = "";
	
	ОписаниеДоходовПоВидам = Новый Структура;
	ОписаниеДоходовПоВидам.Вставить("Графа5",
		НСтр("ru='доходы УСН'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ОписаниеДоходовПоВидам.Вставить("ДоходЕНВД",
		НСтр("ru='доходы ЕНВД'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ОписаниеДоходовПоВидам.Вставить("ДоходТорговыйСбор",
		НСтр("ru='доходы по деятельности на торговом сборе'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ОписаниеДоходовПоВидам.Вставить("ДоходПатент",
		НСтр("ru='доходы по деятельности на патенте'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ОписаниеДоходовПоВидам.Вставить("ДоходКомитент",
		НСтр("ru='выручка комитента'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	// Исключаем сумму возврата из доходов.
	ОписанияДобавленныхСумм = Новый Массив;
	ОписанияИсключенныхСумм = Новый Массив;
	
	Для Каждого ОписаниеДохода Из ОписаниеДоходовПоВидам Цикл
		Если КУДиР[ОписаниеДохода.Ключ] > 0 Тогда
			Сумма = Формат(КУДиР[ОписаниеДохода.Ключ],"ЧЦ=15; ЧДЦ=2");
			ШаблонСообщения = СтрШаблон(НСтр("ru='%1 - %2 руб'"), ОписаниеДохода.Значение, Сумма);
			ОписанияДобавленныхСумм.Добавить(ШаблонСообщения);
		ИначеЕсли КУДиР[ОписаниеДохода.Ключ] < 0 Тогда
			Сумма = Формат(-КУДиР[ОписаниеДохода.Ключ],"ЧЦ=15; ЧДЦ=2");
			ШаблонСообщения = СтрШаблон(НСтр("ru='%1 - %2 руб'"), ОписаниеДохода.Значение, Сумма);
			ОписанияИсключенныхСумм.Добавить(ШаблонСообщения);
		КонецЕсли;
	КонецЦикла;
	
	Содержание = "";
	Если ОписанияДобавленныхСумм.Количество() > 0 Тогда
		Содержание = Содержание +
			СтрШаблон(НСтр("ru='Выручка, удержанная банком-эквайером в счет возвратов покупателям, отражена в доходах, в том числе %1.'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			СтрСоединить(ОписанияДобавленныхСумм, ", "));
	КонецЕсли;
	Если ОписанияИсключенныхСумм.Количество() > 0 Тогда
		Содержание = Содержание + ?(ПустаяСтрока(Содержание), "", " ") +
			СтрШаблон(НСтр("ru='Суммы возвратов покупателям исключены из доходов, в том числе %1.'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			СтрСоединить(ОписанияИсключенныхСумм, ", "));
	КонецЕсли;
	
	КУДиР.ЧастиСодержания.Событие = Содержание;
	
КонецПроцедуры

Процедура ДобавитьДанныеВПереквалификациюПоПатенту(КУДиРПатент, Строка, Сумма)
	
	Если НЕ ЗначениеЗаполнено(Строка.Патент) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = КУДиРПатент.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	НоваяСтрока.Графа4 = Сумма;
	
КонецПроцедуры

Процедура ДобавитьДанныеВПереквалификациюДоходов(КУДиР, СтрокаПрочихРасчетов, Сумма, СчетаУСН)
	
	Графа = "";
	
	Если НЕ ЗначениеЗаполнено(СтрокаПрочихРасчетов.СчетУСН) Тогда
		Графа = "Графа5";
	ИначеЕсли СчетаУСН.ЕНВД.Найти(СтрокаПрочихРасчетов.СчетУСН) <> Неопределено Тогда
		Графа = "ДоходЕНВД";
	ИначеЕсли СчетаУСН.ТорговыйСбор.Найти(СтрокаПрочихРасчетов.СчетУСН) <> Неопределено Тогда
		Графа = "ДоходТорговыйСбор";
	ИначеЕсли СчетаУСН.Комитент.Найти(СтрокаПрочихРасчетов.СчетУСН) <> Неопределено Тогда
		Графа = "ДоходКомитент";
	ИначеЕсли СчетаУСН.Патент.Найти(СтрокаПрочихРасчетов.СчетУСН) <> Неопределено Тогда
		Графа = "ДоходПатент";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Графа) Тогда
		КУДиР[Графа] = КУДиР[Графа] + Сумма;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ДанныеРасшифровкиПлатежа(Объект, ФормаРасшифровкаПлатежа)

	Если ФормаРасшифровкаПлатежа <> Неопределено Тогда
		РасшифровкаПлатежа  = ФормаРасшифровкаПлатежа.РасшифровкаПлатежа;
	Иначе
		РасшифровкаПлатежа  = Объект.РасшифровкаПлатежа;
	КонецЕсли;

	Возврат РасшифровкаПлатежа;

КонецФункции

Функция ДанныеОтображаютсяВТаблицеНаФорме(Объект, ФормаРасшифровкаПлатежа)

	РасшифровкаПлатежа = ДанныеРасшифровкиПлатежа(Объект, ФормаРасшифровкаПлатежа);

	Если ФормаРасшифровкаПлатежа <> Неопределено Тогда
		Результат = Истина;
	Иначе
		// Если в табличной части 1 строка, то сообщение о проверках ее полей
		// выводятся как для полей ввода на основной форме документа.
		Результат = Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить()
			ИЛИ РасшифровкаПлатежа.Количество() > 1;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПодготовитьПараметрыТаблицРасчетовДляУСН_Взаиморасчеты(ТаблицаВзаиморасчетов)
	
	СписокОбязательныхКолонок = ""
	+ "СчетРасчетов,"					// <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
	+ "ВалютаВзаиморасчетов,"			// <СправочникСсылка.Валюты>
	+ "Подразделение,"					// <СправочникСсылка.ПодразделенияОрганизации> 
	+ "Контрагент,"						// <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"				// <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"				// <ДокументСсылка>
	+ "ДатаДокументаРасчетов,"			// <Дата>
	+ "ОстатокВзаиморасчетов,"			// <Число,15,2> - сумма остатка аванса в валюте взаиморасчетов, приходящаяся на строку
	+ "СуммаВзаиморасчетов,"			// <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаРуб,"						// <Число,15,2> - сумма в рублях (для валютных расчетов - по курсу на дату документа)
	+ "СуммаНУ,"						// <Число,15,2> - сумма в проводку по НУ
	+ "РасчетыВУсловныхЕдиницах,"		// <Булево> - признак того, что валютный договор оплачивается рублями
	+ "Разница,"						// <Число,15,2> - сумма суммовой разницы если договор в у.е.
	+ "СтавкаНДС,"						// <ПеречислениеСсылка.СтавкиНДС> 
	+ "КорСчет,"						// <ПланСчетовСсылка.Хозрасчетный>
	+ "КорПодразделение,"				// <СправочникСсылка.ПодразделенияОрганизации>
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "СуммаВзаиморасчетовЕНВД,"		// <Число,15,2> - сумма в валюте расчетов по договору по деятельности ЕНВД
	+ "СуммаБУ_ЕНВД,"					// <Число,15,2> - сумма в рублях по деятельности ЕНВД
	+ "СуммаВзаиморасчетовПатент,"		// <Число,15,2> - сумма в валюте расчетов по договору по деятельности на патенте
	+ "СуммаБУ_Патент,"					// <Число,15,2> - сумма в рублях по деятельности на патенте
	+ "СуммаВзаиморасчетовТорговыйСбор,"// <Число,15,2> - сумма в валюте расчетов по договору по деятельности на торговом сборе
	+ "СуммаБУ_ТорговыйСбор,"			// <Число,15,2> - сумма в рублях по деятельности на торговом сборе
	+ "СуммаВзаиморасчетовКомитента,"	// <Число,15,2> - сумма в валюте расчетов по договору при реализации товаров и услуг комитентов
	+ "СуммаБУ_Комитента,"				// <Число,15,2> - сумма в рублях при реализации товаров и услуг комитентов
	+ "Содержание"						// <Строка> - содержание проводки
	;
	
	Возврат ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВзаиморасчетов, СписокОбязательныхКолонок);
	
КонецФункции

Функция ПодготовитьПараметрыТаблицРасчетовДляУСН(ТаблицаРеквизиты, ТаблицаВзаиморасчетов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                           // <ДокументСсылка> - документ-регистратор движений
	+ "Период,"                                // <Дата> - период движений - дата документа
	+ "Организация,"                           // <СправочникСсылка.Организация> - организация документа
	+ "ВидОперации,"                           // <ПеречислениеСсылка.ВидыОперацийПоступленияДенежныхСредств> - вид операции документа
	+ "УчитыватьЗадолженностьУСН,"             // <Булево> - признак того, что нужно учитывать задолженность УСН
	+ "УчитыватьЗадолженностьУСНПатент,"       // <Булево> - признак того, что нужно учитывать задолженность по деятельности на патенте
	+ "ПлательщикНДФЛ,"                        // <Булево> - если Истина, то организация является индивидуальным предпринимателем на ОСН
	+ "СчетБанк,"                              // <ПланСчетовСсылка.Хозрасчетный> - счет учета денежных средств
	+ "СчетУчетаРасчетовСКонтрагентом";        // <ПланСчетовСсылка.Хозрасчетный> - счет расчетов с контрагентом по операциям эквайринга
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты	
	
	Параметры.Вставить("Взаиморасчеты", ПодготовитьПараметрыТаблицРасчетовДляУСН_Взаиморасчеты(ТаблицаВзаиморасчетов));
		
	Возврат Параметры;
	
КонецФункции

Функция ТекстЗапросаОстаткиПрочихРасчетов()
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПрочиеРасчетыОстатки.РасчетныйДокумент) = ТИП(Документ.ОтчетОРозничныхПродажах)
	|			ТОГДА ВЫРАЗИТЬ(ПрочиеРасчетыОстатки.РасчетныйДокумент КАК Документ.ОтчетОРозничныхПродажах).ПодразделениеОрганизации
	|		КОГДА ТИПЗНАЧЕНИЯ(ПрочиеРасчетыОстатки.РасчетныйДокумент) = ТИП(Документ.ОплатаПлатежнойКартой)
	|			ТОГДА ВЫРАЗИТЬ(ПрочиеРасчетыОстатки.РасчетныйДокумент КАК Документ.ОплатаПлатежнойКартой).ПодразделениеОрганизации
	|		КОГДА ТИПЗНАЧЕНИЯ(ПрочиеРасчетыОстатки.РасчетныйДокумент) = ТИП(Документ.РеализацияТоваровУслуг)
	|			ТОГДА ВЫРАЗИТЬ(ПрочиеРасчетыОстатки.РасчетныйДокумент КАК Документ.РеализацияТоваровУслуг).ПодразделениеОрганизации
	|		ИНАЧЕ &ПустоеПодразделение
	|	КОНЕЦ КАК Подразделение,
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ ВТОстаткиПрочихРасчетов
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И СчетУчета В (&СчетаРасчетов)
	|				И Контрагент = &Контрагент
	|				И ДоговорКонтрагента В (&ДоговораКонтрагента)) КАК ПрочиеРасчетыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОстаткиПрочихРасчетов.Организация,
	|	ВТОстаткиПрочихРасчетов.Подразделение,
	|	ВТОстаткиПрочихРасчетов.СчетУчета,
	|	ВТОстаткиПрочихРасчетов.Контрагент,
	|	ВТОстаткиПрочихРасчетов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПервичногоДокумента,
	|	ВТОстаткиПрочихРасчетов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТОстаткиПрочихРасчетов.СуммаОстаток КАК СуммаОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОплатаПлатежнойКартой.ВидОперации, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПриемРозничнойВыручкиНТТ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОплатаПлатежнойКартой.ВидОперации, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат
	|ПОМЕСТИТЬ ВТОбщийСрезПрочихРасчетов
	|ИЗ
	|	ВТОстаткиПрочихРасчетов КАК ВТОстаткиПрочихРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ВТОстаткиПрочихРасчетов.Организация = ДанныеПервичныхДокументов.Организация
	|			И ВТОстаткиПрочихРасчетов.РасчетныйДокумент = ДанныеПервичныхДокументов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
	|		ПО ВТОстаткиПрочихРасчетов.Организация = ОплатаПлатежнойКартой.Организация
	|			И ВТОстаткиПрочихРасчетов.РасчетныйДокумент = ОплатаПлатежнойКартой.Ссылка
	|ГДЕ
	|	&УсловиеПоПодразделению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОбщийСрезПрочихРасчетов.Организация,
	|	ВТОбщийСрезПрочихРасчетов.Подразделение,
	|	ВТОбщийСрезПрочихРасчетов.СчетУчета,
	|	ВТОбщийСрезПрочихРасчетов.Контрагент,
	|	ВТОбщийСрезПрочихРасчетов.РасчетныйДокумент,
	|	ВТОбщийСрезПрочихРасчетов.ДатаПервичногоДокумента,
	|	ВТОбщийСрезПрочихРасчетов.ДоговорКонтрагента,
	|	ВТОбщийСрезПрочихРасчетов.СуммаОстаток,
	|	ВТОбщийСрезПрочихРасчетов.ЭтоПриемРозничнойВыручкиНТТ
	|ИЗ
	|	ВТОбщийСрезПрочихРасчетов КАК ВТОбщийСрезПрочихРасчетов
	|ГДЕ
	|	ВТОбщийСрезПрочихРасчетов.ЭтоВозврат = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТОбщийСрезПрочихРасчетов.ДатаПервичногоДокумента,
	|	ВТОбщийСрезПрочихРасчетов.РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОбщийСрезПрочихРасчетов.Организация,
	|	ВТОбщийСрезПрочихРасчетов.Подразделение,
	|	ВТОбщийСрезПрочихРасчетов.СчетУчета,
	|	ВТОбщийСрезПрочихРасчетов.Контрагент,
	|	ВТОбщийСрезПрочихРасчетов.РасчетныйДокумент,
	|	ВТОбщийСрезПрочихРасчетов.ДатаПервичногоДокумента,
	|	ВТОбщийСрезПрочихРасчетов.ДоговорКонтрагента,
	|	-ВТОбщийСрезПрочихРасчетов.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	ВТОбщийСрезПрочихРасчетов КАК ВТОбщийСрезПрочихРасчетов
	|ГДЕ
	|	ВТОбщийСрезПрочихРасчетов.ЭтоВозврат = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТОбщийСрезПрочихРасчетов.ДатаПервичногоДокумента,
	|	ВТОбщийСрезПрочихРасчетов.РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Контрагент,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка
	|ПОМЕСТИТЬ ВТОплатаПлатежнойКартойОплатаПокупателя
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаПлатежнойКартойРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОстаткиПрочихРасчетов КАК ВТОстаткиПрочихРасчетов
	|		ПО ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Организация = ВТОстаткиПрочихРасчетов.Организация
	|			И ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка = ВТОстаткиПрочихРасчетов.РасчетныйДокумент
	|ГДЕ
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Ссылка
	|ПОМЕСТИТЬ ВТРеализацияТоваровУслуг
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОстаткиПрочихРасчетов КАК ВТОстаткиПрочихРасчетов
	|		ПО РеализацияТоваровУслуг.Организация = ВТОстаткиПрочихРасчетов.Организация
	|			И РеализацияТоваровУслуг.Ссылка = ВТОстаткиПрочихРасчетов.РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТОстаткиПрочихРасчетов.Контрагент КАК Контрагент,
	|	ВТОстаткиПрочихРасчетов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТОстаткиПрочихРасчетов.РасчетныйДокумент КАК РасчетныйДокумент
	|ПОМЕСТИТЬ ВТ_АналитикаОстатков
	|ИЗ
	|	ВТОстаткиПрочихРасчетов КАК ВТОстаткиПрочихРасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОплатаПлатежнойКартойОплатаПокупателя.Контрагент,
	|	ВТОплатаПлатежнойКартойОплатаПокупателя.ДоговорКонтрагента,
	|	ВТОплатаПлатежнойКартойОплатаПокупателя.Ссылка
	|ИЗ
	|	ВТОплатаПлатежнойКартойОплатаПокупателя КАК ВТОплатаПлатежнойКартойОплатаПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТРеализацияТоваровУслуг.Контрагент,
	|	ВТРеализацияТоваровУслуг.ДоговорКонтрагента,
	|	ВТРеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	ВТРеализацияТоваровУслуг КАК ВТРеализацияТоваровУслуг
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АналитикаОстатков.Контрагент,
	|	ВТ_АналитикаОстатков.ДоговорКонтрагента,
	|	ВТ_АналитикаОстатков.РасчетныйДокумент
	|ИЗ
	|	ВТ_АналитикаОстатков КАК ВТ_АналитикаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОстаткиПрочихРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОплатаПлатежнойКартойОплатаПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРеализацияТоваровУслуг";
	
		
	Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПодразделению",
			"ВТОстаткиПрочихРасчетов.Подразделение В(&Подразделения)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПодразделению", "ИСТИНА");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстаткиПоСчетамУСН()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
	|	ХозрасчетныйОстатки.Субконто3 КАК РасчетныйДокумент,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаРуб,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТВыборкаПосчетамУСН
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатка,
	|			Счет В (&СчетаУСН),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И &УсловиеПоПодразделению
	|				И (Субконто1, Субконто2, Субконто3) В
	|					(ВЫБРАТЬ
	|						АналитикаОстатков.Контрагент,
	|						АналитикаОстатков.ДоговорКонтрагента,
	|						АналитикаОстатков.РасчетныйДокумент
	|					ИЗ
	|						ВТ_АналитикаОстатков КАК АналитикаОстатков)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыборкаПосчетамУСН.Контрагент,
	|	ВТВыборкаПосчетамУСН.Договор,
	|	ВТВыборкаПосчетамУСН.РасчетныйДокумент,
	|	ДанныеПервичныхДокументов.ДатаРегистратора КАК РасчетныйДокументДата,
	|	ВТВыборкаПосчетамУСН.Счет,
	|	ВТВыборкаПосчетамУСН.ВалютаВзаиморасчетов,
	|	ВТВыборкаПосчетамУСН.Подразделение,
	|	СУММА(ВТВыборкаПосчетамУСН.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ВТВыборкаПосчетамУСН.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОплатаПлатежнойКартой.ВидОперации, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат
	|ПОМЕСТИТЬ ВТ_ОбщиеДанные
	|ИЗ
	|	ВТВыборкаПосчетамУСН КАК ВТВыборкаПосчетамУСН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ВТВыборкаПосчетамУСН.РасчетныйДокумент = ДанныеПервичныхДокументов.Документ
	|			И (ДанныеПервичныхДокументов.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
	|		ПО ВТВыборкаПосчетамУСН.РасчетныйДокумент = ОплатаПлатежнойКартой.Ссылка
	|			И (ОплатаПлатежнойКартой.Организация = &Организация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВыборкаПосчетамУСН.Контрагент,
	|	ВТВыборкаПосчетамУСН.Договор,
	|	ВТВыборкаПосчетамУСН.РасчетныйДокумент,
	|	ВТВыборкаПосчетамУСН.Счет,
	|	ВТВыборкаПосчетамУСН.ВалютаВзаиморасчетов,
	|	ВТВыборкаПосчетамУСН.Подразделение,
	|	ДанныеПервичныхДокументов.ДатаРегистратора,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОплатаПлатежнойКартой.ВидОперации, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОбщиеДанные.Контрагент,
	|	ВТ_ОбщиеДанные.Договор,
	|	ВТ_ОбщиеДанные.РасчетныйДокумент,
	|	ВТ_ОбщиеДанные.РасчетныйДокументДата,
	|	ВТ_ОбщиеДанные.Счет,
	|	ВТ_ОбщиеДанные.ВалютаВзаиморасчетов,
	|	ВТ_ОбщиеДанные.Подразделение,
	|	ВТ_ОбщиеДанные.СуммаРуб,
	|	ВТ_ОбщиеДанные.СуммаВзаиморасчетов
	|ИЗ
	|	ВТ_ОбщиеДанные КАК ВТ_ОбщиеДанные
	|ГДЕ
	|	ВТ_ОбщиеДанные.ЭтоВозврат = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОбщиеДанные.Контрагент,
	|	ВТ_ОбщиеДанные.Договор,
	|	ВТ_ОбщиеДанные.РасчетныйДокумент,
	|	ВТ_ОбщиеДанные.РасчетныйДокументДата,
	|	ВТ_ОбщиеДанные.Счет,
	|	ВТ_ОбщиеДанные.ВалютаВзаиморасчетов,
	|	ВТ_ОбщиеДанные.Подразделение,
	|	-ВТ_ОбщиеДанные.СуммаРуб КАК СуммаРуб,
	|	-ВТ_ОбщиеДанные.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	|ИЗ
	|	ВТ_ОбщиеДанные КАК ВТ_ОбщиеДанные
	|ГДЕ
	|	ВТ_ОбщиеДанные.ЭтоВозврат = ИСТИНА";
		
	Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПодразделению",
			"Подразделение В(&Подразделения)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПодразделению", "ИСТИНА");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЭтоРозничнаяВыручкаНТТВПродажныхЦенахНаПатенте(Реквизиты, СтрокаПрочихРасчетов)

	Если Реквизиты.УчитыватьЗадолженностьУСНПатент И СтрокаПрочихРасчетов.ЭтоПриемРозничнойВыручкиНТТ Тогда
		
		СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(
			Реквизиты.Организация, СтрокаПрочихРасчетов.ДатаПервичногоДокумента);
		
		Если СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Дата) Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;

	Если (Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам)
		И НЕ Реквизиты.БезЗакрывающихДокументов Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.ВидДоговора КАК ВидДоговора,
		|	&Дата КАК Дата
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа";
	Иначе
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

#КонецОбласти

#КонецЕсли