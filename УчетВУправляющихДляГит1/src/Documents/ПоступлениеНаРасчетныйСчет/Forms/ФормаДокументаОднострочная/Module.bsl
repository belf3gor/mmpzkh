
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Квартплата+
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.КВП_РегистрацияОплаты")
	   И НЕ Параметры.Основание.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеСПлатежнойКарты") Тогда
		Отказ = Истина;
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Для вида операции ""%1"" не предусмотрен ввод на основании документа ""Поступление на расчетный счет"".'"),
			Параметры.Основание.ВидОперации);
		Сообщить(ТекстОшибки);
	ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.КВП_РегистрацияОплаты")
			  И НЕ Параметры.Основание = НЕОПРЕДЕЛЕНО Тогда
		Если НЕ Параметры.Основание.ПолучитьОбъект().ЕстьСформированныеДокументыОплатИПроведен(Параметры.Основание) Тогда
			Отказ = Истина;
			Сообщить("Для того, чтобы продолжить создайте документы отражения оплаты и перепроведите текущий документ.");
		КонецЕсли;
	КонецЕсли;
	// Квартплата-
	
	ПоступлениеНаРасчетныйСчетФормы.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	Если ПрименениеУСН Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_УСН");
	КонецЕсли;
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ПоступлениеНаРасчетныйСчет",
		"ФормаДокументаОднострочная",
		НСтр("ru='Новости: Поступление на расчетный счет'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПоступлениеНаРасчетныйСчетФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПоступлениеНаРасчетныйСчетФормы.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПоступлениеНаРасчетныйСчетФормы.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация Тогда
		ОбработкаОповещенияИзмененБанковскийСчет(ИмяСобытия, Параметр, Источник);
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		Если Источник = Объект.Организация Тогда
			
			ПоступлениеНаРасчетныйСчетФормыВызовСервера.ОбработатьИзмененияВОрганизации(
				Объект.Организация,
				ИспользоватьНесколькоБанковскихСчетовОрганизации,
				ОсновнойБанковскийСчетОрганизацииЗаполнен,
				Объект.СчетОрганизации);
				
			Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость =
				ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(ЭтотОбъект, Объект.Организация);
				
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = ЧекиНПДКлиентСервер.ИмяСобытияДляОповещенияОбИзмененииЧека()
		И Параметр.ДокументОснование = Объект.Ссылка Тогда
		
		ЧекиНПДКлиент.ДобавитьПричинуАннулированияЧекаВКомментарий(Параметр, ЭтотОбъект);
		УстановитьСведенияОЧекеНПД(Параметр);
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ПоступлениеНаРасчетныйСчет.Форма.ФормаРасшифровкаПлатежа" Тогда
		ОбработкаРасшифровкиПлатежа(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ВидОперацииАвтоПодбор(Объект.ВидОперации, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПриОплатеПриИзменении(Элемент)
	
	Объект.БезЗакрывающихДокументов = РасчетыПриОплате = "БезДокументов";
	ВидОперацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// При поступлении от продажи валюты также меняется курс ЦБ на дату реализации.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = Объект.ВидОперации
			= ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты");
	КонецЕсли;
	
	// Если есть договоры в у.е., то необходимо получение курсов валют.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ЕстьРасчетыВУсловныхЕдиницах;
	КонецЕсли;
	
	// Проверка на изменение сроков действия патентов.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ПрименяетсяУСНПатент;
	КонецЕсли;
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры,
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	Иначе
		Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	СчетОрганизацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПодразделениеОрганизацииИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетБанкПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетБанк) Тогда
		СчетБанкПриИзмененииСервер(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	СуммаДокументаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРазбитьПлатежНажатие(Элемент)
	
	ОткрытьФормуТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПрочиеПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СчетУчетаПрочиеПриИзмененииКлиент(ЭтотОбъект, Элемент);
	
	Если ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.СформироватьПрочееТекстДоходыУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПрочие1ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтПрочиеПриИзменении(ЭтотОбъект, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПрочие2ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтПрочиеПриИзменении(ЭтотОбъект, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПрочие3ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтПрочиеПриИзменении(ЭтотОбъект, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПрочие1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтПрочиеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПрочие2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтПрочиеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПрочие3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтПрочиеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаУслугиБанкаПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СчетУчетаУслугиБанкаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтУслугиБанка1ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтУслугиБанкаПриИзменении(ЭтотОбъект, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтУслугиБанка2ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтУслугиБанкаПриИзменении(ЭтотОбъект, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтУслугиБанка3ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтУслугиБанкаПриИзменении(ЭтотОбъект, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтУслугиБанка1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтУслугиБанкаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтУслугиБанка2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтУслугиБанкаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтУслугиБанка3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтУслугиБанкаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьРазницуВКурсеВСоставеОперационныхРасходовПокупкаВалютыПриИзменении(Элемент)
	
	ОтражатьРазницуВКурсеВСоставеОперационныхРасходовПокупкаВалютыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтражатьРазницуВКурсеВСоставеОперационныхРасходовПокупкаВалютыПриИзмененииНаСервере()
	
	ПоступлениеНаРасчетныйСчетФормы.ОтражатьРазницуВКурсеВСоставеОперационныхРасходовПокупкаВалютыПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееДоходыУСНПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.СформироватьПрочееТекстДоходыУСН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПрочиеПриИзменении(Элемент)
	
	Если ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Ложь, Истина);
	КонецЕсли;
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	Если ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Ложь, Истина);
	КонецЕсли;
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТаблицы()
	
	Отказ = Ложь;
	
	// Проверим, чтобы ключевые поля документы были заполнены, чтобы в дополнительной форме отборы работали корректно.
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Дата", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Плательщик'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		
		Если ИспользоватьНесколькоБанковскихСчетовОрганизации Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Банковский счет'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СчетОрганизации", "Объект", Отказ);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Реквизиты банковского счета не заполнены'"), ,"РеквизитыОрганизацииСсылка", ,Отказ);
		КонецЕсли;
	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() < 2 Тогда
		// Актуальные данные содержатся в реквизитах формы,
		// перенесем их в табличную часть.
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(ЭтотОбъект);
	КонецЕсли;
	
	Шапка = Новый Структура("Ссылка, Дата, ВидОперации, Организация, СчетОрганизации, ВалютаДокумента, СчетБанк,
		|Контрагент, СчетКонтрагента, ВалютаДокумента, НазначениеПлатежа, КурсНаДатуПриобретенияРеализацииВалюты,
		|СуммаДокумента, СуммаУслуг, БезЗакрывающихДокументов,
		|СчетУчетаРасчетовСКонтрагентом, Графа4_УСН, Графа5_УСН");
	ЗаполнитьЗначенияСвойств(Шапка, Объект);
	РеквизитыФормы = "СвойстваПлатежа, ПорядокОтраженияАвансаСоответствиеЗначений,
		|ПрименениеУСН, ПрименениеУСНДоходы, ПрименяетсяОсобыйПорядокНалогообложения, ПрименяетсяУСНПатент,
		|ОплатаВВалюте, КурсДокумента, КратностьДокумента";
	ПараметрыФормы = Новый Структура(РеквизитыФормы);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ЭтотОбъект, РеквизитыФормы);
	
	ПараметрыФормы.Вставить("Шапка", Шапка);
	АдресХранилищаРасшифровкаПлатежа = ПоместитьРасшифровкаПлатежаВоВременноеХранилищеНаСервере();
	ПараметрыФормы.Вставить("АдресХранилищаРасшифровкаПлатежа", АдресХранилищаРасшифровкаПлатежа);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ",           Параметры.Ключ);
	СтруктураПараметров.Вставить("ПараметрыФормы", ПараметрыФормы);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОткрытьФорму("Документ.ПоступлениеНаРасчетныйСчет.Форма.ФормаРасшифровкаПлатежа", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	УдалитьПредупреждениеПриЗагрузкеВыпискиИСпрятатьБаннер();
	ПоступлениеНаРасчетныйСчетФормыКлиент.ОповеститьОбИзмененииПредупрежденияПриЗагрузкеВыписки(Объект.Ссылка);
	
КонецПроцедуры

#Область РеквизитыНПД

&НаКлиенте
Процедура ДекорацияЧекНПДНажатие(Элемент)
	
	ЧекиНПДКлиент.ОткрытьФормуЧекаНПД(ЭтотОбъект, Объект.Ссылка, ПараметрыОтправкиЧека(Объект.Контрагент));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаНПДПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СуммаДокумента)
		Или Не ЗначениеЗаполнено(Объект.УслугаНПД) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СуммаДокумента = ЦенаУслугиНПД(Объект.УслугаНПД, Объект.Организация, Объект.Дата);
	СуммаДокументаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаНПДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаНПДАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура УслугаНПДОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийОднострочныхЭлементовРасшифровкиПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаДоговорКонтрагентаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ИнициализироватьСвойстваПлатежа(ЭтотОбъект); // Только создаем структуру, если она еще не создана.
	
	Если РасшифровкаПлатежаДоговорКонтрагента = СвойстваПлатежа.ДоговорКонтрагента Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорКонтрагентаПриИзмененииНаСервере();
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаДоговорКонтрагентаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаДоговорКонтрагентаАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СтавкаНДСПриИзменении(ЭтотОбъект, Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСпособПогашенияЗадолженностиПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СпособПогашенияЗадолженностиПриИзменении(ЭтотОбъект, Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СделкаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомПриИзменении(ЭтотОбъект, Элемент);
	Объект.Графа5_УСН = РасшифровкаПлатежаДоходыУСН;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПолеОтражениеАвансаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ПрименяетсяУСНПатент Тогда
		УчетПСНКлиент.ОткрытьФормуВыбораНовогоПатента(Элемент, ВыбранноеЗначение, Объект.Организация, Объект.Дата);
		УчетПСНКлиент.ОбработатьВыборНовогоПатентаИзКоллекции(Элемент.СписокВыбора,
			ВыбранноеЗначение, ВыбранноеЗначение, ПорядокОтраженияАвансаСоответствиеЗначений);
	КонецЕсли;
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПолеОтражениеАвансаОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПолеОтражениеАвансаПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПолеОтражениеАвансаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыУСНПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ОбновитьИтогиУСН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетУчетаИнкассацияПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ИнкассацияСчетУчетаРасчетовСКонтрагентомПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСубконтоКт1ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтИнкассацияПриИзменении(ЭтотОбъект, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСубконтоКт2ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтИнкассацияПриИзменении(ЭтотОбъект, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСубконтоКт3ПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтИнкассацияПриИзменении(ЭтотОбъект, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтИнкассацияНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтИнкассацияНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СубконтоКтИнкассацияНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаИнкассацияСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ИнкассацияСтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПродажаВалютыСуммаВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПродажаВалютыКурсВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПродажаВалютыКурсВзаиморасчетовНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПродажаВалютыДоговорКонтрагентаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыДоговорКонтрагентаПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПродажаВалютыДоговорКонтрагентаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПродажаВалютыСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПродажаВалютыСтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПокупкаВалютыСуммаВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПокупкаВалютыКурсВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПокупкаВалютыКурсВзаиморасчетовНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагентаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагентаПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПокупкаВалютыДоговорКонтрагентаПриИзменении(ЭтотОбъект, Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПокупкаВалютыСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПокупкаВалютыСтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПлатежныеКартыДоговорКонтрагентаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыДоговорКонтрагентаПриИзменении(Элемент)
	
	ПлатежныеКартыДоговорКонтрагентаПриИзмененииСервер();
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПлатежныеКартыДоговорКонтрагентаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПлатежныеКартыСтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыСуммаУслугПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПлатежныеКартыСуммаУслугПриИзменении(ЭтотОбъект, Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОтражениеАвансаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПрименяетсяУСНПатент Тогда
		УчетПСНКлиент.ДобавитьВСписокНовыйПатент(Элемент.СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПолеОтражениеДоходаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПрименяетсяУСНПатент Тогда
		УчетПСНКлиент.ДобавитьВСписокНовыйПатент(Элемент.СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПолеОтражениеДоходаПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПолеОтражениеДоходаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПолеОтражениеДоходаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ПрименяетсяУСНПатент Тогда
		УчетПСНКлиент.ОткрытьФормуВыбораНовогоПатента(Элемент, ВыбранноеЗначение, Объект.Организация, Объект.Дата);
		УчетПСНКлиент.ОбработатьВыборНовогоПатентаИзКоллекции(Элемент.СписокВыбора,
			ВыбранноеЗначение, ВыбранноеЗначение, ПорядокОтраженияАвансаСоответствиеЗначений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыПолеОтражениеДоходаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПрименяетсяУСНПатент Тогда
		УчетПСНКлиент.ДобавитьВСписокНовыйПатент(Элемент.СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыПолеОтражениеДоходаПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.РасшифровкаПлатежаПолеОтражениеДоходаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыПолеОтражениеДоходаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ПрименяетсяУСНПатент Тогда
		УчетПСНКлиент.ОткрытьФормуВыбораНовогоПатента(Элемент, ВыбранноеЗначение, Объект.Организация, Объект.Дата);
		УчетПСНКлиент.ОбработатьВыборНовогоПатентаИзКоллекции(Элемент.СписокВыбора,
			ВыбранноеЗначение, ВыбранноеЗначение, ПорядокОтраженияАвансаСоответствиеЗначений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствБезДокументовПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.СтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыСтатьяДвиженияДенежныхСредствБезДокументовПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПлатежныеКартыСтатьяДвиженияДенежныхСредствПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьКурсВалютыЦБРФ(Команда)
	
	ОбновитьКурсВалютыЦБРФНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекНПД(Команда)
	
	Если Не ПоступлениеНаРасчетныйСчетФормыКлиент.ПроверитьЗаполнениеДляФормированияЧекаНПД(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ПараметрыЗаписи = Новый Структура();
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
	ПараметрыФормированияЧека = ЧекиНПДКлиентСервер.НовыйПараметрыФормированияЧека();
	ЗаполнитьЗначенияСвойств(ПараметрыФормированияЧека, Объект);
	ЧекиНПДКлиент.ОткрытьФормуФормированияЧекаНПД(ЭтотОбъект, Объект.Ссылка,
		ПараметрыФормированияЧека, ПараметрыОтправкиЧека(Объект.Контрагент));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияИзмененБанковскийСчет(ИмяСобытия, Параметр, Источник)
	
	ПоступлениеНаРасчетныйСчетФормы.ОбработкаОповещенияИзмененБанковскийСчет(ЭтотОбъект, Параметр.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	ПоступлениеНаРасчетныйСчетФормы.ВидОперацииПриИзмененииСервер(ЭтотОбъект);
	
	Если ПоступлениеНаРасчетныйСчетФормы.ВидОперацииСТабличнойЧастью(Объект.ВидОперации) Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеОрганизацииИзменение()
	
	ПоступлениеНаРасчетныйСчетФормы.ПодразделениеОрганизацииИзменение(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ПоступлениеНаРасчетныйСчетФормы.ДатаПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ПоступлениеНаРасчетныйСчетФормы.ОрганизацияПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетОрганизацииПриИзмененииСервер()
	
	ПоступлениеНаРасчетныйСчетФормы.СчетОрганизацииПриИзмененииСервер(ЭтотОбъект, Новый Массив);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПоступлениеНаРасчетныйСчетФормы.КонтрагентПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетБанкПриИзмененииСервер(ПричиныИзменения)
	
	ПоступлениеНаРасчетныйСчетФормы.СчетБанкПриИзмененииСервер(ЭтотОбъект, ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииСервер()
	
	ПоступлениеНаРасчетныйСчетФормы.СуммаДокументаПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(ЭтотОбъект);
	ПоступлениеНаРасчетныйСчетФормы.ДоговорКонтрагентаПриИзмененииНаСервере(СтрокаПлатеж, ЭтотОбъект);
	
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(ЭтотОбъект, Истина, СтрокаПлатеж);
	
КонецПроцедуры

&НаСервере
Процедура ПлатежныеКартыДоговорКонтрагентаПриИзмененииСервер()
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(ЭтотОбъект);
	ПоступлениеНаРасчетныйСчетФормы.ПлатежныеКартыДоговорКонтрагентаПриИзмененииНаСервере(
		СтрокаПлатеж, ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКурсВалютыЦБРФНаСервере()
	
	ПоступлениеНаРасчетныйСчетФормы.ОбновитьКурсВалютыЦБРФ(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтражениеВУСННаСервере(ЗаполнитьСуммы = Истина, ЗаполнитьСодержание = Ложь)
	
	ПоступлениеНаРасчетныйСчетФормы.ЗаполнитьОтражениеВУСННаСервере(ЭтотОбъект, ЗаполнитьСуммы, ЗаполнитьСодержание);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкаПлатежаВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.РасшифровкаПлатежа.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкаПлатежаИзВременногоХранилищаНаСервере(АдресХранилищаРасшифровкаПлатежа)
	
	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресХранилищаРасшифровкаПлатежа));
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(ЭтотОбъект, Истина);
	ПоступлениеНаРасчетныйСчетФормы.ВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
	ПредлагатьНовыйДоговор = Ложь;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя 
		И НЕ ОплатаВВалюте И ВестиУчетПоДоговорам Тогда
		ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
	ПоступлениеНаРасчетныйСчетФормы.УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРасшифровкиПлатежа(РезультатВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатВыбора);
		ЗаполнитьЗначенияСвойств(Объект,     РезультатВыбора, "СуммаДокумента, СуммаУслуг, Графа5_УСН");
		
		ПолучитьРасшифровкаПлатежаИзВременногоХранилищаНаСервере(РезультатВыбора.АдресХранилищаРасшифровкаПлатежа);
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЧекиНПД

&НаСервереБезКонтекста
Функция ЦенаУслугиНПД(УслугаНПД, Организация, Дата)
	
	Возврат ЧекиНПД.ЦенаУслугиНПД(УслугаНПД, Организация, Дата);
	
КонецФункции

&НаСервере
Процедура УстановитьСведенияОЧекеНПД(НовыеСведенияОЧекеНПД)
	
	СведенияОЧекеНПД = НовыеСведенияОЧекеНПД;
	ПоступлениеНаРасчетныйСчетФормы.УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыОтправкиЧека(Контрагент)
	
	Возврат ЧекиНПД.ПараметрыОтправкиЧека(Контрагент);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПредупрежденияПриЗагрузкеВыписки

&НаСервере
Процедура УдалитьПредупреждениеПриЗагрузкеВыпискиИСпрятатьБаннер()
	
	ПоступлениеНаРасчетныйСчетФормы.УдалитьПредупреждениеПриЗагрузкеВыпискиИСпрятатьБаннер(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти
