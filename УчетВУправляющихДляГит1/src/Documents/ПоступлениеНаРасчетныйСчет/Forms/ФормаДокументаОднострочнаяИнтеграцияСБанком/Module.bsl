
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПроверитьТолькоОдинСчетВрежимеИнтеграции();
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	ПоступлениеНаРасчетныйСчетФормы.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	СохранитьЗначенияИзменяемыхДанных();
	ВключитьВозможностьРедактированияНезаполненныхРеквизитов();
	
	УстановитьВидимостьИЗначениеЭлементовОблагаетсяНалогом();
	УстановитьВидимостьЭлементовСуммаУслуг();
	ПоступлениеНаРасчетныйСчетФормы.УстановитьЗаголовокЭлементаСуммаДокумента(ЭтотОбъект);
	
	ТекстШаблона = НСтр("ru = 'Поступление на расчетный счет %1 от %2'");
	Заголовок = СтрШаблон(ТекстШаблона,
		Объект.НомерВходящегоДокумента,
		Формат(Объект.Дата, "ДЛФ=D"));
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_УСН");
	
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ПоступлениеНаРасчетныйСчет",
		"ФормаДокументаОднострочнаяИнтеграцияСБанком",
		НСтр("ru = 'Новости: Поступление на расчетный счет'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ЧекиНПДКлиентСервер.ИмяСобытияДляОповещенияОбИзмененииЧека()
		И Параметр.ДокументОснование = Объект.Ссылка Тогда
		
		ЧекиНПДКлиент.ДобавитьПричинуАннулированияЧекаВКомментарий(Параметр, ЭтотОбъект);
		УстановитьСведенияОЧекеНПД(Параметр);
		
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация Тогда
		
		ОбработатьИзменениеБанковскогоСчета(Параметр.Ссылка);
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПоступлениеНаРасчетныйСчетФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(ЭтотОбъект);
	
	Если Не Объект.ПометкаУдаления И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И (СчетВРежимеИнтеграции Или Параметры.Ключ.Пустая())
		И Не ЗначениеЗаполнено(ТекущийОбъект.СчетОрганизации)
		И Не Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(ТекущийОбъект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Реквизиты банковского счета не заполнены'"),, "НетСчетаВДругомБанке",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПоступлениеНаРасчетныйСчетФормы.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	Оповестить("ОбновитьПоказателиРасчетаУСН", , ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВидОперацииЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.Форма.ФормаВыбораИнтеграцияСБанком", ,
		ЭтотОбъект,
		УникальныйИдентификатор, , ,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ВидОперацииАвтоПодбор(Объект.ВидОперации, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОблагаетсяНалогомПриИзменении(Элемент)
	
	Если ОблагаетсяНалогом Тогда
		Объект.Графа5_УСН = Объект.Графа4_УСН;
		
	Иначе
		Объект.Графа5_УСН = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПлатежныеКартыСуммаУслугПриИзменении(Элемент)
	
	ПоступлениеНаРасчетныйСчетФормыКлиент.ПлатежныеКартыСуммаУслугПриИзменении(ЭтотОбъект, Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	УдалитьПредупреждениеПриЗагрузкеВыпискиИСпрятатьБаннер();
	ПоступлениеНаРасчетныйСчетФормыКлиент.ОповеститьОбИзмененииПредупрежденияПриЗагрузкеВыписки(Объект.Ссылка);
	
КонецПроцедуры

#Область РеквизитыНПД

&НаКлиенте
Процедура ДекорацияЧекНПДНажатие(Элемент)
	
	ЧекиНПДКлиент.ОткрытьФормуЧекаНПД(ЭтотОбъект, Объект.Ссылка, ПараметрыОтправкиЧека(Объект.Контрагент));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаНПДПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СуммаДокумента)
		Или Не ЗначениеЗаполнено(Объект.УслугаНПД) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СуммаДокумента = ЦенаУслугиНПД(Объект.УслугаНПД, Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаНПДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаНПДАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура УслугаНПДОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		СчетОрганизацииПриИзмененииСервер(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	СуммаДокументаПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПробитьЧекНПД(Команда)
	
	Если Не ПоступлениеНаРасчетныйСчетФормыКлиент.ПроверитьЗаполнениеДляФормированияЧекаНПД(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ПараметрыЗаписи = Новый Структура();
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
	ПараметрыФормированияЧека = ЧекиНПДКлиентСервер.НовыйПараметрыФормированияЧека();
	ЗаполнитьЗначенияСвойств(ПараметрыФормированияЧека, Объект);
	ЧекиНПДКлиент.ОткрытьФормуФормированияЧекаНПД(ЭтотОбъект, Объект.Ссылка,
		ПараметрыФормированияЧека, ПараметрыОтправкиЧека(Объект.Контрагент));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// При изменении вида операции реквизиты могут очищаться. Например для "Взнос наличными" очищается Контрагент и СчетКонтрагента.
// Если изменить операцию ОплатаПокупателя -> ВзносНаличными -> ОплатаПокупателя, то значение Контрагент будет утеряно.
// Процедуры СохранитьЗначенияИзменяемыхДанных() и ВосстановитьЗначенияИзменяемыхДанных() зашищают от потери данных при
// изменении вида операции.
//
&НаСервере
Процедура СохранитьЗначенияИзменяемыхДанных()
	
	ЗначенияИзменяемыхДанных = Новый Структура;
	ЗначенияИзменяемыхДанных.Вставить("Контрагент", Новый Структура("Контрагент", Объект.Контрагент));
	ЗначенияИзменяемыхДанных.Вставить("СчетКонтрагента", Новый Структура("СчетКонтрагента", Объект.СчетКонтрагента));
	ЗначенияИзменяемыхДанных.Вставить("ВторойСчетОрганизации", Новый Структура("СчетКонтрагента", Объект.СчетКонтрагента));
	
	Если Не СчетВРежимеИнтеграции Или Параметры.Ключ.Пустая() Тогда
		ЗначенияИзменяемыхДанных.Вставить("СчетОрганизации", Новый Структура("СчетОрганизации", Объект.СчетОрганизации));
		ЗначенияИзменяемыхДанных.Вставить("Дата", Новый Структура("Дата", Объект.Дата));
		ЗначенияИзменяемыхДанных.Вставить("ДатаВходящегоДокумента", Новый Структура("ДатаВходящегоДокумента", Объект.ДатаВходящегоДокумента));
		ЗначенияИзменяемыхДанных.Вставить("НомерВходящегоДокумента", Новый Структура("НомерВходящегоДокумента", Объект.НомерВходящегоДокумента));
		ЗначенияИзменяемыхДанных.Вставить("СуммаДокумента", Новый Структура("СуммаДокумента", Объект.СуммаДокумента));
		ЗначенияИзменяемыхДанных.Вставить("СуммаУслуг", Новый Структура("СуммаУслуг", Объект.СуммаУслуг));
		ЗначенияИзменяемыхДанных.Вставить("НазначениеПлатежа", Новый Структура("НазначениеПлатежа", Объект.НазначениеПлатежа));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьЗначенияИзменяемыхДанных()
	
	Для Каждого КлючЗначение Из ЗначенияИзменяемыхДанных Цикл
		Для Каждого СохраненноеЗначение Из КлючЗначение.Значение Цикл
			Если Не ЗначениеЗаполнено(Объект[СохраненноеЗначение.Ключ]) Тогда
				Объект[СохраненноеЗначение.Ключ] = СохраненноеЗначение.Значение;
				Если СохраненноеЗначение.Ключ = "Контрагент" Тогда
					КонтрагентПриИзмененииСервер();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВключитьВозможностьРедактированияНезаполненныхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьВозможностьРедактированияНезаполненныхРеквизитов()
	
	Для Каждого КлючЗначение Из ЗначенияИзменяемыхДанных Цикл
		Для Каждого СохраненноеЗначение Из КлючЗначение.Значение Цикл
			Если СчетВРежимеИнтеграции Тогда
				РеквизитДоступенДляРедактирования = Не ЗначениеЗаполнено(Объект[СохраненноеЗначение.Ключ]);
			Иначе
				РеквизитДоступенДляРедактирования = Истина;
			КонецЕсли;
			
			Элементы[КлючЗначение.Ключ].ТолькоПросмотр = Не РеквизитДоступенДляРедактирования;
			
			ТипРеквизита = ТипЗнч(Объект[СохраненноеЗначение.Ключ]);
			Если ТипРеквизита <> Тип("Булево") И ТипРеквизита <> Тип("Строка") Тогда
				Элементы[КлючЗначение.Ключ].КнопкаВыбора = РеквизитДоступенДляРедактирования;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииЗавершениеВыбора(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ВидОперации = Результат;
	
	Модифицированность = Истина;
	
	ВидОперацииПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	ПоступлениеНаРасчетныйСчетФормы.ВидОперацииПриИзмененииСервер(ЭтотОбъект);
	
	Если ПоступлениеНаРасчетныйСчетФормы.ВидОперацииСТабличнойЧастью(Объект.ВидОперации) Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(ЭтотОбъект, Истина);
	КонецЕсли;
	
	ВосстановитьЗначенияИзменяемыхДанных();
	
	УстановитьВидимостьИЗначениеЭлементовОблагаетсяНалогом();
	УстановитьВидимостьЭлементовСуммаУслуг();
	ПоступлениеНаРасчетныйСчетФормы.УстановитьЗаголовокЭлементаСуммаДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСуммаУслуг()
	
	КоличествоСтрок = Объект.РасшифровкаПлатежа.Количество();
	ЭтоПлатежныеКартыИКредиты = Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
	Если КоличествоСтрок = 1 И ЭтоПлатежныеКартыИКредиты Тогда
		Элементы.СуммаУслуг.Видимость               = Ложь;
		Элементы.ПлатежныеКартыСуммаУслуг.Видимость = Истина;
		
	ИначеЕсли КоличествоСтрок > 1 И ЭтоПлатежныеКартыИКредиты Тогда
		Элементы.СуммаУслуг.Видимость               = Истина;
		Элементы.ПлатежныеКартыСуммаУслуг.Видимость = Ложь;
		
	Иначе
		Элементы.СуммаУслуг.Видимость               = Ложь;
		Элементы.ПлатежныеКартыСуммаУслуг.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИЗначениеЭлементовОблагаетсяНалогом()
	
	Операции = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВидыОперацийДоступныеПриИнтеграцииСБанком();
	
	Результат = Операции.Найти(Объект.ВидОперации, "ВидОперации");
	РезультатОблагаетсяНалогом = ?(Результат <> Неопределено, Результат.ОблагаетсяНалогом, "");
	
	ВидимостьФлагаОблагаетсяНалогом = ПустаяСтрока(РезультатОблагаетсяНалогом);
	
	Элементы.ОблагаетсяНалогом.Видимость        = ВидимостьФлагаОблагаетсяНалогом;
	Элементы.ОблагаетсяНалогомНадпись.Видимость = Не ВидимостьФлагаОблагаетсяНалогом;
	
	Если ВидимостьФлагаОблагаетсяНалогом Тогда
		ОблагаетсяНалогом = Объект.Графа5_УСН > 0;
		
	Иначе
		Если РезультатОблагаетсяНалогом = "Да" Тогда
			Текст = НСтр("ru='Облагается налогом'");
			
		Иначе
			Текст = НСтр("ru='Не облагается налогом'");
			
		КонецЕсли;
		
		ОблагаетсяНалогомНадпись = Текст;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		УстановитьСписокВыбораСчетовОрганизации();
		СчетВРежимеИнтеграции = Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияВключена(Объект.СчетОрганизации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ПоступлениеНаРасчетныйСчетФормы.ОрганизацияПриИзмененииСервер(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		УстановитьСписокВыбораСчетовОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьТолькоОдинСчетВрежимеИнтеграции()
	
	ИспользуетсяНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	Если ИспользуетсяНесколькоБанковскихСчетовОрганизации Тогда
		// Если у организации несколько счетов, то доступно поле с счетом организации.
		// Дополнительные проверки и оповещения не требуются, т.к. пользователь может добавлять и выбирать счета.
	КонецЕсли;
	
	СловаПредупреждения = Новый Массив;
	СловаПредупреждения.Добавить(НСтр("ru = 'Для ввода операций по счету в другом банке укажите его в'"));
	СловаПредупреждения.Добавить(" ");
	СловаПредупреждения.Добавить(НСтр("ru = 'разделе'"));
	СловаПредупреждения.Добавить(" ");
	СловаПредупреждения.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Настройки'"),,,,
		"e1cib/command/Обработка.ПанелиПростойИнтерфейс.Команда.Настройки"));
	
	НетСчетаВДругомБанке = Новый ФорматированнаяСтрока(СловаПредупреждения);
	
	Элементы.ПредупреждениеОСчетахВДругихБанках.Видимость = Не ИспользуетсяНесколькоБанковскихСчетовОрганизации;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПоступлениеНаРасчетныйСчетФормы.УстановитьФункциональныеОпцииФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетОрганизацииПриИзмененииСервер(ПричиныИзменения)
	
	ПоступлениеНаРасчетныйСчетФормы.СчетОрганизацииПриИзмененииСервер(ЭтотОбъект, ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораСчетовОрганизации()
	
	МассивПараметровВыбора = Новый Массив;
	
	// По счетам в банке, с которым настроена интеграция, операции вручную не вводятся,
	// поэтому удалим такие счета из массива доступных счетов.
	БанковскиеСчетаБезИнтеграции = Справочники.НастройкиИнтеграцииСБанками.БанковскиеСчетаОрганизацииБезИнтеграции(Объект.Организация);
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", БанковскиеСчетаБезИнтеграции));
	
	Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеБанковскогоСчета(СчетОрганизации)
	
	УстановитьСписокВыбораСчетовОрганизации();
	УстановитьФункциональныеОпцииФормы();
	
	Если Не ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Объект.СчетОрганизации = СчетОрганизации;
		СчетОрганизацииПриИзмененииСервер(Новый Массив);
		
		ПроверитьТолькоОдинСчетВрежимеИнтеграции();
		ВключитьВозможностьРедактированияНезаполненныхРеквизитов();
		
		СчетВРежимеИнтеграции = Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияВключена(Объект.СчетОрганизации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПоступлениеНаРасчетныйСчетФормы.КонтрагентПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииСервер()
	
	ПоступлениеНаРасчетныйСчетФормы.СуммаДокументаПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПредупрежденияПриЗагрузкеВыписки

&НаСервере
Процедура УдалитьПредупреждениеПриЗагрузкеВыпискиИСпрятатьБаннер()
	
	ПоступлениеНаРасчетныйСчетФормы.УдалитьПредупреждениеПриЗагрузкеВыпискиИСпрятатьБаннер(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ЧекиНПД

&НаСервереБезКонтекста
Функция ЦенаУслугиНПД(УслугаНПД, Организация, Дата)
	
	Возврат ЧекиНПД.ЦенаУслугиНПД(УслугаНПД, Организация, Дата);
	
КонецФункции

&НаСервере
Процедура УстановитьСведенияОЧекеНПД(НовыеСведенияОЧекеНПД)
	
	СведенияОЧекеНПД = НовыеСведенияОЧекеНПД;
	ПоступлениеНаРасчетныйСчетФормы.УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыОтправкиЧека(Контрагент)
	
	Возврат ЧекиНПД.ПараметрыОтправкиЧека(Контрагент);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
