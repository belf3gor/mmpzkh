#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыОбеспечивающиеПроведениеДокумента

// Функция возвращает параметры проведения.
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата,
	|	Реквизиты.Организация,
	|	Реквизиты.Объект,
	|	Реквизиты.Ответственный,
	|	Реквизиты.Комментарий
	|ИЗ
	|	Документ.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Реквизиты = Новый Структура("Ссылка,Номер,Дата,Организация,Объект,Ответственный,Комментарий");
	
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияДляВзаиморасчетов.ЛицевойСчет,
	|	СведенияДляВзаиморасчетов.Контрагент,
	|	СведенияДляВзаиморасчетов.ДоговорКонтрагента
	|ИЗ
	|	Документ.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам.СведенияДляВзаиморасчетов КАК СведенияДляВзаиморасчетов
	|ГДЕ
	|	СведенияДляВзаиморасчетов.Ссылка = &Ссылка";
	
	ПараметрыПроведения.Вставить("ТаблицаСведенийДляВзаиморасчетов", Запрос.Выполнить().Выгрузить());
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыПроведения()

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает признак вывода предупреждения о сведениях для взаиморасчетов.
//
Функция ПолучитьНастройкуВыводаПредупрежденияОСведенияхДляВзаиморасчетов() Экспорт
	
	// Значение по умолчанию.
	ПоказыватьПредупреждения = Ложь;
	
	// Получение настройки.
	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить("ФормаПредупрежденияОСведенияхДляВзаиморасчетов", "ПоказыватьПредупреждение");
	Если ЗначениеНастройки = Неопределено Тогда
		
		// Если настройка не задана, определим ее.
		Документы.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам.ПолучитьДоговорыКонтрагентовНеУказанныеВСведенияхДляВзаиморасчетовПоЛС();
		
		// Снова настройку.
		ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить("ФормаПредупрежденияОСведенияхДляВзаиморасчетов", "ПоказыватьПредупреждение");
		
	КонецЕсли;
	
	// Установим значение результата, если настройка получена.
	Если ЗначениеНастройки = Истина Тогда
		ПоказыватьПредупреждения = Истина;
	КонецЕсли;
	
	Возврат ПоказыватьПредупреждения;
	
КонецФункции

// Функция получает текущие сведения для взаиморасчетов по лицевым счетам и определяет, имеются ли у контрагентов договоры,
// открытые в организациях, отличных от указанной в регистре "Сведения для взаиморасчетов по л/с".
// Если такие договоры найдены, возвращается готовая таблица значений с колонками "Организация",
// "Лицевой счет", "Контрагент", "Договор", по которой производится автоматическое формирование
// документов "Управление сведениями для взаиморасчетов по л/с".
//
Функция ПолучитьДоговорыКонтрагентовНеУказанныеВСведенияхДляВзаиморасчетовПоЛС() Экспорт
	
	// Данное заполнение необходимо только для информационных баз, в которых используется обмен данными с сайтом.
	// Поэтому критерием поиска договоров по "другим" организациям будет являться наличие настроек доступа к сайту.
	ЗапросПоНастройкамДоступа = Новый Запрос;
	ЗапросПоНастройкамДоступа.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиДоступаКСайту.Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиДоступаКСайту КАК УПЖКХ_НастройкиДоступаКСайту
	|ГДЕ
	|	НЕ УПЖКХ_НастройкиДоступаКСайту.ПометкаУдаления";
	
	ВыборкаНастроекДоступа = ЗапросПоНастройкамДоступа.Выполнить().Выбрать();
	
	Если ВыборкаНастроекДоступа.Количество() = 0 Тогда
		
		// Если обмен с сайтом не используется, нет нужды выполнять проверку каждый раз.
		// Отключим показ предупреждения в настройках пользователя.
		ХранилищеОбщихНастроек.Сохранить("ФормаПредупрежденияОСведенияхДляВзаиморасчетов", "ПоказыватьПредупреждение", Ложь);
		
		Возврат Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",        ТекущаяДата());
	Запрос.УстановитьПараметр("ВидыДоговоров", УПЖКХ_РаботаСЛицевымиСчетами.ПолучитьВидыДоговоров());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ втОткрытыеЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Период, ) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Организация,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Контрагент
	|ПОМЕСТИТЬ втСведенияДляВзаиморасчетовВРегистре
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&Период,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втОткрытыеЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втОткрытыеЛицевыеСчета КАК втОткрытыеЛицевыеСчета)) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втСведенияДляВзаиморасчетовВРегистре.Контрагент,
	|	втСведенияДляВзаиморасчетовВРегистре.ЛицевойСчет
	|ПОМЕСТИТЬ врЛицевыеСчетаКонтрагентов
	|ИЗ
	|	втСведенияДляВзаиморасчетовВРегистре КАК втСведенияДляВзаиморасчетовВРегистре
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ПОМЕСТИТЬ втДоговорыКонтрагентовВСправочнике
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И ДоговорыКонтрагентов.ВидДоговора В(&ВидыДоговоров)
	|	И ДоговорыКонтрагентов.Владелец В
	|			(ВЫБРАТЬ
	|				втСведенияДляВзаиморасчетовВРегистре.Контрагент
	|			ИЗ
	|				втСведенияДляВзаиморасчетовВРегистре КАК втСведенияДляВзаиморасчетовВРегистре)
	|	И (ДоговорыКонтрагентов.СрокДействия >= &Период
	|			ИЛИ ДоговорыКонтрагентов.СрокДействия = ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДоговорыКонтрагентовВСправочнике.Организация,
	|	втДоговорыКонтрагентовВСправочнике.Контрагент,
	|	втДоговорыКонтрагентовВСправочнике.Договор
	|ПОМЕСТИТЬ втДоговорыКонтрагентовКОбработке
	|ИЗ
	|	втДоговорыКонтрагентовВСправочнике КАК втДоговорыКонтрагентовВСправочнике
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияДляВзаиморасчетовВРегистре КАК втСведенияДляВзаиморасчетовВРегистре
	|		ПО втДоговорыКонтрагентовВСправочнике.Контрагент = втСведенияДляВзаиморасчетовВРегистре.Контрагент
	|			И втДоговорыКонтрагентовВСправочнике.Организация = втСведенияДляВзаиморасчетовВРегистре.Организация
	|ГДЕ
	|	ЕСТЬNULL(втСведенияДляВзаиморасчетовВРегистре.ЛицевойСчет, ИСТИНА) = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДоговорыКонтрагентовКОбработке.Организация,
	|	врЛицевыеСчетаКонтрагентов.ЛицевойСчет,
	|	втДоговорыКонтрагентовКОбработке.Контрагент,
	|	МАКСИМУМ(втДоговорыКонтрагентовКОбработке.Договор) КАК Договор
	|ИЗ
	|	втДоговорыКонтрагентовКОбработке КАК втДоговорыКонтрагентовКОбработке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врЛицевыеСчетаКонтрагентов КАК врЛицевыеСчетаКонтрагентов
	|		ПО втДоговорыКонтрагентовКОбработке.Контрагент = врЛицевыеСчетаКонтрагентов.Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	втДоговорыКонтрагентовКОбработке.Организация,
	|	врЛицевыеСчетаКонтрагентов.ЛицевойСчет,
	|	втДоговорыКонтрагентовКОбработке.Контрагент";
	
	// В последнем пакете используется группировка по организации, лицевому счету и контрагенту. Договор берем по максимуму - так как,
	// если договоров по данной организации у контрагента несколько, мы не можем знать, какой именно нужен, поэтому подставляем один
	// из списка.
	
	ТаблицаДоговоров = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДоговоров.Количество() > 0 Тогда
		// Если есть договоры для обработки, установим признак вывода предупреждения пользователю.
		ХранилищеОбщихНастроек.Сохранить("ФормаПредупрежденияОСведенияхДляВзаиморасчетов", "ПоказыватьПредупреждение", Истина);
	Иначе
		// Если данных для обработки нет, то отключим настройку оповещения.
		ХранилищеОбщихНастроек.Сохранить("ФормаПредупрежденияОСведенияхДляВзаиморасчетов", "ПоказыватьПредупреждение", Ложь);
	КонецЕсли;
	
	Возврат ТаблицаДоговоров;
	
КонецФункции // ПолучитьДоговорыКонтрагентовНеУказанныеВСведенияхДляВзаиморасчетовПоЛС()

#КонецОбласти

#КонецЕсли