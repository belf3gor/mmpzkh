#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ
//

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	Иначе
		СуммаВключаетНДС = Ложь;
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	// Специфические для конкретного документа действия
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И (ЗначениеЗаполнено(ДоговорКонтрагента) ИЛИ НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам")) Тогда
	
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
		
	КонецЕсли;
	
	// Заполним основную номенклатурную группу
	Если НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа) 
		И БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа() <> Неопределено Тогда
		НоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьПодразделениеЗатрат(ПодразделениеЗатрат, Организация);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

	ЗачетАвансов.Очистить();
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(Услуги, Дата);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ПроверяемыеРеквизиты.Найти("Склад") = Неопределено Тогда
		ПроверяемыеРеквизиты.Добавить("Склад");
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	// В формах документа счет расчетов и счет авансов редактируются в специальной форме.
	// В случае, если они не заполнены, покажем сообщение возле соответствующей гиперссылки.
	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоАвансам");

	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,,
			НСтр("ru = 'Счет учета расчетов с контрагентом'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,
			"ПорядокУчетаРасчетов", Отказ);
	КонецЕсли;

	Если СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
		Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансам) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,,
				НСтр("ru = 'Счет учета расчетов по авансам'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,
				"ПорядокУчетаРасчетов", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") 
		ИЛИ ВозвратнаяТара.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоТаре");
	КонецЕсли;
	
	Если Продукция.Количество() = 0 И Услуги.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("ПодразделениеЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатурнаяГруппа");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Услуги.СчетУчетаНДС"); // Проверяем построчно
	СинонимСпискаУслуги          = Метаданные().ТабличныеЧасти.Услуги.Синоним;
	СинонимРеквизитаСчетУчетаНДС = Метаданные().ТабличныеЧасти.Услуги.Реквизиты.СчетУчетаНДС.Синоним;
	Для Каждого СтрокаТЧ Из Услуги Цикл
		Если Не НДСВключенВСтоимость
			И СтрокаТЧ.СуммаНДС <> 0
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДС) Тогда

			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка", 
				"Заполнение", 
				СинонимРеквизитаСчетУчетаНДС, 
				СтрокаТЧ.НомерСтроки, 
				СинонимСпискаУслуги, 
				ТекстСообщения);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				"Услуги[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=; ЧГ=")+ "].СчетУчетаНДС",
				"Объект",
				Отказ);

		КонецЕсли;
		//Проверка способа учета НДС
		Если РаздельныйУчетНДСНаСчете19 И НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособУчетаНДС)
			И СтрокаТЧ.СуммаНДС <> 0 Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Способ учета НДС'"),
				СтрокаТЧ.НомерСтроки, СинонимСпискаУслуги);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, 
				ЭтотОбъект,
				"Услуги[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=; ЧГ=")+ "].СпособУчетаНДС",
				"Объект",
				Отказ);	
		КонецЕсли;	
	КонецЦикла;

	//Табличная часть "Использованные материалы"
	Если Не РаздельныйУчетНДСНаСчете19 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ИспользованныеМатериалы.СпособУчетаНДС");
	КонецЕсли;
	
	// Табличная часть "Зачет авансов"
	Если СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	ИначеЕсли ЗачетАвансов.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки с документом аванса!'");
		Поле = "ПорядокУчетаРасчетов";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , Поле, Отказ);
	КонецЕсли;

	// Проверка табличной части "Возвратная тара"

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	ИспользоватьПлановуюСебестоимость = ПолучитьФункциональнуюОпцию(
		"ИспользоватьПлановуюСебестоимость",
		Новый Структура("Период, Организация", Дата, Организация));
		
	Если НЕ ИспользоватьПлановуюСебестоимость Тогда	
		МассивНепроверяемыхРеквизитов.Добавить("Продукция.СуммаПлановая");
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		И ВозвратнаяТара.Количество() > 0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;
		
	Если УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата) Тогда
		НДСВключенВСтоимость = Ложь;
	КонецЕсли;

	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("ПометкаУдаления", ЭтотОбъект, "СчетФактураПолученный");
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
	
	Документы.КорректировкаПоступления.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		УчетНДСПереопределяемый.СинхронизироватьРеквизитыСчетаФактурыПолученного(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ПоступлениеИзПереработки.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	// Таблица взаиморасчетов
	ТаблицаВзаиморасчеты = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(ПараметрыПроведения.ЗачетАвансовТаблицаДокумента,
		ПараметрыПроведения.ЗачетАвансовТаблицаАвансов, ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);
	// Таблицы документа с корректировкой сумм по курсу авансов
	СтруктураТаблицДокумента = Новый Структура("ПоступлениеУслугТаблица", ПараметрыПроведения.ПоступлениеУслугТаблица);
	СтруктураТаблицДокумента = УчетДоходовРасходов.ПодготовитьТаблицыПоступленияПоКурсуАвансов(СтруктураТаблицДокумента,
		ТаблицаВзаиморасчеты, ПараметрыПроведения.ЗачетАвансовРеквизиты);

	Документы.ПоступлениеИзПереработки.ДобавитьКолонкуСодержаниеПродукция(ПараметрыПроведения.ПлановаяСтоимостьПродукцииТаблица);

	// Таблицы списанных и возвращенных материалов
	МатериалыДляОценкиСтоимости = Новый Структура();
	МатериалыДляОценкиСтоимости.Вставить("СписаниеМатериалов", ПараметрыПроведения.СписаниеМатериаловТаблица);
	МатериалыДляОценкиСтоимости.Вставить("ВозвратМатериалов",  ПараметрыПроведения.ВозвратМатериаловТаблица);
	
	МатериалыСОценкойСтоимости = УчетТоваров.ПодготовитьТаблицыСписанныеТовары(
		МатериалыДляОценкиСтоимости,
		ПараметрыПроведения.ОценкаСтоимостиРеквизиты,
		Отказ);
		
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура();
	СтруктураТаблицУСН.Вставить("ТаблицаМатериалов",             МатериалыСОценкойСтоимости.СписаниеМатериалов);
	СтруктураТаблицУСН.Вставить("ТаблицаВозвращенныхМатериалов", МатериалыСОценкойСтоимости.ВозвратМатериалов);
	СтруктураТаблицУСН.Вставить("ТаблицаРасчетов",               ТаблицаВзаиморасчеты);
	
	// Учет доходов и расходов ИП
	ТаблицаУслугИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаУслуг,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты);
		
	СтруктураТаблицМПЗ = Новый Структура("ТаблицаУслуг", ТаблицаУслугИП);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеМПЗ(
		СтруктураТаблицМПЗ,
		ТаблицаВзаиморасчеты, ,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты, Движения, Отказ);
	
	ТаблицыМатериаловПродукцииИП = Документы.ПоступлениеИзПереработки.ПодготовитьТаблицыМатериаловПродукцииИП(
		МатериалыСОценкойСтоимости.СписаниеМатериалов,
		МатериалыСОценкойСтоимости.ВозвратМатериалов,
		ПараметрыПроведения.ВыпускПродукцииТаблица,
		ПараметрыПроведения.СписаниеМатериаловРеквизиты, Движения);
	
	ТаблицыСписанияМПЗИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияМПЗ(
		ТаблицыМатериаловПродукцииИП.ТаблицаМатериалов, ПараметрыПроведения.СписаниеМатериаловРеквизиты, Отказ);
	
	ТаблицаПоступлениеПродукцииИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступлениеПродукции(
		ТаблицыМатериаловПродукцииИП.ПолученоПродукции, ПараметрыПроведения.СписаниеМатериаловРеквизиты);
	
	ТаблицаПоступленияУслугПереработкиИП	= УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияУслугПереработки(
		ТаблицыМатериаловПродукцииИП.ПолученныеУслуги,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты);
		
	Если НЕ ТаблицаПоступленияУслугПереработкиИП = Неопределено Тогда
	
		// Добавим стоимость услуг в таблицу полученной продукции
		Если ТаблицыСписанияМПЗИП.СтоимостьПродукции = Неопределено Тогда
			ТаблицыСписанияМПЗИП.СтоимостьПродукции = Новый ТаблицаЗначений;
			ТаблицыСписанияМПЗИП.СтоимостьПродукции.Колонки.Добавить("ВидМПЗ",					Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
			ТаблицыСписанияМПЗИП.СтоимостьПродукции.Колонки.Добавить("ХарактерДеятельности",	Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
			ТаблицыСписанияМПЗИП.СтоимостьПродукции.Колонки.Добавить("НоменклатурнаяГруппа",	Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
			ТаблицыСписанияМПЗИП.СтоимостьПродукции.Колонки.Добавить("Номенклатура",			Справочники.ТипВсеСсылки());
			ТаблицыСписанияМПЗИП.СтоимостьПродукции.Колонки.Добавить("ДокументОплаты",			Документы.ТипВсеСсылки());
			ТаблицыСписанияМПЗИП.СтоимостьПродукции.Колонки.Добавить("КоличествоСписано",		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
			ТаблицыСписанияМПЗИП.СтоимостьПродукции.Колонки.Добавить("Сумма",					ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			ТаблицыСписанияМПЗИП.СтоимостьПродукции.Колонки.Добавить("НДС",						ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		КонецЕсли;
		
		Для Каждого УслугаПереработкиИП Из ТаблицаПоступленияУслугПереработкиИП Цикл
			ПродукцияИП = ТаблицыСписанияМПЗИП.СтоимостьПродукции.Добавить();
			ПродукцияИП.ВидМПЗ					= УслугаПереработкиИП.ВидПоступившегоМПЗ;
			ПродукцияИП.ХарактерДеятельности	= УслугаПереработкиИП.ХарактерДеятельности;
			ПродукцияИП.НоменклатурнаяГруппа	= УслугаПереработкиИП.НоменклатурнаяГруппа;
			ПродукцияИП.Номенклатура			= УслугаПереработкиИП.Продукция;
			ПродукцияИП.ДокументОплаты			= УслугаПереработкиИП.ДокументОплаты;
			ПродукцияИП.КоличествоСписано		= УслугаПереработкиИП.Количество;
			ПродукцияИП.Сумма					= УслугаПереработкиИП.Сумма;
			ПродукцияИП.НДС						= УслугаПереработкиИП.НДС;
		КонецЦикла;
	
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	// Выпуск продукции, полуфабрикатов, материалов, товаров
	УчетПроизводства.СформироватьДвиженияПлановаяСтоимостьВыпущеннойПродукции(
		ПараметрыПроведения.ПлановаяСтоимостьПродукцииТаблица, 
		ПараметрыПроведения.ПлановаяСтоимостьПродукцииРеквизиты, Движения, Отказ);
		
	УчетПроизводства.СформироватьДвиженияВыпускПродукцииУслуг(
		ПараметрыПроведения.ВыпускПродукцииТаблица, 
		ПараметрыПроведения.ВыпускПродукцииРеквизиты, Движения, Отказ);

	// Зачет аванса
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);

	// Поступление услуг
 	УчетДоходовРасходов.СформироватьДвиженияПоступлениеУслуг(
		СтруктураТаблицДокумента.ПоступлениеУслугТаблица,
		ПараметрыПроведения.ПоступлениеУслугРеквизиты, Движения, Отказ);

	// Списание материалов в производство
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(
		МатериалыСОценкойСтоимости.СписаниеМатериалов,
		ПараметрыПроведения.СписаниеМатериаловРеквизиты, 
		Движения, 
		Отказ);

	// Возврат материалов из переработки на стороне
	УчетТоваров.СформироватьДвиженияПеремещениеТоваров(
		МатериалыСОценкойСтоимости.ВозвратМатериалов,
		ПараметрыПроведения.ВозвратМатериаловРеквизиты,
		Движения,
		Отказ);

	// Поступление тары
	УчетТоваров.СформироватьДвиженияПоступлениеТары(ПараметрыПроведения.ПоступлениеТарыТаблица,
		ПараметрыПроведения.ПоступлениеТарыРеквизиты, Движения, Отказ);
		
	//Рублевые суммы документов в валюте
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеПоступлениеСобственныхТоваровУслуг(СтруктураТаблицДокумента.ПоступлениеУслугТаблица,
		ПараметрыПроведения.ПоступлениеУслугРеквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеБезНДС(ПараметрыПроведения.ПоступлениеТарыТаблица,
		ПараметрыПроведения.ПоступлениеТарыРеквизиты, Движения, Отказ);
		
	// Учет НДС
	// Поступление услуг по переработке
	УчетНДС.СформироватьДвиженияПоступлениеТоваровУслугОтПоставщика(
		Неопределено, СтруктураТаблицДокумента.ПоступлениеУслугТаблица, Неопределено,
		ПараметрыПроведения.РеквизитыНДС, Движения, Отказ);
	УчетНДСРаздельный.СформироватьДвиженияПоступлениеИзПереработки(
		Неопределено, СтруктураТаблицДокумента.ПоступлениеУслугТаблица,
		ПараметрыПроведения.РеквизитыНДС, Движения, Отказ);
	// Оприходование готовой продукции
	УчетНДСБП.СформироватьДвиженияОприходованиеТоваров(
		ПараметрыПроведения.ПродукцияНДС, Неопределено, 
		ПараметрыПроведения.РеквизитыНДС, Движения, Отказ);
	// Списание материалов на расходы
	УчетНДСБП.СформироватьДвиженияСписаниеТоваровНаРасходы(
		ПараметрыПроведения.ИспользованныеМатериалыНДС, 
		МатериалыСОценкойСтоимости.СписаниеМатериалов,
		ПараметрыПроведения.РеквизитыНДС, 
		Движения, 
		Отказ);
	// Возврат материалов на склад из переработки
	УчетНДСБП.СформироватьДвиженияПеремещениеТоваров(
		ПараметрыПроведения.ВозвращенныеМатериалыНДС, 
		МатериалыСОценкойСтоимости.ВозвратМатериалов,
		ПараметрыПроведения.РеквизитыНДС, 
		Неопределено, 
		Движения, 
		Отказ);
		
	// УСН
	СуммаСторноРасхода = 0;
	УчетУСН.ПоступлениеРасходовУСН(ПараметрыПроведения.ПоступлениеРасходовУСНТаблицаРасходов, 
		ПараметрыПроведения.ПоступлениеРасходовУСНРеквизиты, СуммаСторноРасхода, Движения, Отказ);

	Если НЕ Отказ И Движения.РасходыПриУСН.Количество()>0 Тогда
		Движения.РасходыПриУСН.Записать(Истина);
		Движения.РасходыПриУСН.Записывать = Ложь;
	КонецЕсли; 
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеМПЗ(
		ТаблицыСписанияМПЗИП,
		ПараметрыПроведения.СписаниеМатериаловРеквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеПродукции(
		ТаблицаПоступлениеПродукцииИП,
		ТаблицыСписанияМПЗИП.СтоимостьПродукции,
		ПараметрыПроведения.СписаниеМатериаловРеквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеУслугПереработки(
		ТаблицаПоступленияУслугПереработкиИП,
		ТаблицыМатериаловПродукцииИП.УслугиОтнесенныеНаИМР,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты, Движения, Отказ);
	
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.ПереоценкаВалютныхОстатковРеквизиты, Движения, Отказ);
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.ПереоценкаВалютныхОстатковРеквизиты, Движения, Отказ);
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.ПереоценкаВалютныхОстатковРеквизиты, Движения, Отказ);

	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект,
		Отказ,
		ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	// Регистрация в последовательности
	ТаблицаРегистрацииМатериаловСОценкойСтоимости = РаботаСПоследовательностями.ПодготовитьТаблицуСчетовТоваровДляАнализа(
		МатериалыСОценкойСтоимости.СписаниеМатериалов,
		МатериалыСОценкойСтоимости.ВозвратМатериалов);
	ТаблицаРегистрации = РаботаСПоследовательностями.ПодготовитьТаблицуСчетовТоваровДляАнализа(
		ТаблицаРегистрацииМатериаловСОценкойСтоимости, ПараметрыПроведения.ТаблицаРегистрации);
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект,
		Отказ,
		ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение,
		ТаблицаРегистрации,
		Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
	Движения.Записать();
	
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект, "СчетФактураПолученный");	
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);

	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект, "СчетФактураПолученный");	
	ПараметрыДействия.СостояниеФлага = Ложь;
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);

КонецПроцедуры

#КонецЕсли