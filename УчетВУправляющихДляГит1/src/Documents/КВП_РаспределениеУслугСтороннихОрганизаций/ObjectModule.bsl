
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЭкспортныеПроцедурыИФункции

// Возвращает сумму документа в валюте регл. учета.
//
// Возвращаемое значение:
//  Число – сумма в валюте регл. учета.
//
Функция СуммаДокумента(Документ) Экспорт

	СуммаДокумента = Документ.Услуги.Итог("Сумма");
	Если Документ.УчитыватьНДС И НЕ Документ.СуммаВключаетНДС Тогда
		СуммаДокумента = СуммаДокумента + Документ.Услуги.Итог("СуммаНДС");
	КонецЕсли;

	Если Документ.КратностьВзаиморасчетов = 0 Тогда
		Возврат СуммаДокумента;
	КонецЕсли;

	Возврат СуммаДокумента * Документ.КурсВзаиморасчетов / Документ.КратностьВзаиморасчетов;

КонецФункции // СуммаДокумента()

// Рассчитывает сумму документов оказания услуг.
Функция СуммаДокументов() Экспорт

	СуммаРаспределения = 0;
	Для Каждого СтрокаДокумента Из ДокументыОказанияУслуг Цикл
		СуммаРаспределения = СуммаРаспределения + СуммаДокумента(СтрокаДокумента.Документ);
	КонецЦикла;

	Возврат СуммаРаспределения;

КонецФункции // СуммаДокументов()

// Формирует таблицу услуг по документам.
Функция СформироватьТаблицуУслуг() Экспорт
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийРаспределениеУслуг.РаспределениеПоДокументам Тогда
		ТаблицаУслуг = ТаблицаРаспределения.ВыгрузитьКолонки("Номенклатура,Сумма,Количество");
		Для Каждого СтрокаДокумента Из ДокументыОказанияУслуг Цикл
			Документ = СтрокаДокумента.Документ;
			ДобавлятьНДС = (НЕ Документ.СуммаВключаетНДС);
			КоэффициентВалюты = ?(Документ.КратностьВзаиморасчетов = 0, 1,
			                                                  Документ.КурсВзаиморасчетов / Документ.КратностьВзаиморасчетов);
			Для Каждого СтрокаУслуг Из Документ.Услуги Цикл
				НоваяСтрока = ТаблицаУслуг.Добавить();
				НоваяСтрока.Номенклатура = СтрокаУслуг.Номенклатура;
				НоваяСтрока.Сумма        = (СтрокаУслуг.Сумма + ?(ДобавлятьНДС, СтрокаУслуг.СуммаНДС, 0)) * КоэффициентВалюты;
				НоваяСтрока.Количество   = СтрокаУслуг.Количество;
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийРаспределениеУслуг.РаспределениеПрочее Тогда
		ТаблицаУслуг = Услуги.Выгрузить(, "Номенклатура,Сумма,Количество");
	КонецЕсли;
	
	ТаблицаУслуг.Свернуть("Номенклатура", "Сумма, Количество");
	
	Возврат ТаблицаУслуг;
	
КонецФункции // СформироватьТаблицуУслуг()

// Производит распределение сумм.
Процедура РаспределитьСумму() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СпособРаспределения) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран способ распределения");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТипПлощади) 
		И СпособРаспределения = "по площади" Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран тип площади здания");
		Возврат;
	КонецЕсли;
	
	// Сформируем таблицу коэффициентов.
	ТаблицаКоэффициентов = ТаблицаОбъектов.Выгрузить();
	ТаблицаКоэффициентов.Колонки.Сумма.Имя = "Показатель";
	ЗаполнитьТаблицуКоэффициентовРаспределенияПоЗданиям(ТаблицаКоэффициентов, СпособРаспределения, Дата, ТипПлощади);
	
	ТаблицаУслуг = СформироватьТаблицуУслуг();
	
	// Распределим сумму.
	
	ТаблицаРаспределения.Очистить();
	СуммаКоэффициента  = ТаблицаКоэффициентов.Итог("Показатель");
	Если НЕ СуммаКоэффициента = 0 Тогда
		
		Для Каждого СтрокаУслуги Из ТаблицаУслуг Цикл
			
			// получим количество распределения
			КоличествоРаспределения = СтрокаУслуги.Количество;
			КоличествоРаспрОстаток  = КоличествоРаспределения;
			
			// получим сумму распределения
			СуммаРаспределения = СтрокаУслуги.Сумма;
			СуммаРаспрОстаток  = СуммаРаспределения;
			
			СтрокиРаспределения = Новый Массив();
			Для Каждого СтрокаКоэффициента Из ТаблицаКоэффициентов Цикл
				СтрокаТабличнойЧасти = ТаблицаРаспределения.Добавить();
				СтрокаТабличнойЧасти.Объект           = СтрокаКоэффициента.Объект;
				СтрокаТабличнойЧасти.Номенклатура     = СтрокаУслуги.Номенклатура;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаУслуги.Номенклатура.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Количество       = КоличествоРаспределения * СтрокаКоэффициента.Показатель / СуммаКоэффициента;
				КоличествоРаспрОстаток = КоличествоРаспрОстаток - СтрокаТабличнойЧасти.Количество;
				
				СтрокаТабличнойЧасти.Сумма            = СуммаРаспределения * СтрокаКоэффициента.Показатель / СуммаКоэффициента;
				СуммаРаспрОстаток = СуммаРаспрОстаток - СтрокаТабличнойЧасти.Сумма;
				
				СтрокиРаспределения.Добавить(СтрокаТабличнойЧасти);
			КонецЦикла;
			
			// Пройдем по добавленным строкам, чтобы распределить не распределившиеся остатки.
			ТекИндексСтроки = СтрокиРаспределения.ВГраница();
			Пока ТекИндексСтроки >= 0 И (НЕ КоличествоРаспрОстаток = 0 Или НЕ СуммаРаспрОстаток = 0) Цикл
				СтрокаРаспределения = СтрокиРаспределения.Получить(ТекИндексСтроки);
				
				// Определим возможное значение для корректировки - чтобы не выйти за 0.
				ТекКорректировка = (Макс(СтрокаРаспределения.Количество + КоличествоРаспрОстаток, 0)
								 - СтрокаРаспределения.Количество);
				// Корректируем на найденную величину значение в строке и уменьшаем нераспределенный остаток.
				СтрокаРаспределения.Количество = СтрокаРаспределения.Количество + ТекКорректировка;
				КоличествоРаспрОстаток         = КоличествоРаспрОстаток         - ТекКорректировка;
				
				// Определим возможное значение для корректировки - чтобы не выйти за 0.
				ТекКорректировка = (?(СтрокаРаспределения.Сумма >= 0,
									  Макс(СтрокаРаспределения.Сумма + СуммаРаспрОстаток, 0),
									  Мин(СтрокаРаспределения.Сумма + СуммаРаспрОстаток, 0)) - СтрокаРаспределения.Сумма);
				// Корректируем на найденную величину значение в строке и уменьшаем нераспределенный остаток.
				СтрокаРаспределения.Сумма = СтрокаРаспределения.Сумма + ТекКорректировка;
				СуммаРаспрОстаток         = СуммаРаспрОстаток         - ТекКорректировка;
				
				ТекИндексСтроки = ТекИндексСтроки - 1;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьСумму()

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Процедура проверяет правильность заполнения реквизитов документа.
Процедура ПроверитьЗаполнениеТабличныхЧастей(ТаблицаПоТаблицеРаспределения, СтруктураШапкиДокумента, 
																				   Отказ, Заголовок) Экспорт
	
	// Проверим, весь ли материал распределен.
	ТаблицаУслуг = СформироватьТаблицуУслуг();
	Для Каждого СтрокаТЧ Из ТаблицаУслуг Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В табличной части ""Документы"": ";
		
		СтрокиРаспределения = ТаблицаПоТаблицеРаспределения.НайтиСтроки(Новый Структура("Номенклатура",
			СтрокаТЧ.Номенклатура));
		Если СтрокиРаспределения.Количество() = 0 Тогда
			СтрокаСообщения = "Не распределена услуга """ + СтрокаТЧ.Номенклатура + """!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		СуммКолво = 0;
		СуммСумма = 0;
		Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			СуммКолво = СуммКолво + СтрокаРаспределения.Количество;
			СуммСумма = СуммСумма + СтрокаРаспределения.Сумма;
		КонецЦикла;
		
		// На данный момент проверку не выполняем, так как в старых документах
		// количество в таблице распределения не заполнено, а при перепроведении
		// документов у клиентов возникнут ошибки.
		Если Не СуммКолво = 0 И НЕ СуммКолво = СтрокаТЧ.Количество Тогда
			СтрокаСообщения = "Количество распределения услуги """ + СтрокаТЧ.Номенклатура + """ некорректное (" + СуммКолво + " вместо " + СтрокаТЧ.Количество + ")!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ СуммСумма = СтрокаТЧ.Сумма Тогда
			СтрокаСообщения = "Сумма распределения услуги """ + СтрокаТЧ.Номенклатура + """ некорректная (" + СуммСумма + " вместо " + СтрокаТЧ.Сумма + ")!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим, все ли услуги распределены.
	Для Каждого СтрокаТЧ Из ТаблицаПоТаблицеРаспределения Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(СтрокаТЧ.НомерСтроки)
									  + """ табличной части ""Таблица распределения"": ";
		
		СтрокаМатериала = ТаблицаУслуг.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
		Если СтрокаМатериала = Неопределено Тогда
			СтрокаСообщения = "Услуга """ + СтрокаТЧ.Номенклатура + """ не должна быть распределена!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличныхЧастей()

// Функция списания материалов с регистра ТоварыНаСкладе.
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТаблицеРаспределения, Отказ, Заголовок, РежимПроведения)
	
	// Проведение по регистрам учета подомовых затрат.
	ДвиженияПоРегистрамПодомовыхЗатрат(СтруктураШапкиДокумента, ТаблицаПоТаблицеРаспределения, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует движения по регистрам подомовых затрат.
Процедура ДвиженияПоРегистрамПодомовыхЗатрат(СтруктураШапкиДокумента, ТаблицаПоТаблицеРаспределения, Отказ, Заголовок)
	
	НаборДвижений = Движения.КВП_ЗатратыПодомовогоУчета;
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоТаблицеРаспределения Цикл
		
		Если СтрокаТабличнойЧасти.Сумма = 0 И СтрокаТабличнойЧасти.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = НаборДвижений.Добавить();
		Движение.Период = СтруктураШапкиДокумента.Дата;
		
		// измерения
		Движение.Организация  = СтруктураШапкиДокумента.Организация;
		Движение.Здание       = СтрокаТабличнойЧасти.Объект;
		Движение.ВидЗатрат    = Перечисления.КВП_ВидыПодомовыхЗатрат.УслугиСтороннихОрганизаций;
		Движение.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
		
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Услуга) Тогда
			Движение.Услуга   = СтруктураШапкиДокумента.Услуга;
		Иначе
			Движение.Услуга   = СтрокаТабличнойЧасти.Номенклатура;
		КонецЕсли;
		
		// ресурсы
		Движение.Сумма        = СтрокаТабличнойЧасти.Сумма;
		Движение.Количество   = СтрокаТабличнойЧасти.Количество;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрамПодомовыхЗатрат()

// Процедура проверяет на дублирование использование документов "Поступление товаров и услуг".
//
// Параметры:
//  Отказ - <Булево>
//        - Отмена редактирования.
//
Процедура ПроверитьДокументыПоступленияТоваровИУслуг(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_РаспределениеУслугСтороннихОрганизаций.ДокументыОказанияУслуг.(
	|		Ссылка,
	|		Документ
	|	) КАК Таблица
	|ИЗ
	|	Документ.КВП_РаспределениеУслугСтороннихОрганизаций КАК КВП_РаспределениеУслугСтороннихОрганизаций
	|ГДЕ
	|	КВП_РаспределениеУслугСтороннихОрганизаций.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийРаспределениеУслуг.РаспределениеПоДокументам)
	|	И НЕ КВП_РаспределениеУслугСтороннихОрганизаций.ПометкаУдаления
	|	И КВП_РаспределениеУслугСтороннихОрганизаций.Проведен
	|	И НЕ КВП_РаспределениеУслугСтороннихОрганизаций.Ссылка = &ТекущийДокумент
	|	И КВП_РаспределениеУслугСтороннихОрганизаций.ДокументыОказанияУслуг.Документ В (&Документы)";
	
	СписокДокументов = Новый СписокЗначений;
	Для Каждого Документ Из ДокументыОказанияУслуг Цикл
		СписокДокументов.Добавить(Документ.Документ);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Документы",        СписокДокументов);
	Запрос.УстановитьПараметр("ТекущийДокумент",  ЭтотОбъект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если НЕ Результат.Количество() = 0 Тогда
		
		Отказ = Истина;
		
		Для Каждого ТаблицаДокумента Из Результат Цикл
			
			Для Каждого СтрокаТаблицы Из ТаблицаДокумента.Таблица Цикл
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для документа-основания """ +Строка(СтрокаТаблицы.Документ)+ """ 
												  |уже введен документ """ + Строка(СтрокаТаблицы.Ссылка) + """");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДокументыПоступленияТоваровИУслуг()

#КонецОбласти

#Область ОбработчикиСобытий

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = 
		Документы.КВП_РаспределениеУслугСтороннихОрганизаций.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента       = ПараметрыПроведения.Реквизиты;
	ТаблицаПоТаблицеРаспределения = ПараметрыПроведения.ТаблицаПоТаблицеРаспределения;
	
	// Проверить заполнение ТЧ.
	ПроверитьЗаполнениеТабличныхЧастей(ТаблицаПоТаблицеРаспределения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьДокументыПоступленияТоваровИУслуг(Отказ);
	
	Если Не Отказ Тогда
		// Формирование движения регистров
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТаблицеРаспределения, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "УдаленияПроведения". 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события "ПередЗаписью" объекта.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийРаспределениеУслуг.РаспределениеПоДокументам Тогда
		Услуги.Очистить();
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийРаспределениеУслуг.РаспределениеПрочее Тогда
		ДокументыОказанияУслуг.Очистить();
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах.
	СуммаДокумента = КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "ТаблицаРаспределения", "Сумма");
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("СпособРаспределения");
	
	Если СпособРаспределения = "по площади" Тогда
		ПроверяемыеРеквизиты.Добавить("ТипПлощади");
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("ТаблицаРаспределения.Объект");
	ПроверяемыеРеквизиты.Добавить("ТаблицаРаспределения.Номенклатура");
	
	// Здесь товаров быть не должно.
	Для Каждого СтрокаТаблицы Из ТаблицаРаспределения Цикл
		
		Если Не СтрокаТаблицы.Номенклатура.Услуга Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки)
														   + """ табличной части """ + "Таблица распределения"
														   + """: содержится номенклатура, не являющаяся услугой. "
														   + "Здесь могут быть только услуги!", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли