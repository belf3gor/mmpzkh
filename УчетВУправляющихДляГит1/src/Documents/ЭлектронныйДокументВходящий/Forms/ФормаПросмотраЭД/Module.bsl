
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоЧтенияЭД(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) Тогда
		Отказ = Истина; // Создание входящих документов вручную запрещено.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ЗаполнитьДеревоПодчиненныеЭДНаСервере();
	
	СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
	Если Параметры.Свойство("ФайлЭлектронногоДокумента", ПрисоединенныйФайлСсылка) Тогда
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"Ссылка", ИдентификаторТекущейСтроки, СтрокиДерева, ПрисоединенныйФайлСсылка, Ложь);
		Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока = ИдентификаторТекущейСтроки;
	Иначе
		ИдентификаторТекущейСтроки = СтрокиДерева[0].ПолучитьИдентификатор();
		ПрисоединенныйФайлСсылка   = СтрокиДерева[0].Ссылка;
	КонецЕсли;
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
		И СтрокиДерева[0].Расширение = "xml" Тогда
		ДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СтрокиДерева[0].Ссылка);
		ПараметрыПроизвольногоДокумента = ОбменСКонтрагентамиСлужебный.ПараметрыФайлаПроизвольногоДокумента(ДанныеФайла);
		Если ПараметрыПроизвольногоДокумента <> Неопределено Тогда
			СтрокиДерева[0].ИмяРеквизита = "ТабличныйДокументФайлаОтправителя";
			Если Объект.ТипДокумента = Перечисления.ТипыЭД.Прочее
				И Объект.ТипДокумента <> ПараметрыПроизвольногоДокумента.ТипДокумента Тогда
				ИзменитьТипДокумента(ПараметрыПроизвольногоДокумента.ТипДокумента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьДанныеИзНастроекНаСервере();
	
	ПоказатьПредставлениеФайлаЭлектронногоДокумента();
	
	ОбменЧерезОператора = ОбменЧерезОператора();
	
	ИспользуетсяНесколькоОрганизацийЭД = ЭлектронноеВзаимодействиеСлужебный.ИспользуетсяНесколькоОрганизаций();
	
	ИнформацияОДокументе = ?(Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД, Строка(Объект.ТипДокумента) + ", ", "")
		+ Объект.Контрагент
		+ ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента), ", " + Объект.ДоговорКонтрагента, "")
		+ ?(ИспользуетсяНесколькоОрганизацийЭД, ", " + Объект.Организация, "");
	
	Заголовок = ОбменСКонтрагентамиСлужебный.ПолучитьПредставлениеЭД(Объект.Ссылка);
	ТекстСостояния = ОбменСКонтрагентамиКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка);
	
	Если Объект.ВидЭД <> Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Элементы.СтраницаПрисоединенныйФайл.Видимость = Ложь;
	КонецЕсли;
	
	ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	СопроводительнаяЗаписка = ТекущаяСтрокаДерева.ДополнительнаяИнформация;
	
	Если Параметры.ТолькоПросмотр Тогда
		Элементы.ГруппаКомандЕще.Видимость = Ложь;
		Элементы.ОсновныеКоманды.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьТаблицуЭП();
	ПерезаполнитьКомментарии();
	ИзменитьВидимостьДоступностьНаСервере();
	
	ПроверитьВозможностьОтраженияВУчете();
	ПодготовитьОтражениеВУчете();
	НастроитьЭлементыОтраженияВУчете();
	
	ВидимостьГруппыСохраненияНастроек = ЭтотОбъект.ЕстьВозможностьОтраженияВУчете
		И Не ЭтотОбъект.ОтраженВУчете;
		
	СпрашиватьПроСохранениеНастроекУчета = ОбменСКонтрагентамиСлужебный.ПредложитьСохранитьНастройкуОтраженияВУчете(
		Объект.Контрагент, Объект.Организация, Объект.ИдентификаторКонтрагента, Объект.ИдентификаторОрганизации,
		Объект.ВидЭД, Объект.ПрикладнойВидЭД);
			
	Элементы.ГруппаНастройкиОтраженияВУчете.Видимость = ВидимостьГруппыСохраненияНастроек
		И СпрашиватьПроСохранениеНастроекУчета И Объект.ДокументыОснования.Количество() = 0;
		
	Шаблон = НСтр("ru = 'Настройки отражения в учете будут сохранены для контрагента %1.'");
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрШаблон(Шаблон, Объект.Контрагент));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Отменить'"),,,,"Отменить"));
	
	Элементы.НадписьНастройкаОтраженияВУчете.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОжидатьФормированиеПредставленияФайлаЭлектронногоДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		
		ОбработатьОповещение = Истина;
		
		ОбменСКонтрагентамиСлужебныйКлиент.ПриОбработкеОповещенияФормыПросмотраЭД(ЭтотОбъект, Параметр, ОбработатьОповещение);
		
		Если Не ОбработатьОповещение Тогда
			Возврат;
		КонецЕсли;
		
		ИзменитьДоступностьКнопокПодписания(Истина);
		
		ОбработатьОбновлениеСостоянияЭД();
		
	ИначеЕсли ИмяСобытия = "ОповеститьОСозданииУведомления" И Параметр = ПрисоединенныйФайлСсылка Тогда
		ПоместитьТекстУточненияВОбъект(Объект.Ссылка, ТекстУточнения);
		ИзменитьСтатусОтклонить();
		
		ОбработатьОбновлениеСостоянияЭД();
		
	ИначеЕсли ИмяСобытия = "ЭлектронныйДокументВходящий_ПодборДокументаУчета" И Параметр = Объект.Ссылка Тогда
		
		ОбработатьОбновлениеСостоянияЭД();
		
	ИначеЕсли ИмяСобытия = "ПроведенаПроверкаЭП" Тогда
		
		ЗаполнитьТаблицуЭП();
		Для Каждого ЭД Из Параметр Цикл
			Если ЭД = ПрисоединенныйФайлСсылка Тогда
				ОбновитьОтображениеДанных();
				ТекущаяСтрока = Элементы.ТаблицаЭП.ТекущиеДанные;
				ЗаполнитьТаблицуЭП();
				Если ТекущаяСтрока <> Неопределено Тогда
					Элементы.ТаблицаЭП.ТекущаяСтрока = ТаблицаЭП[ТекущаяСтрока.НомерСтроки-1].ПолучитьИдентификатор();
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ИДПараметра = "ЭлектронноеВзаимодействие." + УникальныйИдентификатор;
	ПараметрыФормы = ПараметрыПриложения[ИДПараметра];
	Если ПараметрыФормы <> Неопределено Тогда
		ПараметрыПриложения.Удалить(ИДПараметра);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПричиныОтклоненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.ПричинаОтклонения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектДополнительнаяИнформацияПриИзменении(Элемент)
	
	ИзменитьТекстСопроводительнойЗаписки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВложениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеФайла = ДанныеФайлаВложения(ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОшибкиСопоставленияНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Сопоставить" Тогда
	
		СтандартнаяОбработка = Ложь;
	
		ОткрытьСопоставлениеНоменклатуры();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НадписьОшибкаФормированияПредставленияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЖурналРегистрации" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОтборЖурналаРегистрации = Новый Структура;
		ОтборЖурналаРегистрации.Вставить("Данные", ПрисоединенныйФайлСсылка);
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ОтборЖурналаРегистрации, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкаОтраженияВУчетеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗапретитьСпрашиватьПроСохранениеНастроекУчета();
КонецПроцедуры

&НаКлиенте
Процедура КартинкаОбновитьНажатие(Элемент)
	Элементы.КартинкаОбновить.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьИПолучитьЭДЗавершение", ЭтотОбъект);
	ОбменСКонтрагентамиСлужебныйКлиент.НачатьОтправкуПолучениеЭлектронныхДокументов(Оповещение,,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ИдентификаторОрганизации));
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПрекращениеПоддержкиПрямогоОбменаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ЭДО" Тогда
		СтандартнаяОбработка = Ложь;
		СсылкаНаОписание1СЭДО = ОбменСКонтрагентамиСлужебныйКлиент.СсылкаНаОписание1СЭДО();
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаНаОписание1СЭДО);
		
	ИначеЕсли НавигационнаяСсылка = "БизнесСеть" Тогда
		СтандартнаяОбработка = Ложь;
		СсылкаНаПромоСайтЭДО = БизнесСетьКлиентСервер.ГиперссылкаНаПромоСайтЭДО();
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаНаПромоСайтЭДО);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЭП

&НаКлиенте
Процедура ЭПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПоказатьСертификат(Элемент.ТекущиеДанные.НомерСтроки, Элемент.ТекущиеДанные.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КомандРаботыСЭД

&НаКлиенте
Процедура Отклонить(Команда)
	
	ОтклонитьАннулироватьЭД(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЭДНаДиск(Команда)
	
	РаботаСФайламиКлиент.СохранитьВместеСЭП(ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналСобытийЭДО(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайлСсылка);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.ЖурналСобытийЭД.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	Если ТаблицаЭП.Количество() > 0 Тогда
		Если Элементы.ТаблицаЭП.ТекущиеДанные <> Неопределено Тогда
			ПоказатьСертификат(Элементы.ТаблицаЭП.ТекущиеДанные.НомерСтроки, Элементы.ТаблицаЭП.ТекущиеДанные.Отпечаток);
		Иначе
			ОчиститьСообщения();
			ТекстОшибки = НСтр("ru = 'Выберите сертификат в списке установленных подписей.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ОчиститьСообщения();
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПодписиИСтатусы;
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		ВторойТитул = ВторойТитулДокумента(ПрисоединенныйФайлСсылка);
		Если ЗначениеЗаполнено(ВторойТитул) Тогда
			ОбменСКонтрагентамиСлужебныйКлиент.ОпределитьСтатусыПодписей(ВторойТитул);
		КонецЕсли;
		ОбменСКонтрагентамиСлужебныйКлиент.ОпределитьСтатусыПодписей(ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	ОчиститьСообщения();
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(ПрисоединенныйФайлСсылка);
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	
	ОбменСКонтрагентамиСлужебныйКлиент.УтвердитьЭД(МассивДокументов, МассивЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписатьОтправитьЭД(Команда)
	
	ПодписатьОтправитьЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	ОбменСКонтрагентамиКлиент.ОтправитьПовторноЭД(Объект.Ссылка, ПрисоединенныйФайлСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписатьЭД(Команда)
	
	ПодписатьОтправитьЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЭД(Команда)
	
	Элементы.КомандаОтправить.Доступность = Ложь;
	
	ПодключитьОбработчикОжидания("ОтправитьПакетыЭД", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЭД(Команда)
	
	ОтклонитьАннулироватьЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)
	
	ОтклонитьАннулирование = Ложь;
	ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ОтклонитьАннулирование = Истина;
	ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ОбработатьПеренаправлениеЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаписку(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДополнительнаяИнформация) Тогда
		
		СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", "");
		ИзменитьЗначенияРеквизитовНаСервере(ПрисоединенныйФайлСсылка, СтруктураПараметров);
		
		СопроводительнаяЗаписка = "";
		
		ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
		ТекущаяСтрокаДерева.ДополнительнаяИнформация = СопроводительнаяЗаписка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительнуюИнформацию(Команда)
	
	ОтключитьВыводДопДанных = Не ОтключитьВыводДопДанных;
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОбластьКопияВерна(Команда)
	
	ОтключитьВыводКопияВерна = Не ОтключитьВыводКопияВерна;
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроизвольныйДокумент(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.СоздатьПроизвольныйЭДНаОсновании(Объект.Ссылка, Новый Структура("Источник", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьЭДОПродолжить", ЭтотОбъект);
	ВводСтрокиЗаголовок = НСтр("ru = 'Укажите причины завершения документооборота'");
	ПоказатьВводСтроки(Оповещение, , ВводСтрокиЗаголовок, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьБанковскиеРеквизиты(Команда)
	
	ВыводитьБанковскиеРеквизиты = Не ВыводитьБанковскиеРеквизиты;
	Элементы.КомандаОтображатьБанковскиеРеквизиты.Пометка = ВыводитьБанковскиеРеквизиты;
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетДокумента(Команда)
	
	Пакет = ОбменСКонтрагентамиСлужебныйВызовСервера.ПакетЭДПоПрисоединенномуФайлу(ПрисоединенныйФайлСсылка);
	Если ЗначениеЗаполнено(Пакет) Тогда
		ПоказатьЗначение(, Пакет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыОтраженияВУчете

&НаКлиенте
Процедура СоздатьДокументУчета(Команда)
	
	ПоказатьВыборСозданияДокументаУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументУчета1(Команда)
	
	ПоказатьВыборПодбораДокументаУчета(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументУчета2(Команда)
	
	ПоказатьВыборПодбораДокументаУчета(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументУчета1(Команда)
	
	ОткрытьДокументУчета(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументУчета2(Команда)
	
	ОткрытьДокументУчета(2);
	
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязьДокументаУчета1(Команда)
	
	ПоказатьВопросОРазрывеСвязи(1);
	
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязьДокументаУчета2(Команда)
	
	ПоказатьВопросОРазрывеСвязи(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеДокументыУчета(Команда)
	
	ПоказатьРасширенныйПодборДокументовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуЭДО(Команда)
	
	ОткрытьНастройкуОтраженияВУчете();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	Если ПустаяСтрока(Комментарий) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Описание", Комментарий);
	ИзменитьЗначенияРеквизитовНаСервере(ПрисоединенныйФайлСсылка, СтруктураПараметров);
	Комментарий = "";
	
	ПерезаполнитьКомментарии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДерево(Команда)
	
	ОтключитьВыводДерева = Не ОтключитьВыводДерева;
	Элементы.КомандаОтображатьДерево.Пометка = Не ОтключитьВыводДерева;
	Элементы.ДеревоПодчиненныеЭД.Видимость = Не ОтключитьВыводДерева;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСЭлектроннымДокументом

&НаКлиенте
Процедура ПодписатьОтправитьЭД()
	
	ИзменитьДоступностьКнопокПодписания(Ложь);
	
	ОчиститьСообщения();
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(ПрисоединенныйФайлСсылка);
	
	МассивДокументов = Новый Массив;
	
	ОбменСКонтрагентамиКлиент.СформироватьПодписатьОтправитьЭД(МассивДокументов, МассивЭД);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьКнопокПодписания(ДоступностьКоманд)

	Элементы.КомандаПодписать.Доступность          = ДоступностьКоманд;
	Элементы.КомандаПодписатьОтправить.Доступность = ДоступностьКоманд;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеЭД()
	
	ДокументыУчета = Новый Массив;
	ДокументыУчета.Добавить(Объект.Ссылка);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДокументыУчета", ДокументыУчета);
	
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПакетыЭД()
	
	ПакетыЭД = НайтиСоздатьПакетыЭлектронныхДокументов(ДеревоПодчиненныеЭД, ПрисоединенныйФайлСсылка, ТребуетсяПодпись);
	
	Если ЗначениеЗаполнено(ПакетыЭД) Тогда
		ОбменСКонтрагентамиСлужебныйКлиент.ОтправитьМассивПакетовЭД(ПакетыЭД);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСоздатьПакетыЭлектронныхДокументов(Знач ДеревоПодчиненныеЭД, Знач ПрисоединенныйФайлСсылка, Знач ПризнакПодписи)
	
	ДокументыКОтправке = ДокументыКОтправке(ДеревоПодчиненныеЭД, ПрисоединенныйФайлСсылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ПакетЭДЭлектронныеДокументы.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПакетЭД КАК ПакетЭД
		|		ПО ПакетЭДЭлектронныеДокументы.Ссылка = ПакетЭД.Ссылка
		|ГДЕ
		|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент В(&ЭлектронныйДокумент)
		|	И НЕ ПакетЭД.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПакетЭД.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДокументыКОтправке);
	
	ПакетыЭД = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Пока Выборка.СледующийПоЗначениюПоля("ЭлектронныйДокумент") Цикл 
		Индекс = ДокументыКОтправке.Найти(Выборка.ЭлектронныйДокумент);
		Если Индекс <> Неопределено Тогда
			ДокументыКОтправке.Удалить(Индекс);
		КонецЕсли;
		
		ПакетыЭД.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДокументыКОтправке) Тогда
		ДанныеПакетовЭД = ОбменСКонтрагентамиСлужебный.СоздатьДокументыПакетовЭД(ДокументыКОтправке, ПризнакПодписи);
		Для Каждого ДанныеПакетаЭД Из ДанныеПакетовЭД Цикл
			ПакетыЭД.Добавить(ДанныеПакетаЭД.ПЭД);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПакетыЭД;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьТекстСопроводительнойЗаписки(ТекстЗаписки)
	
	СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", СопроводительнаяЗаписка);
	ИзменитьЗначенияРеквизитовНаСервере(ПрисоединенныйФайлСсылка, СтруктураПараметров);
	
	ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ТекущаяСтрокаДерева.ДополнительнаяИнформация = СопроводительнаяЗаписка;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗначенияРеквизитовНаСервере(Знач Ссылка, Знач СтруктураПараметров)
	
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Ссылка, СтруктураПараметров, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПеренаправлениеЭД()
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(ПрисоединенныйФайлСсылка);
	ОбменСКонтрагентамиСлужебныйКлиент.ИзменитьОтветственного(МассивЭД, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьКомментарии()
	
	ВсеКомментарии = "";
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЖурналСобытийЭД.Пользователь.Представление КАК Пользователь,
		|	ЖурналСобытийЭД.Дата КАК Дата,
		|	ЖурналСобытийЭД.СтатусЭД,
		|	ЖурналСобытийЭД.Ответственный.Представление КАК Ответственный,
		|	ЖурналСобытийЭД.Комментарий
		|ИЗ
		|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
		|ГДЕ
		|	ЖурналСобытийЭД.ПрисоединенныйФайл = &Ссылка
		|	И ЖурналСобытийЭД.Комментарий <> &ПустаяСтрока
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
	Запрос.УстановитьПараметр("Ссылка", ПрисоединенныйФайлСсылка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Выборка = Результат.Выбрать();
	ШаблонКомментария = НСтр("ru = '%1, %2 (статус - %3, ответственный - %4):
		|%5'");
	ПредыдущийКомментарий = "";
	ПервыйКомментарий = Истина;
	Массив = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ТекущийКомментарий = СокрЛП(Выборка.Комментарий);
		Если ПредыдущийКомментарий = ТекущийКомментарий Тогда
			Продолжить;
		КонецЕсли;
		ПредыдущийКомментарий = ТекущийКомментарий;
		СтрокаКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария,
				Выборка.Дата, Выборка.Пользователь, Выборка.СтатусЭД, Выборка.Ответственный, ТекущийКомментарий);
		Массив.Добавить(СтрокаКомментария);
		ПервыйКомментарий = Ложь;
	КонецЦикла;
	Если Массив.Количество() > 0 Тогда
		ПервыйКомментарий = Истина;
		Для Сч = -Массив.Количество() + 1 По 0 Цикл
			СтрокаКомментария = Массив[-Сч];
			ВсеКомментарии = ВсеКомментарии
				+ СтрокаКомментария
				+ ?(ПервыйКомментарий, Символы.ПС + "------------------------------------", "")
				+ Символы.ПС
				+ Символы.ПС;
			ПервыйКомментарий = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьДоступность()
	
	ИзменитьВидимостьДоступностьНаСервере();
	
	СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
	
	Если СтрокиДерева.Количество() > 0 Тогда
		Элементы.ДеревоПодчиненныеЭД.Развернуть(СтрокиДерева[0].ПолучитьИдентификатор(),Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
		НоваяСтрока.ПодписьВернаПредставление = ?(ТекСтрока.ПодписьВерна, НСтр("ru = 'Верна'"), НСтр("ru = 'Неверна'"))
			+" (" + ТекСтрока.ДатаПроверкиПодписи + ")";
	Иначе
		НоваяСтрока.ПодписьВернаПредставление = НСтр("ru = 'Не проверена'");
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСертификат(НомерСтроки, Отпечаток)
	
	АдресДанныхСертификата = АдресДанныхСертификата(НомерСтроки);
	
	СтруктураСертификата = ОбменСКонтрагентамиСлужебныйВызовСервера.СвойстваСертификата(АдресДанныхСертификата);
	
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата",
			СтруктураСертификата, Отпечаток, АдресДанныхСертификата);
		ОткрытьФорму("ОбщаяФорма.Сертификат", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоместитьТекстУточненияВОбъект(ЭД,ТекстУточнения)
	
	НачатьТранзакцию();
	Попытка
		ЭлектронныйДокументОбъект = ЭлектронноеВзаимодействиеСлужебный.ОбъектПоСсылкеДляИзменения(ЭД);
		ЭлектронныйДокументОбъект.ПричинаОтклонения = ТекстУточнения;
		ЭлектронныйДокументОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ЭДОАннулированИлиВПроцессе()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Аннулирован
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
	|		ПО ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &ЭД
	|	И ВЫБОР
	|			КОГДА ЭДВладелецЭД.Ссылка ЕСТЬ NULL 
	|				ТОГДА ЭДПрисоединенныеФайлы.СтатусЭД В (&СписокСтатусовСАннулированием)
	|			ИНАЧЕ ЭДВладелецЭД.СтатусЭД В (&СписокСтатусовСАннулированием)
	|		КОНЕЦ";
		
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.Аннулирован);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании);
	Запрос.УстановитьПараметр("СписокСтатусовСАннулированием", МассивСостояний);
	Запрос.УстановитьПараметр("ЭД", ПрисоединенныйФайлСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат.Пустой() Тогда
		ВозвращаемоеЗначение = Ложь;
	Иначе
		ВозвращаемоеЗначение = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование)
	
	СсылкаНаЭД = ПолучитьЭлектронныйДокументВладелец();
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьПредложениеОбАннулировании(СсылкаНаЭД, ОтклонитьАннулирование);
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЭлектронныйДокументВладелец()
	
	СсылкаНаЭД = Неопределено;
	
	ДокументВладелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайлСсылка, "ЭлектронныйДокументВладелец");
	
	Если ЗначениеЗаполнено(ДокументВладелец) Тогда
		СсылкаНаЭД = ДокументВладелец;
	Иначе
		СсылкаНаЭД = ПрисоединенныйФайлСсылка;
	КонецЕсли;
	
	Возврат СсылкаНаЭД;
	
КонецФункции

&НаКлиенте
Процедура ОтклонитьАннулироватьЭД(Отклонить = Ложь)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтклонитьАннулироватьЭДПродолжить", ЭтотОбъект);
	СсылкаНаЭД = ПолучитьЭлектронныйДокументВладелец();
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьОтклонениеАннулированиеЭД(СсылкаНаЭД, Отклонить,, ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Функция АннулированиеОтклонено()
	
	Результат = Ложь;
	
	СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева[0].ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
			И (СтрокаДерева.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
				ИЛИ СтрокаДерева.СтатусЭД = Перечисления.СтатусыЭД.Отклонен) Тогда
			
			Результат = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗавершитьЭДОСервере(Результат)
	
	НовоеСостояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
	
	ВладелецЭД = Объект.Ссылка;
	ИзменяемыеДокументы = Новый Массив;
	ИзменяемыеДокументы.Добавить(ВладелецЭД);
	
	ПараметрыЭД = Новый Структура;
	
	Если ПрисоединенныйФайлСсылка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		СтатусЭД = Перечисления.СтатусыЭД.Утвержден;
	Иначе
		СтатусЭД = Перечисления.СтатусыЭД.Доставлен;
	КонецЕсли;
	
		
	ПараметрыЭД.Вставить("СтатусЭД", СтатусЭД);
	ПараметрыЭД.Вставить("Описание", Результат);
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайлСсылка, ПараметрыЭД, Ложь);
	
	ОбменСКонтрагентамиСлужебный.ИзменитьСостояниеЭД(ИзменяемыеДокументы, НовоеСостояние);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

&НаКлиенте
Процедура ЗавершитьЭДОПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьЭДОСервере(Результат);
	
	ОбновитьСостояниеЭД();

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулироватьЭДПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ИзменитьВидимостьДоступность();
		ОбновитьСостояниеЭД();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НоваяАрхитектураЭДО

&НаКлиенте
Процедура ДеревоПодчиненныеЭДПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ДеревоПодчиненныеЭДПослеАктивизацииСтроки",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодчиненныеЭДПослеАктивизацииСтроки()
	
	ИдентификаторСтрокиДерева = Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока;
	ДанныеДереваПодчиненныхЭД = Элементы.ДеревоПодчиненныеЭД.ТекущиеДанные;
	Если ДанныеДереваПодчиненныхЭД = Неопределено 
		ИЛИ ИдентификаторСтрокиДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторСтрокиДерева <> ИдентификаторТекущейСтроки
		И ЗначениеЗаполнено(ДанныеДереваПодчиненныхЭД.Ссылка) Тогда
		ИдентификаторТекущейСтроки = ИдентификаторСтрокиДерева;
		ДеревоПодчиненныеЭДПослеАктивизацииСтрокиНаСервере();
		ОжидатьФормированиеПредставленияФайлаЭлектронногоДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоПодчиненныеЭДПослеАктивизацииСтрокиНаСервере()
	
	ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	ПрисоединенныйФайлСсылка = ТекущаяСтрокаДерева.Ссылка;
	
	ЗаполнитьТаблицуЭП();
	
	ПоказатьПредставлениеФайлаЭлектронногоДокумента(ТекущаяСтрокаДерева);
	
	ИзменитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаЭП = ТаблицаЭП.Получить(Расшифровка - 1);
	
	Если СтрокаЭП <> Неопределено Тогда
		ПоказатьСертификат(СтрокаЭП.НомерСтроки, СтрокаЭП.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭПСтатус.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЭП.ПодписьВерна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 0, 0));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭД.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтрокаДоступна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДСтатусЭД.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ТипЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Получен);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Отправлен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ТипЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Доставлен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ТипЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Доставлен);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Получен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ВидЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора4 = ГруппаОтбора3.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора4.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора4.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.НаправлениеЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияЭД.Входящий;


	ОтборЭлемента = ГруппаОтбора4.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЭД.Утвержден;


	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДПредставление.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДСтатусЭД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.АктуальныйЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Истина, Ложь, Ложь, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДСтатусЭД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ДатаЭДБольшеАктуального");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПодчиненныеЭДНаСервере()
	
	ДеревоПодчиненныеЭД.ПолучитьЭлементы().Очистить();
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	СоответствиеВладельцевИЭД.Вставить(Объект.Ссылка,Объект.Ссылка);
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоПодчиненныеЭД");
	
	ОбменСКонтрагентамиСлужебный.СформироватьДеревьяЭД(ДеревоОбъект, СоответствиеВладельцевИЭД, Неопределено, Ложь);
	
	Если ДеревоОбъект.Строки.Количество() Тогда
		КорневаяСтрокаДерева = ДеревоОбъект.Строки[0];
		Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
			И КорневаяСтрокаДерева.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
			И ПараметрыПроизвольногоДокумента = Неопределено Тогда
			КорневаяСтрокаДерева.ИмяРеквизита = "ПрисоединенныйФайл";
		Иначе
			КорневаяСтрокаДерева.ИмяРеквизита = "ТабличныйДокументФайлаОтправителя";
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоПодчиненныеЭД");
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПредставлениеФайлаЭлектронногоДокумента(ТекущаяСтрокаДерева = Неопределено, ПовторноеИспользование = Истина)
	
	Если ТекущаяСтрокаДерева = Неопределено Тогда
		ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	КонецЕсли;
	
	Если ТекущаяСтрокаДерева.ИмяРеквизита = "ПрисоединенныйФайл" Тогда
		ОбновитьДанныеОВложении(ТекущаяСтрокаДерева);
		Элементы.СтраницыЭД.ТекущаяСтраница = Элементы.СтраницаПрисоединенныйФайл;
		Возврат;
		
	ИначеЕсли ПовторноеИспользование И ЗначениеЗаполнено(ТекущаяСтрокаДерева.ИмяРеквизита)
		И ЭтотОбъект[ТекущаяСтрокаДерева.ИмяРеквизита].ВысотаТаблицы > 0 Тогда
		Элементы.СтраницыЭД.ТекущаяСтраница = Элементы["Страница" + ТекущаяСтрокаДерева.ИмяРеквизита];
		Возврат;
		
	КонецЕсли;
	
	СвойстваЭлектронногоДокумента = Новый Структура;
	СвойстваЭлектронногоДокумента.Вставить("Ссылка",    			 Объект.Ссылка);
	СвойстваЭлектронногоДокумента.Вставить("ВидЭД",                  Объект.ВидЭД);
	СвойстваЭлектронногоДокумента.Вставить("ПрикладнойВидЭД",        Объект.ПрикладнойВидЭД);
	СвойстваЭлектронногоДокумента.Вставить("ТипЭлементаВерсииЭД",    Объект.ТипЭлементаВерсииЭД);
	СвойстваЭлектронногоДокумента.Вставить("ТребуетсяПодтверждение", Объект.ТребуетсяПодтверждение);
	
	СвойстваФайлаЭлектронногоДокумента = Новый Структура;
	СвойстваФайлаЭлектронногоДокумента.Вставить("Ссылка",              ТекущаяСтрокаДерева.Ссылка);
	СвойстваФайлаЭлектронногоДокумента.Вставить("СтатусЭД",            ТекущаяСтрокаДерева.СтатусЭД);
	СвойстваФайлаЭлектронногоДокумента.Вставить("НаправлениеЭД",       ТекущаяСтрокаДерева.НаправлениеЭД);
	СвойстваФайлаЭлектронногоДокумента.Вставить("ТипЭлементаВерсииЭД", ТекущаяСтрокаДерева.ТипЭД);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("СкрыватьДопДанные",                  ОтключитьВыводДопДанных);
	ПараметрыЗадания.Вставить("СкрыватьКопияВерна",                 ОтключитьВыводКопияВерна);
	ПараметрыЗадания.Вставить("ВыводитьБанковскиеРеквизиты",        ВыводитьБанковскиеРеквизиты);
	ПараметрыЗадания.Вставить("УникальныйИдентификатор",            УникальныйИдентификатор);
	ПараметрыЗадания.Вставить("СвойстваЭлектронногоДокумента",      СвойстваЭлектронногоДокумента);
	ПараметрыЗадания.Вставить("СвойстваФайлаЭлектронногоДокумента", СвойстваФайлаЭлектронногоДокумента);
	
	Если ПараметрыПроизвольногоДокумента <> Неопределено
		И ТекущаяСтрокаДерева.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
		ПараметрыЗадания.Вставить("ПараметрыПроизвольногоДокумента", ПараметрыПроизвольногоДокумента);
	КонецЕсли;
	
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебный.ЗапуститьФормированиеПредставленияФайлаЭлектронногоДокумента(
		ПараметрыЗадания, УникальныйИдентификатор);
	
	ПроверитьФормированиеПредставленияФайлаЭлектронногоДокумента(ДлительнаяОперация, ТекущаяСтрокаДерева);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПредставлениеФайлаЭлектронногоДокумента(Знач Результат)
	
	ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	ПроверитьФормированиеПредставленияФайлаЭлектронногоДокумента(Результат, ТекущаяСтрокаДерева)
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормированиеПредставленияФайлаЭлектронногоДокумента(ДлительнаяОперация, ТекущаяСтрокаДерева)
	
	Элементы.ДеревоПодчиненныеЭД.Доступность = Истина;
	
	Если ДлительнаяОперация = Неопределено Тогда
		Элементы.СтраницыЭД.ТекущаяСтраница = Элементы.СтраницаОшибкаФормированияПредставления;
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Если РезультатВыполнения = Неопределено Тогда
			Если ТекущаяСтрокаДерева.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
				И ТекущаяСтрокаДерева.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
				ОбновитьДанныеОВложении(ТекущаяСтрокаДерева);
				ТекущаяСтрокаДерева.ИмяРеквизита = "ПрисоединенныйФайл";
				Элементы.СтраницыЭД.ТекущаяСтраница = Элементы.СтраницаПрисоединенныйФайл;
			Иначе
				Элементы.СтраницыЭД.ТекущаяСтраница = Элементы.СтраницаОшибкаФормированияПредставления;
			КонецЕсли;
		Иначе
			ПредставлениеЭлектронногоДокумента = РезультатВыполнения.ПредставлениеФайлаЭлектронногоДокумента;
			Если ПустаяСтрока(ТекущаяСтрокаДерева.ИмяРеквизита) Тогда
				ОбменСКонтрагентамиСлужебный.СоздатьРеквизитыИЭлементыДляПредставленияФайлаЭлектронногоДокумента(
					ЭтотОбъект, ТекущаяСтрокаДерева);
			КонецЕсли;
			ЭтотОбъект[ТекущаяСтрокаДерева.ИмяРеквизита] = ПредставлениеЭлектронногоДокумента;
			Элементы.СтраницыЭД.ТекущаяСтраница = Элементы["Страница" + ТекущаяСтрокаДерева.ИмяРеквизита];
		КонецЕсли;
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		ФормированиеПредставления = ДлительнаяОперация;
		Элементы.ДеревоПодчиненныеЭД.Доступность = Ложь;
		Элементы.СтраницыЭД.ТекущаяСтраница = Элементы.СтраницаОжидание;
		
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		Элементы.СтраницыЭД.ТекущаяСтраница = Элементы.СтраницаОшибкаФормированияПредставления;
		
	ИначеЕсли ДлительнаяОперация.Статус = "Отменено" Тогда
		Элементы.СтраницыЭД.ТекущаяСтраница = Элементы.СтраницаОшибкаФормированияПредставления;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОВложении(ТекущаяСтрокаДерева)
	
	ПрисоединенныйФайлРасширение  = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ТекущаяСтрокаДерева.Расширение);
	ПрисоединенныйФайлИмяФайла    = СокрЛП(ТекущаяСтрокаДерева.ИмяФайла) + "." + ПрисоединенныйФайлРасширение;
	ПрисоединенныйФайлИмяФайлаБезРасширения = СокрЛП(ТекущаяСтрокаДерева.ИмяФайла);
	ПрисоединенныйФайлПиктограмма = ТекущаяСтрокаДерева.ИндексКартинки;
	Элементы.ТекстВложение.Ширина = СтрДлина(ПрисоединенныйФайлИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьФормированиеПредставленияФайлаЭлектронногоДокумента()
	
	Если ФормированиеПредставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьПредставлениеФайлаЭДПослеВыполненияДлительнойОперации", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.Вставить("ВыводитьОкноОжидания", Ложь);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФормированиеПредставления, Оповещение, ПараметрыОжидания);
	ФормированиеПредставления = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредставлениеФайлаЭДПослеВыполненияДлительнойОперации(Результат, Контекст) Экспорт
	
	ВывестиПредставлениеФайлаЭлектронногоДокумента(Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеВУчете

&НаСервере
Процедура ПодготовитьОтражениеВУчете()
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
		ВидЭлектронногоДокумента = Объект.ПрикладнойВидЭД;
	ИначеЕсли ПараметрыПроизвольногоДокумента <> Неопределено
		И ПараметрыПроизвольногоДокумента.Свойство("ВидЭДДляОтраженияВУчете") Тогда
		ВидЭлектронногоДокумента = ПараметрыПроизвольногоДокумента.ВидЭДДляОтраженияВУчете;
	Иначе
		ВидЭлектронногоДокумента = Объект.ВидЭД;
	КонецЕсли;
	
	СписокТиповДокументов = ОбменСКонтрагентамиСлужебный.СписокОперацийВидаЭД(ВидЭлектронногоДокумента);
	СписокТиповДокументовДоп = Новый СписокЗначений;
	Если Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
		Если ЗначениеЗаполнено(Объект.ДополнительныеВидыЭД) Тогда
			Для каждого СтрокаВида Из Объект.ДополнительныеВидыЭД Цикл
				ДополнительныйСписок = ОбменСКонтрагентамиСлужебный.СписокОперацийВидаЭД(СтрокаВида.ВидЭД);
				Для каждого Элемент Из ДополнительныйСписок Цикл
					Если СписокТиповДокументовДоп.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
						СписокТиповДокументовДоп.Добавить(Элемент.Значение, Элемент.Представление);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		Иначе
			СписокТиповДокументовДоп = ОбменСКонтрагентамиСлужебный.СписокОперацийВидаЭД(Перечисления.ВидыЭД.ТОРГ12Продавец);
		КонецЕсли;
	КонецЕсли;
	Для Каждого Элемент Из СписокТиповДокументовДоп Цикл
		Элемент.Значение = СокрЛП(Элемент.Значение);
		Элемент.Представление = СокрЛП(Элемент.Представление);
	КонецЦикла;
	Для Каждого Элемент Из СписокТиповДокументов Цикл
		Элемент.Значение = СокрЛП(Элемент.Значение);
		Элемент.Представление = СокрЛП(Элемент.Представление);
	КонецЦикла;
	
	Для каждого ТипДокумента Из СписокТиповДокументов Цикл
		СписокПодбораОбщий.Добавить(ТипДокумента.Значение, ТипДокумента.Представление,, БиблиотекаКартинок.ВыбратьЗначение);
		СписокПодбораОсновной.Добавить(ТипДокумента.Значение, ТипДокумента.Представление,, БиблиотекаКартинок.ВыбратьЗначение);
	КонецЦикла;
	Для каждого ТипДокумента Из СписокТиповДокументовДоп Цикл
		СписокПодбораОбщий.Добавить(ТипДокумента.Значение, ТипДокумента.Представление,, БиблиотекаКартинок.ВыбратьЗначение);
		СписокПодбораДоп.Добавить(ТипДокумента.Значение, ТипДокумента.Представление,, БиблиотекаКартинок.ВыбратьЗначение);
	КонецЦикла;
	
	Для каждого ТипДокумента Из СписокТиповДокументов Цикл
		
		Если ЗначениеЗаполнено(СписокТиповДокументовДоп) Тогда
			
			Для каждого ТипДокументаДоп Из СписокТиповДокументовДоп Цикл
				
				ПредставлениеОбщее = ТипДокумента.Представление + "; " + ТипДокументаДоп.Представление;
				ВсеЗначения = Новый Массив;
				ВсеЗначения.Добавить(ТипДокумента.Значение);
				ВсеЗначения.Добавить(ТипДокументаДоп.Значение);
				СписокСоздания.Добавить(ВсеЗначения, ПредставлениеОбщее,, БиблиотекаКартинок.СоздатьЭлементСписка);
				
			КонецЦикла;
			
		Иначе
			
			СписокСоздания.Добавить(ТипДокумента.Значение, ТипДокумента.Представление,,БиблиотекаКартинок.СоздатьЭлементСписка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокСоздания.Количество() = 1 Тогда
		
		Элементы.КомандаСоздатьДокументУчета.Заголовок = "создать """ + СписокСоздания[0].Представление + """";
		
	КонецЕсли;
	
	Если СписокПодбораОбщий.Количество() = 1 Тогда
		
		Элементы.КомандаПодобратьДокументУчета1.Заголовок = "подобрать";
		
	КонецЕсли;
	
	ЕстьНоменклатураНаКонтроле = ЕстьНоменклатураНаКонтролеПоЭлектронномуДокументу(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьОтражениеВУчете()
	
	ЕстьОсновнойДокумент = Ложь;
	
	Для Каждого Элемент Из СписокТиповДокументов Цикл
		Для Каждого СтрокаОснования Из Объект.ДокументыОснования Цикл
			Если Элемент.Значение = СтрокаОснования.СпособОбработки Тогда
				ЕстьОсновнойДокумент = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыОтраженияВУчете()
	
	ПересчитатьОтражениеВУчете();
	
	КоличествоДУ = Объект.ДокументыОснования.Количество();
	
	ЭтоСЧФДОПУПД = (Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
	ЭтоКСЧФДИСУКД = (Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
	ИспользуетсяДополнительныйДокумент = ЭтоСЧФДОПУПД ИЛИ ЭтоКСЧФДИСУКД;
	ЭтоПроизвольныйДокумент = (Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД);
	
	ЕстьОдинДУ = (КоличествоДУ > 0);
	ЕстьДваДУ = (КоличествоДУ > 1);
	ЕстьМногоДУ = (КоличествоДУ > ?(ИспользуетсяДополнительныйДокумент, 2, 1));
	
	Элементы.ГруппаСоздатьДокументУчета.Видимость = Не ЕстьОдинДУ И (Не ЭтоПроизвольныйДокумент
		ИЛИ ПараметрыПроизвольногоДокумента <> Неопределено И ПараметрыПроизвольногоДокумента.Свойство("ВидЭДДляОтраженияВУчете"));
	
	Элементы.КомандаПодобратьДокументУчета1.Видимость = Не ЕстьОдинДУ;
	Элементы.КомандаОткрытьДокументУчета1.Видимость = ЕстьОдинДУ;
	Элементы.КомандаРазорватьСвязьДокументаУчета1.Видимость = ЕстьОдинДУ;
	
	Элементы.КомандаПодобратьДокументУчета2.Видимость = ЕстьОдинДУ И Не ЕстьДваДУ И ИспользуетсяДополнительныйДокумент;
	Элементы.КомандаОткрытьДокументУчета2.Видимость = ЕстьДваДУ И ИспользуетсяДополнительныйДокумент;
	Элементы.КомандаРазорватьСвязьДокументаУчета2.Видимость = ЕстьДваДУ И ИспользуетсяДополнительныйДокумент;
	
	Если ЕстьОдинДУ Тогда
		Элементы.КомандаОткрытьДокументУчета1.Заголовок = Строка(Объект.ДокументыОснования[0].ДокументОснование);
	КонецЕсли;
	
	Если ЕстьДваДУ Тогда
		Элементы.КомандаОткрытьДокументУчета2.Заголовок = Строка(Объект.ДокументыОснования[1].ДокументОснование);
	КонецЕсли;
	
	Если ИспользуетсяДополнительныйДокумент Тогда
		
		ТекстВторогоДокумента =  НСтр("ru = 'подобрать...'");
		
		Если ЕстьОдинДУ Тогда
			
			Если ЕстьОсновнойДокумент И СписокПодбораДоп.Количество() = 1 Тогда
				
				ТекстВторогоДокумента = СтрШаблон(НСтр("ru = 'подобрать ""%1""'"), СписокПодбораДоп[0].Представление);
				
			ИначеЕсли Не ЕстьОсновнойДокумент И СписокПодбораОсновной.Количество() = 1 Тогда
				
				ТекстВторогоДокумента = СтрШаблон(НСтр("ru = 'подобрать ""%1""'"), СписокПодбораОсновной[0].Представление);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.КомандаПодобратьДокументУчета2.Заголовок = ТекстВторогоДокумента;
		
	КонецЕсли;
	
	Элементы.КомандаПоказатьВсеДокументыУчета.Видимость = ЕстьОдинДУ;
	Если ЕстьМногоДУ Тогда
		Элементы.КомандаПоказатьВсеДокументыУчета.Заголовок = СтрШаблон(НСтр("ru = 'Список документов (%1)'"), КоличествоДУ);
	Иначе
		Элементы.КомандаПоказатьВсеДокументыУчета.Заголовок = НСтр("ru = 'Еще...'");
	КонецЕсли;
	
	Элементы.НадписьДокументыУчета.Заголовок = ?(ЕстьДваДУ, НСтр("ru = 'Документы учета:'"), НСтр("ru = 'Документ учета:'"));
	
	Элементы.ГруппаОшибкиСопоставленияНоменклатуры.Видимость = ЕстьНоменклатураНаКонтроле;
	
	ПоддерживаетсяОтражениеВУчете = Истина;
	
	Если Объект.ДокументыОснования.Количество() = 0 
		И НЕ (Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
			И ПараметрыПроизвольногоДокумента = Неопределено) Тогда
		
		ВидЭлектронногоДокумента = Неопределено;
		Если ПараметрыПроизвольногоДокумента <> Неопределено
			И НЕ ПараметрыПроизвольногоДокумента.Свойство("ВидЭДДляОтраженияВУчете", ВидЭлектронногоДокумента) Тогда
			
			ПоддерживаетсяОтражениеВУчете = Ложь;
			Элементы.НадписьНевозможноОтразитьВУчете.Заголовок = 
				НСтр("ru='Отражение в учете электронного документа не поддерживается для данного формата.'");
			
		Иначе
			
			Если Объект.ВидЭД = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
				ПрикладныеВиды = ОбменСКонтрагентамиСлужебный.ПрикладныеВидыЭлектронныхДокументов();
				ПоддерживаетсяОтражениеВУчете = ПрикладныеВиды.Найти(Объект.ПрикладнойВидЭД) <> Неопределено;
			Иначе
				Если ВидЭлектронногоДокумента = Неопределено Тогда
					ВидЭлектронногоДокумента = Объект.ВидЭД;
				КонецЕсли;
				ПоддерживаетсяОтражениеВУчете = ОбменСКонтрагентамиСлужебный.ВидЭДИспользуетсяПоНаправлению(ВидЭлектронногоДокумента,
					Перечисления.НаправленияЭД.Входящий);
			КонецЕсли;
			
			Если Не ПоддерживаетсяОтражениеВУчете Тогда
				Шаблон = НСтр("ru='Отражение в учете электронного документа ""%1"", в текущей версии программы не поддерживается.'");
				Элементы.НадписьНевозможноОтразитьВУчете.Заголовок = СтрШаблон(Шаблон, ВидЭлектронногоДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ГруппаНевозможноОтразитьВУчете.Видимость = Не ПоддерживаетсяОтражениеВУчете;
		
	Иначе
		Элементы.ГруппаНевозможноОтразитьВУчете.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаОтражениеВУчете.Видимость = ПоддерживаетсяОтражениеВУчете И ЕстьВозможностьОтраженияВУчете;
	Элементы.ГруппаНевозможноОтразитьВУчете.Видимость = Не ПоддерживаетсяОтражениеВУчете ИЛИ Не ЕстьВозможностьОтраженияВУчете;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДокументыОснования(СсылкаНаДокумент,СпособОбработки = "",Удаление = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	СтрокаОснования = ДокументОбъект.ДокументыОснования.Найти(СсылкаНаДокумент,"ДокументОснование");
	
	Если Удаление И СтрокаОснования <> Неопределено  Тогда
		ДокументОбъект.ДокументыОснования.Удалить(СтрокаОснования);
	КонецЕсли;
	
	Если НЕ Удаление И СтрокаОснования = Неопределено Тогда
		НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = СсылкаНаДокумент;
		НоваяСтрока.СпособОбработки = СпособОбработки;
	КонецЕсли;	
	
	ДокументОбъект.Записать();
	
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОтраженииВУчете()
	
	Оповестить("ЭлектронныйДокументВходящий_ПодборДокументаУчета", Объект.Ссылка, ЭтотОбъект);
	Оповестить("ОбновитьТекущиеДелаЭДО");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРасширенныйПодборДокументовУчета()
	
	ОбработкаРасширенногоПодбора = Новый ОписаниеОповещения("ОбработатьРасширенныйПодборДокументовУчета", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ЭлектронныйДокумент",Объект.Ссылка);
	ОткрытьФорму("Документ.ЭлектронныйДокументВходящий.Форма.ПодборДокументовУчета",
		ПараметрыФормы, ЭтотОбъект,,,, ОбработкаРасширенногоПодбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРасширенныйПодборДокументовУчета(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьРасширенныйПодборДокументовУчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРасширенныйПодборДокументовУчетаНаСервере()
	
	ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(), "Объект");
	
	НастроитьЭлементыОтраженияВУчете();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуОтраженияВУчете()
	
	Идентификаторы = ПолучитьИдентификаторы(ПрисоединенныйФайлСсылка);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьНастройкуОтраженияВУчете(Объект.Организация, Объект.Контрагент,
		Идентификаторы.ПолучательЭД, Идентификаторы.ОтправительЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСопоставлениеНоменклатуры()
	
	НаборНоменклатурыКонтрагентов = НоменклатураКонтрагентовНаКонтролеПоЭлектронномуДокументу(Объект.Ссылка);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗавершитьСопоставлениеНоменклатуры", ЭтотОбъект);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьСопоставлениеНоменклатуры(НаборНоменклатурыКонтрагентов,, ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСопоставлениеНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ЗавершитьСопоставлениеНоменклатурыНаСервере();
	
	Оповестить("ОбновитьТекущиеДелаЭДО");
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьСопоставлениеНоменклатурыНаСервере()
	
	ЕстьНоменклатураНаКонтроле = ЕстьНоменклатураНаКонтролеПоЭлектронномуДокументу(Объект.Ссылка);
	
	НастроитьЭлементыОтраженияВУчете();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НоменклатураКонтрагентовНаКонтролеПоЭлектронномуДокументу(Знач ЭлектронныйДокумент)
	
	ОтборПоДокументу = Новый Структура("ЭлектронныйДокумент", ЭлектронныйДокумент);
	НаКонтроле = ОбменСКонтрагентамиСлужебный.НоменклатураКонтрагентовНаКонтроле(ОтборПоДокументу);
	
	Возврат НаКонтроле;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьНоменклатураНаКонтролеПоЭлектронномуДокументу(Знач ЭлектронныйДокумент)
	
	НаКонтроле = НоменклатураКонтрагентовНаКонтролеПоЭлектронномуДокументу(ЭлектронныйДокумент);
	
	Возврат ЗначениеЗаполнено(НаКонтроле);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////
// Создание документа учета

&НаКлиенте
Процедура ПоказатьВыборСозданияДокументаУчета()
	
	ОбработкаВыбора = Новый ОписаниеОповещения("ОбработатьВыборСозданияДокументаУчета", ЭтотОбъект);
	
	Если СписокСоздания.Количество() > 1 Тогда
		
		ПоказатьВыборИзМеню(ОбработкаВыбора, СписокСоздания, Элементы.КомандаСоздатьДокументУчета);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОбработкаВыбора, СписокСоздания[0]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСозданияДокументаУчета(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьДокументыУчета(ВыбранноеЗначение.Значение);
	
	ОповеститьОбОтраженииВУчете();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыУчета(Знач СпособОбработки)
	
	Если Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
		Если СпособОбработки.Количество() = 2 Тогда
			СпособОбработки = Новый Структура("ПервичныйДокумент, СчетФактура", СпособОбработки[1], СпособОбработки[0]);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЭлектронныйДокумент", Объект.Ссылка);
	ФайлЭлектронногоДокумента = ОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(Объект.Ссылка);
	Если ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(ФайлЭлектронногоДокумента.ТипЭлементаВерсииЭД) Тогда
		ФайлЭлектронногоДокумента = ФайлЭлектронногоДокумента.ЭлектронныйДокументВладелец;
	КонецЕсли;
	СтруктураПараметров.Вставить("ФайлДанныхСсылка", ОбменСКонтрагентамиСлужебный.ПолучитьДанныеЭД(ФайлЭлектронногоДокумента));
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
		НастройкаЭДО = ОбменСКонтрагентамиСлужебный.СсылкаНаОбъектНастройкиЭДО(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
		ДокументыУчета = Новый Массив;
		ДокументыУчета.Добавить(НастройкаЭДО);
		
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
		ДокументыУчета = ОбменСКонтрагентамиВнутренний.СохранитьДанныеОбъектаПрикладногоФормата(
			СтруктураПараметров, СпособОбработки);
	Иначе
		Если ПараметрыПроизвольногоДокумента <> Неопределено Тогда
			ДанныеXML = ПолучитьИзВременногоХранилища(СтруктураПараметров.ФайлДанныхСсылка);
			ДанныеCML = ОбменСКонтрагентамиСлужебный.ДанныеCMLПроизвольногоДокумента(
				ДанныеXML, ПараметрыПроизвольногоДокумента);
			Если ДанныеCML <> Неопределено Тогда
				СтруктураПараметров.Вставить("ФайлДанныхСсылка", ПоместитьВоВременноеХранилище(ДанныеCML));
			КонецЕсли;
		КонецЕсли;
		ДокументыУчета = ОбменСКонтрагентамиВнутренний.СохранитьДанныеОбъекта(СтруктураПараметров, СпособОбработки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументыУчета) Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		Для каждого Основание Из ДокументыУчета Цикл
			
			Если ДокументОбъект.ДокументыОснования.Найти(Основание, "ДокументОснование") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = Основание;
			
			Если ТипЗнч(СпособОбработки) = Тип("Структура") Тогда
				Если ОбменСКонтрагентамиВнутренний.ДокументЯвляетсяСчетомФактурой(Основание) Тогда
					НоваяСтрока.СпособОбработки = СпособОбработки.СчетФактура;
				Иначе
					НоваяСтрока.СпособОбработки = СпособОбработки.ПервичныйДокумент;
				КонецЕсли;
			Иначе
				НоваяСтрока.СпособОбработки  = СпособОбработки;
			КонецЕсли;

			ОбменСКонтрагентамиСлужебный.УстановитьСсылкуДляВладельцаВРегистреСостояний(Основание, Объект.Ссылка);
		КонецЦикла;
		ДокументОбъект.Записать();

		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ИначеЕсли ЕстьНоменклатураНаКонтроле Тогда
		
		ТекстСообщения = НСтр("ru = 'Для отражения в учете необходимо сопоставить номенклатуру.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ОбновитьНастройкиОтраженияВУчете(СпособОбработки);
	
	НастроитьЭлементыОтраженияВУчете();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////
// Подбор документа учета

&НаКлиенте
Процедура ПоказатьВыборПодбораДокументаУчета(НомерДокумента)
	
	ОбработкаВыбора = Новый ОписаниеОповещения("ОбработатьВыборПодбораДокументаУчета", ЭтотОбъект);
	
	ТекущийСписокПодбора = СписокПодбораОбщий;
	Если НомерДокумента = 2 Тогда
		ТекущийСписокПодбора = ?(ЕстьОсновнойДокумент, СписокПодбораДоп, СписокПодбораОсновной);;
	КонецЕсли;
	
	Если ТекущийСписокПодбора.Количество() > 1 Тогда
		
		Элемент = ?(НомерДокумента = 1, Элементы.КомандаПодобратьДокументУчета1, Элементы.КомандаПодобратьДокументУчета2);
		
		ПоказатьВыборИзМеню(ОбработкаВыбора, ТекущийСписокПодбора, Элемент);
		
	ИначеЕсли ТекущийСписокПодбора.Количество() = 1 Тогда
		
		ВыполнитьОбработкуОповещения(ОбработкаВыбора, ТекущийСписокПодбора[0]);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПодбораДокументаУчета(Знач ВыбранноеЗначение, Знач ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпособОбработки = ВыбранноеЗначение.Значение;
	НастройкиПодбора = НастройкиПодбораУчетногоДокумента(СпособОбработки, Объект.Организация, Объект.Контрагент);
	
	Если НастройкиПодбора <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура("СпособОбработки", СпособОбработки);
		ОбработкаВыбора = Новый ОписаниеОповещения("ОбработатьВыборДокументаУчета", ЭтотОбъект, ДополнительныеПараметры);
		ОбменСКонтрагентамиСлужебныйКлиент.ПоказатьПодборУчетногоДокумента(НастройкиПодбора, ОбработкаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДокументаУчета(Знач ВыбранноеЗначение, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерепривязатьЭлектронныйДокумент(ВыбранноеЗначение, ДополнительныеПараметры.СпособОбработки);
		ОповеститьОбОтраженииВУчете();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерепривязатьЭлектронныйДокумент(Знач Основание, Знач СпособОбработки)
	
	ОбработатьДокументыОснования(Основание, СпособОбработки);
	Если Объект.ВидЭД <> Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ОбменСКонтрагентамиСлужебный.УстановитьСсылкуДляВладельцаВРегистреСостояний(Основание,Объект.Ссылка);
	КонецЕсли;
	
	ОбновитьНастройкиОтраженияВУчете(СпособОбработки);
	
	НастроитьЭлементыОтраженияВУчете();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиПодбораУчетногоДокумента(Знач СпособОбработки, Знач Организация, Знач Контрагент)
	
	Настройки = Новый Структура;
	
	ИмяТипа = ОбменСКонтрагентамиСлужебный.ИмяДокументаПоСпособуОбработки(СпособОбработки);
	
	Тип = Неопределено;
	Если Метаданные.Справочники.Найти(ИмяТипа) <> Неопределено Тогда
		
		МетаданныеОбъекта = Метаданные.Справочники.Найти(ИмяТипа);
		Настройки.Вставить("ИмяОбъектаМетаданных", МетаданныеОбъекта.ПолноеИмя());
		Настройки.Вставить("ИмяТипаСсылки", "СправочникСсылка." + ИмяТипа);
		
	ИначеЕсли Метаданные.Документы.Найти(ИмяТипа) <> Неопределено Тогда
		
		МетаданныеОбъекта = Метаданные.Документы.Найти(ИмяТипа);
		Настройки.Вставить("ИмяОбъектаМетаданных", МетаданныеОбъекта.ПолноеИмя());
		Настройки.Вставить("ИмяТипаСсылки", "ДокументСсылка." + ИмяТипа);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Настройки.Вставить("Организация", Организация);
	Настройки.Вставить("Контрагент", Контрагент);
	
	Возврат Настройки;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////
// Открытие документа учета

&НаКлиенте
Процедура ОткрытьДокументУчета(НомерДокумента)
	
	Если Объект.ДокументыОснования.Количество() >= НомерДокумента Тогда
		
		ПоказатьЗначение(, Объект.ДокументыОснования[НомерДокумента - 1].ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////
// Разрыв связи с документом учета

&НаКлиенте
Процедура ПоказатьВопросОРазрывеСвязи(НомерДокумента)
	
	Если Объект.ДокументыОснования.Количество() < НомерДокумента Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("НомерДокумента", НомерДокумента);
	ТекстВопроса = НСтр("ru = 'Связь между документами разорвется. Повторно связать документы возможно только в ручном режиме. Продолжить?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросОРазрывеСвязи", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОРазрывеСвязи(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РазорватьСвязьСОснованием(ДополнительныеПараметры.НомерДокумента);
	
	ОповеститьОбОтраженииВУчете();
	
КонецПроцедуры

&НаСервере
Процедура РазорватьСвязьСОснованием(Знач НомерДокумента)
	
	Основание = Объект.ДокументыОснования[НомерДокумента - 1].ДокументОснование;
	
	ОбработатьДокументыОснования(Основание,,Истина);
	Если Объект.ВидЭД <> Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ОбменСКонтрагентамиСлужебный.УдалитьСсылкуДляВладельцаВРегистреСостояний(Основание, Объект.Ссылка);
	КонецЕсли;
	
	НастроитьЭлементыОтраженияВУчете();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////
// Управление отражением в учете

&НаСервере
Процедура ПроверитьВозможностьОтраженияВУчете()
	
	ЕстьВозможностьОтраженияВУчете = Истина;
	
	СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
	Если Не ЗначениеЗаполнено(СтрокиДерева) Тогда
		Возврат;
	КонецЕсли;
	Если СтрокиДерева[0].Расширение <> "xml" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СтрокиДерева[0].Ссылка);
	ПотокЧтения = ДанныеФайла.ОткрытьПотокДляЧтения();
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ЗапросКоммерческихПредложений
		Или Объект.ВидЭД = Перечисления.ВидыЭД.КоммерческоеПредложение Тогда
		Данные = ОбменСКонтрагентамиВнутренний.ДанныеФайлаФорматаBNCommerceOffering(ПотокЧтения).ДанныеДокумента;
	Иначе
		Чтение = Новый ЧтениеXML;
		Чтение.ОткрытьПоток(ПотокЧтения);
		Данные = ФабрикаXDTO.ПрочитатьXML(Чтение);
	КонецЕсли;
	
	Описание = "";
	
	Если Не ОбменСКонтрагентамиСлужебный.ВозможноСозданиеУчетногоДокумента(Данные, Описание) Тогда
		ЕстьВозможностьОтраженияВУчете = Ложь;
		Элементы.НадписьНевозможноОтразитьВУчете.Заголовок = Описание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторы(ПрисоединенныйФайлСсылка)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайлСсылка, "ОтправительЭД, ПолучательЭД");
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОбработатьОбновлениеСостоянияЭД()
	
	ВыполнитьОбработкуОповещенияНаСервере();
	ОжидатьФормированиеПредставленияФайлаЭлектронногоДокумента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВторойТитулДокумента(ПервыйТитул)
	
	Возврат ОбменСКонтрагентамиСлужебный.ВторойТитулДокумента(ПервыйТитул);
	
КонецФункции

&НаСервереБезКонтекста
Функция ДокументыКОтправке(ДеревоПодчиненныеЭД, ТекущийЭД)
	
	МассивДокументов = Новый Массив;
	СтекЭД = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДеревоПодчиненныеЭД);
	НайденТекущийЭД = Ложь;
	
	Пока СтекЭД.Количество() Цикл
		
		Индекс = СтекЭД.Количество() - 1;
		КоллекцияЭД = СтекЭД[Индекс].ПолучитьЭлементы();
		СтекЭД.Удалить(Индекс);
		
		Если НЕ ЗначениеЗаполнено(КоллекцияЭД) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПодчиненныйЭД Из КоллекцияЭД Цикл
			
			Если ПодчиненныйЭД.Ссылка = ТекущийЭД Тогда
				
				НайденТекущийЭД = Истина;
				
				СтекЭД.Очистить();
				СтекЭД.Добавить(ПодчиненныйЭД);
				
				Если ПодчиненныйЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан
					ИЛИ ПодчиненныйЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
					ИЛИ ПодчиненныйЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
					МассивДокументов.Добавить(ПодчиненныйЭД.Ссылка);
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
			СтекЭД.Добавить(ПодчиненныйЭД);
			
			Если НайденТекущийЭД
				И  (ПодчиненныйЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан
				ИЛИ ПодчиненныйЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
				ИЛИ ПодчиненныйЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение) Тогда
				МассивДокументов.Добавить(ПодчиненныйЭД.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

&НаСервере
Процедура ИзменитьСтатусОтклонить()
	
	СтруктураПараметров = Новый Структура("СтатусЭД", Перечисления.СтатусыЭД.Отклонен);
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайлСсылка, СтруктураПараметров, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьДоступностьНаСервере()
	
	СвойстваФайлаЭД = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	Если ЗначениеЗаполнено(СвойстваФайлаЭД.ЭлектронныйДокументВладелец) Тогда
		СсылкаНаЭД = СвойстваФайлаЭД.ЭлектронныйДокументВладелец;
	Иначе
		СсылкаНаЭД = ПрисоединенныйФайлСсылка;
	КонецЕсли;
	
	ТребуетсяПодпись = НеобходимоПодписать(СвойстваФайлаЭД);
	
	ЭДОЗакрыт       = Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
	СтатусОтклонен  = ОбменСКонтрагентамиСлужебный.ЭДОтклонен(СвойстваФайлаЭД.СтатусЭД);
	ЭтоСлужебный    = ОбменСКонтрагентамиСлужебный.ЭтоСлужебныйДокумент(СвойстваФайлаЭД.ТипЭД);
	
	ЕстьПравоОбработки = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоВыполненияОбмена();
	МожноОтклонитьЭтотЭД = ЕстьПравоОбработки И Не ЭтоСлужебный
		И ОбменСКонтрагентамиСлужебный.МожноОтклонитьЭтотЭД(СсылкаНаЭД);
	МожноАннулироватьЭтотЭД = ЕстьПравоОбработки И Не ЭтоСлужебный
		И ОбменСКонтрагентамиСлужебный.МожноАннулироватьЭтотЭД(СсылкаНаЭД);
	
	РеквизитыЭД = Новый Структура("ВидЭД, ТипЭлементаВерсииЭД", Объект.ВидЭД, Объект.ТипЭлементаВерсииЭД);
	ЭДТитулПродавца = НЕ ЭтоСлужебный И ОбменСКонтрагентамиСлужебный.ЭтоТитулФНС(РеквизитыЭД);
	
	ЭДСчетФактура   = НЕ ЭтоСлужебный И ОбменСКонтрагентамиСлужебный.ЭтоСчетФактура(СвойстваФайлаЭД.ТипЭД);
	ДОСФЗавершен    = ЭДСчетФактура И ОбменСКонтрагентамиСлужебный.ДОСФЗавершен(ПрисоединенныйФайлСсылка, СвойстваФайлаЭД.НаправлениеЭД);
	
	ЭтоИзвещениеОПолучении    = ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(СвойстваФайлаЭД.ТипЭД);
	ЭтоПодтверждение          = ОбменСКонтрагентамиСлужебный.ЭтоПодтверждение(СвойстваФайлаЭД.ТипЭД);
	ЭтоУведомлениеОбУточнении = ОбменСКонтрагентамиСлужебный.ЭтоУведомлениеОбУточнении(СвойстваФайлаЭД.ТипЭД);
	ЭтоОтветныйТитул          = ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(СвойстваФайлаЭД.ТипЭД);
	
	ДОЗавершен = Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		ИЛИ Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением;
	
	Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД")
		И ОбменСКонтрагентамиСлужебный.НемедленнаяОтправкаЭД() Тогда
		Элементы.КомандаУтвердить.Заголовок = НСтр("ru = 'Утвердить и отправить'");
	КонецЕсли;
	
	Если ПараметрыВыводаПредупреждения = Неопределено Тогда
		Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ПараметрыВыводаПредупреждения = Новый Структура("Выводить, ТекстПредупреждения", Ложь, "");
		Иначе
			ПараметрыВыводаПредупреждения = ОбменСКонтрагентамиСлужебный.ПараметрыВыводаПредупреждения(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыводаПредупреждения.Выводить Тогда
		Элементы.ГруппаПредупреждение.Видимость = Истина;
		Элементы.ТекстПредупреждения.Заголовок = ПараметрыВыводаПредупреждения.ТекстПредупреждения;
	Иначе
		Элементы.ГруппаПредупреждение.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.КомандаПодписатьОтправить.Видимость = Ложь;
	Элементы.КомандаПодписать.Видимость = Ложь;
	
	КомандаПодписиОтправки = Элементы.КомандаПодписать;
	Если ОбменСКонтрагентамиСлужебный.НемедленнаяОтправкаЭД() Тогда
		КомандаПодписиОтправки = Элементы.КомандаПодписатьОтправить;
	КонецЕсли;
	
	Если СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		Элементы.КомандаОтправитьПовторно.Видимость = Ложь;
				
		ЭтоПолученныйКаталогТоваров = НЕ ЭтоСлужебный И Объект.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
			И СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен;
		
		ЭтоСчетВерсии30 = НЕ ЭтоСлужебный И (Объект.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату)
			И (ОбменЧерезОператора ИЛИ ОбменСКонтрагентамиСлужебный.ВерсияПакетаЭД(ПрисоединенныйФайлСсылка)
				= Перечисления.ВерсииФорматаПакетаЭД.Версия30);
			
		Элементы.КомандаУтвердить.Видимость = Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаУтверждении
			И НЕ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден;
		Элементы.КомандаУтвердить.Доступность = Не ЭДОЗакрыт
			И ЕстьПравоОбработки
			И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
			И НЕ(ЭтоИзвещениеОПолучении
				ИЛИ ЭтоПодтверждение
				ИЛИ Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
				ИЛИ ЭтоУведомлениеОбУточнении));
			
		КомандаПодписиОтправки.Видимость = ЕстьПравоОбработки И Объект.ТребуетсяПодтверждение И ТребуетсяПодпись
			И НЕ Элементы.КомандаУтвердить.Видимость
			И НЕ ЭтоУведомлениеОбУточнении
			И НЕ ЭДСчетФактура
			И НЕ ЭтоСчетВерсии30
			И НЕ ЭтоПодтверждение
			И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден)
			И НЕ ОбменСКонтрагентамиСлужебный.ВторойТитулПодписан(ПрисоединенныйФайлСсылка);
		
		Если НЕ ЭДОЗакрыт И НЕ Элементы.КомандаУтвердить.Видимость И НЕ КомандаПодписиОтправки.Видимость
			И ЗначениеЗаполнено(ДокументыКОтправке(ДеревоПодчиненныеЭД, ПрисоединенныйФайлСсылка)) Тогда
			Элементы.КомандаОтправить.Видимость   = Истина;
			Элементы.КомандаОтправить.Доступность = Истина;
		Иначе
			Элементы.КомандаОтправить.Видимость   = Ложь;
			Элементы.КомандаОтправить.Доступность = Ложь;
		КонецЕсли;
		
		// Для входящей с/ф кнопка отклонение имеет свое название и картинку.
		Если НЕ ЭтоСлужебный И НЕ Объект.ТребуетсяПодтверждение Тогда
			Элементы.КомандаОтклонить.Заголовок = НСтр("ru = 'Запросить уточнение по электронному документу'");
			Элементы.КомандаОтклонить.Картинка = БиблиотекаКартинок.ПользовательБезНеобходимыхСвойств;
		КонецЕсли;
		
	ИначеЕсли СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		
		КомандаПодписиОтправки.Видимость = ЕстьПравоОбработки И Объект.ТребуетсяПодтверждение И ТребуетсяПодпись
			И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден);
			
		Если НЕ ЭДОЗакрыт И НЕ Элементы.КомандаУтвердить.Видимость И НЕ КомандаПодписиОтправки.Видимость
			И ЗначениеЗаполнено(ДокументыКОтправке(ДеревоПодчиненныеЭД, ПрисоединенныйФайлСсылка)) Тогда
			Элементы.КомандаОтправить.Видимость   = Истина;
			Элементы.КомандаОтправить.Доступность = Истина;
		Иначе
			Элементы.КомандаОтправить.Видимость   = Ложь;
			Элементы.КомандаОтправить.Доступность = Ложь;
		КонецЕсли;
		
		Элементы.КомандаОтправитьПовторно.Видимость = Истина;
		Если ДОЗавершен Тогда
			Элементы.КомандаОтправитьПовторно.Доступность = Ложь;
		ИначеЕсли Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент Тогда
			Элементы.КомандаОтправитьПовторно.Доступность = Ложь;
		Иначе
			Элементы.КомандаОтправитьПовторно.Доступность = Истина;
		КонецЕсли;
			
		Если НЕ ОбменЧерезОператора Тогда
			Элементы.КомандаОтправитьПовторно.Видимость = Истина;
			Элементы.КомандаОтправитьПовторно.Доступность = НЕ СтатусОтклонен
				И ОтраженВУчете
				ИЛИ (ЭтоИзвещениеОПолучении
					ИЛИ ЭтоПодтверждение
					ИЛИ Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
					ИЛИ ЭтоУведомлениеОбУточнении);
		КонецЕсли;
		
		ЗапискаДоступна = (НЕ ЭтоСлужебный
			И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден));
		
		Элементы.ОбъектДополнительнаяИнформация.ТолькоПросмотр = НЕ ЗапискаДоступна;
		Элементы.ОчиститьЗаписку.Доступность = ЗапискаДоступна;
		Элементы.КомандаУтвердить.Видимость = Ложь;
		
	ИначеЕсли СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		
		Элементы.КомандаПодписать.Видимость = ЕстьПравоОбработки
			И НЕ СтатусОтклонен И СвойстваФайлаЭД.СтатусЭД <> Перечисления.СтатусыЭД.ПолностьюПодписан
			И СвойстваФайлаЭД.СтатусЭД <> Перечисления.СтатусыЭД.Сформирован;
			
		Элементы.КомандаУтвердить.Видимость = ЕстьПравоОбработки
			И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован);
		
	КонецЕсли;
	
	Элементы.СтраницаСтатусов.Видимость = Ложь;
	Элементы.КомандаАннулировать.Доступность = МожноАннулироватьЭтотЭД;
	Элементы.КомандаОтклонить.Доступность = (НЕ (СтатусОтклонен ИЛИ ЭтоСлужебный ИЛИ ЭДОЗакрыт) И МожноОтклонитьЭтотЭД)
		И Не ОбменСКонтрагентамиСлужебный.ЕстьОтправленноеУведомление(ПрисоединенныйФайлСсылка);
	Элементы.ГруппаКомандАннулирование.Видимость = Ложь;
	Элементы.КомандаЗавершить.Доступность = Не ДОСФЗавершен;
	Элементы.КомандаЗавершить.Видимость = ЭДСчетФактура И Элементы.КомандаЗавершить.Доступность;
	
	Если СтатусОтклонен Тогда
		
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = Объект.ПричинаОтклонения;
		Элементы.СтраницаОтклонение.Видимость = Истина;
		Если СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
			Элементы.ГруппаОтклонение.Заголовок = НСтр("ru = 'Ошибка обмена'");
		КонецЕсли;
		
	ИначеЕсли ЭДОАннулированИлиВПроцессе() Тогда
		
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = Объект.ПричинаОтклонения;
		Элементы.СтраницаОтклонение.Видимость = Истина;
		Элементы.ГруппаОтклонение.Заголовок = НСтр("ru = 'Причина аннулирования:'");
		Элементы.КомандаОтклонить.Доступность = Ложь;
		Если СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании
			ИЛИ Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
			И СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ ЗначениеЗаполнено(СвойстваФайлаЭД.ЭлектронныйДокументВладелец)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваФайлаЭД.ЭлектронныйДокументВладелец, "СтатусЭД") = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			Элементы.ГруппаКомандАннулирование.Видимость = Истина;
			Элементы.КомандаПодписатьОтправить.Видимость = Ложь;
			Элементы.КомандаАннулировать.Доступность = Ложь;
		КонецЕсли;
		
	ИначеЕсли АннулированиеОтклонено() Тогда
		
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = Объект.ПричинаОтклонения;
		Элементы.СтраницаОтклонение.Видимость = Истина;
		Элементы.ГруппаОтклонение.Заголовок = НСтр("ru = 'Причина отказа от аннулирования:'");
		
	КонецЕсли;
	
	Элементы.СостояниеТекст.Заголовок = Новый ФорматированнаяСтрока(ТекстСостояния,
		Новый Шрифт(Элементы.СостояниеТекст.Шрифт,,, Истина));
	
	Элементы.СтраницаКомментарии.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(ВсеКомментарии);
	Элементы.СтраницаСопроводительнаяЗаписка.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(СвойстваФайлаЭД.ДополнительнаяИнформация);
	Элементы.КомандаЖурналСобытийЭДО.Доступность = Пользователи.ЭтоПолноправныйПользователь();
	
	Элементы.КомандаАннулировать.Видимость = Элементы.КомандаАннулировать.Доступность;
	Элементы.КомандаОтклонить.Видимость    = Элементы.КомандаОтклонить.Доступность;
	
	Если ОбменЧерезОператора Тогда
		Элементы.ГруппаПрекращениеПоддержкиПрямогоОбмена.Видимость = Ложь;
	Иначе
		Элементы.КомандаПодписатьОтправить.Видимость        = Ложь;
		Элементы.КомандаПодписать.Видимость                 = Ложь;
		Элементы.КомандаОтправить.Видимость                 = Ложь;
		Элементы.КомандаУтвердить.Видимость                 = Ложь;
		Элементы.КомандаПринятьАннулирование.Видимость      = Ложь;
		Элементы.КомандаОтклонитьАннулирование.Видимость    = Ложь;
		Элементы.КомандаОтклонить.Видимость                 = Ложь;
		Элементы.КомандаАннулировать.Видимость              = Ложь;
		Элементы.КомандаЗавершить.Видимость                 = Ложь;
		Элементы.КомандаПеренаправить.Видимость             = Ложь;
		Элементы.КомандаОтправитьПовторно.Видимость         = Ложь;
		Элементы.ФормаСоздатьПроизвольныйДокумент.Видимость = Ложь;
		Элементы.КартинкаОбновить.Видимость                 = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбменЧерезОператора()
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуЭП()
	
	ТаблицаВременная = РеквизитФормыВЗначение("ТаблицаЭП");
	ТаблицаВременная.Очистить();
	
	ЭлектронныеПодписи = ОбменСКонтрагентамиСлужебный.УстановленныеПодписи(ПрисоединенныйФайлСсылка);
	
	Для Каждого Подпись Из ЭлектронныеПодписи Цикл
		
		НоваяСтрока = ТаблицаВременная.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Подпись);
		
		ЗаполнитьСтатусПодписи(НоваяСтрока, Подпись);
		НоваяСтрока.НомерСтроки = ТаблицаВременная.Количество();
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаВременная, "ТаблицаЭП");
	
	Элементы.СтраницаПодписиИСтатусы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Подписи %1'"), 
		?(ТаблицаВременная.Количество() = 0, "", "(" + ТаблицаВременная.Количество() + ") "));
		
	Если ТаблицаЭП.НайтиСтроки(Новый Структура("ПодписьВерна", Ложь)).Количество() = 0 Тогда
		Элементы.СтраницаПодписиИСтатусы.Картинка = Новый Картинка;
	Иначе
		Элементы.СтраницаПодписиИСтатусы.Картинка = БиблиотекаКартинок.Предупреждение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НеобходимоПодписать(СвойстваФайлаЭД)
	
	ФлагПодписи = Ложь;
	// Ответ на заказ никогда не подписывает покупатель или документ отклонен.
	Если ОбменСКонтрагентамиСлужебный.ЭДОтклонен(СвойстваФайлаЭД.СтатусЭД) Тогда
		Возврат ФлагПодписи;
	КонецЕсли;
	
	Если ОбменЧерезОператора Тогда
		ФлагПодписи = Истина;
	ИначеЕсли СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ФлагПодписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваФайлаЭД.Ссылка, "ПодписанЭП");
	ИначеЕсли СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		
		Если ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(СвойстваФайлаЭД.ТипЭД)
			И ЗначениеЗаполнено(СвойстваФайлаЭД.ЭлектронныйДокументВладелец) Тогда
			
			ФлагПодписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СвойстваФайлаЭД.ЭлектронныйДокументВладелец, "ПодписанЭП");
			
		Иначе
			
			ФлагПодписи = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФлагПодписи;
	
КонецФункции

&НаСервере
Процедура ВыполнитьОбработкуОповещенияНаСервере()
	
	Прочитать();
	
	ЗаполнитьДеревоПодчиненныеЭДНаСервере();
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
		"Ссылка", ИдентификаторТекущейСтроки, ДеревоПодчиненныеЭД.ПолучитьЭлементы(), ПрисоединенныйФайлСсылка, Ложь);
	Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока = ИдентификаторТекущейСтроки;
	
	ТекстСостояния   = ОбменСКонтрагентамиКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка);
	ПерезаполнитьКомментарии();
	ИзменитьВидимостьДоступностьНаСервере();
	
	ПоказатьПредставлениеФайлаЭлектронногоДокумента(
		ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки), Ложь);
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхСертификата(НомерСтроки)
	
	ДвоичныеДанныеСертификата = ТаблицаЭП[НомерСтроки-1].Сертификат.Получить();
	СсылкаНаХранилищеДанныхСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	Возврат СсылкаНаХранилищеДанныхСертификата;
	
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьДополнительнойИнформации()
	
	ПоказатьПредставлениеФайлаЭлектронногоДокумента(
		ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки), Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФайлаВложения(Знач ПрисоединенныйФайлСсылка, Знач УникальныйИдентификатор)
	
	Возврат ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеИзНастроекНаСервере()
	
	ОтключитьВыводДерева        = Ложь;
	ОтключитьВыводДопДанных     = Истина;
	ОтключитьВыводКопияВерна    = Истина;
	ВыводитьБанковскиеРеквизиты = Ложь;
	Настройки = ХранилищеСистемныхНастроек.Загрузить("Документ.ЭлектронныйДокументВходящий.Форма.ФормаПросмотраЭД/ТекущиеДанные");
	Если Настройки <> Неопределено Тогда
		Если Настройки.Получить("ОтключитьВыводДерева") <> Неопределено Тогда
			ОтключитьВыводДерева = Настройки.Получить("ОтключитьВыводДерева");
		КонецЕсли;
		Если Настройки.Получить("ОтключитьВыводДопДанных") <> Неопределено Тогда
			ОтключитьВыводДопДанных = Настройки.Получить("ОтключитьВыводДопДанных");
		КонецЕсли;
		Если Настройки.Получить("ОтключитьВыводКопияВерна") <> Неопределено Тогда
			ОтключитьВыводКопияВерна = Настройки.Получить("ОтключитьВыводКопияВерна");
		КонецЕсли;
		Если Не Настройки.Получить("ВыводитьБанковскиеРеквизиты") = Неопределено Тогда
			ВыводитьБанковскиеРеквизиты = Настройки.Получить("ВыводитьБанковскиеРеквизиты");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = НЕ ОтключитьВыводДопДанных;
	Элементы.КомандаОтображатьКопияВерна.Пометка               = НЕ ОтключитьВыводКопияВерна;
	Элементы.КомандаОтображатьДерево.Пометка                   = НЕ ОтключитьВыводДерева;
	Элементы.КомандаОтображатьБанковскиеРеквизиты.Пометка      = ВыводитьБанковскиеРеквизиты;
	Элементы.ДеревоПодчиненныеЭД.Видимость                     = НЕ ОтключитьВыводДерева;
	
	СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
	Если СтрокиДерева[0].Ссылка <> ПрисоединенныйФайлСсылка Тогда
		Элементы.КомандаОтображатьДерево.Пометка = Истина;
		Элементы.ДеревоПодчиненныеЭД.Видимость   = Истина;
	КонецЕсли;
	
	// В счете на оплату банковские реквизиты будут отображаться всегда.
	// В произвольном ЭД нет банковских реквизитов.
	Если Объект.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату 
		ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Элементы.КомандаОтображатьБанковскиеРеквизиты.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТипДокумента(ТипДокумента)
	
	Объект.ТипДокумента = ТипДокумента;
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗапретитьСпрашиватьПроСохранениеНастроекУчета()
	
	ТекущаяГранула = ОбменСКонтрагентамиСлужебный.ГранулаНастройкиОтраженияВУчете(
		Объект.ИдентификаторОрганизации, Объект.ИдентификаторКонтрагента,
		Объект.Организация, Объект.Контрагент,
		Объект.ВидЭД, Объект.ПрикладнойВидЭД);
	
	Отказ = Ложь;
	ОбменСКонтрагентамиСлужебный.ЗаписатьНастройкиПолученияДокументов(ТекущаяГранула, Неопределено, Истина, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаНастройкиОтраженияВУчете.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиОтраженияВУчете(Знач СпособОбработки)
	
	Если Элементы.ГруппаНастройкиОтраженияВУчете.Видимость Тогда
		
		ТекущаяГранула = ОбменСКонтрагентамиСлужебный.ГранулаНастройкиОтраженияВУчете(
		Объект.ИдентификаторОрганизации, Объект.ИдентификаторКонтрагента,
		Объект.Организация, Объект.Контрагент,
		Объект.ВидЭД, Объект.ПрикладнойВидЭД);
		
		Отказ = Ложь;
		ОбменСКонтрагентамиСлужебный.ЗаписатьНастройкиПолученияДокументов(ТекущаяГранула, СпособОбработки, Неопределено, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ГруппаНастройкиОтраженияВУчете.Видимость = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИПолучитьЭДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Элементы.КартинкаОбновить.Картинка = БиблиотекаКартинок.Обновить;
КонецПроцедуры

#КонецОбласти