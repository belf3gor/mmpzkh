#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено Тогда
		Если ТипДанныхЗаполнения = Тип("Структура") Тогда
			Если ДанныеЗаполнения.Свойство("Основание") Тогда
				ДокументОснование = ДанныеЗаполнения.Основание;
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("АдресТаблицыНоменклатуры") И ДанныеЗаполнения.Свойство("СуммаВключаетНДС") Тогда
				СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
				ОбработкаТабличныхЧастей.ЗаполнитьИзТаблицыНоменклатуры(
					Товары, ДанныеЗаполнения.АдресТаблицыНоменклатуры, СуммаВключаетНДС);
			КонецЕсли;
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ДокументОснование = ДанныеЗаполнения;
		КонецЕсли;
	
		Если ДокументОснование <> Неопределено Тогда
			ЗаполнитьПоДокументуОснованию(ДокументОснование);
		Иначе
			СуммаВключаетНДС = Истина;
		КонецЕсли;
	Иначе
		СуммаВключаетНДС = Истина;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	// Склад может заполниться по умолчанию значением, которое не должно выбираться
	Если ЗначениеЗаполнено(Склад) Тогда
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "ТипСклада, ТипЦенРозничнойТорговли");
		Если РеквизитыСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			Склад = Справочники.Склады.ПустаяСсылка();
		Иначе
			ТипЦен = РеквизитыСклада.ТипЦенРозничнойТорговли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	НомерЧекаККМ = "";
	ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	ИдентификаторУстройства = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
	
	Если ОбъектКопирования.ЕстьМаркируемаяПродукцияГИСМ Тогда
		Товары.ЗагрузитьКолонку(Новый Массив(Товары.Количество()), "КиЗ_ГИСМ");
	КонецЕсли;
	
	РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(АгентскиеУслуги, Дата);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") 
		+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "АгентскиеУслуги")
		+ ПодарочныеСертификаты.Итог("Сумма");
		
	ИнтеграцияГИСМБП.УстановитьПризнакЕстьМаркируемаяПродукцияГИСМ(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Основание");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
	
	// Проверка: сумма безналичных оплат не должна превышать сумму по реализации товаров и услуг
	СуммаВыручки = Товары.Итог("Сумма") + ?(СуммаВключаетНДС, 0, Товары.Итог("СуммаНДС"))
		+ АгентскиеУслуги.Итог("Сумма") + ?(СуммаВключаетНДС, 0, АгентскиеУслуги.Итог("СуммаНДС"))
		+ ПодарочныеСертификаты.Итог("Сумма");
	
	Если Оплата.Итог("Сумма") > СуммаВыручки  Тогда
		
		ТекстОписаниеОшибки = НСтр("ru = 'Сумма безналичных оплат превышает сумму выручки от реализации!'");
		ТекстСообщения      = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "Корректность",,, НСтр("ru = 'Безналичные оплаты'"), ТекстОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Оплата", "Объект", Отказ);
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Возврат 
		И НЕ Основание.Пустая() Тогда
		
		ТаблицаСоотвествияТоваров = Основание.Товары.Выгрузить();
		ТаблицаСоотвествияТоваров.Свернуть("Номенклатура, Цена", "Количество");
		ТаблицаСоотвествияТоваров.Индексы.Добавить("Номенклатура");
		
	КонецЕсли;
	
	МассивНоменклатуры    = ОбщегоНазначения.ВыгрузитьКолонку(Товары, "Номенклатура", Истина);
	
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивНоменклатуры);
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНоменклатуры, "Услуга");
	
	ИмяСписка = "Товары";
	Для каждого СтрокаТовары Из Товары Цикл
		ЭтоУслуга = Ложь;
		СвойстваНоменклатуры = РеквизитыНоменклатуры[СтрокаТовары.Номенклатура];
		Если СвойстваНоменклатуры <> Неопределено Тогда
			ЭтоУслуга = СвойстваНоменклатуры.Услуга;
		КонецЕсли;
		
		Если НЕ ЭтоУслуга И СтрокаТовары.Количество = 0 Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяСписка, СтрокаТовары.НомерСтроки, "Количество");
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", , 
				НСтр("ru = 'Количество'"), СтрокаТовары.НомерСтроки, ИмяСписка);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Возврат 
			И НЕ Основание.Пустая() Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Цена", СтрокаТовары.Номенклатура, СтрокаТовары.Цена);
			НайденыеСтроки = ТаблицаСоотвествияТоваров.НайтиСтроки(СтруктураПоиска);
			
			Если НайденыеСтроки.Количество() = 0 Тогда
				КоличествоОснование = 0;
			Иначе
				КоличествоОснование = НайденыеСтроки[0].Количество;
			КонецЕсли;
			
			Если СтрокаТовары.Количество > КоличествоОснование Тогда 
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяСписка, СтрокаТовары.НомерСтроки, "Количество");
				
				ТекстСообщения = НСтр("ru = 'Документом ""%1"" было реализовано ""%2"" по цене %3 %4 на ""%5"" ед. меньше, чем возвращается.'");
				ТекстСообщения = СтрШаблон(
					ТекстСообщения,
					СокрЛП(Основание),
					СтрокаТовары.Номенклатура,
					СтрокаТовары.Цена,
					ВалютаДокумента,
					(СтрокаТовары.Количество - КоличествоОснование));
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", 
					НСтр("ru = 'Количество'"), СтрокаТовары.НомерСтроки, ИмяСписка, ТекстСообщения);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если НайденыеСтроки.Количество() <> 0 Тогда
				НайденыеСтроки[0].Количество = Макс(НайденыеСтроки[0].Количество - СтрокаТовары.Количество, 0);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуОснованию(ДокументОснование)
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РозничнаяПродажа") Тогда
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументОснование, "Организация,Склад, СуммаВключаетНДС, ТипЦен, ДокументБезНДС");
		
		Основание = ДокументОснование;

		// Заполнение ТЧ Товары
		Документы.РозничнаяПродажа.СкопироватьТабличныеЧасти(ЭтотОбъект, ДокументОснование);
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		СчетНаОплатуПокупателю = ДокументОснование;
		ЗаполнитьПоСчетуНаОплатуПокупателю(СчетНаОплатуПокупателю);
		
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПоСчетуНаОплатуПокупателю(ДокументОснование)
	
	// Заполнение шапки
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументОснование, "Организация, Склад, СуммаВключаетНДС, ТипЦен, ДокументБезНДС");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.СуммаВключаетНДС,
	|	СчетНаОплатуПокупателю.СуммаСкидки
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Номенклатура.Услуга, ИСТИНА) КАК ЭтоУслуга,
	|	СчетНаОплатуПокупателюТовары.Цена КАК Цена,
	|	СчетНаОплатуПокупателюТовары.Количество,
	|	СчетНаОплатуПокупателюТовары.Сумма КАК Сумма,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.СуммаНДС,
	|	СчетНаОплатуПокупателюТовары.СуммаСкидки
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизиты = РезультатЗапроса[0].Выгрузить();
	ТаблицаТовары    = РезультатЗапроса[1].Выгрузить();
	
	РеквизитыОснования = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если РеквизитыОснования.СуммаСкидки <> 0 ИЛИ ТаблицаТовары.Итог("СуммаСкидки") <> 0 Тогда
	
		ОбработкаТабличныхЧастей.РаспределитьСкидкуПоСтрокамТабЧасти(ТаблицаТовары, РеквизитыОснования);
	
	КонецЕсли;
	
	Товары.Загрузить(ТаблицаТовары);
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли







