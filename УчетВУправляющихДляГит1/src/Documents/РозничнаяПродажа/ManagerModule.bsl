#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;
	
	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации)
		И Параметры.Свойство("Основание")
		И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ФормыДокумента = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыДокумента[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнтерфейсПечати

Функция ТекстЗапросаТоварныйЧек()
	Возврат
		"ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка КАК Ссылка,
		|	РозничнаяПродажа.ВидОперации,
		|	РозничнаяПродажа.Организация,
		|	РозничнаяПродажа.Дата,
		|	РозничнаяПродажа.Номер,
		|	РозничнаяПродажа.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ВЫБОР СправочникНоменклатура.НаименованиеПолное
		|		КОГДА """"
		|			ТОГДА СправочникНоменклатура.Наименование
		|		ИНАЧЕ СправочникНоменклатура.НаименованиеПолное
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
		|			ТОГДА ТаблицаТовары.Номенклатура.Код
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
		|			ТОГДА ТаблицаТовары.Номенклатура.Артикул
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Код,
		|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура.ПериодичностьУслуги КАК ПериодичностьУслуги,
		|	1 КАК НомерТабличнойЧасти
		|ИЗ
		|	Документ.РозничнаяПродажа.Товары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|		ПО ТаблицаТовары.Ссылка = РозничнаяПродажа.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	РозничнаяПродажа.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка,
		|	РозничнаяПродажа.ВидОперации,
		|	РозничнаяПродажа.Организация,
		|	РозничнаяПродажа.Дата,
		|	РозничнаяПродажа.Номер,
		|	РозничнаяПродажа.СуммаВключаетНДС,
		|	ВЫБОР ТаблицаАгентскиеУслуги.Содержание
		|		КОГДА """"
		|			ТОГДА ВЫБОР СправочникНоменклатура.НаименованиеПолное
		|					КОГДА """"
		|						ТОГДА СправочникНоменклатура.Наименование
		|					ИНАЧЕ СправочникНоменклатура.НаименованиеПолное
		|				КОНЕЦ
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.Содержание
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
		|			ТОГДА ЕСТЬNULL(ТаблицаАгентскиеУслуги.Номенклатура.Код, НЕОПРЕДЕЛЕНО)
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
		|			ТОГДА ЕСТЬNULL(ТаблицаАгентскиеУслуги.Номенклатура.Артикул, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ЕСТЬNULL(ТаблицаАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО),
		|	ТаблицаАгентскиеУслуги.Количество,
		|	ТаблицаАгентскиеУслуги.Цена,
		|	ТаблицаАгентскиеУслуги.Сумма,
		|	ТаблицаАгентскиеУслуги.СуммаНДС,
		|	ТаблицаАгентскиеУслуги.НомерСтроки,
		|	NULL,
		|	2
		|ИЗ
		|	Документ.РозничнаяПродажа.АгентскиеУслуги КАК ТаблицаАгентскиеУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|		ПО ТаблицаАгентскиеУслуги.Ссылка = РозничнаяПродажа.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаАгентскиеУслуги.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	РозничнаяПродажа.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерТабличнойЧасти,
		|	НомерСтроки
		|ИТОГИ
		|	СУММА(Сумма),
		|	СУММА(СуммаНДС)
		|ПО
		|	Ссылка";
КонецФункции

Функция ПечатьТоварныйЧек(МассивОбъектов, ОбъектыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_РозничнаяПродажа_ТоварныйЧек";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	Запрос.Текст = ТекстЗапросаТоварныйЧек();
	
	ДанныеЗаполнения = Новый Структура;
	
	ПервыйДокумент = Истина;
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РозничнаяПродажа.ПФ_MXL_ТоварныйЧек");
		
		ОбластьКолонкаТовар = Макет.Область("Запас");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
		ШапкаТаблицы        = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ШапкаТаблицыКоды    = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ШапкаТаблицыДанные  = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьПоставщик    = Макет.ПолучитьОбласть("Поставщик");
		ОбластьСтрока       = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьСтрокаКоды   = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьСтрокаДанные = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьИтого        = Макет.ПолучитьОбласть("Итого");
		ОбластьПодписи      = Макет.ПолучитьОбласть("Подписи");
		
		ВидДокумента = ?(Шапка.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа, НСтр("ru = 'Товарный чек'"), НСтр("ru = 'Возврат товаров'"));
		
		ТекстЗаголовка = СтрШаблон(НСтр("ru ='%1 № %2 от %3'"), ВидДокумента, Шапка.Номер, Формат(Шапка.Дата, "ДЛФ=DD"));
		ОбластьЗаголовок.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", ТекстЗаголовка));
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, 
				"НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ОбластьПоставщик.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика", ПредставлениеПоставщика));
		
		ТабличныйДокумент.Вывести(ОбластьПоставщик);
		
		ТабличныйДокумент.Вывести(ШапкаТаблицы);
		Если ВыводитьКоды Тогда
			ДанныеПечатиКолонкиКодов = Новый Структура;
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ДанныеПечатиКолонкиКодов.Вставить("ИмяКолонкиКодов", "Артикул");
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ДанныеПечатиКолонкиКодов.Вставить("ИмяКолонкиКодов", "Код");
			КонецЕсли;
			ШапкаТаблицыКоды.Параметры.Заполнить(ДанныеПечатиКолонкиКодов);
			ТабличныйДокумент.Присоединить(ШапкаТаблицыКоды);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ШапкаТаблицыДанные);
		
		НомерСтроки = 0;
		ВыборкаПоДокументу = Шапка.Выбрать();
		Пока ВыборкаПоДокументу.Следующий() Цикл
			НомерСтроки = НомерСтроки + 1;
			
			ДанныеЗаполнения = Новый Структура("НомерСтроки", НомерСтроки);
			ОбластьСтрока.Параметры.Заполнить(ДанныеЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			Если ВыводитьКоды Тогда
				ОбластьСтрокаКоды.Параметры.Заполнить(ВыборкаПоДокументу);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаКоды);
			КонецЕсли;
			
			Номенклатура = РаботаСНоменклатуройКлиентСервер.СодержаниеУслуги(
				ВыборкаПоДокументу.Номенклатура, ВыборкаПоДокументу.ПериодичностьУслуги, Шапка.Дата);
				
			ДанныеЗаполнения = Новый Структура("Номенклатура", Номенклатура);
			
			ОбластьСтрокаДанные.Параметры.Заполнить(ВыборкаПоДокументу);
			ОбластьСтрокаДанные.Параметры.Заполнить(ДанныеЗаполнения);
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаДанные);
		КонецЦикла;
		
		Всего = Шапка.Сумма + ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);
		
		Если Шапка.СуммаНДС <> 0 Тогда
			ЗаголовокНДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'"));
		Иначе
			ЗаголовокНДС      = НСтр("ru='Без налога (НДС)'");
		КонецЕсли;
		
		ДанныеЗаполнения.Очистить();
		ДанныеЗаполнения.Вставить("Сумма",        ОбщегоНазначенияБПВызовСервера.ФорматСумм(Шапка.Сумма));
		ДанныеЗаполнения.Вставить("ЗаголовокНДС", ЗаголовокНДС);
		ДанныеЗаполнения.Вставить("СуммаНДС",     ОбщегоНазначенияБПВызовСервера.ФорматСумм(Шапка.СуммаНДС,,"-"));
		ДанныеЗаполнения.Вставить("Всего",        ОбщегоНазначенияБПВызовСервера.ФорматСумм(Всего));
		
		ОбластьИтого.Параметры.Заполнить(ДанныеЗаполнения);
		
		ДанныеПечатиСуммаПрописью = Новый Структура("ИтоговаяСтрока, СуммаПрописью");
		ДанныеПечатиСуммаПрописью.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Всего наименований %1, на сумму %2'"),
			НомерСтроки, ОбщегоНазначенияБПВызовСервера.ФорматСумм(Всего, Константы.ВалютаРегламентированногоУчета.Получить()));
		ДанныеПечатиСуммаПрописью.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(Всего, Константы.ВалютаРегламентированногоУчета.Получить());
		
		ОбластьИтого.Параметры.Заполнить(ДанныеПечатиСуммаПрописью);
		
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Процедура печати документа.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧек", "Товарный чек", 
			ПечатьТоварныйЧек(МассивОбъектов, ОбъектыПечати), , "Документ.РозничнаяПродажа.ПФ_MXL_ТоварныйЧек");
		
	КонецЕсли;
		
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТоварныйЧек";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек'");
	//КомандаПечати.СписокФорм = "ФормаДокументаОбщая, ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	Если ПравоДоступа("Использование", Метаданные.Отчеты.РеестрДокументов) Тогда
		// Реестр документов
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор  = "Реестр";
		КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
		КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Розничная продажа (чек)""'");
		КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
		КомандаПечати.СписокФорм     = "ФормаСписка";
		КомандаПечати.Порядок        = 100;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//   КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор               = "ТоварныйЧек";
	КомандаОтправки.Представление               = НСтр("ru = 'Товарный чек'");
	КомандаОтправки.Порядок                     = 1;
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	
	Возврат Результат;
КонецФункции

#КонецОбласти

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыДокумента = Новый Соответствие;
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийРозничнаяПродажа.Продажа, "ФормаДокументаОбщая");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийРозничнаяПродажа.Возврат, "ФормаДокументаОбщая");
	
	Возврат ФормыДокумента;

КонецФункции

Функция ТекстЗапросаДанныеТабличныхЧастей(СписокТабличныхЧастей)
	
	СписокТабличныхЧастей.Вставить("Товары",                СписокТабличныхЧастей.Количество());
	СписокТабличныхЧастей.Вставить("АгентскиеУслуги",       СписокТабличныхЧастей.Количество());
	СписокТабличныхЧастей.Вставить("ПодарочныеСертификаты", СписокТабличныхЧастей.Количество());
	СписокТабличныхЧастей.Вставить("Оплата",                СписокТабличныхЧастей.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РозничнаяПродажаТовары.Ссылка КАК Ссылка,
	|	РозничнаяПродажаТовары.НомерСтроки КАК НомерСтроки,
	|	РозничнаяПродажаТовары.Номенклатура КАК Номенклатура,
	|	РозничнаяПродажаТовары.Количество КАК Количество,
	|	РозничнаяПродажаТовары.Цена КАК Цена,
	|	РозничнаяПродажаТовары.Сумма КАК Сумма,
	|	РозничнаяПродажаТовары.СтавкаНДС КАК СтавкаНДС,
	|	РозничнаяПродажаТовары.СуммаНДС КАК СуммаНДС,
	|	РозничнаяПродажаТовары.КиЗ_ГИСМ КАК КиЗ_ГИСМ,
	|	РозничнаяПродажаТовары.АкцизнаяМарка КАК АкцизнаяМарка,
	|	РозничнаяПродажаТовары.Справка2 КАК Справка2,
	|	РозничнаяПродажаТовары.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	РозничнаяПродажаТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	РозничнаяПродажаТовары.Штрихкод КАК Штрихкод
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	|ГДЕ
	|	(НЕ РозничнаяПродажаТовары.Номенклатура.Услуга ИЛИ РозничнаяПродажаТовары.Ссылка.ОтчетОРозничныхПродажах = Значение(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка))
	|	И РозничнаяПродажаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничнаяПродажаАгентскиеУслуги.Ссылка КАК Ссылка,
	|	РозничнаяПродажаАгентскиеУслуги.НомерСтроки КАК НомерСтроки,
	|	РозничнаяПродажаАгентскиеУслуги.Номенклатура КАК Номенклатура,
	|	РозничнаяПродажаАгентскиеУслуги.Содержание КАК Содержание,
	|	РозничнаяПродажаАгентскиеУслуги.Количество КАК Количество,
	|	РозничнаяПродажаАгентскиеУслуги.Цена КАК Цена,
	|	РозничнаяПродажаАгентскиеУслуги.Сумма КАК Сумма,
	|	РозничнаяПродажаАгентскиеУслуги.СтавкаНДС КАК СтавкаНДС,
	|	РозничнаяПродажаАгентскиеУслуги.СуммаНДС КАК СуммаНДС,
	|	РозничнаяПродажаАгентскиеУслуги.Контрагент КАК Контрагент,
	|	РозничнаяПродажаАгентскиеУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.РозничнаяПродажа.АгентскиеУслуги КАК РозничнаяПродажаАгентскиеУслуги
	|ГДЕ
	|	РозничнаяПродажаАгентскиеУслуги.Ссылка = &Ссылка
	|	И РозничнаяПродажаАгентскиеУслуги.Ссылка.ОтчетОРозничныхПродажах  = Значение(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничнаяПродажаПодарочныеСертификаты.Ссылка КАК Ссылка,
	|	РозничнаяПродажаПодарочныеСертификаты.НомерСтроки КАК НомерСтроки,
	|	РозничнаяПродажаПодарочныеСертификаты.ВидОплаты КАК ВидОплаты,
	|	РозничнаяПродажаПодарочныеСертификаты.Сумма КАК Сумма
	|ИЗ
	|	Документ.РозничнаяПродажа.ПодарочныеСертификаты КАК РозничнаяПродажаПодарочныеСертификаты
	|ГДЕ
	|	РозничнаяПродажаПодарочныеСертификаты.Ссылка = &Ссылка
	|	И РозничнаяПродажаПодарочныеСертификаты.Ссылка.ОтчетОРозничныхПродажах = Значение(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничнаяПродажаОплата.Ссылка КАК Ссылка,
	|	РозничнаяПродажаОплата.НомерСтроки КАК НомерСтроки,
	|	РозничнаяПродажаОплата.ВидОплаты КАК ВидОплаты,
	|	РозничнаяПродажаОплата.Сумма КАК Сумма,
	|	РозничнаяПродажаОплата.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	РозничнаяПродажаОплата.СсылочныйНомер КАК СсылочныйНомер,
	|	РозничнаяПродажаОплата.НомерЧекаЭТ КАК НомерЧекаЭТ
	|ИЗ
	|	Документ.РозничнаяПродажа.Оплата КАК РозничнаяПродажаОплата
	|ГДЕ
	|	РозничнаяПродажаОплата.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
КонецФункции


Процедура СкопироватьТабличныеЧасти(Объект, Основание) Экспорт
	СписокТабличныхЧастей = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеТабличныхЧастей(СписокТабличныхЧастей);
	
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	РезультатаЗапроса = Запрос.ВыполнитьПакет();
	
	Для каждого ТабличнаяЧасть Из СписокТабличныхЧастей Цикл
		Объект[ТабличнаяЧасть.Ключ].Загрузить(РезультатаЗапроса[ТабличнаяЧасть.Значение].Выгрузить());
	КонецЦикла;
	
	СуммаДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаДокумента");
	
	Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "Товары") 
		+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "АгентскиеУслуги")
		+ Объект.ПодарочныеСертификаты.Итог("Сумма");
	
	Если Объект.Оплата.Количество() > 0 И Объект.СуммаДокумента <> СуммаДокументаОснования Тогда
		СуммаБезналичнойОплаты = Объект.Оплата.Итог("Сумма")*Объект.СуммаДокумента/СуммаДокументаОснования;
		Если СуммаБезналичнойОплаты = 0 Тогда
			Объект.Оплата.Очистить();
		Иначе
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаБезналичнойОплаты, Объект.Оплата, "Сумма");
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РозничнаяПродажаТовары.Номенклатура КАК Номенклатура,
	|	РозничнаяПродажаТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	|ГДЕ
	|	РозничнаяПродажаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РозничнаяПродажаУслуги.Номенклатура,
	|	РозничнаяПродажаУслуги.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ИЗ
	|	Документ.РозничнаяПродажа.АгентскиеУслуги КАК РозничнаяПродажаУслуги
	|ГДЕ
	|	РозничнаяПродажаУслуги.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
КонецФункции

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию Тогда
		
		Возврат ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

Функция ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументРозничнаяПродажа.Ссылка КАК Ссылка,
	|	ДокументРозничнаяПродажа.Номер КАК Номер,
	|	ДокументРозничнаяПродажа.Дата КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
	|	ДокументРозничнаяПродажа.Ссылка КАК ДокументОснование,
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
	|	КлассификаторОрганизацийЕГАИС.Код КАК ИдентификаторФСРАР,
	|	КлассификаторОрганизацийЕГАИС.ФорматОбмена КАК ФорматОбмена,
	|	КлассификаторОрганизацийЕГАИС.ИНН КАК ИНН,
	|	КлассификаторОрганизацийЕГАИС.КПП КАК КПП,
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
	|	&АдресТорговогоОбъекта КАК АдресТорговогоОбъекта,
	|	&Кассир КАК Ответственный,
	|	&НомерСмены КАК НомерСмены,
	|	&НомерЧека КАК НомерЧекаККМ,
	|	&СерийныйНомер КАК СерийныйНомерККМ
	|ПОМЕСТИТЬ Шапка
	|ИЗ
	|	Документ.РозничнаяПродажа КАК ДокументРозничнаяПродажа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО ДокументРозничнаяПродажа.Ссылка = Версии.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО ДокументРозничнаяПродажа.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|ГДЕ
	|	ДокументРозничнаяПродажа.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	| *
	|ИЗ
	|	Шапка КАК Шапка", "Шапка");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК ИдентификаторСтроки,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	ВЫБОР Шапка.ВидОперации
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Продажа)
	|			ТОГДА ТабличнаяЧасть.Цена
	|		ИНАЧЕ -ТабличнаяЧасть.Цена
	|	КОНЕЦ КАК Цена,
	|	ТабличнаяЧасть.Штрихкод КАК Штрихкод,
	|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.АлкогольнаяПродукция.Объем КАК Объем
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК Шапка
	|		ПО ТабличнаяЧасть.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)",
		"Товары");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Шапка.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ТабличнаяЧасть.НомерСтроки КАК ИдентификаторСтроки,
	|	ЕСТЬNULL(ТабличнаяЧасть.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Справка2 КАК Справка2,
	|	ТабличнаяЧасть.АкцизнаяМарка КАК ШтрихкодУпаковки,
	|	ТабличнаяЧасть.ШтрихкодУпаковки КАК ШтрихкодРодительскойУпаковки
	|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
	|		ПО ТабличнаяЧасть.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодУпаковки,
	|	ШтрихкодРодительскойУпаковки");
	
	ПараметрыФормированияТекстаЗапроса = Справочники.ШтрихкодыУпаковокТоваров.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция     = "АлкогольнаяПродукция";
	ТекстыЗапроса.Добавить(
		Справочники.ШтрихкодыУпаковокТоваров.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось отправить чек в ЕГАИС'");
	Иначе
		НомерЧека             = ДополнительныеПараметры.НомерЧека;
		НомерСмены            = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер         = ДополнительныеПараметры.СерийныйНомер;
		АдресТорговогоОбъекта = ДополнительныеПараметры.АдресТорговогоОбъекта;
	КонецЕсли;
	
	ДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Организация, Дата, ВидОперации");
	
	ДанныеКассира = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛицаТекущегоПользователя(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата);
	
	Запрос.УстановитьПараметр("НомерЧека",             НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",            НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер",         СерийныйНомер);
	Запрос.УстановитьПараметр("АдресТорговогоОбъекта", АдресТорговогоОбъекта);
	
	Если ДанныеКассира.Представление <> Неопределено Тогда
		Кассир = СокрЛП(СтрШаблон("%1 %2", Строка(ДанныеКассира.Должность), ДанныеКассира.Представление));
	Иначе
		Кассир = НСтр("ru = 'Администратор'");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Кассир", Кассир);
	
	РезультатыЗапроса = ГосударственныеИнформационныеСистемы.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекЕГАИСXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц);
КонецФункции

Функция ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                           КАК Номер,
		|	Шапка.Дата                            КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)    КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                          КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка  КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	&АдресТорговогоОбъекта                       КАК АдресТорговогоОбъекта,
		|	Шапка.Кассир                                 КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЧекККМ КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.Склад = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
		|		 И Шапка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.ИдентификаторСтроки     КАК ИдентификаторСтроки,
		|	Товары.НомерСтроки             КАК НомерСтроки,
		|	Товары.Количество              КАК Количество,
		|	-Товары.Цена                   КАК Цена,
		|	Товары.Штрихкод                КАК Штрихкод,
		|	Товары.НоменклатураЕГАИС       КАК АлкогольнаяПродукция,
		|	Товары.НоменклатураЕГАИС.Объем КАК Объем
		|ИЗ
		|	Документ.РозничнаяПродажа.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|	И Товары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
		|	И НЕ Товары.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
		|",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Шапка.ОрганизацияЕГАИС                    КАК ОрганизацияЕГАИС,
		|	ТабличнаяЧасть.ИдентификаторСтроки        КАК ИдентификаторСтроки,
		|	ЕСТЬNULL(ТабличнаяЧастьТовары.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2                   КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка              КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки           КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.ЧекККМ.АкцизныеМарки КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТабличнаяЧастьТовары
		|		ПО ТабличнаяЧастьТовары.ИдентификаторСтроки = ТабличнаяЧасть.ИдентификаторСтроки
		|		И ТабличнаяЧастьТовары.ИдентификаторСтроки <> """"
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО ИСТИНА
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|");
	
	ПараметрыФормированияТекстаЗапроса = Справочники.ШтрихкодыУпаковокТоваров.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция     = "АлкогольнаяПродукция";
	ТекстыЗапроса.Добавить(
		Справочники.ШтрихкодыУпаковокТоваров.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось отправить чек в ЕГАИС'");
	Иначе
		НомерЧека             = ДополнительныеПараметры.НомерЧека;
		НомерСмены            = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер         = ДополнительныеПараметры.СерийныйНомер;
		АдресТорговогоОбъекта = ДополнительныеПараметры.АдресТорговогоОбъекта;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЧека",             НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",            НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер",         СерийныйНомер);
	Запрос.УстановитьПараметр("АдресТорговогоОбъекта", АдресТорговогоОбъекта);
	
	РезультатыЗапроса = ГосударственныеИнформационныеСистемы.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекЕГАИСXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц);
	
КонецФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры);
	
	ИнтеграцияЕГАИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата КАК Период,
	|	ЕСТЬNULL(КлассификаторОрганизацийЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.пустаяСсылка)) КАК ОрганизацияЕГАИС,
	|	ДанныеШапки.Ссылка КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус КАК СтатусОбработки
	|ИЗ
	|	Документ.РозничнаяПродажа КАК ДанныеШапки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО (СтатусыДокументовЕГАИС.Документ = ДанныеШапки.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО ДанныеШапки.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", Реквизиты.ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СтатусОбработки",  Реквизиты.СтатусОбработки);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	Возврат "";
КонецФункции

Функция ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
	
	Если НЕ ИнтеграцияЕГАИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                            КАК Период,
	|	ТаблицаАкцизныеМарки.Ссылка        КАК Ссылка,
	|	&ОрганизацияЕГАИС                  КАК ОрганизацияЕГАИС,
	|	ТаблицаАкцизныеМарки.Справка2      КАК Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК Количество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК СвободныйОстаток
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК ТаблицаАкцизныеМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|			ПО Справки2ЕГАИС.Ссылка = ТаблицаАкцизныеМарки.Справка2
	|ГДЕ
	|	ТаблицаАкцизныеМарки.Ссылка = &Ссылка
	|	И &СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияЕГАИС.ПереданВУТМ)
	|	И ТаблицаАкцизныеМарки.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаАкцизныеМарки.Ссылка,
	|	ТаблицаАкцизныеМарки.Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти



#КонецОбласти

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Возврат ЧекиЕГАИС.ПоследовательностьОпераций(ДокументСсылка);
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ЧекиЕГАИС.ПриИзмененииСтатусаЧека(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
КонецПроцедуры

// Опеределить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПоУмолчанию();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокСвободныйОстаток() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокСвободныйОстаток();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокКоличество() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокКоличество();
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.ДальнейшееДействиеПоУмолчанию();
	
КонецФункции

#КонецОбласти

#Область СканированиеМаркируемойПродукции

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Если ДанныеШтрихкода.ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Алкогольная) <> Неопределено Тогда
		
		Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
			Возврат ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
		ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
		
			Возврат ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
		КонецЕсли;
		
	ИначеЕсли ДанныеШтрихкода.ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Табачная) <> Неопределено Тогда
		
		Возврат ОбработатьДанныеШтрихкодаЕдиницыТабачнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецФункции


// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - ТТН ЕГАИС (исходящая).
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМаркиМаркируемойПродукции(ДокументОбъект, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТоварыИАкцизныеМаркиМаркируемойПродукции(
			ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения,
			УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.Видпродукции <> Неопределено И СтрокаДерева.Номенклатура <> Неопределено Тогда
			
			Если СтрокаДерева.Видпродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
				
				ПараметрыЗаполнения.Вставить("РодительскийШтрихкод", УпаковкаВерхнегоУровня);
				ОбработатьДанныеШтрихкодаЕдиницыТабачнойПродукции(ДокументОбъект, СтрокаДерева, Неопределено, ПараметрыЗаполнения);
				
			ИначеЕсли СтрокаДерева.Видпродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
				
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область АлкогольнаяПродукция

Функция ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	ТабличнаяЧасть.Количество КАК Количество
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	ТабличнаяЧасть.Количество КАК Количество
	|ПОМЕСТИТЬ ВТСерии
	|ИЗ
	|	&Серии КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) КАК Справка2,
	|	СУММА(ТабличнаяЧасть.Количество) КАК Количество,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ) КАК Маркируемая
	|ИЗ
	|	ВТТовары КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТабличнаяЧасть.Номенклатура = СправочникНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АлкогольнаяПродукция КАК ВТ_АлкогольнаяПродукция
	|		ПО ТабличнаяЧасть.Номенклатура = ВТ_АлкогольнаяПродукция.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТабличнаяЧасть.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО (КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.АлкогольнаяПродукция,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Серии", ДокументОбъект.Серии.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ШтрихкодыУпаковок(ДокументСсылка, ЗаполнитьСправки2ИзРегистра = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	АкцизныеМаркиЕГАИС.АкцизнаяМарка КАК ШтрихкодУпаковки,
	|	ВЫБОР
	|		КОГДА АкцизныеМаркиЕГАИС.Справка2 = РозничнаяПродажаТовары.Справка2
	|			ТОГДА АкцизныеМаркиЕГАИС.Справка2
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса)
	|	КОНЕЦ КАК Статус,
	|	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	РозничнаяПродажаТовары.Справка2 КАК Справка2
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО РозничнаяПродажаТовары.Ссылка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО РозничнаяПродажаТовары.АкцизнаяМарка = АкцизныеМаркиЕГАИС.АкцизнаяМарка
	|ГДЕ
	|	РозничнаяПродажаТовары.Ссылка = &Ссылка";
	
	Если ЗаполнитьСправки2ИзРегистра Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РозничнаяПродажаТовары.Справка2", "АкцизныеМаркиЕГАИС.Справка2");
	КонецЕсли; 
	
	Возврат Новый Структура("МаркированныеТовары", Запрос.Выполнить().Выгрузить());
КонецФункции

// Функция предназначена для обработки считанного штрихкода акцизной марки старого (PDF417) и нового (Data Matrix) образцов
//
Функция ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
	
	Объект = Форма.Объект;
	
	СтрокиТовара = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, АкцизнаяМарка", ДанныеШтрихкода.Номенклатура, Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка()));
	
	Если СтрокиТовара.Количество() = 0 Тогда
		СтрокаТовара = Объект.Товары.Добавить();
		Результат.ДобавленныеСтроки.Добавить(СтрокаТовара);
	Иначе
		СтрокаТовара = СтрокиТовара[0];
		Результат.ИзмененныеСтроки.Добавить(СтрокаТовара);
	КонецЕсли; 
	
	СтрокаТовара.Номенклатура         = ДанныеШтрихкода.Номенклатура;
	СтрокаТовара.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
	СтрокаТовара.Количество           = СтрокаТовара.Количество + ДанныеШтрихкода.Количество;
	СтрокаТовара.ШтрихкодУпаковки     = ДанныеШтрихкода.ШтрихкодУпаковки;
	СтрокаТовара.АкцизнаяМарка        = ДанныеШтрихкода.ШтрихкодУпаковки;
	СтрокаТовара.Штрихкод             = ДанныеШтрихкода.Штрихкод;
	
	
	Возврат Результат;
	
КонецФункции

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - ТТН ЕГАИС (исходящая).
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМарки(ДокументОбъект, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТоварыИАкцизныеМарки(
			ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения,
			УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция предназначена для обработки считанного малого штрихкода акцизной марки старого (PDF417) образца
//
Функция ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	Результат.ТекстОшибки = НСтр("ru = 'Обработка кодов DataMatrix в документе Чек ККМ не поддерживается. Считайте код акцизной марки.'");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТабачнаяПродукция

Функция ОбработатьДанныеШтрихкодаЕдиницыТабачнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения  = ШтрихкодированиеИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканирования);
		РезультатОбработки  = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод = Неопределено;
	Иначе
		РезультатОбработки  = ПараметрыЗаполнения;
		РодительскийШтрихкод = ПараметрыЗаполнения.РодительскийШтрихкод
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкода);
	
	НоваяСтрокаТовары = Объект.Товары.Добавить();
	НоваяСтрокаТовары.Номенклатура = ДанныеШтрихкода.Номенклатура;
	НоваяСтрокаТовары.Количество  = ДанныеШтрихкода.КоличествоПачек;
	
	РезультатОбработки.ДобавленныеСтроки.Добавить(НоваяСтрокаТовары);
	
	Если РодительскийШтрихкод <> Неопределено Тогда
		НоваяСтрокаТовары.АкцизнаяМарка = РодительскийШтрихкод;
	Иначе
		НоваяСтрокаТовары.АкцизнаяМарка = ДанныеШтрихкода.ШтрихкодУпаковки;
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма документа.
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМаркиТабачнойПродукции(Форма, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТоварыИАкцизныеМаркиТабачнойПродукции(
			Форма, СтрокаДерева, ПараметрыЗаполнения,
			УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.Вставить("РодительскийШтрихкод", УпаковкаВерхнегоУровня);
			ОбработатьДанныеШтрихкодаЕдиницыТабачнойПродукции(Форма, СтрокаДерева, Неопределено, ПараметрыЗаполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормированиеОРП

Функция ЕстьПравоПриемРозничнойВыручки(Организация)
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
		ЕстьПравоПриемРозничнойВыручки = Ложь;
	ИначеЕсли Пользователи.ЭтоПолноправныйПользователь() ИЛИ НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		ЕстьПравоПриемРозничнойВыручки = Истина;
	Иначе
		НачатьТранзакцию();
		Попытка
			ДокументОбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(Новый Структура("Организация, ВидОперации", Организация, Перечисления.ВидыОперацийПКО.РозничнаяВыручка));
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЕстьПравоПриемРозничнойВыручки = Истина;
		Исключение
			ЕстьПравоПриемРозничнойВыручки = Ложь;
		КонецПопытки;
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат ЕстьПравоПриемРозничнойВыручки;
КонецФункции

Функция ЕстьПравоВозвратРозничнойВыручки(Организация)
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
		ЕстьПравоПриемРозничнойВыручки = Ложь;
	ИначеЕсли Пользователи.ЭтоПолноправныйПользователь() ИЛИ НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		ЕстьПравоПриемРозничнойВыручки = Истина;
	Иначе
		НачатьТранзакцию();
		Попытка
			ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(Новый Структура("Организация, ВидОперации", Организация, Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю));
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЕстьПравоПриемРозничнойВыручки = Истина;
		Исключение
			ЕстьПравоПриемРозничнойВыручки = Ложь;
		КонецПопытки;
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат ЕстьПравоПриемРозничнойВыручки;
КонецФункции

Функция ТекстЗапросаНезакрытыеЧеки(СписокТаблиц)
	
	СписокТаблиц.Вставить("ВТ_РозничныеЧекиКПогашению",   СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_Продажи",                   СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_Возвраты",                  СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаЧеки",                  СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаДокументы",             СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_ТаблицаТовары",             СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаТовары",                СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаВозвраты",              СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_ВозвратУслуг",              СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаВозвратУслуг",          СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_АгентскиеУслуги",           СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаАгентскиеУслуги",       СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаПодарочныеСертификаты", СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаОплаты",                СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаВозвратОплаты",         СписокТаблиц.Количество());

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка КАК Ссылка,
		|	РозничнаяПродажа.Организация КАК Организация,
		|	РозничнаяПродажа.Склад КАК Склад,
		|	РозничнаяПродажа.ДокументБезНДС КАК ДокументБезНДС,
		|	РозничнаяПродажа.СуммаВключаетНДС КАК ЦенаВключаетНДС,
		|	РозничнаяПродажа.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Возврат) КАК ЭтоВозврат,
		|	ЕСТЬNULL(РозничнаяПродажа.Основание.ОтчетОРозничныхПродажах, ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка) КАК ЭтоВозвратЗакрытогоПериода
		|ПОМЕСТИТЬ ВТ_РозничныеЧекиКПогашению
		|ИЗ
		|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|ГДЕ
		|	РозничнаяПродажа.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
		|	И РозничнаяПродажа.ИдентификаторУстройства = &ИдентификаторУстройства
		|	И РозничнаяПродажа.Проведен
		|	И РозничнаяПродажа.Организация = &Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтоВозврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка КАК Ссылка,
		|	РозничнаяПродажа.Организация КАК Организация,
		|	РозничнаяПродажа.Склад КАК Склад,
		|	РозничнаяПродажа.СуммаВключаетНДС КАК ЦенаВключаетНДС,
		|	РозничнаяПродажа.ДокументБезНДС КАК ДокументБезНДС
		|ПОМЕСТИТЬ ВТ_Продажи
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|		ПО РозничныеЧекиКПогашению.Ссылка = РозничнаяПродажа.Ссылка
		|ГДЕ
		|	НЕ РозничныеЧекиКПогашению.ЭтоВозврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка КАК Ссылка,
		|	РозничнаяПродажа.Основание КАК Основание,
		|	РозничнаяПродажа.Организация КАК Организация,
		|	РозничнаяПродажа.Склад КАК Склад,
		|	РозничнаяПродажа.СуммаВключаетНДС КАК ЦенаВключаетНДС,
		|	РозничнаяПродажа.ДокументБезНДС КАК ДокументБезНДС,
		|	РозничнаяПродажа.СуммаДокумента КАК СуммаДокумента
		|ПОМЕСТИТЬ ВТ_Возвраты
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|		ПО РозничныеЧекиКПогашению.Ссылка = РозничнаяПродажа.Ссылка
		|ГДЕ
		|	РозничныеЧекиКПогашению.ЭтоВозврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Ссылка КАК РозничнаяПродажа,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|
		|СГРУППИРОВАТЬ ПО
		|	РозничныеЧекиКПогашению.Ссылка,
		|	РозничныеЧекиКПогашению.Склад,
		|	РозничныеЧекиКПогашению.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК ОтчетОРозничныхПродажах,
		|	МИНИМУМ(РозничныеЧекиКПогашению.ДокументБезНДС) КАК ДокументБезНДС
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|
		|СГРУППИРОВАТЬ ПО
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.КиЗ_ГИСМ КАК КиЗ_ГИСМ,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	РозничныеЧекиКПогашению.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ТаблицаТовары.Номенклатура.НомерГТД КАК НомерГТД,
		|	ТаблицаТовары.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения
		|ПОМЕСТИТЬ ВТ_ТаблицаТовары
		|ИЗ
		|	ВТ_Продажи КАК РозничныеЧекиКПогашению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК ТаблицаТовары
		|		ПО РозничныеЧекиКПогашению.Ссылка = ТаблицаТовары.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Возвраты.Организация,
		|	ВТ_Возвраты.Склад,
		|	РозничнаяПродажаТовары.Номенклатура,
		|	РозничнаяПродажаТовары.Цена,
		|	РозничнаяПродажаТовары.КиЗ_ГИСМ,
		|	-РозничнаяПродажаТовары.Количество,
		|	-РозничнаяПродажаТовары.Сумма,
		|	РозничнаяПродажаТовары.СтавкаНДС,
		|	-РозничнаяПродажаТовары.СуммаНДС,
		|	ВТ_Возвраты.ЦенаВключаетНДС,
		|	РозничнаяПродажаТовары.Номенклатура.НомерГТД,
		|	РозничнаяПродажаТовары.Номенклатура.СтранаПроисхождения
		|ИЗ
		|	ВТ_Возвраты КАК ВТ_Возвраты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
		|		ПО ВТ_Возвраты.Ссылка = РозничнаяПродажаТовары.Ссылка
		|ГДЕ
		|	РозничнаяПродажаТовары.Номенклатура.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Организация КАК Организация,
		|	ТаблицаТовары.Склад КАК Склад,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.КиЗ_ГИСМ КАК КиЗ_ГИСМ,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
		|	ТаблицаТовары.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ТаблицаТовары.НомерГТД КАК НомерГТД,
		|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения
		|ИЗ
		|	ВТ_ТаблицаТовары КАК ТаблицаТовары
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.КиЗ_ГИСМ,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.Организация,
		|	ТаблицаТовары.Склад,
		|	ТаблицаТовары.ЦенаВключаетНДС,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.СтранаПроисхождения
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТаблицаТовары.Количество) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.Сумма) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.СуммаНДС) <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка.НомерЧекаККМ КАК НомерФискальногоЧека,
		|	ВЫБОР
		|		КОГДА НЕ ПродажиТекущейСмены.Ссылка ЕСТЬ NULL
		|			ТОГДА &ДатаДокумента
		|		ИНАЧЕ ЕСТЬNULL(ОснованиеВозврата.ОтчетОРозничныхПродажах.Дата, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ КАК ДатаРеализации,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.КиЗ_ГИСМ КАК КиЗ_ГИСМ,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
		|	РозничныеЧекиКПогашению.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ТаблицаТовары.Номенклатура.НомерГТД КАК НомерГТД,
		|	ТаблицаТовары.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения
		|ИЗ
		|	ВТ_Возвраты КАК РозничныеЧекиКПогашению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК ТаблицаТовары
		|		ПО РозничныеЧекиКПогашению.Ссылка = ТаблицаТовары.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК ОснованиеВозврата
		|		ПО РозничныеЧекиКПогашению.Основание = ОснованиеВозврата.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Продажи КАК ПродажиТекущейСмены
		|		ПО РозничныеЧекиКПогашению.Основание = ПродажиТекущейСмены.Ссылка
		|ГДЕ
		|	НЕ ТаблицаТовары.Номенклатура.Услуга
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.КиЗ_ГИСМ,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.СтавкаНДС,
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Склад,
		|	РозничныеЧекиКПогашению.ЦенаВключаетНДС,
		|	ТаблицаТовары.Номенклатура.НомерГТД,
		|	ТаблицаТовары.Номенклатура.СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА НЕ ПродажиТекущейСмены.Ссылка ЕСТЬ NULL
		|			ТОГДА &ДатаДокумента
		|		ИНАЧЕ ЕСТЬNULL(ОснованиеВозврата.ОтчетОРозничныхПродажах.Дата, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ,
		|	ТаблицаТовары.Ссылка.НомерЧекаККМ
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТаблицаТовары.Количество) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.Сумма) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.СуммаНДС) <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Возвраты.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ВТ_Возвраты.ЦенаВключаетНДС
		|			ТОГДА РозничнаяПродажаАгентскиеУслуги.Сумма
		|		ИНАЧЕ РозничнаяПродажаАгентскиеУслуги.Сумма + РозничнаяПродажаАгентскиеУслуги.СуммаНДС
		|	КОНЕЦ КАК Сумма
		|ПОМЕСТИТЬ ВТ_ВозвратУслуг
		|ИЗ
		|	ВТ_Возвраты КАК ВТ_Возвраты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.АгентскиеУслуги КАК РозничнаяПродажаАгентскиеУслуги
		|		ПО ВТ_Возвраты.Ссылка = РозничнаяПродажаАгентскиеУслуги.Ссылка
		|ГДЕ
		|	НЕ РозничнаяПродажаАгентскиеУслуги.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Возвраты.Ссылка,
		|	ВЫБОР
		|		КОГДА ВТ_Возвраты.ЦенаВключаетНДС
		|			ТОГДА РозничнаяПродажаТовары.Сумма
		|		ИНАЧЕ РозничнаяПродажаТовары.Сумма + РозничнаяПродажаТовары.СуммаНДС
		|	КОНЕЦ
		|ИЗ
		|	ВТ_Возвраты КАК ВТ_Возвраты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
		|		ПО ВТ_Возвраты.Ссылка = РозничнаяПродажаТовары.Ссылка
		|ГДЕ
		|	РозничнаяПродажаТовары.Номенклатура.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Возвраты.Ссылка КАК Ссылка,
		|	СУММА(ВТ_ВозвратУслуг.Сумма) КАК СуммаВозвратаУслуги,
		|	ВТ_Возвраты.СуммаДокумента КАК СуммаДокумента,
		|	ВТ_Возвраты.Основание КАК Основание
		|ИЗ
		|	ВТ_ВозвратУслуг КАК ВТ_ВозвратУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Возвраты КАК ВТ_Возвраты
		|		ПО ВТ_ВозвратУслуг.Ссылка = ВТ_Возвраты.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Возвраты.Ссылка,
		|	ВТ_Возвраты.СуммаДокумента,
		|	ВТ_Возвраты.Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	ТаблицаАгентскиеУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаАгентскиеУслуги.Содержание КАК Содержание,
		|	СУММА(ТаблицаАгентскиеУслуги.Количество * ВЫБОР
		|			КОГДА РозничныеЧекиКПогашению.ЭтоВозврат
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество,
		|	ТаблицаАгентскиеУслуги.Цена КАК Цена,
		|	СУММА(ТаблицаАгентскиеУслуги.Сумма * ВЫБОР
		|			КОГДА РозничныеЧекиКПогашению.ЭтоВозврат
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Сумма,
		|	ТаблицаАгентскиеУслуги.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ТаблицаАгентскиеУслуги.СуммаНДС * ВЫБОР
		|			КОГДА РозничныеЧекиКПогашению.ЭтоВозврат
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК СуммаНДС,
		|	ТаблицаАгентскиеУслуги.Контрагент КАК Контрагент,
		|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	РозничныеЧекиКПогашению.ЦенаВключаетНДС КАК ЦенаВключаетНДС
		|ПОМЕСТИТЬ ВТ_АгентскиеУслуги
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.АгентскиеУслуги КАК ТаблицаАгентскиеУслуги
		|		ПО (ТаблицаАгентскиеУслуги.Ссылка = РозничныеЧекиКПогашению.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаАгентскиеУслуги.Номенклатура,
		|	ТаблицаАгентскиеУслуги.Содержание,
		|	ТаблицаАгентскиеУслуги.Цена,
		|	ТаблицаАгентскиеУслуги.СтавкаНДС,
		|	ТаблицаАгентскиеУслуги.Контрагент,
		|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента,
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Склад,
		|	РозничныеЧекиКПогашению.ЦенаВключаетНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_АгентскиеУслуги.Организация КАК Организация,
		|	ВТ_АгентскиеУслуги.Склад КАК Склад,
		|	ВТ_АгентскиеУслуги.Номенклатура КАК Номенклатура,
		|	ВТ_АгентскиеУслуги.Содержание КАК Содержание,
		|	ВТ_АгентскиеУслуги.Количество КАК Количество,
		|	ВТ_АгентскиеУслуги.Цена КАК Цена,
		|	ВТ_АгентскиеУслуги.Сумма КАК Сумма,
		|	ВТ_АгентскиеУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_АгентскиеУслуги.СуммаНДС КАК СуммаНДС,
		|	ВТ_АгентскиеУслуги.Контрагент КАК Контрагент,
		|	ВТ_АгентскиеУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВТ_АгентскиеУслуги.ЦенаВключаетНДС КАК ЦенаВключаетНДС
		|ИЗ
		|	ВТ_АгентскиеУслуги КАК ВТ_АгентскиеУслуги
		|ГДЕ
		|	ВТ_АгентскиеУслуги.Сумма <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	ТаблицаПодарочныеСертификаты.ВидОплаты КАК ВидОплаты,
		|	СУММА(ТаблицаПодарочныеСертификаты.Сумма * ВЫБОР
		|			КОГДА РозничныеЧекиКПогашению.ЭтоВозврат
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Сумма
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.ПодарочныеСертификаты КАК ТаблицаПодарочныеСертификаты
		|		ПО РозничныеЧекиКПогашению.Ссылка = ТаблицаПодарочныеСертификаты.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПодарочныеСертификаты.ВидОплаты,
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаПодарочныеСертификаты.Сумма) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Ссылка КАК Ссылка,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	ТаблицаОплата.ВидОплаты КАК ВидОплаты,
		|	СУММА(ТаблицаОплата.Сумма) КАК СуммаОплаты
		|ИЗ
		|	Документ.РозничнаяПродажа.Оплата КАК ТаблицаОплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Продажи КАК РозничныеЧекиКПогашению
		|		ПО ТаблицаОплата.Ссылка = РозничныеЧекиКПогашению.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОплата.ВидОплаты,
		|	РозничныеЧекиКПогашению.Ссылка,
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаОплата.Сумма) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Ссылка КАК Ссылка,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	ТаблицаОплата.ВидОплаты КАК ВидОплаты,
		|	СУММА(ТаблицаОплата.Сумма) КАК СуммаОплаты
		|ИЗ
		|	Документ.РозничнаяПродажа.Оплата КАК ТаблицаОплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Возвраты КАК РозничныеЧекиКПогашению
		|		ПО ТаблицаОплата.Ссылка = РозничныеЧекиКПогашению.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОплата.ВидОплаты,
		|	РозничныеЧекиКПогашению.Ссылка,
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаОплата.Сумма) <> 0";
	
	Возврат ТекстЗапроса;
КонецФункции 

Функция СформироватьОтчетыОРозничныхПродажах(Организация, ИдентификаторУстройства) Экспорт
	
	Запрос = Новый Запрос;
	
	ДанныеРозничныхПродаж = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаНезакрытыеЧеки(ДанныеРозничныхПродаж);
	
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("ДатаДокумента",           ОбщегоНазначения.ТекущаяДатаПользователя());
	Запрос.УстановитьПараметр("ИдентификаторУстройства", ИдентификаторУстройства);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПараметрыЗаполнения = Новый Структура;
	Для Каждого КлючИЗначение Из ДанныеРозничныхПродаж Цикл
		ПараметрыЗаполнения.Вставить(КлючИЗначение.Ключ, РезультатЗапроса[КлючИЗначение.Значение].Выгрузить());
	КонецЦикла; 
	
	ДанныеЗаполнения = Новый Структура("Организация, Склад");
	
	ЕстьПравоПриемРозничнойВыручки = ЕстьПравоПриемРозничнойВыручки(Организация);
	ЕстьПравоВозвратРозничнойВыручки = ЕстьПравоВозвратРозничнойВыручки(Организация);
	ИспользоватьФиксированноеВремяВДокументах = ПолучитьФункциональнуюОпцию("ФиксированноеВремяВДокументах");
	
	ВозвратыУслуг = ПараметрыЗаполнения.ТаблицаВозвратУслуг;
	
	ТаблицаВозвратОплаты = ПараметрыЗаполнения.ТаблицаВозвратОплаты;
	ТаблицаОплаты        = ПараметрыЗаполнения.ТаблицаОплаты;
	Для Каждого СтрокаВозврата Из ВозвратыУслуг Цикл
		СтрокиОплаты      = ТаблицаОплаты.НайтиСтроки(Новый Структура("Ссылка", СтрокаВозврата.Основание));
		МассивСуммыОплаты = Новый Массив;
		
		ИтогоСуммаОплаты = 0;
		Для Каждого СтрокаОплаты Из СтрокиОплаты Цикл
			МассивСуммыОплаты.Добавить(СтрокаОплаты.СуммаОплаты);
			ИтогоСуммаОплаты = ИтогоСуммаОплаты + СтрокаОплаты.СуммаОплаты;
		КонецЦикла;
		
		// Возвраты по услугам "схлопываются" в соотвествующих ТЧ, поэтому безналичных оплат по ним делать не нужно.
		СуммаБезналичнойОплатыПоТоварам = ИтогоСуммаОплаты * (СтрокаВозврата.СуммаДокумента - СтрокаВозврата.СуммаВозвратаУслуги)/СтрокаВозврата.СуммаДокумента;
		МассивСуммыОплатыТовары = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаБезналичнойОплатыПоТоварам, МассивСуммыОплаты);
		Для Индекс = 0 По СтрокиОплаты.Количество()-1 Цикл
			СтрокиОплаты[Индекс].СуммаОплаты = ?(МассивСуммыОплатыТовары = Неопределено, 0, МассивСуммыОплатыТовары[Индекс]);
		КонецЦикла; 
		
		// Возвраты оплаты
		СтрокиВозвратаОплаты      = ТаблицаВозвратОплаты.НайтиСтроки(Новый Структура("Ссылка", СтрокаВозврата.Ссылка));
		МассивСуммыВозвратаОплаты = Новый Массив;
		
		ИтогоСуммаВозвратаОплаты = 0;
		Для Каждого СтрокаОплаты Из СтрокиВозвратаОплаты Цикл
			МассивСуммыВозвратаОплаты.Добавить(СтрокаОплаты.СуммаОплаты);
			ИтогоСуммаВозвратаОплаты = ИтогоСуммаВозвратаОплаты + СтрокаОплаты.СуммаОплаты;
		КонецЦикла;
		
		// Возвраты по услугам "схлопываются" в соотвествующих ТЧ, поэтому возврат безналичных оплат по ним делать не нужно.
		СуммаБезналичногоВозвратаПоТоварам = ИтогоСуммаВозвратаОплаты * (СтрокаВозврата.СуммаДокумента - СтрокаВозврата.СуммаВозвратаУслуги)/СтрокаВозврата.СуммаДокумента;
		
		МассивСуммыВозвратаОплатыТовары = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаБезналичногоВозвратаПоТоварам, МассивСуммыВозвратаОплаты);
		Для Индекс = 0 По СтрокиВозвратаОплаты.Количество()-1 Цикл
			СтрокиВозвратаОплаты[Индекс].СуммаОплаты = ?(МассивСуммыВозвратаОплатыТовары = Неопределено, 0, МассивСуммыВозвратаОплатыТовары[Индекс]);
		КонецЦикла; 
	КонецЦикла; 
	
	ТаблицаВозвратОплаты.Свернуть("Организация, Склад, ВидОплаты", "СуммаОплаты");
	ТаблицаОплаты.Свернуть("Организация, Склад, ВидОплаты", "СуммаОплаты");
	
	ДокументыКПроведению = Новый Массив;
	
	НачатьТранзакцию();
	
	Для Каждого СтрокаДокументы Из ПараметрыЗаполнения.ТаблицаДокументы Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаДокументы);
		
		ТоварыПоДокументу                = ПараметрыЗаполнения.ТаблицаТовары.Скопировать(ДанныеЗаполнения);
		ВозвратыПоДокументу              = ПараметрыЗаполнения.ТаблицаВозвраты.Скопировать(ДанныеЗаполнения);
		АгентскиеУслугиПоДокументу       = ПараметрыЗаполнения.ТаблицаАгентскиеУслуги.Скопировать(ДанныеЗаполнения);
		ПодарочныеСертификатыПоДокументу = ПараметрыЗаполнения.ТаблицаПодарочныеСертификаты.Скопировать(ДанныеЗаполнения);
		ОплатаПоДокументу                = ТаблицаОплаты.Скопировать(ДанныеЗаполнения);
		ВозвратыОплат                    = ТаблицаВозвратОплаты.Скопировать(ДанныеЗаполнения);
		
		
		// Не создаем документ, если все его табличные части будут пустыми.
		Если ТоварыПоДокументу.Количество() = 0
			И ВозвратыПоДокументу.Количество() = 0
			И АгентскиеУслугиПоДокументу.Количество() = 0 
			И ПодарочныеСертификатыПоДокументу.Количество() = 0 
			И ОплатаПоДокументу.Количество() = 0 Тогда
			
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТовары Из ТоварыПоДокументу Цикл
			Если Не СтрокаТовары.ЦенаВключаетНДС Тогда
				СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
				СтрокаТовары.Цена  = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма/СтрокаТовары.Количество, 0);
			КонецЕсли; 
		КонецЦикла;
		
		Для Каждого СтрокаТовары Из ВозвратыПоДокументу Цикл
			Если Не СтрокаТовары.ЦенаВключаетНДС Тогда
				СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
				СтрокаТовары.Цена  = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма/СтрокаТовары.Количество, 0);
			КонецЕсли; 
		КонецЦикла;
		
		Для Каждого СтрокаАгентскиеУслуги Из АгентскиеУслугиПоДокументу Цикл
			Если Не СтрокаАгентскиеУслуги.ЦенаВключаетНДС Тогда
				СтрокаАгентскиеУслуги.Сумма = СтрокаАгентскиеУслуги.Сумма + СтрокаАгентскиеУслуги.СуммаНДС;
				СтрокаАгентскиеУслуги.Цена  = ?(СтрокаАгентскиеУслуги.Количество <> 0, СтрокаАгентскиеУслуги.Сумма/СтрокаАгентскиеУслуги.Количество, 0);
			КонецЕсли; 
		КонецЦикла; 
		
		ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		ОтчетОРозничныхПродажах.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
		ОтчетОРозничныхПродажах.Заполнить(ДанныеЗаполнения);
		ОтчетОРозничныхПродажах.ДокументБезНДС = СтрокаДокументы.ДокументБезНДС;
		
		Если Не ИспользоватьФиксированноеВремяВДокументах Тогда
			ОтчетОРозничныхПродажах.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним, Истина);
		КонецЕсли;
		
		ОтчетОРозничныхПродажах.Товары.Загрузить(ТоварыПоДокументу);
		ОтчетОРозничныхПродажах.Возвраты.Загрузить(ВозвратыПоДокументу);
		ОтчетОРозничныхПродажах.АгентскиеУслуги.Загрузить(АгентскиеУслугиПоДокументу);
		ОтчетОРозничныхПродажах.ПодарочныеСертификаты.Загрузить(ПодарочныеСертификатыПоДокументу);
		ОтчетОРозничныхПродажах.Оплата.Загрузить(ОплатаПоДокументу);
		ОтчетОРозничныхПродажах.ВозвратОплаты.Загрузить(ВозвратыОплат);
		
		ОтчетОРозничныхПродажах.Комментарий = НСтр("ru = 'Создан автоматически закрытием кассовой смены'");
		
		ОтчетОРозничныхПродажах.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		
		ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
		ДокументыКПроведению.Добавить(ОтчетОРозничныхПродажах.Ссылка);
		
		СуммаПродаж = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ОтчетОРозничныхПродажах, "Товары") 
			+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ОтчетОРозничныхПродажах, "АгентскиеУслуги")
			+ ОтчетОРозничныхПродажах.ПодарочныеСертификаты.Итог("Сумма");
		
		// Если есть продажи оплаченные наличными
		Если ОтчетОРозничныхПродажах.Оплата.Итог("СуммаОплаты") < СуммаПродаж
			И ЕстьПравоПриемРозничнойВыручки Тогда
			ПриходныйОрдер = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ПриходныйОрдер.Заполнить(ОтчетОРозничныхПродажах.Ссылка);
			
			Если Не ИспользоватьФиксированноеВремяВДокументах Тогда
				ПриходныйОрдер.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним, Истина);
			КонецЕсли;
			
			ПриходныйОрдер.Записать(РежимЗаписиДокумента.Запись);
			ДокументыКПроведению.Добавить(ПриходныйОрдер.Ссылка);
		КонецЕсли;
		
		// Если есть продажи оплаченные наличными
		Если ОтчетОРозничныхПродажах.ВозвратОплаты.Итог("СуммаОплаты") < УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ОтчетОРозничныхПродажах, "Возвраты")
			И ЕстьПравоВозвратРозничнойВыручки Тогда
			РасходныйОрдер = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			РасходныйОрдер.Заполнить(ОтчетОРозничныхПродажах.Ссылка);
			
			Если Не ИспользоватьФиксированноеВремяВДокументах Тогда
				РасходныйОрдер.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним, Истина);
			КонецЕсли;
			
			РасходныйОрдер.Записать(РежимЗаписиДокумента.Запись);
			ДокументыКПроведению.Добавить(РасходныйОрдер.Ссылка);
		КонецЕсли;
		
		СтрокаДокументы.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажах.Ссылка;
		
	КонецЦикла;
	
	Для Каждого СтрокаПоЧеку Из ПараметрыЗаполнения.ТаблицаЧеки Цикл
	
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаПоЧеку);
		
		НайденныеСтроки = ПараметрыЗаполнения.ТаблицаДокументы.НайтиСтроки(ДанныеЗаполнения);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
		
			ДокументОбъект = СтрокаПоЧеку.РозничнаяПродажа.ПолучитьОбъект();
			ДокументОбъект.ОтчетОРозничныхПродажах = НайденныеСтроки[0].ОтчетОРозничныхПродажах;
			ДокументОбъект.Записать();
		
		КонецЕсли;
	
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	ПровестиДокументы(ДокументыКПроведению);
	
	Возврат ПараметрыЗаполнения.ТаблицаДокументы.ВыгрузитьКолонку("ОтчетОРозничныхПродажах");
	
КонецФункции

Процедура ПровестиДокументы(ДокументыКПроведению)
	
	НепроведенныеДокументы = ОбщегоНазначения.ПровестиДокументы(ДокументыКПроведению);
	Для Каждого РезультатПроведения Из НепроведенныеДокументы Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не проведен документ %1: %2'"),
			Строка(РезультатПроведения.Ссылка), РезультатПроведения.ОписаниеОшибки),
			РезультатПроведения.Ссылка, "Объект");
	КонецЦикла;
	
КонецПроцедуры
	
#КонецОбласти 


#КонецОбласти

#КонецЕсли













