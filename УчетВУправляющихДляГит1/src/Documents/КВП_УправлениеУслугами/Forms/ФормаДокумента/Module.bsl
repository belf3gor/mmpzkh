
#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста 
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийУправленияУслугами.НазначениеНаЛицевыеСчета")
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение(
	 							"Перечисление.КВП_ВидыОперацийУправленияУслугами.УдалитьНазначениеНаПарковочныеМеста") Тогда
	
		Элементы.ГруппаПериод.Видимость = Ложь;
		Элементы.ОбъектыДатаНачала.Видимость    = Истина;
		Элементы.ОбъектыДатаОкончания.Видимость = Истина;
		Если Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийУправленияУслугами.НазначениеНаЛицевыеСчета") Тогда
			Элементы.ОбъектыКвартира.Видимость = Истина;
		Иначе
			Элементы.ОбъектыКвартира.Видимость = Ложь;
		КонецЕсли;

	Иначе

		Элементы.ГруппаПериод.Видимость = Истина;
		Элементы.ОбъектыДатаНачала.Видимость    = Ложь;
		Элементы.ОбъектыДатаОкончания.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.ГруппаУслуги.Доступность = Форма.УслугиСписком;
	Если Не Форма.УслугиСписком Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОбъекты;
	КонецЕсли;
	Элементы.Услуга.Видимость = Не Форма.УслугиСписком;

КонецПроцедуры // УстановитьВидимостьЭлементов()

&НаСервере
// Процедура заполняет данные объектов.
Процедура ЗаполнитьДанныеОбъектаНаСервере()
	
	Для Каждого ДанныеСтроки Из Объект.Объекты Цикл
		ЗаполнитьДанныеОбъектаВСтроке(ДанныеСтроки.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет данные объекта в строке.
Процедура ЗаполнитьДанныеОбъектаВСтроке(НомерСтроки)
	
	ДанныеСтроки = Объект.Объекты.НайтиПоИдентификатору(НомерСтроки);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Объект) Тогда
		Если ТипЗнч(ДанныеСтроки.Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			ДанныеСтроки.Квартира = ДанныеСтроки.Объект.Адрес;
			ДанныеСтроки.Владелец = 
				УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ДанныеСтроки.Объект, КонецДня(Объект.Дата));
		КонецЕсли;
		Если ТипЗнч(ДанныеСтроки.Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
			ДанныеСтроки.Владелец = ДанныеСтроки.Объект.Владелец;
		КонецЕсли;
	Иначе
		ДанныеСтроки.Квартира = Неопределено;
		ДанныеСтроки.Владелец = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Процедура выполняет сортировку табличных частей.
//
Процедура СортироватьТЧНаСервере(ИмяТЧ, ИмяКолонкиИсх, ЭтоДерево, ПоВозрастанию)
	
	ИмяКолонки = Прав(ИмяКолонкиИсх, СтрДлина(ИмяКолонкиИсх) - СтрДлина(ИмяТЧ));
	
	ДанныеФормы = Объект[ИмяТЧ].Выгрузить();
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	УПЖКХ_ОбщегоНазначенияСервер.СортироватьТабличнуюЧасть(ДокОбъект, ИмяТЧ, ДанныеФормы, ИмяКолонки, ПоВозрастанию, ЭтоДерево);
	
	ЗначениеВДанныеФормы(ДанныеФормы, Объект[ИмяТЧ]);
	
КонецПроцедуры // СортироватьТЧНаСервере()

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УслугиСписком = (Объект.Услуги.Количество() > 1);
	Если Объект.Услуги.Количество() = 0 Тогда
		Объект.Услуги.Добавить();
	КонецЕсли;
	
	УслугиСписком = (Объект.Услуги.Количество() > 1);
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	Иначе
		// Заполним данные об объектах
		ЗаполнитьДанныеОбъектаНаСервере();
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Элементы.Услуги.ТекущаяСтрока = Объект.Услуги[0].ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДанныеОбъектаНаСервере();
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УслугиСписком".
Процедура УслугиСпискомПриИзменении(Элемент)
	
	Если НЕ УслугиСписком И Объект.Услуги.Количество() > 1 Тогда
		
		ТекстВопроса = "Все строки услуг из списка, кроме первой, будут удалены.
						|Продолжить?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("УслугиСпискомПриИзмененииЗавершение", ЭтотОбъект), 
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да,);
		Возврат;
		
	КонецЕсли;
	
	УслугиСпискомПриИзмененииФрагмент();
	
КонецПроцедуры // УслугиСпискомПриИзменении()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "УслугиСпискомПриИзменении()".
Процедура УслугиСпискомПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		УслугиСписком = Истина;
		Возврат;
	КонецЕсли;
	
	Пока Объект.Услуги.Количество() > 1 Цикл
		Объект.Услуги.Удалить(1);
	КонецЦикла;
	
	УслугиСпискомПриИзмененииФрагмент();
	
КонецПроцедуры // УслугиСпискомПриИзмененииЗавершение()

&НаКлиенте
// Продолжение процедуры "УслугиСпискомПриИзменении()".
Процедура УслугиСпискомПриИзмененииФрагмент()
	
	Если Объект.Услуги.Количество() = 0 Тогда
		Объект.Услуги.Добавить();
	КонецЕсли;
	
	Элементы.Услуги.ТекущаяСтрока = Объект.Услуги[0].ПолучитьИдентификатор();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // УслугиСпискомПриИзмененииФрагмент()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОперации".
Процедура ВидОперацииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиТабличногоПоляОбъекты

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОбъектыОбъект".
Процедура ОбъектыОбъектПриИзменении(Элемент)
	
	ЗаполнитьДанныеОбъектаВСтроке(Элементы.Объекты.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ОбъектыОбъект".
Процедура ОбъектыОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Элементы.ОбъектыОбъект.ВыбиратьТип = Ложь;
	
	ТекущиеДанные = Элементы.Объекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийУправленияУслугами.НазначениеНаЛицевыеСчета") Тогда
		ФормаВыбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора",
									Новый Структура("ТекущаяСтрока,ПараметрВыборГруппИЭлементов", ТекущиеДанные.Объект,
													ИспользованиеГруппИЭлементов.Элементы), Элемент);
		ФормаВыбора.Открыть();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийУправленияУслугами.УдалитьНазначениеНаПарковочныеМеста") Тогда
		ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Помещения.ФормаВыбора",
									Новый Структура("ТекущаяСтрока,ПараметрОтборТипПомещения", ТекущиеДанные.Объект,
													ПредопределенноеЗначение("Перечисление.КВП_ТипыПомещений.Автоместо")), Элемент);
		ФормаВыбора.Открыть();
	Иначе
		Элементы.ОбъектыОбъект.ВыбиратьТип = Истина;
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ОбъектыКвартира".
Процедура ОбъектыКвартираНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ОбъектыВладелец".
Процедура ОбъектыВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиТабличногоПоляУслуги

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Услуги".
Процедура УслугиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение)
	  И Объект.Услуги.НайтиСтроки(Новый Структура("Услуга", ВыбранноеЗначение)).Количество() = 0 Тогда
		НоваяСтрока = Объект.Услуги.Добавить();
		НоваяСтрока.Услуга = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "УстановитьДатуНачала".
Процедура УстановитьДатуНачала(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьДатуНачалаЗавершение", ЭтотОбъект);
	ПоказатьВводЗначения(ОписаниеОповещения, Объект.Дата, "Укажите дату для установки");
	
КонецПроцедуры // УстановитьДатуНачала()

&НаКлиенте
// обработчик результата выбор, вызванного в процедуре "УстановитьДатуНачала()".
Процедура УстановитьДатуНачалаЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	Если Не Значение = Неопределено Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Объекты Цикл
			СтрокаТабличнойЧасти.ДатаНачала = Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДатуНачалаЗавершение()

&НаКлиенте
// Обработчик команды "УстановитьДатуОкончания".
Процедура УстановитьДатуОкончания(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьДатуОкончанияЗавершение", ЭтотОбъект);
	ПоказатьВводЗначения(ОписаниеОповещения, Объект.Дата, "Укажите дату для установки");
	
КонецПроцедуры // УстановитьДатуОкончания()

&НаКлиенте
// ОБработчик результата ввода значения, вызванного в процедуре "УстановитьДатуОкончания()".
Процедура УстановитьДатуОкончанияЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	Если Не Значение = Неопределено Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Объекты Цикл
			СтрокаТабличнойЧасти.ДатаОкончания = Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДатуОкончанияЗавершение()

&НаКлиенте
// Обработчик команды "Заполнить".
Процедура Заполнить(Команда)
	
	СтруктураПараметров = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	
	// Параметры запросов.
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийУправленияУслугами.НазначениеНаЛицевыеСчета") Тогда
		
		СтруктураПараметров.Вставить("ТипОбъекта"                , "ЛицевыеСчета");
		СтруктураПараметров.Вставить("ТипЗначОбъекта"            , "ЛицевыеСчета");
		СтруктураПараметров.Вставить("КонПериодЛС"               , КонецДня(Объект.Дата));
		СтруктураПараметров.Вставить("НачПериодЛС"               , НачалоМесяца(Объект.Дата));
		СтруктураПараметров.Вставить("Организация"               , Объект.Организация);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийУправленияУслугами.УдалитьНазначениеНаПарковочныеМеста") Тогда
		
		СтруктураПараметров.Вставить("ТипОбъекта"                , "ПарковочныеМеста");
		СтруктураПараметров.Вставить("ТипЗначОбъекта"            , "ПарковочныеМеста");
		СтруктураПараметров.Вставить("Организация"               , Объект.Организация);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийУправленияУслугами.Приостановка") Тогда
		
		СписокУслуг = Новый СписокЗначений;
		
		Для Каждого ТекСтрока Из Объект.Услуги Цикл
			СписокУслуг.Добавить(ТекСтрока.Услуга);
		КонецЦикла;
		
		СтруктураПараметров.Вставить("Услуга"                    , СписокУслуг);
		СтруктураПараметров.Вставить("ДатаНач"                   , Объект.ДатаНач);
		СтруктураПараметров.Вставить("ДатаКон"                   , Объект.ДатаКон);
		СтруктураПараметров.Вставить("ТипОбъекта"                , "Квартиры");
		
		СписокТиповЗначенийОбъектов = Новый СписокЗначений;
		СписокТиповЗначенийОбъектов.Добавить("ЛицевыеСчета");
		СписокТиповЗначенийОбъектов.Добавить("ПарковочныеМеста");
		
		СтруктураПараметров.Вставить("ТипЗначОбъекта"            , СписокТиповЗначенийОбъектов);
		СтруктураПараметров.Вставить("ПриостановкаДействияУслуги", Истина);
		СтруктураПараметров.Вставить("Организация"               , Объект.Организация);
		
	КонецЕсли;
	
	ОписаниеЗавершенияВыбора = Новый ОписаниеОповещения("ЗаполнитьСписокОбъектовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеЗавершенияВыбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // Заполнить()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "Заполнить()".
Процедура ЗаполнитьСписокОбъектовЗавершение(СписокЗаполненных, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СписокЗаполненных) = Тип("СписокЗначений") И СписокЗаполненных.Количество() > 0 Тогда
		
		Если Объект.Объекты.Количество() > 0 Тогда
			ДопПараметры       = Новый Структура("СписокЗаполненных", СписокЗаполненных);
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещения, "Очистить табличную часть?", РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьФрагмент(СписокЗаполненных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "Заполнить()".
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СписокЗаполненных = ДополнительныеПараметры.СписокЗаполненных;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Объекты.Очистить();
	КонецЕсли;
	
	ЗаполнитьФрагмент(СписокЗаполненных);
	
КонецПроцедуры // ЗаполнитьЗавершение()

&НаКлиенте
// Продожение процедуры "Заполнить()".
Процедура ЗаполнитьФрагмент(Знач СписокЗаполненных)
	
	Для Каждого Строка ИЗ СписокЗаполненных Цикл
		СтрокаТабЧасти = Объект.Объекты.Добавить();
		СтрокаТабЧасти.Объект = Строка.Значение;
	КонецЦикла;
	
	ЗаполнитьДанныеОбъектаНаСервере();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.КВП_ВидыОперацийУправленияУслугами.НазначениеНаЛицевыеСчета")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.КВП_ВидыОперацийУправленияУслугами.УдалитьНазначениеНаПарковочныеМеста") Тогда
		Для Каждого СтрокаТабЧасти ИЗ Объект.Объекты Цикл
			СтрокаТабЧасти.ДатаНачала = Объект.Дата;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // Заполнить()

&НаКлиенте
// Обработчик команды "ПодобратьУслуги".
Процедура ПодобратьУслуги(Команда)
	
	ФормаПодбораУслуг = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора",
										Новый Структура("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы), Элементы.Услуги);
	ФормаПодбораУслуг.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбораУслуг.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОбъектыСортироватьСписокПоВозрастанию".
Процедура ОбъектыСортироватьСписокПоВозрастанию(Команда)
	
	СортироватьТЧНаСервере("Объекты", Элементы.Объекты.ТекущийЭлемент.Имя, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОбъектыСортироватьСписокПоУбыванию".
Процедура ОбъектыСортироватьСписокПоУбыванию(Команда)
	
	СортироватьТЧНаСервере("Объекты", Элементы.Объекты.ТекущийЭлемент.Имя, Ложь, Ложь);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти
