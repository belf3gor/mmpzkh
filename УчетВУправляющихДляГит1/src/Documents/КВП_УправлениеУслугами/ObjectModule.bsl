
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура проверки заполнения табличной части.
Процедура ПроверитьЗаполнениеТабличнойЧасти(Отказ)
	
	ЭтоПриостановка = (ВидОперации = Перечисления.КВП_ВидыОперацийУправленияУслугами.Приостановка);
	
	// Проверка дат начала и окончания предоставления услуг на корректность ввода.
	Если НЕ ЭтоПриостановка Тогда
		Для Каждого ТекНазначение Из Объекты Цикл
			Если ЗначениеЗаполнено(ТекНазначение.ДатаОкончания) И ТекНазначение.ДатаОкончания < ТекНазначение.ДатаНачала Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Дата окончания предоставления услуг"
																+ ?(Услуги.Количество() > 1, "", "и") + " в строке " + ТекНазначение.НомерСтроки 
																+ " меньше даты начала предоставления услуг"+ ?(Услуги.Количество() > 1, ".", "и.")
																+ " Проведение документа невозможно.", Отказ);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ЗначениеЗаполнено(ДатаКон) И ДатаКон < ДатаНач Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Дата конца периода меньше даты начала периода.");
		КонецЕсли;
	КонецЕсли;
		
	// Проверим назначение услуг.
	// Для этого получим дерево услуг и объектов по датам начала.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНач",         ДатаНач);
	Запрос.УстановитьПараметр("ТаблицаОбъектов", Объекты.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаУслуг",    Услуги.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОбъектов.Объект,
	|	&ПодстрокаВыбораДаты КАК ДатаНачала,
	|	ТаблицаОбъектов.НомерСтроки
	|ПОМЕСТИТЬ врТаблицаОбъектов
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.Услуга
	|ПОМЕСТИТЬ врТаблицаУслуг
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаОбъектов.Объект,
	|	врТаблицаУслуг.Услуга КАК Услуга,
	|	врТаблицаОбъектов.ДатаНачала КАК ДатаНачала
	|ИЗ
	|	врТаблицаОбъектов КАК врТаблицаОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаУслуг КАК врТаблицаУслуг
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала
	|ИТОГИ ПО
	|	Услуга,
	|	ДатаНачала";
	
	ПодстрокаВыбораДаты = "ТаблицаОбъектов.ДатаНачала";
	Если ЭтоПриостановка Тогда
		ПодстрокаВыбораДаты = "&ДатаНач";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПодстрокаВыбораДаты", ПодстрокаВыбораДаты);
	
	ДеревоОбъектов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Будем обходить дерево по услугам, а затем по датам начала назначения или приостановки.
	Для Каждого ТекСтрокаУслуги Из ДеревоОбъектов.Строки Цикл
		
		КоличествоНеназначенныхУслуг = 0;
		
		НаименованиеУслуги = ТекСтрокаУслуги.Услуга.Наименование;
		
		Для Каждого ТекСтрокаДатыНачала Из ТекСтрокаУслуги.Строки Цикл
			
			ДатаПроверки = ?(ЭтоПриостановка, ДатаНач, ТекСтрокаДатыНачала.ДатаНачала);
			
			СписокОбъектов = ТекСтрокаДатыНачала.Строки.ВыгрузитьКолонку("Объект");
			
			ДополнитьЗапросНазначеннымиУслугами(Запрос, КонецДня(ДатаПроверки), Организация,
												СписокОбъектов, ТекСтрокаУслуги.Услуга);
			
			Запрос.УстановитьПараметр("ДатаПроверки", ДатаПроверки);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЕСТЬNULL(НазначенныеНачисления.Действует, ЛОЖЬ) КАК Действует,
			|	НазначенныеНачисления.Регистратор.Номер КАК Номер,
			|	НазначенныеНачисления.Регистратор.Дата КАК Дата,
			|	ТаблицаОбъектов.Объект,
			|	ТаблицаОбъектов.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	врТаблицаОбъектов КАК ТаблицаОбъектов
			|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаДействующихУслуг КАК НазначенныеНачисления
			|		ПО НазначенныеНачисления.Объект = ТаблицаОбъектов.Объект
			|ГДЕ
			|	ТаблицаОбъектов.ДатаНачала = &ДатаПроверки";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ТекстСообщения = "В строке номер """ + Выборка.НомерСтроки + """ табличной части ""Объекты"": Услуга """
							   + НаименованиеУслуги + """";
				
				Если ЭтоПриостановка Тогда
					Если НЕ Выборка.Действует Тогда
						ТекстСообщения = ТекстСообщения + " не назначена на объект!";
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
					КонецЕсли;
				Иначе
					Если Выборка.Действует Тогда
						ТекстСообщения = ТекстСообщения + " уже назначена на объект документом ""Управление услугами"" №"
										 + Выборка.Номер + " от " + Выборка.Дата;
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Запрос.Текст = "УНИЧТОЖИТЬ врТаблицаДействующихУслуг";
			Запрос.Выполнить();
			
		КонецЦикла;
	
	КонецЦикла;
	
	// проверим, не назначается ли услуга на закрытый или еще не открытый л/с.
	Если ВидОперации = Перечисления.КВП_ВидыОперацийУправленияУслугами.НазначениеНаЛицевыеСчета Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КВП_УправлениеУслугами.НомерСтроки,
		|	КВП_УправлениеУслугами.Объект КАК ЛицевойСчет,
		|	КВП_УправлениеУслугами.ДатаНачала
		|ПОМЕСТИТЬ ТаблицаЛС
		|ИЗ
		|	Документ.КВП_УправлениеУслугами.Объекты КАК КВП_УправлениеУслугами
		|ГДЕ
		|	КВП_УправлениеУслугами.Ссылка = &ТекущийДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЛС.НомерСтроки,
		|	ТаблицаЛС.ЛицевойСчет,
		|	ТаблицаЛС.ДатаНачала
		|ИЗ
		|	ТаблицаЛС КАК ТаблицаЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|		ПО ТаблицаЛС.ЛицевойСчет = КВП_ЛицевыеСчета.ЛицевойСчет
		|			И (КВП_ЛицевыеСчета.Период В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					СведенияОЛицевыхСчетах.Период
		|				ИЗ
		|					РегистрСведений.КВП_ЛицевыеСчета КАК СведенияОЛицевыхСчетах
		|				ГДЕ
		|					СведенияОЛицевыхСчетах.ЛицевойСчет = ТаблицаЛС.ЛицевойСчет
		|					И СведенияОЛицевыхСчетах.Период <= КОНЕЦПЕРИОДА(ТаблицаЛС.ДатаНачала, ДЕНЬ)
		|				УПОРЯДОЧИТЬ ПО
		|					СведенияОЛицевыхСчетах.Период УБЫВ))
		|ГДЕ
		|	ЕСТЬNULL(КВП_ЛицевыеСчета.Действует, ЛОЖЬ) = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		ВыборкаЛС = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЛС.Следующий() Цикл
			
			ТекстСообщения = "В строке номер """ 
						   + ВыборкаЛС.НомерСтроки 
						   + """ табличной части ""Объекты"": лицевой счет не открыт на дату назначения услуги!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует заголовок документа.
//
// Возвращаемое значение:
//  Строка – заголовок документа
//
Функция ЗаголовокДокумента() Экспорт

	Если ВидОперации = Перечисления.КВП_ВидыОперацийУправленияУслугами.НазначениеНаЛицевыеСчета
	 ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийУправленияУслугами.УдалитьНазначениеНаПарковочныеМеста Тогда
		ТекстЗаголовка = "Назначение услуг";
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийУправленияУслугами.Приостановка Тогда
		ТекстЗаголовка = "Приостановка услуг";
	Иначе
		ТекстЗаголовка = "";
	КонецЕсли;

	Возврат ТекстЗаголовка;

КонецФункции // ЗаголовокФормы()

// Движение документа по регистру КВП_НазначенныеНачисления.
Процедура ДвижениеПоРегиструНазначенныхНачислений(СтруктураШапкиДокумента, ТаблицаУправленияУслугами, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.КВП_ВидыОперацийУправленияУслугами.Приостановка Тогда

		Для Каждого ТекСтрокаУслуг Из ТаблицаУправленияУслугами Цикл

			СписокНазначений = ПолучитьПериодыДействияУслуги(ТекСтрокаУслуг.Объект, СтруктураШапкиДокумента.Услуга, Организация,
																СтруктураШапкиДокумента.ДатаНач, СтруктураШапкиДокумента.ДатаКон, СтруктураШапкиДокумента.Дата);

			ТекущийПериод = СтруктураШапкиДокумента.Дата;
			ПредПериод = Неопределено;
			
			Для Каждого ТекПриостановкаУслуги Из СписокНазначений Цикл

				Если Не ТекПриостановкаУслуги.Действует Тогда
					Продолжить;
				КонецЕсли;

				Если ПредПериод = ТекПриостановкаУслуги.Период Тогда
					// если на данный период уже добавлено движение, то пропускаем
					Продолжить;
				КонецЕсли;

				Если ТекПриостановкаУслуги.Период = СтруктураШапкиДокумента.ДатаКон Тогда
					// Если на конец периода услуга действовала, то после приостановки
					// она продолжит действие.
					ДатаИзменения = ТекПриостановкаУслуги.Период + 60 * 60 * 24;
					Действует = Истина;
				Иначе
					ДатаИзменения = ТекПриостановкаУслуги.Период;
					Действует = Ложь;
				КонецЕсли;

				ПредПериод = ТекПриостановкаУслуги.Период;

				Движение = Движения.КВП_НазначенныеНачисления.Добавить();
				Движение.Период        = ТекущийПериод;
				Движение.Объект        = ТекСтрокаУслуг.Объект;
				Движение.Услуга        = СтруктураШапкиДокумента.Услуга;
				Движение.Организация   = СтруктураШапкиДокумента.Организация;
				Движение.Действует     = Действует;
				Движение.ДатаИзменения = ДатаИзменения;

				ТекущийПериод = ТекущийПериод + 1;

			КонецЦикла;

		КонецЦикла;

	Иначе

		Для Каждого ТекНазначениеУслуг Из ТаблицаУправленияУслугами Цикл

			Движение = Движения.КВП_НазначенныеНачисления.Добавить();
			Движение.Период        = СтруктураШапкиДокумента.Дата;
			Движение.Объект        = ТекНазначениеУслуг.Объект;
			Движение.Услуга        = СтруктураШапкиДокумента.Услуга;
			Движение.Организация   = СтруктураШапкиДокумента.Организация;
			Движение.Действует     = Истина;
			Движение.ДатаИзменения = ТекНазначениеУслуг.ДатаНачала;

			Если ЗначениеЗаполнено(ТекНазначениеУслуг.ДатаОкончания) Тогда
				Движение = Движения.КВП_НазначенныеНачисления.Добавить();
				Движение.Период        = СтруктураШапкиДокумента.Дата + 1;
				Движение.Объект        = ТекНазначениеУслуг.Объект;
				Движение.Услуга        = СтруктураШапкиДокумента.Услуга;
				Движение.Организация   = СтруктураШапкиДокумента.Организация;
				Движение.Действует     = Ложь;
				Движение.ДатаИзменения = ТекНазначениеУслуг.ДатаОкончания + 60 * 60 * 24;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ДвижениеПоРегиструНазначенныхНачислений()

// По результату запроса по шапке документа формируем движения по регистрам.
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаУправленияУслугами, Отказ, Заголовок);

	Если ТаблицаУправленияУслугами.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ТекСтрокаУслуги Из Услуги Цикл
		СтруктураШапкиДокумента.Вставить("Услуга", ТекСтрокаУслуги.Услуга);
		ДвижениеПоРегиструНазначенныхНачислений(СтруктураШапкиДокумента, ТаблицаУправленияУслугами, Отказ, Заголовок);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура обработки проведения документа
Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроверитьЗаполнениеТабличнойЧасти(Отказ);
	
	ПараметрыПроведения = Документы.КВП_УправлениеУслугами.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента   = ПараметрыПроведения.Реквизиты;
	ТаблицаУправленияУслугами = ПараметрыПроведения.ТаблицаУправленияУслугами;
	
	Если Не Отказ Тогда
	
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаУправленияУслугами, Отказ, Заголовок);
	
	КонецЕсли;

КонецПроцедуры

// Процедура возникает перед записью документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ЗаполнитьКраткийСоставДокументаПоТЧ(Услуги, "Услуга");
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Объекты");
	ПроверяемыеРеквизиты.Добавить("ВидОперации");
	
	// Проверка реквизитов документа.
	Если ВидОперации = Перечисления.КВП_ВидыОперацийУправленияУслугами.Приостановка Тогда
		ПроверяемыеРеквизиты.Добавить("ДатаНач");
	КонецЕсли;
	
	// Проверка реквизитов табличной части документа.
	ПроверяемыеРеквизиты.Добавить("Объекты.Объект");
	Если ВидОперации = Перечисления.КВП_ВидыОперацийУправленияУслугами.НазначениеНаЛицевыеСчета
	 ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийУправленияУслугами.УдалитьНазначениеНаПарковочныеМеста Тогда
		ПроверяемыеРеквизиты.Добавить("Объекты.ДатаНачала");
	КонецЕсли;
	
	// Проверка реквизитов табличной части документа "Услуги".
	
	// Проверку производим не через "проверяемые резвизиты", так как если на форме документа не установлен флаг
	// "Список услуг", то таблица "Услуги" на закладке "Услуги" будет не доступна и отображение об ошибке незаполненных данных
	// будет выведено некорректно.
	
	НайденныеСтроки = Услуги.НайтиСтроки(Новый Структура("Услуга", Справочники.КВП_Услуги.ПустаяСсылка()));
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		Услуги.Удалить(ТекущаяСтрока);
	КонецЦикла;
	
	Если Услуги.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Назначенные услуги не выбраны.", Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецЕсли