
//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ДАННЫХ

#Область ФункцииЗаполнения

&НаСервере
// Возвращает ФИО ответственного руководителя организации.
//
Функция ПолучитьФИОРуководителя()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо) КАК ФИОРуководителя
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&ДатаКонца,
	|			СтруктурнаяЕдиница = &Организация
	|				И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаКонца",   Объект.ПериодСбораДанных);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ФИОРуководителя;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
// Заполняет ТЧ "Элементы благоустройства" данными по зданию.
//
Процедура ЗаполнитьБлагоустройстваЗдания()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_БлагоустройствоОбъектов.ВидБлагоустройства,
	|	КВП_БлагоустройствоОбъектов.Значение
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	КВП_БлагоустройствоОбъектов.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект.Здание);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ЭтаФорма.ТЗ_ТЧ_ЭлементыБлагоустройства.Загрузить(Результат);
	
КонецПроцедуры

&НаСервере
// Получает кол-во лифтовых шахт в здании.
//
Функция ПолучитьКолВоЛифтовыхШахт()
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.КВП_БлагоустройствоОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Здание);
	НаборЗаписей.Прочитать();
	УстановитьПривилегированныйРежим(Ложь);
	
	БлагоустройстваОбъекта = НаборЗаписей.Выгрузить();
	
	КолвоЛШ = 0;
	
	НайденнаяСтрока = БлагоустройстваОбъекта.Найти(Справочники.КВП_ВидыБлагоустройстваОбъектов.КоличествоЛифтовыхШахт, "ВидБлагоустройства");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		КолвоЛШ = НайденнаяСтрока.Значение;
	КонецЕсли;
	
	Возврат КолвоЛШ;
	
КонецФункции

&НаСервере
// Возвращает количество домов, находящихся в обслуживании организации.
//
Функция ПолучитьКолвоДомов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КВП_Здания.Ссылка) КАК КолвоДомов
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	НЕ КВП_Здания.ПометкаУдаления
	|	И НЕ КВП_Здания.ЭтоГруппа";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КолвоДомов;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Возвращает количество помещений, находящихся в здании.
//
Функция ПолучитьКолвоПомещений()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Помещения.Ссылка) КАК КолвоКвартир
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	НЕ УПЖКХ_Помещения.ПометкаУдаления
	|	И УПЖКХ_Помещения.Владелец = &Владелец
	|	И УПЖКХ_Помещения.ВидПомещения.ТипПомещения = &ТипПомещения";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Здание);
	Запрос.УстановитьПараметр("ТипПомещения", Перечисления.КВП_ТипыПомещений.Квартира);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КолвоКвартир;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Возвращает количество проживающих или лицевых счетов, находящихся в здании.
//
Функция ПолучитьКолвоПроживающихЛС(ЛС = "")
	
	Если ЛС = "ЛС" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет) КАК КолвоЛС
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
		|			&ДатаСреза,
		|			Действует
		|				И Объект.Владелец = &Владелец) КАК КВП_ЛицевыеСчетаСрезПоследних";
		
		Запрос.УстановитьПараметр("Владелец",     Объект.Здание);
		Запрос.УстановитьПараметр("ДатаСреза",    Объект.ПериодСбораДанных);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.КолвоЛС;
		Иначе
			Возврат 0;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛС
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
		|			&ДатаСреза,
		|			Действует
		|				И Объект.Владелец = &Владелец) КАК КВП_ЛицевыеСчетаСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КолвоЖильцов
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
		|			&ДатаСреза,
		|			Проживает
		|				И ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчета.ЛС
		|					ИЗ
		|						втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОПроживающихСрезПоследних";
		
		Запрос.УстановитьПараметр("Владелец",     Объект.Здание);
		Запрос.УстановитьПараметр("ДатаСреза",    Объект.ПериодСбораДанных);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.КолвоЖильцов;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Возвращает необходимую площадь помещений в здании.
//
Функция ПолучитьПлощадиЗдания(ВидПлощади)
	
	НайденныйТипПлощади = Справочники.КВП_ТипыПлощадейЗдания.НайтиПоНаименованию("Общая площадь нежилых помещений");
	Если НайденныйТипПлощади = Неопределено Тогда
		ПлощадьНежилыхПомещений = 0;
	Иначе
		НаборЗаписей = РегистрыСведений.КВП_ПлощадиЗдания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Объект.Здание, Истина);
		НаборЗаписей.Прочитать();
		ТаблицаЗаписей = НаборЗаписей.Выгрузить();
		НайдСтрока = ТаблицаЗаписей.Найти(НайденныйТипПлощади, "Тип");
		Если НайдСтрока = Неопределено Тогда
			ПлощадьНежилыхПомещений = 0;
		Иначе
			ПлощадьНежилыхПомещений = НайдСтрока.Площадь;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПлощади = "Жилые" Тогда
		НеобходимаяПлощадь = Объект.Здание.ПлощадьЗданияЖилыхНежилыхПомещений - ПлощадьНежилыхПомещений;
	ИначеЕсли ВидПлощади = "Нежилые" Тогда
		НеобходимаяПлощадь = ПлощадьНежилыхПомещений;
	Иначе
		НеобходимаяПлощадь = Объект.Здание.ПлощадьЗданияМестОбщегоПользования;
	КонецЕсли;
	
	Возврат НеобходимаяПлощадь;
	
КонецФункции

&НаСервере
// Возвращает сформированную строку о государственной регистрации организации.
//
Функция ПолучитьДанныеОГосРегистрации()
	
	СтрокаОГРН             = СокрЛП(Объект.Организация.ОГРН);
	СтрокаДатыРегистрации  = ?(НЕ Объект.Организация.ДатаРегистрации = ДАТА(1,1,1,0,0,0), "" + Формат(Объект.Организация.ДатаРегистрации, "ДЛФ=Д"), "");
	СтрокаНаименованияИМНС = СокрЛП(Объект.Организация.СвидетельствоСерияНомер);
	
	СтрокаГосРегистрации = СтрокаОГРН + " " + СтрокаДатыРегистрации + " " + СтрокаНаименованияИМНС;
	
	Возврат СокрЛП(СтрокаГосРегистрации);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаСервере
// Формирует таблицу соответствия разделов учета и видов начисления.
//
// Возвращаемое значений:
//  ТаблицаЗначений
//
Процедура ПолучитьТаблицуПоказателейРаскрытияНаСервере()
	
	ТаблицаПоказателейРаскрытия.Очистить();
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.УПЖКХ_ПодготовкаДанныхДляРаскрытия"));
	ТаблицаПоказателейРаскрытия.Загрузить(ДокументОбъект.ПолучитьТаблицуПоказателейРаскрытияИзМакета());
	
КонецПроцедуры // ПолучитьТаблицуРазделовИВидов()

&НаСервере
// Заполняет реквизиты формы необходимыми данными.
//
Процедура ЗаполнитьДанныеНаФорме()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийПодготовкиДанныхДляРаскрытия.СведенияОЗдании") Тогда
		ЗаполнитьБлагоустройстваЗдания();
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;
	
	Для Каждого СтрокаПоказателей ИЗ ТаблицаПоказателейРаскрытия Цикл
		Если НЕ ПустаяСтрока(СтрокаПоказателей.ВыполняемыйКод) Тогда
			Выполнить("СтруктураПолей.Вставить(СтрокаПоказателей.НазваниеПоказателя," + СтрокаПоказателей.ВыполняемыйКод + ");");
		Иначе
			СтруктураПолей.Вставить(СтрокаПоказателей.НазваниеПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураПолей);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов формы.
//
Процедура УстановитьВидимость(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийПодготовкиДанныхДляРаскрытия.СведенияОЗдании") Тогда
		Элементы.Здание.Видимость               = Истина;
		Элементы.ГруппаРазделовЗдание.Видимость = Истина;
		Элементы.ГруппаРазделовУО.Видимость     = Ложь;
	Иначе
		Элементы.Здание.Видимость               = Ложь;
		Элементы.ГруппаРазделовЗдание.Видимость = Ложь;
		Элементы.ГруппаРазделовУО.Видимость     = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Определяет количество подгрупп, находящихся в группе.
//
Функция КоличествоПодгруппВГруппеМеньшеОдной(врТаблицаПоказателейРасчета, СчЭлементов)
	
	КолВоПодгрупп = 0;
	Сч = СчЭлементов + 1;
	КолвоЭлеметновТаблицы = врТаблицаПоказателейРасчета.Количество() - 1;
	
	Пока НЕ Сч > КолвоЭлеметновТаблицы И НЕ врТаблицаПоказателейРасчета[Сч].НазваниеПоказателя = "ГРУППА" Цикл
		Если врТаблицаПоказателейРасчета[Сч].НазваниеПоказателя = "ПОДГРУППА" Тогда
			КолВоПодгрупп = КолВоПодгрупп + 1;
		КонецЕсли;
		Если КолВоПодгрупп > 1 Тогда
			Возврат Ложь;
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
// Добавляет на форму документа необходимые элементы управления.
//
Процедура ЗаполнитьФормуЭлементами()
	
	ПредыдущийСписокПутейРеквизитов = СписокПутейРеквизитов.ВыгрузитьЗначения();
	СписокПутейРеквизитов.Очистить();
	
	МассивРеквизитов = Новый Массив;
	
	ТаблицаЭлементов  = Новый ТаблицаЗначений;
	ТаблицаЭлементов.Колонки.Добавить("ЭлементФормы");
	ТаблицаЭлементов.Колонки.Добавить("ПутьКДанным");
	
	врТаблицаПоказателейРасчета = ТаблицаПоказателейРаскрытия.Выгрузить();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийПодготовкиДанныхДляРаскрытия.СведенияОЗдании") Тогда
		Префикс = "Здание";
	Иначе
		Префикс = "УО";
	КонецЕсли;
	
	СчЭлементов = Элементы["ГруппаРазделов" + Префикс].ПодчиненныеЭлементы.Количество();
	Сч = 0;
	Пока НЕ Сч > СчЭлементов - 1 Цикл
		Элементы.Удалить(Элементы["ГруппаРазделов" + Префикс].ПодчиненныеЭлементы[0]);
		Сч = Сч + 1;
	КонецЦикла;
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ТИП("ДокументОбъект.УПЖКХ_ПодготовкаДанныхДляРаскрытия"));
	ТабличныеЧастиДокумента = ДокументОбъект.Метаданные().ТабличныеЧасти;
	
	СчЭлементов = 0;
	
	Для Каждого СтрокаЭлемента ИЗ врТаблицаПоказателейРасчета Цикл
		
		Если СтрокаЭлемента.НазваниеПоказателя = "ГРУППА" Тогда
			НаименованиеЭлемента = УдалениеПодстрокиВИсходнойСтроке(ТРег(СтрокаЭлемента.ПредставлениеПоказателя), " ");
			НаименованиеЭлемента = УдалениеПодстрокиВИсходнойСтроке(НаименованиеЭлемента, "-");
			НаименованиеЭлемента = УдалениеПодстрокиВИсходнойСтроке(НаименованиеЭлемента, ".");
			
			НоваяГруппаФормы = Элементы.Добавить(НаименованиеЭлемента, Тип("ГруппаФормы"), Элементы["ГруппаРазделов" + Префикс]);
			НоваяГруппаФормы.Вид       = ВидГруппыФормы.Страница;
			НоваяГруппаФормы.Заголовок = СтрокаЭлемента.ПредставлениеПоказателя;
			
			ОднаПодгруппа = КоличествоПодгруппВГруппеМеньшеОдной(врТаблицаПоказателейРасчета, СчЭлементов);
			
			Если Не ОднаПодгруппа Тогда
				НоваяПодГруппаФормы = Элементы.Добавить(НаименованиеЭлемента + Префикс, Тип("ГруппаФормы"), НоваяГруппаФормы);
				НоваяПодГруппаФормы.Вид                = ВидГруппыФормы.Страницы;
				НоваяПодГруппаФормы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
			КонецЕсли;
			
		ИначеЕсли СтрокаЭлемента.НазваниеПоказателя = "ПОДГРУППА" Тогда
			
			Если Не ОднаПодгруппа Тогда
				НаименованиеЭлемента = УдалениеПодстрокиВИсходнойСтроке(ТРег(СтрокаЭлемента.ПредставлениеПоказателя), " ");
				НаименованиеЭлемента = УдалениеПодстрокиВИсходнойСтроке(НаименованиеЭлемента, "-");
				НаименованиеЭлемента = УдалениеПодстрокиВИсходнойСтроке(НаименованиеЭлемента, ".");
			
				НоваяПодПодГруппаФормы = Элементы.Добавить(НаименованиеЭлемента, Тип("ГруппаФормы"), НоваяПодГруппаФормы);
				НоваяПодПодГруппаФормы.Вид       = ВидГруппыФормы.Страница;
				НоваяПодПодГруппаФормы.Заголовок = СтрокаЭлемента.ПредставлениеПоказателя;
			КонецЕсли;
			
		ИначеЕсли ЛЕВ(СтрокаЭлемента.НазваниеПоказателя, 2) = "ТЧ" Тогда
			
			ТаблицаЗначенийТЧ = ТабличныеЧастиДокумента.Найти(УдалениеПодстрокиВИсходнойСтроке(СтрокаЭлемента.НазваниеПоказателя, "ТЧ_"));
			НовыйРеквизит = Новый РеквизитФормы("ТЗ_" + СтрокаЭлемента.НазваниеПоказателя, Новый ОписаниеТипов("ТаблицаЗначений"), ,СтрокаЭлемента.ПредставлениеПоказателя);
			МассивРеквизитов.Добавить(НовыйРеквизит);
			
			Для Каждого ТекРеквизит ИЗ ТаблицаЗначенийТЧ.Реквизиты Цикл
				МассивРеквизитов.Добавить(Новый РеквизитФормы(ТекРеквизит.Имя, ТекРеквизит.Тип, "ТЗ_" + СтрокаЭлемента.НазваниеПоказателя, ТекРеквизит.Синоним));
			КонецЦикла;
			
			СписокПутейРеквизитов.Добавить("ТЗ_" + СтрокаЭлемента.НазваниеПоказателя);
				
			НовыйЭлементФормы = Элементы.Добавить(СтрокаЭлемента.НазваниеПоказателя, Тип("ТаблицаФормы"), ?(ОднаПодгруппа, НоваяГруппаФормы, НоваяПодПодГруппаФормы));
			
			НоваяСтрокаЭлемента = ТаблицаЭлементов.Добавить();
			НоваяСтрокаЭлемента.ЭлементФормы = НовыйЭлементФормы;
			НоваяСтрокаЭлемента.ПутьКДанным  = "ТЗ_" + СтрокаЭлемента.НазваниеПоказателя;
			
			Для Каждого ТекРеквизит Из ТаблицаЗначенийТЧ.Реквизиты Цикл
				НовыйЭлемент = Элементы.Добавить("ТЗ_" + СтрокаЭлемента.НазваниеПоказателя + "_" + ТекРеквизит.Имя, Тип("ПолеФормы"), НовыйЭлементФормы); 
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				
				НоваяСтрокаЭлемента = ТаблицаЭлементов.Добавить();
				НоваяСтрокаЭлемента.ЭлементФормы = НовыйЭлемент;
				НоваяСтрокаЭлемента.ПутьКДанным  = "ТЗ_" + СтрокаЭлемента.НазваниеПоказателя + "." + ТекРеквизит.Имя;
			КонецЦикла;
				
		Иначе
			
			НовыйРеквизит = Новый РеквизитФормы(СтрокаЭлемента.НазваниеПоказателя, СтрокаЭлемента.ТипПоказателя, ,СтрокаЭлемента.ПредставлениеПоказателя);
			МассивРеквизитов.Добавить(НовыйРеквизит);
			
			НовыйЭлементФормы = Элементы.Добавить(СтрокаЭлемента.НазваниеПоказателя, Тип("ПолеФормы"), ?(ОднаПодгруппа, НоваяГруппаФормы, НоваяПодПодГруппаФормы));
			НовыйЭлементФормы.Вид                      = ВидПоляФормы.ПолеВвода;
			НовыйЭлементФормы.РастягиватьПоГоризонтали = Истина;
			НовыйЭлементФормы.ГоризонтальноеПоложение  = ГоризонтальноеПоложениеЭлемента.Право;
			
			Если НЕ ПустаяСтрока(СтрокаЭлемента.ОтборПоВладельцу) Тогда
				НовыйЭлементФормы.УстановитьДействие("НачалоВыбора", "НачалоВыбораПоляФормы");
			КонецЕсли;
			
			НоваяСтрокаЭлемента = ТаблицаЭлементов.Добавить();
			НоваяСтрокаЭлемента.ЭлементФормы = НовыйЭлементФормы;
			НоваяСтрокаЭлемента.ПутьКДанным  = СтрокаЭлемента.НазваниеПоказателя;
			
			СписокПутейРеквизитов.Добавить(СтрокаЭлемента.НазваниеПоказателя);
			
		КонецЕсли;
		СчЭлементов = СчЭлементов + 1;
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов, ПредыдущийСписокПутейРеквизитов);
	
	Для Каждого СтрокаЭлемента ИЗ ТаблицаЭлементов Цикл
		СтрокаЭлемента.ЭлементФормы.ПутьКДанным = СтрокаЭлемента.ПутьКДанным;
		Если ТипЗнч(СтрокаЭлемента.ЭлементФормы) = Тип("ПолеФормы")
		   И Найти(СтрокаЭлемента.ПутьКДанным, "ТЗ_ТЧ_") = 0 Тогда
			ЭтаФорма[СтрокаЭлемента.ПутьКДанным] = "";
		ИначеЕсли ТипЗнч(СтрокаЭлемента.ЭлементФормы) = Тип("ТаблицаФормы") Тогда
			ЭтаФорма[СтрокаЭлемента.ПутьКДанным].Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Обрабочтик события "ПриИзменении" на сервере вида операции документа
//
Процедура ИзменениеВидаОперацииНаСервере()
	
	ЭлементыЗаполнены = Ложь;
	ПолучитьТаблицуПоказателейРаскрытияНаСервере();
	
	Объект.СтатичныеПоказатели.Очистить();
	Для Каждого СтрокаЭлемента ИЗ ТаблицаПоказателейРаскрытия Цикл
		Если НЕ (СтрокаЭлемента.НазваниеПоказателя = "ГРУППА" ИЛИ СтрокаЭлемента.НазваниеПоказателя = "ПОДГРУППА" ИЛИ Лев(СтрокаЭлемента.НазваниеПоказателя, 2) = "ТЧ") Тогда
			НоваяСтрока = Объект.СтатичныеПоказатели.Добавить();
			НоваяСтрока.ПоказательРаскрытия = СтрокаЭлемента.НазваниеПоказателя;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьФормуЭлементами();
	
	УстановитьВидимость(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Находит вхождение искомой строки как подстроки в исходной строке.
//
Функция ПоискПодстрокиВИсходнойСтроке(ИсхСтрока, Подстрока)
	
	Возврат (Найти(ИсхСтрока, Подстрока) > 0);
	
КонецФункции

&НаСервереБезКонтекста
// Заменяет подстроку в исходной строке на пустую подстроку.
//
Функция УдалениеПодстрокиВИсходнойСтроке(ИсхСтрока, Подстрока)
	
	Возврат СтрЗаменить(ИсхСтрока, Подстрока, "");
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект, УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		Объект.Дата              = ТекущаяДата();
		Объект.ПериодСбораДанных = Объект.Дата;
	КонецЕсли;
	
	ПолучитьТаблицуПоказателейРаскрытияНаСервере();
	
	ЗаполнитьФормуЭлементами();
	
	Если Объект.Ссылка.Пустая() Тогда
		Для Каждого СтрокаЭлемента ИЗ ТаблицаПоказателейРаскрытия Цикл
			Если НЕ (СтрокаЭлемента.НазваниеПоказателя = "ГРУППА" ИЛИ СтрокаЭлемента.НазваниеПоказателя = "ПОДГРУППА" ИЛИ Лев(СтрокаЭлемента.НазваниеПоказателя, 2) = "ТЧ") Тогда
				НоваяСтрока = Объект.СтатичныеПоказатели.Добавить();
				НоваяСтрока.ПоказательРаскрытия = СтрокаЭлемента.НазваниеПоказателя;
			КонецЕсли;
		КонецЦикла;
		ЭлементыЗаполнены = Ложь;
	Иначе
		Для Каждого СтрокаСтатичныхПоказателей ИЗ Объект.СтатичныеПоказатели Цикл
			ЭтаФорма[СтрокаСтатичныхПоказателей.ПоказательРаскрытия] = СтрокаСтатичныхПоказателей.ЗначениеПоказателя;
		КонецЦикла;
		
		Для Каждого СтрокаПоказателей ИЗ ТаблицаПоказателейРаскрытия Цикл
			Если ПоискПодстрокиВИсходнойСтроке(СтрокаПоказателей.НазваниеПоказателя, "ТЧ_") Тогда
				НаименованиеТаблицы = УдалениеПодстрокиВИсходнойСтроке(СтрокаПоказателей.НазваниеПоказателя, "ТЧ_");
				ЭтаФорма["ТЗ_" + СтрокаПоказателей.НазваниеПоказателя].Загрузить(Объект[НаименованиеТаблицы].Выгрузить());
			КонецЕсли;
		КонецЦикла;
		ЭлементыЗаполнены = Истина;
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции.
	УПЖКХ_РаботаСДиалогамиКлиентСервер.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
	УстановитьВидимость(ЭтаФорма);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.ПериодСбораДанных) Тогда
		Объект.ПериодСбораДанных = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодСбораДанных", "ПериодСтрокой");
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПередЗаписьюНаСервере" формы.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Ответственный.Пустая() Тогда
		ТекущийОбъект.Ответственный = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию(
													УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь(),
													"ОсновнойОтветственный");
	КонецЕсли;
	
	Для Каждого СтрокаТЧ ИЗ ТекущийОбъект.СтатичныеПоказатели Цикл
		СтрокаТЧ.ЗначениеПоказателя = ЭтаФорма[СтрокаТЧ.ПоказательРаскрытия];
	КонецЦикла;
	
	Для Каждого СтрокаПоказателей ИЗ ТаблицаПоказателейРаскрытия Цикл
		Если ПоискПодстрокиВИсходнойСтроке(СтрокаПоказателей.НазваниеПоказателя, "ТЧ_") Тогда
			НаименованиеТаблицы = УдалениеПодстрокиВИсходнойСтроке(СтрокаПоказателей.НазваниеПоказателя, "ТЧ_");
			ТекущийОбъект[НаименованиеТаблицы].Загрузить(ЭтаФорма["ТЗ_" + СтрокаПоказателей.НазваниеПоказателя].Выгрузить());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" вида операции документа.
//
Процедура ВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Объект.ВидОперации Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		Если ЭлементыЗаполнены Тогда
			ПердыдущийВидОперации = Объект.ВидОперации;
			ДопПараметры       = Новый Структура("ПердыдущийВидОперации, ВыбранноеЗначение, Элемент", Объект.ВидОперации, ВыбранноеЗначение, Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРезультатВопросаВидОперацииОбработкаВыбора", ЭтаФорма, ДопПараметры);
			ТекстВопроса       = "При изменении вида операции введенные ранее данные будут утеряны.
								 |Вы точно хотите продолжить?";
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатВопросаВидОперацииОбработкаВыбора(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.ВидОперации = ДополнительныеПараметры.ПердыдущийВидОперации;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ВидОперации = ДополнительныеПараметры.ВыбранноеЗначение;
		ВидОперацииПриИзменении(ДополнительныеПараметры.Элемент);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатВопросаВидОперацииОбработкаВыбора()

&НаКлиенте
// Обработчик события "ПриИзменении" вида операции документа.
//
Процедура ВидОперацииПриИзменении(Элемент)
	
	ИзменениеВидаОперацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" организации.
//
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Объект.Организация Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли НЕ Объект.Организация.Пустая() Тогда
		Если ЭлементыЗаполнены Тогда
			ТекстВопроса = "При изменении организации введенные ранее данные будут утеряны.
						   |Вы точно хотите продолжить?";
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаОрганизацияОбработкаВыбора", ЭтаФорма),
						   ТекстВопроса,
						   РежимДиалогаВопрос.ДаНет);
		Иначе
			ЗаполнитьФормуЭлементами();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияОбработкаВыбора()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ОрганизацияОбработкаВыбора()".
Процедура ОбработатьРезультатВопросаОрганизацияОбработкаВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = КодВозвратаДиалога.Да Тогда
		ЗаполнитьФормуЭлементами();
		ЭлементыЗаполнены = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаОрганизацияОбработкаВыбора()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" здания.
//
Процедура ЗданиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Объект.Здание Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли НЕ Объект.Здание.Пустая() Тогда
		Если ЭлементыЗаполнены Тогда
			ТекстВопроса = "При изменении здания введенные ранее данные будут утеряны.
							|Вы точно хотите продолжить?";
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗданиеОбработкаВыбора", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение)),
						   ТекстВопроса,
						   РежимДиалогаВопрос.ДаНет);
			СтандартнаяОбработка = Ложь;
		Иначе
			ЗаполнитьФормуЭлементами();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗданиеОбработкаВыбора()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ЗданиеОбработкаВыбора()".
Процедура ОбработатьРезультатВопросаЗданиеОбработкаВыбора(РеультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РеультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Здание = ДополнительныеПараметры.ВыбранноеЗначение;
		ЗаполнитьФормуЭлементами();
		ЭлементыЗаполнены = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаЗданиеОбработкаВыбора()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода.
//
Процедура НачалоВыбораПоляФормы(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийПодготовкиДанныхДляРаскрытия.СведенияОЗдании") Тогда
		Владелец = Объект.Здание;
	Иначе
		Владелец = Объект.Организация;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",  Владелец);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("РежимВыбора",    Истина);
	
	ДопПараметры       = Новый Структура("Элемент", Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборЭлементаНачалоВыбораПоляФормы", ЭтаФорма, ДопПараметры);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
				 ПараметрыФормы,
				 ЭтаФорма,,,,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // НачалоВыбораПоляФормы()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике "НачалоВыбораПоляФормы()".
Процедура ОбработатьВыборЭлементаНачалоВыбораПоляФормы(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыбора = Неопределено Тогда
		Элемент = ДополнительныеПараметры.Элемент;
		ЭтаФорма[Элемент.Имя] = РезультатВыбора;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборЭлементаНачалоВыбораПоляФормы()

&НаКлиенте
// Обработчик события команды "Заполнить".
//
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнено значение поля ""Организация""!");
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийПодготовкиДанныхДляРаскрытия.СведенияОЗдании") И Объект.Здание.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнено значение поля ""Здание""!");
		Возврат;
	КонецЕсли;
	
	Если ЭлементыЗаполнены Тогда
		ТекстВопроса       = "Введенные ранее данные будут утеряны.
							 |Вы точно хотите продолжить?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаКомандаЗаполнить", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	Иначе
		ЭлементыЗаполнены = Истина;
	КонецЕсли;
	
	КомандаЗаполнитьПродолжение();
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике команды "КомандаЗаполнить()".
Процедура ОбработатьРезультатВопросаКомандаЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьПродолжение();

КонецПроцедуры // ОбработатьРезультатВопросаКомандаЗаполнить()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнить()".
Процедура КомандаЗаполнитьПродолжение()
	
	ЗаполнитьДанныеНаФорме();
	
КонецПроцедуры // КомандаЗаполнитьПродолжение()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля ввода "Период".
//
// Параметры:
//  Элемент 			- <ПолеВвода>
//        				- Поле ввода, с которым связано данное событие ("Период").
//
Процедура ПериодПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодСбораДанных", "ПериодСтрокой", 
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодСбораДанных", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "Очистка" поля ввода "Период".
// Параметры:
//  Элемент 			- <ПолеВвода>
//        				- Поле ввода, с которым связано данное событие ("Период").
//  СтандартнаяОбработка - <Булево. >
//         				 - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события.
//
Процедура ПериодОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "Регулирование" поля ввода "Период".
// Параметры:
//  Элемент 			- <ПолеВвода>
//        				- Поле ввода, с которым связано данное событие ("Период").
//  Направление			- <Число>
//        				- Позволяет определить, какая из кнопок регулирования была нажата.
//  СтандартнаяОбработка - <Булево. >
//         				 - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события.
//
Процедура ПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодСбораДанных", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "АвтоПодборТекста" поля ввода "Период".
//
// Параметры:
//  Элемент 			- <ПолеВвода>
//        				- Поле ввода, с которым связано данное событие ("Период").
//  Текст 				- <Строка>
//        				- Строка текста, введенная в поле ввода ("Период").
//  ДанныеВыбора      	- <Строка>
//          			- После завершения обработки события содержит текст 
//                         для размещения в поле ввода("Период").
//  СтандартнаяОбработка - <Булево. >
//         				 - В данный параметр передается признак выполнения.
//
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ОкончаниеВводаТекста" поля ввода "Период".
// Параметры:
//  Элемент 			- <ПолеВвода>
//        				- Поле ввода, с которым связано данное событие ("Период").
//  Текст 				- <Строка>
//        				- Строка текста, введенная в поле ввода ("Период").
//  ДанныеВыбора	 	- < СписокЗначений>
//          			- Параметр может содержать значение для размещения 
//						  в поле ввода или список значений для последующего
//                        выбора одного из них и размещения в поле ввода.
//  СтандартнаяОбработка - <Булево. >
//         				 - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события.
//
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти
