
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати

// Получает табличный документ содеражащий в себе таблицу с динамическими данными.
//
Процедура ПолучитьТабличнуюЧастьДокумента(ТекСсылка, НаименованиеПоказателя, ТабДокумент, Макет)
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ТабличнаяЧастьДокумента  = ТекСсылка[СтрЗаменить(НаименованиеПоказателя, "ТЧ_", "")];
	ТаблицаЗначенийДокумента = ТабличнаяЧастьДокумента.ВыгрузитьКолонки();
	
	ПустаяОбласть = Макет.ПолучитьОбласть("ПустаяОбласть");
	
	ТабДокумент.Вывести(ПустаяОбласть);
	НомерСтолбца = 1;
	Для Каждого ТекКолонка ИЗ ТаблицаЗначенийДокумента.Колонки Цикл
		Если НомерСтолбца = 1 Тогда
			ТабДокументТаблицы = Макет.Получитьобласть("ОбластьНомерСтроки");
		Иначе
			ТабДокументТаблицы = Макет.Получитьобласть("ОбластьКолонки");
		КонецЕсли;
		ТабДокументТаблицы.ТекущаяОбласть.Текст = ТекКолонка.Заголовок;
		ТабДокументТаблицы.ТекущаяОбласть.Обвести(Линия, Линия, Линия, Линия);
		ТабДокументТаблицы.ТекущаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ТабДокументТаблицы.ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ТабДокумент.Присоединить(ТабДокументТаблицы);
		ТабДокументТаблицы.Очистить();
		НомерСтолбца = НомерСтолбца + 1;
	КонецЦикла;
	
	Для Каждого СтрокаТЧДокумента ИЗ ТабличнаяЧастьДокумента Цикл
		НомерСтолбца = 1;
		ТабДокумент.Вывести(ПустаяОбласть);
		Для Каждого ТекКолонка ИЗ ТаблицаЗначенийДокумента.Колонки Цикл
			Если НомерСтолбца = 1 Тогда
				ТабДокументТаблицы = Макет.Получитьобласть("ОбластьНомерСтроки");
			Иначе
				ТабДокументТаблицы = Макет.Получитьобласть("ОбластьКолонки");
			КонецЕсли;
			ТабДокументТаблицы.ТекущаяОбласть.Текст = СтрокаТЧДокумента[ТекКолонка.Имя];
			ТабДокументТаблицы.ТекущаяОбласть.Обвести(Линия, Линия, Линия, Линия);
			ТабДокументТаблицы.ТекущаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ТабДокумент.Присоединить(ТабДокументТаблицы);
			ТабДокументТаблицы.Очистить();
			НомерСтолбца = НомерСтолбца + 1;
		КонецЦикла;
	КонецЦикла;
	
	// Если ТЧ не заполнена
	Если ТабличнаяЧастьДокумента.Количество() = 0 Тогда
		
		// Количество выводимых в таблицах пустых строк
		ВыводитьСтрок = 2;
		
		Для Сч = 1 по ВыводитьСтрок Цикл
			НомерСтолбца = 1;
			ТабДокумент.Вывести(ПустаяОбласть);
			Для Каждого ТекКолонка ИЗ ТаблицаЗначенийДокумента.Колонки Цикл
				Если НомерСтолбца = 1 Тогда
					ТабДокументТаблицы = Макет.Получитьобласть("ОбластьНомерСтроки");
				Иначе
					ТабДокументТаблицы = Макет.Получитьобласть("ОбластьКолонки");
				КонецЕсли;
				ТабДокументТаблицы.ТекущаяОбласть.Текст = "";
				ТабДокументТаблицы.ТекущаяОбласть.Обвести(Линия, Линия, Линия, Линия);
				ТабДокументТаблицы.ТекущаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ТабДокумент.Присоединить(ТабДокументТаблицы);
				ТабДокументТаблицы.Очистить();
				НомерСтолбца = НомерСтолбца + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
Конецпроцедуры

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной.
//
Функция ПечатьРаскрытияПостановлений(МассивОбъектов, ОбъектыПечати) Экспорт
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Документ.УПЖКХ_ПодготовкаДанныхДляРаскрытия.РаскрытиеПостановления");
	
	ТабДокумент = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УПЖКХ_УПЖКХ_ПодготовкаДанныхДляРаскрытия";
	
	ВставлятьРазделительСтраниц = Ложь;
	ПустаяОбласть = Макет.ПолучитьОбласть("ПустаяОбласть");
	
	Для Каждого ТекСсылка Из МассивОбъектов Цикл
		
		Если ВставлятьРазделительСтраниц Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ТабДокумент.Вывести(ПустаяОбласть);
		ОбластьШапка = Макет.Получитьобласть("Шапка");
		ТабДокумент.Присоединить(ОбластьШапка);
		
		ТабДокумент.Вывести(ПустаяОбласть);
		ОбластьОрганизация = Макет.ПолучитьОбласть("Организация");
		ОбластьОрганизация.Параметры.Организация = ТекСсылка.Организация;
		ТабДокумент.Присоединить(ОбластьОрганизация);
		
		Если ТекСсылка.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийПодготовкиДанныхДляРаскрытия.СведенияОЗдании") Тогда
			ТабДокумент.Вывести(ПустаяОбласть);
			ОбластьЗдание = Макет.Получитьобласть("Здание");
			ОбластьЗдание.Параметры.Здание = ТекСсылка.Здание;
			ТабДокумент.Присоединить(ОбластьЗдание);
			
			МакетРаскрытия = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Документ.УПЖКХ_ПодготовкаДанныхДляРаскрытия.ПоказателиРаскрытияДанныхОЗдании");
		Иначе
			МакетРаскрытия = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Документ.УПЖКХ_ПодготовкаДанныхДляРаскрытия.ПоказателиРаскрытияДанныхОбУО");
		КонецЕсли;
		
		НомерСтроки = 2;
		Пока НЕ ПустаяСтрока(МакетРаскрытия.Область(НомерСтроки, 1, НомерСтроки, 1).Текст) Цикл
			НаименованиеПоказателя  = МакетРаскрытия.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
			ПредставлениеПоказателя = МакетРаскрытия.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
			Если НЕ (НаименованиеПоказателя = "ГРУППА" 
			 ИЛИ НаименованиеПоказателя = "ПОДГРУППА") Тогда
			 	Если ЛЕВ(НаименованиеПоказателя, 2) = "ТЧ" Тогда
				 	Если НЕ МакетРаскрытия.Область(НомерСтроки - 1, 1, НомерСтроки - 1, 1).Текст = "ПОДГРУППА" Тогда
						ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаПодзаголовка");
						ОбластьСтрокаТаблицы.Параметры.НаименованиеПоказателя = ПредставлениеПоказателя;
						ТабДокумент.Вывести(ОбластьСтрокаТаблицы);
					КонецЕсли;
					ПолучитьТабличнуюЧастьДокумента(ТекСсылка, НаименованиеПоказателя, ТабДокумент, Макет);
				Иначе
					ТабДокумент.Вывести(ПустаяОбласть);
					ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
					ОбластьСтрокаТаблицы.Параметры.ЗначениеПоказателя = ТекСсылка.СтатичныеПоказатели.Найти(НаименованиеПоказателя, "ПоказательРаскрытия").ЗначениеПоказателя;
					ОбластьСтрокаТаблицы.Параметры.НаименованиеПоказателя = ПредставлениеПоказателя;
					ТабДокумент.Присоединить(ОбластьСтрокаТаблицы);
				КонецЕсли;
			ИначеЕсли НаименованиеПоказателя = "ПОДГРУППА" Тогда
				ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаПодзаголовка");
				ОбластьСтрокаТаблицы.Параметры.НаименованиеПоказателя = ПредставлениеПоказателя;
				ТабДокумент.Вывести(ОбластьСтрокаТаблицы);
			ИначеЕсли НаименованиеПоказателя = "ГРУППА" Тогда
				ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаЗаголовка");
				ОбластьСтрокаТаблицы.Параметры.НаименованиеПоказателя = ПредставлениеПоказателя;
				ТабДокумент.Вывести(ОбластьСтрокаТаблицы);
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		ВставлятьРазделительСтраниц = Истина;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьРаскрытияПостановлений()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УПЖКХ_ТиповыеМетодыСервер.НужноПечататьМакет(КоллекцияПечатныхФорм, "РаскрытиеПостановления") Тогда

		УПЖКХ_ТиповыеМетодыСервер.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
																   "РаскрытиеПостановления", 
																   "Раскрытие постановления",
																   ПечатьРаскрытияПостановлений(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
