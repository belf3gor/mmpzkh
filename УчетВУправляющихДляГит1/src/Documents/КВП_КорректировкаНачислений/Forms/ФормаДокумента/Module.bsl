
#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ЭтоКорректировка           = (Объект.ВидОперации = ПредопределенноеЗначение(
														"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений"));
	ЭтоПерерасчетПоПлощади     = (Объект.ВидОперации = ПредопределенноеЗначение(
														"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПлощади"));
	ЭтоПерерасчетНедопоставка  = (Объект.ВидОперации = ПредопределенноеЗначение(
														"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка"));
	ЭтоПерерасчетПоПроценту    = (Объект.ВидОперации = ПредопределенноеЗначение(
														"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПроценту"));
	ЭтоПерерасчетПоИзменениюЛС = (Объект.ВидОперации = ПредопределенноеЗначение(
														"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ВременноеОтсутствие"));
	ЭтоПерерасчетКомиссииБанка = (Объект.ВидОперации = ПредопределенноеЗначение(
														"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетКомиссииБанка"));
	
	
	// Установка кнопки "Рассчитать" на командной панели.
	Элементы.ДеревоУслугКомандаРассчитать.Видимость = Не ЭтоКорректировка;
	
	Если ЭтоКорректировка Тогда
		
		Элементы.ДеревоУслугНачислено.Видимость         = Ложь;
		Элементы.ДеревоУслугСуммаПерерасчета.Видимость  = Ложь;
		Элементы.ДеревоУслугСуммаНачисления.Видимость   = Истина;
		Элементы.ДеревоУслугСуммаЛьготы.Видимость       = Истина;
		Элементы.ДеревоУслугЛьготнаяКатегория.Видимость = Истина;
		Элементы.ДеревоУслугЛьготник.Видимость          = Истина;
		Элементы.ДеревоУслугСуммаПени.Видимость         = Истина;
		
		Элементы.ДеревоУслугКомандаЗаполнить.Видимость  = Ложь;
		
	Иначе
		
		Элементы.ДеревоУслугНачислено.Видимость         = Истина;
		Элементы.ДеревоУслугСуммаПерерасчета.Видимость  = Истина;
		Элементы.ДеревоУслугСуммаНачисления.Видимость   = Ложь;
		Элементы.ДеревоУслугСуммаЛьготы.Видимость       = Ложь;
		Элементы.ДеревоУслугЛьготнаяКатегория.Видимость = Ложь;
		Элементы.ДеревоУслугЛьготник.Видимость          = Ложь;
		Элементы.ДеревоУслугСуммаПени.Видимость         = Ложь;
		
		Элементы.ДеревоУслугКомандаЗаполнить.Видимость  = Истина;
		
	КонецЕсли;
	
	Элементы.ДеревоУслугКомандаЗаполнитьПоДокументуОплаты.Видимость = ЭтоПерерасчетКомиссииБанка;
	Элементы.НадписьРегистрироватьКакОплату.Видимость               = Объект.РегистрироватьКакОплату;
	
	СпособРасчетаУслуги = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Услуга, "СпособРасчета");
	
	ЭтоУслугаПоПоказаниямПУ = Объект.Услуга.Пустая()
								ИЛИ (НЕ Объект.Услуга.Пустая()
									И (СпособРасчетаУслуги = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика")
										ИЛИ СпособРасчетаУслуги = 
												ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме")));
	
	// В режиме Корректировки отображает дополнительное поле Услуга
	Если ЭтоКорректировка Тогда
		Элементы.ПанельВариантНачисления.ТекущаяСтраница = Элементы.СтраницаУслугаДляЗаполнения;
		Элементы.ПанельВариантНачисления.Видимость = Истина;
	ИначеЕсли ЭтоУслугаПоПоказаниямПУ И (ЭтоПерерасчетНедопоставка ИЛИ ЭтоПерерасчетПоПроценту) Тогда
		Элементы.ПанельВариантНачисления.ТекущаяСтраница = Элементы.СтраницаВариантНачисления;
		Элементы.ПанельВариантНачисления.Видимость = Истина;
	Иначе
		Элементы.ПанельВариантНачисления.Видимость = Ложь;
	КонецЕсли;
	
	// Панель дополнительных параметров.
	Если ЭтоКорректировка Тогда
		
		// Панель доп. параметров.
		Элементы.ГруппаДопПараметровСлева.Видимость  = Ложь;
		Элементы.ГруппаДопПараметровСправа.Видимость = Ложь;
		
		Элементы.ПанельНастройкаПериода.Видимость    = Ложь;
		
	Иначе
		
		// Панель доп. параметров.
		Элементы.ГруппаДопПараметровСлева.Видимость  = Истина;
		Элементы.ГруппаДопПараметровСправа.Видимость = Истина;
		
		Элементы.ПанельНастройкаПериода.Видимость    = Истина;
		
		Элементы.ПроизвольныйПериод.Видимость = НЕ ЭтоКорректировка;
		
		Элементы.ВидПлощади.Видимость         = ЭтоПерерасчетПоПлощади;
		
		Элементы.ПанельЗначенийПерерасчета.Видимость = 
												ЭтоПерерасчетНедопоставка ИЛИ ЭтоПерерасчетПоПроценту ИЛИ ЭтоПерерасчетКомиссииБанка;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПроценту") Тогда
			Элементы.ПанельЗначенийПерерасчета.ТекущаяСтраница = Элементы.Страница2;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
										"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетКомиссииБанка") Тогда
			Элементы.ПанельЗначенийПерерасчета.ТекущаяСтраница = Элементы.Страница3;
		Иначе
			Элементы.ПанельЗначенийПерерасчета.ТекущаяСтраница = Элементы.Страница1;
		КонецЕсли;
		
		Элементы.ФлагПониженияТарифа.Видимость = Объект.ЧастичныйПерерасчет;
		Элементы.ЗначениеПониженияТарифа.Видимость = Объект.ЧастичныйПерерасчет;
		
	КонецЕсли;
	
	// Вид корректировки указывается в случае, если используется новый механизм корректировки начислений,
	// а отражение корректировок выполняется с помощью документов "Корректировка реализации".
	Элементы.ВидКорректировки.Видимость = УПЖКХ_ПараметрыУчетаСервер.ИспользоватьКорректировкиРеализацииПриОтраженииКорректировокВРеглУчете(Объект.Дата);
	
	Элементы.ДеревоУслугТекущийРасчет.Видимость = ЭтоПерерасчетПоИзменениюЛС ИЛИ ЭтоПерерасчетПоПлощади ИЛИ ЭтоПерерасчетКомиссииБанка;
		
	// Реквизит "КорректировкаНормативныхНачисленийПоПУ" помечен на удаление в версии 3.0.44.17
	// в связи с переработкой механизма сторнирования начислений и более недоступен для изменения.
	// Начиная с указанной версии при корректировке сторно необходимо корректировать объемы, а не суммы начислений.
	//
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений")
	   И Объект.УдалитьКорректировкаНормативныхНачисленийПоПУ Тогда
		Элементы.КорректировкаНормативныхНачисленийПоПУ.Видимость = Истина;
	Иначе
		Элементы.КорректировкаНормативныхНачисленийПоПУ.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоПерерасчетНедопоставка Тогда
		Элементы.ИспользоватьРасширенныйПериодРасчетаПоНедопоставке.Видимость = Истина;
		Элементы.ГруппаВидПерерасчета.Видимость = НЕ Форма.ИспользоватьРасширенныйПериодРасчетаПоНедопоставке;
	Иначе
		Элементы.ИспользоватьРасширенныйПериодРасчетаПоНедопоставке.Видимость = Ложь;
	КонецЕсли;
	
	// У комиссии банка не бывает зависимых услуг,а при корректировке режим ЗависимыеУслуги ни на что не влиянет.
	Если ЭтоКорректировка Тогда
		
		Если Объект.ВариантКорректировкиУслуг = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ЗависимыеУслуги") Тогда
			Объект.ВариантКорректировкиУслуг = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ОсновныеУслуги");
		КонецЕсли;
		
		Если Элементы.ВариантКорректировкиУслуг.СписокВыбора.Количество() = 3 Тогда
			Элементы.ВариантКорректировкиУслуг.СписокВыбора.Удалить(2);
		КонецЕсли;
		
	ИначеЕсли ЭтоПерерасчетКомиссииБанка Тогда
		
		Объект.ВариантКорректировкиУслуг             = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ОсновныеУслуги");
		
	ИначеЕсли Элементы.ВариантКорректировкиУслуг.СписокВыбора.Количество() = 2 Тогда
		
		Элементы.ВариантКорректировкиУслуг.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ЗависимыеУслуги"),"Только зависимые услуги");
		
	КонецЕсли;
	
	Элементы.ВариантКорректировкиУслуг.Видимость  = Не ЭтоПерерасчетКомиссииБанка;	
	Элементы.ДеревоУслугУслугаОснование.Видимость = Не (Объект.ВариантКорректировкиУслуг = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ОсновныеУслуги"));
	
КонецПроцедуры // УправлениеФормой()

&НаКлиентеНаСервереБезКонтекста
// Устанавливает доступность элементов формы.
Процедура УстановитьДоступность(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка") Тогда
		Элементы.ДнейПерерасчета.Доступность  = Объект.ВидПерерасчета = 0;
		Элементы.ЧасовПерерасчета.Доступность = НЕ Объект.ВидПерерасчета = 0;
		Элементы.МесяцСтрокаКон.Доступность = Форма.ИспользоватьРасширенныйПериодРасчетаПоНедопоставке;
	Иначе
		Элементы.МесяцСтрокаКон.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступность()

&НаКлиенте
// Процедура заполняет основание перерасчета.
//
Процедура ЗаполнитьОснованиеПерерасчета()
	
	Объект.ОснованиеПерерасчета = Объект.ВидОперации;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка")
		И Объект.ЧастичныйПерерасчет Тогда
		
		Если Объект.ФлагПониженияТарифа Тогда
			Объект.ОснованиеПерерасчета = "" + Объект.ОснованиеПерерасчета + " с понижением тарифа";
		Иначе
			Объект.ОснованиеПерерасчета = "" + Объект.ОснованиеПерерасчета + " по проценту понижения";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОснованиеПерерасчета()

&НаКлиенте
// Проверяет, требуется ли заполнение основания перерасчета.
Процедура ПроверитьОснованиеПерерасчета()
	
	Если НЕ мОснованиеОтредактировано Тогда
		ЗаполнитьОснованиеПерерасчета();
	КонецЕсли;
	
КонецПроцедуры // ПроверитьОснованиеПерерасчета()

&НаСервере
// Пересчитывает итоговые строки дерева.
Процедура ПересчитатьИтоговыеСтроки()
	
	Для Каждого ВеткаЛС Из ДеревоУслуг.ПолучитьЭлементы() Цикл
		Для Каждого ВеткаМесяца Из ВеткаЛС.ПолучитьЭлементы() Цикл
			Для Каждого ВеткаУслуги Из ВеткаМесяца.ПолучитьЭлементы() Цикл
				Если ВеткаУслуги.ПолучитьЭлементы().Количество() > 0 Тогда
					КоллекцияСтрок = ВеткаУслуги.ПолучитьЭлементы();
					ВеткаУслуги.СуммаПени        = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаПени");
					ВеткаУслуги.СуммаЛьготы      = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаЛьготы");
					ВеткаУслуги.СуммаНачисления  = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаНачисления");
					ВеткаУслуги.Начислено        = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "Начислено");
					ВеткаУслуги.ТекущийРасчет    = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "ТекущийРасчет");
					ВеткаУслуги.СуммаПерерасчета = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаПерерасчета");
				КонецЕсли;
			КонецЦикла;
			Если ВеткаМесяца.ПолучитьЭлементы().Количество() > 0 Тогда
				КоллекцияСтрок = ВеткаМесяца.ПолучитьЭлементы();
				ВеткаМесяца.СуммаПени        = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаПени");
				ВеткаМесяца.СуммаЛьготы      = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаЛьготы");
				ВеткаМесяца.СуммаНачисления  = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаНачисления");
				ВеткаМесяца.Начислено        = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "Начислено");
				ВеткаМесяца.ТекущийРасчет    = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "ТекущийРасчет");
				ВеткаМесяца.СуммаПерерасчета = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаПерерасчета");
			КонецЕсли;
		КонецЦикла;
		Если ВеткаЛС.ПолучитьЭлементы().Количество() > 0 Тогда
			КоллекцияСтрок = ВеткаЛС.ПолучитьЭлементы();
			ВеткаЛС.СуммаПени        = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаПени");
			ВеткаЛС.СуммаЛьготы      = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаЛьготы");
			ВеткаЛС.СуммаНачисления  = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаНачисления");
			ВеткаЛС.Начислено        = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "Начислено");
			ВеткаЛС.ТекущийРасчет    = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "ТекущийРасчет");
			ВеткаЛС.СуммаПерерасчета = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаПерерасчета");
		КонецЕсли;
	КонецЦикла;
	
	КоллекцияСтрок = ДеревоУслуг.ПолучитьЭлементы();
	мВсегоСуммаПениПоДокументу        = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаПени");
	мВсегоСуммаЛьготПоДокументу       = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаЛьготы");
	мВсегоСуммаНачисленияПоДокументу  = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаНачисления");
	мВсегоНачисленоПоДокументу        = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "Начислено");
	мВсегоТекущийРасчетПоДокументу    = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "ТекущийРасчет");
	мВсегоСуммаПерерасчетаПоДокументу = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(КоллекцияСтрок, "СуммаПерерасчета");
	
КонецПроцедуры // ПересчитатьИтоговыеСтроки()

&НаСервере
// Заполняет дерево значений данными из перданной таблицы значений ТЗКорректировки. Если пердан параметр ОчиститьКорректировки
// очищает дерево услуг и заполняет дерево из табличной части Корректировки.
//
Процедура ЗаполнитьДеревоУслуг(ТЗКорректировки = Неопределено, ОчиститьКорректировки = Истина)
	
	ТЗДеревоУслуг = РеквизитФормыВЗначение("ДеревоУслуг", Тип("ДеревоЗначений"));
	
	Если ОчиститьКорректировки Тогда
		
		ТЗКорректировки = Объект.Корректировки.Выгрузить();
		ТЗДеревоУслуг.Строки.Очистить();
		
	КонецЕсли;
	
	Для Каждого Строка Из ТЗКорректировки Цикл
		
		ВеткаЛС = ТЗДеревоУслуг.Строки.Найти(Строка.ЛицевойСчет, "ЛицевойСчет");
		Если ВеткаЛС = Неопределено Тогда
			ВеткаЛС = ТЗДеревоУслуг.Строки.Добавить();
			ВеткаЛС.ЛицевойСчет = Строка.ЛицевойСчет;
			ВеткаЛС.Ном = ТЗДеревоУслуг.Строки.Количество();
		КонецЕсли;
		
		ВеткаДата = ВеткаЛС.Строки.Найти(Строка.МесяцНачисления, "МесяцНачисления");
		Если ВеткаДата = Неопределено Тогда
			ВеткаДата = ВеткаЛС.Строки.Добавить();
			ВеткаДата.МесяцНачисления = Строка.МесяцНачисления;
		КонецЕсли;
		
		//СтрокиСоставнойУслуги = КешСоставныхУслуг.НайтиСтроки(Новый Структура("СоставнаяУслуга", Строка.Услуга));
		
		Если Строка.СоставнаяУслуга.Пустая() Тогда
			
			ВеткаУслуга                 = ВеткаДата.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ВеткаУслуга, Строка, ,"ЛицевойСчет, МесяцНачисления");
			
		Иначе
			//составная услуга
			ВеткаУслуга = ВеткаДата.Строки.Найти(Строка.Услуга, "Услуга");
			Если ВеткаУслуга = Неопределено Тогда
				ВеткаУслуга                 = ВеткаДата.Строки.Добавить();
				ВеткаУслуга.Услуга          = Строка.Услуга;
				ВеткаУслуга.УслугаОснование = Строка.УслугаОснование;
			КонецЕсли;
			
			ВеткаСостУслуга = ВеткаУслуга.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ВеткаСостУслуга, Строка, ,"ЛицевойСчет, МесяцНачисления");
			ВеткаСостУслуга.Услуга = Строка.СоставнаяУслуга;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТЗДеревоУслуг, "ДеревоУслуг");
	ПересчитатьИтоговыеСтроки();
	
КонецПроцедуры  //ЗаполнитьСтрокуДереваУслуг()

&НаСервере
// Заполняет табличную часть документа данными из дерева.
Процедура ЗаполнитьТЧПоДереву()
	
	Объект.Корректировки.Очистить();
	
	СписокСвойствВеткиУслуги =
	"СуммаНачисления,
	|Начислено,
	|ТекущийРасчет,
	|СуммаПерерасчета,
	|НачалоПериода,
	|КонецПериода,
	|ВидНачисления,
	|ЗависимаяПоНормативу,
	|ТипНачисления,
	|КолДоИзм,     
	|ТарифДоИзм,
	|КолПослеИзм,
	|ТарифПослеИзм";
	
	
	ТЗДеревоУслуг = РеквизитФормыВЗначение("ДеревоУслуг", Тип("ДеревоЗначений"));
	
	// Перенесем данные из дерева в табличную часть документа.
	Для Каждого ВеткаЛС Из ТЗДеревоУслуг.Строки Цикл
		Если ВеткаЛС.Строки.Количество() > 0 Тогда
			Для Каждого ВеткаМесяца Из ВеткаЛС.Строки Цикл
				Если ВеткаМесяца.Строки.Количество() > 0 Тогда
					Для Каждого ВеткаУслуги Из ВеткаМесяца.Строки Цикл
						Если ВеткаУслуги.Строки.Количество() > 0 Тогда
							Для Каждого ВеткаСостУслуги Из ВеткаУслуги.Строки Цикл
								НовСтр                       = Объект.Корректировки.Добавить();
								НовСтр.Услуга                = ВеткаУслуги.Услуга;
								НовСтр.УслугаОснование       = ВеткаУслуги.УслугаОснование;
								НовСтр.СоставнаяУслуга       = ВеткаСостУслуги.Услуга;
								НовСтр.ЛицевойСчет           = ВеткаЛС.ЛицевойСчет;
								НовСтр.МесяцНачисления       = ВеткаМесяца.МесяцНачисления;
								НовСтр.СуммаЛьготы           = ВеткаСостУслуги.СуммаЛьготы;
								НовСтр.ЛьготнаяКатегория     = ВеткаУслуги.ЛьготнаяКатегория;
								НовСтр.Льготник              = ВеткаУслуги.Льготник;
								НовСтр.СуммаПени             = ВеткаСостУслуги.СуммаПени;
								
								ЗаполнитьЗначенияСвойств(НовСтр, ВеткаСостУслуги, СписокСвойствВеткиУслуги);
								
							КонецЦикла;
						Иначе
							НовСтр                       = Объект.Корректировки.Добавить();
							Если ЗначениеЗаполнено(ВеткаМесяца.Услуга) Тогда
								НовСтр.Услуга                = ВеткаМесяца.Услуга;
								НовСтр.УслугаОснование       = ВеткаМесяца.УслугаОснование;
								НовСтр.СоставнаяУслуга       = ВеткаУслуги.Услуга;
								НовСтр.ЛицевойСчет           = ВеткаЛС.ЛицевойСчет;
								Если ЗначениеЗаполнено(ВеткаЛС.МесяцНачисления) Тогда
									НовСтр.МесяцНачисления   = ВеткаЛС.МесяцНачисления;
								Иначе
									НовСтр.МесяцНачисления   = ВеткаМесяца.МесяцНачисления;
								КонецЕсли;
								НовСтр.СуммаЛьготы           = ВеткаМесяца.СуммаЛьготы;
								НовСтр.ЛьготнаяКатегория     = ВеткаМесяца.ЛьготнаяКатегория;
								НовСтр.Льготник              = ВеткаУслуги.Льготник;
								НовСтр.СуммаПени             = ВеткаМесяца.СуммаПени;
								
								ЗаполнитьЗначенияСвойств(НовСтр, ВеткаУслуги, СписокСвойствВеткиУслуги);
								
							Иначе
								НовСтр.Услуга                = ВеткаУслуги.Услуга;
								НовСтр.УслугаОснование       = ВеткаУслуги.УслугаОснование;
								НовСтр.ЛицевойСчет           = ВеткаЛС.ЛицевойСчет;
								НовСтр.МесяцНачисления       = ВеткаМесяца.МесяцНачисления;
								НовСтр.СуммаЛьготы           = ВеткаУслуги.СуммаЛьготы;
								НовСтр.ЛьготнаяКатегория     = ВеткаУслуги.ЛьготнаяКатегория;
								НовСтр.Льготник              = ВеткаУслуги.Льготник;
								НовСтр.СуммаПени             = ВеткаУслуги.СуммаПени;
								
								ЗаполнитьЗначенияСвойств(НовСтр, ВеткаУслуги, СписокСвойствВеткиУслуги);
								
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе
					НовСтр                       = Объект.Корректировки.Добавить();
					Если ЗначениеЗаполнено(ВеткаЛС.Услуга) Тогда
						НовСтр.Услуга                = ВеткаЛС.Услуга;
						НовСтр.УслугаОснование       = ВеткаЛС.УслугаОснование;
						НовСтр.СоставнаяУслуга       = ВеткаМесяца.Услуга;
						НовСтр.ЛицевойСчет           = ВеткаЛС.ЛицевойСчет;
						НовСтр.МесяцНачисления       = ВеткаЛС.МесяцНачисления;
						НовСтр.СуммаЛьготы           = ВеткаЛС.СуммаЛьготы;
						НовСтр.ЛьготнаяКатегория     = ВеткаЛС.ЛьготнаяКатегория;
						НовСтр.Льготник              = ВеткаЛС.Льготник;
						НовСтр.СуммаПени             = ВеткаЛС.СуммаПени;
						
						ЗаполнитьЗначенияСвойств(НовСтр, ВеткаМесяца, СписокСвойствВеткиУслуги);
						
					Иначе
						НовСтр.Услуга                = ВеткаМесяца.Услуга;
						НовСтр.УслугаОснование       = ВеткаМесяца.УслугаОснование;
						НовСтр.ЛицевойСчет           = ВеткаЛС.ЛицевойСчет;
						Если ЗначениеЗаполнено(ВеткаЛС.МесяцНачисления) Тогда
							НовСтр.МесяцНачисления   = ВеткаЛС.МесяцНачисления;
						Иначе
							НовСтр.МесяцНачисления   = ВеткаМесяца.МесяцНачисления;
						КонецЕсли;
						НовСтр.СуммаЛьготы           = ВеткаМесяца.СуммаЛьготы;
						НовСтр.ЛьготнаяКатегория     = ВеткаМесяца.ЛьготнаяКатегория;
						НовСтр.Льготник              = ВеткаМесяца.Льготник;
						НовСтр.СуммаПени             = ВеткаМесяца.СуммаПени;
						
						ЗаполнитьЗначенияСвойств(НовСтр, ВеткаМесяца, СписокСвойствВеткиУслуги);
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НовСтр                       = Объект.Корректировки.Добавить();
			НовСтр.ЛицевойСчет           = ВеткаЛС.ЛицевойСчет;
			НовСтр.МесяцНачисления       = ВеткаЛС.МесяцНачисления;
			НовСтр.Услуга                = ВеткаЛС.Услуга;
			НовСтр.УслугаОснование       = ВеткаЛС.УслугаОснование;
			НовСтр.СуммаЛьготы           = ВеткаЛС.СуммаЛьготы;
			НовСтр.ЛьготнаяКатегория     = ВеткаЛС.ЛьготнаяКатегория;
			НовСтр.Льготник              = ВеткаЛС.Льготник;
			НовСтр.СуммаПени             = ВеткаЛС.СуммаПени;
			
			ЗаполнитьЗначенияСвойств(НовСтр, ВеткаЛС, СписокСвойствВеткиУслуги);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  //ЗаполнитьТЧПоДереву()

&НаСервере
// Выводит значение комиссии банка на дату документа.
Процедура ВывестиКомиссиюБанка()
	
	НадписьТекущаяКомиссия = "";
	мПроцентКомиссииБанка = 0;
	
	Если Объект.ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетКомиссииБанка
		И ЗначениеЗаполнено(Объект.Услуга) Тогда
		
		мПроцентКомиссииБанка = ПолучитьТарифПоЛицевомуСчету(Объект.Дата, Объект.Организация,
																Объект.Услуга, , Перечисления.КВП_ВидыТарифов.КомиссияБанка);
		НадписьТекущаяКомиссия = 
			"Комиссия банка для услуги """ + Объект.Услуга + """ составляет " + Формат(мПроцентКомиссииБанка, "ЧДЦ=2; ЧН=")+"%";
		
	КонецЕсли;
	
КонецПроцедуры // ВывестиКомиссиюБанка()

&НаКлиенте
// Устанавливает отбор услуг в справочнике "Услуги" в зависимости от вида операции документа.
Функция ПолучитьФормуВыбораДляОтбораПоУслугам(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПлощади")
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетКомиссииБанка") Тогда
		
		Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", 
								Новый Структура("ТекущаяСтрока, ОтображатьСписком", Объект.Услуга, Истина), 
								Элемент);
		
		Список = Новый СписокЗначений;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПлощади") Тогда
			
			Список.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПлощади"));
			Список.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам"));
			Список.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме"));
			Список.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоНормамПотребления"));
			
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетКомиссииБанка") Тогда
			
			Список.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.КомиссияБанка"));
			
		КонецЕсли;
		
		Форма.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, 
																"ЭтоГруппа", 
																Ложь,
																ВидСравненияКомпоновкиДанных.Равно, 
																, 
																Истина);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, 
																"СпособРасчета", 
																Список,
																ВидСравненияКомпоновкиДанных.ВСписке, 
																, 
																Истина, 
																РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	Иначе
		
		Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", , Элемент);
		
	КонецЕсли;
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, 
																"Ссылка", 
																УслугаДобровольногоСтрахования,
																ВидСравненияКомпоновкиДанных.НеРавно, 
																, 
																Истина, 
																РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции // ПолучитьФормуВыбораДляОтбораПоУслугам()

&НаСервере
// Функция получает услуги со способом расчета по показаниям ПУ.
//
// Возвращаемое значение: 
//  Дерево значений с услугами со способом расчета по ПУ.
//
Функция ПолучитьУслугиПоПУ()
	
	ТЗДеревоУслуг = РеквизитФормыВЗначение("ДеревоУслуг", Тип("ДеревоЗначений"));
	
	ТаблицаУслугПоПУ = ТЗДеревоУслуг.Скопировать();
	ТаблицаУслугПоПУ.Строки.Очистить();
	Для Каждого СтрокаДереваУслуг Из ТЗДеревоУслуг.Строки Цикл
		
		Если СтрокаДереваУслуг.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
			ИЛИ СтрокаДереваУслуг.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаУслугПоПУ.Строки.Добавить(), СтрокаДереваУслуг);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаУслугПоПУ;
	
КонецФункции // ПолучитьУслугиПоПУ()

&НаСервере
// Возвращает количество услуг по ПУ.
Функция ПолучитьКоличествоУслугПоПУ()
	
	ТаблицаСУслугамиПоПУ = ПолучитьУслугиПоПУ();
	
	Возврат ТаблицаСУслугамиПоПУ.Строки.Количество();
	
КонецФункции

&НаСервере
// Процедура заполняет дерево услугами по ПУ.
Процедура ЗаполнитьДеревоУслугамиПоПУ()
	
	ТаблицаСУслугамиПоПУ = ПолучитьУслугиПоПУ();
	
	ТЗДеревоУслуг = ТаблицаСУслугамиПоПУ.Скопировать();
	
	ЗначениеВРеквизитФормы(ТЗДеревоУслуг, "ДеревоУслуг");
	
КонецПроцедуры

&НаСервере
// Процедура заполняет данные для условного оформления в строке.
Процедура ЗаполнитьДанныеДляУсловногоОформления(ТекущаяСтрока, ЭтоСтрокаДерева = Ложь)
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоСтрокаДерева Тогда
		// Это строка коллекции формы
		СтрокаДерева = ДеревоУслуг.НайтиПоИдентификатору(ТекущаяСтрока);
		Если СтрокаДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийРодитель = СтрокаДерева.ПолучитьРодителя();
		СтрокиДерева    = СтрокаДерева.ПолучитьЭлементы();
		
	Иначе
		// Это строка дерева значений.
		СтрокаДерева = ТекущаяСтрока;
		
		ТекущийРодитель = СтрокаДерева.Родитель;
		СтрокиДерева    = СтрокаДерева.Строки;
		
	КонецЕсли;
	
	СтрокаДерева.МесяцСтрокой = 
		УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(СтрокаДерева.МесяцНачисления);
	
	СтрокаДерева.Доп_РодительОпределен     = Не (ТекущийРодитель = Неопределено);
	СтрокаДерева.Доп_ЧетнаяСтрока          = ((СтрокаДерева.Ном%2) = 0);
	СтрокаДерева.Доп_ЕстьПодчиненныеСтроки = (СтрокиДерева.Количество() > 0);
	
	Если СтрокаДерева.Доп_РодительОпределен Тогда
		
		Если СтрокаДерева.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.СОграничениемПоНормам 
		 ИЛИ СтрокаДерева.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
			
			СтрокаДерева.Доп_ТипДоступностиСтроки = 1;
			
		ИначеЕсли НЕ СтрокаДерева.Доп_ТипДоступностиСтроки = 0 Тогда
			
			СтрокаДерева.Доп_ТипДоступностиСтроки = 0;
			
		КонецЕсли;
		
		Если ТекущийРодитель.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.СОграничениемПоНормам 
		 ИЛИ ТекущийРодитель.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
			
			СтрокаДерева.Доп_ТипДоступностиСтроки = 2;
			
		КонецЕсли;
		
		Если Объект.ВариантКорректировкиУслуг = Перечисления.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ОсновныеИЗависимые
		  И Не СтрокаДерева.Услуга.Пустая()
		  И Не СтрокаДерева.УслугаОснование.Пустая() Тогда
			СтрокаДерева.Доп_ТипДоступностиСтроки = 4;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДерева.Услуга) И СтрокиДерева.Количество() > 0 Тогда
		СтрокаДерева.Доп_ТипДоступностиСтроки = 3;
	КонецЕсли;
	
	Если СтрокаДерева.Доп_ЕстьПодчиненныеСтроки И ЭтоСтрокаДерева Тогда
		ЗаполнитьДанныеДляУсловногоОформленияВСтроках(СтрокиДерева);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет данные для условного оформления.
Процедура ЗаполнитьДанныеДляУсловногоОформленияВСтроках(СтрокиДерева)
	
	Для Каждого ТекСтрокаДерева Из СтрокиДерева Цикл
		
		ЗаполнитьДанныеДляУсловногоОформления(ТекСтрокаДерева, Истина);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполнения дополнительных данных
// в строках дерева.
Процедура ЗаполнитьДопДанныеВСтрокахДерева()
	
	ТЗДеревоУслуг = РеквизитФормыВЗначение("ДеревоУслуг", Тип("ДеревоЗначений"));
	СписокЛС = ТЗДеревоУслуг.Строки.ВыгрузитьКолонку("ЛицевойСчет");
	
	мТаблицаДанныхЛС = ПолучитьПараметрыЛицевыхСчетовДляВыводаВТаблицах(СписокЛС, Объект.Дата);
	
	Для Каждого ТекСтрока Из мТаблицаДанныхЛС Цикл
		
		СтрокиДерева = ТЗДеревоУслуг.Строки.НайтиСтроки(Новый Структура("ЛицевойСчет", ТекСтрока.ЛицевойСчет));
		
		Для Каждого ТекСтрокаДерева Из СтрокиДерева Цикл
			ТекСтрокаДерева.Квартира = ТекСтрока.Помещение;
			ТекСтрокаДерева.Владелец = ТекСтрока.Владелец;
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьДанныеДляУсловногоОформленияВСтроках(ТЗДеревоУслуг.Строки);
	
	ЗначениеВРеквизитФормы(ТЗДеревоУслуг, "ДеревоУслуг");
	
КонецПроцедуры

&НаСервере
// Процедура возвращает массив услуг, не подлежащих перерасчету.
Функция ПолучитьМассивУслугНеПодлежащихПерерасчетуНаСервере(ПараметрыУчетнойПолитикиТСЖ)
	
	Возврат ПараметрыУчетнойПолитикиТСЖ["УслугиНеПодлежащиеПерерасчету"].Получить();
	
КонецФункции

&НаКлиенте
// Процедура проверяет на правильность заполнения ТЧ Корректировки.
Процедура ПроверитьПравильностьЗаполненияТЧ(Отказ)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка") Тогда
		
		Если Объект.ВидПерерасчета = 0 
			И НЕ ЗначениеЗаполнено(Объект.ДнейПерерасчета) 
			И НЕ ЭтаФорма.ИспользоватьРасширенныйПериодРасчетаПоНедопоставке Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо указать количество дней перерасчета!", Отказ);
		КонецЕсли;
		
		Если Объект.ВидПерерасчета = 1 И Не ЗначениеЗаполнено(Объект.ЧасовПерерасчета) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо указать количество часов перерасчета!", Отказ);
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПлощади")
		И Объект.ВидПлощади.Пустая() Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо выбрать вид площади!", Отказ);
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.Корректировки Цикл
	
		Если ТекСтрока.Услуга.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"В строке " + ТекСтрока.НомерСтроки + " не заполнено поле ""Услуга""", Отказ);
		КонецЕсли;
		
		Если ТекСтрока.ЛицевойСчет.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"В строке " + ТекСтрока.НомерСтроки + " не заполнено поле ""Лицевой счет""", Отказ);
		КонецЕсли;
		
		Если НЕ (Объект.ВидОперации = ПредопределенноеЗначение(
										"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ВременноеОтсутствие")
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение(
											"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПлощади"))
			И Не ЗначениеЗаполнено(ТекСтрока.Начислено) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"В строке " + ТекСтрока.НомерСтроки + " не заполнено поле ""Начислено""", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(
											КонецМесяца(Объект.ДатаКон),
											Объект.Организация,
											Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МассивУслугПерерасчета = ПолучитьМассивУслугНеПодлежащихПерерасчетуНаСервере(ПараметрыУчетнойПолитикиТСЖ);
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение(
									"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетКомиссииБанка") Тогда
		Для Каждого ТекСтрока Из Объект.Корректировки Цикл
			Если Не МассивУслугПерерасчета = Неопределено
			   И Не МассивУслугПерерасчета.Найти(ТекСтрока.Услуга) = Неопределено Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке " + ТекСтрока.НомерСтроки + " услуга "
							+ ТекСтрока.Услуга + " не может быть использована для перерасчета!", Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура очищает значения полей "ЛьготнаяКатегория" и "Льготник".
Процедура ОчиститьПоля(ТекущиеДанные)
	
	ТекущиеДанные.ЛьготнаяКатегория = ПредопределенноеЗначение("Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка");
	ТекущиеДанные.Льготник          = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
	
КонецПроцедуры // ОчиститьПоля()

&НаСервере
// Процедура выполняет сортировку табличных частей.
//
Процедура СортироватьТЧНаСервере(ИмяТЧ, ИмяКолонкиИсх, ЭтоДерево, ПоВозрастанию)
	
	ИмяКолонки = Прав(ИмяКолонкиИсх, СтрДлина(ИмяКолонкиИсх) - СтрДлина(ИмяТЧ));
	
	ДанныеФормы = ДанныеФормыВЗначение(ЭтотОбъект[ИмяТЧ], Тип("ДеревоЗначений"));
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	УПЖКХ_ОбщегоНазначенияСервер.СортироватьТабличнуюЧасть(ДокОбъект, ИмяТЧ, ДанныеФормы, ИмяКолонки, ПоВозрастанию, ЭтоДерево);
	
	ЗначениеВДанныеФормы(ДанныеФормы, ЭтотОбъект[ИмяТЧ]);
	
КонецПроцедуры // СортироватьТЧНаСервере()

&НаСервере
// Процедура определяет, какой период расчета используется - расширенный или в один месяц.
Процедура ОпределелитьВариантПериодаПерерасчетаНаСервере()
	
	// По умолчанию считаем, что период произвольный.
	ИспользуетсяПроизвольныйПериодРасчета = Истина;
	
	// Если это недопоставка, и при этом если начало и конец периода совпадают
	// или показатель дней(часов) перерасчета заполнен и отличен от нуля,
	// используется период расчета в один месяц.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка")
		И (НачалоМесяца(Объект.ДатаНач) = НачалоМесяца(Объект.ДатаКон) Или Не Объект.ДнейПерерасчета = 0 Или Не Объект.ЧасовПерерасчета = 0) Тогда
		
		ИспользуетсяПроизвольныйПериодРасчета = Ложь;
		Объект.ДатаКон = КонецМесяца(Объект.ДатаНач);
		УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ДатаКон", "МесяцСтрокаКон");
		
	КонецЕсли;
	
	ЭтаФорма.ИспользоватьРасширенныйПериодРасчетаПоНедопоставке = ИспользуетсяПроизвольныйПериодРасчета;
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает конец периода при изменении параметров периода.
Процедура ОбработатьКонецПериодаОтчетаПриИзмененииПараметров()
	
	Если Не ИспользоватьРасширенныйПериодРасчетаПоНедопоставке
	 Или КонецМесяца(Объект.ДатаНач) > КонецМесяца(Объект.ДатаКон) Тогда
		Объект.ДатаКон = КонецМесяца(Объект.ДатаНач);
		УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ДатаКон", "МесяцСтрокаКон");
	КонецЕсли;
	
КонецПроцедуры

// Функция получает список значений типов начислений для перерасчетов начислений.
// 
// Возвращаемое значение:
//  СписокЗначений - ссылка на перечисление "ТипНачисления".
//
&НаСервере
Функция ПолучитьСписокЗначенийТиповНачисленияНаСервере()
	
	Возврат Перечисления.УПЖКХ_ТипНачисления.ПолучитьСписокЗначений();
	
КонецФункции

&НаКлиенте
// Процедура-обработчик результата выбора значения из списка в обработчике "УстановитьТипНачисления()".
Процедура КомандаУстановитьТипНачисленияЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТипНачисленияИзменен = Ложь;
	
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		
		ЭтоКорректировка= (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений"));
		
		УстановитьТипНачисленияРекурсивныйОбходДерева(ЭтоКорректировка, Неопределено, ВыбранныйЭлемент.Значение, ТипНачисленияИзменен);
		
	КонецЕсли;
	
	Если ТипНачисленияИзменен Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Рекурсивная процедура для поиска лицевого счета в корневом узле.
Процедура УстановитьТипНачисленияРекурсивныйОбходДерева(ЭтоКорректировка, ТекущаяВетка, ЗначениеТипаНачисления, ТипНачисленияИзменен)
	
	Если ТекущаяВетка = Неопределено Тогда
		ЭлементыДерева = ДеревоУслуг.ПолучитьЭлементы();
	Иначе
		ЭлементыДерева = ТекущаяВетка.ПолучитьЭлементы();
	КонецЕсли;
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		КоличествоВложенныхЭлементов = ЭлементДерева.ПолучитьЭлементы().Количество();
		Если КоличествоВложенныхЭлементов = 0
		   И ((ЭтоКорректировка И НЕ ЭлементДерева.СуммаНачисления = 0) ИЛИ (НЕ ЭтоКорректировка И НЕ ЭлементДерева.Начислено = 0))
		   И ЭлементДерева.ТипНачисления <> ЗначениеТипаНачисления Тогда
			ЭлементДерева.ТипНачисления = ЗначениеТипаНачисления;
			ТипНачисленияИзменен = Истина;
		ИначеЕсли КоличествоВложенныхЭлементов > 0 Тогда
			УстановитьТипНачисленияРекурсивныйОбходДерева(ЭтоКорректировка, ЭлементДерева, ЗначениеТипаНачисления, ТипНачисленияИзменен)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура получает таблицу составных услуг.
&НаСервере
Процедура ПолучитьСоставныеУслуги()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КВП_УслугиСоставныеУслуги.Ссылка КАК СоставнаяУслуга,
	|	КВП_УслугиСоставныеУслуги.Услуга КАК СоставляющаяУслуга
	|ИЗ
	|	Справочник.КВП_Услуги.СоставныеУслуги КАК КВП_УслугиСоставныеУслуги";
	
	КешСоставныхУслуг.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

#КонецОбласти

#Область РаботаСПроцедурамиИФункциямиМодуляОбъекта

&НаСервере
// Процедура заполняет табличную часть на сервере.
//
Процедура ЗаполнитьДеревоУслугНаСервере()
	
	ЗаполнитьДеревоУслуг();
	ЗаполнитьДопДанныеВСтрокахДерева();
	
КонецПроцедуры

&НаСервере
// Процедура заполняет табличную часть на сервере.
//
Процедура ЗаполнитьТабличнуюЧастьНаСервере(СписокОбъектов)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_КорректировкаНачислений"));
	ДокументОбъект.ЗаполнитьТабличнуюЧасть(СписокОбъектов);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
// Процедура заполнения документа на основании регистрации оплаты.
Процедура ЗаполнитьДокументНаОснованииНаСервере(ПолученныйДокумент)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_КорректировкаНачислений"));
	ДокументОбъект.Заполнить(ПолученныйДокумент);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
// Процедура рассчитывает документ на сервере.
Процедура РассчитатьДокументНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.КВП_КорректировкаНачислений"));
	
	Если Объект.ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ВременноеОтсутствие Тогда
		ДокументОбъект.РассчитатьСуммыНачисленийВременногоОтсутствия();
	ИначеЕсли Объект.ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПлощади Тогда
		ДокументОбъект.РассчитатьСуммыНачисленийПоПлощади();
	ИначеЕсли Объект.ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПроценту Тогда
		ДокументОбъект.РассчитатьСуммыНачисленийПоПроценту();
	ИначеЕсли Объект.ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетКомиссииБанка Тогда
		ДокументОбъект.РассчитатьСуммыНачисленийПерерасчетаКомиссииБанка();
	Иначе
		ДокументОбъект.РассчитатьСуммыНачисленийНедопоставки();
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УПЖКХ_ТиповыеМетодыСервер.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УПЖКХ_ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан("Документ.КВП_КорректировкаНачислений", ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	УПЖКХ_ТиповыеМетодыСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Устанавливаем значение по умолчанию.
	Если Объект.Ссылка.Пустая() Тогда
		
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(Объект, УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		
		Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ИсходныйДокумент = Параметры.ЗначениеКопирования;
			
			Объект.ДатаНач = НачалоМесяца(ИсходныйДокумент.ДатаНач);
			Объект.ДатаКон = КонецМесяца(ИсходныйДокумент.ДатаКон);
			
			Объект.ВариантНачисления = ИсходныйДокумент.ВариантНачисления;
			Объект.ВидКорректировки  = ИсходныйДокумент.ВидКорректировки;
			
			// Реквизит "КорректировкаНормативныхНачисленийПоПУ" помечен на удаление в версии 3.0.44.17
			// в связи с переработкой механизма сторнирования начислений и более недоступен для изменения.
			// Начиная с указанной версии при корректировке сторно необходимо корректировать объемы, а не суммы начислений.
			// Поэтому, если документ создается копированием, то необходимо очистить указанный реквизит.
			Если Объект.УдалитьКорректировкаНормативныхНачисленийПоПУ Тогда
				Объект.УдалитьКорректировкаНормативныхНачисленийПоПУ = Ложь;
			КонецЕсли;
			
		Иначе
			
			Объект.ДатаНач = НачалоМесяца(Объект.Дата);
			Объект.ДатаКон = КонецМесяца(Объект.Дата);
			
			Объект.ВариантНачисления = Перечисления.УПЖКХ_ВариантыНачисленийДляПерерасчета.ВсеНачисления;
			Объект.ВидКорректировки  = Перечисления.УПЖКХ_ВидыКорректировокДляОтраженияВРеглУчете.Перерасчет;
			
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
		
	Иначе
		
		ПредыдущийВидОперации = Объект.ВидОперации;
		ОпределелитьВариантПериодаПерерасчетаНаСервере();
		
	КонецЕсли;
	
	// Установить видимость реквизитов и заголовков колонок.
	УправлениеФормой(ЭтаФорма);
	
	// Установим доступность видов перерасчета при операции "Недопоставка".
	УстановитьДоступность(ЭтаФорма);
	
	ПолучитьСоставныеУслуги();
	
	ЗаполнитьДеревоУслугНаСервере();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ДатаНач", "МесяцСтрокаНач");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ДатаКон", "МесяцСтрокаКон");
	
	ВывестиКомиссиюБанка();
	
	мСписокЗначенийСпособаРасчетаУслуги.Добавить(Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика);
	мСписокЗначенийСпособаРасчетаУслуги.Добавить(Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме);
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	мОснованиеОтредактировано = НЕ Объект.Ссылка.Пустая();
	
	ПроверитьОснованиеПерерасчета();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаполнитьТЧПоДереву();
	
	// Реквизит "КорректировкаНормативныхНачисленийПоПУ" помечен на удаление в версии 3.0.44.17
	// в связи с переработкой механизма сторнирования начислений и более недоступен для изменения.
	// Начиная с указанной версии при корректировке сторно необходимо корректировать объемы, а не суммы начислений.
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение(
								"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений")
	   И Объект.УдалитьКорректировкаНормативныхНачисленийПоПУ Тогда
		Объект.УдалитьКорректировкаНормативныхНачисленийПоПУ = Ложь;
	КонецЕсли;
	
	Если Объект.НеверныеДвижения
	   И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Отказ = Истина;
		ТекстВопроса = "При проведении документа будут сформированы новые движения для строк,
					   |соответствующих льготам, что повлечет за собой изменение текущих остатков."
					 + Символы.ПС + "Вы точно хотите провести документ?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаПередЗаписью", ЭтотОбъект, Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УПЖКХ_ТиповыеМетодыСервер.УстановитьСостояниеДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ПередЗаписью()".
Процедура ОбработатьРезультатВопросаПередЗаписью(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.НеверныеДвижения = Ложь;
		Записать(ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;

КонецПроцедуры // ОбработатьРезультатВопросаПередЗаписью()

&НаКлиенте
// Процедура - обработчик события "ПриЗакрытии" формы.
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// Производится оповещение владельца формы - это необходимо для обновления состояния текущего документа
	// в связанном документе "Ввод показаний счетчика".
	Оповестить("ИзменениеДокументаКорректировки",,ЭтотОбъект.ВладелецФормы);
	
КонецПроцедуры // ПриЗакрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ПроверитьНомерДокумента(Объект, Объект.Дата);
	
	ВывестиКомиссиюБанка();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВывестиКомиссиюБанка();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОперации".
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.Корректировки.Количество() > 0 Тогда
		
		ТекстВопроса = "При изменении вида операции табличная часть будет очищена. Продолжить?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаВидОперацииПриИзменении", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	ВидОперацииПриИзмененииЗавершение();
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ВидОперацииПриИзменении()".
Процедура ОбработатьРезультатВопросаВидОперацииПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса<> КодВозвратаДиалога.Да Тогда
		Объект.ВидОперации = ПредыдущийВидОперации;
		Возврат;
	КонецЕсли;
	Объект.Корректировки.Очистить();
	СтрокиДереваУслуг = ДеревоУслуг.ПолучитьЭлементы();
	СтрокиДереваУслуг.Очистить();
	
	ВидОперацииПриИзмененииЗавершение();
	
КонецПроцедуры // ОбработатьРезультатВопросаКомандаЗаполнитьЗавершение()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "ВидОперацииПриИзменении()".
Процедура ВидОперацииПриИзмененииЗавершение()
	
	ПроверитьОснованиеПерерасчета();
	
	Объект.ВариантНачисления = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВариантыНачисленийДляПерерасчета.ВсеНачисления");
	
	ОпределелитьВариантПериодаПерерасчетаНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	УстановитьДоступность(ЭтаФорма);
	
	ВывестиКомиссиюБанка();
	
	ПредыдущийВидОперации = Объект.ВидОперации;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Услуга".
Процедура УслугаПриИзменении(Элемент)
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию И Объект.Услуга = УслугаДобровольногоСтрахования Тогда
		Объект.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("По услуге добровольного страхования нельзя корректировать начисления.");
		
		Возврат;
	КонецЕсли;
	
	СпособРасчетаУслуги = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Услуга, "СпособРасчета");
	ВидПлощадиУслуги    = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Услуга, "ВидПлощади");
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПлощади")
	   И НЕ Объект.Услуга.Пустая() 
	   И СпособРасчетаУслуги = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПлощади") Тогда
		Объект.ВидПлощади = ВидПлощадиУслуги;
	КонецЕсли;
	
	Если НЕ Объект.Услуга.Пустая()
	   И (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка")
		  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПроценту")) Тогда
		
		Если НЕ СпособРасчетаУслуги = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика")
		   И НЕ СпособРасчетаУслуги = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
			
			Объект.ВариантНачисления = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыНачисленийДляПерерасчета.ВсеНачисления");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВывестиКомиссиюБанка();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Услуга".
Процедура УслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбораУслуги = ПолучитьФормуВыбораДляОтбораПоУслугам(Элемент);
	
	ФормаВыбораУслуги.ВладелецФормы = ЭтаФорма;
	ФормаВыбораУслуги.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборУслуг", ЭтаФорма);
	ФормаВыбораУслуги.Открыть();
	
КонецПроцедуры // УслугаНачалоВыбора()


&НаСервере
// Обработчик выбора услуги.
//
Процедура ОбработатьВыборУслуг(ВыбранноеЗначение, ДопПараметры)Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Если ДопПараметры = Неопределено Тогда
			
			Объект.Услуга = ВыбранноеЗначение;
			
		Иначе
			
			ТаблицаКорректировки = Объект.Корректировки.Выгрузить();
			ТаблицаКорректировки.Очистить();
			
			//Если выбрана составляющая услуга, то добавятся все ее составные услуги.
			СтрокиСоставнойУслуги = КешСоставныхУслуг.НайтиСтроки(Новый Структура("СоставляющаяУслуга", ВыбранноеЗначение));
			СтрокиСоставляющейУслуги = КешСоставныхУслуг.НайтиСтроки(Новый Структура("СоставнаяУслуга", ВыбранноеЗначение));
			
			// Если выбранная услуга является составляющей, то будут добавлены все составные услуги, которые она составляет
			Если СтрокиСоставнойУслуги.Количество() > 0 Тогда
				
				Для Каждого СтрокаСоставнойУслуги Из СтрокиСоставнойУслуги Цикл
					
					НоваяСтрока                 = ТаблицаКорректировки.Добавить();
					НоваяСтрока.ЛицевойСчет     = ДопПараметры.ЛицевойСчет;
					НоваяСтрока.МесяцНачисления = ДопПараметры.МесяцНачисления;
					НоваяСтрока.Услуга          = СтрокаСоставнойУслуги.СоставнаяУслуга;
					НоваяСтрока.СоставнаяУслуга = ВыбранноеЗначение;
					
				КонецЦикла;
				
			// Если выбранная услуга - составная, то будут добавлены все ее составляющие услуги.
			ИначеЕсли СтрокиСоставляющейУслуги.Количество() > 0 Тогда
				
				Для Каждого СтрокаСоставляющейУслуги Из СтрокиСоставляющейУслуги Цикл
					
					НоваяСтрока                 = ТаблицаКорректировки.Добавить();
					НоваяСтрока.ЛицевойСчет     = ДопПараметры.ЛицевойСчет;
					НоваяСтрока.МесяцНачисления = ДопПараметры.МесяцНачисления;
					НоваяСтрока.Услуга          = ВыбранноеЗначение;
					НоваяСтрока.СоставнаяУслуга = СтрокаСоставляющейУслуги.СоставляющаяУслуга;
					
				КонецЦикла;
				
			Иначе
				
				НоваяСтрока                 = ТаблицаКорректировки.Добавить();
				НоваяСтрока.ЛицевойСчет     = ДопПараметры.ЛицевойСчет;
				НоваяСтрока.МесяцНачисления = ДопПараметры.МесяцНачисления;
				НоваяСтрока.Услуга          = ВыбранноеЗначение;
				
			КонецЕсли;
			
			Если Объект.УдалитьУчитыватьЗависимыеУслуги Тогда
				ТаблицаКорректировки = ДополнитьТаблицуКорректировкиЗависимымиУслугамиНаСервере(ТаблицаКорректировки);
				Объект.Корректировки.Загрузить(ТаблицаКорректировки);
			КонецЕсли;
			
			ЗаполнитьДеревоУслуг(ТаблицаКорректировки, Ложь);
			ЗаполнитьДопДанныеВСтрокахДерева();
			
			//Если была добавлена или скопирована строка, то ее нужно развернуть.
			//Нужно разворачивать вообще все строки с пустыми датами и лицевыми счетами там, где они должны быть заполнены.
			Для Каждого СтрокаЛС Из ДеревоУслуг.ПолучитьЭлементы() Цикл
				//Пустой ЛС
				Если СтрокаЛС.ЛицевойСчет.Пустая() Тогда
					ИдентификаторСтроки = СтрокаЛС.ПолучитьИдентификатор();
					Элементы.ДеревоУслуг.Развернуть(ИдентификаторСтроки, Истина);
					Элементы.ДеревоУслуг.ТекущаяСтрока = ИдентификаторСтроки;
					Продолжить;
				Иначе
					Для Каждого СтрокаДата Из СтрокаЛС.ПолучитьЭлементы() Цикл
						//Пустая дата
						Если СтрокаДата.МесяцНачисления = Дата(1,1,1) Тогда
							ИдентификаторСтроки = СтрокаДата.ПолучитьИдентификатор();
							Элементы.ДеревоУслуг.Развернуть(ИдентификаторСтроки, Истина);
							Элементы.ДеревоУслуг.ТекущаяСтрока = ИдентификаторСтроки;
						//Добавленная строка
						ИначеЕсли СтрокаЛС.ЛицевойСчет = ДопПараметры.ЛицевойСчет И КонецМесяца(СтрокаДата.МесяцНачисления) = ДопПараметры.МесяцНачисления Тогда
							ИдентификаторСтроки = СтрокаЛС.ПолучитьИдентификатор();
							//Элементы.ДеревоУслуг.Развернуть(ИдентификаторСтроки, Истина);
							Элементы.ДеревоУслуг.ТекущаяСтрока = ИдентификаторСтроки;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УслугаНачалоВыбора()

&НаКлиенте
// Обработчик выбора лицевого счета.
//
Процедура ОбработатьВыборЛицевогоСчета(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		ДопПараметры.ЛицевойСчет = ВыбранноеЗначение;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПериода", ЭтаФорма, ДопПараметры);
		ОткрытьФорму("ОбщаяФорма.ВыборПериода", , , , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборЛицевогоСчета()

&НаКлиенте
// Обработчик выбора лицевого счета.
//
Процедура ОбработатьВыборПериода(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		ДопПараметры.МесяцНачисления = КонецМесяца(ВыбранноеЗначение);
		
		Если Объект.УдалитьКорректировкаНормативныхНачисленийПоПУ Тогда
			СтруктураОтбора = Новый Структура("СпособРасчета", мСписокЗначенийСпособаРасчетаУслуги);
			ФормаВыбора = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора",
										Новый Структура("Отбор", СтруктураОтбора), ЭтаФорма);
		Иначе
			ФормаВыбора = ПолучитьФормуВыбораДляОтбораПоУслугам(Элементы.Услуга);
		КонецЕсли;
		
		ФормаВыбора.ВладелецФормы = ЭтаФорма;
		ФормаВыбора.ОписаниеОповещенияОЗакрытии =
										Новый ОписаниеОповещения("ОбработатьВыборУслуг", ЭтаФорма, ДопПараметры);
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборЛицевогоСчета()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ОснованиеПерерасчета".
Процедура ОснованиеПерерасчетаПриИзменении(Элемент)
	
	мОснованиеОтредактировано = (НЕ ПустаяСтрока(Объект.ОснованиеПерерасчета));
	
	ПроверитьОснованиеПерерасчета();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ВидПерерасчета".
Процедура ВидПерерасчетаПриИзменении(Элемент)
	
	Если Объект.ВидПерерасчета = 0 Тогда
		
		Объект.ЧасовПерерасчета   = 0;
		Объект.ПроцентСнижения    = 0;
		Объект.ПроцентПерерасчета = 0;
		
	ИначеЕсли Объект.ВидПерерасчета = 1 Тогда
		
		Объект.ДнейПерерасчета    = 0;
		Объект.ПроцентПерерасчета = 0;
		Объект.ФлагПониженияТарифа     = Ложь;
		Объект.ЗначениеПониженияТарифа = 0;
		
	Иначе
		
		Объект.ДнейПерерасчета    = 0;
		Объект.ЧасовПерерасчета   = 0;
		Объект.ПроцентСнижения    = 0;
		Объект.ФлагПониженияТарифа     = Ложь;
		Объект.ЗначениеПониженияТарифа = 0;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	УстановитьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЧастичныйПерерасчет".
Процедура ЧастичныйПерерасчетПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	ПроверитьОснованиеПерерасчета();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ФлагПониженияТарифа".
Процедура ФлагПониженияТарифаПриИзменении(Элемент)
	
	ПроверитьОснованиеПерерасчета();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КорректировкаНормативныхНачисленийПоПУ".
Процедура КорректировкаНормативныхНачисленийПоПУПриИзменении(Элемент)
	
	Если НЕ ДеревоУслуг.ПолучитьЭлементы().Количество() = 0
		И Объект.УдалитьКорректировкаНормативныхНачисленийПоПУ Тогда
		
		КоличествоУслугПоПУ = ПолучитьКоличествоУслугПоПУ();
		
		Если НЕ КоличествоУслугПоПУ = ДеревоУслуг.ПолучитьЭлементы().Количество() Тогда
			
			ПоказатьВопрос(Новый ОписаниеОповещения("КорректировкаНормативныхНачисленийПоПУПриИзмененииЗавершение", ЭтотОбъект), 
						   "В табличной части присутствуют строки, где услуги без способа расчета по показаниям ПУ. Убрать строки?",
						   РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КорректировкаНормативныхНачисленийПоПУПриИзменении()

&НаКлиенте
// Процедура-обработчик результат вопроса, вызванного в процедуре "КорректировкаНормативныхНачисленийПоПУПриИзменении()".
Процедура КорректировкаНормативныхНачисленийПоПУПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДеревоУслугамиПоПУ();
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // КорректировкаНормативныхНачисленийПоПУПриИзмененииЗавершение()

&НаКлиенте
// Обработчик события "ПриИзменении" флажка "ИспользоватьРасширенныйПериодРасчетаПоНедопоставке".
Процедура ИспользоватьРасширенныйПериодРасчетаПоНедопоставкеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	УстановитьДоступность(ЭтаФорма);
	ОбработатьКонецПериодаОтчетаПриИзмененииПараметров();
	
	Объект.ЧасовПерерасчета = 0;
	Объект.ВидПерерасчета = 0;
	Объект.ДнейПерерасчета = 0;
	
КонецПроцедуры

///////////////////////
// Поле даты начала

&НаКлиенте
// Обработчик события "ПриИзменении" поля "МесяцСтрокаНач".
Процедура МесяцСтрокаНачПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ДатаНач", "МесяцСтрокаНач", Модифицированность);
	
	ОбработатьКонецПериодаОтчетаПриИзмененииПараметров();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "МесяцСтрокаНач".
Процедура МесяцСтрокаНачНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("МесяцСтрокаНачНачалоВыбораЗавершение", ЭтотОбъект);
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ДатаНач", "МесяцСтрокаНач", ,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение обработчика "МесяцСтрокаНачНачалоВыбора()"
Процедура МесяцСтрокаНачНачалоВыбораЗавершение (СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	ОбработатьКонецПериодаОтчетаПриИзмененииПараметров();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "МесяцСтрокаНач".
Процедура МесяцСтрокаНачРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ДатаНач", "МесяцСтрокаНач", Направление, 
														Модифицированность);
	ОбработатьКонецПериодаОтчетаПриИзмененииПараметров();
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "МесяцСтрокаНач".
Процедура МесяцСтрокаНачАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "МесяцСтрокаНач".
Процедура МесяцСтрокаНачОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

///////////////////////
// Поле даты окончания

&НаКлиенте
// Обработчик события "ПриИзменении" поля "МесяцСтрокаКон".
Процедура МесяцСтрокаКонПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ДатаКон", "МесяцСтрокаКон", Модифицированность);
	
	ОбработатьКонецПериодаОтчетаПриИзмененииПараметров();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "МесяцСтрокаКон".
Процедура МесяцСтрокаКонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("МесяцСтрокаКонНачалоВыбораЗавершение", ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ДатаКон", "МесяцСтрокаКон", , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение обработчика "МесяцСтрокаКонНачалоВыбора()"
Процедура МесяцСтрокаКонНачалоВыбораЗавершение (СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	ОбработатьКонецПериодаОтчетаПриИзмененииПараметров();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "МесяцСтрокаКон".
Процедура МесяцСтрокаКонРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ДатаКон", "МесяцСтрокаКон", Направление, 
														Модифицированность);
	ОбработатьКонецПериодаОтчетаПриИзмененииПараметров();
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "МесяцСтрокаКон".
Процедура МесяцСтрокаКонАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "МесяцСтрокаКон".
Процедура МесяцСтрокаКонОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВариантКорректировкиУслугПриИзменении".
//
Процедура ВариантКорректировкиУслугПриИзменении(Элемент)
	
	Если Объект.Корректировки.Количество() > 0 Тогда
		
		ОчиститьСообщения();
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Необходимо перезаполнить таблицу для обновления данных по начислениям.");
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиДереваУслуг

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
// Процедура добавляет составные услуги в дерево значений.
Процедура ДобавитьСоставныеУслуги(ТекВетка, ЭтоДерево = Ложь)
	
	СоставныеУслуги = ТекВетка.Услуга.СоставныеУслуги;
	
	Если СоставныеУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекВетка.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.ПустаяСсылка() Тогда
		ТекВетка.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.ПустаяСсылка();
	КонецЕсли;
	
	Для Каждого ТекУслуга Из СоставныеУслуги Цикл
		
		// Если это дерево значений, то добавляем в строки,
		// если данные формы, то добавляем в элементы.
		Если ЭтоДерево Тогда
			НоваяСтрока = ТекВетка.Строки.Добавить();
		Иначе
			НоваяСтрока = ТекВетка.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		НоваяСтрока.Услуга = ТекУслуга.Услуга;
		
		Если ЭтоДерево Тогда
			ЗаполнитьДанныеДляУсловногоОформления(НоваяСтрока, ЭтоДерево);
		Иначе
			ЗаполнитьДанныеДляУсловногоОформления(НоваяСтрока.ПолучитьИдентификатор(), ЭтоДерево);
		КонецЕсли;
		
		Если ТекУслуга.ВидОграничения = Перечисления.КВП_ВидыОграниченийСоставныхУслуг.БезОграничения Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  //ДобавитьСоставныеУслуги()

&НаКлиенте
// Процедура пересчитывает номера строк в дереве.
Процедура ПересчитатьНомераСтрок()
	
	НомерСтрокиДерева = 1;
	Для Каждого ТекущаяСтрока Из ДеревоУслуг.ПолучитьЭлементы() Цикл
		ТекущаяСтрока.Ном = НомерСтрокиДерева;
		НомерСтрокиДерева = НомерСтрокиДерева + 1;
	КонецЦикла;
	
КонецПроцедуры //ПересчитатьНомераСтрок()

&НаСервере
// Процедура помещает данные о текущей строке во временное хранилище.
Процедура ПоместитьДанныеОТекущейСтрокеВХранилище(ТекущаяСтрока)
	
	ТекущиеДанные = ДеревоУслуг.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мСтруктураРедСтроки = Новый Структура;
	мСтруктураРедСтроки.Вставить("Услуга",           ТекущиеДанные.Услуга);
	мСтруктураРедСтроки.Вставить("ЛицевойСчет",      ТекущиеДанные.ЛицевойСчет);
	мСтруктураРедСтроки.Вставить("СуммаНачисления",  ТекущиеДанные.СуммаНачисления);
	мСтруктураРедСтроки.Вставить("СуммаЛьготы",      ТекущиеДанные.СуммаЛьготы);
	мСтруктураРедСтроки.Вставить("СуммаПени",        ТекущиеДанные.СуммаПени);
	мСтруктураРедСтроки.Вставить("Начислено",        ТекущиеДанные.Начислено);
	мСтруктураРедСтроки.Вставить("ТекущийРасчет",    ТекущиеДанные.ТекущийРасчет);
	мСтруктураРедСтроки.Вставить("СуммаПерерасчета", ТекущиеДанные.СуммаПерерасчета);
	мСтруктураРедСтроки.Вставить("СоставныеУслуги",  ТекущиеДанные.Услуга.СоставныеУслуги.Выгрузить());
	//Позолотина++
	мСтруктураРедСтроки.Вставить("КолПослеИзм", ТекущиеДанные.КолПослеИзм);
	мСтруктураРедСтроки.Вставить("ТарифПослеИзм", ТекущиеДанные.ТарифПослеИзм);
	//Позолотина--	
	АдресХранилищаДанныхСтроки = ПоместитьВоВременноеХранилище(мСтруктураРедСтроки, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
// Процедура проверяет, изменилась ли услуга в строке дерева.
Функция ИзмениласьУслугаВСтрокеДерева(Услуга)
	
	мСтруктураРедСтроки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныхСтроки);
	
	Возврат (Услуга <> мСтруктураРедСтроки.Услуга);
	
КонецФункции

&НаСервере
// Процедура обновляет составную услугу в строках дерева услуг.
Процедура ОбновитьСоставнуюУслугуВСтрокахДерева(Строки, Услуга)
	
	Для Каждого ТекСтрокаДерева Из Строки Цикл
		
		Если ТекСтрокаДерева.Услуга = Услуга Тогда
			
			// Удалим все составные услуги.
			ТекСтрокаДерева.ПолучитьЭлементы().Очистить();
			ТекСтрокаДерева.СуммаНачисления  = 0;
			ТекСтрокаДерева.СуммаЛьготы      = 0;
			ТекСтрокаДерева.СуммаПени        = 0;
			ТекСтрокаДерева.Начислено        = 0;
			ТекСтрокаДерева.ТекущийРасчет    = 0;
			ТекСтрокаДерева.СуммаПерерасчета = 0;
			
			Если ТекСтрокаДерева.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.СОграничениемПоНормам
			   ИЛИ ТекСтрокаДерева.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
				// Добавим в дерево все составные услуги для выбранной услуги.
				ДобавитьСоставныеУслуги(ТекСтрокаДерева);
			КонецЕсли;
			
		ИначеЕсли ТекСтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			
			ОбновитьСоставнуюУслугуВСтрокахДерева(ТекСтрокаДерева.ПолучитьЭлементы(), Услуга);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура обрабатывает окончание редактирования на сервере дерева услуг.
Процедура ОбработатьОкончаниеРедактированияДереваНаСервере(ТекущаяСтрока)
	
	ТекВетка = ДеревоУслуг.НайтиПоИдентификатору(ТекущаяСтрока);
	
	мСтруктураРедСтроки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныхСтроки);
	
	Если мСтруктураРедСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Изменили значение услуги.
	Если ТекВетка.Услуга <> мСтруктураРедСтроки.Услуга Тогда
		
		// Удалим все составные услуги предыдущей услуги.
		ТекВетка.ПолучитьЭлементы().Очистить();
		
		// Добавим в дерево все составные услуги для выбранной услуги.
		Если ТекВетка.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.СОграничениемПоНормам
		   ИЛИ ТекВетка.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
			ДобавитьСоставныеУслуги(ТекВетка);
		КонецЕсли;
		
		Если Объект.ВариантКорректировкиУслуг = Перечисления.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ОсновныеИЗависимые Тогда
			
			// Удалим все зависимые услуги предыдущей услуги.
			УслугиВВетке = ТекВетка.ПолучитьРодителя().ПолучитьЭлементы();
			МассивЗависимыхУслуг = Новый Массив;
			
			Для Каждого Услуга Из УслугиВВетке Цикл
				Если Услуга.УслугаОснование = мСтруктураРедСтроки.Услуга Тогда
					МассивЗависимыхУслуг.Добавить(Услуга);
				КонецЕсли
			КонецЦикла;
			
			Для Каждого ЗависимаяУслуга Из МассивЗависимыхУслуг Цикл
				УслугиВВетке.Удалить(ЗависимаяУслуга);
			КонецЦикла;
			
			// Добавим в дерево все зависимые услуги для выбранной услуги.
			ДобавитьЗависимыеУслуги(ТекВетка);
			
		КонецЕсли;
		
	Иначе
		Если ТекВетка.Услуга.СоставныеУслуги.Количество() <> мСтруктураРедСтроки.СоставныеУслуги.Количество() Тогда
			
			ОбновитьСоставнуюУслугуВСтрокахДерева(ДеревоУслуг.ПолучитьЭлементы(), ТекВетка.Услуга);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТекВетка.Начислено <> мСтруктураРедСтроки.Начислено Тогда
		// Изменили значение поля "Начислено".
		Если Объект.ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ВременноеОтсутствие Тогда
			ТекВетка.СуммаПерерасчета = ТекВетка.ТекущийРасчет - ТекВетка.Начислено;
		КонецЕсли;
		ПересчитатьИтоговыеСтроки();
	КонецЕсли;
	
	Если ТекВетка.ТекущийРасчет <> мСтруктураРедСтроки.ТекущийРасчет Тогда
		// Изменили значение поля "Текущий расчет".
		Если Объект.ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ВременноеОтсутствие Тогда
			ТекВетка.СуммаПерерасчета = ТекВетка.ТекущийРасчет - ТекВетка.Начислено;
		КонецЕсли;
		ПересчитатьИтоговыеСтроки();
	КонецЕсли;
	
	//Позолотина++
	Если ТекВетка.КолПослеИзм <> мСтруктураРедСтроки.КолПослеИзм Тогда
		//изменили значение поля "КолПослеИзм"                                    
		ТекВетка.СуммаПерерасчета = ТекВетка.КолПослеИзм * ТекВетка.ТарифПослеИзм;
		Если Объект.ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений Тогда
			ТекВетка.СуммаНачисления = ТекВетка.КолПослеИзм * ТекВетка.ТарифПослеИзм;
			//ТекВетка.СуммаПерерасчета = ТекВетка.ТекущийРасчет - ТекВетка.Начислено;
		КонецЕсли;
		ПересчитатьИтоговыеСтроки();
	КонецЕсли;
	Если ТекВетка.ТарифПослеИзм <> мСтруктураРедСтроки.ТарифПослеИзм Тогда
		//изменили значение поля "ТарифПослеИзм"                                    
		ТекВетка.СуммаПерерасчета = ТекВетка.КолПослеИзм * ТекВетка.ТарифПослеИзм;
		Если Объект.ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений Тогда
			ТекВетка.СуммаНачисления = ТекВетка.КолПослеИзм * ТекВетка.ТарифПослеИзм;
			//ТекВетка.СуммаПерерасчета = ТекВетка.ТекущийРасчет - ТекВетка.Начислено;
		КонецЕсли;
	ПересчитатьИтоговыеСтроки();
	КонецЕсли;
	//Позолотина--	
	
	Если ТекВетка.СуммаПерерасчета <> мСтруктураРедСтроки.СуммаПерерасчета
	 Или ТекВетка.СуммаНачисления <> мСтруктураРедСтроки.СуммаНачисления
	 Или ТекВетка.СуммаЛьготы <> мСтруктураРедСтроки.СуммаЛьготы
	 Или ТекВетка.СуммаПени <> мСтруктураРедСтроки.СуммаПени Тогда
		ПересчитатьИтоговыеСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//Процедура добавляет зависимые услуги для услуги тукещей ветки дерева.
//
Процедура ДобавитьЗависимыеУслуги(ТекВетка)
	
	Дата    = ТекВетка.ПолучитьРодителя().МесяцНачисления;
	Здание  = ТекВетка.ПолучитьРодителя().ПолучитьРодителя().Квартира.Владелец;
	
	СписокЗданий = Новый СписокЗначений;
	СписокЗданий.Добавить(Здание);
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("Услуга");
	ТаблицаУслуг.Добавить().Услуга = ТекВетка.Услуга;
	
	ТаблицаЗависимыхУслуг = СформироватьТаблицуЗависимыхУслуг(КонецМесяца(Дата), ТаблицаУслуг, Объект.Организация, СписокЗданий,);
	
	Для Каждого ЗависимаяУслуга Из ТаблицаЗависимыхУслуг Цикл
		
		НоваяСтрока                 = ТекВетка.ПолучитьРодителя().ПолучитьЭлементы().Добавить();
		НоваяСтрока.Услуга          = ЗависимаяУслуга.Услуга;
		НоваяСтрока.УслугаОснование = ЗависимаяУслуга.УслугаОснование;
		
		ЗаполнитьДанныеДляУсловногоОформления(НоваяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
//Процедура пересчитывает зависимые услуги для услуги текущей строки в текущей колонке дерева.
//
Процедура ПересчитатьЗависимыеУслуги(ТекВетка, Сумма, ЭтоДерево = Ложь)
	
	ВеткаМесяца     = ТекВетка.ПолучитьРодителя();
	ВеткаЛС         = ВеткаМесяца.ПолучитьРодителя();
	
	МесяцНачисления = ВеткаМесяца.МесяцНачисления;
	Здание          = ВеткаЛС.Квартира.Владелец;
	ЛицевойСчет     = ВеткаЛС.ЛицевойСчет;
	
	СписокЗданий = Новый СписокЗначений;
	СписокЗданий.Добавить(Здание);
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("Услуга");
	ТаблицаУслуг.Добавить().Услуга = ТекВетка.Услуга;
	
	ПоПрочимОрганизациям = Константы.УПЖКХ_НачислениеЗависимыхУслугВРазрезеОрганизаций.Получить();
	
	ТаблицаЗависимыхУслуг = СформироватьТаблицуЗависимыхУслуг(КонецМесяца(МесяцНачисления), ТаблицаУслуг, Объект.Организация, СписокЗданий, , ПоПрочимОрганизациям);
	
	ЭлементыВеткиДата = ТекВетка.ПолучитьРодителя().ПолучитьЭлементы();
	
	Для Каждого СтрокаУслуги Из ЭлементыВеткиДата Цикл
		
		Если СтрокаУслуги.УслугаОснование = ТекВетка.Услуга Тогда
			
			СтрокаЗависимойУслуги = ТаблицаЗависимыхУслуг.Найти(СтрокаУслуги.Услуга);
			
			// Получим тариф зависимой услуги.
			ТарифЗависимойУслуги = ПолучитьТарифПоЛицевомуСчету(МесяцНачисления, ?(ПоПрочимОрганизациям И ЗначениеЗаполнено(СтрокаЗависимойУслуги.Организация), СтрокаЗависимойУслуги.Организация, Объект.Организация), СтрокаУслуги.Услуга, ЛицевойСчет);
			
			ТарифУслугиОснования = ПолучитьТарифПоЛицевомуСчету(МесяцНачисления, Объект.Организация, СтрокаУслуги.УслугаОснование, ЛицевойСчет);
			
			
			Если СтрокаУслуги.ТипНачисления = ТекВетка.ТипНачисления Тогда
				
				СтрокаУслуги[Сумма] = ТекВетка[Сумма] * ?(ТарифУслугиОснования = 0, 0, ТарифЗависимойУслуги / ТарифУслугиОснования);
				СтрокаУслуги[Сумма] = СтрокаУслуги[Сумма] * СтрокаЗависимойУслуги.Коэффициент;
				
			ИначеЕсли ТекВетка.Доп_ЕстьПодчиненныеСтроки Тогда //Если есть составные услуги, то отдельно считаем суммы по типу начисления
				
				СуммаИндивидуальныхНачислений = 0;
				СуммаОбщедомовыхНачислений    = 0;
				СуммаБезРазделения            = 0;
				
				Для Каждого СоставнаяУслуга Из ТекВетка.ПолучитьЭлементы() Цикл
					Если СоставнаяУслуга.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное Тогда
						СуммаИндивидуальныхНачислений = СуммаИндивидуальныхНачислений + СоставнаяУслуга[Сумма];
					ИначеЕсли СоставнаяУслуга.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое Тогда
						СуммаОбщедомовыхНачислений = СуммаОбщедомовыхНачислений + СоставнаяУслуга[Сумма];
					ИначеЕсли СоставнаяУслуга.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.ПустаяСсылка() Тогда
						СуммаБезРазделения = СуммаБезРазделения + СоставнаяУслуга[Сумма];
					КонецЕсли;
				КонецЦикла;
				
				Если СтрокаУслуги.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное Тогда
					ТекущаяСумма = СуммаИндивидуальныхНачислений;
				ИначеЕсли СтрокаУслуги.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое Тогда
					ТекущаяСумма = СуммаОбщедомовыхНачислений;
				ИначеЕсли СтрокаУслуги.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.ПустаяСсылка() Тогда
					ТекущаяСумма = СуммаБезРазделения;
				КонецЕсли;
				
				СтрокаУслуги[Сумма] = ТекущаяСумма * ?(ТарифУслугиОснования = 0, 0, ТарифЗависимойУслуги / ТарифУслугиОснования);
				СтрокаУслуги[Сумма] = СтрокаУслуги[Сумма] * СтрокаЗависимойУслуги.Коэффициент;
				
			КонецЕсли;
			
			ПоместитьДанныеОТекущейСтрокеВХранилище(СтрокаУслуги.ПолучитьИдентификатор());
			
			ОбработатьОкончаниеРедактированияДереваНаСервере(СтрокаУслуги.ПолучитьИдентификатор());
			
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ДеревоУслугСуммаПриИзменении().
//
Процедура ДеревоУслугСуммаПриИзмененииОкончание(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПересчитатьЗависимыеУслугиНаСервере(ДополнительныеПараметры);
		
		Элементы.ДеревоУслуг.Развернуть(ДополнительныеПараметры.ТекущаяСтрока, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//Процедура пересчитывает зависимые услуги.
//
Процедура ПересчитатьЗависимыеУслугиНаСервере(ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	ТЗДеревоУслуг = РеквизитФормыВЗначение("ДеревоУслуг", Тип("ДеревоЗначений"));
	
	ТекВетка = ДеревоУслуг.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекВетка.ПолучитьРодителя().МесяцСтрокой = "" Тогда
		ТекВетка = ТекВетка.ПолучитьРодителя();
	КонецЕсли;
	
	ПересчитатьЗависимыеУслуги(ТекВетка, ДополнительныеПараметры.Сумма);
	
КонецПроцедуры

&НаСервере
// Процедура заполняет доп данные в строке дерева.
Процедура ЗаполнитьДопДанныеВСтроке(ТекущаяСтрока)

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДеревоУслуг.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ЛицевойСчет) Тогда
		ТекущиеДанные.Квартира = ТекущиеДанные.ЛицевойСчет.Адрес;
		ТекущиеДанные.Владелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(
									ТекущиеДанные.ЛицевойСчет,
									Объект.Дата);
	Иначе
		ТекущиеДанные.Квартира = Неопределено;
		ТекущиеДанные.Владелец = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Рекурсивная процедура для поиска лицевого счета в корневом узле.
Функция ОпределитьЛицевойСчет(ТекВетка)
	
	// Пустое значение по умолчанию.
	ЛицевойСчет = Неопределено;
	
	Родитель = ТекВетка.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		ЛицевойСчет = ТекВетка.ЛицевойСчет;
	Иначе
		ЛицевойСчет = ОпределитьЛицевойСчет(Родитель);
	КонецЕсли;
	
	Возврат ЛицевойСчет;
	
КонецФункции //ОпределитьЛицевойСчет()

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ДеревоУслуг".
Процедура ДеревоУслугПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если Копирование Тогда
		
		МассивКопируемыхСтрок = Новый Массив();
		// Скопирована ветка л/с.
		Если Не ТекСтрока.ЛицевойСчет.Пустая() Тогда
			
			Для Каждого СтрокаПериода Из ТекСтрока.ПолучитьЭлементы() Цикл
				Для Каждого СтрокаУслуги Из СтрокаПериода.ПолучитьЭлементы() Цикл
					ДопПараметры                 = Новый Структура("ЛицевойСчет, МесяцНачисления, Услуга, УслугаОснование, ТипНачисления");
					ДопПараметры.ЛицевойСчет     = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка");
					ДопПараметры.МесяцНачисления = СтрокаПериода.МесяцНачисления;
					ДопПараметры.Услуга          = СтрокаУслуги.Услуга;
					ДопПараметры.УслугаОснование = СтрокаУслуги.УслугаОснование;
					ДопПараметры.ТипНачисления   = СтрокаУслуги.ТипНачисления;
					МассивКопируемыхСтрок.Добавить(ДопПараметры);
				КонецЦикла;
			КонецЦикла;
			
			// Скопирована ветка дата.
		ИначеЕсли ТекСтрока.МесяцНачисления <> Дата(1,1,1) Тогда
			
			Для Каждого СтрокаУслуги Из ТекСтрока.ПолучитьЭлементы() Цикл
				ДопПараметры = Новый Структура("ЛицевойСчет, МесяцНачисления, Услуга, УслугаОснование, ТипНачисления");
				ДопПараметры.ЛицевойСчет     = ТекСтрока.ПолучитьРодителя().ЛицевойСчет;
				ДопПараметры.МесяцНачисления = Дата(1,1,1);
				ДопПараметры.Услуга          = СтрокаУслуги.Услуга;
				ДопПараметры.УслугаОснование = СтрокаУслуги.УслугаОснование;
				ДопПараметры.ТипНачисления   = СтрокаУслуги.ТипНачисления;
				МассивКопируемыхСтрок.Добавить(ДопПараметры);
			КонецЦикла;
			
			// Скопирована строка услуга.
		ИначеЕсли Не ТекСтрока.Услуга.Пустая() Тогда
			// Скопирована обычная услуга, зависимая или составная.
			ВеткаРодитель = ТекСтрока.ПолучитьРодителя();
			Если ВеткаРодитель.Услуга.Пустая() Тогда
				ДопПараметры = Новый Структура("ЛицевойСчет, МесяцНачисления, Услуга, УслугаОснование, ТипНачисления");
				ДопПараметры.ЛицевойСчет     = ВеткаРодитель.ПолучитьРодителя().ЛицевойСчет;
				ДопПараметры.МесяцНачисления = ВеткаРодитель.МесяцНачисления;
				ДопПараметры.Услуга          = ТекСтрока.Услуга;
				ДопПараметры.УслугаОснование = ТекСтрока.УслугаОснование;
				ДопПараметры.ТипНачисления   = ТекСтрока.ТипНачисления;
				МассивКопируемыхСтрок.Добавить(ДопПараметры);
			Иначе // Скопирована составляющая услуга(строка в ветке составной услуги).
				ДопПараметры = Новый Структура("ЛицевойСчет, МесяцНачисления, Услуга, УслугаОснование, ТипНачисления");
				ДопПараметры.ЛицевойСчет     = ВеткаРодитель.ПолучитьРодителя().ПолучитьРодителя().ЛицевойСчет;
				ДопПараметры.МесяцНачисления = ВеткаРодитель.ПолучитьРодителя().МесяцНачисления;
				ДопПараметры.Услуга          = ТекСтрока.Услуга;
				ДопПараметры.УслугаОснование = ТекСтрока.УслугаОснование;
				ДопПараметры.ТипНачисления   = ТекСтрока.ТипНачисления;
				МассивКопируемыхСтрок.Добавить(ДопПараметры);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого КопируемаяСтрока Из МассивКопируемыхСтрок Цикл
			ОбработатьВыборУслуг(КопируемаяСтрока.Услуга, КопируемаяСтрока);
		КонецЦикла;
		
		Отказ = Истина;
		
	Иначе
		
		Отказ = Истина;
		ДопПараметры = Новый Структура("ЛицевойСчет, МесяцНачисления, Услуга", Неопределено, Неопределено, Неопределено);
		
		Если Не ТекСтрока = Неопределено И ЗначениеЗаполнено(ТекСтрока.ЛицевойСчет) Тогда
			ПараметрыОткрытия = Новый Структура("ЛицевойСчет", ТекСтрока.ЛицевойСчет);
			ФормаВыбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора", ПараметрыОткрытия);
		Иначе
			ФормаВыбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора");
		КонецЕсли;
		
		ФормаВыбора.ВладелецФормы = ЭтаФорма;
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборЛицевогоСчета", ЭтаФорма, ДопПараметры);
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ДеревоУслугПередНачаломДобавления()

&НаКлиенте
// Обработчик события "ПередУдалением" поля "ДеревоУслуг".
Процедура ДеревоУслугПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если НЕ Родитель = Неопределено Тогда
		СпособРасчетаУслуги = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Родитель.Услуга, "СпособРасчета");
		Если СпособРасчетаУслуги = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика")
			ИЛИ СпособРасчетаУслуги = 
					ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" поля "ДеревоУслуг".
Процедура ДеревоУслугПослеУдаления(Элемент)
	
	// Пересчитаем номера строк в дереве.
	ПересчитатьНомераСтрок();
	ПересчитатьИтоговыеСтроки();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" поля "ДеревоУслуг".
Процедура ДеревоУслугПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьДанныеОТекущейСтрокеВХранилище(Элемент.ТекущаяСтрока);
	
	Если ТекущиеДанные.СуммаЛьготы = 0 Тогда
		Элементы.ДеревоУслугЛьготнаяКатегория.ТолькоПросмотр = Истина;
		Элементы.ДеревоУслугЛьготник.ТолькоПросмотр          = Истина;
	Иначе
		Элементы.ДеревоУслугЛьготнаяКатегория.ТолькоПросмотр = Ложь;
		Элементы.ДеревоУслугЛьготник.ТолькоПросмотр          = Ложь;
	КонецЕсли;

	ТекущиеДанные.МесяцСтрокой = КВП_РаботаСДиалогами.ПолучитьПредставлениеМесяца(ТекущиеДанные.МесяцНачисления);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля "ДеревоУслуг".
Процедура ДеревоУслугПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	ТекВетка = Элемент.ТекущиеДанные;
	
	Если ИзмениласьУслугаВСтрокеДерева(ТекВетка.Услуга) Тогда //изменили значение услуги
		
		Если Не ТекВетка.СуммаНачисления = 0
		 ИЛИ Не ТекВетка.СуммаЛьготы = 0
		 ИЛИ Не ТекВетка.СуммаПени = 0
		 ИЛИ Не ТекВетка.Начислено = 0
		 ИЛИ Не ТекВетка.ТекущийРасчет = 0
		 ИЛИ Не ТекВетка.СуммаПерерасчета = 0 Тогда
			
			ДопПараметры       = Новый Структура("НоваяСтрока, ТекВетка, ТекущаяСтрока", НоваяСтрока, ТекВетка, ТекущаяСтрока);
			ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоУслугПриОкончанииРедактированияЗавершение", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещения, "Очистить данные по предыдущей услуге?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДеревоУслугПриОкончанииРедактированияФрагмент(НоваяСтрока, ТекущаяСтрока);
	
КонецПроцедуры // ДеревоУслугПриОкончанииРедактирования()

&НаКлиенте
// Процедура-обработчик результат вопроса, вызванного в процедуре "ДеревоУслугПриОкончанииРедактирования()".
Процедура ДеревоУслугПриОкончанииРедактированияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекВетка = ДополнительныеПараметры.ТекВетка;
		ТекВетка.СуммаНачисления  = 0;
		ТекВетка.ТипНачисления    = ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипНачисления.ПустаяСсылка");
		ТекВетка.СуммаЛьготы      = 0;
		ТекВетка.СуммаПени        = 0;
		ТекВетка.Начислено        = 0;
		ТекВетка.ТекущийРасчет    = 0;
		ТекВетка.СуммаПерерасчета = 0;
	КонецЕсли;
	
	ДеревоУслугПриОкончанииРедактированияФрагмент(ДополнительныеПараметры.НоваяСтрока,
												  ДополнительныеПараметры.ТекущаяСтрока);
	
КонецПроцедуры // ДеревоУслугПриОкончанииРедактированияЗавершение()

&НаКлиенте
// Продолжение процедуры "ДеревоУслугПриОкончанииРедактирования()".
Процедура ДеревоУслугПриОкончанииРедактированияФрагмент(Знач НоваяСтрока, Знач ТекущаяСтрока)
	
	ОбработатьОкончаниеРедактированияДереваНаСервере(ТекущаяСтрока);
	
	Если НоваяСтрока Тогда
		ПересчитатьНомераСтрок();
		ПересчитатьИтоговыеСтроки();
	КонецЕсли;
	
	ЗаполнитьДопДанныеВСтроке(ТекущаяСтрока);
	ЗаполнитьДанныеДляУсловногоОформления(ТекущаяСтрока);
	
КонецПроцедуры // ДеревоУслугПриОкончанииРедактированияФрагмент()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДеревоУслугКвартира".
Процедура ДеревоУслугКвартираНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДеревоУслугВладелец".
Процедура ДеревоУслугВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДеревоУслугЛицевойСчет".
Процедура ДеревоУслугЛицевойСчетПриИзменении(Элемент)
	
	ОчиститьПоля(Элементы.ДеревоУслуг.ТекущиеДанные);
	ЗаполнитьДопДанныеВСтроке(Элементы.ДеревоУслуг.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДеревоУслугСуммаЛьготы".
//
Процедура ДеревоУслугСуммаЛьготыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоУслуг.ТекущиеДанные;
	Если ТекущиеДанные.СуммаЛьготы = 0 Тогда
		Элементы.ДеревоУслугЛьготнаяКатегория.ТолькоПросмотр = Истина;
		Элементы.ДеревоУслугЛьготник.ТолькоПросмотр          = Истина;
		ОчиститьПоля(ТекущиеДанные);
	Иначе
		Элементы.ДеревоУслугЛьготнаяКатегория.ТолькоПросмотр = Ложь;
		Элементы.ДеревоУслугЛьготник.ТолькоПросмотр          = Ложь;
	КонецЕсли;
	
	ДеревоУслугСуммаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" суммируемых полей дерева.
//
Процедура ДеревоУслугСуммаПриИзменении(Элемент)
	
	Если Объект.ВариантКорректировкиУслуг = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ОсновныеИЗависимые") Тогда
		
		Если Элементы.ДеревоУслуг.ТекущиеДанные.УслугаОснование.Пустая() Тогда
			
			ТекущаяСтрока = Элементы.ДеревоУслуг.ТекущаяСтрока;
			Сумма = СтрЗаменить(Элемент.Имя, "ДеревоУслуг", "");
			ДопПараметры       = Новый Структура("ТекущаяСтрока, Сумма", ТекущаяСтрока, Сумма);
			ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоУслугСуммаПриИзмененииОкончание", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещения, "Пересчитать суммы зависимых услуг?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДеревоУслугМесяцСтрокой".
Процедура ДеревоУслугМесяцСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоУслуг.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ТекущиеДанные.МесяцНачисления;
	
	ПараметрыФормы     = Новый Структура("Значение, РежимВыбораПериода, ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоУслугМесяцСтрокойНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные));
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
				 ПараметрыФормы,
				 ЭтаФорма,,,,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДеревоУслугМесяцСтрокойНачалоВыбора()

&НаКлиенте
// Обработчик результата выбора, вызванного в процедуре "ДеревоУслугМесяцСтрокойНачалоВыбора()".
Процедура ДеревоУслугМесяцСтрокойНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		ТекущиеДанные.МесяцНачисления = ВыбранноеЗначение;
		ТекущиеДанные.МесяцСтрокой = КВП_РаботаСДиалогами.ПолучитьПредставлениеМесяца(ТекущиеДанные.МесяцНачисления);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ДеревоУслугМесяцСтрокойНачалоВыбораЗавершение()

&НаКлиенте
// Обработчик события "Регулирование" поля "ДеревоУслугМесяцСтрокой".
Процедура ДеревоУслугМесяцСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоУслуг.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ДобавитьМесяц(КонецМесяца(ТекущиеДанные.МесяцНачисления), Направление);
	
	ТекущиеДанные.МесяцНачисления = Значение;
	ТекущиеДанные.МесяцСтрокой = КВП_РаботаСДиалогами.ПолучитьПредставлениеМесяца(ТекущиеДанные.МесяцНачисления);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДеревоУслугУслуга".
Процедура ДеревоУслугУслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоУслуг.ТекущиеДанные;
	
	Если Объект.УдалитьКорректировкаНормативныхНачисленийПоПУ Тогда 
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураОтбора = Новый Структура("СпособРасчета", мСписокЗначенийСпособаРасчетаУслуги);
		ФормаВыбора = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора",
						Новый Структура("Отбор, ТекущаяСтрока", СтруктураОтбора,
										?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Услуга)), Элемент);
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДеревоУслугУслуга".
Процедура ДеревоУслугУслугаПриИзменении(Элемент)
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		
		ТекущиеДанные = Элементы.ДеревоУслуг.ТекущиеДанные;
		
		Если ТекущиеДанные.Услуга = УслугаДобровольногоСтрахования Тогда
			ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("По услуге добровольного страхования нельзя корректировать начисления.");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДеревоУслугЛьготник".
Процедура ДеревоУслугЛьготникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоУслуг.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Владелец", ОпределитьЛицевойСчет(ТекущиеДанные));
	
	ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Жильцы.ФормаВыбора", 
								Новый Структура("ТекущаяСтрока, Отбор", ТекущиеДанные.Льготник, СтруктураОтбора), Элемент);
	ФормаВыбора.Открыть();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.Проведен Тогда
		ТекстВопроса = "Автоматически заполнить документ можно только после отмены его проведения.
						|Выполнить отмену проведения документа?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаКомандаЗаполнить", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьПродолжение();
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Обработчик команды "ДеревоУслугСортироватьПоВозрастанию".
Процедура ДеревоУслугСортироватьПоВозрастанию(Команда)
	
	СортироватьТЧНаСервере("ДеревоУслуг", Элементы.ДеревоУслуг.ТекущийЭлемент.Имя, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДеревоУслугСортироватьПоУбыванию".
Процедура ДеревоУслугСортироватьПоУбыванию(Команда)
	
	СортироватьТЧНаСервере("ДеревоУслуг", Элементы.ДеревоУслуг.ТекущийЭлемент.Имя, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "КомандаЗаполнить()".
Процедура ОбработатьРезультатВопросаКомандаЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Проведен = Ложь;
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	Иначе
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаКомандаЗаполнить()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнить()".
Процедура КомандаЗаполнитьПродолжение()
	
	Если Объект.Корректировки.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаКомандаЗаполнитьЗавершение", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьТаблицуКорректировки(Ложь);
	
КонецПроцедуры // КомандаЗаполнитьПродолжение()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "КомандаЗаполнитьПродолжение()".
Процедура ОбработатьРезультатВопросаКомандаЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса<> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуКорректировки(Ложь);
	
КонецПроцедуры // ОбработатьРезультатВопросаКомандаЗаполнитьЗавершение()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнитьПродолжение()".
Процедура ЗаполнитьТаблицуКорректировки(ИспользоватьФормуОтбора)
	
	ЗаполнятьТЧ = Истина;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетКомиссииБанка") Тогда
		
		Если Объект.Услуга.Пустая() Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Перед заполнением необходимо выбрать услугу!");
			ЗаполнятьТЧ = Ложь;
			
		ИначеЕсли НЕ УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьЗначениеРеквизита(Объект.Услуга, "СпособРасчета") =
															ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.КомиссияБанка") Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Способ расчета выбранной услуги отлична от ""Комиссия банка""!");
			ЗаполнятьТЧ = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗаполнятьТЧ Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьФормуОтбора Тогда
		
		СтруктураПараметров = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
		
		СтруктураПараметров.Вставить("НачПериодЛС"               , НачалоМесяца(Объект.Дата));
		СтруктураПараметров.Вставить("КонПериодЛС"               , Объект.Дата);
		СтруктураПараметров.Вставить("Организация"               , Объект.Организация);
		СтруктураПараметров.Вставить("ТипОбъекта"                , "ЛицевыеСчета");
		СтруктураПараметров.Вставить("ТипЗначОбъекта"            , "ЛицевыеСчета");
		СтруктураПараметров.Вставить("ОбъектЛС"                  , Объект.Объект);
		СтруктураПараметров.Вставить("ЗданияКвартиры"            , Объект.Объект);
		СтруктураПараметров.Вставить("УслугаДляОтбора"           , Объект.Услуга);
		
		ОписаниеЗавершенияВыбора = Новый ОписаниеОповещения("ОкончаниеВыбораПолучателейУслуг", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеЗавершенияВыбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе
		
		ЗаполнитьТабличнуюЧастьНаСервере(Объект.Объект);
		
		ЗаполнитьДеревоУслугНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицуКорректировки()

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьИспользоватьОтбор".
Процедура КомандаЗаполнитьИспользоватьОтбор(Команда)
	
	Если Объект.Проведен Тогда
		ТекстВопроса = "Автоматически заполнить документ можно только после отмены его проведения. 
						|Выполнить отмену проведения документа?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаКомандаЗаполнитьИспользоватьОтбор", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьИспользоватьОтборПроверитьКоличествоСтрок();
	
КонецПроцедуры // КомандаЗаполнитьИспользоватьОтбор()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "КомандаЗаполнитьИспользоватьОтбор()".
Процедура ОбработатьРезультатВопросаКомандаЗаполнитьИспользоватьОтбор(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Проведен = Ложь;
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	Иначе
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьИспользоватьОтборПроверитьКоличествоСтрок();
	
КонецПроцедуры // ОбработатьРезультатВопросаКомандаЗаполнитьИспользоватьОтбор()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнитьИспользоватьОтбор()".
Процедура КомандаЗаполнитьИспользоватьОтборПроверитьКоличествоСтрок()
	
	Если Объект.Корректировки.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьИспользоватьОтборЗавершение", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьТаблицуКорректировки(Истина);
	
КонецПроцедуры // КомандаЗаполнитьИспользоватьОтборПроверитьКоличествоСтрок()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "КомандаЗаполнитьИспользоватьОтборФрагмент1()".
Процедура КомандаЗаполнитьИспользоватьОтборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуКорректировки(Истина);
	
КонецПроцедуры // КомандаЗаполнитьИспользоватьОтборЗавершение()

&НаСервере
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнитьПродолжение()".
//
Процедура ОкончаниеВыбораПолучателейУслуг(СписокВыбранныхОбъектов, ДополнительныеПараметры) Экспорт
	
	// Если список объектов не получен, обрабатывать выбор не нужно.
	Если Не ТипЗнч(СписокВыбранныхОбъектов) = Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений") Тогда
		
		Объект.Корректировки.Очистить();
		
		Для Каждого ТекущийОбъект Из СписокВыбранныхОбъектов Цикл
			
			СоставляющиеУслуги = КешСоставныхУслуг.НайтиСтроки(Новый Структура("СоставнаяУслуга", Объект.Услуга));
			
			Если СоставляющиеУслуги.Количество() > 0 Тогда
				
				Для Каждого Строка Из СоставляющиеУслуги Цикл
					
					НоваяСтрока = Объект.Корректировки.Добавить();
					НоваяСтрока.ЛицевойСчет     = ТекущийОбъект.Значение;
					НоваяСтрока.Услуга          = Объект.Услуга;
					НоваяСтрока.МесяцНачисления = КонецМесяца(Объект.Дата);
					НоваяСтрока.СоставнаяУслуга = Строка.СоставляющаяУслуга;
					
				КонецЦикла;
				
			Иначе
				
				НоваяСтрока = Объект.Корректировки.Добавить();
				НоваяСтрока.ЛицевойСчет     = ТекущийОбъект.Значение;
				НоваяСтрока.Услуга          = Объект.Услуга;
				НоваяСтрока.МесяцНачисления = КонецМесяца(Объект.Дата);
				
				
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.УдалитьУчитыватьЗависимыеУслуги Тогда
			ТаблицаКорректировки = ДополнитьТаблицуКорректировкиЗависимымиУслугамиНаСервере(Объект.Корректировки.Выгрузить());
			Объект.Корректировки.Загрузить(ТаблицаКорректировки);
		КонецЕсли;
		
	Иначе
		// Для других видов - произведем заполнением с учетом назначенных услуг.
		ЗаполнитьТабличнуюЧастьНаСервере(СписокВыбранныхОбъектов);
	КонецЕсли;
	
	ЗаполнитьДеревоУслугНаСервере();
	
КонецПроцедуры

&НаСервере
//Процедура дополяет таблицу корректировки зависимыми услугами
//
Функция ДополнитьТаблицуКорректировкиЗависимымиУслугамиНаСервере(ТаблицаКорректировки)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ТаблицаКорректировки = ДокументОбъект.ДополнитьТаблицуКорректировкиЗависимымиУслугами(ТаблицаКорректировки);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Возврат ТаблицаКорректировки
	
КонецФункции

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьПоДокументуОплаты".
Процедура КомандаЗаполнитьПоДокументуОплаты(Команда)
	
	Если Объект.Проведен Тогда
		ТекстВопроса = "Автоматически заполнить документ можно только после отмены его проведения. Выполнить отмену проведения документа?";
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьПоДокументуОплатыЗавершениеОтменаПроведения", ЭтотОбъект), 
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьПоДокументуОплатыФрагментПроверитьКоличествоСтрок();
	
КонецПроцедуры // КомандаЗаполнитьПоДокументуОплаты()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "КомандаЗаполнитьПоДокументуОплаты()".
Процедура КомандаЗаполнитьПоДокументуОплатыЗавершениеОтменаПроведения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	Иначе
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьПоДокументуОплатыФрагментПроверитьКоличествоСтрок();
	
КонецПроцедуры // КомандаЗаполнитьПоДокументуОплатыЗавершениеОтменаПроведения()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнитьПоДокументуОплаты()".
Процедура КомандаЗаполнитьПоДокументуОплатыФрагментПроверитьКоличествоСтрок()
	
	Если Объект.Корректировки.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьПоДокументуОплатыЗавершение", ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	КомандаЗаполнитьПоДокументуОплатыФрагмент();
	
КонецПроцедуры // КомандаЗаполнитьПоДокументуОплатыФрагментПроверитьКоличествоСтрок()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "КомандаЗаполнитьПоДокументуОплатыФрагментПроверитьКоличествоСтрок()".
Процедура КомандаЗаполнитьПоДокументуОплатыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Объект.Корректировки.Очистить();
	
	КомандаЗаполнитьПоДокументуОплатыФрагмент();
	
КонецПроцедуры // КомандаЗаполнитьПоДокументуОплатыЗавершение()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "КомандаЗаполнитьПоДокументуОплатыЗавершение()".
Процедура КомандаЗаполнитьПоДокументуОплатыФрагмент()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗаполнитьПоДокументуОплатыВыборДокументаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.КВП_РегистрацияОплаты.ФормаВыбора", , Элементы.ДеревоУслугКомандаЗаполнитьПоДокументуОплаты, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // КомандаЗаполнитьПоДокументуОплатыФрагмент()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "КомандаЗаполнитьПоДокументуОплатыФрагмент()".
Процедура КомандаЗаполнитьПоДокументуОплатыВыборДокументаЗавершение(ПолученныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если Не ПолученныйДокумент = Неопределено Тогда
		
		ЗаполнитьДокументНаОснованииНаСервере(ПолученныйДокумент);
		
		ЗаполнитьДеревоУслугНаСервере();
		
		ВывестиКомиссиюБанка();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьПоДокументуОплатыВыборДокументаЗавершение()

&НаКлиенте
// Обработчик команды "КомандаРассчитать".
Процедура КомандаРассчитать(Команда)
	
	ЗаполнитьТЧПоДереву();
	
	ТекстВопроса = "Перед рассчетом сумм пересчета документ необходимо записать. Записать?";
	
	ПоказатьВопрос(Новый ОписаниеОповещения("КомандаРассчитатьЗавершение", ЭтотОбъект),
				   ТекстВопроса,
				   РежимДиалогаВопрос.ДаНет, ,
				   КодВозвратаДиалога.Да);
	
КонецПроцедуры // КомандаРассчитать()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "КомандаРассчитать()".
Процедура КомандаРассчитатьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ПроверитьПравильностьЗаполненияТЧ(Отказ);
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	
	РассчитатьДокументНаСервере();
	
	ЗаполнитьДеревоУслугНаСервере();
	
КонецПроцедуры // КомандаРассчитатьЗавершение()

&НаКлиенте
// Обработчик команды "КомандаСвернуть".
Процедура КомандаСвернуть(Команда)
	
	Для Каждого ТекСтрока Из ДеревоУслуг.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = ТекСтрока.ПолучитьИдентификатор();
		Элементы.ДеревоУслуг.Свернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаРазвернуть".
Процедура КомандаРазвернуть(Команда)
	
	Для Каждого ТекСтрока Из ДеревоУслуг.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = ТекСтрока.ПолучитьИдентификатор();
		Элементы.ДеревоУслуг.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

&НаКлиенте
// Обработчик команды "УстановитьТипНачисления".
Процедура УстановитьТипНачисления(Команда)
	
	СписокЗначений = ПолучитьСписокЗначенийТиповНачисленияНаСервере();
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаУстановитьТипНачисленияЗавершение", ЭтотОбъект);
	
	СписокЗначений.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выбор Типа начисления");
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
