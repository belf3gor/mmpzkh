
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мУдалятьДвижения Экспорт;                      // Хранит признак новый ли это документ.
Перем мНастройкиУчетнойПолитикиТСЖ Экспорт;          // Хранит настройки учетной политики по ТСЖ.
Перем СпСпособовРасчета;                             // Хранит список способов расчета услуг.
Перем мПроцентКомиссииБанка Экспорт;                 // Хранит процент комиссии банка.
Перем УказыватьКоличествоПрожИЗарегЧислами;          // Хранит настройку УказыватьКоличествоПрожИЗарегЧислами.
Перем ДлинаСуток;                                    // Хранит длину суток в секундах.
Перем ВестиУчетНачисленийПоДобровольномуСтрахованию; // Хранит признак того, что ведется учет по добровольному страхованию.
Перем УслугаДобровольногоСтрахования;                // Хранит ссылку на услугу добровольного страхования.
Перем мЗависимыеУслугиПоОрганизациям;                // Признак начисления зависимых услуг по другой организации.
Перем мЗависимыеУслугиПоСобственномуНормативу;       // Способ начисления зависимых услуг.

#Область ПроцедурыИФункцииОбщегоНазначения

// Формирует для дальнейшего заполнения таблицу с лицевыми счетами, услугами и способами расчета.
//
// Параметры
//  ДатаНач        – Дата – начало периода, на который собираются сведения.
//  ДатаКон        – Дата – конец периода, на который собираются сведения.
//  Услуга         – СправочникСсылка.КВП_Услуги - услуга, на которую производится начисление.
//  СписокОбъектов – СправочникСсылка.<Имя справочника> - элемент справочника или список значений.
//
// Возвращаемое значение:
//  ТаблицаЗначений – таблица с полями Объект, Услуга, Способ расчета и пр.
//
Функция СформироватьТаблицуЛицевыхСчетовУслуг(ДатаНач, ДатаКон, Услуга, СписокОбъектов)
	
	// Алгоритм работает следующим образом:
	// 1. Подготавливаем список объектов начисления.
	// 2. Из них выбираем лицевые счета и здания.
	// 3. Для видов операций "ВременноеОтсутствие" / "ПерерасчетПоПлощади" выберем только те лицевые счета,
	//    по которым были изменения по жильцам / площади в периоде.
	// 4. Подготовим список услуг:
	//    4.1. Для вида операции "ПерерасчетПоПлощади" подготовим список услуг, у которых способ расчета 
	//         или норматив, зависит от указанного вида площади.
	//    4.2 Для остальных видов операций в список услуг включаем услугу, если она заполнена в шапке.
	// 5. По подготовленному списку лицевых счетов и списку услуг получаем таблицу назначенных услуг.
	// 6. Если выполняется корректировка только ЗУ, то:
	//    6.1. Получаем таблицу зависимых услуг в разрезе зданий.
	//    6.2. Для услуг-оснований по таблице назначенных услуг берем все ЗУ из таблицы зависимых услуг.
	// 7. Дополняем данными по ЗУ, рассчитываемым по собственным нормативам.
	
	// 1. Подготавливаем список объектов начисления.
	ОбъектыНачисления = КВП_СформироватьТаблицуОбъектовНачисления(ДатаКон, СписокОбъектов);
	
	Если НЕ СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат ОбъектыНачисления;
	КонецЕсли;
	
	МассивУслугПерерасчета = мНастройкиУчетнойПолитикиТСЖ["УслугиНеПодлежащиеПерерасчету"].Получить();
	
	// 2. Из них выбираем лицевые счета и здания.
	СписокЛицевыхСчетов = Новый СписокЗначений();
	СписокЗданий        = Новый СписокЗначений();
	Для Каждого ТекОбъект Из ОбъектыНачисления Цикл
		Если ТекОбъект.ТипОбъекта = "ЛицевыеСчета" Тогда
			СписокЛицевыхСчетов = ТекОбъект.СписокОбъектов.Скопировать();
		ИначеЕсли ТекОбъект.ТипОбъекта = "Здания" Тогда
			СписокЗданий = ТекОбъект.СписокОбъектов.Скопировать();
		КонецЕсли;
	КонецЦикла;
	
	СписокУслуг = Неопределено;
	
	// формирование результирующей таблицы
	ТаблицаЛицевыхСчетовУслуг = Новый ТаблицаЗначений();
	ТаблицаЛицевыхСчетовУслуг.Колонки.Добавить("Услуга",               Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаЛицевыхСчетовУслуг.Колонки.Добавить("Объект",               Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаЛицевыхСчетовУслуг.Колонки.Добавить("СпособРасчета",        Новый ОписаниеТипов("ПеречислениеСсылка.КВП_СпособыРасчета"));
	ТаблицаЛицевыхСчетовУслуг.Колонки.Добавить("ЗависимаяПоНормативу", Новый ОписаниеТипов("Булево"));
	
	// 3. Для видов операций "ВременноеОтсутствие" / "ПерерасчетПоПлощади" выберем только те лицевые счета,
	//    по которым были изменения по жильцам / площади в периоде.
	Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ВременноеОтсутствие Тогда
		
		ВыборкаПоРегиструПерерасчета = ПолучитьТаблицуЛицевыхСчетовВременноеОтсутствие(СписокЛицевыхСчетов);
		
		Если ВыборкаПоРегиструПерерасчета.Количество() > 0 Тогда
			СписокЛицевыхСчетов = ВыборкаПоРегиструПерерасчета.ВыгрузитьКолонку("ЛицевойСчет");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не обнаружены данные для корректировки начислений!");
			Возврат ТаблицаЛицевыхСчетовУслуг;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПлощади Тогда
		
		ВыборкаПоИзменениюПлощадей = ПолучитьТаблицуЛицевыхСчетовПерерасчетПоПлощади(СписокЛицевыхСчетов);
		
		Если ВыборкаПоИзменениюПлощадей.Количество() > 0 Тогда
			СписокЛицевыхСчетов = ВыборкаПоИзменениюПлощадей.ВыгрузитьКолонку("ЛицевойСчет");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не обнаружены данные для корректировки начислений!");
			Возврат ТаблицаЛицевыхСчетовУслуг;
		КонецЕсли;
		
		//    4.1. Для вида операции "ПерерасчетПоПлощади" подготовим список услуг, у которых способ расчета 
		//         или норматив, зависит от указанного вида площади.
		
		// Необходимо сформировать список услуг, которые имеют способ расчета по площади и по нормам потребления. 
		// Услуги со способом расчета "По нормам потребления" необходимо отобрать только те, у которых в нормах 
		// потребления в качестве основания или в характеристиках указана "По площади".
		ТаблицаЛицевыхСчетов = ПолучитьТаблицуЛицевыхСчетовИУслугДляПерерасчетаПоПлощади(ВыборкаПоИзменениюПлощадей);
		Если ТаблицаЛицевыхСчетов.Количество() > 0 Тогда
			СписокЛицевыхСчетов = ТаблицаЛицевыхСчетов.ВыгрузитьКолонку("ЛицевойСчет");
			СписокУслуг         = ТаблицаЛицевыхСчетов.ВыгрузитьКолонку("Услуга");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не обнаружены данные для корректировки начислений!");
			Возврат ТаблицаЛицевыхСчетовУслуг;
		КонецЕсли;
		
	КонецЕсли;
	
	// условие на услугу
	ТекстУсловияНаУслугу  = "";
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПлощади Тогда
		
		ТекстУсловияНаУслугу = "СпособРасчета В (&СпособРасчетаПоПлощади) И НЕ Услуга В(&МассивУслугПерерасчета)";
		
		Если НЕ ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ПустаяСсылка() Тогда
			ТекстУсловияНаУслугу = ТекстУсловияНаУслугу 
								 + " И ((ВидПлощади = &ВидПлощади И СпособРасчета =
								   |ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
								   | ИЛИ СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления))";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ВременноеОтсутствие Тогда
		
		СпСпособовРасчетаИзменениеЛС = Новый СписокЗначений;
		СпСпособовРасчетаИзменениеЛС.Добавить(Перечисления.КВП_СпособыРасчета.ПоКоличествуЖильцов);
		СпСпособовРасчетаИзменениеЛС.Добавить(Перечисления.КВП_СпособыРасчета.ПоНормамПотребления);
		
		// Добавим также способы расчета по показаниям счетчика, для перерасчета начислений по нормативам
		// услуг, рассчитываемых по показаниям.
		// В таблице лицевых счетов-услуг будут избыточные данные по услугам, рассчитываемым по показаниям.
		// Но избыточные данные отсекутся на следующем этапе, когда для заполнения ТЧ будут взяты только те л/с,
		// по которым имеются начисления по норме при отсутствии показаний или действующего ПУ.
		//
		СпСпособовРасчетаИзменениеЛС.Добавить(Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика);
		СпСпособовРасчетаИзменениеЛС.Добавить(Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме);
		
		ТекстУсловияНаУслугу = "СпособРасчета В (&СпСпособовРасчетаИзменениеЛС)
								|И НЕ Услуга В(&МассивУслугПерерасчета)";
		
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетКомиссииБанка Тогда
		
		ТекстУсловияНаУслугу = "СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.КомиссияБанка)";
		
	Иначе
		
		ТекстУсловияНаУслугу = "НЕ СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.КомиссияБанка) 
								|И НЕ Услуга В(&МассивУслугПерерасчета)";
		
	КонецЕсли;
	
	//    4.2 Для остальных видов операций в список услуг включаем услугу, если она заполнена в шапке.
	Если ЗначениеЗаполнено(Услуга) И СписокУслуг = Неопределено Тогда
		СписокУслуг = Новый СписокЗначений;
		СписокУслуг.Добавить(Услуга);
	КонецЕсли;
	
	// 5. По подготовленному списку лицевых счетов и списку услуг получаем таблицу назначенных услуг.
	
	СписокСпособовРасчета = Новый СписокЗначений;
	СписокСпособовРасчета.Добавить(Перечисления.КВП_СпособыРасчета.ПоПлощади);
	СписокСпособовРасчета.Добавить(Перечисления.КВП_СпособыРасчета.ПоНормамПотребления);
	
	ПараметрыДляЗапроса = Новый Структура;
	ПараметрыДляЗапроса.Вставить("СпСпособовРасчетаИзменениеЛС", СпСпособовРасчетаИзменениеЛС);
	ПараметрыДляЗапроса.Вставить("СпособРасчетаПоПлощади",       СписокСпособовРасчета);
	ПараметрыДляЗапроса.Вставить("ВидПлощади",                   ВидПлощади);
	ПараметрыДляЗапроса.Вставить("МассивУслугПерерасчета",       МассивУслугПерерасчета);
	ПараметрыДляЗапроса.Вставить("Организация",                  Организация);
	
	ВрТаблицаЛицевыхСчетовУслуг = КВП_ПолучитьТаблицуДействующихУслугВПериоде(ДатаКон, 
																			СписокЛицевыхСчетов,
																			СписокУслуг, 
																			ПараметрыДляЗапроса, 
																			ТекстУсловияНаУслугу);
	
	// 6. Если выполняется корректировка только ЗУ, то:
	Если ВариантКорректировкиУслуг = Перечисления.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ЗависимыеУслуги Тогда
		
		//    6.1. Получаем таблицу зависимых услуг в разрезе зданий.
		ТаблицаЗависимыхУслуг = СформироватьТаблицуЗависимыхУслуг(ДатаКон, , Организация, СписокЗданий);
		
		//    6.2. Для услуг-оснований по таблице назначенных услуг берем все ЗУ из таблицы зависимых услуг.
		Для Каждого ТекСтрока Из ВрТаблицаЛицевыхСчетовУслуг Цикл
		
			НайденныеЗависимостиУслуг = ТаблицаЗависимыхУслуг.НайтиСтроки(Новый Структура("УслугаОснование, Объект", 
																							ТекСтрока.Услуга,
																							ТекСтрока.ОбъектАдрес.Владелец));
			Для Каждого ТекЗависимость Из НайденныеЗависимостиУслуг Цикл
				
				НоваяСтрока = ТаблицаЛицевыхСчетовУслуг.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				
				НоваяСтрока.Услуга        = ТекЗависимость.Услуга;
				НоваяСтрока.СпособРасчета = ТекЗависимость.Услуга.СпособРасчета;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаЛицевыхСчетовУслуг = ВрТаблицаЛицевыхСчетовУслуг.Скопировать();
		ТаблицаЛицевыхСчетовУслуг.Колонки.Добавить("ЗависимаяПоНормативу", Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	
	// 7. Дополняем данными по ЗУ, рассчитываемым по собственным нормативам.
	
	// Проверяем настройку начисления зависимых услуг по собственному нормативу (задается в "Настройках параметров учета (ЖКХ)").
	// Если расчет ЗУ по собственным нормативам не ведется, то и добавлять больше ничего не нужно.
	// Кроме этого, начисления по ЗУ по собственным нормативам корректируются вместе с начислениями услуг-оснований.
	Если мЗависимыеУслугиПоСобственномуНормативу
	   И НЕ ВариантКорректировкиУслуг = Перечисления.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ЗависимыеУслуги
	   И НЕ ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка Тогда
		
		// ОСОБЕННОСТЬ:
		// 1. Т.к. назначение ЗУ не выполняется, то в общем запросе добавить начисления по ЗУ, произведенные по собственным 
		//    нормативам, не получится.
		// 2. Начисления ЗУ по собственному нормативу никак не выделяются в регистре (например, отдельным видом начисления),
		//    поэтому для выявления таких начислений используем ту же функцию определения периодов, когда хотя бы по одной из 
		//    услуг-оснований ЗУ нет действующих ИПУ.
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Период",              Дата);
		СтруктураПараметров.Вставить("Организация",         Организация);
		СтруктураПараметров.Вставить("СписокЗданий",        СписокЗданий);
		СтруктураПараметров.Вставить("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
		
		ТаблицаКорректировки = Корректировки.ВыгрузитьКолонки();
		ТаблицаКорректировки.Колонки.Добавить("Помещение", Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Помещения"));
		
		ТаблицаПериодовКорректировки = ПолучитьТаблицуПериодов();
		
		Для Каждого ПериодКорректировки Из ТаблицаПериодовКорректировки Цикл
		
			СтруктураПараметров.Вставить("НачалоПериода",   НачалоМесяца(ПериодКорректировки.ДатаИзменения));
			СтруктураПараметров.Вставить("КонецПериода",    КонецМесяца(ПериодКорректировки.ДатаИзменения));
			
			// Получим зависимые услуги.
			ТаблицаЗависимыхУслуг = СформироватьТаблицуЗависимыхУслуг(ДатаКон,
																	  //ВрТаблицаЛицевыхСчетовУслуг.ВыгрузитьКолонку("Услуга"),
																	  ,
																	  Организация,
																	  СписокЗданий, 
																	  СписокУслуг);
			
			// Получим периоды, в которых ЗУ по ПУ необходимо начислить по собственному нормативу.
			// Выполняем с помощью той же функции, что и используется при начислении таких ЗУ.
			ТаблицаПериодов = Документы.КВП_НачислениеУслуг.ПолучитьПериодыНачисленияЗависимыхУслугПоСобственномуНормативу(
																		ТаблицаКорректировки,
																		СтруктураПараметров, 
																		ТаблицаЗависимыхУслуг);
			
			// Дополним таблицу начислений начислениями по зависимым услугам.
			Для Каждого ТекПериод Из ТаблицаПериодов Цикл
				НоваяСтрока = ТаблицаЛицевыхСчетовУслуг.Добавить();
				НоваяСтрока.Объект               = ТекПериод.ЛицевойСчет;
				НоваяСтрока.ОбъектАдрес          = ТекПериод.Помещение;
				НоваяСтрока.ОбъектНаименование   = ТекПериод.ЛицевойСчет.Наименование;
				НоваяСтрока.Услуга               = ТекПериод.Услуга;
				НоваяСтрока.СпособРасчета        = ТекПериод.Услуга.СпособРасчета;
				НоваяСтрока.ЗависимаяПоНормативу = Истина;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаЛицевыхСчетовУслуг;
	
КонецФункции // СформироватьТаблицуЛицевыхСчетовУслуг()

// Функция возвращает таблицу лицевых счетов для перерасчета по временному отсутствию.
Функция ПолучитьТаблицуЛицевыхСчетовВременноеОтсутствие(СписокЛицевыхСчетов)
	
	ЗапросПоРегиструПерерасчета = Новый Запрос;
	Если УказыватьКоличествоПрожИЗарегЧислами Тогда
		
		ЗапросПоРегиструПерерасчета.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
		|ИЗ
		|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&ДатаКон, ЛицевойСчет В (&ЛицевыеСчета)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
		|ГДЕ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.Период >= &ДатаНач";
		
	Иначе
		
		ЗапросПоРегиструПерерасчета.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(СведенияОПроживающих.ЛицевойСчет, СведенияОЗарегистрированных.ЛицевойСчет) КАК ЛицевойСчет
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
		|			&ДатаДок,
		|			ЛицевойСчет В (&ЛицевыеСчета)
		|				И (ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон)) КАК СведенияОПроживающих
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|				&ДатаДок,
		|				ЛицевойСчет В (&ЛицевыеСчета)
		|					И (ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон)) КАК СведенияОЗарегистрированных
		|		ПО СведенияОПроживающих.ЛицевойСчет = СведенияОЗарегистрированных.ЛицевойСчет";
				
	КонецЕсли;
	
	ЗапросПоРегиструПерерасчета.УстановитьПараметр("ДатаНач",      НачалоМесяца(ДатаНач));
	ЗапросПоРегиструПерерасчета.УстановитьПараметр("ДатаКон",      КонецМесяца(ДатаКон));
	ЗапросПоРегиструПерерасчета.УстановитьПараметр("ДатаДок",      Новый Граница(Дата, ВидГраницы.Исключая));
	ЗапросПоРегиструПерерасчета.УстановитьПараметр("ЛицевыеСчета", СписокЛицевыхСчетов);
	
	Возврат ЗапросПоРегиструПерерасчета.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает таблицу периодов корректировки.
Функция ПолучитьТаблицуПериодов()
	
	// исходя из разности дат сформируем таблицу периодов
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ДатаИзменения", Новый ОписаниеТипов("Дата"));
	ТекМесяц = НачалоМесяца(ДатаНач);
	Пока ТекМесяц <= НачалоМесяца(ДатаКон) Цикл
		ТаблицаПериодов.Добавить().ДатаИзменения = ТекМесяц;
		ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

// Функция возвращает таблицу лицевых счетов для перерасчета по площади.
Функция ПолучитьТаблицуЛицевыхСчетовПерерасчетПоПлощади(СписокЛицевыхСчетов)
	
	ЗапросПоИзменениямПлощадей = Новый Запрос;
	ЗапросПоИзменениямПлощадей.УстановитьПараметр("ПериодКорректировки",   Новый Граница(НачалоМесяца(ДатаНач),
																							ВидГраницы.Исключая));
	ЗапросПоИзменениямПлощадей.УстановитьПараметр("ПериодКорректировкиЛС", НачалоМесяца(ДатаНач));
	ЗапросПоИзменениямПлощадей.УстановитьПараметр("Дата",                  КонецДня(Дата));
	ЗапросПоИзменениямПлощадей.УстановитьПараметр("СписокЛицевыхСчетов",   СписокЛицевыхСчетов);
	ЗапросПоИзменениямПлощадей.УстановитьПараметр("ВП",                    ВидПлощади);
	
	ЗапросПоИзменениямПлощадей.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПлощадьПомещения.Объект,
	|	ПлощадьПомещения.Площадь,
	|	ПлощадьПомещения.ВидПлощади
	|ПОМЕСТИТЬ втПлощадиНаПериодКорректировки
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&ПериодКорректировки, ВидПлощади = &ВП) КАК ПлощадьПомещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПлощадьПомещения.Объект,
	|	ПлощадьПомещения.Площадь,
	|	ПлощадьПомещения.ВидПлощади
	|ПОМЕСТИТЬ втПлощадиНаДатуДокумента
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Дата, ВидПлощади = &ВП) КАК ПлощадьПомещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЛицевыеСчета.ЛицевойСчет
	|ИЗ
	|	втПлощадиНаДатуДокумента КАК втПлощадиНаДатуДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиНаПериодКорректировки КАК втПлощадиНаПериодКорректировки
	|		ПО втПлощадиНаДатуДокумента.Объект = втПлощадиНаПериодКорректировки.Объект
	|			И втПлощадиНаДатуДокумента.ВидПлощади = втПлощадиНаПериодКорректировки.ВидПлощади
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|			ЛицевыеСчета.Объект КАК Объект
	|		ИЗ
	|			РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|					&ПериодКорректировки,
	|					ЛицевойСчет В (&СписокЛицевыхСчетов)
	|						И Действует) КАК ЛицевыеСчета
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЛицевыеСчета.ЛицевойСчет,
	|			ЛицевыеСчета.Объект
	|		ИЗ
	|			РегистрСведений.КВП_ЛицевыеСчета КАК ЛицевыеСчета
	|		ГДЕ
	|			ЛицевыеСчета.Период МЕЖДУ &ПериодКорректировкиЛС И &Дата
	|			И ЛицевыеСчета.ЛицевойСчет В(&СписокЛицевыхСчетов)
	|			И ЛицевыеСчета.Действует) КАК ЛицевыеСчета
	|		ПО втПлощадиНаДатуДокумента.Объект = ЛицевыеСчета.Объект
	|ГДЕ
	|	ЕСТЬNULL(втПлощадиНаДатуДокумента.Площадь, 1) <> ЕСТЬNULL(втПлощадиНаПериодКорректировки.Площадь, 1)";
	
	Возврат ЗапросПоИзменениямПлощадей.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает таблицу лицевых счетов и услуг для перерасчета по площади.
Функция ПолучитьТаблицуЛицевыхСчетовИУслугДляПерерасчетаПоПлощади(ВыборкаПоИзменениюПлощадей)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛицевыеСчета.ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыхСчетов
	|ИЗ
	|	&ВыборкаПоИзменениюПлощадей КАК ЛицевыеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&Дата,
	|			НормаПотребления.Основание = ЗНАЧЕНИЕ(Перечисление.КВП_ОснованияНормПотребления.Площадь)
	|				И НормаПотребления.ВидПлощади = &ВидПлощади
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						ТаблицаЛицевыхСчетов.ЛицевойСчет
	|					ИЗ
	|						втЛицевыхСчетов КАК ТаблицаЛицевыхСчетов)
	|				И &ТекстУсловияНаУслугу) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						ТаблицаЛицевыхСчетов.ЛицевойСчет
	|					ИЗ
	|						втЛицевыхСчетов КАК ТаблицаЛицевыхСчетов)
	|				И &ТекстУсловияНаУслугу) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_НормыПотребленияУслугХарактеристики.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.КВП_НормыПотребленияУслуг.Характеристики КАК КВП_НормыПотребленияУслугХарактеристики
	|		ГДЕ
	|			КВП_НормыПотребленияУслугХарактеристики.Имя = ""Площадь помещения""
	|			И КВП_НормыПотребленияУслугХарактеристики.Вид = &ВидПлощади) КАК НормыПотребленияУслугХарактеристики
	|		ПО КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления = НормыПотребленияУслугХарактеристики.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&Дата,
	|			Объект В
	|					(ВЫБРАТЬ
	|						ТаблицаЛицевыхСчетов.ЛицевойСчет
	|					ИЗ
	|						втЛицевыхСчетов КАК ТаблицаЛицевыхСчетов)
	|				И &ТекстУсловияНаУслугу
	|				И Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади)
	|				И Услуга.ВидПлощади = &ВидПлощади) КАК КВП_НазначенныеНачисленияСрезПоследних";
	
	Запрос.УстановитьПараметр("ВыборкаПоИзменениюПлощадей", ВыборкаПоИзменениюПлощадей);
	Запрос.УстановитьПараметр("Дата",                       КонецДня(Дата));
	Запрос.УстановитьПараметр("ВидПлощади",                 ВидПлощади);
	
	ТекстУсловияНаУслугу = "ИСТИНА";
	Если ЗначениеЗаполнено(Услуга) Тогда
		ТекстУсловияНаУслугу = "Услуга В ИЕРАРХИИ(&Услуга)";
		Запрос.УстановитьПараметр("Услуга", Услуга);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловияНаУслугу", ТекстУсловияНаУслугу);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуЛицевыхСчетовИУслугДляПерерасчетаПоПлощади()

// Функция определяет список видов начисления для отбора данных по начислениям.
Функция ПолучитьСписокВидовНачисленияДляКорректировки()
	
	// Определяем список видов начисления для отбора данных по начислениям.
	ВидыНачисления = Новый СписокЗначений;
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПроценту
	 ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка Тогда
	
		Если ВариантНачисления = Перечисления.УПЖКХ_ВариантыНачисленийДляПерерасчета.ТолькоНачисленияПоПоказаниямПУ Тогда
		
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоИПУ);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоОПУ);
			
		ИначеЕсли ВариантНачисления = Перечисления.УПЖКХ_ВариантыНачисленийДляПерерасчета.ТолькоНачисленияБезПоказанийПУ Тогда
			
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему);
			
		Иначе
			
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Начисление);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.ПерерасчетНачисления);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоИПУ);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоОПУ);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.СервисныеУслуги);
			ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.ФактическиеЗатраты);
			
		КонецЕсли;
		
	Иначе // Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ВременноеОтсутствие
		  // ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПлощади Тогда
		
		ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Начисление);
		ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.ПерерасчетНачисления);
		ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.СервисныеУслуги);
		ВидыНачисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.ФактическиеЗатраты);
		
	КонецЕсли;
	
	Возврат ВидыНачисления;
	
КонецФункции // ПолучитьСписокВидовНачисленияДляКорректировки()

// Функция определяет список видов раздела для отбора данных по начислениям.
Функция ПолучитьСписокРазделовУчетаДляКорректировки()
	
	ВидыРазделовУчета = Новый СписокЗначений;
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетКомиссииБанка Тогда
		
		ВидыРазделовУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.КомиссияБанка);
		
	Иначе
		
		ВидыРазделовУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг);
		
		Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПроценту
		 ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка Тогда
		
			ВидыРазделовУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидыРазделовУчета;
	
КонецФункции // ПолучитьСписокРазделовУчетаДляКорректировки()

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

// Заполняет табличную часть начислениями по лицевым счетам.
Процедура ЗаполнитьТабличнуюЧасть(СписокОбъектов) Экспорт
	
	// Алгоритм заполнения:
	// 1. Определяем список л/с и услуг для корректировки начислений.
	// 2. Определяем параметры отбора.
	// 3. Отбираем данные и заполняем табличную часть. При этом имеются особенности:
	//    - зависимые услуги, рассчитываемые по собственному нормативу, и услуги по ПУ, 
	//    рассчитанные по нормативу при отсутствии показаний/ИПУ, добавляются по периодам 
	//    их начисления.
	//    - начисления по пр. услугам добавляются без учета подпериодов начисления, 
	//    а относятся в целом на месяц начисления, подпадающий под корректировку.
	//    Возможно, это не совсем корректно, т.к. тот же перерасчет недопоставки начисления, 
	//    произведенного за полмесяца, после перерасчета записывается на полный месяц начисления.
	//    Т.е. начисление было с 15.01 по 31.01, произведена корректировка по недопоставке, 
	//    после проведения корректировка запишется с 01.01 по 31.01.
	
	Отказ = Ложь;
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = НачалоМесяца(ДатаНач);
	КонецПериода  = КонецМесяца(ДатаКон);
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПлощади
	   И ВидПлощади.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо выбрать вид площади!");
		Возврат;
	КонецЕсли;
	
	// 1. Определяем список л/с и услуг для корректировки начислений.
	
	ТаблицаНачислений = СформироватьТаблицуЛицевыхСчетовУслуг(НачалоПериода, КонецПериода, Услуга, СписокОбъектов);
	ТаблицаНачислений.Колонки.Добавить("Начислено");
	
	// 2. Определяем параметры отбора.
	
	// Определяем список видов раздела для отбора данных по начислениям.
	ВидыРазделовУчета = ПолучитьСписокРазделовУчетаДляКорректировки();
	
	// Определяем список видов начисления для отбора данных по начислениям.
	ВидыНачисления = ПолучитьСписокВидовНачисленияДляКорректировки();
	
	// 3. Отбираем данные и заполняем табличную часть.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНач",                                         НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаКон",                                         КонецМесяца(КонецПериода));
	Запрос.УстановитьПараметр("НачислятьЗависимыеУслугиПоСобственномуНормативу", мЗависимыеУслугиПоСобственномуНормативу);
	
	// Получаем услуги по ПУ, для которых на момент начисления имеются зависимые услуги.
	// Данный список услуг будем использовать для проверки начислений зависимых услуг по
	// собственному нормативу.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЗависимостиУслугСрезПоследних.Услуга КАК Услуга
	|ПОМЕСТИТЬ ВрЗависимыеУслугиПоСобственномуНормативу
	|ИЗ
	|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(&ДатаНач, УслугаОснование.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме))) КАК КВП_ЗависимостиУслугСрезПоследних
	|ГДЕ
	|	КВП_ЗависимостиУслугСрезПоследних.Действует
	|	И &НачислятьЗависимыеУслугиПоСобственномуНормативу
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЗависимостиУслуг.Услуга
	|ИЗ
	|	РегистрСведений.КВП_ЗависимостиУслуг КАК КВП_ЗависимостиУслуг
	|ГДЕ
	|	КВП_ЗависимостиУслуг.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_ЗависимостиУслуг.Действует
	|	И &НачислятьЗависимыеУслугиПоСобственномуНормативу
	|	И КВП_ЗависимостиУслуг.УслугаОснование.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме))";
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ВидыНачисления",    ВидыНачисления);
	Запрос.УстановитьПараметр("ВидыРазделовУчета", ВидыРазделовУчета);
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("КорректироватьЗависимыеУслуги", ВариантКорректировкиУслуг = Перечисления.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ЗависимыеУслуги);
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ВременноеОтсутствие
	 ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПлощади Тогда
	
		// Определим отдельные параметры для заполнения данных по приборам учета.
		// Структура запроса подготовлена следующим образом.
		//
		// 1. Изначально будем данные компоновать по двум группам: услуги по показаниям и услуги
		// по другим способам расчета.
		//
		// 2. Создаются отдельные временные таблицы для обеих групп расчета.
		//
		// 3. Для каждой группы расчета определяем свою таблицу оборотов начислений.
		//    Важно: для группы по показаниям берется таблица движений, а для прочих 
		//           способов расчета - таблица оборотов.
		//
		// 4. Результаты по данным обеих групп объединяются в конечном подзапросе.
		
		// ОСОБЕННОСТЬ:
		// При перерасчетах нормативных начислений для услуг по ПУ не учитываются данные
		// корректировок/перерасчетов этих нормативных начислений, если таковые производились ранее.
		// 
		// Поскольку ЗУ по собственному нормативу и услуги по ПУ, рассчитанные по нормативу при 
		// отсутствии показаний/ИПУ, считаются "вместе", то и корректировки при повторных перерасчетах
		// для них не учтутся.
		// Если это необходимо, то нужно дополнять список видов начисления, при проведении корректно
		// записывать период, тариф, вид тарифа и пр.
		
		СпособыРасчетаПоПУ = Новый Массив;
		СпособыРасчетаПоПУ.Добавить(Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика);
		СпособыРасчетаПоПУ.Добавить(Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме);
		
		// Для услуг по ПУ можем пересчитывать только начисления, произведенные по нормативу.
		// Начисления, произведенные по среднему пересчитывать не нужно.
		ВидыНачисленияПоПУ = Новый Массив;
		ВидыНачисленияПоПУ.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу);
		ВидыНачисленияПоПУ.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу);
		ВидыНачисленияПоПУ.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента);
		
		ВидыРазделовУчетаПоПУ = Новый Массив;
		ВидыРазделовУчетаПоПУ.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ);
		
		Если мЗависимыеУслугиПоСобственномуНормативу Тогда
			ВидыРазделовУчетаПоПУ.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг);
			ВидыНачисленияПоПУ.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Начисление);
		КонецЕсли;
		
		ТаблицаПериодов = ПолучитьТаблицуПериодов();
		
		Запрос.УстановитьПараметр("СпособыРасчетаПоПУ",    СпособыРасчетаПоПУ);
		Запрос.УстановитьПараметр("ВидыНачисленияПоПУ",    ВидыНачисленияПоПУ);
		Запрос.УстановитьПараметр("ВидыРазделовУчетаПоПУ", ВидыРазделовУчетаПоПУ);
		Запрос.УстановитьПараметр("ТаблицаПериодов",       ТаблицаПериодов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаНачислений.Объект КАК Объект,
		|	ТаблицаНачислений.Услуга КАК Услуга
		|ПОМЕСТИТЬ врТаблицаНачислений
		|ИЗ
		|	&ТаблицаНачислений КАК ТаблицаНачислений
		|ГДЕ
		|	НЕ ТаблицаНачислений.СпособРасчета В (&СпособыРасчетаПоПУ)
		|	И НЕ ТаблицаНачислений.ЗависимаяПоНормативу
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект,
		|	Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаНачислений.Объект КАК Объект,
		|	ТаблицаНачислений.Услуга КАК Услуга,
		|	ТаблицаНачислений.ЗависимаяПоНормативу КАК ЗависимаяПоНормативу
		|ПОМЕСТИТЬ врТаблицаНачисленийПоПУ
		|ИЗ
		|	&ТаблицаНачислений КАК ТаблицаНачислений
		|ГДЕ
		|	(ТаблицаНачислений.СпособРасчета В (&СпособыРасчетаПоПУ)
		|			ИЛИ ТаблицаНачислений.ЗависимаяПоНормативу)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект,
		|	Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаИзменения, МЕСЯЦ) КАК Период
		|ПОМЕСТИТЬ врТаблицаПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТаблицаПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачислений.Объект КАК ЛицевойСчет,
		|	врТаблицаПериодов.Период КАК Период,
		|	ТаблицаНачислений.Услуга КАК Услуга
		|ПОМЕСТИТЬ ИтоговаяТаблицаЛС
		|ИЗ
		|	врТаблицаНачислений КАК ТаблицаНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаПериодов КАК врТаблицаПериодов
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК Начислено,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставнаяУслуга,
		|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.МесяцНачисления, МЕСЯЦ) КАК МесяцНачисления,
		|	ВЫБОР
		|		КОГДА &КорректироватьЗависимыеУслуги
		|			ТОГДА УПЖКХ_НачисленияОбороты.УслугаОснование
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
		|	КОНЕЦ КАК УслугаОснование,
		|	ВЫБОР
		|		КОГДА НЕ УПЖКХ_НачисленияОбороты.ТипНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.ПустаяСсылка)
		|			ТОГДА УПЖКХ_НачисленияОбороты.ТипНачисления
		|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
		|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ФиксированноеНачисление), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Индивидуальное)
		|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Общедомовое)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.ПустаяСсылка)
		|	КОНЕЦ КАК ТипНачисления
		|ПОМЕСТИТЬ ТаблицаОборотов
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И (ЛицевойСчет, Услуга) В
		|					(ВЫБРАТЬ
		|						врТаблицаНачислений.Объект,
		|						врТаблицаНачислений.Услуга
		|					ИЗ
		|						врТаблицаНачислений КАК врТаблицаНачислений)
		|				И (МесяцНачисления МЕЖДУ &ДатаНач И &ДатаКон)
		|				И ВидНачисления В (&ВидыНачисления)
		|				И РазделУчета В (&ВидыРазделовУчета)) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	НЕ УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.МесяцНачисления,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА &КорректироватьЗависимыеУслуги
		|			ТОГДА УПЖКХ_НачисленияОбороты.УслугаОснование
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НЕ УПЖКХ_НачисленияОбороты.ТипНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.ПустаяСсылка)
		|			ТОГДА УПЖКХ_НачисленияОбороты.ТипНачисления
		|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
		|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ФиксированноеНачисление), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Индивидуальное)
		|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Общедомовое)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.ПустаяСсылка)
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врТаблицаНачисленийПоПУ.Объект КАК ЛицевойСчет,
		|	врТаблицаПериодов.Период КАК Период,
		|	врТаблицаНачисленийПоПУ.Услуга КАК Услуга,
		|	врТаблицаНачисленийПоПУ.ЗависимаяПоНормативу КАК ЗависимаяПоНормативу
		|ПОМЕСТИТЬ ИтоговаяТаблицаЛСПоПУ
		|ИЗ
		|	врТаблицаНачисленийПоПУ КАК врТаблицаНачисленийПоПУ
		|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаПериодов КАК врТаблицаПериодов
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисления) КАК Начислено,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставнаяУслуга,
		|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.МесяцНачисления, МЕСЯЦ) КАК МесяцНачисления,
		|	ВЫБОР
		|		КОГДА &КорректироватьЗависимыеУслуги
		|			ТОГДА УПЖКХ_НачисленияОбороты.УслугаОснование
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
		|	КОНЕЦ КАК УслугаОснование,
		|	УПЖКХ_НачисленияОбороты.ВидНачисления КАК ВидНачисления,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
		|				И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
		|				И УПЖКХ_НачисленияОбороты.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
		|				И УПЖКХ_НачисленияОбороты.Услуга В
		|					(ВЫБРАТЬ
		|						ЗависимыеУслуги.Услуга
		|					ИЗ
		|						ВрЗависимыеУслугиПоСобственномуНормативу КАК ЗависимыеУслуги)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗависимаяПоНормативу,
		|	УПЖКХ_НачисленияОбороты.Начало КАК НачалоПериода,
		|	УПЖКХ_НачисленияОбороты.Окончание КАК КонецПериода,
		|	ВЫБОР
		|		КОГДА НЕ УПЖКХ_НачисленияОбороты.ТипНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.ПустаяСсылка)
		|			ТОГДА УПЖКХ_НачисленияОбороты.ТипНачисления
		|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
		|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ФиксированноеНачисление), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Индивидуальное)
		|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Общедомовое)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.ПустаяСсылка)
		|	КОНЕЦ КАК ТипНачисления
		|ПОМЕСТИТЬ ТаблицаОборотовПоПУ
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	НЕ УПЖКХ_НачисленияОбороты.СуммаНачисления = 0
		|	И УПЖКХ_НачисленияОбороты.Организация = &Организация
		|	И (УПЖКХ_НачисленияОбороты.ЛицевойСчет, УПЖКХ_НачисленияОбороты.Услуга) В
		|			(ВЫБРАТЬ
		|				врТаблицаНачисленийПоПУ.Объект,
		|				врТаблицаНачисленийПоПУ.Услуга
		|			ИЗ
		|				врТаблицаНачисленийПоПУ КАК врТаблицаНачисленийПоПУ)
		|	И УПЖКХ_НачисленияОбороты.МесяцНачисления МЕЖДУ &ДатаНач И &ДатаКон
		|	И УПЖКХ_НачисленияОбороты.ВидНачисления В(&ВидыНачисленияПоПУ)
		|	И УПЖКХ_НачисленияОбороты.РазделУчета В(&ВидыРазделовУчетаПоПУ)
		|	И УПЖКХ_НачисленияОбороты.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.МесяцНачисления,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА &КорректироватьЗависимыеУслуги
		|			ТОГДА УПЖКХ_НачисленияОбороты.УслугаОснование
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
		|	КОНЕЦ,
		|	УПЖКХ_НачисленияОбороты.УслугаОснование,
		|	УПЖКХ_НачисленияОбороты.РазделУчета,
		|	УПЖКХ_НачисленияОбороты.ВидНачисления,
		|	УПЖКХ_НачисленияОбороты.Начало,
		|	УПЖКХ_НачисленияОбороты.Окончание,
		|	ВЫБОР
		|		КОГДА НЕ УПЖКХ_НачисленияОбороты.ТипНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.ПустаяСсылка)
		|			ТОГДА УПЖКХ_НачисленияОбороты.ТипНачисления
		|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
		|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ФиксированноеНачисление), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Индивидуальное)
		|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Общедомовое)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.ПустаяСсылка)
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаяТаблицаЛС.ЛицевойСчет КАК ЛицевойСчет,
		|	КОНЕЦПЕРИОДА(ИтоговаяТаблицаЛС.Период, МЕСЯЦ) КАК МесяцНачисления,
		|	ИтоговаяТаблицаЛС.Услуга КАК Услуга,
		|	ТаблицаОборотов.Начислено КАК Начислено,
		|	ТаблицаОборотов.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ТаблицаОборотов.УслугаОснование КАК УслугаОснование,
		|	ЛОЖЬ КАК ЗависимаяПоНормативу,
		|	NULL КАК ВидНачисления,
		|	NULL КАК НачалоПериода,
		|	NULL КАК КонецПериода,
		|	ТаблицаОборотов.ТипНачисления КАК ТипНачисления
		|ИЗ
		|	ИтоговаяТаблицаЛС КАК ИтоговаяТаблицаЛС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОборотов КАК ТаблицаОборотов
		|		ПО ИтоговаяТаблицаЛС.ЛицевойСчет = ТаблицаОборотов.ЛицевойСчет
		|			И ИтоговаяТаблицаЛС.Услуга = ТаблицаОборотов.Услуга
		|			И (НАЧАЛОПЕРИОДА(ИтоговаяТаблицаЛС.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ТаблицаОборотов.МесяцНачисления, МЕСЯЦ))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИтоговаяТаблицаЛСПоПУ.ЛицевойСчет,
		|	КОНЕЦПЕРИОДА(ИтоговаяТаблицаЛСПоПУ.Период, МЕСЯЦ),
		|	ИтоговаяТаблицаЛСПоПУ.Услуга,
		|	ТаблицаОборотовПоПУ.Начислено,
		|	ТаблицаОборотовПоПУ.СоставнаяУслуга,
		|	ТаблицаОборотовПоПУ.УслугаОснование,
		|	ИтоговаяТаблицаЛСПоПУ.ЗависимаяПоНормативу,
		|	ТаблицаОборотовПоПУ.ВидНачисления,
		|	ТаблицаОборотовПоПУ.НачалоПериода,
		|	ТаблицаОборотовПоПУ.КонецПериода,
		|	ТаблицаОборотовПоПУ.ТипНачисления
		|ИЗ
		|	ИтоговаяТаблицаЛСПоПУ КАК ИтоговаяТаблицаЛСПоПУ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОборотовПоПУ КАК ТаблицаОборотовПоПУ
		|		ПО ИтоговаяТаблицаЛСПоПУ.ЛицевойСчет = ТаблицаОборотовПоПУ.ЛицевойСчет
		|			И ИтоговаяТаблицаЛСПоПУ.Услуга = ТаблицаОборотовПоПУ.Услуга
		|			И (НАЧАЛОПЕРИОДА(ИтоговаяТаблицаЛСПоПУ.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ТаблицаОборотовПоПУ.МесяцНачисления, МЕСЯЦ))
		|			И ИтоговаяТаблицаЛСПоПУ.ЗависимаяПоНормативу = ТаблицаОборотовПоПУ.ЗависимаяПоНормативу";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаНачислений.Объект КАК Объект,
		|	ТаблицаНачислений.Услуга КАК Услуга,
		|	ТаблицаНачислений.СпособРасчета КАК СпособРасчетаУслуги,
		|	ТаблицаНачислений.ЗависимаяПоНормативу КАК ЗависимаяПоНормативу
		|ПОМЕСТИТЬ врТаблицаНачислений
		|ИЗ
		|	&ТаблицаНачислений КАК ТаблицаНачислений
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект,
		|	Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК Начислено,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставнаяУслуга,
		|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.МесяцНачисления, МЕСЯЦ) КАК МесяцНачисления,
		|	ВЫБОР
		|		КОГДА &КорректироватьЗависимыеУслуги
		|			ТОГДА УПЖКХ_НачисленияОбороты.УслугаОснование
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
		|	КОНЕЦ КАК УслугаОснование,
		|	УПЖКХ_НачисленияОбороты.ВидНачисления КАК ВидНачисления,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
		|				И УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
		|				И УПЖКХ_НачисленияОбороты.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
		|				И УПЖКХ_НачисленияОбороты.Услуга В
		|					(ВЫБРАТЬ
		|						ЗависимыеУслуги.Услуга
		|					ИЗ
		|						ВрЗависимыеУслугиПоСобственномуНормативу КАК ЗависимыеУслуги)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗависимаяПоНормативу,
		|	УПЖКХ_НачисленияОбороты.ТипНачисления КАК ТипНачисления
		|ПОМЕСТИТЬ ТаблицаОборотов
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И (ЛицевойСчет, Услуга) В
		|					(ВЫБРАТЬ
		|						врТаблицаНачислений.Объект,
		|						врТаблицаНачислений.Услуга
		|					ИЗ
		|						врТаблицаНачислений КАК врТаблицаНачислений)
		|				И (МесяцНачисления МЕЖДУ &ДатаНач И &ДатаКон)
		|				И ВидНачисления В (&ВидыНачисления)
		|				И РазделУчета В (&ВидыРазделовУчета)) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	НЕ УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачислений.Объект КАК ЛицевойСчет,
		|	ТаблицаНачислений.Услуга КАК Услуга,
		|	ТаблицаОборотов.МесяцНачисления КАК МесяцНачисления,
		|	СУММА(ТаблицаОборотов.Начислено) КАК Начислено,
		|	ТаблицаОборотов.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ВЫБОР
		|		КОГДА &КорректироватьЗависимыеУслуги
		|			ТОГДА ТаблицаОборотов.УслугаОснование
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
		|	КОНЕЦ КАК УслугаОснование,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаОборотов.ТипНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.ПустаяСсылка)
		|			ТОГДА ТаблицаОборотов.ТипНачисления
		|		КОГДА ТаблицаОборотов.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
		|				ИЛИ ТаблицаНачислений.СпособРасчетаУслуги В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ФиксированноеНачисление), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Индивидуальное)
		|		КОГДА ТаблицаОборотов.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Общедомовое)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.ПустаяСсылка)
		|	КОНЕЦ КАК ТипНачисления
		|ИЗ
		|	врТаблицаНачислений КАК ТаблицаНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОборотов КАК ТаблицаОборотов
		|		ПО ТаблицаНачислений.Объект = ТаблицаОборотов.ЛицевойСчет
		|			И ТаблицаНачислений.Услуга = ТаблицаОборотов.Услуга
		|			И ТаблицаНачислений.ЗависимаяПоНормативу = ТаблицаОборотов.ЗависимаяПоНормативу
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНачислений.Объект,
		|	ТаблицаНачислений.Услуга,
		|	ТаблицаОборотов.МесяцНачисления,
		|	ТаблицаОборотов.СоставнаяУслуга,
		|	ВЫБОР
		|		КОГДА &КорректироватьЗависимыеУслуги
		|			ТОГДА ТаблицаОборотов.УслугаОснование
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаОборотов.ТипНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.ПустаяСсылка)
		|			ТОГДА ТаблицаОборотов.ТипНачисления
		|		КОГДА ТаблицаОборотов.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
		|				ИЛИ ТаблицаНачислений.СпособРасчетаУслуги В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ФиксированноеНачисление), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Индивидуальное)
		|		КОГДА ТаблицаОборотов.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Общедомовое)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.ПустаяСсылка)
		|	КОНЕЦ";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Корректировки.Очистить();
	ТаблицаКорректировки = Корректировки.ВыгрузитьКолонки();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаКорректировки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	Если ВариантКорректировкиУслуг = Перечисления.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ОсновныеИЗависимые Тогда
		ТаблицаКорректировки = ДополнитьТаблицуКорректировкиЗависимымиУслугами(ТаблицаКорректировки);
	КонецЕсли;
	
	Корректировки.Загрузить(ТаблицаКорректировки);
	
КонецПроцедуры

// Дополняет таблицу корректировок зависимыми услугами
//
Функция ДополнитьТаблицуКорректировкиЗависимымиУслугами(ТаблицаКорректировки) Экспорт
	
	
	ТаблицаНачислений = ТаблицаКорректировки;
	
	СписокРеквизитовСумм = Новый Массив();
	СписокРеквизитовСумм.Добавить("Начислено");
	СписокРеквизитовСумм.Добавить("СуммаЛьготы");
	СписокРеквизитовСумм.Добавить("СуммаПени");
	СписокРеквизитовСумм.Добавить("СуммаПерерасчета");
	
	
	// ОСОБЕННОСТЬ:
	// Если производится корректировка начисления, произведенного за счет
	// повышающего коэффициента, то начисление зависимых услуг от этой корректировки
	// производить не нужно, так как зависимые услуги от повышения не начисляются.
	// Для этого сначала исключим строки корректировки начислений за счет повышения
	// из таблицы корректировки, а уже после добавления зависимых услуг вернем в таблицу.
	
	// 1. Выделение из таблицы корректировки данных о корректировке начислений за счет повышения
	СтруктураПоиска = Новый Структура("ВидНачисления", Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента);
	СтрокиКорректировкиНачисленийЗаСчетПовышения = ТаблицаКорректировки.НайтиСтроки(СтруктураПоиска);
	врТаблицаКорректировкиНачисленийЗаСчетПовышения = ТаблицаКорректировки.Скопировать(СтрокиКорректировкиНачисленийЗаСчетПовышения);
	
	// 2. Временное удаление строк за счет повышения из таблицы корректировки.
	Для Каждого ТекСтрокаКорректировкиНачисленийЗаСчетПовышения Из СтрокиКорректировкиНачисленийЗаСчетПовышения Цикл
		ТаблицаКорректировки.Удалить(ТекСтрокаКорректировкиНачисленийЗаСчетПовышения);
	КонецЦикла;
	
	// 3. Дополнение таблицы корректировки зависимыми услугами.
	ДополнитьТаблицуУслугЗависимымиУслугами(Дата, Организация, ТаблицаКорректировки, СписокРеквизитовСумм, Истина);
	
	// Если используется настройка начисления зависимых в разрезе организаций,
	// то дополним движения документа перерасчетами по зависимым услугам по организациям,
	// отличным от организации начисления услуг-оснований.
	Если мЗависимыеУслугиПоОрганизациям Тогда
		ДополнитьТаблицуУслугЗависимымиУслугами(Дата, Организация, ТаблицаКорректировки, СписокРеквизитовСумм, Истина, Истина);
	КонецЕсли;
	
	// 4. Восстановление удаленных ранее строк корректировки начислений за счет повышающего коэффициента.
	Для Каждого ТекСтрокаКорректировкиНачисленийЗаСчетПовышения Из врТаблицаКорректировкиНачисленийЗаСчетПовышения Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаКорректировки.Добавить(), ТекСтрокаКорректировкиНачисленийЗаСчетПовышения);
	КонецЦикла;
	
	// 5. Сворачиваем строки составных услуг и добавляем в Корректировки только зависимые услуги. Это нужно чтобы избавиться от разделения строки зависимой услуги на несколько из-за того, что УслугаОснование - составная.
	ТаблицаКорректировки.Свернуть("ВидНачисления, Зависимая, ЗависимаяПоНормативу, Здание, КонецПериода, ЛицевойСчет, ЛьготнаяКатегория, Льготник, МесяцНачисления, НачалоПериода, ТипНачисления, Услуга, УслугаОснование", "Начислено, СуммаЛьготы, СуммаНачисления, СуммаПени, СуммаПерерасчета, ТекущийРасчет");
	МассивЗависимыхУслуг = ТаблицаКорректировки.НайтиСтроки(Новый Структура("Зависимая", Истина));
	
	Для Каждого Строка Из МассивЗависимыхУслуг Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаНачислений.Добавить(), Строка);
	КонецЦикла;
	
	Возврат ТаблицаНачислений;
	
КонецФункции

// Рассчитывает суммы начислений в строках таблица "Корректировки"
// при виде операции "ВременноеОтсутствие".
Процедура РассчитатьСуммыНачисленийВременногоОтсутствия() Экспорт
	
	Отказ = Ложь;
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = 
			УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроизвестиРасчетУслуги();
	
КонецПроцедуры

// Рассчитывает суммы начислений в строках таблица "Корректировки"
// при виде операции "Недопоставка".
Процедура РассчитатьСуммыНачисленийНедопоставки() Экспорт
	
	Отказ = Ложь;
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, 
																										Организация, 
																										Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЧастичныйПерерасчет И Не ЗначениеЗаполнено(ЗначениеПониженияТарифа) Тогда
		Если ФлагПониженияТарифа Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо указать значение снижения тарифа!");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо указать процент снижения!");
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	// ОСОБЕННОСТЬ:
	// Сумма перерасчета должна быть отрицательная, так как идет недопоставка,
	// поэтому при любом вычислении суммы перерасчета в данной процедуре необходимо сумму умножать на "-1".
	
	// Для документа с видом операции недопоставка реализована возможность установки как произвольного периода,
	// так и периода в 1 месяц. Произвольный период определяется, если начало и конец периода не совпадают и
	// количество дней и часов перерасчета равно нулю, поскольку при установке произвольного периода
	// нет возможности рассчитать недопоставку по часам/дням.
	ИспользуетсяПроизвольныйПериод = Ложь;
	
	Если Не НачалоМесяца(ДатаНач) = НачалоМесяца(ДатаКон) И ДнейПерерасчета = 0 И ЧасовПерерасчета = 0 Тогда
		ИспользуетсяПроизвольныйПериод = Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Корректировки Цикл
		
		СтруктураПараметров.Очистить();
		
		// Дополнительно для корректировки ЗУ по собственному нормативу не нужно проверять назначение 
		// услуги на л/с, как для обычных услуг.
		// УЧЕСТЬ: для ЗУ по собственному нормативу нет возможности определить услугу-основание,
		// т.к. может быть настроена зависимость сразу от нескольких услуг. Поэтому перерасчет по недопоставке
		// выполняется из расчета дней месяца перерасчета.
		Если ТекСтрока.ЗависимаяПоНормативу Тогда
			СтруктураПараметров.Вставить("НеПроверятьНазначение", Истина);
		КонецЕсли;
		
		// Получим таблицу периодов действия услуги.
		ТаблицаПериодовДействияУслуги = ПолучитьПериодыРасчетаУслуги(НачалоМесяца(ТекСтрока.МесяцНачисления),
																	 КонецМесяца(ТекСтрока.МесяцНачисления),
																	 Организация,
																	 ?(ВариантКорректировкиУслуг = Перечисления.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ЗависимыеУслуги,
																	   ТекСтрока.УслугаОснование,
																	   ТекСтрока.Услуга),
																	 ТекСтрока.ЛицевойСчет, 
																	 мНастройкиУчетнойПолитикиТСЖ,
																	 Дата,
																	 ,
																	 СтруктураПараметров);
		
		ВсегоДнейЗаПериод = ?(ТаблицаПериодовДействияУслуги.Количество() = 0, 
								День(КонецМесяца(ТекСтрока.МесяцНачисления)), 
								ТаблицаПериодовДействияУслуги.Итог("КоличествоДнейНазначения"));
								ТекСтрока.ТарифПослеИзм = ТекСтрока.ТарифДоИзм; 				//Позолотина -- 
		
		Если ВидПерерасчета = 0 Тогда
			
			// Определим количество дней перерасчета в текущем периоде перерасчета.
			// При этом, если используется произвольный период, то перерасчет выполняется
			// за все дни месяца перерасчета.
			ТекДнейПерерасчета = ДнейПерерасчета;
			Если ТекДнейПерерасчета > ВсегоДнейЗаПериод ИЛИ ИспользуетсяПроизвольныйПериод Тогда
				ТекДнейПерерасчета = ВсегоДнейЗаПериод;
			КонецЕсли;
			
			Если ЧастичныйПерерасчет Тогда
				Если ФлагПониженияТарифа Тогда
					Тариф = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(ТекСтрока.МесяцНачисления), 
														 Организация, 
														 ТекСтрока.Услуга, 
														 ТекСтрока.ЛицевойСчет);
					//Количество = ?(Тариф = 0, 0, ТекСтрока.Начислено / Тариф);
					Количество = ?(Тариф = 0, 0, ТекСтрока.КолДоИзм);  //Позолотина
					ТекСтрока.КолПослеИзм = Количество;
					ТекСтрока.ТарифПослеИзм = Тариф; 					//Позолотина --
					ТекСтрока.СуммаПерерасчета = (-1) * ЗначениеПониженияТарифа * Количество * (ТекДнейПерерасчета / ВсегоДнейЗаПериод);
				Иначе
					ТекСтрока.СуммаПерерасчета = (-1) * ТекСтрока.Начислено * (ЗначениеПониженияТарифа / 100) 
					                              * (ТекДнейПерерасчета / ВсегоДнейЗаПериод);
				КонецЕсли;
			Иначе
				ТекСтрока.СуммаПерерасчета = (-1) * ТекСтрока.Начислено * (ТекДнейПерерасчета / ВсегоДнейЗаПериод);
			КонецЕсли;
			
		ИначеЕсли ВидПерерасчета = 1 Тогда
			
			ВсегоЧасовЗаПериод = ВсегоДнейЗаПериод * 24;
			
			ТекЧасовПерерасчета = ЧасовПерерасчета;
			Если ТекЧасовПерерасчета > ВсегоЧасовЗаПериод Тогда
				ТекЧасовПерерасчета = ВсегоЧасовЗаПериод;
			КонецЕсли;
			
			Если ЧастичныйПерерасчет Тогда
				Если ФлагПониженияТарифа Тогда
					Тариф = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(ТекСтрока.МесяцНачисления), 
														 Организация, 
														 ТекСтрока.Услуга,
														 ТекСтрока.ЛицевойСчет);
					//Количество = ?(Тариф = 0, 0, ТекСтрока.Начислено / Тариф);
					Количество = ?(Тариф = 0, 0, ТекСтрока.КолДоИзм);   
					ТекСтрока.КолПослеИзм = Количество;
					ТекСтрока.ТарифПослеИзм = Тариф; 					//Позолотина --
					ТекСтрока.СуммаПерерасчета = (-1) * ЗначениеПониженияТарифа * Количество * (ТекЧасовПерерасчета / ВсегоЧасовЗаПериод);
				Иначе
					ТекСтрока.СуммаПерерасчета = (-1) * ТекСтрока.Начислено * (ЗначениеПониженияТарифа / 100) 
					                             * (ТекЧасовПерерасчета / ВсегоЧасовЗаПериод);
				КонецЕсли;
			Иначе
				ТекСтрока.СуммаПерерасчета = (-1) * ТекСтрока.Начислено * ТекЧасовПерерасчета / ВсегоЧасовЗаПериод;
			КонецЕсли;
			
		КонецЕсли;
		  ТекСтрока.КолПослеИзм = ТекСтрока.СуммаПерерасчета/ТекСтрока.ТарифПослеИзм; //Позолотина
		
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает суммы начислений в строках таблица "Корректировки"
// при виде операции "ПерерасчетПоПлощади".
Процедура РассчитатьСуммыНачисленийПоПлощади() Экспорт
	
	Отказ = Ложь;
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = 
			УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроизвестиРасчетУслуги();
	
КонецПроцедуры

// Рассчитывает суммы начислений в строках таблица "Корректировки"
// при виде операции "ПерерасчетПоПроценту".
Процедура РассчитатьСуммыНачисленийПоПроценту() Экспорт

	Для Каждого ТекСтрока Из Корректировки Цикл
		ТекСтрока.СуммаПерерасчета = -ТекСтрока.Начислено * ПроцентПониженияНачисления / 100;
		ТекСтрока.ТарифПослеИзм = ТекСтрока.ТарифДоИзм; 				//Позолотина ++ 
		ТекСтрока.КолПослеИзм = ТекСтрока.СуммаПерерасчета/ТекСтрока.ТарифПослеИзм; //Позолотина --
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает суммы начислений в строках таблица "Корректировки"
// при виде операции "Перерасчет комиссии банка".
Процедура РассчитатьСуммыНачисленийПерерасчетаКомиссииБанка() Экспорт
	
	Для Каждого ТекСтрока Из Корректировки Цикл
		ТекТариф = ПолучитьТарифПоЛицевомуСчету(Дата, 
												Организация, 
												Услуга,
												ТекСтрока.ЛицевойСчет, 
												Перечисления.КВП_ВидыТарифов.КомиссияБанка);
		ТекСтрока.ТекущийРасчет    = ?(ТекТариф <> 0, ТекСтрока.Начислено / ТекТариф * ПроцентПерерасчета, 0);
		ТекСтрока.СуммаПерерасчета = ТекСтрока.ТекущийРасчет - ТекСтрока.Начислено;
	КонецЦикла;
	
КонецПроцедуры // РассчитатьСуммыНачисленийПерерасчетаКомиссииБанка()

// Процедура заполняет основание перерасчета.
//
Процедура ЗаполнитьОснованиеПерерасчета() Экспорт
	
	ОснованиеПерерасчета = ВидОперации;
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка
		И ЧастичныйПерерасчет Тогда
		
		Если ФлагПониженияТарифа Тогда
			ОснованиеПерерасчета = "" + ОснованиеПерерасчета + " с понижением тарифа";
		Иначе
			ОснованиеПерерасчета = "" + ОснованиеПерерасчета + " по проценту понижения";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОснованиеПерерасчета()

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокументаВидаОперацииКорректировкаНачислений

// По результату запроса по шапке документа формируем движения по регистрам.
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ТаблицаКорректировки = Корректировки.Выгрузить();
	ТаблицаКорректировки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаКорректировки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	
	// Таблицу корректировок дополняем договорами лицевых счетов. При этом договоры получаем актуальные, т.е.
	// действующие на дату документа.
	ТаблицаКорректировки.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Для Каждого ТекСтрока Из ТаблицаКорректировки Цикл
		
		// Получение договора взаиморасчетов, актуального на дату документа.
		ТекСтрока.Договор = 
			УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ТекСтрока.ЛицевойСчет, Организация,
																							СтруктураШапкиДокумента.Дата, "Договор");
		
		// Установка месяца начисления, к которому будет отнесена корректировка,
		// в зависимости от настройки параметров учета ЖКХ "Вариант изменения задолженности в корректировках начислений".
		Если СтруктураШапкиДокумента.ВариантИзмененияЗадолженностиВКорректировкахНачислений = 
				Перечисления.УПЖКХ_ВариантыИзмененияЗадолженностиВКорректировкахНачислений.ТекущийРасчетныйПериод Тогда
			// Если вариант "Текущий расчетный период", то отнесем корректировку к месяцу начисления корректировки.
			ТекСтрока.МесяцНачисления = КонецМесяца(СтруктураШапкиДокумента.Дата);
		Иначе
			// В противном случае отнесем корректировку к месяцу, за который была произведена корректировка.
			ТекСтрока.МесяцНачисления = КонецМесяца(ТекСтрока.МесяцНачисления);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДвижений = УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.КВП_СформироватьТаблицуДвижений();
	
	///////////////////////////////////////////////////////////////////////////////
	// ЗАПОЛНЕНИЕ ТАБЛИЦЫ ДВИЖЕНИЙ ДОКУМЕНТА
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует новый механизм отражения
	// начислений в регл. учете договор в проводках не заполняется. Для тех, кто использует старый механизм договор
	// по-прежнему заполняется в проводках.
	ЗаполнятьДоговорВПроводках = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений Тогда
		
		Если ТаблицаКорректировки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаКорректировки.Свернуть("Услуга, СоставнаяУслуга, УслугаОснование, ЛицевойСчет, ЛьготнаяКатегория, Льготник, 
		                              |МесяцНачисления, Организация, Договор, ТипНачисления", "СуммаНачисления, СуммаЛьготы, СуммаПени, КолДоИзм,КолПослеИзм,ТарифДоИзм, ТарифПослеИзм");
		
		ДвижениеПоРегиструНачислений(СтруктураШапкиДокумента, ТаблицаКорректировки, ТаблицаДвижений, Отказ, Заголовок, ЗаполнятьДоговорВПроводках);
		
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПлощади
		  ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПроценту
		  ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетКомиссииБанка Тогда
		
		ДвиженияПоРегистрамПерерасчетПоПлощадиПроценту(СтруктураШапкиДокумента, 
													   ТаблицаКорректировки, 
													   ТаблицаДвижений, 
													   Отказ, 
													   Заголовок,
													   ЗаполнятьДоговорВПроводках);
		
	Иначе
		ДвиженияПоРегистрамВременноеОтсутствиеИНедопоставка(СтруктураШапкиДокумента, 
															ТаблицаКорректировки, 
															ТаблицаДвижений, 
															Отказ, 
															Заголовок,
															ЗаполнятьДоговорВПроводках);
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	// ЗАПИСЬ ДВИЖЕНИЙ ДОКУМЕНТА
	
	ТаблицыДвижений = Новый Структура;
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетКомиссииБанка Тогда
		Если мПроцентКомиссииБанка = Неопределено Тогда
			мПроцентКомиссииБанка = ПолучитьТарифПоЛицевомуСчету(Дата, 
																 Организация, 
																 Услуга, 
																 , 
																 ПредопределенноеЗначение("Перечисление.КВП_ВидыТарифов.КомиссияБанка"));
		КонецЕсли;
		ТипДвижения = ?(мПроцентКомиссииБанка < ПроцентПерерасчета, "Приход", "Расход");
		ТаблицыДвижений.Вставить(ТипДвижения, ТаблицаДвижений);
		УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.СформироватьДвиженияПоВзаиморасчетам(ЭтотОбъект, ТаблицыДвижений);
		
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений Тогда
		
		// Разделим таблицу начислений на две таблицы: одна с видом начисления пени, другая с остальными видами начислений.
		// Таблица с пенями будет в видом движения "Приход".
		// Таблица с остальными начислений будет с видом движения "Расход".
		ТаблицаДвиженийРасход = ТаблицаДвижений.Скопировать();
		НайденныеСтроки = ТаблицаДвиженийРасход.НайтиСтроки(Новый Структура("РазделУчета", 
		                                                                     Перечисления.УПЖКХ_РазделыУчета.Пени));
		Если НайденныеСтроки.Количество() > 0 Тогда
		
			ТаблицаДвиженийПриход = УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.КВП_СформироватьТаблицуДвижений();
			
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				
				НоваяСтрока = ТаблицаДвиженийПриход.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				ТаблицаДвиженийРасход.Удалить(ТекущаяСтрока);
				
			КонецЦикла;
			
			ТаблицыДвижений.Вставить("Приход", ТаблицаДвиженийПриход);
			ТаблицыДвижений.Вставить("Расход", ТаблицаДвиженийРасход);
			
		Иначе
			
			ТаблицыДвижений.Вставить("Расход", ТаблицаДвижений);
			
		КонецЕсли;
		
		УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.СформироватьДвиженияПоВзаиморасчетам(ЭтотОбъект, ТаблицыДвижений);
		
	Иначе
		ТаблицыДвижений.Вставить("Расход", ТаблицаДвижений);
		УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.СформироватьДвиженияПоВзаиморасчетам(ЭтотОбъект, ТаблицыДвижений);
		
	КонецЕсли;
	
	// Движения для отражения начислений в регл. учете.
	СформироватьДвиженияДляОтраженияНачисленийВРеглУчете(ЭтотОбъект);
	
КонецПроцедуры

// Формирует движения по регистру "Начисления на лицевые счета".
Процедура ДвижениеПоРегиструНачислений(СтруктураШапкиДокумента,
									   ТаблицаКорректировки,
									   ТаблицаДвижений,
									   Отказ,
									   Заголовок,
									   ЗаполнятьДоговорВПроводках)
	
	Если РегистрироватьКакОплату Тогда
		ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.Оплата;
	Иначе
		ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.ПерерасчетНачисления;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаКорректировки Цикл
		
		// Корректировка начислений.
		//Если Не СтрокаТабличнойЧасти.СуммаНачисления = 0 Тогда
		Если (Не СтрокаТабличнойЧасти.СуммаНачисления = 0) или (СтрокаТабличнойЧасти.СуммаНачисления=0 и не (СтрокаТабличнойЧасти.КолПослеИзм - СтрокаТабличнойЧасти.КолДоИзм)=0 )Тогда   //Петрова		
			Движение                             = ТаблицаДвижений.Добавить();
			Движение.Период                      = СтруктураШапкиДокумента.Дата;
			Движение.Организация                 = СтрокаТабличнойЧасти.Организация;
			Движение.ЛицевойСчет                 = СтрокаТабличнойЧасти.ЛицевойСчет;
			
			Если ЗаполнятьДоговорВПроводках Тогда
				Движение.Договор                 = СтрокаТабличнойЧасти.Договор;
			КонецЕсли;
			
			Движение.Услуга                      = СтрокаТабличнойЧасти.Услуга;
			Движение.СоставнаяУслуга             = СтрокаТабличнойЧасти.СоставнаяУслуга;
			Движение.УслугаОснование             = СтрокаТабличнойЧасти.УслугаОснование;
			Движение.МесяцНачисления             = СтрокаТабличнойЧасти.МесяцНачисления;
			Движение.СуммаНачисления             = СтрокаТабличнойЧасти.СуммаНачисления;
			Движение.ОснованиеПерерасчета        = ОснованиеПерерасчета;
			Движение.ТипНачисления               = СтрокаТабличнойЧасти.ТипНачисления;
			//Позолотина+
			Движение.Количество					 = СтрокаТабличнойЧасти.КолПослеИзм - СтрокаТабличнойЧасти.КолДоИзм;
			Движение.ВидТарифа                   = Перечисления.КВП_ВидыТарифов.Общий;
			Движение.Тариф                       = СтрокаТабличнойЧасти.ТарифПослеИзм;
			//Позолотина--
			// Реквизит "КорректировкаНормативныхНачисленийПоПУ" помечен на удаление в версии 3.0.44.17
			// в связи с переработкой механизма сторнирования начислений и более недоступен для изменения.
			// Начиная с указанной версии при корректировке сторно необходимо корректировать объемы, а не суммы начислений.
			//
			Если УдалитьКорректировкаНормативныхНачисленийПоПУ Тогда
				Движение.РазделУчета                 = Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ;
				Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ;
				Движение.ВидТарифа                   = Перечисления.КВП_ВидыТарифов.Общий;
				Движение.Тариф                       = ПолучитьТарифПоЛицевомуСчету(СтрокаТабличнойЧасти.МесяцНачисления, 
																					Организация, 
																					СтрокаТабличнойЧасти.Услуга,
																					СтрокаТабличнойЧасти.ЛицевойСчет, 
																					Движение.ВидТарифа);
				// Для корректного совмещения основных начислений по нормативу и сторно
				// и текущих корректировок нормативных начислений необходимо заполнить поле "Дней начислено".
				Движение.ДнейНачислено               = День(КонецМесяца(СтрокаТабличнойЧасти.МесяцНачисления));
			Иначе
				Движение.РазделУчета                 = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг;
				Движение.ВидНачисленияНаЛицевыеСчета = ВидНачисленияНаЛицевыеСчета;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.МесяцНачисления) Тогда
				Движение.Начало    = НачалоМесяца(СтрокаТабличнойЧасти.МесяцНачисления);
				Движение.Окончание = КонецМесяца(СтрокаТабличнойЧасти.МесяцНачисления);
			КонецЕсли;
			
		КонецЕсли;
		
		// Корректировка льгот.
		Если Не СтрокаТабличнойЧасти.СуммаЛьготы = 0 Тогда
			
			Если Не мНастройкиУчетнойПолитикиТСЖ.НеУчитыватьЛьготыВоВзаиморасчетах Тогда
			
				Движение                             = ТаблицаДвижений.Добавить();
				Движение.Период                      = СтруктураШапкиДокумента.Дата;
				Движение.Организация                 = СтрокаТабличнойЧасти.Организация;
				Движение.ЛицевойСчет                 = СтрокаТабличнойЧасти.ЛицевойСчет;
				
				Если ЗаполнятьДоговорВПроводках Тогда
					Движение.Договор                 = СтрокаТабличнойЧасти.Договор;
				КонецЕсли;
				
				Движение.Услуга                      = СтрокаТабличнойЧасти.Услуга;
				Движение.СоставнаяУслуга             = СтрокаТабличнойЧасти.СоставнаяУслуга;
				Движение.УслугаОснование             = СтрокаТабличнойЧасти.УслугаОснование;
				Движение.ЛьготнаяКатегория           = СтрокаТабличнойЧасти.ЛьготнаяКатегория;
				Движение.МесяцНачисления             = СтрокаТабличнойЧасти.МесяцНачисления;
				Движение.РазделУчета                 = Перечисления.УПЖКХ_РазделыУчета.Льготы;
				Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.Корректировка;
				Движение.СуммаНачисления             = -СтрокаТабличнойЧасти.СуммаЛьготы;
				Движение.ОснованиеПерерасчета        = ОснованиеПерерасчета;
				
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.МесяцНачисления) Тогда
					Движение.Начало    = НачалоМесяца(СтрокаТабличнойЧасти.МесяцНачисления);
					Движение.Окончание = КонецМесяца(СтрокаТабличнойЧасти.МесяцНачисления);
				КонецЕсли;
				
			КонецЕсли;
			
			НаборДвижений = Движения.КВП_НачисленныеЛьготы;
			Движение                   = НаборДвижений.Добавить();
			Движение.Период            = Дата;
			Движение.Организация       = СтрокаТабличнойЧасти.Организация;
			Движение.ЛьготнаяКатегория = СтрокаТабличнойЧасти.ЛьготнаяКатегория;
			Движение.Услуга            = СтрокаТабличнойЧасти.Услуга;
			Движение.ЛицевойСчет       = СтрокаТабличнойЧасти.ЛицевойСчет;
			Движение.Проживающий       = СтрокаТабличнойЧасти.Льготник;
			Движение.СуммаНачисления   = СтрокаТабличнойЧасти.СуммаЛьготы;
			
		КонецЕсли;
		
		// Корректировка пени.
		Если Не СтрокаТабличнойЧасти.СуммаПени = 0 Тогда
			Движение                             = ТаблицаДвижений.Добавить();
			Движение.Период                      = СтруктураШапкиДокумента.Дата;
			Движение.Организация                 = СтрокаТабличнойЧасти.Организация;
			Движение.ЛицевойСчет                 = СтрокаТабличнойЧасти.ЛицевойСчет;
			
			Если ЗаполнятьДоговорВПроводках Тогда
				Движение.Договор                 = СтрокаТабличнойЧасти.Договор;
			КонецЕсли;
			
			Движение.Услуга                      = СтрокаТабличнойЧасти.Услуга;
			Движение.СоставнаяУслуга             = СтрокаТабличнойЧасти.СоставнаяУслуга;
			Движение.УслугаОснование             = СтрокаТабличнойЧасти.УслугаОснование;
			Движение.МесяцНачисления             = СтрокаТабличнойЧасти.МесяцНачисления;
			Движение.РазделУчета                 = Перечисления.УПЖКХ_РазделыУчета.Пени;
			Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.Корректировка;
			Движение.СуммаНачисления             = СтрокаТабличнойЧасти.СуммаПени;
			Движение.ОснованиеПерерасчета        = ОснованиеПерерасчета;
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.МесяцНачисления) Тогда
				Движение.Начало    = НачалоМесяца(СтрокаТабличнойЧасти.МесяцНачисления);
				Движение.Окончание = КонецМесяца(СтрокаТабличнойЧасти.МесяцНачисления);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвижениеПоРегиструНачислений()

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокументаВидаОперацииВременноеОтсутствиеИКорректировка

// Процедура формируем движения по регистрам при виде операции
// "Временное отсутствие".
Процедура ДвиженияПоРегистрамВременноеОтсутствиеИНедопоставка(СтруктураШапкиДокумента, 
															  ТаблицаПоУслугам, 
															  ТаблицаДвижений, 
															  Отказ, 
															  Заголовок,
															  ЗаполнятьДоговорВПроводках)
	
	Если ТаблицаПоУслугам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// удалим строки, по которым не указана сумма перерасчета.
	Отбор = Новый Структура;
	Отбор.Вставить("СуммаПерерасчета", 0);
	МассивСтрок = ТаблицаПоУслугам.НайтиСтроки(Отбор);
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		ТаблицаПоУслугам.Удалить(СтрокаМассива);
	КонецЦикла;
	
	//ТаблицаПоУслугам.Свернуть("Услуга, СоставнаяУслуга, УслугаОснование, ЛицевойСчет, МесяцНачисления, 
	//						  |Организация, Договор, НачалоПериода, КонецПериода, ВидНачисления, ТипНачисления",
	//						  "Начислено, ТекущийРасчет, СуммаПерерасчета");
	
	ТаблицаПоУслугам.Свернуть("Услуга, СоставнаяУслуга, УслугаОснование, ЛицевойСчет, МесяцНачисления, Организация, Договор, НачалоПериода, КонецПериода, ВидНачисления, КолПослеИзм, ТарифПослеИзм",
	"Начислено, ТекущийРасчет, СуммаПерерасчета");     //Позолотина
	
	ДвижениеПоРегиструНачисленийВременноеОтсутствие(СтруктураШапкиДокумента, 
													ТаблицаПоУслугам, 
													ТаблицаДвижений, 
													Отказ, 
													Заголовок,
													ЗаполнятьДоговорВПроводках);
	
КонецПроцедуры

// Формирует движения по регистру "Начисления на лицевые счета".
Процедура ДвижениеПоРегиструНачисленийВременноеОтсутствие(СтруктураШапкиДокумента, 
														  ТаблицаПоУслугам, 
														  ТаблицаДвижений, 
														  Отказ, 
														  Заголовок,
														  ЗаполнятьДоговорВПроводках)
	
	Для Каждого ТекСтрокаУслуги Из ТаблицаПоУслугам Цикл
		
		Если ТекСтрокаУслуги.СуммаПерерасчета = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = ТаблицаДвижений.Добавить();
		
		Если ЭтотОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ВременноеОтсутствие Тогда   //++Петрова
			СуммаНачисления = ТекСтрокаУслуги.СуммаПерерасчета;
			Движение.Количество	 = ТекСтрокаУслуги.КолПослеИзм;   //Позолотина;
		Иначе // недопоставка
			СуммаНачисления = -ТекСтрокаУслуги.СуммаПерерасчета;
			Движение.Количество	 = -ТекСтрокаУслуги.КолПослеИзм;  //Позолотина
		КонецЕсли;                                                                 //--Петрова
		
		Движение.Период                      = СтруктураШапкиДокумента.Дата;
		Движение.Организация                 = ТекСтрокаУслуги.Организация;
		Движение.ЛицевойСчет                 = ТекСтрокаУслуги.ЛицевойСчет;
		
		Если ЗаполнятьДоговорВПроводках Тогда
			Движение.Договор                 = ТекСтрокаУслуги.Договор;
		КонецЕсли;
		
		Движение.Услуга                      = ТекСтрокаУслуги.Услуга;
		Движение.СоставнаяУслуга             = ТекСтрокаУслуги.СоставнаяУслуга;
		Движение.УслугаОснование             = ТекСтрокаУслуги.УслугаОснование;
		Движение.МесяцНачисления             = ТекСтрокаУслуги.МесяцНачисления;
		Движение.СуммаНачисления             = ТекСтрокаУслуги.СуммаПерерасчета;
		//Позолотина+
		Движение.ВидТарифа                   = Перечисления.КВП_ВидыТарифов.Общий;
		Движение.Тариф                       = ТекСтрокаУслуги.ТарифПослеИзм;
		//Позолотина--
		Движение.ОснованиеПерерасчета        = ОснованиеПерерасчета;
		Движение.ТипНачисления               = ТекСтрокаУслуги.ТипНачисления;
		
		Если ЗначениеЗаполнено(ТекСтрокаУслуги.НачалоПериода) 
		   И ЗначениеЗаполнено(ТекСтрокаУслуги.КонецПериода) Тогда
			
			Движение.Начало    = ТекСтрокаУслуги.НачалоПериода;
			Движение.Окончание = ТекСтрокаУслуги.КонецПериода;
			
		ИначеЕсли ЗначениеЗаполнено(ТекСтрокаУслуги.МесяцНачисления) Тогда
			
			Движение.Начало    = НачалоМесяца(ТекСтрокаУслуги.МесяцНачисления);
			Движение.Окончание = КонецМесяца(ТекСтрокаУслуги.МесяцНачисления);
			
		КонецЕсли;
		
		// Если перерассчитываем начисления по нормативу услуг по показаниям, то
		// в качестве раздела учета и вида начисления укажем корректировку при отсутствии показаний.
		Если ТекСтрокаУслуги.ВидНачисления = Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу Тогда
			Движение.РазделУчета                 = Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ;
			Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ;
			Движение.ВидТарифа                   = Перечисления.КВП_ВидыТарифов.Общий;
			Движение.Тариф                       = ПолучитьТарифПоЛицевомуСчету(ТекСтрокаУслуги.КонецПериода, Организация, ТекСтрокаУслуги.Услуга, 
			                                                                    ТекСтрокаУслуги.ЛицевойСчет, Движение.ВидТарифа);
			Движение.ДнейНачислено               = 1 + (ТекСтрокаУслуги.КонецПериода - ТекСтрокаУслуги.НачалоПериода)
			                                         / (ДлинаСуток);
		Иначе
			Движение.РазделУчета                 = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг;
			Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.ПерерасчетНачисления;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвижениеПоРегиструНачисленийВременноеОтсутствие()

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокументаВидаОперацииПерерасчетПоПлощади

// По результату запроса по шапке документа формируем движения по регистрам.
Процедура ДвиженияПоРегистрамПерерасчетПоПлощадиПроценту(СтруктураШапкиДокумента, 
														 ТаблицаКорректировки, 
														 ТаблицаДвижений, 
														 Отказ, 
														 Заголовок,
														 ЗаполнятьДоговорВПроводках)
	
	Если ТаблицаКорректировки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнена табличная часть.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДвижениеПоРегиструНачисленийПерерасчетПоПлощадиПроценту(СтруктураШапкиДокумента, 
															ТаблицаКорректировки, 
															ТаблицаДвижений, 
															Отказ, 
															Заголовок,
															ЗаполнятьДоговорВПроводках);
	
КонецПроцедуры // ДвиженияПоРегистрамПерерасчетПоПлощадиПроценту()

// Формирует движения по регистру "Начисления на лицевые счета".
Процедура ДвижениеПоРегиструНачисленийПерерасчетПоПлощадиПроценту(СтруктураШапкиДокумента, 
																  ТаблицаКорректировки, 
																  ТаблицаДвижений, 
																  Отказ, 
																  Заголовок,
																  ЗаполнятьДоговорВПроводках)
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаКорректировки Цикл
	
		ТекЛицевойСчет = СтрокаТабличнойЧасти.ЛицевойСчет;
	
		Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетКомиссииБанка Тогда
			РазделУчета = Перечисления.УПЖКХ_РазделыУчета.КомиссияБанка;
		Иначе
			РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг;
		КонецЕсли;
	
		Если Не СтрокаТабличнойЧасти.СуммаПерерасчета = 0 Тогда
			Движение = ТаблицаДвижений.Добавить();
			Движение.Период                     = СтруктураШапкиДокумента.Дата;
			Движение.Организация                = СтрокаТабличнойЧасти.Организация;
			Движение.ЛицевойСчет                = ТекЛицевойСчет;
			
			Если ЗаполнятьДоговорВПроводках Тогда
				Движение.Договор                = СтрокаТабличнойЧасти.Договор;
			КонецЕсли;
			
			Движение.Услуга                      = СтрокаТабличнойЧасти.Услуга;
			Движение.СоставнаяУслуга             = СтрокаТабличнойЧасти.СоставнаяУслуга;
			Движение.УслугаОснование             = СтрокаТабличнойЧасти.УслугаОснование;
			Движение.МесяцНачисления             = СтрокаТабличнойЧасти.МесяцНачисления;
			Движение.РазделУчета                 = РазделУчета;
			Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.ПерерасчетНачисления;
			Движение.СуммаНачисления             = СтрокаТабличнойЧасти.СуммаПерерасчета;
			Движение.ОснованиеПерерасчета        = ОснованиеПерерасчета;
			Движение.ТипНачисления               = СтрокаТабличнойЧасти.ТипНачисления;
			
			//Позолотина+
			Движение.ВидТарифа                   = Перечисления.КВП_ВидыТарифов.Общий;
			Движение.Количество					 = СтрокаТабличнойЧасти.КолПослеИзм;
			Движение.Тариф						 = СтрокаТабличнойЧасти.ТарифПослеИзм;
			//Позолотина--

			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НачалоПериода) 
			   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.КонецПериода) Тогда
				
				Движение.Начало    = СтрокаТабличнойЧасти.НачалоПериода;
				Движение.Окончание = СтрокаТабличнойЧасти.КонецПериода;
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.МесяцНачисления) Тогда
				
				Движение.Начало    = НачалоМесяца(СтрокаТабличнойЧасти.МесяцНачисления);
				Движение.Окончание = КонецМесяца(СтрокаТабличнойЧасти.МесяцНачисления);
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ДвижениеПоРегиструНачисленийПерерасчетПоПлощадиПроценту()

#КонецОбласти

#Область ОбработчикиСобытийДокумента

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	УПЖКХ_ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан("Документ.КВП_КорректировкаНачислений");
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах.
	Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений Тогда
		СуммаДокумента = КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "Корректировки", "СуммаНачисления");
		СуммаДокумента = СуммаДокумента
					   - КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "Корректировки", "СуммаЛьготы");
		СуммаДокумента = СуммаДокумента 
					   + КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "Корректировки", "СуммаПени");
	Иначе
		СуммаДокумента = КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "Корректировки", "СуммаПерерасчета");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" документа.
Процедура ПриЗаписи(Отказ)
	
	Если Не ДополнительныеСвойства.Свойство("ОбработкаСвязанныхДокументов") Тогда
		УПЖКХ_ОбщегоНазначенияСервер.ОбработатьСвязьДокументовВводаПоказанийИКорректировкиНачисленийПриЗаписи(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Процедура проведения документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если мУдалятьДвижения Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	КонецЕсли;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.КВП_КорректировкаНачислений.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, 
																										  Организация, Отказ);
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

// Отменяет движения документа по регистрам.
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	
КонецПроцедуры

// Процедура заполнения документа на основании.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КВП_РегистрацияОплаты") Тогда
		
		ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетКомиссииБанка;
		Организация = ДанныеЗаполнения.Организация;
		
		ОтбиратьПоОбъекту = Ложь;
		ОтбиратьПоУслуге  = Ложь;
		
		Если ЗначениеЗаполнено(Объект) Тогда
			
			// Если заполнен объект, то получим список лицевых счетов по объекту,
			// а далее будем отбирать л/с по этому списку.
			ОтбиратьПоОбъекту = Истина;
			
			ТаблицаОбъектов = КВП_СформироватьТаблицуОбъектовНачисления(ДатаКон, Объект);
			СтрокаОбъектовЛС = ТаблицаОбъектов.Найти("ЛицевыеСчета", "ТипОбъекта");
			Если СтрокаОбъектовЛС = Неопределено Тогда
				МассивОбъектов = Новый Массив;
			Иначе
				МассивОбъектов = СтрокаОбъектовЛС.СписокОбъектов.ВыгрузитьЗначения();
			КонецЕсли;
			
		Иначе
			// Если объект не заполнен, то просто установим объект из реквизита "Дом".
			Объект = ДанныеЗаполнения.Дом;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Услуга) Тогда
			ОтбиратьПоУслуге = Истина;
		Иначе
			// Если услуга не заполнена, то необходимо определять услугу из документа оплаты,
			// поэтому создадим временную таблицу, куда будем запоминать услуги, а потом свернем таблицу.
			ТаблицаУслугКомиссии = Новый ТаблицаЗначений;
			ТаблицаУслугКомиссии.Колонки.Добавить("Услуга");
		КонецЕсли;
		
		Для Каждого ТекСтрока Из ДанныеЗаполнения.РасшифровкаПлатежа Цикл
			
			Если ТекСтрока.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.КомиссияБанка
			  И (Не ОтбиратьПоОбъекту Или Не МассивОбъектов.Найти(ТекСтрока.Объект) = Неопределено)
			  И (Не ОтбиратьПоУслуге Или Услуга = ТекСтрока.Услуга) Тогда
				
				НоваяСтрока = Корректировки.Добавить();
				НоваяСтрока.ЛицевойСчет     = ТекСтрока.Объект;
				НоваяСтрока.Услуга          = ТекСтрока.Услуга;
				НоваяСтрока.МесяцНачисления = ТекСтрока.МесяцНачисления;
				НоваяСтрока.Начислено       = ТекСтрока.ДолгСумма;
				
				Если Не ОтбиратьПоУслуге Тогда
					НоваяСтрокаУслуги = ТаблицаУслугКомиссии.Добавить();
					НоваяСтрокаУслуги.Услуга = ТекСтрока.Услуга;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ОтбиратьПоУслуге Тогда
			ТаблицаУслугКомиссии.Свернуть("Услуга");
			Если ТаблицаУслугКомиссии.Количество() = 1 Тогда
				Услуга = ТаблицаУслугКомиссии[0].Услуга;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет расчет услуги аналогично алгоритму документа "Начисление услуг".
Процедура ПроизвестиРасчетУслуги()
	
	СтруктураПараметров = Новый Структура;
	
	// ОСОБЕННОСТЬ:
	// Если производится корректировка начисления за счет повышающего коэффициента,
	// то такую корректировку мы не можем пересчитать заново, так как она считается
	// как основное нормативное начисление, умноженное на повышающий коэффициент.
	// Поэтому мы пропустим стандартный перерасчет таких корректировки, а в конце процедуры
	// попробуем рассчитать с учетом перерасчета основного нормативного начисления.
	МассивСтрокКорректировкиНачисленийЗаСчетПовышения = Новый Массив;
	
	ИспользоватьУслугуОснование = Не (ВариантКорректировкиУслуг = Перечисления.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ОсновныеУслуги);
	
	Для Каждого ТекСтрока Из Корректировки Цикл
		
		// Пропускаем корректировки начислений за счет повышения,
		// попутно помещаем их в массив строк, который будем обрабатывать в конце процедуры.
		Если ТекСтрока.ВидНачисления = Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента Тогда
			МассивСтрокКорректировкиНачисленийЗаСчетПовышения.Добавить(ТекСтрока);
			Продолжить;
		КонецЕсли;
		
		ВсегоДнейЗаПериод = День(КонецМесяца(ТекСтрока.МесяцНачисления));
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("Период",      КонецМесяца(ТекСтрока.МесяцНачисления));
		СтруктураПараметров.Вставить("ДатаДок",     Дата);
		СтруктураПараметров.Вставить("Организация", Организация);
		СтруктураПараметров.Вставить("Услуга",      ?(ИспользоватьУслугуОснование И Не ТекСтрока.УслугаОснование.Пустая(),
		                                              ТекСтрока.УслугаОснование,
		                                              ТекСтрока.Услуга));
		
		// Для корректировки по временному отсутствию и по площади услуг, рассчитываемых по показаниям ИПУ,
		// подменим способ расчета и период расчета.
		// Это необходимо для перерасчета только точно того подпериода, когда услуга по ПУ была начислена по нормативу.
		// Случаи когда это возможно:
		// - подпериоды отсутствия показаний/ИПУ, когда расчет произведен по нормативу;
		// - подпериоды начисления ЗУ по собственному нормативу, когда по одной из услуг-оснований не действовал ИПУ.
		Если (ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ВременноеОтсутствие
			  ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПлощади)
		   И (ТекСтрока.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
			  ИЛИ ТекСтрока.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме) Тогда
			
			СтруктураПараметров.Вставить("СпособРасчета", Перечисления.КВП_СпособыРасчета.ПоНормамПотребления);
			
			Если ЗначениеЗаполнено(ТекСтрока.НачалоПериода) Тогда
				СтруктураПараметров.Вставить("НачалоПериода", ТекСтрока.НачалоПериода);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрока.КонецПериода) Тогда
				СтруктураПараметров.Вставить("КонецПериода", ТекСтрока.КонецПериода);
			КонецЕсли;
			
			// Дополнительно для корректировки ЗУ по собственному нормативу не нужно проверять назначение 
			// услуги на л/с, как для обычных услуг.
			Если ТекСтрока.ЗависимаяПоНормативу Тогда
				СтруктураПараметров.Вставить("НеПроверятьНазначение", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		// Стандартный расчет по услугам (в том числе составным) в разрезе периодов
		// с разным количеством проживающих по лицевому счету.
		ТаблицаНачислений = КВП_СформироватьТаблицуНачислений(Ссылка, СтруктураПараметров, ТекСтрока.ЛицевойСчет, 
															  мНастройкиУчетнойПолитикиТСЖ, ВсегоДнейЗаПериод, Истина);
		
		Если НЕ ПустаяСтрока(ТекСтрока.СоставнаяУслуга) Тогда
			ОтборСостУслуга = Новый Структура;
			ОтборСостУслуга.Вставить("СоставнаяУслуга", ТекСтрока.СоставнаяУслуга);
			СтрокиСостУслуга = ТаблицаНачислений.НайтиСтроки(ОтборСостУслуга);
			ТаблицаНачислений = ТаблицаНачислений.Скопировать(СтрокиСостУслуга);
		КонецЕсли;
		
		// Если производится корректировка зависимых услуг или учитываются зависимые услуги, пересчитаем сумму начисления с тарифом зависимой услуги.
		Если Не ВариантКорректировкиУслуг = Перечисления.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ОсновныеУслуги И Не ТекСтрока.УслугаОснование.Пустая() Тогда
			ТекТариф = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(ТекСтрока.МесяцНачисления), 
													Организация, 
													ТекСтрока.Услуга, 
													ТекСтрока.ЛицевойСчет);
			ТаблицаНачислений.ЗаполнитьЗначения(ТекТариф, "Тариф");
			ВсегоДнейНачислено = ТаблицаНачислений.Итог("ДнейНачислено");
			ВсегоДнейНачислено = ?(ВсегоДнейНачислено = 0, День(КонецМесяца(ТекСтрока.МесяцНачисления)), ВсегоДнейНачислено);
			Для Каждого ТекСтрокаЛС ИЗ ТаблицаНачислений Цикл
				ТекСтрокаЛС.Начислено = ТекСтрокаЛС.Тариф * ТекСтрокаЛС.Количество * ТекСтрокаЛС.ДнейНачислено / ВсегоДнейНачислено;
			КонецЦикла;
		КонецЕсли;
		
		ТекСтрока.ТекущийРасчет    = ТаблицаНачислений.Итог("Начислено");
		ТекСтрока.СуммаПерерасчета = ТекСтрока.ТекущийРасчет - ТекСтрока.Начислено;
		//Позолотина++
		ТарифПослеИзм = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(ТекСтрока.МесяцНачисления), Организация, ТекСтрока.Услуга,      //петрова был ПериодКорректировки
		ТекСтрока.ЛицевойСчет);
		ТекСтрока.ТарифПослеИзм = ?(ТарифПослеИзм = 0, ТекСтрока.ТарифДоИзм, ТарифПослеИзм);								
		ТекСтрока.КолПослеИзм = ТекСтрока.СуммаПерерасчета / ТекСтрока.ТарифПослеИзм;
		// Позолотина--
		
	КонецЦикла;
	
	// Выполним попытку пересчета начислений за счет повышающего коэффициента,
	// опираясь на перерасчет основных нормативных начислений.
	Для Каждого ТекСтрокаКорректировкиНачисленийЗаСчетПовышения Из МассивСтрокКорректировкиНачисленийЗаСчетПовышения Цикл
		
		// Определим структура поиска строки с корректировкой нормативного начисления.
		СтруктураПоиска = Новый Структура("ВидНачисления, ЛицевойСчет, Услуга, УслугаОснование, НачалоПериода, КонецПериода");
		
		// Заполним основные параметра поиска по данным текущей строки.
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрокаКорректировкиНачисленийЗаСчетПовышения);
		
		// Нужно искать коррекировку начисления по нормативу при отсутствии ИПУ.
		СтруктураПоиска.ВидНачисления = Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу;
		
		// Если такая строка есть, рассчитаем текущую корректировку по ее данным.
		СтрокиКорректировкиНачисленияПоНормативу = Корректировки.НайтиСтроки(СтруктураПоиска);
		Если СтрокиКорректировкиНачисленияПоНормативу.Количество() > 0 Тогда
			
			ДанныеКорректировкиНачисленияПоНормативу = СтрокиКорректировкиНачисленияПоНормативу[0];
			
			// Получим коэффициент изменения начисления по нормативу.
			КоэффициентПерерасчета = ?(ДанныеКорректировкиНачисленияПоНормативу.Начислено = 0, 0, ДанныеКорректировкиНачисленияПоНормативу.ТекущийРасчет / ДанныеКорректировкиНачисленияПоНормативу.Начислено);
			
			// Рассчитаем сумму перерасчета текущей корректировки начисления за счет повышения,
			// умножив исходную сумму начисления на коэффициент перерасчета.
			ТекСтрокаКорректировкиНачисленийЗаСчетПовышения.ТекущийРасчет = ТекСтрокаКорректировкиНачисленийЗаСчетПовышения.Начислено * КоэффициентПерерасчета;
			
			// Стандартный расчет суммы перерасчета.
			ТекСтрокаКорректировкиНачисленийЗаСчетПовышения.СуммаПерерасчета = ТекСтрокаКорректировкиНачисленийЗаСчетПовышения.ТекущийРасчет - ТекСтрокаКорректировкиНачисленийЗаСчетПовышения.Начислено;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка реквизитов документа.
	ПроверяемыеРеквизиты.Добавить("Организация");
	
	// Проверка реквизитов табличной части документа.
	ПроверяемыеРеквизиты.Добавить("Корректировки.ЛицевойСчет");
	ПроверяемыеРеквизиты.Добавить("Корректировки.Услуга");
	ПроверяемыеРеквизиты.Добавить("Корректировки.МесяцНачисления");
	
	// Проверим заполнение реквизита "Сумма перерасчета".
	Если НЕ ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений 
	   И НЕ ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПлощади 
	   И НЕ ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.ВременноеОтсутствие Тогда
		ПроверяемыеРеквизиты.Добавить("Корректировки.СуммаПерерасчета");
	КонецЕсли;
	
	// Проверим заполнение полей "Льготник" и "Льготная категория" при разделе учета "Льготы".
	Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений Тогда
		
		Для Каждого ТекСтрокаКорректиовки Из Корректировки Цикл
			
			Если Не ТекСтрокаКорректиовки.СуммаЛьготы = 0 Тогда
				Если ТекСтрокаКорректиовки.Льготник.Пустая() Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке " + ТекСтрокаКорректиовки.НомерСтроки + " не заполнено поле ""Льготник""", Отказ);
				КонецЕсли;
				Если ТекСтрокаКорректиовки.ЛьготнаяКатегория.Пустая() Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке " + ТекСтрокаКорректиовки.НомерСтроки + " не заполнено поле ""Льготная категория""", Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Корректировать начисления по добровольному страхованию нельзя. Надо выполнить проверку: если
	// в таблице с корректировками присутствуют услуги добровольного страхования, запретить проводить
	// документ.
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		СтрокиСтрахования = Корректировки.НайтиСтроки(Новый Структура("Услуга", УслугаДобровольногоСтрахования));
		
		Если Не СтрокиСтрахования.Количество() = 0 Тогда
			Отказ = Истина;
			
			Для Каждого СтрокаСтрахования Из СтрокиСтрахования Цикл
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке " + СтрокаСтрахования.НомерСтроки + " указана услуга добровольного страхования, начисления по которой нельзя корректировать.");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияПеременных

мЗависимыеУслугиПоОрганизациям          = Константы.УПЖКХ_НачислениеЗависимыхУслугВРазрезеОрганизаций.Получить();
мЗависимыеУслугиПоСобственномуНормативу = Константы.УПЖКХ_НачислятьЗависимуюУслугуПоСобственномуНормативу.Получить();
УказыватьКоличествоПрожИЗарегЧислами    = Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить();

ДлинаСуток = 24 * 60 * 60;

НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

#КонецОбласти

#КонецЕсли
