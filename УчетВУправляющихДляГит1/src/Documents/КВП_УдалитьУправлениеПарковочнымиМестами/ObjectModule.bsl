
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

// Формирует заголовок документа.
//
// Возвращаемое значение:
//  Строка – заголовок документа
//
Функция ЗаголовокДокумента() Экспорт

	Если ВидОперации = Перечисления.КВП_УдалитьВидыОперацийСПарковочнымМестом.НазначениеВладельца Тогда
		ТекстЗаголовка = "Назначение владельца";
	ИначеЕсли ВидОперации = Перечисления.КВП_УдалитьВидыОперацийСПарковочнымМестом.СнятиеВладельца Тогда
		ТекстЗаголовка = "Снятие владельца";
	Иначе
		ТекстЗаголовка = "";
	КонецЕсли;

	Возврат ТекстЗаголовка;

КонецФункции // ЗаголовокФормы()

// Движение документа по регистру КВП_СведенияОПарковочныхМестах.
Процедура ДвижениеПоРегиструСведенияОПарковочныхМестах(СтруктураШапкиДокумента, Отказ, Заголовок)

	//Если ВидОперации = Перечисления.КВП_ВидыОперацийСПарковочнымМестом.НазначениеВладельца Тогда
	//	НовыйВладелец = ВладелецПарковочногоМеста;
	//Иначе
	//	НовыйВладелец = Неопределено;
	//КонецЕсли;

	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	КВП_СведенияОПарковочныхМестахСрезПоследних.Период
	//|ИЗ
	//|	РегистрСведений.КВП_СведенияОПарковочныхМестах.СрезПоследних(, 
	//|						ПарковочноеМесто = &ПарковочноеМесто) КАК КВП_СведенияОПарковочныхМестахСрезПоследних";
	//
	//Для Каждого СтрокаПарковочныеМеста Из ПарковочныеМеста Цикл
	//	Если Не СтрокаПарковочныеМеста.ПарковочноеМесто.ВладелецОбъекта = НовыйВладелец Тогда
	//		Запрос.УстановитьПараметр("ПарковочноеМесто", СтрокаПарковочныеМеста.ПарковочноеМесто);
	//		Выборка = Запрос.Выполнить().Выбрать();
	//		Если Выборка.Следующий() Тогда
	//			Если Дата < Выборка.Период Тогда
	//				Продолжить;
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		ПарковочноеМестоОбъект = СтрокаПарковочныеМеста.ПарковочноеМесто.ПолучитьОбъект();
	//		ПарковочноеМестоОбъект.ВладелецОбъекта = НовыйВладелец;
	//		КВП_ЗаписатьОбъект(ПарковочноеМестоОбъект);
	//	КонецЕсли;
	//КонецЦикла;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.КВП_УдалитьВидыОперацийСПарковочнымМестом.СнятиеВладельца Тогда

		Для Каждого СтрокаПарковочныеМеста Из ПарковочныеМеста Цикл

			Движение = Движения.КВП_УдалитьСведенияОПарковочныхМестах.Добавить();
			Движение.Период           = Дата;
			Движение.ПарковочноеМесто = СтрокаПарковочныеМеста.ПарковочноеМесто;
			Движение.ВладелецМеста    = Неопределено;
			Движение.СостояниеМеста   = СтрокаПарковочныеМеста.СостояниеМеста;
			
		КонецЦикла;

	Иначе

		Для Каждого СтрокаПарковочныеМеста Из ПарковочныеМеста Цикл

			Движение = Движения.КВП_УдалитьСведенияОПарковочныхМестах.Добавить();
			Движение.Период    = СтрокаПарковочныеМеста.ДатаНачала;
			Движение.ПарковочноеМесто = СтрокаПарковочныеМеста.ПарковочноеМесто;
			Движение.ВладелецМеста    = СтруктураШапкиДокумента.ВладелецПарковочногоМеста;
			Движение.СостояниеМеста   = СтрокаПарковочныеМеста.СостояниеМеста;
			
			Если ЗначениеЗаполнено(СтрокаПарковочныеМеста.ДатаОкончания) Тогда
				Движение = Движения.КВП_УдалитьСведенияОПарковочныхМестах.Добавить();
				Движение.Период    = СтрокаПарковочныеМеста.ДатаОкончания + 60*60*24;
				Движение.ПарковочноеМесто = СтрокаПарковочныеМеста.ПарковочноеМесто;
				Движение.ВладелецМеста    = Неопределено;
				Движение.СостояниеМеста   = СтрокаПарковочныеМеста.СостояниеМеста;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ДвижениеПоРегиструНазначенныхНачислений()

// По результату запроса по шапке документа формируем движения по регистрам.
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если ПарковочныеМеста.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДвижениеПоРегиструСведенияОПарковочныхМестах(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТА

#Область ОбработчикиСобытийДокумента

// Обработчик события "ОбработкаЗаполнения" документа.
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Процедура проведения документа.
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПараметрыПроведения = Документы.КВП_УдалитьУправлениеПарковочнымиМестами.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	
	Если Не Отказ Тогда
	
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверки заполнения документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка реквизитов табличной части документа.
	ПроверяемыеРеквизиты.Добавить("ВладелецПарковочногоМеста");
	ПроверяемыеРеквизиты.Добавить("Паркинг");
	
	ПроверяемыеРеквизиты.Добавить("ПарковочныеМеста.ПарковочноеМесто");
	Если ВидОперации = Перечисления.КВП_УдалитьВидыОперацийСПарковочнымМестом.НазначениеВладельца Тогда
		ПроверяемыеРеквизиты.Добавить("ПарковочныеМеста.ДатаНачала");
	КонецЕсли;
	
	Если Не ВидОперации = Перечисления.КВП_УдалитьВидыОперацийСПарковочнымМестом.СнятиеВладельца Тогда
		
		Для Каждого СтрокаПарковочныеМеста Из ПарковочныеМеста Цикл
			
			// Проверим, не действует ли уже услуга на какой-либо из объектов.
			Запрос = Новый Запрос();
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_СведенияОПарковочныхМестахСрезПоследних.ПарковочноеМесто,
			|	КВП_СведенияОПарковочныхМестахСрезПоследних.ВладелецМеста
			|ИЗ
			|	РегистрСведений.Удалить_КВП_СведенияОПарковочныхМестах.СрезПоследних(
			|			&Дата,
			|			ПарковочноеМесто = &ПМ
			|				И НЕ Регистратор = &Ссылка) КАК КВП_СведенияОПарковочныхМестахСрезПоследних";
			
			Запрос.УстановитьПараметр("Дата",   СтрокаПарковочныеМеста.ДатаНачала);
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("ПМ",     СтрокаПарковочныеМеста.ПарковочноеМесто);
			
			ТаблицаМест = Запрос.Выполнить().Выбрать();
			Если ТаблицаМест.Следующий()
			   И НЕ ТаблицаМест.ВладелецМеста = Неопределено Тогда
			   УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке номер """
																+ СтрокаПарковочныеМеста.НомерСтроки 
																+ """ табличной части ""Парковочные места"": уже назначен владелец!", Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли