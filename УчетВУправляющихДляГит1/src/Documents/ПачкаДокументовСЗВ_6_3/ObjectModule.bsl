#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ПолныйПутьКИсточникуОшибки(СообщениеПользователю) Экспорт
	
	Поле = СообщениеПользователю.Поле;
	
	СтруктураПути = ПерсонифицированныйУчетКлиентСервер.СтруктураПутиКИсточникуОшибки(СообщениеПользователю.Поле);
		
	Если СтруктураПути.ИндексСтроки <> Неопределено
		И СтруктураПути.ПутьКРеквизиту = "СведенияОЗаработке" Тогда
		
		Сотрудник = ЭтотОбъект[СтруктураПути.ПутьКРеквизиту][СтруктураПути.ИндексСтроки].Сотрудник;
		
		СтрокаТаблицыСотрудник = Сотрудники.Найти(Сотрудник, "Сотрудник");
		
		СтруктураПути.Родитель = ПерсонифицированныйУчетКлиентСервер.СтруктураПутиКОшибке();
		СтруктураПути.Родитель.ПутьКРеквизиту = "Сотрудники";
		СтруктураПути.Родитель.ИндексСтроки = СтрокаТаблицыСотрудник.НомерСтроки - 1;
		СтруктураПути.Родитель.ИмяРеквизитаТабличнойЧасти = "";
	КонецЕсли;
	
	Возврат СтруктураПути;
	
КонецФункции

Функция ДанныеДляПроверки()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("СведенияОЗаработке", СведенияОЗаработке);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_3Сотрудники.НомерСтроки,
	|	ПачкаДокументовСЗВ_6_3Сотрудники.Сотрудник,
	|	ПачкаДокументовСЗВ_6_3Сотрудники.СтраховойНомерПФР,
	|	ПачкаДокументовСЗВ_6_3Сотрудники.Фамилия,
	|	ПачкаДокументовСЗВ_6_3Сотрудники.Имя,
	|	ПачкаДокументовСЗВ_6_3Сотрудники.Отчество
	|ПОМЕСТИТЬ ВТЗастрахованныеЛица
	|ИЗ
	|	&Сотрудники КАК ПачкаДокументовСЗВ_6_3Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_3СведенияОЗаработке.НомерСтроки,
	|	ПачкаДокументовСЗВ_6_3СведенияОЗаработке.Сотрудник,
	|	ПачкаДокументовСЗВ_6_3СведенияОЗаработке.Месяц,
	|	ПачкаДокументовСЗВ_6_3СведенияОЗаработке.Заработок,
	|	ПачкаДокументовСЗВ_6_3СведенияОЗаработке.ОблагаетсяВзносами
	|ПОМЕСТИТЬ ВТСтрокиЗаработкаЗастрахованных
	|ИЗ
	|	&СведенияОЗаработке КАК ПачкаДокументовСЗВ_6_3СведенияОЗаработке";
	
	Запрос.Выполнить();
	
	КадровыйУчет.СоздатьВТФизическиеЛицаРаботавшиеВОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, Организация, Дата(ОтчетныйПериод, 1, 1), КонецГода(Дата(ОтчетныйПериод, 1, 1)));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(СведенияОНачисленномЗаработкеСЗВ63СведенияОЗаработке.Заработок) КАК Заработок,
	|	СведенияОНачисленномЗаработкеСЗВ63СведенияОЗаработке.Сотрудник
	|ПОМЕСТИТЬ ВТЗаработокЗастрахованных
	|ИЗ
	|	ВТСтрокиЗаработкаЗастрахованных КАК СведенияОНачисленномЗаработкеСЗВ63СведенияОЗаработке
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОНачисленномЗаработкеСЗВ63СведенияОЗаработке.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиЗаработкаЗастрахованных.Сотрудник,
	|	МИНИМУМ(СтрокиЗаработкаЗастрахованныхДубль.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТДвойныеМесяцы
	|ИЗ
	|	ВТСтрокиЗаработкаЗастрахованных КАК СтрокиЗаработкаЗастрахованных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиЗаработкаЗастрахованных КАК СтрокиЗаработкаЗастрахованныхДубль
	|		ПО СтрокиЗаработкаЗастрахованных.Сотрудник = СтрокиЗаработкаЗастрахованныхДубль.Сотрудник
	|			И СтрокиЗаработкаЗастрахованных.Месяц = СтрокиЗаработкаЗастрахованныхДубль.Месяц
	|			И СтрокиЗаработкаЗастрахованных.НомерСтроки > СтрокиЗаработкаЗастрахованныхДубль.НомерСтроки
	|ГДЕ
	|	СтрокиЗаработкаЗастрахованныхДубль.НомерСтроки ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиЗаработкаЗастрахованных.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗастрахованныеЛицаДубль.НомерСтроки) КАК НомерПовторяющейсяСтроки,
	|	ЗастрахованныеЛица.Сотрудник,
	|	ЗастрахованныеЛица.НомерСтроки КАК НомерСтроки,
	|	ЗастрахованныеЛица.СтраховойНомерПФР,
	|	ЗастрахованныеЛица.Фамилия,
	|	ЗастрахованныеЛица.Имя,
	|	ЗастрахованныеЛица.Отчество,
	|	ДанныеСотрудников.Наименование КАК СотрудникНаименование,
	|	ВЫБОР
	|		КОГДА ФизическиеЛицаРаботавшиеВОрганизации.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СотрудникРаботаетВОрганизации,
	|	ЕСТЬNULL(ЗаработокЗастрахованных.Заработок, 0) КАК ВсегоЗаработка,
	|	ЗаработокПоМесяцам.Заработок,
	|	ЗаработокПоМесяцам.ОблагаетсяВзносами,
	|	ЗаработокПоМесяцам.Месяц,
	|	ЗаработокПоМесяцам.НомерСтроки КАК НомерСтрокиЗаработок,
	|	ДвойныеМесяцы.НомерСтроки КАК МесяцыНомерСтрокиДубль,
	|	ДублиСтраховыеНомера.НомерСтроки КАК НомерПовторяющейсяСтрокиСтраховойНомер
	|ИЗ
	|	ВТЗастрахованныеЛица КАК ЗастрахованныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ДанныеСотрудников
	|		ПО ЗастрахованныеЛица.Сотрудник = ДанныеСотрудников.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаРаботавшиеВОрганизации КАК ФизическиеЛицаРаботавшиеВОрганизации
	|		ПО ЗастрахованныеЛица.Сотрудник = ФизическиеЛицаРаботавшиеВОрганизации.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеЛица КАК ЗастрахованныеЛицаДубль
	|		ПО ЗастрахованныеЛица.Сотрудник = ЗастрахованныеЛицаДубль.Сотрудник
	|			И ЗастрахованныеЛица.НомерСтроки > ЗастрахованныеЛицаДубль.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаработокЗастрахованных КАК ЗаработокЗастрахованных
	|		ПО ЗастрахованныеЛица.Сотрудник = ЗаработокЗастрахованных.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиЗаработкаЗастрахованных КАК ЗаработокПоМесяцам
	|		ПО ЗастрахованныеЛица.Сотрудник = ЗаработокПоМесяцам.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвойныеМесяцы КАК ДвойныеМесяцы
	|		ПО ЗастрахованныеЛица.Сотрудник = ДвойныеМесяцы.Сотрудник
	|			И (ЗаработокПоМесяцам.НомерСтроки = ДвойныеМесяцы.НомерСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеЛица КАК ДублиСтраховыеНомера
	|		ПО ЗастрахованныеЛица.НомерСтроки > ДублиСтраховыеНомера.НомерСтроки
	|			И ЗастрахованныеЛица.СтраховойНомерПФР = ДублиСтраховыеНомера.СтраховойНомерПФР
	|			И ЗастрахованныеЛица.Сотрудник <> ДублиСтраховыеНомера.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗастрахованныеЛица.Сотрудник,
	|	ЗастрахованныеЛица.НомерСтроки,
	|	ЗастрахованныеЛица.СтраховойНомерПФР,
	|	ЗастрахованныеЛица.Фамилия,
	|	ЗастрахованныеЛица.Имя,
	|	ЗастрахованныеЛица.Отчество,
	|	ДанныеСотрудников.Наименование,
	|	ЕСТЬNULL(ЗаработокЗастрахованных.Заработок, 0),
	|	ВЫБОР
	|		КОГДА ФизическиеЛицаРаботавшиеВОрганизации.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЗаработокПоМесяцам.Заработок,
	|	ЗаработокПоМесяцам.ОблагаетсяВзносами,
	|	ЗаработокПоМесяцам.Месяц,
	|	ЗаработокПоМесяцам.НомерСтроки,
	|	ДвойныеМесяцы.НомерСтроки,
	|	ДублиСтраховыеНомера.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	НомерСтрокиЗаработок";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПравилаПроверкиДанныхЗЛ()
	
	ПравилаПроверки = Новый Массив;
	
	ПравилоПроверкиСНИЛС = ПерсонифицированныйУчет.НовыйПравилоПроверкиДанныхЗЛ();
	ПравилоПроверкиСНИЛС.ОбязательноКЗаполнению = Истина;
	ПравилоПроверкиСНИЛС.ПроверяемыйЭлемент = "СтраховойНомерПФР";
	ПравилоПроверкиСНИЛС.ПутьКДанным = "СтраховойНомерПФР";
	ПравилоПроверкиСНИЛС.ПредставлениеПроверяемогоЭлемента = НСтр("ru = 'СНИЛС'");
	
	ПравилаПроверки.Добавить(ПравилоПроверкиСНИЛС);
	
	ПравилоПроверкиФамилия = ПерсонифицированныйУчет.НовыйПравилоПроверкиДанныхЗЛ();
	ПравилоПроверкиФамилия.ОбязательноКЗаполнению = Истина;
	ПравилоПроверкиФамилия.ПроверяемыйЭлемент = "Фамилия";
	ПравилоПроверкиФамилия.ПутьКДанным = "Фамилия";
	ПравилоПроверкиФамилия.ПредставлениеПроверяемогоЭлемента = НСтр("ru = 'Фамилия'");
	
	ПравилаПроверки.Добавить(ПравилоПроверкиФамилия);
	
	ПравилоПроверкиИмя = ПерсонифицированныйУчет.НовыйПравилоПроверкиДанныхЗЛ();
	ПравилоПроверкиИмя.ОбязательноКЗаполнению = Истина;
	ПравилоПроверкиИмя.ПроверяемыйЭлемент = "Имя";
	ПравилоПроверкиИмя.ПутьКДанным = "Имя";
	ПравилоПроверкиИмя.ПредставлениеПроверяемогоЭлемента = НСтр("ru = 'Имя'");
	
	ПравилаПроверки.Добавить(ПравилоПроверкиИмя);
	
	ПравилоПроверкиОтчество = ПерсонифицированныйУчет.НовыйПравилоПроверкиДанныхЗЛ();
	ПравилоПроверкиОтчество.ОбязательноКЗаполнению = Ложь;
	ПравилоПроверкиОтчество.ПроверяемыйЭлемент = "Отчество";
	ПравилоПроверкиОтчество.ПутьКДанным = "Отчество";
	ПравилоПроверкиОтчество.ПредставлениеПроверяемогоЭлемента = НСтр("ru = 'Отчество'");
	
	ПравилаПроверки.Добавить(ПравилоПроверкиОтчество);
	
	Возврат ПравилаПроверки;
	
КонецФункции

Функция ДанныеЗастрахованногоЛица(ВыборкаПоСтрокамДокумента)
	
	ДанныеЗастрахованногоЛица = Новый Структура();
	ДанныеЗастрахованногоЛица.Вставить("ФизическоеЛицо", ВыборкаПоСтрокамДокумента.Сотрудник);
	ДанныеЗастрахованногоЛица.Вставить("Наименование", ВыборкаПоСтрокамДокумента.СотрудникНаименование);
	ДанныеЗастрахованногоЛица.Вставить("СтраховойНомерПФР", ВыборкаПоСтрокамДокумента.СтраховойНомерПФР);
	ДанныеЗастрахованногоЛица.Вставить("Фамилия", ВыборкаПоСтрокамДокумента.Фамилия);
	ДанныеЗастрахованногоЛица.Вставить("Имя", ВыборкаПоСтрокамДокумента.Имя);
	ДанныеЗастрахованногоЛица.Вставить("Отчество", ВыборкаПоСтрокамДокумента.Отчество);
	
	Возврат ДанныеЗастрахованногоЛица;
	
КонецФункции

Процедура ПроверитьДанныеДокумента(Отказ = Ложь, НепроверяемыеРеквизиты = Неопределено) Экспорт
	
	Ошибки = Новый Массив;
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;	
	
	Если Не ДополнительныеСвойства.Свойство("НеПроверятьДанныеОрганизации") Тогда
		ПерсонифицированныйУчет.ПроверитьДанныеОрганизации(ЭтотОбъект, Организация, Отказ);
	КонецЕсли;	
	
	Если ОтчетныйПериод >= 2013 Тогда
		
		ТекстСообщения = НСтр("ru = 'Формы СЗВ-6-3 представлялись до 2012 года включительно. Для формирования сведений, начиная с 2013 года, используйте форму СЗВ-6-4.'");
	
		ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияЭлементаДокумента(
			Ошибки, 
			Ссылка, 
			ТекстСообщения, 
			"ОтчетныйПериод", 
			Отказ);
	КонецЕсли;	
	
	НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Наименование");
	
	КоличествоДокументов = Сотрудники.Количество();
	Если КоличествоДокументов > 200 Тогда
		ТекстОшибки = ТекстОшибки = НСтр("ru = 'В документе должно быть не более 200 форм.'"); 
		ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияЭлементаДокумента(Ошибки, Ссылка, ТекстОшибки, , Отказ);
	КонецЕсли;
	
	ВыборкаПоСтрокамДокумента = ДанныеДляПроверки();
	
	ПравилаПроверкиДанныхЗЛ = ПравилаПроверкиДанныхЗЛ();
	
	Если НеПроверяемыеРеквизиты <> Неопределено Тогда
		Для Каждого Правило Из ПравилаПроверкиДанныхЗЛ Цикл
			Если Правило.ОбязательноКЗаполнению Тогда
				НеПроверяемыеРеквизиты.Добавить("Сотрудники." + Правило.ПутьКДанным);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Пока ВыборкаПоСтрокамДокумента.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
			
			Если Не ВыборкаПоСтрокамДокумента.СотрудникРаботаетВОрганизации
				И Не ТипДоговора = Перечисления.ТипыДоговоровСЗВ63.ГражданскоПравовой Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1 в течение отчетного периода не работал в организации %2'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование, НаименованиеОрганизации); 
				
				ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияСпискаСотрудников(Ошибки, Ссылка, ВыборкаПоСтрокамДокумента.НомерСтроки, ТекстОшибки, "Сотрудник", Отказ);	
			КонецЕсли;
			
			ДанныеЗастрахованногоЛица = ДанныеЗастрахованногоЛица(ВыборкаПоСтрокамДокумента);
			
			ПерсонифицированныйУчет.ПроверитьДанныеЗастрахованногоЛица(ДанныеЗастрахованногоЛица, ВыборкаПоСтрокамДокумента.НомерСтроки, ПравилаПроверкиДанныхЗЛ, Ошибки, Ссылка, Отказ);
			
			// Контроль дубля строк
			Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НомерПовторяющейсяСтроки) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1 указан в документе дважды'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование);
				
				ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияСпискаСотрудников(Ошибки, Ссылка, ВыборкаПоСтрокамДокумента.НомерСтроки, ТекстОшибки, "Сотрудник", Отказ);
			ИначеЕсли ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НомерПовторяющейсяСтрокиСтраховойНомер) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: информация о сотруднике с таким же страховым номером была введена в документе ранее.'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование);
				
				ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияСпискаСотрудников(Ошибки, Ссылка, ВыборкаПоСтрокамДокумента.НомерСтроки, ТекстОшибки, "СтраховойНомерПФР",  Отказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВсегоЗаработка) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: отсутствуют данные о заработке'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование);
				
				ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуНеЗаполненыДанныеОЗаработке(Ошибки, Ссылка, ВыборкаПоСтрокамДокумента.НомерСтроки, ТекстОшибки, Отказ);
			КонецЕсли;	
				
			Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НомерСтрокиЗаработок) Тогда
				
				Пока ВыборкаПоСтрокамДокумента.СледующийПоЗначениюПоля("НомерСтрокиЗаработок") Цикл
					
					Если ВыборкаПоСтрокамДокумента.Месяц < 1
						Или ВыборкаПоСтрокамДокумента.Месяц > 13 Тогда
						
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: неверно указан месяц'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование);
						
						ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуДанныхОЗаработкеЗаМесяц(Ошибки, 
								Ссылка,
								ВыборкаПоСтрокамДокумента.НомерСтроки, 
								ВыборкаПоСтрокамДокумента.НомерСтрокиЗаработок, 
								ТекстОшибки, 
								"Месяц",
								Отказ);
						
						МесяцСтрокой = "";
					Иначе
						МесяцСтрокой = Формат(Дата(ОтчетныйПериод, ВыборкаПоСтрокамДокумента.Месяц, 1), "ДФ='ММММ гггг '");
					КонецЕсли;
					
					Если ВыборкаПоСтрокамДокумента.Заработок < 0 Тогда
						
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: за %2 указан отрицательный заработок'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование, МесяцСтрокой);
						
						ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуДанныхОЗаработкеЗаМесяц(Ошибки, 
								Ссылка,
								ВыборкаПоСтрокамДокумента.НомерСтроки, 
								ВыборкаПоСтрокамДокумента.НомерСтрокиЗаработок, 
								ТекстОшибки, 
								"Заработок",
								Отказ);
					КонецЕсли;
					
					Если ВыборкаПоСтрокамДокумента.ОблагаетсяВзносами < 0 Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: за %2 указана отрицательная облагаемая сумма'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование, МесяцСтрокой);
						
						ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуДанныхОЗаработкеЗаМесяц(Ошибки, 
								Ссылка,
								ВыборкаПоСтрокамДокумента.НомерСтроки, 
								ВыборкаПоСтрокамДокумента.НомерСтрокиЗаработок, 
								ТекстОшибки, 
								"ОблагаетсяВзносами",
								Отказ);
						
					КонецЕсли;
					
					Если ВыборкаПоСтрокамДокумента.ОблагаетсяВзносами > ВыборкаПоСтрокамДокумента.Заработок  Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: в данных о заработке за %2 сумма, облагаемая взносами, превышает сумму начисленного заработка.'"), 
								ВыборкаПоСтрокамДокумента.СотрудникНаименование,
								МесяцСтрокой);
						
						ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуДанныхОЗаработкеЗаМесяц(Ошибки, 
								Ссылка,
								ВыборкаПоСтрокамДокумента.НомерСтроки, 
								ВыборкаПоСтрокамДокумента.НомерСтрокиЗаработок, 
								ТекстОшибки, 
								"ОблагаетсяВзносами",
								Отказ);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.МесяцыНомерСтрокиДубль) Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: данные о заработке за %2 введены несколько раз.'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование, МесяцСтрокой);
						
						ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуДанныхОЗаработкеЗаМесяц(Ошибки, 
								Ссылка,
								ВыборкаПоСтрокамДокумента.НомерСтроки, 
								ВыборкаПоСтрокамДокумента.НомерСтрокиЗаработок, 
								ТекстОшибки, 
								"Месяц",
								Отказ);
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОкончаниеОтчетногоПериода() Экспорт
	
	Возврат КонецГода(Дата(?(ОтчетныйПериод <= 0, 1, ОтчетныйПериод), 12, 31));
	
КонецФункции

#КонецОбласти

#КонецЕсли
