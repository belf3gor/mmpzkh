#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Год = Макс(2017, Год(ТекущаяДатаСеанса()) - 1);
		ЗаполнитьОтчетныйПериод(ЭтаФорма);
		Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Исходная;
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначенияПервоначальногоЗаполнения());
		ПриПолученииДанныхНаСервере();
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
			ЗаполнитьЗаписиОСтажеПриКопировании(Параметры.ЗначениеКопирования);
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда 
		ДокументОснование = ТекущийОбъект.Ссылка;
	Иначе 
		ДокументОснование = Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ПолучитьСсылку();
		ТекущийОбъект.УстановитьСсылкуНового(ДокументОснование);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЗаписиОСтажеСведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ДокументОснование);
	
	НомерСтроки = 1;
	Для Каждого ДанныеОСтаже Из ЗаписиОСтаже Цикл 
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеОСтаже);
		НоваяЗапись.ДокументОснование = ДокументОснование;
		НоваяЗапись.Организация = ТекущийОбъект.Организация;
		НоваяЗапись.НомерСтрокиДокумента = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписиОСтаже", НаборЗаписей);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьДанныхФормы();
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РедактированиеДанныхСтажаПоСотруднику" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ПриИзмененииДанныхДокументаПоСотруднику(Параметр.АдресВоВременномХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ"));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НеПроверятьДанныеСотрудников");
	
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда 
		Отказ = Истина;
	КонецЕсли;	
	
	ПерсонифицированныйУчет.ПроверитьДанныеСотрудников(ТекущийОбъект.Сотрудники, ТекущийОбъект.ОтчетныйПериод, ТекущийОбъект.ОкончаниеОтчетногоПериода, ЗаписиОСтаже, Отказ);
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПроверяемыеРеквизиты, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ГодПриИзменении(Элемент)
	
	ЗаполнитьОтчетныйПериод(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСведенийПриИзменении(Элемент)
	
	ТипСведенийПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагБлокировкиДокументаПриИзменении(Элемент)
	
	ФлагБлокировкиДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыСотрудники

&НаКлиенте
Процедура СотрудникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Объект.ТипСведений = ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии") Тогда 
		Элемент.ТекущиеДанные.ДатаВыходаНаПенсию = Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	СотрудникиПередУдалениемНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СотрудникиДатаВыходаНаПенсию" Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияКарточкиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
	СписокСотрудников = Новый Массив;
	Для Каждого Сотрудник Из ВыбранноеЗначение Цикл
		СписокСотрудников.Добавить(Сотрудник);
	КонецЦикла;
	
	ЗаполнитьДанныеСотрудников(СписокСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда 
		Возврат;
	КонецЕсли;
	
	СотрудникиПриОкончанииРедактированияНаСервере(ТекущиеДанные.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
	СотрудникиСотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиДатаВыходаНаПенсиюПриИзменении(Элемент)
	
	СотрудникиДатаВыходаНаПенсиюПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДосрочноеНазначениеПенсии

&НаКлиенте
Процедура ДосрочноеНазначениеПенсииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДосрочноеНазначениеПенсии.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДосрочноеНазначениеПенсииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ОснованиеВыслугиЛет") Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.ДосрочноеНазначениеПенсии.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуЗавершение", ЭтотОбъект, Команда);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуЗавершение(Результат, Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьДокументНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПерсонифицированныйУчетКлиент.ПодобратьФизическихЛиц(Элементы.Сотрудники, Объект.Организация, АдресСпискаПодобранныхСотрудников());
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	ОчиститьСообщения();

	Отказ = Ложь;
	ПроверкаЗаполненияДокумента(Отказ);
	ПроверкаСтороннимиПрограммами(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ПФР");	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВПФР(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, Параметры) Экспорт
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);			
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, Параметры) Экспорт
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ФлагБлокировкиДокумента = Объект.ДокументПринятВПФР;	
	ПрочитатьЗаписиОСтаже();
	УстановитьДоступностьДанныхФормы();
	УстановитьСвойстваЭлементовФормы();
	
	ПерсонифицированныйУчет.УстановитьСвязиПараметровВыбораСотрудников(Элементы.СотрудникиСотрудник);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗаписиОСтаже()
	
	ЗаписиОСтаже.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаписиОСтаже.Сотрудник КАК Сотрудник,
	               |	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	               |	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	               |	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	               |	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	               |	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	               |	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
	               |	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	               |	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	               |	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	               |	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	               |	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	               |	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	               |	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	               |	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
	               |	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	               |	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
	               |	ЗаписиОСтаже.ЗамещениеГосударственныхМуниципальныхДолжностей КАК ЗамещениеГосударственныхМуниципальныхДолжностей
	               |ИЗ
	               |	РегистрСведений.ЗаписиОСтажеСведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК ЗаписиОСтаже
	               |ГДЕ
	               |	ЗаписиОСтаже.ДокументОснование = &ДокументОснование";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл 
		ЗаполнитьЗначенияСвойств(ЗаписиОСтаже.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДанныхФормы()
	
	Если Объект.ДокументПринятВПФР Тогда  
		ТолькоПросмотр = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"СтраницаДосрочноеНазначениеПенсии", 
		"Доступность", 
		Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Исходная 
			И ПолучитьФункциональнуюОпцию("ИспользуютсяРаботыСДосрочнойПенсией", Новый Структура("Организация", Объект.Организация)));
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"Страницы", 
		"ОтображениеСтраниц", 
		?(ПолучитьФункциональнуюОпцию("ИспользуютсяРаботыСДосрочнойПенсией"), ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"НачисленыВзносыНаОПС", 
		"Доступность", 
		Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии); 
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"НачисленыВзносыПоДТ", 
		"Доступность", 
		Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"СотрудникиДатаВыходаНаПенсию", 
		"Видимость", 
		Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ГруппаТребуетсяПерезаполнение", 
		"Видимость", 
		Не ФлагБлокировкиДокумента И Не Объект.АктуальныйФорматФайла);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапрашиваемыеЗначенияПервоначальногоЗаполнения()
	
	ЗапрашиваемыеЗначения = ЗапрашиваемыеЗначенияЗаполненияПоОрганизации();
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапрашиваемыеЗначенияЗаполненияПоОрганизации()
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции 	

&НаСервере
Процедура ЗаполнитьДокументНаСервере()
	
	Объект.Сотрудники.Очистить();
	Объект.ДосрочноеНазначениеПенсии.Очистить();
	ЗаписиОСтаже.Очистить();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.СоздатьВТПерсональныеДанныеСотрудников(МенеджерВременныхТаблиц, Объект.Организация, Объект.Год, Объект.Дата);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПерсональныеДанные.Сотрудник,
	               |	ПерсональныеДанные.Фамилия,
	               |	ПерсональныеДанные.Имя,
	               |	ПерсональныеДанные.Отчество,
	               |	ПерсональныеДанные.СтраховойНомерПФР,
	               |	ПерсональныеДанные.СотрудникУволен
	               |ИЗ
	               |	ВТПерсональныеДанныеСотрудников КАК ПерсональныеДанные";
								
	Выборка = Запрос.Выполнить().Выбрать();							
	
	СписокСотрудников = Новый Массив;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Сотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии Тогда 
			НоваяСтрока.ДатаВыходаНаПенсию = Объект.Дата;
		КонецЕсли;
		СписокСотрудников.Добавить(Выборка.Сотрудник);
	КонецЦикла;
	
	ЗаполнитьДанныеОСтажеСотрудников(СписокСотрудников);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСотрудников(СписокСотрудников)
	
	Год = ?(ЗначениеЗаполнено(Объект.Год), Объект.Год, Год(ТекущаяДатаСеанса()));
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.СоздатьВТПерсональныеДанныеСотрудников(МенеджерВременныхТаблиц, Объект.Организация, Год, Объект.Дата, СписокСотрудников);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПерсональныеДанные.Сотрудник,
	               |	ПерсональныеДанные.Фамилия,
	               |	ПерсональныеДанные.Имя,
	               |	ПерсональныеДанные.Отчество,
	               |	ПерсональныеДанные.СтраховойНомерПФР,
	               |	ПерсональныеДанные.СотрудникУволен
	               |ИЗ
	               |	ВТПерсональныеДанныеСотрудников КАК ПерсональныеДанные";
								
	Выборка = Запрос.Выполнить().Выбрать();							
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Сотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии Тогда 
			НоваяСтрока.ДатаВыходаНаПенсию = Объект.Дата;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДанныеОСтажеСотрудников(СписокСотрудников);
	ЗаполнитьДанныеОФактеНачисленияВзносов();
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиСотрудникПриИзмененииНаСервере()
	
	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	Год = ?(ЗначениеЗаполнено(Объект.Год), Объект.Год, Год(ТекущаяДатаСеанса()));
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.СоздатьВТПерсональныеДанныеСотрудников(МенеджерВременныхТаблиц, Объект.Организация, Год, Объект.Дата, СтрокаСотрудника.Сотрудник);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПерсональныеДанные.Сотрудник,
	               |	ПерсональныеДанные.Фамилия,
	               |	ПерсональныеДанные.Имя,
	               |	ПерсональныеДанные.Отчество,
	               |	ПерсональныеДанные.СтраховойНомерПФР,
	               |	ПерсональныеДанные.СотрудникУволен
	               |ИЗ
	               |	ВТПерсональныеДанныеСотрудников КАК ПерсональныеДанные";
								
	Выборка = Запрос.Выполнить().Выбрать();							
	
	СтруктураПоиска = Новый Структура("Сотрудник");
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска.Сотрудник = Выборка.Сотрудник;
		НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() <> 0 Тогда 
			СтрокаСотрудника = НайденныеСтроки[0];
			ЗаполнитьЗначенияСвойств(СтрокаСотрудника, Выборка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура СотрудникиДатаВыходаНаПенсиюПриИзмененииНаСервере()
	
	ПерсонифицированныйУчетКлиентСервер.ДокументыРедактированияСтажаСотрудникиПередУдалением(Элементы.Сотрудники.ВыделенныеСтроки, Объект.Сотрудники, ЗаписиОСтаже);
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиПриОкончанииРедактированияНаСервере(Сотрудник)
	
	ДанныеОСтаже = ЗаписиОСтаже.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Если ДанныеОСтаже.Количество() > 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеОСтажеСотрудников(Сотрудник);
	ЗаполнитьДанныеОФактеНачисленияВзносов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОСтажеСотрудников(Сотрудники)
	
	СписокСотрудников = ?(ТипЗнч(Сотрудники) = Тип("Массив"), Сотрудники, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники));
	Год = ?(ЗначениеЗаполнено(Объект.Год), Объект.Год, Год(ТекущаяДатаСеанса()));
	
	ДатыВыходаНаПенсию = Неопределено;
	Если Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии Тогда 
		ДатыВыходаНаПенсию = Новый Соответствие;
		Для Каждого СтрокаСотрудника Из Объект.Сотрудники Цикл 
			Если СписокСотрудников.Найти(СтрокаСотрудника.Сотрудник) <> Неопределено Тогда 
				ДатыВыходаНаПенсию.Вставить(СтрокаСотрудника.Сотрудник, СтрокаСотрудника.ДатаВыходаНаПенсию);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.СоздатьВТДанныеСтажаПФР(
		МенеджерВременныхТаблиц, Объект.Организация, Год, СписокСотрудников, Объект.Ссылка);
		
	ДоговорыГПХ = Новый Массив;
	ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР);
	ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛДОГ);
	ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛАВТ);
		
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеОСтажеПФР.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТСлужащие
	               |ИЗ
	               |	ВТДанныеСтажаПФР КАК ДанныеОСтажеПФР
	               |ГДЕ
	               |	ДанныеОСтажеПФР.ЗамещениеГосударственныхМуниципальныхДолжностей <> ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеОСтажеПФР.ФизическоеЛицо
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеОСтажеПФР.ТерриториальныеУсловия) > 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеОСтажеПФР.ФизическоеЛицо КАК Сотрудник,
	               |	ДанныеОСтажеПФР.ДатаНачалаПериода КАК ДатаНачалаПериода,
	               |	ДанныеОСтажеПФР.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	               |	ДанныеОСтажеПФР.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	               |	ДанныеОСтажеПФР.ЗамещениеГосударственныхМуниципальныхДолжностей КАК ЗамещениеГосударственныхМуниципальныхДолжностей
	               |ИЗ
	               |	ВТДанныеСтажаПФР КАК ДанныеОСтажеПФР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСлужащие КАК Служащие
	               |		ПО ДанныеОСтажеПФР.ФизическоеЛицо = Служащие.ФизическоеЛицо
	               |			И (ДанныеОСтажеПФР.ЗамещениеГосударственныхМуниципальныхДолжностей <> ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ПустаяСсылка))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник,
	               |	ДатаНачалаПериода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПериодыСлужбыСотрудников = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		ТерриториальныеУсловия = Новый Соответствие;
		ПериодСлужбы = Новый Структура("Сотрудник,ДатаНачалаПериода,ДатаОкончанияПериода,ЗамещениеГосударственныхМуниципальныхДолжностей");
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ПериодСлужбы.ДатаНачалаПериода) Тогда 
				ЗаполнитьЗначенияСвойств(ПериодСлужбы, Выборка);
				ТерриториальныеУсловия.Вставить(Выборка.ТерриториальныеУсловия, Истина);
				Продолжить;
			КонецЕсли;
			Если ПериодСлужбы.ЗамещениеГосударственныхМуниципальныхДолжностей = Выборка.ЗамещениеГосударственныхМуниципальныхДолжностей
				И КонецДня(ПериодСлужбы.ДатаОкончанияПериода) + 1 = Выборка.ДатаНачалаПериода Тогда 
				ПериодСлужбы.ДатаОкончанияПериода = Выборка.ДатаОкончанияПериода;
				ТерриториальныеУсловия.Вставить(Выборка.ТерриториальныеУсловия, Истина);
			Иначе 
				Если ТерриториальныеУсловия.Количество() > 1 Тогда 
					ПериодыСлужбы = ПериодыСлужбыСотрудников[Выборка.Сотрудник];
					Если ПериодыСлужбы = Неопределено Тогда 
						ПериодыСлужбы = Новый Массив;
						ПериодыСлужбыСотрудников.Вставить(Выборка.Сотрудник, ПериодыСлужбы);
					КонецЕсли;
					ПериодыСлужбы.Добавить(ПериодСлужбы);
				КонецЕсли;
				ТерриториальныеУсловия = Новый Соответствие;
				ПериодСлужбы = Новый Структура("Сотрудник,ДатаНачалаПериода,ДатаОкончанияПериода,ЗамещениеГосударственныхМуниципальныхДолжностей");
				ЗаполнитьЗначенияСвойств(ПериодСлужбы, Выборка);
				ТерриториальныеУсловия.Вставить(Выборка.ТерриториальныеУсловия, Истина);
			КонецЕсли;
		КонецЦикла;
		Если ТерриториальныеУсловия.Количество() > 1 Тогда 
			ПериодыСлужбы = ПериодыСлужбыСотрудников[Выборка.Сотрудник];
			Если ПериодыСлужбы = Неопределено Тогда 
				ПериодыСлужбы = Новый Массив;
				ПериодыСлужбыСотрудников.Вставить(Выборка.Сотрудник, ПериодыСлужбы);
			КонецЕсли;
			ПериодыСлужбы.Добавить(ПериодСлужбы);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеСтажаСотрудников.ФизическоеЛицо КАК Сотрудник,
	               |	ВЫБОР
	               |		КОГДА ДанныеСтажаСотрудников.ТретийПараметрИсчисляемогоСтажа В (&ДоговорыГПХ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДоговорГПХ,
	               |	ДанныеСтажаСотрудников.*
	               |ИЗ
	               |	ВТДанныеСтажаСотрудников КАК ДанныеСтажаСотрудников
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник,
	               |	ДоговорГПХ УБЫВ,
	               |	ДанныеСтажаСотрудников.ДатаНачалаПериода";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	ПроверяемыеРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Сотрудник,КодПозицииСписка,ОснованиеИсчисляемогоСтажа,ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа,
		|ОснованиеВыслугиЛет,ПервыйПараметрВыслугиЛет,ВторойПараметрВыслугиЛет,ТретийПараметрВыслугиЛет,ОсобыеУсловияТруда,
		|ТерриториальныеУсловия,ПараметрТерриториальныхУсловий,ТерриториальныеУсловияДополнительные,ЗамещениеГосударственныхМуниципальныхДолжностей", , Истина, Истина);
	РеквизитыСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПроверяемыеРеквизиты);
	РеквизитыСтроки.Добавить("ТретийПараметрИсчисляемогоСтажа");
	ТаблицаОтклонений = ЗаписиОСтаже.Выгрузить(Новый Массив);
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл 
		ПредыдущаяСтрока = Неопределено;
		ТаблицаОтклонений.Очистить();
		ИндексПервойСтрокиСотрудника = ЗаписиОСтаже.Количество();
		ПериодыСлужбы = ПериодыСлужбыСотрудников[Выборка.Сотрудник];
		Если ПериодыСлужбы <> Неопределено Тогда 
			Для Каждого ПериодСлужбы Из ПериодыСлужбы Цикл 
				НоваяСтрока = ЗаписиОСтаже.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПериодСлужбы);
			КонецЦикла;
		КонецЕсли;
		Пока Выборка.Следующий() Цикл
			Если ДатыВыходаНаПенсию <> Неопределено И ДатыВыходаНаПенсию[Выборка.Сотрудник] < Выборка.ДатаНачалаПериода Тогда 
				Продолжить;
			КонецЕсли;
			Если ПериодыСлужбы = Неопределено И ЗначениеЗаполнено(Выборка.ТретийПараметрИсчисляемогоСтажа) И ЗначениеЗаполнено(Выборка.ЗамещениеГосударственныхМуниципальныхДолжностей) Тогда 
				ПредыдущаяСтрока = ПредыдущаяОсновнаяЗапись();
				Если ПредыдущаяСтрока = Неопределено Тогда 
					ПредыдущаяСтрока = ЗаписиОСтаже.Добавить();
					ЗаполнитьЗначенияСвойств(ПредыдущаяСтрока, Выборка, , "ТретийПараметрИсчисляемогоСтажа");
				Иначе 
					Если ПерсонифицированныйУчет.ДанныеСтрокСовпадают(ПредыдущаяСтрока, Выборка, ПроверяемыеРеквизиты) Тогда 
						ПредыдущаяСтрока.ДатаОкончанияПериода = Выборка.ДатаОкончанияПериода;
					Иначе
						ВывестиСтрокиОтклонений(ТаблицаОтклонений, ПредыдущаяСтрока);
						ПредыдущаяСтрока = ЗаписиОСтаже.Добавить();
						ЗаполнитьЗначенияСвойств(ПредыдущаяСтрока, Выборка, , "ТретийПараметрИсчисляемогоСтажа");
					КонецЕсли;
				КонецЕсли;
				Если ДатыВыходаНаПенсию <> Неопределено Тогда 
					ПредыдущаяСтрока.ДатаОкончанияПериода = Мин(Выборка.ДатаОкончанияПериода, ДатыВыходаНаПенсию[Выборка.Сотрудник]);
				КонецЕсли;
				ДобавитьСтрокуЗаписейОСтаже(ТаблицаОтклонений, Выборка, ДатыВыходаНаПенсию, ПериодыСлужбы);
				Продолжить;
			КонецЕсли;
			Если ПредыдущаяСтрока <> Неопределено И ПерсонифицированныйУчет.ДанныеСтрокСовпадают(ПредыдущаяСтрока, Выборка, ПроверяемыеРеквизиты) Тогда 
				ПредыдущаяСтрока.ДатаОкончанияПериода = Выборка.ДатаОкончанияПериода;
				Если ДатыВыходаНаПенсию <> Неопределено Тогда 
					ПредыдущаяСтрока.ДатаОкончанияПериода = Мин(Выборка.ДатаОкончанияПериода, ДатыВыходаНаПенсию[Выборка.Сотрудник]);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ПредыдущаяЗапись = ПредыдущаяОсновнаяЗапись();
			Если ПредыдущаяЗапись <> Неопределено И КонецДня(ПредыдущаяЗапись.ДатаОкончанияПериода) + 1 = Выборка.ДатаНачалаПериода
				И ПерсонифицированныйУчет.ДанныеСтрокСовпадают(ПредыдущаяЗапись, Выборка, РеквизитыСтроки) Тогда 
				ПредыдущаяЗапись.ДатаОкончанияПериода = Выборка.ДатаОкончанияПериода;
				Если ДатыВыходаНаПенсию <> Неопределено Тогда 
					ПредыдущаяЗапись.ДатаОкончанияПериода = Мин(Выборка.ДатаОкончанияПериода, ДатыВыходаНаПенсию[Выборка.Сотрудник]);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ВывестиСтрокиОтклонений(ТаблицаОтклонений, ПредыдущаяСтрока);
			ДобавитьСтрокуЗаписейОСтаже(ЗаписиОСтаже, Выборка, ДатыВыходаНаПенсию, ПериодыСлужбы);
		КонецЦикла;
		ВывестиСтрокиОтклонений(ТаблицаОтклонений, ПредыдущаяСтрока);
		ИндексПоследнейСтрокиСотрудника = ЗаписиОСтаже.Количество() - 1;
		СтрокиСтажаПоСотруднику = Новый Массив;
		Для Индекс = ИндексПервойСтрокиСотрудника По ИндексПоследнейСтрокиСотрудника Цикл  
			СтрокаСтажа = ЗаписиОСтаже[Индекс];
			Если ЗначениеЗаполнено(СтрокаСтажа.ТерриториальныеУсловияДополнительные) 
				И Не ЗначениеЗаполнено(СтрокаСтажа.ТерриториальныеУсловия) Тогда 
				СтрокаСтажа.ТерриториальныеУсловия = СтрокаСтажа.ТерриториальныеУсловияДополнительные;
			КонецЕсли;
		    СтрокиСтажаПоСотруднику.Добавить(СтрокаСтажа);
		КонецЦикла;
		ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(СтрокиСтажаПоСотруднику);
	КонецЦикла;
	
	ЗаполнитьДанныеДосрочногоНазначенияПенсии();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокиОтклонений(ТаблицаОтклонений, ПредыдущаяСтрока)
	
	Для Каждого СтрокаОтклонения Из ТаблицаОтклонений Цикл 
		НоваяСтрока = ЗаписиОСтаже.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтклонения);
	КонецЦикла;
	
	ТаблицаОтклонений.Очистить();
	ПредыдущаяСтрока = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуЗаписейОСтаже(ДанныеОСтаже, Выборка, ДатыВыходаНаПенсию, ПериодыСлужбы)
	
	НоваяСтрока = ДанныеОСтаже.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	Если ДатыВыходаНаПенсию <> Неопределено Тогда 
		НоваяСтрока.ДатаОкончанияПериода = Мин(Выборка.ДатаОкончанияПериода, ДатыВыходаНаПенсию[Выборка.Сотрудник]);
	КонецЕсли;
	
	Если ПериодыСлужбы <> Неопределено Тогда 
		НоваяСтрока.ЗамещениеГосударственныхМуниципальныхДолжностей = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ТерриториальныеУсловияДополнительные) И ЗначениеЗаполнено(Выборка.ТерриториальныеУсловия) Тогда 
		НоваяСтрока = ДанныеОСтаже.Добавить();
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
		НоваяСтрока.ТерриториальныеУсловия = Выборка.ТерриториальныеУсловияДополнительные;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредыдущаяОсновнаяЗапись()
	
	КоличествоСтрок = ЗаписиОСтаже.Количество();
	Если КоличествоСтрок = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСтрок Цикл 
		Если ЗначениеЗаполнено(ЗаписиОСтаже[КоличествоСтрок-Сч].ДатаНачалаПериода) Тогда 
			Возврат ЗаписиОСтаже[КоличествоСтрок-Сч];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеДосрочногоНазначенияПенсии()
	
	Объект.ДосрочноеНазначениеПенсии.Очистить();
	
	Если Не Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Исходная Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуютсяРаботыСДосрочнойПенсией", Новый Структура("Организация", Объект.Организация)) Тогда 
		Возврат;
	КонецЕсли;
	
	Год = ?(ЗначениеЗаполнено(Объект.Год), Объект.Год, Год(ТекущаяДатаСеанса()));
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПерсонифицированныйУчет.СоздатьВТДосрочноеНазначениеПенсииДляСЗВ_СТАЖ(МенеджерВременныхТаблиц, Объект.Организация, Год, ЗаписиОСтаже);
		
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДосрочноеНазначениеПенсии.*
	               |ИЗ
	               |	ВТДосрочноеНазначениеПенсии КАК ДосрочноеНазначениеПенсии
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Подразделение,
	               |	Должность";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = Объект.ДосрочноеНазначениеПенсии.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИтоговыеСведения.ВсегоРаботающихДНП КАК ВсегоРаботающихДНП,
	               |	ИтоговыеСведения.ВсегоРабочихМестДНП КАК ВсегоРабочихМестДНП
	               |ИЗ
	               |	ВТИтоговыеСведения КАК ИтоговыеСведения";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(Объект, Выборка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОФактеНачисленияВзносов(УдаляемыеСтроки = Неопределено)
	
	Если Объект.ТипСведений <> Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии Тогда 
		Объект.НачисленыВзносыНаОПС = Ложь;
		Объект.НачисленыВзносыПоДТ = Ложь;
		Возврат;
	КонецЕсли;
	
	УдаляемыеСотрудники = Новый Соответствие;
	Если УдаляемыеСтроки <> Неопределено Тогда 
		Для Каждого Идентификатор Из УдаляемыеСтроки Цикл
			СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(Идентификатор);
			Если СтрокаСотрудника <> Неопределено Тогда
				УдаляемыеСотрудники.Вставить(СтрокаСотрудника.Сотрудник, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ДатаАктуальности = Объект.Дата;
	Если Не ЗначениеЗаполнено(ДатаАктуальности) Тогда
		ДатаАктуальности = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	Для Каждого СтрокаКоллекции Из Объект.Сотрудники Цикл
		Если УдаляемыеСтроки <> Неопределено И УдаляемыеСотрудники[СтрокаКоллекции.Сотрудник] <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы = ТаблицаСотрудников.Добавить();
		СтрокаТаблицы.ФизическоеЛицо = СтрокаКоллекции.Сотрудник;
		СтрокаТаблицы.Период = Макс(ДатаАктуальности, СтрокаКоллекции.ДатаВыходаНаПенсию);
	КонецЦикла;
	
	Если ТаблицаСотрудников.Количество() = 0 Тогда 
		Объект.НачисленыВзносыНаОПС = Ложь;
		Объект.НачисленыВзносыПоДТ = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСотрудников.ФизическоеЛицо,
	               |	ТаблицаСотрудников.Период
	               |ПОМЕСТИТЬ ВТФизическиеЛица
	               |ИЗ
	               |	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос.Выполнить();
	
	ОтчетныйПериод = ?(ЗначениеЗаполнено(Объект.Год), Дата(Объект.Год, 1, 1), НачалоГода(ТекущаяДатаСеанса()));
	
	УстановитьПривилегированныйРежим(Истина);
	УчетСтраховыхВзносов.СформироватьВТДанныеОФактеНачисленияВзносовВПФР(
		Запрос.МенеджерВременныхТаблиц,
		Объект.Организация,
		ОтчетныйПериод,
		КонецГода(ОтчетныйПериод));
	УстановитьПривилегированныйРежим(Ложь);
		
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ИСТИНА КАК ЗначениеИстина
	               |ИЗ
	               |	ВТДанныеОФактеНачисленияВзносов КАК ДанныеОФактеНачисленияВзносов
	               |ГДЕ
	               |	ДанныеОФактеНачисленияВзносов.НачисленоНаОПС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ИСТИНА КАК ЗначениеИстина
	               |ИЗ
	               |	ВТДанныеОФактеНачисленияВзносов КАК ДанныеОФактеНачисленияВзносов
	               |ГДЕ
	               |	ДанныеОФактеНачисленияВзносов.НачисленоПоДополнительнымТарифам";
				   
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Объект.НачисленыВзносыНаОПС = Не РезультатыЗапроса[0].Пустой();	
	Объект.НачисленыВзносыПоДТ = Не РезультатыЗапроса[1].Пустой();	
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.Сотрудники.Очистить();
	Объект.ДосрочноеНазначениеПенсии.Очистить();
	ЗаписиОСтаже.Очистить();
	
	ЗапрашиваемыеЗначения = ЗапрашиваемыеЗначенияЗаполненияПоОрганизации();
	Если Не ЗапрашиваемыеЗначения.Свойство("Организация") Тогда
		ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	КонецЕсли; 
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ТипСведенийПриИзмененииНаСервере()
	
	УстановитьСвойстваЭлементовФормы();
	ЗаполнитьДатуНазначенияПенсии();
	ЗаполнитьДанныеОФактеНачисленияВзносов();
	
	ЗаписиОСтаже.Очистить();
	ЗаполнитьДанныеОСтажеСотрудников(ОбщегоНазначения.ВыгрузитьКолонку(Объект.Сотрудники, "Сотрудник"));
	
КонецПроцедуры

&НаСервере
Процедура ФлагБлокировкиДокументаПриИзмененииНаСервере()
	
	Модифицированность = Истина;
	Объект.ДокументПринятВПФР = ФлагБлокировкиДокумента;
	Если Не ФлагБлокировкиДокумента Тогда
		ТолькоПросмотр = Ложь;
	КонецЕсли;	
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиПередУдалениемНаСервере()
	
	ПерсонифицированныйУчетКлиентСервер.ДокументыРедактированияСтажаСотрудникиПередУдалением(Элементы.Сотрудники.ВыделенныеСтроки, Объект.Сотрудники, ЗаписиОСтаже);
	ЗаполнитьДанныеОФактеНачисленияВзносов(Элементы.Сотрудники.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОтчетныйПериод(Форма)
	
	Объект = Форма.Объект;
	Если Не ЗначениеЗаполнено(Объект.Год) Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ОтчетныйПериод = Дата(Объект.Год, 1, 1);
	Объект.ОкончаниеОтчетногоПериода = КонецГода(Объект.ОтчетныйПериод);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуНазначенияПенсии()
	
	Если Объект.ТипСведений <> Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСотрудника Из Объект.Сотрудники Цикл 
		СтрокаСотрудника.ДатаВыходаНаПенсию = Объект.Дата;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияКарточкиДокумента()
	
	ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные;
	ДанныеШапкиТекущегоДокумента = Объект;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда	
		
		ДанныеТекущегоДокументаПоСотрудникуВоВременноеХранилище();
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("АдресВоВременномХранилище", АдресДанныхТекущегоДокументаВХранилище);
		ПараметрыОткрытияФормы.Вставить("РедактируемыйДокументСсылка", ДанныеШапкиТекущегоДокумента.Ссылка);
		ПараметрыОткрытияФормы.Вставить("Сотрудник", ДанныеТекущейСтроки.Сотрудник);
		ПараметрыОткрытияФормы.Вставить("ДатаВыходаНаПенсию", ДанныеТекущейСтроки.ДатаВыходаНаПенсию);
		ПараметрыОткрытияФормы.Вставить("Организация", ДанныеШапкиТекущегоДокумента.Организация);
		ПараметрыОткрытияФормы.Вставить("Год", Объект.Год);
		ПараметрыОткрытияФормы.Вставить("ИсходныйНомерСтроки", 0);
		ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		ПараметрыОткрытияФормы.Вставить("НеОтображатьОшибки", Истина);
		
		ОткрытьФорму("Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Форма.ФормаРедактированияСтажа", ПараметрыОткрытияФормы, ЭтаФорма);	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ДанныеТекущегоДокументаПоСотрудникуВоВременноеХранилище()
	
	Если Элементы.Сотрудники.ТекущаяСтрока = Неопределено Тогда
		АдресДанныхТекущегоДокументаВХранилище = "";
		Возврат;
	КонецЕсли;	
	
	ДанныеТекущейСтрокиПоСотруднику = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	Если ДанныеТекущейСтрокиПоСотруднику = Неопределено Тогда
		АдресДанныхТекущегоДокументаВХранилище = "";
		Возврат;
	КонецЕсли;
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	ДанныеСотрудника.Вставить("СтраховойНомерПФР", ДанныеТекущейСтрокиПоСотруднику.СтраховойНомерПФР);
	ДанныеСотрудника.Вставить("Фамилия", ДанныеТекущейСтрокиПоСотруднику.Фамилия);
	ДанныеСотрудника.Вставить("Имя", ДанныеТекущейСтрокиПоСотруднику.Имя);
	ДанныеСотрудника.Вставить("Отчество", ДанныеТекущейСтрокиПоСотруднику.Отчество);
	ДанныеСотрудника.Вставить("СотрудникУволен", ДанныеТекущейСтрокиПоСотруднику.СотрудникУволен);
	ДанныеСотрудника.Вставить("ФиксСтаж", ДанныеТекущейСтрокиПоСотруднику.ФиксСтаж);
    ДанныеСотрудника.Вставить("ЗаписиОСтаже", Новый Массив);
	ДанныеСотрудника.Вставить("ИсходныйНомерСтроки", ДанныеТекущейСтрокиПоСотруднику.ИсходныйНомерСтроки);
	
	ЗначенияРеквизитовХраненияОшибок = ПерсонифицированныйУчетКлиентСервер.ЗначенияРеквизитовХраненияОшибокВСтруктуру(
											ЭтаФорма, 
											ДанныеТекущейСтрокиПоСотруднику,
											"Объект.Сотрудники");
											
	ДанныеСотрудника.Вставить("ЗначенияРеквизитовХраненияОшибок", ЗначенияРеквизитовХраненияОшибок);	
	
	СтруктураПоиска = Новый Структура("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	
	СтрокиЗаписиОСтаже = ЗаписиОСтаже.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаСтаж Из СтрокиЗаписиОСтаже Цикл
		СтруктураПолейЗаписиОСтаже = СтруктураПолейЗаписиОСтаже();
		ЗаполнитьЗначенияСвойств(СтруктураПолейЗаписиОСтаже, СтрокаСтаж);
		СтруктураПолейЗаписиОСтаже.ИдентификаторИсходнойСтроки = СтрокаСтаж.ПолучитьИдентификатор(); 
		
		ЗначенияРеквизитовХраненияОшибок = ПерсонифицированныйУчетКлиентСервер.ЗначенияРеквизитовХраненияОшибокВСтруктуру(
												ЭтаФорма, 
												СтрокаСтаж,
												"ЗаписиОСтаже");	
		
		ДанныеСотрудника.ЗаписиОСтаже.Добавить(СтруктураПолейЗаписиОСтаже);
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(АдресДанныхТекущегоДокументаВХранилище) Тогда
		ПоместитьВоВременноеХранилище(ДанныеСотрудника, АдресДанныхТекущегоДокументаВХранилище);	
	Иначе	
		АдресДанныхТекущегоДокументаВХранилище = ПоместитьВоВременноеХранилище(ДанныеСотрудника, УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СтруктураПолейЗаписиОСтаже()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерОсновнойЗаписи");
	СтруктураПолей.Вставить("НомерДополнительнойЗаписи");
	СтруктураПолей.Вставить("ДатаНачалаПериода");
	СтруктураПолей.Вставить("ДатаОкончанияПериода");
	СтруктураПолей.Вставить("ОсобыеУсловияТруда");
	СтруктураПолей.Вставить("КодПозицииСписка");
	СтруктураПолей.Вставить("ОснованиеИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ПервыйПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ВторойПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ТретийПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ОснованиеВыслугиЛет");
	СтруктураПолей.Вставить("ПервыйПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ВторойПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТретийПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТерриториальныеУсловия");
	СтруктураПолей.Вставить("ПараметрТерриториальныхУсловий");
	СтруктураПолей.Вставить("ЗамещениеГосударственныхМуниципальныхДолжностей");
	СтруктураПолей.Вставить("ИдентификаторИсходнойСтроки");

	Возврат СтруктураПолей;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаписиОСтажеПриКопировании(ЗначениеКопирования)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументОснование", ЗначениеКопирования);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаписиОСтаже.*
	               |ИЗ
	               |	РегистрСведений.ЗаписиОСтажеСведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК ЗаписиОСтаже
	               |ГДЕ
	               |	ЗаписиОСтаже.ДокументОснование = &ДокументОснование";
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаписиОСтаже.Загрузить(Запрос.Выполнить().Выгрузить());
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ОписаниеЭлементовСИндикациейОшибок() Экспорт
	ОписаниеЭлементовИндикацииОшибок = Новый Соответствие;	
	Возврат ОписаниеЭлементовИндикацииОшибок;
КонецФункции	

&НаКлиенте
Процедура ПриИзмененииДанныхДокументаПоСотруднику(АдресВоВременномХранилище)
	
	ДанныеТекущегоДокументаПоСотрудникуВДанныеФормы(АдресВоВременномХранилище);
	
КонецПроцедуры	

&НаСервере
Процедура ДанныеТекущегоДокументаПоСотрудникуВДанныеФормы(АдресВоВременномХранилище)
	
	ДанныеШапкиДокумента = Объект;
	
	ДанныеТекущегоДокумента = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ДанныеТекущегоДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтрокиПоСотруднику = Неопределено;
	НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ДанныеТекущегоДокумента.Сотрудник));
		
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеТекущейСтрокиПоСотруднику = НайденныеСтроки[0];
		Если ДанныеТекущейСтрокиПоСотруднику.Сотрудник <> ДанныеТекущегоДокумента.Сотрудник Тогда
			ДанныеТекущейСтрокиПоСотруднику = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеТекущейСтрокиПоСотруднику = Неопределено  Тогда
		ВызватьИсключение НСтр("ru = 'В текущем документе не найдены данные по редактируемому сотруднику.'");
	КонецЕсли;
	
	ДанныеТекущейСтрокиПоСотруднику = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(ДанныеТекущейСтрокиПоСотруднику, ДанныеТекущегоДокумента);
		
	СтруктураПоиска = Новый Структура("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	
	СтрокиСтажа = ЗаписиОСтаже.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаСтажСотрудника Из СтрокиСтажа Цикл
		ЗаписиОСтаже.Удалить(ЗаписиОСтаже.Индекс(СтрокаСтажСотрудника));
	КонецЦикла;
	
	СтрокиСтажаПоСотруднику = Новый Массив;
	Для Каждого СтрокаСтаж Из ДанныеТекущегоДокумента.ЗаписиОСтаже Цикл
		СтрокаСтажОбъекта = ЗаписиОСтаже.Добавить();
		СтрокаСтажОбъекта.Сотрудник = ДанныеТекущейСтрокиПоСотруднику.Сотрудник;
		ЗаполнитьЗначенияСвойств(СтрокаСтажОбъекта, СтрокаСтаж);
		СтрокиСтажаПоСотруднику.Добавить(СтрокаСтажОбъекта);
	КонецЦикла;
	
	ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(СтрокиСтажаПоСотруднику);
		
	Если ДанныеТекущегоДокумента.Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПроверкаЗаполненияДокумента(Отказ = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ДополнительныеСвойства.Вставить("НеПроверятьДанныеСотрудников");
	ДокументОбъект.ПроверитьДанныеДокумента(Отказ);
	
	ПерсонифицированныйУчет.ПроверитьДанныеСотрудников(ДокументОбъект.Сотрудники, ДокументОбъект.ОтчетныйПериод, ДокументОбъект.ОкончаниеОтчетногоПериода, ЗаписиОСтаже, Отказ);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияПродолжение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверкаЗаполненияДокумента(Отказ);	
	
	Если Отказ Тогда 
		ТекстВопроса = НСтр("ru = 'В комплекте обнаружены ошибки.
							|Продолжить (не рекомендуется)?'");
							
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.'"));
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);				
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаСтороннимиПрограммами(Отказ)
	
	Если Отказ Тогда
		ТекстВопроса = НСтр("ru = 'При проверке встроенной проверкой обнаружены ошибки.
		|Выполнить проверку сторонними программами?'")
	Иначе	
		ТекстВопроса = НСтр("ru = 'При проверке встроенной проверкой ошибок не обнаружено.
		|Выполнить проверку сторонними программами?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверкаСтороннимиПрограммамиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннимиПрограммамиЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		ПроверитьСтороннимиПрограммами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтороннимиПрограммами()
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	
	ПроверяемыеОбъекты = Новый Массив;
	ПроверяемыеОбъекты.Добавить(Объект.Ссылка);
	
	ПараметрыОткрытия.Вставить("СсылкиНаПроверяемыеОбъекты", ПроверяемыеОбъекты);
	
	ОткрытьФорму("ОбщаяФорма.ПроверкаФайловОтчетностиПерсУчетаПФР", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(Ссылка, УникальныйИдентификатор)
	
	Возврат ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти
