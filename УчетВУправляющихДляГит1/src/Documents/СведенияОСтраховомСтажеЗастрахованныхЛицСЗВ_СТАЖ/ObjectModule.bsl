#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Год) Тогда 
		ОтчетныйПериод = Дата(Год, 1, 1);
		ОкончаниеОтчетногоПериода = КонецГода(ОтчетныйПериод);
	КонецЕсли;
	
	Если ТипСведений <> Перечисления.ТипыСведенийСЗВ_СТАЖ.Исходная Тогда 
		ДосрочноеНазначениеПенсии.Очистить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФайлаДляПФР) Тогда
		ИмяФайлаДляПФР = Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ИмяФайла(Организация, Дата);
	Иначе		
		УИДИзИмениФайла = Прав(ИмяФайлаДляПФР, 36);
		Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(УИДИзИмениФайла) Тогда
			УИДИзИмениФайла = Строка(Новый УникальныйИдентификатор);	
		КонецЕсли;	
		ИмяФайлаДляПФР = Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ИмяФайла(Организация, Дата, УИДИзИмениФайла);
	КонецЕсли;
	
	АктуальныйФорматФайла = Истина;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ЗаписиОСтаже") Тогда 
		УстановитьПривилегированныйРежим(Истина);
		ДополнительныеСвойства.ЗаписиОСтаже.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ДополнительныеСвойства.Свойство("НеПроверятьДанныеОрганизации") Тогда
		ПерсонифицированныйУчет.ПроверитьДанныеОрганизации(ЭтотОбъект, Организация, Отказ);
	КонецЕсли;	
	
	Если Не ДополнительныеСвойства.Свойство("НеПроверятьДанныеСотрудников") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаписиОСтаже.Сотрудник КАК Сотрудник,
		               |	МИНИМУМ(ЗаписиОСтаже.ДатаНачалаПериода) КАК ДатаНачалаПериода,
		               |	МАКСИМУМ(ЗаписиОСтаже.ДатаОкончанияПериода) КАК ДатаОкончанияПериода
		               |ИЗ
		               |	РегистрСведений.ЗаписиОСтажеСведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК ЗаписиОСтаже
		               |ГДЕ
		               |	ЗаписиОСтаже.ДокументОснование = &ДокументОснование
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаписиОСтаже.Сотрудник";
		УстановитьПривилегированныйРежим(Истина);
		ЗаписиОСтаже = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ПерсонифицированныйУчет.ПроверитьДанныеСотрудников(Сотрудники, ОтчетныйПериод, ОкончаниеОтчетногоПериода, ЗаписиОСтаже, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	АктуальныйФорматФайла = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьВТСТаблицамиОбъекта(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.НомерСтроки,
	|	Сотрудники.Сотрудник,
	|	Сотрудники.Фамилия,
	|	Сотрудники.Имя,
	|	Сотрудники.Отчество,
	|	Сотрудники.СтраховойНомерПФР
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&Сотрудники КАК Сотрудники";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция СформироватьЗапросПоСотрудникамДляПроверкиЗаполнения(МенеджерВременныхТаблиц)
	
	ПериодДанных = ?(ЗначениеЗаполнено(Год), Дата(Год, 1, 1), Дата(1, 1, 1));
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	КадровыйУчет.СоздатьВТФизическиеЛицаРаботавшиеВОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, Организация, ПериодДанных, ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(ПериодДанных));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиДокумента.НомерСтроки КАК НомерСтроки,
	|	СотрудникиДокумента.Сотрудник КАК Сотрудник,
	|	СотрудникиДокумента.Фамилия КАК Фамилия,
	|	СотрудникиДокумента.Имя КАК Имя,
	|	СотрудникиДокумента.Отчество КАК Отчество,
	|	СотрудникиДокумента.Сотрудник.Наименование КАК СотрудникНаименование,
	|	СотрудникиДокумента.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	МИНИМУМ(ДублиСтрок.НомерСтроки) КАК КонфликтующаяСтрока,
	|	ВЫБОР
	|		КОГДА АктуальныеСотрудники.ФизическоеЛицо ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СотрудникРаботаетВОрганизации,
	|	МИНИМУМ(ДублиСтрокСтраховыеНомера.НомерСтроки) КАК КонфликтующаяСтрокаСтраховойНомер
	|ПОМЕСТИТЬ ВТСотрудникиДокумента
	|ИЗ
	|	ВТСотрудники КАК СотрудникиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК ДублиСтрок
	|		ПО СотрудникиДокумента.НомерСтроки > ДублиСтрок.НомерСтроки
	|			И СотрудникиДокумента.Сотрудник = ДублиСтрок.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаРаботавшиеВОрганизации КАК АктуальныеСотрудники
	|		ПО СотрудникиДокумента.Сотрудник = АктуальныеСотрудники.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК ДублиСтрокСтраховыеНомера
	|		ПО СотрудникиДокумента.НомерСтроки > ДублиСтрокСтраховыеНомера.НомерСтроки
	|			И СотрудникиДокумента.СтраховойНомерПФР = ДублиСтрокСтраховыеНомера.СтраховойНомерПФР
	|			И СотрудникиДокумента.Сотрудник <> ДублиСтрокСтраховыеНомера.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиДокумента.НомерСтроки,
	|	СотрудникиДокумента.Сотрудник,
	|	СотрудникиДокумента.Фамилия,
	|	СотрудникиДокумента.Имя,
	|	СотрудникиДокумента.Отчество,
	|	СотрудникиДокумента.Сотрудник.Наименование,
	|	СотрудникиДокумента.СтраховойНомерПФР,
	|	ВЫБОР
	|		КОГДА АктуальныеСотрудники.ФизическоеЛицо ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиДокумента.НомерСтроки КАК НомерСтрокиСотрудник,
	|	СотрудникиДокумента.Сотрудник КАК Сотрудник,
	|	СотрудникиДокумента.СотрудникНаименование КАК СотрудникНаименование,
	|	СотрудникиДокумента.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	СотрудникиДокумента.СотрудникРаботаетВОрганизации КАК СотрудникРаботаетВОрганизации,
	|	СотрудникиДокумента.КонфликтующаяСтрока КАК КонфликтующаяСтрока,
	|	СотрудникиДокумента.Фамилия КАК Фамилия,
	|	СотрудникиДокумента.Имя КАК Имя,
	|	СотрудникиДокумента.Отчество КАК Отчество,
	|	СотрудникиДокумента.КонфликтующаяСтрокаСтраховойНомер КАК КонфликтующаяСтрокаСтраховойНомер,
	|	"""" КАК АдресДляИнформирования
	|ИЗ
	|	ВТСотрудникиДокумента КАК СотрудникиДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиСотрудник";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ПроверитьДанныеДокумента(Отказ = Ложь) Экспорт 
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;	
	
	Ошибки = Новый Массив;
	
	ПроверитьДанныеШапкиДокумента(Ошибки, Отказ);
	
	ЗапросПоСтрокамДокумента = Неопределено;
	
	ПравилаПроверкиДанныхЗЛ = ПерсонифицированныйУчет.ДокументыСЗВПравилаПроверкиДанныхЗЛ(Ложь);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТСТаблицамиОбъекта(МенеджерВременныхТаблиц);
	
	ВыборкаПоСтрокамДокумента = СформироватьЗапросПоСотрудникамДляПроверкиЗаполнения(МенеджерВременныхТаблиц).Выбрать();

	Пока ВыборкаПоСтрокамДокумента.СледующийПоЗначениюПоля("НомерСтрокиСотрудник") Цикл
		
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда 
			
			Если ВыборкаПоСтрокамДокумента.КонфликтующаяСтрока <> Null Тогда  
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Информация о сотруднике %1 была введена в документе ранее.'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование);
				
				ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияСпискаСотрудников(
					Ошибки, 
					Ссылка, 
					ВыборкаПоСтрокамДокумента.НомерСтрокиСотрудник,
					ТекстОшибки,
					"Сотрудник",
					Отказ);
																							
			ИначеЕсли ВыборкаПоСтрокамДокумента.КонфликтующаяСтрокаСтраховойНомер <> Null Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: информация о сотруднике с таким же страховым номером была введена в документе ранее.'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование);
				
				ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияСпискаСотрудников(
					Ошибки, 
					Ссылка, 
					ВыборкаПоСтрокамДокумента.НомерСтрокиСотрудник,
					ТекстОшибки,
					"СтраховойНомерПФР",
					Отказ);
			КонецЕсли;	
			
			ДанныеЗастрахованногоЛица = ПерсонифицированныйУчет.ДокументыСЗВДанныеЗастрахованногоЛица(ВыборкаПоСтрокамДокумента);
			
			ПерсонифицированныйУчет.ПроверитьДанныеЗастрахованногоЛица(
				ДанныеЗастрахованногоЛица, 
				ВыборкаПоСтрокамДокумента.НомерСтрокиСотрудник, 
				ПравилаПроверкиДанныхЗЛ, 
				Ошибки, 
				Ссылка,
				Отказ);
				
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьДанныеШапкиДокумента(Ошибки, Отказ = Ложь)
	
	Если Год < 2017 Тогда
		ТекстОшибки = НСтр("ru = 'Форма СЗВ-СТАЖ предоставляется начиная с 2017 года.'");
		ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияЭлементаДокумента(Ошибки, Ссылка, ТекстОшибки, , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Руководитель) Тогда
		ТекстОшибки = НСтр("ru = 'Не указан руководитель.'");
		ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияЭлементаДокумента(Ошибки, Ссылка, ТекстОшибки, , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДолжностьРуководителя) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана должность руководителя.'");
		ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияЭлементаДокумента(Ошибки, Ссылка, ТекстОшибки, , Отказ);
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#КонецЕсли
