#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок( ЗначениеРазрешено(Сотрудники.Сотрудник, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьВТПерсональныеДанныеСотрудников(МенеджерВременныхТаблиц, Организация, Год, ДатаДокумента, ФизическиеЛица = Неопределено) Экспорт 
	
	ОтчетныйПериод = Дата(Год, 1, 1);
	ДатаАктуальности = Макс(ДатаДокумента, КонецГода(ОтчетныйПериод));
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	ПараметрыПолученияСотрудников.Организация = Организация;
	ПараметрыПолученияСотрудников.НачалоПериода = ОтчетныйПериод; 
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецГода(ОтчетныйПериод); 
	ПараметрыПолученияСотрудников.КадровыеДанные = "ФизическоеЛицо, ДатаУвольнения";
	
	Если ПараметрыПолученияСотрудников.Свойство("РаботникиПоДоговорамГПХ") Тогда
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;	
	
	Если ФизическиеЛица <> Неопределено Тогда
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;	
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КонецГода", КонецГода(ОтчетныйПериод));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	               |	НАЧАЛОПЕРИОДА(СотрудникиОрганизации.Период, ГОД) КАК НачалоПериода,
	               |	СотрудникиОрганизации.Период КАК ОкончаниеПериода
	               |ПОМЕСТИТЬ ВТСотрудникиПериоды
				   |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
	
	Запрос.Выполнить();
	
	ПараметрыРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице();
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыРабочихМест);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник,
	               |	РабочиеМестаСотрудников.Период КАК Период
	               |ПОМЕСТИТЬ ВТОтборСотрудников
	               |ИЗ
	               |	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РабочиеМестаСотрудников.Сотрудник,
	               |	&ДатаАктуальности
	               |ИЗ
	               |	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СотрудникиОрганизации.Сотрудник,
	               |	НАЧАЛОПЕРИОДА(СотрудникиОрганизации.Период, ГОД)
	               |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	               |		ПО СотрудникиОрганизации.Сотрудник = РабочиеМестаСотрудников.Сотрудник
	               |ГДЕ
	               |	РабочиеМестаСотрудников.Сотрудник ЕСТЬ NULL
				   |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СотрудникиОрганизации.Сотрудник,
	               |	&ДатаАктуальности
	               |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	               |		ПО СотрудникиОрганизации.Сотрудник = РабочиеМестаСотрудников.Сотрудник
	               |ГДЕ
	               |	РабочиеМестаСотрудников.Сотрудник ЕСТЬ NULL";
	
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТОтборСотрудников");
	КадровыеДанные = "ФизическоеЛицо, Фамилия, Имя, Отчество, СтраховойНомерПФР, ДатаУвольнения, ЯвляетсяПрокурором, ЯвляетсяВоеннослужащим, РаботаетВСтуденческомОтряде";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, КадровыеДанные);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадровыеДанныеСотрудников.ФизическоеЛицо КАК Сотрудник,
	               |	МИНИМУМ(КадровыеДанныеСотрудников.ЯвляетсяПрокурором) КАК ЯвляетсяПрокурором,
	               |	МИНИМУМ(КадровыеДанныеСотрудников.ЯвляетсяВоеннослужащим) КАК ЯвляетсяВоеннослужащим,
	               |	МИНИМУМ(КадровыеДанныеСотрудников.РаботаетВСтуденческомОтряде) КАК РаботаетВСтуденческомОтряде
	               |ПОМЕСТИТЬ ВТДанныеДолжностейСотрудников
	               |ИЗ
	               |	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	               |ГДЕ
	               |	КадровыеДанныеСотрудников.Период <> &ДатаАктуальности
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КадровыеДанныеСотрудников.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КадровыеДанныеСотрудников.ФизическоеЛицо КАК Сотрудник,
	               |	МАКСИМУМ(КадровыеДанныеСотрудников.Фамилия) КАК Фамилия,
	               |	МАКСИМУМ(КадровыеДанныеСотрудников.Имя) КАК Имя,
	               |	МАКСИМУМ(КадровыеДанныеСотрудников.Отчество) КАК Отчество,
	               |	МАКСИМУМ(КадровыеДанныеСотрудников.СтраховойНомерПФР) КАК СтраховойНомерПФР
	               |ПОМЕСТИТЬ ВТЛичныеДанныеСотрудников
	               |ИЗ
	               |	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	               |ГДЕ
	               |	КадровыеДанныеСотрудников.Период = &ДатаАктуальности
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КадровыеДанныеСотрудников.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛичныеДанныеСотрудников.Сотрудник КАК Сотрудник,
	               |	ЛичныеДанныеСотрудников.Фамилия КАК Фамилия,
	               |	ЛичныеДанныеСотрудников.Имя КАК Имя,
	               |	ЛичныеДанныеСотрудников.Отчество КАК Отчество,
	               |	ЛичныеДанныеСотрудников.СтраховойНомерПФР КАК СтраховойНомерПФР,
	               |	ДанныеДолжностейСотрудников.ЯвляетсяПрокурором КАК ЯвляетсяПрокурором,
	               |	ДанныеДолжностейСотрудников.ЯвляетсяВоеннослужащим КАК ЯвляетсяВоеннослужащим,
	               |	ДанныеДолжностейСотрудников.РаботаетВСтуденческомОтряде КАК РаботаетВСтуденческомОтряде
	               |ПОМЕСТИТЬ ВТДанныеСотрудниковОрганизации
				   |ИЗ
	               |	ВТЛичныеДанныеСотрудников КАК ЛичныеДанныеСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДолжностейСотрудников КАК ДанныеДолжностейСотрудников
	               |		ПО ЛичныеДанныеСотрудников.Сотрудник = ДанныеДолжностейСотрудников.Сотрудник";
				   
	Запрос.Выполнить();
	
	Если ФизическиеЛица <> Неопределено Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		               |	&ДатаАктуальности КАК Период
		               |ПОМЕСТИТЬ ВТФизическиеЛица
		               |ИЗ
		               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		               |		ПО ФизическиеЛица.Ссылка = СотрудникиОрганизации.ФизическоеЛицо
		               |			И (ФизическиеЛица.Ссылка В (&ФизическиеЛица))
		               |ГДЕ
		               |	ФизическиеЛица.Ссылка В(&ФизическиеЛица)
		               |	И СотрудникиОрганизации.ФизическоеЛицо ЕСТЬ NULL";
		
		Запрос.Выполнить();
		
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, "ВТФизическиеЛица");
		КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, "Фамилия, Имя, Отчество, СтраховойНомерПФР");
		
		ИменаВТ = Новый Массив;
		ИменаВТ.Добавить("ВТФизическиеЛица");
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
		
	Иначе
		ПерсонифицированныйУчет.СоздатьВТКадровыеДанныеФизическихЛицДоНачалаЭксплуатации(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, КонецГода(ОтчетныйПериод));
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(СотрудникиОрганизации.ДатаУвольнения) КАК ДатаУвольнения
	               |ПОМЕСТИТЬ ВТУволенныеСотрудники
	               |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК РаботающиеСотрудники
	               |		ПО СотрудникиОрганизации.ФизическоеЛицо = РаботающиеСотрудники.ФизическоеЛицо
	               |			И (РаботающиеСотрудники.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
	               |ГДЕ
	               |	РаботающиеСотрудники.ФизическоеЛицо ЕСТЬ NULL
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СотрудникиОрганизации.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	               |	СотрудникиОрганизации.Фамилия КАК Фамилия,
	               |	СотрудникиОрганизации.Имя КАК Имя,
	               |	СотрудникиОрганизации.Отчество КАК Отчество,
	               |	СотрудникиОрганизации.СтраховойНомерПФР КАК СтраховойНомерПФР,
	               |	ЕСТЬNULL(УволенныеСотрудники.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	               |		И КОНЕЦПЕРИОДА(УволенныеСотрудники.ДатаУвольнения, ДЕНЬ) = &КонецГода КАК СотрудникУволен,
	               |	СотрудникиОрганизации.ЯвляетсяПрокурором КАК ЯвляетсяПрокурором,
	               |	СотрудникиОрганизации.ЯвляетсяВоеннослужащим КАК ЯвляетсяВоеннослужащим,
	               |	СотрудникиОрганизации.РаботаетВСтуденческомОтряде КАК РаботаетВСтуденческомОтряде
	               |ПОМЕСТИТЬ ВТПерсональныеДанныеСотрудников
	               |ИЗ
	               |	ВТДанныеСотрудниковОрганизации КАК СотрудникиОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТУволенныеСотрудники КАК УволенныеСотрудники
	               |		ПО СотрудникиОрганизации.Сотрудник = УволенныеСотрудники.ФизическоеЛицо
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КадровыеДанныеФизическихЛиц.ФизическоеЛицо,
	               |	КадровыеДанныеФизическихЛиц.Фамилия,
	               |	КадровыеДанныеФизическихЛиц.Имя,
	               |	КадровыеДанныеФизическихЛиц.Отчество,
	               |	КадровыеДанныеФизическихЛиц.СтраховойНомерПФР,
	               |	ЛОЖЬ,
	               |	ЛОЖЬ,
	               |	ЛОЖЬ,
	               |	ЛОЖЬ
	               |ИЗ
	               |	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц";
				   
	Если ФизическиеЛица = Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПерсональныеДанныеСотрудников", "ВТПерсональныеДанныеСотрудниковПредварительно");			   
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Если ФизическиеЛица <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, ОтчетныйПериод, КонецГода(ОтчетныйПериод), "МЕСЯЦ"); 
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	               |	ПерсональныеДанныеСотрудников.Сотрудник КАК ФизическоеЛицо,
	               |	Периоды.Период
	               |ПОМЕСТИТЬ ВТПериодыФизическихЛиц
	               |ИЗ
	               |	ВТПерсональныеДанныеСотрудниковПредварительно КАК ПерсональныеДанныеСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериоды КАК Периоды
	               |		ПО (ИСТИНА)";
	
	Запрос.Выполнить();
	
	УчетСтраховыхВзносов.СформироватьВТДанныеОПравахНаСтрахование(МенеджерВременныхТаблиц, "ВТПериодыФизическихЛиц", Истина);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДанныеОПравахНаСтрахование.ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТЗастрахованныеФизическиеЛица
	               |ИЗ
	               |	ВТДанныеОПравахНаСтрахование КАК ДанныеОПравахНаСтрахование
	               |ГДЕ
	               |	ДанныеОПравахНаСтрахование.ЗастрахованПФР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПерсональныеДанныеСотрудников.Сотрудник КАК Сотрудник,
	               |	ПерсональныеДанныеСотрудников.Фамилия КАК Фамилия,
	               |	ПерсональныеДанныеСотрудников.Имя КАК Имя,
	               |	ПерсональныеДанныеСотрудников.Отчество КАК Отчество,
	               |	ПерсональныеДанныеСотрудников.СтраховойНомерПФР КАК СтраховойНомерПФР,
	               |	ПерсональныеДанныеСотрудников.СотрудникУволен КАК СотрудникУволен
	               |ПОМЕСТИТЬ ВТПерсональныеДанныеСотрудников
	               |ИЗ
	               |	ВТПерсональныеДанныеСотрудниковПредварительно КАК ПерсональныеДанныеСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗастрахованныеФизическиеЛица КАК ЗастрахованныеФизическиеЛица
	               |		ПО ПерсональныеДанныеСотрудников.Сотрудник = ЗастрахованныеФизическиеЛица.ФизическоеЛицо
	               |			И (НЕ ПерсональныеДанныеСотрудников.ЯвляетсяПрокурором)
	               |			И (НЕ ПерсональныеДанныеСотрудников.ЯвляетсяВоеннослужащим)
	               |			И (НЕ ПерсональныеДанныеСотрудников.РаботаетВСтуденческомОтряде)";
				   
	Запрос.Выполнить();			   
	
КонецПроцедуры

Процедура СоздатьВТДанныеСтажаПФР(МенеджерВременныхТаблиц, Организация, Год, Сотрудники, УчитываемыеДокументы) Экспорт 
	
	СписокСотрудников = ?(ТипЗнч(Сотрудники) = Тип("Массив"), Сотрудники, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники));
	СписокДокументов = ?(ТипЗнч(УчитываемыеДокументы) = Тип("Массив"), УчитываемыеДокументы, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УчитываемыеДокументы));
	
	ПараметрыДляСоздатьВТДанныеСтажаПФР = ПерсонифицированныйУчет.ПараметрыДляСоздатьВТДанныеСтажаПФР();
	ПараметрыДляСоздатьВТДанныеСтажаПФР.ВыделятьСтажПоДоговорамГПХ = Истина;	
	
	ВариантыИсточниковДанныхСтажа = ПерсонифицированныйУчет.ВариантыИсточниковДанныхСтажа();
	ПараметрыДляСоздатьВТДанныеСтажаПФР.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчета;
	ПараметрыДляСоздатьВТДанныеСтажаПФР.УчитываемыеДокументы = СписокДокументов;
	
	ПараметрыОтбора = ПерсонифицированныйУчет.СтруктураОтбораДанныхДляКвартальнойОтчетности();
	ПараметрыОтбора.СписокФизическихЛиц = СписокСотрудников;
	
	ОтчетныйПериод = ?(ЗначениеЗаполнено(Год), Дата(Год, 1, 1), Дата(1, 1, 1));
	
	ПерсонифицированныйУчет.СоздатьВТДанныеСтажаПФР(
		МенеджерВременныхТаблиц, 
		Организация, 
		ОтчетныйПериод, 
		ПараметрыДляСоздатьВТДанныеСтажаПФР,
		ПараметрыОтбора);
		
	ПерсонифицированныйУчет.СоздатьВТДанныеСтажаСотрудников(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод);
	
КонецПроцедуры

Функция ИмяФайла(Организация, Дата, УИД = Неопределено) Экспорт

	Если УИД = Неопределено Тогда
		УИД = Новый УникальныйИдентификатор;
	КонецЕсли;	
	
	Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрационныйНомерПФР, КодОрганаПФР");
	
	Возврат "ПФР"
			+ "_" + ?(ЗначениеЗаполнено(Параметры.РегистрационныйНомерПФР), Параметры.РегистрационныйНомерПФР, "")
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодОрганаПФР),СтрЗаменить(Параметры.КодОрганаПФР, "-", ""),"")
			+ "_СЗВ-СТАЖ"
			+ "_" + Формат(Дата, "ДФ=ггггММдд")
			+ "_" + УИД;
			
КонецФункции	

Процедура ОбработкаФормированияФайла(Объект) Экспорт
	
	ТекстФайла = СформироватьВыходнойФайл(Объект.Ссылка);
	ЗарплатаКадры.ЗаписатьФайлВАрхив(Объект.Ссылка, Объект.ИмяФайлаДляПФР, ТекстФайла, , "UTF-8", Ложь, Ложь);
	
КонецПроцедуры

Функция СформироватьВыходнойФайл(Ссылка)
	
	СписокДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	ВыборкаПоШапкеДокумента = ПерсонифицированныйУчет.ЗапросПоШапкеДляПечатиОДВ_1(СписокДокументов, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ").Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоДаннымДНП = ПерсонифицированныйУчет.ЗапросПоДаннымДосрочногоНазначенияПенсииОДВ_1(СписокДокументов, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ").Выбрать();
	
	// Загружаем формат файла сведений
	ДеревоФорматаXML = ПолучитьОбщийМакет("ФорматПФР_2019XML");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();
	
	ДеревоФормата = ЗарплатаКадры.ЗагрузитьXMLВДокументDOM(ТекстФорматаXML);
	
	ФорматОДВ_1 = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "ОДВ_1");
	
	НаборЗаписейДатаЗаполнения = Новый Структура("ДатаЗаполнения", ОбщегоНазначения.СкопироватьРекурсивно(ФорматОДВ_1.ДатаЗаполнения));
	ФорматОДВ_1.Удалить("ДатаЗаполнения");
	НаборЗаписейРуководитель = Новый Структура("Руководитель", ОбщегоНазначения.СкопироватьРекурсивно(ФорматОДВ_1.Руководитель));
	ФорматОДВ_1.Удалить("Руководитель");
	ФорматОснованияДНП = ОбщегоНазначения.СкопироватьРекурсивно(ФорматОДВ_1.ОснованияДНП.Значение);
	ФорматОДВ_1.Удалить("ОснованияДНП");
	
	ФорматОДВ_1.Удалить("Страховая");
	ФорматОДВ_1.Удалить("Накопительная");
	ФорматОДВ_1.Удалить("ТарифСВ");
	ФорматОДВ_1.Удалить("Уплата");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ЗарплатаКадры.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://пф.рф/ВС/СЗВ-СТАЖ/2018-03-22");
	Атрибуты.Вставить("xmlns:ВС2", "http://пф.рф/ВС/типы/2017-10-23");
	Атрибуты.Вставить("xmlns:АФ4", "http://пф.рф/АФ/2017-08-21");
	Атрибуты.Вставить("xmlns:УТ2", "http://пф.рф/УТ/2017-08-21");
	Атрибуты.Вставить("xmlns:ИС4", "http://пф.рф/ВС/ИС/типы/2018-11-20");
	
	УзелПФР = ЗарплатаКадры.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ЭДПФР", "", Атрибуты);
	
	// Служебная информация о файле
	НаборЗаписейСлужебнаяИнформация = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СлужебнаяИнформация");
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР) Тогда
		ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР),"_");
		НаборЗаписейСлужебнаяИнформация.АФ4__GUID.Значение = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
	КонецЕсли;
	НаборЗаписейСлужебнаяИнформация.АФ4__ДатаВремя.Значение = ПерсонифицированныйУчет.ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(ВыборкаПоШапкеДокумента.Дата);
	НаборЗаписейСлужебнаяИнформация.АФ4__ПрограммаПодготовки.Значение = ВРег(РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ЗарплатаКадры.ДобавитьИнформациюВДерево(ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СлужебнаяИнформация",""), НаборЗаписейСлужебнаяИнформация);
	
	// Данные формы и страхователя
	ФорматОДВ_1.Тип.Значение = 0;	
	НаборЗаписейСтрахователь = ФорматОДВ_1.Страхователь.Значение;
	НаименованиеКраткое = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.НаименованиеСокращенное));
	ПерсонифицированныйУчет.УдалитьПробелыРядомСДефисом(НаименованиеКраткое);
	НаборЗаписейСтрахователь.ИС4__Наименование = НаименованиеКраткое;
	НаборЗаписейСтрахователь.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	НаборЗаписейСтрахователь.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейСтрахователь.УТ2__КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейСтрахователь.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматОДВ_1.Страхователь.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматОДВ_1.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;
	НаборЗаписейОтчетныйПериод = ФорматОДВ_1.ОтчетныйПериод.Значение;
	НаборЗаписейОтчетныйПериод.Код = 0;
	НаборЗаписейОтчетныйПериод.Год = ВыборкаПоШапкеДокумента.Год;
	
	ФорматОДВ_1.КоличествоЗЛ.Значение = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;	
	
	УзелФормы = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "ОДВ-1", "");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, ФорматОДВ_1);
	
	Если ВыборкаПоДаннымДНП.Количество() > 0 Тогда 
		УзелСпискаОснованияДНП = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелФормы, "ОснованияДНП", "");
		ФорматОснование = ОбщегоНазначения.СкопироватьРекурсивно(ФорматОснованияДНП.Основание.Значение);
		ФорматОснованияДНП.Удалить("Основание");
		ФорматОУТ = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматОснование.ОУТ);
		ФорматОснование.Удалить("ОУТ");
		Пока ВыборкаПоДаннымДНП.Следующий() Цикл 
			НаборЗаписейОснование = ОбщегоНазначения.СкопироватьРекурсивно(ФорматОснование);
			НаборЗаписейОснование.ИС4__Подразделение.Значение =ВРег(ВыборкаПоДаннымДНП.НаименованиеПодразделения);
			НаборЗаписейОснование.ИС4__ПрофессияДолжность.Значение = ВРег(ВыборкаПоДаннымДНП.НаименованиеДолжности);
			НаборЗаписейОснование.ИС4__КоличествоШтат.Значение = ВыборкаПоДаннымДНП.КоличествоРабочихМест;
			НаборЗаписейОснование.ИС4__КоличествоФакт.Значение = ВыборкаПоДаннымДНП.КоличествоРаботающих;
			НаборЗаписейОснование.ИС4__Описание.Значение = ВРег(ВыборкаПоДаннымДНП.ХарактерВыполняемыхРабот);
			НаборЗаписейОснование.ИС4__Документы.Значение = ВРег(ВыборкаПоДаннымДНП.ПервичныеДокументы);
			УзелОснование = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСпискаОснованияДНП, "Основание", "");
			ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелОснование, НаборЗаписейОснование);
			ПерсонифицированныйУчет.ВывестиДанныеОУТ(ВыборкаПоДаннымДНП, УзелОснование, ФорматОУТ)
		КонецЦикла;
		ФорматОснованияДНП.ИС4__ВсегоШтат.Значение = ВыборкаПоШапкеДокумента.ВсегоРабочихМестДНП;
		ФорматОснованияДНП.ИС4__ВсегоФакт.Значение = ВыборкаПоШапкеДокумента.ВсегоРаботающихДНП;
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСпискаОснованияДНП, ФорматОснованияДНП);
	КонецЕсли;
	
	НаборЗаписейРуководитель.Руководитель.Значение.Должность.Значение = ВРег(ВыборкаПоШапкеДокумента.ДолжностьРуководителя);
	НаборЗаписейФИО = НаборЗаписейРуководитель.Руководитель.Значение.ФИО.Значение;
	НаборЗаписейФИО.УТ2__Фамилия = ВРег(ВыборкаПоШапкеДокумента.ФамилияРуководителя);
	НаборЗаписейФИО.УТ2__Имя = ВРег(ВыборкаПоШапкеДокумента.ИмяРуководителя);
	НаборЗаписейФИО.УТ2__Отчество = ВРег(ВыборкаПоШапкеДокумента.ОтчествоРуководителя);
	ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейРуководитель.Руководитель.Значение.ФИО, "УТ2__Отчество");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейРуководитель);
	
	НаборЗаписейДатаЗаполнения.ДатаЗаполнения.Значение = Формат(ВыборкаПоШапкеДокумента.Дата, "ДФ=yyyy-MM-dd");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДатаЗаполнения);
	
	ФорматСЗВ_СТАЖ = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СЗВ_СТАЖ");
	
	ФорматЗЛ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_СТАЖ.ЗЛ.Значение);
	ФорматСЗВ_СТАЖ.Удалить("ЗЛ");
	НаборЗаписейСВ = Новый Структура("СВ", ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_СТАЖ.СВ));
	ФорматСЗВ_СТАЖ.Удалить("СВ");
	
	ВыборкаПоРаботникам = Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ЗапросПоСотрудникамДляПечати(СписокДокументов).Выбрать();
	
	// Данные формы и страхователя
	НаборЗаписейСтрахователь = ФорматСЗВ_СТАЖ.Страхователь.Значение;
	НаборЗаписейСтрахователь.ИС4__Наименование = НаименованиеКраткое;
	НаборЗаписейСтрахователь.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	НаборЗаписейСтрахователь.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейСтрахователь.УТ2__КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейСтрахователь.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматСЗВ_СТАЖ.Страхователь.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматСЗВ_СТАЖ.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;

	Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Исходная Тогда
		ФорматСЗВ_СТАЖ.Тип.Значение = 0;	
	ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Дополняющая Тогда
		ФорматСЗВ_СТАЖ.Тип.Значение = 1;	
	ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии Тогда
		ФорматСЗВ_СТАЖ.Тип.Значение = 2;	
	КонецЕсли;	
	НаборЗаписейОтчетныйПериод = ФорматСЗВ_СТАЖ.ОтчетныйПериод.Значение;
	НаборЗаписейОтчетныйПериод.Код = 0;
	НаборЗаписейОтчетныйПериод.Год = ВыборкаПоШапкеДокумента.Год;
	
	УзелФормы = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СЗВ-СТАЖ", "");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, ФорматСЗВ_СТАЖ);
	
	ФорматСтажевыйПериод = ОбщегоНазначения.СкопироватьРекурсивно(ФорматЗЛ.СтажевыйПериод.Значение);
	ФорматЗЛ.Удалить("СтажевыйПериод");
	НаборЗаписейДатаУвольнения = Новый Структура("ДатаУвольнения", ОбщегоНазначения.СкопироватьРекурсивно(ФорматЗЛ.ДатаУвольнения));
	ФорматЗЛ.Удалить("ДатаУвольнения");
	
	НаборЗаписейЗЛ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматЗЛ);
	
	Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		// Данные по физлицу
		Фамилия = СокрЛП(ВыборкаПоРаботникам.Фамилия);
		Имя = СокрЛП(ВыборкаПоРаботникам.Имя);
		Отчество = СокрЛП(ВыборкаПоРаботникам.Отчество);
		
		НаборЗаписейЗЛ.СНИЛС.Значение = ВыборкаПоРаботникам.СтраховойНомерПФР;
		НаборЗаписейФИО = НаборЗаписейЗЛ.ФИО.Значение;
		НаборЗаписейФИО.УТ2__Фамилия = ВРег(Фамилия);
		НаборЗаписейФИО.УТ2__Имя = ВРег(Имя);
		НаборЗаписейФИО.УТ2__Отчество = ВРег(Отчество);
		
		ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейЗЛ.ФИО, "УТ2__Отчество");
		
		УзелСотрудника = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелФормы, "ЗЛ", "");
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСотрудника, НаборЗаписейЗЛ);
		
		ВписатьЗаписиОСтажеВНаборДанных(УзелСотрудника, ФорматСтажевыйПериод, ВыборкаПоРаботникам);
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.СотрудникУволен) Тогда
			НаборЗаписейДатаУвольнения.ДатаУвольнения.Значение = Формат(Дата(ВыборкаПоШапкеДокумента.Год, 12, 31), "ДФ=yyyy-MM-dd");
			ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСотрудника, НаборЗаписейДатаУвольнения);
		КонецЕсли;
		
	КонецЦикла;
			
	Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии Тогда
		НаборЗаписейСВ.СВ.Значение.НачисленыНаОПС = ?(ВыборкаПоШапкеДокумента.НачисленыВзносыНаОПС, "1", "0");
		НаборЗаписейСВ.СВ.Значение.НачисленыПоДТ = ?(ВыборкаПоШапкеДокумента.НачисленыВзносыПоДТ, "1", "0");
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейСВ);
	КонецЕсли;
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML(, "UTF-8");
	ЗарплатаКадры.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance", Ложь);
	ТекстФайла = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрЗаменить(ТекстФайла, "__", ":");
	
КонецФункции

Процедура ВписатьЗаписиОСтажеВНаборДанных(УзелСотрудника, ФорматСтажевыйПериод, ВыборкаПоРаботникам) Экспорт	
	
	ФорматСтажевыйПериод.ИС4__ЛьготныйСтаж.НеВыводитьВФайл = Истина;
	ПараметрыСтажаСПравомНаДосрочнуюПенсию = ПерсонифицированныйУчет.ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию();
			
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерОсновнойЗаписи) Тогда
		
		Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл	
			
			ФорматСтажевыйПериод.ИС4__ЛьготныйСтаж.НеВыводитьВФайл = Истина;

			УзелСтажевыйПериод = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСотрудника, "СтажевыйПериод", "");
			ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
			
			УзелСтажевыйПериод.Строки.Найти("ИС4__Период").Строки.Найти("УТ2__С").Значение = Формат(ВыборкаПоРаботникам.ДатаНачалаПериода, "ДФ=yyyy-MM-dd");
			УзелСтажевыйПериод.Строки.Найти("ИС4__Период").Строки.Найти("УТ2__По").Значение = Формат(ВыборкаПоРаботникам.ДатаОкончанияПериода, "ДФ=yyyy-MM-dd");
			
			ФорматЛьготныйСтаж = ОбщегоНазначения.СкопироватьРекурсивно(ФорматСтажевыйПериод.ИС4__ЛьготныйСтаж.Значение);
			ВывестиЛьготныйСтаж(ВыборкаПоРаботникам, УзелСтажевыйПериод, ФорматЛьготныйСтаж, ПараметрыСтажаСПравомНаДосрочнуюПенсию);
			
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") Цикл
				// В дополнительной записи с номером 0 находится информация об основной записи
				Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
					Продолжить;
				КонецЕсли;
				ФорматЛьготныйСтаж = ОбщегоНазначения.СкопироватьРекурсивно(ФорматСтажевыйПериод.ИС4__ЛьготныйСтаж.Значение);
				ВывестиЛьготныйСтаж(ВыборкаПоРаботникам, УзелСтажевыйПериод, ФорматЛьготныйСтаж, ПараметрыСтажаСПравомНаДосрочнуюПенсию);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры	

Процедура ВывестиЛьготныйСтаж(ВыборкаПоРаботникам, УзелСтажевыйПериод, ФорматЛьготныйСтаж, ПараметрыСтажаСПравомНаДосрочнуюПенсию)
	
	ВыводитьЛьготныйСтаж = Ложь;
	
	НаборЗаписейЛьготныйСтаж = ФорматЛьготныйСтаж;
	НаборЗаписейЛьготныйСтаж.ИС4__ТУ.НеВыводитьВФайл = Ложь;
	НаборЗаписейЛьготныйСтаж.ИС4__ОУТ.НеВыводитьВФайл = Ложь;
	НаборЗаписейЛьготныйСтаж.ИС4__ИС.НеВыводитьВФайл = Ложь;
	НаборЗаписейЛьготныйСтаж.ИС4__ДопСведенияИС.НеВыводитьВФайл = Ложь;
	НаборЗаписейЛьготныйСтаж.ИС4__ВЛ.НеВыводитьВФайл = Ложь;
	
	// ДопСведенияИС
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
		НаборЗаписейЛьготныйСтаж.ИС4__ДопСведенияИС.Значение = ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажаКод;
		ВыводитьЛьготныйСтаж = Истина;
	ИначеЕсли ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей) Тогда
		НаборЗаписейЛьготныйСтаж.ИС4__ДопСведенияИС.Значение = ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей;
		ВыводитьЛьготныйСтаж = Истина;
	Иначе
		НаборЗаписейЛьготныйСтаж.ИС4__ДопСведенияИС.НеВыводитьВФайл = Истина;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа)
		И ПараметрыСтажаСПравомНаДосрочнуюПенсию.Найти(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда 
		
		НаборЗаписейЛьготныйСтаж.ИС4__ВЛ.НеВыводитьВФайл = Истина;
		НаборЗаписейЛьготныйСтаж.ИС4__ИС.НеВыводитьВФайл = Истина;
		НаборЗаписейЛьготныйСтаж.ИС4__ОУТ.НеВыводитьВФайл = Истина;
		НаборЗаписейЛьготныйСтаж.ИС4__ТУ.НеВыводитьВФайл = Истина;
		
	Иначе
		НаборЗаписейТерриториальныеУсловия = НаборЗаписейЛьготныйСтаж.ИС4__ТУ.Значение;
		// Территориальные условия
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловияКод) Тогда
			НаборЗаписейТерриториальныеУсловия.ИС4__Основание = СокрЛП(ВыборкаПоРаботникам.ТерриториальныеУсловияКод);
			ПерсонифицированныйУчет.ВписатьСтавкуВНаборДанныхТеррУсловий(ВыборкаПоРаботникам.ТерриториальныеУсловия, ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка, НаборЗаписейЛьготныйСтаж.ИС4__ТУ);
		Иначе
			НаборЗаписейЛьготныйСтаж.ИС4__ТУ.НеВыводитьВФайл = Истина;	
		КонецЕсли;	
		ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейТерриториальныеУсловия.ИС4__Основание);
		
		// Особые условия труда
		НаборЗаписейОсобыеУсловияТруда = НаборЗаписейЛьготныйСтаж.ИС4__ОУТ.Значение;
		
		НаборЗаписейЛьготныйСтаж.ИС4__ОУТ.НеВыводитьВФайл = Ложь;
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод) Тогда
			НаборЗаписейОсобыеУсловияТруда.ИС4__Код = СокрЛП(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод);
			НаборЗаписейОсобыеУсловияТруда.ИС4__ПозицияСписка = ВРег(СокрЛП(ВыборкаПоРаботникам.КодПозицииСпискаКод));
			ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейОсобыеУсловияТруда.ИС4__Код);
		Иначе
			НаборЗаписейЛьготныйСтаж.ИС4__ОУТ.НеВыводитьВФайл = Истина;
		КонецЕсли;	
		
		// Исчисляемый стаж
		НаборЗаписейИсчисляемыйСтаж = НаборЗаписейЛьготныйСтаж.ИС4__ИС.Значение;
		НаборЗаписейИсчисляемыйСтаж.ИС4__Основание.НеВыводитьВФайл = Ложь;
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод) Тогда
			НаборЗаписейИсчисляемыйСтаж.ИС4__Основание.Значение = СокрЛП(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод);
		Иначе
			НаборЗаписейИсчисляемыйСтаж.ИС4__Основание.НеВыводитьВФайл = Истина;
		КонецЕсли;
		
		НаборЗаписейЛьготныйСтаж.ИС4__ИС.НеВыводитьВФайл = Ложь;
		НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Ложь;
		НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Ложь;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) И ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
			НаборЗаписейЛьготныйСтаж.ИС4__ИС.НеВыводитьВФайл = Истина;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа) Тогда		
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
				НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
			ИначеЕсли ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ Тогда
				НаборЗаписейВыработкаВЧасах = НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.Значение;
				НаборЗаписейВыработкаВЧасах.ВС2__Часы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
				НаборЗаписейВыработкаВЧасах.ВС2__Минуты = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
				НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
			ИначеЕсли ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
				НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.Значение;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
			Иначе
				НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
			КонецЕсли;
			ВыводитьЛьготныйСтаж = Истина;
		Иначе
			НаборЗаписейЛьготныйСтаж.ИС4__ИС.НеВыводитьВФайл = Истина;		
		КонецЕсли;	
		
		ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейИсчисляемыйСтаж.ИС4__Основание.Значение);
		
		// Выслуга лет
		НаборЗаписейВыслугаЛет = НаборЗаписейЛьготныйСтаж.ИС4__ВЛ.Значение;
		НаборЗаписейЛьготныйСтаж.ИС4__ВЛ.НеВыводитьВФайл = Ложь;	
		НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Ложь;
		НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Ложь;
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод) Тогда
			
			НаборЗаписейВыслугаЛет.ИС4__Основание.Значение = ВРег(СокрЛП(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод));
			ПерсонифицированныйУчет.ВписатьСтавкуВНаборДанныхИсчисляемогоСтажа(ВыборкаПоРаботникам.ТретийПараметрВыслугиЛет, НаборЗаписейВыслугаЛет);
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда	
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
			ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет) Тогда
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
			ИначеЕсли ВыборкаПоРаботникам.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_15 Тогда
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				НаборЗаписейВыработкаКалендарная = НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.Значение;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
			Иначе
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
				НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.Значение;
				НаборЗаписейВыработкаВЧасах.ВС2__Часы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
				НаборЗаписейВыработкаВЧасах.ВС2__Минуты = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
			КонецЕсли;
			ВыводитьЛьготныйСтаж = Истина;
		Иначе
			НаборЗаписейЛьготныйСтаж.ИС4__ВЛ.НеВыводитьВФайл = Истина;	
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ВыводитьЛьготныйСтаж Тогда
		УзелЛьготныйСтаж = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ИС4__ЛьготныйСтаж","");
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьФайлыВоВременноеХранилище(Ссылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	ДанныеФайла = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);
	
	ОписаниеВыгруженногоФайла = ПерсонифицированныйУчет.ОписаниеВыгруженногоФайлаОтчетности();
	
	ОписаниеВыгруженногоФайла.Владелец = Ссылка;
	ОписаниеВыгруженногоФайла.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
	ОписаниеВыгруженногоФайла.ИмяФайла = ДанныеФайла.ИмяФайла;
	ОписаниеВыгруженногоФайла.ПроверятьCheckXML = Ложь;
	ОписаниеВыгруженногоФайла.ПроверятьCheckUFA = Истина;
	ОписаниеВыгруженногоФайла.ПроверятьПОПД = Истина;
	
	ВыгруженныеФайлы = Новый Массив;
	ВыгруженныеФайлы.Добавить(ОписаниеВыгруженногоФайла);
	
	Возврат ВыгруженныеФайлы;
	
КонецФункции

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_ФормаСЗВ_СТАЖ";
	КомандаПечати.Представление = НСтр("ru = 'СЗВ-СТАЖ'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_ФормаОДВ_1";
	КомандаПечати.Представление = НСтр("ru = 'ОДВ-1'");
	КомандаПечати.Порядок = 20;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ФормаСЗВ_СТАЖ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПФ_MXL_ФормаСЗВ_СТАЖ", 
			"СЗВ-СТАЖ", 
			ПечатнаяФормаСЗВ_СТАЖ(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ФормаОДВ_1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПФ_MXL_ФормаОДВ_1", 
			"ОДВ-1", 
			ПерсонифицированныйУчет.ПечатнаяФормаОДВ_1(МассивОбъектов, ОбъектыПечати, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ"));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатнаяФормаСЗВ_СТАЖ(МассивОбъектов, ОбъектыПечати)
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечати(МассивОбъектов).Выбрать();
	ВыборкаПоРаботникам = ЗапросПоСотрудникамДляПечати(МассивОбъектов).Выбрать();
	
	ЭтоПервыйДокументКоллекции = Истина;
	
	Пока ВыборкаПоШапкеДокумента.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ПФ_MXL_ФормаСЗВ_СТАЖ_2019");
		
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЗВ_СТАЖ";
		ДокументРезультат.ПолеСлева = 0;
		ДокументРезультат.ПолеСправа = 0;
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрокаСтажа = Макет.ПолучитьОбласть("СтрокаСтажа");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьСтрокаКодПозицииСписка = Макет.ПолучитьОбласть("СтрокаКодПозицииСписка");
		
		Если ЭтоПервыйДокументКоллекции Тогда
			ЭтоПервыйДокументКоллекции = Ложь;	
		Иначе
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;	
		
		ТекущийЛист = Новый ТабличныйДокумент;
		ТекущийЛист.ПолеСлева = 0;
		ТекущийЛист.ПолеСправа = 0;
		ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
		
		РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
		РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
		ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьШапка, "НомРег", 12, 13);
		
		ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
		ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ИНН, ОбластьШапка, "ИНН", 12, 13);
		
		ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьШапка, "КПП", 9, 10);
		
		ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.Год,"ЧГ=0"), ОбластьШапка, "Год", 4);
		
		НомерСтраницы = 1;
		НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 5);
		ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(НомерДляПечати, ОбластьШапка, "НомСтр", 5);
		
		ОбластьШапка.Параметры.Исходная = ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Исходная;
		ОбластьШапка.Параметры.Дополняющая = ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Дополняющая;
		ОбластьШапка.Параметры.НазначениеПенсии = ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии;
		
		ОбластьШапка.Параметры.НаименованиеОрганизации = ВыборкаПоШапкеДокумента.НаименованиеОрганизации;
		ОбластьШапка.Параметры.Организация = ВыборкаПоШапкеДокумента.Организация;
		
		ТекущийЛист.Вывести(ОбластьШапка);
		ТекущийЛист.Вывести(ОбластьЗаголовок);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьСтрокаСтажа);
		
		ВыборкаПоРаботникам.Сбросить();
		
		Если ВыборкаПоРаботникам.НайтиСледующий(Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка)) Тогда
			
			ВыборкаПоРаботникам.СледующийПоЗначениюПоля("Ссылка");
			НомерСтроки = 0;
			
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
				
				ОчиститьОбласть(ОбластьСтрокаСтажа);
				ЗаполнитьЗначенияСвойств(ОбластьСтрокаСтажа.Параметры, ВыборкаПоРаботникам);
				
				Если ЗначениеЗаполнено(ОбластьСтрокаСтажа.Параметры.СотрудникУволен) Тогда 
					ОбластьСтрокаСтажа.Параметры.СотрудникУволен = Формат(КонецГода(ВыборкаПоШапкеДокумента.ОтчетныйПериод), "ДЛФ=Д");
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				ОбластьСтрокаСтажа.Параметры.НомерСтроки = СтрЗаменить(ВыборкаПоРаботникам.НомерСтроки, Символы.НПП, "") + ".";
				
				Если ВыборкаПоРаботникам.ЗаполненСтаж Тогда
					Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") Цикл
						Если ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕТИПРЛ Тогда 
							ОбластьСтрокаСтажа.Параметры.ТерриториальныеУсловияКод = "";
						КонецЕсли;
						ВывестиСтрокуСтажа(ВыборкаПоРаботникам, ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, ОбластьЗаголовок);
						Если ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСпискаКод) Тогда 
							ЗаполнитьЗначенияСвойств(ОбластьСтрокаКодПозицииСписка.Параметры, ВыборкаПоРаботникам);
							ВывестиОбласть(ОбластьСтрокаКодПозицииСписка, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
						КонецЕсли;
						ОбластьСтрокаСтажа.Параметры.Фамилия = "";
						ОбластьСтрокаСтажа.Параметры.Имя = "";
						ОбластьСтрокаСтажа.Параметры.Отчество = "";
						ОбластьСтрокаСтажа.Параметры.СтраховойНомерПФР = "";
						ОбластьСтрокаСтажа.Параметры.НомерСтроки = "";
						Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") Цикл
							Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
								Продолжить;
							КонецЕсли;
							ВывестиСтрокуСтажа(ВыборкаПоРаботникам, ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, ОбластьЗаголовок);
						КонецЦикла;	
					КонецЦикла;
				Иначе
					ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ВыборкаПоШапкеДокумента);
		ВывестиОбласть(ОбластьПодвал, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
		
		Если НомерСтраницы = 1 Тогда 
			ТекущийЛист.Область("R1C1:R1C24").Очистить(Истина, Ложь, Истина);
		КонецЕсли;
		
		ДокументРезультат.Вывести(ТекущийЛист);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ВывестиСтрокуСтажа(ВыборкаПоРаботникам, ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, ОбластьЗаголовок)
	
	ЗаполнитьОбластьСтаж(ВыборкаПоРаботникам, ОбластьСтрокаСтажа);
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей)
		И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
		ОбластьСтрокаСтажа.Параметры.ДопИТС = ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей;
	КонецЕсли;
	
	ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, ОбластьЗаголовок);
	
КонецПроцедуры

Функция ЗапросПоШапкеДляПечати(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ОписаниеИсточникаДанных = ПерсонифицированныйУчет.ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях();
	ОписаниеИсточникаДанных.ИмяТаблицы = "Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ";
	ОписаниеИсточникаДанных.ИмяПоляОрганизация = "Организация";
	ОписаниеИсточникаДанных.ИмяПоляПериод = "Дата";
	ОписаниеИсточникаДанных.СписокСсылок = МассивСсылок;

	ПерсонифицированныйУчет.СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(Запрос.МенеджерВременныхТаблиц, ОписаниеИсточникаДанных);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка КАК Ссылка,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеОрганизации,
	|	СведенияОбОрганизациях.ИНН КАК ИНН,
	|	СведенияОбОрганизациях.КПП КАК КПП,
	|	СведенияОбОрганизациях.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Год,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ОтчетныйПериод,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ОкончаниеОтчетногоПериода,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ТипСведений,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Руководитель КАК Руководитель,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ДолжностьРуководителя.Наименование КАК ДолжностьРуководителя,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Дата,
	|	СведенияОбОрганизациях.КодПоОКПО КАК КодПоОКПО,
	|	СведенияОбОрганизациях.ОГРН КАК ОГРН,
	|	СведенияОбОрганизациях.НаименованиеПолное КАК НаименованиеПолное,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	СведенияОбОрганизациях.РегистрационныйНомерПФР,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.НачисленыВзносыНаОПС,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.НачисленыВзносыПоДТ,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ИмяФайлаДляПФР
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях
	|		ПО СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация = СведенияОбОрганизациях.Организация
	|			И СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Дата = СведенияОбОрганизациях.Период
	|ГДЕ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка В(&МассивСсылок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Руководитель";
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	ДанныеДокументов.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.ЮридическоеФизическоеЛицо,
	|	ДанныеДокументов.ИНН КАК ИНН,
	|	ДанныеДокументов.КПП КАК КПП,
	|	ДанныеДокументов.ОГРН КАК ОГРН,
	|	ДанныеДокументов.КодПоОКПО КАК ОКПО,
	|	ДанныеДокументов.НаименованиеПолное КАК НаименованиеПолное,
	|	ДанныеДокументов.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ДанныеДокументов.Год КАК Год,
	|	ДанныеДокументов.ОтчетныйПериод,
	|	ДанныеДокументов.ТипСведений КАК ТипСведений,
	|	ЕСТЬNULL(ВТФИОПоследние.ФИОПолные, """") КАК Руководитель,
	|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокументов.Дата,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ТипСведений = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии)
	|			ТОГДА ДанныеДокументов.НачисленыВзносыНаОПС
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачисленыВзносыНаОПС,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ТипСведений = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии)
	|			ТОГДА ДанныеДокументов.НачисленыВзносыПоДТ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачисленыВзносыПоДТ,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ТипСведений = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии)
	|			ТОГДА НЕ ДанныеДокументов.НачисленыВзносыНаОПС
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеНачисленыВзносыНаОПС,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ТипСведений = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии)
	|			ТОГДА НЕ ДанныеДокументов.НачисленыВзносыПоДТ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеНачисленыВзносыПоДТ,
	|	ДанныеДокументов.ИмяФайлаДляПФР
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОПоследние.Ссылка
	|			И ДанныеДокументов.Руководитель = ВТФИОПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Год УБЫВ,
	|	ТипСведений,
	|	Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоСотрудникамДляПечати(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	Сотрудники.Фамилия КАК Фамилия,
	|	Сотрудники.Имя КАК Имя,
	|	Сотрудники.Отчество КАК Отчество,
	|	Сотрудники.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Сотрудники.СотрудникУволен
	|			ТОГДА ""Х""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СотрудникУволен
	|ПОМЕСТИТЬ ВТСотрудникиДокумента
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивСсылок)";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиОСтаже.ДокументОснование КАК ДокументОснование,
	|	ЗаписиОСтаже.Сотрудник КАК Сотрудник,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
	|	ЗаписиОСтаже.ЗамещениеГосударственныхМуниципальныхДолжностей КАК ЗамещениеГосударственныхМуниципальныхДолжностей,
	|	ЗаписиОСтаже.Организация КАК Организация
	|ПОМЕСТИТЬ ВТЗаписиОСтаже
	|ИЗ
	|	ВТСотрудникиДокумента КАК СотрудникиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеСведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.Сотрудник
	|			И СотрудникиДокумента.Ссылка = ЗаписиОСтаже.ДокументОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ
	|		ПО СотрудникиДокумента.Ссылка = СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа.Код КАК ТретийПараметрИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ЗамещениеГосударственныхМуниципальныхДолжностей КАК ЗамещениеГосударственныхМуниципальныхДолжностей,
	|	СотрудникиДокумента.НомерСтроки КАК НомерСтроки,
	|	СотрудникиДокумента.Сотрудник КАК Сотрудник,
	|	СотрудникиДокумента.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	СотрудникиДокумента.Фамилия КАК Фамилия,
	|	СотрудникиДокумента.Имя КАК Имя,
	|	СотрудникиДокумента.Отчество КАК Отчество,
	|	СотрудникиДокумента.СотрудникУволен КАК СотрудникУволен,
	|	СотрудникиДокумента.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.НомерОсновнойЗаписи ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаполненСтаж
	|ИЗ
	|	ВТСотрудникиДокумента КАК СотрудникиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.Сотрудник
	|			И СотрудникиДокумента.Ссылка = ЗаписиОСтаже.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ
	|		ПО СотрудникиДокумента.Ссылка = СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникиДокумента.Ссылка.Год УБЫВ,
	|	СотрудникиДокумента.Ссылка.ТипСведений,
	|	Ссылка,
	|	НомерСтроки,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ВывестиОбласть(ВыводимаяОбласть, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, ОбластьЗаголовок = Неопределено)
	
	ВыводимыеОбласти = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыводимаяОбласть);
	Если ТекущийЛист.ПроверитьВывод(ВыводимыеОбласти) Тогда 
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	Иначе 
		ДокументРезультат.Вывести(ТекущийЛист);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ТекущийЛист = НовыйПечатныйЛист(ВыборкаПоШапкеДокумента, ДокументРезультат, Макет, НомерСтраницы);
		Если ОбластьЗаголовок <> Неопределено Тогда 
			ТекущийЛист.Вывести(ОбластьЗаголовок);
		КонецЕсли;
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	КонецЕсли;	
	
КонецПроцедуры 

Функция НовыйПечатныйЛист(ВыборкаПоШапкеДокумента, ДокументРезультат, Макет, НомерСтраницы)
	
	ТекущийЛист = Новый ТабличныйДокумент;
	ТекущийЛист.ПолеСлева = 0;
	ТекущийЛист.ПолеСправа = 0;
	ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
	
	ОбластьКолонтитул = Макет.ПолучитьОбласть("Колонтитул");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	НомерСтраницы = НомерСтраницы + 1;
	НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 5);
	ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(НомерДляПечати, ОбластьКолонтитул, "НомСтр", 5, 6);
	
	ТекущийЛист.Вывести(ОбластьКолонтитул);
	ТекущийЛист.Вывести(ОбластьПустаяСтрока);
	
	Возврат ТекущийЛист;
	
КонецФункции

Процедура ЗаполнитьОбластьСтаж(ВыборкаЗаписейСтажа, ОбластьСтаж)
	
	ОбластьСтаж.Параметры.ДатаНачалаПериода = Формат(ВыборкаЗаписейСтажа.ДатаНачалаПериода, "ДФ=""дд.ММ.гггг""");
	ОбластьСтаж.Параметры.ДатаОкончанияПериода = Формат(ВыборкаЗаписейСтажа.ДатаОкончанияПериода, "ДФ=""дд.ММ.гггг""");
	
	Если ВыборкаЗаписейСтажа.ТретийПараметрИсчисляемогоСтажа <> Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕТИПРЛ Тогда 
		ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ВыборкаЗаписейСтажа.ТерриториальныеУсловияКод;
		Если ЗначениеЗаполнено(ВыборкаЗаписейСтажа.ТерриториальныеУсловияСтавка) Тогда 
			ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = Строка(ВыборкаЗаписейСтажа.ТерриториальныеУсловияКод) + " " + ВыборкаЗаписейСтажа.ТерриториальныеУсловияСтавка;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = ВыборкаЗаписейСтажа.ОсобыеУсловияТрудаКод;
	ОбластьСтаж.Параметры.ОснованиеИсчисляемогоСтажаКод = ВыборкаЗаписейСтажа.ОснованиеИсчисляемогоСтажаКод;
	ОбластьСтаж.Параметры.ОснованиеВыслугиЛетКод = ВыборкаЗаписейСтажа.ОснованиеВыслугиЛетКод;
	ОбластьСтаж.Параметры.ДопИТС = ПерсонифицированныйУчет.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ВыборкаЗаписейСтажа);
	
	ПерсонифицированныйУчет.ПредставлениеПараметровПенсииЗаВыслугуЛет(ВыборкаЗаписейСтажа, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
	
КонецПроцедуры

Процедура ОчиститьОбласть(ОбластьМакета)
	
	Для Счетчик = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		ОбластьМакета.Параметры[Счетчик] = ""
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли