#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет заполнение табличной части по инвентаризации Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация Товаров).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование) Экспорт

	Запрос = Новый Запрос;

	НТТ = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада") = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	Запрос.УстановитьПараметр("ДокументСсылка"                   , Ссылка);
	Запрос.УстановитьПараметр("НеавтоматизированнаяТорговаяТочка", НТТ);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка"          , ДокументОснование);

	// Заполняем выявленными излишками по инвентаризации, с учетом уже выполненного оприходования 
	// по данной инвентаризации. Цены берем из документа инвентраизации. 
	// Если розница – заполняем розничную цену.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокИнвентаризации.Номенклатура,
	|	ДокИнвентаризации.СчетУчета,
	|	МАКСИМУМ(ДокИнвентаризации.Количество - ДокИнвентаризации.КоличествоУчет) КАК КоличествоОтклонениеИнвентаризации,
	|	СУММА(ВЫБОР
	|			КОГДА ДокОприходование.Количество ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ДокОприходование.Количество
	|		КОНЕЦ) КАК КоличествоОприходованное,
	|	ДокИнвентаризации.Цена
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ДокИнвентаризации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров.Товары КАК ДокОприходование
	|		ПО ДокИнвентаризации.Номенклатура = ДокОприходование.Номенклатура
	|			И ДокИнвентаризации.СчетУчета = ДокОприходование.СчетУчета
	|			И ДокИнвентаризации.Ссылка.Склад = ДокОприходование.Ссылка.Склад
	|			И (ДокОприходование.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка)
	|			И (ДокОприходование.Ссылка.Проведен)
	|			И (ДокОприходование.Ссылка <> &ДокументСсылка)
	|ГДЕ
	|	ДокИнвентаризации.Ссылка = &ДокументОснованиеСсылка
	|	И ДокИнвентаризации.Количество - ДокИнвентаризации.КоличествоУчет > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокИнвентаризации.Номенклатура,
	|	ДокИнвентаризации.СчетУчета,
	|	ДокИнвентаризации.Цена,
	|	ДокИнвентаризации.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокИнвентаризации.НомерСтроки";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Склад");
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
		
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
	
	ДобавленныеСтроки = Новый Массив;
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл

		КоличествоОприходовать = СтрокаТовара.КоличествоОтклонениеИнвентаризации - СтрокаТовара.КоличествоОприходованное;

		Если КоличествоОприходовать <= 0 Тогда
			Продолжить;
		КонецЕсли; 

		СтрокаТабличнойЧасти = Товары.Добавить();
		ДобавленныеСтроки.Добавить(СтрокаТабличнойЧасти);

		СтрокаТабличнойЧасти.Номенклатура        = СтрокаТовара.Номенклатура;
		СтрокаТабличнойЧасти.СчетУчета           = СтрокаТовара.СчетУчета;
		СтрокаТабличнойЧасти.Количество          = КоличествоОприходовать;
		СтрокаТабличнойЧасти.Цена                = СтрокаТовара.Цена;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
		СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
		
		СтрокаТабличнойЧасти.ОтражениеВУСН 			= Перечисления.ОтражениеВУСН.НеПринимаются;
		
	КонецЦикла;

	Если Товары.Количество() = 0 Тогда

		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле",
			"Корректность",
			"Инвентаризация", // Параметр1
			, // Параметр2
			, // Параметр3
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе ""%1 № %2"" отсутствуют товары, фактическое количество которых превышает учетное.'"), 
				ДокументОснование.Метаданные().Представление(),
				ДокументОснование.Номер)); // Параметр4
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ИнвентаризацияТоваровНаСкладе", "Объект");
		
	Иначе
		
		СчетаУчетаВДокументах.ЗаполнитьСтроки(ДобавленныеСтроки, "Товары", ЭтотОбъект, Документы.ОприходованиеТоваров);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		ИнвентаризацияТоваровНаСкладе = Основание;
		ЗаполнитьТоварыПоИнвентаризацииТоваров(Основание);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Истина);
	Если НЕ ЗначениеЗаполнено(СтатьяПрочихДоходовРасходов) Тогда
		СтатьяПрочихДоходовРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ОприходованиеИзлишков");
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если ПроверяемыеРеквизиты.Найти("Склад") = Неопределено Тогда
		ПроверяемыеРеквизиты.Добавить("Склад");
	КонецЕсли;

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	// Установка значений переменных для дальнейшей проверки
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	мРазделятьПоСтавкамНДС  = ?(
		БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено,
		Ложь,
		Истина);

	ПрименениеУСН       = УчетнаяПолитика.ПрименяетсяУСН(Организация, Дата);
	ПрименениеУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Дата);
	
	ВедетсяРозничнаяТорговля = ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля");
	СпособОценкиТоваровВРознице       = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата);
	УчетВПродажныхЦенах = ВедетсяРозничнаяТорговля И (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);

	Если ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад И УчетВПродажныхЦенах Тогда
		РозницаВПродажныхЦенах = Истина;
	Иначе
		РозницаВПродажныхЦенах = Ложь;
	КонецЕсли;

	НТТ = (РозницаВПродажныхЦенах И ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	АТТ = (РозницаВПродажныхЦенах И ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин);

	Если АТТ Тогда
		// Установим параметры запроса
		ПорядокСубконто = Новый Массив();
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

		МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Склад",           Склад);
		Запрос.УстановитьПараметр("КонецПериода",    Дата);
		Запрос.УстановитьПараметр("Организация",     Организация);
		Запрос.УстановитьПараметр("Подразделение",   ПодразделениеОрганизации);
		Запрос.УстановитьПараметр("Счет",     		 ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
		Запрос.УстановитьПараметр("Номенклатура", 	 МассивНоменклатуры);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	СУММА(Остатки.СуммаОстатокДт) КАК СуммаОстаток,
		|	СУММА(Остатки.КоличествоОстатокДт) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет, &ПорядокСубконто, Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL) И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК Остатки
		|
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0 
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Субконто1
		|";

		ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();
		ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура");
	КонецЕсли;

	// Проверка заполнения табличной части "Товары"
	Если НТТ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ОтражениеВУСН");
		Если НЕ мРазделятьПоСтавкамНДС Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице");
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ЦенаВРознице");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаВРознице");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице");
		Если Не (Дата >= '20130101' И ПрименениеУСН И Не ПрименениеУСНДоходы) Тогда		
			МассивНепроверяемыхРеквизитов.Добавить("Товары.ОтражениеВУСН");		
		КонецЕсли; 
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Товары Цикл
		Префикс = "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Товары'"); 

		// Проверка на наличие услуг в таблице.
		Если НЕ НТТ И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "Услуга") Тогда
			ТекстСообщения = НСтр("ru = 'Указана номенклатура, являющаяся услугой.'");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
				НСтр("ru = 'Номенклатура'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "Номенклатура";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, Поле, "Объект", Отказ);
		КонецЕсли;

		Если АТТ Тогда
			УчетнаяЦена   		= 0;
			РозничнаяЦена 		= 0;
			СуммаОстаток  		= 0;
			КоличествоОстаток 	= 0;

			СтрокаТаблицыЦен = ТаблицаУчетныхЦен.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
			Если СтрокаТаблицыЦен <> Неопределено Тогда
				Если СтрокаТаблицыЦен.КоличествоОстаток <> 0 Тогда
					УчетнаяЦена = Окр(СтрокаТаблицыЦен.СуммаОстаток / СтрокаТаблицыЦен.КоличествоОстаток, 2, 1);
					СуммаОстаток = СтрокаТаблицыЦен.СуммаОстаток;
					КоличествоОстаток = СтрокаТаблицыЦен.КоличествоОстаток;
				КонецЕсли;
			КонецЕсли;

			РозничнаяЦена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТаблицы.Номенклатура,
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипЦенРозничнойТорговли"),
				Дата, ВалютаРегламентированногоУчета, 1, 1);

			РезультатПереоценки = Окр(КоличествоОстаток * РозничнаяЦена, 2, 1) - СуммаОстаток;
			РазницаЦен = УчетнаяЦена - РозничнаяЦена;
				
			ТребуетсяПереоценка = (РезультатПереоценки > 0.01 ИЛИ РезультатПереоценки < -0.01)
					И (РазницаЦен > 0.01 ИЛИ РазницаЦен < -0.01);

			Если РозничнаяЦена = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Не установлена розничная цена.'");
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
					НСтр("ru = 'Номенклатура'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "Номенклатура";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, Поле, "Объект", Отказ);
			ИначеЕсли УчетнаяЦена <> 0 И
					ТребуетсяПереоценка Тогда				
				ТекстСообщения = НСтр("ru = 'Розничная цена (%1) не равна учетной цене (%2).
										|Измените розничную цену или проведите переоценку.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РозничнаяЦена, УчетнаяЦена);
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
					НСтр("ru = 'Номенклатура'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "Номенклатура";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	
	ВедетсяРозничнаяТорговля = ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля");
	СпособОценкиТоваровВРознице       = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата);
	УчетВПродажныхЦенах = ВедетсяРозничнаяТорговля И (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Товары.Итог("Сумма");

	РозницаВПродажныхЦенах = (НЕ ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад) И УчетВПродажныхЦенах;

	Если РозницаВПродажныхЦенах Тогда
		Для Каждого Строка Из Товары Цикл
			Если ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
				Строка.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
			Иначе
				Строка.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ОприходованиеТоваров.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	Документы.ОприходованиеТоваров.ДобавитьКолонкуСодержание(ПараметрыПроведения.ОприходованиеТоваровТаблицаТовары);
	Документы.ОприходованиеТоваров.ДобавитьКолонкуСодержание(ПараметрыПроведения.ОприходованиеТоваровТорговаяНаценкаТаблицаТовары);
	Документы.ОприходованиеТоваров.ДобавитьКолонкуСодержание(ПараметрыПроведения.НомераГТД);

	Документы.ОприходованиеТоваров.ДобавитьКолонкуСодержаниеУСН(ПараметрыПроведения.РеквизитыУСН);
	
	// Учет доходов и расходов ИП
	ТаблицаОприходованияТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОприходованияТоваров(
		ПараметрыПроведения.ОприходованиеТоваровИПТаблица, ПараметрыПроведения.ОприходованиеТоваровИПРеквизиты);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	УчетТоваров.СформироватьДвиженияОприходованиеТоваров(ПараметрыПроведения.ОприходованиеТоваровТаблицаТовары,
		ПараметрыПроведения.ОприходованиеТоваровРеквизиты, Движения, Отказ);
	УчетТоваров.СформироватьДвиженияНачислениеТорговойНаценкиПоступлениеТоваров(ПараметрыПроведения.ОприходованиеТоваровТорговаяНаценкаТаблицаТовары,
		ПараметрыПроведения.ОприходованиеТоваровТорговаяНаценкаРеквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияОприходованиеТоваров(
		ПараметрыПроведения.ТоварыНДС, ПараметрыПроведения.НомераГТД, ПараметрыПроведения.РеквизитыНДС, Движения, Отказ);
		
	// поступление расходов УСН
	УчетУСН.ПоступлениеРасходовУСН(ПараметрыПроведения.УСНТаблицаРасходов, ПараметрыПроведения.РеквизитыПоступлениеРасходовУСН,,Движения, Отказ);
	// отражение доходов УСН в КУДиР
	УчетУСН.СформироватьДвиженияКнигаУчетаДоходовИРасходов(ПараметрыПроведения.РеквизитыУСН, Движения, Отказ);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОприходованиеТоваров(
		ТаблицаОприходованияТоваровИП, ПараметрыПроведения.ОприходованиеТоваровИПРеквизиты, Движения, Отказ);
		
	// Регистрация в последовательности
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, Отказ, , ПараметрыПроведения.ТаблицаРегистрации);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);

КонецПроцедуры


#КонецЕсли