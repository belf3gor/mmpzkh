
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеМодернизацияОС";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ИзмененаИнформацияОС", Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	// Изменение времени не влияет на поведение документа
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера
		= ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);

	// Проверим наличие строк в табличной части.
	Если НЕ ТребуетсяВызовСервера Тогда
		Если Объект.ОС.Количество() > 0 Тогда
			ТребуетсяВызовСервера = НЕ ЗначениеЗаполнено(МаксПериодПервоначальныхСведенийОС) 
				ИЛИ (МаксПериодПервоначальныхСведенийОС >= Объект.Дата);
		КонецЕсли;
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВключитьКапитальныеВложенияВРасходыНУПриИзменении(Элемент)

	Если НЕ ВключитьКапитальныеВложенияВРасходыНУ Тогда

		Если ПараметрыАмортизационнойПремииЗаполнены(ЭтаФорма) Тогда

			ТекстВопроса = НСтр("ru = 'Установленные параметры амортизационной премии будут очищены.
				|Продолжить?'");

			Оповещение = Новый ОписаниеОповещения("ВопросУстановитьПараметрыАмортизационнойПремииЗавершение", ЭтотОбъект);
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Иначе
			УстановитьДоступностьПараметровАмортизационнойПремии(ЭтаФорма);
		КонецЕсли;

	Иначе

		Если Объект.ОС.Количество() > 0 Тогда

			ОсновноеСредство = Объект.ОС[0].ОсновноеСредство;
			Если ЗначениеЗаполнено(ОсновноеСредство) Тогда

				СтруктураПараметровАмортизационнойПремии = 
					УчетОСВызовСервера.ПараметрыНачисленияАмортизационнойПремии(ОсновноеСредство, Объект.Организация, Объект.Дата);
				Если СтруктураПараметровАмортизационнойПремии <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметровАмортизационнойПремии);

					СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элементы.СчетУчетаЗатратПоАмортизационнойПремии);
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
		УстановитьДоступностьПараметровАмортизационнойПремии(ЭтаФорма);
	
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСтроительстваПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ОбъектСтроительства) Тогда 
		Объект.СчетУчетаВнеоборотногоАктива = ПолучитьСчетУчетаОбъектаСтроительства(
			Объект.Организация, Объект.ОбъектСтроительства);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПоАмортизационнойПремии3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыОС

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВСтрокеОС(Элементы.ОС.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)

	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
	
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		
		СтрокаТЧ.ИнвентарныйНомер = "";
		
	Иначе
		
		СтруктураСведений = ДополнительныеСведенияОС(ОсновноеСредство, Объект.Организация, Объект.Дата);
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСведений);
		МаксПериодПервоначальныхСведенийОС 	= Макс(МаксПериодПервоначальныхСведенийОС, СтруктураСведений.Период);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьСуммы(Команда)

	Если Объект.Проведен Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Заполнение возможно только в непроведенном документе'"), 60);
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	Отказ = Ложь;

	Если НЕ ЗначениеЗаполнено(Объект.ОбъектСтроительства) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Объект строительства'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ОбъектСтроительства", , Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаВнеоборотногоАктива) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Счет учета внеоборотного актива'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.СчетУчетаВнеоборотногоАктива", , Отказ);
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	СтруктураСтоимости = УчетОСВызовСервера.РассчитатьСтоимостьОбъектаСтроительства(Объект.Организация,
		Объект.ПодразделениеОрганизации, КонецМесяца(Объект.Дата), Объект.СчетУчетаВнеоборотногоАктива, Объект.ОбъектСтроительства);

	ЗаполнитьЗначенияСвойств(Объект, СтруктураСтоимости);

	Объект.СтоимостьУСН = СтруктураСтоимости.СтоимостьБУ;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)

	ОсновноеСредство = УправлениеВнеоборотнымиАктивамиКлиент.ПолучитьОСДляЗаполнениеПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма));

	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ЗаполнитьПоНаименованиюСервер(ОсновноеСредство);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)

	ПараметрыФормы = Новый Структура;
	Если Объект.ОС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;

	ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Распределить(Команда)
	
	Если Объект.ОС.Количество() > 0 Тогда
		РаспределитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОтрисовкаФормы

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ОССуммаКапитальныхВложенийВключаемыхВРасходыНУ, ОСПустаяЯчейкаБУ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОССуммаКапитальныхВложенийВключаемыхВРасходыНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОСПустаяЯчейкаБУ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВключитьКапитальныеВложенияВРасходыНУ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьСостояниеДокумента();
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВключитьКапитальныеВложенияВРасходыНУ = ПараметрыАмортизационнойПремииЗаполнены(ЭтаФорма);
	УстановитьДоступностьПараметровАмортизационнойПремии(ЭтаФорма);
	
	ЗаполнитьИнвентарныеНомераОС();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	Если ПолучитьФункциональнуюОпциюФормы("ПлательщикНалогаНаПрибыль") Тогда
		
		НадписьПорядокУказанияСуммАмортизационнойПремии 
			= НСтр("ru = 'Сумма амортизационной премии указывается в табличном поле ""Основные средства"" индивидуально для каждого основного средства.'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыАмортизационнойПремииЗаполнены(Форма)

	Объект = Форма.Объект;
	
	Если Объект.ОС.Итог("СуммаКапитальныхВложенийВключаемыхВРасходыНУ") = 0
	   И НЕ ЗначениеЗаполнено(Объект.СчетУчетаЗатратПоАмортизационнойПремии)
	   И НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизацииПоАмортизационнойПремии)
	   И НЕ ЗначениеЗаполнено(Объект.СубконтоПоАмортизационнойПремии1)
	   И НЕ ЗначениеЗаполнено(Объект.СубконтоПоАмортизационнойПремии2)
	   И НЕ ЗначениеЗаполнено(Объект.СубконтоПоАмортизационнойПремии3) Тогда
	   
		Возврат Ложь;
	   
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПараметровАмортизационнойПремии(Форма)

	Форма.Элементы.ГруппаПараметрыАмортизационнойПремии.Видимость = Форма.ВключитьКапитальныеВложенияВРасходыНУ;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнвентарныеНомераОС()
	
	ТаблицаОС = Объект.ОС.Выгрузить();
	
	ТаблицаНомеров = УчетОС.ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС,
		Объект.Организация, Объект.Дата);
	
	Объект.ОС.Загрузить(ТаблицаНомеров);
	
	// Запомним максимальную дату первоначальных сведений ОС
	ТаблицаНомеров.Сортировать("Период");
	Если ТаблицаНомеров.Количество() > 0 Тогда
		МаксПериодПервоначальныхСведенийОС = ТаблицаНомеров[ТаблицаНомеров.Количество() - 1].Период;
	Иначе
		МаксПериодПервоначальныхСведенийОС = '0001-01-01';
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеСведенияОС()

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокОС", Объект.ОС.Выгрузить());
	Запрос.УстановитьПараметр("Дата", Новый Граница(Объект.Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокОС.НомерСтроки,
	|	СписокОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СписокОС.СрокПолезногоИспользованияБУ,
	|	СписокОС.СрокПолезногоИспользованияНУ,
	|	СписокОС.ОбъемПродукцииРаботБУ
	|ПОМЕСТИТЬ ВТСписокОС
	|ИЗ
	|	&СписокОС КАК СписокОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Период
	|ПОМЕСТИТЬ ВТИнвентарныйНомер
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						ВТСписокОС КАК СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот
	|ПОМЕСТИТЬ ВТСрокИспользованияБУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						ВТСписокОС КАК СписокОС)) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования
	|ПОМЕСТИТЬ ВТСрокИспользованияНУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						ВТСписокОС КАК СписокОС)) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСписокОС.НомерСтроки,
	|	ВТСписокОС.ОсновноеСредство,
	|	ЕСТЬNULL(ВТИнвентарныйНомер.ИнвентарныйНомер, """") КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(ВТИнвентарныйНомер.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Период,
	|	ВЫБОР
	|		КОГДА ВТСписокОС.СрокПолезногоИспользованияБУ = 0
	|			ТОГДА ЕСТЬNULL(ВТСрокИспользованияБУ.СрокПолезногоИспользования, 0)
	|		ИНАЧЕ ВТСписокОС.СрокПолезногоИспользованияБУ
	|	КОНЕЦ КАК СрокПолезногоИспользованияБУ,
	|	ВЫБОР
	|		КОГДА ВТСписокОС.СрокПолезногоИспользованияНУ = 0
	|			ТОГДА ЕСТЬNULL(ВТСрокИспользованияНУ.СрокПолезногоИспользования, 0)
	|		ИНАЧЕ ВТСписокОС.СрокПолезногоИспользованияНУ
	|	КОНЕЦ КАК СрокПолезногоИспользованияНУ,
	|	ВЫБОР
	|		КОГДА ВТСписокОС.ОбъемПродукцииРаботБУ = 0
	|			ТОГДА ЕСТЬNULL(ВТСрокИспользованияБУ.ОбъемПродукцииРабот, 0)
	|		ИНАЧЕ ВТСписокОС.ОбъемПродукцииРаботБУ
	|	КОНЕЦ КАК ОбъемПродукцииРаботБУ
	|ИЗ
	|	ВТСписокОС КАК ВТСписокОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнвентарныйНомер КАК ВТИнвентарныйНомер
	|		ПО ВТСписокОС.ОсновноеСредство = ВТИнвентарныйНомер.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСрокИспользованияБУ КАК ВТСрокИспользованияБУ
	|		ПО ВТСписокОС.ОсновноеСредство = ВТСрокИспользованияБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСрокИспользованияНУ КАК ВТСрокИспользованияНУ
	|		ПО ВТСписокОС.ОсновноеСредство = ВТСрокИспользованияНУ.ОсновноеСредство";
	
	ТаблицаДополнительныхДанных = Запрос.Выполнить().Выгрузить();
	Объект.ОС.Загрузить(ТаблицаДополнительныхДанных);
	
	// Запомним максимальную дату первоначальных сведений ОС
	ТаблицаДополнительныхДанных.Сортировать("Период");
	Если ТаблицаДополнительныхДанных.Количество() > 0 Тогда
		МаксПериодПервоначальныхСведенийОС = ТаблицаДополнительныхДанных[ТаблицаДополнительныхДанных.Количество() - 1].Период;
	Иначе
		МаксПериодПервоначальныхСведенийОС = '0001-01-01';
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для каждого СтрокаОС Из Объект.ОС Цикл
		ЗаполнитьНадписиВСтрокеОС(СтрокаОС);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВСтрокеОС(СтрокаОС)
	
	СтрокаОС.НадписьБУ = НСтр("ru = 'БУ:'");
	СтрокаОС.НадписьНУ = НСтр("ru = 'НУ:'");
	СтрокаОС.НадписьПР = НСтр("ru = 'ПР:'");
	СтрокаОС.НадписьВР = НСтр("ru = 'ВР:'");
	СтрокаОС.НадписьУСН = НСтр("ru = 'УСН:'");

КонецПроцедуры

#КонецОбласти

#Область ИзменениеРеквизитов

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	ЗаполнитьИнвентарныеНомераОС();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	ЗаполнитьИнвентарныеНомераОС();
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУстановитьПараметрыАмортизационнойПремииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		Для Каждого СтрокаОС Из Объект.ОС Цикл
			СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = 0;
		КонецЦикла;
		
		Объект.СчетУчетаЗатратПоАмортизационнойПремии = Неопределено;
		Объект.ПодразделениеОрганизацииПоАмортизационнойПремии = Неопределено;
		Объект.СубконтоПоАмортизационнойПремии1 = Неопределено;
		Объект.СубконтоПоАмортизационнойПремии2 = Неопределено;
		Объект.СубконтоПоАмортизационнойПремии3 = Неопределено;
		
		СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элементы.СчетУчетаЗатратПоАмортизационнойПремии);
		
	Иначе
		
		ВключитьКапитальныеВложенияВРасходыНУ = Истина;
		
	КонецЕсли;
	
	УстановитьДоступностьПараметровАмортизационнойПремии(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДополнительныеСведенияОС(ОсновноеСредство, Организация, Дата)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Новый Граница(Дата, ВидГраницы.Исключая));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТТаблицаОС
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Ссылка = &ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Период КАК Период,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТИнвентарныйНомер
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот
	|ПОМЕСТИТЬ ВТСрокИспользованияБУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования
	|ПОМЕСТИТЬ ВТСрокИспользованияНУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаОС.ОсновноеСредство,
	|	ЕСТЬNULL(ВТСрокИспользованияБУ.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияБУ,
	|	ЕСТЬNULL(ВТСрокИспользованияБУ.ОбъемПродукцииРабот, 0) КАК ОбъемПродукцииРаботБУ,
	|	ЕСТЬNULL(ВТСрокИспользованияНУ.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияНУ,
	|	ЕСТЬNULL(ВТИнвентарныйНомер.ИнвентарныйНомер, """") КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(ВТИнвентарныйНомер.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период
	|ИЗ
	|	ВТТаблицаОС КАК ВТТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСрокИспользованияБУ КАК ВТСрокИспользованияБУ
	|		ПО ВТТаблицаОС.ОсновноеСредство = ВТСрокИспользованияБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСрокИспользованияНУ КАК ВТСрокИспользованияНУ
	|		ПО ВТТаблицаОС.ОсновноеСредство = ВТСрокИспользованияНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнвентарныйНомер КАК ВТИнвентарныйНомер
	|		ПО ВТТаблицаОС.ОсновноеСредство = ВТИнвентарныйНомер.ОсновноеСредство";
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	СписокКолонок = "";
	Для Каждого Колонка Из ТаблицаРезультат.Колонки Цикл
		СписокКолонок = СписокКолонок + Колонка.Имя + ",";
	КонецЦикла;
	СписокКолонок = Лев(СписокКолонок, СтрДлина(СписокКолонок) - 1);
	
	Результат = Новый Структура(СписокКолонок);
	Для Каждого СтрокаРезультата Из ТаблицаРезультат Цикл
		ЗаполнитьЗначенияСвойств(Результат, СтрокаРезультата);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаОбъектаСтроительства(Знач Организация, Знач ОбъектСтроительства)

	СчетаУчета = БухгалтерскийУчетПереопределяемый.СчетаУчетаОбъектовСтроительства(Организация, ОбъектСтроительства);
	Возврат СчетаУчета.СчетУчета;

КонецФункции

#КонецОбласти

#Область Команды

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияПоНаименованию(Форма)

	Результат = Новый Структура;
	Результат.Вставить("Форма", Форма);
	Результат.Вставить("Объект", Форма.Объект);

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоНаименованиюСервер(Знач ОсновноеСредство)

	УчетОС.ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма), ОсновноеСредство);
	ЗаполнитьДополнительныеСведенияОС();
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Функция ПоместитьОСВХранилище()

	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);

КонецФункции

&НаСервере
Процедура РаспределитьНаСервере()
	
	ТаблицаОС = Объект.ОС.Выгрузить();
	
	Показатели = Новый Массив;
	Показатели.Добавить("БУ");
	Показатели.Добавить("НУ");
	Показатели.Добавить("ПР");
	Показатели.Добавить("УСН");
	
	Коэффициенты = Новый Массив;
	Для Счетчик = 1 По ТаблицаОС.Количество() Цикл
		Коэффициенты.Добавить(1);
	КонецЦикла;
	
	Для Каждого Показатель Из Показатели Цикл
		
		МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Объект["Стоимость" + Показатель], Коэффициенты);
		
		Если МассивСумм <> Неопределено Тогда
			ТаблицаОС.ЗагрузитьКолонку(МассивСумм, "СуммаМодернизации" + Показатель);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОС Цикл
		
		СтрокаТаблицы.СуммаМодернизацииВР = СтрокаТаблицы.СуммаМодернизацииБУ
			- СтрокаТаблицы.СуммаМодернизацииНУ - СтрокаТаблицы.СуммаМодернизацииПР;
		
	КонецЦикла;
	
	Объект.ОС.Загрузить(ТаблицаОС);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОбработкаВыбораНаСервере(Знач ВыбранноеЗначение)

	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	ЗаполнитьДополнительныеСведенияОС();
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоПоАмортизационнойПремии", "ПодразделениеОрганизацииПоАмортизационнойПремии", 
		"СубконтоПоАмортизационнойПремии", "ПодразделениеОрганизацииПоАмортизационнойПремии", 
		"СчетУчетаЗатратПоАмортизационнойПремии");
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

#КонецОбласти