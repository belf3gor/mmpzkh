
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка"
		И Параметры.Свойство("ТекущаяСтрока") Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСпискаДокументов";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Регионализация

// Обрабатывает результат операции запроса возможности перевозки партии в рамках регионализации.
//
Функция ОбработатьОтветНаЗапросВозможностиПеревозкиПартииВРамкахРегионализации(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	Изменения = Новый Массив;
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписей = ИнтеграцияВЕТИС.ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			ДокументОбъект = ДанныеДокумента.Документ.ПолучитьОбъект();
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
			РазрешенияНомеровМаршрутов = Новый Соответствие;
			РазрешенияВидовПродукции = Новый Соответствие;
			
			ВыполнениеУсловийПоМаршрутам = Новый Соответствие;
			ВыполнениеУсловийПоВидамПродукции = Новый Соответствие;
			
			ВыполненныеУсловия = ДокументОбъект.Регионализация.Выгрузить(Новый Структура("УсловиеВыполняется", Истина));
			ВыполненныеУсловия.Индексы.Добавить("УсловиеРегионализации, ВидПродукции");
			
			УсловияРегионализации = Новый ТаблицаЗначений;
			УсловияРегионализации.Колонки.Добавить("ВидПродукции", Новый ОписаниеТипов("СправочникСсылка.ПродукцияВЕТИС"));
			УсловияРегионализации.Колонки.Добавить("УсловиеРегионализации", Новый ОписаниеТипов("СправочникСсылка.УсловияРегионализацииВЕТИС"));
			УсловияРегионализации.Колонки.Добавить("УсловиеВыполняется", Новый ОписаниеТипов("Булево"));
			
			Для каждого РазрешениеМаршрута Из ДанныеДокумента.Объект.r13nRouteSection Цикл
				
				НомерМаршрута = Число(РазрешениеМаршрута.sqnId);
				ПоследнийСтатусРазрешенияМаршрута = Неопределено;
				
				Для каждого РазрешениеВидовПродукции Из РазрешениеМаршрута.appliedR13nRule Цикл
				
					СтатусРазрешения = Число(РазрешениеВидовПродукции.decision); // Строка. 1 - Разрешено, 2 - Разрешено с условиями, 3 - Запрещено.
					
					ВидыПродукции = Новый Массив;
					
					Для каждого СвойстваВидаПродукции Из РазрешениеВидовПродукции.cargoType Цикл
						ВидПродукции = ИнтеграцияВЕТИС.ВидПродукции(СвойстваВидаПродукции.guid,,, ПараметрыОбмена);
						ВидыПродукции.Добавить(ВидПродукции);
					КонецЦикла;
					
					Для каждого ВидПродукции Из ВидыПродукции Цикл
					
						Для каждого ТребованиеКПеремещению Из РазрешениеВидовПродукции.requirement Цикл
							
							// Внутри разрешения по маршруту со статусом 2 - разрешено с условиями, могут быть уточнения требований к перемещению по разным болезням
							// со статусами 1 (разрешено без условий), 2 (разрешено с условиями) и 3 (запрещено безусловно). В таком случае мы устанавливаем самый строгий статус.
							СтатусРазрешения = Макс(СтатусРазрешения, Число(ТребованиеКПеремещению.type)); // Строка. 1 - Разрешено, 2 - Разрешено с условиями, 3 - Запрещено.
							
							Если СтатусРазрешения = 2 Тогда
								
								Заболевание = ИнтеграцияВЕТИС.Заболевание(ТребованиеКПеремещению.relatedDisease.guid, ПараметрыОбмена, ТребованиеКПеремещению.relatedDisease.name);
								УсловияВыполненыВРамкахЗаболевания = Ложь;
								
								Для каждого ГруппаУсловий Из ТребованиеКПеремещению.conditionGroup Цикл
									УсловияПоГруппеВыполнены = Истина;
									
									Для каждого СведенияОУсловииПеремещения Из ГруппаУсловий.condition Цикл
										
										Если СведенияОУсловииПеремещения.guid = Неопределено Тогда
											Продолжить;
										КонецЕсли;
										
										ЗаболеванияУсловия = Новый Массив;
										Для каждого СведенияОЗаболеванииУсловия Из СведенияОУсловииПеремещения.relatedDisease Цикл
											Заболевание = ИнтеграцияВЕТИС.Заболевание(СведенияОЗаболеванииУсловия.guid, ПараметрыОбмена, СведенияОЗаболеванииУсловия.name);
											ЗаболеванияУсловия.Добавить(Заболевание);
										КонецЦикла;
										
										ОбязательностьУсловия = СведенияОУсловииПеремещения.strict;
										Если ОбязательностьУсловия = Неопределено Тогда
											ОбязательностьУсловия = Истина;
										КонецЕсли;
										
										УсловиеРегионализации = ИнтеграцияВЕТИС.УсловиеРегионализации(
											СведенияОУсловииПеремещения.guid,
											ПараметрыОбмена,
											СведенияОУсловииПеремещения.text,
											ОбязательностьУсловия,
											ЗаболеванияУсловия,
											Ложь);
										
										СтрокаУсловийРегионализации = УсловияРегионализации.Добавить();
										СтрокаУсловийРегионализации.ВидПродукции          = ВидПродукции;
										СтрокаУсловийРегионализации.УсловиеРегионализации = УсловиеРегионализации;
										
										ПоискУсловий = Новый Структура("УсловиеРегионализации, ВидПродукции", УсловиеРегионализации, ВидПродукции);
										СтрокиВыполненныхУсловий = ВыполненныеУсловия.НайтиСтроки(ПоискУсловий);
										Если СтрокиВыполненныхУсловий.Количество() > 0 Тогда
											СтрокаУсловийРегионализации.УсловиеВыполняется = СтрокиВыполненныхУсловий[0].УсловиеВыполняется;
										КонецЕсли;
										
										Если ОбязательностьУсловия Тогда
											УсловияПоГруппеВыполнены = Мин(УсловияПоГруппеВыполнены, СтрокаУсловийРегионализации.УсловиеВыполняется);
										Иначе
											УсловияПоГруппеВыполнены = УсловияПоГруппеВыполнены;
										КонецЕсли;
										
									КонецЦикла;
									
									УсловияВыполненыВРамкахЗаболевания = Макс(УсловияВыполненыВРамкахЗаболевания, УсловияПоГруппеВыполнены);
								КонецЦикла;
								
								УстановленноеЗначение = ВыполнениеУсловийПоВидамПродукции.Получить(ВидПродукции);
								Если УстановленноеЗначение = Неопределено Тогда
									ВыполнениеУсловийПоВидамПродукции.Вставить(ВидПродукции, УсловияВыполненыВРамкахЗаболевания);
								Иначе
									ВыполнениеУсловийПоВидамПродукции.Вставить(ВидПродукции, Мин(УстановленноеЗначение, УсловияВыполненыВРамкахЗаболевания));
								КонецЕсли;
								
								УстановленноеЗначение = ВыполнениеУсловийПоМаршрутам.Получить(НомерМаршрута);
								Если УстановленноеЗначение = Неопределено Тогда
									ВыполнениеУсловийПоМаршрутам.Вставить(НомерМаршрута, УсловияВыполненыВРамкахЗаболевания);
								Иначе
									ВыполнениеУсловийПоМаршрутам.Вставить(НомерМаршрута, Мин(УстановленноеЗначение, УсловияВыполненыВРамкахЗаболевания));
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
						РазрешениеВидаПродукции = РазрешенияВидовПродукции.Получить(ВидПродукции);
						
						Если РазрешениеВидаПродукции = Неопределено Тогда
							РазрешенияВидовПродукции.Вставить(ВидПродукции, СтатусРазрешения);
						Иначе
							// Наиболее строгое по всем точкам маршрутов.
							РазрешенияВидовПродукции.Вставить(ВидПродукции, Макс(РазрешениеВидаПродукции, СтатусРазрешения));
						КонецЕсли;
						
					КонецЦикла;
					
					Если ПоследнийСтатусРазрешенияМаршрута = Неопределено Тогда
						ПоследнийСтатусРазрешенияМаршрута = СтатусРазрешения;
					Иначе
						// Наиболее строгое по всем видам продукции.
						ПоследнийСтатусРазрешенияМаршрута = Макс(ПоследнийСтатусРазрешенияМаршрута, СтатусРазрешения);
					КонецЕсли;
					
				КонецЦикла;
				
				РазрешенияНомеровМаршрутов.Вставить(НомерМаршрута, ПоследнийСтатусРазрешенияМаршрута);
				
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Регионализация", УсловияРегионализации);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Регионализация.ВидПродукции КАК ВидПродукции,
			|	Регионализация.УсловиеРегионализации КАК УсловиеРегионализации,
			|	Регионализация.УсловиеВыполняется КАК УсловиеВыполняется
			|ПОМЕСТИТЬ Регионализация
			|ИЗ
			|	&Регионализация КАК Регионализация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Регионализация.ВидПродукции КАК ВидПродукции,
			|	Регионализация.УсловиеРегионализации КАК УсловиеРегионализации,
			|	МИНИМУМ(Регионализация.УсловиеВыполняется) КАК УсловиеВыполняется
			|ИЗ
			|	Регионализация КАК Регионализация
			|
			|СГРУППИРОВАТЬ ПО
			|	Регионализация.ВидПродукции,
			|	Регионализация.УсловиеРегионализации";
			
			ДокументОбъект.Регионализация.Загрузить(Запрос.Выполнить().Выгрузить());
			
			НомерМаршрута = 0;
			Для каждого СтрокаМаршрута Из ДокументОбъект.МаршрутВозврата Цикл
				НомерМаршрута = НомерМаршрута + 1;
				ЗначениеРазрешения = РазрешенияНомеровМаршрутов.Получить(НомерМаршрута);
				Если НЕ ЗначениеРазрешения = Неопределено Тогда
					РазрешениеНомераМаршрута = ИнтеграцияВЕТИСПовтИсп.РезультатПроверкиПравилРегионализации(ЗначениеРазрешения);
					СтрокаМаршрута.РезультатПроверкиПравилРегионализации = РазрешениеНомераМаршрута;
					Если РазрешениеНомераМаршрута = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий Тогда
						СтрокаМаршрута.УсловияРегионализацииВыполнены = ВыполнениеУсловийПоМаршрутам.Получить(НомерМаршрута);
					КонецЕсли;
				Иначе
					ТекстОшибки = НСтр("ru = 'В документе %1 указана строка №%2 табличной части ""Маршрут возврата"", которая не была передана в сервис. Данные ответа сервиса не актуальны.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						ДанныеДокумента.Документ,
						НомерМаршрута);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
			КонецЦикла;
			
			ЗапросВидовПродукцииДокумента = Новый Запрос;
			ЗапросВидовПродукцииДокумента.Текст =
			"ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	ЕСТЬNULL(Товары.Продукция.ВидПродукции, ЗНАЧЕНИЕ(Справочник.ПродукцияВЕТИС.ПустаяСсылка)) КАК ВидПродукции
			|ИЗ
			|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &Ссылка
			|	И Товары.ВозвращаемоеКоличествоВЕТИС <> 0";
			ЗапросВидовПродукцииДокумента.УстановитьПараметр("Ссылка", ДанныеДокумента.Документ);
			ВыборкаПоТЧТовары = ЗапросВидовПродукцииДокумента.Выполнить().Выбрать();
			Пока ВыборкаПоТЧТовары.Следующий() Цикл
				ИндексСтроки = ВыборкаПоТЧТовары.НомерСтроки - 1;
				СтрокаТовары = ДокументОбъект.Товары[ИндексСтроки];
				ЗначениеРазрешения = РазрешенияВидовПродукции.Получить(ВыборкаПоТЧТовары.ВидПродукции);
				Если НЕ ЗначениеРазрешения = Неопределено Тогда
					РазрешениеВидаПродукции = ИнтеграцияВЕТИСПовтИсп.РезультатПроверкиПравилРегионализации(ЗначениеРазрешения);
					СтрокаТовары.РезультатПроверкиПравилРегионализации = РазрешениеВидаПродукции;
					Если РазрешениеВидаПродукции = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий Тогда
						СтрокаТовары.УсловияРегионализацииВыполнены = ВыполнениеУсловийПоВидамПродукции.Получить(ВыборкаПоТЧТовары.ВидПродукции);
					Иначе
						СтрокаТовары.УсловияРегионализацииВыполнены = Ложь;
					КонецЕсли;
				Иначе
					ТекстОшибки = НСтр("ru = 'В документе %1 указан вид продукции ""%2"", который не был передан в сервис. Данные ответа сервиса не актуальны.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						ДанныеДокумента.Документ,
						ВыборкаПоТЧТовары.ВидПродукции);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
			КонецЦикла;
			
			ОбъектИзменен = Истина;
			
			ДокументОбъект.Записать();
			
		КонецЕсли;
		
		ПараметрыОбновленияСтатуса = ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗаявки;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = ДанныеДокумента.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
		
		НовыйСтатус = ОбновитьСтатусПослеПолученияДанных(
			ДанныеДокумента.Документ,
			ДанныеДокумента.ВходящаяОперация,
			ПараметрыОбновленияСтатуса);
		
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ИнтеграцияВЕТИС.ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДанныеДокумента.Документ;
	ВозвращаемоеЗначение.ДокументОснование = ДанныеДокумента.ДокументОснование;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	
	Изменения.Добавить(ВозвращаемоеЗначение);
	
	Возврат Изменения;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеВЕТИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.КГашениюВСД);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросВозможностиПеревозкиПартииВРамкахРегионализации Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеНомеровТранспортныхСредств Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросИзмененияНомеровТранспортныхСредствКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросПакетногоГашенияВСД Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.КГашениюВСД);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала
		Или Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД Тогда
		// Попытка восстановления	
	Иначе
		ВызватьИсключение ИнтеграцияВЕТИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийВЕТИС - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии
		Или Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросПакетногоГашенияВСД Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеЗавершенияОбработкиДанныхВЕТИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Ошибка;
		
		Если ДополнительныеПараметры <> Неопределено
			И ДополнительныеПараметры.ЕстьОшибкиСервиса Тогда
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		Иначе
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросВозможностиПеревозкиПартииВРамкахРегионализации Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеЗавершенияОбработкиДанныхВЕТИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеНомеровТранспортныхСредств Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросИзмененияНомеровТранспортныхСредствОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеЗавершенияОбработкиДанныхВЕТИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросИзмененияНомеровТранспортныхСредствОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала
		Или Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД Тогда
		// Попытка восстановления
	Иначе
		ВызватьИсключение ИнтеграцияВЕТИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ВЕТИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияВходящейПартии Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ВСДПогашены;
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Ошибка;
		
		Если ДополнительныеПараметры.ЕстьОшибкиСервиса Тогда
			СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		Иначе
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросВозможностиПеревозкиПартииВРамкахРегионализации Тогда
		
		ПараметрыОбновления = ПараметрыОбновленияСтатусаРегионализации(ДокументСсылка, Операция, ДополнительныеПараметры);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененияНомеровТранспортныхСредств Тогда
		
		ПараметрыОбновления = ПараметрыОбновленияСтатусаРегионализации(ДокументСсылка, Операция, ДополнительныеПараметры);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросПакетногоГашенияВСД Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ВСДПогашены;
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Ошибка;
		
		Если ДополнительныеПараметры.ЕстьОшибкиСервиса Тогда
			СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		Иначе
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки, СтатусыБазовыйПроцесс);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД Тогда
		// Подготовка данных к восстановлению
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала Тогда
		
		// Выполнена проверка корректности оформления.
		// Из ВетИС получен пустой ответ на запрос измененных записей складского журнала. 
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Ошибка;
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Ошибка;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
			Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
			Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ИнтеграцияВЕТИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ВЕТИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции


// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияВЕТИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица   = ИнтеграцияВЕТИС.ПустаяТаблицаПоследовательностьОпераций();
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	Входящий  = Перечисления.ТипыЗапросовИС.Входящий;
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -3,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -3,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияВходящейПартии);
	
	// Запросы восстановления
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -31,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -31,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД);
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -31,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -31,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала);
	
	// Повторный запрос после проверки корректности оформления
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -31,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -31,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияВходящейПартии);
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -2,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеНомеровТранспортныхСредств);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -2,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененияНомеровТранспортныхСредств);
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -21,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросВозможностиПеревозкиПартииВРамкахРегионализации);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -21,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросВозможностиПеревозкиПартииВРамкахРегионализации);
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -21,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -21,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияВходящейПартии);
	
	// Запросы восстановления
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -211,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -211,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД);
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -211,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -211,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала);
	
	// Повторный запрос после проверки корректности оформления
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -211,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -211,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияВходящейПартии);
	
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -22,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -22,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияВходящейПартии);
	
	// Запросы восстановления
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -221,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -221,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД);
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -221,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -221,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала);
	
	// Повторный запрос после проверки корректности оформления
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -221,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -221,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияВходящейПартии);
	
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросВозможностиПеревозкиПартииВРамкахРегионализации);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросВозможностиПеревозкиПартииВРамкахРегионализации);
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -11,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеНомеровТранспортныхСредств);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -11,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененияНомеровТранспортныхСредств);
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -11,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -11,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияВходящейПартии);
	
	// Запросы восстановления
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -111,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -111,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД);
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -111,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -111,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала);
	
	// Повторный запрос после проверки корректности оформления
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -111,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -111,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияВходящейПартии);
	
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -12,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеНомеровТранспортныхСредств);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -12,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененияНомеровТранспортныхСредств);
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -12,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -12,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияВходящейПартии);
	
	// Запросы восстановления
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -121,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -121,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД);
	
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -121,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -121,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала);
	
	// Повторный запрос после проверки корректности оформления
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -121,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
	ИнтеграцияВЕТИС.ДобавитьОперациюВПоследовательность(Таблица, -121,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияВходящейПартии);
	
	Возврат Таблица;
	
КонецФункции

// Опеределить необходимость перезаписи движений.
//
// Параметры:
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перезаписи движений.
//
Функция ОбновлятьДвижения(ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Выполнить перерасчет статуса.
//
// Параметры:
//  ДокументСсылка   - ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС - Предыдущий статус.
//  НовыйСтатус      - ПеречислениеСсылка.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС - Новый статус.
// 
Процедура РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Если КонечныеСтатусы().Найти(НовыйСтатус) <> Неопределено Тогда
		РасчетСтатусовОформленияВЕТИС.РассчитатьСтатусОформленияДокументаВЕТИС(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияВЕТИСПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
КонецПроцедуры

Функция ОперацииДопустимыхДействий() Экспорт
	
	СоответствиеОпераций = Новый Соответствие;
	СоответствиеОпераций.Вставить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
	СоответствиеОпераций.Вставить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения,
		Перечисления.ВидыОперацийВЕТИС.ЗапросВозможностиПеревозкиПартииВРамкахРегионализации);
	СоответствиеОпераций.Вставить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВнеситеНомераТранспортныхСредств,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеНомеровТранспортныхСредств);
	СоответствиеОпераций.Вставить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные,
		Перечисления.ВидыОперацийВЕТИС.ЗапросПакетногоГашенияВСД);
		
	Возврат СоответствиеОпераций
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Ошибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы документа.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы() Экспорт
	
	Статусы = Новый Массив;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(ФлагНаличияПроверкиРегионализации = Ложь, ФлагНаличияНесоответствия = Ложь, ФлагУказанияНомера = Ложь, ФлагУказанияНомераВСД = Ложь) Экспорт
	
	Если ФлагНаличияНесоответствия Тогда
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ЗаполнитеАктНесоответствия;
	ИначеЕсли ФлагНаличияПроверкиРегионализации Тогда
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения;
	ИначеЕсли ФлагУказанияНомера Тогда
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВнеситеНомераТранспортныхСредств;
	ИначеЕсли ФлагУказанияНомераВСД Тогда
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.УкажитеНомераТранспортныхСредств;
	Иначе
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные;
	КонецЕсли;
	
	Возврат ДальнейшееДействие;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменВЕТИС

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВнеситеНомераТранспортныхСредств);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.УкажитеНомераТранспортныхСредств);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ИзменитеПродукциюИлиМаршрут);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ЗаполнитеАктНесоответствия);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеУсловияПеремещения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
	
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхВЕТИС") Тогда
		МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВыполнитеОбмен);
	КонецЕсли;
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеЗавершенияОбработкиДанныхВЕТИС);
	
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхВЕТИС") Тогда
		МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область СообщенияВЕТИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПараметрыПередачи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные Тогда
		
		Возврат ЗапросНаОформлениеВходящейПартииXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры);
		
	ИначеЕсли ПараметрыПередачи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения Тогда
		
		Возврат ЗапросПроверкиВозможностиПеревозкиВРамкахРегионализацииXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры);
		
	ИначеЕсли ПараметрыПередачи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВнеситеНомераТранспортныхСредств Тогда
		
		Возврат ЗапросНаВнесениеНомеровТранспортныхСредствВПунктахПерегрузкиXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры);
		
	ИначеЕсли ПараметрыПередачи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных Тогда
		
		Возврат ИнтеграцияВЕТИС.ЗапросДляПроверкиКорректностиОформленияXML(ДокументСсылка);
		
	КонецЕсли;
	
КонецФункции

// Операция предназначена для внесения номера транспортного средства в пункте перегрузке в уже оформленный ВСД, 
//   в случае если перемещение осуществлялось с использованием нескольких транспортных средств 
//   и отправителю на момент оформления ВСД неизвестны номера ТС на всем маршруте следования (мультимодальная перевозка). 
// Вносить сведения о номере транспортного средства в пункте перегрузки может как отправитель, так и получатель партии.
// ВСД, где не указаны номера всех транспортных средств во всех точках перегрузки не могут быть погашены получателем.
//
// На вход системы передаются следующие сведения:
//  - информация о пользователе - инициаторе запроса;
//  - идентификатор транспортного ВСД. Может быть указано более одного ВСД на партии, оформленные строго в одной транзакции в адрес одного получателя.
//  - маршрут следования. Указывается список точек перегрузки и сведения о транспорте. 
//                        Для точки перегрузки должен быть указан её идентификатор (uuid). 
//                        В запросе на изменение могут участвовать только точки маршрута, для которых установлен флаг transshipment (точка перегрузки).
// Результатом выполнения данной операции является:
//  - Список транспортных ВСД с измененными сведениями о транспортных средствах.
//
Функция ЗапросНаВнесениеНомеровТранспортныхСредствВПунктахПерегрузкиXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеНомеровТранспортныхСредств;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1);
	
	ДанныеДокумента = ДанныеНаВнесениеНомеровТранспортныхСредств(ДокументСсылка);
	Шапка = ДанныеДокумента.Шапка[0];
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	
	Если ДанныеДокумента.Шапка.Количество() = 0 Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНетДанныхДляВыгрузки(СообщенияXML, СообщениеXML);
	КонецЕсли;
	
	НастройкиОбменаВЕТИС = ИнтеграцияВЕТИС.НастройкиОбменаВЕТИС(Шапка.ГрузополучательХозяйствующийСубъект);
	НастройкаОбмена = НастройкиОбменаВЕТИС.ОбменНаСервере.Получить(Шапка.ГрузополучательХозяйствующийСубъект);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключения(СообщенияXML, СообщениеXML, Шапка.ГрузополучательХозяйствующийСубъект, НастройкиОбменаВЕТИС);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, ДокументСсылка, , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	ВспомогательныеДанные = Новый Структура;
//	ВспомогательныеДанные.Вставить("ТипыТранспорта",        ИнтеграцияВЕТИСПовтИсп.ТипыТранспорта());
	ВспомогательныеДанные.Вставить("ХранилищеВременныхДат", Новый Соответствие);
	
	#Область ФормированиеСообщения
	
	ДокументXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПараметрыЗапросаВЕТИС.ПространствоИмен, ПараметрыЗапросаВЕТИС.ТипВЕТИС);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "localTransactionId", Шапка.Идентификатор, СообщениеXML);
	
	// Пользователь, зарегистрированный в системе Меркурий, инициирующий запрос к шлюзу.
	ПользовательВЕТИС = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ПользовательВЕТИС, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	// Грузополучатель, осуществляющий изменение параметров маршрута.
	Инициатор = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "deliveryParticipant");
	ОбменДаннымиВЕТИС.ЗаполнитьОбъект_BusinessMember(Шапка, "Грузополучатель", Инициатор, СообщениеXML);
	
	// Идентификатор ветеринарного документа.
	Для каждого ДанныеВСД Из ДанныеДокумента.ВСД Цикл
		ДокументXDTO.vetDocumentUuid.Добавить(ДанныеВСД.ВСД_Идентификатор);
	КонецЦикла; 
	
	// Сведения о маршруте следования (пунктах перегрузки).
	МаршрутПеревозки = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "shipmentRoute");
	ОбменДаннымиВЕТИС.ЗаполнитьОбъект_ShipmentRoute(ДанныеДокумента.Маршрут, ВспомогательныеДанные, МаршрутПеревозки, СообщениеXML);
	
	#КонецОбласти
	
	ТекстСообщенияXML = ЗаявкиВЕТИС.ЗаявкаXML(ДокументXDTO, НастройкаОбмена, ВспомогательныеДанные.ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ВспомогательныеДанные.ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ПараметрыЗапросаВЕТИС.ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = Шапка.ГрузополучательХозяйствующийСубъект;
	СообщениеXML.Предприятие          = Шапка.ГрузополучательПредприятие;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = ДокументСсылка;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	СообщениеXML.Версия               = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#Область РегионализацияВЕТИС

Функция ЗапросПроверкиВозможностиПеревозкиВРамкахРегионализацииXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры)
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросВозможностиПеревозкиПартииВРамкахРегионализации;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1);
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СписокЗапросов = Новый СписокЗначений;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЕТИСПрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ВЕТИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ВЕТИСПрисоединенныеФайлы
	|ГДЕ
	|	ВЕТИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ВЕТИСПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ЗапросВозможностиПеревозкиПартииВРамкахРегионализации)
	|	И ВЕТИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЕТИСПрисоединенныеФайлы.Документ";
	СписокЗапросов.Добавить(ТекстЗапроса, "Версии");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Шапка.Дата                         КАК Дата,
	|	Шапка.Идентификатор                КАК Идентификатор,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
	|	
	|	Шапка.ГрузоотправительХозяйствующийСубъект                               КАК ГрузоотправительХозяйствующийСубъект,
	|	ЕСТЬNULL(Шапка.ГрузоотправительХозяйствующийСубъект.Идентификатор, """") КАК ГрузоотправительХозяйствующийСубъектИдентификатор,
	|	Шапка.ГрузоотправительПредприятие                                        КАК ГрузоотправительПредприятие,
	|	ЕСТЬNULL(Шапка.ГрузоотправительПредприятие.Идентификатор, """")          КАК ГрузоотправительПредприятиеGUID,
	|	ЕСТЬNULL(Шапка.ГрузоотправительПредприятие.Наименование, """")           КАК ГрузоотправительПредприятиеНаименование,
	|	
	|	Шапка.ГрузополучательХозяйствующийСубъект                               КАК ГрузополучательХозяйствующийСубъект,
	|	ЕСТЬNULL(Шапка.ГрузополучательХозяйствующийСубъект.Идентификатор, """") КАК ГрузополучательХозяйствующийСубъектИдентификатор,
	|	Шапка.ГрузополучательПредприятие                                        КАК ГрузополучательПредприятие,
	|	ЕСТЬNULL(Шапка.ГрузополучательПредприятие.Идентификатор, """")          КАК ГрузополучательПредприятиеGUID,
	|	ЕСТЬNULL(Шапка.ГрузополучательПредприятие.Наименование, """")           КАК ГрузополучательПредприятиеНаименование,
	|	
	|	ВЫБОР КОГДА НастройкаУполномоченногоГашения.Грузоотправитель ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК РазрешеноУполномоченноеГашение
	|	
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУполномоченногоГашенияВЕТИС КАК НастройкаУполномоченногоГашения
	|		ПО НастройкаУполномоченногоГашения.Грузоотправитель = Шапка.ГрузоотправительХозяйствующийСубъект
	|		И НастройкаУполномоченногоГашения.Грузополучатель = Шапка.ГрузополучательХозяйствующийСубъект
	|	
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка";
	СписокЗапросов.Добавить(ТекстЗапроса, "Шапка");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(Товары.Продукция.ВидПродукции.Идентификатор, """") КАК ВидПродукцииИдентификатор
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.ВозвращаемоеКоличествоВЕТИС <> 0";
	СписокЗапросов.Добавить(ТекстЗапроса, "Товары");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МаршрутВозврата.НомерСтроки КАК НомерСтроки,
	|	МаршрутВозврата.Предприятие КАК Предприятие,
	|	ЕСТЬNULL(МаршрутВозврата.Предприятие.Идентификатор, """") КАК ПредприятиеИдентификатор,
	|	МаршрутВозврата.Адрес КАК Адрес,
	|	МаршрутВозврата.ДанныеАдреса КАК ДанныеАдреса,
	|	ЛОЖЬ КАК СтрокаШапки
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.МаршрутВозврата КАК МаршрутВозврата
	|ГДЕ
	|	МаршрутВозврата.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&МаксимальныйНомерСтроки,
	|	Шапка.ГрузоотправительПредприятие,
	|	ЕСТЬNULL(Шапка.ГрузоотправительПредприятие.Идентификатор, """"),
	|	Шапка.ГрузоотправительПредприятие.АдресПредставление,
	|	Шапка.ГрузоотправительПредприятие.ДанныеАдреса,
	|	ИСТИНА
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокаШапки,
	|	НомерСтроки";
	СписокЗапросов.Добавить(ТекстЗапроса, "Маршруты");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                  ДокументСсылка);
	Запрос.УстановитьПараметр("МаксимальныйНомерСтроки", 9999);
	Запрос.УстановитьПараметр("ТекущийПользователь",     Пользователи.ТекущийПользователь());
	
	Результат = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	Шапка    = Результат.Шапка.Выбрать();
	Товары   = Результат.Товары.Выбрать();
	Маршруты = Результат.Маршруты.Выбрать();
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка);
	
	Если Не Шапка.Следующий() Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНетДанныхДляВыгрузки(СообщенияXML, СообщениеXML);
	КонецЕсли;
	
	УполномоченноеГашение = Ложь;
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("НастройкаОбмена") Тогда
		НастройкаОбмена = ДополнительныеПараметры.НастройкаОбмена;
	Иначе
		Если Шапка.РазрешеноУполномоченноеГашение Тогда
			НастройкиОбменаВЕТИС = ИнтеграцияВЕТИС.НастройкиОбменаВЕТИС(Шапка.ГрузоотправительХозяйствующийСубъект);
			НастройкаОбмена = НастройкиОбменаВЕТИС.ОбменНаСервере.Получить(Шапка.ГрузоотправительХозяйствующийСубъект);
			УполномоченноеГашение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкаОбмена = Неопределено Тогда
		НастройкиОбменаВЕТИС = ИнтеграцияВЕТИС.НастройкиОбменаВЕТИС(Шапка.ГрузополучательХозяйствующийСубъект);
		НастройкаОбмена = НастройкиОбменаВЕТИС.ОбменНаСервере.Получить(Шапка.ГрузополучательХозяйствующийСубъект);
	КонецЕсли;

	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключения(СообщенияXML, СообщениеXML, Шапка.ГрузополучательХозяйствующийСубъект, НастройкиОбменаВЕТИС);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, ДокументСсылка, , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	#Область ОприходованиеПродукцииВЕТИС
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	ДокументXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "localTransactionId", Шапка.Идентификатор, СообщениеXML);
	
	ДокументXDTO.initiator = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	Пока Товары.Следующий() Цикл
		
		cargoType = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "cargoType");
		cargoType.guid = Товары.ВидПродукцииИдентификатор;
		
		ДокументXDTO.cargoType.Добавить(cargoType);
		
	КонецЦикла;
	
	ДокументXDTO.shipmentRoute = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "shipmentRoute");
	
	Пока Маршруты.Следующий() Цикл
		
		routePoint = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO.shipmentRoute, "routePoint");
		routePoint.sqnId = Маршруты.НомерСтроки;
		
		Если ЗначениеЗаполнено(Маршруты.Предприятие) Тогда
			routePoint.enterprise = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(routePoint, "enterprise");
			routePoint.enterprise.guid = Маршруты.ПредприятиеИдентификатор;
		Иначе
			routePoint.location = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(routePoint, "location");
			ДанныеАдреса = ?(Маршруты.ДанныеАдреса = Неопределено, Неопределено, Маршруты.ДанныеАдреса.Получить());
			Если ДанныеАдреса = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'В строке №%1 табличной части ""Маршрут возврата"" не заполнены данные адреса. Перевыберите адрес из классификатора'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Маршруты.НомерСтроки);
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстОшибки);
				СообщенияXML.Добавить(СообщениеXML);
				Возврат СообщенияXML;
			Иначе
				ИнтеграцияВЕТИС.УстановитьАдрес(routePoint.location, ДанныеАдреса);
			КонецЕсли;
		КонецЕсли;
		
		ДокументXDTO.shipmentRoute.routePoint.Добавить(routePoint);
		
	КонецЦикла;
	
	ТекстСообщенияXML = ЗаявкиВЕТИС.ЗаявкаXML(ДокументXDTO, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = ТипСообщения;
	
	Если УполномоченноеГашение Тогда
		СообщениеXML.ХозяйствующийСубъект = Шапка.ГрузоотправительХозяйствующийСубъект;
	Иначе
		СообщениеXML.ХозяйствующийСубъект = Шапка.ГрузополучательХозяйствующийСубъект;
	КонецЕсли;
	
	СообщениеXML.Предприятие       = Шапка.ГрузополучательПредприятие;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Неопределено;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Возвращает структуру параметров для расчета статуса документа по данным самого документа.
//
// Параметры:
// 	Документ - ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС - Ссылка на документ.
// 	         - ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС - ДокументОбъект.
//
// Возвращаемое значение:
// 	Структура - Структура со свойствами:
// 	 * НомерТранспортногоСредстваНеУказан       - Булево.
// 	 * НомерТранспортногоСредстваВСДНеУказан    - Булево.
// 	 * ПроверятьНаРегионализацию                - Булево.
// 	 * ЕстьОтклонения                           - Булево.
// 	 * НезначительныеОтклонения                 - Булево.
// 	 * ЕстьНеПроверенныеСтроки                  - Булево.
// 	 * ПеремещениеЗапрещено                     - Булево.
// 	 * ПеремещениеРазрешеноПриВыполненииУсловий - Булево.
// 	 * ПеремещениеРазрешено                     - Булево.
// 	 * УсловияВыполнены                         - Булево.
// 	 * НезначительныеОтклонения                 - Булево.
// 	 * ЕстьНеПроверенныеСтроки                  - Булево.
// 	 * ЕстьНеПроверенныеСтроки                  - Булево.
// 	 * ЕстьНеПроверенныеСтроки                  - Булево.
// 	 * ЕстьНеПроверенныеСтроки                  - Булево.
// 	 * ЕстьНеПроверенныеСтроки                  - Булево.
// 	 * ЕстьНеПроверенныеСтроки                  - Булево.
// 	 * ЕстьНеПроверенныеСтроки                  - Булево.
// 	 * ЕстьНеПроверенныеСтроки                  - Булево.
// 	 * ЕстьНеПроверенныеСтроки                  - Булево.
//
Функция ПараметрыДляРасчетаСтатусаПоДаннымДокумента(Документ) Экспорт
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("НомерТранспортногоСредстваНеУказан",       Ложь);
	ДанныеДокумента.Вставить("НомерТранспортногоСредстваВСДНеУказан",    Ложь);
	ДанныеДокумента.Вставить("ПроверятьНаРегионализацию",                Ложь);
	ДанныеДокумента.Вставить("ЕстьОтклонения",                           Ложь);
	ДанныеДокумента.Вставить("НезначительныеОтклонения",                 Ложь);
	ДанныеДокумента.Вставить("ЕстьНеПроверенныеСтроки",                  Ложь);
	ДанныеДокумента.Вставить("ПеремещениеЗапрещено",                     Ложь);
	ДанныеДокумента.Вставить("ПеремещениеРазрешеноПриВыполненииУсловий", Ложь);
	ДанныеДокумента.Вставить("ПеремещениеРазрешено",                     Ложь);
	ДанныеДокумента.Вставить("УсловияВыполнены",                         Истина);
	ДанныеДокумента.Вставить("НезначительныеОтклонения",                 Ложь);
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка", Документ);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВложенныйЗапрос.НомерТранспортногоСредстваНеУказан) КАК НомерТранспортногоСредстваНеУказан,
		|	МАКСИМУМ(ВложенныйЗапрос.НомерТранспортногоСредстваВСДНеУказан) КАК НомерТранспортногоСредстваВСДНеУказан,
		|	МАКСИМУМ(ВложенныйЗапрос.ЕстьВозврат) КАК ЕстьВозврат,
		|	МАКСИМУМ(ВложенныйЗапрос.ЕстьНеПроверенныеСтроки) КАК ЕстьНеПроверенныеСтроки,
		|	МАКСИМУМ(ВложенныйЗапрос.ПеремещениеРазрешено) КАК ПеремещениеРазрешено,
		|	МАКСИМУМ(ВложенныйЗапрос.ПеремещениеРазрешеноПриВыполненииУсловий) КАК ПеремещениеРазрешеноСУсловиями,
		|	МАКСИМУМ(ВложенныйЗапрос.ПеремещениеЗапрещено) КАК ПеремещениеЗапрещено,
		|	МИНИМУМ(ВложенныйЗапрос.УсловияВыполнены) КАК УсловияВыполнены
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЛОЖЬ КАК НомерТранспортногоСредстваНеУказан,
		|		ЛОЖЬ КАК НомерТранспортногоСредстваВСДНеУказан,
		|		ЛОЖЬ КАК ЕстьВозврат,
		|		ЛОЖЬ КАК ЕстьНеПроверенныеСтроки,
		|		ЛОЖЬ КАК ПеремещениеРазрешено,
		|		ЛОЖЬ КАК ПеремещениеРазрешеноПриВыполненииУсловий,
		|		ЛОЖЬ КАК ПеремещениеЗапрещено,
		|		ИСТИНА КАК УсловияВыполнены
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ЛОЖЬ КАК НомерТранспортногоСредстваНеУказан,
		|		ЛОЖЬ КАК НомерТранспортногоСредстваВСДНеУказан,
		|		ВЫБОР
		|			КОГДА Товары.ВозвращаемоеКоличествоВЕТИС <> 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ЕстьВозврат,
		|		ВЫБОР
		|			КОГДА Товары.ВозвращаемоеКоличествоВЕТИС <> 0
		|					И Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ЕстьНеПроверенныеСтроки,
		|		ВЫБОР
		|			КОГДА Товары.ВозвращаемоеКоличествоВЕТИС <> 0
		|					И Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеЗапрещено)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПеремещениеЗапрещено,
		|		ВЫБОР
		|			КОГДА Товары.ВозвращаемоеКоличествоВЕТИС <> 0
		|					И Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПеремещениеРазрешеноПриВыполненииУсловий,
		|		ВЫБОР
		|			КОГДА Товары.ВозвращаемоеКоличествоВЕТИС <> 0
		|					И Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешено)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПеремещениеРазрешено,
		|		ВЫБОР
		|			КОГДА Товары.ВозвращаемоеКоличествоВЕТИС <> 0
		|					И Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий)
		|					И Товары.УсловияРегионализацииВыполнены
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК УсловияВыполнены
		|	ИЗ
		|		Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК Товары
		|	ГДЕ
		|		Товары.Ссылка = &ДокументСсылка
		|		И Товары.ВозвращаемоеКоличествоВЕТИС <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ВЫБОР
		|			КОГДА МаршрутВозврата.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА МаршрутВозврата.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеЗапрещено)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА МаршрутВозврата.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА МаршрутВозврата.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешено)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА МаршрутВозврата.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий)
		|					И МаршрутВозврата.УсловияРегионализацииВыполнены
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	ИЗ
		|		Документ.ВходящаяТранспортнаяОперацияВЕТИС.МаршрутВозврата КАК МаршрутВозврата
		|	ГДЕ
		|		МаршрутВозврата.Ссылка = &ДокументСсылка
		|		И МаршрутВозврата.Ссылка.ГрузоотправительПредприятие <> МаршрутВозврата.Ссылка.ГрузополучательПредприятие
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА Маршрут.Ссылка.ГрузоотправительПредприятие = Маршрут.Ссылка.ГрузополучательПредприятие
		|					И Маршрут.Ссылка.ГрузоотправительПредприятие <> ЗНАЧЕНИЕ(Справочник.ПредприятияВЕТИС.ПустаяСсылка)
		|				ТОГДА ЛОЖЬ
		|		ИНАЧЕ
		|			ВЫБОР
		|				КОГДА Маршрут.СПерегрузкой
		|						И Маршрут.НомерТранспортногоСредства = """"
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|		КОНЕЦ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ИСТИНА
		|	ИЗ
		|		Документ.ВходящаяТранспортнаяОперацияВЕТИС.Маршрут КАК Маршрут
		|	ГДЕ
		|		Маршрут.Ссылка = &ДокументСсылка
		|		И Маршрут.Ссылка.ГрузоотправительПредприятие <> Маршрут.Ссылка.ГрузополучательПредприятие
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЛОЖЬ,
		|		ВЫБОР
		|			КОГДА Товары.Ссылка.ГрузоотправительПредприятие = Товары.Ссылка.ГрузополучательПредприятие
		|					И Товары.Ссылка.ГрузоотправительПредприятие <> ЗНАЧЕНИЕ(Справочник.ПредприятияВЕТИС.ПустаяСсылка)
		|				ТОГДА ЛОЖЬ
		|		ИНАЧЕ
		|			ВЫБОР
		|				КОГДА Маршрут.СПерегрузкой
		|						И Маршрут.НомерТранспортногоСредства = """"
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|		КОНЕЦ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ИСТИНА
		|	ИЗ
		|		Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Справочник.ВетеринарноСопроводительныйДокументВЕТИС.Маршрут КАК Маршрут
		|			ПО Товары.ВетеринарноСопроводительныйДокумент = Маршрут.Ссылка
		|	ГДЕ
		|		Товары.Ссылка = &ДокументСсылка
		|		И Маршрут.Ссылка.Идентификатор <> """"
		|		И Товары.Ссылка.ГрузоотправительПредприятие <> Товары.Ссылка.ГрузополучательПредприятие) КАК ВложенныйЗапрос";
		
		ЕстьВозврат = Ложь;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ДанныеДокумента, Выборка);
			ЕстьВозврат = Выборка.ЕстьВозврат;
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МаршрутВозврата.Предприятие КАК Предприятие,
		|	МаршрутВозврата.ДанныеАдреса КАК ДанныеАдреса
		|ИЗ
		|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.МаршрутВозврата КАК МаршрутВозврата
		|ГДЕ
		|	МаршрутВозврата.Ссылка = &ДокументСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Шапка.ГрузоотправительПредприятие,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК Шапка
		|ГДЕ
		|	Шапка.Ссылка = &ДокументСсылка";
		
		ЕстьПеремещениеМеждуРегионами = Ложь;
		МассивМаршрутаВозврата = Новый Массив;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеАдреса = Новый Структура;
			ДанныеАдреса.Вставить("Предприятие",  Выборка.Предприятие);
			ДанныеАдреса.Вставить("ДанныеАдреса", ?(Выборка.ДанныеАдреса = Неопределено, Неопределено, Выборка.ДанныеАдреса.Получить()));
			МассивМаршрутаВозврата.Добавить(ДанныеАдреса);
		КонецЦикла;
		ЕстьПеремещениеМеждуРегионами = РегионализацияВЕТИС.ЕстьПеремещениеМеждуРегионами(МассивМаршрутаВозврата);
		
		ДанныеДокумента.ПроверятьНаРегионализацию = ЕстьПеремещениеМеждуРегионами
			                                      И ЕстьВозврат;
	Иначе
		// Расчет по ДокументОбъект
		Если Документ.ГрузоотправительПредприятие <> Документ.ГрузополучательПредприятие Тогда
			ИменаТабличныхЧастей = Новый Массив;
			ИменаТабличныхЧастей.Добавить("Товары");
			ИменаТабличныхЧастей.Добавить("МаршрутВозврата");
			
			ЕстьВозврат = Ложь;
			Для каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
				Для каждого СтрокаТабличнойЧасти из Документ[ИмяТабличнойЧасти] Цикл
					Если ИмяТабличнойЧасти = "Товары" Тогда
						Если СтрокаТабличнойЧасти.ВозвращаемоеКоличествоВЕТИС <> 0 Тогда
							ЕстьВозврат = Истина;
						Иначе
							// Для строки ТЧ Товары дальнейшая проверка только возвращаемой продукции.
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации) Тогда
						ДанныеДокумента.ЕстьНеПроверенныеСтроки = Истина;
					ИначеЕсли СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеЗапрещено Тогда
						ДанныеДокумента.ПеремещениеЗапрещено = Истина;
					ИначеЕсли СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий Тогда
						ДанныеДокумента.ПеремещениеРазрешеноПриВыполненииУсловий = Истина;
						Если НЕ СтрокаТабличнойЧасти.УсловияРегионализацииВыполнены Тогда
							ДанныеДокумента.УсловияВыполнены = Ложь;
						КонецЕсли;
					ИначеЕсли СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешено Тогда
						ДанныеДокумента.ПеремещениеРазрешено = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			НетПеревозки = Документ.ГрузоотправительПредприятие = Документ.ГрузополучательПредприятие И ЗначениеЗаполнено(Документ.ГрузоотправительПредприятие);
			ЕстьПеремещениеМеждуРегионами = Ложь;
			
			Если НЕ НетПеревозки Тогда
				МассивМаршрутаВозврата = Новый Массив;
				Для каждого СтрокаТабличнойЧасти Из Документ.МаршрутВозврата Цикл
					ДанныеАдреса = Новый Структура;
					ДанныеАдреса.Вставить("Предприятие",  СтрокаТабличнойЧасти.Предприятие);
					ДанныеАдреса.Вставить("ДанныеАдреса", СтрокаТабличнойЧасти.ДанныеАдреса.Получить());
					МассивМаршрутаВозврата.Добавить(ДанныеАдреса);
				КонецЦикла;
				
				ДанныеАдреса = Новый Структура;
				ДанныеАдреса.Вставить("Предприятие",  Документ.ГрузоотправительПредприятие);
				ДанныеАдреса.Вставить("ДанныеАдреса", Неопределено);
				МассивМаршрутаВозврата.Добавить(ДанныеАдреса);
				
				ЕстьПеремещениеМеждуРегионами = РегионализацияВЕТИС.ЕстьПеремещениеМеждуРегионами(МассивМаршрутаВозврата);
			КонецЕсли;
			
			ДанныеДокумента.ПроверятьНаРегионализацию = ЕстьПеремещениеМеждуРегионами
			                                          И ЕстьВозврат;
			
			Если НЕ НетПеревозки Тогда
				Для каждого СтрокаТабличнойЧасти из Документ.Маршрут Цикл
					Если СтрокаТабличнойЧасти.СПерегрузкой
					   И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерТранспортногоСредства) Тогда
						ДанныеДокумента.НомерТранспортногоСредстваНеУказан = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ НетПеревозки Тогда
				МассивВСД = Новый Массив;
				Для каждого СтрокаТабличнойЧасти из Документ.Товары Цикл
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВетеринарноСопроводительныйДокумент)
						И МассивВСД.Найти(СтрокаТабличнойЧасти.ВетеринарноСопроводительныйДокумент) = Неопределено Тогда
						МассивВСД.Добавить(СтрокаТабличнойЧасти.ВетеринарноСопроводительныйДокумент);
					КонецЕсли;
				КонецЦикла;
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("МассивВСД", МассивВСД);
				Запрос.Текст =
				"ВЫБРАТЬ
				|	МАКСИМУМ(ВложенныйЗапрос.НомерТранспортногоСредстваВСДНеУказан) КАК НомерТранспортногоСредстваВСДНеУказан
				|ИЗ
				|	(ВЫБРАТЬ
				|		ВЫБОР
				|			КОГДА МаршрутВСД.СПерегрузкой
				|					И МаршрутВСД.НомерТранспортногоСредства = """"
				|				ТОГДА ИСТИНА
				|			ИНАЧЕ ЛОЖЬ
				|		КОНЕЦ КАК НомерТранспортногоСредстваВСДНеУказан
				|	ИЗ
				|		Справочник.ВетеринарноСопроводительныйДокументВЕТИС.Маршрут КАК МаршрутВСД
				|	ГДЕ
				|		МаршрутВСД.Ссылка В(&МассивВСД)
				|		И МаршрутВСД.Ссылка.Идентификатор <> """"
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ЛОЖЬ) КАК ВложенныйЗапрос";
				ВыборкаРезультата = Запрос.Выполнить().Выбрать();
				Если ВыборкаРезультата.Следующий() Тогда
					ДанныеДокумента.НомерТранспортногоСредстваВСДНеУказан = ВыборкаРезультата.НомерТранспортногоСредстваВСДНеУказан;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеДокумента;
КонецФункции

Функция ПараметрыОбновленияСтатусаРегионализации(ДокументСсылка, Операция, ДополнительныеПараметры)
	
	СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
	
	СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияОшибка;
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения);
	
	Если НЕ ДополнительныеПараметры = Неопределено
	   И НЕ ДополнительныеПараметры.ДокументОбъект = Неопределено Тогда
		
		ДокументОбъект = ДополнительныеПараметры.ДокументОбъект;
		
		ДанныеДокумента = ПараметрыДляРасчетаСтатусаПоДаннымДокумента(ДокументОбъект);
		
	Иначе
		
		ДанныеДокумента = ПараметрыДляРасчетаСтатусаПоДаннымДокумента(ДокументСсылка);
		
	КонецЕсли;
	
	СтатусИДальнейшиеДейстия = СтатусИДальнейшиеДейстияВозможностиПеремещения(ДанныеДокумента);
	СтатусыБазовыйПроцесс.Принят = СтатусИДальнейшиеДейстия.Статус;
	Для каждого ДальнейшееДействие Из СтатусИДальнейшиеДейстия.ДальнейшиеДействия Цикл
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(ДальнейшееДействие);
	КонецЦикла;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
			СтатусИДальнейшиеДейстия.Статус,
			СтатусИДальнейшиеДейстия.ДальнейшиеДействия);
	Иначе
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			СтатусыБазовыйПроцесс);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

Функция СтатусИДальнейшиеДейстияВозможностиПеремещения(ДанныеДокумента) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ПустаяСсылка());
	Результат.Вставить("ДальнейшиеДействия", Новый Массив);
	
	Если НЕ ДанныеДокумента.ПроверятьНаРегионализацию Тогда
		
		Результат.Статус = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Черновик;
		Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		
	Иначе
		
		Если ДанныеДокумента.ЕстьНеПроверенныеСтроки Тогда
			
			Результат.Статус = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Черновик;
			Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения);
			
		ИначеЕсли ДанныеДокумента.ПеремещениеЗапрещено Тогда
			
			Результат.Статус = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеЗапрещено;
			Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ИзменитеПродукциюИлиМаршрут);
			
		ИначеЕсли ДанныеДокумента.ПеремещениеРазрешеноПриВыполненииУсловий Тогда
			
			Результат.Статус = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеРазрешеноСУсловиями;
			
			Если ДанныеДокумента.УсловияВыполнены Тогда
				Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
			Иначе
				Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеУсловияПеремещения);
			КонецЕсли;
			
		ИначеЕсли ДанныеДокумента.ПеремещениеРазрешено Тогда
			
			Результат.Статус = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеРазрешено;
			Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
			
		Иначе
			
			// Нет строк в табличных частях
			Результат.Статус = Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Черновик;
			Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеДокумента.НезначительныеОтклонения Тогда
		Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ЗаполнитеАктНесоответствия);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДействияВместоПередачиДанных(ДальнейшиеДействия, ДанныеДокумента) Экспорт
	
	Если ДальнейшиеДействия.Количество() = 0
		Или ДальнейшиеДействия.Получить(0) = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействийКУдалению = Новый Структура;
	СтруктураДействийКДобавлению = Новый Структура;
	
	Если ДанныеДокумента.НомерТранспортногоСредстваНеУказан Тогда
		СтруктураДействийКУдалению.Вставить("Передача", Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		СтруктураДействийКУдалению.Вставить("Внесение", Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВнеситеНомераТранспортныхСредств);
		СтруктураДействийКДобавлению.Вставить("Указание", Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.УкажитеНомераТранспортныхСредств);
	Иначе
		СтруктураДействийКУдалению.Вставить("Указание", Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.УкажитеНомераТранспортныхСредств);
	КонецЕсли;
	
	Если ДанныеДокумента.НомерТранспортногоСредстваВСДНеУказан Тогда
		СтруктураДействийКУдалению.Вставить("Передача", Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		СтруктураДействийКДобавлению.Вставить("Внесение", Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВнеситеНомераТранспортныхСредств);
	Иначе
		СтруктураДействийКУдалению.Вставить("Внесение", Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВнеситеНомераТранспортныхСредств);
	КонецЕсли;
	
	Если ДанныеДокумента.ЕстьОтклонения Тогда
		СтруктураДействийКУдалению.Вставить("Передача", Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		СтруктураДействийКДобавлению.Вставить("Акт", Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ЗаполнитеАктНесоответствия);
	ИначеЕсли Не ДанныеДокумента.ЕстьОтклонения И Не ДанныеДокумента.НезначительныеОтклонения Или ДанныеДокумента.Свойство("АктНесоответствия") Тогда
		СтруктураДействийКУдалению.Вставить("Акт", Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ЗаполнитеАктНесоответствия);
	КонецЕсли;
	
	Для каждого ДействиеКУдалению Из СтруктураДействийКУдалению Цикл
		ИндексДействия = ДальнейшиеДействия.Найти(ДействиеКУдалению.Значение);
		Если ИндексДействия <> Неопределено Тогда
			ДальнейшиеДействия.Удалить(ИндексДействия);
		КонецЕсли;
	КонецЦикла;
	Для каждого ДействиеКДобавлению Из СтруктураДействийКДобавлению Цикл
		ИндексДействия = ДальнейшиеДействия.Найти(ДействиеКДобавлению.Значение);
		Если ИндексДействия = Неопределено Тогда
			ДальнейшиеДействия.Вставить(0, ДействиеКДобавлению.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Обрабатывает результат выполнения запроса на оформление входящей партии, который содержит:
// 	- сведения об электронном ВСД, в случае, если продукция поступила по бумажному входящему документу;
// 	- признак гашения электронного ВСД;
// 	- сведения о добавленных записях в журнал входящей продукции;
// 	- сведения о возвратных ВСД (формируется в случае, если принимается не весь объем продукции);
// 	- сведения об акте несоответствия (формируется в случае, если фактические сведения о продукции не совпадают с указанными в ВСД).
//
Функция ОбработатьРезультатЗапросаНаОформлениеВходящейПартии(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписей = ИнтеграцияВЕТИС.ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		// Ответ от ВЕТИС может приходить в несколько итераций,
		// поэтому меняем статус документа, если в документе одна строка,
		// заявка отклонена, либо обработаны все строки.
		ИзменитьСтатус = Истина;
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			ДокументОбъект = ДанныеДокумента.Документ.ПолучитьОбъект();
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
			// Сведения о возвратных ВСД (формируется в случае, если принимается не весь объем продукции).
			ЗагрузитьСведенияВСДПоРезультатамЗапросаВЕТИС(
				ДанныеДокумента, 
				ПараметрыОбмена, 
				Предприятие, 
				ХозяйствующийСубъект,
				ДокументОбъект);
			
			// Сведения о добавленных записях в журнал входящей продукции.
			ЗагрузитьЗаписиСкладскогоЖурналаПоРезультатамЗапросаВЕТИС(
				ДанныеДокумента, 
				ПараметрыОбмена, 
				Предприятие, 
				ХозяйствующийСубъект,
				ДокументОбъект);
				
			//автогенерация серий
			СтрокиДляГенерацииСерий = ДокументОбъект.Товары.ВыгрузитьКолонки();
			ИндексыСтрокДляГенерацииСерий = Новый Массив();
			
			Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
					Продолжить;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.Серия) Тогда
					Продолжить;
				КонецЕсли;
				Продолжить;
				СтрокаДляГенерацииСерий = СтрокиДляГенерацииСерий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДляГенерацииСерий, СтрокаТЧ);
				ИндексыСтрокДляГенерацииСерий.Добавить(СтрокиДляГенерацииСерий.Индекс(СтрокаДляГенерацииСерий));
			КонецЦикла;
			
			Если СтрокиДляГенерацииСерий.Количество() > 0 Тогда
				ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерий(
					ДокументОбъект.Метаданные(),
					ДокументОбъект);
				
				ИнтеграцияВЕТИС.СгенерироватьСерии(
					ДокументОбъект,
					СтрокиДляГенерацииСерий, 
					ИндексыСтрокДляГенерацииСерий, 
					ПараметрыУказанияСерий.Товары,
					ДокументОбъект.ТоварыУточнение);
					
				Для Каждого СтрокаДляГенерацииСерий Из СтрокиДляГенерацииСерий Цикл
					СтрокаТЧ = ДокументОбъект.Товары.Найти(СтрокаДляГенерацииСерий.ИдентификаторСтроки, "ИдентификаторСтроки");
					Если СтрокаТЧ <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДляГенерацииСерий);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ДокументОбъект.Записать();
			
			ОбъектИзменен = Истина;
			
			Если ДокументОбъект.Товары.Количество() > 1
				И ДанныеДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаВыполнена Тогда
				
				Для Каждого СтрТовары из ДокументОбъект.Товары Цикл
					Если Не (ЗначениеЗаполнено(СтрТовары.ЗаписьСкладскогоЖурнала)
						Или СтрТовары.КоличествоВЕТИС = СтрТовары.ВозвращаемоеКоличествоВЕТИС) Тогда
						
						ИзменитьСтатус = Ложь;
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИзменитьСтатус Тогда
			ПолноеИмя = ДанныеДокумента.Документ.Метаданные().ПолноеИмя();
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
			
			ПараметрыОбновленияСтатуса = ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Истина;
			ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗаявки;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = ДанныеДокумента.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
			ПараметрыОбновленияСтатуса.ЕстьОшибкиСервиса    = ДополнительныеПараметры.ЕстьОшибкиСервиса;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДанныеДокумента.Документ,
				ДанныеДокумента.ВходящаяОперация,
				ПараметрыОбновленияСтатуса);
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Истина);
	
	ТекстОшибки = ИнтеграцияВЕТИС.ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	
	Если ДополнительныеПараметры.ЕстьОшибкиСервиса Тогда
		
		ВозвращаемоеЗначение = Неопределено;
		
		ДополнительныеПараметры.ЭлементОчереди.ТекстОшибки = ТекстОшибки;
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
		ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
		ВозвращаемоеЗначение.Предприятие          = Предприятие;
		ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
		ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
		
		ВозвращаемоеЗначение.ТекстОшибки           = ТекстОшибки;
		ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
		ВозвращаемоеЗначение.Передано              = Ложь;
		ВозвращаемоеЗначение.Принято               = Истина;
		
		ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
		ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
		
		ВозвращаемоеЗначение.Объект            = ДанныеДокумента.Документ;
		ВозвращаемоеЗначение.ДокументОснование = ДанныеДокумента.ДокументОснование;
		ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
		ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОбработатьРезультатЗапросаНаВнесениеНомеровТранспортныхСредствВПунктахПерегрузки(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписей = ИнтеграцияВЕТИС.ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			ДокументОбъект = ДанныеДокумента.Документ.ПолучитьОбъект();
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
			Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.vetDocument Цикл
				
				ВСД = ИнтеграцияВЕТИС.СсылкаПоИдентификатору(ПараметрыОбмена, "ВетеринарноСопроводительныйДокументВЕТИС", ЭлементДанных.uuid);
				
				ИнтеграцияВЕТИС.ЗагрузитьВетеринарноСопроводительныйДокумент(
					ЭлементДанных,
					ВСД,
					ХозяйствующийСубъект,
					Предприятие,
					ПараметрыОбмена);
				
			КонецЦикла;
			
			ОбъектИзменен = Истина;
			
		КонецЕсли;
		
		ПолноеИмя = ДанныеДокумента.Документ.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		ПараметрыОбновленияСтатуса = ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Истина;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗаявки;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = ДанныеДокумента.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
		ПараметрыОбновленияСтатуса.ЕстьОшибкиСервиса    = ДополнительныеПараметры.ЕстьОшибкиСервиса;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДанныеДокумента.Документ, 
			ДанныеДокумента.ВходящаяОперация,
			ПараметрыОбновленияСтатуса);
		
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ИнтеграцияВЕТИС.ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДанныеДокумента.Документ;
	ВозвращаемоеЗначение.ДокументОснование = ДанныеДокумента.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий.
//
// Возвращаемое значение:
//	Строка - Имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ТипДокумента = ТипДокумента();
	ИменаРеквизитов = ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ТипДокумента);
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - Значения реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  (см. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - параметры указания серий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ТипДокумента = ТипДокумента();
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерий(ТипДокумента, Объект);
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//   ПараметрыУказанияСерий - (см. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - параметры указания серий
//
// Возвращаемое значение:
//   Строка - Текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТипДокумента = ТипДокумента();
	ТекстЗапроса = ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ТипДокумента, ПараметрыУказанияСерий);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияВЕТИСПереопределяемый.ДобавитьКомандуАнализРасхожденийПриПоступленииПродукцииВЕТИС(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаДвиженияСерийТоваров(ТекстыЗапроса, Регистры);
	
	ИнтеграцияВЕТИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаДвиженияСерийТоваров(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если Не ИнтеграцияВЕТИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = ИнтеграцияВЕТИС.ТекстЗапросаДвижениеСерийТоваров(Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата                    КАК Период,
	|	ДанныеШапки.Ссылка                  КАК Ссылка
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК ДанныеШапки
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                  Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",                  Реквизиты.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СообщенияВЕТИС

// Создает сообщения для пакетной отправки ВСД.
//
// Параметры:
//  СообщенияXML          - Массив - список сообщений для дальнейшей обработки.
//  ДанныеДокумента       - Структура - передает параметры о данных документа из вызывающей функции.
//  ВспомогательныеДанные - Структура - передает параметры о вспомогательных данных документа из вызывающей функции.
//
Процедура ОбработатьВСДПакетом(СообщенияXML, ДокументСсылка, ДанныеДокумента, Знач НастройкаОбмена, Знач ВспомогательныеДанные)
	
	Товары = ДанныеДокумента.Товары;
	НомераПакетов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Товары.ВыгрузитьКолонку("НомерПакета"));
	
	ТекущийНомерПакета = 0;
	Для каждого НомерПакета Из НомераПакетов Цикл
		
		Если НомерПакета = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущийНомерПакета <> НомерПакета Тогда
			ТекущийНомерПакета = НомерПакета;
			
			Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросПакетногоГашенияВСД;
			ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(
				Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1);
			
			Шапка = ДанныеДокумента.Шапка[0];
			
			СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
			СообщениеXML.Операция = Операция;
			СообщениеXML.Документ = ДокументСсылка;
			СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
			
			НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("УполномоченноеГашение", Ложь);
			
			ДокументXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
				ПараметрыЗапросаВЕТИС.ПространствоИмен,
				ПараметрыЗапросаВЕТИС.ТипВЕТИС);
				
			#Область ФормированиеСообщения
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				ДокументXDTO, "localTransactionId", Шапка.Идентификатор, СообщениеXML);
			
			// Пользователь, зарегистрированный в системе Меркурий, инициирующий запрос к шлюзу.
			ПользовательВЕТИС = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "initiator");
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				ПользовательВЕТИС, "login",
				НастройкаОбмена.ЛогинПользователя, СообщениеXML);
				
			// Сведения о принимаемом пакете ВСД.
			ОтборПакета = Новый Структура("НомерПакета, ЗаписьСкладскогоЖурнала, ЭтоВозврат", 
				ТекущийНомерПакета,
				Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка(),
				Ложь);
			
			#Область delivery
			
			ОтборПакета = Новый Структура("НомерПакета, ЗаписьСкладскогоЖурнала, ЭтоВозврат", 
				ТекущийНомерПакета,
				Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка(),
				Ложь);
				
			СписокТоваровПакета = ДанныеДокумента.Товары.НайтиСтроки(ОтборПакета);
			
			Если СписокТоваровПакета.Количество() > 0 Тогда
			
				СписокВСД = Новый Массив();
				Для каждого СтрокаСпискаТоваров Из СписокТоваровПакета Цикл
					СписокВСД.Добавить(СтрокаСпискаТоваров.ВСД_Идентификатор);
				КонецЦикла;
				
				СведенияОПоставке = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "delivery");
			
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("Грузоотправитель", "Грузоотправитель");
				ДопПараметры.Вставить("Грузополучатель",  "Грузополучатель");
				ДопПараметры.Вставить("ПолеКоличество",   "КоличествоВЕТИС");
				ДопПараметры.Вставить("Маршрут",                  ДанныеДокумента.Маршрут);
				ДопПараметры.Вставить("ЛабораторныеИсследования", ДанныеДокумента.ВСД_ЛабораторныеИсследования);
				ДопПараметры.Вставить("Иммунизация",              ДанныеДокумента.ВСД_Иммунизация);
				
				ОбменДаннымиВЕТИС.ЗаполнитьОбъект_Delivery(
					ДанныеДокумента.Шапка[0],
					Новый Структура("КоличествоВЕТИС, ВСД_Идентификатор", 0, СписокВСД),
					ВспомогательныеДанные,
					ДопПараметры,
					СведенияОПоставке,
					СообщениеXML);
			
			КонецЕсли;
				
			#КонецОбласти
			
			// Результаты приёмки.
			#Область deliveryFacts
			
			РезультатыПриемки = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "deliveryFacts");
			
			// Природа ВСД (электронный или бумажный).
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				РезультатыПриемки,
				"vetCertificatePresence",
				"ELECTRONIC",
				СообщениеXML);
			
			// Осуществлен ли контроль груза гос.ветврачом на соответствие требованиям.
			// Этих полей нет в документе, но они должны быть в XML, 
			// хотя разработчики ВЕТИС говорят, что они не обязательные.
			ВетИспекция = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(РезультатыПриемки, "vetInspection");
			ДокИспекция = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(РезультатыПриемки, "docInspection");
			// Пользователь, указавший результат соответствия.
			Ответственный = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ВетИспекция, "responsible");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Ответственный, "login", "", СообщениеXML);
			// Результат вет. соответствия.
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ВетИспекция, "result", "CORRESPONDS", СообщениеXML);
			// Результат соответствия документа.
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДокИспекция, "result", "CORRESPONDS", СообщениеXML);
			
			// Принятое решение о приёме входной партии.
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(РезультатыПриемки, "decision", ?(СписокТоваровПакета.Количество(), "ACCEPT_ALL", "RETURN_ALL"));
			
			#КонецОбласти
			
			// Сведения о пакете возвратных ВСД.
			#Область returnedDelivery
			
			ОтборПакета = Новый Структура("НомерПакета, ЗаписьСкладскогоЖурнала, ЭтоВозврат", 
				ТекущийНомерПакета,
				Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка(),
				Истина);
				
			СписокТоваровПакета = ДанныеДокумента.Товары.НайтиСтроки(ОтборПакета);
			
			Если СписокТоваровПакета.Количество() > 0 Тогда
			
				СписокВСДВозврата = Новый Массив();
				Для каждого СтрокаСпискаТоваров Из СписокТоваровПакета Цикл
					СписокВСДВозврата.Добавить(СтрокаСпискаТоваров.ВСД_Идентификатор);
				КонецЦикла;
				
				ВозвратныйВСД = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "returnedDelivery");
				
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("Грузоотправитель", "Грузополучатель");
				ДопПараметры.Вставить("Грузополучатель",  "Грузоотправитель");
				ДопПараметры.Вставить("ПолеКоличество",   "ВозвращаемоеКоличествоВЕТИС");
				ДопПараметры.Вставить("Маршрут",          ДанныеДокумента.МаршрутВозврата);
				ДопПараметры.Вставить("Регионализация",   ДанныеДокумента.Регионализация);
				
				СтруктураШапки = Новый Структура;
				Для каждого КолонкаТаблицы Из ДанныеДокумента.Шапка.Колонки Цикл
					СтруктураШапки.Вставить(КолонкаТаблицы.Имя);
				КонецЦикла;
				
				ЗаполнитьЗначенияСвойств(СтруктураШапки, Шапка);
				СтруктураШапки.ТипТранспорта                 = Шапка.Возврат_ТипТранспорта;
				СтруктураШапки.НомерТранспортногоСредства    = Шапка.Возврат_НомерТранспортногоСредства;
				СтруктураШапки.НомерАвтомобильногоПрицепа    = Шапка.Возврат_НомерАвтомобильногоПрицепа;
				СтруктураШапки.НомерАвтомобильногоКонтейнера = Шапка.Возврат_НомерАвтомобильногоКонтейнера;
				
				ОбменДаннымиВЕТИС.ЗаполнитьОбъект_Delivery(
					СтруктураШапки,
					Новый Структура("ВозвращаемоеКоличествоВЕТИС, ВСД_Идентификатор", 0, СписокВСДВозврата),
					ВспомогательныеДанные,
					ДопПараметры,
					ВозвратныйВСД,
					СообщениеXML);
				
			КонецЕсли;
			#КонецОбласти
			
			#КонецОбласти
			
			ТекстСообщенияXML = ЗаявкиВЕТИС.ЗаявкаXML(ДокументXDTO, НастройкаОбмена, ВспомогательныеДанные.ХранилищеВременныхДат);
			
			ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(
				ВспомогательныеДанные.ХранилищеВременныхДат,
				ТекстСообщенияXML);
			
			СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
			СообщениеXML.ТипСообщения         = ПараметрыЗапросаВЕТИС.ТипСообщения;
			
			Если ПараметрыЗапроса.УполномоченноеГашение Тогда
				СообщениеXML.ХозяйствующийСубъект = Шапка.ГрузоотправительХозяйствующийСубъект;
			Иначе
				СообщениеXML.ХозяйствующийСубъект = Шапка.ГрузополучательХозяйствующийСубъект;
			КонецЕсли;
			
			СообщениеXML.Предприятие          = Шапка.ГрузополучательПредприятие;
			СообщениеXML.Операция             = Операция;
			СообщениеXML.Документ             = ДокументСсылка;
			СообщениеXML.ДокументОснование    = Неопределено;
			СообщениеXML.ФорматОбмена         = ПараметрыЗапросаВЕТИС.ФорматОбмена;
			СообщениеXML.Версия               = НомерВерсии;
			СообщениеXML.ПараметрыЗапроса     = ПараметрыЗапроса;
			
			СообщенияXML.Добавить(СообщениеXML);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработатьВСДПакетом()

// Операция предназначена для оформления в системе Меркурий входящей партии - гашения ВСД.
// Поддерживается гашение как электронных ВСД, так и бумажных, оформленных на бланках строгой отчетности.
// При выполнении операции на вход системы в зависимости от сценария передаются следующие сведения:
// 	- информация о пользователе - инициаторе запроса;
// 	- информация об электронном ВСД, по которому продукция поступила на предприятие;
// 	- информация о бумажном ВСД, по которому продукция поступила на предприятие;
// 	- фактические сведения о принимаемой партии;
// 	- акт несоответствия, в случае если фактические сведения о продукции отличаются от сведений, указанных в ВСД;
// 	- возвратный ВСД, в случае если на весь объем или на его часть оформляется возврат.
//
Функция ЗапросНаОформлениеВходящейПартииXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1);
	
	ДанныеДокумента = ДанныеВходящейПартии(ДокументСсылка);
	Шапка = ДанныеДокумента.Шапка[0];
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	
	Если ДанныеДокумента.Шапка.Количество() = 0 Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНетДанныхДляВыгрузки(СообщенияXML, СообщениеXML);
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("УполномоченноеГашение", Ложь);
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("НастройкаОбмена") Тогда
		НастройкаОбмена = ДополнительныеПараметры.НастройкаОбмена;
	Иначе
		Если Шапка.РазрешеноУполномоченноеГашение Тогда
			НастройкиОбменаВЕТИС = ИнтеграцияВЕТИС.НастройкиОбменаВЕТИС(Шапка.ГрузоотправительХозяйствующийСубъект);
			НастройкаОбмена = НастройкиОбменаВЕТИС.ОбменНаСервере.Получить(Шапка.ГрузоотправительХозяйствующийСубъект);
			Если НастройкаОбмена <> Неопределено Тогда
				ПараметрыЗапроса.УполномоченноеГашение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкаОбмена = Неопределено Тогда
		НастройкиОбменаВЕТИС = ИнтеграцияВЕТИС.НастройкиОбменаВЕТИС(Шапка.ГрузополучательХозяйствующийСубъект);
		НастройкаОбмена = НастройкиОбменаВЕТИС.ОбменНаСервере.Получить(Шапка.ГрузополучательХозяйствующийСубъект);
	КонецЕсли;
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключения(СообщенияXML, СообщениеXML, Шапка.ГрузополучательХозяйствующийСубъект, НастройкиОбменаВЕТИС);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, ДокументСсылка, , , НастройкаОбмена.ПраваДоступа, ПараметрыЗапроса.УполномоченноеГашение) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	ВспомогательныеДанные = Новый Структура;
	ВспомогательныеДанные.Вставить("СтраныМира",               ПрочиеКлассификаторыВЕТИСВызовСервера.СтраныМира());
	ВспомогательныеДанные.Вставить("Производители",            ДанныеДокумента.ВСД_Производители);
	ВспомогательныеДанные.Вставить("ПроизводственныеПартии",   ДанныеДокумента.ВСД_ПроизводственныеПартии);
	ВспомогательныеДанные.Вставить("Маршрут",                  ДанныеДокумента.ВСД_Маршрут);
	ВспомогательныеДанные.Вставить("ИсторияСтатусов",          ДанныеДокумента.ВСД_ИсторияСтатусов);
	ВспомогательныеДанные.Вставить("Упаковки",                 ДанныеДокумента.Упаковки);
	ВспомогательныеДанные.Вставить("ШтрихкодыУпаковок",        ДанныеДокумента.ШтрихкодыУпаковок);
	ВспомогательныеДанные.Вставить("ХранилищеВременныхДат",    Новый Соответствие);
	
	СтруктураШапки = Новый Структура;
	Для каждого КолонкаТаблицы Из ДанныеДокумента.Шапка.Колонки Цикл
		СтруктураШапки.Вставить(КолонкаТаблицы.Имя);
	КонецЦикла;
	
	СтруктураСтроки = Новый Структура;
	Для каждого КолонкаТаблицы Из ДанныеДокумента.Товары.Колонки Цикл
		СтруктураСтроки.Вставить(КолонкаТаблицы.Имя);
	КонецЦикла;
	
	// По возможности обработка пройдет пакетом ВСД
	ОбработатьВСДПакетом(СообщенияXML, ДокументСсылка, ДанныеДокумента, НастройкаОбмена, ВспомогательныеДанные);
		
	Отбор = Новый Структура("НомерПакета", 0);
	ТоварыОбрабатываемыеПоОтдельности = ДанныеДокумента.Товары.НайтиСтроки(Отбор);
	
	Для каждого ДанныеСтроки Из ТоварыОбрабатываемыеПоОтдельности Цикл
		
		// Каждая строка товара отправляется отдельным запросом.
		// При этом могут возникнуть ошибки и обработается только часть строк.
		// Повторно отправлять ранее обработанные строки не надо.
		Если ЗначениеЗаполнено(ДанныеСтроки.ЗаписьСкладскогоЖурнала) Тогда
			Продолжить;
		КонецЕсли;
		
		СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Операция = Операция;
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
		
		ДокументXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПараметрыЗапросаВЕТИС.ПространствоИмен, ПараметрыЗапросаВЕТИС.ТипВЕТИС);
		
		#Область ФормированиеСообщения
		
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "localTransactionId", Шапка.Идентификатор, СообщениеXML);
		
		// Пользователь, зарегистрированный в системе Меркурий, инициирующий запрос к шлюзу.
		ПользовательВЕТИС = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "initiator");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ПользовательВЕТИС, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
		
		// Сведения о принимаемой партии продукции.
		#Область delivery
		
		СведенияОПоставке = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "delivery");
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Грузоотправитель", "Грузоотправитель");
		ДопПараметры.Вставить("Грузополучатель",  "Грузополучатель");
		ДопПараметры.Вставить("ПолеКоличество",   "КоличествоВЕТИС");
		ДопПараметры.Вставить("Маршрут",                  ДанныеДокумента.Маршрут);
		ДопПараметры.Вставить("ЛабораторныеИсследования", ДанныеДокумента.ВСД_ЛабораторныеИсследования);
		ДопПараметры.Вставить("Иммунизация",              ДанныеДокумента.ВСД_Иммунизация);
		
		ОбменДаннымиВЕТИС.ЗаполнитьОбъект_Delivery(
			ДанныеДокумента.Шапка[0],
			ДанныеСтроки,
			ВспомогательныеДанные,
			ДопПараметры,
			СведенияОПоставке,
			СообщениеXML);
			
		#КонецОбласти
		
		// Результаты приёмки.
		#Область deliveryFacts
		
		РезультатыПриемки = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "deliveryFacts");
		
		// Природа ВСД (электронный или бумажный).
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
			РезультатыПриемки,
			"vetCertificatePresence",
			?(ЗначениеЗаполнено(ДанныеДокумента.Товары[0].ВСД_Идентификатор), "ELECTRONIC", "PAPER"),
			СообщениеXML);
		
		// Соответствуют ли сведения о партии, указанной в ВСД, фактическим.
		КонтрольПоставки = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(РезультатыПриемки, "docInspection");
		Ответственный = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(КонтрольПоставки, "responsible"); // Пользователь, указавший результат соответствия.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Ответственный, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
			КонтрольПоставки,
			"result",
			?(ЗначениеЗаполнено(Шапка.НомерАктаНесоответствия), "MISMATCH", "CORRESPONDS"),
			СообщениеXML); // Результат соответствия.
		
		// Осуществлен ли контроль груза гос.ветврачом на соответствие требованиям.
		// Этих полей нет в документе, но они должны быть в XML, 
		// хотя разработчики ВЕТИС говорят, что они не обязательные.
		ВетИспекция = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(РезультатыПриемки, "vetInspection");
		Ответственный = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ВетИспекция, "responsible"); // Пользователь, указавший результат соответствия.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Ответственный, "login", "", СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ВетИспекция, "result", "UNSUPERVISED", СообщениеXML); // Результат соответствия.
		
		// Принятое решение о приёме входной партии.
		Если ДанныеСтроки.ВозвращаемоеКоличествоВЕТИС = 0 Тогда
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(РезультатыПриемки, "decision", "ACCEPT_ALL");
		ИначеЕсли ДанныеСтроки.КоличествоВЕТИС <> 0 Тогда
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(РезультатыПриемки, "decision", "PARTIALLY");
		Иначе
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(РезультатыПриемки, "decision", "RETURN_ALL");
		КонецЕсли;
		
		#КонецОбласти
		
		// Акт о несоответствии.
		#Область discrepancyReport
		
		Если ЗначениеЗаполнено(Шапка.НомерАктаНесоответствия) Тогда
			
			АктНесоответствия = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "discrepancyReport");
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(АктНесоответствия, "issueSeries", Шапка.СерияАктаНесоответствия, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(АктНесоответствия, "issueNumber", Шапка.НомерАктаНесоответствия, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(АктНесоответствия, "issueDate", Шапка.ДатаАктаНесоответствия, СообщениеXML);
			
			ПричинаНесоответствия = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(АктНесоответствия, "reason");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ПричинаНесоответствия, "name", Шапка.ПричинаНесоответствия, СообщениеXML);
			
			ДокументXDTO.discrepancyReport.Добавить(АктНесоответствия);
		
		КонецЕсли; 
		
		#КонецОбласти
		
		// Сведения о возвращаемой партии (возвратном ВСД).
		#Область returnedDelivery
		
		Если ДанныеСтроки.ВозвращаемоеКоличествоВЕТИС <> 0 Тогда
			
			ВозвратныйВСД = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "returnedDelivery");
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Грузоотправитель", "Грузополучатель");
			ДопПараметры.Вставить("Грузополучатель",  "Грузоотправитель");
			ДопПараметры.Вставить("ПолеКоличество",   "ВозвращаемоеКоличествоВЕТИС");
			ДопПараметры.Вставить("Маршрут",          ДанныеДокумента.МаршрутВозврата);
			ДопПараметры.Вставить("Регионализация",   ДанныеДокумента.Регионализация);
			
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, ДанныеСтроки);
			СтруктураСтроки.ВСД_Идентификатор = Неопределено;
			
			ЗаполнитьЗначенияСвойств(СтруктураШапки, Шапка);
			СтруктураШапки.ТипТранспорта                 = Шапка.Возврат_ТипТранспорта;
			СтруктураШапки.НомерТранспортногоСредства    = Шапка.Возврат_НомерТранспортногоСредства;
			СтруктураШапки.НомерАвтомобильногоПрицепа    = Шапка.Возврат_НомерАвтомобильногоПрицепа;
			СтруктураШапки.НомерАвтомобильногоКонтейнера = Шапка.Возврат_НомерАвтомобильногоКонтейнера;
			
			ОбменДаннымиВЕТИС.ЗаполнитьОбъект_Delivery(
				СтруктураШапки,
				СтруктураСтроки,
				ВспомогательныеДанные,
				ДопПараметры,
				ВозвратныйВСД,
				СообщениеXML);
			
		КонецЕсли;
		
		#КонецОбласти
		
		#КонецОбласти
		
		ТекстСообщенияXML = ЗаявкиВЕТИС.ЗаявкаXML(ДокументXDTO, НастройкаОбмена, ВспомогательныеДанные.ХранилищеВременныхДат);
		ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ВспомогательныеДанные.ХранилищеВременныхДат, ТекстСообщенияXML);
		
		СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
		СообщениеXML.ТипСообщения         = ПараметрыЗапросаВЕТИС.ТипСообщения;
		
		Если ПараметрыЗапроса.УполномоченноеГашение Тогда
			СообщениеXML.ХозяйствующийСубъект = Шапка.ГрузоотправительХозяйствующийСубъект;
		Иначе
			СообщениеXML.ХозяйствующийСубъект = Шапка.ГрузополучательХозяйствующийСубъект;
		КонецЕсли;
		
		СообщениеXML.Предприятие          = Шапка.ГрузополучательПредприятие;
		СообщениеXML.Операция             = Операция;
		СообщениеXML.Документ             = ДокументСсылка;
		СообщениеXML.ДокументОснование    = Неопределено;
		СообщениеXML.ФорматОбмена         = ПараметрыЗапросаВЕТИС.ФорматОбмена;
		СообщениеXML.Версия               = НомерВерсии;
		СообщениеXML.ПараметрыЗапроса     = ПараметрыЗапроса;
		
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла; 
	
	Возврат СообщенияXML;

КонецФункции

Функция ДанныеВходящейПартии(ДокументСсылка, РазделитьПоПакетам = Ложь)
	
	СписокЗапросов = Новый СписокЗначений;
	
	#Область Версии
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЕТИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ВЕТИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ВЕТИСПрисоединенныеФайлы
	|ГДЕ
	|	ВЕТИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И (ВЕТИСПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии)
	|			ИЛИ ВЕТИСПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ЗапросПакетногоГашенияВСД))
	|	И ВЕТИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЕТИСПрисоединенныеФайлы.Документ";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Версии");
	#КонецОбласти
	
	#Область Шапка
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Идентификатор КАК Идентификатор,
	|	
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
	|	
	|	ДанныеДокумента.ГрузоотправительХозяйствующийСубъект КАК ГрузоотправительХозяйствующийСубъект,
	|	ДанныеДокумента.ГрузоотправительХозяйствующийСубъект.Идентификатор КАК ГрузоотправительХозяйствующийСубъект_Идентификатор,
	|	ДанныеДокумента.ГрузоотправительХозяйствующийСубъект.ИдентификаторВерсии КАК ГрузоотправительХозяйствующийСубъект_ИдентификаторВерсии,
	|	ДанныеДокумента.ГрузоотправительПредприятие КАК ГрузоотправительПредприятие,
	|	ДанныеДокумента.ГрузоотправительПредприятие.Идентификатор КАК ГрузоотправительПредприятие_Идентификатор,
	|	ДанныеДокумента.ГрузоотправительПредприятие.ИдентификаторВерсии КАК ГрузоотправительПредприятие_ИдентификаторВерсии,
	|	ДанныеДокумента.ГрузоотправительПредприятие.НаселенныйПунктИдентификатор КАК ГрузоотправительПредприятие_НаселенныйПунктИдентификатор,
	|	
	|	ДанныеДокумента.ГрузополучательХозяйствующийСубъект КАК ГрузополучательХозяйствующийСубъект,
	|	ДанныеДокумента.ГрузополучательХозяйствующийСубъект.Идентификатор КАК ГрузополучательХозяйствующийСубъект_Идентификатор,
	|	ДанныеДокумента.ГрузополучательХозяйствующийСубъект.ИдентификаторВерсии КАК ГрузополучательХозяйствующийСубъект_ИдентификаторВерсии,
	|	ДанныеДокумента.ГрузополучательПредприятие КАК ГрузополучательПредприятие,
	|	ДанныеДокумента.ГрузополучательПредприятие.Идентификатор КАК ГрузополучательПредприятие_Идентификатор,
	|	ДанныеДокумента.ГрузополучательПредприятие.ИдентификаторВерсии КАК ГрузополучательПредприятие_ИдентификаторВерсии,
	|	ДанныеДокумента.ГрузополучательПредприятие.НаселенныйПунктИдентификатор КАК ГрузополучательПредприятие_НаселенныйПунктИдентификатор,
	|	
	|	ДанныеДокумента.ПеревозчикХозяйствующийСубъект КАК ПеревозчикХозяйствующийСубъект,
	|	ДанныеДокумента.ПеревозчикХозяйствующийСубъект.Идентификатор КАК ПеревозчикХозяйствующийСубъект_Идентификатор,
	|	ДанныеДокумента.ПеревозчикХозяйствующийСубъект.ИдентификаторВерсии КАК ПеревозчикХозяйствующийСубъект_ИдентификаторВерсии,
	|	
	|	ВЫБОР КОГДА НастройкаУполномоченногоГашения.Грузоотправитель ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК РазрешеноУполномоченноеГашение,
	|	
	|	ДанныеДокумента.ТТНУказан КАК ТТНУказан,
	|	ДанныеДокумента.СерияТТН КАК СерияТТН,
	|	ДанныеДокумента.ДатаТТН КАК ДатаТТН,
	|	ДанныеДокумента.НомерТТН КАК НомерТТН,
	|	ДанныеДокумента.ТипТТН КАК ТипТТН,
	|	
	|	ДанныеДокумента.СерияАктаНесоответствия КАК СерияАктаНесоответствия,
	|	ДанныеДокумента.НомерАктаНесоответствия КАК НомерАктаНесоответствия,
	|	ДанныеДокумента.ДатаАктаНесоответствия КАК ДатаАктаНесоответствия,
	|	ДанныеДокумента.ПричинаНесоответствия КАК ПричинаНесоответствия,
	|	
	|	ДанныеДокумента.СпособХранения КАК СпособХранения,
	|	ДанныеДокумента.ТипТранспорта КАК ТипТранспорта,
	|	ДанныеДокумента.НомерТранспортногоСредства КАК НомерТранспортногоСредства,
	|	ДанныеДокумента.НомерАвтомобильногоПрицепа КАК НомерАвтомобильногоПрицепа,
	|	ДанныеДокумента.НомерАвтомобильногоКонтейнера КАК НомерАвтомобильногоКонтейнера,
	|	
	|	ТаблицаМаршрутВозврата.ТипТранспорта КАК Возврат_ТипТранспорта,
	|	ТаблицаМаршрутВозврата.НомерТранспортногоСредства КАК Возврат_НомерТранспортногоСредства,
	|	ТаблицаМаршрутВозврата.НомерАвтомобильногоПрицепа КАК Возврат_НомерАвтомобильногоПрицепа,
	|	ТаблицаМаршрутВозврата.НомерАвтомобильногоКонтейнера КАК Возврат_НомерАвтомобильногоКонтейнера
	|	
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК ДанныеДокумента
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО ДанныеДокумента.Ссылка = Версии.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУполномоченногоГашенияВЕТИС КАК НастройкаУполномоченногоГашения
	|		ПО НастройкаУполномоченногоГашения.Грузоотправитель = ДанныеДокумента.ГрузоотправительХозяйствующийСубъект
	|		И НастройкаУполномоченногоГашения.Грузополучатель = ДанныеДокумента.ГрузополучательХозяйствующийСубъект
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВходящаяТранспортнаяОперацияВЕТИС.МаршрутВозврата КАК ТаблицаМаршрутВозврата
	|		ПО ТаблицаМаршрутВозврата.Ссылка = ДанныеДокумента.Ссылка
	|			И ТаблицаМаршрутВозврата.НомерСтроки = 1
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Шапка");
	#КонецОбласти
	
	#Область Товары
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	НЕОПРЕДЕЛЕНО КАК ЗаписьСкладскогоЖурнала_Идентификатор,
	|	
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент                              КАК ВСД,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.Идентификатор                КАК ВСД_Идентификатор,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.СерияБланкаСтрогойОтчетности КАК ВСД_СерияБланкаСтрогойОтчетности,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.НомерБланкаСтрогойОтчетности КАК ВСД_НомерБланкаСтрогойОтчетности,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.Дата                         КАК ВСД_Дата,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.Форма                        КАК ВСД_Форма,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.Тип                          КАК ВСД_Тип,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ЭкспертизаВыполнена          КАК ВСД_ЭкспертизаВыполнена,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ЭкспертизаРезультат          КАК ВСД_ЭкспертизаРезультат,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.БлагополучиеМестности                              КАК ВСД_БлагополучиеМестности,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.Цель.Идентификатор                                 КАК ВСД_Цель_Идентификатор,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ПериодНахожденияЖивотныхНаТерриторииТС             КАК ВСД_ПериодНахожденияЖивотныхНаТерриторииТС,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.КоличествоПериодовНахожденияЖивотныхНаТерриторииТС КАК ВСД_КоличествоПериодовНахожденияЖивотныхНаТерриторииТС,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ОсобыеОтметки                                      КАК ВСД_ОсобыеОтметки,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.Продукция                                          КАК ВСД_Продукция,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ПродукцияИдентификаторВерсии                       КАК ВСД_ПродукцияИдентификаторВерсии,
	|	
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ГрузоотправительХозяйствующийСубъект.Идентификатор КАК ВСД_ГрузоотправительХозяйствующийСубъект_Идентификатор,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ГрузоотправительПредприятие.Идентификатор КАК ВСД_ГрузоотправительПредприятие_Идентификатор,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ГрузополучательХозяйствующийСубъект.Идентификатор КАК ВСД_ГрузополучательХозяйствующийСубъект_Идентификатор,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ГрузополучательПредприятие.Идентификатор КАК ВСД_ГрузополучательПредприятие_Идентификатор,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ПеревозчикХозяйствующийСубъект.Идентификатор КАК ВСД_ПеревозчикХозяйствующийСубъект_Идентификатор,
	|	
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.СерияТТН КАК ВСД_СерияТТН,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ДатаТТН  КАК ВСД_ДатаТТН,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.НомерТТН КАК ВСД_НомерТТН,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ТипТТН   КАК ВСД_ТипТТН,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.СпособХранения КАК ВСД_СпособХранения,
	|	
	|	ТаблицаДокумента.Продукция.ТипПродукции               КАК ТипПродукции,
	|	ТаблицаДокумента.Продукция.Продукция.Идентификатор    КАК ПродукцияПродукция_Идентификатор,
	|	ТаблицаДокумента.Продукция.Продукция.Наименование     КАК ПродукцияПродукция_Наименование,
	|	
	|	ТаблицаДокумента.Продукция.ВидПродукции               КАК ВидПродукции,
	|	ТаблицаДокумента.Продукция.ВидПродукции.Идентификатор КАК ВидПродукции_Идентификатор,
	|	ТаблицаДокумента.Продукция.ВидПродукции.Наименование  КАК ВидПродукции_Наименование,
	|	
	|	ТаблицаДокумента.Продукция                            КАК Продукция,
	|	ТаблицаДокумента.Продукция.Идентификатор              КАК Продукция_Идентификатор,
	|	ТаблицаДокумента.Продукция.Наименование               КАК Продукция_Наименование,
	|	
	|	// Для работы с произвольной продукцией
	|	ТаблицаДокумента.Продукция.GTIN                                  КАК Продукция_GTIN,
	|	ТаблицаДокумента.Продукция.Артикул                               КАК Продукция_Артикул,
	|	
	|	ТаблицаДокумента.Продукция.ФасовкаУпаковка                       КАК Продукция_ФасовкаУпаковка,
	|	ТаблицаДокумента.Продукция.ФасовкаУпаковка.Идентификатор         КАК Продукция_ФасовкаУпаковка_Идентификатор,
	|	ТаблицаДокумента.Продукция.ФасовкаУпаковка.Наименование          КАК Продукция_ФасовкаУпаковка_Наименование,
	|	
	|	ТаблицаДокумента.Продукция.ФасовкаЕдиницаИзмерения               КАК Продукция_ФасовкаЕдиницаИзмерения,
	|	ТаблицаДокумента.Продукция.ФасовкаЕдиницаИзмерения.Идентификатор КАК Продукция_ФасовкаЕдиницаИзмерения_Идентификатор,
	|	ТаблицаДокумента.Продукция.ФасовкаЕдиницаИзмерения.Наименование  КАК Продукция_ФасовкаЕдиницаИзмерения_Наименование,
	|	
	|	ТаблицаДокумента.Продукция.ФасовкаКоличествоУпаковок             КАК Продукция_ФасовкаКоличествоУпаковок,
	|	ТаблицаДокумента.Продукция.ФасовкаКоличествоЕдиницВУпаковке      КАК Продукция_ФасовкаКоличествоЕдиницВУпаковке,
	|	
	|	ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС                КАК ЕдиницаИзмеренияВЕТИС,
	|	ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС.Идентификатор  КАК ЕдиницаИзмеренияВЕТИС_Идентификатор,
	|	ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС.Наименование   КАК ЕдиницаИзмеренияВЕТИСНаименование,
	|	
	|	ТаблицаДокумента.Номенклатура       КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика     КАК Характеристика,
	|	ТаблицаДокумента.Серия              КАК Серия,
	|	ТаблицаДокумента.Количество         КАК Количество,
	|	ТаблицаДокумента.КоличествоВЕТИС - ТаблицаДокумента.ВозвращаемоеКоличествоВЕТИС КАК КоличествоВЕТИС,
	|	ТаблицаДокумента.ВозвращаемоеКоличествоВЕТИС КАК ВозвращаемоеКоличествоВЕТИС,
	|	
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ДатаПроизводстваСтрока              КАК ДатаПроизводстваСтрока,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ДатаПроизводстваТочностьЗаполнения  КАК ДатаПроизводстваТочностьЗаполнения,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ДатаПроизводстваНачалоПериода       КАК ДатаПроизводстваНачалоПериода,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.ДатаПроизводстваКонецПериода        КАК ДатаПроизводстваКонецПериода,
	|	
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.СтранаПроизводства                  КАК СтранаПроизводства,
	|	
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.СкоропортящаясяПродукция    КАК СкоропортящаясяПродукция,
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.НизкокачественнаяПродукция  КАК НизкокачественнаяПродукция,
	|	
	|	ТаблицаДокумента.СрокГодностиСтрока              КАК СрокГодностиСтрока,
	|	ТаблицаДокумента.СрокГодностиТочностьЗаполнения  КАК СрокГодностиТочностьЗаполнения,
	|	ТаблицаДокумента.СрокГодностиНачалоПериода       КАК СрокГодностиНачалоПериода,
	|	ТаблицаДокумента.СрокГодностиКонецПериода        КАК СрокГодностиКонецПериода,
	|	
	|	0 КАК НомерПакета,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВозвращаемоеКоличествоВЕТИС = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоВозврат
	|	
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Товары");
	#КонецОбласти
	
	#Область Маршрут
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки                   КАК НомерСтроки,
	|	ТаблицаДокумента.АдресПредставление            КАК АдресПредставление,
	|	ТаблицаДокумента.ДанныеАдреса                  КАК ДанныеАдреса,
	|	ТаблицаДокумента.СПерегрузкой                  КАК СПерегрузкой,
	|	ТаблицаДокумента.Предприятие.Идентификатор     КАК Предприятие_Идентификатор,
	|	ТаблицаДокумента.ТипТранспорта                 КАК ТипТранспорта,
	|	ТаблицаДокумента.НомерТранспортногоСредства    КАК НомерТранспортногоСредства,
	|	ТаблицаДокумента.НомерАвтомобильногоПрицепа    КАК НомерАвтомобильногоПрицепа,
	|	ТаблицаДокумента.НомерАвтомобильногоКонтейнера КАК НомерАвтомобильногоКонтейнера
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Маршрут КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.НомерСтроки <> 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Маршрут");
	
	#КонецОбласти
	
	#Область МаршрутВозврата
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки                    КАК НомерСтроки,
	|	ТаблицаДокумента.АдресПредставление             КАК АдресПредставление,
	|	ТаблицаДокумента.ДанныеАдреса                   КАК ДанныеАдреса,
	|	ТаблицаДокумента.СПерегрузкой                   КАК СПерегрузкой,
	|	ТаблицаДокумента.Предприятие.Идентификатор      КАК Предприятие_Идентификатор,
	|	ТаблицаДокумента.ТипТранспорта                  КАК ТипТранспорта,
	|	ТаблицаДокумента.НомерТранспортногоСредства     КАК НомерТранспортногоСредства,
	|	ТаблицаДокумента.НомерАвтомобильногоПрицепа     КАК НомерАвтомобильногоПрицепа,
	|	ТаблицаДокумента.НомерАвтомобильногоКонтейнера  КАК НомерАвтомобильногоКонтейнера
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.МаршрутВозврата КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.НомерСтроки <> 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "МаршрутВозврата");
	
	#КонецОбласти
	
	#Область Регионализация
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.УсловиеРегионализации.Идентификатор КАК УсловиеРегионализации_Идентификатор
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Регионализация КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.УсловиеВыполняется
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Регионализация");
	
	#КонецОбласти
	
	#Область Упаковки
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ИдентификаторСтрокиТовары КАК ИдентификаторСтрокиТовары,
	|	ТаблицаДокумента.ИдентификаторСтроки       КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.УровеньУпаковки           КАК УровеньУпаковки,
	|	ТаблицаДокумента.КоличествоУпаковокВЕТИС   КАК КоличествоУпаковокВЕТИС,
	|	ТаблицаДокумента.УпаковкаВЕТИС.КодЕЭК      КАК УпаковкаВЕТИС_КодЕЭК
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.УпаковкиВЕТИС КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Упаковки");
	
	#КонецОбласти

	#Область ШтрихкодыУпаковок
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ИдентификаторСтроки КАК ИдентификаторСтрокиУпаковки,
	|	ТаблицаДокумента.Штрихкод            КАК Штрихкод,
	|	ТаблицаДокумента.ТипМаркировки       КАК ТипМаркировки
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.ШтрихкодыУпаковок КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ШтрихкодыУпаковок");
	
	#КонецОбласти
	
	#Область ТаблицаВСД
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаВСД
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ТаблицаВСД");
	#КонецОбласти
	
	#Область ВСД_Производители
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПроизводители.Ссылка                      КАК ВСД,
	|	ТаблицаПроизводители.Производитель               КАК Производитель,
	|	ТаблицаПроизводители.Производитель.Идентификатор КАК Производитель_Идентификатор,
	|	ТаблицаПроизводители.Производитель.Наименование  КАК ПроизводительНаименование,
	|	ТаблицаПроизводители.РольПредприятия             КАК РольПредприятия
	|ИЗ
	|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС.Производители КАК ТаблицаПроизводители
	|ГДЕ
	|	ТаблицаПроизводители.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаВСД.Ссылка
	|			ИЗ
	|				ТаблицаВСД КАК ТаблицаВСД)";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ВСД_Производители");
	#КонецОбласти
	
	#Область ВСД_ПроизводственныеПартии
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПроизводственныеПартии.Ссылка              КАК ВСД,
	|	ТаблицаПроизводственныеПартии.ИдентификаторПартии КАК ИдентификаторПартии
	|ИЗ
	|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ПроизводственныеПартии КАК ТаблицаПроизводственныеПартии
	|ГДЕ
	|	ТаблицаПроизводственныеПартии.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаВСД.Ссылка
	|			ИЗ
	|				ТаблицаВСД КАК ТаблицаВСД)";
	СписокЗапросов.Добавить(ТекстЗапроса, "ВСД_ПроизводственныеПартии");
	#КонецОбласти
	
	#Область ВСД_Маршрут
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                        КАК ВСД,
	|	ТаблицаДокумента.НомерСтроки                   КАК НомерСтроки,
	|	ТаблицаДокумента.АдресПредставление            КАК АдресПредставление,
	|	ТаблицаДокумента.ДанныеАдреса                  КАК ДанныеАдреса,
	|	ТаблицаДокумента.СПерегрузкой                  КАК СПерегрузкой,
	|	ТаблицаДокумента.Предприятие                   КАК Предприятие,
	|	ТаблицаДокумента.Предприятие.Идентификатор     КАК Предприятие_Идентификатор,
	|	ТаблицаДокумента.ТипТранспорта                 КАК ТипТранспорта,
	|	ТаблицаДокумента.НомерТранспортногоСредства    КАК НомерТранспортногоСредства,
	|	ТаблицаДокумента.НомерАвтомобильногоПрицепа    КАК НомерАвтомобильногоПрицепа,
	|	ТаблицаДокумента.НомерАвтомобильногоКонтейнера КАК НомерАвтомобильногоКонтейнера
	|ИЗ
	|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС.Маршрут КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаВСД.Ссылка
	|			ИЗ
	|				ТаблицаВСД КАК ТаблицаВСД)
	|	И ТаблицаДокумента.НомерСтроки <> 1
	|";
	СписокЗапросов.Добавить(ТекстЗапроса, "ВСД_Маршрут");
	#КонецОбласти
	
	#Область ВСД_ЛабораторныеИсследования
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                  КАК ВСД,
	|	ТаблицаДокумента.НомерАктаОтбораПроб     КАК НомерАктаОтбораПроб,
	|	ТаблицаДокумента.ДатаОтбораПроб          КАК ДатаОтбораПроб,
	|	ТаблицаДокумента.НаименованиеЛаборатории КАК НаименованиеЛаборатории,
	|	ТаблицаДокумента.НаименованиеПоказателя  КАК НаименованиеПоказателя,
	|	ТаблицаДокумента.ДатаПолученияРезультата КАК ДатаПолученияРезультата,
	|	ТаблицаДокумента.МетодИсследования       КАК МетодИсследования,
	|	ТаблицаДокумента.НомерЭкспертизы         КАК НомерЭкспертизы,
	|	ТаблицаДокумента.Заключение              КАК Заключение,
	|	ТаблицаДокумента.РезультатИсследования   КАК РезультатИсследования
	|ИЗ
	|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ЛабораторныеИсследования КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаВСД.Ссылка
	|			ИЗ
	|				ТаблицаВСД КАК ТаблицаВСД)";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ВСД_ЛабораторныеИсследования");
	
	#КонецОбласти
	
	#Область ВСД_Иммунизация
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                 КАК ВСД,
	|	ТаблицаДокумента.ТипИммунизации                         КАК ТипИммунизации,
	|	ТаблицаДокумента.НаименованиеБолезниПаразита            КАК НаименованиеБолезниПаразита,
	|	ТаблицаДокумента.ДатаПроведенияИммунизацииОбработки     КАК ДатаПроведенияИммунизацииОбработки,
	|	ТаблицаДокумента.НазваниеИПроизводительВакциныПрепарата КАК НазваниеИПроизводительВакциныПрепарата,
	|	ТаблицаДокумента.НомерСерииВакциныПрепарата             КАК НомерСерииВакциныПрепарата,
	|	ТаблицаДокумента.ДатаОкончанияДействияВакциныПрепарата  КАК ДатаОкончанияДействияВакциныПрепарата
	|ИЗ
	|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС.Иммунизация КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаВСД.Ссылка
	|			ИЗ
	|				ТаблицаВСД КАК ТаблицаВСД)";
	СписокЗапросов.Добавить(ТекстЗапроса, "ВСД_Иммунизация");
	#КонецОбласти
	
	#Область ВСД_ИсторияСтатусов
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка        КАК ВСД,
	|	ТаблицаДокумента.ДатаИзменения КАК ДатаИзменения,
	|	ТаблицаДокумента.Статус        КАК Статус,
	|	ТаблицаДокумента.ФИО           КАК ФИО,
	|	ТаблицаДокумента.Должность     КАК Должность
	|ИЗ
	|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ИсторияСтатусов КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаВСД.Ссылка
	|			ИЗ
	|				ТаблицаВСД КАК ТаблицаВСД)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВСД,
	|	ДатаИзменения";
	СписокЗапросов.Добавить(ТекстЗапроса, "ВСД_ИсторияСтатусов");
	#КонецОбласти
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Истина);
	
	Результат.Упаковки.Индексы.Добавить("ИдентификаторСтрокиТовары");
	Результат.ШтрихкодыУпаковок.Индексы.Добавить("ИдентификаторСтрокиУпаковки");
	Результат.ВСД_Производители.Индексы.Добавить("ВСД");
	Результат.ВСД_ПроизводственныеПартии.Индексы.Добавить("ВСД");
	Результат.ВСД_Маршрут.Индексы.Добавить("ВСД");
	Результат.ВСД_ЛабораторныеИсследования.Индексы.Добавить("ВСД");
	Результат.ВСД_Иммунизация.Индексы.Добавить("ВСД");
	
	// Отключена до начала поддержки Меркурием
	Если РазделитьПоПакетам Тогда
		РазделитьПоПакетам(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Разделение продукции на пакеты обработки, пустой номер пакета - обработка методом processIncomingConsignment,
// остальные, подходящие под отборы ниже - ProcessIncomingDelivery, отрицательные значения являются возвратом.
// Группировка по следующим полям:
// отправитель (1), получатель (2), перевозчик (3), режим хранения при перевозке (4), сведения о ТТН (5).
// Отборы:
// * Тип ВСД только электронный (6);
// * Номера ТС в маршруте обязательны (7);
// * все точки маршрута должны совпадать (8);
// * тип накладной только ТТН (9);
// * возвраты СДХ исключаются (10);
// Параметры:
//  ДанныеРазделения  - Структура - подготовленные данные для определения пакетов
Процедура РазделитьПоПакетам(ДанныеРазделения)
	
	Если ДанныеРазделения.Шапка.Количество() > 0
		И ЗначениеЗаполнено(ДанныеРазделения.Шапка[0].НомерТранспортногоСредства)
		И ЗначениеЗаполнено(ДанныеРазделения.Шапка[0].ТТНУказан)
		И ДанныеРазделения.Шапка[0].ТипТТН = ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.ТТН") Тогда
		
		СчетчикПакетов = 0;
		Для каждого СтрокаТоваров Из ДанныеРазделения.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТоваров.ВСД_Идентификатор)                                           // (6)
				И СтрокаТоваров.НомерПакета = 0                                                               // повторно не проверяем
				И ЗначениеЗаполнено(СтрокаТоваров.ВСД_НомерТТН)                                               // (5)
				И ЗначениеЗаполнено(СтрокаТоваров.ВСД_ДатаТТН)                                                // (5)
				И СтрокаТоваров.ВСД_ТипТТН = ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.ТТН") // (9)
				И (СтрокаТоваров.ВозвращаемоеКоличествоВЕТИС = 0
					Или СтрокаТоваров.ВозвращаемоеКоличествоВЕТИС = СтрокаТоваров.Количество) Тогда
				
				СчетчикПакетов = СчетчикПакетов + 1;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ВСД_ГрузоотправительХозяйствующийСубъект_Идентификатор");// (1)
				Отбор.Вставить("ВСД_ГрузоотправительПредприятие_Идентификатор");         // (2)
				Отбор.Вставить("ВСД_ГрузополучательХозяйствующийСубъект_Идентификатор"); // (1)
				Отбор.Вставить("ВСД_ГрузополучательПредприятие_Идентификатор");          // (2)
				Отбор.Вставить("ВСД_ПеревозчикХозяйствующийСубъект_Идентификатор");      // (3)
				Отбор.Вставить("ВСД_СерияТТН");                                          // (5)
				Отбор.Вставить("ВСД_ДатаТТН");                                           // (5)
				Отбор.Вставить("ВСД_НомерТТН");                                          // (5)
				Отбор.Вставить("ВСД_ТипТТН");                                            // (9)
				Отбор.Вставить("ВСД_СпособХранения");                                    // (4)
				Отбор.Вставить("ЭтоВозврат");
				
				ЗаполнитьЗначенияСвойств(Отбор,СтрокаТоваров);
				
				Отбор.Вставить("НомерПакета",0); // только нераспределенные
					
				СтрокиПакета = ДанныеРазделения.Товары.НайтиСтроки(Отбор);
					
				Для каждого СтрокаПакета Из СтрокиПакета Цикл
					
					Если Не ЗначениеЗаполнено(СтрокаПакета.ВСД_Идентификатор) Тогда                              // (6)
						Продолжить;
					КонецЕсли;
					
					Если СтрокаПакета.ЭтоВозврат
						И СтрокаПакета.ВСД_ГрузоотправительХозяйствующийСубъект_Идентификатор
							= СтрокаПакета.ВСД_ГрузополучательХозяйствующийСубъект_Идентификатор
						И Не ЗначениеЗаполнено(СтрокаПакета.ВСД_ГрузоотправительПредприятие_Идентификатор) Тогда // (10)
						
						Продолжить;
					
					КонецЕсли; 
					
					Маршрут = СтрокаТоваров.ВСД.Маршрут.Выгрузить();
					
					Если Не ВсеНомераТСМаршрутаЗаполнены(Маршрут) Тогда                                          // (7)
						Продолжить;
					КонецЕсли;
					
					Если Не ОдинаковыеМаршруты(Маршрут, СтрокаПакета.ВСД.Маршрут.Выгрузить()) Тогда              // (8)
						Продолжить;
					КонецЕсли;
					
					СтрокаПакета.НомерПакета = СчетчикПакетов;
				КонецЦикла;

			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// В одном пакете не может быть более 100 ВСД
	НомераПакетов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеРазделения.Товары.ВыгрузитьКолонку("НомерПакета"));
	ОграничениеПоКоличествуПакетов = 100;
	
	Для каждого ТекущийНомерПакета Из НомераПакетов Цикл
		
		Если ТекущийНомерПакета = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("НомерПакета", ТекущийНомерПакета);
		СоставПакета = ДанныеРазделения.Товары.НайтиСтроки(Отбор);
		
		Если СоставПакета.Количество() >= ОграничениеПоКоличествуПакетов Тогда
			
			Для Счетчик = 0 По СоставПакета.Количество() - 1 Цикл
				
				Если Счетчик % ОграничениеПоКоличествуПакетов = 0 Тогда
					СчетчикПакетов = СчетчикПакетов + 1;
				КонецЕсли;
				
				СоставПакета[Счетчик].НомерПакета = СчетчикПакетов;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // РазделитьПоПакетам()

Функция ВсеНомераТСМаршрутаЗаполнены(Маршрут)
	
	Для каждого Строка Из Маршрут Цикл
		Если Не ЗначениеЗаполнено(Строка.НомерТранспортногоСредства) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ВсеНомераТСМаршрутаЗаполнены()

Функция ОдинаковыеМаршруты(Маршрут1, Маршрут2)
	
	Если Маршрут1.Количество() <> Маршрут2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Маршрут1.Сортировать("НомерСтроки");
	Маршрут2.Сортировать("НомерСтроки");
	
	Колонки = СтрРазделить("Предприятие,СПерегрузкой,ТипТранспорта,НомерТранспортногоСредства", ",");
	Для Счетчик = 0 По Маршрут1.Количество()-1 Цикл
		Для каждого ИмяКолонки Из Колонки Цикл
			Если Маршрут1[Счетчик][ИмяКолонки] <> Маршрут2[Счетчик][ИмяКолонки] Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ХешМаршрута()

Функция ДанныеНаВнесениеНомеровТранспортныхСредств(ДокументСсылка)

	СписокЗапросов = Новый СписокЗначений;
	
	#Область Версии
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЕТИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ВЕТИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ВЕТИСПрисоединенныеФайлы
	|ГДЕ
	|	ВЕТИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ВЕТИСПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ЗапросНаИзменениеНомеровТранспортныхСредств)
	|	И ВЕТИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЕТИСПрисоединенныеФайлы.Документ";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Версии");
	#КонецОбласти
	
	#Область Шапка
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Идентификатор КАК Идентификатор,
	
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
	
	|	ДанныеДокумента.ГрузоотправительХозяйствующийСубъект КАК ГрузоотправительХозяйствующийСубъект,
	|	ДанныеДокумента.ГрузоотправительХозяйствующийСубъект.Идентификатор КАК ГрузоотправительХозяйствующийСубъект_Идентификатор,
	|	ДанныеДокумента.ГрузоотправительХозяйствующийСубъект.ИдентификаторВерсии КАК ГрузоотправительХозяйствующийСубъект_ИдентификаторВерсии,
	|	ДанныеДокумента.ГрузоотправительПредприятие КАК ГрузоотправительПредприятие,
	|	ДанныеДокумента.ГрузоотправительПредприятие.Идентификатор КАК ГрузоотправительПредприятие_Идентификатор,
	|	ДанныеДокумента.ГрузоотправительПредприятие.ИдентификаторВерсии КАК ГрузоотправительПредприятие_ИдентификаторВерсии,
	|	ДанныеДокумента.ГрузоотправительПредприятие.НаселенныйПунктИдентификатор КАК ГрузоотправительПредприятие_НаселенныйПунктИдентификатор,
	
	|	ДанныеДокумента.ГрузополучательХозяйствующийСубъект КАК ГрузополучательХозяйствующийСубъект,
	|	ДанныеДокумента.ГрузополучательХозяйствующийСубъект.Идентификатор КАК ГрузополучательХозяйствующийСубъект_Идентификатор,
	|	ДанныеДокумента.ГрузополучательХозяйствующийСубъект.ИдентификаторВерсии КАК ГрузополучательХозяйствующийСубъект_ИдентификаторВерсии,
	|	ДанныеДокумента.ГрузополучательПредприятие КАК ГрузополучательПредприятие,
	|	ДанныеДокумента.ГрузополучательПредприятие.Идентификатор КАК ГрузополучательПредприятие_Идентификатор,
	|	ДанныеДокумента.ГрузополучательПредприятие.ИдентификаторВерсии КАК ГрузополучательПредприятие_ИдентификаторВерсии,
	|	ДанныеДокумента.ГрузополучательПредприятие.НаселенныйПунктИдентификатор КАК ГрузополучательПредприятие_НаселенныйПунктИдентификатор
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО ДанныеДокумента.Ссылка = Версии.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Шапка");
	#КонецОбласти
	
	#Область ВСД
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент.Идентификатор КАК ВСД_Идентификатор
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ВСД");
	#КонецОбласти
	
	#Область Маршрут
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки                    КАК НомерСтроки,
	|	ТаблицаДокумента.АдресПредставление             КАК АдресПредставление,
	|	ТаблицаДокумента.ДанныеАдреса                   КАК ДанныеАдреса,
	|	ТаблицаДокумента.СПерегрузкой                   КАК СПерегрузкой,
	|	ТаблицаДокумента.Предприятие.Идентификатор      КАК Предприятие_Идентификатор,
	|	ТаблицаДокумента.ТипТранспорта                  КАК ТипТранспорта,
	|	ТаблицаДокумента.НомерТранспортногоСредства     КАК НомерТранспортногоСредства,
	|	ТаблицаДокумента.НомерАвтомобильногоПрицепа     КАК НомерАвтомобильногоПрицепа,
	|	ТаблицаДокумента.НомерАвтомобильногоКонтейнера  КАК НомерАвтомобильногоКонтейнера
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Маршрут КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.НомерСтроки <> 1
	|	И ТаблицаДокумента.СПерегрузкой
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Маршрут");
	#КонецОбласти
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Истина);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьЗаписиСкладскогоЖурналаПоРезультатамЗапросаВЕТИС(ДанныеДокумента, ПараметрыОбмена, Предприятие, ХозяйствующийСубъект, ДокументОбъект)
	
	ДанныеЗаписейСкладскогоЖурнала = Новый Массив;
	
	Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.stockEntry Цикл
		
		ЗаписьСкладскогоЖурнала = ИнтеграцияВЕТИС.СсылкаПоИдентификатору(ПараметрыОбмена, "ЗаписиСкладскогоЖурналаВЕТИС", ЭлементДанных.guid);
		
		ДанныеЗаписиСкладскогоЖурнала = ИнтеграцияВЕТИС.ЗагрузитьЗаписьСкладскогоЖурнала(
			ЭлементДанных,
			ЗаписьСкладскогоЖурнала,
			ХозяйствующийСубъект,
			Предприятие,
			ПараметрыОбмена);
		
		Если ДанныеЗаписиСкладскогоЖурнала <> Неопределено Тогда
			ДанныеЗаписейСкладскогоЖурнала.Добавить(ДанныеЗаписиСкладскогоЖурнала);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбменДаннымиВЕТИС.ЗагрузитьЗаписиСкладскогоЖурналаПоРезультатамЗапросаВЕТИС(
		ДанныеЗаписейСкладскогоЖурнала,
		ДокументОбъект.Товары,
		ДанныеДокумента.Документ);
	
КонецПроцедуры

Процедура ЗагрузитьСведенияВСДПоРезультатамЗапросаВЕТИС(ДанныеДокумента, ПараметрыОбмена, Предприятие, ХозяйствующийСубъект, ДокументОбъект)
	
	ЗагруженныеВСД = Новый Массив;

	Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.vetDocument Цикл
		
		ВСД = Справочники.ВетеринарноСопроводительныйДокументВЕТИС.НайтиПоДаннымXDTO(ЭлементДанных, ПараметрыОбмена);
		
		ДанныеВСД = ИнтеграцияВЕТИС.ЗагрузитьВетеринарноСопроводительныйДокумент(
			ЭлементДанных,
			ВСД,
			ХозяйствующийСубъект,
			Предприятие,
			ПараметрыОбмена);
		
		Если ДанныеВСД <> Неопределено Тогда
			ЗагруженныеВСД.Добавить(ДанныеВСД);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДанныеВСД Из ЗагруженныеВСД Цикл
		
		ВСДСсылка = ДанныеВСД.Ссылка;
		ВСДОбъект = ДанныеВСД.Объект;
		
		Если ВСДОбъект.Тип <> Перечисления.ТипыВетеринарныхДокументовВЕТИС.Возвратный Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки = ДокументОбъект.Товары.Найти(
			ВСДСсылка,
			"ВетеринарноСопроводительныйДокументНаВозврат, ВетеринарноСопроводительныйДокумент");
		
		Если ДанныеСтроки <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Продукция",                   ВСДОбъект.Продукция);
		ПараметрыОтбора.Вставить("ВозвращаемоеКоличествоВЕТИС", ВСДОбъект.КоличествоВЕТИС);
		ПараметрыОтбора.Вставить("ЕдиницаИзмеренияВЕТИС",       ВСДОбъект.ЕдиницаИзмеренияВЕТИС);
		
		Если НЕ ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(ВСДОбъект.Продукция) Тогда
			
			Если ЗначениеЗаполнено(ВСДОбъект.СрокГодностиСтрока)
				Или ЗначениеЗаполнено(ВСДОбъект.СрокГодностиНачалоПериода)
				Или ЗначениеЗаполнено(ВСДОбъект.СрокГодностиКонецПериода) Тогда
				
				ПараметрыОтбора.Вставить("СрокГодностиСтрока",             ВСДОбъект.СрокГодностиСтрока);
				ПараметрыОтбора.Вставить("СрокГодностиТочностьЗаполнения", ВСДОбъект.СрокГодностиТочностьЗаполнения);
				ПараметрыОтбора.Вставить("СрокГодностиНачалоПериода",      ВСДОбъект.СрокГодностиНачалоПериода);
				ПараметрыОтбора.Вставить("СрокГодностиКонецПериода",       ВСДОбъект.СрокГодностиКонецПериода);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТЧНайдена = Ложь;
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ВетеринарноСопроводительныйДокументНаВозврат) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТЧ.ВетеринарноСопроводительныйДокументНаВозврат = ВСДСсылка;
			
			СтрокаТЧНайдена = Истина;
			
			Прервать;
			
		КонецЦикла;
		
		Если Не СтрокаТЧНайдена Тогда
			
			ТекстОшибки = НСтр("ru = 'При заполнении возвратного ВСД по документу %1 не удалось найти позицию документа по продукции %2 (количество %3 %4; срок годности %5)'");
			ТекстОшибки = СтрШаблон(ТекстОшибки,
				ДанныеДокумента.Документ,
				ВСДОбъект.Продукция,
				ВСДОбъект.КоличествоВЕТИС,
				ВСДОбъект.ЕдиницаИзмеренияВЕТИС,
				ВСДОбъект.СрокГодностиСтрока);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// ВСД расширенная этикетка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЭтикетокВЕТИС";
	КомандаПечати.Идентификатор = "ВСДРасширеннаяЭтикетка";
	КомандаПечати.Представление = НСтр("ru = 'Возвратные ВСД (сжатое представление с расширенной информацией)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

	// ВСД сжатая этикетка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЭтикетокВЕТИС";
	КомандаПечати.Идентификатор = "ВСДСжатаяЭтикетка";
	КомандаПечати.Представление = НСтр("ru = 'Возвратные ВСД (сжатое представление)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Акт о несоответствии
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ЗаполнениеАктаОНесоответствииВЕТИС";
	КомандаПечати.Идентификатор = "АктОНесоответствииВЕТИС";
	КомандаПечати.Представление = НСтр("ru='Акт о несоответствии ВетИС'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати,"НомерАктаНесоответствия","",ВидСравнения.НеРавно);
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыРасширеннойЭтикеткиВСД(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.Ссылка                                               КАК Ссылка,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Форма                                               КАК Форма,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Дата                                                КАК ДатаДокумента,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Статус                                              КАК Статус,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект                КАК Грузоотправитель,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент.ИНН КАК ГрузоотправительИНН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ТипТТН                                              КАК ТипТТН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.СерияТТН                                            КАК СерияТТН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.НомерТТН                                            КАК НомерТТН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаТТН                                             КАК ДатаТТН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузополучательХозяйствующийСубъект                 КАК Грузополучатель,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузополучательХозяйствующийСубъект.Контрагент.ИНН  КАК ГрузополучательИНН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузополучательПредприятие                          КАК ГрузополучательПредприятие,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузополучательПредприятие.АдресПредставление       КАК ГрузополучательПредприятиеАдрес,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Идентификатор                                       КАК Идентификатор,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Продукция                                           КАК Продукция,
	|	ВетеринарноСопроводительныйДокументВЕТИС.КоличествоВЕТИС                                     КАК Количество,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ЕдиницаИзмеренияВЕТИС                               КАК ЕдиницаИзмерения,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваСтрока                              КАК ДатаПроизводстваСтрока,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваТочностьЗаполнения                  КАК ДатаПроизводстваТочностьЗаполнения,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваНачалоПериода                       КАК ДатаПроизводстваНачалоПериода,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваКонецПериода                        КАК ДатаПроизводстваКонецПериода,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Производители.(
	|		Производитель                    КАК ПроизводительПредприятие,
	|		Производитель.АдресПредставление КАК ПроизводительПредприятиеАдрес)                      КАК Производители
	|ИЗ  Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ВходящаяТранспортнаяОперацияВЕТИСТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
	|	ПО ВходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокументНаВозврат = ВетеринарноСопроводительныйДокументВЕТИС.Ссылка
	|ГДЕ
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.Ссылка В(&Ссылка)
	|ИТОГИ ПО
	|	Ссылка";
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыСжатойЭтикеткиВСД(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.Ссылка                                               КАК Ссылка,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект                КАК Грузоотправитель,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент.ИНН КАК ГрузоотправительИНН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Идентификатор                                       КАК Идентификатор
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ВходящаяТранспортнаяОперацияВЕТИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
	|		ПО ВходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокументНаВозврат = ВетеринарноСопроводительныйДокументВЕТИС.Ссылка
	|ГДЕ
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.Ссылка В(&Ссылка)
	|ИТОГИ ПО
	|	Ссылка";
	Возврат Запрос.Выполнить();
	
КонецФункции

// Функция - Получить данные для печатной формы акта о несоответствии
//
// Параметры:
//  ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//  МассивОбъектов  - ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС, Массив - ссылка или массив ссылок на объекты которые нужно распечатать.
// 
// Возвращаемое значение:
//   - Структура - результат пакетного запроса, номера таблиц с данными для печати, вариант вывода расхождений
//
Функция ПолучитьДанныеДляПечатнойФормыАктаОНесоответствии(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВходящаяТранспортнаяОперацияВЕТИС.Ссылка КАК Ссылка,
	|	ВходящаяТранспортнаяОперацияВЕТИС.СерияАктаНесоответствия КАК СерияАктаНесоответствия,
	|	ВходящаяТранспортнаяОперацияВЕТИС.НомерАктаНесоответствия КАК НомерАктаНесоответствия,
	|	ВходящаяТранспортнаяОперацияВЕТИС.ДатаАктаНесоответствия КАК ДатаАктаНесоответствия,
	|	ВходящаяТранспортнаяОперацияВЕТИС.ПричинаНесоответствия КАК ПричинаНесоответствия,
	|	ПРЕДСТАВЛЕНИЕ(ВходящаяТранспортнаяОперацияВЕТИС.ГрузополучательПредприятие) КАК Предприятие,
	|	ПРЕДСТАВЛЕНИЕ(ВходящаяТранспортнаяОперацияВЕТИС.Ответственный) КАК Ответственный
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК ВходящаяТранспортнаяОперацияВЕТИС
	|ГДЕ
	|	ВходящаяТранспортнаяОперацияВЕТИС.Ссылка В (&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.Ссылка КАК Ссылка,
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент.КоличествоВЕТИС КАК КоличествоПлан,
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.КоличествоВЕТИС - ВходящаяТранспортнаяОперацияВЕТИСТовары.ВозвращаемоеКоличествоВЕТИС КАК КоличествоФакт,
	|	ПРЕДСТАВЛЕНИЕ(ВходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент.Продукция) КАК
	|		ПродукцияПланПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ВходящаяТранспортнаяОперацияВЕТИСТовары.Продукция) КАК ПродукцияФактПредставление,
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.ЕдиницаИзмеренияВЕТИС КАК ЕдиницаИзмеренияФакт,
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент.ЕдиницаИзмеренияВЕТИС КАК
	|		ЕдиницаИзмеренияПлан,
	|	ПРЕДСТАВЛЕНИЕ(ВходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент.ЕдиницаИзмеренияВЕТИС) КАК
	|		ЕдиницаИзмеренияПланПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ВходящаяТранспортнаяОперацияВЕТИСТовары.ЕдиницаИзмеренияВЕТИС) КАК ЕдиницаИзмеренияФактПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ВходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент.ГрузоотправительХозяйствующийСубъект) КАК
	|		ВладелецГруза,
	|	ПРЕДСТАВЛЕНИЕ(ВходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент.ГрузоотправительХозяйствующийСубъект.ИНН) КАК
	|		ВладелецГрузаИНН,
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент.Продукция КАК ПродукцияПлан,
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.Продукция КАК ПродукцияФакт,
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент.СрокГодностиСтрока КАК
	|		СрокГодностиСтрокаПлан,
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент.СрокГодностиТочностьЗаполнения КАК
	|		СрокГодностиТочностьЗаполненияПлан,
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент.СрокГодностиНачалоПериода КАК
	|		СрокГодностиНачалоПериодаПлан,
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент.СрокГодностиКонецПериода КАК
	|		СрокГодностиКонецПериодаПлан,
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.СрокГодностиСтрока КАК СрокГодностиСтрокаФакт,
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.СрокГодностиТочностьЗаполнения КАК СрокГодностиТочностьЗаполненияФакт,
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.СрокГодностиНачалоПериода КАК СрокГодностиНачалоПериодаФакт,
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.СрокГодностиКонецПериода КАК СрокГодностиКонецПериодаФакт,
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ВходящаяТранспортнаяОперацияВЕТИСТовары
	|ГДЕ
	|	ВходящаяТранспортнаяОперацияВЕТИСТовары.Ссылка В (&Ссылка)
	|ИТОГИ
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеВСД.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЕСТЬNULL(ВходящаяТранспортнаяОперацияВЕТИСУпаковкиВЕТИС.УровеньУпаковки, """") КАК УровеньУпаковки,
	|	ЕСТЬNULL(ВходящаяТранспортнаяОперацияВЕТИСУпаковкиВЕТИС.УпаковкаВЕТИС,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиВЕТИС.ПустаяСсылка)) КАК УпаковкаВЕТИС,
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ВходящаяТранспортнаяОперацияВЕТИСУпаковкиВЕТИС.УровеньУпаковки, """")) КАК
	|		УровеньУпаковкиПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ВходящаяТранспортнаяОперацияВЕТИСУпаковкиВЕТИС.УпаковкаВЕТИС, """")) КАК
	|		УпаковкаВЕТИСПредставление,
	|	ЕСТЬNULL(ВходящаяТранспортнаяОперацияВЕТИСУпаковкиВЕТИС.КоличествоУпаковокВЕТИС, 0) КАК КоличествоУпаковокВЕТИС,
	|	ИсходныеВСД.Ссылка КАК Ссылка,
	|	ИСТИНА КАК Факт
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ИсходныеВСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВходящаяТранспортнаяОперацияВЕТИС.УпаковкиВЕТИС КАК
	|			ВходящаяТранспортнаяОперацияВЕТИСУпаковкиВЕТИС
	|		ПО ИсходныеВСД.ИдентификаторСтроки = ВходящаяТранспортнаяОперацияВЕТИСУпаковкиВЕТИС.ИдентификаторСтрокиТовары
	|		И ИсходныеВСД.Ссылка = ВходящаяТранспортнаяОперацияВЕТИСУпаковкиВЕТИС.Ссылка
	|ГДЕ
	|	ИсходныеВСД.Ссылка В (&Ссылка)
	|	И ВходящаяТранспортнаяОперацияВЕТИСУпаковкиВЕТИС.Ссылка В (&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсходныеВСД.ИдентификаторСтроки,
	|	ЕСТЬNULL(ВетеринарноСопроводительныйДокументВЕТИСУпаковкиВЕТИС.УровеньУпаковки, """"),
	|	ЕСТЬNULL(ВетеринарноСопроводительныйДокументВЕТИСУпаковкиВЕТИС.УпаковкаВЕТИС,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиВЕТИС.ПустаяСсылка)),
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ВетеринарноСопроводительныйДокументВЕТИСУпаковкиВЕТИС.УровеньУпаковки, """")),
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ВетеринарноСопроводительныйДокументВЕТИСУпаковкиВЕТИС.УпаковкаВЕТИС, """")),
	|	ЕСТЬNULL(ВетеринарноСопроводительныйДокументВЕТИСУпаковкиВЕТИС.КоличествоУпаковокВЕТИС, 0),
	|	ИсходныеВСД.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ИсходныеВСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетеринарноСопроводительныйДокументВЕТИС.УпаковкиВЕТИС КАК
	|			ВетеринарноСопроводительныйДокументВЕТИСУпаковкиВЕТИС
	|		ПО ИсходныеВСД.ВетеринарноСопроводительныйДокумент = ВетеринарноСопроводительныйДокументВЕТИСУпаковкиВЕТИС.Ссылка
	|ГДЕ
	|	ИсходныеВСД.Ссылка В (&Ссылка)
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ИдентификаторСтроки,
	|	УровеньУпаковки,
	|	УпаковкаВЕТИС,
	|	КоличествоУпаковокВЕТИС,
	|	Факт
	|ИТОГИ
	|ПО
	|	Ссылка,
	|	ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеВСД.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ИсходныеВСД.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК Факт,
	|	ВетеринарноСопроводительныйДокументВЕТИСПроизводственныеПартии.ИдентификаторПартии КАК ИдентификаторПартии
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ИсходныеВСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ПроизводственныеПартии КАК
	|			ВетеринарноСопроводительныйДокументВЕТИСПроизводственныеПартии
	|		ПО ИсходныеВСД.ВетеринарноСопроводительныйДокумент = ВетеринарноСопроводительныйДокументВЕТИСПроизводственныеПартии.Ссылка
	|ГДЕ
	|	ИсходныеВСД.Ссылка В (&Ссылка)
	|	И ВетеринарноСопроводительныйДокументВЕТИСПроизводственныеПартии.ИдентификаторПартии <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсходныеВСД.ИдентификаторСтроки,
	|	ИсходныеВСД.Ссылка,
	|	ИСТИНА,
	|	ИсходныеВСД.ИдентификаторПартии
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ИсходныеВСД
	|ГДЕ
	|	ИсходныеВСД.Ссылка В (&Ссылка)
	|	И ИсходныеВСД.ИдентификаторПартии <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсходныеВСД.ИдентификаторСтроки,
	|	ИсходныеВСД.Ссылка,
	|	ИСТИНА,
	|	ТоварыУточнение.ИдентификаторПартии
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ИсходныеВСД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящаяТранспортнаяОперацияВЕТИС.ТоварыУточнение КАК ТоварыУточнение
	|		ПО ИсходныеВСД.Ссылка = ТоварыУточнение.Ссылка
	|		И ИсходныеВСД.ИдентификаторСтроки = ТоварыУточнение.ИдентификаторСтроки
	|		И ТоварыУточнение.ИдентификаторПартии <> """"
	|ГДЕ
	|	ИсходныеВСД.Ссылка В (&Ссылка)
	|	И ТоварыУточнение.Ссылка В (&Ссылка)
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ИдентификаторСтроки,
	|	ИдентификаторПартии,
	|	Факт
	|ИТОГИ
	|ПО
	|	Ссылка,
	|	ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеВСД.ВетеринарноСопроводительныйДокумент КАК ВетеринарноСопроводительныйДокумент,
	|	ИсходныеВСД.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ИсходныеВСД.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВетеринарноСопроводительныйДокументВЕТИСМаршрут.НомерСтроки) КАК НомерСтроки,
	|	ИсходныеВСД.Ссылка.ГрузоотправительПредприятие = ИсходныеВСД.Ссылка.ГрузополучательПредприятие КАК БезПеревозки
	|ПОМЕСТИТЬ ДанныеМаршрутов
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ИсходныеВСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетеринарноСопроводительныйДокументВЕТИС.Маршрут КАК
	|			ВетеринарноСопроводительныйДокументВЕТИСМаршрут
	|		ПО ИсходныеВСД.ВетеринарноСопроводительныйДокумент = ВетеринарноСопроводительныйДокументВЕТИСМаршрут.Ссылка
	|ГДЕ
	|	ИсходныеВСД.Ссылка В (&Ссылка)
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеВСД.ВетеринарноСопроводительныйДокумент,
	|	ИсходныеВСД.ИдентификаторСтроки,
	|	ИсходныеВСД.Ссылка,
	|	ИсходныеВСД.Ссылка.ГрузоотправительПредприятие = ИсходныеВСД.Ссылка.ГрузополучательПредприятие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВетеринарноСопроводительныйДокументВЕТИСМаршрут.НомерТранспортногоСредства КАК НомерТранспортногоСредстваПлан,
	|	ВетеринарноСопроводительныйДокументВЕТИСМаршрут.НомерАвтомобильногоПрицепа КАК НомерАвтомобильногоПрицепаПлан,
	|	ВетеринарноСопроводительныйДокументВЕТИСМаршрут.НомерАвтомобильногоКонтейнера КАК НомерАвтомобильногоКонтейнераПлан,
	|	ВетеринарноСопроводительныйДокументВЕТИСМаршрут.ТипТранспорта КАК ТипТранспортаПлан,
	|	ВетеринарноСопроводительныйДокументВЕТИС.СерияТТН КАК СерияТТНПлан,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаТТН КАК ДатаТТНПлан,
	|	ВетеринарноСопроводительныйДокументВЕТИС.НомерТТН КАК НомерТТНПлан,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ТипТТН КАК ТипТТНПлан,
	|	ДанныеМаршрутов.Ссылка.СерияТТН КАК СерияТТНФакт,
	|	ДанныеМаршрутов.Ссылка.ДатаТТН КАК ДатаТТНФакт,
	|	ДанныеМаршрутов.Ссылка.НомерТТН КАК НомерТТНФакт,
	|	ДанныеМаршрутов.Ссылка.ТипТТН КАК ТипТТНФакт,
	|	ДанныеМаршрутов.Ссылка.НомерТранспортногоСредства КАК НомерТранспортногоСредстваФакт,
	|	ДанныеМаршрутов.Ссылка.НомерАвтомобильногоПрицепа КАК НомерАвтомобильногоПрицепаФакт,
	|	ДанныеМаршрутов.Ссылка.НомерАвтомобильногоКонтейнера КАК НомерАвтомобильногоКонтейнераФакт,
	|	ДанныеМаршрутов.Ссылка.ТипТранспорта КАК ТипТранспортаФакт,
	|	ДанныеМаршрутов.Ссылка КАК Ссылка,
	|	ДанныеМаршрутов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДанныеМаршрутов.БезПеревозки КАК БезПеревозки
	|ИЗ
	|	ДанныеМаршрутов КАК ДанныеМаршрутов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
	|		ПО ДанныеМаршрутов.ВетеринарноСопроводительныйДокумент = ВетеринарноСопроводительныйДокументВЕТИС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетеринарноСопроводительныйДокументВЕТИС.Маршрут КАК
	|			ВетеринарноСопроводительныйДокументВЕТИСМаршрут
	|		ПО ДанныеМаршрутов.ВетеринарноСопроводительныйДокумент = ВетеринарноСопроводительныйДокументВЕТИСМаршрут.Ссылка
	|		И ДанныеМаршрутов.НомерСтроки = ВетеринарноСопроводительныйДокументВЕТИСМаршрут.НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(БезПеревозки)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеВСД.Ссылка КАК Ссылка,
	|	ИсходныеВСД.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВетеринарноСопроводительныйДокументВЕТИСПроизводители.Производитель КАК Производитель,
	|	ПРЕДСТАВЛЕНИЕ(ВетеринарноСопроводительныйДокументВЕТИСПроизводители.Производитель) КАК ПроизводительПредставление,
	|	ЛОЖЬ КАК Факт
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ИсходныеВСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетеринарноСопроводительныйДокументВЕТИС.Производители КАК
	|			ВетеринарноСопроводительныйДокументВЕТИСПроизводители
	|		ПО ИсходныеВСД.ВетеринарноСопроводительныйДокумент = ВетеринарноСопроводительныйДокументВЕТИСПроизводители.Ссылка
	|ГДЕ
	|	ИсходныеВСД.Ссылка В (&Ссылка)
	|ИТОГИ
	|ПО
	|	Ссылка,
	|	ИдентификаторСтроки";
	Результат = Запрос.ВыполнитьПакет();
	
	ДанныеПечатнойФормы = Новый Структура;
	ДанныеПечатнойФормы.Вставить("РезультатЗапроса", Результат);
	ДанныеПечатнойФормы.Вставить("Шапка",            0);
	ДанныеПечатнойФормы.Вставить("Товары",           1);
	ДанныеПечатнойФормы.Вставить("Упаковки",         2);
	ДанныеПечатнойФормы.Вставить("Партии",           3);
	ДанныеПечатнойФормы.Вставить("Маршрут",          5);
	ДанныеПечатнойФормы.Вставить("Производители",    6);
	
	Возврат ДанныеПечатнойФормы;

КонецФункции

#КонецОбласти

Функция ТипДокумента()
	
	Возврат Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС;
	
КонецФункции

Функция ВыборкаДанныхВСД(МассивВСД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", МассивВСД);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент КАК ВетеринарноСопроводительныйДокумент,
	|	МАКСИМУМ(ИсходящаяТранспортнаяОперацияВЕТИСТовары.Номенклатура)              КАК Номенклатура,
	|	МАКСИМУМ(ИсходящаяТранспортнаяОперацияВЕТИСТовары.Характеристика)            КАК Характеристика,
	|	МАКСИМУМ(ИсходящаяТранспортнаяОперацияВЕТИСТовары.Серия)                     КАК Серия
	|ПОМЕСТИТЬ
	|	ИсходящаяТранспортнаяОперацияВЕТИСТовары
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ИсходящаяТранспортнаяОперацияВЕТИСТовары
	|ГДЕ
	|	ИсходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент В (&Ссылки)
	|СГРУППИРОВАТЬ ПО
	|	ИсходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсходящаяТранспортнаяОперацияВЕТИСТовары.Номенклатура)     = 1
	|	И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсходящаяТранспортнаяОперацияВЕТИСТовары.Характеристика) = 1
	|	И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсходящаяТранспортнаяОперацияВЕТИСТовары.Серия)          = 1
	|;
	|
	|ВЫБРАТЬ
	|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка                             КАК ВетеринарноСопроводительныйДокумент,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Продукция                          КАК Продукция,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Продукция.ВидПродукции             КАК ВидПродукцииВСД,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Цель                               КАК Цель,
	|	ВетеринарноСопроводительныйДокументВЕТИС.СкоропортящаясяПродукция           КАК СкоропортящаясяПродукция,
	|	ВетеринарноСопроводительныйДокументВЕТИС.НизкокачественнаяПродукция         КАК НизкокачественнаяПродукция,
	|	ВетеринарноСопроводительныйДокументВЕТИС.СтранаПроизводства                 КАК СтранаПроизводства,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваСтрока             КАК ДатаПроизводстваСтрока,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваТочностьЗаполнения КАК ДатаПроизводстваТочностьЗаполнения,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваНачалоПериода      КАК ДатаПроизводстваНачалоПериода,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваКонецПериода       КАК ДатаПроизводстваКонецПериода,
	|	ВетеринарноСопроводительныйДокументВЕТИС.СрокГодностиСтрока                 КАК СрокГодностиСтрока,
	|	ВетеринарноСопроводительныйДокументВЕТИС.СрокГодностиТочностьЗаполнения     КАК СрокГодностиТочностьЗаполнения,
	|	ВетеринарноСопроводительныйДокументВЕТИС.СрокГодностиНачалоПериода          КАК СрокГодностиНачалоПериода,
	|	ВетеринарноСопроводительныйДокументВЕТИС.СрокГодностиКонецПериода           КАК СрокГодностиКонецПериода,
	|	ВетеринарноСопроводительныйДокументВЕТИС.КоличествоВЕТИС                    КАК КоличествоВЕТИС,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ЕдиницаИзмеренияВЕТИС              КАК ЕдиницаИзмеренияВЕТИС,
	|	ИсходящаяТранспортнаяОперацияВЕТИСТовары.Номенклатура                       КАК Номенклатура,
	|	ИсходящаяТранспортнаяОперацияВЕТИСТовары.Характеристика                     КАК Характеристика,
	|	ИсходящаяТранспортнаяОперацияВЕТИСТовары.Серия                              КАК Серия,
	|	ВетеринарноСопроводительныйДокументВЕТИС.УпаковкиВЕТИС.(
	|		ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		УровеньУпаковки КАК УровеньУпаковки,
	|		УпаковкаВЕТИС КАК УпаковкаВЕТИС,
	|		КоличествоУпаковокВЕТИС КАК КоличествоУпаковокВЕТИС
	|	)                                                                           КАК УпаковкиВЕТИС,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ШтрихкодыУпаковок.(
	|		ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		Штрихкод КАК Штрихкод,
	|		ТипМаркировки КАК ТипМаркировки
	|	)                                                                           КАК ШтрихкодыУпаковок,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Производители.(
	|		Производитель КАК Производитель,
	|		"""" КАК НомераПредприятий
	|	) КАК Производители,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ПроизводственныеПартии.(
	|		ИдентификаторПартии КАК ИдентификаторПартии
	|	)                                                                           КАК ПроизводственныеПартии
	|ИЗ
	|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
	|	ЛЕВОЕ СОЕДИНЕНИЕ ИсходящаяТранспортнаяОперацияВЕТИСТовары КАК ИсходящаяТранспортнаяОперацияВЕТИСТовары
	|		ПО ВетеринарноСопроводительныйДокументВЕТИС.Ссылка = ИсходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент
	|ГДЕ
	|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка В (&Ссылки)";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ВыборкаДанныхШапкиВСД(МассивВСД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МассивВСД);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект КАК ГрузоотправительХозяйствующийСубъект,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительПредприятие КАК ГрузоотправительПредприятие,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузополучательХозяйствующийСубъект КАК ГрузополучательХозяйствующийСубъект,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузополучательПредприятие КАК ГрузополучательПредприятие,
	|	ЕСТЬNULL(ХозяйствующиеСубъектыВЕТИСПредприятия.ТорговыйОбъект, НЕОПРЕДЕЛЕНО) КАК ТорговыйОбъект,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ПеревозчикХозяйствующийСубъект КАК ПеревозчикХозяйствующийСубъект,
	|	ВетеринарноСопроводительныйДокументВЕТИС.СпособХранения КАК СпособХранения,
	|	ВетеринарноСопроводительныйДокументВЕТИС.СерияТТН КАК СерияТТН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаТТН КАК ДатаТТН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.НомерТТН КАК НомерТТН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ТипТТН КАК ТипТТН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Идентификатор = """" КАК ЭтоБумажныйВСД,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Маршрут.(
	|		Предприятие КАК Предприятие,
	|		Адрес КАК Адрес,
	|		АдресПредставление КАК АдресПредставление,
	|		ДанныеАдреса КАК ДанныеАдреса,
	|		СПерегрузкой КАК СПерегрузкой,
	|		ТипТранспорта КАК ТипТранспорта,
	|		НомерТранспортногоСредства КАК НомерТранспортногоСредства,
	|		НомерАвтомобильногоПрицепа КАК НомерАвтомобильногоПрицепа,
	|		НомерАвтомобильногоКонтейнера КАК НомерАвтомобильногоКонтейнера
	|	) КАК Маршрут
	|ИЗ
	|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК ХозяйствующиеСубъектыВЕТИСПредприятия
	|		ПО (ХозяйствующиеСубъектыВЕТИСПредприятия.Ссылка = ВетеринарноСопроводительныйДокументВЕТИС.ГрузополучательХозяйствующийСубъект)
	|			И (ХозяйствующиеСубъектыВЕТИСПредприятия.Предприятие = ВетеринарноСопроводительныйДокументВЕТИС.ГрузополучательПредприятие)
	|ГДЕ
	|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка В(&Ссылка)";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти

#КонецЕсли